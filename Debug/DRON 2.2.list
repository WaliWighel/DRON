
DRON 2.2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00006000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001e560  080002d0  080002d0  000062d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001e28  0801e830  0801e830  00024830  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08020658  08020658  00026658  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08020660  08020660  00026660  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08020664  08020664  00026664  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000078  24000000  08020668  00027000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000834  24000078  080206e0  00027078  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240008ac  080206e0  000278ac  2**0
                  ALLOC
  9 .IRAM         000041e6  00000000  00000000  00001000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 10 .DRAM         00000000  20000000  20000000  00049710  2**0
                  CONTENTS
 11 .RAM1         00021860  24000eb0  24000eb0  00027eb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .ARM.attributes 0000002e  00000000  00000000  00049710  2**0
                  CONTENTS, READONLY
 13 .debug_info   00031eb5  00000000  00000000  0004973e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005efb  00000000  00000000  0007b5f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002468  00000000  00000000  000814f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001c33  00000000  00000000  00083958  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0003c9c6  00000000  00000000  0008558b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003868f  00000000  00000000  000c1f51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0016e1ab  00000000  00000000  000fa5e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0026878b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00009fc8  00000000  00000000  002687d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004d  00000000  00000000  00272798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000078 	.word	0x24000078
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0801e818 	.word	0x0801e818

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	2400007c 	.word	0x2400007c
 800030c:	0801e818 	.word	0x0801e818

08000310 <__aeabi_ldivmod>:
 8000310:	b97b      	cbnz	r3, 8000332 <__aeabi_ldivmod+0x22>
 8000312:	b972      	cbnz	r2, 8000332 <__aeabi_ldivmod+0x22>
 8000314:	2900      	cmp	r1, #0
 8000316:	bfbe      	ittt	lt
 8000318:	2000      	movlt	r0, #0
 800031a:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 800031e:	e006      	blt.n	800032e <__aeabi_ldivmod+0x1e>
 8000320:	bf08      	it	eq
 8000322:	2800      	cmpeq	r0, #0
 8000324:	bf1c      	itt	ne
 8000326:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 800032a:	f04f 30ff 	movne.w	r0, #4294967295
 800032e:	f000 b9b5 	b.w	800069c <__aeabi_idiv0>
 8000332:	f1ad 0c08 	sub.w	ip, sp, #8
 8000336:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800033a:	2900      	cmp	r1, #0
 800033c:	db09      	blt.n	8000352 <__aeabi_ldivmod+0x42>
 800033e:	2b00      	cmp	r3, #0
 8000340:	db1a      	blt.n	8000378 <__aeabi_ldivmod+0x68>
 8000342:	f000 f84d 	bl	80003e0 <__udivmoddi4>
 8000346:	f8dd e004 	ldr.w	lr, [sp, #4]
 800034a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034e:	b004      	add	sp, #16
 8000350:	4770      	bx	lr
 8000352:	4240      	negs	r0, r0
 8000354:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000358:	2b00      	cmp	r3, #0
 800035a:	db1b      	blt.n	8000394 <__aeabi_ldivmod+0x84>
 800035c:	f000 f840 	bl	80003e0 <__udivmoddi4>
 8000360:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000364:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000368:	b004      	add	sp, #16
 800036a:	4240      	negs	r0, r0
 800036c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000370:	4252      	negs	r2, r2
 8000372:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000376:	4770      	bx	lr
 8000378:	4252      	negs	r2, r2
 800037a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800037e:	f000 f82f 	bl	80003e0 <__udivmoddi4>
 8000382:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000386:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800038a:	b004      	add	sp, #16
 800038c:	4240      	negs	r0, r0
 800038e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000392:	4770      	bx	lr
 8000394:	4252      	negs	r2, r2
 8000396:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800039a:	f000 f821 	bl	80003e0 <__udivmoddi4>
 800039e:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003a6:	b004      	add	sp, #16
 80003a8:	4252      	negs	r2, r2
 80003aa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003ae:	4770      	bx	lr

080003b0 <__aeabi_uldivmod>:
 80003b0:	b953      	cbnz	r3, 80003c8 <__aeabi_uldivmod+0x18>
 80003b2:	b94a      	cbnz	r2, 80003c8 <__aeabi_uldivmod+0x18>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bf08      	it	eq
 80003b8:	2800      	cmpeq	r0, #0
 80003ba:	bf1c      	itt	ne
 80003bc:	f04f 31ff 	movne.w	r1, #4294967295
 80003c0:	f04f 30ff 	movne.w	r0, #4294967295
 80003c4:	f000 b96a 	b.w	800069c <__aeabi_idiv0>
 80003c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003d0:	f000 f806 	bl	80003e0 <__udivmoddi4>
 80003d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003dc:	b004      	add	sp, #16
 80003de:	4770      	bx	lr

080003e0 <__udivmoddi4>:
 80003e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003e4:	9d08      	ldr	r5, [sp, #32]
 80003e6:	460c      	mov	r4, r1
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d14e      	bne.n	800048a <__udivmoddi4+0xaa>
 80003ec:	4694      	mov	ip, r2
 80003ee:	458c      	cmp	ip, r1
 80003f0:	4686      	mov	lr, r0
 80003f2:	fab2 f282 	clz	r2, r2
 80003f6:	d962      	bls.n	80004be <__udivmoddi4+0xde>
 80003f8:	b14a      	cbz	r2, 800040e <__udivmoddi4+0x2e>
 80003fa:	f1c2 0320 	rsb	r3, r2, #32
 80003fe:	4091      	lsls	r1, r2
 8000400:	fa20 f303 	lsr.w	r3, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	4319      	orrs	r1, r3
 800040a:	fa00 fe02 	lsl.w	lr, r0, r2
 800040e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000412:	fa1f f68c 	uxth.w	r6, ip
 8000416:	fbb1 f4f7 	udiv	r4, r1, r7
 800041a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041e:	fb07 1114 	mls	r1, r7, r4, r1
 8000422:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000426:	fb04 f106 	mul.w	r1, r4, r6
 800042a:	4299      	cmp	r1, r3
 800042c:	d90a      	bls.n	8000444 <__udivmoddi4+0x64>
 800042e:	eb1c 0303 	adds.w	r3, ip, r3
 8000432:	f104 30ff 	add.w	r0, r4, #4294967295
 8000436:	f080 8112 	bcs.w	800065e <__udivmoddi4+0x27e>
 800043a:	4299      	cmp	r1, r3
 800043c:	f240 810f 	bls.w	800065e <__udivmoddi4+0x27e>
 8000440:	3c02      	subs	r4, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a59      	subs	r1, r3, r1
 8000446:	fa1f f38e 	uxth.w	r3, lr
 800044a:	fbb1 f0f7 	udiv	r0, r1, r7
 800044e:	fb07 1110 	mls	r1, r7, r0, r1
 8000452:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000456:	fb00 f606 	mul.w	r6, r0, r6
 800045a:	429e      	cmp	r6, r3
 800045c:	d90a      	bls.n	8000474 <__udivmoddi4+0x94>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 31ff 	add.w	r1, r0, #4294967295
 8000466:	f080 80fc 	bcs.w	8000662 <__udivmoddi4+0x282>
 800046a:	429e      	cmp	r6, r3
 800046c:	f240 80f9 	bls.w	8000662 <__udivmoddi4+0x282>
 8000470:	4463      	add	r3, ip
 8000472:	3802      	subs	r0, #2
 8000474:	1b9b      	subs	r3, r3, r6
 8000476:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800047a:	2100      	movs	r1, #0
 800047c:	b11d      	cbz	r5, 8000486 <__udivmoddi4+0xa6>
 800047e:	40d3      	lsrs	r3, r2
 8000480:	2200      	movs	r2, #0
 8000482:	e9c5 3200 	strd	r3, r2, [r5]
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	428b      	cmp	r3, r1
 800048c:	d905      	bls.n	800049a <__udivmoddi4+0xba>
 800048e:	b10d      	cbz	r5, 8000494 <__udivmoddi4+0xb4>
 8000490:	e9c5 0100 	strd	r0, r1, [r5]
 8000494:	2100      	movs	r1, #0
 8000496:	4608      	mov	r0, r1
 8000498:	e7f5      	b.n	8000486 <__udivmoddi4+0xa6>
 800049a:	fab3 f183 	clz	r1, r3
 800049e:	2900      	cmp	r1, #0
 80004a0:	d146      	bne.n	8000530 <__udivmoddi4+0x150>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d302      	bcc.n	80004ac <__udivmoddi4+0xcc>
 80004a6:	4290      	cmp	r0, r2
 80004a8:	f0c0 80f0 	bcc.w	800068c <__udivmoddi4+0x2ac>
 80004ac:	1a86      	subs	r6, r0, r2
 80004ae:	eb64 0303 	sbc.w	r3, r4, r3
 80004b2:	2001      	movs	r0, #1
 80004b4:	2d00      	cmp	r5, #0
 80004b6:	d0e6      	beq.n	8000486 <__udivmoddi4+0xa6>
 80004b8:	e9c5 6300 	strd	r6, r3, [r5]
 80004bc:	e7e3      	b.n	8000486 <__udivmoddi4+0xa6>
 80004be:	2a00      	cmp	r2, #0
 80004c0:	f040 8090 	bne.w	80005e4 <__udivmoddi4+0x204>
 80004c4:	eba1 040c 	sub.w	r4, r1, ip
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa1f f78c 	uxth.w	r7, ip
 80004d0:	2101      	movs	r1, #1
 80004d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004da:	fb08 4416 	mls	r4, r8, r6, r4
 80004de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004e2:	fb07 f006 	mul.w	r0, r7, r6
 80004e6:	4298      	cmp	r0, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x11c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80004f2:	d202      	bcs.n	80004fa <__udivmoddi4+0x11a>
 80004f4:	4298      	cmp	r0, r3
 80004f6:	f200 80cd 	bhi.w	8000694 <__udivmoddi4+0x2b4>
 80004fa:	4626      	mov	r6, r4
 80004fc:	1a1c      	subs	r4, r3, r0
 80004fe:	fa1f f38e 	uxth.w	r3, lr
 8000502:	fbb4 f0f8 	udiv	r0, r4, r8
 8000506:	fb08 4410 	mls	r4, r8, r0, r4
 800050a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800050e:	fb00 f707 	mul.w	r7, r0, r7
 8000512:	429f      	cmp	r7, r3
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x148>
 8000516:	eb1c 0303 	adds.w	r3, ip, r3
 800051a:	f100 34ff 	add.w	r4, r0, #4294967295
 800051e:	d202      	bcs.n	8000526 <__udivmoddi4+0x146>
 8000520:	429f      	cmp	r7, r3
 8000522:	f200 80b0 	bhi.w	8000686 <__udivmoddi4+0x2a6>
 8000526:	4620      	mov	r0, r4
 8000528:	1bdb      	subs	r3, r3, r7
 800052a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800052e:	e7a5      	b.n	800047c <__udivmoddi4+0x9c>
 8000530:	f1c1 0620 	rsb	r6, r1, #32
 8000534:	408b      	lsls	r3, r1
 8000536:	fa22 f706 	lsr.w	r7, r2, r6
 800053a:	431f      	orrs	r7, r3
 800053c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000540:	fa04 f301 	lsl.w	r3, r4, r1
 8000544:	ea43 030c 	orr.w	r3, r3, ip
 8000548:	40f4      	lsrs	r4, r6
 800054a:	fa00 f801 	lsl.w	r8, r0, r1
 800054e:	0c38      	lsrs	r0, r7, #16
 8000550:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000554:	fbb4 fef0 	udiv	lr, r4, r0
 8000558:	fa1f fc87 	uxth.w	ip, r7
 800055c:	fb00 441e 	mls	r4, r0, lr, r4
 8000560:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000564:	fb0e f90c 	mul.w	r9, lr, ip
 8000568:	45a1      	cmp	r9, r4
 800056a:	fa02 f201 	lsl.w	r2, r2, r1
 800056e:	d90a      	bls.n	8000586 <__udivmoddi4+0x1a6>
 8000570:	193c      	adds	r4, r7, r4
 8000572:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000576:	f080 8084 	bcs.w	8000682 <__udivmoddi4+0x2a2>
 800057a:	45a1      	cmp	r9, r4
 800057c:	f240 8081 	bls.w	8000682 <__udivmoddi4+0x2a2>
 8000580:	f1ae 0e02 	sub.w	lr, lr, #2
 8000584:	443c      	add	r4, r7
 8000586:	eba4 0409 	sub.w	r4, r4, r9
 800058a:	fa1f f983 	uxth.w	r9, r3
 800058e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000592:	fb00 4413 	mls	r4, r0, r3, r4
 8000596:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800059a:	fb03 fc0c 	mul.w	ip, r3, ip
 800059e:	45a4      	cmp	ip, r4
 80005a0:	d907      	bls.n	80005b2 <__udivmoddi4+0x1d2>
 80005a2:	193c      	adds	r4, r7, r4
 80005a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80005a8:	d267      	bcs.n	800067a <__udivmoddi4+0x29a>
 80005aa:	45a4      	cmp	ip, r4
 80005ac:	d965      	bls.n	800067a <__udivmoddi4+0x29a>
 80005ae:	3b02      	subs	r3, #2
 80005b0:	443c      	add	r4, r7
 80005b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80005b6:	fba0 9302 	umull	r9, r3, r0, r2
 80005ba:	eba4 040c 	sub.w	r4, r4, ip
 80005be:	429c      	cmp	r4, r3
 80005c0:	46ce      	mov	lr, r9
 80005c2:	469c      	mov	ip, r3
 80005c4:	d351      	bcc.n	800066a <__udivmoddi4+0x28a>
 80005c6:	d04e      	beq.n	8000666 <__udivmoddi4+0x286>
 80005c8:	b155      	cbz	r5, 80005e0 <__udivmoddi4+0x200>
 80005ca:	ebb8 030e 	subs.w	r3, r8, lr
 80005ce:	eb64 040c 	sbc.w	r4, r4, ip
 80005d2:	fa04 f606 	lsl.w	r6, r4, r6
 80005d6:	40cb      	lsrs	r3, r1
 80005d8:	431e      	orrs	r6, r3
 80005da:	40cc      	lsrs	r4, r1
 80005dc:	e9c5 6400 	strd	r6, r4, [r5]
 80005e0:	2100      	movs	r1, #0
 80005e2:	e750      	b.n	8000486 <__udivmoddi4+0xa6>
 80005e4:	f1c2 0320 	rsb	r3, r2, #32
 80005e8:	fa20 f103 	lsr.w	r1, r0, r3
 80005ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80005f0:	fa24 f303 	lsr.w	r3, r4, r3
 80005f4:	4094      	lsls	r4, r2
 80005f6:	430c      	orrs	r4, r1
 80005f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000600:	fa1f f78c 	uxth.w	r7, ip
 8000604:	fbb3 f0f8 	udiv	r0, r3, r8
 8000608:	fb08 3110 	mls	r1, r8, r0, r3
 800060c:	0c23      	lsrs	r3, r4, #16
 800060e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000612:	fb00 f107 	mul.w	r1, r0, r7
 8000616:	4299      	cmp	r1, r3
 8000618:	d908      	bls.n	800062c <__udivmoddi4+0x24c>
 800061a:	eb1c 0303 	adds.w	r3, ip, r3
 800061e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000622:	d22c      	bcs.n	800067e <__udivmoddi4+0x29e>
 8000624:	4299      	cmp	r1, r3
 8000626:	d92a      	bls.n	800067e <__udivmoddi4+0x29e>
 8000628:	3802      	subs	r0, #2
 800062a:	4463      	add	r3, ip
 800062c:	1a5b      	subs	r3, r3, r1
 800062e:	b2a4      	uxth	r4, r4
 8000630:	fbb3 f1f8 	udiv	r1, r3, r8
 8000634:	fb08 3311 	mls	r3, r8, r1, r3
 8000638:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800063c:	fb01 f307 	mul.w	r3, r1, r7
 8000640:	42a3      	cmp	r3, r4
 8000642:	d908      	bls.n	8000656 <__udivmoddi4+0x276>
 8000644:	eb1c 0404 	adds.w	r4, ip, r4
 8000648:	f101 36ff 	add.w	r6, r1, #4294967295
 800064c:	d213      	bcs.n	8000676 <__udivmoddi4+0x296>
 800064e:	42a3      	cmp	r3, r4
 8000650:	d911      	bls.n	8000676 <__udivmoddi4+0x296>
 8000652:	3902      	subs	r1, #2
 8000654:	4464      	add	r4, ip
 8000656:	1ae4      	subs	r4, r4, r3
 8000658:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800065c:	e739      	b.n	80004d2 <__udivmoddi4+0xf2>
 800065e:	4604      	mov	r4, r0
 8000660:	e6f0      	b.n	8000444 <__udivmoddi4+0x64>
 8000662:	4608      	mov	r0, r1
 8000664:	e706      	b.n	8000474 <__udivmoddi4+0x94>
 8000666:	45c8      	cmp	r8, r9
 8000668:	d2ae      	bcs.n	80005c8 <__udivmoddi4+0x1e8>
 800066a:	ebb9 0e02 	subs.w	lr, r9, r2
 800066e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000672:	3801      	subs	r0, #1
 8000674:	e7a8      	b.n	80005c8 <__udivmoddi4+0x1e8>
 8000676:	4631      	mov	r1, r6
 8000678:	e7ed      	b.n	8000656 <__udivmoddi4+0x276>
 800067a:	4603      	mov	r3, r0
 800067c:	e799      	b.n	80005b2 <__udivmoddi4+0x1d2>
 800067e:	4630      	mov	r0, r6
 8000680:	e7d4      	b.n	800062c <__udivmoddi4+0x24c>
 8000682:	46d6      	mov	lr, sl
 8000684:	e77f      	b.n	8000586 <__udivmoddi4+0x1a6>
 8000686:	4463      	add	r3, ip
 8000688:	3802      	subs	r0, #2
 800068a:	e74d      	b.n	8000528 <__udivmoddi4+0x148>
 800068c:	4606      	mov	r6, r0
 800068e:	4623      	mov	r3, r4
 8000690:	4608      	mov	r0, r1
 8000692:	e70f      	b.n	80004b4 <__udivmoddi4+0xd4>
 8000694:	3e02      	subs	r6, #2
 8000696:	4463      	add	r3, ip
 8000698:	e730      	b.n	80004fc <__udivmoddi4+0x11c>
 800069a:	bf00      	nop

0800069c <__aeabi_idiv0>:
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop

080006a0 <BMP180_read_ID>:

static I2C_HandleTypeDef *hi2c_BMP180;
extern uint8_t BMP180_Press_IT[3], BMP180_Temp_IT[2];
extern uint8_t BMP180_IRQ;

uint8_t BMP180_read_ID(void){// comunication = 0x55
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b086      	sub	sp, #24
 80006a4:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_BMP180, BMP180_ADDRES, id_register, 1, &data, 1, 100);
 80006a6:	4b09      	ldr	r3, [pc, #36]	@ (80006cc <BMP180_read_ID+0x2c>)
 80006a8:	6818      	ldr	r0, [r3, #0]
 80006aa:	2364      	movs	r3, #100	@ 0x64
 80006ac:	9302      	str	r3, [sp, #8]
 80006ae:	2301      	movs	r3, #1
 80006b0:	9301      	str	r3, [sp, #4]
 80006b2:	1dfb      	adds	r3, r7, #7
 80006b4:	9300      	str	r3, [sp, #0]
 80006b6:	2301      	movs	r3, #1
 80006b8:	22d0      	movs	r2, #208	@ 0xd0
 80006ba:	21ee      	movs	r1, #238	@ 0xee
 80006bc:	f00e f8e6 	bl	800e88c <HAL_I2C_Mem_Read>
	return data;
 80006c0:	79fb      	ldrb	r3, [r7, #7]
}
 80006c2:	4618      	mov	r0, r3
 80006c4:	3708      	adds	r7, #8
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	24000094 	.word	0x24000094

080006d0 <BMP180_init>:

uint8_t BMP180_init(I2C_HandleTypeDef*hi2c){
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b084      	sub	sp, #16
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
	hi2c_BMP180 = hi2c;
 80006d8:	4a0b      	ldr	r2, [pc, #44]	@ (8000708 <BMP180_init+0x38>)
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	6013      	str	r3, [r2, #0]
	BMP180_read_calliberation_data();
 80006de:	f000 f8dd 	bl	800089c <BMP180_read_calliberation_data>

	uint8_t status = 0;
 80006e2:	2300      	movs	r3, #0
 80006e4:	73fb      	strb	r3, [r7, #15]
	status = BMP180_read_ID();
 80006e6:	f7ff ffdb 	bl	80006a0 <BMP180_read_ID>
 80006ea:	4603      	mov	r3, r0
 80006ec:	73fb      	strb	r3, [r7, #15]

	if(status != 0x55){
 80006ee:	7bfb      	ldrb	r3, [r7, #15]
 80006f0:	2b55      	cmp	r3, #85	@ 0x55
 80006f2:	d002      	beq.n	80006fa <BMP180_init+0x2a>
		status = 0;
 80006f4:	2300      	movs	r3, #0
 80006f6:	73fb      	strb	r3, [r7, #15]
 80006f8:	e001      	b.n	80006fe <BMP180_init+0x2e>
	}
	else{
		status = 1;
 80006fa:	2301      	movs	r3, #1
 80006fc:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 80006fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8000700:	4618      	mov	r0, r3
 8000702:	3710      	adds	r7, #16
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}
 8000708:	24000094 	.word	0x24000094

0800070c <BMP180_READ_temp>:

uint16_t BMP180_READ_temp(void){
 800070c:	b580      	push	{r7, lr}
 800070e:	b086      	sub	sp, #24
 8000710:	af04      	add	r7, sp, #16
	uint8_t data[2];
	HAL_I2C_Mem_Read(hi2c_BMP180, BMP180_ADDRES, out_msb, 1, data, 2, 100);
 8000712:	4b0d      	ldr	r3, [pc, #52]	@ (8000748 <BMP180_READ_temp+0x3c>)
 8000714:	6818      	ldr	r0, [r3, #0]
 8000716:	2364      	movs	r3, #100	@ 0x64
 8000718:	9302      	str	r3, [sp, #8]
 800071a:	2302      	movs	r3, #2
 800071c:	9301      	str	r3, [sp, #4]
 800071e:	1d3b      	adds	r3, r7, #4
 8000720:	9300      	str	r3, [sp, #0]
 8000722:	2301      	movs	r3, #1
 8000724:	22f6      	movs	r2, #246	@ 0xf6
 8000726:	21ee      	movs	r1, #238	@ 0xee
 8000728:	f00e f8b0 	bl	800e88c <HAL_I2C_Mem_Read>
	UT = ((data[0]<<8) | data[1]);
 800072c:	793b      	ldrb	r3, [r7, #4]
 800072e:	021b      	lsls	r3, r3, #8
 8000730:	797a      	ldrb	r2, [r7, #5]
 8000732:	4313      	orrs	r3, r2
 8000734:	4a05      	ldr	r2, [pc, #20]	@ (800074c <BMP180_READ_temp+0x40>)
 8000736:	6013      	str	r3, [r2, #0]
	return UT;
 8000738:	4b04      	ldr	r3, [pc, #16]	@ (800074c <BMP180_READ_temp+0x40>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	b29b      	uxth	r3, r3
}
 800073e:	4618      	mov	r0, r3
 8000740:	3708      	adds	r7, #8
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	24000094 	.word	0x24000094
 800074c:	000000c0 	.word	0x000000c0

08000750 <BMP180_READ_pres>:

uint32_t BMP180_READ_pres(void){
 8000750:	b580      	push	{r7, lr}
 8000752:	b086      	sub	sp, #24
 8000754:	af04      	add	r7, sp, #16
	uint8_t data[3];
	HAL_I2C_Mem_Read(hi2c_BMP180, BMP180_ADDRES, out_msb, 1, data, 3, 1000);
 8000756:	4b0d      	ldr	r3, [pc, #52]	@ (800078c <BMP180_READ_pres+0x3c>)
 8000758:	6818      	ldr	r0, [r3, #0]
 800075a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800075e:	9302      	str	r3, [sp, #8]
 8000760:	2303      	movs	r3, #3
 8000762:	9301      	str	r3, [sp, #4]
 8000764:	1d3b      	adds	r3, r7, #4
 8000766:	9300      	str	r3, [sp, #0]
 8000768:	2301      	movs	r3, #1
 800076a:	22f6      	movs	r2, #246	@ 0xf6
 800076c:	21ee      	movs	r1, #238	@ 0xee
 800076e:	f00e f88d 	bl	800e88c <HAL_I2C_Mem_Read>
	return (((data[0]<<16)|(data[1]<<8)|data[2]) >> 5);
 8000772:	793b      	ldrb	r3, [r7, #4]
 8000774:	041a      	lsls	r2, r3, #16
 8000776:	797b      	ldrb	r3, [r7, #5]
 8000778:	021b      	lsls	r3, r3, #8
 800077a:	4313      	orrs	r3, r2
 800077c:	79ba      	ldrb	r2, [r7, #6]
 800077e:	4313      	orrs	r3, r2
 8000780:	115b      	asrs	r3, r3, #5
}
 8000782:	4618      	mov	r0, r3
 8000784:	3708      	adds	r7, #8
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	24000094 	.word	0x24000094

08000790 <BMP180_GET_temp_IT>:
void BMP180_READ_pres_IT(void){
	HAL_I2C_Mem_Read_IT(hi2c_BMP180, BMP180_ADDRES, out_msb, 1, (uint8_t *)BMP180_Press_IT, 3);
	BMP180_IRQ = 2;
}

uint16_t BMP180_GET_temp_IT(void){
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0
	UT = ((BMP180_Temp_IT[0]<<8) | BMP180_Temp_IT[1]);
 8000794:	4b07      	ldr	r3, [pc, #28]	@ (80007b4 <BMP180_GET_temp_IT+0x24>)
 8000796:	781b      	ldrb	r3, [r3, #0]
 8000798:	021b      	lsls	r3, r3, #8
 800079a:	4a06      	ldr	r2, [pc, #24]	@ (80007b4 <BMP180_GET_temp_IT+0x24>)
 800079c:	7852      	ldrb	r2, [r2, #1]
 800079e:	4313      	orrs	r3, r2
 80007a0:	4a05      	ldr	r2, [pc, #20]	@ (80007b8 <BMP180_GET_temp_IT+0x28>)
 80007a2:	6013      	str	r3, [r2, #0]
	return UT;
 80007a4:	4b04      	ldr	r3, [pc, #16]	@ (80007b8 <BMP180_GET_temp_IT+0x28>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	b29b      	uxth	r3, r3
}
 80007aa:	4618      	mov	r0, r3
 80007ac:	46bd      	mov	sp, r7
 80007ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b2:	4770      	bx	lr
 80007b4:	000000f0 	.word	0x000000f0
 80007b8:	000000c0 	.word	0x000000c0

080007bc <BMP180_GET_pres_IT>:

uint32_t BMP180_GET_pres_IT(void){
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0
	return (((BMP180_Press_IT[0]<<16)|(BMP180_Press_IT[1]<<8)|BMP180_Press_IT[2]) >> 5);
 80007c0:	4b07      	ldr	r3, [pc, #28]	@ (80007e0 <BMP180_GET_pres_IT+0x24>)
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	041a      	lsls	r2, r3, #16
 80007c6:	4b06      	ldr	r3, [pc, #24]	@ (80007e0 <BMP180_GET_pres_IT+0x24>)
 80007c8:	785b      	ldrb	r3, [r3, #1]
 80007ca:	021b      	lsls	r3, r3, #8
 80007cc:	4313      	orrs	r3, r2
 80007ce:	4a04      	ldr	r2, [pc, #16]	@ (80007e0 <BMP180_GET_pres_IT+0x24>)
 80007d0:	7892      	ldrb	r2, [r2, #2]
 80007d2:	4313      	orrs	r3, r2
 80007d4:	115b      	asrs	r3, r3, #5
}
 80007d6:	4618      	mov	r0, r3
 80007d8:	46bd      	mov	sp, r7
 80007da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007de:	4770      	bx	lr
 80007e0:	000000ec 	.word	0x000000ec

080007e4 <BMP180_start_measurment_temp>:
//	BMP180_start_measurment_pres();
//	//HAL_Delay(26);
//	pressure = BMP180_READ_pres();
//}

void BMP180_start_measurment_temp(void){
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b086      	sub	sp, #24
 80007e8:	af04      	add	r7, sp, #16
	uint8_t data = 0x2E;
 80007ea:	232e      	movs	r3, #46	@ 0x2e
 80007ec:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(hi2c_BMP180, BMP180_ADDRES, ctrl_meas, 1, &data, 1, 100);
 80007ee:	4b08      	ldr	r3, [pc, #32]	@ (8000810 <BMP180_start_measurment_temp+0x2c>)
 80007f0:	6818      	ldr	r0, [r3, #0]
 80007f2:	2364      	movs	r3, #100	@ 0x64
 80007f4:	9302      	str	r3, [sp, #8]
 80007f6:	2301      	movs	r3, #1
 80007f8:	9301      	str	r3, [sp, #4]
 80007fa:	1dfb      	adds	r3, r7, #7
 80007fc:	9300      	str	r3, [sp, #0]
 80007fe:	2301      	movs	r3, #1
 8000800:	22f4      	movs	r2, #244	@ 0xf4
 8000802:	21ee      	movs	r1, #238	@ 0xee
 8000804:	f00d ff2e 	bl	800e664 <HAL_I2C_Mem_Write>
}
 8000808:	bf00      	nop
 800080a:	3708      	adds	r7, #8
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	24000094 	.word	0x24000094

08000814 <BMP180_start_measurment_pres>:

void BMP180_start_measurment_pres(void){
 8000814:	b580      	push	{r7, lr}
 8000816:	b086      	sub	sp, #24
 8000818:	af04      	add	r7, sp, #16
	uint8_t data = 0xF4;
 800081a:	23f4      	movs	r3, #244	@ 0xf4
 800081c:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(hi2c_BMP180, BMP180_ADDRES, ctrl_meas, 1, &data, 1, 100);
 800081e:	4b08      	ldr	r3, [pc, #32]	@ (8000840 <BMP180_start_measurment_pres+0x2c>)
 8000820:	6818      	ldr	r0, [r3, #0]
 8000822:	2364      	movs	r3, #100	@ 0x64
 8000824:	9302      	str	r3, [sp, #8]
 8000826:	2301      	movs	r3, #1
 8000828:	9301      	str	r3, [sp, #4]
 800082a:	1dfb      	adds	r3, r7, #7
 800082c:	9300      	str	r3, [sp, #0]
 800082e:	2301      	movs	r3, #1
 8000830:	22f4      	movs	r2, #244	@ 0xf4
 8000832:	21ee      	movs	r1, #238	@ 0xee
 8000834:	f00d ff16 	bl	800e664 <HAL_I2C_Mem_Write>
}
 8000838:	bf00      	nop
 800083a:	3708      	adds	r7, #8
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}
 8000840:	24000094 	.word	0x24000094

08000844 <BMP180_start_measurment_pres_IT>:

void BMP180_start_measurment_pres_IT(void){
 8000844:	b580      	push	{r7, lr}
 8000846:	b084      	sub	sp, #16
 8000848:	af02      	add	r7, sp, #8
	uint8_t data = 0xF4;
 800084a:	23f4      	movs	r3, #244	@ 0xf4
 800084c:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write_IT(hi2c_BMP180, BMP180_ADDRES, ctrl_meas, 1, &data, 1);
 800084e:	4b07      	ldr	r3, [pc, #28]	@ (800086c <BMP180_start_measurment_pres_IT+0x28>)
 8000850:	6818      	ldr	r0, [r3, #0]
 8000852:	2301      	movs	r3, #1
 8000854:	9301      	str	r3, [sp, #4]
 8000856:	1dfb      	adds	r3, r7, #7
 8000858:	9300      	str	r3, [sp, #0]
 800085a:	2301      	movs	r3, #1
 800085c:	22f4      	movs	r2, #244	@ 0xf4
 800085e:	21ee      	movs	r1, #238	@ 0xee
 8000860:	f00e f92e 	bl	800eac0 <HAL_I2C_Mem_Write_IT>
}
 8000864:	bf00      	nop
 8000866:	3708      	adds	r7, #8
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	24000094 	.word	0x24000094

08000870 <BMP180_start_measurment_temp_IT>:

void BMP180_start_measurment_temp_IT(void){
 8000870:	b580      	push	{r7, lr}
 8000872:	b084      	sub	sp, #16
 8000874:	af02      	add	r7, sp, #8
	uint8_t data = 0x2E;
 8000876:	232e      	movs	r3, #46	@ 0x2e
 8000878:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write_IT(hi2c_BMP180, BMP180_ADDRES, ctrl_meas, 1, &data, 1);
 800087a:	4b07      	ldr	r3, [pc, #28]	@ (8000898 <BMP180_start_measurment_temp_IT+0x28>)
 800087c:	6818      	ldr	r0, [r3, #0]
 800087e:	2301      	movs	r3, #1
 8000880:	9301      	str	r3, [sp, #4]
 8000882:	1dfb      	adds	r3, r7, #7
 8000884:	9300      	str	r3, [sp, #0]
 8000886:	2301      	movs	r3, #1
 8000888:	22f4      	movs	r2, #244	@ 0xf4
 800088a:	21ee      	movs	r1, #238	@ 0xee
 800088c:	f00e f918 	bl	800eac0 <HAL_I2C_Mem_Write_IT>
}
 8000890:	bf00      	nop
 8000892:	3708      	adds	r7, #8
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	24000094 	.word	0x24000094

0800089c <BMP180_read_calliberation_data>:

void BMP180_read_calliberation_data(void){
 800089c:	b580      	push	{r7, lr}
 800089e:	b08a      	sub	sp, #40	@ 0x28
 80008a0:	af04      	add	r7, sp, #16

	uint8_t Callib_Data[22] = {0};
 80008a2:	2300      	movs	r3, #0
 80008a4:	603b      	str	r3, [r7, #0]
 80008a6:	1d3b      	adds	r3, r7, #4
 80008a8:	2200      	movs	r2, #0
 80008aa:	601a      	str	r2, [r3, #0]
 80008ac:	605a      	str	r2, [r3, #4]
 80008ae:	609a      	str	r2, [r3, #8]
 80008b0:	60da      	str	r2, [r3, #12]
 80008b2:	821a      	strh	r2, [r3, #16]
	uint16_t Callib_Start = 0xAA;
 80008b4:	23aa      	movs	r3, #170	@ 0xaa
 80008b6:	82fb      	strh	r3, [r7, #22]
	HAL_I2C_Mem_Read(hi2c_BMP180, BMP180_ADDRES, Callib_Start, 1, Callib_Data, 22, 100);
 80008b8:	4b3b      	ldr	r3, [pc, #236]	@ (80009a8 <BMP180_read_calliberation_data+0x10c>)
 80008ba:	6818      	ldr	r0, [r3, #0]
 80008bc:	8afa      	ldrh	r2, [r7, #22]
 80008be:	2364      	movs	r3, #100	@ 0x64
 80008c0:	9302      	str	r3, [sp, #8]
 80008c2:	2316      	movs	r3, #22
 80008c4:	9301      	str	r3, [sp, #4]
 80008c6:	463b      	mov	r3, r7
 80008c8:	9300      	str	r3, [sp, #0]
 80008ca:	2301      	movs	r3, #1
 80008cc:	21ee      	movs	r1, #238	@ 0xee
 80008ce:	f00d ffdd 	bl	800e88c <HAL_I2C_Mem_Read>

	AC1 = (int16_t)((Callib_Data[0] << 8) | Callib_Data[1]);
 80008d2:	783b      	ldrb	r3, [r7, #0]
 80008d4:	021b      	lsls	r3, r3, #8
 80008d6:	b21a      	sxth	r2, r3
 80008d8:	787b      	ldrb	r3, [r7, #1]
 80008da:	b21b      	sxth	r3, r3
 80008dc:	4313      	orrs	r3, r2
 80008de:	b21a      	sxth	r2, r3
 80008e0:	4b32      	ldr	r3, [pc, #200]	@ (80009ac <BMP180_read_calliberation_data+0x110>)
 80008e2:	801a      	strh	r2, [r3, #0]
	AC2 = (int16_t)((Callib_Data[2] << 8) | Callib_Data[3]);
 80008e4:	78bb      	ldrb	r3, [r7, #2]
 80008e6:	021b      	lsls	r3, r3, #8
 80008e8:	b21a      	sxth	r2, r3
 80008ea:	78fb      	ldrb	r3, [r7, #3]
 80008ec:	b21b      	sxth	r3, r3
 80008ee:	4313      	orrs	r3, r2
 80008f0:	b21a      	sxth	r2, r3
 80008f2:	4b2f      	ldr	r3, [pc, #188]	@ (80009b0 <BMP180_read_calliberation_data+0x114>)
 80008f4:	801a      	strh	r2, [r3, #0]
	AC3 = (int16_t)((Callib_Data[4] << 8) | Callib_Data[5]);
 80008f6:	793b      	ldrb	r3, [r7, #4]
 80008f8:	021b      	lsls	r3, r3, #8
 80008fa:	b21a      	sxth	r2, r3
 80008fc:	797b      	ldrb	r3, [r7, #5]
 80008fe:	b21b      	sxth	r3, r3
 8000900:	4313      	orrs	r3, r2
 8000902:	b21a      	sxth	r2, r3
 8000904:	4b2b      	ldr	r3, [pc, #172]	@ (80009b4 <BMP180_read_calliberation_data+0x118>)
 8000906:	801a      	strh	r2, [r3, #0]
	AC4 = (int16_t)((Callib_Data[6] << 8) | Callib_Data[7]);
 8000908:	79bb      	ldrb	r3, [r7, #6]
 800090a:	021b      	lsls	r3, r3, #8
 800090c:	b21a      	sxth	r2, r3
 800090e:	79fb      	ldrb	r3, [r7, #7]
 8000910:	b21b      	sxth	r3, r3
 8000912:	4313      	orrs	r3, r2
 8000914:	b21b      	sxth	r3, r3
 8000916:	b29a      	uxth	r2, r3
 8000918:	4b27      	ldr	r3, [pc, #156]	@ (80009b8 <BMP180_read_calliberation_data+0x11c>)
 800091a:	801a      	strh	r2, [r3, #0]
	AC5 = (int16_t)((Callib_Data[8] << 8) | Callib_Data[9]);
 800091c:	7a3b      	ldrb	r3, [r7, #8]
 800091e:	021b      	lsls	r3, r3, #8
 8000920:	b21a      	sxth	r2, r3
 8000922:	7a7b      	ldrb	r3, [r7, #9]
 8000924:	b21b      	sxth	r3, r3
 8000926:	4313      	orrs	r3, r2
 8000928:	b21b      	sxth	r3, r3
 800092a:	b29a      	uxth	r2, r3
 800092c:	4b23      	ldr	r3, [pc, #140]	@ (80009bc <BMP180_read_calliberation_data+0x120>)
 800092e:	801a      	strh	r2, [r3, #0]
	AC6 = (int16_t)((Callib_Data[10] << 8) | Callib_Data[11]);
 8000930:	7abb      	ldrb	r3, [r7, #10]
 8000932:	021b      	lsls	r3, r3, #8
 8000934:	b21a      	sxth	r2, r3
 8000936:	7afb      	ldrb	r3, [r7, #11]
 8000938:	b21b      	sxth	r3, r3
 800093a:	4313      	orrs	r3, r2
 800093c:	b21b      	sxth	r3, r3
 800093e:	b29a      	uxth	r2, r3
 8000940:	4b1f      	ldr	r3, [pc, #124]	@ (80009c0 <BMP180_read_calliberation_data+0x124>)
 8000942:	801a      	strh	r2, [r3, #0]
	B1 = (int16_t)((Callib_Data[12] << 8) | Callib_Data[13]);
 8000944:	7b3b      	ldrb	r3, [r7, #12]
 8000946:	021b      	lsls	r3, r3, #8
 8000948:	b21a      	sxth	r2, r3
 800094a:	7b7b      	ldrb	r3, [r7, #13]
 800094c:	b21b      	sxth	r3, r3
 800094e:	4313      	orrs	r3, r2
 8000950:	b21a      	sxth	r2, r3
 8000952:	4b1c      	ldr	r3, [pc, #112]	@ (80009c4 <BMP180_read_calliberation_data+0x128>)
 8000954:	801a      	strh	r2, [r3, #0]
	B2 = (int16_t)((Callib_Data[14] << 8) | Callib_Data[15]);
 8000956:	7bbb      	ldrb	r3, [r7, #14]
 8000958:	021b      	lsls	r3, r3, #8
 800095a:	b21a      	sxth	r2, r3
 800095c:	7bfb      	ldrb	r3, [r7, #15]
 800095e:	b21b      	sxth	r3, r3
 8000960:	4313      	orrs	r3, r2
 8000962:	b21a      	sxth	r2, r3
 8000964:	4b18      	ldr	r3, [pc, #96]	@ (80009c8 <BMP180_read_calliberation_data+0x12c>)
 8000966:	801a      	strh	r2, [r3, #0]
	MB = (int16_t)((Callib_Data[16] << 8) | Callib_Data[17]);
 8000968:	7c3b      	ldrb	r3, [r7, #16]
 800096a:	021b      	lsls	r3, r3, #8
 800096c:	b21a      	sxth	r2, r3
 800096e:	7c7b      	ldrb	r3, [r7, #17]
 8000970:	b21b      	sxth	r3, r3
 8000972:	4313      	orrs	r3, r2
 8000974:	b21a      	sxth	r2, r3
 8000976:	4b15      	ldr	r3, [pc, #84]	@ (80009cc <BMP180_read_calliberation_data+0x130>)
 8000978:	801a      	strh	r2, [r3, #0]
	MC = (int16_t)((Callib_Data[18] << 8) | Callib_Data[19]);
 800097a:	7cbb      	ldrb	r3, [r7, #18]
 800097c:	021b      	lsls	r3, r3, #8
 800097e:	b21a      	sxth	r2, r3
 8000980:	7cfb      	ldrb	r3, [r7, #19]
 8000982:	b21b      	sxth	r3, r3
 8000984:	4313      	orrs	r3, r2
 8000986:	b21a      	sxth	r2, r3
 8000988:	4b11      	ldr	r3, [pc, #68]	@ (80009d0 <BMP180_read_calliberation_data+0x134>)
 800098a:	801a      	strh	r2, [r3, #0]
	MD = (int16_t)((Callib_Data[20] << 8) | Callib_Data[21]);
 800098c:	7d3b      	ldrb	r3, [r7, #20]
 800098e:	021b      	lsls	r3, r3, #8
 8000990:	b21a      	sxth	r2, r3
 8000992:	7d7b      	ldrb	r3, [r7, #21]
 8000994:	b21b      	sxth	r3, r3
 8000996:	4313      	orrs	r3, r2
 8000998:	b21a      	sxth	r2, r3
 800099a:	4b0e      	ldr	r3, [pc, #56]	@ (80009d4 <BMP180_read_calliberation_data+0x138>)
 800099c:	801a      	strh	r2, [r3, #0]
}
 800099e:	bf00      	nop
 80009a0:	3718      	adds	r7, #24
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	24000094 	.word	0x24000094
 80009ac:	0000009a 	.word	0x0000009a
 80009b0:	0000009c 	.word	0x0000009c
 80009b4:	0000009e 	.word	0x0000009e
 80009b8:	00000094 	.word	0x00000094
 80009bc:	00000096 	.word	0x00000096
 80009c0:	00000098 	.word	0x00000098
 80009c4:	000000a0 	.word	0x000000a0
 80009c8:	000000a2 	.word	0x000000a2
 80009cc:	000000a4 	.word	0x000000a4
 80009d0:	000000a6 	.word	0x000000a6
 80009d4:	000000a8 	.word	0x000000a8

080009d8 <BMP180_GET_temp>:

float BMP180_GET_temp(uint16_t temperature){
 80009d8:	b480      	push	{r7}
 80009da:	b083      	sub	sp, #12
 80009dc:	af00      	add	r7, sp, #0
 80009de:	4603      	mov	r3, r0
 80009e0:	80fb      	strh	r3, [r7, #6]

	X1 = ((temperature - AC6) * AC5)/32768;
 80009e2:	88fb      	ldrh	r3, [r7, #6]
 80009e4:	4a22      	ldr	r2, [pc, #136]	@ (8000a70 <BMP180_GET_temp+0x98>)
 80009e6:	8812      	ldrh	r2, [r2, #0]
 80009e8:	1a9b      	subs	r3, r3, r2
 80009ea:	4a22      	ldr	r2, [pc, #136]	@ (8000a74 <BMP180_GET_temp+0x9c>)
 80009ec:	8812      	ldrh	r2, [r2, #0]
 80009ee:	fb02 f303 	mul.w	r3, r2, r3
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	da03      	bge.n	80009fe <BMP180_GET_temp+0x26>
 80009f6:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80009fa:	441a      	add	r2, r3
 80009fc:	4613      	mov	r3, r2
 80009fe:	13db      	asrs	r3, r3, #15
 8000a00:	461a      	mov	r2, r3
 8000a02:	4b1d      	ldr	r3, [pc, #116]	@ (8000a78 <BMP180_GET_temp+0xa0>)
 8000a04:	601a      	str	r2, [r3, #0]
	X2 = (MC * 2048)/(X1 + MD);
 8000a06:	4b1d      	ldr	r3, [pc, #116]	@ (8000a7c <BMP180_GET_temp+0xa4>)
 8000a08:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a0c:	02da      	lsls	r2, r3, #11
 8000a0e:	4b1c      	ldr	r3, [pc, #112]	@ (8000a80 <BMP180_GET_temp+0xa8>)
 8000a10:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a14:	4619      	mov	r1, r3
 8000a16:	4b18      	ldr	r3, [pc, #96]	@ (8000a78 <BMP180_GET_temp+0xa0>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	440b      	add	r3, r1
 8000a1c:	fb92 f3f3 	sdiv	r3, r2, r3
 8000a20:	4a18      	ldr	r2, [pc, #96]	@ (8000a84 <BMP180_GET_temp+0xac>)
 8000a22:	6013      	str	r3, [r2, #0]
	B5 = X1 + X2;
 8000a24:	4b14      	ldr	r3, [pc, #80]	@ (8000a78 <BMP180_GET_temp+0xa0>)
 8000a26:	681a      	ldr	r2, [r3, #0]
 8000a28:	4b16      	ldr	r3, [pc, #88]	@ (8000a84 <BMP180_GET_temp+0xac>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	4413      	add	r3, r2
 8000a2e:	4a16      	ldr	r2, [pc, #88]	@ (8000a88 <BMP180_GET_temp+0xb0>)
 8000a30:	6013      	str	r3, [r2, #0]
	temp = (B5 + 8)/16;
 8000a32:	4b15      	ldr	r3, [pc, #84]	@ (8000a88 <BMP180_GET_temp+0xb0>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	3308      	adds	r3, #8
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	da00      	bge.n	8000a3e <BMP180_GET_temp+0x66>
 8000a3c:	330f      	adds	r3, #15
 8000a3e:	111b      	asrs	r3, r3, #4
 8000a40:	ee07 3a90 	vmov	s15, r3
 8000a44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a48:	4b10      	ldr	r3, [pc, #64]	@ (8000a8c <BMP180_GET_temp+0xb4>)
 8000a4a:	edc3 7a00 	vstr	s15, [r3]
	return temp/10.0;
 8000a4e:	4b0f      	ldr	r3, [pc, #60]	@ (8000a8c <BMP180_GET_temp+0xb4>)
 8000a50:	edd3 7a00 	vldr	s15, [r3]
 8000a54:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8000a58:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000a5c:	eef0 7a66 	vmov.f32	s15, s13
}
 8000a60:	eeb0 0a67 	vmov.f32	s0, s15
 8000a64:	370c      	adds	r7, #12
 8000a66:	46bd      	mov	sp, r7
 8000a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop
 8000a70:	00000098 	.word	0x00000098
 8000a74:	00000096 	.word	0x00000096
 8000a78:	000000c4 	.word	0x000000c4
 8000a7c:	000000a6 	.word	0x000000a6
 8000a80:	000000a8 	.word	0x000000a8
 8000a84:	000000c8 	.word	0x000000c8
 8000a88:	000000cc 	.word	0x000000cc
 8000a8c:	000000dc 	.word	0x000000dc

08000a90 <BMP180_GET_pres>:

float BMP180_GET_pres(uint16_t pressure){
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	4603      	mov	r3, r0
 8000a98:	80fb      	strh	r3, [r7, #6]

	UP = BMP180_READ_pres();
 8000a9a:	f7ff fe59 	bl	8000750 <BMP180_READ_pres>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	4a9c      	ldr	r2, [pc, #624]	@ (8000d14 <BMP180_GET_pres+0x284>)
 8000aa2:	6013      	str	r3, [r2, #0]
	X1 = (((UT-AC6) * AC5)/32768);//
 8000aa4:	4b9c      	ldr	r3, [pc, #624]	@ (8000d18 <BMP180_GET_pres+0x288>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	4a9c      	ldr	r2, [pc, #624]	@ (8000d1c <BMP180_GET_pres+0x28c>)
 8000aaa:	8812      	ldrh	r2, [r2, #0]
 8000aac:	1a9b      	subs	r3, r3, r2
 8000aae:	4a9c      	ldr	r2, [pc, #624]	@ (8000d20 <BMP180_GET_pres+0x290>)
 8000ab0:	8812      	ldrh	r2, [r2, #0]
 8000ab2:	fb02 f303 	mul.w	r3, r2, r3
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	da03      	bge.n	8000ac2 <BMP180_GET_pres+0x32>
 8000aba:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8000abe:	441a      	add	r2, r3
 8000ac0:	4613      	mov	r3, r2
 8000ac2:	13db      	asrs	r3, r3, #15
 8000ac4:	461a      	mov	r2, r3
 8000ac6:	4b97      	ldr	r3, [pc, #604]	@ (8000d24 <BMP180_GET_pres+0x294>)
 8000ac8:	601a      	str	r2, [r3, #0]
	X2 = ((MC*(2048)) / (X1+MD));
 8000aca:	4b97      	ldr	r3, [pc, #604]	@ (8000d28 <BMP180_GET_pres+0x298>)
 8000acc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ad0:	02da      	lsls	r2, r3, #11
 8000ad2:	4b96      	ldr	r3, [pc, #600]	@ (8000d2c <BMP180_GET_pres+0x29c>)
 8000ad4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ad8:	4619      	mov	r1, r3
 8000ada:	4b92      	ldr	r3, [pc, #584]	@ (8000d24 <BMP180_GET_pres+0x294>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	440b      	add	r3, r1
 8000ae0:	fb92 f3f3 	sdiv	r3, r2, r3
 8000ae4:	4a92      	ldr	r2, [pc, #584]	@ (8000d30 <BMP180_GET_pres+0x2a0>)
 8000ae6:	6013      	str	r3, [r2, #0]
	B5 = X1+X2;
 8000ae8:	4b8e      	ldr	r3, [pc, #568]	@ (8000d24 <BMP180_GET_pres+0x294>)
 8000aea:	681a      	ldr	r2, [r3, #0]
 8000aec:	4b90      	ldr	r3, [pc, #576]	@ (8000d30 <BMP180_GET_pres+0x2a0>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	4413      	add	r3, r2
 8000af2:	4a90      	ldr	r2, [pc, #576]	@ (8000d34 <BMP180_GET_pres+0x2a4>)
 8000af4:	6013      	str	r3, [r2, #0]
	B6 = B5-4000;
 8000af6:	4b8f      	ldr	r3, [pc, #572]	@ (8000d34 <BMP180_GET_pres+0x2a4>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	f5a3 637a 	sub.w	r3, r3, #4000	@ 0xfa0
 8000afe:	4a8e      	ldr	r2, [pc, #568]	@ (8000d38 <BMP180_GET_pres+0x2a8>)
 8000b00:	6013      	str	r3, [r2, #0]
	X1 = (B2 * (B6*B6/(4096)))/(2048);
 8000b02:	4b8e      	ldr	r3, [pc, #568]	@ (8000d3c <BMP180_GET_pres+0x2ac>)
 8000b04:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b08:	4619      	mov	r1, r3
 8000b0a:	4b8b      	ldr	r3, [pc, #556]	@ (8000d38 <BMP180_GET_pres+0x2a8>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	4a8a      	ldr	r2, [pc, #552]	@ (8000d38 <BMP180_GET_pres+0x2a8>)
 8000b10:	6812      	ldr	r2, [r2, #0]
 8000b12:	fb02 f303 	mul.w	r3, r2, r3
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	da01      	bge.n	8000b1e <BMP180_GET_pres+0x8e>
 8000b1a:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 8000b1e:	131b      	asrs	r3, r3, #12
 8000b20:	fb01 f303 	mul.w	r3, r1, r3
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	da01      	bge.n	8000b2c <BMP180_GET_pres+0x9c>
 8000b28:	f203 73ff 	addw	r3, r3, #2047	@ 0x7ff
 8000b2c:	12db      	asrs	r3, r3, #11
 8000b2e:	461a      	mov	r2, r3
 8000b30:	4b7c      	ldr	r3, [pc, #496]	@ (8000d24 <BMP180_GET_pres+0x294>)
 8000b32:	601a      	str	r2, [r3, #0]
	X2 = AC2*B6/(2048);
 8000b34:	4b82      	ldr	r3, [pc, #520]	@ (8000d40 <BMP180_GET_pres+0x2b0>)
 8000b36:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b3a:	461a      	mov	r2, r3
 8000b3c:	4b7e      	ldr	r3, [pc, #504]	@ (8000d38 <BMP180_GET_pres+0x2a8>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	fb02 f303 	mul.w	r3, r2, r3
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	da01      	bge.n	8000b4c <BMP180_GET_pres+0xbc>
 8000b48:	f203 73ff 	addw	r3, r3, #2047	@ 0x7ff
 8000b4c:	12db      	asrs	r3, r3, #11
 8000b4e:	461a      	mov	r2, r3
 8000b50:	4b77      	ldr	r3, [pc, #476]	@ (8000d30 <BMP180_GET_pres+0x2a0>)
 8000b52:	601a      	str	r2, [r3, #0]
	X3 = X1+X2;
 8000b54:	4b73      	ldr	r3, [pc, #460]	@ (8000d24 <BMP180_GET_pres+0x294>)
 8000b56:	681a      	ldr	r2, [r3, #0]
 8000b58:	4b75      	ldr	r3, [pc, #468]	@ (8000d30 <BMP180_GET_pres+0x2a0>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4413      	add	r3, r2
 8000b5e:	4a79      	ldr	r2, [pc, #484]	@ (8000d44 <BMP180_GET_pres+0x2b4>)
 8000b60:	6013      	str	r3, [r2, #0]
	B3 = (((AC1*4+X3)<<3)+2)/4;
 8000b62:	4b79      	ldr	r3, [pc, #484]	@ (8000d48 <BMP180_GET_pres+0x2b8>)
 8000b64:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b68:	009a      	lsls	r2, r3, #2
 8000b6a:	4b76      	ldr	r3, [pc, #472]	@ (8000d44 <BMP180_GET_pres+0x2b4>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	4413      	add	r3, r2
 8000b70:	00db      	lsls	r3, r3, #3
 8000b72:	3302      	adds	r3, #2
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	da00      	bge.n	8000b7a <BMP180_GET_pres+0xea>
 8000b78:	3303      	adds	r3, #3
 8000b7a:	109b      	asrs	r3, r3, #2
 8000b7c:	461a      	mov	r2, r3
 8000b7e:	4b73      	ldr	r3, [pc, #460]	@ (8000d4c <BMP180_GET_pres+0x2bc>)
 8000b80:	601a      	str	r2, [r3, #0]
	X1 = AC3*B6/8192;
 8000b82:	4b73      	ldr	r3, [pc, #460]	@ (8000d50 <BMP180_GET_pres+0x2c0>)
 8000b84:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b88:	461a      	mov	r2, r3
 8000b8a:	4b6b      	ldr	r3, [pc, #428]	@ (8000d38 <BMP180_GET_pres+0x2a8>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	fb02 f303 	mul.w	r3, r2, r3
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	da03      	bge.n	8000b9e <BMP180_GET_pres+0x10e>
 8000b96:	f641 72ff 	movw	r2, #8191	@ 0x1fff
 8000b9a:	441a      	add	r2, r3
 8000b9c:	4613      	mov	r3, r2
 8000b9e:	135b      	asrs	r3, r3, #13
 8000ba0:	461a      	mov	r2, r3
 8000ba2:	4b60      	ldr	r3, [pc, #384]	@ (8000d24 <BMP180_GET_pres+0x294>)
 8000ba4:	601a      	str	r2, [r3, #0]
	X2 = (B1 * (B6*B6/(4096)))/(65536);
 8000ba6:	4b6b      	ldr	r3, [pc, #428]	@ (8000d54 <BMP180_GET_pres+0x2c4>)
 8000ba8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000bac:	4619      	mov	r1, r3
 8000bae:	4b62      	ldr	r3, [pc, #392]	@ (8000d38 <BMP180_GET_pres+0x2a8>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	4a61      	ldr	r2, [pc, #388]	@ (8000d38 <BMP180_GET_pres+0x2a8>)
 8000bb4:	6812      	ldr	r2, [r2, #0]
 8000bb6:	fb02 f303 	mul.w	r3, r2, r3
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	da01      	bge.n	8000bc2 <BMP180_GET_pres+0x132>
 8000bbe:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 8000bc2:	131b      	asrs	r3, r3, #12
 8000bc4:	fb01 f303 	mul.w	r3, r1, r3
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	da03      	bge.n	8000bd4 <BMP180_GET_pres+0x144>
 8000bcc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000bd0:	441a      	add	r2, r3
 8000bd2:	4613      	mov	r3, r2
 8000bd4:	141b      	asrs	r3, r3, #16
 8000bd6:	461a      	mov	r2, r3
 8000bd8:	4b55      	ldr	r3, [pc, #340]	@ (8000d30 <BMP180_GET_pres+0x2a0>)
 8000bda:	601a      	str	r2, [r3, #0]
	X3 = ((X1+X2)+2)/4;
 8000bdc:	4b51      	ldr	r3, [pc, #324]	@ (8000d24 <BMP180_GET_pres+0x294>)
 8000bde:	681a      	ldr	r2, [r3, #0]
 8000be0:	4b53      	ldr	r3, [pc, #332]	@ (8000d30 <BMP180_GET_pres+0x2a0>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4413      	add	r3, r2
 8000be6:	3302      	adds	r3, #2
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	da00      	bge.n	8000bee <BMP180_GET_pres+0x15e>
 8000bec:	3303      	adds	r3, #3
 8000bee:	109b      	asrs	r3, r3, #2
 8000bf0:	461a      	mov	r2, r3
 8000bf2:	4b54      	ldr	r3, [pc, #336]	@ (8000d44 <BMP180_GET_pres+0x2b4>)
 8000bf4:	601a      	str	r2, [r3, #0]
	B4 = AC4* (uint32_t)(X3+32768)/(32768);
 8000bf6:	4b58      	ldr	r3, [pc, #352]	@ (8000d58 <BMP180_GET_pres+0x2c8>)
 8000bf8:	881b      	ldrh	r3, [r3, #0]
 8000bfa:	461a      	mov	r2, r3
 8000bfc:	4b51      	ldr	r3, [pc, #324]	@ (8000d44 <BMP180_GET_pres+0x2b4>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8000c04:	fb02 f303 	mul.w	r3, r2, r3
 8000c08:	0bdb      	lsrs	r3, r3, #15
 8000c0a:	4a54      	ldr	r2, [pc, #336]	@ (8000d5c <BMP180_GET_pres+0x2cc>)
 8000c0c:	6013      	str	r3, [r2, #0]
	B7 = ((uint32_t)UP-B3)*(50000>>3);
 8000c0e:	4b41      	ldr	r3, [pc, #260]	@ (8000d14 <BMP180_GET_pres+0x284>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	4a4e      	ldr	r2, [pc, #312]	@ (8000d4c <BMP180_GET_pres+0x2bc>)
 8000c14:	6812      	ldr	r2, [r2, #0]
 8000c16:	1a9b      	subs	r3, r3, r2
 8000c18:	f641 026a 	movw	r2, #6250	@ 0x186a
 8000c1c:	fb02 f303 	mul.w	r3, r2, r3
 8000c20:	4a4f      	ldr	r2, [pc, #316]	@ (8000d60 <BMP180_GET_pres+0x2d0>)
 8000c22:	6013      	str	r3, [r2, #0]
	if (B7 < 0x80000000){
 8000c24:	4b4e      	ldr	r3, [pc, #312]	@ (8000d60 <BMP180_GET_pres+0x2d0>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	db0e      	blt.n	8000c4a <BMP180_GET_pres+0x1ba>
		pres = (B7*2)/B4;
 8000c2c:	4b4c      	ldr	r3, [pc, #304]	@ (8000d60 <BMP180_GET_pres+0x2d0>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	005a      	lsls	r2, r3, #1
 8000c32:	4b4a      	ldr	r3, [pc, #296]	@ (8000d5c <BMP180_GET_pres+0x2cc>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c3a:	ee07 3a90 	vmov	s15, r3
 8000c3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000c42:	4b48      	ldr	r3, [pc, #288]	@ (8000d64 <BMP180_GET_pres+0x2d4>)
 8000c44:	edc3 7a00 	vstr	s15, [r3]
 8000c48:	e00d      	b.n	8000c66 <BMP180_GET_pres+0x1d6>
	}
	else{
		pres = (B7/B4)*2;
 8000c4a:	4b45      	ldr	r3, [pc, #276]	@ (8000d60 <BMP180_GET_pres+0x2d0>)
 8000c4c:	681a      	ldr	r2, [r3, #0]
 8000c4e:	4b43      	ldr	r3, [pc, #268]	@ (8000d5c <BMP180_GET_pres+0x2cc>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c56:	005b      	lsls	r3, r3, #1
 8000c58:	ee07 3a90 	vmov	s15, r3
 8000c5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000c60:	4b40      	ldr	r3, [pc, #256]	@ (8000d64 <BMP180_GET_pres+0x2d4>)
 8000c62:	edc3 7a00 	vstr	s15, [r3]
	}
	X1 = (pres/(256))*(pres/(256));
 8000c66:	4b3f      	ldr	r3, [pc, #252]	@ (8000d64 <BMP180_GET_pres+0x2d4>)
 8000c68:	edd3 7a00 	vldr	s15, [r3]
 8000c6c:	eddf 6a3e 	vldr	s13, [pc, #248]	@ 8000d68 <BMP180_GET_pres+0x2d8>
 8000c70:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000c74:	4b3b      	ldr	r3, [pc, #236]	@ (8000d64 <BMP180_GET_pres+0x2d4>)
 8000c76:	edd3 6a00 	vldr	s13, [r3]
 8000c7a:	ed9f 6a3b 	vldr	s12, [pc, #236]	@ 8000d68 <BMP180_GET_pres+0x2d8>
 8000c7e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8000c82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c86:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000c8a:	ee17 2a90 	vmov	r2, s15
 8000c8e:	4b25      	ldr	r3, [pc, #148]	@ (8000d24 <BMP180_GET_pres+0x294>)
 8000c90:	601a      	str	r2, [r3, #0]
	X1 = (X1*3038)/(65536);
 8000c92:	4b24      	ldr	r3, [pc, #144]	@ (8000d24 <BMP180_GET_pres+0x294>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	f640 32de 	movw	r2, #3038	@ 0xbde
 8000c9a:	fb02 f303 	mul.w	r3, r2, r3
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	da03      	bge.n	8000caa <BMP180_GET_pres+0x21a>
 8000ca2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000ca6:	441a      	add	r2, r3
 8000ca8:	4613      	mov	r3, r2
 8000caa:	141b      	asrs	r3, r3, #16
 8000cac:	461a      	mov	r2, r3
 8000cae:	4b1d      	ldr	r3, [pc, #116]	@ (8000d24 <BMP180_GET_pres+0x294>)
 8000cb0:	601a      	str	r2, [r3, #0]
	X2 = (-7357*pres)/(65536);
 8000cb2:	4b2c      	ldr	r3, [pc, #176]	@ (8000d64 <BMP180_GET_pres+0x2d4>)
 8000cb4:	edd3 7a00 	vldr	s15, [r3]
 8000cb8:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 8000d6c <BMP180_GET_pres+0x2dc>
 8000cbc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000cc0:	eddf 6a2b 	vldr	s13, [pc, #172]	@ 8000d70 <BMP180_GET_pres+0x2e0>
 8000cc4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000cc8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ccc:	ee17 2a90 	vmov	r2, s15
 8000cd0:	4b17      	ldr	r3, [pc, #92]	@ (8000d30 <BMP180_GET_pres+0x2a0>)
 8000cd2:	601a      	str	r2, [r3, #0]
	pres = pres + (X1+X2+3791)/(16);
 8000cd4:	4b13      	ldr	r3, [pc, #76]	@ (8000d24 <BMP180_GET_pres+0x294>)
 8000cd6:	681a      	ldr	r2, [r3, #0]
 8000cd8:	4b15      	ldr	r3, [pc, #84]	@ (8000d30 <BMP180_GET_pres+0x2a0>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4413      	add	r3, r2
 8000cde:	f603 63cf 	addw	r3, r3, #3791	@ 0xecf
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	da00      	bge.n	8000ce8 <BMP180_GET_pres+0x258>
 8000ce6:	330f      	adds	r3, #15
 8000ce8:	111b      	asrs	r3, r3, #4
 8000cea:	ee07 3a90 	vmov	s15, r3
 8000cee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000cf2:	4b1c      	ldr	r3, [pc, #112]	@ (8000d64 <BMP180_GET_pres+0x2d4>)
 8000cf4:	edd3 7a00 	vldr	s15, [r3]
 8000cf8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000cfc:	4b19      	ldr	r3, [pc, #100]	@ (8000d64 <BMP180_GET_pres+0x2d4>)
 8000cfe:	edc3 7a00 	vstr	s15, [r3]
	return pres;
 8000d02:	4b18      	ldr	r3, [pc, #96]	@ (8000d64 <BMP180_GET_pres+0x2d4>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	ee07 3a90 	vmov	s15, r3
}
 8000d0a:	eeb0 0a67 	vmov.f32	s0, s15
 8000d0e:	3708      	adds	r7, #8
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	000000b4 	.word	0x000000b4
 8000d18:	000000c0 	.word	0x000000c0
 8000d1c:	00000098 	.word	0x00000098
 8000d20:	00000096 	.word	0x00000096
 8000d24:	000000c4 	.word	0x000000c4
 8000d28:	000000a6 	.word	0x000000a6
 8000d2c:	000000a8 	.word	0x000000a8
 8000d30:	000000c8 	.word	0x000000c8
 8000d34:	000000cc 	.word	0x000000cc
 8000d38:	000000d0 	.word	0x000000d0
 8000d3c:	000000a2 	.word	0x000000a2
 8000d40:	0000009c 	.word	0x0000009c
 8000d44:	000000d8 	.word	0x000000d8
 8000d48:	0000009a 	.word	0x0000009a
 8000d4c:	000000d4 	.word	0x000000d4
 8000d50:	0000009e 	.word	0x0000009e
 8000d54:	000000a0 	.word	0x000000a0
 8000d58:	00000094 	.word	0x00000094
 8000d5c:	000000ac 	.word	0x000000ac
 8000d60:	000000b0 	.word	0x000000b0
 8000d64:	000000e0 	.word	0x000000e0
 8000d68:	43800000 	.word	0x43800000
 8000d6c:	c5e5e800 	.word	0xc5e5e800
 8000d70:	47800000 	.word	0x47800000

08000d74 <BMP180_CALIBRATION>:

void BMP180_CALIBRATION(float *firstpres){
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]

	//for(int i = 0; i < 30; i++){
	BMP180_start_measurment_temp();
 8000d7c:	f7ff fd32 	bl	80007e4 <BMP180_start_measurment_temp>
	HAL_Delay(10); // 9
 8000d80:	200a      	movs	r0, #10
 8000d82:	f008 fa63 	bl	800924c <HAL_Delay>
	temperature = BMP180_READ_temp();
 8000d86:	f7ff fcc1 	bl	800070c <BMP180_READ_temp>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	461a      	mov	r2, r3
 8000d8e:	4b15      	ldr	r3, [pc, #84]	@ (8000de4 <BMP180_CALIBRATION+0x70>)
 8000d90:	601a      	str	r2, [r3, #0]
	temp = BMP180_GET_temp(temperature);
 8000d92:	4b14      	ldr	r3, [pc, #80]	@ (8000de4 <BMP180_CALIBRATION+0x70>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	b29b      	uxth	r3, r3
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f7ff fe1d 	bl	80009d8 <BMP180_GET_temp>
 8000d9e:	eef0 7a40 	vmov.f32	s15, s0
 8000da2:	4b11      	ldr	r3, [pc, #68]	@ (8000de8 <BMP180_CALIBRATION+0x74>)
 8000da4:	edc3 7a00 	vstr	s15, [r3]
	BMP180_start_measurment_pres();
 8000da8:	f7ff fd34 	bl	8000814 <BMP180_start_measurment_pres>
	HAL_Delay(30); // 30
 8000dac:	201e      	movs	r0, #30
 8000dae:	f008 fa4d 	bl	800924c <HAL_Delay>
	pressure = BMP180_READ_pres();
 8000db2:	f7ff fccd 	bl	8000750 <BMP180_READ_pres>
 8000db6:	4603      	mov	r3, r0
 8000db8:	461a      	mov	r2, r3
 8000dba:	4b0c      	ldr	r3, [pc, #48]	@ (8000dec <BMP180_CALIBRATION+0x78>)
 8000dbc:	601a      	str	r2, [r3, #0]
	pres = BMP180_GET_pres(pressure);
 8000dbe:	4b0b      	ldr	r3, [pc, #44]	@ (8000dec <BMP180_CALIBRATION+0x78>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	b29b      	uxth	r3, r3
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f7ff fe63 	bl	8000a90 <BMP180_GET_pres>
 8000dca:	eef0 7a40 	vmov.f32	s15, s0
 8000dce:	4b08      	ldr	r3, [pc, #32]	@ (8000df0 <BMP180_CALIBRATION+0x7c>)
 8000dd0:	edc3 7a00 	vstr	s15, [r3]
	//}
	*firstpres = pres;
 8000dd4:	4b06      	ldr	r3, [pc, #24]	@ (8000df0 <BMP180_CALIBRATION+0x7c>)
 8000dd6:	681a      	ldr	r2, [r3, #0]
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	601a      	str	r2, [r3, #0]
}
 8000ddc:	bf00      	nop
 8000dde:	3708      	adds	r7, #8
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	000000b8 	.word	0x000000b8
 8000de8:	000000dc 	.word	0x000000dc
 8000dec:	000000bc 	.word	0x000000bc
 8000df0:	000000e0 	.word	0x000000e0

08000df4 <BMP180_GET_height>:

float BMP180_GET_height(void){
 8000df4:	b480      	push	{r7}
 8000df6:	b083      	sub	sp, #12
 8000df8:	af00      	add	r7, sp, #0
	float height = 0, factor; // metry
 8000dfa:	f04f 0300 	mov.w	r3, #0
 8000dfe:	607b      	str	r3, [r7, #4]
	factor = 11.3; // na 1m cisnienie spada o 11,3 pa
 8000e00:	4b0a      	ldr	r3, [pc, #40]	@ (8000e2c <BMP180_GET_height+0x38>)
 8000e02:	603b      	str	r3, [r7, #0]
	height = (ampritude/factor);
 8000e04:	4b0a      	ldr	r3, [pc, #40]	@ (8000e30 <BMP180_GET_height+0x3c>)
 8000e06:	edd3 6a00 	vldr	s13, [r3]
 8000e0a:	ed97 7a00 	vldr	s14, [r7]
 8000e0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000e12:	edc7 7a01 	vstr	s15, [r7, #4]
	return height;
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	ee07 3a90 	vmov	s15, r3
}
 8000e1c:	eeb0 0a67 	vmov.f32	s0, s15
 8000e20:	370c      	adds	r7, #12
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop
 8000e2c:	4134cccd 	.word	0x4134cccd
 8000e30:	000000e8 	.word	0x000000e8

08000e34 <ESC_1_SPEED>:
static TIM_HandleTypeDef *htim_ESC; //450Hz



void ESC_1_SPEED(uint16_t a)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b083      	sub	sp, #12
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	80fb      	strh	r3, [r7, #6]
	  if(a < min_speed)
 8000e3e:	88fb      	ldrh	r3, [r7, #6]
 8000e40:	f642 1203 	movw	r2, #10499	@ 0x2903
 8000e44:	4293      	cmp	r3, r2
 8000e46:	d802      	bhi.n	8000e4e <ESC_1_SPEED+0x1a>
	  {
		  a = min_speed;
 8000e48:	f642 1304 	movw	r3, #10500	@ 0x2904
 8000e4c:	80fb      	strh	r3, [r7, #6]
	  }
	  if(a >  max_speed)
 8000e4e:	88fb      	ldrh	r3, [r7, #6]
 8000e50:	f644 422c 	movw	r2, #19500	@ 0x4c2c
 8000e54:	4293      	cmp	r3, r2
 8000e56:	d902      	bls.n	8000e5e <ESC_1_SPEED+0x2a>
	  {
		  a =  max_speed;
 8000e58:	f644 432c 	movw	r3, #19500	@ 0x4c2c
 8000e5c:	80fb      	strh	r3, [r7, #6]
	  }
	  __HAL_TIM_SET_COMPARE(htim_ESC, TIM_CHANNEL_1, a);
 8000e5e:	4b05      	ldr	r3, [pc, #20]	@ (8000e74 <ESC_1_SPEED+0x40>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	88fa      	ldrh	r2, [r7, #6]
 8000e66:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000e68:	bf00      	nop
 8000e6a:	370c      	adds	r7, #12
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e72:	4770      	bx	lr
 8000e74:	24000098 	.word	0x24000098

08000e78 <ESC_2_SPEED>:

void ESC_2_SPEED(uint16_t a)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b083      	sub	sp, #12
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	4603      	mov	r3, r0
 8000e80:	80fb      	strh	r3, [r7, #6]
	  if(a < min_speed - Engine2_balance)
 8000e82:	88fb      	ldrh	r3, [r7, #6]
 8000e84:	f642 1203 	movw	r2, #10499	@ 0x2903
 8000e88:	4293      	cmp	r3, r2
 8000e8a:	d802      	bhi.n	8000e92 <ESC_2_SPEED+0x1a>
	  {
		  a = min_speed - Engine2_balance;
 8000e8c:	f642 1304 	movw	r3, #10500	@ 0x2904
 8000e90:	80fb      	strh	r3, [r7, #6]
	  }
	  if(a >  max_speed - Engine2_balance)
 8000e92:	88fb      	ldrh	r3, [r7, #6]
 8000e94:	f644 422c 	movw	r2, #19500	@ 0x4c2c
 8000e98:	4293      	cmp	r3, r2
 8000e9a:	d902      	bls.n	8000ea2 <ESC_2_SPEED+0x2a>
	  {
		  a =  max_speed - Engine2_balance;
 8000e9c:	f644 432c 	movw	r3, #19500	@ 0x4c2c
 8000ea0:	80fb      	strh	r3, [r7, #6]
	  }

	  __HAL_TIM_SET_COMPARE(htim_ESC, TIM_CHANNEL_2, a - Engine2_balance);
 8000ea2:	4b05      	ldr	r3, [pc, #20]	@ (8000eb8 <ESC_2_SPEED+0x40>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	88fa      	ldrh	r2, [r7, #6]
 8000eaa:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8000eac:	bf00      	nop
 8000eae:	370c      	adds	r7, #12
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr
 8000eb8:	24000098 	.word	0x24000098

08000ebc <ESC_3_SPEED>:

void ESC_3_SPEED(uint16_t a)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b083      	sub	sp, #12
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	80fb      	strh	r3, [r7, #6]
	  if(a < min_speed - Engine3_balance)
 8000ec6:	88fb      	ldrh	r3, [r7, #6]
 8000ec8:	f642 1203 	movw	r2, #10499	@ 0x2903
 8000ecc:	4293      	cmp	r3, r2
 8000ece:	d802      	bhi.n	8000ed6 <ESC_3_SPEED+0x1a>
	  {
		  a = min_speed - Engine3_balance;
 8000ed0:	f642 1304 	movw	r3, #10500	@ 0x2904
 8000ed4:	80fb      	strh	r3, [r7, #6]
	  }
	  if(a >  max_speed - Engine3_balance)
 8000ed6:	88fb      	ldrh	r3, [r7, #6]
 8000ed8:	f644 422c 	movw	r2, #19500	@ 0x4c2c
 8000edc:	4293      	cmp	r3, r2
 8000ede:	d902      	bls.n	8000ee6 <ESC_3_SPEED+0x2a>
	  {
		  a =  max_speed - Engine3_balance;
 8000ee0:	f644 432c 	movw	r3, #19500	@ 0x4c2c
 8000ee4:	80fb      	strh	r3, [r7, #6]
	  }

	  __HAL_TIM_SET_COMPARE(htim_ESC, TIM_CHANNEL_3, a - Engine3_balance);
 8000ee6:	4b05      	ldr	r3, [pc, #20]	@ (8000efc <ESC_3_SPEED+0x40>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	88fa      	ldrh	r2, [r7, #6]
 8000eee:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8000ef0:	bf00      	nop
 8000ef2:	370c      	adds	r7, #12
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr
 8000efc:	24000098 	.word	0x24000098

08000f00 <ESC_4_SPEED>:

void ESC_4_SPEED(uint16_t a)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b083      	sub	sp, #12
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	4603      	mov	r3, r0
 8000f08:	80fb      	strh	r3, [r7, #6]
	  if(a < min_speed - Engine4_balance)
 8000f0a:	88fb      	ldrh	r3, [r7, #6]
 8000f0c:	f642 1203 	movw	r2, #10499	@ 0x2903
 8000f10:	4293      	cmp	r3, r2
 8000f12:	d802      	bhi.n	8000f1a <ESC_4_SPEED+0x1a>
	  {
		  a = min_speed - Engine4_balance;
 8000f14:	f642 1304 	movw	r3, #10500	@ 0x2904
 8000f18:	80fb      	strh	r3, [r7, #6]
	  }
	  if(a > max_speed - Engine4_balance)
 8000f1a:	88fb      	ldrh	r3, [r7, #6]
 8000f1c:	f644 422c 	movw	r2, #19500	@ 0x4c2c
 8000f20:	4293      	cmp	r3, r2
 8000f22:	d902      	bls.n	8000f2a <ESC_4_SPEED+0x2a>
	  {
		  a = max_speed - Engine4_balance;
 8000f24:	f644 432c 	movw	r3, #19500	@ 0x4c2c
 8000f28:	80fb      	strh	r3, [r7, #6]
	  }

	  __HAL_TIM_SET_COMPARE(htim_ESC, TIM_CHANNEL_4, a - Engine4_balance);
 8000f2a:	4b05      	ldr	r3, [pc, #20]	@ (8000f40 <ESC_4_SPEED+0x40>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	88fa      	ldrh	r2, [r7, #6]
 8000f32:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8000f34:	bf00      	nop
 8000f36:	370c      	adds	r7, #12
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr
 8000f40:	24000098 	.word	0x24000098

08000f44 <ESC_INT>:
 *
 * najpierw wlonczamy PWM a dopiero potem zasilanie do silników, w przeciwnym razie ESC mogą włączyć się w trybie programowania.
 *
 */
void ESC_INT(TIM_HandleTypeDef *htim)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
	htim_ESC = htim;
 8000f4c:	4a20      	ldr	r2, [pc, #128]	@ (8000fd0 <ESC_INT+0x8c>)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	6013      	str	r3, [r2, #0]


	HAL_TIM_PWM_Start(htim_ESC, TIM_CHANNEL_1);//450Hz
 8000f52:	4b1f      	ldr	r3, [pc, #124]	@ (8000fd0 <ESC_INT+0x8c>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	2100      	movs	r1, #0
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f015 f9ff 	bl	801635c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim_ESC, TIM_CHANNEL_2);
 8000f5e:	4b1c      	ldr	r3, [pc, #112]	@ (8000fd0 <ESC_INT+0x8c>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	2104      	movs	r1, #4
 8000f64:	4618      	mov	r0, r3
 8000f66:	f015 f9f9 	bl	801635c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim_ESC, TIM_CHANNEL_3);
 8000f6a:	4b19      	ldr	r3, [pc, #100]	@ (8000fd0 <ESC_INT+0x8c>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	2108      	movs	r1, #8
 8000f70:	4618      	mov	r0, r3
 8000f72:	f015 f9f3 	bl	801635c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim_ESC, TIM_CHANNEL_4);
 8000f76:	4b16      	ldr	r3, [pc, #88]	@ (8000fd0 <ESC_INT+0x8c>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	210c      	movs	r1, #12
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f015 f9ed 	bl	801635c <HAL_TIM_PWM_Start>

	__HAL_TIM_SET_COMPARE(htim_ESC, TIM_CHANNEL_4, 10000);
 8000f82:	4b13      	ldr	r3, [pc, #76]	@ (8000fd0 <ESC_INT+0x8c>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000f8c:	641a      	str	r2, [r3, #64]	@ 0x40
	__HAL_TIM_SET_COMPARE(htim_ESC, TIM_CHANNEL_3, 10000);
 8000f8e:	4b10      	ldr	r3, [pc, #64]	@ (8000fd0 <ESC_INT+0x8c>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000f98:	63da      	str	r2, [r3, #60]	@ 0x3c
	__HAL_TIM_SET_COMPARE(htim_ESC, TIM_CHANNEL_2, 10000);
 8000f9a:	4b0d      	ldr	r3, [pc, #52]	@ (8000fd0 <ESC_INT+0x8c>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000fa4:	639a      	str	r2, [r3, #56]	@ 0x38
	__HAL_TIM_SET_COMPARE(htim_ESC, TIM_CHANNEL_1, 10000);
 8000fa6:	4b0a      	ldr	r3, [pc, #40]	@ (8000fd0 <ESC_INT+0x8c>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000fb0:	635a      	str	r2, [r3, #52]	@ 0x34
	ESC_POWER_0;
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000fb8:	4806      	ldr	r0, [pc, #24]	@ (8000fd4 <ESC_INT+0x90>)
 8000fba:	f00d fa83 	bl	800e4c4 <HAL_GPIO_WritePin>
	HAL_Delay(3000);
 8000fbe:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000fc2:	f008 f943 	bl	800924c <HAL_Delay>
}
 8000fc6:	bf00      	nop
 8000fc8:	3708      	adds	r7, #8
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	24000098 	.word	0x24000098
 8000fd4:	58021800 	.word	0x58021800

08000fd8 <HMC5883L_Init>:
static I2C_HandleTypeDef *hi2c_HMC5883L;

extern uint8_t HMC5883L_Data_IT[6];
extern uint8_t HMC583L_IRQ;

uint8_t HMC5883L_Init(I2C_HandleTypeDef*hi2c){
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b088      	sub	sp, #32
 8000fdc:	af04      	add	r7, sp, #16
 8000fde:	6078      	str	r0, [r7, #4]

	hi2c_HMC5883L = hi2c;
 8000fe0:	4a2a      	ldr	r2, [pc, #168]	@ (800108c <HMC5883L_Init+0xb4>)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	6013      	str	r3, [r2, #0]

	uint8_t data = 0;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	73fb      	strb	r3, [r7, #15]
	 * bit3 = 0			30 HzOutput rate
	 * bit2 = 0		}
	 * bit1 = 0
	 * bit0 = 0
	 */
	data = 0xF0;
 8000fea:	23f0      	movs	r3, #240	@ 0xf0
 8000fec:	73fb      	strb	r3, [r7, #15]

	HAL_I2C_Mem_Write(hi2c_HMC5883L, HMC5883L_I2C_Address<<1, HMC5883L_Configuration_Register_A, 1, &data, 1, 1);
 8000fee:	4b27      	ldr	r3, [pc, #156]	@ (800108c <HMC5883L_Init+0xb4>)
 8000ff0:	6818      	ldr	r0, [r3, #0]
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	9302      	str	r3, [sp, #8]
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	9301      	str	r3, [sp, #4]
 8000ffa:	f107 030f 	add.w	r3, r7, #15
 8000ffe:	9300      	str	r3, [sp, #0]
 8001000:	2301      	movs	r3, #1
 8001002:	2200      	movs	r2, #0
 8001004:	213c      	movs	r1, #60	@ 0x3c
 8001006:	f00d fb2d 	bl	800e664 <HAL_I2C_Mem_Write>
	 * bit3 = 0
	 * bit2 = 0
	 * bit1 = 0
	 * bit0 = 0
	 */
	data = 0x32;
 800100a:	2332      	movs	r3, #50	@ 0x32
 800100c:	73fb      	strb	r3, [r7, #15]

	HAL_I2C_Mem_Write(hi2c_HMC5883L, HMC5883L_I2C_Address<<1, HMC5883L_Configuration_Register_B, 1, &data, 1, 1);
 800100e:	4b1f      	ldr	r3, [pc, #124]	@ (800108c <HMC5883L_Init+0xb4>)
 8001010:	6818      	ldr	r0, [r3, #0]
 8001012:	2301      	movs	r3, #1
 8001014:	9302      	str	r3, [sp, #8]
 8001016:	2301      	movs	r3, #1
 8001018:	9301      	str	r3, [sp, #4]
 800101a:	f107 030f 	add.w	r3, r7, #15
 800101e:	9300      	str	r3, [sp, #0]
 8001020:	2301      	movs	r3, #1
 8001022:	2201      	movs	r2, #1
 8001024:	213c      	movs	r1, #60	@ 0x3c
 8001026:	f00d fb1d 	bl	800e664 <HAL_I2C_Mem_Write>
	 * bit3 = 0
	 * bit2 = 0
	 * bit1 = 0	{ Continuous-Measurement Mode
	 * bit0 = 0 }
	 */
	data = 0x80;
 800102a:	2380      	movs	r3, #128	@ 0x80
 800102c:	73fb      	strb	r3, [r7, #15]

	HAL_I2C_Mem_Write(hi2c_HMC5883L, HMC5883L_I2C_Address<<1, HMC5883L_Mode_Register, 1, &data, 1, 1);
 800102e:	4b17      	ldr	r3, [pc, #92]	@ (800108c <HMC5883L_Init+0xb4>)
 8001030:	6818      	ldr	r0, [r3, #0]
 8001032:	2301      	movs	r3, #1
 8001034:	9302      	str	r3, [sp, #8]
 8001036:	2301      	movs	r3, #1
 8001038:	9301      	str	r3, [sp, #4]
 800103a:	f107 030f 	add.w	r3, r7, #15
 800103e:	9300      	str	r3, [sp, #0]
 8001040:	2301      	movs	r3, #1
 8001042:	2202      	movs	r2, #2
 8001044:	213c      	movs	r1, #60	@ 0x3c
 8001046:	f00d fb0d 	bl	800e664 <HAL_I2C_Mem_Write>


	uint8_t status = 0;
 800104a:	2300      	movs	r3, #0
 800104c:	73bb      	strb	r3, [r7, #14]

	HAL_I2C_Mem_Read(hi2c_HMC5883L, HMC5883L_I2C_Address<<1, HMC5883L_Identifaction_Register_A, 1, &status, 1, 1);
 800104e:	4b0f      	ldr	r3, [pc, #60]	@ (800108c <HMC5883L_Init+0xb4>)
 8001050:	6818      	ldr	r0, [r3, #0]
 8001052:	2301      	movs	r3, #1
 8001054:	9302      	str	r3, [sp, #8]
 8001056:	2301      	movs	r3, #1
 8001058:	9301      	str	r3, [sp, #4]
 800105a:	f107 030e 	add.w	r3, r7, #14
 800105e:	9300      	str	r3, [sp, #0]
 8001060:	2301      	movs	r3, #1
 8001062:	220a      	movs	r2, #10
 8001064:	213c      	movs	r1, #60	@ 0x3c
 8001066:	f00d fc11 	bl	800e88c <HAL_I2C_Mem_Read>

	if(status != 0x48){
 800106a:	7bbb      	ldrb	r3, [r7, #14]
 800106c:	2b48      	cmp	r3, #72	@ 0x48
 800106e:	d002      	beq.n	8001076 <HMC5883L_Init+0x9e>
		status = 0;
 8001070:	2300      	movs	r3, #0
 8001072:	73bb      	strb	r3, [r7, #14]
 8001074:	e001      	b.n	800107a <HMC5883L_Init+0xa2>
	}
	else{
		status = 1;
 8001076:	2301      	movs	r3, #1
 8001078:	73bb      	strb	r3, [r7, #14]
	}
	HAL_Delay(10);
 800107a:	200a      	movs	r0, #10
 800107c:	f008 f8e6 	bl	800924c <HAL_Delay>

	return status;
 8001080:	7bbb      	ldrb	r3, [r7, #14]
}
 8001082:	4618      	mov	r0, r3
 8001084:	3710      	adds	r7, #16
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	2400009c 	.word	0x2400009c

08001090 <HMC5883L_Get_Z_Start>:


int16_t HMC5883L_Get_Z_Start(void){
 8001090:	b580      	push	{r7, lr}
 8001092:	b086      	sub	sp, #24
 8001094:	af04      	add	r7, sp, #16
	int16_t fulldata = 182;
 8001096:	23b6      	movs	r3, #182	@ 0xb6
 8001098:	80fb      	strh	r3, [r7, #6]
	uint8_t data[6];

	HAL_I2C_Mem_Read(hi2c_HMC5883L, HMC5883L_I2C_Address<<1, HMC5883L_Data_Output_Z_MSB_Register, 1, data, 6, 1);
 800109a:	4b0d      	ldr	r3, [pc, #52]	@ (80010d0 <HMC5883L_Get_Z_Start+0x40>)
 800109c:	6818      	ldr	r0, [r3, #0]
 800109e:	2301      	movs	r3, #1
 80010a0:	9302      	str	r3, [sp, #8]
 80010a2:	2306      	movs	r3, #6
 80010a4:	9301      	str	r3, [sp, #4]
 80010a6:	463b      	mov	r3, r7
 80010a8:	9300      	str	r3, [sp, #0]
 80010aa:	2301      	movs	r3, #1
 80010ac:	2205      	movs	r2, #5
 80010ae:	213c      	movs	r1, #60	@ 0x3c
 80010b0:	f00d fbec 	bl	800e88c <HAL_I2C_Mem_Read>

	fulldata = ((int16_t)data[4]<<8) | data[5];
 80010b4:	793b      	ldrb	r3, [r7, #4]
 80010b6:	021b      	lsls	r3, r3, #8
 80010b8:	b21a      	sxth	r2, r3
 80010ba:	797b      	ldrb	r3, [r7, #5]
 80010bc:	b21b      	sxth	r3, r3
 80010be:	4313      	orrs	r3, r2
 80010c0:	80fb      	strh	r3, [r7, #6]

	return fulldata;
 80010c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	3708      	adds	r7, #8
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	2400009c 	.word	0x2400009c

080010d4 <HMC5883L_Get_Z_Start_IT>:

void HMC5883L_Get_Z_Start_IT(void){
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af02      	add	r7, sp, #8
	HAL_I2C_Mem_Read_IT(hi2c_HMC5883L, HMC5883L_I2C_Address<<1, HMC5883L_Data_Output_Z_MSB_Register, 1, (uint8_t *)HMC5883L_Data_IT, 6);
 80010da:	4b08      	ldr	r3, [pc, #32]	@ (80010fc <HMC5883L_Get_Z_Start_IT+0x28>)
 80010dc:	6818      	ldr	r0, [r3, #0]
 80010de:	2306      	movs	r3, #6
 80010e0:	9301      	str	r3, [sp, #4]
 80010e2:	4b07      	ldr	r3, [pc, #28]	@ (8001100 <HMC5883L_Get_Z_Start_IT+0x2c>)
 80010e4:	9300      	str	r3, [sp, #0]
 80010e6:	2301      	movs	r3, #1
 80010e8:	2205      	movs	r2, #5
 80010ea:	213c      	movs	r1, #60	@ 0x3c
 80010ec:	f00d fd72 	bl	800ebd4 <HAL_I2C_Mem_Read_IT>
	HMC583L_IRQ = 1;
 80010f0:	4b04      	ldr	r3, [pc, #16]	@ (8001104 <HMC5883L_Get_Z_Start_IT+0x30>)
 80010f2:	2201      	movs	r2, #1
 80010f4:	701a      	strb	r2, [r3, #0]
}
 80010f6:	bf00      	nop
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	2400009c 	.word	0x2400009c
 8001100:	00000064 	.word	0x00000064
 8001104:	000041d5 	.word	0x000041d5

08001108 <HMC5883L_Get_Z_End_IT>:

int16_t HMC5883L_Get_Z_End_IT(void){
 8001108:	b480      	push	{r7}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
	int16_t fulldata = 0;
 800110e:	2300      	movs	r3, #0
 8001110:	80fb      	strh	r3, [r7, #6]

	fulldata = ((int16_t)HMC5883L_Data_IT[4]<<8) | HMC5883L_Data_IT[5];
 8001112:	4b08      	ldr	r3, [pc, #32]	@ (8001134 <HMC5883L_Get_Z_End_IT+0x2c>)
 8001114:	791b      	ldrb	r3, [r3, #4]
 8001116:	021b      	lsls	r3, r3, #8
 8001118:	b21a      	sxth	r2, r3
 800111a:	4b06      	ldr	r3, [pc, #24]	@ (8001134 <HMC5883L_Get_Z_End_IT+0x2c>)
 800111c:	795b      	ldrb	r3, [r3, #5]
 800111e:	b21b      	sxth	r3, r3
 8001120:	4313      	orrs	r3, r2
 8001122:	80fb      	strh	r3, [r7, #6]

	return fulldata;
 8001124:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001128:	4618      	mov	r0, r3
 800112a:	370c      	adds	r7, #12
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr
 8001134:	00000064 	.word	0x00000064

08001138 <HMC5883L_Calibration>:


int16_t HMC5883L_Calibration(void){
 8001138:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800113c:	b084      	sub	sp, #16
 800113e:	af00      	add	r7, sp, #0
	int64_t mes_data = 0;
 8001140:	f04f 0200 	mov.w	r2, #0
 8001144:	f04f 0300 	mov.w	r3, #0
 8001148:	e9c7 2302 	strd	r2, r3, [r7, #8]
	for(int i = 0; i < 10; i++){
 800114c:	2300      	movs	r3, #0
 800114e:	607b      	str	r3, [r7, #4]
 8001150:	e014      	b.n	800117c <HMC5883L_Calibration+0x44>
		mes_data += HMC5883L_Get_Z_Start();
 8001152:	f7ff ff9d 	bl	8001090 <HMC5883L_Get_Z_Start>
 8001156:	4603      	mov	r3, r0
 8001158:	b21b      	sxth	r3, r3
 800115a:	17da      	asrs	r2, r3, #31
 800115c:	461c      	mov	r4, r3
 800115e:	4615      	mov	r5, r2
 8001160:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001164:	eb12 0804 	adds.w	r8, r2, r4
 8001168:	eb43 0905 	adc.w	r9, r3, r5
 800116c:	e9c7 8902 	strd	r8, r9, [r7, #8]
		HAL_Delay(100); //Output = 30Hz
 8001170:	2064      	movs	r0, #100	@ 0x64
 8001172:	f008 f86b 	bl	800924c <HAL_Delay>
	for(int i = 0; i < 10; i++){
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	3301      	adds	r3, #1
 800117a:	607b      	str	r3, [r7, #4]
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	2b09      	cmp	r3, #9
 8001180:	dde7      	ble.n	8001152 <HMC5883L_Calibration+0x1a>
	}

	return (mes_data/10);
 8001182:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001186:	f04f 020a 	mov.w	r2, #10
 800118a:	f04f 0300 	mov.w	r3, #0
 800118e:	f7ff f8bf 	bl	8000310 <__aeabi_ldivmod>
 8001192:	4602      	mov	r2, r0
 8001194:	460b      	mov	r3, r1
 8001196:	b213      	sxth	r3, r2
}
 8001198:	4618      	mov	r0, r3
 800119a:	3710      	adds	r7, #16
 800119c:	46bd      	mov	sp, r7
 800119e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

080011a4 <MPU6050_INIT>:
//extern float xval;
//extern float yval;
//extern float zval;


uint8_t MPU6050_INIT(I2C_HandleTypeDef*hi2c){
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b084      	sub	sp, #16
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
	hi2c_mpu6050 = hi2c;
 80011ac:	4a13      	ldr	r2, [pc, #76]	@ (80011fc <MPU6050_INIT+0x58>)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	6013      	str	r3, [r2, #0]
	MPU6050_RESET();
 80011b2:	f000 f825 	bl	8001200 <MPU6050_RESET>
	MPU6050_CONFIG_SAMPLE_RATE();
 80011b6:	f000 f88f 	bl	80012d8 <MPU6050_CONFIG_SAMPLE_RATE>
	MPU6050_CONFIG_DLPF(0x05);// //05
 80011ba:	2005      	movs	r0, #5
 80011bc:	f000 f838 	bl	8001230 <MPU6050_CONFIG_DLPF>
	/*
	 *  0 - 250 o/s
	 *  0x08 - 500 o/s
	 */
	MPU6050_CONFIG_GYRO(0x08);//+-500 o/s
 80011c0:	2008      	movs	r0, #8
 80011c2:	f000 f851 	bl	8001268 <MPU6050_CONFIG_GYRO>
	MPU6050_CONFIG_ACCEL(0x08); // +-4g
 80011c6:	2008      	movs	r0, #8
 80011c8:	f000 f86a 	bl	80012a0 <MPU6050_CONFIG_ACCEL>

	MPU6050_Enable_I2C_Bypass();
 80011cc:	f000 fd34 	bl	8001c38 <MPU6050_Enable_I2C_Bypass>
	MPU6050_CONFIG_USER_CONTROL();
 80011d0:	f000 f89a 	bl	8001308 <MPU6050_CONFIG_USER_CONTROL>

	HAL_Delay(10);
 80011d4:	200a      	movs	r0, #10
 80011d6:	f008 f839 	bl	800924c <HAL_Delay>

	uint8_t status;
	status = MPU6050_READ_ID();
 80011da:	f000 fd15 	bl	8001c08 <MPU6050_READ_ID>
 80011de:	4603      	mov	r3, r0
 80011e0:	73fb      	strb	r3, [r7, #15]

	if(status != 104){
 80011e2:	7bfb      	ldrb	r3, [r7, #15]
 80011e4:	2b68      	cmp	r3, #104	@ 0x68
 80011e6:	d002      	beq.n	80011ee <MPU6050_INIT+0x4a>
		status = 0;//error
 80011e8:	2300      	movs	r3, #0
 80011ea:	73fb      	strb	r3, [r7, #15]
 80011ec:	e001      	b.n	80011f2 <MPU6050_INIT+0x4e>
	}
	else{
		status = 1;//ok
 80011ee:	2301      	movs	r3, #1
 80011f0:	73fb      	strb	r3, [r7, #15]
//	int x = MPU6050_GET_ACCEL_FULLVALUE_X();
//	x = MPU6050_READ_CONFIG_SAMPLE_RATE();
//	x = MPU6050_READ_CONFIG_DLPF();//1kHz;
//	x = MPU6050_READ_CONFIG_GYRO();//+-500 o/s;
//	x = MPU6050_READ_CONFIG_ACCEL(); // +-8g;;
	return status;
 80011f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	3710      	adds	r7, #16
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	240000a0 	.word	0x240000a0

08001200 <MPU6050_RESET>:


void MPU6050_RESET(void){
 8001200:	b580      	push	{r7, lr}
 8001202:	b086      	sub	sp, #24
 8001204:	af04      	add	r7, sp, #16
	uint8_t data = 0x00;//0x80
 8001206:	2300      	movs	r3, #0
 8001208:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_PWR_MGMT_1, 1, &data, 1, 1);
 800120a:	4b08      	ldr	r3, [pc, #32]	@ (800122c <MPU6050_RESET+0x2c>)
 800120c:	6818      	ldr	r0, [r3, #0]
 800120e:	2301      	movs	r3, #1
 8001210:	9302      	str	r3, [sp, #8]
 8001212:	2301      	movs	r3, #1
 8001214:	9301      	str	r3, [sp, #4]
 8001216:	1dfb      	adds	r3, r7, #7
 8001218:	9300      	str	r3, [sp, #0]
 800121a:	2301      	movs	r3, #1
 800121c:	226b      	movs	r2, #107	@ 0x6b
 800121e:	21d0      	movs	r1, #208	@ 0xd0
 8001220:	f00d fa20 	bl	800e664 <HAL_I2C_Mem_Write>
}
 8001224:	bf00      	nop
 8001226:	3708      	adds	r7, #8
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	240000a0 	.word	0x240000a0

08001230 <MPU6050_CONFIG_DLPF>:

void MPU6050_CONFIG_DLPF(uint8_t DLPF_CFG){
 8001230:	b580      	push	{r7, lr}
 8001232:	b088      	sub	sp, #32
 8001234:	af04      	add	r7, sp, #16
 8001236:	4603      	mov	r3, r0
 8001238:	71fb      	strb	r3, [r7, #7]
	uint8_t data = DLPF_CFG;
 800123a:	79fb      	ldrb	r3, [r7, #7]
 800123c:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_CONFIG, 1, &data, 1, 1);
 800123e:	4b09      	ldr	r3, [pc, #36]	@ (8001264 <MPU6050_CONFIG_DLPF+0x34>)
 8001240:	6818      	ldr	r0, [r3, #0]
 8001242:	2301      	movs	r3, #1
 8001244:	9302      	str	r3, [sp, #8]
 8001246:	2301      	movs	r3, #1
 8001248:	9301      	str	r3, [sp, #4]
 800124a:	f107 030f 	add.w	r3, r7, #15
 800124e:	9300      	str	r3, [sp, #0]
 8001250:	2301      	movs	r3, #1
 8001252:	221a      	movs	r2, #26
 8001254:	21d0      	movs	r1, #208	@ 0xd0
 8001256:	f00d fa05 	bl	800e664 <HAL_I2C_Mem_Write>
}
 800125a:	bf00      	nop
 800125c:	3710      	adds	r7, #16
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	240000a0 	.word	0x240000a0

08001268 <MPU6050_CONFIG_GYRO>:

void MPU6050_CONFIG_GYRO(uint8_t GYRO_CFG/*konfiguracja gyroskopy*/){
 8001268:	b580      	push	{r7, lr}
 800126a:	b088      	sub	sp, #32
 800126c:	af04      	add	r7, sp, #16
 800126e:	4603      	mov	r3, r0
 8001270:	71fb      	strb	r3, [r7, #7]
	uint8_t data = GYRO_CFG;
 8001272:	79fb      	ldrb	r3, [r7, #7]
 8001274:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_GYRO_CONFIG, 1, &data, 1, 1);
 8001276:	4b09      	ldr	r3, [pc, #36]	@ (800129c <MPU6050_CONFIG_GYRO+0x34>)
 8001278:	6818      	ldr	r0, [r3, #0]
 800127a:	2301      	movs	r3, #1
 800127c:	9302      	str	r3, [sp, #8]
 800127e:	2301      	movs	r3, #1
 8001280:	9301      	str	r3, [sp, #4]
 8001282:	f107 030f 	add.w	r3, r7, #15
 8001286:	9300      	str	r3, [sp, #0]
 8001288:	2301      	movs	r3, #1
 800128a:	221b      	movs	r2, #27
 800128c:	21d0      	movs	r1, #208	@ 0xd0
 800128e:	f00d f9e9 	bl	800e664 <HAL_I2C_Mem_Write>
}
 8001292:	bf00      	nop
 8001294:	3710      	adds	r7, #16
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	240000a0 	.word	0x240000a0

080012a0 <MPU6050_CONFIG_ACCEL>:

void MPU6050_CONFIG_ACCEL(uint8_t ACCEL_CFG/*konfiguracja akcelorometru*/){
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b088      	sub	sp, #32
 80012a4:	af04      	add	r7, sp, #16
 80012a6:	4603      	mov	r3, r0
 80012a8:	71fb      	strb	r3, [r7, #7]
	uint8_t data = ACCEL_CFG;
 80012aa:	79fb      	ldrb	r3, [r7, #7]
 80012ac:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_ACCEL_CONFIG, 1, &data, 1, 1);
 80012ae:	4b09      	ldr	r3, [pc, #36]	@ (80012d4 <MPU6050_CONFIG_ACCEL+0x34>)
 80012b0:	6818      	ldr	r0, [r3, #0]
 80012b2:	2301      	movs	r3, #1
 80012b4:	9302      	str	r3, [sp, #8]
 80012b6:	2301      	movs	r3, #1
 80012b8:	9301      	str	r3, [sp, #4]
 80012ba:	f107 030f 	add.w	r3, r7, #15
 80012be:	9300      	str	r3, [sp, #0]
 80012c0:	2301      	movs	r3, #1
 80012c2:	221c      	movs	r2, #28
 80012c4:	21d0      	movs	r1, #208	@ 0xd0
 80012c6:	f00d f9cd 	bl	800e664 <HAL_I2C_Mem_Write>
}
 80012ca:	bf00      	nop
 80012cc:	3710      	adds	r7, #16
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	240000a0 	.word	0x240000a0

080012d8 <MPU6050_CONFIG_SAMPLE_RATE>:
void MPU6050_CONFIG_INT(void){
	uint8_t data = 0x00;
	HAL_I2C_Mem_Write(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_INT_ENABLE, 1, &data, 1, 1);
}

void MPU6050_CONFIG_SAMPLE_RATE(void){
 80012d8:	b580      	push	{r7, lr}
 80012da:	b086      	sub	sp, #24
 80012dc:	af04      	add	r7, sp, #16
	uint8_t data = 0x00; // Sample Rate = Gyroscope Output Rate / (1 + SMPLRT_DIV)                 Gyroscope Output Rate = 1kHz
 80012de:	2300      	movs	r3, #0
 80012e0:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_SMPLRT_DIV, 1, &data, 1, 1);
 80012e2:	4b08      	ldr	r3, [pc, #32]	@ (8001304 <MPU6050_CONFIG_SAMPLE_RATE+0x2c>)
 80012e4:	6818      	ldr	r0, [r3, #0]
 80012e6:	2301      	movs	r3, #1
 80012e8:	9302      	str	r3, [sp, #8]
 80012ea:	2301      	movs	r3, #1
 80012ec:	9301      	str	r3, [sp, #4]
 80012ee:	1dfb      	adds	r3, r7, #7
 80012f0:	9300      	str	r3, [sp, #0]
 80012f2:	2301      	movs	r3, #1
 80012f4:	2219      	movs	r2, #25
 80012f6:	21d0      	movs	r1, #208	@ 0xd0
 80012f8:	f00d f9b4 	bl	800e664 <HAL_I2C_Mem_Write>
}
 80012fc:	bf00      	nop
 80012fe:	3708      	adds	r7, #8
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	240000a0 	.word	0x240000a0

08001308 <MPU6050_CONFIG_USER_CONTROL>:
void MPU6050_CONFIG_INTERRUPT_ENABLE(void){
	uint8_t data = 0x00;
	HAL_I2C_Mem_Write(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_PWR_MGMT_2, 1, &data, 1, 1);
}

void MPU6050_CONFIG_USER_CONTROL(void){
 8001308:	b580      	push	{r7, lr}
 800130a:	b086      	sub	sp, #24
 800130c:	af04      	add	r7, sp, #16
	uint8_t data = 0x00;
 800130e:	2300      	movs	r3, #0
 8001310:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_USER_CTRL, 1, &data, 1, 1);
 8001312:	4b08      	ldr	r3, [pc, #32]	@ (8001334 <MPU6050_CONFIG_USER_CONTROL+0x2c>)
 8001314:	6818      	ldr	r0, [r3, #0]
 8001316:	2301      	movs	r3, #1
 8001318:	9302      	str	r3, [sp, #8]
 800131a:	2301      	movs	r3, #1
 800131c:	9301      	str	r3, [sp, #4]
 800131e:	1dfb      	adds	r3, r7, #7
 8001320:	9300      	str	r3, [sp, #0]
 8001322:	2301      	movs	r3, #1
 8001324:	226a      	movs	r2, #106	@ 0x6a
 8001326:	21d0      	movs	r1, #208	@ 0xd0
 8001328:	f00d f99c 	bl	800e664 <HAL_I2C_Mem_Write>
}
 800132c:	bf00      	nop
 800132e:	3708      	adds	r7, #8
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	240000a0 	.word	0x240000a0

08001338 <MPU6050_CALIBRATION>:


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void MPU6050_CALIBRATION(float *accelx_cal,float *accely_cal,float*accelz_cal,float *gyrox_cal,float *gyroy_cal,
		float *gyroz_cal, float Gyr_Scale, float Acc_Scale){
 8001338:	b580      	push	{r7, lr}
 800133a:	b08e      	sub	sp, #56	@ 0x38
 800133c:	af00      	add	r7, sp, #0
 800133e:	6178      	str	r0, [r7, #20]
 8001340:	6139      	str	r1, [r7, #16]
 8001342:	60fa      	str	r2, [r7, #12]
 8001344:	60bb      	str	r3, [r7, #8]
 8001346:	ed87 0a01 	vstr	s0, [r7, #4]
 800134a:	edc7 0a00 	vstr	s1, [r7]

	float accelx = 0, accely = 0, accelz = 0, gyrox = 0, gyroy = 0, gyroz = 0;
 800134e:	f04f 0300 	mov.w	r3, #0
 8001352:	637b      	str	r3, [r7, #52]	@ 0x34
 8001354:	f04f 0300 	mov.w	r3, #0
 8001358:	633b      	str	r3, [r7, #48]	@ 0x30
 800135a:	f04f 0300 	mov.w	r3, #0
 800135e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001360:	f04f 0300 	mov.w	r3, #0
 8001364:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001366:	f04f 0300 	mov.w	r3, #0
 800136a:	627b      	str	r3, [r7, #36]	@ 0x24
 800136c:	f04f 0300 	mov.w	r3, #0
 8001370:	623b      	str	r3, [r7, #32]
	for(int i = 0; i < 1000; i++){ //5 sec
 8001372:	2300      	movs	r3, #0
 8001374:	61fb      	str	r3, [r7, #28]
 8001376:	e06b      	b.n	8001450 <MPU6050_CALIBRATION+0x118>
		  accelx = accelx + MPU6050_GET_ACCEL_FULLVALUE_X()/Acc_Scale;
 8001378:	f000 fbc2 	bl	8001b00 <MPU6050_GET_ACCEL_FULLVALUE_X>
 800137c:	4603      	mov	r3, r0
 800137e:	ee07 3a90 	vmov	s15, r3
 8001382:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001386:	ed97 7a00 	vldr	s14, [r7]
 800138a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800138e:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8001392:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001396:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
		  accely = accely + MPU6050_GET_ACCEL_FULLVALUE_Y()/Acc_Scale;
 800139a:	f000 fbd1 	bl	8001b40 <MPU6050_GET_ACCEL_FULLVALUE_Y>
 800139e:	4603      	mov	r3, r0
 80013a0:	ee07 3a90 	vmov	s15, r3
 80013a4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80013a8:	ed97 7a00 	vldr	s14, [r7]
 80013ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013b0:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 80013b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013b8:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
		  accelz = accelz + MPU6050_GET_ACCEL_FULLVALUE_Z()/Acc_Scale;
 80013bc:	f000 fbd4 	bl	8001b68 <MPU6050_GET_ACCEL_FULLVALUE_Z>
 80013c0:	4603      	mov	r3, r0
 80013c2:	ee07 3a90 	vmov	s15, r3
 80013c6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80013ca:	ed97 7a00 	vldr	s14, [r7]
 80013ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013d2:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80013d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013da:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

		  gyrox = gyrox + MPU6050_GET_GYRO_FULLVALUE_X()/Gyr_Scale;
 80013de:	f000 fbd7 	bl	8001b90 <MPU6050_GET_GYRO_FULLVALUE_X>
 80013e2:	4603      	mov	r3, r0
 80013e4:	ee07 3a90 	vmov	s15, r3
 80013e8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80013ec:	ed97 7a01 	vldr	s14, [r7, #4]
 80013f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013f4:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80013f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013fc:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
		  gyroy = gyroy + MPU6050_GET_GYRO_FULLVALUE_Y()/Gyr_Scale;
 8001400:	f000 fbda 	bl	8001bb8 <MPU6050_GET_GYRO_FULLVALUE_Y>
 8001404:	4603      	mov	r3, r0
 8001406:	ee07 3a90 	vmov	s15, r3
 800140a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800140e:	ed97 7a01 	vldr	s14, [r7, #4]
 8001412:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001416:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800141a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800141e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
		  gyroz = gyroz + MPU6050_GET_GYRO_FULLVALUE_Z()/Gyr_Scale;
 8001422:	f000 fbdd 	bl	8001be0 <MPU6050_GET_GYRO_FULLVALUE_Z>
 8001426:	4603      	mov	r3, r0
 8001428:	ee07 3a90 	vmov	s15, r3
 800142c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001430:	ed97 7a01 	vldr	s14, [r7, #4]
 8001434:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001438:	ed97 7a08 	vldr	s14, [r7, #32]
 800143c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001440:	edc7 7a08 	vstr	s15, [r7, #32]
		  HAL_Delay(1);
 8001444:	2001      	movs	r0, #1
 8001446:	f007 ff01 	bl	800924c <HAL_Delay>
	for(int i = 0; i < 1000; i++){ //5 sec
 800144a:	69fb      	ldr	r3, [r7, #28]
 800144c:	3301      	adds	r3, #1
 800144e:	61fb      	str	r3, [r7, #28]
 8001450:	69fb      	ldr	r3, [r7, #28]
 8001452:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001456:	db8f      	blt.n	8001378 <MPU6050_CALIBRATION+0x40>
	}
	*accelx_cal = accelx/1000;
 8001458:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 800145c:	eddf 6a20 	vldr	s13, [pc, #128]	@ 80014e0 <MPU6050_CALIBRATION+0x1a8>
 8001460:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	edc3 7a00 	vstr	s15, [r3]
	*accely_cal = accely/1000;
 800146a:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 800146e:	eddf 6a1c 	vldr	s13, [pc, #112]	@ 80014e0 <MPU6050_CALIBRATION+0x1a8>
 8001472:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001476:	693b      	ldr	r3, [r7, #16]
 8001478:	edc3 7a00 	vstr	s15, [r3]
	*accelz_cal = accelz/1000;
 800147c:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8001480:	eddf 6a17 	vldr	s13, [pc, #92]	@ 80014e0 <MPU6050_CALIBRATION+0x1a8>
 8001484:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	edc3 7a00 	vstr	s15, [r3]

	*accelz_cal = 1 - *accelz_cal;
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	edd3 7a00 	vldr	s15, [r3]
 8001494:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001498:	ee77 7a67 	vsub.f32	s15, s14, s15
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	edc3 7a00 	vstr	s15, [r3]

	*gyrox_cal = gyrox/1000;
 80014a2:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80014a6:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 80014e0 <MPU6050_CALIBRATION+0x1a8>
 80014aa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014ae:	68bb      	ldr	r3, [r7, #8]
 80014b0:	edc3 7a00 	vstr	s15, [r3]
	*gyroy_cal = gyroy/1000;
 80014b4:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80014b8:	eddf 6a09 	vldr	s13, [pc, #36]	@ 80014e0 <MPU6050_CALIBRATION+0x1a8>
 80014bc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80014c2:	edc3 7a00 	vstr	s15, [r3]
	*gyroz_cal = gyroz/1000;
 80014c6:	ed97 7a08 	vldr	s14, [r7, #32]
 80014ca:	eddf 6a05 	vldr	s13, [pc, #20]	@ 80014e0 <MPU6050_CALIBRATION+0x1a8>
 80014ce:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80014d4:	edc3 7a00 	vstr	s15, [r3]
}
 80014d8:	bf00      	nop
 80014da:	3738      	adds	r7, #56	@ 0x38
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	447a0000 	.word	0x447a0000
 80014e4:	00000000 	.word	0x00000000

080014e8 <MPU6050_GET_ACCEL_TO_ANGLE>:

void MPU6050_GET_ACCEL_TO_ANGLE(float ax, float ay, float az, float *ax_ang, float *ay_ang/*, float *az_ang*/){
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b090      	sub	sp, #64	@ 0x40
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	ed87 0a05 	vstr	s0, [r7, #20]
 80014f2:	edc7 0a04 	vstr	s1, [r7, #16]
 80014f6:	ed87 1a03 	vstr	s2, [r7, #12]
 80014fa:	60b8      	str	r0, [r7, #8]
 80014fc:	6079      	str	r1, [r7, #4]
	double i = 0-1,axan,ayan;
 80014fe:	f04f 0200 	mov.w	r2, #0
 8001502:	4b37      	ldr	r3, [pc, #220]	@ (80015e0 <MPU6050_GET_ACCEL_TO_ANGLE+0xf8>)
 8001504:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
	double ang1 = sqrt((ax*ax)+(az*az));
 8001508:	edd7 7a05 	vldr	s15, [r7, #20]
 800150c:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001510:	edd7 7a03 	vldr	s15, [r7, #12]
 8001514:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001518:	ee77 7a27 	vadd.f32	s15, s14, s15
 800151c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001520:	eeb0 0b47 	vmov.f64	d0, d7
 8001524:	f01c fc94 	bl	801de50 <sqrt>
 8001528:	ed87 0b0c 	vstr	d0, [r7, #48]	@ 0x30
	double ang2 = sqrt((ay*ay)+(az*az));
 800152c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001530:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001534:	edd7 7a03 	vldr	s15, [r7, #12]
 8001538:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800153c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001540:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001544:	eeb0 0b47 	vmov.f64	d0, d7
 8001548:	f01c fc82 	bl	801de50 <sqrt>
 800154c:	ed87 0b0a 	vstr	d0, [r7, #40]	@ 0x28
	axan = atan2((ay*i), ang1);
 8001550:	edd7 7a04 	vldr	s15, [r7, #16]
 8001554:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001558:	ed97 7b0e 	vldr	d7, [r7, #56]	@ 0x38
 800155c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001560:	ed97 1b0c 	vldr	d1, [r7, #48]	@ 0x30
 8001564:	eeb0 0b47 	vmov.f64	d0, d7
 8001568:	f01c fc6e 	bl	801de48 <atan2>
 800156c:	ed87 0b08 	vstr	d0, [r7, #32]
	ayan= atan2(ax, ang2);
 8001570:	edd7 7a05 	vldr	s15, [r7, #20]
 8001574:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001578:	ed97 1b0a 	vldr	d1, [r7, #40]	@ 0x28
 800157c:	eeb0 0b47 	vmov.f64	d0, d7
 8001580:	f01c fc62 	bl	801de48 <atan2>
 8001584:	ed87 0b06 	vstr	d0, [r7, #24]

	*ax_ang = (axan*180)/M_PI;
 8001588:	ed97 7b08 	vldr	d7, [r7, #32]
 800158c:	ed9f 6b10 	vldr	d6, [pc, #64]	@ 80015d0 <MPU6050_GET_ACCEL_TO_ANGLE+0xe8>
 8001590:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001594:	ed9f 5b10 	vldr	d5, [pc, #64]	@ 80015d8 <MPU6050_GET_ACCEL_TO_ANGLE+0xf0>
 8001598:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800159c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80015a0:	68bb      	ldr	r3, [r7, #8]
 80015a2:	edc3 7a00 	vstr	s15, [r3]
	*ay_ang = (ayan*180)/M_PI;
 80015a6:	ed97 7b06 	vldr	d7, [r7, #24]
 80015aa:	ed9f 6b09 	vldr	d6, [pc, #36]	@ 80015d0 <MPU6050_GET_ACCEL_TO_ANGLE+0xe8>
 80015ae:	ee27 6b06 	vmul.f64	d6, d7, d6
 80015b2:	ed9f 5b09 	vldr	d5, [pc, #36]	@ 80015d8 <MPU6050_GET_ACCEL_TO_ANGLE+0xf0>
 80015b6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80015ba:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	edc3 7a00 	vstr	s15, [r3]
}
 80015c4:	bf00      	nop
 80015c6:	3740      	adds	r7, #64	@ 0x40
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	f3af 8000 	nop.w
 80015d0:	00000000 	.word	0x00000000
 80015d4:	40668000 	.word	0x40668000
 80015d8:	54442d18 	.word	0x54442d18
 80015dc:	400921fb 	.word	0x400921fb
 80015e0:	bff00000 	.word	0xbff00000

080015e4 <MPU6050_GET_ACCANDGYR_CALANDSCL>:
	*gy_ang = (gy/1000) + *gy_ang;
	*gz_ang = (gz/1000) + *gz_ang;
}

void MPU6050_GET_ACCANDGYR_CALANDSCL(float *ax, float*ay, float*az, float*gx, float*gy, float*gz, float accelx_cal,float accely_cal,
		float accelz_cal,float gyrox_cal,float gyroy_cal,float gyroz_cal, float Gyr_Scale, float Acc_Scale){
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b094      	sub	sp, #80	@ 0x50
 80015e8:	af04      	add	r7, sp, #16
 80015ea:	62f8      	str	r0, [r7, #44]	@ 0x2c
 80015ec:	62b9      	str	r1, [r7, #40]	@ 0x28
 80015ee:	627a      	str	r2, [r7, #36]	@ 0x24
 80015f0:	623b      	str	r3, [r7, #32]
 80015f2:	ed87 0a07 	vstr	s0, [r7, #28]
 80015f6:	edc7 0a06 	vstr	s1, [r7, #24]
 80015fa:	ed87 1a05 	vstr	s2, [r7, #20]
 80015fe:	edc7 1a04 	vstr	s3, [r7, #16]
 8001602:	ed87 2a03 	vstr	s4, [r7, #12]
 8001606:	edc7 2a02 	vstr	s5, [r7, #8]
 800160a:	ed87 3a01 	vstr	s6, [r7, #4]
 800160e:	edc7 3a00 	vstr	s7, [r7]

	uint8_t pdata[14];
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_ACCEL_XOUT_H, 1, pdata, 14, 1); // szybesz o ~1ms
 8001612:	4b4e      	ldr	r3, [pc, #312]	@ (800174c <MPU6050_GET_ACCANDGYR_CALANDSCL+0x168>)
 8001614:	6818      	ldr	r0, [r3, #0]
 8001616:	2301      	movs	r3, #1
 8001618:	9302      	str	r3, [sp, #8]
 800161a:	230e      	movs	r3, #14
 800161c:	9301      	str	r3, [sp, #4]
 800161e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001622:	9300      	str	r3, [sp, #0]
 8001624:	2301      	movs	r3, #1
 8001626:	223b      	movs	r2, #59	@ 0x3b
 8001628:	21d0      	movs	r1, #208	@ 0xd0
 800162a:	f00d f92f 	bl	800e88c <HAL_I2C_Mem_Read>

	//HAL_I2C_Mem_Read_IT(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_ACCEL_XOUT_H, 1, pdata, 14);

	*ax = (((int16_t)(pdata[0]<<8) | pdata[1])/Acc_Scale) - accelx_cal;
 800162e:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001632:	021b      	lsls	r3, r3, #8
 8001634:	b21b      	sxth	r3, r3
 8001636:	461a      	mov	r2, r3
 8001638:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 800163c:	4313      	orrs	r3, r2
 800163e:	ee07 3a90 	vmov	s15, r3
 8001642:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001646:	edd7 7a00 	vldr	s15, [r7]
 800164a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800164e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001652:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001656:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001658:	edc3 7a00 	vstr	s15, [r3]
	*ay = (((int16_t)(pdata[2]<<8) | pdata[3])/Acc_Scale) - accely_cal;
 800165c:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8001660:	021b      	lsls	r3, r3, #8
 8001662:	b21b      	sxth	r3, r3
 8001664:	461a      	mov	r2, r3
 8001666:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800166a:	4313      	orrs	r3, r2
 800166c:	ee07 3a90 	vmov	s15, r3
 8001670:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001674:	edd7 7a00 	vldr	s15, [r7]
 8001678:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800167c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001680:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001684:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001686:	edc3 7a00 	vstr	s15, [r3]
	*az = (((int16_t)(pdata[4]<<8) | pdata[5])/Acc_Scale) + accelz_cal;
 800168a:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800168e:	021b      	lsls	r3, r3, #8
 8001690:	b21b      	sxth	r3, r3
 8001692:	461a      	mov	r2, r3
 8001694:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8001698:	4313      	orrs	r3, r2
 800169a:	ee07 3a90 	vmov	s15, r3
 800169e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80016a2:	edd7 7a00 	vldr	s15, [r7]
 80016a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80016aa:	edd7 7a05 	vldr	s15, [r7, #20]
 80016ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016b4:	edc3 7a00 	vstr	s15, [r3]

	*gx = (((int16_t)(pdata[8]<<8) | pdata[9])/Gyr_Scale) - gyrox_cal;
 80016b8:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 80016bc:	021b      	lsls	r3, r3, #8
 80016be:	b21b      	sxth	r3, r3
 80016c0:	461a      	mov	r2, r3
 80016c2:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80016c6:	4313      	orrs	r3, r2
 80016c8:	ee07 3a90 	vmov	s15, r3
 80016cc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80016d0:	edd7 7a01 	vldr	s15, [r7, #4]
 80016d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80016d8:	edd7 7a04 	vldr	s15, [r7, #16]
 80016dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016e0:	6a3b      	ldr	r3, [r7, #32]
 80016e2:	edc3 7a00 	vstr	s15, [r3]
	*gy = (((int16_t)(pdata[10]<<8) | pdata[11])/Gyr_Scale) - gyroy_cal;
 80016e6:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 80016ea:	021b      	lsls	r3, r3, #8
 80016ec:	b21b      	sxth	r3, r3
 80016ee:	461a      	mov	r2, r3
 80016f0:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 80016f4:	4313      	orrs	r3, r2
 80016f6:	ee07 3a90 	vmov	s15, r3
 80016fa:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80016fe:	edd7 7a01 	vldr	s15, [r7, #4]
 8001702:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001706:	edd7 7a03 	vldr	s15, [r7, #12]
 800170a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800170e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001710:	edc3 7a00 	vstr	s15, [r3]
	*gz = (((int16_t)(pdata[12]<<8) | pdata[13])/Gyr_Scale) - gyroz_cal;
 8001714:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8001718:	021b      	lsls	r3, r3, #8
 800171a:	b21b      	sxth	r3, r3
 800171c:	461a      	mov	r2, r3
 800171e:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8001722:	4313      	orrs	r3, r2
 8001724:	ee07 3a90 	vmov	s15, r3
 8001728:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800172c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001730:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001734:	edd7 7a02 	vldr	s15, [r7, #8]
 8001738:	ee77 7a67 	vsub.f32	s15, s14, s15
 800173c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800173e:	edc3 7a00 	vstr	s15, [r3]
//	  *az = (MPU6050_GET_ACCEL_FULLVALUE_Z()/Acc_Scale) + accelz_cal;
//
//	  *gx = (MPU6050_GET_GYRO_FULLVALUE_X()/Gyr_Scale) - gyrox_cal;
//	  *gy = (MPU6050_GET_GYRO_FULLVALUE_Y()/Gyr_Scale) - gyroy_cal;
//	  *gz = (MPU6050_GET_GYRO_FULLVALUE_Z()/Gyr_Scale) - gyroz_cal;
}
 8001742:	bf00      	nop
 8001744:	3740      	adds	r7, #64	@ 0x40
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	240000a0 	.word	0x240000a0

08001750 <MPU6050_GET_ACCANDGYR_CALANDSCL_IT>:

void MPU6050_GET_ACCANDGYR_CALANDSCL_IT(void){
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af02      	add	r7, sp, #8


	HAL_I2C_Mem_Read_IT(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_ACCEL_XOUT_H, 1, (uint8_t *)MPU6050_IT_DATA, 14);
 8001756:	4b08      	ldr	r3, [pc, #32]	@ (8001778 <MPU6050_GET_ACCANDGYR_CALANDSCL_IT+0x28>)
 8001758:	6818      	ldr	r0, [r3, #0]
 800175a:	230e      	movs	r3, #14
 800175c:	9301      	str	r3, [sp, #4]
 800175e:	4b07      	ldr	r3, [pc, #28]	@ (800177c <MPU6050_GET_ACCANDGYR_CALANDSCL_IT+0x2c>)
 8001760:	9300      	str	r3, [sp, #0]
 8001762:	2301      	movs	r3, #1
 8001764:	223b      	movs	r2, #59	@ 0x3b
 8001766:	21d0      	movs	r1, #208	@ 0xd0
 8001768:	f00d fa34 	bl	800ebd4 <HAL_I2C_Mem_Read_IT>
	MPU6050_IRQ = 1;
 800176c:	4b04      	ldr	r3, [pc, #16]	@ (8001780 <MPU6050_GET_ACCANDGYR_CALANDSCL_IT+0x30>)
 800176e:	2201      	movs	r2, #1
 8001770:	701a      	strb	r2, [r3, #0]


}
 8001772:	bf00      	nop
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	240000a0 	.word	0x240000a0
 800177c:	00000048 	.word	0x00000048
 8001780:	000041d4 	.word	0x000041d4

08001784 <MPU6050_GET_CALANDSCL_IT>:

void MPU6050_GET_CALANDSCL_IT(float *ax, float*ay, float*az, float*gx, float*gy, float*gz, float accelx_cal,float accely_cal,float accelz_cal,float gyrox_cal,float gyroy_cal,float gyroz_cal, float Gyr_Scale, float Acc_Scale){
 8001784:	b480      	push	{r7}
 8001786:	b08d      	sub	sp, #52	@ 0x34
 8001788:	af00      	add	r7, sp, #0
 800178a:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800178c:	62b9      	str	r1, [r7, #40]	@ 0x28
 800178e:	627a      	str	r2, [r7, #36]	@ 0x24
 8001790:	623b      	str	r3, [r7, #32]
 8001792:	ed87 0a07 	vstr	s0, [r7, #28]
 8001796:	edc7 0a06 	vstr	s1, [r7, #24]
 800179a:	ed87 1a05 	vstr	s2, [r7, #20]
 800179e:	edc7 1a04 	vstr	s3, [r7, #16]
 80017a2:	ed87 2a03 	vstr	s4, [r7, #12]
 80017a6:	edc7 2a02 	vstr	s5, [r7, #8]
 80017aa:	ed87 3a01 	vstr	s6, [r7, #4]
 80017ae:	edc7 3a00 	vstr	s7, [r7]
	*ax = (((int16_t)(MPU6050_IT_DATA[0]<<8) | MPU6050_IT_DATA[1])/Acc_Scale) - accelx_cal;
 80017b2:	4b48      	ldr	r3, [pc, #288]	@ (80018d4 <MPU6050_GET_CALANDSCL_IT+0x150>)
 80017b4:	781b      	ldrb	r3, [r3, #0]
 80017b6:	021b      	lsls	r3, r3, #8
 80017b8:	b21b      	sxth	r3, r3
 80017ba:	461a      	mov	r2, r3
 80017bc:	4b45      	ldr	r3, [pc, #276]	@ (80018d4 <MPU6050_GET_CALANDSCL_IT+0x150>)
 80017be:	785b      	ldrb	r3, [r3, #1]
 80017c0:	4313      	orrs	r3, r2
 80017c2:	ee07 3a90 	vmov	s15, r3
 80017c6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80017ca:	edd7 7a00 	vldr	s15, [r7]
 80017ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80017d2:	edd7 7a07 	vldr	s15, [r7, #28]
 80017d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017dc:	edc3 7a00 	vstr	s15, [r3]
	*ay = (((int16_t)(MPU6050_IT_DATA[2]<<8) | MPU6050_IT_DATA[3])/Acc_Scale) - accely_cal;
 80017e0:	4b3c      	ldr	r3, [pc, #240]	@ (80018d4 <MPU6050_GET_CALANDSCL_IT+0x150>)
 80017e2:	789b      	ldrb	r3, [r3, #2]
 80017e4:	021b      	lsls	r3, r3, #8
 80017e6:	b21b      	sxth	r3, r3
 80017e8:	461a      	mov	r2, r3
 80017ea:	4b3a      	ldr	r3, [pc, #232]	@ (80018d4 <MPU6050_GET_CALANDSCL_IT+0x150>)
 80017ec:	78db      	ldrb	r3, [r3, #3]
 80017ee:	4313      	orrs	r3, r2
 80017f0:	ee07 3a90 	vmov	s15, r3
 80017f4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80017f8:	edd7 7a00 	vldr	s15, [r7]
 80017fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001800:	edd7 7a06 	vldr	s15, [r7, #24]
 8001804:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001808:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800180a:	edc3 7a00 	vstr	s15, [r3]
	*az = (((int16_t)(MPU6050_IT_DATA[4]<<8) | MPU6050_IT_DATA[5])/Acc_Scale) + accelz_cal;
 800180e:	4b31      	ldr	r3, [pc, #196]	@ (80018d4 <MPU6050_GET_CALANDSCL_IT+0x150>)
 8001810:	791b      	ldrb	r3, [r3, #4]
 8001812:	021b      	lsls	r3, r3, #8
 8001814:	b21b      	sxth	r3, r3
 8001816:	461a      	mov	r2, r3
 8001818:	4b2e      	ldr	r3, [pc, #184]	@ (80018d4 <MPU6050_GET_CALANDSCL_IT+0x150>)
 800181a:	795b      	ldrb	r3, [r3, #5]
 800181c:	4313      	orrs	r3, r2
 800181e:	ee07 3a90 	vmov	s15, r3
 8001822:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001826:	edd7 7a00 	vldr	s15, [r7]
 800182a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800182e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001832:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001838:	edc3 7a00 	vstr	s15, [r3]

	*gx = (((int16_t)(MPU6050_IT_DATA[8]<<8) | MPU6050_IT_DATA[9])/Gyr_Scale) - gyrox_cal;
 800183c:	4b25      	ldr	r3, [pc, #148]	@ (80018d4 <MPU6050_GET_CALANDSCL_IT+0x150>)
 800183e:	7a1b      	ldrb	r3, [r3, #8]
 8001840:	021b      	lsls	r3, r3, #8
 8001842:	b21b      	sxth	r3, r3
 8001844:	461a      	mov	r2, r3
 8001846:	4b23      	ldr	r3, [pc, #140]	@ (80018d4 <MPU6050_GET_CALANDSCL_IT+0x150>)
 8001848:	7a5b      	ldrb	r3, [r3, #9]
 800184a:	4313      	orrs	r3, r2
 800184c:	ee07 3a90 	vmov	s15, r3
 8001850:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001854:	edd7 7a01 	vldr	s15, [r7, #4]
 8001858:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800185c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001860:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001864:	6a3b      	ldr	r3, [r7, #32]
 8001866:	edc3 7a00 	vstr	s15, [r3]
	*gy = (((int16_t)(MPU6050_IT_DATA[10]<<8) | MPU6050_IT_DATA[11])/Gyr_Scale) - gyroy_cal;
 800186a:	4b1a      	ldr	r3, [pc, #104]	@ (80018d4 <MPU6050_GET_CALANDSCL_IT+0x150>)
 800186c:	7a9b      	ldrb	r3, [r3, #10]
 800186e:	021b      	lsls	r3, r3, #8
 8001870:	b21b      	sxth	r3, r3
 8001872:	461a      	mov	r2, r3
 8001874:	4b17      	ldr	r3, [pc, #92]	@ (80018d4 <MPU6050_GET_CALANDSCL_IT+0x150>)
 8001876:	7adb      	ldrb	r3, [r3, #11]
 8001878:	4313      	orrs	r3, r2
 800187a:	ee07 3a90 	vmov	s15, r3
 800187e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001882:	edd7 7a01 	vldr	s15, [r7, #4]
 8001886:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800188a:	edd7 7a03 	vldr	s15, [r7, #12]
 800188e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001892:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001894:	edc3 7a00 	vstr	s15, [r3]
	*gz = (((int16_t)(MPU6050_IT_DATA[12]<<8) | MPU6050_IT_DATA[13])/Gyr_Scale) - gyroz_cal;
 8001898:	4b0e      	ldr	r3, [pc, #56]	@ (80018d4 <MPU6050_GET_CALANDSCL_IT+0x150>)
 800189a:	7b1b      	ldrb	r3, [r3, #12]
 800189c:	021b      	lsls	r3, r3, #8
 800189e:	b21b      	sxth	r3, r3
 80018a0:	461a      	mov	r2, r3
 80018a2:	4b0c      	ldr	r3, [pc, #48]	@ (80018d4 <MPU6050_GET_CALANDSCL_IT+0x150>)
 80018a4:	7b5b      	ldrb	r3, [r3, #13]
 80018a6:	4313      	orrs	r3, r2
 80018a8:	ee07 3a90 	vmov	s15, r3
 80018ac:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80018b0:	edd7 7a01 	vldr	s15, [r7, #4]
 80018b4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80018b8:	edd7 7a02 	vldr	s15, [r7, #8]
 80018bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80018c2:	edc3 7a00 	vstr	s15, [r3]
}
 80018c6:	bf00      	nop
 80018c8:	3734      	adds	r7, #52	@ 0x34
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr
 80018d2:	bf00      	nop
 80018d4:	00000048 	.word	0x00000048

080018d8 <MPU6050_GET_ACCANDGYR_FILTRED>:

void MPU6050_GET_ACCANDGYR_FILTRED(Complementary_Filter *Complementary_Filter_st, float ax_ang, float ay_ang, float megz_ang, float gx_ang,
		float gy_ang, float gz_ang){
 80018d8:	b580      	push	{r7, lr}
 80018da:	b088      	sub	sp, #32
 80018dc:	af00      	add	r7, sp, #0
 80018de:	61f8      	str	r0, [r7, #28]
 80018e0:	ed87 0a06 	vstr	s0, [r7, #24]
 80018e4:	edc7 0a05 	vstr	s1, [r7, #20]
 80018e8:	ed87 1a04 	vstr	s2, [r7, #16]
 80018ec:	edc7 1a03 	vstr	s3, [r7, #12]
 80018f0:	ed87 2a02 	vstr	s4, [r7, #8]
 80018f4:	edc7 2a01 	vstr	s5, [r7, #4]
	Complementary_getFilter(Complementary_Filter_st, ax_ang, ay_ang, megz_ang, gx_ang, gy_ang, gz_ang);
 80018f8:	edd7 2a01 	vldr	s5, [r7, #4]
 80018fc:	ed97 2a02 	vldr	s4, [r7, #8]
 8001900:	edd7 1a03 	vldr	s3, [r7, #12]
 8001904:	ed97 1a04 	vldr	s2, [r7, #16]
 8001908:	edd7 0a05 	vldr	s1, [r7, #20]
 800190c:	ed97 0a06 	vldr	s0, [r7, #24]
 8001910:	69f8      	ldr	r0, [r7, #28]
 8001912:	f000 f9a9 	bl	8001c68 <Complementary_getFilter>
	//W_Filter(Complementary_Filter_st);
}
 8001916:	bf00      	nop
 8001918:	3720      	adds	r7, #32
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
	...

08001920 <MPU6050_GET_ACCEL_YH>:
uint8_t MPU6050_GET_ACCEL_XL(void){
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_ACCEL_XOUT_L, 1, &data, 1, 1);
	return data;
}
uint8_t MPU6050_GET_ACCEL_YH(void){
 8001920:	b580      	push	{r7, lr}
 8001922:	b086      	sub	sp, #24
 8001924:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_ACCEL_YOUT_H, 1, &data, 1, 1);
 8001926:	4b09      	ldr	r3, [pc, #36]	@ (800194c <MPU6050_GET_ACCEL_YH+0x2c>)
 8001928:	6818      	ldr	r0, [r3, #0]
 800192a:	2301      	movs	r3, #1
 800192c:	9302      	str	r3, [sp, #8]
 800192e:	2301      	movs	r3, #1
 8001930:	9301      	str	r3, [sp, #4]
 8001932:	1dfb      	adds	r3, r7, #7
 8001934:	9300      	str	r3, [sp, #0]
 8001936:	2301      	movs	r3, #1
 8001938:	223d      	movs	r2, #61	@ 0x3d
 800193a:	21d0      	movs	r1, #208	@ 0xd0
 800193c:	f00c ffa6 	bl	800e88c <HAL_I2C_Mem_Read>
	return data;
 8001940:	79fb      	ldrb	r3, [r7, #7]
}
 8001942:	4618      	mov	r0, r3
 8001944:	3708      	adds	r7, #8
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	240000a0 	.word	0x240000a0

08001950 <MPU6050_GET_ACCEL_YL>:
uint8_t MPU6050_GET_ACCEL_YL(void){
 8001950:	b580      	push	{r7, lr}
 8001952:	b086      	sub	sp, #24
 8001954:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_ACCEL_YOUT_L, 1, &data, 1, 1);
 8001956:	4b09      	ldr	r3, [pc, #36]	@ (800197c <MPU6050_GET_ACCEL_YL+0x2c>)
 8001958:	6818      	ldr	r0, [r3, #0]
 800195a:	2301      	movs	r3, #1
 800195c:	9302      	str	r3, [sp, #8]
 800195e:	2301      	movs	r3, #1
 8001960:	9301      	str	r3, [sp, #4]
 8001962:	1dfb      	adds	r3, r7, #7
 8001964:	9300      	str	r3, [sp, #0]
 8001966:	2301      	movs	r3, #1
 8001968:	223e      	movs	r2, #62	@ 0x3e
 800196a:	21d0      	movs	r1, #208	@ 0xd0
 800196c:	f00c ff8e 	bl	800e88c <HAL_I2C_Mem_Read>
	return data;
 8001970:	79fb      	ldrb	r3, [r7, #7]
}
 8001972:	4618      	mov	r0, r3
 8001974:	3708      	adds	r7, #8
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	240000a0 	.word	0x240000a0

08001980 <MPU6050_GET_ACCEL_ZH>:
uint8_t MPU6050_GET_ACCEL_ZH(void){
 8001980:	b580      	push	{r7, lr}
 8001982:	b086      	sub	sp, #24
 8001984:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_ACCEL_ZOUT_H, 1, &data, 1, 1);
 8001986:	4b09      	ldr	r3, [pc, #36]	@ (80019ac <MPU6050_GET_ACCEL_ZH+0x2c>)
 8001988:	6818      	ldr	r0, [r3, #0]
 800198a:	2301      	movs	r3, #1
 800198c:	9302      	str	r3, [sp, #8]
 800198e:	2301      	movs	r3, #1
 8001990:	9301      	str	r3, [sp, #4]
 8001992:	1dfb      	adds	r3, r7, #7
 8001994:	9300      	str	r3, [sp, #0]
 8001996:	2301      	movs	r3, #1
 8001998:	223f      	movs	r2, #63	@ 0x3f
 800199a:	21d0      	movs	r1, #208	@ 0xd0
 800199c:	f00c ff76 	bl	800e88c <HAL_I2C_Mem_Read>
	return data;
 80019a0:	79fb      	ldrb	r3, [r7, #7]
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	3708      	adds	r7, #8
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	240000a0 	.word	0x240000a0

080019b0 <MPU6050_GET_ACCEL_ZL>:
uint8_t MPU6050_GET_ACCEL_ZL(void){
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b086      	sub	sp, #24
 80019b4:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_ACCEL_ZOUT_L, 1, &data, 1, 1);
 80019b6:	4b09      	ldr	r3, [pc, #36]	@ (80019dc <MPU6050_GET_ACCEL_ZL+0x2c>)
 80019b8:	6818      	ldr	r0, [r3, #0]
 80019ba:	2301      	movs	r3, #1
 80019bc:	9302      	str	r3, [sp, #8]
 80019be:	2301      	movs	r3, #1
 80019c0:	9301      	str	r3, [sp, #4]
 80019c2:	1dfb      	adds	r3, r7, #7
 80019c4:	9300      	str	r3, [sp, #0]
 80019c6:	2301      	movs	r3, #1
 80019c8:	2240      	movs	r2, #64	@ 0x40
 80019ca:	21d0      	movs	r1, #208	@ 0xd0
 80019cc:	f00c ff5e 	bl	800e88c <HAL_I2C_Mem_Read>
	return data;
 80019d0:	79fb      	ldrb	r3, [r7, #7]
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	3708      	adds	r7, #8
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	240000a0 	.word	0x240000a0

080019e0 <MPU6050_GET_GYRO_XH>:

uint8_t MPU6050_GET_GYRO_XH(void){
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b086      	sub	sp, #24
 80019e4:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_GYRO_XOUT_H, 1, &data, 1, 1);
 80019e6:	4b09      	ldr	r3, [pc, #36]	@ (8001a0c <MPU6050_GET_GYRO_XH+0x2c>)
 80019e8:	6818      	ldr	r0, [r3, #0]
 80019ea:	2301      	movs	r3, #1
 80019ec:	9302      	str	r3, [sp, #8]
 80019ee:	2301      	movs	r3, #1
 80019f0:	9301      	str	r3, [sp, #4]
 80019f2:	1dfb      	adds	r3, r7, #7
 80019f4:	9300      	str	r3, [sp, #0]
 80019f6:	2301      	movs	r3, #1
 80019f8:	2243      	movs	r2, #67	@ 0x43
 80019fa:	21d0      	movs	r1, #208	@ 0xd0
 80019fc:	f00c ff46 	bl	800e88c <HAL_I2C_Mem_Read>
	return data;
 8001a00:	79fb      	ldrb	r3, [r7, #7]
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	3708      	adds	r7, #8
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	240000a0 	.word	0x240000a0

08001a10 <MPU6050_GET_GYRO_XL>:
uint8_t MPU6050_GET_GYRO_XL(void){
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b086      	sub	sp, #24
 8001a14:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_GYRO_XOUT_L, 1, &data, 1, 1);
 8001a16:	4b09      	ldr	r3, [pc, #36]	@ (8001a3c <MPU6050_GET_GYRO_XL+0x2c>)
 8001a18:	6818      	ldr	r0, [r3, #0]
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	9302      	str	r3, [sp, #8]
 8001a1e:	2301      	movs	r3, #1
 8001a20:	9301      	str	r3, [sp, #4]
 8001a22:	1dfb      	adds	r3, r7, #7
 8001a24:	9300      	str	r3, [sp, #0]
 8001a26:	2301      	movs	r3, #1
 8001a28:	2244      	movs	r2, #68	@ 0x44
 8001a2a:	21d0      	movs	r1, #208	@ 0xd0
 8001a2c:	f00c ff2e 	bl	800e88c <HAL_I2C_Mem_Read>
	return data;
 8001a30:	79fb      	ldrb	r3, [r7, #7]
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	3708      	adds	r7, #8
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	240000a0 	.word	0x240000a0

08001a40 <MPU6050_GET_GYRO_YH>:
uint8_t MPU6050_GET_GYRO_YH(void){
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b086      	sub	sp, #24
 8001a44:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_GYRO_YOUT_H, 1, &data, 1, 1);
 8001a46:	4b09      	ldr	r3, [pc, #36]	@ (8001a6c <MPU6050_GET_GYRO_YH+0x2c>)
 8001a48:	6818      	ldr	r0, [r3, #0]
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	9302      	str	r3, [sp, #8]
 8001a4e:	2301      	movs	r3, #1
 8001a50:	9301      	str	r3, [sp, #4]
 8001a52:	1dfb      	adds	r3, r7, #7
 8001a54:	9300      	str	r3, [sp, #0]
 8001a56:	2301      	movs	r3, #1
 8001a58:	2245      	movs	r2, #69	@ 0x45
 8001a5a:	21d0      	movs	r1, #208	@ 0xd0
 8001a5c:	f00c ff16 	bl	800e88c <HAL_I2C_Mem_Read>
	return data;
 8001a60:	79fb      	ldrb	r3, [r7, #7]
}
 8001a62:	4618      	mov	r0, r3
 8001a64:	3708      	adds	r7, #8
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	240000a0 	.word	0x240000a0

08001a70 <MPU6050_GET_GYRO_YL>:
uint8_t MPU6050_GET_GYRO_YL(void){
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b086      	sub	sp, #24
 8001a74:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_GYRO_YOUT_L, 1, &data, 1, 1);
 8001a76:	4b09      	ldr	r3, [pc, #36]	@ (8001a9c <MPU6050_GET_GYRO_YL+0x2c>)
 8001a78:	6818      	ldr	r0, [r3, #0]
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	9302      	str	r3, [sp, #8]
 8001a7e:	2301      	movs	r3, #1
 8001a80:	9301      	str	r3, [sp, #4]
 8001a82:	1dfb      	adds	r3, r7, #7
 8001a84:	9300      	str	r3, [sp, #0]
 8001a86:	2301      	movs	r3, #1
 8001a88:	2246      	movs	r2, #70	@ 0x46
 8001a8a:	21d0      	movs	r1, #208	@ 0xd0
 8001a8c:	f00c fefe 	bl	800e88c <HAL_I2C_Mem_Read>
	return data;
 8001a90:	79fb      	ldrb	r3, [r7, #7]
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3708      	adds	r7, #8
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	240000a0 	.word	0x240000a0

08001aa0 <MPU6050_GET_GYRO_ZH>:
uint8_t MPU6050_GET_GYRO_ZH(void){
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b086      	sub	sp, #24
 8001aa4:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_GYRO_ZOUT_H, 1, &data, 1, 1);
 8001aa6:	4b09      	ldr	r3, [pc, #36]	@ (8001acc <MPU6050_GET_GYRO_ZH+0x2c>)
 8001aa8:	6818      	ldr	r0, [r3, #0]
 8001aaa:	2301      	movs	r3, #1
 8001aac:	9302      	str	r3, [sp, #8]
 8001aae:	2301      	movs	r3, #1
 8001ab0:	9301      	str	r3, [sp, #4]
 8001ab2:	1dfb      	adds	r3, r7, #7
 8001ab4:	9300      	str	r3, [sp, #0]
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	2247      	movs	r2, #71	@ 0x47
 8001aba:	21d0      	movs	r1, #208	@ 0xd0
 8001abc:	f00c fee6 	bl	800e88c <HAL_I2C_Mem_Read>
	return data;
 8001ac0:	79fb      	ldrb	r3, [r7, #7]
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3708      	adds	r7, #8
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	240000a0 	.word	0x240000a0

08001ad0 <MPU6050_GET_GYRO_ZL>:
uint8_t MPU6050_GET_GYRO_ZL(void){
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b086      	sub	sp, #24
 8001ad4:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_GYRO_ZOUT_L, 1, &data, 1, 1);
 8001ad6:	4b09      	ldr	r3, [pc, #36]	@ (8001afc <MPU6050_GET_GYRO_ZL+0x2c>)
 8001ad8:	6818      	ldr	r0, [r3, #0]
 8001ada:	2301      	movs	r3, #1
 8001adc:	9302      	str	r3, [sp, #8]
 8001ade:	2301      	movs	r3, #1
 8001ae0:	9301      	str	r3, [sp, #4]
 8001ae2:	1dfb      	adds	r3, r7, #7
 8001ae4:	9300      	str	r3, [sp, #0]
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	2248      	movs	r2, #72	@ 0x48
 8001aea:	21d0      	movs	r1, #208	@ 0xd0
 8001aec:	f00c fece 	bl	800e88c <HAL_I2C_Mem_Read>
	return data;
 8001af0:	79fb      	ldrb	r3, [r7, #7]
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3708      	adds	r7, #8
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	240000a0 	.word	0x240000a0

08001b00 <MPU6050_GET_ACCEL_FULLVALUE_X>:
int16_t MPU6050_GET_ACCEL_FULLVALUE_X(void){
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b086      	sub	sp, #24
 8001b04:	af04      	add	r7, sp, #16
	int16_t data;
	uint8_t pdata[2];

	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_ACCEL_XOUT_H, 1, pdata, 2, 1);
 8001b06:	4b0d      	ldr	r3, [pc, #52]	@ (8001b3c <MPU6050_GET_ACCEL_FULLVALUE_X+0x3c>)
 8001b08:	6818      	ldr	r0, [r3, #0]
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	9302      	str	r3, [sp, #8]
 8001b0e:	2302      	movs	r3, #2
 8001b10:	9301      	str	r3, [sp, #4]
 8001b12:	1d3b      	adds	r3, r7, #4
 8001b14:	9300      	str	r3, [sp, #0]
 8001b16:	2301      	movs	r3, #1
 8001b18:	223b      	movs	r2, #59	@ 0x3b
 8001b1a:	21d0      	movs	r1, #208	@ 0xd0
 8001b1c:	f00c feb6 	bl	800e88c <HAL_I2C_Mem_Read>

	data = (pdata[0]<<8)|pdata[1];
 8001b20:	793b      	ldrb	r3, [r7, #4]
 8001b22:	021b      	lsls	r3, r3, #8
 8001b24:	b21a      	sxth	r2, r3
 8001b26:	797b      	ldrb	r3, [r7, #5]
 8001b28:	b21b      	sxth	r3, r3
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	80fb      	strh	r3, [r7, #6]
	return data;
 8001b2e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	3708      	adds	r7, #8
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	240000a0 	.word	0x240000a0

08001b40 <MPU6050_GET_ACCEL_FULLVALUE_Y>:

int16_t MPU6050_GET_ACCEL_FULLVALUE_Y(void){
 8001b40:	b590      	push	{r4, r7, lr}
 8001b42:	b083      	sub	sp, #12
 8001b44:	af00      	add	r7, sp, #0
	int16_t data;
	data = (MPU6050_GET_ACCEL_YH()<<8)|MPU6050_GET_ACCEL_YL();
 8001b46:	f7ff feeb 	bl	8001920 <MPU6050_GET_ACCEL_YH>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	021b      	lsls	r3, r3, #8
 8001b4e:	b21c      	sxth	r4, r3
 8001b50:	f7ff fefe 	bl	8001950 <MPU6050_GET_ACCEL_YL>
 8001b54:	4603      	mov	r3, r0
 8001b56:	b21b      	sxth	r3, r3
 8001b58:	4323      	orrs	r3, r4
 8001b5a:	80fb      	strh	r3, [r7, #6]
	return data;
 8001b5c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	370c      	adds	r7, #12
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd90      	pop	{r4, r7, pc}

08001b68 <MPU6050_GET_ACCEL_FULLVALUE_Z>:
int16_t MPU6050_GET_ACCEL_FULLVALUE_Z(void){
 8001b68:	b590      	push	{r4, r7, lr}
 8001b6a:	b083      	sub	sp, #12
 8001b6c:	af00      	add	r7, sp, #0
	int16_t data;
	data = (MPU6050_GET_ACCEL_ZH()<<8)|MPU6050_GET_ACCEL_ZL();
 8001b6e:	f7ff ff07 	bl	8001980 <MPU6050_GET_ACCEL_ZH>
 8001b72:	4603      	mov	r3, r0
 8001b74:	021b      	lsls	r3, r3, #8
 8001b76:	b21c      	sxth	r4, r3
 8001b78:	f7ff ff1a 	bl	80019b0 <MPU6050_GET_ACCEL_ZL>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	b21b      	sxth	r3, r3
 8001b80:	4323      	orrs	r3, r4
 8001b82:	80fb      	strh	r3, [r7, #6]
	return data;
 8001b84:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	370c      	adds	r7, #12
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd90      	pop	{r4, r7, pc}

08001b90 <MPU6050_GET_GYRO_FULLVALUE_X>:

int16_t MPU6050_GET_GYRO_FULLVALUE_X(void){
 8001b90:	b590      	push	{r4, r7, lr}
 8001b92:	b083      	sub	sp, #12
 8001b94:	af00      	add	r7, sp, #0
	int16_t data;
	data = (MPU6050_GET_GYRO_XH()<<8)|MPU6050_GET_GYRO_XL();
 8001b96:	f7ff ff23 	bl	80019e0 <MPU6050_GET_GYRO_XH>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	021b      	lsls	r3, r3, #8
 8001b9e:	b21c      	sxth	r4, r3
 8001ba0:	f7ff ff36 	bl	8001a10 <MPU6050_GET_GYRO_XL>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	b21b      	sxth	r3, r3
 8001ba8:	4323      	orrs	r3, r4
 8001baa:	80fb      	strh	r3, [r7, #6]
	return data;
 8001bac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	370c      	adds	r7, #12
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd90      	pop	{r4, r7, pc}

08001bb8 <MPU6050_GET_GYRO_FULLVALUE_Y>:
int16_t MPU6050_GET_GYRO_FULLVALUE_Y(void){
 8001bb8:	b590      	push	{r4, r7, lr}
 8001bba:	b083      	sub	sp, #12
 8001bbc:	af00      	add	r7, sp, #0
	int16_t data;
	data = (MPU6050_GET_GYRO_YH()<<8)|MPU6050_GET_GYRO_YL();
 8001bbe:	f7ff ff3f 	bl	8001a40 <MPU6050_GET_GYRO_YH>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	021b      	lsls	r3, r3, #8
 8001bc6:	b21c      	sxth	r4, r3
 8001bc8:	f7ff ff52 	bl	8001a70 <MPU6050_GET_GYRO_YL>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	b21b      	sxth	r3, r3
 8001bd0:	4323      	orrs	r3, r4
 8001bd2:	80fb      	strh	r3, [r7, #6]
	return data;
 8001bd4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	370c      	adds	r7, #12
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd90      	pop	{r4, r7, pc}

08001be0 <MPU6050_GET_GYRO_FULLVALUE_Z>:
int16_t MPU6050_GET_GYRO_FULLVALUE_Z(void){
 8001be0:	b590      	push	{r4, r7, lr}
 8001be2:	b083      	sub	sp, #12
 8001be4:	af00      	add	r7, sp, #0
	int16_t data;
	data = (MPU6050_GET_GYRO_ZH()<<8)|MPU6050_GET_GYRO_ZL();
 8001be6:	f7ff ff5b 	bl	8001aa0 <MPU6050_GET_GYRO_ZH>
 8001bea:	4603      	mov	r3, r0
 8001bec:	021b      	lsls	r3, r3, #8
 8001bee:	b21c      	sxth	r4, r3
 8001bf0:	f7ff ff6e 	bl	8001ad0 <MPU6050_GET_GYRO_ZL>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	b21b      	sxth	r3, r3
 8001bf8:	4323      	orrs	r3, r4
 8001bfa:	80fb      	strh	r3, [r7, #6]
	return data;
 8001bfc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	370c      	adds	r7, #12
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd90      	pop	{r4, r7, pc}

08001c08 <MPU6050_READ_ID>:

int8_t MPU6050_READ_ID(void){
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b086      	sub	sp, #24
 8001c0c:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_WHO_AM_I, 1, &data, 1, 1);
 8001c0e:	4b09      	ldr	r3, [pc, #36]	@ (8001c34 <MPU6050_READ_ID+0x2c>)
 8001c10:	6818      	ldr	r0, [r3, #0]
 8001c12:	2301      	movs	r3, #1
 8001c14:	9302      	str	r3, [sp, #8]
 8001c16:	2301      	movs	r3, #1
 8001c18:	9301      	str	r3, [sp, #4]
 8001c1a:	1dfb      	adds	r3, r7, #7
 8001c1c:	9300      	str	r3, [sp, #0]
 8001c1e:	2301      	movs	r3, #1
 8001c20:	2275      	movs	r2, #117	@ 0x75
 8001c22:	21d0      	movs	r1, #208	@ 0xd0
 8001c24:	f00c fe32 	bl	800e88c <HAL_I2C_Mem_Read>
	return data;
 8001c28:	79fb      	ldrb	r3, [r7, #7]
 8001c2a:	b25b      	sxtb	r3, r3
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	3708      	adds	r7, #8
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	240000a0 	.word	0x240000a0

08001c38 <MPU6050_Enable_I2C_Bypass>:
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_USER_CTRL, 1, &data, 1, 1);
	return data;
}


void MPU6050_Enable_I2C_Bypass(void){
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b086      	sub	sp, #24
 8001c3c:	af04      	add	r7, sp, #16
	uint8_t data = 0x02;
 8001c3e:	2302      	movs	r3, #2
 8001c40:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_INT_PIN_CFG, 1, &data, 1, 1);
 8001c42:	4b08      	ldr	r3, [pc, #32]	@ (8001c64 <MPU6050_Enable_I2C_Bypass+0x2c>)
 8001c44:	6818      	ldr	r0, [r3, #0]
 8001c46:	2301      	movs	r3, #1
 8001c48:	9302      	str	r3, [sp, #8]
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	9301      	str	r3, [sp, #4]
 8001c4e:	1dfb      	adds	r3, r7, #7
 8001c50:	9300      	str	r3, [sp, #0]
 8001c52:	2301      	movs	r3, #1
 8001c54:	2237      	movs	r2, #55	@ 0x37
 8001c56:	21d0      	movs	r1, #208	@ 0xd0
 8001c58:	f00c fd04 	bl	800e664 <HAL_I2C_Mem_Write>
}
 8001c5c:	bf00      	nop
 8001c5e:	3708      	adds	r7, #8
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	240000a0 	.word	0x240000a0

08001c68 <Complementary_getFilter>:

    return Kalman->angle;
};


void Complementary_getFilter(Complementary_Filter *Complementary_Filter_st,float ax_ang, float ay_ang, float magz_ang, float gx_ang, float gy_ang, float gz_ang){
 8001c68:	b480      	push	{r7}
 8001c6a:	b089      	sub	sp, #36	@ 0x24
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	61f8      	str	r0, [r7, #28]
 8001c70:	ed87 0a06 	vstr	s0, [r7, #24]
 8001c74:	edc7 0a05 	vstr	s1, [r7, #20]
 8001c78:	ed87 1a04 	vstr	s2, [r7, #16]
 8001c7c:	edc7 1a03 	vstr	s3, [r7, #12]
 8001c80:	ed87 2a02 	vstr	s4, [r7, #8]
 8001c84:	edc7 2a01 	vstr	s5, [r7, #4]

		Complementary_Filter_st->x = (0.02*ax_ang*(-1))+(0.98*((gx_ang*looptime)+Complementary_Filter_st->ox));// mnozenie X-1 poniewaz akcelerometr miezy w drugą strone niz zyroskop
 8001c88:	4b35      	ldr	r3, [pc, #212]	@ (8001d60 <Complementary_getFilter+0xf8>)
 8001c8a:	ed93 7a00 	vldr	s14, [r3]
 8001c8e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c92:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	edd3 7a03 	vldr	s15, [r3, #12]
 8001c9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ca0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001ca4:	ed9f 6b2a 	vldr	d6, [pc, #168]	@ 8001d50 <Complementary_getFilter+0xe8>
 8001ca8:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001cac:	edd7 7a06 	vldr	s15, [r7, #24]
 8001cb0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001cb4:	ed9f 5b28 	vldr	d5, [pc, #160]	@ 8001d58 <Complementary_getFilter+0xf0>
 8001cb8:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001cbc:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001cc0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001cc4:	69fb      	ldr	r3, [r7, #28]
 8001cc6:	edc3 7a00 	vstr	s15, [r3]
		Complementary_Filter_st->y = (0.02*ay_ang*(-1))+(0.98*((gy_ang*looptime)+Complementary_Filter_st->oy));
 8001cca:	4b25      	ldr	r3, [pc, #148]	@ (8001d60 <Complementary_getFilter+0xf8>)
 8001ccc:	ed93 7a00 	vldr	s14, [r3]
 8001cd0:	edd7 7a02 	vldr	s15, [r7, #8]
 8001cd4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001cd8:	69fb      	ldr	r3, [r7, #28]
 8001cda:	edd3 7a04 	vldr	s15, [r3, #16]
 8001cde:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ce2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001ce6:	ed9f 6b1a 	vldr	d6, [pc, #104]	@ 8001d50 <Complementary_getFilter+0xe8>
 8001cea:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001cee:	edd7 7a05 	vldr	s15, [r7, #20]
 8001cf2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001cf6:	ed9f 5b18 	vldr	d5, [pc, #96]	@ 8001d58 <Complementary_getFilter+0xf0>
 8001cfa:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001cfe:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001d02:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001d06:	69fb      	ldr	r3, [r7, #28]
 8001d08:	edc3 7a01 	vstr	s15, [r3, #4]
		Complementary_Filter_st->z = (1*((gz_ang*looptime)+Complementary_Filter_st->oz));
 8001d0c:	4b14      	ldr	r3, [pc, #80]	@ (8001d60 <Complementary_getFilter+0xf8>)
 8001d0e:	ed93 7a00 	vldr	s14, [r3]
 8001d12:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d16:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d1a:	69fb      	ldr	r3, [r7, #28]
 8001d1c:	edd3 7a05 	vldr	s15, [r3, #20]
 8001d20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d24:	69fb      	ldr	r3, [r7, #28]
 8001d26:	edc3 7a02 	vstr	s15, [r3, #8]

		Complementary_Filter_st->ox = Complementary_Filter_st->x;
 8001d2a:	69fb      	ldr	r3, [r7, #28]
 8001d2c:	681a      	ldr	r2, [r3, #0]
 8001d2e:	69fb      	ldr	r3, [r7, #28]
 8001d30:	60da      	str	r2, [r3, #12]
		Complementary_Filter_st->oy = Complementary_Filter_st->y;
 8001d32:	69fb      	ldr	r3, [r7, #28]
 8001d34:	685a      	ldr	r2, [r3, #4]
 8001d36:	69fb      	ldr	r3, [r7, #28]
 8001d38:	611a      	str	r2, [r3, #16]
		Complementary_Filter_st->oz = Complementary_Filter_st->z;
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	689a      	ldr	r2, [r3, #8]
 8001d3e:	69fb      	ldr	r3, [r7, #28]
 8001d40:	615a      	str	r2, [r3, #20]
//
//	for(int i = 1; i < 15; i++){
//		OldZs[i] = OldZs[i-1];
//	}
//	OldZs[0] = Complementary_Filter_st->oz;
}
 8001d42:	bf00      	nop
 8001d44:	3724      	adds	r7, #36	@ 0x24
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr
 8001d4e:	bf00      	nop
 8001d50:	f5c28f5c 	.word	0xf5c28f5c
 8001d54:	3fef5c28 	.word	0x3fef5c28
 8001d58:	47ae147b 	.word	0x47ae147b
 8001d5c:	3f947ae1 	.word	0x3f947ae1
 8001d60:	0801e8a4 	.word	0x0801e8a4

08001d64 <nRF24_Delay>:

#define NRF24_CE_HIGH		HAL_GPIO_WritePin(NRF24_CE_GPIO_Port, NRF24_CE_Pin, GPIO_PIN_SET)
#define NRF24_CE_LOW		HAL_GPIO_WritePin(NRF24_CE_GPIO_Port, NRF24_CE_Pin, GPIO_PIN_RESET)

static void nRF24_Delay(uint8_t Time)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b082      	sub	sp, #8
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(1);
 8001d6e:	2001      	movs	r0, #1
 8001d70:	f007 fa6c 	bl	800924c <HAL_Delay>
}
 8001d74:	bf00      	nop
 8001d76:	3708      	adds	r7, #8
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}

08001d7c <nRF24_SendSpi>:

static void nRF24_SendSpi(uint8_t *Data, uint8_t Length)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b082      	sub	sp, #8
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
 8001d84:	460b      	mov	r3, r1
 8001d86:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Transmit(hspi_nrf, Data, Length, 1000);
 8001d88:	4b06      	ldr	r3, [pc, #24]	@ (8001da4 <nRF24_SendSpi+0x28>)
 8001d8a:	6818      	ldr	r0, [r3, #0]
 8001d8c:	78fb      	ldrb	r3, [r7, #3]
 8001d8e:	b29a      	uxth	r2, r3
 8001d90:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d94:	6879      	ldr	r1, [r7, #4]
 8001d96:	f012 fcf1 	bl	801477c <HAL_SPI_Transmit>
}
 8001d9a:	bf00      	nop
 8001d9c:	3708      	adds	r7, #8
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	240000a4 	.word	0x240000a4

08001da8 <nRF24_ReadSpi>:

static void nRF24_ReadSpi(uint8_t *Data, uint8_t Length)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b082      	sub	sp, #8
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
 8001db0:	460b      	mov	r3, r1
 8001db2:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Receive(hspi_nrf, Data, Length, 1000);
 8001db4:	4b06      	ldr	r3, [pc, #24]	@ (8001dd0 <nRF24_ReadSpi+0x28>)
 8001db6:	6818      	ldr	r0, [r3, #0]
 8001db8:	78fb      	ldrb	r3, [r7, #3]
 8001dba:	b29a      	uxth	r2, r3
 8001dbc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001dc0:	6879      	ldr	r1, [r7, #4]
 8001dc2:	f012 fec9 	bl	8014b58 <HAL_SPI_Receive>
}
 8001dc6:	bf00      	nop
 8001dc8:	3708      	adds	r7, #8
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	240000a4 	.word	0x240000a4

08001dd4 <nRF24_ReadRegister>:
//
// END OF BASIC READ/WRITE FUNCTIONS
//

static uint8_t nRF24_ReadRegister(uint8_t reg)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b084      	sub	sp, #16
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	4603      	mov	r3, r0
 8001ddc:	71fb      	strb	r3, [r7, #7]
	uint8_t result;

	reg = NRF24_CMD_R_REGISTER | reg;
 8001dde:	79fb      	ldrb	r3, [r7, #7]
 8001de0:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 8001de2:	2200      	movs	r2, #0
 8001de4:	2180      	movs	r1, #128	@ 0x80
 8001de6:	480c      	ldr	r0, [pc, #48]	@ (8001e18 <nRF24_ReadRegister+0x44>)
 8001de8:	f00c fb6c 	bl	800e4c4 <HAL_GPIO_WritePin>
	nRF24_SendSpi(&reg, 1);
 8001dec:	1dfb      	adds	r3, r7, #7
 8001dee:	2101      	movs	r1, #1
 8001df0:	4618      	mov	r0, r3
 8001df2:	f7ff ffc3 	bl	8001d7c <nRF24_SendSpi>
	nRF24_ReadSpi(&result, 1);
 8001df6:	f107 030f 	add.w	r3, r7, #15
 8001dfa:	2101      	movs	r1, #1
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f7ff ffd3 	bl	8001da8 <nRF24_ReadSpi>
	NRF24_CSN_HIGH;
 8001e02:	2201      	movs	r2, #1
 8001e04:	2180      	movs	r1, #128	@ 0x80
 8001e06:	4804      	ldr	r0, [pc, #16]	@ (8001e18 <nRF24_ReadRegister+0x44>)
 8001e08:	f00c fb5c 	bl	800e4c4 <HAL_GPIO_WritePin>

	return result;
 8001e0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	3710      	adds	r7, #16
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	58020400 	.word	0x58020400

08001e1c <nRF24_ReadRegisters>:

static void nRF24_ReadRegisters(uint8_t reg, uint8_t* ret, uint8_t len)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b082      	sub	sp, #8
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	4603      	mov	r3, r0
 8001e24:	6039      	str	r1, [r7, #0]
 8001e26:	71fb      	strb	r3, [r7, #7]
 8001e28:	4613      	mov	r3, r2
 8001e2a:	71bb      	strb	r3, [r7, #6]
	reg = NRF24_CMD_R_REGISTER | reg;
 8001e2c:	79fb      	ldrb	r3, [r7, #7]
 8001e2e:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 8001e30:	2200      	movs	r2, #0
 8001e32:	2180      	movs	r1, #128	@ 0x80
 8001e34:	480a      	ldr	r0, [pc, #40]	@ (8001e60 <nRF24_ReadRegisters+0x44>)
 8001e36:	f00c fb45 	bl	800e4c4 <HAL_GPIO_WritePin>

	nRF24_SendSpi(&reg, 1);
 8001e3a:	1dfb      	adds	r3, r7, #7
 8001e3c:	2101      	movs	r1, #1
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f7ff ff9c 	bl	8001d7c <nRF24_SendSpi>
	nRF24_ReadSpi(ret, len);
 8001e44:	79bb      	ldrb	r3, [r7, #6]
 8001e46:	4619      	mov	r1, r3
 8001e48:	6838      	ldr	r0, [r7, #0]
 8001e4a:	f7ff ffad 	bl	8001da8 <nRF24_ReadSpi>

	NRF24_CSN_HIGH;
 8001e4e:	2201      	movs	r2, #1
 8001e50:	2180      	movs	r1, #128	@ 0x80
 8001e52:	4803      	ldr	r0, [pc, #12]	@ (8001e60 <nRF24_ReadRegisters+0x44>)
 8001e54:	f00c fb36 	bl	800e4c4 <HAL_GPIO_WritePin>
}
 8001e58:	bf00      	nop
 8001e5a:	3708      	adds	r7, #8
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}
 8001e60:	58020400 	.word	0x58020400

08001e64 <nRF24_WriteRegister>:

static void nRF24_WriteRegister(uint8_t reg, uint8_t val)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b084      	sub	sp, #16
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	460a      	mov	r2, r1
 8001e6e:	71fb      	strb	r3, [r7, #7]
 8001e70:	4613      	mov	r3, r2
 8001e72:	71bb      	strb	r3, [r7, #6]
	uint8_t tmp[2];

	tmp[0] = NRF24_CMD_W_REGISTER | reg;
 8001e74:	79fb      	ldrb	r3, [r7, #7]
 8001e76:	f043 0320 	orr.w	r3, r3, #32
 8001e7a:	b2db      	uxtb	r3, r3
 8001e7c:	733b      	strb	r3, [r7, #12]
	tmp[1] = val;
 8001e7e:	79bb      	ldrb	r3, [r7, #6]
 8001e80:	737b      	strb	r3, [r7, #13]

	NRF24_CSN_LOW;
 8001e82:	2200      	movs	r2, #0
 8001e84:	2180      	movs	r1, #128	@ 0x80
 8001e86:	4809      	ldr	r0, [pc, #36]	@ (8001eac <nRF24_WriteRegister+0x48>)
 8001e88:	f00c fb1c 	bl	800e4c4 <HAL_GPIO_WritePin>

	nRF24_SendSpi(tmp, 2);
 8001e8c:	f107 030c 	add.w	r3, r7, #12
 8001e90:	2102      	movs	r1, #2
 8001e92:	4618      	mov	r0, r3
 8001e94:	f7ff ff72 	bl	8001d7c <nRF24_SendSpi>

	NRF24_CSN_HIGH;
 8001e98:	2201      	movs	r2, #1
 8001e9a:	2180      	movs	r1, #128	@ 0x80
 8001e9c:	4803      	ldr	r0, [pc, #12]	@ (8001eac <nRF24_WriteRegister+0x48>)
 8001e9e:	f00c fb11 	bl	800e4c4 <HAL_GPIO_WritePin>
}
 8001ea2:	bf00      	nop
 8001ea4:	3710      	adds	r7, #16
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	58020400 	.word	0x58020400

08001eb0 <nRF24_WriteRegisters>:

static void nRF24_WriteRegisters(uint8_t reg, uint8_t* val, uint8_t len)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b082      	sub	sp, #8
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	6039      	str	r1, [r7, #0]
 8001eba:	71fb      	strb	r3, [r7, #7]
 8001ebc:	4613      	mov	r3, r2
 8001ebe:	71bb      	strb	r3, [r7, #6]
	reg = NRF24_CMD_W_REGISTER | reg;
 8001ec0:	79fb      	ldrb	r3, [r7, #7]
 8001ec2:	f043 0320 	orr.w	r3, r3, #32
 8001ec6:	b2db      	uxtb	r3, r3
 8001ec8:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 8001eca:	2200      	movs	r2, #0
 8001ecc:	2180      	movs	r1, #128	@ 0x80
 8001ece:	480b      	ldr	r0, [pc, #44]	@ (8001efc <nRF24_WriteRegisters+0x4c>)
 8001ed0:	f00c faf8 	bl	800e4c4 <HAL_GPIO_WritePin>

	nRF24_SendSpi(&reg, 1);
 8001ed4:	1dfb      	adds	r3, r7, #7
 8001ed6:	2101      	movs	r1, #1
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f7ff ff4f 	bl	8001d7c <nRF24_SendSpi>
	nRF24_SendSpi(val, len);
 8001ede:	79bb      	ldrb	r3, [r7, #6]
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	6838      	ldr	r0, [r7, #0]
 8001ee4:	f7ff ff4a 	bl	8001d7c <nRF24_SendSpi>

	NRF24_CSN_HIGH;
 8001ee8:	2201      	movs	r2, #1
 8001eea:	2180      	movs	r1, #128	@ 0x80
 8001eec:	4803      	ldr	r0, [pc, #12]	@ (8001efc <nRF24_WriteRegisters+0x4c>)
 8001eee:	f00c fae9 	bl	800e4c4 <HAL_GPIO_WritePin>
}
 8001ef2:	bf00      	nop
 8001ef4:	3708      	adds	r7, #8
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	58020400 	.word	0x58020400

08001f00 <nRF24_RX_Mode>:

void nRF24_RX_Mode(void)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b082      	sub	sp, #8
 8001f04:	af00      	add	r7, sp, #0
	uint8_t config = nRF24_ReadConfig();
 8001f06:	f000 f84d 	bl	8001fa4 <nRF24_ReadConfig>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	71fb      	strb	r3, [r7, #7]
	// Restore pipe 0 adress after comeback from TX mode
	nRF24_SetRXAddress(0, addr_p0_backup);
 8001f0e:	4910      	ldr	r1, [pc, #64]	@ (8001f50 <nRF24_RX_Mode+0x50>)
 8001f10:	2000      	movs	r0, #0
 8001f12:	f000 f9f6 	bl	8002302 <nRF24_SetRXAddress>
	// PWR_UP bit set
	config |= (1<<NRF24_PWR_UP);
 8001f16:	79fb      	ldrb	r3, [r7, #7]
 8001f18:	f043 0302 	orr.w	r3, r3, #2
 8001f1c:	71fb      	strb	r3, [r7, #7]
	// PRIM_RX bit set
	config |= (1<<NRF24_PRIM_RX);
 8001f1e:	79fb      	ldrb	r3, [r7, #7]
 8001f20:	f043 0301 	orr.w	r3, r3, #1
 8001f24:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteConfig(config);
 8001f26:	79fb      	ldrb	r3, [r7, #7]
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f000 f843 	bl	8001fb4 <nRF24_WriteConfig>
	// Reset status
	nRF24_WriteStatus((1<<NRF24_RX_DR)|(1<<NRF24_TX_DS)|(1<<NRF24_MAX_RT));
 8001f2e:	2070      	movs	r0, #112	@ 0x70
 8001f30:	f000 f89b 	bl	800206a <nRF24_WriteStatus>
	// Flush RX
	nRF24_FlushRX();
 8001f34:	f000 f8a8 	bl	8002088 <nRF24_FlushRX>
	// Flush TX
	nRF24_FlushTX();
 8001f38:	f000 f8c0 	bl	80020bc <nRF24_FlushTX>

	NRF24_CE_HIGH;
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	2140      	movs	r1, #64	@ 0x40
 8001f40:	4804      	ldr	r0, [pc, #16]	@ (8001f54 <nRF24_RX_Mode+0x54>)
 8001f42:	f00c fabf 	bl	800e4c4 <HAL_GPIO_WritePin>
	//nRF24_Delay(1);
}
 8001f46:	bf00      	nop
 8001f48:	3708      	adds	r7, #8
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	240000a8 	.word	0x240000a8
 8001f54:	58020400 	.word	0x58020400

08001f58 <nRF24_TX_Mode>:

void nRF24_TX_Mode(void)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b082      	sub	sp, #8
 8001f5c:	af00      	add	r7, sp, #0
	NRF24_CE_LOW;
 8001f5e:	2200      	movs	r2, #0
 8001f60:	2140      	movs	r1, #64	@ 0x40
 8001f62:	480f      	ldr	r0, [pc, #60]	@ (8001fa0 <nRF24_TX_Mode+0x48>)
 8001f64:	f00c faae 	bl	800e4c4 <HAL_GPIO_WritePin>

	uint8_t config = nRF24_ReadConfig();
 8001f68:	f000 f81c 	bl	8001fa4 <nRF24_ReadConfig>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	71fb      	strb	r3, [r7, #7]
	// PWR_UP bit set
	config |= (1<<NRF24_PWR_UP);
 8001f70:	79fb      	ldrb	r3, [r7, #7]
 8001f72:	f043 0302 	orr.w	r3, r3, #2
 8001f76:	71fb      	strb	r3, [r7, #7]
	// PRIM_RX bit low
	config &= ~(1<<NRF24_PRIM_RX);
 8001f78:	79fb      	ldrb	r3, [r7, #7]
 8001f7a:	f023 0301 	bic.w	r3, r3, #1
 8001f7e:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteConfig(config);
 8001f80:	79fb      	ldrb	r3, [r7, #7]
 8001f82:	4618      	mov	r0, r3
 8001f84:	f000 f816 	bl	8001fb4 <nRF24_WriteConfig>
	// Reset status
	nRF24_WriteStatus((1<<NRF24_RX_DR)|(1<<NRF24_TX_DS)|(1<<NRF24_MAX_RT));
 8001f88:	2070      	movs	r0, #112	@ 0x70
 8001f8a:	f000 f86e 	bl	800206a <nRF24_WriteStatus>
	// Flush RX
	nRF24_FlushRX();
 8001f8e:	f000 f87b 	bl	8002088 <nRF24_FlushRX>
	// Flush TX
	nRF24_FlushTX();
 8001f92:	f000 f893 	bl	80020bc <nRF24_FlushTX>

	//nRF24_Delay(1);
}
 8001f96:	bf00      	nop
 8001f98:	3708      	adds	r7, #8
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	58020400 	.word	0x58020400

08001fa4 <nRF24_ReadConfig>:



uint8_t nRF24_ReadConfig(void)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	af00      	add	r7, sp, #0
	return (nRF24_ReadRegister(NRF24_CONFIG));
 8001fa8:	2000      	movs	r0, #0
 8001faa:	f7ff ff13 	bl	8001dd4 <nRF24_ReadRegister>
 8001fae:	4603      	mov	r3, r0
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	bd80      	pop	{r7, pc}

08001fb4 <nRF24_WriteConfig>:

void nRF24_WriteConfig(uint8_t conf)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b082      	sub	sp, #8
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	4603      	mov	r3, r0
 8001fbc:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_CONFIG, conf);
 8001fbe:	79fb      	ldrb	r3, [r7, #7]
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	2000      	movs	r0, #0
 8001fc4:	f7ff ff4e 	bl	8001e64 <nRF24_WriteRegister>
}
 8001fc8:	bf00      	nop
 8001fca:	3708      	adds	r7, #8
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}

08001fd0 <nRF24_SetPALevel>:

void nRF24_SetPALevel(uint8_t lev)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b084      	sub	sp, #16
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	71fb      	strb	r3, [r7, #7]
	uint8_t rf_setup = nRF24_ReadRegister(NRF24_RF_SETUP);
 8001fda:	2006      	movs	r0, #6
 8001fdc:	f7ff fefa 	bl	8001dd4 <nRF24_ReadRegister>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	73fb      	strb	r3, [r7, #15]
	rf_setup &= 0xF8; // Clear PWR bits
 8001fe4:	7bfb      	ldrb	r3, [r7, #15]
 8001fe6:	f023 0307 	bic.w	r3, r3, #7
 8001fea:	73fb      	strb	r3, [r7, #15]
	rf_setup |= (lev<<1);
 8001fec:	79fb      	ldrb	r3, [r7, #7]
 8001fee:	005b      	lsls	r3, r3, #1
 8001ff0:	b25a      	sxtb	r2, r3
 8001ff2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	b25b      	sxtb	r3, r3
 8001ffa:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_RF_SETUP, rf_setup);
 8001ffc:	7bfb      	ldrb	r3, [r7, #15]
 8001ffe:	4619      	mov	r1, r3
 8002000:	2006      	movs	r0, #6
 8002002:	f7ff ff2f 	bl	8001e64 <nRF24_WriteRegister>
}
 8002006:	bf00      	nop
 8002008:	3710      	adds	r7, #16
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}

0800200e <nRF24_SetDataRate>:

void nRF24_SetDataRate(uint8_t dr)
{
 800200e:	b580      	push	{r7, lr}
 8002010:	b084      	sub	sp, #16
 8002012:	af00      	add	r7, sp, #0
 8002014:	4603      	mov	r3, r0
 8002016:	71fb      	strb	r3, [r7, #7]
	uint8_t rf_setup = nRF24_ReadRegister(NRF24_RF_SETUP);
 8002018:	2006      	movs	r0, #6
 800201a:	f7ff fedb 	bl	8001dd4 <nRF24_ReadRegister>
 800201e:	4603      	mov	r3, r0
 8002020:	73fb      	strb	r3, [r7, #15]
	rf_setup &= 0xD7; // Clear DR bits (1MBPS)
 8002022:	7bfb      	ldrb	r3, [r7, #15]
 8002024:	f023 0328 	bic.w	r3, r3, #40	@ 0x28
 8002028:	73fb      	strb	r3, [r7, #15]
	if(dr == NRF24_RF_DR_250KBPS)
 800202a:	79fb      	ldrb	r3, [r7, #7]
 800202c:	2b02      	cmp	r3, #2
 800202e:	d104      	bne.n	800203a <nRF24_SetDataRate+0x2c>
		rf_setup |= (1<<NRF24_RF_DR_LOW);
 8002030:	7bfb      	ldrb	r3, [r7, #15]
 8002032:	f043 0320 	orr.w	r3, r3, #32
 8002036:	73fb      	strb	r3, [r7, #15]
 8002038:	e006      	b.n	8002048 <nRF24_SetDataRate+0x3a>
	else if(dr == NRF24_RF_DR_2MBPS)
 800203a:	79fb      	ldrb	r3, [r7, #7]
 800203c:	2b01      	cmp	r3, #1
 800203e:	d103      	bne.n	8002048 <nRF24_SetDataRate+0x3a>
		rf_setup |= (1<<NRF24_RF_DR_HIGH);
 8002040:	7bfb      	ldrb	r3, [r7, #15]
 8002042:	f043 0308 	orr.w	r3, r3, #8
 8002046:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_RF_SETUP, rf_setup);
 8002048:	7bfb      	ldrb	r3, [r7, #15]
 800204a:	4619      	mov	r1, r3
 800204c:	2006      	movs	r0, #6
 800204e:	f7ff ff09 	bl	8001e64 <nRF24_WriteRegister>
}
 8002052:	bf00      	nop
 8002054:	3710      	adds	r7, #16
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}

0800205a <nRF24_ReadStatus>:

uint8_t nRF24_ReadStatus(void)
{
 800205a:	b580      	push	{r7, lr}
 800205c:	af00      	add	r7, sp, #0
	return (nRF24_ReadRegister(NRF24_STATUS));
 800205e:	2007      	movs	r0, #7
 8002060:	f7ff feb8 	bl	8001dd4 <nRF24_ReadRegister>
 8002064:	4603      	mov	r3, r0
}
 8002066:	4618      	mov	r0, r3
 8002068:	bd80      	pop	{r7, pc}

0800206a <nRF24_WriteStatus>:

void nRF24_WriteStatus(uint8_t st)
{
 800206a:	b580      	push	{r7, lr}
 800206c:	b082      	sub	sp, #8
 800206e:	af00      	add	r7, sp, #0
 8002070:	4603      	mov	r3, r0
 8002072:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_STATUS, st);
 8002074:	79fb      	ldrb	r3, [r7, #7]
 8002076:	4619      	mov	r1, r3
 8002078:	2007      	movs	r0, #7
 800207a:	f7ff fef3 	bl	8001e64 <nRF24_WriteRegister>
}
 800207e:	bf00      	nop
 8002080:	3708      	adds	r7, #8
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}
	...

08002088 <nRF24_FlushRX>:

void nRF24_FlushRX(void)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b082      	sub	sp, #8
 800208c:	af00      	add	r7, sp, #0
	uint8_t command = NRF24_CMD_FLUSH_RX;
 800208e:	23e2      	movs	r3, #226	@ 0xe2
 8002090:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 8002092:	2200      	movs	r2, #0
 8002094:	2180      	movs	r1, #128	@ 0x80
 8002096:	4808      	ldr	r0, [pc, #32]	@ (80020b8 <nRF24_FlushRX+0x30>)
 8002098:	f00c fa14 	bl	800e4c4 <HAL_GPIO_WritePin>
	nRF24_SendSpi(&command, 1);
 800209c:	1dfb      	adds	r3, r7, #7
 800209e:	2101      	movs	r1, #1
 80020a0:	4618      	mov	r0, r3
 80020a2:	f7ff fe6b 	bl	8001d7c <nRF24_SendSpi>
	NRF24_CSN_HIGH;
 80020a6:	2201      	movs	r2, #1
 80020a8:	2180      	movs	r1, #128	@ 0x80
 80020aa:	4803      	ldr	r0, [pc, #12]	@ (80020b8 <nRF24_FlushRX+0x30>)
 80020ac:	f00c fa0a 	bl	800e4c4 <HAL_GPIO_WritePin>
}
 80020b0:	bf00      	nop
 80020b2:	3708      	adds	r7, #8
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}
 80020b8:	58020400 	.word	0x58020400

080020bc <nRF24_FlushTX>:

void nRF24_FlushTX(void)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b082      	sub	sp, #8
 80020c0:	af00      	add	r7, sp, #0
	uint8_t command = NRF24_CMD_FLUSH_TX;
 80020c2:	23e1      	movs	r3, #225	@ 0xe1
 80020c4:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 80020c6:	2200      	movs	r2, #0
 80020c8:	2180      	movs	r1, #128	@ 0x80
 80020ca:	4808      	ldr	r0, [pc, #32]	@ (80020ec <nRF24_FlushTX+0x30>)
 80020cc:	f00c f9fa 	bl	800e4c4 <HAL_GPIO_WritePin>
	nRF24_SendSpi(&command, 1);
 80020d0:	1dfb      	adds	r3, r7, #7
 80020d2:	2101      	movs	r1, #1
 80020d4:	4618      	mov	r0, r3
 80020d6:	f7ff fe51 	bl	8001d7c <nRF24_SendSpi>
	NRF24_CSN_HIGH;
 80020da:	2201      	movs	r2, #1
 80020dc:	2180      	movs	r1, #128	@ 0x80
 80020de:	4803      	ldr	r0, [pc, #12]	@ (80020ec <nRF24_FlushTX+0x30>)
 80020e0:	f00c f9f0 	bl	800e4c4 <HAL_GPIO_WritePin>
}
 80020e4:	bf00      	nop
 80020e6:	3708      	adds	r7, #8
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}
 80020ec:	58020400 	.word	0x58020400

080020f0 <nRF24_EnableCRC>:

void nRF24_EnableCRC(uint8_t onoff)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b084      	sub	sp, #16
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	4603      	mov	r3, r0
 80020f8:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 80020fa:	f7ff ff53 	bl	8001fa4 <nRF24_ReadConfig>
 80020fe:	4603      	mov	r3, r0
 8002100:	73fb      	strb	r3, [r7, #15]

	if(onoff)
 8002102:	79fb      	ldrb	r3, [r7, #7]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d004      	beq.n	8002112 <nRF24_EnableCRC+0x22>
		config |= (1<<NRF24_EN_CRC);
 8002108:	7bfb      	ldrb	r3, [r7, #15]
 800210a:	f043 0308 	orr.w	r3, r3, #8
 800210e:	73fb      	strb	r3, [r7, #15]
 8002110:	e003      	b.n	800211a <nRF24_EnableCRC+0x2a>
	else
		config &= ~(1<<NRF24_EN_CRC);
 8002112:	7bfb      	ldrb	r3, [r7, #15]
 8002114:	f023 0308 	bic.w	r3, r3, #8
 8002118:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteConfig(config);
 800211a:	7bfb      	ldrb	r3, [r7, #15]
 800211c:	4618      	mov	r0, r3
 800211e:	f7ff ff49 	bl	8001fb4 <nRF24_WriteConfig>
}
 8002122:	bf00      	nop
 8002124:	3710      	adds	r7, #16
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}

0800212a <nRF24_SetCRCLength>:

void nRF24_SetCRCLength(uint8_t crcl)
{
 800212a:	b580      	push	{r7, lr}
 800212c:	b084      	sub	sp, #16
 800212e:	af00      	add	r7, sp, #0
 8002130:	4603      	mov	r3, r0
 8002132:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 8002134:	f7ff ff36 	bl	8001fa4 <nRF24_ReadConfig>
 8002138:	4603      	mov	r3, r0
 800213a:	73fb      	strb	r3, [r7, #15]
	if(crcl == NRF24_CRC_WIDTH_2B)
 800213c:	79fb      	ldrb	r3, [r7, #7]
 800213e:	2b01      	cmp	r3, #1
 8002140:	d104      	bne.n	800214c <nRF24_SetCRCLength+0x22>
		config |= (1<<NRF24_CRCO);
 8002142:	7bfb      	ldrb	r3, [r7, #15]
 8002144:	f043 0304 	orr.w	r3, r3, #4
 8002148:	73fb      	strb	r3, [r7, #15]
 800214a:	e003      	b.n	8002154 <nRF24_SetCRCLength+0x2a>
	else
		config &= ~(1<<NRF24_CRCO);
 800214c:	7bfb      	ldrb	r3, [r7, #15]
 800214e:	f023 0304 	bic.w	r3, r3, #4
 8002152:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteConfig(config);
 8002154:	7bfb      	ldrb	r3, [r7, #15]
 8002156:	4618      	mov	r0, r3
 8002158:	f7ff ff2c 	bl	8001fb4 <nRF24_WriteConfig>
}
 800215c:	bf00      	nop
 800215e:	3710      	adds	r7, #16
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}

08002164 <nRF24_SetRetries>:

void nRF24_SetRetries(uint8_t ard, uint8_t arc)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b082      	sub	sp, #8
 8002168:	af00      	add	r7, sp, #0
 800216a:	4603      	mov	r3, r0
 800216c:	460a      	mov	r2, r1
 800216e:	71fb      	strb	r3, [r7, #7]
 8002170:	4613      	mov	r3, r2
 8002172:	71bb      	strb	r3, [r7, #6]
	// ard * 250us, arc repeats
	nRF24_WriteRegister(NRF24_SETUP_RETR, (((ard & 0x0F)<<NRF24_ARD) | ((arc & 0x0F)<<NRF24_ARC)));
 8002174:	79fb      	ldrb	r3, [r7, #7]
 8002176:	011b      	lsls	r3, r3, #4
 8002178:	b25a      	sxtb	r2, r3
 800217a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800217e:	f003 030f 	and.w	r3, r3, #15
 8002182:	b25b      	sxtb	r3, r3
 8002184:	4313      	orrs	r3, r2
 8002186:	b25b      	sxtb	r3, r3
 8002188:	b2db      	uxtb	r3, r3
 800218a:	4619      	mov	r1, r3
 800218c:	2004      	movs	r0, #4
 800218e:	f7ff fe69 	bl	8001e64 <nRF24_WriteRegister>
}
 8002192:	bf00      	nop
 8002194:	3708      	adds	r7, #8
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}

0800219a <nRF24_SetRFChannel>:

void nRF24_SetRFChannel(uint8_t channel)
{
 800219a:	b580      	push	{r7, lr}
 800219c:	b082      	sub	sp, #8
 800219e:	af00      	add	r7, sp, #0
 80021a0:	4603      	mov	r3, r0
 80021a2:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_RF_CH, (channel & 0x7F));
 80021a4:	79fb      	ldrb	r3, [r7, #7]
 80021a6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80021aa:	b2db      	uxtb	r3, r3
 80021ac:	4619      	mov	r1, r3
 80021ae:	2005      	movs	r0, #5
 80021b0:	f7ff fe58 	bl	8001e64 <nRF24_WriteRegister>
}
 80021b4:	bf00      	nop
 80021b6:	3708      	adds	r7, #8
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}

080021bc <nRF24_SetPayloadSize>:

void nRF24_SetPayloadSize(uint8_t pipe, uint8_t size)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b082      	sub	sp, #8
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	4603      	mov	r3, r0
 80021c4:	460a      	mov	r2, r1
 80021c6:	71fb      	strb	r3, [r7, #7]
 80021c8:	4613      	mov	r3, r2
 80021ca:	71bb      	strb	r3, [r7, #6]
	if(pipe > 5)
 80021cc:	79fb      	ldrb	r3, [r7, #7]
 80021ce:	2b05      	cmp	r3, #5
 80021d0:	d901      	bls.n	80021d6 <nRF24_SetPayloadSize+0x1a>
		pipe = 5; // Block too high pipe number
 80021d2:	2305      	movs	r3, #5
 80021d4:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_RX_PW_P0 + pipe , (size & 0x3F));
 80021d6:	79fb      	ldrb	r3, [r7, #7]
 80021d8:	3311      	adds	r3, #17
 80021da:	b2da      	uxtb	r2, r3
 80021dc:	79bb      	ldrb	r3, [r7, #6]
 80021de:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80021e2:	b2db      	uxtb	r3, r3
 80021e4:	4619      	mov	r1, r3
 80021e6:	4610      	mov	r0, r2
 80021e8:	f7ff fe3c 	bl	8001e64 <nRF24_WriteRegister>
}
 80021ec:	bf00      	nop
 80021ee:	3708      	adds	r7, #8
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}

080021f4 <nRF24_EnablePipe>:

void nRF24_EnablePipe(uint8_t pipe, uint8_t onoff)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b084      	sub	sp, #16
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	4603      	mov	r3, r0
 80021fc:	460a      	mov	r2, r1
 80021fe:	71fb      	strb	r3, [r7, #7]
 8002200:	4613      	mov	r3, r2
 8002202:	71bb      	strb	r3, [r7, #6]
	if(pipe > 5)
 8002204:	79fb      	ldrb	r3, [r7, #7]
 8002206:	2b05      	cmp	r3, #5
 8002208:	d901      	bls.n	800220e <nRF24_EnablePipe+0x1a>
		pipe = 5; // Block too high pipe number
 800220a:	2305      	movs	r3, #5
 800220c:	71fb      	strb	r3, [r7, #7]
	uint8_t enable_pipe = nRF24_ReadRegister(NRF24_EN_RXADDR);
 800220e:	2002      	movs	r0, #2
 8002210:	f7ff fde0 	bl	8001dd4 <nRF24_ReadRegister>
 8002214:	4603      	mov	r3, r0
 8002216:	73fb      	strb	r3, [r7, #15]
	if(onoff == 1)
 8002218:	79bb      	ldrb	r3, [r7, #6]
 800221a:	2b01      	cmp	r3, #1
 800221c:	d10a      	bne.n	8002234 <nRF24_EnablePipe+0x40>
		enable_pipe |= (1<<pipe);
 800221e:	79fb      	ldrb	r3, [r7, #7]
 8002220:	2201      	movs	r2, #1
 8002222:	fa02 f303 	lsl.w	r3, r2, r3
 8002226:	b25a      	sxtb	r2, r3
 8002228:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800222c:	4313      	orrs	r3, r2
 800222e:	b25b      	sxtb	r3, r3
 8002230:	73fb      	strb	r3, [r7, #15]
 8002232:	e00b      	b.n	800224c <nRF24_EnablePipe+0x58>
	else
		enable_pipe &= ~(1<<pipe);
 8002234:	79fb      	ldrb	r3, [r7, #7]
 8002236:	2201      	movs	r2, #1
 8002238:	fa02 f303 	lsl.w	r3, r2, r3
 800223c:	b25b      	sxtb	r3, r3
 800223e:	43db      	mvns	r3, r3
 8002240:	b25a      	sxtb	r2, r3
 8002242:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002246:	4013      	ands	r3, r2
 8002248:	b25b      	sxtb	r3, r3
 800224a:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_EN_RXADDR, enable_pipe);
 800224c:	7bfb      	ldrb	r3, [r7, #15]
 800224e:	4619      	mov	r1, r3
 8002250:	2002      	movs	r0, #2
 8002252:	f7ff fe07 	bl	8001e64 <nRF24_WriteRegister>
}
 8002256:	bf00      	nop
 8002258:	3710      	adds	r7, #16
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}

0800225e <nRF24_AutoACK>:

void nRF24_AutoACK(uint8_t pipe, uint8_t onoff)
{
 800225e:	b580      	push	{r7, lr}
 8002260:	b084      	sub	sp, #16
 8002262:	af00      	add	r7, sp, #0
 8002264:	4603      	mov	r3, r0
 8002266:	460a      	mov	r2, r1
 8002268:	71fb      	strb	r3, [r7, #7]
 800226a:	4613      	mov	r3, r2
 800226c:	71bb      	strb	r3, [r7, #6]
	if(pipe > 5)
 800226e:	79fb      	ldrb	r3, [r7, #7]
 8002270:	2b05      	cmp	r3, #5
 8002272:	d901      	bls.n	8002278 <nRF24_AutoACK+0x1a>
		pipe = 5; // Block too high pipe number
 8002274:	2305      	movs	r3, #5
 8002276:	71fb      	strb	r3, [r7, #7]
	uint8_t enaa = nRF24_ReadRegister(NRF24_EN_AA);
 8002278:	2001      	movs	r0, #1
 800227a:	f7ff fdab 	bl	8001dd4 <nRF24_ReadRegister>
 800227e:	4603      	mov	r3, r0
 8002280:	73fb      	strb	r3, [r7, #15]
	if(onoff == 1)
 8002282:	79bb      	ldrb	r3, [r7, #6]
 8002284:	2b01      	cmp	r3, #1
 8002286:	d10a      	bne.n	800229e <nRF24_AutoACK+0x40>
		enaa |= (1<<pipe);
 8002288:	79fb      	ldrb	r3, [r7, #7]
 800228a:	2201      	movs	r2, #1
 800228c:	fa02 f303 	lsl.w	r3, r2, r3
 8002290:	b25a      	sxtb	r2, r3
 8002292:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002296:	4313      	orrs	r3, r2
 8002298:	b25b      	sxtb	r3, r3
 800229a:	73fb      	strb	r3, [r7, #15]
 800229c:	e00b      	b.n	80022b6 <nRF24_AutoACK+0x58>
	else
		enaa &= ~(1<<pipe);
 800229e:	79fb      	ldrb	r3, [r7, #7]
 80022a0:	2201      	movs	r2, #1
 80022a2:	fa02 f303 	lsl.w	r3, r2, r3
 80022a6:	b25b      	sxtb	r3, r3
 80022a8:	43db      	mvns	r3, r3
 80022aa:	b25a      	sxtb	r2, r3
 80022ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022b0:	4013      	ands	r3, r2
 80022b2:	b25b      	sxtb	r3, r3
 80022b4:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_EN_AA, enaa);
 80022b6:	7bfb      	ldrb	r3, [r7, #15]
 80022b8:	4619      	mov	r1, r3
 80022ba:	2001      	movs	r0, #1
 80022bc:	f7ff fdd2 	bl	8001e64 <nRF24_WriteRegister>
}
 80022c0:	bf00      	nop
 80022c2:	3710      	adds	r7, #16
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}

080022c8 <nRF24_SetAddressWidth>:

void nRF24_SetAddressWidth(uint8_t size)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b082      	sub	sp, #8
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	4603      	mov	r3, r0
 80022d0:	71fb      	strb	r3, [r7, #7]
	if(size > 5)
 80022d2:	79fb      	ldrb	r3, [r7, #7]
 80022d4:	2b05      	cmp	r3, #5
 80022d6:	d901      	bls.n	80022dc <nRF24_SetAddressWidth+0x14>
		size = 5; // Maximum are 5 bytes
 80022d8:	2305      	movs	r3, #5
 80022da:	71fb      	strb	r3, [r7, #7]
	if(size < 3)
 80022dc:	79fb      	ldrb	r3, [r7, #7]
 80022de:	2b02      	cmp	r3, #2
 80022e0:	d801      	bhi.n	80022e6 <nRF24_SetAddressWidth+0x1e>
		size = 3; // Minimum are 3 bytes
 80022e2:	2303      	movs	r3, #3
 80022e4:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_SETUP_AW, ((size-2) & 0x03));
 80022e6:	79fb      	ldrb	r3, [r7, #7]
 80022e8:	3b02      	subs	r3, #2
 80022ea:	b2db      	uxtb	r3, r3
 80022ec:	f003 0303 	and.w	r3, r3, #3
 80022f0:	b2db      	uxtb	r3, r3
 80022f2:	4619      	mov	r1, r3
 80022f4:	2003      	movs	r0, #3
 80022f6:	f7ff fdb5 	bl	8001e64 <nRF24_WriteRegister>
}
 80022fa:	bf00      	nop
 80022fc:	3708      	adds	r7, #8
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}

08002302 <nRF24_SetRXAddress>:

void nRF24_SetRXAddress(uint8_t pipe, uint8_t* address)
{
 8002302:	b580      	push	{r7, lr}
 8002304:	b084      	sub	sp, #16
 8002306:	af00      	add	r7, sp, #0
 8002308:	4603      	mov	r3, r0
 800230a:	6039      	str	r1, [r7, #0]
 800230c:	71fb      	strb	r3, [r7, #7]
	// pipe 0 and pipe 1 are fully 40-bits storaged
	// pipe 2-5 is storaged only with last byte. Rest are as same as pipe 1
	// pipe 0 and 1 are LSByte first so they are needed to reverse address
	if((pipe == 0) || (pipe == 1))
 800230e:	79fb      	ldrb	r3, [r7, #7]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d002      	beq.n	800231a <nRF24_SetRXAddress+0x18>
 8002314:	79fb      	ldrb	r3, [r7, #7]
 8002316:	2b01      	cmp	r3, #1
 8002318:	d11d      	bne.n	8002356 <nRF24_SetRXAddress+0x54>
	{
		uint8_t i;
		uint8_t address_rev[NRF24_ADDR_SIZE];
		for(i = 0; i<NRF24_ADDR_SIZE; i++)
 800231a:	2300      	movs	r3, #0
 800231c:	73fb      	strb	r3, [r7, #15]
 800231e:	e00d      	b.n	800233c <nRF24_SetRXAddress+0x3a>
			address_rev[NRF24_ADDR_SIZE - 1 - i] = address[i];
 8002320:	7bfb      	ldrb	r3, [r7, #15]
 8002322:	683a      	ldr	r2, [r7, #0]
 8002324:	441a      	add	r2, r3
 8002326:	7bfb      	ldrb	r3, [r7, #15]
 8002328:	f1c3 0302 	rsb	r3, r3, #2
 800232c:	7812      	ldrb	r2, [r2, #0]
 800232e:	3310      	adds	r3, #16
 8002330:	443b      	add	r3, r7
 8002332:	f803 2c04 	strb.w	r2, [r3, #-4]
		for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8002336:	7bfb      	ldrb	r3, [r7, #15]
 8002338:	3301      	adds	r3, #1
 800233a:	73fb      	strb	r3, [r7, #15]
 800233c:	7bfb      	ldrb	r3, [r7, #15]
 800233e:	2b02      	cmp	r3, #2
 8002340:	d9ee      	bls.n	8002320 <nRF24_SetRXAddress+0x1e>
		nRF24_WriteRegisters(NRF24_RX_ADDR_P0 + pipe, address_rev, NRF24_ADDR_SIZE);
 8002342:	79fb      	ldrb	r3, [r7, #7]
 8002344:	330a      	adds	r3, #10
 8002346:	b2db      	uxtb	r3, r3
 8002348:	f107 010c 	add.w	r1, r7, #12
 800234c:	2203      	movs	r2, #3
 800234e:	4618      	mov	r0, r3
 8002350:	f7ff fdae 	bl	8001eb0 <nRF24_WriteRegisters>
	{
 8002354:	e00a      	b.n	800236c <nRF24_SetRXAddress+0x6a>
	}
	else
		nRF24_WriteRegister(NRF24_RX_ADDR_P0 + pipe, address[NRF24_ADDR_SIZE-1]);
 8002356:	79fb      	ldrb	r3, [r7, #7]
 8002358:	330a      	adds	r3, #10
 800235a:	b2da      	uxtb	r2, r3
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	3302      	adds	r3, #2
 8002360:	781b      	ldrb	r3, [r3, #0]
 8002362:	4619      	mov	r1, r3
 8002364:	4610      	mov	r0, r2
 8002366:	f7ff fd7d 	bl	8001e64 <nRF24_WriteRegister>
}
 800236a:	bf00      	nop
 800236c:	bf00      	nop
 800236e:	3710      	adds	r7, #16
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}

08002374 <nRF24_SetTXAddress>:

void nRF24_SetTXAddress(uint8_t* address)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b084      	sub	sp, #16
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
	// TX address is storaged similar to RX pipe 0 - LSByte first
	uint8_t i;
	uint8_t address_rev[NRF24_ADDR_SIZE];

	nRF24_ReadRegisters(NRF24_RX_ADDR_P0, address_rev, NRF24_ADDR_SIZE); // Backup P0 address
 800237c:	f107 030c 	add.w	r3, r7, #12
 8002380:	2203      	movs	r2, #3
 8002382:	4619      	mov	r1, r3
 8002384:	200a      	movs	r0, #10
 8002386:	f7ff fd49 	bl	8001e1c <nRF24_ReadRegisters>
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 800238a:	2300      	movs	r3, #0
 800238c:	73fb      	strb	r3, [r7, #15]
 800238e:	e00c      	b.n	80023aa <nRF24_SetTXAddress+0x36>
		addr_p0_backup[NRF24_ADDR_SIZE - 1 - i] = address_rev[i]; //Reverse P0 address
 8002390:	7bfa      	ldrb	r2, [r7, #15]
 8002392:	7bfb      	ldrb	r3, [r7, #15]
 8002394:	f1c3 0302 	rsb	r3, r3, #2
 8002398:	3210      	adds	r2, #16
 800239a:	443a      	add	r2, r7
 800239c:	f812 1c04 	ldrb.w	r1, [r2, #-4]
 80023a0:	4a16      	ldr	r2, [pc, #88]	@ (80023fc <nRF24_SetTXAddress+0x88>)
 80023a2:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 80023a4:	7bfb      	ldrb	r3, [r7, #15]
 80023a6:	3301      	adds	r3, #1
 80023a8:	73fb      	strb	r3, [r7, #15]
 80023aa:	7bfb      	ldrb	r3, [r7, #15]
 80023ac:	2b02      	cmp	r3, #2
 80023ae:	d9ef      	bls.n	8002390 <nRF24_SetTXAddress+0x1c>

	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 80023b0:	2300      	movs	r3, #0
 80023b2:	73fb      	strb	r3, [r7, #15]
 80023b4:	e00d      	b.n	80023d2 <nRF24_SetTXAddress+0x5e>
		address_rev[NRF24_ADDR_SIZE - 1 - i] = address[i];
 80023b6:	7bfb      	ldrb	r3, [r7, #15]
 80023b8:	687a      	ldr	r2, [r7, #4]
 80023ba:	441a      	add	r2, r3
 80023bc:	7bfb      	ldrb	r3, [r7, #15]
 80023be:	f1c3 0302 	rsb	r3, r3, #2
 80023c2:	7812      	ldrb	r2, [r2, #0]
 80023c4:	3310      	adds	r3, #16
 80023c6:	443b      	add	r3, r7
 80023c8:	f803 2c04 	strb.w	r2, [r3, #-4]
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 80023cc:	7bfb      	ldrb	r3, [r7, #15]
 80023ce:	3301      	adds	r3, #1
 80023d0:	73fb      	strb	r3, [r7, #15]
 80023d2:	7bfb      	ldrb	r3, [r7, #15]
 80023d4:	2b02      	cmp	r3, #2
 80023d6:	d9ee      	bls.n	80023b6 <nRF24_SetTXAddress+0x42>
	//make pipe 0 address backup;

	nRF24_WriteRegisters(NRF24_RX_ADDR_P0, address_rev, NRF24_ADDR_SIZE); // Pipe 0 must be same for auto ACk
 80023d8:	f107 030c 	add.w	r3, r7, #12
 80023dc:	2203      	movs	r2, #3
 80023de:	4619      	mov	r1, r3
 80023e0:	200a      	movs	r0, #10
 80023e2:	f7ff fd65 	bl	8001eb0 <nRF24_WriteRegisters>
	nRF24_WriteRegisters(NRF24_TX_ADDR, address_rev, NRF24_ADDR_SIZE);
 80023e6:	f107 030c 	add.w	r3, r7, #12
 80023ea:	2203      	movs	r2, #3
 80023ec:	4619      	mov	r1, r3
 80023ee:	2010      	movs	r0, #16
 80023f0:	f7ff fd5e 	bl	8001eb0 <nRF24_WriteRegisters>

}
 80023f4:	bf00      	nop
 80023f6:	3710      	adds	r7, #16
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}
 80023fc:	240000a8 	.word	0x240000a8

08002400 <nRF24_ClearInterrupts>:

void nRF24_ClearInterrupts(void)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b082      	sub	sp, #8
 8002404:	af00      	add	r7, sp, #0
	uint8_t status = nRF24_ReadStatus();
 8002406:	f7ff fe28 	bl	800205a <nRF24_ReadStatus>
 800240a:	4603      	mov	r3, r0
 800240c:	71fb      	strb	r3, [r7, #7]
	status |= (7<<4); // Clear bits 4, 5, 6.
 800240e:	79fb      	ldrb	r3, [r7, #7]
 8002410:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 8002414:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteStatus(status);
 8002416:	79fb      	ldrb	r3, [r7, #7]
 8002418:	4618      	mov	r0, r3
 800241a:	f7ff fe26 	bl	800206a <nRF24_WriteStatus>
}
 800241e:	bf00      	nop
 8002420:	3708      	adds	r7, #8
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}

08002426 <nRF24_EnableRXDataReadyIRQ>:

void nRF24_EnableRXDataReadyIRQ(uint8_t onoff)
{
 8002426:	b580      	push	{r7, lr}
 8002428:	b084      	sub	sp, #16
 800242a:	af00      	add	r7, sp, #0
 800242c:	4603      	mov	r3, r0
 800242e:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 8002430:	f7ff fdb8 	bl	8001fa4 <nRF24_ReadConfig>
 8002434:	4603      	mov	r3, r0
 8002436:	73fb      	strb	r3, [r7, #15]

	if(!onoff)
 8002438:	79fb      	ldrb	r3, [r7, #7]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d104      	bne.n	8002448 <nRF24_EnableRXDataReadyIRQ+0x22>
		config |= (1<<NRF24_RX_DR);
 800243e:	7bfb      	ldrb	r3, [r7, #15]
 8002440:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002444:	73fb      	strb	r3, [r7, #15]
 8002446:	e003      	b.n	8002450 <nRF24_EnableRXDataReadyIRQ+0x2a>
	else
		config &= ~(1<<NRF24_RX_DR);
 8002448:	7bfb      	ldrb	r3, [r7, #15]
 800244a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800244e:	73fb      	strb	r3, [r7, #15]

	nRF24_WriteConfig(config);
 8002450:	7bfb      	ldrb	r3, [r7, #15]
 8002452:	4618      	mov	r0, r3
 8002454:	f7ff fdae 	bl	8001fb4 <nRF24_WriteConfig>
}
 8002458:	bf00      	nop
 800245a:	3710      	adds	r7, #16
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}

08002460 <nRF24_EnableTXDataSentIRQ>:

void nRF24_EnableTXDataSentIRQ(uint8_t onoff)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b084      	sub	sp, #16
 8002464:	af00      	add	r7, sp, #0
 8002466:	4603      	mov	r3, r0
 8002468:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 800246a:	f7ff fd9b 	bl	8001fa4 <nRF24_ReadConfig>
 800246e:	4603      	mov	r3, r0
 8002470:	73fb      	strb	r3, [r7, #15]

	if(!onoff)
 8002472:	79fb      	ldrb	r3, [r7, #7]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d104      	bne.n	8002482 <nRF24_EnableTXDataSentIRQ+0x22>
		config |= (1<<NRF24_TX_DS);
 8002478:	7bfb      	ldrb	r3, [r7, #15]
 800247a:	f043 0320 	orr.w	r3, r3, #32
 800247e:	73fb      	strb	r3, [r7, #15]
 8002480:	e003      	b.n	800248a <nRF24_EnableTXDataSentIRQ+0x2a>
	else
		config &= ~(1<<NRF24_TX_DS);
 8002482:	7bfb      	ldrb	r3, [r7, #15]
 8002484:	f023 0320 	bic.w	r3, r3, #32
 8002488:	73fb      	strb	r3, [r7, #15]

	nRF24_WriteConfig(config);
 800248a:	7bfb      	ldrb	r3, [r7, #15]
 800248c:	4618      	mov	r0, r3
 800248e:	f7ff fd91 	bl	8001fb4 <nRF24_WriteConfig>
}
 8002492:	bf00      	nop
 8002494:	3710      	adds	r7, #16
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}

0800249a <nRF24_EnableMaxRetransmitIRQ>:

void nRF24_EnableMaxRetransmitIRQ(uint8_t onoff)
{
 800249a:	b580      	push	{r7, lr}
 800249c:	b084      	sub	sp, #16
 800249e:	af00      	add	r7, sp, #0
 80024a0:	4603      	mov	r3, r0
 80024a2:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 80024a4:	f7ff fd7e 	bl	8001fa4 <nRF24_ReadConfig>
 80024a8:	4603      	mov	r3, r0
 80024aa:	73fb      	strb	r3, [r7, #15]

	if(!onoff)
 80024ac:	79fb      	ldrb	r3, [r7, #7]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d104      	bne.n	80024bc <nRF24_EnableMaxRetransmitIRQ+0x22>
		config |= (1<<NRF24_MAX_RT);
 80024b2:	7bfb      	ldrb	r3, [r7, #15]
 80024b4:	f043 0310 	orr.w	r3, r3, #16
 80024b8:	73fb      	strb	r3, [r7, #15]
 80024ba:	e003      	b.n	80024c4 <nRF24_EnableMaxRetransmitIRQ+0x2a>
	else
		config &= ~(1<<NRF24_MAX_RT);
 80024bc:	7bfb      	ldrb	r3, [r7, #15]
 80024be:	f023 0310 	bic.w	r3, r3, #16
 80024c2:	73fb      	strb	r3, [r7, #15]

	nRF24_WriteConfig(config);
 80024c4:	7bfb      	ldrb	r3, [r7, #15]
 80024c6:	4618      	mov	r0, r3
 80024c8:	f7ff fd74 	bl	8001fb4 <nRF24_WriteConfig>
}
 80024cc:	bf00      	nop
 80024ce:	3710      	adds	r7, #16
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}

080024d4 <nRF24_WriteTXPayload>:

void nRF24_WriteTXPayload(uint8_t * data/*, uint8_t size*/)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b082      	sub	sp, #8
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
	nRF24_WriteRegisters(NRF24_CMD_W_TX_PAYLOAD, data, NRF24_PAYLOAD_SIZE);
 80024dc:	2220      	movs	r2, #32
 80024de:	6879      	ldr	r1, [r7, #4]
 80024e0:	20a0      	movs	r0, #160	@ 0xa0
 80024e2:	f7ff fce5 	bl	8001eb0 <nRF24_WriteRegisters>
	//nRF24_WaitTX();
}
 80024e6:	bf00      	nop
 80024e8:	3708      	adds	r7, #8
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}
	...

080024f0 <nRF24_WaitTX>:

void nRF24_WaitTX()
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b082      	sub	sp, #8
 80024f4:	af00      	add	r7, sp, #0
	uint8_t status;
	NRF24_CE_HIGH;
 80024f6:	2201      	movs	r2, #1
 80024f8:	2140      	movs	r1, #64	@ 0x40
 80024fa:	4810      	ldr	r0, [pc, #64]	@ (800253c <nRF24_WaitTX+0x4c>)
 80024fc:	f00b ffe2 	bl	800e4c4 <HAL_GPIO_WritePin>
	nRF24_Delay(1);
 8002500:	2001      	movs	r0, #1
 8002502:	f7ff fc2f 	bl	8001d64 <nRF24_Delay>
	NRF24_CE_LOW;
 8002506:	2200      	movs	r2, #0
 8002508:	2140      	movs	r1, #64	@ 0x40
 800250a:	480c      	ldr	r0, [pc, #48]	@ (800253c <nRF24_WaitTX+0x4c>)
 800250c:	f00b ffda 	bl	800e4c4 <HAL_GPIO_WritePin>
	do
	{
		nRF24_Delay(1);
 8002510:	2001      	movs	r0, #1
 8002512:	f7ff fc27 	bl	8001d64 <nRF24_Delay>
		status = nRF24_ReadStatus();
 8002516:	f7ff fda0 	bl	800205a <nRF24_ReadStatus>
 800251a:	4603      	mov	r3, r0
 800251c:	71fb      	strb	r3, [r7, #7]
	}while(!((status & (1<<NRF24_MAX_RT)) || (status & (1<<NRF24_TX_DS))));
 800251e:	79fb      	ldrb	r3, [r7, #7]
 8002520:	f003 0310 	and.w	r3, r3, #16
 8002524:	2b00      	cmp	r3, #0
 8002526:	d104      	bne.n	8002532 <nRF24_WaitTX+0x42>
 8002528:	79fb      	ldrb	r3, [r7, #7]
 800252a:	f003 0320 	and.w	r3, r3, #32
 800252e:	2b00      	cmp	r3, #0
 8002530:	d0ee      	beq.n	8002510 <nRF24_WaitTX+0x20>

}
 8002532:	bf00      	nop
 8002534:	3708      	adds	r7, #8
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}
 800253a:	bf00      	nop
 800253c:	58020400 	.word	0x58020400

08002540 <nRF24_ReadRXPaylaod>:

void nRF24_ReadRXPaylaod(uint8_t *data/*, uint8_t *size*/)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b082      	sub	sp, #8
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
	nRF24_ReadRegisters(NRF24_CMD_R_RX_PAYLOAD, data, NRF24_PAYLOAD_SIZE);
 8002548:	2220      	movs	r2, #32
 800254a:	6879      	ldr	r1, [r7, #4]
 800254c:	2061      	movs	r0, #97	@ 0x61
 800254e:	f7ff fc65 	bl	8001e1c <nRF24_ReadRegisters>
	nRF24_WriteRegister(NRF24_STATUS, (1<<NRF24_RX_DR));
 8002552:	2140      	movs	r1, #64	@ 0x40
 8002554:	2007      	movs	r0, #7
 8002556:	f7ff fc85 	bl	8001e64 <nRF24_WriteRegister>

	if(nRF24_ReadStatus() & (1<<NRF24_TX_DS)){
 800255a:	f7ff fd7e 	bl	800205a <nRF24_ReadStatus>
 800255e:	4603      	mov	r3, r0
 8002560:	f003 0320 	and.w	r3, r3, #32
 8002564:	2b00      	cmp	r3, #0
 8002566:	d003      	beq.n	8002570 <nRF24_ReadRXPaylaod+0x30>
		nRF24_WriteRegister(NRF24_STATUS, (1<<NRF24_TX_DS));
 8002568:	2120      	movs	r1, #32
 800256a:	2007      	movs	r0, #7
 800256c:	f7ff fc7a 	bl	8001e64 <nRF24_WriteRegister>
//	nRF24_ReadRegisters(NRF24_CMD_R_RX_PAYLOAD, data, *size);
//
//	nRF24_WriteRegister(NRF24_STATUS, (1<NRF24_RX_DR));
//	if(nRF24_ReadStatus() & (1<<NRF24_TX_DS))
//		nRF24_WriteRegister(NRF24_STATUS, (1<<NRF24_TX_DS));
}
 8002570:	bf00      	nop
 8002572:	3708      	adds	r7, #8
 8002574:	46bd      	mov	sp, r7
 8002576:	bd80      	pop	{r7, pc}

08002578 <nRF24_IsBitSetInFifoStatus>:

	return 0;
}

uint8_t nRF24_IsBitSetInFifoStatus(uint8_t Bit)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b084      	sub	sp, #16
 800257c:	af00      	add	r7, sp, #0
 800257e:	4603      	mov	r3, r0
 8002580:	71fb      	strb	r3, [r7, #7]
	uint8_t FifoStatus;

	FifoStatus = nRF24_ReadFifoStatus();
 8002582:	f000 f811 	bl	80025a8 <nRF24_ReadFifoStatus>
 8002586:	4603      	mov	r3, r0
 8002588:	73fb      	strb	r3, [r7, #15]

	if(FifoStatus & (1<<Bit))
 800258a:	7bfa      	ldrb	r2, [r7, #15]
 800258c:	79fb      	ldrb	r3, [r7, #7]
 800258e:	fa42 f303 	asr.w	r3, r2, r3
 8002592:	f003 0301 	and.w	r3, r3, #1
 8002596:	2b00      	cmp	r3, #0
 8002598:	d001      	beq.n	800259e <nRF24_IsBitSetInFifoStatus+0x26>
	{
		return 1;
 800259a:	2301      	movs	r3, #1
 800259c:	e000      	b.n	80025a0 <nRF24_IsBitSetInFifoStatus+0x28>
	}

	return 0;
 800259e:	2300      	movs	r3, #0
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	3710      	adds	r7, #16
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}

080025a8 <nRF24_ReadFifoStatus>:

uint8_t nRF24_ReadFifoStatus(void)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	af00      	add	r7, sp, #0
	return (nRF24_ReadRegister(NRF24_FIFO_STATUS));
 80025ac:	2017      	movs	r0, #23
 80025ae:	f7ff fc11 	bl	8001dd4 <nRF24_ReadRegister>
 80025b2:	4603      	mov	r3, r0
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	bd80      	pop	{r7, pc}

080025b8 <nRF24_Init>:



void nRF24_Init(SPI_HandleTypeDef *hspi)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b082      	sub	sp, #8
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
	hspi_nrf = hspi;
 80025c0:	4a25      	ldr	r2, [pc, #148]	@ (8002658 <nRF24_Init+0xa0>)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6013      	str	r3, [r2, #0]

	NRF24_CE_LOW;
 80025c6:	2200      	movs	r2, #0
 80025c8:	2140      	movs	r1, #64	@ 0x40
 80025ca:	4824      	ldr	r0, [pc, #144]	@ (800265c <nRF24_Init+0xa4>)
 80025cc:	f00b ff7a 	bl	800e4c4 <HAL_GPIO_WritePin>
	NRF24_CSN_HIGH;
 80025d0:	2201      	movs	r2, #1
 80025d2:	2180      	movs	r1, #128	@ 0x80
 80025d4:	4821      	ldr	r0, [pc, #132]	@ (800265c <nRF24_Init+0xa4>)
 80025d6:	f00b ff75 	bl	800e4c4 <HAL_GPIO_WritePin>

	HAL_Delay(10); // Wait for radio power up
 80025da:	200a      	movs	r0, #10
 80025dc:	f006 fe36 	bl	800924c <HAL_Delay>

	nRF24_SetPALevel(NRF24_PA_PWR_0dBM); // Radio power
 80025e0:	2003      	movs	r0, #3
 80025e2:	f7ff fcf5 	bl	8001fd0 <nRF24_SetPALevel>
	nRF24_SetDataRate(NRF24_RF_DR_2MBPS); // Data Rate
 80025e6:	2001      	movs	r0, #1
 80025e8:	f7ff fd11 	bl	800200e <nRF24_SetDataRate>
	nRF24_EnableCRC(1); // Enable CRC
 80025ec:	2001      	movs	r0, #1
 80025ee:	f7ff fd7f 	bl	80020f0 <nRF24_EnableCRC>
	nRF24_SetCRCLength(NRF24_CRC_WIDTH_1B); // CRC Length 1 byte
 80025f2:	2000      	movs	r0, #0
 80025f4:	f7ff fd99 	bl	800212a <nRF24_SetCRCLength>
	nRF24_SetRetries(0x00, 0x00); // 1000us, 0 times
 80025f8:	2100      	movs	r1, #0
 80025fa:	2000      	movs	r0, #0
 80025fc:	f7ff fdb2 	bl	8002164 <nRF24_SetRetries>

#if (NRF24_DYNAMIC_PAYLOAD == 1)
	nRF24_WriteRegister(NRF24_FEATURE, nRF24_ReadRegister(NRF24_FEATURE) | (1<<NRF24_EN_DPL)); // Enable dynamic payload feature
	nRF24_WriteRegister(NRF24_DYNPD, 0x3F); // Enable dynamic payloads for all pipes
#else
	nRF24_WriteRegister(NRF24_DYNPD, 0); // Disable dynamic payloads for all pipes
 8002600:	2100      	movs	r1, #0
 8002602:	201c      	movs	r0, #28
 8002604:	f7ff fc2e 	bl	8001e64 <nRF24_WriteRegister>
	nRF24_SetPayloadSize(0, NRF24_PAYLOAD_SIZE); // Set 32 bytes payload for pipe 0
 8002608:	2120      	movs	r1, #32
 800260a:	2000      	movs	r0, #0
 800260c:	f7ff fdd6 	bl	80021bc <nRF24_SetPayloadSize>
#endif
	nRF24_SetRFChannel(15); // Set RF channel for transmission
 8002610:	200f      	movs	r0, #15
 8002612:	f7ff fdc2 	bl	800219a <nRF24_SetRFChannel>
	nRF24_EnablePipe(0, 1); // Enable pipe 0
 8002616:	2101      	movs	r1, #1
 8002618:	2000      	movs	r0, #0
 800261a:	f7ff fdeb 	bl	80021f4 <nRF24_EnablePipe>
	nRF24_AutoACK(0, 1); // Enable auto ACK for pipe 0
 800261e:	2101      	movs	r1, #1
 8002620:	2000      	movs	r0, #0
 8002622:	f7ff fe1c 	bl	800225e <nRF24_AutoACK>
	nRF24_SetAddressWidth(NRF24_ADDR_SIZE); // Set address size
 8002626:	2003      	movs	r0, #3
 8002628:	f7ff fe4e 	bl	80022c8 <nRF24_SetAddressWidth>

	HAL_Delay(1);
 800262c:	2001      	movs	r0, #1
 800262e:	f006 fe0d 	bl	800924c <HAL_Delay>

	nRF24_EnableRXDataReadyIRQ(1);
 8002632:	2001      	movs	r0, #1
 8002634:	f7ff fef7 	bl	8002426 <nRF24_EnableRXDataReadyIRQ>
	nRF24_EnableTXDataSentIRQ(0);
 8002638:	2000      	movs	r0, #0
 800263a:	f7ff ff11 	bl	8002460 <nRF24_EnableTXDataSentIRQ>
	nRF24_EnableMaxRetransmitIRQ(0);
 800263e:	2000      	movs	r0, #0
 8002640:	f7ff ff2b 	bl	800249a <nRF24_EnableMaxRetransmitIRQ>

	HAL_Delay(1);
 8002644:	2001      	movs	r0, #1
 8002646:	f006 fe01 	bl	800924c <HAL_Delay>

	nRF24_ClearInterrupts();
 800264a:	f7ff fed9 	bl	8002400 <nRF24_ClearInterrupts>


}
 800264e:	bf00      	nop
 8002650:	3708      	adds	r7, #8
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}
 8002656:	bf00      	nop
 8002658:	240000a4 	.word	0x240000a4
 800265c:	58020400 	.word	0x58020400

08002660 <nRF24_Inittest>:
void nRF24_Inittest(void)
{
 8002660:	b480      	push	{r7}
 8002662:	af00      	add	r7, sp, #0
//	xz[5] = nRF24_ReadRegister(NRF24_EN_RXADDR);
//	xz[6] = nRF24_ReadRegister(NRF24_EN_AA);
//	xz[7] = nRF24_ReadRegister(NRF24_SETUP_AW);
//	xz[8] = nRF24_ReadConfig();

}
 8002664:	bf00      	nop
 8002666:	46bd      	mov	sp, r7
 8002668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266c:	4770      	bx	lr
	...

08002670 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8002670:	b480      	push	{r7}
 8002672:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002674:	f3bf 8f4f 	dsb	sy
}
 8002678:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800267a:	4b06      	ldr	r3, [pc, #24]	@ (8002694 <__NVIC_SystemReset+0x24>)
 800267c:	68db      	ldr	r3, [r3, #12]
 800267e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002682:	4904      	ldr	r1, [pc, #16]	@ (8002694 <__NVIC_SystemReset+0x24>)
 8002684:	4b04      	ldr	r3, [pc, #16]	@ (8002698 <__NVIC_SystemReset+0x28>)
 8002686:	4313      	orrs	r3, r2
 8002688:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800268a:	f3bf 8f4f 	dsb	sy
}
 800268e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8002690:	bf00      	nop
 8002692:	e7fd      	b.n	8002690 <__NVIC_SystemReset+0x20>
 8002694:	e000ed00 	.word	0xe000ed00
 8002698:	05fa0004 	.word	0x05fa0004

0800269c <interpretcommand>:
#include "main.h"

void interpretcommand(void){
 800269c:	b480      	push	{r7}
 800269e:	b087      	sub	sp, #28
 80026a0:	af00      	add	r7, sp, #0

	uint8_t vcount = 0, J1 = 0;
 80026a2:	2300      	movs	r3, #0
 80026a4:	75fb      	strb	r3, [r7, #23]
 80026a6:	2300      	movs	r3, #0
 80026a8:	75bb      	strb	r3, [r7, #22]
	char value1[10];


	commandready = 0;
 80026aa:	4b1f      	ldr	r3, [pc, #124]	@ (8002728 <interpretcommand+0x8c>)
 80026ac:	2200      	movs	r2, #0
 80026ae:	701a      	strb	r2, [r3, #0]

	for(int j = 0; j < 80; j++){
 80026b0:	2300      	movs	r3, #0
 80026b2:	613b      	str	r3, [r7, #16]
 80026b4:	e02e      	b.n	8002714 <interpretcommand+0x78>

		if(words[j] == ' '){
 80026b6:	4a1d      	ldr	r2, [pc, #116]	@ (800272c <interpretcommand+0x90>)
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	4413      	add	r3, r2
 80026bc:	781b      	ldrb	r3, [r3, #0]
 80026be:	2b20      	cmp	r3, #32
 80026c0:	d102      	bne.n	80026c8 <interpretcommand+0x2c>
			vcount++;
 80026c2:	7dfb      	ldrb	r3, [r7, #23]
 80026c4:	3301      	adds	r3, #1
 80026c6:	75fb      	strb	r3, [r7, #23]
		}
		if(vcount == 0){
 80026c8:	7dfb      	ldrb	r3, [r7, #23]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d108      	bne.n	80026e0 <interpretcommand+0x44>
			command[j] = words[j];
 80026ce:	4a17      	ldr	r2, [pc, #92]	@ (800272c <interpretcommand+0x90>)
 80026d0:	693b      	ldr	r3, [r7, #16]
 80026d2:	4413      	add	r3, r2
 80026d4:	7819      	ldrb	r1, [r3, #0]
 80026d6:	4a16      	ldr	r2, [pc, #88]	@ (8002730 <interpretcommand+0x94>)
 80026d8:	693b      	ldr	r3, [r7, #16]
 80026da:	4413      	add	r3, r2
 80026dc:	460a      	mov	r2, r1
 80026de:	701a      	strb	r2, [r3, #0]
		}
		if(vcount == 1){
 80026e0:	7dfb      	ldrb	r3, [r7, #23]
 80026e2:	2b01      	cmp	r3, #1
 80026e4:	d113      	bne.n	800270e <interpretcommand+0x72>
			value1[J1] = words[j];
 80026e6:	7dbb      	ldrb	r3, [r7, #22]
 80026e8:	4910      	ldr	r1, [pc, #64]	@ (800272c <interpretcommand+0x90>)
 80026ea:	693a      	ldr	r2, [r7, #16]
 80026ec:	440a      	add	r2, r1
 80026ee:	7812      	ldrb	r2, [r2, #0]
 80026f0:	3318      	adds	r3, #24
 80026f2:	443b      	add	r3, r7
 80026f4:	f803 2c14 	strb.w	r2, [r3, #-20]
			UASRT_PID_VAL[J1] = (int)value1[J1];//;printf("%d", value11[i]);
 80026f8:	7dba      	ldrb	r2, [r7, #22]
 80026fa:	7dbb      	ldrb	r3, [r7, #22]
 80026fc:	3218      	adds	r2, #24
 80026fe:	443a      	add	r2, r7
 8002700:	f812 1c14 	ldrb.w	r1, [r2, #-20]
 8002704:	4a0b      	ldr	r2, [pc, #44]	@ (8002734 <interpretcommand+0x98>)
 8002706:	54d1      	strb	r1, [r2, r3]
			J1++;
 8002708:	7dbb      	ldrb	r3, [r7, #22]
 800270a:	3301      	adds	r3, #1
 800270c:	75bb      	strb	r3, [r7, #22]
	for(int j = 0; j < 80; j++){
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	3301      	adds	r3, #1
 8002712:	613b      	str	r3, [r7, #16]
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	2b4f      	cmp	r3, #79	@ 0x4f
 8002718:	ddcd      	ble.n	80026b6 <interpretcommand+0x1a>
		}
	}
}
 800271a:	bf00      	nop
 800271c:	bf00      	nop
 800271e:	371c      	adds	r7, #28
 8002720:	46bd      	mov	sp, r7
 8002722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002726:	4770      	bx	lr
 8002728:	000041be 	.word	0x000041be
 800272c:	000041b4 	.word	0x000041b4
 8002730:	000041b0 	.word	0x000041b0
 8002734:	000041a0 	.word	0x000041a0

08002738 <executecommand>:

void executecommand(char command[], uint8_t value1[]){
 8002738:	b580      	push	{r7, lr}
 800273a:	b084      	sub	sp, #16
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
 8002740:	6039      	str	r1, [r7, #0]

	if(command[0] == 'P')
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	781b      	ldrb	r3, [r3, #0]
 8002746:	2b50      	cmp	r3, #80	@ 0x50
 8002748:	d14c      	bne.n	80027e4 <executecommand+0xac>
	{
		p_pitchfactor = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 800274a:	4bd5      	ldr	r3, [pc, #852]	@ (8002aa0 <executecommand+0x368>)
 800274c:	785b      	ldrb	r3, [r3, #1]
 800274e:	ee07 3a90 	vmov	s15, r3
 8002752:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002756:	ed9f 7ad3 	vldr	s14, [pc, #844]	@ 8002aa4 <executecommand+0x36c>
 800275a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800275e:	ed9f 7ad2 	vldr	s14, [pc, #840]	@ 8002aa8 <executecommand+0x370>
 8002762:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002766:	4bce      	ldr	r3, [pc, #824]	@ (8002aa0 <executecommand+0x368>)
 8002768:	789b      	ldrb	r3, [r3, #2]
 800276a:	ee07 3a90 	vmov	s15, r3
 800276e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002772:	eddf 6acc 	vldr	s13, [pc, #816]	@ 8002aa4 <executecommand+0x36c>
 8002776:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800277a:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 800277e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002782:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002786:	4bc6      	ldr	r3, [pc, #792]	@ (8002aa0 <executecommand+0x368>)
 8002788:	78db      	ldrb	r3, [r3, #3]
 800278a:	ee07 3a90 	vmov	s15, r3
 800278e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002792:	eddf 6ac4 	vldr	s13, [pc, #784]	@ 8002aa4 <executecommand+0x36c>
 8002796:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800279a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800279e:	4bc0      	ldr	r3, [pc, #768]	@ (8002aa0 <executecommand+0x368>)
 80027a0:	791b      	ldrb	r3, [r3, #4]
 80027a2:	ee07 3a90 	vmov	s15, r3
 80027a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027aa:	eddf 6abe 	vldr	s13, [pc, #760]	@ 8002aa4 <executecommand+0x36c>
 80027ae:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80027b2:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 80027b6:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80027ba:	ee37 7a27 	vadd.f32	s14, s14, s15
 80027be:	4bb8      	ldr	r3, [pc, #736]	@ (8002aa0 <executecommand+0x368>)
 80027c0:	795b      	ldrb	r3, [r3, #5]
 80027c2:	ee07 3a90 	vmov	s15, r3
 80027c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027ca:	eddf 6ab6 	vldr	s13, [pc, #728]	@ 8002aa4 <executecommand+0x36c>
 80027ce:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80027d2:	ed9f 6ab5 	vldr	s12, [pc, #724]	@ 8002aa8 <executecommand+0x370>
 80027d6:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80027da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027de:	4bb3      	ldr	r3, [pc, #716]	@ (8002aac <executecommand+0x374>)
 80027e0:	edc3 7a00 	vstr	s15, [r3]
	}

	if(command[0] == 'I')
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	781b      	ldrb	r3, [r3, #0]
 80027e8:	2b49      	cmp	r3, #73	@ 0x49
 80027ea:	d14f      	bne.n	800288c <executecommand+0x154>
	{
		i_pitchfactor = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 80027ec:	4bac      	ldr	r3, [pc, #688]	@ (8002aa0 <executecommand+0x368>)
 80027ee:	785b      	ldrb	r3, [r3, #1]
 80027f0:	ee07 3a90 	vmov	s15, r3
 80027f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027f8:	ed9f 7aaa 	vldr	s14, [pc, #680]	@ 8002aa4 <executecommand+0x36c>
 80027fc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002800:	ed9f 7aa9 	vldr	s14, [pc, #676]	@ 8002aa8 <executecommand+0x370>
 8002804:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002808:	4ba5      	ldr	r3, [pc, #660]	@ (8002aa0 <executecommand+0x368>)
 800280a:	789b      	ldrb	r3, [r3, #2]
 800280c:	ee07 3a90 	vmov	s15, r3
 8002810:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002814:	eddf 6aa3 	vldr	s13, [pc, #652]	@ 8002aa4 <executecommand+0x36c>
 8002818:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800281c:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002820:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002824:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002828:	4b9d      	ldr	r3, [pc, #628]	@ (8002aa0 <executecommand+0x368>)
 800282a:	78db      	ldrb	r3, [r3, #3]
 800282c:	ee07 3a90 	vmov	s15, r3
 8002830:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002834:	eddf 6a9b 	vldr	s13, [pc, #620]	@ 8002aa4 <executecommand+0x36c>
 8002838:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800283c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002840:	4b97      	ldr	r3, [pc, #604]	@ (8002aa0 <executecommand+0x368>)
 8002842:	791b      	ldrb	r3, [r3, #4]
 8002844:	ee07 3a90 	vmov	s15, r3
 8002848:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800284c:	eddf 6a95 	vldr	s13, [pc, #596]	@ 8002aa4 <executecommand+0x36c>
 8002850:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002854:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8002858:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800285c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002860:	4b8f      	ldr	r3, [pc, #572]	@ (8002aa0 <executecommand+0x368>)
 8002862:	795b      	ldrb	r3, [r3, #5]
 8002864:	ee07 3a90 	vmov	s15, r3
 8002868:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800286c:	eddf 6a8d 	vldr	s13, [pc, #564]	@ 8002aa4 <executecommand+0x36c>
 8002870:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002874:	ed9f 6a8c 	vldr	s12, [pc, #560]	@ 8002aa8 <executecommand+0x370>
 8002878:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800287c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002880:	4b8b      	ldr	r3, [pc, #556]	@ (8002ab0 <executecommand+0x378>)
 8002882:	edc3 7a00 	vstr	s15, [r3]
		error_sum_pitch = 0;
 8002886:	4b8b      	ldr	r3, [pc, #556]	@ (8002ab4 <executecommand+0x37c>)
 8002888:	2200      	movs	r2, #0
 800288a:	601a      	str	r2, [r3, #0]
	}

	if(command[0] == 'D')
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	781b      	ldrb	r3, [r3, #0]
 8002890:	2b44      	cmp	r3, #68	@ 0x44
 8002892:	d14c      	bne.n	800292e <executecommand+0x1f6>
	{
		d_pitchfactor = ((((float)UASRT_PID_VAL[1])-48)*1000) + ((((float)UASRT_PID_VAL[2])-48)*100) + ((((float)UASRT_PID_VAL[3])-48)*10) + ((((float)UASRT_PID_VAL[4])-48)) + ((((float)UASRT_PID_VAL[5])-48)/10);
 8002894:	4b82      	ldr	r3, [pc, #520]	@ (8002aa0 <executecommand+0x368>)
 8002896:	785b      	ldrb	r3, [r3, #1]
 8002898:	ee07 3a90 	vmov	s15, r3
 800289c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028a0:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 8002aa4 <executecommand+0x36c>
 80028a4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80028a8:	ed9f 7a83 	vldr	s14, [pc, #524]	@ 8002ab8 <executecommand+0x380>
 80028ac:	ee27 7a87 	vmul.f32	s14, s15, s14
 80028b0:	4b7b      	ldr	r3, [pc, #492]	@ (8002aa0 <executecommand+0x368>)
 80028b2:	789b      	ldrb	r3, [r3, #2]
 80028b4:	ee07 3a90 	vmov	s15, r3
 80028b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028bc:	eddf 6a79 	vldr	s13, [pc, #484]	@ 8002aa4 <executecommand+0x36c>
 80028c0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80028c4:	eddf 6a78 	vldr	s13, [pc, #480]	@ 8002aa8 <executecommand+0x370>
 80028c8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80028cc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80028d0:	4b73      	ldr	r3, [pc, #460]	@ (8002aa0 <executecommand+0x368>)
 80028d2:	78db      	ldrb	r3, [r3, #3]
 80028d4:	ee07 3a90 	vmov	s15, r3
 80028d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028dc:	eddf 6a71 	vldr	s13, [pc, #452]	@ 8002aa4 <executecommand+0x36c>
 80028e0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80028e4:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 80028e8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80028ec:	ee37 7a27 	vadd.f32	s14, s14, s15
 80028f0:	4b6b      	ldr	r3, [pc, #428]	@ (8002aa0 <executecommand+0x368>)
 80028f2:	791b      	ldrb	r3, [r3, #4]
 80028f4:	ee07 3a90 	vmov	s15, r3
 80028f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028fc:	eddf 6a69 	vldr	s13, [pc, #420]	@ 8002aa4 <executecommand+0x36c>
 8002900:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002904:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002908:	4b65      	ldr	r3, [pc, #404]	@ (8002aa0 <executecommand+0x368>)
 800290a:	795b      	ldrb	r3, [r3, #5]
 800290c:	ee07 3a90 	vmov	s15, r3
 8002910:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002914:	eddf 6a63 	vldr	s13, [pc, #396]	@ 8002aa4 <executecommand+0x36c>
 8002918:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800291c:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8002920:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002924:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002928:	4b64      	ldr	r3, [pc, #400]	@ (8002abc <executecommand+0x384>)
 800292a:	edc3 7a00 	vstr	s15, [r3]
	}
	if(command[0] == 'p')
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	781b      	ldrb	r3, [r3, #0]
 8002932:	2b70      	cmp	r3, #112	@ 0x70
 8002934:	d14c      	bne.n	80029d0 <executecommand+0x298>
	{
		p_angular_rate_pitchfactor = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 8002936:	4b5a      	ldr	r3, [pc, #360]	@ (8002aa0 <executecommand+0x368>)
 8002938:	785b      	ldrb	r3, [r3, #1]
 800293a:	ee07 3a90 	vmov	s15, r3
 800293e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002942:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 8002aa4 <executecommand+0x36c>
 8002946:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800294a:	ed9f 7a57 	vldr	s14, [pc, #348]	@ 8002aa8 <executecommand+0x370>
 800294e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002952:	4b53      	ldr	r3, [pc, #332]	@ (8002aa0 <executecommand+0x368>)
 8002954:	789b      	ldrb	r3, [r3, #2]
 8002956:	ee07 3a90 	vmov	s15, r3
 800295a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800295e:	eddf 6a51 	vldr	s13, [pc, #324]	@ 8002aa4 <executecommand+0x36c>
 8002962:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002966:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 800296a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800296e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002972:	4b4b      	ldr	r3, [pc, #300]	@ (8002aa0 <executecommand+0x368>)
 8002974:	78db      	ldrb	r3, [r3, #3]
 8002976:	ee07 3a90 	vmov	s15, r3
 800297a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800297e:	eddf 6a49 	vldr	s13, [pc, #292]	@ 8002aa4 <executecommand+0x36c>
 8002982:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002986:	ee37 7a27 	vadd.f32	s14, s14, s15
 800298a:	4b45      	ldr	r3, [pc, #276]	@ (8002aa0 <executecommand+0x368>)
 800298c:	791b      	ldrb	r3, [r3, #4]
 800298e:	ee07 3a90 	vmov	s15, r3
 8002992:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002996:	eddf 6a43 	vldr	s13, [pc, #268]	@ 8002aa4 <executecommand+0x36c>
 800299a:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800299e:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 80029a2:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80029a6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80029aa:	4b3d      	ldr	r3, [pc, #244]	@ (8002aa0 <executecommand+0x368>)
 80029ac:	795b      	ldrb	r3, [r3, #5]
 80029ae:	ee07 3a90 	vmov	s15, r3
 80029b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029b6:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8002aa4 <executecommand+0x36c>
 80029ba:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80029be:	ed9f 6a3a 	vldr	s12, [pc, #232]	@ 8002aa8 <executecommand+0x370>
 80029c2:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80029c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029ca:	4b3d      	ldr	r3, [pc, #244]	@ (8002ac0 <executecommand+0x388>)
 80029cc:	edc3 7a00 	vstr	s15, [r3]
	}

	if(command[0] == 'i')
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	781b      	ldrb	r3, [r3, #0]
 80029d4:	2b69      	cmp	r3, #105	@ 0x69
 80029d6:	d14f      	bne.n	8002a78 <executecommand+0x340>
	{
		i_angular_rate_pitchfactor = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 80029d8:	4b31      	ldr	r3, [pc, #196]	@ (8002aa0 <executecommand+0x368>)
 80029da:	785b      	ldrb	r3, [r3, #1]
 80029dc:	ee07 3a90 	vmov	s15, r3
 80029e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029e4:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8002aa4 <executecommand+0x36c>
 80029e8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80029ec:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 8002aa8 <executecommand+0x370>
 80029f0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80029f4:	4b2a      	ldr	r3, [pc, #168]	@ (8002aa0 <executecommand+0x368>)
 80029f6:	789b      	ldrb	r3, [r3, #2]
 80029f8:	ee07 3a90 	vmov	s15, r3
 80029fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a00:	eddf 6a28 	vldr	s13, [pc, #160]	@ 8002aa4 <executecommand+0x36c>
 8002a04:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002a08:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002a0c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002a10:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a14:	4b22      	ldr	r3, [pc, #136]	@ (8002aa0 <executecommand+0x368>)
 8002a16:	78db      	ldrb	r3, [r3, #3]
 8002a18:	ee07 3a90 	vmov	s15, r3
 8002a1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a20:	eddf 6a20 	vldr	s13, [pc, #128]	@ 8002aa4 <executecommand+0x36c>
 8002a24:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002a28:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a2c:	4b1c      	ldr	r3, [pc, #112]	@ (8002aa0 <executecommand+0x368>)
 8002a2e:	791b      	ldrb	r3, [r3, #4]
 8002a30:	ee07 3a90 	vmov	s15, r3
 8002a34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a38:	eddf 6a1a 	vldr	s13, [pc, #104]	@ 8002aa4 <executecommand+0x36c>
 8002a3c:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002a40:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8002a44:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002a48:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a4c:	4b14      	ldr	r3, [pc, #80]	@ (8002aa0 <executecommand+0x368>)
 8002a4e:	795b      	ldrb	r3, [r3, #5]
 8002a50:	ee07 3a90 	vmov	s15, r3
 8002a54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a58:	eddf 6a12 	vldr	s13, [pc, #72]	@ 8002aa4 <executecommand+0x36c>
 8002a5c:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002a60:	ed9f 6a11 	vldr	s12, [pc, #68]	@ 8002aa8 <executecommand+0x370>
 8002a64:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002a68:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a6c:	4b15      	ldr	r3, [pc, #84]	@ (8002ac4 <executecommand+0x38c>)
 8002a6e:	edc3 7a00 	vstr	s15, [r3]
		error_sum_angular_rate_pitch = 0;
 8002a72:	4b15      	ldr	r3, [pc, #84]	@ (8002ac8 <executecommand+0x390>)
 8002a74:	2200      	movs	r2, #0
 8002a76:	601a      	str	r2, [r3, #0]
	}

	if(command[0] == 'd')
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	781b      	ldrb	r3, [r3, #0]
 8002a7c:	2b64      	cmp	r3, #100	@ 0x64
 8002a7e:	d164      	bne.n	8002b4a <executecommand+0x412>
	{
		d_angular_rate_pitchfactor = ((((float)UASRT_PID_VAL[1])-48)*1000) + ((((float)UASRT_PID_VAL[2])-48)*100) + ((((float)UASRT_PID_VAL[3])-48)*10) + ((((float)UASRT_PID_VAL[4])-48)) + ((((float)UASRT_PID_VAL[5])-48)/10);
 8002a80:	4b07      	ldr	r3, [pc, #28]	@ (8002aa0 <executecommand+0x368>)
 8002a82:	785b      	ldrb	r3, [r3, #1]
 8002a84:	ee07 3a90 	vmov	s15, r3
 8002a88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a8c:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8002aa4 <executecommand+0x36c>
 8002a90:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002a94:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8002ab8 <executecommand+0x380>
 8002a98:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002a9c:	e016      	b.n	8002acc <executecommand+0x394>
 8002a9e:	bf00      	nop
 8002aa0:	000041a0 	.word	0x000041a0
 8002aa4:	42400000 	.word	0x42400000
 8002aa8:	42c80000 	.word	0x42c80000
 8002aac:	000040cc 	.word	0x000040cc
 8002ab0:	000040d8 	.word	0x000040d8
 8002ab4:	0000409c 	.word	0x0000409c
 8002ab8:	447a0000 	.word	0x447a0000
 8002abc:	000040e4 	.word	0x000040e4
 8002ac0:	0000412c 	.word	0x0000412c
 8002ac4:	00004138 	.word	0x00004138
 8002ac8:	000040a8 	.word	0x000040a8
 8002acc:	4bd3      	ldr	r3, [pc, #844]	@ (8002e1c <executecommand+0x6e4>)
 8002ace:	789b      	ldrb	r3, [r3, #2]
 8002ad0:	ee07 3a90 	vmov	s15, r3
 8002ad4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ad8:	eddf 6ad1 	vldr	s13, [pc, #836]	@ 8002e20 <executecommand+0x6e8>
 8002adc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002ae0:	eddf 6ad0 	vldr	s13, [pc, #832]	@ 8002e24 <executecommand+0x6ec>
 8002ae4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002ae8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002aec:	4bcb      	ldr	r3, [pc, #812]	@ (8002e1c <executecommand+0x6e4>)
 8002aee:	78db      	ldrb	r3, [r3, #3]
 8002af0:	ee07 3a90 	vmov	s15, r3
 8002af4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002af8:	eddf 6ac9 	vldr	s13, [pc, #804]	@ 8002e20 <executecommand+0x6e8>
 8002afc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002b00:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002b04:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002b08:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b0c:	4bc3      	ldr	r3, [pc, #780]	@ (8002e1c <executecommand+0x6e4>)
 8002b0e:	791b      	ldrb	r3, [r3, #4]
 8002b10:	ee07 3a90 	vmov	s15, r3
 8002b14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b18:	eddf 6ac1 	vldr	s13, [pc, #772]	@ 8002e20 <executecommand+0x6e8>
 8002b1c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002b20:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b24:	4bbd      	ldr	r3, [pc, #756]	@ (8002e1c <executecommand+0x6e4>)
 8002b26:	795b      	ldrb	r3, [r3, #5]
 8002b28:	ee07 3a90 	vmov	s15, r3
 8002b2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b30:	eddf 6abb 	vldr	s13, [pc, #748]	@ 8002e20 <executecommand+0x6e8>
 8002b34:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002b38:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8002b3c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002b40:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b44:	4bb8      	ldr	r3, [pc, #736]	@ (8002e28 <executecommand+0x6f0>)
 8002b46:	edc3 7a00 	vstr	s15, [r3]
	}
	if(command[0] == 'F')
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	781b      	ldrb	r3, [r3, #0]
 8002b4e:	2b46      	cmp	r3, #70	@ 0x46
 8002b50:	d150      	bne.n	8002bf4 <executecommand+0x4bc>
	{
		FDP_D_Gain_AR = ((((float)UASRT_PID_VAL[1])-48)*1000) + ((((float)UASRT_PID_VAL[2])-48)*100) + ((((float)UASRT_PID_VAL[3])-48)*10) + ((((float)UASRT_PID_VAL[4])-48)) + ((((float)UASRT_PID_VAL[5])-48)/10);
 8002b52:	4bb2      	ldr	r3, [pc, #712]	@ (8002e1c <executecommand+0x6e4>)
 8002b54:	785b      	ldrb	r3, [r3, #1]
 8002b56:	ee07 3a90 	vmov	s15, r3
 8002b5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b5e:	ed9f 7ab0 	vldr	s14, [pc, #704]	@ 8002e20 <executecommand+0x6e8>
 8002b62:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002b66:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 8002e2c <executecommand+0x6f4>
 8002b6a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002b6e:	4bab      	ldr	r3, [pc, #684]	@ (8002e1c <executecommand+0x6e4>)
 8002b70:	789b      	ldrb	r3, [r3, #2]
 8002b72:	ee07 3a90 	vmov	s15, r3
 8002b76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b7a:	eddf 6aa9 	vldr	s13, [pc, #676]	@ 8002e20 <executecommand+0x6e8>
 8002b7e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002b82:	eddf 6aa8 	vldr	s13, [pc, #672]	@ 8002e24 <executecommand+0x6ec>
 8002b86:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002b8a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b8e:	4ba3      	ldr	r3, [pc, #652]	@ (8002e1c <executecommand+0x6e4>)
 8002b90:	78db      	ldrb	r3, [r3, #3]
 8002b92:	ee07 3a90 	vmov	s15, r3
 8002b96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b9a:	eddf 6aa1 	vldr	s13, [pc, #644]	@ 8002e20 <executecommand+0x6e8>
 8002b9e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002ba2:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002ba6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002baa:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002bae:	4b9b      	ldr	r3, [pc, #620]	@ (8002e1c <executecommand+0x6e4>)
 8002bb0:	791b      	ldrb	r3, [r3, #4]
 8002bb2:	ee07 3a90 	vmov	s15, r3
 8002bb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002bba:	eddf 6a99 	vldr	s13, [pc, #612]	@ 8002e20 <executecommand+0x6e8>
 8002bbe:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002bc2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002bc6:	4b95      	ldr	r3, [pc, #596]	@ (8002e1c <executecommand+0x6e4>)
 8002bc8:	795b      	ldrb	r3, [r3, #5]
 8002bca:	ee07 3a90 	vmov	s15, r3
 8002bce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002bd2:	eddf 6a93 	vldr	s13, [pc, #588]	@ 8002e20 <executecommand+0x6e8>
 8002bd6:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002bda:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8002bde:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002be2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002be6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002bea:	ee17 3a90 	vmov	r3, s15
 8002bee:	b21a      	sxth	r2, r3
 8002bf0:	4b8f      	ldr	r3, [pc, #572]	@ (8002e30 <executecommand+0x6f8>)
 8002bf2:	801a      	strh	r2, [r3, #0]
	}
	if(command[0] == 'f')
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	781b      	ldrb	r3, [r3, #0]
 8002bf8:	2b66      	cmp	r3, #102	@ 0x66
 8002bfa:	d150      	bne.n	8002c9e <executecommand+0x566>
	{
		FDP_D_Gain = ((((float)UASRT_PID_VAL[1])-48)*1000) + ((((float)UASRT_PID_VAL[2])-48)*100) + ((((float)UASRT_PID_VAL[3])-48)*10) + ((((float)UASRT_PID_VAL[4])-48)) + ((((float)UASRT_PID_VAL[5])-48)/10);
 8002bfc:	4b87      	ldr	r3, [pc, #540]	@ (8002e1c <executecommand+0x6e4>)
 8002bfe:	785b      	ldrb	r3, [r3, #1]
 8002c00:	ee07 3a90 	vmov	s15, r3
 8002c04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c08:	ed9f 7a85 	vldr	s14, [pc, #532]	@ 8002e20 <executecommand+0x6e8>
 8002c0c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002c10:	ed9f 7a86 	vldr	s14, [pc, #536]	@ 8002e2c <executecommand+0x6f4>
 8002c14:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002c18:	4b80      	ldr	r3, [pc, #512]	@ (8002e1c <executecommand+0x6e4>)
 8002c1a:	789b      	ldrb	r3, [r3, #2]
 8002c1c:	ee07 3a90 	vmov	s15, r3
 8002c20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c24:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 8002e20 <executecommand+0x6e8>
 8002c28:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002c2c:	eddf 6a7d 	vldr	s13, [pc, #500]	@ 8002e24 <executecommand+0x6ec>
 8002c30:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002c34:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c38:	4b78      	ldr	r3, [pc, #480]	@ (8002e1c <executecommand+0x6e4>)
 8002c3a:	78db      	ldrb	r3, [r3, #3]
 8002c3c:	ee07 3a90 	vmov	s15, r3
 8002c40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c44:	eddf 6a76 	vldr	s13, [pc, #472]	@ 8002e20 <executecommand+0x6e8>
 8002c48:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002c4c:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002c50:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002c54:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c58:	4b70      	ldr	r3, [pc, #448]	@ (8002e1c <executecommand+0x6e4>)
 8002c5a:	791b      	ldrb	r3, [r3, #4]
 8002c5c:	ee07 3a90 	vmov	s15, r3
 8002c60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c64:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8002e20 <executecommand+0x6e8>
 8002c68:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002c6c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c70:	4b6a      	ldr	r3, [pc, #424]	@ (8002e1c <executecommand+0x6e4>)
 8002c72:	795b      	ldrb	r3, [r3, #5]
 8002c74:	ee07 3a90 	vmov	s15, r3
 8002c78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c7c:	eddf 6a68 	vldr	s13, [pc, #416]	@ 8002e20 <executecommand+0x6e8>
 8002c80:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002c84:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8002c88:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002c8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c90:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002c94:	ee17 3a90 	vmov	r3, s15
 8002c98:	b21a      	sxth	r2, r3
 8002c9a:	4b66      	ldr	r3, [pc, #408]	@ (8002e34 <executecommand+0x6fc>)
 8002c9c:	801a      	strh	r2, [r3, #0]




//rool
	if(command[0] == 'a')
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	781b      	ldrb	r3, [r3, #0]
 8002ca2:	2b61      	cmp	r3, #97	@ 0x61
 8002ca4:	d14c      	bne.n	8002d40 <executecommand+0x608>
		{
			p_roolfactor = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 8002ca6:	4b5d      	ldr	r3, [pc, #372]	@ (8002e1c <executecommand+0x6e4>)
 8002ca8:	785b      	ldrb	r3, [r3, #1]
 8002caa:	ee07 3a90 	vmov	s15, r3
 8002cae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002cb2:	ed9f 7a5b 	vldr	s14, [pc, #364]	@ 8002e20 <executecommand+0x6e8>
 8002cb6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002cba:	ed9f 7a5a 	vldr	s14, [pc, #360]	@ 8002e24 <executecommand+0x6ec>
 8002cbe:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002cc2:	4b56      	ldr	r3, [pc, #344]	@ (8002e1c <executecommand+0x6e4>)
 8002cc4:	789b      	ldrb	r3, [r3, #2]
 8002cc6:	ee07 3a90 	vmov	s15, r3
 8002cca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002cce:	eddf 6a54 	vldr	s13, [pc, #336]	@ 8002e20 <executecommand+0x6e8>
 8002cd2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002cd6:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002cda:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002cde:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ce2:	4b4e      	ldr	r3, [pc, #312]	@ (8002e1c <executecommand+0x6e4>)
 8002ce4:	78db      	ldrb	r3, [r3, #3]
 8002ce6:	ee07 3a90 	vmov	s15, r3
 8002cea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002cee:	eddf 6a4c 	vldr	s13, [pc, #304]	@ 8002e20 <executecommand+0x6e8>
 8002cf2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002cf6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002cfa:	4b48      	ldr	r3, [pc, #288]	@ (8002e1c <executecommand+0x6e4>)
 8002cfc:	791b      	ldrb	r3, [r3, #4]
 8002cfe:	ee07 3a90 	vmov	s15, r3
 8002d02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d06:	eddf 6a46 	vldr	s13, [pc, #280]	@ 8002e20 <executecommand+0x6e8>
 8002d0a:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002d0e:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8002d12:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002d16:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d1a:	4b40      	ldr	r3, [pc, #256]	@ (8002e1c <executecommand+0x6e4>)
 8002d1c:	795b      	ldrb	r3, [r3, #5]
 8002d1e:	ee07 3a90 	vmov	s15, r3
 8002d22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d26:	eddf 6a3e 	vldr	s13, [pc, #248]	@ 8002e20 <executecommand+0x6e8>
 8002d2a:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002d2e:	ed9f 6a3d 	vldr	s12, [pc, #244]	@ 8002e24 <executecommand+0x6ec>
 8002d32:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002d36:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d3a:	4b3f      	ldr	r3, [pc, #252]	@ (8002e38 <executecommand+0x700>)
 8002d3c:	edc3 7a00 	vstr	s15, [r3]
		}

		if(command[0] == 'b')
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	781b      	ldrb	r3, [r3, #0]
 8002d44:	2b62      	cmp	r3, #98	@ 0x62
 8002d46:	d14f      	bne.n	8002de8 <executecommand+0x6b0>
		{
			i_roolfactor = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 8002d48:	4b34      	ldr	r3, [pc, #208]	@ (8002e1c <executecommand+0x6e4>)
 8002d4a:	785b      	ldrb	r3, [r3, #1]
 8002d4c:	ee07 3a90 	vmov	s15, r3
 8002d50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d54:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8002e20 <executecommand+0x6e8>
 8002d58:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002d5c:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8002e24 <executecommand+0x6ec>
 8002d60:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002d64:	4b2d      	ldr	r3, [pc, #180]	@ (8002e1c <executecommand+0x6e4>)
 8002d66:	789b      	ldrb	r3, [r3, #2]
 8002d68:	ee07 3a90 	vmov	s15, r3
 8002d6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d70:	eddf 6a2b 	vldr	s13, [pc, #172]	@ 8002e20 <executecommand+0x6e8>
 8002d74:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002d78:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002d7c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002d80:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d84:	4b25      	ldr	r3, [pc, #148]	@ (8002e1c <executecommand+0x6e4>)
 8002d86:	78db      	ldrb	r3, [r3, #3]
 8002d88:	ee07 3a90 	vmov	s15, r3
 8002d8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d90:	eddf 6a23 	vldr	s13, [pc, #140]	@ 8002e20 <executecommand+0x6e8>
 8002d94:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002d98:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d9c:	4b1f      	ldr	r3, [pc, #124]	@ (8002e1c <executecommand+0x6e4>)
 8002d9e:	791b      	ldrb	r3, [r3, #4]
 8002da0:	ee07 3a90 	vmov	s15, r3
 8002da4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002da8:	eddf 6a1d 	vldr	s13, [pc, #116]	@ 8002e20 <executecommand+0x6e8>
 8002dac:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002db0:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8002db4:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002db8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002dbc:	4b17      	ldr	r3, [pc, #92]	@ (8002e1c <executecommand+0x6e4>)
 8002dbe:	795b      	ldrb	r3, [r3, #5]
 8002dc0:	ee07 3a90 	vmov	s15, r3
 8002dc4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002dc8:	eddf 6a15 	vldr	s13, [pc, #84]	@ 8002e20 <executecommand+0x6e8>
 8002dcc:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002dd0:	ed9f 6a14 	vldr	s12, [pc, #80]	@ 8002e24 <executecommand+0x6ec>
 8002dd4:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002dd8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ddc:	4b17      	ldr	r3, [pc, #92]	@ (8002e3c <executecommand+0x704>)
 8002dde:	edc3 7a00 	vstr	s15, [r3]
			error_sum_rool = 0;
 8002de2:	4b17      	ldr	r3, [pc, #92]	@ (8002e40 <executecommand+0x708>)
 8002de4:	2200      	movs	r2, #0
 8002de6:	601a      	str	r2, [r3, #0]
		}

		if(command[0] == 'c')
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	781b      	ldrb	r3, [r3, #0]
 8002dec:	2b63      	cmp	r3, #99	@ 0x63
 8002dee:	d166      	bne.n	8002ebe <executecommand+0x786>
		{
			d_roolfactor = ((((float)UASRT_PID_VAL[1])-48)*1000) + ((((float)UASRT_PID_VAL[2])-48)*100) + ((((float)UASRT_PID_VAL[3])-48)*10) + ((((float)UASRT_PID_VAL[4])-48)) + ((((float)UASRT_PID_VAL[5])-48)/10);
 8002df0:	4b0a      	ldr	r3, [pc, #40]	@ (8002e1c <executecommand+0x6e4>)
 8002df2:	785b      	ldrb	r3, [r3, #1]
 8002df4:	ee07 3a90 	vmov	s15, r3
 8002df8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002dfc:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8002e20 <executecommand+0x6e8>
 8002e00:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002e04:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8002e2c <executecommand+0x6f4>
 8002e08:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002e0c:	4b03      	ldr	r3, [pc, #12]	@ (8002e1c <executecommand+0x6e4>)
 8002e0e:	789b      	ldrb	r3, [r3, #2]
 8002e10:	ee07 3a90 	vmov	s15, r3
 8002e14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e18:	e018      	b.n	8002e4c <executecommand+0x714>
 8002e1a:	bf00      	nop
 8002e1c:	000041a0 	.word	0x000041a0
 8002e20:	42400000 	.word	0x42400000
 8002e24:	42c80000 	.word	0x42c80000
 8002e28:	00004144 	.word	0x00004144
 8002e2c:	447a0000 	.word	0x447a0000
 8002e30:	00004074 	.word	0x00004074
 8002e34:	00004076 	.word	0x00004076
 8002e38:	000040d0 	.word	0x000040d0
 8002e3c:	000040dc 	.word	0x000040dc
 8002e40:	000040a0 	.word	0x000040a0
 8002e44:	42400000 	.word	0x42400000
 8002e48:	42c80000 	.word	0x42c80000
 8002e4c:	ed5f 6a03 	vldr	s13, [pc, #-12]	@ 8002e44 <executecommand+0x70c>
 8002e50:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002e54:	ed5f 6a04 	vldr	s13, [pc, #-16]	@ 8002e48 <executecommand+0x710>
 8002e58:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002e5c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e60:	4bd5      	ldr	r3, [pc, #852]	@ (80031b8 <executecommand+0xa80>)
 8002e62:	78db      	ldrb	r3, [r3, #3]
 8002e64:	ee07 3a90 	vmov	s15, r3
 8002e68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e6c:	eddf 6ad3 	vldr	s13, [pc, #844]	@ 80031bc <executecommand+0xa84>
 8002e70:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002e74:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002e78:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002e7c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e80:	4bcd      	ldr	r3, [pc, #820]	@ (80031b8 <executecommand+0xa80>)
 8002e82:	791b      	ldrb	r3, [r3, #4]
 8002e84:	ee07 3a90 	vmov	s15, r3
 8002e88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e8c:	eddf 6acb 	vldr	s13, [pc, #812]	@ 80031bc <executecommand+0xa84>
 8002e90:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002e94:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e98:	4bc7      	ldr	r3, [pc, #796]	@ (80031b8 <executecommand+0xa80>)
 8002e9a:	795b      	ldrb	r3, [r3, #5]
 8002e9c:	ee07 3a90 	vmov	s15, r3
 8002ea0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ea4:	eddf 6ac5 	vldr	s13, [pc, #788]	@ 80031bc <executecommand+0xa84>
 8002ea8:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002eac:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8002eb0:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002eb4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002eb8:	4bc1      	ldr	r3, [pc, #772]	@ (80031c0 <executecommand+0xa88>)
 8002eba:	edc3 7a00 	vstr	s15, [r3]
		}
		if(command[0] == 'e')
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	781b      	ldrb	r3, [r3, #0]
 8002ec2:	2b65      	cmp	r3, #101	@ 0x65
 8002ec4:	d14c      	bne.n	8002f60 <executecommand+0x828>
		{
			p_angular_rate_roolfactor = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 8002ec6:	4bbc      	ldr	r3, [pc, #752]	@ (80031b8 <executecommand+0xa80>)
 8002ec8:	785b      	ldrb	r3, [r3, #1]
 8002eca:	ee07 3a90 	vmov	s15, r3
 8002ece:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ed2:	ed9f 7aba 	vldr	s14, [pc, #744]	@ 80031bc <executecommand+0xa84>
 8002ed6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002eda:	ed9f 7aba 	vldr	s14, [pc, #744]	@ 80031c4 <executecommand+0xa8c>
 8002ede:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002ee2:	4bb5      	ldr	r3, [pc, #724]	@ (80031b8 <executecommand+0xa80>)
 8002ee4:	789b      	ldrb	r3, [r3, #2]
 8002ee6:	ee07 3a90 	vmov	s15, r3
 8002eea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002eee:	eddf 6ab3 	vldr	s13, [pc, #716]	@ 80031bc <executecommand+0xa84>
 8002ef2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002ef6:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002efa:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002efe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f02:	4bad      	ldr	r3, [pc, #692]	@ (80031b8 <executecommand+0xa80>)
 8002f04:	78db      	ldrb	r3, [r3, #3]
 8002f06:	ee07 3a90 	vmov	s15, r3
 8002f0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f0e:	eddf 6aab 	vldr	s13, [pc, #684]	@ 80031bc <executecommand+0xa84>
 8002f12:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002f16:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f1a:	4ba7      	ldr	r3, [pc, #668]	@ (80031b8 <executecommand+0xa80>)
 8002f1c:	791b      	ldrb	r3, [r3, #4]
 8002f1e:	ee07 3a90 	vmov	s15, r3
 8002f22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f26:	eddf 6aa5 	vldr	s13, [pc, #660]	@ 80031bc <executecommand+0xa84>
 8002f2a:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002f2e:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8002f32:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002f36:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f3a:	4b9f      	ldr	r3, [pc, #636]	@ (80031b8 <executecommand+0xa80>)
 8002f3c:	795b      	ldrb	r3, [r3, #5]
 8002f3e:	ee07 3a90 	vmov	s15, r3
 8002f42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f46:	eddf 6a9d 	vldr	s13, [pc, #628]	@ 80031bc <executecommand+0xa84>
 8002f4a:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002f4e:	ed9f 6a9d 	vldr	s12, [pc, #628]	@ 80031c4 <executecommand+0xa8c>
 8002f52:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002f56:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f5a:	4b9b      	ldr	r3, [pc, #620]	@ (80031c8 <executecommand+0xa90>)
 8002f5c:	edc3 7a00 	vstr	s15, [r3]
		}

		if(command[0] == 'g')
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	781b      	ldrb	r3, [r3, #0]
 8002f64:	2b67      	cmp	r3, #103	@ 0x67
 8002f66:	d14f      	bne.n	8003008 <executecommand+0x8d0>
		{
			i_angular_rate_roolfactor = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 8002f68:	4b93      	ldr	r3, [pc, #588]	@ (80031b8 <executecommand+0xa80>)
 8002f6a:	785b      	ldrb	r3, [r3, #1]
 8002f6c:	ee07 3a90 	vmov	s15, r3
 8002f70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f74:	ed9f 7a91 	vldr	s14, [pc, #580]	@ 80031bc <executecommand+0xa84>
 8002f78:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002f7c:	ed9f 7a91 	vldr	s14, [pc, #580]	@ 80031c4 <executecommand+0xa8c>
 8002f80:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002f84:	4b8c      	ldr	r3, [pc, #560]	@ (80031b8 <executecommand+0xa80>)
 8002f86:	789b      	ldrb	r3, [r3, #2]
 8002f88:	ee07 3a90 	vmov	s15, r3
 8002f8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f90:	eddf 6a8a 	vldr	s13, [pc, #552]	@ 80031bc <executecommand+0xa84>
 8002f94:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002f98:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002f9c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002fa0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002fa4:	4b84      	ldr	r3, [pc, #528]	@ (80031b8 <executecommand+0xa80>)
 8002fa6:	78db      	ldrb	r3, [r3, #3]
 8002fa8:	ee07 3a90 	vmov	s15, r3
 8002fac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fb0:	eddf 6a82 	vldr	s13, [pc, #520]	@ 80031bc <executecommand+0xa84>
 8002fb4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002fb8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002fbc:	4b7e      	ldr	r3, [pc, #504]	@ (80031b8 <executecommand+0xa80>)
 8002fbe:	791b      	ldrb	r3, [r3, #4]
 8002fc0:	ee07 3a90 	vmov	s15, r3
 8002fc4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fc8:	eddf 6a7c 	vldr	s13, [pc, #496]	@ 80031bc <executecommand+0xa84>
 8002fcc:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002fd0:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8002fd4:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002fd8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002fdc:	4b76      	ldr	r3, [pc, #472]	@ (80031b8 <executecommand+0xa80>)
 8002fde:	795b      	ldrb	r3, [r3, #5]
 8002fe0:	ee07 3a90 	vmov	s15, r3
 8002fe4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fe8:	eddf 6a74 	vldr	s13, [pc, #464]	@ 80031bc <executecommand+0xa84>
 8002fec:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002ff0:	ed9f 6a74 	vldr	s12, [pc, #464]	@ 80031c4 <executecommand+0xa8c>
 8002ff4:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002ff8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ffc:	4b73      	ldr	r3, [pc, #460]	@ (80031cc <executecommand+0xa94>)
 8002ffe:	edc3 7a00 	vstr	s15, [r3]
			error_sum_angular_rate_rool = 0;
 8003002:	4b73      	ldr	r3, [pc, #460]	@ (80031d0 <executecommand+0xa98>)
 8003004:	2200      	movs	r2, #0
 8003006:	601a      	str	r2, [r3, #0]
		}

		if(command[0] == 'h')
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	781b      	ldrb	r3, [r3, #0]
 800300c:	2b68      	cmp	r3, #104	@ 0x68
 800300e:	d14c      	bne.n	80030aa <executecommand+0x972>
		{
			d_angular_rate_roolfactor = ((((float)UASRT_PID_VAL[1])-48)*1000) + ((((float)UASRT_PID_VAL[2])-48)*100) + ((((float)UASRT_PID_VAL[3])-48)*10) + ((((float)UASRT_PID_VAL[4])-48)) + ((((float)UASRT_PID_VAL[5])-48)/10);
 8003010:	4b69      	ldr	r3, [pc, #420]	@ (80031b8 <executecommand+0xa80>)
 8003012:	785b      	ldrb	r3, [r3, #1]
 8003014:	ee07 3a90 	vmov	s15, r3
 8003018:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800301c:	ed9f 7a67 	vldr	s14, [pc, #412]	@ 80031bc <executecommand+0xa84>
 8003020:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003024:	ed9f 7a6b 	vldr	s14, [pc, #428]	@ 80031d4 <executecommand+0xa9c>
 8003028:	ee27 7a87 	vmul.f32	s14, s15, s14
 800302c:	4b62      	ldr	r3, [pc, #392]	@ (80031b8 <executecommand+0xa80>)
 800302e:	789b      	ldrb	r3, [r3, #2]
 8003030:	ee07 3a90 	vmov	s15, r3
 8003034:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003038:	eddf 6a60 	vldr	s13, [pc, #384]	@ 80031bc <executecommand+0xa84>
 800303c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003040:	eddf 6a60 	vldr	s13, [pc, #384]	@ 80031c4 <executecommand+0xa8c>
 8003044:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003048:	ee37 7a27 	vadd.f32	s14, s14, s15
 800304c:	4b5a      	ldr	r3, [pc, #360]	@ (80031b8 <executecommand+0xa80>)
 800304e:	78db      	ldrb	r3, [r3, #3]
 8003050:	ee07 3a90 	vmov	s15, r3
 8003054:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003058:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80031bc <executecommand+0xa84>
 800305c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003060:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8003064:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003068:	ee37 7a27 	vadd.f32	s14, s14, s15
 800306c:	4b52      	ldr	r3, [pc, #328]	@ (80031b8 <executecommand+0xa80>)
 800306e:	791b      	ldrb	r3, [r3, #4]
 8003070:	ee07 3a90 	vmov	s15, r3
 8003074:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003078:	eddf 6a50 	vldr	s13, [pc, #320]	@ 80031bc <executecommand+0xa84>
 800307c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003080:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003084:	4b4c      	ldr	r3, [pc, #304]	@ (80031b8 <executecommand+0xa80>)
 8003086:	795b      	ldrb	r3, [r3, #5]
 8003088:	ee07 3a90 	vmov	s15, r3
 800308c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003090:	eddf 6a4a 	vldr	s13, [pc, #296]	@ 80031bc <executecommand+0xa84>
 8003094:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8003098:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 800309c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80030a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030a4:	4b4c      	ldr	r3, [pc, #304]	@ (80031d8 <executecommand+0xaa0>)
 80030a6:	edc3 7a00 	vstr	s15, [r3]





		if(command[0] == 'j')
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	781b      	ldrb	r3, [r3, #0]
 80030ae:	2b6a      	cmp	r3, #106	@ 0x6a
 80030b0:	d14c      	bne.n	800314c <executecommand+0xa14>
			{
				p_yawfactor = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 80030b2:	4b41      	ldr	r3, [pc, #260]	@ (80031b8 <executecommand+0xa80>)
 80030b4:	785b      	ldrb	r3, [r3, #1]
 80030b6:	ee07 3a90 	vmov	s15, r3
 80030ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030be:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 80031bc <executecommand+0xa84>
 80030c2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80030c6:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 80031c4 <executecommand+0xa8c>
 80030ca:	ee27 7a87 	vmul.f32	s14, s15, s14
 80030ce:	4b3a      	ldr	r3, [pc, #232]	@ (80031b8 <executecommand+0xa80>)
 80030d0:	789b      	ldrb	r3, [r3, #2]
 80030d2:	ee07 3a90 	vmov	s15, r3
 80030d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030da:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80031bc <executecommand+0xa84>
 80030de:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80030e2:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 80030e6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80030ea:	ee37 7a27 	vadd.f32	s14, s14, s15
 80030ee:	4b32      	ldr	r3, [pc, #200]	@ (80031b8 <executecommand+0xa80>)
 80030f0:	78db      	ldrb	r3, [r3, #3]
 80030f2:	ee07 3a90 	vmov	s15, r3
 80030f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030fa:	eddf 6a30 	vldr	s13, [pc, #192]	@ 80031bc <executecommand+0xa84>
 80030fe:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003102:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003106:	4b2c      	ldr	r3, [pc, #176]	@ (80031b8 <executecommand+0xa80>)
 8003108:	791b      	ldrb	r3, [r3, #4]
 800310a:	ee07 3a90 	vmov	s15, r3
 800310e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003112:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 80031bc <executecommand+0xa84>
 8003116:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800311a:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 800311e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003122:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003126:	4b24      	ldr	r3, [pc, #144]	@ (80031b8 <executecommand+0xa80>)
 8003128:	795b      	ldrb	r3, [r3, #5]
 800312a:	ee07 3a90 	vmov	s15, r3
 800312e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003132:	eddf 6a22 	vldr	s13, [pc, #136]	@ 80031bc <executecommand+0xa84>
 8003136:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800313a:	ed9f 6a22 	vldr	s12, [pc, #136]	@ 80031c4 <executecommand+0xa8c>
 800313e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003142:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003146:	4b25      	ldr	r3, [pc, #148]	@ (80031dc <executecommand+0xaa4>)
 8003148:	edc3 7a00 	vstr	s15, [r3]
			}

			if(command[0] == 'k')
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	781b      	ldrb	r3, [r3, #0]
 8003150:	2b6b      	cmp	r3, #107	@ 0x6b
 8003152:	d167      	bne.n	8003224 <executecommand+0xaec>
			{
				i_yawfactor = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 8003154:	4b18      	ldr	r3, [pc, #96]	@ (80031b8 <executecommand+0xa80>)
 8003156:	785b      	ldrb	r3, [r3, #1]
 8003158:	ee07 3a90 	vmov	s15, r3
 800315c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003160:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 80031bc <executecommand+0xa84>
 8003164:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003168:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 80031c4 <executecommand+0xa8c>
 800316c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003170:	4b11      	ldr	r3, [pc, #68]	@ (80031b8 <executecommand+0xa80>)
 8003172:	789b      	ldrb	r3, [r3, #2]
 8003174:	ee07 3a90 	vmov	s15, r3
 8003178:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800317c:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 80031bc <executecommand+0xa84>
 8003180:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003184:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8003188:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800318c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003190:	4b09      	ldr	r3, [pc, #36]	@ (80031b8 <executecommand+0xa80>)
 8003192:	78db      	ldrb	r3, [r3, #3]
 8003194:	ee07 3a90 	vmov	s15, r3
 8003198:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800319c:	eddf 6a07 	vldr	s13, [pc, #28]	@ 80031bc <executecommand+0xa84>
 80031a0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80031a4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80031a8:	4b03      	ldr	r3, [pc, #12]	@ (80031b8 <executecommand+0xa80>)
 80031aa:	791b      	ldrb	r3, [r3, #4]
 80031ac:	ee07 3a90 	vmov	s15, r3
 80031b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031b4:	e016      	b.n	80031e4 <executecommand+0xaac>
 80031b6:	bf00      	nop
 80031b8:	000041a0 	.word	0x000041a0
 80031bc:	42400000 	.word	0x42400000
 80031c0:	000040e8 	.word	0x000040e8
 80031c4:	42c80000 	.word	0x42c80000
 80031c8:	00004130 	.word	0x00004130
 80031cc:	0000413c 	.word	0x0000413c
 80031d0:	000040ac 	.word	0x000040ac
 80031d4:	447a0000 	.word	0x447a0000
 80031d8:	00004148 	.word	0x00004148
 80031dc:	000040d4 	.word	0x000040d4
 80031e0:	42400000 	.word	0x42400000
 80031e4:	ed5f 6a02 	vldr	s13, [pc, #-8]	@ 80031e0 <executecommand+0xaa8>
 80031e8:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80031ec:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 80031f0:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80031f4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80031f8:	4bba      	ldr	r3, [pc, #744]	@ (80034e4 <executecommand+0xdac>)
 80031fa:	795b      	ldrb	r3, [r3, #5]
 80031fc:	ee07 3a90 	vmov	s15, r3
 8003200:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003204:	eddf 6ab8 	vldr	s13, [pc, #736]	@ 80034e8 <executecommand+0xdb0>
 8003208:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800320c:	ed9f 6ab7 	vldr	s12, [pc, #732]	@ 80034ec <executecommand+0xdb4>
 8003210:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003214:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003218:	4bb5      	ldr	r3, [pc, #724]	@ (80034f0 <executecommand+0xdb8>)
 800321a:	edc3 7a00 	vstr	s15, [r3]
				error_sum_yaw = 0;
 800321e:	4bb5      	ldr	r3, [pc, #724]	@ (80034f4 <executecommand+0xdbc>)
 8003220:	2200      	movs	r2, #0
 8003222:	601a      	str	r2, [r3, #0]
			}

			if(command[0] == 'l')
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	781b      	ldrb	r3, [r3, #0]
 8003228:	2b6c      	cmp	r3, #108	@ 0x6c
 800322a:	d14c      	bne.n	80032c6 <executecommand+0xb8e>
			{
				d_yawfactor = ((((float)UASRT_PID_VAL[1])-48)*1000) + ((((float)UASRT_PID_VAL[2])-48)*100) + ((((float)UASRT_PID_VAL[3])-48)*10) + ((((float)UASRT_PID_VAL[4])-48)) + ((((float)UASRT_PID_VAL[5])-48)/10);
 800322c:	4bad      	ldr	r3, [pc, #692]	@ (80034e4 <executecommand+0xdac>)
 800322e:	785b      	ldrb	r3, [r3, #1]
 8003230:	ee07 3a90 	vmov	s15, r3
 8003234:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003238:	ed9f 7aab 	vldr	s14, [pc, #684]	@ 80034e8 <executecommand+0xdb0>
 800323c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003240:	ed9f 7aad 	vldr	s14, [pc, #692]	@ 80034f8 <executecommand+0xdc0>
 8003244:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003248:	4ba6      	ldr	r3, [pc, #664]	@ (80034e4 <executecommand+0xdac>)
 800324a:	789b      	ldrb	r3, [r3, #2]
 800324c:	ee07 3a90 	vmov	s15, r3
 8003250:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003254:	eddf 6aa4 	vldr	s13, [pc, #656]	@ 80034e8 <executecommand+0xdb0>
 8003258:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800325c:	eddf 6aa3 	vldr	s13, [pc, #652]	@ 80034ec <executecommand+0xdb4>
 8003260:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003264:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003268:	4b9e      	ldr	r3, [pc, #632]	@ (80034e4 <executecommand+0xdac>)
 800326a:	78db      	ldrb	r3, [r3, #3]
 800326c:	ee07 3a90 	vmov	s15, r3
 8003270:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003274:	eddf 6a9c 	vldr	s13, [pc, #624]	@ 80034e8 <executecommand+0xdb0>
 8003278:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800327c:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8003280:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003284:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003288:	4b96      	ldr	r3, [pc, #600]	@ (80034e4 <executecommand+0xdac>)
 800328a:	791b      	ldrb	r3, [r3, #4]
 800328c:	ee07 3a90 	vmov	s15, r3
 8003290:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003294:	eddf 6a94 	vldr	s13, [pc, #592]	@ 80034e8 <executecommand+0xdb0>
 8003298:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800329c:	ee37 7a27 	vadd.f32	s14, s14, s15
 80032a0:	4b90      	ldr	r3, [pc, #576]	@ (80034e4 <executecommand+0xdac>)
 80032a2:	795b      	ldrb	r3, [r3, #5]
 80032a4:	ee07 3a90 	vmov	s15, r3
 80032a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032ac:	eddf 6a8e 	vldr	s13, [pc, #568]	@ 80034e8 <executecommand+0xdb0>
 80032b0:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80032b4:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 80032b8:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80032bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032c0:	4b8e      	ldr	r3, [pc, #568]	@ (80034fc <executecommand+0xdc4>)
 80032c2:	edc3 7a00 	vstr	s15, [r3]
			}
			if(command[0] == 'm')
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	781b      	ldrb	r3, [r3, #0]
 80032ca:	2b6d      	cmp	r3, #109	@ 0x6d
 80032cc:	d14c      	bne.n	8003368 <executecommand+0xc30>
			{
				p_angular_rate_yawfactor = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 80032ce:	4b85      	ldr	r3, [pc, #532]	@ (80034e4 <executecommand+0xdac>)
 80032d0:	785b      	ldrb	r3, [r3, #1]
 80032d2:	ee07 3a90 	vmov	s15, r3
 80032d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032da:	ed9f 7a83 	vldr	s14, [pc, #524]	@ 80034e8 <executecommand+0xdb0>
 80032de:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80032e2:	ed9f 7a82 	vldr	s14, [pc, #520]	@ 80034ec <executecommand+0xdb4>
 80032e6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80032ea:	4b7e      	ldr	r3, [pc, #504]	@ (80034e4 <executecommand+0xdac>)
 80032ec:	789b      	ldrb	r3, [r3, #2]
 80032ee:	ee07 3a90 	vmov	s15, r3
 80032f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032f6:	eddf 6a7c 	vldr	s13, [pc, #496]	@ 80034e8 <executecommand+0xdb0>
 80032fa:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80032fe:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8003302:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003306:	ee37 7a27 	vadd.f32	s14, s14, s15
 800330a:	4b76      	ldr	r3, [pc, #472]	@ (80034e4 <executecommand+0xdac>)
 800330c:	78db      	ldrb	r3, [r3, #3]
 800330e:	ee07 3a90 	vmov	s15, r3
 8003312:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003316:	eddf 6a74 	vldr	s13, [pc, #464]	@ 80034e8 <executecommand+0xdb0>
 800331a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800331e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003322:	4b70      	ldr	r3, [pc, #448]	@ (80034e4 <executecommand+0xdac>)
 8003324:	791b      	ldrb	r3, [r3, #4]
 8003326:	ee07 3a90 	vmov	s15, r3
 800332a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800332e:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 80034e8 <executecommand+0xdb0>
 8003332:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8003336:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 800333a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800333e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003342:	4b68      	ldr	r3, [pc, #416]	@ (80034e4 <executecommand+0xdac>)
 8003344:	795b      	ldrb	r3, [r3, #5]
 8003346:	ee07 3a90 	vmov	s15, r3
 800334a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800334e:	eddf 6a66 	vldr	s13, [pc, #408]	@ 80034e8 <executecommand+0xdb0>
 8003352:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8003356:	ed9f 6a65 	vldr	s12, [pc, #404]	@ 80034ec <executecommand+0xdb4>
 800335a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800335e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003362:	4b67      	ldr	r3, [pc, #412]	@ (8003500 <executecommand+0xdc8>)
 8003364:	edc3 7a00 	vstr	s15, [r3]
			}

			if(command[0] == 'n')
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	781b      	ldrb	r3, [r3, #0]
 800336c:	2b6e      	cmp	r3, #110	@ 0x6e
 800336e:	d14f      	bne.n	8003410 <executecommand+0xcd8>
			{
				i_angular_rate_yawfactor = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 8003370:	4b5c      	ldr	r3, [pc, #368]	@ (80034e4 <executecommand+0xdac>)
 8003372:	785b      	ldrb	r3, [r3, #1]
 8003374:	ee07 3a90 	vmov	s15, r3
 8003378:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800337c:	ed9f 7a5a 	vldr	s14, [pc, #360]	@ 80034e8 <executecommand+0xdb0>
 8003380:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003384:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 80034ec <executecommand+0xdb4>
 8003388:	ee27 7a87 	vmul.f32	s14, s15, s14
 800338c:	4b55      	ldr	r3, [pc, #340]	@ (80034e4 <executecommand+0xdac>)
 800338e:	789b      	ldrb	r3, [r3, #2]
 8003390:	ee07 3a90 	vmov	s15, r3
 8003394:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003398:	eddf 6a53 	vldr	s13, [pc, #332]	@ 80034e8 <executecommand+0xdb0>
 800339c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80033a0:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 80033a4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80033a8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80033ac:	4b4d      	ldr	r3, [pc, #308]	@ (80034e4 <executecommand+0xdac>)
 80033ae:	78db      	ldrb	r3, [r3, #3]
 80033b0:	ee07 3a90 	vmov	s15, r3
 80033b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033b8:	eddf 6a4b 	vldr	s13, [pc, #300]	@ 80034e8 <executecommand+0xdb0>
 80033bc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80033c0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80033c4:	4b47      	ldr	r3, [pc, #284]	@ (80034e4 <executecommand+0xdac>)
 80033c6:	791b      	ldrb	r3, [r3, #4]
 80033c8:	ee07 3a90 	vmov	s15, r3
 80033cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033d0:	eddf 6a45 	vldr	s13, [pc, #276]	@ 80034e8 <executecommand+0xdb0>
 80033d4:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80033d8:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 80033dc:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80033e0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80033e4:	4b3f      	ldr	r3, [pc, #252]	@ (80034e4 <executecommand+0xdac>)
 80033e6:	795b      	ldrb	r3, [r3, #5]
 80033e8:	ee07 3a90 	vmov	s15, r3
 80033ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033f0:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80034e8 <executecommand+0xdb0>
 80033f4:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80033f8:	ed9f 6a3c 	vldr	s12, [pc, #240]	@ 80034ec <executecommand+0xdb4>
 80033fc:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003400:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003404:	4b3f      	ldr	r3, [pc, #252]	@ (8003504 <executecommand+0xdcc>)
 8003406:	edc3 7a00 	vstr	s15, [r3]
				error_sum_angular_rate_yaw = 0;
 800340a:	4b3f      	ldr	r3, [pc, #252]	@ (8003508 <executecommand+0xdd0>)
 800340c:	2200      	movs	r2, #0
 800340e:	601a      	str	r2, [r3, #0]
			}

			if(command[0] == 'o')
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	781b      	ldrb	r3, [r3, #0]
 8003414:	2b6f      	cmp	r3, #111	@ 0x6f
 8003416:	d14c      	bne.n	80034b2 <executecommand+0xd7a>
			{
				d_angular_rate_yawfactor = ((((float)UASRT_PID_VAL[1])-48)*1000) + ((((float)UASRT_PID_VAL[2])-48)*100) + ((((float)UASRT_PID_VAL[3])-48)*10) + ((((float)UASRT_PID_VAL[4])-48)) + ((((float)UASRT_PID_VAL[5])-48)/10);
 8003418:	4b32      	ldr	r3, [pc, #200]	@ (80034e4 <executecommand+0xdac>)
 800341a:	785b      	ldrb	r3, [r3, #1]
 800341c:	ee07 3a90 	vmov	s15, r3
 8003420:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003424:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 80034e8 <executecommand+0xdb0>
 8003428:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800342c:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 80034f8 <executecommand+0xdc0>
 8003430:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003434:	4b2b      	ldr	r3, [pc, #172]	@ (80034e4 <executecommand+0xdac>)
 8003436:	789b      	ldrb	r3, [r3, #2]
 8003438:	ee07 3a90 	vmov	s15, r3
 800343c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003440:	eddf 6a29 	vldr	s13, [pc, #164]	@ 80034e8 <executecommand+0xdb0>
 8003444:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003448:	eddf 6a28 	vldr	s13, [pc, #160]	@ 80034ec <executecommand+0xdb4>
 800344c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003450:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003454:	4b23      	ldr	r3, [pc, #140]	@ (80034e4 <executecommand+0xdac>)
 8003456:	78db      	ldrb	r3, [r3, #3]
 8003458:	ee07 3a90 	vmov	s15, r3
 800345c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003460:	eddf 6a21 	vldr	s13, [pc, #132]	@ 80034e8 <executecommand+0xdb0>
 8003464:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003468:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 800346c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003470:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003474:	4b1b      	ldr	r3, [pc, #108]	@ (80034e4 <executecommand+0xdac>)
 8003476:	791b      	ldrb	r3, [r3, #4]
 8003478:	ee07 3a90 	vmov	s15, r3
 800347c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003480:	eddf 6a19 	vldr	s13, [pc, #100]	@ 80034e8 <executecommand+0xdb0>
 8003484:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003488:	ee37 7a27 	vadd.f32	s14, s14, s15
 800348c:	4b15      	ldr	r3, [pc, #84]	@ (80034e4 <executecommand+0xdac>)
 800348e:	795b      	ldrb	r3, [r3, #5]
 8003490:	ee07 3a90 	vmov	s15, r3
 8003494:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003498:	eddf 6a13 	vldr	s13, [pc, #76]	@ 80034e8 <executecommand+0xdb0>
 800349c:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80034a0:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 80034a4:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80034a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034ac:	4b17      	ldr	r3, [pc, #92]	@ (800350c <executecommand+0xdd4>)
 80034ae:	edc3 7a00 	vstr	s15, [r3]
			}

	if(command[0] == 'r'){
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	781b      	ldrb	r3, [r3, #0]
 80034b6:	2b72      	cmp	r3, #114	@ 0x72
 80034b8:	d101      	bne.n	80034be <executecommand+0xd86>
		NVIC_SystemReset();
 80034ba:	f7ff f8d9 	bl	8002670 <__NVIC_SystemReset>
	}

	for(int i = 0; i < 15; i++){
 80034be:	2300      	movs	r3, #0
 80034c0:	60fb      	str	r3, [r7, #12]
 80034c2:	e007      	b.n	80034d4 <executecommand+0xd9c>
		UASRT_PID_VAL[i] = 0;
 80034c4:	4a07      	ldr	r2, [pc, #28]	@ (80034e4 <executecommand+0xdac>)
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	4413      	add	r3, r2
 80034ca:	2200      	movs	r2, #0
 80034cc:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 15; i++){
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	3301      	adds	r3, #1
 80034d2:	60fb      	str	r3, [r7, #12]
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2b0e      	cmp	r3, #14
 80034d8:	ddf4      	ble.n	80034c4 <executecommand+0xd8c>
	}
//	for(int i = 0; i < 10; i++){
//		words[i] = 0;
//	}

}
 80034da:	bf00      	nop
 80034dc:	bf00      	nop
 80034de:	3710      	adds	r7, #16
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bd80      	pop	{r7, pc}
 80034e4:	000041a0 	.word	0x000041a0
 80034e8:	42400000 	.word	0x42400000
 80034ec:	42c80000 	.word	0x42c80000
 80034f0:	000040e0 	.word	0x000040e0
 80034f4:	000040a4 	.word	0x000040a4
 80034f8:	447a0000 	.word	0x447a0000
 80034fc:	000040ec 	.word	0x000040ec
 8003500:	00004134 	.word	0x00004134
 8003504:	00004140 	.word	0x00004140
 8003508:	000040b0 	.word	0x000040b0
 800350c:	0000414c 	.word	0x0000414c

08003510 <MX_ADC2_Init>:
ADC_HandleTypeDef hadc2;
DMA_HandleTypeDef hdma_adc2;

/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b08a      	sub	sp, #40	@ 0x28
 8003514:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003516:	1d3b      	adds	r3, r7, #4
 8003518:	2224      	movs	r2, #36	@ 0x24
 800351a:	2100      	movs	r1, #0
 800351c:	4618      	mov	r0, r3
 800351e:	f01a fc61 	bl	801dde4 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8003522:	4b2e      	ldr	r3, [pc, #184]	@ (80035dc <MX_ADC2_Init+0xcc>)
 8003524:	4a2e      	ldr	r2, [pc, #184]	@ (80035e0 <MX_ADC2_Init+0xd0>)
 8003526:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV8;
 8003528:	4b2c      	ldr	r3, [pc, #176]	@ (80035dc <MX_ADC2_Init+0xcc>)
 800352a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800352e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8003530:	4b2a      	ldr	r3, [pc, #168]	@ (80035dc <MX_ADC2_Init+0xcc>)
 8003532:	2208      	movs	r2, #8
 8003534:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8003536:	4b29      	ldr	r3, [pc, #164]	@ (80035dc <MX_ADC2_Init+0xcc>)
 8003538:	2200      	movs	r2, #0
 800353a:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800353c:	4b27      	ldr	r3, [pc, #156]	@ (80035dc <MX_ADC2_Init+0xcc>)
 800353e:	2204      	movs	r2, #4
 8003540:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8003542:	4b26      	ldr	r3, [pc, #152]	@ (80035dc <MX_ADC2_Init+0xcc>)
 8003544:	2200      	movs	r2, #0
 8003546:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8003548:	4b24      	ldr	r3, [pc, #144]	@ (80035dc <MX_ADC2_Init+0xcc>)
 800354a:	2200      	movs	r2, #0
 800354c:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 800354e:	4b23      	ldr	r3, [pc, #140]	@ (80035dc <MX_ADC2_Init+0xcc>)
 8003550:	2201      	movs	r2, #1
 8003552:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8003554:	4b21      	ldr	r3, [pc, #132]	@ (80035dc <MX_ADC2_Init+0xcc>)
 8003556:	2200      	movs	r2, #0
 8003558:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T8_TRGO;
 800355c:	4b1f      	ldr	r3, [pc, #124]	@ (80035dc <MX_ADC2_Init+0xcc>)
 800355e:	f44f 629c 	mov.w	r2, #1248	@ 0x4e0
 8003562:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8003564:	4b1d      	ldr	r3, [pc, #116]	@ (80035dc <MX_ADC2_Init+0xcc>)
 8003566:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800356a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800356c:	4b1b      	ldr	r3, [pc, #108]	@ (80035dc <MX_ADC2_Init+0xcc>)
 800356e:	2203      	movs	r2, #3
 8003570:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8003572:	4b1a      	ldr	r3, [pc, #104]	@ (80035dc <MX_ADC2_Init+0xcc>)
 8003574:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003578:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800357a:	4b18      	ldr	r3, [pc, #96]	@ (80035dc <MX_ADC2_Init+0xcc>)
 800357c:	2200      	movs	r2, #0
 800357e:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc2.Init.OversamplingMode = DISABLE;
 8003580:	4b16      	ldr	r3, [pc, #88]	@ (80035dc <MX_ADC2_Init+0xcc>)
 8003582:	2200      	movs	r2, #0
 8003584:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc2.Init.Oversampling.Ratio = 1;
 8003588:	4b14      	ldr	r3, [pc, #80]	@ (80035dc <MX_ADC2_Init+0xcc>)
 800358a:	2201      	movs	r2, #1
 800358c:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800358e:	4813      	ldr	r0, [pc, #76]	@ (80035dc <MX_ADC2_Init+0xcc>)
 8003590:	f006 f9a6 	bl	80098e0 <HAL_ADC_Init>
 8003594:	4603      	mov	r3, r0
 8003596:	2b00      	cmp	r3, #0
 8003598:	d001      	beq.n	800359e <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 800359a:	f004 faed 	bl	8007b78 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800359e:	4b11      	ldr	r3, [pc, #68]	@ (80035e4 <MX_ADC2_Init+0xd4>)
 80035a0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80035a2:	2306      	movs	r3, #6
 80035a4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 80035a6:	2307      	movs	r3, #7
 80035a8:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80035aa:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80035ae:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80035b0:	2304      	movs	r3, #4
 80035b2:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80035b4:	2300      	movs	r3, #0
 80035b6:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 80035b8:	2300      	movs	r3, #0
 80035ba:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80035be:	1d3b      	adds	r3, r7, #4
 80035c0:	4619      	mov	r1, r3
 80035c2:	4806      	ldr	r0, [pc, #24]	@ (80035dc <MX_ADC2_Init+0xcc>)
 80035c4:	f006 fed2 	bl	800a36c <HAL_ADC_ConfigChannel>
 80035c8:	4603      	mov	r3, r0
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d001      	beq.n	80035d2 <MX_ADC2_Init+0xc2>
  {
    Error_Handler();
 80035ce:	f004 fad3 	bl	8007b78 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80035d2:	bf00      	nop
 80035d4:	3728      	adds	r7, #40	@ 0x28
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}
 80035da:	bf00      	nop
 80035dc:	240000ac 	.word	0x240000ac
 80035e0:	40022100 	.word	0x40022100
 80035e4:	19200040 	.word	0x19200040

080035e8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b08a      	sub	sp, #40	@ 0x28
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035f0:	f107 0314 	add.w	r3, r7, #20
 80035f4:	2200      	movs	r2, #0
 80035f6:	601a      	str	r2, [r3, #0]
 80035f8:	605a      	str	r2, [r3, #4]
 80035fa:	609a      	str	r2, [r3, #8]
 80035fc:	60da      	str	r2, [r3, #12]
 80035fe:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC2)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a34      	ldr	r2, [pc, #208]	@ (80036d8 <HAL_ADC_MspInit+0xf0>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d162      	bne.n	80036d0 <HAL_ADC_MspInit+0xe8>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* ADC2 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800360a:	4b34      	ldr	r3, [pc, #208]	@ (80036dc <HAL_ADC_MspInit+0xf4>)
 800360c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003610:	4a32      	ldr	r2, [pc, #200]	@ (80036dc <HAL_ADC_MspInit+0xf4>)
 8003612:	f043 0320 	orr.w	r3, r3, #32
 8003616:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800361a:	4b30      	ldr	r3, [pc, #192]	@ (80036dc <HAL_ADC_MspInit+0xf4>)
 800361c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003620:	f003 0320 	and.w	r3, r3, #32
 8003624:	613b      	str	r3, [r7, #16]
 8003626:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003628:	4b2c      	ldr	r3, [pc, #176]	@ (80036dc <HAL_ADC_MspInit+0xf4>)
 800362a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800362e:	4a2b      	ldr	r2, [pc, #172]	@ (80036dc <HAL_ADC_MspInit+0xf4>)
 8003630:	f043 0320 	orr.w	r3, r3, #32
 8003634:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003638:	4b28      	ldr	r3, [pc, #160]	@ (80036dc <HAL_ADC_MspInit+0xf4>)
 800363a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800363e:	f003 0320 	and.w	r3, r3, #32
 8003642:	60fb      	str	r3, [r7, #12]
 8003644:	68fb      	ldr	r3, [r7, #12]
    /**ADC2 GPIO Configuration
    PF14     ------> ADC2_INP6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8003646:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800364a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800364c:	2303      	movs	r3, #3
 800364e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003650:	2300      	movs	r3, #0
 8003652:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003654:	f107 0314 	add.w	r3, r7, #20
 8003658:	4619      	mov	r1, r3
 800365a:	4821      	ldr	r0, [pc, #132]	@ (80036e0 <HAL_ADC_MspInit+0xf8>)
 800365c:	f00a fd72 	bl	800e144 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA2_Stream0;
 8003660:	4b20      	ldr	r3, [pc, #128]	@ (80036e4 <HAL_ADC_MspInit+0xfc>)
 8003662:	4a21      	ldr	r2, [pc, #132]	@ (80036e8 <HAL_ADC_MspInit+0x100>)
 8003664:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8003666:	4b1f      	ldr	r3, [pc, #124]	@ (80036e4 <HAL_ADC_MspInit+0xfc>)
 8003668:	220a      	movs	r2, #10
 800366a:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800366c:	4b1d      	ldr	r3, [pc, #116]	@ (80036e4 <HAL_ADC_MspInit+0xfc>)
 800366e:	2200      	movs	r2, #0
 8003670:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8003672:	4b1c      	ldr	r3, [pc, #112]	@ (80036e4 <HAL_ADC_MspInit+0xfc>)
 8003674:	2200      	movs	r2, #0
 8003676:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8003678:	4b1a      	ldr	r3, [pc, #104]	@ (80036e4 <HAL_ADC_MspInit+0xfc>)
 800367a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800367e:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003680:	4b18      	ldr	r3, [pc, #96]	@ (80036e4 <HAL_ADC_MspInit+0xfc>)
 8003682:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003686:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003688:	4b16      	ldr	r3, [pc, #88]	@ (80036e4 <HAL_ADC_MspInit+0xfc>)
 800368a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800368e:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8003690:	4b14      	ldr	r3, [pc, #80]	@ (80036e4 <HAL_ADC_MspInit+0xfc>)
 8003692:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003696:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8003698:	4b12      	ldr	r3, [pc, #72]	@ (80036e4 <HAL_ADC_MspInit+0xfc>)
 800369a:	2200      	movs	r2, #0
 800369c:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800369e:	4b11      	ldr	r3, [pc, #68]	@ (80036e4 <HAL_ADC_MspInit+0xfc>)
 80036a0:	2200      	movs	r2, #0
 80036a2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80036a4:	480f      	ldr	r0, [pc, #60]	@ (80036e4 <HAL_ADC_MspInit+0xfc>)
 80036a6:	f007 fefb 	bl	800b4a0 <HAL_DMA_Init>
 80036aa:	4603      	mov	r3, r0
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d001      	beq.n	80036b4 <HAL_ADC_MspInit+0xcc>
    {
      Error_Handler();
 80036b0:	f004 fa62 	bl	8007b78 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	4a0b      	ldr	r2, [pc, #44]	@ (80036e4 <HAL_ADC_MspInit+0xfc>)
 80036b8:	659a      	str	r2, [r3, #88]	@ 0x58
 80036ba:	4a0a      	ldr	r2, [pc, #40]	@ (80036e4 <HAL_ADC_MspInit+0xfc>)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC2 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80036c0:	2200      	movs	r2, #0
 80036c2:	2100      	movs	r1, #0
 80036c4:	2012      	movs	r0, #18
 80036c6:	f007 fe3e 	bl	800b346 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80036ca:	2012      	movs	r0, #18
 80036cc:	f007 fe55 	bl	800b37a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 80036d0:	bf00      	nop
 80036d2:	3728      	adds	r7, #40	@ 0x28
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd80      	pop	{r7, pc}
 80036d8:	40022100 	.word	0x40022100
 80036dc:	58024400 	.word	0x58024400
 80036e0:	58021400 	.word	0x58021400
 80036e4:	2400011c 	.word	0x2400011c
 80036e8:	40020410 	.word	0x40020410

080036ec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b082      	sub	sp, #8
 80036f0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80036f2:	4b19      	ldr	r3, [pc, #100]	@ (8003758 <MX_DMA_Init+0x6c>)
 80036f4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80036f8:	4a17      	ldr	r2, [pc, #92]	@ (8003758 <MX_DMA_Init+0x6c>)
 80036fa:	f043 0302 	orr.w	r3, r3, #2
 80036fe:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003702:	4b15      	ldr	r3, [pc, #84]	@ (8003758 <MX_DMA_Init+0x6c>)
 8003704:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003708:	f003 0302 	and.w	r3, r3, #2
 800370c:	607b      	str	r3, [r7, #4]
 800370e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003710:	4b11      	ldr	r3, [pc, #68]	@ (8003758 <MX_DMA_Init+0x6c>)
 8003712:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003716:	4a10      	ldr	r2, [pc, #64]	@ (8003758 <MX_DMA_Init+0x6c>)
 8003718:	f043 0301 	orr.w	r3, r3, #1
 800371c:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003720:	4b0d      	ldr	r3, [pc, #52]	@ (8003758 <MX_DMA_Init+0x6c>)
 8003722:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003726:	f003 0301 	and.w	r3, r3, #1
 800372a:	603b      	str	r3, [r7, #0]
 800372c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800372e:	2200      	movs	r2, #0
 8003730:	2100      	movs	r1, #0
 8003732:	200b      	movs	r0, #11
 8003734:	f007 fe07 	bl	800b346 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8003738:	200b      	movs	r0, #11
 800373a:	f007 fe1e 	bl	800b37a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800373e:	2200      	movs	r2, #0
 8003740:	2100      	movs	r1, #0
 8003742:	2038      	movs	r0, #56	@ 0x38
 8003744:	f007 fdff 	bl	800b346 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8003748:	2038      	movs	r0, #56	@ 0x38
 800374a:	f007 fe16 	bl	800b37a <HAL_NVIC_EnableIRQ>

}
 800374e:	bf00      	nop
 8003750:	3708      	adds	r7, #8
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}
 8003756:	bf00      	nop
 8003758:	58024400 	.word	0x58024400
 800375c:	00000000 	.word	0x00000000

08003760 <Thrust_filter>:
 * Thrust_filter
 *
 * niepozwala zwiększac ani znimiejszac ciągu jezeli error wychylenia jest zbyt duzy
 *
 */
void Thrust_filter(double factor){
 8003760:	b580      	push	{r7, lr}
 8003762:	b08e      	sub	sp, #56	@ 0x38
 8003764:	af00      	add	r7, sp, #0
 8003766:	ed87 0b00 	vstr	d0, [r7]
	double error_pitch, error_rool, error_sum;
	double thrust_add = 0;
 800376a:	f04f 0200 	mov.w	r2, #0
 800376e:	f04f 0300 	mov.w	r3, #0
 8003772:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
	int16_t thrust_error;
	double thrust_function;
	uint8_t negflag = 0;
 8003776:	2300      	movs	r3, #0
 8003778:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
	error_pitch = (float)(wanted_pitch - now_pitch);
 800377c:	4b8c      	ldr	r3, [pc, #560]	@ (80039b0 <Thrust_filter+0x250>)
 800377e:	ed93 7a00 	vldr	s14, [r3]
 8003782:	4b8c      	ldr	r3, [pc, #560]	@ (80039b4 <Thrust_filter+0x254>)
 8003784:	edd3 7a00 	vldr	s15, [r3]
 8003788:	ee77 7a67 	vsub.f32	s15, s14, s15
 800378c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003790:	ed87 7b08 	vstr	d7, [r7, #32]
	error_rool 	= (float)(wanted_rool - now_rool);
 8003794:	4b88      	ldr	r3, [pc, #544]	@ (80039b8 <Thrust_filter+0x258>)
 8003796:	ed93 7a00 	vldr	s14, [r3]
 800379a:	4b88      	ldr	r3, [pc, #544]	@ (80039bc <Thrust_filter+0x25c>)
 800379c:	edd3 7a00 	vldr	s15, [r3]
 80037a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80037a4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80037a8:	ed87 7b06 	vstr	d7, [r7, #24]

	error_pitch = WartoscBezwgledna(error_pitch);
 80037ac:	ed97 7b08 	vldr	d7, [r7, #32]
 80037b0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80037b4:	eeb0 0a67 	vmov.f32	s0, s15
 80037b8:	f003 fd18 	bl	80071ec <WartoscBezwgledna>
 80037bc:	eef0 7a40 	vmov.f32	s15, s0
 80037c0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80037c4:	ed87 7b08 	vstr	d7, [r7, #32]
	error_rool 	= WartoscBezwgledna(error_rool);
 80037c8:	ed97 7b06 	vldr	d7, [r7, #24]
 80037cc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80037d0:	eeb0 0a67 	vmov.f32	s0, s15
 80037d4:	f003 fd0a 	bl	80071ec <WartoscBezwgledna>
 80037d8:	eef0 7a40 	vmov.f32	s15, s0
 80037dc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80037e0:	ed87 7b06 	vstr	d7, [r7, #24]

	error_sum = pow(error_pitch + error_rool + 1, 5);
 80037e4:	ed97 6b08 	vldr	d6, [r7, #32]
 80037e8:	ed97 7b06 	vldr	d7, [r7, #24]
 80037ec:	ee36 7b07 	vadd.f64	d7, d6, d7
 80037f0:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 80037f4:	ee37 7b06 	vadd.f64	d7, d7, d6
 80037f8:	eeb1 1b04 	vmov.f64	d1, #20	@ 0x40a00000  5.0
 80037fc:	eeb0 0b47 	vmov.f64	d0, d7
 8003800:	f01a fb7a 	bl	801def8 <pow>
 8003804:	ed87 0b04 	vstr	d0, [r7, #16]
	if(wanted_thrust > 10500){
 8003808:	4b6d      	ldr	r3, [pc, #436]	@ (80039c0 <Thrust_filter+0x260>)
 800380a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800380e:	f642 1204 	movw	r2, #10500	@ 0x2904
 8003812:	4293      	cmp	r3, r2
 8003814:	dd03      	ble.n	800381e <Thrust_filter+0xbe>
		wanted_thrust = 10500;
 8003816:	4b6a      	ldr	r3, [pc, #424]	@ (80039c0 <Thrust_filter+0x260>)
 8003818:	f642 1204 	movw	r2, #10500	@ 0x2904
 800381c:	801a      	strh	r2, [r3, #0]
	}

	thrust_error = wanted_thrust - MYDRON.THRUST;
 800381e:	4b68      	ldr	r3, [pc, #416]	@ (80039c0 <Thrust_filter+0x260>)
 8003820:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003824:	b29a      	uxth	r2, r3
 8003826:	4b67      	ldr	r3, [pc, #412]	@ (80039c4 <Thrust_filter+0x264>)
 8003828:	885b      	ldrh	r3, [r3, #2]
 800382a:	1ad3      	subs	r3, r2, r3
 800382c:	b29b      	uxth	r3, r3
 800382e:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	if(thrust_error < 0){
 8003830:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 8003834:	2b00      	cmp	r3, #0
 8003836:	da13      	bge.n	8003860 <Thrust_filter+0x100>
		thrust_error = WartoscBezwgledna(thrust_error);
 8003838:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 800383c:	ee07 3a90 	vmov	s15, r3
 8003840:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003844:	eeb0 0a67 	vmov.f32	s0, s15
 8003848:	f003 fcd0 	bl	80071ec <WartoscBezwgledna>
 800384c:	eef0 7a40 	vmov.f32	s15, s0
 8003850:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003854:	ee17 3a90 	vmov	r3, s15
 8003858:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		negflag = 1;
 800385a:	2301      	movs	r3, #1
 800385c:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
	}


	if((thrust_error) != 0){
 8003860:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 8003864:	2b00      	cmp	r3, #0
 8003866:	f000 8097 	beq.w	8003998 <Thrust_filter+0x238>
		thrust_function = 2000*(sqrt(sqrt((double)(thrust_error))));
 800386a:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 800386e:	ee07 3a90 	vmov	s15, r3
 8003872:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003876:	eeb0 0b47 	vmov.f64	d0, d7
 800387a:	f01a fae9 	bl	801de50 <sqrt>
 800387e:	eeb0 7b40 	vmov.f64	d7, d0
 8003882:	eeb0 0b47 	vmov.f64	d0, d7
 8003886:	f01a fae3 	bl	801de50 <sqrt>
 800388a:	eeb0 7b40 	vmov.f64	d7, d0
 800388e:	ed9f 6b44 	vldr	d6, [pc, #272]	@ 80039a0 <Thrust_filter+0x240>
 8003892:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003896:	ed87 7b02 	vstr	d7, [r7, #8]

		thrust_add = ((double)(factor * thrust_increse_factor * thrust_function/error_sum));
 800389a:	ed97 7b00 	vldr	d7, [r7]
 800389e:	ed9f 6b42 	vldr	d6, [pc, #264]	@ 80039a8 <Thrust_filter+0x248>
 80038a2:	ee27 6b06 	vmul.f64	d6, d7, d6
 80038a6:	ed97 7b02 	vldr	d7, [r7, #8]
 80038aa:	ee26 5b07 	vmul.f64	d5, d6, d7
 80038ae:	ed97 6b04 	vldr	d6, [r7, #16]
 80038b2:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80038b6:	ed87 7b0c 	vstr	d7, [r7, #48]	@ 0x30
		if(negflag == 1){
 80038ba:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80038be:	2b01      	cmp	r3, #1
 80038c0:	d105      	bne.n	80038ce <Thrust_filter+0x16e>
			thrust_add = thrust_add*(-1);
 80038c2:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 80038c6:	eeb1 7b47 	vneg.f64	d7, d7
 80038ca:	ed87 7b0c 	vstr	d7, [r7, #48]	@ 0x30
		}


		if(thrust_add < 1 && thrust_add > -1){
 80038ce:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 80038d2:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 80038d6:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80038da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038de:	d513      	bpl.n	8003908 <Thrust_filter+0x1a8>
 80038e0:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 80038e4:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 80038e8:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80038ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038f0:	dd0a      	ble.n	8003908 <Thrust_filter+0x1a8>
			thrust_values = thrust_values + thrust_add;
 80038f2:	4b35      	ldr	r3, [pc, #212]	@ (80039c8 <Thrust_filter+0x268>)
 80038f4:	ed93 6b00 	vldr	d6, [r3]
 80038f8:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 80038fc:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003900:	4b31      	ldr	r3, [pc, #196]	@ (80039c8 <Thrust_filter+0x268>)
 8003902:	ed83 7b00 	vstr	d7, [r3]
 8003906:	e010      	b.n	800392a <Thrust_filter+0x1ca>
		}
		else{
			MYDRON.THRUST = MYDRON.THRUST + thrust_add;
 8003908:	4b2e      	ldr	r3, [pc, #184]	@ (80039c4 <Thrust_filter+0x264>)
 800390a:	885b      	ldrh	r3, [r3, #2]
 800390c:	ee07 3a90 	vmov	s15, r3
 8003910:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8003914:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 8003918:	ee36 7b07 	vadd.f64	d7, d6, d7
 800391c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003920:	ee17 3a90 	vmov	r3, s15
 8003924:	b29a      	uxth	r2, r3
 8003926:	4b27      	ldr	r3, [pc, #156]	@ (80039c4 <Thrust_filter+0x264>)
 8003928:	805a      	strh	r2, [r3, #2]
		}

		if(thrust_values >= 1 || thrust_values <= -1){
 800392a:	4b27      	ldr	r3, [pc, #156]	@ (80039c8 <Thrust_filter+0x268>)
 800392c:	ed93 7b00 	vldr	d7, [r3]
 8003930:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8003934:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8003938:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800393c:	da09      	bge.n	8003952 <Thrust_filter+0x1f2>
 800393e:	4b22      	ldr	r3, [pc, #136]	@ (80039c8 <Thrust_filter+0x268>)
 8003940:	ed93 7b00 	vldr	d7, [r3]
 8003944:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 8003948:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800394c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003950:	d818      	bhi.n	8003984 <Thrust_filter+0x224>
			MYDRON.THRUST = MYDRON.THRUST + thrust_values;
 8003952:	4b1c      	ldr	r3, [pc, #112]	@ (80039c4 <Thrust_filter+0x264>)
 8003954:	885b      	ldrh	r3, [r3, #2]
 8003956:	ee07 3a90 	vmov	s15, r3
 800395a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800395e:	4b1a      	ldr	r3, [pc, #104]	@ (80039c8 <Thrust_filter+0x268>)
 8003960:	ed93 7b00 	vldr	d7, [r3]
 8003964:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003968:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800396c:	ee17 3a90 	vmov	r3, s15
 8003970:	b29a      	uxth	r2, r3
 8003972:	4b14      	ldr	r3, [pc, #80]	@ (80039c4 <Thrust_filter+0x264>)
 8003974:	805a      	strh	r2, [r3, #2]
			thrust_values = 0;
 8003976:	4914      	ldr	r1, [pc, #80]	@ (80039c8 <Thrust_filter+0x268>)
 8003978:	f04f 0200 	mov.w	r2, #0
 800397c:	f04f 0300 	mov.w	r3, #0
 8003980:	e9c1 2300 	strd	r2, r3, [r1]
		}
		if(MYDRON.THRUST > 10000){//ograniczenie THRUST
 8003984:	4b0f      	ldr	r3, [pc, #60]	@ (80039c4 <Thrust_filter+0x264>)
 8003986:	885b      	ldrh	r3, [r3, #2]
 8003988:	f242 7210 	movw	r2, #10000	@ 0x2710
 800398c:	4293      	cmp	r3, r2
 800398e:	d903      	bls.n	8003998 <Thrust_filter+0x238>
			MYDRON.THRUST = 10000;
 8003990:	4b0c      	ldr	r3, [pc, #48]	@ (80039c4 <Thrust_filter+0x264>)
 8003992:	f242 7210 	movw	r2, #10000	@ 0x2710
 8003996:	805a      	strh	r2, [r3, #2]
		}
	}
}
 8003998:	bf00      	nop
 800399a:	3738      	adds	r7, #56	@ 0x38
 800399c:	46bd      	mov	sp, r7
 800399e:	bd80      	pop	{r7, pc}
 80039a0:	00000000 	.word	0x00000000
 80039a4:	409f4000 	.word	0x409f4000
 80039a8:	30553261 	.word	0x30553261
 80039ac:	3f33a92a 	.word	0x3f33a92a
 80039b0:	00004068 	.word	0x00004068
 80039b4:	00004078 	.word	0x00004078
 80039b8:	0000406c 	.word	0x0000406c
 80039bc:	0000407c 	.word	0x0000407c
 80039c0:	0000405c 	.word	0x0000405c
 80039c4:	00000178 	.word	0x00000178
 80039c8:	00004060 	.word	0x00004060

080039cc <PID_cal>:

	*g_ax = *g_ax + PID_FAC[2]*((wanted_pitch - *g_ax) - old_error_pitch);

}

void PID_cal(float *PID_var, float *PID_FAC, uint8_t pry){//pitch = 1, rool = 2, yaw = 3
 80039cc:	b480      	push	{r7}
 80039ce:	b085      	sub	sp, #20
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	60f8      	str	r0, [r7, #12]
 80039d4:	60b9      	str	r1, [r7, #8]
 80039d6:	4613      	mov	r3, r2
 80039d8:	71fb      	strb	r3, [r7, #7]
	switch(pry){
 80039da:	79fb      	ldrb	r3, [r7, #7]
 80039dc:	3b01      	subs	r3, #1
 80039de:	2b05      	cmp	r3, #5
 80039e0:	f200 8270 	bhi.w	8003ec4 <PID_cal+0x4f8>
 80039e4:	a201      	add	r2, pc, #4	@ (adr r2, 80039ec <PID_cal+0x20>)
 80039e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039ea:	bf00      	nop
 80039ec:	08003a05 	.word	0x08003a05
 80039f0:	08003adf 	.word	0x08003adf
 80039f4:	08003bb9 	.word	0x08003bb9
 80039f8:	08003cd9 	.word	0x08003cd9
 80039fc:	08003d7d 	.word	0x08003d7d
 8003a00:	08003e21 	.word	0x08003e21
		case 1://pitch

			*PID_var = PID_FAC[0]*(wanted_pitch - now_pitch);
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	ed93 7a00 	vldr	s14, [r3]
 8003a0a:	4ba2      	ldr	r3, [pc, #648]	@ (8003c94 <PID_cal+0x2c8>)
 8003a0c:	edd3 6a00 	vldr	s13, [r3]
 8003a10:	4ba1      	ldr	r3, [pc, #644]	@ (8003c98 <PID_cal+0x2cc>)
 8003a12:	edd3 7a00 	vldr	s15, [r3]
 8003a16:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003a1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	edc3 7a00 	vstr	s15, [r3]

			*PID_var = *PID_var + PID_FAC[1]*error_sum_pitch*looptime;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	ed93 7a00 	vldr	s14, [r3]
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	3304      	adds	r3, #4
 8003a2e:	edd3 6a00 	vldr	s13, [r3]
 8003a32:	4b9a      	ldr	r3, [pc, #616]	@ (8003c9c <PID_cal+0x2d0>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	ee07 3a90 	vmov	s15, r3
 8003a3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a3e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003a42:	4b97      	ldr	r3, [pc, #604]	@ (8003ca0 <PID_cal+0x2d4>)
 8003a44:	edd3 7a00 	vldr	s15, [r3]
 8003a48:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003a4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	edc3 7a00 	vstr	s15, [r3]

			PID_FAC[3] = PID_FAC[2]*((wanted_pitch - now_pitch) - old_error_pitch);//policzenie częsci D
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	3308      	adds	r3, #8
 8003a5a:	ed93 7a00 	vldr	s14, [r3]
 8003a5e:	4b8d      	ldr	r3, [pc, #564]	@ (8003c94 <PID_cal+0x2c8>)
 8003a60:	edd3 6a00 	vldr	s13, [r3]
 8003a64:	4b8c      	ldr	r3, [pc, #560]	@ (8003c98 <PID_cal+0x2cc>)
 8003a66:	edd3 7a00 	vldr	s15, [r3]
 8003a6a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003a6e:	4b8d      	ldr	r3, [pc, #564]	@ (8003ca4 <PID_cal+0x2d8>)
 8003a70:	edd3 7a00 	vldr	s15, [r3]
 8003a74:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	330c      	adds	r3, #12
 8003a7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a80:	edc3 7a00 	vstr	s15, [r3]

			//FDP
			//PID_FAC[4] = (PID_FAC[4] * (FDP_D_Gain * looptime) / (1 + (FDP_D_Gain * looptime))) + (PID_FAC[5] * (1 / (1 + (FDP_D_Gain * looptime))));
			PID_FAC[4] = PID_FAC[3];//old d_fac
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	3310      	adds	r3, #16
 8003a88:	68ba      	ldr	r2, [r7, #8]
 8003a8a:	68d2      	ldr	r2, [r2, #12]
 8003a8c:	601a      	str	r2, [r3, #0]

			*PID_var = *PID_var + PID_FAC[3];
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	ed93 7a00 	vldr	s14, [r3]
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	330c      	adds	r3, #12
 8003a98:	edd3 7a00 	vldr	s15, [r3]
 8003a9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	edc3 7a00 	vstr	s15, [r3]

				if(*PID_var > 400){//PID_var jest w o/s, jezeli bendzei chcailo sie obracac szybciej niz.. przekroczy zakres pomiarowy akcelerometru
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	edd3 7a00 	vldr	s15, [r3]
 8003aac:	ed9f 7a7e 	vldr	s14, [pc, #504]	@ 8003ca8 <PID_cal+0x2dc>
 8003ab0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003ab4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ab8:	dd02      	ble.n	8003ac0 <PID_cal+0xf4>
					*PID_var = 400;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	4a7b      	ldr	r2, [pc, #492]	@ (8003cac <PID_cal+0x2e0>)
 8003abe:	601a      	str	r2, [r3, #0]
				}
				if(*PID_var < -400){
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	edd3 7a00 	vldr	s15, [r3]
 8003ac6:	ed9f 7a7a 	vldr	s14, [pc, #488]	@ 8003cb0 <PID_cal+0x2e4>
 8003aca:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003ace:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ad2:	d400      	bmi.n	8003ad6 <PID_cal+0x10a>
					*PID_var = -400;
				}
			break;
 8003ad4:	e1f7      	b.n	8003ec6 <PID_cal+0x4fa>
					*PID_var = -400;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	4a76      	ldr	r2, [pc, #472]	@ (8003cb4 <PID_cal+0x2e8>)
 8003ada:	601a      	str	r2, [r3, #0]
			break;
 8003adc:	e1f3      	b.n	8003ec6 <PID_cal+0x4fa>

		case 2://rool

			*PID_var = PID_FAC[0]*(wanted_rool - now_rool);
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	ed93 7a00 	vldr	s14, [r3]
 8003ae4:	4b74      	ldr	r3, [pc, #464]	@ (8003cb8 <PID_cal+0x2ec>)
 8003ae6:	edd3 6a00 	vldr	s13, [r3]
 8003aea:	4b74      	ldr	r3, [pc, #464]	@ (8003cbc <PID_cal+0x2f0>)
 8003aec:	edd3 7a00 	vldr	s15, [r3]
 8003af0:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003af4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	edc3 7a00 	vstr	s15, [r3]

			*PID_var = *PID_var + PID_FAC[1]*error_sum_rool*looptime;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	ed93 7a00 	vldr	s14, [r3]
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	3304      	adds	r3, #4
 8003b08:	edd3 6a00 	vldr	s13, [r3]
 8003b0c:	4b6c      	ldr	r3, [pc, #432]	@ (8003cc0 <PID_cal+0x2f4>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	ee07 3a90 	vmov	s15, r3
 8003b14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003b18:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003b1c:	4b60      	ldr	r3, [pc, #384]	@ (8003ca0 <PID_cal+0x2d4>)
 8003b1e:	edd3 7a00 	vldr	s15, [r3]
 8003b22:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003b26:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	edc3 7a00 	vstr	s15, [r3]

			PID_FAC[3] =  PID_FAC[2]*((wanted_rool - now_rool) - old_error_rool);
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	3308      	adds	r3, #8
 8003b34:	ed93 7a00 	vldr	s14, [r3]
 8003b38:	4b5f      	ldr	r3, [pc, #380]	@ (8003cb8 <PID_cal+0x2ec>)
 8003b3a:	edd3 6a00 	vldr	s13, [r3]
 8003b3e:	4b5f      	ldr	r3, [pc, #380]	@ (8003cbc <PID_cal+0x2f0>)
 8003b40:	edd3 7a00 	vldr	s15, [r3]
 8003b44:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003b48:	4b5e      	ldr	r3, [pc, #376]	@ (8003cc4 <PID_cal+0x2f8>)
 8003b4a:	edd3 7a00 	vldr	s15, [r3]
 8003b4e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	330c      	adds	r3, #12
 8003b56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b5a:	edc3 7a00 	vstr	s15, [r3]

			//FDP
			//PID_FAC[4] = (PID_FAC[4] * (FDP_D_Gain * looptime) / (1 + (FDP_D_Gain * looptime))) + (PID_FAC[5] * (1 / (1 + (FDP_D_Gain * looptime))));
			PID_FAC[4] = PID_FAC[3];//old d_fac
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	3310      	adds	r3, #16
 8003b62:	68ba      	ldr	r2, [r7, #8]
 8003b64:	68d2      	ldr	r2, [r2, #12]
 8003b66:	601a      	str	r2, [r3, #0]

			*PID_var = *PID_var + PID_FAC[3];
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	ed93 7a00 	vldr	s14, [r3]
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	330c      	adds	r3, #12
 8003b72:	edd3 7a00 	vldr	s15, [r3]
 8003b76:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	edc3 7a00 	vstr	s15, [r3]

			if(*PID_var > 400){
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	edd3 7a00 	vldr	s15, [r3]
 8003b86:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 8003ca8 <PID_cal+0x2dc>
 8003b8a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b92:	dd02      	ble.n	8003b9a <PID_cal+0x1ce>
				*PID_var = 400;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	4a45      	ldr	r2, [pc, #276]	@ (8003cac <PID_cal+0x2e0>)
 8003b98:	601a      	str	r2, [r3, #0]
			}
			if(*PID_var < -400){
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	edd3 7a00 	vldr	s15, [r3]
 8003ba0:	ed9f 7a43 	vldr	s14, [pc, #268]	@ 8003cb0 <PID_cal+0x2e4>
 8003ba4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003ba8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bac:	d400      	bmi.n	8003bb0 <PID_cal+0x1e4>
				*PID_var = -400;
			}
			break;
 8003bae:	e18a      	b.n	8003ec6 <PID_cal+0x4fa>
				*PID_var = -400;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	4a40      	ldr	r2, [pc, #256]	@ (8003cb4 <PID_cal+0x2e8>)
 8003bb4:	601a      	str	r2, [r3, #0]
			break;
 8003bb6:	e186      	b.n	8003ec6 <PID_cal+0x4fa>

		case 3:

			*PID_var = PID_FAC[0]*(wanted_yaw - now_yaw);
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	ed93 7a00 	vldr	s14, [r3]
 8003bbe:	4b42      	ldr	r3, [pc, #264]	@ (8003cc8 <PID_cal+0x2fc>)
 8003bc0:	edd3 6a00 	vldr	s13, [r3]
 8003bc4:	4b41      	ldr	r3, [pc, #260]	@ (8003ccc <PID_cal+0x300>)
 8003bc6:	edd3 7a00 	vldr	s15, [r3]
 8003bca:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003bce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	edc3 7a00 	vstr	s15, [r3]

			*PID_var = *PID_var + PID_FAC[1]*error_sum_yaw*looptime;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	ed93 7a00 	vldr	s14, [r3]
 8003bde:	68bb      	ldr	r3, [r7, #8]
 8003be0:	3304      	adds	r3, #4
 8003be2:	edd3 6a00 	vldr	s13, [r3]
 8003be6:	4b3a      	ldr	r3, [pc, #232]	@ (8003cd0 <PID_cal+0x304>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	ee07 3a90 	vmov	s15, r3
 8003bee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003bf2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003bf6:	4b2a      	ldr	r3, [pc, #168]	@ (8003ca0 <PID_cal+0x2d4>)
 8003bf8:	edd3 7a00 	vldr	s15, [r3]
 8003bfc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003c00:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	edc3 7a00 	vstr	s15, [r3]

			PID_FAC[3] = PID_FAC[2]*((wanted_yaw - now_yaw) - old_error_yaw);
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	3308      	adds	r3, #8
 8003c0e:	ed93 7a00 	vldr	s14, [r3]
 8003c12:	4b2d      	ldr	r3, [pc, #180]	@ (8003cc8 <PID_cal+0x2fc>)
 8003c14:	edd3 6a00 	vldr	s13, [r3]
 8003c18:	4b2c      	ldr	r3, [pc, #176]	@ (8003ccc <PID_cal+0x300>)
 8003c1a:	edd3 7a00 	vldr	s15, [r3]
 8003c1e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003c22:	4b2c      	ldr	r3, [pc, #176]	@ (8003cd4 <PID_cal+0x308>)
 8003c24:	edd3 7a00 	vldr	s15, [r3]
 8003c28:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	330c      	adds	r3, #12
 8003c30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c34:	edc3 7a00 	vstr	s15, [r3]

			//FDP
			//PID_FAC[4] = (PID_FAC[4] * (FDP_D_Gain * looptime) / (1 + (FDP_D_Gain * looptime))) + (PID_FAC[5] * (1 / (1 + (FDP_D_Gain * looptime))));
			PID_FAC[4] = PID_FAC[3];//old d_fac
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	3310      	adds	r3, #16
 8003c3c:	68ba      	ldr	r2, [r7, #8]
 8003c3e:	68d2      	ldr	r2, [r2, #12]
 8003c40:	601a      	str	r2, [r3, #0]

			*PID_var = *PID_var + PID_FAC[3];
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	ed93 7a00 	vldr	s14, [r3]
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	330c      	adds	r3, #12
 8003c4c:	edd3 7a00 	vldr	s15, [r3]
 8003c50:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	edc3 7a00 	vstr	s15, [r3]

			if(*PID_var > 400){
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	edd3 7a00 	vldr	s15, [r3]
 8003c60:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8003ca8 <PID_cal+0x2dc>
 8003c64:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003c68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c6c:	dd02      	ble.n	8003c74 <PID_cal+0x2a8>
				*PID_var = 400;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	4a0e      	ldr	r2, [pc, #56]	@ (8003cac <PID_cal+0x2e0>)
 8003c72:	601a      	str	r2, [r3, #0]
			}
			if(*PID_var < -400){
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	edd3 7a00 	vldr	s15, [r3]
 8003c7a:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8003cb0 <PID_cal+0x2e4>
 8003c7e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003c82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c86:	d400      	bmi.n	8003c8a <PID_cal+0x2be>
				*PID_var = -400;
			}
			break;
 8003c88:	e11d      	b.n	8003ec6 <PID_cal+0x4fa>
				*PID_var = -400;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	4a09      	ldr	r2, [pc, #36]	@ (8003cb4 <PID_cal+0x2e8>)
 8003c8e:	601a      	str	r2, [r3, #0]
			break;
 8003c90:	e119      	b.n	8003ec6 <PID_cal+0x4fa>
 8003c92:	bf00      	nop
 8003c94:	00004068 	.word	0x00004068
 8003c98:	00004078 	.word	0x00004078
 8003c9c:	0000409c 	.word	0x0000409c
 8003ca0:	0801e8a4 	.word	0x0801e8a4
 8003ca4:	00004084 	.word	0x00004084
 8003ca8:	43c80000 	.word	0x43c80000
 8003cac:	43c80000 	.word	0x43c80000
 8003cb0:	c3c80000 	.word	0xc3c80000
 8003cb4:	c3c80000 	.word	0xc3c80000
 8003cb8:	0000406c 	.word	0x0000406c
 8003cbc:	0000407c 	.word	0x0000407c
 8003cc0:	000040a0 	.word	0x000040a0
 8003cc4:	00004088 	.word	0x00004088
 8003cc8:	00004070 	.word	0x00004070
 8003ccc:	00004080 	.word	0x00004080
 8003cd0:	000040a4 	.word	0x000040a4
 8003cd4:	0000408c 	.word	0x0000408c

		case 4:// angular rates pitch

			*PID_var = PID_FAC[0]*(pid_pitch - gx);
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	ed93 7a00 	vldr	s14, [r3]
 8003cde:	4b7d      	ldr	r3, [pc, #500]	@ (8003ed4 <PID_cal+0x508>)
 8003ce0:	edd3 6a00 	vldr	s13, [r3]
 8003ce4:	4b7c      	ldr	r3, [pc, #496]	@ (8003ed8 <PID_cal+0x50c>)
 8003ce6:	edd3 7a00 	vldr	s15, [r3]
 8003cea:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003cee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	edc3 7a00 	vstr	s15, [r3]

			*PID_var = *PID_var + PID_FAC[1]*error_sum_angular_rate_pitch*looptime;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	ed93 7a00 	vldr	s14, [r3]
 8003cfe:	68bb      	ldr	r3, [r7, #8]
 8003d00:	3304      	adds	r3, #4
 8003d02:	edd3 6a00 	vldr	s13, [r3]
 8003d06:	4b75      	ldr	r3, [pc, #468]	@ (8003edc <PID_cal+0x510>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	ee07 3a90 	vmov	s15, r3
 8003d0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003d12:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003d16:	4b72      	ldr	r3, [pc, #456]	@ (8003ee0 <PID_cal+0x514>)
 8003d18:	edd3 7a00 	vldr	s15, [r3]
 8003d1c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003d20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	edc3 7a00 	vstr	s15, [r3]


			PID_FAC[3] = PID_FAC[2]*((pid_pitch - gx) - old_error_angular_rate_pitch);//policzenie częsci D
 8003d2a:	68bb      	ldr	r3, [r7, #8]
 8003d2c:	3308      	adds	r3, #8
 8003d2e:	ed93 7a00 	vldr	s14, [r3]
 8003d32:	4b68      	ldr	r3, [pc, #416]	@ (8003ed4 <PID_cal+0x508>)
 8003d34:	edd3 6a00 	vldr	s13, [r3]
 8003d38:	4b67      	ldr	r3, [pc, #412]	@ (8003ed8 <PID_cal+0x50c>)
 8003d3a:	edd3 7a00 	vldr	s15, [r3]
 8003d3e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003d42:	4b68      	ldr	r3, [pc, #416]	@ (8003ee4 <PID_cal+0x518>)
 8003d44:	edd3 7a00 	vldr	s15, [r3]
 8003d48:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	330c      	adds	r3, #12
 8003d50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d54:	edc3 7a00 	vstr	s15, [r3]

			//FDP
			//PID_FAC[4] = (PID_FAC[4] * (FDP_D_Gain_AR * looptime) / (1 + (FDP_D_Gain_AR * looptime))) + (PID_FAC[5] * (1 / (1 + (FDP_D_Gain_AR * looptime))));
			PID_FAC[4] = PID_FAC[3];//old d_fac
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	3310      	adds	r3, #16
 8003d5c:	68ba      	ldr	r2, [r7, #8]
 8003d5e:	68d2      	ldr	r2, [r2, #12]
 8003d60:	601a      	str	r2, [r3, #0]

			*PID_var = *PID_var + PID_FAC[3];
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	ed93 7a00 	vldr	s14, [r3]
 8003d68:	68bb      	ldr	r3, [r7, #8]
 8003d6a:	330c      	adds	r3, #12
 8003d6c:	edd3 7a00 	vldr	s15, [r3]
 8003d70:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	edc3 7a00 	vstr	s15, [r3]

			break;
 8003d7a:	e0a4      	b.n	8003ec6 <PID_cal+0x4fa>

		case 5:// angular rates rool

			*PID_var = PID_FAC[0]*(pid_rool - gy);
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	ed93 7a00 	vldr	s14, [r3]
 8003d82:	4b59      	ldr	r3, [pc, #356]	@ (8003ee8 <PID_cal+0x51c>)
 8003d84:	edd3 6a00 	vldr	s13, [r3]
 8003d88:	4b58      	ldr	r3, [pc, #352]	@ (8003eec <PID_cal+0x520>)
 8003d8a:	edd3 7a00 	vldr	s15, [r3]
 8003d8e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003d92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	edc3 7a00 	vstr	s15, [r3]

			*PID_var = *PID_var + PID_FAC[1]*error_sum_angular_rate_rool*looptime;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	ed93 7a00 	vldr	s14, [r3]
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	3304      	adds	r3, #4
 8003da6:	edd3 6a00 	vldr	s13, [r3]
 8003daa:	4b51      	ldr	r3, [pc, #324]	@ (8003ef0 <PID_cal+0x524>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	ee07 3a90 	vmov	s15, r3
 8003db2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003db6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003dba:	4b49      	ldr	r3, [pc, #292]	@ (8003ee0 <PID_cal+0x514>)
 8003dbc:	edd3 7a00 	vldr	s15, [r3]
 8003dc0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003dc4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	edc3 7a00 	vstr	s15, [r3]

			PID_FAC[3] =  PID_FAC[2]*((pid_rool - gy) - old_error_angular_rate_rool);
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	3308      	adds	r3, #8
 8003dd2:	ed93 7a00 	vldr	s14, [r3]
 8003dd6:	4b44      	ldr	r3, [pc, #272]	@ (8003ee8 <PID_cal+0x51c>)
 8003dd8:	edd3 6a00 	vldr	s13, [r3]
 8003ddc:	4b43      	ldr	r3, [pc, #268]	@ (8003eec <PID_cal+0x520>)
 8003dde:	edd3 7a00 	vldr	s15, [r3]
 8003de2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003de6:	4b43      	ldr	r3, [pc, #268]	@ (8003ef4 <PID_cal+0x528>)
 8003de8:	edd3 7a00 	vldr	s15, [r3]
 8003dec:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	330c      	adds	r3, #12
 8003df4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003df8:	edc3 7a00 	vstr	s15, [r3]

			//FDP
			//PID_FAC[4] = (PID_FAC[4] * (FDP_D_Gain_AR * looptime) / (1 + (FDP_D_Gain_AR * looptime))) + (PID_FAC[5] * (1 / (1 + (FDP_D_Gain_AR * looptime))));
			PID_FAC[4] = PID_FAC[3];//old d_fac
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	3310      	adds	r3, #16
 8003e00:	68ba      	ldr	r2, [r7, #8]
 8003e02:	68d2      	ldr	r2, [r2, #12]
 8003e04:	601a      	str	r2, [r3, #0]

			*PID_var = *PID_var + PID_FAC[3];
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	ed93 7a00 	vldr	s14, [r3]
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	330c      	adds	r3, #12
 8003e10:	edd3 7a00 	vldr	s15, [r3]
 8003e14:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	edc3 7a00 	vstr	s15, [r3]
			break;
 8003e1e:	e052      	b.n	8003ec6 <PID_cal+0x4fa>

		case 6:// angular rates yaw

			*PID_var = PID_FAC[0]*(pid_yaw - gz);
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	ed93 7a00 	vldr	s14, [r3]
 8003e26:	4b34      	ldr	r3, [pc, #208]	@ (8003ef8 <PID_cal+0x52c>)
 8003e28:	edd3 6a00 	vldr	s13, [r3]
 8003e2c:	4b33      	ldr	r3, [pc, #204]	@ (8003efc <PID_cal+0x530>)
 8003e2e:	edd3 7a00 	vldr	s15, [r3]
 8003e32:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003e36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	edc3 7a00 	vstr	s15, [r3]

			*PID_var = *PID_var + PID_FAC[1]*error_sum_angular_rate_yaw*looptime;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	ed93 7a00 	vldr	s14, [r3]
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	3304      	adds	r3, #4
 8003e4a:	edd3 6a00 	vldr	s13, [r3]
 8003e4e:	4b2c      	ldr	r3, [pc, #176]	@ (8003f00 <PID_cal+0x534>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	ee07 3a90 	vmov	s15, r3
 8003e56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003e5a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003e5e:	4b20      	ldr	r3, [pc, #128]	@ (8003ee0 <PID_cal+0x514>)
 8003e60:	edd3 7a00 	vldr	s15, [r3]
 8003e64:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003e68:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	edc3 7a00 	vstr	s15, [r3]

			PID_FAC[3] = PID_FAC[2]*((pid_yaw - gz) - old_error_angular_rate_yaw);
 8003e72:	68bb      	ldr	r3, [r7, #8]
 8003e74:	3308      	adds	r3, #8
 8003e76:	ed93 7a00 	vldr	s14, [r3]
 8003e7a:	4b1f      	ldr	r3, [pc, #124]	@ (8003ef8 <PID_cal+0x52c>)
 8003e7c:	edd3 6a00 	vldr	s13, [r3]
 8003e80:	4b1e      	ldr	r3, [pc, #120]	@ (8003efc <PID_cal+0x530>)
 8003e82:	edd3 7a00 	vldr	s15, [r3]
 8003e86:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003e8a:	4b1e      	ldr	r3, [pc, #120]	@ (8003f04 <PID_cal+0x538>)
 8003e8c:	edd3 7a00 	vldr	s15, [r3]
 8003e90:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	330c      	adds	r3, #12
 8003e98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e9c:	edc3 7a00 	vstr	s15, [r3]

			//FDP
			//PID_FAC[4] = (PID_FAC[4] * (FDP_D_Gain_AR * looptime) / (1 + (FDP_D_Gain_AR * looptime))) + (PID_FAC[5] * (1 / (1 + (FDP_D_Gain_AR * looptime))));//todo
			PID_FAC[4] = PID_FAC[3];//old d_fac
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	3310      	adds	r3, #16
 8003ea4:	68ba      	ldr	r2, [r7, #8]
 8003ea6:	68d2      	ldr	r2, [r2, #12]
 8003ea8:	601a      	str	r2, [r3, #0]

			*PID_var = *PID_var + PID_FAC[3];
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	ed93 7a00 	vldr	s14, [r3]
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	330c      	adds	r3, #12
 8003eb4:	edd3 7a00 	vldr	s15, [r3]
 8003eb8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	edc3 7a00 	vstr	s15, [r3]
			break;
 8003ec2:	e000      	b.n	8003ec6 <PID_cal+0x4fa>
		default:
			break;
 8003ec4:	bf00      	nop
	}
}
 8003ec6:	bf00      	nop
 8003ec8:	3714      	adds	r7, #20
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed0:	4770      	bx	lr
 8003ed2:	bf00      	nop
 8003ed4:	000040b4 	.word	0x000040b4
 8003ed8:	0000000c 	.word	0x0000000c
 8003edc:	000040a8 	.word	0x000040a8
 8003ee0:	0801e8a4 	.word	0x0801e8a4
 8003ee4:	00004090 	.word	0x00004090
 8003ee8:	000040bc 	.word	0x000040bc
 8003eec:	00000010 	.word	0x00000010
 8003ef0:	000040ac 	.word	0x000040ac
 8003ef4:	00004094 	.word	0x00004094
 8003ef8:	000040b8 	.word	0x000040b8
 8003efc:	00000014 	.word	0x00000014
 8003f00:	000040b0 	.word	0x000040b0
 8003f04:	00004098 	.word	0x00004098

08003f08 <Get_batteryvalue>:

void Get_batteryvalue(void){
 8003f08:	b480      	push	{r7}
 8003f0a:	af00      	add	r7, sp, #0
	 * 10V musi byc czyli 2,7027V
	 *	2,7027V to 3353
	 *	3400
	*/

	MYDRON.batterysize = (analogmess - 3353)/7.42;
 8003f0c:	4b1c      	ldr	r3, [pc, #112]	@ (8003f80 <Get_batteryvalue+0x78>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f6a3 5319 	subw	r3, r3, #3353	@ 0xd19
 8003f14:	ee07 3a90 	vmov	s15, r3
 8003f18:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8003f1c:	ed9f 5b16 	vldr	d5, [pc, #88]	@ 8003f78 <Get_batteryvalue+0x70>
 8003f20:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8003f24:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003f28:	ee17 3a90 	vmov	r3, s15
 8003f2c:	b29a      	uxth	r2, r3
 8003f2e:	4b15      	ldr	r3, [pc, #84]	@ (8003f84 <Get_batteryvalue+0x7c>)
 8003f30:	801a      	strh	r2, [r3, #0]
	if(MYDRON.batterysize >= 100){
 8003f32:	4b14      	ldr	r3, [pc, #80]	@ (8003f84 <Get_batteryvalue+0x7c>)
 8003f34:	881b      	ldrh	r3, [r3, #0]
 8003f36:	2b63      	cmp	r3, #99	@ 0x63
 8003f38:	d902      	bls.n	8003f40 <Get_batteryvalue+0x38>
		MYDRON.batterysize = 100;
 8003f3a:	4b12      	ldr	r3, [pc, #72]	@ (8003f84 <Get_batteryvalue+0x7c>)
 8003f3c:	2264      	movs	r2, #100	@ 0x64
 8003f3e:	801a      	strh	r2, [r3, #0]
	}

	if(MYDRON.batterysize < 25){
 8003f40:	4b10      	ldr	r3, [pc, #64]	@ (8003f84 <Get_batteryvalue+0x7c>)
 8003f42:	881b      	ldrh	r3, [r3, #0]
 8003f44:	2b18      	cmp	r3, #24
 8003f46:	d802      	bhi.n	8003f4e <Get_batteryvalue+0x46>
		MYDRON.dron_status.Battery = DRON_BATTERY_RUN_OUT;
 8003f48:	4b0e      	ldr	r3, [pc, #56]	@ (8003f84 <Get_batteryvalue+0x7c>)
 8003f4a:	2207      	movs	r2, #7
 8003f4c:	829a      	strh	r2, [r3, #20]
	}
	if(MYDRON.batterysize <= 10){
 8003f4e:	4b0d      	ldr	r3, [pc, #52]	@ (8003f84 <Get_batteryvalue+0x7c>)
 8003f50:	881b      	ldrh	r3, [r3, #0]
 8003f52:	2b0a      	cmp	r3, #10
 8003f54:	d802      	bhi.n	8003f5c <Get_batteryvalue+0x54>
		MYDRON.dron_status.Battery = DRON_BATTERY_CRIT_VAL;
 8003f56:	4b0b      	ldr	r3, [pc, #44]	@ (8003f84 <Get_batteryvalue+0x7c>)
 8003f58:	2209      	movs	r2, #9
 8003f5a:	829a      	strh	r2, [r3, #20]
	}
	if(MYDRON.batterysize >= 25){
 8003f5c:	4b09      	ldr	r3, [pc, #36]	@ (8003f84 <Get_batteryvalue+0x7c>)
 8003f5e:	881b      	ldrh	r3, [r3, #0]
 8003f60:	2b18      	cmp	r3, #24
 8003f62:	d902      	bls.n	8003f6a <Get_batteryvalue+0x62>
		MYDRON.dron_status.Battery = DRON_BATTERY_OK;
 8003f64:	4b07      	ldr	r3, [pc, #28]	@ (8003f84 <Get_batteryvalue+0x7c>)
 8003f66:	2208      	movs	r2, #8
 8003f68:	829a      	strh	r2, [r3, #20]
	}
}
 8003f6a:	bf00      	nop
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f72:	4770      	bx	lr
 8003f74:	f3af 8000 	nop.w
 8003f78:	7ae147ae 	.word	0x7ae147ae
 8003f7c:	401dae14 	.word	0x401dae14
 8003f80:	24000eb0 	.word	0x24000eb0
 8003f84:	00000178 	.word	0x00000178

08003f88 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003f92:	4802      	ldr	r0, [pc, #8]	@ (8003f9c <SELECT+0x14>)
 8003f94:	f00a fa96 	bl	800e4c4 <HAL_GPIO_WritePin>
	//HAL_Delay(1);
}
 8003f98:	bf00      	nop
 8003f9a:	bd80      	pop	{r7, pc}
 8003f9c:	58020c00 	.word	0x58020c00

08003fa0 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8003fa4:	2201      	movs	r2, #1
 8003fa6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003faa:	4802      	ldr	r0, [pc, #8]	@ (8003fb4 <DESELECT+0x14>)
 8003fac:	f00a fa8a 	bl	800e4c4 <HAL_GPIO_WritePin>
	//HAL_Delay(1);
}
 8003fb0:	bf00      	nop
 8003fb2:	bd80      	pop	{r7, pc}
 8003fb4:	58020c00 	.word	0x58020c00

08003fb8 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b082      	sub	sp, #8
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	71fb      	strb	r3, [r7, #7]
	//while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
	while((DMA1_Stream0->FCR&0x38) != 32){}
 8003fc2:	bf00      	nop
 8003fc4:	4b07      	ldr	r3, [pc, #28]	@ (8003fe4 <SPI_TxByte+0x2c>)
 8003fc6:	695b      	ldr	r3, [r3, #20]
 8003fc8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003fcc:	2b20      	cmp	r3, #32
 8003fce:	d1f9      	bne.n	8003fc4 <SPI_TxByte+0xc>


	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8003fd0:	1df9      	adds	r1, r7, #7
 8003fd2:	2364      	movs	r3, #100	@ 0x64
 8003fd4:	2201      	movs	r2, #1
 8003fd6:	4804      	ldr	r0, [pc, #16]	@ (8003fe8 <SPI_TxByte+0x30>)
 8003fd8:	f010 fbd0 	bl	801477c <HAL_SPI_Transmit>
	//HAL_SPI_Transmit_DMA(HSPI_SDCARD, &data, 1);
}
 8003fdc:	bf00      	nop
 8003fde:	3708      	adds	r7, #8
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bd80      	pop	{r7, pc}
 8003fe4:	40020010 	.word	0x40020010
 8003fe8:	240001ec 	.word	0x240001ec

08003fec <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b082      	sub	sp, #8
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
 8003ff4:	460b      	mov	r3, r1
 8003ff6:	807b      	strh	r3, [r7, #2]
	//while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));//czekanie na zakonczenie tramnsmisji DMA?
	while((DMA1_Stream0->FCR&0x38) != 32){}
 8003ff8:	bf00      	nop
 8003ffa:	4b08      	ldr	r3, [pc, #32]	@ (800401c <SPI_TxBuffer+0x30>)
 8003ffc:	695b      	ldr	r3, [r3, #20]
 8003ffe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004002:	2b20      	cmp	r3, #32
 8004004:	d1f9      	bne.n	8003ffa <SPI_TxBuffer+0xe>
	//HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
	HAL_SPI_Transmit_DMA(HSPI_SDCARD, buffer, len);
 8004006:	887b      	ldrh	r3, [r7, #2]
 8004008:	461a      	mov	r2, r3
 800400a:	6879      	ldr	r1, [r7, #4]
 800400c:	4804      	ldr	r0, [pc, #16]	@ (8004020 <SPI_TxBuffer+0x34>)
 800400e:	f011 fb4f 	bl	80156b0 <HAL_SPI_Transmit_DMA>
}
 8004012:	bf00      	nop
 8004014:	3708      	adds	r7, #8
 8004016:	46bd      	mov	sp, r7
 8004018:	bd80      	pop	{r7, pc}
 800401a:	bf00      	nop
 800401c:	40020010 	.word	0x40020010
 8004020:	240001ec 	.word	0x240001ec

08004024 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b084      	sub	sp, #16
 8004028:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 800402a:	23ff      	movs	r3, #255	@ 0xff
 800402c:	71fb      	strb	r3, [r7, #7]

	//while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
	while((DMA1_Stream0->FCR&0x38) != 32){}
 800402e:	bf00      	nop
 8004030:	4b09      	ldr	r3, [pc, #36]	@ (8004058 <SPI_RxByte+0x34>)
 8004032:	695b      	ldr	r3, [r3, #20]
 8004034:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004038:	2b20      	cmp	r3, #32
 800403a:	d1f9      	bne.n	8004030 <SPI_RxByte+0xc>

	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 800403c:	1dba      	adds	r2, r7, #6
 800403e:	1df9      	adds	r1, r7, #7
 8004040:	2364      	movs	r3, #100	@ 0x64
 8004042:	9300      	str	r3, [sp, #0]
 8004044:	2301      	movs	r3, #1
 8004046:	4805      	ldr	r0, [pc, #20]	@ (800405c <SPI_RxByte+0x38>)
 8004048:	f010 fff8 	bl	801503c <HAL_SPI_TransmitReceive>

	return data;
 800404c:	79bb      	ldrb	r3, [r7, #6]
}
 800404e:	4618      	mov	r0, r3
 8004050:	3708      	adds	r7, #8
 8004052:	46bd      	mov	sp, r7
 8004054:	bd80      	pop	{r7, pc}
 8004056:	bf00      	nop
 8004058:	40020010 	.word	0x40020010
 800405c:	240001ec 	.word	0x240001ec

08004060 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b082      	sub	sp, #8
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8004068:	f7ff ffdc 	bl	8004024 <SPI_RxByte>
 800406c:	4603      	mov	r3, r0
 800406e:	461a      	mov	r2, r3
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	701a      	strb	r2, [r3, #0]
}
 8004074:	bf00      	nop
 8004076:	3708      	adds	r7, #8
 8004078:	46bd      	mov	sp, r7
 800407a:	bd80      	pop	{r7, pc}

0800407c <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b082      	sub	sp, #8
 8004080:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 8004082:	4b0a      	ldr	r3, [pc, #40]	@ (80040ac <SD_ReadyWait+0x30>)
 8004084:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8004088:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 800408a:	f7ff ffcb 	bl	8004024 <SPI_RxByte>
 800408e:	4603      	mov	r3, r0
 8004090:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 8004092:	79fb      	ldrb	r3, [r7, #7]
 8004094:	2bff      	cmp	r3, #255	@ 0xff
 8004096:	d004      	beq.n	80040a2 <SD_ReadyWait+0x26>
 8004098:	4b04      	ldr	r3, [pc, #16]	@ (80040ac <SD_ReadyWait+0x30>)
 800409a:	881b      	ldrh	r3, [r3, #0]
 800409c:	b29b      	uxth	r3, r3
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d1f3      	bne.n	800408a <SD_ReadyWait+0xe>

	return res;
 80040a2:	79fb      	ldrb	r3, [r7, #7]
}
 80040a4:	4618      	mov	r0, r3
 80040a6:	3708      	adds	r7, #8
 80040a8:	46bd      	mov	sp, r7
 80040aa:	bd80      	pop	{r7, pc}
 80040ac:	2400037c 	.word	0x2400037c

080040b0 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b084      	sub	sp, #16
 80040b4:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 80040b6:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 80040ba:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 80040bc:	f7ff ff70 	bl	8003fa0 <DESELECT>
	for(int i = 0; i < 10; i++)
 80040c0:	2300      	movs	r3, #0
 80040c2:	60bb      	str	r3, [r7, #8]
 80040c4:	e005      	b.n	80040d2 <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 80040c6:	20ff      	movs	r0, #255	@ 0xff
 80040c8:	f7ff ff76 	bl	8003fb8 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 80040cc:	68bb      	ldr	r3, [r7, #8]
 80040ce:	3301      	adds	r3, #1
 80040d0:	60bb      	str	r3, [r7, #8]
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	2b09      	cmp	r3, #9
 80040d6:	ddf6      	ble.n	80040c6 <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 80040d8:	f7ff ff56 	bl	8003f88 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 80040dc:	2340      	movs	r3, #64	@ 0x40
 80040de:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 80040e0:	2300      	movs	r3, #0
 80040e2:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 80040e4:	2300      	movs	r3, #0
 80040e6:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 80040e8:	2300      	movs	r3, #0
 80040ea:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 80040ec:	2300      	movs	r3, #0
 80040ee:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 80040f0:	2395      	movs	r3, #149	@ 0x95
 80040f2:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 80040f4:	463b      	mov	r3, r7
 80040f6:	2106      	movs	r1, #6
 80040f8:	4618      	mov	r0, r3
 80040fa:	f7ff ff77 	bl	8003fec <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 80040fe:	e002      	b.n	8004106 <SD_PowerOn+0x56>
	{
		cnt--;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	3b01      	subs	r3, #1
 8004104:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 8004106:	f7ff ff8d 	bl	8004024 <SPI_RxByte>
 800410a:	4603      	mov	r3, r0
 800410c:	2b01      	cmp	r3, #1
 800410e:	d002      	beq.n	8004116 <SD_PowerOn+0x66>
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d1f4      	bne.n	8004100 <SD_PowerOn+0x50>
	}

	DESELECT();
 8004116:	f7ff ff43 	bl	8003fa0 <DESELECT>
	SPI_TxByte(0XFF);
 800411a:	20ff      	movs	r0, #255	@ 0xff
 800411c:	f7ff ff4c 	bl	8003fb8 <SPI_TxByte>

	PowerFlag = 1;
 8004120:	4b03      	ldr	r3, [pc, #12]	@ (8004130 <SD_PowerOn+0x80>)
 8004122:	2201      	movs	r2, #1
 8004124:	701a      	strb	r2, [r3, #0]
}
 8004126:	bf00      	nop
 8004128:	3710      	adds	r7, #16
 800412a:	46bd      	mov	sp, r7
 800412c:	bd80      	pop	{r7, pc}
 800412e:	bf00      	nop
 8004130:	24000195 	.word	0x24000195

08004134 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 8004134:	b480      	push	{r7}
 8004136:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8004138:	4b03      	ldr	r3, [pc, #12]	@ (8004148 <SD_PowerOff+0x14>)
 800413a:	2200      	movs	r2, #0
 800413c:	701a      	strb	r2, [r3, #0]
}
 800413e:	bf00      	nop
 8004140:	46bd      	mov	sp, r7
 8004142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004146:	4770      	bx	lr
 8004148:	24000195 	.word	0x24000195

0800414c <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 800414c:	b480      	push	{r7}
 800414e:	af00      	add	r7, sp, #0
	return PowerFlag;
 8004150:	4b03      	ldr	r3, [pc, #12]	@ (8004160 <SD_CheckPower+0x14>)
 8004152:	781b      	ldrb	r3, [r3, #0]
}
 8004154:	4618      	mov	r0, r3
 8004156:	46bd      	mov	sp, r7
 8004158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415c:	4770      	bx	lr
 800415e:	bf00      	nop
 8004160:	24000195 	.word	0x24000195

08004164 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b084      	sub	sp, #16
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
 800416c:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 10;
 800416e:	4b14      	ldr	r3, [pc, #80]	@ (80041c0 <SD_RxDataBlock+0x5c>)
 8004170:	220a      	movs	r2, #10
 8004172:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8004174:	f7ff ff56 	bl	8004024 <SPI_RxByte>
 8004178:	4603      	mov	r3, r0
 800417a:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 800417c:	7bfb      	ldrb	r3, [r7, #15]
 800417e:	2bff      	cmp	r3, #255	@ 0xff
 8004180:	d104      	bne.n	800418c <SD_RxDataBlock+0x28>
 8004182:	4b0f      	ldr	r3, [pc, #60]	@ (80041c0 <SD_RxDataBlock+0x5c>)
 8004184:	881b      	ldrh	r3, [r3, #0]
 8004186:	b29b      	uxth	r3, r3
 8004188:	2b00      	cmp	r3, #0
 800418a:	d1f3      	bne.n	8004174 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 800418c:	7bfb      	ldrb	r3, [r7, #15]
 800418e:	2bfe      	cmp	r3, #254	@ 0xfe
 8004190:	d001      	beq.n	8004196 <SD_RxDataBlock+0x32>
 8004192:	2300      	movs	r3, #0
 8004194:	e00f      	b.n	80041b6 <SD_RxDataBlock+0x52>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	1c5a      	adds	r2, r3, #1
 800419a:	607a      	str	r2, [r7, #4]
 800419c:	4618      	mov	r0, r3
 800419e:	f7ff ff5f 	bl	8004060 <SPI_RxBytePtr>
	} while(len--);
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	1e5a      	subs	r2, r3, #1
 80041a6:	603a      	str	r2, [r7, #0]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d1f4      	bne.n	8004196 <SD_RxDataBlock+0x32>

	/* discard CRC */
	SPI_RxByte();
 80041ac:	f7ff ff3a 	bl	8004024 <SPI_RxByte>
	SPI_RxByte();
 80041b0:	f7ff ff38 	bl	8004024 <SPI_RxByte>

	return TRUE;
 80041b4:	2301      	movs	r3, #1
}
 80041b6:	4618      	mov	r0, r3
 80041b8:	3710      	adds	r7, #16
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bd80      	pop	{r7, pc}
 80041be:	bf00      	nop
 80041c0:	24000378 	.word	0x24000378

080041c4 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b084      	sub	sp, #16
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
 80041cc:	460b      	mov	r3, r1
 80041ce:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 80041d0:	2300      	movs	r3, #0
 80041d2:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 80041d4:	f7ff ff52 	bl	800407c <SD_ReadyWait>
 80041d8:	4603      	mov	r3, r0
 80041da:	2bff      	cmp	r3, #255	@ 0xff
 80041dc:	d001      	beq.n	80041e2 <SD_TxDataBlock+0x1e>
 80041de:	2300      	movs	r3, #0
 80041e0:	e02f      	b.n	8004242 <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 80041e2:	78fb      	ldrb	r3, [r7, #3]
 80041e4:	4618      	mov	r0, r3
 80041e6:	f7ff fee7 	bl	8003fb8 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 80041ea:	78fb      	ldrb	r3, [r7, #3]
 80041ec:	2bfd      	cmp	r3, #253	@ 0xfd
 80041ee:	d020      	beq.n	8004232 <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 80041f0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80041f4:	6878      	ldr	r0, [r7, #4]
 80041f6:	f7ff fef9 	bl	8003fec <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 80041fa:	f7ff ff13 	bl	8004024 <SPI_RxByte>
		SPI_RxByte();
 80041fe:	f7ff ff11 	bl	8004024 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 8004202:	e00b      	b.n	800421c <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8004204:	f7ff ff0e 	bl	8004024 <SPI_RxByte>
 8004208:	4603      	mov	r3, r0
 800420a:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 800420c:	7bfb      	ldrb	r3, [r7, #15]
 800420e:	f003 031f 	and.w	r3, r3, #31
 8004212:	2b05      	cmp	r3, #5
 8004214:	d006      	beq.n	8004224 <SD_TxDataBlock+0x60>
			i++;
 8004216:	7bbb      	ldrb	r3, [r7, #14]
 8004218:	3301      	adds	r3, #1
 800421a:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 800421c:	7bbb      	ldrb	r3, [r7, #14]
 800421e:	2b40      	cmp	r3, #64	@ 0x40
 8004220:	d9f0      	bls.n	8004204 <SD_TxDataBlock+0x40>
 8004222:	e000      	b.n	8004226 <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8004224:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 8004226:	bf00      	nop
 8004228:	f7ff fefc 	bl	8004024 <SPI_RxByte>
 800422c:	4603      	mov	r3, r0
 800422e:	2b00      	cmp	r3, #0
 8004230:	d0fa      	beq.n	8004228 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 8004232:	7bfb      	ldrb	r3, [r7, #15]
 8004234:	f003 031f 	and.w	r3, r3, #31
 8004238:	2b05      	cmp	r3, #5
 800423a:	d101      	bne.n	8004240 <SD_TxDataBlock+0x7c>
 800423c:	2301      	movs	r3, #1
 800423e:	e000      	b.n	8004242 <SD_TxDataBlock+0x7e>

	return FALSE;
 8004240:	2300      	movs	r3, #0
}
 8004242:	4618      	mov	r0, r3
 8004244:	3710      	adds	r7, #16
 8004246:	46bd      	mov	sp, r7
 8004248:	bd80      	pop	{r7, pc}

0800424a <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 800424a:	b580      	push	{r7, lr}
 800424c:	b084      	sub	sp, #16
 800424e:	af00      	add	r7, sp, #0
 8004250:	4603      	mov	r3, r0
 8004252:	6039      	str	r1, [r7, #0]
 8004254:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 8004256:	f7ff ff11 	bl	800407c <SD_ReadyWait>
 800425a:	4603      	mov	r3, r0
 800425c:	2bff      	cmp	r3, #255	@ 0xff
 800425e:	d001      	beq.n	8004264 <SD_SendCmd+0x1a>
 8004260:	23ff      	movs	r3, #255	@ 0xff
 8004262:	e042      	b.n	80042ea <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8004264:	79fb      	ldrb	r3, [r7, #7]
 8004266:	4618      	mov	r0, r3
 8004268:	f7ff fea6 	bl	8003fb8 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	0e1b      	lsrs	r3, r3, #24
 8004270:	b2db      	uxtb	r3, r3
 8004272:	4618      	mov	r0, r3
 8004274:	f7ff fea0 	bl	8003fb8 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	0c1b      	lsrs	r3, r3, #16
 800427c:	b2db      	uxtb	r3, r3
 800427e:	4618      	mov	r0, r3
 8004280:	f7ff fe9a 	bl	8003fb8 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	0a1b      	lsrs	r3, r3, #8
 8004288:	b2db      	uxtb	r3, r3
 800428a:	4618      	mov	r0, r3
 800428c:	f7ff fe94 	bl	8003fb8 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	b2db      	uxtb	r3, r3
 8004294:	4618      	mov	r0, r3
 8004296:	f7ff fe8f 	bl	8003fb8 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 800429a:	79fb      	ldrb	r3, [r7, #7]
 800429c:	2b40      	cmp	r3, #64	@ 0x40
 800429e:	d102      	bne.n	80042a6 <SD_SendCmd+0x5c>
 80042a0:	2395      	movs	r3, #149	@ 0x95
 80042a2:	73fb      	strb	r3, [r7, #15]
 80042a4:	e007      	b.n	80042b6 <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 80042a6:	79fb      	ldrb	r3, [r7, #7]
 80042a8:	2b48      	cmp	r3, #72	@ 0x48
 80042aa:	d102      	bne.n	80042b2 <SD_SendCmd+0x68>
 80042ac:	2387      	movs	r3, #135	@ 0x87
 80042ae:	73fb      	strb	r3, [r7, #15]
 80042b0:	e001      	b.n	80042b6 <SD_SendCmd+0x6c>
	else crc = 1;
 80042b2:	2301      	movs	r3, #1
 80042b4:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 80042b6:	7bfb      	ldrb	r3, [r7, #15]
 80042b8:	4618      	mov	r0, r3
 80042ba:	f7ff fe7d 	bl	8003fb8 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 80042be:	79fb      	ldrb	r3, [r7, #7]
 80042c0:	2b4c      	cmp	r3, #76	@ 0x4c
 80042c2:	d101      	bne.n	80042c8 <SD_SendCmd+0x7e>
 80042c4:	f7ff feae 	bl	8004024 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 80042c8:	230a      	movs	r3, #10
 80042ca:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 80042cc:	f7ff feaa 	bl	8004024 <SPI_RxByte>
 80042d0:	4603      	mov	r3, r0
 80042d2:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 80042d4:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	da05      	bge.n	80042e8 <SD_SendCmd+0x9e>
 80042dc:	7bbb      	ldrb	r3, [r7, #14]
 80042de:	3b01      	subs	r3, #1
 80042e0:	73bb      	strb	r3, [r7, #14]
 80042e2:	7bbb      	ldrb	r3, [r7, #14]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d1f1      	bne.n	80042cc <SD_SendCmd+0x82>

	return res;
 80042e8:	7b7b      	ldrb	r3, [r7, #13]
}
 80042ea:	4618      	mov	r0, r3
 80042ec:	3710      	adds	r7, #16
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd80      	pop	{r7, pc}
	...

080042f4 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 80042f4:	b590      	push	{r4, r7, lr}
 80042f6:	b085      	sub	sp, #20
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	4603      	mov	r3, r0
 80042fc:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 80042fe:	79fb      	ldrb	r3, [r7, #7]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d001      	beq.n	8004308 <SD_disk_initialize+0x14>
 8004304:	2301      	movs	r3, #1
 8004306:	e0d6      	b.n	80044b6 <SD_disk_initialize+0x1c2>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8004308:	4b6d      	ldr	r3, [pc, #436]	@ (80044c0 <SD_disk_initialize+0x1cc>)
 800430a:	781b      	ldrb	r3, [r3, #0]
 800430c:	b2db      	uxtb	r3, r3
 800430e:	f003 0302 	and.w	r3, r3, #2
 8004312:	2b00      	cmp	r3, #0
 8004314:	d003      	beq.n	800431e <SD_disk_initialize+0x2a>
 8004316:	4b6a      	ldr	r3, [pc, #424]	@ (80044c0 <SD_disk_initialize+0x1cc>)
 8004318:	781b      	ldrb	r3, [r3, #0]
 800431a:	b2db      	uxtb	r3, r3
 800431c:	e0cb      	b.n	80044b6 <SD_disk_initialize+0x1c2>

	/* power on */
	SD_PowerOn();
 800431e:	f7ff fec7 	bl	80040b0 <SD_PowerOn>

	/* slave select */
	SELECT();
 8004322:	f7ff fe31 	bl	8003f88 <SELECT>

	/* check disk type */
	type = 0;
 8004326:	2300      	movs	r3, #0
 8004328:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 800432a:	2100      	movs	r1, #0
 800432c:	2040      	movs	r0, #64	@ 0x40
 800432e:	f7ff ff8c 	bl	800424a <SD_SendCmd>
 8004332:	4603      	mov	r3, r0
 8004334:	2b01      	cmp	r3, #1
 8004336:	f040 80a6 	bne.w	8004486 <SD_disk_initialize+0x192>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 800433a:	4b62      	ldr	r3, [pc, #392]	@ (80044c4 <SD_disk_initialize+0x1d0>)
 800433c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004340:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8004342:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8004346:	2048      	movs	r0, #72	@ 0x48
 8004348:	f7ff ff7f 	bl	800424a <SD_SendCmd>
 800434c:	4603      	mov	r3, r0
 800434e:	2b01      	cmp	r3, #1
 8004350:	d158      	bne.n	8004404 <SD_disk_initialize+0x110>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 8004352:	2300      	movs	r3, #0
 8004354:	73fb      	strb	r3, [r7, #15]
 8004356:	e00c      	b.n	8004372 <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8004358:	7bfc      	ldrb	r4, [r7, #15]
 800435a:	f7ff fe63 	bl	8004024 <SPI_RxByte>
 800435e:	4603      	mov	r3, r0
 8004360:	461a      	mov	r2, r3
 8004362:	f104 0310 	add.w	r3, r4, #16
 8004366:	443b      	add	r3, r7
 8004368:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 800436c:	7bfb      	ldrb	r3, [r7, #15]
 800436e:	3301      	adds	r3, #1
 8004370:	73fb      	strb	r3, [r7, #15]
 8004372:	7bfb      	ldrb	r3, [r7, #15]
 8004374:	2b03      	cmp	r3, #3
 8004376:	d9ef      	bls.n	8004358 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8004378:	7abb      	ldrb	r3, [r7, #10]
 800437a:	2b01      	cmp	r3, #1
 800437c:	f040 8083 	bne.w	8004486 <SD_disk_initialize+0x192>
 8004380:	7afb      	ldrb	r3, [r7, #11]
 8004382:	2baa      	cmp	r3, #170	@ 0xaa
 8004384:	d17f      	bne.n	8004486 <SD_disk_initialize+0x192>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8004386:	2100      	movs	r1, #0
 8004388:	2077      	movs	r0, #119	@ 0x77
 800438a:	f7ff ff5e 	bl	800424a <SD_SendCmd>
 800438e:	4603      	mov	r3, r0
 8004390:	2b01      	cmp	r3, #1
 8004392:	d807      	bhi.n	80043a4 <SD_disk_initialize+0xb0>
 8004394:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8004398:	2069      	movs	r0, #105	@ 0x69
 800439a:	f7ff ff56 	bl	800424a <SD_SendCmd>
 800439e:	4603      	mov	r3, r0
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d005      	beq.n	80043b0 <SD_disk_initialize+0xbc>
				} while (Timer1);
 80043a4:	4b47      	ldr	r3, [pc, #284]	@ (80044c4 <SD_disk_initialize+0x1d0>)
 80043a6:	881b      	ldrh	r3, [r3, #0]
 80043a8:	b29b      	uxth	r3, r3
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d1eb      	bne.n	8004386 <SD_disk_initialize+0x92>
 80043ae:	e000      	b.n	80043b2 <SD_disk_initialize+0xbe>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80043b0:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 80043b2:	4b44      	ldr	r3, [pc, #272]	@ (80044c4 <SD_disk_initialize+0x1d0>)
 80043b4:	881b      	ldrh	r3, [r3, #0]
 80043b6:	b29b      	uxth	r3, r3
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d064      	beq.n	8004486 <SD_disk_initialize+0x192>
 80043bc:	2100      	movs	r1, #0
 80043be:	207a      	movs	r0, #122	@ 0x7a
 80043c0:	f7ff ff43 	bl	800424a <SD_SendCmd>
 80043c4:	4603      	mov	r3, r0
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d15d      	bne.n	8004486 <SD_disk_initialize+0x192>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 80043ca:	2300      	movs	r3, #0
 80043cc:	73fb      	strb	r3, [r7, #15]
 80043ce:	e00c      	b.n	80043ea <SD_disk_initialize+0xf6>
					{
						ocr[n] = SPI_RxByte();
 80043d0:	7bfc      	ldrb	r4, [r7, #15]
 80043d2:	f7ff fe27 	bl	8004024 <SPI_RxByte>
 80043d6:	4603      	mov	r3, r0
 80043d8:	461a      	mov	r2, r3
 80043da:	f104 0310 	add.w	r3, r4, #16
 80043de:	443b      	add	r3, r7
 80043e0:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 80043e4:	7bfb      	ldrb	r3, [r7, #15]
 80043e6:	3301      	adds	r3, #1
 80043e8:	73fb      	strb	r3, [r7, #15]
 80043ea:	7bfb      	ldrb	r3, [r7, #15]
 80043ec:	2b03      	cmp	r3, #3
 80043ee:	d9ef      	bls.n	80043d0 <SD_disk_initialize+0xdc>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 80043f0:	7a3b      	ldrb	r3, [r7, #8]
 80043f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d001      	beq.n	80043fe <SD_disk_initialize+0x10a>
 80043fa:	230c      	movs	r3, #12
 80043fc:	e000      	b.n	8004400 <SD_disk_initialize+0x10c>
 80043fe:	2304      	movs	r3, #4
 8004400:	73bb      	strb	r3, [r7, #14]
 8004402:	e040      	b.n	8004486 <SD_disk_initialize+0x192>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8004404:	2100      	movs	r1, #0
 8004406:	2077      	movs	r0, #119	@ 0x77
 8004408:	f7ff ff1f 	bl	800424a <SD_SendCmd>
 800440c:	4603      	mov	r3, r0
 800440e:	2b01      	cmp	r3, #1
 8004410:	d808      	bhi.n	8004424 <SD_disk_initialize+0x130>
 8004412:	2100      	movs	r1, #0
 8004414:	2069      	movs	r0, #105	@ 0x69
 8004416:	f7ff ff18 	bl	800424a <SD_SendCmd>
 800441a:	4603      	mov	r3, r0
 800441c:	2b01      	cmp	r3, #1
 800441e:	d801      	bhi.n	8004424 <SD_disk_initialize+0x130>
 8004420:	2302      	movs	r3, #2
 8004422:	e000      	b.n	8004426 <SD_disk_initialize+0x132>
 8004424:	2301      	movs	r3, #1
 8004426:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 8004428:	7bbb      	ldrb	r3, [r7, #14]
 800442a:	2b02      	cmp	r3, #2
 800442c:	d10e      	bne.n	800444c <SD_disk_initialize+0x158>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 800442e:	2100      	movs	r1, #0
 8004430:	2077      	movs	r0, #119	@ 0x77
 8004432:	f7ff ff0a 	bl	800424a <SD_SendCmd>
 8004436:	4603      	mov	r3, r0
 8004438:	2b01      	cmp	r3, #1
 800443a:	d80e      	bhi.n	800445a <SD_disk_initialize+0x166>
 800443c:	2100      	movs	r1, #0
 800443e:	2069      	movs	r0, #105	@ 0x69
 8004440:	f7ff ff03 	bl	800424a <SD_SendCmd>
 8004444:	4603      	mov	r3, r0
 8004446:	2b00      	cmp	r3, #0
 8004448:	d107      	bne.n	800445a <SD_disk_initialize+0x166>
 800444a:	e00d      	b.n	8004468 <SD_disk_initialize+0x174>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800444c:	2100      	movs	r1, #0
 800444e:	2041      	movs	r0, #65	@ 0x41
 8004450:	f7ff fefb 	bl	800424a <SD_SendCmd>
 8004454:	4603      	mov	r3, r0
 8004456:	2b00      	cmp	r3, #0
 8004458:	d005      	beq.n	8004466 <SD_disk_initialize+0x172>
				}

			} while (Timer1);
 800445a:	4b1a      	ldr	r3, [pc, #104]	@ (80044c4 <SD_disk_initialize+0x1d0>)
 800445c:	881b      	ldrh	r3, [r3, #0]
 800445e:	b29b      	uxth	r3, r3
 8004460:	2b00      	cmp	r3, #0
 8004462:	d1e1      	bne.n	8004428 <SD_disk_initialize+0x134>
 8004464:	e000      	b.n	8004468 <SD_disk_initialize+0x174>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8004466:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8004468:	4b16      	ldr	r3, [pc, #88]	@ (80044c4 <SD_disk_initialize+0x1d0>)
 800446a:	881b      	ldrh	r3, [r3, #0]
 800446c:	b29b      	uxth	r3, r3
 800446e:	2b00      	cmp	r3, #0
 8004470:	d007      	beq.n	8004482 <SD_disk_initialize+0x18e>
 8004472:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004476:	2050      	movs	r0, #80	@ 0x50
 8004478:	f7ff fee7 	bl	800424a <SD_SendCmd>
 800447c:	4603      	mov	r3, r0
 800447e:	2b00      	cmp	r3, #0
 8004480:	d001      	beq.n	8004486 <SD_disk_initialize+0x192>
 8004482:	2300      	movs	r3, #0
 8004484:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8004486:	4a10      	ldr	r2, [pc, #64]	@ (80044c8 <SD_disk_initialize+0x1d4>)
 8004488:	7bbb      	ldrb	r3, [r7, #14]
 800448a:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 800448c:	f7ff fd88 	bl	8003fa0 <DESELECT>
	SPI_RxByte();
 8004490:	f7ff fdc8 	bl	8004024 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8004494:	7bbb      	ldrb	r3, [r7, #14]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d008      	beq.n	80044ac <SD_disk_initialize+0x1b8>
	{
		Stat &= ~STA_NOINIT;
 800449a:	4b09      	ldr	r3, [pc, #36]	@ (80044c0 <SD_disk_initialize+0x1cc>)
 800449c:	781b      	ldrb	r3, [r3, #0]
 800449e:	b2db      	uxtb	r3, r3
 80044a0:	f023 0301 	bic.w	r3, r3, #1
 80044a4:	b2da      	uxtb	r2, r3
 80044a6:	4b06      	ldr	r3, [pc, #24]	@ (80044c0 <SD_disk_initialize+0x1cc>)
 80044a8:	701a      	strb	r2, [r3, #0]
 80044aa:	e001      	b.n	80044b0 <SD_disk_initialize+0x1bc>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 80044ac:	f7ff fe42 	bl	8004134 <SD_PowerOff>
	}

	return Stat;
 80044b0:	4b03      	ldr	r3, [pc, #12]	@ (80044c0 <SD_disk_initialize+0x1cc>)
 80044b2:	781b      	ldrb	r3, [r3, #0]
 80044b4:	b2db      	uxtb	r3, r3
}
 80044b6:	4618      	mov	r0, r3
 80044b8:	3714      	adds	r7, #20
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bd90      	pop	{r4, r7, pc}
 80044be:	bf00      	nop
 80044c0:	24000000 	.word	0x24000000
 80044c4:	24000378 	.word	0x24000378
 80044c8:	24000194 	.word	0x24000194

080044cc <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 80044cc:	b480      	push	{r7}
 80044ce:	b083      	sub	sp, #12
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	4603      	mov	r3, r0
 80044d4:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 80044d6:	79fb      	ldrb	r3, [r7, #7]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d001      	beq.n	80044e0 <SD_disk_status+0x14>
 80044dc:	2301      	movs	r3, #1
 80044de:	e002      	b.n	80044e6 <SD_disk_status+0x1a>
	return Stat;
 80044e0:	4b04      	ldr	r3, [pc, #16]	@ (80044f4 <SD_disk_status+0x28>)
 80044e2:	781b      	ldrb	r3, [r3, #0]
 80044e4:	b2db      	uxtb	r3, r3
}
 80044e6:	4618      	mov	r0, r3
 80044e8:	370c      	adds	r7, #12
 80044ea:	46bd      	mov	sp, r7
 80044ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f0:	4770      	bx	lr
 80044f2:	bf00      	nop
 80044f4:	24000000 	.word	0x24000000

080044f8 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b084      	sub	sp, #16
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	60b9      	str	r1, [r7, #8]
 8004500:	607a      	str	r2, [r7, #4]
 8004502:	603b      	str	r3, [r7, #0]
 8004504:	4603      	mov	r3, r0
 8004506:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8004508:	7bfb      	ldrb	r3, [r7, #15]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d102      	bne.n	8004514 <SD_disk_read+0x1c>
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d101      	bne.n	8004518 <SD_disk_read+0x20>
 8004514:	2304      	movs	r3, #4
 8004516:	e051      	b.n	80045bc <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8004518:	4b2a      	ldr	r3, [pc, #168]	@ (80045c4 <SD_disk_read+0xcc>)
 800451a:	781b      	ldrb	r3, [r3, #0]
 800451c:	b2db      	uxtb	r3, r3
 800451e:	f003 0301 	and.w	r3, r3, #1
 8004522:	2b00      	cmp	r3, #0
 8004524:	d001      	beq.n	800452a <SD_disk_read+0x32>
 8004526:	2303      	movs	r3, #3
 8004528:	e048      	b.n	80045bc <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 800452a:	4b27      	ldr	r3, [pc, #156]	@ (80045c8 <SD_disk_read+0xd0>)
 800452c:	781b      	ldrb	r3, [r3, #0]
 800452e:	f003 0304 	and.w	r3, r3, #4
 8004532:	2b00      	cmp	r3, #0
 8004534:	d102      	bne.n	800453c <SD_disk_read+0x44>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	025b      	lsls	r3, r3, #9
 800453a:	607b      	str	r3, [r7, #4]

	SELECT();
 800453c:	f7ff fd24 	bl	8003f88 <SELECT>

	if (count == 1)
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	2b01      	cmp	r3, #1
 8004544:	d111      	bne.n	800456a <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8004546:	6879      	ldr	r1, [r7, #4]
 8004548:	2051      	movs	r0, #81	@ 0x51
 800454a:	f7ff fe7e 	bl	800424a <SD_SendCmd>
 800454e:	4603      	mov	r3, r0
 8004550:	2b00      	cmp	r3, #0
 8004552:	d129      	bne.n	80045a8 <SD_disk_read+0xb0>
 8004554:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004558:	68b8      	ldr	r0, [r7, #8]
 800455a:	f7ff fe03 	bl	8004164 <SD_RxDataBlock>
 800455e:	4603      	mov	r3, r0
 8004560:	2b00      	cmp	r3, #0
 8004562:	d021      	beq.n	80045a8 <SD_disk_read+0xb0>
 8004564:	2300      	movs	r3, #0
 8004566:	603b      	str	r3, [r7, #0]
 8004568:	e01e      	b.n	80045a8 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 800456a:	6879      	ldr	r1, [r7, #4]
 800456c:	2052      	movs	r0, #82	@ 0x52
 800456e:	f7ff fe6c 	bl	800424a <SD_SendCmd>
 8004572:	4603      	mov	r3, r0
 8004574:	2b00      	cmp	r3, #0
 8004576:	d117      	bne.n	80045a8 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8004578:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800457c:	68b8      	ldr	r0, [r7, #8]
 800457e:	f7ff fdf1 	bl	8004164 <SD_RxDataBlock>
 8004582:	4603      	mov	r3, r0
 8004584:	2b00      	cmp	r3, #0
 8004586:	d00a      	beq.n	800459e <SD_disk_read+0xa6>
				buff += 512;
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800458e:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	3b01      	subs	r3, #1
 8004594:	603b      	str	r3, [r7, #0]
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d1ed      	bne.n	8004578 <SD_disk_read+0x80>
 800459c:	e000      	b.n	80045a0 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 800459e:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 80045a0:	2100      	movs	r1, #0
 80045a2:	204c      	movs	r0, #76	@ 0x4c
 80045a4:	f7ff fe51 	bl	800424a <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 80045a8:	f7ff fcfa 	bl	8003fa0 <DESELECT>
	SPI_RxByte();
 80045ac:	f7ff fd3a 	bl	8004024 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	bf14      	ite	ne
 80045b6:	2301      	movne	r3, #1
 80045b8:	2300      	moveq	r3, #0
 80045ba:	b2db      	uxtb	r3, r3
}
 80045bc:	4618      	mov	r0, r3
 80045be:	3710      	adds	r7, #16
 80045c0:	46bd      	mov	sp, r7
 80045c2:	bd80      	pop	{r7, pc}
 80045c4:	24000000 	.word	0x24000000
 80045c8:	24000194 	.word	0x24000194

080045cc <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b084      	sub	sp, #16
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	60b9      	str	r1, [r7, #8]
 80045d4:	607a      	str	r2, [r7, #4]
 80045d6:	603b      	str	r3, [r7, #0]
 80045d8:	4603      	mov	r3, r0
 80045da:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 80045dc:	7bfb      	ldrb	r3, [r7, #15]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d102      	bne.n	80045e8 <SD_disk_write+0x1c>
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d101      	bne.n	80045ec <SD_disk_write+0x20>
 80045e8:	2304      	movs	r3, #4
 80045ea:	e06b      	b.n	80046c4 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 80045ec:	4b37      	ldr	r3, [pc, #220]	@ (80046cc <SD_disk_write+0x100>)
 80045ee:	781b      	ldrb	r3, [r3, #0]
 80045f0:	b2db      	uxtb	r3, r3
 80045f2:	f003 0301 	and.w	r3, r3, #1
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d001      	beq.n	80045fe <SD_disk_write+0x32>
 80045fa:	2303      	movs	r3, #3
 80045fc:	e062      	b.n	80046c4 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 80045fe:	4b33      	ldr	r3, [pc, #204]	@ (80046cc <SD_disk_write+0x100>)
 8004600:	781b      	ldrb	r3, [r3, #0]
 8004602:	b2db      	uxtb	r3, r3
 8004604:	f003 0304 	and.w	r3, r3, #4
 8004608:	2b00      	cmp	r3, #0
 800460a:	d001      	beq.n	8004610 <SD_disk_write+0x44>
 800460c:	2302      	movs	r3, #2
 800460e:	e059      	b.n	80046c4 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8004610:	4b2f      	ldr	r3, [pc, #188]	@ (80046d0 <SD_disk_write+0x104>)
 8004612:	781b      	ldrb	r3, [r3, #0]
 8004614:	f003 0304 	and.w	r3, r3, #4
 8004618:	2b00      	cmp	r3, #0
 800461a:	d102      	bne.n	8004622 <SD_disk_write+0x56>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	025b      	lsls	r3, r3, #9
 8004620:	607b      	str	r3, [r7, #4]

	SELECT();
 8004622:	f7ff fcb1 	bl	8003f88 <SELECT>

	if (count == 1)
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	2b01      	cmp	r3, #1
 800462a:	d110      	bne.n	800464e <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 800462c:	6879      	ldr	r1, [r7, #4]
 800462e:	2058      	movs	r0, #88	@ 0x58
 8004630:	f7ff fe0b 	bl	800424a <SD_SendCmd>
 8004634:	4603      	mov	r3, r0
 8004636:	2b00      	cmp	r3, #0
 8004638:	d13a      	bne.n	80046b0 <SD_disk_write+0xe4>
 800463a:	21fe      	movs	r1, #254	@ 0xfe
 800463c:	68b8      	ldr	r0, [r7, #8]
 800463e:	f7ff fdc1 	bl	80041c4 <SD_TxDataBlock>
 8004642:	4603      	mov	r3, r0
 8004644:	2b00      	cmp	r3, #0
 8004646:	d033      	beq.n	80046b0 <SD_disk_write+0xe4>
			count = 0;
 8004648:	2300      	movs	r3, #0
 800464a:	603b      	str	r3, [r7, #0]
 800464c:	e030      	b.n	80046b0 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 800464e:	4b20      	ldr	r3, [pc, #128]	@ (80046d0 <SD_disk_write+0x104>)
 8004650:	781b      	ldrb	r3, [r3, #0]
 8004652:	f003 0302 	and.w	r3, r3, #2
 8004656:	2b00      	cmp	r3, #0
 8004658:	d007      	beq.n	800466a <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 800465a:	2100      	movs	r1, #0
 800465c:	2077      	movs	r0, #119	@ 0x77
 800465e:	f7ff fdf4 	bl	800424a <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8004662:	6839      	ldr	r1, [r7, #0]
 8004664:	2057      	movs	r0, #87	@ 0x57
 8004666:	f7ff fdf0 	bl	800424a <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 800466a:	6879      	ldr	r1, [r7, #4]
 800466c:	2059      	movs	r0, #89	@ 0x59
 800466e:	f7ff fdec 	bl	800424a <SD_SendCmd>
 8004672:	4603      	mov	r3, r0
 8004674:	2b00      	cmp	r3, #0
 8004676:	d11b      	bne.n	80046b0 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8004678:	21fc      	movs	r1, #252	@ 0xfc
 800467a:	68b8      	ldr	r0, [r7, #8]
 800467c:	f7ff fda2 	bl	80041c4 <SD_TxDataBlock>
 8004680:	4603      	mov	r3, r0
 8004682:	2b00      	cmp	r3, #0
 8004684:	d00a      	beq.n	800469c <SD_disk_write+0xd0>
				buff += 512;
 8004686:	68bb      	ldr	r3, [r7, #8]
 8004688:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800468c:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	3b01      	subs	r3, #1
 8004692:	603b      	str	r3, [r7, #0]
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d1ee      	bne.n	8004678 <SD_disk_write+0xac>
 800469a:	e000      	b.n	800469e <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 800469c:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 800469e:	21fd      	movs	r1, #253	@ 0xfd
 80046a0:	2000      	movs	r0, #0
 80046a2:	f7ff fd8f 	bl	80041c4 <SD_TxDataBlock>
 80046a6:	4603      	mov	r3, r0
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d101      	bne.n	80046b0 <SD_disk_write+0xe4>
			{
				count = 1;
 80046ac:	2301      	movs	r3, #1
 80046ae:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 80046b0:	f7ff fc76 	bl	8003fa0 <DESELECT>
	SPI_RxByte();
 80046b4:	f7ff fcb6 	bl	8004024 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	bf14      	ite	ne
 80046be:	2301      	movne	r3, #1
 80046c0:	2300      	moveq	r3, #0
 80046c2:	b2db      	uxtb	r3, r3
}
 80046c4:	4618      	mov	r0, r3
 80046c6:	3710      	adds	r7, #16
 80046c8:	46bd      	mov	sp, r7
 80046ca:	bd80      	pop	{r7, pc}
 80046cc:	24000000 	.word	0x24000000
 80046d0:	24000194 	.word	0x24000194

080046d4 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 80046d4:	b590      	push	{r4, r7, lr}
 80046d6:	b08b      	sub	sp, #44	@ 0x2c
 80046d8:	af00      	add	r7, sp, #0
 80046da:	4603      	mov	r3, r0
 80046dc:	603a      	str	r2, [r7, #0]
 80046de:	71fb      	strb	r3, [r7, #7]
 80046e0:	460b      	mov	r3, r1
 80046e2:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 80046e8:	79fb      	ldrb	r3, [r7, #7]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d001      	beq.n	80046f2 <SD_disk_ioctl+0x1e>
 80046ee:	2304      	movs	r3, #4
 80046f0:	e113      	b.n	800491a <SD_disk_ioctl+0x246>
	res = RES_ERROR;
 80046f2:	2301      	movs	r3, #1
 80046f4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if (ctrl == CTRL_POWER)
 80046f8:	79bb      	ldrb	r3, [r7, #6]
 80046fa:	2b05      	cmp	r3, #5
 80046fc:	d124      	bne.n	8004748 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 80046fe:	6a3b      	ldr	r3, [r7, #32]
 8004700:	781b      	ldrb	r3, [r3, #0]
 8004702:	2b02      	cmp	r3, #2
 8004704:	d012      	beq.n	800472c <SD_disk_ioctl+0x58>
 8004706:	2b02      	cmp	r3, #2
 8004708:	dc1a      	bgt.n	8004740 <SD_disk_ioctl+0x6c>
 800470a:	2b00      	cmp	r3, #0
 800470c:	d002      	beq.n	8004714 <SD_disk_ioctl+0x40>
 800470e:	2b01      	cmp	r3, #1
 8004710:	d006      	beq.n	8004720 <SD_disk_ioctl+0x4c>
 8004712:	e015      	b.n	8004740 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8004714:	f7ff fd0e 	bl	8004134 <SD_PowerOff>
			res = RES_OK;
 8004718:	2300      	movs	r3, #0
 800471a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 800471e:	e0fa      	b.n	8004916 <SD_disk_ioctl+0x242>
		case 1:
			SD_PowerOn();		/* Power On */
 8004720:	f7ff fcc6 	bl	80040b0 <SD_PowerOn>
			res = RES_OK;
 8004724:	2300      	movs	r3, #0
 8004726:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 800472a:	e0f4      	b.n	8004916 <SD_disk_ioctl+0x242>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 800472c:	6a3b      	ldr	r3, [r7, #32]
 800472e:	1c5c      	adds	r4, r3, #1
 8004730:	f7ff fd0c 	bl	800414c <SD_CheckPower>
 8004734:	4603      	mov	r3, r0
 8004736:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8004738:	2300      	movs	r3, #0
 800473a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 800473e:	e0ea      	b.n	8004916 <SD_disk_ioctl+0x242>
		default:
			res = RES_PARERR;
 8004740:	2304      	movs	r3, #4
 8004742:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8004746:	e0e6      	b.n	8004916 <SD_disk_ioctl+0x242>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8004748:	4b76      	ldr	r3, [pc, #472]	@ (8004924 <SD_disk_ioctl+0x250>)
 800474a:	781b      	ldrb	r3, [r3, #0]
 800474c:	b2db      	uxtb	r3, r3
 800474e:	f003 0301 	and.w	r3, r3, #1
 8004752:	2b00      	cmp	r3, #0
 8004754:	d001      	beq.n	800475a <SD_disk_ioctl+0x86>
 8004756:	2303      	movs	r3, #3
 8004758:	e0df      	b.n	800491a <SD_disk_ioctl+0x246>

		SELECT();
 800475a:	f7ff fc15 	bl	8003f88 <SELECT>

		switch (ctrl)
 800475e:	79bb      	ldrb	r3, [r7, #6]
 8004760:	2b0d      	cmp	r3, #13
 8004762:	f200 80c9 	bhi.w	80048f8 <SD_disk_ioctl+0x224>
 8004766:	a201      	add	r2, pc, #4	@ (adr r2, 800476c <SD_disk_ioctl+0x98>)
 8004768:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800476c:	08004863 	.word	0x08004863
 8004770:	080047a5 	.word	0x080047a5
 8004774:	08004853 	.word	0x08004853
 8004778:	080048f9 	.word	0x080048f9
 800477c:	080048f9 	.word	0x080048f9
 8004780:	080048f9 	.word	0x080048f9
 8004784:	080048f9 	.word	0x080048f9
 8004788:	080048f9 	.word	0x080048f9
 800478c:	080048f9 	.word	0x080048f9
 8004790:	080048f9 	.word	0x080048f9
 8004794:	080048f9 	.word	0x080048f9
 8004798:	08004875 	.word	0x08004875
 800479c:	08004899 	.word	0x08004899
 80047a0:	080048bd 	.word	0x080048bd
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 80047a4:	2100      	movs	r1, #0
 80047a6:	2049      	movs	r0, #73	@ 0x49
 80047a8:	f7ff fd4f 	bl	800424a <SD_SendCmd>
 80047ac:	4603      	mov	r3, r0
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	f040 80a6 	bne.w	8004900 <SD_disk_ioctl+0x22c>
 80047b4:	f107 030c 	add.w	r3, r7, #12
 80047b8:	2110      	movs	r1, #16
 80047ba:	4618      	mov	r0, r3
 80047bc:	f7ff fcd2 	bl	8004164 <SD_RxDataBlock>
 80047c0:	4603      	mov	r3, r0
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	f000 809c 	beq.w	8004900 <SD_disk_ioctl+0x22c>
			{
				if ((csd[0] >> 6) == 1)
 80047c8:	7b3b      	ldrb	r3, [r7, #12]
 80047ca:	099b      	lsrs	r3, r3, #6
 80047cc:	b2db      	uxtb	r3, r3
 80047ce:	2b01      	cmp	r3, #1
 80047d0:	d10d      	bne.n	80047ee <SD_disk_ioctl+0x11a>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 80047d2:	7d7b      	ldrb	r3, [r7, #21]
 80047d4:	461a      	mov	r2, r3
 80047d6:	7d3b      	ldrb	r3, [r7, #20]
 80047d8:	021b      	lsls	r3, r3, #8
 80047da:	b29b      	uxth	r3, r3
 80047dc:	4413      	add	r3, r2
 80047de:	b29b      	uxth	r3, r3
 80047e0:	3301      	adds	r3, #1
 80047e2:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 80047e4:	8bfb      	ldrh	r3, [r7, #30]
 80047e6:	029a      	lsls	r2, r3, #10
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	601a      	str	r2, [r3, #0]
 80047ec:	e02d      	b.n	800484a <SD_disk_ioctl+0x176>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80047ee:	7c7b      	ldrb	r3, [r7, #17]
 80047f0:	f003 030f 	and.w	r3, r3, #15
 80047f4:	b2da      	uxtb	r2, r3
 80047f6:	7dbb      	ldrb	r3, [r7, #22]
 80047f8:	09db      	lsrs	r3, r3, #7
 80047fa:	b2db      	uxtb	r3, r3
 80047fc:	4413      	add	r3, r2
 80047fe:	b2da      	uxtb	r2, r3
 8004800:	7d7b      	ldrb	r3, [r7, #21]
 8004802:	005b      	lsls	r3, r3, #1
 8004804:	b2db      	uxtb	r3, r3
 8004806:	f003 0306 	and.w	r3, r3, #6
 800480a:	b2db      	uxtb	r3, r3
 800480c:	4413      	add	r3, r2
 800480e:	b2db      	uxtb	r3, r3
 8004810:	3302      	adds	r3, #2
 8004812:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8004816:	7d3b      	ldrb	r3, [r7, #20]
 8004818:	099b      	lsrs	r3, r3, #6
 800481a:	b2db      	uxtb	r3, r3
 800481c:	461a      	mov	r2, r3
 800481e:	7cfb      	ldrb	r3, [r7, #19]
 8004820:	009b      	lsls	r3, r3, #2
 8004822:	b29b      	uxth	r3, r3
 8004824:	4413      	add	r3, r2
 8004826:	b29a      	uxth	r2, r3
 8004828:	7cbb      	ldrb	r3, [r7, #18]
 800482a:	029b      	lsls	r3, r3, #10
 800482c:	b29b      	uxth	r3, r3
 800482e:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004832:	b29b      	uxth	r3, r3
 8004834:	4413      	add	r3, r2
 8004836:	b29b      	uxth	r3, r3
 8004838:	3301      	adds	r3, #1
 800483a:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 800483c:	8bfa      	ldrh	r2, [r7, #30]
 800483e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004842:	3b09      	subs	r3, #9
 8004844:	409a      	lsls	r2, r3
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 800484a:	2300      	movs	r3, #0
 800484c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
			break;
 8004850:	e056      	b.n	8004900 <SD_disk_ioctl+0x22c>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004858:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 800485a:	2300      	movs	r3, #0
 800485c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8004860:	e055      	b.n	800490e <SD_disk_ioctl+0x23a>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8004862:	f7ff fc0b 	bl	800407c <SD_ReadyWait>
 8004866:	4603      	mov	r3, r0
 8004868:	2bff      	cmp	r3, #255	@ 0xff
 800486a:	d14b      	bne.n	8004904 <SD_disk_ioctl+0x230>
 800486c:	2300      	movs	r3, #0
 800486e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8004872:	e047      	b.n	8004904 <SD_disk_ioctl+0x230>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8004874:	2100      	movs	r1, #0
 8004876:	2049      	movs	r0, #73	@ 0x49
 8004878:	f7ff fce7 	bl	800424a <SD_SendCmd>
 800487c:	4603      	mov	r3, r0
 800487e:	2b00      	cmp	r3, #0
 8004880:	d142      	bne.n	8004908 <SD_disk_ioctl+0x234>
 8004882:	2110      	movs	r1, #16
 8004884:	6a38      	ldr	r0, [r7, #32]
 8004886:	f7ff fc6d 	bl	8004164 <SD_RxDataBlock>
 800488a:	4603      	mov	r3, r0
 800488c:	2b00      	cmp	r3, #0
 800488e:	d03b      	beq.n	8004908 <SD_disk_ioctl+0x234>
 8004890:	2300      	movs	r3, #0
 8004892:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8004896:	e037      	b.n	8004908 <SD_disk_ioctl+0x234>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8004898:	2100      	movs	r1, #0
 800489a:	204a      	movs	r0, #74	@ 0x4a
 800489c:	f7ff fcd5 	bl	800424a <SD_SendCmd>
 80048a0:	4603      	mov	r3, r0
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d132      	bne.n	800490c <SD_disk_ioctl+0x238>
 80048a6:	2110      	movs	r1, #16
 80048a8:	6a38      	ldr	r0, [r7, #32]
 80048aa:	f7ff fc5b 	bl	8004164 <SD_RxDataBlock>
 80048ae:	4603      	mov	r3, r0
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d02b      	beq.n	800490c <SD_disk_ioctl+0x238>
 80048b4:	2300      	movs	r3, #0
 80048b6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 80048ba:	e027      	b.n	800490c <SD_disk_ioctl+0x238>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 80048bc:	2100      	movs	r1, #0
 80048be:	207a      	movs	r0, #122	@ 0x7a
 80048c0:	f7ff fcc3 	bl	800424a <SD_SendCmd>
 80048c4:	4603      	mov	r3, r0
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d116      	bne.n	80048f8 <SD_disk_ioctl+0x224>
			{
				for (n = 0; n < 4; n++)
 80048ca:	2300      	movs	r3, #0
 80048cc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80048d0:	e00b      	b.n	80048ea <SD_disk_ioctl+0x216>
				{
					*ptr++ = SPI_RxByte();
 80048d2:	6a3c      	ldr	r4, [r7, #32]
 80048d4:	1c63      	adds	r3, r4, #1
 80048d6:	623b      	str	r3, [r7, #32]
 80048d8:	f7ff fba4 	bl	8004024 <SPI_RxByte>
 80048dc:	4603      	mov	r3, r0
 80048de:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 80048e0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80048e4:	3301      	adds	r3, #1
 80048e6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80048ea:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80048ee:	2b03      	cmp	r3, #3
 80048f0:	d9ef      	bls.n	80048d2 <SD_disk_ioctl+0x1fe>
				}
				res = RES_OK;
 80048f2:	2300      	movs	r3, #0
 80048f4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
		default:
			res = RES_PARERR;
 80048f8:	2304      	movs	r3, #4
 80048fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80048fe:	e006      	b.n	800490e <SD_disk_ioctl+0x23a>
			break;
 8004900:	bf00      	nop
 8004902:	e004      	b.n	800490e <SD_disk_ioctl+0x23a>
			break;
 8004904:	bf00      	nop
 8004906:	e002      	b.n	800490e <SD_disk_ioctl+0x23a>
			break;
 8004908:	bf00      	nop
 800490a:	e000      	b.n	800490e <SD_disk_ioctl+0x23a>
			break;
 800490c:	bf00      	nop
		}

		DESELECT();
 800490e:	f7ff fb47 	bl	8003fa0 <DESELECT>
		SPI_RxByte();
 8004912:	f7ff fb87 	bl	8004024 <SPI_RxByte>
	}

	return res;
 8004916:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800491a:	4618      	mov	r0, r3
 800491c:	372c      	adds	r7, #44	@ 0x2c
 800491e:	46bd      	mov	sp, r7
 8004920:	bd90      	pop	{r4, r7, pc}
 8004922:	bf00      	nop
 8004924:	24000000 	.word	0x24000000

08004928 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b08e      	sub	sp, #56	@ 0x38
 800492c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800492e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004932:	2200      	movs	r2, #0
 8004934:	601a      	str	r2, [r3, #0]
 8004936:	605a      	str	r2, [r3, #4]
 8004938:	609a      	str	r2, [r3, #8]
 800493a:	60da      	str	r2, [r3, #12]
 800493c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800493e:	4b8b      	ldr	r3, [pc, #556]	@ (8004b6c <MX_GPIO_Init+0x244>)
 8004940:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004944:	4a89      	ldr	r2, [pc, #548]	@ (8004b6c <MX_GPIO_Init+0x244>)
 8004946:	f043 0310 	orr.w	r3, r3, #16
 800494a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800494e:	4b87      	ldr	r3, [pc, #540]	@ (8004b6c <MX_GPIO_Init+0x244>)
 8004950:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004954:	f003 0310 	and.w	r3, r3, #16
 8004958:	623b      	str	r3, [r7, #32]
 800495a:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800495c:	4b83      	ldr	r3, [pc, #524]	@ (8004b6c <MX_GPIO_Init+0x244>)
 800495e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004962:	4a82      	ldr	r2, [pc, #520]	@ (8004b6c <MX_GPIO_Init+0x244>)
 8004964:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004968:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800496c:	4b7f      	ldr	r3, [pc, #508]	@ (8004b6c <MX_GPIO_Init+0x244>)
 800496e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004972:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004976:	61fb      	str	r3, [r7, #28]
 8004978:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800497a:	4b7c      	ldr	r3, [pc, #496]	@ (8004b6c <MX_GPIO_Init+0x244>)
 800497c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004980:	4a7a      	ldr	r2, [pc, #488]	@ (8004b6c <MX_GPIO_Init+0x244>)
 8004982:	f043 0301 	orr.w	r3, r3, #1
 8004986:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800498a:	4b78      	ldr	r3, [pc, #480]	@ (8004b6c <MX_GPIO_Init+0x244>)
 800498c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004990:	f003 0301 	and.w	r3, r3, #1
 8004994:	61bb      	str	r3, [r7, #24]
 8004996:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004998:	4b74      	ldr	r3, [pc, #464]	@ (8004b6c <MX_GPIO_Init+0x244>)
 800499a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800499e:	4a73      	ldr	r2, [pc, #460]	@ (8004b6c <MX_GPIO_Init+0x244>)
 80049a0:	f043 0320 	orr.w	r3, r3, #32
 80049a4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80049a8:	4b70      	ldr	r3, [pc, #448]	@ (8004b6c <MX_GPIO_Init+0x244>)
 80049aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80049ae:	f003 0320 	and.w	r3, r3, #32
 80049b2:	617b      	str	r3, [r7, #20]
 80049b4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80049b6:	4b6d      	ldr	r3, [pc, #436]	@ (8004b6c <MX_GPIO_Init+0x244>)
 80049b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80049bc:	4a6b      	ldr	r2, [pc, #428]	@ (8004b6c <MX_GPIO_Init+0x244>)
 80049be:	f043 0302 	orr.w	r3, r3, #2
 80049c2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80049c6:	4b69      	ldr	r3, [pc, #420]	@ (8004b6c <MX_GPIO_Init+0x244>)
 80049c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80049cc:	f003 0302 	and.w	r3, r3, #2
 80049d0:	613b      	str	r3, [r7, #16]
 80049d2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80049d4:	4b65      	ldr	r3, [pc, #404]	@ (8004b6c <MX_GPIO_Init+0x244>)
 80049d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80049da:	4a64      	ldr	r2, [pc, #400]	@ (8004b6c <MX_GPIO_Init+0x244>)
 80049dc:	f043 0308 	orr.w	r3, r3, #8
 80049e0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80049e4:	4b61      	ldr	r3, [pc, #388]	@ (8004b6c <MX_GPIO_Init+0x244>)
 80049e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80049ea:	f003 0308 	and.w	r3, r3, #8
 80049ee:	60fb      	str	r3, [r7, #12]
 80049f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80049f2:	4b5e      	ldr	r3, [pc, #376]	@ (8004b6c <MX_GPIO_Init+0x244>)
 80049f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80049f8:	4a5c      	ldr	r2, [pc, #368]	@ (8004b6c <MX_GPIO_Init+0x244>)
 80049fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80049fe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004a02:	4b5a      	ldr	r3, [pc, #360]	@ (8004b6c <MX_GPIO_Init+0x244>)
 8004a04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004a08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a0c:	60bb      	str	r3, [r7, #8]
 8004a0e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004a10:	4b56      	ldr	r3, [pc, #344]	@ (8004b6c <MX_GPIO_Init+0x244>)
 8004a12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004a16:	4a55      	ldr	r2, [pc, #340]	@ (8004b6c <MX_GPIO_Init+0x244>)
 8004a18:	f043 0304 	orr.w	r3, r3, #4
 8004a1c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004a20:	4b52      	ldr	r3, [pc, #328]	@ (8004b6c <MX_GPIO_Init+0x244>)
 8004a22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004a26:	f003 0304 	and.w	r3, r3, #4
 8004a2a:	607b      	str	r3, [r7, #4]
 8004a2c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED_6_Pin|LED_G_Pin, GPIO_PIN_RESET);
 8004a2e:	2200      	movs	r2, #0
 8004a30:	f248 0108 	movw	r1, #32776	@ 0x8008
 8004a34:	484e      	ldr	r0, [pc, #312]	@ (8004b70 <MX_GPIO_Init+0x248>)
 8004a36:	f009 fd45 	bl	800e4c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_Y_Pin|LED_R_Pin|NRF24_CE_Pin|NRF24_CSN_Pin, GPIO_PIN_RESET);
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	f44f 614c 	mov.w	r1, #3264	@ 0xcc0
 8004a40:	484c      	ldr	r0, [pc, #304]	@ (8004b74 <MX_GPIO_Init+0x24c>)
 8004a42:	f009 fd3f 	bl	800e4c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, uSD_LED_Pin|uSD_SC_Pin, GPIO_PIN_RESET);
 8004a46:	2200      	movs	r2, #0
 8004a48:	f44f 4108 	mov.w	r1, #34816	@ 0x8800
 8004a4c:	484a      	ldr	r0, [pc, #296]	@ (8004b78 <MX_GPIO_Init+0x250>)
 8004a4e:	f009 fd39 	bl	800e4c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESC_Power_GPIO_Port, ESC_Power_Pin, GPIO_PIN_RESET);
 8004a52:	2200      	movs	r2, #0
 8004a54:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004a58:	4848      	ldr	r0, [pc, #288]	@ (8004b7c <MX_GPIO_Init+0x254>)
 8004a5a:	f009 fd33 	bl	800e4c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_7_Pin|LED_5_Pin, GPIO_PIN_RESET);
 8004a5e:	2200      	movs	r2, #0
 8004a60:	f44f 4101 	mov.w	r1, #33024	@ 0x8100
 8004a64:	4846      	ldr	r0, [pc, #280]	@ (8004b80 <MX_GPIO_Init+0x258>)
 8004a66:	f009 fd2d 	bl	800e4c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_6_Pin LED_G_Pin */
  GPIO_InitStruct.Pin = LED_6_Pin|LED_G_Pin;
 8004a6a:	f248 0308 	movw	r3, #32776	@ 0x8008
 8004a6e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004a70:	2301      	movs	r3, #1
 8004a72:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a74:	2300      	movs	r3, #0
 8004a76:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a78:	2300      	movs	r3, #0
 8004a7a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004a7c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004a80:	4619      	mov	r1, r3
 8004a82:	483b      	ldr	r0, [pc, #236]	@ (8004b70 <MX_GPIO_Init+0x248>)
 8004a84:	f009 fb5e 	bl	800e144 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_Y_Pin LED_R_Pin NRF24_CE_Pin NRF24_CSN_Pin */
  GPIO_InitStruct.Pin = LED_Y_Pin|LED_R_Pin|NRF24_CE_Pin|NRF24_CSN_Pin;
 8004a88:	f44f 634c 	mov.w	r3, #3264	@ 0xcc0
 8004a8c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004a8e:	2301      	movs	r3, #1
 8004a90:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a92:	2300      	movs	r3, #0
 8004a94:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a96:	2300      	movs	r3, #0
 8004a98:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004a9a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004a9e:	4619      	mov	r1, r3
 8004aa0:	4834      	ldr	r0, [pc, #208]	@ (8004b74 <MX_GPIO_Init+0x24c>)
 8004aa2:	f009 fb4f 	bl	800e144 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detection_Pin */
  GPIO_InitStruct.Pin = uSD_Detection_Pin;
 8004aa6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004aaa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004aac:	2300      	movs	r3, #0
 8004aae:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(uSD_Detection_GPIO_Port, &GPIO_InitStruct);
 8004ab4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004ab8:	4619      	mov	r1, r3
 8004aba:	482e      	ldr	r0, [pc, #184]	@ (8004b74 <MX_GPIO_Init+0x24c>)
 8004abc:	f009 fb42 	bl	800e144 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_LED_Pin */
  GPIO_InitStruct.Pin = uSD_LED_Pin;
 8004ac0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004ac4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004aca:	2300      	movs	r3, #0
 8004acc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ace:	2300      	movs	r3, #0
 8004ad0:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(uSD_LED_GPIO_Port, &GPIO_InitStruct);
 8004ad2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004ad6:	4619      	mov	r1, r3
 8004ad8:	4827      	ldr	r0, [pc, #156]	@ (8004b78 <MX_GPIO_Init+0x250>)
 8004ada:	f009 fb33 	bl	800e144 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_SC_Pin */
  GPIO_InitStruct.Pin = uSD_SC_Pin;
 8004ade:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004ae2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ae8:	2300      	movs	r3, #0
 8004aea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8004aec:	2301      	movs	r3, #1
 8004aee:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(uSD_SC_GPIO_Port, &GPIO_InitStruct);
 8004af0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004af4:	4619      	mov	r1, r3
 8004af6:	4820      	ldr	r0, [pc, #128]	@ (8004b78 <MX_GPIO_Init+0x250>)
 8004af8:	f009 fb24 	bl	800e144 <HAL_GPIO_Init>

  /*Configure GPIO pin : ESC_Power_Pin */
  GPIO_InitStruct.Pin = ESC_Power_Pin;
 8004afc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004b00:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004b02:	2301      	movs	r3, #1
 8004b04:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b06:	2300      	movs	r3, #0
 8004b08:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(ESC_Power_GPIO_Port, &GPIO_InitStruct);
 8004b0e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004b12:	4619      	mov	r1, r3
 8004b14:	4819      	ldr	r0, [pc, #100]	@ (8004b7c <MX_GPIO_Init+0x254>)
 8004b16:	f009 fb15 	bl	800e144 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_7_Pin LED_5_Pin */
  GPIO_InitStruct.Pin = LED_7_Pin|LED_5_Pin;
 8004b1a:	f44f 4301 	mov.w	r3, #33024	@ 0x8100
 8004b1e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004b20:	2301      	movs	r3, #1
 8004b22:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b24:	2300      	movs	r3, #0
 8004b26:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b28:	2300      	movs	r3, #0
 8004b2a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b2c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004b30:	4619      	mov	r1, r3
 8004b32:	4813      	ldr	r0, [pc, #76]	@ (8004b80 <MX_GPIO_Init+0x258>)
 8004b34:	f009 fb06 	bl	800e144 <HAL_GPIO_Init>

  /*Configure GPIO pin : NRF24_IRQ_Pin */
  GPIO_InitStruct.Pin = NRF24_IRQ_Pin;
 8004b38:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004b3c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004b3e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8004b42:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b44:	2300      	movs	r3, #0
 8004b46:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(NRF24_IRQ_GPIO_Port, &GPIO_InitStruct);
 8004b48:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004b4c:	4619      	mov	r1, r3
 8004b4e:	480b      	ldr	r0, [pc, #44]	@ (8004b7c <MX_GPIO_Init+0x254>)
 8004b50:	f009 faf8 	bl	800e144 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8004b54:	2200      	movs	r2, #0
 8004b56:	2100      	movs	r1, #0
 8004b58:	2028      	movs	r0, #40	@ 0x28
 8004b5a:	f006 fbf4 	bl	800b346 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004b5e:	2028      	movs	r0, #40	@ 0x28
 8004b60:	f006 fc0b 	bl	800b37a <HAL_NVIC_EnableIRQ>

}
 8004b64:	bf00      	nop
 8004b66:	3738      	adds	r7, #56	@ 0x38
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	bd80      	pop	{r7, pc}
 8004b6c:	58024400 	.word	0x58024400
 8004b70:	58021000 	.word	0x58021000
 8004b74:	58020400 	.word	0x58020400
 8004b78:	58020c00 	.word	0x58020c00
 8004b7c:	58021800 	.word	0x58021800
 8004b80:	58020000 	.word	0x58020000

08004b84 <MX_I2C5_Init>:

I2C_HandleTypeDef hi2c5;

/* I2C5 init function */
void MX_I2C5_Init(void)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	af00      	add	r7, sp, #0
  /* USER CODE END I2C5_Init 0 */

  /* USER CODE BEGIN I2C5_Init 1 */

  /* USER CODE END I2C5_Init 1 */
  hi2c5.Instance = I2C5;
 8004b88:	4b1d      	ldr	r3, [pc, #116]	@ (8004c00 <MX_I2C5_Init+0x7c>)
 8004b8a:	4a1e      	ldr	r2, [pc, #120]	@ (8004c04 <MX_I2C5_Init+0x80>)
 8004b8c:	601a      	str	r2, [r3, #0]
  hi2c5.Init.Timing = 0x00000000;
 8004b8e:	4b1c      	ldr	r3, [pc, #112]	@ (8004c00 <MX_I2C5_Init+0x7c>)
 8004b90:	2200      	movs	r2, #0
 8004b92:	605a      	str	r2, [r3, #4]
  hi2c5.Init.OwnAddress1 = 0;
 8004b94:	4b1a      	ldr	r3, [pc, #104]	@ (8004c00 <MX_I2C5_Init+0x7c>)
 8004b96:	2200      	movs	r2, #0
 8004b98:	609a      	str	r2, [r3, #8]
  hi2c5.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004b9a:	4b19      	ldr	r3, [pc, #100]	@ (8004c00 <MX_I2C5_Init+0x7c>)
 8004b9c:	2201      	movs	r2, #1
 8004b9e:	60da      	str	r2, [r3, #12]
  hi2c5.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004ba0:	4b17      	ldr	r3, [pc, #92]	@ (8004c00 <MX_I2C5_Init+0x7c>)
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	611a      	str	r2, [r3, #16]
  hi2c5.Init.OwnAddress2 = 0;
 8004ba6:	4b16      	ldr	r3, [pc, #88]	@ (8004c00 <MX_I2C5_Init+0x7c>)
 8004ba8:	2200      	movs	r2, #0
 8004baa:	615a      	str	r2, [r3, #20]
  hi2c5.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004bac:	4b14      	ldr	r3, [pc, #80]	@ (8004c00 <MX_I2C5_Init+0x7c>)
 8004bae:	2200      	movs	r2, #0
 8004bb0:	619a      	str	r2, [r3, #24]
  hi2c5.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004bb2:	4b13      	ldr	r3, [pc, #76]	@ (8004c00 <MX_I2C5_Init+0x7c>)
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	61da      	str	r2, [r3, #28]
  hi2c5.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004bb8:	4b11      	ldr	r3, [pc, #68]	@ (8004c00 <MX_I2C5_Init+0x7c>)
 8004bba:	2200      	movs	r2, #0
 8004bbc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c5) != HAL_OK)
 8004bbe:	4810      	ldr	r0, [pc, #64]	@ (8004c00 <MX_I2C5_Init+0x7c>)
 8004bc0:	f009 fcb4 	bl	800e52c <HAL_I2C_Init>
 8004bc4:	4603      	mov	r3, r0
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d001      	beq.n	8004bce <MX_I2C5_Init+0x4a>
  {
    Error_Handler();
 8004bca:	f002 ffd5 	bl	8007b78 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c5, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004bce:	2100      	movs	r1, #0
 8004bd0:	480b      	ldr	r0, [pc, #44]	@ (8004c00 <MX_I2C5_Init+0x7c>)
 8004bd2:	f00c f86d 	bl	8010cb0 <HAL_I2CEx_ConfigAnalogFilter>
 8004bd6:	4603      	mov	r3, r0
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d001      	beq.n	8004be0 <MX_I2C5_Init+0x5c>
  {
    Error_Handler();
 8004bdc:	f002 ffcc 	bl	8007b78 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c5, 0) != HAL_OK)
 8004be0:	2100      	movs	r1, #0
 8004be2:	4807      	ldr	r0, [pc, #28]	@ (8004c00 <MX_I2C5_Init+0x7c>)
 8004be4:	f00c f8af 	bl	8010d46 <HAL_I2CEx_ConfigDigitalFilter>
 8004be8:	4603      	mov	r3, r0
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d001      	beq.n	8004bf2 <MX_I2C5_Init+0x6e>
  {
    Error_Handler();
 8004bee:	f002 ffc3 	bl	8007b78 <Error_Handler>
  }

  /** I2C Enable Fast Mode Plus
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C5);
 8004bf2:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8004bf6:	f00c f8f3 	bl	8010de0 <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C5_Init 2 */

  /* USER CODE END I2C5_Init 2 */

}
 8004bfa:	bf00      	nop
 8004bfc:	bd80      	pop	{r7, pc}
 8004bfe:	bf00      	nop
 8004c00:	24000198 	.word	0x24000198
 8004c04:	40006400 	.word	0x40006400

08004c08 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b0b8      	sub	sp, #224	@ 0xe0
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c10:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8004c14:	2200      	movs	r2, #0
 8004c16:	601a      	str	r2, [r3, #0]
 8004c18:	605a      	str	r2, [r3, #4]
 8004c1a:	609a      	str	r2, [r3, #8]
 8004c1c:	60da      	str	r2, [r3, #12]
 8004c1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004c20:	f107 0310 	add.w	r3, r7, #16
 8004c24:	22b8      	movs	r2, #184	@ 0xb8
 8004c26:	2100      	movs	r1, #0
 8004c28:	4618      	mov	r0, r3
 8004c2a:	f019 f8db 	bl	801dde4 <memset>
  if(i2cHandle->Instance==I2C5)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4a2b      	ldr	r2, [pc, #172]	@ (8004ce0 <HAL_I2C_MspInit+0xd8>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d14f      	bne.n	8004cd8 <HAL_I2C_MspInit+0xd0>

  /* USER CODE END I2C5_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C5;
 8004c38:	f04f 0208 	mov.w	r2, #8
 8004c3c:	f04f 0300 	mov.w	r3, #0
 8004c40:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_CSI;
 8004c44:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8004c48:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004c4c:	f107 0310 	add.w	r3, r7, #16
 8004c50:	4618      	mov	r0, r3
 8004c52:	f00d f889 	bl	8011d68 <HAL_RCCEx_PeriphCLKConfig>
 8004c56:	4603      	mov	r3, r0
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d001      	beq.n	8004c60 <HAL_I2C_MspInit+0x58>
    {
      Error_Handler();
 8004c5c:	f002 ff8c 	bl	8007b78 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004c60:	4b20      	ldr	r3, [pc, #128]	@ (8004ce4 <HAL_I2C_MspInit+0xdc>)
 8004c62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004c66:	4a1f      	ldr	r2, [pc, #124]	@ (8004ce4 <HAL_I2C_MspInit+0xdc>)
 8004c68:	f043 0304 	orr.w	r3, r3, #4
 8004c6c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004c70:	4b1c      	ldr	r3, [pc, #112]	@ (8004ce4 <HAL_I2C_MspInit+0xdc>)
 8004c72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004c76:	f003 0304 	and.w	r3, r3, #4
 8004c7a:	60fb      	str	r3, [r7, #12]
 8004c7c:	68fb      	ldr	r3, [r7, #12]
    /**I2C5 GPIO Configuration
    PC10     ------> I2C5_SDA
    PC11     ------> I2C5_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8004c7e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8004c82:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004c86:	2312      	movs	r3, #18
 8004c88:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c92:	2300      	movs	r3, #0
 8004c94:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C5;
 8004c98:	2304      	movs	r3, #4
 8004c9a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004c9e:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8004ca2:	4619      	mov	r1, r3
 8004ca4:	4810      	ldr	r0, [pc, #64]	@ (8004ce8 <HAL_I2C_MspInit+0xe0>)
 8004ca6:	f009 fa4d 	bl	800e144 <HAL_GPIO_Init>

    /* I2C5 clock enable */
    __HAL_RCC_I2C5_CLK_ENABLE();
 8004caa:	4b0e      	ldr	r3, [pc, #56]	@ (8004ce4 <HAL_I2C_MspInit+0xdc>)
 8004cac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004cb0:	4a0c      	ldr	r2, [pc, #48]	@ (8004ce4 <HAL_I2C_MspInit+0xdc>)
 8004cb2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004cb6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8004cba:	4b0a      	ldr	r3, [pc, #40]	@ (8004ce4 <HAL_I2C_MspInit+0xdc>)
 8004cbc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004cc0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004cc4:	60bb      	str	r3, [r7, #8]
 8004cc6:	68bb      	ldr	r3, [r7, #8]

    /* I2C5 interrupt Init */
    HAL_NVIC_SetPriority(I2C5_EV_IRQn, 1, 0);
 8004cc8:	2200      	movs	r2, #0
 8004cca:	2101      	movs	r1, #1
 8004ccc:	209d      	movs	r0, #157	@ 0x9d
 8004cce:	f006 fb3a 	bl	800b346 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C5_EV_IRQn);
 8004cd2:	209d      	movs	r0, #157	@ 0x9d
 8004cd4:	f006 fb51 	bl	800b37a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C5_MspInit 1 */

  /* USER CODE END I2C5_MspInit 1 */
  }
}
 8004cd8:	bf00      	nop
 8004cda:	37e0      	adds	r7, #224	@ 0xe0
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	bd80      	pop	{r7, pc}
 8004ce0:	40006400 	.word	0x40006400
 8004ce4:	58024400 	.word	0x58024400
 8004ce8:	58020800 	.word	0x58020800

08004cec <__NVIC_SystemReset>:
{
 8004cec:	b480      	push	{r7}
 8004cee:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8004cf0:	f3bf 8f4f 	dsb	sy
}
 8004cf4:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8004cf6:	4b06      	ldr	r3, [pc, #24]	@ (8004d10 <__NVIC_SystemReset+0x24>)
 8004cf8:	68db      	ldr	r3, [r3, #12]
 8004cfa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8004cfe:	4904      	ldr	r1, [pc, #16]	@ (8004d10 <__NVIC_SystemReset+0x24>)
 8004d00:	4b04      	ldr	r3, [pc, #16]	@ (8004d14 <__NVIC_SystemReset+0x28>)
 8004d02:	4313      	orrs	r3, r2
 8004d04:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8004d06:	f3bf 8f4f 	dsb	sy
}
 8004d0a:	bf00      	nop
    __NOP();
 8004d0c:	bf00      	nop
 8004d0e:	e7fd      	b.n	8004d0c <__NVIC_SystemReset+0x20>
 8004d10:	e000ed00 	.word	0xe000ed00
 8004d14:	05fa0004 	.word	0x05fa0004

08004d18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b08a      	sub	sp, #40	@ 0x28
 8004d1c:	af02      	add	r7, sp, #8
//		//oczekiwanie az napiecia na zasilaczu narosnie
//	}
  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8004d1e:	f002 feff 	bl	8007b20 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004d22:	f004 fa01 	bl	8009128 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004d26:	f000 ff85 	bl	8005c34 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8004d2a:	f000 fff5 	bl	8005d18 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004d2e:	f7ff fdfb 	bl	8004928 <MX_GPIO_Init>
  MX_DMA_Init();
 8004d32:	f7fe fcdb 	bl	80036ec <MX_DMA_Init>
  MX_I2C5_Init();
 8004d36:	f7ff ff25 	bl	8004b84 <MX_I2C5_Init>
  MX_SPI6_Init();
 8004d3a:	f002 ff79 	bl	8007c30 <MX_SPI6_Init>
  MX_ADC2_Init();
 8004d3e:	f7fe fbe7 	bl	8003510 <MX_ADC2_Init>
  MX_SPI2_Init();
 8004d42:	f002 ff1f 	bl	8007b84 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8004d46:	f004 f907 	bl	8008f58 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8004d4a:	f003 fe25 	bl	8008998 <MX_TIM1_Init>
  MX_TIM8_Init();
 8004d4e:	f003 ff9b 	bl	8008c88 <MX_TIM8_Init>
  MX_TIM3_Init();
 8004d52:	f003 ff1d 	bl	8008b90 <MX_TIM3_Init>
  MX_FATFS_Init();
 8004d56:	f015 fe91 	bl	801aa7c <MX_FATFS_Init>
  MX_TIM2_Init();
 8004d5a:	f003 fec5 	bl	8008ae8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  	STARTUP = 1;
 8004d5e:	4b9b      	ldr	r3, [pc, #620]	@ (8004fcc <main+0x2b4>)
 8004d60:	2201      	movs	r2, #1
 8004d62:	701a      	strb	r2, [r3, #0]
  	ESC_POWER_1;
 8004d64:	2201      	movs	r2, #1
 8004d66:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004d6a:	4899      	ldr	r0, [pc, #612]	@ (8004fd0 <main+0x2b8>)
 8004d6c:	f009 fbaa 	bl	800e4c4 <HAL_GPIO_WritePin>
  	DRON_ON_GRUND = 1;
 8004d70:	4b98      	ldr	r3, [pc, #608]	@ (8004fd4 <main+0x2bc>)
 8004d72:	2201      	movs	r2, #1
 8004d74:	701a      	strb	r2, [r3, #0]

  	PID_FAC_Pitch[0] = p_pitchfactor;
 8004d76:	4b98      	ldr	r3, [pc, #608]	@ (8004fd8 <main+0x2c0>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4a98      	ldr	r2, [pc, #608]	@ (8004fdc <main+0x2c4>)
 8004d7c:	6013      	str	r3, [r2, #0]
  	PID_FAC_Pitch[1] = i_pitchfactor;
 8004d7e:	4b98      	ldr	r3, [pc, #608]	@ (8004fe0 <main+0x2c8>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4a96      	ldr	r2, [pc, #600]	@ (8004fdc <main+0x2c4>)
 8004d84:	6053      	str	r3, [r2, #4]
  	PID_FAC_Pitch[2] = d_pitchfactor;
 8004d86:	4b97      	ldr	r3, [pc, #604]	@ (8004fe4 <main+0x2cc>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a94      	ldr	r2, [pc, #592]	@ (8004fdc <main+0x2c4>)
 8004d8c:	6093      	str	r3, [r2, #8]
  	PID_FAC_Pitch[4] = 0;
 8004d8e:	4b93      	ldr	r3, [pc, #588]	@ (8004fdc <main+0x2c4>)
 8004d90:	f04f 0200 	mov.w	r2, #0
 8004d94:	611a      	str	r2, [r3, #16]

  	PID_FAC_Rool[0] = p_roolfactor;
 8004d96:	4b94      	ldr	r3, [pc, #592]	@ (8004fe8 <main+0x2d0>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4a94      	ldr	r2, [pc, #592]	@ (8004fec <main+0x2d4>)
 8004d9c:	6013      	str	r3, [r2, #0]
  	PID_FAC_Rool[1] = i_roolfactor;
 8004d9e:	4b94      	ldr	r3, [pc, #592]	@ (8004ff0 <main+0x2d8>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4a92      	ldr	r2, [pc, #584]	@ (8004fec <main+0x2d4>)
 8004da4:	6053      	str	r3, [r2, #4]
  	PID_FAC_Rool[2] = d_roolfactor;
 8004da6:	4b93      	ldr	r3, [pc, #588]	@ (8004ff4 <main+0x2dc>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4a90      	ldr	r2, [pc, #576]	@ (8004fec <main+0x2d4>)
 8004dac:	6093      	str	r3, [r2, #8]
  	PID_FAC_Rool[4] = 0;
 8004dae:	4b8f      	ldr	r3, [pc, #572]	@ (8004fec <main+0x2d4>)
 8004db0:	f04f 0200 	mov.w	r2, #0
 8004db4:	611a      	str	r2, [r3, #16]

  	PID_FAC_Yaw[0] = p_yawfactor;
 8004db6:	4b90      	ldr	r3, [pc, #576]	@ (8004ff8 <main+0x2e0>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4a90      	ldr	r2, [pc, #576]	@ (8004ffc <main+0x2e4>)
 8004dbc:	6013      	str	r3, [r2, #0]
  	PID_FAC_Yaw[1] = i_yawfactor;
 8004dbe:	4b90      	ldr	r3, [pc, #576]	@ (8005000 <main+0x2e8>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4a8e      	ldr	r2, [pc, #568]	@ (8004ffc <main+0x2e4>)
 8004dc4:	6053      	str	r3, [r2, #4]
  	PID_FAC_Yaw[2] = d_yawfactor;
 8004dc6:	4b8f      	ldr	r3, [pc, #572]	@ (8005004 <main+0x2ec>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4a8c      	ldr	r2, [pc, #560]	@ (8004ffc <main+0x2e4>)
 8004dcc:	6093      	str	r3, [r2, #8]
  	PID_FAC_Yaw[4] = 0;
 8004dce:	4b8b      	ldr	r3, [pc, #556]	@ (8004ffc <main+0x2e4>)
 8004dd0:	f04f 0200 	mov.w	r2, #0
 8004dd4:	611a      	str	r2, [r3, #16]


  	ax_ang =0,ay_ang = 0,az_ang = 0, gx_ang = 0, gy_ang = 0, gz_ang = 0;
 8004dd6:	4b8c      	ldr	r3, [pc, #560]	@ (8005008 <main+0x2f0>)
 8004dd8:	f04f 0200 	mov.w	r2, #0
 8004ddc:	601a      	str	r2, [r3, #0]
 8004dde:	4b8b      	ldr	r3, [pc, #556]	@ (800500c <main+0x2f4>)
 8004de0:	f04f 0200 	mov.w	r2, #0
 8004de4:	601a      	str	r2, [r3, #0]
 8004de6:	4b8a      	ldr	r3, [pc, #552]	@ (8005010 <main+0x2f8>)
 8004de8:	f04f 0200 	mov.w	r2, #0
 8004dec:	601a      	str	r2, [r3, #0]
 8004dee:	4b89      	ldr	r3, [pc, #548]	@ (8005014 <main+0x2fc>)
 8004df0:	f04f 0200 	mov.w	r2, #0
 8004df4:	601a      	str	r2, [r3, #0]
 8004df6:	4b88      	ldr	r3, [pc, #544]	@ (8005018 <main+0x300>)
 8004df8:	f04f 0200 	mov.w	r2, #0
 8004dfc:	601a      	str	r2, [r3, #0]
 8004dfe:	4b87      	ldr	r3, [pc, #540]	@ (800501c <main+0x304>)
 8004e00:	f04f 0200 	mov.w	r2, #0
 8004e04:	601a      	str	r2, [r3, #0]
  	Mag_Z = 0;
 8004e06:	4b86      	ldr	r3, [pc, #536]	@ (8005020 <main+0x308>)
 8004e08:	f04f 0200 	mov.w	r2, #0
 8004e0c:	601a      	str	r2, [r3, #0]
  	TIM_inte_SD = 0, TIM_inte = 0;
 8004e0e:	4b85      	ldr	r3, [pc, #532]	@ (8005024 <main+0x30c>)
 8004e10:	2200      	movs	r2, #0
 8004e12:	601a      	str	r2, [r3, #0]
 8004e14:	4b84      	ldr	r3, [pc, #528]	@ (8005028 <main+0x310>)
 8004e16:	2200      	movs	r2, #0
 8004e18:	601a      	str	r2, [r3, #0]
  	NRF_TIM_Inte = 0;
 8004e1a:	4b84      	ldr	r3, [pc, #528]	@ (800502c <main+0x314>)
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	601a      	str	r2, [r3, #0]
  	temp = 0, pres = 0, startpres = 0, ampritude = 0;
 8004e20:	4b83      	ldr	r3, [pc, #524]	@ (8005030 <main+0x318>)
 8004e22:	f04f 0200 	mov.w	r2, #0
 8004e26:	601a      	str	r2, [r3, #0]
 8004e28:	4b82      	ldr	r3, [pc, #520]	@ (8005034 <main+0x31c>)
 8004e2a:	f04f 0200 	mov.w	r2, #0
 8004e2e:	601a      	str	r2, [r3, #0]
 8004e30:	4b81      	ldr	r3, [pc, #516]	@ (8005038 <main+0x320>)
 8004e32:	f04f 0200 	mov.w	r2, #0
 8004e36:	601a      	str	r2, [r3, #0]
 8004e38:	4b80      	ldr	r3, [pc, #512]	@ (800503c <main+0x324>)
 8004e3a:	f04f 0200 	mov.w	r2, #0
 8004e3e:	601a      	str	r2, [r3, #0]
  	last_wanted_pitch_rx = 0;
 8004e40:	4b7f      	ldr	r3, [pc, #508]	@ (8005040 <main+0x328>)
 8004e42:	f04f 0200 	mov.w	r2, #0
 8004e46:	601a      	str	r2, [r3, #0]
  	last_wanted_rool_rx = 0;
 8004e48:	4b7e      	ldr	r3, [pc, #504]	@ (8005044 <main+0x32c>)
 8004e4a:	f04f 0200 	mov.w	r2, #0
 8004e4e:	601a      	str	r2, [r3, #0]
  	last_wanted_yaw_rx = 0;
 8004e50:	4b7d      	ldr	r3, [pc, #500]	@ (8005048 <main+0x330>)
 8004e52:	f04f 0200 	mov.w	r2, #0
 8004e56:	601a      	str	r2, [r3, #0]
  	wanted_thrust = 0;
 8004e58:	4b7c      	ldr	r3, [pc, #496]	@ (800504c <main+0x334>)
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	801a      	strh	r2, [r3, #0]
  	thrust_limit = 10000;
 8004e5e:	4b7c      	ldr	r3, [pc, #496]	@ (8005050 <main+0x338>)
 8004e60:	f242 7210 	movw	r2, #10000	@ 0x2710
 8004e64:	801a      	strh	r2, [r3, #0]
  	FDP_D_Gain_AR = 100;
 8004e66:	4b7b      	ldr	r3, [pc, #492]	@ (8005054 <main+0x33c>)
 8004e68:	2264      	movs	r2, #100	@ 0x64
 8004e6a:	801a      	strh	r2, [r3, #0]
  	FDP_D_Gain = 100;
 8004e6c:	4b7a      	ldr	r3, [pc, #488]	@ (8005058 <main+0x340>)
 8004e6e:	2264      	movs	r2, #100	@ 0x64
 8004e70:	801a      	strh	r2, [r3, #0]
  	old_error_pitch = 0;// ruznica
 8004e72:	4b7a      	ldr	r3, [pc, #488]	@ (800505c <main+0x344>)
 8004e74:	f04f 0200 	mov.w	r2, #0
 8004e78:	601a      	str	r2, [r3, #0]
  	old_error_rool = 0;
 8004e7a:	4b79      	ldr	r3, [pc, #484]	@ (8005060 <main+0x348>)
 8004e7c:	f04f 0200 	mov.w	r2, #0
 8004e80:	601a      	str	r2, [r3, #0]
  	old_error_yaw = 0;
 8004e82:	4b78      	ldr	r3, [pc, #480]	@ (8005064 <main+0x34c>)
 8004e84:	f04f 0200 	mov.w	r2, #0
 8004e88:	601a      	str	r2, [r3, #0]
  	old_error_angular_rate_pitch = 0;// ruznica
 8004e8a:	4b77      	ldr	r3, [pc, #476]	@ (8005068 <main+0x350>)
 8004e8c:	f04f 0200 	mov.w	r2, #0
 8004e90:	601a      	str	r2, [r3, #0]
  	old_error_angular_rate_rool = 0;
 8004e92:	4b76      	ldr	r3, [pc, #472]	@ (800506c <main+0x354>)
 8004e94:	f04f 0200 	mov.w	r2, #0
 8004e98:	601a      	str	r2, [r3, #0]
  	old_error_angular_rate_yaw = 0;
 8004e9a:	4b75      	ldr	r3, [pc, #468]	@ (8005070 <main+0x358>)
 8004e9c:	f04f 0200 	mov.w	r2, #0
 8004ea0:	601a      	str	r2, [r3, #0]
  	error_sum_pitch = 0;
 8004ea2:	4b74      	ldr	r3, [pc, #464]	@ (8005074 <main+0x35c>)
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	601a      	str	r2, [r3, #0]
  	error_sum_rool = 0;
 8004ea8:	4b73      	ldr	r3, [pc, #460]	@ (8005078 <main+0x360>)
 8004eaa:	2200      	movs	r2, #0
 8004eac:	601a      	str	r2, [r3, #0]
  	error_sum_yaw = 0;
 8004eae:	4b73      	ldr	r3, [pc, #460]	@ (800507c <main+0x364>)
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	601a      	str	r2, [r3, #0]
  	error_sum_angular_rate_pitch = 0;
 8004eb4:	4b72      	ldr	r3, [pc, #456]	@ (8005080 <main+0x368>)
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	601a      	str	r2, [r3, #0]
  	error_sum_angular_rate_rool = 0;
 8004eba:	4b72      	ldr	r3, [pc, #456]	@ (8005084 <main+0x36c>)
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	601a      	str	r2, [r3, #0]
  	error_sum_angular_rate_yaw = 0;
 8004ec0:	4b71      	ldr	r3, [pc, #452]	@ (8005088 <main+0x370>)
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	601a      	str	r2, [r3, #0]
  	SPEED1 = min_speed;
 8004ec6:	4b71      	ldr	r3, [pc, #452]	@ (800508c <main+0x374>)
 8004ec8:	f642 1204 	movw	r2, #10500	@ 0x2904
 8004ecc:	801a      	strh	r2, [r3, #0]
  	SPEED2 = min_speed;
 8004ece:	4b70      	ldr	r3, [pc, #448]	@ (8005090 <main+0x378>)
 8004ed0:	f642 1204 	movw	r2, #10500	@ 0x2904
 8004ed4:	801a      	strh	r2, [r3, #0]
  	SPEED3 = min_speed;
 8004ed6:	4b6f      	ldr	r3, [pc, #444]	@ (8005094 <main+0x37c>)
 8004ed8:	f642 1204 	movw	r2, #10500	@ 0x2904
 8004edc:	801a      	strh	r2, [r3, #0]
  	SPEED4 = min_speed;
 8004ede:	4b6e      	ldr	r3, [pc, #440]	@ (8005098 <main+0x380>)
 8004ee0:	f642 1204 	movw	r2, #10500	@ 0x2904
 8004ee4:	801a      	strh	r2, [r3, #0]
  	OLD_SPEED1 = min_speed;
 8004ee6:	4b6d      	ldr	r3, [pc, #436]	@ (800509c <main+0x384>)
 8004ee8:	f642 1204 	movw	r2, #10500	@ 0x2904
 8004eec:	801a      	strh	r2, [r3, #0]
  	OLD_SPEED2 = min_speed;
 8004eee:	4b6c      	ldr	r3, [pc, #432]	@ (80050a0 <main+0x388>)
 8004ef0:	f642 1204 	movw	r2, #10500	@ 0x2904
 8004ef4:	801a      	strh	r2, [r3, #0]
  	OLD_SPEED3 = min_speed;
 8004ef6:	4b6b      	ldr	r3, [pc, #428]	@ (80050a4 <main+0x38c>)
 8004ef8:	f642 1204 	movw	r2, #10500	@ 0x2904
 8004efc:	801a      	strh	r2, [r3, #0]
  	OLD_SPEED4 = min_speed;
 8004efe:	4b6a      	ldr	r3, [pc, #424]	@ (80050a8 <main+0x390>)
 8004f00:	f642 1204 	movw	r2, #10500	@ 0x2904
 8004f04:	801a      	strh	r2, [r3, #0]
  	commandready = 0;
 8004f06:	4b69      	ldr	r3, [pc, #420]	@ (80050ac <main+0x394>)
 8004f08:	2200      	movs	r2, #0
 8004f0a:	701a      	strb	r2, [r3, #0]
  	command_ch_num = 0;
 8004f0c:	4b68      	ldr	r3, [pc, #416]	@ (80050b0 <main+0x398>)
 8004f0e:	2200      	movs	r2, #0
 8004f10:	701a      	strb	r2, [r3, #0]
  	Mainloop_Number = 0;
 8004f12:	4b68      	ldr	r3, [pc, #416]	@ (80050b4 <main+0x39c>)
 8004f14:	2200      	movs	r2, #0
 8004f16:	601a      	str	r2, [r3, #0]
  	SD_In_Use = 0;
 8004f18:	4b67      	ldr	r3, [pc, #412]	@ (80050b8 <main+0x3a0>)
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	601a      	str	r2, [r3, #0]
  	wobble_strenght = 1;
 8004f1e:	4b67      	ldr	r3, [pc, #412]	@ (80050bc <main+0x3a4>)
 8004f20:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8004f24:	601a      	str	r2, [r3, #0]
  	MPU6050_IRQ = 0, HMC583L_IRQ = 0, BMP180_IRQ = 0;
 8004f26:	4b66      	ldr	r3, [pc, #408]	@ (80050c0 <main+0x3a8>)
 8004f28:	2200      	movs	r2, #0
 8004f2a:	701a      	strb	r2, [r3, #0]
 8004f2c:	4b65      	ldr	r3, [pc, #404]	@ (80050c4 <main+0x3ac>)
 8004f2e:	2200      	movs	r2, #0
 8004f30:	701a      	strb	r2, [r3, #0]
 8004f32:	4b65      	ldr	r3, [pc, #404]	@ (80050c8 <main+0x3b0>)
 8004f34:	2200      	movs	r2, #0
 8004f36:	701a      	strb	r2, [r3, #0]
  	i = 0, loopnum = 0;
 8004f38:	4b64      	ldr	r3, [pc, #400]	@ (80050cc <main+0x3b4>)
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	601a      	str	r2, [r3, #0]
 8004f3e:	4b64      	ldr	r3, [pc, #400]	@ (80050d0 <main+0x3b8>)
 8004f40:	2200      	movs	r2, #0
 8004f42:	601a      	str	r2, [r3, #0]

  	thrust_values = 0;
 8004f44:	4963      	ldr	r1, [pc, #396]	@ (80050d4 <main+0x3bc>)
 8004f46:	f04f 0200 	mov.w	r2, #0
 8004f4a:	f04f 0300 	mov.w	r3, #0
 8004f4e:	e9c1 2300 	strd	r2, r3, [r1]

	  p_angular_rate_pitchfactor = 14;
 8004f52:	4b61      	ldr	r3, [pc, #388]	@ (80050d8 <main+0x3c0>)
 8004f54:	4a61      	ldr	r2, [pc, #388]	@ (80050dc <main+0x3c4>)
 8004f56:	601a      	str	r2, [r3, #0]
	  p_angular_rate_roolfactor = 12;
 8004f58:	4b61      	ldr	r3, [pc, #388]	@ (80050e0 <main+0x3c8>)
 8004f5a:	4a62      	ldr	r2, [pc, #392]	@ (80050e4 <main+0x3cc>)
 8004f5c:	601a      	str	r2, [r3, #0]
	  p_angular_rate_yawfactor = 5;// -> 10
 8004f5e:	4b62      	ldr	r3, [pc, #392]	@ (80050e8 <main+0x3d0>)
 8004f60:	4a62      	ldr	r2, [pc, #392]	@ (80050ec <main+0x3d4>)
 8004f62:	601a      	str	r2, [r3, #0]
	///////////////////////////////////////////////////////////////////////////
	  i_angular_rate_pitchfactor = 10;
 8004f64:	4b62      	ldr	r3, [pc, #392]	@ (80050f0 <main+0x3d8>)
 8004f66:	4a63      	ldr	r2, [pc, #396]	@ (80050f4 <main+0x3dc>)
 8004f68:	601a      	str	r2, [r3, #0]
	  i_angular_rate_roolfactor = 10;
 8004f6a:	4b63      	ldr	r3, [pc, #396]	@ (80050f8 <main+0x3e0>)
 8004f6c:	4a61      	ldr	r2, [pc, #388]	@ (80050f4 <main+0x3dc>)
 8004f6e:	601a      	str	r2, [r3, #0]
	  i_angular_rate_yawfactor = 0;
 8004f70:	4b62      	ldr	r3, [pc, #392]	@ (80050fc <main+0x3e4>)
 8004f72:	f04f 0200 	mov.w	r2, #0
 8004f76:	601a      	str	r2, [r3, #0]
	///////////////////////////////////////////////////////////////////////////
	  d_angular_rate_pitchfactor = 30;
 8004f78:	4b61      	ldr	r3, [pc, #388]	@ (8005100 <main+0x3e8>)
 8004f7a:	4a62      	ldr	r2, [pc, #392]	@ (8005104 <main+0x3ec>)
 8004f7c:	601a      	str	r2, [r3, #0]
	  d_angular_rate_roolfactor = 20;
 8004f7e:	4b62      	ldr	r3, [pc, #392]	@ (8005108 <main+0x3f0>)
 8004f80:	4a62      	ldr	r2, [pc, #392]	@ (800510c <main+0x3f4>)
 8004f82:	601a      	str	r2, [r3, #0]
	  d_angular_rate_yawfactor = 5;
 8004f84:	4b62      	ldr	r3, [pc, #392]	@ (8005110 <main+0x3f8>)
 8004f86:	4a59      	ldr	r2, [pc, #356]	@ (80050ec <main+0x3d4>)
 8004f88:	601a      	str	r2, [r3, #0]

	  p_pitchfactor = 5.5;
 8004f8a:	4b13      	ldr	r3, [pc, #76]	@ (8004fd8 <main+0x2c0>)
 8004f8c:	4a61      	ldr	r2, [pc, #388]	@ (8005114 <main+0x3fc>)
 8004f8e:	601a      	str	r2, [r3, #0]
	  p_roolfactor = 6;//5
 8004f90:	4b15      	ldr	r3, [pc, #84]	@ (8004fe8 <main+0x2d0>)
 8004f92:	4a61      	ldr	r2, [pc, #388]	@ (8005118 <main+0x400>)
 8004f94:	601a      	str	r2, [r3, #0]
	  p_yawfactor = 5;
 8004f96:	4b18      	ldr	r3, [pc, #96]	@ (8004ff8 <main+0x2e0>)
 8004f98:	4a54      	ldr	r2, [pc, #336]	@ (80050ec <main+0x3d4>)
 8004f9a:	601a      	str	r2, [r3, #0]
	///////////////////////////////////////////////////////////////////////////
	  i_pitchfactor = 9;//8
 8004f9c:	4b10      	ldr	r3, [pc, #64]	@ (8004fe0 <main+0x2c8>)
 8004f9e:	4a5f      	ldr	r2, [pc, #380]	@ (800511c <main+0x404>)
 8004fa0:	601a      	str	r2, [r3, #0]
	  i_roolfactor = 8;//10
 8004fa2:	4b13      	ldr	r3, [pc, #76]	@ (8004ff0 <main+0x2d8>)
 8004fa4:	f04f 4282 	mov.w	r2, #1090519040	@ 0x41000000
 8004fa8:	601a      	str	r2, [r3, #0]
	  i_yawfactor = 0;
 8004faa:	4b15      	ldr	r3, [pc, #84]	@ (8005000 <main+0x2e8>)
 8004fac:	f04f 0200 	mov.w	r2, #0
 8004fb0:	601a      	str	r2, [r3, #0]
	///////////////////////////////////////////////////////////////////////////
	  d_pitchfactor = 30;//25
 8004fb2:	4b0c      	ldr	r3, [pc, #48]	@ (8004fe4 <main+0x2cc>)
 8004fb4:	4a53      	ldr	r2, [pc, #332]	@ (8005104 <main+0x3ec>)
 8004fb6:	601a      	str	r2, [r3, #0]
	  d_roolfactor = 20;
 8004fb8:	4b0e      	ldr	r3, [pc, #56]	@ (8004ff4 <main+0x2dc>)
 8004fba:	4a54      	ldr	r2, [pc, #336]	@ (800510c <main+0x3f4>)
 8004fbc:	601a      	str	r2, [r3, #0]
	  d_yawfactor = 0;
 8004fbe:	4b11      	ldr	r3, [pc, #68]	@ (8005004 <main+0x2ec>)
 8004fc0:	f04f 0200 	mov.w	r2, #0
 8004fc4:	601a      	str	r2, [r3, #0]

  	  PID_FAC_Angular_Rate_Pitch[0] = p_angular_rate_pitchfactor;
 8004fc6:	4b44      	ldr	r3, [pc, #272]	@ (80050d8 <main+0x3c0>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	e0a9      	b.n	8005120 <main+0x408>
 8004fcc:	00000074 	.word	0x00000074
 8004fd0:	58021800 	.word	0x58021800
 8004fd4:	0000419c 	.word	0x0000419c
 8004fd8:	000040cc 	.word	0x000040cc
 8004fdc:	000040f0 	.word	0x000040f0
 8004fe0:	000040d8 	.word	0x000040d8
 8004fe4:	000040e4 	.word	0x000040e4
 8004fe8:	000040d0 	.word	0x000040d0
 8004fec:	00004104 	.word	0x00004104
 8004ff0:	000040dc 	.word	0x000040dc
 8004ff4:	000040e8 	.word	0x000040e8
 8004ff8:	000040d4 	.word	0x000040d4
 8004ffc:	00004118 	.word	0x00004118
 8005000:	000040e0 	.word	0x000040e0
 8005004:	000040ec 	.word	0x000040ec
 8005008:	00000018 	.word	0x00000018
 800500c:	0000001c 	.word	0x0000001c
 8005010:	00000020 	.word	0x00000020
 8005014:	00000024 	.word	0x00000024
 8005018:	00000028 	.word	0x00000028
 800501c:	0000002c 	.word	0x0000002c
 8005020:	00000058 	.word	0x00000058
 8005024:	0000006c 	.word	0x0000006c
 8005028:	00000070 	.word	0x00000070
 800502c:	00000078 	.word	0x00000078
 8005030:	000000dc 	.word	0x000000dc
 8005034:	000000e0 	.word	0x000000e0
 8005038:	000000e4 	.word	0x000000e4
 800503c:	000000e8 	.word	0x000000e8
 8005040:	00004050 	.word	0x00004050
 8005044:	00004054 	.word	0x00004054
 8005048:	00004058 	.word	0x00004058
 800504c:	0000405c 	.word	0x0000405c
 8005050:	0000405e 	.word	0x0000405e
 8005054:	00004074 	.word	0x00004074
 8005058:	00004076 	.word	0x00004076
 800505c:	00004084 	.word	0x00004084
 8005060:	00004088 	.word	0x00004088
 8005064:	0000408c 	.word	0x0000408c
 8005068:	00004090 	.word	0x00004090
 800506c:	00004094 	.word	0x00004094
 8005070:	00004098 	.word	0x00004098
 8005074:	0000409c 	.word	0x0000409c
 8005078:	000040a0 	.word	0x000040a0
 800507c:	000040a4 	.word	0x000040a4
 8005080:	000040a8 	.word	0x000040a8
 8005084:	000040ac 	.word	0x000040ac
 8005088:	000040b0 	.word	0x000040b0
 800508c:	0000418c 	.word	0x0000418c
 8005090:	0000418e 	.word	0x0000418e
 8005094:	00004190 	.word	0x00004190
 8005098:	00004192 	.word	0x00004192
 800509c:	00004194 	.word	0x00004194
 80050a0:	00004196 	.word	0x00004196
 80050a4:	00004198 	.word	0x00004198
 80050a8:	0000419a 	.word	0x0000419a
 80050ac:	000041be 	.word	0x000041be
 80050b0:	000041bf 	.word	0x000041bf
 80050b4:	000041c4 	.word	0x000041c4
 80050b8:	000041c8 	.word	0x000041c8
 80050bc:	000041d0 	.word	0x000041d0
 80050c0:	000041d4 	.word	0x000041d4
 80050c4:	000041d5 	.word	0x000041d5
 80050c8:	000041d6 	.word	0x000041d6
 80050cc:	000041d8 	.word	0x000041d8
 80050d0:	000041dc 	.word	0x000041dc
 80050d4:	00004060 	.word	0x00004060
 80050d8:	0000412c 	.word	0x0000412c
 80050dc:	41600000 	.word	0x41600000
 80050e0:	00004130 	.word	0x00004130
 80050e4:	41400000 	.word	0x41400000
 80050e8:	00004134 	.word	0x00004134
 80050ec:	40a00000 	.word	0x40a00000
 80050f0:	00004138 	.word	0x00004138
 80050f4:	41200000 	.word	0x41200000
 80050f8:	0000413c 	.word	0x0000413c
 80050fc:	00004140 	.word	0x00004140
 8005100:	00004144 	.word	0x00004144
 8005104:	41f00000 	.word	0x41f00000
 8005108:	00004148 	.word	0x00004148
 800510c:	41a00000 	.word	0x41a00000
 8005110:	0000414c 	.word	0x0000414c
 8005114:	40b00000 	.word	0x40b00000
 8005118:	40c00000 	.word	0x40c00000
 800511c:	41100000 	.word	0x41100000
 8005120:	4aa1      	ldr	r2, [pc, #644]	@ (80053a8 <main+0x690>)
 8005122:	6013      	str	r3, [r2, #0]
  	  PID_FAC_Angular_Rate_Pitch[1] = i_angular_rate_pitchfactor;
 8005124:	4ba1      	ldr	r3, [pc, #644]	@ (80053ac <main+0x694>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4a9f      	ldr	r2, [pc, #636]	@ (80053a8 <main+0x690>)
 800512a:	6053      	str	r3, [r2, #4]
  	  PID_FAC_Angular_Rate_Pitch[2] = d_angular_rate_pitchfactor;
 800512c:	4ba0      	ldr	r3, [pc, #640]	@ (80053b0 <main+0x698>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a9d      	ldr	r2, [pc, #628]	@ (80053a8 <main+0x690>)
 8005132:	6093      	str	r3, [r2, #8]
  	  PID_FAC_Angular_Rate_Rool[0] = p_angular_rate_roolfactor;//
 8005134:	4b9f      	ldr	r3, [pc, #636]	@ (80053b4 <main+0x69c>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4a9f      	ldr	r2, [pc, #636]	@ (80053b8 <main+0x6a0>)
 800513a:	6013      	str	r3, [r2, #0]
  	  PID_FAC_Angular_Rate_Rool[1] = i_angular_rate_roolfactor;
 800513c:	4b9f      	ldr	r3, [pc, #636]	@ (80053bc <main+0x6a4>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4a9d      	ldr	r2, [pc, #628]	@ (80053b8 <main+0x6a0>)
 8005142:	6053      	str	r3, [r2, #4]
  	  PID_FAC_Angular_Rate_Rool[2] = d_angular_rate_roolfactor;
 8005144:	4b9e      	ldr	r3, [pc, #632]	@ (80053c0 <main+0x6a8>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4a9b      	ldr	r2, [pc, #620]	@ (80053b8 <main+0x6a0>)
 800514a:	6093      	str	r3, [r2, #8]
  	  PID_FAC_Angular_Rate_Yaw[0] = p_angular_rate_yawfactor;//
 800514c:	4b9d      	ldr	r3, [pc, #628]	@ (80053c4 <main+0x6ac>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4a9d      	ldr	r2, [pc, #628]	@ (80053c8 <main+0x6b0>)
 8005152:	6013      	str	r3, [r2, #0]
  	  PID_FAC_Angular_Rate_Yaw[1] = i_angular_rate_yawfactor;
 8005154:	4b9d      	ldr	r3, [pc, #628]	@ (80053cc <main+0x6b4>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4a9b      	ldr	r2, [pc, #620]	@ (80053c8 <main+0x6b0>)
 800515a:	6053      	str	r3, [r2, #4]
  	  PID_FAC_Angular_Rate_Yaw[2] = d_angular_rate_yawfactor;
 800515c:	4b9c      	ldr	r3, [pc, #624]	@ (80053d0 <main+0x6b8>)
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4a99      	ldr	r2, [pc, #612]	@ (80053c8 <main+0x6b0>)
 8005162:	6093      	str	r3, [r2, #8]
  	  PID_FAC_Pitch[0] = p_pitchfactor;
 8005164:	4b9b      	ldr	r3, [pc, #620]	@ (80053d4 <main+0x6bc>)
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4a9b      	ldr	r2, [pc, #620]	@ (80053d8 <main+0x6c0>)
 800516a:	6013      	str	r3, [r2, #0]
  	  PID_FAC_Pitch[1] = i_pitchfactor;
 800516c:	4b9b      	ldr	r3, [pc, #620]	@ (80053dc <main+0x6c4>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4a99      	ldr	r2, [pc, #612]	@ (80053d8 <main+0x6c0>)
 8005172:	6053      	str	r3, [r2, #4]
  	  PID_FAC_Pitch[2] = d_pitchfactor;
 8005174:	4b9a      	ldr	r3, [pc, #616]	@ (80053e0 <main+0x6c8>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4a97      	ldr	r2, [pc, #604]	@ (80053d8 <main+0x6c0>)
 800517a:	6093      	str	r3, [r2, #8]
  	  PID_FAC_Rool[0] = p_roolfactor;//
 800517c:	4b99      	ldr	r3, [pc, #612]	@ (80053e4 <main+0x6cc>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	4a99      	ldr	r2, [pc, #612]	@ (80053e8 <main+0x6d0>)
 8005182:	6013      	str	r3, [r2, #0]
  	  PID_FAC_Rool[1] = i_roolfactor;
 8005184:	4b99      	ldr	r3, [pc, #612]	@ (80053ec <main+0x6d4>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4a97      	ldr	r2, [pc, #604]	@ (80053e8 <main+0x6d0>)
 800518a:	6053      	str	r3, [r2, #4]
  	  PID_FAC_Rool[2] = d_roolfactor;
 800518c:	4b98      	ldr	r3, [pc, #608]	@ (80053f0 <main+0x6d8>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4a95      	ldr	r2, [pc, #596]	@ (80053e8 <main+0x6d0>)
 8005192:	6093      	str	r3, [r2, #8]
  	  PID_FAC_Yaw[0] = p_yawfactor;//
 8005194:	4b97      	ldr	r3, [pc, #604]	@ (80053f4 <main+0x6dc>)
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	4a97      	ldr	r2, [pc, #604]	@ (80053f8 <main+0x6e0>)
 800519a:	6013      	str	r3, [r2, #0]
  	  PID_FAC_Yaw[1] = i_yawfactor;
 800519c:	4b97      	ldr	r3, [pc, #604]	@ (80053fc <main+0x6e4>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4a95      	ldr	r2, [pc, #596]	@ (80053f8 <main+0x6e0>)
 80051a2:	6053      	str	r3, [r2, #4]
  	  PID_FAC_Yaw[2] = d_yawfactor;
 80051a4:	4b96      	ldr	r3, [pc, #600]	@ (8005400 <main+0x6e8>)
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	4a93      	ldr	r2, [pc, #588]	@ (80053f8 <main+0x6e0>)
 80051aa:	6093      	str	r3, [r2, #8]

  	wanted_pitch_rx = 0;// chcainy stan
 80051ac:	4b95      	ldr	r3, [pc, #596]	@ (8005404 <main+0x6ec>)
 80051ae:	2200      	movs	r2, #0
 80051b0:	801a      	strh	r2, [r3, #0]
  	wanted_rool_rx = 0;
 80051b2:	4b95      	ldr	r3, [pc, #596]	@ (8005408 <main+0x6f0>)
 80051b4:	2200      	movs	r2, #0
 80051b6:	801a      	strh	r2, [r3, #0]
  	wanted_yaw_rx = 0;
 80051b8:	4b94      	ldr	r3, [pc, #592]	@ (800540c <main+0x6f4>)
 80051ba:	2200      	movs	r2, #0
 80051bc:	801a      	strh	r2, [r3, #0]
  	wanted_gz = 0 ;
 80051be:	4b94      	ldr	r3, [pc, #592]	@ (8005410 <main+0x6f8>)
 80051c0:	2200      	movs	r2, #0
 80051c2:	801a      	strh	r2, [r3, #0]


  	data.ox = 0;
 80051c4:	4b93      	ldr	r3, [pc, #588]	@ (8005414 <main+0x6fc>)
 80051c6:	f04f 0200 	mov.w	r2, #0
 80051ca:	60da      	str	r2, [r3, #12]
  	data.x = 0;
 80051cc:	4b91      	ldr	r3, [pc, #580]	@ (8005414 <main+0x6fc>)
 80051ce:	f04f 0200 	mov.w	r2, #0
 80051d2:	601a      	str	r2, [r3, #0]
  	data.oy = 0;
 80051d4:	4b8f      	ldr	r3, [pc, #572]	@ (8005414 <main+0x6fc>)
 80051d6:	f04f 0200 	mov.w	r2, #0
 80051da:	611a      	str	r2, [r3, #16]
  	data.y = 0;
 80051dc:	4b8d      	ldr	r3, [pc, #564]	@ (8005414 <main+0x6fc>)
 80051de:	f04f 0200 	mov.w	r2, #0
 80051e2:	605a      	str	r2, [r3, #4]
  	data.oz = 0;
 80051e4:	4b8b      	ldr	r3, [pc, #556]	@ (8005414 <main+0x6fc>)
 80051e6:	f04f 0200 	mov.w	r2, #0
 80051ea:	615a      	str	r2, [r3, #20]
  	data.z = 0;
 80051ec:	4b89      	ldr	r3, [pc, #548]	@ (8005414 <main+0x6fc>)
 80051ee:	f04f 0200 	mov.w	r2, #0
 80051f2:	609a      	str	r2, [r3, #8]


  	pid_pitch = 0;
 80051f4:	4b88      	ldr	r3, [pc, #544]	@ (8005418 <main+0x700>)
 80051f6:	f04f 0200 	mov.w	r2, #0
 80051fa:	601a      	str	r2, [r3, #0]
  	pid_yaw = 0;
 80051fc:	4b87      	ldr	r3, [pc, #540]	@ (800541c <main+0x704>)
 80051fe:	f04f 0200 	mov.w	r2, #0
 8005202:	601a      	str	r2, [r3, #0]
  	pid_rool = 0;
 8005204:	4b86      	ldr	r3, [pc, #536]	@ (8005420 <main+0x708>)
 8005206:	f04f 0200 	mov.w	r2, #0
 800520a:	601a      	str	r2, [r3, #0]

  	pid_angular_rate_pitch = 0;
 800520c:	4b85      	ldr	r3, [pc, #532]	@ (8005424 <main+0x70c>)
 800520e:	f04f 0200 	mov.w	r2, #0
 8005212:	601a      	str	r2, [r3, #0]
  	pid_angular_rate_yaw = 0;
 8005214:	4b84      	ldr	r3, [pc, #528]	@ (8005428 <main+0x710>)
 8005216:	f04f 0200 	mov.w	r2, #0
 800521a:	601a      	str	r2, [r3, #0]
  	pid_angular_rate_rool = 0;
 800521c:	4b83      	ldr	r3, [pc, #524]	@ (800542c <main+0x714>)
 800521e:	f04f 0200 	mov.w	r2, #0
 8005222:	601a      	str	r2, [r3, #0]

  	MYDRON.PITCH_STA = 0;
 8005224:	4b82      	ldr	r3, [pc, #520]	@ (8005430 <main+0x718>)
 8005226:	2200      	movs	r2, #0
 8005228:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  	MYDRON.ROOL_STA = 0;
 800522c:	4b80      	ldr	r3, [pc, #512]	@ (8005430 <main+0x718>)
 800522e:	2200      	movs	r2, #0
 8005230:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
  	MYDRON.YAW_STA = 0;
 8005234:	4b7e      	ldr	r3, [pc, #504]	@ (8005430 <main+0x718>)
 8005236:	2200      	movs	r2, #0
 8005238:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  	ax = 0,ay = 0,az = 0, gx = 0, gy = 0, gz = 0;
 800523c:	4b7d      	ldr	r3, [pc, #500]	@ (8005434 <main+0x71c>)
 800523e:	f04f 0200 	mov.w	r2, #0
 8005242:	601a      	str	r2, [r3, #0]
 8005244:	4b7c      	ldr	r3, [pc, #496]	@ (8005438 <main+0x720>)
 8005246:	f04f 0200 	mov.w	r2, #0
 800524a:	601a      	str	r2, [r3, #0]
 800524c:	4b7b      	ldr	r3, [pc, #492]	@ (800543c <main+0x724>)
 800524e:	f04f 0200 	mov.w	r2, #0
 8005252:	601a      	str	r2, [r3, #0]
 8005254:	4b7a      	ldr	r3, [pc, #488]	@ (8005440 <main+0x728>)
 8005256:	f04f 0200 	mov.w	r2, #0
 800525a:	601a      	str	r2, [r3, #0]
 800525c:	4b79      	ldr	r3, [pc, #484]	@ (8005444 <main+0x72c>)
 800525e:	f04f 0200 	mov.w	r2, #0
 8005262:	601a      	str	r2, [r3, #0]
 8005264:	4b78      	ldr	r3, [pc, #480]	@ (8005448 <main+0x730>)
 8005266:	f04f 0200 	mov.w	r2, #0
 800526a:	601a      	str	r2, [r3, #0]
  	ax_ang = 0,ay_ang = 0,az_ang = 0, gx_ang = 0, gy_ang = 0, gz_ang = 0;
 800526c:	4b77      	ldr	r3, [pc, #476]	@ (800544c <main+0x734>)
 800526e:	f04f 0200 	mov.w	r2, #0
 8005272:	601a      	str	r2, [r3, #0]
 8005274:	4b76      	ldr	r3, [pc, #472]	@ (8005450 <main+0x738>)
 8005276:	f04f 0200 	mov.w	r2, #0
 800527a:	601a      	str	r2, [r3, #0]
 800527c:	4b75      	ldr	r3, [pc, #468]	@ (8005454 <main+0x73c>)
 800527e:	f04f 0200 	mov.w	r2, #0
 8005282:	601a      	str	r2, [r3, #0]
 8005284:	4b74      	ldr	r3, [pc, #464]	@ (8005458 <main+0x740>)
 8005286:	f04f 0200 	mov.w	r2, #0
 800528a:	601a      	str	r2, [r3, #0]
 800528c:	4b73      	ldr	r3, [pc, #460]	@ (800545c <main+0x744>)
 800528e:	f04f 0200 	mov.w	r2, #0
 8005292:	601a      	str	r2, [r3, #0]
 8005294:	4b72      	ldr	r3, [pc, #456]	@ (8005460 <main+0x748>)
 8005296:	f04f 0200 	mov.w	r2, #0
 800529a:	601a      	str	r2, [r3, #0]
  	accelx_cal = 0, accely_cal = 0, accelz_cal = 0, gyrox_cal = 0, gyroy_cal = 0, gyroz_cal = 0;
 800529c:	4b71      	ldr	r3, [pc, #452]	@ (8005464 <main+0x74c>)
 800529e:	f04f 0200 	mov.w	r2, #0
 80052a2:	601a      	str	r2, [r3, #0]
 80052a4:	4b70      	ldr	r3, [pc, #448]	@ (8005468 <main+0x750>)
 80052a6:	f04f 0200 	mov.w	r2, #0
 80052aa:	601a      	str	r2, [r3, #0]
 80052ac:	4b6f      	ldr	r3, [pc, #444]	@ (800546c <main+0x754>)
 80052ae:	f04f 0200 	mov.w	r2, #0
 80052b2:	601a      	str	r2, [r3, #0]
 80052b4:	4b6e      	ldr	r3, [pc, #440]	@ (8005470 <main+0x758>)
 80052b6:	f04f 0200 	mov.w	r2, #0
 80052ba:	601a      	str	r2, [r3, #0]
 80052bc:	4b6d      	ldr	r3, [pc, #436]	@ (8005474 <main+0x75c>)
 80052be:	f04f 0200 	mov.w	r2, #0
 80052c2:	601a      	str	r2, [r3, #0]
 80052c4:	4b6c      	ldr	r3, [pc, #432]	@ (8005478 <main+0x760>)
 80052c6:	f04f 0200 	mov.w	r2, #0
 80052ca:	601a      	str	r2, [r3, #0]

  	nRF24_Rx_Mode = 0;
 80052cc:	4b6b      	ldr	r3, [pc, #428]	@ (800547c <main+0x764>)
 80052ce:	2200      	movs	r2, #0
 80052d0:	701a      	strb	r2, [r3, #0]

  	uint8_t o[3] = "Odb";
 80052d2:	4a6b      	ldr	r2, [pc, #428]	@ (8005480 <main+0x768>)
 80052d4:	f107 0308 	add.w	r3, r7, #8
 80052d8:	6812      	ldr	r2, [r2, #0]
 80052da:	4611      	mov	r1, r2
 80052dc:	8019      	strh	r1, [r3, #0]
 80052de:	3302      	adds	r3, #2
 80052e0:	0c12      	lsrs	r2, r2, #16
 80052e2:	701a      	strb	r2, [r3, #0]
  	uint8_t n[3] = "Nad";
 80052e4:	4a67      	ldr	r2, [pc, #412]	@ (8005484 <main+0x76c>)
 80052e6:	1d3b      	adds	r3, r7, #4
 80052e8:	6812      	ldr	r2, [r2, #0]
 80052ea:	4611      	mov	r1, r2
 80052ec:	8019      	strh	r1, [r3, #0]
 80052ee:	3302      	adds	r3, #2
 80052f0:	0c12      	lsrs	r2, r2, #16
 80052f2:	701a      	strb	r2, [r3, #0]


  	LED_5_1;
 80052f4:	2201      	movs	r2, #1
 80052f6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80052fa:	4863      	ldr	r0, [pc, #396]	@ (8005488 <main+0x770>)
 80052fc:	f009 f8e2 	bl	800e4c4 <HAL_GPIO_WritePin>
  	LED_6_1;
 8005300:	2201      	movs	r2, #1
 8005302:	2108      	movs	r1, #8
 8005304:	4861      	ldr	r0, [pc, #388]	@ (800548c <main+0x774>)
 8005306:	f009 f8dd 	bl	800e4c4 <HAL_GPIO_WritePin>
  	LED_7_1;
 800530a:	2201      	movs	r2, #1
 800530c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005310:	485d      	ldr	r0, [pc, #372]	@ (8005488 <main+0x770>)
 8005312:	f009 f8d7 	bl	800e4c4 <HAL_GPIO_WritePin>
  	LED_uSD_1;
 8005316:	2201      	movs	r2, #1
 8005318:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800531c:	485c      	ldr	r0, [pc, #368]	@ (8005490 <main+0x778>)
 800531e:	f009 f8d1 	bl	800e4c4 <HAL_GPIO_WritePin>
  	LED_G_1;
 8005322:	2201      	movs	r2, #1
 8005324:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005328:	4858      	ldr	r0, [pc, #352]	@ (800548c <main+0x774>)
 800532a:	f009 f8cb 	bl	800e4c4 <HAL_GPIO_WritePin>
  	LED_Y_1;
 800532e:	2201      	movs	r2, #1
 8005330:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005334:	4857      	ldr	r0, [pc, #348]	@ (8005494 <main+0x77c>)
 8005336:	f009 f8c5 	bl	800e4c4 <HAL_GPIO_WritePin>
  	LED_R_1;
 800533a:	2201      	movs	r2, #1
 800533c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005340:	4854      	ldr	r0, [pc, #336]	@ (8005494 <main+0x77c>)
 8005342:	f009 f8bf 	bl	800e4c4 <HAL_GPIO_WritePin>
  	HAL_Delay(1000);
 8005346:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800534a:	f003 ff7f 	bl	800924c <HAL_Delay>
  	LED_G_0;
 800534e:	2200      	movs	r2, #0
 8005350:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005354:	484d      	ldr	r0, [pc, #308]	@ (800548c <main+0x774>)
 8005356:	f009 f8b5 	bl	800e4c4 <HAL_GPIO_WritePin>
  	LED_Y_0;
 800535a:	2200      	movs	r2, #0
 800535c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005360:	484c      	ldr	r0, [pc, #304]	@ (8005494 <main+0x77c>)
 8005362:	f009 f8af 	bl	800e4c4 <HAL_GPIO_WritePin>
  	LED_R_0;
 8005366:	2200      	movs	r2, #0
 8005368:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800536c:	4849      	ldr	r0, [pc, #292]	@ (8005494 <main+0x77c>)
 800536e:	f009 f8a9 	bl	800e4c4 <HAL_GPIO_WritePin>
  	LED_5_0;
 8005372:	2200      	movs	r2, #0
 8005374:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005378:	4843      	ldr	r0, [pc, #268]	@ (8005488 <main+0x770>)
 800537a:	f009 f8a3 	bl	800e4c4 <HAL_GPIO_WritePin>
  	LED_6_0;
 800537e:	2200      	movs	r2, #0
 8005380:	2108      	movs	r1, #8
 8005382:	4842      	ldr	r0, [pc, #264]	@ (800548c <main+0x774>)
 8005384:	f009 f89e 	bl	800e4c4 <HAL_GPIO_WritePin>
  	LED_7_0;
 8005388:	2200      	movs	r2, #0
 800538a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800538e:	483e      	ldr	r0, [pc, #248]	@ (8005488 <main+0x770>)
 8005390:	f009 f898 	bl	800e4c4 <HAL_GPIO_WritePin>
  	LED_uSD_0;
 8005394:	2200      	movs	r2, #0
 8005396:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800539a:	483d      	ldr	r0, [pc, #244]	@ (8005490 <main+0x778>)
 800539c:	f009 f892 	bl	800e4c4 <HAL_GPIO_WritePin>




  	for(int i = 0; i < 4000; i++){
 80053a0:	2300      	movs	r3, #0
 80053a2:	61fb      	str	r3, [r7, #28]
 80053a4:	e082      	b.n	80054ac <main+0x794>
 80053a6:	bf00      	nop
 80053a8:	00004150 	.word	0x00004150
 80053ac:	00004138 	.word	0x00004138
 80053b0:	00004144 	.word	0x00004144
 80053b4:	00004130 	.word	0x00004130
 80053b8:	00004164 	.word	0x00004164
 80053bc:	0000413c 	.word	0x0000413c
 80053c0:	00004148 	.word	0x00004148
 80053c4:	00004134 	.word	0x00004134
 80053c8:	00004178 	.word	0x00004178
 80053cc:	00004140 	.word	0x00004140
 80053d0:	0000414c 	.word	0x0000414c
 80053d4:	000040cc 	.word	0x000040cc
 80053d8:	000040f0 	.word	0x000040f0
 80053dc:	000040d8 	.word	0x000040d8
 80053e0:	000040e4 	.word	0x000040e4
 80053e4:	000040d0 	.word	0x000040d0
 80053e8:	00004104 	.word	0x00004104
 80053ec:	000040dc 	.word	0x000040dc
 80053f0:	000040e8 	.word	0x000040e8
 80053f4:	000040d4 	.word	0x000040d4
 80053f8:	00004118 	.word	0x00004118
 80053fc:	000040e0 	.word	0x000040e0
 8005400:	000040ec 	.word	0x000040ec
 8005404:	00004048 	.word	0x00004048
 8005408:	0000404a 	.word	0x0000404a
 800540c:	0000404c 	.word	0x0000404c
 8005410:	0000404e 	.word	0x0000404e
 8005414:	0000007c 	.word	0x0000007c
 8005418:	000040b4 	.word	0x000040b4
 800541c:	000040b8 	.word	0x000040b8
 8005420:	000040bc 	.word	0x000040bc
 8005424:	000040c0 	.word	0x000040c0
 8005428:	000040c4 	.word	0x000040c4
 800542c:	000040c8 	.word	0x000040c8
 8005430:	00000178 	.word	0x00000178
 8005434:	00000000 	.word	0x00000000
 8005438:	00000004 	.word	0x00000004
 800543c:	00000008 	.word	0x00000008
 8005440:	0000000c 	.word	0x0000000c
 8005444:	00000010 	.word	0x00000010
 8005448:	00000014 	.word	0x00000014
 800544c:	00000018 	.word	0x00000018
 8005450:	0000001c 	.word	0x0000001c
 8005454:	00000020 	.word	0x00000020
 8005458:	00000024 	.word	0x00000024
 800545c:	00000028 	.word	0x00000028
 8005460:	0000002c 	.word	0x0000002c
 8005464:	00000030 	.word	0x00000030
 8005468:	00000034 	.word	0x00000034
 800546c:	00000038 	.word	0x00000038
 8005470:	0000003c 	.word	0x0000003c
 8005474:	00000040 	.word	0x00000040
 8005478:	00000044 	.word	0x00000044
 800547c:	00000174 	.word	0x00000174
 8005480:	0801e84c 	.word	0x0801e84c
 8005484:	0801e850 	.word	0x0801e850
 8005488:	58020000 	.word	0x58020000
 800548c:	58021000 	.word	0x58021000
 8005490:	58020c00 	.word	0x58020c00
 8005494:	58020400 	.word	0x58020400
  		Old_Data_stack.olddata[i] = 0;
 8005498:	4ab8      	ldr	r2, [pc, #736]	@ (800577c <main+0xa64>)
 800549a:	69fb      	ldr	r3, [r7, #28]
 800549c:	009b      	lsls	r3, r3, #2
 800549e:	4413      	add	r3, r2
 80054a0:	f04f 0200 	mov.w	r2, #0
 80054a4:	601a      	str	r2, [r3, #0]
  	for(int i = 0; i < 4000; i++){
 80054a6:	69fb      	ldr	r3, [r7, #28]
 80054a8:	3301      	adds	r3, #1
 80054aa:	61fb      	str	r3, [r7, #28]
 80054ac:	69fb      	ldr	r3, [r7, #28]
 80054ae:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 80054b2:	dbf1      	blt.n	8005498 <main+0x780>
  	}
  	Old_Data_stack.start_pointer = 0;
 80054b4:	4bb1      	ldr	r3, [pc, #708]	@ (800577c <main+0xa64>)
 80054b6:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 80054ba:	2200      	movs	r2, #0
 80054bc:	f8a3 2ea8 	strh.w	r2, [r3, #3752]	@ 0xea8
  	Old_Data_stack.end_pointer = 4000;
 80054c0:	4bae      	ldr	r3, [pc, #696]	@ (800577c <main+0xa64>)
 80054c2:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 80054c6:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 80054ca:	f8a3 2eaa 	strh.w	r2, [r3, #3754]	@ 0xeaa

  	analogmess = 0;
 80054ce:	4bac      	ldr	r3, [pc, #688]	@ (8005780 <main+0xa68>)
 80054d0:	2200      	movs	r2, #0
 80054d2:	601a      	str	r2, [r3, #0]


  	HAL_TIM_Base_Start(&htim8);
 80054d4:	48ab      	ldr	r0, [pc, #684]	@ (8005784 <main+0xa6c>)
 80054d6:	f010 fde5 	bl	80160a4 <HAL_TIM_Base_Start>
  	HAL_ADC_Start_DMA(&hadc2, &analogmess, 1);
 80054da:	2201      	movs	r2, #1
 80054dc:	49a8      	ldr	r1, [pc, #672]	@ (8005780 <main+0xa68>)
 80054de:	48aa      	ldr	r0, [pc, #680]	@ (8005788 <main+0xa70>)
 80054e0:	f004 fc06 	bl	8009cf0 <HAL_ADC_Start_DMA>
  	LED_R_1;
 80054e4:	2201      	movs	r2, #1
 80054e6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80054ea:	48a8      	ldr	r0, [pc, #672]	@ (800578c <main+0xa74>)
 80054ec:	f008 ffea 	bl	800e4c4 <HAL_GPIO_WritePin>
  	while(analogmess == 0){
 80054f0:	bf00      	nop
 80054f2:	4ba3      	ldr	r3, [pc, #652]	@ (8005780 <main+0xa68>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d0fb      	beq.n	80054f2 <main+0x7da>

  	}
  	LED_R_0;
 80054fa:	2200      	movs	r2, #0
 80054fc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005500:	48a2      	ldr	r0, [pc, #648]	@ (800578c <main+0xa74>)
 8005502:	f008 ffdf 	bl	800e4c4 <HAL_GPIO_WritePin>

  	Get_batteryvalue();
 8005506:	f7fe fcff 	bl	8003f08 <Get_batteryvalue>

  	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);//pwm do diodt RGB
 800550a:	2104      	movs	r1, #4
 800550c:	48a0      	ldr	r0, [pc, #640]	@ (8005790 <main+0xa78>)
 800550e:	f010 ff25 	bl	801635c <HAL_TIM_PWM_Start>
  	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8005512:	2108      	movs	r1, #8
 8005514:	489e      	ldr	r0, [pc, #632]	@ (8005790 <main+0xa78>)
 8005516:	f010 ff21 	bl	801635c <HAL_TIM_PWM_Start>
  	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 800551a:	210c      	movs	r1, #12
 800551c:	489c      	ldr	r0, [pc, #624]	@ (8005790 <main+0xa78>)
 800551e:	f010 ff1d 	bl	801635c <HAL_TIM_PWM_Start>


  	RGB_LED_For_BAT(MYDRON.batterysize);
 8005522:	4b9c      	ldr	r3, [pc, #624]	@ (8005794 <main+0xa7c>)
 8005524:	881b      	ldrh	r3, [r3, #0]
 8005526:	b2db      	uxtb	r3, r3
 8005528:	4618      	mov	r0, r3
 800552a:	f001 fe99 	bl	8007260 <RGB_LED_For_BAT>
  	if(MYDRON.dron_status.Battery == DRON_BATTERY_RUN_OUT)
 800552e:	4b99      	ldr	r3, [pc, #612]	@ (8005794 <main+0xa7c>)
 8005530:	8a9b      	ldrh	r3, [r3, #20]
 8005532:	2b07      	cmp	r3, #7
 8005534:	d107      	bne.n	8005546 <main+0x82e>
  	{
  		LED_R_1;
 8005536:	2201      	movs	r2, #1
 8005538:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800553c:	4893      	ldr	r0, [pc, #588]	@ (800578c <main+0xa74>)
 800553e:	f008 ffc1 	bl	800e4c4 <HAL_GPIO_WritePin>
  		while(1){
 8005542:	bf00      	nop
 8005544:	e7fd      	b.n	8005542 <main+0x82a>

  		}
  	}
  	if(MYDRON.dron_status.Battery == DRON_BATTERY_CRIT_VAL){
 8005546:	4b93      	ldr	r3, [pc, #588]	@ (8005794 <main+0xa7c>)
 8005548:	8a9b      	ldrh	r3, [r3, #20]
 800554a:	2b09      	cmp	r3, #9
 800554c:	d107      	bne.n	800555e <main+0x846>
  		LED_R_1;
 800554e:	2201      	movs	r2, #1
 8005550:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005554:	488d      	ldr	r0, [pc, #564]	@ (800578c <main+0xa74>)
 8005556:	f008 ffb5 	bl	800e4c4 <HAL_GPIO_WritePin>
  		while(1){
 800555a:	bf00      	nop
 800555c:	e7fd      	b.n	800555a <main+0x842>
  		}
  	}


  /////////////////////////////// uSD
	SD_enable_Flag = HAL_GPIO_ReadPin(uSD_Detection_GPIO_Port, uSD_Detection_Pin);// jezeli karta SD jest wlozona, pin CardDetect jest zwierany do masy
 800555e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005562:	488a      	ldr	r0, [pc, #552]	@ (800578c <main+0xa74>)
 8005564:	f008 ff96 	bl	800e494 <HAL_GPIO_ReadPin>
 8005568:	4603      	mov	r3, r0
 800556a:	461a      	mov	r2, r3
 800556c:	4b8a      	ldr	r3, [pc, #552]	@ (8005798 <main+0xa80>)
 800556e:	701a      	strb	r2, [r3, #0]

	if(SD_enable_Flag == 1){
 8005570:	4b89      	ldr	r3, [pc, #548]	@ (8005798 <main+0xa80>)
 8005572:	781b      	ldrb	r3, [r3, #0]
 8005574:	2b01      	cmp	r3, #1
 8005576:	d103      	bne.n	8005580 <main+0x868>
		SD_enable_Flag = 0;
 8005578:	4b87      	ldr	r3, [pc, #540]	@ (8005798 <main+0xa80>)
 800557a:	2200      	movs	r2, #0
 800557c:	701a      	strb	r2, [r3, #0]
 800557e:	e002      	b.n	8005586 <main+0x86e>
	}
	else{
		SD_enable_Flag = 1;
 8005580:	4b85      	ldr	r3, [pc, #532]	@ (8005798 <main+0xa80>)
 8005582:	2201      	movs	r2, #1
 8005584:	701a      	strb	r2, [r3, #0]
	}

	if(SD_enable_Flag == 1){
 8005586:	4b84      	ldr	r3, [pc, #528]	@ (8005798 <main+0xa80>)
 8005588:	781b      	ldrb	r3, [r3, #0]
 800558a:	2b01      	cmp	r3, #1
 800558c:	d15f      	bne.n	800564e <main+0x936>
		LED_uSD_1;
 800558e:	2201      	movs	r2, #1
 8005590:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005594:	4881      	ldr	r0, [pc, #516]	@ (800579c <main+0xa84>)
 8005596:	f008 ff95 	bl	800e4c4 <HAL_GPIO_WritePin>
		fresult = f_mount(&fs, "/", 1);
 800559a:	2201      	movs	r2, #1
 800559c:	4980      	ldr	r1, [pc, #512]	@ (80057a0 <main+0xa88>)
 800559e:	4881      	ldr	r0, [pc, #516]	@ (80057a4 <main+0xa8c>)
 80055a0:	f017 fe08 	bl	801d1b4 <f_mount>
 80055a4:	4603      	mov	r3, r0
 80055a6:	461a      	mov	r2, r3
 80055a8:	4b7f      	ldr	r3, [pc, #508]	@ (80057a8 <main+0xa90>)
 80055aa:	701a      	strb	r2, [r3, #0]
		fresult = f_unlink("/file.txt");//skasowanie poprzedniego pliku
 80055ac:	487f      	ldr	r0, [pc, #508]	@ (80057ac <main+0xa94>)
 80055ae:	f018 fa4b 	bl	801da48 <f_unlink>
 80055b2:	4603      	mov	r3, r0
 80055b4:	461a      	mov	r2, r3
 80055b6:	4b7c      	ldr	r3, [pc, #496]	@ (80057a8 <main+0xa90>)
 80055b8:	701a      	strb	r2, [r3, #0]
		fresult = f_mount(&fs, "/", 1);
 80055ba:	2201      	movs	r2, #1
 80055bc:	4978      	ldr	r1, [pc, #480]	@ (80057a0 <main+0xa88>)
 80055be:	4879      	ldr	r0, [pc, #484]	@ (80057a4 <main+0xa8c>)
 80055c0:	f017 fdf8 	bl	801d1b4 <f_mount>
 80055c4:	4603      	mov	r3, r0
 80055c6:	461a      	mov	r2, r3
 80055c8:	4b77      	ldr	r3, [pc, #476]	@ (80057a8 <main+0xa90>)
 80055ca:	701a      	strb	r2, [r3, #0]
		fresult = f_open(&fil, "file.txt", FA_CREATE_ALWAYS | FA_WRITE);// utwozenie nowego pliku
 80055cc:	220a      	movs	r2, #10
 80055ce:	4978      	ldr	r1, [pc, #480]	@ (80057b0 <main+0xa98>)
 80055d0:	4878      	ldr	r0, [pc, #480]	@ (80057b4 <main+0xa9c>)
 80055d2:	f017 fe35 	bl	801d240 <f_open>
 80055d6:	4603      	mov	r3, r0
 80055d8:	461a      	mov	r2, r3
 80055da:	4b73      	ldr	r3, [pc, #460]	@ (80057a8 <main+0xa90>)
 80055dc:	701a      	strb	r2, [r3, #0]
		LED_uSD_0;
 80055de:	2200      	movs	r2, #0
 80055e0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80055e4:	486d      	ldr	r0, [pc, #436]	@ (800579c <main+0xa84>)
 80055e6:	f008 ff6d 	bl	800e4c4 <HAL_GPIO_WritePin>

		LED_uSD_1;
 80055ea:	2201      	movs	r2, #1
 80055ec:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80055f0:	486a      	ldr	r0, [pc, #424]	@ (800579c <main+0xa84>)
 80055f2:	f008 ff67 	bl	800e4c4 <HAL_GPIO_WritePin>
		for(int i = 0; i < 129000; i++){
 80055f6:	2300      	movs	r3, #0
 80055f8:	61bb      	str	r3, [r7, #24]
 80055fa:	e007      	b.n	800560c <main+0x8f4>
			DataToSendBuffer[i] = 49;
 80055fc:	4a6e      	ldr	r2, [pc, #440]	@ (80057b8 <main+0xaa0>)
 80055fe:	69bb      	ldr	r3, [r7, #24]
 8005600:	4413      	add	r3, r2
 8005602:	2231      	movs	r2, #49	@ 0x31
 8005604:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < 129000; i++){
 8005606:	69bb      	ldr	r3, [r7, #24]
 8005608:	3301      	adds	r3, #1
 800560a:	61bb      	str	r3, [r7, #24]
 800560c:	69bb      	ldr	r3, [r7, #24]
 800560e:	4a6b      	ldr	r2, [pc, #428]	@ (80057bc <main+0xaa4>)
 8005610:	4293      	cmp	r3, r2
 8005612:	ddf3      	ble.n	80055fc <main+0x8e4>
		}
		fresult = f_write(&fil, DataToSendBuffer, 129, &bw);//64000
 8005614:	4b6a      	ldr	r3, [pc, #424]	@ (80057c0 <main+0xaa8>)
 8005616:	2281      	movs	r2, #129	@ 0x81
 8005618:	4967      	ldr	r1, [pc, #412]	@ (80057b8 <main+0xaa0>)
 800561a:	4866      	ldr	r0, [pc, #408]	@ (80057b4 <main+0xa9c>)
 800561c:	f017 ffd8 	bl	801d5d0 <f_write>
 8005620:	4603      	mov	r3, r0
 8005622:	461a      	mov	r2, r3
 8005624:	4b60      	ldr	r3, [pc, #384]	@ (80057a8 <main+0xa90>)
 8005626:	701a      	strb	r2, [r3, #0]
		fresult = f_close(&fil);
 8005628:	4862      	ldr	r0, [pc, #392]	@ (80057b4 <main+0xa9c>)
 800562a:	f018 f9e3 	bl	801d9f4 <f_close>
 800562e:	4603      	mov	r3, r0
 8005630:	461a      	mov	r2, r3
 8005632:	4b5d      	ldr	r3, [pc, #372]	@ (80057a8 <main+0xa90>)
 8005634:	701a      	strb	r2, [r3, #0]

		if(fresult != FR_OK){
 8005636:	4b5c      	ldr	r3, [pc, #368]	@ (80057a8 <main+0xa90>)
 8005638:	781b      	ldrb	r3, [r3, #0]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d001      	beq.n	8005642 <main+0x92a>
			while(1){
 800563e:	bf00      	nop
 8005640:	e7fd      	b.n	800563e <main+0x926>

			}
		}
		LED_uSD_0;
 8005642:	2200      	movs	r2, #0
 8005644:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005648:	4854      	ldr	r0, [pc, #336]	@ (800579c <main+0xa84>)
 800564a:	f008 ff3b 	bl	800e4c4 <HAL_GPIO_WritePin>
	}

	/////////////////////////////// MPU6050
		LED_5_1;
 800564e:	2201      	movs	r2, #1
 8005650:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005654:	485b      	ldr	r0, [pc, #364]	@ (80057c4 <main+0xaac>)
 8005656:	f008 ff35 	bl	800e4c4 <HAL_GPIO_WritePin>
		if(MPU6050_INIT(&hi2c5) == 0){
 800565a:	485b      	ldr	r0, [pc, #364]	@ (80057c8 <main+0xab0>)
 800565c:	f7fb fda2 	bl	80011a4 <MPU6050_INIT>
 8005660:	4603      	mov	r3, r0
 8005662:	2b00      	cmp	r3, #0
 8005664:	d107      	bne.n	8005676 <main+0x95e>
			LED_R_1;
 8005666:	2201      	movs	r2, #1
 8005668:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800566c:	4847      	ldr	r0, [pc, #284]	@ (800578c <main+0xa74>)
 800566e:	f008 ff29 	bl	800e4c4 <HAL_GPIO_WritePin>
			while(1){
 8005672:	bf00      	nop
 8005674:	e7fd      	b.n	8005672 <main+0x95a>
			}
		}
		LED_Y_1;
 8005676:	2201      	movs	r2, #1
 8005678:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800567c:	4843      	ldr	r0, [pc, #268]	@ (800578c <main+0xa74>)
 800567e:	f008 ff21 	bl	800e4c4 <HAL_GPIO_WritePin>
		MPU6050_CALIBRATION(&accelx_cal, &accely_cal, &accelz_cal, &gyrox_cal, &gyroy_cal, &gyroz_cal, Gyr_Scale, Acc_Scale);
 8005682:	eddf 7a52 	vldr	s15, [pc, #328]	@ 80057cc <main+0xab4>
 8005686:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 80057d0 <main+0xab8>
 800568a:	4b52      	ldr	r3, [pc, #328]	@ (80057d4 <main+0xabc>)
 800568c:	9301      	str	r3, [sp, #4]
 800568e:	4b52      	ldr	r3, [pc, #328]	@ (80057d8 <main+0xac0>)
 8005690:	9300      	str	r3, [sp, #0]
 8005692:	eef0 0a47 	vmov.f32	s1, s14
 8005696:	eeb0 0a67 	vmov.f32	s0, s15
 800569a:	4b50      	ldr	r3, [pc, #320]	@ (80057dc <main+0xac4>)
 800569c:	4a50      	ldr	r2, [pc, #320]	@ (80057e0 <main+0xac8>)
 800569e:	4951      	ldr	r1, [pc, #324]	@ (80057e4 <main+0xacc>)
 80056a0:	4851      	ldr	r0, [pc, #324]	@ (80057e8 <main+0xad0>)
 80056a2:	f7fb fe49 	bl	8001338 <MPU6050_CALIBRATION>
		LED_Y_0;
 80056a6:	2200      	movs	r2, #0
 80056a8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80056ac:	4837      	ldr	r0, [pc, #220]	@ (800578c <main+0xa74>)
 80056ae:	f008 ff09 	bl	800e4c4 <HAL_GPIO_WritePin>

	/////////////////////////////// BMP180
		if(BMP180_init(&hi2c5) == 0){
 80056b2:	4845      	ldr	r0, [pc, #276]	@ (80057c8 <main+0xab0>)
 80056b4:	f7fb f80c 	bl	80006d0 <BMP180_init>
 80056b8:	4603      	mov	r3, r0
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d107      	bne.n	80056ce <main+0x9b6>
			LED_R_1;
 80056be:	2201      	movs	r2, #1
 80056c0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80056c4:	4831      	ldr	r0, [pc, #196]	@ (800578c <main+0xa74>)
 80056c6:	f008 fefd 	bl	800e4c4 <HAL_GPIO_WritePin>
			while(1){
 80056ca:	bf00      	nop
 80056cc:	e7fd      	b.n	80056ca <main+0x9b2>
			}
		}
		LED_Y_1;
 80056ce:	2201      	movs	r2, #1
 80056d0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80056d4:	482d      	ldr	r0, [pc, #180]	@ (800578c <main+0xa74>)
 80056d6:	f008 fef5 	bl	800e4c4 <HAL_GPIO_WritePin>
		BMP180_CALIBRATION(&startpres);
 80056da:	4844      	ldr	r0, [pc, #272]	@ (80057ec <main+0xad4>)
 80056dc:	f7fb fb4a 	bl	8000d74 <BMP180_CALIBRATION>
		LED_Y_0;
 80056e0:	2200      	movs	r2, #0
 80056e2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80056e6:	4829      	ldr	r0, [pc, #164]	@ (800578c <main+0xa74>)
 80056e8:	f008 feec 	bl	800e4c4 <HAL_GPIO_WritePin>
	/////////////////////////////// HMC5883L
		if(HMC5883L_Init(&hi2c5) == 0){
 80056ec:	4836      	ldr	r0, [pc, #216]	@ (80057c8 <main+0xab0>)
 80056ee:	f7fb fc73 	bl	8000fd8 <HMC5883L_Init>
 80056f2:	4603      	mov	r3, r0
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d107      	bne.n	8005708 <main+0x9f0>
			LED_R_1;
 80056f8:	2201      	movs	r2, #1
 80056fa:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80056fe:	4823      	ldr	r0, [pc, #140]	@ (800578c <main+0xa74>)
 8005700:	f008 fee0 	bl	800e4c4 <HAL_GPIO_WritePin>
			while(1){
 8005704:	bf00      	nop
 8005706:	e7fd      	b.n	8005704 <main+0x9ec>
			}
		}
		LED_Y_1;
 8005708:	2201      	movs	r2, #1
 800570a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800570e:	481f      	ldr	r0, [pc, #124]	@ (800578c <main+0xa74>)
 8005710:	f008 fed8 	bl	800e4c4 <HAL_GPIO_WritePin>
		Mag_Offset_val = HMC5883L_Calibration();
 8005714:	f7fb fd10 	bl	8001138 <HMC5883L_Calibration>
 8005718:	4603      	mov	r3, r0
 800571a:	461a      	mov	r2, r3
 800571c:	4b34      	ldr	r3, [pc, #208]	@ (80057f0 <main+0xad8>)
 800571e:	801a      	strh	r2, [r3, #0]
		LED_Y_0;
 8005720:	2200      	movs	r2, #0
 8005722:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005726:	4819      	ldr	r0, [pc, #100]	@ (800578c <main+0xa74>)
 8005728:	f008 fecc 	bl	800e4c4 <HAL_GPIO_WritePin>

		LED_5_0;
 800572c:	2200      	movs	r2, #0
 800572e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005732:	4824      	ldr	r0, [pc, #144]	@ (80057c4 <main+0xaac>)
 8005734:	f008 fec6 	bl	800e4c4 <HAL_GPIO_WritePin>



		MYDRON.dron_status.Connection = DRON_CONNECTED;
 8005738:	4b16      	ldr	r3, [pc, #88]	@ (8005794 <main+0xa7c>)
 800573a:	2201      	movs	r2, #1
 800573c:	825a      	strh	r2, [r3, #18]
		MYDRON.dron_status.position = DRON_POSITION_OK;
 800573e:	4b15      	ldr	r3, [pc, #84]	@ (8005794 <main+0xa7c>)
 8005740:	220c      	movs	r2, #12
 8005742:	835a      	strh	r2, [r3, #26]


		MYDRON.THRUST = 0;
 8005744:	4b13      	ldr	r3, [pc, #76]	@ (8005794 <main+0xa7c>)
 8005746:	2200      	movs	r2, #0
 8005748:	805a      	strh	r2, [r3, #2]




	/////////////////////////////// nRF24
		LED_6_1;
 800574a:	2201      	movs	r2, #1
 800574c:	2108      	movs	r1, #8
 800574e:	4829      	ldr	r0, [pc, #164]	@ (80057f4 <main+0xadc>)
 8005750:	f008 feb8 	bl	800e4c4 <HAL_GPIO_WritePin>
		nRF24_Init(&hspi6);
 8005754:	4828      	ldr	r0, [pc, #160]	@ (80057f8 <main+0xae0>)
 8005756:	f7fc ff2f 	bl	80025b8 <nRF24_Init>
		nRF24_SetRXAddress(0, o);
 800575a:	f107 0308 	add.w	r3, r7, #8
 800575e:	4619      	mov	r1, r3
 8005760:	2000      	movs	r0, #0
 8005762:	f7fc fdce 	bl	8002302 <nRF24_SetRXAddress>
		nRF24_SetTXAddress(n);
 8005766:	1d3b      	adds	r3, r7, #4
 8005768:	4618      	mov	r0, r3
 800576a:	f7fc fe03 	bl	8002374 <nRF24_SetTXAddress>
		nRF24_Inittest();
 800576e:	f7fc ff77 	bl	8002660 <nRF24_Inittest>
		nRF24_TX_Mode();
 8005772:	f7fc fbf1 	bl	8001f58 <nRF24_TX_Mode>


		for(int i = 0; i < 32; i++){
 8005776:	2300      	movs	r3, #0
 8005778:	617b      	str	r3, [r7, #20]
 800577a:	e047      	b.n	800580c <main+0xaf4>
 800577c:	0000019c 	.word	0x0000019c
 8005780:	24000eb0 	.word	0x24000eb0
 8005784:	24000464 	.word	0x24000464
 8005788:	240000ac 	.word	0x240000ac
 800578c:	58020400 	.word	0x58020400
 8005790:	24000380 	.word	0x24000380
 8005794:	00000178 	.word	0x00000178
 8005798:	000041cc 	.word	0x000041cc
 800579c:	58020c00 	.word	0x58020c00
 80057a0:	0801e830 	.word	0x0801e830
 80057a4:	24000eb4 	.word	0x24000eb4
 80057a8:	24001eec 	.word	0x24001eec
 80057ac:	0801e834 	.word	0x0801e834
 80057b0:	0801e840 	.word	0x0801e840
 80057b4:	24001ef0 	.word	0x24001ef0
 80057b8:	24002f28 	.word	0x24002f28
 80057bc:	0001f7e7 	.word	0x0001f7e7
 80057c0:	24002f24 	.word	0x24002f24
 80057c4:	58020000 	.word	0x58020000
 80057c8:	24000198 	.word	0x24000198
 80057cc:	42830000 	.word	0x42830000
 80057d0:	46000000 	.word	0x46000000
 80057d4:	00000044 	.word	0x00000044
 80057d8:	00000040 	.word	0x00000040
 80057dc:	0000003c 	.word	0x0000003c
 80057e0:	00000038 	.word	0x00000038
 80057e4:	00000034 	.word	0x00000034
 80057e8:	00000030 	.word	0x00000030
 80057ec:	000000e4 	.word	0x000000e4
 80057f0:	00000060 	.word	0x00000060
 80057f4:	58021000 	.word	0x58021000
 80057f8:	24000274 	.word	0x24000274
			Txcode[i] = 0;
 80057fc:	4a6c      	ldr	r2, [pc, #432]	@ (80059b0 <main+0xc98>)
 80057fe:	697b      	ldr	r3, [r7, #20]
 8005800:	4413      	add	r3, r2
 8005802:	2200      	movs	r2, #0
 8005804:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < 32; i++){
 8005806:	697b      	ldr	r3, [r7, #20]
 8005808:	3301      	adds	r3, #1
 800580a:	617b      	str	r3, [r7, #20]
 800580c:	697b      	ldr	r3, [r7, #20]
 800580e:	2b1f      	cmp	r3, #31
 8005810:	ddf4      	ble.n	80057fc <main+0xae4>
		}
		Txcode[22] = 'd';
 8005812:	4b67      	ldr	r3, [pc, #412]	@ (80059b0 <main+0xc98>)
 8005814:	2264      	movs	r2, #100	@ 0x64
 8005816:	759a      	strb	r2, [r3, #22]
		Txcode[23] = 'r';
 8005818:	4b65      	ldr	r3, [pc, #404]	@ (80059b0 <main+0xc98>)
 800581a:	2272      	movs	r2, #114	@ 0x72
 800581c:	75da      	strb	r2, [r3, #23]
		Txcode[24] = 'o';
 800581e:	4b64      	ldr	r3, [pc, #400]	@ (80059b0 <main+0xc98>)
 8005820:	226f      	movs	r2, #111	@ 0x6f
 8005822:	761a      	strb	r2, [r3, #24]
		Txcode[25] = 'n';
 8005824:	4b62      	ldr	r3, [pc, #392]	@ (80059b0 <main+0xc98>)
 8005826:	226e      	movs	r2, #110	@ 0x6e
 8005828:	765a      	strb	r2, [r3, #25]
		Txcode[26] = '2';
 800582a:	4b61      	ldr	r3, [pc, #388]	@ (80059b0 <main+0xc98>)
 800582c:	2232      	movs	r2, #50	@ 0x32
 800582e:	769a      	strb	r2, [r3, #26]
		Txcode[27] = 'c';
 8005830:	4b5f      	ldr	r3, [pc, #380]	@ (80059b0 <main+0xc98>)
 8005832:	2263      	movs	r2, #99	@ 0x63
 8005834:	76da      	strb	r2, [r3, #27]
		Txcode[28] = '1';
 8005836:	4b5e      	ldr	r3, [pc, #376]	@ (80059b0 <main+0xc98>)
 8005838:	2231      	movs	r2, #49	@ 0x31
 800583a:	771a      	strb	r2, [r3, #28]
		Txcode[29] = 'z';
 800583c:	4b5c      	ldr	r3, [pc, #368]	@ (80059b0 <main+0xc98>)
 800583e:	227a      	movs	r2, #122	@ 0x7a
 8005840:	775a      	strb	r2, [r3, #29]
		Txcode[30] = 'a';
 8005842:	4b5b      	ldr	r3, [pc, #364]	@ (80059b0 <main+0xc98>)
 8005844:	2261      	movs	r2, #97	@ 0x61
 8005846:	779a      	strb	r2, [r3, #30]
		Txcode[31] = '7';
 8005848:	4b59      	ldr	r3, [pc, #356]	@ (80059b0 <main+0xc98>)
 800584a:	2237      	movs	r2, #55	@ 0x37
 800584c:	77da      	strb	r2, [r3, #31]



		nRF24_WriteTXPayload(Txcode);
 800584e:	4858      	ldr	r0, [pc, #352]	@ (80059b0 <main+0xc98>)
 8005850:	f7fc fe40 	bl	80024d4 <nRF24_WriteTXPayload>
		nRF24_WaitTX();
 8005854:	f7fc fe4c 	bl	80024f0 <nRF24_WaitTX>
		nRF24_RX_Mode();
 8005858:	f7fc fb52 	bl	8001f00 <nRF24_RX_Mode>

		uint8_t cunter = 0;
 800585c:	2300      	movs	r3, #0
 800585e:	74fb      	strb	r3, [r7, #19]

		while(nRF24_IsBitSetInFifoStatus(NRF24_RX_EMPTY) == 1){
 8005860:	e022      	b.n	80058a8 <main+0xb90>
			LED_G_1;
 8005862:	2201      	movs	r2, #1
 8005864:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005868:	4852      	ldr	r0, [pc, #328]	@ (80059b4 <main+0xc9c>)
 800586a:	f008 fe2b 	bl	800e4c4 <HAL_GPIO_WritePin>
			LED_Y_1;
 800586e:	2201      	movs	r2, #1
 8005870:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005874:	4850      	ldr	r0, [pc, #320]	@ (80059b8 <main+0xca0>)
 8005876:	f008 fe25 	bl	800e4c4 <HAL_GPIO_WritePin>
			HAL_Delay(1);
 800587a:	2001      	movs	r0, #1
 800587c:	f003 fce6 	bl	800924c <HAL_Delay>
			LED_G_0;
 8005880:	2200      	movs	r2, #0
 8005882:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005886:	484b      	ldr	r0, [pc, #300]	@ (80059b4 <main+0xc9c>)
 8005888:	f008 fe1c 	bl	800e4c4 <HAL_GPIO_WritePin>
			LED_Y_0;
 800588c:	2200      	movs	r2, #0
 800588e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005892:	4849      	ldr	r0, [pc, #292]	@ (80059b8 <main+0xca0>)
 8005894:	f008 fe16 	bl	800e4c4 <HAL_GPIO_WritePin>

			cunter++;
 8005898:	7cfb      	ldrb	r3, [r7, #19]
 800589a:	3301      	adds	r3, #1
 800589c:	74fb      	strb	r3, [r7, #19]
			if(cunter == 100){
 800589e:	7cfb      	ldrb	r3, [r7, #19]
 80058a0:	2b64      	cmp	r3, #100	@ 0x64
 80058a2:	d101      	bne.n	80058a8 <main+0xb90>
				NVIC_SystemReset();
 80058a4:	f7ff fa22 	bl	8004cec <__NVIC_SystemReset>
		while(nRF24_IsBitSetInFifoStatus(NRF24_RX_EMPTY) == 1){
 80058a8:	2000      	movs	r0, #0
 80058aa:	f7fc fe65 	bl	8002578 <nRF24_IsBitSetInFifoStatus>
 80058ae:	4603      	mov	r3, r0
 80058b0:	2b01      	cmp	r3, #1
 80058b2:	d0d6      	beq.n	8005862 <main+0xb4a>
			}
		}

		nRF24_ReadRXPaylaod(RxData);
 80058b4:	4841      	ldr	r0, [pc, #260]	@ (80059bc <main+0xca4>)
 80058b6:	f7fc fe43 	bl	8002540 <nRF24_ReadRXPaylaod>
		LED_6_0;
 80058ba:	2200      	movs	r2, #0
 80058bc:	2108      	movs	r1, #8
 80058be:	483d      	ldr	r0, [pc, #244]	@ (80059b4 <main+0xc9c>)
 80058c0:	f008 fe00 	bl	800e4c4 <HAL_GPIO_WritePin>
		for(int i = 12; i < 22; i++){
 80058c4:	230c      	movs	r3, #12
 80058c6:	60fb      	str	r3, [r7, #12]
 80058c8:	e00b      	b.n	80058e2 <main+0xbca>
			Rxcode[i] = RxData[i];
 80058ca:	4a3c      	ldr	r2, [pc, #240]	@ (80059bc <main+0xca4>)
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	4413      	add	r3, r2
 80058d0:	7819      	ldrb	r1, [r3, #0]
 80058d2:	4a3b      	ldr	r2, [pc, #236]	@ (80059c0 <main+0xca8>)
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	4413      	add	r3, r2
 80058d8:	460a      	mov	r2, r1
 80058da:	701a      	strb	r2, [r3, #0]
		for(int i = 12; i < 22; i++){
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	3301      	adds	r3, #1
 80058e0:	60fb      	str	r3, [r7, #12]
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	2b15      	cmp	r3, #21
 80058e6:	ddf0      	ble.n	80058ca <main+0xbb2>
		}
	///////////////////////////////////////////////////////////////////////
		ESC_INT(&htim3);
 80058e8:	4836      	ldr	r0, [pc, #216]	@ (80059c4 <main+0xcac>)
 80058ea:	f7fb fb2b 	bl	8000f44 <ESC_INT>

		LED_7_1;
 80058ee:	2201      	movs	r2, #1
 80058f0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80058f4:	4834      	ldr	r0, [pc, #208]	@ (80059c8 <main+0xcb0>)
 80058f6:	f008 fde5 	bl	800e4c4 <HAL_GPIO_WritePin>
		HAL_UART_Receive_IT(&huart1, &Received, 1);
 80058fa:	2201      	movs	r2, #1
 80058fc:	4933      	ldr	r1, [pc, #204]	@ (80059cc <main+0xcb4>)
 80058fe:	4834      	ldr	r0, [pc, #208]	@ (80059d0 <main+0xcb8>)
 8005900:	f012 faaa 	bl	8017e58 <HAL_UART_Receive_IT>
		LED_7_0;
 8005904:	2200      	movs	r2, #0
 8005906:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800590a:	482f      	ldr	r0, [pc, #188]	@ (80059c8 <main+0xcb0>)
 800590c:	f008 fdda 	bl	800e4c4 <HAL_GPIO_WritePin>

		HAL_TIM_Base_Start_IT(&htim2); // przerwanie co 1 ms
 8005910:	4830      	ldr	r0, [pc, #192]	@ (80059d4 <main+0xcbc>)
 8005912:	f010 fc45 	bl	80161a0 <HAL_TIM_Base_Start_IT>



	  	RGB_LED_For_BAT(MYDRON.batterysize);
 8005916:	4b30      	ldr	r3, [pc, #192]	@ (80059d8 <main+0xcc0>)
 8005918:	881b      	ldrh	r3, [r3, #0]
 800591a:	b2db      	uxtb	r3, r3
 800591c:	4618      	mov	r0, r3
 800591e:	f001 fc9f 	bl	8007260 <RGB_LED_For_BAT>


	  	if(MYDRON.dron_status.Battery == DRON_BATTERY_RUN_OUT)
 8005922:	4b2d      	ldr	r3, [pc, #180]	@ (80059d8 <main+0xcc0>)
 8005924:	8a9b      	ldrh	r3, [r3, #20]
 8005926:	2b07      	cmp	r3, #7
 8005928:	d107      	bne.n	800593a <main+0xc22>
	  	{
	  		LED_R_1;
 800592a:	2201      	movs	r2, #1
 800592c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005930:	4821      	ldr	r0, [pc, #132]	@ (80059b8 <main+0xca0>)
 8005932:	f008 fdc7 	bl	800e4c4 <HAL_GPIO_WritePin>
	  		while(1){
 8005936:	bf00      	nop
 8005938:	e7fd      	b.n	8005936 <main+0xc1e>
	  		}
	  	}



	  	if(MYDRON.dron_status.Battery == DRON_BATTERY_CRIT_VAL){
 800593a:	4b27      	ldr	r3, [pc, #156]	@ (80059d8 <main+0xcc0>)
 800593c:	8a9b      	ldrh	r3, [r3, #20]
 800593e:	2b09      	cmp	r3, #9
 8005940:	d107      	bne.n	8005952 <main+0xc3a>
	  		LED_R_1;
 8005942:	2201      	movs	r2, #1
 8005944:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005948:	481b      	ldr	r0, [pc, #108]	@ (80059b8 <main+0xca0>)
 800594a:	f008 fdbb 	bl	800e4c4 <HAL_GPIO_WritePin>
	  		while(1){
 800594e:	bf00      	nop
 8005950:	e7fd      	b.n	800594e <main+0xc36>
	  		}
	  	}



		STARTUP = 0;
 8005952:	4b22      	ldr	r3, [pc, #136]	@ (80059dc <main+0xcc4>)
 8005954:	2200      	movs	r2, #0
 8005956:	701a      	strb	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(MYDRON.dron_status.Battery == DRON_BATTERY_RUN_OUT){
 8005958:	4b1f      	ldr	r3, [pc, #124]	@ (80059d8 <main+0xcc0>)
 800595a:	8a9b      	ldrh	r3, [r3, #20]
 800595c:	2b07      	cmp	r3, #7
 800595e:	d10a      	bne.n	8005976 <main+0xc5e>
	  			LED_R_1;
 8005960:	2201      	movs	r2, #1
 8005962:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005966:	4814      	ldr	r0, [pc, #80]	@ (80059b8 <main+0xca0>)
 8005968:	f008 fdac 	bl	800e4c4 <HAL_GPIO_WritePin>
	  			thrust_limit = MYDRON.THRUST;
 800596c:	4b1a      	ldr	r3, [pc, #104]	@ (80059d8 <main+0xcc0>)
 800596e:	885b      	ldrh	r3, [r3, #2]
 8005970:	b21a      	sxth	r2, r3
 8005972:	4b1b      	ldr	r3, [pc, #108]	@ (80059e0 <main+0xcc8>)
 8005974:	801a      	strh	r2, [r3, #0]
	  		}
	  		if(MYDRON.dron_status.Battery == DRON_BATTERY_OK){
 8005976:	4b18      	ldr	r3, [pc, #96]	@ (80059d8 <main+0xcc0>)
 8005978:	8a9b      	ldrh	r3, [r3, #20]
 800597a:	2b08      	cmp	r3, #8
 800597c:	d103      	bne.n	8005986 <main+0xc6e>
	  			thrust_limit = 10000;
 800597e:	4b18      	ldr	r3, [pc, #96]	@ (80059e0 <main+0xcc8>)
 8005980:	f242 7210 	movw	r2, #10000	@ 0x2710
 8005984:	801a      	strh	r2, [r3, #0]
	  		}
	  		if(MYDRON.dron_status.Battery == DRON_BATTERY_CRIT_VAL){
 8005986:	4b14      	ldr	r3, [pc, #80]	@ (80059d8 <main+0xcc0>)
 8005988:	8a9b      	ldrh	r3, [r3, #20]
 800598a:	2b09      	cmp	r3, #9
 800598c:	d137      	bne.n	80059fe <main+0xce6>
	  			ESC_POWER_1;
 800598e:	2201      	movs	r2, #1
 8005990:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005994:	4813      	ldr	r0, [pc, #76]	@ (80059e4 <main+0xccc>)
 8005996:	f008 fd95 	bl	800e4c4 <HAL_GPIO_WritePin>
	  			LED_R_1;
 800599a:	2201      	movs	r2, #1
 800599c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80059a0:	4805      	ldr	r0, [pc, #20]	@ (80059b8 <main+0xca0>)
 80059a2:	f008 fd8f 	bl	800e4c4 <HAL_GPIO_WritePin>
	  			f_close(&fil);
 80059a6:	4810      	ldr	r0, [pc, #64]	@ (80059e8 <main+0xcd0>)
 80059a8:	f018 f824 	bl	801d9f4 <f_close>
	  			while(MYDRON.dron_status.Battery == DRON_BATTERY_CRIT_VAL){
 80059ac:	e023      	b.n	80059f6 <main+0xcde>
 80059ae:	bf00      	nop
 80059b0:	00000114 	.word	0x00000114
 80059b4:	58021000 	.word	0x58021000
 80059b8:	58020400 	.word	0x58020400
 80059bc:	000000f4 	.word	0x000000f4
 80059c0:	00000154 	.word	0x00000154
 80059c4:	24000418 	.word	0x24000418
 80059c8:	58020000 	.word	0x58020000
 80059cc:	000041c0 	.word	0x000041c0
 80059d0:	240004b0 	.word	0x240004b0
 80059d4:	240003cc 	.word	0x240003cc
 80059d8:	00000178 	.word	0x00000178
 80059dc:	00000074 	.word	0x00000074
 80059e0:	0000405e 	.word	0x0000405e
 80059e4:	58021800 	.word	0x58021800
 80059e8:	24001ef0 	.word	0x24001ef0
	  				HAL_Delay(10);
 80059ec:	200a      	movs	r0, #10
 80059ee:	f003 fc2d 	bl	800924c <HAL_Delay>
	  				Get_batteryvalue();
 80059f2:	f7fe fa89 	bl	8003f08 <Get_batteryvalue>
	  			while(MYDRON.dron_status.Battery == DRON_BATTERY_CRIT_VAL){
 80059f6:	4b65      	ldr	r3, [pc, #404]	@ (8005b8c <main+0xe74>)
 80059f8:	8a9b      	ldrh	r3, [r3, #20]
 80059fa:	2b09      	cmp	r3, #9
 80059fc:	d0f6      	beq.n	80059ec <main+0xcd4>
	  			}
	  		}

	  		if(commandready == 1){
 80059fe:	4b64      	ldr	r3, [pc, #400]	@ (8005b90 <main+0xe78>)
 8005a00:	781b      	ldrb	r3, [r3, #0]
 8005a02:	2b01      	cmp	r3, #1
 8005a04:	d159      	bne.n	8005aba <main+0xda2>
	  			LED_7_1;
 8005a06:	2201      	movs	r2, #1
 8005a08:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005a0c:	4861      	ldr	r0, [pc, #388]	@ (8005b94 <main+0xe7c>)
 8005a0e:	f008 fd59 	bl	800e4c4 <HAL_GPIO_WritePin>
	  			interpretcommand();
 8005a12:	f7fc fe43 	bl	800269c <interpretcommand>
	  			executecommand(command, UASRT_PID_VAL);
 8005a16:	4960      	ldr	r1, [pc, #384]	@ (8005b98 <main+0xe80>)
 8005a18:	4860      	ldr	r0, [pc, #384]	@ (8005b9c <main+0xe84>)
 8005a1a:	f7fc fe8d 	bl	8002738 <executecommand>
	  			LED_7_0;
 8005a1e:	2200      	movs	r2, #0
 8005a20:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005a24:	485b      	ldr	r0, [pc, #364]	@ (8005b94 <main+0xe7c>)
 8005a26:	f008 fd4d 	bl	800e4c4 <HAL_GPIO_WritePin>

	  			PID_FAC_Pitch[0] = p_pitchfactor;
 8005a2a:	4b5d      	ldr	r3, [pc, #372]	@ (8005ba0 <main+0xe88>)
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	4a5d      	ldr	r2, [pc, #372]	@ (8005ba4 <main+0xe8c>)
 8005a30:	6013      	str	r3, [r2, #0]
	  			PID_FAC_Pitch[1] = i_pitchfactor;
 8005a32:	4b5d      	ldr	r3, [pc, #372]	@ (8005ba8 <main+0xe90>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	4a5b      	ldr	r2, [pc, #364]	@ (8005ba4 <main+0xe8c>)
 8005a38:	6053      	str	r3, [r2, #4]
	  			PID_FAC_Pitch[2] = d_pitchfactor;
 8005a3a:	4b5c      	ldr	r3, [pc, #368]	@ (8005bac <main+0xe94>)
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	4a59      	ldr	r2, [pc, #356]	@ (8005ba4 <main+0xe8c>)
 8005a40:	6093      	str	r3, [r2, #8]

	  			PID_FAC_Angular_Rate_Pitch[0] = p_angular_rate_pitchfactor;
 8005a42:	4b5b      	ldr	r3, [pc, #364]	@ (8005bb0 <main+0xe98>)
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	4a5b      	ldr	r2, [pc, #364]	@ (8005bb4 <main+0xe9c>)
 8005a48:	6013      	str	r3, [r2, #0]
	  			PID_FAC_Angular_Rate_Pitch[1] = i_angular_rate_pitchfactor;
 8005a4a:	4b5b      	ldr	r3, [pc, #364]	@ (8005bb8 <main+0xea0>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	4a59      	ldr	r2, [pc, #356]	@ (8005bb4 <main+0xe9c>)
 8005a50:	6053      	str	r3, [r2, #4]
	  			PID_FAC_Angular_Rate_Pitch[2] = d_angular_rate_pitchfactor;
 8005a52:	4b5a      	ldr	r3, [pc, #360]	@ (8005bbc <main+0xea4>)
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	4a57      	ldr	r2, [pc, #348]	@ (8005bb4 <main+0xe9c>)
 8005a58:	6093      	str	r3, [r2, #8]

	  			PID_FAC_Rool[0] = p_roolfactor;
 8005a5a:	4b59      	ldr	r3, [pc, #356]	@ (8005bc0 <main+0xea8>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4a59      	ldr	r2, [pc, #356]	@ (8005bc4 <main+0xeac>)
 8005a60:	6013      	str	r3, [r2, #0]
	  			PID_FAC_Rool[1] = i_roolfactor;
 8005a62:	4b59      	ldr	r3, [pc, #356]	@ (8005bc8 <main+0xeb0>)
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	4a57      	ldr	r2, [pc, #348]	@ (8005bc4 <main+0xeac>)
 8005a68:	6053      	str	r3, [r2, #4]
	  			PID_FAC_Rool[2] = d_roolfactor;
 8005a6a:	4b58      	ldr	r3, [pc, #352]	@ (8005bcc <main+0xeb4>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	4a55      	ldr	r2, [pc, #340]	@ (8005bc4 <main+0xeac>)
 8005a70:	6093      	str	r3, [r2, #8]

	  			PID_FAC_Angular_Rate_Rool[0] = p_angular_rate_roolfactor;
 8005a72:	4b57      	ldr	r3, [pc, #348]	@ (8005bd0 <main+0xeb8>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	4a57      	ldr	r2, [pc, #348]	@ (8005bd4 <main+0xebc>)
 8005a78:	6013      	str	r3, [r2, #0]
	  			PID_FAC_Angular_Rate_Rool[1] = i_angular_rate_roolfactor;
 8005a7a:	4b57      	ldr	r3, [pc, #348]	@ (8005bd8 <main+0xec0>)
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	4a55      	ldr	r2, [pc, #340]	@ (8005bd4 <main+0xebc>)
 8005a80:	6053      	str	r3, [r2, #4]
	  			PID_FAC_Angular_Rate_Rool[2] = d_angular_rate_roolfactor;
 8005a82:	4b56      	ldr	r3, [pc, #344]	@ (8005bdc <main+0xec4>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4a53      	ldr	r2, [pc, #332]	@ (8005bd4 <main+0xebc>)
 8005a88:	6093      	str	r3, [r2, #8]

	  			PID_FAC_Yaw[0] = p_yawfactor;
 8005a8a:	4b55      	ldr	r3, [pc, #340]	@ (8005be0 <main+0xec8>)
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	4a55      	ldr	r2, [pc, #340]	@ (8005be4 <main+0xecc>)
 8005a90:	6013      	str	r3, [r2, #0]
	  			PID_FAC_Yaw[1] = i_yawfactor;
 8005a92:	4b55      	ldr	r3, [pc, #340]	@ (8005be8 <main+0xed0>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	4a53      	ldr	r2, [pc, #332]	@ (8005be4 <main+0xecc>)
 8005a98:	6053      	str	r3, [r2, #4]
	  			PID_FAC_Yaw[2] = d_yawfactor;
 8005a9a:	4b54      	ldr	r3, [pc, #336]	@ (8005bec <main+0xed4>)
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	4a51      	ldr	r2, [pc, #324]	@ (8005be4 <main+0xecc>)
 8005aa0:	6093      	str	r3, [r2, #8]

	  			PID_FAC_Angular_Rate_Yaw[0] = p_angular_rate_yawfactor;
 8005aa2:	4b53      	ldr	r3, [pc, #332]	@ (8005bf0 <main+0xed8>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	4a53      	ldr	r2, [pc, #332]	@ (8005bf4 <main+0xedc>)
 8005aa8:	6013      	str	r3, [r2, #0]
	  			PID_FAC_Angular_Rate_Yaw[1] = i_angular_rate_yawfactor;
 8005aaa:	4b53      	ldr	r3, [pc, #332]	@ (8005bf8 <main+0xee0>)
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	4a51      	ldr	r2, [pc, #324]	@ (8005bf4 <main+0xedc>)
 8005ab0:	6053      	str	r3, [r2, #4]
	  			PID_FAC_Angular_Rate_Yaw[2] = d_angular_rate_yawfactor;
 8005ab2:	4b52      	ldr	r3, [pc, #328]	@ (8005bfc <main+0xee4>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	4a4f      	ldr	r2, [pc, #316]	@ (8005bf4 <main+0xedc>)
 8005ab8:	6093      	str	r3, [r2, #8]
	  		}

	  		if((TIM_inte_SD == 1) && (fresult == FR_OK) && (SD_enable_Flag == 1)){// 1ms, 1KHz
 8005aba:	4b51      	ldr	r3, [pc, #324]	@ (8005c00 <main+0xee8>)
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	2b01      	cmp	r3, #1
 8005ac0:	d14f      	bne.n	8005b62 <main+0xe4a>
 8005ac2:	4b50      	ldr	r3, [pc, #320]	@ (8005c04 <main+0xeec>)
 8005ac4:	781b      	ldrb	r3, [r3, #0]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d14b      	bne.n	8005b62 <main+0xe4a>
 8005aca:	4b4f      	ldr	r3, [pc, #316]	@ (8005c08 <main+0xef0>)
 8005acc:	781b      	ldrb	r3, [r3, #0]
 8005ace:	2b01      	cmp	r3, #1
 8005ad0:	d147      	bne.n	8005b62 <main+0xe4a>
	  			TIM_inte_SD = 0;
 8005ad2:	4b4b      	ldr	r3, [pc, #300]	@ (8005c00 <main+0xee8>)
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	601a      	str	r2, [r3, #0]

	  			uSD_Card_SendData_To_Buffer(Mainloop_Number);
 8005ad8:	4b4c      	ldr	r3, [pc, #304]	@ (8005c0c <main+0xef4>)
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	4618      	mov	r0, r3
 8005ade:	f001 fd55 	bl	800758c <uSD_Card_SendData_To_Buffer>

	  			if(Mainloop_Number == 999){//zapisywanie karty raz na 1 sec
 8005ae2:	4b4a      	ldr	r3, [pc, #296]	@ (8005c0c <main+0xef4>)
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d12b      	bne.n	8005b46 <main+0xe2e>
	  				SD_In_Use = 1;
 8005aee:	4b48      	ldr	r3, [pc, #288]	@ (8005c10 <main+0xef8>)
 8005af0:	2201      	movs	r2, #1
 8005af2:	601a      	str	r2, [r3, #0]
	  				LED_uSD_1;
 8005af4:	2201      	movs	r2, #1
 8005af6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005afa:	4846      	ldr	r0, [pc, #280]	@ (8005c14 <main+0xefc>)
 8005afc:	f008 fce2 	bl	800e4c4 <HAL_GPIO_WritePin>
	  				fresult = f_open(&fil, "file.txt", FA_OPEN_APPEND | FA_WRITE);
 8005b00:	2232      	movs	r2, #50	@ 0x32
 8005b02:	4945      	ldr	r1, [pc, #276]	@ (8005c18 <main+0xf00>)
 8005b04:	4845      	ldr	r0, [pc, #276]	@ (8005c1c <main+0xf04>)
 8005b06:	f017 fb9b 	bl	801d240 <f_open>
 8005b0a:	4603      	mov	r3, r0
 8005b0c:	461a      	mov	r2, r3
 8005b0e:	4b3d      	ldr	r3, [pc, #244]	@ (8005c04 <main+0xeec>)
 8005b10:	701a      	strb	r2, [r3, #0]
	  				fresult = f_write(&fil, DataToSendBuffer, 129000, &bw);
 8005b12:	4b43      	ldr	r3, [pc, #268]	@ (8005c20 <main+0xf08>)
 8005b14:	4a43      	ldr	r2, [pc, #268]	@ (8005c24 <main+0xf0c>)
 8005b16:	4944      	ldr	r1, [pc, #272]	@ (8005c28 <main+0xf10>)
 8005b18:	4840      	ldr	r0, [pc, #256]	@ (8005c1c <main+0xf04>)
 8005b1a:	f017 fd59 	bl	801d5d0 <f_write>
 8005b1e:	4603      	mov	r3, r0
 8005b20:	461a      	mov	r2, r3
 8005b22:	4b38      	ldr	r3, [pc, #224]	@ (8005c04 <main+0xeec>)
 8005b24:	701a      	strb	r2, [r3, #0]
	  				fresult = f_close(&fil);
 8005b26:	483d      	ldr	r0, [pc, #244]	@ (8005c1c <main+0xf04>)
 8005b28:	f017 ff64 	bl	801d9f4 <f_close>
 8005b2c:	4603      	mov	r3, r0
 8005b2e:	461a      	mov	r2, r3
 8005b30:	4b34      	ldr	r3, [pc, #208]	@ (8005c04 <main+0xeec>)
 8005b32:	701a      	strb	r2, [r3, #0]
	  				LED_uSD_0;
 8005b34:	2200      	movs	r2, #0
 8005b36:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005b3a:	4836      	ldr	r0, [pc, #216]	@ (8005c14 <main+0xefc>)
 8005b3c:	f008 fcc2 	bl	800e4c4 <HAL_GPIO_WritePin>
	  				SD_In_Use = 0;
 8005b40:	4b33      	ldr	r3, [pc, #204]	@ (8005c10 <main+0xef8>)
 8005b42:	2200      	movs	r2, #0
 8005b44:	601a      	str	r2, [r3, #0]
	  				}
	  			if(Mainloop_Number < 1000){
 8005b46:	4b31      	ldr	r3, [pc, #196]	@ (8005c0c <main+0xef4>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005b4e:	d205      	bcs.n	8005b5c <main+0xe44>
	  				Mainloop_Number++;
 8005b50:	4b2e      	ldr	r3, [pc, #184]	@ (8005c0c <main+0xef4>)
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	3301      	adds	r3, #1
 8005b56:	4a2d      	ldr	r2, [pc, #180]	@ (8005c0c <main+0xef4>)
 8005b58:	6013      	str	r3, [r2, #0]
 8005b5a:	e002      	b.n	8005b62 <main+0xe4a>
	  			}
	  			else{
	  				Mainloop_Number = 0;
 8005b5c:	4b2b      	ldr	r3, [pc, #172]	@ (8005c0c <main+0xef4>)
 8005b5e:	2200      	movs	r2, #0
 8005b60:	601a      	str	r2, [r3, #0]
	  			}
	  		}

	  		if(TIM_inte == 1){
 8005b62:	4b32      	ldr	r3, [pc, #200]	@ (8005c2c <main+0xf14>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	2b01      	cmp	r3, #1
 8005b68:	f47f aef6 	bne.w	8005958 <main+0xc40>
	  			LED_R_0;
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005b72:	482f      	ldr	r0, [pc, #188]	@ (8005c30 <main+0xf18>)
 8005b74:	f008 fca6 	bl	800e4c4 <HAL_GPIO_WritePin>
	  			RGB_LED_For_BAT(MYDRON.batterysize);
 8005b78:	4b04      	ldr	r3, [pc, #16]	@ (8005b8c <main+0xe74>)
 8005b7a:	881b      	ldrh	r3, [r3, #0]
 8005b7c:	b2db      	uxtb	r3, r3
 8005b7e:	4618      	mov	r0, r3
 8005b80:	f001 fb6e 	bl	8007260 <RGB_LED_For_BAT>
	  			TIM_inte = 0;
 8005b84:	4b29      	ldr	r3, [pc, #164]	@ (8005c2c <main+0xf14>)
 8005b86:	2200      	movs	r2, #0
 8005b88:	601a      	str	r2, [r3, #0]
	  if(MYDRON.dron_status.Battery == DRON_BATTERY_RUN_OUT){
 8005b8a:	e6e5      	b.n	8005958 <main+0xc40>
 8005b8c:	00000178 	.word	0x00000178
 8005b90:	000041be 	.word	0x000041be
 8005b94:	58020000 	.word	0x58020000
 8005b98:	000041a0 	.word	0x000041a0
 8005b9c:	000041b0 	.word	0x000041b0
 8005ba0:	000040cc 	.word	0x000040cc
 8005ba4:	000040f0 	.word	0x000040f0
 8005ba8:	000040d8 	.word	0x000040d8
 8005bac:	000040e4 	.word	0x000040e4
 8005bb0:	0000412c 	.word	0x0000412c
 8005bb4:	00004150 	.word	0x00004150
 8005bb8:	00004138 	.word	0x00004138
 8005bbc:	00004144 	.word	0x00004144
 8005bc0:	000040d0 	.word	0x000040d0
 8005bc4:	00004104 	.word	0x00004104
 8005bc8:	000040dc 	.word	0x000040dc
 8005bcc:	000040e8 	.word	0x000040e8
 8005bd0:	00004130 	.word	0x00004130
 8005bd4:	00004164 	.word	0x00004164
 8005bd8:	0000413c 	.word	0x0000413c
 8005bdc:	00004148 	.word	0x00004148
 8005be0:	000040d4 	.word	0x000040d4
 8005be4:	00004118 	.word	0x00004118
 8005be8:	000040e0 	.word	0x000040e0
 8005bec:	000040ec 	.word	0x000040ec
 8005bf0:	00004134 	.word	0x00004134
 8005bf4:	00004178 	.word	0x00004178
 8005bf8:	00004140 	.word	0x00004140
 8005bfc:	0000414c 	.word	0x0000414c
 8005c00:	0000006c 	.word	0x0000006c
 8005c04:	24001eec 	.word	0x24001eec
 8005c08:	000041cc 	.word	0x000041cc
 8005c0c:	000041c4 	.word	0x000041c4
 8005c10:	000041c8 	.word	0x000041c8
 8005c14:	58020c00 	.word	0x58020c00
 8005c18:	0801e840 	.word	0x0801e840
 8005c1c:	24001ef0 	.word	0x24001ef0
 8005c20:	24002f24 	.word	0x24002f24
 8005c24:	0001f7e8 	.word	0x0001f7e8
 8005c28:	24002f28 	.word	0x24002f28
 8005c2c:	00000070 	.word	0x00000070
 8005c30:	58020400 	.word	0x58020400

08005c34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b09c      	sub	sp, #112	@ 0x70
 8005c38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005c3a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005c3e:	224c      	movs	r2, #76	@ 0x4c
 8005c40:	2100      	movs	r1, #0
 8005c42:	4618      	mov	r0, r3
 8005c44:	f018 f8ce 	bl	801dde4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005c48:	1d3b      	adds	r3, r7, #4
 8005c4a:	2220      	movs	r2, #32
 8005c4c:	2100      	movs	r1, #0
 8005c4e:	4618      	mov	r0, r3
 8005c50:	f018 f8c8 	bl	801dde4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8005c54:	2002      	movs	r0, #2
 8005c56:	f00b f8e7 	bl	8010e28 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	603b      	str	r3, [r7, #0]
 8005c5e:	4b2d      	ldr	r3, [pc, #180]	@ (8005d14 <SystemClock_Config+0xe0>)
 8005c60:	699b      	ldr	r3, [r3, #24]
 8005c62:	4a2c      	ldr	r2, [pc, #176]	@ (8005d14 <SystemClock_Config+0xe0>)
 8005c64:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8005c68:	6193      	str	r3, [r2, #24]
 8005c6a:	4b2a      	ldr	r3, [pc, #168]	@ (8005d14 <SystemClock_Config+0xe0>)
 8005c6c:	699b      	ldr	r3, [r3, #24]
 8005c6e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8005c72:	603b      	str	r3, [r7, #0]
 8005c74:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8005c76:	bf00      	nop
 8005c78:	4b26      	ldr	r3, [pc, #152]	@ (8005d14 <SystemClock_Config+0xe0>)
 8005c7a:	699b      	ldr	r3, [r3, #24]
 8005c7c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005c80:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005c84:	d1f8      	bne.n	8005c78 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_CSI|RCC_OSCILLATORTYPE_HSE;
 8005c86:	2311      	movs	r3, #17
 8005c88:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005c8a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005c8e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.CSIState = RCC_CSI_ON;
 8005c90:	2380      	movs	r3, #128	@ 0x80
 8005c92:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.CSICalibrationValue = 16;
 8005c94:	2310      	movs	r3, #16
 8005c96:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005c98:	2302      	movs	r3, #2
 8005c9a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005c9c:	2302      	movs	r3, #2
 8005c9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 3;
 8005ca0:	2303      	movs	r3, #3
 8005ca2:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 68;
 8005ca4:	2344      	movs	r3, #68	@ 0x44
 8005ca6:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8005ca8:	2301      	movs	r3, #1
 8005caa:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8005cac:	2302      	movs	r3, #2
 8005cae:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8005cb0:	2302      	movs	r3, #2
 8005cb2:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8005cb4:	230c      	movs	r3, #12
 8005cb6:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8005cb8:	2300      	movs	r3, #0
 8005cba:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 6144;
 8005cbc:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8005cc0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005cc2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	f00b f8e8 	bl	8010e9c <HAL_RCC_OscConfig>
 8005ccc:	4603      	mov	r3, r0
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d001      	beq.n	8005cd6 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8005cd2:	f001 ff51 	bl	8007b78 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005cd6:	233f      	movs	r3, #63	@ 0x3f
 8005cd8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005cda:	2303      	movs	r3, #3
 8005cdc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8005cde:	2300      	movs	r3, #0
 8005ce0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8005ce2:	2308      	movs	r3, #8
 8005ce4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8005ce6:	2340      	movs	r3, #64	@ 0x40
 8005ce8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8005cea:	2340      	movs	r3, #64	@ 0x40
 8005cec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8005cee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005cf2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8005cf4:	2340      	movs	r3, #64	@ 0x40
 8005cf6:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8005cf8:	1d3b      	adds	r3, r7, #4
 8005cfa:	2103      	movs	r1, #3
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	f00b fca7 	bl	8011650 <HAL_RCC_ClockConfig>
 8005d02:	4603      	mov	r3, r0
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d001      	beq.n	8005d0c <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8005d08:	f001 ff36 	bl	8007b78 <Error_Handler>
  }
}
 8005d0c:	bf00      	nop
 8005d0e:	3770      	adds	r7, #112	@ 0x70
 8005d10:	46bd      	mov	sp, r7
 8005d12:	bd80      	pop	{r7, pc}
 8005d14:	58024800 	.word	0x58024800

08005d18 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b0ae      	sub	sp, #184	@ 0xb8
 8005d1c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005d1e:	463b      	mov	r3, r7
 8005d20:	22b8      	movs	r2, #184	@ 0xb8
 8005d22:	2100      	movs	r1, #0
 8005d24:	4618      	mov	r0, r3
 8005d26:	f018 f85d 	bl	801dde4 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_SPI2;
 8005d2a:	f44f 2201 	mov.w	r2, #528384	@ 0x81000
 8005d2e:	f04f 0300 	mov.w	r3, #0
 8005d32:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 22;
 8005d36:	2316      	movs	r3, #22
 8005d38:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 192;
 8005d3a:	23c0      	movs	r3, #192	@ 0xc0
 8005d3c:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 3;
 8005d3e:	2303      	movs	r3, #3
 8005d40:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8005d42:	2302      	movs	r3, #2
 8005d44:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8005d46:	2302      	movs	r3, #2
 8005d48:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_0;
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8005d4e:	2320      	movs	r3, #32
 8005d50:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8005d52:	2300      	movs	r3, #0
 8005d54:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 8005d56:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005d5a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005d62:	463b      	mov	r3, r7
 8005d64:	4618      	mov	r0, r3
 8005d66:	f00b ffff 	bl	8011d68 <HAL_RCCEx_PeriphCLKConfig>
 8005d6a:	4603      	mov	r3, r0
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d001      	beq.n	8005d74 <PeriphCommonClock_Config+0x5c>
  {
    Error_Handler();
 8005d70:	f001 ff02 	bl	8007b78 <Error_Handler>
  }
}
 8005d74:	bf00      	nop
 8005d76:	37b8      	adds	r7, #184	@ 0xb8
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	bd80      	pop	{r7, pc}

08005d7c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b084      	sub	sp, #16
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
	if(htim == &htim2)// 1 ms
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	4a87      	ldr	r2, [pc, #540]	@ (8005fa4 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	f040 8107 	bne.w	8005f9c <HAL_TIM_PeriodElapsedCallback+0x220>
	{
		TIM_inte_SD = 1;
 8005d8e:	4b86      	ldr	r3, [pc, #536]	@ (8005fa8 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8005d90:	2201      	movs	r2, #1
 8005d92:	601a      	str	r2, [r3, #0]
		TIM_inte = 1;
 8005d94:	4b85      	ldr	r3, [pc, #532]	@ (8005fac <HAL_TIM_PeriodElapsedCallback+0x230>)
 8005d96:	2201      	movs	r2, #1
 8005d98:	601a      	str	r2, [r3, #0]
		NRF_TIM_Inte++;
 8005d9a:	4b85      	ldr	r3, [pc, #532]	@ (8005fb0 <HAL_TIM_PeriodElapsedCallback+0x234>)
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	3301      	adds	r3, #1
 8005da0:	4a83      	ldr	r2, [pc, #524]	@ (8005fb0 <HAL_TIM_PeriodElapsedCallback+0x234>)
 8005da2:	6013      	str	r3, [r2, #0]


		if(i == 0){// na calosc 50ms
 8005da4:	4b83      	ldr	r3, [pc, #524]	@ (8005fb4 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d10d      	bne.n	8005dc8 <HAL_TIM_PeriodElapsedCallback+0x4c>
			LED_5_1;
 8005dac:	2201      	movs	r2, #1
 8005dae:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005db2:	4881      	ldr	r0, [pc, #516]	@ (8005fb8 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8005db4:	f008 fb86 	bl	800e4c4 <HAL_GPIO_WritePin>
			BMP180_start_measurment_temp_IT();
 8005db8:	f7fa fd5a 	bl	8000870 <BMP180_start_measurment_temp_IT>
			LED_5_0;
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005dc2:	487d      	ldr	r0, [pc, #500]	@ (8005fb8 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8005dc4:	f008 fb7e 	bl	800e4c4 <HAL_GPIO_WritePin>
		}

		if(i == 10){//2
 8005dc8:	4b7a      	ldr	r3, [pc, #488]	@ (8005fb4 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	2b0a      	cmp	r3, #10
 8005dce:	d10d      	bne.n	8005dec <HAL_TIM_PeriodElapsedCallback+0x70>
			LED_5_1;
 8005dd0:	2201      	movs	r2, #1
 8005dd2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005dd6:	4878      	ldr	r0, [pc, #480]	@ (8005fb8 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8005dd8:	f008 fb74 	bl	800e4c4 <HAL_GPIO_WritePin>
			BMP180_start_measurment_pres_IT();
 8005ddc:	f7fa fd32 	bl	8000844 <BMP180_start_measurment_pres_IT>
			LED_5_0;
 8005de0:	2200      	movs	r2, #0
 8005de2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005de6:	4874      	ldr	r0, [pc, #464]	@ (8005fb8 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8005de8:	f008 fb6c 	bl	800e4c4 <HAL_GPIO_WritePin>
		}

		if(i == 36){
 8005dec:	4b71      	ldr	r3, [pc, #452]	@ (8005fb4 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	2b24      	cmp	r3, #36	@ 0x24
 8005df2:	d10d      	bne.n	8005e10 <HAL_TIM_PeriodElapsedCallback+0x94>
			LED_5_1;
 8005df4:	2201      	movs	r2, #1
 8005df6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005dfa:	486f      	ldr	r0, [pc, #444]	@ (8005fb8 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8005dfc:	f008 fb62 	bl	800e4c4 <HAL_GPIO_WritePin>
			HMC5883L_Get_Z_Start_IT();
 8005e00:	f7fb f968 	bl	80010d4 <HMC5883L_Get_Z_Start_IT>
			LED_5_0;
 8005e04:	2200      	movs	r2, #0
 8005e06:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005e0a:	486b      	ldr	r0, [pc, #428]	@ (8005fb8 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8005e0c:	f008 fb5a 	bl	800e4c4 <HAL_GPIO_WritePin>
		}

		if(i == 38){
 8005e10:	4b68      	ldr	r3, [pc, #416]	@ (8005fb4 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	2b26      	cmp	r3, #38	@ 0x26
 8005e16:	d10e      	bne.n	8005e36 <HAL_TIM_PeriodElapsedCallback+0xba>
			LED_6_1;
 8005e18:	2201      	movs	r2, #1
 8005e1a:	2108      	movs	r1, #8
 8005e1c:	4867      	ldr	r0, [pc, #412]	@ (8005fbc <HAL_TIM_PeriodElapsedCallback+0x240>)
 8005e1e:	f008 fb51 	bl	800e4c4 <HAL_GPIO_WritePin>
			nRF24_TX_Mode();
 8005e22:	f7fc f899 	bl	8001f58 <nRF24_TX_Mode>
			nRF24_Rx_Mode = 0;
 8005e26:	4b66      	ldr	r3, [pc, #408]	@ (8005fc0 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8005e28:	2200      	movs	r2, #0
 8005e2a:	701a      	strb	r2, [r3, #0]
			LED_6_0;
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	2108      	movs	r1, #8
 8005e30:	4862      	ldr	r0, [pc, #392]	@ (8005fbc <HAL_TIM_PeriodElapsedCallback+0x240>)
 8005e32:	f008 fb47 	bl	800e4c4 <HAL_GPIO_WritePin>
		}
		if(i == 40){//5
 8005e36:	4b5f      	ldr	r3, [pc, #380]	@ (8005fb4 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	2b28      	cmp	r3, #40	@ 0x28
 8005e3c:	d14c      	bne.n	8005ed8 <HAL_TIM_PeriodElapsedCallback+0x15c>
			ampritude = startpres - pres;
 8005e3e:	4b61      	ldr	r3, [pc, #388]	@ (8005fc4 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8005e40:	ed93 7a00 	vldr	s14, [r3]
 8005e44:	4b60      	ldr	r3, [pc, #384]	@ (8005fc8 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8005e46:	edd3 7a00 	vldr	s15, [r3]
 8005e4a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005e4e:	4b5f      	ldr	r3, [pc, #380]	@ (8005fcc <HAL_TIM_PeriodElapsedCallback+0x250>)
 8005e50:	edc3 7a00 	vstr	s15, [r3]

			MYDRON.dronheight = (uint16_t)BMP180_GET_height();
 8005e54:	f7fa ffce 	bl	8000df4 <BMP180_GET_height>
 8005e58:	eef0 7a40 	vmov.f32	s15, s0
 8005e5c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e60:	ee17 3a90 	vmov	r3, s15
 8005e64:	b29b      	uxth	r3, r3
 8005e66:	b21a      	sxth	r2, r3
 8005e68:	4b59      	ldr	r3, [pc, #356]	@ (8005fd0 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8005e6a:	83da      	strh	r2, [r3, #30]
			convert_value_to_array(MYDRON.dronheight, TxData, 0, 3);
 8005e6c:	4b58      	ldr	r3, [pc, #352]	@ (8005fd0 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8005e6e:	f9b3 001e 	ldrsh.w	r0, [r3, #30]
 8005e72:	2303      	movs	r3, #3
 8005e74:	2200      	movs	r2, #0
 8005e76:	4957      	ldr	r1, [pc, #348]	@ (8005fd4 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8005e78:	f001 f919 	bl	80070ae <convert_value_to_array>

			Get_batteryvalue();
 8005e7c:	f7fe f844 	bl	8003f08 <Get_batteryvalue>

			convert_value_to_array(MYDRON.batterysize, TxData, 3, 6);
 8005e80:	4b53      	ldr	r3, [pc, #332]	@ (8005fd0 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8005e82:	881b      	ldrh	r3, [r3, #0]
 8005e84:	b218      	sxth	r0, r3
 8005e86:	2306      	movs	r3, #6
 8005e88:	2203      	movs	r2, #3
 8005e8a:	4952      	ldr	r1, [pc, #328]	@ (8005fd4 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8005e8c:	f001 f90f 	bl	80070ae <convert_value_to_array>

			for(int i = 0; i < 10; i++){
 8005e90:	2300      	movs	r3, #0
 8005e92:	60fb      	str	r3, [r7, #12]
 8005e94:	e00b      	b.n	8005eae <HAL_TIM_PeriodElapsedCallback+0x132>
				TxData[22+i] = Txcode[22+i];
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	f103 0216 	add.w	r2, r3, #22
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	3316      	adds	r3, #22
 8005ea0:	494d      	ldr	r1, [pc, #308]	@ (8005fd8 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8005ea2:	5c89      	ldrb	r1, [r1, r2]
 8005ea4:	4a4b      	ldr	r2, [pc, #300]	@ (8005fd4 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8005ea6:	54d1      	strb	r1, [r2, r3]
			for(int i = 0; i < 10; i++){
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	3301      	adds	r3, #1
 8005eac:	60fb      	str	r3, [r7, #12]
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	2b09      	cmp	r3, #9
 8005eb2:	ddf0      	ble.n	8005e96 <HAL_TIM_PeriodElapsedCallback+0x11a>
			}
			LED_6_1;
 8005eb4:	2201      	movs	r2, #1
 8005eb6:	2108      	movs	r1, #8
 8005eb8:	4840      	ldr	r0, [pc, #256]	@ (8005fbc <HAL_TIM_PeriodElapsedCallback+0x240>)
 8005eba:	f008 fb03 	bl	800e4c4 <HAL_GPIO_WritePin>
			nRF24_WriteTXPayload(TxData);
 8005ebe:	4845      	ldr	r0, [pc, #276]	@ (8005fd4 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8005ec0:	f7fc fb08 	bl	80024d4 <nRF24_WriteTXPayload>
			NRF24_CE_HIGH;
 8005ec4:	2201      	movs	r2, #1
 8005ec6:	2140      	movs	r1, #64	@ 0x40
 8005ec8:	4844      	ldr	r0, [pc, #272]	@ (8005fdc <HAL_TIM_PeriodElapsedCallback+0x260>)
 8005eca:	f008 fafb 	bl	800e4c4 <HAL_GPIO_WritePin>
			LED_6_0;
 8005ece:	2200      	movs	r2, #0
 8005ed0:	2108      	movs	r1, #8
 8005ed2:	483a      	ldr	r0, [pc, #232]	@ (8005fbc <HAL_TIM_PeriodElapsedCallback+0x240>)
 8005ed4:	f008 faf6 	bl	800e4c4 <HAL_GPIO_WritePin>
		}
		if(i == 41){
 8005ed8:	4b36      	ldr	r3, [pc, #216]	@ (8005fb4 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	2b29      	cmp	r3, #41	@ 0x29
 8005ede:	d104      	bne.n	8005eea <HAL_TIM_PeriodElapsedCallback+0x16e>
			NRF24_CE_LOW;
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	2140      	movs	r1, #64	@ 0x40
 8005ee4:	483d      	ldr	r0, [pc, #244]	@ (8005fdc <HAL_TIM_PeriodElapsedCallback+0x260>)
 8005ee6:	f008 faed 	bl	800e4c4 <HAL_GPIO_WritePin>
		}
		if(i >= 42){
 8005eea:	4b32      	ldr	r3, [pc, #200]	@ (8005fb4 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	2b29      	cmp	r3, #41	@ 0x29
 8005ef0:	dd16      	ble.n	8005f20 <HAL_TIM_PeriodElapsedCallback+0x1a4>
			if(nRF24_Rx_Mode != 1){
 8005ef2:	4b33      	ldr	r3, [pc, #204]	@ (8005fc0 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8005ef4:	781b      	ldrb	r3, [r3, #0]
 8005ef6:	2b01      	cmp	r3, #1
 8005ef8:	d012      	beq.n	8005f20 <HAL_TIM_PeriodElapsedCallback+0x1a4>
				if(((nRF24_ReadStatus() & (1<<NRF24_MAX_RT)) || (nRF24_ReadStatus() & (1<<NRF24_TX_DS)))){
 8005efa:	f7fc f8ae 	bl	800205a <nRF24_ReadStatus>
 8005efe:	4603      	mov	r3, r0
 8005f00:	f003 0310 	and.w	r3, r3, #16
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d106      	bne.n	8005f16 <HAL_TIM_PeriodElapsedCallback+0x19a>
 8005f08:	f7fc f8a7 	bl	800205a <nRF24_ReadStatus>
 8005f0c:	4603      	mov	r3, r0
 8005f0e:	f003 0320 	and.w	r3, r3, #32
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d004      	beq.n	8005f20 <HAL_TIM_PeriodElapsedCallback+0x1a4>
					nRF24_RX_Mode();
 8005f16:	f7fb fff3 	bl	8001f00 <nRF24_RX_Mode>
					nRF24_Rx_Mode = 1;
 8005f1a:	4b29      	ldr	r3, [pc, #164]	@ (8005fc0 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8005f1c:	2201      	movs	r2, #1
 8005f1e:	701a      	strb	r2, [r3, #0]
				}
			}
		}

		LED_5_1;
 8005f20:	2201      	movs	r2, #1
 8005f22:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005f26:	4824      	ldr	r0, [pc, #144]	@ (8005fb8 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8005f28:	f008 facc 	bl	800e4c4 <HAL_GPIO_WritePin>
		MPU6050_GET_ACCANDGYR_CALANDSCL_IT();
 8005f2c:	f7fb fc10 	bl	8001750 <MPU6050_GET_ACCANDGYR_CALANDSCL_IT>
		LED_5_0;
 8005f30:	2200      	movs	r2, #0
 8005f32:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005f36:	4820      	ldr	r0, [pc, #128]	@ (8005fb8 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8005f38:	f008 fac4 	bl	800e4c4 <HAL_GPIO_WritePin>

		if(i == 100){
 8005f3c:	4b1d      	ldr	r3, [pc, #116]	@ (8005fb4 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	2b64      	cmp	r3, #100	@ 0x64
 8005f42:	d103      	bne.n	8005f4c <HAL_TIM_PeriodElapsedCallback+0x1d0>
			i = 0;
 8005f44:	4b1b      	ldr	r3, [pc, #108]	@ (8005fb4 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8005f46:	2200      	movs	r2, #0
 8005f48:	601a      	str	r2, [r3, #0]
 8005f4a:	e004      	b.n	8005f56 <HAL_TIM_PeriodElapsedCallback+0x1da>
		}
		else{
			i++;
 8005f4c:	4b19      	ldr	r3, [pc, #100]	@ (8005fb4 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	3301      	adds	r3, #1
 8005f52:	4a18      	ldr	r2, [pc, #96]	@ (8005fb4 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8005f54:	6013      	str	r3, [r2, #0]
		}
		if(NRF_TIM_Inte >= 1000){
 8005f56:	4b16      	ldr	r3, [pc, #88]	@ (8005fb0 <HAL_TIM_PeriodElapsedCallback+0x234>)
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005f5e:	d308      	bcc.n	8005f72 <HAL_TIM_PeriodElapsedCallback+0x1f6>
			LED_R_1;
 8005f60:	2201      	movs	r2, #1
 8005f62:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005f66:	481d      	ldr	r0, [pc, #116]	@ (8005fdc <HAL_TIM_PeriodElapsedCallback+0x260>)
 8005f68:	f008 faac 	bl	800e4c4 <HAL_GPIO_WritePin>
			MYDRON.dron_status.Connection = DRON_DISCONNECTED;
 8005f6c:	4b18      	ldr	r3, [pc, #96]	@ (8005fd0 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8005f6e:	2202      	movs	r2, #2
 8005f70:	825a      	strh	r2, [r3, #18]
		}
		if(MYDRON.dron_status.Connection == DRON_DISCONNECTED){
 8005f72:	4b17      	ldr	r3, [pc, #92]	@ (8005fd0 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8005f74:	8a5b      	ldrh	r3, [r3, #18]
 8005f76:	2b02      	cmp	r3, #2
 8005f78:	d110      	bne.n	8005f9c <HAL_TIM_PeriodElapsedCallback+0x220>
			wanted_rool = 0;
 8005f7a:	4b19      	ldr	r3, [pc, #100]	@ (8005fe0 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8005f7c:	f04f 0200 	mov.w	r2, #0
 8005f80:	601a      	str	r2, [r3, #0]
			wanted_pitch = 0;
 8005f82:	4b18      	ldr	r3, [pc, #96]	@ (8005fe4 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8005f84:	f04f 0200 	mov.w	r2, #0
 8005f88:	601a      	str	r2, [r3, #0]
			wanted_yaw = 0;
 8005f8a:	4b17      	ldr	r3, [pc, #92]	@ (8005fe8 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8005f8c:	f04f 0200 	mov.w	r2, #0
 8005f90:	601a      	str	r2, [r3, #0]
			wanted_thrust = DRON_SLOWFALING;
 8005f92:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8005f96:	b21a      	sxth	r2, r3
 8005f98:	4b14      	ldr	r3, [pc, #80]	@ (8005fec <HAL_TIM_PeriodElapsedCallback+0x270>)
 8005f9a:	801a      	strh	r2, [r3, #0]
		}
	}
}
 8005f9c:	bf00      	nop
 8005f9e:	3710      	adds	r7, #16
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	bd80      	pop	{r7, pc}
 8005fa4:	240003cc 	.word	0x240003cc
 8005fa8:	0000006c 	.word	0x0000006c
 8005fac:	00000070 	.word	0x00000070
 8005fb0:	00000078 	.word	0x00000078
 8005fb4:	000041d8 	.word	0x000041d8
 8005fb8:	58020000 	.word	0x58020000
 8005fbc:	58021000 	.word	0x58021000
 8005fc0:	00000174 	.word	0x00000174
 8005fc4:	000000e4 	.word	0x000000e4
 8005fc8:	000000e0 	.word	0x000000e0
 8005fcc:	000000e8 	.word	0x000000e8
 8005fd0:	00000178 	.word	0x00000178
 8005fd4:	00000134 	.word	0x00000134
 8005fd8:	00000114 	.word	0x00000114
 8005fdc:	58020400 	.word	0x58020400
 8005fe0:	0000406c 	.word	0x0000406c
 8005fe4:	00004068 	.word	0x00004068
 8005fe8:	00004070 	.word	0x00004070
 8005fec:	0000405c 	.word	0x0000405c

08005ff0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b084      	sub	sp, #16
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	4603      	mov	r3, r0
 8005ff8:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin == GPIO_PIN_15)
 8005ffa:	88fb      	ldrh	r3, [r7, #6]
 8005ffc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006000:	f040 812c 	bne.w	800625c <HAL_GPIO_EXTI_Callback+0x26c>
	{
		if(STARTUP == 0){
 8006004:	4b97      	ldr	r3, [pc, #604]	@ (8006264 <HAL_GPIO_EXTI_Callback+0x274>)
 8006006:	781b      	ldrb	r3, [r3, #0]
 8006008:	2b00      	cmp	r3, #0
 800600a:	f040 8127 	bne.w	800625c <HAL_GPIO_EXTI_Callback+0x26c>
			LED_6_1;
 800600e:	2201      	movs	r2, #1
 8006010:	2108      	movs	r1, #8
 8006012:	4895      	ldr	r0, [pc, #596]	@ (8006268 <HAL_GPIO_EXTI_Callback+0x278>)
 8006014:	f008 fa56 	bl	800e4c4 <HAL_GPIO_WritePin>
			nRF24_ReadRXPaylaod(RxData);
 8006018:	4894      	ldr	r0, [pc, #592]	@ (800626c <HAL_GPIO_EXTI_Callback+0x27c>)
 800601a:	f7fc fa91 	bl	8002540 <nRF24_ReadRXPaylaod>
			LED_6_0;
 800601e:	2200      	movs	r2, #0
 8006020:	2108      	movs	r1, #8
 8006022:	4891      	ldr	r0, [pc, #580]	@ (8006268 <HAL_GPIO_EXTI_Callback+0x278>)
 8006024:	f008 fa4e 	bl	800e4c4 <HAL_GPIO_WritePin>


			LED_Y_1;
 8006028:	2201      	movs	r2, #1
 800602a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800602e:	4890      	ldr	r0, [pc, #576]	@ (8006270 <HAL_GPIO_EXTI_Callback+0x280>)
 8006030:	f008 fa48 	bl	800e4c4 <HAL_GPIO_WritePin>

			loopnum = 0;
 8006034:	4b8f      	ldr	r3, [pc, #572]	@ (8006274 <HAL_GPIO_EXTI_Callback+0x284>)
 8006036:	2200      	movs	r2, #0
 8006038:	601a      	str	r2, [r3, #0]
			for(int abc = 0; abc < 10; abc++){//sprawdzenia poprawnosci kodu nadanego
 800603a:	2300      	movs	r3, #0
 800603c:	60fb      	str	r3, [r7, #12]
 800603e:	e011      	b.n	8006064 <HAL_GPIO_EXTI_Callback+0x74>
				if(RxData[12+abc] == Rxcode[abc+12]){
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	330c      	adds	r3, #12
 8006044:	4a89      	ldr	r2, [pc, #548]	@ (800626c <HAL_GPIO_EXTI_Callback+0x27c>)
 8006046:	5cd2      	ldrb	r2, [r2, r3]
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	330c      	adds	r3, #12
 800604c:	498a      	ldr	r1, [pc, #552]	@ (8006278 <HAL_GPIO_EXTI_Callback+0x288>)
 800604e:	5ccb      	ldrb	r3, [r1, r3]
 8006050:	429a      	cmp	r2, r3
 8006052:	d104      	bne.n	800605e <HAL_GPIO_EXTI_Callback+0x6e>
					loopnum++;
 8006054:	4b87      	ldr	r3, [pc, #540]	@ (8006274 <HAL_GPIO_EXTI_Callback+0x284>)
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	3301      	adds	r3, #1
 800605a:	4a86      	ldr	r2, [pc, #536]	@ (8006274 <HAL_GPIO_EXTI_Callback+0x284>)
 800605c:	6013      	str	r3, [r2, #0]
			for(int abc = 0; abc < 10; abc++){//sprawdzenia poprawnosci kodu nadanego
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	3301      	adds	r3, #1
 8006062:	60fb      	str	r3, [r7, #12]
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	2b09      	cmp	r3, #9
 8006068:	ddea      	ble.n	8006040 <HAL_GPIO_EXTI_Callback+0x50>
				}
			}

			if(loopnum == 10){
 800606a:	4b82      	ldr	r3, [pc, #520]	@ (8006274 <HAL_GPIO_EXTI_Callback+0x284>)
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	2b0a      	cmp	r3, #10
 8006070:	f040 80e3 	bne.w	800623a <HAL_GPIO_EXTI_Callback+0x24a>
				convert_array_to_value(RxData, &wanted_pitch_v, 0, 2);//pitch
 8006074:	2302      	movs	r3, #2
 8006076:	2200      	movs	r2, #0
 8006078:	4980      	ldr	r1, [pc, #512]	@ (800627c <HAL_GPIO_EXTI_Callback+0x28c>)
 800607a:	487c      	ldr	r0, [pc, #496]	@ (800626c <HAL_GPIO_EXTI_Callback+0x27c>)
 800607c:	f000 ffc6 	bl	800700c <convert_array_to_value>
				convert_array_to_value(RxData, &wanted_roll_v, 3, 5);// pid_angular_rate_rool wanted_roll_v
 8006080:	2305      	movs	r3, #5
 8006082:	2203      	movs	r2, #3
 8006084:	497e      	ldr	r1, [pc, #504]	@ (8006280 <HAL_GPIO_EXTI_Callback+0x290>)
 8006086:	4879      	ldr	r0, [pc, #484]	@ (800626c <HAL_GPIO_EXTI_Callback+0x27c>)
 8006088:	f000 ffc0 	bl	800700c <convert_array_to_value>
				if(wobble_strenght == 1){
 800608c:	4b7d      	ldr	r3, [pc, #500]	@ (8006284 <HAL_GPIO_EXTI_Callback+0x294>)
 800608e:	edd3 7a00 	vldr	s15, [r3]
 8006092:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006096:	eef4 7a47 	vcmp.f32	s15, s14
 800609a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800609e:	d105      	bne.n	80060ac <HAL_GPIO_EXTI_Callback+0xbc>
					convert_array_to_value(RxData, &wanted_thrust, 6, 8);//
 80060a0:	2308      	movs	r3, #8
 80060a2:	2206      	movs	r2, #6
 80060a4:	4978      	ldr	r1, [pc, #480]	@ (8006288 <HAL_GPIO_EXTI_Callback+0x298>)
 80060a6:	4871      	ldr	r0, [pc, #452]	@ (800626c <HAL_GPIO_EXTI_Callback+0x27c>)
 80060a8:	f000 ffb0 	bl	800700c <convert_array_to_value>
				}
				convert_array_to_value(RxData, &wanted_yaw_v, 9, 11);//
 80060ac:	230b      	movs	r3, #11
 80060ae:	2209      	movs	r2, #9
 80060b0:	4976      	ldr	r1, [pc, #472]	@ (800628c <HAL_GPIO_EXTI_Callback+0x29c>)
 80060b2:	486e      	ldr	r0, [pc, #440]	@ (800626c <HAL_GPIO_EXTI_Callback+0x27c>)
 80060b4:	f000 ffaa 	bl	800700c <convert_array_to_value>
				MYDRON.dron_status.Connection = DRON_CONNECTED;
 80060b8:	4b75      	ldr	r3, [pc, #468]	@ (8006290 <HAL_GPIO_EXTI_Callback+0x2a0>)
 80060ba:	2201      	movs	r2, #1
 80060bc:	825a      	strh	r2, [r3, #18]

				if(RxData[23] == 1){
 80060be:	4b6b      	ldr	r3, [pc, #428]	@ (800626c <HAL_GPIO_EXTI_Callback+0x27c>)
 80060c0:	7ddb      	ldrb	r3, [r3, #23]
 80060c2:	2b01      	cmp	r3, #1
 80060c4:	d11b      	bne.n	80060fe <HAL_GPIO_EXTI_Callback+0x10e>
					ESC_POWER_1;
 80060c6:	2201      	movs	r2, #1
 80060c8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80060cc:	4871      	ldr	r0, [pc, #452]	@ (8006294 <HAL_GPIO_EXTI_Callback+0x2a4>)
 80060ce:	f008 f9f9 	bl	800e4c4 <HAL_GPIO_WritePin>
					LED_R_1;
 80060d2:	2201      	movs	r2, #1
 80060d4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80060d8:	4865      	ldr	r0, [pc, #404]	@ (8006270 <HAL_GPIO_EXTI_Callback+0x280>)
 80060da:	f008 f9f3 	bl	800e4c4 <HAL_GPIO_WritePin>
					if(SD_enable_Flag == 1){
 80060de:	4b6e      	ldr	r3, [pc, #440]	@ (8006298 <HAL_GPIO_EXTI_Callback+0x2a8>)
 80060e0:	781b      	ldrb	r3, [r3, #0]
 80060e2:	2b01      	cmp	r3, #1
 80060e4:	d10b      	bne.n	80060fe <HAL_GPIO_EXTI_Callback+0x10e>
						f_close(&fil);
 80060e6:	486d      	ldr	r0, [pc, #436]	@ (800629c <HAL_GPIO_EXTI_Callback+0x2ac>)
 80060e8:	f017 fc84 	bl	801d9f4 <f_close>
						fresult = f_mount(NULL, "/", 1);
 80060ec:	2201      	movs	r2, #1
 80060ee:	496c      	ldr	r1, [pc, #432]	@ (80062a0 <HAL_GPIO_EXTI_Callback+0x2b0>)
 80060f0:	2000      	movs	r0, #0
 80060f2:	f017 f85f 	bl	801d1b4 <f_mount>
 80060f6:	4603      	mov	r3, r0
 80060f8:	461a      	mov	r2, r3
 80060fa:	4b6a      	ldr	r3, [pc, #424]	@ (80062a4 <HAL_GPIO_EXTI_Callback+0x2b4>)
 80060fc:	701a      	strb	r2, [r3, #0]
					}

				}

				if(wanted_thrust == 9999){
 80060fe:	4b62      	ldr	r3, [pc, #392]	@ (8006288 <HAL_GPIO_EXTI_Callback+0x298>)
 8006100:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006104:	f242 720f 	movw	r2, #9999	@ 0x270f
 8006108:	4293      	cmp	r3, r2
 800610a:	d103      	bne.n	8006114 <HAL_GPIO_EXTI_Callback+0x124>
					MYDRON.THRUST_flag = THRUST_MAX;
 800610c:	4b60      	ldr	r3, [pc, #384]	@ (8006290 <HAL_GPIO_EXTI_Callback+0x2a0>)
 800610e:	2210      	movs	r2, #16
 8006110:	f883 2020 	strb.w	r2, [r3, #32]
	  			}
				wanted_thrust = wanted_thrust * 20;
 8006114:	4b5c      	ldr	r3, [pc, #368]	@ (8006288 <HAL_GPIO_EXTI_Callback+0x298>)
 8006116:	f9b3 3000 	ldrsh.w	r3, [r3]
 800611a:	b29b      	uxth	r3, r3
 800611c:	461a      	mov	r2, r3
 800611e:	0092      	lsls	r2, r2, #2
 8006120:	4413      	add	r3, r2
 8006122:	009b      	lsls	r3, r3, #2
 8006124:	b29b      	uxth	r3, r3
 8006126:	b21a      	sxth	r2, r3
 8006128:	4b57      	ldr	r3, [pc, #348]	@ (8006288 <HAL_GPIO_EXTI_Callback+0x298>)
 800612a:	801a      	strh	r2, [r3, #0]
				wanted_thrust = wanted_thrust - 10000;
 800612c:	4b56      	ldr	r3, [pc, #344]	@ (8006288 <HAL_GPIO_EXTI_Callback+0x298>)
 800612e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006132:	b29a      	uxth	r2, r3
 8006134:	4b5c      	ldr	r3, [pc, #368]	@ (80062a8 <HAL_GPIO_EXTI_Callback+0x2b8>)
 8006136:	4413      	add	r3, r2
 8006138:	b29b      	uxth	r3, r3
 800613a:	b21a      	sxth	r2, r3
 800613c:	4b52      	ldr	r3, [pc, #328]	@ (8006288 <HAL_GPIO_EXTI_Callback+0x298>)
 800613e:	801a      	strh	r2, [r3, #0]
				if(wanted_thrust < 0){
 8006140:	4b51      	ldr	r3, [pc, #324]	@ (8006288 <HAL_GPIO_EXTI_Callback+0x298>)
 8006142:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006146:	2b00      	cmp	r3, #0
 8006148:	da02      	bge.n	8006150 <HAL_GPIO_EXTI_Callback+0x160>
					wanted_thrust = 0;
 800614a:	4b4f      	ldr	r3, [pc, #316]	@ (8006288 <HAL_GPIO_EXTI_Callback+0x298>)
 800614c:	2200      	movs	r2, #0
 800614e:	801a      	strh	r2, [r3, #0]
	  			}

				wanted_rool_rx = (wanted_roll_v - 500)*wanted_rool_factro;//wanted_rool_rx (-90 <-> 90)
 8006150:	4b4b      	ldr	r3, [pc, #300]	@ (8006280 <HAL_GPIO_EXTI_Callback+0x290>)
 8006152:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006156:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 800615a:	ee07 3a90 	vmov	s15, r3
 800615e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006162:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 80062ac <HAL_GPIO_EXTI_Callback+0x2bc>
 8006166:	ee67 7a87 	vmul.f32	s15, s15, s14
 800616a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800616e:	ee17 3a90 	vmov	r3, s15
 8006172:	b21a      	sxth	r2, r3
 8006174:	4b4e      	ldr	r3, [pc, #312]	@ (80062b0 <HAL_GPIO_EXTI_Callback+0x2c0>)
 8006176:	801a      	strh	r2, [r3, #0]
				wanted_pitch_rx = (wanted_pitch_v - 500)*wanted_pitch_factro;// (-450 <-> 450)
 8006178:	4b40      	ldr	r3, [pc, #256]	@ (800627c <HAL_GPIO_EXTI_Callback+0x28c>)
 800617a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800617e:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8006182:	ee07 3a90 	vmov	s15, r3
 8006186:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800618a:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 80062b4 <HAL_GPIO_EXTI_Callback+0x2c4>
 800618e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006192:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006196:	ee17 3a90 	vmov	r3, s15
 800619a:	b21a      	sxth	r2, r3
 800619c:	4b46      	ldr	r3, [pc, #280]	@ (80062b8 <HAL_GPIO_EXTI_Callback+0x2c8>)
 800619e:	801a      	strh	r2, [r3, #0]
				wanted_yaw_rx = (wanted_yaw_v - 500)*wanted_yaw_factro;
 80061a0:	4b3a      	ldr	r3, [pc, #232]	@ (800628c <HAL_GPIO_EXTI_Callback+0x29c>)
 80061a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80061a6:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 80061aa:	ee07 3a90 	vmov	s15, r3
 80061ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80061b2:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 80062bc <HAL_GPIO_EXTI_Callback+0x2cc>
 80061b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80061ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80061be:	ee17 3a90 	vmov	r3, s15
 80061c2:	b21a      	sxth	r2, r3
 80061c4:	4b3e      	ldr	r3, [pc, #248]	@ (80062c0 <HAL_GPIO_EXTI_Callback+0x2d0>)
 80061c6:	801a      	strh	r2, [r3, #0]

				if(wanted_rool_rx >= 30){
 80061c8:	4b39      	ldr	r3, [pc, #228]	@ (80062b0 <HAL_GPIO_EXTI_Callback+0x2c0>)
 80061ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80061ce:	2b1d      	cmp	r3, #29
 80061d0:	dd02      	ble.n	80061d8 <HAL_GPIO_EXTI_Callback+0x1e8>
					wanted_rool_rx = 30;
 80061d2:	4b37      	ldr	r3, [pc, #220]	@ (80062b0 <HAL_GPIO_EXTI_Callback+0x2c0>)
 80061d4:	221e      	movs	r2, #30
 80061d6:	801a      	strh	r2, [r3, #0]
				}
				if(wanted_rool_rx <= -30){
 80061d8:	4b35      	ldr	r3, [pc, #212]	@ (80062b0 <HAL_GPIO_EXTI_Callback+0x2c0>)
 80061da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80061de:	f113 0f1d 	cmn.w	r3, #29
 80061e2:	da03      	bge.n	80061ec <HAL_GPIO_EXTI_Callback+0x1fc>
					wanted_rool_rx = -30;
 80061e4:	4b32      	ldr	r3, [pc, #200]	@ (80062b0 <HAL_GPIO_EXTI_Callback+0x2c0>)
 80061e6:	f64f 72e2 	movw	r2, #65506	@ 0xffe2
 80061ea:	801a      	strh	r2, [r3, #0]
				}
				if(wanted_pitch_rx >= 30){
 80061ec:	4b32      	ldr	r3, [pc, #200]	@ (80062b8 <HAL_GPIO_EXTI_Callback+0x2c8>)
 80061ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80061f2:	2b1d      	cmp	r3, #29
 80061f4:	dd02      	ble.n	80061fc <HAL_GPIO_EXTI_Callback+0x20c>
					wanted_pitch_rx = 30;
 80061f6:	4b30      	ldr	r3, [pc, #192]	@ (80062b8 <HAL_GPIO_EXTI_Callback+0x2c8>)
 80061f8:	221e      	movs	r2, #30
 80061fa:	801a      	strh	r2, [r3, #0]
				}
				if(wanted_pitch_rx <= -30){
 80061fc:	4b2e      	ldr	r3, [pc, #184]	@ (80062b8 <HAL_GPIO_EXTI_Callback+0x2c8>)
 80061fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006202:	f113 0f1d 	cmn.w	r3, #29
 8006206:	da03      	bge.n	8006210 <HAL_GPIO_EXTI_Callback+0x220>
					wanted_pitch_rx = -30;
 8006208:	4b2b      	ldr	r3, [pc, #172]	@ (80062b8 <HAL_GPIO_EXTI_Callback+0x2c8>)
 800620a:	f64f 72e2 	movw	r2, #65506	@ 0xffe2
 800620e:	801a      	strh	r2, [r3, #0]
				}
				if(wanted_yaw_rx >= 30){
 8006210:	4b2b      	ldr	r3, [pc, #172]	@ (80062c0 <HAL_GPIO_EXTI_Callback+0x2d0>)
 8006212:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006216:	2b1d      	cmp	r3, #29
 8006218:	dd02      	ble.n	8006220 <HAL_GPIO_EXTI_Callback+0x230>
					wanted_yaw_rx = 30;
 800621a:	4b29      	ldr	r3, [pc, #164]	@ (80062c0 <HAL_GPIO_EXTI_Callback+0x2d0>)
 800621c:	221e      	movs	r2, #30
 800621e:	801a      	strh	r2, [r3, #0]
				}
				if(wanted_yaw_rx <= -30){
 8006220:	4b27      	ldr	r3, [pc, #156]	@ (80062c0 <HAL_GPIO_EXTI_Callback+0x2d0>)
 8006222:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006226:	f113 0f1d 	cmn.w	r3, #29
 800622a:	da03      	bge.n	8006234 <HAL_GPIO_EXTI_Callback+0x244>
					wanted_yaw_rx = -30;
 800622c:	4b24      	ldr	r3, [pc, #144]	@ (80062c0 <HAL_GPIO_EXTI_Callback+0x2d0>)
 800622e:	f64f 72e2 	movw	r2, #65506	@ 0xffe2
 8006232:	801a      	strh	r2, [r3, #0]
				}


				NRF_TIM_Inte = 0;
 8006234:	4b23      	ldr	r3, [pc, #140]	@ (80062c4 <HAL_GPIO_EXTI_Callback+0x2d4>)
 8006236:	2200      	movs	r2, #0
 8006238:	601a      	str	r2, [r3, #0]
	  		}

	  			if(loopnum > 0 && loopnum < 10){
 800623a:	4b0e      	ldr	r3, [pc, #56]	@ (8006274 <HAL_GPIO_EXTI_Callback+0x284>)
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	2b00      	cmp	r3, #0
 8006240:	dd06      	ble.n	8006250 <HAL_GPIO_EXTI_Callback+0x260>
 8006242:	4b0c      	ldr	r3, [pc, #48]	@ (8006274 <HAL_GPIO_EXTI_Callback+0x284>)
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	2b09      	cmp	r3, #9
 8006248:	dc02      	bgt.n	8006250 <HAL_GPIO_EXTI_Callback+0x260>
	  				MYDRON.dron_status.Connection = DRON_CONNECTION_ERROR;
 800624a:	4b11      	ldr	r3, [pc, #68]	@ (8006290 <HAL_GPIO_EXTI_Callback+0x2a0>)
 800624c:	2203      	movs	r2, #3
 800624e:	825a      	strh	r2, [r3, #18]
	  			}


	  			LED_Y_0;
 8006250:	2200      	movs	r2, #0
 8006252:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8006256:	4806      	ldr	r0, [pc, #24]	@ (8006270 <HAL_GPIO_EXTI_Callback+0x280>)
 8006258:	f008 f934 	bl	800e4c4 <HAL_GPIO_WritePin>
		}
	}
}
 800625c:	bf00      	nop
 800625e:	3710      	adds	r7, #16
 8006260:	46bd      	mov	sp, r7
 8006262:	bd80      	pop	{r7, pc}
 8006264:	00000074 	.word	0x00000074
 8006268:	58021000 	.word	0x58021000
 800626c:	000000f4 	.word	0x000000f4
 8006270:	58020400 	.word	0x58020400
 8006274:	000041dc 	.word	0x000041dc
 8006278:	00000154 	.word	0x00000154
 800627c:	000041e2 	.word	0x000041e2
 8006280:	000041e0 	.word	0x000041e0
 8006284:	000041d0 	.word	0x000041d0
 8006288:	0000405c 	.word	0x0000405c
 800628c:	000041e4 	.word	0x000041e4
 8006290:	00000178 	.word	0x00000178
 8006294:	58021800 	.word	0x58021800
 8006298:	000041cc 	.word	0x000041cc
 800629c:	24001ef0 	.word	0x24001ef0
 80062a0:	0801e830 	.word	0x0801e830
 80062a4:	24001eec 	.word	0x24001eec
 80062a8:	ffffd8f0 	.word	0xffffd8f0
 80062ac:	3f266666 	.word	0x3f266666
 80062b0:	0000404a 	.word	0x0000404a
 80062b4:	3f28f5c3 	.word	0x3f28f5c3
 80062b8:	00004048 	.word	0x00004048
 80062bc:	3f19999a 	.word	0x3f19999a
 80062c0:	0000404c 	.word	0x0000404c
 80062c4:	00000078 	.word	0x00000078

080062c8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)//pobieranie znakw z uart
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b084      	sub	sp, #16
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
	words[command_ch_num] = Received;
 80062d0:	4b24      	ldr	r3, [pc, #144]	@ (8006364 <HAL_UART_RxCpltCallback+0x9c>)
 80062d2:	781b      	ldrb	r3, [r3, #0]
 80062d4:	461a      	mov	r2, r3
 80062d6:	4b24      	ldr	r3, [pc, #144]	@ (8006368 <HAL_UART_RxCpltCallback+0xa0>)
 80062d8:	7819      	ldrb	r1, [r3, #0]
 80062da:	4b24      	ldr	r3, [pc, #144]	@ (800636c <HAL_UART_RxCpltCallback+0xa4>)
 80062dc:	5499      	strb	r1, [r3, r2]

	if(words[command_ch_num] == '\r')
 80062de:	4b21      	ldr	r3, [pc, #132]	@ (8006364 <HAL_UART_RxCpltCallback+0x9c>)
 80062e0:	781b      	ldrb	r3, [r3, #0]
 80062e2:	461a      	mov	r2, r3
 80062e4:	4b21      	ldr	r3, [pc, #132]	@ (800636c <HAL_UART_RxCpltCallback+0xa4>)
 80062e6:	5c9b      	ldrb	r3, [r3, r2]
 80062e8:	2b0d      	cmp	r3, #13
 80062ea:	d11a      	bne.n	8006322 <HAL_UART_RxCpltCallback+0x5a>
	{
		char Y = '\n';
 80062ec:	230a      	movs	r3, #10
 80062ee:	73fb      	strb	r3, [r7, #15]
		HAL_UART_Transmit(&huart1, (uint8_t *)&Y, 1, 100);
 80062f0:	f107 010f 	add.w	r1, r7, #15
 80062f4:	2364      	movs	r3, #100	@ 0x64
 80062f6:	2201      	movs	r2, #1
 80062f8:	481d      	ldr	r0, [pc, #116]	@ (8006370 <HAL_UART_RxCpltCallback+0xa8>)
 80062fa:	f011 fc8b 	bl	8017c14 <HAL_UART_Transmit>
		Y = '\r';
 80062fe:	230d      	movs	r3, #13
 8006300:	73fb      	strb	r3, [r7, #15]
		HAL_UART_Transmit(&huart1, (uint8_t *)&Y, 1, 100);
 8006302:	f107 010f 	add.w	r1, r7, #15
 8006306:	2364      	movs	r3, #100	@ 0x64
 8006308:	2201      	movs	r2, #1
 800630a:	4819      	ldr	r0, [pc, #100]	@ (8006370 <HAL_UART_RxCpltCallback+0xa8>)
 800630c:	f011 fc82 	bl	8017c14 <HAL_UART_Transmit>
		words[command_ch_num] = 0;
 8006310:	4b14      	ldr	r3, [pc, #80]	@ (8006364 <HAL_UART_RxCpltCallback+0x9c>)
 8006312:	781b      	ldrb	r3, [r3, #0]
 8006314:	461a      	mov	r2, r3
 8006316:	4b15      	ldr	r3, [pc, #84]	@ (800636c <HAL_UART_RxCpltCallback+0xa4>)
 8006318:	2100      	movs	r1, #0
 800631a:	5499      	strb	r1, [r3, r2]
		commandready = 1;
 800631c:	4b15      	ldr	r3, [pc, #84]	@ (8006374 <HAL_UART_RxCpltCallback+0xac>)
 800631e:	2201      	movs	r2, #1
 8006320:	701a      	strb	r2, [r3, #0]
	}

	HAL_UART_Transmit_IT(&huart1, (uint8_t *)&words[command_ch_num], 1);
 8006322:	4b10      	ldr	r3, [pc, #64]	@ (8006364 <HAL_UART_RxCpltCallback+0x9c>)
 8006324:	781b      	ldrb	r3, [r3, #0]
 8006326:	461a      	mov	r2, r3
 8006328:	4b10      	ldr	r3, [pc, #64]	@ (800636c <HAL_UART_RxCpltCallback+0xa4>)
 800632a:	4413      	add	r3, r2
 800632c:	2201      	movs	r2, #1
 800632e:	4619      	mov	r1, r3
 8006330:	480f      	ldr	r0, [pc, #60]	@ (8006370 <HAL_UART_RxCpltCallback+0xa8>)
 8006332:	f011 fcfd 	bl	8017d30 <HAL_UART_Transmit_IT>
	HAL_UART_Receive_IT(&huart1, &Received, 1);
 8006336:	2201      	movs	r2, #1
 8006338:	490b      	ldr	r1, [pc, #44]	@ (8006368 <HAL_UART_RxCpltCallback+0xa0>)
 800633a:	480d      	ldr	r0, [pc, #52]	@ (8006370 <HAL_UART_RxCpltCallback+0xa8>)
 800633c:	f011 fd8c 	bl	8017e58 <HAL_UART_Receive_IT>
	command_ch_num++;
 8006340:	4b08      	ldr	r3, [pc, #32]	@ (8006364 <HAL_UART_RxCpltCallback+0x9c>)
 8006342:	781b      	ldrb	r3, [r3, #0]
 8006344:	3301      	adds	r3, #1
 8006346:	b2da      	uxtb	r2, r3
 8006348:	4b06      	ldr	r3, [pc, #24]	@ (8006364 <HAL_UART_RxCpltCallback+0x9c>)
 800634a:	701a      	strb	r2, [r3, #0]

	if(commandready == 1)
 800634c:	4b09      	ldr	r3, [pc, #36]	@ (8006374 <HAL_UART_RxCpltCallback+0xac>)
 800634e:	781b      	ldrb	r3, [r3, #0]
 8006350:	2b01      	cmp	r3, #1
 8006352:	d102      	bne.n	800635a <HAL_UART_RxCpltCallback+0x92>
	{
		command_ch_num = 0;
 8006354:	4b03      	ldr	r3, [pc, #12]	@ (8006364 <HAL_UART_RxCpltCallback+0x9c>)
 8006356:	2200      	movs	r2, #0
 8006358:	701a      	strb	r2, [r3, #0]
	}
}
 800635a:	bf00      	nop
 800635c:	3710      	adds	r7, #16
 800635e:	46bd      	mov	sp, r7
 8006360:	bd80      	pop	{r7, pc}
 8006362:	bf00      	nop
 8006364:	000041bf 	.word	0x000041bf
 8006368:	000041c0 	.word	0x000041c0
 800636c:	000041b4 	.word	0x000041b4
 8006370:	240004b0 	.word	0x240004b0
 8006374:	000041be 	.word	0x000041be

08006378 <HAL_I2C_MemRxCpltCallback>:

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c){
 8006378:	b580      	push	{r7, lr}
 800637a:	b084      	sub	sp, #16
 800637c:	af02      	add	r7, sp, #8
 800637e:	6078      	str	r0, [r7, #4]
	if(MPU6050_IRQ == 1){
 8006380:	4bbc      	ldr	r3, [pc, #752]	@ (8006674 <HAL_I2C_MemRxCpltCallback+0x2fc>)
 8006382:	781b      	ldrb	r3, [r3, #0]
 8006384:	2b01      	cmp	r3, #1
 8006386:	f040 8595 	bne.w	8006eb4 <HAL_I2C_MemRxCpltCallback+0xb3c>
			MPU6050_IRQ = 0;
 800638a:	4bba      	ldr	r3, [pc, #744]	@ (8006674 <HAL_I2C_MemRxCpltCallback+0x2fc>)
 800638c:	2200      	movs	r2, #0
 800638e:	701a      	strb	r2, [r3, #0]
			LED_G_1;
 8006390:	2201      	movs	r2, #1
 8006392:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006396:	48b8      	ldr	r0, [pc, #736]	@ (8006678 <HAL_I2C_MemRxCpltCallback+0x300>)
 8006398:	f008 f894 	bl	800e4c4 <HAL_GPIO_WritePin>

			MPU6050_GET_CALANDSCL_IT(&ax, &ay, &az, &gx, &gy, &gz, accelx_cal, accely_cal, accelz_cal, gyrox_cal, gyroy_cal, gyroz_cal, Gyr_Scale, Acc_Scale);
 800639c:	4bb7      	ldr	r3, [pc, #732]	@ (800667c <HAL_I2C_MemRxCpltCallback+0x304>)
 800639e:	edd3 7a00 	vldr	s15, [r3]
 80063a2:	4bb7      	ldr	r3, [pc, #732]	@ (8006680 <HAL_I2C_MemRxCpltCallback+0x308>)
 80063a4:	ed93 7a00 	vldr	s14, [r3]
 80063a8:	4bb6      	ldr	r3, [pc, #728]	@ (8006684 <HAL_I2C_MemRxCpltCallback+0x30c>)
 80063aa:	edd3 6a00 	vldr	s13, [r3]
 80063ae:	4bb6      	ldr	r3, [pc, #728]	@ (8006688 <HAL_I2C_MemRxCpltCallback+0x310>)
 80063b0:	ed93 6a00 	vldr	s12, [r3]
 80063b4:	4bb5      	ldr	r3, [pc, #724]	@ (800668c <HAL_I2C_MemRxCpltCallback+0x314>)
 80063b6:	edd3 5a00 	vldr	s11, [r3]
 80063ba:	4bb5      	ldr	r3, [pc, #724]	@ (8006690 <HAL_I2C_MemRxCpltCallback+0x318>)
 80063bc:	ed93 5a00 	vldr	s10, [r3]
 80063c0:	eddf 4ab4 	vldr	s9, [pc, #720]	@ 8006694 <HAL_I2C_MemRxCpltCallback+0x31c>
 80063c4:	ed9f 4ab4 	vldr	s8, [pc, #720]	@ 8006698 <HAL_I2C_MemRxCpltCallback+0x320>
 80063c8:	4bb4      	ldr	r3, [pc, #720]	@ (800669c <HAL_I2C_MemRxCpltCallback+0x324>)
 80063ca:	9301      	str	r3, [sp, #4]
 80063cc:	4bb4      	ldr	r3, [pc, #720]	@ (80066a0 <HAL_I2C_MemRxCpltCallback+0x328>)
 80063ce:	9300      	str	r3, [sp, #0]
 80063d0:	eef0 3a44 	vmov.f32	s7, s8
 80063d4:	eeb0 3a64 	vmov.f32	s6, s9
 80063d8:	eef0 2a45 	vmov.f32	s5, s10
 80063dc:	eeb0 2a65 	vmov.f32	s4, s11
 80063e0:	eef0 1a46 	vmov.f32	s3, s12
 80063e4:	eeb0 1a66 	vmov.f32	s2, s13
 80063e8:	eef0 0a47 	vmov.f32	s1, s14
 80063ec:	eeb0 0a67 	vmov.f32	s0, s15
 80063f0:	4bac      	ldr	r3, [pc, #688]	@ (80066a4 <HAL_I2C_MemRxCpltCallback+0x32c>)
 80063f2:	4aad      	ldr	r2, [pc, #692]	@ (80066a8 <HAL_I2C_MemRxCpltCallback+0x330>)
 80063f4:	49ad      	ldr	r1, [pc, #692]	@ (80066ac <HAL_I2C_MemRxCpltCallback+0x334>)
 80063f6:	48ae      	ldr	r0, [pc, #696]	@ (80066b0 <HAL_I2C_MemRxCpltCallback+0x338>)
 80063f8:	f7fb f9c4 	bl	8001784 <MPU6050_GET_CALANDSCL_IT>
			MPU6050_GET_ACCEL_TO_ANGLE(ax, ay, az, &ax_ang, &ay_ang/*, &az_ang*/);
 80063fc:	4bac      	ldr	r3, [pc, #688]	@ (80066b0 <HAL_I2C_MemRxCpltCallback+0x338>)
 80063fe:	edd3 7a00 	vldr	s15, [r3]
 8006402:	4baa      	ldr	r3, [pc, #680]	@ (80066ac <HAL_I2C_MemRxCpltCallback+0x334>)
 8006404:	ed93 7a00 	vldr	s14, [r3]
 8006408:	4ba7      	ldr	r3, [pc, #668]	@ (80066a8 <HAL_I2C_MemRxCpltCallback+0x330>)
 800640a:	edd3 6a00 	vldr	s13, [r3]
 800640e:	49a9      	ldr	r1, [pc, #676]	@ (80066b4 <HAL_I2C_MemRxCpltCallback+0x33c>)
 8006410:	48a9      	ldr	r0, [pc, #676]	@ (80066b8 <HAL_I2C_MemRxCpltCallback+0x340>)
 8006412:	eeb0 1a66 	vmov.f32	s2, s13
 8006416:	eef0 0a47 	vmov.f32	s1, s14
 800641a:	eeb0 0a67 	vmov.f32	s0, s15
 800641e:	f7fb f863 	bl	80014e8 <MPU6050_GET_ACCEL_TO_ANGLE>
			MPU6050_GET_ACCANDGYR_FILTRED(&data, ax_ang, ay_ang, Mag_Z, gx, gy, gz);
 8006422:	4ba5      	ldr	r3, [pc, #660]	@ (80066b8 <HAL_I2C_MemRxCpltCallback+0x340>)
 8006424:	edd3 7a00 	vldr	s15, [r3]
 8006428:	4ba2      	ldr	r3, [pc, #648]	@ (80066b4 <HAL_I2C_MemRxCpltCallback+0x33c>)
 800642a:	ed93 7a00 	vldr	s14, [r3]
 800642e:	4ba3      	ldr	r3, [pc, #652]	@ (80066bc <HAL_I2C_MemRxCpltCallback+0x344>)
 8006430:	edd3 6a00 	vldr	s13, [r3]
 8006434:	4b9b      	ldr	r3, [pc, #620]	@ (80066a4 <HAL_I2C_MemRxCpltCallback+0x32c>)
 8006436:	ed93 6a00 	vldr	s12, [r3]
 800643a:	4b99      	ldr	r3, [pc, #612]	@ (80066a0 <HAL_I2C_MemRxCpltCallback+0x328>)
 800643c:	edd3 5a00 	vldr	s11, [r3]
 8006440:	4b96      	ldr	r3, [pc, #600]	@ (800669c <HAL_I2C_MemRxCpltCallback+0x324>)
 8006442:	ed93 5a00 	vldr	s10, [r3]
 8006446:	eef0 2a45 	vmov.f32	s5, s10
 800644a:	eeb0 2a65 	vmov.f32	s4, s11
 800644e:	eef0 1a46 	vmov.f32	s3, s12
 8006452:	eeb0 1a66 	vmov.f32	s2, s13
 8006456:	eef0 0a47 	vmov.f32	s1, s14
 800645a:	eeb0 0a67 	vmov.f32	s0, s15
 800645e:	4898      	ldr	r0, [pc, #608]	@ (80066c0 <HAL_I2C_MemRxCpltCallback+0x348>)
 8006460:	f7fb fa3a 	bl	80018d8 <MPU6050_GET_ACCANDGYR_FILTRED>


			now_pitch = data.x;
 8006464:	4b96      	ldr	r3, [pc, #600]	@ (80066c0 <HAL_I2C_MemRxCpltCallback+0x348>)
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	4a96      	ldr	r2, [pc, #600]	@ (80066c4 <HAL_I2C_MemRxCpltCallback+0x34c>)
 800646a:	6013      	str	r3, [r2, #0]
			now_rool = data.y;
 800646c:	4b94      	ldr	r3, [pc, #592]	@ (80066c0 <HAL_I2C_MemRxCpltCallback+0x348>)
 800646e:	685b      	ldr	r3, [r3, #4]
 8006470:	4a95      	ldr	r2, [pc, #596]	@ (80066c8 <HAL_I2C_MemRxCpltCallback+0x350>)
 8006472:	6013      	str	r3, [r2, #0]
			now_yaw = data.z;
 8006474:	4b92      	ldr	r3, [pc, #584]	@ (80066c0 <HAL_I2C_MemRxCpltCallback+0x348>)
 8006476:	689b      	ldr	r3, [r3, #8]
 8006478:	4a94      	ldr	r2, [pc, #592]	@ (80066cc <HAL_I2C_MemRxCpltCallback+0x354>)
 800647a:	6013      	str	r3, [r2, #0]


			wanted_rool = (float)wanted_rool_rx/10;
 800647c:	4b94      	ldr	r3, [pc, #592]	@ (80066d0 <HAL_I2C_MemRxCpltCallback+0x358>)
 800647e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006482:	ee07 3a90 	vmov	s15, r3
 8006486:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800648a:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 800648e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006492:	4b90      	ldr	r3, [pc, #576]	@ (80066d4 <HAL_I2C_MemRxCpltCallback+0x35c>)
 8006494:	edc3 7a00 	vstr	s15, [r3]
			wanted_pitch = (float)wanted_pitch_rx/10;
 8006498:	4b8f      	ldr	r3, [pc, #572]	@ (80066d8 <HAL_I2C_MemRxCpltCallback+0x360>)
 800649a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800649e:	ee07 3a90 	vmov	s15, r3
 80064a2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80064a6:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 80064aa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80064ae:	4b8b      	ldr	r3, [pc, #556]	@ (80066dc <HAL_I2C_MemRxCpltCallback+0x364>)
 80064b0:	edc3 7a00 	vstr	s15, [r3]
			wanted_yaw = 0;//(float)wanted_yaw_rx/10;
 80064b4:	4b8a      	ldr	r3, [pc, #552]	@ (80066e0 <HAL_I2C_MemRxCpltCallback+0x368>)
 80064b6:	f04f 0200 	mov.w	r2, #0
 80064ba:	601a      	str	r2, [r3, #0]
				  			/*
				  				 * FDP
				  				 */
			wanted_rool = (wanted_rool * (FDP_FQ * looptime) / (1 + (FDP_FQ * looptime))) + (last_wanted_rool_rx * (1 / (1 + (FDP_FQ * looptime))));
 80064bc:	eddf 7a89 	vldr	s15, [pc, #548]	@ 80066e4 <HAL_I2C_MemRxCpltCallback+0x36c>
 80064c0:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80064c4:	4b83      	ldr	r3, [pc, #524]	@ (80066d4 <HAL_I2C_MemRxCpltCallback+0x35c>)
 80064c6:	edd3 7a00 	vldr	s15, [r3]
 80064ca:	ee67 6a27 	vmul.f32	s13, s14, s15
 80064ce:	eddf 7a85 	vldr	s15, [pc, #532]	@ 80066e4 <HAL_I2C_MemRxCpltCallback+0x36c>
 80064d2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80064d6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80064da:	ee77 7a87 	vadd.f32	s15, s15, s14
 80064de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80064e2:	eddf 7a80 	vldr	s15, [pc, #512]	@ 80066e4 <HAL_I2C_MemRxCpltCallback+0x36c>
 80064e6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80064ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80064ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80064f2:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 80064f6:	eec6 6a27 	vdiv.f32	s13, s12, s15
 80064fa:	4b7b      	ldr	r3, [pc, #492]	@ (80066e8 <HAL_I2C_MemRxCpltCallback+0x370>)
 80064fc:	edd3 7a00 	vldr	s15, [r3]
 8006500:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006504:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006508:	4b72      	ldr	r3, [pc, #456]	@ (80066d4 <HAL_I2C_MemRxCpltCallback+0x35c>)
 800650a:	edc3 7a00 	vstr	s15, [r3]
			wanted_pitch = (wanted_pitch * (FDP_FQ * looptime) / (1 + (FDP_FQ * looptime))) + (last_wanted_pitch_rx * (1 / (1 + (FDP_FQ * looptime))));
 800650e:	eddf 7a75 	vldr	s15, [pc, #468]	@ 80066e4 <HAL_I2C_MemRxCpltCallback+0x36c>
 8006512:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8006516:	4b71      	ldr	r3, [pc, #452]	@ (80066dc <HAL_I2C_MemRxCpltCallback+0x364>)
 8006518:	edd3 7a00 	vldr	s15, [r3]
 800651c:	ee67 6a27 	vmul.f32	s13, s14, s15
 8006520:	eddf 7a70 	vldr	s15, [pc, #448]	@ 80066e4 <HAL_I2C_MemRxCpltCallback+0x36c>
 8006524:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8006528:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800652c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006530:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006534:	eddf 7a6b 	vldr	s15, [pc, #428]	@ 80066e4 <HAL_I2C_MemRxCpltCallback+0x36c>
 8006538:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800653c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006540:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006544:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8006548:	eec6 6a27 	vdiv.f32	s13, s12, s15
 800654c:	4b67      	ldr	r3, [pc, #412]	@ (80066ec <HAL_I2C_MemRxCpltCallback+0x374>)
 800654e:	edd3 7a00 	vldr	s15, [r3]
 8006552:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006556:	ee77 7a27 	vadd.f32	s15, s14, s15
 800655a:	4b60      	ldr	r3, [pc, #384]	@ (80066dc <HAL_I2C_MemRxCpltCallback+0x364>)
 800655c:	edc3 7a00 	vstr	s15, [r3]
			wanted_yaw = (wanted_yaw * (FDP_FQ * looptime) / (1 + (FDP_FQ * looptime))) + (last_wanted_yaw_rx * (1 / (1 + (FDP_FQ * looptime))));
 8006560:	eddf 7a60 	vldr	s15, [pc, #384]	@ 80066e4 <HAL_I2C_MemRxCpltCallback+0x36c>
 8006564:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8006568:	4b5d      	ldr	r3, [pc, #372]	@ (80066e0 <HAL_I2C_MemRxCpltCallback+0x368>)
 800656a:	edd3 7a00 	vldr	s15, [r3]
 800656e:	ee67 6a27 	vmul.f32	s13, s14, s15
 8006572:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 80066e4 <HAL_I2C_MemRxCpltCallback+0x36c>
 8006576:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800657a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800657e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006582:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006586:	eddf 7a57 	vldr	s15, [pc, #348]	@ 80066e4 <HAL_I2C_MemRxCpltCallback+0x36c>
 800658a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800658e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006592:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006596:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 800659a:	eec6 6a27 	vdiv.f32	s13, s12, s15
 800659e:	4b54      	ldr	r3, [pc, #336]	@ (80066f0 <HAL_I2C_MemRxCpltCallback+0x378>)
 80065a0:	edd3 7a00 	vldr	s15, [r3]
 80065a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80065a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80065ac:	4b4c      	ldr	r3, [pc, #304]	@ (80066e0 <HAL_I2C_MemRxCpltCallback+0x368>)
 80065ae:	edc3 7a00 	vstr	s15, [r3]


			last_wanted_rool_rx = wanted_rool;
 80065b2:	4b48      	ldr	r3, [pc, #288]	@ (80066d4 <HAL_I2C_MemRxCpltCallback+0x35c>)
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	4a4c      	ldr	r2, [pc, #304]	@ (80066e8 <HAL_I2C_MemRxCpltCallback+0x370>)
 80065b8:	6013      	str	r3, [r2, #0]
			last_wanted_pitch_rx = wanted_pitch;
 80065ba:	4b48      	ldr	r3, [pc, #288]	@ (80066dc <HAL_I2C_MemRxCpltCallback+0x364>)
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	4a4b      	ldr	r2, [pc, #300]	@ (80066ec <HAL_I2C_MemRxCpltCallback+0x374>)
 80065c0:	6013      	str	r3, [r2, #0]
			last_wanted_yaw_rx = wanted_yaw;
 80065c2:	4b47      	ldr	r3, [pc, #284]	@ (80066e0 <HAL_I2C_MemRxCpltCallback+0x368>)
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	4a4a      	ldr	r2, [pc, #296]	@ (80066f0 <HAL_I2C_MemRxCpltCallback+0x378>)
 80065c8:	6013      	str	r3, [r2, #0]


			error_sum_pitch = (MYDRON.PITCH_STA != 0) ? error_sum_pitch : error_sum_pitch + (wanted_pitch - now_pitch);
 80065ca:	4b4a      	ldr	r3, [pc, #296]	@ (80066f4 <HAL_I2C_MemRxCpltCallback+0x37c>)
 80065cc:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d008      	beq.n	80065e6 <HAL_I2C_MemRxCpltCallback+0x26e>
 80065d4:	4b48      	ldr	r3, [pc, #288]	@ (80066f8 <HAL_I2C_MemRxCpltCallback+0x380>)
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	ee07 3a90 	vmov	s15, r3
 80065dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80065e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80065e4:	e011      	b.n	800660a <HAL_I2C_MemRxCpltCallback+0x292>
 80065e6:	4b44      	ldr	r3, [pc, #272]	@ (80066f8 <HAL_I2C_MemRxCpltCallback+0x380>)
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	ee07 3a90 	vmov	s15, r3
 80065ee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80065f2:	4b3a      	ldr	r3, [pc, #232]	@ (80066dc <HAL_I2C_MemRxCpltCallback+0x364>)
 80065f4:	edd3 6a00 	vldr	s13, [r3]
 80065f8:	4b32      	ldr	r3, [pc, #200]	@ (80066c4 <HAL_I2C_MemRxCpltCallback+0x34c>)
 80065fa:	edd3 7a00 	vldr	s15, [r3]
 80065fe:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8006602:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006606:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800660a:	4b3b      	ldr	r3, [pc, #236]	@ (80066f8 <HAL_I2C_MemRxCpltCallback+0x380>)
 800660c:	edc3 7a00 	vstr	s15, [r3]
			error_sum_rool = (MYDRON.ROOL_STA != 0) ? error_sum_rool : error_sum_rool + (wanted_rool - now_rool);
 8006610:	4b38      	ldr	r3, [pc, #224]	@ (80066f4 <HAL_I2C_MemRxCpltCallback+0x37c>)
 8006612:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8006616:	2b00      	cmp	r3, #0
 8006618:	d008      	beq.n	800662c <HAL_I2C_MemRxCpltCallback+0x2b4>
 800661a:	4b38      	ldr	r3, [pc, #224]	@ (80066fc <HAL_I2C_MemRxCpltCallback+0x384>)
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	ee07 3a90 	vmov	s15, r3
 8006622:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006626:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800662a:	e011      	b.n	8006650 <HAL_I2C_MemRxCpltCallback+0x2d8>
 800662c:	4b33      	ldr	r3, [pc, #204]	@ (80066fc <HAL_I2C_MemRxCpltCallback+0x384>)
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	ee07 3a90 	vmov	s15, r3
 8006634:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006638:	4b26      	ldr	r3, [pc, #152]	@ (80066d4 <HAL_I2C_MemRxCpltCallback+0x35c>)
 800663a:	edd3 6a00 	vldr	s13, [r3]
 800663e:	4b22      	ldr	r3, [pc, #136]	@ (80066c8 <HAL_I2C_MemRxCpltCallback+0x350>)
 8006640:	edd3 7a00 	vldr	s15, [r3]
 8006644:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8006648:	ee77 7a27 	vadd.f32	s15, s14, s15
 800664c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006650:	4b2a      	ldr	r3, [pc, #168]	@ (80066fc <HAL_I2C_MemRxCpltCallback+0x384>)
 8006652:	edc3 7a00 	vstr	s15, [r3]
			error_sum_yaw = (MYDRON.YAW_STA != 0) ? error_sum_yaw : error_sum_yaw + (wanted_yaw - now_yaw);
 8006656:	4b27      	ldr	r3, [pc, #156]	@ (80066f4 <HAL_I2C_MemRxCpltCallback+0x37c>)
 8006658:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 800665c:	2b00      	cmp	r3, #0
 800665e:	d051      	beq.n	8006704 <HAL_I2C_MemRxCpltCallback+0x38c>
 8006660:	4b27      	ldr	r3, [pc, #156]	@ (8006700 <HAL_I2C_MemRxCpltCallback+0x388>)
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	ee07 3a90 	vmov	s15, r3
 8006668:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800666c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006670:	e05a      	b.n	8006728 <HAL_I2C_MemRxCpltCallback+0x3b0>
 8006672:	bf00      	nop
 8006674:	000041d4 	.word	0x000041d4
 8006678:	58021000 	.word	0x58021000
 800667c:	00000030 	.word	0x00000030
 8006680:	00000034 	.word	0x00000034
 8006684:	00000038 	.word	0x00000038
 8006688:	0000003c 	.word	0x0000003c
 800668c:	00000040 	.word	0x00000040
 8006690:	00000044 	.word	0x00000044
 8006694:	42830000 	.word	0x42830000
 8006698:	46000000 	.word	0x46000000
 800669c:	00000014 	.word	0x00000014
 80066a0:	00000010 	.word	0x00000010
 80066a4:	0000000c 	.word	0x0000000c
 80066a8:	00000008 	.word	0x00000008
 80066ac:	00000004 	.word	0x00000004
 80066b0:	00000000 	.word	0x00000000
 80066b4:	0000001c 	.word	0x0000001c
 80066b8:	00000018 	.word	0x00000018
 80066bc:	00000058 	.word	0x00000058
 80066c0:	0000007c 	.word	0x0000007c
 80066c4:	00004078 	.word	0x00004078
 80066c8:	0000407c 	.word	0x0000407c
 80066cc:	00004080 	.word	0x00004080
 80066d0:	0000404a 	.word	0x0000404a
 80066d4:	0000406c 	.word	0x0000406c
 80066d8:	00004048 	.word	0x00004048
 80066dc:	00004068 	.word	0x00004068
 80066e0:	00004070 	.word	0x00004070
 80066e4:	3a83126f 	.word	0x3a83126f
 80066e8:	00004054 	.word	0x00004054
 80066ec:	00004050 	.word	0x00004050
 80066f0:	00004058 	.word	0x00004058
 80066f4:	00000178 	.word	0x00000178
 80066f8:	0000409c 	.word	0x0000409c
 80066fc:	000040a0 	.word	0x000040a0
 8006700:	000040a4 	.word	0x000040a4
 8006704:	4ba1      	ldr	r3, [pc, #644]	@ (800698c <HAL_I2C_MemRxCpltCallback+0x614>)
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	ee07 3a90 	vmov	s15, r3
 800670c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006710:	4b9f      	ldr	r3, [pc, #636]	@ (8006990 <HAL_I2C_MemRxCpltCallback+0x618>)
 8006712:	edd3 6a00 	vldr	s13, [r3]
 8006716:	4b9f      	ldr	r3, [pc, #636]	@ (8006994 <HAL_I2C_MemRxCpltCallback+0x61c>)
 8006718:	edd3 7a00 	vldr	s15, [r3]
 800671c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8006720:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006724:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006728:	4b98      	ldr	r3, [pc, #608]	@ (800698c <HAL_I2C_MemRxCpltCallback+0x614>)
 800672a:	edc3 7a00 	vstr	s15, [r3]

			error_sum_angular_rate_pitch = (MYDRON.PITCH_STA != 0) ? error_sum_angular_rate_pitch : error_sum_angular_rate_pitch + (pid_pitch - gx);
 800672e:	4b9a      	ldr	r3, [pc, #616]	@ (8006998 <HAL_I2C_MemRxCpltCallback+0x620>)
 8006730:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8006734:	2b00      	cmp	r3, #0
 8006736:	d008      	beq.n	800674a <HAL_I2C_MemRxCpltCallback+0x3d2>
 8006738:	4b98      	ldr	r3, [pc, #608]	@ (800699c <HAL_I2C_MemRxCpltCallback+0x624>)
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	ee07 3a90 	vmov	s15, r3
 8006740:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006744:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006748:	e011      	b.n	800676e <HAL_I2C_MemRxCpltCallback+0x3f6>
 800674a:	4b94      	ldr	r3, [pc, #592]	@ (800699c <HAL_I2C_MemRxCpltCallback+0x624>)
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	ee07 3a90 	vmov	s15, r3
 8006752:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006756:	4b92      	ldr	r3, [pc, #584]	@ (80069a0 <HAL_I2C_MemRxCpltCallback+0x628>)
 8006758:	edd3 6a00 	vldr	s13, [r3]
 800675c:	4b91      	ldr	r3, [pc, #580]	@ (80069a4 <HAL_I2C_MemRxCpltCallback+0x62c>)
 800675e:	edd3 7a00 	vldr	s15, [r3]
 8006762:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8006766:	ee77 7a27 	vadd.f32	s15, s14, s15
 800676a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800676e:	4b8b      	ldr	r3, [pc, #556]	@ (800699c <HAL_I2C_MemRxCpltCallback+0x624>)
 8006770:	edc3 7a00 	vstr	s15, [r3]
			error_sum_angular_rate_rool = (MYDRON.ROOL_STA != 0) ? error_sum_angular_rate_rool : error_sum_angular_rate_rool + (pid_rool - gy);
 8006774:	4b88      	ldr	r3, [pc, #544]	@ (8006998 <HAL_I2C_MemRxCpltCallback+0x620>)
 8006776:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 800677a:	2b00      	cmp	r3, #0
 800677c:	d008      	beq.n	8006790 <HAL_I2C_MemRxCpltCallback+0x418>
 800677e:	4b8a      	ldr	r3, [pc, #552]	@ (80069a8 <HAL_I2C_MemRxCpltCallback+0x630>)
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	ee07 3a90 	vmov	s15, r3
 8006786:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800678a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800678e:	e011      	b.n	80067b4 <HAL_I2C_MemRxCpltCallback+0x43c>
 8006790:	4b85      	ldr	r3, [pc, #532]	@ (80069a8 <HAL_I2C_MemRxCpltCallback+0x630>)
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	ee07 3a90 	vmov	s15, r3
 8006798:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800679c:	4b83      	ldr	r3, [pc, #524]	@ (80069ac <HAL_I2C_MemRxCpltCallback+0x634>)
 800679e:	edd3 6a00 	vldr	s13, [r3]
 80067a2:	4b83      	ldr	r3, [pc, #524]	@ (80069b0 <HAL_I2C_MemRxCpltCallback+0x638>)
 80067a4:	edd3 7a00 	vldr	s15, [r3]
 80067a8:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80067ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80067b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80067b4:	4b7c      	ldr	r3, [pc, #496]	@ (80069a8 <HAL_I2C_MemRxCpltCallback+0x630>)
 80067b6:	edc3 7a00 	vstr	s15, [r3]
			error_sum_angular_rate_yaw = (MYDRON.YAW_STA != 0) ? error_sum_angular_rate_yaw : error_sum_angular_rate_yaw + (pid_yaw - gz);
 80067ba:	4b77      	ldr	r3, [pc, #476]	@ (8006998 <HAL_I2C_MemRxCpltCallback+0x620>)
 80067bc:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d008      	beq.n	80067d6 <HAL_I2C_MemRxCpltCallback+0x45e>
 80067c4:	4b7b      	ldr	r3, [pc, #492]	@ (80069b4 <HAL_I2C_MemRxCpltCallback+0x63c>)
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	ee07 3a90 	vmov	s15, r3
 80067cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80067d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80067d4:	e011      	b.n	80067fa <HAL_I2C_MemRxCpltCallback+0x482>
 80067d6:	4b77      	ldr	r3, [pc, #476]	@ (80069b4 <HAL_I2C_MemRxCpltCallback+0x63c>)
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	ee07 3a90 	vmov	s15, r3
 80067de:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80067e2:	4b75      	ldr	r3, [pc, #468]	@ (80069b8 <HAL_I2C_MemRxCpltCallback+0x640>)
 80067e4:	edd3 6a00 	vldr	s13, [r3]
 80067e8:	4b74      	ldr	r3, [pc, #464]	@ (80069bc <HAL_I2C_MemRxCpltCallback+0x644>)
 80067ea:	edd3 7a00 	vldr	s15, [r3]
 80067ee:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80067f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80067f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80067fa:	4b6e      	ldr	r3, [pc, #440]	@ (80069b4 <HAL_I2C_MemRxCpltCallback+0x63c>)
 80067fc:	edc3 7a00 	vstr	s15, [r3]


			PID_cal(&pid_pitch, PID_FAC_Pitch, 1);// angle control
 8006800:	2201      	movs	r2, #1
 8006802:	496f      	ldr	r1, [pc, #444]	@ (80069c0 <HAL_I2C_MemRxCpltCallback+0x648>)
 8006804:	4866      	ldr	r0, [pc, #408]	@ (80069a0 <HAL_I2C_MemRxCpltCallback+0x628>)
 8006806:	f7fd f8e1 	bl	80039cc <PID_cal>
			PID_cal(&pid_rool, PID_FAC_Rool, 2);
 800680a:	2202      	movs	r2, #2
 800680c:	496d      	ldr	r1, [pc, #436]	@ (80069c4 <HAL_I2C_MemRxCpltCallback+0x64c>)
 800680e:	4867      	ldr	r0, [pc, #412]	@ (80069ac <HAL_I2C_MemRxCpltCallback+0x634>)
 8006810:	f7fd f8dc 	bl	80039cc <PID_cal>
			PID_cal(&pid_yaw, PID_FAC_Yaw, 3);
 8006814:	2203      	movs	r2, #3
 8006816:	496c      	ldr	r1, [pc, #432]	@ (80069c8 <HAL_I2C_MemRxCpltCallback+0x650>)
 8006818:	4867      	ldr	r0, [pc, #412]	@ (80069b8 <HAL_I2C_MemRxCpltCallback+0x640>)
 800681a:	f7fd f8d7 	bl	80039cc <PID_cal>

			PID_cal(&pid_angular_rate_pitch, PID_FAC_Angular_Rate_Pitch, 4);// angle rate control
 800681e:	2204      	movs	r2, #4
 8006820:	496a      	ldr	r1, [pc, #424]	@ (80069cc <HAL_I2C_MemRxCpltCallback+0x654>)
 8006822:	486b      	ldr	r0, [pc, #428]	@ (80069d0 <HAL_I2C_MemRxCpltCallback+0x658>)
 8006824:	f7fd f8d2 	bl	80039cc <PID_cal>
			PID_cal(&pid_angular_rate_rool, PID_FAC_Angular_Rate_Rool, 5);
 8006828:	2205      	movs	r2, #5
 800682a:	496a      	ldr	r1, [pc, #424]	@ (80069d4 <HAL_I2C_MemRxCpltCallback+0x65c>)
 800682c:	486a      	ldr	r0, [pc, #424]	@ (80069d8 <HAL_I2C_MemRxCpltCallback+0x660>)
 800682e:	f7fd f8cd 	bl	80039cc <PID_cal>
			PID_cal(&pid_angular_rate_yaw, PID_FAC_Angular_Rate_Yaw, 6);
 8006832:	2206      	movs	r2, #6
 8006834:	4969      	ldr	r1, [pc, #420]	@ (80069dc <HAL_I2C_MemRxCpltCallback+0x664>)
 8006836:	486a      	ldr	r0, [pc, #424]	@ (80069e0 <HAL_I2C_MemRxCpltCallback+0x668>)
 8006838:	f7fd f8c8 	bl	80039cc <PID_cal>


			old_error_pitch = wanted_pitch - now_pitch;
 800683c:	4b69      	ldr	r3, [pc, #420]	@ (80069e4 <HAL_I2C_MemRxCpltCallback+0x66c>)
 800683e:	ed93 7a00 	vldr	s14, [r3]
 8006842:	4b69      	ldr	r3, [pc, #420]	@ (80069e8 <HAL_I2C_MemRxCpltCallback+0x670>)
 8006844:	edd3 7a00 	vldr	s15, [r3]
 8006848:	ee77 7a67 	vsub.f32	s15, s14, s15
 800684c:	4b67      	ldr	r3, [pc, #412]	@ (80069ec <HAL_I2C_MemRxCpltCallback+0x674>)
 800684e:	edc3 7a00 	vstr	s15, [r3]
			old_error_rool = wanted_rool - now_rool;
 8006852:	4b67      	ldr	r3, [pc, #412]	@ (80069f0 <HAL_I2C_MemRxCpltCallback+0x678>)
 8006854:	ed93 7a00 	vldr	s14, [r3]
 8006858:	4b66      	ldr	r3, [pc, #408]	@ (80069f4 <HAL_I2C_MemRxCpltCallback+0x67c>)
 800685a:	edd3 7a00 	vldr	s15, [r3]
 800685e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006862:	4b65      	ldr	r3, [pc, #404]	@ (80069f8 <HAL_I2C_MemRxCpltCallback+0x680>)
 8006864:	edc3 7a00 	vstr	s15, [r3]
			old_error_yaw = wanted_yaw - now_yaw;
 8006868:	4b49      	ldr	r3, [pc, #292]	@ (8006990 <HAL_I2C_MemRxCpltCallback+0x618>)
 800686a:	ed93 7a00 	vldr	s14, [r3]
 800686e:	4b49      	ldr	r3, [pc, #292]	@ (8006994 <HAL_I2C_MemRxCpltCallback+0x61c>)
 8006870:	edd3 7a00 	vldr	s15, [r3]
 8006874:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006878:	4b60      	ldr	r3, [pc, #384]	@ (80069fc <HAL_I2C_MemRxCpltCallback+0x684>)
 800687a:	edc3 7a00 	vstr	s15, [r3]

			old_error_angular_rate_pitch = pid_pitch - gx;
 800687e:	4b48      	ldr	r3, [pc, #288]	@ (80069a0 <HAL_I2C_MemRxCpltCallback+0x628>)
 8006880:	ed93 7a00 	vldr	s14, [r3]
 8006884:	4b47      	ldr	r3, [pc, #284]	@ (80069a4 <HAL_I2C_MemRxCpltCallback+0x62c>)
 8006886:	edd3 7a00 	vldr	s15, [r3]
 800688a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800688e:	4b5c      	ldr	r3, [pc, #368]	@ (8006a00 <HAL_I2C_MemRxCpltCallback+0x688>)
 8006890:	edc3 7a00 	vstr	s15, [r3]
			old_error_angular_rate_rool = pid_rool - gy;
 8006894:	4b45      	ldr	r3, [pc, #276]	@ (80069ac <HAL_I2C_MemRxCpltCallback+0x634>)
 8006896:	ed93 7a00 	vldr	s14, [r3]
 800689a:	4b45      	ldr	r3, [pc, #276]	@ (80069b0 <HAL_I2C_MemRxCpltCallback+0x638>)
 800689c:	edd3 7a00 	vldr	s15, [r3]
 80068a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80068a4:	4b57      	ldr	r3, [pc, #348]	@ (8006a04 <HAL_I2C_MemRxCpltCallback+0x68c>)
 80068a6:	edc3 7a00 	vstr	s15, [r3]
			old_error_angular_rate_yaw = wanted_yaw - gz;
 80068aa:	4b39      	ldr	r3, [pc, #228]	@ (8006990 <HAL_I2C_MemRxCpltCallback+0x618>)
 80068ac:	ed93 7a00 	vldr	s14, [r3]
 80068b0:	4b42      	ldr	r3, [pc, #264]	@ (80069bc <HAL_I2C_MemRxCpltCallback+0x644>)
 80068b2:	edd3 7a00 	vldr	s15, [r3]
 80068b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80068ba:	4b53      	ldr	r3, [pc, #332]	@ (8006a08 <HAL_I2C_MemRxCpltCallback+0x690>)
 80068bc:	edc3 7a00 	vstr	s15, [r3]


			//MYDRON.ROOL 	= ((pid_angular_rate_rool > -5000) && (pid_angular_rate_rool < 5000)) ? pid_angular_rate_rool: (pid_angular_rate_rool > 0) ? 5000: -5000;
			MYDRON.ROOL 	= (pid_angular_rate_rool > 5000) ? ROOL_MAX_VAL(): (pid_angular_rate_rool < -5000) ? ROOL_MIN_VAL(): ROOL_GOOD_VAL();
 80068c0:	4b45      	ldr	r3, [pc, #276]	@ (80069d8 <HAL_I2C_MemRxCpltCallback+0x660>)
 80068c2:	edd3 7a00 	vldr	s15, [r3]
 80068c6:	ed9f 7a51 	vldr	s14, [pc, #324]	@ 8006a0c <HAL_I2C_MemRxCpltCallback+0x694>
 80068ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80068ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068d2:	dd04      	ble.n	80068de <HAL_I2C_MemRxCpltCallback+0x566>
 80068d4:	f001 f87c 	bl	80079d0 <ROOL_MAX_VAL>
 80068d8:	4603      	mov	r3, r0
 80068da:	461a      	mov	r2, r3
 80068dc:	e012      	b.n	8006904 <HAL_I2C_MemRxCpltCallback+0x58c>
 80068de:	4b3e      	ldr	r3, [pc, #248]	@ (80069d8 <HAL_I2C_MemRxCpltCallback+0x660>)
 80068e0:	edd3 7a00 	vldr	s15, [r3]
 80068e4:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 8006a10 <HAL_I2C_MemRxCpltCallback+0x698>
 80068e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80068ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068f0:	d504      	bpl.n	80068fc <HAL_I2C_MemRxCpltCallback+0x584>
 80068f2:	f001 f87d 	bl	80079f0 <ROOL_MIN_VAL>
 80068f6:	4603      	mov	r3, r0
 80068f8:	461a      	mov	r2, r3
 80068fa:	e003      	b.n	8006904 <HAL_I2C_MemRxCpltCallback+0x58c>
 80068fc:	f001 f8c8 	bl	8007a90 <ROOL_GOOD_VAL>
 8006900:	4603      	mov	r3, r0
 8006902:	461a      	mov	r2, r3
 8006904:	4b24      	ldr	r3, [pc, #144]	@ (8006998 <HAL_I2C_MemRxCpltCallback+0x620>)
 8006906:	80da      	strh	r2, [r3, #6]
			MYDRON.PITCH 	= (pid_angular_rate_pitch > 5000) ? PITCH_MAX_VAL(): (pid_angular_rate_pitch < -5000) ? PITCH_MIN_VAL(): PITCH_GOOD_VAL();
 8006908:	4b31      	ldr	r3, [pc, #196]	@ (80069d0 <HAL_I2C_MemRxCpltCallback+0x658>)
 800690a:	edd3 7a00 	vldr	s15, [r3]
 800690e:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8006a0c <HAL_I2C_MemRxCpltCallback+0x694>
 8006912:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006916:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800691a:	dd04      	ble.n	8006926 <HAL_I2C_MemRxCpltCallback+0x5ae>
 800691c:	f001 f878 	bl	8007a10 <PITCH_MAX_VAL>
 8006920:	4603      	mov	r3, r0
 8006922:	461a      	mov	r2, r3
 8006924:	e012      	b.n	800694c <HAL_I2C_MemRxCpltCallback+0x5d4>
 8006926:	4b2a      	ldr	r3, [pc, #168]	@ (80069d0 <HAL_I2C_MemRxCpltCallback+0x658>)
 8006928:	edd3 7a00 	vldr	s15, [r3]
 800692c:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8006a10 <HAL_I2C_MemRxCpltCallback+0x698>
 8006930:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006934:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006938:	d504      	bpl.n	8006944 <HAL_I2C_MemRxCpltCallback+0x5cc>
 800693a:	f001 f879 	bl	8007a30 <PITCH_MIN_VAL>
 800693e:	4603      	mov	r3, r0
 8006940:	461a      	mov	r2, r3
 8006942:	e003      	b.n	800694c <HAL_I2C_MemRxCpltCallback+0x5d4>
 8006944:	f001 f8bc 	bl	8007ac0 <PITCH_GOOD_VAL>
 8006948:	4603      	mov	r3, r0
 800694a:	461a      	mov	r2, r3
 800694c:	4b12      	ldr	r3, [pc, #72]	@ (8006998 <HAL_I2C_MemRxCpltCallback+0x620>)
 800694e:	809a      	strh	r2, [r3, #4]
			MYDRON.YAW 		= (pid_angular_rate_yaw > 5000) ? YAW_MAX_VAL(): (pid_angular_rate_yaw < -5000) ? YAW_MIN_VAL(): YAW_GOOD_VAL();
 8006950:	4b23      	ldr	r3, [pc, #140]	@ (80069e0 <HAL_I2C_MemRxCpltCallback+0x668>)
 8006952:	edd3 7a00 	vldr	s15, [r3]
 8006956:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 8006a0c <HAL_I2C_MemRxCpltCallback+0x694>
 800695a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800695e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006962:	dd04      	ble.n	800696e <HAL_I2C_MemRxCpltCallback+0x5f6>
 8006964:	f001 f874 	bl	8007a50 <YAW_MAX_VAL>
 8006968:	4603      	mov	r3, r0
 800696a:	461a      	mov	r2, r3
 800696c:	e056      	b.n	8006a1c <HAL_I2C_MemRxCpltCallback+0x6a4>
 800696e:	4b1c      	ldr	r3, [pc, #112]	@ (80069e0 <HAL_I2C_MemRxCpltCallback+0x668>)
 8006970:	edd3 7a00 	vldr	s15, [r3]
 8006974:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8006a10 <HAL_I2C_MemRxCpltCallback+0x698>
 8006978:	eef4 7ac7 	vcmpe.f32	s15, s14
 800697c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006980:	d548      	bpl.n	8006a14 <HAL_I2C_MemRxCpltCallback+0x69c>
 8006982:	f001 f875 	bl	8007a70 <YAW_MIN_VAL>
 8006986:	4603      	mov	r3, r0
 8006988:	461a      	mov	r2, r3
 800698a:	e047      	b.n	8006a1c <HAL_I2C_MemRxCpltCallback+0x6a4>
 800698c:	000040a4 	.word	0x000040a4
 8006990:	00004070 	.word	0x00004070
 8006994:	00004080 	.word	0x00004080
 8006998:	00000178 	.word	0x00000178
 800699c:	000040a8 	.word	0x000040a8
 80069a0:	000040b4 	.word	0x000040b4
 80069a4:	0000000c 	.word	0x0000000c
 80069a8:	000040ac 	.word	0x000040ac
 80069ac:	000040bc 	.word	0x000040bc
 80069b0:	00000010 	.word	0x00000010
 80069b4:	000040b0 	.word	0x000040b0
 80069b8:	000040b8 	.word	0x000040b8
 80069bc:	00000014 	.word	0x00000014
 80069c0:	000040f0 	.word	0x000040f0
 80069c4:	00004104 	.word	0x00004104
 80069c8:	00004118 	.word	0x00004118
 80069cc:	00004150 	.word	0x00004150
 80069d0:	000040c0 	.word	0x000040c0
 80069d4:	00004164 	.word	0x00004164
 80069d8:	000040c8 	.word	0x000040c8
 80069dc:	00004178 	.word	0x00004178
 80069e0:	000040c4 	.word	0x000040c4
 80069e4:	00004068 	.word	0x00004068
 80069e8:	00004078 	.word	0x00004078
 80069ec:	00004084 	.word	0x00004084
 80069f0:	0000406c 	.word	0x0000406c
 80069f4:	0000407c 	.word	0x0000407c
 80069f8:	00004088 	.word	0x00004088
 80069fc:	0000408c 	.word	0x0000408c
 8006a00:	00004090 	.word	0x00004090
 8006a04:	00004094 	.word	0x00004094
 8006a08:	00004098 	.word	0x00004098
 8006a0c:	459c4000 	.word	0x459c4000
 8006a10:	c59c4000 	.word	0xc59c4000
 8006a14:	f001 f86c 	bl	8007af0 <YAW_GOOD_VAL>
 8006a18:	4603      	mov	r3, r0
 8006a1a:	461a      	mov	r2, r3
 8006a1c:	4bc4      	ldr	r3, [pc, #784]	@ (8006d30 <HAL_I2C_MemRxCpltCallback+0x9b8>)
 8006a1e:	811a      	strh	r2, [r3, #8]
//				wanted_thrust = MYDRON.THRUST/wobble_strenght;
//				Wobble_handler();
//			}


			Thrust_filter(1);
 8006a20:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 8006a24:	f7fc fe9c 	bl	8003760 <Thrust_filter>
			if(MYDRON.THRUST > thrust_limit){
 8006a28:	4bc1      	ldr	r3, [pc, #772]	@ (8006d30 <HAL_I2C_MemRxCpltCallback+0x9b8>)
 8006a2a:	885b      	ldrh	r3, [r3, #2]
 8006a2c:	461a      	mov	r2, r3
 8006a2e:	4bc1      	ldr	r3, [pc, #772]	@ (8006d34 <HAL_I2C_MemRxCpltCallback+0x9bc>)
 8006a30:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006a34:	429a      	cmp	r2, r3
 8006a36:	dd05      	ble.n	8006a44 <HAL_I2C_MemRxCpltCallback+0x6cc>
				MYDRON.THRUST = thrust_limit;
 8006a38:	4bbe      	ldr	r3, [pc, #760]	@ (8006d34 <HAL_I2C_MemRxCpltCallback+0x9bc>)
 8006a3a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006a3e:	b29a      	uxth	r2, r3
 8006a40:	4bbb      	ldr	r3, [pc, #748]	@ (8006d30 <HAL_I2C_MemRxCpltCallback+0x9b8>)
 8006a42:	805a      	strh	r2, [r3, #2]
			}


			Stack_Push(WartoscBezwgledna(PID_FAC_Pitch[4]));
 8006a44:	4bbc      	ldr	r3, [pc, #752]	@ (8006d38 <HAL_I2C_MemRxCpltCallback+0x9c0>)
 8006a46:	edd3 7a04 	vldr	s15, [r3, #16]
 8006a4a:	eeb0 0a67 	vmov.f32	s0, s15
 8006a4e:	f000 fbcd 	bl	80071ec <WartoscBezwgledna>
 8006a52:	eef0 7a40 	vmov.f32	s15, s0
 8006a56:	eeb0 0a67 	vmov.f32	s0, s15
 8006a5a:	f000 ff6d 	bl	8007938 <Stack_Push>
			Stack_Push(WartoscBezwgledna(PID_FAC_Rool[4]));
 8006a5e:	4bb7      	ldr	r3, [pc, #732]	@ (8006d3c <HAL_I2C_MemRxCpltCallback+0x9c4>)
 8006a60:	edd3 7a04 	vldr	s15, [r3, #16]
 8006a64:	eeb0 0a67 	vmov.f32	s0, s15
 8006a68:	f000 fbc0 	bl	80071ec <WartoscBezwgledna>
 8006a6c:	eef0 7a40 	vmov.f32	s15, s0
 8006a70:	eeb0 0a67 	vmov.f32	s0, s15
 8006a74:	f000 ff60 	bl	8007938 <Stack_Push>
			Stack_Push(now_pitch);
 8006a78:	4bb1      	ldr	r3, [pc, #708]	@ (8006d40 <HAL_I2C_MemRxCpltCallback+0x9c8>)
 8006a7a:	edd3 7a00 	vldr	s15, [r3]
 8006a7e:	eeb0 0a67 	vmov.f32	s0, s15
 8006a82:	f000 ff59 	bl	8007938 <Stack_Push>
			Stack_Push(now_rool);
 8006a86:	4baf      	ldr	r3, [pc, #700]	@ (8006d44 <HAL_I2C_MemRxCpltCallback+0x9cc>)
 8006a88:	edd3 7a00 	vldr	s15, [r3]
 8006a8c:	eeb0 0a67 	vmov.f32	s0, s15
 8006a90:	f000 ff52 	bl	8007938 <Stack_Push>


			SPEED1 = (((uint32_t)((MYDRON.THRUST*0.7) + MYDRON.ROOL - MYDRON.PITCH + MYDRON.YAW + min_speed + 500)) < 20000) ? ((MYDRON.THRUST*0.7) + MYDRON.ROOL - MYDRON.PITCH + MYDRON.YAW + min_speed + 500) : 20000;//trust 7000 max
 8006a94:	4ba6      	ldr	r3, [pc, #664]	@ (8006d30 <HAL_I2C_MemRxCpltCallback+0x9b8>)
 8006a96:	885b      	ldrh	r3, [r3, #2]
 8006a98:	ee07 3a90 	vmov	s15, r3
 8006a9c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006aa0:	ed9f 6b9d 	vldr	d6, [pc, #628]	@ 8006d18 <HAL_I2C_MemRxCpltCallback+0x9a0>
 8006aa4:	ee27 6b06 	vmul.f64	d6, d7, d6
 8006aa8:	4ba1      	ldr	r3, [pc, #644]	@ (8006d30 <HAL_I2C_MemRxCpltCallback+0x9b8>)
 8006aaa:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8006aae:	ee07 3a90 	vmov	s15, r3
 8006ab2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006ab6:	ee36 6b07 	vadd.f64	d6, d6, d7
 8006aba:	4b9d      	ldr	r3, [pc, #628]	@ (8006d30 <HAL_I2C_MemRxCpltCallback+0x9b8>)
 8006abc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006ac0:	ee07 3a90 	vmov	s15, r3
 8006ac4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006ac8:	ee36 6b47 	vsub.f64	d6, d6, d7
 8006acc:	4b98      	ldr	r3, [pc, #608]	@ (8006d30 <HAL_I2C_MemRxCpltCallback+0x9b8>)
 8006ace:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006ad2:	ee07 3a90 	vmov	s15, r3
 8006ad6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006ada:	ee36 7b07 	vadd.f64	d7, d6, d7
 8006ade:	ed9f 6b90 	vldr	d6, [pc, #576]	@ 8006d20 <HAL_I2C_MemRxCpltCallback+0x9a8>
 8006ae2:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006ae6:	ed9f 6b90 	vldr	d6, [pc, #576]	@ 8006d28 <HAL_I2C_MemRxCpltCallback+0x9b0>
 8006aea:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006aee:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006af2:	ee17 2a90 	vmov	r2, s15
 8006af6:	f644 631f 	movw	r3, #19999	@ 0x4e1f
 8006afa:	429a      	cmp	r2, r3
 8006afc:	d832      	bhi.n	8006b64 <HAL_I2C_MemRxCpltCallback+0x7ec>
 8006afe:	4b8c      	ldr	r3, [pc, #560]	@ (8006d30 <HAL_I2C_MemRxCpltCallback+0x9b8>)
 8006b00:	885b      	ldrh	r3, [r3, #2]
 8006b02:	ee07 3a90 	vmov	s15, r3
 8006b06:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006b0a:	ed9f 6b83 	vldr	d6, [pc, #524]	@ 8006d18 <HAL_I2C_MemRxCpltCallback+0x9a0>
 8006b0e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8006b12:	4b87      	ldr	r3, [pc, #540]	@ (8006d30 <HAL_I2C_MemRxCpltCallback+0x9b8>)
 8006b14:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8006b18:	ee07 3a90 	vmov	s15, r3
 8006b1c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006b20:	ee36 6b07 	vadd.f64	d6, d6, d7
 8006b24:	4b82      	ldr	r3, [pc, #520]	@ (8006d30 <HAL_I2C_MemRxCpltCallback+0x9b8>)
 8006b26:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006b2a:	ee07 3a90 	vmov	s15, r3
 8006b2e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006b32:	ee36 6b47 	vsub.f64	d6, d6, d7
 8006b36:	4b7e      	ldr	r3, [pc, #504]	@ (8006d30 <HAL_I2C_MemRxCpltCallback+0x9b8>)
 8006b38:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006b3c:	ee07 3a90 	vmov	s15, r3
 8006b40:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006b44:	ee36 7b07 	vadd.f64	d7, d6, d7
 8006b48:	ed9f 6b75 	vldr	d6, [pc, #468]	@ 8006d20 <HAL_I2C_MemRxCpltCallback+0x9a8>
 8006b4c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006b50:	ed9f 6b75 	vldr	d6, [pc, #468]	@ 8006d28 <HAL_I2C_MemRxCpltCallback+0x9b0>
 8006b54:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006b58:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006b5c:	ee17 3a90 	vmov	r3, s15
 8006b60:	b29b      	uxth	r3, r3
 8006b62:	e001      	b.n	8006b68 <HAL_I2C_MemRxCpltCallback+0x7f0>
 8006b64:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8006b68:	4a77      	ldr	r2, [pc, #476]	@ (8006d48 <HAL_I2C_MemRxCpltCallback+0x9d0>)
 8006b6a:	8013      	strh	r3, [r2, #0]
			SPEED2 = (((uint32_t)((MYDRON.THRUST*0.7) - MYDRON.ROOL - MYDRON.PITCH - MYDRON.YAW + min_speed + 500)) < 20000) ? ((MYDRON.THRUST*0.7) - MYDRON.ROOL - MYDRON.PITCH - MYDRON.YAW + min_speed + 500) : 20000;//
 8006b6c:	4b70      	ldr	r3, [pc, #448]	@ (8006d30 <HAL_I2C_MemRxCpltCallback+0x9b8>)
 8006b6e:	885b      	ldrh	r3, [r3, #2]
 8006b70:	ee07 3a90 	vmov	s15, r3
 8006b74:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006b78:	ed9f 6b67 	vldr	d6, [pc, #412]	@ 8006d18 <HAL_I2C_MemRxCpltCallback+0x9a0>
 8006b7c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8006b80:	4b6b      	ldr	r3, [pc, #428]	@ (8006d30 <HAL_I2C_MemRxCpltCallback+0x9b8>)
 8006b82:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8006b86:	ee07 3a90 	vmov	s15, r3
 8006b8a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006b8e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8006b92:	4b67      	ldr	r3, [pc, #412]	@ (8006d30 <HAL_I2C_MemRxCpltCallback+0x9b8>)
 8006b94:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006b98:	ee07 3a90 	vmov	s15, r3
 8006b9c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006ba0:	ee36 6b47 	vsub.f64	d6, d6, d7
 8006ba4:	4b62      	ldr	r3, [pc, #392]	@ (8006d30 <HAL_I2C_MemRxCpltCallback+0x9b8>)
 8006ba6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006baa:	ee07 3a90 	vmov	s15, r3
 8006bae:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006bb2:	ee36 7b47 	vsub.f64	d7, d6, d7
 8006bb6:	ed9f 6b5a 	vldr	d6, [pc, #360]	@ 8006d20 <HAL_I2C_MemRxCpltCallback+0x9a8>
 8006bba:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006bbe:	ed9f 6b5a 	vldr	d6, [pc, #360]	@ 8006d28 <HAL_I2C_MemRxCpltCallback+0x9b0>
 8006bc2:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006bc6:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006bca:	ee17 2a90 	vmov	r2, s15
 8006bce:	f644 631f 	movw	r3, #19999	@ 0x4e1f
 8006bd2:	429a      	cmp	r2, r3
 8006bd4:	d832      	bhi.n	8006c3c <HAL_I2C_MemRxCpltCallback+0x8c4>
 8006bd6:	4b56      	ldr	r3, [pc, #344]	@ (8006d30 <HAL_I2C_MemRxCpltCallback+0x9b8>)
 8006bd8:	885b      	ldrh	r3, [r3, #2]
 8006bda:	ee07 3a90 	vmov	s15, r3
 8006bde:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006be2:	ed9f 6b4d 	vldr	d6, [pc, #308]	@ 8006d18 <HAL_I2C_MemRxCpltCallback+0x9a0>
 8006be6:	ee27 6b06 	vmul.f64	d6, d7, d6
 8006bea:	4b51      	ldr	r3, [pc, #324]	@ (8006d30 <HAL_I2C_MemRxCpltCallback+0x9b8>)
 8006bec:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8006bf0:	ee07 3a90 	vmov	s15, r3
 8006bf4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006bf8:	ee36 6b47 	vsub.f64	d6, d6, d7
 8006bfc:	4b4c      	ldr	r3, [pc, #304]	@ (8006d30 <HAL_I2C_MemRxCpltCallback+0x9b8>)
 8006bfe:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006c02:	ee07 3a90 	vmov	s15, r3
 8006c06:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006c0a:	ee36 6b47 	vsub.f64	d6, d6, d7
 8006c0e:	4b48      	ldr	r3, [pc, #288]	@ (8006d30 <HAL_I2C_MemRxCpltCallback+0x9b8>)
 8006c10:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006c14:	ee07 3a90 	vmov	s15, r3
 8006c18:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006c1c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8006c20:	ed9f 6b3f 	vldr	d6, [pc, #252]	@ 8006d20 <HAL_I2C_MemRxCpltCallback+0x9a8>
 8006c24:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006c28:	ed9f 6b3f 	vldr	d6, [pc, #252]	@ 8006d28 <HAL_I2C_MemRxCpltCallback+0x9b0>
 8006c2c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006c30:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006c34:	ee17 3a90 	vmov	r3, s15
 8006c38:	b29b      	uxth	r3, r3
 8006c3a:	e001      	b.n	8006c40 <HAL_I2C_MemRxCpltCallback+0x8c8>
 8006c3c:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8006c40:	4a42      	ldr	r2, [pc, #264]	@ (8006d4c <HAL_I2C_MemRxCpltCallback+0x9d4>)
 8006c42:	8013      	strh	r3, [r2, #0]
			SPEED3 = (((uint32_t)((MYDRON.THRUST*0.7) + MYDRON.ROOL + MYDRON.PITCH - MYDRON.YAW + min_speed + 500)) < 20000) ? ((MYDRON.THRUST*0.7) + MYDRON.ROOL + MYDRON.PITCH - MYDRON.YAW + min_speed + 500) : 20000;//
 8006c44:	4b3a      	ldr	r3, [pc, #232]	@ (8006d30 <HAL_I2C_MemRxCpltCallback+0x9b8>)
 8006c46:	885b      	ldrh	r3, [r3, #2]
 8006c48:	ee07 3a90 	vmov	s15, r3
 8006c4c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006c50:	ed9f 6b31 	vldr	d6, [pc, #196]	@ 8006d18 <HAL_I2C_MemRxCpltCallback+0x9a0>
 8006c54:	ee27 6b06 	vmul.f64	d6, d7, d6
 8006c58:	4b35      	ldr	r3, [pc, #212]	@ (8006d30 <HAL_I2C_MemRxCpltCallback+0x9b8>)
 8006c5a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8006c5e:	ee07 3a90 	vmov	s15, r3
 8006c62:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006c66:	ee36 6b07 	vadd.f64	d6, d6, d7
 8006c6a:	4b31      	ldr	r3, [pc, #196]	@ (8006d30 <HAL_I2C_MemRxCpltCallback+0x9b8>)
 8006c6c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006c70:	ee07 3a90 	vmov	s15, r3
 8006c74:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006c78:	ee36 6b07 	vadd.f64	d6, d6, d7
 8006c7c:	4b2c      	ldr	r3, [pc, #176]	@ (8006d30 <HAL_I2C_MemRxCpltCallback+0x9b8>)
 8006c7e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006c82:	ee07 3a90 	vmov	s15, r3
 8006c86:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006c8a:	ee36 7b47 	vsub.f64	d7, d6, d7
 8006c8e:	ed9f 6b24 	vldr	d6, [pc, #144]	@ 8006d20 <HAL_I2C_MemRxCpltCallback+0x9a8>
 8006c92:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006c96:	ed9f 6b24 	vldr	d6, [pc, #144]	@ 8006d28 <HAL_I2C_MemRxCpltCallback+0x9b0>
 8006c9a:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006c9e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006ca2:	ee17 2a90 	vmov	r2, s15
 8006ca6:	f644 631f 	movw	r3, #19999	@ 0x4e1f
 8006caa:	429a      	cmp	r2, r3
 8006cac:	d850      	bhi.n	8006d50 <HAL_I2C_MemRxCpltCallback+0x9d8>
 8006cae:	4b20      	ldr	r3, [pc, #128]	@ (8006d30 <HAL_I2C_MemRxCpltCallback+0x9b8>)
 8006cb0:	885b      	ldrh	r3, [r3, #2]
 8006cb2:	ee07 3a90 	vmov	s15, r3
 8006cb6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006cba:	ed9f 6b17 	vldr	d6, [pc, #92]	@ 8006d18 <HAL_I2C_MemRxCpltCallback+0x9a0>
 8006cbe:	ee27 6b06 	vmul.f64	d6, d7, d6
 8006cc2:	4b1b      	ldr	r3, [pc, #108]	@ (8006d30 <HAL_I2C_MemRxCpltCallback+0x9b8>)
 8006cc4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8006cc8:	ee07 3a90 	vmov	s15, r3
 8006ccc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006cd0:	ee36 6b07 	vadd.f64	d6, d6, d7
 8006cd4:	4b16      	ldr	r3, [pc, #88]	@ (8006d30 <HAL_I2C_MemRxCpltCallback+0x9b8>)
 8006cd6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006cda:	ee07 3a90 	vmov	s15, r3
 8006cde:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006ce2:	ee36 6b07 	vadd.f64	d6, d6, d7
 8006ce6:	4b12      	ldr	r3, [pc, #72]	@ (8006d30 <HAL_I2C_MemRxCpltCallback+0x9b8>)
 8006ce8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006cec:	ee07 3a90 	vmov	s15, r3
 8006cf0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006cf4:	ee36 7b47 	vsub.f64	d7, d6, d7
 8006cf8:	ed9f 6b09 	vldr	d6, [pc, #36]	@ 8006d20 <HAL_I2C_MemRxCpltCallback+0x9a8>
 8006cfc:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006d00:	ed9f 6b09 	vldr	d6, [pc, #36]	@ 8006d28 <HAL_I2C_MemRxCpltCallback+0x9b0>
 8006d04:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006d08:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006d0c:	ee17 3a90 	vmov	r3, s15
 8006d10:	b29b      	uxth	r3, r3
 8006d12:	e01f      	b.n	8006d54 <HAL_I2C_MemRxCpltCallback+0x9dc>
 8006d14:	f3af 8000 	nop.w
 8006d18:	66666666 	.word	0x66666666
 8006d1c:	3fe66666 	.word	0x3fe66666
 8006d20:	00000000 	.word	0x00000000
 8006d24:	40c48200 	.word	0x40c48200
 8006d28:	00000000 	.word	0x00000000
 8006d2c:	407f4000 	.word	0x407f4000
 8006d30:	00000178 	.word	0x00000178
 8006d34:	0000405e 	.word	0x0000405e
 8006d38:	000040f0 	.word	0x000040f0
 8006d3c:	00004104 	.word	0x00004104
 8006d40:	00004078 	.word	0x00004078
 8006d44:	0000407c 	.word	0x0000407c
 8006d48:	0000418c 	.word	0x0000418c
 8006d4c:	0000418e 	.word	0x0000418e
 8006d50:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8006d54:	4a9a      	ldr	r2, [pc, #616]	@ (8006fc0 <HAL_I2C_MemRxCpltCallback+0xc48>)
 8006d56:	8013      	strh	r3, [r2, #0]
			SPEED4 = (((uint32_t)((MYDRON.THRUST*0.7) - MYDRON.ROOL + MYDRON.PITCH + MYDRON.YAW + min_speed + 500)) < 20000) ? ((MYDRON.THRUST*0.7) - MYDRON.ROOL + MYDRON.PITCH + MYDRON.YAW + min_speed + 500) : 20000;//
 8006d58:	4b9a      	ldr	r3, [pc, #616]	@ (8006fc4 <HAL_I2C_MemRxCpltCallback+0xc4c>)
 8006d5a:	885b      	ldrh	r3, [r3, #2]
 8006d5c:	ee07 3a90 	vmov	s15, r3
 8006d60:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006d64:	ed9f 6b8a 	vldr	d6, [pc, #552]	@ 8006f90 <HAL_I2C_MemRxCpltCallback+0xc18>
 8006d68:	ee27 6b06 	vmul.f64	d6, d7, d6
 8006d6c:	4b95      	ldr	r3, [pc, #596]	@ (8006fc4 <HAL_I2C_MemRxCpltCallback+0xc4c>)
 8006d6e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8006d72:	ee07 3a90 	vmov	s15, r3
 8006d76:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006d7a:	ee36 6b47 	vsub.f64	d6, d6, d7
 8006d7e:	4b91      	ldr	r3, [pc, #580]	@ (8006fc4 <HAL_I2C_MemRxCpltCallback+0xc4c>)
 8006d80:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006d84:	ee07 3a90 	vmov	s15, r3
 8006d88:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006d8c:	ee36 6b07 	vadd.f64	d6, d6, d7
 8006d90:	4b8c      	ldr	r3, [pc, #560]	@ (8006fc4 <HAL_I2C_MemRxCpltCallback+0xc4c>)
 8006d92:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006d96:	ee07 3a90 	vmov	s15, r3
 8006d9a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006d9e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8006da2:	ed9f 6b7d 	vldr	d6, [pc, #500]	@ 8006f98 <HAL_I2C_MemRxCpltCallback+0xc20>
 8006da6:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006daa:	ed9f 6b7d 	vldr	d6, [pc, #500]	@ 8006fa0 <HAL_I2C_MemRxCpltCallback+0xc28>
 8006dae:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006db2:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006db6:	ee17 2a90 	vmov	r2, s15
 8006dba:	f644 631f 	movw	r3, #19999	@ 0x4e1f
 8006dbe:	429a      	cmp	r2, r3
 8006dc0:	d832      	bhi.n	8006e28 <HAL_I2C_MemRxCpltCallback+0xab0>
 8006dc2:	4b80      	ldr	r3, [pc, #512]	@ (8006fc4 <HAL_I2C_MemRxCpltCallback+0xc4c>)
 8006dc4:	885b      	ldrh	r3, [r3, #2]
 8006dc6:	ee07 3a90 	vmov	s15, r3
 8006dca:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006dce:	ed9f 6b70 	vldr	d6, [pc, #448]	@ 8006f90 <HAL_I2C_MemRxCpltCallback+0xc18>
 8006dd2:	ee27 6b06 	vmul.f64	d6, d7, d6
 8006dd6:	4b7b      	ldr	r3, [pc, #492]	@ (8006fc4 <HAL_I2C_MemRxCpltCallback+0xc4c>)
 8006dd8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8006ddc:	ee07 3a90 	vmov	s15, r3
 8006de0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006de4:	ee36 6b47 	vsub.f64	d6, d6, d7
 8006de8:	4b76      	ldr	r3, [pc, #472]	@ (8006fc4 <HAL_I2C_MemRxCpltCallback+0xc4c>)
 8006dea:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006dee:	ee07 3a90 	vmov	s15, r3
 8006df2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006df6:	ee36 6b07 	vadd.f64	d6, d6, d7
 8006dfa:	4b72      	ldr	r3, [pc, #456]	@ (8006fc4 <HAL_I2C_MemRxCpltCallback+0xc4c>)
 8006dfc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006e00:	ee07 3a90 	vmov	s15, r3
 8006e04:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006e08:	ee36 7b07 	vadd.f64	d7, d6, d7
 8006e0c:	ed9f 6b62 	vldr	d6, [pc, #392]	@ 8006f98 <HAL_I2C_MemRxCpltCallback+0xc20>
 8006e10:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006e14:	ed9f 6b62 	vldr	d6, [pc, #392]	@ 8006fa0 <HAL_I2C_MemRxCpltCallback+0xc28>
 8006e18:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006e1c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006e20:	ee17 3a90 	vmov	r3, s15
 8006e24:	b29b      	uxth	r3, r3
 8006e26:	e001      	b.n	8006e2c <HAL_I2C_MemRxCpltCallback+0xab4>
 8006e28:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8006e2c:	4a66      	ldr	r2, [pc, #408]	@ (8006fc8 <HAL_I2C_MemRxCpltCallback+0xc50>)
 8006e2e:	8013      	strh	r3, [r2, #0]

			if(SPEED1 != OLD_SPEED1){
 8006e30:	4b66      	ldr	r3, [pc, #408]	@ (8006fcc <HAL_I2C_MemRxCpltCallback+0xc54>)
 8006e32:	881a      	ldrh	r2, [r3, #0]
 8006e34:	4b66      	ldr	r3, [pc, #408]	@ (8006fd0 <HAL_I2C_MemRxCpltCallback+0xc58>)
 8006e36:	881b      	ldrh	r3, [r3, #0]
 8006e38:	429a      	cmp	r2, r3
 8006e3a:	d004      	beq.n	8006e46 <HAL_I2C_MemRxCpltCallback+0xace>
				ESC_1_SPEED(SPEED1);
 8006e3c:	4b63      	ldr	r3, [pc, #396]	@ (8006fcc <HAL_I2C_MemRxCpltCallback+0xc54>)
 8006e3e:	881b      	ldrh	r3, [r3, #0]
 8006e40:	4618      	mov	r0, r3
 8006e42:	f7f9 fff7 	bl	8000e34 <ESC_1_SPEED>
			}
			if(SPEED2 != OLD_SPEED2){
 8006e46:	4b63      	ldr	r3, [pc, #396]	@ (8006fd4 <HAL_I2C_MemRxCpltCallback+0xc5c>)
 8006e48:	881a      	ldrh	r2, [r3, #0]
 8006e4a:	4b63      	ldr	r3, [pc, #396]	@ (8006fd8 <HAL_I2C_MemRxCpltCallback+0xc60>)
 8006e4c:	881b      	ldrh	r3, [r3, #0]
 8006e4e:	429a      	cmp	r2, r3
 8006e50:	d004      	beq.n	8006e5c <HAL_I2C_MemRxCpltCallback+0xae4>
				ESC_2_SPEED(SPEED2);
 8006e52:	4b60      	ldr	r3, [pc, #384]	@ (8006fd4 <HAL_I2C_MemRxCpltCallback+0xc5c>)
 8006e54:	881b      	ldrh	r3, [r3, #0]
 8006e56:	4618      	mov	r0, r3
 8006e58:	f7fa f80e 	bl	8000e78 <ESC_2_SPEED>
			}
			if(SPEED3 != OLD_SPEED3){
 8006e5c:	4b58      	ldr	r3, [pc, #352]	@ (8006fc0 <HAL_I2C_MemRxCpltCallback+0xc48>)
 8006e5e:	881a      	ldrh	r2, [r3, #0]
 8006e60:	4b5e      	ldr	r3, [pc, #376]	@ (8006fdc <HAL_I2C_MemRxCpltCallback+0xc64>)
 8006e62:	881b      	ldrh	r3, [r3, #0]
 8006e64:	429a      	cmp	r2, r3
 8006e66:	d004      	beq.n	8006e72 <HAL_I2C_MemRxCpltCallback+0xafa>
				ESC_3_SPEED(SPEED3);
 8006e68:	4b55      	ldr	r3, [pc, #340]	@ (8006fc0 <HAL_I2C_MemRxCpltCallback+0xc48>)
 8006e6a:	881b      	ldrh	r3, [r3, #0]
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	f7fa f825 	bl	8000ebc <ESC_3_SPEED>
			}
			if(SPEED4 != OLD_SPEED4){
 8006e72:	4b55      	ldr	r3, [pc, #340]	@ (8006fc8 <HAL_I2C_MemRxCpltCallback+0xc50>)
 8006e74:	881a      	ldrh	r2, [r3, #0]
 8006e76:	4b5a      	ldr	r3, [pc, #360]	@ (8006fe0 <HAL_I2C_MemRxCpltCallback+0xc68>)
 8006e78:	881b      	ldrh	r3, [r3, #0]
 8006e7a:	429a      	cmp	r2, r3
 8006e7c:	d004      	beq.n	8006e88 <HAL_I2C_MemRxCpltCallback+0xb10>
				ESC_4_SPEED(SPEED4);
 8006e7e:	4b52      	ldr	r3, [pc, #328]	@ (8006fc8 <HAL_I2C_MemRxCpltCallback+0xc50>)
 8006e80:	881b      	ldrh	r3, [r3, #0]
 8006e82:	4618      	mov	r0, r3
 8006e84:	f7fa f83c 	bl	8000f00 <ESC_4_SPEED>
			}

			OLD_SPEED1 = SPEED1;
 8006e88:	4b50      	ldr	r3, [pc, #320]	@ (8006fcc <HAL_I2C_MemRxCpltCallback+0xc54>)
 8006e8a:	881a      	ldrh	r2, [r3, #0]
 8006e8c:	4b50      	ldr	r3, [pc, #320]	@ (8006fd0 <HAL_I2C_MemRxCpltCallback+0xc58>)
 8006e8e:	801a      	strh	r2, [r3, #0]
			OLD_SPEED2 = SPEED2;
 8006e90:	4b50      	ldr	r3, [pc, #320]	@ (8006fd4 <HAL_I2C_MemRxCpltCallback+0xc5c>)
 8006e92:	881a      	ldrh	r2, [r3, #0]
 8006e94:	4b50      	ldr	r3, [pc, #320]	@ (8006fd8 <HAL_I2C_MemRxCpltCallback+0xc60>)
 8006e96:	801a      	strh	r2, [r3, #0]
			OLD_SPEED3 = SPEED3;
 8006e98:	4b49      	ldr	r3, [pc, #292]	@ (8006fc0 <HAL_I2C_MemRxCpltCallback+0xc48>)
 8006e9a:	881a      	ldrh	r2, [r3, #0]
 8006e9c:	4b4f      	ldr	r3, [pc, #316]	@ (8006fdc <HAL_I2C_MemRxCpltCallback+0xc64>)
 8006e9e:	801a      	strh	r2, [r3, #0]
			OLD_SPEED4 = SPEED4;
 8006ea0:	4b49      	ldr	r3, [pc, #292]	@ (8006fc8 <HAL_I2C_MemRxCpltCallback+0xc50>)
 8006ea2:	881a      	ldrh	r2, [r3, #0]
 8006ea4:	4b4e      	ldr	r3, [pc, #312]	@ (8006fe0 <HAL_I2C_MemRxCpltCallback+0xc68>)
 8006ea6:	801a      	strh	r2, [r3, #0]

			LED_G_0;
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006eae:	484d      	ldr	r0, [pc, #308]	@ (8006fe4 <HAL_I2C_MemRxCpltCallback+0xc6c>)
 8006eb0:	f007 fb08 	bl	800e4c4 <HAL_GPIO_WritePin>
	}
	if(HMC583L_IRQ == 1){
 8006eb4:	4b4c      	ldr	r3, [pc, #304]	@ (8006fe8 <HAL_I2C_MemRxCpltCallback+0xc70>)
 8006eb6:	781b      	ldrb	r3, [r3, #0]
 8006eb8:	2b01      	cmp	r3, #1
 8006eba:	d132      	bne.n	8006f22 <HAL_I2C_MemRxCpltCallback+0xbaa>
		HMC583L_IRQ = 0;
 8006ebc:	4b4a      	ldr	r3, [pc, #296]	@ (8006fe8 <HAL_I2C_MemRxCpltCallback+0xc70>)
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	701a      	strb	r2, [r3, #0]
		Mag_Z = (float)(HMC5883L_Get_Z_End_IT() - Mag_Offset_val);
 8006ec2:	f7fa f921 	bl	8001108 <HMC5883L_Get_Z_End_IT>
 8006ec6:	4603      	mov	r3, r0
 8006ec8:	461a      	mov	r2, r3
 8006eca:	4b48      	ldr	r3, [pc, #288]	@ (8006fec <HAL_I2C_MemRxCpltCallback+0xc74>)
 8006ecc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006ed0:	1ad3      	subs	r3, r2, r3
 8006ed2:	ee07 3a90 	vmov	s15, r3
 8006ed6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006eda:	4b45      	ldr	r3, [pc, #276]	@ (8006ff0 <HAL_I2C_MemRxCpltCallback+0xc78>)
 8006edc:	edc3 7a00 	vstr	s15, [r3]
		Mag_Z = (Mag_Z * (FDP_Mag_Z_FQ * 0.1) / (1 + (FDP_Mag_Z_FQ * 0.1))) + (Old_Mag_Z * (1 / (1 + (FDP_Mag_Z_FQ * 0.1)))); // 0.1 to looptime, co 100ms odczyt
 8006ee0:	4b43      	ldr	r3, [pc, #268]	@ (8006ff0 <HAL_I2C_MemRxCpltCallback+0xc78>)
 8006ee2:	edd3 7a00 	vldr	s15, [r3]
 8006ee6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8006eea:	ed9f 6b2f 	vldr	d6, [pc, #188]	@ 8006fa8 <HAL_I2C_MemRxCpltCallback+0xc30>
 8006eee:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006ef2:	ed9f 5b2f 	vldr	d5, [pc, #188]	@ 8006fb0 <HAL_I2C_MemRxCpltCallback+0xc38>
 8006ef6:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8006efa:	4b3e      	ldr	r3, [pc, #248]	@ (8006ff4 <HAL_I2C_MemRxCpltCallback+0xc7c>)
 8006efc:	edd3 7a00 	vldr	s15, [r3]
 8006f00:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8006f04:	ed9f 5b2c 	vldr	d5, [pc, #176]	@ 8006fb8 <HAL_I2C_MemRxCpltCallback+0xc40>
 8006f08:	ee27 7b05 	vmul.f64	d7, d7, d5
 8006f0c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8006f10:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8006f14:	4b36      	ldr	r3, [pc, #216]	@ (8006ff0 <HAL_I2C_MemRxCpltCallback+0xc78>)
 8006f16:	edc3 7a00 	vstr	s15, [r3]
		Old_Mag_Z = Mag_Z;
 8006f1a:	4b35      	ldr	r3, [pc, #212]	@ (8006ff0 <HAL_I2C_MemRxCpltCallback+0xc78>)
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	4a35      	ldr	r2, [pc, #212]	@ (8006ff4 <HAL_I2C_MemRxCpltCallback+0xc7c>)
 8006f20:	6013      	str	r3, [r2, #0]
	}
	if(BMP180_IRQ == 1){
 8006f22:	4b35      	ldr	r3, [pc, #212]	@ (8006ff8 <HAL_I2C_MemRxCpltCallback+0xc80>)
 8006f24:	781b      	ldrb	r3, [r3, #0]
 8006f26:	2b01      	cmp	r3, #1
 8006f28:	d113      	bne.n	8006f52 <HAL_I2C_MemRxCpltCallback+0xbda>
		temperature = BMP180_GET_temp_IT();
 8006f2a:	f7f9 fc31 	bl	8000790 <BMP180_GET_temp_IT>
 8006f2e:	4603      	mov	r3, r0
 8006f30:	461a      	mov	r2, r3
 8006f32:	4b32      	ldr	r3, [pc, #200]	@ (8006ffc <HAL_I2C_MemRxCpltCallback+0xc84>)
 8006f34:	601a      	str	r2, [r3, #0]
		temp = BMP180_GET_temp(temperature);
 8006f36:	4b31      	ldr	r3, [pc, #196]	@ (8006ffc <HAL_I2C_MemRxCpltCallback+0xc84>)
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	b29b      	uxth	r3, r3
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	f7f9 fd4b 	bl	80009d8 <BMP180_GET_temp>
 8006f42:	eef0 7a40 	vmov.f32	s15, s0
 8006f46:	4b2e      	ldr	r3, [pc, #184]	@ (8007000 <HAL_I2C_MemRxCpltCallback+0xc88>)
 8006f48:	edc3 7a00 	vstr	s15, [r3]
		BMP180_IRQ = 0;
 8006f4c:	4b2a      	ldr	r3, [pc, #168]	@ (8006ff8 <HAL_I2C_MemRxCpltCallback+0xc80>)
 8006f4e:	2200      	movs	r2, #0
 8006f50:	701a      	strb	r2, [r3, #0]
	}
	if(BMP180_IRQ == 2){
 8006f52:	4b29      	ldr	r3, [pc, #164]	@ (8006ff8 <HAL_I2C_MemRxCpltCallback+0xc80>)
 8006f54:	781b      	ldrb	r3, [r3, #0]
 8006f56:	2b02      	cmp	r3, #2
 8006f58:	d113      	bne.n	8006f82 <HAL_I2C_MemRxCpltCallback+0xc0a>
		pressure = BMP180_GET_pres_IT();
 8006f5a:	f7f9 fc2f 	bl	80007bc <BMP180_GET_pres_IT>
 8006f5e:	4603      	mov	r3, r0
 8006f60:	461a      	mov	r2, r3
 8006f62:	4b28      	ldr	r3, [pc, #160]	@ (8007004 <HAL_I2C_MemRxCpltCallback+0xc8c>)
 8006f64:	601a      	str	r2, [r3, #0]
		pres = BMP180_GET_pres(pressure);
 8006f66:	4b27      	ldr	r3, [pc, #156]	@ (8007004 <HAL_I2C_MemRxCpltCallback+0xc8c>)
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	b29b      	uxth	r3, r3
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	f7f9 fd8f 	bl	8000a90 <BMP180_GET_pres>
 8006f72:	eef0 7a40 	vmov.f32	s15, s0
 8006f76:	4b24      	ldr	r3, [pc, #144]	@ (8007008 <HAL_I2C_MemRxCpltCallback+0xc90>)
 8006f78:	edc3 7a00 	vstr	s15, [r3]
		BMP180_IRQ = 0;
 8006f7c:	4b1e      	ldr	r3, [pc, #120]	@ (8006ff8 <HAL_I2C_MemRxCpltCallback+0xc80>)
 8006f7e:	2200      	movs	r2, #0
 8006f80:	701a      	strb	r2, [r3, #0]
	}
}
 8006f82:	bf00      	nop
 8006f84:	3708      	adds	r7, #8
 8006f86:	46bd      	mov	sp, r7
 8006f88:	bd80      	pop	{r7, pc}
 8006f8a:	bf00      	nop
 8006f8c:	f3af 8000 	nop.w
 8006f90:	66666666 	.word	0x66666666
 8006f94:	3fe66666 	.word	0x3fe66666
 8006f98:	00000000 	.word	0x00000000
 8006f9c:	40c48200 	.word	0x40c48200
 8006fa0:	00000000 	.word	0x00000000
 8006fa4:	407f4000 	.word	0x407f4000
 8006fa8:	9999999a 	.word	0x9999999a
 8006fac:	3fc99999 	.word	0x3fc99999
 8006fb0:	33333333 	.word	0x33333333
 8006fb4:	3ff33333 	.word	0x3ff33333
 8006fb8:	aaaaaaab 	.word	0xaaaaaaab
 8006fbc:	3feaaaaa 	.word	0x3feaaaaa
 8006fc0:	00004190 	.word	0x00004190
 8006fc4:	00000178 	.word	0x00000178
 8006fc8:	00004192 	.word	0x00004192
 8006fcc:	0000418c 	.word	0x0000418c
 8006fd0:	00004194 	.word	0x00004194
 8006fd4:	0000418e 	.word	0x0000418e
 8006fd8:	00004196 	.word	0x00004196
 8006fdc:	00004198 	.word	0x00004198
 8006fe0:	0000419a 	.word	0x0000419a
 8006fe4:	58021000 	.word	0x58021000
 8006fe8:	000041d5 	.word	0x000041d5
 8006fec:	00000060 	.word	0x00000060
 8006ff0:	00000058 	.word	0x00000058
 8006ff4:	0000005c 	.word	0x0000005c
 8006ff8:	000041d6 	.word	0x000041d6
 8006ffc:	000000b8 	.word	0x000000b8
 8007000:	000000dc 	.word	0x000000dc
 8007004:	000000bc 	.word	0x000000bc
 8007008:	000000e0 	.word	0x000000e0

0800700c <convert_array_to_value>:


void convert_array_to_value(uint8_t arrayfrom[], int16_t *value , uint8_t rangebegin, uint8_t rangeend){
 800700c:	b580      	push	{r7, lr}
 800700e:	ed2d 8b04 	vpush	{d8-d9}
 8007012:	b086      	sub	sp, #24
 8007014:	af00      	add	r7, sp, #0
 8007016:	60f8      	str	r0, [r7, #12]
 8007018:	60b9      	str	r1, [r7, #8]
 800701a:	4611      	mov	r1, r2
 800701c:	461a      	mov	r2, r3
 800701e:	460b      	mov	r3, r1
 8007020:	71fb      	strb	r3, [r7, #7]
 8007022:	4613      	mov	r3, r2
 8007024:	71bb      	strb	r3, [r7, #6]
	*value = 0;
 8007026:	68bb      	ldr	r3, [r7, #8]
 8007028:	2200      	movs	r2, #0
 800702a:	801a      	strh	r2, [r3, #0]
	int range = rangeend - rangebegin;
 800702c:	79ba      	ldrb	r2, [r7, #6]
 800702e:	79fb      	ldrb	r3, [r7, #7]
 8007030:	1ad3      	subs	r3, r2, r3
 8007032:	613b      	str	r3, [r7, #16]

	for(int y = 0; y < range+1; y++){
 8007034:	2300      	movs	r3, #0
 8007036:	617b      	str	r3, [r7, #20]
 8007038:	e02e      	b.n	8007098 <convert_array_to_value+0x8c>
		*value = *value + arrayfrom[rangebegin+y]*pow(10, range - y);
 800703a:	68bb      	ldr	r3, [r7, #8]
 800703c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007040:	ee07 3a90 	vmov	s15, r3
 8007044:	eeb8 8be7 	vcvt.f64.s32	d8, s15
 8007048:	79fa      	ldrb	r2, [r7, #7]
 800704a:	697b      	ldr	r3, [r7, #20]
 800704c:	4413      	add	r3, r2
 800704e:	461a      	mov	r2, r3
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	4413      	add	r3, r2
 8007054:	781b      	ldrb	r3, [r3, #0]
 8007056:	ee07 3a90 	vmov	s15, r3
 800705a:	eeb8 9be7 	vcvt.f64.s32	d9, s15
 800705e:	693a      	ldr	r2, [r7, #16]
 8007060:	697b      	ldr	r3, [r7, #20]
 8007062:	1ad3      	subs	r3, r2, r3
 8007064:	ee07 3a90 	vmov	s15, r3
 8007068:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800706c:	eeb0 1b47 	vmov.f64	d1, d7
 8007070:	eeb2 0b04 	vmov.f64	d0, #36	@ 0x41200000  10.0
 8007074:	f016 ff40 	bl	801def8 <pow>
 8007078:	eeb0 7b40 	vmov.f64	d7, d0
 800707c:	ee29 7b07 	vmul.f64	d7, d9, d7
 8007080:	ee38 7b07 	vadd.f64	d7, d8, d7
 8007084:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8007088:	ee17 3a90 	vmov	r3, s15
 800708c:	b21a      	sxth	r2, r3
 800708e:	68bb      	ldr	r3, [r7, #8]
 8007090:	801a      	strh	r2, [r3, #0]
	for(int y = 0; y < range+1; y++){
 8007092:	697b      	ldr	r3, [r7, #20]
 8007094:	3301      	adds	r3, #1
 8007096:	617b      	str	r3, [r7, #20]
 8007098:	693a      	ldr	r2, [r7, #16]
 800709a:	697b      	ldr	r3, [r7, #20]
 800709c:	429a      	cmp	r2, r3
 800709e:	dacc      	bge.n	800703a <convert_array_to_value+0x2e>
	}

}
 80070a0:	bf00      	nop
 80070a2:	bf00      	nop
 80070a4:	3718      	adds	r7, #24
 80070a6:	46bd      	mov	sp, r7
 80070a8:	ecbd 8b04 	vpop	{d8-d9}
 80070ac:	bd80      	pop	{r7, pc}

080070ae <convert_value_to_array>:


void convert_value_to_array(int16_t value, uint8_t *arraytoputin, uint8_t rangebegin, uint8_t rangeend){
 80070ae:	b590      	push	{r4, r7, lr}
 80070b0:	b087      	sub	sp, #28
 80070b2:	af00      	add	r7, sp, #0
 80070b4:	6039      	str	r1, [r7, #0]
 80070b6:	4611      	mov	r1, r2
 80070b8:	461a      	mov	r2, r3
 80070ba:	4603      	mov	r3, r0
 80070bc:	80fb      	strh	r3, [r7, #6]
 80070be:	460b      	mov	r3, r1
 80070c0:	717b      	strb	r3, [r7, #5]
 80070c2:	4613      	mov	r3, r2
 80070c4:	713b      	strb	r3, [r7, #4]
	int x = 0;
 80070c6:	2300      	movs	r3, #0
 80070c8:	617b      	str	r3, [r7, #20]
	int loopnum = 0;
 80070ca:	2300      	movs	r3, #0
 80070cc:	613b      	str	r3, [r7, #16]
	int range = rangeend - rangebegin;
 80070ce:	793a      	ldrb	r2, [r7, #4]
 80070d0:	797b      	ldrb	r3, [r7, #5]
 80070d2:	1ad3      	subs	r3, r2, r3
 80070d4:	60bb      	str	r3, [r7, #8]
	for(int i = 0; i < range+1; i++){// 3
 80070d6:	2300      	movs	r3, #0
 80070d8:	60fb      	str	r3, [r7, #12]
 80070da:	e03e      	b.n	800715a <convert_value_to_array+0xac>
		while(value >= (uint16_t)pow(10,range - i)){
			if(value == 0){
 80070dc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d028      	beq.n	8007136 <convert_value_to_array+0x88>
				break;
			}
			value -= (uint16_t)potenga(10,range - i);
 80070e4:	68ba      	ldr	r2, [r7, #8]
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	1ad3      	subs	r3, r2, r3
 80070ea:	4619      	mov	r1, r3
 80070ec:	200a      	movs	r0, #10
 80070ee:	f000 f83d 	bl	800716c <potenga>
 80070f2:	4603      	mov	r3, r0
 80070f4:	b29b      	uxth	r3, r3
 80070f6:	88fa      	ldrh	r2, [r7, #6]
 80070f8:	1ad3      	subs	r3, r2, r3
 80070fa:	b29b      	uxth	r3, r3
 80070fc:	80fb      	strh	r3, [r7, #6]
			x++;
 80070fe:	697b      	ldr	r3, [r7, #20]
 8007100:	3301      	adds	r3, #1
 8007102:	617b      	str	r3, [r7, #20]
		while(value >= (uint16_t)pow(10,range - i)){
 8007104:	f9b7 4006 	ldrsh.w	r4, [r7, #6]
 8007108:	68ba      	ldr	r2, [r7, #8]
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	1ad3      	subs	r3, r2, r3
 800710e:	ee07 3a90 	vmov	s15, r3
 8007112:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8007116:	eeb0 1b47 	vmov.f64	d1, d7
 800711a:	eeb2 0b04 	vmov.f64	d0, #36	@ 0x41200000  10.0
 800711e:	f016 feeb 	bl	801def8 <pow>
 8007122:	eeb0 7b40 	vmov.f64	d7, d0
 8007126:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800712a:	ee17 3a90 	vmov	r3, s15
 800712e:	b29b      	uxth	r3, r3
 8007130:	429c      	cmp	r4, r3
 8007132:	dad3      	bge.n	80070dc <convert_value_to_array+0x2e>
 8007134:	e000      	b.n	8007138 <convert_value_to_array+0x8a>
				break;
 8007136:	bf00      	nop
		}
		arraytoputin[rangebegin+loopnum] = (uint8_t)x;
 8007138:	797a      	ldrb	r2, [r7, #5]
 800713a:	693b      	ldr	r3, [r7, #16]
 800713c:	4413      	add	r3, r2
 800713e:	461a      	mov	r2, r3
 8007140:	683b      	ldr	r3, [r7, #0]
 8007142:	4413      	add	r3, r2
 8007144:	697a      	ldr	r2, [r7, #20]
 8007146:	b2d2      	uxtb	r2, r2
 8007148:	701a      	strb	r2, [r3, #0]
		loopnum++;
 800714a:	693b      	ldr	r3, [r7, #16]
 800714c:	3301      	adds	r3, #1
 800714e:	613b      	str	r3, [r7, #16]
		x = 0;
 8007150:	2300      	movs	r3, #0
 8007152:	617b      	str	r3, [r7, #20]
	for(int i = 0; i < range+1; i++){// 3
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	3301      	adds	r3, #1
 8007158:	60fb      	str	r3, [r7, #12]
 800715a:	68ba      	ldr	r2, [r7, #8]
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	429a      	cmp	r2, r3
 8007160:	dad0      	bge.n	8007104 <convert_value_to_array+0x56>
	}
}
 8007162:	bf00      	nop
 8007164:	bf00      	nop
 8007166:	371c      	adds	r7, #28
 8007168:	46bd      	mov	sp, r7
 800716a:	bd90      	pop	{r4, r7, pc}

0800716c <potenga>:
uint32_t potenga(int a, int b){
 800716c:	b480      	push	{r7}
 800716e:	b087      	sub	sp, #28
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
 8007174:	6039      	str	r1, [r7, #0]
	int32_t c = a;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	60fb      	str	r3, [r7, #12]
	if(b == 0){
 800717a:	683b      	ldr	r3, [r7, #0]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d101      	bne.n	8007184 <potenga+0x18>
		return 1;
 8007180:	2301      	movs	r3, #1
 8007182:	e02d      	b.n	80071e0 <potenga+0x74>
	}
	if(b == 1){
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	2b01      	cmp	r3, #1
 8007188:	d101      	bne.n	800718e <potenga+0x22>
		return a;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	e028      	b.n	80071e0 <potenga+0x74>
	}
	if(b > 1){
 800718e:	683b      	ldr	r3, [r7, #0]
 8007190:	2b01      	cmp	r3, #1
 8007192:	dd10      	ble.n	80071b6 <potenga+0x4a>
			for(int i = 1; i < b; i++){
 8007194:	2301      	movs	r3, #1
 8007196:	617b      	str	r3, [r7, #20]
 8007198:	e007      	b.n	80071aa <potenga+0x3e>
			a = a*c;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	68fa      	ldr	r2, [r7, #12]
 800719e:	fb02 f303 	mul.w	r3, r2, r3
 80071a2:	607b      	str	r3, [r7, #4]
			for(int i = 1; i < b; i++){
 80071a4:	697b      	ldr	r3, [r7, #20]
 80071a6:	3301      	adds	r3, #1
 80071a8:	617b      	str	r3, [r7, #20]
 80071aa:	697a      	ldr	r2, [r7, #20]
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	429a      	cmp	r2, r3
 80071b0:	dbf3      	blt.n	800719a <potenga+0x2e>
		}
		return a;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	e014      	b.n	80071e0 <potenga+0x74>
	}
	if(b < 0){
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	da10      	bge.n	80071de <potenga+0x72>
		for(int i = 0; i < b; i++){
 80071bc:	2300      	movs	r3, #0
 80071be:	613b      	str	r3, [r7, #16]
 80071c0:	e007      	b.n	80071d2 <potenga+0x66>
			a = a/c;
 80071c2:	687a      	ldr	r2, [r7, #4]
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	fb92 f3f3 	sdiv	r3, r2, r3
 80071ca:	607b      	str	r3, [r7, #4]
		for(int i = 0; i < b; i++){
 80071cc:	693b      	ldr	r3, [r7, #16]
 80071ce:	3301      	adds	r3, #1
 80071d0:	613b      	str	r3, [r7, #16]
 80071d2:	693a      	ldr	r2, [r7, #16]
 80071d4:	683b      	ldr	r3, [r7, #0]
 80071d6:	429a      	cmp	r2, r3
 80071d8:	dbf3      	blt.n	80071c2 <potenga+0x56>
		}
		return a;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	e000      	b.n	80071e0 <potenga+0x74>
	}
	return a;
 80071de:	687b      	ldr	r3, [r7, #4]
}
 80071e0:	4618      	mov	r0, r3
 80071e2:	371c      	adds	r7, #28
 80071e4:	46bd      	mov	sp, r7
 80071e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ea:	4770      	bx	lr

080071ec <WartoscBezwgledna>:
void valswitch(uint8_t x){
	if(x == 2){
		x = 0;
	}
}
float WartoscBezwgledna(float a){
 80071ec:	b480      	push	{r7}
 80071ee:	b083      	sub	sp, #12
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	ed87 0a01 	vstr	s0, [r7, #4]
	if(a < 0){
 80071f6:	edd7 7a01 	vldr	s15, [r7, #4]
 80071fa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80071fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007202:	d504      	bpl.n	800720e <WartoscBezwgledna+0x22>
		return a*(-1);
 8007204:	edd7 7a01 	vldr	s15, [r7, #4]
 8007208:	eef1 7a67 	vneg.f32	s15, s15
 800720c:	e001      	b.n	8007212 <WartoscBezwgledna+0x26>
	}
	else{
		return a;
 800720e:	edd7 7a01 	vldr	s15, [r7, #4]
	}
}
 8007212:	eeb0 0a67 	vmov.f32	s0, s15
 8007216:	370c      	adds	r7, #12
 8007218:	46bd      	mov	sp, r7
 800721a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721e:	4770      	bx	lr

08007220 <RGB_LED_Set_color>:
    ITM_SendChar(*ptr++);
  }
  return len;
}

void RGB_LED_Set_color(uint8_t R, uint8_t G, uint8_t B){
 8007220:	b480      	push	{r7}
 8007222:	b083      	sub	sp, #12
 8007224:	af00      	add	r7, sp, #0
 8007226:	4603      	mov	r3, r0
 8007228:	71fb      	strb	r3, [r7, #7]
 800722a:	460b      	mov	r3, r1
 800722c:	71bb      	strb	r3, [r7, #6]
 800722e:	4613      	mov	r3, r2
 8007230:	717b      	strb	r3, [r7, #5]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, B);
 8007232:	4b09      	ldr	r3, [pc, #36]	@ (8007258 <RGB_LED_Set_color+0x38>)
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	797a      	ldrb	r2, [r7, #5]
 8007238:	639a      	str	r2, [r3, #56]	@ 0x38
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, R);
 800723a:	4b07      	ldr	r3, [pc, #28]	@ (8007258 <RGB_LED_Set_color+0x38>)
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	79fa      	ldrb	r2, [r7, #7]
 8007240:	63da      	str	r2, [r3, #60]	@ 0x3c
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, G);
 8007242:	4b05      	ldr	r3, [pc, #20]	@ (8007258 <RGB_LED_Set_color+0x38>)
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	79ba      	ldrb	r2, [r7, #6]
 8007248:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800724a:	bf00      	nop
 800724c:	370c      	adds	r7, #12
 800724e:	46bd      	mov	sp, r7
 8007250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007254:	4770      	bx	lr
 8007256:	bf00      	nop
 8007258:	24000380 	.word	0x24000380
 800725c:	00000000 	.word	0x00000000

08007260 <RGB_LED_For_BAT>:

void RGB_LED_For_BAT(uint8_t batval){
 8007260:	b580      	push	{r7, lr}
 8007262:	b082      	sub	sp, #8
 8007264:	af00      	add	r7, sp, #0
 8007266:	4603      	mov	r3, r0
 8007268:	71fb      	strb	r3, [r7, #7]
 * batval == 75	  r = 128 g = 128 b = 0
 * batval == 0    r = 255 g = 0 b = 0
 *
 *   r + g = 255
 */
	RGB_LED_Set_color((255 - ((float)batval*2.55)), ((float)batval*2.55), 0);
 800726a:	79fb      	ldrb	r3, [r7, #7]
 800726c:	ee07 3a90 	vmov	s15, r3
 8007270:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007274:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8007278:	ed9f 6b13 	vldr	d6, [pc, #76]	@ 80072c8 <RGB_LED_For_BAT+0x68>
 800727c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007280:	ed9f 6b13 	vldr	d6, [pc, #76]	@ 80072d0 <RGB_LED_For_BAT+0x70>
 8007284:	ee36 7b47 	vsub.f64	d7, d6, d7
 8007288:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800728c:	edc7 7a00 	vstr	s15, [r7]
 8007290:	783b      	ldrb	r3, [r7, #0]
 8007292:	b2db      	uxtb	r3, r3
 8007294:	79fa      	ldrb	r2, [r7, #7]
 8007296:	ee07 2a90 	vmov	s15, r2
 800729a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800729e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80072a2:	ed9f 6b09 	vldr	d6, [pc, #36]	@ 80072c8 <RGB_LED_For_BAT+0x68>
 80072a6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80072aa:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80072ae:	edc7 7a00 	vstr	s15, [r7]
 80072b2:	783a      	ldrb	r2, [r7, #0]
 80072b4:	b2d1      	uxtb	r1, r2
 80072b6:	2200      	movs	r2, #0
 80072b8:	4618      	mov	r0, r3
 80072ba:	f7ff ffb1 	bl	8007220 <RGB_LED_Set_color>
}
 80072be:	bf00      	nop
 80072c0:	3708      	adds	r7, #8
 80072c2:	46bd      	mov	sp, r7
 80072c4:	bd80      	pop	{r7, pc}
 80072c6:	bf00      	nop
 80072c8:	66666666 	.word	0x66666666
 80072cc:	40046666 	.word	0x40046666
 80072d0:	00000000 	.word	0x00000000
 80072d4:	406fe000 	.word	0x406fe000

080072d8 <convert_value_to_array2>:
 *	[0] -
 *	[1] 2
 *	[2] 2
 */

void convert_value_to_array2(int16_t value, uint8_t *arraytoputin, uint8_t rangebegin, uint8_t rangeend){
 80072d8:	b590      	push	{r4, r7, lr}
 80072da:	b087      	sub	sp, #28
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6039      	str	r1, [r7, #0]
 80072e0:	4611      	mov	r1, r2
 80072e2:	461a      	mov	r2, r3
 80072e4:	4603      	mov	r3, r0
 80072e6:	80fb      	strh	r3, [r7, #6]
 80072e8:	460b      	mov	r3, r1
 80072ea:	717b      	strb	r3, [r7, #5]
 80072ec:	4613      	mov	r3, r2
 80072ee:	713b      	strb	r3, [r7, #4]
	int x = 0;
 80072f0:	2300      	movs	r3, #0
 80072f2:	617b      	str	r3, [r7, #20]
	int loopnum = 0;
 80072f4:	2300      	movs	r3, #0
 80072f6:	613b      	str	r3, [r7, #16]
	int range = rangeend - rangebegin;
 80072f8:	793a      	ldrb	r2, [r7, #4]
 80072fa:	797b      	ldrb	r3, [r7, #5]
 80072fc:	1ad3      	subs	r3, r2, r3
 80072fe:	60bb      	str	r3, [r7, #8]

	if(value < 0){
 8007300:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007304:	2b00      	cmp	r3, #0
 8007306:	da04      	bge.n	8007312 <convert_value_to_array2+0x3a>
		arraytoputin[rangebegin] = '-';
 8007308:	797b      	ldrb	r3, [r7, #5]
 800730a:	683a      	ldr	r2, [r7, #0]
 800730c:	4413      	add	r3, r2
 800730e:	222d      	movs	r2, #45	@ 0x2d
 8007310:	701a      	strb	r2, [r3, #0]
	}

	for(int i = 1; i < range+1; i++){// 3
 8007312:	2301      	movs	r3, #1
 8007314:	60fb      	str	r3, [r7, #12]
 8007316:	e035      	b.n	8007384 <convert_value_to_array2+0xac>
		while(value >= (uint16_t)potenga(10,range - i)){
			if(value == 0){
 8007318:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d01d      	beq.n	800735c <convert_value_to_array2+0x84>
				break;
			}
			value -= (uint16_t)potenga(10,range - i);
 8007320:	68ba      	ldr	r2, [r7, #8]
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	1ad3      	subs	r3, r2, r3
 8007326:	4619      	mov	r1, r3
 8007328:	200a      	movs	r0, #10
 800732a:	f7ff ff1f 	bl	800716c <potenga>
 800732e:	4603      	mov	r3, r0
 8007330:	b29b      	uxth	r3, r3
 8007332:	88fa      	ldrh	r2, [r7, #6]
 8007334:	1ad3      	subs	r3, r2, r3
 8007336:	b29b      	uxth	r3, r3
 8007338:	80fb      	strh	r3, [r7, #6]
			x++;
 800733a:	697b      	ldr	r3, [r7, #20]
 800733c:	3301      	adds	r3, #1
 800733e:	617b      	str	r3, [r7, #20]
		while(value >= (uint16_t)potenga(10,range - i)){
 8007340:	f9b7 4006 	ldrsh.w	r4, [r7, #6]
 8007344:	68ba      	ldr	r2, [r7, #8]
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	1ad3      	subs	r3, r2, r3
 800734a:	4619      	mov	r1, r3
 800734c:	200a      	movs	r0, #10
 800734e:	f7ff ff0d 	bl	800716c <potenga>
 8007352:	4603      	mov	r3, r0
 8007354:	b29b      	uxth	r3, r3
 8007356:	429c      	cmp	r4, r3
 8007358:	dade      	bge.n	8007318 <convert_value_to_array2+0x40>
 800735a:	e000      	b.n	800735e <convert_value_to_array2+0x86>
				break;
 800735c:	bf00      	nop
		}
		arraytoputin[rangebegin + loopnum] = (uint8_t)x + 48;//zamiana na ASCII
 800735e:	697b      	ldr	r3, [r7, #20]
 8007360:	b2da      	uxtb	r2, r3
 8007362:	7979      	ldrb	r1, [r7, #5]
 8007364:	693b      	ldr	r3, [r7, #16]
 8007366:	440b      	add	r3, r1
 8007368:	4619      	mov	r1, r3
 800736a:	683b      	ldr	r3, [r7, #0]
 800736c:	440b      	add	r3, r1
 800736e:	3230      	adds	r2, #48	@ 0x30
 8007370:	b2d2      	uxtb	r2, r2
 8007372:	701a      	strb	r2, [r3, #0]
		loopnum++;
 8007374:	693b      	ldr	r3, [r7, #16]
 8007376:	3301      	adds	r3, #1
 8007378:	613b      	str	r3, [r7, #16]
		x = 0;
 800737a:	2300      	movs	r3, #0
 800737c:	617b      	str	r3, [r7, #20]
	for(int i = 1; i < range+1; i++){// 3
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	3301      	adds	r3, #1
 8007382:	60fb      	str	r3, [r7, #12]
 8007384:	68ba      	ldr	r2, [r7, #8]
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	429a      	cmp	r2, r3
 800738a:	dad9      	bge.n	8007340 <convert_value_to_array2+0x68>
	}
}
 800738c:	bf00      	nop
 800738e:	bf00      	nop
 8007390:	371c      	adds	r7, #28
 8007392:	46bd      	mov	sp, r7
 8007394:	bd90      	pop	{r4, r7, pc}

08007396 <convert_value_to_array3>:
 *	1000.1
 *
 *	range = 5
 *
 */
void convert_value_to_array3(float value, uint8_t *arraytoputin, uint8_t rangebegin, uint8_t rangeend){
 8007396:	b580      	push	{r7, lr}
 8007398:	ed2d 8b02 	vpush	{d8}
 800739c:	b08c      	sub	sp, #48	@ 0x30
 800739e:	af00      	add	r7, sp, #0
 80073a0:	ed87 0a03 	vstr	s0, [r7, #12]
 80073a4:	60b8      	str	r0, [r7, #8]
 80073a6:	460b      	mov	r3, r1
 80073a8:	71fb      	strb	r3, [r7, #7]
 80073aa:	4613      	mov	r3, r2
 80073ac:	71bb      	strb	r3, [r7, #6]
	int x = 0;
 80073ae:	2300      	movs	r3, #0
 80073b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	int loopnum = 0;
 80073b2:	2300      	movs	r3, #0
 80073b4:	62bb      	str	r3, [r7, #40]	@ 0x28
	int range = rangeend - rangebegin;
 80073b6:	79ba      	ldrb	r2, [r7, #6]
 80073b8:	79fb      	ldrb	r3, [r7, #7]
 80073ba:	1ad3      	subs	r3, r2, r3
 80073bc:	617b      	str	r3, [r7, #20]
	int power_of_value = 0;
 80073be:	2300      	movs	r3, #0
 80073c0:	627b      	str	r3, [r7, #36]	@ 0x24
	float a;
	int kropka;


	if(value < 0){
 80073c2:	edd7 7a03 	vldr	s15, [r7, #12]
 80073c6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80073ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073ce:	d50a      	bpl.n	80073e6 <convert_value_to_array3+0x50>
		arraytoputin[rangebegin] = '-';
 80073d0:	79fb      	ldrb	r3, [r7, #7]
 80073d2:	68ba      	ldr	r2, [r7, #8]
 80073d4:	4413      	add	r3, r2
 80073d6:	222d      	movs	r2, #45	@ 0x2d
 80073d8:	701a      	strb	r2, [r3, #0]
		value = value * -1;
 80073da:	edd7 7a03 	vldr	s15, [r7, #12]
 80073de:	eef1 7a67 	vneg.f32	s15, s15
 80073e2:	edc7 7a03 	vstr	s15, [r7, #12]
	}

	//sprawdzenie wagi pierwsazej liczby znaczącej
	//potrzebne do dzielenia
	for(int i = 1; i < range*2; i++){
 80073e6:	2301      	movs	r3, #1
 80073e8:	61fb      	str	r3, [r7, #28]
 80073ea:	e021      	b.n	8007430 <convert_value_to_array3+0x9a>
		a = pow(10,range - i);
 80073ec:	697a      	ldr	r2, [r7, #20]
 80073ee:	69fb      	ldr	r3, [r7, #28]
 80073f0:	1ad3      	subs	r3, r2, r3
 80073f2:	ee07 3a90 	vmov	s15, r3
 80073f6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80073fa:	eeb0 1b47 	vmov.f64	d1, d7
 80073fe:	eeb2 0b04 	vmov.f64	d0, #36	@ 0x41200000  10.0
 8007402:	f016 fd79 	bl	801def8 <pow>
 8007406:	eeb0 7b40 	vmov.f64	d7, d0
 800740a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800740e:	edc7 7a04 	vstr	s15, [r7, #16]
		if(value >= a){
 8007412:	ed97 7a03 	vldr	s14, [r7, #12]
 8007416:	edd7 7a04 	vldr	s15, [r7, #16]
 800741a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800741e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007422:	da0b      	bge.n	800743c <convert_value_to_array3+0xa6>
			break;
		}
		power_of_value++;
 8007424:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007426:	3301      	adds	r3, #1
 8007428:	627b      	str	r3, [r7, #36]	@ 0x24
	for(int i = 1; i < range*2; i++){
 800742a:	69fb      	ldr	r3, [r7, #28]
 800742c:	3301      	adds	r3, #1
 800742e:	61fb      	str	r3, [r7, #28]
 8007430:	697b      	ldr	r3, [r7, #20]
 8007432:	005b      	lsls	r3, r3, #1
 8007434:	69fa      	ldr	r2, [r7, #28]
 8007436:	429a      	cmp	r2, r3
 8007438:	dbd8      	blt.n	80073ec <convert_value_to_array3+0x56>
 800743a:	e000      	b.n	800743e <convert_value_to_array3+0xa8>
			break;
 800743c:	bf00      	nop
	}

	power_of_value = range - power_of_value - 1;
 800743e:	697a      	ldr	r2, [r7, #20]
 8007440:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007442:	1ad3      	subs	r3, r2, r3
 8007444:	3b01      	subs	r3, #1
 8007446:	627b      	str	r3, [r7, #36]	@ 0x24

	//		Sprawdzic gdzie jest kropka 0.00123 123.01 12.12
	if(power_of_value <= 0){
 8007448:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800744a:	2b00      	cmp	r3, #0
 800744c:	dc07      	bgt.n	800745e <convert_value_to_array3+0xc8>
		arraytoputin[rangebegin + 1] = '.';
 800744e:	79fb      	ldrb	r3, [r7, #7]
 8007450:	3301      	adds	r3, #1
 8007452:	68ba      	ldr	r2, [r7, #8]
 8007454:	4413      	add	r3, r2
 8007456:	222e      	movs	r2, #46	@ 0x2e
 8007458:	701a      	strb	r2, [r3, #0]
		kropka = 1;
 800745a:	2301      	movs	r3, #1
 800745c:	623b      	str	r3, [r7, #32]
	}
	if(power_of_value > 0){
 800745e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007460:	2b00      	cmp	r3, #0
 8007462:	dd0a      	ble.n	800747a <convert_value_to_array3+0xe4>
		arraytoputin[rangebegin + power_of_value + 1] = '.';
 8007464:	79fa      	ldrb	r2, [r7, #7]
 8007466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007468:	4413      	add	r3, r2
 800746a:	3301      	adds	r3, #1
 800746c:	68ba      	ldr	r2, [r7, #8]
 800746e:	4413      	add	r3, r2
 8007470:	222e      	movs	r2, #46	@ 0x2e
 8007472:	701a      	strb	r2, [r3, #0]
		kropka = power_of_value + 1;
 8007474:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007476:	3301      	adds	r3, #1
 8007478:	623b      	str	r3, [r7, #32]
	}


	value = value*pow(10,(range-1) - power_of_value);
 800747a:	edd7 7a03 	vldr	s15, [r7, #12]
 800747e:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8007482:	697b      	ldr	r3, [r7, #20]
 8007484:	1e5a      	subs	r2, r3, #1
 8007486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007488:	1ad3      	subs	r3, r2, r3
 800748a:	ee07 3a90 	vmov	s15, r3
 800748e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8007492:	eeb0 1b47 	vmov.f64	d1, d7
 8007496:	eeb2 0b04 	vmov.f64	d0, #36	@ 0x41200000  10.0
 800749a:	f016 fd2d 	bl	801def8 <pow>
 800749e:	eeb0 7b40 	vmov.f64	d7, d0
 80074a2:	ee28 7b07 	vmul.f64	d7, d8, d7
 80074a6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80074aa:	edc7 7a03 	vstr	s15, [r7, #12]


	for(int i = 0; i < range-2; i++){// range-2 poniewaz jest znak kropki i ewentualny znak minusa na początku
 80074ae:	2300      	movs	r3, #0
 80074b0:	61bb      	str	r3, [r7, #24]
 80074b2:	e05f      	b.n	8007574 <convert_value_to_array3+0x1de>
		while(value >= (uint16_t)pow(10,(range-1) - i)){
			if(value <= 0){
 80074b4:	edd7 7a03 	vldr	s15, [r7, #12]
 80074b8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80074bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074c0:	d93d      	bls.n	800753e <convert_value_to_array3+0x1a8>
				break;
			}
			value = value - pow(10,(range-1) - i);
 80074c2:	edd7 7a03 	vldr	s15, [r7, #12]
 80074c6:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 80074ca:	697b      	ldr	r3, [r7, #20]
 80074cc:	1e5a      	subs	r2, r3, #1
 80074ce:	69bb      	ldr	r3, [r7, #24]
 80074d0:	1ad3      	subs	r3, r2, r3
 80074d2:	ee07 3a90 	vmov	s15, r3
 80074d6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80074da:	eeb0 1b47 	vmov.f64	d1, d7
 80074de:	eeb2 0b04 	vmov.f64	d0, #36	@ 0x41200000  10.0
 80074e2:	f016 fd09 	bl	801def8 <pow>
 80074e6:	eeb0 7b40 	vmov.f64	d7, d0
 80074ea:	ee38 7b47 	vsub.f64	d7, d8, d7
 80074ee:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80074f2:	edc7 7a03 	vstr	s15, [r7, #12]
			x++;
 80074f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074f8:	3301      	adds	r3, #1
 80074fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
		while(value >= (uint16_t)pow(10,(range-1) - i)){
 80074fc:	697b      	ldr	r3, [r7, #20]
 80074fe:	1e5a      	subs	r2, r3, #1
 8007500:	69bb      	ldr	r3, [r7, #24]
 8007502:	1ad3      	subs	r3, r2, r3
 8007504:	ee07 3a90 	vmov	s15, r3
 8007508:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800750c:	eeb0 1b47 	vmov.f64	d1, d7
 8007510:	eeb2 0b04 	vmov.f64	d0, #36	@ 0x41200000  10.0
 8007514:	f016 fcf0 	bl	801def8 <pow>
 8007518:	eeb0 7b40 	vmov.f64	d7, d0
 800751c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8007520:	ee17 3a90 	vmov	r3, s15
 8007524:	b29b      	uxth	r3, r3
 8007526:	ee07 3a90 	vmov	s15, r3
 800752a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800752e:	ed97 7a03 	vldr	s14, [r7, #12]
 8007532:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007536:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800753a:	dabb      	bge.n	80074b4 <convert_value_to_array3+0x11e>
 800753c:	e000      	b.n	8007540 <convert_value_to_array3+0x1aa>
				break;
 800753e:	bf00      	nop
		}

        if(loopnum == kropka){
 8007540:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007542:	6a3b      	ldr	r3, [r7, #32]
 8007544:	429a      	cmp	r2, r3
 8007546:	d102      	bne.n	800754e <convert_value_to_array3+0x1b8>
            loopnum++;
 8007548:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800754a:	3301      	adds	r3, #1
 800754c:	62bb      	str	r3, [r7, #40]	@ 0x28
        }
		arraytoputin[rangebegin + loopnum] = (uint8_t)x + 48;//zamiana na ASCII
 800754e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007550:	b2da      	uxtb	r2, r3
 8007552:	79f9      	ldrb	r1, [r7, #7]
 8007554:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007556:	440b      	add	r3, r1
 8007558:	4619      	mov	r1, r3
 800755a:	68bb      	ldr	r3, [r7, #8]
 800755c:	440b      	add	r3, r1
 800755e:	3230      	adds	r2, #48	@ 0x30
 8007560:	b2d2      	uxtb	r2, r2
 8007562:	701a      	strb	r2, [r3, #0]
		loopnum++;
 8007564:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007566:	3301      	adds	r3, #1
 8007568:	62bb      	str	r3, [r7, #40]	@ 0x28
		x = 0;
 800756a:	2300      	movs	r3, #0
 800756c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	for(int i = 0; i < range-2; i++){// range-2 poniewaz jest znak kropki i ewentualny znak minusa na początku
 800756e:	69bb      	ldr	r3, [r7, #24]
 8007570:	3301      	adds	r3, #1
 8007572:	61bb      	str	r3, [r7, #24]
 8007574:	697b      	ldr	r3, [r7, #20]
 8007576:	3b02      	subs	r3, #2
 8007578:	69ba      	ldr	r2, [r7, #24]
 800757a:	429a      	cmp	r2, r3
 800757c:	dbbe      	blt.n	80074fc <convert_value_to_array3+0x166>
	}
}
 800757e:	bf00      	nop
 8007580:	bf00      	nop
 8007582:	3730      	adds	r7, #48	@ 0x30
 8007584:	46bd      	mov	sp, r7
 8007586:	ecbd 8b02 	vpop	{d8}
 800758a:	bd80      	pop	{r7, pc}

0800758c <uSD_Card_SendData_To_Buffer>:
 *
 * Numer pentli 7 8
 *
 * Mag_Z 3
 */
void uSD_Card_SendData_To_Buffer(uint32_t a){
 800758c:	b580      	push	{r7, lr}
 800758e:	b082      	sub	sp, #8
 8007590:	af00      	add	r7, sp, #0
 8007592:	6078      	str	r0, [r7, #4]
	convert_value_to_array2(Mainloop_Number, DataToSendBuffer, (0 + (128*a)), (8 + (128*a)));
 8007594:	4ba6      	ldr	r3, [pc, #664]	@ (8007830 <uSD_Card_SendData_To_Buffer+0x2a4>)
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	b218      	sxth	r0, r3
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	b2db      	uxtb	r3, r3
 800759e:	01db      	lsls	r3, r3, #7
 80075a0:	b2da      	uxtb	r2, r3
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	b2db      	uxtb	r3, r3
 80075a6:	01db      	lsls	r3, r3, #7
 80075a8:	b2db      	uxtb	r3, r3
 80075aa:	3308      	adds	r3, #8
 80075ac:	b2db      	uxtb	r3, r3
 80075ae:	49a1      	ldr	r1, [pc, #644]	@ (8007834 <uSD_Card_SendData_To_Buffer+0x2a8>)
 80075b0:	f7ff fe92 	bl	80072d8 <convert_value_to_array2>
	 DataToSendBuffer[(8 + (128*a))] = ' ';
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	01db      	lsls	r3, r3, #7
 80075b8:	3308      	adds	r3, #8
 80075ba:	4a9e      	ldr	r2, [pc, #632]	@ (8007834 <uSD_Card_SendData_To_Buffer+0x2a8>)
 80075bc:	2120      	movs	r1, #32
 80075be:	54d1      	strb	r1, [r2, r3]


	convert_value_to_array2(SPEED1, DataToSendBuffer, (9 + (128*a)), (15 + (128*a)));
 80075c0:	4b9d      	ldr	r3, [pc, #628]	@ (8007838 <uSD_Card_SendData_To_Buffer+0x2ac>)
 80075c2:	881b      	ldrh	r3, [r3, #0]
 80075c4:	b218      	sxth	r0, r3
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	b2db      	uxtb	r3, r3
 80075ca:	01db      	lsls	r3, r3, #7
 80075cc:	b2db      	uxtb	r3, r3
 80075ce:	3309      	adds	r3, #9
 80075d0:	b2da      	uxtb	r2, r3
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	b2db      	uxtb	r3, r3
 80075d6:	01db      	lsls	r3, r3, #7
 80075d8:	b2db      	uxtb	r3, r3
 80075da:	330f      	adds	r3, #15
 80075dc:	b2db      	uxtb	r3, r3
 80075de:	4995      	ldr	r1, [pc, #596]	@ (8007834 <uSD_Card_SendData_To_Buffer+0x2a8>)
 80075e0:	f7ff fe7a 	bl	80072d8 <convert_value_to_array2>
	 DataToSendBuffer[(15 + (128*a))] = ' ';
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	01db      	lsls	r3, r3, #7
 80075e8:	330f      	adds	r3, #15
 80075ea:	4a92      	ldr	r2, [pc, #584]	@ (8007834 <uSD_Card_SendData_To_Buffer+0x2a8>)
 80075ec:	2120      	movs	r1, #32
 80075ee:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array2(SPEED2, DataToSendBuffer, (16 + (128*a)), (22 + (128*a)));
 80075f0:	4b92      	ldr	r3, [pc, #584]	@ (800783c <uSD_Card_SendData_To_Buffer+0x2b0>)
 80075f2:	881b      	ldrh	r3, [r3, #0]
 80075f4:	b218      	sxth	r0, r3
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	b2db      	uxtb	r3, r3
 80075fa:	01db      	lsls	r3, r3, #7
 80075fc:	b2db      	uxtb	r3, r3
 80075fe:	3310      	adds	r3, #16
 8007600:	b2da      	uxtb	r2, r3
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	b2db      	uxtb	r3, r3
 8007606:	01db      	lsls	r3, r3, #7
 8007608:	b2db      	uxtb	r3, r3
 800760a:	3316      	adds	r3, #22
 800760c:	b2db      	uxtb	r3, r3
 800760e:	4989      	ldr	r1, [pc, #548]	@ (8007834 <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007610:	f7ff fe62 	bl	80072d8 <convert_value_to_array2>
	 DataToSendBuffer[(22 + (128*a))] = ' ';
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	01db      	lsls	r3, r3, #7
 8007618:	3316      	adds	r3, #22
 800761a:	4a86      	ldr	r2, [pc, #536]	@ (8007834 <uSD_Card_SendData_To_Buffer+0x2a8>)
 800761c:	2120      	movs	r1, #32
 800761e:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array2(SPEED3, DataToSendBuffer, (23 + (128*a)), (29 + (128*a)));
 8007620:	4b87      	ldr	r3, [pc, #540]	@ (8007840 <uSD_Card_SendData_To_Buffer+0x2b4>)
 8007622:	881b      	ldrh	r3, [r3, #0]
 8007624:	b218      	sxth	r0, r3
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	b2db      	uxtb	r3, r3
 800762a:	01db      	lsls	r3, r3, #7
 800762c:	b2db      	uxtb	r3, r3
 800762e:	3317      	adds	r3, #23
 8007630:	b2da      	uxtb	r2, r3
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	b2db      	uxtb	r3, r3
 8007636:	01db      	lsls	r3, r3, #7
 8007638:	b2db      	uxtb	r3, r3
 800763a:	331d      	adds	r3, #29
 800763c:	b2db      	uxtb	r3, r3
 800763e:	497d      	ldr	r1, [pc, #500]	@ (8007834 <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007640:	f7ff fe4a 	bl	80072d8 <convert_value_to_array2>
	 DataToSendBuffer[(29 + (128*a))] = ' ';
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	01db      	lsls	r3, r3, #7
 8007648:	331d      	adds	r3, #29
 800764a:	4a7a      	ldr	r2, [pc, #488]	@ (8007834 <uSD_Card_SendData_To_Buffer+0x2a8>)
 800764c:	2120      	movs	r1, #32
 800764e:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array2(SPEED4, DataToSendBuffer, (30 + (128*a)), (36 + (128*a)));
 8007650:	4b7c      	ldr	r3, [pc, #496]	@ (8007844 <uSD_Card_SendData_To_Buffer+0x2b8>)
 8007652:	881b      	ldrh	r3, [r3, #0]
 8007654:	b218      	sxth	r0, r3
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	b2db      	uxtb	r3, r3
 800765a:	01db      	lsls	r3, r3, #7
 800765c:	b2db      	uxtb	r3, r3
 800765e:	331e      	adds	r3, #30
 8007660:	b2da      	uxtb	r2, r3
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	b2db      	uxtb	r3, r3
 8007666:	01db      	lsls	r3, r3, #7
 8007668:	b2db      	uxtb	r3, r3
 800766a:	3324      	adds	r3, #36	@ 0x24
 800766c:	b2db      	uxtb	r3, r3
 800766e:	4971      	ldr	r1, [pc, #452]	@ (8007834 <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007670:	f7ff fe32 	bl	80072d8 <convert_value_to_array2>
	 DataToSendBuffer[(36 + (128*a))] = ' ';
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	01db      	lsls	r3, r3, #7
 8007678:	3324      	adds	r3, #36	@ 0x24
 800767a:	4a6e      	ldr	r2, [pc, #440]	@ (8007834 <uSD_Card_SendData_To_Buffer+0x2a8>)
 800767c:	2120      	movs	r1, #32
 800767e:	54d1      	strb	r1, [r2, r3]

	convert_value_to_array3(wanted_rool, DataToSendBuffer, (37 + (128*a)), (45 + (128*a)));
 8007680:	4b71      	ldr	r3, [pc, #452]	@ (8007848 <uSD_Card_SendData_To_Buffer+0x2bc>)
 8007682:	edd3 7a00 	vldr	s15, [r3]
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	b2db      	uxtb	r3, r3
 800768a:	01db      	lsls	r3, r3, #7
 800768c:	b2db      	uxtb	r3, r3
 800768e:	3325      	adds	r3, #37	@ 0x25
 8007690:	b2d9      	uxtb	r1, r3
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	b2db      	uxtb	r3, r3
 8007696:	01db      	lsls	r3, r3, #7
 8007698:	b2db      	uxtb	r3, r3
 800769a:	332d      	adds	r3, #45	@ 0x2d
 800769c:	b2db      	uxtb	r3, r3
 800769e:	461a      	mov	r2, r3
 80076a0:	4864      	ldr	r0, [pc, #400]	@ (8007834 <uSD_Card_SendData_To_Buffer+0x2a8>)
 80076a2:	eeb0 0a67 	vmov.f32	s0, s15
 80076a6:	f7ff fe76 	bl	8007396 <convert_value_to_array3>
	 DataToSendBuffer[(45 + (128*a))] = ' ';
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	01db      	lsls	r3, r3, #7
 80076ae:	332d      	adds	r3, #45	@ 0x2d
 80076b0:	4a60      	ldr	r2, [pc, #384]	@ (8007834 <uSD_Card_SendData_To_Buffer+0x2a8>)
 80076b2:	2120      	movs	r1, #32
 80076b4:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array3(wanted_pitch, DataToSendBuffer, (46 + (128*a)), (54 + (128*a)));
 80076b6:	4b65      	ldr	r3, [pc, #404]	@ (800784c <uSD_Card_SendData_To_Buffer+0x2c0>)
 80076b8:	edd3 7a00 	vldr	s15, [r3]
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	b2db      	uxtb	r3, r3
 80076c0:	01db      	lsls	r3, r3, #7
 80076c2:	b2db      	uxtb	r3, r3
 80076c4:	332e      	adds	r3, #46	@ 0x2e
 80076c6:	b2d9      	uxtb	r1, r3
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	b2db      	uxtb	r3, r3
 80076cc:	01db      	lsls	r3, r3, #7
 80076ce:	b2db      	uxtb	r3, r3
 80076d0:	3336      	adds	r3, #54	@ 0x36
 80076d2:	b2db      	uxtb	r3, r3
 80076d4:	461a      	mov	r2, r3
 80076d6:	4857      	ldr	r0, [pc, #348]	@ (8007834 <uSD_Card_SendData_To_Buffer+0x2a8>)
 80076d8:	eeb0 0a67 	vmov.f32	s0, s15
 80076dc:	f7ff fe5b 	bl	8007396 <convert_value_to_array3>
	 DataToSendBuffer[(54 + (128*a))] = ' ';
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	01db      	lsls	r3, r3, #7
 80076e4:	3336      	adds	r3, #54	@ 0x36
 80076e6:	4a53      	ldr	r2, [pc, #332]	@ (8007834 <uSD_Card_SendData_To_Buffer+0x2a8>)
 80076e8:	2120      	movs	r1, #32
 80076ea:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array3(wanted_yaw, DataToSendBuffer, (55 + (128*a)), (63 + (128*a)));
 80076ec:	4b58      	ldr	r3, [pc, #352]	@ (8007850 <uSD_Card_SendData_To_Buffer+0x2c4>)
 80076ee:	edd3 7a00 	vldr	s15, [r3]
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	b2db      	uxtb	r3, r3
 80076f6:	01db      	lsls	r3, r3, #7
 80076f8:	b2db      	uxtb	r3, r3
 80076fa:	3337      	adds	r3, #55	@ 0x37
 80076fc:	b2d9      	uxtb	r1, r3
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	b2db      	uxtb	r3, r3
 8007702:	01db      	lsls	r3, r3, #7
 8007704:	b2db      	uxtb	r3, r3
 8007706:	333f      	adds	r3, #63	@ 0x3f
 8007708:	b2db      	uxtb	r3, r3
 800770a:	461a      	mov	r2, r3
 800770c:	4849      	ldr	r0, [pc, #292]	@ (8007834 <uSD_Card_SendData_To_Buffer+0x2a8>)
 800770e:	eeb0 0a67 	vmov.f32	s0, s15
 8007712:	f7ff fe40 	bl	8007396 <convert_value_to_array3>
	 DataToSendBuffer[(63 + (128*a))] = ' ';
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	01db      	lsls	r3, r3, #7
 800771a:	333f      	adds	r3, #63	@ 0x3f
 800771c:	4a45      	ldr	r2, [pc, #276]	@ (8007834 <uSD_Card_SendData_To_Buffer+0x2a8>)
 800771e:	2120      	movs	r1, #32
 8007720:	54d1      	strb	r1, [r2, r3]

	convert_value_to_array2(error_sum_pitch, DataToSendBuffer, (64 + (128*a)), (72 + (128*a)));
 8007722:	4b4c      	ldr	r3, [pc, #304]	@ (8007854 <uSD_Card_SendData_To_Buffer+0x2c8>)
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	b218      	sxth	r0, r3
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	b2db      	uxtb	r3, r3
 800772c:	01db      	lsls	r3, r3, #7
 800772e:	b2db      	uxtb	r3, r3
 8007730:	3340      	adds	r3, #64	@ 0x40
 8007732:	b2da      	uxtb	r2, r3
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	b2db      	uxtb	r3, r3
 8007738:	01db      	lsls	r3, r3, #7
 800773a:	b2db      	uxtb	r3, r3
 800773c:	3348      	adds	r3, #72	@ 0x48
 800773e:	b2db      	uxtb	r3, r3
 8007740:	493c      	ldr	r1, [pc, #240]	@ (8007834 <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007742:	f7ff fdc9 	bl	80072d8 <convert_value_to_array2>
	 DataToSendBuffer[(72 + (128*a))] = ' ';
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	01db      	lsls	r3, r3, #7
 800774a:	3348      	adds	r3, #72	@ 0x48
 800774c:	4a39      	ldr	r2, [pc, #228]	@ (8007834 <uSD_Card_SendData_To_Buffer+0x2a8>)
 800774e:	2120      	movs	r1, #32
 8007750:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array2(error_sum_rool, DataToSendBuffer, (73 + (128*a)), (81 + (128*a)));
 8007752:	4b41      	ldr	r3, [pc, #260]	@ (8007858 <uSD_Card_SendData_To_Buffer+0x2cc>)
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	b218      	sxth	r0, r3
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	b2db      	uxtb	r3, r3
 800775c:	01db      	lsls	r3, r3, #7
 800775e:	b2db      	uxtb	r3, r3
 8007760:	3349      	adds	r3, #73	@ 0x49
 8007762:	b2da      	uxtb	r2, r3
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	b2db      	uxtb	r3, r3
 8007768:	01db      	lsls	r3, r3, #7
 800776a:	b2db      	uxtb	r3, r3
 800776c:	3351      	adds	r3, #81	@ 0x51
 800776e:	b2db      	uxtb	r3, r3
 8007770:	4930      	ldr	r1, [pc, #192]	@ (8007834 <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007772:	f7ff fdb1 	bl	80072d8 <convert_value_to_array2>
	 DataToSendBuffer[(81 + (128*a))] = ' ';
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	01db      	lsls	r3, r3, #7
 800777a:	3351      	adds	r3, #81	@ 0x51
 800777c:	4a2d      	ldr	r2, [pc, #180]	@ (8007834 <uSD_Card_SendData_To_Buffer+0x2a8>)
 800777e:	2120      	movs	r1, #32
 8007780:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array2(error_sum_yaw, DataToSendBuffer, (82 + (128*a)), (90 + (128*a)));
 8007782:	4b36      	ldr	r3, [pc, #216]	@ (800785c <uSD_Card_SendData_To_Buffer+0x2d0>)
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	b218      	sxth	r0, r3
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	b2db      	uxtb	r3, r3
 800778c:	01db      	lsls	r3, r3, #7
 800778e:	b2db      	uxtb	r3, r3
 8007790:	3352      	adds	r3, #82	@ 0x52
 8007792:	b2da      	uxtb	r2, r3
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	b2db      	uxtb	r3, r3
 8007798:	01db      	lsls	r3, r3, #7
 800779a:	b2db      	uxtb	r3, r3
 800779c:	335a      	adds	r3, #90	@ 0x5a
 800779e:	b2db      	uxtb	r3, r3
 80077a0:	4924      	ldr	r1, [pc, #144]	@ (8007834 <uSD_Card_SendData_To_Buffer+0x2a8>)
 80077a2:	f7ff fd99 	bl	80072d8 <convert_value_to_array2>
	 DataToSendBuffer[(90 + (128*a))] = ' ';
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	01db      	lsls	r3, r3, #7
 80077aa:	335a      	adds	r3, #90	@ 0x5a
 80077ac:	4a21      	ldr	r2, [pc, #132]	@ (8007834 <uSD_Card_SendData_To_Buffer+0x2a8>)
 80077ae:	2120      	movs	r1, #32
 80077b0:	54d1      	strb	r1, [r2, r3]

	convert_value_to_array3(data.x, DataToSendBuffer, (91 + (128*a)), (98 + (128*a)));
 80077b2:	4b2b      	ldr	r3, [pc, #172]	@ (8007860 <uSD_Card_SendData_To_Buffer+0x2d4>)
 80077b4:	edd3 7a00 	vldr	s15, [r3]
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	b2db      	uxtb	r3, r3
 80077bc:	01db      	lsls	r3, r3, #7
 80077be:	b2db      	uxtb	r3, r3
 80077c0:	335b      	adds	r3, #91	@ 0x5b
 80077c2:	b2d9      	uxtb	r1, r3
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	b2db      	uxtb	r3, r3
 80077c8:	01db      	lsls	r3, r3, #7
 80077ca:	b2db      	uxtb	r3, r3
 80077cc:	3362      	adds	r3, #98	@ 0x62
 80077ce:	b2db      	uxtb	r3, r3
 80077d0:	461a      	mov	r2, r3
 80077d2:	4818      	ldr	r0, [pc, #96]	@ (8007834 <uSD_Card_SendData_To_Buffer+0x2a8>)
 80077d4:	eeb0 0a67 	vmov.f32	s0, s15
 80077d8:	f7ff fddd 	bl	8007396 <convert_value_to_array3>
	 DataToSendBuffer[(98 + (128*a))] = ' ';
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	01db      	lsls	r3, r3, #7
 80077e0:	3362      	adds	r3, #98	@ 0x62
 80077e2:	4a14      	ldr	r2, [pc, #80]	@ (8007834 <uSD_Card_SendData_To_Buffer+0x2a8>)
 80077e4:	2120      	movs	r1, #32
 80077e6:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array3(data.y, DataToSendBuffer, (99 + (128*a)), (106 + (128*a)));
 80077e8:	4b1d      	ldr	r3, [pc, #116]	@ (8007860 <uSD_Card_SendData_To_Buffer+0x2d4>)
 80077ea:	edd3 7a01 	vldr	s15, [r3, #4]
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	b2db      	uxtb	r3, r3
 80077f2:	01db      	lsls	r3, r3, #7
 80077f4:	b2db      	uxtb	r3, r3
 80077f6:	3363      	adds	r3, #99	@ 0x63
 80077f8:	b2d9      	uxtb	r1, r3
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	b2db      	uxtb	r3, r3
 80077fe:	01db      	lsls	r3, r3, #7
 8007800:	b2db      	uxtb	r3, r3
 8007802:	336a      	adds	r3, #106	@ 0x6a
 8007804:	b2db      	uxtb	r3, r3
 8007806:	461a      	mov	r2, r3
 8007808:	480a      	ldr	r0, [pc, #40]	@ (8007834 <uSD_Card_SendData_To_Buffer+0x2a8>)
 800780a:	eeb0 0a67 	vmov.f32	s0, s15
 800780e:	f7ff fdc2 	bl	8007396 <convert_value_to_array3>
	 DataToSendBuffer[(106 + (128*a))] = ' ';
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	01db      	lsls	r3, r3, #7
 8007816:	336a      	adds	r3, #106	@ 0x6a
 8007818:	4a06      	ldr	r2, [pc, #24]	@ (8007834 <uSD_Card_SendData_To_Buffer+0x2a8>)
 800781a:	2120      	movs	r1, #32
 800781c:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array3(data.z, DataToSendBuffer, (107 + (128*a)), (114 + (128*a)));
 800781e:	4b10      	ldr	r3, [pc, #64]	@ (8007860 <uSD_Card_SendData_To_Buffer+0x2d4>)
 8007820:	edd3 7a02 	vldr	s15, [r3, #8]
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	b2db      	uxtb	r3, r3
 8007828:	01db      	lsls	r3, r3, #7
 800782a:	b2db      	uxtb	r3, r3
 800782c:	336b      	adds	r3, #107	@ 0x6b
 800782e:	e019      	b.n	8007864 <uSD_Card_SendData_To_Buffer+0x2d8>
 8007830:	000041c4 	.word	0x000041c4
 8007834:	24002f28 	.word	0x24002f28
 8007838:	0000418c 	.word	0x0000418c
 800783c:	0000418e 	.word	0x0000418e
 8007840:	00004190 	.word	0x00004190
 8007844:	00004192 	.word	0x00004192
 8007848:	0000406c 	.word	0x0000406c
 800784c:	00004068 	.word	0x00004068
 8007850:	00004070 	.word	0x00004070
 8007854:	0000409c 	.word	0x0000409c
 8007858:	000040a0 	.word	0x000040a0
 800785c:	000040a4 	.word	0x000040a4
 8007860:	0000007c 	.word	0x0000007c
 8007864:	b2d9      	uxtb	r1, r3
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	b2db      	uxtb	r3, r3
 800786a:	01db      	lsls	r3, r3, #7
 800786c:	b2db      	uxtb	r3, r3
 800786e:	3372      	adds	r3, #114	@ 0x72
 8007870:	b2db      	uxtb	r3, r3
 8007872:	461a      	mov	r2, r3
 8007874:	482d      	ldr	r0, [pc, #180]	@ (800792c <uSD_Card_SendData_To_Buffer+0x3a0>)
 8007876:	eeb0 0a67 	vmov.f32	s0, s15
 800787a:	f7ff fd8c 	bl	8007396 <convert_value_to_array3>
	 DataToSendBuffer[(114 + (128*a))] = ' ';
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	01db      	lsls	r3, r3, #7
 8007882:	3372      	adds	r3, #114	@ 0x72
 8007884:	4a29      	ldr	r2, [pc, #164]	@ (800792c <uSD_Card_SendData_To_Buffer+0x3a0>)
 8007886:	2120      	movs	r1, #32
 8007888:	54d1      	strb	r1, [r2, r3]


	convert_value_to_array2(MYDRON.batterysize, DataToSendBuffer, (115 + (128*a)), (119 + (128*a)));
 800788a:	4b29      	ldr	r3, [pc, #164]	@ (8007930 <uSD_Card_SendData_To_Buffer+0x3a4>)
 800788c:	881b      	ldrh	r3, [r3, #0]
 800788e:	b218      	sxth	r0, r3
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	b2db      	uxtb	r3, r3
 8007894:	01db      	lsls	r3, r3, #7
 8007896:	b2db      	uxtb	r3, r3
 8007898:	3373      	adds	r3, #115	@ 0x73
 800789a:	b2da      	uxtb	r2, r3
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	b2db      	uxtb	r3, r3
 80078a0:	01db      	lsls	r3, r3, #7
 80078a2:	b2db      	uxtb	r3, r3
 80078a4:	3377      	adds	r3, #119	@ 0x77
 80078a6:	b2db      	uxtb	r3, r3
 80078a8:	4920      	ldr	r1, [pc, #128]	@ (800792c <uSD_Card_SendData_To_Buffer+0x3a0>)
 80078aa:	f7ff fd15 	bl	80072d8 <convert_value_to_array2>
	 DataToSendBuffer[(119 + (128*a))] = ' ';
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	01db      	lsls	r3, r3, #7
 80078b2:	3377      	adds	r3, #119	@ 0x77
 80078b4:	4a1d      	ldr	r2, [pc, #116]	@ (800792c <uSD_Card_SendData_To_Buffer+0x3a0>)
 80078b6:	2120      	movs	r1, #32
 80078b8:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array2(MYDRON.dron_status.Connection, DataToSendBuffer, (120 + (128*a)), (122 + (128*a)));
 80078ba:	4b1d      	ldr	r3, [pc, #116]	@ (8007930 <uSD_Card_SendData_To_Buffer+0x3a4>)
 80078bc:	8a5b      	ldrh	r3, [r3, #18]
 80078be:	b218      	sxth	r0, r3
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	b2db      	uxtb	r3, r3
 80078c4:	01db      	lsls	r3, r3, #7
 80078c6:	b2db      	uxtb	r3, r3
 80078c8:	3378      	adds	r3, #120	@ 0x78
 80078ca:	b2da      	uxtb	r2, r3
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	b2db      	uxtb	r3, r3
 80078d0:	01db      	lsls	r3, r3, #7
 80078d2:	b2db      	uxtb	r3, r3
 80078d4:	337a      	adds	r3, #122	@ 0x7a
 80078d6:	b2db      	uxtb	r3, r3
 80078d8:	4914      	ldr	r1, [pc, #80]	@ (800792c <uSD_Card_SendData_To_Buffer+0x3a0>)
 80078da:	f7ff fcfd 	bl	80072d8 <convert_value_to_array2>
	 DataToSendBuffer[(122 + (128*a))] = ' ';
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	01db      	lsls	r3, r3, #7
 80078e2:	337a      	adds	r3, #122	@ 0x7a
 80078e4:	4a11      	ldr	r2, [pc, #68]	@ (800792c <uSD_Card_SendData_To_Buffer+0x3a0>)
 80078e6:	2120      	movs	r1, #32
 80078e8:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array2(Mag_Z, DataToSendBuffer, (123 + (128*a)), (127 + (128*a)));
 80078ea:	4b12      	ldr	r3, [pc, #72]	@ (8007934 <uSD_Card_SendData_To_Buffer+0x3a8>)
 80078ec:	edd3 7a00 	vldr	s15, [r3]
 80078f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80078f4:	ee17 3a90 	vmov	r3, s15
 80078f8:	b218      	sxth	r0, r3
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	b2db      	uxtb	r3, r3
 80078fe:	01db      	lsls	r3, r3, #7
 8007900:	b2db      	uxtb	r3, r3
 8007902:	337b      	adds	r3, #123	@ 0x7b
 8007904:	b2da      	uxtb	r2, r3
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	b2db      	uxtb	r3, r3
 800790a:	01db      	lsls	r3, r3, #7
 800790c:	b2db      	uxtb	r3, r3
 800790e:	337f      	adds	r3, #127	@ 0x7f
 8007910:	b2db      	uxtb	r3, r3
 8007912:	4906      	ldr	r1, [pc, #24]	@ (800792c <uSD_Card_SendData_To_Buffer+0x3a0>)
 8007914:	f7ff fce0 	bl	80072d8 <convert_value_to_array2>
	 DataToSendBuffer[(128 + (128*a))] = '\n';
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	3301      	adds	r3, #1
 800791c:	01db      	lsls	r3, r3, #7
 800791e:	4a03      	ldr	r2, [pc, #12]	@ (800792c <uSD_Card_SendData_To_Buffer+0x3a0>)
 8007920:	210a      	movs	r1, #10
 8007922:	54d1      	strb	r1, [r2, r3]
}
 8007924:	bf00      	nop
 8007926:	3708      	adds	r7, #8
 8007928:	46bd      	mov	sp, r7
 800792a:	bd80      	pop	{r7, pc}
 800792c:	24002f28 	.word	0x24002f28
 8007930:	00000178 	.word	0x00000178
 8007934:	00000058 	.word	0x00000058

08007938 <Stack_Push>:

void Stack_Push(float data){
 8007938:	b480      	push	{r7}
 800793a:	b083      	sub	sp, #12
 800793c:	af00      	add	r7, sp, #0
 800793e:	ed87 0a01 	vstr	s0, [r7, #4]
	Old_Data_stack.start_pointer++;
 8007942:	4b22      	ldr	r3, [pc, #136]	@ (80079cc <Stack_Push+0x94>)
 8007944:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8007948:	f8b3 3ea8 	ldrh.w	r3, [r3, #3752]	@ 0xea8
 800794c:	3301      	adds	r3, #1
 800794e:	b29a      	uxth	r2, r3
 8007950:	4b1e      	ldr	r3, [pc, #120]	@ (80079cc <Stack_Push+0x94>)
 8007952:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8007956:	f8a3 2ea8 	strh.w	r2, [r3, #3752]	@ 0xea8
	if(Old_Data_stack.start_pointer == 4000){
 800795a:	4b1c      	ldr	r3, [pc, #112]	@ (80079cc <Stack_Push+0x94>)
 800795c:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8007960:	f8b3 3ea8 	ldrh.w	r3, [r3, #3752]	@ 0xea8
 8007964:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 8007968:	d105      	bne.n	8007976 <Stack_Push+0x3e>
		Old_Data_stack.start_pointer = 0;
 800796a:	4b18      	ldr	r3, [pc, #96]	@ (80079cc <Stack_Push+0x94>)
 800796c:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8007970:	2200      	movs	r2, #0
 8007972:	f8a3 2ea8 	strh.w	r2, [r3, #3752]	@ 0xea8
	}
	Old_Data_stack.olddata[Old_Data_stack.start_pointer] = data;
 8007976:	4b15      	ldr	r3, [pc, #84]	@ (80079cc <Stack_Push+0x94>)
 8007978:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 800797c:	f8b3 3ea8 	ldrh.w	r3, [r3, #3752]	@ 0xea8
 8007980:	4a12      	ldr	r2, [pc, #72]	@ (80079cc <Stack_Push+0x94>)
 8007982:	009b      	lsls	r3, r3, #2
 8007984:	4413      	add	r3, r2
 8007986:	687a      	ldr	r2, [r7, #4]
 8007988:	601a      	str	r2, [r3, #0]

	Old_Data_stack.end_pointer++;
 800798a:	4b10      	ldr	r3, [pc, #64]	@ (80079cc <Stack_Push+0x94>)
 800798c:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8007990:	f8b3 3eaa 	ldrh.w	r3, [r3, #3754]	@ 0xeaa
 8007994:	3301      	adds	r3, #1
 8007996:	b29a      	uxth	r2, r3
 8007998:	4b0c      	ldr	r3, [pc, #48]	@ (80079cc <Stack_Push+0x94>)
 800799a:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 800799e:	f8a3 2eaa 	strh.w	r2, [r3, #3754]	@ 0xeaa
	if(Old_Data_stack.start_pointer == 4000){
 80079a2:	4b0a      	ldr	r3, [pc, #40]	@ (80079cc <Stack_Push+0x94>)
 80079a4:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 80079a8:	f8b3 3ea8 	ldrh.w	r3, [r3, #3752]	@ 0xea8
 80079ac:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 80079b0:	d105      	bne.n	80079be <Stack_Push+0x86>
		Old_Data_stack.start_pointer = 0;
 80079b2:	4b06      	ldr	r3, [pc, #24]	@ (80079cc <Stack_Push+0x94>)
 80079b4:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 80079b8:	2200      	movs	r2, #0
 80079ba:	f8a3 2ea8 	strh.w	r2, [r3, #3752]	@ 0xea8
	}
}
 80079be:	bf00      	nop
 80079c0:	370c      	adds	r7, #12
 80079c2:	46bd      	mov	sp, r7
 80079c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c8:	4770      	bx	lr
 80079ca:	bf00      	nop
 80079cc:	0000019c 	.word	0x0000019c

080079d0 <ROOL_MAX_VAL>:

int16_t ROOL_MAX_VAL(void){
 80079d0:	b480      	push	{r7}
 80079d2:	af00      	add	r7, sp, #0
	MYDRON.ROOL_STA = 2;
 80079d4:	4b05      	ldr	r3, [pc, #20]	@ (80079ec <ROOL_MAX_VAL+0x1c>)
 80079d6:	2202      	movs	r2, #2
 80079d8:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
	return 5000;
 80079dc:	f241 3388 	movw	r3, #5000	@ 0x1388
}
 80079e0:	4618      	mov	r0, r3
 80079e2:	46bd      	mov	sp, r7
 80079e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e8:	4770      	bx	lr
 80079ea:	bf00      	nop
 80079ec:	00000178 	.word	0x00000178

080079f0 <ROOL_MIN_VAL>:
int16_t ROOL_MIN_VAL(void){
 80079f0:	b480      	push	{r7}
 80079f2:	af00      	add	r7, sp, #0
	MYDRON.ROOL_STA = 1;
 80079f4:	4b04      	ldr	r3, [pc, #16]	@ (8007a08 <ROOL_MIN_VAL+0x18>)
 80079f6:	2201      	movs	r2, #1
 80079f8:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
	return -5000;
 80079fc:	4b03      	ldr	r3, [pc, #12]	@ (8007a0c <ROOL_MIN_VAL+0x1c>)
}
 80079fe:	4618      	mov	r0, r3
 8007a00:	46bd      	mov	sp, r7
 8007a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a06:	4770      	bx	lr
 8007a08:	00000178 	.word	0x00000178
 8007a0c:	ffffec78 	.word	0xffffec78

08007a10 <PITCH_MAX_VAL>:
int16_t PITCH_MAX_VAL(void){
 8007a10:	b480      	push	{r7}
 8007a12:	af00      	add	r7, sp, #0
	MYDRON.PITCH_STA = 2;
 8007a14:	4b05      	ldr	r3, [pc, #20]	@ (8007a2c <PITCH_MAX_VAL+0x1c>)
 8007a16:	2202      	movs	r2, #2
 8007a18:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
	return 5000;
 8007a1c:	f241 3388 	movw	r3, #5000	@ 0x1388
}
 8007a20:	4618      	mov	r0, r3
 8007a22:	46bd      	mov	sp, r7
 8007a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a28:	4770      	bx	lr
 8007a2a:	bf00      	nop
 8007a2c:	00000178 	.word	0x00000178

08007a30 <PITCH_MIN_VAL>:
int16_t PITCH_MIN_VAL(void){
 8007a30:	b480      	push	{r7}
 8007a32:	af00      	add	r7, sp, #0
	MYDRON.PITCH_STA = 1;
 8007a34:	4b04      	ldr	r3, [pc, #16]	@ (8007a48 <PITCH_MIN_VAL+0x18>)
 8007a36:	2201      	movs	r2, #1
 8007a38:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
	return -5000;
 8007a3c:	4b03      	ldr	r3, [pc, #12]	@ (8007a4c <PITCH_MIN_VAL+0x1c>)
}
 8007a3e:	4618      	mov	r0, r3
 8007a40:	46bd      	mov	sp, r7
 8007a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a46:	4770      	bx	lr
 8007a48:	00000178 	.word	0x00000178
 8007a4c:	ffffec78 	.word	0xffffec78

08007a50 <YAW_MAX_VAL>:
int16_t YAW_MAX_VAL(void){
 8007a50:	b480      	push	{r7}
 8007a52:	af00      	add	r7, sp, #0
	MYDRON.YAW_STA = 2;
 8007a54:	4b05      	ldr	r3, [pc, #20]	@ (8007a6c <YAW_MAX_VAL+0x1c>)
 8007a56:	2202      	movs	r2, #2
 8007a58:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
	return 5000;
 8007a5c:	f241 3388 	movw	r3, #5000	@ 0x1388
}
 8007a60:	4618      	mov	r0, r3
 8007a62:	46bd      	mov	sp, r7
 8007a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a68:	4770      	bx	lr
 8007a6a:	bf00      	nop
 8007a6c:	00000178 	.word	0x00000178

08007a70 <YAW_MIN_VAL>:
int16_t YAW_MIN_VAL(void){
 8007a70:	b480      	push	{r7}
 8007a72:	af00      	add	r7, sp, #0
	MYDRON.YAW_STA = 1;
 8007a74:	4b04      	ldr	r3, [pc, #16]	@ (8007a88 <YAW_MIN_VAL+0x18>)
 8007a76:	2201      	movs	r2, #1
 8007a78:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
	return -5000;
 8007a7c:	4b03      	ldr	r3, [pc, #12]	@ (8007a8c <YAW_MIN_VAL+0x1c>)
}
 8007a7e:	4618      	mov	r0, r3
 8007a80:	46bd      	mov	sp, r7
 8007a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a86:	4770      	bx	lr
 8007a88:	00000178 	.word	0x00000178
 8007a8c:	ffffec78 	.word	0xffffec78

08007a90 <ROOL_GOOD_VAL>:
int16_t ROOL_GOOD_VAL(void){
 8007a90:	b480      	push	{r7}
 8007a92:	af00      	add	r7, sp, #0
	MYDRON.ROOL_STA = 0;
 8007a94:	4b08      	ldr	r3, [pc, #32]	@ (8007ab8 <ROOL_GOOD_VAL+0x28>)
 8007a96:	2200      	movs	r2, #0
 8007a98:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
	return pid_angular_rate_rool;
 8007a9c:	4b07      	ldr	r3, [pc, #28]	@ (8007abc <ROOL_GOOD_VAL+0x2c>)
 8007a9e:	edd3 7a00 	vldr	s15, [r3]
 8007aa2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007aa6:	ee17 3a90 	vmov	r3, s15
 8007aaa:	b21b      	sxth	r3, r3
}
 8007aac:	4618      	mov	r0, r3
 8007aae:	46bd      	mov	sp, r7
 8007ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab4:	4770      	bx	lr
 8007ab6:	bf00      	nop
 8007ab8:	00000178 	.word	0x00000178
 8007abc:	000040c8 	.word	0x000040c8

08007ac0 <PITCH_GOOD_VAL>:
int16_t PITCH_GOOD_VAL(void){
 8007ac0:	b480      	push	{r7}
 8007ac2:	af00      	add	r7, sp, #0
	MYDRON.PITCH_STA = 0;
 8007ac4:	4b08      	ldr	r3, [pc, #32]	@ (8007ae8 <PITCH_GOOD_VAL+0x28>)
 8007ac6:	2200      	movs	r2, #0
 8007ac8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
	return pid_angular_rate_pitch;
 8007acc:	4b07      	ldr	r3, [pc, #28]	@ (8007aec <PITCH_GOOD_VAL+0x2c>)
 8007ace:	edd3 7a00 	vldr	s15, [r3]
 8007ad2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007ad6:	ee17 3a90 	vmov	r3, s15
 8007ada:	b21b      	sxth	r3, r3
}
 8007adc:	4618      	mov	r0, r3
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae4:	4770      	bx	lr
 8007ae6:	bf00      	nop
 8007ae8:	00000178 	.word	0x00000178
 8007aec:	000040c0 	.word	0x000040c0

08007af0 <YAW_GOOD_VAL>:
int16_t YAW_GOOD_VAL(void){
 8007af0:	b480      	push	{r7}
 8007af2:	af00      	add	r7, sp, #0
	MYDRON.YAW_STA = 0;
 8007af4:	4b08      	ldr	r3, [pc, #32]	@ (8007b18 <YAW_GOOD_VAL+0x28>)
 8007af6:	2200      	movs	r2, #0
 8007af8:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
	return pid_angular_rate_yaw;
 8007afc:	4b07      	ldr	r3, [pc, #28]	@ (8007b1c <YAW_GOOD_VAL+0x2c>)
 8007afe:	edd3 7a00 	vldr	s15, [r3]
 8007b02:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007b06:	ee17 3a90 	vmov	r3, s15
 8007b0a:	b21b      	sxth	r3, r3
}
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b14:	4770      	bx	lr
 8007b16:	bf00      	nop
 8007b18:	00000178 	.word	0x00000178
 8007b1c:	000040c4 	.word	0x000040c4

08007b20 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8007b20:	b580      	push	{r7, lr}
 8007b22:	b084      	sub	sp, #16
 8007b24:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8007b26:	463b      	mov	r3, r7
 8007b28:	2200      	movs	r2, #0
 8007b2a:	601a      	str	r2, [r3, #0]
 8007b2c:	605a      	str	r2, [r3, #4]
 8007b2e:	609a      	str	r2, [r3, #8]
 8007b30:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8007b32:	f003 fc3d 	bl	800b3b0 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8007b36:	2301      	movs	r3, #1
 8007b38:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8007b3a:	2300      	movs	r3, #0
 8007b3c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8007b3e:	2300      	movs	r3, #0
 8007b40:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8007b42:	231f      	movs	r3, #31
 8007b44:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8007b46:	2387      	movs	r3, #135	@ 0x87
 8007b48:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8007b4e:	2300      	movs	r3, #0
 8007b50:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8007b52:	2301      	movs	r3, #1
 8007b54:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8007b56:	2301      	movs	r3, #1
 8007b58:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8007b5a:	2300      	movs	r3, #0
 8007b5c:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8007b5e:	2300      	movs	r3, #0
 8007b60:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8007b62:	463b      	mov	r3, r7
 8007b64:	4618      	mov	r0, r3
 8007b66:	f003 fc5b 	bl	800b420 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8007b6a:	2004      	movs	r0, #4
 8007b6c:	f003 fc38 	bl	800b3e0 <HAL_MPU_Enable>

}
 8007b70:	bf00      	nop
 8007b72:	3710      	adds	r7, #16
 8007b74:	46bd      	mov	sp, r7
 8007b76:	bd80      	pop	{r7, pc}

08007b78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007b78:	b480      	push	{r7}
 8007b7a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8007b7c:	b672      	cpsid	i
}
 8007b7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8007b80:	bf00      	nop
 8007b82:	e7fd      	b.n	8007b80 <Error_Handler+0x8>

08007b84 <MX_SPI2_Init>:
SPI_HandleTypeDef hspi6;
DMA_HandleTypeDef hdma_spi2_tx;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8007b84:	b580      	push	{r7, lr}
 8007b86:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8007b88:	4b27      	ldr	r3, [pc, #156]	@ (8007c28 <MX_SPI2_Init+0xa4>)
 8007b8a:	4a28      	ldr	r2, [pc, #160]	@ (8007c2c <MX_SPI2_Init+0xa8>)
 8007b8c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8007b8e:	4b26      	ldr	r3, [pc, #152]	@ (8007c28 <MX_SPI2_Init+0xa4>)
 8007b90:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8007b94:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8007b96:	4b24      	ldr	r3, [pc, #144]	@ (8007c28 <MX_SPI2_Init+0xa4>)
 8007b98:	2200      	movs	r2, #0
 8007b9a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8007b9c:	4b22      	ldr	r3, [pc, #136]	@ (8007c28 <MX_SPI2_Init+0xa4>)
 8007b9e:	2207      	movs	r2, #7
 8007ba0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8007ba2:	4b21      	ldr	r3, [pc, #132]	@ (8007c28 <MX_SPI2_Init+0xa4>)
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8007ba8:	4b1f      	ldr	r3, [pc, #124]	@ (8007c28 <MX_SPI2_Init+0xa4>)
 8007baa:	2200      	movs	r2, #0
 8007bac:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8007bae:	4b1e      	ldr	r3, [pc, #120]	@ (8007c28 <MX_SPI2_Init+0xa4>)
 8007bb0:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8007bb4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007bb6:	4b1c      	ldr	r3, [pc, #112]	@ (8007c28 <MX_SPI2_Init+0xa4>)
 8007bb8:	2200      	movs	r2, #0
 8007bba:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8007bbc:	4b1a      	ldr	r3, [pc, #104]	@ (8007c28 <MX_SPI2_Init+0xa4>)
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8007bc2:	4b19      	ldr	r3, [pc, #100]	@ (8007c28 <MX_SPI2_Init+0xa4>)
 8007bc4:	2200      	movs	r2, #0
 8007bc6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007bc8:	4b17      	ldr	r3, [pc, #92]	@ (8007c28 <MX_SPI2_Init+0xa4>)
 8007bca:	2200      	movs	r2, #0
 8007bcc:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8007bce:	4b16      	ldr	r3, [pc, #88]	@ (8007c28 <MX_SPI2_Init+0xa4>)
 8007bd0:	2200      	movs	r2, #0
 8007bd2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8007bd4:	4b14      	ldr	r3, [pc, #80]	@ (8007c28 <MX_SPI2_Init+0xa4>)
 8007bd6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8007bda:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8007bdc:	4b12      	ldr	r3, [pc, #72]	@ (8007c28 <MX_SPI2_Init+0xa4>)
 8007bde:	2200      	movs	r2, #0
 8007be0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8007be2:	4b11      	ldr	r3, [pc, #68]	@ (8007c28 <MX_SPI2_Init+0xa4>)
 8007be4:	2200      	movs	r2, #0
 8007be6:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8007be8:	4b0f      	ldr	r3, [pc, #60]	@ (8007c28 <MX_SPI2_Init+0xa4>)
 8007bea:	2200      	movs	r2, #0
 8007bec:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8007bee:	4b0e      	ldr	r3, [pc, #56]	@ (8007c28 <MX_SPI2_Init+0xa4>)
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8007bf4:	4b0c      	ldr	r3, [pc, #48]	@ (8007c28 <MX_SPI2_Init+0xa4>)
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8007bfa:	4b0b      	ldr	r3, [pc, #44]	@ (8007c28 <MX_SPI2_Init+0xa4>)
 8007bfc:	2200      	movs	r2, #0
 8007bfe:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8007c00:	4b09      	ldr	r3, [pc, #36]	@ (8007c28 <MX_SPI2_Init+0xa4>)
 8007c02:	2200      	movs	r2, #0
 8007c04:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8007c06:	4b08      	ldr	r3, [pc, #32]	@ (8007c28 <MX_SPI2_Init+0xa4>)
 8007c08:	2200      	movs	r2, #0
 8007c0a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8007c0c:	4b06      	ldr	r3, [pc, #24]	@ (8007c28 <MX_SPI2_Init+0xa4>)
 8007c0e:	2200      	movs	r2, #0
 8007c10:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8007c12:	4805      	ldr	r0, [pc, #20]	@ (8007c28 <MX_SPI2_Init+0xa4>)
 8007c14:	f00c fc8e 	bl	8014534 <HAL_SPI_Init>
 8007c18:	4603      	mov	r3, r0
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d001      	beq.n	8007c22 <MX_SPI2_Init+0x9e>
  {
    Error_Handler();
 8007c1e:	f7ff ffab 	bl	8007b78 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8007c22:	bf00      	nop
 8007c24:	bd80      	pop	{r7, pc}
 8007c26:	bf00      	nop
 8007c28:	240001ec 	.word	0x240001ec
 8007c2c:	40003800 	.word	0x40003800

08007c30 <MX_SPI6_Init>:
/* SPI6 init function */
void MX_SPI6_Init(void)
{
 8007c30:	b580      	push	{r7, lr}
 8007c32:	af00      	add	r7, sp, #0
  /* USER CODE END SPI6_Init 0 */

  /* USER CODE BEGIN SPI6_Init 1 */

  /* USER CODE END SPI6_Init 1 */
  hspi6.Instance = SPI6;
 8007c34:	4b27      	ldr	r3, [pc, #156]	@ (8007cd4 <MX_SPI6_Init+0xa4>)
 8007c36:	4a28      	ldr	r2, [pc, #160]	@ (8007cd8 <MX_SPI6_Init+0xa8>)
 8007c38:	601a      	str	r2, [r3, #0]
  hspi6.Init.Mode = SPI_MODE_MASTER;
 8007c3a:	4b26      	ldr	r3, [pc, #152]	@ (8007cd4 <MX_SPI6_Init+0xa4>)
 8007c3c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8007c40:	605a      	str	r2, [r3, #4]
  hspi6.Init.Direction = SPI_DIRECTION_2LINES;
 8007c42:	4b24      	ldr	r3, [pc, #144]	@ (8007cd4 <MX_SPI6_Init+0xa4>)
 8007c44:	2200      	movs	r2, #0
 8007c46:	609a      	str	r2, [r3, #8]
  hspi6.Init.DataSize = SPI_DATASIZE_8BIT;
 8007c48:	4b22      	ldr	r3, [pc, #136]	@ (8007cd4 <MX_SPI6_Init+0xa4>)
 8007c4a:	2207      	movs	r2, #7
 8007c4c:	60da      	str	r2, [r3, #12]
  hspi6.Init.CLKPolarity = SPI_POLARITY_LOW;
 8007c4e:	4b21      	ldr	r3, [pc, #132]	@ (8007cd4 <MX_SPI6_Init+0xa4>)
 8007c50:	2200      	movs	r2, #0
 8007c52:	611a      	str	r2, [r3, #16]
  hspi6.Init.CLKPhase = SPI_PHASE_1EDGE;
 8007c54:	4b1f      	ldr	r3, [pc, #124]	@ (8007cd4 <MX_SPI6_Init+0xa4>)
 8007c56:	2200      	movs	r2, #0
 8007c58:	615a      	str	r2, [r3, #20]
  hspi6.Init.NSS = SPI_NSS_SOFT;
 8007c5a:	4b1e      	ldr	r3, [pc, #120]	@ (8007cd4 <MX_SPI6_Init+0xa4>)
 8007c5c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8007c60:	619a      	str	r2, [r3, #24]
  hspi6.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007c62:	4b1c      	ldr	r3, [pc, #112]	@ (8007cd4 <MX_SPI6_Init+0xa4>)
 8007c64:	2200      	movs	r2, #0
 8007c66:	61da      	str	r2, [r3, #28]
  hspi6.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8007c68:	4b1a      	ldr	r3, [pc, #104]	@ (8007cd4 <MX_SPI6_Init+0xa4>)
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	621a      	str	r2, [r3, #32]
  hspi6.Init.TIMode = SPI_TIMODE_DISABLE;
 8007c6e:	4b19      	ldr	r3, [pc, #100]	@ (8007cd4 <MX_SPI6_Init+0xa4>)
 8007c70:	2200      	movs	r2, #0
 8007c72:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi6.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007c74:	4b17      	ldr	r3, [pc, #92]	@ (8007cd4 <MX_SPI6_Init+0xa4>)
 8007c76:	2200      	movs	r2, #0
 8007c78:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi6.Init.CRCPolynomial = 0x0;
 8007c7a:	4b16      	ldr	r3, [pc, #88]	@ (8007cd4 <MX_SPI6_Init+0xa4>)
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi6.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8007c80:	4b14      	ldr	r3, [pc, #80]	@ (8007cd4 <MX_SPI6_Init+0xa4>)
 8007c82:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8007c86:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi6.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8007c88:	4b12      	ldr	r3, [pc, #72]	@ (8007cd4 <MX_SPI6_Init+0xa4>)
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi6.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8007c8e:	4b11      	ldr	r3, [pc, #68]	@ (8007cd4 <MX_SPI6_Init+0xa4>)
 8007c90:	2200      	movs	r2, #0
 8007c92:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi6.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8007c94:	4b0f      	ldr	r3, [pc, #60]	@ (8007cd4 <MX_SPI6_Init+0xa4>)
 8007c96:	2200      	movs	r2, #0
 8007c98:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi6.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8007c9a:	4b0e      	ldr	r3, [pc, #56]	@ (8007cd4 <MX_SPI6_Init+0xa4>)
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi6.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8007ca0:	4b0c      	ldr	r3, [pc, #48]	@ (8007cd4 <MX_SPI6_Init+0xa4>)
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi6.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8007ca6:	4b0b      	ldr	r3, [pc, #44]	@ (8007cd4 <MX_SPI6_Init+0xa4>)
 8007ca8:	2200      	movs	r2, #0
 8007caa:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi6.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8007cac:	4b09      	ldr	r3, [pc, #36]	@ (8007cd4 <MX_SPI6_Init+0xa4>)
 8007cae:	2200      	movs	r2, #0
 8007cb0:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi6.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8007cb2:	4b08      	ldr	r3, [pc, #32]	@ (8007cd4 <MX_SPI6_Init+0xa4>)
 8007cb4:	2200      	movs	r2, #0
 8007cb6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi6.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8007cb8:	4b06      	ldr	r3, [pc, #24]	@ (8007cd4 <MX_SPI6_Init+0xa4>)
 8007cba:	2200      	movs	r2, #0
 8007cbc:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi6) != HAL_OK)
 8007cbe:	4805      	ldr	r0, [pc, #20]	@ (8007cd4 <MX_SPI6_Init+0xa4>)
 8007cc0:	f00c fc38 	bl	8014534 <HAL_SPI_Init>
 8007cc4:	4603      	mov	r3, r0
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d001      	beq.n	8007cce <MX_SPI6_Init+0x9e>
  {
    Error_Handler();
 8007cca:	f7ff ff55 	bl	8007b78 <Error_Handler>
  }
  /* USER CODE BEGIN SPI6_Init 2 */

  /* USER CODE END SPI6_Init 2 */

}
 8007cce:	bf00      	nop
 8007cd0:	bd80      	pop	{r7, pc}
 8007cd2:	bf00      	nop
 8007cd4:	24000274 	.word	0x24000274
 8007cd8:	58001400 	.word	0x58001400

08007cdc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	b0ba      	sub	sp, #232	@ 0xe8
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007ce4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8007ce8:	2200      	movs	r2, #0
 8007cea:	601a      	str	r2, [r3, #0]
 8007cec:	605a      	str	r2, [r3, #4]
 8007cee:	609a      	str	r2, [r3, #8]
 8007cf0:	60da      	str	r2, [r3, #12]
 8007cf2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8007cf4:	f107 0318 	add.w	r3, r7, #24
 8007cf8:	22b8      	movs	r2, #184	@ 0xb8
 8007cfa:	2100      	movs	r1, #0
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	f016 f871 	bl	801dde4 <memset>
  if(spiHandle->Instance==SPI2)
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	4a77      	ldr	r2, [pc, #476]	@ (8007ee4 <HAL_SPI_MspInit+0x208>)
 8007d08:	4293      	cmp	r3, r2
 8007d0a:	f040 8089 	bne.w	8007e20 <HAL_SPI_MspInit+0x144>
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */

    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8007d0e:	4b76      	ldr	r3, [pc, #472]	@ (8007ee8 <HAL_SPI_MspInit+0x20c>)
 8007d10:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007d14:	4a74      	ldr	r2, [pc, #464]	@ (8007ee8 <HAL_SPI_MspInit+0x20c>)
 8007d16:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007d1a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8007d1e:	4b72      	ldr	r3, [pc, #456]	@ (8007ee8 <HAL_SPI_MspInit+0x20c>)
 8007d20:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007d24:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007d28:	617b      	str	r3, [r7, #20]
 8007d2a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007d2c:	4b6e      	ldr	r3, [pc, #440]	@ (8007ee8 <HAL_SPI_MspInit+0x20c>)
 8007d2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007d32:	4a6d      	ldr	r2, [pc, #436]	@ (8007ee8 <HAL_SPI_MspInit+0x20c>)
 8007d34:	f043 0302 	orr.w	r3, r3, #2
 8007d38:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8007d3c:	4b6a      	ldr	r3, [pc, #424]	@ (8007ee8 <HAL_SPI_MspInit+0x20c>)
 8007d3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007d42:	f003 0302 	and.w	r3, r3, #2
 8007d46:	613b      	str	r3, [r7, #16]
 8007d48:	693b      	ldr	r3, [r7, #16]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8007d4a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8007d4e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007d52:	2302      	movs	r3, #2
 8007d54:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d58:	2300      	movs	r3, #0
 8007d5a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8007d5e:	2301      	movs	r3, #1
 8007d60:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8007d64:	2305      	movs	r3, #5
 8007d66:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007d6a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8007d6e:	4619      	mov	r1, r3
 8007d70:	485e      	ldr	r0, [pc, #376]	@ (8007eec <HAL_SPI_MspInit+0x210>)
 8007d72:	f006 f9e7 	bl	800e144 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8007d76:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8007d7a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007d7e:	2302      	movs	r3, #2
 8007d80:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007d84:	2301      	movs	r3, #1
 8007d86:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8007d8a:	2301      	movs	r3, #1
 8007d8c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8007d90:	2305      	movs	r3, #5
 8007d92:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007d96:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8007d9a:	4619      	mov	r1, r3
 8007d9c:	4853      	ldr	r0, [pc, #332]	@ (8007eec <HAL_SPI_MspInit+0x210>)
 8007d9e:	f006 f9d1 	bl	800e144 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream0;
 8007da2:	4b53      	ldr	r3, [pc, #332]	@ (8007ef0 <HAL_SPI_MspInit+0x214>)
 8007da4:	4a53      	ldr	r2, [pc, #332]	@ (8007ef4 <HAL_SPI_MspInit+0x218>)
 8007da6:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_SPI2_TX;
 8007da8:	4b51      	ldr	r3, [pc, #324]	@ (8007ef0 <HAL_SPI_MspInit+0x214>)
 8007daa:	2228      	movs	r2, #40	@ 0x28
 8007dac:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007dae:	4b50      	ldr	r3, [pc, #320]	@ (8007ef0 <HAL_SPI_MspInit+0x214>)
 8007db0:	2240      	movs	r2, #64	@ 0x40
 8007db2:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007db4:	4b4e      	ldr	r3, [pc, #312]	@ (8007ef0 <HAL_SPI_MspInit+0x214>)
 8007db6:	2200      	movs	r2, #0
 8007db8:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8007dba:	4b4d      	ldr	r3, [pc, #308]	@ (8007ef0 <HAL_SPI_MspInit+0x214>)
 8007dbc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8007dc0:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007dc2:	4b4b      	ldr	r3, [pc, #300]	@ (8007ef0 <HAL_SPI_MspInit+0x214>)
 8007dc4:	2200      	movs	r2, #0
 8007dc6:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007dc8:	4b49      	ldr	r3, [pc, #292]	@ (8007ef0 <HAL_SPI_MspInit+0x214>)
 8007dca:	2200      	movs	r2, #0
 8007dcc:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8007dce:	4b48      	ldr	r3, [pc, #288]	@ (8007ef0 <HAL_SPI_MspInit+0x214>)
 8007dd0:	2200      	movs	r2, #0
 8007dd2:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8007dd4:	4b46      	ldr	r3, [pc, #280]	@ (8007ef0 <HAL_SPI_MspInit+0x214>)
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8007dda:	4b45      	ldr	r3, [pc, #276]	@ (8007ef0 <HAL_SPI_MspInit+0x214>)
 8007ddc:	2204      	movs	r2, #4
 8007dde:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_spi2_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8007de0:	4b43      	ldr	r3, [pc, #268]	@ (8007ef0 <HAL_SPI_MspInit+0x214>)
 8007de2:	2203      	movs	r2, #3
 8007de4:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_spi2_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8007de6:	4b42      	ldr	r3, [pc, #264]	@ (8007ef0 <HAL_SPI_MspInit+0x214>)
 8007de8:	2200      	movs	r2, #0
 8007dea:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_spi2_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8007dec:	4b40      	ldr	r3, [pc, #256]	@ (8007ef0 <HAL_SPI_MspInit+0x214>)
 8007dee:	2200      	movs	r2, #0
 8007df0:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8007df2:	483f      	ldr	r0, [pc, #252]	@ (8007ef0 <HAL_SPI_MspInit+0x214>)
 8007df4:	f003 fb54 	bl	800b4a0 <HAL_DMA_Init>
 8007df8:	4603      	mov	r3, r0
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d001      	beq.n	8007e02 <HAL_SPI_MspInit+0x126>
    {
      Error_Handler();
 8007dfe:	f7ff febb 	bl	8007b78 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	4a3a      	ldr	r2, [pc, #232]	@ (8007ef0 <HAL_SPI_MspInit+0x214>)
 8007e06:	679a      	str	r2, [r3, #120]	@ 0x78
 8007e08:	4a39      	ldr	r2, [pc, #228]	@ (8007ef0 <HAL_SPI_MspInit+0x214>)
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8007e0e:	2200      	movs	r2, #0
 8007e10:	2100      	movs	r1, #0
 8007e12:	2024      	movs	r0, #36	@ 0x24
 8007e14:	f003 fa97 	bl	800b346 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8007e18:	2024      	movs	r0, #36	@ 0x24
 8007e1a:	f003 faae 	bl	800b37a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN SPI6_MspInit 1 */

  /* USER CODE END SPI6_MspInit 1 */
  }
}
 8007e1e:	e05c      	b.n	8007eda <HAL_SPI_MspInit+0x1fe>
  else if(spiHandle->Instance==SPI6)
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	4a34      	ldr	r2, [pc, #208]	@ (8007ef8 <HAL_SPI_MspInit+0x21c>)
 8007e26:	4293      	cmp	r3, r2
 8007e28:	d157      	bne.n	8007eda <HAL_SPI_MspInit+0x1fe>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI6;
 8007e2a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8007e2e:	f04f 0300 	mov.w	r3, #0
 8007e32:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.PLL3.PLL3M = 24;
 8007e36:	2318      	movs	r3, #24
 8007e38:	643b      	str	r3, [r7, #64]	@ 0x40
    PeriphClkInitStruct.PLL3.PLL3N = 200;
 8007e3a:	23c8      	movs	r3, #200	@ 0xc8
 8007e3c:	647b      	str	r3, [r7, #68]	@ 0x44
    PeriphClkInitStruct.PLL3.PLL3P = 1;
 8007e3e:	2301      	movs	r3, #1
 8007e40:	64bb      	str	r3, [r7, #72]	@ 0x48
    PeriphClkInitStruct.PLL3.PLL3Q = 10;
 8007e42:	230a      	movs	r3, #10
 8007e44:	64fb      	str	r3, [r7, #76]	@ 0x4c
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8007e46:	2302      	movs	r3, #2
 8007e48:	653b      	str	r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_0;
 8007e4a:	2300      	movs	r3, #0
 8007e4c:	657b      	str	r3, [r7, #84]	@ 0x54
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 8007e4e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007e52:	65bb      	str	r3, [r7, #88]	@ 0x58
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8007e54:	2300      	movs	r3, #0
 8007e56:	65fb      	str	r3, [r7, #92]	@ 0x5c
    PeriphClkInitStruct.Spi6ClockSelection = RCC_SPI6CLKSOURCE_PLL3;
 8007e58:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8007e5c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007e60:	f107 0318 	add.w	r3, r7, #24
 8007e64:	4618      	mov	r0, r3
 8007e66:	f009 ff7f 	bl	8011d68 <HAL_RCCEx_PeriphCLKConfig>
 8007e6a:	4603      	mov	r3, r0
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d001      	beq.n	8007e74 <HAL_SPI_MspInit+0x198>
      Error_Handler();
 8007e70:	f7ff fe82 	bl	8007b78 <Error_Handler>
    __HAL_RCC_SPI6_CLK_ENABLE();
 8007e74:	4b1c      	ldr	r3, [pc, #112]	@ (8007ee8 <HAL_SPI_MspInit+0x20c>)
 8007e76:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007e7a:	4a1b      	ldr	r2, [pc, #108]	@ (8007ee8 <HAL_SPI_MspInit+0x20c>)
 8007e7c:	f043 0320 	orr.w	r3, r3, #32
 8007e80:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8007e84:	4b18      	ldr	r3, [pc, #96]	@ (8007ee8 <HAL_SPI_MspInit+0x20c>)
 8007e86:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007e8a:	f003 0320 	and.w	r3, r3, #32
 8007e8e:	60fb      	str	r3, [r7, #12]
 8007e90:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007e92:	4b15      	ldr	r3, [pc, #84]	@ (8007ee8 <HAL_SPI_MspInit+0x20c>)
 8007e94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007e98:	4a13      	ldr	r2, [pc, #76]	@ (8007ee8 <HAL_SPI_MspInit+0x20c>)
 8007e9a:	f043 0302 	orr.w	r3, r3, #2
 8007e9e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8007ea2:	4b11      	ldr	r3, [pc, #68]	@ (8007ee8 <HAL_SPI_MspInit+0x20c>)
 8007ea4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007ea8:	f003 0302 	and.w	r3, r3, #2
 8007eac:	60bb      	str	r3, [r7, #8]
 8007eae:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8007eb0:	2338      	movs	r3, #56	@ 0x38
 8007eb2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007eb6:	2302      	movs	r3, #2
 8007eb8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_SPI6;
 8007ec8:	2308      	movs	r3, #8
 8007eca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007ece:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8007ed2:	4619      	mov	r1, r3
 8007ed4:	4805      	ldr	r0, [pc, #20]	@ (8007eec <HAL_SPI_MspInit+0x210>)
 8007ed6:	f006 f935 	bl	800e144 <HAL_GPIO_Init>
}
 8007eda:	bf00      	nop
 8007edc:	37e8      	adds	r7, #232	@ 0xe8
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	bd80      	pop	{r7, pc}
 8007ee2:	bf00      	nop
 8007ee4:	40003800 	.word	0x40003800
 8007ee8:	58024400 	.word	0x58024400
 8007eec:	58020400 	.word	0x58020400
 8007ef0:	240002fc 	.word	0x240002fc
 8007ef4:	40020010 	.word	0x40020010
 8007ef8:	58001400 	.word	0x58001400

08007efc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007efc:	b480      	push	{r7}
 8007efe:	b083      	sub	sp, #12
 8007f00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007f02:	4b0a      	ldr	r3, [pc, #40]	@ (8007f2c <HAL_MspInit+0x30>)
 8007f04:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007f08:	4a08      	ldr	r2, [pc, #32]	@ (8007f2c <HAL_MspInit+0x30>)
 8007f0a:	f043 0302 	orr.w	r3, r3, #2
 8007f0e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8007f12:	4b06      	ldr	r3, [pc, #24]	@ (8007f2c <HAL_MspInit+0x30>)
 8007f14:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007f18:	f003 0302 	and.w	r3, r3, #2
 8007f1c:	607b      	str	r3, [r7, #4]
 8007f1e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007f20:	bf00      	nop
 8007f22:	370c      	adds	r7, #12
 8007f24:	46bd      	mov	sp, r7
 8007f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2a:	4770      	bx	lr
 8007f2c:	58024400 	.word	0x58024400

08007f30 <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint32_t FatFsCnt = 0;
volatile uint32_t Timer1, Timer2;

void SDTimer_Handler(void)//1ms
{
 8007f30:	b480      	push	{r7}
 8007f32:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 8007f34:	4b0b      	ldr	r3, [pc, #44]	@ (8007f64 <SDTimer_Handler+0x34>)
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d004      	beq.n	8007f46 <SDTimer_Handler+0x16>
    Timer1--;
 8007f3c:	4b09      	ldr	r3, [pc, #36]	@ (8007f64 <SDTimer_Handler+0x34>)
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	3b01      	subs	r3, #1
 8007f42:	4a08      	ldr	r2, [pc, #32]	@ (8007f64 <SDTimer_Handler+0x34>)
 8007f44:	6013      	str	r3, [r2, #0]

  if(Timer2 > 0)
 8007f46:	4b08      	ldr	r3, [pc, #32]	@ (8007f68 <SDTimer_Handler+0x38>)
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d004      	beq.n	8007f58 <SDTimer_Handler+0x28>
    Timer2--;
 8007f4e:	4b06      	ldr	r3, [pc, #24]	@ (8007f68 <SDTimer_Handler+0x38>)
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	3b01      	subs	r3, #1
 8007f54:	4a04      	ldr	r2, [pc, #16]	@ (8007f68 <SDTimer_Handler+0x38>)
 8007f56:	6013      	str	r3, [r2, #0]
}
 8007f58:	bf00      	nop
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f60:	4770      	bx	lr
 8007f62:	bf00      	nop
 8007f64:	24000378 	.word	0x24000378
 8007f68:	2400037c 	.word	0x2400037c
 8007f6c:	00000000 	.word	0x00000000

08007f70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007f70:	b580      	push	{r7, lr}
 8007f72:	b082      	sub	sp, #8
 8007f74:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */


	LED_G_0;
 8007f76:	2200      	movs	r2, #0
 8007f78:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007f7c:	48bc      	ldr	r0, [pc, #752]	@ (8008270 <NMI_Handler+0x300>)
 8007f7e:	f006 faa1 	bl	800e4c4 <HAL_GPIO_WritePin>
	LED_Y_0;
 8007f82:	2200      	movs	r2, #0
 8007f84:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8007f88:	48ba      	ldr	r0, [pc, #744]	@ (8008274 <NMI_Handler+0x304>)
 8007f8a:	f006 fa9b 	bl	800e4c4 <HAL_GPIO_WritePin>
	LED_R_1;
 8007f8e:	2201      	movs	r2, #1
 8007f90:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8007f94:	48b7      	ldr	r0, [pc, #732]	@ (8008274 <NMI_Handler+0x304>)
 8007f96:	f006 fa95 	bl	800e4c4 <HAL_GPIO_WritePin>
//todo create crash log
	f_close(&fil);
 8007f9a:	48b7      	ldr	r0, [pc, #732]	@ (8008278 <NMI_Handler+0x308>)
 8007f9c:	f015 fd2a 	bl	801d9f4 <f_close>

	wanted_rool = 0;
 8007fa0:	4bb6      	ldr	r3, [pc, #728]	@ (800827c <NMI_Handler+0x30c>)
 8007fa2:	f04f 0200 	mov.w	r2, #0
 8007fa6:	601a      	str	r2, [r3, #0]
	wanted_pitch = 0;
 8007fa8:	4bb5      	ldr	r3, [pc, #724]	@ (8008280 <NMI_Handler+0x310>)
 8007faa:	f04f 0200 	mov.w	r2, #0
 8007fae:	601a      	str	r2, [r3, #0]
	wanted_yaw = 0;
 8007fb0:	4bb4      	ldr	r3, [pc, #720]	@ (8008284 <NMI_Handler+0x314>)
 8007fb2:	f04f 0200 	mov.w	r2, #0
 8007fb6:	601a      	str	r2, [r3, #0]
	wanted_thrust = DRON_SLOWFALING;
 8007fb8:	4bb3      	ldr	r3, [pc, #716]	@ (8008288 <NMI_Handler+0x318>)
 8007fba:	881b      	ldrh	r3, [r3, #0]
 8007fbc:	b21a      	sxth	r2, r3
 8007fbe:	4bb3      	ldr	r3, [pc, #716]	@ (800828c <NMI_Handler+0x31c>)
 8007fc0:	801a      	strh	r2, [r3, #0]
  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
  {
	   	HAL_Delay(1);
 8007fc2:	2001      	movs	r0, #1
 8007fc4:	f001 f942 	bl	800924c <HAL_Delay>
		MPU6050_GET_ACCANDGYR_CALANDSCL(&ax, &ay, &az, &gx, &gy, &gz, accelx_cal, accely_cal, accelz_cal, gyrox_cal, gyroy_cal, gyroz_cal, Gyr_Scale, Acc_Scale);
 8007fc8:	4bb1      	ldr	r3, [pc, #708]	@ (8008290 <NMI_Handler+0x320>)
 8007fca:	edd3 7a00 	vldr	s15, [r3]
 8007fce:	4bb1      	ldr	r3, [pc, #708]	@ (8008294 <NMI_Handler+0x324>)
 8007fd0:	ed93 7a00 	vldr	s14, [r3]
 8007fd4:	4bb0      	ldr	r3, [pc, #704]	@ (8008298 <NMI_Handler+0x328>)
 8007fd6:	edd3 6a00 	vldr	s13, [r3]
 8007fda:	4bb0      	ldr	r3, [pc, #704]	@ (800829c <NMI_Handler+0x32c>)
 8007fdc:	ed93 6a00 	vldr	s12, [r3]
 8007fe0:	4baf      	ldr	r3, [pc, #700]	@ (80082a0 <NMI_Handler+0x330>)
 8007fe2:	edd3 5a00 	vldr	s11, [r3]
 8007fe6:	4baf      	ldr	r3, [pc, #700]	@ (80082a4 <NMI_Handler+0x334>)
 8007fe8:	ed93 5a00 	vldr	s10, [r3]
 8007fec:	4bae      	ldr	r3, [pc, #696]	@ (80082a8 <NMI_Handler+0x338>)
 8007fee:	edd3 4a00 	vldr	s9, [r3]
 8007ff2:	4bae      	ldr	r3, [pc, #696]	@ (80082ac <NMI_Handler+0x33c>)
 8007ff4:	ed93 4a00 	vldr	s8, [r3]
 8007ff8:	4bad      	ldr	r3, [pc, #692]	@ (80082b0 <NMI_Handler+0x340>)
 8007ffa:	9301      	str	r3, [sp, #4]
 8007ffc:	4bad      	ldr	r3, [pc, #692]	@ (80082b4 <NMI_Handler+0x344>)
 8007ffe:	9300      	str	r3, [sp, #0]
 8008000:	eef0 3a44 	vmov.f32	s7, s8
 8008004:	eeb0 3a64 	vmov.f32	s6, s9
 8008008:	eef0 2a45 	vmov.f32	s5, s10
 800800c:	eeb0 2a65 	vmov.f32	s4, s11
 8008010:	eef0 1a46 	vmov.f32	s3, s12
 8008014:	eeb0 1a66 	vmov.f32	s2, s13
 8008018:	eef0 0a47 	vmov.f32	s1, s14
 800801c:	eeb0 0a67 	vmov.f32	s0, s15
 8008020:	4ba5      	ldr	r3, [pc, #660]	@ (80082b8 <NMI_Handler+0x348>)
 8008022:	4aa6      	ldr	r2, [pc, #664]	@ (80082bc <NMI_Handler+0x34c>)
 8008024:	49a6      	ldr	r1, [pc, #664]	@ (80082c0 <NMI_Handler+0x350>)
 8008026:	48a7      	ldr	r0, [pc, #668]	@ (80082c4 <NMI_Handler+0x354>)
 8008028:	f7f9 fadc 	bl	80015e4 <MPU6050_GET_ACCANDGYR_CALANDSCL>
		MPU6050_GET_ACCEL_TO_ANGLE(ax, ay, az, &ax_ang, &ay_ang/*, &az_ang*/);
 800802c:	4ba5      	ldr	r3, [pc, #660]	@ (80082c4 <NMI_Handler+0x354>)
 800802e:	edd3 7a00 	vldr	s15, [r3]
 8008032:	4ba3      	ldr	r3, [pc, #652]	@ (80082c0 <NMI_Handler+0x350>)
 8008034:	ed93 7a00 	vldr	s14, [r3]
 8008038:	4ba0      	ldr	r3, [pc, #640]	@ (80082bc <NMI_Handler+0x34c>)
 800803a:	edd3 6a00 	vldr	s13, [r3]
 800803e:	49a2      	ldr	r1, [pc, #648]	@ (80082c8 <NMI_Handler+0x358>)
 8008040:	48a2      	ldr	r0, [pc, #648]	@ (80082cc <NMI_Handler+0x35c>)
 8008042:	eeb0 1a66 	vmov.f32	s2, s13
 8008046:	eef0 0a47 	vmov.f32	s1, s14
 800804a:	eeb0 0a67 	vmov.f32	s0, s15
 800804e:	f7f9 fa4b 	bl	80014e8 <MPU6050_GET_ACCEL_TO_ANGLE>
		MPU6050_GET_ACCANDGYR_FILTRED(&data, ax_ang, ay_ang, Mag_Z, gx, gy, gz);
 8008052:	4b9e      	ldr	r3, [pc, #632]	@ (80082cc <NMI_Handler+0x35c>)
 8008054:	edd3 7a00 	vldr	s15, [r3]
 8008058:	4b9b      	ldr	r3, [pc, #620]	@ (80082c8 <NMI_Handler+0x358>)
 800805a:	ed93 7a00 	vldr	s14, [r3]
 800805e:	4b9c      	ldr	r3, [pc, #624]	@ (80082d0 <NMI_Handler+0x360>)
 8008060:	edd3 6a00 	vldr	s13, [r3]
 8008064:	4b94      	ldr	r3, [pc, #592]	@ (80082b8 <NMI_Handler+0x348>)
 8008066:	ed93 6a00 	vldr	s12, [r3]
 800806a:	4b92      	ldr	r3, [pc, #584]	@ (80082b4 <NMI_Handler+0x344>)
 800806c:	edd3 5a00 	vldr	s11, [r3]
 8008070:	4b8f      	ldr	r3, [pc, #572]	@ (80082b0 <NMI_Handler+0x340>)
 8008072:	ed93 5a00 	vldr	s10, [r3]
 8008076:	eef0 2a45 	vmov.f32	s5, s10
 800807a:	eeb0 2a65 	vmov.f32	s4, s11
 800807e:	eef0 1a46 	vmov.f32	s3, s12
 8008082:	eeb0 1a66 	vmov.f32	s2, s13
 8008086:	eef0 0a47 	vmov.f32	s1, s14
 800808a:	eeb0 0a67 	vmov.f32	s0, s15
 800808e:	4891      	ldr	r0, [pc, #580]	@ (80082d4 <NMI_Handler+0x364>)
 8008090:	f7f9 fc22 	bl	80018d8 <MPU6050_GET_ACCANDGYR_FILTRED>


		now_pitch = data.x;
 8008094:	4b8f      	ldr	r3, [pc, #572]	@ (80082d4 <NMI_Handler+0x364>)
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	4a8f      	ldr	r2, [pc, #572]	@ (80082d8 <NMI_Handler+0x368>)
 800809a:	6013      	str	r3, [r2, #0]
		now_rool = data.y;
 800809c:	4b8d      	ldr	r3, [pc, #564]	@ (80082d4 <NMI_Handler+0x364>)
 800809e:	685b      	ldr	r3, [r3, #4]
 80080a0:	4a8e      	ldr	r2, [pc, #568]	@ (80082dc <NMI_Handler+0x36c>)
 80080a2:	6013      	str	r3, [r2, #0]
		now_yaw = data.z;
 80080a4:	4b8b      	ldr	r3, [pc, #556]	@ (80082d4 <NMI_Handler+0x364>)
 80080a6:	689b      	ldr	r3, [r3, #8]
 80080a8:	4a8d      	ldr	r2, [pc, #564]	@ (80082e0 <NMI_Handler+0x370>)
 80080aa:	6013      	str	r3, [r2, #0]


		last_wanted_rool_rx = wanted_rool;
 80080ac:	4b73      	ldr	r3, [pc, #460]	@ (800827c <NMI_Handler+0x30c>)
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	4a8c      	ldr	r2, [pc, #560]	@ (80082e4 <NMI_Handler+0x374>)
 80080b2:	6013      	str	r3, [r2, #0]
		last_wanted_pitch_rx = wanted_pitch;
 80080b4:	4b72      	ldr	r3, [pc, #456]	@ (8008280 <NMI_Handler+0x310>)
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	4a8b      	ldr	r2, [pc, #556]	@ (80082e8 <NMI_Handler+0x378>)
 80080ba:	6013      	str	r3, [r2, #0]
		last_wanted_yaw_rx = wanted_yaw;
 80080bc:	4b71      	ldr	r3, [pc, #452]	@ (8008284 <NMI_Handler+0x314>)
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	4a8a      	ldr	r2, [pc, #552]	@ (80082ec <NMI_Handler+0x37c>)
 80080c2:	6013      	str	r3, [r2, #0]


		error_sum_pitch = error_sum_pitch + (wanted_pitch - now_pitch);
 80080c4:	4b8a      	ldr	r3, [pc, #552]	@ (80082f0 <NMI_Handler+0x380>)
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	ee07 3a90 	vmov	s15, r3
 80080cc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80080d0:	4b6b      	ldr	r3, [pc, #428]	@ (8008280 <NMI_Handler+0x310>)
 80080d2:	edd3 6a00 	vldr	s13, [r3]
 80080d6:	4b80      	ldr	r3, [pc, #512]	@ (80082d8 <NMI_Handler+0x368>)
 80080d8:	edd3 7a00 	vldr	s15, [r3]
 80080dc:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80080e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80080e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80080e8:	ee17 2a90 	vmov	r2, s15
 80080ec:	4b80      	ldr	r3, [pc, #512]	@ (80082f0 <NMI_Handler+0x380>)
 80080ee:	601a      	str	r2, [r3, #0]
		error_sum_rool = error_sum_rool + (wanted_rool - now_rool);
 80080f0:	4b80      	ldr	r3, [pc, #512]	@ (80082f4 <NMI_Handler+0x384>)
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	ee07 3a90 	vmov	s15, r3
 80080f8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80080fc:	4b5f      	ldr	r3, [pc, #380]	@ (800827c <NMI_Handler+0x30c>)
 80080fe:	edd3 6a00 	vldr	s13, [r3]
 8008102:	4b76      	ldr	r3, [pc, #472]	@ (80082dc <NMI_Handler+0x36c>)
 8008104:	edd3 7a00 	vldr	s15, [r3]
 8008108:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800810c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008110:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008114:	ee17 2a90 	vmov	r2, s15
 8008118:	4b76      	ldr	r3, [pc, #472]	@ (80082f4 <NMI_Handler+0x384>)
 800811a:	601a      	str	r2, [r3, #0]
		error_sum_yaw = error_sum_yaw + (wanted_yaw - now_yaw);
 800811c:	4b76      	ldr	r3, [pc, #472]	@ (80082f8 <NMI_Handler+0x388>)
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	ee07 3a90 	vmov	s15, r3
 8008124:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008128:	4b56      	ldr	r3, [pc, #344]	@ (8008284 <NMI_Handler+0x314>)
 800812a:	edd3 6a00 	vldr	s13, [r3]
 800812e:	4b6c      	ldr	r3, [pc, #432]	@ (80082e0 <NMI_Handler+0x370>)
 8008130:	edd3 7a00 	vldr	s15, [r3]
 8008134:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8008138:	ee77 7a27 	vadd.f32	s15, s14, s15
 800813c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008140:	ee17 2a90 	vmov	r2, s15
 8008144:	4b6c      	ldr	r3, [pc, #432]	@ (80082f8 <NMI_Handler+0x388>)
 8008146:	601a      	str	r2, [r3, #0]

		error_sum_angular_rate_pitch = error_sum_angular_rate_pitch + (pid_pitch - gx);
 8008148:	4b6c      	ldr	r3, [pc, #432]	@ (80082fc <NMI_Handler+0x38c>)
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	ee07 3a90 	vmov	s15, r3
 8008150:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008154:	4b6a      	ldr	r3, [pc, #424]	@ (8008300 <NMI_Handler+0x390>)
 8008156:	edd3 6a00 	vldr	s13, [r3]
 800815a:	4b57      	ldr	r3, [pc, #348]	@ (80082b8 <NMI_Handler+0x348>)
 800815c:	edd3 7a00 	vldr	s15, [r3]
 8008160:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8008164:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008168:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800816c:	ee17 2a90 	vmov	r2, s15
 8008170:	4b62      	ldr	r3, [pc, #392]	@ (80082fc <NMI_Handler+0x38c>)
 8008172:	601a      	str	r2, [r3, #0]
		error_sum_angular_rate_rool = error_sum_angular_rate_rool + (pid_rool - gy);
 8008174:	4b63      	ldr	r3, [pc, #396]	@ (8008304 <NMI_Handler+0x394>)
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	ee07 3a90 	vmov	s15, r3
 800817c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008180:	4b61      	ldr	r3, [pc, #388]	@ (8008308 <NMI_Handler+0x398>)
 8008182:	edd3 6a00 	vldr	s13, [r3]
 8008186:	4b4b      	ldr	r3, [pc, #300]	@ (80082b4 <NMI_Handler+0x344>)
 8008188:	edd3 7a00 	vldr	s15, [r3]
 800818c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8008190:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008194:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008198:	ee17 2a90 	vmov	r2, s15
 800819c:	4b59      	ldr	r3, [pc, #356]	@ (8008304 <NMI_Handler+0x394>)
 800819e:	601a      	str	r2, [r3, #0]
		error_sum_angular_rate_yaw = error_sum_angular_rate_yaw + (pid_yaw - gz);
 80081a0:	4b5a      	ldr	r3, [pc, #360]	@ (800830c <NMI_Handler+0x39c>)
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	ee07 3a90 	vmov	s15, r3
 80081a8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80081ac:	4b58      	ldr	r3, [pc, #352]	@ (8008310 <NMI_Handler+0x3a0>)
 80081ae:	edd3 6a00 	vldr	s13, [r3]
 80081b2:	4b3f      	ldr	r3, [pc, #252]	@ (80082b0 <NMI_Handler+0x340>)
 80081b4:	edd3 7a00 	vldr	s15, [r3]
 80081b8:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80081bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80081c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80081c4:	ee17 2a90 	vmov	r2, s15
 80081c8:	4b50      	ldr	r3, [pc, #320]	@ (800830c <NMI_Handler+0x39c>)
 80081ca:	601a      	str	r2, [r3, #0]


		PID_cal(&pid_pitch, PID_FAC_Pitch, 1);// angle control
 80081cc:	2201      	movs	r2, #1
 80081ce:	4951      	ldr	r1, [pc, #324]	@ (8008314 <NMI_Handler+0x3a4>)
 80081d0:	484b      	ldr	r0, [pc, #300]	@ (8008300 <NMI_Handler+0x390>)
 80081d2:	f7fb fbfb 	bl	80039cc <PID_cal>
		PID_cal(&pid_rool, PID_FAC_Rool, 2);
 80081d6:	2202      	movs	r2, #2
 80081d8:	494f      	ldr	r1, [pc, #316]	@ (8008318 <NMI_Handler+0x3a8>)
 80081da:	484b      	ldr	r0, [pc, #300]	@ (8008308 <NMI_Handler+0x398>)
 80081dc:	f7fb fbf6 	bl	80039cc <PID_cal>

		PID_cal(&pid_angular_rate_pitch, PID_FAC_Angular_Rate_Pitch, 4);// angle rate control
 80081e0:	2204      	movs	r2, #4
 80081e2:	494e      	ldr	r1, [pc, #312]	@ (800831c <NMI_Handler+0x3ac>)
 80081e4:	484e      	ldr	r0, [pc, #312]	@ (8008320 <NMI_Handler+0x3b0>)
 80081e6:	f7fb fbf1 	bl	80039cc <PID_cal>
		PID_cal(&pid_angular_rate_rool, PID_FAC_Angular_Rate_Rool, 5);
 80081ea:	2205      	movs	r2, #5
 80081ec:	494d      	ldr	r1, [pc, #308]	@ (8008324 <NMI_Handler+0x3b4>)
 80081ee:	484e      	ldr	r0, [pc, #312]	@ (8008328 <NMI_Handler+0x3b8>)
 80081f0:	f7fb fbec 	bl	80039cc <PID_cal>
		PID_cal(&pid_angular_rate_yaw, PID_FAC_Angular_Rate_Yaw, 6);
 80081f4:	2206      	movs	r2, #6
 80081f6:	494d      	ldr	r1, [pc, #308]	@ (800832c <NMI_Handler+0x3bc>)
 80081f8:	484d      	ldr	r0, [pc, #308]	@ (8008330 <NMI_Handler+0x3c0>)
 80081fa:	f7fb fbe7 	bl	80039cc <PID_cal>


		old_error_pitch = wanted_pitch - now_pitch;
 80081fe:	4b20      	ldr	r3, [pc, #128]	@ (8008280 <NMI_Handler+0x310>)
 8008200:	ed93 7a00 	vldr	s14, [r3]
 8008204:	4b34      	ldr	r3, [pc, #208]	@ (80082d8 <NMI_Handler+0x368>)
 8008206:	edd3 7a00 	vldr	s15, [r3]
 800820a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800820e:	4b49      	ldr	r3, [pc, #292]	@ (8008334 <NMI_Handler+0x3c4>)
 8008210:	edc3 7a00 	vstr	s15, [r3]
		old_error_rool = wanted_rool - now_rool;
 8008214:	4b19      	ldr	r3, [pc, #100]	@ (800827c <NMI_Handler+0x30c>)
 8008216:	ed93 7a00 	vldr	s14, [r3]
 800821a:	4b30      	ldr	r3, [pc, #192]	@ (80082dc <NMI_Handler+0x36c>)
 800821c:	edd3 7a00 	vldr	s15, [r3]
 8008220:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008224:	4b44      	ldr	r3, [pc, #272]	@ (8008338 <NMI_Handler+0x3c8>)
 8008226:	edc3 7a00 	vstr	s15, [r3]

		old_error_angular_rate_pitch = pid_pitch - gx;
 800822a:	4b35      	ldr	r3, [pc, #212]	@ (8008300 <NMI_Handler+0x390>)
 800822c:	ed93 7a00 	vldr	s14, [r3]
 8008230:	4b21      	ldr	r3, [pc, #132]	@ (80082b8 <NMI_Handler+0x348>)
 8008232:	edd3 7a00 	vldr	s15, [r3]
 8008236:	ee77 7a67 	vsub.f32	s15, s14, s15
 800823a:	4b40      	ldr	r3, [pc, #256]	@ (800833c <NMI_Handler+0x3cc>)
 800823c:	edc3 7a00 	vstr	s15, [r3]
		old_error_angular_rate_rool = pid_rool - gy;
 8008240:	4b31      	ldr	r3, [pc, #196]	@ (8008308 <NMI_Handler+0x398>)
 8008242:	ed93 7a00 	vldr	s14, [r3]
 8008246:	4b1b      	ldr	r3, [pc, #108]	@ (80082b4 <NMI_Handler+0x344>)
 8008248:	edd3 7a00 	vldr	s15, [r3]
 800824c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008250:	4b3b      	ldr	r3, [pc, #236]	@ (8008340 <NMI_Handler+0x3d0>)
 8008252:	edc3 7a00 	vstr	s15, [r3]
		old_error_angular_rate_yaw = wanted_yaw - gz;
 8008256:	4b0b      	ldr	r3, [pc, #44]	@ (8008284 <NMI_Handler+0x314>)
 8008258:	ed93 7a00 	vldr	s14, [r3]
 800825c:	4b14      	ldr	r3, [pc, #80]	@ (80082b0 <NMI_Handler+0x340>)
 800825e:	edd3 7a00 	vldr	s15, [r3]
 8008262:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008266:	4b37      	ldr	r3, [pc, #220]	@ (8008344 <NMI_Handler+0x3d4>)
 8008268:	edc3 7a00 	vstr	s15, [r3]
 800826c:	e06c      	b.n	8008348 <NMI_Handler+0x3d8>
 800826e:	bf00      	nop
 8008270:	58021000 	.word	0x58021000
 8008274:	58020400 	.word	0x58020400
 8008278:	24001ef0 	.word	0x24001ef0
 800827c:	0000406c 	.word	0x0000406c
 8008280:	00004068 	.word	0x00004068
 8008284:	00004070 	.word	0x00004070
 8008288:	0801e8a8 	.word	0x0801e8a8
 800828c:	0000405c 	.word	0x0000405c
 8008290:	00000030 	.word	0x00000030
 8008294:	00000034 	.word	0x00000034
 8008298:	00000038 	.word	0x00000038
 800829c:	0000003c 	.word	0x0000003c
 80082a0:	00000040 	.word	0x00000040
 80082a4:	00000044 	.word	0x00000044
 80082a8:	0801e89c 	.word	0x0801e89c
 80082ac:	0801e8a0 	.word	0x0801e8a0
 80082b0:	00000014 	.word	0x00000014
 80082b4:	00000010 	.word	0x00000010
 80082b8:	0000000c 	.word	0x0000000c
 80082bc:	00000008 	.word	0x00000008
 80082c0:	00000004 	.word	0x00000004
 80082c4:	00000000 	.word	0x00000000
 80082c8:	0000001c 	.word	0x0000001c
 80082cc:	00000018 	.word	0x00000018
 80082d0:	00000058 	.word	0x00000058
 80082d4:	0000007c 	.word	0x0000007c
 80082d8:	00004078 	.word	0x00004078
 80082dc:	0000407c 	.word	0x0000407c
 80082e0:	00004080 	.word	0x00004080
 80082e4:	00004054 	.word	0x00004054
 80082e8:	00004050 	.word	0x00004050
 80082ec:	00004058 	.word	0x00004058
 80082f0:	0000409c 	.word	0x0000409c
 80082f4:	000040a0 	.word	0x000040a0
 80082f8:	000040a4 	.word	0x000040a4
 80082fc:	000040a8 	.word	0x000040a8
 8008300:	000040b4 	.word	0x000040b4
 8008304:	000040ac 	.word	0x000040ac
 8008308:	000040bc 	.word	0x000040bc
 800830c:	000040b0 	.word	0x000040b0
 8008310:	000040b8 	.word	0x000040b8
 8008314:	000040f0 	.word	0x000040f0
 8008318:	00004104 	.word	0x00004104
 800831c:	00004150 	.word	0x00004150
 8008320:	000040c0 	.word	0x000040c0
 8008324:	00004164 	.word	0x00004164
 8008328:	000040c8 	.word	0x000040c8
 800832c:	00004178 	.word	0x00004178
 8008330:	000040c4 	.word	0x000040c4
 8008334:	00004084 	.word	0x00004084
 8008338:	00004088 	.word	0x00004088
 800833c:	00004090 	.word	0x00004090
 8008340:	00004094 	.word	0x00004094
 8008344:	00004098 	.word	0x00004098


		MYDRON.ROOL = pid_angular_rate_rool;
 8008348:	4b99      	ldr	r3, [pc, #612]	@ (80085b0 <NMI_Handler+0x640>)
 800834a:	edd3 7a00 	vldr	s15, [r3]
 800834e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008352:	ee17 3a90 	vmov	r3, s15
 8008356:	b21a      	sxth	r2, r3
 8008358:	4b96      	ldr	r3, [pc, #600]	@ (80085b4 <NMI_Handler+0x644>)
 800835a:	80da      	strh	r2, [r3, #6]
		MYDRON.PITCH = pid_angular_rate_pitch;
 800835c:	4b96      	ldr	r3, [pc, #600]	@ (80085b8 <NMI_Handler+0x648>)
 800835e:	edd3 7a00 	vldr	s15, [r3]
 8008362:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008366:	ee17 3a90 	vmov	r3, s15
 800836a:	b21a      	sxth	r2, r3
 800836c:	4b91      	ldr	r3, [pc, #580]	@ (80085b4 <NMI_Handler+0x644>)
 800836e:	809a      	strh	r2, [r3, #4]
		MYDRON.YAW = pid_angular_rate_yaw;
 8008370:	4b92      	ldr	r3, [pc, #584]	@ (80085bc <NMI_Handler+0x64c>)
 8008372:	edd3 7a00 	vldr	s15, [r3]
 8008376:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800837a:	ee17 3a90 	vmov	r3, s15
 800837e:	b21a      	sxth	r2, r3
 8008380:	4b8c      	ldr	r3, [pc, #560]	@ (80085b4 <NMI_Handler+0x644>)
 8008382:	811a      	strh	r2, [r3, #8]



		Thrust_filter(1);
 8008384:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 8008388:	f7fb f9ea 	bl	8003760 <Thrust_filter>
		if(MYDRON.THRUST > thrust_limit){
 800838c:	4b89      	ldr	r3, [pc, #548]	@ (80085b4 <NMI_Handler+0x644>)
 800838e:	885b      	ldrh	r3, [r3, #2]
 8008390:	461a      	mov	r2, r3
 8008392:	4b8b      	ldr	r3, [pc, #556]	@ (80085c0 <NMI_Handler+0x650>)
 8008394:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008398:	429a      	cmp	r2, r3
 800839a:	dd05      	ble.n	80083a8 <NMI_Handler+0x438>
			MYDRON.THRUST = thrust_limit;
 800839c:	4b88      	ldr	r3, [pc, #544]	@ (80085c0 <NMI_Handler+0x650>)
 800839e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80083a2:	b29a      	uxth	r2, r3
 80083a4:	4b83      	ldr	r3, [pc, #524]	@ (80085b4 <NMI_Handler+0x644>)
 80083a6:	805a      	strh	r2, [r3, #2]
		}


		SPEED1 = (MYDRON.THRUST*0.7)+ MYDRON.ROOL - MYDRON.PITCH + MYDRON.YAW + min_speed + 500;//trust 7000 max
 80083a8:	4b82      	ldr	r3, [pc, #520]	@ (80085b4 <NMI_Handler+0x644>)
 80083aa:	885b      	ldrh	r3, [r3, #2]
 80083ac:	ee07 3a90 	vmov	s15, r3
 80083b0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80083b4:	ed9f 6b78 	vldr	d6, [pc, #480]	@ 8008598 <NMI_Handler+0x628>
 80083b8:	ee27 6b06 	vmul.f64	d6, d7, d6
 80083bc:	4b7d      	ldr	r3, [pc, #500]	@ (80085b4 <NMI_Handler+0x644>)
 80083be:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80083c2:	ee07 3a90 	vmov	s15, r3
 80083c6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80083ca:	ee36 6b07 	vadd.f64	d6, d6, d7
 80083ce:	4b79      	ldr	r3, [pc, #484]	@ (80085b4 <NMI_Handler+0x644>)
 80083d0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80083d4:	ee07 3a90 	vmov	s15, r3
 80083d8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80083dc:	ee36 6b47 	vsub.f64	d6, d6, d7
 80083e0:	4b74      	ldr	r3, [pc, #464]	@ (80085b4 <NMI_Handler+0x644>)
 80083e2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80083e6:	ee07 3a90 	vmov	s15, r3
 80083ea:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80083ee:	ee36 7b07 	vadd.f64	d7, d6, d7
 80083f2:	ed9f 6b6b 	vldr	d6, [pc, #428]	@ 80085a0 <NMI_Handler+0x630>
 80083f6:	ee37 7b06 	vadd.f64	d7, d7, d6
 80083fa:	ed9f 6b6b 	vldr	d6, [pc, #428]	@ 80085a8 <NMI_Handler+0x638>
 80083fe:	ee37 7b06 	vadd.f64	d7, d7, d6
 8008402:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8008406:	ee17 3a90 	vmov	r3, s15
 800840a:	b29a      	uxth	r2, r3
 800840c:	4b6d      	ldr	r3, [pc, #436]	@ (80085c4 <NMI_Handler+0x654>)
 800840e:	801a      	strh	r2, [r3, #0]
		SPEED2 = (MYDRON.THRUST*0.7)- MYDRON.ROOL - MYDRON.PITCH - MYDRON.YAW + min_speed + 500;//
 8008410:	4b68      	ldr	r3, [pc, #416]	@ (80085b4 <NMI_Handler+0x644>)
 8008412:	885b      	ldrh	r3, [r3, #2]
 8008414:	ee07 3a90 	vmov	s15, r3
 8008418:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800841c:	ed9f 6b5e 	vldr	d6, [pc, #376]	@ 8008598 <NMI_Handler+0x628>
 8008420:	ee27 6b06 	vmul.f64	d6, d7, d6
 8008424:	4b63      	ldr	r3, [pc, #396]	@ (80085b4 <NMI_Handler+0x644>)
 8008426:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800842a:	ee07 3a90 	vmov	s15, r3
 800842e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8008432:	ee36 6b47 	vsub.f64	d6, d6, d7
 8008436:	4b5f      	ldr	r3, [pc, #380]	@ (80085b4 <NMI_Handler+0x644>)
 8008438:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800843c:	ee07 3a90 	vmov	s15, r3
 8008440:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8008444:	ee36 6b47 	vsub.f64	d6, d6, d7
 8008448:	4b5a      	ldr	r3, [pc, #360]	@ (80085b4 <NMI_Handler+0x644>)
 800844a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800844e:	ee07 3a90 	vmov	s15, r3
 8008452:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8008456:	ee36 7b47 	vsub.f64	d7, d6, d7
 800845a:	ed9f 6b51 	vldr	d6, [pc, #324]	@ 80085a0 <NMI_Handler+0x630>
 800845e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8008462:	ed9f 6b51 	vldr	d6, [pc, #324]	@ 80085a8 <NMI_Handler+0x638>
 8008466:	ee37 7b06 	vadd.f64	d7, d7, d6
 800846a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800846e:	ee17 3a90 	vmov	r3, s15
 8008472:	b29a      	uxth	r2, r3
 8008474:	4b54      	ldr	r3, [pc, #336]	@ (80085c8 <NMI_Handler+0x658>)
 8008476:	801a      	strh	r2, [r3, #0]
		SPEED3 = (MYDRON.THRUST*0.7)+ MYDRON.ROOL + MYDRON.PITCH - MYDRON.YAW + min_speed + 500;//
 8008478:	4b4e      	ldr	r3, [pc, #312]	@ (80085b4 <NMI_Handler+0x644>)
 800847a:	885b      	ldrh	r3, [r3, #2]
 800847c:	ee07 3a90 	vmov	s15, r3
 8008480:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8008484:	ed9f 6b44 	vldr	d6, [pc, #272]	@ 8008598 <NMI_Handler+0x628>
 8008488:	ee27 6b06 	vmul.f64	d6, d7, d6
 800848c:	4b49      	ldr	r3, [pc, #292]	@ (80085b4 <NMI_Handler+0x644>)
 800848e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8008492:	ee07 3a90 	vmov	s15, r3
 8008496:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800849a:	ee36 6b07 	vadd.f64	d6, d6, d7
 800849e:	4b45      	ldr	r3, [pc, #276]	@ (80085b4 <NMI_Handler+0x644>)
 80084a0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80084a4:	ee07 3a90 	vmov	s15, r3
 80084a8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80084ac:	ee36 6b07 	vadd.f64	d6, d6, d7
 80084b0:	4b40      	ldr	r3, [pc, #256]	@ (80085b4 <NMI_Handler+0x644>)
 80084b2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80084b6:	ee07 3a90 	vmov	s15, r3
 80084ba:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80084be:	ee36 7b47 	vsub.f64	d7, d6, d7
 80084c2:	ed9f 6b37 	vldr	d6, [pc, #220]	@ 80085a0 <NMI_Handler+0x630>
 80084c6:	ee37 7b06 	vadd.f64	d7, d7, d6
 80084ca:	ed9f 6b37 	vldr	d6, [pc, #220]	@ 80085a8 <NMI_Handler+0x638>
 80084ce:	ee37 7b06 	vadd.f64	d7, d7, d6
 80084d2:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80084d6:	ee17 3a90 	vmov	r3, s15
 80084da:	b29a      	uxth	r2, r3
 80084dc:	4b3b      	ldr	r3, [pc, #236]	@ (80085cc <NMI_Handler+0x65c>)
 80084de:	801a      	strh	r2, [r3, #0]
		SPEED4 = (MYDRON.THRUST*0.7)- MYDRON.ROOL + MYDRON.PITCH + MYDRON.YAW + min_speed + 500;//
 80084e0:	4b34      	ldr	r3, [pc, #208]	@ (80085b4 <NMI_Handler+0x644>)
 80084e2:	885b      	ldrh	r3, [r3, #2]
 80084e4:	ee07 3a90 	vmov	s15, r3
 80084e8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80084ec:	ed9f 6b2a 	vldr	d6, [pc, #168]	@ 8008598 <NMI_Handler+0x628>
 80084f0:	ee27 6b06 	vmul.f64	d6, d7, d6
 80084f4:	4b2f      	ldr	r3, [pc, #188]	@ (80085b4 <NMI_Handler+0x644>)
 80084f6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80084fa:	ee07 3a90 	vmov	s15, r3
 80084fe:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8008502:	ee36 6b47 	vsub.f64	d6, d6, d7
 8008506:	4b2b      	ldr	r3, [pc, #172]	@ (80085b4 <NMI_Handler+0x644>)
 8008508:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800850c:	ee07 3a90 	vmov	s15, r3
 8008510:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8008514:	ee36 6b07 	vadd.f64	d6, d6, d7
 8008518:	4b26      	ldr	r3, [pc, #152]	@ (80085b4 <NMI_Handler+0x644>)
 800851a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800851e:	ee07 3a90 	vmov	s15, r3
 8008522:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8008526:	ee36 7b07 	vadd.f64	d7, d6, d7
 800852a:	ed9f 6b1d 	vldr	d6, [pc, #116]	@ 80085a0 <NMI_Handler+0x630>
 800852e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8008532:	ed9f 6b1d 	vldr	d6, [pc, #116]	@ 80085a8 <NMI_Handler+0x638>
 8008536:	ee37 7b06 	vadd.f64	d7, d7, d6
 800853a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800853e:	ee17 3a90 	vmov	r3, s15
 8008542:	b29a      	uxth	r2, r3
 8008544:	4b22      	ldr	r3, [pc, #136]	@ (80085d0 <NMI_Handler+0x660>)
 8008546:	801a      	strh	r2, [r3, #0]

		ESC_1_SPEED(SPEED1);
 8008548:	4b1e      	ldr	r3, [pc, #120]	@ (80085c4 <NMI_Handler+0x654>)
 800854a:	881b      	ldrh	r3, [r3, #0]
 800854c:	4618      	mov	r0, r3
 800854e:	f7f8 fc71 	bl	8000e34 <ESC_1_SPEED>
		ESC_2_SPEED(SPEED2);
 8008552:	4b1d      	ldr	r3, [pc, #116]	@ (80085c8 <NMI_Handler+0x658>)
 8008554:	881b      	ldrh	r3, [r3, #0]
 8008556:	4618      	mov	r0, r3
 8008558:	f7f8 fc8e 	bl	8000e78 <ESC_2_SPEED>
		ESC_3_SPEED(SPEED3);
 800855c:	4b1b      	ldr	r3, [pc, #108]	@ (80085cc <NMI_Handler+0x65c>)
 800855e:	881b      	ldrh	r3, [r3, #0]
 8008560:	4618      	mov	r0, r3
 8008562:	f7f8 fcab 	bl	8000ebc <ESC_3_SPEED>
		ESC_4_SPEED(SPEED4);
 8008566:	4b1a      	ldr	r3, [pc, #104]	@ (80085d0 <NMI_Handler+0x660>)
 8008568:	881b      	ldrh	r3, [r3, #0]
 800856a:	4618      	mov	r0, r3
 800856c:	f7f8 fcc8 	bl	8000f00 <ESC_4_SPEED>


		OLD_SPEED1 = SPEED1;
 8008570:	4b14      	ldr	r3, [pc, #80]	@ (80085c4 <NMI_Handler+0x654>)
 8008572:	881a      	ldrh	r2, [r3, #0]
 8008574:	4b17      	ldr	r3, [pc, #92]	@ (80085d4 <NMI_Handler+0x664>)
 8008576:	801a      	strh	r2, [r3, #0]
		OLD_SPEED2 = SPEED2;
 8008578:	4b13      	ldr	r3, [pc, #76]	@ (80085c8 <NMI_Handler+0x658>)
 800857a:	881a      	ldrh	r2, [r3, #0]
 800857c:	4b16      	ldr	r3, [pc, #88]	@ (80085d8 <NMI_Handler+0x668>)
 800857e:	801a      	strh	r2, [r3, #0]
		OLD_SPEED3 = SPEED3;
 8008580:	4b12      	ldr	r3, [pc, #72]	@ (80085cc <NMI_Handler+0x65c>)
 8008582:	881a      	ldrh	r2, [r3, #0]
 8008584:	4b15      	ldr	r3, [pc, #84]	@ (80085dc <NMI_Handler+0x66c>)
 8008586:	801a      	strh	r2, [r3, #0]
		OLD_SPEED4 = SPEED4;
 8008588:	4b11      	ldr	r3, [pc, #68]	@ (80085d0 <NMI_Handler+0x660>)
 800858a:	881a      	ldrh	r2, [r3, #0]
 800858c:	4b14      	ldr	r3, [pc, #80]	@ (80085e0 <NMI_Handler+0x670>)
 800858e:	801a      	strh	r2, [r3, #0]
	   	HAL_Delay(1);
 8008590:	e517      	b.n	8007fc2 <NMI_Handler+0x52>
 8008592:	bf00      	nop
 8008594:	f3af 8000 	nop.w
 8008598:	66666666 	.word	0x66666666
 800859c:	3fe66666 	.word	0x3fe66666
 80085a0:	00000000 	.word	0x00000000
 80085a4:	40c48200 	.word	0x40c48200
 80085a8:	00000000 	.word	0x00000000
 80085ac:	407f4000 	.word	0x407f4000
 80085b0:	000040c8 	.word	0x000040c8
 80085b4:	00000178 	.word	0x00000178
 80085b8:	000040c0 	.word	0x000040c0
 80085bc:	000040c4 	.word	0x000040c4
 80085c0:	0000405e 	.word	0x0000405e
 80085c4:	0000418c 	.word	0x0000418c
 80085c8:	0000418e 	.word	0x0000418e
 80085cc:	00004190 	.word	0x00004190
 80085d0:	00004192 	.word	0x00004192
 80085d4:	00004194 	.word	0x00004194
 80085d8:	00004196 	.word	0x00004196
 80085dc:	00004198 	.word	0x00004198
 80085e0:	0000419a 	.word	0x0000419a

080085e4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80085e4:	b580      	push	{r7, lr}
 80085e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

	LED_G_1;
 80085e8:	2201      	movs	r2, #1
 80085ea:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80085ee:	4812      	ldr	r0, [pc, #72]	@ (8008638 <HardFault_Handler+0x54>)
 80085f0:	f005 ff68 	bl	800e4c4 <HAL_GPIO_WritePin>
	LED_Y_0;
 80085f4:	2200      	movs	r2, #0
 80085f6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80085fa:	4810      	ldr	r0, [pc, #64]	@ (800863c <HardFault_Handler+0x58>)
 80085fc:	f005 ff62 	bl	800e4c4 <HAL_GPIO_WritePin>
	LED_R_1;
 8008600:	2201      	movs	r2, #1
 8008602:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8008606:	480d      	ldr	r0, [pc, #52]	@ (800863c <HardFault_Handler+0x58>)
 8008608:	f005 ff5c 	bl	800e4c4 <HAL_GPIO_WritePin>
	//todo create crash log
	f_close(&fil);
 800860c:	480c      	ldr	r0, [pc, #48]	@ (8008640 <HardFault_Handler+0x5c>)
 800860e:	f015 f9f1 	bl	801d9f4 <f_close>
	wanted_rool = 0;
 8008612:	4b0c      	ldr	r3, [pc, #48]	@ (8008644 <HardFault_Handler+0x60>)
 8008614:	f04f 0200 	mov.w	r2, #0
 8008618:	601a      	str	r2, [r3, #0]
	wanted_pitch = 0;
 800861a:	4b0b      	ldr	r3, [pc, #44]	@ (8008648 <HardFault_Handler+0x64>)
 800861c:	f04f 0200 	mov.w	r2, #0
 8008620:	601a      	str	r2, [r3, #0]
	wanted_yaw = 0;
 8008622:	4b0a      	ldr	r3, [pc, #40]	@ (800864c <HardFault_Handler+0x68>)
 8008624:	f04f 0200 	mov.w	r2, #0
 8008628:	601a      	str	r2, [r3, #0]
	wanted_thrust = DRON_SLOWFALING;
 800862a:	4b09      	ldr	r3, [pc, #36]	@ (8008650 <HardFault_Handler+0x6c>)
 800862c:	881b      	ldrh	r3, [r3, #0]
 800862e:	b21a      	sxth	r2, r3
 8008630:	4b08      	ldr	r3, [pc, #32]	@ (8008654 <HardFault_Handler+0x70>)
 8008632:	801a      	strh	r2, [r3, #0]
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008634:	bf00      	nop
 8008636:	e7fd      	b.n	8008634 <HardFault_Handler+0x50>
 8008638:	58021000 	.word	0x58021000
 800863c:	58020400 	.word	0x58020400
 8008640:	24001ef0 	.word	0x24001ef0
 8008644:	0000406c 	.word	0x0000406c
 8008648:	00004068 	.word	0x00004068
 800864c:	00004070 	.word	0x00004070
 8008650:	0801e8a8 	.word	0x0801e8a8
 8008654:	0000405c 	.word	0x0000405c

08008658 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008658:	b580      	push	{r7, lr}
 800865a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

	LED_G_0;
 800865c:	2200      	movs	r2, #0
 800865e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8008662:	4812      	ldr	r0, [pc, #72]	@ (80086ac <MemManage_Handler+0x54>)
 8008664:	f005 ff2e 	bl	800e4c4 <HAL_GPIO_WritePin>
	LED_Y_0;
 8008668:	2200      	movs	r2, #0
 800866a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800866e:	4810      	ldr	r0, [pc, #64]	@ (80086b0 <MemManage_Handler+0x58>)
 8008670:	f005 ff28 	bl	800e4c4 <HAL_GPIO_WritePin>
	LED_R_1;
 8008674:	2201      	movs	r2, #1
 8008676:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800867a:	480d      	ldr	r0, [pc, #52]	@ (80086b0 <MemManage_Handler+0x58>)
 800867c:	f005 ff22 	bl	800e4c4 <HAL_GPIO_WritePin>
	//todo create crash log
	f_close(&fil);
 8008680:	480c      	ldr	r0, [pc, #48]	@ (80086b4 <MemManage_Handler+0x5c>)
 8008682:	f015 f9b7 	bl	801d9f4 <f_close>
	wanted_rool = 0;
 8008686:	4b0c      	ldr	r3, [pc, #48]	@ (80086b8 <MemManage_Handler+0x60>)
 8008688:	f04f 0200 	mov.w	r2, #0
 800868c:	601a      	str	r2, [r3, #0]
	wanted_pitch = 0;
 800868e:	4b0b      	ldr	r3, [pc, #44]	@ (80086bc <MemManage_Handler+0x64>)
 8008690:	f04f 0200 	mov.w	r2, #0
 8008694:	601a      	str	r2, [r3, #0]
	wanted_yaw = 0;
 8008696:	4b0a      	ldr	r3, [pc, #40]	@ (80086c0 <MemManage_Handler+0x68>)
 8008698:	f04f 0200 	mov.w	r2, #0
 800869c:	601a      	str	r2, [r3, #0]
	wanted_thrust = DRON_SLOWFALING;
 800869e:	4b09      	ldr	r3, [pc, #36]	@ (80086c4 <MemManage_Handler+0x6c>)
 80086a0:	881b      	ldrh	r3, [r3, #0]
 80086a2:	b21a      	sxth	r2, r3
 80086a4:	4b08      	ldr	r3, [pc, #32]	@ (80086c8 <MemManage_Handler+0x70>)
 80086a6:	801a      	strh	r2, [r3, #0]
  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80086a8:	bf00      	nop
 80086aa:	e7fd      	b.n	80086a8 <MemManage_Handler+0x50>
 80086ac:	58021000 	.word	0x58021000
 80086b0:	58020400 	.word	0x58020400
 80086b4:	24001ef0 	.word	0x24001ef0
 80086b8:	0000406c 	.word	0x0000406c
 80086bc:	00004068 	.word	0x00004068
 80086c0:	00004070 	.word	0x00004070
 80086c4:	0801e8a8 	.word	0x0801e8a8
 80086c8:	0000405c 	.word	0x0000405c

080086cc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

	LED_G_1;
 80086d0:	2201      	movs	r2, #1
 80086d2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80086d6:	4812      	ldr	r0, [pc, #72]	@ (8008720 <BusFault_Handler+0x54>)
 80086d8:	f005 fef4 	bl	800e4c4 <HAL_GPIO_WritePin>
	LED_Y_1;
 80086dc:	2201      	movs	r2, #1
 80086de:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80086e2:	4810      	ldr	r0, [pc, #64]	@ (8008724 <BusFault_Handler+0x58>)
 80086e4:	f005 feee 	bl	800e4c4 <HAL_GPIO_WritePin>
	LED_R_1;
 80086e8:	2201      	movs	r2, #1
 80086ea:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80086ee:	480d      	ldr	r0, [pc, #52]	@ (8008724 <BusFault_Handler+0x58>)
 80086f0:	f005 fee8 	bl	800e4c4 <HAL_GPIO_WritePin>
	//todo create crash log
	f_close(&fil);
 80086f4:	480c      	ldr	r0, [pc, #48]	@ (8008728 <BusFault_Handler+0x5c>)
 80086f6:	f015 f97d 	bl	801d9f4 <f_close>
	wanted_rool = 0;
 80086fa:	4b0c      	ldr	r3, [pc, #48]	@ (800872c <BusFault_Handler+0x60>)
 80086fc:	f04f 0200 	mov.w	r2, #0
 8008700:	601a      	str	r2, [r3, #0]
	wanted_pitch = 0;
 8008702:	4b0b      	ldr	r3, [pc, #44]	@ (8008730 <BusFault_Handler+0x64>)
 8008704:	f04f 0200 	mov.w	r2, #0
 8008708:	601a      	str	r2, [r3, #0]
	wanted_yaw = 0;
 800870a:	4b0a      	ldr	r3, [pc, #40]	@ (8008734 <BusFault_Handler+0x68>)
 800870c:	f04f 0200 	mov.w	r2, #0
 8008710:	601a      	str	r2, [r3, #0]
	wanted_thrust = DRON_SLOWFALING;
 8008712:	4b09      	ldr	r3, [pc, #36]	@ (8008738 <BusFault_Handler+0x6c>)
 8008714:	881b      	ldrh	r3, [r3, #0]
 8008716:	b21a      	sxth	r2, r3
 8008718:	4b08      	ldr	r3, [pc, #32]	@ (800873c <BusFault_Handler+0x70>)
 800871a:	801a      	strh	r2, [r3, #0]
  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800871c:	bf00      	nop
 800871e:	e7fd      	b.n	800871c <BusFault_Handler+0x50>
 8008720:	58021000 	.word	0x58021000
 8008724:	58020400 	.word	0x58020400
 8008728:	24001ef0 	.word	0x24001ef0
 800872c:	0000406c 	.word	0x0000406c
 8008730:	00004068 	.word	0x00004068
 8008734:	00004070 	.word	0x00004070
 8008738:	0801e8a8 	.word	0x0801e8a8
 800873c:	0000405c 	.word	0x0000405c

08008740 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008740:	b580      	push	{r7, lr}
 8008742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

	LED_G_0;
 8008744:	2200      	movs	r2, #0
 8008746:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800874a:	4812      	ldr	r0, [pc, #72]	@ (8008794 <UsageFault_Handler+0x54>)
 800874c:	f005 feba 	bl	800e4c4 <HAL_GPIO_WritePin>
	LED_Y_1;
 8008750:	2201      	movs	r2, #1
 8008752:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8008756:	4810      	ldr	r0, [pc, #64]	@ (8008798 <UsageFault_Handler+0x58>)
 8008758:	f005 feb4 	bl	800e4c4 <HAL_GPIO_WritePin>
	LED_R_1;
 800875c:	2201      	movs	r2, #1
 800875e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8008762:	480d      	ldr	r0, [pc, #52]	@ (8008798 <UsageFault_Handler+0x58>)
 8008764:	f005 feae 	bl	800e4c4 <HAL_GPIO_WritePin>
	//todo create crash log
	f_close(&fil);
 8008768:	480c      	ldr	r0, [pc, #48]	@ (800879c <UsageFault_Handler+0x5c>)
 800876a:	f015 f943 	bl	801d9f4 <f_close>
	wanted_rool = 0;
 800876e:	4b0c      	ldr	r3, [pc, #48]	@ (80087a0 <UsageFault_Handler+0x60>)
 8008770:	f04f 0200 	mov.w	r2, #0
 8008774:	601a      	str	r2, [r3, #0]
	wanted_pitch = 0;
 8008776:	4b0b      	ldr	r3, [pc, #44]	@ (80087a4 <UsageFault_Handler+0x64>)
 8008778:	f04f 0200 	mov.w	r2, #0
 800877c:	601a      	str	r2, [r3, #0]
	wanted_yaw = 0;
 800877e:	4b0a      	ldr	r3, [pc, #40]	@ (80087a8 <UsageFault_Handler+0x68>)
 8008780:	f04f 0200 	mov.w	r2, #0
 8008784:	601a      	str	r2, [r3, #0]
	wanted_thrust = DRON_SLOWFALING;
 8008786:	4b09      	ldr	r3, [pc, #36]	@ (80087ac <UsageFault_Handler+0x6c>)
 8008788:	881b      	ldrh	r3, [r3, #0]
 800878a:	b21a      	sxth	r2, r3
 800878c:	4b08      	ldr	r3, [pc, #32]	@ (80087b0 <UsageFault_Handler+0x70>)
 800878e:	801a      	strh	r2, [r3, #0]
  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008790:	bf00      	nop
 8008792:	e7fd      	b.n	8008790 <UsageFault_Handler+0x50>
 8008794:	58021000 	.word	0x58021000
 8008798:	58020400 	.word	0x58020400
 800879c:	24001ef0 	.word	0x24001ef0
 80087a0:	0000406c 	.word	0x0000406c
 80087a4:	00004068 	.word	0x00004068
 80087a8:	00004070 	.word	0x00004070
 80087ac:	0801e8a8 	.word	0x0801e8a8
 80087b0:	0000405c 	.word	0x0000405c

080087b4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80087b4:	b480      	push	{r7}
 80087b6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80087b8:	bf00      	nop
 80087ba:	46bd      	mov	sp, r7
 80087bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c0:	4770      	bx	lr

080087c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80087c2:	b480      	push	{r7}
 80087c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80087c6:	bf00      	nop
 80087c8:	46bd      	mov	sp, r7
 80087ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ce:	4770      	bx	lr

080087d0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80087d0:	b480      	push	{r7}
 80087d2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80087d4:	bf00      	nop
 80087d6:	46bd      	mov	sp, r7
 80087d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087dc:	4770      	bx	lr
	...

080087e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80087e0:	b580      	push	{r7, lr}
 80087e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	  FatFsCnt++;
 80087e4:	4b08      	ldr	r3, [pc, #32]	@ (8008808 <SysTick_Handler+0x28>)
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	3301      	adds	r3, #1
 80087ea:	4a07      	ldr	r2, [pc, #28]	@ (8008808 <SysTick_Handler+0x28>)
 80087ec:	6013      	str	r3, [r2, #0]
	  if(FatFsCnt >= 10)
 80087ee:	4b06      	ldr	r3, [pc, #24]	@ (8008808 <SysTick_Handler+0x28>)
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	2b09      	cmp	r3, #9
 80087f4:	d904      	bls.n	8008800 <SysTick_Handler+0x20>
	  {
	    FatFsCnt = 0;
 80087f6:	4b04      	ldr	r3, [pc, #16]	@ (8008808 <SysTick_Handler+0x28>)
 80087f8:	2200      	movs	r2, #0
 80087fa:	601a      	str	r2, [r3, #0]
	    SDTimer_Handler();
 80087fc:	f7ff fb98 	bl	8007f30 <SDTimer_Handler>
	  }
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008800:	f000 fd04 	bl	800920c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008804:	bf00      	nop
 8008806:	bd80      	pop	{r7, pc}
 8008808:	24000374 	.word	0x24000374

0800880c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800880c:	b580      	push	{r7, lr}
 800880e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8008810:	4802      	ldr	r0, [pc, #8]	@ (800881c <DMA1_Stream0_IRQHandler+0x10>)
 8008812:	f004 f96b 	bl	800caec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8008816:	bf00      	nop
 8008818:	bd80      	pop	{r7, pc}
 800881a:	bf00      	nop
 800881c:	240002fc 	.word	0x240002fc

08008820 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8008820:	b580      	push	{r7, lr}
 8008822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc2);
 8008824:	4802      	ldr	r0, [pc, #8]	@ (8008830 <ADC_IRQHandler+0x10>)
 8008826:	f001 fb3f 	bl	8009ea8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800882a:	bf00      	nop
 800882c:	bd80      	pop	{r7, pc}
 800882e:	bf00      	nop
 8008830:	240000ac 	.word	0x240000ac

08008834 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8008834:	b580      	push	{r7, lr}
 8008836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8008838:	4802      	ldr	r0, [pc, #8]	@ (8008844 <TIM2_IRQHandler+0x10>)
 800883a:	f00d ff02 	bl	8016642 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800883e:	bf00      	nop
 8008840:	bd80      	pop	{r7, pc}
 8008842:	bf00      	nop
 8008844:	240003cc 	.word	0x240003cc

08008848 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8008848:	b580      	push	{r7, lr}
 800884a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 800884c:	4802      	ldr	r0, [pc, #8]	@ (8008858 <SPI2_IRQHandler+0x10>)
 800884e:	f00d f871 	bl	8015934 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8008852:	bf00      	nop
 8008854:	bd80      	pop	{r7, pc}
 8008856:	bf00      	nop
 8008858:	240001ec 	.word	0x240001ec

0800885c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800885c:	b580      	push	{r7, lr}
 800885e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8008860:	4802      	ldr	r0, [pc, #8]	@ (800886c <USART1_IRQHandler+0x10>)
 8008862:	f00f fb45 	bl	8017ef0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8008866:	bf00      	nop
 8008868:	bd80      	pop	{r7, pc}
 800886a:	bf00      	nop
 800886c:	240004b0 	.word	0x240004b0

08008870 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8008870:	b580      	push	{r7, lr}
 8008872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(NRF24_IRQ_Pin);
 8008874:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8008878:	f005 fe3d 	bl	800e4f6 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800887c:	bf00      	nop
 800887e:	bd80      	pop	{r7, pc}

08008880 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8008880:	b580      	push	{r7, lr}
 8008882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8008884:	4802      	ldr	r0, [pc, #8]	@ (8008890 <DMA2_Stream0_IRQHandler+0x10>)
 8008886:	f004 f931 	bl	800caec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800888a:	bf00      	nop
 800888c:	bd80      	pop	{r7, pc}
 800888e:	bf00      	nop
 8008890:	2400011c 	.word	0x2400011c

08008894 <I2C5_EV_IRQHandler>:

/**
  * @brief This function handles I2C5 event interrupt.
  */
void I2C5_EV_IRQHandler(void)
{
 8008894:	b580      	push	{r7, lr}
 8008896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C5_EV_IRQn 0 */

  /* USER CODE END I2C5_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c5);
 8008898:	4802      	ldr	r0, [pc, #8]	@ (80088a4 <I2C5_EV_IRQHandler+0x10>)
 800889a:	f006 fa21 	bl	800ece0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C5_EV_IRQn 1 */

  /* USER CODE END I2C5_EV_IRQn 1 */
}
 800889e:	bf00      	nop
 80088a0:	bd80      	pop	{r7, pc}
 80088a2:	bf00      	nop
 80088a4:	24000198 	.word	0x24000198

080088a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80088a8:	b480      	push	{r7}
 80088aa:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80088ac:	4b32      	ldr	r3, [pc, #200]	@ (8008978 <SystemInit+0xd0>)
 80088ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80088b2:	4a31      	ldr	r2, [pc, #196]	@ (8008978 <SystemInit+0xd0>)
 80088b4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80088b8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80088bc:	4b2f      	ldr	r3, [pc, #188]	@ (800897c <SystemInit+0xd4>)
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	f003 030f 	and.w	r3, r3, #15
 80088c4:	2b06      	cmp	r3, #6
 80088c6:	d807      	bhi.n	80088d8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80088c8:	4b2c      	ldr	r3, [pc, #176]	@ (800897c <SystemInit+0xd4>)
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	f023 030f 	bic.w	r3, r3, #15
 80088d0:	4a2a      	ldr	r2, [pc, #168]	@ (800897c <SystemInit+0xd4>)
 80088d2:	f043 0307 	orr.w	r3, r3, #7
 80088d6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80088d8:	4b29      	ldr	r3, [pc, #164]	@ (8008980 <SystemInit+0xd8>)
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	4a28      	ldr	r2, [pc, #160]	@ (8008980 <SystemInit+0xd8>)
 80088de:	f043 0301 	orr.w	r3, r3, #1
 80088e2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80088e4:	4b26      	ldr	r3, [pc, #152]	@ (8008980 <SystemInit+0xd8>)
 80088e6:	2200      	movs	r2, #0
 80088e8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80088ea:	4b25      	ldr	r3, [pc, #148]	@ (8008980 <SystemInit+0xd8>)
 80088ec:	681a      	ldr	r2, [r3, #0]
 80088ee:	4924      	ldr	r1, [pc, #144]	@ (8008980 <SystemInit+0xd8>)
 80088f0:	4b24      	ldr	r3, [pc, #144]	@ (8008984 <SystemInit+0xdc>)
 80088f2:	4013      	ands	r3, r2
 80088f4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80088f6:	4b21      	ldr	r3, [pc, #132]	@ (800897c <SystemInit+0xd4>)
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	f003 0308 	and.w	r3, r3, #8
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d007      	beq.n	8008912 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8008902:	4b1e      	ldr	r3, [pc, #120]	@ (800897c <SystemInit+0xd4>)
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	f023 030f 	bic.w	r3, r3, #15
 800890a:	4a1c      	ldr	r2, [pc, #112]	@ (800897c <SystemInit+0xd4>)
 800890c:	f043 0307 	orr.w	r3, r3, #7
 8008910:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8008912:	4b1b      	ldr	r3, [pc, #108]	@ (8008980 <SystemInit+0xd8>)
 8008914:	2200      	movs	r2, #0
 8008916:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8008918:	4b19      	ldr	r3, [pc, #100]	@ (8008980 <SystemInit+0xd8>)
 800891a:	2200      	movs	r2, #0
 800891c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800891e:	4b18      	ldr	r3, [pc, #96]	@ (8008980 <SystemInit+0xd8>)
 8008920:	2200      	movs	r2, #0
 8008922:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8008924:	4b16      	ldr	r3, [pc, #88]	@ (8008980 <SystemInit+0xd8>)
 8008926:	4a18      	ldr	r2, [pc, #96]	@ (8008988 <SystemInit+0xe0>)
 8008928:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800892a:	4b15      	ldr	r3, [pc, #84]	@ (8008980 <SystemInit+0xd8>)
 800892c:	4a17      	ldr	r2, [pc, #92]	@ (800898c <SystemInit+0xe4>)
 800892e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8008930:	4b13      	ldr	r3, [pc, #76]	@ (8008980 <SystemInit+0xd8>)
 8008932:	4a17      	ldr	r2, [pc, #92]	@ (8008990 <SystemInit+0xe8>)
 8008934:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8008936:	4b12      	ldr	r3, [pc, #72]	@ (8008980 <SystemInit+0xd8>)
 8008938:	2200      	movs	r2, #0
 800893a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800893c:	4b10      	ldr	r3, [pc, #64]	@ (8008980 <SystemInit+0xd8>)
 800893e:	4a14      	ldr	r2, [pc, #80]	@ (8008990 <SystemInit+0xe8>)
 8008940:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8008942:	4b0f      	ldr	r3, [pc, #60]	@ (8008980 <SystemInit+0xd8>)
 8008944:	2200      	movs	r2, #0
 8008946:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8008948:	4b0d      	ldr	r3, [pc, #52]	@ (8008980 <SystemInit+0xd8>)
 800894a:	4a11      	ldr	r2, [pc, #68]	@ (8008990 <SystemInit+0xe8>)
 800894c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800894e:	4b0c      	ldr	r3, [pc, #48]	@ (8008980 <SystemInit+0xd8>)
 8008950:	2200      	movs	r2, #0
 8008952:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8008954:	4b0a      	ldr	r3, [pc, #40]	@ (8008980 <SystemInit+0xd8>)
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	4a09      	ldr	r2, [pc, #36]	@ (8008980 <SystemInit+0xd8>)
 800895a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800895e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8008960:	4b07      	ldr	r3, [pc, #28]	@ (8008980 <SystemInit+0xd8>)
 8008962:	2200      	movs	r2, #0
 8008964:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8008966:	4b0b      	ldr	r3, [pc, #44]	@ (8008994 <SystemInit+0xec>)
 8008968:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800896c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800896e:	bf00      	nop
 8008970:	46bd      	mov	sp, r7
 8008972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008976:	4770      	bx	lr
 8008978:	e000ed00 	.word	0xe000ed00
 800897c:	52002000 	.word	0x52002000
 8008980:	58024400 	.word	0x58024400
 8008984:	eaf6ed7f 	.word	0xeaf6ed7f
 8008988:	02020200 	.word	0x02020200
 800898c:	01ff0000 	.word	0x01ff0000
 8008990:	01010280 	.word	0x01010280
 8008994:	52004000 	.word	0x52004000

08008998 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8008998:	b580      	push	{r7, lr}
 800899a:	b098      	sub	sp, #96	@ 0x60
 800899c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800899e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80089a2:	2200      	movs	r2, #0
 80089a4:	601a      	str	r2, [r3, #0]
 80089a6:	605a      	str	r2, [r3, #4]
 80089a8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80089aa:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80089ae:	2200      	movs	r2, #0
 80089b0:	601a      	str	r2, [r3, #0]
 80089b2:	605a      	str	r2, [r3, #4]
 80089b4:	609a      	str	r2, [r3, #8]
 80089b6:	60da      	str	r2, [r3, #12]
 80089b8:	611a      	str	r2, [r3, #16]
 80089ba:	615a      	str	r2, [r3, #20]
 80089bc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80089be:	1d3b      	adds	r3, r7, #4
 80089c0:	2234      	movs	r2, #52	@ 0x34
 80089c2:	2100      	movs	r1, #0
 80089c4:	4618      	mov	r0, r3
 80089c6:	f015 fa0d 	bl	801dde4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80089ca:	4b45      	ldr	r3, [pc, #276]	@ (8008ae0 <MX_TIM1_Init+0x148>)
 80089cc:	4a45      	ldr	r2, [pc, #276]	@ (8008ae4 <MX_TIM1_Init+0x14c>)
 80089ce:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 999;
 80089d0:	4b43      	ldr	r3, [pc, #268]	@ (8008ae0 <MX_TIM1_Init+0x148>)
 80089d2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80089d6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80089d8:	4b41      	ldr	r3, [pc, #260]	@ (8008ae0 <MX_TIM1_Init+0x148>)
 80089da:	2200      	movs	r2, #0
 80089dc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 256;
 80089de:	4b40      	ldr	r3, [pc, #256]	@ (8008ae0 <MX_TIM1_Init+0x148>)
 80089e0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80089e4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80089e6:	4b3e      	ldr	r3, [pc, #248]	@ (8008ae0 <MX_TIM1_Init+0x148>)
 80089e8:	2200      	movs	r2, #0
 80089ea:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80089ec:	4b3c      	ldr	r3, [pc, #240]	@ (8008ae0 <MX_TIM1_Init+0x148>)
 80089ee:	2200      	movs	r2, #0
 80089f0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80089f2:	4b3b      	ldr	r3, [pc, #236]	@ (8008ae0 <MX_TIM1_Init+0x148>)
 80089f4:	2280      	movs	r2, #128	@ 0x80
 80089f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80089f8:	4839      	ldr	r0, [pc, #228]	@ (8008ae0 <MX_TIM1_Init+0x148>)
 80089fa:	f00d fc57 	bl	80162ac <HAL_TIM_PWM_Init>
 80089fe:	4603      	mov	r3, r0
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d001      	beq.n	8008a08 <MX_TIM1_Init+0x70>
  {
    Error_Handler();
 8008a04:	f7ff f8b8 	bl	8007b78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008a08:	2300      	movs	r3, #0
 8008a0a:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8008a0c:	2300      	movs	r3, #0
 8008a0e:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008a10:	2300      	movs	r3, #0
 8008a12:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8008a14:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8008a18:	4619      	mov	r1, r3
 8008a1a:	4831      	ldr	r0, [pc, #196]	@ (8008ae0 <MX_TIM1_Init+0x148>)
 8008a1c:	f00e ff64 	bl	80178e8 <HAL_TIMEx_MasterConfigSynchronization>
 8008a20:	4603      	mov	r3, r0
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d001      	beq.n	8008a2a <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8008a26:	f7ff f8a7 	bl	8007b78 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8008a2a:	2360      	movs	r3, #96	@ 0x60
 8008a2c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8008a2e:	2300      	movs	r3, #0
 8008a30:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8008a32:	2300      	movs	r3, #0
 8008a34:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8008a36:	2300      	movs	r3, #0
 8008a38:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8008a3e:	2300      	movs	r3, #0
 8008a40:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8008a42:	2300      	movs	r3, #0
 8008a44:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8008a46:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8008a4a:	2204      	movs	r2, #4
 8008a4c:	4619      	mov	r1, r3
 8008a4e:	4824      	ldr	r0, [pc, #144]	@ (8008ae0 <MX_TIM1_Init+0x148>)
 8008a50:	f00d ff9a 	bl	8016988 <HAL_TIM_PWM_ConfigChannel>
 8008a54:	4603      	mov	r3, r0
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d001      	beq.n	8008a5e <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8008a5a:	f7ff f88d 	bl	8007b78 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8008a5e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8008a62:	2208      	movs	r2, #8
 8008a64:	4619      	mov	r1, r3
 8008a66:	481e      	ldr	r0, [pc, #120]	@ (8008ae0 <MX_TIM1_Init+0x148>)
 8008a68:	f00d ff8e 	bl	8016988 <HAL_TIM_PWM_ConfigChannel>
 8008a6c:	4603      	mov	r3, r0
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d001      	beq.n	8008a76 <MX_TIM1_Init+0xde>
  {
    Error_Handler();
 8008a72:	f7ff f881 	bl	8007b78 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8008a76:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8008a7a:	220c      	movs	r2, #12
 8008a7c:	4619      	mov	r1, r3
 8008a7e:	4818      	ldr	r0, [pc, #96]	@ (8008ae0 <MX_TIM1_Init+0x148>)
 8008a80:	f00d ff82 	bl	8016988 <HAL_TIM_PWM_ConfigChannel>
 8008a84:	4603      	mov	r3, r0
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d001      	beq.n	8008a8e <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8008a8a:	f7ff f875 	bl	8007b78 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8008a8e:	2300      	movs	r3, #0
 8008a90:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8008a92:	2300      	movs	r3, #0
 8008a94:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8008a96:	2300      	movs	r3, #0
 8008a98:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8008a9e:	2300      	movs	r3, #0
 8008aa0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8008aa2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8008aa6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8008aa8:	2300      	movs	r3, #0
 8008aaa:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8008aac:	2300      	movs	r3, #0
 8008aae:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8008ab0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008ab4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8008ab6:	2300      	movs	r3, #0
 8008ab8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8008aba:	2300      	movs	r3, #0
 8008abc:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8008abe:	1d3b      	adds	r3, r7, #4
 8008ac0:	4619      	mov	r1, r3
 8008ac2:	4807      	ldr	r0, [pc, #28]	@ (8008ae0 <MX_TIM1_Init+0x148>)
 8008ac4:	f00e ffac 	bl	8017a20 <HAL_TIMEx_ConfigBreakDeadTime>
 8008ac8:	4603      	mov	r3, r0
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d001      	beq.n	8008ad2 <MX_TIM1_Init+0x13a>
  {
    Error_Handler();
 8008ace:	f7ff f853 	bl	8007b78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8008ad2:	4803      	ldr	r0, [pc, #12]	@ (8008ae0 <MX_TIM1_Init+0x148>)
 8008ad4:	f000 f9da 	bl	8008e8c <HAL_TIM_MspPostInit>

}
 8008ad8:	bf00      	nop
 8008ada:	3760      	adds	r7, #96	@ 0x60
 8008adc:	46bd      	mov	sp, r7
 8008ade:	bd80      	pop	{r7, pc}
 8008ae0:	24000380 	.word	0x24000380
 8008ae4:	40010000 	.word	0x40010000

08008ae8 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8008ae8:	b580      	push	{r7, lr}
 8008aea:	b088      	sub	sp, #32
 8008aec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008aee:	f107 0314 	add.w	r3, r7, #20
 8008af2:	2200      	movs	r2, #0
 8008af4:	601a      	str	r2, [r3, #0]
 8008af6:	605a      	str	r2, [r3, #4]
 8008af8:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8008afa:	1d3b      	adds	r3, r7, #4
 8008afc:	2200      	movs	r2, #0
 8008afe:	601a      	str	r2, [r3, #0]
 8008b00:	605a      	str	r2, [r3, #4]
 8008b02:	609a      	str	r2, [r3, #8]
 8008b04:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8008b06:	4b21      	ldr	r3, [pc, #132]	@ (8008b8c <MX_TIM2_Init+0xa4>)
 8008b08:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8008b0c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 274;
 8008b0e:	4b1f      	ldr	r3, [pc, #124]	@ (8008b8c <MX_TIM2_Init+0xa4>)
 8008b10:	f44f 7289 	mov.w	r2, #274	@ 0x112
 8008b14:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008b16:	4b1d      	ldr	r3, [pc, #116]	@ (8008b8c <MX_TIM2_Init+0xa4>)
 8008b18:	2200      	movs	r2, #0
 8008b1a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8008b1c:	4b1b      	ldr	r3, [pc, #108]	@ (8008b8c <MX_TIM2_Init+0xa4>)
 8008b1e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8008b22:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008b24:	4b19      	ldr	r3, [pc, #100]	@ (8008b8c <MX_TIM2_Init+0xa4>)
 8008b26:	2200      	movs	r2, #0
 8008b28:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8008b2a:	4b18      	ldr	r3, [pc, #96]	@ (8008b8c <MX_TIM2_Init+0xa4>)
 8008b2c:	2280      	movs	r2, #128	@ 0x80
 8008b2e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8008b30:	4816      	ldr	r0, [pc, #88]	@ (8008b8c <MX_TIM2_Init+0xa4>)
 8008b32:	f00d fd2f 	bl	8016594 <HAL_TIM_IC_Init>
 8008b36:	4603      	mov	r3, r0
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d001      	beq.n	8008b40 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8008b3c:	f7ff f81c 	bl	8007b78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008b40:	2300      	movs	r3, #0
 8008b42:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008b44:	2300      	movs	r3, #0
 8008b46:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8008b48:	f107 0314 	add.w	r3, r7, #20
 8008b4c:	4619      	mov	r1, r3
 8008b4e:	480f      	ldr	r0, [pc, #60]	@ (8008b8c <MX_TIM2_Init+0xa4>)
 8008b50:	f00e feca 	bl	80178e8 <HAL_TIMEx_MasterConfigSynchronization>
 8008b54:	4603      	mov	r3, r0
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d001      	beq.n	8008b5e <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 8008b5a:	f7ff f80d 	bl	8007b78 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8008b5e:	2300      	movs	r3, #0
 8008b60:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8008b62:	2301      	movs	r3, #1
 8008b64:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8008b66:	2300      	movs	r3, #0
 8008b68:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8008b6a:	2300      	movs	r3, #0
 8008b6c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8008b6e:	1d3b      	adds	r3, r7, #4
 8008b70:	2200      	movs	r2, #0
 8008b72:	4619      	mov	r1, r3
 8008b74:	4805      	ldr	r0, [pc, #20]	@ (8008b8c <MX_TIM2_Init+0xa4>)
 8008b76:	f00d fe6b 	bl	8016850 <HAL_TIM_IC_ConfigChannel>
 8008b7a:	4603      	mov	r3, r0
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d001      	beq.n	8008b84 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8008b80:	f7fe fffa 	bl	8007b78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8008b84:	bf00      	nop
 8008b86:	3720      	adds	r7, #32
 8008b88:	46bd      	mov	sp, r7
 8008b8a:	bd80      	pop	{r7, pc}
 8008b8c:	240003cc 	.word	0x240003cc

08008b90 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8008b90:	b580      	push	{r7, lr}
 8008b92:	b08a      	sub	sp, #40	@ 0x28
 8008b94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008b96:	f107 031c 	add.w	r3, r7, #28
 8008b9a:	2200      	movs	r2, #0
 8008b9c:	601a      	str	r2, [r3, #0]
 8008b9e:	605a      	str	r2, [r3, #4]
 8008ba0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8008ba2:	463b      	mov	r3, r7
 8008ba4:	2200      	movs	r2, #0
 8008ba6:	601a      	str	r2, [r3, #0]
 8008ba8:	605a      	str	r2, [r3, #4]
 8008baa:	609a      	str	r2, [r3, #8]
 8008bac:	60da      	str	r2, [r3, #12]
 8008bae:	611a      	str	r2, [r3, #16]
 8008bb0:	615a      	str	r2, [r3, #20]
 8008bb2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8008bb4:	4b32      	ldr	r3, [pc, #200]	@ (8008c80 <MX_TIM3_Init+0xf0>)
 8008bb6:	4a33      	ldr	r2, [pc, #204]	@ (8008c84 <MX_TIM3_Init+0xf4>)
 8008bb8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 28;
 8008bba:	4b31      	ldr	r3, [pc, #196]	@ (8008c80 <MX_TIM3_Init+0xf0>)
 8008bbc:	221c      	movs	r2, #28
 8008bbe:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008bc0:	4b2f      	ldr	r3, [pc, #188]	@ (8008c80 <MX_TIM3_Init+0xf0>)
 8008bc2:	2200      	movs	r2, #0
 8008bc4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19999;
 8008bc6:	4b2e      	ldr	r3, [pc, #184]	@ (8008c80 <MX_TIM3_Init+0xf0>)
 8008bc8:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8008bcc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008bce:	4b2c      	ldr	r3, [pc, #176]	@ (8008c80 <MX_TIM3_Init+0xf0>)
 8008bd0:	2200      	movs	r2, #0
 8008bd2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008bd4:	4b2a      	ldr	r3, [pc, #168]	@ (8008c80 <MX_TIM3_Init+0xf0>)
 8008bd6:	2200      	movs	r2, #0
 8008bd8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8008bda:	4829      	ldr	r0, [pc, #164]	@ (8008c80 <MX_TIM3_Init+0xf0>)
 8008bdc:	f00d fb66 	bl	80162ac <HAL_TIM_PWM_Init>
 8008be0:	4603      	mov	r3, r0
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d001      	beq.n	8008bea <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8008be6:	f7fe ffc7 	bl	8007b78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008bea:	2300      	movs	r3, #0
 8008bec:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008bee:	2300      	movs	r3, #0
 8008bf0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8008bf2:	f107 031c 	add.w	r3, r7, #28
 8008bf6:	4619      	mov	r1, r3
 8008bf8:	4821      	ldr	r0, [pc, #132]	@ (8008c80 <MX_TIM3_Init+0xf0>)
 8008bfa:	f00e fe75 	bl	80178e8 <HAL_TIMEx_MasterConfigSynchronization>
 8008bfe:	4603      	mov	r3, r0
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d001      	beq.n	8008c08 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8008c04:	f7fe ffb8 	bl	8007b78 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8008c08:	2360      	movs	r3, #96	@ 0x60
 8008c0a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8008c0c:	2300      	movs	r3, #0
 8008c0e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8008c10:	2300      	movs	r3, #0
 8008c12:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8008c14:	2300      	movs	r3, #0
 8008c16:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8008c18:	463b      	mov	r3, r7
 8008c1a:	2200      	movs	r2, #0
 8008c1c:	4619      	mov	r1, r3
 8008c1e:	4818      	ldr	r0, [pc, #96]	@ (8008c80 <MX_TIM3_Init+0xf0>)
 8008c20:	f00d feb2 	bl	8016988 <HAL_TIM_PWM_ConfigChannel>
 8008c24:	4603      	mov	r3, r0
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d001      	beq.n	8008c2e <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8008c2a:	f7fe ffa5 	bl	8007b78 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8008c2e:	463b      	mov	r3, r7
 8008c30:	2204      	movs	r2, #4
 8008c32:	4619      	mov	r1, r3
 8008c34:	4812      	ldr	r0, [pc, #72]	@ (8008c80 <MX_TIM3_Init+0xf0>)
 8008c36:	f00d fea7 	bl	8016988 <HAL_TIM_PWM_ConfigChannel>
 8008c3a:	4603      	mov	r3, r0
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d001      	beq.n	8008c44 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8008c40:	f7fe ff9a 	bl	8007b78 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8008c44:	463b      	mov	r3, r7
 8008c46:	2208      	movs	r2, #8
 8008c48:	4619      	mov	r1, r3
 8008c4a:	480d      	ldr	r0, [pc, #52]	@ (8008c80 <MX_TIM3_Init+0xf0>)
 8008c4c:	f00d fe9c 	bl	8016988 <HAL_TIM_PWM_ConfigChannel>
 8008c50:	4603      	mov	r3, r0
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d001      	beq.n	8008c5a <MX_TIM3_Init+0xca>
  {
    Error_Handler();
 8008c56:	f7fe ff8f 	bl	8007b78 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8008c5a:	463b      	mov	r3, r7
 8008c5c:	220c      	movs	r2, #12
 8008c5e:	4619      	mov	r1, r3
 8008c60:	4807      	ldr	r0, [pc, #28]	@ (8008c80 <MX_TIM3_Init+0xf0>)
 8008c62:	f00d fe91 	bl	8016988 <HAL_TIM_PWM_ConfigChannel>
 8008c66:	4603      	mov	r3, r0
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d001      	beq.n	8008c70 <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 8008c6c:	f7fe ff84 	bl	8007b78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8008c70:	4803      	ldr	r0, [pc, #12]	@ (8008c80 <MX_TIM3_Init+0xf0>)
 8008c72:	f000 f90b 	bl	8008e8c <HAL_TIM_MspPostInit>

}
 8008c76:	bf00      	nop
 8008c78:	3728      	adds	r7, #40	@ 0x28
 8008c7a:	46bd      	mov	sp, r7
 8008c7c:	bd80      	pop	{r7, pc}
 8008c7e:	bf00      	nop
 8008c80:	24000418 	.word	0x24000418
 8008c84:	40000400 	.word	0x40000400

08008c88 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8008c88:	b580      	push	{r7, lr}
 8008c8a:	b088      	sub	sp, #32
 8008c8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008c8e:	f107 0310 	add.w	r3, r7, #16
 8008c92:	2200      	movs	r2, #0
 8008c94:	601a      	str	r2, [r3, #0]
 8008c96:	605a      	str	r2, [r3, #4]
 8008c98:	609a      	str	r2, [r3, #8]
 8008c9a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008c9c:	1d3b      	adds	r3, r7, #4
 8008c9e:	2200      	movs	r2, #0
 8008ca0:	601a      	str	r2, [r3, #0]
 8008ca2:	605a      	str	r2, [r3, #4]
 8008ca4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8008ca6:	4b21      	ldr	r3, [pc, #132]	@ (8008d2c <MX_TIM8_Init+0xa4>)
 8008ca8:	4a21      	ldr	r2, [pc, #132]	@ (8008d30 <MX_TIM8_Init+0xa8>)
 8008caa:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 5549;
 8008cac:	4b1f      	ldr	r3, [pc, #124]	@ (8008d2c <MX_TIM8_Init+0xa4>)
 8008cae:	f241 52ad 	movw	r2, #5549	@ 0x15ad
 8008cb2:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008cb4:	4b1d      	ldr	r3, [pc, #116]	@ (8008d2c <MX_TIM8_Init+0xa4>)
 8008cb6:	2200      	movs	r2, #0
 8008cb8:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 9999;
 8008cba:	4b1c      	ldr	r3, [pc, #112]	@ (8008d2c <MX_TIM8_Init+0xa4>)
 8008cbc:	f242 720f 	movw	r2, #9999	@ 0x270f
 8008cc0:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008cc2:	4b1a      	ldr	r3, [pc, #104]	@ (8008d2c <MX_TIM8_Init+0xa4>)
 8008cc4:	2200      	movs	r2, #0
 8008cc6:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8008cc8:	4b18      	ldr	r3, [pc, #96]	@ (8008d2c <MX_TIM8_Init+0xa4>)
 8008cca:	2200      	movs	r2, #0
 8008ccc:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008cce:	4b17      	ldr	r3, [pc, #92]	@ (8008d2c <MX_TIM8_Init+0xa4>)
 8008cd0:	2200      	movs	r2, #0
 8008cd2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8008cd4:	4815      	ldr	r0, [pc, #84]	@ (8008d2c <MX_TIM8_Init+0xa4>)
 8008cd6:	f00d f98e 	bl	8015ff6 <HAL_TIM_Base_Init>
 8008cda:	4603      	mov	r3, r0
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d001      	beq.n	8008ce4 <MX_TIM8_Init+0x5c>
  {
    Error_Handler();
 8008ce0:	f7fe ff4a 	bl	8007b78 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008ce4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008ce8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8008cea:	f107 0310 	add.w	r3, r7, #16
 8008cee:	4619      	mov	r1, r3
 8008cf0:	480e      	ldr	r0, [pc, #56]	@ (8008d2c <MX_TIM8_Init+0xa4>)
 8008cf2:	f00d ff5d 	bl	8016bb0 <HAL_TIM_ConfigClockSource>
 8008cf6:	4603      	mov	r3, r0
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d001      	beq.n	8008d00 <MX_TIM8_Init+0x78>
  {
    Error_Handler();
 8008cfc:	f7fe ff3c 	bl	8007b78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8008d00:	2320      	movs	r3, #32
 8008d02:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_UPDATE;
 8008d04:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8008d08:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008d0a:	2300      	movs	r3, #0
 8008d0c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8008d0e:	1d3b      	adds	r3, r7, #4
 8008d10:	4619      	mov	r1, r3
 8008d12:	4806      	ldr	r0, [pc, #24]	@ (8008d2c <MX_TIM8_Init+0xa4>)
 8008d14:	f00e fde8 	bl	80178e8 <HAL_TIMEx_MasterConfigSynchronization>
 8008d18:	4603      	mov	r3, r0
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d001      	beq.n	8008d22 <MX_TIM8_Init+0x9a>
  {
    Error_Handler();
 8008d1e:	f7fe ff2b 	bl	8007b78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8008d22:	bf00      	nop
 8008d24:	3720      	adds	r7, #32
 8008d26:	46bd      	mov	sp, r7
 8008d28:	bd80      	pop	{r7, pc}
 8008d2a:	bf00      	nop
 8008d2c:	24000464 	.word	0x24000464
 8008d30:	40010400 	.word	0x40010400

08008d34 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8008d34:	b480      	push	{r7}
 8008d36:	b085      	sub	sp, #20
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	4a16      	ldr	r2, [pc, #88]	@ (8008d9c <HAL_TIM_PWM_MspInit+0x68>)
 8008d42:	4293      	cmp	r3, r2
 8008d44:	d10f      	bne.n	8008d66 <HAL_TIM_PWM_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8008d46:	4b16      	ldr	r3, [pc, #88]	@ (8008da0 <HAL_TIM_PWM_MspInit+0x6c>)
 8008d48:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008d4c:	4a14      	ldr	r2, [pc, #80]	@ (8008da0 <HAL_TIM_PWM_MspInit+0x6c>)
 8008d4e:	f043 0301 	orr.w	r3, r3, #1
 8008d52:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8008d56:	4b12      	ldr	r3, [pc, #72]	@ (8008da0 <HAL_TIM_PWM_MspInit+0x6c>)
 8008d58:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008d5c:	f003 0301 	and.w	r3, r3, #1
 8008d60:	60fb      	str	r3, [r7, #12]
 8008d62:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8008d64:	e013      	b.n	8008d8e <HAL_TIM_PWM_MspInit+0x5a>
  else if(tim_pwmHandle->Instance==TIM3)
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	4a0e      	ldr	r2, [pc, #56]	@ (8008da4 <HAL_TIM_PWM_MspInit+0x70>)
 8008d6c:	4293      	cmp	r3, r2
 8008d6e:	d10e      	bne.n	8008d8e <HAL_TIM_PWM_MspInit+0x5a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8008d70:	4b0b      	ldr	r3, [pc, #44]	@ (8008da0 <HAL_TIM_PWM_MspInit+0x6c>)
 8008d72:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008d76:	4a0a      	ldr	r2, [pc, #40]	@ (8008da0 <HAL_TIM_PWM_MspInit+0x6c>)
 8008d78:	f043 0302 	orr.w	r3, r3, #2
 8008d7c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8008d80:	4b07      	ldr	r3, [pc, #28]	@ (8008da0 <HAL_TIM_PWM_MspInit+0x6c>)
 8008d82:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008d86:	f003 0302 	and.w	r3, r3, #2
 8008d8a:	60bb      	str	r3, [r7, #8]
 8008d8c:	68bb      	ldr	r3, [r7, #8]
}
 8008d8e:	bf00      	nop
 8008d90:	3714      	adds	r7, #20
 8008d92:	46bd      	mov	sp, r7
 8008d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d98:	4770      	bx	lr
 8008d9a:	bf00      	nop
 8008d9c:	40010000 	.word	0x40010000
 8008da0:	58024400 	.word	0x58024400
 8008da4:	40000400 	.word	0x40000400

08008da8 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 8008da8:	b580      	push	{r7, lr}
 8008daa:	b08a      	sub	sp, #40	@ 0x28
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008db0:	f107 0314 	add.w	r3, r7, #20
 8008db4:	2200      	movs	r2, #0
 8008db6:	601a      	str	r2, [r3, #0]
 8008db8:	605a      	str	r2, [r3, #4]
 8008dba:	609a      	str	r2, [r3, #8]
 8008dbc:	60da      	str	r2, [r3, #12]
 8008dbe:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM2)
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008dc8:	d135      	bne.n	8008e36 <HAL_TIM_IC_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8008dca:	4b1d      	ldr	r3, [pc, #116]	@ (8008e40 <HAL_TIM_IC_MspInit+0x98>)
 8008dcc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008dd0:	4a1b      	ldr	r2, [pc, #108]	@ (8008e40 <HAL_TIM_IC_MspInit+0x98>)
 8008dd2:	f043 0301 	orr.w	r3, r3, #1
 8008dd6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8008dda:	4b19      	ldr	r3, [pc, #100]	@ (8008e40 <HAL_TIM_IC_MspInit+0x98>)
 8008ddc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008de0:	f003 0301 	and.w	r3, r3, #1
 8008de4:	613b      	str	r3, [r7, #16]
 8008de6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008de8:	4b15      	ldr	r3, [pc, #84]	@ (8008e40 <HAL_TIM_IC_MspInit+0x98>)
 8008dea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008dee:	4a14      	ldr	r2, [pc, #80]	@ (8008e40 <HAL_TIM_IC_MspInit+0x98>)
 8008df0:	f043 0301 	orr.w	r3, r3, #1
 8008df4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8008df8:	4b11      	ldr	r3, [pc, #68]	@ (8008e40 <HAL_TIM_IC_MspInit+0x98>)
 8008dfa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008dfe:	f003 0301 	and.w	r3, r3, #1
 8008e02:	60fb      	str	r3, [r7, #12]
 8008e04:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8008e06:	2301      	movs	r3, #1
 8008e08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008e0a:	2302      	movs	r3, #2
 8008e0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008e0e:	2300      	movs	r3, #0
 8008e10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008e12:	2300      	movs	r3, #0
 8008e14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8008e16:	2301      	movs	r3, #1
 8008e18:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008e1a:	f107 0314 	add.w	r3, r7, #20
 8008e1e:	4619      	mov	r1, r3
 8008e20:	4808      	ldr	r0, [pc, #32]	@ (8008e44 <HAL_TIM_IC_MspInit+0x9c>)
 8008e22:	f005 f98f 	bl	800e144 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8008e26:	2200      	movs	r2, #0
 8008e28:	2101      	movs	r1, #1
 8008e2a:	201c      	movs	r0, #28
 8008e2c:	f002 fa8b 	bl	800b346 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8008e30:	201c      	movs	r0, #28
 8008e32:	f002 faa2 	bl	800b37a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8008e36:	bf00      	nop
 8008e38:	3728      	adds	r7, #40	@ 0x28
 8008e3a:	46bd      	mov	sp, r7
 8008e3c:	bd80      	pop	{r7, pc}
 8008e3e:	bf00      	nop
 8008e40:	58024400 	.word	0x58024400
 8008e44:	58020000 	.word	0x58020000

08008e48 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8008e48:	b480      	push	{r7}
 8008e4a:	b085      	sub	sp, #20
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM8)
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	4a0b      	ldr	r2, [pc, #44]	@ (8008e84 <HAL_TIM_Base_MspInit+0x3c>)
 8008e56:	4293      	cmp	r3, r2
 8008e58:	d10e      	bne.n	8008e78 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8008e5a:	4b0b      	ldr	r3, [pc, #44]	@ (8008e88 <HAL_TIM_Base_MspInit+0x40>)
 8008e5c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008e60:	4a09      	ldr	r2, [pc, #36]	@ (8008e88 <HAL_TIM_Base_MspInit+0x40>)
 8008e62:	f043 0302 	orr.w	r3, r3, #2
 8008e66:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8008e6a:	4b07      	ldr	r3, [pc, #28]	@ (8008e88 <HAL_TIM_Base_MspInit+0x40>)
 8008e6c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008e70:	f003 0302 	and.w	r3, r3, #2
 8008e74:	60fb      	str	r3, [r7, #12]
 8008e76:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8008e78:	bf00      	nop
 8008e7a:	3714      	adds	r7, #20
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e82:	4770      	bx	lr
 8008e84:	40010400 	.word	0x40010400
 8008e88:	58024400 	.word	0x58024400

08008e8c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8008e8c:	b580      	push	{r7, lr}
 8008e8e:	b08a      	sub	sp, #40	@ 0x28
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008e94:	f107 0314 	add.w	r3, r7, #20
 8008e98:	2200      	movs	r2, #0
 8008e9a:	601a      	str	r2, [r3, #0]
 8008e9c:	605a      	str	r2, [r3, #4]
 8008e9e:	609a      	str	r2, [r3, #8]
 8008ea0:	60da      	str	r2, [r3, #12]
 8008ea2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	4a26      	ldr	r2, [pc, #152]	@ (8008f44 <HAL_TIM_MspPostInit+0xb8>)
 8008eaa:	4293      	cmp	r3, r2
 8008eac:	d120      	bne.n	8008ef0 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8008eae:	4b26      	ldr	r3, [pc, #152]	@ (8008f48 <HAL_TIM_MspPostInit+0xbc>)
 8008eb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008eb4:	4a24      	ldr	r2, [pc, #144]	@ (8008f48 <HAL_TIM_MspPostInit+0xbc>)
 8008eb6:	f043 0310 	orr.w	r3, r3, #16
 8008eba:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8008ebe:	4b22      	ldr	r3, [pc, #136]	@ (8008f48 <HAL_TIM_MspPostInit+0xbc>)
 8008ec0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008ec4:	f003 0310 	and.w	r3, r3, #16
 8008ec8:	613b      	str	r3, [r7, #16]
 8008eca:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 8008ecc:	f44f 43d0 	mov.w	r3, #26624	@ 0x6800
 8008ed0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008ed2:	2302      	movs	r3, #2
 8008ed4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008ed6:	2300      	movs	r3, #0
 8008ed8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008eda:	2300      	movs	r3, #0
 8008edc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8008ede:	2301      	movs	r3, #1
 8008ee0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8008ee2:	f107 0314 	add.w	r3, r7, #20
 8008ee6:	4619      	mov	r1, r3
 8008ee8:	4818      	ldr	r0, [pc, #96]	@ (8008f4c <HAL_TIM_MspPostInit+0xc0>)
 8008eea:	f005 f92b 	bl	800e144 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8008eee:	e024      	b.n	8008f3a <HAL_TIM_MspPostInit+0xae>
  else if(timHandle->Instance==TIM3)
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	4a16      	ldr	r2, [pc, #88]	@ (8008f50 <HAL_TIM_MspPostInit+0xc4>)
 8008ef6:	4293      	cmp	r3, r2
 8008ef8:	d11f      	bne.n	8008f3a <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008efa:	4b13      	ldr	r3, [pc, #76]	@ (8008f48 <HAL_TIM_MspPostInit+0xbc>)
 8008efc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008f00:	4a11      	ldr	r2, [pc, #68]	@ (8008f48 <HAL_TIM_MspPostInit+0xbc>)
 8008f02:	f043 0304 	orr.w	r3, r3, #4
 8008f06:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8008f0a:	4b0f      	ldr	r3, [pc, #60]	@ (8008f48 <HAL_TIM_MspPostInit+0xbc>)
 8008f0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008f10:	f003 0304 	and.w	r3, r3, #4
 8008f14:	60fb      	str	r3, [r7, #12]
 8008f16:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8008f18:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8008f1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008f1e:	2302      	movs	r3, #2
 8008f20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008f22:	2300      	movs	r3, #0
 8008f24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008f26:	2300      	movs	r3, #0
 8008f28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8008f2a:	2302      	movs	r3, #2
 8008f2c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008f2e:	f107 0314 	add.w	r3, r7, #20
 8008f32:	4619      	mov	r1, r3
 8008f34:	4807      	ldr	r0, [pc, #28]	@ (8008f54 <HAL_TIM_MspPostInit+0xc8>)
 8008f36:	f005 f905 	bl	800e144 <HAL_GPIO_Init>
}
 8008f3a:	bf00      	nop
 8008f3c:	3728      	adds	r7, #40	@ 0x28
 8008f3e:	46bd      	mov	sp, r7
 8008f40:	bd80      	pop	{r7, pc}
 8008f42:	bf00      	nop
 8008f44:	40010000 	.word	0x40010000
 8008f48:	58024400 	.word	0x58024400
 8008f4c:	58021000 	.word	0x58021000
 8008f50:	40000400 	.word	0x40000400
 8008f54:	58020800 	.word	0x58020800

08008f58 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8008f58:	b580      	push	{r7, lr}
 8008f5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8008f5c:	4b22      	ldr	r3, [pc, #136]	@ (8008fe8 <MX_USART1_UART_Init+0x90>)
 8008f5e:	4a23      	ldr	r2, [pc, #140]	@ (8008fec <MX_USART1_UART_Init+0x94>)
 8008f60:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8008f62:	4b21      	ldr	r3, [pc, #132]	@ (8008fe8 <MX_USART1_UART_Init+0x90>)
 8008f64:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8008f68:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8008f6a:	4b1f      	ldr	r3, [pc, #124]	@ (8008fe8 <MX_USART1_UART_Init+0x90>)
 8008f6c:	2200      	movs	r2, #0
 8008f6e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8008f70:	4b1d      	ldr	r3, [pc, #116]	@ (8008fe8 <MX_USART1_UART_Init+0x90>)
 8008f72:	2200      	movs	r2, #0
 8008f74:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8008f76:	4b1c      	ldr	r3, [pc, #112]	@ (8008fe8 <MX_USART1_UART_Init+0x90>)
 8008f78:	2200      	movs	r2, #0
 8008f7a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8008f7c:	4b1a      	ldr	r3, [pc, #104]	@ (8008fe8 <MX_USART1_UART_Init+0x90>)
 8008f7e:	220c      	movs	r2, #12
 8008f80:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008f82:	4b19      	ldr	r3, [pc, #100]	@ (8008fe8 <MX_USART1_UART_Init+0x90>)
 8008f84:	2200      	movs	r2, #0
 8008f86:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8008f88:	4b17      	ldr	r3, [pc, #92]	@ (8008fe8 <MX_USART1_UART_Init+0x90>)
 8008f8a:	2200      	movs	r2, #0
 8008f8c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8008f8e:	4b16      	ldr	r3, [pc, #88]	@ (8008fe8 <MX_USART1_UART_Init+0x90>)
 8008f90:	2200      	movs	r2, #0
 8008f92:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8008f94:	4b14      	ldr	r3, [pc, #80]	@ (8008fe8 <MX_USART1_UART_Init+0x90>)
 8008f96:	2200      	movs	r2, #0
 8008f98:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8008f9a:	4b13      	ldr	r3, [pc, #76]	@ (8008fe8 <MX_USART1_UART_Init+0x90>)
 8008f9c:	2200      	movs	r2, #0
 8008f9e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8008fa0:	4811      	ldr	r0, [pc, #68]	@ (8008fe8 <MX_USART1_UART_Init+0x90>)
 8008fa2:	f00e fde7 	bl	8017b74 <HAL_UART_Init>
 8008fa6:	4603      	mov	r3, r0
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d001      	beq.n	8008fb0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8008fac:	f7fe fde4 	bl	8007b78 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8008fb0:	2100      	movs	r1, #0
 8008fb2:	480d      	ldr	r0, [pc, #52]	@ (8008fe8 <MX_USART1_UART_Init+0x90>)
 8008fb4:	f011 fc97 	bl	801a8e6 <HAL_UARTEx_SetTxFifoThreshold>
 8008fb8:	4603      	mov	r3, r0
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d001      	beq.n	8008fc2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8008fbe:	f7fe fddb 	bl	8007b78 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8008fc2:	2100      	movs	r1, #0
 8008fc4:	4808      	ldr	r0, [pc, #32]	@ (8008fe8 <MX_USART1_UART_Init+0x90>)
 8008fc6:	f011 fccc 	bl	801a962 <HAL_UARTEx_SetRxFifoThreshold>
 8008fca:	4603      	mov	r3, r0
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d001      	beq.n	8008fd4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8008fd0:	f7fe fdd2 	bl	8007b78 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8008fd4:	4804      	ldr	r0, [pc, #16]	@ (8008fe8 <MX_USART1_UART_Init+0x90>)
 8008fd6:	f011 fc4d 	bl	801a874 <HAL_UARTEx_DisableFifoMode>
 8008fda:	4603      	mov	r3, r0
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d001      	beq.n	8008fe4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8008fe0:	f7fe fdca 	bl	8007b78 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8008fe4:	bf00      	nop
 8008fe6:	bd80      	pop	{r7, pc}
 8008fe8:	240004b0 	.word	0x240004b0
 8008fec:	40011000 	.word	0x40011000

08008ff0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8008ff0:	b580      	push	{r7, lr}
 8008ff2:	b0b8      	sub	sp, #224	@ 0xe0
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008ff8:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8008ffc:	2200      	movs	r2, #0
 8008ffe:	601a      	str	r2, [r3, #0]
 8009000:	605a      	str	r2, [r3, #4]
 8009002:	609a      	str	r2, [r3, #8]
 8009004:	60da      	str	r2, [r3, #12]
 8009006:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8009008:	f107 0310 	add.w	r3, r7, #16
 800900c:	22b8      	movs	r2, #184	@ 0xb8
 800900e:	2100      	movs	r1, #0
 8009010:	4618      	mov	r0, r3
 8009012:	f014 fee7 	bl	801dde4 <memset>
  if(uartHandle->Instance==USART1)
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	4a2b      	ldr	r2, [pc, #172]	@ (80090c8 <HAL_UART_MspInit+0xd8>)
 800901c:	4293      	cmp	r3, r2
 800901e:	d14e      	bne.n	80090be <HAL_UART_MspInit+0xce>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8009020:	f04f 0201 	mov.w	r2, #1
 8009024:	f04f 0300 	mov.w	r3, #0
 8009028:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 800902c:	2300      	movs	r3, #0
 800902e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8009032:	f107 0310 	add.w	r3, r7, #16
 8009036:	4618      	mov	r0, r3
 8009038:	f008 fe96 	bl	8011d68 <HAL_RCCEx_PeriphCLKConfig>
 800903c:	4603      	mov	r3, r0
 800903e:	2b00      	cmp	r3, #0
 8009040:	d001      	beq.n	8009046 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8009042:	f7fe fd99 	bl	8007b78 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8009046:	4b21      	ldr	r3, [pc, #132]	@ (80090cc <HAL_UART_MspInit+0xdc>)
 8009048:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800904c:	4a1f      	ldr	r2, [pc, #124]	@ (80090cc <HAL_UART_MspInit+0xdc>)
 800904e:	f043 0310 	orr.w	r3, r3, #16
 8009052:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8009056:	4b1d      	ldr	r3, [pc, #116]	@ (80090cc <HAL_UART_MspInit+0xdc>)
 8009058:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800905c:	f003 0310 	and.w	r3, r3, #16
 8009060:	60fb      	str	r3, [r7, #12]
 8009062:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009064:	4b19      	ldr	r3, [pc, #100]	@ (80090cc <HAL_UART_MspInit+0xdc>)
 8009066:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800906a:	4a18      	ldr	r2, [pc, #96]	@ (80090cc <HAL_UART_MspInit+0xdc>)
 800906c:	f043 0301 	orr.w	r3, r3, #1
 8009070:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8009074:	4b15      	ldr	r3, [pc, #84]	@ (80090cc <HAL_UART_MspInit+0xdc>)
 8009076:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800907a:	f003 0301 	and.w	r3, r3, #1
 800907e:	60bb      	str	r3, [r7, #8]
 8009080:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8009082:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8009086:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800908a:	2302      	movs	r3, #2
 800908c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009090:	2300      	movs	r3, #0
 8009092:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009096:	2300      	movs	r3, #0
 8009098:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800909c:	2307      	movs	r3, #7
 800909e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80090a2:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80090a6:	4619      	mov	r1, r3
 80090a8:	4809      	ldr	r0, [pc, #36]	@ (80090d0 <HAL_UART_MspInit+0xe0>)
 80090aa:	f005 f84b 	bl	800e144 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80090ae:	2200      	movs	r2, #0
 80090b0:	2100      	movs	r1, #0
 80090b2:	2025      	movs	r0, #37	@ 0x25
 80090b4:	f002 f947 	bl	800b346 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80090b8:	2025      	movs	r0, #37	@ 0x25
 80090ba:	f002 f95e 	bl	800b37a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80090be:	bf00      	nop
 80090c0:	37e0      	adds	r7, #224	@ 0xe0
 80090c2:	46bd      	mov	sp, r7
 80090c4:	bd80      	pop	{r7, pc}
 80090c6:	bf00      	nop
 80090c8:	40011000 	.word	0x40011000
 80090cc:	58024400 	.word	0x58024400
 80090d0:	58020000 	.word	0x58020000

080090d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80090d4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800910c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80090d8:	f7ff fbe6 	bl	80088a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80090dc:	480c      	ldr	r0, [pc, #48]	@ (8009110 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80090de:	490d      	ldr	r1, [pc, #52]	@ (8009114 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80090e0:	4a0d      	ldr	r2, [pc, #52]	@ (8009118 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80090e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80090e4:	e002      	b.n	80090ec <LoopCopyDataInit>

080090e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80090e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80090e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80090ea:	3304      	adds	r3, #4

080090ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80090ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80090ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80090f0:	d3f9      	bcc.n	80090e6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80090f2:	4a0a      	ldr	r2, [pc, #40]	@ (800911c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80090f4:	4c0a      	ldr	r4, [pc, #40]	@ (8009120 <LoopFillZerobss+0x22>)
  movs r3, #0
 80090f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80090f8:	e001      	b.n	80090fe <LoopFillZerobss>

080090fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80090fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80090fc:	3204      	adds	r2, #4

080090fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80090fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8009100:	d3fb      	bcc.n	80090fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8009102:	f014 fe7d 	bl	801de00 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8009106:	f7fb fe07 	bl	8004d18 <main>
  bx  lr
 800910a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800910c:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8009110:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8009114:	24000078 	.word	0x24000078
  ldr r2, =_sidata
 8009118:	08020668 	.word	0x08020668
  ldr r2, =_sbss
 800911c:	24000078 	.word	0x24000078
  ldr r4, =_ebss
 8009120:	240008ac 	.word	0x240008ac

08009124 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8009124:	e7fe      	b.n	8009124 <ADC3_IRQHandler>
	...

08009128 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8009128:	b580      	push	{r7, lr}
 800912a:	b082      	sub	sp, #8
 800912c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800912e:	2003      	movs	r0, #3
 8009130:	f002 f8fe 	bl	800b330 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8009134:	f008 fc42 	bl	80119bc <HAL_RCC_GetSysClockFreq>
 8009138:	4602      	mov	r2, r0
 800913a:	4b15      	ldr	r3, [pc, #84]	@ (8009190 <HAL_Init+0x68>)
 800913c:	699b      	ldr	r3, [r3, #24]
 800913e:	0a1b      	lsrs	r3, r3, #8
 8009140:	f003 030f 	and.w	r3, r3, #15
 8009144:	4913      	ldr	r1, [pc, #76]	@ (8009194 <HAL_Init+0x6c>)
 8009146:	5ccb      	ldrb	r3, [r1, r3]
 8009148:	f003 031f 	and.w	r3, r3, #31
 800914c:	fa22 f303 	lsr.w	r3, r2, r3
 8009150:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009152:	4b0f      	ldr	r3, [pc, #60]	@ (8009190 <HAL_Init+0x68>)
 8009154:	699b      	ldr	r3, [r3, #24]
 8009156:	f003 030f 	and.w	r3, r3, #15
 800915a:	4a0e      	ldr	r2, [pc, #56]	@ (8009194 <HAL_Init+0x6c>)
 800915c:	5cd3      	ldrb	r3, [r2, r3]
 800915e:	f003 031f 	and.w	r3, r3, #31
 8009162:	687a      	ldr	r2, [r7, #4]
 8009164:	fa22 f303 	lsr.w	r3, r2, r3
 8009168:	4a0b      	ldr	r2, [pc, #44]	@ (8009198 <HAL_Init+0x70>)
 800916a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800916c:	4a0b      	ldr	r2, [pc, #44]	@ (800919c <HAL_Init+0x74>)
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8009172:	200f      	movs	r0, #15
 8009174:	f000 f814 	bl	80091a0 <HAL_InitTick>
 8009178:	4603      	mov	r3, r0
 800917a:	2b00      	cmp	r3, #0
 800917c:	d001      	beq.n	8009182 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800917e:	2301      	movs	r3, #1
 8009180:	e002      	b.n	8009188 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8009182:	f7fe febb 	bl	8007efc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8009186:	2300      	movs	r3, #0
}
 8009188:	4618      	mov	r0, r3
 800918a:	3708      	adds	r7, #8
 800918c:	46bd      	mov	sp, r7
 800918e:	bd80      	pop	{r7, pc}
 8009190:	58024400 	.word	0x58024400
 8009194:	0801e8ac 	.word	0x0801e8ac
 8009198:	24000008 	.word	0x24000008
 800919c:	24000004 	.word	0x24000004

080091a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80091a0:	b580      	push	{r7, lr}
 80091a2:	b082      	sub	sp, #8
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80091a8:	4b15      	ldr	r3, [pc, #84]	@ (8009200 <HAL_InitTick+0x60>)
 80091aa:	781b      	ldrb	r3, [r3, #0]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d101      	bne.n	80091b4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80091b0:	2301      	movs	r3, #1
 80091b2:	e021      	b.n	80091f8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80091b4:	4b13      	ldr	r3, [pc, #76]	@ (8009204 <HAL_InitTick+0x64>)
 80091b6:	681a      	ldr	r2, [r3, #0]
 80091b8:	4b11      	ldr	r3, [pc, #68]	@ (8009200 <HAL_InitTick+0x60>)
 80091ba:	781b      	ldrb	r3, [r3, #0]
 80091bc:	4619      	mov	r1, r3
 80091be:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80091c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80091c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80091ca:	4618      	mov	r0, r3
 80091cc:	f002 f8e3 	bl	800b396 <HAL_SYSTICK_Config>
 80091d0:	4603      	mov	r3, r0
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d001      	beq.n	80091da <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80091d6:	2301      	movs	r3, #1
 80091d8:	e00e      	b.n	80091f8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	2b0f      	cmp	r3, #15
 80091de:	d80a      	bhi.n	80091f6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80091e0:	2200      	movs	r2, #0
 80091e2:	6879      	ldr	r1, [r7, #4]
 80091e4:	f04f 30ff 	mov.w	r0, #4294967295
 80091e8:	f002 f8ad 	bl	800b346 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80091ec:	4a06      	ldr	r2, [pc, #24]	@ (8009208 <HAL_InitTick+0x68>)
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80091f2:	2300      	movs	r3, #0
 80091f4:	e000      	b.n	80091f8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80091f6:	2301      	movs	r3, #1
}
 80091f8:	4618      	mov	r0, r3
 80091fa:	3708      	adds	r7, #8
 80091fc:	46bd      	mov	sp, r7
 80091fe:	bd80      	pop	{r7, pc}
 8009200:	24000010 	.word	0x24000010
 8009204:	24000004 	.word	0x24000004
 8009208:	2400000c 	.word	0x2400000c

0800920c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800920c:	b480      	push	{r7}
 800920e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8009210:	4b06      	ldr	r3, [pc, #24]	@ (800922c <HAL_IncTick+0x20>)
 8009212:	781b      	ldrb	r3, [r3, #0]
 8009214:	461a      	mov	r2, r3
 8009216:	4b06      	ldr	r3, [pc, #24]	@ (8009230 <HAL_IncTick+0x24>)
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	4413      	add	r3, r2
 800921c:	4a04      	ldr	r2, [pc, #16]	@ (8009230 <HAL_IncTick+0x24>)
 800921e:	6013      	str	r3, [r2, #0]
}
 8009220:	bf00      	nop
 8009222:	46bd      	mov	sp, r7
 8009224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009228:	4770      	bx	lr
 800922a:	bf00      	nop
 800922c:	24000010 	.word	0x24000010
 8009230:	24000544 	.word	0x24000544

08009234 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009234:	b480      	push	{r7}
 8009236:	af00      	add	r7, sp, #0
  return uwTick;
 8009238:	4b03      	ldr	r3, [pc, #12]	@ (8009248 <HAL_GetTick+0x14>)
 800923a:	681b      	ldr	r3, [r3, #0]
}
 800923c:	4618      	mov	r0, r3
 800923e:	46bd      	mov	sp, r7
 8009240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009244:	4770      	bx	lr
 8009246:	bf00      	nop
 8009248:	24000544 	.word	0x24000544

0800924c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800924c:	b580      	push	{r7, lr}
 800924e:	b084      	sub	sp, #16
 8009250:	af00      	add	r7, sp, #0
 8009252:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8009254:	f7ff ffee 	bl	8009234 <HAL_GetTick>
 8009258:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009264:	d005      	beq.n	8009272 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8009266:	4b0a      	ldr	r3, [pc, #40]	@ (8009290 <HAL_Delay+0x44>)
 8009268:	781b      	ldrb	r3, [r3, #0]
 800926a:	461a      	mov	r2, r3
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	4413      	add	r3, r2
 8009270:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8009272:	bf00      	nop
 8009274:	f7ff ffde 	bl	8009234 <HAL_GetTick>
 8009278:	4602      	mov	r2, r0
 800927a:	68bb      	ldr	r3, [r7, #8]
 800927c:	1ad3      	subs	r3, r2, r3
 800927e:	68fa      	ldr	r2, [r7, #12]
 8009280:	429a      	cmp	r2, r3
 8009282:	d8f7      	bhi.n	8009274 <HAL_Delay+0x28>
  {
  }
}
 8009284:	bf00      	nop
 8009286:	bf00      	nop
 8009288:	3710      	adds	r7, #16
 800928a:	46bd      	mov	sp, r7
 800928c:	bd80      	pop	{r7, pc}
 800928e:	bf00      	nop
 8009290:	24000010 	.word	0x24000010

08009294 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8009294:	b480      	push	{r7}
 8009296:	b083      	sub	sp, #12
 8009298:	af00      	add	r7, sp, #0
 800929a:	6078      	str	r0, [r7, #4]
 800929c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	689b      	ldr	r3, [r3, #8]
 80092a2:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80092a6:	683b      	ldr	r3, [r7, #0]
 80092a8:	431a      	orrs	r2, r3
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	609a      	str	r2, [r3, #8]
}
 80092ae:	bf00      	nop
 80092b0:	370c      	adds	r7, #12
 80092b2:	46bd      	mov	sp, r7
 80092b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b8:	4770      	bx	lr

080092ba <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80092ba:	b480      	push	{r7}
 80092bc:	b083      	sub	sp, #12
 80092be:	af00      	add	r7, sp, #0
 80092c0:	6078      	str	r0, [r7, #4]
 80092c2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	689b      	ldr	r3, [r3, #8]
 80092c8:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80092cc:	683b      	ldr	r3, [r7, #0]
 80092ce:	431a      	orrs	r2, r3
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	609a      	str	r2, [r3, #8]
}
 80092d4:	bf00      	nop
 80092d6:	370c      	adds	r7, #12
 80092d8:	46bd      	mov	sp, r7
 80092da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092de:	4770      	bx	lr

080092e0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80092e0:	b480      	push	{r7}
 80092e2:	b083      	sub	sp, #12
 80092e4:	af00      	add	r7, sp, #0
 80092e6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	689b      	ldr	r3, [r3, #8]
 80092ec:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80092f0:	4618      	mov	r0, r3
 80092f2:	370c      	adds	r7, #12
 80092f4:	46bd      	mov	sp, r7
 80092f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092fa:	4770      	bx	lr

080092fc <LL_ADC_SetChannelPreselection>:
  *         @arg @ref LL_ADC_CHANNEL_18
  *         @arg @ref LL_ADC_CHANNEL_19
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelPreselection(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80092fc:	b480      	push	{r7}
 80092fe:	b087      	sub	sp, #28
 8009300:	af00      	add	r7, sp, #0
 8009302:	6078      	str	r0, [r7, #4]
 8009304:	6039      	str	r1, [r7, #0]
#if defined(ADC_VER_V5_V90)
    if (ADCx != ADC3)
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	4a18      	ldr	r2, [pc, #96]	@ (800936c <LL_ADC_SetChannelPreselection+0x70>)
 800930a:	4293      	cmp	r3, r2
 800930c:	d027      	beq.n	800935e <LL_ADC_SetChannelPreselection+0x62>
    {
      /* ADC channels preselection */
      ADCx->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 800930e:	683b      	ldr	r3, [r7, #0]
 8009310:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009314:	2b00      	cmp	r3, #0
 8009316:	d107      	bne.n	8009328 <LL_ADC_SetChannelPreselection+0x2c>
 8009318:	683b      	ldr	r3, [r7, #0]
 800931a:	0e9b      	lsrs	r3, r3, #26
 800931c:	f003 031f 	and.w	r3, r3, #31
 8009320:	2201      	movs	r2, #1
 8009322:	fa02 f303 	lsl.w	r3, r2, r3
 8009326:	e015      	b.n	8009354 <LL_ADC_SetChannelPreselection+0x58>
 8009328:	683b      	ldr	r3, [r7, #0]
 800932a:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800932c:	693b      	ldr	r3, [r7, #16]
 800932e:	fa93 f3a3 	rbit	r3, r3
 8009332:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8009338:	697b      	ldr	r3, [r7, #20]
 800933a:	2b00      	cmp	r3, #0
 800933c:	d101      	bne.n	8009342 <LL_ADC_SetChannelPreselection+0x46>
  {
    return 32U;
 800933e:	2320      	movs	r3, #32
 8009340:	e003      	b.n	800934a <LL_ADC_SetChannelPreselection+0x4e>
  }
  return __builtin_clz(value);
 8009342:	697b      	ldr	r3, [r7, #20]
 8009344:	fab3 f383 	clz	r3, r3
 8009348:	b2db      	uxtb	r3, r3
 800934a:	f003 031f 	and.w	r3, r3, #31
 800934e:	2201      	movs	r2, #1
 8009350:	fa02 f303 	lsl.w	r3, r2, r3
 8009354:	687a      	ldr	r2, [r7, #4]
 8009356:	69d2      	ldr	r2, [r2, #28]
 8009358:	431a      	orrs	r2, r3
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	61da      	str	r2, [r3, #28]
    }
#else
    /* ADC channels preselection */
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
}
 800935e:	bf00      	nop
 8009360:	371c      	adds	r7, #28
 8009362:	46bd      	mov	sp, r7
 8009364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009368:	4770      	bx	lr
 800936a:	bf00      	nop
 800936c:	58026000 	.word	0x58026000

08009370 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8009370:	b480      	push	{r7}
 8009372:	b087      	sub	sp, #28
 8009374:	af00      	add	r7, sp, #0
 8009376:	60f8      	str	r0, [r7, #12]
 8009378:	60b9      	str	r1, [r7, #8]
 800937a:	607a      	str	r2, [r7, #4]
 800937c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	3360      	adds	r3, #96	@ 0x60
 8009382:	461a      	mov	r2, r3
 8009384:	68bb      	ldr	r3, [r7, #8]
 8009386:	009b      	lsls	r3, r3, #2
 8009388:	4413      	add	r3, r2
 800938a:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	4a10      	ldr	r2, [pc, #64]	@ (80093d0 <LL_ADC_SetOffset+0x60>)
 8009390:	4293      	cmp	r3, r2
 8009392:	d10b      	bne.n	80093ac <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8009394:	697b      	ldr	r3, [r7, #20]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800939e:	683b      	ldr	r3, [r7, #0]
 80093a0:	4313      	orrs	r3, r2
 80093a2:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80093a6:	697b      	ldr	r3, [r7, #20]
 80093a8:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80093aa:	e00b      	b.n	80093c4 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 80093ac:	697b      	ldr	r3, [r7, #20]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 80093ba:	683b      	ldr	r3, [r7, #0]
 80093bc:	430b      	orrs	r3, r1
 80093be:	431a      	orrs	r2, r3
 80093c0:	697b      	ldr	r3, [r7, #20]
 80093c2:	601a      	str	r2, [r3, #0]
}
 80093c4:	bf00      	nop
 80093c6:	371c      	adds	r7, #28
 80093c8:	46bd      	mov	sp, r7
 80093ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ce:	4770      	bx	lr
 80093d0:	58026000 	.word	0x58026000

080093d4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80093d4:	b480      	push	{r7}
 80093d6:	b085      	sub	sp, #20
 80093d8:	af00      	add	r7, sp, #0
 80093da:	6078      	str	r0, [r7, #4]
 80093dc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	3360      	adds	r3, #96	@ 0x60
 80093e2:	461a      	mov	r2, r3
 80093e4:	683b      	ldr	r3, [r7, #0]
 80093e6:	009b      	lsls	r3, r3, #2
 80093e8:	4413      	add	r3, r2
 80093ea:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80093f4:	4618      	mov	r0, r3
 80093f6:	3714      	adds	r7, #20
 80093f8:	46bd      	mov	sp, r7
 80093fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093fe:	4770      	bx	lr

08009400 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8009400:	b480      	push	{r7}
 8009402:	b085      	sub	sp, #20
 8009404:	af00      	add	r7, sp, #0
 8009406:	60f8      	str	r0, [r7, #12]
 8009408:	60b9      	str	r1, [r7, #8]
 800940a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	691b      	ldr	r3, [r3, #16]
 8009410:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8009414:	68bb      	ldr	r3, [r7, #8]
 8009416:	f003 031f 	and.w	r3, r3, #31
 800941a:	6879      	ldr	r1, [r7, #4]
 800941c:	fa01 f303 	lsl.w	r3, r1, r3
 8009420:	431a      	orrs	r2, r3
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	611a      	str	r2, [r3, #16]
}
 8009426:	bf00      	nop
 8009428:	3714      	adds	r7, #20
 800942a:	46bd      	mov	sp, r7
 800942c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009430:	4770      	bx	lr
	...

08009434 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8009434:	b480      	push	{r7}
 8009436:	b087      	sub	sp, #28
 8009438:	af00      	add	r7, sp, #0
 800943a:	60f8      	str	r0, [r7, #12]
 800943c:	60b9      	str	r1, [r7, #8]
 800943e:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	4a0c      	ldr	r2, [pc, #48]	@ (8009474 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8009444:	4293      	cmp	r3, r2
 8009446:	d00e      	beq.n	8009466 <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	3360      	adds	r3, #96	@ 0x60
 800944c:	461a      	mov	r2, r3
 800944e:	68bb      	ldr	r3, [r7, #8]
 8009450:	009b      	lsls	r3, r3, #2
 8009452:	4413      	add	r3, r2
 8009454:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8009456:	697b      	ldr	r3, [r7, #20]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	431a      	orrs	r2, r3
 8009462:	697b      	ldr	r3, [r7, #20]
 8009464:	601a      	str	r2, [r3, #0]
  }
}
 8009466:	bf00      	nop
 8009468:	371c      	adds	r7, #28
 800946a:	46bd      	mov	sp, r7
 800946c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009470:	4770      	bx	lr
 8009472:	bf00      	nop
 8009474:	58026000 	.word	0x58026000

08009478 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8009478:	b480      	push	{r7}
 800947a:	b087      	sub	sp, #28
 800947c:	af00      	add	r7, sp, #0
 800947e:	60f8      	str	r0, [r7, #12]
 8009480:	60b9      	str	r1, [r7, #8]
 8009482:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	4a0c      	ldr	r2, [pc, #48]	@ (80094b8 <LL_ADC_SetOffsetSaturation+0x40>)
 8009488:	4293      	cmp	r3, r2
 800948a:	d10e      	bne.n	80094aa <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	3360      	adds	r3, #96	@ 0x60
 8009490:	461a      	mov	r2, r3
 8009492:	68bb      	ldr	r3, [r7, #8]
 8009494:	009b      	lsls	r3, r3, #2
 8009496:	4413      	add	r3, r2
 8009498:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 800949a:	697b      	ldr	r3, [r7, #20]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	431a      	orrs	r2, r3
 80094a6:	697b      	ldr	r3, [r7, #20]
 80094a8:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 80094aa:	bf00      	nop
 80094ac:	371c      	adds	r7, #28
 80094ae:	46bd      	mov	sp, r7
 80094b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b4:	4770      	bx	lr
 80094b6:	bf00      	nop
 80094b8:	58026000 	.word	0x58026000

080094bc <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80094bc:	b480      	push	{r7}
 80094be:	b087      	sub	sp, #28
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	60f8      	str	r0, [r7, #12]
 80094c4:	60b9      	str	r1, [r7, #8]
 80094c6:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	4a0c      	ldr	r2, [pc, #48]	@ (80094fc <LL_ADC_SetOffsetSign+0x40>)
 80094cc:	4293      	cmp	r3, r2
 80094ce:	d10e      	bne.n	80094ee <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	3360      	adds	r3, #96	@ 0x60
 80094d4:	461a      	mov	r2, r3
 80094d6:	68bb      	ldr	r3, [r7, #8]
 80094d8:	009b      	lsls	r3, r3, #2
 80094da:	4413      	add	r3, r2
 80094dc:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 80094de:	697b      	ldr	r3, [r7, #20]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	431a      	orrs	r2, r3
 80094ea:	697b      	ldr	r3, [r7, #20]
 80094ec:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 80094ee:	bf00      	nop
 80094f0:	371c      	adds	r7, #28
 80094f2:	46bd      	mov	sp, r7
 80094f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f8:	4770      	bx	lr
 80094fa:	bf00      	nop
 80094fc:	58026000 	.word	0x58026000

08009500 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8009500:	b480      	push	{r7}
 8009502:	b087      	sub	sp, #28
 8009504:	af00      	add	r7, sp, #0
 8009506:	60f8      	str	r0, [r7, #12]
 8009508:	60b9      	str	r1, [r7, #8]
 800950a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	3360      	adds	r3, #96	@ 0x60
 8009510:	461a      	mov	r2, r3
 8009512:	68bb      	ldr	r3, [r7, #8]
 8009514:	009b      	lsls	r3, r3, #2
 8009516:	4413      	add	r3, r2
 8009518:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	4a0c      	ldr	r2, [pc, #48]	@ (8009550 <LL_ADC_SetOffsetState+0x50>)
 800951e:	4293      	cmp	r3, r2
 8009520:	d108      	bne.n	8009534 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 8009522:	697b      	ldr	r3, [r7, #20]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	431a      	orrs	r2, r3
 800952e:	697b      	ldr	r3, [r7, #20]
 8009530:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 8009532:	e007      	b.n	8009544 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8009534:	697b      	ldr	r3, [r7, #20]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	431a      	orrs	r2, r3
 8009540:	697b      	ldr	r3, [r7, #20]
 8009542:	601a      	str	r2, [r3, #0]
}
 8009544:	bf00      	nop
 8009546:	371c      	adds	r7, #28
 8009548:	46bd      	mov	sp, r7
 800954a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800954e:	4770      	bx	lr
 8009550:	58026000 	.word	0x58026000

08009554 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8009554:	b480      	push	{r7}
 8009556:	b083      	sub	sp, #12
 8009558:	af00      	add	r7, sp, #0
 800955a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	68db      	ldr	r3, [r3, #12]
 8009560:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8009564:	2b00      	cmp	r3, #0
 8009566:	d101      	bne.n	800956c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8009568:	2301      	movs	r3, #1
 800956a:	e000      	b.n	800956e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800956c:	2300      	movs	r3, #0
}
 800956e:	4618      	mov	r0, r3
 8009570:	370c      	adds	r7, #12
 8009572:	46bd      	mov	sp, r7
 8009574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009578:	4770      	bx	lr

0800957a <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800957a:	b480      	push	{r7}
 800957c:	b087      	sub	sp, #28
 800957e:	af00      	add	r7, sp, #0
 8009580:	60f8      	str	r0, [r7, #12]
 8009582:	60b9      	str	r1, [r7, #8]
 8009584:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	3330      	adds	r3, #48	@ 0x30
 800958a:	461a      	mov	r2, r3
 800958c:	68bb      	ldr	r3, [r7, #8]
 800958e:	0a1b      	lsrs	r3, r3, #8
 8009590:	009b      	lsls	r3, r3, #2
 8009592:	f003 030c 	and.w	r3, r3, #12
 8009596:	4413      	add	r3, r2
 8009598:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800959a:	697b      	ldr	r3, [r7, #20]
 800959c:	681a      	ldr	r2, [r3, #0]
 800959e:	68bb      	ldr	r3, [r7, #8]
 80095a0:	f003 031f 	and.w	r3, r3, #31
 80095a4:	211f      	movs	r1, #31
 80095a6:	fa01 f303 	lsl.w	r3, r1, r3
 80095aa:	43db      	mvns	r3, r3
 80095ac:	401a      	ands	r2, r3
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	0e9b      	lsrs	r3, r3, #26
 80095b2:	f003 011f 	and.w	r1, r3, #31
 80095b6:	68bb      	ldr	r3, [r7, #8]
 80095b8:	f003 031f 	and.w	r3, r3, #31
 80095bc:	fa01 f303 	lsl.w	r3, r1, r3
 80095c0:	431a      	orrs	r2, r3
 80095c2:	697b      	ldr	r3, [r7, #20]
 80095c4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80095c6:	bf00      	nop
 80095c8:	371c      	adds	r7, #28
 80095ca:	46bd      	mov	sp, r7
 80095cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d0:	4770      	bx	lr

080095d2 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 80095d2:	b480      	push	{r7}
 80095d4:	b083      	sub	sp, #12
 80095d6:	af00      	add	r7, sp, #0
 80095d8:	6078      	str	r0, [r7, #4]
 80095da:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	68db      	ldr	r3, [r3, #12]
 80095e0:	f023 0203 	bic.w	r2, r3, #3
 80095e4:	683b      	ldr	r3, [r7, #0]
 80095e6:	431a      	orrs	r2, r3
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	60da      	str	r2, [r3, #12]
}
 80095ec:	bf00      	nop
 80095ee:	370c      	adds	r7, #12
 80095f0:	46bd      	mov	sp, r7
 80095f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f6:	4770      	bx	lr

080095f8 <LL_ADC_EnableDMAReq>:
  * @rmtoll CFGR     DMAEN          LL_ADC_REG_SetDMATransfer\n
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableDMAReq (ADC_TypeDef *ADCx)
{
 80095f8:	b480      	push	{r7}
 80095fa:	b083      	sub	sp, #12
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CFGR, ADC3_CFGR_DMAEN);
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	68db      	ldr	r3, [r3, #12]
 8009604:	f043 0201 	orr.w	r2, r3, #1
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	60da      	str	r2, [r3, #12]
}
 800960c:	bf00      	nop
 800960e:	370c      	adds	r7, #12
 8009610:	46bd      	mov	sp, r7
 8009612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009616:	4770      	bx	lr

08009618 <LL_ADC_REG_SetDMATransferMode>:
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_UNLIMITED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDMATransferMode(ADC_TypeDef *ADCx, uint32_t DMATransfer)
{
 8009618:	b480      	push	{r7}
 800961a:	b083      	sub	sp, #12
 800961c:	af00      	add	r7, sp, #0
 800961e:	6078      	str	r0, [r7, #4]
 8009620:	6039      	str	r1, [r7, #0]
  if (ADCx == ADC3)
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	4a08      	ldr	r2, [pc, #32]	@ (8009648 <LL_ADC_REG_SetDMATransferMode+0x30>)
 8009626:	4293      	cmp	r3, r2
 8009628:	d107      	bne.n	800963a <LL_ADC_REG_SetDMATransferMode+0x22>
  {
    MODIFY_REG(ADCx->CFGR, ADC3_CFGR_DMAEN | ADC3_CFGR_DMACFG, DMATransfer);
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	68db      	ldr	r3, [r3, #12]
 800962e:	f023 0203 	bic.w	r2, r3, #3
 8009632:	683b      	ldr	r3, [r7, #0]
 8009634:	431a      	orrs	r2, r3
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	60da      	str	r2, [r3, #12]
  }
}
 800963a:	bf00      	nop
 800963c:	370c      	adds	r7, #12
 800963e:	46bd      	mov	sp, r7
 8009640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009644:	4770      	bx	lr
 8009646:	bf00      	nop
 8009648:	58026000 	.word	0x58026000

0800964c <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800964c:	b480      	push	{r7}
 800964e:	b083      	sub	sp, #12
 8009650:	af00      	add	r7, sp, #0
 8009652:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009658:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 800965c:	2b00      	cmp	r3, #0
 800965e:	d101      	bne.n	8009664 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8009660:	2301      	movs	r3, #1
 8009662:	e000      	b.n	8009666 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8009664:	2300      	movs	r3, #0
}
 8009666:	4618      	mov	r0, r3
 8009668:	370c      	adds	r7, #12
 800966a:	46bd      	mov	sp, r7
 800966c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009670:	4770      	bx	lr

08009672 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8009672:	b480      	push	{r7}
 8009674:	b087      	sub	sp, #28
 8009676:	af00      	add	r7, sp, #0
 8009678:	60f8      	str	r0, [r7, #12]
 800967a:	60b9      	str	r1, [r7, #8]
 800967c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	3314      	adds	r3, #20
 8009682:	461a      	mov	r2, r3
 8009684:	68bb      	ldr	r3, [r7, #8]
 8009686:	0e5b      	lsrs	r3, r3, #25
 8009688:	009b      	lsls	r3, r3, #2
 800968a:	f003 0304 	and.w	r3, r3, #4
 800968e:	4413      	add	r3, r2
 8009690:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8009692:	697b      	ldr	r3, [r7, #20]
 8009694:	681a      	ldr	r2, [r3, #0]
 8009696:	68bb      	ldr	r3, [r7, #8]
 8009698:	0d1b      	lsrs	r3, r3, #20
 800969a:	f003 031f 	and.w	r3, r3, #31
 800969e:	2107      	movs	r1, #7
 80096a0:	fa01 f303 	lsl.w	r3, r1, r3
 80096a4:	43db      	mvns	r3, r3
 80096a6:	401a      	ands	r2, r3
 80096a8:	68bb      	ldr	r3, [r7, #8]
 80096aa:	0d1b      	lsrs	r3, r3, #20
 80096ac:	f003 031f 	and.w	r3, r3, #31
 80096b0:	6879      	ldr	r1, [r7, #4]
 80096b2:	fa01 f303 	lsl.w	r3, r1, r3
 80096b6:	431a      	orrs	r2, r3
 80096b8:	697b      	ldr	r3, [r7, #20]
 80096ba:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80096bc:	bf00      	nop
 80096be:	371c      	adds	r7, #28
 80096c0:	46bd      	mov	sp, r7
 80096c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c6:	4770      	bx	lr

080096c8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80096c8:	b480      	push	{r7}
 80096ca:	b085      	sub	sp, #20
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	60f8      	str	r0, [r7, #12]
 80096d0:	60b9      	str	r1, [r7, #8]
 80096d2:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	4a1a      	ldr	r2, [pc, #104]	@ (8009740 <LL_ADC_SetChannelSingleDiff+0x78>)
 80096d8:	4293      	cmp	r3, r2
 80096da:	d115      	bne.n	8009708 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80096e2:	68bb      	ldr	r3, [r7, #8]
 80096e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80096e8:	43db      	mvns	r3, r3
 80096ea:	401a      	ands	r2, r3
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	f003 0318 	and.w	r3, r3, #24
 80096f2:	4914      	ldr	r1, [pc, #80]	@ (8009744 <LL_ADC_SetChannelSingleDiff+0x7c>)
 80096f4:	40d9      	lsrs	r1, r3
 80096f6:	68bb      	ldr	r3, [r7, #8]
 80096f8:	400b      	ands	r3, r1
 80096fa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80096fe:	431a      	orrs	r2, r3
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8009706:	e014      	b.n	8009732 <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 800970e:	68bb      	ldr	r3, [r7, #8]
 8009710:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009714:	43db      	mvns	r3, r3
 8009716:	401a      	ands	r2, r3
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	f003 0318 	and.w	r3, r3, #24
 800971e:	4909      	ldr	r1, [pc, #36]	@ (8009744 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8009720:	40d9      	lsrs	r1, r3
 8009722:	68bb      	ldr	r3, [r7, #8]
 8009724:	400b      	ands	r3, r1
 8009726:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800972a:	431a      	orrs	r2, r3
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
}
 8009732:	bf00      	nop
 8009734:	3714      	adds	r7, #20
 8009736:	46bd      	mov	sp, r7
 8009738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800973c:	4770      	bx	lr
 800973e:	bf00      	nop
 8009740:	58026000 	.word	0x58026000
 8009744:	000fffff 	.word	0x000fffff

08009748 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8009748:	b480      	push	{r7}
 800974a:	b083      	sub	sp, #12
 800974c:	af00      	add	r7, sp, #0
 800974e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	689b      	ldr	r3, [r3, #8]
 8009754:	f003 031f 	and.w	r3, r3, #31
}
 8009758:	4618      	mov	r0, r3
 800975a:	370c      	adds	r7, #12
 800975c:	46bd      	mov	sp, r7
 800975e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009762:	4770      	bx	lr

08009764 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8009764:	b480      	push	{r7}
 8009766:	b083      	sub	sp, #12
 8009768:	af00      	add	r7, sp, #0
 800976a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	689b      	ldr	r3, [r3, #8]
 8009770:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 8009774:	4618      	mov	r0, r3
 8009776:	370c      	adds	r7, #12
 8009778:	46bd      	mov	sp, r7
 800977a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800977e:	4770      	bx	lr

08009780 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8009780:	b480      	push	{r7}
 8009782:	b083      	sub	sp, #12
 8009784:	af00      	add	r7, sp, #0
 8009786:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	689a      	ldr	r2, [r3, #8]
 800978c:	4b04      	ldr	r3, [pc, #16]	@ (80097a0 <LL_ADC_DisableDeepPowerDown+0x20>)
 800978e:	4013      	ands	r3, r2
 8009790:	687a      	ldr	r2, [r7, #4]
 8009792:	6093      	str	r3, [r2, #8]
}
 8009794:	bf00      	nop
 8009796:	370c      	adds	r7, #12
 8009798:	46bd      	mov	sp, r7
 800979a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800979e:	4770      	bx	lr
 80097a0:	5fffffc0 	.word	0x5fffffc0

080097a4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80097a4:	b480      	push	{r7}
 80097a6:	b083      	sub	sp, #12
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	689b      	ldr	r3, [r3, #8]
 80097b0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80097b4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80097b8:	d101      	bne.n	80097be <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80097ba:	2301      	movs	r3, #1
 80097bc:	e000      	b.n	80097c0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80097be:	2300      	movs	r3, #0
}
 80097c0:	4618      	mov	r0, r3
 80097c2:	370c      	adds	r7, #12
 80097c4:	46bd      	mov	sp, r7
 80097c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ca:	4770      	bx	lr

080097cc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80097cc:	b480      	push	{r7}
 80097ce:	b083      	sub	sp, #12
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	689a      	ldr	r2, [r3, #8]
 80097d8:	4b05      	ldr	r3, [pc, #20]	@ (80097f0 <LL_ADC_EnableInternalRegulator+0x24>)
 80097da:	4013      	ands	r3, r2
 80097dc:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80097e4:	bf00      	nop
 80097e6:	370c      	adds	r7, #12
 80097e8:	46bd      	mov	sp, r7
 80097ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ee:	4770      	bx	lr
 80097f0:	6fffffc0 	.word	0x6fffffc0

080097f4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80097f4:	b480      	push	{r7}
 80097f6:	b083      	sub	sp, #12
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	689b      	ldr	r3, [r3, #8]
 8009800:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009804:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009808:	d101      	bne.n	800980e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800980a:	2301      	movs	r3, #1
 800980c:	e000      	b.n	8009810 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800980e:	2300      	movs	r3, #0
}
 8009810:	4618      	mov	r0, r3
 8009812:	370c      	adds	r7, #12
 8009814:	46bd      	mov	sp, r7
 8009816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800981a:	4770      	bx	lr

0800981c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800981c:	b480      	push	{r7}
 800981e:	b083      	sub	sp, #12
 8009820:	af00      	add	r7, sp, #0
 8009822:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	689a      	ldr	r2, [r3, #8]
 8009828:	4b05      	ldr	r3, [pc, #20]	@ (8009840 <LL_ADC_Enable+0x24>)
 800982a:	4013      	ands	r3, r2
 800982c:	f043 0201 	orr.w	r2, r3, #1
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8009834:	bf00      	nop
 8009836:	370c      	adds	r7, #12
 8009838:	46bd      	mov	sp, r7
 800983a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800983e:	4770      	bx	lr
 8009840:	7fffffc0 	.word	0x7fffffc0

08009844 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8009844:	b480      	push	{r7}
 8009846:	b083      	sub	sp, #12
 8009848:	af00      	add	r7, sp, #0
 800984a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	689b      	ldr	r3, [r3, #8]
 8009850:	f003 0301 	and.w	r3, r3, #1
 8009854:	2b01      	cmp	r3, #1
 8009856:	d101      	bne.n	800985c <LL_ADC_IsEnabled+0x18>
 8009858:	2301      	movs	r3, #1
 800985a:	e000      	b.n	800985e <LL_ADC_IsEnabled+0x1a>
 800985c:	2300      	movs	r3, #0
}
 800985e:	4618      	mov	r0, r3
 8009860:	370c      	adds	r7, #12
 8009862:	46bd      	mov	sp, r7
 8009864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009868:	4770      	bx	lr
	...

0800986c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800986c:	b480      	push	{r7}
 800986e:	b083      	sub	sp, #12
 8009870:	af00      	add	r7, sp, #0
 8009872:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	689a      	ldr	r2, [r3, #8]
 8009878:	4b05      	ldr	r3, [pc, #20]	@ (8009890 <LL_ADC_REG_StartConversion+0x24>)
 800987a:	4013      	ands	r3, r2
 800987c:	f043 0204 	orr.w	r2, r3, #4
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8009884:	bf00      	nop
 8009886:	370c      	adds	r7, #12
 8009888:	46bd      	mov	sp, r7
 800988a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800988e:	4770      	bx	lr
 8009890:	7fffffc0 	.word	0x7fffffc0

08009894 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8009894:	b480      	push	{r7}
 8009896:	b083      	sub	sp, #12
 8009898:	af00      	add	r7, sp, #0
 800989a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	689b      	ldr	r3, [r3, #8]
 80098a0:	f003 0304 	and.w	r3, r3, #4
 80098a4:	2b04      	cmp	r3, #4
 80098a6:	d101      	bne.n	80098ac <LL_ADC_REG_IsConversionOngoing+0x18>
 80098a8:	2301      	movs	r3, #1
 80098aa:	e000      	b.n	80098ae <LL_ADC_REG_IsConversionOngoing+0x1a>
 80098ac:	2300      	movs	r3, #0
}
 80098ae:	4618      	mov	r0, r3
 80098b0:	370c      	adds	r7, #12
 80098b2:	46bd      	mov	sp, r7
 80098b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b8:	4770      	bx	lr

080098ba <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80098ba:	b480      	push	{r7}
 80098bc:	b083      	sub	sp, #12
 80098be:	af00      	add	r7, sp, #0
 80098c0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	689b      	ldr	r3, [r3, #8]
 80098c6:	f003 0308 	and.w	r3, r3, #8
 80098ca:	2b08      	cmp	r3, #8
 80098cc:	d101      	bne.n	80098d2 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80098ce:	2301      	movs	r3, #1
 80098d0:	e000      	b.n	80098d4 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80098d2:	2300      	movs	r3, #0
}
 80098d4:	4618      	mov	r0, r3
 80098d6:	370c      	adds	r7, #12
 80098d8:	46bd      	mov	sp, r7
 80098da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098de:	4770      	bx	lr

080098e0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80098e0:	b590      	push	{r4, r7, lr}
 80098e2:	b089      	sub	sp, #36	@ 0x24
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80098e8:	2300      	movs	r3, #0
 80098ea:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80098ec:	2300      	movs	r3, #0
 80098ee:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d101      	bne.n	80098fa <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80098f6:	2301      	movs	r3, #1
 80098f8:	e1ee      	b.n	8009cd8 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	691b      	ldr	r3, [r3, #16]
 80098fe:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009904:	2b00      	cmp	r3, #0
 8009906:	d109      	bne.n	800991c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8009908:	6878      	ldr	r0, [r7, #4]
 800990a:	f7f9 fe6d 	bl	80035e8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	2200      	movs	r2, #0
 8009912:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	2200      	movs	r2, #0
 8009918:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	4618      	mov	r0, r3
 8009922:	f7ff ff3f 	bl	80097a4 <LL_ADC_IsDeepPowerDownEnabled>
 8009926:	4603      	mov	r3, r0
 8009928:	2b00      	cmp	r3, #0
 800992a:	d004      	beq.n	8009936 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	4618      	mov	r0, r3
 8009932:	f7ff ff25 	bl	8009780 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	4618      	mov	r0, r3
 800993c:	f7ff ff5a 	bl	80097f4 <LL_ADC_IsInternalRegulatorEnabled>
 8009940:	4603      	mov	r3, r0
 8009942:	2b00      	cmp	r3, #0
 8009944:	d114      	bne.n	8009970 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	4618      	mov	r0, r3
 800994c:	f7ff ff3e 	bl	80097cc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8009950:	4b8e      	ldr	r3, [pc, #568]	@ (8009b8c <HAL_ADC_Init+0x2ac>)
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	099b      	lsrs	r3, r3, #6
 8009956:	4a8e      	ldr	r2, [pc, #568]	@ (8009b90 <HAL_ADC_Init+0x2b0>)
 8009958:	fba2 2303 	umull	r2, r3, r2, r3
 800995c:	099b      	lsrs	r3, r3, #6
 800995e:	3301      	adds	r3, #1
 8009960:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8009962:	e002      	b.n	800996a <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8009964:	68bb      	ldr	r3, [r7, #8]
 8009966:	3b01      	subs	r3, #1
 8009968:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800996a:	68bb      	ldr	r3, [r7, #8]
 800996c:	2b00      	cmp	r3, #0
 800996e:	d1f9      	bne.n	8009964 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	4618      	mov	r0, r3
 8009976:	f7ff ff3d 	bl	80097f4 <LL_ADC_IsInternalRegulatorEnabled>
 800997a:	4603      	mov	r3, r0
 800997c:	2b00      	cmp	r3, #0
 800997e:	d10d      	bne.n	800999c <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009984:	f043 0210 	orr.w	r2, r3, #16
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009990:	f043 0201 	orr.w	r2, r3, #1
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	665a      	str	r2, [r3, #100]	@ 0x64

    tmp_hal_status = HAL_ERROR;
 8009998:	2301      	movs	r3, #1
 800999a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	4618      	mov	r0, r3
 80099a2:	f7ff ff77 	bl	8009894 <LL_ADC_REG_IsConversionOngoing>
 80099a6:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80099ac:	f003 0310 	and.w	r3, r3, #16
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	f040 8188 	bne.w	8009cc6 <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80099b6:	697b      	ldr	r3, [r7, #20]
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	f040 8184 	bne.w	8009cc6 <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80099c2:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80099c6:	f043 0202 	orr.w	r2, r3, #2
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	4618      	mov	r0, r3
 80099d4:	f7ff ff36 	bl	8009844 <LL_ADC_IsEnabled>
 80099d8:	4603      	mov	r3, r0
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d136      	bne.n	8009a4c <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	4a6c      	ldr	r2, [pc, #432]	@ (8009b94 <HAL_ADC_Init+0x2b4>)
 80099e4:	4293      	cmp	r3, r2
 80099e6:	d004      	beq.n	80099f2 <HAL_ADC_Init+0x112>
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	4a6a      	ldr	r2, [pc, #424]	@ (8009b98 <HAL_ADC_Init+0x2b8>)
 80099ee:	4293      	cmp	r3, r2
 80099f0:	d10e      	bne.n	8009a10 <HAL_ADC_Init+0x130>
 80099f2:	4868      	ldr	r0, [pc, #416]	@ (8009b94 <HAL_ADC_Init+0x2b4>)
 80099f4:	f7ff ff26 	bl	8009844 <LL_ADC_IsEnabled>
 80099f8:	4604      	mov	r4, r0
 80099fa:	4867      	ldr	r0, [pc, #412]	@ (8009b98 <HAL_ADC_Init+0x2b8>)
 80099fc:	f7ff ff22 	bl	8009844 <LL_ADC_IsEnabled>
 8009a00:	4603      	mov	r3, r0
 8009a02:	4323      	orrs	r3, r4
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	bf0c      	ite	eq
 8009a08:	2301      	moveq	r3, #1
 8009a0a:	2300      	movne	r3, #0
 8009a0c:	b2db      	uxtb	r3, r3
 8009a0e:	e008      	b.n	8009a22 <HAL_ADC_Init+0x142>
 8009a10:	4862      	ldr	r0, [pc, #392]	@ (8009b9c <HAL_ADC_Init+0x2bc>)
 8009a12:	f7ff ff17 	bl	8009844 <LL_ADC_IsEnabled>
 8009a16:	4603      	mov	r3, r0
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	bf0c      	ite	eq
 8009a1c:	2301      	moveq	r3, #1
 8009a1e:	2300      	movne	r3, #0
 8009a20:	b2db      	uxtb	r3, r3
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d012      	beq.n	8009a4c <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	4a5a      	ldr	r2, [pc, #360]	@ (8009b94 <HAL_ADC_Init+0x2b4>)
 8009a2c:	4293      	cmp	r3, r2
 8009a2e:	d004      	beq.n	8009a3a <HAL_ADC_Init+0x15a>
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	4a58      	ldr	r2, [pc, #352]	@ (8009b98 <HAL_ADC_Init+0x2b8>)
 8009a36:	4293      	cmp	r3, r2
 8009a38:	d101      	bne.n	8009a3e <HAL_ADC_Init+0x15e>
 8009a3a:	4a59      	ldr	r2, [pc, #356]	@ (8009ba0 <HAL_ADC_Init+0x2c0>)
 8009a3c:	e000      	b.n	8009a40 <HAL_ADC_Init+0x160>
 8009a3e:	4a59      	ldr	r2, [pc, #356]	@ (8009ba4 <HAL_ADC_Init+0x2c4>)
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	685b      	ldr	r3, [r3, #4]
 8009a44:	4619      	mov	r1, r3
 8009a46:	4610      	mov	r0, r2
 8009a48:	f7ff fc24 	bl	8009294 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	4a52      	ldr	r2, [pc, #328]	@ (8009b9c <HAL_ADC_Init+0x2bc>)
 8009a52:	4293      	cmp	r3, r2
 8009a54:	d129      	bne.n	8009aaa <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	7e5b      	ldrb	r3, [r3, #25]
 8009a5a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8009a60:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 8009a66:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	689b      	ldr	r3, [r3, #8]
 8009a6c:	2b08      	cmp	r3, #8
 8009a6e:	d013      	beq.n	8009a98 <HAL_ADC_Init+0x1b8>
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	689b      	ldr	r3, [r3, #8]
 8009a74:	2b0c      	cmp	r3, #12
 8009a76:	d00d      	beq.n	8009a94 <HAL_ADC_Init+0x1b4>
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	689b      	ldr	r3, [r3, #8]
 8009a7c:	2b1c      	cmp	r3, #28
 8009a7e:	d007      	beq.n	8009a90 <HAL_ADC_Init+0x1b0>
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	689b      	ldr	r3, [r3, #8]
 8009a84:	2b18      	cmp	r3, #24
 8009a86:	d101      	bne.n	8009a8c <HAL_ADC_Init+0x1ac>
 8009a88:	2318      	movs	r3, #24
 8009a8a:	e006      	b.n	8009a9a <HAL_ADC_Init+0x1ba>
 8009a8c:	2300      	movs	r3, #0
 8009a8e:	e004      	b.n	8009a9a <HAL_ADC_Init+0x1ba>
 8009a90:	2310      	movs	r3, #16
 8009a92:	e002      	b.n	8009a9a <HAL_ADC_Init+0x1ba>
 8009a94:	2308      	movs	r3, #8
 8009a96:	e000      	b.n	8009a9a <HAL_ADC_Init+0x1ba>
 8009a98:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 8009a9a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009aa2:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8009aa4:	4313      	orrs	r3, r2
 8009aa6:	61bb      	str	r3, [r7, #24]
 8009aa8:	e00e      	b.n	8009ac8 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	7e5b      	ldrb	r3, [r3, #25]
 8009aae:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8009ab4:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8009aba:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009ac2:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8009ac4:	4313      	orrs	r3, r2
 8009ac6:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009ace:	2b01      	cmp	r3, #1
 8009ad0:	d106      	bne.n	8009ae0 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ad6:	3b01      	subs	r3, #1
 8009ad8:	045b      	lsls	r3, r3, #17
 8009ada:	69ba      	ldr	r2, [r7, #24]
 8009adc:	4313      	orrs	r3, r2
 8009ade:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d009      	beq.n	8009afc <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009aec:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009af4:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8009af6:	69ba      	ldr	r2, [r7, #24]
 8009af8:	4313      	orrs	r3, r2
 8009afa:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	4a26      	ldr	r2, [pc, #152]	@ (8009b9c <HAL_ADC_Init+0x2bc>)
 8009b02:	4293      	cmp	r3, r2
 8009b04:	d115      	bne.n	8009b32 <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	68da      	ldr	r2, [r3, #12]
 8009b0c:	4b26      	ldr	r3, [pc, #152]	@ (8009ba8 <HAL_ADC_Init+0x2c8>)
 8009b0e:	4013      	ands	r3, r2
 8009b10:	687a      	ldr	r2, [r7, #4]
 8009b12:	6812      	ldr	r2, [r2, #0]
 8009b14:	69b9      	ldr	r1, [r7, #24]
 8009b16:	430b      	orrs	r3, r1
 8009b18:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	691b      	ldr	r3, [r3, #16]
 8009b20:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	430a      	orrs	r2, r1
 8009b2e:	611a      	str	r2, [r3, #16]
 8009b30:	e009      	b.n	8009b46 <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	68da      	ldr	r2, [r3, #12]
 8009b38:	4b1c      	ldr	r3, [pc, #112]	@ (8009bac <HAL_ADC_Init+0x2cc>)
 8009b3a:	4013      	ands	r3, r2
 8009b3c:	687a      	ldr	r2, [r7, #4]
 8009b3e:	6812      	ldr	r2, [r2, #0]
 8009b40:	69b9      	ldr	r1, [r7, #24]
 8009b42:	430b      	orrs	r3, r1
 8009b44:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	4618      	mov	r0, r3
 8009b4c:	f7ff fea2 	bl	8009894 <LL_ADC_REG_IsConversionOngoing>
 8009b50:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	4618      	mov	r0, r3
 8009b58:	f7ff feaf 	bl	80098ba <LL_ADC_INJ_IsConversionOngoing>
 8009b5c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8009b5e:	693b      	ldr	r3, [r7, #16]
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	f040 808e 	bne.w	8009c82 <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	f040 808a 	bne.w	8009c82 <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	4a0a      	ldr	r2, [pc, #40]	@ (8009b9c <HAL_ADC_Init+0x2bc>)
 8009b74:	4293      	cmp	r3, r2
 8009b76:	d11b      	bne.n	8009bb0 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	7e1b      	ldrb	r3, [r3, #24]
 8009b7c:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8009b84:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 8009b86:	4313      	orrs	r3, r2
 8009b88:	61bb      	str	r3, [r7, #24]
 8009b8a:	e018      	b.n	8009bbe <HAL_ADC_Init+0x2de>
 8009b8c:	24000004 	.word	0x24000004
 8009b90:	053e2d63 	.word	0x053e2d63
 8009b94:	40022000 	.word	0x40022000
 8009b98:	40022100 	.word	0x40022100
 8009b9c:	58026000 	.word	0x58026000
 8009ba0:	40022300 	.word	0x40022300
 8009ba4:	58026300 	.word	0x58026300
 8009ba8:	fff04007 	.word	0xfff04007
 8009bac:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	7e1b      	ldrb	r3, [r3, #24]
 8009bb4:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        tmpCFGR = (
 8009bba:	4313      	orrs	r3, r2
 8009bbc:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	68da      	ldr	r2, [r3, #12]
 8009bc4:	4b46      	ldr	r3, [pc, #280]	@ (8009ce0 <HAL_ADC_Init+0x400>)
 8009bc6:	4013      	ands	r3, r2
 8009bc8:	687a      	ldr	r2, [r7, #4]
 8009bca:	6812      	ldr	r2, [r2, #0]
 8009bcc:	69b9      	ldr	r1, [r7, #24]
 8009bce:	430b      	orrs	r3, r1
 8009bd0:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009bd8:	2b01      	cmp	r3, #1
 8009bda:	d137      	bne.n	8009c4c <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009be0:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	4a3f      	ldr	r2, [pc, #252]	@ (8009ce4 <HAL_ADC_Init+0x404>)
 8009be8:	4293      	cmp	r3, r2
 8009bea:	d116      	bne.n	8009c1a <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	691a      	ldr	r2, [r3, #16]
 8009bf2:	4b3d      	ldr	r3, [pc, #244]	@ (8009ce8 <HAL_ADC_Init+0x408>)
 8009bf4:	4013      	ands	r3, r2
 8009bf6:	687a      	ldr	r2, [r7, #4]
 8009bf8:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 8009bfa:	687a      	ldr	r2, [r7, #4]
 8009bfc:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8009bfe:	4311      	orrs	r1, r2
 8009c00:	687a      	ldr	r2, [r7, #4]
 8009c02:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8009c04:	4311      	orrs	r1, r2
 8009c06:	687a      	ldr	r2, [r7, #4]
 8009c08:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8009c0a:	430a      	orrs	r2, r1
 8009c0c:	431a      	orrs	r2, r3
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	f042 0201 	orr.w	r2, r2, #1
 8009c16:	611a      	str	r2, [r3, #16]
 8009c18:	e020      	b.n	8009c5c <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	691a      	ldr	r2, [r3, #16]
 8009c20:	4b32      	ldr	r3, [pc, #200]	@ (8009cec <HAL_ADC_Init+0x40c>)
 8009c22:	4013      	ands	r3, r2
 8009c24:	687a      	ldr	r2, [r7, #4]
 8009c26:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8009c28:	3a01      	subs	r2, #1
 8009c2a:	0411      	lsls	r1, r2, #16
 8009c2c:	687a      	ldr	r2, [r7, #4]
 8009c2e:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8009c30:	4311      	orrs	r1, r2
 8009c32:	687a      	ldr	r2, [r7, #4]
 8009c34:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8009c36:	4311      	orrs	r1, r2
 8009c38:	687a      	ldr	r2, [r7, #4]
 8009c3a:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8009c3c:	430a      	orrs	r2, r1
 8009c3e:	431a      	orrs	r2, r3
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	f042 0201 	orr.w	r2, r2, #1
 8009c48:	611a      	str	r2, [r3, #16]
 8009c4a:	e007      	b.n	8009c5c <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	691a      	ldr	r2, [r3, #16]
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	f022 0201 	bic.w	r2, r2, #1
 8009c5a:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	691b      	ldr	r3, [r3, #16]
 8009c62:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	430a      	orrs	r2, r1
 8009c70:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	4a1b      	ldr	r2, [pc, #108]	@ (8009ce4 <HAL_ADC_Init+0x404>)
 8009c78:	4293      	cmp	r3, r2
 8009c7a:	d002      	beq.n	8009c82 <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8009c7c:	6878      	ldr	r0, [r7, #4]
 8009c7e:	f001 f967 	bl	800af50 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	691b      	ldr	r3, [r3, #16]
 8009c86:	2b01      	cmp	r3, #1
 8009c88:	d10c      	bne.n	8009ca4 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c90:	f023 010f 	bic.w	r1, r3, #15
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	69db      	ldr	r3, [r3, #28]
 8009c98:	1e5a      	subs	r2, r3, #1
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	430a      	orrs	r2, r1
 8009ca0:	631a      	str	r2, [r3, #48]	@ 0x30
 8009ca2:	e007      	b.n	8009cb4 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	f022 020f 	bic.w	r2, r2, #15
 8009cb2:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009cb8:	f023 0303 	bic.w	r3, r3, #3
 8009cbc:	f043 0201 	orr.w	r2, r3, #1
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	661a      	str	r2, [r3, #96]	@ 0x60
 8009cc4:	e007      	b.n	8009cd6 <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009cca:	f043 0210 	orr.w	r2, r3, #16
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8009cd2:	2301      	movs	r3, #1
 8009cd4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8009cd6:	7ffb      	ldrb	r3, [r7, #31]
}
 8009cd8:	4618      	mov	r0, r3
 8009cda:	3724      	adds	r7, #36	@ 0x24
 8009cdc:	46bd      	mov	sp, r7
 8009cde:	bd90      	pop	{r4, r7, pc}
 8009ce0:	ffffbffc 	.word	0xffffbffc
 8009ce4:	58026000 	.word	0x58026000
 8009ce8:	fc00f81f 	.word	0xfc00f81f
 8009cec:	fc00f81e 	.word	0xfc00f81e

08009cf0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8009cf0:	b580      	push	{r7, lr}
 8009cf2:	b086      	sub	sp, #24
 8009cf4:	af00      	add	r7, sp, #0
 8009cf6:	60f8      	str	r0, [r7, #12]
 8009cf8:	60b9      	str	r1, [r7, #8]
 8009cfa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	4a60      	ldr	r2, [pc, #384]	@ (8009e84 <HAL_ADC_Start_DMA+0x194>)
 8009d02:	4293      	cmp	r3, r2
 8009d04:	d004      	beq.n	8009d10 <HAL_ADC_Start_DMA+0x20>
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	4a5f      	ldr	r2, [pc, #380]	@ (8009e88 <HAL_ADC_Start_DMA+0x198>)
 8009d0c:	4293      	cmp	r3, r2
 8009d0e:	d101      	bne.n	8009d14 <HAL_ADC_Start_DMA+0x24>
 8009d10:	4b5e      	ldr	r3, [pc, #376]	@ (8009e8c <HAL_ADC_Start_DMA+0x19c>)
 8009d12:	e000      	b.n	8009d16 <HAL_ADC_Start_DMA+0x26>
 8009d14:	4b5e      	ldr	r3, [pc, #376]	@ (8009e90 <HAL_ADC_Start_DMA+0x1a0>)
 8009d16:	4618      	mov	r0, r3
 8009d18:	f7ff fd16 	bl	8009748 <LL_ADC_GetMultimode>
 8009d1c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	4618      	mov	r0, r3
 8009d24:	f7ff fdb6 	bl	8009894 <LL_ADC_REG_IsConversionOngoing>
 8009d28:	4603      	mov	r3, r0
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	f040 80a2 	bne.w	8009e74 <HAL_ADC_Start_DMA+0x184>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8009d36:	2b01      	cmp	r3, #1
 8009d38:	d101      	bne.n	8009d3e <HAL_ADC_Start_DMA+0x4e>
 8009d3a:	2302      	movs	r3, #2
 8009d3c:	e09d      	b.n	8009e7a <HAL_ADC_Start_DMA+0x18a>
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	2201      	movs	r2, #1
 8009d42:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8009d46:	693b      	ldr	r3, [r7, #16]
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d006      	beq.n	8009d5a <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8009d4c:	693b      	ldr	r3, [r7, #16]
 8009d4e:	2b05      	cmp	r3, #5
 8009d50:	d003      	beq.n	8009d5a <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8009d52:	693b      	ldr	r3, [r7, #16]
 8009d54:	2b09      	cmp	r3, #9
 8009d56:	f040 8086 	bne.w	8009e66 <HAL_ADC_Start_DMA+0x176>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8009d5a:	68f8      	ldr	r0, [r7, #12]
 8009d5c:	f000 ffda 	bl	800ad14 <ADC_Enable>
 8009d60:	4603      	mov	r3, r0
 8009d62:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8009d64:	7dfb      	ldrb	r3, [r7, #23]
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d178      	bne.n	8009e5c <HAL_ADC_Start_DMA+0x16c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8009d6e:	4b49      	ldr	r3, [pc, #292]	@ (8009e94 <HAL_ADC_Start_DMA+0x1a4>)
 8009d70:	4013      	ands	r3, r2
 8009d72:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	661a      	str	r2, [r3, #96]	@ 0x60
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	4a42      	ldr	r2, [pc, #264]	@ (8009e88 <HAL_ADC_Start_DMA+0x198>)
 8009d80:	4293      	cmp	r3, r2
 8009d82:	d002      	beq.n	8009d8a <HAL_ADC_Start_DMA+0x9a>
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	e000      	b.n	8009d8c <HAL_ADC_Start_DMA+0x9c>
 8009d8a:	4b3e      	ldr	r3, [pc, #248]	@ (8009e84 <HAL_ADC_Start_DMA+0x194>)
 8009d8c:	68fa      	ldr	r2, [r7, #12]
 8009d8e:	6812      	ldr	r2, [r2, #0]
 8009d90:	4293      	cmp	r3, r2
 8009d92:	d002      	beq.n	8009d9a <HAL_ADC_Start_DMA+0xaa>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8009d94:	693b      	ldr	r3, [r7, #16]
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d105      	bne.n	8009da6 <HAL_ADC_Start_DMA+0xb6>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009d9e:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009daa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d006      	beq.n	8009dc0 <HAL_ADC_Start_DMA+0xd0>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009db6:	f023 0206 	bic.w	r2, r3, #6
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	665a      	str	r2, [r3, #100]	@ 0x64
 8009dbe:	e002      	b.n	8009dc6 <HAL_ADC_Start_DMA+0xd6>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	2200      	movs	r2, #0
 8009dc4:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009dca:	4a33      	ldr	r2, [pc, #204]	@ (8009e98 <HAL_ADC_Start_DMA+0x1a8>)
 8009dcc:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009dd2:	4a32      	ldr	r2, [pc, #200]	@ (8009e9c <HAL_ADC_Start_DMA+0x1ac>)
 8009dd4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009dda:	4a31      	ldr	r2, [pc, #196]	@ (8009ea0 <HAL_ADC_Start_DMA+0x1b0>)
 8009ddc:	64da      	str	r2, [r3, #76]	@ 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	221c      	movs	r2, #28
 8009de4:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	2200      	movs	r2, #0
 8009dea:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	685a      	ldr	r2, [r3, #4]
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	f042 0210 	orr.w	r2, r2, #16
 8009dfc:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA  mode*/
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	4a28      	ldr	r2, [pc, #160]	@ (8009ea4 <HAL_ADC_Start_DMA+0x1b4>)
 8009e04:	4293      	cmp	r3, r2
 8009e06:	d10f      	bne.n	8009e28 <HAL_ADC_Start_DMA+0x138>
        {
          LL_ADC_REG_SetDMATransferMode(hadc->Instance, ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	681a      	ldr	r2, [r3, #0]
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8009e12:	005b      	lsls	r3, r3, #1
 8009e14:	4619      	mov	r1, r3
 8009e16:	4610      	mov	r0, r2
 8009e18:	f7ff fbfe 	bl	8009618 <LL_ADC_REG_SetDMATransferMode>
          LL_ADC_EnableDMAReq(hadc->Instance);
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	4618      	mov	r0, r3
 8009e22:	f7ff fbe9 	bl	80095f8 <LL_ADC_EnableDMAReq>
 8009e26:	e007      	b.n	8009e38 <HAL_ADC_Start_DMA+0x148>
        }
        else
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	681a      	ldr	r2, [r3, #0]
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009e30:	4619      	mov	r1, r3
 8009e32:	4610      	mov	r0, r2
 8009e34:	f7ff fbcd 	bl	80095d2 <LL_ADC_REG_SetDataTransferMode>
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	3340      	adds	r3, #64	@ 0x40
 8009e42:	4619      	mov	r1, r3
 8009e44:	68ba      	ldr	r2, [r7, #8]
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	f001 fe82 	bl	800bb50 <HAL_DMA_Start_IT>
 8009e4c:	4603      	mov	r3, r0
 8009e4e:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	4618      	mov	r0, r3
 8009e56:	f7ff fd09 	bl	800986c <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8009e5a:	e00d      	b.n	8009e78 <HAL_ADC_Start_DMA+0x188>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	2200      	movs	r2, #0
 8009e60:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
      if (tmp_hal_status == HAL_OK)
 8009e64:	e008      	b.n	8009e78 <HAL_ADC_Start_DMA+0x188>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8009e66:	2301      	movs	r3, #1
 8009e68:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	2200      	movs	r2, #0
 8009e6e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 8009e72:	e001      	b.n	8009e78 <HAL_ADC_Start_DMA+0x188>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8009e74:	2302      	movs	r3, #2
 8009e76:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8009e78:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e7a:	4618      	mov	r0, r3
 8009e7c:	3718      	adds	r7, #24
 8009e7e:	46bd      	mov	sp, r7
 8009e80:	bd80      	pop	{r7, pc}
 8009e82:	bf00      	nop
 8009e84:	40022000 	.word	0x40022000
 8009e88:	40022100 	.word	0x40022100
 8009e8c:	40022300 	.word	0x40022300
 8009e90:	58026300 	.word	0x58026300
 8009e94:	fffff0fe 	.word	0xfffff0fe
 8009e98:	0800ae29 	.word	0x0800ae29
 8009e9c:	0800af01 	.word	0x0800af01
 8009ea0:	0800af1d 	.word	0x0800af1d
 8009ea4:	58026000 	.word	0x58026000

08009ea8 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8009ea8:	b580      	push	{r7, lr}
 8009eaa:	b08a      	sub	sp, #40	@ 0x28
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8009eb0:	2300      	movs	r3, #0
 8009eb2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	685b      	ldr	r3, [r3, #4]
 8009ec2:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	4a87      	ldr	r2, [pc, #540]	@ (800a0e8 <HAL_ADC_IRQHandler+0x240>)
 8009eca:	4293      	cmp	r3, r2
 8009ecc:	d004      	beq.n	8009ed8 <HAL_ADC_IRQHandler+0x30>
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	4a86      	ldr	r2, [pc, #536]	@ (800a0ec <HAL_ADC_IRQHandler+0x244>)
 8009ed4:	4293      	cmp	r3, r2
 8009ed6:	d101      	bne.n	8009edc <HAL_ADC_IRQHandler+0x34>
 8009ed8:	4b85      	ldr	r3, [pc, #532]	@ (800a0f0 <HAL_ADC_IRQHandler+0x248>)
 8009eda:	e000      	b.n	8009ede <HAL_ADC_IRQHandler+0x36>
 8009edc:	4b85      	ldr	r3, [pc, #532]	@ (800a0f4 <HAL_ADC_IRQHandler+0x24c>)
 8009ede:	4618      	mov	r0, r3
 8009ee0:	f7ff fc32 	bl	8009748 <LL_ADC_GetMultimode>
 8009ee4:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8009ee6:	69fb      	ldr	r3, [r7, #28]
 8009ee8:	f003 0302 	and.w	r3, r3, #2
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d017      	beq.n	8009f20 <HAL_ADC_IRQHandler+0x78>
 8009ef0:	69bb      	ldr	r3, [r7, #24]
 8009ef2:	f003 0302 	and.w	r3, r3, #2
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d012      	beq.n	8009f20 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009efe:	f003 0310 	and.w	r3, r3, #16
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d105      	bne.n	8009f12 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009f0a:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	661a      	str	r2, [r3, #96]	@ 0x60

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8009f12:	6878      	ldr	r0, [r7, #4]
 8009f14:	f001 f932 	bl	800b17c <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	2202      	movs	r2, #2
 8009f1e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8009f20:	69fb      	ldr	r3, [r7, #28]
 8009f22:	f003 0304 	and.w	r3, r3, #4
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d004      	beq.n	8009f34 <HAL_ADC_IRQHandler+0x8c>
 8009f2a:	69bb      	ldr	r3, [r7, #24]
 8009f2c:	f003 0304 	and.w	r3, r3, #4
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d10a      	bne.n	8009f4a <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8009f34:	69fb      	ldr	r3, [r7, #28]
 8009f36:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	f000 8083 	beq.w	800a046 <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8009f40:	69bb      	ldr	r3, [r7, #24]
 8009f42:	f003 0308 	and.w	r3, r3, #8
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d07d      	beq.n	800a046 <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009f4e:	f003 0310 	and.w	r3, r3, #16
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d105      	bne.n	8009f62 <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009f5a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	4618      	mov	r0, r3
 8009f68:	f7ff faf4 	bl	8009554 <LL_ADC_REG_IsTriggerSourceSWStart>
 8009f6c:	4603      	mov	r3, r0
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d062      	beq.n	800a038 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	4a5d      	ldr	r2, [pc, #372]	@ (800a0ec <HAL_ADC_IRQHandler+0x244>)
 8009f78:	4293      	cmp	r3, r2
 8009f7a:	d002      	beq.n	8009f82 <HAL_ADC_IRQHandler+0xda>
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	e000      	b.n	8009f84 <HAL_ADC_IRQHandler+0xdc>
 8009f82:	4b59      	ldr	r3, [pc, #356]	@ (800a0e8 <HAL_ADC_IRQHandler+0x240>)
 8009f84:	687a      	ldr	r2, [r7, #4]
 8009f86:	6812      	ldr	r2, [r2, #0]
 8009f88:	4293      	cmp	r3, r2
 8009f8a:	d008      	beq.n	8009f9e <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8009f8c:	697b      	ldr	r3, [r7, #20]
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d005      	beq.n	8009f9e <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8009f92:	697b      	ldr	r3, [r7, #20]
 8009f94:	2b05      	cmp	r3, #5
 8009f96:	d002      	beq.n	8009f9e <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8009f98:	697b      	ldr	r3, [r7, #20]
 8009f9a:	2b09      	cmp	r3, #9
 8009f9c:	d104      	bne.n	8009fa8 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	68db      	ldr	r3, [r3, #12]
 8009fa4:	623b      	str	r3, [r7, #32]
 8009fa6:	e00c      	b.n	8009fc2 <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	4a4f      	ldr	r2, [pc, #316]	@ (800a0ec <HAL_ADC_IRQHandler+0x244>)
 8009fae:	4293      	cmp	r3, r2
 8009fb0:	d002      	beq.n	8009fb8 <HAL_ADC_IRQHandler+0x110>
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	e000      	b.n	8009fba <HAL_ADC_IRQHandler+0x112>
 8009fb8:	4b4b      	ldr	r3, [pc, #300]	@ (800a0e8 <HAL_ADC_IRQHandler+0x240>)
 8009fba:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8009fbc:	693b      	ldr	r3, [r7, #16]
 8009fbe:	68db      	ldr	r3, [r3, #12]
 8009fc0:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8009fc2:	6a3b      	ldr	r3, [r7, #32]
 8009fc4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d135      	bne.n	800a038 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	f003 0308 	and.w	r3, r3, #8
 8009fd6:	2b08      	cmp	r3, #8
 8009fd8:	d12e      	bne.n	800a038 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	4618      	mov	r0, r3
 8009fe0:	f7ff fc58 	bl	8009894 <LL_ADC_REG_IsConversionOngoing>
 8009fe4:	4603      	mov	r3, r0
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d11a      	bne.n	800a020 <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	685a      	ldr	r2, [r3, #4]
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	f022 020c 	bic.w	r2, r2, #12
 8009ff8:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009ffe:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	661a      	str	r2, [r3, #96]	@ 0x60

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a00a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d112      	bne.n	800a038 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a016:	f043 0201 	orr.w	r2, r3, #1
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	661a      	str	r2, [r3, #96]	@ 0x60
 800a01e:	e00b      	b.n	800a038 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a024:	f043 0210 	orr.w	r2, r3, #16
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a030:	f043 0201 	orr.w	r2, r3, #1
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	665a      	str	r2, [r3, #100]	@ 0x64
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800a038:	6878      	ldr	r0, [r7, #4]
 800a03a:	f000 f96f 	bl	800a31c <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	220c      	movs	r2, #12
 800a044:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800a046:	69fb      	ldr	r3, [r7, #28]
 800a048:	f003 0320 	and.w	r3, r3, #32
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d004      	beq.n	800a05a <HAL_ADC_IRQHandler+0x1b2>
 800a050:	69bb      	ldr	r3, [r7, #24]
 800a052:	f003 0320 	and.w	r3, r3, #32
 800a056:	2b00      	cmp	r3, #0
 800a058:	d10b      	bne.n	800a072 <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800a05a:	69fb      	ldr	r3, [r7, #28]
 800a05c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800a060:	2b00      	cmp	r3, #0
 800a062:	f000 80a0 	beq.w	800a1a6 <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800a066:	69bb      	ldr	r3, [r7, #24]
 800a068:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	f000 809a 	beq.w	800a1a6 <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a076:	f003 0310 	and.w	r3, r3, #16
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d105      	bne.n	800a08a <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a082:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	4618      	mov	r0, r3
 800a090:	f7ff fadc 	bl	800964c <LL_ADC_INJ_IsTriggerSourceSWStart>
 800a094:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	4618      	mov	r0, r3
 800a09c:	f7ff fa5a 	bl	8009554 <LL_ADC_REG_IsTriggerSourceSWStart>
 800a0a0:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	4a11      	ldr	r2, [pc, #68]	@ (800a0ec <HAL_ADC_IRQHandler+0x244>)
 800a0a8:	4293      	cmp	r3, r2
 800a0aa:	d002      	beq.n	800a0b2 <HAL_ADC_IRQHandler+0x20a>
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	e000      	b.n	800a0b4 <HAL_ADC_IRQHandler+0x20c>
 800a0b2:	4b0d      	ldr	r3, [pc, #52]	@ (800a0e8 <HAL_ADC_IRQHandler+0x240>)
 800a0b4:	687a      	ldr	r2, [r7, #4]
 800a0b6:	6812      	ldr	r2, [r2, #0]
 800a0b8:	4293      	cmp	r3, r2
 800a0ba:	d008      	beq.n	800a0ce <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800a0bc:	697b      	ldr	r3, [r7, #20]
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d005      	beq.n	800a0ce <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 800a0c2:	697b      	ldr	r3, [r7, #20]
 800a0c4:	2b06      	cmp	r3, #6
 800a0c6:	d002      	beq.n	800a0ce <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 800a0c8:	697b      	ldr	r3, [r7, #20]
 800a0ca:	2b07      	cmp	r3, #7
 800a0cc:	d104      	bne.n	800a0d8 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	68db      	ldr	r3, [r3, #12]
 800a0d4:	623b      	str	r3, [r7, #32]
 800a0d6:	e014      	b.n	800a102 <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	4a03      	ldr	r2, [pc, #12]	@ (800a0ec <HAL_ADC_IRQHandler+0x244>)
 800a0de:	4293      	cmp	r3, r2
 800a0e0:	d00a      	beq.n	800a0f8 <HAL_ADC_IRQHandler+0x250>
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	e008      	b.n	800a0fa <HAL_ADC_IRQHandler+0x252>
 800a0e8:	40022000 	.word	0x40022000
 800a0ec:	40022100 	.word	0x40022100
 800a0f0:	40022300 	.word	0x40022300
 800a0f4:	58026300 	.word	0x58026300
 800a0f8:	4b84      	ldr	r3, [pc, #528]	@ (800a30c <HAL_ADC_IRQHandler+0x464>)
 800a0fa:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800a0fc:	693b      	ldr	r3, [r7, #16]
 800a0fe:	68db      	ldr	r3, [r3, #12]
 800a100:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	2b00      	cmp	r3, #0
 800a106:	d047      	beq.n	800a198 <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 800a108:	6a3b      	ldr	r3, [r7, #32]
 800a10a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d007      	beq.n	800a122 <HAL_ADC_IRQHandler+0x27a>
 800a112:	68bb      	ldr	r3, [r7, #8]
 800a114:	2b00      	cmp	r3, #0
 800a116:	d03f      	beq.n	800a198 <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 800a118:	6a3b      	ldr	r3, [r7, #32]
 800a11a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d13a      	bne.n	800a198 <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a12c:	2b40      	cmp	r3, #64	@ 0x40
 800a12e:	d133      	bne.n	800a198 <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 800a130:	6a3b      	ldr	r3, [r7, #32]
 800a132:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a136:	2b00      	cmp	r3, #0
 800a138:	d12e      	bne.n	800a198 <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	4618      	mov	r0, r3
 800a140:	f7ff fbbb 	bl	80098ba <LL_ADC_INJ_IsConversionOngoing>
 800a144:	4603      	mov	r3, r0
 800a146:	2b00      	cmp	r3, #0
 800a148:	d11a      	bne.n	800a180 <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	685a      	ldr	r2, [r3, #4]
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800a158:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a15e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	661a      	str	r2, [r3, #96]	@ 0x60

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a16a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d112      	bne.n	800a198 <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a176:	f043 0201 	orr.w	r2, r3, #1
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	661a      	str	r2, [r3, #96]	@ 0x60
 800a17e:	e00b      	b.n	800a198 <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a184:	f043 0210 	orr.w	r2, r3, #16
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	661a      	str	r2, [r3, #96]	@ 0x60

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a190:	f043 0201 	orr.w	r2, r3, #1
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	665a      	str	r2, [r3, #100]	@ 0x64
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800a198:	6878      	ldr	r0, [r7, #4]
 800a19a:	f000 ffc7 	bl	800b12c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	2260      	movs	r2, #96	@ 0x60
 800a1a4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800a1a6:	69fb      	ldr	r3, [r7, #28]
 800a1a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d011      	beq.n	800a1d4 <HAL_ADC_IRQHandler+0x32c>
 800a1b0:	69bb      	ldr	r3, [r7, #24]
 800a1b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d00c      	beq.n	800a1d4 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a1be:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800a1c6:	6878      	ldr	r0, [r7, #4]
 800a1c8:	f000 f8bc 	bl	800a344 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	2280      	movs	r2, #128	@ 0x80
 800a1d2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800a1d4:	69fb      	ldr	r3, [r7, #28]
 800a1d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d012      	beq.n	800a204 <HAL_ADC_IRQHandler+0x35c>
 800a1de:	69bb      	ldr	r3, [r7, #24]
 800a1e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d00d      	beq.n	800a204 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a1ec:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800a1f4:	6878      	ldr	r0, [r7, #4]
 800a1f6:	f000 ffad 	bl	800b154 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a202:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800a204:	69fb      	ldr	r3, [r7, #28]
 800a206:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d012      	beq.n	800a234 <HAL_ADC_IRQHandler+0x38c>
 800a20e:	69bb      	ldr	r3, [r7, #24]
 800a210:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a214:	2b00      	cmp	r3, #0
 800a216:	d00d      	beq.n	800a234 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a21c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800a224:	6878      	ldr	r0, [r7, #4]
 800a226:	f000 ff9f 	bl	800b168 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a232:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800a234:	69fb      	ldr	r3, [r7, #28]
 800a236:	f003 0310 	and.w	r3, r3, #16
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d043      	beq.n	800a2c6 <HAL_ADC_IRQHandler+0x41e>
 800a23e:	69bb      	ldr	r3, [r7, #24]
 800a240:	f003 0310 	and.w	r3, r3, #16
 800a244:	2b00      	cmp	r3, #0
 800a246:	d03e      	beq.n	800a2c6 <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d102      	bne.n	800a256 <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 800a250:	2301      	movs	r3, #1
 800a252:	627b      	str	r3, [r7, #36]	@ 0x24
 800a254:	e021      	b.n	800a29a <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 800a256:	697b      	ldr	r3, [r7, #20]
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d015      	beq.n	800a288 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	4a2a      	ldr	r2, [pc, #168]	@ (800a30c <HAL_ADC_IRQHandler+0x464>)
 800a262:	4293      	cmp	r3, r2
 800a264:	d004      	beq.n	800a270 <HAL_ADC_IRQHandler+0x3c8>
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	4a29      	ldr	r2, [pc, #164]	@ (800a310 <HAL_ADC_IRQHandler+0x468>)
 800a26c:	4293      	cmp	r3, r2
 800a26e:	d101      	bne.n	800a274 <HAL_ADC_IRQHandler+0x3cc>
 800a270:	4b28      	ldr	r3, [pc, #160]	@ (800a314 <HAL_ADC_IRQHandler+0x46c>)
 800a272:	e000      	b.n	800a276 <HAL_ADC_IRQHandler+0x3ce>
 800a274:	4b28      	ldr	r3, [pc, #160]	@ (800a318 <HAL_ADC_IRQHandler+0x470>)
 800a276:	4618      	mov	r0, r3
 800a278:	f7ff fa74 	bl	8009764 <LL_ADC_GetMultiDMATransfer>
 800a27c:	4603      	mov	r3, r0
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d00b      	beq.n	800a29a <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 800a282:	2301      	movs	r3, #1
 800a284:	627b      	str	r3, [r7, #36]	@ 0x24
 800a286:	e008      	b.n	800a29a <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	68db      	ldr	r3, [r3, #12]
 800a28e:	f003 0303 	and.w	r3, r3, #3
 800a292:	2b00      	cmp	r3, #0
 800a294:	d001      	beq.n	800a29a <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 800a296:	2301      	movs	r3, #1
 800a298:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 800a29a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a29c:	2b01      	cmp	r3, #1
 800a29e:	d10e      	bne.n	800a2be <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a2a4:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a2b0:	f043 0202 	orr.w	r2, r3, #2
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	665a      	str	r2, [r3, #100]	@ 0x64
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800a2b8:	6878      	ldr	r0, [r7, #4]
 800a2ba:	f000 f84d 	bl	800a358 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	2210      	movs	r2, #16
 800a2c4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800a2c6:	69fb      	ldr	r3, [r7, #28]
 800a2c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d018      	beq.n	800a302 <HAL_ADC_IRQHandler+0x45a>
 800a2d0:	69bb      	ldr	r3, [r7, #24]
 800a2d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d013      	beq.n	800a302 <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a2de:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a2ea:	f043 0208 	orr.w	r2, r3, #8
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800a2fa:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800a2fc:	6878      	ldr	r0, [r7, #4]
 800a2fe:	f000 ff1f 	bl	800b140 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 800a302:	bf00      	nop
 800a304:	3728      	adds	r7, #40	@ 0x28
 800a306:	46bd      	mov	sp, r7
 800a308:	bd80      	pop	{r7, pc}
 800a30a:	bf00      	nop
 800a30c:	40022000 	.word	0x40022000
 800a310:	40022100 	.word	0x40022100
 800a314:	40022300 	.word	0x40022300
 800a318:	58026300 	.word	0x58026300

0800a31c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800a31c:	b480      	push	{r7}
 800a31e:	b083      	sub	sp, #12
 800a320:	af00      	add	r7, sp, #0
 800a322:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800a324:	bf00      	nop
 800a326:	370c      	adds	r7, #12
 800a328:	46bd      	mov	sp, r7
 800a32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a32e:	4770      	bx	lr

0800a330 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800a330:	b480      	push	{r7}
 800a332:	b083      	sub	sp, #12
 800a334:	af00      	add	r7, sp, #0
 800a336:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800a338:	bf00      	nop
 800a33a:	370c      	adds	r7, #12
 800a33c:	46bd      	mov	sp, r7
 800a33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a342:	4770      	bx	lr

0800a344 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800a344:	b480      	push	{r7}
 800a346:	b083      	sub	sp, #12
 800a348:	af00      	add	r7, sp, #0
 800a34a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800a34c:	bf00      	nop
 800a34e:	370c      	adds	r7, #12
 800a350:	46bd      	mov	sp, r7
 800a352:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a356:	4770      	bx	lr

0800a358 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800a358:	b480      	push	{r7}
 800a35a:	b083      	sub	sp, #12
 800a35c:	af00      	add	r7, sp, #0
 800a35e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800a360:	bf00      	nop
 800a362:	370c      	adds	r7, #12
 800a364:	46bd      	mov	sp, r7
 800a366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a36a:	4770      	bx	lr

0800a36c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800a36c:	b590      	push	{r4, r7, lr}
 800a36e:	b0a5      	sub	sp, #148	@ 0x94
 800a370:	af00      	add	r7, sp, #0
 800a372:	6078      	str	r0, [r7, #4]
 800a374:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800a376:	2300      	movs	r3, #0
 800a378:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 800a37c:	2300      	movs	r3, #0
 800a37e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a386:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800a388:	683b      	ldr	r3, [r7, #0]
 800a38a:	68db      	ldr	r3, [r3, #12]
 800a38c:	4aa4      	ldr	r2, [pc, #656]	@ (800a620 <HAL_ADC_ConfigChannel+0x2b4>)
 800a38e:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800a396:	2b01      	cmp	r3, #1
 800a398:	d102      	bne.n	800a3a0 <HAL_ADC_ConfigChannel+0x34>
 800a39a:	2302      	movs	r3, #2
 800a39c:	f000 bca2 	b.w	800ace4 <HAL_ADC_ConfigChannel+0x978>
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	2201      	movs	r2, #1
 800a3a4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	4618      	mov	r0, r3
 800a3ae:	f7ff fa71 	bl	8009894 <LL_ADC_REG_IsConversionOngoing>
 800a3b2:	4603      	mov	r3, r0
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	f040 8486 	bne.w	800acc6 <HAL_ADC_ConfigChannel+0x95a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 800a3ba:	683b      	ldr	r3, [r7, #0]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	db31      	blt.n	800a426 <HAL_ADC_ConfigChannel+0xba>
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	4a97      	ldr	r2, [pc, #604]	@ (800a624 <HAL_ADC_ConfigChannel+0x2b8>)
 800a3c8:	4293      	cmp	r3, r2
 800a3ca:	d02c      	beq.n	800a426 <HAL_ADC_ConfigChannel+0xba>
      {
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 800a3cc:	683b      	ldr	r3, [r7, #0]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d108      	bne.n	800a3ea <HAL_ADC_ConfigChannel+0x7e>
 800a3d8:	683b      	ldr	r3, [r7, #0]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	0e9b      	lsrs	r3, r3, #26
 800a3de:	f003 031f 	and.w	r3, r3, #31
 800a3e2:	2201      	movs	r2, #1
 800a3e4:	fa02 f303 	lsl.w	r3, r2, r3
 800a3e8:	e016      	b.n	800a418 <HAL_ADC_ConfigChannel+0xac>
 800a3ea:	683b      	ldr	r3, [r7, #0]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a3f0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a3f2:	fa93 f3a3 	rbit	r3, r3
 800a3f6:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 800a3f8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a3fa:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 800a3fc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d101      	bne.n	800a406 <HAL_ADC_ConfigChannel+0x9a>
    return 32U;
 800a402:	2320      	movs	r3, #32
 800a404:	e003      	b.n	800a40e <HAL_ADC_ConfigChannel+0xa2>
  return __builtin_clz(value);
 800a406:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a408:	fab3 f383 	clz	r3, r3
 800a40c:	b2db      	uxtb	r3, r3
 800a40e:	f003 031f 	and.w	r3, r3, #31
 800a412:	2201      	movs	r2, #1
 800a414:	fa02 f303 	lsl.w	r3, r2, r3
 800a418:	687a      	ldr	r2, [r7, #4]
 800a41a:	6812      	ldr	r2, [r2, #0]
 800a41c:	69d1      	ldr	r1, [r2, #28]
 800a41e:	687a      	ldr	r2, [r7, #4]
 800a420:	6812      	ldr	r2, [r2, #0]
 800a422:	430b      	orrs	r3, r1
 800a424:	61d3      	str	r3, [r2, #28]
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	6818      	ldr	r0, [r3, #0]
 800a42a:	683b      	ldr	r3, [r7, #0]
 800a42c:	6859      	ldr	r1, [r3, #4]
 800a42e:	683b      	ldr	r3, [r7, #0]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	461a      	mov	r2, r3
 800a434:	f7ff f8a1 	bl	800957a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	4618      	mov	r0, r3
 800a43e:	f7ff fa29 	bl	8009894 <LL_ADC_REG_IsConversionOngoing>
 800a442:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	4618      	mov	r0, r3
 800a44c:	f7ff fa35 	bl	80098ba <LL_ADC_INJ_IsConversionOngoing>
 800a450:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800a454:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a458:	2b00      	cmp	r3, #0
 800a45a:	f040 824a 	bne.w	800a8f2 <HAL_ADC_ConfigChannel+0x586>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800a45e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800a462:	2b00      	cmp	r3, #0
 800a464:	f040 8245 	bne.w	800a8f2 <HAL_ADC_ConfigChannel+0x586>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	6818      	ldr	r0, [r3, #0]
 800a46c:	683b      	ldr	r3, [r7, #0]
 800a46e:	6819      	ldr	r1, [r3, #0]
 800a470:	683b      	ldr	r3, [r7, #0]
 800a472:	689b      	ldr	r3, [r3, #8]
 800a474:	461a      	mov	r2, r3
 800a476:	f7ff f8fc 	bl	8009672 <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	4a69      	ldr	r2, [pc, #420]	@ (800a624 <HAL_ADC_ConfigChannel+0x2b8>)
 800a480:	4293      	cmp	r3, r2
 800a482:	d10d      	bne.n	800a4a0 <HAL_ADC_ConfigChannel+0x134>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800a484:	683b      	ldr	r3, [r7, #0]
 800a486:	695a      	ldr	r2, [r3, #20]
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	68db      	ldr	r3, [r3, #12]
 800a48e:	08db      	lsrs	r3, r3, #3
 800a490:	f003 0303 	and.w	r3, r3, #3
 800a494:	005b      	lsls	r3, r3, #1
 800a496:	fa02 f303 	lsl.w	r3, r2, r3
 800a49a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800a49e:	e032      	b.n	800a506 <HAL_ADC_ConfigChannel+0x19a>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800a4a0:	4b61      	ldr	r3, [pc, #388]	@ (800a628 <HAL_ADC_ConfigChannel+0x2bc>)
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800a4a8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a4ac:	d10b      	bne.n	800a4c6 <HAL_ADC_ConfigChannel+0x15a>
 800a4ae:	683b      	ldr	r3, [r7, #0]
 800a4b0:	695a      	ldr	r2, [r3, #20]
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	68db      	ldr	r3, [r3, #12]
 800a4b8:	089b      	lsrs	r3, r3, #2
 800a4ba:	f003 0307 	and.w	r3, r3, #7
 800a4be:	005b      	lsls	r3, r3, #1
 800a4c0:	fa02 f303 	lsl.w	r3, r2, r3
 800a4c4:	e01d      	b.n	800a502 <HAL_ADC_ConfigChannel+0x196>
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	68db      	ldr	r3, [r3, #12]
 800a4cc:	f003 0310 	and.w	r3, r3, #16
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d10b      	bne.n	800a4ec <HAL_ADC_ConfigChannel+0x180>
 800a4d4:	683b      	ldr	r3, [r7, #0]
 800a4d6:	695a      	ldr	r2, [r3, #20]
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	68db      	ldr	r3, [r3, #12]
 800a4de:	089b      	lsrs	r3, r3, #2
 800a4e0:	f003 0307 	and.w	r3, r3, #7
 800a4e4:	005b      	lsls	r3, r3, #1
 800a4e6:	fa02 f303 	lsl.w	r3, r2, r3
 800a4ea:	e00a      	b.n	800a502 <HAL_ADC_ConfigChannel+0x196>
 800a4ec:	683b      	ldr	r3, [r7, #0]
 800a4ee:	695a      	ldr	r2, [r3, #20]
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	68db      	ldr	r3, [r3, #12]
 800a4f6:	089b      	lsrs	r3, r3, #2
 800a4f8:	f003 0304 	and.w	r3, r3, #4
 800a4fc:	005b      	lsls	r3, r3, #1
 800a4fe:	fa02 f303 	lsl.w	r3, r2, r3
 800a502:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
      }

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800a506:	683b      	ldr	r3, [r7, #0]
 800a508:	691b      	ldr	r3, [r3, #16]
 800a50a:	2b04      	cmp	r3, #4
 800a50c:	d048      	beq.n	800a5a0 <HAL_ADC_ConfigChannel+0x234>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	6818      	ldr	r0, [r3, #0]
 800a512:	683b      	ldr	r3, [r7, #0]
 800a514:	6919      	ldr	r1, [r3, #16]
 800a516:	683b      	ldr	r3, [r7, #0]
 800a518:	681a      	ldr	r2, [r3, #0]
 800a51a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a51e:	f7fe ff27 	bl	8009370 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	4a3f      	ldr	r2, [pc, #252]	@ (800a624 <HAL_ADC_ConfigChannel+0x2b8>)
 800a528:	4293      	cmp	r3, r2
 800a52a:	d119      	bne.n	800a560 <HAL_ADC_ConfigChannel+0x1f4>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	6818      	ldr	r0, [r3, #0]
 800a530:	683b      	ldr	r3, [r7, #0]
 800a532:	6919      	ldr	r1, [r3, #16]
 800a534:	683b      	ldr	r3, [r7, #0]
 800a536:	69db      	ldr	r3, [r3, #28]
 800a538:	461a      	mov	r2, r3
 800a53a:	f7fe ffbf 	bl	80094bc <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	6818      	ldr	r0, [r3, #0]
 800a542:	683b      	ldr	r3, [r7, #0]
 800a544:	6919      	ldr	r1, [r3, #16]
 800a546:	683b      	ldr	r3, [r7, #0]
 800a548:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a54c:	2b01      	cmp	r3, #1
 800a54e:	d102      	bne.n	800a556 <HAL_ADC_ConfigChannel+0x1ea>
 800a550:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800a554:	e000      	b.n	800a558 <HAL_ADC_ConfigChannel+0x1ec>
 800a556:	2300      	movs	r3, #0
 800a558:	461a      	mov	r2, r3
 800a55a:	f7fe ff8d 	bl	8009478 <LL_ADC_SetOffsetSaturation>
 800a55e:	e1c8      	b.n	800a8f2 <HAL_ADC_ConfigChannel+0x586>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	6818      	ldr	r0, [r3, #0]
 800a564:	683b      	ldr	r3, [r7, #0]
 800a566:	6919      	ldr	r1, [r3, #16]
 800a568:	683b      	ldr	r3, [r7, #0]
 800a56a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800a56e:	2b01      	cmp	r3, #1
 800a570:	d102      	bne.n	800a578 <HAL_ADC_ConfigChannel+0x20c>
 800a572:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a576:	e000      	b.n	800a57a <HAL_ADC_ConfigChannel+0x20e>
 800a578:	2300      	movs	r3, #0
 800a57a:	461a      	mov	r2, r3
 800a57c:	f7fe ff5a 	bl	8009434 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	6818      	ldr	r0, [r3, #0]
 800a584:	683b      	ldr	r3, [r7, #0]
 800a586:	6919      	ldr	r1, [r3, #16]
 800a588:	683b      	ldr	r3, [r7, #0]
 800a58a:	7e1b      	ldrb	r3, [r3, #24]
 800a58c:	2b01      	cmp	r3, #1
 800a58e:	d102      	bne.n	800a596 <HAL_ADC_ConfigChannel+0x22a>
 800a590:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800a594:	e000      	b.n	800a598 <HAL_ADC_ConfigChannel+0x22c>
 800a596:	2300      	movs	r3, #0
 800a598:	461a      	mov	r2, r3
 800a59a:	f7fe ff31 	bl	8009400 <LL_ADC_SetDataRightShift>
 800a59e:	e1a8      	b.n	800a8f2 <HAL_ADC_ConfigChannel+0x586>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	4a1f      	ldr	r2, [pc, #124]	@ (800a624 <HAL_ADC_ConfigChannel+0x2b8>)
 800a5a6:	4293      	cmp	r3, r2
 800a5a8:	f040 815b 	bne.w	800a862 <HAL_ADC_ConfigChannel+0x4f6>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	2100      	movs	r1, #0
 800a5b2:	4618      	mov	r0, r3
 800a5b4:	f7fe ff0e 	bl	80093d4 <LL_ADC_GetOffsetChannel>
 800a5b8:	4603      	mov	r3, r0
 800a5ba:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d10a      	bne.n	800a5d8 <HAL_ADC_ConfigChannel+0x26c>
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	2100      	movs	r1, #0
 800a5c8:	4618      	mov	r0, r3
 800a5ca:	f7fe ff03 	bl	80093d4 <LL_ADC_GetOffsetChannel>
 800a5ce:	4603      	mov	r3, r0
 800a5d0:	0e9b      	lsrs	r3, r3, #26
 800a5d2:	f003 021f 	and.w	r2, r3, #31
 800a5d6:	e017      	b.n	800a608 <HAL_ADC_ConfigChannel+0x29c>
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	2100      	movs	r1, #0
 800a5de:	4618      	mov	r0, r3
 800a5e0:	f7fe fef8 	bl	80093d4 <LL_ADC_GetOffsetChannel>
 800a5e4:	4603      	mov	r3, r0
 800a5e6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a5e8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a5ea:	fa93 f3a3 	rbit	r3, r3
 800a5ee:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 800a5f0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a5f2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 800a5f4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d101      	bne.n	800a5fe <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 800a5fa:	2320      	movs	r3, #32
 800a5fc:	e003      	b.n	800a606 <HAL_ADC_ConfigChannel+0x29a>
  return __builtin_clz(value);
 800a5fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a600:	fab3 f383 	clz	r3, r3
 800a604:	b2db      	uxtb	r3, r3
 800a606:	461a      	mov	r2, r3
 800a608:	683b      	ldr	r3, [r7, #0]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a610:	2b00      	cmp	r3, #0
 800a612:	d10b      	bne.n	800a62c <HAL_ADC_ConfigChannel+0x2c0>
 800a614:	683b      	ldr	r3, [r7, #0]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	0e9b      	lsrs	r3, r3, #26
 800a61a:	f003 031f 	and.w	r3, r3, #31
 800a61e:	e017      	b.n	800a650 <HAL_ADC_ConfigChannel+0x2e4>
 800a620:	47ff0000 	.word	0x47ff0000
 800a624:	58026000 	.word	0x58026000
 800a628:	5c001000 	.word	0x5c001000
 800a62c:	683b      	ldr	r3, [r7, #0]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a632:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a634:	fa93 f3a3 	rbit	r3, r3
 800a638:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 800a63a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a63c:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 800a63e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a640:	2b00      	cmp	r3, #0
 800a642:	d101      	bne.n	800a648 <HAL_ADC_ConfigChannel+0x2dc>
    return 32U;
 800a644:	2320      	movs	r3, #32
 800a646:	e003      	b.n	800a650 <HAL_ADC_ConfigChannel+0x2e4>
  return __builtin_clz(value);
 800a648:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a64a:	fab3 f383 	clz	r3, r3
 800a64e:	b2db      	uxtb	r3, r3
 800a650:	429a      	cmp	r2, r3
 800a652:	d106      	bne.n	800a662 <HAL_ADC_ConfigChannel+0x2f6>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	2200      	movs	r2, #0
 800a65a:	2100      	movs	r1, #0
 800a65c:	4618      	mov	r0, r3
 800a65e:	f7fe ff4f 	bl	8009500 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	2101      	movs	r1, #1
 800a668:	4618      	mov	r0, r3
 800a66a:	f7fe feb3 	bl	80093d4 <LL_ADC_GetOffsetChannel>
 800a66e:	4603      	mov	r3, r0
 800a670:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a674:	2b00      	cmp	r3, #0
 800a676:	d10a      	bne.n	800a68e <HAL_ADC_ConfigChannel+0x322>
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	2101      	movs	r1, #1
 800a67e:	4618      	mov	r0, r3
 800a680:	f7fe fea8 	bl	80093d4 <LL_ADC_GetOffsetChannel>
 800a684:	4603      	mov	r3, r0
 800a686:	0e9b      	lsrs	r3, r3, #26
 800a688:	f003 021f 	and.w	r2, r3, #31
 800a68c:	e017      	b.n	800a6be <HAL_ADC_ConfigChannel+0x352>
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	2101      	movs	r1, #1
 800a694:	4618      	mov	r0, r3
 800a696:	f7fe fe9d 	bl	80093d4 <LL_ADC_GetOffsetChannel>
 800a69a:	4603      	mov	r3, r0
 800a69c:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a69e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a6a0:	fa93 f3a3 	rbit	r3, r3
 800a6a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800a6a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a6a8:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 800a6aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d101      	bne.n	800a6b4 <HAL_ADC_ConfigChannel+0x348>
    return 32U;
 800a6b0:	2320      	movs	r3, #32
 800a6b2:	e003      	b.n	800a6bc <HAL_ADC_ConfigChannel+0x350>
  return __builtin_clz(value);
 800a6b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a6b6:	fab3 f383 	clz	r3, r3
 800a6ba:	b2db      	uxtb	r3, r3
 800a6bc:	461a      	mov	r2, r3
 800a6be:	683b      	ldr	r3, [r7, #0]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d105      	bne.n	800a6d6 <HAL_ADC_ConfigChannel+0x36a>
 800a6ca:	683b      	ldr	r3, [r7, #0]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	0e9b      	lsrs	r3, r3, #26
 800a6d0:	f003 031f 	and.w	r3, r3, #31
 800a6d4:	e011      	b.n	800a6fa <HAL_ADC_ConfigChannel+0x38e>
 800a6d6:	683b      	ldr	r3, [r7, #0]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a6dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a6de:	fa93 f3a3 	rbit	r3, r3
 800a6e2:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 800a6e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a6e6:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 800a6e8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d101      	bne.n	800a6f2 <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 800a6ee:	2320      	movs	r3, #32
 800a6f0:	e003      	b.n	800a6fa <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 800a6f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a6f4:	fab3 f383 	clz	r3, r3
 800a6f8:	b2db      	uxtb	r3, r3
 800a6fa:	429a      	cmp	r2, r3
 800a6fc:	d106      	bne.n	800a70c <HAL_ADC_ConfigChannel+0x3a0>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	2200      	movs	r2, #0
 800a704:	2101      	movs	r1, #1
 800a706:	4618      	mov	r0, r3
 800a708:	f7fe fefa 	bl	8009500 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	2102      	movs	r1, #2
 800a712:	4618      	mov	r0, r3
 800a714:	f7fe fe5e 	bl	80093d4 <LL_ADC_GetOffsetChannel>
 800a718:	4603      	mov	r3, r0
 800a71a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d10a      	bne.n	800a738 <HAL_ADC_ConfigChannel+0x3cc>
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	2102      	movs	r1, #2
 800a728:	4618      	mov	r0, r3
 800a72a:	f7fe fe53 	bl	80093d4 <LL_ADC_GetOffsetChannel>
 800a72e:	4603      	mov	r3, r0
 800a730:	0e9b      	lsrs	r3, r3, #26
 800a732:	f003 021f 	and.w	r2, r3, #31
 800a736:	e017      	b.n	800a768 <HAL_ADC_ConfigChannel+0x3fc>
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	2102      	movs	r1, #2
 800a73e:	4618      	mov	r0, r3
 800a740:	f7fe fe48 	bl	80093d4 <LL_ADC_GetOffsetChannel>
 800a744:	4603      	mov	r3, r0
 800a746:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a748:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a74a:	fa93 f3a3 	rbit	r3, r3
 800a74e:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800a750:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a752:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 800a754:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a756:	2b00      	cmp	r3, #0
 800a758:	d101      	bne.n	800a75e <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 800a75a:	2320      	movs	r3, #32
 800a75c:	e003      	b.n	800a766 <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 800a75e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a760:	fab3 f383 	clz	r3, r3
 800a764:	b2db      	uxtb	r3, r3
 800a766:	461a      	mov	r2, r3
 800a768:	683b      	ldr	r3, [r7, #0]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a770:	2b00      	cmp	r3, #0
 800a772:	d105      	bne.n	800a780 <HAL_ADC_ConfigChannel+0x414>
 800a774:	683b      	ldr	r3, [r7, #0]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	0e9b      	lsrs	r3, r3, #26
 800a77a:	f003 031f 	and.w	r3, r3, #31
 800a77e:	e011      	b.n	800a7a4 <HAL_ADC_ConfigChannel+0x438>
 800a780:	683b      	ldr	r3, [r7, #0]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a786:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a788:	fa93 f3a3 	rbit	r3, r3
 800a78c:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 800a78e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a790:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 800a792:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a794:	2b00      	cmp	r3, #0
 800a796:	d101      	bne.n	800a79c <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 800a798:	2320      	movs	r3, #32
 800a79a:	e003      	b.n	800a7a4 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 800a79c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a79e:	fab3 f383 	clz	r3, r3
 800a7a2:	b2db      	uxtb	r3, r3
 800a7a4:	429a      	cmp	r2, r3
 800a7a6:	d106      	bne.n	800a7b6 <HAL_ADC_ConfigChannel+0x44a>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	2200      	movs	r2, #0
 800a7ae:	2102      	movs	r1, #2
 800a7b0:	4618      	mov	r0, r3
 800a7b2:	f7fe fea5 	bl	8009500 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	2103      	movs	r1, #3
 800a7bc:	4618      	mov	r0, r3
 800a7be:	f7fe fe09 	bl	80093d4 <LL_ADC_GetOffsetChannel>
 800a7c2:	4603      	mov	r3, r0
 800a7c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d10a      	bne.n	800a7e2 <HAL_ADC_ConfigChannel+0x476>
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	2103      	movs	r1, #3
 800a7d2:	4618      	mov	r0, r3
 800a7d4:	f7fe fdfe 	bl	80093d4 <LL_ADC_GetOffsetChannel>
 800a7d8:	4603      	mov	r3, r0
 800a7da:	0e9b      	lsrs	r3, r3, #26
 800a7dc:	f003 021f 	and.w	r2, r3, #31
 800a7e0:	e017      	b.n	800a812 <HAL_ADC_ConfigChannel+0x4a6>
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	2103      	movs	r1, #3
 800a7e8:	4618      	mov	r0, r3
 800a7ea:	f7fe fdf3 	bl	80093d4 <LL_ADC_GetOffsetChannel>
 800a7ee:	4603      	mov	r3, r0
 800a7f0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a7f2:	6a3b      	ldr	r3, [r7, #32]
 800a7f4:	fa93 f3a3 	rbit	r3, r3
 800a7f8:	61fb      	str	r3, [r7, #28]
  return result;
 800a7fa:	69fb      	ldr	r3, [r7, #28]
 800a7fc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800a7fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a800:	2b00      	cmp	r3, #0
 800a802:	d101      	bne.n	800a808 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 800a804:	2320      	movs	r3, #32
 800a806:	e003      	b.n	800a810 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 800a808:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a80a:	fab3 f383 	clz	r3, r3
 800a80e:	b2db      	uxtb	r3, r3
 800a810:	461a      	mov	r2, r3
 800a812:	683b      	ldr	r3, [r7, #0]
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d105      	bne.n	800a82a <HAL_ADC_ConfigChannel+0x4be>
 800a81e:	683b      	ldr	r3, [r7, #0]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	0e9b      	lsrs	r3, r3, #26
 800a824:	f003 031f 	and.w	r3, r3, #31
 800a828:	e011      	b.n	800a84e <HAL_ADC_ConfigChannel+0x4e2>
 800a82a:	683b      	ldr	r3, [r7, #0]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a830:	697b      	ldr	r3, [r7, #20]
 800a832:	fa93 f3a3 	rbit	r3, r3
 800a836:	613b      	str	r3, [r7, #16]
  return result;
 800a838:	693b      	ldr	r3, [r7, #16]
 800a83a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800a83c:	69bb      	ldr	r3, [r7, #24]
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d101      	bne.n	800a846 <HAL_ADC_ConfigChannel+0x4da>
    return 32U;
 800a842:	2320      	movs	r3, #32
 800a844:	e003      	b.n	800a84e <HAL_ADC_ConfigChannel+0x4e2>
  return __builtin_clz(value);
 800a846:	69bb      	ldr	r3, [r7, #24]
 800a848:	fab3 f383 	clz	r3, r3
 800a84c:	b2db      	uxtb	r3, r3
 800a84e:	429a      	cmp	r2, r3
 800a850:	d14f      	bne.n	800a8f2 <HAL_ADC_ConfigChannel+0x586>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	2200      	movs	r2, #0
 800a858:	2103      	movs	r1, #3
 800a85a:	4618      	mov	r0, r3
 800a85c:	f7fe fe50 	bl	8009500 <LL_ADC_SetOffsetState>
 800a860:	e047      	b.n	800a8f2 <HAL_ADC_ConfigChannel+0x586>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a868:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800a86c:	683b      	ldr	r3, [r7, #0]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	069b      	lsls	r3, r3, #26
 800a872:	429a      	cmp	r2, r3
 800a874:	d107      	bne.n	800a886 <HAL_ADC_ConfigChannel+0x51a>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800a884:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a88c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800a890:	683b      	ldr	r3, [r7, #0]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	069b      	lsls	r3, r3, #26
 800a896:	429a      	cmp	r2, r3
 800a898:	d107      	bne.n	800a8aa <HAL_ADC_ConfigChannel+0x53e>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800a8a8:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a8b0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800a8b4:	683b      	ldr	r3, [r7, #0]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	069b      	lsls	r3, r3, #26
 800a8ba:	429a      	cmp	r2, r3
 800a8bc:	d107      	bne.n	800a8ce <HAL_ADC_ConfigChannel+0x562>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800a8cc:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a8d4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800a8d8:	683b      	ldr	r3, [r7, #0]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	069b      	lsls	r3, r3, #26
 800a8de:	429a      	cmp	r2, r3
 800a8e0:	d107      	bne.n	800a8f2 <HAL_ADC_ConfigChannel+0x586>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800a8f0:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	4618      	mov	r0, r3
 800a8f8:	f7fe ffa4 	bl	8009844 <LL_ADC_IsEnabled>
 800a8fc:	4603      	mov	r3, r0
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	f040 81ea 	bne.w	800acd8 <HAL_ADC_ConfigChannel+0x96c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	6818      	ldr	r0, [r3, #0]
 800a908:	683b      	ldr	r3, [r7, #0]
 800a90a:	6819      	ldr	r1, [r3, #0]
 800a90c:	683b      	ldr	r3, [r7, #0]
 800a90e:	68db      	ldr	r3, [r3, #12]
 800a910:	461a      	mov	r2, r3
 800a912:	f7fe fed9 	bl	80096c8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800a916:	683b      	ldr	r3, [r7, #0]
 800a918:	68db      	ldr	r3, [r3, #12]
 800a91a:	4a7a      	ldr	r2, [pc, #488]	@ (800ab04 <HAL_ADC_ConfigChannel+0x798>)
 800a91c:	4293      	cmp	r3, r2
 800a91e:	f040 80e0 	bne.w	800aae2 <HAL_ADC_ConfigChannel+0x776>
      {
        /* Set ADC channel preselection of corresponding negative channel */
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	681a      	ldr	r2, [r3, #0]
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	4977      	ldr	r1, [pc, #476]	@ (800ab08 <HAL_ADC_ConfigChannel+0x79c>)
 800a92c:	428b      	cmp	r3, r1
 800a92e:	d147      	bne.n	800a9c0 <HAL_ADC_ConfigChannel+0x654>
 800a930:	683b      	ldr	r3, [r7, #0]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	4975      	ldr	r1, [pc, #468]	@ (800ab0c <HAL_ADC_ConfigChannel+0x7a0>)
 800a936:	428b      	cmp	r3, r1
 800a938:	d040      	beq.n	800a9bc <HAL_ADC_ConfigChannel+0x650>
 800a93a:	683b      	ldr	r3, [r7, #0]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	4974      	ldr	r1, [pc, #464]	@ (800ab10 <HAL_ADC_ConfigChannel+0x7a4>)
 800a940:	428b      	cmp	r3, r1
 800a942:	d039      	beq.n	800a9b8 <HAL_ADC_ConfigChannel+0x64c>
 800a944:	683b      	ldr	r3, [r7, #0]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	4972      	ldr	r1, [pc, #456]	@ (800ab14 <HAL_ADC_ConfigChannel+0x7a8>)
 800a94a:	428b      	cmp	r3, r1
 800a94c:	d032      	beq.n	800a9b4 <HAL_ADC_ConfigChannel+0x648>
 800a94e:	683b      	ldr	r3, [r7, #0]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	4971      	ldr	r1, [pc, #452]	@ (800ab18 <HAL_ADC_ConfigChannel+0x7ac>)
 800a954:	428b      	cmp	r3, r1
 800a956:	d02b      	beq.n	800a9b0 <HAL_ADC_ConfigChannel+0x644>
 800a958:	683b      	ldr	r3, [r7, #0]
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	496f      	ldr	r1, [pc, #444]	@ (800ab1c <HAL_ADC_ConfigChannel+0x7b0>)
 800a95e:	428b      	cmp	r3, r1
 800a960:	d024      	beq.n	800a9ac <HAL_ADC_ConfigChannel+0x640>
 800a962:	683b      	ldr	r3, [r7, #0]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	496e      	ldr	r1, [pc, #440]	@ (800ab20 <HAL_ADC_ConfigChannel+0x7b4>)
 800a968:	428b      	cmp	r3, r1
 800a96a:	d01d      	beq.n	800a9a8 <HAL_ADC_ConfigChannel+0x63c>
 800a96c:	683b      	ldr	r3, [r7, #0]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	496c      	ldr	r1, [pc, #432]	@ (800ab24 <HAL_ADC_ConfigChannel+0x7b8>)
 800a972:	428b      	cmp	r3, r1
 800a974:	d016      	beq.n	800a9a4 <HAL_ADC_ConfigChannel+0x638>
 800a976:	683b      	ldr	r3, [r7, #0]
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	496b      	ldr	r1, [pc, #428]	@ (800ab28 <HAL_ADC_ConfigChannel+0x7bc>)
 800a97c:	428b      	cmp	r3, r1
 800a97e:	d00f      	beq.n	800a9a0 <HAL_ADC_ConfigChannel+0x634>
 800a980:	683b      	ldr	r3, [r7, #0]
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	4969      	ldr	r1, [pc, #420]	@ (800ab2c <HAL_ADC_ConfigChannel+0x7c0>)
 800a986:	428b      	cmp	r3, r1
 800a988:	d008      	beq.n	800a99c <HAL_ADC_ConfigChannel+0x630>
 800a98a:	683b      	ldr	r3, [r7, #0]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	4968      	ldr	r1, [pc, #416]	@ (800ab30 <HAL_ADC_ConfigChannel+0x7c4>)
 800a990:	428b      	cmp	r3, r1
 800a992:	d101      	bne.n	800a998 <HAL_ADC_ConfigChannel+0x62c>
 800a994:	4b67      	ldr	r3, [pc, #412]	@ (800ab34 <HAL_ADC_ConfigChannel+0x7c8>)
 800a996:	e0a0      	b.n	800aada <HAL_ADC_ConfigChannel+0x76e>
 800a998:	2300      	movs	r3, #0
 800a99a:	e09e      	b.n	800aada <HAL_ADC_ConfigChannel+0x76e>
 800a99c:	4b66      	ldr	r3, [pc, #408]	@ (800ab38 <HAL_ADC_ConfigChannel+0x7cc>)
 800a99e:	e09c      	b.n	800aada <HAL_ADC_ConfigChannel+0x76e>
 800a9a0:	4b66      	ldr	r3, [pc, #408]	@ (800ab3c <HAL_ADC_ConfigChannel+0x7d0>)
 800a9a2:	e09a      	b.n	800aada <HAL_ADC_ConfigChannel+0x76e>
 800a9a4:	4b60      	ldr	r3, [pc, #384]	@ (800ab28 <HAL_ADC_ConfigChannel+0x7bc>)
 800a9a6:	e098      	b.n	800aada <HAL_ADC_ConfigChannel+0x76e>
 800a9a8:	4b5e      	ldr	r3, [pc, #376]	@ (800ab24 <HAL_ADC_ConfigChannel+0x7b8>)
 800a9aa:	e096      	b.n	800aada <HAL_ADC_ConfigChannel+0x76e>
 800a9ac:	4b64      	ldr	r3, [pc, #400]	@ (800ab40 <HAL_ADC_ConfigChannel+0x7d4>)
 800a9ae:	e094      	b.n	800aada <HAL_ADC_ConfigChannel+0x76e>
 800a9b0:	4b64      	ldr	r3, [pc, #400]	@ (800ab44 <HAL_ADC_ConfigChannel+0x7d8>)
 800a9b2:	e092      	b.n	800aada <HAL_ADC_ConfigChannel+0x76e>
 800a9b4:	4b64      	ldr	r3, [pc, #400]	@ (800ab48 <HAL_ADC_ConfigChannel+0x7dc>)
 800a9b6:	e090      	b.n	800aada <HAL_ADC_ConfigChannel+0x76e>
 800a9b8:	4b64      	ldr	r3, [pc, #400]	@ (800ab4c <HAL_ADC_ConfigChannel+0x7e0>)
 800a9ba:	e08e      	b.n	800aada <HAL_ADC_ConfigChannel+0x76e>
 800a9bc:	2301      	movs	r3, #1
 800a9be:	e08c      	b.n	800aada <HAL_ADC_ConfigChannel+0x76e>
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	4962      	ldr	r1, [pc, #392]	@ (800ab50 <HAL_ADC_ConfigChannel+0x7e4>)
 800a9c6:	428b      	cmp	r3, r1
 800a9c8:	d140      	bne.n	800aa4c <HAL_ADC_ConfigChannel+0x6e0>
 800a9ca:	683b      	ldr	r3, [r7, #0]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	494f      	ldr	r1, [pc, #316]	@ (800ab0c <HAL_ADC_ConfigChannel+0x7a0>)
 800a9d0:	428b      	cmp	r3, r1
 800a9d2:	d039      	beq.n	800aa48 <HAL_ADC_ConfigChannel+0x6dc>
 800a9d4:	683b      	ldr	r3, [r7, #0]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	494d      	ldr	r1, [pc, #308]	@ (800ab10 <HAL_ADC_ConfigChannel+0x7a4>)
 800a9da:	428b      	cmp	r3, r1
 800a9dc:	d032      	beq.n	800aa44 <HAL_ADC_ConfigChannel+0x6d8>
 800a9de:	683b      	ldr	r3, [r7, #0]
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	494c      	ldr	r1, [pc, #304]	@ (800ab14 <HAL_ADC_ConfigChannel+0x7a8>)
 800a9e4:	428b      	cmp	r3, r1
 800a9e6:	d02b      	beq.n	800aa40 <HAL_ADC_ConfigChannel+0x6d4>
 800a9e8:	683b      	ldr	r3, [r7, #0]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	494a      	ldr	r1, [pc, #296]	@ (800ab18 <HAL_ADC_ConfigChannel+0x7ac>)
 800a9ee:	428b      	cmp	r3, r1
 800a9f0:	d024      	beq.n	800aa3c <HAL_ADC_ConfigChannel+0x6d0>
 800a9f2:	683b      	ldr	r3, [r7, #0]
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	4949      	ldr	r1, [pc, #292]	@ (800ab1c <HAL_ADC_ConfigChannel+0x7b0>)
 800a9f8:	428b      	cmp	r3, r1
 800a9fa:	d01d      	beq.n	800aa38 <HAL_ADC_ConfigChannel+0x6cc>
 800a9fc:	683b      	ldr	r3, [r7, #0]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	4947      	ldr	r1, [pc, #284]	@ (800ab20 <HAL_ADC_ConfigChannel+0x7b4>)
 800aa02:	428b      	cmp	r3, r1
 800aa04:	d016      	beq.n	800aa34 <HAL_ADC_ConfigChannel+0x6c8>
 800aa06:	683b      	ldr	r3, [r7, #0]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	4946      	ldr	r1, [pc, #280]	@ (800ab24 <HAL_ADC_ConfigChannel+0x7b8>)
 800aa0c:	428b      	cmp	r3, r1
 800aa0e:	d00f      	beq.n	800aa30 <HAL_ADC_ConfigChannel+0x6c4>
 800aa10:	683b      	ldr	r3, [r7, #0]
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	4944      	ldr	r1, [pc, #272]	@ (800ab28 <HAL_ADC_ConfigChannel+0x7bc>)
 800aa16:	428b      	cmp	r3, r1
 800aa18:	d008      	beq.n	800aa2c <HAL_ADC_ConfigChannel+0x6c0>
 800aa1a:	683b      	ldr	r3, [r7, #0]
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	4944      	ldr	r1, [pc, #272]	@ (800ab30 <HAL_ADC_ConfigChannel+0x7c4>)
 800aa20:	428b      	cmp	r3, r1
 800aa22:	d101      	bne.n	800aa28 <HAL_ADC_ConfigChannel+0x6bc>
 800aa24:	4b43      	ldr	r3, [pc, #268]	@ (800ab34 <HAL_ADC_ConfigChannel+0x7c8>)
 800aa26:	e058      	b.n	800aada <HAL_ADC_ConfigChannel+0x76e>
 800aa28:	2300      	movs	r3, #0
 800aa2a:	e056      	b.n	800aada <HAL_ADC_ConfigChannel+0x76e>
 800aa2c:	4b43      	ldr	r3, [pc, #268]	@ (800ab3c <HAL_ADC_ConfigChannel+0x7d0>)
 800aa2e:	e054      	b.n	800aada <HAL_ADC_ConfigChannel+0x76e>
 800aa30:	4b3d      	ldr	r3, [pc, #244]	@ (800ab28 <HAL_ADC_ConfigChannel+0x7bc>)
 800aa32:	e052      	b.n	800aada <HAL_ADC_ConfigChannel+0x76e>
 800aa34:	4b3b      	ldr	r3, [pc, #236]	@ (800ab24 <HAL_ADC_ConfigChannel+0x7b8>)
 800aa36:	e050      	b.n	800aada <HAL_ADC_ConfigChannel+0x76e>
 800aa38:	4b41      	ldr	r3, [pc, #260]	@ (800ab40 <HAL_ADC_ConfigChannel+0x7d4>)
 800aa3a:	e04e      	b.n	800aada <HAL_ADC_ConfigChannel+0x76e>
 800aa3c:	4b41      	ldr	r3, [pc, #260]	@ (800ab44 <HAL_ADC_ConfigChannel+0x7d8>)
 800aa3e:	e04c      	b.n	800aada <HAL_ADC_ConfigChannel+0x76e>
 800aa40:	4b41      	ldr	r3, [pc, #260]	@ (800ab48 <HAL_ADC_ConfigChannel+0x7dc>)
 800aa42:	e04a      	b.n	800aada <HAL_ADC_ConfigChannel+0x76e>
 800aa44:	4b41      	ldr	r3, [pc, #260]	@ (800ab4c <HAL_ADC_ConfigChannel+0x7e0>)
 800aa46:	e048      	b.n	800aada <HAL_ADC_ConfigChannel+0x76e>
 800aa48:	2301      	movs	r3, #1
 800aa4a:	e046      	b.n	800aada <HAL_ADC_ConfigChannel+0x76e>
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	4940      	ldr	r1, [pc, #256]	@ (800ab54 <HAL_ADC_ConfigChannel+0x7e8>)
 800aa52:	428b      	cmp	r3, r1
 800aa54:	d140      	bne.n	800aad8 <HAL_ADC_ConfigChannel+0x76c>
 800aa56:	683b      	ldr	r3, [r7, #0]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	492c      	ldr	r1, [pc, #176]	@ (800ab0c <HAL_ADC_ConfigChannel+0x7a0>)
 800aa5c:	428b      	cmp	r3, r1
 800aa5e:	d039      	beq.n	800aad4 <HAL_ADC_ConfigChannel+0x768>
 800aa60:	683b      	ldr	r3, [r7, #0]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	492a      	ldr	r1, [pc, #168]	@ (800ab10 <HAL_ADC_ConfigChannel+0x7a4>)
 800aa66:	428b      	cmp	r3, r1
 800aa68:	d032      	beq.n	800aad0 <HAL_ADC_ConfigChannel+0x764>
 800aa6a:	683b      	ldr	r3, [r7, #0]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	4929      	ldr	r1, [pc, #164]	@ (800ab14 <HAL_ADC_ConfigChannel+0x7a8>)
 800aa70:	428b      	cmp	r3, r1
 800aa72:	d02b      	beq.n	800aacc <HAL_ADC_ConfigChannel+0x760>
 800aa74:	683b      	ldr	r3, [r7, #0]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	4927      	ldr	r1, [pc, #156]	@ (800ab18 <HAL_ADC_ConfigChannel+0x7ac>)
 800aa7a:	428b      	cmp	r3, r1
 800aa7c:	d024      	beq.n	800aac8 <HAL_ADC_ConfigChannel+0x75c>
 800aa7e:	683b      	ldr	r3, [r7, #0]
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	4926      	ldr	r1, [pc, #152]	@ (800ab1c <HAL_ADC_ConfigChannel+0x7b0>)
 800aa84:	428b      	cmp	r3, r1
 800aa86:	d01d      	beq.n	800aac4 <HAL_ADC_ConfigChannel+0x758>
 800aa88:	683b      	ldr	r3, [r7, #0]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	4924      	ldr	r1, [pc, #144]	@ (800ab20 <HAL_ADC_ConfigChannel+0x7b4>)
 800aa8e:	428b      	cmp	r3, r1
 800aa90:	d016      	beq.n	800aac0 <HAL_ADC_ConfigChannel+0x754>
 800aa92:	683b      	ldr	r3, [r7, #0]
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	4923      	ldr	r1, [pc, #140]	@ (800ab24 <HAL_ADC_ConfigChannel+0x7b8>)
 800aa98:	428b      	cmp	r3, r1
 800aa9a:	d00f      	beq.n	800aabc <HAL_ADC_ConfigChannel+0x750>
 800aa9c:	683b      	ldr	r3, [r7, #0]
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	4926      	ldr	r1, [pc, #152]	@ (800ab3c <HAL_ADC_ConfigChannel+0x7d0>)
 800aaa2:	428b      	cmp	r3, r1
 800aaa4:	d008      	beq.n	800aab8 <HAL_ADC_ConfigChannel+0x74c>
 800aaa6:	683b      	ldr	r3, [r7, #0]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	492b      	ldr	r1, [pc, #172]	@ (800ab58 <HAL_ADC_ConfigChannel+0x7ec>)
 800aaac:	428b      	cmp	r3, r1
 800aaae:	d101      	bne.n	800aab4 <HAL_ADC_ConfigChannel+0x748>
 800aab0:	4b2a      	ldr	r3, [pc, #168]	@ (800ab5c <HAL_ADC_ConfigChannel+0x7f0>)
 800aab2:	e012      	b.n	800aada <HAL_ADC_ConfigChannel+0x76e>
 800aab4:	2300      	movs	r3, #0
 800aab6:	e010      	b.n	800aada <HAL_ADC_ConfigChannel+0x76e>
 800aab8:	4b27      	ldr	r3, [pc, #156]	@ (800ab58 <HAL_ADC_ConfigChannel+0x7ec>)
 800aaba:	e00e      	b.n	800aada <HAL_ADC_ConfigChannel+0x76e>
 800aabc:	4b1a      	ldr	r3, [pc, #104]	@ (800ab28 <HAL_ADC_ConfigChannel+0x7bc>)
 800aabe:	e00c      	b.n	800aada <HAL_ADC_ConfigChannel+0x76e>
 800aac0:	4b18      	ldr	r3, [pc, #96]	@ (800ab24 <HAL_ADC_ConfigChannel+0x7b8>)
 800aac2:	e00a      	b.n	800aada <HAL_ADC_ConfigChannel+0x76e>
 800aac4:	4b1e      	ldr	r3, [pc, #120]	@ (800ab40 <HAL_ADC_ConfigChannel+0x7d4>)
 800aac6:	e008      	b.n	800aada <HAL_ADC_ConfigChannel+0x76e>
 800aac8:	4b1e      	ldr	r3, [pc, #120]	@ (800ab44 <HAL_ADC_ConfigChannel+0x7d8>)
 800aaca:	e006      	b.n	800aada <HAL_ADC_ConfigChannel+0x76e>
 800aacc:	4b1e      	ldr	r3, [pc, #120]	@ (800ab48 <HAL_ADC_ConfigChannel+0x7dc>)
 800aace:	e004      	b.n	800aada <HAL_ADC_ConfigChannel+0x76e>
 800aad0:	4b1e      	ldr	r3, [pc, #120]	@ (800ab4c <HAL_ADC_ConfigChannel+0x7e0>)
 800aad2:	e002      	b.n	800aada <HAL_ADC_ConfigChannel+0x76e>
 800aad4:	2301      	movs	r3, #1
 800aad6:	e000      	b.n	800aada <HAL_ADC_ConfigChannel+0x76e>
 800aad8:	2300      	movs	r3, #0
 800aada:	4619      	mov	r1, r3
 800aadc:	4610      	mov	r0, r2
 800aade:	f7fe fc0d 	bl	80092fc <LL_ADC_SetChannelPreselection>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800aae2:	683b      	ldr	r3, [r7, #0]
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	f280 80f6 	bge.w	800acd8 <HAL_ADC_ConfigChannel+0x96c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	4a05      	ldr	r2, [pc, #20]	@ (800ab08 <HAL_ADC_ConfigChannel+0x79c>)
 800aaf2:	4293      	cmp	r3, r2
 800aaf4:	d004      	beq.n	800ab00 <HAL_ADC_ConfigChannel+0x794>
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	4a15      	ldr	r2, [pc, #84]	@ (800ab50 <HAL_ADC_ConfigChannel+0x7e4>)
 800aafc:	4293      	cmp	r3, r2
 800aafe:	d131      	bne.n	800ab64 <HAL_ADC_ConfigChannel+0x7f8>
 800ab00:	4b17      	ldr	r3, [pc, #92]	@ (800ab60 <HAL_ADC_ConfigChannel+0x7f4>)
 800ab02:	e030      	b.n	800ab66 <HAL_ADC_ConfigChannel+0x7fa>
 800ab04:	47ff0000 	.word	0x47ff0000
 800ab08:	40022000 	.word	0x40022000
 800ab0c:	04300002 	.word	0x04300002
 800ab10:	08600004 	.word	0x08600004
 800ab14:	0c900008 	.word	0x0c900008
 800ab18:	10c00010 	.word	0x10c00010
 800ab1c:	14f00020 	.word	0x14f00020
 800ab20:	2a000400 	.word	0x2a000400
 800ab24:	2e300800 	.word	0x2e300800
 800ab28:	32601000 	.word	0x32601000
 800ab2c:	43210000 	.word	0x43210000
 800ab30:	4b840000 	.word	0x4b840000
 800ab34:	4fb80000 	.word	0x4fb80000
 800ab38:	47520000 	.word	0x47520000
 800ab3c:	36902000 	.word	0x36902000
 800ab40:	25b00200 	.word	0x25b00200
 800ab44:	21800100 	.word	0x21800100
 800ab48:	1d500080 	.word	0x1d500080
 800ab4c:	19200040 	.word	0x19200040
 800ab50:	40022100 	.word	0x40022100
 800ab54:	58026000 	.word	0x58026000
 800ab58:	3ac04000 	.word	0x3ac04000
 800ab5c:	3ef08000 	.word	0x3ef08000
 800ab60:	40022300 	.word	0x40022300
 800ab64:	4b61      	ldr	r3, [pc, #388]	@ (800acec <HAL_ADC_ConfigChannel+0x980>)
 800ab66:	4618      	mov	r0, r3
 800ab68:	f7fe fbba 	bl	80092e0 <LL_ADC_GetCommonPathInternalCh>
 800ab6c:	67f8      	str	r0, [r7, #124]	@ 0x7c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	4a5f      	ldr	r2, [pc, #380]	@ (800acf0 <HAL_ADC_ConfigChannel+0x984>)
 800ab74:	4293      	cmp	r3, r2
 800ab76:	d004      	beq.n	800ab82 <HAL_ADC_ConfigChannel+0x816>
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	4a5d      	ldr	r2, [pc, #372]	@ (800acf4 <HAL_ADC_ConfigChannel+0x988>)
 800ab7e:	4293      	cmp	r3, r2
 800ab80:	d10e      	bne.n	800aba0 <HAL_ADC_ConfigChannel+0x834>
 800ab82:	485b      	ldr	r0, [pc, #364]	@ (800acf0 <HAL_ADC_ConfigChannel+0x984>)
 800ab84:	f7fe fe5e 	bl	8009844 <LL_ADC_IsEnabled>
 800ab88:	4604      	mov	r4, r0
 800ab8a:	485a      	ldr	r0, [pc, #360]	@ (800acf4 <HAL_ADC_ConfigChannel+0x988>)
 800ab8c:	f7fe fe5a 	bl	8009844 <LL_ADC_IsEnabled>
 800ab90:	4603      	mov	r3, r0
 800ab92:	4323      	orrs	r3, r4
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	bf0c      	ite	eq
 800ab98:	2301      	moveq	r3, #1
 800ab9a:	2300      	movne	r3, #0
 800ab9c:	b2db      	uxtb	r3, r3
 800ab9e:	e008      	b.n	800abb2 <HAL_ADC_ConfigChannel+0x846>
 800aba0:	4855      	ldr	r0, [pc, #340]	@ (800acf8 <HAL_ADC_ConfigChannel+0x98c>)
 800aba2:	f7fe fe4f 	bl	8009844 <LL_ADC_IsEnabled>
 800aba6:	4603      	mov	r3, r0
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	bf0c      	ite	eq
 800abac:	2301      	moveq	r3, #1
 800abae:	2300      	movne	r3, #0
 800abb0:	b2db      	uxtb	r3, r3
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d07d      	beq.n	800acb2 <HAL_ADC_ConfigChannel+0x946>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800abb6:	683b      	ldr	r3, [r7, #0]
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	4a50      	ldr	r2, [pc, #320]	@ (800acfc <HAL_ADC_ConfigChannel+0x990>)
 800abbc:	4293      	cmp	r3, r2
 800abbe:	d130      	bne.n	800ac22 <HAL_ADC_ConfigChannel+0x8b6>
 800abc0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800abc2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d12b      	bne.n	800ac22 <HAL_ADC_ConfigChannel+0x8b6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	4a4a      	ldr	r2, [pc, #296]	@ (800acf8 <HAL_ADC_ConfigChannel+0x98c>)
 800abd0:	4293      	cmp	r3, r2
 800abd2:	f040 8081 	bne.w	800acd8 <HAL_ADC_ConfigChannel+0x96c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	4a45      	ldr	r2, [pc, #276]	@ (800acf0 <HAL_ADC_ConfigChannel+0x984>)
 800abdc:	4293      	cmp	r3, r2
 800abde:	d004      	beq.n	800abea <HAL_ADC_ConfigChannel+0x87e>
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	4a43      	ldr	r2, [pc, #268]	@ (800acf4 <HAL_ADC_ConfigChannel+0x988>)
 800abe6:	4293      	cmp	r3, r2
 800abe8:	d101      	bne.n	800abee <HAL_ADC_ConfigChannel+0x882>
 800abea:	4a45      	ldr	r2, [pc, #276]	@ (800ad00 <HAL_ADC_ConfigChannel+0x994>)
 800abec:	e000      	b.n	800abf0 <HAL_ADC_ConfigChannel+0x884>
 800abee:	4a3f      	ldr	r2, [pc, #252]	@ (800acec <HAL_ADC_ConfigChannel+0x980>)
 800abf0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800abf2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800abf6:	4619      	mov	r1, r3
 800abf8:	4610      	mov	r0, r2
 800abfa:	f7fe fb5e 	bl	80092ba <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800abfe:	4b41      	ldr	r3, [pc, #260]	@ (800ad04 <HAL_ADC_ConfigChannel+0x998>)
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	099b      	lsrs	r3, r3, #6
 800ac04:	4a40      	ldr	r2, [pc, #256]	@ (800ad08 <HAL_ADC_ConfigChannel+0x99c>)
 800ac06:	fba2 2303 	umull	r2, r3, r2, r3
 800ac0a:	099b      	lsrs	r3, r3, #6
 800ac0c:	3301      	adds	r3, #1
 800ac0e:	005b      	lsls	r3, r3, #1
 800ac10:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 800ac12:	e002      	b.n	800ac1a <HAL_ADC_ConfigChannel+0x8ae>
              {
                wait_loop_index--;
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	3b01      	subs	r3, #1
 800ac18:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d1f9      	bne.n	800ac14 <HAL_ADC_ConfigChannel+0x8a8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800ac20:	e05a      	b.n	800acd8 <HAL_ADC_ConfigChannel+0x96c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800ac22:	683b      	ldr	r3, [r7, #0]
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	4a39      	ldr	r2, [pc, #228]	@ (800ad0c <HAL_ADC_ConfigChannel+0x9a0>)
 800ac28:	4293      	cmp	r3, r2
 800ac2a:	d11e      	bne.n	800ac6a <HAL_ADC_ConfigChannel+0x8fe>
 800ac2c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800ac2e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d119      	bne.n	800ac6a <HAL_ADC_ConfigChannel+0x8fe>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	4a2f      	ldr	r2, [pc, #188]	@ (800acf8 <HAL_ADC_ConfigChannel+0x98c>)
 800ac3c:	4293      	cmp	r3, r2
 800ac3e:	d14b      	bne.n	800acd8 <HAL_ADC_ConfigChannel+0x96c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	4a2a      	ldr	r2, [pc, #168]	@ (800acf0 <HAL_ADC_ConfigChannel+0x984>)
 800ac46:	4293      	cmp	r3, r2
 800ac48:	d004      	beq.n	800ac54 <HAL_ADC_ConfigChannel+0x8e8>
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	4a29      	ldr	r2, [pc, #164]	@ (800acf4 <HAL_ADC_ConfigChannel+0x988>)
 800ac50:	4293      	cmp	r3, r2
 800ac52:	d101      	bne.n	800ac58 <HAL_ADC_ConfigChannel+0x8ec>
 800ac54:	4a2a      	ldr	r2, [pc, #168]	@ (800ad00 <HAL_ADC_ConfigChannel+0x994>)
 800ac56:	e000      	b.n	800ac5a <HAL_ADC_ConfigChannel+0x8ee>
 800ac58:	4a24      	ldr	r2, [pc, #144]	@ (800acec <HAL_ADC_ConfigChannel+0x980>)
 800ac5a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800ac5c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800ac60:	4619      	mov	r1, r3
 800ac62:	4610      	mov	r0, r2
 800ac64:	f7fe fb29 	bl	80092ba <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800ac68:	e036      	b.n	800acd8 <HAL_ADC_ConfigChannel+0x96c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800ac6a:	683b      	ldr	r3, [r7, #0]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	4a28      	ldr	r2, [pc, #160]	@ (800ad10 <HAL_ADC_ConfigChannel+0x9a4>)
 800ac70:	4293      	cmp	r3, r2
 800ac72:	d131      	bne.n	800acd8 <HAL_ADC_ConfigChannel+0x96c>
 800ac74:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800ac76:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d12c      	bne.n	800acd8 <HAL_ADC_ConfigChannel+0x96c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	4a1d      	ldr	r2, [pc, #116]	@ (800acf8 <HAL_ADC_ConfigChannel+0x98c>)
 800ac84:	4293      	cmp	r3, r2
 800ac86:	d127      	bne.n	800acd8 <HAL_ADC_ConfigChannel+0x96c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	4a18      	ldr	r2, [pc, #96]	@ (800acf0 <HAL_ADC_ConfigChannel+0x984>)
 800ac8e:	4293      	cmp	r3, r2
 800ac90:	d004      	beq.n	800ac9c <HAL_ADC_ConfigChannel+0x930>
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	4a17      	ldr	r2, [pc, #92]	@ (800acf4 <HAL_ADC_ConfigChannel+0x988>)
 800ac98:	4293      	cmp	r3, r2
 800ac9a:	d101      	bne.n	800aca0 <HAL_ADC_ConfigChannel+0x934>
 800ac9c:	4a18      	ldr	r2, [pc, #96]	@ (800ad00 <HAL_ADC_ConfigChannel+0x994>)
 800ac9e:	e000      	b.n	800aca2 <HAL_ADC_ConfigChannel+0x936>
 800aca0:	4a12      	ldr	r2, [pc, #72]	@ (800acec <HAL_ADC_ConfigChannel+0x980>)
 800aca2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800aca4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800aca8:	4619      	mov	r1, r3
 800acaa:	4610      	mov	r0, r2
 800acac:	f7fe fb05 	bl	80092ba <LL_ADC_SetCommonPathInternalCh>
 800acb0:	e012      	b.n	800acd8 <HAL_ADC_ConfigChannel+0x96c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800acb6:	f043 0220 	orr.w	r2, r3, #32
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	661a      	str	r2, [r3, #96]	@ 0x60

          tmp_hal_status = HAL_ERROR;
 800acbe:	2301      	movs	r3, #1
 800acc0:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 800acc4:	e008      	b.n	800acd8 <HAL_ADC_ConfigChannel+0x96c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800acca:	f043 0220 	orr.w	r2, r3, #32
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800acd2:	2301      	movs	r3, #1
 800acd4:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	2200      	movs	r2, #0
 800acdc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 800ace0:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
}
 800ace4:	4618      	mov	r0, r3
 800ace6:	3794      	adds	r7, #148	@ 0x94
 800ace8:	46bd      	mov	sp, r7
 800acea:	bd90      	pop	{r4, r7, pc}
 800acec:	58026300 	.word	0x58026300
 800acf0:	40022000 	.word	0x40022000
 800acf4:	40022100 	.word	0x40022100
 800acf8:	58026000 	.word	0x58026000
 800acfc:	c7520000 	.word	0xc7520000
 800ad00:	40022300 	.word	0x40022300
 800ad04:	24000004 	.word	0x24000004
 800ad08:	053e2d63 	.word	0x053e2d63
 800ad0c:	c3210000 	.word	0xc3210000
 800ad10:	cb840000 	.word	0xcb840000

0800ad14 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800ad14:	b580      	push	{r7, lr}
 800ad16:	b084      	sub	sp, #16
 800ad18:	af00      	add	r7, sp, #0
 800ad1a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	4618      	mov	r0, r3
 800ad22:	f7fe fd8f 	bl	8009844 <LL_ADC_IsEnabled>
 800ad26:	4603      	mov	r3, r0
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d16e      	bne.n	800ae0a <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	689a      	ldr	r2, [r3, #8]
 800ad32:	4b38      	ldr	r3, [pc, #224]	@ (800ae14 <ADC_Enable+0x100>)
 800ad34:	4013      	ands	r3, r2
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d00d      	beq.n	800ad56 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ad3e:	f043 0210 	orr.w	r2, r3, #16
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ad4a:	f043 0201 	orr.w	r2, r3, #1
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	665a      	str	r2, [r3, #100]	@ 0x64

      return HAL_ERROR;
 800ad52:	2301      	movs	r3, #1
 800ad54:	e05a      	b.n	800ae0c <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	4618      	mov	r0, r3
 800ad5c:	f7fe fd5e 	bl	800981c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800ad60:	f7fe fa68 	bl	8009234 <HAL_GetTick>
 800ad64:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	4a2b      	ldr	r2, [pc, #172]	@ (800ae18 <ADC_Enable+0x104>)
 800ad6c:	4293      	cmp	r3, r2
 800ad6e:	d004      	beq.n	800ad7a <ADC_Enable+0x66>
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	4a29      	ldr	r2, [pc, #164]	@ (800ae1c <ADC_Enable+0x108>)
 800ad76:	4293      	cmp	r3, r2
 800ad78:	d101      	bne.n	800ad7e <ADC_Enable+0x6a>
 800ad7a:	4b29      	ldr	r3, [pc, #164]	@ (800ae20 <ADC_Enable+0x10c>)
 800ad7c:	e000      	b.n	800ad80 <ADC_Enable+0x6c>
 800ad7e:	4b29      	ldr	r3, [pc, #164]	@ (800ae24 <ADC_Enable+0x110>)
 800ad80:	4618      	mov	r0, r3
 800ad82:	f7fe fce1 	bl	8009748 <LL_ADC_GetMultimode>
 800ad86:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	4a23      	ldr	r2, [pc, #140]	@ (800ae1c <ADC_Enable+0x108>)
 800ad8e:	4293      	cmp	r3, r2
 800ad90:	d002      	beq.n	800ad98 <ADC_Enable+0x84>
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	e000      	b.n	800ad9a <ADC_Enable+0x86>
 800ad98:	4b1f      	ldr	r3, [pc, #124]	@ (800ae18 <ADC_Enable+0x104>)
 800ad9a:	687a      	ldr	r2, [r7, #4]
 800ad9c:	6812      	ldr	r2, [r2, #0]
 800ad9e:	4293      	cmp	r3, r2
 800ada0:	d02c      	beq.n	800adfc <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800ada2:	68bb      	ldr	r3, [r7, #8]
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d130      	bne.n	800ae0a <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800ada8:	e028      	b.n	800adfc <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	4618      	mov	r0, r3
 800adb0:	f7fe fd48 	bl	8009844 <LL_ADC_IsEnabled>
 800adb4:	4603      	mov	r3, r0
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d104      	bne.n	800adc4 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	4618      	mov	r0, r3
 800adc0:	f7fe fd2c 	bl	800981c <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800adc4:	f7fe fa36 	bl	8009234 <HAL_GetTick>
 800adc8:	4602      	mov	r2, r0
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	1ad3      	subs	r3, r2, r3
 800adce:	2b02      	cmp	r3, #2
 800add0:	d914      	bls.n	800adfc <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	f003 0301 	and.w	r3, r3, #1
 800addc:	2b01      	cmp	r3, #1
 800adde:	d00d      	beq.n	800adfc <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ade4:	f043 0210 	orr.w	r2, r3, #16
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800adf0:	f043 0201 	orr.w	r2, r3, #1
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	665a      	str	r2, [r3, #100]	@ 0x64

            return HAL_ERROR;
 800adf8:	2301      	movs	r3, #1
 800adfa:	e007      	b.n	800ae0c <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	f003 0301 	and.w	r3, r3, #1
 800ae06:	2b01      	cmp	r3, #1
 800ae08:	d1cf      	bne.n	800adaa <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800ae0a:	2300      	movs	r3, #0
}
 800ae0c:	4618      	mov	r0, r3
 800ae0e:	3710      	adds	r7, #16
 800ae10:	46bd      	mov	sp, r7
 800ae12:	bd80      	pop	{r7, pc}
 800ae14:	8000003f 	.word	0x8000003f
 800ae18:	40022000 	.word	0x40022000
 800ae1c:	40022100 	.word	0x40022100
 800ae20:	40022300 	.word	0x40022300
 800ae24:	58026300 	.word	0x58026300

0800ae28 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800ae28:	b580      	push	{r7, lr}
 800ae2a:	b084      	sub	sp, #16
 800ae2c:	af00      	add	r7, sp, #0
 800ae2e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae34:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ae3a:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d14b      	bne.n	800aeda <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ae46:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	f003 0308 	and.w	r3, r3, #8
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d021      	beq.n	800aea0 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	4618      	mov	r0, r3
 800ae62:	f7fe fb77 	bl	8009554 <LL_ADC_REG_IsTriggerSourceSWStart>
 800ae66:	4603      	mov	r3, r0
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d032      	beq.n	800aed2 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	68db      	ldr	r3, [r3, #12]
 800ae72:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d12b      	bne.n	800aed2 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ae7e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	661a      	str	r2, [r3, #96]	@ 0x60
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ae8a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d11f      	bne.n	800aed2 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ae96:	f043 0201 	orr.w	r2, r3, #1
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	661a      	str	r2, [r3, #96]	@ 0x60
 800ae9e:	e018      	b.n	800aed2 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	68db      	ldr	r3, [r3, #12]
 800aea6:	f003 0303 	and.w	r3, r3, #3
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d111      	bne.n	800aed2 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800aeb2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	661a      	str	r2, [r3, #96]	@ 0x60
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800aebe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d105      	bne.n	800aed2 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800aeca:	f043 0201 	orr.w	r2, r3, #1
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800aed2:	68f8      	ldr	r0, [r7, #12]
 800aed4:	f7ff fa22 	bl	800a31c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800aed8:	e00e      	b.n	800aef8 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800aede:	f003 0310 	and.w	r3, r3, #16
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d003      	beq.n	800aeee <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800aee6:	68f8      	ldr	r0, [r7, #12]
 800aee8:	f7ff fa36 	bl	800a358 <HAL_ADC_ErrorCallback>
}
 800aeec:	e004      	b.n	800aef8 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aef2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800aef4:	6878      	ldr	r0, [r7, #4]
 800aef6:	4798      	blx	r3
}
 800aef8:	bf00      	nop
 800aefa:	3710      	adds	r7, #16
 800aefc:	46bd      	mov	sp, r7
 800aefe:	bd80      	pop	{r7, pc}

0800af00 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800af00:	b580      	push	{r7, lr}
 800af02:	b084      	sub	sp, #16
 800af04:	af00      	add	r7, sp, #0
 800af06:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800af0c:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800af0e:	68f8      	ldr	r0, [r7, #12]
 800af10:	f7ff fa0e 	bl	800a330 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800af14:	bf00      	nop
 800af16:	3710      	adds	r7, #16
 800af18:	46bd      	mov	sp, r7
 800af1a:	bd80      	pop	{r7, pc}

0800af1c <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800af1c:	b580      	push	{r7, lr}
 800af1e:	b084      	sub	sp, #16
 800af20:	af00      	add	r7, sp, #0
 800af22:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800af28:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800af2e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800af3a:	f043 0204 	orr.w	r2, r3, #4
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800af42:	68f8      	ldr	r0, [r7, #12]
 800af44:	f7ff fa08 	bl	800a358 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800af48:	bf00      	nop
 800af4a:	3710      	adds	r7, #16
 800af4c:	46bd      	mov	sp, r7
 800af4e:	bd80      	pop	{r7, pc}

0800af50 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 800af50:	b580      	push	{r7, lr}
 800af52:	b084      	sub	sp, #16
 800af54:	af00      	add	r7, sp, #0
 800af56:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	4a6c      	ldr	r2, [pc, #432]	@ (800b110 <ADC_ConfigureBoostMode+0x1c0>)
 800af5e:	4293      	cmp	r3, r2
 800af60:	d004      	beq.n	800af6c <ADC_ConfigureBoostMode+0x1c>
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	4a6b      	ldr	r2, [pc, #428]	@ (800b114 <ADC_ConfigureBoostMode+0x1c4>)
 800af68:	4293      	cmp	r3, r2
 800af6a:	d109      	bne.n	800af80 <ADC_ConfigureBoostMode+0x30>
 800af6c:	4b6a      	ldr	r3, [pc, #424]	@ (800b118 <ADC_ConfigureBoostMode+0x1c8>)
 800af6e:	689b      	ldr	r3, [r3, #8]
 800af70:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800af74:	2b00      	cmp	r3, #0
 800af76:	bf14      	ite	ne
 800af78:	2301      	movne	r3, #1
 800af7a:	2300      	moveq	r3, #0
 800af7c:	b2db      	uxtb	r3, r3
 800af7e:	e008      	b.n	800af92 <ADC_ConfigureBoostMode+0x42>
 800af80:	4b66      	ldr	r3, [pc, #408]	@ (800b11c <ADC_ConfigureBoostMode+0x1cc>)
 800af82:	689b      	ldr	r3, [r3, #8]
 800af84:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800af88:	2b00      	cmp	r3, #0
 800af8a:	bf14      	ite	ne
 800af8c:	2301      	movne	r3, #1
 800af8e:	2300      	moveq	r3, #0
 800af90:	b2db      	uxtb	r3, r3
 800af92:	2b00      	cmp	r3, #0
 800af94:	d01c      	beq.n	800afd0 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800af96:	f006 fe8b 	bl	8011cb0 <HAL_RCC_GetHCLKFreq>
 800af9a:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	685b      	ldr	r3, [r3, #4]
 800afa0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800afa4:	d010      	beq.n	800afc8 <ADC_ConfigureBoostMode+0x78>
 800afa6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800afaa:	d873      	bhi.n	800b094 <ADC_ConfigureBoostMode+0x144>
 800afac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800afb0:	d002      	beq.n	800afb8 <ADC_ConfigureBoostMode+0x68>
 800afb2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800afb6:	d16d      	bne.n	800b094 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	685b      	ldr	r3, [r3, #4]
 800afbc:	0c1b      	lsrs	r3, r3, #16
 800afbe:	68fa      	ldr	r2, [r7, #12]
 800afc0:	fbb2 f3f3 	udiv	r3, r2, r3
 800afc4:	60fb      	str	r3, [r7, #12]
        break;
 800afc6:	e068      	b.n	800b09a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	089b      	lsrs	r3, r3, #2
 800afcc:	60fb      	str	r3, [r7, #12]
        break;
 800afce:	e064      	b.n	800b09a <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 800afd0:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800afd4:	f04f 0100 	mov.w	r1, #0
 800afd8:	f008 f866 	bl	80130a8 <HAL_RCCEx_GetPeriphCLKFreq>
 800afdc:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	685b      	ldr	r3, [r3, #4]
 800afe2:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 800afe6:	d051      	beq.n	800b08c <ADC_ConfigureBoostMode+0x13c>
 800afe8:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 800afec:	d854      	bhi.n	800b098 <ADC_ConfigureBoostMode+0x148>
 800afee:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 800aff2:	d047      	beq.n	800b084 <ADC_ConfigureBoostMode+0x134>
 800aff4:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 800aff8:	d84e      	bhi.n	800b098 <ADC_ConfigureBoostMode+0x148>
 800affa:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 800affe:	d03d      	beq.n	800b07c <ADC_ConfigureBoostMode+0x12c>
 800b000:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 800b004:	d848      	bhi.n	800b098 <ADC_ConfigureBoostMode+0x148>
 800b006:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b00a:	d033      	beq.n	800b074 <ADC_ConfigureBoostMode+0x124>
 800b00c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b010:	d842      	bhi.n	800b098 <ADC_ConfigureBoostMode+0x148>
 800b012:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 800b016:	d029      	beq.n	800b06c <ADC_ConfigureBoostMode+0x11c>
 800b018:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 800b01c:	d83c      	bhi.n	800b098 <ADC_ConfigureBoostMode+0x148>
 800b01e:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800b022:	d01a      	beq.n	800b05a <ADC_ConfigureBoostMode+0x10a>
 800b024:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800b028:	d836      	bhi.n	800b098 <ADC_ConfigureBoostMode+0x148>
 800b02a:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800b02e:	d014      	beq.n	800b05a <ADC_ConfigureBoostMode+0x10a>
 800b030:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800b034:	d830      	bhi.n	800b098 <ADC_ConfigureBoostMode+0x148>
 800b036:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b03a:	d00e      	beq.n	800b05a <ADC_ConfigureBoostMode+0x10a>
 800b03c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b040:	d82a      	bhi.n	800b098 <ADC_ConfigureBoostMode+0x148>
 800b042:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800b046:	d008      	beq.n	800b05a <ADC_ConfigureBoostMode+0x10a>
 800b048:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800b04c:	d824      	bhi.n	800b098 <ADC_ConfigureBoostMode+0x148>
 800b04e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b052:	d002      	beq.n	800b05a <ADC_ConfigureBoostMode+0x10a>
 800b054:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800b058:	d11e      	bne.n	800b098 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	685b      	ldr	r3, [r3, #4]
 800b05e:	0c9b      	lsrs	r3, r3, #18
 800b060:	005b      	lsls	r3, r3, #1
 800b062:	68fa      	ldr	r2, [r7, #12]
 800b064:	fbb2 f3f3 	udiv	r3, r2, r3
 800b068:	60fb      	str	r3, [r7, #12]
        break;
 800b06a:	e016      	b.n	800b09a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	091b      	lsrs	r3, r3, #4
 800b070:	60fb      	str	r3, [r7, #12]
        break;
 800b072:	e012      	b.n	800b09a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	095b      	lsrs	r3, r3, #5
 800b078:	60fb      	str	r3, [r7, #12]
        break;
 800b07a:	e00e      	b.n	800b09a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	099b      	lsrs	r3, r3, #6
 800b080:	60fb      	str	r3, [r7, #12]
        break;
 800b082:	e00a      	b.n	800b09a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	09db      	lsrs	r3, r3, #7
 800b088:	60fb      	str	r3, [r7, #12]
        break;
 800b08a:	e006      	b.n	800b09a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	0a1b      	lsrs	r3, r3, #8
 800b090:	60fb      	str	r3, [r7, #12]
        break;
 800b092:	e002      	b.n	800b09a <ADC_ConfigureBoostMode+0x14a>
        break;
 800b094:	bf00      	nop
 800b096:	e000      	b.n	800b09a <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 800b098:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	085b      	lsrs	r3, r3, #1
 800b09e:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	4a1f      	ldr	r2, [pc, #124]	@ (800b120 <ADC_ConfigureBoostMode+0x1d0>)
 800b0a4:	4293      	cmp	r3, r2
 800b0a6:	d808      	bhi.n	800b0ba <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	689a      	ldr	r2, [r3, #8]
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800b0b6:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 800b0b8:	e025      	b.n	800b106 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	4a19      	ldr	r2, [pc, #100]	@ (800b124 <ADC_ConfigureBoostMode+0x1d4>)
 800b0be:	4293      	cmp	r3, r2
 800b0c0:	d80a      	bhi.n	800b0d8 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	689b      	ldr	r3, [r3, #8]
 800b0c8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b0d4:	609a      	str	r2, [r3, #8]
}
 800b0d6:	e016      	b.n	800b106 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	4a13      	ldr	r2, [pc, #76]	@ (800b128 <ADC_ConfigureBoostMode+0x1d8>)
 800b0dc:	4293      	cmp	r3, r2
 800b0de:	d80a      	bhi.n	800b0f6 <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	689b      	ldr	r3, [r3, #8]
 800b0e6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b0f2:	609a      	str	r2, [r3, #8]
}
 800b0f4:	e007      	b.n	800b106 <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	689a      	ldr	r2, [r3, #8]
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 800b104:	609a      	str	r2, [r3, #8]
}
 800b106:	bf00      	nop
 800b108:	3710      	adds	r7, #16
 800b10a:	46bd      	mov	sp, r7
 800b10c:	bd80      	pop	{r7, pc}
 800b10e:	bf00      	nop
 800b110:	40022000 	.word	0x40022000
 800b114:	40022100 	.word	0x40022100
 800b118:	40022300 	.word	0x40022300
 800b11c:	58026300 	.word	0x58026300
 800b120:	005f5e10 	.word	0x005f5e10
 800b124:	00bebc20 	.word	0x00bebc20
 800b128:	017d7840 	.word	0x017d7840

0800b12c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800b12c:	b480      	push	{r7}
 800b12e:	b083      	sub	sp, #12
 800b130:	af00      	add	r7, sp, #0
 800b132:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 800b134:	bf00      	nop
 800b136:	370c      	adds	r7, #12
 800b138:	46bd      	mov	sp, r7
 800b13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b13e:	4770      	bx	lr

0800b140 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 800b140:	b480      	push	{r7}
 800b142:	b083      	sub	sp, #12
 800b144:	af00      	add	r7, sp, #0
 800b146:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 800b148:	bf00      	nop
 800b14a:	370c      	adds	r7, #12
 800b14c:	46bd      	mov	sp, r7
 800b14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b152:	4770      	bx	lr

0800b154 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 800b154:	b480      	push	{r7}
 800b156:	b083      	sub	sp, #12
 800b158:	af00      	add	r7, sp, #0
 800b15a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 800b15c:	bf00      	nop
 800b15e:	370c      	adds	r7, #12
 800b160:	46bd      	mov	sp, r7
 800b162:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b166:	4770      	bx	lr

0800b168 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 800b168:	b480      	push	{r7}
 800b16a:	b083      	sub	sp, #12
 800b16c:	af00      	add	r7, sp, #0
 800b16e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 800b170:	bf00      	nop
 800b172:	370c      	adds	r7, #12
 800b174:	46bd      	mov	sp, r7
 800b176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b17a:	4770      	bx	lr

0800b17c <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 800b17c:	b480      	push	{r7}
 800b17e:	b083      	sub	sp, #12
 800b180:	af00      	add	r7, sp, #0
 800b182:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 800b184:	bf00      	nop
 800b186:	370c      	adds	r7, #12
 800b188:	46bd      	mov	sp, r7
 800b18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b18e:	4770      	bx	lr

0800b190 <__NVIC_SetPriorityGrouping>:
{
 800b190:	b480      	push	{r7}
 800b192:	b085      	sub	sp, #20
 800b194:	af00      	add	r7, sp, #0
 800b196:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	f003 0307 	and.w	r3, r3, #7
 800b19e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800b1a0:	4b0b      	ldr	r3, [pc, #44]	@ (800b1d0 <__NVIC_SetPriorityGrouping+0x40>)
 800b1a2:	68db      	ldr	r3, [r3, #12]
 800b1a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800b1a6:	68ba      	ldr	r2, [r7, #8]
 800b1a8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800b1ac:	4013      	ands	r3, r2
 800b1ae:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800b1b4:	68bb      	ldr	r3, [r7, #8]
 800b1b6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800b1b8:	4b06      	ldr	r3, [pc, #24]	@ (800b1d4 <__NVIC_SetPriorityGrouping+0x44>)
 800b1ba:	4313      	orrs	r3, r2
 800b1bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800b1be:	4a04      	ldr	r2, [pc, #16]	@ (800b1d0 <__NVIC_SetPriorityGrouping+0x40>)
 800b1c0:	68bb      	ldr	r3, [r7, #8]
 800b1c2:	60d3      	str	r3, [r2, #12]
}
 800b1c4:	bf00      	nop
 800b1c6:	3714      	adds	r7, #20
 800b1c8:	46bd      	mov	sp, r7
 800b1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ce:	4770      	bx	lr
 800b1d0:	e000ed00 	.word	0xe000ed00
 800b1d4:	05fa0000 	.word	0x05fa0000

0800b1d8 <__NVIC_GetPriorityGrouping>:
{
 800b1d8:	b480      	push	{r7}
 800b1da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800b1dc:	4b04      	ldr	r3, [pc, #16]	@ (800b1f0 <__NVIC_GetPriorityGrouping+0x18>)
 800b1de:	68db      	ldr	r3, [r3, #12]
 800b1e0:	0a1b      	lsrs	r3, r3, #8
 800b1e2:	f003 0307 	and.w	r3, r3, #7
}
 800b1e6:	4618      	mov	r0, r3
 800b1e8:	46bd      	mov	sp, r7
 800b1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ee:	4770      	bx	lr
 800b1f0:	e000ed00 	.word	0xe000ed00

0800b1f4 <__NVIC_EnableIRQ>:
{
 800b1f4:	b480      	push	{r7}
 800b1f6:	b083      	sub	sp, #12
 800b1f8:	af00      	add	r7, sp, #0
 800b1fa:	4603      	mov	r3, r0
 800b1fc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800b1fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b202:	2b00      	cmp	r3, #0
 800b204:	db0b      	blt.n	800b21e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800b206:	88fb      	ldrh	r3, [r7, #6]
 800b208:	f003 021f 	and.w	r2, r3, #31
 800b20c:	4907      	ldr	r1, [pc, #28]	@ (800b22c <__NVIC_EnableIRQ+0x38>)
 800b20e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b212:	095b      	lsrs	r3, r3, #5
 800b214:	2001      	movs	r0, #1
 800b216:	fa00 f202 	lsl.w	r2, r0, r2
 800b21a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800b21e:	bf00      	nop
 800b220:	370c      	adds	r7, #12
 800b222:	46bd      	mov	sp, r7
 800b224:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b228:	4770      	bx	lr
 800b22a:	bf00      	nop
 800b22c:	e000e100 	.word	0xe000e100

0800b230 <__NVIC_SetPriority>:
{
 800b230:	b480      	push	{r7}
 800b232:	b083      	sub	sp, #12
 800b234:	af00      	add	r7, sp, #0
 800b236:	4603      	mov	r3, r0
 800b238:	6039      	str	r1, [r7, #0]
 800b23a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800b23c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b240:	2b00      	cmp	r3, #0
 800b242:	db0a      	blt.n	800b25a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b244:	683b      	ldr	r3, [r7, #0]
 800b246:	b2da      	uxtb	r2, r3
 800b248:	490c      	ldr	r1, [pc, #48]	@ (800b27c <__NVIC_SetPriority+0x4c>)
 800b24a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b24e:	0112      	lsls	r2, r2, #4
 800b250:	b2d2      	uxtb	r2, r2
 800b252:	440b      	add	r3, r1
 800b254:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800b258:	e00a      	b.n	800b270 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b25a:	683b      	ldr	r3, [r7, #0]
 800b25c:	b2da      	uxtb	r2, r3
 800b25e:	4908      	ldr	r1, [pc, #32]	@ (800b280 <__NVIC_SetPriority+0x50>)
 800b260:	88fb      	ldrh	r3, [r7, #6]
 800b262:	f003 030f 	and.w	r3, r3, #15
 800b266:	3b04      	subs	r3, #4
 800b268:	0112      	lsls	r2, r2, #4
 800b26a:	b2d2      	uxtb	r2, r2
 800b26c:	440b      	add	r3, r1
 800b26e:	761a      	strb	r2, [r3, #24]
}
 800b270:	bf00      	nop
 800b272:	370c      	adds	r7, #12
 800b274:	46bd      	mov	sp, r7
 800b276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b27a:	4770      	bx	lr
 800b27c:	e000e100 	.word	0xe000e100
 800b280:	e000ed00 	.word	0xe000ed00

0800b284 <NVIC_EncodePriority>:
{
 800b284:	b480      	push	{r7}
 800b286:	b089      	sub	sp, #36	@ 0x24
 800b288:	af00      	add	r7, sp, #0
 800b28a:	60f8      	str	r0, [r7, #12]
 800b28c:	60b9      	str	r1, [r7, #8]
 800b28e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	f003 0307 	and.w	r3, r3, #7
 800b296:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800b298:	69fb      	ldr	r3, [r7, #28]
 800b29a:	f1c3 0307 	rsb	r3, r3, #7
 800b29e:	2b04      	cmp	r3, #4
 800b2a0:	bf28      	it	cs
 800b2a2:	2304      	movcs	r3, #4
 800b2a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800b2a6:	69fb      	ldr	r3, [r7, #28]
 800b2a8:	3304      	adds	r3, #4
 800b2aa:	2b06      	cmp	r3, #6
 800b2ac:	d902      	bls.n	800b2b4 <NVIC_EncodePriority+0x30>
 800b2ae:	69fb      	ldr	r3, [r7, #28]
 800b2b0:	3b03      	subs	r3, #3
 800b2b2:	e000      	b.n	800b2b6 <NVIC_EncodePriority+0x32>
 800b2b4:	2300      	movs	r3, #0
 800b2b6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b2b8:	f04f 32ff 	mov.w	r2, #4294967295
 800b2bc:	69bb      	ldr	r3, [r7, #24]
 800b2be:	fa02 f303 	lsl.w	r3, r2, r3
 800b2c2:	43da      	mvns	r2, r3
 800b2c4:	68bb      	ldr	r3, [r7, #8]
 800b2c6:	401a      	ands	r2, r3
 800b2c8:	697b      	ldr	r3, [r7, #20]
 800b2ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800b2cc:	f04f 31ff 	mov.w	r1, #4294967295
 800b2d0:	697b      	ldr	r3, [r7, #20]
 800b2d2:	fa01 f303 	lsl.w	r3, r1, r3
 800b2d6:	43d9      	mvns	r1, r3
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b2dc:	4313      	orrs	r3, r2
}
 800b2de:	4618      	mov	r0, r3
 800b2e0:	3724      	adds	r7, #36	@ 0x24
 800b2e2:	46bd      	mov	sp, r7
 800b2e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2e8:	4770      	bx	lr
	...

0800b2ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800b2ec:	b580      	push	{r7, lr}
 800b2ee:	b082      	sub	sp, #8
 800b2f0:	af00      	add	r7, sp, #0
 800b2f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	3b01      	subs	r3, #1
 800b2f8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b2fc:	d301      	bcc.n	800b302 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800b2fe:	2301      	movs	r3, #1
 800b300:	e00f      	b.n	800b322 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800b302:	4a0a      	ldr	r2, [pc, #40]	@ (800b32c <SysTick_Config+0x40>)
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	3b01      	subs	r3, #1
 800b308:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800b30a:	210f      	movs	r1, #15
 800b30c:	f04f 30ff 	mov.w	r0, #4294967295
 800b310:	f7ff ff8e 	bl	800b230 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800b314:	4b05      	ldr	r3, [pc, #20]	@ (800b32c <SysTick_Config+0x40>)
 800b316:	2200      	movs	r2, #0
 800b318:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800b31a:	4b04      	ldr	r3, [pc, #16]	@ (800b32c <SysTick_Config+0x40>)
 800b31c:	2207      	movs	r2, #7
 800b31e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800b320:	2300      	movs	r3, #0
}
 800b322:	4618      	mov	r0, r3
 800b324:	3708      	adds	r7, #8
 800b326:	46bd      	mov	sp, r7
 800b328:	bd80      	pop	{r7, pc}
 800b32a:	bf00      	nop
 800b32c:	e000e010 	.word	0xe000e010

0800b330 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800b330:	b580      	push	{r7, lr}
 800b332:	b082      	sub	sp, #8
 800b334:	af00      	add	r7, sp, #0
 800b336:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800b338:	6878      	ldr	r0, [r7, #4]
 800b33a:	f7ff ff29 	bl	800b190 <__NVIC_SetPriorityGrouping>
}
 800b33e:	bf00      	nop
 800b340:	3708      	adds	r7, #8
 800b342:	46bd      	mov	sp, r7
 800b344:	bd80      	pop	{r7, pc}

0800b346 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800b346:	b580      	push	{r7, lr}
 800b348:	b086      	sub	sp, #24
 800b34a:	af00      	add	r7, sp, #0
 800b34c:	4603      	mov	r3, r0
 800b34e:	60b9      	str	r1, [r7, #8]
 800b350:	607a      	str	r2, [r7, #4]
 800b352:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800b354:	f7ff ff40 	bl	800b1d8 <__NVIC_GetPriorityGrouping>
 800b358:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800b35a:	687a      	ldr	r2, [r7, #4]
 800b35c:	68b9      	ldr	r1, [r7, #8]
 800b35e:	6978      	ldr	r0, [r7, #20]
 800b360:	f7ff ff90 	bl	800b284 <NVIC_EncodePriority>
 800b364:	4602      	mov	r2, r0
 800b366:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800b36a:	4611      	mov	r1, r2
 800b36c:	4618      	mov	r0, r3
 800b36e:	f7ff ff5f 	bl	800b230 <__NVIC_SetPriority>
}
 800b372:	bf00      	nop
 800b374:	3718      	adds	r7, #24
 800b376:	46bd      	mov	sp, r7
 800b378:	bd80      	pop	{r7, pc}

0800b37a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b37a:	b580      	push	{r7, lr}
 800b37c:	b082      	sub	sp, #8
 800b37e:	af00      	add	r7, sp, #0
 800b380:	4603      	mov	r3, r0
 800b382:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800b384:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b388:	4618      	mov	r0, r3
 800b38a:	f7ff ff33 	bl	800b1f4 <__NVIC_EnableIRQ>
}
 800b38e:	bf00      	nop
 800b390:	3708      	adds	r7, #8
 800b392:	46bd      	mov	sp, r7
 800b394:	bd80      	pop	{r7, pc}

0800b396 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800b396:	b580      	push	{r7, lr}
 800b398:	b082      	sub	sp, #8
 800b39a:	af00      	add	r7, sp, #0
 800b39c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800b39e:	6878      	ldr	r0, [r7, #4]
 800b3a0:	f7ff ffa4 	bl	800b2ec <SysTick_Config>
 800b3a4:	4603      	mov	r3, r0
}
 800b3a6:	4618      	mov	r0, r3
 800b3a8:	3708      	adds	r7, #8
 800b3aa:	46bd      	mov	sp, r7
 800b3ac:	bd80      	pop	{r7, pc}
	...

0800b3b0 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 800b3b0:	b480      	push	{r7}
 800b3b2:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 800b3b4:	f3bf 8f5f 	dmb	sy
}
 800b3b8:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800b3ba:	4b07      	ldr	r3, [pc, #28]	@ (800b3d8 <HAL_MPU_Disable+0x28>)
 800b3bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b3be:	4a06      	ldr	r2, [pc, #24]	@ (800b3d8 <HAL_MPU_Disable+0x28>)
 800b3c0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b3c4:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800b3c6:	4b05      	ldr	r3, [pc, #20]	@ (800b3dc <HAL_MPU_Disable+0x2c>)
 800b3c8:	2200      	movs	r2, #0
 800b3ca:	605a      	str	r2, [r3, #4]
}
 800b3cc:	bf00      	nop
 800b3ce:	46bd      	mov	sp, r7
 800b3d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d4:	4770      	bx	lr
 800b3d6:	bf00      	nop
 800b3d8:	e000ed00 	.word	0xe000ed00
 800b3dc:	e000ed90 	.word	0xe000ed90

0800b3e0 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 800b3e0:	b480      	push	{r7}
 800b3e2:	b083      	sub	sp, #12
 800b3e4:	af00      	add	r7, sp, #0
 800b3e6:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800b3e8:	4a0b      	ldr	r2, [pc, #44]	@ (800b418 <HAL_MPU_Enable+0x38>)
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	f043 0301 	orr.w	r3, r3, #1
 800b3f0:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800b3f2:	4b0a      	ldr	r3, [pc, #40]	@ (800b41c <HAL_MPU_Enable+0x3c>)
 800b3f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b3f6:	4a09      	ldr	r2, [pc, #36]	@ (800b41c <HAL_MPU_Enable+0x3c>)
 800b3f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b3fc:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800b3fe:	f3bf 8f4f 	dsb	sy
}
 800b402:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800b404:	f3bf 8f6f 	isb	sy
}
 800b408:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800b40a:	bf00      	nop
 800b40c:	370c      	adds	r7, #12
 800b40e:	46bd      	mov	sp, r7
 800b410:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b414:	4770      	bx	lr
 800b416:	bf00      	nop
 800b418:	e000ed90 	.word	0xe000ed90
 800b41c:	e000ed00 	.word	0xe000ed00

0800b420 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 800b420:	b480      	push	{r7}
 800b422:	b083      	sub	sp, #12
 800b424:	af00      	add	r7, sp, #0
 800b426:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	785a      	ldrb	r2, [r3, #1]
 800b42c:	4b1b      	ldr	r3, [pc, #108]	@ (800b49c <HAL_MPU_ConfigRegion+0x7c>)
 800b42e:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 800b430:	4b1a      	ldr	r3, [pc, #104]	@ (800b49c <HAL_MPU_ConfigRegion+0x7c>)
 800b432:	691b      	ldr	r3, [r3, #16]
 800b434:	4a19      	ldr	r2, [pc, #100]	@ (800b49c <HAL_MPU_ConfigRegion+0x7c>)
 800b436:	f023 0301 	bic.w	r3, r3, #1
 800b43a:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 800b43c:	4a17      	ldr	r2, [pc, #92]	@ (800b49c <HAL_MPU_ConfigRegion+0x7c>)
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	685b      	ldr	r3, [r3, #4]
 800b442:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	7b1b      	ldrb	r3, [r3, #12]
 800b448:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	7adb      	ldrb	r3, [r3, #11]
 800b44e:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800b450:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	7a9b      	ldrb	r3, [r3, #10]
 800b456:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800b458:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	7b5b      	ldrb	r3, [r3, #13]
 800b45e:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800b460:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	7b9b      	ldrb	r3, [r3, #14]
 800b466:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800b468:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	7bdb      	ldrb	r3, [r3, #15]
 800b46e:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800b470:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	7a5b      	ldrb	r3, [r3, #9]
 800b476:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800b478:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	7a1b      	ldrb	r3, [r3, #8]
 800b47e:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800b480:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800b482:	687a      	ldr	r2, [r7, #4]
 800b484:	7812      	ldrb	r2, [r2, #0]
 800b486:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800b488:	4a04      	ldr	r2, [pc, #16]	@ (800b49c <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800b48a:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800b48c:	6113      	str	r3, [r2, #16]
}
 800b48e:	bf00      	nop
 800b490:	370c      	adds	r7, #12
 800b492:	46bd      	mov	sp, r7
 800b494:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b498:	4770      	bx	lr
 800b49a:	bf00      	nop
 800b49c:	e000ed90 	.word	0xe000ed90

0800b4a0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800b4a0:	b580      	push	{r7, lr}
 800b4a2:	b086      	sub	sp, #24
 800b4a4:	af00      	add	r7, sp, #0
 800b4a6:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 800b4a8:	f7fd fec4 	bl	8009234 <HAL_GetTick>
 800b4ac:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d101      	bne.n	800b4b8 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800b4b4:	2301      	movs	r3, #1
 800b4b6:	e312      	b.n	800bade <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	4a66      	ldr	r2, [pc, #408]	@ (800b658 <HAL_DMA_Init+0x1b8>)
 800b4be:	4293      	cmp	r3, r2
 800b4c0:	d04a      	beq.n	800b558 <HAL_DMA_Init+0xb8>
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	4a65      	ldr	r2, [pc, #404]	@ (800b65c <HAL_DMA_Init+0x1bc>)
 800b4c8:	4293      	cmp	r3, r2
 800b4ca:	d045      	beq.n	800b558 <HAL_DMA_Init+0xb8>
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	4a63      	ldr	r2, [pc, #396]	@ (800b660 <HAL_DMA_Init+0x1c0>)
 800b4d2:	4293      	cmp	r3, r2
 800b4d4:	d040      	beq.n	800b558 <HAL_DMA_Init+0xb8>
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	4a62      	ldr	r2, [pc, #392]	@ (800b664 <HAL_DMA_Init+0x1c4>)
 800b4dc:	4293      	cmp	r3, r2
 800b4de:	d03b      	beq.n	800b558 <HAL_DMA_Init+0xb8>
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	4a60      	ldr	r2, [pc, #384]	@ (800b668 <HAL_DMA_Init+0x1c8>)
 800b4e6:	4293      	cmp	r3, r2
 800b4e8:	d036      	beq.n	800b558 <HAL_DMA_Init+0xb8>
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	4a5f      	ldr	r2, [pc, #380]	@ (800b66c <HAL_DMA_Init+0x1cc>)
 800b4f0:	4293      	cmp	r3, r2
 800b4f2:	d031      	beq.n	800b558 <HAL_DMA_Init+0xb8>
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	4a5d      	ldr	r2, [pc, #372]	@ (800b670 <HAL_DMA_Init+0x1d0>)
 800b4fa:	4293      	cmp	r3, r2
 800b4fc:	d02c      	beq.n	800b558 <HAL_DMA_Init+0xb8>
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	4a5c      	ldr	r2, [pc, #368]	@ (800b674 <HAL_DMA_Init+0x1d4>)
 800b504:	4293      	cmp	r3, r2
 800b506:	d027      	beq.n	800b558 <HAL_DMA_Init+0xb8>
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	4a5a      	ldr	r2, [pc, #360]	@ (800b678 <HAL_DMA_Init+0x1d8>)
 800b50e:	4293      	cmp	r3, r2
 800b510:	d022      	beq.n	800b558 <HAL_DMA_Init+0xb8>
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	4a59      	ldr	r2, [pc, #356]	@ (800b67c <HAL_DMA_Init+0x1dc>)
 800b518:	4293      	cmp	r3, r2
 800b51a:	d01d      	beq.n	800b558 <HAL_DMA_Init+0xb8>
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	4a57      	ldr	r2, [pc, #348]	@ (800b680 <HAL_DMA_Init+0x1e0>)
 800b522:	4293      	cmp	r3, r2
 800b524:	d018      	beq.n	800b558 <HAL_DMA_Init+0xb8>
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	4a56      	ldr	r2, [pc, #344]	@ (800b684 <HAL_DMA_Init+0x1e4>)
 800b52c:	4293      	cmp	r3, r2
 800b52e:	d013      	beq.n	800b558 <HAL_DMA_Init+0xb8>
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	4a54      	ldr	r2, [pc, #336]	@ (800b688 <HAL_DMA_Init+0x1e8>)
 800b536:	4293      	cmp	r3, r2
 800b538:	d00e      	beq.n	800b558 <HAL_DMA_Init+0xb8>
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	4a53      	ldr	r2, [pc, #332]	@ (800b68c <HAL_DMA_Init+0x1ec>)
 800b540:	4293      	cmp	r3, r2
 800b542:	d009      	beq.n	800b558 <HAL_DMA_Init+0xb8>
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	4a51      	ldr	r2, [pc, #324]	@ (800b690 <HAL_DMA_Init+0x1f0>)
 800b54a:	4293      	cmp	r3, r2
 800b54c:	d004      	beq.n	800b558 <HAL_DMA_Init+0xb8>
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	4a50      	ldr	r2, [pc, #320]	@ (800b694 <HAL_DMA_Init+0x1f4>)
 800b554:	4293      	cmp	r3, r2
 800b556:	d101      	bne.n	800b55c <HAL_DMA_Init+0xbc>
 800b558:	2301      	movs	r3, #1
 800b55a:	e000      	b.n	800b55e <HAL_DMA_Init+0xbe>
 800b55c:	2300      	movs	r3, #0
 800b55e:	2b00      	cmp	r3, #0
 800b560:	f000 813c 	beq.w	800b7dc <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	2202      	movs	r2, #2
 800b568:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	2200      	movs	r2, #0
 800b570:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	4a37      	ldr	r2, [pc, #220]	@ (800b658 <HAL_DMA_Init+0x1b8>)
 800b57a:	4293      	cmp	r3, r2
 800b57c:	d04a      	beq.n	800b614 <HAL_DMA_Init+0x174>
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	4a36      	ldr	r2, [pc, #216]	@ (800b65c <HAL_DMA_Init+0x1bc>)
 800b584:	4293      	cmp	r3, r2
 800b586:	d045      	beq.n	800b614 <HAL_DMA_Init+0x174>
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	4a34      	ldr	r2, [pc, #208]	@ (800b660 <HAL_DMA_Init+0x1c0>)
 800b58e:	4293      	cmp	r3, r2
 800b590:	d040      	beq.n	800b614 <HAL_DMA_Init+0x174>
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	4a33      	ldr	r2, [pc, #204]	@ (800b664 <HAL_DMA_Init+0x1c4>)
 800b598:	4293      	cmp	r3, r2
 800b59a:	d03b      	beq.n	800b614 <HAL_DMA_Init+0x174>
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	4a31      	ldr	r2, [pc, #196]	@ (800b668 <HAL_DMA_Init+0x1c8>)
 800b5a2:	4293      	cmp	r3, r2
 800b5a4:	d036      	beq.n	800b614 <HAL_DMA_Init+0x174>
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	4a30      	ldr	r2, [pc, #192]	@ (800b66c <HAL_DMA_Init+0x1cc>)
 800b5ac:	4293      	cmp	r3, r2
 800b5ae:	d031      	beq.n	800b614 <HAL_DMA_Init+0x174>
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	4a2e      	ldr	r2, [pc, #184]	@ (800b670 <HAL_DMA_Init+0x1d0>)
 800b5b6:	4293      	cmp	r3, r2
 800b5b8:	d02c      	beq.n	800b614 <HAL_DMA_Init+0x174>
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	4a2d      	ldr	r2, [pc, #180]	@ (800b674 <HAL_DMA_Init+0x1d4>)
 800b5c0:	4293      	cmp	r3, r2
 800b5c2:	d027      	beq.n	800b614 <HAL_DMA_Init+0x174>
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	4a2b      	ldr	r2, [pc, #172]	@ (800b678 <HAL_DMA_Init+0x1d8>)
 800b5ca:	4293      	cmp	r3, r2
 800b5cc:	d022      	beq.n	800b614 <HAL_DMA_Init+0x174>
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	4a2a      	ldr	r2, [pc, #168]	@ (800b67c <HAL_DMA_Init+0x1dc>)
 800b5d4:	4293      	cmp	r3, r2
 800b5d6:	d01d      	beq.n	800b614 <HAL_DMA_Init+0x174>
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	4a28      	ldr	r2, [pc, #160]	@ (800b680 <HAL_DMA_Init+0x1e0>)
 800b5de:	4293      	cmp	r3, r2
 800b5e0:	d018      	beq.n	800b614 <HAL_DMA_Init+0x174>
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	4a27      	ldr	r2, [pc, #156]	@ (800b684 <HAL_DMA_Init+0x1e4>)
 800b5e8:	4293      	cmp	r3, r2
 800b5ea:	d013      	beq.n	800b614 <HAL_DMA_Init+0x174>
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	4a25      	ldr	r2, [pc, #148]	@ (800b688 <HAL_DMA_Init+0x1e8>)
 800b5f2:	4293      	cmp	r3, r2
 800b5f4:	d00e      	beq.n	800b614 <HAL_DMA_Init+0x174>
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	4a24      	ldr	r2, [pc, #144]	@ (800b68c <HAL_DMA_Init+0x1ec>)
 800b5fc:	4293      	cmp	r3, r2
 800b5fe:	d009      	beq.n	800b614 <HAL_DMA_Init+0x174>
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	4a22      	ldr	r2, [pc, #136]	@ (800b690 <HAL_DMA_Init+0x1f0>)
 800b606:	4293      	cmp	r3, r2
 800b608:	d004      	beq.n	800b614 <HAL_DMA_Init+0x174>
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	4a21      	ldr	r2, [pc, #132]	@ (800b694 <HAL_DMA_Init+0x1f4>)
 800b610:	4293      	cmp	r3, r2
 800b612:	d108      	bne.n	800b626 <HAL_DMA_Init+0x186>
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	681a      	ldr	r2, [r3, #0]
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	f022 0201 	bic.w	r2, r2, #1
 800b622:	601a      	str	r2, [r3, #0]
 800b624:	e007      	b.n	800b636 <HAL_DMA_Init+0x196>
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	681a      	ldr	r2, [r3, #0]
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	f022 0201 	bic.w	r2, r2, #1
 800b634:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800b636:	e02f      	b.n	800b698 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800b638:	f7fd fdfc 	bl	8009234 <HAL_GetTick>
 800b63c:	4602      	mov	r2, r0
 800b63e:	693b      	ldr	r3, [r7, #16]
 800b640:	1ad3      	subs	r3, r2, r3
 800b642:	2b05      	cmp	r3, #5
 800b644:	d928      	bls.n	800b698 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	2220      	movs	r2, #32
 800b64a:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	2203      	movs	r2, #3
 800b650:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 800b654:	2301      	movs	r3, #1
 800b656:	e242      	b.n	800bade <HAL_DMA_Init+0x63e>
 800b658:	40020010 	.word	0x40020010
 800b65c:	40020028 	.word	0x40020028
 800b660:	40020040 	.word	0x40020040
 800b664:	40020058 	.word	0x40020058
 800b668:	40020070 	.word	0x40020070
 800b66c:	40020088 	.word	0x40020088
 800b670:	400200a0 	.word	0x400200a0
 800b674:	400200b8 	.word	0x400200b8
 800b678:	40020410 	.word	0x40020410
 800b67c:	40020428 	.word	0x40020428
 800b680:	40020440 	.word	0x40020440
 800b684:	40020458 	.word	0x40020458
 800b688:	40020470 	.word	0x40020470
 800b68c:	40020488 	.word	0x40020488
 800b690:	400204a0 	.word	0x400204a0
 800b694:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	f003 0301 	and.w	r3, r3, #1
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d1c8      	bne.n	800b638 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800b6ae:	697a      	ldr	r2, [r7, #20]
 800b6b0:	4b83      	ldr	r3, [pc, #524]	@ (800b8c0 <HAL_DMA_Init+0x420>)
 800b6b2:	4013      	ands	r3, r2
 800b6b4:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800b6be:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	691b      	ldr	r3, [r3, #16]
 800b6c4:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b6ca:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	699b      	ldr	r3, [r3, #24]
 800b6d0:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b6d6:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	6a1b      	ldr	r3, [r3, #32]
 800b6dc:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800b6de:	697a      	ldr	r2, [r7, #20]
 800b6e0:	4313      	orrs	r3, r2
 800b6e2:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b6e8:	2b04      	cmp	r3, #4
 800b6ea:	d107      	bne.n	800b6fc <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b6f4:	4313      	orrs	r3, r2
 800b6f6:	697a      	ldr	r2, [r7, #20]
 800b6f8:	4313      	orrs	r3, r2
 800b6fa:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	685b      	ldr	r3, [r3, #4]
 800b700:	2b28      	cmp	r3, #40	@ 0x28
 800b702:	d903      	bls.n	800b70c <HAL_DMA_Init+0x26c>
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	685b      	ldr	r3, [r3, #4]
 800b708:	2b2e      	cmp	r3, #46	@ 0x2e
 800b70a:	d91f      	bls.n	800b74c <HAL_DMA_Init+0x2ac>
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	685b      	ldr	r3, [r3, #4]
 800b710:	2b3e      	cmp	r3, #62	@ 0x3e
 800b712:	d903      	bls.n	800b71c <HAL_DMA_Init+0x27c>
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	685b      	ldr	r3, [r3, #4]
 800b718:	2b42      	cmp	r3, #66	@ 0x42
 800b71a:	d917      	bls.n	800b74c <HAL_DMA_Init+0x2ac>
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	685b      	ldr	r3, [r3, #4]
 800b720:	2b46      	cmp	r3, #70	@ 0x46
 800b722:	d903      	bls.n	800b72c <HAL_DMA_Init+0x28c>
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	685b      	ldr	r3, [r3, #4]
 800b728:	2b48      	cmp	r3, #72	@ 0x48
 800b72a:	d90f      	bls.n	800b74c <HAL_DMA_Init+0x2ac>
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	685b      	ldr	r3, [r3, #4]
 800b730:	2b4e      	cmp	r3, #78	@ 0x4e
 800b732:	d903      	bls.n	800b73c <HAL_DMA_Init+0x29c>
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	685b      	ldr	r3, [r3, #4]
 800b738:	2b52      	cmp	r3, #82	@ 0x52
 800b73a:	d907      	bls.n	800b74c <HAL_DMA_Init+0x2ac>
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	685b      	ldr	r3, [r3, #4]
 800b740:	2b73      	cmp	r3, #115	@ 0x73
 800b742:	d905      	bls.n	800b750 <HAL_DMA_Init+0x2b0>
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	685b      	ldr	r3, [r3, #4]
 800b748:	2b77      	cmp	r3, #119	@ 0x77
 800b74a:	d801      	bhi.n	800b750 <HAL_DMA_Init+0x2b0>
 800b74c:	2301      	movs	r3, #1
 800b74e:	e000      	b.n	800b752 <HAL_DMA_Init+0x2b2>
 800b750:	2300      	movs	r3, #0
 800b752:	2b00      	cmp	r3, #0
 800b754:	d003      	beq.n	800b75e <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800b756:	697b      	ldr	r3, [r7, #20]
 800b758:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b75c:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	697a      	ldr	r2, [r7, #20]
 800b764:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	695b      	ldr	r3, [r3, #20]
 800b76c:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800b76e:	697b      	ldr	r3, [r7, #20]
 800b770:	f023 0307 	bic.w	r3, r3, #7
 800b774:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b77a:	697a      	ldr	r2, [r7, #20]
 800b77c:	4313      	orrs	r3, r2
 800b77e:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b784:	2b04      	cmp	r3, #4
 800b786:	d117      	bne.n	800b7b8 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b78c:	697a      	ldr	r2, [r7, #20]
 800b78e:	4313      	orrs	r3, r2
 800b790:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b796:	2b00      	cmp	r3, #0
 800b798:	d00e      	beq.n	800b7b8 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800b79a:	6878      	ldr	r0, [r7, #4]
 800b79c:	f002 fb48 	bl	800de30 <DMA_CheckFifoParam>
 800b7a0:	4603      	mov	r3, r0
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d008      	beq.n	800b7b8 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	2240      	movs	r2, #64	@ 0x40
 800b7aa:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	2201      	movs	r2, #1
 800b7b0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 800b7b4:	2301      	movs	r3, #1
 800b7b6:	e192      	b.n	800bade <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	697a      	ldr	r2, [r7, #20]
 800b7be:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800b7c0:	6878      	ldr	r0, [r7, #4]
 800b7c2:	f002 fa83 	bl	800dccc <DMA_CalcBaseAndBitshift>
 800b7c6:	4603      	mov	r3, r0
 800b7c8:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b7ce:	f003 031f 	and.w	r3, r3, #31
 800b7d2:	223f      	movs	r2, #63	@ 0x3f
 800b7d4:	409a      	lsls	r2, r3
 800b7d6:	68bb      	ldr	r3, [r7, #8]
 800b7d8:	609a      	str	r2, [r3, #8]
 800b7da:	e0c8      	b.n	800b96e <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	4a38      	ldr	r2, [pc, #224]	@ (800b8c4 <HAL_DMA_Init+0x424>)
 800b7e2:	4293      	cmp	r3, r2
 800b7e4:	d022      	beq.n	800b82c <HAL_DMA_Init+0x38c>
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	4a37      	ldr	r2, [pc, #220]	@ (800b8c8 <HAL_DMA_Init+0x428>)
 800b7ec:	4293      	cmp	r3, r2
 800b7ee:	d01d      	beq.n	800b82c <HAL_DMA_Init+0x38c>
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	4a35      	ldr	r2, [pc, #212]	@ (800b8cc <HAL_DMA_Init+0x42c>)
 800b7f6:	4293      	cmp	r3, r2
 800b7f8:	d018      	beq.n	800b82c <HAL_DMA_Init+0x38c>
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	4a34      	ldr	r2, [pc, #208]	@ (800b8d0 <HAL_DMA_Init+0x430>)
 800b800:	4293      	cmp	r3, r2
 800b802:	d013      	beq.n	800b82c <HAL_DMA_Init+0x38c>
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	4a32      	ldr	r2, [pc, #200]	@ (800b8d4 <HAL_DMA_Init+0x434>)
 800b80a:	4293      	cmp	r3, r2
 800b80c:	d00e      	beq.n	800b82c <HAL_DMA_Init+0x38c>
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	4a31      	ldr	r2, [pc, #196]	@ (800b8d8 <HAL_DMA_Init+0x438>)
 800b814:	4293      	cmp	r3, r2
 800b816:	d009      	beq.n	800b82c <HAL_DMA_Init+0x38c>
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	4a2f      	ldr	r2, [pc, #188]	@ (800b8dc <HAL_DMA_Init+0x43c>)
 800b81e:	4293      	cmp	r3, r2
 800b820:	d004      	beq.n	800b82c <HAL_DMA_Init+0x38c>
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	4a2e      	ldr	r2, [pc, #184]	@ (800b8e0 <HAL_DMA_Init+0x440>)
 800b828:	4293      	cmp	r3, r2
 800b82a:	d101      	bne.n	800b830 <HAL_DMA_Init+0x390>
 800b82c:	2301      	movs	r3, #1
 800b82e:	e000      	b.n	800b832 <HAL_DMA_Init+0x392>
 800b830:	2300      	movs	r3, #0
 800b832:	2b00      	cmp	r3, #0
 800b834:	f000 8092 	beq.w	800b95c <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	4a21      	ldr	r2, [pc, #132]	@ (800b8c4 <HAL_DMA_Init+0x424>)
 800b83e:	4293      	cmp	r3, r2
 800b840:	d021      	beq.n	800b886 <HAL_DMA_Init+0x3e6>
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	4a20      	ldr	r2, [pc, #128]	@ (800b8c8 <HAL_DMA_Init+0x428>)
 800b848:	4293      	cmp	r3, r2
 800b84a:	d01c      	beq.n	800b886 <HAL_DMA_Init+0x3e6>
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	4a1e      	ldr	r2, [pc, #120]	@ (800b8cc <HAL_DMA_Init+0x42c>)
 800b852:	4293      	cmp	r3, r2
 800b854:	d017      	beq.n	800b886 <HAL_DMA_Init+0x3e6>
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	4a1d      	ldr	r2, [pc, #116]	@ (800b8d0 <HAL_DMA_Init+0x430>)
 800b85c:	4293      	cmp	r3, r2
 800b85e:	d012      	beq.n	800b886 <HAL_DMA_Init+0x3e6>
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	4a1b      	ldr	r2, [pc, #108]	@ (800b8d4 <HAL_DMA_Init+0x434>)
 800b866:	4293      	cmp	r3, r2
 800b868:	d00d      	beq.n	800b886 <HAL_DMA_Init+0x3e6>
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	4a1a      	ldr	r2, [pc, #104]	@ (800b8d8 <HAL_DMA_Init+0x438>)
 800b870:	4293      	cmp	r3, r2
 800b872:	d008      	beq.n	800b886 <HAL_DMA_Init+0x3e6>
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	4a18      	ldr	r2, [pc, #96]	@ (800b8dc <HAL_DMA_Init+0x43c>)
 800b87a:	4293      	cmp	r3, r2
 800b87c:	d003      	beq.n	800b886 <HAL_DMA_Init+0x3e6>
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	4a17      	ldr	r2, [pc, #92]	@ (800b8e0 <HAL_DMA_Init+0x440>)
 800b884:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	2202      	movs	r2, #2
 800b88a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	2200      	movs	r2, #0
 800b892:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800b89e:	697a      	ldr	r2, [r7, #20]
 800b8a0:	4b10      	ldr	r3, [pc, #64]	@ (800b8e4 <HAL_DMA_Init+0x444>)
 800b8a2:	4013      	ands	r3, r2
 800b8a4:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	689b      	ldr	r3, [r3, #8]
 800b8aa:	2b40      	cmp	r3, #64	@ 0x40
 800b8ac:	d01c      	beq.n	800b8e8 <HAL_DMA_Init+0x448>
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	689b      	ldr	r3, [r3, #8]
 800b8b2:	2b80      	cmp	r3, #128	@ 0x80
 800b8b4:	d102      	bne.n	800b8bc <HAL_DMA_Init+0x41c>
 800b8b6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800b8ba:	e016      	b.n	800b8ea <HAL_DMA_Init+0x44a>
 800b8bc:	2300      	movs	r3, #0
 800b8be:	e014      	b.n	800b8ea <HAL_DMA_Init+0x44a>
 800b8c0:	fe10803f 	.word	0xfe10803f
 800b8c4:	58025408 	.word	0x58025408
 800b8c8:	5802541c 	.word	0x5802541c
 800b8cc:	58025430 	.word	0x58025430
 800b8d0:	58025444 	.word	0x58025444
 800b8d4:	58025458 	.word	0x58025458
 800b8d8:	5802546c 	.word	0x5802546c
 800b8dc:	58025480 	.word	0x58025480
 800b8e0:	58025494 	.word	0x58025494
 800b8e4:	fffe000f 	.word	0xfffe000f
 800b8e8:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800b8ea:	687a      	ldr	r2, [r7, #4]
 800b8ec:	68d2      	ldr	r2, [r2, #12]
 800b8ee:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800b8f0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	691b      	ldr	r3, [r3, #16]
 800b8f6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800b8f8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	695b      	ldr	r3, [r3, #20]
 800b8fe:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800b900:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	699b      	ldr	r3, [r3, #24]
 800b906:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800b908:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	69db      	ldr	r3, [r3, #28]
 800b90e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800b910:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	6a1b      	ldr	r3, [r3, #32]
 800b916:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800b918:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800b91a:	697a      	ldr	r2, [r7, #20]
 800b91c:	4313      	orrs	r3, r2
 800b91e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	697a      	ldr	r2, [r7, #20]
 800b926:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	461a      	mov	r2, r3
 800b92e:	4b6e      	ldr	r3, [pc, #440]	@ (800bae8 <HAL_DMA_Init+0x648>)
 800b930:	4413      	add	r3, r2
 800b932:	4a6e      	ldr	r2, [pc, #440]	@ (800baec <HAL_DMA_Init+0x64c>)
 800b934:	fba2 2303 	umull	r2, r3, r2, r3
 800b938:	091b      	lsrs	r3, r3, #4
 800b93a:	009a      	lsls	r2, r3, #2
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800b940:	6878      	ldr	r0, [r7, #4]
 800b942:	f002 f9c3 	bl	800dccc <DMA_CalcBaseAndBitshift>
 800b946:	4603      	mov	r3, r0
 800b948:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b94e:	f003 031f 	and.w	r3, r3, #31
 800b952:	2201      	movs	r2, #1
 800b954:	409a      	lsls	r2, r3
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	605a      	str	r2, [r3, #4]
 800b95a:	e008      	b.n	800b96e <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	2240      	movs	r2, #64	@ 0x40
 800b960:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	2203      	movs	r2, #3
 800b966:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 800b96a:	2301      	movs	r3, #1
 800b96c:	e0b7      	b.n	800bade <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	4a5f      	ldr	r2, [pc, #380]	@ (800baf0 <HAL_DMA_Init+0x650>)
 800b974:	4293      	cmp	r3, r2
 800b976:	d072      	beq.n	800ba5e <HAL_DMA_Init+0x5be>
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	4a5d      	ldr	r2, [pc, #372]	@ (800baf4 <HAL_DMA_Init+0x654>)
 800b97e:	4293      	cmp	r3, r2
 800b980:	d06d      	beq.n	800ba5e <HAL_DMA_Init+0x5be>
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	4a5c      	ldr	r2, [pc, #368]	@ (800baf8 <HAL_DMA_Init+0x658>)
 800b988:	4293      	cmp	r3, r2
 800b98a:	d068      	beq.n	800ba5e <HAL_DMA_Init+0x5be>
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	4a5a      	ldr	r2, [pc, #360]	@ (800bafc <HAL_DMA_Init+0x65c>)
 800b992:	4293      	cmp	r3, r2
 800b994:	d063      	beq.n	800ba5e <HAL_DMA_Init+0x5be>
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	4a59      	ldr	r2, [pc, #356]	@ (800bb00 <HAL_DMA_Init+0x660>)
 800b99c:	4293      	cmp	r3, r2
 800b99e:	d05e      	beq.n	800ba5e <HAL_DMA_Init+0x5be>
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	4a57      	ldr	r2, [pc, #348]	@ (800bb04 <HAL_DMA_Init+0x664>)
 800b9a6:	4293      	cmp	r3, r2
 800b9a8:	d059      	beq.n	800ba5e <HAL_DMA_Init+0x5be>
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	4a56      	ldr	r2, [pc, #344]	@ (800bb08 <HAL_DMA_Init+0x668>)
 800b9b0:	4293      	cmp	r3, r2
 800b9b2:	d054      	beq.n	800ba5e <HAL_DMA_Init+0x5be>
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	4a54      	ldr	r2, [pc, #336]	@ (800bb0c <HAL_DMA_Init+0x66c>)
 800b9ba:	4293      	cmp	r3, r2
 800b9bc:	d04f      	beq.n	800ba5e <HAL_DMA_Init+0x5be>
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	4a53      	ldr	r2, [pc, #332]	@ (800bb10 <HAL_DMA_Init+0x670>)
 800b9c4:	4293      	cmp	r3, r2
 800b9c6:	d04a      	beq.n	800ba5e <HAL_DMA_Init+0x5be>
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	4a51      	ldr	r2, [pc, #324]	@ (800bb14 <HAL_DMA_Init+0x674>)
 800b9ce:	4293      	cmp	r3, r2
 800b9d0:	d045      	beq.n	800ba5e <HAL_DMA_Init+0x5be>
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	4a50      	ldr	r2, [pc, #320]	@ (800bb18 <HAL_DMA_Init+0x678>)
 800b9d8:	4293      	cmp	r3, r2
 800b9da:	d040      	beq.n	800ba5e <HAL_DMA_Init+0x5be>
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	4a4e      	ldr	r2, [pc, #312]	@ (800bb1c <HAL_DMA_Init+0x67c>)
 800b9e2:	4293      	cmp	r3, r2
 800b9e4:	d03b      	beq.n	800ba5e <HAL_DMA_Init+0x5be>
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	4a4d      	ldr	r2, [pc, #308]	@ (800bb20 <HAL_DMA_Init+0x680>)
 800b9ec:	4293      	cmp	r3, r2
 800b9ee:	d036      	beq.n	800ba5e <HAL_DMA_Init+0x5be>
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	4a4b      	ldr	r2, [pc, #300]	@ (800bb24 <HAL_DMA_Init+0x684>)
 800b9f6:	4293      	cmp	r3, r2
 800b9f8:	d031      	beq.n	800ba5e <HAL_DMA_Init+0x5be>
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	4a4a      	ldr	r2, [pc, #296]	@ (800bb28 <HAL_DMA_Init+0x688>)
 800ba00:	4293      	cmp	r3, r2
 800ba02:	d02c      	beq.n	800ba5e <HAL_DMA_Init+0x5be>
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	4a48      	ldr	r2, [pc, #288]	@ (800bb2c <HAL_DMA_Init+0x68c>)
 800ba0a:	4293      	cmp	r3, r2
 800ba0c:	d027      	beq.n	800ba5e <HAL_DMA_Init+0x5be>
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	4a47      	ldr	r2, [pc, #284]	@ (800bb30 <HAL_DMA_Init+0x690>)
 800ba14:	4293      	cmp	r3, r2
 800ba16:	d022      	beq.n	800ba5e <HAL_DMA_Init+0x5be>
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	4a45      	ldr	r2, [pc, #276]	@ (800bb34 <HAL_DMA_Init+0x694>)
 800ba1e:	4293      	cmp	r3, r2
 800ba20:	d01d      	beq.n	800ba5e <HAL_DMA_Init+0x5be>
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	4a44      	ldr	r2, [pc, #272]	@ (800bb38 <HAL_DMA_Init+0x698>)
 800ba28:	4293      	cmp	r3, r2
 800ba2a:	d018      	beq.n	800ba5e <HAL_DMA_Init+0x5be>
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	4a42      	ldr	r2, [pc, #264]	@ (800bb3c <HAL_DMA_Init+0x69c>)
 800ba32:	4293      	cmp	r3, r2
 800ba34:	d013      	beq.n	800ba5e <HAL_DMA_Init+0x5be>
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	4a41      	ldr	r2, [pc, #260]	@ (800bb40 <HAL_DMA_Init+0x6a0>)
 800ba3c:	4293      	cmp	r3, r2
 800ba3e:	d00e      	beq.n	800ba5e <HAL_DMA_Init+0x5be>
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	4a3f      	ldr	r2, [pc, #252]	@ (800bb44 <HAL_DMA_Init+0x6a4>)
 800ba46:	4293      	cmp	r3, r2
 800ba48:	d009      	beq.n	800ba5e <HAL_DMA_Init+0x5be>
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	4a3e      	ldr	r2, [pc, #248]	@ (800bb48 <HAL_DMA_Init+0x6a8>)
 800ba50:	4293      	cmp	r3, r2
 800ba52:	d004      	beq.n	800ba5e <HAL_DMA_Init+0x5be>
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	4a3c      	ldr	r2, [pc, #240]	@ (800bb4c <HAL_DMA_Init+0x6ac>)
 800ba5a:	4293      	cmp	r3, r2
 800ba5c:	d101      	bne.n	800ba62 <HAL_DMA_Init+0x5c2>
 800ba5e:	2301      	movs	r3, #1
 800ba60:	e000      	b.n	800ba64 <HAL_DMA_Init+0x5c4>
 800ba62:	2300      	movs	r3, #0
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d032      	beq.n	800bace <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800ba68:	6878      	ldr	r0, [r7, #4]
 800ba6a:	f002 fa5d 	bl	800df28 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	689b      	ldr	r3, [r3, #8]
 800ba72:	2b80      	cmp	r3, #128	@ 0x80
 800ba74:	d102      	bne.n	800ba7c <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	2200      	movs	r2, #0
 800ba7a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	685a      	ldr	r2, [r3, #4]
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ba84:	b2d2      	uxtb	r2, r2
 800ba86:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ba8c:	687a      	ldr	r2, [r7, #4]
 800ba8e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800ba90:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	685b      	ldr	r3, [r3, #4]
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d010      	beq.n	800babc <HAL_DMA_Init+0x61c>
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	685b      	ldr	r3, [r3, #4]
 800ba9e:	2b08      	cmp	r3, #8
 800baa0:	d80c      	bhi.n	800babc <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800baa2:	6878      	ldr	r0, [r7, #4]
 800baa4:	f002 fada 	bl	800e05c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800baac:	2200      	movs	r2, #0
 800baae:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bab4:	687a      	ldr	r2, [r7, #4]
 800bab6:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800bab8:	605a      	str	r2, [r3, #4]
 800baba:	e008      	b.n	800bace <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	2200      	movs	r2, #0
 800bac0:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	2200      	movs	r2, #0
 800bac6:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	2200      	movs	r2, #0
 800bacc:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	2200      	movs	r2, #0
 800bad2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	2201      	movs	r2, #1
 800bad8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800badc:	2300      	movs	r3, #0
}
 800bade:	4618      	mov	r0, r3
 800bae0:	3718      	adds	r7, #24
 800bae2:	46bd      	mov	sp, r7
 800bae4:	bd80      	pop	{r7, pc}
 800bae6:	bf00      	nop
 800bae8:	a7fdabf8 	.word	0xa7fdabf8
 800baec:	cccccccd 	.word	0xcccccccd
 800baf0:	40020010 	.word	0x40020010
 800baf4:	40020028 	.word	0x40020028
 800baf8:	40020040 	.word	0x40020040
 800bafc:	40020058 	.word	0x40020058
 800bb00:	40020070 	.word	0x40020070
 800bb04:	40020088 	.word	0x40020088
 800bb08:	400200a0 	.word	0x400200a0
 800bb0c:	400200b8 	.word	0x400200b8
 800bb10:	40020410 	.word	0x40020410
 800bb14:	40020428 	.word	0x40020428
 800bb18:	40020440 	.word	0x40020440
 800bb1c:	40020458 	.word	0x40020458
 800bb20:	40020470 	.word	0x40020470
 800bb24:	40020488 	.word	0x40020488
 800bb28:	400204a0 	.word	0x400204a0
 800bb2c:	400204b8 	.word	0x400204b8
 800bb30:	58025408 	.word	0x58025408
 800bb34:	5802541c 	.word	0x5802541c
 800bb38:	58025430 	.word	0x58025430
 800bb3c:	58025444 	.word	0x58025444
 800bb40:	58025458 	.word	0x58025458
 800bb44:	5802546c 	.word	0x5802546c
 800bb48:	58025480 	.word	0x58025480
 800bb4c:	58025494 	.word	0x58025494

0800bb50 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800bb50:	b580      	push	{r7, lr}
 800bb52:	b086      	sub	sp, #24
 800bb54:	af00      	add	r7, sp, #0
 800bb56:	60f8      	str	r0, [r7, #12]
 800bb58:	60b9      	str	r1, [r7, #8]
 800bb5a:	607a      	str	r2, [r7, #4]
 800bb5c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800bb5e:	2300      	movs	r3, #0
 800bb60:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d101      	bne.n	800bb6c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 800bb68:	2301      	movs	r3, #1
 800bb6a:	e226      	b.n	800bfba <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800bb72:	2b01      	cmp	r3, #1
 800bb74:	d101      	bne.n	800bb7a <HAL_DMA_Start_IT+0x2a>
 800bb76:	2302      	movs	r3, #2
 800bb78:	e21f      	b.n	800bfba <HAL_DMA_Start_IT+0x46a>
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	2201      	movs	r2, #1
 800bb7e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800bb88:	b2db      	uxtb	r3, r3
 800bb8a:	2b01      	cmp	r3, #1
 800bb8c:	f040 820a 	bne.w	800bfa4 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	2202      	movs	r2, #2
 800bb94:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	2200      	movs	r2, #0
 800bb9c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	4a68      	ldr	r2, [pc, #416]	@ (800bd44 <HAL_DMA_Start_IT+0x1f4>)
 800bba4:	4293      	cmp	r3, r2
 800bba6:	d04a      	beq.n	800bc3e <HAL_DMA_Start_IT+0xee>
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	4a66      	ldr	r2, [pc, #408]	@ (800bd48 <HAL_DMA_Start_IT+0x1f8>)
 800bbae:	4293      	cmp	r3, r2
 800bbb0:	d045      	beq.n	800bc3e <HAL_DMA_Start_IT+0xee>
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	4a65      	ldr	r2, [pc, #404]	@ (800bd4c <HAL_DMA_Start_IT+0x1fc>)
 800bbb8:	4293      	cmp	r3, r2
 800bbba:	d040      	beq.n	800bc3e <HAL_DMA_Start_IT+0xee>
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	4a63      	ldr	r2, [pc, #396]	@ (800bd50 <HAL_DMA_Start_IT+0x200>)
 800bbc2:	4293      	cmp	r3, r2
 800bbc4:	d03b      	beq.n	800bc3e <HAL_DMA_Start_IT+0xee>
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	4a62      	ldr	r2, [pc, #392]	@ (800bd54 <HAL_DMA_Start_IT+0x204>)
 800bbcc:	4293      	cmp	r3, r2
 800bbce:	d036      	beq.n	800bc3e <HAL_DMA_Start_IT+0xee>
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	4a60      	ldr	r2, [pc, #384]	@ (800bd58 <HAL_DMA_Start_IT+0x208>)
 800bbd6:	4293      	cmp	r3, r2
 800bbd8:	d031      	beq.n	800bc3e <HAL_DMA_Start_IT+0xee>
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	4a5f      	ldr	r2, [pc, #380]	@ (800bd5c <HAL_DMA_Start_IT+0x20c>)
 800bbe0:	4293      	cmp	r3, r2
 800bbe2:	d02c      	beq.n	800bc3e <HAL_DMA_Start_IT+0xee>
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	4a5d      	ldr	r2, [pc, #372]	@ (800bd60 <HAL_DMA_Start_IT+0x210>)
 800bbea:	4293      	cmp	r3, r2
 800bbec:	d027      	beq.n	800bc3e <HAL_DMA_Start_IT+0xee>
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	4a5c      	ldr	r2, [pc, #368]	@ (800bd64 <HAL_DMA_Start_IT+0x214>)
 800bbf4:	4293      	cmp	r3, r2
 800bbf6:	d022      	beq.n	800bc3e <HAL_DMA_Start_IT+0xee>
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	4a5a      	ldr	r2, [pc, #360]	@ (800bd68 <HAL_DMA_Start_IT+0x218>)
 800bbfe:	4293      	cmp	r3, r2
 800bc00:	d01d      	beq.n	800bc3e <HAL_DMA_Start_IT+0xee>
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	4a59      	ldr	r2, [pc, #356]	@ (800bd6c <HAL_DMA_Start_IT+0x21c>)
 800bc08:	4293      	cmp	r3, r2
 800bc0a:	d018      	beq.n	800bc3e <HAL_DMA_Start_IT+0xee>
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	4a57      	ldr	r2, [pc, #348]	@ (800bd70 <HAL_DMA_Start_IT+0x220>)
 800bc12:	4293      	cmp	r3, r2
 800bc14:	d013      	beq.n	800bc3e <HAL_DMA_Start_IT+0xee>
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	4a56      	ldr	r2, [pc, #344]	@ (800bd74 <HAL_DMA_Start_IT+0x224>)
 800bc1c:	4293      	cmp	r3, r2
 800bc1e:	d00e      	beq.n	800bc3e <HAL_DMA_Start_IT+0xee>
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	4a54      	ldr	r2, [pc, #336]	@ (800bd78 <HAL_DMA_Start_IT+0x228>)
 800bc26:	4293      	cmp	r3, r2
 800bc28:	d009      	beq.n	800bc3e <HAL_DMA_Start_IT+0xee>
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	4a53      	ldr	r2, [pc, #332]	@ (800bd7c <HAL_DMA_Start_IT+0x22c>)
 800bc30:	4293      	cmp	r3, r2
 800bc32:	d004      	beq.n	800bc3e <HAL_DMA_Start_IT+0xee>
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	4a51      	ldr	r2, [pc, #324]	@ (800bd80 <HAL_DMA_Start_IT+0x230>)
 800bc3a:	4293      	cmp	r3, r2
 800bc3c:	d108      	bne.n	800bc50 <HAL_DMA_Start_IT+0x100>
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	681a      	ldr	r2, [r3, #0]
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	f022 0201 	bic.w	r2, r2, #1
 800bc4c:	601a      	str	r2, [r3, #0]
 800bc4e:	e007      	b.n	800bc60 <HAL_DMA_Start_IT+0x110>
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	681a      	ldr	r2, [r3, #0]
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	f022 0201 	bic.w	r2, r2, #1
 800bc5e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800bc60:	683b      	ldr	r3, [r7, #0]
 800bc62:	687a      	ldr	r2, [r7, #4]
 800bc64:	68b9      	ldr	r1, [r7, #8]
 800bc66:	68f8      	ldr	r0, [r7, #12]
 800bc68:	f001 fe84 	bl	800d974 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	4a34      	ldr	r2, [pc, #208]	@ (800bd44 <HAL_DMA_Start_IT+0x1f4>)
 800bc72:	4293      	cmp	r3, r2
 800bc74:	d04a      	beq.n	800bd0c <HAL_DMA_Start_IT+0x1bc>
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	4a33      	ldr	r2, [pc, #204]	@ (800bd48 <HAL_DMA_Start_IT+0x1f8>)
 800bc7c:	4293      	cmp	r3, r2
 800bc7e:	d045      	beq.n	800bd0c <HAL_DMA_Start_IT+0x1bc>
 800bc80:	68fb      	ldr	r3, [r7, #12]
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	4a31      	ldr	r2, [pc, #196]	@ (800bd4c <HAL_DMA_Start_IT+0x1fc>)
 800bc86:	4293      	cmp	r3, r2
 800bc88:	d040      	beq.n	800bd0c <HAL_DMA_Start_IT+0x1bc>
 800bc8a:	68fb      	ldr	r3, [r7, #12]
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	4a30      	ldr	r2, [pc, #192]	@ (800bd50 <HAL_DMA_Start_IT+0x200>)
 800bc90:	4293      	cmp	r3, r2
 800bc92:	d03b      	beq.n	800bd0c <HAL_DMA_Start_IT+0x1bc>
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	4a2e      	ldr	r2, [pc, #184]	@ (800bd54 <HAL_DMA_Start_IT+0x204>)
 800bc9a:	4293      	cmp	r3, r2
 800bc9c:	d036      	beq.n	800bd0c <HAL_DMA_Start_IT+0x1bc>
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	4a2d      	ldr	r2, [pc, #180]	@ (800bd58 <HAL_DMA_Start_IT+0x208>)
 800bca4:	4293      	cmp	r3, r2
 800bca6:	d031      	beq.n	800bd0c <HAL_DMA_Start_IT+0x1bc>
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	4a2b      	ldr	r2, [pc, #172]	@ (800bd5c <HAL_DMA_Start_IT+0x20c>)
 800bcae:	4293      	cmp	r3, r2
 800bcb0:	d02c      	beq.n	800bd0c <HAL_DMA_Start_IT+0x1bc>
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	4a2a      	ldr	r2, [pc, #168]	@ (800bd60 <HAL_DMA_Start_IT+0x210>)
 800bcb8:	4293      	cmp	r3, r2
 800bcba:	d027      	beq.n	800bd0c <HAL_DMA_Start_IT+0x1bc>
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	4a28      	ldr	r2, [pc, #160]	@ (800bd64 <HAL_DMA_Start_IT+0x214>)
 800bcc2:	4293      	cmp	r3, r2
 800bcc4:	d022      	beq.n	800bd0c <HAL_DMA_Start_IT+0x1bc>
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	4a27      	ldr	r2, [pc, #156]	@ (800bd68 <HAL_DMA_Start_IT+0x218>)
 800bccc:	4293      	cmp	r3, r2
 800bcce:	d01d      	beq.n	800bd0c <HAL_DMA_Start_IT+0x1bc>
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	4a25      	ldr	r2, [pc, #148]	@ (800bd6c <HAL_DMA_Start_IT+0x21c>)
 800bcd6:	4293      	cmp	r3, r2
 800bcd8:	d018      	beq.n	800bd0c <HAL_DMA_Start_IT+0x1bc>
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	4a24      	ldr	r2, [pc, #144]	@ (800bd70 <HAL_DMA_Start_IT+0x220>)
 800bce0:	4293      	cmp	r3, r2
 800bce2:	d013      	beq.n	800bd0c <HAL_DMA_Start_IT+0x1bc>
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	4a22      	ldr	r2, [pc, #136]	@ (800bd74 <HAL_DMA_Start_IT+0x224>)
 800bcea:	4293      	cmp	r3, r2
 800bcec:	d00e      	beq.n	800bd0c <HAL_DMA_Start_IT+0x1bc>
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	4a21      	ldr	r2, [pc, #132]	@ (800bd78 <HAL_DMA_Start_IT+0x228>)
 800bcf4:	4293      	cmp	r3, r2
 800bcf6:	d009      	beq.n	800bd0c <HAL_DMA_Start_IT+0x1bc>
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	4a1f      	ldr	r2, [pc, #124]	@ (800bd7c <HAL_DMA_Start_IT+0x22c>)
 800bcfe:	4293      	cmp	r3, r2
 800bd00:	d004      	beq.n	800bd0c <HAL_DMA_Start_IT+0x1bc>
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	4a1e      	ldr	r2, [pc, #120]	@ (800bd80 <HAL_DMA_Start_IT+0x230>)
 800bd08:	4293      	cmp	r3, r2
 800bd0a:	d101      	bne.n	800bd10 <HAL_DMA_Start_IT+0x1c0>
 800bd0c:	2301      	movs	r3, #1
 800bd0e:	e000      	b.n	800bd12 <HAL_DMA_Start_IT+0x1c2>
 800bd10:	2300      	movs	r3, #0
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d036      	beq.n	800bd84 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	f023 021e 	bic.w	r2, r3, #30
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	f042 0216 	orr.w	r2, r2, #22
 800bd28:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d03e      	beq.n	800bdb0 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	681a      	ldr	r2, [r3, #0]
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	f042 0208 	orr.w	r2, r2, #8
 800bd40:	601a      	str	r2, [r3, #0]
 800bd42:	e035      	b.n	800bdb0 <HAL_DMA_Start_IT+0x260>
 800bd44:	40020010 	.word	0x40020010
 800bd48:	40020028 	.word	0x40020028
 800bd4c:	40020040 	.word	0x40020040
 800bd50:	40020058 	.word	0x40020058
 800bd54:	40020070 	.word	0x40020070
 800bd58:	40020088 	.word	0x40020088
 800bd5c:	400200a0 	.word	0x400200a0
 800bd60:	400200b8 	.word	0x400200b8
 800bd64:	40020410 	.word	0x40020410
 800bd68:	40020428 	.word	0x40020428
 800bd6c:	40020440 	.word	0x40020440
 800bd70:	40020458 	.word	0x40020458
 800bd74:	40020470 	.word	0x40020470
 800bd78:	40020488 	.word	0x40020488
 800bd7c:	400204a0 	.word	0x400204a0
 800bd80:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	f023 020e 	bic.w	r2, r3, #14
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	f042 020a 	orr.w	r2, r2, #10
 800bd96:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d007      	beq.n	800bdb0 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	681a      	ldr	r2, [r3, #0]
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	f042 0204 	orr.w	r2, r2, #4
 800bdae:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	4a83      	ldr	r2, [pc, #524]	@ (800bfc4 <HAL_DMA_Start_IT+0x474>)
 800bdb6:	4293      	cmp	r3, r2
 800bdb8:	d072      	beq.n	800bea0 <HAL_DMA_Start_IT+0x350>
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	4a82      	ldr	r2, [pc, #520]	@ (800bfc8 <HAL_DMA_Start_IT+0x478>)
 800bdc0:	4293      	cmp	r3, r2
 800bdc2:	d06d      	beq.n	800bea0 <HAL_DMA_Start_IT+0x350>
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	4a80      	ldr	r2, [pc, #512]	@ (800bfcc <HAL_DMA_Start_IT+0x47c>)
 800bdca:	4293      	cmp	r3, r2
 800bdcc:	d068      	beq.n	800bea0 <HAL_DMA_Start_IT+0x350>
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	4a7f      	ldr	r2, [pc, #508]	@ (800bfd0 <HAL_DMA_Start_IT+0x480>)
 800bdd4:	4293      	cmp	r3, r2
 800bdd6:	d063      	beq.n	800bea0 <HAL_DMA_Start_IT+0x350>
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	4a7d      	ldr	r2, [pc, #500]	@ (800bfd4 <HAL_DMA_Start_IT+0x484>)
 800bdde:	4293      	cmp	r3, r2
 800bde0:	d05e      	beq.n	800bea0 <HAL_DMA_Start_IT+0x350>
 800bde2:	68fb      	ldr	r3, [r7, #12]
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	4a7c      	ldr	r2, [pc, #496]	@ (800bfd8 <HAL_DMA_Start_IT+0x488>)
 800bde8:	4293      	cmp	r3, r2
 800bdea:	d059      	beq.n	800bea0 <HAL_DMA_Start_IT+0x350>
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	4a7a      	ldr	r2, [pc, #488]	@ (800bfdc <HAL_DMA_Start_IT+0x48c>)
 800bdf2:	4293      	cmp	r3, r2
 800bdf4:	d054      	beq.n	800bea0 <HAL_DMA_Start_IT+0x350>
 800bdf6:	68fb      	ldr	r3, [r7, #12]
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	4a79      	ldr	r2, [pc, #484]	@ (800bfe0 <HAL_DMA_Start_IT+0x490>)
 800bdfc:	4293      	cmp	r3, r2
 800bdfe:	d04f      	beq.n	800bea0 <HAL_DMA_Start_IT+0x350>
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	4a77      	ldr	r2, [pc, #476]	@ (800bfe4 <HAL_DMA_Start_IT+0x494>)
 800be06:	4293      	cmp	r3, r2
 800be08:	d04a      	beq.n	800bea0 <HAL_DMA_Start_IT+0x350>
 800be0a:	68fb      	ldr	r3, [r7, #12]
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	4a76      	ldr	r2, [pc, #472]	@ (800bfe8 <HAL_DMA_Start_IT+0x498>)
 800be10:	4293      	cmp	r3, r2
 800be12:	d045      	beq.n	800bea0 <HAL_DMA_Start_IT+0x350>
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	4a74      	ldr	r2, [pc, #464]	@ (800bfec <HAL_DMA_Start_IT+0x49c>)
 800be1a:	4293      	cmp	r3, r2
 800be1c:	d040      	beq.n	800bea0 <HAL_DMA_Start_IT+0x350>
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	4a73      	ldr	r2, [pc, #460]	@ (800bff0 <HAL_DMA_Start_IT+0x4a0>)
 800be24:	4293      	cmp	r3, r2
 800be26:	d03b      	beq.n	800bea0 <HAL_DMA_Start_IT+0x350>
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	4a71      	ldr	r2, [pc, #452]	@ (800bff4 <HAL_DMA_Start_IT+0x4a4>)
 800be2e:	4293      	cmp	r3, r2
 800be30:	d036      	beq.n	800bea0 <HAL_DMA_Start_IT+0x350>
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	4a70      	ldr	r2, [pc, #448]	@ (800bff8 <HAL_DMA_Start_IT+0x4a8>)
 800be38:	4293      	cmp	r3, r2
 800be3a:	d031      	beq.n	800bea0 <HAL_DMA_Start_IT+0x350>
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	4a6e      	ldr	r2, [pc, #440]	@ (800bffc <HAL_DMA_Start_IT+0x4ac>)
 800be42:	4293      	cmp	r3, r2
 800be44:	d02c      	beq.n	800bea0 <HAL_DMA_Start_IT+0x350>
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	4a6d      	ldr	r2, [pc, #436]	@ (800c000 <HAL_DMA_Start_IT+0x4b0>)
 800be4c:	4293      	cmp	r3, r2
 800be4e:	d027      	beq.n	800bea0 <HAL_DMA_Start_IT+0x350>
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	4a6b      	ldr	r2, [pc, #428]	@ (800c004 <HAL_DMA_Start_IT+0x4b4>)
 800be56:	4293      	cmp	r3, r2
 800be58:	d022      	beq.n	800bea0 <HAL_DMA_Start_IT+0x350>
 800be5a:	68fb      	ldr	r3, [r7, #12]
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	4a6a      	ldr	r2, [pc, #424]	@ (800c008 <HAL_DMA_Start_IT+0x4b8>)
 800be60:	4293      	cmp	r3, r2
 800be62:	d01d      	beq.n	800bea0 <HAL_DMA_Start_IT+0x350>
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	4a68      	ldr	r2, [pc, #416]	@ (800c00c <HAL_DMA_Start_IT+0x4bc>)
 800be6a:	4293      	cmp	r3, r2
 800be6c:	d018      	beq.n	800bea0 <HAL_DMA_Start_IT+0x350>
 800be6e:	68fb      	ldr	r3, [r7, #12]
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	4a67      	ldr	r2, [pc, #412]	@ (800c010 <HAL_DMA_Start_IT+0x4c0>)
 800be74:	4293      	cmp	r3, r2
 800be76:	d013      	beq.n	800bea0 <HAL_DMA_Start_IT+0x350>
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	4a65      	ldr	r2, [pc, #404]	@ (800c014 <HAL_DMA_Start_IT+0x4c4>)
 800be7e:	4293      	cmp	r3, r2
 800be80:	d00e      	beq.n	800bea0 <HAL_DMA_Start_IT+0x350>
 800be82:	68fb      	ldr	r3, [r7, #12]
 800be84:	681b      	ldr	r3, [r3, #0]
 800be86:	4a64      	ldr	r2, [pc, #400]	@ (800c018 <HAL_DMA_Start_IT+0x4c8>)
 800be88:	4293      	cmp	r3, r2
 800be8a:	d009      	beq.n	800bea0 <HAL_DMA_Start_IT+0x350>
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	4a62      	ldr	r2, [pc, #392]	@ (800c01c <HAL_DMA_Start_IT+0x4cc>)
 800be92:	4293      	cmp	r3, r2
 800be94:	d004      	beq.n	800bea0 <HAL_DMA_Start_IT+0x350>
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	4a61      	ldr	r2, [pc, #388]	@ (800c020 <HAL_DMA_Start_IT+0x4d0>)
 800be9c:	4293      	cmp	r3, r2
 800be9e:	d101      	bne.n	800bea4 <HAL_DMA_Start_IT+0x354>
 800bea0:	2301      	movs	r3, #1
 800bea2:	e000      	b.n	800bea6 <HAL_DMA_Start_IT+0x356>
 800bea4:	2300      	movs	r3, #0
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d01a      	beq.n	800bee0 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d007      	beq.n	800bec8 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bebc:	681a      	ldr	r2, [r3, #0]
 800bebe:	68fb      	ldr	r3, [r7, #12]
 800bec0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bec2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800bec6:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800becc:	2b00      	cmp	r3, #0
 800bece:	d007      	beq.n	800bee0 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bed4:	681a      	ldr	r2, [r3, #0]
 800bed6:	68fb      	ldr	r3, [r7, #12]
 800bed8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800beda:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800bede:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	4a37      	ldr	r2, [pc, #220]	@ (800bfc4 <HAL_DMA_Start_IT+0x474>)
 800bee6:	4293      	cmp	r3, r2
 800bee8:	d04a      	beq.n	800bf80 <HAL_DMA_Start_IT+0x430>
 800beea:	68fb      	ldr	r3, [r7, #12]
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	4a36      	ldr	r2, [pc, #216]	@ (800bfc8 <HAL_DMA_Start_IT+0x478>)
 800bef0:	4293      	cmp	r3, r2
 800bef2:	d045      	beq.n	800bf80 <HAL_DMA_Start_IT+0x430>
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	4a34      	ldr	r2, [pc, #208]	@ (800bfcc <HAL_DMA_Start_IT+0x47c>)
 800befa:	4293      	cmp	r3, r2
 800befc:	d040      	beq.n	800bf80 <HAL_DMA_Start_IT+0x430>
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	4a33      	ldr	r2, [pc, #204]	@ (800bfd0 <HAL_DMA_Start_IT+0x480>)
 800bf04:	4293      	cmp	r3, r2
 800bf06:	d03b      	beq.n	800bf80 <HAL_DMA_Start_IT+0x430>
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	4a31      	ldr	r2, [pc, #196]	@ (800bfd4 <HAL_DMA_Start_IT+0x484>)
 800bf0e:	4293      	cmp	r3, r2
 800bf10:	d036      	beq.n	800bf80 <HAL_DMA_Start_IT+0x430>
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	4a30      	ldr	r2, [pc, #192]	@ (800bfd8 <HAL_DMA_Start_IT+0x488>)
 800bf18:	4293      	cmp	r3, r2
 800bf1a:	d031      	beq.n	800bf80 <HAL_DMA_Start_IT+0x430>
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	4a2e      	ldr	r2, [pc, #184]	@ (800bfdc <HAL_DMA_Start_IT+0x48c>)
 800bf22:	4293      	cmp	r3, r2
 800bf24:	d02c      	beq.n	800bf80 <HAL_DMA_Start_IT+0x430>
 800bf26:	68fb      	ldr	r3, [r7, #12]
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	4a2d      	ldr	r2, [pc, #180]	@ (800bfe0 <HAL_DMA_Start_IT+0x490>)
 800bf2c:	4293      	cmp	r3, r2
 800bf2e:	d027      	beq.n	800bf80 <HAL_DMA_Start_IT+0x430>
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	4a2b      	ldr	r2, [pc, #172]	@ (800bfe4 <HAL_DMA_Start_IT+0x494>)
 800bf36:	4293      	cmp	r3, r2
 800bf38:	d022      	beq.n	800bf80 <HAL_DMA_Start_IT+0x430>
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	4a2a      	ldr	r2, [pc, #168]	@ (800bfe8 <HAL_DMA_Start_IT+0x498>)
 800bf40:	4293      	cmp	r3, r2
 800bf42:	d01d      	beq.n	800bf80 <HAL_DMA_Start_IT+0x430>
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	4a28      	ldr	r2, [pc, #160]	@ (800bfec <HAL_DMA_Start_IT+0x49c>)
 800bf4a:	4293      	cmp	r3, r2
 800bf4c:	d018      	beq.n	800bf80 <HAL_DMA_Start_IT+0x430>
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	4a27      	ldr	r2, [pc, #156]	@ (800bff0 <HAL_DMA_Start_IT+0x4a0>)
 800bf54:	4293      	cmp	r3, r2
 800bf56:	d013      	beq.n	800bf80 <HAL_DMA_Start_IT+0x430>
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	4a25      	ldr	r2, [pc, #148]	@ (800bff4 <HAL_DMA_Start_IT+0x4a4>)
 800bf5e:	4293      	cmp	r3, r2
 800bf60:	d00e      	beq.n	800bf80 <HAL_DMA_Start_IT+0x430>
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	4a24      	ldr	r2, [pc, #144]	@ (800bff8 <HAL_DMA_Start_IT+0x4a8>)
 800bf68:	4293      	cmp	r3, r2
 800bf6a:	d009      	beq.n	800bf80 <HAL_DMA_Start_IT+0x430>
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	4a22      	ldr	r2, [pc, #136]	@ (800bffc <HAL_DMA_Start_IT+0x4ac>)
 800bf72:	4293      	cmp	r3, r2
 800bf74:	d004      	beq.n	800bf80 <HAL_DMA_Start_IT+0x430>
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	4a21      	ldr	r2, [pc, #132]	@ (800c000 <HAL_DMA_Start_IT+0x4b0>)
 800bf7c:	4293      	cmp	r3, r2
 800bf7e:	d108      	bne.n	800bf92 <HAL_DMA_Start_IT+0x442>
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	681a      	ldr	r2, [r3, #0]
 800bf86:	68fb      	ldr	r3, [r7, #12]
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	f042 0201 	orr.w	r2, r2, #1
 800bf8e:	601a      	str	r2, [r3, #0]
 800bf90:	e012      	b.n	800bfb8 <HAL_DMA_Start_IT+0x468>
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	681a      	ldr	r2, [r3, #0]
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	f042 0201 	orr.w	r2, r2, #1
 800bfa0:	601a      	str	r2, [r3, #0]
 800bfa2:	e009      	b.n	800bfb8 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800bfaa:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	2200      	movs	r2, #0
 800bfb0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 800bfb4:	2301      	movs	r3, #1
 800bfb6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800bfb8:	7dfb      	ldrb	r3, [r7, #23]
}
 800bfba:	4618      	mov	r0, r3
 800bfbc:	3718      	adds	r7, #24
 800bfbe:	46bd      	mov	sp, r7
 800bfc0:	bd80      	pop	{r7, pc}
 800bfc2:	bf00      	nop
 800bfc4:	40020010 	.word	0x40020010
 800bfc8:	40020028 	.word	0x40020028
 800bfcc:	40020040 	.word	0x40020040
 800bfd0:	40020058 	.word	0x40020058
 800bfd4:	40020070 	.word	0x40020070
 800bfd8:	40020088 	.word	0x40020088
 800bfdc:	400200a0 	.word	0x400200a0
 800bfe0:	400200b8 	.word	0x400200b8
 800bfe4:	40020410 	.word	0x40020410
 800bfe8:	40020428 	.word	0x40020428
 800bfec:	40020440 	.word	0x40020440
 800bff0:	40020458 	.word	0x40020458
 800bff4:	40020470 	.word	0x40020470
 800bff8:	40020488 	.word	0x40020488
 800bffc:	400204a0 	.word	0x400204a0
 800c000:	400204b8 	.word	0x400204b8
 800c004:	58025408 	.word	0x58025408
 800c008:	5802541c 	.word	0x5802541c
 800c00c:	58025430 	.word	0x58025430
 800c010:	58025444 	.word	0x58025444
 800c014:	58025458 	.word	0x58025458
 800c018:	5802546c 	.word	0x5802546c
 800c01c:	58025480 	.word	0x58025480
 800c020:	58025494 	.word	0x58025494

0800c024 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800c024:	b580      	push	{r7, lr}
 800c026:	b086      	sub	sp, #24
 800c028:	af00      	add	r7, sp, #0
 800c02a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 800c02c:	f7fd f902 	bl	8009234 <HAL_GetTick>
 800c030:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	2b00      	cmp	r3, #0
 800c036:	d101      	bne.n	800c03c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800c038:	2301      	movs	r3, #1
 800c03a:	e2dc      	b.n	800c5f6 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800c042:	b2db      	uxtb	r3, r3
 800c044:	2b02      	cmp	r3, #2
 800c046:	d008      	beq.n	800c05a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	2280      	movs	r2, #128	@ 0x80
 800c04c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	2200      	movs	r2, #0
 800c052:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 800c056:	2301      	movs	r3, #1
 800c058:	e2cd      	b.n	800c5f6 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	4a76      	ldr	r2, [pc, #472]	@ (800c238 <HAL_DMA_Abort+0x214>)
 800c060:	4293      	cmp	r3, r2
 800c062:	d04a      	beq.n	800c0fa <HAL_DMA_Abort+0xd6>
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	4a74      	ldr	r2, [pc, #464]	@ (800c23c <HAL_DMA_Abort+0x218>)
 800c06a:	4293      	cmp	r3, r2
 800c06c:	d045      	beq.n	800c0fa <HAL_DMA_Abort+0xd6>
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	4a73      	ldr	r2, [pc, #460]	@ (800c240 <HAL_DMA_Abort+0x21c>)
 800c074:	4293      	cmp	r3, r2
 800c076:	d040      	beq.n	800c0fa <HAL_DMA_Abort+0xd6>
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	4a71      	ldr	r2, [pc, #452]	@ (800c244 <HAL_DMA_Abort+0x220>)
 800c07e:	4293      	cmp	r3, r2
 800c080:	d03b      	beq.n	800c0fa <HAL_DMA_Abort+0xd6>
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	4a70      	ldr	r2, [pc, #448]	@ (800c248 <HAL_DMA_Abort+0x224>)
 800c088:	4293      	cmp	r3, r2
 800c08a:	d036      	beq.n	800c0fa <HAL_DMA_Abort+0xd6>
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	4a6e      	ldr	r2, [pc, #440]	@ (800c24c <HAL_DMA_Abort+0x228>)
 800c092:	4293      	cmp	r3, r2
 800c094:	d031      	beq.n	800c0fa <HAL_DMA_Abort+0xd6>
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	4a6d      	ldr	r2, [pc, #436]	@ (800c250 <HAL_DMA_Abort+0x22c>)
 800c09c:	4293      	cmp	r3, r2
 800c09e:	d02c      	beq.n	800c0fa <HAL_DMA_Abort+0xd6>
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	4a6b      	ldr	r2, [pc, #428]	@ (800c254 <HAL_DMA_Abort+0x230>)
 800c0a6:	4293      	cmp	r3, r2
 800c0a8:	d027      	beq.n	800c0fa <HAL_DMA_Abort+0xd6>
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	4a6a      	ldr	r2, [pc, #424]	@ (800c258 <HAL_DMA_Abort+0x234>)
 800c0b0:	4293      	cmp	r3, r2
 800c0b2:	d022      	beq.n	800c0fa <HAL_DMA_Abort+0xd6>
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	4a68      	ldr	r2, [pc, #416]	@ (800c25c <HAL_DMA_Abort+0x238>)
 800c0ba:	4293      	cmp	r3, r2
 800c0bc:	d01d      	beq.n	800c0fa <HAL_DMA_Abort+0xd6>
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	4a67      	ldr	r2, [pc, #412]	@ (800c260 <HAL_DMA_Abort+0x23c>)
 800c0c4:	4293      	cmp	r3, r2
 800c0c6:	d018      	beq.n	800c0fa <HAL_DMA_Abort+0xd6>
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	4a65      	ldr	r2, [pc, #404]	@ (800c264 <HAL_DMA_Abort+0x240>)
 800c0ce:	4293      	cmp	r3, r2
 800c0d0:	d013      	beq.n	800c0fa <HAL_DMA_Abort+0xd6>
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	4a64      	ldr	r2, [pc, #400]	@ (800c268 <HAL_DMA_Abort+0x244>)
 800c0d8:	4293      	cmp	r3, r2
 800c0da:	d00e      	beq.n	800c0fa <HAL_DMA_Abort+0xd6>
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	4a62      	ldr	r2, [pc, #392]	@ (800c26c <HAL_DMA_Abort+0x248>)
 800c0e2:	4293      	cmp	r3, r2
 800c0e4:	d009      	beq.n	800c0fa <HAL_DMA_Abort+0xd6>
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	4a61      	ldr	r2, [pc, #388]	@ (800c270 <HAL_DMA_Abort+0x24c>)
 800c0ec:	4293      	cmp	r3, r2
 800c0ee:	d004      	beq.n	800c0fa <HAL_DMA_Abort+0xd6>
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	4a5f      	ldr	r2, [pc, #380]	@ (800c274 <HAL_DMA_Abort+0x250>)
 800c0f6:	4293      	cmp	r3, r2
 800c0f8:	d101      	bne.n	800c0fe <HAL_DMA_Abort+0xda>
 800c0fa:	2301      	movs	r3, #1
 800c0fc:	e000      	b.n	800c100 <HAL_DMA_Abort+0xdc>
 800c0fe:	2300      	movs	r3, #0
 800c100:	2b00      	cmp	r3, #0
 800c102:	d013      	beq.n	800c12c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	681a      	ldr	r2, [r3, #0]
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	f022 021e 	bic.w	r2, r2, #30
 800c112:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	695a      	ldr	r2, [r3, #20]
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800c122:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	617b      	str	r3, [r7, #20]
 800c12a:	e00a      	b.n	800c142 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	681a      	ldr	r2, [r3, #0]
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	f022 020e 	bic.w	r2, r2, #14
 800c13a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	4a3c      	ldr	r2, [pc, #240]	@ (800c238 <HAL_DMA_Abort+0x214>)
 800c148:	4293      	cmp	r3, r2
 800c14a:	d072      	beq.n	800c232 <HAL_DMA_Abort+0x20e>
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	4a3a      	ldr	r2, [pc, #232]	@ (800c23c <HAL_DMA_Abort+0x218>)
 800c152:	4293      	cmp	r3, r2
 800c154:	d06d      	beq.n	800c232 <HAL_DMA_Abort+0x20e>
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	4a39      	ldr	r2, [pc, #228]	@ (800c240 <HAL_DMA_Abort+0x21c>)
 800c15c:	4293      	cmp	r3, r2
 800c15e:	d068      	beq.n	800c232 <HAL_DMA_Abort+0x20e>
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	4a37      	ldr	r2, [pc, #220]	@ (800c244 <HAL_DMA_Abort+0x220>)
 800c166:	4293      	cmp	r3, r2
 800c168:	d063      	beq.n	800c232 <HAL_DMA_Abort+0x20e>
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	4a36      	ldr	r2, [pc, #216]	@ (800c248 <HAL_DMA_Abort+0x224>)
 800c170:	4293      	cmp	r3, r2
 800c172:	d05e      	beq.n	800c232 <HAL_DMA_Abort+0x20e>
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	4a34      	ldr	r2, [pc, #208]	@ (800c24c <HAL_DMA_Abort+0x228>)
 800c17a:	4293      	cmp	r3, r2
 800c17c:	d059      	beq.n	800c232 <HAL_DMA_Abort+0x20e>
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	4a33      	ldr	r2, [pc, #204]	@ (800c250 <HAL_DMA_Abort+0x22c>)
 800c184:	4293      	cmp	r3, r2
 800c186:	d054      	beq.n	800c232 <HAL_DMA_Abort+0x20e>
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	4a31      	ldr	r2, [pc, #196]	@ (800c254 <HAL_DMA_Abort+0x230>)
 800c18e:	4293      	cmp	r3, r2
 800c190:	d04f      	beq.n	800c232 <HAL_DMA_Abort+0x20e>
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	4a30      	ldr	r2, [pc, #192]	@ (800c258 <HAL_DMA_Abort+0x234>)
 800c198:	4293      	cmp	r3, r2
 800c19a:	d04a      	beq.n	800c232 <HAL_DMA_Abort+0x20e>
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	681b      	ldr	r3, [r3, #0]
 800c1a0:	4a2e      	ldr	r2, [pc, #184]	@ (800c25c <HAL_DMA_Abort+0x238>)
 800c1a2:	4293      	cmp	r3, r2
 800c1a4:	d045      	beq.n	800c232 <HAL_DMA_Abort+0x20e>
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	4a2d      	ldr	r2, [pc, #180]	@ (800c260 <HAL_DMA_Abort+0x23c>)
 800c1ac:	4293      	cmp	r3, r2
 800c1ae:	d040      	beq.n	800c232 <HAL_DMA_Abort+0x20e>
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	4a2b      	ldr	r2, [pc, #172]	@ (800c264 <HAL_DMA_Abort+0x240>)
 800c1b6:	4293      	cmp	r3, r2
 800c1b8:	d03b      	beq.n	800c232 <HAL_DMA_Abort+0x20e>
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	4a2a      	ldr	r2, [pc, #168]	@ (800c268 <HAL_DMA_Abort+0x244>)
 800c1c0:	4293      	cmp	r3, r2
 800c1c2:	d036      	beq.n	800c232 <HAL_DMA_Abort+0x20e>
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	4a28      	ldr	r2, [pc, #160]	@ (800c26c <HAL_DMA_Abort+0x248>)
 800c1ca:	4293      	cmp	r3, r2
 800c1cc:	d031      	beq.n	800c232 <HAL_DMA_Abort+0x20e>
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	4a27      	ldr	r2, [pc, #156]	@ (800c270 <HAL_DMA_Abort+0x24c>)
 800c1d4:	4293      	cmp	r3, r2
 800c1d6:	d02c      	beq.n	800c232 <HAL_DMA_Abort+0x20e>
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	4a25      	ldr	r2, [pc, #148]	@ (800c274 <HAL_DMA_Abort+0x250>)
 800c1de:	4293      	cmp	r3, r2
 800c1e0:	d027      	beq.n	800c232 <HAL_DMA_Abort+0x20e>
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	4a24      	ldr	r2, [pc, #144]	@ (800c278 <HAL_DMA_Abort+0x254>)
 800c1e8:	4293      	cmp	r3, r2
 800c1ea:	d022      	beq.n	800c232 <HAL_DMA_Abort+0x20e>
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	4a22      	ldr	r2, [pc, #136]	@ (800c27c <HAL_DMA_Abort+0x258>)
 800c1f2:	4293      	cmp	r3, r2
 800c1f4:	d01d      	beq.n	800c232 <HAL_DMA_Abort+0x20e>
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	4a21      	ldr	r2, [pc, #132]	@ (800c280 <HAL_DMA_Abort+0x25c>)
 800c1fc:	4293      	cmp	r3, r2
 800c1fe:	d018      	beq.n	800c232 <HAL_DMA_Abort+0x20e>
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	4a1f      	ldr	r2, [pc, #124]	@ (800c284 <HAL_DMA_Abort+0x260>)
 800c206:	4293      	cmp	r3, r2
 800c208:	d013      	beq.n	800c232 <HAL_DMA_Abort+0x20e>
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	4a1e      	ldr	r2, [pc, #120]	@ (800c288 <HAL_DMA_Abort+0x264>)
 800c210:	4293      	cmp	r3, r2
 800c212:	d00e      	beq.n	800c232 <HAL_DMA_Abort+0x20e>
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	681b      	ldr	r3, [r3, #0]
 800c218:	4a1c      	ldr	r2, [pc, #112]	@ (800c28c <HAL_DMA_Abort+0x268>)
 800c21a:	4293      	cmp	r3, r2
 800c21c:	d009      	beq.n	800c232 <HAL_DMA_Abort+0x20e>
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	4a1b      	ldr	r2, [pc, #108]	@ (800c290 <HAL_DMA_Abort+0x26c>)
 800c224:	4293      	cmp	r3, r2
 800c226:	d004      	beq.n	800c232 <HAL_DMA_Abort+0x20e>
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	4a19      	ldr	r2, [pc, #100]	@ (800c294 <HAL_DMA_Abort+0x270>)
 800c22e:	4293      	cmp	r3, r2
 800c230:	d132      	bne.n	800c298 <HAL_DMA_Abort+0x274>
 800c232:	2301      	movs	r3, #1
 800c234:	e031      	b.n	800c29a <HAL_DMA_Abort+0x276>
 800c236:	bf00      	nop
 800c238:	40020010 	.word	0x40020010
 800c23c:	40020028 	.word	0x40020028
 800c240:	40020040 	.word	0x40020040
 800c244:	40020058 	.word	0x40020058
 800c248:	40020070 	.word	0x40020070
 800c24c:	40020088 	.word	0x40020088
 800c250:	400200a0 	.word	0x400200a0
 800c254:	400200b8 	.word	0x400200b8
 800c258:	40020410 	.word	0x40020410
 800c25c:	40020428 	.word	0x40020428
 800c260:	40020440 	.word	0x40020440
 800c264:	40020458 	.word	0x40020458
 800c268:	40020470 	.word	0x40020470
 800c26c:	40020488 	.word	0x40020488
 800c270:	400204a0 	.word	0x400204a0
 800c274:	400204b8 	.word	0x400204b8
 800c278:	58025408 	.word	0x58025408
 800c27c:	5802541c 	.word	0x5802541c
 800c280:	58025430 	.word	0x58025430
 800c284:	58025444 	.word	0x58025444
 800c288:	58025458 	.word	0x58025458
 800c28c:	5802546c 	.word	0x5802546c
 800c290:	58025480 	.word	0x58025480
 800c294:	58025494 	.word	0x58025494
 800c298:	2300      	movs	r3, #0
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	d007      	beq.n	800c2ae <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c2a2:	681a      	ldr	r2, [r3, #0]
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c2a8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800c2ac:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	4a6d      	ldr	r2, [pc, #436]	@ (800c468 <HAL_DMA_Abort+0x444>)
 800c2b4:	4293      	cmp	r3, r2
 800c2b6:	d04a      	beq.n	800c34e <HAL_DMA_Abort+0x32a>
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	4a6b      	ldr	r2, [pc, #428]	@ (800c46c <HAL_DMA_Abort+0x448>)
 800c2be:	4293      	cmp	r3, r2
 800c2c0:	d045      	beq.n	800c34e <HAL_DMA_Abort+0x32a>
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	4a6a      	ldr	r2, [pc, #424]	@ (800c470 <HAL_DMA_Abort+0x44c>)
 800c2c8:	4293      	cmp	r3, r2
 800c2ca:	d040      	beq.n	800c34e <HAL_DMA_Abort+0x32a>
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	4a68      	ldr	r2, [pc, #416]	@ (800c474 <HAL_DMA_Abort+0x450>)
 800c2d2:	4293      	cmp	r3, r2
 800c2d4:	d03b      	beq.n	800c34e <HAL_DMA_Abort+0x32a>
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	4a67      	ldr	r2, [pc, #412]	@ (800c478 <HAL_DMA_Abort+0x454>)
 800c2dc:	4293      	cmp	r3, r2
 800c2de:	d036      	beq.n	800c34e <HAL_DMA_Abort+0x32a>
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	4a65      	ldr	r2, [pc, #404]	@ (800c47c <HAL_DMA_Abort+0x458>)
 800c2e6:	4293      	cmp	r3, r2
 800c2e8:	d031      	beq.n	800c34e <HAL_DMA_Abort+0x32a>
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	681b      	ldr	r3, [r3, #0]
 800c2ee:	4a64      	ldr	r2, [pc, #400]	@ (800c480 <HAL_DMA_Abort+0x45c>)
 800c2f0:	4293      	cmp	r3, r2
 800c2f2:	d02c      	beq.n	800c34e <HAL_DMA_Abort+0x32a>
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	4a62      	ldr	r2, [pc, #392]	@ (800c484 <HAL_DMA_Abort+0x460>)
 800c2fa:	4293      	cmp	r3, r2
 800c2fc:	d027      	beq.n	800c34e <HAL_DMA_Abort+0x32a>
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	4a61      	ldr	r2, [pc, #388]	@ (800c488 <HAL_DMA_Abort+0x464>)
 800c304:	4293      	cmp	r3, r2
 800c306:	d022      	beq.n	800c34e <HAL_DMA_Abort+0x32a>
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	4a5f      	ldr	r2, [pc, #380]	@ (800c48c <HAL_DMA_Abort+0x468>)
 800c30e:	4293      	cmp	r3, r2
 800c310:	d01d      	beq.n	800c34e <HAL_DMA_Abort+0x32a>
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	4a5e      	ldr	r2, [pc, #376]	@ (800c490 <HAL_DMA_Abort+0x46c>)
 800c318:	4293      	cmp	r3, r2
 800c31a:	d018      	beq.n	800c34e <HAL_DMA_Abort+0x32a>
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	4a5c      	ldr	r2, [pc, #368]	@ (800c494 <HAL_DMA_Abort+0x470>)
 800c322:	4293      	cmp	r3, r2
 800c324:	d013      	beq.n	800c34e <HAL_DMA_Abort+0x32a>
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	4a5b      	ldr	r2, [pc, #364]	@ (800c498 <HAL_DMA_Abort+0x474>)
 800c32c:	4293      	cmp	r3, r2
 800c32e:	d00e      	beq.n	800c34e <HAL_DMA_Abort+0x32a>
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	4a59      	ldr	r2, [pc, #356]	@ (800c49c <HAL_DMA_Abort+0x478>)
 800c336:	4293      	cmp	r3, r2
 800c338:	d009      	beq.n	800c34e <HAL_DMA_Abort+0x32a>
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	4a58      	ldr	r2, [pc, #352]	@ (800c4a0 <HAL_DMA_Abort+0x47c>)
 800c340:	4293      	cmp	r3, r2
 800c342:	d004      	beq.n	800c34e <HAL_DMA_Abort+0x32a>
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	4a56      	ldr	r2, [pc, #344]	@ (800c4a4 <HAL_DMA_Abort+0x480>)
 800c34a:	4293      	cmp	r3, r2
 800c34c:	d108      	bne.n	800c360 <HAL_DMA_Abort+0x33c>
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	681a      	ldr	r2, [r3, #0]
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	f022 0201 	bic.w	r2, r2, #1
 800c35c:	601a      	str	r2, [r3, #0]
 800c35e:	e007      	b.n	800c370 <HAL_DMA_Abort+0x34c>
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	681a      	ldr	r2, [r3, #0]
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	f022 0201 	bic.w	r2, r2, #1
 800c36e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800c370:	e013      	b.n	800c39a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800c372:	f7fc ff5f 	bl	8009234 <HAL_GetTick>
 800c376:	4602      	mov	r2, r0
 800c378:	693b      	ldr	r3, [r7, #16]
 800c37a:	1ad3      	subs	r3, r2, r3
 800c37c:	2b05      	cmp	r3, #5
 800c37e:	d90c      	bls.n	800c39a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	2220      	movs	r2, #32
 800c384:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	2203      	movs	r2, #3
 800c38a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	2200      	movs	r2, #0
 800c392:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 800c396:	2301      	movs	r3, #1
 800c398:	e12d      	b.n	800c5f6 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800c39a:	697b      	ldr	r3, [r7, #20]
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	f003 0301 	and.w	r3, r3, #1
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d1e5      	bne.n	800c372 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	4a2f      	ldr	r2, [pc, #188]	@ (800c468 <HAL_DMA_Abort+0x444>)
 800c3ac:	4293      	cmp	r3, r2
 800c3ae:	d04a      	beq.n	800c446 <HAL_DMA_Abort+0x422>
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	4a2d      	ldr	r2, [pc, #180]	@ (800c46c <HAL_DMA_Abort+0x448>)
 800c3b6:	4293      	cmp	r3, r2
 800c3b8:	d045      	beq.n	800c446 <HAL_DMA_Abort+0x422>
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	4a2c      	ldr	r2, [pc, #176]	@ (800c470 <HAL_DMA_Abort+0x44c>)
 800c3c0:	4293      	cmp	r3, r2
 800c3c2:	d040      	beq.n	800c446 <HAL_DMA_Abort+0x422>
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	4a2a      	ldr	r2, [pc, #168]	@ (800c474 <HAL_DMA_Abort+0x450>)
 800c3ca:	4293      	cmp	r3, r2
 800c3cc:	d03b      	beq.n	800c446 <HAL_DMA_Abort+0x422>
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	4a29      	ldr	r2, [pc, #164]	@ (800c478 <HAL_DMA_Abort+0x454>)
 800c3d4:	4293      	cmp	r3, r2
 800c3d6:	d036      	beq.n	800c446 <HAL_DMA_Abort+0x422>
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	4a27      	ldr	r2, [pc, #156]	@ (800c47c <HAL_DMA_Abort+0x458>)
 800c3de:	4293      	cmp	r3, r2
 800c3e0:	d031      	beq.n	800c446 <HAL_DMA_Abort+0x422>
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	4a26      	ldr	r2, [pc, #152]	@ (800c480 <HAL_DMA_Abort+0x45c>)
 800c3e8:	4293      	cmp	r3, r2
 800c3ea:	d02c      	beq.n	800c446 <HAL_DMA_Abort+0x422>
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	4a24      	ldr	r2, [pc, #144]	@ (800c484 <HAL_DMA_Abort+0x460>)
 800c3f2:	4293      	cmp	r3, r2
 800c3f4:	d027      	beq.n	800c446 <HAL_DMA_Abort+0x422>
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	4a23      	ldr	r2, [pc, #140]	@ (800c488 <HAL_DMA_Abort+0x464>)
 800c3fc:	4293      	cmp	r3, r2
 800c3fe:	d022      	beq.n	800c446 <HAL_DMA_Abort+0x422>
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	4a21      	ldr	r2, [pc, #132]	@ (800c48c <HAL_DMA_Abort+0x468>)
 800c406:	4293      	cmp	r3, r2
 800c408:	d01d      	beq.n	800c446 <HAL_DMA_Abort+0x422>
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	4a20      	ldr	r2, [pc, #128]	@ (800c490 <HAL_DMA_Abort+0x46c>)
 800c410:	4293      	cmp	r3, r2
 800c412:	d018      	beq.n	800c446 <HAL_DMA_Abort+0x422>
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	4a1e      	ldr	r2, [pc, #120]	@ (800c494 <HAL_DMA_Abort+0x470>)
 800c41a:	4293      	cmp	r3, r2
 800c41c:	d013      	beq.n	800c446 <HAL_DMA_Abort+0x422>
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	4a1d      	ldr	r2, [pc, #116]	@ (800c498 <HAL_DMA_Abort+0x474>)
 800c424:	4293      	cmp	r3, r2
 800c426:	d00e      	beq.n	800c446 <HAL_DMA_Abort+0x422>
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	4a1b      	ldr	r2, [pc, #108]	@ (800c49c <HAL_DMA_Abort+0x478>)
 800c42e:	4293      	cmp	r3, r2
 800c430:	d009      	beq.n	800c446 <HAL_DMA_Abort+0x422>
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	4a1a      	ldr	r2, [pc, #104]	@ (800c4a0 <HAL_DMA_Abort+0x47c>)
 800c438:	4293      	cmp	r3, r2
 800c43a:	d004      	beq.n	800c446 <HAL_DMA_Abort+0x422>
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	681b      	ldr	r3, [r3, #0]
 800c440:	4a18      	ldr	r2, [pc, #96]	@ (800c4a4 <HAL_DMA_Abort+0x480>)
 800c442:	4293      	cmp	r3, r2
 800c444:	d101      	bne.n	800c44a <HAL_DMA_Abort+0x426>
 800c446:	2301      	movs	r3, #1
 800c448:	e000      	b.n	800c44c <HAL_DMA_Abort+0x428>
 800c44a:	2300      	movs	r3, #0
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d02b      	beq.n	800c4a8 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c454:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c45a:	f003 031f 	and.w	r3, r3, #31
 800c45e:	223f      	movs	r2, #63	@ 0x3f
 800c460:	409a      	lsls	r2, r3
 800c462:	68bb      	ldr	r3, [r7, #8]
 800c464:	609a      	str	r2, [r3, #8]
 800c466:	e02a      	b.n	800c4be <HAL_DMA_Abort+0x49a>
 800c468:	40020010 	.word	0x40020010
 800c46c:	40020028 	.word	0x40020028
 800c470:	40020040 	.word	0x40020040
 800c474:	40020058 	.word	0x40020058
 800c478:	40020070 	.word	0x40020070
 800c47c:	40020088 	.word	0x40020088
 800c480:	400200a0 	.word	0x400200a0
 800c484:	400200b8 	.word	0x400200b8
 800c488:	40020410 	.word	0x40020410
 800c48c:	40020428 	.word	0x40020428
 800c490:	40020440 	.word	0x40020440
 800c494:	40020458 	.word	0x40020458
 800c498:	40020470 	.word	0x40020470
 800c49c:	40020488 	.word	0x40020488
 800c4a0:	400204a0 	.word	0x400204a0
 800c4a4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c4ac:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c4b2:	f003 031f 	and.w	r3, r3, #31
 800c4b6:	2201      	movs	r2, #1
 800c4b8:	409a      	lsls	r2, r3
 800c4ba:	68fb      	ldr	r3, [r7, #12]
 800c4bc:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	4a4f      	ldr	r2, [pc, #316]	@ (800c600 <HAL_DMA_Abort+0x5dc>)
 800c4c4:	4293      	cmp	r3, r2
 800c4c6:	d072      	beq.n	800c5ae <HAL_DMA_Abort+0x58a>
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	4a4d      	ldr	r2, [pc, #308]	@ (800c604 <HAL_DMA_Abort+0x5e0>)
 800c4ce:	4293      	cmp	r3, r2
 800c4d0:	d06d      	beq.n	800c5ae <HAL_DMA_Abort+0x58a>
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	4a4c      	ldr	r2, [pc, #304]	@ (800c608 <HAL_DMA_Abort+0x5e4>)
 800c4d8:	4293      	cmp	r3, r2
 800c4da:	d068      	beq.n	800c5ae <HAL_DMA_Abort+0x58a>
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	4a4a      	ldr	r2, [pc, #296]	@ (800c60c <HAL_DMA_Abort+0x5e8>)
 800c4e2:	4293      	cmp	r3, r2
 800c4e4:	d063      	beq.n	800c5ae <HAL_DMA_Abort+0x58a>
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	4a49      	ldr	r2, [pc, #292]	@ (800c610 <HAL_DMA_Abort+0x5ec>)
 800c4ec:	4293      	cmp	r3, r2
 800c4ee:	d05e      	beq.n	800c5ae <HAL_DMA_Abort+0x58a>
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	4a47      	ldr	r2, [pc, #284]	@ (800c614 <HAL_DMA_Abort+0x5f0>)
 800c4f6:	4293      	cmp	r3, r2
 800c4f8:	d059      	beq.n	800c5ae <HAL_DMA_Abort+0x58a>
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	4a46      	ldr	r2, [pc, #280]	@ (800c618 <HAL_DMA_Abort+0x5f4>)
 800c500:	4293      	cmp	r3, r2
 800c502:	d054      	beq.n	800c5ae <HAL_DMA_Abort+0x58a>
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	4a44      	ldr	r2, [pc, #272]	@ (800c61c <HAL_DMA_Abort+0x5f8>)
 800c50a:	4293      	cmp	r3, r2
 800c50c:	d04f      	beq.n	800c5ae <HAL_DMA_Abort+0x58a>
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	4a43      	ldr	r2, [pc, #268]	@ (800c620 <HAL_DMA_Abort+0x5fc>)
 800c514:	4293      	cmp	r3, r2
 800c516:	d04a      	beq.n	800c5ae <HAL_DMA_Abort+0x58a>
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	4a41      	ldr	r2, [pc, #260]	@ (800c624 <HAL_DMA_Abort+0x600>)
 800c51e:	4293      	cmp	r3, r2
 800c520:	d045      	beq.n	800c5ae <HAL_DMA_Abort+0x58a>
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	4a40      	ldr	r2, [pc, #256]	@ (800c628 <HAL_DMA_Abort+0x604>)
 800c528:	4293      	cmp	r3, r2
 800c52a:	d040      	beq.n	800c5ae <HAL_DMA_Abort+0x58a>
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	4a3e      	ldr	r2, [pc, #248]	@ (800c62c <HAL_DMA_Abort+0x608>)
 800c532:	4293      	cmp	r3, r2
 800c534:	d03b      	beq.n	800c5ae <HAL_DMA_Abort+0x58a>
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	4a3d      	ldr	r2, [pc, #244]	@ (800c630 <HAL_DMA_Abort+0x60c>)
 800c53c:	4293      	cmp	r3, r2
 800c53e:	d036      	beq.n	800c5ae <HAL_DMA_Abort+0x58a>
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	4a3b      	ldr	r2, [pc, #236]	@ (800c634 <HAL_DMA_Abort+0x610>)
 800c546:	4293      	cmp	r3, r2
 800c548:	d031      	beq.n	800c5ae <HAL_DMA_Abort+0x58a>
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	4a3a      	ldr	r2, [pc, #232]	@ (800c638 <HAL_DMA_Abort+0x614>)
 800c550:	4293      	cmp	r3, r2
 800c552:	d02c      	beq.n	800c5ae <HAL_DMA_Abort+0x58a>
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	4a38      	ldr	r2, [pc, #224]	@ (800c63c <HAL_DMA_Abort+0x618>)
 800c55a:	4293      	cmp	r3, r2
 800c55c:	d027      	beq.n	800c5ae <HAL_DMA_Abort+0x58a>
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	4a37      	ldr	r2, [pc, #220]	@ (800c640 <HAL_DMA_Abort+0x61c>)
 800c564:	4293      	cmp	r3, r2
 800c566:	d022      	beq.n	800c5ae <HAL_DMA_Abort+0x58a>
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	4a35      	ldr	r2, [pc, #212]	@ (800c644 <HAL_DMA_Abort+0x620>)
 800c56e:	4293      	cmp	r3, r2
 800c570:	d01d      	beq.n	800c5ae <HAL_DMA_Abort+0x58a>
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	4a34      	ldr	r2, [pc, #208]	@ (800c648 <HAL_DMA_Abort+0x624>)
 800c578:	4293      	cmp	r3, r2
 800c57a:	d018      	beq.n	800c5ae <HAL_DMA_Abort+0x58a>
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	4a32      	ldr	r2, [pc, #200]	@ (800c64c <HAL_DMA_Abort+0x628>)
 800c582:	4293      	cmp	r3, r2
 800c584:	d013      	beq.n	800c5ae <HAL_DMA_Abort+0x58a>
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	4a31      	ldr	r2, [pc, #196]	@ (800c650 <HAL_DMA_Abort+0x62c>)
 800c58c:	4293      	cmp	r3, r2
 800c58e:	d00e      	beq.n	800c5ae <HAL_DMA_Abort+0x58a>
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	681b      	ldr	r3, [r3, #0]
 800c594:	4a2f      	ldr	r2, [pc, #188]	@ (800c654 <HAL_DMA_Abort+0x630>)
 800c596:	4293      	cmp	r3, r2
 800c598:	d009      	beq.n	800c5ae <HAL_DMA_Abort+0x58a>
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	4a2e      	ldr	r2, [pc, #184]	@ (800c658 <HAL_DMA_Abort+0x634>)
 800c5a0:	4293      	cmp	r3, r2
 800c5a2:	d004      	beq.n	800c5ae <HAL_DMA_Abort+0x58a>
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	4a2c      	ldr	r2, [pc, #176]	@ (800c65c <HAL_DMA_Abort+0x638>)
 800c5aa:	4293      	cmp	r3, r2
 800c5ac:	d101      	bne.n	800c5b2 <HAL_DMA_Abort+0x58e>
 800c5ae:	2301      	movs	r3, #1
 800c5b0:	e000      	b.n	800c5b4 <HAL_DMA_Abort+0x590>
 800c5b2:	2300      	movs	r3, #0
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d015      	beq.n	800c5e4 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c5bc:	687a      	ldr	r2, [r7, #4]
 800c5be:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800c5c0:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	d00c      	beq.n	800c5e4 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c5ce:	681a      	ldr	r2, [r3, #0]
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c5d4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800c5d8:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c5de:	687a      	ldr	r2, [r7, #4]
 800c5e0:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800c5e2:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	2201      	movs	r2, #1
 800c5e8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	2200      	movs	r2, #0
 800c5f0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 800c5f4:	2300      	movs	r3, #0
}
 800c5f6:	4618      	mov	r0, r3
 800c5f8:	3718      	adds	r7, #24
 800c5fa:	46bd      	mov	sp, r7
 800c5fc:	bd80      	pop	{r7, pc}
 800c5fe:	bf00      	nop
 800c600:	40020010 	.word	0x40020010
 800c604:	40020028 	.word	0x40020028
 800c608:	40020040 	.word	0x40020040
 800c60c:	40020058 	.word	0x40020058
 800c610:	40020070 	.word	0x40020070
 800c614:	40020088 	.word	0x40020088
 800c618:	400200a0 	.word	0x400200a0
 800c61c:	400200b8 	.word	0x400200b8
 800c620:	40020410 	.word	0x40020410
 800c624:	40020428 	.word	0x40020428
 800c628:	40020440 	.word	0x40020440
 800c62c:	40020458 	.word	0x40020458
 800c630:	40020470 	.word	0x40020470
 800c634:	40020488 	.word	0x40020488
 800c638:	400204a0 	.word	0x400204a0
 800c63c:	400204b8 	.word	0x400204b8
 800c640:	58025408 	.word	0x58025408
 800c644:	5802541c 	.word	0x5802541c
 800c648:	58025430 	.word	0x58025430
 800c64c:	58025444 	.word	0x58025444
 800c650:	58025458 	.word	0x58025458
 800c654:	5802546c 	.word	0x5802546c
 800c658:	58025480 	.word	0x58025480
 800c65c:	58025494 	.word	0x58025494

0800c660 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800c660:	b580      	push	{r7, lr}
 800c662:	b084      	sub	sp, #16
 800c664:	af00      	add	r7, sp, #0
 800c666:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	d101      	bne.n	800c672 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800c66e:	2301      	movs	r3, #1
 800c670:	e237      	b.n	800cae2 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800c678:	b2db      	uxtb	r3, r3
 800c67a:	2b02      	cmp	r3, #2
 800c67c:	d004      	beq.n	800c688 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	2280      	movs	r2, #128	@ 0x80
 800c682:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800c684:	2301      	movs	r3, #1
 800c686:	e22c      	b.n	800cae2 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	4a5c      	ldr	r2, [pc, #368]	@ (800c800 <HAL_DMA_Abort_IT+0x1a0>)
 800c68e:	4293      	cmp	r3, r2
 800c690:	d04a      	beq.n	800c728 <HAL_DMA_Abort_IT+0xc8>
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	4a5b      	ldr	r2, [pc, #364]	@ (800c804 <HAL_DMA_Abort_IT+0x1a4>)
 800c698:	4293      	cmp	r3, r2
 800c69a:	d045      	beq.n	800c728 <HAL_DMA_Abort_IT+0xc8>
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	4a59      	ldr	r2, [pc, #356]	@ (800c808 <HAL_DMA_Abort_IT+0x1a8>)
 800c6a2:	4293      	cmp	r3, r2
 800c6a4:	d040      	beq.n	800c728 <HAL_DMA_Abort_IT+0xc8>
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	4a58      	ldr	r2, [pc, #352]	@ (800c80c <HAL_DMA_Abort_IT+0x1ac>)
 800c6ac:	4293      	cmp	r3, r2
 800c6ae:	d03b      	beq.n	800c728 <HAL_DMA_Abort_IT+0xc8>
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	4a56      	ldr	r2, [pc, #344]	@ (800c810 <HAL_DMA_Abort_IT+0x1b0>)
 800c6b6:	4293      	cmp	r3, r2
 800c6b8:	d036      	beq.n	800c728 <HAL_DMA_Abort_IT+0xc8>
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	4a55      	ldr	r2, [pc, #340]	@ (800c814 <HAL_DMA_Abort_IT+0x1b4>)
 800c6c0:	4293      	cmp	r3, r2
 800c6c2:	d031      	beq.n	800c728 <HAL_DMA_Abort_IT+0xc8>
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	4a53      	ldr	r2, [pc, #332]	@ (800c818 <HAL_DMA_Abort_IT+0x1b8>)
 800c6ca:	4293      	cmp	r3, r2
 800c6cc:	d02c      	beq.n	800c728 <HAL_DMA_Abort_IT+0xc8>
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	4a52      	ldr	r2, [pc, #328]	@ (800c81c <HAL_DMA_Abort_IT+0x1bc>)
 800c6d4:	4293      	cmp	r3, r2
 800c6d6:	d027      	beq.n	800c728 <HAL_DMA_Abort_IT+0xc8>
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	681b      	ldr	r3, [r3, #0]
 800c6dc:	4a50      	ldr	r2, [pc, #320]	@ (800c820 <HAL_DMA_Abort_IT+0x1c0>)
 800c6de:	4293      	cmp	r3, r2
 800c6e0:	d022      	beq.n	800c728 <HAL_DMA_Abort_IT+0xc8>
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	4a4f      	ldr	r2, [pc, #316]	@ (800c824 <HAL_DMA_Abort_IT+0x1c4>)
 800c6e8:	4293      	cmp	r3, r2
 800c6ea:	d01d      	beq.n	800c728 <HAL_DMA_Abort_IT+0xc8>
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	681b      	ldr	r3, [r3, #0]
 800c6f0:	4a4d      	ldr	r2, [pc, #308]	@ (800c828 <HAL_DMA_Abort_IT+0x1c8>)
 800c6f2:	4293      	cmp	r3, r2
 800c6f4:	d018      	beq.n	800c728 <HAL_DMA_Abort_IT+0xc8>
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	681b      	ldr	r3, [r3, #0]
 800c6fa:	4a4c      	ldr	r2, [pc, #304]	@ (800c82c <HAL_DMA_Abort_IT+0x1cc>)
 800c6fc:	4293      	cmp	r3, r2
 800c6fe:	d013      	beq.n	800c728 <HAL_DMA_Abort_IT+0xc8>
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	4a4a      	ldr	r2, [pc, #296]	@ (800c830 <HAL_DMA_Abort_IT+0x1d0>)
 800c706:	4293      	cmp	r3, r2
 800c708:	d00e      	beq.n	800c728 <HAL_DMA_Abort_IT+0xc8>
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	4a49      	ldr	r2, [pc, #292]	@ (800c834 <HAL_DMA_Abort_IT+0x1d4>)
 800c710:	4293      	cmp	r3, r2
 800c712:	d009      	beq.n	800c728 <HAL_DMA_Abort_IT+0xc8>
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	4a47      	ldr	r2, [pc, #284]	@ (800c838 <HAL_DMA_Abort_IT+0x1d8>)
 800c71a:	4293      	cmp	r3, r2
 800c71c:	d004      	beq.n	800c728 <HAL_DMA_Abort_IT+0xc8>
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	4a46      	ldr	r2, [pc, #280]	@ (800c83c <HAL_DMA_Abort_IT+0x1dc>)
 800c724:	4293      	cmp	r3, r2
 800c726:	d101      	bne.n	800c72c <HAL_DMA_Abort_IT+0xcc>
 800c728:	2301      	movs	r3, #1
 800c72a:	e000      	b.n	800c72e <HAL_DMA_Abort_IT+0xce>
 800c72c:	2300      	movs	r3, #0
 800c72e:	2b00      	cmp	r3, #0
 800c730:	f000 8086 	beq.w	800c840 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	2204      	movs	r2, #4
 800c738:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	4a2f      	ldr	r2, [pc, #188]	@ (800c800 <HAL_DMA_Abort_IT+0x1a0>)
 800c742:	4293      	cmp	r3, r2
 800c744:	d04a      	beq.n	800c7dc <HAL_DMA_Abort_IT+0x17c>
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	4a2e      	ldr	r2, [pc, #184]	@ (800c804 <HAL_DMA_Abort_IT+0x1a4>)
 800c74c:	4293      	cmp	r3, r2
 800c74e:	d045      	beq.n	800c7dc <HAL_DMA_Abort_IT+0x17c>
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	4a2c      	ldr	r2, [pc, #176]	@ (800c808 <HAL_DMA_Abort_IT+0x1a8>)
 800c756:	4293      	cmp	r3, r2
 800c758:	d040      	beq.n	800c7dc <HAL_DMA_Abort_IT+0x17c>
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	4a2b      	ldr	r2, [pc, #172]	@ (800c80c <HAL_DMA_Abort_IT+0x1ac>)
 800c760:	4293      	cmp	r3, r2
 800c762:	d03b      	beq.n	800c7dc <HAL_DMA_Abort_IT+0x17c>
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	681b      	ldr	r3, [r3, #0]
 800c768:	4a29      	ldr	r2, [pc, #164]	@ (800c810 <HAL_DMA_Abort_IT+0x1b0>)
 800c76a:	4293      	cmp	r3, r2
 800c76c:	d036      	beq.n	800c7dc <HAL_DMA_Abort_IT+0x17c>
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	4a28      	ldr	r2, [pc, #160]	@ (800c814 <HAL_DMA_Abort_IT+0x1b4>)
 800c774:	4293      	cmp	r3, r2
 800c776:	d031      	beq.n	800c7dc <HAL_DMA_Abort_IT+0x17c>
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	4a26      	ldr	r2, [pc, #152]	@ (800c818 <HAL_DMA_Abort_IT+0x1b8>)
 800c77e:	4293      	cmp	r3, r2
 800c780:	d02c      	beq.n	800c7dc <HAL_DMA_Abort_IT+0x17c>
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	681b      	ldr	r3, [r3, #0]
 800c786:	4a25      	ldr	r2, [pc, #148]	@ (800c81c <HAL_DMA_Abort_IT+0x1bc>)
 800c788:	4293      	cmp	r3, r2
 800c78a:	d027      	beq.n	800c7dc <HAL_DMA_Abort_IT+0x17c>
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	681b      	ldr	r3, [r3, #0]
 800c790:	4a23      	ldr	r2, [pc, #140]	@ (800c820 <HAL_DMA_Abort_IT+0x1c0>)
 800c792:	4293      	cmp	r3, r2
 800c794:	d022      	beq.n	800c7dc <HAL_DMA_Abort_IT+0x17c>
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	4a22      	ldr	r2, [pc, #136]	@ (800c824 <HAL_DMA_Abort_IT+0x1c4>)
 800c79c:	4293      	cmp	r3, r2
 800c79e:	d01d      	beq.n	800c7dc <HAL_DMA_Abort_IT+0x17c>
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	4a20      	ldr	r2, [pc, #128]	@ (800c828 <HAL_DMA_Abort_IT+0x1c8>)
 800c7a6:	4293      	cmp	r3, r2
 800c7a8:	d018      	beq.n	800c7dc <HAL_DMA_Abort_IT+0x17c>
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	681b      	ldr	r3, [r3, #0]
 800c7ae:	4a1f      	ldr	r2, [pc, #124]	@ (800c82c <HAL_DMA_Abort_IT+0x1cc>)
 800c7b0:	4293      	cmp	r3, r2
 800c7b2:	d013      	beq.n	800c7dc <HAL_DMA_Abort_IT+0x17c>
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	4a1d      	ldr	r2, [pc, #116]	@ (800c830 <HAL_DMA_Abort_IT+0x1d0>)
 800c7ba:	4293      	cmp	r3, r2
 800c7bc:	d00e      	beq.n	800c7dc <HAL_DMA_Abort_IT+0x17c>
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	4a1c      	ldr	r2, [pc, #112]	@ (800c834 <HAL_DMA_Abort_IT+0x1d4>)
 800c7c4:	4293      	cmp	r3, r2
 800c7c6:	d009      	beq.n	800c7dc <HAL_DMA_Abort_IT+0x17c>
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	4a1a      	ldr	r2, [pc, #104]	@ (800c838 <HAL_DMA_Abort_IT+0x1d8>)
 800c7ce:	4293      	cmp	r3, r2
 800c7d0:	d004      	beq.n	800c7dc <HAL_DMA_Abort_IT+0x17c>
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	681b      	ldr	r3, [r3, #0]
 800c7d6:	4a19      	ldr	r2, [pc, #100]	@ (800c83c <HAL_DMA_Abort_IT+0x1dc>)
 800c7d8:	4293      	cmp	r3, r2
 800c7da:	d108      	bne.n	800c7ee <HAL_DMA_Abort_IT+0x18e>
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	681a      	ldr	r2, [r3, #0]
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	f022 0201 	bic.w	r2, r2, #1
 800c7ea:	601a      	str	r2, [r3, #0]
 800c7ec:	e178      	b.n	800cae0 <HAL_DMA_Abort_IT+0x480>
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	681b      	ldr	r3, [r3, #0]
 800c7f2:	681a      	ldr	r2, [r3, #0]
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	f022 0201 	bic.w	r2, r2, #1
 800c7fc:	601a      	str	r2, [r3, #0]
 800c7fe:	e16f      	b.n	800cae0 <HAL_DMA_Abort_IT+0x480>
 800c800:	40020010 	.word	0x40020010
 800c804:	40020028 	.word	0x40020028
 800c808:	40020040 	.word	0x40020040
 800c80c:	40020058 	.word	0x40020058
 800c810:	40020070 	.word	0x40020070
 800c814:	40020088 	.word	0x40020088
 800c818:	400200a0 	.word	0x400200a0
 800c81c:	400200b8 	.word	0x400200b8
 800c820:	40020410 	.word	0x40020410
 800c824:	40020428 	.word	0x40020428
 800c828:	40020440 	.word	0x40020440
 800c82c:	40020458 	.word	0x40020458
 800c830:	40020470 	.word	0x40020470
 800c834:	40020488 	.word	0x40020488
 800c838:	400204a0 	.word	0x400204a0
 800c83c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	681a      	ldr	r2, [r3, #0]
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	f022 020e 	bic.w	r2, r2, #14
 800c84e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	4a6c      	ldr	r2, [pc, #432]	@ (800ca08 <HAL_DMA_Abort_IT+0x3a8>)
 800c856:	4293      	cmp	r3, r2
 800c858:	d04a      	beq.n	800c8f0 <HAL_DMA_Abort_IT+0x290>
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	681b      	ldr	r3, [r3, #0]
 800c85e:	4a6b      	ldr	r2, [pc, #428]	@ (800ca0c <HAL_DMA_Abort_IT+0x3ac>)
 800c860:	4293      	cmp	r3, r2
 800c862:	d045      	beq.n	800c8f0 <HAL_DMA_Abort_IT+0x290>
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	4a69      	ldr	r2, [pc, #420]	@ (800ca10 <HAL_DMA_Abort_IT+0x3b0>)
 800c86a:	4293      	cmp	r3, r2
 800c86c:	d040      	beq.n	800c8f0 <HAL_DMA_Abort_IT+0x290>
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	4a68      	ldr	r2, [pc, #416]	@ (800ca14 <HAL_DMA_Abort_IT+0x3b4>)
 800c874:	4293      	cmp	r3, r2
 800c876:	d03b      	beq.n	800c8f0 <HAL_DMA_Abort_IT+0x290>
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	4a66      	ldr	r2, [pc, #408]	@ (800ca18 <HAL_DMA_Abort_IT+0x3b8>)
 800c87e:	4293      	cmp	r3, r2
 800c880:	d036      	beq.n	800c8f0 <HAL_DMA_Abort_IT+0x290>
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	681b      	ldr	r3, [r3, #0]
 800c886:	4a65      	ldr	r2, [pc, #404]	@ (800ca1c <HAL_DMA_Abort_IT+0x3bc>)
 800c888:	4293      	cmp	r3, r2
 800c88a:	d031      	beq.n	800c8f0 <HAL_DMA_Abort_IT+0x290>
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	4a63      	ldr	r2, [pc, #396]	@ (800ca20 <HAL_DMA_Abort_IT+0x3c0>)
 800c892:	4293      	cmp	r3, r2
 800c894:	d02c      	beq.n	800c8f0 <HAL_DMA_Abort_IT+0x290>
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	4a62      	ldr	r2, [pc, #392]	@ (800ca24 <HAL_DMA_Abort_IT+0x3c4>)
 800c89c:	4293      	cmp	r3, r2
 800c89e:	d027      	beq.n	800c8f0 <HAL_DMA_Abort_IT+0x290>
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	4a60      	ldr	r2, [pc, #384]	@ (800ca28 <HAL_DMA_Abort_IT+0x3c8>)
 800c8a6:	4293      	cmp	r3, r2
 800c8a8:	d022      	beq.n	800c8f0 <HAL_DMA_Abort_IT+0x290>
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	4a5f      	ldr	r2, [pc, #380]	@ (800ca2c <HAL_DMA_Abort_IT+0x3cc>)
 800c8b0:	4293      	cmp	r3, r2
 800c8b2:	d01d      	beq.n	800c8f0 <HAL_DMA_Abort_IT+0x290>
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	4a5d      	ldr	r2, [pc, #372]	@ (800ca30 <HAL_DMA_Abort_IT+0x3d0>)
 800c8ba:	4293      	cmp	r3, r2
 800c8bc:	d018      	beq.n	800c8f0 <HAL_DMA_Abort_IT+0x290>
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	4a5c      	ldr	r2, [pc, #368]	@ (800ca34 <HAL_DMA_Abort_IT+0x3d4>)
 800c8c4:	4293      	cmp	r3, r2
 800c8c6:	d013      	beq.n	800c8f0 <HAL_DMA_Abort_IT+0x290>
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	4a5a      	ldr	r2, [pc, #360]	@ (800ca38 <HAL_DMA_Abort_IT+0x3d8>)
 800c8ce:	4293      	cmp	r3, r2
 800c8d0:	d00e      	beq.n	800c8f0 <HAL_DMA_Abort_IT+0x290>
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	4a59      	ldr	r2, [pc, #356]	@ (800ca3c <HAL_DMA_Abort_IT+0x3dc>)
 800c8d8:	4293      	cmp	r3, r2
 800c8da:	d009      	beq.n	800c8f0 <HAL_DMA_Abort_IT+0x290>
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	4a57      	ldr	r2, [pc, #348]	@ (800ca40 <HAL_DMA_Abort_IT+0x3e0>)
 800c8e2:	4293      	cmp	r3, r2
 800c8e4:	d004      	beq.n	800c8f0 <HAL_DMA_Abort_IT+0x290>
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	4a56      	ldr	r2, [pc, #344]	@ (800ca44 <HAL_DMA_Abort_IT+0x3e4>)
 800c8ec:	4293      	cmp	r3, r2
 800c8ee:	d108      	bne.n	800c902 <HAL_DMA_Abort_IT+0x2a2>
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	681a      	ldr	r2, [r3, #0]
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	f022 0201 	bic.w	r2, r2, #1
 800c8fe:	601a      	str	r2, [r3, #0]
 800c900:	e007      	b.n	800c912 <HAL_DMA_Abort_IT+0x2b2>
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	681a      	ldr	r2, [r3, #0]
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	681b      	ldr	r3, [r3, #0]
 800c90c:	f022 0201 	bic.w	r2, r2, #1
 800c910:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	4a3c      	ldr	r2, [pc, #240]	@ (800ca08 <HAL_DMA_Abort_IT+0x3a8>)
 800c918:	4293      	cmp	r3, r2
 800c91a:	d072      	beq.n	800ca02 <HAL_DMA_Abort_IT+0x3a2>
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	681b      	ldr	r3, [r3, #0]
 800c920:	4a3a      	ldr	r2, [pc, #232]	@ (800ca0c <HAL_DMA_Abort_IT+0x3ac>)
 800c922:	4293      	cmp	r3, r2
 800c924:	d06d      	beq.n	800ca02 <HAL_DMA_Abort_IT+0x3a2>
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	4a39      	ldr	r2, [pc, #228]	@ (800ca10 <HAL_DMA_Abort_IT+0x3b0>)
 800c92c:	4293      	cmp	r3, r2
 800c92e:	d068      	beq.n	800ca02 <HAL_DMA_Abort_IT+0x3a2>
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	681b      	ldr	r3, [r3, #0]
 800c934:	4a37      	ldr	r2, [pc, #220]	@ (800ca14 <HAL_DMA_Abort_IT+0x3b4>)
 800c936:	4293      	cmp	r3, r2
 800c938:	d063      	beq.n	800ca02 <HAL_DMA_Abort_IT+0x3a2>
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	4a36      	ldr	r2, [pc, #216]	@ (800ca18 <HAL_DMA_Abort_IT+0x3b8>)
 800c940:	4293      	cmp	r3, r2
 800c942:	d05e      	beq.n	800ca02 <HAL_DMA_Abort_IT+0x3a2>
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	4a34      	ldr	r2, [pc, #208]	@ (800ca1c <HAL_DMA_Abort_IT+0x3bc>)
 800c94a:	4293      	cmp	r3, r2
 800c94c:	d059      	beq.n	800ca02 <HAL_DMA_Abort_IT+0x3a2>
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	4a33      	ldr	r2, [pc, #204]	@ (800ca20 <HAL_DMA_Abort_IT+0x3c0>)
 800c954:	4293      	cmp	r3, r2
 800c956:	d054      	beq.n	800ca02 <HAL_DMA_Abort_IT+0x3a2>
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	4a31      	ldr	r2, [pc, #196]	@ (800ca24 <HAL_DMA_Abort_IT+0x3c4>)
 800c95e:	4293      	cmp	r3, r2
 800c960:	d04f      	beq.n	800ca02 <HAL_DMA_Abort_IT+0x3a2>
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	4a30      	ldr	r2, [pc, #192]	@ (800ca28 <HAL_DMA_Abort_IT+0x3c8>)
 800c968:	4293      	cmp	r3, r2
 800c96a:	d04a      	beq.n	800ca02 <HAL_DMA_Abort_IT+0x3a2>
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	681b      	ldr	r3, [r3, #0]
 800c970:	4a2e      	ldr	r2, [pc, #184]	@ (800ca2c <HAL_DMA_Abort_IT+0x3cc>)
 800c972:	4293      	cmp	r3, r2
 800c974:	d045      	beq.n	800ca02 <HAL_DMA_Abort_IT+0x3a2>
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	4a2d      	ldr	r2, [pc, #180]	@ (800ca30 <HAL_DMA_Abort_IT+0x3d0>)
 800c97c:	4293      	cmp	r3, r2
 800c97e:	d040      	beq.n	800ca02 <HAL_DMA_Abort_IT+0x3a2>
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	4a2b      	ldr	r2, [pc, #172]	@ (800ca34 <HAL_DMA_Abort_IT+0x3d4>)
 800c986:	4293      	cmp	r3, r2
 800c988:	d03b      	beq.n	800ca02 <HAL_DMA_Abort_IT+0x3a2>
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	4a2a      	ldr	r2, [pc, #168]	@ (800ca38 <HAL_DMA_Abort_IT+0x3d8>)
 800c990:	4293      	cmp	r3, r2
 800c992:	d036      	beq.n	800ca02 <HAL_DMA_Abort_IT+0x3a2>
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	681b      	ldr	r3, [r3, #0]
 800c998:	4a28      	ldr	r2, [pc, #160]	@ (800ca3c <HAL_DMA_Abort_IT+0x3dc>)
 800c99a:	4293      	cmp	r3, r2
 800c99c:	d031      	beq.n	800ca02 <HAL_DMA_Abort_IT+0x3a2>
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	681b      	ldr	r3, [r3, #0]
 800c9a2:	4a27      	ldr	r2, [pc, #156]	@ (800ca40 <HAL_DMA_Abort_IT+0x3e0>)
 800c9a4:	4293      	cmp	r3, r2
 800c9a6:	d02c      	beq.n	800ca02 <HAL_DMA_Abort_IT+0x3a2>
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	4a25      	ldr	r2, [pc, #148]	@ (800ca44 <HAL_DMA_Abort_IT+0x3e4>)
 800c9ae:	4293      	cmp	r3, r2
 800c9b0:	d027      	beq.n	800ca02 <HAL_DMA_Abort_IT+0x3a2>
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	681b      	ldr	r3, [r3, #0]
 800c9b6:	4a24      	ldr	r2, [pc, #144]	@ (800ca48 <HAL_DMA_Abort_IT+0x3e8>)
 800c9b8:	4293      	cmp	r3, r2
 800c9ba:	d022      	beq.n	800ca02 <HAL_DMA_Abort_IT+0x3a2>
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	4a22      	ldr	r2, [pc, #136]	@ (800ca4c <HAL_DMA_Abort_IT+0x3ec>)
 800c9c2:	4293      	cmp	r3, r2
 800c9c4:	d01d      	beq.n	800ca02 <HAL_DMA_Abort_IT+0x3a2>
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	681b      	ldr	r3, [r3, #0]
 800c9ca:	4a21      	ldr	r2, [pc, #132]	@ (800ca50 <HAL_DMA_Abort_IT+0x3f0>)
 800c9cc:	4293      	cmp	r3, r2
 800c9ce:	d018      	beq.n	800ca02 <HAL_DMA_Abort_IT+0x3a2>
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	4a1f      	ldr	r2, [pc, #124]	@ (800ca54 <HAL_DMA_Abort_IT+0x3f4>)
 800c9d6:	4293      	cmp	r3, r2
 800c9d8:	d013      	beq.n	800ca02 <HAL_DMA_Abort_IT+0x3a2>
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	4a1e      	ldr	r2, [pc, #120]	@ (800ca58 <HAL_DMA_Abort_IT+0x3f8>)
 800c9e0:	4293      	cmp	r3, r2
 800c9e2:	d00e      	beq.n	800ca02 <HAL_DMA_Abort_IT+0x3a2>
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	681b      	ldr	r3, [r3, #0]
 800c9e8:	4a1c      	ldr	r2, [pc, #112]	@ (800ca5c <HAL_DMA_Abort_IT+0x3fc>)
 800c9ea:	4293      	cmp	r3, r2
 800c9ec:	d009      	beq.n	800ca02 <HAL_DMA_Abort_IT+0x3a2>
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	681b      	ldr	r3, [r3, #0]
 800c9f2:	4a1b      	ldr	r2, [pc, #108]	@ (800ca60 <HAL_DMA_Abort_IT+0x400>)
 800c9f4:	4293      	cmp	r3, r2
 800c9f6:	d004      	beq.n	800ca02 <HAL_DMA_Abort_IT+0x3a2>
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	681b      	ldr	r3, [r3, #0]
 800c9fc:	4a19      	ldr	r2, [pc, #100]	@ (800ca64 <HAL_DMA_Abort_IT+0x404>)
 800c9fe:	4293      	cmp	r3, r2
 800ca00:	d132      	bne.n	800ca68 <HAL_DMA_Abort_IT+0x408>
 800ca02:	2301      	movs	r3, #1
 800ca04:	e031      	b.n	800ca6a <HAL_DMA_Abort_IT+0x40a>
 800ca06:	bf00      	nop
 800ca08:	40020010 	.word	0x40020010
 800ca0c:	40020028 	.word	0x40020028
 800ca10:	40020040 	.word	0x40020040
 800ca14:	40020058 	.word	0x40020058
 800ca18:	40020070 	.word	0x40020070
 800ca1c:	40020088 	.word	0x40020088
 800ca20:	400200a0 	.word	0x400200a0
 800ca24:	400200b8 	.word	0x400200b8
 800ca28:	40020410 	.word	0x40020410
 800ca2c:	40020428 	.word	0x40020428
 800ca30:	40020440 	.word	0x40020440
 800ca34:	40020458 	.word	0x40020458
 800ca38:	40020470 	.word	0x40020470
 800ca3c:	40020488 	.word	0x40020488
 800ca40:	400204a0 	.word	0x400204a0
 800ca44:	400204b8 	.word	0x400204b8
 800ca48:	58025408 	.word	0x58025408
 800ca4c:	5802541c 	.word	0x5802541c
 800ca50:	58025430 	.word	0x58025430
 800ca54:	58025444 	.word	0x58025444
 800ca58:	58025458 	.word	0x58025458
 800ca5c:	5802546c 	.word	0x5802546c
 800ca60:	58025480 	.word	0x58025480
 800ca64:	58025494 	.word	0x58025494
 800ca68:	2300      	movs	r3, #0
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	d028      	beq.n	800cac0 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ca72:	681a      	ldr	r2, [r3, #0]
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ca78:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800ca7c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ca82:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ca88:	f003 031f 	and.w	r3, r3, #31
 800ca8c:	2201      	movs	r2, #1
 800ca8e:	409a      	lsls	r2, r3
 800ca90:	68fb      	ldr	r3, [r7, #12]
 800ca92:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ca98:	687a      	ldr	r2, [r7, #4]
 800ca9a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800ca9c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	d00c      	beq.n	800cac0 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800caaa:	681a      	ldr	r2, [r3, #0]
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cab0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800cab4:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800caba:	687a      	ldr	r2, [r7, #4]
 800cabc:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800cabe:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	2201      	movs	r2, #1
 800cac4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	2200      	movs	r2, #0
 800cacc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	d003      	beq.n	800cae0 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cadc:	6878      	ldr	r0, [r7, #4]
 800cade:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800cae0:	2300      	movs	r3, #0
}
 800cae2:	4618      	mov	r0, r3
 800cae4:	3710      	adds	r7, #16
 800cae6:	46bd      	mov	sp, r7
 800cae8:	bd80      	pop	{r7, pc}
 800caea:	bf00      	nop

0800caec <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800caec:	b580      	push	{r7, lr}
 800caee:	b08a      	sub	sp, #40	@ 0x28
 800caf0:	af00      	add	r7, sp, #0
 800caf2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800caf4:	2300      	movs	r3, #0
 800caf6:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800caf8:	4b67      	ldr	r3, [pc, #412]	@ (800cc98 <HAL_DMA_IRQHandler+0x1ac>)
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	4a67      	ldr	r2, [pc, #412]	@ (800cc9c <HAL_DMA_IRQHandler+0x1b0>)
 800cafe:	fba2 2303 	umull	r2, r3, r2, r3
 800cb02:	0a9b      	lsrs	r3, r3, #10
 800cb04:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cb0a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cb10:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800cb12:	6a3b      	ldr	r3, [r7, #32]
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800cb18:	69fb      	ldr	r3, [r7, #28]
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	681b      	ldr	r3, [r3, #0]
 800cb22:	4a5f      	ldr	r2, [pc, #380]	@ (800cca0 <HAL_DMA_IRQHandler+0x1b4>)
 800cb24:	4293      	cmp	r3, r2
 800cb26:	d04a      	beq.n	800cbbe <HAL_DMA_IRQHandler+0xd2>
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	681b      	ldr	r3, [r3, #0]
 800cb2c:	4a5d      	ldr	r2, [pc, #372]	@ (800cca4 <HAL_DMA_IRQHandler+0x1b8>)
 800cb2e:	4293      	cmp	r3, r2
 800cb30:	d045      	beq.n	800cbbe <HAL_DMA_IRQHandler+0xd2>
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	4a5c      	ldr	r2, [pc, #368]	@ (800cca8 <HAL_DMA_IRQHandler+0x1bc>)
 800cb38:	4293      	cmp	r3, r2
 800cb3a:	d040      	beq.n	800cbbe <HAL_DMA_IRQHandler+0xd2>
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	681b      	ldr	r3, [r3, #0]
 800cb40:	4a5a      	ldr	r2, [pc, #360]	@ (800ccac <HAL_DMA_IRQHandler+0x1c0>)
 800cb42:	4293      	cmp	r3, r2
 800cb44:	d03b      	beq.n	800cbbe <HAL_DMA_IRQHandler+0xd2>
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	681b      	ldr	r3, [r3, #0]
 800cb4a:	4a59      	ldr	r2, [pc, #356]	@ (800ccb0 <HAL_DMA_IRQHandler+0x1c4>)
 800cb4c:	4293      	cmp	r3, r2
 800cb4e:	d036      	beq.n	800cbbe <HAL_DMA_IRQHandler+0xd2>
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	681b      	ldr	r3, [r3, #0]
 800cb54:	4a57      	ldr	r2, [pc, #348]	@ (800ccb4 <HAL_DMA_IRQHandler+0x1c8>)
 800cb56:	4293      	cmp	r3, r2
 800cb58:	d031      	beq.n	800cbbe <HAL_DMA_IRQHandler+0xd2>
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	681b      	ldr	r3, [r3, #0]
 800cb5e:	4a56      	ldr	r2, [pc, #344]	@ (800ccb8 <HAL_DMA_IRQHandler+0x1cc>)
 800cb60:	4293      	cmp	r3, r2
 800cb62:	d02c      	beq.n	800cbbe <HAL_DMA_IRQHandler+0xd2>
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	4a54      	ldr	r2, [pc, #336]	@ (800ccbc <HAL_DMA_IRQHandler+0x1d0>)
 800cb6a:	4293      	cmp	r3, r2
 800cb6c:	d027      	beq.n	800cbbe <HAL_DMA_IRQHandler+0xd2>
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	4a53      	ldr	r2, [pc, #332]	@ (800ccc0 <HAL_DMA_IRQHandler+0x1d4>)
 800cb74:	4293      	cmp	r3, r2
 800cb76:	d022      	beq.n	800cbbe <HAL_DMA_IRQHandler+0xd2>
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	681b      	ldr	r3, [r3, #0]
 800cb7c:	4a51      	ldr	r2, [pc, #324]	@ (800ccc4 <HAL_DMA_IRQHandler+0x1d8>)
 800cb7e:	4293      	cmp	r3, r2
 800cb80:	d01d      	beq.n	800cbbe <HAL_DMA_IRQHandler+0xd2>
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	4a50      	ldr	r2, [pc, #320]	@ (800ccc8 <HAL_DMA_IRQHandler+0x1dc>)
 800cb88:	4293      	cmp	r3, r2
 800cb8a:	d018      	beq.n	800cbbe <HAL_DMA_IRQHandler+0xd2>
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	4a4e      	ldr	r2, [pc, #312]	@ (800cccc <HAL_DMA_IRQHandler+0x1e0>)
 800cb92:	4293      	cmp	r3, r2
 800cb94:	d013      	beq.n	800cbbe <HAL_DMA_IRQHandler+0xd2>
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	681b      	ldr	r3, [r3, #0]
 800cb9a:	4a4d      	ldr	r2, [pc, #308]	@ (800ccd0 <HAL_DMA_IRQHandler+0x1e4>)
 800cb9c:	4293      	cmp	r3, r2
 800cb9e:	d00e      	beq.n	800cbbe <HAL_DMA_IRQHandler+0xd2>
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	681b      	ldr	r3, [r3, #0]
 800cba4:	4a4b      	ldr	r2, [pc, #300]	@ (800ccd4 <HAL_DMA_IRQHandler+0x1e8>)
 800cba6:	4293      	cmp	r3, r2
 800cba8:	d009      	beq.n	800cbbe <HAL_DMA_IRQHandler+0xd2>
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	4a4a      	ldr	r2, [pc, #296]	@ (800ccd8 <HAL_DMA_IRQHandler+0x1ec>)
 800cbb0:	4293      	cmp	r3, r2
 800cbb2:	d004      	beq.n	800cbbe <HAL_DMA_IRQHandler+0xd2>
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	4a48      	ldr	r2, [pc, #288]	@ (800ccdc <HAL_DMA_IRQHandler+0x1f0>)
 800cbba:	4293      	cmp	r3, r2
 800cbbc:	d101      	bne.n	800cbc2 <HAL_DMA_IRQHandler+0xd6>
 800cbbe:	2301      	movs	r3, #1
 800cbc0:	e000      	b.n	800cbc4 <HAL_DMA_IRQHandler+0xd8>
 800cbc2:	2300      	movs	r3, #0
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	f000 842b 	beq.w	800d420 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cbce:	f003 031f 	and.w	r3, r3, #31
 800cbd2:	2208      	movs	r2, #8
 800cbd4:	409a      	lsls	r2, r3
 800cbd6:	69bb      	ldr	r3, [r7, #24]
 800cbd8:	4013      	ands	r3, r2
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	f000 80a2 	beq.w	800cd24 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	4a2e      	ldr	r2, [pc, #184]	@ (800cca0 <HAL_DMA_IRQHandler+0x1b4>)
 800cbe6:	4293      	cmp	r3, r2
 800cbe8:	d04a      	beq.n	800cc80 <HAL_DMA_IRQHandler+0x194>
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	681b      	ldr	r3, [r3, #0]
 800cbee:	4a2d      	ldr	r2, [pc, #180]	@ (800cca4 <HAL_DMA_IRQHandler+0x1b8>)
 800cbf0:	4293      	cmp	r3, r2
 800cbf2:	d045      	beq.n	800cc80 <HAL_DMA_IRQHandler+0x194>
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	4a2b      	ldr	r2, [pc, #172]	@ (800cca8 <HAL_DMA_IRQHandler+0x1bc>)
 800cbfa:	4293      	cmp	r3, r2
 800cbfc:	d040      	beq.n	800cc80 <HAL_DMA_IRQHandler+0x194>
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	4a2a      	ldr	r2, [pc, #168]	@ (800ccac <HAL_DMA_IRQHandler+0x1c0>)
 800cc04:	4293      	cmp	r3, r2
 800cc06:	d03b      	beq.n	800cc80 <HAL_DMA_IRQHandler+0x194>
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	4a28      	ldr	r2, [pc, #160]	@ (800ccb0 <HAL_DMA_IRQHandler+0x1c4>)
 800cc0e:	4293      	cmp	r3, r2
 800cc10:	d036      	beq.n	800cc80 <HAL_DMA_IRQHandler+0x194>
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	4a27      	ldr	r2, [pc, #156]	@ (800ccb4 <HAL_DMA_IRQHandler+0x1c8>)
 800cc18:	4293      	cmp	r3, r2
 800cc1a:	d031      	beq.n	800cc80 <HAL_DMA_IRQHandler+0x194>
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	681b      	ldr	r3, [r3, #0]
 800cc20:	4a25      	ldr	r2, [pc, #148]	@ (800ccb8 <HAL_DMA_IRQHandler+0x1cc>)
 800cc22:	4293      	cmp	r3, r2
 800cc24:	d02c      	beq.n	800cc80 <HAL_DMA_IRQHandler+0x194>
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	4a24      	ldr	r2, [pc, #144]	@ (800ccbc <HAL_DMA_IRQHandler+0x1d0>)
 800cc2c:	4293      	cmp	r3, r2
 800cc2e:	d027      	beq.n	800cc80 <HAL_DMA_IRQHandler+0x194>
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	4a22      	ldr	r2, [pc, #136]	@ (800ccc0 <HAL_DMA_IRQHandler+0x1d4>)
 800cc36:	4293      	cmp	r3, r2
 800cc38:	d022      	beq.n	800cc80 <HAL_DMA_IRQHandler+0x194>
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	681b      	ldr	r3, [r3, #0]
 800cc3e:	4a21      	ldr	r2, [pc, #132]	@ (800ccc4 <HAL_DMA_IRQHandler+0x1d8>)
 800cc40:	4293      	cmp	r3, r2
 800cc42:	d01d      	beq.n	800cc80 <HAL_DMA_IRQHandler+0x194>
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	681b      	ldr	r3, [r3, #0]
 800cc48:	4a1f      	ldr	r2, [pc, #124]	@ (800ccc8 <HAL_DMA_IRQHandler+0x1dc>)
 800cc4a:	4293      	cmp	r3, r2
 800cc4c:	d018      	beq.n	800cc80 <HAL_DMA_IRQHandler+0x194>
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	4a1e      	ldr	r2, [pc, #120]	@ (800cccc <HAL_DMA_IRQHandler+0x1e0>)
 800cc54:	4293      	cmp	r3, r2
 800cc56:	d013      	beq.n	800cc80 <HAL_DMA_IRQHandler+0x194>
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	681b      	ldr	r3, [r3, #0]
 800cc5c:	4a1c      	ldr	r2, [pc, #112]	@ (800ccd0 <HAL_DMA_IRQHandler+0x1e4>)
 800cc5e:	4293      	cmp	r3, r2
 800cc60:	d00e      	beq.n	800cc80 <HAL_DMA_IRQHandler+0x194>
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	681b      	ldr	r3, [r3, #0]
 800cc66:	4a1b      	ldr	r2, [pc, #108]	@ (800ccd4 <HAL_DMA_IRQHandler+0x1e8>)
 800cc68:	4293      	cmp	r3, r2
 800cc6a:	d009      	beq.n	800cc80 <HAL_DMA_IRQHandler+0x194>
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	4a19      	ldr	r2, [pc, #100]	@ (800ccd8 <HAL_DMA_IRQHandler+0x1ec>)
 800cc72:	4293      	cmp	r3, r2
 800cc74:	d004      	beq.n	800cc80 <HAL_DMA_IRQHandler+0x194>
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	4a18      	ldr	r2, [pc, #96]	@ (800ccdc <HAL_DMA_IRQHandler+0x1f0>)
 800cc7c:	4293      	cmp	r3, r2
 800cc7e:	d12f      	bne.n	800cce0 <HAL_DMA_IRQHandler+0x1f4>
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	681b      	ldr	r3, [r3, #0]
 800cc86:	f003 0304 	and.w	r3, r3, #4
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	bf14      	ite	ne
 800cc8e:	2301      	movne	r3, #1
 800cc90:	2300      	moveq	r3, #0
 800cc92:	b2db      	uxtb	r3, r3
 800cc94:	e02e      	b.n	800ccf4 <HAL_DMA_IRQHandler+0x208>
 800cc96:	bf00      	nop
 800cc98:	24000004 	.word	0x24000004
 800cc9c:	1b4e81b5 	.word	0x1b4e81b5
 800cca0:	40020010 	.word	0x40020010
 800cca4:	40020028 	.word	0x40020028
 800cca8:	40020040 	.word	0x40020040
 800ccac:	40020058 	.word	0x40020058
 800ccb0:	40020070 	.word	0x40020070
 800ccb4:	40020088 	.word	0x40020088
 800ccb8:	400200a0 	.word	0x400200a0
 800ccbc:	400200b8 	.word	0x400200b8
 800ccc0:	40020410 	.word	0x40020410
 800ccc4:	40020428 	.word	0x40020428
 800ccc8:	40020440 	.word	0x40020440
 800cccc:	40020458 	.word	0x40020458
 800ccd0:	40020470 	.word	0x40020470
 800ccd4:	40020488 	.word	0x40020488
 800ccd8:	400204a0 	.word	0x400204a0
 800ccdc:	400204b8 	.word	0x400204b8
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	681b      	ldr	r3, [r3, #0]
 800cce4:	681b      	ldr	r3, [r3, #0]
 800cce6:	f003 0308 	and.w	r3, r3, #8
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	bf14      	ite	ne
 800ccee:	2301      	movne	r3, #1
 800ccf0:	2300      	moveq	r3, #0
 800ccf2:	b2db      	uxtb	r3, r3
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	d015      	beq.n	800cd24 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	681b      	ldr	r3, [r3, #0]
 800ccfc:	681a      	ldr	r2, [r3, #0]
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	f022 0204 	bic.w	r2, r2, #4
 800cd06:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cd0c:	f003 031f 	and.w	r3, r3, #31
 800cd10:	2208      	movs	r2, #8
 800cd12:	409a      	lsls	r2, r3
 800cd14:	6a3b      	ldr	r3, [r7, #32]
 800cd16:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cd1c:	f043 0201 	orr.w	r2, r3, #1
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cd28:	f003 031f 	and.w	r3, r3, #31
 800cd2c:	69ba      	ldr	r2, [r7, #24]
 800cd2e:	fa22 f303 	lsr.w	r3, r2, r3
 800cd32:	f003 0301 	and.w	r3, r3, #1
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	d06e      	beq.n	800ce18 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	681b      	ldr	r3, [r3, #0]
 800cd3e:	4a69      	ldr	r2, [pc, #420]	@ (800cee4 <HAL_DMA_IRQHandler+0x3f8>)
 800cd40:	4293      	cmp	r3, r2
 800cd42:	d04a      	beq.n	800cdda <HAL_DMA_IRQHandler+0x2ee>
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	4a67      	ldr	r2, [pc, #412]	@ (800cee8 <HAL_DMA_IRQHandler+0x3fc>)
 800cd4a:	4293      	cmp	r3, r2
 800cd4c:	d045      	beq.n	800cdda <HAL_DMA_IRQHandler+0x2ee>
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	681b      	ldr	r3, [r3, #0]
 800cd52:	4a66      	ldr	r2, [pc, #408]	@ (800ceec <HAL_DMA_IRQHandler+0x400>)
 800cd54:	4293      	cmp	r3, r2
 800cd56:	d040      	beq.n	800cdda <HAL_DMA_IRQHandler+0x2ee>
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	681b      	ldr	r3, [r3, #0]
 800cd5c:	4a64      	ldr	r2, [pc, #400]	@ (800cef0 <HAL_DMA_IRQHandler+0x404>)
 800cd5e:	4293      	cmp	r3, r2
 800cd60:	d03b      	beq.n	800cdda <HAL_DMA_IRQHandler+0x2ee>
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	681b      	ldr	r3, [r3, #0]
 800cd66:	4a63      	ldr	r2, [pc, #396]	@ (800cef4 <HAL_DMA_IRQHandler+0x408>)
 800cd68:	4293      	cmp	r3, r2
 800cd6a:	d036      	beq.n	800cdda <HAL_DMA_IRQHandler+0x2ee>
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	681b      	ldr	r3, [r3, #0]
 800cd70:	4a61      	ldr	r2, [pc, #388]	@ (800cef8 <HAL_DMA_IRQHandler+0x40c>)
 800cd72:	4293      	cmp	r3, r2
 800cd74:	d031      	beq.n	800cdda <HAL_DMA_IRQHandler+0x2ee>
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	4a60      	ldr	r2, [pc, #384]	@ (800cefc <HAL_DMA_IRQHandler+0x410>)
 800cd7c:	4293      	cmp	r3, r2
 800cd7e:	d02c      	beq.n	800cdda <HAL_DMA_IRQHandler+0x2ee>
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	681b      	ldr	r3, [r3, #0]
 800cd84:	4a5e      	ldr	r2, [pc, #376]	@ (800cf00 <HAL_DMA_IRQHandler+0x414>)
 800cd86:	4293      	cmp	r3, r2
 800cd88:	d027      	beq.n	800cdda <HAL_DMA_IRQHandler+0x2ee>
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	681b      	ldr	r3, [r3, #0]
 800cd8e:	4a5d      	ldr	r2, [pc, #372]	@ (800cf04 <HAL_DMA_IRQHandler+0x418>)
 800cd90:	4293      	cmp	r3, r2
 800cd92:	d022      	beq.n	800cdda <HAL_DMA_IRQHandler+0x2ee>
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	681b      	ldr	r3, [r3, #0]
 800cd98:	4a5b      	ldr	r2, [pc, #364]	@ (800cf08 <HAL_DMA_IRQHandler+0x41c>)
 800cd9a:	4293      	cmp	r3, r2
 800cd9c:	d01d      	beq.n	800cdda <HAL_DMA_IRQHandler+0x2ee>
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	681b      	ldr	r3, [r3, #0]
 800cda2:	4a5a      	ldr	r2, [pc, #360]	@ (800cf0c <HAL_DMA_IRQHandler+0x420>)
 800cda4:	4293      	cmp	r3, r2
 800cda6:	d018      	beq.n	800cdda <HAL_DMA_IRQHandler+0x2ee>
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	4a58      	ldr	r2, [pc, #352]	@ (800cf10 <HAL_DMA_IRQHandler+0x424>)
 800cdae:	4293      	cmp	r3, r2
 800cdb0:	d013      	beq.n	800cdda <HAL_DMA_IRQHandler+0x2ee>
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	681b      	ldr	r3, [r3, #0]
 800cdb6:	4a57      	ldr	r2, [pc, #348]	@ (800cf14 <HAL_DMA_IRQHandler+0x428>)
 800cdb8:	4293      	cmp	r3, r2
 800cdba:	d00e      	beq.n	800cdda <HAL_DMA_IRQHandler+0x2ee>
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	681b      	ldr	r3, [r3, #0]
 800cdc0:	4a55      	ldr	r2, [pc, #340]	@ (800cf18 <HAL_DMA_IRQHandler+0x42c>)
 800cdc2:	4293      	cmp	r3, r2
 800cdc4:	d009      	beq.n	800cdda <HAL_DMA_IRQHandler+0x2ee>
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	681b      	ldr	r3, [r3, #0]
 800cdca:	4a54      	ldr	r2, [pc, #336]	@ (800cf1c <HAL_DMA_IRQHandler+0x430>)
 800cdcc:	4293      	cmp	r3, r2
 800cdce:	d004      	beq.n	800cdda <HAL_DMA_IRQHandler+0x2ee>
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	681b      	ldr	r3, [r3, #0]
 800cdd4:	4a52      	ldr	r2, [pc, #328]	@ (800cf20 <HAL_DMA_IRQHandler+0x434>)
 800cdd6:	4293      	cmp	r3, r2
 800cdd8:	d10a      	bne.n	800cdf0 <HAL_DMA_IRQHandler+0x304>
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	681b      	ldr	r3, [r3, #0]
 800cdde:	695b      	ldr	r3, [r3, #20]
 800cde0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	bf14      	ite	ne
 800cde8:	2301      	movne	r3, #1
 800cdea:	2300      	moveq	r3, #0
 800cdec:	b2db      	uxtb	r3, r3
 800cdee:	e003      	b.n	800cdf8 <HAL_DMA_IRQHandler+0x30c>
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	681b      	ldr	r3, [r3, #0]
 800cdf4:	681b      	ldr	r3, [r3, #0]
 800cdf6:	2300      	movs	r3, #0
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	d00d      	beq.n	800ce18 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ce00:	f003 031f 	and.w	r3, r3, #31
 800ce04:	2201      	movs	r2, #1
 800ce06:	409a      	lsls	r2, r3
 800ce08:	6a3b      	ldr	r3, [r7, #32]
 800ce0a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ce10:	f043 0202 	orr.w	r2, r3, #2
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ce1c:	f003 031f 	and.w	r3, r3, #31
 800ce20:	2204      	movs	r2, #4
 800ce22:	409a      	lsls	r2, r3
 800ce24:	69bb      	ldr	r3, [r7, #24]
 800ce26:	4013      	ands	r3, r2
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	f000 808f 	beq.w	800cf4c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	681b      	ldr	r3, [r3, #0]
 800ce32:	4a2c      	ldr	r2, [pc, #176]	@ (800cee4 <HAL_DMA_IRQHandler+0x3f8>)
 800ce34:	4293      	cmp	r3, r2
 800ce36:	d04a      	beq.n	800cece <HAL_DMA_IRQHandler+0x3e2>
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	681b      	ldr	r3, [r3, #0]
 800ce3c:	4a2a      	ldr	r2, [pc, #168]	@ (800cee8 <HAL_DMA_IRQHandler+0x3fc>)
 800ce3e:	4293      	cmp	r3, r2
 800ce40:	d045      	beq.n	800cece <HAL_DMA_IRQHandler+0x3e2>
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	681b      	ldr	r3, [r3, #0]
 800ce46:	4a29      	ldr	r2, [pc, #164]	@ (800ceec <HAL_DMA_IRQHandler+0x400>)
 800ce48:	4293      	cmp	r3, r2
 800ce4a:	d040      	beq.n	800cece <HAL_DMA_IRQHandler+0x3e2>
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	4a27      	ldr	r2, [pc, #156]	@ (800cef0 <HAL_DMA_IRQHandler+0x404>)
 800ce52:	4293      	cmp	r3, r2
 800ce54:	d03b      	beq.n	800cece <HAL_DMA_IRQHandler+0x3e2>
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	681b      	ldr	r3, [r3, #0]
 800ce5a:	4a26      	ldr	r2, [pc, #152]	@ (800cef4 <HAL_DMA_IRQHandler+0x408>)
 800ce5c:	4293      	cmp	r3, r2
 800ce5e:	d036      	beq.n	800cece <HAL_DMA_IRQHandler+0x3e2>
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	681b      	ldr	r3, [r3, #0]
 800ce64:	4a24      	ldr	r2, [pc, #144]	@ (800cef8 <HAL_DMA_IRQHandler+0x40c>)
 800ce66:	4293      	cmp	r3, r2
 800ce68:	d031      	beq.n	800cece <HAL_DMA_IRQHandler+0x3e2>
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	681b      	ldr	r3, [r3, #0]
 800ce6e:	4a23      	ldr	r2, [pc, #140]	@ (800cefc <HAL_DMA_IRQHandler+0x410>)
 800ce70:	4293      	cmp	r3, r2
 800ce72:	d02c      	beq.n	800cece <HAL_DMA_IRQHandler+0x3e2>
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	681b      	ldr	r3, [r3, #0]
 800ce78:	4a21      	ldr	r2, [pc, #132]	@ (800cf00 <HAL_DMA_IRQHandler+0x414>)
 800ce7a:	4293      	cmp	r3, r2
 800ce7c:	d027      	beq.n	800cece <HAL_DMA_IRQHandler+0x3e2>
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	681b      	ldr	r3, [r3, #0]
 800ce82:	4a20      	ldr	r2, [pc, #128]	@ (800cf04 <HAL_DMA_IRQHandler+0x418>)
 800ce84:	4293      	cmp	r3, r2
 800ce86:	d022      	beq.n	800cece <HAL_DMA_IRQHandler+0x3e2>
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	681b      	ldr	r3, [r3, #0]
 800ce8c:	4a1e      	ldr	r2, [pc, #120]	@ (800cf08 <HAL_DMA_IRQHandler+0x41c>)
 800ce8e:	4293      	cmp	r3, r2
 800ce90:	d01d      	beq.n	800cece <HAL_DMA_IRQHandler+0x3e2>
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	681b      	ldr	r3, [r3, #0]
 800ce96:	4a1d      	ldr	r2, [pc, #116]	@ (800cf0c <HAL_DMA_IRQHandler+0x420>)
 800ce98:	4293      	cmp	r3, r2
 800ce9a:	d018      	beq.n	800cece <HAL_DMA_IRQHandler+0x3e2>
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	681b      	ldr	r3, [r3, #0]
 800cea0:	4a1b      	ldr	r2, [pc, #108]	@ (800cf10 <HAL_DMA_IRQHandler+0x424>)
 800cea2:	4293      	cmp	r3, r2
 800cea4:	d013      	beq.n	800cece <HAL_DMA_IRQHandler+0x3e2>
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	681b      	ldr	r3, [r3, #0]
 800ceaa:	4a1a      	ldr	r2, [pc, #104]	@ (800cf14 <HAL_DMA_IRQHandler+0x428>)
 800ceac:	4293      	cmp	r3, r2
 800ceae:	d00e      	beq.n	800cece <HAL_DMA_IRQHandler+0x3e2>
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	681b      	ldr	r3, [r3, #0]
 800ceb4:	4a18      	ldr	r2, [pc, #96]	@ (800cf18 <HAL_DMA_IRQHandler+0x42c>)
 800ceb6:	4293      	cmp	r3, r2
 800ceb8:	d009      	beq.n	800cece <HAL_DMA_IRQHandler+0x3e2>
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	681b      	ldr	r3, [r3, #0]
 800cebe:	4a17      	ldr	r2, [pc, #92]	@ (800cf1c <HAL_DMA_IRQHandler+0x430>)
 800cec0:	4293      	cmp	r3, r2
 800cec2:	d004      	beq.n	800cece <HAL_DMA_IRQHandler+0x3e2>
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	4a15      	ldr	r2, [pc, #84]	@ (800cf20 <HAL_DMA_IRQHandler+0x434>)
 800ceca:	4293      	cmp	r3, r2
 800cecc:	d12a      	bne.n	800cf24 <HAL_DMA_IRQHandler+0x438>
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	681b      	ldr	r3, [r3, #0]
 800ced2:	681b      	ldr	r3, [r3, #0]
 800ced4:	f003 0302 	and.w	r3, r3, #2
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	bf14      	ite	ne
 800cedc:	2301      	movne	r3, #1
 800cede:	2300      	moveq	r3, #0
 800cee0:	b2db      	uxtb	r3, r3
 800cee2:	e023      	b.n	800cf2c <HAL_DMA_IRQHandler+0x440>
 800cee4:	40020010 	.word	0x40020010
 800cee8:	40020028 	.word	0x40020028
 800ceec:	40020040 	.word	0x40020040
 800cef0:	40020058 	.word	0x40020058
 800cef4:	40020070 	.word	0x40020070
 800cef8:	40020088 	.word	0x40020088
 800cefc:	400200a0 	.word	0x400200a0
 800cf00:	400200b8 	.word	0x400200b8
 800cf04:	40020410 	.word	0x40020410
 800cf08:	40020428 	.word	0x40020428
 800cf0c:	40020440 	.word	0x40020440
 800cf10:	40020458 	.word	0x40020458
 800cf14:	40020470 	.word	0x40020470
 800cf18:	40020488 	.word	0x40020488
 800cf1c:	400204a0 	.word	0x400204a0
 800cf20:	400204b8 	.word	0x400204b8
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	681b      	ldr	r3, [r3, #0]
 800cf2a:	2300      	movs	r3, #0
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d00d      	beq.n	800cf4c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cf34:	f003 031f 	and.w	r3, r3, #31
 800cf38:	2204      	movs	r2, #4
 800cf3a:	409a      	lsls	r2, r3
 800cf3c:	6a3b      	ldr	r3, [r7, #32]
 800cf3e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cf44:	f043 0204 	orr.w	r2, r3, #4
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cf50:	f003 031f 	and.w	r3, r3, #31
 800cf54:	2210      	movs	r2, #16
 800cf56:	409a      	lsls	r2, r3
 800cf58:	69bb      	ldr	r3, [r7, #24]
 800cf5a:	4013      	ands	r3, r2
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	f000 80a6 	beq.w	800d0ae <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	681b      	ldr	r3, [r3, #0]
 800cf66:	4a85      	ldr	r2, [pc, #532]	@ (800d17c <HAL_DMA_IRQHandler+0x690>)
 800cf68:	4293      	cmp	r3, r2
 800cf6a:	d04a      	beq.n	800d002 <HAL_DMA_IRQHandler+0x516>
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	681b      	ldr	r3, [r3, #0]
 800cf70:	4a83      	ldr	r2, [pc, #524]	@ (800d180 <HAL_DMA_IRQHandler+0x694>)
 800cf72:	4293      	cmp	r3, r2
 800cf74:	d045      	beq.n	800d002 <HAL_DMA_IRQHandler+0x516>
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	681b      	ldr	r3, [r3, #0]
 800cf7a:	4a82      	ldr	r2, [pc, #520]	@ (800d184 <HAL_DMA_IRQHandler+0x698>)
 800cf7c:	4293      	cmp	r3, r2
 800cf7e:	d040      	beq.n	800d002 <HAL_DMA_IRQHandler+0x516>
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	681b      	ldr	r3, [r3, #0]
 800cf84:	4a80      	ldr	r2, [pc, #512]	@ (800d188 <HAL_DMA_IRQHandler+0x69c>)
 800cf86:	4293      	cmp	r3, r2
 800cf88:	d03b      	beq.n	800d002 <HAL_DMA_IRQHandler+0x516>
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	681b      	ldr	r3, [r3, #0]
 800cf8e:	4a7f      	ldr	r2, [pc, #508]	@ (800d18c <HAL_DMA_IRQHandler+0x6a0>)
 800cf90:	4293      	cmp	r3, r2
 800cf92:	d036      	beq.n	800d002 <HAL_DMA_IRQHandler+0x516>
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	4a7d      	ldr	r2, [pc, #500]	@ (800d190 <HAL_DMA_IRQHandler+0x6a4>)
 800cf9a:	4293      	cmp	r3, r2
 800cf9c:	d031      	beq.n	800d002 <HAL_DMA_IRQHandler+0x516>
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	681b      	ldr	r3, [r3, #0]
 800cfa2:	4a7c      	ldr	r2, [pc, #496]	@ (800d194 <HAL_DMA_IRQHandler+0x6a8>)
 800cfa4:	4293      	cmp	r3, r2
 800cfa6:	d02c      	beq.n	800d002 <HAL_DMA_IRQHandler+0x516>
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	681b      	ldr	r3, [r3, #0]
 800cfac:	4a7a      	ldr	r2, [pc, #488]	@ (800d198 <HAL_DMA_IRQHandler+0x6ac>)
 800cfae:	4293      	cmp	r3, r2
 800cfb0:	d027      	beq.n	800d002 <HAL_DMA_IRQHandler+0x516>
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	681b      	ldr	r3, [r3, #0]
 800cfb6:	4a79      	ldr	r2, [pc, #484]	@ (800d19c <HAL_DMA_IRQHandler+0x6b0>)
 800cfb8:	4293      	cmp	r3, r2
 800cfba:	d022      	beq.n	800d002 <HAL_DMA_IRQHandler+0x516>
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	4a77      	ldr	r2, [pc, #476]	@ (800d1a0 <HAL_DMA_IRQHandler+0x6b4>)
 800cfc2:	4293      	cmp	r3, r2
 800cfc4:	d01d      	beq.n	800d002 <HAL_DMA_IRQHandler+0x516>
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	681b      	ldr	r3, [r3, #0]
 800cfca:	4a76      	ldr	r2, [pc, #472]	@ (800d1a4 <HAL_DMA_IRQHandler+0x6b8>)
 800cfcc:	4293      	cmp	r3, r2
 800cfce:	d018      	beq.n	800d002 <HAL_DMA_IRQHandler+0x516>
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	681b      	ldr	r3, [r3, #0]
 800cfd4:	4a74      	ldr	r2, [pc, #464]	@ (800d1a8 <HAL_DMA_IRQHandler+0x6bc>)
 800cfd6:	4293      	cmp	r3, r2
 800cfd8:	d013      	beq.n	800d002 <HAL_DMA_IRQHandler+0x516>
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	681b      	ldr	r3, [r3, #0]
 800cfde:	4a73      	ldr	r2, [pc, #460]	@ (800d1ac <HAL_DMA_IRQHandler+0x6c0>)
 800cfe0:	4293      	cmp	r3, r2
 800cfe2:	d00e      	beq.n	800d002 <HAL_DMA_IRQHandler+0x516>
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	681b      	ldr	r3, [r3, #0]
 800cfe8:	4a71      	ldr	r2, [pc, #452]	@ (800d1b0 <HAL_DMA_IRQHandler+0x6c4>)
 800cfea:	4293      	cmp	r3, r2
 800cfec:	d009      	beq.n	800d002 <HAL_DMA_IRQHandler+0x516>
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	681b      	ldr	r3, [r3, #0]
 800cff2:	4a70      	ldr	r2, [pc, #448]	@ (800d1b4 <HAL_DMA_IRQHandler+0x6c8>)
 800cff4:	4293      	cmp	r3, r2
 800cff6:	d004      	beq.n	800d002 <HAL_DMA_IRQHandler+0x516>
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	681b      	ldr	r3, [r3, #0]
 800cffc:	4a6e      	ldr	r2, [pc, #440]	@ (800d1b8 <HAL_DMA_IRQHandler+0x6cc>)
 800cffe:	4293      	cmp	r3, r2
 800d000:	d10a      	bne.n	800d018 <HAL_DMA_IRQHandler+0x52c>
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	681b      	ldr	r3, [r3, #0]
 800d006:	681b      	ldr	r3, [r3, #0]
 800d008:	f003 0308 	and.w	r3, r3, #8
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	bf14      	ite	ne
 800d010:	2301      	movne	r3, #1
 800d012:	2300      	moveq	r3, #0
 800d014:	b2db      	uxtb	r3, r3
 800d016:	e009      	b.n	800d02c <HAL_DMA_IRQHandler+0x540>
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	681b      	ldr	r3, [r3, #0]
 800d01c:	681b      	ldr	r3, [r3, #0]
 800d01e:	f003 0304 	and.w	r3, r3, #4
 800d022:	2b00      	cmp	r3, #0
 800d024:	bf14      	ite	ne
 800d026:	2301      	movne	r3, #1
 800d028:	2300      	moveq	r3, #0
 800d02a:	b2db      	uxtb	r3, r3
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	d03e      	beq.n	800d0ae <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d034:	f003 031f 	and.w	r3, r3, #31
 800d038:	2210      	movs	r2, #16
 800d03a:	409a      	lsls	r2, r3
 800d03c:	6a3b      	ldr	r3, [r7, #32]
 800d03e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	681b      	ldr	r3, [r3, #0]
 800d044:	681b      	ldr	r3, [r3, #0]
 800d046:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	d018      	beq.n	800d080 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	681b      	ldr	r3, [r3, #0]
 800d052:	681b      	ldr	r3, [r3, #0]
 800d054:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800d058:	2b00      	cmp	r3, #0
 800d05a:	d108      	bne.n	800d06e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d060:	2b00      	cmp	r3, #0
 800d062:	d024      	beq.n	800d0ae <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d068:	6878      	ldr	r0, [r7, #4]
 800d06a:	4798      	blx	r3
 800d06c:	e01f      	b.n	800d0ae <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d072:	2b00      	cmp	r3, #0
 800d074:	d01b      	beq.n	800d0ae <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d07a:	6878      	ldr	r0, [r7, #4]
 800d07c:	4798      	blx	r3
 800d07e:	e016      	b.n	800d0ae <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	681b      	ldr	r3, [r3, #0]
 800d084:	681b      	ldr	r3, [r3, #0]
 800d086:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d107      	bne.n	800d09e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	681b      	ldr	r3, [r3, #0]
 800d092:	681a      	ldr	r2, [r3, #0]
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	681b      	ldr	r3, [r3, #0]
 800d098:	f022 0208 	bic.w	r2, r2, #8
 800d09c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	d003      	beq.n	800d0ae <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d0aa:	6878      	ldr	r0, [r7, #4]
 800d0ac:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d0b2:	f003 031f 	and.w	r3, r3, #31
 800d0b6:	2220      	movs	r2, #32
 800d0b8:	409a      	lsls	r2, r3
 800d0ba:	69bb      	ldr	r3, [r7, #24]
 800d0bc:	4013      	ands	r3, r2
 800d0be:	2b00      	cmp	r3, #0
 800d0c0:	f000 8110 	beq.w	800d2e4 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	4a2c      	ldr	r2, [pc, #176]	@ (800d17c <HAL_DMA_IRQHandler+0x690>)
 800d0ca:	4293      	cmp	r3, r2
 800d0cc:	d04a      	beq.n	800d164 <HAL_DMA_IRQHandler+0x678>
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	681b      	ldr	r3, [r3, #0]
 800d0d2:	4a2b      	ldr	r2, [pc, #172]	@ (800d180 <HAL_DMA_IRQHandler+0x694>)
 800d0d4:	4293      	cmp	r3, r2
 800d0d6:	d045      	beq.n	800d164 <HAL_DMA_IRQHandler+0x678>
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	681b      	ldr	r3, [r3, #0]
 800d0dc:	4a29      	ldr	r2, [pc, #164]	@ (800d184 <HAL_DMA_IRQHandler+0x698>)
 800d0de:	4293      	cmp	r3, r2
 800d0e0:	d040      	beq.n	800d164 <HAL_DMA_IRQHandler+0x678>
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	681b      	ldr	r3, [r3, #0]
 800d0e6:	4a28      	ldr	r2, [pc, #160]	@ (800d188 <HAL_DMA_IRQHandler+0x69c>)
 800d0e8:	4293      	cmp	r3, r2
 800d0ea:	d03b      	beq.n	800d164 <HAL_DMA_IRQHandler+0x678>
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	681b      	ldr	r3, [r3, #0]
 800d0f0:	4a26      	ldr	r2, [pc, #152]	@ (800d18c <HAL_DMA_IRQHandler+0x6a0>)
 800d0f2:	4293      	cmp	r3, r2
 800d0f4:	d036      	beq.n	800d164 <HAL_DMA_IRQHandler+0x678>
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	681b      	ldr	r3, [r3, #0]
 800d0fa:	4a25      	ldr	r2, [pc, #148]	@ (800d190 <HAL_DMA_IRQHandler+0x6a4>)
 800d0fc:	4293      	cmp	r3, r2
 800d0fe:	d031      	beq.n	800d164 <HAL_DMA_IRQHandler+0x678>
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	681b      	ldr	r3, [r3, #0]
 800d104:	4a23      	ldr	r2, [pc, #140]	@ (800d194 <HAL_DMA_IRQHandler+0x6a8>)
 800d106:	4293      	cmp	r3, r2
 800d108:	d02c      	beq.n	800d164 <HAL_DMA_IRQHandler+0x678>
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	4a22      	ldr	r2, [pc, #136]	@ (800d198 <HAL_DMA_IRQHandler+0x6ac>)
 800d110:	4293      	cmp	r3, r2
 800d112:	d027      	beq.n	800d164 <HAL_DMA_IRQHandler+0x678>
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	681b      	ldr	r3, [r3, #0]
 800d118:	4a20      	ldr	r2, [pc, #128]	@ (800d19c <HAL_DMA_IRQHandler+0x6b0>)
 800d11a:	4293      	cmp	r3, r2
 800d11c:	d022      	beq.n	800d164 <HAL_DMA_IRQHandler+0x678>
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	681b      	ldr	r3, [r3, #0]
 800d122:	4a1f      	ldr	r2, [pc, #124]	@ (800d1a0 <HAL_DMA_IRQHandler+0x6b4>)
 800d124:	4293      	cmp	r3, r2
 800d126:	d01d      	beq.n	800d164 <HAL_DMA_IRQHandler+0x678>
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	681b      	ldr	r3, [r3, #0]
 800d12c:	4a1d      	ldr	r2, [pc, #116]	@ (800d1a4 <HAL_DMA_IRQHandler+0x6b8>)
 800d12e:	4293      	cmp	r3, r2
 800d130:	d018      	beq.n	800d164 <HAL_DMA_IRQHandler+0x678>
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	681b      	ldr	r3, [r3, #0]
 800d136:	4a1c      	ldr	r2, [pc, #112]	@ (800d1a8 <HAL_DMA_IRQHandler+0x6bc>)
 800d138:	4293      	cmp	r3, r2
 800d13a:	d013      	beq.n	800d164 <HAL_DMA_IRQHandler+0x678>
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	681b      	ldr	r3, [r3, #0]
 800d140:	4a1a      	ldr	r2, [pc, #104]	@ (800d1ac <HAL_DMA_IRQHandler+0x6c0>)
 800d142:	4293      	cmp	r3, r2
 800d144:	d00e      	beq.n	800d164 <HAL_DMA_IRQHandler+0x678>
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	681b      	ldr	r3, [r3, #0]
 800d14a:	4a19      	ldr	r2, [pc, #100]	@ (800d1b0 <HAL_DMA_IRQHandler+0x6c4>)
 800d14c:	4293      	cmp	r3, r2
 800d14e:	d009      	beq.n	800d164 <HAL_DMA_IRQHandler+0x678>
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	681b      	ldr	r3, [r3, #0]
 800d154:	4a17      	ldr	r2, [pc, #92]	@ (800d1b4 <HAL_DMA_IRQHandler+0x6c8>)
 800d156:	4293      	cmp	r3, r2
 800d158:	d004      	beq.n	800d164 <HAL_DMA_IRQHandler+0x678>
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	681b      	ldr	r3, [r3, #0]
 800d15e:	4a16      	ldr	r2, [pc, #88]	@ (800d1b8 <HAL_DMA_IRQHandler+0x6cc>)
 800d160:	4293      	cmp	r3, r2
 800d162:	d12b      	bne.n	800d1bc <HAL_DMA_IRQHandler+0x6d0>
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	681b      	ldr	r3, [r3, #0]
 800d168:	681b      	ldr	r3, [r3, #0]
 800d16a:	f003 0310 	and.w	r3, r3, #16
 800d16e:	2b00      	cmp	r3, #0
 800d170:	bf14      	ite	ne
 800d172:	2301      	movne	r3, #1
 800d174:	2300      	moveq	r3, #0
 800d176:	b2db      	uxtb	r3, r3
 800d178:	e02a      	b.n	800d1d0 <HAL_DMA_IRQHandler+0x6e4>
 800d17a:	bf00      	nop
 800d17c:	40020010 	.word	0x40020010
 800d180:	40020028 	.word	0x40020028
 800d184:	40020040 	.word	0x40020040
 800d188:	40020058 	.word	0x40020058
 800d18c:	40020070 	.word	0x40020070
 800d190:	40020088 	.word	0x40020088
 800d194:	400200a0 	.word	0x400200a0
 800d198:	400200b8 	.word	0x400200b8
 800d19c:	40020410 	.word	0x40020410
 800d1a0:	40020428 	.word	0x40020428
 800d1a4:	40020440 	.word	0x40020440
 800d1a8:	40020458 	.word	0x40020458
 800d1ac:	40020470 	.word	0x40020470
 800d1b0:	40020488 	.word	0x40020488
 800d1b4:	400204a0 	.word	0x400204a0
 800d1b8:	400204b8 	.word	0x400204b8
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	681b      	ldr	r3, [r3, #0]
 800d1c0:	681b      	ldr	r3, [r3, #0]
 800d1c2:	f003 0302 	and.w	r3, r3, #2
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	bf14      	ite	ne
 800d1ca:	2301      	movne	r3, #1
 800d1cc:	2300      	moveq	r3, #0
 800d1ce:	b2db      	uxtb	r3, r3
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	f000 8087 	beq.w	800d2e4 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d1da:	f003 031f 	and.w	r3, r3, #31
 800d1de:	2220      	movs	r2, #32
 800d1e0:	409a      	lsls	r2, r3
 800d1e2:	6a3b      	ldr	r3, [r7, #32]
 800d1e4:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800d1ec:	b2db      	uxtb	r3, r3
 800d1ee:	2b04      	cmp	r3, #4
 800d1f0:	d139      	bne.n	800d266 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	681b      	ldr	r3, [r3, #0]
 800d1f6:	681a      	ldr	r2, [r3, #0]
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	681b      	ldr	r3, [r3, #0]
 800d1fc:	f022 0216 	bic.w	r2, r2, #22
 800d200:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	681b      	ldr	r3, [r3, #0]
 800d206:	695a      	ldr	r2, [r3, #20]
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	681b      	ldr	r3, [r3, #0]
 800d20c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800d210:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d216:	2b00      	cmp	r3, #0
 800d218:	d103      	bne.n	800d222 <HAL_DMA_IRQHandler+0x736>
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d21e:	2b00      	cmp	r3, #0
 800d220:	d007      	beq.n	800d232 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	681b      	ldr	r3, [r3, #0]
 800d226:	681a      	ldr	r2, [r3, #0]
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	681b      	ldr	r3, [r3, #0]
 800d22c:	f022 0208 	bic.w	r2, r2, #8
 800d230:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d236:	f003 031f 	and.w	r3, r3, #31
 800d23a:	223f      	movs	r2, #63	@ 0x3f
 800d23c:	409a      	lsls	r2, r3
 800d23e:	6a3b      	ldr	r3, [r7, #32]
 800d240:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	2201      	movs	r2, #1
 800d246:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	2200      	movs	r2, #0
 800d24e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d256:	2b00      	cmp	r3, #0
 800d258:	f000 834a 	beq.w	800d8f0 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d260:	6878      	ldr	r0, [r7, #4]
 800d262:	4798      	blx	r3
          }
          return;
 800d264:	e344      	b.n	800d8f0 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	681b      	ldr	r3, [r3, #0]
 800d26a:	681b      	ldr	r3, [r3, #0]
 800d26c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800d270:	2b00      	cmp	r3, #0
 800d272:	d018      	beq.n	800d2a6 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	681b      	ldr	r3, [r3, #0]
 800d278:	681b      	ldr	r3, [r3, #0]
 800d27a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800d27e:	2b00      	cmp	r3, #0
 800d280:	d108      	bne.n	800d294 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d286:	2b00      	cmp	r3, #0
 800d288:	d02c      	beq.n	800d2e4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d28e:	6878      	ldr	r0, [r7, #4]
 800d290:	4798      	blx	r3
 800d292:	e027      	b.n	800d2e4 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d298:	2b00      	cmp	r3, #0
 800d29a:	d023      	beq.n	800d2e4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d2a0:	6878      	ldr	r0, [r7, #4]
 800d2a2:	4798      	blx	r3
 800d2a4:	e01e      	b.n	800d2e4 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	681b      	ldr	r3, [r3, #0]
 800d2aa:	681b      	ldr	r3, [r3, #0]
 800d2ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	d10f      	bne.n	800d2d4 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	681b      	ldr	r3, [r3, #0]
 800d2b8:	681a      	ldr	r2, [r3, #0]
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	681b      	ldr	r3, [r3, #0]
 800d2be:	f022 0210 	bic.w	r2, r2, #16
 800d2c2:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	2201      	movs	r2, #1
 800d2c8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	2200      	movs	r2, #0
 800d2d0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	d003      	beq.n	800d2e4 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d2e0:	6878      	ldr	r0, [r7, #4]
 800d2e2:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	f000 8306 	beq.w	800d8fa <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d2f2:	f003 0301 	and.w	r3, r3, #1
 800d2f6:	2b00      	cmp	r3, #0
 800d2f8:	f000 8088 	beq.w	800d40c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	2204      	movs	r2, #4
 800d300:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	681b      	ldr	r3, [r3, #0]
 800d308:	4a7a      	ldr	r2, [pc, #488]	@ (800d4f4 <HAL_DMA_IRQHandler+0xa08>)
 800d30a:	4293      	cmp	r3, r2
 800d30c:	d04a      	beq.n	800d3a4 <HAL_DMA_IRQHandler+0x8b8>
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	681b      	ldr	r3, [r3, #0]
 800d312:	4a79      	ldr	r2, [pc, #484]	@ (800d4f8 <HAL_DMA_IRQHandler+0xa0c>)
 800d314:	4293      	cmp	r3, r2
 800d316:	d045      	beq.n	800d3a4 <HAL_DMA_IRQHandler+0x8b8>
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	681b      	ldr	r3, [r3, #0]
 800d31c:	4a77      	ldr	r2, [pc, #476]	@ (800d4fc <HAL_DMA_IRQHandler+0xa10>)
 800d31e:	4293      	cmp	r3, r2
 800d320:	d040      	beq.n	800d3a4 <HAL_DMA_IRQHandler+0x8b8>
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	681b      	ldr	r3, [r3, #0]
 800d326:	4a76      	ldr	r2, [pc, #472]	@ (800d500 <HAL_DMA_IRQHandler+0xa14>)
 800d328:	4293      	cmp	r3, r2
 800d32a:	d03b      	beq.n	800d3a4 <HAL_DMA_IRQHandler+0x8b8>
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	681b      	ldr	r3, [r3, #0]
 800d330:	4a74      	ldr	r2, [pc, #464]	@ (800d504 <HAL_DMA_IRQHandler+0xa18>)
 800d332:	4293      	cmp	r3, r2
 800d334:	d036      	beq.n	800d3a4 <HAL_DMA_IRQHandler+0x8b8>
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	681b      	ldr	r3, [r3, #0]
 800d33a:	4a73      	ldr	r2, [pc, #460]	@ (800d508 <HAL_DMA_IRQHandler+0xa1c>)
 800d33c:	4293      	cmp	r3, r2
 800d33e:	d031      	beq.n	800d3a4 <HAL_DMA_IRQHandler+0x8b8>
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	681b      	ldr	r3, [r3, #0]
 800d344:	4a71      	ldr	r2, [pc, #452]	@ (800d50c <HAL_DMA_IRQHandler+0xa20>)
 800d346:	4293      	cmp	r3, r2
 800d348:	d02c      	beq.n	800d3a4 <HAL_DMA_IRQHandler+0x8b8>
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	681b      	ldr	r3, [r3, #0]
 800d34e:	4a70      	ldr	r2, [pc, #448]	@ (800d510 <HAL_DMA_IRQHandler+0xa24>)
 800d350:	4293      	cmp	r3, r2
 800d352:	d027      	beq.n	800d3a4 <HAL_DMA_IRQHandler+0x8b8>
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	681b      	ldr	r3, [r3, #0]
 800d358:	4a6e      	ldr	r2, [pc, #440]	@ (800d514 <HAL_DMA_IRQHandler+0xa28>)
 800d35a:	4293      	cmp	r3, r2
 800d35c:	d022      	beq.n	800d3a4 <HAL_DMA_IRQHandler+0x8b8>
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	681b      	ldr	r3, [r3, #0]
 800d362:	4a6d      	ldr	r2, [pc, #436]	@ (800d518 <HAL_DMA_IRQHandler+0xa2c>)
 800d364:	4293      	cmp	r3, r2
 800d366:	d01d      	beq.n	800d3a4 <HAL_DMA_IRQHandler+0x8b8>
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	681b      	ldr	r3, [r3, #0]
 800d36c:	4a6b      	ldr	r2, [pc, #428]	@ (800d51c <HAL_DMA_IRQHandler+0xa30>)
 800d36e:	4293      	cmp	r3, r2
 800d370:	d018      	beq.n	800d3a4 <HAL_DMA_IRQHandler+0x8b8>
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	681b      	ldr	r3, [r3, #0]
 800d376:	4a6a      	ldr	r2, [pc, #424]	@ (800d520 <HAL_DMA_IRQHandler+0xa34>)
 800d378:	4293      	cmp	r3, r2
 800d37a:	d013      	beq.n	800d3a4 <HAL_DMA_IRQHandler+0x8b8>
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	681b      	ldr	r3, [r3, #0]
 800d380:	4a68      	ldr	r2, [pc, #416]	@ (800d524 <HAL_DMA_IRQHandler+0xa38>)
 800d382:	4293      	cmp	r3, r2
 800d384:	d00e      	beq.n	800d3a4 <HAL_DMA_IRQHandler+0x8b8>
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	681b      	ldr	r3, [r3, #0]
 800d38a:	4a67      	ldr	r2, [pc, #412]	@ (800d528 <HAL_DMA_IRQHandler+0xa3c>)
 800d38c:	4293      	cmp	r3, r2
 800d38e:	d009      	beq.n	800d3a4 <HAL_DMA_IRQHandler+0x8b8>
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	681b      	ldr	r3, [r3, #0]
 800d394:	4a65      	ldr	r2, [pc, #404]	@ (800d52c <HAL_DMA_IRQHandler+0xa40>)
 800d396:	4293      	cmp	r3, r2
 800d398:	d004      	beq.n	800d3a4 <HAL_DMA_IRQHandler+0x8b8>
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	681b      	ldr	r3, [r3, #0]
 800d39e:	4a64      	ldr	r2, [pc, #400]	@ (800d530 <HAL_DMA_IRQHandler+0xa44>)
 800d3a0:	4293      	cmp	r3, r2
 800d3a2:	d108      	bne.n	800d3b6 <HAL_DMA_IRQHandler+0x8ca>
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	681b      	ldr	r3, [r3, #0]
 800d3a8:	681a      	ldr	r2, [r3, #0]
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	681b      	ldr	r3, [r3, #0]
 800d3ae:	f022 0201 	bic.w	r2, r2, #1
 800d3b2:	601a      	str	r2, [r3, #0]
 800d3b4:	e007      	b.n	800d3c6 <HAL_DMA_IRQHandler+0x8da>
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	681b      	ldr	r3, [r3, #0]
 800d3ba:	681a      	ldr	r2, [r3, #0]
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	681b      	ldr	r3, [r3, #0]
 800d3c0:	f022 0201 	bic.w	r2, r2, #1
 800d3c4:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800d3c6:	68fb      	ldr	r3, [r7, #12]
 800d3c8:	3301      	adds	r3, #1
 800d3ca:	60fb      	str	r3, [r7, #12]
 800d3cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d3ce:	429a      	cmp	r2, r3
 800d3d0:	d307      	bcc.n	800d3e2 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	681b      	ldr	r3, [r3, #0]
 800d3d6:	681b      	ldr	r3, [r3, #0]
 800d3d8:	f003 0301 	and.w	r3, r3, #1
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	d1f2      	bne.n	800d3c6 <HAL_DMA_IRQHandler+0x8da>
 800d3e0:	e000      	b.n	800d3e4 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800d3e2:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	681b      	ldr	r3, [r3, #0]
 800d3e8:	681b      	ldr	r3, [r3, #0]
 800d3ea:	f003 0301 	and.w	r3, r3, #1
 800d3ee:	2b00      	cmp	r3, #0
 800d3f0:	d004      	beq.n	800d3fc <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	2203      	movs	r2, #3
 800d3f6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800d3fa:	e003      	b.n	800d404 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	2201      	movs	r2, #1
 800d400:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	2200      	movs	r2, #0
 800d408:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d410:	2b00      	cmp	r3, #0
 800d412:	f000 8272 	beq.w	800d8fa <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d41a:	6878      	ldr	r0, [r7, #4]
 800d41c:	4798      	blx	r3
 800d41e:	e26c      	b.n	800d8fa <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	681b      	ldr	r3, [r3, #0]
 800d424:	4a43      	ldr	r2, [pc, #268]	@ (800d534 <HAL_DMA_IRQHandler+0xa48>)
 800d426:	4293      	cmp	r3, r2
 800d428:	d022      	beq.n	800d470 <HAL_DMA_IRQHandler+0x984>
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	681b      	ldr	r3, [r3, #0]
 800d42e:	4a42      	ldr	r2, [pc, #264]	@ (800d538 <HAL_DMA_IRQHandler+0xa4c>)
 800d430:	4293      	cmp	r3, r2
 800d432:	d01d      	beq.n	800d470 <HAL_DMA_IRQHandler+0x984>
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	681b      	ldr	r3, [r3, #0]
 800d438:	4a40      	ldr	r2, [pc, #256]	@ (800d53c <HAL_DMA_IRQHandler+0xa50>)
 800d43a:	4293      	cmp	r3, r2
 800d43c:	d018      	beq.n	800d470 <HAL_DMA_IRQHandler+0x984>
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	681b      	ldr	r3, [r3, #0]
 800d442:	4a3f      	ldr	r2, [pc, #252]	@ (800d540 <HAL_DMA_IRQHandler+0xa54>)
 800d444:	4293      	cmp	r3, r2
 800d446:	d013      	beq.n	800d470 <HAL_DMA_IRQHandler+0x984>
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	681b      	ldr	r3, [r3, #0]
 800d44c:	4a3d      	ldr	r2, [pc, #244]	@ (800d544 <HAL_DMA_IRQHandler+0xa58>)
 800d44e:	4293      	cmp	r3, r2
 800d450:	d00e      	beq.n	800d470 <HAL_DMA_IRQHandler+0x984>
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	681b      	ldr	r3, [r3, #0]
 800d456:	4a3c      	ldr	r2, [pc, #240]	@ (800d548 <HAL_DMA_IRQHandler+0xa5c>)
 800d458:	4293      	cmp	r3, r2
 800d45a:	d009      	beq.n	800d470 <HAL_DMA_IRQHandler+0x984>
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	681b      	ldr	r3, [r3, #0]
 800d460:	4a3a      	ldr	r2, [pc, #232]	@ (800d54c <HAL_DMA_IRQHandler+0xa60>)
 800d462:	4293      	cmp	r3, r2
 800d464:	d004      	beq.n	800d470 <HAL_DMA_IRQHandler+0x984>
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	681b      	ldr	r3, [r3, #0]
 800d46a:	4a39      	ldr	r2, [pc, #228]	@ (800d550 <HAL_DMA_IRQHandler+0xa64>)
 800d46c:	4293      	cmp	r3, r2
 800d46e:	d101      	bne.n	800d474 <HAL_DMA_IRQHandler+0x988>
 800d470:	2301      	movs	r3, #1
 800d472:	e000      	b.n	800d476 <HAL_DMA_IRQHandler+0x98a>
 800d474:	2300      	movs	r3, #0
 800d476:	2b00      	cmp	r3, #0
 800d478:	f000 823f 	beq.w	800d8fa <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	681b      	ldr	r3, [r3, #0]
 800d480:	681b      	ldr	r3, [r3, #0]
 800d482:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d488:	f003 031f 	and.w	r3, r3, #31
 800d48c:	2204      	movs	r2, #4
 800d48e:	409a      	lsls	r2, r3
 800d490:	697b      	ldr	r3, [r7, #20]
 800d492:	4013      	ands	r3, r2
 800d494:	2b00      	cmp	r3, #0
 800d496:	f000 80cd 	beq.w	800d634 <HAL_DMA_IRQHandler+0xb48>
 800d49a:	693b      	ldr	r3, [r7, #16]
 800d49c:	f003 0304 	and.w	r3, r3, #4
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	f000 80c7 	beq.w	800d634 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d4aa:	f003 031f 	and.w	r3, r3, #31
 800d4ae:	2204      	movs	r2, #4
 800d4b0:	409a      	lsls	r2, r3
 800d4b2:	69fb      	ldr	r3, [r7, #28]
 800d4b4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800d4b6:	693b      	ldr	r3, [r7, #16]
 800d4b8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	d049      	beq.n	800d554 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800d4c0:	693b      	ldr	r3, [r7, #16]
 800d4c2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	d109      	bne.n	800d4de <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	f000 8210 	beq.w	800d8f4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d4d8:	6878      	ldr	r0, [r7, #4]
 800d4da:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800d4dc:	e20a      	b.n	800d8f4 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	f000 8206 	beq.w	800d8f4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d4ec:	6878      	ldr	r0, [r7, #4]
 800d4ee:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800d4f0:	e200      	b.n	800d8f4 <HAL_DMA_IRQHandler+0xe08>
 800d4f2:	bf00      	nop
 800d4f4:	40020010 	.word	0x40020010
 800d4f8:	40020028 	.word	0x40020028
 800d4fc:	40020040 	.word	0x40020040
 800d500:	40020058 	.word	0x40020058
 800d504:	40020070 	.word	0x40020070
 800d508:	40020088 	.word	0x40020088
 800d50c:	400200a0 	.word	0x400200a0
 800d510:	400200b8 	.word	0x400200b8
 800d514:	40020410 	.word	0x40020410
 800d518:	40020428 	.word	0x40020428
 800d51c:	40020440 	.word	0x40020440
 800d520:	40020458 	.word	0x40020458
 800d524:	40020470 	.word	0x40020470
 800d528:	40020488 	.word	0x40020488
 800d52c:	400204a0 	.word	0x400204a0
 800d530:	400204b8 	.word	0x400204b8
 800d534:	58025408 	.word	0x58025408
 800d538:	5802541c 	.word	0x5802541c
 800d53c:	58025430 	.word	0x58025430
 800d540:	58025444 	.word	0x58025444
 800d544:	58025458 	.word	0x58025458
 800d548:	5802546c 	.word	0x5802546c
 800d54c:	58025480 	.word	0x58025480
 800d550:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800d554:	693b      	ldr	r3, [r7, #16]
 800d556:	f003 0320 	and.w	r3, r3, #32
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	d160      	bne.n	800d620 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	681b      	ldr	r3, [r3, #0]
 800d562:	4a7f      	ldr	r2, [pc, #508]	@ (800d760 <HAL_DMA_IRQHandler+0xc74>)
 800d564:	4293      	cmp	r3, r2
 800d566:	d04a      	beq.n	800d5fe <HAL_DMA_IRQHandler+0xb12>
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	681b      	ldr	r3, [r3, #0]
 800d56c:	4a7d      	ldr	r2, [pc, #500]	@ (800d764 <HAL_DMA_IRQHandler+0xc78>)
 800d56e:	4293      	cmp	r3, r2
 800d570:	d045      	beq.n	800d5fe <HAL_DMA_IRQHandler+0xb12>
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	681b      	ldr	r3, [r3, #0]
 800d576:	4a7c      	ldr	r2, [pc, #496]	@ (800d768 <HAL_DMA_IRQHandler+0xc7c>)
 800d578:	4293      	cmp	r3, r2
 800d57a:	d040      	beq.n	800d5fe <HAL_DMA_IRQHandler+0xb12>
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	681b      	ldr	r3, [r3, #0]
 800d580:	4a7a      	ldr	r2, [pc, #488]	@ (800d76c <HAL_DMA_IRQHandler+0xc80>)
 800d582:	4293      	cmp	r3, r2
 800d584:	d03b      	beq.n	800d5fe <HAL_DMA_IRQHandler+0xb12>
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	681b      	ldr	r3, [r3, #0]
 800d58a:	4a79      	ldr	r2, [pc, #484]	@ (800d770 <HAL_DMA_IRQHandler+0xc84>)
 800d58c:	4293      	cmp	r3, r2
 800d58e:	d036      	beq.n	800d5fe <HAL_DMA_IRQHandler+0xb12>
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	681b      	ldr	r3, [r3, #0]
 800d594:	4a77      	ldr	r2, [pc, #476]	@ (800d774 <HAL_DMA_IRQHandler+0xc88>)
 800d596:	4293      	cmp	r3, r2
 800d598:	d031      	beq.n	800d5fe <HAL_DMA_IRQHandler+0xb12>
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	681b      	ldr	r3, [r3, #0]
 800d59e:	4a76      	ldr	r2, [pc, #472]	@ (800d778 <HAL_DMA_IRQHandler+0xc8c>)
 800d5a0:	4293      	cmp	r3, r2
 800d5a2:	d02c      	beq.n	800d5fe <HAL_DMA_IRQHandler+0xb12>
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	681b      	ldr	r3, [r3, #0]
 800d5a8:	4a74      	ldr	r2, [pc, #464]	@ (800d77c <HAL_DMA_IRQHandler+0xc90>)
 800d5aa:	4293      	cmp	r3, r2
 800d5ac:	d027      	beq.n	800d5fe <HAL_DMA_IRQHandler+0xb12>
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	681b      	ldr	r3, [r3, #0]
 800d5b2:	4a73      	ldr	r2, [pc, #460]	@ (800d780 <HAL_DMA_IRQHandler+0xc94>)
 800d5b4:	4293      	cmp	r3, r2
 800d5b6:	d022      	beq.n	800d5fe <HAL_DMA_IRQHandler+0xb12>
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	681b      	ldr	r3, [r3, #0]
 800d5bc:	4a71      	ldr	r2, [pc, #452]	@ (800d784 <HAL_DMA_IRQHandler+0xc98>)
 800d5be:	4293      	cmp	r3, r2
 800d5c0:	d01d      	beq.n	800d5fe <HAL_DMA_IRQHandler+0xb12>
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	681b      	ldr	r3, [r3, #0]
 800d5c6:	4a70      	ldr	r2, [pc, #448]	@ (800d788 <HAL_DMA_IRQHandler+0xc9c>)
 800d5c8:	4293      	cmp	r3, r2
 800d5ca:	d018      	beq.n	800d5fe <HAL_DMA_IRQHandler+0xb12>
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	681b      	ldr	r3, [r3, #0]
 800d5d0:	4a6e      	ldr	r2, [pc, #440]	@ (800d78c <HAL_DMA_IRQHandler+0xca0>)
 800d5d2:	4293      	cmp	r3, r2
 800d5d4:	d013      	beq.n	800d5fe <HAL_DMA_IRQHandler+0xb12>
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	681b      	ldr	r3, [r3, #0]
 800d5da:	4a6d      	ldr	r2, [pc, #436]	@ (800d790 <HAL_DMA_IRQHandler+0xca4>)
 800d5dc:	4293      	cmp	r3, r2
 800d5de:	d00e      	beq.n	800d5fe <HAL_DMA_IRQHandler+0xb12>
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	681b      	ldr	r3, [r3, #0]
 800d5e4:	4a6b      	ldr	r2, [pc, #428]	@ (800d794 <HAL_DMA_IRQHandler+0xca8>)
 800d5e6:	4293      	cmp	r3, r2
 800d5e8:	d009      	beq.n	800d5fe <HAL_DMA_IRQHandler+0xb12>
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	681b      	ldr	r3, [r3, #0]
 800d5ee:	4a6a      	ldr	r2, [pc, #424]	@ (800d798 <HAL_DMA_IRQHandler+0xcac>)
 800d5f0:	4293      	cmp	r3, r2
 800d5f2:	d004      	beq.n	800d5fe <HAL_DMA_IRQHandler+0xb12>
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	681b      	ldr	r3, [r3, #0]
 800d5f8:	4a68      	ldr	r2, [pc, #416]	@ (800d79c <HAL_DMA_IRQHandler+0xcb0>)
 800d5fa:	4293      	cmp	r3, r2
 800d5fc:	d108      	bne.n	800d610 <HAL_DMA_IRQHandler+0xb24>
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	681b      	ldr	r3, [r3, #0]
 800d602:	681a      	ldr	r2, [r3, #0]
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	681b      	ldr	r3, [r3, #0]
 800d608:	f022 0208 	bic.w	r2, r2, #8
 800d60c:	601a      	str	r2, [r3, #0]
 800d60e:	e007      	b.n	800d620 <HAL_DMA_IRQHandler+0xb34>
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	681b      	ldr	r3, [r3, #0]
 800d614:	681a      	ldr	r2, [r3, #0]
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	681b      	ldr	r3, [r3, #0]
 800d61a:	f022 0204 	bic.w	r2, r2, #4
 800d61e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d624:	2b00      	cmp	r3, #0
 800d626:	f000 8165 	beq.w	800d8f4 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d62e:	6878      	ldr	r0, [r7, #4]
 800d630:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800d632:	e15f      	b.n	800d8f4 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d638:	f003 031f 	and.w	r3, r3, #31
 800d63c:	2202      	movs	r2, #2
 800d63e:	409a      	lsls	r2, r3
 800d640:	697b      	ldr	r3, [r7, #20]
 800d642:	4013      	ands	r3, r2
 800d644:	2b00      	cmp	r3, #0
 800d646:	f000 80c5 	beq.w	800d7d4 <HAL_DMA_IRQHandler+0xce8>
 800d64a:	693b      	ldr	r3, [r7, #16]
 800d64c:	f003 0302 	and.w	r3, r3, #2
 800d650:	2b00      	cmp	r3, #0
 800d652:	f000 80bf 	beq.w	800d7d4 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d65a:	f003 031f 	and.w	r3, r3, #31
 800d65e:	2202      	movs	r2, #2
 800d660:	409a      	lsls	r2, r3
 800d662:	69fb      	ldr	r3, [r7, #28]
 800d664:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800d666:	693b      	ldr	r3, [r7, #16]
 800d668:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d66c:	2b00      	cmp	r3, #0
 800d66e:	d018      	beq.n	800d6a2 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800d670:	693b      	ldr	r3, [r7, #16]
 800d672:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800d676:	2b00      	cmp	r3, #0
 800d678:	d109      	bne.n	800d68e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d67e:	2b00      	cmp	r3, #0
 800d680:	f000 813a 	beq.w	800d8f8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d688:	6878      	ldr	r0, [r7, #4]
 800d68a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800d68c:	e134      	b.n	800d8f8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d692:	2b00      	cmp	r3, #0
 800d694:	f000 8130 	beq.w	800d8f8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d69c:	6878      	ldr	r0, [r7, #4]
 800d69e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800d6a0:	e12a      	b.n	800d8f8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800d6a2:	693b      	ldr	r3, [r7, #16]
 800d6a4:	f003 0320 	and.w	r3, r3, #32
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	f040 8089 	bne.w	800d7c0 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	681b      	ldr	r3, [r3, #0]
 800d6b2:	4a2b      	ldr	r2, [pc, #172]	@ (800d760 <HAL_DMA_IRQHandler+0xc74>)
 800d6b4:	4293      	cmp	r3, r2
 800d6b6:	d04a      	beq.n	800d74e <HAL_DMA_IRQHandler+0xc62>
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	681b      	ldr	r3, [r3, #0]
 800d6bc:	4a29      	ldr	r2, [pc, #164]	@ (800d764 <HAL_DMA_IRQHandler+0xc78>)
 800d6be:	4293      	cmp	r3, r2
 800d6c0:	d045      	beq.n	800d74e <HAL_DMA_IRQHandler+0xc62>
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	681b      	ldr	r3, [r3, #0]
 800d6c6:	4a28      	ldr	r2, [pc, #160]	@ (800d768 <HAL_DMA_IRQHandler+0xc7c>)
 800d6c8:	4293      	cmp	r3, r2
 800d6ca:	d040      	beq.n	800d74e <HAL_DMA_IRQHandler+0xc62>
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	681b      	ldr	r3, [r3, #0]
 800d6d0:	4a26      	ldr	r2, [pc, #152]	@ (800d76c <HAL_DMA_IRQHandler+0xc80>)
 800d6d2:	4293      	cmp	r3, r2
 800d6d4:	d03b      	beq.n	800d74e <HAL_DMA_IRQHandler+0xc62>
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	681b      	ldr	r3, [r3, #0]
 800d6da:	4a25      	ldr	r2, [pc, #148]	@ (800d770 <HAL_DMA_IRQHandler+0xc84>)
 800d6dc:	4293      	cmp	r3, r2
 800d6de:	d036      	beq.n	800d74e <HAL_DMA_IRQHandler+0xc62>
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	681b      	ldr	r3, [r3, #0]
 800d6e4:	4a23      	ldr	r2, [pc, #140]	@ (800d774 <HAL_DMA_IRQHandler+0xc88>)
 800d6e6:	4293      	cmp	r3, r2
 800d6e8:	d031      	beq.n	800d74e <HAL_DMA_IRQHandler+0xc62>
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	681b      	ldr	r3, [r3, #0]
 800d6ee:	4a22      	ldr	r2, [pc, #136]	@ (800d778 <HAL_DMA_IRQHandler+0xc8c>)
 800d6f0:	4293      	cmp	r3, r2
 800d6f2:	d02c      	beq.n	800d74e <HAL_DMA_IRQHandler+0xc62>
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	681b      	ldr	r3, [r3, #0]
 800d6f8:	4a20      	ldr	r2, [pc, #128]	@ (800d77c <HAL_DMA_IRQHandler+0xc90>)
 800d6fa:	4293      	cmp	r3, r2
 800d6fc:	d027      	beq.n	800d74e <HAL_DMA_IRQHandler+0xc62>
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	681b      	ldr	r3, [r3, #0]
 800d702:	4a1f      	ldr	r2, [pc, #124]	@ (800d780 <HAL_DMA_IRQHandler+0xc94>)
 800d704:	4293      	cmp	r3, r2
 800d706:	d022      	beq.n	800d74e <HAL_DMA_IRQHandler+0xc62>
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	681b      	ldr	r3, [r3, #0]
 800d70c:	4a1d      	ldr	r2, [pc, #116]	@ (800d784 <HAL_DMA_IRQHandler+0xc98>)
 800d70e:	4293      	cmp	r3, r2
 800d710:	d01d      	beq.n	800d74e <HAL_DMA_IRQHandler+0xc62>
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	681b      	ldr	r3, [r3, #0]
 800d716:	4a1c      	ldr	r2, [pc, #112]	@ (800d788 <HAL_DMA_IRQHandler+0xc9c>)
 800d718:	4293      	cmp	r3, r2
 800d71a:	d018      	beq.n	800d74e <HAL_DMA_IRQHandler+0xc62>
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	681b      	ldr	r3, [r3, #0]
 800d720:	4a1a      	ldr	r2, [pc, #104]	@ (800d78c <HAL_DMA_IRQHandler+0xca0>)
 800d722:	4293      	cmp	r3, r2
 800d724:	d013      	beq.n	800d74e <HAL_DMA_IRQHandler+0xc62>
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	681b      	ldr	r3, [r3, #0]
 800d72a:	4a19      	ldr	r2, [pc, #100]	@ (800d790 <HAL_DMA_IRQHandler+0xca4>)
 800d72c:	4293      	cmp	r3, r2
 800d72e:	d00e      	beq.n	800d74e <HAL_DMA_IRQHandler+0xc62>
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	681b      	ldr	r3, [r3, #0]
 800d734:	4a17      	ldr	r2, [pc, #92]	@ (800d794 <HAL_DMA_IRQHandler+0xca8>)
 800d736:	4293      	cmp	r3, r2
 800d738:	d009      	beq.n	800d74e <HAL_DMA_IRQHandler+0xc62>
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	681b      	ldr	r3, [r3, #0]
 800d73e:	4a16      	ldr	r2, [pc, #88]	@ (800d798 <HAL_DMA_IRQHandler+0xcac>)
 800d740:	4293      	cmp	r3, r2
 800d742:	d004      	beq.n	800d74e <HAL_DMA_IRQHandler+0xc62>
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	681b      	ldr	r3, [r3, #0]
 800d748:	4a14      	ldr	r2, [pc, #80]	@ (800d79c <HAL_DMA_IRQHandler+0xcb0>)
 800d74a:	4293      	cmp	r3, r2
 800d74c:	d128      	bne.n	800d7a0 <HAL_DMA_IRQHandler+0xcb4>
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	681b      	ldr	r3, [r3, #0]
 800d752:	681a      	ldr	r2, [r3, #0]
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	681b      	ldr	r3, [r3, #0]
 800d758:	f022 0214 	bic.w	r2, r2, #20
 800d75c:	601a      	str	r2, [r3, #0]
 800d75e:	e027      	b.n	800d7b0 <HAL_DMA_IRQHandler+0xcc4>
 800d760:	40020010 	.word	0x40020010
 800d764:	40020028 	.word	0x40020028
 800d768:	40020040 	.word	0x40020040
 800d76c:	40020058 	.word	0x40020058
 800d770:	40020070 	.word	0x40020070
 800d774:	40020088 	.word	0x40020088
 800d778:	400200a0 	.word	0x400200a0
 800d77c:	400200b8 	.word	0x400200b8
 800d780:	40020410 	.word	0x40020410
 800d784:	40020428 	.word	0x40020428
 800d788:	40020440 	.word	0x40020440
 800d78c:	40020458 	.word	0x40020458
 800d790:	40020470 	.word	0x40020470
 800d794:	40020488 	.word	0x40020488
 800d798:	400204a0 	.word	0x400204a0
 800d79c:	400204b8 	.word	0x400204b8
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	681b      	ldr	r3, [r3, #0]
 800d7a4:	681a      	ldr	r2, [r3, #0]
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	681b      	ldr	r3, [r3, #0]
 800d7aa:	f022 020a 	bic.w	r2, r2, #10
 800d7ae:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	2201      	movs	r2, #1
 800d7b4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	2200      	movs	r2, #0
 800d7bc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	f000 8097 	beq.w	800d8f8 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d7ce:	6878      	ldr	r0, [r7, #4]
 800d7d0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800d7d2:	e091      	b.n	800d8f8 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d7d8:	f003 031f 	and.w	r3, r3, #31
 800d7dc:	2208      	movs	r2, #8
 800d7de:	409a      	lsls	r2, r3
 800d7e0:	697b      	ldr	r3, [r7, #20]
 800d7e2:	4013      	ands	r3, r2
 800d7e4:	2b00      	cmp	r3, #0
 800d7e6:	f000 8088 	beq.w	800d8fa <HAL_DMA_IRQHandler+0xe0e>
 800d7ea:	693b      	ldr	r3, [r7, #16]
 800d7ec:	f003 0308 	and.w	r3, r3, #8
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	f000 8082 	beq.w	800d8fa <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	681b      	ldr	r3, [r3, #0]
 800d7fa:	4a41      	ldr	r2, [pc, #260]	@ (800d900 <HAL_DMA_IRQHandler+0xe14>)
 800d7fc:	4293      	cmp	r3, r2
 800d7fe:	d04a      	beq.n	800d896 <HAL_DMA_IRQHandler+0xdaa>
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	681b      	ldr	r3, [r3, #0]
 800d804:	4a3f      	ldr	r2, [pc, #252]	@ (800d904 <HAL_DMA_IRQHandler+0xe18>)
 800d806:	4293      	cmp	r3, r2
 800d808:	d045      	beq.n	800d896 <HAL_DMA_IRQHandler+0xdaa>
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	681b      	ldr	r3, [r3, #0]
 800d80e:	4a3e      	ldr	r2, [pc, #248]	@ (800d908 <HAL_DMA_IRQHandler+0xe1c>)
 800d810:	4293      	cmp	r3, r2
 800d812:	d040      	beq.n	800d896 <HAL_DMA_IRQHandler+0xdaa>
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	681b      	ldr	r3, [r3, #0]
 800d818:	4a3c      	ldr	r2, [pc, #240]	@ (800d90c <HAL_DMA_IRQHandler+0xe20>)
 800d81a:	4293      	cmp	r3, r2
 800d81c:	d03b      	beq.n	800d896 <HAL_DMA_IRQHandler+0xdaa>
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	681b      	ldr	r3, [r3, #0]
 800d822:	4a3b      	ldr	r2, [pc, #236]	@ (800d910 <HAL_DMA_IRQHandler+0xe24>)
 800d824:	4293      	cmp	r3, r2
 800d826:	d036      	beq.n	800d896 <HAL_DMA_IRQHandler+0xdaa>
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	681b      	ldr	r3, [r3, #0]
 800d82c:	4a39      	ldr	r2, [pc, #228]	@ (800d914 <HAL_DMA_IRQHandler+0xe28>)
 800d82e:	4293      	cmp	r3, r2
 800d830:	d031      	beq.n	800d896 <HAL_DMA_IRQHandler+0xdaa>
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	681b      	ldr	r3, [r3, #0]
 800d836:	4a38      	ldr	r2, [pc, #224]	@ (800d918 <HAL_DMA_IRQHandler+0xe2c>)
 800d838:	4293      	cmp	r3, r2
 800d83a:	d02c      	beq.n	800d896 <HAL_DMA_IRQHandler+0xdaa>
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	681b      	ldr	r3, [r3, #0]
 800d840:	4a36      	ldr	r2, [pc, #216]	@ (800d91c <HAL_DMA_IRQHandler+0xe30>)
 800d842:	4293      	cmp	r3, r2
 800d844:	d027      	beq.n	800d896 <HAL_DMA_IRQHandler+0xdaa>
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	681b      	ldr	r3, [r3, #0]
 800d84a:	4a35      	ldr	r2, [pc, #212]	@ (800d920 <HAL_DMA_IRQHandler+0xe34>)
 800d84c:	4293      	cmp	r3, r2
 800d84e:	d022      	beq.n	800d896 <HAL_DMA_IRQHandler+0xdaa>
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	681b      	ldr	r3, [r3, #0]
 800d854:	4a33      	ldr	r2, [pc, #204]	@ (800d924 <HAL_DMA_IRQHandler+0xe38>)
 800d856:	4293      	cmp	r3, r2
 800d858:	d01d      	beq.n	800d896 <HAL_DMA_IRQHandler+0xdaa>
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	681b      	ldr	r3, [r3, #0]
 800d85e:	4a32      	ldr	r2, [pc, #200]	@ (800d928 <HAL_DMA_IRQHandler+0xe3c>)
 800d860:	4293      	cmp	r3, r2
 800d862:	d018      	beq.n	800d896 <HAL_DMA_IRQHandler+0xdaa>
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	681b      	ldr	r3, [r3, #0]
 800d868:	4a30      	ldr	r2, [pc, #192]	@ (800d92c <HAL_DMA_IRQHandler+0xe40>)
 800d86a:	4293      	cmp	r3, r2
 800d86c:	d013      	beq.n	800d896 <HAL_DMA_IRQHandler+0xdaa>
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	681b      	ldr	r3, [r3, #0]
 800d872:	4a2f      	ldr	r2, [pc, #188]	@ (800d930 <HAL_DMA_IRQHandler+0xe44>)
 800d874:	4293      	cmp	r3, r2
 800d876:	d00e      	beq.n	800d896 <HAL_DMA_IRQHandler+0xdaa>
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	681b      	ldr	r3, [r3, #0]
 800d87c:	4a2d      	ldr	r2, [pc, #180]	@ (800d934 <HAL_DMA_IRQHandler+0xe48>)
 800d87e:	4293      	cmp	r3, r2
 800d880:	d009      	beq.n	800d896 <HAL_DMA_IRQHandler+0xdaa>
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	681b      	ldr	r3, [r3, #0]
 800d886:	4a2c      	ldr	r2, [pc, #176]	@ (800d938 <HAL_DMA_IRQHandler+0xe4c>)
 800d888:	4293      	cmp	r3, r2
 800d88a:	d004      	beq.n	800d896 <HAL_DMA_IRQHandler+0xdaa>
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	681b      	ldr	r3, [r3, #0]
 800d890:	4a2a      	ldr	r2, [pc, #168]	@ (800d93c <HAL_DMA_IRQHandler+0xe50>)
 800d892:	4293      	cmp	r3, r2
 800d894:	d108      	bne.n	800d8a8 <HAL_DMA_IRQHandler+0xdbc>
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	681b      	ldr	r3, [r3, #0]
 800d89a:	681a      	ldr	r2, [r3, #0]
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	f022 021c 	bic.w	r2, r2, #28
 800d8a4:	601a      	str	r2, [r3, #0]
 800d8a6:	e007      	b.n	800d8b8 <HAL_DMA_IRQHandler+0xdcc>
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	681b      	ldr	r3, [r3, #0]
 800d8ac:	681a      	ldr	r2, [r3, #0]
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	681b      	ldr	r3, [r3, #0]
 800d8b2:	f022 020e 	bic.w	r2, r2, #14
 800d8b6:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d8bc:	f003 031f 	and.w	r3, r3, #31
 800d8c0:	2201      	movs	r2, #1
 800d8c2:	409a      	lsls	r2, r3
 800d8c4:	69fb      	ldr	r3, [r7, #28]
 800d8c6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	2201      	movs	r2, #1
 800d8cc:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	2201      	movs	r2, #1
 800d8d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	2200      	movs	r2, #0
 800d8da:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d8e2:	2b00      	cmp	r3, #0
 800d8e4:	d009      	beq.n	800d8fa <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d8ea:	6878      	ldr	r0, [r7, #4]
 800d8ec:	4798      	blx	r3
 800d8ee:	e004      	b.n	800d8fa <HAL_DMA_IRQHandler+0xe0e>
          return;
 800d8f0:	bf00      	nop
 800d8f2:	e002      	b.n	800d8fa <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800d8f4:	bf00      	nop
 800d8f6:	e000      	b.n	800d8fa <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800d8f8:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800d8fa:	3728      	adds	r7, #40	@ 0x28
 800d8fc:	46bd      	mov	sp, r7
 800d8fe:	bd80      	pop	{r7, pc}
 800d900:	40020010 	.word	0x40020010
 800d904:	40020028 	.word	0x40020028
 800d908:	40020040 	.word	0x40020040
 800d90c:	40020058 	.word	0x40020058
 800d910:	40020070 	.word	0x40020070
 800d914:	40020088 	.word	0x40020088
 800d918:	400200a0 	.word	0x400200a0
 800d91c:	400200b8 	.word	0x400200b8
 800d920:	40020410 	.word	0x40020410
 800d924:	40020428 	.word	0x40020428
 800d928:	40020440 	.word	0x40020440
 800d92c:	40020458 	.word	0x40020458
 800d930:	40020470 	.word	0x40020470
 800d934:	40020488 	.word	0x40020488
 800d938:	400204a0 	.word	0x400204a0
 800d93c:	400204b8 	.word	0x400204b8

0800d940 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(const DMA_HandleTypeDef *hdma)
{
 800d940:	b480      	push	{r7}
 800d942:	b083      	sub	sp, #12
 800d944:	af00      	add	r7, sp, #0
 800d946:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800d94e:	b2db      	uxtb	r3, r3
}
 800d950:	4618      	mov	r0, r3
 800d952:	370c      	adds	r7, #12
 800d954:	46bd      	mov	sp, r7
 800d956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d95a:	4770      	bx	lr

0800d95c <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(const DMA_HandleTypeDef *hdma)
{
 800d95c:	b480      	push	{r7}
 800d95e:	b083      	sub	sp, #12
 800d960:	af00      	add	r7, sp, #0
 800d962:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 800d968:	4618      	mov	r0, r3
 800d96a:	370c      	adds	r7, #12
 800d96c:	46bd      	mov	sp, r7
 800d96e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d972:	4770      	bx	lr

0800d974 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800d974:	b480      	push	{r7}
 800d976:	b087      	sub	sp, #28
 800d978:	af00      	add	r7, sp, #0
 800d97a:	60f8      	str	r0, [r7, #12]
 800d97c:	60b9      	str	r1, [r7, #8]
 800d97e:	607a      	str	r2, [r7, #4]
 800d980:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800d982:	68fb      	ldr	r3, [r7, #12]
 800d984:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d986:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800d988:	68fb      	ldr	r3, [r7, #12]
 800d98a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d98c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800d98e:	68fb      	ldr	r3, [r7, #12]
 800d990:	681b      	ldr	r3, [r3, #0]
 800d992:	4a7f      	ldr	r2, [pc, #508]	@ (800db90 <DMA_SetConfig+0x21c>)
 800d994:	4293      	cmp	r3, r2
 800d996:	d072      	beq.n	800da7e <DMA_SetConfig+0x10a>
 800d998:	68fb      	ldr	r3, [r7, #12]
 800d99a:	681b      	ldr	r3, [r3, #0]
 800d99c:	4a7d      	ldr	r2, [pc, #500]	@ (800db94 <DMA_SetConfig+0x220>)
 800d99e:	4293      	cmp	r3, r2
 800d9a0:	d06d      	beq.n	800da7e <DMA_SetConfig+0x10a>
 800d9a2:	68fb      	ldr	r3, [r7, #12]
 800d9a4:	681b      	ldr	r3, [r3, #0]
 800d9a6:	4a7c      	ldr	r2, [pc, #496]	@ (800db98 <DMA_SetConfig+0x224>)
 800d9a8:	4293      	cmp	r3, r2
 800d9aa:	d068      	beq.n	800da7e <DMA_SetConfig+0x10a>
 800d9ac:	68fb      	ldr	r3, [r7, #12]
 800d9ae:	681b      	ldr	r3, [r3, #0]
 800d9b0:	4a7a      	ldr	r2, [pc, #488]	@ (800db9c <DMA_SetConfig+0x228>)
 800d9b2:	4293      	cmp	r3, r2
 800d9b4:	d063      	beq.n	800da7e <DMA_SetConfig+0x10a>
 800d9b6:	68fb      	ldr	r3, [r7, #12]
 800d9b8:	681b      	ldr	r3, [r3, #0]
 800d9ba:	4a79      	ldr	r2, [pc, #484]	@ (800dba0 <DMA_SetConfig+0x22c>)
 800d9bc:	4293      	cmp	r3, r2
 800d9be:	d05e      	beq.n	800da7e <DMA_SetConfig+0x10a>
 800d9c0:	68fb      	ldr	r3, [r7, #12]
 800d9c2:	681b      	ldr	r3, [r3, #0]
 800d9c4:	4a77      	ldr	r2, [pc, #476]	@ (800dba4 <DMA_SetConfig+0x230>)
 800d9c6:	4293      	cmp	r3, r2
 800d9c8:	d059      	beq.n	800da7e <DMA_SetConfig+0x10a>
 800d9ca:	68fb      	ldr	r3, [r7, #12]
 800d9cc:	681b      	ldr	r3, [r3, #0]
 800d9ce:	4a76      	ldr	r2, [pc, #472]	@ (800dba8 <DMA_SetConfig+0x234>)
 800d9d0:	4293      	cmp	r3, r2
 800d9d2:	d054      	beq.n	800da7e <DMA_SetConfig+0x10a>
 800d9d4:	68fb      	ldr	r3, [r7, #12]
 800d9d6:	681b      	ldr	r3, [r3, #0]
 800d9d8:	4a74      	ldr	r2, [pc, #464]	@ (800dbac <DMA_SetConfig+0x238>)
 800d9da:	4293      	cmp	r3, r2
 800d9dc:	d04f      	beq.n	800da7e <DMA_SetConfig+0x10a>
 800d9de:	68fb      	ldr	r3, [r7, #12]
 800d9e0:	681b      	ldr	r3, [r3, #0]
 800d9e2:	4a73      	ldr	r2, [pc, #460]	@ (800dbb0 <DMA_SetConfig+0x23c>)
 800d9e4:	4293      	cmp	r3, r2
 800d9e6:	d04a      	beq.n	800da7e <DMA_SetConfig+0x10a>
 800d9e8:	68fb      	ldr	r3, [r7, #12]
 800d9ea:	681b      	ldr	r3, [r3, #0]
 800d9ec:	4a71      	ldr	r2, [pc, #452]	@ (800dbb4 <DMA_SetConfig+0x240>)
 800d9ee:	4293      	cmp	r3, r2
 800d9f0:	d045      	beq.n	800da7e <DMA_SetConfig+0x10a>
 800d9f2:	68fb      	ldr	r3, [r7, #12]
 800d9f4:	681b      	ldr	r3, [r3, #0]
 800d9f6:	4a70      	ldr	r2, [pc, #448]	@ (800dbb8 <DMA_SetConfig+0x244>)
 800d9f8:	4293      	cmp	r3, r2
 800d9fa:	d040      	beq.n	800da7e <DMA_SetConfig+0x10a>
 800d9fc:	68fb      	ldr	r3, [r7, #12]
 800d9fe:	681b      	ldr	r3, [r3, #0]
 800da00:	4a6e      	ldr	r2, [pc, #440]	@ (800dbbc <DMA_SetConfig+0x248>)
 800da02:	4293      	cmp	r3, r2
 800da04:	d03b      	beq.n	800da7e <DMA_SetConfig+0x10a>
 800da06:	68fb      	ldr	r3, [r7, #12]
 800da08:	681b      	ldr	r3, [r3, #0]
 800da0a:	4a6d      	ldr	r2, [pc, #436]	@ (800dbc0 <DMA_SetConfig+0x24c>)
 800da0c:	4293      	cmp	r3, r2
 800da0e:	d036      	beq.n	800da7e <DMA_SetConfig+0x10a>
 800da10:	68fb      	ldr	r3, [r7, #12]
 800da12:	681b      	ldr	r3, [r3, #0]
 800da14:	4a6b      	ldr	r2, [pc, #428]	@ (800dbc4 <DMA_SetConfig+0x250>)
 800da16:	4293      	cmp	r3, r2
 800da18:	d031      	beq.n	800da7e <DMA_SetConfig+0x10a>
 800da1a:	68fb      	ldr	r3, [r7, #12]
 800da1c:	681b      	ldr	r3, [r3, #0]
 800da1e:	4a6a      	ldr	r2, [pc, #424]	@ (800dbc8 <DMA_SetConfig+0x254>)
 800da20:	4293      	cmp	r3, r2
 800da22:	d02c      	beq.n	800da7e <DMA_SetConfig+0x10a>
 800da24:	68fb      	ldr	r3, [r7, #12]
 800da26:	681b      	ldr	r3, [r3, #0]
 800da28:	4a68      	ldr	r2, [pc, #416]	@ (800dbcc <DMA_SetConfig+0x258>)
 800da2a:	4293      	cmp	r3, r2
 800da2c:	d027      	beq.n	800da7e <DMA_SetConfig+0x10a>
 800da2e:	68fb      	ldr	r3, [r7, #12]
 800da30:	681b      	ldr	r3, [r3, #0]
 800da32:	4a67      	ldr	r2, [pc, #412]	@ (800dbd0 <DMA_SetConfig+0x25c>)
 800da34:	4293      	cmp	r3, r2
 800da36:	d022      	beq.n	800da7e <DMA_SetConfig+0x10a>
 800da38:	68fb      	ldr	r3, [r7, #12]
 800da3a:	681b      	ldr	r3, [r3, #0]
 800da3c:	4a65      	ldr	r2, [pc, #404]	@ (800dbd4 <DMA_SetConfig+0x260>)
 800da3e:	4293      	cmp	r3, r2
 800da40:	d01d      	beq.n	800da7e <DMA_SetConfig+0x10a>
 800da42:	68fb      	ldr	r3, [r7, #12]
 800da44:	681b      	ldr	r3, [r3, #0]
 800da46:	4a64      	ldr	r2, [pc, #400]	@ (800dbd8 <DMA_SetConfig+0x264>)
 800da48:	4293      	cmp	r3, r2
 800da4a:	d018      	beq.n	800da7e <DMA_SetConfig+0x10a>
 800da4c:	68fb      	ldr	r3, [r7, #12]
 800da4e:	681b      	ldr	r3, [r3, #0]
 800da50:	4a62      	ldr	r2, [pc, #392]	@ (800dbdc <DMA_SetConfig+0x268>)
 800da52:	4293      	cmp	r3, r2
 800da54:	d013      	beq.n	800da7e <DMA_SetConfig+0x10a>
 800da56:	68fb      	ldr	r3, [r7, #12]
 800da58:	681b      	ldr	r3, [r3, #0]
 800da5a:	4a61      	ldr	r2, [pc, #388]	@ (800dbe0 <DMA_SetConfig+0x26c>)
 800da5c:	4293      	cmp	r3, r2
 800da5e:	d00e      	beq.n	800da7e <DMA_SetConfig+0x10a>
 800da60:	68fb      	ldr	r3, [r7, #12]
 800da62:	681b      	ldr	r3, [r3, #0]
 800da64:	4a5f      	ldr	r2, [pc, #380]	@ (800dbe4 <DMA_SetConfig+0x270>)
 800da66:	4293      	cmp	r3, r2
 800da68:	d009      	beq.n	800da7e <DMA_SetConfig+0x10a>
 800da6a:	68fb      	ldr	r3, [r7, #12]
 800da6c:	681b      	ldr	r3, [r3, #0]
 800da6e:	4a5e      	ldr	r2, [pc, #376]	@ (800dbe8 <DMA_SetConfig+0x274>)
 800da70:	4293      	cmp	r3, r2
 800da72:	d004      	beq.n	800da7e <DMA_SetConfig+0x10a>
 800da74:	68fb      	ldr	r3, [r7, #12]
 800da76:	681b      	ldr	r3, [r3, #0]
 800da78:	4a5c      	ldr	r2, [pc, #368]	@ (800dbec <DMA_SetConfig+0x278>)
 800da7a:	4293      	cmp	r3, r2
 800da7c:	d101      	bne.n	800da82 <DMA_SetConfig+0x10e>
 800da7e:	2301      	movs	r3, #1
 800da80:	e000      	b.n	800da84 <DMA_SetConfig+0x110>
 800da82:	2300      	movs	r3, #0
 800da84:	2b00      	cmp	r3, #0
 800da86:	d00d      	beq.n	800daa4 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800da88:	68fb      	ldr	r3, [r7, #12]
 800da8a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800da8c:	68fa      	ldr	r2, [r7, #12]
 800da8e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800da90:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800da92:	68fb      	ldr	r3, [r7, #12]
 800da94:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800da96:	2b00      	cmp	r3, #0
 800da98:	d004      	beq.n	800daa4 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800da9a:	68fb      	ldr	r3, [r7, #12]
 800da9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800da9e:	68fa      	ldr	r2, [r7, #12]
 800daa0:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800daa2:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800daa4:	68fb      	ldr	r3, [r7, #12]
 800daa6:	681b      	ldr	r3, [r3, #0]
 800daa8:	4a39      	ldr	r2, [pc, #228]	@ (800db90 <DMA_SetConfig+0x21c>)
 800daaa:	4293      	cmp	r3, r2
 800daac:	d04a      	beq.n	800db44 <DMA_SetConfig+0x1d0>
 800daae:	68fb      	ldr	r3, [r7, #12]
 800dab0:	681b      	ldr	r3, [r3, #0]
 800dab2:	4a38      	ldr	r2, [pc, #224]	@ (800db94 <DMA_SetConfig+0x220>)
 800dab4:	4293      	cmp	r3, r2
 800dab6:	d045      	beq.n	800db44 <DMA_SetConfig+0x1d0>
 800dab8:	68fb      	ldr	r3, [r7, #12]
 800daba:	681b      	ldr	r3, [r3, #0]
 800dabc:	4a36      	ldr	r2, [pc, #216]	@ (800db98 <DMA_SetConfig+0x224>)
 800dabe:	4293      	cmp	r3, r2
 800dac0:	d040      	beq.n	800db44 <DMA_SetConfig+0x1d0>
 800dac2:	68fb      	ldr	r3, [r7, #12]
 800dac4:	681b      	ldr	r3, [r3, #0]
 800dac6:	4a35      	ldr	r2, [pc, #212]	@ (800db9c <DMA_SetConfig+0x228>)
 800dac8:	4293      	cmp	r3, r2
 800daca:	d03b      	beq.n	800db44 <DMA_SetConfig+0x1d0>
 800dacc:	68fb      	ldr	r3, [r7, #12]
 800dace:	681b      	ldr	r3, [r3, #0]
 800dad0:	4a33      	ldr	r2, [pc, #204]	@ (800dba0 <DMA_SetConfig+0x22c>)
 800dad2:	4293      	cmp	r3, r2
 800dad4:	d036      	beq.n	800db44 <DMA_SetConfig+0x1d0>
 800dad6:	68fb      	ldr	r3, [r7, #12]
 800dad8:	681b      	ldr	r3, [r3, #0]
 800dada:	4a32      	ldr	r2, [pc, #200]	@ (800dba4 <DMA_SetConfig+0x230>)
 800dadc:	4293      	cmp	r3, r2
 800dade:	d031      	beq.n	800db44 <DMA_SetConfig+0x1d0>
 800dae0:	68fb      	ldr	r3, [r7, #12]
 800dae2:	681b      	ldr	r3, [r3, #0]
 800dae4:	4a30      	ldr	r2, [pc, #192]	@ (800dba8 <DMA_SetConfig+0x234>)
 800dae6:	4293      	cmp	r3, r2
 800dae8:	d02c      	beq.n	800db44 <DMA_SetConfig+0x1d0>
 800daea:	68fb      	ldr	r3, [r7, #12]
 800daec:	681b      	ldr	r3, [r3, #0]
 800daee:	4a2f      	ldr	r2, [pc, #188]	@ (800dbac <DMA_SetConfig+0x238>)
 800daf0:	4293      	cmp	r3, r2
 800daf2:	d027      	beq.n	800db44 <DMA_SetConfig+0x1d0>
 800daf4:	68fb      	ldr	r3, [r7, #12]
 800daf6:	681b      	ldr	r3, [r3, #0]
 800daf8:	4a2d      	ldr	r2, [pc, #180]	@ (800dbb0 <DMA_SetConfig+0x23c>)
 800dafa:	4293      	cmp	r3, r2
 800dafc:	d022      	beq.n	800db44 <DMA_SetConfig+0x1d0>
 800dafe:	68fb      	ldr	r3, [r7, #12]
 800db00:	681b      	ldr	r3, [r3, #0]
 800db02:	4a2c      	ldr	r2, [pc, #176]	@ (800dbb4 <DMA_SetConfig+0x240>)
 800db04:	4293      	cmp	r3, r2
 800db06:	d01d      	beq.n	800db44 <DMA_SetConfig+0x1d0>
 800db08:	68fb      	ldr	r3, [r7, #12]
 800db0a:	681b      	ldr	r3, [r3, #0]
 800db0c:	4a2a      	ldr	r2, [pc, #168]	@ (800dbb8 <DMA_SetConfig+0x244>)
 800db0e:	4293      	cmp	r3, r2
 800db10:	d018      	beq.n	800db44 <DMA_SetConfig+0x1d0>
 800db12:	68fb      	ldr	r3, [r7, #12]
 800db14:	681b      	ldr	r3, [r3, #0]
 800db16:	4a29      	ldr	r2, [pc, #164]	@ (800dbbc <DMA_SetConfig+0x248>)
 800db18:	4293      	cmp	r3, r2
 800db1a:	d013      	beq.n	800db44 <DMA_SetConfig+0x1d0>
 800db1c:	68fb      	ldr	r3, [r7, #12]
 800db1e:	681b      	ldr	r3, [r3, #0]
 800db20:	4a27      	ldr	r2, [pc, #156]	@ (800dbc0 <DMA_SetConfig+0x24c>)
 800db22:	4293      	cmp	r3, r2
 800db24:	d00e      	beq.n	800db44 <DMA_SetConfig+0x1d0>
 800db26:	68fb      	ldr	r3, [r7, #12]
 800db28:	681b      	ldr	r3, [r3, #0]
 800db2a:	4a26      	ldr	r2, [pc, #152]	@ (800dbc4 <DMA_SetConfig+0x250>)
 800db2c:	4293      	cmp	r3, r2
 800db2e:	d009      	beq.n	800db44 <DMA_SetConfig+0x1d0>
 800db30:	68fb      	ldr	r3, [r7, #12]
 800db32:	681b      	ldr	r3, [r3, #0]
 800db34:	4a24      	ldr	r2, [pc, #144]	@ (800dbc8 <DMA_SetConfig+0x254>)
 800db36:	4293      	cmp	r3, r2
 800db38:	d004      	beq.n	800db44 <DMA_SetConfig+0x1d0>
 800db3a:	68fb      	ldr	r3, [r7, #12]
 800db3c:	681b      	ldr	r3, [r3, #0]
 800db3e:	4a23      	ldr	r2, [pc, #140]	@ (800dbcc <DMA_SetConfig+0x258>)
 800db40:	4293      	cmp	r3, r2
 800db42:	d101      	bne.n	800db48 <DMA_SetConfig+0x1d4>
 800db44:	2301      	movs	r3, #1
 800db46:	e000      	b.n	800db4a <DMA_SetConfig+0x1d6>
 800db48:	2300      	movs	r3, #0
 800db4a:	2b00      	cmp	r3, #0
 800db4c:	d059      	beq.n	800dc02 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800db4e:	68fb      	ldr	r3, [r7, #12]
 800db50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800db52:	f003 031f 	and.w	r3, r3, #31
 800db56:	223f      	movs	r2, #63	@ 0x3f
 800db58:	409a      	lsls	r2, r3
 800db5a:	697b      	ldr	r3, [r7, #20]
 800db5c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800db5e:	68fb      	ldr	r3, [r7, #12]
 800db60:	681b      	ldr	r3, [r3, #0]
 800db62:	681a      	ldr	r2, [r3, #0]
 800db64:	68fb      	ldr	r3, [r7, #12]
 800db66:	681b      	ldr	r3, [r3, #0]
 800db68:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800db6c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800db6e:	68fb      	ldr	r3, [r7, #12]
 800db70:	681b      	ldr	r3, [r3, #0]
 800db72:	683a      	ldr	r2, [r7, #0]
 800db74:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800db76:	68fb      	ldr	r3, [r7, #12]
 800db78:	689b      	ldr	r3, [r3, #8]
 800db7a:	2b40      	cmp	r3, #64	@ 0x40
 800db7c:	d138      	bne.n	800dbf0 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800db7e:	68fb      	ldr	r3, [r7, #12]
 800db80:	681b      	ldr	r3, [r3, #0]
 800db82:	687a      	ldr	r2, [r7, #4]
 800db84:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800db86:	68fb      	ldr	r3, [r7, #12]
 800db88:	681b      	ldr	r3, [r3, #0]
 800db8a:	68ba      	ldr	r2, [r7, #8]
 800db8c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800db8e:	e086      	b.n	800dc9e <DMA_SetConfig+0x32a>
 800db90:	40020010 	.word	0x40020010
 800db94:	40020028 	.word	0x40020028
 800db98:	40020040 	.word	0x40020040
 800db9c:	40020058 	.word	0x40020058
 800dba0:	40020070 	.word	0x40020070
 800dba4:	40020088 	.word	0x40020088
 800dba8:	400200a0 	.word	0x400200a0
 800dbac:	400200b8 	.word	0x400200b8
 800dbb0:	40020410 	.word	0x40020410
 800dbb4:	40020428 	.word	0x40020428
 800dbb8:	40020440 	.word	0x40020440
 800dbbc:	40020458 	.word	0x40020458
 800dbc0:	40020470 	.word	0x40020470
 800dbc4:	40020488 	.word	0x40020488
 800dbc8:	400204a0 	.word	0x400204a0
 800dbcc:	400204b8 	.word	0x400204b8
 800dbd0:	58025408 	.word	0x58025408
 800dbd4:	5802541c 	.word	0x5802541c
 800dbd8:	58025430 	.word	0x58025430
 800dbdc:	58025444 	.word	0x58025444
 800dbe0:	58025458 	.word	0x58025458
 800dbe4:	5802546c 	.word	0x5802546c
 800dbe8:	58025480 	.word	0x58025480
 800dbec:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800dbf0:	68fb      	ldr	r3, [r7, #12]
 800dbf2:	681b      	ldr	r3, [r3, #0]
 800dbf4:	68ba      	ldr	r2, [r7, #8]
 800dbf6:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800dbf8:	68fb      	ldr	r3, [r7, #12]
 800dbfa:	681b      	ldr	r3, [r3, #0]
 800dbfc:	687a      	ldr	r2, [r7, #4]
 800dbfe:	60da      	str	r2, [r3, #12]
}
 800dc00:	e04d      	b.n	800dc9e <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800dc02:	68fb      	ldr	r3, [r7, #12]
 800dc04:	681b      	ldr	r3, [r3, #0]
 800dc06:	4a29      	ldr	r2, [pc, #164]	@ (800dcac <DMA_SetConfig+0x338>)
 800dc08:	4293      	cmp	r3, r2
 800dc0a:	d022      	beq.n	800dc52 <DMA_SetConfig+0x2de>
 800dc0c:	68fb      	ldr	r3, [r7, #12]
 800dc0e:	681b      	ldr	r3, [r3, #0]
 800dc10:	4a27      	ldr	r2, [pc, #156]	@ (800dcb0 <DMA_SetConfig+0x33c>)
 800dc12:	4293      	cmp	r3, r2
 800dc14:	d01d      	beq.n	800dc52 <DMA_SetConfig+0x2de>
 800dc16:	68fb      	ldr	r3, [r7, #12]
 800dc18:	681b      	ldr	r3, [r3, #0]
 800dc1a:	4a26      	ldr	r2, [pc, #152]	@ (800dcb4 <DMA_SetConfig+0x340>)
 800dc1c:	4293      	cmp	r3, r2
 800dc1e:	d018      	beq.n	800dc52 <DMA_SetConfig+0x2de>
 800dc20:	68fb      	ldr	r3, [r7, #12]
 800dc22:	681b      	ldr	r3, [r3, #0]
 800dc24:	4a24      	ldr	r2, [pc, #144]	@ (800dcb8 <DMA_SetConfig+0x344>)
 800dc26:	4293      	cmp	r3, r2
 800dc28:	d013      	beq.n	800dc52 <DMA_SetConfig+0x2de>
 800dc2a:	68fb      	ldr	r3, [r7, #12]
 800dc2c:	681b      	ldr	r3, [r3, #0]
 800dc2e:	4a23      	ldr	r2, [pc, #140]	@ (800dcbc <DMA_SetConfig+0x348>)
 800dc30:	4293      	cmp	r3, r2
 800dc32:	d00e      	beq.n	800dc52 <DMA_SetConfig+0x2de>
 800dc34:	68fb      	ldr	r3, [r7, #12]
 800dc36:	681b      	ldr	r3, [r3, #0]
 800dc38:	4a21      	ldr	r2, [pc, #132]	@ (800dcc0 <DMA_SetConfig+0x34c>)
 800dc3a:	4293      	cmp	r3, r2
 800dc3c:	d009      	beq.n	800dc52 <DMA_SetConfig+0x2de>
 800dc3e:	68fb      	ldr	r3, [r7, #12]
 800dc40:	681b      	ldr	r3, [r3, #0]
 800dc42:	4a20      	ldr	r2, [pc, #128]	@ (800dcc4 <DMA_SetConfig+0x350>)
 800dc44:	4293      	cmp	r3, r2
 800dc46:	d004      	beq.n	800dc52 <DMA_SetConfig+0x2de>
 800dc48:	68fb      	ldr	r3, [r7, #12]
 800dc4a:	681b      	ldr	r3, [r3, #0]
 800dc4c:	4a1e      	ldr	r2, [pc, #120]	@ (800dcc8 <DMA_SetConfig+0x354>)
 800dc4e:	4293      	cmp	r3, r2
 800dc50:	d101      	bne.n	800dc56 <DMA_SetConfig+0x2e2>
 800dc52:	2301      	movs	r3, #1
 800dc54:	e000      	b.n	800dc58 <DMA_SetConfig+0x2e4>
 800dc56:	2300      	movs	r3, #0
 800dc58:	2b00      	cmp	r3, #0
 800dc5a:	d020      	beq.n	800dc9e <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800dc5c:	68fb      	ldr	r3, [r7, #12]
 800dc5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800dc60:	f003 031f 	and.w	r3, r3, #31
 800dc64:	2201      	movs	r2, #1
 800dc66:	409a      	lsls	r2, r3
 800dc68:	693b      	ldr	r3, [r7, #16]
 800dc6a:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800dc6c:	68fb      	ldr	r3, [r7, #12]
 800dc6e:	681b      	ldr	r3, [r3, #0]
 800dc70:	683a      	ldr	r2, [r7, #0]
 800dc72:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800dc74:	68fb      	ldr	r3, [r7, #12]
 800dc76:	689b      	ldr	r3, [r3, #8]
 800dc78:	2b40      	cmp	r3, #64	@ 0x40
 800dc7a:	d108      	bne.n	800dc8e <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800dc7c:	68fb      	ldr	r3, [r7, #12]
 800dc7e:	681b      	ldr	r3, [r3, #0]
 800dc80:	687a      	ldr	r2, [r7, #4]
 800dc82:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800dc84:	68fb      	ldr	r3, [r7, #12]
 800dc86:	681b      	ldr	r3, [r3, #0]
 800dc88:	68ba      	ldr	r2, [r7, #8]
 800dc8a:	60da      	str	r2, [r3, #12]
}
 800dc8c:	e007      	b.n	800dc9e <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800dc8e:	68fb      	ldr	r3, [r7, #12]
 800dc90:	681b      	ldr	r3, [r3, #0]
 800dc92:	68ba      	ldr	r2, [r7, #8]
 800dc94:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800dc96:	68fb      	ldr	r3, [r7, #12]
 800dc98:	681b      	ldr	r3, [r3, #0]
 800dc9a:	687a      	ldr	r2, [r7, #4]
 800dc9c:	60da      	str	r2, [r3, #12]
}
 800dc9e:	bf00      	nop
 800dca0:	371c      	adds	r7, #28
 800dca2:	46bd      	mov	sp, r7
 800dca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dca8:	4770      	bx	lr
 800dcaa:	bf00      	nop
 800dcac:	58025408 	.word	0x58025408
 800dcb0:	5802541c 	.word	0x5802541c
 800dcb4:	58025430 	.word	0x58025430
 800dcb8:	58025444 	.word	0x58025444
 800dcbc:	58025458 	.word	0x58025458
 800dcc0:	5802546c 	.word	0x5802546c
 800dcc4:	58025480 	.word	0x58025480
 800dcc8:	58025494 	.word	0x58025494

0800dccc <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800dccc:	b480      	push	{r7}
 800dcce:	b085      	sub	sp, #20
 800dcd0:	af00      	add	r7, sp, #0
 800dcd2:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	681b      	ldr	r3, [r3, #0]
 800dcd8:	4a42      	ldr	r2, [pc, #264]	@ (800dde4 <DMA_CalcBaseAndBitshift+0x118>)
 800dcda:	4293      	cmp	r3, r2
 800dcdc:	d04a      	beq.n	800dd74 <DMA_CalcBaseAndBitshift+0xa8>
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	681b      	ldr	r3, [r3, #0]
 800dce2:	4a41      	ldr	r2, [pc, #260]	@ (800dde8 <DMA_CalcBaseAndBitshift+0x11c>)
 800dce4:	4293      	cmp	r3, r2
 800dce6:	d045      	beq.n	800dd74 <DMA_CalcBaseAndBitshift+0xa8>
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	681b      	ldr	r3, [r3, #0]
 800dcec:	4a3f      	ldr	r2, [pc, #252]	@ (800ddec <DMA_CalcBaseAndBitshift+0x120>)
 800dcee:	4293      	cmp	r3, r2
 800dcf0:	d040      	beq.n	800dd74 <DMA_CalcBaseAndBitshift+0xa8>
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	681b      	ldr	r3, [r3, #0]
 800dcf6:	4a3e      	ldr	r2, [pc, #248]	@ (800ddf0 <DMA_CalcBaseAndBitshift+0x124>)
 800dcf8:	4293      	cmp	r3, r2
 800dcfa:	d03b      	beq.n	800dd74 <DMA_CalcBaseAndBitshift+0xa8>
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	681b      	ldr	r3, [r3, #0]
 800dd00:	4a3c      	ldr	r2, [pc, #240]	@ (800ddf4 <DMA_CalcBaseAndBitshift+0x128>)
 800dd02:	4293      	cmp	r3, r2
 800dd04:	d036      	beq.n	800dd74 <DMA_CalcBaseAndBitshift+0xa8>
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	681b      	ldr	r3, [r3, #0]
 800dd0a:	4a3b      	ldr	r2, [pc, #236]	@ (800ddf8 <DMA_CalcBaseAndBitshift+0x12c>)
 800dd0c:	4293      	cmp	r3, r2
 800dd0e:	d031      	beq.n	800dd74 <DMA_CalcBaseAndBitshift+0xa8>
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	681b      	ldr	r3, [r3, #0]
 800dd14:	4a39      	ldr	r2, [pc, #228]	@ (800ddfc <DMA_CalcBaseAndBitshift+0x130>)
 800dd16:	4293      	cmp	r3, r2
 800dd18:	d02c      	beq.n	800dd74 <DMA_CalcBaseAndBitshift+0xa8>
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	681b      	ldr	r3, [r3, #0]
 800dd1e:	4a38      	ldr	r2, [pc, #224]	@ (800de00 <DMA_CalcBaseAndBitshift+0x134>)
 800dd20:	4293      	cmp	r3, r2
 800dd22:	d027      	beq.n	800dd74 <DMA_CalcBaseAndBitshift+0xa8>
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	681b      	ldr	r3, [r3, #0]
 800dd28:	4a36      	ldr	r2, [pc, #216]	@ (800de04 <DMA_CalcBaseAndBitshift+0x138>)
 800dd2a:	4293      	cmp	r3, r2
 800dd2c:	d022      	beq.n	800dd74 <DMA_CalcBaseAndBitshift+0xa8>
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	681b      	ldr	r3, [r3, #0]
 800dd32:	4a35      	ldr	r2, [pc, #212]	@ (800de08 <DMA_CalcBaseAndBitshift+0x13c>)
 800dd34:	4293      	cmp	r3, r2
 800dd36:	d01d      	beq.n	800dd74 <DMA_CalcBaseAndBitshift+0xa8>
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	681b      	ldr	r3, [r3, #0]
 800dd3c:	4a33      	ldr	r2, [pc, #204]	@ (800de0c <DMA_CalcBaseAndBitshift+0x140>)
 800dd3e:	4293      	cmp	r3, r2
 800dd40:	d018      	beq.n	800dd74 <DMA_CalcBaseAndBitshift+0xa8>
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	681b      	ldr	r3, [r3, #0]
 800dd46:	4a32      	ldr	r2, [pc, #200]	@ (800de10 <DMA_CalcBaseAndBitshift+0x144>)
 800dd48:	4293      	cmp	r3, r2
 800dd4a:	d013      	beq.n	800dd74 <DMA_CalcBaseAndBitshift+0xa8>
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	681b      	ldr	r3, [r3, #0]
 800dd50:	4a30      	ldr	r2, [pc, #192]	@ (800de14 <DMA_CalcBaseAndBitshift+0x148>)
 800dd52:	4293      	cmp	r3, r2
 800dd54:	d00e      	beq.n	800dd74 <DMA_CalcBaseAndBitshift+0xa8>
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	681b      	ldr	r3, [r3, #0]
 800dd5a:	4a2f      	ldr	r2, [pc, #188]	@ (800de18 <DMA_CalcBaseAndBitshift+0x14c>)
 800dd5c:	4293      	cmp	r3, r2
 800dd5e:	d009      	beq.n	800dd74 <DMA_CalcBaseAndBitshift+0xa8>
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	681b      	ldr	r3, [r3, #0]
 800dd64:	4a2d      	ldr	r2, [pc, #180]	@ (800de1c <DMA_CalcBaseAndBitshift+0x150>)
 800dd66:	4293      	cmp	r3, r2
 800dd68:	d004      	beq.n	800dd74 <DMA_CalcBaseAndBitshift+0xa8>
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	681b      	ldr	r3, [r3, #0]
 800dd6e:	4a2c      	ldr	r2, [pc, #176]	@ (800de20 <DMA_CalcBaseAndBitshift+0x154>)
 800dd70:	4293      	cmp	r3, r2
 800dd72:	d101      	bne.n	800dd78 <DMA_CalcBaseAndBitshift+0xac>
 800dd74:	2301      	movs	r3, #1
 800dd76:	e000      	b.n	800dd7a <DMA_CalcBaseAndBitshift+0xae>
 800dd78:	2300      	movs	r3, #0
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	d024      	beq.n	800ddc8 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	681b      	ldr	r3, [r3, #0]
 800dd82:	b2db      	uxtb	r3, r3
 800dd84:	3b10      	subs	r3, #16
 800dd86:	4a27      	ldr	r2, [pc, #156]	@ (800de24 <DMA_CalcBaseAndBitshift+0x158>)
 800dd88:	fba2 2303 	umull	r2, r3, r2, r3
 800dd8c:	091b      	lsrs	r3, r3, #4
 800dd8e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800dd90:	68fb      	ldr	r3, [r7, #12]
 800dd92:	f003 0307 	and.w	r3, r3, #7
 800dd96:	4a24      	ldr	r2, [pc, #144]	@ (800de28 <DMA_CalcBaseAndBitshift+0x15c>)
 800dd98:	5cd3      	ldrb	r3, [r2, r3]
 800dd9a:	461a      	mov	r2, r3
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 800dda0:	68fb      	ldr	r3, [r7, #12]
 800dda2:	2b03      	cmp	r3, #3
 800dda4:	d908      	bls.n	800ddb8 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	681b      	ldr	r3, [r3, #0]
 800ddaa:	461a      	mov	r2, r3
 800ddac:	4b1f      	ldr	r3, [pc, #124]	@ (800de2c <DMA_CalcBaseAndBitshift+0x160>)
 800ddae:	4013      	ands	r3, r2
 800ddb0:	1d1a      	adds	r2, r3, #4
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	659a      	str	r2, [r3, #88]	@ 0x58
 800ddb6:	e00d      	b.n	800ddd4 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	681b      	ldr	r3, [r3, #0]
 800ddbc:	461a      	mov	r2, r3
 800ddbe:	4b1b      	ldr	r3, [pc, #108]	@ (800de2c <DMA_CalcBaseAndBitshift+0x160>)
 800ddc0:	4013      	ands	r3, r2
 800ddc2:	687a      	ldr	r2, [r7, #4]
 800ddc4:	6593      	str	r3, [r2, #88]	@ 0x58
 800ddc6:	e005      	b.n	800ddd4 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	681b      	ldr	r3, [r3, #0]
 800ddcc:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800ddd8:	4618      	mov	r0, r3
 800ddda:	3714      	adds	r7, #20
 800dddc:	46bd      	mov	sp, r7
 800ddde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dde2:	4770      	bx	lr
 800dde4:	40020010 	.word	0x40020010
 800dde8:	40020028 	.word	0x40020028
 800ddec:	40020040 	.word	0x40020040
 800ddf0:	40020058 	.word	0x40020058
 800ddf4:	40020070 	.word	0x40020070
 800ddf8:	40020088 	.word	0x40020088
 800ddfc:	400200a0 	.word	0x400200a0
 800de00:	400200b8 	.word	0x400200b8
 800de04:	40020410 	.word	0x40020410
 800de08:	40020428 	.word	0x40020428
 800de0c:	40020440 	.word	0x40020440
 800de10:	40020458 	.word	0x40020458
 800de14:	40020470 	.word	0x40020470
 800de18:	40020488 	.word	0x40020488
 800de1c:	400204a0 	.word	0x400204a0
 800de20:	400204b8 	.word	0x400204b8
 800de24:	aaaaaaab 	.word	0xaaaaaaab
 800de28:	0801e8bc 	.word	0x0801e8bc
 800de2c:	fffffc00 	.word	0xfffffc00

0800de30 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 800de30:	b480      	push	{r7}
 800de32:	b085      	sub	sp, #20
 800de34:	af00      	add	r7, sp, #0
 800de36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800de38:	2300      	movs	r3, #0
 800de3a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	699b      	ldr	r3, [r3, #24]
 800de40:	2b00      	cmp	r3, #0
 800de42:	d120      	bne.n	800de86 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800de48:	2b03      	cmp	r3, #3
 800de4a:	d858      	bhi.n	800defe <DMA_CheckFifoParam+0xce>
 800de4c:	a201      	add	r2, pc, #4	@ (adr r2, 800de54 <DMA_CheckFifoParam+0x24>)
 800de4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de52:	bf00      	nop
 800de54:	0800de65 	.word	0x0800de65
 800de58:	0800de77 	.word	0x0800de77
 800de5c:	0800de65 	.word	0x0800de65
 800de60:	0800deff 	.word	0x0800deff
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800de68:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800de6c:	2b00      	cmp	r3, #0
 800de6e:	d048      	beq.n	800df02 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800de70:	2301      	movs	r3, #1
 800de72:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800de74:	e045      	b.n	800df02 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800de7a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800de7e:	d142      	bne.n	800df06 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800de80:	2301      	movs	r3, #1
 800de82:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800de84:	e03f      	b.n	800df06 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	699b      	ldr	r3, [r3, #24]
 800de8a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800de8e:	d123      	bne.n	800ded8 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800de94:	2b03      	cmp	r3, #3
 800de96:	d838      	bhi.n	800df0a <DMA_CheckFifoParam+0xda>
 800de98:	a201      	add	r2, pc, #4	@ (adr r2, 800dea0 <DMA_CheckFifoParam+0x70>)
 800de9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de9e:	bf00      	nop
 800dea0:	0800deb1 	.word	0x0800deb1
 800dea4:	0800deb7 	.word	0x0800deb7
 800dea8:	0800deb1 	.word	0x0800deb1
 800deac:	0800dec9 	.word	0x0800dec9
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800deb0:	2301      	movs	r3, #1
 800deb2:	73fb      	strb	r3, [r7, #15]
        break;
 800deb4:	e030      	b.n	800df18 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800deba:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800debe:	2b00      	cmp	r3, #0
 800dec0:	d025      	beq.n	800df0e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800dec2:	2301      	movs	r3, #1
 800dec4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800dec6:	e022      	b.n	800df0e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800decc:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800ded0:	d11f      	bne.n	800df12 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800ded2:	2301      	movs	r3, #1
 800ded4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800ded6:	e01c      	b.n	800df12 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dedc:	2b02      	cmp	r3, #2
 800dede:	d902      	bls.n	800dee6 <DMA_CheckFifoParam+0xb6>
 800dee0:	2b03      	cmp	r3, #3
 800dee2:	d003      	beq.n	800deec <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800dee4:	e018      	b.n	800df18 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800dee6:	2301      	movs	r3, #1
 800dee8:	73fb      	strb	r3, [r7, #15]
        break;
 800deea:	e015      	b.n	800df18 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800def0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800def4:	2b00      	cmp	r3, #0
 800def6:	d00e      	beq.n	800df16 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800def8:	2301      	movs	r3, #1
 800defa:	73fb      	strb	r3, [r7, #15]
    break;
 800defc:	e00b      	b.n	800df16 <DMA_CheckFifoParam+0xe6>
        break;
 800defe:	bf00      	nop
 800df00:	e00a      	b.n	800df18 <DMA_CheckFifoParam+0xe8>
        break;
 800df02:	bf00      	nop
 800df04:	e008      	b.n	800df18 <DMA_CheckFifoParam+0xe8>
        break;
 800df06:	bf00      	nop
 800df08:	e006      	b.n	800df18 <DMA_CheckFifoParam+0xe8>
        break;
 800df0a:	bf00      	nop
 800df0c:	e004      	b.n	800df18 <DMA_CheckFifoParam+0xe8>
        break;
 800df0e:	bf00      	nop
 800df10:	e002      	b.n	800df18 <DMA_CheckFifoParam+0xe8>
        break;
 800df12:	bf00      	nop
 800df14:	e000      	b.n	800df18 <DMA_CheckFifoParam+0xe8>
    break;
 800df16:	bf00      	nop
    }
  }

  return status;
 800df18:	7bfb      	ldrb	r3, [r7, #15]
}
 800df1a:	4618      	mov	r0, r3
 800df1c:	3714      	adds	r7, #20
 800df1e:	46bd      	mov	sp, r7
 800df20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df24:	4770      	bx	lr
 800df26:	bf00      	nop

0800df28 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800df28:	b480      	push	{r7}
 800df2a:	b085      	sub	sp, #20
 800df2c:	af00      	add	r7, sp, #0
 800df2e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	681b      	ldr	r3, [r3, #0]
 800df34:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	681b      	ldr	r3, [r3, #0]
 800df3a:	4a38      	ldr	r2, [pc, #224]	@ (800e01c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800df3c:	4293      	cmp	r3, r2
 800df3e:	d022      	beq.n	800df86 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	681b      	ldr	r3, [r3, #0]
 800df44:	4a36      	ldr	r2, [pc, #216]	@ (800e020 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800df46:	4293      	cmp	r3, r2
 800df48:	d01d      	beq.n	800df86 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	681b      	ldr	r3, [r3, #0]
 800df4e:	4a35      	ldr	r2, [pc, #212]	@ (800e024 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800df50:	4293      	cmp	r3, r2
 800df52:	d018      	beq.n	800df86 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	681b      	ldr	r3, [r3, #0]
 800df58:	4a33      	ldr	r2, [pc, #204]	@ (800e028 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800df5a:	4293      	cmp	r3, r2
 800df5c:	d013      	beq.n	800df86 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	681b      	ldr	r3, [r3, #0]
 800df62:	4a32      	ldr	r2, [pc, #200]	@ (800e02c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800df64:	4293      	cmp	r3, r2
 800df66:	d00e      	beq.n	800df86 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	681b      	ldr	r3, [r3, #0]
 800df6c:	4a30      	ldr	r2, [pc, #192]	@ (800e030 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800df6e:	4293      	cmp	r3, r2
 800df70:	d009      	beq.n	800df86 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	681b      	ldr	r3, [r3, #0]
 800df76:	4a2f      	ldr	r2, [pc, #188]	@ (800e034 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800df78:	4293      	cmp	r3, r2
 800df7a:	d004      	beq.n	800df86 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	681b      	ldr	r3, [r3, #0]
 800df80:	4a2d      	ldr	r2, [pc, #180]	@ (800e038 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800df82:	4293      	cmp	r3, r2
 800df84:	d101      	bne.n	800df8a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800df86:	2301      	movs	r3, #1
 800df88:	e000      	b.n	800df8c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800df8a:	2300      	movs	r3, #0
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	d01a      	beq.n	800dfc6 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	681b      	ldr	r3, [r3, #0]
 800df94:	b2db      	uxtb	r3, r3
 800df96:	3b08      	subs	r3, #8
 800df98:	4a28      	ldr	r2, [pc, #160]	@ (800e03c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800df9a:	fba2 2303 	umull	r2, r3, r2, r3
 800df9e:	091b      	lsrs	r3, r3, #4
 800dfa0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800dfa2:	68fa      	ldr	r2, [r7, #12]
 800dfa4:	4b26      	ldr	r3, [pc, #152]	@ (800e040 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800dfa6:	4413      	add	r3, r2
 800dfa8:	009b      	lsls	r3, r3, #2
 800dfaa:	461a      	mov	r2, r3
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	4a24      	ldr	r2, [pc, #144]	@ (800e044 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800dfb4:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800dfb6:	68fb      	ldr	r3, [r7, #12]
 800dfb8:	f003 031f 	and.w	r3, r3, #31
 800dfbc:	2201      	movs	r2, #1
 800dfbe:	409a      	lsls	r2, r3
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800dfc4:	e024      	b.n	800e010 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	681b      	ldr	r3, [r3, #0]
 800dfca:	b2db      	uxtb	r3, r3
 800dfcc:	3b10      	subs	r3, #16
 800dfce:	4a1e      	ldr	r2, [pc, #120]	@ (800e048 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800dfd0:	fba2 2303 	umull	r2, r3, r2, r3
 800dfd4:	091b      	lsrs	r3, r3, #4
 800dfd6:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800dfd8:	68bb      	ldr	r3, [r7, #8]
 800dfda:	4a1c      	ldr	r2, [pc, #112]	@ (800e04c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800dfdc:	4293      	cmp	r3, r2
 800dfde:	d806      	bhi.n	800dfee <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800dfe0:	68bb      	ldr	r3, [r7, #8]
 800dfe2:	4a1b      	ldr	r2, [pc, #108]	@ (800e050 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800dfe4:	4293      	cmp	r3, r2
 800dfe6:	d902      	bls.n	800dfee <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800dfe8:	68fb      	ldr	r3, [r7, #12]
 800dfea:	3308      	adds	r3, #8
 800dfec:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800dfee:	68fa      	ldr	r2, [r7, #12]
 800dff0:	4b18      	ldr	r3, [pc, #96]	@ (800e054 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800dff2:	4413      	add	r3, r2
 800dff4:	009b      	lsls	r3, r3, #2
 800dff6:	461a      	mov	r2, r3
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	4a16      	ldr	r2, [pc, #88]	@ (800e058 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800e000:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800e002:	68fb      	ldr	r3, [r7, #12]
 800e004:	f003 031f 	and.w	r3, r3, #31
 800e008:	2201      	movs	r2, #1
 800e00a:	409a      	lsls	r2, r3
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800e010:	bf00      	nop
 800e012:	3714      	adds	r7, #20
 800e014:	46bd      	mov	sp, r7
 800e016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e01a:	4770      	bx	lr
 800e01c:	58025408 	.word	0x58025408
 800e020:	5802541c 	.word	0x5802541c
 800e024:	58025430 	.word	0x58025430
 800e028:	58025444 	.word	0x58025444
 800e02c:	58025458 	.word	0x58025458
 800e030:	5802546c 	.word	0x5802546c
 800e034:	58025480 	.word	0x58025480
 800e038:	58025494 	.word	0x58025494
 800e03c:	cccccccd 	.word	0xcccccccd
 800e040:	16009600 	.word	0x16009600
 800e044:	58025880 	.word	0x58025880
 800e048:	aaaaaaab 	.word	0xaaaaaaab
 800e04c:	400204b8 	.word	0x400204b8
 800e050:	4002040f 	.word	0x4002040f
 800e054:	10008200 	.word	0x10008200
 800e058:	40020880 	.word	0x40020880

0800e05c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800e05c:	b480      	push	{r7}
 800e05e:	b085      	sub	sp, #20
 800e060:	af00      	add	r7, sp, #0
 800e062:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	685b      	ldr	r3, [r3, #4]
 800e068:	b2db      	uxtb	r3, r3
 800e06a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800e06c:	68fb      	ldr	r3, [r7, #12]
 800e06e:	2b00      	cmp	r3, #0
 800e070:	d04a      	beq.n	800e108 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800e072:	68fb      	ldr	r3, [r7, #12]
 800e074:	2b08      	cmp	r3, #8
 800e076:	d847      	bhi.n	800e108 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	681b      	ldr	r3, [r3, #0]
 800e07c:	4a25      	ldr	r2, [pc, #148]	@ (800e114 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800e07e:	4293      	cmp	r3, r2
 800e080:	d022      	beq.n	800e0c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	681b      	ldr	r3, [r3, #0]
 800e086:	4a24      	ldr	r2, [pc, #144]	@ (800e118 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800e088:	4293      	cmp	r3, r2
 800e08a:	d01d      	beq.n	800e0c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	681b      	ldr	r3, [r3, #0]
 800e090:	4a22      	ldr	r2, [pc, #136]	@ (800e11c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800e092:	4293      	cmp	r3, r2
 800e094:	d018      	beq.n	800e0c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	681b      	ldr	r3, [r3, #0]
 800e09a:	4a21      	ldr	r2, [pc, #132]	@ (800e120 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800e09c:	4293      	cmp	r3, r2
 800e09e:	d013      	beq.n	800e0c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	681b      	ldr	r3, [r3, #0]
 800e0a4:	4a1f      	ldr	r2, [pc, #124]	@ (800e124 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800e0a6:	4293      	cmp	r3, r2
 800e0a8:	d00e      	beq.n	800e0c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	681b      	ldr	r3, [r3, #0]
 800e0ae:	4a1e      	ldr	r2, [pc, #120]	@ (800e128 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800e0b0:	4293      	cmp	r3, r2
 800e0b2:	d009      	beq.n	800e0c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	681b      	ldr	r3, [r3, #0]
 800e0b8:	4a1c      	ldr	r2, [pc, #112]	@ (800e12c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800e0ba:	4293      	cmp	r3, r2
 800e0bc:	d004      	beq.n	800e0c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	681b      	ldr	r3, [r3, #0]
 800e0c2:	4a1b      	ldr	r2, [pc, #108]	@ (800e130 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800e0c4:	4293      	cmp	r3, r2
 800e0c6:	d101      	bne.n	800e0cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800e0c8:	2301      	movs	r3, #1
 800e0ca:	e000      	b.n	800e0ce <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800e0cc:	2300      	movs	r3, #0
 800e0ce:	2b00      	cmp	r3, #0
 800e0d0:	d00a      	beq.n	800e0e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800e0d2:	68fa      	ldr	r2, [r7, #12]
 800e0d4:	4b17      	ldr	r3, [pc, #92]	@ (800e134 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800e0d6:	4413      	add	r3, r2
 800e0d8:	009b      	lsls	r3, r3, #2
 800e0da:	461a      	mov	r2, r3
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	4a15      	ldr	r2, [pc, #84]	@ (800e138 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800e0e4:	671a      	str	r2, [r3, #112]	@ 0x70
 800e0e6:	e009      	b.n	800e0fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800e0e8:	68fa      	ldr	r2, [r7, #12]
 800e0ea:	4b14      	ldr	r3, [pc, #80]	@ (800e13c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800e0ec:	4413      	add	r3, r2
 800e0ee:	009b      	lsls	r3, r3, #2
 800e0f0:	461a      	mov	r2, r3
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	4a11      	ldr	r2, [pc, #68]	@ (800e140 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800e0fa:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800e0fc:	68fb      	ldr	r3, [r7, #12]
 800e0fe:	3b01      	subs	r3, #1
 800e100:	2201      	movs	r2, #1
 800e102:	409a      	lsls	r2, r3
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 800e108:	bf00      	nop
 800e10a:	3714      	adds	r7, #20
 800e10c:	46bd      	mov	sp, r7
 800e10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e112:	4770      	bx	lr
 800e114:	58025408 	.word	0x58025408
 800e118:	5802541c 	.word	0x5802541c
 800e11c:	58025430 	.word	0x58025430
 800e120:	58025444 	.word	0x58025444
 800e124:	58025458 	.word	0x58025458
 800e128:	5802546c 	.word	0x5802546c
 800e12c:	58025480 	.word	0x58025480
 800e130:	58025494 	.word	0x58025494
 800e134:	1600963f 	.word	0x1600963f
 800e138:	58025940 	.word	0x58025940
 800e13c:	1000823f 	.word	0x1000823f
 800e140:	40020940 	.word	0x40020940

0800e144 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 800e144:	b480      	push	{r7}
 800e146:	b089      	sub	sp, #36	@ 0x24
 800e148:	af00      	add	r7, sp, #0
 800e14a:	6078      	str	r0, [r7, #4]
 800e14c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800e14e:	2300      	movs	r3, #0
 800e150:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800e152:	4b86      	ldr	r3, [pc, #536]	@ (800e36c <HAL_GPIO_Init+0x228>)
 800e154:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800e156:	e18c      	b.n	800e472 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800e158:	683b      	ldr	r3, [r7, #0]
 800e15a:	681a      	ldr	r2, [r3, #0]
 800e15c:	2101      	movs	r1, #1
 800e15e:	69fb      	ldr	r3, [r7, #28]
 800e160:	fa01 f303 	lsl.w	r3, r1, r3
 800e164:	4013      	ands	r3, r2
 800e166:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800e168:	693b      	ldr	r3, [r7, #16]
 800e16a:	2b00      	cmp	r3, #0
 800e16c:	f000 817e 	beq.w	800e46c <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800e170:	683b      	ldr	r3, [r7, #0]
 800e172:	685b      	ldr	r3, [r3, #4]
 800e174:	f003 0303 	and.w	r3, r3, #3
 800e178:	2b01      	cmp	r3, #1
 800e17a:	d005      	beq.n	800e188 <HAL_GPIO_Init+0x44>
 800e17c:	683b      	ldr	r3, [r7, #0]
 800e17e:	685b      	ldr	r3, [r3, #4]
 800e180:	f003 0303 	and.w	r3, r3, #3
 800e184:	2b02      	cmp	r3, #2
 800e186:	d130      	bne.n	800e1ea <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	689b      	ldr	r3, [r3, #8]
 800e18c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800e18e:	69fb      	ldr	r3, [r7, #28]
 800e190:	005b      	lsls	r3, r3, #1
 800e192:	2203      	movs	r2, #3
 800e194:	fa02 f303 	lsl.w	r3, r2, r3
 800e198:	43db      	mvns	r3, r3
 800e19a:	69ba      	ldr	r2, [r7, #24]
 800e19c:	4013      	ands	r3, r2
 800e19e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800e1a0:	683b      	ldr	r3, [r7, #0]
 800e1a2:	68da      	ldr	r2, [r3, #12]
 800e1a4:	69fb      	ldr	r3, [r7, #28]
 800e1a6:	005b      	lsls	r3, r3, #1
 800e1a8:	fa02 f303 	lsl.w	r3, r2, r3
 800e1ac:	69ba      	ldr	r2, [r7, #24]
 800e1ae:	4313      	orrs	r3, r2
 800e1b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	69ba      	ldr	r2, [r7, #24]
 800e1b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	685b      	ldr	r3, [r3, #4]
 800e1bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800e1be:	2201      	movs	r2, #1
 800e1c0:	69fb      	ldr	r3, [r7, #28]
 800e1c2:	fa02 f303 	lsl.w	r3, r2, r3
 800e1c6:	43db      	mvns	r3, r3
 800e1c8:	69ba      	ldr	r2, [r7, #24]
 800e1ca:	4013      	ands	r3, r2
 800e1cc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800e1ce:	683b      	ldr	r3, [r7, #0]
 800e1d0:	685b      	ldr	r3, [r3, #4]
 800e1d2:	091b      	lsrs	r3, r3, #4
 800e1d4:	f003 0201 	and.w	r2, r3, #1
 800e1d8:	69fb      	ldr	r3, [r7, #28]
 800e1da:	fa02 f303 	lsl.w	r3, r2, r3
 800e1de:	69ba      	ldr	r2, [r7, #24]
 800e1e0:	4313      	orrs	r3, r2
 800e1e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	69ba      	ldr	r2, [r7, #24]
 800e1e8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800e1ea:	683b      	ldr	r3, [r7, #0]
 800e1ec:	685b      	ldr	r3, [r3, #4]
 800e1ee:	f003 0303 	and.w	r3, r3, #3
 800e1f2:	2b03      	cmp	r3, #3
 800e1f4:	d017      	beq.n	800e226 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	68db      	ldr	r3, [r3, #12]
 800e1fa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800e1fc:	69fb      	ldr	r3, [r7, #28]
 800e1fe:	005b      	lsls	r3, r3, #1
 800e200:	2203      	movs	r2, #3
 800e202:	fa02 f303 	lsl.w	r3, r2, r3
 800e206:	43db      	mvns	r3, r3
 800e208:	69ba      	ldr	r2, [r7, #24]
 800e20a:	4013      	ands	r3, r2
 800e20c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800e20e:	683b      	ldr	r3, [r7, #0]
 800e210:	689a      	ldr	r2, [r3, #8]
 800e212:	69fb      	ldr	r3, [r7, #28]
 800e214:	005b      	lsls	r3, r3, #1
 800e216:	fa02 f303 	lsl.w	r3, r2, r3
 800e21a:	69ba      	ldr	r2, [r7, #24]
 800e21c:	4313      	orrs	r3, r2
 800e21e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	69ba      	ldr	r2, [r7, #24]
 800e224:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800e226:	683b      	ldr	r3, [r7, #0]
 800e228:	685b      	ldr	r3, [r3, #4]
 800e22a:	f003 0303 	and.w	r3, r3, #3
 800e22e:	2b02      	cmp	r3, #2
 800e230:	d123      	bne.n	800e27a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800e232:	69fb      	ldr	r3, [r7, #28]
 800e234:	08da      	lsrs	r2, r3, #3
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	3208      	adds	r2, #8
 800e23a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e23e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800e240:	69fb      	ldr	r3, [r7, #28]
 800e242:	f003 0307 	and.w	r3, r3, #7
 800e246:	009b      	lsls	r3, r3, #2
 800e248:	220f      	movs	r2, #15
 800e24a:	fa02 f303 	lsl.w	r3, r2, r3
 800e24e:	43db      	mvns	r3, r3
 800e250:	69ba      	ldr	r2, [r7, #24]
 800e252:	4013      	ands	r3, r2
 800e254:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800e256:	683b      	ldr	r3, [r7, #0]
 800e258:	691a      	ldr	r2, [r3, #16]
 800e25a:	69fb      	ldr	r3, [r7, #28]
 800e25c:	f003 0307 	and.w	r3, r3, #7
 800e260:	009b      	lsls	r3, r3, #2
 800e262:	fa02 f303 	lsl.w	r3, r2, r3
 800e266:	69ba      	ldr	r2, [r7, #24]
 800e268:	4313      	orrs	r3, r2
 800e26a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800e26c:	69fb      	ldr	r3, [r7, #28]
 800e26e:	08da      	lsrs	r2, r3, #3
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	3208      	adds	r2, #8
 800e274:	69b9      	ldr	r1, [r7, #24]
 800e276:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	681b      	ldr	r3, [r3, #0]
 800e27e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800e280:	69fb      	ldr	r3, [r7, #28]
 800e282:	005b      	lsls	r3, r3, #1
 800e284:	2203      	movs	r2, #3
 800e286:	fa02 f303 	lsl.w	r3, r2, r3
 800e28a:	43db      	mvns	r3, r3
 800e28c:	69ba      	ldr	r2, [r7, #24]
 800e28e:	4013      	ands	r3, r2
 800e290:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800e292:	683b      	ldr	r3, [r7, #0]
 800e294:	685b      	ldr	r3, [r3, #4]
 800e296:	f003 0203 	and.w	r2, r3, #3
 800e29a:	69fb      	ldr	r3, [r7, #28]
 800e29c:	005b      	lsls	r3, r3, #1
 800e29e:	fa02 f303 	lsl.w	r3, r2, r3
 800e2a2:	69ba      	ldr	r2, [r7, #24]
 800e2a4:	4313      	orrs	r3, r2
 800e2a6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	69ba      	ldr	r2, [r7, #24]
 800e2ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800e2ae:	683b      	ldr	r3, [r7, #0]
 800e2b0:	685b      	ldr	r3, [r3, #4]
 800e2b2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800e2b6:	2b00      	cmp	r3, #0
 800e2b8:	f000 80d8 	beq.w	800e46c <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800e2bc:	4b2c      	ldr	r3, [pc, #176]	@ (800e370 <HAL_GPIO_Init+0x22c>)
 800e2be:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800e2c2:	4a2b      	ldr	r2, [pc, #172]	@ (800e370 <HAL_GPIO_Init+0x22c>)
 800e2c4:	f043 0302 	orr.w	r3, r3, #2
 800e2c8:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800e2cc:	4b28      	ldr	r3, [pc, #160]	@ (800e370 <HAL_GPIO_Init+0x22c>)
 800e2ce:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800e2d2:	f003 0302 	and.w	r3, r3, #2
 800e2d6:	60fb      	str	r3, [r7, #12]
 800e2d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800e2da:	4a26      	ldr	r2, [pc, #152]	@ (800e374 <HAL_GPIO_Init+0x230>)
 800e2dc:	69fb      	ldr	r3, [r7, #28]
 800e2de:	089b      	lsrs	r3, r3, #2
 800e2e0:	3302      	adds	r3, #2
 800e2e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e2e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800e2e8:	69fb      	ldr	r3, [r7, #28]
 800e2ea:	f003 0303 	and.w	r3, r3, #3
 800e2ee:	009b      	lsls	r3, r3, #2
 800e2f0:	220f      	movs	r2, #15
 800e2f2:	fa02 f303 	lsl.w	r3, r2, r3
 800e2f6:	43db      	mvns	r3, r3
 800e2f8:	69ba      	ldr	r2, [r7, #24]
 800e2fa:	4013      	ands	r3, r2
 800e2fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	4a1d      	ldr	r2, [pc, #116]	@ (800e378 <HAL_GPIO_Init+0x234>)
 800e302:	4293      	cmp	r3, r2
 800e304:	d04a      	beq.n	800e39c <HAL_GPIO_Init+0x258>
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	4a1c      	ldr	r2, [pc, #112]	@ (800e37c <HAL_GPIO_Init+0x238>)
 800e30a:	4293      	cmp	r3, r2
 800e30c:	d02b      	beq.n	800e366 <HAL_GPIO_Init+0x222>
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	4a1b      	ldr	r2, [pc, #108]	@ (800e380 <HAL_GPIO_Init+0x23c>)
 800e312:	4293      	cmp	r3, r2
 800e314:	d025      	beq.n	800e362 <HAL_GPIO_Init+0x21e>
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	4a1a      	ldr	r2, [pc, #104]	@ (800e384 <HAL_GPIO_Init+0x240>)
 800e31a:	4293      	cmp	r3, r2
 800e31c:	d01f      	beq.n	800e35e <HAL_GPIO_Init+0x21a>
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	4a19      	ldr	r2, [pc, #100]	@ (800e388 <HAL_GPIO_Init+0x244>)
 800e322:	4293      	cmp	r3, r2
 800e324:	d019      	beq.n	800e35a <HAL_GPIO_Init+0x216>
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	4a18      	ldr	r2, [pc, #96]	@ (800e38c <HAL_GPIO_Init+0x248>)
 800e32a:	4293      	cmp	r3, r2
 800e32c:	d013      	beq.n	800e356 <HAL_GPIO_Init+0x212>
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	4a17      	ldr	r2, [pc, #92]	@ (800e390 <HAL_GPIO_Init+0x24c>)
 800e332:	4293      	cmp	r3, r2
 800e334:	d00d      	beq.n	800e352 <HAL_GPIO_Init+0x20e>
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	4a16      	ldr	r2, [pc, #88]	@ (800e394 <HAL_GPIO_Init+0x250>)
 800e33a:	4293      	cmp	r3, r2
 800e33c:	d007      	beq.n	800e34e <HAL_GPIO_Init+0x20a>
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	4a15      	ldr	r2, [pc, #84]	@ (800e398 <HAL_GPIO_Init+0x254>)
 800e342:	4293      	cmp	r3, r2
 800e344:	d101      	bne.n	800e34a <HAL_GPIO_Init+0x206>
 800e346:	2309      	movs	r3, #9
 800e348:	e029      	b.n	800e39e <HAL_GPIO_Init+0x25a>
 800e34a:	230a      	movs	r3, #10
 800e34c:	e027      	b.n	800e39e <HAL_GPIO_Init+0x25a>
 800e34e:	2307      	movs	r3, #7
 800e350:	e025      	b.n	800e39e <HAL_GPIO_Init+0x25a>
 800e352:	2306      	movs	r3, #6
 800e354:	e023      	b.n	800e39e <HAL_GPIO_Init+0x25a>
 800e356:	2305      	movs	r3, #5
 800e358:	e021      	b.n	800e39e <HAL_GPIO_Init+0x25a>
 800e35a:	2304      	movs	r3, #4
 800e35c:	e01f      	b.n	800e39e <HAL_GPIO_Init+0x25a>
 800e35e:	2303      	movs	r3, #3
 800e360:	e01d      	b.n	800e39e <HAL_GPIO_Init+0x25a>
 800e362:	2302      	movs	r3, #2
 800e364:	e01b      	b.n	800e39e <HAL_GPIO_Init+0x25a>
 800e366:	2301      	movs	r3, #1
 800e368:	e019      	b.n	800e39e <HAL_GPIO_Init+0x25a>
 800e36a:	bf00      	nop
 800e36c:	58000080 	.word	0x58000080
 800e370:	58024400 	.word	0x58024400
 800e374:	58000400 	.word	0x58000400
 800e378:	58020000 	.word	0x58020000
 800e37c:	58020400 	.word	0x58020400
 800e380:	58020800 	.word	0x58020800
 800e384:	58020c00 	.word	0x58020c00
 800e388:	58021000 	.word	0x58021000
 800e38c:	58021400 	.word	0x58021400
 800e390:	58021800 	.word	0x58021800
 800e394:	58021c00 	.word	0x58021c00
 800e398:	58022400 	.word	0x58022400
 800e39c:	2300      	movs	r3, #0
 800e39e:	69fa      	ldr	r2, [r7, #28]
 800e3a0:	f002 0203 	and.w	r2, r2, #3
 800e3a4:	0092      	lsls	r2, r2, #2
 800e3a6:	4093      	lsls	r3, r2
 800e3a8:	69ba      	ldr	r2, [r7, #24]
 800e3aa:	4313      	orrs	r3, r2
 800e3ac:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800e3ae:	4938      	ldr	r1, [pc, #224]	@ (800e490 <HAL_GPIO_Init+0x34c>)
 800e3b0:	69fb      	ldr	r3, [r7, #28]
 800e3b2:	089b      	lsrs	r3, r3, #2
 800e3b4:	3302      	adds	r3, #2
 800e3b6:	69ba      	ldr	r2, [r7, #24]
 800e3b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800e3bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e3c0:	681b      	ldr	r3, [r3, #0]
 800e3c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800e3c4:	693b      	ldr	r3, [r7, #16]
 800e3c6:	43db      	mvns	r3, r3
 800e3c8:	69ba      	ldr	r2, [r7, #24]
 800e3ca:	4013      	ands	r3, r2
 800e3cc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800e3ce:	683b      	ldr	r3, [r7, #0]
 800e3d0:	685b      	ldr	r3, [r3, #4]
 800e3d2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800e3d6:	2b00      	cmp	r3, #0
 800e3d8:	d003      	beq.n	800e3e2 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800e3da:	69ba      	ldr	r2, [r7, #24]
 800e3dc:	693b      	ldr	r3, [r7, #16]
 800e3de:	4313      	orrs	r3, r2
 800e3e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800e3e2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800e3e6:	69bb      	ldr	r3, [r7, #24]
 800e3e8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800e3ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e3ee:	685b      	ldr	r3, [r3, #4]
 800e3f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800e3f2:	693b      	ldr	r3, [r7, #16]
 800e3f4:	43db      	mvns	r3, r3
 800e3f6:	69ba      	ldr	r2, [r7, #24]
 800e3f8:	4013      	ands	r3, r2
 800e3fa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800e3fc:	683b      	ldr	r3, [r7, #0]
 800e3fe:	685b      	ldr	r3, [r3, #4]
 800e400:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800e404:	2b00      	cmp	r3, #0
 800e406:	d003      	beq.n	800e410 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 800e408:	69ba      	ldr	r2, [r7, #24]
 800e40a:	693b      	ldr	r3, [r7, #16]
 800e40c:	4313      	orrs	r3, r2
 800e40e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800e410:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800e414:	69bb      	ldr	r3, [r7, #24]
 800e416:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800e418:	697b      	ldr	r3, [r7, #20]
 800e41a:	685b      	ldr	r3, [r3, #4]
 800e41c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800e41e:	693b      	ldr	r3, [r7, #16]
 800e420:	43db      	mvns	r3, r3
 800e422:	69ba      	ldr	r2, [r7, #24]
 800e424:	4013      	ands	r3, r2
 800e426:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800e428:	683b      	ldr	r3, [r7, #0]
 800e42a:	685b      	ldr	r3, [r3, #4]
 800e42c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e430:	2b00      	cmp	r3, #0
 800e432:	d003      	beq.n	800e43c <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 800e434:	69ba      	ldr	r2, [r7, #24]
 800e436:	693b      	ldr	r3, [r7, #16]
 800e438:	4313      	orrs	r3, r2
 800e43a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800e43c:	697b      	ldr	r3, [r7, #20]
 800e43e:	69ba      	ldr	r2, [r7, #24]
 800e440:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800e442:	697b      	ldr	r3, [r7, #20]
 800e444:	681b      	ldr	r3, [r3, #0]
 800e446:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800e448:	693b      	ldr	r3, [r7, #16]
 800e44a:	43db      	mvns	r3, r3
 800e44c:	69ba      	ldr	r2, [r7, #24]
 800e44e:	4013      	ands	r3, r2
 800e450:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800e452:	683b      	ldr	r3, [r7, #0]
 800e454:	685b      	ldr	r3, [r3, #4]
 800e456:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	d003      	beq.n	800e466 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800e45e:	69ba      	ldr	r2, [r7, #24]
 800e460:	693b      	ldr	r3, [r7, #16]
 800e462:	4313      	orrs	r3, r2
 800e464:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800e466:	697b      	ldr	r3, [r7, #20]
 800e468:	69ba      	ldr	r2, [r7, #24]
 800e46a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800e46c:	69fb      	ldr	r3, [r7, #28]
 800e46e:	3301      	adds	r3, #1
 800e470:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800e472:	683b      	ldr	r3, [r7, #0]
 800e474:	681a      	ldr	r2, [r3, #0]
 800e476:	69fb      	ldr	r3, [r7, #28]
 800e478:	fa22 f303 	lsr.w	r3, r2, r3
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	f47f ae6b 	bne.w	800e158 <HAL_GPIO_Init+0x14>
  }
}
 800e482:	bf00      	nop
 800e484:	bf00      	nop
 800e486:	3724      	adds	r7, #36	@ 0x24
 800e488:	46bd      	mov	sp, r7
 800e48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e48e:	4770      	bx	lr
 800e490:	58000400 	.word	0x58000400

0800e494 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800e494:	b480      	push	{r7}
 800e496:	b085      	sub	sp, #20
 800e498:	af00      	add	r7, sp, #0
 800e49a:	6078      	str	r0, [r7, #4]
 800e49c:	460b      	mov	r3, r1
 800e49e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	691a      	ldr	r2, [r3, #16]
 800e4a4:	887b      	ldrh	r3, [r7, #2]
 800e4a6:	4013      	ands	r3, r2
 800e4a8:	2b00      	cmp	r3, #0
 800e4aa:	d002      	beq.n	800e4b2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800e4ac:	2301      	movs	r3, #1
 800e4ae:	73fb      	strb	r3, [r7, #15]
 800e4b0:	e001      	b.n	800e4b6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800e4b2:	2300      	movs	r3, #0
 800e4b4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800e4b6:	7bfb      	ldrb	r3, [r7, #15]
}
 800e4b8:	4618      	mov	r0, r3
 800e4ba:	3714      	adds	r7, #20
 800e4bc:	46bd      	mov	sp, r7
 800e4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4c2:	4770      	bx	lr

0800e4c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800e4c4:	b480      	push	{r7}
 800e4c6:	b083      	sub	sp, #12
 800e4c8:	af00      	add	r7, sp, #0
 800e4ca:	6078      	str	r0, [r7, #4]
 800e4cc:	460b      	mov	r3, r1
 800e4ce:	807b      	strh	r3, [r7, #2]
 800e4d0:	4613      	mov	r3, r2
 800e4d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800e4d4:	787b      	ldrb	r3, [r7, #1]
 800e4d6:	2b00      	cmp	r3, #0
 800e4d8:	d003      	beq.n	800e4e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800e4da:	887a      	ldrh	r2, [r7, #2]
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800e4e0:	e003      	b.n	800e4ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800e4e2:	887b      	ldrh	r3, [r7, #2]
 800e4e4:	041a      	lsls	r2, r3, #16
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	619a      	str	r2, [r3, #24]
}
 800e4ea:	bf00      	nop
 800e4ec:	370c      	adds	r7, #12
 800e4ee:	46bd      	mov	sp, r7
 800e4f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4f4:	4770      	bx	lr

0800e4f6 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800e4f6:	b580      	push	{r7, lr}
 800e4f8:	b082      	sub	sp, #8
 800e4fa:	af00      	add	r7, sp, #0
 800e4fc:	4603      	mov	r3, r0
 800e4fe:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 800e500:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e504:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800e508:	88fb      	ldrh	r3, [r7, #6]
 800e50a:	4013      	ands	r3, r2
 800e50c:	2b00      	cmp	r3, #0
 800e50e:	d008      	beq.n	800e522 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800e510:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800e514:	88fb      	ldrh	r3, [r7, #6]
 800e516:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800e51a:	88fb      	ldrh	r3, [r7, #6]
 800e51c:	4618      	mov	r0, r3
 800e51e:	f7f7 fd67 	bl	8005ff0 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800e522:	bf00      	nop
 800e524:	3708      	adds	r7, #8
 800e526:	46bd      	mov	sp, r7
 800e528:	bd80      	pop	{r7, pc}
	...

0800e52c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800e52c:	b580      	push	{r7, lr}
 800e52e:	b082      	sub	sp, #8
 800e530:	af00      	add	r7, sp, #0
 800e532:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	2b00      	cmp	r3, #0
 800e538:	d101      	bne.n	800e53e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800e53a:	2301      	movs	r3, #1
 800e53c:	e08b      	b.n	800e656 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e544:	b2db      	uxtb	r3, r3
 800e546:	2b00      	cmp	r3, #0
 800e548:	d106      	bne.n	800e558 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	2200      	movs	r2, #0
 800e54e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800e552:	6878      	ldr	r0, [r7, #4]
 800e554:	f7f6 fb58 	bl	8004c08 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	2224      	movs	r2, #36	@ 0x24
 800e55c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	681b      	ldr	r3, [r3, #0]
 800e564:	681a      	ldr	r2, [r3, #0]
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	681b      	ldr	r3, [r3, #0]
 800e56a:	f022 0201 	bic.w	r2, r2, #1
 800e56e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	685a      	ldr	r2, [r3, #4]
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	681b      	ldr	r3, [r3, #0]
 800e578:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800e57c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	681b      	ldr	r3, [r3, #0]
 800e582:	689a      	ldr	r2, [r3, #8]
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	681b      	ldr	r3, [r3, #0]
 800e588:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800e58c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	68db      	ldr	r3, [r3, #12]
 800e592:	2b01      	cmp	r3, #1
 800e594:	d107      	bne.n	800e5a6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	689a      	ldr	r2, [r3, #8]
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	681b      	ldr	r3, [r3, #0]
 800e59e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800e5a2:	609a      	str	r2, [r3, #8]
 800e5a4:	e006      	b.n	800e5b4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	689a      	ldr	r2, [r3, #8]
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	681b      	ldr	r3, [r3, #0]
 800e5ae:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800e5b2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	68db      	ldr	r3, [r3, #12]
 800e5b8:	2b02      	cmp	r3, #2
 800e5ba:	d108      	bne.n	800e5ce <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	681b      	ldr	r3, [r3, #0]
 800e5c0:	685a      	ldr	r2, [r3, #4]
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	681b      	ldr	r3, [r3, #0]
 800e5c6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e5ca:	605a      	str	r2, [r3, #4]
 800e5cc:	e007      	b.n	800e5de <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	681b      	ldr	r3, [r3, #0]
 800e5d2:	685a      	ldr	r2, [r3, #4]
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	681b      	ldr	r3, [r3, #0]
 800e5d8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800e5dc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	681b      	ldr	r3, [r3, #0]
 800e5e2:	6859      	ldr	r1, [r3, #4]
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	681a      	ldr	r2, [r3, #0]
 800e5e8:	4b1d      	ldr	r3, [pc, #116]	@ (800e660 <HAL_I2C_Init+0x134>)
 800e5ea:	430b      	orrs	r3, r1
 800e5ec:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	681b      	ldr	r3, [r3, #0]
 800e5f2:	68da      	ldr	r2, [r3, #12]
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	681b      	ldr	r3, [r3, #0]
 800e5f8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800e5fc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	691a      	ldr	r2, [r3, #16]
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	695b      	ldr	r3, [r3, #20]
 800e606:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	699b      	ldr	r3, [r3, #24]
 800e60e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	681b      	ldr	r3, [r3, #0]
 800e614:	430a      	orrs	r2, r1
 800e616:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	69d9      	ldr	r1, [r3, #28]
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	6a1a      	ldr	r2, [r3, #32]
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	681b      	ldr	r3, [r3, #0]
 800e624:	430a      	orrs	r2, r1
 800e626:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	681b      	ldr	r3, [r3, #0]
 800e62c:	681a      	ldr	r2, [r3, #0]
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	681b      	ldr	r3, [r3, #0]
 800e632:	f042 0201 	orr.w	r2, r2, #1
 800e636:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	2200      	movs	r2, #0
 800e63c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	2220      	movs	r2, #32
 800e642:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	2200      	movs	r2, #0
 800e64a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	2200      	movs	r2, #0
 800e650:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800e654:	2300      	movs	r3, #0
}
 800e656:	4618      	mov	r0, r3
 800e658:	3708      	adds	r7, #8
 800e65a:	46bd      	mov	sp, r7
 800e65c:	bd80      	pop	{r7, pc}
 800e65e:	bf00      	nop
 800e660:	02008000 	.word	0x02008000

0800e664 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e664:	b580      	push	{r7, lr}
 800e666:	b088      	sub	sp, #32
 800e668:	af02      	add	r7, sp, #8
 800e66a:	60f8      	str	r0, [r7, #12]
 800e66c:	4608      	mov	r0, r1
 800e66e:	4611      	mov	r1, r2
 800e670:	461a      	mov	r2, r3
 800e672:	4603      	mov	r3, r0
 800e674:	817b      	strh	r3, [r7, #10]
 800e676:	460b      	mov	r3, r1
 800e678:	813b      	strh	r3, [r7, #8]
 800e67a:	4613      	mov	r3, r2
 800e67c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800e67e:	68fb      	ldr	r3, [r7, #12]
 800e680:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e684:	b2db      	uxtb	r3, r3
 800e686:	2b20      	cmp	r3, #32
 800e688:	f040 80f9 	bne.w	800e87e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800e68c:	6a3b      	ldr	r3, [r7, #32]
 800e68e:	2b00      	cmp	r3, #0
 800e690:	d002      	beq.n	800e698 <HAL_I2C_Mem_Write+0x34>
 800e692:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e694:	2b00      	cmp	r3, #0
 800e696:	d105      	bne.n	800e6a4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800e698:	68fb      	ldr	r3, [r7, #12]
 800e69a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e69e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800e6a0:	2301      	movs	r3, #1
 800e6a2:	e0ed      	b.n	800e880 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e6a4:	68fb      	ldr	r3, [r7, #12]
 800e6a6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800e6aa:	2b01      	cmp	r3, #1
 800e6ac:	d101      	bne.n	800e6b2 <HAL_I2C_Mem_Write+0x4e>
 800e6ae:	2302      	movs	r3, #2
 800e6b0:	e0e6      	b.n	800e880 <HAL_I2C_Mem_Write+0x21c>
 800e6b2:	68fb      	ldr	r3, [r7, #12]
 800e6b4:	2201      	movs	r2, #1
 800e6b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800e6ba:	f7fa fdbb 	bl	8009234 <HAL_GetTick>
 800e6be:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800e6c0:	697b      	ldr	r3, [r7, #20]
 800e6c2:	9300      	str	r3, [sp, #0]
 800e6c4:	2319      	movs	r3, #25
 800e6c6:	2201      	movs	r2, #1
 800e6c8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800e6cc:	68f8      	ldr	r0, [r7, #12]
 800e6ce:	f002 f818 	bl	8010702 <I2C_WaitOnFlagUntilTimeout>
 800e6d2:	4603      	mov	r3, r0
 800e6d4:	2b00      	cmp	r3, #0
 800e6d6:	d001      	beq.n	800e6dc <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800e6d8:	2301      	movs	r3, #1
 800e6da:	e0d1      	b.n	800e880 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800e6dc:	68fb      	ldr	r3, [r7, #12]
 800e6de:	2221      	movs	r2, #33	@ 0x21
 800e6e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800e6e4:	68fb      	ldr	r3, [r7, #12]
 800e6e6:	2240      	movs	r2, #64	@ 0x40
 800e6e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e6ec:	68fb      	ldr	r3, [r7, #12]
 800e6ee:	2200      	movs	r2, #0
 800e6f0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800e6f2:	68fb      	ldr	r3, [r7, #12]
 800e6f4:	6a3a      	ldr	r2, [r7, #32]
 800e6f6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800e6f8:	68fb      	ldr	r3, [r7, #12]
 800e6fa:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800e6fc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800e6fe:	68fb      	ldr	r3, [r7, #12]
 800e700:	2200      	movs	r2, #0
 800e702:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800e704:	88f8      	ldrh	r0, [r7, #6]
 800e706:	893a      	ldrh	r2, [r7, #8]
 800e708:	8979      	ldrh	r1, [r7, #10]
 800e70a:	697b      	ldr	r3, [r7, #20]
 800e70c:	9301      	str	r3, [sp, #4]
 800e70e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e710:	9300      	str	r3, [sp, #0]
 800e712:	4603      	mov	r3, r0
 800e714:	68f8      	ldr	r0, [r7, #12]
 800e716:	f001 f965 	bl	800f9e4 <I2C_RequestMemoryWrite>
 800e71a:	4603      	mov	r3, r0
 800e71c:	2b00      	cmp	r3, #0
 800e71e:	d005      	beq.n	800e72c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800e720:	68fb      	ldr	r3, [r7, #12]
 800e722:	2200      	movs	r2, #0
 800e724:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800e728:	2301      	movs	r3, #1
 800e72a:	e0a9      	b.n	800e880 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800e72c:	68fb      	ldr	r3, [r7, #12]
 800e72e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e730:	b29b      	uxth	r3, r3
 800e732:	2bff      	cmp	r3, #255	@ 0xff
 800e734:	d90e      	bls.n	800e754 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800e736:	68fb      	ldr	r3, [r7, #12]
 800e738:	22ff      	movs	r2, #255	@ 0xff
 800e73a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800e73c:	68fb      	ldr	r3, [r7, #12]
 800e73e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e740:	b2da      	uxtb	r2, r3
 800e742:	8979      	ldrh	r1, [r7, #10]
 800e744:	2300      	movs	r3, #0
 800e746:	9300      	str	r3, [sp, #0]
 800e748:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800e74c:	68f8      	ldr	r0, [r7, #12]
 800e74e:	f002 f99b 	bl	8010a88 <I2C_TransferConfig>
 800e752:	e00f      	b.n	800e774 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800e754:	68fb      	ldr	r3, [r7, #12]
 800e756:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e758:	b29a      	uxth	r2, r3
 800e75a:	68fb      	ldr	r3, [r7, #12]
 800e75c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800e75e:	68fb      	ldr	r3, [r7, #12]
 800e760:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e762:	b2da      	uxtb	r2, r3
 800e764:	8979      	ldrh	r1, [r7, #10]
 800e766:	2300      	movs	r3, #0
 800e768:	9300      	str	r3, [sp, #0]
 800e76a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800e76e:	68f8      	ldr	r0, [r7, #12]
 800e770:	f002 f98a 	bl	8010a88 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800e774:	697a      	ldr	r2, [r7, #20]
 800e776:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e778:	68f8      	ldr	r0, [r7, #12]
 800e77a:	f002 f81b 	bl	80107b4 <I2C_WaitOnTXISFlagUntilTimeout>
 800e77e:	4603      	mov	r3, r0
 800e780:	2b00      	cmp	r3, #0
 800e782:	d001      	beq.n	800e788 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800e784:	2301      	movs	r3, #1
 800e786:	e07b      	b.n	800e880 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800e788:	68fb      	ldr	r3, [r7, #12]
 800e78a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e78c:	781a      	ldrb	r2, [r3, #0]
 800e78e:	68fb      	ldr	r3, [r7, #12]
 800e790:	681b      	ldr	r3, [r3, #0]
 800e792:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800e794:	68fb      	ldr	r3, [r7, #12]
 800e796:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e798:	1c5a      	adds	r2, r3, #1
 800e79a:	68fb      	ldr	r3, [r7, #12]
 800e79c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800e79e:	68fb      	ldr	r3, [r7, #12]
 800e7a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e7a2:	b29b      	uxth	r3, r3
 800e7a4:	3b01      	subs	r3, #1
 800e7a6:	b29a      	uxth	r2, r3
 800e7a8:	68fb      	ldr	r3, [r7, #12]
 800e7aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800e7ac:	68fb      	ldr	r3, [r7, #12]
 800e7ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e7b0:	3b01      	subs	r3, #1
 800e7b2:	b29a      	uxth	r2, r3
 800e7b4:	68fb      	ldr	r3, [r7, #12]
 800e7b6:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800e7b8:	68fb      	ldr	r3, [r7, #12]
 800e7ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e7bc:	b29b      	uxth	r3, r3
 800e7be:	2b00      	cmp	r3, #0
 800e7c0:	d034      	beq.n	800e82c <HAL_I2C_Mem_Write+0x1c8>
 800e7c2:	68fb      	ldr	r3, [r7, #12]
 800e7c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e7c6:	2b00      	cmp	r3, #0
 800e7c8:	d130      	bne.n	800e82c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800e7ca:	697b      	ldr	r3, [r7, #20]
 800e7cc:	9300      	str	r3, [sp, #0]
 800e7ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e7d0:	2200      	movs	r2, #0
 800e7d2:	2180      	movs	r1, #128	@ 0x80
 800e7d4:	68f8      	ldr	r0, [r7, #12]
 800e7d6:	f001 ff94 	bl	8010702 <I2C_WaitOnFlagUntilTimeout>
 800e7da:	4603      	mov	r3, r0
 800e7dc:	2b00      	cmp	r3, #0
 800e7de:	d001      	beq.n	800e7e4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800e7e0:	2301      	movs	r3, #1
 800e7e2:	e04d      	b.n	800e880 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800e7e4:	68fb      	ldr	r3, [r7, #12]
 800e7e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e7e8:	b29b      	uxth	r3, r3
 800e7ea:	2bff      	cmp	r3, #255	@ 0xff
 800e7ec:	d90e      	bls.n	800e80c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800e7ee:	68fb      	ldr	r3, [r7, #12]
 800e7f0:	22ff      	movs	r2, #255	@ 0xff
 800e7f2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800e7f4:	68fb      	ldr	r3, [r7, #12]
 800e7f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e7f8:	b2da      	uxtb	r2, r3
 800e7fa:	8979      	ldrh	r1, [r7, #10]
 800e7fc:	2300      	movs	r3, #0
 800e7fe:	9300      	str	r3, [sp, #0]
 800e800:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800e804:	68f8      	ldr	r0, [r7, #12]
 800e806:	f002 f93f 	bl	8010a88 <I2C_TransferConfig>
 800e80a:	e00f      	b.n	800e82c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800e80c:	68fb      	ldr	r3, [r7, #12]
 800e80e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e810:	b29a      	uxth	r2, r3
 800e812:	68fb      	ldr	r3, [r7, #12]
 800e814:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800e816:	68fb      	ldr	r3, [r7, #12]
 800e818:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e81a:	b2da      	uxtb	r2, r3
 800e81c:	8979      	ldrh	r1, [r7, #10]
 800e81e:	2300      	movs	r3, #0
 800e820:	9300      	str	r3, [sp, #0]
 800e822:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800e826:	68f8      	ldr	r0, [r7, #12]
 800e828:	f002 f92e 	bl	8010a88 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800e82c:	68fb      	ldr	r3, [r7, #12]
 800e82e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e830:	b29b      	uxth	r3, r3
 800e832:	2b00      	cmp	r3, #0
 800e834:	d19e      	bne.n	800e774 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800e836:	697a      	ldr	r2, [r7, #20]
 800e838:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e83a:	68f8      	ldr	r0, [r7, #12]
 800e83c:	f002 f801 	bl	8010842 <I2C_WaitOnSTOPFlagUntilTimeout>
 800e840:	4603      	mov	r3, r0
 800e842:	2b00      	cmp	r3, #0
 800e844:	d001      	beq.n	800e84a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800e846:	2301      	movs	r3, #1
 800e848:	e01a      	b.n	800e880 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800e84a:	68fb      	ldr	r3, [r7, #12]
 800e84c:	681b      	ldr	r3, [r3, #0]
 800e84e:	2220      	movs	r2, #32
 800e850:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800e852:	68fb      	ldr	r3, [r7, #12]
 800e854:	681b      	ldr	r3, [r3, #0]
 800e856:	6859      	ldr	r1, [r3, #4]
 800e858:	68fb      	ldr	r3, [r7, #12]
 800e85a:	681a      	ldr	r2, [r3, #0]
 800e85c:	4b0a      	ldr	r3, [pc, #40]	@ (800e888 <HAL_I2C_Mem_Write+0x224>)
 800e85e:	400b      	ands	r3, r1
 800e860:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800e862:	68fb      	ldr	r3, [r7, #12]
 800e864:	2220      	movs	r2, #32
 800e866:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800e86a:	68fb      	ldr	r3, [r7, #12]
 800e86c:	2200      	movs	r2, #0
 800e86e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e872:	68fb      	ldr	r3, [r7, #12]
 800e874:	2200      	movs	r2, #0
 800e876:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800e87a:	2300      	movs	r3, #0
 800e87c:	e000      	b.n	800e880 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800e87e:	2302      	movs	r3, #2
  }
}
 800e880:	4618      	mov	r0, r3
 800e882:	3718      	adds	r7, #24
 800e884:	46bd      	mov	sp, r7
 800e886:	bd80      	pop	{r7, pc}
 800e888:	fe00e800 	.word	0xfe00e800

0800e88c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e88c:	b580      	push	{r7, lr}
 800e88e:	b088      	sub	sp, #32
 800e890:	af02      	add	r7, sp, #8
 800e892:	60f8      	str	r0, [r7, #12]
 800e894:	4608      	mov	r0, r1
 800e896:	4611      	mov	r1, r2
 800e898:	461a      	mov	r2, r3
 800e89a:	4603      	mov	r3, r0
 800e89c:	817b      	strh	r3, [r7, #10]
 800e89e:	460b      	mov	r3, r1
 800e8a0:	813b      	strh	r3, [r7, #8]
 800e8a2:	4613      	mov	r3, r2
 800e8a4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800e8a6:	68fb      	ldr	r3, [r7, #12]
 800e8a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e8ac:	b2db      	uxtb	r3, r3
 800e8ae:	2b20      	cmp	r3, #32
 800e8b0:	f040 80fd 	bne.w	800eaae <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800e8b4:	6a3b      	ldr	r3, [r7, #32]
 800e8b6:	2b00      	cmp	r3, #0
 800e8b8:	d002      	beq.n	800e8c0 <HAL_I2C_Mem_Read+0x34>
 800e8ba:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e8bc:	2b00      	cmp	r3, #0
 800e8be:	d105      	bne.n	800e8cc <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800e8c0:	68fb      	ldr	r3, [r7, #12]
 800e8c2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e8c6:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800e8c8:	2301      	movs	r3, #1
 800e8ca:	e0f1      	b.n	800eab0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e8cc:	68fb      	ldr	r3, [r7, #12]
 800e8ce:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800e8d2:	2b01      	cmp	r3, #1
 800e8d4:	d101      	bne.n	800e8da <HAL_I2C_Mem_Read+0x4e>
 800e8d6:	2302      	movs	r3, #2
 800e8d8:	e0ea      	b.n	800eab0 <HAL_I2C_Mem_Read+0x224>
 800e8da:	68fb      	ldr	r3, [r7, #12]
 800e8dc:	2201      	movs	r2, #1
 800e8de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800e8e2:	f7fa fca7 	bl	8009234 <HAL_GetTick>
 800e8e6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800e8e8:	697b      	ldr	r3, [r7, #20]
 800e8ea:	9300      	str	r3, [sp, #0]
 800e8ec:	2319      	movs	r3, #25
 800e8ee:	2201      	movs	r2, #1
 800e8f0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800e8f4:	68f8      	ldr	r0, [r7, #12]
 800e8f6:	f001 ff04 	bl	8010702 <I2C_WaitOnFlagUntilTimeout>
 800e8fa:	4603      	mov	r3, r0
 800e8fc:	2b00      	cmp	r3, #0
 800e8fe:	d001      	beq.n	800e904 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800e900:	2301      	movs	r3, #1
 800e902:	e0d5      	b.n	800eab0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800e904:	68fb      	ldr	r3, [r7, #12]
 800e906:	2222      	movs	r2, #34	@ 0x22
 800e908:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800e90c:	68fb      	ldr	r3, [r7, #12]
 800e90e:	2240      	movs	r2, #64	@ 0x40
 800e910:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e914:	68fb      	ldr	r3, [r7, #12]
 800e916:	2200      	movs	r2, #0
 800e918:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800e91a:	68fb      	ldr	r3, [r7, #12]
 800e91c:	6a3a      	ldr	r2, [r7, #32]
 800e91e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800e920:	68fb      	ldr	r3, [r7, #12]
 800e922:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800e924:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800e926:	68fb      	ldr	r3, [r7, #12]
 800e928:	2200      	movs	r2, #0
 800e92a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800e92c:	88f8      	ldrh	r0, [r7, #6]
 800e92e:	893a      	ldrh	r2, [r7, #8]
 800e930:	8979      	ldrh	r1, [r7, #10]
 800e932:	697b      	ldr	r3, [r7, #20]
 800e934:	9301      	str	r3, [sp, #4]
 800e936:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e938:	9300      	str	r3, [sp, #0]
 800e93a:	4603      	mov	r3, r0
 800e93c:	68f8      	ldr	r0, [r7, #12]
 800e93e:	f001 f8a5 	bl	800fa8c <I2C_RequestMemoryRead>
 800e942:	4603      	mov	r3, r0
 800e944:	2b00      	cmp	r3, #0
 800e946:	d005      	beq.n	800e954 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800e948:	68fb      	ldr	r3, [r7, #12]
 800e94a:	2200      	movs	r2, #0
 800e94c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800e950:	2301      	movs	r3, #1
 800e952:	e0ad      	b.n	800eab0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800e954:	68fb      	ldr	r3, [r7, #12]
 800e956:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e958:	b29b      	uxth	r3, r3
 800e95a:	2bff      	cmp	r3, #255	@ 0xff
 800e95c:	d90e      	bls.n	800e97c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800e95e:	68fb      	ldr	r3, [r7, #12]
 800e960:	22ff      	movs	r2, #255	@ 0xff
 800e962:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800e964:	68fb      	ldr	r3, [r7, #12]
 800e966:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e968:	b2da      	uxtb	r2, r3
 800e96a:	8979      	ldrh	r1, [r7, #10]
 800e96c:	4b52      	ldr	r3, [pc, #328]	@ (800eab8 <HAL_I2C_Mem_Read+0x22c>)
 800e96e:	9300      	str	r3, [sp, #0]
 800e970:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800e974:	68f8      	ldr	r0, [r7, #12]
 800e976:	f002 f887 	bl	8010a88 <I2C_TransferConfig>
 800e97a:	e00f      	b.n	800e99c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800e97c:	68fb      	ldr	r3, [r7, #12]
 800e97e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e980:	b29a      	uxth	r2, r3
 800e982:	68fb      	ldr	r3, [r7, #12]
 800e984:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800e986:	68fb      	ldr	r3, [r7, #12]
 800e988:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e98a:	b2da      	uxtb	r2, r3
 800e98c:	8979      	ldrh	r1, [r7, #10]
 800e98e:	4b4a      	ldr	r3, [pc, #296]	@ (800eab8 <HAL_I2C_Mem_Read+0x22c>)
 800e990:	9300      	str	r3, [sp, #0]
 800e992:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800e996:	68f8      	ldr	r0, [r7, #12]
 800e998:	f002 f876 	bl	8010a88 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800e99c:	697b      	ldr	r3, [r7, #20]
 800e99e:	9300      	str	r3, [sp, #0]
 800e9a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e9a2:	2200      	movs	r2, #0
 800e9a4:	2104      	movs	r1, #4
 800e9a6:	68f8      	ldr	r0, [r7, #12]
 800e9a8:	f001 feab 	bl	8010702 <I2C_WaitOnFlagUntilTimeout>
 800e9ac:	4603      	mov	r3, r0
 800e9ae:	2b00      	cmp	r3, #0
 800e9b0:	d001      	beq.n	800e9b6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800e9b2:	2301      	movs	r3, #1
 800e9b4:	e07c      	b.n	800eab0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800e9b6:	68fb      	ldr	r3, [r7, #12]
 800e9b8:	681b      	ldr	r3, [r3, #0]
 800e9ba:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e9bc:	68fb      	ldr	r3, [r7, #12]
 800e9be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e9c0:	b2d2      	uxtb	r2, r2
 800e9c2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800e9c4:	68fb      	ldr	r3, [r7, #12]
 800e9c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e9c8:	1c5a      	adds	r2, r3, #1
 800e9ca:	68fb      	ldr	r3, [r7, #12]
 800e9cc:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800e9ce:	68fb      	ldr	r3, [r7, #12]
 800e9d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e9d2:	3b01      	subs	r3, #1
 800e9d4:	b29a      	uxth	r2, r3
 800e9d6:	68fb      	ldr	r3, [r7, #12]
 800e9d8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800e9da:	68fb      	ldr	r3, [r7, #12]
 800e9dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e9de:	b29b      	uxth	r3, r3
 800e9e0:	3b01      	subs	r3, #1
 800e9e2:	b29a      	uxth	r2, r3
 800e9e4:	68fb      	ldr	r3, [r7, #12]
 800e9e6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800e9e8:	68fb      	ldr	r3, [r7, #12]
 800e9ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e9ec:	b29b      	uxth	r3, r3
 800e9ee:	2b00      	cmp	r3, #0
 800e9f0:	d034      	beq.n	800ea5c <HAL_I2C_Mem_Read+0x1d0>
 800e9f2:	68fb      	ldr	r3, [r7, #12]
 800e9f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e9f6:	2b00      	cmp	r3, #0
 800e9f8:	d130      	bne.n	800ea5c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800e9fa:	697b      	ldr	r3, [r7, #20]
 800e9fc:	9300      	str	r3, [sp, #0]
 800e9fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea00:	2200      	movs	r2, #0
 800ea02:	2180      	movs	r1, #128	@ 0x80
 800ea04:	68f8      	ldr	r0, [r7, #12]
 800ea06:	f001 fe7c 	bl	8010702 <I2C_WaitOnFlagUntilTimeout>
 800ea0a:	4603      	mov	r3, r0
 800ea0c:	2b00      	cmp	r3, #0
 800ea0e:	d001      	beq.n	800ea14 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800ea10:	2301      	movs	r3, #1
 800ea12:	e04d      	b.n	800eab0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ea14:	68fb      	ldr	r3, [r7, #12]
 800ea16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ea18:	b29b      	uxth	r3, r3
 800ea1a:	2bff      	cmp	r3, #255	@ 0xff
 800ea1c:	d90e      	bls.n	800ea3c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800ea1e:	68fb      	ldr	r3, [r7, #12]
 800ea20:	22ff      	movs	r2, #255	@ 0xff
 800ea22:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800ea24:	68fb      	ldr	r3, [r7, #12]
 800ea26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ea28:	b2da      	uxtb	r2, r3
 800ea2a:	8979      	ldrh	r1, [r7, #10]
 800ea2c:	2300      	movs	r3, #0
 800ea2e:	9300      	str	r3, [sp, #0]
 800ea30:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800ea34:	68f8      	ldr	r0, [r7, #12]
 800ea36:	f002 f827 	bl	8010a88 <I2C_TransferConfig>
 800ea3a:	e00f      	b.n	800ea5c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800ea3c:	68fb      	ldr	r3, [r7, #12]
 800ea3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ea40:	b29a      	uxth	r2, r3
 800ea42:	68fb      	ldr	r3, [r7, #12]
 800ea44:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800ea46:	68fb      	ldr	r3, [r7, #12]
 800ea48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ea4a:	b2da      	uxtb	r2, r3
 800ea4c:	8979      	ldrh	r1, [r7, #10]
 800ea4e:	2300      	movs	r3, #0
 800ea50:	9300      	str	r3, [sp, #0]
 800ea52:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800ea56:	68f8      	ldr	r0, [r7, #12]
 800ea58:	f002 f816 	bl	8010a88 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800ea5c:	68fb      	ldr	r3, [r7, #12]
 800ea5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ea60:	b29b      	uxth	r3, r3
 800ea62:	2b00      	cmp	r3, #0
 800ea64:	d19a      	bne.n	800e99c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ea66:	697a      	ldr	r2, [r7, #20]
 800ea68:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ea6a:	68f8      	ldr	r0, [r7, #12]
 800ea6c:	f001 fee9 	bl	8010842 <I2C_WaitOnSTOPFlagUntilTimeout>
 800ea70:	4603      	mov	r3, r0
 800ea72:	2b00      	cmp	r3, #0
 800ea74:	d001      	beq.n	800ea7a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800ea76:	2301      	movs	r3, #1
 800ea78:	e01a      	b.n	800eab0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ea7a:	68fb      	ldr	r3, [r7, #12]
 800ea7c:	681b      	ldr	r3, [r3, #0]
 800ea7e:	2220      	movs	r2, #32
 800ea80:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800ea82:	68fb      	ldr	r3, [r7, #12]
 800ea84:	681b      	ldr	r3, [r3, #0]
 800ea86:	6859      	ldr	r1, [r3, #4]
 800ea88:	68fb      	ldr	r3, [r7, #12]
 800ea8a:	681a      	ldr	r2, [r3, #0]
 800ea8c:	4b0b      	ldr	r3, [pc, #44]	@ (800eabc <HAL_I2C_Mem_Read+0x230>)
 800ea8e:	400b      	ands	r3, r1
 800ea90:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800ea92:	68fb      	ldr	r3, [r7, #12]
 800ea94:	2220      	movs	r2, #32
 800ea96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800ea9a:	68fb      	ldr	r3, [r7, #12]
 800ea9c:	2200      	movs	r2, #0
 800ea9e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800eaa2:	68fb      	ldr	r3, [r7, #12]
 800eaa4:	2200      	movs	r2, #0
 800eaa6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800eaaa:	2300      	movs	r3, #0
 800eaac:	e000      	b.n	800eab0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800eaae:	2302      	movs	r3, #2
  }
}
 800eab0:	4618      	mov	r0, r3
 800eab2:	3718      	adds	r7, #24
 800eab4:	46bd      	mov	sp, r7
 800eab6:	bd80      	pop	{r7, pc}
 800eab8:	80002400 	.word	0x80002400
 800eabc:	fe00e800 	.word	0xfe00e800

0800eac0 <HAL_I2C_Mem_Write_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                       uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 800eac0:	b580      	push	{r7, lr}
 800eac2:	b086      	sub	sp, #24
 800eac4:	af02      	add	r7, sp, #8
 800eac6:	60f8      	str	r0, [r7, #12]
 800eac8:	4608      	mov	r0, r1
 800eaca:	4611      	mov	r1, r2
 800eacc:	461a      	mov	r2, r3
 800eace:	4603      	mov	r3, r0
 800ead0:	817b      	strh	r3, [r7, #10]
 800ead2:	460b      	mov	r3, r1
 800ead4:	813b      	strh	r3, [r7, #8]
 800ead6:	4613      	mov	r3, r2
 800ead8:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800eada:	68fb      	ldr	r3, [r7, #12]
 800eadc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800eae0:	b2db      	uxtb	r3, r3
 800eae2:	2b20      	cmp	r3, #32
 800eae4:	d16a      	bne.n	800ebbc <HAL_I2C_Mem_Write_IT+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800eae6:	69bb      	ldr	r3, [r7, #24]
 800eae8:	2b00      	cmp	r3, #0
 800eaea:	d002      	beq.n	800eaf2 <HAL_I2C_Mem_Write_IT+0x32>
 800eaec:	8bbb      	ldrh	r3, [r7, #28]
 800eaee:	2b00      	cmp	r3, #0
 800eaf0:	d105      	bne.n	800eafe <HAL_I2C_Mem_Write_IT+0x3e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800eaf2:	68fb      	ldr	r3, [r7, #12]
 800eaf4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800eaf8:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800eafa:	2301      	movs	r3, #1
 800eafc:	e05f      	b.n	800ebbe <HAL_I2C_Mem_Write_IT+0xfe>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800eafe:	68fb      	ldr	r3, [r7, #12]
 800eb00:	681b      	ldr	r3, [r3, #0]
 800eb02:	699b      	ldr	r3, [r3, #24]
 800eb04:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800eb08:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800eb0c:	d101      	bne.n	800eb12 <HAL_I2C_Mem_Write_IT+0x52>
    {
      return HAL_BUSY;
 800eb0e:	2302      	movs	r3, #2
 800eb10:	e055      	b.n	800ebbe <HAL_I2C_Mem_Write_IT+0xfe>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800eb12:	68fb      	ldr	r3, [r7, #12]
 800eb14:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800eb18:	2b01      	cmp	r3, #1
 800eb1a:	d101      	bne.n	800eb20 <HAL_I2C_Mem_Write_IT+0x60>
 800eb1c:	2302      	movs	r3, #2
 800eb1e:	e04e      	b.n	800ebbe <HAL_I2C_Mem_Write_IT+0xfe>
 800eb20:	68fb      	ldr	r3, [r7, #12]
 800eb22:	2201      	movs	r2, #1
 800eb24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800eb28:	68fb      	ldr	r3, [r7, #12]
 800eb2a:	2221      	movs	r2, #33	@ 0x21
 800eb2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 800eb30:	68fb      	ldr	r3, [r7, #12]
 800eb32:	2240      	movs	r2, #64	@ 0x40
 800eb34:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800eb38:	68fb      	ldr	r3, [r7, #12]
 800eb3a:	2200      	movs	r2, #0
 800eb3c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->XferSize    = 0U;
 800eb3e:	68fb      	ldr	r3, [r7, #12]
 800eb40:	2200      	movs	r2, #0
 800eb42:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->pBuffPtr    = pData;
 800eb44:	68fb      	ldr	r3, [r7, #12]
 800eb46:	69ba      	ldr	r2, [r7, #24]
 800eb48:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800eb4a:	68fb      	ldr	r3, [r7, #12]
 800eb4c:	8bba      	ldrh	r2, [r7, #28]
 800eb4e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800eb50:	68fb      	ldr	r3, [r7, #12]
 800eb52:	4a1d      	ldr	r2, [pc, #116]	@ (800ebc8 <HAL_I2C_Mem_Write_IT+0x108>)
 800eb54:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_IT;
 800eb56:	68fb      	ldr	r3, [r7, #12]
 800eb58:	4a1c      	ldr	r2, [pc, #112]	@ (800ebcc <HAL_I2C_Mem_Write_IT+0x10c>)
 800eb5a:	635a      	str	r2, [r3, #52]	@ 0x34
    hi2c->Devaddress  = DevAddress;
 800eb5c:	897a      	ldrh	r2, [r7, #10]
 800eb5e:	68fb      	ldr	r3, [r7, #12]
 800eb60:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800eb62:	88fb      	ldrh	r3, [r7, #6]
 800eb64:	2b01      	cmp	r3, #1
 800eb66:	d109      	bne.n	800eb7c <HAL_I2C_Mem_Write_IT+0xbc>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800eb68:	893b      	ldrh	r3, [r7, #8]
 800eb6a:	b2da      	uxtb	r2, r3
 800eb6c:	68fb      	ldr	r3, [r7, #12]
 800eb6e:	681b      	ldr	r3, [r3, #0]
 800eb70:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 800eb72:	68fb      	ldr	r3, [r7, #12]
 800eb74:	f04f 32ff 	mov.w	r2, #4294967295
 800eb78:	651a      	str	r2, [r3, #80]	@ 0x50
 800eb7a:	e00b      	b.n	800eb94 <HAL_I2C_Mem_Write_IT+0xd4>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800eb7c:	893b      	ldrh	r3, [r7, #8]
 800eb7e:	0a1b      	lsrs	r3, r3, #8
 800eb80:	b29b      	uxth	r3, r3
 800eb82:	b2da      	uxtb	r2, r3
 800eb84:	68fb      	ldr	r3, [r7, #12]
 800eb86:	681b      	ldr	r3, [r3, #0]
 800eb88:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 800eb8a:	893b      	ldrh	r3, [r7, #8]
 800eb8c:	b2db      	uxtb	r3, r3
 800eb8e:	461a      	mov	r2, r3
 800eb90:	68fb      	ldr	r3, [r7, #12]
 800eb92:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* Send Slave Address and Memory Address */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800eb94:	88fb      	ldrh	r3, [r7, #6]
 800eb96:	b2da      	uxtb	r2, r3
 800eb98:	8979      	ldrh	r1, [r7, #10]
 800eb9a:	4b0d      	ldr	r3, [pc, #52]	@ (800ebd0 <HAL_I2C_Mem_Write_IT+0x110>)
 800eb9c:	9300      	str	r3, [sp, #0]
 800eb9e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800eba2:	68f8      	ldr	r0, [r7, #12]
 800eba4:	f001 ff70 	bl	8010a88 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800eba8:	68fb      	ldr	r3, [r7, #12]
 800ebaa:	2200      	movs	r2, #0
 800ebac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 800ebb0:	2101      	movs	r1, #1
 800ebb2:	68f8      	ldr	r0, [r7, #12]
 800ebb4:	f001 ff9a 	bl	8010aec <I2C_Enable_IRQ>

    return HAL_OK;
 800ebb8:	2300      	movs	r3, #0
 800ebba:	e000      	b.n	800ebbe <HAL_I2C_Mem_Write_IT+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800ebbc:	2302      	movs	r3, #2
  }
}
 800ebbe:	4618      	mov	r0, r3
 800ebc0:	3710      	adds	r7, #16
 800ebc2:	46bd      	mov	sp, r7
 800ebc4:	bd80      	pop	{r7, pc}
 800ebc6:	bf00      	nop
 800ebc8:	ffff0000 	.word	0xffff0000
 800ebcc:	0800edd1 	.word	0x0800edd1
 800ebd0:	80002000 	.word	0x80002000

0800ebd4 <HAL_I2C_Mem_Read_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                      uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 800ebd4:	b580      	push	{r7, lr}
 800ebd6:	b086      	sub	sp, #24
 800ebd8:	af02      	add	r7, sp, #8
 800ebda:	60f8      	str	r0, [r7, #12]
 800ebdc:	4608      	mov	r0, r1
 800ebde:	4611      	mov	r1, r2
 800ebe0:	461a      	mov	r2, r3
 800ebe2:	4603      	mov	r3, r0
 800ebe4:	817b      	strh	r3, [r7, #10]
 800ebe6:	460b      	mov	r3, r1
 800ebe8:	813b      	strh	r3, [r7, #8]
 800ebea:	4613      	mov	r3, r2
 800ebec:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ebee:	68fb      	ldr	r3, [r7, #12]
 800ebf0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ebf4:	b2db      	uxtb	r3, r3
 800ebf6:	2b20      	cmp	r3, #32
 800ebf8:	d166      	bne.n	800ecc8 <HAL_I2C_Mem_Read_IT+0xf4>
  {
    if ((pData == NULL) || (Size == 0U))
 800ebfa:	69bb      	ldr	r3, [r7, #24]
 800ebfc:	2b00      	cmp	r3, #0
 800ebfe:	d002      	beq.n	800ec06 <HAL_I2C_Mem_Read_IT+0x32>
 800ec00:	8bbb      	ldrh	r3, [r7, #28]
 800ec02:	2b00      	cmp	r3, #0
 800ec04:	d105      	bne.n	800ec12 <HAL_I2C_Mem_Read_IT+0x3e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800ec06:	68fb      	ldr	r3, [r7, #12]
 800ec08:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ec0c:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800ec0e:	2301      	movs	r3, #1
 800ec10:	e05b      	b.n	800ecca <HAL_I2C_Mem_Read_IT+0xf6>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800ec12:	68fb      	ldr	r3, [r7, #12]
 800ec14:	681b      	ldr	r3, [r3, #0]
 800ec16:	699b      	ldr	r3, [r3, #24]
 800ec18:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ec1c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ec20:	d101      	bne.n	800ec26 <HAL_I2C_Mem_Read_IT+0x52>
    {
      return HAL_BUSY;
 800ec22:	2302      	movs	r3, #2
 800ec24:	e051      	b.n	800ecca <HAL_I2C_Mem_Read_IT+0xf6>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ec26:	68fb      	ldr	r3, [r7, #12]
 800ec28:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800ec2c:	2b01      	cmp	r3, #1
 800ec2e:	d101      	bne.n	800ec34 <HAL_I2C_Mem_Read_IT+0x60>
 800ec30:	2302      	movs	r3, #2
 800ec32:	e04a      	b.n	800ecca <HAL_I2C_Mem_Read_IT+0xf6>
 800ec34:	68fb      	ldr	r3, [r7, #12]
 800ec36:	2201      	movs	r2, #1
 800ec38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800ec3c:	68fb      	ldr	r3, [r7, #12]
 800ec3e:	2222      	movs	r2, #34	@ 0x22
 800ec40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 800ec44:	68fb      	ldr	r3, [r7, #12]
 800ec46:	2240      	movs	r2, #64	@ 0x40
 800ec48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800ec4c:	68fb      	ldr	r3, [r7, #12]
 800ec4e:	2200      	movs	r2, #0
 800ec50:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800ec52:	68fb      	ldr	r3, [r7, #12]
 800ec54:	69ba      	ldr	r2, [r7, #24]
 800ec56:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800ec58:	68fb      	ldr	r3, [r7, #12]
 800ec5a:	8bba      	ldrh	r2, [r7, #28]
 800ec5c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800ec5e:	68fb      	ldr	r3, [r7, #12]
 800ec60:	4a1c      	ldr	r2, [pc, #112]	@ (800ecd4 <HAL_I2C_Mem_Read_IT+0x100>)
 800ec62:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_IT;
 800ec64:	68fb      	ldr	r3, [r7, #12]
 800ec66:	4a1c      	ldr	r2, [pc, #112]	@ (800ecd8 <HAL_I2C_Mem_Read_IT+0x104>)
 800ec68:	635a      	str	r2, [r3, #52]	@ 0x34
    hi2c->Devaddress  = DevAddress;
 800ec6a:	897a      	ldrh	r2, [r7, #10]
 800ec6c:	68fb      	ldr	r3, [r7, #12]
 800ec6e:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800ec70:	88fb      	ldrh	r3, [r7, #6]
 800ec72:	2b01      	cmp	r3, #1
 800ec74:	d109      	bne.n	800ec8a <HAL_I2C_Mem_Read_IT+0xb6>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800ec76:	893b      	ldrh	r3, [r7, #8]
 800ec78:	b2da      	uxtb	r2, r3
 800ec7a:	68fb      	ldr	r3, [r7, #12]
 800ec7c:	681b      	ldr	r3, [r3, #0]
 800ec7e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 800ec80:	68fb      	ldr	r3, [r7, #12]
 800ec82:	f04f 32ff 	mov.w	r2, #4294967295
 800ec86:	651a      	str	r2, [r3, #80]	@ 0x50
 800ec88:	e00b      	b.n	800eca2 <HAL_I2C_Mem_Read_IT+0xce>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800ec8a:	893b      	ldrh	r3, [r7, #8]
 800ec8c:	0a1b      	lsrs	r3, r3, #8
 800ec8e:	b29b      	uxth	r3, r3
 800ec90:	b2da      	uxtb	r2, r3
 800ec92:	68fb      	ldr	r3, [r7, #12]
 800ec94:	681b      	ldr	r3, [r3, #0]
 800ec96:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 800ec98:	893b      	ldrh	r3, [r7, #8]
 800ec9a:	b2db      	uxtb	r3, r3
 800ec9c:	461a      	mov	r2, r3
 800ec9e:	68fb      	ldr	r3, [r7, #12]
 800eca0:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* Send Slave Address and Memory Address */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800eca2:	88fb      	ldrh	r3, [r7, #6]
 800eca4:	b2da      	uxtb	r2, r3
 800eca6:	8979      	ldrh	r1, [r7, #10]
 800eca8:	4b0c      	ldr	r3, [pc, #48]	@ (800ecdc <HAL_I2C_Mem_Read_IT+0x108>)
 800ecaa:	9300      	str	r3, [sp, #0]
 800ecac:	2300      	movs	r3, #0
 800ecae:	68f8      	ldr	r0, [r7, #12]
 800ecb0:	f001 feea 	bl	8010a88 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ecb4:	68fb      	ldr	r3, [r7, #12]
 800ecb6:	2200      	movs	r2, #0
 800ecb8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 800ecbc:	2101      	movs	r1, #1
 800ecbe:	68f8      	ldr	r0, [r7, #12]
 800ecc0:	f001 ff14 	bl	8010aec <I2C_Enable_IRQ>

    return HAL_OK;
 800ecc4:	2300      	movs	r3, #0
 800ecc6:	e000      	b.n	800ecca <HAL_I2C_Mem_Read_IT+0xf6>
  }
  else
  {
    return HAL_BUSY;
 800ecc8:	2302      	movs	r3, #2
  }
}
 800ecca:	4618      	mov	r0, r3
 800eccc:	3710      	adds	r7, #16
 800ecce:	46bd      	mov	sp, r7
 800ecd0:	bd80      	pop	{r7, pc}
 800ecd2:	bf00      	nop
 800ecd4:	ffff0000 	.word	0xffff0000
 800ecd8:	0800edd1 	.word	0x0800edd1
 800ecdc:	80002000 	.word	0x80002000

0800ece0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 800ece0:	b580      	push	{r7, lr}
 800ece2:	b084      	sub	sp, #16
 800ece4:	af00      	add	r7, sp, #0
 800ece6:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	681b      	ldr	r3, [r3, #0]
 800ecec:	699b      	ldr	r3, [r3, #24]
 800ecee:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	681b      	ldr	r3, [r3, #0]
 800ecf4:	681b      	ldr	r3, [r3, #0]
 800ecf6:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ecfc:	2b00      	cmp	r3, #0
 800ecfe:	d005      	beq.n	800ed0c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ed04:	68ba      	ldr	r2, [r7, #8]
 800ed06:	68f9      	ldr	r1, [r7, #12]
 800ed08:	6878      	ldr	r0, [r7, #4]
 800ed0a:	4798      	blx	r3
  }
}
 800ed0c:	bf00      	nop
 800ed0e:	3710      	adds	r7, #16
 800ed10:	46bd      	mov	sp, r7
 800ed12:	bd80      	pop	{r7, pc}

0800ed14 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800ed14:	b480      	push	{r7}
 800ed16:	b083      	sub	sp, #12
 800ed18:	af00      	add	r7, sp, #0
 800ed1a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800ed1c:	bf00      	nop
 800ed1e:	370c      	adds	r7, #12
 800ed20:	46bd      	mov	sp, r7
 800ed22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed26:	4770      	bx	lr

0800ed28 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800ed28:	b480      	push	{r7}
 800ed2a:	b083      	sub	sp, #12
 800ed2c:	af00      	add	r7, sp, #0
 800ed2e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800ed30:	bf00      	nop
 800ed32:	370c      	adds	r7, #12
 800ed34:	46bd      	mov	sp, r7
 800ed36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed3a:	4770      	bx	lr

0800ed3c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800ed3c:	b480      	push	{r7}
 800ed3e:	b083      	sub	sp, #12
 800ed40:	af00      	add	r7, sp, #0
 800ed42:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800ed44:	bf00      	nop
 800ed46:	370c      	adds	r7, #12
 800ed48:	46bd      	mov	sp, r7
 800ed4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed4e:	4770      	bx	lr

0800ed50 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800ed50:	b480      	push	{r7}
 800ed52:	b083      	sub	sp, #12
 800ed54:	af00      	add	r7, sp, #0
 800ed56:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800ed58:	bf00      	nop
 800ed5a:	370c      	adds	r7, #12
 800ed5c:	46bd      	mov	sp, r7
 800ed5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed62:	4770      	bx	lr

0800ed64 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800ed64:	b480      	push	{r7}
 800ed66:	b083      	sub	sp, #12
 800ed68:	af00      	add	r7, sp, #0
 800ed6a:	6078      	str	r0, [r7, #4]
 800ed6c:	460b      	mov	r3, r1
 800ed6e:	70fb      	strb	r3, [r7, #3]
 800ed70:	4613      	mov	r3, r2
 800ed72:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800ed74:	bf00      	nop
 800ed76:	370c      	adds	r7, #12
 800ed78:	46bd      	mov	sp, r7
 800ed7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed7e:	4770      	bx	lr

0800ed80 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800ed80:	b480      	push	{r7}
 800ed82:	b083      	sub	sp, #12
 800ed84:	af00      	add	r7, sp, #0
 800ed86:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800ed88:	bf00      	nop
 800ed8a:	370c      	adds	r7, #12
 800ed8c:	46bd      	mov	sp, r7
 800ed8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed92:	4770      	bx	lr

0800ed94 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800ed94:	b480      	push	{r7}
 800ed96:	b083      	sub	sp, #12
 800ed98:	af00      	add	r7, sp, #0
 800ed9a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800ed9c:	bf00      	nop
 800ed9e:	370c      	adds	r7, #12
 800eda0:	46bd      	mov	sp, r7
 800eda2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eda6:	4770      	bx	lr

0800eda8 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800eda8:	b480      	push	{r7}
 800edaa:	b083      	sub	sp, #12
 800edac:	af00      	add	r7, sp, #0
 800edae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800edb0:	bf00      	nop
 800edb2:	370c      	adds	r7, #12
 800edb4:	46bd      	mov	sp, r7
 800edb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edba:	4770      	bx	lr

0800edbc <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800edbc:	b480      	push	{r7}
 800edbe:	b083      	sub	sp, #12
 800edc0:	af00      	add	r7, sp, #0
 800edc2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800edc4:	bf00      	nop
 800edc6:	370c      	adds	r7, #12
 800edc8:	46bd      	mov	sp, r7
 800edca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edce:	4770      	bx	lr

0800edd0 <I2C_Mem_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                        uint32_t ITSources)
{
 800edd0:	b580      	push	{r7, lr}
 800edd2:	b088      	sub	sp, #32
 800edd4:	af02      	add	r7, sp, #8
 800edd6:	60f8      	str	r0, [r7, #12]
 800edd8:	60b9      	str	r1, [r7, #8]
 800edda:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 800eddc:	4b8d      	ldr	r3, [pc, #564]	@ (800f014 <I2C_Mem_ISR_IT+0x244>)
 800edde:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800ede0:	68bb      	ldr	r3, [r7, #8]
 800ede2:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800ede4:	68fb      	ldr	r3, [r7, #12]
 800ede6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800edea:	2b01      	cmp	r3, #1
 800edec:	d101      	bne.n	800edf2 <I2C_Mem_ISR_IT+0x22>
 800edee:	2302      	movs	r3, #2
 800edf0:	e10c      	b.n	800f00c <I2C_Mem_ISR_IT+0x23c>
 800edf2:	68fb      	ldr	r3, [r7, #12]
 800edf4:	2201      	movs	r2, #1
 800edf6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800edfa:	693b      	ldr	r3, [r7, #16]
 800edfc:	f003 0310 	and.w	r3, r3, #16
 800ee00:	2b00      	cmp	r3, #0
 800ee02:	d012      	beq.n	800ee2a <I2C_Mem_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800ee0a:	2b00      	cmp	r3, #0
 800ee0c:	d00d      	beq.n	800ee2a <I2C_Mem_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ee0e:	68fb      	ldr	r3, [r7, #12]
 800ee10:	681b      	ldr	r3, [r3, #0]
 800ee12:	2210      	movs	r2, #16
 800ee14:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800ee16:	68fb      	ldr	r3, [r7, #12]
 800ee18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ee1a:	f043 0204 	orr.w	r2, r3, #4
 800ee1e:	68fb      	ldr	r3, [r7, #12]
 800ee20:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800ee22:	68f8      	ldr	r0, [r7, #12]
 800ee24:	f001 fc2b 	bl	801067e <I2C_Flush_TXDR>
 800ee28:	e0dd      	b.n	800efe6 <I2C_Mem_ISR_IT+0x216>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800ee2a:	693b      	ldr	r3, [r7, #16]
 800ee2c:	f003 0304 	and.w	r3, r3, #4
 800ee30:	2b00      	cmp	r3, #0
 800ee32:	d022      	beq.n	800ee7a <I2C_Mem_ISR_IT+0xaa>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800ee3a:	2b00      	cmp	r3, #0
 800ee3c:	d01d      	beq.n	800ee7a <I2C_Mem_ISR_IT+0xaa>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800ee3e:	693b      	ldr	r3, [r7, #16]
 800ee40:	f023 0304 	bic.w	r3, r3, #4
 800ee44:	613b      	str	r3, [r7, #16]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800ee46:	68fb      	ldr	r3, [r7, #12]
 800ee48:	681b      	ldr	r3, [r3, #0]
 800ee4a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ee4c:	68fb      	ldr	r3, [r7, #12]
 800ee4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ee50:	b2d2      	uxtb	r2, r2
 800ee52:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800ee54:	68fb      	ldr	r3, [r7, #12]
 800ee56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ee58:	1c5a      	adds	r2, r3, #1
 800ee5a:	68fb      	ldr	r3, [r7, #12]
 800ee5c:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 800ee5e:	68fb      	ldr	r3, [r7, #12]
 800ee60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ee62:	3b01      	subs	r3, #1
 800ee64:	b29a      	uxth	r2, r3
 800ee66:	68fb      	ldr	r3, [r7, #12]
 800ee68:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 800ee6a:	68fb      	ldr	r3, [r7, #12]
 800ee6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ee6e:	b29b      	uxth	r3, r3
 800ee70:	3b01      	subs	r3, #1
 800ee72:	b29a      	uxth	r2, r3
 800ee74:	68fb      	ldr	r3, [r7, #12]
 800ee76:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800ee78:	e0b5      	b.n	800efe6 <I2C_Mem_ISR_IT+0x216>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800ee7a:	693b      	ldr	r3, [r7, #16]
 800ee7c:	f003 0302 	and.w	r3, r3, #2
 800ee80:	2b00      	cmp	r3, #0
 800ee82:	d02c      	beq.n	800eede <I2C_Mem_ISR_IT+0x10e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800ee8a:	2b00      	cmp	r3, #0
 800ee8c:	d027      	beq.n	800eede <I2C_Mem_ISR_IT+0x10e>
  {
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 800ee8e:	68fb      	ldr	r3, [r7, #12]
 800ee90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ee92:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee96:	d118      	bne.n	800eeca <I2C_Mem_ISR_IT+0xfa>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800ee98:	68fb      	ldr	r3, [r7, #12]
 800ee9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ee9c:	781a      	ldrb	r2, [r3, #0]
 800ee9e:	68fb      	ldr	r3, [r7, #12]
 800eea0:	681b      	ldr	r3, [r3, #0]
 800eea2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800eea4:	68fb      	ldr	r3, [r7, #12]
 800eea6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eea8:	1c5a      	adds	r2, r3, #1
 800eeaa:	68fb      	ldr	r3, [r7, #12]
 800eeac:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800eeae:	68fb      	ldr	r3, [r7, #12]
 800eeb0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800eeb2:	3b01      	subs	r3, #1
 800eeb4:	b29a      	uxth	r2, r3
 800eeb6:	68fb      	ldr	r3, [r7, #12]
 800eeb8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800eeba:	68fb      	ldr	r3, [r7, #12]
 800eebc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800eebe:	b29b      	uxth	r3, r3
 800eec0:	3b01      	subs	r3, #1
 800eec2:	b29a      	uxth	r2, r3
 800eec4:	68fb      	ldr	r3, [r7, #12]
 800eec6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 800eec8:	e08d      	b.n	800efe6 <I2C_Mem_ISR_IT+0x216>
    }
    else
    {
      /* Write LSB part of Memory Address */
      hi2c->Instance->TXDR = hi2c->Memaddress;
 800eeca:	68fb      	ldr	r3, [r7, #12]
 800eecc:	681b      	ldr	r3, [r3, #0]
 800eece:	68fa      	ldr	r2, [r7, #12]
 800eed0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800eed2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 800eed4:	68fb      	ldr	r3, [r7, #12]
 800eed6:	f04f 32ff 	mov.w	r2, #4294967295
 800eeda:	651a      	str	r2, [r3, #80]	@ 0x50
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 800eedc:	e083      	b.n	800efe6 <I2C_Mem_ISR_IT+0x216>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800eede:	693b      	ldr	r3, [r7, #16]
 800eee0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800eee4:	2b00      	cmp	r3, #0
 800eee6:	d03c      	beq.n	800ef62 <I2C_Mem_ISR_IT+0x192>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800eeee:	2b00      	cmp	r3, #0
 800eef0:	d037      	beq.n	800ef62 <I2C_Mem_ISR_IT+0x192>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800eef2:	68fb      	ldr	r3, [r7, #12]
 800eef4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800eef6:	b29b      	uxth	r3, r3
 800eef8:	2b00      	cmp	r3, #0
 800eefa:	d02c      	beq.n	800ef56 <I2C_Mem_ISR_IT+0x186>
 800eefc:	68fb      	ldr	r3, [r7, #12]
 800eefe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ef00:	2b00      	cmp	r3, #0
 800ef02:	d128      	bne.n	800ef56 <I2C_Mem_ISR_IT+0x186>
    {
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ef04:	68fb      	ldr	r3, [r7, #12]
 800ef06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ef08:	b29b      	uxth	r3, r3
 800ef0a:	2bff      	cmp	r3, #255	@ 0xff
 800ef0c:	d910      	bls.n	800ef30 <I2C_Mem_ISR_IT+0x160>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800ef0e:	68fb      	ldr	r3, [r7, #12]
 800ef10:	22ff      	movs	r2, #255	@ 0xff
 800ef12:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800ef14:	68fb      	ldr	r3, [r7, #12]
 800ef16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ef18:	b299      	uxth	r1, r3
 800ef1a:	68fb      	ldr	r3, [r7, #12]
 800ef1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ef1e:	b2da      	uxtb	r2, r3
 800ef20:	2300      	movs	r3, #0
 800ef22:	9300      	str	r3, [sp, #0]
 800ef24:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800ef28:	68f8      	ldr	r0, [r7, #12]
 800ef2a:	f001 fdad 	bl	8010a88 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ef2e:	e017      	b.n	800ef60 <I2C_Mem_ISR_IT+0x190>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800ef30:	68fb      	ldr	r3, [r7, #12]
 800ef32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ef34:	b29a      	uxth	r2, r3
 800ef36:	68fb      	ldr	r3, [r7, #12]
 800ef38:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800ef3a:	68fb      	ldr	r3, [r7, #12]
 800ef3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ef3e:	b299      	uxth	r1, r3
 800ef40:	68fb      	ldr	r3, [r7, #12]
 800ef42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ef44:	b2da      	uxtb	r2, r3
 800ef46:	2300      	movs	r3, #0
 800ef48:	9300      	str	r3, [sp, #0]
 800ef4a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800ef4e:	68f8      	ldr	r0, [r7, #12]
 800ef50:	f001 fd9a 	bl	8010a88 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ef54:	e004      	b.n	800ef60 <I2C_Mem_ISR_IT+0x190>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800ef56:	2140      	movs	r1, #64	@ 0x40
 800ef58:	68f8      	ldr	r0, [r7, #12]
 800ef5a:	f001 fa79 	bl	8010450 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800ef5e:	e042      	b.n	800efe6 <I2C_Mem_ISR_IT+0x216>
 800ef60:	e041      	b.n	800efe6 <I2C_Mem_ISR_IT+0x216>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800ef62:	693b      	ldr	r3, [r7, #16]
 800ef64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ef68:	2b00      	cmp	r3, #0
 800ef6a:	d03c      	beq.n	800efe6 <I2C_Mem_ISR_IT+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800ef72:	2b00      	cmp	r3, #0
 800ef74:	d037      	beq.n	800efe6 <I2C_Mem_ISR_IT+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800ef76:	2101      	movs	r1, #1
 800ef78:	68f8      	ldr	r0, [r7, #12]
 800ef7a:	f001 fe3b 	bl	8010bf4 <I2C_Disable_IRQ>

    /* Enable ERR, TC, STOP, NACK and RXI interrupts */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 800ef7e:	2102      	movs	r1, #2
 800ef80:	68f8      	ldr	r0, [r7, #12]
 800ef82:	f001 fdb3 	bl	8010aec <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800ef86:	68fb      	ldr	r3, [r7, #12]
 800ef88:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ef8c:	b2db      	uxtb	r3, r3
 800ef8e:	2b22      	cmp	r3, #34	@ 0x22
 800ef90:	d101      	bne.n	800ef96 <I2C_Mem_ISR_IT+0x1c6>
    {
      direction = I2C_GENERATE_START_READ;
 800ef92:	4b21      	ldr	r3, [pc, #132]	@ (800f018 <I2C_Mem_ISR_IT+0x248>)
 800ef94:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ef96:	68fb      	ldr	r3, [r7, #12]
 800ef98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ef9a:	b29b      	uxth	r3, r3
 800ef9c:	2bff      	cmp	r3, #255	@ 0xff
 800ef9e:	d910      	bls.n	800efc2 <I2C_Mem_ISR_IT+0x1f2>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800efa0:	68fb      	ldr	r3, [r7, #12]
 800efa2:	22ff      	movs	r2, #255	@ 0xff
 800efa4:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800efa6:	68fb      	ldr	r3, [r7, #12]
 800efa8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800efaa:	b299      	uxth	r1, r3
 800efac:	68fb      	ldr	r3, [r7, #12]
 800efae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800efb0:	b2da      	uxtb	r2, r3
 800efb2:	697b      	ldr	r3, [r7, #20]
 800efb4:	9300      	str	r3, [sp, #0]
 800efb6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800efba:	68f8      	ldr	r0, [r7, #12]
 800efbc:	f001 fd64 	bl	8010a88 <I2C_TransferConfig>
 800efc0:	e011      	b.n	800efe6 <I2C_Mem_ISR_IT+0x216>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800efc2:	68fb      	ldr	r3, [r7, #12]
 800efc4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800efc6:	b29a      	uxth	r2, r3
 800efc8:	68fb      	ldr	r3, [r7, #12]
 800efca:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800efcc:	68fb      	ldr	r3, [r7, #12]
 800efce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800efd0:	b299      	uxth	r1, r3
 800efd2:	68fb      	ldr	r3, [r7, #12]
 800efd4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800efd6:	b2da      	uxtb	r2, r3
 800efd8:	697b      	ldr	r3, [r7, #20]
 800efda:	9300      	str	r3, [sp, #0]
 800efdc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800efe0:	68f8      	ldr	r0, [r7, #12]
 800efe2:	f001 fd51 	bl	8010a88 <I2C_TransferConfig>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800efe6:	693b      	ldr	r3, [r7, #16]
 800efe8:	f003 0320 	and.w	r3, r3, #32
 800efec:	2b00      	cmp	r3, #0
 800efee:	d008      	beq.n	800f002 <I2C_Mem_ISR_IT+0x232>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800eff6:	2b00      	cmp	r3, #0
 800eff8:	d003      	beq.n	800f002 <I2C_Mem_ISR_IT+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 800effa:	6939      	ldr	r1, [r7, #16]
 800effc:	68f8      	ldr	r0, [r7, #12]
 800effe:	f000 feb7 	bl	800fd70 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800f002:	68fb      	ldr	r3, [r7, #12]
 800f004:	2200      	movs	r2, #0
 800f006:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800f00a:	2300      	movs	r3, #0
}
 800f00c:	4618      	mov	r0, r3
 800f00e:	3718      	adds	r7, #24
 800f010:	46bd      	mov	sp, r7
 800f012:	bd80      	pop	{r7, pc}
 800f014:	80002000 	.word	0x80002000
 800f018:	80002400 	.word	0x80002400

0800f01c <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800f01c:	b580      	push	{r7, lr}
 800f01e:	b086      	sub	sp, #24
 800f020:	af00      	add	r7, sp, #0
 800f022:	60f8      	str	r0, [r7, #12]
 800f024:	60b9      	str	r1, [r7, #8]
 800f026:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800f028:	68fb      	ldr	r3, [r7, #12]
 800f02a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f02c:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800f02e:	68bb      	ldr	r3, [r7, #8]
 800f030:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800f032:	68fb      	ldr	r3, [r7, #12]
 800f034:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800f038:	2b01      	cmp	r3, #1
 800f03a:	d101      	bne.n	800f040 <I2C_Slave_ISR_IT+0x24>
 800f03c:	2302      	movs	r3, #2
 800f03e:	e0e2      	b.n	800f206 <I2C_Slave_ISR_IT+0x1ea>
 800f040:	68fb      	ldr	r3, [r7, #12]
 800f042:	2201      	movs	r2, #1
 800f044:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800f048:	693b      	ldr	r3, [r7, #16]
 800f04a:	f003 0320 	and.w	r3, r3, #32
 800f04e:	2b00      	cmp	r3, #0
 800f050:	d009      	beq.n	800f066 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800f058:	2b00      	cmp	r3, #0
 800f05a:	d004      	beq.n	800f066 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800f05c:	6939      	ldr	r1, [r7, #16]
 800f05e:	68f8      	ldr	r0, [r7, #12]
 800f060:	f000 ff4e 	bl	800ff00 <I2C_ITSlaveCplt>
 800f064:	e0ca      	b.n	800f1fc <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800f066:	693b      	ldr	r3, [r7, #16]
 800f068:	f003 0310 	and.w	r3, r3, #16
 800f06c:	2b00      	cmp	r3, #0
 800f06e:	d04b      	beq.n	800f108 <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800f076:	2b00      	cmp	r3, #0
 800f078:	d046      	beq.n	800f108 <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800f07a:	68fb      	ldr	r3, [r7, #12]
 800f07c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f07e:	b29b      	uxth	r3, r3
 800f080:	2b00      	cmp	r3, #0
 800f082:	d128      	bne.n	800f0d6 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800f084:	68fb      	ldr	r3, [r7, #12]
 800f086:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f08a:	b2db      	uxtb	r3, r3
 800f08c:	2b28      	cmp	r3, #40	@ 0x28
 800f08e:	d108      	bne.n	800f0a2 <I2C_Slave_ISR_IT+0x86>
 800f090:	697b      	ldr	r3, [r7, #20]
 800f092:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800f096:	d104      	bne.n	800f0a2 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800f098:	6939      	ldr	r1, [r7, #16]
 800f09a:	68f8      	ldr	r0, [r7, #12]
 800f09c:	f001 f984 	bl	80103a8 <I2C_ITListenCplt>
 800f0a0:	e031      	b.n	800f106 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800f0a2:	68fb      	ldr	r3, [r7, #12]
 800f0a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f0a8:	b2db      	uxtb	r3, r3
 800f0aa:	2b29      	cmp	r3, #41	@ 0x29
 800f0ac:	d10e      	bne.n	800f0cc <I2C_Slave_ISR_IT+0xb0>
 800f0ae:	697b      	ldr	r3, [r7, #20]
 800f0b0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800f0b4:	d00a      	beq.n	800f0cc <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f0b6:	68fb      	ldr	r3, [r7, #12]
 800f0b8:	681b      	ldr	r3, [r3, #0]
 800f0ba:	2210      	movs	r2, #16
 800f0bc:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800f0be:	68f8      	ldr	r0, [r7, #12]
 800f0c0:	f001 fadd 	bl	801067e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800f0c4:	68f8      	ldr	r0, [r7, #12]
 800f0c6:	f000 fdf6 	bl	800fcb6 <I2C_ITSlaveSeqCplt>
 800f0ca:	e01c      	b.n	800f106 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f0cc:	68fb      	ldr	r3, [r7, #12]
 800f0ce:	681b      	ldr	r3, [r3, #0]
 800f0d0:	2210      	movs	r2, #16
 800f0d2:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800f0d4:	e08f      	b.n	800f1f6 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f0d6:	68fb      	ldr	r3, [r7, #12]
 800f0d8:	681b      	ldr	r3, [r3, #0]
 800f0da:	2210      	movs	r2, #16
 800f0dc:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800f0de:	68fb      	ldr	r3, [r7, #12]
 800f0e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f0e2:	f043 0204 	orr.w	r2, r3, #4
 800f0e6:	68fb      	ldr	r3, [r7, #12]
 800f0e8:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800f0ea:	697b      	ldr	r3, [r7, #20]
 800f0ec:	2b00      	cmp	r3, #0
 800f0ee:	d003      	beq.n	800f0f8 <I2C_Slave_ISR_IT+0xdc>
 800f0f0:	697b      	ldr	r3, [r7, #20]
 800f0f2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800f0f6:	d17e      	bne.n	800f1f6 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800f0f8:	68fb      	ldr	r3, [r7, #12]
 800f0fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f0fc:	4619      	mov	r1, r3
 800f0fe:	68f8      	ldr	r0, [r7, #12]
 800f100:	f001 f9a6 	bl	8010450 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800f104:	e077      	b.n	800f1f6 <I2C_Slave_ISR_IT+0x1da>
 800f106:	e076      	b.n	800f1f6 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800f108:	693b      	ldr	r3, [r7, #16]
 800f10a:	f003 0304 	and.w	r3, r3, #4
 800f10e:	2b00      	cmp	r3, #0
 800f110:	d02f      	beq.n	800f172 <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800f118:	2b00      	cmp	r3, #0
 800f11a:	d02a      	beq.n	800f172 <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 800f11c:	68fb      	ldr	r3, [r7, #12]
 800f11e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f120:	b29b      	uxth	r3, r3
 800f122:	2b00      	cmp	r3, #0
 800f124:	d018      	beq.n	800f158 <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800f126:	68fb      	ldr	r3, [r7, #12]
 800f128:	681b      	ldr	r3, [r3, #0]
 800f12a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f12c:	68fb      	ldr	r3, [r7, #12]
 800f12e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f130:	b2d2      	uxtb	r2, r2
 800f132:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800f134:	68fb      	ldr	r3, [r7, #12]
 800f136:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f138:	1c5a      	adds	r2, r3, #1
 800f13a:	68fb      	ldr	r3, [r7, #12]
 800f13c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800f13e:	68fb      	ldr	r3, [r7, #12]
 800f140:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f142:	3b01      	subs	r3, #1
 800f144:	b29a      	uxth	r2, r3
 800f146:	68fb      	ldr	r3, [r7, #12]
 800f148:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800f14a:	68fb      	ldr	r3, [r7, #12]
 800f14c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f14e:	b29b      	uxth	r3, r3
 800f150:	3b01      	subs	r3, #1
 800f152:	b29a      	uxth	r2, r3
 800f154:	68fb      	ldr	r3, [r7, #12]
 800f156:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800f158:	68fb      	ldr	r3, [r7, #12]
 800f15a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f15c:	b29b      	uxth	r3, r3
 800f15e:	2b00      	cmp	r3, #0
 800f160:	d14b      	bne.n	800f1fa <I2C_Slave_ISR_IT+0x1de>
 800f162:	697b      	ldr	r3, [r7, #20]
 800f164:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800f168:	d047      	beq.n	800f1fa <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800f16a:	68f8      	ldr	r0, [r7, #12]
 800f16c:	f000 fda3 	bl	800fcb6 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800f170:	e043      	b.n	800f1fa <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800f172:	693b      	ldr	r3, [r7, #16]
 800f174:	f003 0308 	and.w	r3, r3, #8
 800f178:	2b00      	cmp	r3, #0
 800f17a:	d009      	beq.n	800f190 <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800f182:	2b00      	cmp	r3, #0
 800f184:	d004      	beq.n	800f190 <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800f186:	6939      	ldr	r1, [r7, #16]
 800f188:	68f8      	ldr	r0, [r7, #12]
 800f18a:	f000 fcd3 	bl	800fb34 <I2C_ITAddrCplt>
 800f18e:	e035      	b.n	800f1fc <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800f190:	693b      	ldr	r3, [r7, #16]
 800f192:	f003 0302 	and.w	r3, r3, #2
 800f196:	2b00      	cmp	r3, #0
 800f198:	d030      	beq.n	800f1fc <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800f1a0:	2b00      	cmp	r3, #0
 800f1a2:	d02b      	beq.n	800f1fc <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800f1a4:	68fb      	ldr	r3, [r7, #12]
 800f1a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f1a8:	b29b      	uxth	r3, r3
 800f1aa:	2b00      	cmp	r3, #0
 800f1ac:	d018      	beq.n	800f1e0 <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800f1ae:	68fb      	ldr	r3, [r7, #12]
 800f1b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f1b2:	781a      	ldrb	r2, [r3, #0]
 800f1b4:	68fb      	ldr	r3, [r7, #12]
 800f1b6:	681b      	ldr	r3, [r3, #0]
 800f1b8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800f1ba:	68fb      	ldr	r3, [r7, #12]
 800f1bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f1be:	1c5a      	adds	r2, r3, #1
 800f1c0:	68fb      	ldr	r3, [r7, #12]
 800f1c2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800f1c4:	68fb      	ldr	r3, [r7, #12]
 800f1c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f1c8:	b29b      	uxth	r3, r3
 800f1ca:	3b01      	subs	r3, #1
 800f1cc:	b29a      	uxth	r2, r3
 800f1ce:	68fb      	ldr	r3, [r7, #12]
 800f1d0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800f1d2:	68fb      	ldr	r3, [r7, #12]
 800f1d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f1d6:	3b01      	subs	r3, #1
 800f1d8:	b29a      	uxth	r2, r3
 800f1da:	68fb      	ldr	r3, [r7, #12]
 800f1dc:	851a      	strh	r2, [r3, #40]	@ 0x28
 800f1de:	e00d      	b.n	800f1fc <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800f1e0:	697b      	ldr	r3, [r7, #20]
 800f1e2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800f1e6:	d002      	beq.n	800f1ee <I2C_Slave_ISR_IT+0x1d2>
 800f1e8:	697b      	ldr	r3, [r7, #20]
 800f1ea:	2b00      	cmp	r3, #0
 800f1ec:	d106      	bne.n	800f1fc <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800f1ee:	68f8      	ldr	r0, [r7, #12]
 800f1f0:	f000 fd61 	bl	800fcb6 <I2C_ITSlaveSeqCplt>
 800f1f4:	e002      	b.n	800f1fc <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 800f1f6:	bf00      	nop
 800f1f8:	e000      	b.n	800f1fc <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 800f1fa:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800f1fc:	68fb      	ldr	r3, [r7, #12]
 800f1fe:	2200      	movs	r2, #0
 800f200:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800f204:	2300      	movs	r3, #0
}
 800f206:	4618      	mov	r0, r3
 800f208:	3718      	adds	r7, #24
 800f20a:	46bd      	mov	sp, r7
 800f20c:	bd80      	pop	{r7, pc}

0800f20e <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 800f20e:	b580      	push	{r7, lr}
 800f210:	b088      	sub	sp, #32
 800f212:	af02      	add	r7, sp, #8
 800f214:	60f8      	str	r0, [r7, #12]
 800f216:	60b9      	str	r1, [r7, #8]
 800f218:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800f21a:	68fb      	ldr	r3, [r7, #12]
 800f21c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800f220:	2b01      	cmp	r3, #1
 800f222:	d101      	bne.n	800f228 <I2C_Master_ISR_DMA+0x1a>
 800f224:	2302      	movs	r3, #2
 800f226:	e0d9      	b.n	800f3dc <I2C_Master_ISR_DMA+0x1ce>
 800f228:	68fb      	ldr	r3, [r7, #12]
 800f22a:	2201      	movs	r2, #1
 800f22c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800f230:	68bb      	ldr	r3, [r7, #8]
 800f232:	f003 0310 	and.w	r3, r3, #16
 800f236:	2b00      	cmp	r3, #0
 800f238:	d016      	beq.n	800f268 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800f240:	2b00      	cmp	r3, #0
 800f242:	d011      	beq.n	800f268 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f244:	68fb      	ldr	r3, [r7, #12]
 800f246:	681b      	ldr	r3, [r3, #0]
 800f248:	2210      	movs	r2, #16
 800f24a:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800f24c:	68fb      	ldr	r3, [r7, #12]
 800f24e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f250:	f043 0204 	orr.w	r2, r3, #4
 800f254:	68fb      	ldr	r3, [r7, #12]
 800f256:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800f258:	2120      	movs	r1, #32
 800f25a:	68f8      	ldr	r0, [r7, #12]
 800f25c:	f001 fc46 	bl	8010aec <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800f260:	68f8      	ldr	r0, [r7, #12]
 800f262:	f001 fa0c 	bl	801067e <I2C_Flush_TXDR>
 800f266:	e0b4      	b.n	800f3d2 <I2C_Master_ISR_DMA+0x1c4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800f268:	68bb      	ldr	r3, [r7, #8]
 800f26a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f26e:	2b00      	cmp	r3, #0
 800f270:	d071      	beq.n	800f356 <I2C_Master_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800f278:	2b00      	cmp	r3, #0
 800f27a:	d06c      	beq.n	800f356 <I2C_Master_ISR_DMA+0x148>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 800f27c:	68fb      	ldr	r3, [r7, #12]
 800f27e:	681b      	ldr	r3, [r3, #0]
 800f280:	681a      	ldr	r2, [r3, #0]
 800f282:	68fb      	ldr	r3, [r7, #12]
 800f284:	681b      	ldr	r3, [r3, #0]
 800f286:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800f28a:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 800f28c:	68fb      	ldr	r3, [r7, #12]
 800f28e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f290:	b29b      	uxth	r3, r3
 800f292:	2b00      	cmp	r3, #0
 800f294:	d04e      	beq.n	800f334 <I2C_Master_ISR_DMA+0x126>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800f296:	68fb      	ldr	r3, [r7, #12]
 800f298:	681b      	ldr	r3, [r3, #0]
 800f29a:	685b      	ldr	r3, [r3, #4]
 800f29c:	b29b      	uxth	r3, r3
 800f29e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f2a2:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800f2a4:	68fb      	ldr	r3, [r7, #12]
 800f2a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f2a8:	b29b      	uxth	r3, r3
 800f2aa:	2bff      	cmp	r3, #255	@ 0xff
 800f2ac:	d906      	bls.n	800f2bc <I2C_Master_ISR_DMA+0xae>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800f2ae:	68fb      	ldr	r3, [r7, #12]
 800f2b0:	22ff      	movs	r2, #255	@ 0xff
 800f2b2:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 800f2b4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800f2b8:	617b      	str	r3, [r7, #20]
 800f2ba:	e010      	b.n	800f2de <I2C_Master_ISR_DMA+0xd0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800f2bc:	68fb      	ldr	r3, [r7, #12]
 800f2be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f2c0:	b29a      	uxth	r2, r3
 800f2c2:	68fb      	ldr	r3, [r7, #12]
 800f2c4:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800f2c6:	68fb      	ldr	r3, [r7, #12]
 800f2c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f2ca:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800f2ce:	d003      	beq.n	800f2d8 <I2C_Master_ISR_DMA+0xca>
        {
          xfermode = hi2c->XferOptions;
 800f2d0:	68fb      	ldr	r3, [r7, #12]
 800f2d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f2d4:	617b      	str	r3, [r7, #20]
 800f2d6:	e002      	b.n	800f2de <I2C_Master_ISR_DMA+0xd0>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 800f2d8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800f2dc:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 800f2de:	68fb      	ldr	r3, [r7, #12]
 800f2e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f2e2:	b2da      	uxtb	r2, r3
 800f2e4:	8a79      	ldrh	r1, [r7, #18]
 800f2e6:	2300      	movs	r3, #0
 800f2e8:	9300      	str	r3, [sp, #0]
 800f2ea:	697b      	ldr	r3, [r7, #20]
 800f2ec:	68f8      	ldr	r0, [r7, #12]
 800f2ee:	f001 fbcb 	bl	8010a88 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800f2f2:	68fb      	ldr	r3, [r7, #12]
 800f2f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f2f6:	b29a      	uxth	r2, r3
 800f2f8:	68fb      	ldr	r3, [r7, #12]
 800f2fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f2fc:	1ad3      	subs	r3, r2, r3
 800f2fe:	b29a      	uxth	r2, r3
 800f300:	68fb      	ldr	r3, [r7, #12]
 800f302:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800f304:	68fb      	ldr	r3, [r7, #12]
 800f306:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f30a:	b2db      	uxtb	r3, r3
 800f30c:	2b22      	cmp	r3, #34	@ 0x22
 800f30e:	d108      	bne.n	800f322 <I2C_Master_ISR_DMA+0x114>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800f310:	68fb      	ldr	r3, [r7, #12]
 800f312:	681b      	ldr	r3, [r3, #0]
 800f314:	681a      	ldr	r2, [r3, #0]
 800f316:	68fb      	ldr	r3, [r7, #12]
 800f318:	681b      	ldr	r3, [r3, #0]
 800f31a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800f31e:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800f320:	e057      	b.n	800f3d2 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800f322:	68fb      	ldr	r3, [r7, #12]
 800f324:	681b      	ldr	r3, [r3, #0]
 800f326:	681a      	ldr	r2, [r3, #0]
 800f328:	68fb      	ldr	r3, [r7, #12]
 800f32a:	681b      	ldr	r3, [r3, #0]
 800f32c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800f330:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800f332:	e04e      	b.n	800f3d2 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800f334:	68fb      	ldr	r3, [r7, #12]
 800f336:	681b      	ldr	r3, [r3, #0]
 800f338:	685b      	ldr	r3, [r3, #4]
 800f33a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f33e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800f342:	d003      	beq.n	800f34c <I2C_Master_ISR_DMA+0x13e>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800f344:	68f8      	ldr	r0, [r7, #12]
 800f346:	f000 fc79 	bl	800fc3c <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 800f34a:	e042      	b.n	800f3d2 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800f34c:	2140      	movs	r1, #64	@ 0x40
 800f34e:	68f8      	ldr	r0, [r7, #12]
 800f350:	f001 f87e 	bl	8010450 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800f354:	e03d      	b.n	800f3d2 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800f356:	68bb      	ldr	r3, [r7, #8]
 800f358:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f35c:	2b00      	cmp	r3, #0
 800f35e:	d028      	beq.n	800f3b2 <I2C_Master_ISR_DMA+0x1a4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800f366:	2b00      	cmp	r3, #0
 800f368:	d023      	beq.n	800f3b2 <I2C_Master_ISR_DMA+0x1a4>
  {
    if (hi2c->XferCount == 0U)
 800f36a:	68fb      	ldr	r3, [r7, #12]
 800f36c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f36e:	b29b      	uxth	r3, r3
 800f370:	2b00      	cmp	r3, #0
 800f372:	d119      	bne.n	800f3a8 <I2C_Master_ISR_DMA+0x19a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800f374:	68fb      	ldr	r3, [r7, #12]
 800f376:	681b      	ldr	r3, [r3, #0]
 800f378:	685b      	ldr	r3, [r3, #4]
 800f37a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f37e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800f382:	d025      	beq.n	800f3d0 <I2C_Master_ISR_DMA+0x1c2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800f384:	68fb      	ldr	r3, [r7, #12]
 800f386:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f388:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800f38c:	d108      	bne.n	800f3a0 <I2C_Master_ISR_DMA+0x192>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800f38e:	68fb      	ldr	r3, [r7, #12]
 800f390:	681b      	ldr	r3, [r3, #0]
 800f392:	685a      	ldr	r2, [r3, #4]
 800f394:	68fb      	ldr	r3, [r7, #12]
 800f396:	681b      	ldr	r3, [r3, #0]
 800f398:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800f39c:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 800f39e:	e017      	b.n	800f3d0 <I2C_Master_ISR_DMA+0x1c2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800f3a0:	68f8      	ldr	r0, [r7, #12]
 800f3a2:	f000 fc4b 	bl	800fc3c <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 800f3a6:	e013      	b.n	800f3d0 <I2C_Master_ISR_DMA+0x1c2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800f3a8:	2140      	movs	r1, #64	@ 0x40
 800f3aa:	68f8      	ldr	r0, [r7, #12]
 800f3ac:	f001 f850 	bl	8010450 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800f3b0:	e00e      	b.n	800f3d0 <I2C_Master_ISR_DMA+0x1c2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800f3b2:	68bb      	ldr	r3, [r7, #8]
 800f3b4:	f003 0320 	and.w	r3, r3, #32
 800f3b8:	2b00      	cmp	r3, #0
 800f3ba:	d00a      	beq.n	800f3d2 <I2C_Master_ISR_DMA+0x1c4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800f3c2:	2b00      	cmp	r3, #0
 800f3c4:	d005      	beq.n	800f3d2 <I2C_Master_ISR_DMA+0x1c4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800f3c6:	68b9      	ldr	r1, [r7, #8]
 800f3c8:	68f8      	ldr	r0, [r7, #12]
 800f3ca:	f000 fcd1 	bl	800fd70 <I2C_ITMasterCplt>
 800f3ce:	e000      	b.n	800f3d2 <I2C_Master_ISR_DMA+0x1c4>
    if (hi2c->XferCount == 0U)
 800f3d0:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800f3d2:	68fb      	ldr	r3, [r7, #12]
 800f3d4:	2200      	movs	r2, #0
 800f3d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800f3da:	2300      	movs	r3, #0
}
 800f3dc:	4618      	mov	r0, r3
 800f3de:	3718      	adds	r7, #24
 800f3e0:	46bd      	mov	sp, r7
 800f3e2:	bd80      	pop	{r7, pc}

0800f3e4 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 800f3e4:	b580      	push	{r7, lr}
 800f3e6:	b088      	sub	sp, #32
 800f3e8:	af02      	add	r7, sp, #8
 800f3ea:	60f8      	str	r0, [r7, #12]
 800f3ec:	60b9      	str	r1, [r7, #8]
 800f3ee:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 800f3f0:	4b8d      	ldr	r3, [pc, #564]	@ (800f628 <I2C_Mem_ISR_DMA+0x244>)
 800f3f2:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800f3f4:	68fb      	ldr	r3, [r7, #12]
 800f3f6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800f3fa:	2b01      	cmp	r3, #1
 800f3fc:	d101      	bne.n	800f402 <I2C_Mem_ISR_DMA+0x1e>
 800f3fe:	2302      	movs	r3, #2
 800f400:	e10e      	b.n	800f620 <I2C_Mem_ISR_DMA+0x23c>
 800f402:	68fb      	ldr	r3, [r7, #12]
 800f404:	2201      	movs	r2, #1
 800f406:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800f40a:	68bb      	ldr	r3, [r7, #8]
 800f40c:	f003 0310 	and.w	r3, r3, #16
 800f410:	2b00      	cmp	r3, #0
 800f412:	d016      	beq.n	800f442 <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800f41a:	2b00      	cmp	r3, #0
 800f41c:	d011      	beq.n	800f442 <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f41e:	68fb      	ldr	r3, [r7, #12]
 800f420:	681b      	ldr	r3, [r3, #0]
 800f422:	2210      	movs	r2, #16
 800f424:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800f426:	68fb      	ldr	r3, [r7, #12]
 800f428:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f42a:	f043 0204 	orr.w	r2, r3, #4
 800f42e:	68fb      	ldr	r3, [r7, #12]
 800f430:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800f432:	2120      	movs	r1, #32
 800f434:	68f8      	ldr	r0, [r7, #12]
 800f436:	f001 fb59 	bl	8010aec <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800f43a:	68f8      	ldr	r0, [r7, #12]
 800f43c:	f001 f91f 	bl	801067e <I2C_Flush_TXDR>
 800f440:	e0e9      	b.n	800f616 <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800f442:	68bb      	ldr	r3, [r7, #8]
 800f444:	f003 0302 	and.w	r3, r3, #2
 800f448:	2b00      	cmp	r3, #0
 800f44a:	d00e      	beq.n	800f46a <I2C_Mem_ISR_DMA+0x86>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800f452:	2b00      	cmp	r3, #0
 800f454:	d009      	beq.n	800f46a <I2C_Mem_ISR_DMA+0x86>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 800f456:	68fb      	ldr	r3, [r7, #12]
 800f458:	681b      	ldr	r3, [r3, #0]
 800f45a:	68fa      	ldr	r2, [r7, #12]
 800f45c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800f45e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 800f460:	68fb      	ldr	r3, [r7, #12]
 800f462:	f04f 32ff 	mov.w	r2, #4294967295
 800f466:	651a      	str	r2, [r3, #80]	@ 0x50
 800f468:	e0d5      	b.n	800f616 <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800f46a:	68bb      	ldr	r3, [r7, #8]
 800f46c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f470:	2b00      	cmp	r3, #0
 800f472:	d05f      	beq.n	800f534 <I2C_Mem_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800f47a:	2b00      	cmp	r3, #0
 800f47c:	d05a      	beq.n	800f534 <I2C_Mem_ISR_DMA+0x150>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800f47e:	2101      	movs	r1, #1
 800f480:	68f8      	ldr	r0, [r7, #12]
 800f482:	f001 fbb7 	bl	8010bf4 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800f486:	2110      	movs	r1, #16
 800f488:	68f8      	ldr	r0, [r7, #12]
 800f48a:	f001 fb2f 	bl	8010aec <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 800f48e:	68fb      	ldr	r3, [r7, #12]
 800f490:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f492:	b29b      	uxth	r3, r3
 800f494:	2b00      	cmp	r3, #0
 800f496:	d048      	beq.n	800f52a <I2C_Mem_ISR_DMA+0x146>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800f498:	68fb      	ldr	r3, [r7, #12]
 800f49a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f49c:	b29b      	uxth	r3, r3
 800f49e:	2bff      	cmp	r3, #255	@ 0xff
 800f4a0:	d910      	bls.n	800f4c4 <I2C_Mem_ISR_DMA+0xe0>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800f4a2:	68fb      	ldr	r3, [r7, #12]
 800f4a4:	22ff      	movs	r2, #255	@ 0xff
 800f4a6:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800f4a8:	68fb      	ldr	r3, [r7, #12]
 800f4aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f4ac:	b299      	uxth	r1, r3
 800f4ae:	68fb      	ldr	r3, [r7, #12]
 800f4b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f4b2:	b2da      	uxtb	r2, r3
 800f4b4:	2300      	movs	r3, #0
 800f4b6:	9300      	str	r3, [sp, #0]
 800f4b8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800f4bc:	68f8      	ldr	r0, [r7, #12]
 800f4be:	f001 fae3 	bl	8010a88 <I2C_TransferConfig>
 800f4c2:	e011      	b.n	800f4e8 <I2C_Mem_ISR_DMA+0x104>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800f4c4:	68fb      	ldr	r3, [r7, #12]
 800f4c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f4c8:	b29a      	uxth	r2, r3
 800f4ca:	68fb      	ldr	r3, [r7, #12]
 800f4cc:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800f4ce:	68fb      	ldr	r3, [r7, #12]
 800f4d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f4d2:	b299      	uxth	r1, r3
 800f4d4:	68fb      	ldr	r3, [r7, #12]
 800f4d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f4d8:	b2da      	uxtb	r2, r3
 800f4da:	2300      	movs	r3, #0
 800f4dc:	9300      	str	r3, [sp, #0]
 800f4de:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800f4e2:	68f8      	ldr	r0, [r7, #12]
 800f4e4:	f001 fad0 	bl	8010a88 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800f4e8:	68fb      	ldr	r3, [r7, #12]
 800f4ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f4ec:	b29a      	uxth	r2, r3
 800f4ee:	68fb      	ldr	r3, [r7, #12]
 800f4f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f4f2:	1ad3      	subs	r3, r2, r3
 800f4f4:	b29a      	uxth	r2, r3
 800f4f6:	68fb      	ldr	r3, [r7, #12]
 800f4f8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800f4fa:	68fb      	ldr	r3, [r7, #12]
 800f4fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f500:	b2db      	uxtb	r3, r3
 800f502:	2b22      	cmp	r3, #34	@ 0x22
 800f504:	d108      	bne.n	800f518 <I2C_Mem_ISR_DMA+0x134>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800f506:	68fb      	ldr	r3, [r7, #12]
 800f508:	681b      	ldr	r3, [r3, #0]
 800f50a:	681a      	ldr	r2, [r3, #0]
 800f50c:	68fb      	ldr	r3, [r7, #12]
 800f50e:	681b      	ldr	r3, [r3, #0]
 800f510:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800f514:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800f516:	e07e      	b.n	800f616 <I2C_Mem_ISR_DMA+0x232>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800f518:	68fb      	ldr	r3, [r7, #12]
 800f51a:	681b      	ldr	r3, [r3, #0]
 800f51c:	681a      	ldr	r2, [r3, #0]
 800f51e:	68fb      	ldr	r3, [r7, #12]
 800f520:	681b      	ldr	r3, [r3, #0]
 800f522:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800f526:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800f528:	e075      	b.n	800f616 <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800f52a:	2140      	movs	r1, #64	@ 0x40
 800f52c:	68f8      	ldr	r0, [r7, #12]
 800f52e:	f000 ff8f 	bl	8010450 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800f532:	e070      	b.n	800f616 <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800f534:	68bb      	ldr	r3, [r7, #8]
 800f536:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f53a:	2b00      	cmp	r3, #0
 800f53c:	d05d      	beq.n	800f5fa <I2C_Mem_ISR_DMA+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800f544:	2b00      	cmp	r3, #0
 800f546:	d058      	beq.n	800f5fa <I2C_Mem_ISR_DMA+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800f548:	2101      	movs	r1, #1
 800f54a:	68f8      	ldr	r0, [r7, #12]
 800f54c:	f001 fb52 	bl	8010bf4 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800f550:	2110      	movs	r1, #16
 800f552:	68f8      	ldr	r0, [r7, #12]
 800f554:	f001 faca 	bl	8010aec <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800f558:	68fb      	ldr	r3, [r7, #12]
 800f55a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f55e:	b2db      	uxtb	r3, r3
 800f560:	2b22      	cmp	r3, #34	@ 0x22
 800f562:	d101      	bne.n	800f568 <I2C_Mem_ISR_DMA+0x184>
    {
      direction = I2C_GENERATE_START_READ;
 800f564:	4b31      	ldr	r3, [pc, #196]	@ (800f62c <I2C_Mem_ISR_DMA+0x248>)
 800f566:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800f568:	68fb      	ldr	r3, [r7, #12]
 800f56a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f56c:	b29b      	uxth	r3, r3
 800f56e:	2bff      	cmp	r3, #255	@ 0xff
 800f570:	d910      	bls.n	800f594 <I2C_Mem_ISR_DMA+0x1b0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800f572:	68fb      	ldr	r3, [r7, #12]
 800f574:	22ff      	movs	r2, #255	@ 0xff
 800f576:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800f578:	68fb      	ldr	r3, [r7, #12]
 800f57a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f57c:	b299      	uxth	r1, r3
 800f57e:	68fb      	ldr	r3, [r7, #12]
 800f580:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f582:	b2da      	uxtb	r2, r3
 800f584:	697b      	ldr	r3, [r7, #20]
 800f586:	9300      	str	r3, [sp, #0]
 800f588:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800f58c:	68f8      	ldr	r0, [r7, #12]
 800f58e:	f001 fa7b 	bl	8010a88 <I2C_TransferConfig>
 800f592:	e011      	b.n	800f5b8 <I2C_Mem_ISR_DMA+0x1d4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800f594:	68fb      	ldr	r3, [r7, #12]
 800f596:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f598:	b29a      	uxth	r2, r3
 800f59a:	68fb      	ldr	r3, [r7, #12]
 800f59c:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800f59e:	68fb      	ldr	r3, [r7, #12]
 800f5a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f5a2:	b299      	uxth	r1, r3
 800f5a4:	68fb      	ldr	r3, [r7, #12]
 800f5a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f5a8:	b2da      	uxtb	r2, r3
 800f5aa:	697b      	ldr	r3, [r7, #20]
 800f5ac:	9300      	str	r3, [sp, #0]
 800f5ae:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800f5b2:	68f8      	ldr	r0, [r7, #12]
 800f5b4:	f001 fa68 	bl	8010a88 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 800f5b8:	68fb      	ldr	r3, [r7, #12]
 800f5ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f5bc:	b29a      	uxth	r2, r3
 800f5be:	68fb      	ldr	r3, [r7, #12]
 800f5c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f5c2:	1ad3      	subs	r3, r2, r3
 800f5c4:	b29a      	uxth	r2, r3
 800f5c6:	68fb      	ldr	r3, [r7, #12]
 800f5c8:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800f5ca:	68fb      	ldr	r3, [r7, #12]
 800f5cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f5d0:	b2db      	uxtb	r3, r3
 800f5d2:	2b22      	cmp	r3, #34	@ 0x22
 800f5d4:	d108      	bne.n	800f5e8 <I2C_Mem_ISR_DMA+0x204>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800f5d6:	68fb      	ldr	r3, [r7, #12]
 800f5d8:	681b      	ldr	r3, [r3, #0]
 800f5da:	681a      	ldr	r2, [r3, #0]
 800f5dc:	68fb      	ldr	r3, [r7, #12]
 800f5de:	681b      	ldr	r3, [r3, #0]
 800f5e0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800f5e4:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800f5e6:	e016      	b.n	800f616 <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800f5e8:	68fb      	ldr	r3, [r7, #12]
 800f5ea:	681b      	ldr	r3, [r3, #0]
 800f5ec:	681a      	ldr	r2, [r3, #0]
 800f5ee:	68fb      	ldr	r3, [r7, #12]
 800f5f0:	681b      	ldr	r3, [r3, #0]
 800f5f2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800f5f6:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800f5f8:	e00d      	b.n	800f616 <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800f5fa:	68bb      	ldr	r3, [r7, #8]
 800f5fc:	f003 0320 	and.w	r3, r3, #32
 800f600:	2b00      	cmp	r3, #0
 800f602:	d008      	beq.n	800f616 <I2C_Mem_ISR_DMA+0x232>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800f60a:	2b00      	cmp	r3, #0
 800f60c:	d003      	beq.n	800f616 <I2C_Mem_ISR_DMA+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800f60e:	68b9      	ldr	r1, [r7, #8]
 800f610:	68f8      	ldr	r0, [r7, #12]
 800f612:	f000 fbad 	bl	800fd70 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800f616:	68fb      	ldr	r3, [r7, #12]
 800f618:	2200      	movs	r2, #0
 800f61a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800f61e:	2300      	movs	r3, #0
}
 800f620:	4618      	mov	r0, r3
 800f622:	3718      	adds	r7, #24
 800f624:	46bd      	mov	sp, r7
 800f626:	bd80      	pop	{r7, pc}
 800f628:	80002000 	.word	0x80002000
 800f62c:	80002400 	.word	0x80002400

0800f630 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800f630:	b580      	push	{r7, lr}
 800f632:	b088      	sub	sp, #32
 800f634:	af00      	add	r7, sp, #0
 800f636:	60f8      	str	r0, [r7, #12]
 800f638:	60b9      	str	r1, [r7, #8]
 800f63a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800f63c:	68fb      	ldr	r3, [r7, #12]
 800f63e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f640:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 800f642:	2300      	movs	r3, #0
 800f644:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 800f646:	68fb      	ldr	r3, [r7, #12]
 800f648:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800f64c:	2b01      	cmp	r3, #1
 800f64e:	d101      	bne.n	800f654 <I2C_Slave_ISR_DMA+0x24>
 800f650:	2302      	movs	r3, #2
 800f652:	e1c2      	b.n	800f9da <I2C_Slave_ISR_DMA+0x3aa>
 800f654:	68fb      	ldr	r3, [r7, #12]
 800f656:	2201      	movs	r2, #1
 800f658:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800f65c:	68bb      	ldr	r3, [r7, #8]
 800f65e:	f003 0320 	and.w	r3, r3, #32
 800f662:	2b00      	cmp	r3, #0
 800f664:	d009      	beq.n	800f67a <I2C_Slave_ISR_DMA+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800f66c:	2b00      	cmp	r3, #0
 800f66e:	d004      	beq.n	800f67a <I2C_Slave_ISR_DMA+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 800f670:	68b9      	ldr	r1, [r7, #8]
 800f672:	68f8      	ldr	r0, [r7, #12]
 800f674:	f000 fc44 	bl	800ff00 <I2C_ITSlaveCplt>
 800f678:	e1aa      	b.n	800f9d0 <I2C_Slave_ISR_DMA+0x3a0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800f67a:	68bb      	ldr	r3, [r7, #8]
 800f67c:	f003 0310 	and.w	r3, r3, #16
 800f680:	2b00      	cmp	r3, #0
 800f682:	f000 8197 	beq.w	800f9b4 <I2C_Slave_ISR_DMA+0x384>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800f68c:	2b00      	cmp	r3, #0
 800f68e:	f000 8191 	beq.w	800f9b4 <I2C_Slave_ISR_DMA+0x384>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800f698:	2b00      	cmp	r3, #0
 800f69a:	d105      	bne.n	800f6a8 <I2C_Slave_ISR_DMA+0x78>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800f6a2:	2b00      	cmp	r3, #0
 800f6a4:	f000 817f 	beq.w	800f9a6 <I2C_Slave_ISR_DMA+0x376>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 800f6a8:	68fb      	ldr	r3, [r7, #12]
 800f6aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f6ac:	2b00      	cmp	r3, #0
 800f6ae:	d07b      	beq.n	800f7a8 <I2C_Slave_ISR_DMA+0x178>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800f6b6:	2b00      	cmp	r3, #0
 800f6b8:	d076      	beq.n	800f7a8 <I2C_Slave_ISR_DMA+0x178>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 800f6ba:	68fb      	ldr	r3, [r7, #12]
 800f6bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f6be:	681b      	ldr	r3, [r3, #0]
 800f6c0:	4a74      	ldr	r2, [pc, #464]	@ (800f894 <I2C_Slave_ISR_DMA+0x264>)
 800f6c2:	4293      	cmp	r3, r2
 800f6c4:	d059      	beq.n	800f77a <I2C_Slave_ISR_DMA+0x14a>
 800f6c6:	68fb      	ldr	r3, [r7, #12]
 800f6c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f6ca:	681b      	ldr	r3, [r3, #0]
 800f6cc:	4a72      	ldr	r2, [pc, #456]	@ (800f898 <I2C_Slave_ISR_DMA+0x268>)
 800f6ce:	4293      	cmp	r3, r2
 800f6d0:	d053      	beq.n	800f77a <I2C_Slave_ISR_DMA+0x14a>
 800f6d2:	68fb      	ldr	r3, [r7, #12]
 800f6d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f6d6:	681b      	ldr	r3, [r3, #0]
 800f6d8:	4a70      	ldr	r2, [pc, #448]	@ (800f89c <I2C_Slave_ISR_DMA+0x26c>)
 800f6da:	4293      	cmp	r3, r2
 800f6dc:	d04d      	beq.n	800f77a <I2C_Slave_ISR_DMA+0x14a>
 800f6de:	68fb      	ldr	r3, [r7, #12]
 800f6e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f6e2:	681b      	ldr	r3, [r3, #0]
 800f6e4:	4a6e      	ldr	r2, [pc, #440]	@ (800f8a0 <I2C_Slave_ISR_DMA+0x270>)
 800f6e6:	4293      	cmp	r3, r2
 800f6e8:	d047      	beq.n	800f77a <I2C_Slave_ISR_DMA+0x14a>
 800f6ea:	68fb      	ldr	r3, [r7, #12]
 800f6ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f6ee:	681b      	ldr	r3, [r3, #0]
 800f6f0:	4a6c      	ldr	r2, [pc, #432]	@ (800f8a4 <I2C_Slave_ISR_DMA+0x274>)
 800f6f2:	4293      	cmp	r3, r2
 800f6f4:	d041      	beq.n	800f77a <I2C_Slave_ISR_DMA+0x14a>
 800f6f6:	68fb      	ldr	r3, [r7, #12]
 800f6f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f6fa:	681b      	ldr	r3, [r3, #0]
 800f6fc:	4a6a      	ldr	r2, [pc, #424]	@ (800f8a8 <I2C_Slave_ISR_DMA+0x278>)
 800f6fe:	4293      	cmp	r3, r2
 800f700:	d03b      	beq.n	800f77a <I2C_Slave_ISR_DMA+0x14a>
 800f702:	68fb      	ldr	r3, [r7, #12]
 800f704:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f706:	681b      	ldr	r3, [r3, #0]
 800f708:	4a68      	ldr	r2, [pc, #416]	@ (800f8ac <I2C_Slave_ISR_DMA+0x27c>)
 800f70a:	4293      	cmp	r3, r2
 800f70c:	d035      	beq.n	800f77a <I2C_Slave_ISR_DMA+0x14a>
 800f70e:	68fb      	ldr	r3, [r7, #12]
 800f710:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f712:	681b      	ldr	r3, [r3, #0]
 800f714:	4a66      	ldr	r2, [pc, #408]	@ (800f8b0 <I2C_Slave_ISR_DMA+0x280>)
 800f716:	4293      	cmp	r3, r2
 800f718:	d02f      	beq.n	800f77a <I2C_Slave_ISR_DMA+0x14a>
 800f71a:	68fb      	ldr	r3, [r7, #12]
 800f71c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f71e:	681b      	ldr	r3, [r3, #0]
 800f720:	4a64      	ldr	r2, [pc, #400]	@ (800f8b4 <I2C_Slave_ISR_DMA+0x284>)
 800f722:	4293      	cmp	r3, r2
 800f724:	d029      	beq.n	800f77a <I2C_Slave_ISR_DMA+0x14a>
 800f726:	68fb      	ldr	r3, [r7, #12]
 800f728:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f72a:	681b      	ldr	r3, [r3, #0]
 800f72c:	4a62      	ldr	r2, [pc, #392]	@ (800f8b8 <I2C_Slave_ISR_DMA+0x288>)
 800f72e:	4293      	cmp	r3, r2
 800f730:	d023      	beq.n	800f77a <I2C_Slave_ISR_DMA+0x14a>
 800f732:	68fb      	ldr	r3, [r7, #12]
 800f734:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f736:	681b      	ldr	r3, [r3, #0]
 800f738:	4a60      	ldr	r2, [pc, #384]	@ (800f8bc <I2C_Slave_ISR_DMA+0x28c>)
 800f73a:	4293      	cmp	r3, r2
 800f73c:	d01d      	beq.n	800f77a <I2C_Slave_ISR_DMA+0x14a>
 800f73e:	68fb      	ldr	r3, [r7, #12]
 800f740:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f742:	681b      	ldr	r3, [r3, #0]
 800f744:	4a5e      	ldr	r2, [pc, #376]	@ (800f8c0 <I2C_Slave_ISR_DMA+0x290>)
 800f746:	4293      	cmp	r3, r2
 800f748:	d017      	beq.n	800f77a <I2C_Slave_ISR_DMA+0x14a>
 800f74a:	68fb      	ldr	r3, [r7, #12]
 800f74c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f74e:	681b      	ldr	r3, [r3, #0]
 800f750:	4a5c      	ldr	r2, [pc, #368]	@ (800f8c4 <I2C_Slave_ISR_DMA+0x294>)
 800f752:	4293      	cmp	r3, r2
 800f754:	d011      	beq.n	800f77a <I2C_Slave_ISR_DMA+0x14a>
 800f756:	68fb      	ldr	r3, [r7, #12]
 800f758:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f75a:	681b      	ldr	r3, [r3, #0]
 800f75c:	4a5a      	ldr	r2, [pc, #360]	@ (800f8c8 <I2C_Slave_ISR_DMA+0x298>)
 800f75e:	4293      	cmp	r3, r2
 800f760:	d00b      	beq.n	800f77a <I2C_Slave_ISR_DMA+0x14a>
 800f762:	68fb      	ldr	r3, [r7, #12]
 800f764:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f766:	681b      	ldr	r3, [r3, #0]
 800f768:	4a58      	ldr	r2, [pc, #352]	@ (800f8cc <I2C_Slave_ISR_DMA+0x29c>)
 800f76a:	4293      	cmp	r3, r2
 800f76c:	d005      	beq.n	800f77a <I2C_Slave_ISR_DMA+0x14a>
 800f76e:	68fb      	ldr	r3, [r7, #12]
 800f770:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f772:	681b      	ldr	r3, [r3, #0]
 800f774:	4a56      	ldr	r2, [pc, #344]	@ (800f8d0 <I2C_Slave_ISR_DMA+0x2a0>)
 800f776:	4293      	cmp	r3, r2
 800f778:	d109      	bne.n	800f78e <I2C_Slave_ISR_DMA+0x15e>
 800f77a:	68fb      	ldr	r3, [r7, #12]
 800f77c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f77e:	681b      	ldr	r3, [r3, #0]
 800f780:	685b      	ldr	r3, [r3, #4]
 800f782:	2b00      	cmp	r3, #0
 800f784:	bf0c      	ite	eq
 800f786:	2301      	moveq	r3, #1
 800f788:	2300      	movne	r3, #0
 800f78a:	b2db      	uxtb	r3, r3
 800f78c:	e008      	b.n	800f7a0 <I2C_Slave_ISR_DMA+0x170>
 800f78e:	68fb      	ldr	r3, [r7, #12]
 800f790:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f792:	681b      	ldr	r3, [r3, #0]
 800f794:	685b      	ldr	r3, [r3, #4]
 800f796:	2b00      	cmp	r3, #0
 800f798:	bf0c      	ite	eq
 800f79a:	2301      	moveq	r3, #1
 800f79c:	2300      	movne	r3, #0
 800f79e:	b2db      	uxtb	r3, r3
 800f7a0:	2b00      	cmp	r3, #0
 800f7a2:	d001      	beq.n	800f7a8 <I2C_Slave_ISR_DMA+0x178>
          {
            treatdmanack = 1U;
 800f7a4:	2301      	movs	r3, #1
 800f7a6:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 800f7a8:	68fb      	ldr	r3, [r7, #12]
 800f7aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f7ac:	2b00      	cmp	r3, #0
 800f7ae:	f000 809e 	beq.w	800f8ee <I2C_Slave_ISR_DMA+0x2be>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800f7b8:	2b00      	cmp	r3, #0
 800f7ba:	f000 8098 	beq.w	800f8ee <I2C_Slave_ISR_DMA+0x2be>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 800f7be:	68fb      	ldr	r3, [r7, #12]
 800f7c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f7c2:	681b      	ldr	r3, [r3, #0]
 800f7c4:	4a33      	ldr	r2, [pc, #204]	@ (800f894 <I2C_Slave_ISR_DMA+0x264>)
 800f7c6:	4293      	cmp	r3, r2
 800f7c8:	d059      	beq.n	800f87e <I2C_Slave_ISR_DMA+0x24e>
 800f7ca:	68fb      	ldr	r3, [r7, #12]
 800f7cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f7ce:	681b      	ldr	r3, [r3, #0]
 800f7d0:	4a31      	ldr	r2, [pc, #196]	@ (800f898 <I2C_Slave_ISR_DMA+0x268>)
 800f7d2:	4293      	cmp	r3, r2
 800f7d4:	d053      	beq.n	800f87e <I2C_Slave_ISR_DMA+0x24e>
 800f7d6:	68fb      	ldr	r3, [r7, #12]
 800f7d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f7da:	681b      	ldr	r3, [r3, #0]
 800f7dc:	4a2f      	ldr	r2, [pc, #188]	@ (800f89c <I2C_Slave_ISR_DMA+0x26c>)
 800f7de:	4293      	cmp	r3, r2
 800f7e0:	d04d      	beq.n	800f87e <I2C_Slave_ISR_DMA+0x24e>
 800f7e2:	68fb      	ldr	r3, [r7, #12]
 800f7e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f7e6:	681b      	ldr	r3, [r3, #0]
 800f7e8:	4a2d      	ldr	r2, [pc, #180]	@ (800f8a0 <I2C_Slave_ISR_DMA+0x270>)
 800f7ea:	4293      	cmp	r3, r2
 800f7ec:	d047      	beq.n	800f87e <I2C_Slave_ISR_DMA+0x24e>
 800f7ee:	68fb      	ldr	r3, [r7, #12]
 800f7f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f7f2:	681b      	ldr	r3, [r3, #0]
 800f7f4:	4a2b      	ldr	r2, [pc, #172]	@ (800f8a4 <I2C_Slave_ISR_DMA+0x274>)
 800f7f6:	4293      	cmp	r3, r2
 800f7f8:	d041      	beq.n	800f87e <I2C_Slave_ISR_DMA+0x24e>
 800f7fa:	68fb      	ldr	r3, [r7, #12]
 800f7fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f7fe:	681b      	ldr	r3, [r3, #0]
 800f800:	4a29      	ldr	r2, [pc, #164]	@ (800f8a8 <I2C_Slave_ISR_DMA+0x278>)
 800f802:	4293      	cmp	r3, r2
 800f804:	d03b      	beq.n	800f87e <I2C_Slave_ISR_DMA+0x24e>
 800f806:	68fb      	ldr	r3, [r7, #12]
 800f808:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f80a:	681b      	ldr	r3, [r3, #0]
 800f80c:	4a27      	ldr	r2, [pc, #156]	@ (800f8ac <I2C_Slave_ISR_DMA+0x27c>)
 800f80e:	4293      	cmp	r3, r2
 800f810:	d035      	beq.n	800f87e <I2C_Slave_ISR_DMA+0x24e>
 800f812:	68fb      	ldr	r3, [r7, #12]
 800f814:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f816:	681b      	ldr	r3, [r3, #0]
 800f818:	4a25      	ldr	r2, [pc, #148]	@ (800f8b0 <I2C_Slave_ISR_DMA+0x280>)
 800f81a:	4293      	cmp	r3, r2
 800f81c:	d02f      	beq.n	800f87e <I2C_Slave_ISR_DMA+0x24e>
 800f81e:	68fb      	ldr	r3, [r7, #12]
 800f820:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f822:	681b      	ldr	r3, [r3, #0]
 800f824:	4a23      	ldr	r2, [pc, #140]	@ (800f8b4 <I2C_Slave_ISR_DMA+0x284>)
 800f826:	4293      	cmp	r3, r2
 800f828:	d029      	beq.n	800f87e <I2C_Slave_ISR_DMA+0x24e>
 800f82a:	68fb      	ldr	r3, [r7, #12]
 800f82c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f82e:	681b      	ldr	r3, [r3, #0]
 800f830:	4a21      	ldr	r2, [pc, #132]	@ (800f8b8 <I2C_Slave_ISR_DMA+0x288>)
 800f832:	4293      	cmp	r3, r2
 800f834:	d023      	beq.n	800f87e <I2C_Slave_ISR_DMA+0x24e>
 800f836:	68fb      	ldr	r3, [r7, #12]
 800f838:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f83a:	681b      	ldr	r3, [r3, #0]
 800f83c:	4a1f      	ldr	r2, [pc, #124]	@ (800f8bc <I2C_Slave_ISR_DMA+0x28c>)
 800f83e:	4293      	cmp	r3, r2
 800f840:	d01d      	beq.n	800f87e <I2C_Slave_ISR_DMA+0x24e>
 800f842:	68fb      	ldr	r3, [r7, #12]
 800f844:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f846:	681b      	ldr	r3, [r3, #0]
 800f848:	4a1d      	ldr	r2, [pc, #116]	@ (800f8c0 <I2C_Slave_ISR_DMA+0x290>)
 800f84a:	4293      	cmp	r3, r2
 800f84c:	d017      	beq.n	800f87e <I2C_Slave_ISR_DMA+0x24e>
 800f84e:	68fb      	ldr	r3, [r7, #12]
 800f850:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f852:	681b      	ldr	r3, [r3, #0]
 800f854:	4a1b      	ldr	r2, [pc, #108]	@ (800f8c4 <I2C_Slave_ISR_DMA+0x294>)
 800f856:	4293      	cmp	r3, r2
 800f858:	d011      	beq.n	800f87e <I2C_Slave_ISR_DMA+0x24e>
 800f85a:	68fb      	ldr	r3, [r7, #12]
 800f85c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f85e:	681b      	ldr	r3, [r3, #0]
 800f860:	4a19      	ldr	r2, [pc, #100]	@ (800f8c8 <I2C_Slave_ISR_DMA+0x298>)
 800f862:	4293      	cmp	r3, r2
 800f864:	d00b      	beq.n	800f87e <I2C_Slave_ISR_DMA+0x24e>
 800f866:	68fb      	ldr	r3, [r7, #12]
 800f868:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f86a:	681b      	ldr	r3, [r3, #0]
 800f86c:	4a17      	ldr	r2, [pc, #92]	@ (800f8cc <I2C_Slave_ISR_DMA+0x29c>)
 800f86e:	4293      	cmp	r3, r2
 800f870:	d005      	beq.n	800f87e <I2C_Slave_ISR_DMA+0x24e>
 800f872:	68fb      	ldr	r3, [r7, #12]
 800f874:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f876:	681b      	ldr	r3, [r3, #0]
 800f878:	4a15      	ldr	r2, [pc, #84]	@ (800f8d0 <I2C_Slave_ISR_DMA+0x2a0>)
 800f87a:	4293      	cmp	r3, r2
 800f87c:	d12a      	bne.n	800f8d4 <I2C_Slave_ISR_DMA+0x2a4>
 800f87e:	68fb      	ldr	r3, [r7, #12]
 800f880:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f882:	681b      	ldr	r3, [r3, #0]
 800f884:	685b      	ldr	r3, [r3, #4]
 800f886:	2b00      	cmp	r3, #0
 800f888:	bf0c      	ite	eq
 800f88a:	2301      	moveq	r3, #1
 800f88c:	2300      	movne	r3, #0
 800f88e:	b2db      	uxtb	r3, r3
 800f890:	e029      	b.n	800f8e6 <I2C_Slave_ISR_DMA+0x2b6>
 800f892:	bf00      	nop
 800f894:	40020010 	.word	0x40020010
 800f898:	40020028 	.word	0x40020028
 800f89c:	40020040 	.word	0x40020040
 800f8a0:	40020058 	.word	0x40020058
 800f8a4:	40020070 	.word	0x40020070
 800f8a8:	40020088 	.word	0x40020088
 800f8ac:	400200a0 	.word	0x400200a0
 800f8b0:	400200b8 	.word	0x400200b8
 800f8b4:	40020410 	.word	0x40020410
 800f8b8:	40020428 	.word	0x40020428
 800f8bc:	40020440 	.word	0x40020440
 800f8c0:	40020458 	.word	0x40020458
 800f8c4:	40020470 	.word	0x40020470
 800f8c8:	40020488 	.word	0x40020488
 800f8cc:	400204a0 	.word	0x400204a0
 800f8d0:	400204b8 	.word	0x400204b8
 800f8d4:	68fb      	ldr	r3, [r7, #12]
 800f8d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f8d8:	681b      	ldr	r3, [r3, #0]
 800f8da:	685b      	ldr	r3, [r3, #4]
 800f8dc:	2b00      	cmp	r3, #0
 800f8de:	bf0c      	ite	eq
 800f8e0:	2301      	moveq	r3, #1
 800f8e2:	2300      	movne	r3, #0
 800f8e4:	b2db      	uxtb	r3, r3
 800f8e6:	2b00      	cmp	r3, #0
 800f8e8:	d001      	beq.n	800f8ee <I2C_Slave_ISR_DMA+0x2be>
          {
            treatdmanack = 1U;
 800f8ea:	2301      	movs	r3, #1
 800f8ec:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 800f8ee:	69fb      	ldr	r3, [r7, #28]
 800f8f0:	2b01      	cmp	r3, #1
 800f8f2:	d128      	bne.n	800f946 <I2C_Slave_ISR_DMA+0x316>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800f8f4:	68fb      	ldr	r3, [r7, #12]
 800f8f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f8fa:	b2db      	uxtb	r3, r3
 800f8fc:	2b28      	cmp	r3, #40	@ 0x28
 800f8fe:	d108      	bne.n	800f912 <I2C_Slave_ISR_DMA+0x2e2>
 800f900:	69bb      	ldr	r3, [r7, #24]
 800f902:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800f906:	d104      	bne.n	800f912 <I2C_Slave_ISR_DMA+0x2e2>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 800f908:	68b9      	ldr	r1, [r7, #8]
 800f90a:	68f8      	ldr	r0, [r7, #12]
 800f90c:	f000 fd4c 	bl	80103a8 <I2C_ITListenCplt>
 800f910:	e048      	b.n	800f9a4 <I2C_Slave_ISR_DMA+0x374>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800f912:	68fb      	ldr	r3, [r7, #12]
 800f914:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f918:	b2db      	uxtb	r3, r3
 800f91a:	2b29      	cmp	r3, #41	@ 0x29
 800f91c:	d10e      	bne.n	800f93c <I2C_Slave_ISR_DMA+0x30c>
 800f91e:	69bb      	ldr	r3, [r7, #24]
 800f920:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800f924:	d00a      	beq.n	800f93c <I2C_Slave_ISR_DMA+0x30c>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f926:	68fb      	ldr	r3, [r7, #12]
 800f928:	681b      	ldr	r3, [r3, #0]
 800f92a:	2210      	movs	r2, #16
 800f92c:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 800f92e:	68f8      	ldr	r0, [r7, #12]
 800f930:	f000 fea5 	bl	801067e <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 800f934:	68f8      	ldr	r0, [r7, #12]
 800f936:	f000 f9be 	bl	800fcb6 <I2C_ITSlaveSeqCplt>
 800f93a:	e033      	b.n	800f9a4 <I2C_Slave_ISR_DMA+0x374>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f93c:	68fb      	ldr	r3, [r7, #12]
 800f93e:	681b      	ldr	r3, [r3, #0]
 800f940:	2210      	movs	r2, #16
 800f942:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 800f944:	e034      	b.n	800f9b0 <I2C_Slave_ISR_DMA+0x380>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f946:	68fb      	ldr	r3, [r7, #12]
 800f948:	681b      	ldr	r3, [r3, #0]
 800f94a:	2210      	movs	r2, #16
 800f94c:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800f94e:	68fb      	ldr	r3, [r7, #12]
 800f950:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f952:	f043 0204 	orr.w	r2, r3, #4
 800f956:	68fb      	ldr	r3, [r7, #12]
 800f958:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 800f95a:	68fb      	ldr	r3, [r7, #12]
 800f95c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f960:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800f962:	69bb      	ldr	r3, [r7, #24]
 800f964:	2b00      	cmp	r3, #0
 800f966:	d003      	beq.n	800f970 <I2C_Slave_ISR_DMA+0x340>
 800f968:	69bb      	ldr	r3, [r7, #24]
 800f96a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800f96e:	d11f      	bne.n	800f9b0 <I2C_Slave_ISR_DMA+0x380>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800f970:	7dfb      	ldrb	r3, [r7, #23]
 800f972:	2b21      	cmp	r3, #33	@ 0x21
 800f974:	d002      	beq.n	800f97c <I2C_Slave_ISR_DMA+0x34c>
 800f976:	7dfb      	ldrb	r3, [r7, #23]
 800f978:	2b29      	cmp	r3, #41	@ 0x29
 800f97a:	d103      	bne.n	800f984 <I2C_Slave_ISR_DMA+0x354>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800f97c:	68fb      	ldr	r3, [r7, #12]
 800f97e:	2221      	movs	r2, #33	@ 0x21
 800f980:	631a      	str	r2, [r3, #48]	@ 0x30
 800f982:	e008      	b.n	800f996 <I2C_Slave_ISR_DMA+0x366>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800f984:	7dfb      	ldrb	r3, [r7, #23]
 800f986:	2b22      	cmp	r3, #34	@ 0x22
 800f988:	d002      	beq.n	800f990 <I2C_Slave_ISR_DMA+0x360>
 800f98a:	7dfb      	ldrb	r3, [r7, #23]
 800f98c:	2b2a      	cmp	r3, #42	@ 0x2a
 800f98e:	d102      	bne.n	800f996 <I2C_Slave_ISR_DMA+0x366>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800f990:	68fb      	ldr	r3, [r7, #12]
 800f992:	2222      	movs	r2, #34	@ 0x22
 800f994:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 800f996:	68fb      	ldr	r3, [r7, #12]
 800f998:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f99a:	4619      	mov	r1, r3
 800f99c:	68f8      	ldr	r0, [r7, #12]
 800f99e:	f000 fd57 	bl	8010450 <I2C_ITError>
      if (treatdmanack == 1U)
 800f9a2:	e005      	b.n	800f9b0 <I2C_Slave_ISR_DMA+0x380>
 800f9a4:	e004      	b.n	800f9b0 <I2C_Slave_ISR_DMA+0x380>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f9a6:	68fb      	ldr	r3, [r7, #12]
 800f9a8:	681b      	ldr	r3, [r3, #0]
 800f9aa:	2210      	movs	r2, #16
 800f9ac:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800f9ae:	e00f      	b.n	800f9d0 <I2C_Slave_ISR_DMA+0x3a0>
      if (treatdmanack == 1U)
 800f9b0:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800f9b2:	e00d      	b.n	800f9d0 <I2C_Slave_ISR_DMA+0x3a0>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800f9b4:	68bb      	ldr	r3, [r7, #8]
 800f9b6:	f003 0308 	and.w	r3, r3, #8
 800f9ba:	2b00      	cmp	r3, #0
 800f9bc:	d008      	beq.n	800f9d0 <I2C_Slave_ISR_DMA+0x3a0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800f9be:	687b      	ldr	r3, [r7, #4]
 800f9c0:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800f9c4:	2b00      	cmp	r3, #0
 800f9c6:	d003      	beq.n	800f9d0 <I2C_Slave_ISR_DMA+0x3a0>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 800f9c8:	68b9      	ldr	r1, [r7, #8]
 800f9ca:	68f8      	ldr	r0, [r7, #12]
 800f9cc:	f000 f8b2 	bl	800fb34 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800f9d0:	68fb      	ldr	r3, [r7, #12]
 800f9d2:	2200      	movs	r2, #0
 800f9d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800f9d8:	2300      	movs	r3, #0
}
 800f9da:	4618      	mov	r0, r3
 800f9dc:	3720      	adds	r7, #32
 800f9de:	46bd      	mov	sp, r7
 800f9e0:	bd80      	pop	{r7, pc}
 800f9e2:	bf00      	nop

0800f9e4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800f9e4:	b580      	push	{r7, lr}
 800f9e6:	b086      	sub	sp, #24
 800f9e8:	af02      	add	r7, sp, #8
 800f9ea:	60f8      	str	r0, [r7, #12]
 800f9ec:	4608      	mov	r0, r1
 800f9ee:	4611      	mov	r1, r2
 800f9f0:	461a      	mov	r2, r3
 800f9f2:	4603      	mov	r3, r0
 800f9f4:	817b      	strh	r3, [r7, #10]
 800f9f6:	460b      	mov	r3, r1
 800f9f8:	813b      	strh	r3, [r7, #8]
 800f9fa:	4613      	mov	r3, r2
 800f9fc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800f9fe:	88fb      	ldrh	r3, [r7, #6]
 800fa00:	b2da      	uxtb	r2, r3
 800fa02:	8979      	ldrh	r1, [r7, #10]
 800fa04:	4b20      	ldr	r3, [pc, #128]	@ (800fa88 <I2C_RequestMemoryWrite+0xa4>)
 800fa06:	9300      	str	r3, [sp, #0]
 800fa08:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800fa0c:	68f8      	ldr	r0, [r7, #12]
 800fa0e:	f001 f83b 	bl	8010a88 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800fa12:	69fa      	ldr	r2, [r7, #28]
 800fa14:	69b9      	ldr	r1, [r7, #24]
 800fa16:	68f8      	ldr	r0, [r7, #12]
 800fa18:	f000 fecc 	bl	80107b4 <I2C_WaitOnTXISFlagUntilTimeout>
 800fa1c:	4603      	mov	r3, r0
 800fa1e:	2b00      	cmp	r3, #0
 800fa20:	d001      	beq.n	800fa26 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800fa22:	2301      	movs	r3, #1
 800fa24:	e02c      	b.n	800fa80 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800fa26:	88fb      	ldrh	r3, [r7, #6]
 800fa28:	2b01      	cmp	r3, #1
 800fa2a:	d105      	bne.n	800fa38 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800fa2c:	893b      	ldrh	r3, [r7, #8]
 800fa2e:	b2da      	uxtb	r2, r3
 800fa30:	68fb      	ldr	r3, [r7, #12]
 800fa32:	681b      	ldr	r3, [r3, #0]
 800fa34:	629a      	str	r2, [r3, #40]	@ 0x28
 800fa36:	e015      	b.n	800fa64 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800fa38:	893b      	ldrh	r3, [r7, #8]
 800fa3a:	0a1b      	lsrs	r3, r3, #8
 800fa3c:	b29b      	uxth	r3, r3
 800fa3e:	b2da      	uxtb	r2, r3
 800fa40:	68fb      	ldr	r3, [r7, #12]
 800fa42:	681b      	ldr	r3, [r3, #0]
 800fa44:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800fa46:	69fa      	ldr	r2, [r7, #28]
 800fa48:	69b9      	ldr	r1, [r7, #24]
 800fa4a:	68f8      	ldr	r0, [r7, #12]
 800fa4c:	f000 feb2 	bl	80107b4 <I2C_WaitOnTXISFlagUntilTimeout>
 800fa50:	4603      	mov	r3, r0
 800fa52:	2b00      	cmp	r3, #0
 800fa54:	d001      	beq.n	800fa5a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800fa56:	2301      	movs	r3, #1
 800fa58:	e012      	b.n	800fa80 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800fa5a:	893b      	ldrh	r3, [r7, #8]
 800fa5c:	b2da      	uxtb	r2, r3
 800fa5e:	68fb      	ldr	r3, [r7, #12]
 800fa60:	681b      	ldr	r3, [r3, #0]
 800fa62:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800fa64:	69fb      	ldr	r3, [r7, #28]
 800fa66:	9300      	str	r3, [sp, #0]
 800fa68:	69bb      	ldr	r3, [r7, #24]
 800fa6a:	2200      	movs	r2, #0
 800fa6c:	2180      	movs	r1, #128	@ 0x80
 800fa6e:	68f8      	ldr	r0, [r7, #12]
 800fa70:	f000 fe47 	bl	8010702 <I2C_WaitOnFlagUntilTimeout>
 800fa74:	4603      	mov	r3, r0
 800fa76:	2b00      	cmp	r3, #0
 800fa78:	d001      	beq.n	800fa7e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800fa7a:	2301      	movs	r3, #1
 800fa7c:	e000      	b.n	800fa80 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800fa7e:	2300      	movs	r3, #0
}
 800fa80:	4618      	mov	r0, r3
 800fa82:	3710      	adds	r7, #16
 800fa84:	46bd      	mov	sp, r7
 800fa86:	bd80      	pop	{r7, pc}
 800fa88:	80002000 	.word	0x80002000

0800fa8c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800fa8c:	b580      	push	{r7, lr}
 800fa8e:	b086      	sub	sp, #24
 800fa90:	af02      	add	r7, sp, #8
 800fa92:	60f8      	str	r0, [r7, #12]
 800fa94:	4608      	mov	r0, r1
 800fa96:	4611      	mov	r1, r2
 800fa98:	461a      	mov	r2, r3
 800fa9a:	4603      	mov	r3, r0
 800fa9c:	817b      	strh	r3, [r7, #10]
 800fa9e:	460b      	mov	r3, r1
 800faa0:	813b      	strh	r3, [r7, #8]
 800faa2:	4613      	mov	r3, r2
 800faa4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800faa6:	88fb      	ldrh	r3, [r7, #6]
 800faa8:	b2da      	uxtb	r2, r3
 800faaa:	8979      	ldrh	r1, [r7, #10]
 800faac:	4b20      	ldr	r3, [pc, #128]	@ (800fb30 <I2C_RequestMemoryRead+0xa4>)
 800faae:	9300      	str	r3, [sp, #0]
 800fab0:	2300      	movs	r3, #0
 800fab2:	68f8      	ldr	r0, [r7, #12]
 800fab4:	f000 ffe8 	bl	8010a88 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800fab8:	69fa      	ldr	r2, [r7, #28]
 800faba:	69b9      	ldr	r1, [r7, #24]
 800fabc:	68f8      	ldr	r0, [r7, #12]
 800fabe:	f000 fe79 	bl	80107b4 <I2C_WaitOnTXISFlagUntilTimeout>
 800fac2:	4603      	mov	r3, r0
 800fac4:	2b00      	cmp	r3, #0
 800fac6:	d001      	beq.n	800facc <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800fac8:	2301      	movs	r3, #1
 800faca:	e02c      	b.n	800fb26 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800facc:	88fb      	ldrh	r3, [r7, #6]
 800face:	2b01      	cmp	r3, #1
 800fad0:	d105      	bne.n	800fade <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800fad2:	893b      	ldrh	r3, [r7, #8]
 800fad4:	b2da      	uxtb	r2, r3
 800fad6:	68fb      	ldr	r3, [r7, #12]
 800fad8:	681b      	ldr	r3, [r3, #0]
 800fada:	629a      	str	r2, [r3, #40]	@ 0x28
 800fadc:	e015      	b.n	800fb0a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800fade:	893b      	ldrh	r3, [r7, #8]
 800fae0:	0a1b      	lsrs	r3, r3, #8
 800fae2:	b29b      	uxth	r3, r3
 800fae4:	b2da      	uxtb	r2, r3
 800fae6:	68fb      	ldr	r3, [r7, #12]
 800fae8:	681b      	ldr	r3, [r3, #0]
 800faea:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800faec:	69fa      	ldr	r2, [r7, #28]
 800faee:	69b9      	ldr	r1, [r7, #24]
 800faf0:	68f8      	ldr	r0, [r7, #12]
 800faf2:	f000 fe5f 	bl	80107b4 <I2C_WaitOnTXISFlagUntilTimeout>
 800faf6:	4603      	mov	r3, r0
 800faf8:	2b00      	cmp	r3, #0
 800fafa:	d001      	beq.n	800fb00 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800fafc:	2301      	movs	r3, #1
 800fafe:	e012      	b.n	800fb26 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800fb00:	893b      	ldrh	r3, [r7, #8]
 800fb02:	b2da      	uxtb	r2, r3
 800fb04:	68fb      	ldr	r3, [r7, #12]
 800fb06:	681b      	ldr	r3, [r3, #0]
 800fb08:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800fb0a:	69fb      	ldr	r3, [r7, #28]
 800fb0c:	9300      	str	r3, [sp, #0]
 800fb0e:	69bb      	ldr	r3, [r7, #24]
 800fb10:	2200      	movs	r2, #0
 800fb12:	2140      	movs	r1, #64	@ 0x40
 800fb14:	68f8      	ldr	r0, [r7, #12]
 800fb16:	f000 fdf4 	bl	8010702 <I2C_WaitOnFlagUntilTimeout>
 800fb1a:	4603      	mov	r3, r0
 800fb1c:	2b00      	cmp	r3, #0
 800fb1e:	d001      	beq.n	800fb24 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800fb20:	2301      	movs	r3, #1
 800fb22:	e000      	b.n	800fb26 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800fb24:	2300      	movs	r3, #0
}
 800fb26:	4618      	mov	r0, r3
 800fb28:	3710      	adds	r7, #16
 800fb2a:	46bd      	mov	sp, r7
 800fb2c:	bd80      	pop	{r7, pc}
 800fb2e:	bf00      	nop
 800fb30:	80002000 	.word	0x80002000

0800fb34 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800fb34:	b580      	push	{r7, lr}
 800fb36:	b084      	sub	sp, #16
 800fb38:	af00      	add	r7, sp, #0
 800fb3a:	6078      	str	r0, [r7, #4]
 800fb3c:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800fb44:	b2db      	uxtb	r3, r3
 800fb46:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800fb4a:	2b28      	cmp	r3, #40	@ 0x28
 800fb4c:	d16a      	bne.n	800fc24 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800fb4e:	687b      	ldr	r3, [r7, #4]
 800fb50:	681b      	ldr	r3, [r3, #0]
 800fb52:	699b      	ldr	r3, [r3, #24]
 800fb54:	0c1b      	lsrs	r3, r3, #16
 800fb56:	b2db      	uxtb	r3, r3
 800fb58:	f003 0301 	and.w	r3, r3, #1
 800fb5c:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800fb5e:	687b      	ldr	r3, [r7, #4]
 800fb60:	681b      	ldr	r3, [r3, #0]
 800fb62:	699b      	ldr	r3, [r3, #24]
 800fb64:	0c1b      	lsrs	r3, r3, #16
 800fb66:	b29b      	uxth	r3, r3
 800fb68:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800fb6c:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800fb6e:	687b      	ldr	r3, [r7, #4]
 800fb70:	681b      	ldr	r3, [r3, #0]
 800fb72:	689b      	ldr	r3, [r3, #8]
 800fb74:	b29b      	uxth	r3, r3
 800fb76:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800fb7a:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	681b      	ldr	r3, [r3, #0]
 800fb80:	68db      	ldr	r3, [r3, #12]
 800fb82:	b29b      	uxth	r3, r3
 800fb84:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800fb88:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	68db      	ldr	r3, [r3, #12]
 800fb8e:	2b02      	cmp	r3, #2
 800fb90:	d138      	bne.n	800fc04 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800fb92:	897b      	ldrh	r3, [r7, #10]
 800fb94:	09db      	lsrs	r3, r3, #7
 800fb96:	b29a      	uxth	r2, r3
 800fb98:	89bb      	ldrh	r3, [r7, #12]
 800fb9a:	4053      	eors	r3, r2
 800fb9c:	b29b      	uxth	r3, r3
 800fb9e:	f003 0306 	and.w	r3, r3, #6
 800fba2:	2b00      	cmp	r3, #0
 800fba4:	d11c      	bne.n	800fbe0 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800fba6:	897b      	ldrh	r3, [r7, #10]
 800fba8:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800fbaa:	687b      	ldr	r3, [r7, #4]
 800fbac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800fbae:	1c5a      	adds	r2, r3, #1
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 800fbb4:	687b      	ldr	r3, [r7, #4]
 800fbb6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800fbb8:	2b02      	cmp	r3, #2
 800fbba:	d13b      	bne.n	800fc34 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	2200      	movs	r2, #0
 800fbc0:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	681b      	ldr	r3, [r3, #0]
 800fbc6:	2208      	movs	r2, #8
 800fbc8:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800fbca:	687b      	ldr	r3, [r7, #4]
 800fbcc:	2200      	movs	r2, #0
 800fbce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800fbd2:	89ba      	ldrh	r2, [r7, #12]
 800fbd4:	7bfb      	ldrb	r3, [r7, #15]
 800fbd6:	4619      	mov	r1, r3
 800fbd8:	6878      	ldr	r0, [r7, #4]
 800fbda:	f7ff f8c3 	bl	800ed64 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800fbde:	e029      	b.n	800fc34 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800fbe0:	893b      	ldrh	r3, [r7, #8]
 800fbe2:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800fbe4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800fbe8:	6878      	ldr	r0, [r7, #4]
 800fbea:	f001 f803 	bl	8010bf4 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800fbee:	687b      	ldr	r3, [r7, #4]
 800fbf0:	2200      	movs	r2, #0
 800fbf2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800fbf6:	89ba      	ldrh	r2, [r7, #12]
 800fbf8:	7bfb      	ldrb	r3, [r7, #15]
 800fbfa:	4619      	mov	r1, r3
 800fbfc:	6878      	ldr	r0, [r7, #4]
 800fbfe:	f7ff f8b1 	bl	800ed64 <HAL_I2C_AddrCallback>
}
 800fc02:	e017      	b.n	800fc34 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800fc04:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800fc08:	6878      	ldr	r0, [r7, #4]
 800fc0a:	f000 fff3 	bl	8010bf4 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800fc0e:	687b      	ldr	r3, [r7, #4]
 800fc10:	2200      	movs	r2, #0
 800fc12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800fc16:	89ba      	ldrh	r2, [r7, #12]
 800fc18:	7bfb      	ldrb	r3, [r7, #15]
 800fc1a:	4619      	mov	r1, r3
 800fc1c:	6878      	ldr	r0, [r7, #4]
 800fc1e:	f7ff f8a1 	bl	800ed64 <HAL_I2C_AddrCallback>
}
 800fc22:	e007      	b.n	800fc34 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800fc24:	687b      	ldr	r3, [r7, #4]
 800fc26:	681b      	ldr	r3, [r3, #0]
 800fc28:	2208      	movs	r2, #8
 800fc2a:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	2200      	movs	r2, #0
 800fc30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 800fc34:	bf00      	nop
 800fc36:	3710      	adds	r7, #16
 800fc38:	46bd      	mov	sp, r7
 800fc3a:	bd80      	pop	{r7, pc}

0800fc3c <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800fc3c:	b580      	push	{r7, lr}
 800fc3e:	b082      	sub	sp, #8
 800fc40:	af00      	add	r7, sp, #0
 800fc42:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800fc44:	687b      	ldr	r3, [r7, #4]
 800fc46:	2200      	movs	r2, #0
 800fc48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800fc4c:	687b      	ldr	r3, [r7, #4]
 800fc4e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800fc52:	b2db      	uxtb	r3, r3
 800fc54:	2b21      	cmp	r3, #33	@ 0x21
 800fc56:	d115      	bne.n	800fc84 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	2220      	movs	r2, #32
 800fc5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800fc60:	687b      	ldr	r3, [r7, #4]
 800fc62:	2211      	movs	r2, #17
 800fc64:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 800fc66:	687b      	ldr	r3, [r7, #4]
 800fc68:	2200      	movs	r2, #0
 800fc6a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800fc6c:	2101      	movs	r1, #1
 800fc6e:	6878      	ldr	r0, [r7, #4]
 800fc70:	f000 ffc0 	bl	8010bf4 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	2200      	movs	r2, #0
 800fc78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 800fc7c:	6878      	ldr	r0, [r7, #4]
 800fc7e:	f7ff f849 	bl	800ed14 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800fc82:	e014      	b.n	800fcae <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	2220      	movs	r2, #32
 800fc88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800fc8c:	687b      	ldr	r3, [r7, #4]
 800fc8e:	2212      	movs	r2, #18
 800fc90:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 800fc92:	687b      	ldr	r3, [r7, #4]
 800fc94:	2200      	movs	r2, #0
 800fc96:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800fc98:	2102      	movs	r1, #2
 800fc9a:	6878      	ldr	r0, [r7, #4]
 800fc9c:	f000 ffaa 	bl	8010bf4 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	2200      	movs	r2, #0
 800fca4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 800fca8:	6878      	ldr	r0, [r7, #4]
 800fcaa:	f7ff f83d 	bl	800ed28 <HAL_I2C_MasterRxCpltCallback>
}
 800fcae:	bf00      	nop
 800fcb0:	3708      	adds	r7, #8
 800fcb2:	46bd      	mov	sp, r7
 800fcb4:	bd80      	pop	{r7, pc}

0800fcb6 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800fcb6:	b580      	push	{r7, lr}
 800fcb8:	b084      	sub	sp, #16
 800fcba:	af00      	add	r7, sp, #0
 800fcbc:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800fcbe:	687b      	ldr	r3, [r7, #4]
 800fcc0:	681b      	ldr	r3, [r3, #0]
 800fcc2:	681b      	ldr	r3, [r3, #0]
 800fcc4:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	2200      	movs	r2, #0
 800fcca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800fcce:	68fb      	ldr	r3, [r7, #12]
 800fcd0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800fcd4:	2b00      	cmp	r3, #0
 800fcd6:	d008      	beq.n	800fcea <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800fcd8:	687b      	ldr	r3, [r7, #4]
 800fcda:	681b      	ldr	r3, [r3, #0]
 800fcdc:	681a      	ldr	r2, [r3, #0]
 800fcde:	687b      	ldr	r3, [r7, #4]
 800fce0:	681b      	ldr	r3, [r3, #0]
 800fce2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800fce6:	601a      	str	r2, [r3, #0]
 800fce8:	e00c      	b.n	800fd04 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800fcea:	68fb      	ldr	r3, [r7, #12]
 800fcec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800fcf0:	2b00      	cmp	r3, #0
 800fcf2:	d007      	beq.n	800fd04 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800fcf4:	687b      	ldr	r3, [r7, #4]
 800fcf6:	681b      	ldr	r3, [r3, #0]
 800fcf8:	681a      	ldr	r2, [r3, #0]
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	681b      	ldr	r3, [r3, #0]
 800fcfe:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800fd02:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800fd04:	687b      	ldr	r3, [r7, #4]
 800fd06:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800fd0a:	b2db      	uxtb	r3, r3
 800fd0c:	2b29      	cmp	r3, #41	@ 0x29
 800fd0e:	d112      	bne.n	800fd36 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	2228      	movs	r2, #40	@ 0x28
 800fd14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800fd18:	687b      	ldr	r3, [r7, #4]
 800fd1a:	2221      	movs	r2, #33	@ 0x21
 800fd1c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800fd1e:	2101      	movs	r1, #1
 800fd20:	6878      	ldr	r0, [r7, #4]
 800fd22:	f000 ff67 	bl	8010bf4 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800fd26:	687b      	ldr	r3, [r7, #4]
 800fd28:	2200      	movs	r2, #0
 800fd2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800fd2e:	6878      	ldr	r0, [r7, #4]
 800fd30:	f7ff f804 	bl	800ed3c <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800fd34:	e017      	b.n	800fd66 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800fd3c:	b2db      	uxtb	r3, r3
 800fd3e:	2b2a      	cmp	r3, #42	@ 0x2a
 800fd40:	d111      	bne.n	800fd66 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800fd42:	687b      	ldr	r3, [r7, #4]
 800fd44:	2228      	movs	r2, #40	@ 0x28
 800fd46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800fd4a:	687b      	ldr	r3, [r7, #4]
 800fd4c:	2222      	movs	r2, #34	@ 0x22
 800fd4e:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800fd50:	2102      	movs	r1, #2
 800fd52:	6878      	ldr	r0, [r7, #4]
 800fd54:	f000 ff4e 	bl	8010bf4 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800fd58:	687b      	ldr	r3, [r7, #4]
 800fd5a:	2200      	movs	r2, #0
 800fd5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800fd60:	6878      	ldr	r0, [r7, #4]
 800fd62:	f7fe fff5 	bl	800ed50 <HAL_I2C_SlaveRxCpltCallback>
}
 800fd66:	bf00      	nop
 800fd68:	3710      	adds	r7, #16
 800fd6a:	46bd      	mov	sp, r7
 800fd6c:	bd80      	pop	{r7, pc}
	...

0800fd70 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800fd70:	b580      	push	{r7, lr}
 800fd72:	b086      	sub	sp, #24
 800fd74:	af00      	add	r7, sp, #0
 800fd76:	6078      	str	r0, [r7, #4]
 800fd78:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 800fd7a:	683b      	ldr	r3, [r7, #0]
 800fd7c:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800fd7e:	687b      	ldr	r3, [r7, #4]
 800fd80:	681b      	ldr	r3, [r3, #0]
 800fd82:	2220      	movs	r2, #32
 800fd84:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800fd86:	687b      	ldr	r3, [r7, #4]
 800fd88:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800fd8c:	b2db      	uxtb	r3, r3
 800fd8e:	2b21      	cmp	r3, #33	@ 0x21
 800fd90:	d107      	bne.n	800fda2 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800fd92:	2101      	movs	r1, #1
 800fd94:	6878      	ldr	r0, [r7, #4]
 800fd96:	f000 ff2d 	bl	8010bf4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800fd9a:	687b      	ldr	r3, [r7, #4]
 800fd9c:	2211      	movs	r2, #17
 800fd9e:	631a      	str	r2, [r3, #48]	@ 0x30
 800fda0:	e00c      	b.n	800fdbc <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800fda2:	687b      	ldr	r3, [r7, #4]
 800fda4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800fda8:	b2db      	uxtb	r3, r3
 800fdaa:	2b22      	cmp	r3, #34	@ 0x22
 800fdac:	d106      	bne.n	800fdbc <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800fdae:	2102      	movs	r1, #2
 800fdb0:	6878      	ldr	r0, [r7, #4]
 800fdb2:	f000 ff1f 	bl	8010bf4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	2212      	movs	r2, #18
 800fdba:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800fdbc:	687b      	ldr	r3, [r7, #4]
 800fdbe:	681b      	ldr	r3, [r3, #0]
 800fdc0:	6859      	ldr	r1, [r3, #4]
 800fdc2:	687b      	ldr	r3, [r7, #4]
 800fdc4:	681a      	ldr	r2, [r3, #0]
 800fdc6:	4b4c      	ldr	r3, [pc, #304]	@ (800fef8 <I2C_ITMasterCplt+0x188>)
 800fdc8:	400b      	ands	r3, r1
 800fdca:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 800fdcc:	687b      	ldr	r3, [r7, #4]
 800fdce:	2200      	movs	r2, #0
 800fdd0:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800fdd2:	687b      	ldr	r3, [r7, #4]
 800fdd4:	4a49      	ldr	r2, [pc, #292]	@ (800fefc <I2C_ITMasterCplt+0x18c>)
 800fdd6:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 800fdd8:	697b      	ldr	r3, [r7, #20]
 800fdda:	f003 0310 	and.w	r3, r3, #16
 800fdde:	2b00      	cmp	r3, #0
 800fde0:	d009      	beq.n	800fdf6 <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800fde2:	687b      	ldr	r3, [r7, #4]
 800fde4:	681b      	ldr	r3, [r3, #0]
 800fde6:	2210      	movs	r2, #16
 800fde8:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800fdea:	687b      	ldr	r3, [r7, #4]
 800fdec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fdee:	f043 0204 	orr.w	r2, r3, #4
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 800fdf6:	687b      	ldr	r3, [r7, #4]
 800fdf8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800fdfc:	b2db      	uxtb	r3, r3
 800fdfe:	2b60      	cmp	r3, #96	@ 0x60
 800fe00:	d10a      	bne.n	800fe18 <I2C_ITMasterCplt+0xa8>
 800fe02:	697b      	ldr	r3, [r7, #20]
 800fe04:	f003 0304 	and.w	r3, r3, #4
 800fe08:	2b00      	cmp	r3, #0
 800fe0a:	d005      	beq.n	800fe18 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 800fe0c:	687b      	ldr	r3, [r7, #4]
 800fe0e:	681b      	ldr	r3, [r3, #0]
 800fe10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fe12:	b2db      	uxtb	r3, r3
 800fe14:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 800fe16:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800fe18:	6878      	ldr	r0, [r7, #4]
 800fe1a:	f000 fc30 	bl	801067e <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800fe1e:	687b      	ldr	r3, [r7, #4]
 800fe20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fe22:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 800fe24:	687b      	ldr	r3, [r7, #4]
 800fe26:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800fe2a:	b2db      	uxtb	r3, r3
 800fe2c:	2b60      	cmp	r3, #96	@ 0x60
 800fe2e:	d002      	beq.n	800fe36 <I2C_ITMasterCplt+0xc6>
 800fe30:	693b      	ldr	r3, [r7, #16]
 800fe32:	2b00      	cmp	r3, #0
 800fe34:	d006      	beq.n	800fe44 <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fe3a:	4619      	mov	r1, r3
 800fe3c:	6878      	ldr	r0, [r7, #4]
 800fe3e:	f000 fb07 	bl	8010450 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 800fe42:	e054      	b.n	800feee <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800fe44:	687b      	ldr	r3, [r7, #4]
 800fe46:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800fe4a:	b2db      	uxtb	r3, r3
 800fe4c:	2b21      	cmp	r3, #33	@ 0x21
 800fe4e:	d124      	bne.n	800fe9a <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 800fe50:	687b      	ldr	r3, [r7, #4]
 800fe52:	2220      	movs	r2, #32
 800fe54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800fe58:	687b      	ldr	r3, [r7, #4]
 800fe5a:	2200      	movs	r2, #0
 800fe5c:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800fe5e:	687b      	ldr	r3, [r7, #4]
 800fe60:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800fe64:	b2db      	uxtb	r3, r3
 800fe66:	2b40      	cmp	r3, #64	@ 0x40
 800fe68:	d10b      	bne.n	800fe82 <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800fe6a:	687b      	ldr	r3, [r7, #4]
 800fe6c:	2200      	movs	r2, #0
 800fe6e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800fe72:	687b      	ldr	r3, [r7, #4]
 800fe74:	2200      	movs	r2, #0
 800fe76:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 800fe7a:	6878      	ldr	r0, [r7, #4]
 800fe7c:	f7fe ff8a 	bl	800ed94 <HAL_I2C_MemTxCpltCallback>
}
 800fe80:	e035      	b.n	800feee <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800fe82:	687b      	ldr	r3, [r7, #4]
 800fe84:	2200      	movs	r2, #0
 800fe86:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	2200      	movs	r2, #0
 800fe8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800fe92:	6878      	ldr	r0, [r7, #4]
 800fe94:	f7fe ff3e 	bl	800ed14 <HAL_I2C_MasterTxCpltCallback>
}
 800fe98:	e029      	b.n	800feee <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800fe9a:	687b      	ldr	r3, [r7, #4]
 800fe9c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800fea0:	b2db      	uxtb	r3, r3
 800fea2:	2b22      	cmp	r3, #34	@ 0x22
 800fea4:	d123      	bne.n	800feee <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 800fea6:	687b      	ldr	r3, [r7, #4]
 800fea8:	2220      	movs	r2, #32
 800feaa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800feae:	687b      	ldr	r3, [r7, #4]
 800feb0:	2200      	movs	r2, #0
 800feb2:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800feba:	b2db      	uxtb	r3, r3
 800febc:	2b40      	cmp	r3, #64	@ 0x40
 800febe:	d10b      	bne.n	800fed8 <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800fec0:	687b      	ldr	r3, [r7, #4]
 800fec2:	2200      	movs	r2, #0
 800fec4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800fec8:	687b      	ldr	r3, [r7, #4]
 800feca:	2200      	movs	r2, #0
 800fecc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 800fed0:	6878      	ldr	r0, [r7, #4]
 800fed2:	f7f6 fa51 	bl	8006378 <HAL_I2C_MemRxCpltCallback>
}
 800fed6:	e00a      	b.n	800feee <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800fed8:	687b      	ldr	r3, [r7, #4]
 800feda:	2200      	movs	r2, #0
 800fedc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800fee0:	687b      	ldr	r3, [r7, #4]
 800fee2:	2200      	movs	r2, #0
 800fee4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800fee8:	6878      	ldr	r0, [r7, #4]
 800feea:	f7fe ff1d 	bl	800ed28 <HAL_I2C_MasterRxCpltCallback>
}
 800feee:	bf00      	nop
 800fef0:	3718      	adds	r7, #24
 800fef2:	46bd      	mov	sp, r7
 800fef4:	bd80      	pop	{r7, pc}
 800fef6:	bf00      	nop
 800fef8:	fe00e800 	.word	0xfe00e800
 800fefc:	ffff0000 	.word	0xffff0000

0800ff00 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800ff00:	b580      	push	{r7, lr}
 800ff02:	b086      	sub	sp, #24
 800ff04:	af00      	add	r7, sp, #0
 800ff06:	6078      	str	r0, [r7, #4]
 800ff08:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	681b      	ldr	r3, [r3, #0]
 800ff0e:	681b      	ldr	r3, [r3, #0]
 800ff10:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800ff12:	683b      	ldr	r3, [r7, #0]
 800ff14:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 800ff16:	687b      	ldr	r3, [r7, #4]
 800ff18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ff1a:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800ff1c:	687b      	ldr	r3, [r7, #4]
 800ff1e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ff22:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	681b      	ldr	r3, [r3, #0]
 800ff28:	2220      	movs	r2, #32
 800ff2a:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800ff2c:	7afb      	ldrb	r3, [r7, #11]
 800ff2e:	2b21      	cmp	r3, #33	@ 0x21
 800ff30:	d002      	beq.n	800ff38 <I2C_ITSlaveCplt+0x38>
 800ff32:	7afb      	ldrb	r3, [r7, #11]
 800ff34:	2b29      	cmp	r3, #41	@ 0x29
 800ff36:	d108      	bne.n	800ff4a <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800ff38:	f248 0101 	movw	r1, #32769	@ 0x8001
 800ff3c:	6878      	ldr	r0, [r7, #4]
 800ff3e:	f000 fe59 	bl	8010bf4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800ff42:	687b      	ldr	r3, [r7, #4]
 800ff44:	2221      	movs	r2, #33	@ 0x21
 800ff46:	631a      	str	r2, [r3, #48]	@ 0x30
 800ff48:	e019      	b.n	800ff7e <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800ff4a:	7afb      	ldrb	r3, [r7, #11]
 800ff4c:	2b22      	cmp	r3, #34	@ 0x22
 800ff4e:	d002      	beq.n	800ff56 <I2C_ITSlaveCplt+0x56>
 800ff50:	7afb      	ldrb	r3, [r7, #11]
 800ff52:	2b2a      	cmp	r3, #42	@ 0x2a
 800ff54:	d108      	bne.n	800ff68 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800ff56:	f248 0102 	movw	r1, #32770	@ 0x8002
 800ff5a:	6878      	ldr	r0, [r7, #4]
 800ff5c:	f000 fe4a 	bl	8010bf4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800ff60:	687b      	ldr	r3, [r7, #4]
 800ff62:	2222      	movs	r2, #34	@ 0x22
 800ff64:	631a      	str	r2, [r3, #48]	@ 0x30
 800ff66:	e00a      	b.n	800ff7e <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 800ff68:	7afb      	ldrb	r3, [r7, #11]
 800ff6a:	2b28      	cmp	r3, #40	@ 0x28
 800ff6c:	d107      	bne.n	800ff7e <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800ff6e:	f248 0103 	movw	r1, #32771	@ 0x8003
 800ff72:	6878      	ldr	r0, [r7, #4]
 800ff74:	f000 fe3e 	bl	8010bf4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	2200      	movs	r2, #0
 800ff7c:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800ff7e:	687b      	ldr	r3, [r7, #4]
 800ff80:	681b      	ldr	r3, [r3, #0]
 800ff82:	685a      	ldr	r2, [r3, #4]
 800ff84:	687b      	ldr	r3, [r7, #4]
 800ff86:	681b      	ldr	r3, [r3, #0]
 800ff88:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800ff8c:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800ff8e:	687b      	ldr	r3, [r7, #4]
 800ff90:	681b      	ldr	r3, [r3, #0]
 800ff92:	6859      	ldr	r1, [r3, #4]
 800ff94:	687b      	ldr	r3, [r7, #4]
 800ff96:	681a      	ldr	r2, [r3, #0]
 800ff98:	4b7f      	ldr	r3, [pc, #508]	@ (8010198 <I2C_ITSlaveCplt+0x298>)
 800ff9a:	400b      	ands	r3, r1
 800ff9c:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800ff9e:	6878      	ldr	r0, [r7, #4]
 800ffa0:	f000 fb6d 	bl	801067e <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800ffa4:	693b      	ldr	r3, [r7, #16]
 800ffa6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ffaa:	2b00      	cmp	r3, #0
 800ffac:	d07a      	beq.n	80100a4 <I2C_ITSlaveCplt+0x1a4>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800ffae:	687b      	ldr	r3, [r7, #4]
 800ffb0:	681b      	ldr	r3, [r3, #0]
 800ffb2:	681a      	ldr	r2, [r3, #0]
 800ffb4:	687b      	ldr	r3, [r7, #4]
 800ffb6:	681b      	ldr	r3, [r3, #0]
 800ffb8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800ffbc:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ffc2:	2b00      	cmp	r3, #0
 800ffc4:	f000 8111 	beq.w	80101ea <I2C_ITSlaveCplt+0x2ea>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800ffc8:	687b      	ldr	r3, [r7, #4]
 800ffca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ffcc:	681b      	ldr	r3, [r3, #0]
 800ffce:	4a73      	ldr	r2, [pc, #460]	@ (801019c <I2C_ITSlaveCplt+0x29c>)
 800ffd0:	4293      	cmp	r3, r2
 800ffd2:	d059      	beq.n	8010088 <I2C_ITSlaveCplt+0x188>
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ffd8:	681b      	ldr	r3, [r3, #0]
 800ffda:	4a71      	ldr	r2, [pc, #452]	@ (80101a0 <I2C_ITSlaveCplt+0x2a0>)
 800ffdc:	4293      	cmp	r3, r2
 800ffde:	d053      	beq.n	8010088 <I2C_ITSlaveCplt+0x188>
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ffe4:	681b      	ldr	r3, [r3, #0]
 800ffe6:	4a6f      	ldr	r2, [pc, #444]	@ (80101a4 <I2C_ITSlaveCplt+0x2a4>)
 800ffe8:	4293      	cmp	r3, r2
 800ffea:	d04d      	beq.n	8010088 <I2C_ITSlaveCplt+0x188>
 800ffec:	687b      	ldr	r3, [r7, #4]
 800ffee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fff0:	681b      	ldr	r3, [r3, #0]
 800fff2:	4a6d      	ldr	r2, [pc, #436]	@ (80101a8 <I2C_ITSlaveCplt+0x2a8>)
 800fff4:	4293      	cmp	r3, r2
 800fff6:	d047      	beq.n	8010088 <I2C_ITSlaveCplt+0x188>
 800fff8:	687b      	ldr	r3, [r7, #4]
 800fffa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fffc:	681b      	ldr	r3, [r3, #0]
 800fffe:	4a6b      	ldr	r2, [pc, #428]	@ (80101ac <I2C_ITSlaveCplt+0x2ac>)
 8010000:	4293      	cmp	r3, r2
 8010002:	d041      	beq.n	8010088 <I2C_ITSlaveCplt+0x188>
 8010004:	687b      	ldr	r3, [r7, #4]
 8010006:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010008:	681b      	ldr	r3, [r3, #0]
 801000a:	4a69      	ldr	r2, [pc, #420]	@ (80101b0 <I2C_ITSlaveCplt+0x2b0>)
 801000c:	4293      	cmp	r3, r2
 801000e:	d03b      	beq.n	8010088 <I2C_ITSlaveCplt+0x188>
 8010010:	687b      	ldr	r3, [r7, #4]
 8010012:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010014:	681b      	ldr	r3, [r3, #0]
 8010016:	4a67      	ldr	r2, [pc, #412]	@ (80101b4 <I2C_ITSlaveCplt+0x2b4>)
 8010018:	4293      	cmp	r3, r2
 801001a:	d035      	beq.n	8010088 <I2C_ITSlaveCplt+0x188>
 801001c:	687b      	ldr	r3, [r7, #4]
 801001e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010020:	681b      	ldr	r3, [r3, #0]
 8010022:	4a65      	ldr	r2, [pc, #404]	@ (80101b8 <I2C_ITSlaveCplt+0x2b8>)
 8010024:	4293      	cmp	r3, r2
 8010026:	d02f      	beq.n	8010088 <I2C_ITSlaveCplt+0x188>
 8010028:	687b      	ldr	r3, [r7, #4]
 801002a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801002c:	681b      	ldr	r3, [r3, #0]
 801002e:	4a63      	ldr	r2, [pc, #396]	@ (80101bc <I2C_ITSlaveCplt+0x2bc>)
 8010030:	4293      	cmp	r3, r2
 8010032:	d029      	beq.n	8010088 <I2C_ITSlaveCplt+0x188>
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010038:	681b      	ldr	r3, [r3, #0]
 801003a:	4a61      	ldr	r2, [pc, #388]	@ (80101c0 <I2C_ITSlaveCplt+0x2c0>)
 801003c:	4293      	cmp	r3, r2
 801003e:	d023      	beq.n	8010088 <I2C_ITSlaveCplt+0x188>
 8010040:	687b      	ldr	r3, [r7, #4]
 8010042:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010044:	681b      	ldr	r3, [r3, #0]
 8010046:	4a5f      	ldr	r2, [pc, #380]	@ (80101c4 <I2C_ITSlaveCplt+0x2c4>)
 8010048:	4293      	cmp	r3, r2
 801004a:	d01d      	beq.n	8010088 <I2C_ITSlaveCplt+0x188>
 801004c:	687b      	ldr	r3, [r7, #4]
 801004e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010050:	681b      	ldr	r3, [r3, #0]
 8010052:	4a5d      	ldr	r2, [pc, #372]	@ (80101c8 <I2C_ITSlaveCplt+0x2c8>)
 8010054:	4293      	cmp	r3, r2
 8010056:	d017      	beq.n	8010088 <I2C_ITSlaveCplt+0x188>
 8010058:	687b      	ldr	r3, [r7, #4]
 801005a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801005c:	681b      	ldr	r3, [r3, #0]
 801005e:	4a5b      	ldr	r2, [pc, #364]	@ (80101cc <I2C_ITSlaveCplt+0x2cc>)
 8010060:	4293      	cmp	r3, r2
 8010062:	d011      	beq.n	8010088 <I2C_ITSlaveCplt+0x188>
 8010064:	687b      	ldr	r3, [r7, #4]
 8010066:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010068:	681b      	ldr	r3, [r3, #0]
 801006a:	4a59      	ldr	r2, [pc, #356]	@ (80101d0 <I2C_ITSlaveCplt+0x2d0>)
 801006c:	4293      	cmp	r3, r2
 801006e:	d00b      	beq.n	8010088 <I2C_ITSlaveCplt+0x188>
 8010070:	687b      	ldr	r3, [r7, #4]
 8010072:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010074:	681b      	ldr	r3, [r3, #0]
 8010076:	4a57      	ldr	r2, [pc, #348]	@ (80101d4 <I2C_ITSlaveCplt+0x2d4>)
 8010078:	4293      	cmp	r3, r2
 801007a:	d005      	beq.n	8010088 <I2C_ITSlaveCplt+0x188>
 801007c:	687b      	ldr	r3, [r7, #4]
 801007e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010080:	681b      	ldr	r3, [r3, #0]
 8010082:	4a55      	ldr	r2, [pc, #340]	@ (80101d8 <I2C_ITSlaveCplt+0x2d8>)
 8010084:	4293      	cmp	r3, r2
 8010086:	d105      	bne.n	8010094 <I2C_ITSlaveCplt+0x194>
 8010088:	687b      	ldr	r3, [r7, #4]
 801008a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801008c:	681b      	ldr	r3, [r3, #0]
 801008e:	685b      	ldr	r3, [r3, #4]
 8010090:	b29b      	uxth	r3, r3
 8010092:	e004      	b.n	801009e <I2C_ITSlaveCplt+0x19e>
 8010094:	687b      	ldr	r3, [r7, #4]
 8010096:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010098:	681b      	ldr	r3, [r3, #0]
 801009a:	685b      	ldr	r3, [r3, #4]
 801009c:	b29b      	uxth	r3, r3
 801009e:	687a      	ldr	r2, [r7, #4]
 80100a0:	8553      	strh	r3, [r2, #42]	@ 0x2a
 80100a2:	e0a2      	b.n	80101ea <I2C_ITSlaveCplt+0x2ea>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80100a4:	693b      	ldr	r3, [r7, #16]
 80100a6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80100aa:	2b00      	cmp	r3, #0
 80100ac:	f000 809d 	beq.w	80101ea <I2C_ITSlaveCplt+0x2ea>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	681b      	ldr	r3, [r3, #0]
 80100b4:	681a      	ldr	r2, [r3, #0]
 80100b6:	687b      	ldr	r3, [r7, #4]
 80100b8:	681b      	ldr	r3, [r3, #0]
 80100ba:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80100be:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80100c0:	687b      	ldr	r3, [r7, #4]
 80100c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80100c4:	2b00      	cmp	r3, #0
 80100c6:	f000 8090 	beq.w	80101ea <I2C_ITSlaveCplt+0x2ea>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80100ca:	687b      	ldr	r3, [r7, #4]
 80100cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80100ce:	681b      	ldr	r3, [r3, #0]
 80100d0:	4a32      	ldr	r2, [pc, #200]	@ (801019c <I2C_ITSlaveCplt+0x29c>)
 80100d2:	4293      	cmp	r3, r2
 80100d4:	d059      	beq.n	801018a <I2C_ITSlaveCplt+0x28a>
 80100d6:	687b      	ldr	r3, [r7, #4]
 80100d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80100da:	681b      	ldr	r3, [r3, #0]
 80100dc:	4a30      	ldr	r2, [pc, #192]	@ (80101a0 <I2C_ITSlaveCplt+0x2a0>)
 80100de:	4293      	cmp	r3, r2
 80100e0:	d053      	beq.n	801018a <I2C_ITSlaveCplt+0x28a>
 80100e2:	687b      	ldr	r3, [r7, #4]
 80100e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80100e6:	681b      	ldr	r3, [r3, #0]
 80100e8:	4a2e      	ldr	r2, [pc, #184]	@ (80101a4 <I2C_ITSlaveCplt+0x2a4>)
 80100ea:	4293      	cmp	r3, r2
 80100ec:	d04d      	beq.n	801018a <I2C_ITSlaveCplt+0x28a>
 80100ee:	687b      	ldr	r3, [r7, #4]
 80100f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80100f2:	681b      	ldr	r3, [r3, #0]
 80100f4:	4a2c      	ldr	r2, [pc, #176]	@ (80101a8 <I2C_ITSlaveCplt+0x2a8>)
 80100f6:	4293      	cmp	r3, r2
 80100f8:	d047      	beq.n	801018a <I2C_ITSlaveCplt+0x28a>
 80100fa:	687b      	ldr	r3, [r7, #4]
 80100fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80100fe:	681b      	ldr	r3, [r3, #0]
 8010100:	4a2a      	ldr	r2, [pc, #168]	@ (80101ac <I2C_ITSlaveCplt+0x2ac>)
 8010102:	4293      	cmp	r3, r2
 8010104:	d041      	beq.n	801018a <I2C_ITSlaveCplt+0x28a>
 8010106:	687b      	ldr	r3, [r7, #4]
 8010108:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801010a:	681b      	ldr	r3, [r3, #0]
 801010c:	4a28      	ldr	r2, [pc, #160]	@ (80101b0 <I2C_ITSlaveCplt+0x2b0>)
 801010e:	4293      	cmp	r3, r2
 8010110:	d03b      	beq.n	801018a <I2C_ITSlaveCplt+0x28a>
 8010112:	687b      	ldr	r3, [r7, #4]
 8010114:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010116:	681b      	ldr	r3, [r3, #0]
 8010118:	4a26      	ldr	r2, [pc, #152]	@ (80101b4 <I2C_ITSlaveCplt+0x2b4>)
 801011a:	4293      	cmp	r3, r2
 801011c:	d035      	beq.n	801018a <I2C_ITSlaveCplt+0x28a>
 801011e:	687b      	ldr	r3, [r7, #4]
 8010120:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010122:	681b      	ldr	r3, [r3, #0]
 8010124:	4a24      	ldr	r2, [pc, #144]	@ (80101b8 <I2C_ITSlaveCplt+0x2b8>)
 8010126:	4293      	cmp	r3, r2
 8010128:	d02f      	beq.n	801018a <I2C_ITSlaveCplt+0x28a>
 801012a:	687b      	ldr	r3, [r7, #4]
 801012c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801012e:	681b      	ldr	r3, [r3, #0]
 8010130:	4a22      	ldr	r2, [pc, #136]	@ (80101bc <I2C_ITSlaveCplt+0x2bc>)
 8010132:	4293      	cmp	r3, r2
 8010134:	d029      	beq.n	801018a <I2C_ITSlaveCplt+0x28a>
 8010136:	687b      	ldr	r3, [r7, #4]
 8010138:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801013a:	681b      	ldr	r3, [r3, #0]
 801013c:	4a20      	ldr	r2, [pc, #128]	@ (80101c0 <I2C_ITSlaveCplt+0x2c0>)
 801013e:	4293      	cmp	r3, r2
 8010140:	d023      	beq.n	801018a <I2C_ITSlaveCplt+0x28a>
 8010142:	687b      	ldr	r3, [r7, #4]
 8010144:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010146:	681b      	ldr	r3, [r3, #0]
 8010148:	4a1e      	ldr	r2, [pc, #120]	@ (80101c4 <I2C_ITSlaveCplt+0x2c4>)
 801014a:	4293      	cmp	r3, r2
 801014c:	d01d      	beq.n	801018a <I2C_ITSlaveCplt+0x28a>
 801014e:	687b      	ldr	r3, [r7, #4]
 8010150:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010152:	681b      	ldr	r3, [r3, #0]
 8010154:	4a1c      	ldr	r2, [pc, #112]	@ (80101c8 <I2C_ITSlaveCplt+0x2c8>)
 8010156:	4293      	cmp	r3, r2
 8010158:	d017      	beq.n	801018a <I2C_ITSlaveCplt+0x28a>
 801015a:	687b      	ldr	r3, [r7, #4]
 801015c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801015e:	681b      	ldr	r3, [r3, #0]
 8010160:	4a1a      	ldr	r2, [pc, #104]	@ (80101cc <I2C_ITSlaveCplt+0x2cc>)
 8010162:	4293      	cmp	r3, r2
 8010164:	d011      	beq.n	801018a <I2C_ITSlaveCplt+0x28a>
 8010166:	687b      	ldr	r3, [r7, #4]
 8010168:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801016a:	681b      	ldr	r3, [r3, #0]
 801016c:	4a18      	ldr	r2, [pc, #96]	@ (80101d0 <I2C_ITSlaveCplt+0x2d0>)
 801016e:	4293      	cmp	r3, r2
 8010170:	d00b      	beq.n	801018a <I2C_ITSlaveCplt+0x28a>
 8010172:	687b      	ldr	r3, [r7, #4]
 8010174:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010176:	681b      	ldr	r3, [r3, #0]
 8010178:	4a16      	ldr	r2, [pc, #88]	@ (80101d4 <I2C_ITSlaveCplt+0x2d4>)
 801017a:	4293      	cmp	r3, r2
 801017c:	d005      	beq.n	801018a <I2C_ITSlaveCplt+0x28a>
 801017e:	687b      	ldr	r3, [r7, #4]
 8010180:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010182:	681b      	ldr	r3, [r3, #0]
 8010184:	4a14      	ldr	r2, [pc, #80]	@ (80101d8 <I2C_ITSlaveCplt+0x2d8>)
 8010186:	4293      	cmp	r3, r2
 8010188:	d128      	bne.n	80101dc <I2C_ITSlaveCplt+0x2dc>
 801018a:	687b      	ldr	r3, [r7, #4]
 801018c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801018e:	681b      	ldr	r3, [r3, #0]
 8010190:	685b      	ldr	r3, [r3, #4]
 8010192:	b29b      	uxth	r3, r3
 8010194:	e027      	b.n	80101e6 <I2C_ITSlaveCplt+0x2e6>
 8010196:	bf00      	nop
 8010198:	fe00e800 	.word	0xfe00e800
 801019c:	40020010 	.word	0x40020010
 80101a0:	40020028 	.word	0x40020028
 80101a4:	40020040 	.word	0x40020040
 80101a8:	40020058 	.word	0x40020058
 80101ac:	40020070 	.word	0x40020070
 80101b0:	40020088 	.word	0x40020088
 80101b4:	400200a0 	.word	0x400200a0
 80101b8:	400200b8 	.word	0x400200b8
 80101bc:	40020410 	.word	0x40020410
 80101c0:	40020428 	.word	0x40020428
 80101c4:	40020440 	.word	0x40020440
 80101c8:	40020458 	.word	0x40020458
 80101cc:	40020470 	.word	0x40020470
 80101d0:	40020488 	.word	0x40020488
 80101d4:	400204a0 	.word	0x400204a0
 80101d8:	400204b8 	.word	0x400204b8
 80101dc:	687b      	ldr	r3, [r7, #4]
 80101de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80101e0:	681b      	ldr	r3, [r3, #0]
 80101e2:	685b      	ldr	r3, [r3, #4]
 80101e4:	b29b      	uxth	r3, r3
 80101e6:	687a      	ldr	r2, [r7, #4]
 80101e8:	8553      	strh	r3, [r2, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80101ea:	697b      	ldr	r3, [r7, #20]
 80101ec:	f003 0304 	and.w	r3, r3, #4
 80101f0:	2b00      	cmp	r3, #0
 80101f2:	d020      	beq.n	8010236 <I2C_ITSlaveCplt+0x336>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80101f4:	697b      	ldr	r3, [r7, #20]
 80101f6:	f023 0304 	bic.w	r3, r3, #4
 80101fa:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	681b      	ldr	r3, [r3, #0]
 8010200:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010202:	687b      	ldr	r3, [r7, #4]
 8010204:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010206:	b2d2      	uxtb	r2, r2
 8010208:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 801020a:	687b      	ldr	r3, [r7, #4]
 801020c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801020e:	1c5a      	adds	r2, r3, #1
 8010210:	687b      	ldr	r3, [r7, #4]
 8010212:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8010214:	687b      	ldr	r3, [r7, #4]
 8010216:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010218:	2b00      	cmp	r3, #0
 801021a:	d00c      	beq.n	8010236 <I2C_ITSlaveCplt+0x336>
    {
      hi2c->XferSize--;
 801021c:	687b      	ldr	r3, [r7, #4]
 801021e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010220:	3b01      	subs	r3, #1
 8010222:	b29a      	uxth	r2, r3
 8010224:	687b      	ldr	r3, [r7, #4]
 8010226:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8010228:	687b      	ldr	r3, [r7, #4]
 801022a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801022c:	b29b      	uxth	r3, r3
 801022e:	3b01      	subs	r3, #1
 8010230:	b29a      	uxth	r2, r3
 8010232:	687b      	ldr	r3, [r7, #4]
 8010234:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8010236:	687b      	ldr	r3, [r7, #4]
 8010238:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801023a:	b29b      	uxth	r3, r3
 801023c:	2b00      	cmp	r3, #0
 801023e:	d005      	beq.n	801024c <I2C_ITSlaveCplt+0x34c>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8010240:	687b      	ldr	r3, [r7, #4]
 8010242:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010244:	f043 0204 	orr.w	r2, r3, #4
 8010248:	687b      	ldr	r3, [r7, #4]
 801024a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 801024c:	697b      	ldr	r3, [r7, #20]
 801024e:	f003 0310 	and.w	r3, r3, #16
 8010252:	2b00      	cmp	r3, #0
 8010254:	d049      	beq.n	80102ea <I2C_ITSlaveCplt+0x3ea>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8010256:	693b      	ldr	r3, [r7, #16]
 8010258:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 801025c:	2b00      	cmp	r3, #0
 801025e:	d044      	beq.n	80102ea <I2C_ITSlaveCplt+0x3ea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8010260:	687b      	ldr	r3, [r7, #4]
 8010262:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010264:	b29b      	uxth	r3, r3
 8010266:	2b00      	cmp	r3, #0
 8010268:	d128      	bne.n	80102bc <I2C_ITSlaveCplt+0x3bc>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 801026a:	687b      	ldr	r3, [r7, #4]
 801026c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8010270:	b2db      	uxtb	r3, r3
 8010272:	2b28      	cmp	r3, #40	@ 0x28
 8010274:	d108      	bne.n	8010288 <I2C_ITSlaveCplt+0x388>
 8010276:	68fb      	ldr	r3, [r7, #12]
 8010278:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801027c:	d104      	bne.n	8010288 <I2C_ITSlaveCplt+0x388>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 801027e:	6979      	ldr	r1, [r7, #20]
 8010280:	6878      	ldr	r0, [r7, #4]
 8010282:	f000 f891 	bl	80103a8 <I2C_ITListenCplt>
 8010286:	e030      	b.n	80102ea <I2C_ITSlaveCplt+0x3ea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8010288:	687b      	ldr	r3, [r7, #4]
 801028a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 801028e:	b2db      	uxtb	r3, r3
 8010290:	2b29      	cmp	r3, #41	@ 0x29
 8010292:	d10e      	bne.n	80102b2 <I2C_ITSlaveCplt+0x3b2>
 8010294:	68fb      	ldr	r3, [r7, #12]
 8010296:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 801029a:	d00a      	beq.n	80102b2 <I2C_ITSlaveCplt+0x3b2>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801029c:	687b      	ldr	r3, [r7, #4]
 801029e:	681b      	ldr	r3, [r3, #0]
 80102a0:	2210      	movs	r2, #16
 80102a2:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80102a4:	6878      	ldr	r0, [r7, #4]
 80102a6:	f000 f9ea 	bl	801067e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80102aa:	6878      	ldr	r0, [r7, #4]
 80102ac:	f7ff fd03 	bl	800fcb6 <I2C_ITSlaveSeqCplt>
 80102b0:	e01b      	b.n	80102ea <I2C_ITSlaveCplt+0x3ea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80102b2:	687b      	ldr	r3, [r7, #4]
 80102b4:	681b      	ldr	r3, [r3, #0]
 80102b6:	2210      	movs	r2, #16
 80102b8:	61da      	str	r2, [r3, #28]
 80102ba:	e016      	b.n	80102ea <I2C_ITSlaveCplt+0x3ea>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	681b      	ldr	r3, [r3, #0]
 80102c0:	2210      	movs	r2, #16
 80102c2:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80102c4:	687b      	ldr	r3, [r7, #4]
 80102c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80102c8:	f043 0204 	orr.w	r2, r3, #4
 80102cc:	687b      	ldr	r3, [r7, #4]
 80102ce:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80102d0:	68fb      	ldr	r3, [r7, #12]
 80102d2:	2b00      	cmp	r3, #0
 80102d4:	d003      	beq.n	80102de <I2C_ITSlaveCplt+0x3de>
 80102d6:	68fb      	ldr	r3, [r7, #12]
 80102d8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80102dc:	d105      	bne.n	80102ea <I2C_ITSlaveCplt+0x3ea>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80102de:	687b      	ldr	r3, [r7, #4]
 80102e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80102e2:	4619      	mov	r1, r3
 80102e4:	6878      	ldr	r0, [r7, #4]
 80102e6:	f000 f8b3 	bl	8010450 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80102ea:	687b      	ldr	r3, [r7, #4]
 80102ec:	2200      	movs	r2, #0
 80102ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 80102f2:	687b      	ldr	r3, [r7, #4]
 80102f4:	2200      	movs	r2, #0
 80102f6:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80102f8:	687b      	ldr	r3, [r7, #4]
 80102fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80102fc:	2b00      	cmp	r3, #0
 80102fe:	d010      	beq.n	8010322 <I2C_ITSlaveCplt+0x422>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8010300:	687b      	ldr	r3, [r7, #4]
 8010302:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010304:	4619      	mov	r1, r3
 8010306:	6878      	ldr	r0, [r7, #4]
 8010308:	f000 f8a2 	bl	8010450 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 801030c:	687b      	ldr	r3, [r7, #4]
 801030e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8010312:	b2db      	uxtb	r3, r3
 8010314:	2b28      	cmp	r3, #40	@ 0x28
 8010316:	d141      	bne.n	801039c <I2C_ITSlaveCplt+0x49c>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8010318:	6979      	ldr	r1, [r7, #20]
 801031a:	6878      	ldr	r0, [r7, #4]
 801031c:	f000 f844 	bl	80103a8 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8010320:	e03c      	b.n	801039c <I2C_ITSlaveCplt+0x49c>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8010322:	687b      	ldr	r3, [r7, #4]
 8010324:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010326:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 801032a:	d014      	beq.n	8010356 <I2C_ITSlaveCplt+0x456>
    I2C_ITSlaveSeqCplt(hi2c);
 801032c:	6878      	ldr	r0, [r7, #4]
 801032e:	f7ff fcc2 	bl	800fcb6 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	4a1b      	ldr	r2, [pc, #108]	@ (80103a4 <I2C_ITSlaveCplt+0x4a4>)
 8010336:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8010338:	687b      	ldr	r3, [r7, #4]
 801033a:	2220      	movs	r2, #32
 801033c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	2200      	movs	r2, #0
 8010344:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8010346:	687b      	ldr	r3, [r7, #4]
 8010348:	2200      	movs	r2, #0
 801034a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 801034e:	6878      	ldr	r0, [r7, #4]
 8010350:	f7fe fd16 	bl	800ed80 <HAL_I2C_ListenCpltCallback>
}
 8010354:	e022      	b.n	801039c <I2C_ITSlaveCplt+0x49c>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8010356:	687b      	ldr	r3, [r7, #4]
 8010358:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 801035c:	b2db      	uxtb	r3, r3
 801035e:	2b22      	cmp	r3, #34	@ 0x22
 8010360:	d10e      	bne.n	8010380 <I2C_ITSlaveCplt+0x480>
    hi2c->State = HAL_I2C_STATE_READY;
 8010362:	687b      	ldr	r3, [r7, #4]
 8010364:	2220      	movs	r2, #32
 8010366:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 801036a:	687b      	ldr	r3, [r7, #4]
 801036c:	2200      	movs	r2, #0
 801036e:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8010370:	687b      	ldr	r3, [r7, #4]
 8010372:	2200      	movs	r2, #0
 8010374:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8010378:	6878      	ldr	r0, [r7, #4]
 801037a:	f7fe fce9 	bl	800ed50 <HAL_I2C_SlaveRxCpltCallback>
}
 801037e:	e00d      	b.n	801039c <I2C_ITSlaveCplt+0x49c>
    hi2c->State = HAL_I2C_STATE_READY;
 8010380:	687b      	ldr	r3, [r7, #4]
 8010382:	2220      	movs	r2, #32
 8010384:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	2200      	movs	r2, #0
 801038c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 801038e:	687b      	ldr	r3, [r7, #4]
 8010390:	2200      	movs	r2, #0
 8010392:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8010396:	6878      	ldr	r0, [r7, #4]
 8010398:	f7fe fcd0 	bl	800ed3c <HAL_I2C_SlaveTxCpltCallback>
}
 801039c:	bf00      	nop
 801039e:	3718      	adds	r7, #24
 80103a0:	46bd      	mov	sp, r7
 80103a2:	bd80      	pop	{r7, pc}
 80103a4:	ffff0000 	.word	0xffff0000

080103a8 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80103a8:	b580      	push	{r7, lr}
 80103aa:	b082      	sub	sp, #8
 80103ac:	af00      	add	r7, sp, #0
 80103ae:	6078      	str	r0, [r7, #4]
 80103b0:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80103b2:	687b      	ldr	r3, [r7, #4]
 80103b4:	4a25      	ldr	r2, [pc, #148]	@ (801044c <I2C_ITListenCplt+0xa4>)
 80103b6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80103b8:	687b      	ldr	r3, [r7, #4]
 80103ba:	2200      	movs	r2, #0
 80103bc:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80103be:	687b      	ldr	r3, [r7, #4]
 80103c0:	2220      	movs	r2, #32
 80103c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	2200      	movs	r2, #0
 80103ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 80103ce:	687b      	ldr	r3, [r7, #4]
 80103d0:	2200      	movs	r2, #0
 80103d2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80103d4:	683b      	ldr	r3, [r7, #0]
 80103d6:	f003 0304 	and.w	r3, r3, #4
 80103da:	2b00      	cmp	r3, #0
 80103dc:	d022      	beq.n	8010424 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80103de:	687b      	ldr	r3, [r7, #4]
 80103e0:	681b      	ldr	r3, [r3, #0]
 80103e2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80103e4:	687b      	ldr	r3, [r7, #4]
 80103e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80103e8:	b2d2      	uxtb	r2, r2
 80103ea:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80103ec:	687b      	ldr	r3, [r7, #4]
 80103ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80103f0:	1c5a      	adds	r2, r3, #1
 80103f2:	687b      	ldr	r3, [r7, #4]
 80103f4:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80103f6:	687b      	ldr	r3, [r7, #4]
 80103f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80103fa:	2b00      	cmp	r3, #0
 80103fc:	d012      	beq.n	8010424 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 80103fe:	687b      	ldr	r3, [r7, #4]
 8010400:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010402:	3b01      	subs	r3, #1
 8010404:	b29a      	uxth	r2, r3
 8010406:	687b      	ldr	r3, [r7, #4]
 8010408:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 801040a:	687b      	ldr	r3, [r7, #4]
 801040c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801040e:	b29b      	uxth	r3, r3
 8010410:	3b01      	subs	r3, #1
 8010412:	b29a      	uxth	r2, r3
 8010414:	687b      	ldr	r3, [r7, #4]
 8010416:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8010418:	687b      	ldr	r3, [r7, #4]
 801041a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801041c:	f043 0204 	orr.w	r2, r3, #4
 8010420:	687b      	ldr	r3, [r7, #4]
 8010422:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8010424:	f248 0103 	movw	r1, #32771	@ 0x8003
 8010428:	6878      	ldr	r0, [r7, #4]
 801042a:	f000 fbe3 	bl	8010bf4 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801042e:	687b      	ldr	r3, [r7, #4]
 8010430:	681b      	ldr	r3, [r3, #0]
 8010432:	2210      	movs	r2, #16
 8010434:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8010436:	687b      	ldr	r3, [r7, #4]
 8010438:	2200      	movs	r2, #0
 801043a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 801043e:	6878      	ldr	r0, [r7, #4]
 8010440:	f7fe fc9e 	bl	800ed80 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8010444:	bf00      	nop
 8010446:	3708      	adds	r7, #8
 8010448:	46bd      	mov	sp, r7
 801044a:	bd80      	pop	{r7, pc}
 801044c:	ffff0000 	.word	0xffff0000

08010450 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8010450:	b580      	push	{r7, lr}
 8010452:	b084      	sub	sp, #16
 8010454:	af00      	add	r7, sp, #0
 8010456:	6078      	str	r0, [r7, #4]
 8010458:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 801045a:	687b      	ldr	r3, [r7, #4]
 801045c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8010460:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8010462:	687b      	ldr	r3, [r7, #4]
 8010464:	2200      	movs	r2, #0
 8010466:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 801046a:	687b      	ldr	r3, [r7, #4]
 801046c:	4a6d      	ldr	r2, [pc, #436]	@ (8010624 <I2C_ITError+0x1d4>)
 801046e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8010470:	687b      	ldr	r3, [r7, #4]
 8010472:	2200      	movs	r2, #0
 8010474:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8010476:	687b      	ldr	r3, [r7, #4]
 8010478:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801047a:	683b      	ldr	r3, [r7, #0]
 801047c:	431a      	orrs	r2, r3
 801047e:	687b      	ldr	r3, [r7, #4]
 8010480:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8010482:	7bfb      	ldrb	r3, [r7, #15]
 8010484:	2b28      	cmp	r3, #40	@ 0x28
 8010486:	d005      	beq.n	8010494 <I2C_ITError+0x44>
 8010488:	7bfb      	ldrb	r3, [r7, #15]
 801048a:	2b29      	cmp	r3, #41	@ 0x29
 801048c:	d002      	beq.n	8010494 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 801048e:	7bfb      	ldrb	r3, [r7, #15]
 8010490:	2b2a      	cmp	r3, #42	@ 0x2a
 8010492:	d10b      	bne.n	80104ac <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8010494:	2103      	movs	r1, #3
 8010496:	6878      	ldr	r0, [r7, #4]
 8010498:	f000 fbac 	bl	8010bf4 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 801049c:	687b      	ldr	r3, [r7, #4]
 801049e:	2228      	movs	r2, #40	@ 0x28
 80104a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80104a4:	687b      	ldr	r3, [r7, #4]
 80104a6:	4a60      	ldr	r2, [pc, #384]	@ (8010628 <I2C_ITError+0x1d8>)
 80104a8:	635a      	str	r2, [r3, #52]	@ 0x34
 80104aa:	e030      	b.n	801050e <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80104ac:	f248 0103 	movw	r1, #32771	@ 0x8003
 80104b0:	6878      	ldr	r0, [r7, #4]
 80104b2:	f000 fb9f 	bl	8010bf4 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80104b6:	6878      	ldr	r0, [r7, #4]
 80104b8:	f000 f8e1 	bl	801067e <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80104bc:	687b      	ldr	r3, [r7, #4]
 80104be:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80104c2:	b2db      	uxtb	r3, r3
 80104c4:	2b60      	cmp	r3, #96	@ 0x60
 80104c6:	d01f      	beq.n	8010508 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80104c8:	687b      	ldr	r3, [r7, #4]
 80104ca:	2220      	movs	r2, #32
 80104cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80104d0:	687b      	ldr	r3, [r7, #4]
 80104d2:	681b      	ldr	r3, [r3, #0]
 80104d4:	699b      	ldr	r3, [r3, #24]
 80104d6:	f003 0320 	and.w	r3, r3, #32
 80104da:	2b20      	cmp	r3, #32
 80104dc:	d114      	bne.n	8010508 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80104de:	687b      	ldr	r3, [r7, #4]
 80104e0:	681b      	ldr	r3, [r3, #0]
 80104e2:	699b      	ldr	r3, [r3, #24]
 80104e4:	f003 0310 	and.w	r3, r3, #16
 80104e8:	2b10      	cmp	r3, #16
 80104ea:	d109      	bne.n	8010500 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80104ec:	687b      	ldr	r3, [r7, #4]
 80104ee:	681b      	ldr	r3, [r3, #0]
 80104f0:	2210      	movs	r2, #16
 80104f2:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80104f8:	f043 0204 	orr.w	r2, r3, #4
 80104fc:	687b      	ldr	r3, [r7, #4]
 80104fe:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8010500:	687b      	ldr	r3, [r7, #4]
 8010502:	681b      	ldr	r3, [r3, #0]
 8010504:	2220      	movs	r2, #32
 8010506:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8010508:	687b      	ldr	r3, [r7, #4]
 801050a:	2200      	movs	r2, #0
 801050c:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 801050e:	687b      	ldr	r3, [r7, #4]
 8010510:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010512:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8010514:	687b      	ldr	r3, [r7, #4]
 8010516:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010518:	2b00      	cmp	r3, #0
 801051a:	d039      	beq.n	8010590 <I2C_ITError+0x140>
 801051c:	68bb      	ldr	r3, [r7, #8]
 801051e:	2b11      	cmp	r3, #17
 8010520:	d002      	beq.n	8010528 <I2C_ITError+0xd8>
 8010522:	68bb      	ldr	r3, [r7, #8]
 8010524:	2b21      	cmp	r3, #33	@ 0x21
 8010526:	d133      	bne.n	8010590 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8010528:	687b      	ldr	r3, [r7, #4]
 801052a:	681b      	ldr	r3, [r3, #0]
 801052c:	681b      	ldr	r3, [r3, #0]
 801052e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8010532:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8010536:	d107      	bne.n	8010548 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	681b      	ldr	r3, [r3, #0]
 801053c:	681a      	ldr	r2, [r3, #0]
 801053e:	687b      	ldr	r3, [r7, #4]
 8010540:	681b      	ldr	r3, [r3, #0]
 8010542:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8010546:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8010548:	687b      	ldr	r3, [r7, #4]
 801054a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801054c:	4618      	mov	r0, r3
 801054e:	f7fd f9f7 	bl	800d940 <HAL_DMA_GetState>
 8010552:	4603      	mov	r3, r0
 8010554:	2b01      	cmp	r3, #1
 8010556:	d017      	beq.n	8010588 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8010558:	687b      	ldr	r3, [r7, #4]
 801055a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801055c:	4a33      	ldr	r2, [pc, #204]	@ (801062c <I2C_ITError+0x1dc>)
 801055e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	2200      	movs	r2, #0
 8010564:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8010568:	687b      	ldr	r3, [r7, #4]
 801056a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801056c:	4618      	mov	r0, r3
 801056e:	f7fc f877 	bl	800c660 <HAL_DMA_Abort_IT>
 8010572:	4603      	mov	r3, r0
 8010574:	2b00      	cmp	r3, #0
 8010576:	d04d      	beq.n	8010614 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8010578:	687b      	ldr	r3, [r7, #4]
 801057a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801057c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801057e:	687a      	ldr	r2, [r7, #4]
 8010580:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8010582:	4610      	mov	r0, r2
 8010584:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8010586:	e045      	b.n	8010614 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8010588:	6878      	ldr	r0, [r7, #4]
 801058a:	f000 f851 	bl	8010630 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 801058e:	e041      	b.n	8010614 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8010590:	687b      	ldr	r3, [r7, #4]
 8010592:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010594:	2b00      	cmp	r3, #0
 8010596:	d039      	beq.n	801060c <I2C_ITError+0x1bc>
 8010598:	68bb      	ldr	r3, [r7, #8]
 801059a:	2b12      	cmp	r3, #18
 801059c:	d002      	beq.n	80105a4 <I2C_ITError+0x154>
 801059e:	68bb      	ldr	r3, [r7, #8]
 80105a0:	2b22      	cmp	r3, #34	@ 0x22
 80105a2:	d133      	bne.n	801060c <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	681b      	ldr	r3, [r3, #0]
 80105a8:	681b      	ldr	r3, [r3, #0]
 80105aa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80105ae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80105b2:	d107      	bne.n	80105c4 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80105b4:	687b      	ldr	r3, [r7, #4]
 80105b6:	681b      	ldr	r3, [r3, #0]
 80105b8:	681a      	ldr	r2, [r3, #0]
 80105ba:	687b      	ldr	r3, [r7, #4]
 80105bc:	681b      	ldr	r3, [r3, #0]
 80105be:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80105c2:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80105c4:	687b      	ldr	r3, [r7, #4]
 80105c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80105c8:	4618      	mov	r0, r3
 80105ca:	f7fd f9b9 	bl	800d940 <HAL_DMA_GetState>
 80105ce:	4603      	mov	r3, r0
 80105d0:	2b01      	cmp	r3, #1
 80105d2:	d017      	beq.n	8010604 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80105d4:	687b      	ldr	r3, [r7, #4]
 80105d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80105d8:	4a14      	ldr	r2, [pc, #80]	@ (801062c <I2C_ITError+0x1dc>)
 80105da:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80105dc:	687b      	ldr	r3, [r7, #4]
 80105de:	2200      	movs	r2, #0
 80105e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80105e8:	4618      	mov	r0, r3
 80105ea:	f7fc f839 	bl	800c660 <HAL_DMA_Abort_IT>
 80105ee:	4603      	mov	r3, r0
 80105f0:	2b00      	cmp	r3, #0
 80105f2:	d011      	beq.n	8010618 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80105f4:	687b      	ldr	r3, [r7, #4]
 80105f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80105f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80105fa:	687a      	ldr	r2, [r7, #4]
 80105fc:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80105fe:	4610      	mov	r0, r2
 8010600:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8010602:	e009      	b.n	8010618 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8010604:	6878      	ldr	r0, [r7, #4]
 8010606:	f000 f813 	bl	8010630 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 801060a:	e005      	b.n	8010618 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 801060c:	6878      	ldr	r0, [r7, #4]
 801060e:	f000 f80f 	bl	8010630 <I2C_TreatErrorCallback>
  }
}
 8010612:	e002      	b.n	801061a <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8010614:	bf00      	nop
 8010616:	e000      	b.n	801061a <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8010618:	bf00      	nop
}
 801061a:	bf00      	nop
 801061c:	3710      	adds	r7, #16
 801061e:	46bd      	mov	sp, r7
 8010620:	bd80      	pop	{r7, pc}
 8010622:	bf00      	nop
 8010624:	ffff0000 	.word	0xffff0000
 8010628:	0800f01d 	.word	0x0800f01d
 801062c:	080106c7 	.word	0x080106c7

08010630 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8010630:	b580      	push	{r7, lr}
 8010632:	b082      	sub	sp, #8
 8010634:	af00      	add	r7, sp, #0
 8010636:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8010638:	687b      	ldr	r3, [r7, #4]
 801063a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 801063e:	b2db      	uxtb	r3, r3
 8010640:	2b60      	cmp	r3, #96	@ 0x60
 8010642:	d10e      	bne.n	8010662 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8010644:	687b      	ldr	r3, [r7, #4]
 8010646:	2220      	movs	r2, #32
 8010648:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 801064c:	687b      	ldr	r3, [r7, #4]
 801064e:	2200      	movs	r2, #0
 8010650:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8010652:	687b      	ldr	r3, [r7, #4]
 8010654:	2200      	movs	r2, #0
 8010656:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 801065a:	6878      	ldr	r0, [r7, #4]
 801065c:	f7fe fbae 	bl	800edbc <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8010660:	e009      	b.n	8010676 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8010662:	687b      	ldr	r3, [r7, #4]
 8010664:	2200      	movs	r2, #0
 8010666:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8010668:	687b      	ldr	r3, [r7, #4]
 801066a:	2200      	movs	r2, #0
 801066c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8010670:	6878      	ldr	r0, [r7, #4]
 8010672:	f7fe fb99 	bl	800eda8 <HAL_I2C_ErrorCallback>
}
 8010676:	bf00      	nop
 8010678:	3708      	adds	r7, #8
 801067a:	46bd      	mov	sp, r7
 801067c:	bd80      	pop	{r7, pc}

0801067e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 801067e:	b480      	push	{r7}
 8010680:	b083      	sub	sp, #12
 8010682:	af00      	add	r7, sp, #0
 8010684:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8010686:	687b      	ldr	r3, [r7, #4]
 8010688:	681b      	ldr	r3, [r3, #0]
 801068a:	699b      	ldr	r3, [r3, #24]
 801068c:	f003 0302 	and.w	r3, r3, #2
 8010690:	2b02      	cmp	r3, #2
 8010692:	d103      	bne.n	801069c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8010694:	687b      	ldr	r3, [r7, #4]
 8010696:	681b      	ldr	r3, [r3, #0]
 8010698:	2200      	movs	r2, #0
 801069a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 801069c:	687b      	ldr	r3, [r7, #4]
 801069e:	681b      	ldr	r3, [r3, #0]
 80106a0:	699b      	ldr	r3, [r3, #24]
 80106a2:	f003 0301 	and.w	r3, r3, #1
 80106a6:	2b01      	cmp	r3, #1
 80106a8:	d007      	beq.n	80106ba <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80106aa:	687b      	ldr	r3, [r7, #4]
 80106ac:	681b      	ldr	r3, [r3, #0]
 80106ae:	699a      	ldr	r2, [r3, #24]
 80106b0:	687b      	ldr	r3, [r7, #4]
 80106b2:	681b      	ldr	r3, [r3, #0]
 80106b4:	f042 0201 	orr.w	r2, r2, #1
 80106b8:	619a      	str	r2, [r3, #24]
  }
}
 80106ba:	bf00      	nop
 80106bc:	370c      	adds	r7, #12
 80106be:	46bd      	mov	sp, r7
 80106c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106c4:	4770      	bx	lr

080106c6 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80106c6:	b580      	push	{r7, lr}
 80106c8:	b084      	sub	sp, #16
 80106ca:	af00      	add	r7, sp, #0
 80106cc:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80106ce:	687b      	ldr	r3, [r7, #4]
 80106d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80106d2:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80106d4:	68fb      	ldr	r3, [r7, #12]
 80106d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80106d8:	2b00      	cmp	r3, #0
 80106da:	d003      	beq.n	80106e4 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80106dc:	68fb      	ldr	r3, [r7, #12]
 80106de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80106e0:	2200      	movs	r2, #0
 80106e2:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 80106e4:	68fb      	ldr	r3, [r7, #12]
 80106e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80106e8:	2b00      	cmp	r3, #0
 80106ea:	d003      	beq.n	80106f4 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80106ec:	68fb      	ldr	r3, [r7, #12]
 80106ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80106f0:	2200      	movs	r2, #0
 80106f2:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 80106f4:	68f8      	ldr	r0, [r7, #12]
 80106f6:	f7ff ff9b 	bl	8010630 <I2C_TreatErrorCallback>
}
 80106fa:	bf00      	nop
 80106fc:	3710      	adds	r7, #16
 80106fe:	46bd      	mov	sp, r7
 8010700:	bd80      	pop	{r7, pc}

08010702 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8010702:	b580      	push	{r7, lr}
 8010704:	b084      	sub	sp, #16
 8010706:	af00      	add	r7, sp, #0
 8010708:	60f8      	str	r0, [r7, #12]
 801070a:	60b9      	str	r1, [r7, #8]
 801070c:	603b      	str	r3, [r7, #0]
 801070e:	4613      	mov	r3, r2
 8010710:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8010712:	e03b      	b.n	801078c <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8010714:	69ba      	ldr	r2, [r7, #24]
 8010716:	6839      	ldr	r1, [r7, #0]
 8010718:	68f8      	ldr	r0, [r7, #12]
 801071a:	f000 f8d5 	bl	80108c8 <I2C_IsErrorOccurred>
 801071e:	4603      	mov	r3, r0
 8010720:	2b00      	cmp	r3, #0
 8010722:	d001      	beq.n	8010728 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8010724:	2301      	movs	r3, #1
 8010726:	e041      	b.n	80107ac <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010728:	683b      	ldr	r3, [r7, #0]
 801072a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801072e:	d02d      	beq.n	801078c <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010730:	f7f8 fd80 	bl	8009234 <HAL_GetTick>
 8010734:	4602      	mov	r2, r0
 8010736:	69bb      	ldr	r3, [r7, #24]
 8010738:	1ad3      	subs	r3, r2, r3
 801073a:	683a      	ldr	r2, [r7, #0]
 801073c:	429a      	cmp	r2, r3
 801073e:	d302      	bcc.n	8010746 <I2C_WaitOnFlagUntilTimeout+0x44>
 8010740:	683b      	ldr	r3, [r7, #0]
 8010742:	2b00      	cmp	r3, #0
 8010744:	d122      	bne.n	801078c <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8010746:	68fb      	ldr	r3, [r7, #12]
 8010748:	681b      	ldr	r3, [r3, #0]
 801074a:	699a      	ldr	r2, [r3, #24]
 801074c:	68bb      	ldr	r3, [r7, #8]
 801074e:	4013      	ands	r3, r2
 8010750:	68ba      	ldr	r2, [r7, #8]
 8010752:	429a      	cmp	r2, r3
 8010754:	bf0c      	ite	eq
 8010756:	2301      	moveq	r3, #1
 8010758:	2300      	movne	r3, #0
 801075a:	b2db      	uxtb	r3, r3
 801075c:	461a      	mov	r2, r3
 801075e:	79fb      	ldrb	r3, [r7, #7]
 8010760:	429a      	cmp	r2, r3
 8010762:	d113      	bne.n	801078c <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8010764:	68fb      	ldr	r3, [r7, #12]
 8010766:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010768:	f043 0220 	orr.w	r2, r3, #32
 801076c:	68fb      	ldr	r3, [r7, #12]
 801076e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8010770:	68fb      	ldr	r3, [r7, #12]
 8010772:	2220      	movs	r2, #32
 8010774:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8010778:	68fb      	ldr	r3, [r7, #12]
 801077a:	2200      	movs	r2, #0
 801077c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8010780:	68fb      	ldr	r3, [r7, #12]
 8010782:	2200      	movs	r2, #0
 8010784:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8010788:	2301      	movs	r3, #1
 801078a:	e00f      	b.n	80107ac <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 801078c:	68fb      	ldr	r3, [r7, #12]
 801078e:	681b      	ldr	r3, [r3, #0]
 8010790:	699a      	ldr	r2, [r3, #24]
 8010792:	68bb      	ldr	r3, [r7, #8]
 8010794:	4013      	ands	r3, r2
 8010796:	68ba      	ldr	r2, [r7, #8]
 8010798:	429a      	cmp	r2, r3
 801079a:	bf0c      	ite	eq
 801079c:	2301      	moveq	r3, #1
 801079e:	2300      	movne	r3, #0
 80107a0:	b2db      	uxtb	r3, r3
 80107a2:	461a      	mov	r2, r3
 80107a4:	79fb      	ldrb	r3, [r7, #7]
 80107a6:	429a      	cmp	r2, r3
 80107a8:	d0b4      	beq.n	8010714 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80107aa:	2300      	movs	r3, #0
}
 80107ac:	4618      	mov	r0, r3
 80107ae:	3710      	adds	r7, #16
 80107b0:	46bd      	mov	sp, r7
 80107b2:	bd80      	pop	{r7, pc}

080107b4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80107b4:	b580      	push	{r7, lr}
 80107b6:	b084      	sub	sp, #16
 80107b8:	af00      	add	r7, sp, #0
 80107ba:	60f8      	str	r0, [r7, #12]
 80107bc:	60b9      	str	r1, [r7, #8]
 80107be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80107c0:	e033      	b.n	801082a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80107c2:	687a      	ldr	r2, [r7, #4]
 80107c4:	68b9      	ldr	r1, [r7, #8]
 80107c6:	68f8      	ldr	r0, [r7, #12]
 80107c8:	f000 f87e 	bl	80108c8 <I2C_IsErrorOccurred>
 80107cc:	4603      	mov	r3, r0
 80107ce:	2b00      	cmp	r3, #0
 80107d0:	d001      	beq.n	80107d6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80107d2:	2301      	movs	r3, #1
 80107d4:	e031      	b.n	801083a <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80107d6:	68bb      	ldr	r3, [r7, #8]
 80107d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80107dc:	d025      	beq.n	801082a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80107de:	f7f8 fd29 	bl	8009234 <HAL_GetTick>
 80107e2:	4602      	mov	r2, r0
 80107e4:	687b      	ldr	r3, [r7, #4]
 80107e6:	1ad3      	subs	r3, r2, r3
 80107e8:	68ba      	ldr	r2, [r7, #8]
 80107ea:	429a      	cmp	r2, r3
 80107ec:	d302      	bcc.n	80107f4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80107ee:	68bb      	ldr	r3, [r7, #8]
 80107f0:	2b00      	cmp	r3, #0
 80107f2:	d11a      	bne.n	801082a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80107f4:	68fb      	ldr	r3, [r7, #12]
 80107f6:	681b      	ldr	r3, [r3, #0]
 80107f8:	699b      	ldr	r3, [r3, #24]
 80107fa:	f003 0302 	and.w	r3, r3, #2
 80107fe:	2b02      	cmp	r3, #2
 8010800:	d013      	beq.n	801082a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8010802:	68fb      	ldr	r3, [r7, #12]
 8010804:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010806:	f043 0220 	orr.w	r2, r3, #32
 801080a:	68fb      	ldr	r3, [r7, #12]
 801080c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 801080e:	68fb      	ldr	r3, [r7, #12]
 8010810:	2220      	movs	r2, #32
 8010812:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8010816:	68fb      	ldr	r3, [r7, #12]
 8010818:	2200      	movs	r2, #0
 801081a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 801081e:	68fb      	ldr	r3, [r7, #12]
 8010820:	2200      	movs	r2, #0
 8010822:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8010826:	2301      	movs	r3, #1
 8010828:	e007      	b.n	801083a <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 801082a:	68fb      	ldr	r3, [r7, #12]
 801082c:	681b      	ldr	r3, [r3, #0]
 801082e:	699b      	ldr	r3, [r3, #24]
 8010830:	f003 0302 	and.w	r3, r3, #2
 8010834:	2b02      	cmp	r3, #2
 8010836:	d1c4      	bne.n	80107c2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8010838:	2300      	movs	r3, #0
}
 801083a:	4618      	mov	r0, r3
 801083c:	3710      	adds	r7, #16
 801083e:	46bd      	mov	sp, r7
 8010840:	bd80      	pop	{r7, pc}

08010842 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8010842:	b580      	push	{r7, lr}
 8010844:	b084      	sub	sp, #16
 8010846:	af00      	add	r7, sp, #0
 8010848:	60f8      	str	r0, [r7, #12]
 801084a:	60b9      	str	r1, [r7, #8]
 801084c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 801084e:	e02f      	b.n	80108b0 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8010850:	687a      	ldr	r2, [r7, #4]
 8010852:	68b9      	ldr	r1, [r7, #8]
 8010854:	68f8      	ldr	r0, [r7, #12]
 8010856:	f000 f837 	bl	80108c8 <I2C_IsErrorOccurred>
 801085a:	4603      	mov	r3, r0
 801085c:	2b00      	cmp	r3, #0
 801085e:	d001      	beq.n	8010864 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8010860:	2301      	movs	r3, #1
 8010862:	e02d      	b.n	80108c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010864:	f7f8 fce6 	bl	8009234 <HAL_GetTick>
 8010868:	4602      	mov	r2, r0
 801086a:	687b      	ldr	r3, [r7, #4]
 801086c:	1ad3      	subs	r3, r2, r3
 801086e:	68ba      	ldr	r2, [r7, #8]
 8010870:	429a      	cmp	r2, r3
 8010872:	d302      	bcc.n	801087a <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8010874:	68bb      	ldr	r3, [r7, #8]
 8010876:	2b00      	cmp	r3, #0
 8010878:	d11a      	bne.n	80108b0 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 801087a:	68fb      	ldr	r3, [r7, #12]
 801087c:	681b      	ldr	r3, [r3, #0]
 801087e:	699b      	ldr	r3, [r3, #24]
 8010880:	f003 0320 	and.w	r3, r3, #32
 8010884:	2b20      	cmp	r3, #32
 8010886:	d013      	beq.n	80108b0 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8010888:	68fb      	ldr	r3, [r7, #12]
 801088a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801088c:	f043 0220 	orr.w	r2, r3, #32
 8010890:	68fb      	ldr	r3, [r7, #12]
 8010892:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8010894:	68fb      	ldr	r3, [r7, #12]
 8010896:	2220      	movs	r2, #32
 8010898:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801089c:	68fb      	ldr	r3, [r7, #12]
 801089e:	2200      	movs	r2, #0
 80108a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80108a4:	68fb      	ldr	r3, [r7, #12]
 80108a6:	2200      	movs	r2, #0
 80108a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80108ac:	2301      	movs	r3, #1
 80108ae:	e007      	b.n	80108c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80108b0:	68fb      	ldr	r3, [r7, #12]
 80108b2:	681b      	ldr	r3, [r3, #0]
 80108b4:	699b      	ldr	r3, [r3, #24]
 80108b6:	f003 0320 	and.w	r3, r3, #32
 80108ba:	2b20      	cmp	r3, #32
 80108bc:	d1c8      	bne.n	8010850 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80108be:	2300      	movs	r3, #0
}
 80108c0:	4618      	mov	r0, r3
 80108c2:	3710      	adds	r7, #16
 80108c4:	46bd      	mov	sp, r7
 80108c6:	bd80      	pop	{r7, pc}

080108c8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80108c8:	b580      	push	{r7, lr}
 80108ca:	b08a      	sub	sp, #40	@ 0x28
 80108cc:	af00      	add	r7, sp, #0
 80108ce:	60f8      	str	r0, [r7, #12]
 80108d0:	60b9      	str	r1, [r7, #8]
 80108d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80108d4:	2300      	movs	r3, #0
 80108d6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80108da:	68fb      	ldr	r3, [r7, #12]
 80108dc:	681b      	ldr	r3, [r3, #0]
 80108de:	699b      	ldr	r3, [r3, #24]
 80108e0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80108e2:	2300      	movs	r3, #0
 80108e4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80108e6:	687b      	ldr	r3, [r7, #4]
 80108e8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80108ea:	69bb      	ldr	r3, [r7, #24]
 80108ec:	f003 0310 	and.w	r3, r3, #16
 80108f0:	2b00      	cmp	r3, #0
 80108f2:	d068      	beq.n	80109c6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80108f4:	68fb      	ldr	r3, [r7, #12]
 80108f6:	681b      	ldr	r3, [r3, #0]
 80108f8:	2210      	movs	r2, #16
 80108fa:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80108fc:	e049      	b.n	8010992 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80108fe:	68bb      	ldr	r3, [r7, #8]
 8010900:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010904:	d045      	beq.n	8010992 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8010906:	f7f8 fc95 	bl	8009234 <HAL_GetTick>
 801090a:	4602      	mov	r2, r0
 801090c:	69fb      	ldr	r3, [r7, #28]
 801090e:	1ad3      	subs	r3, r2, r3
 8010910:	68ba      	ldr	r2, [r7, #8]
 8010912:	429a      	cmp	r2, r3
 8010914:	d302      	bcc.n	801091c <I2C_IsErrorOccurred+0x54>
 8010916:	68bb      	ldr	r3, [r7, #8]
 8010918:	2b00      	cmp	r3, #0
 801091a:	d13a      	bne.n	8010992 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 801091c:	68fb      	ldr	r3, [r7, #12]
 801091e:	681b      	ldr	r3, [r3, #0]
 8010920:	685b      	ldr	r3, [r3, #4]
 8010922:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8010926:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8010928:	68fb      	ldr	r3, [r7, #12]
 801092a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801092e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8010930:	68fb      	ldr	r3, [r7, #12]
 8010932:	681b      	ldr	r3, [r3, #0]
 8010934:	699b      	ldr	r3, [r3, #24]
 8010936:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 801093a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801093e:	d121      	bne.n	8010984 <I2C_IsErrorOccurred+0xbc>
 8010940:	697b      	ldr	r3, [r7, #20]
 8010942:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8010946:	d01d      	beq.n	8010984 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8010948:	7cfb      	ldrb	r3, [r7, #19]
 801094a:	2b20      	cmp	r3, #32
 801094c:	d01a      	beq.n	8010984 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 801094e:	68fb      	ldr	r3, [r7, #12]
 8010950:	681b      	ldr	r3, [r3, #0]
 8010952:	685a      	ldr	r2, [r3, #4]
 8010954:	68fb      	ldr	r3, [r7, #12]
 8010956:	681b      	ldr	r3, [r3, #0]
 8010958:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 801095c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 801095e:	f7f8 fc69 	bl	8009234 <HAL_GetTick>
 8010962:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8010964:	e00e      	b.n	8010984 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8010966:	f7f8 fc65 	bl	8009234 <HAL_GetTick>
 801096a:	4602      	mov	r2, r0
 801096c:	69fb      	ldr	r3, [r7, #28]
 801096e:	1ad3      	subs	r3, r2, r3
 8010970:	2b19      	cmp	r3, #25
 8010972:	d907      	bls.n	8010984 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8010974:	6a3b      	ldr	r3, [r7, #32]
 8010976:	f043 0320 	orr.w	r3, r3, #32
 801097a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 801097c:	2301      	movs	r3, #1
 801097e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8010982:	e006      	b.n	8010992 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8010984:	68fb      	ldr	r3, [r7, #12]
 8010986:	681b      	ldr	r3, [r3, #0]
 8010988:	699b      	ldr	r3, [r3, #24]
 801098a:	f003 0320 	and.w	r3, r3, #32
 801098e:	2b20      	cmp	r3, #32
 8010990:	d1e9      	bne.n	8010966 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8010992:	68fb      	ldr	r3, [r7, #12]
 8010994:	681b      	ldr	r3, [r3, #0]
 8010996:	699b      	ldr	r3, [r3, #24]
 8010998:	f003 0320 	and.w	r3, r3, #32
 801099c:	2b20      	cmp	r3, #32
 801099e:	d003      	beq.n	80109a8 <I2C_IsErrorOccurred+0xe0>
 80109a0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80109a4:	2b00      	cmp	r3, #0
 80109a6:	d0aa      	beq.n	80108fe <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80109a8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80109ac:	2b00      	cmp	r3, #0
 80109ae:	d103      	bne.n	80109b8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80109b0:	68fb      	ldr	r3, [r7, #12]
 80109b2:	681b      	ldr	r3, [r3, #0]
 80109b4:	2220      	movs	r2, #32
 80109b6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80109b8:	6a3b      	ldr	r3, [r7, #32]
 80109ba:	f043 0304 	orr.w	r3, r3, #4
 80109be:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80109c0:	2301      	movs	r3, #1
 80109c2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80109c6:	68fb      	ldr	r3, [r7, #12]
 80109c8:	681b      	ldr	r3, [r3, #0]
 80109ca:	699b      	ldr	r3, [r3, #24]
 80109cc:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80109ce:	69bb      	ldr	r3, [r7, #24]
 80109d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80109d4:	2b00      	cmp	r3, #0
 80109d6:	d00b      	beq.n	80109f0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80109d8:	6a3b      	ldr	r3, [r7, #32]
 80109da:	f043 0301 	orr.w	r3, r3, #1
 80109de:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80109e0:	68fb      	ldr	r3, [r7, #12]
 80109e2:	681b      	ldr	r3, [r3, #0]
 80109e4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80109e8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80109ea:	2301      	movs	r3, #1
 80109ec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80109f0:	69bb      	ldr	r3, [r7, #24]
 80109f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80109f6:	2b00      	cmp	r3, #0
 80109f8:	d00b      	beq.n	8010a12 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80109fa:	6a3b      	ldr	r3, [r7, #32]
 80109fc:	f043 0308 	orr.w	r3, r3, #8
 8010a00:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8010a02:	68fb      	ldr	r3, [r7, #12]
 8010a04:	681b      	ldr	r3, [r3, #0]
 8010a06:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8010a0a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8010a0c:	2301      	movs	r3, #1
 8010a0e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8010a12:	69bb      	ldr	r3, [r7, #24]
 8010a14:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8010a18:	2b00      	cmp	r3, #0
 8010a1a:	d00b      	beq.n	8010a34 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8010a1c:	6a3b      	ldr	r3, [r7, #32]
 8010a1e:	f043 0302 	orr.w	r3, r3, #2
 8010a22:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8010a24:	68fb      	ldr	r3, [r7, #12]
 8010a26:	681b      	ldr	r3, [r3, #0]
 8010a28:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010a2c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8010a2e:	2301      	movs	r3, #1
 8010a30:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8010a34:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010a38:	2b00      	cmp	r3, #0
 8010a3a:	d01c      	beq.n	8010a76 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8010a3c:	68f8      	ldr	r0, [r7, #12]
 8010a3e:	f7ff fe1e 	bl	801067e <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8010a42:	68fb      	ldr	r3, [r7, #12]
 8010a44:	681b      	ldr	r3, [r3, #0]
 8010a46:	6859      	ldr	r1, [r3, #4]
 8010a48:	68fb      	ldr	r3, [r7, #12]
 8010a4a:	681a      	ldr	r2, [r3, #0]
 8010a4c:	4b0d      	ldr	r3, [pc, #52]	@ (8010a84 <I2C_IsErrorOccurred+0x1bc>)
 8010a4e:	400b      	ands	r3, r1
 8010a50:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8010a52:	68fb      	ldr	r3, [r7, #12]
 8010a54:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8010a56:	6a3b      	ldr	r3, [r7, #32]
 8010a58:	431a      	orrs	r2, r3
 8010a5a:	68fb      	ldr	r3, [r7, #12]
 8010a5c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8010a5e:	68fb      	ldr	r3, [r7, #12]
 8010a60:	2220      	movs	r2, #32
 8010a62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8010a66:	68fb      	ldr	r3, [r7, #12]
 8010a68:	2200      	movs	r2, #0
 8010a6a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8010a6e:	68fb      	ldr	r3, [r7, #12]
 8010a70:	2200      	movs	r2, #0
 8010a72:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8010a76:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8010a7a:	4618      	mov	r0, r3
 8010a7c:	3728      	adds	r7, #40	@ 0x28
 8010a7e:	46bd      	mov	sp, r7
 8010a80:	bd80      	pop	{r7, pc}
 8010a82:	bf00      	nop
 8010a84:	fe00e800 	.word	0xfe00e800

08010a88 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8010a88:	b480      	push	{r7}
 8010a8a:	b087      	sub	sp, #28
 8010a8c:	af00      	add	r7, sp, #0
 8010a8e:	60f8      	str	r0, [r7, #12]
 8010a90:	607b      	str	r3, [r7, #4]
 8010a92:	460b      	mov	r3, r1
 8010a94:	817b      	strh	r3, [r7, #10]
 8010a96:	4613      	mov	r3, r2
 8010a98:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8010a9a:	897b      	ldrh	r3, [r7, #10]
 8010a9c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8010aa0:	7a7b      	ldrb	r3, [r7, #9]
 8010aa2:	041b      	lsls	r3, r3, #16
 8010aa4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8010aa8:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8010aaa:	687b      	ldr	r3, [r7, #4]
 8010aac:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8010aae:	6a3b      	ldr	r3, [r7, #32]
 8010ab0:	4313      	orrs	r3, r2
 8010ab2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8010ab6:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8010ab8:	68fb      	ldr	r3, [r7, #12]
 8010aba:	681b      	ldr	r3, [r3, #0]
 8010abc:	685a      	ldr	r2, [r3, #4]
 8010abe:	6a3b      	ldr	r3, [r7, #32]
 8010ac0:	0d5b      	lsrs	r3, r3, #21
 8010ac2:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8010ac6:	4b08      	ldr	r3, [pc, #32]	@ (8010ae8 <I2C_TransferConfig+0x60>)
 8010ac8:	430b      	orrs	r3, r1
 8010aca:	43db      	mvns	r3, r3
 8010acc:	ea02 0103 	and.w	r1, r2, r3
 8010ad0:	68fb      	ldr	r3, [r7, #12]
 8010ad2:	681b      	ldr	r3, [r3, #0]
 8010ad4:	697a      	ldr	r2, [r7, #20]
 8010ad6:	430a      	orrs	r2, r1
 8010ad8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8010ada:	bf00      	nop
 8010adc:	371c      	adds	r7, #28
 8010ade:	46bd      	mov	sp, r7
 8010ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ae4:	4770      	bx	lr
 8010ae6:	bf00      	nop
 8010ae8:	03ff63ff 	.word	0x03ff63ff

08010aec <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8010aec:	b480      	push	{r7}
 8010aee:	b085      	sub	sp, #20
 8010af0:	af00      	add	r7, sp, #0
 8010af2:	6078      	str	r0, [r7, #4]
 8010af4:	460b      	mov	r3, r1
 8010af6:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8010af8:	2300      	movs	r3, #0
 8010afa:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8010afc:	687b      	ldr	r3, [r7, #4]
 8010afe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010b00:	4a39      	ldr	r2, [pc, #228]	@ (8010be8 <I2C_Enable_IRQ+0xfc>)
 8010b02:	4293      	cmp	r3, r2
 8010b04:	d032      	beq.n	8010b6c <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8010b06:	687b      	ldr	r3, [r7, #4]
 8010b08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8010b0a:	4a38      	ldr	r2, [pc, #224]	@ (8010bec <I2C_Enable_IRQ+0x100>)
 8010b0c:	4293      	cmp	r3, r2
 8010b0e:	d02d      	beq.n	8010b6c <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8010b10:	687b      	ldr	r3, [r7, #4]
 8010b12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8010b14:	4a36      	ldr	r2, [pc, #216]	@ (8010bf0 <I2C_Enable_IRQ+0x104>)
 8010b16:	4293      	cmp	r3, r2
 8010b18:	d028      	beq.n	8010b6c <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8010b1a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010b1e:	2b00      	cmp	r3, #0
 8010b20:	da03      	bge.n	8010b2a <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8010b22:	68fb      	ldr	r3, [r7, #12]
 8010b24:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8010b28:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8010b2a:	887b      	ldrh	r3, [r7, #2]
 8010b2c:	f003 0301 	and.w	r3, r3, #1
 8010b30:	2b00      	cmp	r3, #0
 8010b32:	d003      	beq.n	8010b3c <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8010b34:	68fb      	ldr	r3, [r7, #12]
 8010b36:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8010b3a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8010b3c:	887b      	ldrh	r3, [r7, #2]
 8010b3e:	f003 0302 	and.w	r3, r3, #2
 8010b42:	2b00      	cmp	r3, #0
 8010b44:	d003      	beq.n	8010b4e <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8010b46:	68fb      	ldr	r3, [r7, #12]
 8010b48:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8010b4c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8010b4e:	887b      	ldrh	r3, [r7, #2]
 8010b50:	2b10      	cmp	r3, #16
 8010b52:	d103      	bne.n	8010b5c <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8010b54:	68fb      	ldr	r3, [r7, #12]
 8010b56:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8010b5a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8010b5c:	887b      	ldrh	r3, [r7, #2]
 8010b5e:	2b20      	cmp	r3, #32
 8010b60:	d133      	bne.n	8010bca <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8010b62:	68fb      	ldr	r3, [r7, #12]
 8010b64:	f043 0320 	orr.w	r3, r3, #32
 8010b68:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8010b6a:	e02e      	b.n	8010bca <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8010b6c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010b70:	2b00      	cmp	r3, #0
 8010b72:	da03      	bge.n	8010b7c <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8010b74:	68fb      	ldr	r3, [r7, #12]
 8010b76:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8010b7a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8010b7c:	887b      	ldrh	r3, [r7, #2]
 8010b7e:	f003 0301 	and.w	r3, r3, #1
 8010b82:	2b00      	cmp	r3, #0
 8010b84:	d003      	beq.n	8010b8e <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8010b86:	68fb      	ldr	r3, [r7, #12]
 8010b88:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8010b8c:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8010b8e:	887b      	ldrh	r3, [r7, #2]
 8010b90:	f003 0302 	and.w	r3, r3, #2
 8010b94:	2b00      	cmp	r3, #0
 8010b96:	d003      	beq.n	8010ba0 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8010b98:	68fb      	ldr	r3, [r7, #12]
 8010b9a:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8010b9e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8010ba0:	887b      	ldrh	r3, [r7, #2]
 8010ba2:	2b10      	cmp	r3, #16
 8010ba4:	d103      	bne.n	8010bae <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8010ba6:	68fb      	ldr	r3, [r7, #12]
 8010ba8:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8010bac:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8010bae:	887b      	ldrh	r3, [r7, #2]
 8010bb0:	2b20      	cmp	r3, #32
 8010bb2:	d103      	bne.n	8010bbc <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8010bb4:	68fb      	ldr	r3, [r7, #12]
 8010bb6:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8010bba:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8010bbc:	887b      	ldrh	r3, [r7, #2]
 8010bbe:	2b40      	cmp	r3, #64	@ 0x40
 8010bc0:	d103      	bne.n	8010bca <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8010bc2:	68fb      	ldr	r3, [r7, #12]
 8010bc4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010bc8:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8010bca:	687b      	ldr	r3, [r7, #4]
 8010bcc:	681b      	ldr	r3, [r3, #0]
 8010bce:	6819      	ldr	r1, [r3, #0]
 8010bd0:	687b      	ldr	r3, [r7, #4]
 8010bd2:	681b      	ldr	r3, [r3, #0]
 8010bd4:	68fa      	ldr	r2, [r7, #12]
 8010bd6:	430a      	orrs	r2, r1
 8010bd8:	601a      	str	r2, [r3, #0]
}
 8010bda:	bf00      	nop
 8010bdc:	3714      	adds	r7, #20
 8010bde:	46bd      	mov	sp, r7
 8010be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010be4:	4770      	bx	lr
 8010be6:	bf00      	nop
 8010be8:	0800f20f 	.word	0x0800f20f
 8010bec:	0800f631 	.word	0x0800f631
 8010bf0:	0800f3e5 	.word	0x0800f3e5

08010bf4 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8010bf4:	b480      	push	{r7}
 8010bf6:	b085      	sub	sp, #20
 8010bf8:	af00      	add	r7, sp, #0
 8010bfa:	6078      	str	r0, [r7, #4]
 8010bfc:	460b      	mov	r3, r1
 8010bfe:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8010c00:	2300      	movs	r3, #0
 8010c02:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8010c04:	887b      	ldrh	r3, [r7, #2]
 8010c06:	f003 0301 	and.w	r3, r3, #1
 8010c0a:	2b00      	cmp	r3, #0
 8010c0c:	d00f      	beq.n	8010c2e <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8010c0e:	68fb      	ldr	r3, [r7, #12]
 8010c10:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8010c14:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8010c16:	687b      	ldr	r3, [r7, #4]
 8010c18:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8010c1c:	b2db      	uxtb	r3, r3
 8010c1e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8010c22:	2b28      	cmp	r3, #40	@ 0x28
 8010c24:	d003      	beq.n	8010c2e <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8010c26:	68fb      	ldr	r3, [r7, #12]
 8010c28:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8010c2c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8010c2e:	887b      	ldrh	r3, [r7, #2]
 8010c30:	f003 0302 	and.w	r3, r3, #2
 8010c34:	2b00      	cmp	r3, #0
 8010c36:	d00f      	beq.n	8010c58 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8010c38:	68fb      	ldr	r3, [r7, #12]
 8010c3a:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8010c3e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8010c40:	687b      	ldr	r3, [r7, #4]
 8010c42:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8010c46:	b2db      	uxtb	r3, r3
 8010c48:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8010c4c:	2b28      	cmp	r3, #40	@ 0x28
 8010c4e:	d003      	beq.n	8010c58 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8010c50:	68fb      	ldr	r3, [r7, #12]
 8010c52:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8010c56:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8010c58:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010c5c:	2b00      	cmp	r3, #0
 8010c5e:	da03      	bge.n	8010c68 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8010c60:	68fb      	ldr	r3, [r7, #12]
 8010c62:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8010c66:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8010c68:	887b      	ldrh	r3, [r7, #2]
 8010c6a:	2b10      	cmp	r3, #16
 8010c6c:	d103      	bne.n	8010c76 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8010c6e:	68fb      	ldr	r3, [r7, #12]
 8010c70:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8010c74:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8010c76:	887b      	ldrh	r3, [r7, #2]
 8010c78:	2b20      	cmp	r3, #32
 8010c7a:	d103      	bne.n	8010c84 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8010c7c:	68fb      	ldr	r3, [r7, #12]
 8010c7e:	f043 0320 	orr.w	r3, r3, #32
 8010c82:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8010c84:	887b      	ldrh	r3, [r7, #2]
 8010c86:	2b40      	cmp	r3, #64	@ 0x40
 8010c88:	d103      	bne.n	8010c92 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8010c8a:	68fb      	ldr	r3, [r7, #12]
 8010c8c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010c90:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8010c92:	687b      	ldr	r3, [r7, #4]
 8010c94:	681b      	ldr	r3, [r3, #0]
 8010c96:	6819      	ldr	r1, [r3, #0]
 8010c98:	68fb      	ldr	r3, [r7, #12]
 8010c9a:	43da      	mvns	r2, r3
 8010c9c:	687b      	ldr	r3, [r7, #4]
 8010c9e:	681b      	ldr	r3, [r3, #0]
 8010ca0:	400a      	ands	r2, r1
 8010ca2:	601a      	str	r2, [r3, #0]
}
 8010ca4:	bf00      	nop
 8010ca6:	3714      	adds	r7, #20
 8010ca8:	46bd      	mov	sp, r7
 8010caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cae:	4770      	bx	lr

08010cb0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8010cb0:	b480      	push	{r7}
 8010cb2:	b083      	sub	sp, #12
 8010cb4:	af00      	add	r7, sp, #0
 8010cb6:	6078      	str	r0, [r7, #4]
 8010cb8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8010cba:	687b      	ldr	r3, [r7, #4]
 8010cbc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8010cc0:	b2db      	uxtb	r3, r3
 8010cc2:	2b20      	cmp	r3, #32
 8010cc4:	d138      	bne.n	8010d38 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8010cc6:	687b      	ldr	r3, [r7, #4]
 8010cc8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8010ccc:	2b01      	cmp	r3, #1
 8010cce:	d101      	bne.n	8010cd4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8010cd0:	2302      	movs	r3, #2
 8010cd2:	e032      	b.n	8010d3a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8010cd4:	687b      	ldr	r3, [r7, #4]
 8010cd6:	2201      	movs	r2, #1
 8010cd8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8010cdc:	687b      	ldr	r3, [r7, #4]
 8010cde:	2224      	movs	r2, #36	@ 0x24
 8010ce0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8010ce4:	687b      	ldr	r3, [r7, #4]
 8010ce6:	681b      	ldr	r3, [r3, #0]
 8010ce8:	681a      	ldr	r2, [r3, #0]
 8010cea:	687b      	ldr	r3, [r7, #4]
 8010cec:	681b      	ldr	r3, [r3, #0]
 8010cee:	f022 0201 	bic.w	r2, r2, #1
 8010cf2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8010cf4:	687b      	ldr	r3, [r7, #4]
 8010cf6:	681b      	ldr	r3, [r3, #0]
 8010cf8:	681a      	ldr	r2, [r3, #0]
 8010cfa:	687b      	ldr	r3, [r7, #4]
 8010cfc:	681b      	ldr	r3, [r3, #0]
 8010cfe:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8010d02:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8010d04:	687b      	ldr	r3, [r7, #4]
 8010d06:	681b      	ldr	r3, [r3, #0]
 8010d08:	6819      	ldr	r1, [r3, #0]
 8010d0a:	687b      	ldr	r3, [r7, #4]
 8010d0c:	681b      	ldr	r3, [r3, #0]
 8010d0e:	683a      	ldr	r2, [r7, #0]
 8010d10:	430a      	orrs	r2, r1
 8010d12:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8010d14:	687b      	ldr	r3, [r7, #4]
 8010d16:	681b      	ldr	r3, [r3, #0]
 8010d18:	681a      	ldr	r2, [r3, #0]
 8010d1a:	687b      	ldr	r3, [r7, #4]
 8010d1c:	681b      	ldr	r3, [r3, #0]
 8010d1e:	f042 0201 	orr.w	r2, r2, #1
 8010d22:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8010d24:	687b      	ldr	r3, [r7, #4]
 8010d26:	2220      	movs	r2, #32
 8010d28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8010d2c:	687b      	ldr	r3, [r7, #4]
 8010d2e:	2200      	movs	r2, #0
 8010d30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8010d34:	2300      	movs	r3, #0
 8010d36:	e000      	b.n	8010d3a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8010d38:	2302      	movs	r3, #2
  }
}
 8010d3a:	4618      	mov	r0, r3
 8010d3c:	370c      	adds	r7, #12
 8010d3e:	46bd      	mov	sp, r7
 8010d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d44:	4770      	bx	lr

08010d46 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8010d46:	b480      	push	{r7}
 8010d48:	b085      	sub	sp, #20
 8010d4a:	af00      	add	r7, sp, #0
 8010d4c:	6078      	str	r0, [r7, #4]
 8010d4e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8010d50:	687b      	ldr	r3, [r7, #4]
 8010d52:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8010d56:	b2db      	uxtb	r3, r3
 8010d58:	2b20      	cmp	r3, #32
 8010d5a:	d139      	bne.n	8010dd0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8010d5c:	687b      	ldr	r3, [r7, #4]
 8010d5e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8010d62:	2b01      	cmp	r3, #1
 8010d64:	d101      	bne.n	8010d6a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8010d66:	2302      	movs	r3, #2
 8010d68:	e033      	b.n	8010dd2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8010d6a:	687b      	ldr	r3, [r7, #4]
 8010d6c:	2201      	movs	r2, #1
 8010d6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8010d72:	687b      	ldr	r3, [r7, #4]
 8010d74:	2224      	movs	r2, #36	@ 0x24
 8010d76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8010d7a:	687b      	ldr	r3, [r7, #4]
 8010d7c:	681b      	ldr	r3, [r3, #0]
 8010d7e:	681a      	ldr	r2, [r3, #0]
 8010d80:	687b      	ldr	r3, [r7, #4]
 8010d82:	681b      	ldr	r3, [r3, #0]
 8010d84:	f022 0201 	bic.w	r2, r2, #1
 8010d88:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8010d8a:	687b      	ldr	r3, [r7, #4]
 8010d8c:	681b      	ldr	r3, [r3, #0]
 8010d8e:	681b      	ldr	r3, [r3, #0]
 8010d90:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8010d92:	68fb      	ldr	r3, [r7, #12]
 8010d94:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8010d98:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8010d9a:	683b      	ldr	r3, [r7, #0]
 8010d9c:	021b      	lsls	r3, r3, #8
 8010d9e:	68fa      	ldr	r2, [r7, #12]
 8010da0:	4313      	orrs	r3, r2
 8010da2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8010da4:	687b      	ldr	r3, [r7, #4]
 8010da6:	681b      	ldr	r3, [r3, #0]
 8010da8:	68fa      	ldr	r2, [r7, #12]
 8010daa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8010dac:	687b      	ldr	r3, [r7, #4]
 8010dae:	681b      	ldr	r3, [r3, #0]
 8010db0:	681a      	ldr	r2, [r3, #0]
 8010db2:	687b      	ldr	r3, [r7, #4]
 8010db4:	681b      	ldr	r3, [r3, #0]
 8010db6:	f042 0201 	orr.w	r2, r2, #1
 8010dba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8010dbc:	687b      	ldr	r3, [r7, #4]
 8010dbe:	2220      	movs	r2, #32
 8010dc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8010dc4:	687b      	ldr	r3, [r7, #4]
 8010dc6:	2200      	movs	r2, #0
 8010dc8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8010dcc:	2300      	movs	r3, #0
 8010dce:	e000      	b.n	8010dd2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8010dd0:	2302      	movs	r3, #2
  }
}
 8010dd2:	4618      	mov	r0, r3
 8010dd4:	3714      	adds	r7, #20
 8010dd6:	46bd      	mov	sp, r7
 8010dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ddc:	4770      	bx	lr
	...

08010de0 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C5 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C5 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8010de0:	b480      	push	{r7}
 8010de2:	b085      	sub	sp, #20
 8010de4:	af00      	add	r7, sp, #0
 8010de6:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8010de8:	4b0d      	ldr	r3, [pc, #52]	@ (8010e20 <HAL_I2CEx_EnableFastModePlus+0x40>)
 8010dea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8010dee:	4a0c      	ldr	r2, [pc, #48]	@ (8010e20 <HAL_I2CEx_EnableFastModePlus+0x40>)
 8010df0:	f043 0302 	orr.w	r3, r3, #2
 8010df4:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8010df8:	4b09      	ldr	r3, [pc, #36]	@ (8010e20 <HAL_I2CEx_EnableFastModePlus+0x40>)
 8010dfa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8010dfe:	f003 0302 	and.w	r3, r3, #2
 8010e02:	60fb      	str	r3, [r7, #12]
 8010e04:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
 8010e06:	4b07      	ldr	r3, [pc, #28]	@ (8010e24 <HAL_I2CEx_EnableFastModePlus+0x44>)
 8010e08:	685a      	ldr	r2, [r3, #4]
 8010e0a:	4906      	ldr	r1, [pc, #24]	@ (8010e24 <HAL_I2CEx_EnableFastModePlus+0x44>)
 8010e0c:	687b      	ldr	r3, [r7, #4]
 8010e0e:	4313      	orrs	r3, r2
 8010e10:	604b      	str	r3, [r1, #4]
}
 8010e12:	bf00      	nop
 8010e14:	3714      	adds	r7, #20
 8010e16:	46bd      	mov	sp, r7
 8010e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e1c:	4770      	bx	lr
 8010e1e:	bf00      	nop
 8010e20:	58024400 	.word	0x58024400
 8010e24:	58000400 	.word	0x58000400

08010e28 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8010e28:	b580      	push	{r7, lr}
 8010e2a:	b084      	sub	sp, #16
 8010e2c:	af00      	add	r7, sp, #0
 8010e2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8010e30:	4b19      	ldr	r3, [pc, #100]	@ (8010e98 <HAL_PWREx_ConfigSupply+0x70>)
 8010e32:	68db      	ldr	r3, [r3, #12]
 8010e34:	f003 0304 	and.w	r3, r3, #4
 8010e38:	2b04      	cmp	r3, #4
 8010e3a:	d00a      	beq.n	8010e52 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8010e3c:	4b16      	ldr	r3, [pc, #88]	@ (8010e98 <HAL_PWREx_ConfigSupply+0x70>)
 8010e3e:	68db      	ldr	r3, [r3, #12]
 8010e40:	f003 0307 	and.w	r3, r3, #7
 8010e44:	687a      	ldr	r2, [r7, #4]
 8010e46:	429a      	cmp	r2, r3
 8010e48:	d001      	beq.n	8010e4e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8010e4a:	2301      	movs	r3, #1
 8010e4c:	e01f      	b.n	8010e8e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8010e4e:	2300      	movs	r3, #0
 8010e50:	e01d      	b.n	8010e8e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8010e52:	4b11      	ldr	r3, [pc, #68]	@ (8010e98 <HAL_PWREx_ConfigSupply+0x70>)
 8010e54:	68db      	ldr	r3, [r3, #12]
 8010e56:	f023 0207 	bic.w	r2, r3, #7
 8010e5a:	490f      	ldr	r1, [pc, #60]	@ (8010e98 <HAL_PWREx_ConfigSupply+0x70>)
 8010e5c:	687b      	ldr	r3, [r7, #4]
 8010e5e:	4313      	orrs	r3, r2
 8010e60:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8010e62:	f7f8 f9e7 	bl	8009234 <HAL_GetTick>
 8010e66:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8010e68:	e009      	b.n	8010e7e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8010e6a:	f7f8 f9e3 	bl	8009234 <HAL_GetTick>
 8010e6e:	4602      	mov	r2, r0
 8010e70:	68fb      	ldr	r3, [r7, #12]
 8010e72:	1ad3      	subs	r3, r2, r3
 8010e74:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8010e78:	d901      	bls.n	8010e7e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8010e7a:	2301      	movs	r3, #1
 8010e7c:	e007      	b.n	8010e8e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8010e7e:	4b06      	ldr	r3, [pc, #24]	@ (8010e98 <HAL_PWREx_ConfigSupply+0x70>)
 8010e80:	685b      	ldr	r3, [r3, #4]
 8010e82:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8010e86:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8010e8a:	d1ee      	bne.n	8010e6a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8010e8c:	2300      	movs	r3, #0
}
 8010e8e:	4618      	mov	r0, r3
 8010e90:	3710      	adds	r7, #16
 8010e92:	46bd      	mov	sp, r7
 8010e94:	bd80      	pop	{r7, pc}
 8010e96:	bf00      	nop
 8010e98:	58024800 	.word	0x58024800

08010e9c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8010e9c:	b580      	push	{r7, lr}
 8010e9e:	b08c      	sub	sp, #48	@ 0x30
 8010ea0:	af00      	add	r7, sp, #0
 8010ea2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8010ea4:	687b      	ldr	r3, [r7, #4]
 8010ea6:	2b00      	cmp	r3, #0
 8010ea8:	d101      	bne.n	8010eae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8010eaa:	2301      	movs	r3, #1
 8010eac:	e3c8      	b.n	8011640 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8010eae:	687b      	ldr	r3, [r7, #4]
 8010eb0:	681b      	ldr	r3, [r3, #0]
 8010eb2:	f003 0301 	and.w	r3, r3, #1
 8010eb6:	2b00      	cmp	r3, #0
 8010eb8:	f000 8087 	beq.w	8010fca <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8010ebc:	4b88      	ldr	r3, [pc, #544]	@ (80110e0 <HAL_RCC_OscConfig+0x244>)
 8010ebe:	691b      	ldr	r3, [r3, #16]
 8010ec0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8010ec4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8010ec6:	4b86      	ldr	r3, [pc, #536]	@ (80110e0 <HAL_RCC_OscConfig+0x244>)
 8010ec8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010eca:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8010ecc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010ece:	2b10      	cmp	r3, #16
 8010ed0:	d007      	beq.n	8010ee2 <HAL_RCC_OscConfig+0x46>
 8010ed2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010ed4:	2b18      	cmp	r3, #24
 8010ed6:	d110      	bne.n	8010efa <HAL_RCC_OscConfig+0x5e>
 8010ed8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010eda:	f003 0303 	and.w	r3, r3, #3
 8010ede:	2b02      	cmp	r3, #2
 8010ee0:	d10b      	bne.n	8010efa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8010ee2:	4b7f      	ldr	r3, [pc, #508]	@ (80110e0 <HAL_RCC_OscConfig+0x244>)
 8010ee4:	681b      	ldr	r3, [r3, #0]
 8010ee6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8010eea:	2b00      	cmp	r3, #0
 8010eec:	d06c      	beq.n	8010fc8 <HAL_RCC_OscConfig+0x12c>
 8010eee:	687b      	ldr	r3, [r7, #4]
 8010ef0:	685b      	ldr	r3, [r3, #4]
 8010ef2:	2b00      	cmp	r3, #0
 8010ef4:	d168      	bne.n	8010fc8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8010ef6:	2301      	movs	r3, #1
 8010ef8:	e3a2      	b.n	8011640 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8010efa:	687b      	ldr	r3, [r7, #4]
 8010efc:	685b      	ldr	r3, [r3, #4]
 8010efe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010f02:	d106      	bne.n	8010f12 <HAL_RCC_OscConfig+0x76>
 8010f04:	4b76      	ldr	r3, [pc, #472]	@ (80110e0 <HAL_RCC_OscConfig+0x244>)
 8010f06:	681b      	ldr	r3, [r3, #0]
 8010f08:	4a75      	ldr	r2, [pc, #468]	@ (80110e0 <HAL_RCC_OscConfig+0x244>)
 8010f0a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8010f0e:	6013      	str	r3, [r2, #0]
 8010f10:	e02e      	b.n	8010f70 <HAL_RCC_OscConfig+0xd4>
 8010f12:	687b      	ldr	r3, [r7, #4]
 8010f14:	685b      	ldr	r3, [r3, #4]
 8010f16:	2b00      	cmp	r3, #0
 8010f18:	d10c      	bne.n	8010f34 <HAL_RCC_OscConfig+0x98>
 8010f1a:	4b71      	ldr	r3, [pc, #452]	@ (80110e0 <HAL_RCC_OscConfig+0x244>)
 8010f1c:	681b      	ldr	r3, [r3, #0]
 8010f1e:	4a70      	ldr	r2, [pc, #448]	@ (80110e0 <HAL_RCC_OscConfig+0x244>)
 8010f20:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8010f24:	6013      	str	r3, [r2, #0]
 8010f26:	4b6e      	ldr	r3, [pc, #440]	@ (80110e0 <HAL_RCC_OscConfig+0x244>)
 8010f28:	681b      	ldr	r3, [r3, #0]
 8010f2a:	4a6d      	ldr	r2, [pc, #436]	@ (80110e0 <HAL_RCC_OscConfig+0x244>)
 8010f2c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8010f30:	6013      	str	r3, [r2, #0]
 8010f32:	e01d      	b.n	8010f70 <HAL_RCC_OscConfig+0xd4>
 8010f34:	687b      	ldr	r3, [r7, #4]
 8010f36:	685b      	ldr	r3, [r3, #4]
 8010f38:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8010f3c:	d10c      	bne.n	8010f58 <HAL_RCC_OscConfig+0xbc>
 8010f3e:	4b68      	ldr	r3, [pc, #416]	@ (80110e0 <HAL_RCC_OscConfig+0x244>)
 8010f40:	681b      	ldr	r3, [r3, #0]
 8010f42:	4a67      	ldr	r2, [pc, #412]	@ (80110e0 <HAL_RCC_OscConfig+0x244>)
 8010f44:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8010f48:	6013      	str	r3, [r2, #0]
 8010f4a:	4b65      	ldr	r3, [pc, #404]	@ (80110e0 <HAL_RCC_OscConfig+0x244>)
 8010f4c:	681b      	ldr	r3, [r3, #0]
 8010f4e:	4a64      	ldr	r2, [pc, #400]	@ (80110e0 <HAL_RCC_OscConfig+0x244>)
 8010f50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8010f54:	6013      	str	r3, [r2, #0]
 8010f56:	e00b      	b.n	8010f70 <HAL_RCC_OscConfig+0xd4>
 8010f58:	4b61      	ldr	r3, [pc, #388]	@ (80110e0 <HAL_RCC_OscConfig+0x244>)
 8010f5a:	681b      	ldr	r3, [r3, #0]
 8010f5c:	4a60      	ldr	r2, [pc, #384]	@ (80110e0 <HAL_RCC_OscConfig+0x244>)
 8010f5e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8010f62:	6013      	str	r3, [r2, #0]
 8010f64:	4b5e      	ldr	r3, [pc, #376]	@ (80110e0 <HAL_RCC_OscConfig+0x244>)
 8010f66:	681b      	ldr	r3, [r3, #0]
 8010f68:	4a5d      	ldr	r2, [pc, #372]	@ (80110e0 <HAL_RCC_OscConfig+0x244>)
 8010f6a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8010f6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8010f70:	687b      	ldr	r3, [r7, #4]
 8010f72:	685b      	ldr	r3, [r3, #4]
 8010f74:	2b00      	cmp	r3, #0
 8010f76:	d013      	beq.n	8010fa0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010f78:	f7f8 f95c 	bl	8009234 <HAL_GetTick>
 8010f7c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8010f7e:	e008      	b.n	8010f92 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8010f80:	f7f8 f958 	bl	8009234 <HAL_GetTick>
 8010f84:	4602      	mov	r2, r0
 8010f86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010f88:	1ad3      	subs	r3, r2, r3
 8010f8a:	2b64      	cmp	r3, #100	@ 0x64
 8010f8c:	d901      	bls.n	8010f92 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8010f8e:	2303      	movs	r3, #3
 8010f90:	e356      	b.n	8011640 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8010f92:	4b53      	ldr	r3, [pc, #332]	@ (80110e0 <HAL_RCC_OscConfig+0x244>)
 8010f94:	681b      	ldr	r3, [r3, #0]
 8010f96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8010f9a:	2b00      	cmp	r3, #0
 8010f9c:	d0f0      	beq.n	8010f80 <HAL_RCC_OscConfig+0xe4>
 8010f9e:	e014      	b.n	8010fca <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010fa0:	f7f8 f948 	bl	8009234 <HAL_GetTick>
 8010fa4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8010fa6:	e008      	b.n	8010fba <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8010fa8:	f7f8 f944 	bl	8009234 <HAL_GetTick>
 8010fac:	4602      	mov	r2, r0
 8010fae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010fb0:	1ad3      	subs	r3, r2, r3
 8010fb2:	2b64      	cmp	r3, #100	@ 0x64
 8010fb4:	d901      	bls.n	8010fba <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8010fb6:	2303      	movs	r3, #3
 8010fb8:	e342      	b.n	8011640 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8010fba:	4b49      	ldr	r3, [pc, #292]	@ (80110e0 <HAL_RCC_OscConfig+0x244>)
 8010fbc:	681b      	ldr	r3, [r3, #0]
 8010fbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8010fc2:	2b00      	cmp	r3, #0
 8010fc4:	d1f0      	bne.n	8010fa8 <HAL_RCC_OscConfig+0x10c>
 8010fc6:	e000      	b.n	8010fca <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8010fc8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8010fca:	687b      	ldr	r3, [r7, #4]
 8010fcc:	681b      	ldr	r3, [r3, #0]
 8010fce:	f003 0302 	and.w	r3, r3, #2
 8010fd2:	2b00      	cmp	r3, #0
 8010fd4:	f000 808c 	beq.w	80110f0 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8010fd8:	4b41      	ldr	r3, [pc, #260]	@ (80110e0 <HAL_RCC_OscConfig+0x244>)
 8010fda:	691b      	ldr	r3, [r3, #16]
 8010fdc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8010fe0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8010fe2:	4b3f      	ldr	r3, [pc, #252]	@ (80110e0 <HAL_RCC_OscConfig+0x244>)
 8010fe4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010fe6:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8010fe8:	6a3b      	ldr	r3, [r7, #32]
 8010fea:	2b00      	cmp	r3, #0
 8010fec:	d007      	beq.n	8010ffe <HAL_RCC_OscConfig+0x162>
 8010fee:	6a3b      	ldr	r3, [r7, #32]
 8010ff0:	2b18      	cmp	r3, #24
 8010ff2:	d137      	bne.n	8011064 <HAL_RCC_OscConfig+0x1c8>
 8010ff4:	69fb      	ldr	r3, [r7, #28]
 8010ff6:	f003 0303 	and.w	r3, r3, #3
 8010ffa:	2b00      	cmp	r3, #0
 8010ffc:	d132      	bne.n	8011064 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8010ffe:	4b38      	ldr	r3, [pc, #224]	@ (80110e0 <HAL_RCC_OscConfig+0x244>)
 8011000:	681b      	ldr	r3, [r3, #0]
 8011002:	f003 0304 	and.w	r3, r3, #4
 8011006:	2b00      	cmp	r3, #0
 8011008:	d005      	beq.n	8011016 <HAL_RCC_OscConfig+0x17a>
 801100a:	687b      	ldr	r3, [r7, #4]
 801100c:	68db      	ldr	r3, [r3, #12]
 801100e:	2b00      	cmp	r3, #0
 8011010:	d101      	bne.n	8011016 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8011012:	2301      	movs	r3, #1
 8011014:	e314      	b.n	8011640 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8011016:	4b32      	ldr	r3, [pc, #200]	@ (80110e0 <HAL_RCC_OscConfig+0x244>)
 8011018:	681b      	ldr	r3, [r3, #0]
 801101a:	f023 0219 	bic.w	r2, r3, #25
 801101e:	687b      	ldr	r3, [r7, #4]
 8011020:	68db      	ldr	r3, [r3, #12]
 8011022:	492f      	ldr	r1, [pc, #188]	@ (80110e0 <HAL_RCC_OscConfig+0x244>)
 8011024:	4313      	orrs	r3, r2
 8011026:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011028:	f7f8 f904 	bl	8009234 <HAL_GetTick>
 801102c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801102e:	e008      	b.n	8011042 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8011030:	f7f8 f900 	bl	8009234 <HAL_GetTick>
 8011034:	4602      	mov	r2, r0
 8011036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011038:	1ad3      	subs	r3, r2, r3
 801103a:	2b02      	cmp	r3, #2
 801103c:	d901      	bls.n	8011042 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 801103e:	2303      	movs	r3, #3
 8011040:	e2fe      	b.n	8011640 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8011042:	4b27      	ldr	r3, [pc, #156]	@ (80110e0 <HAL_RCC_OscConfig+0x244>)
 8011044:	681b      	ldr	r3, [r3, #0]
 8011046:	f003 0304 	and.w	r3, r3, #4
 801104a:	2b00      	cmp	r3, #0
 801104c:	d0f0      	beq.n	8011030 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801104e:	4b24      	ldr	r3, [pc, #144]	@ (80110e0 <HAL_RCC_OscConfig+0x244>)
 8011050:	685b      	ldr	r3, [r3, #4]
 8011052:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8011056:	687b      	ldr	r3, [r7, #4]
 8011058:	691b      	ldr	r3, [r3, #16]
 801105a:	061b      	lsls	r3, r3, #24
 801105c:	4920      	ldr	r1, [pc, #128]	@ (80110e0 <HAL_RCC_OscConfig+0x244>)
 801105e:	4313      	orrs	r3, r2
 8011060:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8011062:	e045      	b.n	80110f0 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8011064:	687b      	ldr	r3, [r7, #4]
 8011066:	68db      	ldr	r3, [r3, #12]
 8011068:	2b00      	cmp	r3, #0
 801106a:	d026      	beq.n	80110ba <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 801106c:	4b1c      	ldr	r3, [pc, #112]	@ (80110e0 <HAL_RCC_OscConfig+0x244>)
 801106e:	681b      	ldr	r3, [r3, #0]
 8011070:	f023 0219 	bic.w	r2, r3, #25
 8011074:	687b      	ldr	r3, [r7, #4]
 8011076:	68db      	ldr	r3, [r3, #12]
 8011078:	4919      	ldr	r1, [pc, #100]	@ (80110e0 <HAL_RCC_OscConfig+0x244>)
 801107a:	4313      	orrs	r3, r2
 801107c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801107e:	f7f8 f8d9 	bl	8009234 <HAL_GetTick>
 8011082:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8011084:	e008      	b.n	8011098 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8011086:	f7f8 f8d5 	bl	8009234 <HAL_GetTick>
 801108a:	4602      	mov	r2, r0
 801108c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801108e:	1ad3      	subs	r3, r2, r3
 8011090:	2b02      	cmp	r3, #2
 8011092:	d901      	bls.n	8011098 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8011094:	2303      	movs	r3, #3
 8011096:	e2d3      	b.n	8011640 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8011098:	4b11      	ldr	r3, [pc, #68]	@ (80110e0 <HAL_RCC_OscConfig+0x244>)
 801109a:	681b      	ldr	r3, [r3, #0]
 801109c:	f003 0304 	and.w	r3, r3, #4
 80110a0:	2b00      	cmp	r3, #0
 80110a2:	d0f0      	beq.n	8011086 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80110a4:	4b0e      	ldr	r3, [pc, #56]	@ (80110e0 <HAL_RCC_OscConfig+0x244>)
 80110a6:	685b      	ldr	r3, [r3, #4]
 80110a8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80110ac:	687b      	ldr	r3, [r7, #4]
 80110ae:	691b      	ldr	r3, [r3, #16]
 80110b0:	061b      	lsls	r3, r3, #24
 80110b2:	490b      	ldr	r1, [pc, #44]	@ (80110e0 <HAL_RCC_OscConfig+0x244>)
 80110b4:	4313      	orrs	r3, r2
 80110b6:	604b      	str	r3, [r1, #4]
 80110b8:	e01a      	b.n	80110f0 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80110ba:	4b09      	ldr	r3, [pc, #36]	@ (80110e0 <HAL_RCC_OscConfig+0x244>)
 80110bc:	681b      	ldr	r3, [r3, #0]
 80110be:	4a08      	ldr	r2, [pc, #32]	@ (80110e0 <HAL_RCC_OscConfig+0x244>)
 80110c0:	f023 0301 	bic.w	r3, r3, #1
 80110c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80110c6:	f7f8 f8b5 	bl	8009234 <HAL_GetTick>
 80110ca:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80110cc:	e00a      	b.n	80110e4 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80110ce:	f7f8 f8b1 	bl	8009234 <HAL_GetTick>
 80110d2:	4602      	mov	r2, r0
 80110d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80110d6:	1ad3      	subs	r3, r2, r3
 80110d8:	2b02      	cmp	r3, #2
 80110da:	d903      	bls.n	80110e4 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80110dc:	2303      	movs	r3, #3
 80110de:	e2af      	b.n	8011640 <HAL_RCC_OscConfig+0x7a4>
 80110e0:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80110e4:	4b96      	ldr	r3, [pc, #600]	@ (8011340 <HAL_RCC_OscConfig+0x4a4>)
 80110e6:	681b      	ldr	r3, [r3, #0]
 80110e8:	f003 0304 	and.w	r3, r3, #4
 80110ec:	2b00      	cmp	r3, #0
 80110ee:	d1ee      	bne.n	80110ce <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80110f0:	687b      	ldr	r3, [r7, #4]
 80110f2:	681b      	ldr	r3, [r3, #0]
 80110f4:	f003 0310 	and.w	r3, r3, #16
 80110f8:	2b00      	cmp	r3, #0
 80110fa:	d06a      	beq.n	80111d2 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80110fc:	4b90      	ldr	r3, [pc, #576]	@ (8011340 <HAL_RCC_OscConfig+0x4a4>)
 80110fe:	691b      	ldr	r3, [r3, #16]
 8011100:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8011104:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8011106:	4b8e      	ldr	r3, [pc, #568]	@ (8011340 <HAL_RCC_OscConfig+0x4a4>)
 8011108:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801110a:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 801110c:	69bb      	ldr	r3, [r7, #24]
 801110e:	2b08      	cmp	r3, #8
 8011110:	d007      	beq.n	8011122 <HAL_RCC_OscConfig+0x286>
 8011112:	69bb      	ldr	r3, [r7, #24]
 8011114:	2b18      	cmp	r3, #24
 8011116:	d11b      	bne.n	8011150 <HAL_RCC_OscConfig+0x2b4>
 8011118:	697b      	ldr	r3, [r7, #20]
 801111a:	f003 0303 	and.w	r3, r3, #3
 801111e:	2b01      	cmp	r3, #1
 8011120:	d116      	bne.n	8011150 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8011122:	4b87      	ldr	r3, [pc, #540]	@ (8011340 <HAL_RCC_OscConfig+0x4a4>)
 8011124:	681b      	ldr	r3, [r3, #0]
 8011126:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801112a:	2b00      	cmp	r3, #0
 801112c:	d005      	beq.n	801113a <HAL_RCC_OscConfig+0x29e>
 801112e:	687b      	ldr	r3, [r7, #4]
 8011130:	69db      	ldr	r3, [r3, #28]
 8011132:	2b80      	cmp	r3, #128	@ 0x80
 8011134:	d001      	beq.n	801113a <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8011136:	2301      	movs	r3, #1
 8011138:	e282      	b.n	8011640 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 801113a:	4b81      	ldr	r3, [pc, #516]	@ (8011340 <HAL_RCC_OscConfig+0x4a4>)
 801113c:	68db      	ldr	r3, [r3, #12]
 801113e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8011142:	687b      	ldr	r3, [r7, #4]
 8011144:	6a1b      	ldr	r3, [r3, #32]
 8011146:	061b      	lsls	r3, r3, #24
 8011148:	497d      	ldr	r1, [pc, #500]	@ (8011340 <HAL_RCC_OscConfig+0x4a4>)
 801114a:	4313      	orrs	r3, r2
 801114c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 801114e:	e040      	b.n	80111d2 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8011150:	687b      	ldr	r3, [r7, #4]
 8011152:	69db      	ldr	r3, [r3, #28]
 8011154:	2b00      	cmp	r3, #0
 8011156:	d023      	beq.n	80111a0 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8011158:	4b79      	ldr	r3, [pc, #484]	@ (8011340 <HAL_RCC_OscConfig+0x4a4>)
 801115a:	681b      	ldr	r3, [r3, #0]
 801115c:	4a78      	ldr	r2, [pc, #480]	@ (8011340 <HAL_RCC_OscConfig+0x4a4>)
 801115e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011162:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011164:	f7f8 f866 	bl	8009234 <HAL_GetTick>
 8011168:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 801116a:	e008      	b.n	801117e <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 801116c:	f7f8 f862 	bl	8009234 <HAL_GetTick>
 8011170:	4602      	mov	r2, r0
 8011172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011174:	1ad3      	subs	r3, r2, r3
 8011176:	2b02      	cmp	r3, #2
 8011178:	d901      	bls.n	801117e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 801117a:	2303      	movs	r3, #3
 801117c:	e260      	b.n	8011640 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 801117e:	4b70      	ldr	r3, [pc, #448]	@ (8011340 <HAL_RCC_OscConfig+0x4a4>)
 8011180:	681b      	ldr	r3, [r3, #0]
 8011182:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8011186:	2b00      	cmp	r3, #0
 8011188:	d0f0      	beq.n	801116c <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 801118a:	4b6d      	ldr	r3, [pc, #436]	@ (8011340 <HAL_RCC_OscConfig+0x4a4>)
 801118c:	68db      	ldr	r3, [r3, #12]
 801118e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8011192:	687b      	ldr	r3, [r7, #4]
 8011194:	6a1b      	ldr	r3, [r3, #32]
 8011196:	061b      	lsls	r3, r3, #24
 8011198:	4969      	ldr	r1, [pc, #420]	@ (8011340 <HAL_RCC_OscConfig+0x4a4>)
 801119a:	4313      	orrs	r3, r2
 801119c:	60cb      	str	r3, [r1, #12]
 801119e:	e018      	b.n	80111d2 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80111a0:	4b67      	ldr	r3, [pc, #412]	@ (8011340 <HAL_RCC_OscConfig+0x4a4>)
 80111a2:	681b      	ldr	r3, [r3, #0]
 80111a4:	4a66      	ldr	r2, [pc, #408]	@ (8011340 <HAL_RCC_OscConfig+0x4a4>)
 80111a6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80111aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80111ac:	f7f8 f842 	bl	8009234 <HAL_GetTick>
 80111b0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80111b2:	e008      	b.n	80111c6 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80111b4:	f7f8 f83e 	bl	8009234 <HAL_GetTick>
 80111b8:	4602      	mov	r2, r0
 80111ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80111bc:	1ad3      	subs	r3, r2, r3
 80111be:	2b02      	cmp	r3, #2
 80111c0:	d901      	bls.n	80111c6 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 80111c2:	2303      	movs	r3, #3
 80111c4:	e23c      	b.n	8011640 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80111c6:	4b5e      	ldr	r3, [pc, #376]	@ (8011340 <HAL_RCC_OscConfig+0x4a4>)
 80111c8:	681b      	ldr	r3, [r3, #0]
 80111ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80111ce:	2b00      	cmp	r3, #0
 80111d0:	d1f0      	bne.n	80111b4 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80111d2:	687b      	ldr	r3, [r7, #4]
 80111d4:	681b      	ldr	r3, [r3, #0]
 80111d6:	f003 0308 	and.w	r3, r3, #8
 80111da:	2b00      	cmp	r3, #0
 80111dc:	d036      	beq.n	801124c <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80111de:	687b      	ldr	r3, [r7, #4]
 80111e0:	695b      	ldr	r3, [r3, #20]
 80111e2:	2b00      	cmp	r3, #0
 80111e4:	d019      	beq.n	801121a <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80111e6:	4b56      	ldr	r3, [pc, #344]	@ (8011340 <HAL_RCC_OscConfig+0x4a4>)
 80111e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80111ea:	4a55      	ldr	r2, [pc, #340]	@ (8011340 <HAL_RCC_OscConfig+0x4a4>)
 80111ec:	f043 0301 	orr.w	r3, r3, #1
 80111f0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80111f2:	f7f8 f81f 	bl	8009234 <HAL_GetTick>
 80111f6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80111f8:	e008      	b.n	801120c <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80111fa:	f7f8 f81b 	bl	8009234 <HAL_GetTick>
 80111fe:	4602      	mov	r2, r0
 8011200:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011202:	1ad3      	subs	r3, r2, r3
 8011204:	2b02      	cmp	r3, #2
 8011206:	d901      	bls.n	801120c <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8011208:	2303      	movs	r3, #3
 801120a:	e219      	b.n	8011640 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 801120c:	4b4c      	ldr	r3, [pc, #304]	@ (8011340 <HAL_RCC_OscConfig+0x4a4>)
 801120e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011210:	f003 0302 	and.w	r3, r3, #2
 8011214:	2b00      	cmp	r3, #0
 8011216:	d0f0      	beq.n	80111fa <HAL_RCC_OscConfig+0x35e>
 8011218:	e018      	b.n	801124c <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 801121a:	4b49      	ldr	r3, [pc, #292]	@ (8011340 <HAL_RCC_OscConfig+0x4a4>)
 801121c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801121e:	4a48      	ldr	r2, [pc, #288]	@ (8011340 <HAL_RCC_OscConfig+0x4a4>)
 8011220:	f023 0301 	bic.w	r3, r3, #1
 8011224:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8011226:	f7f8 f805 	bl	8009234 <HAL_GetTick>
 801122a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 801122c:	e008      	b.n	8011240 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801122e:	f7f8 f801 	bl	8009234 <HAL_GetTick>
 8011232:	4602      	mov	r2, r0
 8011234:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011236:	1ad3      	subs	r3, r2, r3
 8011238:	2b02      	cmp	r3, #2
 801123a:	d901      	bls.n	8011240 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 801123c:	2303      	movs	r3, #3
 801123e:	e1ff      	b.n	8011640 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8011240:	4b3f      	ldr	r3, [pc, #252]	@ (8011340 <HAL_RCC_OscConfig+0x4a4>)
 8011242:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011244:	f003 0302 	and.w	r3, r3, #2
 8011248:	2b00      	cmp	r3, #0
 801124a:	d1f0      	bne.n	801122e <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 801124c:	687b      	ldr	r3, [r7, #4]
 801124e:	681b      	ldr	r3, [r3, #0]
 8011250:	f003 0320 	and.w	r3, r3, #32
 8011254:	2b00      	cmp	r3, #0
 8011256:	d036      	beq.n	80112c6 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8011258:	687b      	ldr	r3, [r7, #4]
 801125a:	699b      	ldr	r3, [r3, #24]
 801125c:	2b00      	cmp	r3, #0
 801125e:	d019      	beq.n	8011294 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8011260:	4b37      	ldr	r3, [pc, #220]	@ (8011340 <HAL_RCC_OscConfig+0x4a4>)
 8011262:	681b      	ldr	r3, [r3, #0]
 8011264:	4a36      	ldr	r2, [pc, #216]	@ (8011340 <HAL_RCC_OscConfig+0x4a4>)
 8011266:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 801126a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 801126c:	f7f7 ffe2 	bl	8009234 <HAL_GetTick>
 8011270:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8011272:	e008      	b.n	8011286 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8011274:	f7f7 ffde 	bl	8009234 <HAL_GetTick>
 8011278:	4602      	mov	r2, r0
 801127a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801127c:	1ad3      	subs	r3, r2, r3
 801127e:	2b02      	cmp	r3, #2
 8011280:	d901      	bls.n	8011286 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8011282:	2303      	movs	r3, #3
 8011284:	e1dc      	b.n	8011640 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8011286:	4b2e      	ldr	r3, [pc, #184]	@ (8011340 <HAL_RCC_OscConfig+0x4a4>)
 8011288:	681b      	ldr	r3, [r3, #0]
 801128a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801128e:	2b00      	cmp	r3, #0
 8011290:	d0f0      	beq.n	8011274 <HAL_RCC_OscConfig+0x3d8>
 8011292:	e018      	b.n	80112c6 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8011294:	4b2a      	ldr	r3, [pc, #168]	@ (8011340 <HAL_RCC_OscConfig+0x4a4>)
 8011296:	681b      	ldr	r3, [r3, #0]
 8011298:	4a29      	ldr	r2, [pc, #164]	@ (8011340 <HAL_RCC_OscConfig+0x4a4>)
 801129a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801129e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80112a0:	f7f7 ffc8 	bl	8009234 <HAL_GetTick>
 80112a4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80112a6:	e008      	b.n	80112ba <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80112a8:	f7f7 ffc4 	bl	8009234 <HAL_GetTick>
 80112ac:	4602      	mov	r2, r0
 80112ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80112b0:	1ad3      	subs	r3, r2, r3
 80112b2:	2b02      	cmp	r3, #2
 80112b4:	d901      	bls.n	80112ba <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 80112b6:	2303      	movs	r3, #3
 80112b8:	e1c2      	b.n	8011640 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80112ba:	4b21      	ldr	r3, [pc, #132]	@ (8011340 <HAL_RCC_OscConfig+0x4a4>)
 80112bc:	681b      	ldr	r3, [r3, #0]
 80112be:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80112c2:	2b00      	cmp	r3, #0
 80112c4:	d1f0      	bne.n	80112a8 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80112c6:	687b      	ldr	r3, [r7, #4]
 80112c8:	681b      	ldr	r3, [r3, #0]
 80112ca:	f003 0304 	and.w	r3, r3, #4
 80112ce:	2b00      	cmp	r3, #0
 80112d0:	f000 8086 	beq.w	80113e0 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80112d4:	4b1b      	ldr	r3, [pc, #108]	@ (8011344 <HAL_RCC_OscConfig+0x4a8>)
 80112d6:	681b      	ldr	r3, [r3, #0]
 80112d8:	4a1a      	ldr	r2, [pc, #104]	@ (8011344 <HAL_RCC_OscConfig+0x4a8>)
 80112da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80112de:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80112e0:	f7f7 ffa8 	bl	8009234 <HAL_GetTick>
 80112e4:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80112e6:	e008      	b.n	80112fa <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80112e8:	f7f7 ffa4 	bl	8009234 <HAL_GetTick>
 80112ec:	4602      	mov	r2, r0
 80112ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80112f0:	1ad3      	subs	r3, r2, r3
 80112f2:	2b64      	cmp	r3, #100	@ 0x64
 80112f4:	d901      	bls.n	80112fa <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 80112f6:	2303      	movs	r3, #3
 80112f8:	e1a2      	b.n	8011640 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80112fa:	4b12      	ldr	r3, [pc, #72]	@ (8011344 <HAL_RCC_OscConfig+0x4a8>)
 80112fc:	681b      	ldr	r3, [r3, #0]
 80112fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8011302:	2b00      	cmp	r3, #0
 8011304:	d0f0      	beq.n	80112e8 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8011306:	687b      	ldr	r3, [r7, #4]
 8011308:	689b      	ldr	r3, [r3, #8]
 801130a:	2b01      	cmp	r3, #1
 801130c:	d106      	bne.n	801131c <HAL_RCC_OscConfig+0x480>
 801130e:	4b0c      	ldr	r3, [pc, #48]	@ (8011340 <HAL_RCC_OscConfig+0x4a4>)
 8011310:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011312:	4a0b      	ldr	r2, [pc, #44]	@ (8011340 <HAL_RCC_OscConfig+0x4a4>)
 8011314:	f043 0301 	orr.w	r3, r3, #1
 8011318:	6713      	str	r3, [r2, #112]	@ 0x70
 801131a:	e032      	b.n	8011382 <HAL_RCC_OscConfig+0x4e6>
 801131c:	687b      	ldr	r3, [r7, #4]
 801131e:	689b      	ldr	r3, [r3, #8]
 8011320:	2b00      	cmp	r3, #0
 8011322:	d111      	bne.n	8011348 <HAL_RCC_OscConfig+0x4ac>
 8011324:	4b06      	ldr	r3, [pc, #24]	@ (8011340 <HAL_RCC_OscConfig+0x4a4>)
 8011326:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011328:	4a05      	ldr	r2, [pc, #20]	@ (8011340 <HAL_RCC_OscConfig+0x4a4>)
 801132a:	f023 0301 	bic.w	r3, r3, #1
 801132e:	6713      	str	r3, [r2, #112]	@ 0x70
 8011330:	4b03      	ldr	r3, [pc, #12]	@ (8011340 <HAL_RCC_OscConfig+0x4a4>)
 8011332:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011334:	4a02      	ldr	r2, [pc, #8]	@ (8011340 <HAL_RCC_OscConfig+0x4a4>)
 8011336:	f023 0304 	bic.w	r3, r3, #4
 801133a:	6713      	str	r3, [r2, #112]	@ 0x70
 801133c:	e021      	b.n	8011382 <HAL_RCC_OscConfig+0x4e6>
 801133e:	bf00      	nop
 8011340:	58024400 	.word	0x58024400
 8011344:	58024800 	.word	0x58024800
 8011348:	687b      	ldr	r3, [r7, #4]
 801134a:	689b      	ldr	r3, [r3, #8]
 801134c:	2b05      	cmp	r3, #5
 801134e:	d10c      	bne.n	801136a <HAL_RCC_OscConfig+0x4ce>
 8011350:	4b83      	ldr	r3, [pc, #524]	@ (8011560 <HAL_RCC_OscConfig+0x6c4>)
 8011352:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011354:	4a82      	ldr	r2, [pc, #520]	@ (8011560 <HAL_RCC_OscConfig+0x6c4>)
 8011356:	f043 0304 	orr.w	r3, r3, #4
 801135a:	6713      	str	r3, [r2, #112]	@ 0x70
 801135c:	4b80      	ldr	r3, [pc, #512]	@ (8011560 <HAL_RCC_OscConfig+0x6c4>)
 801135e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011360:	4a7f      	ldr	r2, [pc, #508]	@ (8011560 <HAL_RCC_OscConfig+0x6c4>)
 8011362:	f043 0301 	orr.w	r3, r3, #1
 8011366:	6713      	str	r3, [r2, #112]	@ 0x70
 8011368:	e00b      	b.n	8011382 <HAL_RCC_OscConfig+0x4e6>
 801136a:	4b7d      	ldr	r3, [pc, #500]	@ (8011560 <HAL_RCC_OscConfig+0x6c4>)
 801136c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801136e:	4a7c      	ldr	r2, [pc, #496]	@ (8011560 <HAL_RCC_OscConfig+0x6c4>)
 8011370:	f023 0301 	bic.w	r3, r3, #1
 8011374:	6713      	str	r3, [r2, #112]	@ 0x70
 8011376:	4b7a      	ldr	r3, [pc, #488]	@ (8011560 <HAL_RCC_OscConfig+0x6c4>)
 8011378:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801137a:	4a79      	ldr	r2, [pc, #484]	@ (8011560 <HAL_RCC_OscConfig+0x6c4>)
 801137c:	f023 0304 	bic.w	r3, r3, #4
 8011380:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8011382:	687b      	ldr	r3, [r7, #4]
 8011384:	689b      	ldr	r3, [r3, #8]
 8011386:	2b00      	cmp	r3, #0
 8011388:	d015      	beq.n	80113b6 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801138a:	f7f7 ff53 	bl	8009234 <HAL_GetTick>
 801138e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8011390:	e00a      	b.n	80113a8 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8011392:	f7f7 ff4f 	bl	8009234 <HAL_GetTick>
 8011396:	4602      	mov	r2, r0
 8011398:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801139a:	1ad3      	subs	r3, r2, r3
 801139c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80113a0:	4293      	cmp	r3, r2
 80113a2:	d901      	bls.n	80113a8 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 80113a4:	2303      	movs	r3, #3
 80113a6:	e14b      	b.n	8011640 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80113a8:	4b6d      	ldr	r3, [pc, #436]	@ (8011560 <HAL_RCC_OscConfig+0x6c4>)
 80113aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80113ac:	f003 0302 	and.w	r3, r3, #2
 80113b0:	2b00      	cmp	r3, #0
 80113b2:	d0ee      	beq.n	8011392 <HAL_RCC_OscConfig+0x4f6>
 80113b4:	e014      	b.n	80113e0 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80113b6:	f7f7 ff3d 	bl	8009234 <HAL_GetTick>
 80113ba:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80113bc:	e00a      	b.n	80113d4 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80113be:	f7f7 ff39 	bl	8009234 <HAL_GetTick>
 80113c2:	4602      	mov	r2, r0
 80113c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80113c6:	1ad3      	subs	r3, r2, r3
 80113c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80113cc:	4293      	cmp	r3, r2
 80113ce:	d901      	bls.n	80113d4 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 80113d0:	2303      	movs	r3, #3
 80113d2:	e135      	b.n	8011640 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80113d4:	4b62      	ldr	r3, [pc, #392]	@ (8011560 <HAL_RCC_OscConfig+0x6c4>)
 80113d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80113d8:	f003 0302 	and.w	r3, r3, #2
 80113dc:	2b00      	cmp	r3, #0
 80113de:	d1ee      	bne.n	80113be <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80113e0:	687b      	ldr	r3, [r7, #4]
 80113e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80113e4:	2b00      	cmp	r3, #0
 80113e6:	f000 812a 	beq.w	801163e <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80113ea:	4b5d      	ldr	r3, [pc, #372]	@ (8011560 <HAL_RCC_OscConfig+0x6c4>)
 80113ec:	691b      	ldr	r3, [r3, #16]
 80113ee:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80113f2:	2b18      	cmp	r3, #24
 80113f4:	f000 80ba 	beq.w	801156c <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80113f8:	687b      	ldr	r3, [r7, #4]
 80113fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80113fc:	2b02      	cmp	r3, #2
 80113fe:	f040 8095 	bne.w	801152c <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8011402:	4b57      	ldr	r3, [pc, #348]	@ (8011560 <HAL_RCC_OscConfig+0x6c4>)
 8011404:	681b      	ldr	r3, [r3, #0]
 8011406:	4a56      	ldr	r2, [pc, #344]	@ (8011560 <HAL_RCC_OscConfig+0x6c4>)
 8011408:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 801140c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801140e:	f7f7 ff11 	bl	8009234 <HAL_GetTick>
 8011412:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8011414:	e008      	b.n	8011428 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8011416:	f7f7 ff0d 	bl	8009234 <HAL_GetTick>
 801141a:	4602      	mov	r2, r0
 801141c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801141e:	1ad3      	subs	r3, r2, r3
 8011420:	2b02      	cmp	r3, #2
 8011422:	d901      	bls.n	8011428 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8011424:	2303      	movs	r3, #3
 8011426:	e10b      	b.n	8011640 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8011428:	4b4d      	ldr	r3, [pc, #308]	@ (8011560 <HAL_RCC_OscConfig+0x6c4>)
 801142a:	681b      	ldr	r3, [r3, #0]
 801142c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8011430:	2b00      	cmp	r3, #0
 8011432:	d1f0      	bne.n	8011416 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8011434:	4b4a      	ldr	r3, [pc, #296]	@ (8011560 <HAL_RCC_OscConfig+0x6c4>)
 8011436:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8011438:	4b4a      	ldr	r3, [pc, #296]	@ (8011564 <HAL_RCC_OscConfig+0x6c8>)
 801143a:	4013      	ands	r3, r2
 801143c:	687a      	ldr	r2, [r7, #4]
 801143e:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8011440:	687a      	ldr	r2, [r7, #4]
 8011442:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8011444:	0112      	lsls	r2, r2, #4
 8011446:	430a      	orrs	r2, r1
 8011448:	4945      	ldr	r1, [pc, #276]	@ (8011560 <HAL_RCC_OscConfig+0x6c4>)
 801144a:	4313      	orrs	r3, r2
 801144c:	628b      	str	r3, [r1, #40]	@ 0x28
 801144e:	687b      	ldr	r3, [r7, #4]
 8011450:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011452:	3b01      	subs	r3, #1
 8011454:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8011458:	687b      	ldr	r3, [r7, #4]
 801145a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801145c:	3b01      	subs	r3, #1
 801145e:	025b      	lsls	r3, r3, #9
 8011460:	b29b      	uxth	r3, r3
 8011462:	431a      	orrs	r2, r3
 8011464:	687b      	ldr	r3, [r7, #4]
 8011466:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011468:	3b01      	subs	r3, #1
 801146a:	041b      	lsls	r3, r3, #16
 801146c:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8011470:	431a      	orrs	r2, r3
 8011472:	687b      	ldr	r3, [r7, #4]
 8011474:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011476:	3b01      	subs	r3, #1
 8011478:	061b      	lsls	r3, r3, #24
 801147a:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 801147e:	4938      	ldr	r1, [pc, #224]	@ (8011560 <HAL_RCC_OscConfig+0x6c4>)
 8011480:	4313      	orrs	r3, r2
 8011482:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8011484:	4b36      	ldr	r3, [pc, #216]	@ (8011560 <HAL_RCC_OscConfig+0x6c4>)
 8011486:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011488:	4a35      	ldr	r2, [pc, #212]	@ (8011560 <HAL_RCC_OscConfig+0x6c4>)
 801148a:	f023 0301 	bic.w	r3, r3, #1
 801148e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8011490:	4b33      	ldr	r3, [pc, #204]	@ (8011560 <HAL_RCC_OscConfig+0x6c4>)
 8011492:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8011494:	4b34      	ldr	r3, [pc, #208]	@ (8011568 <HAL_RCC_OscConfig+0x6cc>)
 8011496:	4013      	ands	r3, r2
 8011498:	687a      	ldr	r2, [r7, #4]
 801149a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 801149c:	00d2      	lsls	r2, r2, #3
 801149e:	4930      	ldr	r1, [pc, #192]	@ (8011560 <HAL_RCC_OscConfig+0x6c4>)
 80114a0:	4313      	orrs	r3, r2
 80114a2:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80114a4:	4b2e      	ldr	r3, [pc, #184]	@ (8011560 <HAL_RCC_OscConfig+0x6c4>)
 80114a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80114a8:	f023 020c 	bic.w	r2, r3, #12
 80114ac:	687b      	ldr	r3, [r7, #4]
 80114ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80114b0:	492b      	ldr	r1, [pc, #172]	@ (8011560 <HAL_RCC_OscConfig+0x6c4>)
 80114b2:	4313      	orrs	r3, r2
 80114b4:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80114b6:	4b2a      	ldr	r3, [pc, #168]	@ (8011560 <HAL_RCC_OscConfig+0x6c4>)
 80114b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80114ba:	f023 0202 	bic.w	r2, r3, #2
 80114be:	687b      	ldr	r3, [r7, #4]
 80114c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80114c2:	4927      	ldr	r1, [pc, #156]	@ (8011560 <HAL_RCC_OscConfig+0x6c4>)
 80114c4:	4313      	orrs	r3, r2
 80114c6:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80114c8:	4b25      	ldr	r3, [pc, #148]	@ (8011560 <HAL_RCC_OscConfig+0x6c4>)
 80114ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80114cc:	4a24      	ldr	r2, [pc, #144]	@ (8011560 <HAL_RCC_OscConfig+0x6c4>)
 80114ce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80114d2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80114d4:	4b22      	ldr	r3, [pc, #136]	@ (8011560 <HAL_RCC_OscConfig+0x6c4>)
 80114d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80114d8:	4a21      	ldr	r2, [pc, #132]	@ (8011560 <HAL_RCC_OscConfig+0x6c4>)
 80114da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80114de:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80114e0:	4b1f      	ldr	r3, [pc, #124]	@ (8011560 <HAL_RCC_OscConfig+0x6c4>)
 80114e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80114e4:	4a1e      	ldr	r2, [pc, #120]	@ (8011560 <HAL_RCC_OscConfig+0x6c4>)
 80114e6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80114ea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80114ec:	4b1c      	ldr	r3, [pc, #112]	@ (8011560 <HAL_RCC_OscConfig+0x6c4>)
 80114ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80114f0:	4a1b      	ldr	r2, [pc, #108]	@ (8011560 <HAL_RCC_OscConfig+0x6c4>)
 80114f2:	f043 0301 	orr.w	r3, r3, #1
 80114f6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80114f8:	4b19      	ldr	r3, [pc, #100]	@ (8011560 <HAL_RCC_OscConfig+0x6c4>)
 80114fa:	681b      	ldr	r3, [r3, #0]
 80114fc:	4a18      	ldr	r2, [pc, #96]	@ (8011560 <HAL_RCC_OscConfig+0x6c4>)
 80114fe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8011502:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011504:	f7f7 fe96 	bl	8009234 <HAL_GetTick>
 8011508:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 801150a:	e008      	b.n	801151e <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801150c:	f7f7 fe92 	bl	8009234 <HAL_GetTick>
 8011510:	4602      	mov	r2, r0
 8011512:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011514:	1ad3      	subs	r3, r2, r3
 8011516:	2b02      	cmp	r3, #2
 8011518:	d901      	bls.n	801151e <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 801151a:	2303      	movs	r3, #3
 801151c:	e090      	b.n	8011640 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 801151e:	4b10      	ldr	r3, [pc, #64]	@ (8011560 <HAL_RCC_OscConfig+0x6c4>)
 8011520:	681b      	ldr	r3, [r3, #0]
 8011522:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8011526:	2b00      	cmp	r3, #0
 8011528:	d0f0      	beq.n	801150c <HAL_RCC_OscConfig+0x670>
 801152a:	e088      	b.n	801163e <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801152c:	4b0c      	ldr	r3, [pc, #48]	@ (8011560 <HAL_RCC_OscConfig+0x6c4>)
 801152e:	681b      	ldr	r3, [r3, #0]
 8011530:	4a0b      	ldr	r2, [pc, #44]	@ (8011560 <HAL_RCC_OscConfig+0x6c4>)
 8011532:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8011536:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011538:	f7f7 fe7c 	bl	8009234 <HAL_GetTick>
 801153c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801153e:	e008      	b.n	8011552 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8011540:	f7f7 fe78 	bl	8009234 <HAL_GetTick>
 8011544:	4602      	mov	r2, r0
 8011546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011548:	1ad3      	subs	r3, r2, r3
 801154a:	2b02      	cmp	r3, #2
 801154c:	d901      	bls.n	8011552 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 801154e:	2303      	movs	r3, #3
 8011550:	e076      	b.n	8011640 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8011552:	4b03      	ldr	r3, [pc, #12]	@ (8011560 <HAL_RCC_OscConfig+0x6c4>)
 8011554:	681b      	ldr	r3, [r3, #0]
 8011556:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801155a:	2b00      	cmp	r3, #0
 801155c:	d1f0      	bne.n	8011540 <HAL_RCC_OscConfig+0x6a4>
 801155e:	e06e      	b.n	801163e <HAL_RCC_OscConfig+0x7a2>
 8011560:	58024400 	.word	0x58024400
 8011564:	fffffc0c 	.word	0xfffffc0c
 8011568:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 801156c:	4b36      	ldr	r3, [pc, #216]	@ (8011648 <HAL_RCC_OscConfig+0x7ac>)
 801156e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011570:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8011572:	4b35      	ldr	r3, [pc, #212]	@ (8011648 <HAL_RCC_OscConfig+0x7ac>)
 8011574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011576:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8011578:	687b      	ldr	r3, [r7, #4]
 801157a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801157c:	2b01      	cmp	r3, #1
 801157e:	d031      	beq.n	80115e4 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8011580:	693b      	ldr	r3, [r7, #16]
 8011582:	f003 0203 	and.w	r2, r3, #3
 8011586:	687b      	ldr	r3, [r7, #4]
 8011588:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801158a:	429a      	cmp	r2, r3
 801158c:	d12a      	bne.n	80115e4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 801158e:	693b      	ldr	r3, [r7, #16]
 8011590:	091b      	lsrs	r3, r3, #4
 8011592:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8011596:	687b      	ldr	r3, [r7, #4]
 8011598:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801159a:	429a      	cmp	r2, r3
 801159c:	d122      	bne.n	80115e4 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 801159e:	68fb      	ldr	r3, [r7, #12]
 80115a0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80115a4:	687b      	ldr	r3, [r7, #4]
 80115a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80115a8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80115aa:	429a      	cmp	r2, r3
 80115ac:	d11a      	bne.n	80115e4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80115ae:	68fb      	ldr	r3, [r7, #12]
 80115b0:	0a5b      	lsrs	r3, r3, #9
 80115b2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80115b6:	687b      	ldr	r3, [r7, #4]
 80115b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80115ba:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80115bc:	429a      	cmp	r2, r3
 80115be:	d111      	bne.n	80115e4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80115c0:	68fb      	ldr	r3, [r7, #12]
 80115c2:	0c1b      	lsrs	r3, r3, #16
 80115c4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80115c8:	687b      	ldr	r3, [r7, #4]
 80115ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80115cc:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80115ce:	429a      	cmp	r2, r3
 80115d0:	d108      	bne.n	80115e4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80115d2:	68fb      	ldr	r3, [r7, #12]
 80115d4:	0e1b      	lsrs	r3, r3, #24
 80115d6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80115da:	687b      	ldr	r3, [r7, #4]
 80115dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80115de:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80115e0:	429a      	cmp	r2, r3
 80115e2:	d001      	beq.n	80115e8 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 80115e4:	2301      	movs	r3, #1
 80115e6:	e02b      	b.n	8011640 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80115e8:	4b17      	ldr	r3, [pc, #92]	@ (8011648 <HAL_RCC_OscConfig+0x7ac>)
 80115ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80115ec:	08db      	lsrs	r3, r3, #3
 80115ee:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80115f2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80115f4:	687b      	ldr	r3, [r7, #4]
 80115f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80115f8:	693a      	ldr	r2, [r7, #16]
 80115fa:	429a      	cmp	r2, r3
 80115fc:	d01f      	beq.n	801163e <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80115fe:	4b12      	ldr	r3, [pc, #72]	@ (8011648 <HAL_RCC_OscConfig+0x7ac>)
 8011600:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011602:	4a11      	ldr	r2, [pc, #68]	@ (8011648 <HAL_RCC_OscConfig+0x7ac>)
 8011604:	f023 0301 	bic.w	r3, r3, #1
 8011608:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 801160a:	f7f7 fe13 	bl	8009234 <HAL_GetTick>
 801160e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8011610:	bf00      	nop
 8011612:	f7f7 fe0f 	bl	8009234 <HAL_GetTick>
 8011616:	4602      	mov	r2, r0
 8011618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801161a:	4293      	cmp	r3, r2
 801161c:	d0f9      	beq.n	8011612 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 801161e:	4b0a      	ldr	r3, [pc, #40]	@ (8011648 <HAL_RCC_OscConfig+0x7ac>)
 8011620:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8011622:	4b0a      	ldr	r3, [pc, #40]	@ (801164c <HAL_RCC_OscConfig+0x7b0>)
 8011624:	4013      	ands	r3, r2
 8011626:	687a      	ldr	r2, [r7, #4]
 8011628:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 801162a:	00d2      	lsls	r2, r2, #3
 801162c:	4906      	ldr	r1, [pc, #24]	@ (8011648 <HAL_RCC_OscConfig+0x7ac>)
 801162e:	4313      	orrs	r3, r2
 8011630:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8011632:	4b05      	ldr	r3, [pc, #20]	@ (8011648 <HAL_RCC_OscConfig+0x7ac>)
 8011634:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011636:	4a04      	ldr	r2, [pc, #16]	@ (8011648 <HAL_RCC_OscConfig+0x7ac>)
 8011638:	f043 0301 	orr.w	r3, r3, #1
 801163c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 801163e:	2300      	movs	r3, #0
}
 8011640:	4618      	mov	r0, r3
 8011642:	3730      	adds	r7, #48	@ 0x30
 8011644:	46bd      	mov	sp, r7
 8011646:	bd80      	pop	{r7, pc}
 8011648:	58024400 	.word	0x58024400
 801164c:	ffff0007 	.word	0xffff0007

08011650 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8011650:	b580      	push	{r7, lr}
 8011652:	b086      	sub	sp, #24
 8011654:	af00      	add	r7, sp, #0
 8011656:	6078      	str	r0, [r7, #4]
 8011658:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 801165a:	687b      	ldr	r3, [r7, #4]
 801165c:	2b00      	cmp	r3, #0
 801165e:	d101      	bne.n	8011664 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8011660:	2301      	movs	r3, #1
 8011662:	e19c      	b.n	801199e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8011664:	4b8a      	ldr	r3, [pc, #552]	@ (8011890 <HAL_RCC_ClockConfig+0x240>)
 8011666:	681b      	ldr	r3, [r3, #0]
 8011668:	f003 030f 	and.w	r3, r3, #15
 801166c:	683a      	ldr	r2, [r7, #0]
 801166e:	429a      	cmp	r2, r3
 8011670:	d910      	bls.n	8011694 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8011672:	4b87      	ldr	r3, [pc, #540]	@ (8011890 <HAL_RCC_ClockConfig+0x240>)
 8011674:	681b      	ldr	r3, [r3, #0]
 8011676:	f023 020f 	bic.w	r2, r3, #15
 801167a:	4985      	ldr	r1, [pc, #532]	@ (8011890 <HAL_RCC_ClockConfig+0x240>)
 801167c:	683b      	ldr	r3, [r7, #0]
 801167e:	4313      	orrs	r3, r2
 8011680:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8011682:	4b83      	ldr	r3, [pc, #524]	@ (8011890 <HAL_RCC_ClockConfig+0x240>)
 8011684:	681b      	ldr	r3, [r3, #0]
 8011686:	f003 030f 	and.w	r3, r3, #15
 801168a:	683a      	ldr	r2, [r7, #0]
 801168c:	429a      	cmp	r2, r3
 801168e:	d001      	beq.n	8011694 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8011690:	2301      	movs	r3, #1
 8011692:	e184      	b.n	801199e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8011694:	687b      	ldr	r3, [r7, #4]
 8011696:	681b      	ldr	r3, [r3, #0]
 8011698:	f003 0304 	and.w	r3, r3, #4
 801169c:	2b00      	cmp	r3, #0
 801169e:	d010      	beq.n	80116c2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80116a0:	687b      	ldr	r3, [r7, #4]
 80116a2:	691a      	ldr	r2, [r3, #16]
 80116a4:	4b7b      	ldr	r3, [pc, #492]	@ (8011894 <HAL_RCC_ClockConfig+0x244>)
 80116a6:	699b      	ldr	r3, [r3, #24]
 80116a8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80116ac:	429a      	cmp	r2, r3
 80116ae:	d908      	bls.n	80116c2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80116b0:	4b78      	ldr	r3, [pc, #480]	@ (8011894 <HAL_RCC_ClockConfig+0x244>)
 80116b2:	699b      	ldr	r3, [r3, #24]
 80116b4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80116b8:	687b      	ldr	r3, [r7, #4]
 80116ba:	691b      	ldr	r3, [r3, #16]
 80116bc:	4975      	ldr	r1, [pc, #468]	@ (8011894 <HAL_RCC_ClockConfig+0x244>)
 80116be:	4313      	orrs	r3, r2
 80116c0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80116c2:	687b      	ldr	r3, [r7, #4]
 80116c4:	681b      	ldr	r3, [r3, #0]
 80116c6:	f003 0308 	and.w	r3, r3, #8
 80116ca:	2b00      	cmp	r3, #0
 80116cc:	d010      	beq.n	80116f0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80116ce:	687b      	ldr	r3, [r7, #4]
 80116d0:	695a      	ldr	r2, [r3, #20]
 80116d2:	4b70      	ldr	r3, [pc, #448]	@ (8011894 <HAL_RCC_ClockConfig+0x244>)
 80116d4:	69db      	ldr	r3, [r3, #28]
 80116d6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80116da:	429a      	cmp	r2, r3
 80116dc:	d908      	bls.n	80116f0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80116de:	4b6d      	ldr	r3, [pc, #436]	@ (8011894 <HAL_RCC_ClockConfig+0x244>)
 80116e0:	69db      	ldr	r3, [r3, #28]
 80116e2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80116e6:	687b      	ldr	r3, [r7, #4]
 80116e8:	695b      	ldr	r3, [r3, #20]
 80116ea:	496a      	ldr	r1, [pc, #424]	@ (8011894 <HAL_RCC_ClockConfig+0x244>)
 80116ec:	4313      	orrs	r3, r2
 80116ee:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80116f0:	687b      	ldr	r3, [r7, #4]
 80116f2:	681b      	ldr	r3, [r3, #0]
 80116f4:	f003 0310 	and.w	r3, r3, #16
 80116f8:	2b00      	cmp	r3, #0
 80116fa:	d010      	beq.n	801171e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80116fc:	687b      	ldr	r3, [r7, #4]
 80116fe:	699a      	ldr	r2, [r3, #24]
 8011700:	4b64      	ldr	r3, [pc, #400]	@ (8011894 <HAL_RCC_ClockConfig+0x244>)
 8011702:	69db      	ldr	r3, [r3, #28]
 8011704:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8011708:	429a      	cmp	r2, r3
 801170a:	d908      	bls.n	801171e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 801170c:	4b61      	ldr	r3, [pc, #388]	@ (8011894 <HAL_RCC_ClockConfig+0x244>)
 801170e:	69db      	ldr	r3, [r3, #28]
 8011710:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8011714:	687b      	ldr	r3, [r7, #4]
 8011716:	699b      	ldr	r3, [r3, #24]
 8011718:	495e      	ldr	r1, [pc, #376]	@ (8011894 <HAL_RCC_ClockConfig+0x244>)
 801171a:	4313      	orrs	r3, r2
 801171c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 801171e:	687b      	ldr	r3, [r7, #4]
 8011720:	681b      	ldr	r3, [r3, #0]
 8011722:	f003 0320 	and.w	r3, r3, #32
 8011726:	2b00      	cmp	r3, #0
 8011728:	d010      	beq.n	801174c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 801172a:	687b      	ldr	r3, [r7, #4]
 801172c:	69da      	ldr	r2, [r3, #28]
 801172e:	4b59      	ldr	r3, [pc, #356]	@ (8011894 <HAL_RCC_ClockConfig+0x244>)
 8011730:	6a1b      	ldr	r3, [r3, #32]
 8011732:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8011736:	429a      	cmp	r2, r3
 8011738:	d908      	bls.n	801174c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 801173a:	4b56      	ldr	r3, [pc, #344]	@ (8011894 <HAL_RCC_ClockConfig+0x244>)
 801173c:	6a1b      	ldr	r3, [r3, #32]
 801173e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8011742:	687b      	ldr	r3, [r7, #4]
 8011744:	69db      	ldr	r3, [r3, #28]
 8011746:	4953      	ldr	r1, [pc, #332]	@ (8011894 <HAL_RCC_ClockConfig+0x244>)
 8011748:	4313      	orrs	r3, r2
 801174a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801174c:	687b      	ldr	r3, [r7, #4]
 801174e:	681b      	ldr	r3, [r3, #0]
 8011750:	f003 0302 	and.w	r3, r3, #2
 8011754:	2b00      	cmp	r3, #0
 8011756:	d010      	beq.n	801177a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8011758:	687b      	ldr	r3, [r7, #4]
 801175a:	68da      	ldr	r2, [r3, #12]
 801175c:	4b4d      	ldr	r3, [pc, #308]	@ (8011894 <HAL_RCC_ClockConfig+0x244>)
 801175e:	699b      	ldr	r3, [r3, #24]
 8011760:	f003 030f 	and.w	r3, r3, #15
 8011764:	429a      	cmp	r2, r3
 8011766:	d908      	bls.n	801177a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8011768:	4b4a      	ldr	r3, [pc, #296]	@ (8011894 <HAL_RCC_ClockConfig+0x244>)
 801176a:	699b      	ldr	r3, [r3, #24]
 801176c:	f023 020f 	bic.w	r2, r3, #15
 8011770:	687b      	ldr	r3, [r7, #4]
 8011772:	68db      	ldr	r3, [r3, #12]
 8011774:	4947      	ldr	r1, [pc, #284]	@ (8011894 <HAL_RCC_ClockConfig+0x244>)
 8011776:	4313      	orrs	r3, r2
 8011778:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801177a:	687b      	ldr	r3, [r7, #4]
 801177c:	681b      	ldr	r3, [r3, #0]
 801177e:	f003 0301 	and.w	r3, r3, #1
 8011782:	2b00      	cmp	r3, #0
 8011784:	d055      	beq.n	8011832 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8011786:	4b43      	ldr	r3, [pc, #268]	@ (8011894 <HAL_RCC_ClockConfig+0x244>)
 8011788:	699b      	ldr	r3, [r3, #24]
 801178a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 801178e:	687b      	ldr	r3, [r7, #4]
 8011790:	689b      	ldr	r3, [r3, #8]
 8011792:	4940      	ldr	r1, [pc, #256]	@ (8011894 <HAL_RCC_ClockConfig+0x244>)
 8011794:	4313      	orrs	r3, r2
 8011796:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8011798:	687b      	ldr	r3, [r7, #4]
 801179a:	685b      	ldr	r3, [r3, #4]
 801179c:	2b02      	cmp	r3, #2
 801179e:	d107      	bne.n	80117b0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80117a0:	4b3c      	ldr	r3, [pc, #240]	@ (8011894 <HAL_RCC_ClockConfig+0x244>)
 80117a2:	681b      	ldr	r3, [r3, #0]
 80117a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80117a8:	2b00      	cmp	r3, #0
 80117aa:	d121      	bne.n	80117f0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80117ac:	2301      	movs	r3, #1
 80117ae:	e0f6      	b.n	801199e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80117b0:	687b      	ldr	r3, [r7, #4]
 80117b2:	685b      	ldr	r3, [r3, #4]
 80117b4:	2b03      	cmp	r3, #3
 80117b6:	d107      	bne.n	80117c8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80117b8:	4b36      	ldr	r3, [pc, #216]	@ (8011894 <HAL_RCC_ClockConfig+0x244>)
 80117ba:	681b      	ldr	r3, [r3, #0]
 80117bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80117c0:	2b00      	cmp	r3, #0
 80117c2:	d115      	bne.n	80117f0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80117c4:	2301      	movs	r3, #1
 80117c6:	e0ea      	b.n	801199e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80117c8:	687b      	ldr	r3, [r7, #4]
 80117ca:	685b      	ldr	r3, [r3, #4]
 80117cc:	2b01      	cmp	r3, #1
 80117ce:	d107      	bne.n	80117e0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80117d0:	4b30      	ldr	r3, [pc, #192]	@ (8011894 <HAL_RCC_ClockConfig+0x244>)
 80117d2:	681b      	ldr	r3, [r3, #0]
 80117d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80117d8:	2b00      	cmp	r3, #0
 80117da:	d109      	bne.n	80117f0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80117dc:	2301      	movs	r3, #1
 80117de:	e0de      	b.n	801199e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80117e0:	4b2c      	ldr	r3, [pc, #176]	@ (8011894 <HAL_RCC_ClockConfig+0x244>)
 80117e2:	681b      	ldr	r3, [r3, #0]
 80117e4:	f003 0304 	and.w	r3, r3, #4
 80117e8:	2b00      	cmp	r3, #0
 80117ea:	d101      	bne.n	80117f0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80117ec:	2301      	movs	r3, #1
 80117ee:	e0d6      	b.n	801199e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80117f0:	4b28      	ldr	r3, [pc, #160]	@ (8011894 <HAL_RCC_ClockConfig+0x244>)
 80117f2:	691b      	ldr	r3, [r3, #16]
 80117f4:	f023 0207 	bic.w	r2, r3, #7
 80117f8:	687b      	ldr	r3, [r7, #4]
 80117fa:	685b      	ldr	r3, [r3, #4]
 80117fc:	4925      	ldr	r1, [pc, #148]	@ (8011894 <HAL_RCC_ClockConfig+0x244>)
 80117fe:	4313      	orrs	r3, r2
 8011800:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8011802:	f7f7 fd17 	bl	8009234 <HAL_GetTick>
 8011806:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8011808:	e00a      	b.n	8011820 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801180a:	f7f7 fd13 	bl	8009234 <HAL_GetTick>
 801180e:	4602      	mov	r2, r0
 8011810:	697b      	ldr	r3, [r7, #20]
 8011812:	1ad3      	subs	r3, r2, r3
 8011814:	f241 3288 	movw	r2, #5000	@ 0x1388
 8011818:	4293      	cmp	r3, r2
 801181a:	d901      	bls.n	8011820 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 801181c:	2303      	movs	r3, #3
 801181e:	e0be      	b.n	801199e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8011820:	4b1c      	ldr	r3, [pc, #112]	@ (8011894 <HAL_RCC_ClockConfig+0x244>)
 8011822:	691b      	ldr	r3, [r3, #16]
 8011824:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8011828:	687b      	ldr	r3, [r7, #4]
 801182a:	685b      	ldr	r3, [r3, #4]
 801182c:	00db      	lsls	r3, r3, #3
 801182e:	429a      	cmp	r2, r3
 8011830:	d1eb      	bne.n	801180a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8011832:	687b      	ldr	r3, [r7, #4]
 8011834:	681b      	ldr	r3, [r3, #0]
 8011836:	f003 0302 	and.w	r3, r3, #2
 801183a:	2b00      	cmp	r3, #0
 801183c:	d010      	beq.n	8011860 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 801183e:	687b      	ldr	r3, [r7, #4]
 8011840:	68da      	ldr	r2, [r3, #12]
 8011842:	4b14      	ldr	r3, [pc, #80]	@ (8011894 <HAL_RCC_ClockConfig+0x244>)
 8011844:	699b      	ldr	r3, [r3, #24]
 8011846:	f003 030f 	and.w	r3, r3, #15
 801184a:	429a      	cmp	r2, r3
 801184c:	d208      	bcs.n	8011860 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801184e:	4b11      	ldr	r3, [pc, #68]	@ (8011894 <HAL_RCC_ClockConfig+0x244>)
 8011850:	699b      	ldr	r3, [r3, #24]
 8011852:	f023 020f 	bic.w	r2, r3, #15
 8011856:	687b      	ldr	r3, [r7, #4]
 8011858:	68db      	ldr	r3, [r3, #12]
 801185a:	490e      	ldr	r1, [pc, #56]	@ (8011894 <HAL_RCC_ClockConfig+0x244>)
 801185c:	4313      	orrs	r3, r2
 801185e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8011860:	4b0b      	ldr	r3, [pc, #44]	@ (8011890 <HAL_RCC_ClockConfig+0x240>)
 8011862:	681b      	ldr	r3, [r3, #0]
 8011864:	f003 030f 	and.w	r3, r3, #15
 8011868:	683a      	ldr	r2, [r7, #0]
 801186a:	429a      	cmp	r2, r3
 801186c:	d214      	bcs.n	8011898 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801186e:	4b08      	ldr	r3, [pc, #32]	@ (8011890 <HAL_RCC_ClockConfig+0x240>)
 8011870:	681b      	ldr	r3, [r3, #0]
 8011872:	f023 020f 	bic.w	r2, r3, #15
 8011876:	4906      	ldr	r1, [pc, #24]	@ (8011890 <HAL_RCC_ClockConfig+0x240>)
 8011878:	683b      	ldr	r3, [r7, #0]
 801187a:	4313      	orrs	r3, r2
 801187c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 801187e:	4b04      	ldr	r3, [pc, #16]	@ (8011890 <HAL_RCC_ClockConfig+0x240>)
 8011880:	681b      	ldr	r3, [r3, #0]
 8011882:	f003 030f 	and.w	r3, r3, #15
 8011886:	683a      	ldr	r2, [r7, #0]
 8011888:	429a      	cmp	r2, r3
 801188a:	d005      	beq.n	8011898 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 801188c:	2301      	movs	r3, #1
 801188e:	e086      	b.n	801199e <HAL_RCC_ClockConfig+0x34e>
 8011890:	52002000 	.word	0x52002000
 8011894:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8011898:	687b      	ldr	r3, [r7, #4]
 801189a:	681b      	ldr	r3, [r3, #0]
 801189c:	f003 0304 	and.w	r3, r3, #4
 80118a0:	2b00      	cmp	r3, #0
 80118a2:	d010      	beq.n	80118c6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80118a4:	687b      	ldr	r3, [r7, #4]
 80118a6:	691a      	ldr	r2, [r3, #16]
 80118a8:	4b3f      	ldr	r3, [pc, #252]	@ (80119a8 <HAL_RCC_ClockConfig+0x358>)
 80118aa:	699b      	ldr	r3, [r3, #24]
 80118ac:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80118b0:	429a      	cmp	r2, r3
 80118b2:	d208      	bcs.n	80118c6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80118b4:	4b3c      	ldr	r3, [pc, #240]	@ (80119a8 <HAL_RCC_ClockConfig+0x358>)
 80118b6:	699b      	ldr	r3, [r3, #24]
 80118b8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80118bc:	687b      	ldr	r3, [r7, #4]
 80118be:	691b      	ldr	r3, [r3, #16]
 80118c0:	4939      	ldr	r1, [pc, #228]	@ (80119a8 <HAL_RCC_ClockConfig+0x358>)
 80118c2:	4313      	orrs	r3, r2
 80118c4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80118c6:	687b      	ldr	r3, [r7, #4]
 80118c8:	681b      	ldr	r3, [r3, #0]
 80118ca:	f003 0308 	and.w	r3, r3, #8
 80118ce:	2b00      	cmp	r3, #0
 80118d0:	d010      	beq.n	80118f4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80118d2:	687b      	ldr	r3, [r7, #4]
 80118d4:	695a      	ldr	r2, [r3, #20]
 80118d6:	4b34      	ldr	r3, [pc, #208]	@ (80119a8 <HAL_RCC_ClockConfig+0x358>)
 80118d8:	69db      	ldr	r3, [r3, #28]
 80118da:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80118de:	429a      	cmp	r2, r3
 80118e0:	d208      	bcs.n	80118f4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80118e2:	4b31      	ldr	r3, [pc, #196]	@ (80119a8 <HAL_RCC_ClockConfig+0x358>)
 80118e4:	69db      	ldr	r3, [r3, #28]
 80118e6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80118ea:	687b      	ldr	r3, [r7, #4]
 80118ec:	695b      	ldr	r3, [r3, #20]
 80118ee:	492e      	ldr	r1, [pc, #184]	@ (80119a8 <HAL_RCC_ClockConfig+0x358>)
 80118f0:	4313      	orrs	r3, r2
 80118f2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80118f4:	687b      	ldr	r3, [r7, #4]
 80118f6:	681b      	ldr	r3, [r3, #0]
 80118f8:	f003 0310 	and.w	r3, r3, #16
 80118fc:	2b00      	cmp	r3, #0
 80118fe:	d010      	beq.n	8011922 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8011900:	687b      	ldr	r3, [r7, #4]
 8011902:	699a      	ldr	r2, [r3, #24]
 8011904:	4b28      	ldr	r3, [pc, #160]	@ (80119a8 <HAL_RCC_ClockConfig+0x358>)
 8011906:	69db      	ldr	r3, [r3, #28]
 8011908:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 801190c:	429a      	cmp	r2, r3
 801190e:	d208      	bcs.n	8011922 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8011910:	4b25      	ldr	r3, [pc, #148]	@ (80119a8 <HAL_RCC_ClockConfig+0x358>)
 8011912:	69db      	ldr	r3, [r3, #28]
 8011914:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8011918:	687b      	ldr	r3, [r7, #4]
 801191a:	699b      	ldr	r3, [r3, #24]
 801191c:	4922      	ldr	r1, [pc, #136]	@ (80119a8 <HAL_RCC_ClockConfig+0x358>)
 801191e:	4313      	orrs	r3, r2
 8011920:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8011922:	687b      	ldr	r3, [r7, #4]
 8011924:	681b      	ldr	r3, [r3, #0]
 8011926:	f003 0320 	and.w	r3, r3, #32
 801192a:	2b00      	cmp	r3, #0
 801192c:	d010      	beq.n	8011950 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 801192e:	687b      	ldr	r3, [r7, #4]
 8011930:	69da      	ldr	r2, [r3, #28]
 8011932:	4b1d      	ldr	r3, [pc, #116]	@ (80119a8 <HAL_RCC_ClockConfig+0x358>)
 8011934:	6a1b      	ldr	r3, [r3, #32]
 8011936:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 801193a:	429a      	cmp	r2, r3
 801193c:	d208      	bcs.n	8011950 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 801193e:	4b1a      	ldr	r3, [pc, #104]	@ (80119a8 <HAL_RCC_ClockConfig+0x358>)
 8011940:	6a1b      	ldr	r3, [r3, #32]
 8011942:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8011946:	687b      	ldr	r3, [r7, #4]
 8011948:	69db      	ldr	r3, [r3, #28]
 801194a:	4917      	ldr	r1, [pc, #92]	@ (80119a8 <HAL_RCC_ClockConfig+0x358>)
 801194c:	4313      	orrs	r3, r2
 801194e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8011950:	f000 f834 	bl	80119bc <HAL_RCC_GetSysClockFreq>
 8011954:	4602      	mov	r2, r0
 8011956:	4b14      	ldr	r3, [pc, #80]	@ (80119a8 <HAL_RCC_ClockConfig+0x358>)
 8011958:	699b      	ldr	r3, [r3, #24]
 801195a:	0a1b      	lsrs	r3, r3, #8
 801195c:	f003 030f 	and.w	r3, r3, #15
 8011960:	4912      	ldr	r1, [pc, #72]	@ (80119ac <HAL_RCC_ClockConfig+0x35c>)
 8011962:	5ccb      	ldrb	r3, [r1, r3]
 8011964:	f003 031f 	and.w	r3, r3, #31
 8011968:	fa22 f303 	lsr.w	r3, r2, r3
 801196c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 801196e:	4b0e      	ldr	r3, [pc, #56]	@ (80119a8 <HAL_RCC_ClockConfig+0x358>)
 8011970:	699b      	ldr	r3, [r3, #24]
 8011972:	f003 030f 	and.w	r3, r3, #15
 8011976:	4a0d      	ldr	r2, [pc, #52]	@ (80119ac <HAL_RCC_ClockConfig+0x35c>)
 8011978:	5cd3      	ldrb	r3, [r2, r3]
 801197a:	f003 031f 	and.w	r3, r3, #31
 801197e:	693a      	ldr	r2, [r7, #16]
 8011980:	fa22 f303 	lsr.w	r3, r2, r3
 8011984:	4a0a      	ldr	r2, [pc, #40]	@ (80119b0 <HAL_RCC_ClockConfig+0x360>)
 8011986:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8011988:	4a0a      	ldr	r2, [pc, #40]	@ (80119b4 <HAL_RCC_ClockConfig+0x364>)
 801198a:	693b      	ldr	r3, [r7, #16]
 801198c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 801198e:	4b0a      	ldr	r3, [pc, #40]	@ (80119b8 <HAL_RCC_ClockConfig+0x368>)
 8011990:	681b      	ldr	r3, [r3, #0]
 8011992:	4618      	mov	r0, r3
 8011994:	f7f7 fc04 	bl	80091a0 <HAL_InitTick>
 8011998:	4603      	mov	r3, r0
 801199a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 801199c:	7bfb      	ldrb	r3, [r7, #15]
}
 801199e:	4618      	mov	r0, r3
 80119a0:	3718      	adds	r7, #24
 80119a2:	46bd      	mov	sp, r7
 80119a4:	bd80      	pop	{r7, pc}
 80119a6:	bf00      	nop
 80119a8:	58024400 	.word	0x58024400
 80119ac:	0801e8ac 	.word	0x0801e8ac
 80119b0:	24000008 	.word	0x24000008
 80119b4:	24000004 	.word	0x24000004
 80119b8:	2400000c 	.word	0x2400000c

080119bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80119bc:	b480      	push	{r7}
 80119be:	b089      	sub	sp, #36	@ 0x24
 80119c0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80119c2:	4bb3      	ldr	r3, [pc, #716]	@ (8011c90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80119c4:	691b      	ldr	r3, [r3, #16]
 80119c6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80119ca:	2b18      	cmp	r3, #24
 80119cc:	f200 8155 	bhi.w	8011c7a <HAL_RCC_GetSysClockFreq+0x2be>
 80119d0:	a201      	add	r2, pc, #4	@ (adr r2, 80119d8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80119d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80119d6:	bf00      	nop
 80119d8:	08011a3d 	.word	0x08011a3d
 80119dc:	08011c7b 	.word	0x08011c7b
 80119e0:	08011c7b 	.word	0x08011c7b
 80119e4:	08011c7b 	.word	0x08011c7b
 80119e8:	08011c7b 	.word	0x08011c7b
 80119ec:	08011c7b 	.word	0x08011c7b
 80119f0:	08011c7b 	.word	0x08011c7b
 80119f4:	08011c7b 	.word	0x08011c7b
 80119f8:	08011a63 	.word	0x08011a63
 80119fc:	08011c7b 	.word	0x08011c7b
 8011a00:	08011c7b 	.word	0x08011c7b
 8011a04:	08011c7b 	.word	0x08011c7b
 8011a08:	08011c7b 	.word	0x08011c7b
 8011a0c:	08011c7b 	.word	0x08011c7b
 8011a10:	08011c7b 	.word	0x08011c7b
 8011a14:	08011c7b 	.word	0x08011c7b
 8011a18:	08011a69 	.word	0x08011a69
 8011a1c:	08011c7b 	.word	0x08011c7b
 8011a20:	08011c7b 	.word	0x08011c7b
 8011a24:	08011c7b 	.word	0x08011c7b
 8011a28:	08011c7b 	.word	0x08011c7b
 8011a2c:	08011c7b 	.word	0x08011c7b
 8011a30:	08011c7b 	.word	0x08011c7b
 8011a34:	08011c7b 	.word	0x08011c7b
 8011a38:	08011a6f 	.word	0x08011a6f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011a3c:	4b94      	ldr	r3, [pc, #592]	@ (8011c90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011a3e:	681b      	ldr	r3, [r3, #0]
 8011a40:	f003 0320 	and.w	r3, r3, #32
 8011a44:	2b00      	cmp	r3, #0
 8011a46:	d009      	beq.n	8011a5c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8011a48:	4b91      	ldr	r3, [pc, #580]	@ (8011c90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011a4a:	681b      	ldr	r3, [r3, #0]
 8011a4c:	08db      	lsrs	r3, r3, #3
 8011a4e:	f003 0303 	and.w	r3, r3, #3
 8011a52:	4a90      	ldr	r2, [pc, #576]	@ (8011c94 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8011a54:	fa22 f303 	lsr.w	r3, r2, r3
 8011a58:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8011a5a:	e111      	b.n	8011c80 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8011a5c:	4b8d      	ldr	r3, [pc, #564]	@ (8011c94 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8011a5e:	61bb      	str	r3, [r7, #24]
      break;
 8011a60:	e10e      	b.n	8011c80 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8011a62:	4b8d      	ldr	r3, [pc, #564]	@ (8011c98 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8011a64:	61bb      	str	r3, [r7, #24]
      break;
 8011a66:	e10b      	b.n	8011c80 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8011a68:	4b8c      	ldr	r3, [pc, #560]	@ (8011c9c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8011a6a:	61bb      	str	r3, [r7, #24]
      break;
 8011a6c:	e108      	b.n	8011c80 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8011a6e:	4b88      	ldr	r3, [pc, #544]	@ (8011c90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011a70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011a72:	f003 0303 	and.w	r3, r3, #3
 8011a76:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8011a78:	4b85      	ldr	r3, [pc, #532]	@ (8011c90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011a7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011a7c:	091b      	lsrs	r3, r3, #4
 8011a7e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8011a82:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8011a84:	4b82      	ldr	r3, [pc, #520]	@ (8011c90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011a86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011a88:	f003 0301 	and.w	r3, r3, #1
 8011a8c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8011a8e:	4b80      	ldr	r3, [pc, #512]	@ (8011c90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011a90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011a92:	08db      	lsrs	r3, r3, #3
 8011a94:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011a98:	68fa      	ldr	r2, [r7, #12]
 8011a9a:	fb02 f303 	mul.w	r3, r2, r3
 8011a9e:	ee07 3a90 	vmov	s15, r3
 8011aa2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011aa6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8011aaa:	693b      	ldr	r3, [r7, #16]
 8011aac:	2b00      	cmp	r3, #0
 8011aae:	f000 80e1 	beq.w	8011c74 <HAL_RCC_GetSysClockFreq+0x2b8>
 8011ab2:	697b      	ldr	r3, [r7, #20]
 8011ab4:	2b02      	cmp	r3, #2
 8011ab6:	f000 8083 	beq.w	8011bc0 <HAL_RCC_GetSysClockFreq+0x204>
 8011aba:	697b      	ldr	r3, [r7, #20]
 8011abc:	2b02      	cmp	r3, #2
 8011abe:	f200 80a1 	bhi.w	8011c04 <HAL_RCC_GetSysClockFreq+0x248>
 8011ac2:	697b      	ldr	r3, [r7, #20]
 8011ac4:	2b00      	cmp	r3, #0
 8011ac6:	d003      	beq.n	8011ad0 <HAL_RCC_GetSysClockFreq+0x114>
 8011ac8:	697b      	ldr	r3, [r7, #20]
 8011aca:	2b01      	cmp	r3, #1
 8011acc:	d056      	beq.n	8011b7c <HAL_RCC_GetSysClockFreq+0x1c0>
 8011ace:	e099      	b.n	8011c04 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011ad0:	4b6f      	ldr	r3, [pc, #444]	@ (8011c90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011ad2:	681b      	ldr	r3, [r3, #0]
 8011ad4:	f003 0320 	and.w	r3, r3, #32
 8011ad8:	2b00      	cmp	r3, #0
 8011ada:	d02d      	beq.n	8011b38 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8011adc:	4b6c      	ldr	r3, [pc, #432]	@ (8011c90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011ade:	681b      	ldr	r3, [r3, #0]
 8011ae0:	08db      	lsrs	r3, r3, #3
 8011ae2:	f003 0303 	and.w	r3, r3, #3
 8011ae6:	4a6b      	ldr	r2, [pc, #428]	@ (8011c94 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8011ae8:	fa22 f303 	lsr.w	r3, r2, r3
 8011aec:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8011aee:	687b      	ldr	r3, [r7, #4]
 8011af0:	ee07 3a90 	vmov	s15, r3
 8011af4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011af8:	693b      	ldr	r3, [r7, #16]
 8011afa:	ee07 3a90 	vmov	s15, r3
 8011afe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011b02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011b06:	4b62      	ldr	r3, [pc, #392]	@ (8011c90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011b08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011b0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011b0e:	ee07 3a90 	vmov	s15, r3
 8011b12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011b16:	ed97 6a02 	vldr	s12, [r7, #8]
 8011b1a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8011ca0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8011b1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011b22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011b26:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8011b2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011b2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011b32:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8011b36:	e087      	b.n	8011c48 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8011b38:	693b      	ldr	r3, [r7, #16]
 8011b3a:	ee07 3a90 	vmov	s15, r3
 8011b3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011b42:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8011ca4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8011b46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011b4a:	4b51      	ldr	r3, [pc, #324]	@ (8011c90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011b4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011b4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011b52:	ee07 3a90 	vmov	s15, r3
 8011b56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011b5a:	ed97 6a02 	vldr	s12, [r7, #8]
 8011b5e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8011ca0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8011b62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011b66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011b6a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8011b6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011b72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011b76:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8011b7a:	e065      	b.n	8011c48 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8011b7c:	693b      	ldr	r3, [r7, #16]
 8011b7e:	ee07 3a90 	vmov	s15, r3
 8011b82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011b86:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8011ca8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8011b8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011b8e:	4b40      	ldr	r3, [pc, #256]	@ (8011c90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011b90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011b92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011b96:	ee07 3a90 	vmov	s15, r3
 8011b9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011b9e:	ed97 6a02 	vldr	s12, [r7, #8]
 8011ba2:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8011ca0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8011ba6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011baa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011bae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8011bb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011bb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011bba:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8011bbe:	e043      	b.n	8011c48 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8011bc0:	693b      	ldr	r3, [r7, #16]
 8011bc2:	ee07 3a90 	vmov	s15, r3
 8011bc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011bca:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8011cac <HAL_RCC_GetSysClockFreq+0x2f0>
 8011bce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011bd2:	4b2f      	ldr	r3, [pc, #188]	@ (8011c90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011bd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011bd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011bda:	ee07 3a90 	vmov	s15, r3
 8011bde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011be2:	ed97 6a02 	vldr	s12, [r7, #8]
 8011be6:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8011ca0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8011bea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011bee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011bf2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8011bf6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011bfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011bfe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8011c02:	e021      	b.n	8011c48 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8011c04:	693b      	ldr	r3, [r7, #16]
 8011c06:	ee07 3a90 	vmov	s15, r3
 8011c0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011c0e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8011ca8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8011c12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011c16:	4b1e      	ldr	r3, [pc, #120]	@ (8011c90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011c18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011c1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011c1e:	ee07 3a90 	vmov	s15, r3
 8011c22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011c26:	ed97 6a02 	vldr	s12, [r7, #8]
 8011c2a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8011ca0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8011c2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011c32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011c36:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8011c3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011c3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011c42:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8011c46:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8011c48:	4b11      	ldr	r3, [pc, #68]	@ (8011c90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011c4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011c4c:	0a5b      	lsrs	r3, r3, #9
 8011c4e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011c52:	3301      	adds	r3, #1
 8011c54:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8011c56:	683b      	ldr	r3, [r7, #0]
 8011c58:	ee07 3a90 	vmov	s15, r3
 8011c5c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8011c60:	edd7 6a07 	vldr	s13, [r7, #28]
 8011c64:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011c68:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011c6c:	ee17 3a90 	vmov	r3, s15
 8011c70:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8011c72:	e005      	b.n	8011c80 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8011c74:	2300      	movs	r3, #0
 8011c76:	61bb      	str	r3, [r7, #24]
      break;
 8011c78:	e002      	b.n	8011c80 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8011c7a:	4b07      	ldr	r3, [pc, #28]	@ (8011c98 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8011c7c:	61bb      	str	r3, [r7, #24]
      break;
 8011c7e:	bf00      	nop
  }

  return sysclockfreq;
 8011c80:	69bb      	ldr	r3, [r7, #24]
}
 8011c82:	4618      	mov	r0, r3
 8011c84:	3724      	adds	r7, #36	@ 0x24
 8011c86:	46bd      	mov	sp, r7
 8011c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c8c:	4770      	bx	lr
 8011c8e:	bf00      	nop
 8011c90:	58024400 	.word	0x58024400
 8011c94:	03d09000 	.word	0x03d09000
 8011c98:	003d0900 	.word	0x003d0900
 8011c9c:	016e3600 	.word	0x016e3600
 8011ca0:	46000000 	.word	0x46000000
 8011ca4:	4c742400 	.word	0x4c742400
 8011ca8:	4a742400 	.word	0x4a742400
 8011cac:	4bb71b00 	.word	0x4bb71b00

08011cb0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8011cb0:	b580      	push	{r7, lr}
 8011cb2:	b082      	sub	sp, #8
 8011cb4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8011cb6:	f7ff fe81 	bl	80119bc <HAL_RCC_GetSysClockFreq>
 8011cba:	4602      	mov	r2, r0
 8011cbc:	4b10      	ldr	r3, [pc, #64]	@ (8011d00 <HAL_RCC_GetHCLKFreq+0x50>)
 8011cbe:	699b      	ldr	r3, [r3, #24]
 8011cc0:	0a1b      	lsrs	r3, r3, #8
 8011cc2:	f003 030f 	and.w	r3, r3, #15
 8011cc6:	490f      	ldr	r1, [pc, #60]	@ (8011d04 <HAL_RCC_GetHCLKFreq+0x54>)
 8011cc8:	5ccb      	ldrb	r3, [r1, r3]
 8011cca:	f003 031f 	and.w	r3, r3, #31
 8011cce:	fa22 f303 	lsr.w	r3, r2, r3
 8011cd2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8011cd4:	4b0a      	ldr	r3, [pc, #40]	@ (8011d00 <HAL_RCC_GetHCLKFreq+0x50>)
 8011cd6:	699b      	ldr	r3, [r3, #24]
 8011cd8:	f003 030f 	and.w	r3, r3, #15
 8011cdc:	4a09      	ldr	r2, [pc, #36]	@ (8011d04 <HAL_RCC_GetHCLKFreq+0x54>)
 8011cde:	5cd3      	ldrb	r3, [r2, r3]
 8011ce0:	f003 031f 	and.w	r3, r3, #31
 8011ce4:	687a      	ldr	r2, [r7, #4]
 8011ce6:	fa22 f303 	lsr.w	r3, r2, r3
 8011cea:	4a07      	ldr	r2, [pc, #28]	@ (8011d08 <HAL_RCC_GetHCLKFreq+0x58>)
 8011cec:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8011cee:	4a07      	ldr	r2, [pc, #28]	@ (8011d0c <HAL_RCC_GetHCLKFreq+0x5c>)
 8011cf0:	687b      	ldr	r3, [r7, #4]
 8011cf2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8011cf4:	4b04      	ldr	r3, [pc, #16]	@ (8011d08 <HAL_RCC_GetHCLKFreq+0x58>)
 8011cf6:	681b      	ldr	r3, [r3, #0]
}
 8011cf8:	4618      	mov	r0, r3
 8011cfa:	3708      	adds	r7, #8
 8011cfc:	46bd      	mov	sp, r7
 8011cfe:	bd80      	pop	{r7, pc}
 8011d00:	58024400 	.word	0x58024400
 8011d04:	0801e8ac 	.word	0x0801e8ac
 8011d08:	24000008 	.word	0x24000008
 8011d0c:	24000004 	.word	0x24000004

08011d10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8011d10:	b580      	push	{r7, lr}
 8011d12:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8011d14:	f7ff ffcc 	bl	8011cb0 <HAL_RCC_GetHCLKFreq>
 8011d18:	4602      	mov	r2, r0
 8011d1a:	4b06      	ldr	r3, [pc, #24]	@ (8011d34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8011d1c:	69db      	ldr	r3, [r3, #28]
 8011d1e:	091b      	lsrs	r3, r3, #4
 8011d20:	f003 0307 	and.w	r3, r3, #7
 8011d24:	4904      	ldr	r1, [pc, #16]	@ (8011d38 <HAL_RCC_GetPCLK1Freq+0x28>)
 8011d26:	5ccb      	ldrb	r3, [r1, r3]
 8011d28:	f003 031f 	and.w	r3, r3, #31
 8011d2c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8011d30:	4618      	mov	r0, r3
 8011d32:	bd80      	pop	{r7, pc}
 8011d34:	58024400 	.word	0x58024400
 8011d38:	0801e8ac 	.word	0x0801e8ac

08011d3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8011d3c:	b580      	push	{r7, lr}
 8011d3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8011d40:	f7ff ffb6 	bl	8011cb0 <HAL_RCC_GetHCLKFreq>
 8011d44:	4602      	mov	r2, r0
 8011d46:	4b06      	ldr	r3, [pc, #24]	@ (8011d60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8011d48:	69db      	ldr	r3, [r3, #28]
 8011d4a:	0a1b      	lsrs	r3, r3, #8
 8011d4c:	f003 0307 	and.w	r3, r3, #7
 8011d50:	4904      	ldr	r1, [pc, #16]	@ (8011d64 <HAL_RCC_GetPCLK2Freq+0x28>)
 8011d52:	5ccb      	ldrb	r3, [r1, r3]
 8011d54:	f003 031f 	and.w	r3, r3, #31
 8011d58:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8011d5c:	4618      	mov	r0, r3
 8011d5e:	bd80      	pop	{r7, pc}
 8011d60:	58024400 	.word	0x58024400
 8011d64:	0801e8ac 	.word	0x0801e8ac

08011d68 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8011d68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8011d6c:	b0c6      	sub	sp, #280	@ 0x118
 8011d6e:	af00      	add	r7, sp, #0
 8011d70:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8011d74:	2300      	movs	r3, #0
 8011d76:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8011d7a:	2300      	movs	r3, #0
 8011d7c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8011d80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d88:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8011d8c:	2500      	movs	r5, #0
 8011d8e:	ea54 0305 	orrs.w	r3, r4, r5
 8011d92:	d049      	beq.n	8011e28 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8011d94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011d98:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011d9a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8011d9e:	d02f      	beq.n	8011e00 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8011da0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8011da4:	d828      	bhi.n	8011df8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8011da6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8011daa:	d01a      	beq.n	8011de2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8011dac:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8011db0:	d822      	bhi.n	8011df8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8011db2:	2b00      	cmp	r3, #0
 8011db4:	d003      	beq.n	8011dbe <HAL_RCCEx_PeriphCLKConfig+0x56>
 8011db6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8011dba:	d007      	beq.n	8011dcc <HAL_RCCEx_PeriphCLKConfig+0x64>
 8011dbc:	e01c      	b.n	8011df8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8011dbe:	4bab      	ldr	r3, [pc, #684]	@ (801206c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8011dc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011dc2:	4aaa      	ldr	r2, [pc, #680]	@ (801206c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8011dc4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8011dc8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8011dca:	e01a      	b.n	8011e02 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8011dcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011dd0:	3308      	adds	r3, #8
 8011dd2:	2102      	movs	r1, #2
 8011dd4:	4618      	mov	r0, r3
 8011dd6:	f002 fa49 	bl	801426c <RCCEx_PLL2_Config>
 8011dda:	4603      	mov	r3, r0
 8011ddc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8011de0:	e00f      	b.n	8011e02 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8011de2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011de6:	3328      	adds	r3, #40	@ 0x28
 8011de8:	2102      	movs	r1, #2
 8011dea:	4618      	mov	r0, r3
 8011dec:	f002 faf0 	bl	80143d0 <RCCEx_PLL3_Config>
 8011df0:	4603      	mov	r3, r0
 8011df2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8011df6:	e004      	b.n	8011e02 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8011df8:	2301      	movs	r3, #1
 8011dfa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8011dfe:	e000      	b.n	8011e02 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8011e00:	bf00      	nop
    }

    if (ret == HAL_OK)
 8011e02:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8011e06:	2b00      	cmp	r3, #0
 8011e08:	d10a      	bne.n	8011e20 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8011e0a:	4b98      	ldr	r3, [pc, #608]	@ (801206c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8011e0c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011e0e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8011e12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011e16:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011e18:	4a94      	ldr	r2, [pc, #592]	@ (801206c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8011e1a:	430b      	orrs	r3, r1
 8011e1c:	6513      	str	r3, [r2, #80]	@ 0x50
 8011e1e:	e003      	b.n	8011e28 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011e20:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8011e24:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8011e28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e30:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8011e34:	f04f 0900 	mov.w	r9, #0
 8011e38:	ea58 0309 	orrs.w	r3, r8, r9
 8011e3c:	d047      	beq.n	8011ece <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8011e3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011e42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011e44:	2b04      	cmp	r3, #4
 8011e46:	d82a      	bhi.n	8011e9e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8011e48:	a201      	add	r2, pc, #4	@ (adr r2, 8011e50 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8011e4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011e4e:	bf00      	nop
 8011e50:	08011e65 	.word	0x08011e65
 8011e54:	08011e73 	.word	0x08011e73
 8011e58:	08011e89 	.word	0x08011e89
 8011e5c:	08011ea7 	.word	0x08011ea7
 8011e60:	08011ea7 	.word	0x08011ea7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8011e64:	4b81      	ldr	r3, [pc, #516]	@ (801206c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8011e66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011e68:	4a80      	ldr	r2, [pc, #512]	@ (801206c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8011e6a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8011e6e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8011e70:	e01a      	b.n	8011ea8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8011e72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011e76:	3308      	adds	r3, #8
 8011e78:	2100      	movs	r1, #0
 8011e7a:	4618      	mov	r0, r3
 8011e7c:	f002 f9f6 	bl	801426c <RCCEx_PLL2_Config>
 8011e80:	4603      	mov	r3, r0
 8011e82:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8011e86:	e00f      	b.n	8011ea8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8011e88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011e8c:	3328      	adds	r3, #40	@ 0x28
 8011e8e:	2100      	movs	r1, #0
 8011e90:	4618      	mov	r0, r3
 8011e92:	f002 fa9d 	bl	80143d0 <RCCEx_PLL3_Config>
 8011e96:	4603      	mov	r3, r0
 8011e98:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8011e9c:	e004      	b.n	8011ea8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8011e9e:	2301      	movs	r3, #1
 8011ea0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8011ea4:	e000      	b.n	8011ea8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8011ea6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8011ea8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8011eac:	2b00      	cmp	r3, #0
 8011eae:	d10a      	bne.n	8011ec6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8011eb0:	4b6e      	ldr	r3, [pc, #440]	@ (801206c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8011eb2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011eb4:	f023 0107 	bic.w	r1, r3, #7
 8011eb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011ebc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011ebe:	4a6b      	ldr	r2, [pc, #428]	@ (801206c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8011ec0:	430b      	orrs	r3, r1
 8011ec2:	6513      	str	r3, [r2, #80]	@ 0x50
 8011ec4:	e003      	b.n	8011ece <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011ec6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8011eca:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8011ece:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ed6:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 8011eda:	f04f 0b00 	mov.w	fp, #0
 8011ede:	ea5a 030b 	orrs.w	r3, sl, fp
 8011ee2:	d05b      	beq.n	8011f9c <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8011ee4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011ee8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8011eec:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8011ef0:	d03b      	beq.n	8011f6a <HAL_RCCEx_PeriphCLKConfig+0x202>
 8011ef2:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8011ef6:	d834      	bhi.n	8011f62 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8011ef8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8011efc:	d037      	beq.n	8011f6e <HAL_RCCEx_PeriphCLKConfig+0x206>
 8011efe:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8011f02:	d82e      	bhi.n	8011f62 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8011f04:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8011f08:	d033      	beq.n	8011f72 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8011f0a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8011f0e:	d828      	bhi.n	8011f62 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8011f10:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8011f14:	d01a      	beq.n	8011f4c <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8011f16:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8011f1a:	d822      	bhi.n	8011f62 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8011f1c:	2b00      	cmp	r3, #0
 8011f1e:	d003      	beq.n	8011f28 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8011f20:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8011f24:	d007      	beq.n	8011f36 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8011f26:	e01c      	b.n	8011f62 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8011f28:	4b50      	ldr	r3, [pc, #320]	@ (801206c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8011f2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011f2c:	4a4f      	ldr	r2, [pc, #316]	@ (801206c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8011f2e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8011f32:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8011f34:	e01e      	b.n	8011f74 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8011f36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011f3a:	3308      	adds	r3, #8
 8011f3c:	2100      	movs	r1, #0
 8011f3e:	4618      	mov	r0, r3
 8011f40:	f002 f994 	bl	801426c <RCCEx_PLL2_Config>
 8011f44:	4603      	mov	r3, r0
 8011f46:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8011f4a:	e013      	b.n	8011f74 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8011f4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011f50:	3328      	adds	r3, #40	@ 0x28
 8011f52:	2100      	movs	r1, #0
 8011f54:	4618      	mov	r0, r3
 8011f56:	f002 fa3b 	bl	80143d0 <RCCEx_PLL3_Config>
 8011f5a:	4603      	mov	r3, r0
 8011f5c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8011f60:	e008      	b.n	8011f74 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8011f62:	2301      	movs	r3, #1
 8011f64:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8011f68:	e004      	b.n	8011f74 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8011f6a:	bf00      	nop
 8011f6c:	e002      	b.n	8011f74 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8011f6e:	bf00      	nop
 8011f70:	e000      	b.n	8011f74 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8011f72:	bf00      	nop
    }

    if (ret == HAL_OK)
 8011f74:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8011f78:	2b00      	cmp	r3, #0
 8011f7a:	d10b      	bne.n	8011f94 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8011f7c:	4b3b      	ldr	r3, [pc, #236]	@ (801206c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8011f7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011f80:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8011f84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011f88:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8011f8c:	4a37      	ldr	r2, [pc, #220]	@ (801206c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8011f8e:	430b      	orrs	r3, r1
 8011f90:	6593      	str	r3, [r2, #88]	@ 0x58
 8011f92:	e003      	b.n	8011f9c <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011f94:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8011f98:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8011f9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011fa4:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8011fa8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8011fac:	2300      	movs	r3, #0
 8011fae:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8011fb2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8011fb6:	460b      	mov	r3, r1
 8011fb8:	4313      	orrs	r3, r2
 8011fba:	d05d      	beq.n	8012078 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8011fbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011fc0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8011fc4:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8011fc8:	d03b      	beq.n	8012042 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8011fca:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8011fce:	d834      	bhi.n	801203a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8011fd0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8011fd4:	d037      	beq.n	8012046 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8011fd6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8011fda:	d82e      	bhi.n	801203a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8011fdc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8011fe0:	d033      	beq.n	801204a <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8011fe2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8011fe6:	d828      	bhi.n	801203a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8011fe8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8011fec:	d01a      	beq.n	8012024 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8011fee:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8011ff2:	d822      	bhi.n	801203a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8011ff4:	2b00      	cmp	r3, #0
 8011ff6:	d003      	beq.n	8012000 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8011ff8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8011ffc:	d007      	beq.n	801200e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8011ffe:	e01c      	b.n	801203a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8012000:	4b1a      	ldr	r3, [pc, #104]	@ (801206c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8012002:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012004:	4a19      	ldr	r2, [pc, #100]	@ (801206c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8012006:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801200a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801200c:	e01e      	b.n	801204c <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801200e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012012:	3308      	adds	r3, #8
 8012014:	2100      	movs	r1, #0
 8012016:	4618      	mov	r0, r3
 8012018:	f002 f928 	bl	801426c <RCCEx_PLL2_Config>
 801201c:	4603      	mov	r3, r0
 801201e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8012022:	e013      	b.n	801204c <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8012024:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012028:	3328      	adds	r3, #40	@ 0x28
 801202a:	2100      	movs	r1, #0
 801202c:	4618      	mov	r0, r3
 801202e:	f002 f9cf 	bl	80143d0 <RCCEx_PLL3_Config>
 8012032:	4603      	mov	r3, r0
 8012034:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8012038:	e008      	b.n	801204c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 801203a:	2301      	movs	r3, #1
 801203c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8012040:	e004      	b.n	801204c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8012042:	bf00      	nop
 8012044:	e002      	b.n	801204c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8012046:	bf00      	nop
 8012048:	e000      	b.n	801204c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 801204a:	bf00      	nop
    }

    if (ret == HAL_OK)
 801204c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012050:	2b00      	cmp	r3, #0
 8012052:	d10d      	bne.n	8012070 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8012054:	4b05      	ldr	r3, [pc, #20]	@ (801206c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8012056:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012058:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 801205c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012060:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8012064:	4a01      	ldr	r2, [pc, #4]	@ (801206c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8012066:	430b      	orrs	r3, r1
 8012068:	6593      	str	r3, [r2, #88]	@ 0x58
 801206a:	e005      	b.n	8012078 <HAL_RCCEx_PeriphCLKConfig+0x310>
 801206c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012070:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012074:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8012078:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801207c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012080:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8012084:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8012088:	2300      	movs	r3, #0
 801208a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 801208e:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8012092:	460b      	mov	r3, r1
 8012094:	4313      	orrs	r3, r2
 8012096:	d03a      	beq.n	801210e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8012098:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801209c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801209e:	2b30      	cmp	r3, #48	@ 0x30
 80120a0:	d01f      	beq.n	80120e2 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 80120a2:	2b30      	cmp	r3, #48	@ 0x30
 80120a4:	d819      	bhi.n	80120da <HAL_RCCEx_PeriphCLKConfig+0x372>
 80120a6:	2b20      	cmp	r3, #32
 80120a8:	d00c      	beq.n	80120c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80120aa:	2b20      	cmp	r3, #32
 80120ac:	d815      	bhi.n	80120da <HAL_RCCEx_PeriphCLKConfig+0x372>
 80120ae:	2b00      	cmp	r3, #0
 80120b0:	d019      	beq.n	80120e6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80120b2:	2b10      	cmp	r3, #16
 80120b4:	d111      	bne.n	80120da <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80120b6:	4baa      	ldr	r3, [pc, #680]	@ (8012360 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80120b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80120ba:	4aa9      	ldr	r2, [pc, #676]	@ (8012360 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80120bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80120c0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80120c2:	e011      	b.n	80120e8 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80120c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80120c8:	3308      	adds	r3, #8
 80120ca:	2102      	movs	r1, #2
 80120cc:	4618      	mov	r0, r3
 80120ce:	f002 f8cd 	bl	801426c <RCCEx_PLL2_Config>
 80120d2:	4603      	mov	r3, r0
 80120d4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80120d8:	e006      	b.n	80120e8 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80120da:	2301      	movs	r3, #1
 80120dc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80120e0:	e002      	b.n	80120e8 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 80120e2:	bf00      	nop
 80120e4:	e000      	b.n	80120e8 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 80120e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80120e8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80120ec:	2b00      	cmp	r3, #0
 80120ee:	d10a      	bne.n	8012106 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80120f0:	4b9b      	ldr	r3, [pc, #620]	@ (8012360 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80120f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80120f4:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80120f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80120fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80120fe:	4a98      	ldr	r2, [pc, #608]	@ (8012360 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8012100:	430b      	orrs	r3, r1
 8012102:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8012104:	e003      	b.n	801210e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012106:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801210a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 801210e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012116:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 801211a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 801211e:	2300      	movs	r3, #0
 8012120:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8012124:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8012128:	460b      	mov	r3, r1
 801212a:	4313      	orrs	r3, r2
 801212c:	d051      	beq.n	80121d2 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 801212e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012132:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8012134:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8012138:	d035      	beq.n	80121a6 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 801213a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801213e:	d82e      	bhi.n	801219e <HAL_RCCEx_PeriphCLKConfig+0x436>
 8012140:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8012144:	d031      	beq.n	80121aa <HAL_RCCEx_PeriphCLKConfig+0x442>
 8012146:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 801214a:	d828      	bhi.n	801219e <HAL_RCCEx_PeriphCLKConfig+0x436>
 801214c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8012150:	d01a      	beq.n	8012188 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8012152:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8012156:	d822      	bhi.n	801219e <HAL_RCCEx_PeriphCLKConfig+0x436>
 8012158:	2b00      	cmp	r3, #0
 801215a:	d003      	beq.n	8012164 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 801215c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8012160:	d007      	beq.n	8012172 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8012162:	e01c      	b.n	801219e <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8012164:	4b7e      	ldr	r3, [pc, #504]	@ (8012360 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8012166:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012168:	4a7d      	ldr	r2, [pc, #500]	@ (8012360 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 801216a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801216e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8012170:	e01c      	b.n	80121ac <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8012172:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012176:	3308      	adds	r3, #8
 8012178:	2100      	movs	r1, #0
 801217a:	4618      	mov	r0, r3
 801217c:	f002 f876 	bl	801426c <RCCEx_PLL2_Config>
 8012180:	4603      	mov	r3, r0
 8012182:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8012186:	e011      	b.n	80121ac <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8012188:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801218c:	3328      	adds	r3, #40	@ 0x28
 801218e:	2100      	movs	r1, #0
 8012190:	4618      	mov	r0, r3
 8012192:	f002 f91d 	bl	80143d0 <RCCEx_PLL3_Config>
 8012196:	4603      	mov	r3, r0
 8012198:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 801219c:	e006      	b.n	80121ac <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801219e:	2301      	movs	r3, #1
 80121a0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80121a4:	e002      	b.n	80121ac <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80121a6:	bf00      	nop
 80121a8:	e000      	b.n	80121ac <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80121aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80121ac:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80121b0:	2b00      	cmp	r3, #0
 80121b2:	d10a      	bne.n	80121ca <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80121b4:	4b6a      	ldr	r3, [pc, #424]	@ (8012360 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80121b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80121b8:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80121bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80121c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80121c2:	4a67      	ldr	r2, [pc, #412]	@ (8012360 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80121c4:	430b      	orrs	r3, r1
 80121c6:	6513      	str	r3, [r2, #80]	@ 0x50
 80121c8:	e003      	b.n	80121d2 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80121ca:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80121ce:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80121d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80121d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121da:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80121de:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80121e2:	2300      	movs	r3, #0
 80121e4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80121e8:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80121ec:	460b      	mov	r3, r1
 80121ee:	4313      	orrs	r3, r2
 80121f0:	d053      	beq.n	801229a <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80121f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80121f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80121f8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80121fc:	d033      	beq.n	8012266 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 80121fe:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8012202:	d82c      	bhi.n	801225e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8012204:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8012208:	d02f      	beq.n	801226a <HAL_RCCEx_PeriphCLKConfig+0x502>
 801220a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 801220e:	d826      	bhi.n	801225e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8012210:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8012214:	d02b      	beq.n	801226e <HAL_RCCEx_PeriphCLKConfig+0x506>
 8012216:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 801221a:	d820      	bhi.n	801225e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 801221c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8012220:	d012      	beq.n	8012248 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8012222:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8012226:	d81a      	bhi.n	801225e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8012228:	2b00      	cmp	r3, #0
 801222a:	d022      	beq.n	8012272 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 801222c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8012230:	d115      	bne.n	801225e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8012232:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012236:	3308      	adds	r3, #8
 8012238:	2101      	movs	r1, #1
 801223a:	4618      	mov	r0, r3
 801223c:	f002 f816 	bl	801426c <RCCEx_PLL2_Config>
 8012240:	4603      	mov	r3, r0
 8012242:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8012246:	e015      	b.n	8012274 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8012248:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801224c:	3328      	adds	r3, #40	@ 0x28
 801224e:	2101      	movs	r1, #1
 8012250:	4618      	mov	r0, r3
 8012252:	f002 f8bd 	bl	80143d0 <RCCEx_PLL3_Config>
 8012256:	4603      	mov	r3, r0
 8012258:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 801225c:	e00a      	b.n	8012274 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801225e:	2301      	movs	r3, #1
 8012260:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8012264:	e006      	b.n	8012274 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8012266:	bf00      	nop
 8012268:	e004      	b.n	8012274 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 801226a:	bf00      	nop
 801226c:	e002      	b.n	8012274 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 801226e:	bf00      	nop
 8012270:	e000      	b.n	8012274 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8012272:	bf00      	nop
    }

    if (ret == HAL_OK)
 8012274:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012278:	2b00      	cmp	r3, #0
 801227a:	d10a      	bne.n	8012292 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 801227c:	4b38      	ldr	r3, [pc, #224]	@ (8012360 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 801227e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012280:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8012284:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012288:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801228a:	4a35      	ldr	r2, [pc, #212]	@ (8012360 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 801228c:	430b      	orrs	r3, r1
 801228e:	6513      	str	r3, [r2, #80]	@ 0x50
 8012290:	e003      	b.n	801229a <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012292:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012296:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 801229a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801229e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122a2:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80122a6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80122aa:	2300      	movs	r3, #0
 80122ac:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80122b0:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80122b4:	460b      	mov	r3, r1
 80122b6:	4313      	orrs	r3, r2
 80122b8:	d058      	beq.n	801236c <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80122ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80122be:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80122c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80122c6:	d033      	beq.n	8012330 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 80122c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80122cc:	d82c      	bhi.n	8012328 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80122ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80122d2:	d02f      	beq.n	8012334 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 80122d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80122d8:	d826      	bhi.n	8012328 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80122da:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80122de:	d02b      	beq.n	8012338 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 80122e0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80122e4:	d820      	bhi.n	8012328 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80122e6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80122ea:	d012      	beq.n	8012312 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 80122ec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80122f0:	d81a      	bhi.n	8012328 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80122f2:	2b00      	cmp	r3, #0
 80122f4:	d022      	beq.n	801233c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80122f6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80122fa:	d115      	bne.n	8012328 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80122fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012300:	3308      	adds	r3, #8
 8012302:	2101      	movs	r1, #1
 8012304:	4618      	mov	r0, r3
 8012306:	f001 ffb1 	bl	801426c <RCCEx_PLL2_Config>
 801230a:	4603      	mov	r3, r0
 801230c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8012310:	e015      	b.n	801233e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8012312:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012316:	3328      	adds	r3, #40	@ 0x28
 8012318:	2101      	movs	r1, #1
 801231a:	4618      	mov	r0, r3
 801231c:	f002 f858 	bl	80143d0 <RCCEx_PLL3_Config>
 8012320:	4603      	mov	r3, r0
 8012322:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8012326:	e00a      	b.n	801233e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8012328:	2301      	movs	r3, #1
 801232a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 801232e:	e006      	b.n	801233e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8012330:	bf00      	nop
 8012332:	e004      	b.n	801233e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8012334:	bf00      	nop
 8012336:	e002      	b.n	801233e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8012338:	bf00      	nop
 801233a:	e000      	b.n	801233e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 801233c:	bf00      	nop
    }

    if (ret == HAL_OK)
 801233e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012342:	2b00      	cmp	r3, #0
 8012344:	d10e      	bne.n	8012364 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8012346:	4b06      	ldr	r3, [pc, #24]	@ (8012360 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8012348:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801234a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 801234e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012352:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8012356:	4a02      	ldr	r2, [pc, #8]	@ (8012360 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8012358:	430b      	orrs	r3, r1
 801235a:	6593      	str	r3, [r2, #88]	@ 0x58
 801235c:	e006      	b.n	801236c <HAL_RCCEx_PeriphCLKConfig+0x604>
 801235e:	bf00      	nop
 8012360:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012364:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012368:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 801236c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012374:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8012378:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 801237c:	2300      	movs	r3, #0
 801237e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8012382:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8012386:	460b      	mov	r3, r1
 8012388:	4313      	orrs	r3, r2
 801238a:	d037      	beq.n	80123fc <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 801238c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012390:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012392:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8012396:	d00e      	beq.n	80123b6 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8012398:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801239c:	d816      	bhi.n	80123cc <HAL_RCCEx_PeriphCLKConfig+0x664>
 801239e:	2b00      	cmp	r3, #0
 80123a0:	d018      	beq.n	80123d4 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80123a2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80123a6:	d111      	bne.n	80123cc <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80123a8:	4bc4      	ldr	r3, [pc, #784]	@ (80126bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80123aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80123ac:	4ac3      	ldr	r2, [pc, #780]	@ (80126bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80123ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80123b2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80123b4:	e00f      	b.n	80123d6 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80123b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80123ba:	3308      	adds	r3, #8
 80123bc:	2101      	movs	r1, #1
 80123be:	4618      	mov	r0, r3
 80123c0:	f001 ff54 	bl	801426c <RCCEx_PLL2_Config>
 80123c4:	4603      	mov	r3, r0
 80123c6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80123ca:	e004      	b.n	80123d6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80123cc:	2301      	movs	r3, #1
 80123ce:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80123d2:	e000      	b.n	80123d6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 80123d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80123d6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80123da:	2b00      	cmp	r3, #0
 80123dc:	d10a      	bne.n	80123f4 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80123de:	4bb7      	ldr	r3, [pc, #732]	@ (80126bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80123e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80123e2:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80123e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80123ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80123ec:	4ab3      	ldr	r2, [pc, #716]	@ (80126bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80123ee:	430b      	orrs	r3, r1
 80123f0:	6513      	str	r3, [r2, #80]	@ 0x50
 80123f2:	e003      	b.n	80123fc <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80123f4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80123f8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80123fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012404:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8012408:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 801240c:	2300      	movs	r3, #0
 801240e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8012412:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8012416:	460b      	mov	r3, r1
 8012418:	4313      	orrs	r3, r2
 801241a:	d039      	beq.n	8012490 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 801241c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012420:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8012422:	2b03      	cmp	r3, #3
 8012424:	d81c      	bhi.n	8012460 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8012426:	a201      	add	r2, pc, #4	@ (adr r2, 801242c <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8012428:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801242c:	08012469 	.word	0x08012469
 8012430:	0801243d 	.word	0x0801243d
 8012434:	0801244b 	.word	0x0801244b
 8012438:	08012469 	.word	0x08012469
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801243c:	4b9f      	ldr	r3, [pc, #636]	@ (80126bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801243e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012440:	4a9e      	ldr	r2, [pc, #632]	@ (80126bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8012442:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8012446:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8012448:	e00f      	b.n	801246a <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801244a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801244e:	3308      	adds	r3, #8
 8012450:	2102      	movs	r1, #2
 8012452:	4618      	mov	r0, r3
 8012454:	f001 ff0a 	bl	801426c <RCCEx_PLL2_Config>
 8012458:	4603      	mov	r3, r0
 801245a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 801245e:	e004      	b.n	801246a <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8012460:	2301      	movs	r3, #1
 8012462:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8012466:	e000      	b.n	801246a <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8012468:	bf00      	nop
    }

    if (ret == HAL_OK)
 801246a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801246e:	2b00      	cmp	r3, #0
 8012470:	d10a      	bne.n	8012488 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8012472:	4b92      	ldr	r3, [pc, #584]	@ (80126bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8012474:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012476:	f023 0103 	bic.w	r1, r3, #3
 801247a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801247e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8012480:	4a8e      	ldr	r2, [pc, #568]	@ (80126bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8012482:	430b      	orrs	r3, r1
 8012484:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8012486:	e003      	b.n	8012490 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012488:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801248c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8012490:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012498:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 801249c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80124a0:	2300      	movs	r3, #0
 80124a2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80124a6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80124aa:	460b      	mov	r3, r1
 80124ac:	4313      	orrs	r3, r2
 80124ae:	f000 8099 	beq.w	80125e4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80124b2:	4b83      	ldr	r3, [pc, #524]	@ (80126c0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80124b4:	681b      	ldr	r3, [r3, #0]
 80124b6:	4a82      	ldr	r2, [pc, #520]	@ (80126c0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80124b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80124bc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80124be:	f7f6 feb9 	bl	8009234 <HAL_GetTick>
 80124c2:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80124c6:	e00b      	b.n	80124e0 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80124c8:	f7f6 feb4 	bl	8009234 <HAL_GetTick>
 80124cc:	4602      	mov	r2, r0
 80124ce:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80124d2:	1ad3      	subs	r3, r2, r3
 80124d4:	2b64      	cmp	r3, #100	@ 0x64
 80124d6:	d903      	bls.n	80124e0 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 80124d8:	2303      	movs	r3, #3
 80124da:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80124de:	e005      	b.n	80124ec <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80124e0:	4b77      	ldr	r3, [pc, #476]	@ (80126c0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80124e2:	681b      	ldr	r3, [r3, #0]
 80124e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80124e8:	2b00      	cmp	r3, #0
 80124ea:	d0ed      	beq.n	80124c8 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 80124ec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80124f0:	2b00      	cmp	r3, #0
 80124f2:	d173      	bne.n	80125dc <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80124f4:	4b71      	ldr	r3, [pc, #452]	@ (80126bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80124f6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80124f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80124fc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8012500:	4053      	eors	r3, r2
 8012502:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8012506:	2b00      	cmp	r3, #0
 8012508:	d015      	beq.n	8012536 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 801250a:	4b6c      	ldr	r3, [pc, #432]	@ (80126bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801250c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801250e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8012512:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8012516:	4b69      	ldr	r3, [pc, #420]	@ (80126bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8012518:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801251a:	4a68      	ldr	r2, [pc, #416]	@ (80126bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801251c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8012520:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8012522:	4b66      	ldr	r3, [pc, #408]	@ (80126bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8012524:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012526:	4a65      	ldr	r2, [pc, #404]	@ (80126bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8012528:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801252c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 801252e:	4a63      	ldr	r2, [pc, #396]	@ (80126bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8012530:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8012534:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8012536:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801253a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 801253e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8012542:	d118      	bne.n	8012576 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8012544:	f7f6 fe76 	bl	8009234 <HAL_GetTick>
 8012548:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801254c:	e00d      	b.n	801256a <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801254e:	f7f6 fe71 	bl	8009234 <HAL_GetTick>
 8012552:	4602      	mov	r2, r0
 8012554:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8012558:	1ad2      	subs	r2, r2, r3
 801255a:	f241 3388 	movw	r3, #5000	@ 0x1388
 801255e:	429a      	cmp	r2, r3
 8012560:	d903      	bls.n	801256a <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8012562:	2303      	movs	r3, #3
 8012564:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8012568:	e005      	b.n	8012576 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801256a:	4b54      	ldr	r3, [pc, #336]	@ (80126bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801256c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801256e:	f003 0302 	and.w	r3, r3, #2
 8012572:	2b00      	cmp	r3, #0
 8012574:	d0eb      	beq.n	801254e <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8012576:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801257a:	2b00      	cmp	r3, #0
 801257c:	d129      	bne.n	80125d2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 801257e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012582:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8012586:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 801258a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801258e:	d10e      	bne.n	80125ae <HAL_RCCEx_PeriphCLKConfig+0x846>
 8012590:	4b4a      	ldr	r3, [pc, #296]	@ (80126bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8012592:	691b      	ldr	r3, [r3, #16]
 8012594:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8012598:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801259c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80125a0:	091a      	lsrs	r2, r3, #4
 80125a2:	4b48      	ldr	r3, [pc, #288]	@ (80126c4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80125a4:	4013      	ands	r3, r2
 80125a6:	4a45      	ldr	r2, [pc, #276]	@ (80126bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80125a8:	430b      	orrs	r3, r1
 80125aa:	6113      	str	r3, [r2, #16]
 80125ac:	e005      	b.n	80125ba <HAL_RCCEx_PeriphCLKConfig+0x852>
 80125ae:	4b43      	ldr	r3, [pc, #268]	@ (80126bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80125b0:	691b      	ldr	r3, [r3, #16]
 80125b2:	4a42      	ldr	r2, [pc, #264]	@ (80126bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80125b4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80125b8:	6113      	str	r3, [r2, #16]
 80125ba:	4b40      	ldr	r3, [pc, #256]	@ (80126bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80125bc:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80125be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80125c2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80125c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80125ca:	4a3c      	ldr	r2, [pc, #240]	@ (80126bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80125cc:	430b      	orrs	r3, r1
 80125ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80125d0:	e008      	b.n	80125e4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80125d2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80125d6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 80125da:	e003      	b.n	80125e4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80125dc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80125e0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80125e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80125e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125ec:	f002 0301 	and.w	r3, r2, #1
 80125f0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80125f4:	2300      	movs	r3, #0
 80125f6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80125fa:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80125fe:	460b      	mov	r3, r1
 8012600:	4313      	orrs	r3, r2
 8012602:	f000 808f 	beq.w	8012724 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8012606:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801260a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801260c:	2b28      	cmp	r3, #40	@ 0x28
 801260e:	d871      	bhi.n	80126f4 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8012610:	a201      	add	r2, pc, #4	@ (adr r2, 8012618 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8012612:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012616:	bf00      	nop
 8012618:	080126fd 	.word	0x080126fd
 801261c:	080126f5 	.word	0x080126f5
 8012620:	080126f5 	.word	0x080126f5
 8012624:	080126f5 	.word	0x080126f5
 8012628:	080126f5 	.word	0x080126f5
 801262c:	080126f5 	.word	0x080126f5
 8012630:	080126f5 	.word	0x080126f5
 8012634:	080126f5 	.word	0x080126f5
 8012638:	080126c9 	.word	0x080126c9
 801263c:	080126f5 	.word	0x080126f5
 8012640:	080126f5 	.word	0x080126f5
 8012644:	080126f5 	.word	0x080126f5
 8012648:	080126f5 	.word	0x080126f5
 801264c:	080126f5 	.word	0x080126f5
 8012650:	080126f5 	.word	0x080126f5
 8012654:	080126f5 	.word	0x080126f5
 8012658:	080126df 	.word	0x080126df
 801265c:	080126f5 	.word	0x080126f5
 8012660:	080126f5 	.word	0x080126f5
 8012664:	080126f5 	.word	0x080126f5
 8012668:	080126f5 	.word	0x080126f5
 801266c:	080126f5 	.word	0x080126f5
 8012670:	080126f5 	.word	0x080126f5
 8012674:	080126f5 	.word	0x080126f5
 8012678:	080126fd 	.word	0x080126fd
 801267c:	080126f5 	.word	0x080126f5
 8012680:	080126f5 	.word	0x080126f5
 8012684:	080126f5 	.word	0x080126f5
 8012688:	080126f5 	.word	0x080126f5
 801268c:	080126f5 	.word	0x080126f5
 8012690:	080126f5 	.word	0x080126f5
 8012694:	080126f5 	.word	0x080126f5
 8012698:	080126fd 	.word	0x080126fd
 801269c:	080126f5 	.word	0x080126f5
 80126a0:	080126f5 	.word	0x080126f5
 80126a4:	080126f5 	.word	0x080126f5
 80126a8:	080126f5 	.word	0x080126f5
 80126ac:	080126f5 	.word	0x080126f5
 80126b0:	080126f5 	.word	0x080126f5
 80126b4:	080126f5 	.word	0x080126f5
 80126b8:	080126fd 	.word	0x080126fd
 80126bc:	58024400 	.word	0x58024400
 80126c0:	58024800 	.word	0x58024800
 80126c4:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80126c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80126cc:	3308      	adds	r3, #8
 80126ce:	2101      	movs	r1, #1
 80126d0:	4618      	mov	r0, r3
 80126d2:	f001 fdcb 	bl	801426c <RCCEx_PLL2_Config>
 80126d6:	4603      	mov	r3, r0
 80126d8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80126dc:	e00f      	b.n	80126fe <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80126de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80126e2:	3328      	adds	r3, #40	@ 0x28
 80126e4:	2101      	movs	r1, #1
 80126e6:	4618      	mov	r0, r3
 80126e8:	f001 fe72 	bl	80143d0 <RCCEx_PLL3_Config>
 80126ec:	4603      	mov	r3, r0
 80126ee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80126f2:	e004      	b.n	80126fe <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80126f4:	2301      	movs	r3, #1
 80126f6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80126fa:	e000      	b.n	80126fe <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 80126fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80126fe:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012702:	2b00      	cmp	r3, #0
 8012704:	d10a      	bne.n	801271c <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8012706:	4bbf      	ldr	r3, [pc, #764]	@ (8012a04 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8012708:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801270a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 801270e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012712:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8012714:	4abb      	ldr	r2, [pc, #748]	@ (8012a04 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8012716:	430b      	orrs	r3, r1
 8012718:	6553      	str	r3, [r2, #84]	@ 0x54
 801271a:	e003      	b.n	8012724 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801271c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012720:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8012724:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012728:	e9d3 2300 	ldrd	r2, r3, [r3]
 801272c:	f002 0302 	and.w	r3, r2, #2
 8012730:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8012734:	2300      	movs	r3, #0
 8012736:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 801273a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 801273e:	460b      	mov	r3, r1
 8012740:	4313      	orrs	r3, r2
 8012742:	d041      	beq.n	80127c8 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8012744:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012748:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801274a:	2b05      	cmp	r3, #5
 801274c:	d824      	bhi.n	8012798 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 801274e:	a201      	add	r2, pc, #4	@ (adr r2, 8012754 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8012750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012754:	080127a1 	.word	0x080127a1
 8012758:	0801276d 	.word	0x0801276d
 801275c:	08012783 	.word	0x08012783
 8012760:	080127a1 	.word	0x080127a1
 8012764:	080127a1 	.word	0x080127a1
 8012768:	080127a1 	.word	0x080127a1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801276c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012770:	3308      	adds	r3, #8
 8012772:	2101      	movs	r1, #1
 8012774:	4618      	mov	r0, r3
 8012776:	f001 fd79 	bl	801426c <RCCEx_PLL2_Config>
 801277a:	4603      	mov	r3, r0
 801277c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8012780:	e00f      	b.n	80127a2 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8012782:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012786:	3328      	adds	r3, #40	@ 0x28
 8012788:	2101      	movs	r1, #1
 801278a:	4618      	mov	r0, r3
 801278c:	f001 fe20 	bl	80143d0 <RCCEx_PLL3_Config>
 8012790:	4603      	mov	r3, r0
 8012792:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8012796:	e004      	b.n	80127a2 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8012798:	2301      	movs	r3, #1
 801279a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 801279e:	e000      	b.n	80127a2 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 80127a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80127a2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80127a6:	2b00      	cmp	r3, #0
 80127a8:	d10a      	bne.n	80127c0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80127aa:	4b96      	ldr	r3, [pc, #600]	@ (8012a04 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80127ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80127ae:	f023 0107 	bic.w	r1, r3, #7
 80127b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80127b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80127b8:	4a92      	ldr	r2, [pc, #584]	@ (8012a04 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80127ba:	430b      	orrs	r3, r1
 80127bc:	6553      	str	r3, [r2, #84]	@ 0x54
 80127be:	e003      	b.n	80127c8 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80127c0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80127c4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80127c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80127cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80127d0:	f002 0304 	and.w	r3, r2, #4
 80127d4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80127d8:	2300      	movs	r3, #0
 80127da:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80127de:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80127e2:	460b      	mov	r3, r1
 80127e4:	4313      	orrs	r3, r2
 80127e6:	d044      	beq.n	8012872 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80127e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80127ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80127f0:	2b05      	cmp	r3, #5
 80127f2:	d825      	bhi.n	8012840 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 80127f4:	a201      	add	r2, pc, #4	@ (adr r2, 80127fc <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 80127f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80127fa:	bf00      	nop
 80127fc:	08012849 	.word	0x08012849
 8012800:	08012815 	.word	0x08012815
 8012804:	0801282b 	.word	0x0801282b
 8012808:	08012849 	.word	0x08012849
 801280c:	08012849 	.word	0x08012849
 8012810:	08012849 	.word	0x08012849
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8012814:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012818:	3308      	adds	r3, #8
 801281a:	2101      	movs	r1, #1
 801281c:	4618      	mov	r0, r3
 801281e:	f001 fd25 	bl	801426c <RCCEx_PLL2_Config>
 8012822:	4603      	mov	r3, r0
 8012824:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8012828:	e00f      	b.n	801284a <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801282a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801282e:	3328      	adds	r3, #40	@ 0x28
 8012830:	2101      	movs	r1, #1
 8012832:	4618      	mov	r0, r3
 8012834:	f001 fdcc 	bl	80143d0 <RCCEx_PLL3_Config>
 8012838:	4603      	mov	r3, r0
 801283a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 801283e:	e004      	b.n	801284a <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8012840:	2301      	movs	r3, #1
 8012842:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8012846:	e000      	b.n	801284a <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8012848:	bf00      	nop
    }

    if (ret == HAL_OK)
 801284a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801284e:	2b00      	cmp	r3, #0
 8012850:	d10b      	bne.n	801286a <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8012852:	4b6c      	ldr	r3, [pc, #432]	@ (8012a04 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8012854:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012856:	f023 0107 	bic.w	r1, r3, #7
 801285a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801285e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8012862:	4a68      	ldr	r2, [pc, #416]	@ (8012a04 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8012864:	430b      	orrs	r3, r1
 8012866:	6593      	str	r3, [r2, #88]	@ 0x58
 8012868:	e003      	b.n	8012872 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801286a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801286e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8012872:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012876:	e9d3 2300 	ldrd	r2, r3, [r3]
 801287a:	f002 0320 	and.w	r3, r2, #32
 801287e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8012882:	2300      	movs	r3, #0
 8012884:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8012888:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 801288c:	460b      	mov	r3, r1
 801288e:	4313      	orrs	r3, r2
 8012890:	d055      	beq.n	801293e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8012892:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012896:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801289a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801289e:	d033      	beq.n	8012908 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 80128a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80128a4:	d82c      	bhi.n	8012900 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80128a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80128aa:	d02f      	beq.n	801290c <HAL_RCCEx_PeriphCLKConfig+0xba4>
 80128ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80128b0:	d826      	bhi.n	8012900 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80128b2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80128b6:	d02b      	beq.n	8012910 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 80128b8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80128bc:	d820      	bhi.n	8012900 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80128be:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80128c2:	d012      	beq.n	80128ea <HAL_RCCEx_PeriphCLKConfig+0xb82>
 80128c4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80128c8:	d81a      	bhi.n	8012900 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80128ca:	2b00      	cmp	r3, #0
 80128cc:	d022      	beq.n	8012914 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 80128ce:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80128d2:	d115      	bne.n	8012900 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80128d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80128d8:	3308      	adds	r3, #8
 80128da:	2100      	movs	r1, #0
 80128dc:	4618      	mov	r0, r3
 80128de:	f001 fcc5 	bl	801426c <RCCEx_PLL2_Config>
 80128e2:	4603      	mov	r3, r0
 80128e4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80128e8:	e015      	b.n	8012916 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80128ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80128ee:	3328      	adds	r3, #40	@ 0x28
 80128f0:	2102      	movs	r1, #2
 80128f2:	4618      	mov	r0, r3
 80128f4:	f001 fd6c 	bl	80143d0 <RCCEx_PLL3_Config>
 80128f8:	4603      	mov	r3, r0
 80128fa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80128fe:	e00a      	b.n	8012916 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8012900:	2301      	movs	r3, #1
 8012902:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8012906:	e006      	b.n	8012916 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8012908:	bf00      	nop
 801290a:	e004      	b.n	8012916 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 801290c:	bf00      	nop
 801290e:	e002      	b.n	8012916 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8012910:	bf00      	nop
 8012912:	e000      	b.n	8012916 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8012914:	bf00      	nop
    }

    if (ret == HAL_OK)
 8012916:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801291a:	2b00      	cmp	r3, #0
 801291c:	d10b      	bne.n	8012936 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 801291e:	4b39      	ldr	r3, [pc, #228]	@ (8012a04 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8012920:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012922:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8012926:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801292a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801292e:	4a35      	ldr	r2, [pc, #212]	@ (8012a04 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8012930:	430b      	orrs	r3, r1
 8012932:	6553      	str	r3, [r2, #84]	@ 0x54
 8012934:	e003      	b.n	801293e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012936:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801293a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 801293e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012946:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 801294a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 801294e:	2300      	movs	r3, #0
 8012950:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8012954:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8012958:	460b      	mov	r3, r1
 801295a:	4313      	orrs	r3, r2
 801295c:	d058      	beq.n	8012a10 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 801295e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012962:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8012966:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 801296a:	d033      	beq.n	80129d4 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 801296c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8012970:	d82c      	bhi.n	80129cc <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8012972:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8012976:	d02f      	beq.n	80129d8 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8012978:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801297c:	d826      	bhi.n	80129cc <HAL_RCCEx_PeriphCLKConfig+0xc64>
 801297e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8012982:	d02b      	beq.n	80129dc <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8012984:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8012988:	d820      	bhi.n	80129cc <HAL_RCCEx_PeriphCLKConfig+0xc64>
 801298a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801298e:	d012      	beq.n	80129b6 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8012990:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8012994:	d81a      	bhi.n	80129cc <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8012996:	2b00      	cmp	r3, #0
 8012998:	d022      	beq.n	80129e0 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 801299a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801299e:	d115      	bne.n	80129cc <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80129a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80129a4:	3308      	adds	r3, #8
 80129a6:	2100      	movs	r1, #0
 80129a8:	4618      	mov	r0, r3
 80129aa:	f001 fc5f 	bl	801426c <RCCEx_PLL2_Config>
 80129ae:	4603      	mov	r3, r0
 80129b0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80129b4:	e015      	b.n	80129e2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80129b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80129ba:	3328      	adds	r3, #40	@ 0x28
 80129bc:	2102      	movs	r1, #2
 80129be:	4618      	mov	r0, r3
 80129c0:	f001 fd06 	bl	80143d0 <RCCEx_PLL3_Config>
 80129c4:	4603      	mov	r3, r0
 80129c6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80129ca:	e00a      	b.n	80129e2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80129cc:	2301      	movs	r3, #1
 80129ce:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80129d2:	e006      	b.n	80129e2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80129d4:	bf00      	nop
 80129d6:	e004      	b.n	80129e2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80129d8:	bf00      	nop
 80129da:	e002      	b.n	80129e2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80129dc:	bf00      	nop
 80129de:	e000      	b.n	80129e2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80129e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80129e2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80129e6:	2b00      	cmp	r3, #0
 80129e8:	d10e      	bne.n	8012a08 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80129ea:	4b06      	ldr	r3, [pc, #24]	@ (8012a04 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80129ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80129ee:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80129f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80129f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80129fa:	4a02      	ldr	r2, [pc, #8]	@ (8012a04 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80129fc:	430b      	orrs	r3, r1
 80129fe:	6593      	str	r3, [r2, #88]	@ 0x58
 8012a00:	e006      	b.n	8012a10 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8012a02:	bf00      	nop
 8012a04:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012a08:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012a0c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8012a10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012a14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a18:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8012a1c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8012a20:	2300      	movs	r3, #0
 8012a22:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8012a26:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8012a2a:	460b      	mov	r3, r1
 8012a2c:	4313      	orrs	r3, r2
 8012a2e:	d055      	beq.n	8012adc <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8012a30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012a34:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8012a38:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8012a3c:	d033      	beq.n	8012aa6 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8012a3e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8012a42:	d82c      	bhi.n	8012a9e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8012a44:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8012a48:	d02f      	beq.n	8012aaa <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8012a4a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8012a4e:	d826      	bhi.n	8012a9e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8012a50:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8012a54:	d02b      	beq.n	8012aae <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8012a56:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8012a5a:	d820      	bhi.n	8012a9e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8012a5c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8012a60:	d012      	beq.n	8012a88 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8012a62:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8012a66:	d81a      	bhi.n	8012a9e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8012a68:	2b00      	cmp	r3, #0
 8012a6a:	d022      	beq.n	8012ab2 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8012a6c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8012a70:	d115      	bne.n	8012a9e <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8012a72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012a76:	3308      	adds	r3, #8
 8012a78:	2100      	movs	r1, #0
 8012a7a:	4618      	mov	r0, r3
 8012a7c:	f001 fbf6 	bl	801426c <RCCEx_PLL2_Config>
 8012a80:	4603      	mov	r3, r0
 8012a82:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8012a86:	e015      	b.n	8012ab4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8012a88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012a8c:	3328      	adds	r3, #40	@ 0x28
 8012a8e:	2102      	movs	r1, #2
 8012a90:	4618      	mov	r0, r3
 8012a92:	f001 fc9d 	bl	80143d0 <RCCEx_PLL3_Config>
 8012a96:	4603      	mov	r3, r0
 8012a98:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8012a9c:	e00a      	b.n	8012ab4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8012a9e:	2301      	movs	r3, #1
 8012aa0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8012aa4:	e006      	b.n	8012ab4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8012aa6:	bf00      	nop
 8012aa8:	e004      	b.n	8012ab4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8012aaa:	bf00      	nop
 8012aac:	e002      	b.n	8012ab4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8012aae:	bf00      	nop
 8012ab0:	e000      	b.n	8012ab4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8012ab2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8012ab4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012ab8:	2b00      	cmp	r3, #0
 8012aba:	d10b      	bne.n	8012ad4 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8012abc:	4ba0      	ldr	r3, [pc, #640]	@ (8012d40 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012abe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012ac0:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8012ac4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012ac8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8012acc:	4a9c      	ldr	r2, [pc, #624]	@ (8012d40 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012ace:	430b      	orrs	r3, r1
 8012ad0:	6593      	str	r3, [r2, #88]	@ 0x58
 8012ad2:	e003      	b.n	8012adc <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012ad4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012ad8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8012adc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ae4:	f002 0308 	and.w	r3, r2, #8
 8012ae8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8012aec:	2300      	movs	r3, #0
 8012aee:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8012af2:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8012af6:	460b      	mov	r3, r1
 8012af8:	4313      	orrs	r3, r2
 8012afa:	d01e      	beq.n	8012b3a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8012afc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012b00:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012b04:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8012b08:	d10c      	bne.n	8012b24 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8012b0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012b0e:	3328      	adds	r3, #40	@ 0x28
 8012b10:	2102      	movs	r1, #2
 8012b12:	4618      	mov	r0, r3
 8012b14:	f001 fc5c 	bl	80143d0 <RCCEx_PLL3_Config>
 8012b18:	4603      	mov	r3, r0
 8012b1a:	2b00      	cmp	r3, #0
 8012b1c:	d002      	beq.n	8012b24 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8012b1e:	2301      	movs	r3, #1
 8012b20:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8012b24:	4b86      	ldr	r3, [pc, #536]	@ (8012d40 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012b26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012b28:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8012b2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012b30:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012b34:	4a82      	ldr	r2, [pc, #520]	@ (8012d40 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012b36:	430b      	orrs	r3, r1
 8012b38:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8012b3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b42:	f002 0310 	and.w	r3, r2, #16
 8012b46:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8012b4a:	2300      	movs	r3, #0
 8012b4c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8012b50:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8012b54:	460b      	mov	r3, r1
 8012b56:	4313      	orrs	r3, r2
 8012b58:	d01e      	beq.n	8012b98 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8012b5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012b5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8012b62:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8012b66:	d10c      	bne.n	8012b82 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8012b68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012b6c:	3328      	adds	r3, #40	@ 0x28
 8012b6e:	2102      	movs	r1, #2
 8012b70:	4618      	mov	r0, r3
 8012b72:	f001 fc2d 	bl	80143d0 <RCCEx_PLL3_Config>
 8012b76:	4603      	mov	r3, r0
 8012b78:	2b00      	cmp	r3, #0
 8012b7a:	d002      	beq.n	8012b82 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8012b7c:	2301      	movs	r3, #1
 8012b7e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8012b82:	4b6f      	ldr	r3, [pc, #444]	@ (8012d40 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012b84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012b86:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8012b8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012b8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8012b92:	4a6b      	ldr	r2, [pc, #428]	@ (8012d40 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012b94:	430b      	orrs	r3, r1
 8012b96:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8012b98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ba0:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8012ba4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8012ba6:	2300      	movs	r3, #0
 8012ba8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8012baa:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8012bae:	460b      	mov	r3, r1
 8012bb0:	4313      	orrs	r3, r2
 8012bb2:	d03e      	beq.n	8012c32 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8012bb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012bb8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8012bbc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8012bc0:	d022      	beq.n	8012c08 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8012bc2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8012bc6:	d81b      	bhi.n	8012c00 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8012bc8:	2b00      	cmp	r3, #0
 8012bca:	d003      	beq.n	8012bd4 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8012bcc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8012bd0:	d00b      	beq.n	8012bea <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8012bd2:	e015      	b.n	8012c00 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8012bd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012bd8:	3308      	adds	r3, #8
 8012bda:	2100      	movs	r1, #0
 8012bdc:	4618      	mov	r0, r3
 8012bde:	f001 fb45 	bl	801426c <RCCEx_PLL2_Config>
 8012be2:	4603      	mov	r3, r0
 8012be4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8012be8:	e00f      	b.n	8012c0a <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8012bea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012bee:	3328      	adds	r3, #40	@ 0x28
 8012bf0:	2102      	movs	r1, #2
 8012bf2:	4618      	mov	r0, r3
 8012bf4:	f001 fbec 	bl	80143d0 <RCCEx_PLL3_Config>
 8012bf8:	4603      	mov	r3, r0
 8012bfa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8012bfe:	e004      	b.n	8012c0a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8012c00:	2301      	movs	r3, #1
 8012c02:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8012c06:	e000      	b.n	8012c0a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8012c08:	bf00      	nop
    }

    if (ret == HAL_OK)
 8012c0a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012c0e:	2b00      	cmp	r3, #0
 8012c10:	d10b      	bne.n	8012c2a <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8012c12:	4b4b      	ldr	r3, [pc, #300]	@ (8012d40 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012c14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012c16:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8012c1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012c1e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8012c22:	4a47      	ldr	r2, [pc, #284]	@ (8012d40 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012c24:	430b      	orrs	r3, r1
 8012c26:	6593      	str	r3, [r2, #88]	@ 0x58
 8012c28:	e003      	b.n	8012c32 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012c2a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012c2e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8012c32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c3a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8012c3e:	673b      	str	r3, [r7, #112]	@ 0x70
 8012c40:	2300      	movs	r3, #0
 8012c42:	677b      	str	r3, [r7, #116]	@ 0x74
 8012c44:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8012c48:	460b      	mov	r3, r1
 8012c4a:	4313      	orrs	r3, r2
 8012c4c:	d03b      	beq.n	8012cc6 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8012c4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012c52:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8012c56:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8012c5a:	d01f      	beq.n	8012c9c <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8012c5c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8012c60:	d818      	bhi.n	8012c94 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8012c62:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8012c66:	d003      	beq.n	8012c70 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8012c68:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8012c6c:	d007      	beq.n	8012c7e <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8012c6e:	e011      	b.n	8012c94 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8012c70:	4b33      	ldr	r3, [pc, #204]	@ (8012d40 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012c72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012c74:	4a32      	ldr	r2, [pc, #200]	@ (8012d40 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012c76:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8012c7a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8012c7c:	e00f      	b.n	8012c9e <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8012c7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012c82:	3328      	adds	r3, #40	@ 0x28
 8012c84:	2101      	movs	r1, #1
 8012c86:	4618      	mov	r0, r3
 8012c88:	f001 fba2 	bl	80143d0 <RCCEx_PLL3_Config>
 8012c8c:	4603      	mov	r3, r0
 8012c8e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8012c92:	e004      	b.n	8012c9e <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8012c94:	2301      	movs	r3, #1
 8012c96:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8012c9a:	e000      	b.n	8012c9e <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8012c9c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8012c9e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012ca2:	2b00      	cmp	r3, #0
 8012ca4:	d10b      	bne.n	8012cbe <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8012ca6:	4b26      	ldr	r3, [pc, #152]	@ (8012d40 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012ca8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012caa:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8012cae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012cb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8012cb6:	4a22      	ldr	r2, [pc, #136]	@ (8012d40 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012cb8:	430b      	orrs	r3, r1
 8012cba:	6553      	str	r3, [r2, #84]	@ 0x54
 8012cbc:	e003      	b.n	8012cc6 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012cbe:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012cc2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8012cc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012cce:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8012cd2:	66bb      	str	r3, [r7, #104]	@ 0x68
 8012cd4:	2300      	movs	r3, #0
 8012cd6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8012cd8:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8012cdc:	460b      	mov	r3, r1
 8012cde:	4313      	orrs	r3, r2
 8012ce0:	d034      	beq.n	8012d4c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8012ce2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012ce6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012ce8:	2b00      	cmp	r3, #0
 8012cea:	d003      	beq.n	8012cf4 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8012cec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8012cf0:	d007      	beq.n	8012d02 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8012cf2:	e011      	b.n	8012d18 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8012cf4:	4b12      	ldr	r3, [pc, #72]	@ (8012d40 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012cf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012cf8:	4a11      	ldr	r2, [pc, #68]	@ (8012d40 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012cfa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8012cfe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8012d00:	e00e      	b.n	8012d20 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8012d02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012d06:	3308      	adds	r3, #8
 8012d08:	2102      	movs	r1, #2
 8012d0a:	4618      	mov	r0, r3
 8012d0c:	f001 faae 	bl	801426c <RCCEx_PLL2_Config>
 8012d10:	4603      	mov	r3, r0
 8012d12:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8012d16:	e003      	b.n	8012d20 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8012d18:	2301      	movs	r3, #1
 8012d1a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8012d1e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8012d20:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012d24:	2b00      	cmp	r3, #0
 8012d26:	d10d      	bne.n	8012d44 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8012d28:	4b05      	ldr	r3, [pc, #20]	@ (8012d40 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012d2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012d2c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8012d30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012d34:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012d36:	4a02      	ldr	r2, [pc, #8]	@ (8012d40 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012d38:	430b      	orrs	r3, r1
 8012d3a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8012d3c:	e006      	b.n	8012d4c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8012d3e:	bf00      	nop
 8012d40:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012d44:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012d48:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8012d4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d54:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8012d58:	663b      	str	r3, [r7, #96]	@ 0x60
 8012d5a:	2300      	movs	r3, #0
 8012d5c:	667b      	str	r3, [r7, #100]	@ 0x64
 8012d5e:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8012d62:	460b      	mov	r3, r1
 8012d64:	4313      	orrs	r3, r2
 8012d66:	d00c      	beq.n	8012d82 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8012d68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012d6c:	3328      	adds	r3, #40	@ 0x28
 8012d6e:	2102      	movs	r1, #2
 8012d70:	4618      	mov	r0, r3
 8012d72:	f001 fb2d 	bl	80143d0 <RCCEx_PLL3_Config>
 8012d76:	4603      	mov	r3, r0
 8012d78:	2b00      	cmp	r3, #0
 8012d7a:	d002      	beq.n	8012d82 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8012d7c:	2301      	movs	r3, #1
 8012d7e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8012d82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012d86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d8a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8012d8e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8012d90:	2300      	movs	r3, #0
 8012d92:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8012d94:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8012d98:	460b      	mov	r3, r1
 8012d9a:	4313      	orrs	r3, r2
 8012d9c:	d036      	beq.n	8012e0c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8012d9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012da2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8012da4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8012da8:	d018      	beq.n	8012ddc <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8012daa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8012dae:	d811      	bhi.n	8012dd4 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8012db0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012db4:	d014      	beq.n	8012de0 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8012db6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012dba:	d80b      	bhi.n	8012dd4 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8012dbc:	2b00      	cmp	r3, #0
 8012dbe:	d011      	beq.n	8012de4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8012dc0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8012dc4:	d106      	bne.n	8012dd4 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8012dc6:	4bb7      	ldr	r3, [pc, #732]	@ (80130a4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8012dc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012dca:	4ab6      	ldr	r2, [pc, #728]	@ (80130a4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8012dcc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8012dd0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8012dd2:	e008      	b.n	8012de6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8012dd4:	2301      	movs	r3, #1
 8012dd6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8012dda:	e004      	b.n	8012de6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8012ddc:	bf00      	nop
 8012dde:	e002      	b.n	8012de6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8012de0:	bf00      	nop
 8012de2:	e000      	b.n	8012de6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8012de4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8012de6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012dea:	2b00      	cmp	r3, #0
 8012dec:	d10a      	bne.n	8012e04 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8012dee:	4bad      	ldr	r3, [pc, #692]	@ (80130a4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8012df0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012df2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8012df6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012dfa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8012dfc:	4aa9      	ldr	r2, [pc, #676]	@ (80130a4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8012dfe:	430b      	orrs	r3, r1
 8012e00:	6553      	str	r3, [r2, #84]	@ 0x54
 8012e02:	e003      	b.n	8012e0c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012e04:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012e08:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8012e0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e14:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8012e18:	653b      	str	r3, [r7, #80]	@ 0x50
 8012e1a:	2300      	movs	r3, #0
 8012e1c:	657b      	str	r3, [r7, #84]	@ 0x54
 8012e1e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8012e22:	460b      	mov	r3, r1
 8012e24:	4313      	orrs	r3, r2
 8012e26:	d009      	beq.n	8012e3c <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8012e28:	4b9e      	ldr	r3, [pc, #632]	@ (80130a4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8012e2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012e2c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8012e30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012e34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012e36:	4a9b      	ldr	r2, [pc, #620]	@ (80130a4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8012e38:	430b      	orrs	r3, r1
 8012e3a:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8012e3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e44:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8012e48:	64bb      	str	r3, [r7, #72]	@ 0x48
 8012e4a:	2300      	movs	r3, #0
 8012e4c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8012e4e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8012e52:	460b      	mov	r3, r1
 8012e54:	4313      	orrs	r3, r2
 8012e56:	d009      	beq.n	8012e6c <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8012e58:	4b92      	ldr	r3, [pc, #584]	@ (80130a4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8012e5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012e5c:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8012e60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012e64:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8012e66:	4a8f      	ldr	r2, [pc, #572]	@ (80130a4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8012e68:	430b      	orrs	r3, r1
 8012e6a:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8012e6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e74:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8012e78:	643b      	str	r3, [r7, #64]	@ 0x40
 8012e7a:	2300      	movs	r3, #0
 8012e7c:	647b      	str	r3, [r7, #68]	@ 0x44
 8012e7e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8012e82:	460b      	mov	r3, r1
 8012e84:	4313      	orrs	r3, r2
 8012e86:	d00e      	beq.n	8012ea6 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8012e88:	4b86      	ldr	r3, [pc, #536]	@ (80130a4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8012e8a:	691b      	ldr	r3, [r3, #16]
 8012e8c:	4a85      	ldr	r2, [pc, #532]	@ (80130a4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8012e8e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8012e92:	6113      	str	r3, [r2, #16]
 8012e94:	4b83      	ldr	r3, [pc, #524]	@ (80130a4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8012e96:	6919      	ldr	r1, [r3, #16]
 8012e98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012e9c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8012ea0:	4a80      	ldr	r2, [pc, #512]	@ (80130a4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8012ea2:	430b      	orrs	r3, r1
 8012ea4:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8012ea6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012eae:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8012eb2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8012eb4:	2300      	movs	r3, #0
 8012eb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8012eb8:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8012ebc:	460b      	mov	r3, r1
 8012ebe:	4313      	orrs	r3, r2
 8012ec0:	d009      	beq.n	8012ed6 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8012ec2:	4b78      	ldr	r3, [pc, #480]	@ (80130a4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8012ec4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012ec6:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8012eca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012ece:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012ed0:	4a74      	ldr	r2, [pc, #464]	@ (80130a4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8012ed2:	430b      	orrs	r3, r1
 8012ed4:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8012ed6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ede:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8012ee2:	633b      	str	r3, [r7, #48]	@ 0x30
 8012ee4:	2300      	movs	r3, #0
 8012ee6:	637b      	str	r3, [r7, #52]	@ 0x34
 8012ee8:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8012eec:	460b      	mov	r3, r1
 8012eee:	4313      	orrs	r3, r2
 8012ef0:	d00a      	beq.n	8012f08 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8012ef2:	4b6c      	ldr	r3, [pc, #432]	@ (80130a4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8012ef4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012ef6:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8012efa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012efe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8012f02:	4a68      	ldr	r2, [pc, #416]	@ (80130a4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8012f04:	430b      	orrs	r3, r1
 8012f06:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8012f08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012f0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f10:	2100      	movs	r1, #0
 8012f12:	62b9      	str	r1, [r7, #40]	@ 0x28
 8012f14:	f003 0301 	and.w	r3, r3, #1
 8012f18:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8012f1a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8012f1e:	460b      	mov	r3, r1
 8012f20:	4313      	orrs	r3, r2
 8012f22:	d011      	beq.n	8012f48 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8012f24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012f28:	3308      	adds	r3, #8
 8012f2a:	2100      	movs	r1, #0
 8012f2c:	4618      	mov	r0, r3
 8012f2e:	f001 f99d 	bl	801426c <RCCEx_PLL2_Config>
 8012f32:	4603      	mov	r3, r0
 8012f34:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8012f38:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012f3c:	2b00      	cmp	r3, #0
 8012f3e:	d003      	beq.n	8012f48 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012f40:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012f44:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8012f48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f50:	2100      	movs	r1, #0
 8012f52:	6239      	str	r1, [r7, #32]
 8012f54:	f003 0302 	and.w	r3, r3, #2
 8012f58:	627b      	str	r3, [r7, #36]	@ 0x24
 8012f5a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8012f5e:	460b      	mov	r3, r1
 8012f60:	4313      	orrs	r3, r2
 8012f62:	d011      	beq.n	8012f88 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8012f64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012f68:	3308      	adds	r3, #8
 8012f6a:	2101      	movs	r1, #1
 8012f6c:	4618      	mov	r0, r3
 8012f6e:	f001 f97d 	bl	801426c <RCCEx_PLL2_Config>
 8012f72:	4603      	mov	r3, r0
 8012f74:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8012f78:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012f7c:	2b00      	cmp	r3, #0
 8012f7e:	d003      	beq.n	8012f88 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012f80:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012f84:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8012f88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f90:	2100      	movs	r1, #0
 8012f92:	61b9      	str	r1, [r7, #24]
 8012f94:	f003 0304 	and.w	r3, r3, #4
 8012f98:	61fb      	str	r3, [r7, #28]
 8012f9a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8012f9e:	460b      	mov	r3, r1
 8012fa0:	4313      	orrs	r3, r2
 8012fa2:	d011      	beq.n	8012fc8 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8012fa4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012fa8:	3308      	adds	r3, #8
 8012faa:	2102      	movs	r1, #2
 8012fac:	4618      	mov	r0, r3
 8012fae:	f001 f95d 	bl	801426c <RCCEx_PLL2_Config>
 8012fb2:	4603      	mov	r3, r0
 8012fb4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8012fb8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012fbc:	2b00      	cmp	r3, #0
 8012fbe:	d003      	beq.n	8012fc8 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012fc0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012fc4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8012fc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012fd0:	2100      	movs	r1, #0
 8012fd2:	6139      	str	r1, [r7, #16]
 8012fd4:	f003 0308 	and.w	r3, r3, #8
 8012fd8:	617b      	str	r3, [r7, #20]
 8012fda:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8012fde:	460b      	mov	r3, r1
 8012fe0:	4313      	orrs	r3, r2
 8012fe2:	d011      	beq.n	8013008 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8012fe4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012fe8:	3328      	adds	r3, #40	@ 0x28
 8012fea:	2100      	movs	r1, #0
 8012fec:	4618      	mov	r0, r3
 8012fee:	f001 f9ef 	bl	80143d0 <RCCEx_PLL3_Config>
 8012ff2:	4603      	mov	r3, r0
 8012ff4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8012ff8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012ffc:	2b00      	cmp	r3, #0
 8012ffe:	d003      	beq.n	8013008 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8013000:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8013004:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8013008:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801300c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013010:	2100      	movs	r1, #0
 8013012:	60b9      	str	r1, [r7, #8]
 8013014:	f003 0310 	and.w	r3, r3, #16
 8013018:	60fb      	str	r3, [r7, #12]
 801301a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 801301e:	460b      	mov	r3, r1
 8013020:	4313      	orrs	r3, r2
 8013022:	d011      	beq.n	8013048 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8013024:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8013028:	3328      	adds	r3, #40	@ 0x28
 801302a:	2101      	movs	r1, #1
 801302c:	4618      	mov	r0, r3
 801302e:	f001 f9cf 	bl	80143d0 <RCCEx_PLL3_Config>
 8013032:	4603      	mov	r3, r0
 8013034:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8013038:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801303c:	2b00      	cmp	r3, #0
 801303e:	d003      	beq.n	8013048 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8013040:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8013044:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8013048:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801304c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013050:	2100      	movs	r1, #0
 8013052:	6039      	str	r1, [r7, #0]
 8013054:	f003 0320 	and.w	r3, r3, #32
 8013058:	607b      	str	r3, [r7, #4]
 801305a:	e9d7 1200 	ldrd	r1, r2, [r7]
 801305e:	460b      	mov	r3, r1
 8013060:	4313      	orrs	r3, r2
 8013062:	d011      	beq.n	8013088 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8013064:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8013068:	3328      	adds	r3, #40	@ 0x28
 801306a:	2102      	movs	r1, #2
 801306c:	4618      	mov	r0, r3
 801306e:	f001 f9af 	bl	80143d0 <RCCEx_PLL3_Config>
 8013072:	4603      	mov	r3, r0
 8013074:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8013078:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801307c:	2b00      	cmp	r3, #0
 801307e:	d003      	beq.n	8013088 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8013080:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8013084:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 8013088:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 801308c:	2b00      	cmp	r3, #0
 801308e:	d101      	bne.n	8013094 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8013090:	2300      	movs	r3, #0
 8013092:	e000      	b.n	8013096 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8013094:	2301      	movs	r3, #1
}
 8013096:	4618      	mov	r0, r3
 8013098:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 801309c:	46bd      	mov	sp, r7
 801309e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80130a2:	bf00      	nop
 80130a4:	58024400 	.word	0x58024400

080130a8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80130a8:	b580      	push	{r7, lr}
 80130aa:	b090      	sub	sp, #64	@ 0x40
 80130ac:	af00      	add	r7, sp, #0
 80130ae:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80130b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80130b6:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 80130ba:	430b      	orrs	r3, r1
 80130bc:	f040 8094 	bne.w	80131e8 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 80130c0:	4b9b      	ldr	r3, [pc, #620]	@ (8013330 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80130c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80130c4:	f003 0307 	and.w	r3, r3, #7
 80130c8:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80130ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80130cc:	2b04      	cmp	r3, #4
 80130ce:	f200 8087 	bhi.w	80131e0 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 80130d2:	a201      	add	r2, pc, #4	@ (adr r2, 80130d8 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 80130d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80130d8:	080130ed 	.word	0x080130ed
 80130dc:	08013115 	.word	0x08013115
 80130e0:	0801313d 	.word	0x0801313d
 80130e4:	080131d9 	.word	0x080131d9
 80130e8:	08013165 	.word	0x08013165
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80130ec:	4b90      	ldr	r3, [pc, #576]	@ (8013330 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80130ee:	681b      	ldr	r3, [r3, #0]
 80130f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80130f4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80130f8:	d108      	bne.n	801310c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80130fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80130fe:	4618      	mov	r0, r3
 8013100:	f000 ff62 	bl	8013fc8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8013104:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013106:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013108:	f000 bc93 	b.w	8013a32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801310c:	2300      	movs	r3, #0
 801310e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013110:	f000 bc8f 	b.w	8013a32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8013114:	4b86      	ldr	r3, [pc, #536]	@ (8013330 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8013116:	681b      	ldr	r3, [r3, #0]
 8013118:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801311c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8013120:	d108      	bne.n	8013134 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8013122:	f107 0318 	add.w	r3, r7, #24
 8013126:	4618      	mov	r0, r3
 8013128:	f000 fca6 	bl	8013a78 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 801312c:	69bb      	ldr	r3, [r7, #24]
 801312e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013130:	f000 bc7f 	b.w	8013a32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013134:	2300      	movs	r3, #0
 8013136:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013138:	f000 bc7b 	b.w	8013a32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 801313c:	4b7c      	ldr	r3, [pc, #496]	@ (8013330 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801313e:	681b      	ldr	r3, [r3, #0]
 8013140:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8013144:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8013148:	d108      	bne.n	801315c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801314a:	f107 030c 	add.w	r3, r7, #12
 801314e:	4618      	mov	r0, r3
 8013150:	f000 fde6 	bl	8013d20 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8013154:	68fb      	ldr	r3, [r7, #12]
 8013156:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013158:	f000 bc6b 	b.w	8013a32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801315c:	2300      	movs	r3, #0
 801315e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013160:	f000 bc67 	b.w	8013a32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8013164:	4b72      	ldr	r3, [pc, #456]	@ (8013330 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8013166:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013168:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 801316c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 801316e:	4b70      	ldr	r3, [pc, #448]	@ (8013330 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8013170:	681b      	ldr	r3, [r3, #0]
 8013172:	f003 0304 	and.w	r3, r3, #4
 8013176:	2b04      	cmp	r3, #4
 8013178:	d10c      	bne.n	8013194 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 801317a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801317c:	2b00      	cmp	r3, #0
 801317e:	d109      	bne.n	8013194 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8013180:	4b6b      	ldr	r3, [pc, #428]	@ (8013330 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8013182:	681b      	ldr	r3, [r3, #0]
 8013184:	08db      	lsrs	r3, r3, #3
 8013186:	f003 0303 	and.w	r3, r3, #3
 801318a:	4a6a      	ldr	r2, [pc, #424]	@ (8013334 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 801318c:	fa22 f303 	lsr.w	r3, r2, r3
 8013190:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013192:	e01f      	b.n	80131d4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8013194:	4b66      	ldr	r3, [pc, #408]	@ (8013330 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8013196:	681b      	ldr	r3, [r3, #0]
 8013198:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801319c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80131a0:	d106      	bne.n	80131b0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 80131a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80131a4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80131a8:	d102      	bne.n	80131b0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80131aa:	4b63      	ldr	r3, [pc, #396]	@ (8013338 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80131ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80131ae:	e011      	b.n	80131d4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80131b0:	4b5f      	ldr	r3, [pc, #380]	@ (8013330 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80131b2:	681b      	ldr	r3, [r3, #0]
 80131b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80131b8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80131bc:	d106      	bne.n	80131cc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 80131be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80131c0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80131c4:	d102      	bne.n	80131cc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80131c6:	4b5d      	ldr	r3, [pc, #372]	@ (801333c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80131c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80131ca:	e003      	b.n	80131d4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80131cc:	2300      	movs	r3, #0
 80131ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80131d0:	f000 bc2f 	b.w	8013a32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80131d4:	f000 bc2d 	b.w	8013a32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80131d8:	4b59      	ldr	r3, [pc, #356]	@ (8013340 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80131da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80131dc:	f000 bc29 	b.w	8013a32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 80131e0:	2300      	movs	r3, #0
 80131e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80131e4:	f000 bc25 	b.w	8013a32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80131e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80131ec:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 80131f0:	430b      	orrs	r3, r1
 80131f2:	f040 80a7 	bne.w	8013344 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 80131f6:	4b4e      	ldr	r3, [pc, #312]	@ (8013330 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80131f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80131fa:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 80131fe:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8013200:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013202:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8013206:	d054      	beq.n	80132b2 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 8013208:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801320a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 801320e:	f200 808b 	bhi.w	8013328 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8013212:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013214:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8013218:	f000 8083 	beq.w	8013322 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 801321c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801321e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8013222:	f200 8081 	bhi.w	8013328 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8013226:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013228:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 801322c:	d02f      	beq.n	801328e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 801322e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013230:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8013234:	d878      	bhi.n	8013328 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8013236:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013238:	2b00      	cmp	r3, #0
 801323a:	d004      	beq.n	8013246 <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 801323c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801323e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8013242:	d012      	beq.n	801326a <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 8013244:	e070      	b.n	8013328 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8013246:	4b3a      	ldr	r3, [pc, #232]	@ (8013330 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8013248:	681b      	ldr	r3, [r3, #0]
 801324a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801324e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8013252:	d107      	bne.n	8013264 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8013254:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8013258:	4618      	mov	r0, r3
 801325a:	f000 feb5 	bl	8013fc8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 801325e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013260:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013262:	e3e6      	b.n	8013a32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013264:	2300      	movs	r3, #0
 8013266:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013268:	e3e3      	b.n	8013a32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801326a:	4b31      	ldr	r3, [pc, #196]	@ (8013330 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801326c:	681b      	ldr	r3, [r3, #0]
 801326e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8013272:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8013276:	d107      	bne.n	8013288 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8013278:	f107 0318 	add.w	r3, r7, #24
 801327c:	4618      	mov	r0, r3
 801327e:	f000 fbfb 	bl	8013a78 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8013282:	69bb      	ldr	r3, [r7, #24]
 8013284:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013286:	e3d4      	b.n	8013a32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013288:	2300      	movs	r3, #0
 801328a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801328c:	e3d1      	b.n	8013a32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 801328e:	4b28      	ldr	r3, [pc, #160]	@ (8013330 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8013290:	681b      	ldr	r3, [r3, #0]
 8013292:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8013296:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801329a:	d107      	bne.n	80132ac <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801329c:	f107 030c 	add.w	r3, r7, #12
 80132a0:	4618      	mov	r0, r3
 80132a2:	f000 fd3d 	bl	8013d20 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80132a6:	68fb      	ldr	r3, [r7, #12]
 80132a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80132aa:	e3c2      	b.n	8013a32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80132ac:	2300      	movs	r3, #0
 80132ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80132b0:	e3bf      	b.n	8013a32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80132b2:	4b1f      	ldr	r3, [pc, #124]	@ (8013330 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80132b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80132b6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80132ba:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80132bc:	4b1c      	ldr	r3, [pc, #112]	@ (8013330 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80132be:	681b      	ldr	r3, [r3, #0]
 80132c0:	f003 0304 	and.w	r3, r3, #4
 80132c4:	2b04      	cmp	r3, #4
 80132c6:	d10c      	bne.n	80132e2 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 80132c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80132ca:	2b00      	cmp	r3, #0
 80132cc:	d109      	bne.n	80132e2 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80132ce:	4b18      	ldr	r3, [pc, #96]	@ (8013330 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80132d0:	681b      	ldr	r3, [r3, #0]
 80132d2:	08db      	lsrs	r3, r3, #3
 80132d4:	f003 0303 	and.w	r3, r3, #3
 80132d8:	4a16      	ldr	r2, [pc, #88]	@ (8013334 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 80132da:	fa22 f303 	lsr.w	r3, r2, r3
 80132de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80132e0:	e01e      	b.n	8013320 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80132e2:	4b13      	ldr	r3, [pc, #76]	@ (8013330 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80132e4:	681b      	ldr	r3, [r3, #0]
 80132e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80132ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80132ee:	d106      	bne.n	80132fe <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 80132f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80132f2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80132f6:	d102      	bne.n	80132fe <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80132f8:	4b0f      	ldr	r3, [pc, #60]	@ (8013338 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80132fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80132fc:	e010      	b.n	8013320 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80132fe:	4b0c      	ldr	r3, [pc, #48]	@ (8013330 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8013300:	681b      	ldr	r3, [r3, #0]
 8013302:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8013306:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801330a:	d106      	bne.n	801331a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 801330c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801330e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8013312:	d102      	bne.n	801331a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8013314:	4b09      	ldr	r3, [pc, #36]	@ (801333c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8013316:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013318:	e002      	b.n	8013320 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 801331a:	2300      	movs	r3, #0
 801331c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 801331e:	e388      	b.n	8013a32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8013320:	e387      	b.n	8013a32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8013322:	4b07      	ldr	r3, [pc, #28]	@ (8013340 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8013324:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013326:	e384      	b.n	8013a32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8013328:	2300      	movs	r3, #0
 801332a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801332c:	e381      	b.n	8013a32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 801332e:	bf00      	nop
 8013330:	58024400 	.word	0x58024400
 8013334:	03d09000 	.word	0x03d09000
 8013338:	003d0900 	.word	0x003d0900
 801333c:	016e3600 	.word	0x016e3600
 8013340:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8013344:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013348:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 801334c:	430b      	orrs	r3, r1
 801334e:	f040 809c 	bne.w	801348a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8013352:	4b9e      	ldr	r3, [pc, #632]	@ (80135cc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8013354:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8013356:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 801335a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 801335c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801335e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8013362:	d054      	beq.n	801340e <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 8013364:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013366:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 801336a:	f200 808b 	bhi.w	8013484 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 801336e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013370:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8013374:	f000 8083 	beq.w	801347e <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 8013378:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801337a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 801337e:	f200 8081 	bhi.w	8013484 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8013382:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013384:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8013388:	d02f      	beq.n	80133ea <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 801338a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801338c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8013390:	d878      	bhi.n	8013484 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8013392:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013394:	2b00      	cmp	r3, #0
 8013396:	d004      	beq.n	80133a2 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8013398:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801339a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801339e:	d012      	beq.n	80133c6 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 80133a0:	e070      	b.n	8013484 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80133a2:	4b8a      	ldr	r3, [pc, #552]	@ (80135cc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80133a4:	681b      	ldr	r3, [r3, #0]
 80133a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80133aa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80133ae:	d107      	bne.n	80133c0 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80133b0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80133b4:	4618      	mov	r0, r3
 80133b6:	f000 fe07 	bl	8013fc8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80133ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80133bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80133be:	e338      	b.n	8013a32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80133c0:	2300      	movs	r3, #0
 80133c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80133c4:	e335      	b.n	8013a32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80133c6:	4b81      	ldr	r3, [pc, #516]	@ (80135cc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80133c8:	681b      	ldr	r3, [r3, #0]
 80133ca:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80133ce:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80133d2:	d107      	bne.n	80133e4 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80133d4:	f107 0318 	add.w	r3, r7, #24
 80133d8:	4618      	mov	r0, r3
 80133da:	f000 fb4d 	bl	8013a78 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80133de:	69bb      	ldr	r3, [r7, #24]
 80133e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80133e2:	e326      	b.n	8013a32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80133e4:	2300      	movs	r3, #0
 80133e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80133e8:	e323      	b.n	8013a32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80133ea:	4b78      	ldr	r3, [pc, #480]	@ (80135cc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80133ec:	681b      	ldr	r3, [r3, #0]
 80133ee:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80133f2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80133f6:	d107      	bne.n	8013408 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80133f8:	f107 030c 	add.w	r3, r7, #12
 80133fc:	4618      	mov	r0, r3
 80133fe:	f000 fc8f 	bl	8013d20 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8013402:	68fb      	ldr	r3, [r7, #12]
 8013404:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013406:	e314      	b.n	8013a32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013408:	2300      	movs	r3, #0
 801340a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801340c:	e311      	b.n	8013a32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 801340e:	4b6f      	ldr	r3, [pc, #444]	@ (80135cc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8013410:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013412:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8013416:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8013418:	4b6c      	ldr	r3, [pc, #432]	@ (80135cc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801341a:	681b      	ldr	r3, [r3, #0]
 801341c:	f003 0304 	and.w	r3, r3, #4
 8013420:	2b04      	cmp	r3, #4
 8013422:	d10c      	bne.n	801343e <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 8013424:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013426:	2b00      	cmp	r3, #0
 8013428:	d109      	bne.n	801343e <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801342a:	4b68      	ldr	r3, [pc, #416]	@ (80135cc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801342c:	681b      	ldr	r3, [r3, #0]
 801342e:	08db      	lsrs	r3, r3, #3
 8013430:	f003 0303 	and.w	r3, r3, #3
 8013434:	4a66      	ldr	r2, [pc, #408]	@ (80135d0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 8013436:	fa22 f303 	lsr.w	r3, r2, r3
 801343a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801343c:	e01e      	b.n	801347c <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 801343e:	4b63      	ldr	r3, [pc, #396]	@ (80135cc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8013440:	681b      	ldr	r3, [r3, #0]
 8013442:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8013446:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801344a:	d106      	bne.n	801345a <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 801344c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801344e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8013452:	d102      	bne.n	801345a <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8013454:	4b5f      	ldr	r3, [pc, #380]	@ (80135d4 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8013456:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013458:	e010      	b.n	801347c <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 801345a:	4b5c      	ldr	r3, [pc, #368]	@ (80135cc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801345c:	681b      	ldr	r3, [r3, #0]
 801345e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8013462:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8013466:	d106      	bne.n	8013476 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 8013468:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801346a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801346e:	d102      	bne.n	8013476 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8013470:	4b59      	ldr	r3, [pc, #356]	@ (80135d8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8013472:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013474:	e002      	b.n	801347c <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8013476:	2300      	movs	r3, #0
 8013478:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 801347a:	e2da      	b.n	8013a32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 801347c:	e2d9      	b.n	8013a32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 801347e:	4b57      	ldr	r3, [pc, #348]	@ (80135dc <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8013480:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013482:	e2d6      	b.n	8013a32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8013484:	2300      	movs	r3, #0
 8013486:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013488:	e2d3      	b.n	8013a32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 801348a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801348e:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8013492:	430b      	orrs	r3, r1
 8013494:	f040 80a7 	bne.w	80135e6 <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8013498:	4b4c      	ldr	r3, [pc, #304]	@ (80135cc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801349a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801349c:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80134a0:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80134a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80134a4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80134a8:	d055      	beq.n	8013556 <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 80134aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80134ac:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80134b0:	f200 8096 	bhi.w	80135e0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 80134b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80134b6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80134ba:	f000 8084 	beq.w	80135c6 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 80134be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80134c0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80134c4:	f200 808c 	bhi.w	80135e0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 80134c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80134ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80134ce:	d030      	beq.n	8013532 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 80134d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80134d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80134d6:	f200 8083 	bhi.w	80135e0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 80134da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80134dc:	2b00      	cmp	r3, #0
 80134de:	d004      	beq.n	80134ea <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 80134e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80134e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80134e6:	d012      	beq.n	801350e <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 80134e8:	e07a      	b.n	80135e0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80134ea:	4b38      	ldr	r3, [pc, #224]	@ (80135cc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80134ec:	681b      	ldr	r3, [r3, #0]
 80134ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80134f2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80134f6:	d107      	bne.n	8013508 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80134f8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80134fc:	4618      	mov	r0, r3
 80134fe:	f000 fd63 	bl	8013fc8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8013502:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013504:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013506:	e294      	b.n	8013a32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013508:	2300      	movs	r3, #0
 801350a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801350c:	e291      	b.n	8013a32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801350e:	4b2f      	ldr	r3, [pc, #188]	@ (80135cc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8013510:	681b      	ldr	r3, [r3, #0]
 8013512:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8013516:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 801351a:	d107      	bne.n	801352c <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801351c:	f107 0318 	add.w	r3, r7, #24
 8013520:	4618      	mov	r0, r3
 8013522:	f000 faa9 	bl	8013a78 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8013526:	69bb      	ldr	r3, [r7, #24]
 8013528:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801352a:	e282      	b.n	8013a32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801352c:	2300      	movs	r3, #0
 801352e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013530:	e27f      	b.n	8013a32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8013532:	4b26      	ldr	r3, [pc, #152]	@ (80135cc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8013534:	681b      	ldr	r3, [r3, #0]
 8013536:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801353a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801353e:	d107      	bne.n	8013550 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8013540:	f107 030c 	add.w	r3, r7, #12
 8013544:	4618      	mov	r0, r3
 8013546:	f000 fbeb 	bl	8013d20 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 801354a:	68fb      	ldr	r3, [r7, #12]
 801354c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801354e:	e270      	b.n	8013a32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013550:	2300      	movs	r3, #0
 8013552:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013554:	e26d      	b.n	8013a32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8013556:	4b1d      	ldr	r3, [pc, #116]	@ (80135cc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8013558:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801355a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 801355e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8013560:	4b1a      	ldr	r3, [pc, #104]	@ (80135cc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8013562:	681b      	ldr	r3, [r3, #0]
 8013564:	f003 0304 	and.w	r3, r3, #4
 8013568:	2b04      	cmp	r3, #4
 801356a:	d10c      	bne.n	8013586 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 801356c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801356e:	2b00      	cmp	r3, #0
 8013570:	d109      	bne.n	8013586 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8013572:	4b16      	ldr	r3, [pc, #88]	@ (80135cc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8013574:	681b      	ldr	r3, [r3, #0]
 8013576:	08db      	lsrs	r3, r3, #3
 8013578:	f003 0303 	and.w	r3, r3, #3
 801357c:	4a14      	ldr	r2, [pc, #80]	@ (80135d0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 801357e:	fa22 f303 	lsr.w	r3, r2, r3
 8013582:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013584:	e01e      	b.n	80135c4 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8013586:	4b11      	ldr	r3, [pc, #68]	@ (80135cc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8013588:	681b      	ldr	r3, [r3, #0]
 801358a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801358e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8013592:	d106      	bne.n	80135a2 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8013594:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013596:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801359a:	d102      	bne.n	80135a2 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 801359c:	4b0d      	ldr	r3, [pc, #52]	@ (80135d4 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 801359e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80135a0:	e010      	b.n	80135c4 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80135a2:	4b0a      	ldr	r3, [pc, #40]	@ (80135cc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80135a4:	681b      	ldr	r3, [r3, #0]
 80135a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80135aa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80135ae:	d106      	bne.n	80135be <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 80135b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80135b2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80135b6:	d102      	bne.n	80135be <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80135b8:	4b07      	ldr	r3, [pc, #28]	@ (80135d8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80135ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80135bc:	e002      	b.n	80135c4 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80135be:	2300      	movs	r3, #0
 80135c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80135c2:	e236      	b.n	8013a32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80135c4:	e235      	b.n	8013a32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80135c6:	4b05      	ldr	r3, [pc, #20]	@ (80135dc <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80135c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80135ca:	e232      	b.n	8013a32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80135cc:	58024400 	.word	0x58024400
 80135d0:	03d09000 	.word	0x03d09000
 80135d4:	003d0900 	.word	0x003d0900
 80135d8:	016e3600 	.word	0x016e3600
 80135dc:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 80135e0:	2300      	movs	r3, #0
 80135e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80135e4:	e225      	b.n	8013a32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 80135e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80135ea:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 80135ee:	430b      	orrs	r3, r1
 80135f0:	f040 8085 	bne.w	80136fe <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 80135f4:	4b9c      	ldr	r3, [pc, #624]	@ (8013868 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80135f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80135f8:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 80135fc:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 80135fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013600:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8013604:	d06b      	beq.n	80136de <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 8013606:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013608:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 801360c:	d874      	bhi.n	80136f8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 801360e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013610:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8013614:	d056      	beq.n	80136c4 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 8013616:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013618:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 801361c:	d86c      	bhi.n	80136f8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 801361e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013620:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8013624:	d03b      	beq.n	801369e <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 8013626:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013628:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 801362c:	d864      	bhi.n	80136f8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 801362e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013630:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8013634:	d021      	beq.n	801367a <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 8013636:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013638:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801363c:	d85c      	bhi.n	80136f8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 801363e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013640:	2b00      	cmp	r3, #0
 8013642:	d004      	beq.n	801364e <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 8013644:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013646:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801364a:	d004      	beq.n	8013656 <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 801364c:	e054      	b.n	80136f8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 801364e:	f7fe fb5f 	bl	8011d10 <HAL_RCC_GetPCLK1Freq>
 8013652:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8013654:	e1ed      	b.n	8013a32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8013656:	4b84      	ldr	r3, [pc, #528]	@ (8013868 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8013658:	681b      	ldr	r3, [r3, #0]
 801365a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801365e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8013662:	d107      	bne.n	8013674 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8013664:	f107 0318 	add.w	r3, r7, #24
 8013668:	4618      	mov	r0, r3
 801366a:	f000 fa05 	bl	8013a78 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 801366e:	69fb      	ldr	r3, [r7, #28]
 8013670:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013672:	e1de      	b.n	8013a32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013674:	2300      	movs	r3, #0
 8013676:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013678:	e1db      	b.n	8013a32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 801367a:	4b7b      	ldr	r3, [pc, #492]	@ (8013868 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801367c:	681b      	ldr	r3, [r3, #0]
 801367e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8013682:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8013686:	d107      	bne.n	8013698 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8013688:	f107 030c 	add.w	r3, r7, #12
 801368c:	4618      	mov	r0, r3
 801368e:	f000 fb47 	bl	8013d20 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8013692:	693b      	ldr	r3, [r7, #16]
 8013694:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013696:	e1cc      	b.n	8013a32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013698:	2300      	movs	r3, #0
 801369a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801369c:	e1c9      	b.n	8013a32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 801369e:	4b72      	ldr	r3, [pc, #456]	@ (8013868 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80136a0:	681b      	ldr	r3, [r3, #0]
 80136a2:	f003 0304 	and.w	r3, r3, #4
 80136a6:	2b04      	cmp	r3, #4
 80136a8:	d109      	bne.n	80136be <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80136aa:	4b6f      	ldr	r3, [pc, #444]	@ (8013868 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80136ac:	681b      	ldr	r3, [r3, #0]
 80136ae:	08db      	lsrs	r3, r3, #3
 80136b0:	f003 0303 	and.w	r3, r3, #3
 80136b4:	4a6d      	ldr	r2, [pc, #436]	@ (801386c <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 80136b6:	fa22 f303 	lsr.w	r3, r2, r3
 80136ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80136bc:	e1b9      	b.n	8013a32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80136be:	2300      	movs	r3, #0
 80136c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80136c2:	e1b6      	b.n	8013a32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80136c4:	4b68      	ldr	r3, [pc, #416]	@ (8013868 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80136c6:	681b      	ldr	r3, [r3, #0]
 80136c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80136cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80136d0:	d102      	bne.n	80136d8 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 80136d2:	4b67      	ldr	r3, [pc, #412]	@ (8013870 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 80136d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80136d6:	e1ac      	b.n	8013a32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80136d8:	2300      	movs	r3, #0
 80136da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80136dc:	e1a9      	b.n	8013a32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80136de:	4b62      	ldr	r3, [pc, #392]	@ (8013868 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80136e0:	681b      	ldr	r3, [r3, #0]
 80136e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80136e6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80136ea:	d102      	bne.n	80136f2 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 80136ec:	4b61      	ldr	r3, [pc, #388]	@ (8013874 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 80136ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80136f0:	e19f      	b.n	8013a32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80136f2:	2300      	movs	r3, #0
 80136f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80136f6:	e19c      	b.n	8013a32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 80136f8:	2300      	movs	r3, #0
 80136fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80136fc:	e199      	b.n	8013a32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80136fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013702:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8013706:	430b      	orrs	r3, r1
 8013708:	d173      	bne.n	80137f2 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 801370a:	4b57      	ldr	r3, [pc, #348]	@ (8013868 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801370c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801370e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8013712:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8013714:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013716:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801371a:	d02f      	beq.n	801377c <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 801371c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801371e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8013722:	d863      	bhi.n	80137ec <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 8013724:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013726:	2b00      	cmp	r3, #0
 8013728:	d004      	beq.n	8013734 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 801372a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801372c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8013730:	d012      	beq.n	8013758 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 8013732:	e05b      	b.n	80137ec <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8013734:	4b4c      	ldr	r3, [pc, #304]	@ (8013868 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8013736:	681b      	ldr	r3, [r3, #0]
 8013738:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801373c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8013740:	d107      	bne.n	8013752 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8013742:	f107 0318 	add.w	r3, r7, #24
 8013746:	4618      	mov	r0, r3
 8013748:	f000 f996 	bl	8013a78 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 801374c:	69bb      	ldr	r3, [r7, #24]
 801374e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013750:	e16f      	b.n	8013a32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013752:	2300      	movs	r3, #0
 8013754:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013756:	e16c      	b.n	8013a32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8013758:	4b43      	ldr	r3, [pc, #268]	@ (8013868 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801375a:	681b      	ldr	r3, [r3, #0]
 801375c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8013760:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8013764:	d107      	bne.n	8013776 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8013766:	f107 030c 	add.w	r3, r7, #12
 801376a:	4618      	mov	r0, r3
 801376c:	f000 fad8 	bl	8013d20 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8013770:	697b      	ldr	r3, [r7, #20]
 8013772:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013774:	e15d      	b.n	8013a32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013776:	2300      	movs	r3, #0
 8013778:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801377a:	e15a      	b.n	8013a32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 801377c:	4b3a      	ldr	r3, [pc, #232]	@ (8013868 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801377e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013780:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8013784:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8013786:	4b38      	ldr	r3, [pc, #224]	@ (8013868 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8013788:	681b      	ldr	r3, [r3, #0]
 801378a:	f003 0304 	and.w	r3, r3, #4
 801378e:	2b04      	cmp	r3, #4
 8013790:	d10c      	bne.n	80137ac <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8013792:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013794:	2b00      	cmp	r3, #0
 8013796:	d109      	bne.n	80137ac <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8013798:	4b33      	ldr	r3, [pc, #204]	@ (8013868 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801379a:	681b      	ldr	r3, [r3, #0]
 801379c:	08db      	lsrs	r3, r3, #3
 801379e:	f003 0303 	and.w	r3, r3, #3
 80137a2:	4a32      	ldr	r2, [pc, #200]	@ (801386c <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 80137a4:	fa22 f303 	lsr.w	r3, r2, r3
 80137a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80137aa:	e01e      	b.n	80137ea <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80137ac:	4b2e      	ldr	r3, [pc, #184]	@ (8013868 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80137ae:	681b      	ldr	r3, [r3, #0]
 80137b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80137b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80137b8:	d106      	bne.n	80137c8 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 80137ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80137bc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80137c0:	d102      	bne.n	80137c8 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80137c2:	4b2b      	ldr	r3, [pc, #172]	@ (8013870 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 80137c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80137c6:	e010      	b.n	80137ea <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80137c8:	4b27      	ldr	r3, [pc, #156]	@ (8013868 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80137ca:	681b      	ldr	r3, [r3, #0]
 80137cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80137d0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80137d4:	d106      	bne.n	80137e4 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 80137d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80137d8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80137dc:	d102      	bne.n	80137e4 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80137de:	4b25      	ldr	r3, [pc, #148]	@ (8013874 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 80137e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80137e2:	e002      	b.n	80137ea <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80137e4:	2300      	movs	r3, #0
 80137e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80137e8:	e123      	b.n	8013a32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80137ea:	e122      	b.n	8013a32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 80137ec:	2300      	movs	r3, #0
 80137ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80137f0:	e11f      	b.n	8013a32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80137f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80137f6:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 80137fa:	430b      	orrs	r3, r1
 80137fc:	d13c      	bne.n	8013878 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80137fe:	4b1a      	ldr	r3, [pc, #104]	@ (8013868 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8013800:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013802:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8013806:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8013808:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801380a:	2b00      	cmp	r3, #0
 801380c:	d004      	beq.n	8013818 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 801380e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013810:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8013814:	d012      	beq.n	801383c <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 8013816:	e023      	b.n	8013860 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8013818:	4b13      	ldr	r3, [pc, #76]	@ (8013868 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801381a:	681b      	ldr	r3, [r3, #0]
 801381c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8013820:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8013824:	d107      	bne.n	8013836 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8013826:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801382a:	4618      	mov	r0, r3
 801382c:	f000 fbcc 	bl	8013fc8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8013830:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013832:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013834:	e0fd      	b.n	8013a32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013836:	2300      	movs	r3, #0
 8013838:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801383a:	e0fa      	b.n	8013a32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801383c:	4b0a      	ldr	r3, [pc, #40]	@ (8013868 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801383e:	681b      	ldr	r3, [r3, #0]
 8013840:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8013844:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8013848:	d107      	bne.n	801385a <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801384a:	f107 0318 	add.w	r3, r7, #24
 801384e:	4618      	mov	r0, r3
 8013850:	f000 f912 	bl	8013a78 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8013854:	6a3b      	ldr	r3, [r7, #32]
 8013856:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013858:	e0eb      	b.n	8013a32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801385a:	2300      	movs	r3, #0
 801385c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801385e:	e0e8      	b.n	8013a32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8013860:	2300      	movs	r3, #0
 8013862:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013864:	e0e5      	b.n	8013a32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8013866:	bf00      	nop
 8013868:	58024400 	.word	0x58024400
 801386c:	03d09000 	.word	0x03d09000
 8013870:	003d0900 	.word	0x003d0900
 8013874:	016e3600 	.word	0x016e3600
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8013878:	e9d7 2300 	ldrd	r2, r3, [r7]
 801387c:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8013880:	430b      	orrs	r3, r1
 8013882:	f040 8085 	bne.w	8013990 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8013886:	4b6d      	ldr	r3, [pc, #436]	@ (8013a3c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8013888:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801388a:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 801388e:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8013890:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013892:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8013896:	d06b      	beq.n	8013970 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 8013898:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801389a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801389e:	d874      	bhi.n	801398a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 80138a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80138a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80138a6:	d056      	beq.n	8013956 <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 80138a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80138aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80138ae:	d86c      	bhi.n	801398a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 80138b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80138b2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80138b6:	d03b      	beq.n	8013930 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 80138b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80138ba:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80138be:	d864      	bhi.n	801398a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 80138c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80138c2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80138c6:	d021      	beq.n	801390c <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 80138c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80138ca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80138ce:	d85c      	bhi.n	801398a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 80138d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80138d2:	2b00      	cmp	r3, #0
 80138d4:	d004      	beq.n	80138e0 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 80138d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80138d8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80138dc:	d004      	beq.n	80138e8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 80138de:	e054      	b.n	801398a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80138e0:	f000 f8b4 	bl	8013a4c <HAL_RCCEx_GetD3PCLK1Freq>
 80138e4:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80138e6:	e0a4      	b.n	8013a32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80138e8:	4b54      	ldr	r3, [pc, #336]	@ (8013a3c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80138ea:	681b      	ldr	r3, [r3, #0]
 80138ec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80138f0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80138f4:	d107      	bne.n	8013906 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80138f6:	f107 0318 	add.w	r3, r7, #24
 80138fa:	4618      	mov	r0, r3
 80138fc:	f000 f8bc 	bl	8013a78 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8013900:	69fb      	ldr	r3, [r7, #28]
 8013902:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013904:	e095      	b.n	8013a32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013906:	2300      	movs	r3, #0
 8013908:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801390a:	e092      	b.n	8013a32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 801390c:	4b4b      	ldr	r3, [pc, #300]	@ (8013a3c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 801390e:	681b      	ldr	r3, [r3, #0]
 8013910:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8013914:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8013918:	d107      	bne.n	801392a <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801391a:	f107 030c 	add.w	r3, r7, #12
 801391e:	4618      	mov	r0, r3
 8013920:	f000 f9fe 	bl	8013d20 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8013924:	693b      	ldr	r3, [r7, #16]
 8013926:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013928:	e083      	b.n	8013a32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801392a:	2300      	movs	r3, #0
 801392c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801392e:	e080      	b.n	8013a32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8013930:	4b42      	ldr	r3, [pc, #264]	@ (8013a3c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8013932:	681b      	ldr	r3, [r3, #0]
 8013934:	f003 0304 	and.w	r3, r3, #4
 8013938:	2b04      	cmp	r3, #4
 801393a:	d109      	bne.n	8013950 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801393c:	4b3f      	ldr	r3, [pc, #252]	@ (8013a3c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 801393e:	681b      	ldr	r3, [r3, #0]
 8013940:	08db      	lsrs	r3, r3, #3
 8013942:	f003 0303 	and.w	r3, r3, #3
 8013946:	4a3e      	ldr	r2, [pc, #248]	@ (8013a40 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8013948:	fa22 f303 	lsr.w	r3, r2, r3
 801394c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801394e:	e070      	b.n	8013a32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013950:	2300      	movs	r3, #0
 8013952:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013954:	e06d      	b.n	8013a32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8013956:	4b39      	ldr	r3, [pc, #228]	@ (8013a3c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8013958:	681b      	ldr	r3, [r3, #0]
 801395a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801395e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8013962:	d102      	bne.n	801396a <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 8013964:	4b37      	ldr	r3, [pc, #220]	@ (8013a44 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8013966:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013968:	e063      	b.n	8013a32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801396a:	2300      	movs	r3, #0
 801396c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801396e:	e060      	b.n	8013a32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8013970:	4b32      	ldr	r3, [pc, #200]	@ (8013a3c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8013972:	681b      	ldr	r3, [r3, #0]
 8013974:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8013978:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801397c:	d102      	bne.n	8013984 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 801397e:	4b32      	ldr	r3, [pc, #200]	@ (8013a48 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8013980:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013982:	e056      	b.n	8013a32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013984:	2300      	movs	r3, #0
 8013986:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013988:	e053      	b.n	8013a32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 801398a:	2300      	movs	r3, #0
 801398c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801398e:	e050      	b.n	8013a32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8013990:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013994:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8013998:	430b      	orrs	r3, r1
 801399a:	d148      	bne.n	8013a2e <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 801399c:	4b27      	ldr	r3, [pc, #156]	@ (8013a3c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 801399e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80139a0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80139a4:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80139a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80139a8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80139ac:	d02a      	beq.n	8013a04 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 80139ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80139b0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80139b4:	d838      	bhi.n	8013a28 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 80139b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80139b8:	2b00      	cmp	r3, #0
 80139ba:	d004      	beq.n	80139c6 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 80139bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80139be:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80139c2:	d00d      	beq.n	80139e0 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 80139c4:	e030      	b.n	8013a28 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80139c6:	4b1d      	ldr	r3, [pc, #116]	@ (8013a3c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80139c8:	681b      	ldr	r3, [r3, #0]
 80139ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80139ce:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80139d2:	d102      	bne.n	80139da <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 80139d4:	4b1c      	ldr	r3, [pc, #112]	@ (8013a48 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 80139d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80139d8:	e02b      	b.n	8013a32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80139da:	2300      	movs	r3, #0
 80139dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80139de:	e028      	b.n	8013a32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80139e0:	4b16      	ldr	r3, [pc, #88]	@ (8013a3c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80139e2:	681b      	ldr	r3, [r3, #0]
 80139e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80139e8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80139ec:	d107      	bne.n	80139fe <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80139ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80139f2:	4618      	mov	r0, r3
 80139f4:	f000 fae8 	bl	8013fc8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80139f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80139fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80139fc:	e019      	b.n	8013a32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80139fe:	2300      	movs	r3, #0
 8013a00:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013a02:	e016      	b.n	8013a32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8013a04:	4b0d      	ldr	r3, [pc, #52]	@ (8013a3c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8013a06:	681b      	ldr	r3, [r3, #0]
 8013a08:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8013a0c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8013a10:	d107      	bne.n	8013a22 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8013a12:	f107 0318 	add.w	r3, r7, #24
 8013a16:	4618      	mov	r0, r3
 8013a18:	f000 f82e 	bl	8013a78 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8013a1c:	69fb      	ldr	r3, [r7, #28]
 8013a1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013a20:	e007      	b.n	8013a32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013a22:	2300      	movs	r3, #0
 8013a24:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013a26:	e004      	b.n	8013a32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8013a28:	2300      	movs	r3, #0
 8013a2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013a2c:	e001      	b.n	8013a32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 8013a2e:	2300      	movs	r3, #0
 8013a30:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8013a32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8013a34:	4618      	mov	r0, r3
 8013a36:	3740      	adds	r7, #64	@ 0x40
 8013a38:	46bd      	mov	sp, r7
 8013a3a:	bd80      	pop	{r7, pc}
 8013a3c:	58024400 	.word	0x58024400
 8013a40:	03d09000 	.word	0x03d09000
 8013a44:	003d0900 	.word	0x003d0900
 8013a48:	016e3600 	.word	0x016e3600

08013a4c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8013a4c:	b580      	push	{r7, lr}
 8013a4e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8013a50:	f7fe f92e 	bl	8011cb0 <HAL_RCC_GetHCLKFreq>
 8013a54:	4602      	mov	r2, r0
 8013a56:	4b06      	ldr	r3, [pc, #24]	@ (8013a70 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8013a58:	6a1b      	ldr	r3, [r3, #32]
 8013a5a:	091b      	lsrs	r3, r3, #4
 8013a5c:	f003 0307 	and.w	r3, r3, #7
 8013a60:	4904      	ldr	r1, [pc, #16]	@ (8013a74 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8013a62:	5ccb      	ldrb	r3, [r1, r3]
 8013a64:	f003 031f 	and.w	r3, r3, #31
 8013a68:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8013a6c:	4618      	mov	r0, r3
 8013a6e:	bd80      	pop	{r7, pc}
 8013a70:	58024400 	.word	0x58024400
 8013a74:	0801e8ac 	.word	0x0801e8ac

08013a78 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8013a78:	b480      	push	{r7}
 8013a7a:	b089      	sub	sp, #36	@ 0x24
 8013a7c:	af00      	add	r7, sp, #0
 8013a7e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8013a80:	4ba1      	ldr	r3, [pc, #644]	@ (8013d08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013a82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013a84:	f003 0303 	and.w	r3, r3, #3
 8013a88:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8013a8a:	4b9f      	ldr	r3, [pc, #636]	@ (8013d08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013a8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013a8e:	0b1b      	lsrs	r3, r3, #12
 8013a90:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8013a94:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8013a96:	4b9c      	ldr	r3, [pc, #624]	@ (8013d08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013a98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013a9a:	091b      	lsrs	r3, r3, #4
 8013a9c:	f003 0301 	and.w	r3, r3, #1
 8013aa0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8013aa2:	4b99      	ldr	r3, [pc, #612]	@ (8013d08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013aa4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013aa6:	08db      	lsrs	r3, r3, #3
 8013aa8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013aac:	693a      	ldr	r2, [r7, #16]
 8013aae:	fb02 f303 	mul.w	r3, r2, r3
 8013ab2:	ee07 3a90 	vmov	s15, r3
 8013ab6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013aba:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8013abe:	697b      	ldr	r3, [r7, #20]
 8013ac0:	2b00      	cmp	r3, #0
 8013ac2:	f000 8111 	beq.w	8013ce8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8013ac6:	69bb      	ldr	r3, [r7, #24]
 8013ac8:	2b02      	cmp	r3, #2
 8013aca:	f000 8083 	beq.w	8013bd4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8013ace:	69bb      	ldr	r3, [r7, #24]
 8013ad0:	2b02      	cmp	r3, #2
 8013ad2:	f200 80a1 	bhi.w	8013c18 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8013ad6:	69bb      	ldr	r3, [r7, #24]
 8013ad8:	2b00      	cmp	r3, #0
 8013ada:	d003      	beq.n	8013ae4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8013adc:	69bb      	ldr	r3, [r7, #24]
 8013ade:	2b01      	cmp	r3, #1
 8013ae0:	d056      	beq.n	8013b90 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8013ae2:	e099      	b.n	8013c18 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8013ae4:	4b88      	ldr	r3, [pc, #544]	@ (8013d08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013ae6:	681b      	ldr	r3, [r3, #0]
 8013ae8:	f003 0320 	and.w	r3, r3, #32
 8013aec:	2b00      	cmp	r3, #0
 8013aee:	d02d      	beq.n	8013b4c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8013af0:	4b85      	ldr	r3, [pc, #532]	@ (8013d08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013af2:	681b      	ldr	r3, [r3, #0]
 8013af4:	08db      	lsrs	r3, r3, #3
 8013af6:	f003 0303 	and.w	r3, r3, #3
 8013afa:	4a84      	ldr	r2, [pc, #528]	@ (8013d0c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8013afc:	fa22 f303 	lsr.w	r3, r2, r3
 8013b00:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8013b02:	68bb      	ldr	r3, [r7, #8]
 8013b04:	ee07 3a90 	vmov	s15, r3
 8013b08:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013b0c:	697b      	ldr	r3, [r7, #20]
 8013b0e:	ee07 3a90 	vmov	s15, r3
 8013b12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013b16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013b1a:	4b7b      	ldr	r3, [pc, #492]	@ (8013d08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013b1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013b1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013b22:	ee07 3a90 	vmov	s15, r3
 8013b26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013b2a:	ed97 6a03 	vldr	s12, [r7, #12]
 8013b2e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8013d10 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8013b32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013b36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013b3a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8013b3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013b42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013b46:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8013b4a:	e087      	b.n	8013c5c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8013b4c:	697b      	ldr	r3, [r7, #20]
 8013b4e:	ee07 3a90 	vmov	s15, r3
 8013b52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013b56:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8013d14 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8013b5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013b5e:	4b6a      	ldr	r3, [pc, #424]	@ (8013d08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013b60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013b62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013b66:	ee07 3a90 	vmov	s15, r3
 8013b6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013b6e:	ed97 6a03 	vldr	s12, [r7, #12]
 8013b72:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8013d10 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8013b76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013b7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013b7e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8013b82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013b86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013b8a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8013b8e:	e065      	b.n	8013c5c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8013b90:	697b      	ldr	r3, [r7, #20]
 8013b92:	ee07 3a90 	vmov	s15, r3
 8013b96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013b9a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8013d18 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8013b9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013ba2:	4b59      	ldr	r3, [pc, #356]	@ (8013d08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013ba4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013ba6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013baa:	ee07 3a90 	vmov	s15, r3
 8013bae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013bb2:	ed97 6a03 	vldr	s12, [r7, #12]
 8013bb6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8013d10 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8013bba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013bbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013bc2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8013bc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013bca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013bce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8013bd2:	e043      	b.n	8013c5c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8013bd4:	697b      	ldr	r3, [r7, #20]
 8013bd6:	ee07 3a90 	vmov	s15, r3
 8013bda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013bde:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8013d1c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8013be2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013be6:	4b48      	ldr	r3, [pc, #288]	@ (8013d08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013be8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013bea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013bee:	ee07 3a90 	vmov	s15, r3
 8013bf2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013bf6:	ed97 6a03 	vldr	s12, [r7, #12]
 8013bfa:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8013d10 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8013bfe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013c02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013c06:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8013c0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013c0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013c12:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8013c16:	e021      	b.n	8013c5c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8013c18:	697b      	ldr	r3, [r7, #20]
 8013c1a:	ee07 3a90 	vmov	s15, r3
 8013c1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013c22:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8013d18 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8013c26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013c2a:	4b37      	ldr	r3, [pc, #220]	@ (8013d08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013c2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013c2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013c32:	ee07 3a90 	vmov	s15, r3
 8013c36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013c3a:	ed97 6a03 	vldr	s12, [r7, #12]
 8013c3e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8013d10 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8013c42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013c46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013c4a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8013c4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013c52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013c56:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8013c5a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8013c5c:	4b2a      	ldr	r3, [pc, #168]	@ (8013d08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013c5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013c60:	0a5b      	lsrs	r3, r3, #9
 8013c62:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013c66:	ee07 3a90 	vmov	s15, r3
 8013c6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013c6e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8013c72:	ee37 7a87 	vadd.f32	s14, s15, s14
 8013c76:	edd7 6a07 	vldr	s13, [r7, #28]
 8013c7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013c7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013c82:	ee17 2a90 	vmov	r2, s15
 8013c86:	687b      	ldr	r3, [r7, #4]
 8013c88:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8013c8a:	4b1f      	ldr	r3, [pc, #124]	@ (8013d08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013c8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013c8e:	0c1b      	lsrs	r3, r3, #16
 8013c90:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013c94:	ee07 3a90 	vmov	s15, r3
 8013c98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013c9c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8013ca0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8013ca4:	edd7 6a07 	vldr	s13, [r7, #28]
 8013ca8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013cac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013cb0:	ee17 2a90 	vmov	r2, s15
 8013cb4:	687b      	ldr	r3, [r7, #4]
 8013cb6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8013cb8:	4b13      	ldr	r3, [pc, #76]	@ (8013d08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013cba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013cbc:	0e1b      	lsrs	r3, r3, #24
 8013cbe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013cc2:	ee07 3a90 	vmov	s15, r3
 8013cc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013cca:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8013cce:	ee37 7a87 	vadd.f32	s14, s15, s14
 8013cd2:	edd7 6a07 	vldr	s13, [r7, #28]
 8013cd6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013cda:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013cde:	ee17 2a90 	vmov	r2, s15
 8013ce2:	687b      	ldr	r3, [r7, #4]
 8013ce4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8013ce6:	e008      	b.n	8013cfa <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8013ce8:	687b      	ldr	r3, [r7, #4]
 8013cea:	2200      	movs	r2, #0
 8013cec:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8013cee:	687b      	ldr	r3, [r7, #4]
 8013cf0:	2200      	movs	r2, #0
 8013cf2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8013cf4:	687b      	ldr	r3, [r7, #4]
 8013cf6:	2200      	movs	r2, #0
 8013cf8:	609a      	str	r2, [r3, #8]
}
 8013cfa:	bf00      	nop
 8013cfc:	3724      	adds	r7, #36	@ 0x24
 8013cfe:	46bd      	mov	sp, r7
 8013d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d04:	4770      	bx	lr
 8013d06:	bf00      	nop
 8013d08:	58024400 	.word	0x58024400
 8013d0c:	03d09000 	.word	0x03d09000
 8013d10:	46000000 	.word	0x46000000
 8013d14:	4c742400 	.word	0x4c742400
 8013d18:	4a742400 	.word	0x4a742400
 8013d1c:	4bb71b00 	.word	0x4bb71b00

08013d20 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8013d20:	b480      	push	{r7}
 8013d22:	b089      	sub	sp, #36	@ 0x24
 8013d24:	af00      	add	r7, sp, #0
 8013d26:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8013d28:	4ba1      	ldr	r3, [pc, #644]	@ (8013fb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013d2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013d2c:	f003 0303 	and.w	r3, r3, #3
 8013d30:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8013d32:	4b9f      	ldr	r3, [pc, #636]	@ (8013fb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013d34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013d36:	0d1b      	lsrs	r3, r3, #20
 8013d38:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8013d3c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8013d3e:	4b9c      	ldr	r3, [pc, #624]	@ (8013fb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013d40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013d42:	0a1b      	lsrs	r3, r3, #8
 8013d44:	f003 0301 	and.w	r3, r3, #1
 8013d48:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8013d4a:	4b99      	ldr	r3, [pc, #612]	@ (8013fb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013d4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013d4e:	08db      	lsrs	r3, r3, #3
 8013d50:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013d54:	693a      	ldr	r2, [r7, #16]
 8013d56:	fb02 f303 	mul.w	r3, r2, r3
 8013d5a:	ee07 3a90 	vmov	s15, r3
 8013d5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013d62:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8013d66:	697b      	ldr	r3, [r7, #20]
 8013d68:	2b00      	cmp	r3, #0
 8013d6a:	f000 8111 	beq.w	8013f90 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8013d6e:	69bb      	ldr	r3, [r7, #24]
 8013d70:	2b02      	cmp	r3, #2
 8013d72:	f000 8083 	beq.w	8013e7c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8013d76:	69bb      	ldr	r3, [r7, #24]
 8013d78:	2b02      	cmp	r3, #2
 8013d7a:	f200 80a1 	bhi.w	8013ec0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8013d7e:	69bb      	ldr	r3, [r7, #24]
 8013d80:	2b00      	cmp	r3, #0
 8013d82:	d003      	beq.n	8013d8c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8013d84:	69bb      	ldr	r3, [r7, #24]
 8013d86:	2b01      	cmp	r3, #1
 8013d88:	d056      	beq.n	8013e38 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8013d8a:	e099      	b.n	8013ec0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8013d8c:	4b88      	ldr	r3, [pc, #544]	@ (8013fb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013d8e:	681b      	ldr	r3, [r3, #0]
 8013d90:	f003 0320 	and.w	r3, r3, #32
 8013d94:	2b00      	cmp	r3, #0
 8013d96:	d02d      	beq.n	8013df4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8013d98:	4b85      	ldr	r3, [pc, #532]	@ (8013fb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013d9a:	681b      	ldr	r3, [r3, #0]
 8013d9c:	08db      	lsrs	r3, r3, #3
 8013d9e:	f003 0303 	and.w	r3, r3, #3
 8013da2:	4a84      	ldr	r2, [pc, #528]	@ (8013fb4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8013da4:	fa22 f303 	lsr.w	r3, r2, r3
 8013da8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8013daa:	68bb      	ldr	r3, [r7, #8]
 8013dac:	ee07 3a90 	vmov	s15, r3
 8013db0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013db4:	697b      	ldr	r3, [r7, #20]
 8013db6:	ee07 3a90 	vmov	s15, r3
 8013dba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013dbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013dc2:	4b7b      	ldr	r3, [pc, #492]	@ (8013fb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013dc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013dc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013dca:	ee07 3a90 	vmov	s15, r3
 8013dce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013dd2:	ed97 6a03 	vldr	s12, [r7, #12]
 8013dd6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8013fb8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8013dda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013dde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013de2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8013de6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013dea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013dee:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8013df2:	e087      	b.n	8013f04 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8013df4:	697b      	ldr	r3, [r7, #20]
 8013df6:	ee07 3a90 	vmov	s15, r3
 8013dfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013dfe:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8013fbc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8013e02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013e06:	4b6a      	ldr	r3, [pc, #424]	@ (8013fb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013e08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013e0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013e0e:	ee07 3a90 	vmov	s15, r3
 8013e12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013e16:	ed97 6a03 	vldr	s12, [r7, #12]
 8013e1a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8013fb8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8013e1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013e22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013e26:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8013e2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013e2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013e32:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8013e36:	e065      	b.n	8013f04 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8013e38:	697b      	ldr	r3, [r7, #20]
 8013e3a:	ee07 3a90 	vmov	s15, r3
 8013e3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013e42:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8013fc0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8013e46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013e4a:	4b59      	ldr	r3, [pc, #356]	@ (8013fb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013e4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013e4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013e52:	ee07 3a90 	vmov	s15, r3
 8013e56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013e5a:	ed97 6a03 	vldr	s12, [r7, #12]
 8013e5e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8013fb8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8013e62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013e66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013e6a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8013e6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013e72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013e76:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8013e7a:	e043      	b.n	8013f04 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8013e7c:	697b      	ldr	r3, [r7, #20]
 8013e7e:	ee07 3a90 	vmov	s15, r3
 8013e82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013e86:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8013fc4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8013e8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013e8e:	4b48      	ldr	r3, [pc, #288]	@ (8013fb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013e90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013e92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013e96:	ee07 3a90 	vmov	s15, r3
 8013e9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013e9e:	ed97 6a03 	vldr	s12, [r7, #12]
 8013ea2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8013fb8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8013ea6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013eaa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013eae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8013eb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013eb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013eba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8013ebe:	e021      	b.n	8013f04 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8013ec0:	697b      	ldr	r3, [r7, #20]
 8013ec2:	ee07 3a90 	vmov	s15, r3
 8013ec6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013eca:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8013fc0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8013ece:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013ed2:	4b37      	ldr	r3, [pc, #220]	@ (8013fb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013ed4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013ed6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013eda:	ee07 3a90 	vmov	s15, r3
 8013ede:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013ee2:	ed97 6a03 	vldr	s12, [r7, #12]
 8013ee6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8013fb8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8013eea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013eee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013ef2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8013ef6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013efa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013efe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8013f02:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8013f04:	4b2a      	ldr	r3, [pc, #168]	@ (8013fb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013f06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013f08:	0a5b      	lsrs	r3, r3, #9
 8013f0a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013f0e:	ee07 3a90 	vmov	s15, r3
 8013f12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013f16:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8013f1a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8013f1e:	edd7 6a07 	vldr	s13, [r7, #28]
 8013f22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013f26:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013f2a:	ee17 2a90 	vmov	r2, s15
 8013f2e:	687b      	ldr	r3, [r7, #4]
 8013f30:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8013f32:	4b1f      	ldr	r3, [pc, #124]	@ (8013fb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013f34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013f36:	0c1b      	lsrs	r3, r3, #16
 8013f38:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013f3c:	ee07 3a90 	vmov	s15, r3
 8013f40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013f44:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8013f48:	ee37 7a87 	vadd.f32	s14, s15, s14
 8013f4c:	edd7 6a07 	vldr	s13, [r7, #28]
 8013f50:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013f54:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013f58:	ee17 2a90 	vmov	r2, s15
 8013f5c:	687b      	ldr	r3, [r7, #4]
 8013f5e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8013f60:	4b13      	ldr	r3, [pc, #76]	@ (8013fb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013f62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013f64:	0e1b      	lsrs	r3, r3, #24
 8013f66:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013f6a:	ee07 3a90 	vmov	s15, r3
 8013f6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013f72:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8013f76:	ee37 7a87 	vadd.f32	s14, s15, s14
 8013f7a:	edd7 6a07 	vldr	s13, [r7, #28]
 8013f7e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013f82:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013f86:	ee17 2a90 	vmov	r2, s15
 8013f8a:	687b      	ldr	r3, [r7, #4]
 8013f8c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8013f8e:	e008      	b.n	8013fa2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8013f90:	687b      	ldr	r3, [r7, #4]
 8013f92:	2200      	movs	r2, #0
 8013f94:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8013f96:	687b      	ldr	r3, [r7, #4]
 8013f98:	2200      	movs	r2, #0
 8013f9a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8013f9c:	687b      	ldr	r3, [r7, #4]
 8013f9e:	2200      	movs	r2, #0
 8013fa0:	609a      	str	r2, [r3, #8]
}
 8013fa2:	bf00      	nop
 8013fa4:	3724      	adds	r7, #36	@ 0x24
 8013fa6:	46bd      	mov	sp, r7
 8013fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fac:	4770      	bx	lr
 8013fae:	bf00      	nop
 8013fb0:	58024400 	.word	0x58024400
 8013fb4:	03d09000 	.word	0x03d09000
 8013fb8:	46000000 	.word	0x46000000
 8013fbc:	4c742400 	.word	0x4c742400
 8013fc0:	4a742400 	.word	0x4a742400
 8013fc4:	4bb71b00 	.word	0x4bb71b00

08013fc8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8013fc8:	b480      	push	{r7}
 8013fca:	b089      	sub	sp, #36	@ 0x24
 8013fcc:	af00      	add	r7, sp, #0
 8013fce:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8013fd0:	4ba0      	ldr	r3, [pc, #640]	@ (8014254 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8013fd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013fd4:	f003 0303 	and.w	r3, r3, #3
 8013fd8:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8013fda:	4b9e      	ldr	r3, [pc, #632]	@ (8014254 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8013fdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013fde:	091b      	lsrs	r3, r3, #4
 8013fe0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8013fe4:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8013fe6:	4b9b      	ldr	r3, [pc, #620]	@ (8014254 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8013fe8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013fea:	f003 0301 	and.w	r3, r3, #1
 8013fee:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8013ff0:	4b98      	ldr	r3, [pc, #608]	@ (8014254 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8013ff2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013ff4:	08db      	lsrs	r3, r3, #3
 8013ff6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013ffa:	693a      	ldr	r2, [r7, #16]
 8013ffc:	fb02 f303 	mul.w	r3, r2, r3
 8014000:	ee07 3a90 	vmov	s15, r3
 8014004:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014008:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 801400c:	697b      	ldr	r3, [r7, #20]
 801400e:	2b00      	cmp	r3, #0
 8014010:	f000 8111 	beq.w	8014236 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8014014:	69bb      	ldr	r3, [r7, #24]
 8014016:	2b02      	cmp	r3, #2
 8014018:	f000 8083 	beq.w	8014122 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 801401c:	69bb      	ldr	r3, [r7, #24]
 801401e:	2b02      	cmp	r3, #2
 8014020:	f200 80a1 	bhi.w	8014166 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8014024:	69bb      	ldr	r3, [r7, #24]
 8014026:	2b00      	cmp	r3, #0
 8014028:	d003      	beq.n	8014032 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 801402a:	69bb      	ldr	r3, [r7, #24]
 801402c:	2b01      	cmp	r3, #1
 801402e:	d056      	beq.n	80140de <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8014030:	e099      	b.n	8014166 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8014032:	4b88      	ldr	r3, [pc, #544]	@ (8014254 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8014034:	681b      	ldr	r3, [r3, #0]
 8014036:	f003 0320 	and.w	r3, r3, #32
 801403a:	2b00      	cmp	r3, #0
 801403c:	d02d      	beq.n	801409a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801403e:	4b85      	ldr	r3, [pc, #532]	@ (8014254 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8014040:	681b      	ldr	r3, [r3, #0]
 8014042:	08db      	lsrs	r3, r3, #3
 8014044:	f003 0303 	and.w	r3, r3, #3
 8014048:	4a83      	ldr	r2, [pc, #524]	@ (8014258 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 801404a:	fa22 f303 	lsr.w	r3, r2, r3
 801404e:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8014050:	68bb      	ldr	r3, [r7, #8]
 8014052:	ee07 3a90 	vmov	s15, r3
 8014056:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801405a:	697b      	ldr	r3, [r7, #20]
 801405c:	ee07 3a90 	vmov	s15, r3
 8014060:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014064:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8014068:	4b7a      	ldr	r3, [pc, #488]	@ (8014254 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801406a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801406c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014070:	ee07 3a90 	vmov	s15, r3
 8014074:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8014078:	ed97 6a03 	vldr	s12, [r7, #12]
 801407c:	eddf 5a77 	vldr	s11, [pc, #476]	@ 801425c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8014080:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8014084:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8014088:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801408c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8014090:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014094:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8014098:	e087      	b.n	80141aa <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801409a:	697b      	ldr	r3, [r7, #20]
 801409c:	ee07 3a90 	vmov	s15, r3
 80140a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80140a4:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8014260 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80140a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80140ac:	4b69      	ldr	r3, [pc, #420]	@ (8014254 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80140ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80140b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80140b4:	ee07 3a90 	vmov	s15, r3
 80140b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80140bc:	ed97 6a03 	vldr	s12, [r7, #12]
 80140c0:	eddf 5a66 	vldr	s11, [pc, #408]	@ 801425c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80140c4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80140c8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80140cc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80140d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80140d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80140d8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80140dc:	e065      	b.n	80141aa <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80140de:	697b      	ldr	r3, [r7, #20]
 80140e0:	ee07 3a90 	vmov	s15, r3
 80140e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80140e8:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8014264 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 80140ec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80140f0:	4b58      	ldr	r3, [pc, #352]	@ (8014254 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80140f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80140f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80140f8:	ee07 3a90 	vmov	s15, r3
 80140fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8014100:	ed97 6a03 	vldr	s12, [r7, #12]
 8014104:	eddf 5a55 	vldr	s11, [pc, #340]	@ 801425c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8014108:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801410c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8014110:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8014114:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8014118:	ee67 7a27 	vmul.f32	s15, s14, s15
 801411c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8014120:	e043      	b.n	80141aa <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8014122:	697b      	ldr	r3, [r7, #20]
 8014124:	ee07 3a90 	vmov	s15, r3
 8014128:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801412c:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8014268 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8014130:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8014134:	4b47      	ldr	r3, [pc, #284]	@ (8014254 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8014136:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014138:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801413c:	ee07 3a90 	vmov	s15, r3
 8014140:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8014144:	ed97 6a03 	vldr	s12, [r7, #12]
 8014148:	eddf 5a44 	vldr	s11, [pc, #272]	@ 801425c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 801414c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8014150:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8014154:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8014158:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801415c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014160:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8014164:	e021      	b.n	80141aa <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8014166:	697b      	ldr	r3, [r7, #20]
 8014168:	ee07 3a90 	vmov	s15, r3
 801416c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014170:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8014260 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8014174:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8014178:	4b36      	ldr	r3, [pc, #216]	@ (8014254 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801417a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801417c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014180:	ee07 3a90 	vmov	s15, r3
 8014184:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8014188:	ed97 6a03 	vldr	s12, [r7, #12]
 801418c:	eddf 5a33 	vldr	s11, [pc, #204]	@ 801425c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8014190:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8014194:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8014198:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801419c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80141a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80141a4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80141a8:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 80141aa:	4b2a      	ldr	r3, [pc, #168]	@ (8014254 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80141ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80141ae:	0a5b      	lsrs	r3, r3, #9
 80141b0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80141b4:	ee07 3a90 	vmov	s15, r3
 80141b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80141bc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80141c0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80141c4:	edd7 6a07 	vldr	s13, [r7, #28]
 80141c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80141cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80141d0:	ee17 2a90 	vmov	r2, s15
 80141d4:	687b      	ldr	r3, [r7, #4]
 80141d6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 80141d8:	4b1e      	ldr	r3, [pc, #120]	@ (8014254 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80141da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80141dc:	0c1b      	lsrs	r3, r3, #16
 80141de:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80141e2:	ee07 3a90 	vmov	s15, r3
 80141e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80141ea:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80141ee:	ee37 7a87 	vadd.f32	s14, s15, s14
 80141f2:	edd7 6a07 	vldr	s13, [r7, #28]
 80141f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80141fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80141fe:	ee17 2a90 	vmov	r2, s15
 8014202:	687b      	ldr	r3, [r7, #4]
 8014204:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8014206:	4b13      	ldr	r3, [pc, #76]	@ (8014254 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8014208:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801420a:	0e1b      	lsrs	r3, r3, #24
 801420c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8014210:	ee07 3a90 	vmov	s15, r3
 8014214:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014218:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801421c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8014220:	edd7 6a07 	vldr	s13, [r7, #28]
 8014224:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8014228:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801422c:	ee17 2a90 	vmov	r2, s15
 8014230:	687b      	ldr	r3, [r7, #4]
 8014232:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8014234:	e008      	b.n	8014248 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8014236:	687b      	ldr	r3, [r7, #4]
 8014238:	2200      	movs	r2, #0
 801423a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 801423c:	687b      	ldr	r3, [r7, #4]
 801423e:	2200      	movs	r2, #0
 8014240:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8014242:	687b      	ldr	r3, [r7, #4]
 8014244:	2200      	movs	r2, #0
 8014246:	609a      	str	r2, [r3, #8]
}
 8014248:	bf00      	nop
 801424a:	3724      	adds	r7, #36	@ 0x24
 801424c:	46bd      	mov	sp, r7
 801424e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014252:	4770      	bx	lr
 8014254:	58024400 	.word	0x58024400
 8014258:	03d09000 	.word	0x03d09000
 801425c:	46000000 	.word	0x46000000
 8014260:	4c742400 	.word	0x4c742400
 8014264:	4a742400 	.word	0x4a742400
 8014268:	4bb71b00 	.word	0x4bb71b00

0801426c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 801426c:	b580      	push	{r7, lr}
 801426e:	b084      	sub	sp, #16
 8014270:	af00      	add	r7, sp, #0
 8014272:	6078      	str	r0, [r7, #4]
 8014274:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8014276:	2300      	movs	r3, #0
 8014278:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 801427a:	4b53      	ldr	r3, [pc, #332]	@ (80143c8 <RCCEx_PLL2_Config+0x15c>)
 801427c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801427e:	f003 0303 	and.w	r3, r3, #3
 8014282:	2b03      	cmp	r3, #3
 8014284:	d101      	bne.n	801428a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8014286:	2301      	movs	r3, #1
 8014288:	e099      	b.n	80143be <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 801428a:	4b4f      	ldr	r3, [pc, #316]	@ (80143c8 <RCCEx_PLL2_Config+0x15c>)
 801428c:	681b      	ldr	r3, [r3, #0]
 801428e:	4a4e      	ldr	r2, [pc, #312]	@ (80143c8 <RCCEx_PLL2_Config+0x15c>)
 8014290:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8014294:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8014296:	f7f4 ffcd 	bl	8009234 <HAL_GetTick>
 801429a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 801429c:	e008      	b.n	80142b0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 801429e:	f7f4 ffc9 	bl	8009234 <HAL_GetTick>
 80142a2:	4602      	mov	r2, r0
 80142a4:	68bb      	ldr	r3, [r7, #8]
 80142a6:	1ad3      	subs	r3, r2, r3
 80142a8:	2b02      	cmp	r3, #2
 80142aa:	d901      	bls.n	80142b0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80142ac:	2303      	movs	r3, #3
 80142ae:	e086      	b.n	80143be <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80142b0:	4b45      	ldr	r3, [pc, #276]	@ (80143c8 <RCCEx_PLL2_Config+0x15c>)
 80142b2:	681b      	ldr	r3, [r3, #0]
 80142b4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80142b8:	2b00      	cmp	r3, #0
 80142ba:	d1f0      	bne.n	801429e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80142bc:	4b42      	ldr	r3, [pc, #264]	@ (80143c8 <RCCEx_PLL2_Config+0x15c>)
 80142be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80142c0:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80142c4:	687b      	ldr	r3, [r7, #4]
 80142c6:	681b      	ldr	r3, [r3, #0]
 80142c8:	031b      	lsls	r3, r3, #12
 80142ca:	493f      	ldr	r1, [pc, #252]	@ (80143c8 <RCCEx_PLL2_Config+0x15c>)
 80142cc:	4313      	orrs	r3, r2
 80142ce:	628b      	str	r3, [r1, #40]	@ 0x28
 80142d0:	687b      	ldr	r3, [r7, #4]
 80142d2:	685b      	ldr	r3, [r3, #4]
 80142d4:	3b01      	subs	r3, #1
 80142d6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80142da:	687b      	ldr	r3, [r7, #4]
 80142dc:	689b      	ldr	r3, [r3, #8]
 80142de:	3b01      	subs	r3, #1
 80142e0:	025b      	lsls	r3, r3, #9
 80142e2:	b29b      	uxth	r3, r3
 80142e4:	431a      	orrs	r2, r3
 80142e6:	687b      	ldr	r3, [r7, #4]
 80142e8:	68db      	ldr	r3, [r3, #12]
 80142ea:	3b01      	subs	r3, #1
 80142ec:	041b      	lsls	r3, r3, #16
 80142ee:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80142f2:	431a      	orrs	r2, r3
 80142f4:	687b      	ldr	r3, [r7, #4]
 80142f6:	691b      	ldr	r3, [r3, #16]
 80142f8:	3b01      	subs	r3, #1
 80142fa:	061b      	lsls	r3, r3, #24
 80142fc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8014300:	4931      	ldr	r1, [pc, #196]	@ (80143c8 <RCCEx_PLL2_Config+0x15c>)
 8014302:	4313      	orrs	r3, r2
 8014304:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8014306:	4b30      	ldr	r3, [pc, #192]	@ (80143c8 <RCCEx_PLL2_Config+0x15c>)
 8014308:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801430a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 801430e:	687b      	ldr	r3, [r7, #4]
 8014310:	695b      	ldr	r3, [r3, #20]
 8014312:	492d      	ldr	r1, [pc, #180]	@ (80143c8 <RCCEx_PLL2_Config+0x15c>)
 8014314:	4313      	orrs	r3, r2
 8014316:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8014318:	4b2b      	ldr	r3, [pc, #172]	@ (80143c8 <RCCEx_PLL2_Config+0x15c>)
 801431a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801431c:	f023 0220 	bic.w	r2, r3, #32
 8014320:	687b      	ldr	r3, [r7, #4]
 8014322:	699b      	ldr	r3, [r3, #24]
 8014324:	4928      	ldr	r1, [pc, #160]	@ (80143c8 <RCCEx_PLL2_Config+0x15c>)
 8014326:	4313      	orrs	r3, r2
 8014328:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 801432a:	4b27      	ldr	r3, [pc, #156]	@ (80143c8 <RCCEx_PLL2_Config+0x15c>)
 801432c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801432e:	4a26      	ldr	r2, [pc, #152]	@ (80143c8 <RCCEx_PLL2_Config+0x15c>)
 8014330:	f023 0310 	bic.w	r3, r3, #16
 8014334:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8014336:	4b24      	ldr	r3, [pc, #144]	@ (80143c8 <RCCEx_PLL2_Config+0x15c>)
 8014338:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801433a:	4b24      	ldr	r3, [pc, #144]	@ (80143cc <RCCEx_PLL2_Config+0x160>)
 801433c:	4013      	ands	r3, r2
 801433e:	687a      	ldr	r2, [r7, #4]
 8014340:	69d2      	ldr	r2, [r2, #28]
 8014342:	00d2      	lsls	r2, r2, #3
 8014344:	4920      	ldr	r1, [pc, #128]	@ (80143c8 <RCCEx_PLL2_Config+0x15c>)
 8014346:	4313      	orrs	r3, r2
 8014348:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 801434a:	4b1f      	ldr	r3, [pc, #124]	@ (80143c8 <RCCEx_PLL2_Config+0x15c>)
 801434c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801434e:	4a1e      	ldr	r2, [pc, #120]	@ (80143c8 <RCCEx_PLL2_Config+0x15c>)
 8014350:	f043 0310 	orr.w	r3, r3, #16
 8014354:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8014356:	683b      	ldr	r3, [r7, #0]
 8014358:	2b00      	cmp	r3, #0
 801435a:	d106      	bne.n	801436a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 801435c:	4b1a      	ldr	r3, [pc, #104]	@ (80143c8 <RCCEx_PLL2_Config+0x15c>)
 801435e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014360:	4a19      	ldr	r2, [pc, #100]	@ (80143c8 <RCCEx_PLL2_Config+0x15c>)
 8014362:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8014366:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8014368:	e00f      	b.n	801438a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 801436a:	683b      	ldr	r3, [r7, #0]
 801436c:	2b01      	cmp	r3, #1
 801436e:	d106      	bne.n	801437e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8014370:	4b15      	ldr	r3, [pc, #84]	@ (80143c8 <RCCEx_PLL2_Config+0x15c>)
 8014372:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014374:	4a14      	ldr	r2, [pc, #80]	@ (80143c8 <RCCEx_PLL2_Config+0x15c>)
 8014376:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801437a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 801437c:	e005      	b.n	801438a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 801437e:	4b12      	ldr	r3, [pc, #72]	@ (80143c8 <RCCEx_PLL2_Config+0x15c>)
 8014380:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014382:	4a11      	ldr	r2, [pc, #68]	@ (80143c8 <RCCEx_PLL2_Config+0x15c>)
 8014384:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8014388:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 801438a:	4b0f      	ldr	r3, [pc, #60]	@ (80143c8 <RCCEx_PLL2_Config+0x15c>)
 801438c:	681b      	ldr	r3, [r3, #0]
 801438e:	4a0e      	ldr	r2, [pc, #56]	@ (80143c8 <RCCEx_PLL2_Config+0x15c>)
 8014390:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8014394:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8014396:	f7f4 ff4d 	bl	8009234 <HAL_GetTick>
 801439a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 801439c:	e008      	b.n	80143b0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 801439e:	f7f4 ff49 	bl	8009234 <HAL_GetTick>
 80143a2:	4602      	mov	r2, r0
 80143a4:	68bb      	ldr	r3, [r7, #8]
 80143a6:	1ad3      	subs	r3, r2, r3
 80143a8:	2b02      	cmp	r3, #2
 80143aa:	d901      	bls.n	80143b0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80143ac:	2303      	movs	r3, #3
 80143ae:	e006      	b.n	80143be <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80143b0:	4b05      	ldr	r3, [pc, #20]	@ (80143c8 <RCCEx_PLL2_Config+0x15c>)
 80143b2:	681b      	ldr	r3, [r3, #0]
 80143b4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80143b8:	2b00      	cmp	r3, #0
 80143ba:	d0f0      	beq.n	801439e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80143bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80143be:	4618      	mov	r0, r3
 80143c0:	3710      	adds	r7, #16
 80143c2:	46bd      	mov	sp, r7
 80143c4:	bd80      	pop	{r7, pc}
 80143c6:	bf00      	nop
 80143c8:	58024400 	.word	0x58024400
 80143cc:	ffff0007 	.word	0xffff0007

080143d0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80143d0:	b580      	push	{r7, lr}
 80143d2:	b084      	sub	sp, #16
 80143d4:	af00      	add	r7, sp, #0
 80143d6:	6078      	str	r0, [r7, #4]
 80143d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80143da:	2300      	movs	r3, #0
 80143dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80143de:	4b53      	ldr	r3, [pc, #332]	@ (801452c <RCCEx_PLL3_Config+0x15c>)
 80143e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80143e2:	f003 0303 	and.w	r3, r3, #3
 80143e6:	2b03      	cmp	r3, #3
 80143e8:	d101      	bne.n	80143ee <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80143ea:	2301      	movs	r3, #1
 80143ec:	e099      	b.n	8014522 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80143ee:	4b4f      	ldr	r3, [pc, #316]	@ (801452c <RCCEx_PLL3_Config+0x15c>)
 80143f0:	681b      	ldr	r3, [r3, #0]
 80143f2:	4a4e      	ldr	r2, [pc, #312]	@ (801452c <RCCEx_PLL3_Config+0x15c>)
 80143f4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80143f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80143fa:	f7f4 ff1b 	bl	8009234 <HAL_GetTick>
 80143fe:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8014400:	e008      	b.n	8014414 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8014402:	f7f4 ff17 	bl	8009234 <HAL_GetTick>
 8014406:	4602      	mov	r2, r0
 8014408:	68bb      	ldr	r3, [r7, #8]
 801440a:	1ad3      	subs	r3, r2, r3
 801440c:	2b02      	cmp	r3, #2
 801440e:	d901      	bls.n	8014414 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8014410:	2303      	movs	r3, #3
 8014412:	e086      	b.n	8014522 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8014414:	4b45      	ldr	r3, [pc, #276]	@ (801452c <RCCEx_PLL3_Config+0x15c>)
 8014416:	681b      	ldr	r3, [r3, #0]
 8014418:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801441c:	2b00      	cmp	r3, #0
 801441e:	d1f0      	bne.n	8014402 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8014420:	4b42      	ldr	r3, [pc, #264]	@ (801452c <RCCEx_PLL3_Config+0x15c>)
 8014422:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014424:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8014428:	687b      	ldr	r3, [r7, #4]
 801442a:	681b      	ldr	r3, [r3, #0]
 801442c:	051b      	lsls	r3, r3, #20
 801442e:	493f      	ldr	r1, [pc, #252]	@ (801452c <RCCEx_PLL3_Config+0x15c>)
 8014430:	4313      	orrs	r3, r2
 8014432:	628b      	str	r3, [r1, #40]	@ 0x28
 8014434:	687b      	ldr	r3, [r7, #4]
 8014436:	685b      	ldr	r3, [r3, #4]
 8014438:	3b01      	subs	r3, #1
 801443a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801443e:	687b      	ldr	r3, [r7, #4]
 8014440:	689b      	ldr	r3, [r3, #8]
 8014442:	3b01      	subs	r3, #1
 8014444:	025b      	lsls	r3, r3, #9
 8014446:	b29b      	uxth	r3, r3
 8014448:	431a      	orrs	r2, r3
 801444a:	687b      	ldr	r3, [r7, #4]
 801444c:	68db      	ldr	r3, [r3, #12]
 801444e:	3b01      	subs	r3, #1
 8014450:	041b      	lsls	r3, r3, #16
 8014452:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8014456:	431a      	orrs	r2, r3
 8014458:	687b      	ldr	r3, [r7, #4]
 801445a:	691b      	ldr	r3, [r3, #16]
 801445c:	3b01      	subs	r3, #1
 801445e:	061b      	lsls	r3, r3, #24
 8014460:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8014464:	4931      	ldr	r1, [pc, #196]	@ (801452c <RCCEx_PLL3_Config+0x15c>)
 8014466:	4313      	orrs	r3, r2
 8014468:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 801446a:	4b30      	ldr	r3, [pc, #192]	@ (801452c <RCCEx_PLL3_Config+0x15c>)
 801446c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801446e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8014472:	687b      	ldr	r3, [r7, #4]
 8014474:	695b      	ldr	r3, [r3, #20]
 8014476:	492d      	ldr	r1, [pc, #180]	@ (801452c <RCCEx_PLL3_Config+0x15c>)
 8014478:	4313      	orrs	r3, r2
 801447a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 801447c:	4b2b      	ldr	r3, [pc, #172]	@ (801452c <RCCEx_PLL3_Config+0x15c>)
 801447e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014480:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8014484:	687b      	ldr	r3, [r7, #4]
 8014486:	699b      	ldr	r3, [r3, #24]
 8014488:	4928      	ldr	r1, [pc, #160]	@ (801452c <RCCEx_PLL3_Config+0x15c>)
 801448a:	4313      	orrs	r3, r2
 801448c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 801448e:	4b27      	ldr	r3, [pc, #156]	@ (801452c <RCCEx_PLL3_Config+0x15c>)
 8014490:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014492:	4a26      	ldr	r2, [pc, #152]	@ (801452c <RCCEx_PLL3_Config+0x15c>)
 8014494:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8014498:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 801449a:	4b24      	ldr	r3, [pc, #144]	@ (801452c <RCCEx_PLL3_Config+0x15c>)
 801449c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801449e:	4b24      	ldr	r3, [pc, #144]	@ (8014530 <RCCEx_PLL3_Config+0x160>)
 80144a0:	4013      	ands	r3, r2
 80144a2:	687a      	ldr	r2, [r7, #4]
 80144a4:	69d2      	ldr	r2, [r2, #28]
 80144a6:	00d2      	lsls	r2, r2, #3
 80144a8:	4920      	ldr	r1, [pc, #128]	@ (801452c <RCCEx_PLL3_Config+0x15c>)
 80144aa:	4313      	orrs	r3, r2
 80144ac:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80144ae:	4b1f      	ldr	r3, [pc, #124]	@ (801452c <RCCEx_PLL3_Config+0x15c>)
 80144b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80144b2:	4a1e      	ldr	r2, [pc, #120]	@ (801452c <RCCEx_PLL3_Config+0x15c>)
 80144b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80144b8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80144ba:	683b      	ldr	r3, [r7, #0]
 80144bc:	2b00      	cmp	r3, #0
 80144be:	d106      	bne.n	80144ce <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80144c0:	4b1a      	ldr	r3, [pc, #104]	@ (801452c <RCCEx_PLL3_Config+0x15c>)
 80144c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80144c4:	4a19      	ldr	r2, [pc, #100]	@ (801452c <RCCEx_PLL3_Config+0x15c>)
 80144c6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80144ca:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80144cc:	e00f      	b.n	80144ee <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80144ce:	683b      	ldr	r3, [r7, #0]
 80144d0:	2b01      	cmp	r3, #1
 80144d2:	d106      	bne.n	80144e2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80144d4:	4b15      	ldr	r3, [pc, #84]	@ (801452c <RCCEx_PLL3_Config+0x15c>)
 80144d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80144d8:	4a14      	ldr	r2, [pc, #80]	@ (801452c <RCCEx_PLL3_Config+0x15c>)
 80144da:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80144de:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80144e0:	e005      	b.n	80144ee <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80144e2:	4b12      	ldr	r3, [pc, #72]	@ (801452c <RCCEx_PLL3_Config+0x15c>)
 80144e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80144e6:	4a11      	ldr	r2, [pc, #68]	@ (801452c <RCCEx_PLL3_Config+0x15c>)
 80144e8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80144ec:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80144ee:	4b0f      	ldr	r3, [pc, #60]	@ (801452c <RCCEx_PLL3_Config+0x15c>)
 80144f0:	681b      	ldr	r3, [r3, #0]
 80144f2:	4a0e      	ldr	r2, [pc, #56]	@ (801452c <RCCEx_PLL3_Config+0x15c>)
 80144f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80144f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80144fa:	f7f4 fe9b 	bl	8009234 <HAL_GetTick>
 80144fe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8014500:	e008      	b.n	8014514 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8014502:	f7f4 fe97 	bl	8009234 <HAL_GetTick>
 8014506:	4602      	mov	r2, r0
 8014508:	68bb      	ldr	r3, [r7, #8]
 801450a:	1ad3      	subs	r3, r2, r3
 801450c:	2b02      	cmp	r3, #2
 801450e:	d901      	bls.n	8014514 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8014510:	2303      	movs	r3, #3
 8014512:	e006      	b.n	8014522 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8014514:	4b05      	ldr	r3, [pc, #20]	@ (801452c <RCCEx_PLL3_Config+0x15c>)
 8014516:	681b      	ldr	r3, [r3, #0]
 8014518:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801451c:	2b00      	cmp	r3, #0
 801451e:	d0f0      	beq.n	8014502 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8014520:	7bfb      	ldrb	r3, [r7, #15]
}
 8014522:	4618      	mov	r0, r3
 8014524:	3710      	adds	r7, #16
 8014526:	46bd      	mov	sp, r7
 8014528:	bd80      	pop	{r7, pc}
 801452a:	bf00      	nop
 801452c:	58024400 	.word	0x58024400
 8014530:	ffff0007 	.word	0xffff0007

08014534 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8014534:	b580      	push	{r7, lr}
 8014536:	b084      	sub	sp, #16
 8014538:	af00      	add	r7, sp, #0
 801453a:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 801453c:	687b      	ldr	r3, [r7, #4]
 801453e:	2b00      	cmp	r3, #0
 8014540:	d101      	bne.n	8014546 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8014542:	2301      	movs	r3, #1
 8014544:	e10f      	b.n	8014766 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8014546:	687b      	ldr	r3, [r7, #4]
 8014548:	2200      	movs	r2, #0
 801454a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 801454c:	687b      	ldr	r3, [r7, #4]
 801454e:	681b      	ldr	r3, [r3, #0]
 8014550:	4a87      	ldr	r2, [pc, #540]	@ (8014770 <HAL_SPI_Init+0x23c>)
 8014552:	4293      	cmp	r3, r2
 8014554:	d00f      	beq.n	8014576 <HAL_SPI_Init+0x42>
 8014556:	687b      	ldr	r3, [r7, #4]
 8014558:	681b      	ldr	r3, [r3, #0]
 801455a:	4a86      	ldr	r2, [pc, #536]	@ (8014774 <HAL_SPI_Init+0x240>)
 801455c:	4293      	cmp	r3, r2
 801455e:	d00a      	beq.n	8014576 <HAL_SPI_Init+0x42>
 8014560:	687b      	ldr	r3, [r7, #4]
 8014562:	681b      	ldr	r3, [r3, #0]
 8014564:	4a84      	ldr	r2, [pc, #528]	@ (8014778 <HAL_SPI_Init+0x244>)
 8014566:	4293      	cmp	r3, r2
 8014568:	d005      	beq.n	8014576 <HAL_SPI_Init+0x42>
 801456a:	687b      	ldr	r3, [r7, #4]
 801456c:	68db      	ldr	r3, [r3, #12]
 801456e:	2b0f      	cmp	r3, #15
 8014570:	d901      	bls.n	8014576 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8014572:	2301      	movs	r3, #1
 8014574:	e0f7      	b.n	8014766 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8014576:	6878      	ldr	r0, [r7, #4]
 8014578:	f001 fd22 	bl	8015fc0 <SPI_GetPacketSize>
 801457c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 801457e:	687b      	ldr	r3, [r7, #4]
 8014580:	681b      	ldr	r3, [r3, #0]
 8014582:	4a7b      	ldr	r2, [pc, #492]	@ (8014770 <HAL_SPI_Init+0x23c>)
 8014584:	4293      	cmp	r3, r2
 8014586:	d00c      	beq.n	80145a2 <HAL_SPI_Init+0x6e>
 8014588:	687b      	ldr	r3, [r7, #4]
 801458a:	681b      	ldr	r3, [r3, #0]
 801458c:	4a79      	ldr	r2, [pc, #484]	@ (8014774 <HAL_SPI_Init+0x240>)
 801458e:	4293      	cmp	r3, r2
 8014590:	d007      	beq.n	80145a2 <HAL_SPI_Init+0x6e>
 8014592:	687b      	ldr	r3, [r7, #4]
 8014594:	681b      	ldr	r3, [r3, #0]
 8014596:	4a78      	ldr	r2, [pc, #480]	@ (8014778 <HAL_SPI_Init+0x244>)
 8014598:	4293      	cmp	r3, r2
 801459a:	d002      	beq.n	80145a2 <HAL_SPI_Init+0x6e>
 801459c:	68fb      	ldr	r3, [r7, #12]
 801459e:	2b08      	cmp	r3, #8
 80145a0:	d811      	bhi.n	80145c6 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80145a2:	687b      	ldr	r3, [r7, #4]
 80145a4:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80145a6:	4a72      	ldr	r2, [pc, #456]	@ (8014770 <HAL_SPI_Init+0x23c>)
 80145a8:	4293      	cmp	r3, r2
 80145aa:	d009      	beq.n	80145c0 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80145ac:	687b      	ldr	r3, [r7, #4]
 80145ae:	681b      	ldr	r3, [r3, #0]
 80145b0:	4a70      	ldr	r2, [pc, #448]	@ (8014774 <HAL_SPI_Init+0x240>)
 80145b2:	4293      	cmp	r3, r2
 80145b4:	d004      	beq.n	80145c0 <HAL_SPI_Init+0x8c>
 80145b6:	687b      	ldr	r3, [r7, #4]
 80145b8:	681b      	ldr	r3, [r3, #0]
 80145ba:	4a6f      	ldr	r2, [pc, #444]	@ (8014778 <HAL_SPI_Init+0x244>)
 80145bc:	4293      	cmp	r3, r2
 80145be:	d104      	bne.n	80145ca <HAL_SPI_Init+0x96>
 80145c0:	68fb      	ldr	r3, [r7, #12]
 80145c2:	2b10      	cmp	r3, #16
 80145c4:	d901      	bls.n	80145ca <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 80145c6:	2301      	movs	r3, #1
 80145c8:	e0cd      	b.n	8014766 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80145ca:	687b      	ldr	r3, [r7, #4]
 80145cc:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80145d0:	b2db      	uxtb	r3, r3
 80145d2:	2b00      	cmp	r3, #0
 80145d4:	d106      	bne.n	80145e4 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80145d6:	687b      	ldr	r3, [r7, #4]
 80145d8:	2200      	movs	r2, #0
 80145da:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80145de:	6878      	ldr	r0, [r7, #4]
 80145e0:	f7f3 fb7c 	bl	8007cdc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80145e4:	687b      	ldr	r3, [r7, #4]
 80145e6:	2202      	movs	r2, #2
 80145e8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80145ec:	687b      	ldr	r3, [r7, #4]
 80145ee:	681b      	ldr	r3, [r3, #0]
 80145f0:	681a      	ldr	r2, [r3, #0]
 80145f2:	687b      	ldr	r3, [r7, #4]
 80145f4:	681b      	ldr	r3, [r3, #0]
 80145f6:	f022 0201 	bic.w	r2, r2, #1
 80145fa:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80145fc:	687b      	ldr	r3, [r7, #4]
 80145fe:	681b      	ldr	r3, [r3, #0]
 8014600:	689b      	ldr	r3, [r3, #8]
 8014602:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8014606:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8014608:	687b      	ldr	r3, [r7, #4]
 801460a:	699b      	ldr	r3, [r3, #24]
 801460c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8014610:	d119      	bne.n	8014646 <HAL_SPI_Init+0x112>
 8014612:	687b      	ldr	r3, [r7, #4]
 8014614:	685b      	ldr	r3, [r3, #4]
 8014616:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 801461a:	d103      	bne.n	8014624 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 801461c:	687b      	ldr	r3, [r7, #4]
 801461e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8014620:	2b00      	cmp	r3, #0
 8014622:	d008      	beq.n	8014636 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8014624:	687b      	ldr	r3, [r7, #4]
 8014626:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8014628:	2b00      	cmp	r3, #0
 801462a:	d10c      	bne.n	8014646 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 801462c:	687b      	ldr	r3, [r7, #4]
 801462e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8014630:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8014634:	d107      	bne.n	8014646 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8014636:	687b      	ldr	r3, [r7, #4]
 8014638:	681b      	ldr	r3, [r3, #0]
 801463a:	681a      	ldr	r2, [r3, #0]
 801463c:	687b      	ldr	r3, [r7, #4]
 801463e:	681b      	ldr	r3, [r3, #0]
 8014640:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8014644:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8014646:	687b      	ldr	r3, [r7, #4]
 8014648:	685b      	ldr	r3, [r3, #4]
 801464a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 801464e:	2b00      	cmp	r3, #0
 8014650:	d00f      	beq.n	8014672 <HAL_SPI_Init+0x13e>
 8014652:	687b      	ldr	r3, [r7, #4]
 8014654:	68db      	ldr	r3, [r3, #12]
 8014656:	2b06      	cmp	r3, #6
 8014658:	d90b      	bls.n	8014672 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 801465a:	687b      	ldr	r3, [r7, #4]
 801465c:	681b      	ldr	r3, [r3, #0]
 801465e:	681b      	ldr	r3, [r3, #0]
 8014660:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8014664:	687b      	ldr	r3, [r7, #4]
 8014666:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8014668:	687b      	ldr	r3, [r7, #4]
 801466a:	681b      	ldr	r3, [r3, #0]
 801466c:	430a      	orrs	r2, r1
 801466e:	601a      	str	r2, [r3, #0]
 8014670:	e007      	b.n	8014682 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8014672:	687b      	ldr	r3, [r7, #4]
 8014674:	681b      	ldr	r3, [r3, #0]
 8014676:	681a      	ldr	r2, [r3, #0]
 8014678:	687b      	ldr	r3, [r7, #4]
 801467a:	681b      	ldr	r3, [r3, #0]
 801467c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8014680:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8014682:	687b      	ldr	r3, [r7, #4]
 8014684:	69da      	ldr	r2, [r3, #28]
 8014686:	687b      	ldr	r3, [r7, #4]
 8014688:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801468a:	431a      	orrs	r2, r3
 801468c:	68bb      	ldr	r3, [r7, #8]
 801468e:	431a      	orrs	r2, r3
 8014690:	687b      	ldr	r3, [r7, #4]
 8014692:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014694:	ea42 0103 	orr.w	r1, r2, r3
 8014698:	687b      	ldr	r3, [r7, #4]
 801469a:	68da      	ldr	r2, [r3, #12]
 801469c:	687b      	ldr	r3, [r7, #4]
 801469e:	681b      	ldr	r3, [r3, #0]
 80146a0:	430a      	orrs	r2, r1
 80146a2:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80146a4:	687b      	ldr	r3, [r7, #4]
 80146a6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80146a8:	687b      	ldr	r3, [r7, #4]
 80146aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80146ac:	431a      	orrs	r2, r3
 80146ae:	687b      	ldr	r3, [r7, #4]
 80146b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80146b2:	431a      	orrs	r2, r3
 80146b4:	687b      	ldr	r3, [r7, #4]
 80146b6:	699b      	ldr	r3, [r3, #24]
 80146b8:	431a      	orrs	r2, r3
 80146ba:	687b      	ldr	r3, [r7, #4]
 80146bc:	691b      	ldr	r3, [r3, #16]
 80146be:	431a      	orrs	r2, r3
 80146c0:	687b      	ldr	r3, [r7, #4]
 80146c2:	695b      	ldr	r3, [r3, #20]
 80146c4:	431a      	orrs	r2, r3
 80146c6:	687b      	ldr	r3, [r7, #4]
 80146c8:	6a1b      	ldr	r3, [r3, #32]
 80146ca:	431a      	orrs	r2, r3
 80146cc:	687b      	ldr	r3, [r7, #4]
 80146ce:	685b      	ldr	r3, [r3, #4]
 80146d0:	431a      	orrs	r2, r3
 80146d2:	687b      	ldr	r3, [r7, #4]
 80146d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80146d6:	431a      	orrs	r2, r3
 80146d8:	687b      	ldr	r3, [r7, #4]
 80146da:	689b      	ldr	r3, [r3, #8]
 80146dc:	431a      	orrs	r2, r3
 80146de:	687b      	ldr	r3, [r7, #4]
 80146e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80146e2:	ea42 0103 	orr.w	r1, r2, r3
 80146e6:	687b      	ldr	r3, [r7, #4]
 80146e8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80146ea:	687b      	ldr	r3, [r7, #4]
 80146ec:	681b      	ldr	r3, [r3, #0]
 80146ee:	430a      	orrs	r2, r1
 80146f0:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80146f2:	687b      	ldr	r3, [r7, #4]
 80146f4:	685b      	ldr	r3, [r3, #4]
 80146f6:	2b00      	cmp	r3, #0
 80146f8:	d113      	bne.n	8014722 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80146fa:	687b      	ldr	r3, [r7, #4]
 80146fc:	681b      	ldr	r3, [r3, #0]
 80146fe:	689b      	ldr	r3, [r3, #8]
 8014700:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8014704:	687b      	ldr	r3, [r7, #4]
 8014706:	681b      	ldr	r3, [r3, #0]
 8014708:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 801470c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 801470e:	687b      	ldr	r3, [r7, #4]
 8014710:	681b      	ldr	r3, [r3, #0]
 8014712:	689b      	ldr	r3, [r3, #8]
 8014714:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8014718:	687b      	ldr	r3, [r7, #4]
 801471a:	681b      	ldr	r3, [r3, #0]
 801471c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8014720:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8014722:	687b      	ldr	r3, [r7, #4]
 8014724:	681b      	ldr	r3, [r3, #0]
 8014726:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8014728:	687b      	ldr	r3, [r7, #4]
 801472a:	681b      	ldr	r3, [r3, #0]
 801472c:	f022 0201 	bic.w	r2, r2, #1
 8014730:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8014732:	687b      	ldr	r3, [r7, #4]
 8014734:	685b      	ldr	r3, [r3, #4]
 8014736:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 801473a:	2b00      	cmp	r3, #0
 801473c:	d00a      	beq.n	8014754 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 801473e:	687b      	ldr	r3, [r7, #4]
 8014740:	681b      	ldr	r3, [r3, #0]
 8014742:	68db      	ldr	r3, [r3, #12]
 8014744:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8014748:	687b      	ldr	r3, [r7, #4]
 801474a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801474c:	687b      	ldr	r3, [r7, #4]
 801474e:	681b      	ldr	r3, [r3, #0]
 8014750:	430a      	orrs	r2, r1
 8014752:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8014754:	687b      	ldr	r3, [r7, #4]
 8014756:	2200      	movs	r2, #0
 8014758:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 801475c:	687b      	ldr	r3, [r7, #4]
 801475e:	2201      	movs	r2, #1
 8014760:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8014764:	2300      	movs	r3, #0
}
 8014766:	4618      	mov	r0, r3
 8014768:	3710      	adds	r7, #16
 801476a:	46bd      	mov	sp, r7
 801476c:	bd80      	pop	{r7, pc}
 801476e:	bf00      	nop
 8014770:	40013000 	.word	0x40013000
 8014774:	40003800 	.word	0x40003800
 8014778:	40003c00 	.word	0x40003c00

0801477c <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801477c:	b580      	push	{r7, lr}
 801477e:	b088      	sub	sp, #32
 8014780:	af02      	add	r7, sp, #8
 8014782:	60f8      	str	r0, [r7, #12]
 8014784:	60b9      	str	r1, [r7, #8]
 8014786:	603b      	str	r3, [r7, #0]
 8014788:	4613      	mov	r3, r2
 801478a:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 801478c:	68fb      	ldr	r3, [r7, #12]
 801478e:	681b      	ldr	r3, [r3, #0]
 8014790:	3320      	adds	r3, #32
 8014792:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8014794:	f7f4 fd4e 	bl	8009234 <HAL_GetTick>
 8014798:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 801479a:	68fb      	ldr	r3, [r7, #12]
 801479c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80147a0:	b2db      	uxtb	r3, r3
 80147a2:	2b01      	cmp	r3, #1
 80147a4:	d001      	beq.n	80147aa <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 80147a6:	2302      	movs	r3, #2
 80147a8:	e1d1      	b.n	8014b4e <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 80147aa:	68bb      	ldr	r3, [r7, #8]
 80147ac:	2b00      	cmp	r3, #0
 80147ae:	d002      	beq.n	80147b6 <HAL_SPI_Transmit+0x3a>
 80147b0:	88fb      	ldrh	r3, [r7, #6]
 80147b2:	2b00      	cmp	r3, #0
 80147b4:	d101      	bne.n	80147ba <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 80147b6:	2301      	movs	r3, #1
 80147b8:	e1c9      	b.n	8014b4e <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80147ba:	68fb      	ldr	r3, [r7, #12]
 80147bc:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80147c0:	2b01      	cmp	r3, #1
 80147c2:	d101      	bne.n	80147c8 <HAL_SPI_Transmit+0x4c>
 80147c4:	2302      	movs	r3, #2
 80147c6:	e1c2      	b.n	8014b4e <HAL_SPI_Transmit+0x3d2>
 80147c8:	68fb      	ldr	r3, [r7, #12]
 80147ca:	2201      	movs	r2, #1
 80147cc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80147d0:	68fb      	ldr	r3, [r7, #12]
 80147d2:	2203      	movs	r2, #3
 80147d4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80147d8:	68fb      	ldr	r3, [r7, #12]
 80147da:	2200      	movs	r2, #0
 80147dc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80147e0:	68fb      	ldr	r3, [r7, #12]
 80147e2:	68ba      	ldr	r2, [r7, #8]
 80147e4:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 80147e6:	68fb      	ldr	r3, [r7, #12]
 80147e8:	88fa      	ldrh	r2, [r7, #6]
 80147ea:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 80147ee:	68fb      	ldr	r3, [r7, #12]
 80147f0:	88fa      	ldrh	r2, [r7, #6]
 80147f2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 80147f6:	68fb      	ldr	r3, [r7, #12]
 80147f8:	2200      	movs	r2, #0
 80147fa:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 80147fc:	68fb      	ldr	r3, [r7, #12]
 80147fe:	2200      	movs	r2, #0
 8014800:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8014804:	68fb      	ldr	r3, [r7, #12]
 8014806:	2200      	movs	r2, #0
 8014808:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 801480c:	68fb      	ldr	r3, [r7, #12]
 801480e:	2200      	movs	r2, #0
 8014810:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 8014812:	68fb      	ldr	r3, [r7, #12]
 8014814:	2200      	movs	r2, #0
 8014816:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8014818:	68fb      	ldr	r3, [r7, #12]
 801481a:	689b      	ldr	r3, [r3, #8]
 801481c:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8014820:	d108      	bne.n	8014834 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 8014822:	68fb      	ldr	r3, [r7, #12]
 8014824:	681b      	ldr	r3, [r3, #0]
 8014826:	681a      	ldr	r2, [r3, #0]
 8014828:	68fb      	ldr	r3, [r7, #12]
 801482a:	681b      	ldr	r3, [r3, #0]
 801482c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8014830:	601a      	str	r2, [r3, #0]
 8014832:	e009      	b.n	8014848 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8014834:	68fb      	ldr	r3, [r7, #12]
 8014836:	681b      	ldr	r3, [r3, #0]
 8014838:	68db      	ldr	r3, [r3, #12]
 801483a:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 801483e:	68fb      	ldr	r3, [r7, #12]
 8014840:	681b      	ldr	r3, [r3, #0]
 8014842:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8014846:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8014848:	68fb      	ldr	r3, [r7, #12]
 801484a:	681b      	ldr	r3, [r3, #0]
 801484c:	685a      	ldr	r2, [r3, #4]
 801484e:	4b96      	ldr	r3, [pc, #600]	@ (8014aa8 <HAL_SPI_Transmit+0x32c>)
 8014850:	4013      	ands	r3, r2
 8014852:	88f9      	ldrh	r1, [r7, #6]
 8014854:	68fa      	ldr	r2, [r7, #12]
 8014856:	6812      	ldr	r2, [r2, #0]
 8014858:	430b      	orrs	r3, r1
 801485a:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 801485c:	68fb      	ldr	r3, [r7, #12]
 801485e:	681b      	ldr	r3, [r3, #0]
 8014860:	681a      	ldr	r2, [r3, #0]
 8014862:	68fb      	ldr	r3, [r7, #12]
 8014864:	681b      	ldr	r3, [r3, #0]
 8014866:	f042 0201 	orr.w	r2, r2, #1
 801486a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 801486c:	68fb      	ldr	r3, [r7, #12]
 801486e:	685b      	ldr	r3, [r3, #4]
 8014870:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8014874:	d107      	bne.n	8014886 <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8014876:	68fb      	ldr	r3, [r7, #12]
 8014878:	681b      	ldr	r3, [r3, #0]
 801487a:	681a      	ldr	r2, [r3, #0]
 801487c:	68fb      	ldr	r3, [r7, #12]
 801487e:	681b      	ldr	r3, [r3, #0]
 8014880:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8014884:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8014886:	68fb      	ldr	r3, [r7, #12]
 8014888:	68db      	ldr	r3, [r3, #12]
 801488a:	2b0f      	cmp	r3, #15
 801488c:	d947      	bls.n	801491e <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 801488e:	e03f      	b.n	8014910 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8014890:	68fb      	ldr	r3, [r7, #12]
 8014892:	681b      	ldr	r3, [r3, #0]
 8014894:	695b      	ldr	r3, [r3, #20]
 8014896:	f003 0302 	and.w	r3, r3, #2
 801489a:	2b02      	cmp	r3, #2
 801489c:	d114      	bne.n	80148c8 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 801489e:	68fb      	ldr	r3, [r7, #12]
 80148a0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80148a2:	68fb      	ldr	r3, [r7, #12]
 80148a4:	681b      	ldr	r3, [r3, #0]
 80148a6:	6812      	ldr	r2, [r2, #0]
 80148a8:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80148aa:	68fb      	ldr	r3, [r7, #12]
 80148ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80148ae:	1d1a      	adds	r2, r3, #4
 80148b0:	68fb      	ldr	r3, [r7, #12]
 80148b2:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 80148b4:	68fb      	ldr	r3, [r7, #12]
 80148b6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80148ba:	b29b      	uxth	r3, r3
 80148bc:	3b01      	subs	r3, #1
 80148be:	b29a      	uxth	r2, r3
 80148c0:	68fb      	ldr	r3, [r7, #12]
 80148c2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80148c6:	e023      	b.n	8014910 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80148c8:	f7f4 fcb4 	bl	8009234 <HAL_GetTick>
 80148cc:	4602      	mov	r2, r0
 80148ce:	693b      	ldr	r3, [r7, #16]
 80148d0:	1ad3      	subs	r3, r2, r3
 80148d2:	683a      	ldr	r2, [r7, #0]
 80148d4:	429a      	cmp	r2, r3
 80148d6:	d803      	bhi.n	80148e0 <HAL_SPI_Transmit+0x164>
 80148d8:	683b      	ldr	r3, [r7, #0]
 80148da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80148de:	d102      	bne.n	80148e6 <HAL_SPI_Transmit+0x16a>
 80148e0:	683b      	ldr	r3, [r7, #0]
 80148e2:	2b00      	cmp	r3, #0
 80148e4:	d114      	bne.n	8014910 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80148e6:	68f8      	ldr	r0, [r7, #12]
 80148e8:	f001 fa9c 	bl	8015e24 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80148ec:	68fb      	ldr	r3, [r7, #12]
 80148ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80148f2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80148f6:	68fb      	ldr	r3, [r7, #12]
 80148f8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80148fc:	68fb      	ldr	r3, [r7, #12]
 80148fe:	2201      	movs	r2, #1
 8014900:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8014904:	68fb      	ldr	r3, [r7, #12]
 8014906:	2200      	movs	r2, #0
 8014908:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 801490c:	2303      	movs	r3, #3
 801490e:	e11e      	b.n	8014b4e <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8014910:	68fb      	ldr	r3, [r7, #12]
 8014912:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8014916:	b29b      	uxth	r3, r3
 8014918:	2b00      	cmp	r3, #0
 801491a:	d1b9      	bne.n	8014890 <HAL_SPI_Transmit+0x114>
 801491c:	e0f1      	b.n	8014b02 <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801491e:	68fb      	ldr	r3, [r7, #12]
 8014920:	68db      	ldr	r3, [r3, #12]
 8014922:	2b07      	cmp	r3, #7
 8014924:	f240 80e6 	bls.w	8014af4 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8014928:	e05d      	b.n	80149e6 <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 801492a:	68fb      	ldr	r3, [r7, #12]
 801492c:	681b      	ldr	r3, [r3, #0]
 801492e:	695b      	ldr	r3, [r3, #20]
 8014930:	f003 0302 	and.w	r3, r3, #2
 8014934:	2b02      	cmp	r3, #2
 8014936:	d132      	bne.n	801499e <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8014938:	68fb      	ldr	r3, [r7, #12]
 801493a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801493e:	b29b      	uxth	r3, r3
 8014940:	2b01      	cmp	r3, #1
 8014942:	d918      	bls.n	8014976 <HAL_SPI_Transmit+0x1fa>
 8014944:	68fb      	ldr	r3, [r7, #12]
 8014946:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014948:	2b00      	cmp	r3, #0
 801494a:	d014      	beq.n	8014976 <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 801494c:	68fb      	ldr	r3, [r7, #12]
 801494e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8014950:	68fb      	ldr	r3, [r7, #12]
 8014952:	681b      	ldr	r3, [r3, #0]
 8014954:	6812      	ldr	r2, [r2, #0]
 8014956:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8014958:	68fb      	ldr	r3, [r7, #12]
 801495a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801495c:	1d1a      	adds	r2, r3, #4
 801495e:	68fb      	ldr	r3, [r7, #12]
 8014960:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8014962:	68fb      	ldr	r3, [r7, #12]
 8014964:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8014968:	b29b      	uxth	r3, r3
 801496a:	3b02      	subs	r3, #2
 801496c:	b29a      	uxth	r2, r3
 801496e:	68fb      	ldr	r3, [r7, #12]
 8014970:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8014974:	e037      	b.n	80149e6 <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8014976:	68fb      	ldr	r3, [r7, #12]
 8014978:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801497a:	881a      	ldrh	r2, [r3, #0]
 801497c:	697b      	ldr	r3, [r7, #20]
 801497e:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8014980:	68fb      	ldr	r3, [r7, #12]
 8014982:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8014984:	1c9a      	adds	r2, r3, #2
 8014986:	68fb      	ldr	r3, [r7, #12]
 8014988:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 801498a:	68fb      	ldr	r3, [r7, #12]
 801498c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8014990:	b29b      	uxth	r3, r3
 8014992:	3b01      	subs	r3, #1
 8014994:	b29a      	uxth	r2, r3
 8014996:	68fb      	ldr	r3, [r7, #12]
 8014998:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 801499c:	e023      	b.n	80149e6 <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801499e:	f7f4 fc49 	bl	8009234 <HAL_GetTick>
 80149a2:	4602      	mov	r2, r0
 80149a4:	693b      	ldr	r3, [r7, #16]
 80149a6:	1ad3      	subs	r3, r2, r3
 80149a8:	683a      	ldr	r2, [r7, #0]
 80149aa:	429a      	cmp	r2, r3
 80149ac:	d803      	bhi.n	80149b6 <HAL_SPI_Transmit+0x23a>
 80149ae:	683b      	ldr	r3, [r7, #0]
 80149b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80149b4:	d102      	bne.n	80149bc <HAL_SPI_Transmit+0x240>
 80149b6:	683b      	ldr	r3, [r7, #0]
 80149b8:	2b00      	cmp	r3, #0
 80149ba:	d114      	bne.n	80149e6 <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80149bc:	68f8      	ldr	r0, [r7, #12]
 80149be:	f001 fa31 	bl	8015e24 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80149c2:	68fb      	ldr	r3, [r7, #12]
 80149c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80149c8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80149cc:	68fb      	ldr	r3, [r7, #12]
 80149ce:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80149d2:	68fb      	ldr	r3, [r7, #12]
 80149d4:	2201      	movs	r2, #1
 80149d6:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80149da:	68fb      	ldr	r3, [r7, #12]
 80149dc:	2200      	movs	r2, #0
 80149de:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80149e2:	2303      	movs	r3, #3
 80149e4:	e0b3      	b.n	8014b4e <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 80149e6:	68fb      	ldr	r3, [r7, #12]
 80149e8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80149ec:	b29b      	uxth	r3, r3
 80149ee:	2b00      	cmp	r3, #0
 80149f0:	d19b      	bne.n	801492a <HAL_SPI_Transmit+0x1ae>
 80149f2:	e086      	b.n	8014b02 <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80149f4:	68fb      	ldr	r3, [r7, #12]
 80149f6:	681b      	ldr	r3, [r3, #0]
 80149f8:	695b      	ldr	r3, [r3, #20]
 80149fa:	f003 0302 	and.w	r3, r3, #2
 80149fe:	2b02      	cmp	r3, #2
 8014a00:	d154      	bne.n	8014aac <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8014a02:	68fb      	ldr	r3, [r7, #12]
 8014a04:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8014a08:	b29b      	uxth	r3, r3
 8014a0a:	2b03      	cmp	r3, #3
 8014a0c:	d918      	bls.n	8014a40 <HAL_SPI_Transmit+0x2c4>
 8014a0e:	68fb      	ldr	r3, [r7, #12]
 8014a10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014a12:	2b40      	cmp	r3, #64	@ 0x40
 8014a14:	d914      	bls.n	8014a40 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8014a16:	68fb      	ldr	r3, [r7, #12]
 8014a18:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8014a1a:	68fb      	ldr	r3, [r7, #12]
 8014a1c:	681b      	ldr	r3, [r3, #0]
 8014a1e:	6812      	ldr	r2, [r2, #0]
 8014a20:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8014a22:	68fb      	ldr	r3, [r7, #12]
 8014a24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8014a26:	1d1a      	adds	r2, r3, #4
 8014a28:	68fb      	ldr	r3, [r7, #12]
 8014a2a:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8014a2c:	68fb      	ldr	r3, [r7, #12]
 8014a2e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8014a32:	b29b      	uxth	r3, r3
 8014a34:	3b04      	subs	r3, #4
 8014a36:	b29a      	uxth	r2, r3
 8014a38:	68fb      	ldr	r3, [r7, #12]
 8014a3a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8014a3e:	e059      	b.n	8014af4 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8014a40:	68fb      	ldr	r3, [r7, #12]
 8014a42:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8014a46:	b29b      	uxth	r3, r3
 8014a48:	2b01      	cmp	r3, #1
 8014a4a:	d917      	bls.n	8014a7c <HAL_SPI_Transmit+0x300>
 8014a4c:	68fb      	ldr	r3, [r7, #12]
 8014a4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014a50:	2b00      	cmp	r3, #0
 8014a52:	d013      	beq.n	8014a7c <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8014a54:	68fb      	ldr	r3, [r7, #12]
 8014a56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8014a58:	881a      	ldrh	r2, [r3, #0]
 8014a5a:	697b      	ldr	r3, [r7, #20]
 8014a5c:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8014a5e:	68fb      	ldr	r3, [r7, #12]
 8014a60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8014a62:	1c9a      	adds	r2, r3, #2
 8014a64:	68fb      	ldr	r3, [r7, #12]
 8014a66:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8014a68:	68fb      	ldr	r3, [r7, #12]
 8014a6a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8014a6e:	b29b      	uxth	r3, r3
 8014a70:	3b02      	subs	r3, #2
 8014a72:	b29a      	uxth	r2, r3
 8014a74:	68fb      	ldr	r3, [r7, #12]
 8014a76:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8014a7a:	e03b      	b.n	8014af4 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8014a7c:	68fb      	ldr	r3, [r7, #12]
 8014a7e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8014a80:	68fb      	ldr	r3, [r7, #12]
 8014a82:	681b      	ldr	r3, [r3, #0]
 8014a84:	3320      	adds	r3, #32
 8014a86:	7812      	ldrb	r2, [r2, #0]
 8014a88:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8014a8a:	68fb      	ldr	r3, [r7, #12]
 8014a8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8014a8e:	1c5a      	adds	r2, r3, #1
 8014a90:	68fb      	ldr	r3, [r7, #12]
 8014a92:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8014a94:	68fb      	ldr	r3, [r7, #12]
 8014a96:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8014a9a:	b29b      	uxth	r3, r3
 8014a9c:	3b01      	subs	r3, #1
 8014a9e:	b29a      	uxth	r2, r3
 8014aa0:	68fb      	ldr	r3, [r7, #12]
 8014aa2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8014aa6:	e025      	b.n	8014af4 <HAL_SPI_Transmit+0x378>
 8014aa8:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8014aac:	f7f4 fbc2 	bl	8009234 <HAL_GetTick>
 8014ab0:	4602      	mov	r2, r0
 8014ab2:	693b      	ldr	r3, [r7, #16]
 8014ab4:	1ad3      	subs	r3, r2, r3
 8014ab6:	683a      	ldr	r2, [r7, #0]
 8014ab8:	429a      	cmp	r2, r3
 8014aba:	d803      	bhi.n	8014ac4 <HAL_SPI_Transmit+0x348>
 8014abc:	683b      	ldr	r3, [r7, #0]
 8014abe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014ac2:	d102      	bne.n	8014aca <HAL_SPI_Transmit+0x34e>
 8014ac4:	683b      	ldr	r3, [r7, #0]
 8014ac6:	2b00      	cmp	r3, #0
 8014ac8:	d114      	bne.n	8014af4 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8014aca:	68f8      	ldr	r0, [r7, #12]
 8014acc:	f001 f9aa 	bl	8015e24 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8014ad0:	68fb      	ldr	r3, [r7, #12]
 8014ad2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8014ad6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8014ada:	68fb      	ldr	r3, [r7, #12]
 8014adc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8014ae0:	68fb      	ldr	r3, [r7, #12]
 8014ae2:	2201      	movs	r2, #1
 8014ae4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8014ae8:	68fb      	ldr	r3, [r7, #12]
 8014aea:	2200      	movs	r2, #0
 8014aec:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8014af0:	2303      	movs	r3, #3
 8014af2:	e02c      	b.n	8014b4e <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8014af4:	68fb      	ldr	r3, [r7, #12]
 8014af6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8014afa:	b29b      	uxth	r3, r3
 8014afc:	2b00      	cmp	r3, #0
 8014afe:	f47f af79 	bne.w	80149f4 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8014b02:	693b      	ldr	r3, [r7, #16]
 8014b04:	9300      	str	r3, [sp, #0]
 8014b06:	683b      	ldr	r3, [r7, #0]
 8014b08:	2200      	movs	r2, #0
 8014b0a:	2108      	movs	r1, #8
 8014b0c:	68f8      	ldr	r0, [r7, #12]
 8014b0e:	f001 fa29 	bl	8015f64 <SPI_WaitOnFlagUntilTimeout>
 8014b12:	4603      	mov	r3, r0
 8014b14:	2b00      	cmp	r3, #0
 8014b16:	d007      	beq.n	8014b28 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8014b18:	68fb      	ldr	r3, [r7, #12]
 8014b1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8014b1e:	f043 0220 	orr.w	r2, r3, #32
 8014b22:	68fb      	ldr	r3, [r7, #12]
 8014b24:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8014b28:	68f8      	ldr	r0, [r7, #12]
 8014b2a:	f001 f97b 	bl	8015e24 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8014b2e:	68fb      	ldr	r3, [r7, #12]
 8014b30:	2201      	movs	r2, #1
 8014b32:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8014b36:	68fb      	ldr	r3, [r7, #12]
 8014b38:	2200      	movs	r2, #0
 8014b3a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8014b3e:	68fb      	ldr	r3, [r7, #12]
 8014b40:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8014b44:	2b00      	cmp	r3, #0
 8014b46:	d001      	beq.n	8014b4c <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 8014b48:	2301      	movs	r3, #1
 8014b4a:	e000      	b.n	8014b4e <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 8014b4c:	2300      	movs	r3, #0
  }
}
 8014b4e:	4618      	mov	r0, r3
 8014b50:	3718      	adds	r7, #24
 8014b52:	46bd      	mov	sp, r7
 8014b54:	bd80      	pop	{r7, pc}
 8014b56:	bf00      	nop

08014b58 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8014b58:	b580      	push	{r7, lr}
 8014b5a:	b088      	sub	sp, #32
 8014b5c:	af00      	add	r7, sp, #0
 8014b5e:	60f8      	str	r0, [r7, #12]
 8014b60:	60b9      	str	r1, [r7, #8]
 8014b62:	603b      	str	r3, [r7, #0]
 8014b64:	4613      	mov	r3, r2
 8014b66:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 8014b68:	68fb      	ldr	r3, [r7, #12]
 8014b6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014b6c:	095b      	lsrs	r3, r3, #5
 8014b6e:	b29b      	uxth	r3, r3
 8014b70:	3301      	adds	r3, #1
 8014b72:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8014b74:	68fb      	ldr	r3, [r7, #12]
 8014b76:	681b      	ldr	r3, [r3, #0]
 8014b78:	3330      	adds	r3, #48	@ 0x30
 8014b7a:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8014b7c:	f7f4 fb5a 	bl	8009234 <HAL_GetTick>
 8014b80:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8014b82:	68fb      	ldr	r3, [r7, #12]
 8014b84:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8014b88:	b2db      	uxtb	r3, r3
 8014b8a:	2b01      	cmp	r3, #1
 8014b8c:	d001      	beq.n	8014b92 <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 8014b8e:	2302      	movs	r3, #2
 8014b90:	e250      	b.n	8015034 <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 8014b92:	68bb      	ldr	r3, [r7, #8]
 8014b94:	2b00      	cmp	r3, #0
 8014b96:	d002      	beq.n	8014b9e <HAL_SPI_Receive+0x46>
 8014b98:	88fb      	ldrh	r3, [r7, #6]
 8014b9a:	2b00      	cmp	r3, #0
 8014b9c:	d101      	bne.n	8014ba2 <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 8014b9e:	2301      	movs	r3, #1
 8014ba0:	e248      	b.n	8015034 <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8014ba2:	68fb      	ldr	r3, [r7, #12]
 8014ba4:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8014ba8:	2b01      	cmp	r3, #1
 8014baa:	d101      	bne.n	8014bb0 <HAL_SPI_Receive+0x58>
 8014bac:	2302      	movs	r3, #2
 8014bae:	e241      	b.n	8015034 <HAL_SPI_Receive+0x4dc>
 8014bb0:	68fb      	ldr	r3, [r7, #12]
 8014bb2:	2201      	movs	r2, #1
 8014bb4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8014bb8:	68fb      	ldr	r3, [r7, #12]
 8014bba:	2204      	movs	r2, #4
 8014bbc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8014bc0:	68fb      	ldr	r3, [r7, #12]
 8014bc2:	2200      	movs	r2, #0
 8014bc4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8014bc8:	68fb      	ldr	r3, [r7, #12]
 8014bca:	68ba      	ldr	r2, [r7, #8]
 8014bcc:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 8014bce:	68fb      	ldr	r3, [r7, #12]
 8014bd0:	88fa      	ldrh	r2, [r7, #6]
 8014bd2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 8014bd6:	68fb      	ldr	r3, [r7, #12]
 8014bd8:	88fa      	ldrh	r2, [r7, #6]
 8014bda:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8014bde:	68fb      	ldr	r3, [r7, #12]
 8014be0:	2200      	movs	r2, #0
 8014be2:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8014be4:	68fb      	ldr	r3, [r7, #12]
 8014be6:	2200      	movs	r2, #0
 8014be8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8014bec:	68fb      	ldr	r3, [r7, #12]
 8014bee:	2200      	movs	r2, #0
 8014bf0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 8014bf4:	68fb      	ldr	r3, [r7, #12]
 8014bf6:	2200      	movs	r2, #0
 8014bf8:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 8014bfa:	68fb      	ldr	r3, [r7, #12]
 8014bfc:	2200      	movs	r2, #0
 8014bfe:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8014c00:	68fb      	ldr	r3, [r7, #12]
 8014c02:	689b      	ldr	r3, [r3, #8]
 8014c04:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8014c08:	d108      	bne.n	8014c1c <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 8014c0a:	68fb      	ldr	r3, [r7, #12]
 8014c0c:	681b      	ldr	r3, [r3, #0]
 8014c0e:	681a      	ldr	r2, [r3, #0]
 8014c10:	68fb      	ldr	r3, [r7, #12]
 8014c12:	681b      	ldr	r3, [r3, #0]
 8014c14:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8014c18:	601a      	str	r2, [r3, #0]
 8014c1a:	e009      	b.n	8014c30 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 8014c1c:	68fb      	ldr	r3, [r7, #12]
 8014c1e:	681b      	ldr	r3, [r3, #0]
 8014c20:	68db      	ldr	r3, [r3, #12]
 8014c22:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8014c26:	68fb      	ldr	r3, [r7, #12]
 8014c28:	681b      	ldr	r3, [r3, #0]
 8014c2a:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8014c2e:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8014c30:	68fb      	ldr	r3, [r7, #12]
 8014c32:	681b      	ldr	r3, [r3, #0]
 8014c34:	685a      	ldr	r2, [r3, #4]
 8014c36:	4b95      	ldr	r3, [pc, #596]	@ (8014e8c <HAL_SPI_Receive+0x334>)
 8014c38:	4013      	ands	r3, r2
 8014c3a:	88f9      	ldrh	r1, [r7, #6]
 8014c3c:	68fa      	ldr	r2, [r7, #12]
 8014c3e:	6812      	ldr	r2, [r2, #0]
 8014c40:	430b      	orrs	r3, r1
 8014c42:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8014c44:	68fb      	ldr	r3, [r7, #12]
 8014c46:	681b      	ldr	r3, [r3, #0]
 8014c48:	681a      	ldr	r2, [r3, #0]
 8014c4a:	68fb      	ldr	r3, [r7, #12]
 8014c4c:	681b      	ldr	r3, [r3, #0]
 8014c4e:	f042 0201 	orr.w	r2, r2, #1
 8014c52:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8014c54:	68fb      	ldr	r3, [r7, #12]
 8014c56:	685b      	ldr	r3, [r3, #4]
 8014c58:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8014c5c:	d107      	bne.n	8014c6e <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8014c5e:	68fb      	ldr	r3, [r7, #12]
 8014c60:	681b      	ldr	r3, [r3, #0]
 8014c62:	681a      	ldr	r2, [r3, #0]
 8014c64:	68fb      	ldr	r3, [r7, #12]
 8014c66:	681b      	ldr	r3, [r3, #0]
 8014c68:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8014c6c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8014c6e:	68fb      	ldr	r3, [r7, #12]
 8014c70:	68db      	ldr	r3, [r3, #12]
 8014c72:	2b0f      	cmp	r3, #15
 8014c74:	d96c      	bls.n	8014d50 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8014c76:	e064      	b.n	8014d42 <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8014c78:	68fb      	ldr	r3, [r7, #12]
 8014c7a:	681b      	ldr	r3, [r3, #0]
 8014c7c:	695b      	ldr	r3, [r3, #20]
 8014c7e:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8014c80:	68fb      	ldr	r3, [r7, #12]
 8014c82:	681b      	ldr	r3, [r3, #0]
 8014c84:	695b      	ldr	r3, [r3, #20]
 8014c86:	f003 0301 	and.w	r3, r3, #1
 8014c8a:	2b01      	cmp	r3, #1
 8014c8c:	d114      	bne.n	8014cb8 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8014c8e:	68fb      	ldr	r3, [r7, #12]
 8014c90:	681a      	ldr	r2, [r3, #0]
 8014c92:	68fb      	ldr	r3, [r7, #12]
 8014c94:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014c96:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8014c98:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8014c9a:	68fb      	ldr	r3, [r7, #12]
 8014c9c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014c9e:	1d1a      	adds	r2, r3, #4
 8014ca0:	68fb      	ldr	r3, [r7, #12]
 8014ca2:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8014ca4:	68fb      	ldr	r3, [r7, #12]
 8014ca6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014caa:	b29b      	uxth	r3, r3
 8014cac:	3b01      	subs	r3, #1
 8014cae:	b29a      	uxth	r2, r3
 8014cb0:	68fb      	ldr	r3, [r7, #12]
 8014cb2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8014cb6:	e044      	b.n	8014d42 <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8014cb8:	68fb      	ldr	r3, [r7, #12]
 8014cba:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014cbe:	b29b      	uxth	r3, r3
 8014cc0:	8bfa      	ldrh	r2, [r7, #30]
 8014cc2:	429a      	cmp	r2, r3
 8014cc4:	d919      	bls.n	8014cfa <HAL_SPI_Receive+0x1a2>
 8014cc6:	693b      	ldr	r3, [r7, #16]
 8014cc8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8014ccc:	2b00      	cmp	r3, #0
 8014cce:	d014      	beq.n	8014cfa <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8014cd0:	68fb      	ldr	r3, [r7, #12]
 8014cd2:	681a      	ldr	r2, [r3, #0]
 8014cd4:	68fb      	ldr	r3, [r7, #12]
 8014cd6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014cd8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8014cda:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8014cdc:	68fb      	ldr	r3, [r7, #12]
 8014cde:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014ce0:	1d1a      	adds	r2, r3, #4
 8014ce2:	68fb      	ldr	r3, [r7, #12]
 8014ce4:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8014ce6:	68fb      	ldr	r3, [r7, #12]
 8014ce8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014cec:	b29b      	uxth	r3, r3
 8014cee:	3b01      	subs	r3, #1
 8014cf0:	b29a      	uxth	r2, r3
 8014cf2:	68fb      	ldr	r3, [r7, #12]
 8014cf4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8014cf8:	e023      	b.n	8014d42 <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8014cfa:	f7f4 fa9b 	bl	8009234 <HAL_GetTick>
 8014cfe:	4602      	mov	r2, r0
 8014d00:	697b      	ldr	r3, [r7, #20]
 8014d02:	1ad3      	subs	r3, r2, r3
 8014d04:	683a      	ldr	r2, [r7, #0]
 8014d06:	429a      	cmp	r2, r3
 8014d08:	d803      	bhi.n	8014d12 <HAL_SPI_Receive+0x1ba>
 8014d0a:	683b      	ldr	r3, [r7, #0]
 8014d0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014d10:	d102      	bne.n	8014d18 <HAL_SPI_Receive+0x1c0>
 8014d12:	683b      	ldr	r3, [r7, #0]
 8014d14:	2b00      	cmp	r3, #0
 8014d16:	d114      	bne.n	8014d42 <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8014d18:	68f8      	ldr	r0, [r7, #12]
 8014d1a:	f001 f883 	bl	8015e24 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8014d1e:	68fb      	ldr	r3, [r7, #12]
 8014d20:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8014d24:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8014d28:	68fb      	ldr	r3, [r7, #12]
 8014d2a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8014d2e:	68fb      	ldr	r3, [r7, #12]
 8014d30:	2201      	movs	r2, #1
 8014d32:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8014d36:	68fb      	ldr	r3, [r7, #12]
 8014d38:	2200      	movs	r2, #0
 8014d3a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8014d3e:	2303      	movs	r3, #3
 8014d40:	e178      	b.n	8015034 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8014d42:	68fb      	ldr	r3, [r7, #12]
 8014d44:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014d48:	b29b      	uxth	r3, r3
 8014d4a:	2b00      	cmp	r3, #0
 8014d4c:	d194      	bne.n	8014c78 <HAL_SPI_Receive+0x120>
 8014d4e:	e15e      	b.n	801500e <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8014d50:	68fb      	ldr	r3, [r7, #12]
 8014d52:	68db      	ldr	r3, [r3, #12]
 8014d54:	2b07      	cmp	r3, #7
 8014d56:	f240 8153 	bls.w	8015000 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8014d5a:	e08f      	b.n	8014e7c <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8014d5c:	68fb      	ldr	r3, [r7, #12]
 8014d5e:	681b      	ldr	r3, [r3, #0]
 8014d60:	695b      	ldr	r3, [r3, #20]
 8014d62:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8014d64:	68fb      	ldr	r3, [r7, #12]
 8014d66:	681b      	ldr	r3, [r3, #0]
 8014d68:	695b      	ldr	r3, [r3, #20]
 8014d6a:	f003 0301 	and.w	r3, r3, #1
 8014d6e:	2b01      	cmp	r3, #1
 8014d70:	d114      	bne.n	8014d9c <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8014d72:	68fb      	ldr	r3, [r7, #12]
 8014d74:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014d76:	69ba      	ldr	r2, [r7, #24]
 8014d78:	8812      	ldrh	r2, [r2, #0]
 8014d7a:	b292      	uxth	r2, r2
 8014d7c:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8014d7e:	68fb      	ldr	r3, [r7, #12]
 8014d80:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014d82:	1c9a      	adds	r2, r3, #2
 8014d84:	68fb      	ldr	r3, [r7, #12]
 8014d86:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8014d88:	68fb      	ldr	r3, [r7, #12]
 8014d8a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014d8e:	b29b      	uxth	r3, r3
 8014d90:	3b01      	subs	r3, #1
 8014d92:	b29a      	uxth	r2, r3
 8014d94:	68fb      	ldr	r3, [r7, #12]
 8014d96:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8014d9a:	e06f      	b.n	8014e7c <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8014d9c:	68fb      	ldr	r3, [r7, #12]
 8014d9e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014da2:	b29b      	uxth	r3, r3
 8014da4:	8bfa      	ldrh	r2, [r7, #30]
 8014da6:	429a      	cmp	r2, r3
 8014da8:	d924      	bls.n	8014df4 <HAL_SPI_Receive+0x29c>
 8014daa:	693b      	ldr	r3, [r7, #16]
 8014dac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8014db0:	2b00      	cmp	r3, #0
 8014db2:	d01f      	beq.n	8014df4 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8014db4:	68fb      	ldr	r3, [r7, #12]
 8014db6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014db8:	69ba      	ldr	r2, [r7, #24]
 8014dba:	8812      	ldrh	r2, [r2, #0]
 8014dbc:	b292      	uxth	r2, r2
 8014dbe:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8014dc0:	68fb      	ldr	r3, [r7, #12]
 8014dc2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014dc4:	1c9a      	adds	r2, r3, #2
 8014dc6:	68fb      	ldr	r3, [r7, #12]
 8014dc8:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8014dca:	68fb      	ldr	r3, [r7, #12]
 8014dcc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014dce:	69ba      	ldr	r2, [r7, #24]
 8014dd0:	8812      	ldrh	r2, [r2, #0]
 8014dd2:	b292      	uxth	r2, r2
 8014dd4:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8014dd6:	68fb      	ldr	r3, [r7, #12]
 8014dd8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014dda:	1c9a      	adds	r2, r3, #2
 8014ddc:	68fb      	ldr	r3, [r7, #12]
 8014dde:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 8014de0:	68fb      	ldr	r3, [r7, #12]
 8014de2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014de6:	b29b      	uxth	r3, r3
 8014de8:	3b02      	subs	r3, #2
 8014dea:	b29a      	uxth	r2, r3
 8014dec:	68fb      	ldr	r3, [r7, #12]
 8014dee:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8014df2:	e043      	b.n	8014e7c <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8014df4:	68fb      	ldr	r3, [r7, #12]
 8014df6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014dfa:	b29b      	uxth	r3, r3
 8014dfc:	2b01      	cmp	r3, #1
 8014dfe:	d119      	bne.n	8014e34 <HAL_SPI_Receive+0x2dc>
 8014e00:	693b      	ldr	r3, [r7, #16]
 8014e02:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8014e06:	2b00      	cmp	r3, #0
 8014e08:	d014      	beq.n	8014e34 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8014e0a:	68fb      	ldr	r3, [r7, #12]
 8014e0c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014e0e:	69ba      	ldr	r2, [r7, #24]
 8014e10:	8812      	ldrh	r2, [r2, #0]
 8014e12:	b292      	uxth	r2, r2
 8014e14:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8014e16:	68fb      	ldr	r3, [r7, #12]
 8014e18:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014e1a:	1c9a      	adds	r2, r3, #2
 8014e1c:	68fb      	ldr	r3, [r7, #12]
 8014e1e:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8014e20:	68fb      	ldr	r3, [r7, #12]
 8014e22:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014e26:	b29b      	uxth	r3, r3
 8014e28:	3b01      	subs	r3, #1
 8014e2a:	b29a      	uxth	r2, r3
 8014e2c:	68fb      	ldr	r3, [r7, #12]
 8014e2e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8014e32:	e023      	b.n	8014e7c <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8014e34:	f7f4 f9fe 	bl	8009234 <HAL_GetTick>
 8014e38:	4602      	mov	r2, r0
 8014e3a:	697b      	ldr	r3, [r7, #20]
 8014e3c:	1ad3      	subs	r3, r2, r3
 8014e3e:	683a      	ldr	r2, [r7, #0]
 8014e40:	429a      	cmp	r2, r3
 8014e42:	d803      	bhi.n	8014e4c <HAL_SPI_Receive+0x2f4>
 8014e44:	683b      	ldr	r3, [r7, #0]
 8014e46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014e4a:	d102      	bne.n	8014e52 <HAL_SPI_Receive+0x2fa>
 8014e4c:	683b      	ldr	r3, [r7, #0]
 8014e4e:	2b00      	cmp	r3, #0
 8014e50:	d114      	bne.n	8014e7c <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8014e52:	68f8      	ldr	r0, [r7, #12]
 8014e54:	f000 ffe6 	bl	8015e24 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8014e58:	68fb      	ldr	r3, [r7, #12]
 8014e5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8014e5e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8014e62:	68fb      	ldr	r3, [r7, #12]
 8014e64:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8014e68:	68fb      	ldr	r3, [r7, #12]
 8014e6a:	2201      	movs	r2, #1
 8014e6c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8014e70:	68fb      	ldr	r3, [r7, #12]
 8014e72:	2200      	movs	r2, #0
 8014e74:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8014e78:	2303      	movs	r3, #3
 8014e7a:	e0db      	b.n	8015034 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8014e7c:	68fb      	ldr	r3, [r7, #12]
 8014e7e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014e82:	b29b      	uxth	r3, r3
 8014e84:	2b00      	cmp	r3, #0
 8014e86:	f47f af69 	bne.w	8014d5c <HAL_SPI_Receive+0x204>
 8014e8a:	e0c0      	b.n	801500e <HAL_SPI_Receive+0x4b6>
 8014e8c:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8014e90:	68fb      	ldr	r3, [r7, #12]
 8014e92:	681b      	ldr	r3, [r3, #0]
 8014e94:	695b      	ldr	r3, [r3, #20]
 8014e96:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8014e98:	68fb      	ldr	r3, [r7, #12]
 8014e9a:	681b      	ldr	r3, [r3, #0]
 8014e9c:	695b      	ldr	r3, [r3, #20]
 8014e9e:	f003 0301 	and.w	r3, r3, #1
 8014ea2:	2b01      	cmp	r3, #1
 8014ea4:	d117      	bne.n	8014ed6 <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8014ea6:	68fb      	ldr	r3, [r7, #12]
 8014ea8:	681b      	ldr	r3, [r3, #0]
 8014eaa:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8014eae:	68fb      	ldr	r3, [r7, #12]
 8014eb0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014eb2:	7812      	ldrb	r2, [r2, #0]
 8014eb4:	b2d2      	uxtb	r2, r2
 8014eb6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8014eb8:	68fb      	ldr	r3, [r7, #12]
 8014eba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014ebc:	1c5a      	adds	r2, r3, #1
 8014ebe:	68fb      	ldr	r3, [r7, #12]
 8014ec0:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8014ec2:	68fb      	ldr	r3, [r7, #12]
 8014ec4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014ec8:	b29b      	uxth	r3, r3
 8014eca:	3b01      	subs	r3, #1
 8014ecc:	b29a      	uxth	r2, r3
 8014ece:	68fb      	ldr	r3, [r7, #12]
 8014ed0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8014ed4:	e094      	b.n	8015000 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8014ed6:	68fb      	ldr	r3, [r7, #12]
 8014ed8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014edc:	b29b      	uxth	r3, r3
 8014ede:	8bfa      	ldrh	r2, [r7, #30]
 8014ee0:	429a      	cmp	r2, r3
 8014ee2:	d946      	bls.n	8014f72 <HAL_SPI_Receive+0x41a>
 8014ee4:	693b      	ldr	r3, [r7, #16]
 8014ee6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8014eea:	2b00      	cmp	r3, #0
 8014eec:	d041      	beq.n	8014f72 <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8014eee:	68fb      	ldr	r3, [r7, #12]
 8014ef0:	681b      	ldr	r3, [r3, #0]
 8014ef2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8014ef6:	68fb      	ldr	r3, [r7, #12]
 8014ef8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014efa:	7812      	ldrb	r2, [r2, #0]
 8014efc:	b2d2      	uxtb	r2, r2
 8014efe:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8014f00:	68fb      	ldr	r3, [r7, #12]
 8014f02:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014f04:	1c5a      	adds	r2, r3, #1
 8014f06:	68fb      	ldr	r3, [r7, #12]
 8014f08:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8014f0a:	68fb      	ldr	r3, [r7, #12]
 8014f0c:	681b      	ldr	r3, [r3, #0]
 8014f0e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8014f12:	68fb      	ldr	r3, [r7, #12]
 8014f14:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014f16:	7812      	ldrb	r2, [r2, #0]
 8014f18:	b2d2      	uxtb	r2, r2
 8014f1a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8014f1c:	68fb      	ldr	r3, [r7, #12]
 8014f1e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014f20:	1c5a      	adds	r2, r3, #1
 8014f22:	68fb      	ldr	r3, [r7, #12]
 8014f24:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8014f26:	68fb      	ldr	r3, [r7, #12]
 8014f28:	681b      	ldr	r3, [r3, #0]
 8014f2a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8014f2e:	68fb      	ldr	r3, [r7, #12]
 8014f30:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014f32:	7812      	ldrb	r2, [r2, #0]
 8014f34:	b2d2      	uxtb	r2, r2
 8014f36:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8014f38:	68fb      	ldr	r3, [r7, #12]
 8014f3a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014f3c:	1c5a      	adds	r2, r3, #1
 8014f3e:	68fb      	ldr	r3, [r7, #12]
 8014f40:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8014f42:	68fb      	ldr	r3, [r7, #12]
 8014f44:	681b      	ldr	r3, [r3, #0]
 8014f46:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8014f4a:	68fb      	ldr	r3, [r7, #12]
 8014f4c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014f4e:	7812      	ldrb	r2, [r2, #0]
 8014f50:	b2d2      	uxtb	r2, r2
 8014f52:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8014f54:	68fb      	ldr	r3, [r7, #12]
 8014f56:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014f58:	1c5a      	adds	r2, r3, #1
 8014f5a:	68fb      	ldr	r3, [r7, #12]
 8014f5c:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 8014f5e:	68fb      	ldr	r3, [r7, #12]
 8014f60:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014f64:	b29b      	uxth	r3, r3
 8014f66:	3b04      	subs	r3, #4
 8014f68:	b29a      	uxth	r2, r3
 8014f6a:	68fb      	ldr	r3, [r7, #12]
 8014f6c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8014f70:	e046      	b.n	8015000 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 8014f72:	68fb      	ldr	r3, [r7, #12]
 8014f74:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014f78:	b29b      	uxth	r3, r3
 8014f7a:	2b03      	cmp	r3, #3
 8014f7c:	d81c      	bhi.n	8014fb8 <HAL_SPI_Receive+0x460>
 8014f7e:	693b      	ldr	r3, [r7, #16]
 8014f80:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 8014f84:	2b00      	cmp	r3, #0
 8014f86:	d017      	beq.n	8014fb8 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8014f88:	68fb      	ldr	r3, [r7, #12]
 8014f8a:	681b      	ldr	r3, [r3, #0]
 8014f8c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8014f90:	68fb      	ldr	r3, [r7, #12]
 8014f92:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014f94:	7812      	ldrb	r2, [r2, #0]
 8014f96:	b2d2      	uxtb	r2, r2
 8014f98:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8014f9a:	68fb      	ldr	r3, [r7, #12]
 8014f9c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014f9e:	1c5a      	adds	r2, r3, #1
 8014fa0:	68fb      	ldr	r3, [r7, #12]
 8014fa2:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8014fa4:	68fb      	ldr	r3, [r7, #12]
 8014fa6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014faa:	b29b      	uxth	r3, r3
 8014fac:	3b01      	subs	r3, #1
 8014fae:	b29a      	uxth	r2, r3
 8014fb0:	68fb      	ldr	r3, [r7, #12]
 8014fb2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8014fb6:	e023      	b.n	8015000 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8014fb8:	f7f4 f93c 	bl	8009234 <HAL_GetTick>
 8014fbc:	4602      	mov	r2, r0
 8014fbe:	697b      	ldr	r3, [r7, #20]
 8014fc0:	1ad3      	subs	r3, r2, r3
 8014fc2:	683a      	ldr	r2, [r7, #0]
 8014fc4:	429a      	cmp	r2, r3
 8014fc6:	d803      	bhi.n	8014fd0 <HAL_SPI_Receive+0x478>
 8014fc8:	683b      	ldr	r3, [r7, #0]
 8014fca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014fce:	d102      	bne.n	8014fd6 <HAL_SPI_Receive+0x47e>
 8014fd0:	683b      	ldr	r3, [r7, #0]
 8014fd2:	2b00      	cmp	r3, #0
 8014fd4:	d114      	bne.n	8015000 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8014fd6:	68f8      	ldr	r0, [r7, #12]
 8014fd8:	f000 ff24 	bl	8015e24 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8014fdc:	68fb      	ldr	r3, [r7, #12]
 8014fde:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8014fe2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8014fe6:	68fb      	ldr	r3, [r7, #12]
 8014fe8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8014fec:	68fb      	ldr	r3, [r7, #12]
 8014fee:	2201      	movs	r2, #1
 8014ff0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8014ff4:	68fb      	ldr	r3, [r7, #12]
 8014ff6:	2200      	movs	r2, #0
 8014ff8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8014ffc:	2303      	movs	r3, #3
 8014ffe:	e019      	b.n	8015034 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8015000:	68fb      	ldr	r3, [r7, #12]
 8015002:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8015006:	b29b      	uxth	r3, r3
 8015008:	2b00      	cmp	r3, #0
 801500a:	f47f af41 	bne.w	8014e90 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 801500e:	68f8      	ldr	r0, [r7, #12]
 8015010:	f000 ff08 	bl	8015e24 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8015014:	68fb      	ldr	r3, [r7, #12]
 8015016:	2201      	movs	r2, #1
 8015018:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 801501c:	68fb      	ldr	r3, [r7, #12]
 801501e:	2200      	movs	r2, #0
 8015020:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8015024:	68fb      	ldr	r3, [r7, #12]
 8015026:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801502a:	2b00      	cmp	r3, #0
 801502c:	d001      	beq.n	8015032 <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 801502e:	2301      	movs	r3, #1
 8015030:	e000      	b.n	8015034 <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 8015032:	2300      	movs	r3, #0
  }
}
 8015034:	4618      	mov	r0, r3
 8015036:	3720      	adds	r7, #32
 8015038:	46bd      	mov	sp, r7
 801503a:	bd80      	pop	{r7, pc}

0801503c <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 801503c:	b580      	push	{r7, lr}
 801503e:	b08e      	sub	sp, #56	@ 0x38
 8015040:	af02      	add	r7, sp, #8
 8015042:	60f8      	str	r0, [r7, #12]
 8015044:	60b9      	str	r1, [r7, #8]
 8015046:	607a      	str	r2, [r7, #4]
 8015048:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 801504a:	68fb      	ldr	r3, [r7, #12]
 801504c:	681b      	ldr	r3, [r3, #0]
 801504e:	3320      	adds	r3, #32
 8015050:	627b      	str	r3, [r7, #36]	@ 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8015052:	68fb      	ldr	r3, [r7, #12]
 8015054:	681b      	ldr	r3, [r3, #0]
 8015056:	3330      	adds	r3, #48	@ 0x30
 8015058:	623b      	str	r3, [r7, #32]
  uint32_t   fifo_length;
  uint32_t   temp_sr_reg;
  uint16_t   initial_TxXferCount;
  uint16_t   initial_RxXferCount;
  uint16_t   init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 801505a:	68fb      	ldr	r3, [r7, #12]
 801505c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801505e:	095b      	lsrs	r3, r3, #5
 8015060:	b29b      	uxth	r3, r3
 8015062:	3301      	adds	r3, #1
 8015064:	83fb      	strh	r3, [r7, #30]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8015066:	f7f4 f8e5 	bl	8009234 <HAL_GetTick>
 801506a:	61b8      	str	r0, [r7, #24]

  initial_TxXferCount = Size;
 801506c:	887b      	ldrh	r3, [r7, #2]
 801506e:	857b      	strh	r3, [r7, #42]	@ 0x2a
  initial_RxXferCount = Size;
 8015070:	887b      	ldrh	r3, [r7, #2]
 8015072:	853b      	strh	r3, [r7, #40]	@ 0x28

  if (hspi->State != HAL_SPI_STATE_READY)
 8015074:	68fb      	ldr	r3, [r7, #12]
 8015076:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 801507a:	b2db      	uxtb	r3, r3
 801507c:	2b01      	cmp	r3, #1
 801507e:	d001      	beq.n	8015084 <HAL_SPI_TransmitReceive+0x48>
  {
    return HAL_BUSY;
 8015080:	2302      	movs	r3, #2
 8015082:	e310      	b.n	80156a6 <HAL_SPI_TransmitReceive+0x66a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8015084:	68bb      	ldr	r3, [r7, #8]
 8015086:	2b00      	cmp	r3, #0
 8015088:	d005      	beq.n	8015096 <HAL_SPI_TransmitReceive+0x5a>
 801508a:	687b      	ldr	r3, [r7, #4]
 801508c:	2b00      	cmp	r3, #0
 801508e:	d002      	beq.n	8015096 <HAL_SPI_TransmitReceive+0x5a>
 8015090:	887b      	ldrh	r3, [r7, #2]
 8015092:	2b00      	cmp	r3, #0
 8015094:	d101      	bne.n	801509a <HAL_SPI_TransmitReceive+0x5e>
  {
    return HAL_ERROR;
 8015096:	2301      	movs	r3, #1
 8015098:	e305      	b.n	80156a6 <HAL_SPI_TransmitReceive+0x66a>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 801509a:	68fb      	ldr	r3, [r7, #12]
 801509c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80150a0:	2b01      	cmp	r3, #1
 80150a2:	d101      	bne.n	80150a8 <HAL_SPI_TransmitReceive+0x6c>
 80150a4:	2302      	movs	r3, #2
 80150a6:	e2fe      	b.n	80156a6 <HAL_SPI_TransmitReceive+0x66a>
 80150a8:	68fb      	ldr	r3, [r7, #12]
 80150aa:	2201      	movs	r2, #1
 80150ac:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 80150b0:	68fb      	ldr	r3, [r7, #12]
 80150b2:	2205      	movs	r2, #5
 80150b4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80150b8:	68fb      	ldr	r3, [r7, #12]
 80150ba:	2200      	movs	r2, #0
 80150bc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80150c0:	68fb      	ldr	r3, [r7, #12]
 80150c2:	687a      	ldr	r2, [r7, #4]
 80150c4:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount = Size;
 80150c6:	68fb      	ldr	r3, [r7, #12]
 80150c8:	887a      	ldrh	r2, [r7, #2]
 80150ca:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferSize  = Size;
 80150ce:	68fb      	ldr	r3, [r7, #12]
 80150d0:	887a      	ldrh	r2, [r7, #2]
 80150d2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80150d6:	68fb      	ldr	r3, [r7, #12]
 80150d8:	68ba      	ldr	r2, [r7, #8]
 80150da:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount = Size;
 80150dc:	68fb      	ldr	r3, [r7, #12]
 80150de:	887a      	ldrh	r2, [r7, #2]
 80150e0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->TxXferSize  = Size;
 80150e4:	68fb      	ldr	r3, [r7, #12]
 80150e6:	887a      	ldrh	r2, [r7, #2]
 80150e8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80150ec:	68fb      	ldr	r3, [r7, #12]
 80150ee:	2200      	movs	r2, #0
 80150f0:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 80150f2:	68fb      	ldr	r3, [r7, #12]
 80150f4:	2200      	movs	r2, #0
 80150f6:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 80150f8:	68fb      	ldr	r3, [r7, #12]
 80150fa:	681b      	ldr	r3, [r3, #0]
 80150fc:	68da      	ldr	r2, [r3, #12]
 80150fe:	68fb      	ldr	r3, [r7, #12]
 8015100:	681b      	ldr	r3, [r3, #0]
 8015102:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 8015106:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_HIGHEND_INSTANCE(hspi->Instance))
 8015108:	68fb      	ldr	r3, [r7, #12]
 801510a:	681b      	ldr	r3, [r3, #0]
 801510c:	4a70      	ldr	r2, [pc, #448]	@ (80152d0 <HAL_SPI_TransmitReceive+0x294>)
 801510e:	4293      	cmp	r3, r2
 8015110:	d009      	beq.n	8015126 <HAL_SPI_TransmitReceive+0xea>
 8015112:	68fb      	ldr	r3, [r7, #12]
 8015114:	681b      	ldr	r3, [r3, #0]
 8015116:	4a6f      	ldr	r2, [pc, #444]	@ (80152d4 <HAL_SPI_TransmitReceive+0x298>)
 8015118:	4293      	cmp	r3, r2
 801511a:	d004      	beq.n	8015126 <HAL_SPI_TransmitReceive+0xea>
 801511c:	68fb      	ldr	r3, [r7, #12]
 801511e:	681b      	ldr	r3, [r3, #0]
 8015120:	4a6d      	ldr	r2, [pc, #436]	@ (80152d8 <HAL_SPI_TransmitReceive+0x29c>)
 8015122:	4293      	cmp	r3, r2
 8015124:	d102      	bne.n	801512c <HAL_SPI_TransmitReceive+0xf0>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 8015126:	2310      	movs	r3, #16
 8015128:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801512a:	e001      	b.n	8015130 <HAL_SPI_TransmitReceive+0xf4>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 801512c:	2308      	movs	r3, #8
 801512e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8015130:	68fb      	ldr	r3, [r7, #12]
 8015132:	681b      	ldr	r3, [r3, #0]
 8015134:	685a      	ldr	r2, [r3, #4]
 8015136:	4b69      	ldr	r3, [pc, #420]	@ (80152dc <HAL_SPI_TransmitReceive+0x2a0>)
 8015138:	4013      	ands	r3, r2
 801513a:	8879      	ldrh	r1, [r7, #2]
 801513c:	68fa      	ldr	r2, [r7, #12]
 801513e:	6812      	ldr	r2, [r2, #0]
 8015140:	430b      	orrs	r3, r1
 8015142:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8015144:	68fb      	ldr	r3, [r7, #12]
 8015146:	681b      	ldr	r3, [r3, #0]
 8015148:	681a      	ldr	r2, [r3, #0]
 801514a:	68fb      	ldr	r3, [r7, #12]
 801514c:	681b      	ldr	r3, [r3, #0]
 801514e:	f042 0201 	orr.w	r2, r2, #1
 8015152:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8015154:	68fb      	ldr	r3, [r7, #12]
 8015156:	685b      	ldr	r3, [r3, #4]
 8015158:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 801515c:	d107      	bne.n	801516e <HAL_SPI_TransmitReceive+0x132>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 801515e:	68fb      	ldr	r3, [r7, #12]
 8015160:	681b      	ldr	r3, [r3, #0]
 8015162:	681a      	ldr	r2, [r3, #0]
 8015164:	68fb      	ldr	r3, [r7, #12]
 8015166:	681b      	ldr	r3, [r3, #0]
 8015168:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 801516c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 801516e:	68fb      	ldr	r3, [r7, #12]
 8015170:	68db      	ldr	r3, [r3, #12]
 8015172:	2b0f      	cmp	r3, #15
 8015174:	f240 80a2 	bls.w	80152bc <HAL_SPI_TransmitReceive+0x280>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 8015178:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801517a:	089b      	lsrs	r3, r3, #2
 801517c:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 801517e:	e094      	b.n	80152aa <HAL_SPI_TransmitReceive+0x26e>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8015180:	68fb      	ldr	r3, [r7, #12]
 8015182:	681b      	ldr	r3, [r3, #0]
 8015184:	695b      	ldr	r3, [r3, #20]
 8015186:	f003 0302 	and.w	r3, r3, #2
 801518a:	2b02      	cmp	r3, #2
 801518c:	d120      	bne.n	80151d0 <HAL_SPI_TransmitReceive+0x194>
 801518e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8015190:	2b00      	cmp	r3, #0
 8015192:	d01d      	beq.n	80151d0 <HAL_SPI_TransmitReceive+0x194>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8015194:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8015196:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8015198:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801519a:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 801519c:	429a      	cmp	r2, r3
 801519e:	d217      	bcs.n	80151d0 <HAL_SPI_TransmitReceive+0x194>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80151a0:	68fb      	ldr	r3, [r7, #12]
 80151a2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80151a4:	68fb      	ldr	r3, [r7, #12]
 80151a6:	681b      	ldr	r3, [r3, #0]
 80151a8:	6812      	ldr	r2, [r2, #0]
 80151aa:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80151ac:	68fb      	ldr	r3, [r7, #12]
 80151ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80151b0:	1d1a      	adds	r2, r3, #4
 80151b2:	68fb      	ldr	r3, [r7, #12]
 80151b4:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount --;
 80151b6:	68fb      	ldr	r3, [r7, #12]
 80151b8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80151bc:	b29b      	uxth	r3, r3
 80151be:	3b01      	subs	r3, #1
 80151c0:	b29a      	uxth	r2, r3
 80151c2:	68fb      	ldr	r3, [r7, #12]
 80151c4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 80151c8:	68fb      	ldr	r3, [r7, #12]
 80151ca:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80151ce:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 80151d0:	68fb      	ldr	r3, [r7, #12]
 80151d2:	681b      	ldr	r3, [r3, #0]
 80151d4:	695b      	ldr	r3, [r3, #20]
 80151d6:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 80151d8:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80151da:	2b00      	cmp	r3, #0
 80151dc:	d065      	beq.n	80152aa <HAL_SPI_TransmitReceive+0x26e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80151de:	68fb      	ldr	r3, [r7, #12]
 80151e0:	681b      	ldr	r3, [r3, #0]
 80151e2:	695b      	ldr	r3, [r3, #20]
 80151e4:	f003 0301 	and.w	r3, r3, #1
 80151e8:	2b01      	cmp	r3, #1
 80151ea:	d118      	bne.n	801521e <HAL_SPI_TransmitReceive+0x1e2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80151ec:	68fb      	ldr	r3, [r7, #12]
 80151ee:	681a      	ldr	r2, [r3, #0]
 80151f0:	68fb      	ldr	r3, [r7, #12]
 80151f2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80151f4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80151f6:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 80151f8:	68fb      	ldr	r3, [r7, #12]
 80151fa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80151fc:	1d1a      	adds	r2, r3, #4
 80151fe:	68fb      	ldr	r3, [r7, #12]
 8015200:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8015202:	68fb      	ldr	r3, [r7, #12]
 8015204:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8015208:	b29b      	uxth	r3, r3
 801520a:	3b01      	subs	r3, #1
 801520c:	b29a      	uxth	r2, r3
 801520e:	68fb      	ldr	r3, [r7, #12]
 8015210:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8015214:	68fb      	ldr	r3, [r7, #12]
 8015216:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801521a:	853b      	strh	r3, [r7, #40]	@ 0x28
 801521c:	e045      	b.n	80152aa <HAL_SPI_TransmitReceive+0x26e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 801521e:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8015220:	8bfb      	ldrh	r3, [r7, #30]
 8015222:	429a      	cmp	r2, r3
 8015224:	d21d      	bcs.n	8015262 <HAL_SPI_TransmitReceive+0x226>
 8015226:	697b      	ldr	r3, [r7, #20]
 8015228:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 801522c:	2b00      	cmp	r3, #0
 801522e:	d018      	beq.n	8015262 <HAL_SPI_TransmitReceive+0x226>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8015230:	68fb      	ldr	r3, [r7, #12]
 8015232:	681a      	ldr	r2, [r3, #0]
 8015234:	68fb      	ldr	r3, [r7, #12]
 8015236:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015238:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 801523a:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 801523c:	68fb      	ldr	r3, [r7, #12]
 801523e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015240:	1d1a      	adds	r2, r3, #4
 8015242:	68fb      	ldr	r3, [r7, #12]
 8015244:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8015246:	68fb      	ldr	r3, [r7, #12]
 8015248:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801524c:	b29b      	uxth	r3, r3
 801524e:	3b01      	subs	r3, #1
 8015250:	b29a      	uxth	r2, r3
 8015252:	68fb      	ldr	r3, [r7, #12]
 8015254:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8015258:	68fb      	ldr	r3, [r7, #12]
 801525a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801525e:	853b      	strh	r3, [r7, #40]	@ 0x28
 8015260:	e023      	b.n	80152aa <HAL_SPI_TransmitReceive+0x26e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8015262:	f7f3 ffe7 	bl	8009234 <HAL_GetTick>
 8015266:	4602      	mov	r2, r0
 8015268:	69bb      	ldr	r3, [r7, #24]
 801526a:	1ad3      	subs	r3, r2, r3
 801526c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801526e:	429a      	cmp	r2, r3
 8015270:	d803      	bhi.n	801527a <HAL_SPI_TransmitReceive+0x23e>
 8015272:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015274:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015278:	d102      	bne.n	8015280 <HAL_SPI_TransmitReceive+0x244>
 801527a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801527c:	2b00      	cmp	r3, #0
 801527e:	d114      	bne.n	80152aa <HAL_SPI_TransmitReceive+0x26e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8015280:	68f8      	ldr	r0, [r7, #12]
 8015282:	f000 fdcf 	bl	8015e24 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8015286:	68fb      	ldr	r3, [r7, #12]
 8015288:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801528c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8015290:	68fb      	ldr	r3, [r7, #12]
 8015292:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 8015296:	68fb      	ldr	r3, [r7, #12]
 8015298:	2201      	movs	r2, #1
 801529a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 801529e:	68fb      	ldr	r3, [r7, #12]
 80152a0:	2200      	movs	r2, #0
 80152a2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 80152a6:	2303      	movs	r3, #3
 80152a8:	e1fd      	b.n	80156a6 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80152aa:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80152ac:	2b00      	cmp	r3, #0
 80152ae:	f47f af67 	bne.w	8015180 <HAL_SPI_TransmitReceive+0x144>
 80152b2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80152b4:	2b00      	cmp	r3, #0
 80152b6:	f47f af63 	bne.w	8015180 <HAL_SPI_TransmitReceive+0x144>
 80152ba:	e1ce      	b.n	801565a <HAL_SPI_TransmitReceive+0x61e>
        }
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80152bc:	68fb      	ldr	r3, [r7, #12]
 80152be:	68db      	ldr	r3, [r3, #12]
 80152c0:	2b07      	cmp	r3, #7
 80152c2:	f240 81c2 	bls.w	801564a <HAL_SPI_TransmitReceive+0x60e>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 80152c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80152c8:	085b      	lsrs	r3, r3, #1
 80152ca:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80152cc:	e0c9      	b.n	8015462 <HAL_SPI_TransmitReceive+0x426>
 80152ce:	bf00      	nop
 80152d0:	40013000 	.word	0x40013000
 80152d4:	40003800 	.word	0x40003800
 80152d8:	40003c00 	.word	0x40003c00
 80152dc:	ffff0000 	.word	0xffff0000
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 80152e0:	68fb      	ldr	r3, [r7, #12]
 80152e2:	681b      	ldr	r3, [r3, #0]
 80152e4:	695b      	ldr	r3, [r3, #20]
 80152e6:	f003 0302 	and.w	r3, r3, #2
 80152ea:	2b02      	cmp	r3, #2
 80152ec:	d11f      	bne.n	801532e <HAL_SPI_TransmitReceive+0x2f2>
 80152ee:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80152f0:	2b00      	cmp	r3, #0
 80152f2:	d01c      	beq.n	801532e <HAL_SPI_TransmitReceive+0x2f2>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 80152f4:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80152f6:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 80152f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80152fa:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 80152fc:	429a      	cmp	r2, r3
 80152fe:	d216      	bcs.n	801532e <HAL_SPI_TransmitReceive+0x2f2>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8015300:	68fb      	ldr	r3, [r7, #12]
 8015302:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8015304:	881a      	ldrh	r2, [r3, #0]
 8015306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015308:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801530a:	68fb      	ldr	r3, [r7, #12]
 801530c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801530e:	1c9a      	adds	r2, r3, #2
 8015310:	68fb      	ldr	r3, [r7, #12]
 8015312:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8015314:	68fb      	ldr	r3, [r7, #12]
 8015316:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801531a:	b29b      	uxth	r3, r3
 801531c:	3b01      	subs	r3, #1
 801531e:	b29a      	uxth	r2, r3
 8015320:	68fb      	ldr	r3, [r7, #12]
 8015322:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8015326:	68fb      	ldr	r3, [r7, #12]
 8015328:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801532c:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 801532e:	68fb      	ldr	r3, [r7, #12]
 8015330:	681b      	ldr	r3, [r3, #0]
 8015332:	695b      	ldr	r3, [r3, #20]
 8015334:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8015336:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8015338:	2b00      	cmp	r3, #0
 801533a:	f000 8092 	beq.w	8015462 <HAL_SPI_TransmitReceive+0x426>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 801533e:	68fb      	ldr	r3, [r7, #12]
 8015340:	681b      	ldr	r3, [r3, #0]
 8015342:	695b      	ldr	r3, [r3, #20]
 8015344:	f003 0301 	and.w	r3, r3, #1
 8015348:	2b01      	cmp	r3, #1
 801534a:	d118      	bne.n	801537e <HAL_SPI_TransmitReceive+0x342>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 801534c:	68fb      	ldr	r3, [r7, #12]
 801534e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015350:	6a3a      	ldr	r2, [r7, #32]
 8015352:	8812      	ldrh	r2, [r2, #0]
 8015354:	b292      	uxth	r2, r2
 8015356:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8015358:	68fb      	ldr	r3, [r7, #12]
 801535a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801535c:	1c9a      	adds	r2, r3, #2
 801535e:	68fb      	ldr	r3, [r7, #12]
 8015360:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8015362:	68fb      	ldr	r3, [r7, #12]
 8015364:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8015368:	b29b      	uxth	r3, r3
 801536a:	3b01      	subs	r3, #1
 801536c:	b29a      	uxth	r2, r3
 801536e:	68fb      	ldr	r3, [r7, #12]
 8015370:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8015374:	68fb      	ldr	r3, [r7, #12]
 8015376:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801537a:	853b      	strh	r3, [r7, #40]	@ 0x28
 801537c:	e071      	b.n	8015462 <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 801537e:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8015380:	8bfb      	ldrh	r3, [r7, #30]
 8015382:	429a      	cmp	r2, r3
 8015384:	d228      	bcs.n	80153d8 <HAL_SPI_TransmitReceive+0x39c>
 8015386:	697b      	ldr	r3, [r7, #20]
 8015388:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 801538c:	2b00      	cmp	r3, #0
 801538e:	d023      	beq.n	80153d8 <HAL_SPI_TransmitReceive+0x39c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8015390:	68fb      	ldr	r3, [r7, #12]
 8015392:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015394:	6a3a      	ldr	r2, [r7, #32]
 8015396:	8812      	ldrh	r2, [r2, #0]
 8015398:	b292      	uxth	r2, r2
 801539a:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 801539c:	68fb      	ldr	r3, [r7, #12]
 801539e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80153a0:	1c9a      	adds	r2, r3, #2
 80153a2:	68fb      	ldr	r3, [r7, #12]
 80153a4:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80153a6:	68fb      	ldr	r3, [r7, #12]
 80153a8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80153aa:	6a3a      	ldr	r2, [r7, #32]
 80153ac:	8812      	ldrh	r2, [r2, #0]
 80153ae:	b292      	uxth	r2, r2
 80153b0:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80153b2:	68fb      	ldr	r3, [r7, #12]
 80153b4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80153b6:	1c9a      	adds	r2, r3, #2
 80153b8:	68fb      	ldr	r3, [r7, #12]
 80153ba:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 80153bc:	68fb      	ldr	r3, [r7, #12]
 80153be:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80153c2:	b29b      	uxth	r3, r3
 80153c4:	3b02      	subs	r3, #2
 80153c6:	b29a      	uxth	r2, r3
 80153c8:	68fb      	ldr	r3, [r7, #12]
 80153ca:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80153ce:	68fb      	ldr	r3, [r7, #12]
 80153d0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80153d4:	853b      	strh	r3, [r7, #40]	@ 0x28
 80153d6:	e044      	b.n	8015462 <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 80153d8:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80153da:	2b01      	cmp	r3, #1
 80153dc:	d11d      	bne.n	801541a <HAL_SPI_TransmitReceive+0x3de>
 80153de:	697b      	ldr	r3, [r7, #20]
 80153e0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80153e4:	2b00      	cmp	r3, #0
 80153e6:	d018      	beq.n	801541a <HAL_SPI_TransmitReceive+0x3de>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80153e8:	68fb      	ldr	r3, [r7, #12]
 80153ea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80153ec:	6a3a      	ldr	r2, [r7, #32]
 80153ee:	8812      	ldrh	r2, [r2, #0]
 80153f0:	b292      	uxth	r2, r2
 80153f2:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80153f4:	68fb      	ldr	r3, [r7, #12]
 80153f6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80153f8:	1c9a      	adds	r2, r3, #2
 80153fa:	68fb      	ldr	r3, [r7, #12]
 80153fc:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 80153fe:	68fb      	ldr	r3, [r7, #12]
 8015400:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8015404:	b29b      	uxth	r3, r3
 8015406:	3b01      	subs	r3, #1
 8015408:	b29a      	uxth	r2, r3
 801540a:	68fb      	ldr	r3, [r7, #12]
 801540c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8015410:	68fb      	ldr	r3, [r7, #12]
 8015412:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8015416:	853b      	strh	r3, [r7, #40]	@ 0x28
 8015418:	e023      	b.n	8015462 <HAL_SPI_TransmitReceive+0x426>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801541a:	f7f3 ff0b 	bl	8009234 <HAL_GetTick>
 801541e:	4602      	mov	r2, r0
 8015420:	69bb      	ldr	r3, [r7, #24]
 8015422:	1ad3      	subs	r3, r2, r3
 8015424:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8015426:	429a      	cmp	r2, r3
 8015428:	d803      	bhi.n	8015432 <HAL_SPI_TransmitReceive+0x3f6>
 801542a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801542c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015430:	d102      	bne.n	8015438 <HAL_SPI_TransmitReceive+0x3fc>
 8015432:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015434:	2b00      	cmp	r3, #0
 8015436:	d114      	bne.n	8015462 <HAL_SPI_TransmitReceive+0x426>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8015438:	68f8      	ldr	r0, [r7, #12]
 801543a:	f000 fcf3 	bl	8015e24 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 801543e:	68fb      	ldr	r3, [r7, #12]
 8015440:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015444:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8015448:	68fb      	ldr	r3, [r7, #12]
 801544a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 801544e:	68fb      	ldr	r3, [r7, #12]
 8015450:	2201      	movs	r2, #1
 8015452:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 8015456:	68fb      	ldr	r3, [r7, #12]
 8015458:	2200      	movs	r2, #0
 801545a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 801545e:	2303      	movs	r3, #3
 8015460:	e121      	b.n	80156a6 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8015462:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8015464:	2b00      	cmp	r3, #0
 8015466:	f47f af3b 	bne.w	80152e0 <HAL_SPI_TransmitReceive+0x2a4>
 801546a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 801546c:	2b00      	cmp	r3, #0
 801546e:	f47f af37 	bne.w	80152e0 <HAL_SPI_TransmitReceive+0x2a4>
 8015472:	e0f2      	b.n	801565a <HAL_SPI_TransmitReceive+0x61e>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8015474:	68fb      	ldr	r3, [r7, #12]
 8015476:	681b      	ldr	r3, [r3, #0]
 8015478:	695b      	ldr	r3, [r3, #20]
 801547a:	f003 0302 	and.w	r3, r3, #2
 801547e:	2b02      	cmp	r3, #2
 8015480:	d121      	bne.n	80154c6 <HAL_SPI_TransmitReceive+0x48a>
 8015482:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8015484:	2b00      	cmp	r3, #0
 8015486:	d01e      	beq.n	80154c6 <HAL_SPI_TransmitReceive+0x48a>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8015488:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 801548a:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 801548c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801548e:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8015490:	429a      	cmp	r2, r3
 8015492:	d218      	bcs.n	80154c6 <HAL_SPI_TransmitReceive+0x48a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8015494:	68fb      	ldr	r3, [r7, #12]
 8015496:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8015498:	68fb      	ldr	r3, [r7, #12]
 801549a:	681b      	ldr	r3, [r3, #0]
 801549c:	3320      	adds	r3, #32
 801549e:	7812      	ldrb	r2, [r2, #0]
 80154a0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80154a2:	68fb      	ldr	r3, [r7, #12]
 80154a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80154a6:	1c5a      	adds	r2, r3, #1
 80154a8:	68fb      	ldr	r3, [r7, #12]
 80154aa:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 80154ac:	68fb      	ldr	r3, [r7, #12]
 80154ae:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80154b2:	b29b      	uxth	r3, r3
 80154b4:	3b01      	subs	r3, #1
 80154b6:	b29a      	uxth	r2, r3
 80154b8:	68fb      	ldr	r3, [r7, #12]
 80154ba:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 80154be:	68fb      	ldr	r3, [r7, #12]
 80154c0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80154c4:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 80154c6:	68fb      	ldr	r3, [r7, #12]
 80154c8:	681b      	ldr	r3, [r3, #0]
 80154ca:	695b      	ldr	r3, [r3, #20]
 80154cc:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 80154ce:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80154d0:	2b00      	cmp	r3, #0
 80154d2:	f000 80ba 	beq.w	801564a <HAL_SPI_TransmitReceive+0x60e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80154d6:	68fb      	ldr	r3, [r7, #12]
 80154d8:	681b      	ldr	r3, [r3, #0]
 80154da:	695b      	ldr	r3, [r3, #20]
 80154dc:	f003 0301 	and.w	r3, r3, #1
 80154e0:	2b01      	cmp	r3, #1
 80154e2:	d11b      	bne.n	801551c <HAL_SPI_TransmitReceive+0x4e0>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80154e4:	68fb      	ldr	r3, [r7, #12]
 80154e6:	681b      	ldr	r3, [r3, #0]
 80154e8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80154ec:	68fb      	ldr	r3, [r7, #12]
 80154ee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80154f0:	7812      	ldrb	r2, [r2, #0]
 80154f2:	b2d2      	uxtb	r2, r2
 80154f4:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80154f6:	68fb      	ldr	r3, [r7, #12]
 80154f8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80154fa:	1c5a      	adds	r2, r3, #1
 80154fc:	68fb      	ldr	r3, [r7, #12]
 80154fe:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8015500:	68fb      	ldr	r3, [r7, #12]
 8015502:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8015506:	b29b      	uxth	r3, r3
 8015508:	3b01      	subs	r3, #1
 801550a:	b29a      	uxth	r2, r3
 801550c:	68fb      	ldr	r3, [r7, #12]
 801550e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8015512:	68fb      	ldr	r3, [r7, #12]
 8015514:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8015518:	853b      	strh	r3, [r7, #40]	@ 0x28
 801551a:	e096      	b.n	801564a <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 801551c:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 801551e:	8bfb      	ldrh	r3, [r7, #30]
 8015520:	429a      	cmp	r2, r3
 8015522:	d24a      	bcs.n	80155ba <HAL_SPI_TransmitReceive+0x57e>
 8015524:	697b      	ldr	r3, [r7, #20]
 8015526:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 801552a:	2b00      	cmp	r3, #0
 801552c:	d045      	beq.n	80155ba <HAL_SPI_TransmitReceive+0x57e>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 801552e:	68fb      	ldr	r3, [r7, #12]
 8015530:	681b      	ldr	r3, [r3, #0]
 8015532:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8015536:	68fb      	ldr	r3, [r7, #12]
 8015538:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801553a:	7812      	ldrb	r2, [r2, #0]
 801553c:	b2d2      	uxtb	r2, r2
 801553e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8015540:	68fb      	ldr	r3, [r7, #12]
 8015542:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015544:	1c5a      	adds	r2, r3, #1
 8015546:	68fb      	ldr	r3, [r7, #12]
 8015548:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 801554a:	68fb      	ldr	r3, [r7, #12]
 801554c:	681b      	ldr	r3, [r3, #0]
 801554e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8015552:	68fb      	ldr	r3, [r7, #12]
 8015554:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015556:	7812      	ldrb	r2, [r2, #0]
 8015558:	b2d2      	uxtb	r2, r2
 801555a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 801555c:	68fb      	ldr	r3, [r7, #12]
 801555e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015560:	1c5a      	adds	r2, r3, #1
 8015562:	68fb      	ldr	r3, [r7, #12]
 8015564:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8015566:	68fb      	ldr	r3, [r7, #12]
 8015568:	681b      	ldr	r3, [r3, #0]
 801556a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801556e:	68fb      	ldr	r3, [r7, #12]
 8015570:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015572:	7812      	ldrb	r2, [r2, #0]
 8015574:	b2d2      	uxtb	r2, r2
 8015576:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8015578:	68fb      	ldr	r3, [r7, #12]
 801557a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801557c:	1c5a      	adds	r2, r3, #1
 801557e:	68fb      	ldr	r3, [r7, #12]
 8015580:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8015582:	68fb      	ldr	r3, [r7, #12]
 8015584:	681b      	ldr	r3, [r3, #0]
 8015586:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801558a:	68fb      	ldr	r3, [r7, #12]
 801558c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801558e:	7812      	ldrb	r2, [r2, #0]
 8015590:	b2d2      	uxtb	r2, r2
 8015592:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8015594:	68fb      	ldr	r3, [r7, #12]
 8015596:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015598:	1c5a      	adds	r2, r3, #1
 801559a:	68fb      	ldr	r3, [r7, #12]
 801559c:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 801559e:	68fb      	ldr	r3, [r7, #12]
 80155a0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80155a4:	b29b      	uxth	r3, r3
 80155a6:	3b04      	subs	r3, #4
 80155a8:	b29a      	uxth	r2, r3
 80155aa:	68fb      	ldr	r3, [r7, #12]
 80155ac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80155b0:	68fb      	ldr	r3, [r7, #12]
 80155b2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80155b6:	853b      	strh	r3, [r7, #40]	@ 0x28
 80155b8:	e047      	b.n	801564a <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 80155ba:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80155bc:	2b03      	cmp	r3, #3
 80155be:	d820      	bhi.n	8015602 <HAL_SPI_TransmitReceive+0x5c6>
 80155c0:	697b      	ldr	r3, [r7, #20]
 80155c2:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 80155c6:	2b00      	cmp	r3, #0
 80155c8:	d01b      	beq.n	8015602 <HAL_SPI_TransmitReceive+0x5c6>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80155ca:	68fb      	ldr	r3, [r7, #12]
 80155cc:	681b      	ldr	r3, [r3, #0]
 80155ce:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80155d2:	68fb      	ldr	r3, [r7, #12]
 80155d4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80155d6:	7812      	ldrb	r2, [r2, #0]
 80155d8:	b2d2      	uxtb	r2, r2
 80155da:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80155dc:	68fb      	ldr	r3, [r7, #12]
 80155de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80155e0:	1c5a      	adds	r2, r3, #1
 80155e2:	68fb      	ldr	r3, [r7, #12]
 80155e4:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 80155e6:	68fb      	ldr	r3, [r7, #12]
 80155e8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80155ec:	b29b      	uxth	r3, r3
 80155ee:	3b01      	subs	r3, #1
 80155f0:	b29a      	uxth	r2, r3
 80155f2:	68fb      	ldr	r3, [r7, #12]
 80155f4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80155f8:	68fb      	ldr	r3, [r7, #12]
 80155fa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80155fe:	853b      	strh	r3, [r7, #40]	@ 0x28
 8015600:	e023      	b.n	801564a <HAL_SPI_TransmitReceive+0x60e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8015602:	f7f3 fe17 	bl	8009234 <HAL_GetTick>
 8015606:	4602      	mov	r2, r0
 8015608:	69bb      	ldr	r3, [r7, #24]
 801560a:	1ad3      	subs	r3, r2, r3
 801560c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801560e:	429a      	cmp	r2, r3
 8015610:	d803      	bhi.n	801561a <HAL_SPI_TransmitReceive+0x5de>
 8015612:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015614:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015618:	d102      	bne.n	8015620 <HAL_SPI_TransmitReceive+0x5e4>
 801561a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801561c:	2b00      	cmp	r3, #0
 801561e:	d114      	bne.n	801564a <HAL_SPI_TransmitReceive+0x60e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8015620:	68f8      	ldr	r0, [r7, #12]
 8015622:	f000 fbff 	bl	8015e24 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8015626:	68fb      	ldr	r3, [r7, #12]
 8015628:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801562c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8015630:	68fb      	ldr	r3, [r7, #12]
 8015632:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 8015636:	68fb      	ldr	r3, [r7, #12]
 8015638:	2201      	movs	r2, #1
 801563a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 801563e:	68fb      	ldr	r3, [r7, #12]
 8015640:	2200      	movs	r2, #0
 8015642:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 8015646:	2303      	movs	r3, #3
 8015648:	e02d      	b.n	80156a6 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 801564a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801564c:	2b00      	cmp	r3, #0
 801564e:	f47f af11 	bne.w	8015474 <HAL_SPI_TransmitReceive+0x438>
 8015652:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8015654:	2b00      	cmp	r3, #0
 8015656:	f47f af0d 	bne.w	8015474 <HAL_SPI_TransmitReceive+0x438>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 801565a:	69bb      	ldr	r3, [r7, #24]
 801565c:	9300      	str	r3, [sp, #0]
 801565e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015660:	2200      	movs	r2, #0
 8015662:	2108      	movs	r1, #8
 8015664:	68f8      	ldr	r0, [r7, #12]
 8015666:	f000 fc7d 	bl	8015f64 <SPI_WaitOnFlagUntilTimeout>
 801566a:	4603      	mov	r3, r0
 801566c:	2b00      	cmp	r3, #0
 801566e:	d007      	beq.n	8015680 <HAL_SPI_TransmitReceive+0x644>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8015670:	68fb      	ldr	r3, [r7, #12]
 8015672:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015676:	f043 0220 	orr.w	r2, r3, #32
 801567a:	68fb      	ldr	r3, [r7, #12]
 801567c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8015680:	68f8      	ldr	r0, [r7, #12]
 8015682:	f000 fbcf 	bl	8015e24 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8015686:	68fb      	ldr	r3, [r7, #12]
 8015688:	2201      	movs	r2, #1
 801568a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 801568e:	68fb      	ldr	r3, [r7, #12]
 8015690:	2200      	movs	r2, #0
 8015692:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8015696:	68fb      	ldr	r3, [r7, #12]
 8015698:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801569c:	2b00      	cmp	r3, #0
 801569e:	d001      	beq.n	80156a4 <HAL_SPI_TransmitReceive+0x668>
  {
    return HAL_ERROR;
 80156a0:	2301      	movs	r3, #1
 80156a2:	e000      	b.n	80156a6 <HAL_SPI_TransmitReceive+0x66a>
  }
  else
  {
    return HAL_OK;
 80156a4:	2300      	movs	r3, #0
  }
}
 80156a6:	4618      	mov	r0, r3
 80156a8:	3730      	adds	r7, #48	@ 0x30
 80156aa:	46bd      	mov	sp, r7
 80156ac:	bd80      	pop	{r7, pc}
 80156ae:	bf00      	nop

080156b0 <HAL_SPI_Transmit_DMA>:
  * @param  pData: pointer to data buffer
  * @param  Size : amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 80156b0:	b580      	push	{r7, lr}
 80156b2:	b084      	sub	sp, #16
 80156b4:	af00      	add	r7, sp, #0
 80156b6:	60f8      	str	r0, [r7, #12]
 80156b8:	60b9      	str	r1, [r7, #8]
 80156ba:	4613      	mov	r3, r2
 80156bc:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 80156be:	68fb      	ldr	r3, [r7, #12]
 80156c0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80156c4:	b2db      	uxtb	r3, r3
 80156c6:	2b01      	cmp	r3, #1
 80156c8:	d001      	beq.n	80156ce <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 80156ca:	2302      	movs	r3, #2
 80156cc:	e126      	b.n	801591c <HAL_SPI_Transmit_DMA+0x26c>
  }

  if ((pData == NULL) || (Size == 0UL))
 80156ce:	68bb      	ldr	r3, [r7, #8]
 80156d0:	2b00      	cmp	r3, #0
 80156d2:	d002      	beq.n	80156da <HAL_SPI_Transmit_DMA+0x2a>
 80156d4:	88fb      	ldrh	r3, [r7, #6]
 80156d6:	2b00      	cmp	r3, #0
 80156d8:	d101      	bne.n	80156de <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 80156da:	2301      	movs	r3, #1
 80156dc:	e11e      	b.n	801591c <HAL_SPI_Transmit_DMA+0x26c>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80156de:	68fb      	ldr	r3, [r7, #12]
 80156e0:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80156e4:	2b01      	cmp	r3, #1
 80156e6:	d101      	bne.n	80156ec <HAL_SPI_Transmit_DMA+0x3c>
 80156e8:	2302      	movs	r3, #2
 80156ea:	e117      	b.n	801591c <HAL_SPI_Transmit_DMA+0x26c>
 80156ec:	68fb      	ldr	r3, [r7, #12]
 80156ee:	2201      	movs	r2, #1
 80156f0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80156f4:	68fb      	ldr	r3, [r7, #12]
 80156f6:	2203      	movs	r2, #3
 80156f8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80156fc:	68fb      	ldr	r3, [r7, #12]
 80156fe:	2200      	movs	r2, #0
 8015700:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8015704:	68fb      	ldr	r3, [r7, #12]
 8015706:	68ba      	ldr	r2, [r7, #8]
 8015708:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 801570a:	68fb      	ldr	r3, [r7, #12]
 801570c:	88fa      	ldrh	r2, [r7, #6]
 801570e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 8015712:	68fb      	ldr	r3, [r7, #12]
 8015714:	88fa      	ldrh	r2, [r7, #6]
 8015716:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 801571a:	68fb      	ldr	r3, [r7, #12]
 801571c:	2200      	movs	r2, #0
 801571e:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxISR       = NULL;
 8015720:	68fb      	ldr	r3, [r7, #12]
 8015722:	2200      	movs	r2, #0
 8015724:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 8015726:	68fb      	ldr	r3, [r7, #12]
 8015728:	2200      	movs	r2, #0
 801572a:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->RxXferSize  = (uint16_t)0UL;
 801572c:	68fb      	ldr	r3, [r7, #12]
 801572e:	2200      	movs	r2, #0
 8015730:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t)0UL;
 8015734:	68fb      	ldr	r3, [r7, #12]
 8015736:	2200      	movs	r2, #0
 8015738:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801573c:	68fb      	ldr	r3, [r7, #12]
 801573e:	689b      	ldr	r3, [r3, #8]
 8015740:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8015744:	d108      	bne.n	8015758 <HAL_SPI_Transmit_DMA+0xa8>
  {
    SPI_1LINE_TX(hspi);
 8015746:	68fb      	ldr	r3, [r7, #12]
 8015748:	681b      	ldr	r3, [r3, #0]
 801574a:	681a      	ldr	r2, [r3, #0]
 801574c:	68fb      	ldr	r3, [r7, #12]
 801574e:	681b      	ldr	r3, [r3, #0]
 8015750:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8015754:	601a      	str	r2, [r3, #0]
 8015756:	e009      	b.n	801576c <HAL_SPI_Transmit_DMA+0xbc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8015758:	68fb      	ldr	r3, [r7, #12]
 801575a:	681b      	ldr	r3, [r3, #0]
 801575c:	68db      	ldr	r3, [r3, #12]
 801575e:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8015762:	68fb      	ldr	r3, [r7, #12]
 8015764:	681b      	ldr	r3, [r3, #0]
 8015766:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 801576a:	60da      	str	r2, [r3, #12]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 801576c:	68fb      	ldr	r3, [r7, #12]
 801576e:	68db      	ldr	r3, [r3, #12]
 8015770:	2b0f      	cmp	r3, #15
 8015772:	d905      	bls.n	8015780 <HAL_SPI_Transmit_DMA+0xd0>
 8015774:	68fb      	ldr	r3, [r7, #12]
 8015776:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015778:	699b      	ldr	r3, [r3, #24]
 801577a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801577e:	d10f      	bne.n	80157a0 <HAL_SPI_Transmit_DMA+0xf0>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8015780:	68fb      	ldr	r3, [r7, #12]
 8015782:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8015784:	2b07      	cmp	r3, #7
 8015786:	d911      	bls.n	80157ac <HAL_SPI_Transmit_DMA+0xfc>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8015788:	68fb      	ldr	r3, [r7, #12]
 801578a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801578c:	699b      	ldr	r3, [r3, #24]
 801578e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8015792:	d00b      	beq.n	80157ac <HAL_SPI_Transmit_DMA+0xfc>
                                                     (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 8015794:	68fb      	ldr	r3, [r7, #12]
 8015796:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015798:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 801579a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801579e:	d005      	beq.n	80157ac <HAL_SPI_Transmit_DMA+0xfc>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    __HAL_UNLOCK(hspi);
 80157a0:	68fb      	ldr	r3, [r7, #12]
 80157a2:	2200      	movs	r2, #0
 80157a4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    return HAL_ERROR;
 80157a8:	2301      	movs	r3, #1
 80157aa:	e0b7      	b.n	801591c <HAL_SPI_Transmit_DMA+0x26c>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80157ac:	68fb      	ldr	r3, [r7, #12]
 80157ae:	68db      	ldr	r3, [r3, #12]
 80157b0:	2b07      	cmp	r3, #7
 80157b2:	d820      	bhi.n	80157f6 <HAL_SPI_Transmit_DMA+0x146>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80157b4:	68fb      	ldr	r3, [r7, #12]
 80157b6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80157b8:	699b      	ldr	r3, [r3, #24]
 80157ba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80157be:	d109      	bne.n	80157d4 <HAL_SPI_Transmit_DMA+0x124>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 80157c0:	68fb      	ldr	r3, [r7, #12]
 80157c2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80157c6:	b29b      	uxth	r3, r3
 80157c8:	3301      	adds	r3, #1
 80157ca:	105b      	asrs	r3, r3, #1
 80157cc:	b29a      	uxth	r2, r3
 80157ce:	68fb      	ldr	r3, [r7, #12]
 80157d0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    }
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 80157d4:	68fb      	ldr	r3, [r7, #12]
 80157d6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80157d8:	699b      	ldr	r3, [r3, #24]
 80157da:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80157de:	d11e      	bne.n	801581e <HAL_SPI_Transmit_DMA+0x16e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 80157e0:	68fb      	ldr	r3, [r7, #12]
 80157e2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80157e6:	b29b      	uxth	r3, r3
 80157e8:	3303      	adds	r3, #3
 80157ea:	109b      	asrs	r3, r3, #2
 80157ec:	b29a      	uxth	r2, r3
 80157ee:	68fb      	ldr	r3, [r7, #12]
 80157f0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80157f4:	e013      	b.n	801581e <HAL_SPI_Transmit_DMA+0x16e>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 80157f6:	68fb      	ldr	r3, [r7, #12]
 80157f8:	68db      	ldr	r3, [r3, #12]
 80157fa:	2b0f      	cmp	r3, #15
 80157fc:	d80f      	bhi.n	801581e <HAL_SPI_Transmit_DMA+0x16e>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 80157fe:	68fb      	ldr	r3, [r7, #12]
 8015800:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015802:	699b      	ldr	r3, [r3, #24]
 8015804:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8015808:	d109      	bne.n	801581e <HAL_SPI_Transmit_DMA+0x16e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 801580a:	68fb      	ldr	r3, [r7, #12]
 801580c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8015810:	b29b      	uxth	r3, r3
 8015812:	3301      	adds	r3, #1
 8015814:	105b      	asrs	r3, r3, #1
 8015816:	b29a      	uxth	r2, r3
 8015818:	68fb      	ldr	r3, [r7, #12]
 801581a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  {
    /* Adjustment done */
  }

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 801581e:	68fb      	ldr	r3, [r7, #12]
 8015820:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015822:	4a40      	ldr	r2, [pc, #256]	@ (8015924 <HAL_SPI_Transmit_DMA+0x274>)
 8015824:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8015826:	68fb      	ldr	r3, [r7, #12]
 8015828:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801582a:	4a3f      	ldr	r2, [pc, #252]	@ (8015928 <HAL_SPI_Transmit_DMA+0x278>)
 801582c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 801582e:	68fb      	ldr	r3, [r7, #12]
 8015830:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015832:	4a3e      	ldr	r2, [pc, #248]	@ (801592c <HAL_SPI_Transmit_DMA+0x27c>)
 8015834:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8015836:	68fb      	ldr	r3, [r7, #12]
 8015838:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801583a:	2200      	movs	r2, #0
 801583c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Clear TXDMAEN bit*/
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 801583e:	68fb      	ldr	r3, [r7, #12]
 8015840:	681b      	ldr	r3, [r3, #0]
 8015842:	689a      	ldr	r2, [r3, #8]
 8015844:	68fb      	ldr	r3, [r7, #12]
 8015846:	681b      	ldr	r3, [r3, #0]
 8015848:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 801584c:	609a      	str	r2, [r3, #8]

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 801584e:	68fb      	ldr	r3, [r7, #12]
 8015850:	6f98      	ldr	r0, [r3, #120]	@ 0x78
 8015852:	68fb      	ldr	r3, [r7, #12]
 8015854:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8015856:	4619      	mov	r1, r3
 8015858:	68fb      	ldr	r3, [r7, #12]
 801585a:	681b      	ldr	r3, [r3, #0]
 801585c:	3320      	adds	r3, #32
 801585e:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8015860:	68fb      	ldr	r3, [r7, #12]
 8015862:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8015866:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 8015868:	f7f6 f972 	bl	800bb50 <HAL_DMA_Start_IT>
 801586c:	4603      	mov	r3, r0
 801586e:	2b00      	cmp	r3, #0
 8015870:	d011      	beq.n	8015896 <HAL_SPI_Transmit_DMA+0x1e6>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8015872:	68fb      	ldr	r3, [r7, #12]
 8015874:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015878:	f043 0210 	orr.w	r2, r3, #16
 801587c:	68fb      	ldr	r3, [r7, #12]
 801587e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8015882:	68fb      	ldr	r3, [r7, #12]
 8015884:	2201      	movs	r2, #1
 8015886:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 801588a:	68fb      	ldr	r3, [r7, #12]
 801588c:	2200      	movs	r2, #0
 801588e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    return HAL_ERROR;
 8015892:	2301      	movs	r3, #1
 8015894:	e042      	b.n	801591c <HAL_SPI_Transmit_DMA+0x26c>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8015896:	68fb      	ldr	r3, [r7, #12]
 8015898:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801589a:	69db      	ldr	r3, [r3, #28]
 801589c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80158a0:	d108      	bne.n	80158b4 <HAL_SPI_Transmit_DMA+0x204>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 80158a2:	68fb      	ldr	r3, [r7, #12]
 80158a4:	681b      	ldr	r3, [r3, #0]
 80158a6:	6859      	ldr	r1, [r3, #4]
 80158a8:	68fb      	ldr	r3, [r7, #12]
 80158aa:	681a      	ldr	r2, [r3, #0]
 80158ac:	4b20      	ldr	r3, [pc, #128]	@ (8015930 <HAL_SPI_Transmit_DMA+0x280>)
 80158ae:	400b      	ands	r3, r1
 80158b0:	6053      	str	r3, [r2, #4]
 80158b2:	e009      	b.n	80158c8 <HAL_SPI_Transmit_DMA+0x218>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80158b4:	68fb      	ldr	r3, [r7, #12]
 80158b6:	681b      	ldr	r3, [r3, #0]
 80158b8:	685a      	ldr	r2, [r3, #4]
 80158ba:	4b1d      	ldr	r3, [pc, #116]	@ (8015930 <HAL_SPI_Transmit_DMA+0x280>)
 80158bc:	4013      	ands	r3, r2
 80158be:	88f9      	ldrh	r1, [r7, #6]
 80158c0:	68fa      	ldr	r2, [r7, #12]
 80158c2:	6812      	ldr	r2, [r2, #0]
 80158c4:	430b      	orrs	r3, r1
 80158c6:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 80158c8:	68fb      	ldr	r3, [r7, #12]
 80158ca:	681b      	ldr	r3, [r3, #0]
 80158cc:	689a      	ldr	r2, [r3, #8]
 80158ce:	68fb      	ldr	r3, [r7, #12]
 80158d0:	681b      	ldr	r3, [r3, #0]
 80158d2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80158d6:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 80158d8:	68fb      	ldr	r3, [r7, #12]
 80158da:	681b      	ldr	r3, [r3, #0]
 80158dc:	691a      	ldr	r2, [r3, #16]
 80158de:	68fb      	ldr	r3, [r7, #12]
 80158e0:	681b      	ldr	r3, [r3, #0]
 80158e2:	f442 7248 	orr.w	r2, r2, #800	@ 0x320
 80158e6:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80158e8:	68fb      	ldr	r3, [r7, #12]
 80158ea:	681b      	ldr	r3, [r3, #0]
 80158ec:	681a      	ldr	r2, [r3, #0]
 80158ee:	68fb      	ldr	r3, [r7, #12]
 80158f0:	681b      	ldr	r3, [r3, #0]
 80158f2:	f042 0201 	orr.w	r2, r2, #1
 80158f6:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80158f8:	68fb      	ldr	r3, [r7, #12]
 80158fa:	685b      	ldr	r3, [r3, #4]
 80158fc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8015900:	d107      	bne.n	8015912 <HAL_SPI_Transmit_DMA+0x262>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8015902:	68fb      	ldr	r3, [r7, #12]
 8015904:	681b      	ldr	r3, [r3, #0]
 8015906:	681a      	ldr	r2, [r3, #0]
 8015908:	68fb      	ldr	r3, [r7, #12]
 801590a:	681b      	ldr	r3, [r3, #0]
 801590c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8015910:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8015912:	68fb      	ldr	r3, [r7, #12]
 8015914:	2200      	movs	r2, #0
 8015916:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 801591a:	2300      	movs	r3, #0
}
 801591c:	4618      	mov	r0, r3
 801591e:	3710      	adds	r7, #16
 8015920:	46bd      	mov	sp, r7
 8015922:	bd80      	pop	{r7, pc}
 8015924:	08015d8f 	.word	0x08015d8f
 8015928:	08015d49 	.word	0x08015d49
 801592c:	08015dab 	.word	0x08015dab
 8015930:	ffff0000 	.word	0xffff0000

08015934 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8015934:	b580      	push	{r7, lr}
 8015936:	b08a      	sub	sp, #40	@ 0x28
 8015938:	af00      	add	r7, sp, #0
 801593a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 801593c:	687b      	ldr	r3, [r7, #4]
 801593e:	681b      	ldr	r3, [r3, #0]
 8015940:	691b      	ldr	r3, [r3, #16]
 8015942:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8015944:	687b      	ldr	r3, [r7, #4]
 8015946:	681b      	ldr	r3, [r3, #0]
 8015948:	695b      	ldr	r3, [r3, #20]
 801594a:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 801594c:	6a3a      	ldr	r2, [r7, #32]
 801594e:	69fb      	ldr	r3, [r7, #28]
 8015950:	4013      	ands	r3, r2
 8015952:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8015954:	687b      	ldr	r3, [r7, #4]
 8015956:	681b      	ldr	r3, [r3, #0]
 8015958:	689b      	ldr	r3, [r3, #8]
 801595a:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 801595c:	2300      	movs	r3, #0
 801595e:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8015960:	687b      	ldr	r3, [r7, #4]
 8015962:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8015966:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8015968:	687b      	ldr	r3, [r7, #4]
 801596a:	681b      	ldr	r3, [r3, #0]
 801596c:	3330      	adds	r3, #48	@ 0x30
 801596e:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8015970:	69fb      	ldr	r3, [r7, #28]
 8015972:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8015976:	2b00      	cmp	r3, #0
 8015978:	d010      	beq.n	801599c <HAL_SPI_IRQHandler+0x68>
 801597a:	6a3b      	ldr	r3, [r7, #32]
 801597c:	f003 0308 	and.w	r3, r3, #8
 8015980:	2b00      	cmp	r3, #0
 8015982:	d00b      	beq.n	801599c <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8015984:	687b      	ldr	r3, [r7, #4]
 8015986:	681b      	ldr	r3, [r3, #0]
 8015988:	699a      	ldr	r2, [r3, #24]
 801598a:	687b      	ldr	r3, [r7, #4]
 801598c:	681b      	ldr	r3, [r3, #0]
 801598e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8015992:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 8015994:	6878      	ldr	r0, [r7, #4]
 8015996:	f000 f9cd 	bl	8015d34 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 801599a:	e192      	b.n	8015cc2 <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 801599c:	69bb      	ldr	r3, [r7, #24]
 801599e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80159a2:	2b00      	cmp	r3, #0
 80159a4:	d113      	bne.n	80159ce <HAL_SPI_IRQHandler+0x9a>
 80159a6:	69bb      	ldr	r3, [r7, #24]
 80159a8:	f003 0320 	and.w	r3, r3, #32
 80159ac:	2b00      	cmp	r3, #0
 80159ae:	d10e      	bne.n	80159ce <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 80159b0:	69bb      	ldr	r3, [r7, #24]
 80159b2:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 80159b6:	2b00      	cmp	r3, #0
 80159b8:	d009      	beq.n	80159ce <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 80159ba:	687b      	ldr	r3, [r7, #4]
 80159bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80159be:	6878      	ldr	r0, [r7, #4]
 80159c0:	4798      	blx	r3
    hspi->RxISR(hspi);
 80159c2:	687b      	ldr	r3, [r7, #4]
 80159c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80159c6:	6878      	ldr	r0, [r7, #4]
 80159c8:	4798      	blx	r3
    handled = 1UL;
 80159ca:	2301      	movs	r3, #1
 80159cc:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 80159ce:	69bb      	ldr	r3, [r7, #24]
 80159d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80159d4:	2b00      	cmp	r3, #0
 80159d6:	d10f      	bne.n	80159f8 <HAL_SPI_IRQHandler+0xc4>
 80159d8:	69bb      	ldr	r3, [r7, #24]
 80159da:	f003 0301 	and.w	r3, r3, #1
 80159de:	2b00      	cmp	r3, #0
 80159e0:	d00a      	beq.n	80159f8 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 80159e2:	69bb      	ldr	r3, [r7, #24]
 80159e4:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 80159e8:	2b00      	cmp	r3, #0
 80159ea:	d105      	bne.n	80159f8 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 80159ec:	687b      	ldr	r3, [r7, #4]
 80159ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80159f0:	6878      	ldr	r0, [r7, #4]
 80159f2:	4798      	blx	r3
    handled = 1UL;
 80159f4:	2301      	movs	r3, #1
 80159f6:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 80159f8:	69bb      	ldr	r3, [r7, #24]
 80159fa:	f003 0320 	and.w	r3, r3, #32
 80159fe:	2b00      	cmp	r3, #0
 8015a00:	d10f      	bne.n	8015a22 <HAL_SPI_IRQHandler+0xee>
 8015a02:	69bb      	ldr	r3, [r7, #24]
 8015a04:	f003 0302 	and.w	r3, r3, #2
 8015a08:	2b00      	cmp	r3, #0
 8015a0a:	d00a      	beq.n	8015a22 <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8015a0c:	69bb      	ldr	r3, [r7, #24]
 8015a0e:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8015a12:	2b00      	cmp	r3, #0
 8015a14:	d105      	bne.n	8015a22 <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 8015a16:	687b      	ldr	r3, [r7, #4]
 8015a18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015a1a:	6878      	ldr	r0, [r7, #4]
 8015a1c:	4798      	blx	r3
    handled = 1UL;
 8015a1e:	2301      	movs	r3, #1
 8015a20:	627b      	str	r3, [r7, #36]	@ 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 8015a22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015a24:	2b00      	cmp	r3, #0
 8015a26:	f040 8147 	bne.w	8015cb8 <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8015a2a:	69bb      	ldr	r3, [r7, #24]
 8015a2c:	f003 0308 	and.w	r3, r3, #8
 8015a30:	2b00      	cmp	r3, #0
 8015a32:	f000 808b 	beq.w	8015b4c <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8015a36:	687b      	ldr	r3, [r7, #4]
 8015a38:	681b      	ldr	r3, [r3, #0]
 8015a3a:	699a      	ldr	r2, [r3, #24]
 8015a3c:	687b      	ldr	r3, [r7, #4]
 8015a3e:	681b      	ldr	r3, [r3, #0]
 8015a40:	f042 0208 	orr.w	r2, r2, #8
 8015a44:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8015a46:	687b      	ldr	r3, [r7, #4]
 8015a48:	681b      	ldr	r3, [r3, #0]
 8015a4a:	699a      	ldr	r2, [r3, #24]
 8015a4c:	687b      	ldr	r3, [r7, #4]
 8015a4e:	681b      	ldr	r3, [r3, #0]
 8015a50:	f042 0210 	orr.w	r2, r2, #16
 8015a54:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8015a56:	687b      	ldr	r3, [r7, #4]
 8015a58:	681b      	ldr	r3, [r3, #0]
 8015a5a:	699a      	ldr	r2, [r3, #24]
 8015a5c:	687b      	ldr	r3, [r7, #4]
 8015a5e:	681b      	ldr	r3, [r3, #0]
 8015a60:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8015a64:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8015a66:	687b      	ldr	r3, [r7, #4]
 8015a68:	681b      	ldr	r3, [r3, #0]
 8015a6a:	691a      	ldr	r2, [r3, #16]
 8015a6c:	687b      	ldr	r3, [r7, #4]
 8015a6e:	681b      	ldr	r3, [r3, #0]
 8015a70:	f022 0208 	bic.w	r2, r2, #8
 8015a74:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8015a76:	687b      	ldr	r3, [r7, #4]
 8015a78:	681b      	ldr	r3, [r3, #0]
 8015a7a:	689b      	ldr	r3, [r3, #8]
 8015a7c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8015a80:	2b00      	cmp	r3, #0
 8015a82:	d13d      	bne.n	8015b00 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 8015a84:	e036      	b.n	8015af4 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8015a86:	687b      	ldr	r3, [r7, #4]
 8015a88:	68db      	ldr	r3, [r3, #12]
 8015a8a:	2b0f      	cmp	r3, #15
 8015a8c:	d90b      	bls.n	8015aa6 <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8015a8e:	687b      	ldr	r3, [r7, #4]
 8015a90:	681a      	ldr	r2, [r3, #0]
 8015a92:	687b      	ldr	r3, [r7, #4]
 8015a94:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015a96:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8015a98:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8015a9a:	687b      	ldr	r3, [r7, #4]
 8015a9c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015a9e:	1d1a      	adds	r2, r3, #4
 8015aa0:	687b      	ldr	r3, [r7, #4]
 8015aa2:	665a      	str	r2, [r3, #100]	@ 0x64
 8015aa4:	e01d      	b.n	8015ae2 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8015aa6:	687b      	ldr	r3, [r7, #4]
 8015aa8:	68db      	ldr	r3, [r3, #12]
 8015aaa:	2b07      	cmp	r3, #7
 8015aac:	d90b      	bls.n	8015ac6 <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8015aae:	687b      	ldr	r3, [r7, #4]
 8015ab0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015ab2:	68fa      	ldr	r2, [r7, #12]
 8015ab4:	8812      	ldrh	r2, [r2, #0]
 8015ab6:	b292      	uxth	r2, r2
 8015ab8:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8015aba:	687b      	ldr	r3, [r7, #4]
 8015abc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015abe:	1c9a      	adds	r2, r3, #2
 8015ac0:	687b      	ldr	r3, [r7, #4]
 8015ac2:	665a      	str	r2, [r3, #100]	@ 0x64
 8015ac4:	e00d      	b.n	8015ae2 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8015ac6:	687b      	ldr	r3, [r7, #4]
 8015ac8:	681b      	ldr	r3, [r3, #0]
 8015aca:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8015ace:	687b      	ldr	r3, [r7, #4]
 8015ad0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015ad2:	7812      	ldrb	r2, [r2, #0]
 8015ad4:	b2d2      	uxtb	r2, r2
 8015ad6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8015ad8:	687b      	ldr	r3, [r7, #4]
 8015ada:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015adc:	1c5a      	adds	r2, r3, #1
 8015ade:	687b      	ldr	r3, [r7, #4]
 8015ae0:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        hspi->RxXferCount--;
 8015ae2:	687b      	ldr	r3, [r7, #4]
 8015ae4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8015ae8:	b29b      	uxth	r3, r3
 8015aea:	3b01      	subs	r3, #1
 8015aec:	b29a      	uxth	r2, r3
 8015aee:	687b      	ldr	r3, [r7, #4]
 8015af0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      while (hspi->RxXferCount != 0UL)
 8015af4:	687b      	ldr	r3, [r7, #4]
 8015af6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8015afa:	b29b      	uxth	r3, r3
 8015afc:	2b00      	cmp	r3, #0
 8015afe:	d1c2      	bne.n	8015a86 <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 8015b00:	6878      	ldr	r0, [r7, #4]
 8015b02:	f000 f98f 	bl	8015e24 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 8015b06:	687b      	ldr	r3, [r7, #4]
 8015b08:	2201      	movs	r2, #1
 8015b0a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8015b0e:	687b      	ldr	r3, [r7, #4]
 8015b10:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015b14:	2b00      	cmp	r3, #0
 8015b16:	d003      	beq.n	8015b20 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8015b18:	6878      	ldr	r0, [r7, #4]
 8015b1a:	f000 f901 	bl	8015d20 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8015b1e:	e0d0      	b.n	8015cc2 <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8015b20:	7cfb      	ldrb	r3, [r7, #19]
 8015b22:	2b05      	cmp	r3, #5
 8015b24:	d103      	bne.n	8015b2e <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 8015b26:	6878      	ldr	r0, [r7, #4]
 8015b28:	f000 f8e6 	bl	8015cf8 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 8015b2c:	e0c6      	b.n	8015cbc <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8015b2e:	7cfb      	ldrb	r3, [r7, #19]
 8015b30:	2b04      	cmp	r3, #4
 8015b32:	d103      	bne.n	8015b3c <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 8015b34:	6878      	ldr	r0, [r7, #4]
 8015b36:	f000 f8d5 	bl	8015ce4 <HAL_SPI_RxCpltCallback>
    return;
 8015b3a:	e0bf      	b.n	8015cbc <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8015b3c:	7cfb      	ldrb	r3, [r7, #19]
 8015b3e:	2b03      	cmp	r3, #3
 8015b40:	f040 80bc 	bne.w	8015cbc <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 8015b44:	6878      	ldr	r0, [r7, #4]
 8015b46:	f000 f8c3 	bl	8015cd0 <HAL_SPI_TxCpltCallback>
    return;
 8015b4a:	e0b7      	b.n	8015cbc <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8015b4c:	69bb      	ldr	r3, [r7, #24]
 8015b4e:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 8015b52:	2b00      	cmp	r3, #0
 8015b54:	f000 80b5 	beq.w	8015cc2 <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8015b58:	69bb      	ldr	r3, [r7, #24]
 8015b5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8015b5e:	2b00      	cmp	r3, #0
 8015b60:	d00f      	beq.n	8015b82 <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8015b62:	687b      	ldr	r3, [r7, #4]
 8015b64:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015b68:	f043 0204 	orr.w	r2, r3, #4
 8015b6c:	687b      	ldr	r3, [r7, #4]
 8015b6e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8015b72:	687b      	ldr	r3, [r7, #4]
 8015b74:	681b      	ldr	r3, [r3, #0]
 8015b76:	699a      	ldr	r2, [r3, #24]
 8015b78:	687b      	ldr	r3, [r7, #4]
 8015b7a:	681b      	ldr	r3, [r3, #0]
 8015b7c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8015b80:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8015b82:	69bb      	ldr	r3, [r7, #24]
 8015b84:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8015b88:	2b00      	cmp	r3, #0
 8015b8a:	d00f      	beq.n	8015bac <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8015b8c:	687b      	ldr	r3, [r7, #4]
 8015b8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015b92:	f043 0201 	orr.w	r2, r3, #1
 8015b96:	687b      	ldr	r3, [r7, #4]
 8015b98:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8015b9c:	687b      	ldr	r3, [r7, #4]
 8015b9e:	681b      	ldr	r3, [r3, #0]
 8015ba0:	699a      	ldr	r2, [r3, #24]
 8015ba2:	687b      	ldr	r3, [r7, #4]
 8015ba4:	681b      	ldr	r3, [r3, #0]
 8015ba6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8015baa:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8015bac:	69bb      	ldr	r3, [r7, #24]
 8015bae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8015bb2:	2b00      	cmp	r3, #0
 8015bb4:	d00f      	beq.n	8015bd6 <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8015bb6:	687b      	ldr	r3, [r7, #4]
 8015bb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015bbc:	f043 0208 	orr.w	r2, r3, #8
 8015bc0:	687b      	ldr	r3, [r7, #4]
 8015bc2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8015bc6:	687b      	ldr	r3, [r7, #4]
 8015bc8:	681b      	ldr	r3, [r3, #0]
 8015bca:	699a      	ldr	r2, [r3, #24]
 8015bcc:	687b      	ldr	r3, [r7, #4]
 8015bce:	681b      	ldr	r3, [r3, #0]
 8015bd0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8015bd4:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8015bd6:	69bb      	ldr	r3, [r7, #24]
 8015bd8:	f003 0320 	and.w	r3, r3, #32
 8015bdc:	2b00      	cmp	r3, #0
 8015bde:	d00f      	beq.n	8015c00 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8015be0:	687b      	ldr	r3, [r7, #4]
 8015be2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015be6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8015bea:	687b      	ldr	r3, [r7, #4]
 8015bec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8015bf0:	687b      	ldr	r3, [r7, #4]
 8015bf2:	681b      	ldr	r3, [r3, #0]
 8015bf4:	699a      	ldr	r2, [r3, #24]
 8015bf6:	687b      	ldr	r3, [r7, #4]
 8015bf8:	681b      	ldr	r3, [r3, #0]
 8015bfa:	f042 0220 	orr.w	r2, r2, #32
 8015bfe:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8015c00:	687b      	ldr	r3, [r7, #4]
 8015c02:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015c06:	2b00      	cmp	r3, #0
 8015c08:	d05a      	beq.n	8015cc0 <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8015c0a:	687b      	ldr	r3, [r7, #4]
 8015c0c:	681b      	ldr	r3, [r3, #0]
 8015c0e:	681a      	ldr	r2, [r3, #0]
 8015c10:	687b      	ldr	r3, [r7, #4]
 8015c12:	681b      	ldr	r3, [r3, #0]
 8015c14:	f022 0201 	bic.w	r2, r2, #1
 8015c18:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 8015c1a:	687b      	ldr	r3, [r7, #4]
 8015c1c:	681b      	ldr	r3, [r3, #0]
 8015c1e:	6919      	ldr	r1, [r3, #16]
 8015c20:	687b      	ldr	r3, [r7, #4]
 8015c22:	681a      	ldr	r2, [r3, #0]
 8015c24:	4b28      	ldr	r3, [pc, #160]	@ (8015cc8 <HAL_SPI_IRQHandler+0x394>)
 8015c26:	400b      	ands	r3, r1
 8015c28:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8015c2a:	697b      	ldr	r3, [r7, #20]
 8015c2c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8015c30:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8015c34:	d138      	bne.n	8015ca8 <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8015c36:	687b      	ldr	r3, [r7, #4]
 8015c38:	681b      	ldr	r3, [r3, #0]
 8015c3a:	689a      	ldr	r2, [r3, #8]
 8015c3c:	687b      	ldr	r3, [r7, #4]
 8015c3e:	681b      	ldr	r3, [r3, #0]
 8015c40:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8015c44:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8015c46:	687b      	ldr	r3, [r7, #4]
 8015c48:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8015c4a:	2b00      	cmp	r3, #0
 8015c4c:	d013      	beq.n	8015c76 <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8015c4e:	687b      	ldr	r3, [r7, #4]
 8015c50:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8015c52:	4a1e      	ldr	r2, [pc, #120]	@ (8015ccc <HAL_SPI_IRQHandler+0x398>)
 8015c54:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8015c56:	687b      	ldr	r3, [r7, #4]
 8015c58:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8015c5a:	4618      	mov	r0, r3
 8015c5c:	f7f6 fd00 	bl	800c660 <HAL_DMA_Abort_IT>
 8015c60:	4603      	mov	r3, r0
 8015c62:	2b00      	cmp	r3, #0
 8015c64:	d007      	beq.n	8015c76 <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8015c66:	687b      	ldr	r3, [r7, #4]
 8015c68:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015c6c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8015c70:	687b      	ldr	r3, [r7, #4]
 8015c72:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8015c76:	687b      	ldr	r3, [r7, #4]
 8015c78:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015c7a:	2b00      	cmp	r3, #0
 8015c7c:	d020      	beq.n	8015cc0 <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8015c7e:	687b      	ldr	r3, [r7, #4]
 8015c80:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015c82:	4a12      	ldr	r2, [pc, #72]	@ (8015ccc <HAL_SPI_IRQHandler+0x398>)
 8015c84:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8015c86:	687b      	ldr	r3, [r7, #4]
 8015c88:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015c8a:	4618      	mov	r0, r3
 8015c8c:	f7f6 fce8 	bl	800c660 <HAL_DMA_Abort_IT>
 8015c90:	4603      	mov	r3, r0
 8015c92:	2b00      	cmp	r3, #0
 8015c94:	d014      	beq.n	8015cc0 <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8015c96:	687b      	ldr	r3, [r7, #4]
 8015c98:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015c9c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8015ca0:	687b      	ldr	r3, [r7, #4]
 8015ca2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8015ca6:	e00b      	b.n	8015cc0 <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 8015ca8:	687b      	ldr	r3, [r7, #4]
 8015caa:	2201      	movs	r2, #1
 8015cac:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
        HAL_SPI_ErrorCallback(hspi);
 8015cb0:	6878      	ldr	r0, [r7, #4]
 8015cb2:	f000 f835 	bl	8015d20 <HAL_SPI_ErrorCallback>
    return;
 8015cb6:	e003      	b.n	8015cc0 <HAL_SPI_IRQHandler+0x38c>
    return;
 8015cb8:	bf00      	nop
 8015cba:	e002      	b.n	8015cc2 <HAL_SPI_IRQHandler+0x38e>
    return;
 8015cbc:	bf00      	nop
 8015cbe:	e000      	b.n	8015cc2 <HAL_SPI_IRQHandler+0x38e>
    return;
 8015cc0:	bf00      	nop
  }
}
 8015cc2:	3728      	adds	r7, #40	@ 0x28
 8015cc4:	46bd      	mov	sp, r7
 8015cc6:	bd80      	pop	{r7, pc}
 8015cc8:	fffffc94 	.word	0xfffffc94
 8015ccc:	08015df1 	.word	0x08015df1

08015cd0 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8015cd0:	b480      	push	{r7}
 8015cd2:	b083      	sub	sp, #12
 8015cd4:	af00      	add	r7, sp, #0
 8015cd6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8015cd8:	bf00      	nop
 8015cda:	370c      	adds	r7, #12
 8015cdc:	46bd      	mov	sp, r7
 8015cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ce2:	4770      	bx	lr

08015ce4 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8015ce4:	b480      	push	{r7}
 8015ce6:	b083      	sub	sp, #12
 8015ce8:	af00      	add	r7, sp, #0
 8015cea:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8015cec:	bf00      	nop
 8015cee:	370c      	adds	r7, #12
 8015cf0:	46bd      	mov	sp, r7
 8015cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cf6:	4770      	bx	lr

08015cf8 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8015cf8:	b480      	push	{r7}
 8015cfa:	b083      	sub	sp, #12
 8015cfc:	af00      	add	r7, sp, #0
 8015cfe:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8015d00:	bf00      	nop
 8015d02:	370c      	adds	r7, #12
 8015d04:	46bd      	mov	sp, r7
 8015d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d0a:	4770      	bx	lr

08015d0c <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8015d0c:	b480      	push	{r7}
 8015d0e:	b083      	sub	sp, #12
 8015d10:	af00      	add	r7, sp, #0
 8015d12:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8015d14:	bf00      	nop
 8015d16:	370c      	adds	r7, #12
 8015d18:	46bd      	mov	sp, r7
 8015d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d1e:	4770      	bx	lr

08015d20 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8015d20:	b480      	push	{r7}
 8015d22:	b083      	sub	sp, #12
 8015d24:	af00      	add	r7, sp, #0
 8015d26:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8015d28:	bf00      	nop
 8015d2a:	370c      	adds	r7, #12
 8015d2c:	46bd      	mov	sp, r7
 8015d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d32:	4770      	bx	lr

08015d34 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8015d34:	b480      	push	{r7}
 8015d36:	b083      	sub	sp, #12
 8015d38:	af00      	add	r7, sp, #0
 8015d3a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 8015d3c:	bf00      	nop
 8015d3e:	370c      	adds	r7, #12
 8015d40:	46bd      	mov	sp, r7
 8015d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d46:	4770      	bx	lr

08015d48 <SPI_DMATransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8015d48:	b580      	push	{r7, lr}
 8015d4a:	b084      	sub	sp, #16
 8015d4c:	af00      	add	r7, sp, #0
 8015d4e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8015d50:	687b      	ldr	r3, [r7, #4]
 8015d52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015d54:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 8015d56:	68fb      	ldr	r3, [r7, #12]
 8015d58:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8015d5c:	b2db      	uxtb	r3, r3
 8015d5e:	2b07      	cmp	r3, #7
 8015d60:	d011      	beq.n	8015d86 <SPI_DMATransmitCplt+0x3e>
  {
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8015d62:	68fb      	ldr	r3, [r7, #12]
 8015d64:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015d66:	69db      	ldr	r3, [r3, #28]
 8015d68:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8015d6c:	d103      	bne.n	8015d76 <SPI_DMATransmitCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxCpltCallback(hspi);
#else
      HAL_SPI_TxCpltCallback(hspi);
 8015d6e:	68f8      	ldr	r0, [r7, #12]
 8015d70:	f7ff ffae 	bl	8015cd0 <HAL_SPI_TxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 8015d74:	e007      	b.n	8015d86 <SPI_DMATransmitCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 8015d76:	68fb      	ldr	r3, [r7, #12]
 8015d78:	681b      	ldr	r3, [r3, #0]
 8015d7a:	691a      	ldr	r2, [r3, #16]
 8015d7c:	68fb      	ldr	r3, [r7, #12]
 8015d7e:	681b      	ldr	r3, [r3, #0]
 8015d80:	f042 0208 	orr.w	r2, r2, #8
 8015d84:	611a      	str	r2, [r3, #16]
}
 8015d86:	bf00      	nop
 8015d88:	3710      	adds	r7, #16
 8015d8a:	46bd      	mov	sp, r7
 8015d8c:	bd80      	pop	{r7, pc}

08015d8e <SPI_DMAHalfTransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma) /* Derogation MISRAC2012-Rule-8.13 */
{
 8015d8e:	b580      	push	{r7, lr}
 8015d90:	b084      	sub	sp, #16
 8015d92:	af00      	add	r7, sp, #0
 8015d94:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)
 8015d96:	687b      	ldr	r3, [r7, #4]
 8015d98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015d9a:	60fb      	str	r3, [r7, #12]
                            ((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-8.13 */

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8015d9c:	68f8      	ldr	r0, [r7, #12]
 8015d9e:	f7ff ffb5 	bl	8015d0c <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8015da2:	bf00      	nop
 8015da4:	3710      	adds	r7, #16
 8015da6:	46bd      	mov	sp, r7
 8015da8:	bd80      	pop	{r7, pc}

08015daa <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8015daa:	b580      	push	{r7, lr}
 8015dac:	b084      	sub	sp, #16
 8015dae:	af00      	add	r7, sp, #0
 8015db0:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8015db2:	687b      	ldr	r3, [r7, #4]
 8015db4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015db6:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8015db8:	6878      	ldr	r0, [r7, #4]
 8015dba:	f7f7 fdcf 	bl	800d95c <HAL_DMA_GetError>
 8015dbe:	4603      	mov	r3, r0
 8015dc0:	2b02      	cmp	r3, #2
 8015dc2:	d011      	beq.n	8015de8 <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 8015dc4:	68f8      	ldr	r0, [r7, #12]
 8015dc6:	f000 f82d 	bl	8015e24 <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8015dca:	68fb      	ldr	r3, [r7, #12]
 8015dcc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015dd0:	f043 0210 	orr.w	r2, r3, #16
 8015dd4:	68fb      	ldr	r3, [r7, #12]
 8015dd6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8015dda:	68fb      	ldr	r3, [r7, #12]
 8015ddc:	2201      	movs	r2, #1
 8015dde:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8015de2:	68f8      	ldr	r0, [r7, #12]
 8015de4:	f7ff ff9c 	bl	8015d20 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8015de8:	bf00      	nop
 8015dea:	3710      	adds	r7, #16
 8015dec:	46bd      	mov	sp, r7
 8015dee:	bd80      	pop	{r7, pc}

08015df0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8015df0:	b580      	push	{r7, lr}
 8015df2:	b084      	sub	sp, #16
 8015df4:	af00      	add	r7, sp, #0
 8015df6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8015df8:	687b      	ldr	r3, [r7, #4]
 8015dfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015dfc:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 8015dfe:	68fb      	ldr	r3, [r7, #12]
 8015e00:	2200      	movs	r2, #0
 8015e02:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 8015e06:	68fb      	ldr	r3, [r7, #12]
 8015e08:	2200      	movs	r2, #0
 8015e0a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 8015e0e:	68fb      	ldr	r3, [r7, #12]
 8015e10:	2201      	movs	r2, #1
 8015e12:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8015e16:	68f8      	ldr	r0, [r7, #12]
 8015e18:	f7ff ff82 	bl	8015d20 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8015e1c:	bf00      	nop
 8015e1e:	3710      	adds	r7, #16
 8015e20:	46bd      	mov	sp, r7
 8015e22:	bd80      	pop	{r7, pc}

08015e24 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8015e24:	b480      	push	{r7}
 8015e26:	b085      	sub	sp, #20
 8015e28:	af00      	add	r7, sp, #0
 8015e2a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8015e2c:	687b      	ldr	r3, [r7, #4]
 8015e2e:	681b      	ldr	r3, [r3, #0]
 8015e30:	695b      	ldr	r3, [r3, #20]
 8015e32:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8015e34:	687b      	ldr	r3, [r7, #4]
 8015e36:	681b      	ldr	r3, [r3, #0]
 8015e38:	699a      	ldr	r2, [r3, #24]
 8015e3a:	687b      	ldr	r3, [r7, #4]
 8015e3c:	681b      	ldr	r3, [r3, #0]
 8015e3e:	f042 0208 	orr.w	r2, r2, #8
 8015e42:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8015e44:	687b      	ldr	r3, [r7, #4]
 8015e46:	681b      	ldr	r3, [r3, #0]
 8015e48:	699a      	ldr	r2, [r3, #24]
 8015e4a:	687b      	ldr	r3, [r7, #4]
 8015e4c:	681b      	ldr	r3, [r3, #0]
 8015e4e:	f042 0210 	orr.w	r2, r2, #16
 8015e52:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8015e54:	687b      	ldr	r3, [r7, #4]
 8015e56:	681b      	ldr	r3, [r3, #0]
 8015e58:	681a      	ldr	r2, [r3, #0]
 8015e5a:	687b      	ldr	r3, [r7, #4]
 8015e5c:	681b      	ldr	r3, [r3, #0]
 8015e5e:	f022 0201 	bic.w	r2, r2, #1
 8015e62:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8015e64:	687b      	ldr	r3, [r7, #4]
 8015e66:	681b      	ldr	r3, [r3, #0]
 8015e68:	6919      	ldr	r1, [r3, #16]
 8015e6a:	687b      	ldr	r3, [r7, #4]
 8015e6c:	681a      	ldr	r2, [r3, #0]
 8015e6e:	4b3c      	ldr	r3, [pc, #240]	@ (8015f60 <SPI_CloseTransfer+0x13c>)
 8015e70:	400b      	ands	r3, r1
 8015e72:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8015e74:	687b      	ldr	r3, [r7, #4]
 8015e76:	681b      	ldr	r3, [r3, #0]
 8015e78:	689a      	ldr	r2, [r3, #8]
 8015e7a:	687b      	ldr	r3, [r7, #4]
 8015e7c:	681b      	ldr	r3, [r3, #0]
 8015e7e:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8015e82:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8015e84:	687b      	ldr	r3, [r7, #4]
 8015e86:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8015e8a:	b2db      	uxtb	r3, r3
 8015e8c:	2b04      	cmp	r3, #4
 8015e8e:	d014      	beq.n	8015eba <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8015e90:	68fb      	ldr	r3, [r7, #12]
 8015e92:	f003 0320 	and.w	r3, r3, #32
 8015e96:	2b00      	cmp	r3, #0
 8015e98:	d00f      	beq.n	8015eba <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8015e9a:	687b      	ldr	r3, [r7, #4]
 8015e9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015ea0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8015ea4:	687b      	ldr	r3, [r7, #4]
 8015ea6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8015eaa:	687b      	ldr	r3, [r7, #4]
 8015eac:	681b      	ldr	r3, [r3, #0]
 8015eae:	699a      	ldr	r2, [r3, #24]
 8015eb0:	687b      	ldr	r3, [r7, #4]
 8015eb2:	681b      	ldr	r3, [r3, #0]
 8015eb4:	f042 0220 	orr.w	r2, r2, #32
 8015eb8:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8015eba:	687b      	ldr	r3, [r7, #4]
 8015ebc:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8015ec0:	b2db      	uxtb	r3, r3
 8015ec2:	2b03      	cmp	r3, #3
 8015ec4:	d014      	beq.n	8015ef0 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8015ec6:	68fb      	ldr	r3, [r7, #12]
 8015ec8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8015ecc:	2b00      	cmp	r3, #0
 8015ece:	d00f      	beq.n	8015ef0 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8015ed0:	687b      	ldr	r3, [r7, #4]
 8015ed2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015ed6:	f043 0204 	orr.w	r2, r3, #4
 8015eda:	687b      	ldr	r3, [r7, #4]
 8015edc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8015ee0:	687b      	ldr	r3, [r7, #4]
 8015ee2:	681b      	ldr	r3, [r3, #0]
 8015ee4:	699a      	ldr	r2, [r3, #24]
 8015ee6:	687b      	ldr	r3, [r7, #4]
 8015ee8:	681b      	ldr	r3, [r3, #0]
 8015eea:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8015eee:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8015ef0:	68fb      	ldr	r3, [r7, #12]
 8015ef2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8015ef6:	2b00      	cmp	r3, #0
 8015ef8:	d00f      	beq.n	8015f1a <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8015efa:	687b      	ldr	r3, [r7, #4]
 8015efc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015f00:	f043 0201 	orr.w	r2, r3, #1
 8015f04:	687b      	ldr	r3, [r7, #4]
 8015f06:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8015f0a:	687b      	ldr	r3, [r7, #4]
 8015f0c:	681b      	ldr	r3, [r3, #0]
 8015f0e:	699a      	ldr	r2, [r3, #24]
 8015f10:	687b      	ldr	r3, [r7, #4]
 8015f12:	681b      	ldr	r3, [r3, #0]
 8015f14:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8015f18:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8015f1a:	68fb      	ldr	r3, [r7, #12]
 8015f1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8015f20:	2b00      	cmp	r3, #0
 8015f22:	d00f      	beq.n	8015f44 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8015f24:	687b      	ldr	r3, [r7, #4]
 8015f26:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015f2a:	f043 0208 	orr.w	r2, r3, #8
 8015f2e:	687b      	ldr	r3, [r7, #4]
 8015f30:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8015f34:	687b      	ldr	r3, [r7, #4]
 8015f36:	681b      	ldr	r3, [r3, #0]
 8015f38:	699a      	ldr	r2, [r3, #24]
 8015f3a:	687b      	ldr	r3, [r7, #4]
 8015f3c:	681b      	ldr	r3, [r3, #0]
 8015f3e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8015f42:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8015f44:	687b      	ldr	r3, [r7, #4]
 8015f46:	2200      	movs	r2, #0
 8015f48:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8015f4c:	687b      	ldr	r3, [r7, #4]
 8015f4e:	2200      	movs	r2, #0
 8015f50:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8015f54:	bf00      	nop
 8015f56:	3714      	adds	r7, #20
 8015f58:	46bd      	mov	sp, r7
 8015f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f5e:	4770      	bx	lr
 8015f60:	fffffc90 	.word	0xfffffc90

08015f64 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8015f64:	b580      	push	{r7, lr}
 8015f66:	b084      	sub	sp, #16
 8015f68:	af00      	add	r7, sp, #0
 8015f6a:	60f8      	str	r0, [r7, #12]
 8015f6c:	60b9      	str	r1, [r7, #8]
 8015f6e:	603b      	str	r3, [r7, #0]
 8015f70:	4613      	mov	r3, r2
 8015f72:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8015f74:	e010      	b.n	8015f98 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8015f76:	f7f3 f95d 	bl	8009234 <HAL_GetTick>
 8015f7a:	4602      	mov	r2, r0
 8015f7c:	69bb      	ldr	r3, [r7, #24]
 8015f7e:	1ad3      	subs	r3, r2, r3
 8015f80:	683a      	ldr	r2, [r7, #0]
 8015f82:	429a      	cmp	r2, r3
 8015f84:	d803      	bhi.n	8015f8e <SPI_WaitOnFlagUntilTimeout+0x2a>
 8015f86:	683b      	ldr	r3, [r7, #0]
 8015f88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015f8c:	d102      	bne.n	8015f94 <SPI_WaitOnFlagUntilTimeout+0x30>
 8015f8e:	683b      	ldr	r3, [r7, #0]
 8015f90:	2b00      	cmp	r3, #0
 8015f92:	d101      	bne.n	8015f98 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8015f94:	2303      	movs	r3, #3
 8015f96:	e00f      	b.n	8015fb8 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8015f98:	68fb      	ldr	r3, [r7, #12]
 8015f9a:	681b      	ldr	r3, [r3, #0]
 8015f9c:	695a      	ldr	r2, [r3, #20]
 8015f9e:	68bb      	ldr	r3, [r7, #8]
 8015fa0:	4013      	ands	r3, r2
 8015fa2:	68ba      	ldr	r2, [r7, #8]
 8015fa4:	429a      	cmp	r2, r3
 8015fa6:	bf0c      	ite	eq
 8015fa8:	2301      	moveq	r3, #1
 8015faa:	2300      	movne	r3, #0
 8015fac:	b2db      	uxtb	r3, r3
 8015fae:	461a      	mov	r2, r3
 8015fb0:	79fb      	ldrb	r3, [r7, #7]
 8015fb2:	429a      	cmp	r2, r3
 8015fb4:	d0df      	beq.n	8015f76 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8015fb6:	2300      	movs	r3, #0
}
 8015fb8:	4618      	mov	r0, r3
 8015fba:	3710      	adds	r7, #16
 8015fbc:	46bd      	mov	sp, r7
 8015fbe:	bd80      	pop	{r7, pc}

08015fc0 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8015fc0:	b480      	push	{r7}
 8015fc2:	b085      	sub	sp, #20
 8015fc4:	af00      	add	r7, sp, #0
 8015fc6:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8015fc8:	687b      	ldr	r3, [r7, #4]
 8015fca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015fcc:	095b      	lsrs	r3, r3, #5
 8015fce:	3301      	adds	r3, #1
 8015fd0:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8015fd2:	687b      	ldr	r3, [r7, #4]
 8015fd4:	68db      	ldr	r3, [r3, #12]
 8015fd6:	3301      	adds	r3, #1
 8015fd8:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8015fda:	68bb      	ldr	r3, [r7, #8]
 8015fdc:	3307      	adds	r3, #7
 8015fde:	08db      	lsrs	r3, r3, #3
 8015fe0:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8015fe2:	68bb      	ldr	r3, [r7, #8]
 8015fe4:	68fa      	ldr	r2, [r7, #12]
 8015fe6:	fb02 f303 	mul.w	r3, r2, r3
}
 8015fea:	4618      	mov	r0, r3
 8015fec:	3714      	adds	r7, #20
 8015fee:	46bd      	mov	sp, r7
 8015ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ff4:	4770      	bx	lr

08015ff6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8015ff6:	b580      	push	{r7, lr}
 8015ff8:	b082      	sub	sp, #8
 8015ffa:	af00      	add	r7, sp, #0
 8015ffc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8015ffe:	687b      	ldr	r3, [r7, #4]
 8016000:	2b00      	cmp	r3, #0
 8016002:	d101      	bne.n	8016008 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8016004:	2301      	movs	r3, #1
 8016006:	e049      	b.n	801609c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8016008:	687b      	ldr	r3, [r7, #4]
 801600a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 801600e:	b2db      	uxtb	r3, r3
 8016010:	2b00      	cmp	r3, #0
 8016012:	d106      	bne.n	8016022 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8016014:	687b      	ldr	r3, [r7, #4]
 8016016:	2200      	movs	r2, #0
 8016018:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801601c:	6878      	ldr	r0, [r7, #4]
 801601e:	f7f2 ff13 	bl	8008e48 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8016022:	687b      	ldr	r3, [r7, #4]
 8016024:	2202      	movs	r2, #2
 8016026:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801602a:	687b      	ldr	r3, [r7, #4]
 801602c:	681a      	ldr	r2, [r3, #0]
 801602e:	687b      	ldr	r3, [r7, #4]
 8016030:	3304      	adds	r3, #4
 8016032:	4619      	mov	r1, r3
 8016034:	4610      	mov	r0, r2
 8016036:	f000 fedb 	bl	8016df0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801603a:	687b      	ldr	r3, [r7, #4]
 801603c:	2201      	movs	r2, #1
 801603e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8016042:	687b      	ldr	r3, [r7, #4]
 8016044:	2201      	movs	r2, #1
 8016046:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 801604a:	687b      	ldr	r3, [r7, #4]
 801604c:	2201      	movs	r2, #1
 801604e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8016052:	687b      	ldr	r3, [r7, #4]
 8016054:	2201      	movs	r2, #1
 8016056:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 801605a:	687b      	ldr	r3, [r7, #4]
 801605c:	2201      	movs	r2, #1
 801605e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8016062:	687b      	ldr	r3, [r7, #4]
 8016064:	2201      	movs	r2, #1
 8016066:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 801606a:	687b      	ldr	r3, [r7, #4]
 801606c:	2201      	movs	r2, #1
 801606e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8016072:	687b      	ldr	r3, [r7, #4]
 8016074:	2201      	movs	r2, #1
 8016076:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801607a:	687b      	ldr	r3, [r7, #4]
 801607c:	2201      	movs	r2, #1
 801607e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8016082:	687b      	ldr	r3, [r7, #4]
 8016084:	2201      	movs	r2, #1
 8016086:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 801608a:	687b      	ldr	r3, [r7, #4]
 801608c:	2201      	movs	r2, #1
 801608e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8016092:	687b      	ldr	r3, [r7, #4]
 8016094:	2201      	movs	r2, #1
 8016096:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 801609a:	2300      	movs	r3, #0
}
 801609c:	4618      	mov	r0, r3
 801609e:	3708      	adds	r7, #8
 80160a0:	46bd      	mov	sp, r7
 80160a2:	bd80      	pop	{r7, pc}

080160a4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80160a4:	b480      	push	{r7}
 80160a6:	b085      	sub	sp, #20
 80160a8:	af00      	add	r7, sp, #0
 80160aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80160ac:	687b      	ldr	r3, [r7, #4]
 80160ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80160b2:	b2db      	uxtb	r3, r3
 80160b4:	2b01      	cmp	r3, #1
 80160b6:	d001      	beq.n	80160bc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80160b8:	2301      	movs	r3, #1
 80160ba:	e056      	b.n	801616a <HAL_TIM_Base_Start+0xc6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80160bc:	687b      	ldr	r3, [r7, #4]
 80160be:	2202      	movs	r2, #2
 80160c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80160c4:	687b      	ldr	r3, [r7, #4]
 80160c6:	681b      	ldr	r3, [r3, #0]
 80160c8:	4a2b      	ldr	r2, [pc, #172]	@ (8016178 <HAL_TIM_Base_Start+0xd4>)
 80160ca:	4293      	cmp	r3, r2
 80160cc:	d02c      	beq.n	8016128 <HAL_TIM_Base_Start+0x84>
 80160ce:	687b      	ldr	r3, [r7, #4]
 80160d0:	681b      	ldr	r3, [r3, #0]
 80160d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80160d6:	d027      	beq.n	8016128 <HAL_TIM_Base_Start+0x84>
 80160d8:	687b      	ldr	r3, [r7, #4]
 80160da:	681b      	ldr	r3, [r3, #0]
 80160dc:	4a27      	ldr	r2, [pc, #156]	@ (801617c <HAL_TIM_Base_Start+0xd8>)
 80160de:	4293      	cmp	r3, r2
 80160e0:	d022      	beq.n	8016128 <HAL_TIM_Base_Start+0x84>
 80160e2:	687b      	ldr	r3, [r7, #4]
 80160e4:	681b      	ldr	r3, [r3, #0]
 80160e6:	4a26      	ldr	r2, [pc, #152]	@ (8016180 <HAL_TIM_Base_Start+0xdc>)
 80160e8:	4293      	cmp	r3, r2
 80160ea:	d01d      	beq.n	8016128 <HAL_TIM_Base_Start+0x84>
 80160ec:	687b      	ldr	r3, [r7, #4]
 80160ee:	681b      	ldr	r3, [r3, #0]
 80160f0:	4a24      	ldr	r2, [pc, #144]	@ (8016184 <HAL_TIM_Base_Start+0xe0>)
 80160f2:	4293      	cmp	r3, r2
 80160f4:	d018      	beq.n	8016128 <HAL_TIM_Base_Start+0x84>
 80160f6:	687b      	ldr	r3, [r7, #4]
 80160f8:	681b      	ldr	r3, [r3, #0]
 80160fa:	4a23      	ldr	r2, [pc, #140]	@ (8016188 <HAL_TIM_Base_Start+0xe4>)
 80160fc:	4293      	cmp	r3, r2
 80160fe:	d013      	beq.n	8016128 <HAL_TIM_Base_Start+0x84>
 8016100:	687b      	ldr	r3, [r7, #4]
 8016102:	681b      	ldr	r3, [r3, #0]
 8016104:	4a21      	ldr	r2, [pc, #132]	@ (801618c <HAL_TIM_Base_Start+0xe8>)
 8016106:	4293      	cmp	r3, r2
 8016108:	d00e      	beq.n	8016128 <HAL_TIM_Base_Start+0x84>
 801610a:	687b      	ldr	r3, [r7, #4]
 801610c:	681b      	ldr	r3, [r3, #0]
 801610e:	4a20      	ldr	r2, [pc, #128]	@ (8016190 <HAL_TIM_Base_Start+0xec>)
 8016110:	4293      	cmp	r3, r2
 8016112:	d009      	beq.n	8016128 <HAL_TIM_Base_Start+0x84>
 8016114:	687b      	ldr	r3, [r7, #4]
 8016116:	681b      	ldr	r3, [r3, #0]
 8016118:	4a1e      	ldr	r2, [pc, #120]	@ (8016194 <HAL_TIM_Base_Start+0xf0>)
 801611a:	4293      	cmp	r3, r2
 801611c:	d004      	beq.n	8016128 <HAL_TIM_Base_Start+0x84>
 801611e:	687b      	ldr	r3, [r7, #4]
 8016120:	681b      	ldr	r3, [r3, #0]
 8016122:	4a1d      	ldr	r2, [pc, #116]	@ (8016198 <HAL_TIM_Base_Start+0xf4>)
 8016124:	4293      	cmp	r3, r2
 8016126:	d115      	bne.n	8016154 <HAL_TIM_Base_Start+0xb0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8016128:	687b      	ldr	r3, [r7, #4]
 801612a:	681b      	ldr	r3, [r3, #0]
 801612c:	689a      	ldr	r2, [r3, #8]
 801612e:	4b1b      	ldr	r3, [pc, #108]	@ (801619c <HAL_TIM_Base_Start+0xf8>)
 8016130:	4013      	ands	r3, r2
 8016132:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8016134:	68fb      	ldr	r3, [r7, #12]
 8016136:	2b06      	cmp	r3, #6
 8016138:	d015      	beq.n	8016166 <HAL_TIM_Base_Start+0xc2>
 801613a:	68fb      	ldr	r3, [r7, #12]
 801613c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8016140:	d011      	beq.n	8016166 <HAL_TIM_Base_Start+0xc2>
    {
      __HAL_TIM_ENABLE(htim);
 8016142:	687b      	ldr	r3, [r7, #4]
 8016144:	681b      	ldr	r3, [r3, #0]
 8016146:	681a      	ldr	r2, [r3, #0]
 8016148:	687b      	ldr	r3, [r7, #4]
 801614a:	681b      	ldr	r3, [r3, #0]
 801614c:	f042 0201 	orr.w	r2, r2, #1
 8016150:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8016152:	e008      	b.n	8016166 <HAL_TIM_Base_Start+0xc2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8016154:	687b      	ldr	r3, [r7, #4]
 8016156:	681b      	ldr	r3, [r3, #0]
 8016158:	681a      	ldr	r2, [r3, #0]
 801615a:	687b      	ldr	r3, [r7, #4]
 801615c:	681b      	ldr	r3, [r3, #0]
 801615e:	f042 0201 	orr.w	r2, r2, #1
 8016162:	601a      	str	r2, [r3, #0]
 8016164:	e000      	b.n	8016168 <HAL_TIM_Base_Start+0xc4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8016166:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8016168:	2300      	movs	r3, #0
}
 801616a:	4618      	mov	r0, r3
 801616c:	3714      	adds	r7, #20
 801616e:	46bd      	mov	sp, r7
 8016170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016174:	4770      	bx	lr
 8016176:	bf00      	nop
 8016178:	40010000 	.word	0x40010000
 801617c:	40000400 	.word	0x40000400
 8016180:	40000800 	.word	0x40000800
 8016184:	40000c00 	.word	0x40000c00
 8016188:	40010400 	.word	0x40010400
 801618c:	40001800 	.word	0x40001800
 8016190:	40014000 	.word	0x40014000
 8016194:	4000e000 	.word	0x4000e000
 8016198:	4000e400 	.word	0x4000e400
 801619c:	00010007 	.word	0x00010007

080161a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80161a0:	b480      	push	{r7}
 80161a2:	b085      	sub	sp, #20
 80161a4:	af00      	add	r7, sp, #0
 80161a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80161a8:	687b      	ldr	r3, [r7, #4]
 80161aa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80161ae:	b2db      	uxtb	r3, r3
 80161b0:	2b01      	cmp	r3, #1
 80161b2:	d001      	beq.n	80161b8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80161b4:	2301      	movs	r3, #1
 80161b6:	e05e      	b.n	8016276 <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80161b8:	687b      	ldr	r3, [r7, #4]
 80161ba:	2202      	movs	r2, #2
 80161bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80161c0:	687b      	ldr	r3, [r7, #4]
 80161c2:	681b      	ldr	r3, [r3, #0]
 80161c4:	68da      	ldr	r2, [r3, #12]
 80161c6:	687b      	ldr	r3, [r7, #4]
 80161c8:	681b      	ldr	r3, [r3, #0]
 80161ca:	f042 0201 	orr.w	r2, r2, #1
 80161ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80161d0:	687b      	ldr	r3, [r7, #4]
 80161d2:	681b      	ldr	r3, [r3, #0]
 80161d4:	4a2b      	ldr	r2, [pc, #172]	@ (8016284 <HAL_TIM_Base_Start_IT+0xe4>)
 80161d6:	4293      	cmp	r3, r2
 80161d8:	d02c      	beq.n	8016234 <HAL_TIM_Base_Start_IT+0x94>
 80161da:	687b      	ldr	r3, [r7, #4]
 80161dc:	681b      	ldr	r3, [r3, #0]
 80161de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80161e2:	d027      	beq.n	8016234 <HAL_TIM_Base_Start_IT+0x94>
 80161e4:	687b      	ldr	r3, [r7, #4]
 80161e6:	681b      	ldr	r3, [r3, #0]
 80161e8:	4a27      	ldr	r2, [pc, #156]	@ (8016288 <HAL_TIM_Base_Start_IT+0xe8>)
 80161ea:	4293      	cmp	r3, r2
 80161ec:	d022      	beq.n	8016234 <HAL_TIM_Base_Start_IT+0x94>
 80161ee:	687b      	ldr	r3, [r7, #4]
 80161f0:	681b      	ldr	r3, [r3, #0]
 80161f2:	4a26      	ldr	r2, [pc, #152]	@ (801628c <HAL_TIM_Base_Start_IT+0xec>)
 80161f4:	4293      	cmp	r3, r2
 80161f6:	d01d      	beq.n	8016234 <HAL_TIM_Base_Start_IT+0x94>
 80161f8:	687b      	ldr	r3, [r7, #4]
 80161fa:	681b      	ldr	r3, [r3, #0]
 80161fc:	4a24      	ldr	r2, [pc, #144]	@ (8016290 <HAL_TIM_Base_Start_IT+0xf0>)
 80161fe:	4293      	cmp	r3, r2
 8016200:	d018      	beq.n	8016234 <HAL_TIM_Base_Start_IT+0x94>
 8016202:	687b      	ldr	r3, [r7, #4]
 8016204:	681b      	ldr	r3, [r3, #0]
 8016206:	4a23      	ldr	r2, [pc, #140]	@ (8016294 <HAL_TIM_Base_Start_IT+0xf4>)
 8016208:	4293      	cmp	r3, r2
 801620a:	d013      	beq.n	8016234 <HAL_TIM_Base_Start_IT+0x94>
 801620c:	687b      	ldr	r3, [r7, #4]
 801620e:	681b      	ldr	r3, [r3, #0]
 8016210:	4a21      	ldr	r2, [pc, #132]	@ (8016298 <HAL_TIM_Base_Start_IT+0xf8>)
 8016212:	4293      	cmp	r3, r2
 8016214:	d00e      	beq.n	8016234 <HAL_TIM_Base_Start_IT+0x94>
 8016216:	687b      	ldr	r3, [r7, #4]
 8016218:	681b      	ldr	r3, [r3, #0]
 801621a:	4a20      	ldr	r2, [pc, #128]	@ (801629c <HAL_TIM_Base_Start_IT+0xfc>)
 801621c:	4293      	cmp	r3, r2
 801621e:	d009      	beq.n	8016234 <HAL_TIM_Base_Start_IT+0x94>
 8016220:	687b      	ldr	r3, [r7, #4]
 8016222:	681b      	ldr	r3, [r3, #0]
 8016224:	4a1e      	ldr	r2, [pc, #120]	@ (80162a0 <HAL_TIM_Base_Start_IT+0x100>)
 8016226:	4293      	cmp	r3, r2
 8016228:	d004      	beq.n	8016234 <HAL_TIM_Base_Start_IT+0x94>
 801622a:	687b      	ldr	r3, [r7, #4]
 801622c:	681b      	ldr	r3, [r3, #0]
 801622e:	4a1d      	ldr	r2, [pc, #116]	@ (80162a4 <HAL_TIM_Base_Start_IT+0x104>)
 8016230:	4293      	cmp	r3, r2
 8016232:	d115      	bne.n	8016260 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8016234:	687b      	ldr	r3, [r7, #4]
 8016236:	681b      	ldr	r3, [r3, #0]
 8016238:	689a      	ldr	r2, [r3, #8]
 801623a:	4b1b      	ldr	r3, [pc, #108]	@ (80162a8 <HAL_TIM_Base_Start_IT+0x108>)
 801623c:	4013      	ands	r3, r2
 801623e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8016240:	68fb      	ldr	r3, [r7, #12]
 8016242:	2b06      	cmp	r3, #6
 8016244:	d015      	beq.n	8016272 <HAL_TIM_Base_Start_IT+0xd2>
 8016246:	68fb      	ldr	r3, [r7, #12]
 8016248:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801624c:	d011      	beq.n	8016272 <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 801624e:	687b      	ldr	r3, [r7, #4]
 8016250:	681b      	ldr	r3, [r3, #0]
 8016252:	681a      	ldr	r2, [r3, #0]
 8016254:	687b      	ldr	r3, [r7, #4]
 8016256:	681b      	ldr	r3, [r3, #0]
 8016258:	f042 0201 	orr.w	r2, r2, #1
 801625c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801625e:	e008      	b.n	8016272 <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8016260:	687b      	ldr	r3, [r7, #4]
 8016262:	681b      	ldr	r3, [r3, #0]
 8016264:	681a      	ldr	r2, [r3, #0]
 8016266:	687b      	ldr	r3, [r7, #4]
 8016268:	681b      	ldr	r3, [r3, #0]
 801626a:	f042 0201 	orr.w	r2, r2, #1
 801626e:	601a      	str	r2, [r3, #0]
 8016270:	e000      	b.n	8016274 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8016272:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8016274:	2300      	movs	r3, #0
}
 8016276:	4618      	mov	r0, r3
 8016278:	3714      	adds	r7, #20
 801627a:	46bd      	mov	sp, r7
 801627c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016280:	4770      	bx	lr
 8016282:	bf00      	nop
 8016284:	40010000 	.word	0x40010000
 8016288:	40000400 	.word	0x40000400
 801628c:	40000800 	.word	0x40000800
 8016290:	40000c00 	.word	0x40000c00
 8016294:	40010400 	.word	0x40010400
 8016298:	40001800 	.word	0x40001800
 801629c:	40014000 	.word	0x40014000
 80162a0:	4000e000 	.word	0x4000e000
 80162a4:	4000e400 	.word	0x4000e400
 80162a8:	00010007 	.word	0x00010007

080162ac <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80162ac:	b580      	push	{r7, lr}
 80162ae:	b082      	sub	sp, #8
 80162b0:	af00      	add	r7, sp, #0
 80162b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80162b4:	687b      	ldr	r3, [r7, #4]
 80162b6:	2b00      	cmp	r3, #0
 80162b8:	d101      	bne.n	80162be <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80162ba:	2301      	movs	r3, #1
 80162bc:	e049      	b.n	8016352 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80162be:	687b      	ldr	r3, [r7, #4]
 80162c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80162c4:	b2db      	uxtb	r3, r3
 80162c6:	2b00      	cmp	r3, #0
 80162c8:	d106      	bne.n	80162d8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80162ca:	687b      	ldr	r3, [r7, #4]
 80162cc:	2200      	movs	r2, #0
 80162ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80162d2:	6878      	ldr	r0, [r7, #4]
 80162d4:	f7f2 fd2e 	bl	8008d34 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80162d8:	687b      	ldr	r3, [r7, #4]
 80162da:	2202      	movs	r2, #2
 80162dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80162e0:	687b      	ldr	r3, [r7, #4]
 80162e2:	681a      	ldr	r2, [r3, #0]
 80162e4:	687b      	ldr	r3, [r7, #4]
 80162e6:	3304      	adds	r3, #4
 80162e8:	4619      	mov	r1, r3
 80162ea:	4610      	mov	r0, r2
 80162ec:	f000 fd80 	bl	8016df0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80162f0:	687b      	ldr	r3, [r7, #4]
 80162f2:	2201      	movs	r2, #1
 80162f4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80162f8:	687b      	ldr	r3, [r7, #4]
 80162fa:	2201      	movs	r2, #1
 80162fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8016300:	687b      	ldr	r3, [r7, #4]
 8016302:	2201      	movs	r2, #1
 8016304:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8016308:	687b      	ldr	r3, [r7, #4]
 801630a:	2201      	movs	r2, #1
 801630c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8016310:	687b      	ldr	r3, [r7, #4]
 8016312:	2201      	movs	r2, #1
 8016314:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8016318:	687b      	ldr	r3, [r7, #4]
 801631a:	2201      	movs	r2, #1
 801631c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8016320:	687b      	ldr	r3, [r7, #4]
 8016322:	2201      	movs	r2, #1
 8016324:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8016328:	687b      	ldr	r3, [r7, #4]
 801632a:	2201      	movs	r2, #1
 801632c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8016330:	687b      	ldr	r3, [r7, #4]
 8016332:	2201      	movs	r2, #1
 8016334:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8016338:	687b      	ldr	r3, [r7, #4]
 801633a:	2201      	movs	r2, #1
 801633c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8016340:	687b      	ldr	r3, [r7, #4]
 8016342:	2201      	movs	r2, #1
 8016344:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8016348:	687b      	ldr	r3, [r7, #4]
 801634a:	2201      	movs	r2, #1
 801634c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8016350:	2300      	movs	r3, #0
}
 8016352:	4618      	mov	r0, r3
 8016354:	3708      	adds	r7, #8
 8016356:	46bd      	mov	sp, r7
 8016358:	bd80      	pop	{r7, pc}
	...

0801635c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801635c:	b580      	push	{r7, lr}
 801635e:	b084      	sub	sp, #16
 8016360:	af00      	add	r7, sp, #0
 8016362:	6078      	str	r0, [r7, #4]
 8016364:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8016366:	683b      	ldr	r3, [r7, #0]
 8016368:	2b00      	cmp	r3, #0
 801636a:	d109      	bne.n	8016380 <HAL_TIM_PWM_Start+0x24>
 801636c:	687b      	ldr	r3, [r7, #4]
 801636e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8016372:	b2db      	uxtb	r3, r3
 8016374:	2b01      	cmp	r3, #1
 8016376:	bf14      	ite	ne
 8016378:	2301      	movne	r3, #1
 801637a:	2300      	moveq	r3, #0
 801637c:	b2db      	uxtb	r3, r3
 801637e:	e03c      	b.n	80163fa <HAL_TIM_PWM_Start+0x9e>
 8016380:	683b      	ldr	r3, [r7, #0]
 8016382:	2b04      	cmp	r3, #4
 8016384:	d109      	bne.n	801639a <HAL_TIM_PWM_Start+0x3e>
 8016386:	687b      	ldr	r3, [r7, #4]
 8016388:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 801638c:	b2db      	uxtb	r3, r3
 801638e:	2b01      	cmp	r3, #1
 8016390:	bf14      	ite	ne
 8016392:	2301      	movne	r3, #1
 8016394:	2300      	moveq	r3, #0
 8016396:	b2db      	uxtb	r3, r3
 8016398:	e02f      	b.n	80163fa <HAL_TIM_PWM_Start+0x9e>
 801639a:	683b      	ldr	r3, [r7, #0]
 801639c:	2b08      	cmp	r3, #8
 801639e:	d109      	bne.n	80163b4 <HAL_TIM_PWM_Start+0x58>
 80163a0:	687b      	ldr	r3, [r7, #4]
 80163a2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80163a6:	b2db      	uxtb	r3, r3
 80163a8:	2b01      	cmp	r3, #1
 80163aa:	bf14      	ite	ne
 80163ac:	2301      	movne	r3, #1
 80163ae:	2300      	moveq	r3, #0
 80163b0:	b2db      	uxtb	r3, r3
 80163b2:	e022      	b.n	80163fa <HAL_TIM_PWM_Start+0x9e>
 80163b4:	683b      	ldr	r3, [r7, #0]
 80163b6:	2b0c      	cmp	r3, #12
 80163b8:	d109      	bne.n	80163ce <HAL_TIM_PWM_Start+0x72>
 80163ba:	687b      	ldr	r3, [r7, #4]
 80163bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80163c0:	b2db      	uxtb	r3, r3
 80163c2:	2b01      	cmp	r3, #1
 80163c4:	bf14      	ite	ne
 80163c6:	2301      	movne	r3, #1
 80163c8:	2300      	moveq	r3, #0
 80163ca:	b2db      	uxtb	r3, r3
 80163cc:	e015      	b.n	80163fa <HAL_TIM_PWM_Start+0x9e>
 80163ce:	683b      	ldr	r3, [r7, #0]
 80163d0:	2b10      	cmp	r3, #16
 80163d2:	d109      	bne.n	80163e8 <HAL_TIM_PWM_Start+0x8c>
 80163d4:	687b      	ldr	r3, [r7, #4]
 80163d6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80163da:	b2db      	uxtb	r3, r3
 80163dc:	2b01      	cmp	r3, #1
 80163de:	bf14      	ite	ne
 80163e0:	2301      	movne	r3, #1
 80163e2:	2300      	moveq	r3, #0
 80163e4:	b2db      	uxtb	r3, r3
 80163e6:	e008      	b.n	80163fa <HAL_TIM_PWM_Start+0x9e>
 80163e8:	687b      	ldr	r3, [r7, #4]
 80163ea:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80163ee:	b2db      	uxtb	r3, r3
 80163f0:	2b01      	cmp	r3, #1
 80163f2:	bf14      	ite	ne
 80163f4:	2301      	movne	r3, #1
 80163f6:	2300      	moveq	r3, #0
 80163f8:	b2db      	uxtb	r3, r3
 80163fa:	2b00      	cmp	r3, #0
 80163fc:	d001      	beq.n	8016402 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80163fe:	2301      	movs	r3, #1
 8016400:	e0ab      	b.n	801655a <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8016402:	683b      	ldr	r3, [r7, #0]
 8016404:	2b00      	cmp	r3, #0
 8016406:	d104      	bne.n	8016412 <HAL_TIM_PWM_Start+0xb6>
 8016408:	687b      	ldr	r3, [r7, #4]
 801640a:	2202      	movs	r2, #2
 801640c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8016410:	e023      	b.n	801645a <HAL_TIM_PWM_Start+0xfe>
 8016412:	683b      	ldr	r3, [r7, #0]
 8016414:	2b04      	cmp	r3, #4
 8016416:	d104      	bne.n	8016422 <HAL_TIM_PWM_Start+0xc6>
 8016418:	687b      	ldr	r3, [r7, #4]
 801641a:	2202      	movs	r2, #2
 801641c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8016420:	e01b      	b.n	801645a <HAL_TIM_PWM_Start+0xfe>
 8016422:	683b      	ldr	r3, [r7, #0]
 8016424:	2b08      	cmp	r3, #8
 8016426:	d104      	bne.n	8016432 <HAL_TIM_PWM_Start+0xd6>
 8016428:	687b      	ldr	r3, [r7, #4]
 801642a:	2202      	movs	r2, #2
 801642c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8016430:	e013      	b.n	801645a <HAL_TIM_PWM_Start+0xfe>
 8016432:	683b      	ldr	r3, [r7, #0]
 8016434:	2b0c      	cmp	r3, #12
 8016436:	d104      	bne.n	8016442 <HAL_TIM_PWM_Start+0xe6>
 8016438:	687b      	ldr	r3, [r7, #4]
 801643a:	2202      	movs	r2, #2
 801643c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8016440:	e00b      	b.n	801645a <HAL_TIM_PWM_Start+0xfe>
 8016442:	683b      	ldr	r3, [r7, #0]
 8016444:	2b10      	cmp	r3, #16
 8016446:	d104      	bne.n	8016452 <HAL_TIM_PWM_Start+0xf6>
 8016448:	687b      	ldr	r3, [r7, #4]
 801644a:	2202      	movs	r2, #2
 801644c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8016450:	e003      	b.n	801645a <HAL_TIM_PWM_Start+0xfe>
 8016452:	687b      	ldr	r3, [r7, #4]
 8016454:	2202      	movs	r2, #2
 8016456:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801645a:	687b      	ldr	r3, [r7, #4]
 801645c:	681b      	ldr	r3, [r3, #0]
 801645e:	2201      	movs	r2, #1
 8016460:	6839      	ldr	r1, [r7, #0]
 8016462:	4618      	mov	r0, r3
 8016464:	f001 fa1a 	bl	801789c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8016468:	687b      	ldr	r3, [r7, #4]
 801646a:	681b      	ldr	r3, [r3, #0]
 801646c:	4a3d      	ldr	r2, [pc, #244]	@ (8016564 <HAL_TIM_PWM_Start+0x208>)
 801646e:	4293      	cmp	r3, r2
 8016470:	d013      	beq.n	801649a <HAL_TIM_PWM_Start+0x13e>
 8016472:	687b      	ldr	r3, [r7, #4]
 8016474:	681b      	ldr	r3, [r3, #0]
 8016476:	4a3c      	ldr	r2, [pc, #240]	@ (8016568 <HAL_TIM_PWM_Start+0x20c>)
 8016478:	4293      	cmp	r3, r2
 801647a:	d00e      	beq.n	801649a <HAL_TIM_PWM_Start+0x13e>
 801647c:	687b      	ldr	r3, [r7, #4]
 801647e:	681b      	ldr	r3, [r3, #0]
 8016480:	4a3a      	ldr	r2, [pc, #232]	@ (801656c <HAL_TIM_PWM_Start+0x210>)
 8016482:	4293      	cmp	r3, r2
 8016484:	d009      	beq.n	801649a <HAL_TIM_PWM_Start+0x13e>
 8016486:	687b      	ldr	r3, [r7, #4]
 8016488:	681b      	ldr	r3, [r3, #0]
 801648a:	4a39      	ldr	r2, [pc, #228]	@ (8016570 <HAL_TIM_PWM_Start+0x214>)
 801648c:	4293      	cmp	r3, r2
 801648e:	d004      	beq.n	801649a <HAL_TIM_PWM_Start+0x13e>
 8016490:	687b      	ldr	r3, [r7, #4]
 8016492:	681b      	ldr	r3, [r3, #0]
 8016494:	4a37      	ldr	r2, [pc, #220]	@ (8016574 <HAL_TIM_PWM_Start+0x218>)
 8016496:	4293      	cmp	r3, r2
 8016498:	d101      	bne.n	801649e <HAL_TIM_PWM_Start+0x142>
 801649a:	2301      	movs	r3, #1
 801649c:	e000      	b.n	80164a0 <HAL_TIM_PWM_Start+0x144>
 801649e:	2300      	movs	r3, #0
 80164a0:	2b00      	cmp	r3, #0
 80164a2:	d007      	beq.n	80164b4 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80164a4:	687b      	ldr	r3, [r7, #4]
 80164a6:	681b      	ldr	r3, [r3, #0]
 80164a8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80164aa:	687b      	ldr	r3, [r7, #4]
 80164ac:	681b      	ldr	r3, [r3, #0]
 80164ae:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80164b2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80164b4:	687b      	ldr	r3, [r7, #4]
 80164b6:	681b      	ldr	r3, [r3, #0]
 80164b8:	4a2a      	ldr	r2, [pc, #168]	@ (8016564 <HAL_TIM_PWM_Start+0x208>)
 80164ba:	4293      	cmp	r3, r2
 80164bc:	d02c      	beq.n	8016518 <HAL_TIM_PWM_Start+0x1bc>
 80164be:	687b      	ldr	r3, [r7, #4]
 80164c0:	681b      	ldr	r3, [r3, #0]
 80164c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80164c6:	d027      	beq.n	8016518 <HAL_TIM_PWM_Start+0x1bc>
 80164c8:	687b      	ldr	r3, [r7, #4]
 80164ca:	681b      	ldr	r3, [r3, #0]
 80164cc:	4a2a      	ldr	r2, [pc, #168]	@ (8016578 <HAL_TIM_PWM_Start+0x21c>)
 80164ce:	4293      	cmp	r3, r2
 80164d0:	d022      	beq.n	8016518 <HAL_TIM_PWM_Start+0x1bc>
 80164d2:	687b      	ldr	r3, [r7, #4]
 80164d4:	681b      	ldr	r3, [r3, #0]
 80164d6:	4a29      	ldr	r2, [pc, #164]	@ (801657c <HAL_TIM_PWM_Start+0x220>)
 80164d8:	4293      	cmp	r3, r2
 80164da:	d01d      	beq.n	8016518 <HAL_TIM_PWM_Start+0x1bc>
 80164dc:	687b      	ldr	r3, [r7, #4]
 80164de:	681b      	ldr	r3, [r3, #0]
 80164e0:	4a27      	ldr	r2, [pc, #156]	@ (8016580 <HAL_TIM_PWM_Start+0x224>)
 80164e2:	4293      	cmp	r3, r2
 80164e4:	d018      	beq.n	8016518 <HAL_TIM_PWM_Start+0x1bc>
 80164e6:	687b      	ldr	r3, [r7, #4]
 80164e8:	681b      	ldr	r3, [r3, #0]
 80164ea:	4a1f      	ldr	r2, [pc, #124]	@ (8016568 <HAL_TIM_PWM_Start+0x20c>)
 80164ec:	4293      	cmp	r3, r2
 80164ee:	d013      	beq.n	8016518 <HAL_TIM_PWM_Start+0x1bc>
 80164f0:	687b      	ldr	r3, [r7, #4]
 80164f2:	681b      	ldr	r3, [r3, #0]
 80164f4:	4a23      	ldr	r2, [pc, #140]	@ (8016584 <HAL_TIM_PWM_Start+0x228>)
 80164f6:	4293      	cmp	r3, r2
 80164f8:	d00e      	beq.n	8016518 <HAL_TIM_PWM_Start+0x1bc>
 80164fa:	687b      	ldr	r3, [r7, #4]
 80164fc:	681b      	ldr	r3, [r3, #0]
 80164fe:	4a1b      	ldr	r2, [pc, #108]	@ (801656c <HAL_TIM_PWM_Start+0x210>)
 8016500:	4293      	cmp	r3, r2
 8016502:	d009      	beq.n	8016518 <HAL_TIM_PWM_Start+0x1bc>
 8016504:	687b      	ldr	r3, [r7, #4]
 8016506:	681b      	ldr	r3, [r3, #0]
 8016508:	4a1f      	ldr	r2, [pc, #124]	@ (8016588 <HAL_TIM_PWM_Start+0x22c>)
 801650a:	4293      	cmp	r3, r2
 801650c:	d004      	beq.n	8016518 <HAL_TIM_PWM_Start+0x1bc>
 801650e:	687b      	ldr	r3, [r7, #4]
 8016510:	681b      	ldr	r3, [r3, #0]
 8016512:	4a1e      	ldr	r2, [pc, #120]	@ (801658c <HAL_TIM_PWM_Start+0x230>)
 8016514:	4293      	cmp	r3, r2
 8016516:	d115      	bne.n	8016544 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8016518:	687b      	ldr	r3, [r7, #4]
 801651a:	681b      	ldr	r3, [r3, #0]
 801651c:	689a      	ldr	r2, [r3, #8]
 801651e:	4b1c      	ldr	r3, [pc, #112]	@ (8016590 <HAL_TIM_PWM_Start+0x234>)
 8016520:	4013      	ands	r3, r2
 8016522:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8016524:	68fb      	ldr	r3, [r7, #12]
 8016526:	2b06      	cmp	r3, #6
 8016528:	d015      	beq.n	8016556 <HAL_TIM_PWM_Start+0x1fa>
 801652a:	68fb      	ldr	r3, [r7, #12]
 801652c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8016530:	d011      	beq.n	8016556 <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 8016532:	687b      	ldr	r3, [r7, #4]
 8016534:	681b      	ldr	r3, [r3, #0]
 8016536:	681a      	ldr	r2, [r3, #0]
 8016538:	687b      	ldr	r3, [r7, #4]
 801653a:	681b      	ldr	r3, [r3, #0]
 801653c:	f042 0201 	orr.w	r2, r2, #1
 8016540:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8016542:	e008      	b.n	8016556 <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8016544:	687b      	ldr	r3, [r7, #4]
 8016546:	681b      	ldr	r3, [r3, #0]
 8016548:	681a      	ldr	r2, [r3, #0]
 801654a:	687b      	ldr	r3, [r7, #4]
 801654c:	681b      	ldr	r3, [r3, #0]
 801654e:	f042 0201 	orr.w	r2, r2, #1
 8016552:	601a      	str	r2, [r3, #0]
 8016554:	e000      	b.n	8016558 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8016556:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8016558:	2300      	movs	r3, #0
}
 801655a:	4618      	mov	r0, r3
 801655c:	3710      	adds	r7, #16
 801655e:	46bd      	mov	sp, r7
 8016560:	bd80      	pop	{r7, pc}
 8016562:	bf00      	nop
 8016564:	40010000 	.word	0x40010000
 8016568:	40010400 	.word	0x40010400
 801656c:	40014000 	.word	0x40014000
 8016570:	40014400 	.word	0x40014400
 8016574:	40014800 	.word	0x40014800
 8016578:	40000400 	.word	0x40000400
 801657c:	40000800 	.word	0x40000800
 8016580:	40000c00 	.word	0x40000c00
 8016584:	40001800 	.word	0x40001800
 8016588:	4000e000 	.word	0x4000e000
 801658c:	4000e400 	.word	0x4000e400
 8016590:	00010007 	.word	0x00010007

08016594 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8016594:	b580      	push	{r7, lr}
 8016596:	b082      	sub	sp, #8
 8016598:	af00      	add	r7, sp, #0
 801659a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801659c:	687b      	ldr	r3, [r7, #4]
 801659e:	2b00      	cmp	r3, #0
 80165a0:	d101      	bne.n	80165a6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80165a2:	2301      	movs	r3, #1
 80165a4:	e049      	b.n	801663a <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80165a6:	687b      	ldr	r3, [r7, #4]
 80165a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80165ac:	b2db      	uxtb	r3, r3
 80165ae:	2b00      	cmp	r3, #0
 80165b0:	d106      	bne.n	80165c0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80165b2:	687b      	ldr	r3, [r7, #4]
 80165b4:	2200      	movs	r2, #0
 80165b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80165ba:	6878      	ldr	r0, [r7, #4]
 80165bc:	f7f2 fbf4 	bl	8008da8 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80165c0:	687b      	ldr	r3, [r7, #4]
 80165c2:	2202      	movs	r2, #2
 80165c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80165c8:	687b      	ldr	r3, [r7, #4]
 80165ca:	681a      	ldr	r2, [r3, #0]
 80165cc:	687b      	ldr	r3, [r7, #4]
 80165ce:	3304      	adds	r3, #4
 80165d0:	4619      	mov	r1, r3
 80165d2:	4610      	mov	r0, r2
 80165d4:	f000 fc0c 	bl	8016df0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80165d8:	687b      	ldr	r3, [r7, #4]
 80165da:	2201      	movs	r2, #1
 80165dc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80165e0:	687b      	ldr	r3, [r7, #4]
 80165e2:	2201      	movs	r2, #1
 80165e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80165e8:	687b      	ldr	r3, [r7, #4]
 80165ea:	2201      	movs	r2, #1
 80165ec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80165f0:	687b      	ldr	r3, [r7, #4]
 80165f2:	2201      	movs	r2, #1
 80165f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80165f8:	687b      	ldr	r3, [r7, #4]
 80165fa:	2201      	movs	r2, #1
 80165fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8016600:	687b      	ldr	r3, [r7, #4]
 8016602:	2201      	movs	r2, #1
 8016604:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8016608:	687b      	ldr	r3, [r7, #4]
 801660a:	2201      	movs	r2, #1
 801660c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8016610:	687b      	ldr	r3, [r7, #4]
 8016612:	2201      	movs	r2, #1
 8016614:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8016618:	687b      	ldr	r3, [r7, #4]
 801661a:	2201      	movs	r2, #1
 801661c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8016620:	687b      	ldr	r3, [r7, #4]
 8016622:	2201      	movs	r2, #1
 8016624:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8016628:	687b      	ldr	r3, [r7, #4]
 801662a:	2201      	movs	r2, #1
 801662c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8016630:	687b      	ldr	r3, [r7, #4]
 8016632:	2201      	movs	r2, #1
 8016634:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8016638:	2300      	movs	r3, #0
}
 801663a:	4618      	mov	r0, r3
 801663c:	3708      	adds	r7, #8
 801663e:	46bd      	mov	sp, r7
 8016640:	bd80      	pop	{r7, pc}

08016642 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8016642:	b580      	push	{r7, lr}
 8016644:	b084      	sub	sp, #16
 8016646:	af00      	add	r7, sp, #0
 8016648:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 801664a:	687b      	ldr	r3, [r7, #4]
 801664c:	681b      	ldr	r3, [r3, #0]
 801664e:	68db      	ldr	r3, [r3, #12]
 8016650:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8016652:	687b      	ldr	r3, [r7, #4]
 8016654:	681b      	ldr	r3, [r3, #0]
 8016656:	691b      	ldr	r3, [r3, #16]
 8016658:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 801665a:	68bb      	ldr	r3, [r7, #8]
 801665c:	f003 0302 	and.w	r3, r3, #2
 8016660:	2b00      	cmp	r3, #0
 8016662:	d020      	beq.n	80166a6 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8016664:	68fb      	ldr	r3, [r7, #12]
 8016666:	f003 0302 	and.w	r3, r3, #2
 801666a:	2b00      	cmp	r3, #0
 801666c:	d01b      	beq.n	80166a6 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 801666e:	687b      	ldr	r3, [r7, #4]
 8016670:	681b      	ldr	r3, [r3, #0]
 8016672:	f06f 0202 	mvn.w	r2, #2
 8016676:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8016678:	687b      	ldr	r3, [r7, #4]
 801667a:	2201      	movs	r2, #1
 801667c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 801667e:	687b      	ldr	r3, [r7, #4]
 8016680:	681b      	ldr	r3, [r3, #0]
 8016682:	699b      	ldr	r3, [r3, #24]
 8016684:	f003 0303 	and.w	r3, r3, #3
 8016688:	2b00      	cmp	r3, #0
 801668a:	d003      	beq.n	8016694 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 801668c:	6878      	ldr	r0, [r7, #4]
 801668e:	f000 fb91 	bl	8016db4 <HAL_TIM_IC_CaptureCallback>
 8016692:	e005      	b.n	80166a0 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8016694:	6878      	ldr	r0, [r7, #4]
 8016696:	f000 fb83 	bl	8016da0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 801669a:	6878      	ldr	r0, [r7, #4]
 801669c:	f000 fb94 	bl	8016dc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80166a0:	687b      	ldr	r3, [r7, #4]
 80166a2:	2200      	movs	r2, #0
 80166a4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80166a6:	68bb      	ldr	r3, [r7, #8]
 80166a8:	f003 0304 	and.w	r3, r3, #4
 80166ac:	2b00      	cmp	r3, #0
 80166ae:	d020      	beq.n	80166f2 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80166b0:	68fb      	ldr	r3, [r7, #12]
 80166b2:	f003 0304 	and.w	r3, r3, #4
 80166b6:	2b00      	cmp	r3, #0
 80166b8:	d01b      	beq.n	80166f2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80166ba:	687b      	ldr	r3, [r7, #4]
 80166bc:	681b      	ldr	r3, [r3, #0]
 80166be:	f06f 0204 	mvn.w	r2, #4
 80166c2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80166c4:	687b      	ldr	r3, [r7, #4]
 80166c6:	2202      	movs	r2, #2
 80166c8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80166ca:	687b      	ldr	r3, [r7, #4]
 80166cc:	681b      	ldr	r3, [r3, #0]
 80166ce:	699b      	ldr	r3, [r3, #24]
 80166d0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80166d4:	2b00      	cmp	r3, #0
 80166d6:	d003      	beq.n	80166e0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80166d8:	6878      	ldr	r0, [r7, #4]
 80166da:	f000 fb6b 	bl	8016db4 <HAL_TIM_IC_CaptureCallback>
 80166de:	e005      	b.n	80166ec <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80166e0:	6878      	ldr	r0, [r7, #4]
 80166e2:	f000 fb5d 	bl	8016da0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80166e6:	6878      	ldr	r0, [r7, #4]
 80166e8:	f000 fb6e 	bl	8016dc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80166ec:	687b      	ldr	r3, [r7, #4]
 80166ee:	2200      	movs	r2, #0
 80166f0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80166f2:	68bb      	ldr	r3, [r7, #8]
 80166f4:	f003 0308 	and.w	r3, r3, #8
 80166f8:	2b00      	cmp	r3, #0
 80166fa:	d020      	beq.n	801673e <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80166fc:	68fb      	ldr	r3, [r7, #12]
 80166fe:	f003 0308 	and.w	r3, r3, #8
 8016702:	2b00      	cmp	r3, #0
 8016704:	d01b      	beq.n	801673e <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8016706:	687b      	ldr	r3, [r7, #4]
 8016708:	681b      	ldr	r3, [r3, #0]
 801670a:	f06f 0208 	mvn.w	r2, #8
 801670e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8016710:	687b      	ldr	r3, [r7, #4]
 8016712:	2204      	movs	r2, #4
 8016714:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8016716:	687b      	ldr	r3, [r7, #4]
 8016718:	681b      	ldr	r3, [r3, #0]
 801671a:	69db      	ldr	r3, [r3, #28]
 801671c:	f003 0303 	and.w	r3, r3, #3
 8016720:	2b00      	cmp	r3, #0
 8016722:	d003      	beq.n	801672c <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8016724:	6878      	ldr	r0, [r7, #4]
 8016726:	f000 fb45 	bl	8016db4 <HAL_TIM_IC_CaptureCallback>
 801672a:	e005      	b.n	8016738 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801672c:	6878      	ldr	r0, [r7, #4]
 801672e:	f000 fb37 	bl	8016da0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8016732:	6878      	ldr	r0, [r7, #4]
 8016734:	f000 fb48 	bl	8016dc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8016738:	687b      	ldr	r3, [r7, #4]
 801673a:	2200      	movs	r2, #0
 801673c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 801673e:	68bb      	ldr	r3, [r7, #8]
 8016740:	f003 0310 	and.w	r3, r3, #16
 8016744:	2b00      	cmp	r3, #0
 8016746:	d020      	beq.n	801678a <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8016748:	68fb      	ldr	r3, [r7, #12]
 801674a:	f003 0310 	and.w	r3, r3, #16
 801674e:	2b00      	cmp	r3, #0
 8016750:	d01b      	beq.n	801678a <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8016752:	687b      	ldr	r3, [r7, #4]
 8016754:	681b      	ldr	r3, [r3, #0]
 8016756:	f06f 0210 	mvn.w	r2, #16
 801675a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801675c:	687b      	ldr	r3, [r7, #4]
 801675e:	2208      	movs	r2, #8
 8016760:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8016762:	687b      	ldr	r3, [r7, #4]
 8016764:	681b      	ldr	r3, [r3, #0]
 8016766:	69db      	ldr	r3, [r3, #28]
 8016768:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 801676c:	2b00      	cmp	r3, #0
 801676e:	d003      	beq.n	8016778 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8016770:	6878      	ldr	r0, [r7, #4]
 8016772:	f000 fb1f 	bl	8016db4 <HAL_TIM_IC_CaptureCallback>
 8016776:	e005      	b.n	8016784 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8016778:	6878      	ldr	r0, [r7, #4]
 801677a:	f000 fb11 	bl	8016da0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801677e:	6878      	ldr	r0, [r7, #4]
 8016780:	f000 fb22 	bl	8016dc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8016784:	687b      	ldr	r3, [r7, #4]
 8016786:	2200      	movs	r2, #0
 8016788:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 801678a:	68bb      	ldr	r3, [r7, #8]
 801678c:	f003 0301 	and.w	r3, r3, #1
 8016790:	2b00      	cmp	r3, #0
 8016792:	d00c      	beq.n	80167ae <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8016794:	68fb      	ldr	r3, [r7, #12]
 8016796:	f003 0301 	and.w	r3, r3, #1
 801679a:	2b00      	cmp	r3, #0
 801679c:	d007      	beq.n	80167ae <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 801679e:	687b      	ldr	r3, [r7, #4]
 80167a0:	681b      	ldr	r3, [r3, #0]
 80167a2:	f06f 0201 	mvn.w	r2, #1
 80167a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80167a8:	6878      	ldr	r0, [r7, #4]
 80167aa:	f7ef fae7 	bl	8005d7c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80167ae:	68bb      	ldr	r3, [r7, #8]
 80167b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80167b4:	2b00      	cmp	r3, #0
 80167b6:	d104      	bne.n	80167c2 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80167b8:	68bb      	ldr	r3, [r7, #8]
 80167ba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80167be:	2b00      	cmp	r3, #0
 80167c0:	d00c      	beq.n	80167dc <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80167c2:	68fb      	ldr	r3, [r7, #12]
 80167c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80167c8:	2b00      	cmp	r3, #0
 80167ca:	d007      	beq.n	80167dc <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80167cc:	687b      	ldr	r3, [r7, #4]
 80167ce:	681b      	ldr	r3, [r3, #0]
 80167d0:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80167d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80167d6:	6878      	ldr	r0, [r7, #4]
 80167d8:	f001 f9b8 	bl	8017b4c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80167dc:	68bb      	ldr	r3, [r7, #8]
 80167de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80167e2:	2b00      	cmp	r3, #0
 80167e4:	d00c      	beq.n	8016800 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80167e6:	68fb      	ldr	r3, [r7, #12]
 80167e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80167ec:	2b00      	cmp	r3, #0
 80167ee:	d007      	beq.n	8016800 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80167f0:	687b      	ldr	r3, [r7, #4]
 80167f2:	681b      	ldr	r3, [r3, #0]
 80167f4:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80167f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80167fa:	6878      	ldr	r0, [r7, #4]
 80167fc:	f001 f9b0 	bl	8017b60 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8016800:	68bb      	ldr	r3, [r7, #8]
 8016802:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8016806:	2b00      	cmp	r3, #0
 8016808:	d00c      	beq.n	8016824 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 801680a:	68fb      	ldr	r3, [r7, #12]
 801680c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8016810:	2b00      	cmp	r3, #0
 8016812:	d007      	beq.n	8016824 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8016814:	687b      	ldr	r3, [r7, #4]
 8016816:	681b      	ldr	r3, [r3, #0]
 8016818:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 801681c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 801681e:	6878      	ldr	r0, [r7, #4]
 8016820:	f000 fadc 	bl	8016ddc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8016824:	68bb      	ldr	r3, [r7, #8]
 8016826:	f003 0320 	and.w	r3, r3, #32
 801682a:	2b00      	cmp	r3, #0
 801682c:	d00c      	beq.n	8016848 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 801682e:	68fb      	ldr	r3, [r7, #12]
 8016830:	f003 0320 	and.w	r3, r3, #32
 8016834:	2b00      	cmp	r3, #0
 8016836:	d007      	beq.n	8016848 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8016838:	687b      	ldr	r3, [r7, #4]
 801683a:	681b      	ldr	r3, [r3, #0]
 801683c:	f06f 0220 	mvn.w	r2, #32
 8016840:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8016842:	6878      	ldr	r0, [r7, #4]
 8016844:	f001 f978 	bl	8017b38 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8016848:	bf00      	nop
 801684a:	3710      	adds	r7, #16
 801684c:	46bd      	mov	sp, r7
 801684e:	bd80      	pop	{r7, pc}

08016850 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8016850:	b580      	push	{r7, lr}
 8016852:	b086      	sub	sp, #24
 8016854:	af00      	add	r7, sp, #0
 8016856:	60f8      	str	r0, [r7, #12]
 8016858:	60b9      	str	r1, [r7, #8]
 801685a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801685c:	2300      	movs	r3, #0
 801685e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8016860:	68fb      	ldr	r3, [r7, #12]
 8016862:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8016866:	2b01      	cmp	r3, #1
 8016868:	d101      	bne.n	801686e <HAL_TIM_IC_ConfigChannel+0x1e>
 801686a:	2302      	movs	r3, #2
 801686c:	e088      	b.n	8016980 <HAL_TIM_IC_ConfigChannel+0x130>
 801686e:	68fb      	ldr	r3, [r7, #12]
 8016870:	2201      	movs	r2, #1
 8016872:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8016876:	687b      	ldr	r3, [r7, #4]
 8016878:	2b00      	cmp	r3, #0
 801687a:	d11b      	bne.n	80168b4 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 801687c:	68fb      	ldr	r3, [r7, #12]
 801687e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8016880:	68bb      	ldr	r3, [r7, #8]
 8016882:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8016884:	68bb      	ldr	r3, [r7, #8]
 8016886:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8016888:	68bb      	ldr	r3, [r7, #8]
 801688a:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 801688c:	f000 fe32 	bl	80174f4 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8016890:	68fb      	ldr	r3, [r7, #12]
 8016892:	681b      	ldr	r3, [r3, #0]
 8016894:	699a      	ldr	r2, [r3, #24]
 8016896:	68fb      	ldr	r3, [r7, #12]
 8016898:	681b      	ldr	r3, [r3, #0]
 801689a:	f022 020c 	bic.w	r2, r2, #12
 801689e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80168a0:	68fb      	ldr	r3, [r7, #12]
 80168a2:	681b      	ldr	r3, [r3, #0]
 80168a4:	6999      	ldr	r1, [r3, #24]
 80168a6:	68bb      	ldr	r3, [r7, #8]
 80168a8:	689a      	ldr	r2, [r3, #8]
 80168aa:	68fb      	ldr	r3, [r7, #12]
 80168ac:	681b      	ldr	r3, [r3, #0]
 80168ae:	430a      	orrs	r2, r1
 80168b0:	619a      	str	r2, [r3, #24]
 80168b2:	e060      	b.n	8016976 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80168b4:	687b      	ldr	r3, [r7, #4]
 80168b6:	2b04      	cmp	r3, #4
 80168b8:	d11c      	bne.n	80168f4 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80168ba:	68fb      	ldr	r3, [r7, #12]
 80168bc:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80168be:	68bb      	ldr	r3, [r7, #8]
 80168c0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80168c2:	68bb      	ldr	r3, [r7, #8]
 80168c4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80168c6:	68bb      	ldr	r3, [r7, #8]
 80168c8:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80168ca:	f000 fec2 	bl	8017652 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80168ce:	68fb      	ldr	r3, [r7, #12]
 80168d0:	681b      	ldr	r3, [r3, #0]
 80168d2:	699a      	ldr	r2, [r3, #24]
 80168d4:	68fb      	ldr	r3, [r7, #12]
 80168d6:	681b      	ldr	r3, [r3, #0]
 80168d8:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80168dc:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80168de:	68fb      	ldr	r3, [r7, #12]
 80168e0:	681b      	ldr	r3, [r3, #0]
 80168e2:	6999      	ldr	r1, [r3, #24]
 80168e4:	68bb      	ldr	r3, [r7, #8]
 80168e6:	689b      	ldr	r3, [r3, #8]
 80168e8:	021a      	lsls	r2, r3, #8
 80168ea:	68fb      	ldr	r3, [r7, #12]
 80168ec:	681b      	ldr	r3, [r3, #0]
 80168ee:	430a      	orrs	r2, r1
 80168f0:	619a      	str	r2, [r3, #24]
 80168f2:	e040      	b.n	8016976 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80168f4:	687b      	ldr	r3, [r7, #4]
 80168f6:	2b08      	cmp	r3, #8
 80168f8:	d11b      	bne.n	8016932 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80168fa:	68fb      	ldr	r3, [r7, #12]
 80168fc:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80168fe:	68bb      	ldr	r3, [r7, #8]
 8016900:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8016902:	68bb      	ldr	r3, [r7, #8]
 8016904:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8016906:	68bb      	ldr	r3, [r7, #8]
 8016908:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 801690a:	f000 ff0f 	bl	801772c <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 801690e:	68fb      	ldr	r3, [r7, #12]
 8016910:	681b      	ldr	r3, [r3, #0]
 8016912:	69da      	ldr	r2, [r3, #28]
 8016914:	68fb      	ldr	r3, [r7, #12]
 8016916:	681b      	ldr	r3, [r3, #0]
 8016918:	f022 020c 	bic.w	r2, r2, #12
 801691c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 801691e:	68fb      	ldr	r3, [r7, #12]
 8016920:	681b      	ldr	r3, [r3, #0]
 8016922:	69d9      	ldr	r1, [r3, #28]
 8016924:	68bb      	ldr	r3, [r7, #8]
 8016926:	689a      	ldr	r2, [r3, #8]
 8016928:	68fb      	ldr	r3, [r7, #12]
 801692a:	681b      	ldr	r3, [r3, #0]
 801692c:	430a      	orrs	r2, r1
 801692e:	61da      	str	r2, [r3, #28]
 8016930:	e021      	b.n	8016976 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8016932:	687b      	ldr	r3, [r7, #4]
 8016934:	2b0c      	cmp	r3, #12
 8016936:	d11c      	bne.n	8016972 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8016938:	68fb      	ldr	r3, [r7, #12]
 801693a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 801693c:	68bb      	ldr	r3, [r7, #8]
 801693e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8016940:	68bb      	ldr	r3, [r7, #8]
 8016942:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8016944:	68bb      	ldr	r3, [r7, #8]
 8016946:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8016948:	f000 ff2c 	bl	80177a4 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 801694c:	68fb      	ldr	r3, [r7, #12]
 801694e:	681b      	ldr	r3, [r3, #0]
 8016950:	69da      	ldr	r2, [r3, #28]
 8016952:	68fb      	ldr	r3, [r7, #12]
 8016954:	681b      	ldr	r3, [r3, #0]
 8016956:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 801695a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 801695c:	68fb      	ldr	r3, [r7, #12]
 801695e:	681b      	ldr	r3, [r3, #0]
 8016960:	69d9      	ldr	r1, [r3, #28]
 8016962:	68bb      	ldr	r3, [r7, #8]
 8016964:	689b      	ldr	r3, [r3, #8]
 8016966:	021a      	lsls	r2, r3, #8
 8016968:	68fb      	ldr	r3, [r7, #12]
 801696a:	681b      	ldr	r3, [r3, #0]
 801696c:	430a      	orrs	r2, r1
 801696e:	61da      	str	r2, [r3, #28]
 8016970:	e001      	b.n	8016976 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8016972:	2301      	movs	r3, #1
 8016974:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8016976:	68fb      	ldr	r3, [r7, #12]
 8016978:	2200      	movs	r2, #0
 801697a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 801697e:	7dfb      	ldrb	r3, [r7, #23]
}
 8016980:	4618      	mov	r0, r3
 8016982:	3718      	adds	r7, #24
 8016984:	46bd      	mov	sp, r7
 8016986:	bd80      	pop	{r7, pc}

08016988 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8016988:	b580      	push	{r7, lr}
 801698a:	b086      	sub	sp, #24
 801698c:	af00      	add	r7, sp, #0
 801698e:	60f8      	str	r0, [r7, #12]
 8016990:	60b9      	str	r1, [r7, #8]
 8016992:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8016994:	2300      	movs	r3, #0
 8016996:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8016998:	68fb      	ldr	r3, [r7, #12]
 801699a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 801699e:	2b01      	cmp	r3, #1
 80169a0:	d101      	bne.n	80169a6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80169a2:	2302      	movs	r3, #2
 80169a4:	e0ff      	b.n	8016ba6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80169a6:	68fb      	ldr	r3, [r7, #12]
 80169a8:	2201      	movs	r2, #1
 80169aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80169ae:	687b      	ldr	r3, [r7, #4]
 80169b0:	2b14      	cmp	r3, #20
 80169b2:	f200 80f0 	bhi.w	8016b96 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80169b6:	a201      	add	r2, pc, #4	@ (adr r2, 80169bc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80169b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80169bc:	08016a11 	.word	0x08016a11
 80169c0:	08016b97 	.word	0x08016b97
 80169c4:	08016b97 	.word	0x08016b97
 80169c8:	08016b97 	.word	0x08016b97
 80169cc:	08016a51 	.word	0x08016a51
 80169d0:	08016b97 	.word	0x08016b97
 80169d4:	08016b97 	.word	0x08016b97
 80169d8:	08016b97 	.word	0x08016b97
 80169dc:	08016a93 	.word	0x08016a93
 80169e0:	08016b97 	.word	0x08016b97
 80169e4:	08016b97 	.word	0x08016b97
 80169e8:	08016b97 	.word	0x08016b97
 80169ec:	08016ad3 	.word	0x08016ad3
 80169f0:	08016b97 	.word	0x08016b97
 80169f4:	08016b97 	.word	0x08016b97
 80169f8:	08016b97 	.word	0x08016b97
 80169fc:	08016b15 	.word	0x08016b15
 8016a00:	08016b97 	.word	0x08016b97
 8016a04:	08016b97 	.word	0x08016b97
 8016a08:	08016b97 	.word	0x08016b97
 8016a0c:	08016b55 	.word	0x08016b55
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8016a10:	68fb      	ldr	r3, [r7, #12]
 8016a12:	681b      	ldr	r3, [r3, #0]
 8016a14:	68b9      	ldr	r1, [r7, #8]
 8016a16:	4618      	mov	r0, r3
 8016a18:	f000 fa96 	bl	8016f48 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8016a1c:	68fb      	ldr	r3, [r7, #12]
 8016a1e:	681b      	ldr	r3, [r3, #0]
 8016a20:	699a      	ldr	r2, [r3, #24]
 8016a22:	68fb      	ldr	r3, [r7, #12]
 8016a24:	681b      	ldr	r3, [r3, #0]
 8016a26:	f042 0208 	orr.w	r2, r2, #8
 8016a2a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8016a2c:	68fb      	ldr	r3, [r7, #12]
 8016a2e:	681b      	ldr	r3, [r3, #0]
 8016a30:	699a      	ldr	r2, [r3, #24]
 8016a32:	68fb      	ldr	r3, [r7, #12]
 8016a34:	681b      	ldr	r3, [r3, #0]
 8016a36:	f022 0204 	bic.w	r2, r2, #4
 8016a3a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8016a3c:	68fb      	ldr	r3, [r7, #12]
 8016a3e:	681b      	ldr	r3, [r3, #0]
 8016a40:	6999      	ldr	r1, [r3, #24]
 8016a42:	68bb      	ldr	r3, [r7, #8]
 8016a44:	691a      	ldr	r2, [r3, #16]
 8016a46:	68fb      	ldr	r3, [r7, #12]
 8016a48:	681b      	ldr	r3, [r3, #0]
 8016a4a:	430a      	orrs	r2, r1
 8016a4c:	619a      	str	r2, [r3, #24]
      break;
 8016a4e:	e0a5      	b.n	8016b9c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8016a50:	68fb      	ldr	r3, [r7, #12]
 8016a52:	681b      	ldr	r3, [r3, #0]
 8016a54:	68b9      	ldr	r1, [r7, #8]
 8016a56:	4618      	mov	r0, r3
 8016a58:	f000 fb06 	bl	8017068 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8016a5c:	68fb      	ldr	r3, [r7, #12]
 8016a5e:	681b      	ldr	r3, [r3, #0]
 8016a60:	699a      	ldr	r2, [r3, #24]
 8016a62:	68fb      	ldr	r3, [r7, #12]
 8016a64:	681b      	ldr	r3, [r3, #0]
 8016a66:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8016a6a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8016a6c:	68fb      	ldr	r3, [r7, #12]
 8016a6e:	681b      	ldr	r3, [r3, #0]
 8016a70:	699a      	ldr	r2, [r3, #24]
 8016a72:	68fb      	ldr	r3, [r7, #12]
 8016a74:	681b      	ldr	r3, [r3, #0]
 8016a76:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8016a7a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8016a7c:	68fb      	ldr	r3, [r7, #12]
 8016a7e:	681b      	ldr	r3, [r3, #0]
 8016a80:	6999      	ldr	r1, [r3, #24]
 8016a82:	68bb      	ldr	r3, [r7, #8]
 8016a84:	691b      	ldr	r3, [r3, #16]
 8016a86:	021a      	lsls	r2, r3, #8
 8016a88:	68fb      	ldr	r3, [r7, #12]
 8016a8a:	681b      	ldr	r3, [r3, #0]
 8016a8c:	430a      	orrs	r2, r1
 8016a8e:	619a      	str	r2, [r3, #24]
      break;
 8016a90:	e084      	b.n	8016b9c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8016a92:	68fb      	ldr	r3, [r7, #12]
 8016a94:	681b      	ldr	r3, [r3, #0]
 8016a96:	68b9      	ldr	r1, [r7, #8]
 8016a98:	4618      	mov	r0, r3
 8016a9a:	f000 fb6f 	bl	801717c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8016a9e:	68fb      	ldr	r3, [r7, #12]
 8016aa0:	681b      	ldr	r3, [r3, #0]
 8016aa2:	69da      	ldr	r2, [r3, #28]
 8016aa4:	68fb      	ldr	r3, [r7, #12]
 8016aa6:	681b      	ldr	r3, [r3, #0]
 8016aa8:	f042 0208 	orr.w	r2, r2, #8
 8016aac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8016aae:	68fb      	ldr	r3, [r7, #12]
 8016ab0:	681b      	ldr	r3, [r3, #0]
 8016ab2:	69da      	ldr	r2, [r3, #28]
 8016ab4:	68fb      	ldr	r3, [r7, #12]
 8016ab6:	681b      	ldr	r3, [r3, #0]
 8016ab8:	f022 0204 	bic.w	r2, r2, #4
 8016abc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8016abe:	68fb      	ldr	r3, [r7, #12]
 8016ac0:	681b      	ldr	r3, [r3, #0]
 8016ac2:	69d9      	ldr	r1, [r3, #28]
 8016ac4:	68bb      	ldr	r3, [r7, #8]
 8016ac6:	691a      	ldr	r2, [r3, #16]
 8016ac8:	68fb      	ldr	r3, [r7, #12]
 8016aca:	681b      	ldr	r3, [r3, #0]
 8016acc:	430a      	orrs	r2, r1
 8016ace:	61da      	str	r2, [r3, #28]
      break;
 8016ad0:	e064      	b.n	8016b9c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8016ad2:	68fb      	ldr	r3, [r7, #12]
 8016ad4:	681b      	ldr	r3, [r3, #0]
 8016ad6:	68b9      	ldr	r1, [r7, #8]
 8016ad8:	4618      	mov	r0, r3
 8016ada:	f000 fbd7 	bl	801728c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8016ade:	68fb      	ldr	r3, [r7, #12]
 8016ae0:	681b      	ldr	r3, [r3, #0]
 8016ae2:	69da      	ldr	r2, [r3, #28]
 8016ae4:	68fb      	ldr	r3, [r7, #12]
 8016ae6:	681b      	ldr	r3, [r3, #0]
 8016ae8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8016aec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8016aee:	68fb      	ldr	r3, [r7, #12]
 8016af0:	681b      	ldr	r3, [r3, #0]
 8016af2:	69da      	ldr	r2, [r3, #28]
 8016af4:	68fb      	ldr	r3, [r7, #12]
 8016af6:	681b      	ldr	r3, [r3, #0]
 8016af8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8016afc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8016afe:	68fb      	ldr	r3, [r7, #12]
 8016b00:	681b      	ldr	r3, [r3, #0]
 8016b02:	69d9      	ldr	r1, [r3, #28]
 8016b04:	68bb      	ldr	r3, [r7, #8]
 8016b06:	691b      	ldr	r3, [r3, #16]
 8016b08:	021a      	lsls	r2, r3, #8
 8016b0a:	68fb      	ldr	r3, [r7, #12]
 8016b0c:	681b      	ldr	r3, [r3, #0]
 8016b0e:	430a      	orrs	r2, r1
 8016b10:	61da      	str	r2, [r3, #28]
      break;
 8016b12:	e043      	b.n	8016b9c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8016b14:	68fb      	ldr	r3, [r7, #12]
 8016b16:	681b      	ldr	r3, [r3, #0]
 8016b18:	68b9      	ldr	r1, [r7, #8]
 8016b1a:	4618      	mov	r0, r3
 8016b1c:	f000 fc20 	bl	8017360 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8016b20:	68fb      	ldr	r3, [r7, #12]
 8016b22:	681b      	ldr	r3, [r3, #0]
 8016b24:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8016b26:	68fb      	ldr	r3, [r7, #12]
 8016b28:	681b      	ldr	r3, [r3, #0]
 8016b2a:	f042 0208 	orr.w	r2, r2, #8
 8016b2e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8016b30:	68fb      	ldr	r3, [r7, #12]
 8016b32:	681b      	ldr	r3, [r3, #0]
 8016b34:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8016b36:	68fb      	ldr	r3, [r7, #12]
 8016b38:	681b      	ldr	r3, [r3, #0]
 8016b3a:	f022 0204 	bic.w	r2, r2, #4
 8016b3e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8016b40:	68fb      	ldr	r3, [r7, #12]
 8016b42:	681b      	ldr	r3, [r3, #0]
 8016b44:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8016b46:	68bb      	ldr	r3, [r7, #8]
 8016b48:	691a      	ldr	r2, [r3, #16]
 8016b4a:	68fb      	ldr	r3, [r7, #12]
 8016b4c:	681b      	ldr	r3, [r3, #0]
 8016b4e:	430a      	orrs	r2, r1
 8016b50:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8016b52:	e023      	b.n	8016b9c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8016b54:	68fb      	ldr	r3, [r7, #12]
 8016b56:	681b      	ldr	r3, [r3, #0]
 8016b58:	68b9      	ldr	r1, [r7, #8]
 8016b5a:	4618      	mov	r0, r3
 8016b5c:	f000 fc64 	bl	8017428 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8016b60:	68fb      	ldr	r3, [r7, #12]
 8016b62:	681b      	ldr	r3, [r3, #0]
 8016b64:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8016b66:	68fb      	ldr	r3, [r7, #12]
 8016b68:	681b      	ldr	r3, [r3, #0]
 8016b6a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8016b6e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8016b70:	68fb      	ldr	r3, [r7, #12]
 8016b72:	681b      	ldr	r3, [r3, #0]
 8016b74:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8016b76:	68fb      	ldr	r3, [r7, #12]
 8016b78:	681b      	ldr	r3, [r3, #0]
 8016b7a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8016b7e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8016b80:	68fb      	ldr	r3, [r7, #12]
 8016b82:	681b      	ldr	r3, [r3, #0]
 8016b84:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8016b86:	68bb      	ldr	r3, [r7, #8]
 8016b88:	691b      	ldr	r3, [r3, #16]
 8016b8a:	021a      	lsls	r2, r3, #8
 8016b8c:	68fb      	ldr	r3, [r7, #12]
 8016b8e:	681b      	ldr	r3, [r3, #0]
 8016b90:	430a      	orrs	r2, r1
 8016b92:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8016b94:	e002      	b.n	8016b9c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8016b96:	2301      	movs	r3, #1
 8016b98:	75fb      	strb	r3, [r7, #23]
      break;
 8016b9a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8016b9c:	68fb      	ldr	r3, [r7, #12]
 8016b9e:	2200      	movs	r2, #0
 8016ba0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8016ba4:	7dfb      	ldrb	r3, [r7, #23]
}
 8016ba6:	4618      	mov	r0, r3
 8016ba8:	3718      	adds	r7, #24
 8016baa:	46bd      	mov	sp, r7
 8016bac:	bd80      	pop	{r7, pc}
 8016bae:	bf00      	nop

08016bb0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8016bb0:	b580      	push	{r7, lr}
 8016bb2:	b084      	sub	sp, #16
 8016bb4:	af00      	add	r7, sp, #0
 8016bb6:	6078      	str	r0, [r7, #4]
 8016bb8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8016bba:	2300      	movs	r3, #0
 8016bbc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8016bbe:	687b      	ldr	r3, [r7, #4]
 8016bc0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8016bc4:	2b01      	cmp	r3, #1
 8016bc6:	d101      	bne.n	8016bcc <HAL_TIM_ConfigClockSource+0x1c>
 8016bc8:	2302      	movs	r3, #2
 8016bca:	e0dc      	b.n	8016d86 <HAL_TIM_ConfigClockSource+0x1d6>
 8016bcc:	687b      	ldr	r3, [r7, #4]
 8016bce:	2201      	movs	r2, #1
 8016bd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8016bd4:	687b      	ldr	r3, [r7, #4]
 8016bd6:	2202      	movs	r2, #2
 8016bd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8016bdc:	687b      	ldr	r3, [r7, #4]
 8016bde:	681b      	ldr	r3, [r3, #0]
 8016be0:	689b      	ldr	r3, [r3, #8]
 8016be2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8016be4:	68ba      	ldr	r2, [r7, #8]
 8016be6:	4b6a      	ldr	r3, [pc, #424]	@ (8016d90 <HAL_TIM_ConfigClockSource+0x1e0>)
 8016be8:	4013      	ands	r3, r2
 8016bea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8016bec:	68bb      	ldr	r3, [r7, #8]
 8016bee:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8016bf2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8016bf4:	687b      	ldr	r3, [r7, #4]
 8016bf6:	681b      	ldr	r3, [r3, #0]
 8016bf8:	68ba      	ldr	r2, [r7, #8]
 8016bfa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8016bfc:	683b      	ldr	r3, [r7, #0]
 8016bfe:	681b      	ldr	r3, [r3, #0]
 8016c00:	4a64      	ldr	r2, [pc, #400]	@ (8016d94 <HAL_TIM_ConfigClockSource+0x1e4>)
 8016c02:	4293      	cmp	r3, r2
 8016c04:	f000 80a9 	beq.w	8016d5a <HAL_TIM_ConfigClockSource+0x1aa>
 8016c08:	4a62      	ldr	r2, [pc, #392]	@ (8016d94 <HAL_TIM_ConfigClockSource+0x1e4>)
 8016c0a:	4293      	cmp	r3, r2
 8016c0c:	f200 80ae 	bhi.w	8016d6c <HAL_TIM_ConfigClockSource+0x1bc>
 8016c10:	4a61      	ldr	r2, [pc, #388]	@ (8016d98 <HAL_TIM_ConfigClockSource+0x1e8>)
 8016c12:	4293      	cmp	r3, r2
 8016c14:	f000 80a1 	beq.w	8016d5a <HAL_TIM_ConfigClockSource+0x1aa>
 8016c18:	4a5f      	ldr	r2, [pc, #380]	@ (8016d98 <HAL_TIM_ConfigClockSource+0x1e8>)
 8016c1a:	4293      	cmp	r3, r2
 8016c1c:	f200 80a6 	bhi.w	8016d6c <HAL_TIM_ConfigClockSource+0x1bc>
 8016c20:	4a5e      	ldr	r2, [pc, #376]	@ (8016d9c <HAL_TIM_ConfigClockSource+0x1ec>)
 8016c22:	4293      	cmp	r3, r2
 8016c24:	f000 8099 	beq.w	8016d5a <HAL_TIM_ConfigClockSource+0x1aa>
 8016c28:	4a5c      	ldr	r2, [pc, #368]	@ (8016d9c <HAL_TIM_ConfigClockSource+0x1ec>)
 8016c2a:	4293      	cmp	r3, r2
 8016c2c:	f200 809e 	bhi.w	8016d6c <HAL_TIM_ConfigClockSource+0x1bc>
 8016c30:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8016c34:	f000 8091 	beq.w	8016d5a <HAL_TIM_ConfigClockSource+0x1aa>
 8016c38:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8016c3c:	f200 8096 	bhi.w	8016d6c <HAL_TIM_ConfigClockSource+0x1bc>
 8016c40:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8016c44:	f000 8089 	beq.w	8016d5a <HAL_TIM_ConfigClockSource+0x1aa>
 8016c48:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8016c4c:	f200 808e 	bhi.w	8016d6c <HAL_TIM_ConfigClockSource+0x1bc>
 8016c50:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8016c54:	d03e      	beq.n	8016cd4 <HAL_TIM_ConfigClockSource+0x124>
 8016c56:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8016c5a:	f200 8087 	bhi.w	8016d6c <HAL_TIM_ConfigClockSource+0x1bc>
 8016c5e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8016c62:	f000 8086 	beq.w	8016d72 <HAL_TIM_ConfigClockSource+0x1c2>
 8016c66:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8016c6a:	d87f      	bhi.n	8016d6c <HAL_TIM_ConfigClockSource+0x1bc>
 8016c6c:	2b70      	cmp	r3, #112	@ 0x70
 8016c6e:	d01a      	beq.n	8016ca6 <HAL_TIM_ConfigClockSource+0xf6>
 8016c70:	2b70      	cmp	r3, #112	@ 0x70
 8016c72:	d87b      	bhi.n	8016d6c <HAL_TIM_ConfigClockSource+0x1bc>
 8016c74:	2b60      	cmp	r3, #96	@ 0x60
 8016c76:	d050      	beq.n	8016d1a <HAL_TIM_ConfigClockSource+0x16a>
 8016c78:	2b60      	cmp	r3, #96	@ 0x60
 8016c7a:	d877      	bhi.n	8016d6c <HAL_TIM_ConfigClockSource+0x1bc>
 8016c7c:	2b50      	cmp	r3, #80	@ 0x50
 8016c7e:	d03c      	beq.n	8016cfa <HAL_TIM_ConfigClockSource+0x14a>
 8016c80:	2b50      	cmp	r3, #80	@ 0x50
 8016c82:	d873      	bhi.n	8016d6c <HAL_TIM_ConfigClockSource+0x1bc>
 8016c84:	2b40      	cmp	r3, #64	@ 0x40
 8016c86:	d058      	beq.n	8016d3a <HAL_TIM_ConfigClockSource+0x18a>
 8016c88:	2b40      	cmp	r3, #64	@ 0x40
 8016c8a:	d86f      	bhi.n	8016d6c <HAL_TIM_ConfigClockSource+0x1bc>
 8016c8c:	2b30      	cmp	r3, #48	@ 0x30
 8016c8e:	d064      	beq.n	8016d5a <HAL_TIM_ConfigClockSource+0x1aa>
 8016c90:	2b30      	cmp	r3, #48	@ 0x30
 8016c92:	d86b      	bhi.n	8016d6c <HAL_TIM_ConfigClockSource+0x1bc>
 8016c94:	2b20      	cmp	r3, #32
 8016c96:	d060      	beq.n	8016d5a <HAL_TIM_ConfigClockSource+0x1aa>
 8016c98:	2b20      	cmp	r3, #32
 8016c9a:	d867      	bhi.n	8016d6c <HAL_TIM_ConfigClockSource+0x1bc>
 8016c9c:	2b00      	cmp	r3, #0
 8016c9e:	d05c      	beq.n	8016d5a <HAL_TIM_ConfigClockSource+0x1aa>
 8016ca0:	2b10      	cmp	r3, #16
 8016ca2:	d05a      	beq.n	8016d5a <HAL_TIM_ConfigClockSource+0x1aa>
 8016ca4:	e062      	b.n	8016d6c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8016ca6:	687b      	ldr	r3, [r7, #4]
 8016ca8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8016caa:	683b      	ldr	r3, [r7, #0]
 8016cac:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8016cae:	683b      	ldr	r3, [r7, #0]
 8016cb0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8016cb2:	683b      	ldr	r3, [r7, #0]
 8016cb4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8016cb6:	f000 fdd1 	bl	801785c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8016cba:	687b      	ldr	r3, [r7, #4]
 8016cbc:	681b      	ldr	r3, [r3, #0]
 8016cbe:	689b      	ldr	r3, [r3, #8]
 8016cc0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8016cc2:	68bb      	ldr	r3, [r7, #8]
 8016cc4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8016cc8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8016cca:	687b      	ldr	r3, [r7, #4]
 8016ccc:	681b      	ldr	r3, [r3, #0]
 8016cce:	68ba      	ldr	r2, [r7, #8]
 8016cd0:	609a      	str	r2, [r3, #8]
      break;
 8016cd2:	e04f      	b.n	8016d74 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8016cd4:	687b      	ldr	r3, [r7, #4]
 8016cd6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8016cd8:	683b      	ldr	r3, [r7, #0]
 8016cda:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8016cdc:	683b      	ldr	r3, [r7, #0]
 8016cde:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8016ce0:	683b      	ldr	r3, [r7, #0]
 8016ce2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8016ce4:	f000 fdba 	bl	801785c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8016ce8:	687b      	ldr	r3, [r7, #4]
 8016cea:	681b      	ldr	r3, [r3, #0]
 8016cec:	689a      	ldr	r2, [r3, #8]
 8016cee:	687b      	ldr	r3, [r7, #4]
 8016cf0:	681b      	ldr	r3, [r3, #0]
 8016cf2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8016cf6:	609a      	str	r2, [r3, #8]
      break;
 8016cf8:	e03c      	b.n	8016d74 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8016cfa:	687b      	ldr	r3, [r7, #4]
 8016cfc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8016cfe:	683b      	ldr	r3, [r7, #0]
 8016d00:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8016d02:	683b      	ldr	r3, [r7, #0]
 8016d04:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8016d06:	461a      	mov	r2, r3
 8016d08:	f000 fc74 	bl	80175f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8016d0c:	687b      	ldr	r3, [r7, #4]
 8016d0e:	681b      	ldr	r3, [r3, #0]
 8016d10:	2150      	movs	r1, #80	@ 0x50
 8016d12:	4618      	mov	r0, r3
 8016d14:	f000 fd84 	bl	8017820 <TIM_ITRx_SetConfig>
      break;
 8016d18:	e02c      	b.n	8016d74 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8016d1a:	687b      	ldr	r3, [r7, #4]
 8016d1c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8016d1e:	683b      	ldr	r3, [r7, #0]
 8016d20:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8016d22:	683b      	ldr	r3, [r7, #0]
 8016d24:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8016d26:	461a      	mov	r2, r3
 8016d28:	f000 fcd0 	bl	80176cc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8016d2c:	687b      	ldr	r3, [r7, #4]
 8016d2e:	681b      	ldr	r3, [r3, #0]
 8016d30:	2160      	movs	r1, #96	@ 0x60
 8016d32:	4618      	mov	r0, r3
 8016d34:	f000 fd74 	bl	8017820 <TIM_ITRx_SetConfig>
      break;
 8016d38:	e01c      	b.n	8016d74 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8016d3a:	687b      	ldr	r3, [r7, #4]
 8016d3c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8016d3e:	683b      	ldr	r3, [r7, #0]
 8016d40:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8016d42:	683b      	ldr	r3, [r7, #0]
 8016d44:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8016d46:	461a      	mov	r2, r3
 8016d48:	f000 fc54 	bl	80175f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8016d4c:	687b      	ldr	r3, [r7, #4]
 8016d4e:	681b      	ldr	r3, [r3, #0]
 8016d50:	2140      	movs	r1, #64	@ 0x40
 8016d52:	4618      	mov	r0, r3
 8016d54:	f000 fd64 	bl	8017820 <TIM_ITRx_SetConfig>
      break;
 8016d58:	e00c      	b.n	8016d74 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8016d5a:	687b      	ldr	r3, [r7, #4]
 8016d5c:	681a      	ldr	r2, [r3, #0]
 8016d5e:	683b      	ldr	r3, [r7, #0]
 8016d60:	681b      	ldr	r3, [r3, #0]
 8016d62:	4619      	mov	r1, r3
 8016d64:	4610      	mov	r0, r2
 8016d66:	f000 fd5b 	bl	8017820 <TIM_ITRx_SetConfig>
      break;
 8016d6a:	e003      	b.n	8016d74 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8016d6c:	2301      	movs	r3, #1
 8016d6e:	73fb      	strb	r3, [r7, #15]
      break;
 8016d70:	e000      	b.n	8016d74 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8016d72:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8016d74:	687b      	ldr	r3, [r7, #4]
 8016d76:	2201      	movs	r2, #1
 8016d78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8016d7c:	687b      	ldr	r3, [r7, #4]
 8016d7e:	2200      	movs	r2, #0
 8016d80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8016d84:	7bfb      	ldrb	r3, [r7, #15]
}
 8016d86:	4618      	mov	r0, r3
 8016d88:	3710      	adds	r7, #16
 8016d8a:	46bd      	mov	sp, r7
 8016d8c:	bd80      	pop	{r7, pc}
 8016d8e:	bf00      	nop
 8016d90:	ffceff88 	.word	0xffceff88
 8016d94:	00100040 	.word	0x00100040
 8016d98:	00100030 	.word	0x00100030
 8016d9c:	00100020 	.word	0x00100020

08016da0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8016da0:	b480      	push	{r7}
 8016da2:	b083      	sub	sp, #12
 8016da4:	af00      	add	r7, sp, #0
 8016da6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8016da8:	bf00      	nop
 8016daa:	370c      	adds	r7, #12
 8016dac:	46bd      	mov	sp, r7
 8016dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016db2:	4770      	bx	lr

08016db4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8016db4:	b480      	push	{r7}
 8016db6:	b083      	sub	sp, #12
 8016db8:	af00      	add	r7, sp, #0
 8016dba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8016dbc:	bf00      	nop
 8016dbe:	370c      	adds	r7, #12
 8016dc0:	46bd      	mov	sp, r7
 8016dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016dc6:	4770      	bx	lr

08016dc8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8016dc8:	b480      	push	{r7}
 8016dca:	b083      	sub	sp, #12
 8016dcc:	af00      	add	r7, sp, #0
 8016dce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8016dd0:	bf00      	nop
 8016dd2:	370c      	adds	r7, #12
 8016dd4:	46bd      	mov	sp, r7
 8016dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016dda:	4770      	bx	lr

08016ddc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8016ddc:	b480      	push	{r7}
 8016dde:	b083      	sub	sp, #12
 8016de0:	af00      	add	r7, sp, #0
 8016de2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8016de4:	bf00      	nop
 8016de6:	370c      	adds	r7, #12
 8016de8:	46bd      	mov	sp, r7
 8016dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016dee:	4770      	bx	lr

08016df0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8016df0:	b480      	push	{r7}
 8016df2:	b085      	sub	sp, #20
 8016df4:	af00      	add	r7, sp, #0
 8016df6:	6078      	str	r0, [r7, #4]
 8016df8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8016dfa:	687b      	ldr	r3, [r7, #4]
 8016dfc:	681b      	ldr	r3, [r3, #0]
 8016dfe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8016e00:	687b      	ldr	r3, [r7, #4]
 8016e02:	4a47      	ldr	r2, [pc, #284]	@ (8016f20 <TIM_Base_SetConfig+0x130>)
 8016e04:	4293      	cmp	r3, r2
 8016e06:	d013      	beq.n	8016e30 <TIM_Base_SetConfig+0x40>
 8016e08:	687b      	ldr	r3, [r7, #4]
 8016e0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8016e0e:	d00f      	beq.n	8016e30 <TIM_Base_SetConfig+0x40>
 8016e10:	687b      	ldr	r3, [r7, #4]
 8016e12:	4a44      	ldr	r2, [pc, #272]	@ (8016f24 <TIM_Base_SetConfig+0x134>)
 8016e14:	4293      	cmp	r3, r2
 8016e16:	d00b      	beq.n	8016e30 <TIM_Base_SetConfig+0x40>
 8016e18:	687b      	ldr	r3, [r7, #4]
 8016e1a:	4a43      	ldr	r2, [pc, #268]	@ (8016f28 <TIM_Base_SetConfig+0x138>)
 8016e1c:	4293      	cmp	r3, r2
 8016e1e:	d007      	beq.n	8016e30 <TIM_Base_SetConfig+0x40>
 8016e20:	687b      	ldr	r3, [r7, #4]
 8016e22:	4a42      	ldr	r2, [pc, #264]	@ (8016f2c <TIM_Base_SetConfig+0x13c>)
 8016e24:	4293      	cmp	r3, r2
 8016e26:	d003      	beq.n	8016e30 <TIM_Base_SetConfig+0x40>
 8016e28:	687b      	ldr	r3, [r7, #4]
 8016e2a:	4a41      	ldr	r2, [pc, #260]	@ (8016f30 <TIM_Base_SetConfig+0x140>)
 8016e2c:	4293      	cmp	r3, r2
 8016e2e:	d108      	bne.n	8016e42 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8016e30:	68fb      	ldr	r3, [r7, #12]
 8016e32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8016e36:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8016e38:	683b      	ldr	r3, [r7, #0]
 8016e3a:	685b      	ldr	r3, [r3, #4]
 8016e3c:	68fa      	ldr	r2, [r7, #12]
 8016e3e:	4313      	orrs	r3, r2
 8016e40:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8016e42:	687b      	ldr	r3, [r7, #4]
 8016e44:	4a36      	ldr	r2, [pc, #216]	@ (8016f20 <TIM_Base_SetConfig+0x130>)
 8016e46:	4293      	cmp	r3, r2
 8016e48:	d027      	beq.n	8016e9a <TIM_Base_SetConfig+0xaa>
 8016e4a:	687b      	ldr	r3, [r7, #4]
 8016e4c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8016e50:	d023      	beq.n	8016e9a <TIM_Base_SetConfig+0xaa>
 8016e52:	687b      	ldr	r3, [r7, #4]
 8016e54:	4a33      	ldr	r2, [pc, #204]	@ (8016f24 <TIM_Base_SetConfig+0x134>)
 8016e56:	4293      	cmp	r3, r2
 8016e58:	d01f      	beq.n	8016e9a <TIM_Base_SetConfig+0xaa>
 8016e5a:	687b      	ldr	r3, [r7, #4]
 8016e5c:	4a32      	ldr	r2, [pc, #200]	@ (8016f28 <TIM_Base_SetConfig+0x138>)
 8016e5e:	4293      	cmp	r3, r2
 8016e60:	d01b      	beq.n	8016e9a <TIM_Base_SetConfig+0xaa>
 8016e62:	687b      	ldr	r3, [r7, #4]
 8016e64:	4a31      	ldr	r2, [pc, #196]	@ (8016f2c <TIM_Base_SetConfig+0x13c>)
 8016e66:	4293      	cmp	r3, r2
 8016e68:	d017      	beq.n	8016e9a <TIM_Base_SetConfig+0xaa>
 8016e6a:	687b      	ldr	r3, [r7, #4]
 8016e6c:	4a30      	ldr	r2, [pc, #192]	@ (8016f30 <TIM_Base_SetConfig+0x140>)
 8016e6e:	4293      	cmp	r3, r2
 8016e70:	d013      	beq.n	8016e9a <TIM_Base_SetConfig+0xaa>
 8016e72:	687b      	ldr	r3, [r7, #4]
 8016e74:	4a2f      	ldr	r2, [pc, #188]	@ (8016f34 <TIM_Base_SetConfig+0x144>)
 8016e76:	4293      	cmp	r3, r2
 8016e78:	d00f      	beq.n	8016e9a <TIM_Base_SetConfig+0xaa>
 8016e7a:	687b      	ldr	r3, [r7, #4]
 8016e7c:	4a2e      	ldr	r2, [pc, #184]	@ (8016f38 <TIM_Base_SetConfig+0x148>)
 8016e7e:	4293      	cmp	r3, r2
 8016e80:	d00b      	beq.n	8016e9a <TIM_Base_SetConfig+0xaa>
 8016e82:	687b      	ldr	r3, [r7, #4]
 8016e84:	4a2d      	ldr	r2, [pc, #180]	@ (8016f3c <TIM_Base_SetConfig+0x14c>)
 8016e86:	4293      	cmp	r3, r2
 8016e88:	d007      	beq.n	8016e9a <TIM_Base_SetConfig+0xaa>
 8016e8a:	687b      	ldr	r3, [r7, #4]
 8016e8c:	4a2c      	ldr	r2, [pc, #176]	@ (8016f40 <TIM_Base_SetConfig+0x150>)
 8016e8e:	4293      	cmp	r3, r2
 8016e90:	d003      	beq.n	8016e9a <TIM_Base_SetConfig+0xaa>
 8016e92:	687b      	ldr	r3, [r7, #4]
 8016e94:	4a2b      	ldr	r2, [pc, #172]	@ (8016f44 <TIM_Base_SetConfig+0x154>)
 8016e96:	4293      	cmp	r3, r2
 8016e98:	d108      	bne.n	8016eac <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8016e9a:	68fb      	ldr	r3, [r7, #12]
 8016e9c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8016ea0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8016ea2:	683b      	ldr	r3, [r7, #0]
 8016ea4:	68db      	ldr	r3, [r3, #12]
 8016ea6:	68fa      	ldr	r2, [r7, #12]
 8016ea8:	4313      	orrs	r3, r2
 8016eaa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8016eac:	68fb      	ldr	r3, [r7, #12]
 8016eae:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8016eb2:	683b      	ldr	r3, [r7, #0]
 8016eb4:	695b      	ldr	r3, [r3, #20]
 8016eb6:	4313      	orrs	r3, r2
 8016eb8:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8016eba:	683b      	ldr	r3, [r7, #0]
 8016ebc:	689a      	ldr	r2, [r3, #8]
 8016ebe:	687b      	ldr	r3, [r7, #4]
 8016ec0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8016ec2:	683b      	ldr	r3, [r7, #0]
 8016ec4:	681a      	ldr	r2, [r3, #0]
 8016ec6:	687b      	ldr	r3, [r7, #4]
 8016ec8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8016eca:	687b      	ldr	r3, [r7, #4]
 8016ecc:	4a14      	ldr	r2, [pc, #80]	@ (8016f20 <TIM_Base_SetConfig+0x130>)
 8016ece:	4293      	cmp	r3, r2
 8016ed0:	d00f      	beq.n	8016ef2 <TIM_Base_SetConfig+0x102>
 8016ed2:	687b      	ldr	r3, [r7, #4]
 8016ed4:	4a16      	ldr	r2, [pc, #88]	@ (8016f30 <TIM_Base_SetConfig+0x140>)
 8016ed6:	4293      	cmp	r3, r2
 8016ed8:	d00b      	beq.n	8016ef2 <TIM_Base_SetConfig+0x102>
 8016eda:	687b      	ldr	r3, [r7, #4]
 8016edc:	4a15      	ldr	r2, [pc, #84]	@ (8016f34 <TIM_Base_SetConfig+0x144>)
 8016ede:	4293      	cmp	r3, r2
 8016ee0:	d007      	beq.n	8016ef2 <TIM_Base_SetConfig+0x102>
 8016ee2:	687b      	ldr	r3, [r7, #4]
 8016ee4:	4a14      	ldr	r2, [pc, #80]	@ (8016f38 <TIM_Base_SetConfig+0x148>)
 8016ee6:	4293      	cmp	r3, r2
 8016ee8:	d003      	beq.n	8016ef2 <TIM_Base_SetConfig+0x102>
 8016eea:	687b      	ldr	r3, [r7, #4]
 8016eec:	4a13      	ldr	r2, [pc, #76]	@ (8016f3c <TIM_Base_SetConfig+0x14c>)
 8016eee:	4293      	cmp	r3, r2
 8016ef0:	d103      	bne.n	8016efa <TIM_Base_SetConfig+0x10a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8016ef2:	683b      	ldr	r3, [r7, #0]
 8016ef4:	691a      	ldr	r2, [r3, #16]
 8016ef6:	687b      	ldr	r3, [r7, #4]
 8016ef8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8016efa:	687b      	ldr	r3, [r7, #4]
 8016efc:	681b      	ldr	r3, [r3, #0]
 8016efe:	f043 0204 	orr.w	r2, r3, #4
 8016f02:	687b      	ldr	r3, [r7, #4]
 8016f04:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8016f06:	687b      	ldr	r3, [r7, #4]
 8016f08:	2201      	movs	r2, #1
 8016f0a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8016f0c:	687b      	ldr	r3, [r7, #4]
 8016f0e:	68fa      	ldr	r2, [r7, #12]
 8016f10:	601a      	str	r2, [r3, #0]
}
 8016f12:	bf00      	nop
 8016f14:	3714      	adds	r7, #20
 8016f16:	46bd      	mov	sp, r7
 8016f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f1c:	4770      	bx	lr
 8016f1e:	bf00      	nop
 8016f20:	40010000 	.word	0x40010000
 8016f24:	40000400 	.word	0x40000400
 8016f28:	40000800 	.word	0x40000800
 8016f2c:	40000c00 	.word	0x40000c00
 8016f30:	40010400 	.word	0x40010400
 8016f34:	40014000 	.word	0x40014000
 8016f38:	40014400 	.word	0x40014400
 8016f3c:	40014800 	.word	0x40014800
 8016f40:	4000e000 	.word	0x4000e000
 8016f44:	4000e400 	.word	0x4000e400

08016f48 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8016f48:	b480      	push	{r7}
 8016f4a:	b087      	sub	sp, #28
 8016f4c:	af00      	add	r7, sp, #0
 8016f4e:	6078      	str	r0, [r7, #4]
 8016f50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8016f52:	687b      	ldr	r3, [r7, #4]
 8016f54:	6a1b      	ldr	r3, [r3, #32]
 8016f56:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8016f58:	687b      	ldr	r3, [r7, #4]
 8016f5a:	6a1b      	ldr	r3, [r3, #32]
 8016f5c:	f023 0201 	bic.w	r2, r3, #1
 8016f60:	687b      	ldr	r3, [r7, #4]
 8016f62:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8016f64:	687b      	ldr	r3, [r7, #4]
 8016f66:	685b      	ldr	r3, [r3, #4]
 8016f68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8016f6a:	687b      	ldr	r3, [r7, #4]
 8016f6c:	699b      	ldr	r3, [r3, #24]
 8016f6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8016f70:	68fa      	ldr	r2, [r7, #12]
 8016f72:	4b37      	ldr	r3, [pc, #220]	@ (8017050 <TIM_OC1_SetConfig+0x108>)
 8016f74:	4013      	ands	r3, r2
 8016f76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8016f78:	68fb      	ldr	r3, [r7, #12]
 8016f7a:	f023 0303 	bic.w	r3, r3, #3
 8016f7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8016f80:	683b      	ldr	r3, [r7, #0]
 8016f82:	681b      	ldr	r3, [r3, #0]
 8016f84:	68fa      	ldr	r2, [r7, #12]
 8016f86:	4313      	orrs	r3, r2
 8016f88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8016f8a:	697b      	ldr	r3, [r7, #20]
 8016f8c:	f023 0302 	bic.w	r3, r3, #2
 8016f90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8016f92:	683b      	ldr	r3, [r7, #0]
 8016f94:	689b      	ldr	r3, [r3, #8]
 8016f96:	697a      	ldr	r2, [r7, #20]
 8016f98:	4313      	orrs	r3, r2
 8016f9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8016f9c:	687b      	ldr	r3, [r7, #4]
 8016f9e:	4a2d      	ldr	r2, [pc, #180]	@ (8017054 <TIM_OC1_SetConfig+0x10c>)
 8016fa0:	4293      	cmp	r3, r2
 8016fa2:	d00f      	beq.n	8016fc4 <TIM_OC1_SetConfig+0x7c>
 8016fa4:	687b      	ldr	r3, [r7, #4]
 8016fa6:	4a2c      	ldr	r2, [pc, #176]	@ (8017058 <TIM_OC1_SetConfig+0x110>)
 8016fa8:	4293      	cmp	r3, r2
 8016faa:	d00b      	beq.n	8016fc4 <TIM_OC1_SetConfig+0x7c>
 8016fac:	687b      	ldr	r3, [r7, #4]
 8016fae:	4a2b      	ldr	r2, [pc, #172]	@ (801705c <TIM_OC1_SetConfig+0x114>)
 8016fb0:	4293      	cmp	r3, r2
 8016fb2:	d007      	beq.n	8016fc4 <TIM_OC1_SetConfig+0x7c>
 8016fb4:	687b      	ldr	r3, [r7, #4]
 8016fb6:	4a2a      	ldr	r2, [pc, #168]	@ (8017060 <TIM_OC1_SetConfig+0x118>)
 8016fb8:	4293      	cmp	r3, r2
 8016fba:	d003      	beq.n	8016fc4 <TIM_OC1_SetConfig+0x7c>
 8016fbc:	687b      	ldr	r3, [r7, #4]
 8016fbe:	4a29      	ldr	r2, [pc, #164]	@ (8017064 <TIM_OC1_SetConfig+0x11c>)
 8016fc0:	4293      	cmp	r3, r2
 8016fc2:	d10c      	bne.n	8016fde <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8016fc4:	697b      	ldr	r3, [r7, #20]
 8016fc6:	f023 0308 	bic.w	r3, r3, #8
 8016fca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8016fcc:	683b      	ldr	r3, [r7, #0]
 8016fce:	68db      	ldr	r3, [r3, #12]
 8016fd0:	697a      	ldr	r2, [r7, #20]
 8016fd2:	4313      	orrs	r3, r2
 8016fd4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8016fd6:	697b      	ldr	r3, [r7, #20]
 8016fd8:	f023 0304 	bic.w	r3, r3, #4
 8016fdc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8016fde:	687b      	ldr	r3, [r7, #4]
 8016fe0:	4a1c      	ldr	r2, [pc, #112]	@ (8017054 <TIM_OC1_SetConfig+0x10c>)
 8016fe2:	4293      	cmp	r3, r2
 8016fe4:	d00f      	beq.n	8017006 <TIM_OC1_SetConfig+0xbe>
 8016fe6:	687b      	ldr	r3, [r7, #4]
 8016fe8:	4a1b      	ldr	r2, [pc, #108]	@ (8017058 <TIM_OC1_SetConfig+0x110>)
 8016fea:	4293      	cmp	r3, r2
 8016fec:	d00b      	beq.n	8017006 <TIM_OC1_SetConfig+0xbe>
 8016fee:	687b      	ldr	r3, [r7, #4]
 8016ff0:	4a1a      	ldr	r2, [pc, #104]	@ (801705c <TIM_OC1_SetConfig+0x114>)
 8016ff2:	4293      	cmp	r3, r2
 8016ff4:	d007      	beq.n	8017006 <TIM_OC1_SetConfig+0xbe>
 8016ff6:	687b      	ldr	r3, [r7, #4]
 8016ff8:	4a19      	ldr	r2, [pc, #100]	@ (8017060 <TIM_OC1_SetConfig+0x118>)
 8016ffa:	4293      	cmp	r3, r2
 8016ffc:	d003      	beq.n	8017006 <TIM_OC1_SetConfig+0xbe>
 8016ffe:	687b      	ldr	r3, [r7, #4]
 8017000:	4a18      	ldr	r2, [pc, #96]	@ (8017064 <TIM_OC1_SetConfig+0x11c>)
 8017002:	4293      	cmp	r3, r2
 8017004:	d111      	bne.n	801702a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8017006:	693b      	ldr	r3, [r7, #16]
 8017008:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801700c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 801700e:	693b      	ldr	r3, [r7, #16]
 8017010:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8017014:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8017016:	683b      	ldr	r3, [r7, #0]
 8017018:	695b      	ldr	r3, [r3, #20]
 801701a:	693a      	ldr	r2, [r7, #16]
 801701c:	4313      	orrs	r3, r2
 801701e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8017020:	683b      	ldr	r3, [r7, #0]
 8017022:	699b      	ldr	r3, [r3, #24]
 8017024:	693a      	ldr	r2, [r7, #16]
 8017026:	4313      	orrs	r3, r2
 8017028:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801702a:	687b      	ldr	r3, [r7, #4]
 801702c:	693a      	ldr	r2, [r7, #16]
 801702e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8017030:	687b      	ldr	r3, [r7, #4]
 8017032:	68fa      	ldr	r2, [r7, #12]
 8017034:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8017036:	683b      	ldr	r3, [r7, #0]
 8017038:	685a      	ldr	r2, [r3, #4]
 801703a:	687b      	ldr	r3, [r7, #4]
 801703c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801703e:	687b      	ldr	r3, [r7, #4]
 8017040:	697a      	ldr	r2, [r7, #20]
 8017042:	621a      	str	r2, [r3, #32]
}
 8017044:	bf00      	nop
 8017046:	371c      	adds	r7, #28
 8017048:	46bd      	mov	sp, r7
 801704a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801704e:	4770      	bx	lr
 8017050:	fffeff8f 	.word	0xfffeff8f
 8017054:	40010000 	.word	0x40010000
 8017058:	40010400 	.word	0x40010400
 801705c:	40014000 	.word	0x40014000
 8017060:	40014400 	.word	0x40014400
 8017064:	40014800 	.word	0x40014800

08017068 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8017068:	b480      	push	{r7}
 801706a:	b087      	sub	sp, #28
 801706c:	af00      	add	r7, sp, #0
 801706e:	6078      	str	r0, [r7, #4]
 8017070:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8017072:	687b      	ldr	r3, [r7, #4]
 8017074:	6a1b      	ldr	r3, [r3, #32]
 8017076:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8017078:	687b      	ldr	r3, [r7, #4]
 801707a:	6a1b      	ldr	r3, [r3, #32]
 801707c:	f023 0210 	bic.w	r2, r3, #16
 8017080:	687b      	ldr	r3, [r7, #4]
 8017082:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8017084:	687b      	ldr	r3, [r7, #4]
 8017086:	685b      	ldr	r3, [r3, #4]
 8017088:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801708a:	687b      	ldr	r3, [r7, #4]
 801708c:	699b      	ldr	r3, [r3, #24]
 801708e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8017090:	68fa      	ldr	r2, [r7, #12]
 8017092:	4b34      	ldr	r3, [pc, #208]	@ (8017164 <TIM_OC2_SetConfig+0xfc>)
 8017094:	4013      	ands	r3, r2
 8017096:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8017098:	68fb      	ldr	r3, [r7, #12]
 801709a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 801709e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80170a0:	683b      	ldr	r3, [r7, #0]
 80170a2:	681b      	ldr	r3, [r3, #0]
 80170a4:	021b      	lsls	r3, r3, #8
 80170a6:	68fa      	ldr	r2, [r7, #12]
 80170a8:	4313      	orrs	r3, r2
 80170aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80170ac:	697b      	ldr	r3, [r7, #20]
 80170ae:	f023 0320 	bic.w	r3, r3, #32
 80170b2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80170b4:	683b      	ldr	r3, [r7, #0]
 80170b6:	689b      	ldr	r3, [r3, #8]
 80170b8:	011b      	lsls	r3, r3, #4
 80170ba:	697a      	ldr	r2, [r7, #20]
 80170bc:	4313      	orrs	r3, r2
 80170be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80170c0:	687b      	ldr	r3, [r7, #4]
 80170c2:	4a29      	ldr	r2, [pc, #164]	@ (8017168 <TIM_OC2_SetConfig+0x100>)
 80170c4:	4293      	cmp	r3, r2
 80170c6:	d003      	beq.n	80170d0 <TIM_OC2_SetConfig+0x68>
 80170c8:	687b      	ldr	r3, [r7, #4]
 80170ca:	4a28      	ldr	r2, [pc, #160]	@ (801716c <TIM_OC2_SetConfig+0x104>)
 80170cc:	4293      	cmp	r3, r2
 80170ce:	d10d      	bne.n	80170ec <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80170d0:	697b      	ldr	r3, [r7, #20]
 80170d2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80170d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80170d8:	683b      	ldr	r3, [r7, #0]
 80170da:	68db      	ldr	r3, [r3, #12]
 80170dc:	011b      	lsls	r3, r3, #4
 80170de:	697a      	ldr	r2, [r7, #20]
 80170e0:	4313      	orrs	r3, r2
 80170e2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80170e4:	697b      	ldr	r3, [r7, #20]
 80170e6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80170ea:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80170ec:	687b      	ldr	r3, [r7, #4]
 80170ee:	4a1e      	ldr	r2, [pc, #120]	@ (8017168 <TIM_OC2_SetConfig+0x100>)
 80170f0:	4293      	cmp	r3, r2
 80170f2:	d00f      	beq.n	8017114 <TIM_OC2_SetConfig+0xac>
 80170f4:	687b      	ldr	r3, [r7, #4]
 80170f6:	4a1d      	ldr	r2, [pc, #116]	@ (801716c <TIM_OC2_SetConfig+0x104>)
 80170f8:	4293      	cmp	r3, r2
 80170fa:	d00b      	beq.n	8017114 <TIM_OC2_SetConfig+0xac>
 80170fc:	687b      	ldr	r3, [r7, #4]
 80170fe:	4a1c      	ldr	r2, [pc, #112]	@ (8017170 <TIM_OC2_SetConfig+0x108>)
 8017100:	4293      	cmp	r3, r2
 8017102:	d007      	beq.n	8017114 <TIM_OC2_SetConfig+0xac>
 8017104:	687b      	ldr	r3, [r7, #4]
 8017106:	4a1b      	ldr	r2, [pc, #108]	@ (8017174 <TIM_OC2_SetConfig+0x10c>)
 8017108:	4293      	cmp	r3, r2
 801710a:	d003      	beq.n	8017114 <TIM_OC2_SetConfig+0xac>
 801710c:	687b      	ldr	r3, [r7, #4]
 801710e:	4a1a      	ldr	r2, [pc, #104]	@ (8017178 <TIM_OC2_SetConfig+0x110>)
 8017110:	4293      	cmp	r3, r2
 8017112:	d113      	bne.n	801713c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8017114:	693b      	ldr	r3, [r7, #16]
 8017116:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 801711a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 801711c:	693b      	ldr	r3, [r7, #16]
 801711e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8017122:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8017124:	683b      	ldr	r3, [r7, #0]
 8017126:	695b      	ldr	r3, [r3, #20]
 8017128:	009b      	lsls	r3, r3, #2
 801712a:	693a      	ldr	r2, [r7, #16]
 801712c:	4313      	orrs	r3, r2
 801712e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8017130:	683b      	ldr	r3, [r7, #0]
 8017132:	699b      	ldr	r3, [r3, #24]
 8017134:	009b      	lsls	r3, r3, #2
 8017136:	693a      	ldr	r2, [r7, #16]
 8017138:	4313      	orrs	r3, r2
 801713a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801713c:	687b      	ldr	r3, [r7, #4]
 801713e:	693a      	ldr	r2, [r7, #16]
 8017140:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8017142:	687b      	ldr	r3, [r7, #4]
 8017144:	68fa      	ldr	r2, [r7, #12]
 8017146:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8017148:	683b      	ldr	r3, [r7, #0]
 801714a:	685a      	ldr	r2, [r3, #4]
 801714c:	687b      	ldr	r3, [r7, #4]
 801714e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8017150:	687b      	ldr	r3, [r7, #4]
 8017152:	697a      	ldr	r2, [r7, #20]
 8017154:	621a      	str	r2, [r3, #32]
}
 8017156:	bf00      	nop
 8017158:	371c      	adds	r7, #28
 801715a:	46bd      	mov	sp, r7
 801715c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017160:	4770      	bx	lr
 8017162:	bf00      	nop
 8017164:	feff8fff 	.word	0xfeff8fff
 8017168:	40010000 	.word	0x40010000
 801716c:	40010400 	.word	0x40010400
 8017170:	40014000 	.word	0x40014000
 8017174:	40014400 	.word	0x40014400
 8017178:	40014800 	.word	0x40014800

0801717c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801717c:	b480      	push	{r7}
 801717e:	b087      	sub	sp, #28
 8017180:	af00      	add	r7, sp, #0
 8017182:	6078      	str	r0, [r7, #4]
 8017184:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8017186:	687b      	ldr	r3, [r7, #4]
 8017188:	6a1b      	ldr	r3, [r3, #32]
 801718a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801718c:	687b      	ldr	r3, [r7, #4]
 801718e:	6a1b      	ldr	r3, [r3, #32]
 8017190:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8017194:	687b      	ldr	r3, [r7, #4]
 8017196:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8017198:	687b      	ldr	r3, [r7, #4]
 801719a:	685b      	ldr	r3, [r3, #4]
 801719c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801719e:	687b      	ldr	r3, [r7, #4]
 80171a0:	69db      	ldr	r3, [r3, #28]
 80171a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80171a4:	68fa      	ldr	r2, [r7, #12]
 80171a6:	4b33      	ldr	r3, [pc, #204]	@ (8017274 <TIM_OC3_SetConfig+0xf8>)
 80171a8:	4013      	ands	r3, r2
 80171aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80171ac:	68fb      	ldr	r3, [r7, #12]
 80171ae:	f023 0303 	bic.w	r3, r3, #3
 80171b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80171b4:	683b      	ldr	r3, [r7, #0]
 80171b6:	681b      	ldr	r3, [r3, #0]
 80171b8:	68fa      	ldr	r2, [r7, #12]
 80171ba:	4313      	orrs	r3, r2
 80171bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80171be:	697b      	ldr	r3, [r7, #20]
 80171c0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80171c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80171c6:	683b      	ldr	r3, [r7, #0]
 80171c8:	689b      	ldr	r3, [r3, #8]
 80171ca:	021b      	lsls	r3, r3, #8
 80171cc:	697a      	ldr	r2, [r7, #20]
 80171ce:	4313      	orrs	r3, r2
 80171d0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80171d2:	687b      	ldr	r3, [r7, #4]
 80171d4:	4a28      	ldr	r2, [pc, #160]	@ (8017278 <TIM_OC3_SetConfig+0xfc>)
 80171d6:	4293      	cmp	r3, r2
 80171d8:	d003      	beq.n	80171e2 <TIM_OC3_SetConfig+0x66>
 80171da:	687b      	ldr	r3, [r7, #4]
 80171dc:	4a27      	ldr	r2, [pc, #156]	@ (801727c <TIM_OC3_SetConfig+0x100>)
 80171de:	4293      	cmp	r3, r2
 80171e0:	d10d      	bne.n	80171fe <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80171e2:	697b      	ldr	r3, [r7, #20]
 80171e4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80171e8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80171ea:	683b      	ldr	r3, [r7, #0]
 80171ec:	68db      	ldr	r3, [r3, #12]
 80171ee:	021b      	lsls	r3, r3, #8
 80171f0:	697a      	ldr	r2, [r7, #20]
 80171f2:	4313      	orrs	r3, r2
 80171f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80171f6:	697b      	ldr	r3, [r7, #20]
 80171f8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80171fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80171fe:	687b      	ldr	r3, [r7, #4]
 8017200:	4a1d      	ldr	r2, [pc, #116]	@ (8017278 <TIM_OC3_SetConfig+0xfc>)
 8017202:	4293      	cmp	r3, r2
 8017204:	d00f      	beq.n	8017226 <TIM_OC3_SetConfig+0xaa>
 8017206:	687b      	ldr	r3, [r7, #4]
 8017208:	4a1c      	ldr	r2, [pc, #112]	@ (801727c <TIM_OC3_SetConfig+0x100>)
 801720a:	4293      	cmp	r3, r2
 801720c:	d00b      	beq.n	8017226 <TIM_OC3_SetConfig+0xaa>
 801720e:	687b      	ldr	r3, [r7, #4]
 8017210:	4a1b      	ldr	r2, [pc, #108]	@ (8017280 <TIM_OC3_SetConfig+0x104>)
 8017212:	4293      	cmp	r3, r2
 8017214:	d007      	beq.n	8017226 <TIM_OC3_SetConfig+0xaa>
 8017216:	687b      	ldr	r3, [r7, #4]
 8017218:	4a1a      	ldr	r2, [pc, #104]	@ (8017284 <TIM_OC3_SetConfig+0x108>)
 801721a:	4293      	cmp	r3, r2
 801721c:	d003      	beq.n	8017226 <TIM_OC3_SetConfig+0xaa>
 801721e:	687b      	ldr	r3, [r7, #4]
 8017220:	4a19      	ldr	r2, [pc, #100]	@ (8017288 <TIM_OC3_SetConfig+0x10c>)
 8017222:	4293      	cmp	r3, r2
 8017224:	d113      	bne.n	801724e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8017226:	693b      	ldr	r3, [r7, #16]
 8017228:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801722c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 801722e:	693b      	ldr	r3, [r7, #16]
 8017230:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8017234:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8017236:	683b      	ldr	r3, [r7, #0]
 8017238:	695b      	ldr	r3, [r3, #20]
 801723a:	011b      	lsls	r3, r3, #4
 801723c:	693a      	ldr	r2, [r7, #16]
 801723e:	4313      	orrs	r3, r2
 8017240:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8017242:	683b      	ldr	r3, [r7, #0]
 8017244:	699b      	ldr	r3, [r3, #24]
 8017246:	011b      	lsls	r3, r3, #4
 8017248:	693a      	ldr	r2, [r7, #16]
 801724a:	4313      	orrs	r3, r2
 801724c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801724e:	687b      	ldr	r3, [r7, #4]
 8017250:	693a      	ldr	r2, [r7, #16]
 8017252:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8017254:	687b      	ldr	r3, [r7, #4]
 8017256:	68fa      	ldr	r2, [r7, #12]
 8017258:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 801725a:	683b      	ldr	r3, [r7, #0]
 801725c:	685a      	ldr	r2, [r3, #4]
 801725e:	687b      	ldr	r3, [r7, #4]
 8017260:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8017262:	687b      	ldr	r3, [r7, #4]
 8017264:	697a      	ldr	r2, [r7, #20]
 8017266:	621a      	str	r2, [r3, #32]
}
 8017268:	bf00      	nop
 801726a:	371c      	adds	r7, #28
 801726c:	46bd      	mov	sp, r7
 801726e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017272:	4770      	bx	lr
 8017274:	fffeff8f 	.word	0xfffeff8f
 8017278:	40010000 	.word	0x40010000
 801727c:	40010400 	.word	0x40010400
 8017280:	40014000 	.word	0x40014000
 8017284:	40014400 	.word	0x40014400
 8017288:	40014800 	.word	0x40014800

0801728c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801728c:	b480      	push	{r7}
 801728e:	b087      	sub	sp, #28
 8017290:	af00      	add	r7, sp, #0
 8017292:	6078      	str	r0, [r7, #4]
 8017294:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8017296:	687b      	ldr	r3, [r7, #4]
 8017298:	6a1b      	ldr	r3, [r3, #32]
 801729a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801729c:	687b      	ldr	r3, [r7, #4]
 801729e:	6a1b      	ldr	r3, [r3, #32]
 80172a0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80172a4:	687b      	ldr	r3, [r7, #4]
 80172a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80172a8:	687b      	ldr	r3, [r7, #4]
 80172aa:	685b      	ldr	r3, [r3, #4]
 80172ac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80172ae:	687b      	ldr	r3, [r7, #4]
 80172b0:	69db      	ldr	r3, [r3, #28]
 80172b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80172b4:	68fa      	ldr	r2, [r7, #12]
 80172b6:	4b24      	ldr	r3, [pc, #144]	@ (8017348 <TIM_OC4_SetConfig+0xbc>)
 80172b8:	4013      	ands	r3, r2
 80172ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80172bc:	68fb      	ldr	r3, [r7, #12]
 80172be:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80172c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80172c4:	683b      	ldr	r3, [r7, #0]
 80172c6:	681b      	ldr	r3, [r3, #0]
 80172c8:	021b      	lsls	r3, r3, #8
 80172ca:	68fa      	ldr	r2, [r7, #12]
 80172cc:	4313      	orrs	r3, r2
 80172ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80172d0:	693b      	ldr	r3, [r7, #16]
 80172d2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80172d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80172d8:	683b      	ldr	r3, [r7, #0]
 80172da:	689b      	ldr	r3, [r3, #8]
 80172dc:	031b      	lsls	r3, r3, #12
 80172de:	693a      	ldr	r2, [r7, #16]
 80172e0:	4313      	orrs	r3, r2
 80172e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80172e4:	687b      	ldr	r3, [r7, #4]
 80172e6:	4a19      	ldr	r2, [pc, #100]	@ (801734c <TIM_OC4_SetConfig+0xc0>)
 80172e8:	4293      	cmp	r3, r2
 80172ea:	d00f      	beq.n	801730c <TIM_OC4_SetConfig+0x80>
 80172ec:	687b      	ldr	r3, [r7, #4]
 80172ee:	4a18      	ldr	r2, [pc, #96]	@ (8017350 <TIM_OC4_SetConfig+0xc4>)
 80172f0:	4293      	cmp	r3, r2
 80172f2:	d00b      	beq.n	801730c <TIM_OC4_SetConfig+0x80>
 80172f4:	687b      	ldr	r3, [r7, #4]
 80172f6:	4a17      	ldr	r2, [pc, #92]	@ (8017354 <TIM_OC4_SetConfig+0xc8>)
 80172f8:	4293      	cmp	r3, r2
 80172fa:	d007      	beq.n	801730c <TIM_OC4_SetConfig+0x80>
 80172fc:	687b      	ldr	r3, [r7, #4]
 80172fe:	4a16      	ldr	r2, [pc, #88]	@ (8017358 <TIM_OC4_SetConfig+0xcc>)
 8017300:	4293      	cmp	r3, r2
 8017302:	d003      	beq.n	801730c <TIM_OC4_SetConfig+0x80>
 8017304:	687b      	ldr	r3, [r7, #4]
 8017306:	4a15      	ldr	r2, [pc, #84]	@ (801735c <TIM_OC4_SetConfig+0xd0>)
 8017308:	4293      	cmp	r3, r2
 801730a:	d109      	bne.n	8017320 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 801730c:	697b      	ldr	r3, [r7, #20]
 801730e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8017312:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8017314:	683b      	ldr	r3, [r7, #0]
 8017316:	695b      	ldr	r3, [r3, #20]
 8017318:	019b      	lsls	r3, r3, #6
 801731a:	697a      	ldr	r2, [r7, #20]
 801731c:	4313      	orrs	r3, r2
 801731e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8017320:	687b      	ldr	r3, [r7, #4]
 8017322:	697a      	ldr	r2, [r7, #20]
 8017324:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8017326:	687b      	ldr	r3, [r7, #4]
 8017328:	68fa      	ldr	r2, [r7, #12]
 801732a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 801732c:	683b      	ldr	r3, [r7, #0]
 801732e:	685a      	ldr	r2, [r3, #4]
 8017330:	687b      	ldr	r3, [r7, #4]
 8017332:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8017334:	687b      	ldr	r3, [r7, #4]
 8017336:	693a      	ldr	r2, [r7, #16]
 8017338:	621a      	str	r2, [r3, #32]
}
 801733a:	bf00      	nop
 801733c:	371c      	adds	r7, #28
 801733e:	46bd      	mov	sp, r7
 8017340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017344:	4770      	bx	lr
 8017346:	bf00      	nop
 8017348:	feff8fff 	.word	0xfeff8fff
 801734c:	40010000 	.word	0x40010000
 8017350:	40010400 	.word	0x40010400
 8017354:	40014000 	.word	0x40014000
 8017358:	40014400 	.word	0x40014400
 801735c:	40014800 	.word	0x40014800

08017360 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8017360:	b480      	push	{r7}
 8017362:	b087      	sub	sp, #28
 8017364:	af00      	add	r7, sp, #0
 8017366:	6078      	str	r0, [r7, #4]
 8017368:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801736a:	687b      	ldr	r3, [r7, #4]
 801736c:	6a1b      	ldr	r3, [r3, #32]
 801736e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8017370:	687b      	ldr	r3, [r7, #4]
 8017372:	6a1b      	ldr	r3, [r3, #32]
 8017374:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8017378:	687b      	ldr	r3, [r7, #4]
 801737a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801737c:	687b      	ldr	r3, [r7, #4]
 801737e:	685b      	ldr	r3, [r3, #4]
 8017380:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8017382:	687b      	ldr	r3, [r7, #4]
 8017384:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8017386:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8017388:	68fa      	ldr	r2, [r7, #12]
 801738a:	4b21      	ldr	r3, [pc, #132]	@ (8017410 <TIM_OC5_SetConfig+0xb0>)
 801738c:	4013      	ands	r3, r2
 801738e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8017390:	683b      	ldr	r3, [r7, #0]
 8017392:	681b      	ldr	r3, [r3, #0]
 8017394:	68fa      	ldr	r2, [r7, #12]
 8017396:	4313      	orrs	r3, r2
 8017398:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 801739a:	693b      	ldr	r3, [r7, #16]
 801739c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80173a0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80173a2:	683b      	ldr	r3, [r7, #0]
 80173a4:	689b      	ldr	r3, [r3, #8]
 80173a6:	041b      	lsls	r3, r3, #16
 80173a8:	693a      	ldr	r2, [r7, #16]
 80173aa:	4313      	orrs	r3, r2
 80173ac:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80173ae:	687b      	ldr	r3, [r7, #4]
 80173b0:	4a18      	ldr	r2, [pc, #96]	@ (8017414 <TIM_OC5_SetConfig+0xb4>)
 80173b2:	4293      	cmp	r3, r2
 80173b4:	d00f      	beq.n	80173d6 <TIM_OC5_SetConfig+0x76>
 80173b6:	687b      	ldr	r3, [r7, #4]
 80173b8:	4a17      	ldr	r2, [pc, #92]	@ (8017418 <TIM_OC5_SetConfig+0xb8>)
 80173ba:	4293      	cmp	r3, r2
 80173bc:	d00b      	beq.n	80173d6 <TIM_OC5_SetConfig+0x76>
 80173be:	687b      	ldr	r3, [r7, #4]
 80173c0:	4a16      	ldr	r2, [pc, #88]	@ (801741c <TIM_OC5_SetConfig+0xbc>)
 80173c2:	4293      	cmp	r3, r2
 80173c4:	d007      	beq.n	80173d6 <TIM_OC5_SetConfig+0x76>
 80173c6:	687b      	ldr	r3, [r7, #4]
 80173c8:	4a15      	ldr	r2, [pc, #84]	@ (8017420 <TIM_OC5_SetConfig+0xc0>)
 80173ca:	4293      	cmp	r3, r2
 80173cc:	d003      	beq.n	80173d6 <TIM_OC5_SetConfig+0x76>
 80173ce:	687b      	ldr	r3, [r7, #4]
 80173d0:	4a14      	ldr	r2, [pc, #80]	@ (8017424 <TIM_OC5_SetConfig+0xc4>)
 80173d2:	4293      	cmp	r3, r2
 80173d4:	d109      	bne.n	80173ea <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80173d6:	697b      	ldr	r3, [r7, #20]
 80173d8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80173dc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80173de:	683b      	ldr	r3, [r7, #0]
 80173e0:	695b      	ldr	r3, [r3, #20]
 80173e2:	021b      	lsls	r3, r3, #8
 80173e4:	697a      	ldr	r2, [r7, #20]
 80173e6:	4313      	orrs	r3, r2
 80173e8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80173ea:	687b      	ldr	r3, [r7, #4]
 80173ec:	697a      	ldr	r2, [r7, #20]
 80173ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80173f0:	687b      	ldr	r3, [r7, #4]
 80173f2:	68fa      	ldr	r2, [r7, #12]
 80173f4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80173f6:	683b      	ldr	r3, [r7, #0]
 80173f8:	685a      	ldr	r2, [r3, #4]
 80173fa:	687b      	ldr	r3, [r7, #4]
 80173fc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80173fe:	687b      	ldr	r3, [r7, #4]
 8017400:	693a      	ldr	r2, [r7, #16]
 8017402:	621a      	str	r2, [r3, #32]
}
 8017404:	bf00      	nop
 8017406:	371c      	adds	r7, #28
 8017408:	46bd      	mov	sp, r7
 801740a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801740e:	4770      	bx	lr
 8017410:	fffeff8f 	.word	0xfffeff8f
 8017414:	40010000 	.word	0x40010000
 8017418:	40010400 	.word	0x40010400
 801741c:	40014000 	.word	0x40014000
 8017420:	40014400 	.word	0x40014400
 8017424:	40014800 	.word	0x40014800

08017428 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8017428:	b480      	push	{r7}
 801742a:	b087      	sub	sp, #28
 801742c:	af00      	add	r7, sp, #0
 801742e:	6078      	str	r0, [r7, #4]
 8017430:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8017432:	687b      	ldr	r3, [r7, #4]
 8017434:	6a1b      	ldr	r3, [r3, #32]
 8017436:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8017438:	687b      	ldr	r3, [r7, #4]
 801743a:	6a1b      	ldr	r3, [r3, #32]
 801743c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8017440:	687b      	ldr	r3, [r7, #4]
 8017442:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8017444:	687b      	ldr	r3, [r7, #4]
 8017446:	685b      	ldr	r3, [r3, #4]
 8017448:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 801744a:	687b      	ldr	r3, [r7, #4]
 801744c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801744e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8017450:	68fa      	ldr	r2, [r7, #12]
 8017452:	4b22      	ldr	r3, [pc, #136]	@ (80174dc <TIM_OC6_SetConfig+0xb4>)
 8017454:	4013      	ands	r3, r2
 8017456:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8017458:	683b      	ldr	r3, [r7, #0]
 801745a:	681b      	ldr	r3, [r3, #0]
 801745c:	021b      	lsls	r3, r3, #8
 801745e:	68fa      	ldr	r2, [r7, #12]
 8017460:	4313      	orrs	r3, r2
 8017462:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8017464:	693b      	ldr	r3, [r7, #16]
 8017466:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 801746a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 801746c:	683b      	ldr	r3, [r7, #0]
 801746e:	689b      	ldr	r3, [r3, #8]
 8017470:	051b      	lsls	r3, r3, #20
 8017472:	693a      	ldr	r2, [r7, #16]
 8017474:	4313      	orrs	r3, r2
 8017476:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8017478:	687b      	ldr	r3, [r7, #4]
 801747a:	4a19      	ldr	r2, [pc, #100]	@ (80174e0 <TIM_OC6_SetConfig+0xb8>)
 801747c:	4293      	cmp	r3, r2
 801747e:	d00f      	beq.n	80174a0 <TIM_OC6_SetConfig+0x78>
 8017480:	687b      	ldr	r3, [r7, #4]
 8017482:	4a18      	ldr	r2, [pc, #96]	@ (80174e4 <TIM_OC6_SetConfig+0xbc>)
 8017484:	4293      	cmp	r3, r2
 8017486:	d00b      	beq.n	80174a0 <TIM_OC6_SetConfig+0x78>
 8017488:	687b      	ldr	r3, [r7, #4]
 801748a:	4a17      	ldr	r2, [pc, #92]	@ (80174e8 <TIM_OC6_SetConfig+0xc0>)
 801748c:	4293      	cmp	r3, r2
 801748e:	d007      	beq.n	80174a0 <TIM_OC6_SetConfig+0x78>
 8017490:	687b      	ldr	r3, [r7, #4]
 8017492:	4a16      	ldr	r2, [pc, #88]	@ (80174ec <TIM_OC6_SetConfig+0xc4>)
 8017494:	4293      	cmp	r3, r2
 8017496:	d003      	beq.n	80174a0 <TIM_OC6_SetConfig+0x78>
 8017498:	687b      	ldr	r3, [r7, #4]
 801749a:	4a15      	ldr	r2, [pc, #84]	@ (80174f0 <TIM_OC6_SetConfig+0xc8>)
 801749c:	4293      	cmp	r3, r2
 801749e:	d109      	bne.n	80174b4 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80174a0:	697b      	ldr	r3, [r7, #20]
 80174a2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80174a6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80174a8:	683b      	ldr	r3, [r7, #0]
 80174aa:	695b      	ldr	r3, [r3, #20]
 80174ac:	029b      	lsls	r3, r3, #10
 80174ae:	697a      	ldr	r2, [r7, #20]
 80174b0:	4313      	orrs	r3, r2
 80174b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80174b4:	687b      	ldr	r3, [r7, #4]
 80174b6:	697a      	ldr	r2, [r7, #20]
 80174b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80174ba:	687b      	ldr	r3, [r7, #4]
 80174bc:	68fa      	ldr	r2, [r7, #12]
 80174be:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80174c0:	683b      	ldr	r3, [r7, #0]
 80174c2:	685a      	ldr	r2, [r3, #4]
 80174c4:	687b      	ldr	r3, [r7, #4]
 80174c6:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80174c8:	687b      	ldr	r3, [r7, #4]
 80174ca:	693a      	ldr	r2, [r7, #16]
 80174cc:	621a      	str	r2, [r3, #32]
}
 80174ce:	bf00      	nop
 80174d0:	371c      	adds	r7, #28
 80174d2:	46bd      	mov	sp, r7
 80174d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174d8:	4770      	bx	lr
 80174da:	bf00      	nop
 80174dc:	feff8fff 	.word	0xfeff8fff
 80174e0:	40010000 	.word	0x40010000
 80174e4:	40010400 	.word	0x40010400
 80174e8:	40014000 	.word	0x40014000
 80174ec:	40014400 	.word	0x40014400
 80174f0:	40014800 	.word	0x40014800

080174f4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80174f4:	b480      	push	{r7}
 80174f6:	b087      	sub	sp, #28
 80174f8:	af00      	add	r7, sp, #0
 80174fa:	60f8      	str	r0, [r7, #12]
 80174fc:	60b9      	str	r1, [r7, #8]
 80174fe:	607a      	str	r2, [r7, #4]
 8017500:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8017502:	68fb      	ldr	r3, [r7, #12]
 8017504:	6a1b      	ldr	r3, [r3, #32]
 8017506:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8017508:	68fb      	ldr	r3, [r7, #12]
 801750a:	6a1b      	ldr	r3, [r3, #32]
 801750c:	f023 0201 	bic.w	r2, r3, #1
 8017510:	68fb      	ldr	r3, [r7, #12]
 8017512:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8017514:	68fb      	ldr	r3, [r7, #12]
 8017516:	699b      	ldr	r3, [r3, #24]
 8017518:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 801751a:	68fb      	ldr	r3, [r7, #12]
 801751c:	4a2c      	ldr	r2, [pc, #176]	@ (80175d0 <TIM_TI1_SetConfig+0xdc>)
 801751e:	4293      	cmp	r3, r2
 8017520:	d023      	beq.n	801756a <TIM_TI1_SetConfig+0x76>
 8017522:	68fb      	ldr	r3, [r7, #12]
 8017524:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8017528:	d01f      	beq.n	801756a <TIM_TI1_SetConfig+0x76>
 801752a:	68fb      	ldr	r3, [r7, #12]
 801752c:	4a29      	ldr	r2, [pc, #164]	@ (80175d4 <TIM_TI1_SetConfig+0xe0>)
 801752e:	4293      	cmp	r3, r2
 8017530:	d01b      	beq.n	801756a <TIM_TI1_SetConfig+0x76>
 8017532:	68fb      	ldr	r3, [r7, #12]
 8017534:	4a28      	ldr	r2, [pc, #160]	@ (80175d8 <TIM_TI1_SetConfig+0xe4>)
 8017536:	4293      	cmp	r3, r2
 8017538:	d017      	beq.n	801756a <TIM_TI1_SetConfig+0x76>
 801753a:	68fb      	ldr	r3, [r7, #12]
 801753c:	4a27      	ldr	r2, [pc, #156]	@ (80175dc <TIM_TI1_SetConfig+0xe8>)
 801753e:	4293      	cmp	r3, r2
 8017540:	d013      	beq.n	801756a <TIM_TI1_SetConfig+0x76>
 8017542:	68fb      	ldr	r3, [r7, #12]
 8017544:	4a26      	ldr	r2, [pc, #152]	@ (80175e0 <TIM_TI1_SetConfig+0xec>)
 8017546:	4293      	cmp	r3, r2
 8017548:	d00f      	beq.n	801756a <TIM_TI1_SetConfig+0x76>
 801754a:	68fb      	ldr	r3, [r7, #12]
 801754c:	4a25      	ldr	r2, [pc, #148]	@ (80175e4 <TIM_TI1_SetConfig+0xf0>)
 801754e:	4293      	cmp	r3, r2
 8017550:	d00b      	beq.n	801756a <TIM_TI1_SetConfig+0x76>
 8017552:	68fb      	ldr	r3, [r7, #12]
 8017554:	4a24      	ldr	r2, [pc, #144]	@ (80175e8 <TIM_TI1_SetConfig+0xf4>)
 8017556:	4293      	cmp	r3, r2
 8017558:	d007      	beq.n	801756a <TIM_TI1_SetConfig+0x76>
 801755a:	68fb      	ldr	r3, [r7, #12]
 801755c:	4a23      	ldr	r2, [pc, #140]	@ (80175ec <TIM_TI1_SetConfig+0xf8>)
 801755e:	4293      	cmp	r3, r2
 8017560:	d003      	beq.n	801756a <TIM_TI1_SetConfig+0x76>
 8017562:	68fb      	ldr	r3, [r7, #12]
 8017564:	4a22      	ldr	r2, [pc, #136]	@ (80175f0 <TIM_TI1_SetConfig+0xfc>)
 8017566:	4293      	cmp	r3, r2
 8017568:	d101      	bne.n	801756e <TIM_TI1_SetConfig+0x7a>
 801756a:	2301      	movs	r3, #1
 801756c:	e000      	b.n	8017570 <TIM_TI1_SetConfig+0x7c>
 801756e:	2300      	movs	r3, #0
 8017570:	2b00      	cmp	r3, #0
 8017572:	d008      	beq.n	8017586 <TIM_TI1_SetConfig+0x92>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8017574:	697b      	ldr	r3, [r7, #20]
 8017576:	f023 0303 	bic.w	r3, r3, #3
 801757a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 801757c:	697a      	ldr	r2, [r7, #20]
 801757e:	687b      	ldr	r3, [r7, #4]
 8017580:	4313      	orrs	r3, r2
 8017582:	617b      	str	r3, [r7, #20]
 8017584:	e003      	b.n	801758e <TIM_TI1_SetConfig+0x9a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8017586:	697b      	ldr	r3, [r7, #20]
 8017588:	f043 0301 	orr.w	r3, r3, #1
 801758c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 801758e:	697b      	ldr	r3, [r7, #20]
 8017590:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8017594:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8017596:	683b      	ldr	r3, [r7, #0]
 8017598:	011b      	lsls	r3, r3, #4
 801759a:	b2db      	uxtb	r3, r3
 801759c:	697a      	ldr	r2, [r7, #20]
 801759e:	4313      	orrs	r3, r2
 80175a0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80175a2:	693b      	ldr	r3, [r7, #16]
 80175a4:	f023 030a 	bic.w	r3, r3, #10
 80175a8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80175aa:	68bb      	ldr	r3, [r7, #8]
 80175ac:	f003 030a 	and.w	r3, r3, #10
 80175b0:	693a      	ldr	r2, [r7, #16]
 80175b2:	4313      	orrs	r3, r2
 80175b4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80175b6:	68fb      	ldr	r3, [r7, #12]
 80175b8:	697a      	ldr	r2, [r7, #20]
 80175ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80175bc:	68fb      	ldr	r3, [r7, #12]
 80175be:	693a      	ldr	r2, [r7, #16]
 80175c0:	621a      	str	r2, [r3, #32]
}
 80175c2:	bf00      	nop
 80175c4:	371c      	adds	r7, #28
 80175c6:	46bd      	mov	sp, r7
 80175c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175cc:	4770      	bx	lr
 80175ce:	bf00      	nop
 80175d0:	40010000 	.word	0x40010000
 80175d4:	40000400 	.word	0x40000400
 80175d8:	40000800 	.word	0x40000800
 80175dc:	40000c00 	.word	0x40000c00
 80175e0:	40010400 	.word	0x40010400
 80175e4:	40001800 	.word	0x40001800
 80175e8:	40014000 	.word	0x40014000
 80175ec:	4000e000 	.word	0x4000e000
 80175f0:	4000e400 	.word	0x4000e400

080175f4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80175f4:	b480      	push	{r7}
 80175f6:	b087      	sub	sp, #28
 80175f8:	af00      	add	r7, sp, #0
 80175fa:	60f8      	str	r0, [r7, #12]
 80175fc:	60b9      	str	r1, [r7, #8]
 80175fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8017600:	68fb      	ldr	r3, [r7, #12]
 8017602:	6a1b      	ldr	r3, [r3, #32]
 8017604:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8017606:	68fb      	ldr	r3, [r7, #12]
 8017608:	6a1b      	ldr	r3, [r3, #32]
 801760a:	f023 0201 	bic.w	r2, r3, #1
 801760e:	68fb      	ldr	r3, [r7, #12]
 8017610:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8017612:	68fb      	ldr	r3, [r7, #12]
 8017614:	699b      	ldr	r3, [r3, #24]
 8017616:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8017618:	693b      	ldr	r3, [r7, #16]
 801761a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 801761e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8017620:	687b      	ldr	r3, [r7, #4]
 8017622:	011b      	lsls	r3, r3, #4
 8017624:	693a      	ldr	r2, [r7, #16]
 8017626:	4313      	orrs	r3, r2
 8017628:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801762a:	697b      	ldr	r3, [r7, #20]
 801762c:	f023 030a 	bic.w	r3, r3, #10
 8017630:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8017632:	697a      	ldr	r2, [r7, #20]
 8017634:	68bb      	ldr	r3, [r7, #8]
 8017636:	4313      	orrs	r3, r2
 8017638:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 801763a:	68fb      	ldr	r3, [r7, #12]
 801763c:	693a      	ldr	r2, [r7, #16]
 801763e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8017640:	68fb      	ldr	r3, [r7, #12]
 8017642:	697a      	ldr	r2, [r7, #20]
 8017644:	621a      	str	r2, [r3, #32]
}
 8017646:	bf00      	nop
 8017648:	371c      	adds	r7, #28
 801764a:	46bd      	mov	sp, r7
 801764c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017650:	4770      	bx	lr

08017652 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8017652:	b480      	push	{r7}
 8017654:	b087      	sub	sp, #28
 8017656:	af00      	add	r7, sp, #0
 8017658:	60f8      	str	r0, [r7, #12]
 801765a:	60b9      	str	r1, [r7, #8]
 801765c:	607a      	str	r2, [r7, #4]
 801765e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8017660:	68fb      	ldr	r3, [r7, #12]
 8017662:	6a1b      	ldr	r3, [r3, #32]
 8017664:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8017666:	68fb      	ldr	r3, [r7, #12]
 8017668:	6a1b      	ldr	r3, [r3, #32]
 801766a:	f023 0210 	bic.w	r2, r3, #16
 801766e:	68fb      	ldr	r3, [r7, #12]
 8017670:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8017672:	68fb      	ldr	r3, [r7, #12]
 8017674:	699b      	ldr	r3, [r3, #24]
 8017676:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8017678:	693b      	ldr	r3, [r7, #16]
 801767a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 801767e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8017680:	687b      	ldr	r3, [r7, #4]
 8017682:	021b      	lsls	r3, r3, #8
 8017684:	693a      	ldr	r2, [r7, #16]
 8017686:	4313      	orrs	r3, r2
 8017688:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 801768a:	693b      	ldr	r3, [r7, #16]
 801768c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8017690:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8017692:	683b      	ldr	r3, [r7, #0]
 8017694:	031b      	lsls	r3, r3, #12
 8017696:	b29b      	uxth	r3, r3
 8017698:	693a      	ldr	r2, [r7, #16]
 801769a:	4313      	orrs	r3, r2
 801769c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 801769e:	697b      	ldr	r3, [r7, #20]
 80176a0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80176a4:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80176a6:	68bb      	ldr	r3, [r7, #8]
 80176a8:	011b      	lsls	r3, r3, #4
 80176aa:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80176ae:	697a      	ldr	r2, [r7, #20]
 80176b0:	4313      	orrs	r3, r2
 80176b2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80176b4:	68fb      	ldr	r3, [r7, #12]
 80176b6:	693a      	ldr	r2, [r7, #16]
 80176b8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80176ba:	68fb      	ldr	r3, [r7, #12]
 80176bc:	697a      	ldr	r2, [r7, #20]
 80176be:	621a      	str	r2, [r3, #32]
}
 80176c0:	bf00      	nop
 80176c2:	371c      	adds	r7, #28
 80176c4:	46bd      	mov	sp, r7
 80176c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176ca:	4770      	bx	lr

080176cc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80176cc:	b480      	push	{r7}
 80176ce:	b087      	sub	sp, #28
 80176d0:	af00      	add	r7, sp, #0
 80176d2:	60f8      	str	r0, [r7, #12]
 80176d4:	60b9      	str	r1, [r7, #8]
 80176d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80176d8:	68fb      	ldr	r3, [r7, #12]
 80176da:	6a1b      	ldr	r3, [r3, #32]
 80176dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80176de:	68fb      	ldr	r3, [r7, #12]
 80176e0:	6a1b      	ldr	r3, [r3, #32]
 80176e2:	f023 0210 	bic.w	r2, r3, #16
 80176e6:	68fb      	ldr	r3, [r7, #12]
 80176e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80176ea:	68fb      	ldr	r3, [r7, #12]
 80176ec:	699b      	ldr	r3, [r3, #24]
 80176ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80176f0:	693b      	ldr	r3, [r7, #16]
 80176f2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80176f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80176f8:	687b      	ldr	r3, [r7, #4]
 80176fa:	031b      	lsls	r3, r3, #12
 80176fc:	693a      	ldr	r2, [r7, #16]
 80176fe:	4313      	orrs	r3, r2
 8017700:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8017702:	697b      	ldr	r3, [r7, #20]
 8017704:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8017708:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 801770a:	68bb      	ldr	r3, [r7, #8]
 801770c:	011b      	lsls	r3, r3, #4
 801770e:	697a      	ldr	r2, [r7, #20]
 8017710:	4313      	orrs	r3, r2
 8017712:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8017714:	68fb      	ldr	r3, [r7, #12]
 8017716:	693a      	ldr	r2, [r7, #16]
 8017718:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801771a:	68fb      	ldr	r3, [r7, #12]
 801771c:	697a      	ldr	r2, [r7, #20]
 801771e:	621a      	str	r2, [r3, #32]
}
 8017720:	bf00      	nop
 8017722:	371c      	adds	r7, #28
 8017724:	46bd      	mov	sp, r7
 8017726:	f85d 7b04 	ldr.w	r7, [sp], #4
 801772a:	4770      	bx	lr

0801772c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 801772c:	b480      	push	{r7}
 801772e:	b087      	sub	sp, #28
 8017730:	af00      	add	r7, sp, #0
 8017732:	60f8      	str	r0, [r7, #12]
 8017734:	60b9      	str	r1, [r7, #8]
 8017736:	607a      	str	r2, [r7, #4]
 8017738:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 801773a:	68fb      	ldr	r3, [r7, #12]
 801773c:	6a1b      	ldr	r3, [r3, #32]
 801773e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8017740:	68fb      	ldr	r3, [r7, #12]
 8017742:	6a1b      	ldr	r3, [r3, #32]
 8017744:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8017748:	68fb      	ldr	r3, [r7, #12]
 801774a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 801774c:	68fb      	ldr	r3, [r7, #12]
 801774e:	69db      	ldr	r3, [r3, #28]
 8017750:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8017752:	693b      	ldr	r3, [r7, #16]
 8017754:	f023 0303 	bic.w	r3, r3, #3
 8017758:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 801775a:	693a      	ldr	r2, [r7, #16]
 801775c:	687b      	ldr	r3, [r7, #4]
 801775e:	4313      	orrs	r3, r2
 8017760:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8017762:	693b      	ldr	r3, [r7, #16]
 8017764:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8017768:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 801776a:	683b      	ldr	r3, [r7, #0]
 801776c:	011b      	lsls	r3, r3, #4
 801776e:	b2db      	uxtb	r3, r3
 8017770:	693a      	ldr	r2, [r7, #16]
 8017772:	4313      	orrs	r3, r2
 8017774:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8017776:	697b      	ldr	r3, [r7, #20]
 8017778:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 801777c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 801777e:	68bb      	ldr	r3, [r7, #8]
 8017780:	021b      	lsls	r3, r3, #8
 8017782:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8017786:	697a      	ldr	r2, [r7, #20]
 8017788:	4313      	orrs	r3, r2
 801778a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 801778c:	68fb      	ldr	r3, [r7, #12]
 801778e:	693a      	ldr	r2, [r7, #16]
 8017790:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8017792:	68fb      	ldr	r3, [r7, #12]
 8017794:	697a      	ldr	r2, [r7, #20]
 8017796:	621a      	str	r2, [r3, #32]
}
 8017798:	bf00      	nop
 801779a:	371c      	adds	r7, #28
 801779c:	46bd      	mov	sp, r7
 801779e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177a2:	4770      	bx	lr

080177a4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80177a4:	b480      	push	{r7}
 80177a6:	b087      	sub	sp, #28
 80177a8:	af00      	add	r7, sp, #0
 80177aa:	60f8      	str	r0, [r7, #12]
 80177ac:	60b9      	str	r1, [r7, #8]
 80177ae:	607a      	str	r2, [r7, #4]
 80177b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 80177b2:	68fb      	ldr	r3, [r7, #12]
 80177b4:	6a1b      	ldr	r3, [r3, #32]
 80177b6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80177b8:	68fb      	ldr	r3, [r7, #12]
 80177ba:	6a1b      	ldr	r3, [r3, #32]
 80177bc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80177c0:	68fb      	ldr	r3, [r7, #12]
 80177c2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80177c4:	68fb      	ldr	r3, [r7, #12]
 80177c6:	69db      	ldr	r3, [r3, #28]
 80177c8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80177ca:	693b      	ldr	r3, [r7, #16]
 80177cc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80177d0:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80177d2:	687b      	ldr	r3, [r7, #4]
 80177d4:	021b      	lsls	r3, r3, #8
 80177d6:	693a      	ldr	r2, [r7, #16]
 80177d8:	4313      	orrs	r3, r2
 80177da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80177dc:	693b      	ldr	r3, [r7, #16]
 80177de:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80177e2:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80177e4:	683b      	ldr	r3, [r7, #0]
 80177e6:	031b      	lsls	r3, r3, #12
 80177e8:	b29b      	uxth	r3, r3
 80177ea:	693a      	ldr	r2, [r7, #16]
 80177ec:	4313      	orrs	r3, r2
 80177ee:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80177f0:	697b      	ldr	r3, [r7, #20]
 80177f2:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 80177f6:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80177f8:	68bb      	ldr	r3, [r7, #8]
 80177fa:	031b      	lsls	r3, r3, #12
 80177fc:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8017800:	697a      	ldr	r2, [r7, #20]
 8017802:	4313      	orrs	r3, r2
 8017804:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8017806:	68fb      	ldr	r3, [r7, #12]
 8017808:	693a      	ldr	r2, [r7, #16]
 801780a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 801780c:	68fb      	ldr	r3, [r7, #12]
 801780e:	697a      	ldr	r2, [r7, #20]
 8017810:	621a      	str	r2, [r3, #32]
}
 8017812:	bf00      	nop
 8017814:	371c      	adds	r7, #28
 8017816:	46bd      	mov	sp, r7
 8017818:	f85d 7b04 	ldr.w	r7, [sp], #4
 801781c:	4770      	bx	lr
	...

08017820 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8017820:	b480      	push	{r7}
 8017822:	b085      	sub	sp, #20
 8017824:	af00      	add	r7, sp, #0
 8017826:	6078      	str	r0, [r7, #4]
 8017828:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 801782a:	687b      	ldr	r3, [r7, #4]
 801782c:	689b      	ldr	r3, [r3, #8]
 801782e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8017830:	68fa      	ldr	r2, [r7, #12]
 8017832:	4b09      	ldr	r3, [pc, #36]	@ (8017858 <TIM_ITRx_SetConfig+0x38>)
 8017834:	4013      	ands	r3, r2
 8017836:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8017838:	683a      	ldr	r2, [r7, #0]
 801783a:	68fb      	ldr	r3, [r7, #12]
 801783c:	4313      	orrs	r3, r2
 801783e:	f043 0307 	orr.w	r3, r3, #7
 8017842:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8017844:	687b      	ldr	r3, [r7, #4]
 8017846:	68fa      	ldr	r2, [r7, #12]
 8017848:	609a      	str	r2, [r3, #8]
}
 801784a:	bf00      	nop
 801784c:	3714      	adds	r7, #20
 801784e:	46bd      	mov	sp, r7
 8017850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017854:	4770      	bx	lr
 8017856:	bf00      	nop
 8017858:	ffcfff8f 	.word	0xffcfff8f

0801785c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 801785c:	b480      	push	{r7}
 801785e:	b087      	sub	sp, #28
 8017860:	af00      	add	r7, sp, #0
 8017862:	60f8      	str	r0, [r7, #12]
 8017864:	60b9      	str	r1, [r7, #8]
 8017866:	607a      	str	r2, [r7, #4]
 8017868:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 801786a:	68fb      	ldr	r3, [r7, #12]
 801786c:	689b      	ldr	r3, [r3, #8]
 801786e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8017870:	697b      	ldr	r3, [r7, #20]
 8017872:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8017876:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8017878:	683b      	ldr	r3, [r7, #0]
 801787a:	021a      	lsls	r2, r3, #8
 801787c:	687b      	ldr	r3, [r7, #4]
 801787e:	431a      	orrs	r2, r3
 8017880:	68bb      	ldr	r3, [r7, #8]
 8017882:	4313      	orrs	r3, r2
 8017884:	697a      	ldr	r2, [r7, #20]
 8017886:	4313      	orrs	r3, r2
 8017888:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801788a:	68fb      	ldr	r3, [r7, #12]
 801788c:	697a      	ldr	r2, [r7, #20]
 801788e:	609a      	str	r2, [r3, #8]
}
 8017890:	bf00      	nop
 8017892:	371c      	adds	r7, #28
 8017894:	46bd      	mov	sp, r7
 8017896:	f85d 7b04 	ldr.w	r7, [sp], #4
 801789a:	4770      	bx	lr

0801789c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 801789c:	b480      	push	{r7}
 801789e:	b087      	sub	sp, #28
 80178a0:	af00      	add	r7, sp, #0
 80178a2:	60f8      	str	r0, [r7, #12]
 80178a4:	60b9      	str	r1, [r7, #8]
 80178a6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80178a8:	68bb      	ldr	r3, [r7, #8]
 80178aa:	f003 031f 	and.w	r3, r3, #31
 80178ae:	2201      	movs	r2, #1
 80178b0:	fa02 f303 	lsl.w	r3, r2, r3
 80178b4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80178b6:	68fb      	ldr	r3, [r7, #12]
 80178b8:	6a1a      	ldr	r2, [r3, #32]
 80178ba:	697b      	ldr	r3, [r7, #20]
 80178bc:	43db      	mvns	r3, r3
 80178be:	401a      	ands	r2, r3
 80178c0:	68fb      	ldr	r3, [r7, #12]
 80178c2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80178c4:	68fb      	ldr	r3, [r7, #12]
 80178c6:	6a1a      	ldr	r2, [r3, #32]
 80178c8:	68bb      	ldr	r3, [r7, #8]
 80178ca:	f003 031f 	and.w	r3, r3, #31
 80178ce:	6879      	ldr	r1, [r7, #4]
 80178d0:	fa01 f303 	lsl.w	r3, r1, r3
 80178d4:	431a      	orrs	r2, r3
 80178d6:	68fb      	ldr	r3, [r7, #12]
 80178d8:	621a      	str	r2, [r3, #32]
}
 80178da:	bf00      	nop
 80178dc:	371c      	adds	r7, #28
 80178de:	46bd      	mov	sp, r7
 80178e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178e4:	4770      	bx	lr
	...

080178e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80178e8:	b480      	push	{r7}
 80178ea:	b085      	sub	sp, #20
 80178ec:	af00      	add	r7, sp, #0
 80178ee:	6078      	str	r0, [r7, #4]
 80178f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80178f2:	687b      	ldr	r3, [r7, #4]
 80178f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80178f8:	2b01      	cmp	r3, #1
 80178fa:	d101      	bne.n	8017900 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80178fc:	2302      	movs	r3, #2
 80178fe:	e077      	b.n	80179f0 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 8017900:	687b      	ldr	r3, [r7, #4]
 8017902:	2201      	movs	r2, #1
 8017904:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8017908:	687b      	ldr	r3, [r7, #4]
 801790a:	2202      	movs	r2, #2
 801790c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8017910:	687b      	ldr	r3, [r7, #4]
 8017912:	681b      	ldr	r3, [r3, #0]
 8017914:	685b      	ldr	r3, [r3, #4]
 8017916:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8017918:	687b      	ldr	r3, [r7, #4]
 801791a:	681b      	ldr	r3, [r3, #0]
 801791c:	689b      	ldr	r3, [r3, #8]
 801791e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8017920:	687b      	ldr	r3, [r7, #4]
 8017922:	681b      	ldr	r3, [r3, #0]
 8017924:	4a35      	ldr	r2, [pc, #212]	@ (80179fc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8017926:	4293      	cmp	r3, r2
 8017928:	d004      	beq.n	8017934 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 801792a:	687b      	ldr	r3, [r7, #4]
 801792c:	681b      	ldr	r3, [r3, #0]
 801792e:	4a34      	ldr	r2, [pc, #208]	@ (8017a00 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8017930:	4293      	cmp	r3, r2
 8017932:	d108      	bne.n	8017946 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8017934:	68fb      	ldr	r3, [r7, #12]
 8017936:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 801793a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 801793c:	683b      	ldr	r3, [r7, #0]
 801793e:	685b      	ldr	r3, [r3, #4]
 8017940:	68fa      	ldr	r2, [r7, #12]
 8017942:	4313      	orrs	r3, r2
 8017944:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8017946:	68fb      	ldr	r3, [r7, #12]
 8017948:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801794c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801794e:	683b      	ldr	r3, [r7, #0]
 8017950:	681b      	ldr	r3, [r3, #0]
 8017952:	68fa      	ldr	r2, [r7, #12]
 8017954:	4313      	orrs	r3, r2
 8017956:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8017958:	687b      	ldr	r3, [r7, #4]
 801795a:	681b      	ldr	r3, [r3, #0]
 801795c:	68fa      	ldr	r2, [r7, #12]
 801795e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8017960:	687b      	ldr	r3, [r7, #4]
 8017962:	681b      	ldr	r3, [r3, #0]
 8017964:	4a25      	ldr	r2, [pc, #148]	@ (80179fc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8017966:	4293      	cmp	r3, r2
 8017968:	d02c      	beq.n	80179c4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 801796a:	687b      	ldr	r3, [r7, #4]
 801796c:	681b      	ldr	r3, [r3, #0]
 801796e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8017972:	d027      	beq.n	80179c4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8017974:	687b      	ldr	r3, [r7, #4]
 8017976:	681b      	ldr	r3, [r3, #0]
 8017978:	4a22      	ldr	r2, [pc, #136]	@ (8017a04 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 801797a:	4293      	cmp	r3, r2
 801797c:	d022      	beq.n	80179c4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 801797e:	687b      	ldr	r3, [r7, #4]
 8017980:	681b      	ldr	r3, [r3, #0]
 8017982:	4a21      	ldr	r2, [pc, #132]	@ (8017a08 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8017984:	4293      	cmp	r3, r2
 8017986:	d01d      	beq.n	80179c4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8017988:	687b      	ldr	r3, [r7, #4]
 801798a:	681b      	ldr	r3, [r3, #0]
 801798c:	4a1f      	ldr	r2, [pc, #124]	@ (8017a0c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 801798e:	4293      	cmp	r3, r2
 8017990:	d018      	beq.n	80179c4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8017992:	687b      	ldr	r3, [r7, #4]
 8017994:	681b      	ldr	r3, [r3, #0]
 8017996:	4a1a      	ldr	r2, [pc, #104]	@ (8017a00 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8017998:	4293      	cmp	r3, r2
 801799a:	d013      	beq.n	80179c4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 801799c:	687b      	ldr	r3, [r7, #4]
 801799e:	681b      	ldr	r3, [r3, #0]
 80179a0:	4a1b      	ldr	r2, [pc, #108]	@ (8017a10 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80179a2:	4293      	cmp	r3, r2
 80179a4:	d00e      	beq.n	80179c4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80179a6:	687b      	ldr	r3, [r7, #4]
 80179a8:	681b      	ldr	r3, [r3, #0]
 80179aa:	4a1a      	ldr	r2, [pc, #104]	@ (8017a14 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 80179ac:	4293      	cmp	r3, r2
 80179ae:	d009      	beq.n	80179c4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80179b0:	687b      	ldr	r3, [r7, #4]
 80179b2:	681b      	ldr	r3, [r3, #0]
 80179b4:	4a18      	ldr	r2, [pc, #96]	@ (8017a18 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 80179b6:	4293      	cmp	r3, r2
 80179b8:	d004      	beq.n	80179c4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80179ba:	687b      	ldr	r3, [r7, #4]
 80179bc:	681b      	ldr	r3, [r3, #0]
 80179be:	4a17      	ldr	r2, [pc, #92]	@ (8017a1c <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 80179c0:	4293      	cmp	r3, r2
 80179c2:	d10c      	bne.n	80179de <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80179c4:	68bb      	ldr	r3, [r7, #8]
 80179c6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80179ca:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80179cc:	683b      	ldr	r3, [r7, #0]
 80179ce:	689b      	ldr	r3, [r3, #8]
 80179d0:	68ba      	ldr	r2, [r7, #8]
 80179d2:	4313      	orrs	r3, r2
 80179d4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80179d6:	687b      	ldr	r3, [r7, #4]
 80179d8:	681b      	ldr	r3, [r3, #0]
 80179da:	68ba      	ldr	r2, [r7, #8]
 80179dc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80179de:	687b      	ldr	r3, [r7, #4]
 80179e0:	2201      	movs	r2, #1
 80179e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80179e6:	687b      	ldr	r3, [r7, #4]
 80179e8:	2200      	movs	r2, #0
 80179ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80179ee:	2300      	movs	r3, #0
}
 80179f0:	4618      	mov	r0, r3
 80179f2:	3714      	adds	r7, #20
 80179f4:	46bd      	mov	sp, r7
 80179f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179fa:	4770      	bx	lr
 80179fc:	40010000 	.word	0x40010000
 8017a00:	40010400 	.word	0x40010400
 8017a04:	40000400 	.word	0x40000400
 8017a08:	40000800 	.word	0x40000800
 8017a0c:	40000c00 	.word	0x40000c00
 8017a10:	40001800 	.word	0x40001800
 8017a14:	40014000 	.word	0x40014000
 8017a18:	4000e000 	.word	0x4000e000
 8017a1c:	4000e400 	.word	0x4000e400

08017a20 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8017a20:	b480      	push	{r7}
 8017a22:	b085      	sub	sp, #20
 8017a24:	af00      	add	r7, sp, #0
 8017a26:	6078      	str	r0, [r7, #4]
 8017a28:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8017a2a:	2300      	movs	r3, #0
 8017a2c:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 8017a2e:	687b      	ldr	r3, [r7, #4]
 8017a30:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8017a34:	2b01      	cmp	r3, #1
 8017a36:	d101      	bne.n	8017a3c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8017a38:	2302      	movs	r3, #2
 8017a3a:	e073      	b.n	8017b24 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 8017a3c:	687b      	ldr	r3, [r7, #4]
 8017a3e:	2201      	movs	r2, #1
 8017a40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8017a44:	68fb      	ldr	r3, [r7, #12]
 8017a46:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8017a4a:	683b      	ldr	r3, [r7, #0]
 8017a4c:	68db      	ldr	r3, [r3, #12]
 8017a4e:	4313      	orrs	r3, r2
 8017a50:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8017a52:	68fb      	ldr	r3, [r7, #12]
 8017a54:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8017a58:	683b      	ldr	r3, [r7, #0]
 8017a5a:	689b      	ldr	r3, [r3, #8]
 8017a5c:	4313      	orrs	r3, r2
 8017a5e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8017a60:	68fb      	ldr	r3, [r7, #12]
 8017a62:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8017a66:	683b      	ldr	r3, [r7, #0]
 8017a68:	685b      	ldr	r3, [r3, #4]
 8017a6a:	4313      	orrs	r3, r2
 8017a6c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8017a6e:	68fb      	ldr	r3, [r7, #12]
 8017a70:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8017a74:	683b      	ldr	r3, [r7, #0]
 8017a76:	681b      	ldr	r3, [r3, #0]
 8017a78:	4313      	orrs	r3, r2
 8017a7a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8017a7c:	68fb      	ldr	r3, [r7, #12]
 8017a7e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8017a82:	683b      	ldr	r3, [r7, #0]
 8017a84:	691b      	ldr	r3, [r3, #16]
 8017a86:	4313      	orrs	r3, r2
 8017a88:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8017a8a:	68fb      	ldr	r3, [r7, #12]
 8017a8c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8017a90:	683b      	ldr	r3, [r7, #0]
 8017a92:	695b      	ldr	r3, [r3, #20]
 8017a94:	4313      	orrs	r3, r2
 8017a96:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8017a98:	68fb      	ldr	r3, [r7, #12]
 8017a9a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8017a9e:	683b      	ldr	r3, [r7, #0]
 8017aa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017aa2:	4313      	orrs	r3, r2
 8017aa4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8017aa6:	68fb      	ldr	r3, [r7, #12]
 8017aa8:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8017aac:	683b      	ldr	r3, [r7, #0]
 8017aae:	699b      	ldr	r3, [r3, #24]
 8017ab0:	041b      	lsls	r3, r3, #16
 8017ab2:	4313      	orrs	r3, r2
 8017ab4:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8017ab6:	68fb      	ldr	r3, [r7, #12]
 8017ab8:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8017abc:	683b      	ldr	r3, [r7, #0]
 8017abe:	69db      	ldr	r3, [r3, #28]
 8017ac0:	4313      	orrs	r3, r2
 8017ac2:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8017ac4:	687b      	ldr	r3, [r7, #4]
 8017ac6:	681b      	ldr	r3, [r3, #0]
 8017ac8:	4a19      	ldr	r2, [pc, #100]	@ (8017b30 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8017aca:	4293      	cmp	r3, r2
 8017acc:	d004      	beq.n	8017ad8 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 8017ace:	687b      	ldr	r3, [r7, #4]
 8017ad0:	681b      	ldr	r3, [r3, #0]
 8017ad2:	4a18      	ldr	r2, [pc, #96]	@ (8017b34 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8017ad4:	4293      	cmp	r3, r2
 8017ad6:	d11c      	bne.n	8017b12 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8017ad8:	68fb      	ldr	r3, [r7, #12]
 8017ada:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8017ade:	683b      	ldr	r3, [r7, #0]
 8017ae0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017ae2:	051b      	lsls	r3, r3, #20
 8017ae4:	4313      	orrs	r3, r2
 8017ae6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8017ae8:	68fb      	ldr	r3, [r7, #12]
 8017aea:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8017aee:	683b      	ldr	r3, [r7, #0]
 8017af0:	6a1b      	ldr	r3, [r3, #32]
 8017af2:	4313      	orrs	r3, r2
 8017af4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8017af6:	68fb      	ldr	r3, [r7, #12]
 8017af8:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8017afc:	683b      	ldr	r3, [r7, #0]
 8017afe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017b00:	4313      	orrs	r3, r2
 8017b02:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8017b04:	68fb      	ldr	r3, [r7, #12]
 8017b06:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8017b0a:	683b      	ldr	r3, [r7, #0]
 8017b0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017b0e:	4313      	orrs	r3, r2
 8017b10:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8017b12:	687b      	ldr	r3, [r7, #4]
 8017b14:	681b      	ldr	r3, [r3, #0]
 8017b16:	68fa      	ldr	r2, [r7, #12]
 8017b18:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8017b1a:	687b      	ldr	r3, [r7, #4]
 8017b1c:	2200      	movs	r2, #0
 8017b1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8017b22:	2300      	movs	r3, #0
}
 8017b24:	4618      	mov	r0, r3
 8017b26:	3714      	adds	r7, #20
 8017b28:	46bd      	mov	sp, r7
 8017b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b2e:	4770      	bx	lr
 8017b30:	40010000 	.word	0x40010000
 8017b34:	40010400 	.word	0x40010400

08017b38 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8017b38:	b480      	push	{r7}
 8017b3a:	b083      	sub	sp, #12
 8017b3c:	af00      	add	r7, sp, #0
 8017b3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8017b40:	bf00      	nop
 8017b42:	370c      	adds	r7, #12
 8017b44:	46bd      	mov	sp, r7
 8017b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b4a:	4770      	bx	lr

08017b4c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8017b4c:	b480      	push	{r7}
 8017b4e:	b083      	sub	sp, #12
 8017b50:	af00      	add	r7, sp, #0
 8017b52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8017b54:	bf00      	nop
 8017b56:	370c      	adds	r7, #12
 8017b58:	46bd      	mov	sp, r7
 8017b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b5e:	4770      	bx	lr

08017b60 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8017b60:	b480      	push	{r7}
 8017b62:	b083      	sub	sp, #12
 8017b64:	af00      	add	r7, sp, #0
 8017b66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8017b68:	bf00      	nop
 8017b6a:	370c      	adds	r7, #12
 8017b6c:	46bd      	mov	sp, r7
 8017b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b72:	4770      	bx	lr

08017b74 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8017b74:	b580      	push	{r7, lr}
 8017b76:	b082      	sub	sp, #8
 8017b78:	af00      	add	r7, sp, #0
 8017b7a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8017b7c:	687b      	ldr	r3, [r7, #4]
 8017b7e:	2b00      	cmp	r3, #0
 8017b80:	d101      	bne.n	8017b86 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8017b82:	2301      	movs	r3, #1
 8017b84:	e042      	b.n	8017c0c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8017b86:	687b      	ldr	r3, [r7, #4]
 8017b88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8017b8c:	2b00      	cmp	r3, #0
 8017b8e:	d106      	bne.n	8017b9e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8017b90:	687b      	ldr	r3, [r7, #4]
 8017b92:	2200      	movs	r2, #0
 8017b94:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8017b98:	6878      	ldr	r0, [r7, #4]
 8017b9a:	f7f1 fa29 	bl	8008ff0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8017b9e:	687b      	ldr	r3, [r7, #4]
 8017ba0:	2224      	movs	r2, #36	@ 0x24
 8017ba2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8017ba6:	687b      	ldr	r3, [r7, #4]
 8017ba8:	681b      	ldr	r3, [r3, #0]
 8017baa:	681a      	ldr	r2, [r3, #0]
 8017bac:	687b      	ldr	r3, [r7, #4]
 8017bae:	681b      	ldr	r3, [r3, #0]
 8017bb0:	f022 0201 	bic.w	r2, r2, #1
 8017bb4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8017bb6:	687b      	ldr	r3, [r7, #4]
 8017bb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017bba:	2b00      	cmp	r3, #0
 8017bbc:	d002      	beq.n	8017bc4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8017bbe:	6878      	ldr	r0, [r7, #4]
 8017bc0:	f001 fbf8 	bl	80193b4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8017bc4:	6878      	ldr	r0, [r7, #4]
 8017bc6:	f000 fd89 	bl	80186dc <UART_SetConfig>
 8017bca:	4603      	mov	r3, r0
 8017bcc:	2b01      	cmp	r3, #1
 8017bce:	d101      	bne.n	8017bd4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8017bd0:	2301      	movs	r3, #1
 8017bd2:	e01b      	b.n	8017c0c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8017bd4:	687b      	ldr	r3, [r7, #4]
 8017bd6:	681b      	ldr	r3, [r3, #0]
 8017bd8:	685a      	ldr	r2, [r3, #4]
 8017bda:	687b      	ldr	r3, [r7, #4]
 8017bdc:	681b      	ldr	r3, [r3, #0]
 8017bde:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8017be2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8017be4:	687b      	ldr	r3, [r7, #4]
 8017be6:	681b      	ldr	r3, [r3, #0]
 8017be8:	689a      	ldr	r2, [r3, #8]
 8017bea:	687b      	ldr	r3, [r7, #4]
 8017bec:	681b      	ldr	r3, [r3, #0]
 8017bee:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8017bf2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8017bf4:	687b      	ldr	r3, [r7, #4]
 8017bf6:	681b      	ldr	r3, [r3, #0]
 8017bf8:	681a      	ldr	r2, [r3, #0]
 8017bfa:	687b      	ldr	r3, [r7, #4]
 8017bfc:	681b      	ldr	r3, [r3, #0]
 8017bfe:	f042 0201 	orr.w	r2, r2, #1
 8017c02:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8017c04:	6878      	ldr	r0, [r7, #4]
 8017c06:	f001 fc77 	bl	80194f8 <UART_CheckIdleState>
 8017c0a:	4603      	mov	r3, r0
}
 8017c0c:	4618      	mov	r0, r3
 8017c0e:	3708      	adds	r7, #8
 8017c10:	46bd      	mov	sp, r7
 8017c12:	bd80      	pop	{r7, pc}

08017c14 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8017c14:	b580      	push	{r7, lr}
 8017c16:	b08a      	sub	sp, #40	@ 0x28
 8017c18:	af02      	add	r7, sp, #8
 8017c1a:	60f8      	str	r0, [r7, #12]
 8017c1c:	60b9      	str	r1, [r7, #8]
 8017c1e:	603b      	str	r3, [r7, #0]
 8017c20:	4613      	mov	r3, r2
 8017c22:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8017c24:	68fb      	ldr	r3, [r7, #12]
 8017c26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8017c2a:	2b20      	cmp	r3, #32
 8017c2c:	d17b      	bne.n	8017d26 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8017c2e:	68bb      	ldr	r3, [r7, #8]
 8017c30:	2b00      	cmp	r3, #0
 8017c32:	d002      	beq.n	8017c3a <HAL_UART_Transmit+0x26>
 8017c34:	88fb      	ldrh	r3, [r7, #6]
 8017c36:	2b00      	cmp	r3, #0
 8017c38:	d101      	bne.n	8017c3e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8017c3a:	2301      	movs	r3, #1
 8017c3c:	e074      	b.n	8017d28 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8017c3e:	68fb      	ldr	r3, [r7, #12]
 8017c40:	2200      	movs	r2, #0
 8017c42:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8017c46:	68fb      	ldr	r3, [r7, #12]
 8017c48:	2221      	movs	r2, #33	@ 0x21
 8017c4a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8017c4e:	f7f1 faf1 	bl	8009234 <HAL_GetTick>
 8017c52:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8017c54:	68fb      	ldr	r3, [r7, #12]
 8017c56:	88fa      	ldrh	r2, [r7, #6]
 8017c58:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8017c5c:	68fb      	ldr	r3, [r7, #12]
 8017c5e:	88fa      	ldrh	r2, [r7, #6]
 8017c60:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8017c64:	68fb      	ldr	r3, [r7, #12]
 8017c66:	689b      	ldr	r3, [r3, #8]
 8017c68:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8017c6c:	d108      	bne.n	8017c80 <HAL_UART_Transmit+0x6c>
 8017c6e:	68fb      	ldr	r3, [r7, #12]
 8017c70:	691b      	ldr	r3, [r3, #16]
 8017c72:	2b00      	cmp	r3, #0
 8017c74:	d104      	bne.n	8017c80 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8017c76:	2300      	movs	r3, #0
 8017c78:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8017c7a:	68bb      	ldr	r3, [r7, #8]
 8017c7c:	61bb      	str	r3, [r7, #24]
 8017c7e:	e003      	b.n	8017c88 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8017c80:	68bb      	ldr	r3, [r7, #8]
 8017c82:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8017c84:	2300      	movs	r3, #0
 8017c86:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8017c88:	e030      	b.n	8017cec <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8017c8a:	683b      	ldr	r3, [r7, #0]
 8017c8c:	9300      	str	r3, [sp, #0]
 8017c8e:	697b      	ldr	r3, [r7, #20]
 8017c90:	2200      	movs	r2, #0
 8017c92:	2180      	movs	r1, #128	@ 0x80
 8017c94:	68f8      	ldr	r0, [r7, #12]
 8017c96:	f001 fcd9 	bl	801964c <UART_WaitOnFlagUntilTimeout>
 8017c9a:	4603      	mov	r3, r0
 8017c9c:	2b00      	cmp	r3, #0
 8017c9e:	d005      	beq.n	8017cac <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8017ca0:	68fb      	ldr	r3, [r7, #12]
 8017ca2:	2220      	movs	r2, #32
 8017ca4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8017ca8:	2303      	movs	r3, #3
 8017caa:	e03d      	b.n	8017d28 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8017cac:	69fb      	ldr	r3, [r7, #28]
 8017cae:	2b00      	cmp	r3, #0
 8017cb0:	d10b      	bne.n	8017cca <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8017cb2:	69bb      	ldr	r3, [r7, #24]
 8017cb4:	881b      	ldrh	r3, [r3, #0]
 8017cb6:	461a      	mov	r2, r3
 8017cb8:	68fb      	ldr	r3, [r7, #12]
 8017cba:	681b      	ldr	r3, [r3, #0]
 8017cbc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8017cc0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8017cc2:	69bb      	ldr	r3, [r7, #24]
 8017cc4:	3302      	adds	r3, #2
 8017cc6:	61bb      	str	r3, [r7, #24]
 8017cc8:	e007      	b.n	8017cda <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8017cca:	69fb      	ldr	r3, [r7, #28]
 8017ccc:	781a      	ldrb	r2, [r3, #0]
 8017cce:	68fb      	ldr	r3, [r7, #12]
 8017cd0:	681b      	ldr	r3, [r3, #0]
 8017cd2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8017cd4:	69fb      	ldr	r3, [r7, #28]
 8017cd6:	3301      	adds	r3, #1
 8017cd8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8017cda:	68fb      	ldr	r3, [r7, #12]
 8017cdc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8017ce0:	b29b      	uxth	r3, r3
 8017ce2:	3b01      	subs	r3, #1
 8017ce4:	b29a      	uxth	r2, r3
 8017ce6:	68fb      	ldr	r3, [r7, #12]
 8017ce8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8017cec:	68fb      	ldr	r3, [r7, #12]
 8017cee:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8017cf2:	b29b      	uxth	r3, r3
 8017cf4:	2b00      	cmp	r3, #0
 8017cf6:	d1c8      	bne.n	8017c8a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8017cf8:	683b      	ldr	r3, [r7, #0]
 8017cfa:	9300      	str	r3, [sp, #0]
 8017cfc:	697b      	ldr	r3, [r7, #20]
 8017cfe:	2200      	movs	r2, #0
 8017d00:	2140      	movs	r1, #64	@ 0x40
 8017d02:	68f8      	ldr	r0, [r7, #12]
 8017d04:	f001 fca2 	bl	801964c <UART_WaitOnFlagUntilTimeout>
 8017d08:	4603      	mov	r3, r0
 8017d0a:	2b00      	cmp	r3, #0
 8017d0c:	d005      	beq.n	8017d1a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8017d0e:	68fb      	ldr	r3, [r7, #12]
 8017d10:	2220      	movs	r2, #32
 8017d12:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8017d16:	2303      	movs	r3, #3
 8017d18:	e006      	b.n	8017d28 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8017d1a:	68fb      	ldr	r3, [r7, #12]
 8017d1c:	2220      	movs	r2, #32
 8017d1e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8017d22:	2300      	movs	r3, #0
 8017d24:	e000      	b.n	8017d28 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8017d26:	2302      	movs	r3, #2
  }
}
 8017d28:	4618      	mov	r0, r3
 8017d2a:	3720      	adds	r7, #32
 8017d2c:	46bd      	mov	sp, r7
 8017d2e:	bd80      	pop	{r7, pc}

08017d30 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8017d30:	b480      	push	{r7}
 8017d32:	b091      	sub	sp, #68	@ 0x44
 8017d34:	af00      	add	r7, sp, #0
 8017d36:	60f8      	str	r0, [r7, #12]
 8017d38:	60b9      	str	r1, [r7, #8]
 8017d3a:	4613      	mov	r3, r2
 8017d3c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8017d3e:	68fb      	ldr	r3, [r7, #12]
 8017d40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8017d44:	2b20      	cmp	r3, #32
 8017d46:	d178      	bne.n	8017e3a <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8017d48:	68bb      	ldr	r3, [r7, #8]
 8017d4a:	2b00      	cmp	r3, #0
 8017d4c:	d002      	beq.n	8017d54 <HAL_UART_Transmit_IT+0x24>
 8017d4e:	88fb      	ldrh	r3, [r7, #6]
 8017d50:	2b00      	cmp	r3, #0
 8017d52:	d101      	bne.n	8017d58 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8017d54:	2301      	movs	r3, #1
 8017d56:	e071      	b.n	8017e3c <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 8017d58:	68fb      	ldr	r3, [r7, #12]
 8017d5a:	68ba      	ldr	r2, [r7, #8]
 8017d5c:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8017d5e:	68fb      	ldr	r3, [r7, #12]
 8017d60:	88fa      	ldrh	r2, [r7, #6]
 8017d62:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8017d66:	68fb      	ldr	r3, [r7, #12]
 8017d68:	88fa      	ldrh	r2, [r7, #6]
 8017d6a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    huart->TxISR       = NULL;
 8017d6e:	68fb      	ldr	r3, [r7, #12]
 8017d70:	2200      	movs	r2, #0
 8017d72:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8017d74:	68fb      	ldr	r3, [r7, #12]
 8017d76:	2200      	movs	r2, #0
 8017d78:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8017d7c:	68fb      	ldr	r3, [r7, #12]
 8017d7e:	2221      	movs	r2, #33	@ 0x21
 8017d80:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8017d84:	68fb      	ldr	r3, [r7, #12]
 8017d86:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8017d88:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8017d8c:	d12a      	bne.n	8017de4 <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8017d8e:	68fb      	ldr	r3, [r7, #12]
 8017d90:	689b      	ldr	r3, [r3, #8]
 8017d92:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8017d96:	d107      	bne.n	8017da8 <HAL_UART_Transmit_IT+0x78>
 8017d98:	68fb      	ldr	r3, [r7, #12]
 8017d9a:	691b      	ldr	r3, [r3, #16]
 8017d9c:	2b00      	cmp	r3, #0
 8017d9e:	d103      	bne.n	8017da8 <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8017da0:	68fb      	ldr	r3, [r7, #12]
 8017da2:	4a29      	ldr	r2, [pc, #164]	@ (8017e48 <HAL_UART_Transmit_IT+0x118>)
 8017da4:	679a      	str	r2, [r3, #120]	@ 0x78
 8017da6:	e002      	b.n	8017dae <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8017da8:	68fb      	ldr	r3, [r7, #12]
 8017daa:	4a28      	ldr	r2, [pc, #160]	@ (8017e4c <HAL_UART_Transmit_IT+0x11c>)
 8017dac:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8017dae:	68fb      	ldr	r3, [r7, #12]
 8017db0:	681b      	ldr	r3, [r3, #0]
 8017db2:	3308      	adds	r3, #8
 8017db4:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017db6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017db8:	e853 3f00 	ldrex	r3, [r3]
 8017dbc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8017dbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017dc0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8017dc4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8017dc6:	68fb      	ldr	r3, [r7, #12]
 8017dc8:	681b      	ldr	r3, [r3, #0]
 8017dca:	3308      	adds	r3, #8
 8017dcc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8017dce:	637a      	str	r2, [r7, #52]	@ 0x34
 8017dd0:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017dd2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8017dd4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8017dd6:	e841 2300 	strex	r3, r2, [r1]
 8017dda:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8017ddc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017dde:	2b00      	cmp	r3, #0
 8017de0:	d1e5      	bne.n	8017dae <HAL_UART_Transmit_IT+0x7e>
 8017de2:	e028      	b.n	8017e36 <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8017de4:	68fb      	ldr	r3, [r7, #12]
 8017de6:	689b      	ldr	r3, [r3, #8]
 8017de8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8017dec:	d107      	bne.n	8017dfe <HAL_UART_Transmit_IT+0xce>
 8017dee:	68fb      	ldr	r3, [r7, #12]
 8017df0:	691b      	ldr	r3, [r3, #16]
 8017df2:	2b00      	cmp	r3, #0
 8017df4:	d103      	bne.n	8017dfe <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8017df6:	68fb      	ldr	r3, [r7, #12]
 8017df8:	4a15      	ldr	r2, [pc, #84]	@ (8017e50 <HAL_UART_Transmit_IT+0x120>)
 8017dfa:	679a      	str	r2, [r3, #120]	@ 0x78
 8017dfc:	e002      	b.n	8017e04 <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8017dfe:	68fb      	ldr	r3, [r7, #12]
 8017e00:	4a14      	ldr	r2, [pc, #80]	@ (8017e54 <HAL_UART_Transmit_IT+0x124>)
 8017e02:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8017e04:	68fb      	ldr	r3, [r7, #12]
 8017e06:	681b      	ldr	r3, [r3, #0]
 8017e08:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017e0a:	697b      	ldr	r3, [r7, #20]
 8017e0c:	e853 3f00 	ldrex	r3, [r3]
 8017e10:	613b      	str	r3, [r7, #16]
   return(result);
 8017e12:	693b      	ldr	r3, [r7, #16]
 8017e14:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8017e18:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8017e1a:	68fb      	ldr	r3, [r7, #12]
 8017e1c:	681b      	ldr	r3, [r3, #0]
 8017e1e:	461a      	mov	r2, r3
 8017e20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017e22:	623b      	str	r3, [r7, #32]
 8017e24:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017e26:	69f9      	ldr	r1, [r7, #28]
 8017e28:	6a3a      	ldr	r2, [r7, #32]
 8017e2a:	e841 2300 	strex	r3, r2, [r1]
 8017e2e:	61bb      	str	r3, [r7, #24]
   return(result);
 8017e30:	69bb      	ldr	r3, [r7, #24]
 8017e32:	2b00      	cmp	r3, #0
 8017e34:	d1e6      	bne.n	8017e04 <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 8017e36:	2300      	movs	r3, #0
 8017e38:	e000      	b.n	8017e3c <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8017e3a:	2302      	movs	r3, #2
  }
}
 8017e3c:	4618      	mov	r0, r3
 8017e3e:	3744      	adds	r7, #68	@ 0x44
 8017e40:	46bd      	mov	sp, r7
 8017e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e46:	4770      	bx	lr
 8017e48:	08019cb7 	.word	0x08019cb7
 8017e4c:	08019bd7 	.word	0x08019bd7
 8017e50:	08019b15 	.word	0x08019b15
 8017e54:	08019a5d 	.word	0x08019a5d

08017e58 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8017e58:	b580      	push	{r7, lr}
 8017e5a:	b08a      	sub	sp, #40	@ 0x28
 8017e5c:	af00      	add	r7, sp, #0
 8017e5e:	60f8      	str	r0, [r7, #12]
 8017e60:	60b9      	str	r1, [r7, #8]
 8017e62:	4613      	mov	r3, r2
 8017e64:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8017e66:	68fb      	ldr	r3, [r7, #12]
 8017e68:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8017e6c:	2b20      	cmp	r3, #32
 8017e6e:	d137      	bne.n	8017ee0 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8017e70:	68bb      	ldr	r3, [r7, #8]
 8017e72:	2b00      	cmp	r3, #0
 8017e74:	d002      	beq.n	8017e7c <HAL_UART_Receive_IT+0x24>
 8017e76:	88fb      	ldrh	r3, [r7, #6]
 8017e78:	2b00      	cmp	r3, #0
 8017e7a:	d101      	bne.n	8017e80 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8017e7c:	2301      	movs	r3, #1
 8017e7e:	e030      	b.n	8017ee2 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8017e80:	68fb      	ldr	r3, [r7, #12]
 8017e82:	2200      	movs	r2, #0
 8017e84:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8017e86:	68fb      	ldr	r3, [r7, #12]
 8017e88:	681b      	ldr	r3, [r3, #0]
 8017e8a:	4a18      	ldr	r2, [pc, #96]	@ (8017eec <HAL_UART_Receive_IT+0x94>)
 8017e8c:	4293      	cmp	r3, r2
 8017e8e:	d01f      	beq.n	8017ed0 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8017e90:	68fb      	ldr	r3, [r7, #12]
 8017e92:	681b      	ldr	r3, [r3, #0]
 8017e94:	685b      	ldr	r3, [r3, #4]
 8017e96:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8017e9a:	2b00      	cmp	r3, #0
 8017e9c:	d018      	beq.n	8017ed0 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8017e9e:	68fb      	ldr	r3, [r7, #12]
 8017ea0:	681b      	ldr	r3, [r3, #0]
 8017ea2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017ea4:	697b      	ldr	r3, [r7, #20]
 8017ea6:	e853 3f00 	ldrex	r3, [r3]
 8017eaa:	613b      	str	r3, [r7, #16]
   return(result);
 8017eac:	693b      	ldr	r3, [r7, #16]
 8017eae:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8017eb2:	627b      	str	r3, [r7, #36]	@ 0x24
 8017eb4:	68fb      	ldr	r3, [r7, #12]
 8017eb6:	681b      	ldr	r3, [r3, #0]
 8017eb8:	461a      	mov	r2, r3
 8017eba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017ebc:	623b      	str	r3, [r7, #32]
 8017ebe:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017ec0:	69f9      	ldr	r1, [r7, #28]
 8017ec2:	6a3a      	ldr	r2, [r7, #32]
 8017ec4:	e841 2300 	strex	r3, r2, [r1]
 8017ec8:	61bb      	str	r3, [r7, #24]
   return(result);
 8017eca:	69bb      	ldr	r3, [r7, #24]
 8017ecc:	2b00      	cmp	r3, #0
 8017ece:	d1e6      	bne.n	8017e9e <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8017ed0:	88fb      	ldrh	r3, [r7, #6]
 8017ed2:	461a      	mov	r2, r3
 8017ed4:	68b9      	ldr	r1, [r7, #8]
 8017ed6:	68f8      	ldr	r0, [r7, #12]
 8017ed8:	f001 fc26 	bl	8019728 <UART_Start_Receive_IT>
 8017edc:	4603      	mov	r3, r0
 8017ede:	e000      	b.n	8017ee2 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8017ee0:	2302      	movs	r3, #2
  }
}
 8017ee2:	4618      	mov	r0, r3
 8017ee4:	3728      	adds	r7, #40	@ 0x28
 8017ee6:	46bd      	mov	sp, r7
 8017ee8:	bd80      	pop	{r7, pc}
 8017eea:	bf00      	nop
 8017eec:	58000c00 	.word	0x58000c00

08017ef0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8017ef0:	b580      	push	{r7, lr}
 8017ef2:	b0ba      	sub	sp, #232	@ 0xe8
 8017ef4:	af00      	add	r7, sp, #0
 8017ef6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8017ef8:	687b      	ldr	r3, [r7, #4]
 8017efa:	681b      	ldr	r3, [r3, #0]
 8017efc:	69db      	ldr	r3, [r3, #28]
 8017efe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8017f02:	687b      	ldr	r3, [r7, #4]
 8017f04:	681b      	ldr	r3, [r3, #0]
 8017f06:	681b      	ldr	r3, [r3, #0]
 8017f08:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8017f0c:	687b      	ldr	r3, [r7, #4]
 8017f0e:	681b      	ldr	r3, [r3, #0]
 8017f10:	689b      	ldr	r3, [r3, #8]
 8017f12:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8017f16:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8017f1a:	f640 030f 	movw	r3, #2063	@ 0x80f
 8017f1e:	4013      	ands	r3, r2
 8017f20:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8017f24:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8017f28:	2b00      	cmp	r3, #0
 8017f2a:	d11b      	bne.n	8017f64 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8017f2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8017f30:	f003 0320 	and.w	r3, r3, #32
 8017f34:	2b00      	cmp	r3, #0
 8017f36:	d015      	beq.n	8017f64 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8017f38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8017f3c:	f003 0320 	and.w	r3, r3, #32
 8017f40:	2b00      	cmp	r3, #0
 8017f42:	d105      	bne.n	8017f50 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8017f44:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8017f48:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8017f4c:	2b00      	cmp	r3, #0
 8017f4e:	d009      	beq.n	8017f64 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8017f50:	687b      	ldr	r3, [r7, #4]
 8017f52:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017f54:	2b00      	cmp	r3, #0
 8017f56:	f000 8393 	beq.w	8018680 <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 8017f5a:	687b      	ldr	r3, [r7, #4]
 8017f5c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017f5e:	6878      	ldr	r0, [r7, #4]
 8017f60:	4798      	blx	r3
      }
      return;
 8017f62:	e38d      	b.n	8018680 <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8017f64:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8017f68:	2b00      	cmp	r3, #0
 8017f6a:	f000 8123 	beq.w	80181b4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8017f6e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8017f72:	4b8d      	ldr	r3, [pc, #564]	@ (80181a8 <HAL_UART_IRQHandler+0x2b8>)
 8017f74:	4013      	ands	r3, r2
 8017f76:	2b00      	cmp	r3, #0
 8017f78:	d106      	bne.n	8017f88 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8017f7a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8017f7e:	4b8b      	ldr	r3, [pc, #556]	@ (80181ac <HAL_UART_IRQHandler+0x2bc>)
 8017f80:	4013      	ands	r3, r2
 8017f82:	2b00      	cmp	r3, #0
 8017f84:	f000 8116 	beq.w	80181b4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8017f88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8017f8c:	f003 0301 	and.w	r3, r3, #1
 8017f90:	2b00      	cmp	r3, #0
 8017f92:	d011      	beq.n	8017fb8 <HAL_UART_IRQHandler+0xc8>
 8017f94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8017f98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8017f9c:	2b00      	cmp	r3, #0
 8017f9e:	d00b      	beq.n	8017fb8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8017fa0:	687b      	ldr	r3, [r7, #4]
 8017fa2:	681b      	ldr	r3, [r3, #0]
 8017fa4:	2201      	movs	r2, #1
 8017fa6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8017fa8:	687b      	ldr	r3, [r7, #4]
 8017faa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8017fae:	f043 0201 	orr.w	r2, r3, #1
 8017fb2:	687b      	ldr	r3, [r7, #4]
 8017fb4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8017fb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8017fbc:	f003 0302 	and.w	r3, r3, #2
 8017fc0:	2b00      	cmp	r3, #0
 8017fc2:	d011      	beq.n	8017fe8 <HAL_UART_IRQHandler+0xf8>
 8017fc4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8017fc8:	f003 0301 	and.w	r3, r3, #1
 8017fcc:	2b00      	cmp	r3, #0
 8017fce:	d00b      	beq.n	8017fe8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8017fd0:	687b      	ldr	r3, [r7, #4]
 8017fd2:	681b      	ldr	r3, [r3, #0]
 8017fd4:	2202      	movs	r2, #2
 8017fd6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8017fd8:	687b      	ldr	r3, [r7, #4]
 8017fda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8017fde:	f043 0204 	orr.w	r2, r3, #4
 8017fe2:	687b      	ldr	r3, [r7, #4]
 8017fe4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8017fe8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8017fec:	f003 0304 	and.w	r3, r3, #4
 8017ff0:	2b00      	cmp	r3, #0
 8017ff2:	d011      	beq.n	8018018 <HAL_UART_IRQHandler+0x128>
 8017ff4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8017ff8:	f003 0301 	and.w	r3, r3, #1
 8017ffc:	2b00      	cmp	r3, #0
 8017ffe:	d00b      	beq.n	8018018 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8018000:	687b      	ldr	r3, [r7, #4]
 8018002:	681b      	ldr	r3, [r3, #0]
 8018004:	2204      	movs	r2, #4
 8018006:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8018008:	687b      	ldr	r3, [r7, #4]
 801800a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801800e:	f043 0202 	orr.w	r2, r3, #2
 8018012:	687b      	ldr	r3, [r7, #4]
 8018014:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8018018:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801801c:	f003 0308 	and.w	r3, r3, #8
 8018020:	2b00      	cmp	r3, #0
 8018022:	d017      	beq.n	8018054 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8018024:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8018028:	f003 0320 	and.w	r3, r3, #32
 801802c:	2b00      	cmp	r3, #0
 801802e:	d105      	bne.n	801803c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8018030:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8018034:	4b5c      	ldr	r3, [pc, #368]	@ (80181a8 <HAL_UART_IRQHandler+0x2b8>)
 8018036:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8018038:	2b00      	cmp	r3, #0
 801803a:	d00b      	beq.n	8018054 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801803c:	687b      	ldr	r3, [r7, #4]
 801803e:	681b      	ldr	r3, [r3, #0]
 8018040:	2208      	movs	r2, #8
 8018042:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8018044:	687b      	ldr	r3, [r7, #4]
 8018046:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801804a:	f043 0208 	orr.w	r2, r3, #8
 801804e:	687b      	ldr	r3, [r7, #4]
 8018050:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8018054:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8018058:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801805c:	2b00      	cmp	r3, #0
 801805e:	d012      	beq.n	8018086 <HAL_UART_IRQHandler+0x196>
 8018060:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8018064:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8018068:	2b00      	cmp	r3, #0
 801806a:	d00c      	beq.n	8018086 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801806c:	687b      	ldr	r3, [r7, #4]
 801806e:	681b      	ldr	r3, [r3, #0]
 8018070:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8018074:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8018076:	687b      	ldr	r3, [r7, #4]
 8018078:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801807c:	f043 0220 	orr.w	r2, r3, #32
 8018080:	687b      	ldr	r3, [r7, #4]
 8018082:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8018086:	687b      	ldr	r3, [r7, #4]
 8018088:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801808c:	2b00      	cmp	r3, #0
 801808e:	f000 82f9 	beq.w	8018684 <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8018092:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8018096:	f003 0320 	and.w	r3, r3, #32
 801809a:	2b00      	cmp	r3, #0
 801809c:	d013      	beq.n	80180c6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 801809e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80180a2:	f003 0320 	and.w	r3, r3, #32
 80180a6:	2b00      	cmp	r3, #0
 80180a8:	d105      	bne.n	80180b6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80180aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80180ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80180b2:	2b00      	cmp	r3, #0
 80180b4:	d007      	beq.n	80180c6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80180b6:	687b      	ldr	r3, [r7, #4]
 80180b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80180ba:	2b00      	cmp	r3, #0
 80180bc:	d003      	beq.n	80180c6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80180be:	687b      	ldr	r3, [r7, #4]
 80180c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80180c2:	6878      	ldr	r0, [r7, #4]
 80180c4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80180c6:	687b      	ldr	r3, [r7, #4]
 80180c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80180cc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80180d0:	687b      	ldr	r3, [r7, #4]
 80180d2:	681b      	ldr	r3, [r3, #0]
 80180d4:	689b      	ldr	r3, [r3, #8]
 80180d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80180da:	2b40      	cmp	r3, #64	@ 0x40
 80180dc:	d005      	beq.n	80180ea <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80180de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80180e2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80180e6:	2b00      	cmp	r3, #0
 80180e8:	d054      	beq.n	8018194 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80180ea:	6878      	ldr	r0, [r7, #4]
 80180ec:	f001 fc3e 	bl	801996c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80180f0:	687b      	ldr	r3, [r7, #4]
 80180f2:	681b      	ldr	r3, [r3, #0]
 80180f4:	689b      	ldr	r3, [r3, #8]
 80180f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80180fa:	2b40      	cmp	r3, #64	@ 0x40
 80180fc:	d146      	bne.n	801818c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80180fe:	687b      	ldr	r3, [r7, #4]
 8018100:	681b      	ldr	r3, [r3, #0]
 8018102:	3308      	adds	r3, #8
 8018104:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018108:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801810c:	e853 3f00 	ldrex	r3, [r3]
 8018110:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8018114:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8018118:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801811c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8018120:	687b      	ldr	r3, [r7, #4]
 8018122:	681b      	ldr	r3, [r3, #0]
 8018124:	3308      	adds	r3, #8
 8018126:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 801812a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 801812e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018132:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8018136:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 801813a:	e841 2300 	strex	r3, r2, [r1]
 801813e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8018142:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8018146:	2b00      	cmp	r3, #0
 8018148:	d1d9      	bne.n	80180fe <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 801814a:	687b      	ldr	r3, [r7, #4]
 801814c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8018150:	2b00      	cmp	r3, #0
 8018152:	d017      	beq.n	8018184 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8018154:	687b      	ldr	r3, [r7, #4]
 8018156:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801815a:	4a15      	ldr	r2, [pc, #84]	@ (80181b0 <HAL_UART_IRQHandler+0x2c0>)
 801815c:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 801815e:	687b      	ldr	r3, [r7, #4]
 8018160:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8018164:	4618      	mov	r0, r3
 8018166:	f7f4 fa7b 	bl	800c660 <HAL_DMA_Abort_IT>
 801816a:	4603      	mov	r3, r0
 801816c:	2b00      	cmp	r3, #0
 801816e:	d019      	beq.n	80181a4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8018170:	687b      	ldr	r3, [r7, #4]
 8018172:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8018176:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8018178:	687a      	ldr	r2, [r7, #4]
 801817a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 801817e:	4610      	mov	r0, r2
 8018180:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8018182:	e00f      	b.n	80181a4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8018184:	6878      	ldr	r0, [r7, #4]
 8018186:	f000 fa93 	bl	80186b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801818a:	e00b      	b.n	80181a4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801818c:	6878      	ldr	r0, [r7, #4]
 801818e:	f000 fa8f 	bl	80186b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8018192:	e007      	b.n	80181a4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8018194:	6878      	ldr	r0, [r7, #4]
 8018196:	f000 fa8b 	bl	80186b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 801819a:	687b      	ldr	r3, [r7, #4]
 801819c:	2200      	movs	r2, #0
 801819e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80181a2:	e26f      	b.n	8018684 <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80181a4:	bf00      	nop
    return;
 80181a6:	e26d      	b.n	8018684 <HAL_UART_IRQHandler+0x794>
 80181a8:	10000001 	.word	0x10000001
 80181ac:	04000120 	.word	0x04000120
 80181b0:	08019a39 	.word	0x08019a39

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80181b4:	687b      	ldr	r3, [r7, #4]
 80181b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80181b8:	2b01      	cmp	r3, #1
 80181ba:	f040 8203 	bne.w	80185c4 <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80181be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80181c2:	f003 0310 	and.w	r3, r3, #16
 80181c6:	2b00      	cmp	r3, #0
 80181c8:	f000 81fc 	beq.w	80185c4 <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80181cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80181d0:	f003 0310 	and.w	r3, r3, #16
 80181d4:	2b00      	cmp	r3, #0
 80181d6:	f000 81f5 	beq.w	80185c4 <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80181da:	687b      	ldr	r3, [r7, #4]
 80181dc:	681b      	ldr	r3, [r3, #0]
 80181de:	2210      	movs	r2, #16
 80181e0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80181e2:	687b      	ldr	r3, [r7, #4]
 80181e4:	681b      	ldr	r3, [r3, #0]
 80181e6:	689b      	ldr	r3, [r3, #8]
 80181e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80181ec:	2b40      	cmp	r3, #64	@ 0x40
 80181ee:	f040 816d 	bne.w	80184cc <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80181f2:	687b      	ldr	r3, [r7, #4]
 80181f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80181f8:	681b      	ldr	r3, [r3, #0]
 80181fa:	4aa4      	ldr	r2, [pc, #656]	@ (801848c <HAL_UART_IRQHandler+0x59c>)
 80181fc:	4293      	cmp	r3, r2
 80181fe:	d068      	beq.n	80182d2 <HAL_UART_IRQHandler+0x3e2>
 8018200:	687b      	ldr	r3, [r7, #4]
 8018202:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8018206:	681b      	ldr	r3, [r3, #0]
 8018208:	4aa1      	ldr	r2, [pc, #644]	@ (8018490 <HAL_UART_IRQHandler+0x5a0>)
 801820a:	4293      	cmp	r3, r2
 801820c:	d061      	beq.n	80182d2 <HAL_UART_IRQHandler+0x3e2>
 801820e:	687b      	ldr	r3, [r7, #4]
 8018210:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8018214:	681b      	ldr	r3, [r3, #0]
 8018216:	4a9f      	ldr	r2, [pc, #636]	@ (8018494 <HAL_UART_IRQHandler+0x5a4>)
 8018218:	4293      	cmp	r3, r2
 801821a:	d05a      	beq.n	80182d2 <HAL_UART_IRQHandler+0x3e2>
 801821c:	687b      	ldr	r3, [r7, #4]
 801821e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8018222:	681b      	ldr	r3, [r3, #0]
 8018224:	4a9c      	ldr	r2, [pc, #624]	@ (8018498 <HAL_UART_IRQHandler+0x5a8>)
 8018226:	4293      	cmp	r3, r2
 8018228:	d053      	beq.n	80182d2 <HAL_UART_IRQHandler+0x3e2>
 801822a:	687b      	ldr	r3, [r7, #4]
 801822c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8018230:	681b      	ldr	r3, [r3, #0]
 8018232:	4a9a      	ldr	r2, [pc, #616]	@ (801849c <HAL_UART_IRQHandler+0x5ac>)
 8018234:	4293      	cmp	r3, r2
 8018236:	d04c      	beq.n	80182d2 <HAL_UART_IRQHandler+0x3e2>
 8018238:	687b      	ldr	r3, [r7, #4]
 801823a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801823e:	681b      	ldr	r3, [r3, #0]
 8018240:	4a97      	ldr	r2, [pc, #604]	@ (80184a0 <HAL_UART_IRQHandler+0x5b0>)
 8018242:	4293      	cmp	r3, r2
 8018244:	d045      	beq.n	80182d2 <HAL_UART_IRQHandler+0x3e2>
 8018246:	687b      	ldr	r3, [r7, #4]
 8018248:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801824c:	681b      	ldr	r3, [r3, #0]
 801824e:	4a95      	ldr	r2, [pc, #596]	@ (80184a4 <HAL_UART_IRQHandler+0x5b4>)
 8018250:	4293      	cmp	r3, r2
 8018252:	d03e      	beq.n	80182d2 <HAL_UART_IRQHandler+0x3e2>
 8018254:	687b      	ldr	r3, [r7, #4]
 8018256:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801825a:	681b      	ldr	r3, [r3, #0]
 801825c:	4a92      	ldr	r2, [pc, #584]	@ (80184a8 <HAL_UART_IRQHandler+0x5b8>)
 801825e:	4293      	cmp	r3, r2
 8018260:	d037      	beq.n	80182d2 <HAL_UART_IRQHandler+0x3e2>
 8018262:	687b      	ldr	r3, [r7, #4]
 8018264:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8018268:	681b      	ldr	r3, [r3, #0]
 801826a:	4a90      	ldr	r2, [pc, #576]	@ (80184ac <HAL_UART_IRQHandler+0x5bc>)
 801826c:	4293      	cmp	r3, r2
 801826e:	d030      	beq.n	80182d2 <HAL_UART_IRQHandler+0x3e2>
 8018270:	687b      	ldr	r3, [r7, #4]
 8018272:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8018276:	681b      	ldr	r3, [r3, #0]
 8018278:	4a8d      	ldr	r2, [pc, #564]	@ (80184b0 <HAL_UART_IRQHandler+0x5c0>)
 801827a:	4293      	cmp	r3, r2
 801827c:	d029      	beq.n	80182d2 <HAL_UART_IRQHandler+0x3e2>
 801827e:	687b      	ldr	r3, [r7, #4]
 8018280:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8018284:	681b      	ldr	r3, [r3, #0]
 8018286:	4a8b      	ldr	r2, [pc, #556]	@ (80184b4 <HAL_UART_IRQHandler+0x5c4>)
 8018288:	4293      	cmp	r3, r2
 801828a:	d022      	beq.n	80182d2 <HAL_UART_IRQHandler+0x3e2>
 801828c:	687b      	ldr	r3, [r7, #4]
 801828e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8018292:	681b      	ldr	r3, [r3, #0]
 8018294:	4a88      	ldr	r2, [pc, #544]	@ (80184b8 <HAL_UART_IRQHandler+0x5c8>)
 8018296:	4293      	cmp	r3, r2
 8018298:	d01b      	beq.n	80182d2 <HAL_UART_IRQHandler+0x3e2>
 801829a:	687b      	ldr	r3, [r7, #4]
 801829c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80182a0:	681b      	ldr	r3, [r3, #0]
 80182a2:	4a86      	ldr	r2, [pc, #536]	@ (80184bc <HAL_UART_IRQHandler+0x5cc>)
 80182a4:	4293      	cmp	r3, r2
 80182a6:	d014      	beq.n	80182d2 <HAL_UART_IRQHandler+0x3e2>
 80182a8:	687b      	ldr	r3, [r7, #4]
 80182aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80182ae:	681b      	ldr	r3, [r3, #0]
 80182b0:	4a83      	ldr	r2, [pc, #524]	@ (80184c0 <HAL_UART_IRQHandler+0x5d0>)
 80182b2:	4293      	cmp	r3, r2
 80182b4:	d00d      	beq.n	80182d2 <HAL_UART_IRQHandler+0x3e2>
 80182b6:	687b      	ldr	r3, [r7, #4]
 80182b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80182bc:	681b      	ldr	r3, [r3, #0]
 80182be:	4a81      	ldr	r2, [pc, #516]	@ (80184c4 <HAL_UART_IRQHandler+0x5d4>)
 80182c0:	4293      	cmp	r3, r2
 80182c2:	d006      	beq.n	80182d2 <HAL_UART_IRQHandler+0x3e2>
 80182c4:	687b      	ldr	r3, [r7, #4]
 80182c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80182ca:	681b      	ldr	r3, [r3, #0]
 80182cc:	4a7e      	ldr	r2, [pc, #504]	@ (80184c8 <HAL_UART_IRQHandler+0x5d8>)
 80182ce:	4293      	cmp	r3, r2
 80182d0:	d106      	bne.n	80182e0 <HAL_UART_IRQHandler+0x3f0>
 80182d2:	687b      	ldr	r3, [r7, #4]
 80182d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80182d8:	681b      	ldr	r3, [r3, #0]
 80182da:	685b      	ldr	r3, [r3, #4]
 80182dc:	b29b      	uxth	r3, r3
 80182de:	e005      	b.n	80182ec <HAL_UART_IRQHandler+0x3fc>
 80182e0:	687b      	ldr	r3, [r7, #4]
 80182e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80182e6:	681b      	ldr	r3, [r3, #0]
 80182e8:	685b      	ldr	r3, [r3, #4]
 80182ea:	b29b      	uxth	r3, r3
 80182ec:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80182f0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80182f4:	2b00      	cmp	r3, #0
 80182f6:	f000 80ad 	beq.w	8018454 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80182fa:	687b      	ldr	r3, [r7, #4]
 80182fc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8018300:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8018304:	429a      	cmp	r2, r3
 8018306:	f080 80a5 	bcs.w	8018454 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 801830a:	687b      	ldr	r3, [r7, #4]
 801830c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8018310:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8018314:	687b      	ldr	r3, [r7, #4]
 8018316:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801831a:	69db      	ldr	r3, [r3, #28]
 801831c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8018320:	f000 8087 	beq.w	8018432 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8018324:	687b      	ldr	r3, [r7, #4]
 8018326:	681b      	ldr	r3, [r3, #0]
 8018328:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801832c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8018330:	e853 3f00 	ldrex	r3, [r3]
 8018334:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8018338:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 801833c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8018340:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8018344:	687b      	ldr	r3, [r7, #4]
 8018346:	681b      	ldr	r3, [r3, #0]
 8018348:	461a      	mov	r2, r3
 801834a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 801834e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8018352:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018356:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 801835a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 801835e:	e841 2300 	strex	r3, r2, [r1]
 8018362:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8018366:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801836a:	2b00      	cmp	r3, #0
 801836c:	d1da      	bne.n	8018324 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801836e:	687b      	ldr	r3, [r7, #4]
 8018370:	681b      	ldr	r3, [r3, #0]
 8018372:	3308      	adds	r3, #8
 8018374:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018376:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8018378:	e853 3f00 	ldrex	r3, [r3]
 801837c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 801837e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8018380:	f023 0301 	bic.w	r3, r3, #1
 8018384:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8018388:	687b      	ldr	r3, [r7, #4]
 801838a:	681b      	ldr	r3, [r3, #0]
 801838c:	3308      	adds	r3, #8
 801838e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8018392:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8018396:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018398:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 801839a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 801839e:	e841 2300 	strex	r3, r2, [r1]
 80183a2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80183a4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80183a6:	2b00      	cmp	r3, #0
 80183a8:	d1e1      	bne.n	801836e <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80183aa:	687b      	ldr	r3, [r7, #4]
 80183ac:	681b      	ldr	r3, [r3, #0]
 80183ae:	3308      	adds	r3, #8
 80183b0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80183b2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80183b4:	e853 3f00 	ldrex	r3, [r3]
 80183b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80183ba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80183bc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80183c0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80183c4:	687b      	ldr	r3, [r7, #4]
 80183c6:	681b      	ldr	r3, [r3, #0]
 80183c8:	3308      	adds	r3, #8
 80183ca:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80183ce:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80183d0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80183d2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80183d4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80183d6:	e841 2300 	strex	r3, r2, [r1]
 80183da:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80183dc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80183de:	2b00      	cmp	r3, #0
 80183e0:	d1e3      	bne.n	80183aa <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80183e2:	687b      	ldr	r3, [r7, #4]
 80183e4:	2220      	movs	r2, #32
 80183e6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80183ea:	687b      	ldr	r3, [r7, #4]
 80183ec:	2200      	movs	r2, #0
 80183ee:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80183f0:	687b      	ldr	r3, [r7, #4]
 80183f2:	681b      	ldr	r3, [r3, #0]
 80183f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80183f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80183f8:	e853 3f00 	ldrex	r3, [r3]
 80183fc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80183fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8018400:	f023 0310 	bic.w	r3, r3, #16
 8018404:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8018408:	687b      	ldr	r3, [r7, #4]
 801840a:	681b      	ldr	r3, [r3, #0]
 801840c:	461a      	mov	r2, r3
 801840e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8018412:	65bb      	str	r3, [r7, #88]	@ 0x58
 8018414:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018416:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8018418:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801841a:	e841 2300 	strex	r3, r2, [r1]
 801841e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8018420:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018422:	2b00      	cmp	r3, #0
 8018424:	d1e4      	bne.n	80183f0 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8018426:	687b      	ldr	r3, [r7, #4]
 8018428:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801842c:	4618      	mov	r0, r3
 801842e:	f7f3 fdf9 	bl	800c024 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8018432:	687b      	ldr	r3, [r7, #4]
 8018434:	2202      	movs	r2, #2
 8018436:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8018438:	687b      	ldr	r3, [r7, #4]
 801843a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 801843e:	687b      	ldr	r3, [r7, #4]
 8018440:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8018444:	b29b      	uxth	r3, r3
 8018446:	1ad3      	subs	r3, r2, r3
 8018448:	b29b      	uxth	r3, r3
 801844a:	4619      	mov	r1, r3
 801844c:	6878      	ldr	r0, [r7, #4]
 801844e:	f000 f939 	bl	80186c4 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8018452:	e119      	b.n	8018688 <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8018454:	687b      	ldr	r3, [r7, #4]
 8018456:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801845a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 801845e:	429a      	cmp	r2, r3
 8018460:	f040 8112 	bne.w	8018688 <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8018464:	687b      	ldr	r3, [r7, #4]
 8018466:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801846a:	69db      	ldr	r3, [r3, #28]
 801846c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8018470:	f040 810a 	bne.w	8018688 <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8018474:	687b      	ldr	r3, [r7, #4]
 8018476:	2202      	movs	r2, #2
 8018478:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801847a:	687b      	ldr	r3, [r7, #4]
 801847c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8018480:	4619      	mov	r1, r3
 8018482:	6878      	ldr	r0, [r7, #4]
 8018484:	f000 f91e 	bl	80186c4 <HAL_UARTEx_RxEventCallback>
      return;
 8018488:	e0fe      	b.n	8018688 <HAL_UART_IRQHandler+0x798>
 801848a:	bf00      	nop
 801848c:	40020010 	.word	0x40020010
 8018490:	40020028 	.word	0x40020028
 8018494:	40020040 	.word	0x40020040
 8018498:	40020058 	.word	0x40020058
 801849c:	40020070 	.word	0x40020070
 80184a0:	40020088 	.word	0x40020088
 80184a4:	400200a0 	.word	0x400200a0
 80184a8:	400200b8 	.word	0x400200b8
 80184ac:	40020410 	.word	0x40020410
 80184b0:	40020428 	.word	0x40020428
 80184b4:	40020440 	.word	0x40020440
 80184b8:	40020458 	.word	0x40020458
 80184bc:	40020470 	.word	0x40020470
 80184c0:	40020488 	.word	0x40020488
 80184c4:	400204a0 	.word	0x400204a0
 80184c8:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80184cc:	687b      	ldr	r3, [r7, #4]
 80184ce:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80184d2:	687b      	ldr	r3, [r7, #4]
 80184d4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80184d8:	b29b      	uxth	r3, r3
 80184da:	1ad3      	subs	r3, r2, r3
 80184dc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80184e0:	687b      	ldr	r3, [r7, #4]
 80184e2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80184e6:	b29b      	uxth	r3, r3
 80184e8:	2b00      	cmp	r3, #0
 80184ea:	f000 80cf 	beq.w	801868c <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 80184ee:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80184f2:	2b00      	cmp	r3, #0
 80184f4:	f000 80ca 	beq.w	801868c <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80184f8:	687b      	ldr	r3, [r7, #4]
 80184fa:	681b      	ldr	r3, [r3, #0]
 80184fc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80184fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018500:	e853 3f00 	ldrex	r3, [r3]
 8018504:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8018506:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018508:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801850c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8018510:	687b      	ldr	r3, [r7, #4]
 8018512:	681b      	ldr	r3, [r3, #0]
 8018514:	461a      	mov	r2, r3
 8018516:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 801851a:	647b      	str	r3, [r7, #68]	@ 0x44
 801851c:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801851e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8018520:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8018522:	e841 2300 	strex	r3, r2, [r1]
 8018526:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8018528:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801852a:	2b00      	cmp	r3, #0
 801852c:	d1e4      	bne.n	80184f8 <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801852e:	687b      	ldr	r3, [r7, #4]
 8018530:	681b      	ldr	r3, [r3, #0]
 8018532:	3308      	adds	r3, #8
 8018534:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018538:	e853 3f00 	ldrex	r3, [r3]
 801853c:	623b      	str	r3, [r7, #32]
   return(result);
 801853e:	6a3a      	ldr	r2, [r7, #32]
 8018540:	4b55      	ldr	r3, [pc, #340]	@ (8018698 <HAL_UART_IRQHandler+0x7a8>)
 8018542:	4013      	ands	r3, r2
 8018544:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8018548:	687b      	ldr	r3, [r7, #4]
 801854a:	681b      	ldr	r3, [r3, #0]
 801854c:	3308      	adds	r3, #8
 801854e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8018552:	633a      	str	r2, [r7, #48]	@ 0x30
 8018554:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018556:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8018558:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801855a:	e841 2300 	strex	r3, r2, [r1]
 801855e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8018560:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018562:	2b00      	cmp	r3, #0
 8018564:	d1e3      	bne.n	801852e <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8018566:	687b      	ldr	r3, [r7, #4]
 8018568:	2220      	movs	r2, #32
 801856a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801856e:	687b      	ldr	r3, [r7, #4]
 8018570:	2200      	movs	r2, #0
 8018572:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8018574:	687b      	ldr	r3, [r7, #4]
 8018576:	2200      	movs	r2, #0
 8018578:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801857a:	687b      	ldr	r3, [r7, #4]
 801857c:	681b      	ldr	r3, [r3, #0]
 801857e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018580:	693b      	ldr	r3, [r7, #16]
 8018582:	e853 3f00 	ldrex	r3, [r3]
 8018586:	60fb      	str	r3, [r7, #12]
   return(result);
 8018588:	68fb      	ldr	r3, [r7, #12]
 801858a:	f023 0310 	bic.w	r3, r3, #16
 801858e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8018592:	687b      	ldr	r3, [r7, #4]
 8018594:	681b      	ldr	r3, [r3, #0]
 8018596:	461a      	mov	r2, r3
 8018598:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 801859c:	61fb      	str	r3, [r7, #28]
 801859e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80185a0:	69b9      	ldr	r1, [r7, #24]
 80185a2:	69fa      	ldr	r2, [r7, #28]
 80185a4:	e841 2300 	strex	r3, r2, [r1]
 80185a8:	617b      	str	r3, [r7, #20]
   return(result);
 80185aa:	697b      	ldr	r3, [r7, #20]
 80185ac:	2b00      	cmp	r3, #0
 80185ae:	d1e4      	bne.n	801857a <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80185b0:	687b      	ldr	r3, [r7, #4]
 80185b2:	2202      	movs	r2, #2
 80185b4:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80185b6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80185ba:	4619      	mov	r1, r3
 80185bc:	6878      	ldr	r0, [r7, #4]
 80185be:	f000 f881 	bl	80186c4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80185c2:	e063      	b.n	801868c <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80185c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80185c8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80185cc:	2b00      	cmp	r3, #0
 80185ce:	d00e      	beq.n	80185ee <HAL_UART_IRQHandler+0x6fe>
 80185d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80185d4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80185d8:	2b00      	cmp	r3, #0
 80185da:	d008      	beq.n	80185ee <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80185dc:	687b      	ldr	r3, [r7, #4]
 80185de:	681b      	ldr	r3, [r3, #0]
 80185e0:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80185e4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80185e6:	6878      	ldr	r0, [r7, #4]
 80185e8:	f002 f926 	bl	801a838 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80185ec:	e051      	b.n	8018692 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80185ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80185f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80185f6:	2b00      	cmp	r3, #0
 80185f8:	d014      	beq.n	8018624 <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80185fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80185fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8018602:	2b00      	cmp	r3, #0
 8018604:	d105      	bne.n	8018612 <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8018606:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801860a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801860e:	2b00      	cmp	r3, #0
 8018610:	d008      	beq.n	8018624 <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 8018612:	687b      	ldr	r3, [r7, #4]
 8018614:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8018616:	2b00      	cmp	r3, #0
 8018618:	d03a      	beq.n	8018690 <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 801861a:	687b      	ldr	r3, [r7, #4]
 801861c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801861e:	6878      	ldr	r0, [r7, #4]
 8018620:	4798      	blx	r3
    }
    return;
 8018622:	e035      	b.n	8018690 <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8018624:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8018628:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801862c:	2b00      	cmp	r3, #0
 801862e:	d009      	beq.n	8018644 <HAL_UART_IRQHandler+0x754>
 8018630:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8018634:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8018638:	2b00      	cmp	r3, #0
 801863a:	d003      	beq.n	8018644 <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 801863c:	6878      	ldr	r0, [r7, #4]
 801863e:	f001 fbaf 	bl	8019da0 <UART_EndTransmit_IT>
    return;
 8018642:	e026      	b.n	8018692 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8018644:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8018648:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801864c:	2b00      	cmp	r3, #0
 801864e:	d009      	beq.n	8018664 <HAL_UART_IRQHandler+0x774>
 8018650:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8018654:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8018658:	2b00      	cmp	r3, #0
 801865a:	d003      	beq.n	8018664 <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 801865c:	6878      	ldr	r0, [r7, #4]
 801865e:	f002 f8ff 	bl	801a860 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8018662:	e016      	b.n	8018692 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8018664:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8018668:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 801866c:	2b00      	cmp	r3, #0
 801866e:	d010      	beq.n	8018692 <HAL_UART_IRQHandler+0x7a2>
 8018670:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8018674:	2b00      	cmp	r3, #0
 8018676:	da0c      	bge.n	8018692 <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8018678:	6878      	ldr	r0, [r7, #4]
 801867a:	f002 f8e7 	bl	801a84c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801867e:	e008      	b.n	8018692 <HAL_UART_IRQHandler+0x7a2>
      return;
 8018680:	bf00      	nop
 8018682:	e006      	b.n	8018692 <HAL_UART_IRQHandler+0x7a2>
    return;
 8018684:	bf00      	nop
 8018686:	e004      	b.n	8018692 <HAL_UART_IRQHandler+0x7a2>
      return;
 8018688:	bf00      	nop
 801868a:	e002      	b.n	8018692 <HAL_UART_IRQHandler+0x7a2>
      return;
 801868c:	bf00      	nop
 801868e:	e000      	b.n	8018692 <HAL_UART_IRQHandler+0x7a2>
    return;
 8018690:	bf00      	nop
  }
}
 8018692:	37e8      	adds	r7, #232	@ 0xe8
 8018694:	46bd      	mov	sp, r7
 8018696:	bd80      	pop	{r7, pc}
 8018698:	effffffe 	.word	0xeffffffe

0801869c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 801869c:	b480      	push	{r7}
 801869e:	b083      	sub	sp, #12
 80186a0:	af00      	add	r7, sp, #0
 80186a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80186a4:	bf00      	nop
 80186a6:	370c      	adds	r7, #12
 80186a8:	46bd      	mov	sp, r7
 80186aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80186ae:	4770      	bx	lr

080186b0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80186b0:	b480      	push	{r7}
 80186b2:	b083      	sub	sp, #12
 80186b4:	af00      	add	r7, sp, #0
 80186b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80186b8:	bf00      	nop
 80186ba:	370c      	adds	r7, #12
 80186bc:	46bd      	mov	sp, r7
 80186be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80186c2:	4770      	bx	lr

080186c4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80186c4:	b480      	push	{r7}
 80186c6:	b083      	sub	sp, #12
 80186c8:	af00      	add	r7, sp, #0
 80186ca:	6078      	str	r0, [r7, #4]
 80186cc:	460b      	mov	r3, r1
 80186ce:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80186d0:	bf00      	nop
 80186d2:	370c      	adds	r7, #12
 80186d4:	46bd      	mov	sp, r7
 80186d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80186da:	4770      	bx	lr

080186dc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80186dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80186e0:	b092      	sub	sp, #72	@ 0x48
 80186e2:	af00      	add	r7, sp, #0
 80186e4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80186e6:	2300      	movs	r3, #0
 80186e8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80186ec:	697b      	ldr	r3, [r7, #20]
 80186ee:	689a      	ldr	r2, [r3, #8]
 80186f0:	697b      	ldr	r3, [r7, #20]
 80186f2:	691b      	ldr	r3, [r3, #16]
 80186f4:	431a      	orrs	r2, r3
 80186f6:	697b      	ldr	r3, [r7, #20]
 80186f8:	695b      	ldr	r3, [r3, #20]
 80186fa:	431a      	orrs	r2, r3
 80186fc:	697b      	ldr	r3, [r7, #20]
 80186fe:	69db      	ldr	r3, [r3, #28]
 8018700:	4313      	orrs	r3, r2
 8018702:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8018704:	697b      	ldr	r3, [r7, #20]
 8018706:	681b      	ldr	r3, [r3, #0]
 8018708:	681a      	ldr	r2, [r3, #0]
 801870a:	4bbe      	ldr	r3, [pc, #760]	@ (8018a04 <UART_SetConfig+0x328>)
 801870c:	4013      	ands	r3, r2
 801870e:	697a      	ldr	r2, [r7, #20]
 8018710:	6812      	ldr	r2, [r2, #0]
 8018712:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8018714:	430b      	orrs	r3, r1
 8018716:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8018718:	697b      	ldr	r3, [r7, #20]
 801871a:	681b      	ldr	r3, [r3, #0]
 801871c:	685b      	ldr	r3, [r3, #4]
 801871e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8018722:	697b      	ldr	r3, [r7, #20]
 8018724:	68da      	ldr	r2, [r3, #12]
 8018726:	697b      	ldr	r3, [r7, #20]
 8018728:	681b      	ldr	r3, [r3, #0]
 801872a:	430a      	orrs	r2, r1
 801872c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 801872e:	697b      	ldr	r3, [r7, #20]
 8018730:	699b      	ldr	r3, [r3, #24]
 8018732:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8018734:	697b      	ldr	r3, [r7, #20]
 8018736:	681b      	ldr	r3, [r3, #0]
 8018738:	4ab3      	ldr	r2, [pc, #716]	@ (8018a08 <UART_SetConfig+0x32c>)
 801873a:	4293      	cmp	r3, r2
 801873c:	d004      	beq.n	8018748 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 801873e:	697b      	ldr	r3, [r7, #20]
 8018740:	6a1b      	ldr	r3, [r3, #32]
 8018742:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8018744:	4313      	orrs	r3, r2
 8018746:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8018748:	697b      	ldr	r3, [r7, #20]
 801874a:	681b      	ldr	r3, [r3, #0]
 801874c:	689a      	ldr	r2, [r3, #8]
 801874e:	4baf      	ldr	r3, [pc, #700]	@ (8018a0c <UART_SetConfig+0x330>)
 8018750:	4013      	ands	r3, r2
 8018752:	697a      	ldr	r2, [r7, #20]
 8018754:	6812      	ldr	r2, [r2, #0]
 8018756:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8018758:	430b      	orrs	r3, r1
 801875a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 801875c:	697b      	ldr	r3, [r7, #20]
 801875e:	681b      	ldr	r3, [r3, #0]
 8018760:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018762:	f023 010f 	bic.w	r1, r3, #15
 8018766:	697b      	ldr	r3, [r7, #20]
 8018768:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801876a:	697b      	ldr	r3, [r7, #20]
 801876c:	681b      	ldr	r3, [r3, #0]
 801876e:	430a      	orrs	r2, r1
 8018770:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8018772:	697b      	ldr	r3, [r7, #20]
 8018774:	681b      	ldr	r3, [r3, #0]
 8018776:	4aa6      	ldr	r2, [pc, #664]	@ (8018a10 <UART_SetConfig+0x334>)
 8018778:	4293      	cmp	r3, r2
 801877a:	d177      	bne.n	801886c <UART_SetConfig+0x190>
 801877c:	4ba5      	ldr	r3, [pc, #660]	@ (8018a14 <UART_SetConfig+0x338>)
 801877e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018780:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8018784:	2b28      	cmp	r3, #40	@ 0x28
 8018786:	d86d      	bhi.n	8018864 <UART_SetConfig+0x188>
 8018788:	a201      	add	r2, pc, #4	@ (adr r2, 8018790 <UART_SetConfig+0xb4>)
 801878a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801878e:	bf00      	nop
 8018790:	08018835 	.word	0x08018835
 8018794:	08018865 	.word	0x08018865
 8018798:	08018865 	.word	0x08018865
 801879c:	08018865 	.word	0x08018865
 80187a0:	08018865 	.word	0x08018865
 80187a4:	08018865 	.word	0x08018865
 80187a8:	08018865 	.word	0x08018865
 80187ac:	08018865 	.word	0x08018865
 80187b0:	0801883d 	.word	0x0801883d
 80187b4:	08018865 	.word	0x08018865
 80187b8:	08018865 	.word	0x08018865
 80187bc:	08018865 	.word	0x08018865
 80187c0:	08018865 	.word	0x08018865
 80187c4:	08018865 	.word	0x08018865
 80187c8:	08018865 	.word	0x08018865
 80187cc:	08018865 	.word	0x08018865
 80187d0:	08018845 	.word	0x08018845
 80187d4:	08018865 	.word	0x08018865
 80187d8:	08018865 	.word	0x08018865
 80187dc:	08018865 	.word	0x08018865
 80187e0:	08018865 	.word	0x08018865
 80187e4:	08018865 	.word	0x08018865
 80187e8:	08018865 	.word	0x08018865
 80187ec:	08018865 	.word	0x08018865
 80187f0:	0801884d 	.word	0x0801884d
 80187f4:	08018865 	.word	0x08018865
 80187f8:	08018865 	.word	0x08018865
 80187fc:	08018865 	.word	0x08018865
 8018800:	08018865 	.word	0x08018865
 8018804:	08018865 	.word	0x08018865
 8018808:	08018865 	.word	0x08018865
 801880c:	08018865 	.word	0x08018865
 8018810:	08018855 	.word	0x08018855
 8018814:	08018865 	.word	0x08018865
 8018818:	08018865 	.word	0x08018865
 801881c:	08018865 	.word	0x08018865
 8018820:	08018865 	.word	0x08018865
 8018824:	08018865 	.word	0x08018865
 8018828:	08018865 	.word	0x08018865
 801882c:	08018865 	.word	0x08018865
 8018830:	0801885d 	.word	0x0801885d
 8018834:	2301      	movs	r3, #1
 8018836:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801883a:	e326      	b.n	8018e8a <UART_SetConfig+0x7ae>
 801883c:	2304      	movs	r3, #4
 801883e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018842:	e322      	b.n	8018e8a <UART_SetConfig+0x7ae>
 8018844:	2308      	movs	r3, #8
 8018846:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801884a:	e31e      	b.n	8018e8a <UART_SetConfig+0x7ae>
 801884c:	2310      	movs	r3, #16
 801884e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018852:	e31a      	b.n	8018e8a <UART_SetConfig+0x7ae>
 8018854:	2320      	movs	r3, #32
 8018856:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801885a:	e316      	b.n	8018e8a <UART_SetConfig+0x7ae>
 801885c:	2340      	movs	r3, #64	@ 0x40
 801885e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018862:	e312      	b.n	8018e8a <UART_SetConfig+0x7ae>
 8018864:	2380      	movs	r3, #128	@ 0x80
 8018866:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801886a:	e30e      	b.n	8018e8a <UART_SetConfig+0x7ae>
 801886c:	697b      	ldr	r3, [r7, #20]
 801886e:	681b      	ldr	r3, [r3, #0]
 8018870:	4a69      	ldr	r2, [pc, #420]	@ (8018a18 <UART_SetConfig+0x33c>)
 8018872:	4293      	cmp	r3, r2
 8018874:	d130      	bne.n	80188d8 <UART_SetConfig+0x1fc>
 8018876:	4b67      	ldr	r3, [pc, #412]	@ (8018a14 <UART_SetConfig+0x338>)
 8018878:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801887a:	f003 0307 	and.w	r3, r3, #7
 801887e:	2b05      	cmp	r3, #5
 8018880:	d826      	bhi.n	80188d0 <UART_SetConfig+0x1f4>
 8018882:	a201      	add	r2, pc, #4	@ (adr r2, 8018888 <UART_SetConfig+0x1ac>)
 8018884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018888:	080188a1 	.word	0x080188a1
 801888c:	080188a9 	.word	0x080188a9
 8018890:	080188b1 	.word	0x080188b1
 8018894:	080188b9 	.word	0x080188b9
 8018898:	080188c1 	.word	0x080188c1
 801889c:	080188c9 	.word	0x080188c9
 80188a0:	2300      	movs	r3, #0
 80188a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80188a6:	e2f0      	b.n	8018e8a <UART_SetConfig+0x7ae>
 80188a8:	2304      	movs	r3, #4
 80188aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80188ae:	e2ec      	b.n	8018e8a <UART_SetConfig+0x7ae>
 80188b0:	2308      	movs	r3, #8
 80188b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80188b6:	e2e8      	b.n	8018e8a <UART_SetConfig+0x7ae>
 80188b8:	2310      	movs	r3, #16
 80188ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80188be:	e2e4      	b.n	8018e8a <UART_SetConfig+0x7ae>
 80188c0:	2320      	movs	r3, #32
 80188c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80188c6:	e2e0      	b.n	8018e8a <UART_SetConfig+0x7ae>
 80188c8:	2340      	movs	r3, #64	@ 0x40
 80188ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80188ce:	e2dc      	b.n	8018e8a <UART_SetConfig+0x7ae>
 80188d0:	2380      	movs	r3, #128	@ 0x80
 80188d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80188d6:	e2d8      	b.n	8018e8a <UART_SetConfig+0x7ae>
 80188d8:	697b      	ldr	r3, [r7, #20]
 80188da:	681b      	ldr	r3, [r3, #0]
 80188dc:	4a4f      	ldr	r2, [pc, #316]	@ (8018a1c <UART_SetConfig+0x340>)
 80188de:	4293      	cmp	r3, r2
 80188e0:	d130      	bne.n	8018944 <UART_SetConfig+0x268>
 80188e2:	4b4c      	ldr	r3, [pc, #304]	@ (8018a14 <UART_SetConfig+0x338>)
 80188e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80188e6:	f003 0307 	and.w	r3, r3, #7
 80188ea:	2b05      	cmp	r3, #5
 80188ec:	d826      	bhi.n	801893c <UART_SetConfig+0x260>
 80188ee:	a201      	add	r2, pc, #4	@ (adr r2, 80188f4 <UART_SetConfig+0x218>)
 80188f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80188f4:	0801890d 	.word	0x0801890d
 80188f8:	08018915 	.word	0x08018915
 80188fc:	0801891d 	.word	0x0801891d
 8018900:	08018925 	.word	0x08018925
 8018904:	0801892d 	.word	0x0801892d
 8018908:	08018935 	.word	0x08018935
 801890c:	2300      	movs	r3, #0
 801890e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018912:	e2ba      	b.n	8018e8a <UART_SetConfig+0x7ae>
 8018914:	2304      	movs	r3, #4
 8018916:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801891a:	e2b6      	b.n	8018e8a <UART_SetConfig+0x7ae>
 801891c:	2308      	movs	r3, #8
 801891e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018922:	e2b2      	b.n	8018e8a <UART_SetConfig+0x7ae>
 8018924:	2310      	movs	r3, #16
 8018926:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801892a:	e2ae      	b.n	8018e8a <UART_SetConfig+0x7ae>
 801892c:	2320      	movs	r3, #32
 801892e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018932:	e2aa      	b.n	8018e8a <UART_SetConfig+0x7ae>
 8018934:	2340      	movs	r3, #64	@ 0x40
 8018936:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801893a:	e2a6      	b.n	8018e8a <UART_SetConfig+0x7ae>
 801893c:	2380      	movs	r3, #128	@ 0x80
 801893e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018942:	e2a2      	b.n	8018e8a <UART_SetConfig+0x7ae>
 8018944:	697b      	ldr	r3, [r7, #20]
 8018946:	681b      	ldr	r3, [r3, #0]
 8018948:	4a35      	ldr	r2, [pc, #212]	@ (8018a20 <UART_SetConfig+0x344>)
 801894a:	4293      	cmp	r3, r2
 801894c:	d130      	bne.n	80189b0 <UART_SetConfig+0x2d4>
 801894e:	4b31      	ldr	r3, [pc, #196]	@ (8018a14 <UART_SetConfig+0x338>)
 8018950:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018952:	f003 0307 	and.w	r3, r3, #7
 8018956:	2b05      	cmp	r3, #5
 8018958:	d826      	bhi.n	80189a8 <UART_SetConfig+0x2cc>
 801895a:	a201      	add	r2, pc, #4	@ (adr r2, 8018960 <UART_SetConfig+0x284>)
 801895c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018960:	08018979 	.word	0x08018979
 8018964:	08018981 	.word	0x08018981
 8018968:	08018989 	.word	0x08018989
 801896c:	08018991 	.word	0x08018991
 8018970:	08018999 	.word	0x08018999
 8018974:	080189a1 	.word	0x080189a1
 8018978:	2300      	movs	r3, #0
 801897a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801897e:	e284      	b.n	8018e8a <UART_SetConfig+0x7ae>
 8018980:	2304      	movs	r3, #4
 8018982:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018986:	e280      	b.n	8018e8a <UART_SetConfig+0x7ae>
 8018988:	2308      	movs	r3, #8
 801898a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801898e:	e27c      	b.n	8018e8a <UART_SetConfig+0x7ae>
 8018990:	2310      	movs	r3, #16
 8018992:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018996:	e278      	b.n	8018e8a <UART_SetConfig+0x7ae>
 8018998:	2320      	movs	r3, #32
 801899a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801899e:	e274      	b.n	8018e8a <UART_SetConfig+0x7ae>
 80189a0:	2340      	movs	r3, #64	@ 0x40
 80189a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80189a6:	e270      	b.n	8018e8a <UART_SetConfig+0x7ae>
 80189a8:	2380      	movs	r3, #128	@ 0x80
 80189aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80189ae:	e26c      	b.n	8018e8a <UART_SetConfig+0x7ae>
 80189b0:	697b      	ldr	r3, [r7, #20]
 80189b2:	681b      	ldr	r3, [r3, #0]
 80189b4:	4a1b      	ldr	r2, [pc, #108]	@ (8018a24 <UART_SetConfig+0x348>)
 80189b6:	4293      	cmp	r3, r2
 80189b8:	d142      	bne.n	8018a40 <UART_SetConfig+0x364>
 80189ba:	4b16      	ldr	r3, [pc, #88]	@ (8018a14 <UART_SetConfig+0x338>)
 80189bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80189be:	f003 0307 	and.w	r3, r3, #7
 80189c2:	2b05      	cmp	r3, #5
 80189c4:	d838      	bhi.n	8018a38 <UART_SetConfig+0x35c>
 80189c6:	a201      	add	r2, pc, #4	@ (adr r2, 80189cc <UART_SetConfig+0x2f0>)
 80189c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80189cc:	080189e5 	.word	0x080189e5
 80189d0:	080189ed 	.word	0x080189ed
 80189d4:	080189f5 	.word	0x080189f5
 80189d8:	080189fd 	.word	0x080189fd
 80189dc:	08018a29 	.word	0x08018a29
 80189e0:	08018a31 	.word	0x08018a31
 80189e4:	2300      	movs	r3, #0
 80189e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80189ea:	e24e      	b.n	8018e8a <UART_SetConfig+0x7ae>
 80189ec:	2304      	movs	r3, #4
 80189ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80189f2:	e24a      	b.n	8018e8a <UART_SetConfig+0x7ae>
 80189f4:	2308      	movs	r3, #8
 80189f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80189fa:	e246      	b.n	8018e8a <UART_SetConfig+0x7ae>
 80189fc:	2310      	movs	r3, #16
 80189fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018a02:	e242      	b.n	8018e8a <UART_SetConfig+0x7ae>
 8018a04:	cfff69f3 	.word	0xcfff69f3
 8018a08:	58000c00 	.word	0x58000c00
 8018a0c:	11fff4ff 	.word	0x11fff4ff
 8018a10:	40011000 	.word	0x40011000
 8018a14:	58024400 	.word	0x58024400
 8018a18:	40004400 	.word	0x40004400
 8018a1c:	40004800 	.word	0x40004800
 8018a20:	40004c00 	.word	0x40004c00
 8018a24:	40005000 	.word	0x40005000
 8018a28:	2320      	movs	r3, #32
 8018a2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018a2e:	e22c      	b.n	8018e8a <UART_SetConfig+0x7ae>
 8018a30:	2340      	movs	r3, #64	@ 0x40
 8018a32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018a36:	e228      	b.n	8018e8a <UART_SetConfig+0x7ae>
 8018a38:	2380      	movs	r3, #128	@ 0x80
 8018a3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018a3e:	e224      	b.n	8018e8a <UART_SetConfig+0x7ae>
 8018a40:	697b      	ldr	r3, [r7, #20]
 8018a42:	681b      	ldr	r3, [r3, #0]
 8018a44:	4ab1      	ldr	r2, [pc, #708]	@ (8018d0c <UART_SetConfig+0x630>)
 8018a46:	4293      	cmp	r3, r2
 8018a48:	d176      	bne.n	8018b38 <UART_SetConfig+0x45c>
 8018a4a:	4bb1      	ldr	r3, [pc, #708]	@ (8018d10 <UART_SetConfig+0x634>)
 8018a4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018a4e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8018a52:	2b28      	cmp	r3, #40	@ 0x28
 8018a54:	d86c      	bhi.n	8018b30 <UART_SetConfig+0x454>
 8018a56:	a201      	add	r2, pc, #4	@ (adr r2, 8018a5c <UART_SetConfig+0x380>)
 8018a58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018a5c:	08018b01 	.word	0x08018b01
 8018a60:	08018b31 	.word	0x08018b31
 8018a64:	08018b31 	.word	0x08018b31
 8018a68:	08018b31 	.word	0x08018b31
 8018a6c:	08018b31 	.word	0x08018b31
 8018a70:	08018b31 	.word	0x08018b31
 8018a74:	08018b31 	.word	0x08018b31
 8018a78:	08018b31 	.word	0x08018b31
 8018a7c:	08018b09 	.word	0x08018b09
 8018a80:	08018b31 	.word	0x08018b31
 8018a84:	08018b31 	.word	0x08018b31
 8018a88:	08018b31 	.word	0x08018b31
 8018a8c:	08018b31 	.word	0x08018b31
 8018a90:	08018b31 	.word	0x08018b31
 8018a94:	08018b31 	.word	0x08018b31
 8018a98:	08018b31 	.word	0x08018b31
 8018a9c:	08018b11 	.word	0x08018b11
 8018aa0:	08018b31 	.word	0x08018b31
 8018aa4:	08018b31 	.word	0x08018b31
 8018aa8:	08018b31 	.word	0x08018b31
 8018aac:	08018b31 	.word	0x08018b31
 8018ab0:	08018b31 	.word	0x08018b31
 8018ab4:	08018b31 	.word	0x08018b31
 8018ab8:	08018b31 	.word	0x08018b31
 8018abc:	08018b19 	.word	0x08018b19
 8018ac0:	08018b31 	.word	0x08018b31
 8018ac4:	08018b31 	.word	0x08018b31
 8018ac8:	08018b31 	.word	0x08018b31
 8018acc:	08018b31 	.word	0x08018b31
 8018ad0:	08018b31 	.word	0x08018b31
 8018ad4:	08018b31 	.word	0x08018b31
 8018ad8:	08018b31 	.word	0x08018b31
 8018adc:	08018b21 	.word	0x08018b21
 8018ae0:	08018b31 	.word	0x08018b31
 8018ae4:	08018b31 	.word	0x08018b31
 8018ae8:	08018b31 	.word	0x08018b31
 8018aec:	08018b31 	.word	0x08018b31
 8018af0:	08018b31 	.word	0x08018b31
 8018af4:	08018b31 	.word	0x08018b31
 8018af8:	08018b31 	.word	0x08018b31
 8018afc:	08018b29 	.word	0x08018b29
 8018b00:	2301      	movs	r3, #1
 8018b02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018b06:	e1c0      	b.n	8018e8a <UART_SetConfig+0x7ae>
 8018b08:	2304      	movs	r3, #4
 8018b0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018b0e:	e1bc      	b.n	8018e8a <UART_SetConfig+0x7ae>
 8018b10:	2308      	movs	r3, #8
 8018b12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018b16:	e1b8      	b.n	8018e8a <UART_SetConfig+0x7ae>
 8018b18:	2310      	movs	r3, #16
 8018b1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018b1e:	e1b4      	b.n	8018e8a <UART_SetConfig+0x7ae>
 8018b20:	2320      	movs	r3, #32
 8018b22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018b26:	e1b0      	b.n	8018e8a <UART_SetConfig+0x7ae>
 8018b28:	2340      	movs	r3, #64	@ 0x40
 8018b2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018b2e:	e1ac      	b.n	8018e8a <UART_SetConfig+0x7ae>
 8018b30:	2380      	movs	r3, #128	@ 0x80
 8018b32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018b36:	e1a8      	b.n	8018e8a <UART_SetConfig+0x7ae>
 8018b38:	697b      	ldr	r3, [r7, #20]
 8018b3a:	681b      	ldr	r3, [r3, #0]
 8018b3c:	4a75      	ldr	r2, [pc, #468]	@ (8018d14 <UART_SetConfig+0x638>)
 8018b3e:	4293      	cmp	r3, r2
 8018b40:	d130      	bne.n	8018ba4 <UART_SetConfig+0x4c8>
 8018b42:	4b73      	ldr	r3, [pc, #460]	@ (8018d10 <UART_SetConfig+0x634>)
 8018b44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018b46:	f003 0307 	and.w	r3, r3, #7
 8018b4a:	2b05      	cmp	r3, #5
 8018b4c:	d826      	bhi.n	8018b9c <UART_SetConfig+0x4c0>
 8018b4e:	a201      	add	r2, pc, #4	@ (adr r2, 8018b54 <UART_SetConfig+0x478>)
 8018b50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018b54:	08018b6d 	.word	0x08018b6d
 8018b58:	08018b75 	.word	0x08018b75
 8018b5c:	08018b7d 	.word	0x08018b7d
 8018b60:	08018b85 	.word	0x08018b85
 8018b64:	08018b8d 	.word	0x08018b8d
 8018b68:	08018b95 	.word	0x08018b95
 8018b6c:	2300      	movs	r3, #0
 8018b6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018b72:	e18a      	b.n	8018e8a <UART_SetConfig+0x7ae>
 8018b74:	2304      	movs	r3, #4
 8018b76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018b7a:	e186      	b.n	8018e8a <UART_SetConfig+0x7ae>
 8018b7c:	2308      	movs	r3, #8
 8018b7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018b82:	e182      	b.n	8018e8a <UART_SetConfig+0x7ae>
 8018b84:	2310      	movs	r3, #16
 8018b86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018b8a:	e17e      	b.n	8018e8a <UART_SetConfig+0x7ae>
 8018b8c:	2320      	movs	r3, #32
 8018b8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018b92:	e17a      	b.n	8018e8a <UART_SetConfig+0x7ae>
 8018b94:	2340      	movs	r3, #64	@ 0x40
 8018b96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018b9a:	e176      	b.n	8018e8a <UART_SetConfig+0x7ae>
 8018b9c:	2380      	movs	r3, #128	@ 0x80
 8018b9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018ba2:	e172      	b.n	8018e8a <UART_SetConfig+0x7ae>
 8018ba4:	697b      	ldr	r3, [r7, #20]
 8018ba6:	681b      	ldr	r3, [r3, #0]
 8018ba8:	4a5b      	ldr	r2, [pc, #364]	@ (8018d18 <UART_SetConfig+0x63c>)
 8018baa:	4293      	cmp	r3, r2
 8018bac:	d130      	bne.n	8018c10 <UART_SetConfig+0x534>
 8018bae:	4b58      	ldr	r3, [pc, #352]	@ (8018d10 <UART_SetConfig+0x634>)
 8018bb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018bb2:	f003 0307 	and.w	r3, r3, #7
 8018bb6:	2b05      	cmp	r3, #5
 8018bb8:	d826      	bhi.n	8018c08 <UART_SetConfig+0x52c>
 8018bba:	a201      	add	r2, pc, #4	@ (adr r2, 8018bc0 <UART_SetConfig+0x4e4>)
 8018bbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018bc0:	08018bd9 	.word	0x08018bd9
 8018bc4:	08018be1 	.word	0x08018be1
 8018bc8:	08018be9 	.word	0x08018be9
 8018bcc:	08018bf1 	.word	0x08018bf1
 8018bd0:	08018bf9 	.word	0x08018bf9
 8018bd4:	08018c01 	.word	0x08018c01
 8018bd8:	2300      	movs	r3, #0
 8018bda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018bde:	e154      	b.n	8018e8a <UART_SetConfig+0x7ae>
 8018be0:	2304      	movs	r3, #4
 8018be2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018be6:	e150      	b.n	8018e8a <UART_SetConfig+0x7ae>
 8018be8:	2308      	movs	r3, #8
 8018bea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018bee:	e14c      	b.n	8018e8a <UART_SetConfig+0x7ae>
 8018bf0:	2310      	movs	r3, #16
 8018bf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018bf6:	e148      	b.n	8018e8a <UART_SetConfig+0x7ae>
 8018bf8:	2320      	movs	r3, #32
 8018bfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018bfe:	e144      	b.n	8018e8a <UART_SetConfig+0x7ae>
 8018c00:	2340      	movs	r3, #64	@ 0x40
 8018c02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018c06:	e140      	b.n	8018e8a <UART_SetConfig+0x7ae>
 8018c08:	2380      	movs	r3, #128	@ 0x80
 8018c0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018c0e:	e13c      	b.n	8018e8a <UART_SetConfig+0x7ae>
 8018c10:	697b      	ldr	r3, [r7, #20]
 8018c12:	681b      	ldr	r3, [r3, #0]
 8018c14:	4a41      	ldr	r2, [pc, #260]	@ (8018d1c <UART_SetConfig+0x640>)
 8018c16:	4293      	cmp	r3, r2
 8018c18:	f040 8082 	bne.w	8018d20 <UART_SetConfig+0x644>
 8018c1c:	4b3c      	ldr	r3, [pc, #240]	@ (8018d10 <UART_SetConfig+0x634>)
 8018c1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018c20:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8018c24:	2b28      	cmp	r3, #40	@ 0x28
 8018c26:	d86d      	bhi.n	8018d04 <UART_SetConfig+0x628>
 8018c28:	a201      	add	r2, pc, #4	@ (adr r2, 8018c30 <UART_SetConfig+0x554>)
 8018c2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018c2e:	bf00      	nop
 8018c30:	08018cd5 	.word	0x08018cd5
 8018c34:	08018d05 	.word	0x08018d05
 8018c38:	08018d05 	.word	0x08018d05
 8018c3c:	08018d05 	.word	0x08018d05
 8018c40:	08018d05 	.word	0x08018d05
 8018c44:	08018d05 	.word	0x08018d05
 8018c48:	08018d05 	.word	0x08018d05
 8018c4c:	08018d05 	.word	0x08018d05
 8018c50:	08018cdd 	.word	0x08018cdd
 8018c54:	08018d05 	.word	0x08018d05
 8018c58:	08018d05 	.word	0x08018d05
 8018c5c:	08018d05 	.word	0x08018d05
 8018c60:	08018d05 	.word	0x08018d05
 8018c64:	08018d05 	.word	0x08018d05
 8018c68:	08018d05 	.word	0x08018d05
 8018c6c:	08018d05 	.word	0x08018d05
 8018c70:	08018ce5 	.word	0x08018ce5
 8018c74:	08018d05 	.word	0x08018d05
 8018c78:	08018d05 	.word	0x08018d05
 8018c7c:	08018d05 	.word	0x08018d05
 8018c80:	08018d05 	.word	0x08018d05
 8018c84:	08018d05 	.word	0x08018d05
 8018c88:	08018d05 	.word	0x08018d05
 8018c8c:	08018d05 	.word	0x08018d05
 8018c90:	08018ced 	.word	0x08018ced
 8018c94:	08018d05 	.word	0x08018d05
 8018c98:	08018d05 	.word	0x08018d05
 8018c9c:	08018d05 	.word	0x08018d05
 8018ca0:	08018d05 	.word	0x08018d05
 8018ca4:	08018d05 	.word	0x08018d05
 8018ca8:	08018d05 	.word	0x08018d05
 8018cac:	08018d05 	.word	0x08018d05
 8018cb0:	08018cf5 	.word	0x08018cf5
 8018cb4:	08018d05 	.word	0x08018d05
 8018cb8:	08018d05 	.word	0x08018d05
 8018cbc:	08018d05 	.word	0x08018d05
 8018cc0:	08018d05 	.word	0x08018d05
 8018cc4:	08018d05 	.word	0x08018d05
 8018cc8:	08018d05 	.word	0x08018d05
 8018ccc:	08018d05 	.word	0x08018d05
 8018cd0:	08018cfd 	.word	0x08018cfd
 8018cd4:	2301      	movs	r3, #1
 8018cd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018cda:	e0d6      	b.n	8018e8a <UART_SetConfig+0x7ae>
 8018cdc:	2304      	movs	r3, #4
 8018cde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018ce2:	e0d2      	b.n	8018e8a <UART_SetConfig+0x7ae>
 8018ce4:	2308      	movs	r3, #8
 8018ce6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018cea:	e0ce      	b.n	8018e8a <UART_SetConfig+0x7ae>
 8018cec:	2310      	movs	r3, #16
 8018cee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018cf2:	e0ca      	b.n	8018e8a <UART_SetConfig+0x7ae>
 8018cf4:	2320      	movs	r3, #32
 8018cf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018cfa:	e0c6      	b.n	8018e8a <UART_SetConfig+0x7ae>
 8018cfc:	2340      	movs	r3, #64	@ 0x40
 8018cfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018d02:	e0c2      	b.n	8018e8a <UART_SetConfig+0x7ae>
 8018d04:	2380      	movs	r3, #128	@ 0x80
 8018d06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018d0a:	e0be      	b.n	8018e8a <UART_SetConfig+0x7ae>
 8018d0c:	40011400 	.word	0x40011400
 8018d10:	58024400 	.word	0x58024400
 8018d14:	40007800 	.word	0x40007800
 8018d18:	40007c00 	.word	0x40007c00
 8018d1c:	40011800 	.word	0x40011800
 8018d20:	697b      	ldr	r3, [r7, #20]
 8018d22:	681b      	ldr	r3, [r3, #0]
 8018d24:	4aad      	ldr	r2, [pc, #692]	@ (8018fdc <UART_SetConfig+0x900>)
 8018d26:	4293      	cmp	r3, r2
 8018d28:	d176      	bne.n	8018e18 <UART_SetConfig+0x73c>
 8018d2a:	4bad      	ldr	r3, [pc, #692]	@ (8018fe0 <UART_SetConfig+0x904>)
 8018d2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018d2e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8018d32:	2b28      	cmp	r3, #40	@ 0x28
 8018d34:	d86c      	bhi.n	8018e10 <UART_SetConfig+0x734>
 8018d36:	a201      	add	r2, pc, #4	@ (adr r2, 8018d3c <UART_SetConfig+0x660>)
 8018d38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018d3c:	08018de1 	.word	0x08018de1
 8018d40:	08018e11 	.word	0x08018e11
 8018d44:	08018e11 	.word	0x08018e11
 8018d48:	08018e11 	.word	0x08018e11
 8018d4c:	08018e11 	.word	0x08018e11
 8018d50:	08018e11 	.word	0x08018e11
 8018d54:	08018e11 	.word	0x08018e11
 8018d58:	08018e11 	.word	0x08018e11
 8018d5c:	08018de9 	.word	0x08018de9
 8018d60:	08018e11 	.word	0x08018e11
 8018d64:	08018e11 	.word	0x08018e11
 8018d68:	08018e11 	.word	0x08018e11
 8018d6c:	08018e11 	.word	0x08018e11
 8018d70:	08018e11 	.word	0x08018e11
 8018d74:	08018e11 	.word	0x08018e11
 8018d78:	08018e11 	.word	0x08018e11
 8018d7c:	08018df1 	.word	0x08018df1
 8018d80:	08018e11 	.word	0x08018e11
 8018d84:	08018e11 	.word	0x08018e11
 8018d88:	08018e11 	.word	0x08018e11
 8018d8c:	08018e11 	.word	0x08018e11
 8018d90:	08018e11 	.word	0x08018e11
 8018d94:	08018e11 	.word	0x08018e11
 8018d98:	08018e11 	.word	0x08018e11
 8018d9c:	08018df9 	.word	0x08018df9
 8018da0:	08018e11 	.word	0x08018e11
 8018da4:	08018e11 	.word	0x08018e11
 8018da8:	08018e11 	.word	0x08018e11
 8018dac:	08018e11 	.word	0x08018e11
 8018db0:	08018e11 	.word	0x08018e11
 8018db4:	08018e11 	.word	0x08018e11
 8018db8:	08018e11 	.word	0x08018e11
 8018dbc:	08018e01 	.word	0x08018e01
 8018dc0:	08018e11 	.word	0x08018e11
 8018dc4:	08018e11 	.word	0x08018e11
 8018dc8:	08018e11 	.word	0x08018e11
 8018dcc:	08018e11 	.word	0x08018e11
 8018dd0:	08018e11 	.word	0x08018e11
 8018dd4:	08018e11 	.word	0x08018e11
 8018dd8:	08018e11 	.word	0x08018e11
 8018ddc:	08018e09 	.word	0x08018e09
 8018de0:	2301      	movs	r3, #1
 8018de2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018de6:	e050      	b.n	8018e8a <UART_SetConfig+0x7ae>
 8018de8:	2304      	movs	r3, #4
 8018dea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018dee:	e04c      	b.n	8018e8a <UART_SetConfig+0x7ae>
 8018df0:	2308      	movs	r3, #8
 8018df2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018df6:	e048      	b.n	8018e8a <UART_SetConfig+0x7ae>
 8018df8:	2310      	movs	r3, #16
 8018dfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018dfe:	e044      	b.n	8018e8a <UART_SetConfig+0x7ae>
 8018e00:	2320      	movs	r3, #32
 8018e02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018e06:	e040      	b.n	8018e8a <UART_SetConfig+0x7ae>
 8018e08:	2340      	movs	r3, #64	@ 0x40
 8018e0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018e0e:	e03c      	b.n	8018e8a <UART_SetConfig+0x7ae>
 8018e10:	2380      	movs	r3, #128	@ 0x80
 8018e12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018e16:	e038      	b.n	8018e8a <UART_SetConfig+0x7ae>
 8018e18:	697b      	ldr	r3, [r7, #20]
 8018e1a:	681b      	ldr	r3, [r3, #0]
 8018e1c:	4a71      	ldr	r2, [pc, #452]	@ (8018fe4 <UART_SetConfig+0x908>)
 8018e1e:	4293      	cmp	r3, r2
 8018e20:	d130      	bne.n	8018e84 <UART_SetConfig+0x7a8>
 8018e22:	4b6f      	ldr	r3, [pc, #444]	@ (8018fe0 <UART_SetConfig+0x904>)
 8018e24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8018e26:	f003 0307 	and.w	r3, r3, #7
 8018e2a:	2b05      	cmp	r3, #5
 8018e2c:	d826      	bhi.n	8018e7c <UART_SetConfig+0x7a0>
 8018e2e:	a201      	add	r2, pc, #4	@ (adr r2, 8018e34 <UART_SetConfig+0x758>)
 8018e30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018e34:	08018e4d 	.word	0x08018e4d
 8018e38:	08018e55 	.word	0x08018e55
 8018e3c:	08018e5d 	.word	0x08018e5d
 8018e40:	08018e65 	.word	0x08018e65
 8018e44:	08018e6d 	.word	0x08018e6d
 8018e48:	08018e75 	.word	0x08018e75
 8018e4c:	2302      	movs	r3, #2
 8018e4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018e52:	e01a      	b.n	8018e8a <UART_SetConfig+0x7ae>
 8018e54:	2304      	movs	r3, #4
 8018e56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018e5a:	e016      	b.n	8018e8a <UART_SetConfig+0x7ae>
 8018e5c:	2308      	movs	r3, #8
 8018e5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018e62:	e012      	b.n	8018e8a <UART_SetConfig+0x7ae>
 8018e64:	2310      	movs	r3, #16
 8018e66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018e6a:	e00e      	b.n	8018e8a <UART_SetConfig+0x7ae>
 8018e6c:	2320      	movs	r3, #32
 8018e6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018e72:	e00a      	b.n	8018e8a <UART_SetConfig+0x7ae>
 8018e74:	2340      	movs	r3, #64	@ 0x40
 8018e76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018e7a:	e006      	b.n	8018e8a <UART_SetConfig+0x7ae>
 8018e7c:	2380      	movs	r3, #128	@ 0x80
 8018e7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018e82:	e002      	b.n	8018e8a <UART_SetConfig+0x7ae>
 8018e84:	2380      	movs	r3, #128	@ 0x80
 8018e86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8018e8a:	697b      	ldr	r3, [r7, #20]
 8018e8c:	681b      	ldr	r3, [r3, #0]
 8018e8e:	4a55      	ldr	r2, [pc, #340]	@ (8018fe4 <UART_SetConfig+0x908>)
 8018e90:	4293      	cmp	r3, r2
 8018e92:	f040 80f8 	bne.w	8019086 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8018e96:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8018e9a:	2b20      	cmp	r3, #32
 8018e9c:	dc46      	bgt.n	8018f2c <UART_SetConfig+0x850>
 8018e9e:	2b02      	cmp	r3, #2
 8018ea0:	db75      	blt.n	8018f8e <UART_SetConfig+0x8b2>
 8018ea2:	3b02      	subs	r3, #2
 8018ea4:	2b1e      	cmp	r3, #30
 8018ea6:	d872      	bhi.n	8018f8e <UART_SetConfig+0x8b2>
 8018ea8:	a201      	add	r2, pc, #4	@ (adr r2, 8018eb0 <UART_SetConfig+0x7d4>)
 8018eaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018eae:	bf00      	nop
 8018eb0:	08018f33 	.word	0x08018f33
 8018eb4:	08018f8f 	.word	0x08018f8f
 8018eb8:	08018f3b 	.word	0x08018f3b
 8018ebc:	08018f8f 	.word	0x08018f8f
 8018ec0:	08018f8f 	.word	0x08018f8f
 8018ec4:	08018f8f 	.word	0x08018f8f
 8018ec8:	08018f4b 	.word	0x08018f4b
 8018ecc:	08018f8f 	.word	0x08018f8f
 8018ed0:	08018f8f 	.word	0x08018f8f
 8018ed4:	08018f8f 	.word	0x08018f8f
 8018ed8:	08018f8f 	.word	0x08018f8f
 8018edc:	08018f8f 	.word	0x08018f8f
 8018ee0:	08018f8f 	.word	0x08018f8f
 8018ee4:	08018f8f 	.word	0x08018f8f
 8018ee8:	08018f5b 	.word	0x08018f5b
 8018eec:	08018f8f 	.word	0x08018f8f
 8018ef0:	08018f8f 	.word	0x08018f8f
 8018ef4:	08018f8f 	.word	0x08018f8f
 8018ef8:	08018f8f 	.word	0x08018f8f
 8018efc:	08018f8f 	.word	0x08018f8f
 8018f00:	08018f8f 	.word	0x08018f8f
 8018f04:	08018f8f 	.word	0x08018f8f
 8018f08:	08018f8f 	.word	0x08018f8f
 8018f0c:	08018f8f 	.word	0x08018f8f
 8018f10:	08018f8f 	.word	0x08018f8f
 8018f14:	08018f8f 	.word	0x08018f8f
 8018f18:	08018f8f 	.word	0x08018f8f
 8018f1c:	08018f8f 	.word	0x08018f8f
 8018f20:	08018f8f 	.word	0x08018f8f
 8018f24:	08018f8f 	.word	0x08018f8f
 8018f28:	08018f81 	.word	0x08018f81
 8018f2c:	2b40      	cmp	r3, #64	@ 0x40
 8018f2e:	d02a      	beq.n	8018f86 <UART_SetConfig+0x8aa>
 8018f30:	e02d      	b.n	8018f8e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8018f32:	f7fa fd8b 	bl	8013a4c <HAL_RCCEx_GetD3PCLK1Freq>
 8018f36:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8018f38:	e02f      	b.n	8018f9a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8018f3a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8018f3e:	4618      	mov	r0, r3
 8018f40:	f7fa fd9a 	bl	8013a78 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8018f44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018f46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8018f48:	e027      	b.n	8018f9a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8018f4a:	f107 0318 	add.w	r3, r7, #24
 8018f4e:	4618      	mov	r0, r3
 8018f50:	f7fa fee6 	bl	8013d20 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8018f54:	69fb      	ldr	r3, [r7, #28]
 8018f56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8018f58:	e01f      	b.n	8018f9a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8018f5a:	4b21      	ldr	r3, [pc, #132]	@ (8018fe0 <UART_SetConfig+0x904>)
 8018f5c:	681b      	ldr	r3, [r3, #0]
 8018f5e:	f003 0320 	and.w	r3, r3, #32
 8018f62:	2b00      	cmp	r3, #0
 8018f64:	d009      	beq.n	8018f7a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8018f66:	4b1e      	ldr	r3, [pc, #120]	@ (8018fe0 <UART_SetConfig+0x904>)
 8018f68:	681b      	ldr	r3, [r3, #0]
 8018f6a:	08db      	lsrs	r3, r3, #3
 8018f6c:	f003 0303 	and.w	r3, r3, #3
 8018f70:	4a1d      	ldr	r2, [pc, #116]	@ (8018fe8 <UART_SetConfig+0x90c>)
 8018f72:	fa22 f303 	lsr.w	r3, r2, r3
 8018f76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8018f78:	e00f      	b.n	8018f9a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8018f7a:	4b1b      	ldr	r3, [pc, #108]	@ (8018fe8 <UART_SetConfig+0x90c>)
 8018f7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8018f7e:	e00c      	b.n	8018f9a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8018f80:	4b1a      	ldr	r3, [pc, #104]	@ (8018fec <UART_SetConfig+0x910>)
 8018f82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8018f84:	e009      	b.n	8018f9a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8018f86:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8018f8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8018f8c:	e005      	b.n	8018f9a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8018f8e:	2300      	movs	r3, #0
 8018f90:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8018f92:	2301      	movs	r3, #1
 8018f94:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8018f98:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8018f9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018f9c:	2b00      	cmp	r3, #0
 8018f9e:	f000 81ee 	beq.w	801937e <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8018fa2:	697b      	ldr	r3, [r7, #20]
 8018fa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018fa6:	4a12      	ldr	r2, [pc, #72]	@ (8018ff0 <UART_SetConfig+0x914>)
 8018fa8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8018fac:	461a      	mov	r2, r3
 8018fae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018fb0:	fbb3 f3f2 	udiv	r3, r3, r2
 8018fb4:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8018fb6:	697b      	ldr	r3, [r7, #20]
 8018fb8:	685a      	ldr	r2, [r3, #4]
 8018fba:	4613      	mov	r3, r2
 8018fbc:	005b      	lsls	r3, r3, #1
 8018fbe:	4413      	add	r3, r2
 8018fc0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8018fc2:	429a      	cmp	r2, r3
 8018fc4:	d305      	bcc.n	8018fd2 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8018fc6:	697b      	ldr	r3, [r7, #20]
 8018fc8:	685b      	ldr	r3, [r3, #4]
 8018fca:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8018fcc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8018fce:	429a      	cmp	r2, r3
 8018fd0:	d910      	bls.n	8018ff4 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8018fd2:	2301      	movs	r3, #1
 8018fd4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8018fd8:	e1d1      	b.n	801937e <UART_SetConfig+0xca2>
 8018fda:	bf00      	nop
 8018fdc:	40011c00 	.word	0x40011c00
 8018fe0:	58024400 	.word	0x58024400
 8018fe4:	58000c00 	.word	0x58000c00
 8018fe8:	03d09000 	.word	0x03d09000
 8018fec:	003d0900 	.word	0x003d0900
 8018ff0:	0801e8c4 	.word	0x0801e8c4
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8018ff4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018ff6:	2200      	movs	r2, #0
 8018ff8:	60bb      	str	r3, [r7, #8]
 8018ffa:	60fa      	str	r2, [r7, #12]
 8018ffc:	697b      	ldr	r3, [r7, #20]
 8018ffe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019000:	4ac0      	ldr	r2, [pc, #768]	@ (8019304 <UART_SetConfig+0xc28>)
 8019002:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8019006:	b29b      	uxth	r3, r3
 8019008:	2200      	movs	r2, #0
 801900a:	603b      	str	r3, [r7, #0]
 801900c:	607a      	str	r2, [r7, #4]
 801900e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8019012:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8019016:	f7e7 f9cb 	bl	80003b0 <__aeabi_uldivmod>
 801901a:	4602      	mov	r2, r0
 801901c:	460b      	mov	r3, r1
 801901e:	4610      	mov	r0, r2
 8019020:	4619      	mov	r1, r3
 8019022:	f04f 0200 	mov.w	r2, #0
 8019026:	f04f 0300 	mov.w	r3, #0
 801902a:	020b      	lsls	r3, r1, #8
 801902c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8019030:	0202      	lsls	r2, r0, #8
 8019032:	6979      	ldr	r1, [r7, #20]
 8019034:	6849      	ldr	r1, [r1, #4]
 8019036:	0849      	lsrs	r1, r1, #1
 8019038:	2000      	movs	r0, #0
 801903a:	460c      	mov	r4, r1
 801903c:	4605      	mov	r5, r0
 801903e:	eb12 0804 	adds.w	r8, r2, r4
 8019042:	eb43 0905 	adc.w	r9, r3, r5
 8019046:	697b      	ldr	r3, [r7, #20]
 8019048:	685b      	ldr	r3, [r3, #4]
 801904a:	2200      	movs	r2, #0
 801904c:	469a      	mov	sl, r3
 801904e:	4693      	mov	fp, r2
 8019050:	4652      	mov	r2, sl
 8019052:	465b      	mov	r3, fp
 8019054:	4640      	mov	r0, r8
 8019056:	4649      	mov	r1, r9
 8019058:	f7e7 f9aa 	bl	80003b0 <__aeabi_uldivmod>
 801905c:	4602      	mov	r2, r0
 801905e:	460b      	mov	r3, r1
 8019060:	4613      	mov	r3, r2
 8019062:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8019064:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019066:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801906a:	d308      	bcc.n	801907e <UART_SetConfig+0x9a2>
 801906c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801906e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8019072:	d204      	bcs.n	801907e <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8019074:	697b      	ldr	r3, [r7, #20]
 8019076:	681b      	ldr	r3, [r3, #0]
 8019078:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801907a:	60da      	str	r2, [r3, #12]
 801907c:	e17f      	b.n	801937e <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 801907e:	2301      	movs	r3, #1
 8019080:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8019084:	e17b      	b.n	801937e <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8019086:	697b      	ldr	r3, [r7, #20]
 8019088:	69db      	ldr	r3, [r3, #28]
 801908a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801908e:	f040 80bd 	bne.w	801920c <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8019092:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8019096:	2b20      	cmp	r3, #32
 8019098:	dc48      	bgt.n	801912c <UART_SetConfig+0xa50>
 801909a:	2b00      	cmp	r3, #0
 801909c:	db7b      	blt.n	8019196 <UART_SetConfig+0xaba>
 801909e:	2b20      	cmp	r3, #32
 80190a0:	d879      	bhi.n	8019196 <UART_SetConfig+0xaba>
 80190a2:	a201      	add	r2, pc, #4	@ (adr r2, 80190a8 <UART_SetConfig+0x9cc>)
 80190a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80190a8:	08019133 	.word	0x08019133
 80190ac:	0801913b 	.word	0x0801913b
 80190b0:	08019197 	.word	0x08019197
 80190b4:	08019197 	.word	0x08019197
 80190b8:	08019143 	.word	0x08019143
 80190bc:	08019197 	.word	0x08019197
 80190c0:	08019197 	.word	0x08019197
 80190c4:	08019197 	.word	0x08019197
 80190c8:	08019153 	.word	0x08019153
 80190cc:	08019197 	.word	0x08019197
 80190d0:	08019197 	.word	0x08019197
 80190d4:	08019197 	.word	0x08019197
 80190d8:	08019197 	.word	0x08019197
 80190dc:	08019197 	.word	0x08019197
 80190e0:	08019197 	.word	0x08019197
 80190e4:	08019197 	.word	0x08019197
 80190e8:	08019163 	.word	0x08019163
 80190ec:	08019197 	.word	0x08019197
 80190f0:	08019197 	.word	0x08019197
 80190f4:	08019197 	.word	0x08019197
 80190f8:	08019197 	.word	0x08019197
 80190fc:	08019197 	.word	0x08019197
 8019100:	08019197 	.word	0x08019197
 8019104:	08019197 	.word	0x08019197
 8019108:	08019197 	.word	0x08019197
 801910c:	08019197 	.word	0x08019197
 8019110:	08019197 	.word	0x08019197
 8019114:	08019197 	.word	0x08019197
 8019118:	08019197 	.word	0x08019197
 801911c:	08019197 	.word	0x08019197
 8019120:	08019197 	.word	0x08019197
 8019124:	08019197 	.word	0x08019197
 8019128:	08019189 	.word	0x08019189
 801912c:	2b40      	cmp	r3, #64	@ 0x40
 801912e:	d02e      	beq.n	801918e <UART_SetConfig+0xab2>
 8019130:	e031      	b.n	8019196 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8019132:	f7f8 fded 	bl	8011d10 <HAL_RCC_GetPCLK1Freq>
 8019136:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8019138:	e033      	b.n	80191a2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801913a:	f7f8 fdff 	bl	8011d3c <HAL_RCC_GetPCLK2Freq>
 801913e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8019140:	e02f      	b.n	80191a2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8019142:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8019146:	4618      	mov	r0, r3
 8019148:	f7fa fc96 	bl	8013a78 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 801914c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801914e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8019150:	e027      	b.n	80191a2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8019152:	f107 0318 	add.w	r3, r7, #24
 8019156:	4618      	mov	r0, r3
 8019158:	f7fa fde2 	bl	8013d20 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 801915c:	69fb      	ldr	r3, [r7, #28]
 801915e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8019160:	e01f      	b.n	80191a2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8019162:	4b69      	ldr	r3, [pc, #420]	@ (8019308 <UART_SetConfig+0xc2c>)
 8019164:	681b      	ldr	r3, [r3, #0]
 8019166:	f003 0320 	and.w	r3, r3, #32
 801916a:	2b00      	cmp	r3, #0
 801916c:	d009      	beq.n	8019182 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801916e:	4b66      	ldr	r3, [pc, #408]	@ (8019308 <UART_SetConfig+0xc2c>)
 8019170:	681b      	ldr	r3, [r3, #0]
 8019172:	08db      	lsrs	r3, r3, #3
 8019174:	f003 0303 	and.w	r3, r3, #3
 8019178:	4a64      	ldr	r2, [pc, #400]	@ (801930c <UART_SetConfig+0xc30>)
 801917a:	fa22 f303 	lsr.w	r3, r2, r3
 801917e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8019180:	e00f      	b.n	80191a2 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8019182:	4b62      	ldr	r3, [pc, #392]	@ (801930c <UART_SetConfig+0xc30>)
 8019184:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8019186:	e00c      	b.n	80191a2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8019188:	4b61      	ldr	r3, [pc, #388]	@ (8019310 <UART_SetConfig+0xc34>)
 801918a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801918c:	e009      	b.n	80191a2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801918e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8019192:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8019194:	e005      	b.n	80191a2 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8019196:	2300      	movs	r3, #0
 8019198:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 801919a:	2301      	movs	r3, #1
 801919c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80191a0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80191a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80191a4:	2b00      	cmp	r3, #0
 80191a6:	f000 80ea 	beq.w	801937e <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80191aa:	697b      	ldr	r3, [r7, #20]
 80191ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80191ae:	4a55      	ldr	r2, [pc, #340]	@ (8019304 <UART_SetConfig+0xc28>)
 80191b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80191b4:	461a      	mov	r2, r3
 80191b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80191b8:	fbb3 f3f2 	udiv	r3, r3, r2
 80191bc:	005a      	lsls	r2, r3, #1
 80191be:	697b      	ldr	r3, [r7, #20]
 80191c0:	685b      	ldr	r3, [r3, #4]
 80191c2:	085b      	lsrs	r3, r3, #1
 80191c4:	441a      	add	r2, r3
 80191c6:	697b      	ldr	r3, [r7, #20]
 80191c8:	685b      	ldr	r3, [r3, #4]
 80191ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80191ce:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80191d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80191d2:	2b0f      	cmp	r3, #15
 80191d4:	d916      	bls.n	8019204 <UART_SetConfig+0xb28>
 80191d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80191d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80191dc:	d212      	bcs.n	8019204 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80191de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80191e0:	b29b      	uxth	r3, r3
 80191e2:	f023 030f 	bic.w	r3, r3, #15
 80191e6:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80191e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80191ea:	085b      	lsrs	r3, r3, #1
 80191ec:	b29b      	uxth	r3, r3
 80191ee:	f003 0307 	and.w	r3, r3, #7
 80191f2:	b29a      	uxth	r2, r3
 80191f4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80191f6:	4313      	orrs	r3, r2
 80191f8:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80191fa:	697b      	ldr	r3, [r7, #20]
 80191fc:	681b      	ldr	r3, [r3, #0]
 80191fe:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8019200:	60da      	str	r2, [r3, #12]
 8019202:	e0bc      	b.n	801937e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8019204:	2301      	movs	r3, #1
 8019206:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 801920a:	e0b8      	b.n	801937e <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 801920c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8019210:	2b20      	cmp	r3, #32
 8019212:	dc4b      	bgt.n	80192ac <UART_SetConfig+0xbd0>
 8019214:	2b00      	cmp	r3, #0
 8019216:	f2c0 8087 	blt.w	8019328 <UART_SetConfig+0xc4c>
 801921a:	2b20      	cmp	r3, #32
 801921c:	f200 8084 	bhi.w	8019328 <UART_SetConfig+0xc4c>
 8019220:	a201      	add	r2, pc, #4	@ (adr r2, 8019228 <UART_SetConfig+0xb4c>)
 8019222:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019226:	bf00      	nop
 8019228:	080192b3 	.word	0x080192b3
 801922c:	080192bb 	.word	0x080192bb
 8019230:	08019329 	.word	0x08019329
 8019234:	08019329 	.word	0x08019329
 8019238:	080192c3 	.word	0x080192c3
 801923c:	08019329 	.word	0x08019329
 8019240:	08019329 	.word	0x08019329
 8019244:	08019329 	.word	0x08019329
 8019248:	080192d3 	.word	0x080192d3
 801924c:	08019329 	.word	0x08019329
 8019250:	08019329 	.word	0x08019329
 8019254:	08019329 	.word	0x08019329
 8019258:	08019329 	.word	0x08019329
 801925c:	08019329 	.word	0x08019329
 8019260:	08019329 	.word	0x08019329
 8019264:	08019329 	.word	0x08019329
 8019268:	080192e3 	.word	0x080192e3
 801926c:	08019329 	.word	0x08019329
 8019270:	08019329 	.word	0x08019329
 8019274:	08019329 	.word	0x08019329
 8019278:	08019329 	.word	0x08019329
 801927c:	08019329 	.word	0x08019329
 8019280:	08019329 	.word	0x08019329
 8019284:	08019329 	.word	0x08019329
 8019288:	08019329 	.word	0x08019329
 801928c:	08019329 	.word	0x08019329
 8019290:	08019329 	.word	0x08019329
 8019294:	08019329 	.word	0x08019329
 8019298:	08019329 	.word	0x08019329
 801929c:	08019329 	.word	0x08019329
 80192a0:	08019329 	.word	0x08019329
 80192a4:	08019329 	.word	0x08019329
 80192a8:	0801931b 	.word	0x0801931b
 80192ac:	2b40      	cmp	r3, #64	@ 0x40
 80192ae:	d037      	beq.n	8019320 <UART_SetConfig+0xc44>
 80192b0:	e03a      	b.n	8019328 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80192b2:	f7f8 fd2d 	bl	8011d10 <HAL_RCC_GetPCLK1Freq>
 80192b6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80192b8:	e03c      	b.n	8019334 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80192ba:	f7f8 fd3f 	bl	8011d3c <HAL_RCC_GetPCLK2Freq>
 80192be:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80192c0:	e038      	b.n	8019334 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80192c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80192c6:	4618      	mov	r0, r3
 80192c8:	f7fa fbd6 	bl	8013a78 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80192cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80192ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80192d0:	e030      	b.n	8019334 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80192d2:	f107 0318 	add.w	r3, r7, #24
 80192d6:	4618      	mov	r0, r3
 80192d8:	f7fa fd22 	bl	8013d20 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80192dc:	69fb      	ldr	r3, [r7, #28]
 80192de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80192e0:	e028      	b.n	8019334 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80192e2:	4b09      	ldr	r3, [pc, #36]	@ (8019308 <UART_SetConfig+0xc2c>)
 80192e4:	681b      	ldr	r3, [r3, #0]
 80192e6:	f003 0320 	and.w	r3, r3, #32
 80192ea:	2b00      	cmp	r3, #0
 80192ec:	d012      	beq.n	8019314 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80192ee:	4b06      	ldr	r3, [pc, #24]	@ (8019308 <UART_SetConfig+0xc2c>)
 80192f0:	681b      	ldr	r3, [r3, #0]
 80192f2:	08db      	lsrs	r3, r3, #3
 80192f4:	f003 0303 	and.w	r3, r3, #3
 80192f8:	4a04      	ldr	r2, [pc, #16]	@ (801930c <UART_SetConfig+0xc30>)
 80192fa:	fa22 f303 	lsr.w	r3, r2, r3
 80192fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8019300:	e018      	b.n	8019334 <UART_SetConfig+0xc58>
 8019302:	bf00      	nop
 8019304:	0801e8c4 	.word	0x0801e8c4
 8019308:	58024400 	.word	0x58024400
 801930c:	03d09000 	.word	0x03d09000
 8019310:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8019314:	4b24      	ldr	r3, [pc, #144]	@ (80193a8 <UART_SetConfig+0xccc>)
 8019316:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8019318:	e00c      	b.n	8019334 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 801931a:	4b24      	ldr	r3, [pc, #144]	@ (80193ac <UART_SetConfig+0xcd0>)
 801931c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801931e:	e009      	b.n	8019334 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8019320:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8019324:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8019326:	e005      	b.n	8019334 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8019328:	2300      	movs	r3, #0
 801932a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 801932c:	2301      	movs	r3, #1
 801932e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8019332:	bf00      	nop
    }

    if (pclk != 0U)
 8019334:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019336:	2b00      	cmp	r3, #0
 8019338:	d021      	beq.n	801937e <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801933a:	697b      	ldr	r3, [r7, #20]
 801933c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801933e:	4a1c      	ldr	r2, [pc, #112]	@ (80193b0 <UART_SetConfig+0xcd4>)
 8019340:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8019344:	461a      	mov	r2, r3
 8019346:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019348:	fbb3 f2f2 	udiv	r2, r3, r2
 801934c:	697b      	ldr	r3, [r7, #20]
 801934e:	685b      	ldr	r3, [r3, #4]
 8019350:	085b      	lsrs	r3, r3, #1
 8019352:	441a      	add	r2, r3
 8019354:	697b      	ldr	r3, [r7, #20]
 8019356:	685b      	ldr	r3, [r3, #4]
 8019358:	fbb2 f3f3 	udiv	r3, r2, r3
 801935c:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801935e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019360:	2b0f      	cmp	r3, #15
 8019362:	d909      	bls.n	8019378 <UART_SetConfig+0xc9c>
 8019364:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019366:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801936a:	d205      	bcs.n	8019378 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 801936c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801936e:	b29a      	uxth	r2, r3
 8019370:	697b      	ldr	r3, [r7, #20]
 8019372:	681b      	ldr	r3, [r3, #0]
 8019374:	60da      	str	r2, [r3, #12]
 8019376:	e002      	b.n	801937e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8019378:	2301      	movs	r3, #1
 801937a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 801937e:	697b      	ldr	r3, [r7, #20]
 8019380:	2201      	movs	r2, #1
 8019382:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8019386:	697b      	ldr	r3, [r7, #20]
 8019388:	2201      	movs	r2, #1
 801938a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 801938e:	697b      	ldr	r3, [r7, #20]
 8019390:	2200      	movs	r2, #0
 8019392:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8019394:	697b      	ldr	r3, [r7, #20]
 8019396:	2200      	movs	r2, #0
 8019398:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 801939a:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 801939e:	4618      	mov	r0, r3
 80193a0:	3748      	adds	r7, #72	@ 0x48
 80193a2:	46bd      	mov	sp, r7
 80193a4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80193a8:	03d09000 	.word	0x03d09000
 80193ac:	003d0900 	.word	0x003d0900
 80193b0:	0801e8c4 	.word	0x0801e8c4

080193b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80193b4:	b480      	push	{r7}
 80193b6:	b083      	sub	sp, #12
 80193b8:	af00      	add	r7, sp, #0
 80193ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80193bc:	687b      	ldr	r3, [r7, #4]
 80193be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80193c0:	f003 0308 	and.w	r3, r3, #8
 80193c4:	2b00      	cmp	r3, #0
 80193c6:	d00a      	beq.n	80193de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80193c8:	687b      	ldr	r3, [r7, #4]
 80193ca:	681b      	ldr	r3, [r3, #0]
 80193cc:	685b      	ldr	r3, [r3, #4]
 80193ce:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80193d2:	687b      	ldr	r3, [r7, #4]
 80193d4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80193d6:	687b      	ldr	r3, [r7, #4]
 80193d8:	681b      	ldr	r3, [r3, #0]
 80193da:	430a      	orrs	r2, r1
 80193dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80193de:	687b      	ldr	r3, [r7, #4]
 80193e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80193e2:	f003 0301 	and.w	r3, r3, #1
 80193e6:	2b00      	cmp	r3, #0
 80193e8:	d00a      	beq.n	8019400 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80193ea:	687b      	ldr	r3, [r7, #4]
 80193ec:	681b      	ldr	r3, [r3, #0]
 80193ee:	685b      	ldr	r3, [r3, #4]
 80193f0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80193f4:	687b      	ldr	r3, [r7, #4]
 80193f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80193f8:	687b      	ldr	r3, [r7, #4]
 80193fa:	681b      	ldr	r3, [r3, #0]
 80193fc:	430a      	orrs	r2, r1
 80193fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8019400:	687b      	ldr	r3, [r7, #4]
 8019402:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019404:	f003 0302 	and.w	r3, r3, #2
 8019408:	2b00      	cmp	r3, #0
 801940a:	d00a      	beq.n	8019422 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801940c:	687b      	ldr	r3, [r7, #4]
 801940e:	681b      	ldr	r3, [r3, #0]
 8019410:	685b      	ldr	r3, [r3, #4]
 8019412:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8019416:	687b      	ldr	r3, [r7, #4]
 8019418:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801941a:	687b      	ldr	r3, [r7, #4]
 801941c:	681b      	ldr	r3, [r3, #0]
 801941e:	430a      	orrs	r2, r1
 8019420:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8019422:	687b      	ldr	r3, [r7, #4]
 8019424:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019426:	f003 0304 	and.w	r3, r3, #4
 801942a:	2b00      	cmp	r3, #0
 801942c:	d00a      	beq.n	8019444 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801942e:	687b      	ldr	r3, [r7, #4]
 8019430:	681b      	ldr	r3, [r3, #0]
 8019432:	685b      	ldr	r3, [r3, #4]
 8019434:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8019438:	687b      	ldr	r3, [r7, #4]
 801943a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801943c:	687b      	ldr	r3, [r7, #4]
 801943e:	681b      	ldr	r3, [r3, #0]
 8019440:	430a      	orrs	r2, r1
 8019442:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8019444:	687b      	ldr	r3, [r7, #4]
 8019446:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019448:	f003 0310 	and.w	r3, r3, #16
 801944c:	2b00      	cmp	r3, #0
 801944e:	d00a      	beq.n	8019466 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8019450:	687b      	ldr	r3, [r7, #4]
 8019452:	681b      	ldr	r3, [r3, #0]
 8019454:	689b      	ldr	r3, [r3, #8]
 8019456:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 801945a:	687b      	ldr	r3, [r7, #4]
 801945c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801945e:	687b      	ldr	r3, [r7, #4]
 8019460:	681b      	ldr	r3, [r3, #0]
 8019462:	430a      	orrs	r2, r1
 8019464:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8019466:	687b      	ldr	r3, [r7, #4]
 8019468:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801946a:	f003 0320 	and.w	r3, r3, #32
 801946e:	2b00      	cmp	r3, #0
 8019470:	d00a      	beq.n	8019488 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8019472:	687b      	ldr	r3, [r7, #4]
 8019474:	681b      	ldr	r3, [r3, #0]
 8019476:	689b      	ldr	r3, [r3, #8]
 8019478:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 801947c:	687b      	ldr	r3, [r7, #4]
 801947e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8019480:	687b      	ldr	r3, [r7, #4]
 8019482:	681b      	ldr	r3, [r3, #0]
 8019484:	430a      	orrs	r2, r1
 8019486:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8019488:	687b      	ldr	r3, [r7, #4]
 801948a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801948c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8019490:	2b00      	cmp	r3, #0
 8019492:	d01a      	beq.n	80194ca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8019494:	687b      	ldr	r3, [r7, #4]
 8019496:	681b      	ldr	r3, [r3, #0]
 8019498:	685b      	ldr	r3, [r3, #4]
 801949a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 801949e:	687b      	ldr	r3, [r7, #4]
 80194a0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80194a2:	687b      	ldr	r3, [r7, #4]
 80194a4:	681b      	ldr	r3, [r3, #0]
 80194a6:	430a      	orrs	r2, r1
 80194a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80194aa:	687b      	ldr	r3, [r7, #4]
 80194ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80194ae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80194b2:	d10a      	bne.n	80194ca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80194b4:	687b      	ldr	r3, [r7, #4]
 80194b6:	681b      	ldr	r3, [r3, #0]
 80194b8:	685b      	ldr	r3, [r3, #4]
 80194ba:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80194be:	687b      	ldr	r3, [r7, #4]
 80194c0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80194c2:	687b      	ldr	r3, [r7, #4]
 80194c4:	681b      	ldr	r3, [r3, #0]
 80194c6:	430a      	orrs	r2, r1
 80194c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80194ca:	687b      	ldr	r3, [r7, #4]
 80194cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80194ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80194d2:	2b00      	cmp	r3, #0
 80194d4:	d00a      	beq.n	80194ec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80194d6:	687b      	ldr	r3, [r7, #4]
 80194d8:	681b      	ldr	r3, [r3, #0]
 80194da:	685b      	ldr	r3, [r3, #4]
 80194dc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80194e0:	687b      	ldr	r3, [r7, #4]
 80194e2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80194e4:	687b      	ldr	r3, [r7, #4]
 80194e6:	681b      	ldr	r3, [r3, #0]
 80194e8:	430a      	orrs	r2, r1
 80194ea:	605a      	str	r2, [r3, #4]
  }
}
 80194ec:	bf00      	nop
 80194ee:	370c      	adds	r7, #12
 80194f0:	46bd      	mov	sp, r7
 80194f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80194f6:	4770      	bx	lr

080194f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80194f8:	b580      	push	{r7, lr}
 80194fa:	b098      	sub	sp, #96	@ 0x60
 80194fc:	af02      	add	r7, sp, #8
 80194fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8019500:	687b      	ldr	r3, [r7, #4]
 8019502:	2200      	movs	r2, #0
 8019504:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8019508:	f7ef fe94 	bl	8009234 <HAL_GetTick>
 801950c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801950e:	687b      	ldr	r3, [r7, #4]
 8019510:	681b      	ldr	r3, [r3, #0]
 8019512:	681b      	ldr	r3, [r3, #0]
 8019514:	f003 0308 	and.w	r3, r3, #8
 8019518:	2b08      	cmp	r3, #8
 801951a:	d12f      	bne.n	801957c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801951c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8019520:	9300      	str	r3, [sp, #0]
 8019522:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019524:	2200      	movs	r2, #0
 8019526:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 801952a:	6878      	ldr	r0, [r7, #4]
 801952c:	f000 f88e 	bl	801964c <UART_WaitOnFlagUntilTimeout>
 8019530:	4603      	mov	r3, r0
 8019532:	2b00      	cmp	r3, #0
 8019534:	d022      	beq.n	801957c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8019536:	687b      	ldr	r3, [r7, #4]
 8019538:	681b      	ldr	r3, [r3, #0]
 801953a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801953c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801953e:	e853 3f00 	ldrex	r3, [r3]
 8019542:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8019544:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019546:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801954a:	653b      	str	r3, [r7, #80]	@ 0x50
 801954c:	687b      	ldr	r3, [r7, #4]
 801954e:	681b      	ldr	r3, [r3, #0]
 8019550:	461a      	mov	r2, r3
 8019552:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019554:	647b      	str	r3, [r7, #68]	@ 0x44
 8019556:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019558:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801955a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801955c:	e841 2300 	strex	r3, r2, [r1]
 8019560:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8019562:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019564:	2b00      	cmp	r3, #0
 8019566:	d1e6      	bne.n	8019536 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8019568:	687b      	ldr	r3, [r7, #4]
 801956a:	2220      	movs	r2, #32
 801956c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8019570:	687b      	ldr	r3, [r7, #4]
 8019572:	2200      	movs	r2, #0
 8019574:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8019578:	2303      	movs	r3, #3
 801957a:	e063      	b.n	8019644 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801957c:	687b      	ldr	r3, [r7, #4]
 801957e:	681b      	ldr	r3, [r3, #0]
 8019580:	681b      	ldr	r3, [r3, #0]
 8019582:	f003 0304 	and.w	r3, r3, #4
 8019586:	2b04      	cmp	r3, #4
 8019588:	d149      	bne.n	801961e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801958a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 801958e:	9300      	str	r3, [sp, #0]
 8019590:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019592:	2200      	movs	r2, #0
 8019594:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8019598:	6878      	ldr	r0, [r7, #4]
 801959a:	f000 f857 	bl	801964c <UART_WaitOnFlagUntilTimeout>
 801959e:	4603      	mov	r3, r0
 80195a0:	2b00      	cmp	r3, #0
 80195a2:	d03c      	beq.n	801961e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80195a4:	687b      	ldr	r3, [r7, #4]
 80195a6:	681b      	ldr	r3, [r3, #0]
 80195a8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80195aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80195ac:	e853 3f00 	ldrex	r3, [r3]
 80195b0:	623b      	str	r3, [r7, #32]
   return(result);
 80195b2:	6a3b      	ldr	r3, [r7, #32]
 80195b4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80195b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80195ba:	687b      	ldr	r3, [r7, #4]
 80195bc:	681b      	ldr	r3, [r3, #0]
 80195be:	461a      	mov	r2, r3
 80195c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80195c2:	633b      	str	r3, [r7, #48]	@ 0x30
 80195c4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80195c6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80195c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80195ca:	e841 2300 	strex	r3, r2, [r1]
 80195ce:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80195d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80195d2:	2b00      	cmp	r3, #0
 80195d4:	d1e6      	bne.n	80195a4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80195d6:	687b      	ldr	r3, [r7, #4]
 80195d8:	681b      	ldr	r3, [r3, #0]
 80195da:	3308      	adds	r3, #8
 80195dc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80195de:	693b      	ldr	r3, [r7, #16]
 80195e0:	e853 3f00 	ldrex	r3, [r3]
 80195e4:	60fb      	str	r3, [r7, #12]
   return(result);
 80195e6:	68fb      	ldr	r3, [r7, #12]
 80195e8:	f023 0301 	bic.w	r3, r3, #1
 80195ec:	64bb      	str	r3, [r7, #72]	@ 0x48
 80195ee:	687b      	ldr	r3, [r7, #4]
 80195f0:	681b      	ldr	r3, [r3, #0]
 80195f2:	3308      	adds	r3, #8
 80195f4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80195f6:	61fa      	str	r2, [r7, #28]
 80195f8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80195fa:	69b9      	ldr	r1, [r7, #24]
 80195fc:	69fa      	ldr	r2, [r7, #28]
 80195fe:	e841 2300 	strex	r3, r2, [r1]
 8019602:	617b      	str	r3, [r7, #20]
   return(result);
 8019604:	697b      	ldr	r3, [r7, #20]
 8019606:	2b00      	cmp	r3, #0
 8019608:	d1e5      	bne.n	80195d6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 801960a:	687b      	ldr	r3, [r7, #4]
 801960c:	2220      	movs	r2, #32
 801960e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8019612:	687b      	ldr	r3, [r7, #4]
 8019614:	2200      	movs	r2, #0
 8019616:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801961a:	2303      	movs	r3, #3
 801961c:	e012      	b.n	8019644 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801961e:	687b      	ldr	r3, [r7, #4]
 8019620:	2220      	movs	r2, #32
 8019622:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8019626:	687b      	ldr	r3, [r7, #4]
 8019628:	2220      	movs	r2, #32
 801962a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801962e:	687b      	ldr	r3, [r7, #4]
 8019630:	2200      	movs	r2, #0
 8019632:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8019634:	687b      	ldr	r3, [r7, #4]
 8019636:	2200      	movs	r2, #0
 8019638:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 801963a:	687b      	ldr	r3, [r7, #4]
 801963c:	2200      	movs	r2, #0
 801963e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8019642:	2300      	movs	r3, #0
}
 8019644:	4618      	mov	r0, r3
 8019646:	3758      	adds	r7, #88	@ 0x58
 8019648:	46bd      	mov	sp, r7
 801964a:	bd80      	pop	{r7, pc}

0801964c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801964c:	b580      	push	{r7, lr}
 801964e:	b084      	sub	sp, #16
 8019650:	af00      	add	r7, sp, #0
 8019652:	60f8      	str	r0, [r7, #12]
 8019654:	60b9      	str	r1, [r7, #8]
 8019656:	603b      	str	r3, [r7, #0]
 8019658:	4613      	mov	r3, r2
 801965a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801965c:	e04f      	b.n	80196fe <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801965e:	69bb      	ldr	r3, [r7, #24]
 8019660:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019664:	d04b      	beq.n	80196fe <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8019666:	f7ef fde5 	bl	8009234 <HAL_GetTick>
 801966a:	4602      	mov	r2, r0
 801966c:	683b      	ldr	r3, [r7, #0]
 801966e:	1ad3      	subs	r3, r2, r3
 8019670:	69ba      	ldr	r2, [r7, #24]
 8019672:	429a      	cmp	r2, r3
 8019674:	d302      	bcc.n	801967c <UART_WaitOnFlagUntilTimeout+0x30>
 8019676:	69bb      	ldr	r3, [r7, #24]
 8019678:	2b00      	cmp	r3, #0
 801967a:	d101      	bne.n	8019680 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 801967c:	2303      	movs	r3, #3
 801967e:	e04e      	b.n	801971e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8019680:	68fb      	ldr	r3, [r7, #12]
 8019682:	681b      	ldr	r3, [r3, #0]
 8019684:	681b      	ldr	r3, [r3, #0]
 8019686:	f003 0304 	and.w	r3, r3, #4
 801968a:	2b00      	cmp	r3, #0
 801968c:	d037      	beq.n	80196fe <UART_WaitOnFlagUntilTimeout+0xb2>
 801968e:	68bb      	ldr	r3, [r7, #8]
 8019690:	2b80      	cmp	r3, #128	@ 0x80
 8019692:	d034      	beq.n	80196fe <UART_WaitOnFlagUntilTimeout+0xb2>
 8019694:	68bb      	ldr	r3, [r7, #8]
 8019696:	2b40      	cmp	r3, #64	@ 0x40
 8019698:	d031      	beq.n	80196fe <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 801969a:	68fb      	ldr	r3, [r7, #12]
 801969c:	681b      	ldr	r3, [r3, #0]
 801969e:	69db      	ldr	r3, [r3, #28]
 80196a0:	f003 0308 	and.w	r3, r3, #8
 80196a4:	2b08      	cmp	r3, #8
 80196a6:	d110      	bne.n	80196ca <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80196a8:	68fb      	ldr	r3, [r7, #12]
 80196aa:	681b      	ldr	r3, [r3, #0]
 80196ac:	2208      	movs	r2, #8
 80196ae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80196b0:	68f8      	ldr	r0, [r7, #12]
 80196b2:	f000 f95b 	bl	801996c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80196b6:	68fb      	ldr	r3, [r7, #12]
 80196b8:	2208      	movs	r2, #8
 80196ba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80196be:	68fb      	ldr	r3, [r7, #12]
 80196c0:	2200      	movs	r2, #0
 80196c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80196c6:	2301      	movs	r3, #1
 80196c8:	e029      	b.n	801971e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80196ca:	68fb      	ldr	r3, [r7, #12]
 80196cc:	681b      	ldr	r3, [r3, #0]
 80196ce:	69db      	ldr	r3, [r3, #28]
 80196d0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80196d4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80196d8:	d111      	bne.n	80196fe <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80196da:	68fb      	ldr	r3, [r7, #12]
 80196dc:	681b      	ldr	r3, [r3, #0]
 80196de:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80196e2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80196e4:	68f8      	ldr	r0, [r7, #12]
 80196e6:	f000 f941 	bl	801996c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80196ea:	68fb      	ldr	r3, [r7, #12]
 80196ec:	2220      	movs	r2, #32
 80196ee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80196f2:	68fb      	ldr	r3, [r7, #12]
 80196f4:	2200      	movs	r2, #0
 80196f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80196fa:	2303      	movs	r3, #3
 80196fc:	e00f      	b.n	801971e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80196fe:	68fb      	ldr	r3, [r7, #12]
 8019700:	681b      	ldr	r3, [r3, #0]
 8019702:	69da      	ldr	r2, [r3, #28]
 8019704:	68bb      	ldr	r3, [r7, #8]
 8019706:	4013      	ands	r3, r2
 8019708:	68ba      	ldr	r2, [r7, #8]
 801970a:	429a      	cmp	r2, r3
 801970c:	bf0c      	ite	eq
 801970e:	2301      	moveq	r3, #1
 8019710:	2300      	movne	r3, #0
 8019712:	b2db      	uxtb	r3, r3
 8019714:	461a      	mov	r2, r3
 8019716:	79fb      	ldrb	r3, [r7, #7]
 8019718:	429a      	cmp	r2, r3
 801971a:	d0a0      	beq.n	801965e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801971c:	2300      	movs	r3, #0
}
 801971e:	4618      	mov	r0, r3
 8019720:	3710      	adds	r7, #16
 8019722:	46bd      	mov	sp, r7
 8019724:	bd80      	pop	{r7, pc}
	...

08019728 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8019728:	b480      	push	{r7}
 801972a:	b0a3      	sub	sp, #140	@ 0x8c
 801972c:	af00      	add	r7, sp, #0
 801972e:	60f8      	str	r0, [r7, #12]
 8019730:	60b9      	str	r1, [r7, #8]
 8019732:	4613      	mov	r3, r2
 8019734:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8019736:	68fb      	ldr	r3, [r7, #12]
 8019738:	68ba      	ldr	r2, [r7, #8]
 801973a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 801973c:	68fb      	ldr	r3, [r7, #12]
 801973e:	88fa      	ldrh	r2, [r7, #6]
 8019740:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8019744:	68fb      	ldr	r3, [r7, #12]
 8019746:	88fa      	ldrh	r2, [r7, #6]
 8019748:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 801974c:	68fb      	ldr	r3, [r7, #12]
 801974e:	2200      	movs	r2, #0
 8019750:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8019752:	68fb      	ldr	r3, [r7, #12]
 8019754:	689b      	ldr	r3, [r3, #8]
 8019756:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801975a:	d10e      	bne.n	801977a <UART_Start_Receive_IT+0x52>
 801975c:	68fb      	ldr	r3, [r7, #12]
 801975e:	691b      	ldr	r3, [r3, #16]
 8019760:	2b00      	cmp	r3, #0
 8019762:	d105      	bne.n	8019770 <UART_Start_Receive_IT+0x48>
 8019764:	68fb      	ldr	r3, [r7, #12]
 8019766:	f240 12ff 	movw	r2, #511	@ 0x1ff
 801976a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 801976e:	e02d      	b.n	80197cc <UART_Start_Receive_IT+0xa4>
 8019770:	68fb      	ldr	r3, [r7, #12]
 8019772:	22ff      	movs	r2, #255	@ 0xff
 8019774:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8019778:	e028      	b.n	80197cc <UART_Start_Receive_IT+0xa4>
 801977a:	68fb      	ldr	r3, [r7, #12]
 801977c:	689b      	ldr	r3, [r3, #8]
 801977e:	2b00      	cmp	r3, #0
 8019780:	d10d      	bne.n	801979e <UART_Start_Receive_IT+0x76>
 8019782:	68fb      	ldr	r3, [r7, #12]
 8019784:	691b      	ldr	r3, [r3, #16]
 8019786:	2b00      	cmp	r3, #0
 8019788:	d104      	bne.n	8019794 <UART_Start_Receive_IT+0x6c>
 801978a:	68fb      	ldr	r3, [r7, #12]
 801978c:	22ff      	movs	r2, #255	@ 0xff
 801978e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8019792:	e01b      	b.n	80197cc <UART_Start_Receive_IT+0xa4>
 8019794:	68fb      	ldr	r3, [r7, #12]
 8019796:	227f      	movs	r2, #127	@ 0x7f
 8019798:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 801979c:	e016      	b.n	80197cc <UART_Start_Receive_IT+0xa4>
 801979e:	68fb      	ldr	r3, [r7, #12]
 80197a0:	689b      	ldr	r3, [r3, #8]
 80197a2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80197a6:	d10d      	bne.n	80197c4 <UART_Start_Receive_IT+0x9c>
 80197a8:	68fb      	ldr	r3, [r7, #12]
 80197aa:	691b      	ldr	r3, [r3, #16]
 80197ac:	2b00      	cmp	r3, #0
 80197ae:	d104      	bne.n	80197ba <UART_Start_Receive_IT+0x92>
 80197b0:	68fb      	ldr	r3, [r7, #12]
 80197b2:	227f      	movs	r2, #127	@ 0x7f
 80197b4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80197b8:	e008      	b.n	80197cc <UART_Start_Receive_IT+0xa4>
 80197ba:	68fb      	ldr	r3, [r7, #12]
 80197bc:	223f      	movs	r2, #63	@ 0x3f
 80197be:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80197c2:	e003      	b.n	80197cc <UART_Start_Receive_IT+0xa4>
 80197c4:	68fb      	ldr	r3, [r7, #12]
 80197c6:	2200      	movs	r2, #0
 80197c8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80197cc:	68fb      	ldr	r3, [r7, #12]
 80197ce:	2200      	movs	r2, #0
 80197d0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80197d4:	68fb      	ldr	r3, [r7, #12]
 80197d6:	2222      	movs	r2, #34	@ 0x22
 80197d8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80197dc:	68fb      	ldr	r3, [r7, #12]
 80197de:	681b      	ldr	r3, [r3, #0]
 80197e0:	3308      	adds	r3, #8
 80197e2:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80197e4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80197e6:	e853 3f00 	ldrex	r3, [r3]
 80197ea:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80197ec:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80197ee:	f043 0301 	orr.w	r3, r3, #1
 80197f2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80197f6:	68fb      	ldr	r3, [r7, #12]
 80197f8:	681b      	ldr	r3, [r3, #0]
 80197fa:	3308      	adds	r3, #8
 80197fc:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8019800:	673a      	str	r2, [r7, #112]	@ 0x70
 8019802:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019804:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8019806:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8019808:	e841 2300 	strex	r3, r2, [r1]
 801980c:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 801980e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8019810:	2b00      	cmp	r3, #0
 8019812:	d1e3      	bne.n	80197dc <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8019814:	68fb      	ldr	r3, [r7, #12]
 8019816:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8019818:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801981c:	d14f      	bne.n	80198be <UART_Start_Receive_IT+0x196>
 801981e:	68fb      	ldr	r3, [r7, #12]
 8019820:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8019824:	88fa      	ldrh	r2, [r7, #6]
 8019826:	429a      	cmp	r2, r3
 8019828:	d349      	bcc.n	80198be <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801982a:	68fb      	ldr	r3, [r7, #12]
 801982c:	689b      	ldr	r3, [r3, #8]
 801982e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8019832:	d107      	bne.n	8019844 <UART_Start_Receive_IT+0x11c>
 8019834:	68fb      	ldr	r3, [r7, #12]
 8019836:	691b      	ldr	r3, [r3, #16]
 8019838:	2b00      	cmp	r3, #0
 801983a:	d103      	bne.n	8019844 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 801983c:	68fb      	ldr	r3, [r7, #12]
 801983e:	4a47      	ldr	r2, [pc, #284]	@ (801995c <UART_Start_Receive_IT+0x234>)
 8019840:	675a      	str	r2, [r3, #116]	@ 0x74
 8019842:	e002      	b.n	801984a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8019844:	68fb      	ldr	r3, [r7, #12]
 8019846:	4a46      	ldr	r2, [pc, #280]	@ (8019960 <UART_Start_Receive_IT+0x238>)
 8019848:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 801984a:	68fb      	ldr	r3, [r7, #12]
 801984c:	691b      	ldr	r3, [r3, #16]
 801984e:	2b00      	cmp	r3, #0
 8019850:	d01a      	beq.n	8019888 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8019852:	68fb      	ldr	r3, [r7, #12]
 8019854:	681b      	ldr	r3, [r3, #0]
 8019856:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019858:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801985a:	e853 3f00 	ldrex	r3, [r3]
 801985e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8019860:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8019862:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8019866:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 801986a:	68fb      	ldr	r3, [r7, #12]
 801986c:	681b      	ldr	r3, [r3, #0]
 801986e:	461a      	mov	r2, r3
 8019870:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8019874:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8019876:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019878:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 801987a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801987c:	e841 2300 	strex	r3, r2, [r1]
 8019880:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8019882:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019884:	2b00      	cmp	r3, #0
 8019886:	d1e4      	bne.n	8019852 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8019888:	68fb      	ldr	r3, [r7, #12]
 801988a:	681b      	ldr	r3, [r3, #0]
 801988c:	3308      	adds	r3, #8
 801988e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019890:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019892:	e853 3f00 	ldrex	r3, [r3]
 8019896:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8019898:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801989a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 801989e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80198a0:	68fb      	ldr	r3, [r7, #12]
 80198a2:	681b      	ldr	r3, [r3, #0]
 80198a4:	3308      	adds	r3, #8
 80198a6:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80198a8:	64ba      	str	r2, [r7, #72]	@ 0x48
 80198aa:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80198ac:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80198ae:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80198b0:	e841 2300 	strex	r3, r2, [r1]
 80198b4:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80198b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80198b8:	2b00      	cmp	r3, #0
 80198ba:	d1e5      	bne.n	8019888 <UART_Start_Receive_IT+0x160>
 80198bc:	e046      	b.n	801994c <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80198be:	68fb      	ldr	r3, [r7, #12]
 80198c0:	689b      	ldr	r3, [r3, #8]
 80198c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80198c6:	d107      	bne.n	80198d8 <UART_Start_Receive_IT+0x1b0>
 80198c8:	68fb      	ldr	r3, [r7, #12]
 80198ca:	691b      	ldr	r3, [r3, #16]
 80198cc:	2b00      	cmp	r3, #0
 80198ce:	d103      	bne.n	80198d8 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80198d0:	68fb      	ldr	r3, [r7, #12]
 80198d2:	4a24      	ldr	r2, [pc, #144]	@ (8019964 <UART_Start_Receive_IT+0x23c>)
 80198d4:	675a      	str	r2, [r3, #116]	@ 0x74
 80198d6:	e002      	b.n	80198de <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80198d8:	68fb      	ldr	r3, [r7, #12]
 80198da:	4a23      	ldr	r2, [pc, #140]	@ (8019968 <UART_Start_Receive_IT+0x240>)
 80198dc:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80198de:	68fb      	ldr	r3, [r7, #12]
 80198e0:	691b      	ldr	r3, [r3, #16]
 80198e2:	2b00      	cmp	r3, #0
 80198e4:	d019      	beq.n	801991a <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80198e6:	68fb      	ldr	r3, [r7, #12]
 80198e8:	681b      	ldr	r3, [r3, #0]
 80198ea:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80198ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80198ee:	e853 3f00 	ldrex	r3, [r3]
 80198f2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80198f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80198f6:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 80198fa:	677b      	str	r3, [r7, #116]	@ 0x74
 80198fc:	68fb      	ldr	r3, [r7, #12]
 80198fe:	681b      	ldr	r3, [r3, #0]
 8019900:	461a      	mov	r2, r3
 8019902:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8019904:	637b      	str	r3, [r7, #52]	@ 0x34
 8019906:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019908:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801990a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801990c:	e841 2300 	strex	r3, r2, [r1]
 8019910:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8019912:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019914:	2b00      	cmp	r3, #0
 8019916:	d1e6      	bne.n	80198e6 <UART_Start_Receive_IT+0x1be>
 8019918:	e018      	b.n	801994c <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 801991a:	68fb      	ldr	r3, [r7, #12]
 801991c:	681b      	ldr	r3, [r3, #0]
 801991e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019920:	697b      	ldr	r3, [r7, #20]
 8019922:	e853 3f00 	ldrex	r3, [r3]
 8019926:	613b      	str	r3, [r7, #16]
   return(result);
 8019928:	693b      	ldr	r3, [r7, #16]
 801992a:	f043 0320 	orr.w	r3, r3, #32
 801992e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8019930:	68fb      	ldr	r3, [r7, #12]
 8019932:	681b      	ldr	r3, [r3, #0]
 8019934:	461a      	mov	r2, r3
 8019936:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8019938:	623b      	str	r3, [r7, #32]
 801993a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801993c:	69f9      	ldr	r1, [r7, #28]
 801993e:	6a3a      	ldr	r2, [r7, #32]
 8019940:	e841 2300 	strex	r3, r2, [r1]
 8019944:	61bb      	str	r3, [r7, #24]
   return(result);
 8019946:	69bb      	ldr	r3, [r7, #24]
 8019948:	2b00      	cmp	r3, #0
 801994a:	d1e6      	bne.n	801991a <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 801994c:	2300      	movs	r3, #0
}
 801994e:	4618      	mov	r0, r3
 8019950:	378c      	adds	r7, #140	@ 0x8c
 8019952:	46bd      	mov	sp, r7
 8019954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019958:	4770      	bx	lr
 801995a:	bf00      	nop
 801995c:	0801a4cd 	.word	0x0801a4cd
 8019960:	0801a169 	.word	0x0801a169
 8019964:	08019fb1 	.word	0x08019fb1
 8019968:	08019df9 	.word	0x08019df9

0801996c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801996c:	b480      	push	{r7}
 801996e:	b095      	sub	sp, #84	@ 0x54
 8019970:	af00      	add	r7, sp, #0
 8019972:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8019974:	687b      	ldr	r3, [r7, #4]
 8019976:	681b      	ldr	r3, [r3, #0]
 8019978:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801997a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801997c:	e853 3f00 	ldrex	r3, [r3]
 8019980:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8019982:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019984:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8019988:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801998a:	687b      	ldr	r3, [r7, #4]
 801998c:	681b      	ldr	r3, [r3, #0]
 801998e:	461a      	mov	r2, r3
 8019990:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8019992:	643b      	str	r3, [r7, #64]	@ 0x40
 8019994:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019996:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8019998:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801999a:	e841 2300 	strex	r3, r2, [r1]
 801999e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80199a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80199a2:	2b00      	cmp	r3, #0
 80199a4:	d1e6      	bne.n	8019974 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80199a6:	687b      	ldr	r3, [r7, #4]
 80199a8:	681b      	ldr	r3, [r3, #0]
 80199aa:	3308      	adds	r3, #8
 80199ac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80199ae:	6a3b      	ldr	r3, [r7, #32]
 80199b0:	e853 3f00 	ldrex	r3, [r3]
 80199b4:	61fb      	str	r3, [r7, #28]
   return(result);
 80199b6:	69fa      	ldr	r2, [r7, #28]
 80199b8:	4b1e      	ldr	r3, [pc, #120]	@ (8019a34 <UART_EndRxTransfer+0xc8>)
 80199ba:	4013      	ands	r3, r2
 80199bc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80199be:	687b      	ldr	r3, [r7, #4]
 80199c0:	681b      	ldr	r3, [r3, #0]
 80199c2:	3308      	adds	r3, #8
 80199c4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80199c6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80199c8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80199ca:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80199cc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80199ce:	e841 2300 	strex	r3, r2, [r1]
 80199d2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80199d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80199d6:	2b00      	cmp	r3, #0
 80199d8:	d1e5      	bne.n	80199a6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80199da:	687b      	ldr	r3, [r7, #4]
 80199dc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80199de:	2b01      	cmp	r3, #1
 80199e0:	d118      	bne.n	8019a14 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80199e2:	687b      	ldr	r3, [r7, #4]
 80199e4:	681b      	ldr	r3, [r3, #0]
 80199e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80199e8:	68fb      	ldr	r3, [r7, #12]
 80199ea:	e853 3f00 	ldrex	r3, [r3]
 80199ee:	60bb      	str	r3, [r7, #8]
   return(result);
 80199f0:	68bb      	ldr	r3, [r7, #8]
 80199f2:	f023 0310 	bic.w	r3, r3, #16
 80199f6:	647b      	str	r3, [r7, #68]	@ 0x44
 80199f8:	687b      	ldr	r3, [r7, #4]
 80199fa:	681b      	ldr	r3, [r3, #0]
 80199fc:	461a      	mov	r2, r3
 80199fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8019a00:	61bb      	str	r3, [r7, #24]
 8019a02:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019a04:	6979      	ldr	r1, [r7, #20]
 8019a06:	69ba      	ldr	r2, [r7, #24]
 8019a08:	e841 2300 	strex	r3, r2, [r1]
 8019a0c:	613b      	str	r3, [r7, #16]
   return(result);
 8019a0e:	693b      	ldr	r3, [r7, #16]
 8019a10:	2b00      	cmp	r3, #0
 8019a12:	d1e6      	bne.n	80199e2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8019a14:	687b      	ldr	r3, [r7, #4]
 8019a16:	2220      	movs	r2, #32
 8019a18:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8019a1c:	687b      	ldr	r3, [r7, #4]
 8019a1e:	2200      	movs	r2, #0
 8019a20:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8019a22:	687b      	ldr	r3, [r7, #4]
 8019a24:	2200      	movs	r2, #0
 8019a26:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8019a28:	bf00      	nop
 8019a2a:	3754      	adds	r7, #84	@ 0x54
 8019a2c:	46bd      	mov	sp, r7
 8019a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a32:	4770      	bx	lr
 8019a34:	effffffe 	.word	0xeffffffe

08019a38 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8019a38:	b580      	push	{r7, lr}
 8019a3a:	b084      	sub	sp, #16
 8019a3c:	af00      	add	r7, sp, #0
 8019a3e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8019a40:	687b      	ldr	r3, [r7, #4]
 8019a42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8019a44:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8019a46:	68fb      	ldr	r3, [r7, #12]
 8019a48:	2200      	movs	r2, #0
 8019a4a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8019a4e:	68f8      	ldr	r0, [r7, #12]
 8019a50:	f7fe fe2e 	bl	80186b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8019a54:	bf00      	nop
 8019a56:	3710      	adds	r7, #16
 8019a58:	46bd      	mov	sp, r7
 8019a5a:	bd80      	pop	{r7, pc}

08019a5c <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8019a5c:	b480      	push	{r7}
 8019a5e:	b08f      	sub	sp, #60	@ 0x3c
 8019a60:	af00      	add	r7, sp, #0
 8019a62:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8019a64:	687b      	ldr	r3, [r7, #4]
 8019a66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8019a6a:	2b21      	cmp	r3, #33	@ 0x21
 8019a6c:	d14c      	bne.n	8019b08 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8019a6e:	687b      	ldr	r3, [r7, #4]
 8019a70:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8019a74:	b29b      	uxth	r3, r3
 8019a76:	2b00      	cmp	r3, #0
 8019a78:	d132      	bne.n	8019ae0 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8019a7a:	687b      	ldr	r3, [r7, #4]
 8019a7c:	681b      	ldr	r3, [r3, #0]
 8019a7e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019a80:	6a3b      	ldr	r3, [r7, #32]
 8019a82:	e853 3f00 	ldrex	r3, [r3]
 8019a86:	61fb      	str	r3, [r7, #28]
   return(result);
 8019a88:	69fb      	ldr	r3, [r7, #28]
 8019a8a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8019a8e:	637b      	str	r3, [r7, #52]	@ 0x34
 8019a90:	687b      	ldr	r3, [r7, #4]
 8019a92:	681b      	ldr	r3, [r3, #0]
 8019a94:	461a      	mov	r2, r3
 8019a96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019a98:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8019a9a:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019a9c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8019a9e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8019aa0:	e841 2300 	strex	r3, r2, [r1]
 8019aa4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8019aa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019aa8:	2b00      	cmp	r3, #0
 8019aaa:	d1e6      	bne.n	8019a7a <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8019aac:	687b      	ldr	r3, [r7, #4]
 8019aae:	681b      	ldr	r3, [r3, #0]
 8019ab0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019ab2:	68fb      	ldr	r3, [r7, #12]
 8019ab4:	e853 3f00 	ldrex	r3, [r3]
 8019ab8:	60bb      	str	r3, [r7, #8]
   return(result);
 8019aba:	68bb      	ldr	r3, [r7, #8]
 8019abc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8019ac0:	633b      	str	r3, [r7, #48]	@ 0x30
 8019ac2:	687b      	ldr	r3, [r7, #4]
 8019ac4:	681b      	ldr	r3, [r3, #0]
 8019ac6:	461a      	mov	r2, r3
 8019ac8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019aca:	61bb      	str	r3, [r7, #24]
 8019acc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019ace:	6979      	ldr	r1, [r7, #20]
 8019ad0:	69ba      	ldr	r2, [r7, #24]
 8019ad2:	e841 2300 	strex	r3, r2, [r1]
 8019ad6:	613b      	str	r3, [r7, #16]
   return(result);
 8019ad8:	693b      	ldr	r3, [r7, #16]
 8019ada:	2b00      	cmp	r3, #0
 8019adc:	d1e6      	bne.n	8019aac <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8019ade:	e013      	b.n	8019b08 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8019ae0:	687b      	ldr	r3, [r7, #4]
 8019ae2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8019ae4:	781a      	ldrb	r2, [r3, #0]
 8019ae6:	687b      	ldr	r3, [r7, #4]
 8019ae8:	681b      	ldr	r3, [r3, #0]
 8019aea:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 8019aec:	687b      	ldr	r3, [r7, #4]
 8019aee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8019af0:	1c5a      	adds	r2, r3, #1
 8019af2:	687b      	ldr	r3, [r7, #4]
 8019af4:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 8019af6:	687b      	ldr	r3, [r7, #4]
 8019af8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8019afc:	b29b      	uxth	r3, r3
 8019afe:	3b01      	subs	r3, #1
 8019b00:	b29a      	uxth	r2, r3
 8019b02:	687b      	ldr	r3, [r7, #4]
 8019b04:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 8019b08:	bf00      	nop
 8019b0a:	373c      	adds	r7, #60	@ 0x3c
 8019b0c:	46bd      	mov	sp, r7
 8019b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b12:	4770      	bx	lr

08019b14 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8019b14:	b480      	push	{r7}
 8019b16:	b091      	sub	sp, #68	@ 0x44
 8019b18:	af00      	add	r7, sp, #0
 8019b1a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8019b1c:	687b      	ldr	r3, [r7, #4]
 8019b1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8019b22:	2b21      	cmp	r3, #33	@ 0x21
 8019b24:	d151      	bne.n	8019bca <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8019b26:	687b      	ldr	r3, [r7, #4]
 8019b28:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8019b2c:	b29b      	uxth	r3, r3
 8019b2e:	2b00      	cmp	r3, #0
 8019b30:	d132      	bne.n	8019b98 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8019b32:	687b      	ldr	r3, [r7, #4]
 8019b34:	681b      	ldr	r3, [r3, #0]
 8019b36:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019b38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019b3a:	e853 3f00 	ldrex	r3, [r3]
 8019b3e:	623b      	str	r3, [r7, #32]
   return(result);
 8019b40:	6a3b      	ldr	r3, [r7, #32]
 8019b42:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8019b46:	63bb      	str	r3, [r7, #56]	@ 0x38
 8019b48:	687b      	ldr	r3, [r7, #4]
 8019b4a:	681b      	ldr	r3, [r3, #0]
 8019b4c:	461a      	mov	r2, r3
 8019b4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019b50:	633b      	str	r3, [r7, #48]	@ 0x30
 8019b52:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019b54:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8019b56:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8019b58:	e841 2300 	strex	r3, r2, [r1]
 8019b5c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8019b5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019b60:	2b00      	cmp	r3, #0
 8019b62:	d1e6      	bne.n	8019b32 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8019b64:	687b      	ldr	r3, [r7, #4]
 8019b66:	681b      	ldr	r3, [r3, #0]
 8019b68:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019b6a:	693b      	ldr	r3, [r7, #16]
 8019b6c:	e853 3f00 	ldrex	r3, [r3]
 8019b70:	60fb      	str	r3, [r7, #12]
   return(result);
 8019b72:	68fb      	ldr	r3, [r7, #12]
 8019b74:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8019b78:	637b      	str	r3, [r7, #52]	@ 0x34
 8019b7a:	687b      	ldr	r3, [r7, #4]
 8019b7c:	681b      	ldr	r3, [r3, #0]
 8019b7e:	461a      	mov	r2, r3
 8019b80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019b82:	61fb      	str	r3, [r7, #28]
 8019b84:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019b86:	69b9      	ldr	r1, [r7, #24]
 8019b88:	69fa      	ldr	r2, [r7, #28]
 8019b8a:	e841 2300 	strex	r3, r2, [r1]
 8019b8e:	617b      	str	r3, [r7, #20]
   return(result);
 8019b90:	697b      	ldr	r3, [r7, #20]
 8019b92:	2b00      	cmp	r3, #0
 8019b94:	d1e6      	bne.n	8019b64 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8019b96:	e018      	b.n	8019bca <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8019b98:	687b      	ldr	r3, [r7, #4]
 8019b9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8019b9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8019b9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019ba0:	881b      	ldrh	r3, [r3, #0]
 8019ba2:	461a      	mov	r2, r3
 8019ba4:	687b      	ldr	r3, [r7, #4]
 8019ba6:	681b      	ldr	r3, [r3, #0]
 8019ba8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8019bac:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 8019bae:	687b      	ldr	r3, [r7, #4]
 8019bb0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8019bb2:	1c9a      	adds	r2, r3, #2
 8019bb4:	687b      	ldr	r3, [r7, #4]
 8019bb6:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 8019bb8:	687b      	ldr	r3, [r7, #4]
 8019bba:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8019bbe:	b29b      	uxth	r3, r3
 8019bc0:	3b01      	subs	r3, #1
 8019bc2:	b29a      	uxth	r2, r3
 8019bc4:	687b      	ldr	r3, [r7, #4]
 8019bc6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 8019bca:	bf00      	nop
 8019bcc:	3744      	adds	r7, #68	@ 0x44
 8019bce:	46bd      	mov	sp, r7
 8019bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019bd4:	4770      	bx	lr

08019bd6 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8019bd6:	b480      	push	{r7}
 8019bd8:	b091      	sub	sp, #68	@ 0x44
 8019bda:	af00      	add	r7, sp, #0
 8019bdc:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8019bde:	687b      	ldr	r3, [r7, #4]
 8019be0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8019be4:	2b21      	cmp	r3, #33	@ 0x21
 8019be6:	d160      	bne.n	8019caa <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8019be8:	687b      	ldr	r3, [r7, #4]
 8019bea:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8019bee:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8019bf0:	e057      	b.n	8019ca2 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 8019bf2:	687b      	ldr	r3, [r7, #4]
 8019bf4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8019bf8:	b29b      	uxth	r3, r3
 8019bfa:	2b00      	cmp	r3, #0
 8019bfc:	d133      	bne.n	8019c66 <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8019bfe:	687b      	ldr	r3, [r7, #4]
 8019c00:	681b      	ldr	r3, [r3, #0]
 8019c02:	3308      	adds	r3, #8
 8019c04:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019c08:	e853 3f00 	ldrex	r3, [r3]
 8019c0c:	623b      	str	r3, [r7, #32]
   return(result);
 8019c0e:	6a3b      	ldr	r3, [r7, #32]
 8019c10:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8019c14:	63bb      	str	r3, [r7, #56]	@ 0x38
 8019c16:	687b      	ldr	r3, [r7, #4]
 8019c18:	681b      	ldr	r3, [r3, #0]
 8019c1a:	3308      	adds	r3, #8
 8019c1c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8019c1e:	633a      	str	r2, [r7, #48]	@ 0x30
 8019c20:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019c22:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8019c24:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8019c26:	e841 2300 	strex	r3, r2, [r1]
 8019c2a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8019c2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019c2e:	2b00      	cmp	r3, #0
 8019c30:	d1e5      	bne.n	8019bfe <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8019c32:	687b      	ldr	r3, [r7, #4]
 8019c34:	681b      	ldr	r3, [r3, #0]
 8019c36:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019c38:	693b      	ldr	r3, [r7, #16]
 8019c3a:	e853 3f00 	ldrex	r3, [r3]
 8019c3e:	60fb      	str	r3, [r7, #12]
   return(result);
 8019c40:	68fb      	ldr	r3, [r7, #12]
 8019c42:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8019c46:	637b      	str	r3, [r7, #52]	@ 0x34
 8019c48:	687b      	ldr	r3, [r7, #4]
 8019c4a:	681b      	ldr	r3, [r3, #0]
 8019c4c:	461a      	mov	r2, r3
 8019c4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019c50:	61fb      	str	r3, [r7, #28]
 8019c52:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019c54:	69b9      	ldr	r1, [r7, #24]
 8019c56:	69fa      	ldr	r2, [r7, #28]
 8019c58:	e841 2300 	strex	r3, r2, [r1]
 8019c5c:	617b      	str	r3, [r7, #20]
   return(result);
 8019c5e:	697b      	ldr	r3, [r7, #20]
 8019c60:	2b00      	cmp	r3, #0
 8019c62:	d1e6      	bne.n	8019c32 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8019c64:	e021      	b.n	8019caa <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8019c66:	687b      	ldr	r3, [r7, #4]
 8019c68:	681b      	ldr	r3, [r3, #0]
 8019c6a:	69db      	ldr	r3, [r3, #28]
 8019c6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8019c70:	2b00      	cmp	r3, #0
 8019c72:	d013      	beq.n	8019c9c <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8019c74:	687b      	ldr	r3, [r7, #4]
 8019c76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8019c78:	781a      	ldrb	r2, [r3, #0]
 8019c7a:	687b      	ldr	r3, [r7, #4]
 8019c7c:	681b      	ldr	r3, [r3, #0]
 8019c7e:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 8019c80:	687b      	ldr	r3, [r7, #4]
 8019c82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8019c84:	1c5a      	adds	r2, r3, #1
 8019c86:	687b      	ldr	r3, [r7, #4]
 8019c88:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 8019c8a:	687b      	ldr	r3, [r7, #4]
 8019c8c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8019c90:	b29b      	uxth	r3, r3
 8019c92:	3b01      	subs	r3, #1
 8019c94:	b29a      	uxth	r2, r3
 8019c96:	687b      	ldr	r3, [r7, #4]
 8019c98:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8019c9c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8019c9e:	3b01      	subs	r3, #1
 8019ca0:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8019ca2:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8019ca4:	2b00      	cmp	r3, #0
 8019ca6:	d1a4      	bne.n	8019bf2 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8019ca8:	e7ff      	b.n	8019caa <UART_TxISR_8BIT_FIFOEN+0xd4>
 8019caa:	bf00      	nop
 8019cac:	3744      	adds	r7, #68	@ 0x44
 8019cae:	46bd      	mov	sp, r7
 8019cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019cb4:	4770      	bx	lr

08019cb6 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8019cb6:	b480      	push	{r7}
 8019cb8:	b091      	sub	sp, #68	@ 0x44
 8019cba:	af00      	add	r7, sp, #0
 8019cbc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8019cbe:	687b      	ldr	r3, [r7, #4]
 8019cc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8019cc4:	2b21      	cmp	r3, #33	@ 0x21
 8019cc6:	d165      	bne.n	8019d94 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8019cc8:	687b      	ldr	r3, [r7, #4]
 8019cca:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8019cce:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8019cd0:	e05c      	b.n	8019d8c <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 8019cd2:	687b      	ldr	r3, [r7, #4]
 8019cd4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8019cd8:	b29b      	uxth	r3, r3
 8019cda:	2b00      	cmp	r3, #0
 8019cdc:	d133      	bne.n	8019d46 <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8019cde:	687b      	ldr	r3, [r7, #4]
 8019ce0:	681b      	ldr	r3, [r3, #0]
 8019ce2:	3308      	adds	r3, #8
 8019ce4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019ce6:	6a3b      	ldr	r3, [r7, #32]
 8019ce8:	e853 3f00 	ldrex	r3, [r3]
 8019cec:	61fb      	str	r3, [r7, #28]
   return(result);
 8019cee:	69fb      	ldr	r3, [r7, #28]
 8019cf0:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8019cf4:	637b      	str	r3, [r7, #52]	@ 0x34
 8019cf6:	687b      	ldr	r3, [r7, #4]
 8019cf8:	681b      	ldr	r3, [r3, #0]
 8019cfa:	3308      	adds	r3, #8
 8019cfc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8019cfe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8019d00:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019d02:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8019d04:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8019d06:	e841 2300 	strex	r3, r2, [r1]
 8019d0a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8019d0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019d0e:	2b00      	cmp	r3, #0
 8019d10:	d1e5      	bne.n	8019cde <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8019d12:	687b      	ldr	r3, [r7, #4]
 8019d14:	681b      	ldr	r3, [r3, #0]
 8019d16:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019d18:	68fb      	ldr	r3, [r7, #12]
 8019d1a:	e853 3f00 	ldrex	r3, [r3]
 8019d1e:	60bb      	str	r3, [r7, #8]
   return(result);
 8019d20:	68bb      	ldr	r3, [r7, #8]
 8019d22:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8019d26:	633b      	str	r3, [r7, #48]	@ 0x30
 8019d28:	687b      	ldr	r3, [r7, #4]
 8019d2a:	681b      	ldr	r3, [r3, #0]
 8019d2c:	461a      	mov	r2, r3
 8019d2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019d30:	61bb      	str	r3, [r7, #24]
 8019d32:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019d34:	6979      	ldr	r1, [r7, #20]
 8019d36:	69ba      	ldr	r2, [r7, #24]
 8019d38:	e841 2300 	strex	r3, r2, [r1]
 8019d3c:	613b      	str	r3, [r7, #16]
   return(result);
 8019d3e:	693b      	ldr	r3, [r7, #16]
 8019d40:	2b00      	cmp	r3, #0
 8019d42:	d1e6      	bne.n	8019d12 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8019d44:	e026      	b.n	8019d94 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8019d46:	687b      	ldr	r3, [r7, #4]
 8019d48:	681b      	ldr	r3, [r3, #0]
 8019d4a:	69db      	ldr	r3, [r3, #28]
 8019d4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8019d50:	2b00      	cmp	r3, #0
 8019d52:	d018      	beq.n	8019d86 <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8019d54:	687b      	ldr	r3, [r7, #4]
 8019d56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8019d58:	63bb      	str	r3, [r7, #56]	@ 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8019d5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019d5c:	881b      	ldrh	r3, [r3, #0]
 8019d5e:	461a      	mov	r2, r3
 8019d60:	687b      	ldr	r3, [r7, #4]
 8019d62:	681b      	ldr	r3, [r3, #0]
 8019d64:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8019d68:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 8019d6a:	687b      	ldr	r3, [r7, #4]
 8019d6c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8019d6e:	1c9a      	adds	r2, r3, #2
 8019d70:	687b      	ldr	r3, [r7, #4]
 8019d72:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 8019d74:	687b      	ldr	r3, [r7, #4]
 8019d76:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8019d7a:	b29b      	uxth	r3, r3
 8019d7c:	3b01      	subs	r3, #1
 8019d7e:	b29a      	uxth	r2, r3
 8019d80:	687b      	ldr	r3, [r7, #4]
 8019d82:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8019d86:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8019d88:	3b01      	subs	r3, #1
 8019d8a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8019d8c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8019d8e:	2b00      	cmp	r3, #0
 8019d90:	d19f      	bne.n	8019cd2 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8019d92:	e7ff      	b.n	8019d94 <UART_TxISR_16BIT_FIFOEN+0xde>
 8019d94:	bf00      	nop
 8019d96:	3744      	adds	r7, #68	@ 0x44
 8019d98:	46bd      	mov	sp, r7
 8019d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d9e:	4770      	bx	lr

08019da0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8019da0:	b580      	push	{r7, lr}
 8019da2:	b088      	sub	sp, #32
 8019da4:	af00      	add	r7, sp, #0
 8019da6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8019da8:	687b      	ldr	r3, [r7, #4]
 8019daa:	681b      	ldr	r3, [r3, #0]
 8019dac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019dae:	68fb      	ldr	r3, [r7, #12]
 8019db0:	e853 3f00 	ldrex	r3, [r3]
 8019db4:	60bb      	str	r3, [r7, #8]
   return(result);
 8019db6:	68bb      	ldr	r3, [r7, #8]
 8019db8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8019dbc:	61fb      	str	r3, [r7, #28]
 8019dbe:	687b      	ldr	r3, [r7, #4]
 8019dc0:	681b      	ldr	r3, [r3, #0]
 8019dc2:	461a      	mov	r2, r3
 8019dc4:	69fb      	ldr	r3, [r7, #28]
 8019dc6:	61bb      	str	r3, [r7, #24]
 8019dc8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019dca:	6979      	ldr	r1, [r7, #20]
 8019dcc:	69ba      	ldr	r2, [r7, #24]
 8019dce:	e841 2300 	strex	r3, r2, [r1]
 8019dd2:	613b      	str	r3, [r7, #16]
   return(result);
 8019dd4:	693b      	ldr	r3, [r7, #16]
 8019dd6:	2b00      	cmp	r3, #0
 8019dd8:	d1e6      	bne.n	8019da8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8019dda:	687b      	ldr	r3, [r7, #4]
 8019ddc:	2220      	movs	r2, #32
 8019dde:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8019de2:	687b      	ldr	r3, [r7, #4]
 8019de4:	2200      	movs	r2, #0
 8019de6:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8019de8:	6878      	ldr	r0, [r7, #4]
 8019dea:	f7fe fc57 	bl	801869c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8019dee:	bf00      	nop
 8019df0:	3720      	adds	r7, #32
 8019df2:	46bd      	mov	sp, r7
 8019df4:	bd80      	pop	{r7, pc}
	...

08019df8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8019df8:	b580      	push	{r7, lr}
 8019dfa:	b09c      	sub	sp, #112	@ 0x70
 8019dfc:	af00      	add	r7, sp, #0
 8019dfe:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8019e00:	687b      	ldr	r3, [r7, #4]
 8019e02:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8019e06:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8019e0a:	687b      	ldr	r3, [r7, #4]
 8019e0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8019e10:	2b22      	cmp	r3, #34	@ 0x22
 8019e12:	f040 80be 	bne.w	8019f92 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8019e16:	687b      	ldr	r3, [r7, #4]
 8019e18:	681b      	ldr	r3, [r3, #0]
 8019e1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019e1c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8019e20:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8019e24:	b2d9      	uxtb	r1, r3
 8019e26:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8019e2a:	b2da      	uxtb	r2, r3
 8019e2c:	687b      	ldr	r3, [r7, #4]
 8019e2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8019e30:	400a      	ands	r2, r1
 8019e32:	b2d2      	uxtb	r2, r2
 8019e34:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8019e36:	687b      	ldr	r3, [r7, #4]
 8019e38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8019e3a:	1c5a      	adds	r2, r3, #1
 8019e3c:	687b      	ldr	r3, [r7, #4]
 8019e3e:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8019e40:	687b      	ldr	r3, [r7, #4]
 8019e42:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8019e46:	b29b      	uxth	r3, r3
 8019e48:	3b01      	subs	r3, #1
 8019e4a:	b29a      	uxth	r2, r3
 8019e4c:	687b      	ldr	r3, [r7, #4]
 8019e4e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8019e52:	687b      	ldr	r3, [r7, #4]
 8019e54:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8019e58:	b29b      	uxth	r3, r3
 8019e5a:	2b00      	cmp	r3, #0
 8019e5c:	f040 80a1 	bne.w	8019fa2 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8019e60:	687b      	ldr	r3, [r7, #4]
 8019e62:	681b      	ldr	r3, [r3, #0]
 8019e64:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019e66:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8019e68:	e853 3f00 	ldrex	r3, [r3]
 8019e6c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8019e6e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8019e70:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8019e74:	66bb      	str	r3, [r7, #104]	@ 0x68
 8019e76:	687b      	ldr	r3, [r7, #4]
 8019e78:	681b      	ldr	r3, [r3, #0]
 8019e7a:	461a      	mov	r2, r3
 8019e7c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8019e7e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8019e80:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019e82:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8019e84:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8019e86:	e841 2300 	strex	r3, r2, [r1]
 8019e8a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8019e8c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019e8e:	2b00      	cmp	r3, #0
 8019e90:	d1e6      	bne.n	8019e60 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8019e92:	687b      	ldr	r3, [r7, #4]
 8019e94:	681b      	ldr	r3, [r3, #0]
 8019e96:	3308      	adds	r3, #8
 8019e98:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019e9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019e9c:	e853 3f00 	ldrex	r3, [r3]
 8019ea0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8019ea2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019ea4:	f023 0301 	bic.w	r3, r3, #1
 8019ea8:	667b      	str	r3, [r7, #100]	@ 0x64
 8019eaa:	687b      	ldr	r3, [r7, #4]
 8019eac:	681b      	ldr	r3, [r3, #0]
 8019eae:	3308      	adds	r3, #8
 8019eb0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8019eb2:	647a      	str	r2, [r7, #68]	@ 0x44
 8019eb4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019eb6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8019eb8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8019eba:	e841 2300 	strex	r3, r2, [r1]
 8019ebe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8019ec0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019ec2:	2b00      	cmp	r3, #0
 8019ec4:	d1e5      	bne.n	8019e92 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8019ec6:	687b      	ldr	r3, [r7, #4]
 8019ec8:	2220      	movs	r2, #32
 8019eca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8019ece:	687b      	ldr	r3, [r7, #4]
 8019ed0:	2200      	movs	r2, #0
 8019ed2:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8019ed4:	687b      	ldr	r3, [r7, #4]
 8019ed6:	2200      	movs	r2, #0
 8019ed8:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8019eda:	687b      	ldr	r3, [r7, #4]
 8019edc:	681b      	ldr	r3, [r3, #0]
 8019ede:	4a33      	ldr	r2, [pc, #204]	@ (8019fac <UART_RxISR_8BIT+0x1b4>)
 8019ee0:	4293      	cmp	r3, r2
 8019ee2:	d01f      	beq.n	8019f24 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8019ee4:	687b      	ldr	r3, [r7, #4]
 8019ee6:	681b      	ldr	r3, [r3, #0]
 8019ee8:	685b      	ldr	r3, [r3, #4]
 8019eea:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8019eee:	2b00      	cmp	r3, #0
 8019ef0:	d018      	beq.n	8019f24 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8019ef2:	687b      	ldr	r3, [r7, #4]
 8019ef4:	681b      	ldr	r3, [r3, #0]
 8019ef6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019ef8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019efa:	e853 3f00 	ldrex	r3, [r3]
 8019efe:	623b      	str	r3, [r7, #32]
   return(result);
 8019f00:	6a3b      	ldr	r3, [r7, #32]
 8019f02:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8019f06:	663b      	str	r3, [r7, #96]	@ 0x60
 8019f08:	687b      	ldr	r3, [r7, #4]
 8019f0a:	681b      	ldr	r3, [r3, #0]
 8019f0c:	461a      	mov	r2, r3
 8019f0e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8019f10:	633b      	str	r3, [r7, #48]	@ 0x30
 8019f12:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019f14:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8019f16:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8019f18:	e841 2300 	strex	r3, r2, [r1]
 8019f1c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8019f1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019f20:	2b00      	cmp	r3, #0
 8019f22:	d1e6      	bne.n	8019ef2 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8019f24:	687b      	ldr	r3, [r7, #4]
 8019f26:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019f28:	2b01      	cmp	r3, #1
 8019f2a:	d12e      	bne.n	8019f8a <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8019f2c:	687b      	ldr	r3, [r7, #4]
 8019f2e:	2200      	movs	r2, #0
 8019f30:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8019f32:	687b      	ldr	r3, [r7, #4]
 8019f34:	681b      	ldr	r3, [r3, #0]
 8019f36:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019f38:	693b      	ldr	r3, [r7, #16]
 8019f3a:	e853 3f00 	ldrex	r3, [r3]
 8019f3e:	60fb      	str	r3, [r7, #12]
   return(result);
 8019f40:	68fb      	ldr	r3, [r7, #12]
 8019f42:	f023 0310 	bic.w	r3, r3, #16
 8019f46:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8019f48:	687b      	ldr	r3, [r7, #4]
 8019f4a:	681b      	ldr	r3, [r3, #0]
 8019f4c:	461a      	mov	r2, r3
 8019f4e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8019f50:	61fb      	str	r3, [r7, #28]
 8019f52:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019f54:	69b9      	ldr	r1, [r7, #24]
 8019f56:	69fa      	ldr	r2, [r7, #28]
 8019f58:	e841 2300 	strex	r3, r2, [r1]
 8019f5c:	617b      	str	r3, [r7, #20]
   return(result);
 8019f5e:	697b      	ldr	r3, [r7, #20]
 8019f60:	2b00      	cmp	r3, #0
 8019f62:	d1e6      	bne.n	8019f32 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8019f64:	687b      	ldr	r3, [r7, #4]
 8019f66:	681b      	ldr	r3, [r3, #0]
 8019f68:	69db      	ldr	r3, [r3, #28]
 8019f6a:	f003 0310 	and.w	r3, r3, #16
 8019f6e:	2b10      	cmp	r3, #16
 8019f70:	d103      	bne.n	8019f7a <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8019f72:	687b      	ldr	r3, [r7, #4]
 8019f74:	681b      	ldr	r3, [r3, #0]
 8019f76:	2210      	movs	r2, #16
 8019f78:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8019f7a:	687b      	ldr	r3, [r7, #4]
 8019f7c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8019f80:	4619      	mov	r1, r3
 8019f82:	6878      	ldr	r0, [r7, #4]
 8019f84:	f7fe fb9e 	bl	80186c4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8019f88:	e00b      	b.n	8019fa2 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8019f8a:	6878      	ldr	r0, [r7, #4]
 8019f8c:	f7ec f99c 	bl	80062c8 <HAL_UART_RxCpltCallback>
}
 8019f90:	e007      	b.n	8019fa2 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8019f92:	687b      	ldr	r3, [r7, #4]
 8019f94:	681b      	ldr	r3, [r3, #0]
 8019f96:	699a      	ldr	r2, [r3, #24]
 8019f98:	687b      	ldr	r3, [r7, #4]
 8019f9a:	681b      	ldr	r3, [r3, #0]
 8019f9c:	f042 0208 	orr.w	r2, r2, #8
 8019fa0:	619a      	str	r2, [r3, #24]
}
 8019fa2:	bf00      	nop
 8019fa4:	3770      	adds	r7, #112	@ 0x70
 8019fa6:	46bd      	mov	sp, r7
 8019fa8:	bd80      	pop	{r7, pc}
 8019faa:	bf00      	nop
 8019fac:	58000c00 	.word	0x58000c00

08019fb0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8019fb0:	b580      	push	{r7, lr}
 8019fb2:	b09c      	sub	sp, #112	@ 0x70
 8019fb4:	af00      	add	r7, sp, #0
 8019fb6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8019fb8:	687b      	ldr	r3, [r7, #4]
 8019fba:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8019fbe:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8019fc2:	687b      	ldr	r3, [r7, #4]
 8019fc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8019fc8:	2b22      	cmp	r3, #34	@ 0x22
 8019fca:	f040 80be 	bne.w	801a14a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8019fce:	687b      	ldr	r3, [r7, #4]
 8019fd0:	681b      	ldr	r3, [r3, #0]
 8019fd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019fd4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8019fd8:	687b      	ldr	r3, [r7, #4]
 8019fda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8019fdc:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8019fde:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8019fe2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8019fe6:	4013      	ands	r3, r2
 8019fe8:	b29a      	uxth	r2, r3
 8019fea:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8019fec:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8019fee:	687b      	ldr	r3, [r7, #4]
 8019ff0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8019ff2:	1c9a      	adds	r2, r3, #2
 8019ff4:	687b      	ldr	r3, [r7, #4]
 8019ff6:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8019ff8:	687b      	ldr	r3, [r7, #4]
 8019ffa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8019ffe:	b29b      	uxth	r3, r3
 801a000:	3b01      	subs	r3, #1
 801a002:	b29a      	uxth	r2, r3
 801a004:	687b      	ldr	r3, [r7, #4]
 801a006:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 801a00a:	687b      	ldr	r3, [r7, #4]
 801a00c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801a010:	b29b      	uxth	r3, r3
 801a012:	2b00      	cmp	r3, #0
 801a014:	f040 80a1 	bne.w	801a15a <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801a018:	687b      	ldr	r3, [r7, #4]
 801a01a:	681b      	ldr	r3, [r3, #0]
 801a01c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a01e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801a020:	e853 3f00 	ldrex	r3, [r3]
 801a024:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 801a026:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801a028:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801a02c:	667b      	str	r3, [r7, #100]	@ 0x64
 801a02e:	687b      	ldr	r3, [r7, #4]
 801a030:	681b      	ldr	r3, [r3, #0]
 801a032:	461a      	mov	r2, r3
 801a034:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801a036:	657b      	str	r3, [r7, #84]	@ 0x54
 801a038:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a03a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801a03c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801a03e:	e841 2300 	strex	r3, r2, [r1]
 801a042:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 801a044:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801a046:	2b00      	cmp	r3, #0
 801a048:	d1e6      	bne.n	801a018 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801a04a:	687b      	ldr	r3, [r7, #4]
 801a04c:	681b      	ldr	r3, [r3, #0]
 801a04e:	3308      	adds	r3, #8
 801a050:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a052:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a054:	e853 3f00 	ldrex	r3, [r3]
 801a058:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 801a05a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a05c:	f023 0301 	bic.w	r3, r3, #1
 801a060:	663b      	str	r3, [r7, #96]	@ 0x60
 801a062:	687b      	ldr	r3, [r7, #4]
 801a064:	681b      	ldr	r3, [r3, #0]
 801a066:	3308      	adds	r3, #8
 801a068:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 801a06a:	643a      	str	r2, [r7, #64]	@ 0x40
 801a06c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a06e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801a070:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801a072:	e841 2300 	strex	r3, r2, [r1]
 801a076:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 801a078:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a07a:	2b00      	cmp	r3, #0
 801a07c:	d1e5      	bne.n	801a04a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801a07e:	687b      	ldr	r3, [r7, #4]
 801a080:	2220      	movs	r2, #32
 801a082:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801a086:	687b      	ldr	r3, [r7, #4]
 801a088:	2200      	movs	r2, #0
 801a08a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 801a08c:	687b      	ldr	r3, [r7, #4]
 801a08e:	2200      	movs	r2, #0
 801a090:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801a092:	687b      	ldr	r3, [r7, #4]
 801a094:	681b      	ldr	r3, [r3, #0]
 801a096:	4a33      	ldr	r2, [pc, #204]	@ (801a164 <UART_RxISR_16BIT+0x1b4>)
 801a098:	4293      	cmp	r3, r2
 801a09a:	d01f      	beq.n	801a0dc <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801a09c:	687b      	ldr	r3, [r7, #4]
 801a09e:	681b      	ldr	r3, [r3, #0]
 801a0a0:	685b      	ldr	r3, [r3, #4]
 801a0a2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801a0a6:	2b00      	cmp	r3, #0
 801a0a8:	d018      	beq.n	801a0dc <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801a0aa:	687b      	ldr	r3, [r7, #4]
 801a0ac:	681b      	ldr	r3, [r3, #0]
 801a0ae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a0b0:	6a3b      	ldr	r3, [r7, #32]
 801a0b2:	e853 3f00 	ldrex	r3, [r3]
 801a0b6:	61fb      	str	r3, [r7, #28]
   return(result);
 801a0b8:	69fb      	ldr	r3, [r7, #28]
 801a0ba:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 801a0be:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801a0c0:	687b      	ldr	r3, [r7, #4]
 801a0c2:	681b      	ldr	r3, [r3, #0]
 801a0c4:	461a      	mov	r2, r3
 801a0c6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801a0c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801a0ca:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a0cc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801a0ce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801a0d0:	e841 2300 	strex	r3, r2, [r1]
 801a0d4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 801a0d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a0d8:	2b00      	cmp	r3, #0
 801a0da:	d1e6      	bne.n	801a0aa <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801a0dc:	687b      	ldr	r3, [r7, #4]
 801a0de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a0e0:	2b01      	cmp	r3, #1
 801a0e2:	d12e      	bne.n	801a142 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801a0e4:	687b      	ldr	r3, [r7, #4]
 801a0e6:	2200      	movs	r2, #0
 801a0e8:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801a0ea:	687b      	ldr	r3, [r7, #4]
 801a0ec:	681b      	ldr	r3, [r3, #0]
 801a0ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a0f0:	68fb      	ldr	r3, [r7, #12]
 801a0f2:	e853 3f00 	ldrex	r3, [r3]
 801a0f6:	60bb      	str	r3, [r7, #8]
   return(result);
 801a0f8:	68bb      	ldr	r3, [r7, #8]
 801a0fa:	f023 0310 	bic.w	r3, r3, #16
 801a0fe:	65bb      	str	r3, [r7, #88]	@ 0x58
 801a100:	687b      	ldr	r3, [r7, #4]
 801a102:	681b      	ldr	r3, [r3, #0]
 801a104:	461a      	mov	r2, r3
 801a106:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801a108:	61bb      	str	r3, [r7, #24]
 801a10a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a10c:	6979      	ldr	r1, [r7, #20]
 801a10e:	69ba      	ldr	r2, [r7, #24]
 801a110:	e841 2300 	strex	r3, r2, [r1]
 801a114:	613b      	str	r3, [r7, #16]
   return(result);
 801a116:	693b      	ldr	r3, [r7, #16]
 801a118:	2b00      	cmp	r3, #0
 801a11a:	d1e6      	bne.n	801a0ea <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801a11c:	687b      	ldr	r3, [r7, #4]
 801a11e:	681b      	ldr	r3, [r3, #0]
 801a120:	69db      	ldr	r3, [r3, #28]
 801a122:	f003 0310 	and.w	r3, r3, #16
 801a126:	2b10      	cmp	r3, #16
 801a128:	d103      	bne.n	801a132 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801a12a:	687b      	ldr	r3, [r7, #4]
 801a12c:	681b      	ldr	r3, [r3, #0]
 801a12e:	2210      	movs	r2, #16
 801a130:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801a132:	687b      	ldr	r3, [r7, #4]
 801a134:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801a138:	4619      	mov	r1, r3
 801a13a:	6878      	ldr	r0, [r7, #4]
 801a13c:	f7fe fac2 	bl	80186c4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801a140:	e00b      	b.n	801a15a <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 801a142:	6878      	ldr	r0, [r7, #4]
 801a144:	f7ec f8c0 	bl	80062c8 <HAL_UART_RxCpltCallback>
}
 801a148:	e007      	b.n	801a15a <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801a14a:	687b      	ldr	r3, [r7, #4]
 801a14c:	681b      	ldr	r3, [r3, #0]
 801a14e:	699a      	ldr	r2, [r3, #24]
 801a150:	687b      	ldr	r3, [r7, #4]
 801a152:	681b      	ldr	r3, [r3, #0]
 801a154:	f042 0208 	orr.w	r2, r2, #8
 801a158:	619a      	str	r2, [r3, #24]
}
 801a15a:	bf00      	nop
 801a15c:	3770      	adds	r7, #112	@ 0x70
 801a15e:	46bd      	mov	sp, r7
 801a160:	bd80      	pop	{r7, pc}
 801a162:	bf00      	nop
 801a164:	58000c00 	.word	0x58000c00

0801a168 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 801a168:	b580      	push	{r7, lr}
 801a16a:	b0ac      	sub	sp, #176	@ 0xb0
 801a16c:	af00      	add	r7, sp, #0
 801a16e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 801a170:	687b      	ldr	r3, [r7, #4]
 801a172:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801a176:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 801a17a:	687b      	ldr	r3, [r7, #4]
 801a17c:	681b      	ldr	r3, [r3, #0]
 801a17e:	69db      	ldr	r3, [r3, #28]
 801a180:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 801a184:	687b      	ldr	r3, [r7, #4]
 801a186:	681b      	ldr	r3, [r3, #0]
 801a188:	681b      	ldr	r3, [r3, #0]
 801a18a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 801a18e:	687b      	ldr	r3, [r7, #4]
 801a190:	681b      	ldr	r3, [r3, #0]
 801a192:	689b      	ldr	r3, [r3, #8]
 801a194:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801a198:	687b      	ldr	r3, [r7, #4]
 801a19a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801a19e:	2b22      	cmp	r3, #34	@ 0x22
 801a1a0:	f040 8181 	bne.w	801a4a6 <UART_RxISR_8BIT_FIFOEN+0x33e>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 801a1a4:	687b      	ldr	r3, [r7, #4]
 801a1a6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 801a1aa:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801a1ae:	e124      	b.n	801a3fa <UART_RxISR_8BIT_FIFOEN+0x292>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801a1b0:	687b      	ldr	r3, [r7, #4]
 801a1b2:	681b      	ldr	r3, [r3, #0]
 801a1b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a1b6:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 801a1ba:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 801a1be:	b2d9      	uxtb	r1, r3
 801a1c0:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 801a1c4:	b2da      	uxtb	r2, r3
 801a1c6:	687b      	ldr	r3, [r7, #4]
 801a1c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801a1ca:	400a      	ands	r2, r1
 801a1cc:	b2d2      	uxtb	r2, r2
 801a1ce:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 801a1d0:	687b      	ldr	r3, [r7, #4]
 801a1d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801a1d4:	1c5a      	adds	r2, r3, #1
 801a1d6:	687b      	ldr	r3, [r7, #4]
 801a1d8:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 801a1da:	687b      	ldr	r3, [r7, #4]
 801a1dc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801a1e0:	b29b      	uxth	r3, r3
 801a1e2:	3b01      	subs	r3, #1
 801a1e4:	b29a      	uxth	r2, r3
 801a1e6:	687b      	ldr	r3, [r7, #4]
 801a1e8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 801a1ec:	687b      	ldr	r3, [r7, #4]
 801a1ee:	681b      	ldr	r3, [r3, #0]
 801a1f0:	69db      	ldr	r3, [r3, #28]
 801a1f2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 801a1f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801a1fa:	f003 0307 	and.w	r3, r3, #7
 801a1fe:	2b00      	cmp	r3, #0
 801a200:	d053      	beq.n	801a2aa <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801a202:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801a206:	f003 0301 	and.w	r3, r3, #1
 801a20a:	2b00      	cmp	r3, #0
 801a20c:	d011      	beq.n	801a232 <UART_RxISR_8BIT_FIFOEN+0xca>
 801a20e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801a212:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801a216:	2b00      	cmp	r3, #0
 801a218:	d00b      	beq.n	801a232 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801a21a:	687b      	ldr	r3, [r7, #4]
 801a21c:	681b      	ldr	r3, [r3, #0]
 801a21e:	2201      	movs	r2, #1
 801a220:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 801a222:	687b      	ldr	r3, [r7, #4]
 801a224:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801a228:	f043 0201 	orr.w	r2, r3, #1
 801a22c:	687b      	ldr	r3, [r7, #4]
 801a22e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801a232:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801a236:	f003 0302 	and.w	r3, r3, #2
 801a23a:	2b00      	cmp	r3, #0
 801a23c:	d011      	beq.n	801a262 <UART_RxISR_8BIT_FIFOEN+0xfa>
 801a23e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801a242:	f003 0301 	and.w	r3, r3, #1
 801a246:	2b00      	cmp	r3, #0
 801a248:	d00b      	beq.n	801a262 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801a24a:	687b      	ldr	r3, [r7, #4]
 801a24c:	681b      	ldr	r3, [r3, #0]
 801a24e:	2202      	movs	r2, #2
 801a250:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 801a252:	687b      	ldr	r3, [r7, #4]
 801a254:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801a258:	f043 0204 	orr.w	r2, r3, #4
 801a25c:	687b      	ldr	r3, [r7, #4]
 801a25e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801a262:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801a266:	f003 0304 	and.w	r3, r3, #4
 801a26a:	2b00      	cmp	r3, #0
 801a26c:	d011      	beq.n	801a292 <UART_RxISR_8BIT_FIFOEN+0x12a>
 801a26e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801a272:	f003 0301 	and.w	r3, r3, #1
 801a276:	2b00      	cmp	r3, #0
 801a278:	d00b      	beq.n	801a292 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801a27a:	687b      	ldr	r3, [r7, #4]
 801a27c:	681b      	ldr	r3, [r3, #0]
 801a27e:	2204      	movs	r2, #4
 801a280:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 801a282:	687b      	ldr	r3, [r7, #4]
 801a284:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801a288:	f043 0202 	orr.w	r2, r3, #2
 801a28c:	687b      	ldr	r3, [r7, #4]
 801a28e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801a292:	687b      	ldr	r3, [r7, #4]
 801a294:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801a298:	2b00      	cmp	r3, #0
 801a29a:	d006      	beq.n	801a2aa <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801a29c:	6878      	ldr	r0, [r7, #4]
 801a29e:	f7fe fa07 	bl	80186b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 801a2a2:	687b      	ldr	r3, [r7, #4]
 801a2a4:	2200      	movs	r2, #0
 801a2a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 801a2aa:	687b      	ldr	r3, [r7, #4]
 801a2ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801a2b0:	b29b      	uxth	r3, r3
 801a2b2:	2b00      	cmp	r3, #0
 801a2b4:	f040 80a1 	bne.w	801a3fa <UART_RxISR_8BIT_FIFOEN+0x292>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801a2b8:	687b      	ldr	r3, [r7, #4]
 801a2ba:	681b      	ldr	r3, [r3, #0]
 801a2bc:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a2be:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801a2c0:	e853 3f00 	ldrex	r3, [r3]
 801a2c4:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 801a2c6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801a2c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801a2cc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 801a2d0:	687b      	ldr	r3, [r7, #4]
 801a2d2:	681b      	ldr	r3, [r3, #0]
 801a2d4:	461a      	mov	r2, r3
 801a2d6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 801a2da:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801a2dc:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a2de:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 801a2e0:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 801a2e2:	e841 2300 	strex	r3, r2, [r1]
 801a2e6:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 801a2e8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801a2ea:	2b00      	cmp	r3, #0
 801a2ec:	d1e4      	bne.n	801a2b8 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801a2ee:	687b      	ldr	r3, [r7, #4]
 801a2f0:	681b      	ldr	r3, [r3, #0]
 801a2f2:	3308      	adds	r3, #8
 801a2f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a2f6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801a2f8:	e853 3f00 	ldrex	r3, [r3]
 801a2fc:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 801a2fe:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801a300:	4b6f      	ldr	r3, [pc, #444]	@ (801a4c0 <UART_RxISR_8BIT_FIFOEN+0x358>)
 801a302:	4013      	ands	r3, r2
 801a304:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 801a308:	687b      	ldr	r3, [r7, #4]
 801a30a:	681b      	ldr	r3, [r3, #0]
 801a30c:	3308      	adds	r3, #8
 801a30e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 801a312:	66ba      	str	r2, [r7, #104]	@ 0x68
 801a314:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a316:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 801a318:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 801a31a:	e841 2300 	strex	r3, r2, [r1]
 801a31e:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 801a320:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801a322:	2b00      	cmp	r3, #0
 801a324:	d1e3      	bne.n	801a2ee <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801a326:	687b      	ldr	r3, [r7, #4]
 801a328:	2220      	movs	r2, #32
 801a32a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801a32e:	687b      	ldr	r3, [r7, #4]
 801a330:	2200      	movs	r2, #0
 801a332:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 801a334:	687b      	ldr	r3, [r7, #4]
 801a336:	2200      	movs	r2, #0
 801a338:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801a33a:	687b      	ldr	r3, [r7, #4]
 801a33c:	681b      	ldr	r3, [r3, #0]
 801a33e:	4a61      	ldr	r2, [pc, #388]	@ (801a4c4 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 801a340:	4293      	cmp	r3, r2
 801a342:	d021      	beq.n	801a388 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801a344:	687b      	ldr	r3, [r7, #4]
 801a346:	681b      	ldr	r3, [r3, #0]
 801a348:	685b      	ldr	r3, [r3, #4]
 801a34a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801a34e:	2b00      	cmp	r3, #0
 801a350:	d01a      	beq.n	801a388 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801a352:	687b      	ldr	r3, [r7, #4]
 801a354:	681b      	ldr	r3, [r3, #0]
 801a356:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a358:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801a35a:	e853 3f00 	ldrex	r3, [r3]
 801a35e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 801a360:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801a362:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 801a366:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 801a36a:	687b      	ldr	r3, [r7, #4]
 801a36c:	681b      	ldr	r3, [r3, #0]
 801a36e:	461a      	mov	r2, r3
 801a370:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801a374:	657b      	str	r3, [r7, #84]	@ 0x54
 801a376:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a378:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801a37a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801a37c:	e841 2300 	strex	r3, r2, [r1]
 801a380:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 801a382:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801a384:	2b00      	cmp	r3, #0
 801a386:	d1e4      	bne.n	801a352 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801a388:	687b      	ldr	r3, [r7, #4]
 801a38a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a38c:	2b01      	cmp	r3, #1
 801a38e:	d130      	bne.n	801a3f2 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801a390:	687b      	ldr	r3, [r7, #4]
 801a392:	2200      	movs	r2, #0
 801a394:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801a396:	687b      	ldr	r3, [r7, #4]
 801a398:	681b      	ldr	r3, [r3, #0]
 801a39a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a39c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a39e:	e853 3f00 	ldrex	r3, [r3]
 801a3a2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 801a3a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a3a6:	f023 0310 	bic.w	r3, r3, #16
 801a3aa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 801a3ae:	687b      	ldr	r3, [r7, #4]
 801a3b0:	681b      	ldr	r3, [r3, #0]
 801a3b2:	461a      	mov	r2, r3
 801a3b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801a3b8:	643b      	str	r3, [r7, #64]	@ 0x40
 801a3ba:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a3bc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801a3be:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801a3c0:	e841 2300 	strex	r3, r2, [r1]
 801a3c4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 801a3c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a3c8:	2b00      	cmp	r3, #0
 801a3ca:	d1e4      	bne.n	801a396 <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801a3cc:	687b      	ldr	r3, [r7, #4]
 801a3ce:	681b      	ldr	r3, [r3, #0]
 801a3d0:	69db      	ldr	r3, [r3, #28]
 801a3d2:	f003 0310 	and.w	r3, r3, #16
 801a3d6:	2b10      	cmp	r3, #16
 801a3d8:	d103      	bne.n	801a3e2 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801a3da:	687b      	ldr	r3, [r7, #4]
 801a3dc:	681b      	ldr	r3, [r3, #0]
 801a3de:	2210      	movs	r2, #16
 801a3e0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801a3e2:	687b      	ldr	r3, [r7, #4]
 801a3e4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801a3e8:	4619      	mov	r1, r3
 801a3ea:	6878      	ldr	r0, [r7, #4]
 801a3ec:	f7fe f96a 	bl	80186c4 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 801a3f0:	e00e      	b.n	801a410 <UART_RxISR_8BIT_FIFOEN+0x2a8>
          HAL_UART_RxCpltCallback(huart);
 801a3f2:	6878      	ldr	r0, [r7, #4]
 801a3f4:	f7eb ff68 	bl	80062c8 <HAL_UART_RxCpltCallback>
        break;
 801a3f8:	e00a      	b.n	801a410 <UART_RxISR_8BIT_FIFOEN+0x2a8>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801a3fa:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 801a3fe:	2b00      	cmp	r3, #0
 801a400:	d006      	beq.n	801a410 <UART_RxISR_8BIT_FIFOEN+0x2a8>
 801a402:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801a406:	f003 0320 	and.w	r3, r3, #32
 801a40a:	2b00      	cmp	r3, #0
 801a40c:	f47f aed0 	bne.w	801a1b0 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 801a410:	687b      	ldr	r3, [r7, #4]
 801a412:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801a416:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 801a41a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 801a41e:	2b00      	cmp	r3, #0
 801a420:	d049      	beq.n	801a4b6 <UART_RxISR_8BIT_FIFOEN+0x34e>
 801a422:	687b      	ldr	r3, [r7, #4]
 801a424:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 801a428:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 801a42c:	429a      	cmp	r2, r3
 801a42e:	d242      	bcs.n	801a4b6 <UART_RxISR_8BIT_FIFOEN+0x34e>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 801a430:	687b      	ldr	r3, [r7, #4]
 801a432:	681b      	ldr	r3, [r3, #0]
 801a434:	3308      	adds	r3, #8
 801a436:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a438:	6a3b      	ldr	r3, [r7, #32]
 801a43a:	e853 3f00 	ldrex	r3, [r3]
 801a43e:	61fb      	str	r3, [r7, #28]
   return(result);
 801a440:	69fb      	ldr	r3, [r7, #28]
 801a442:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 801a446:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 801a44a:	687b      	ldr	r3, [r7, #4]
 801a44c:	681b      	ldr	r3, [r3, #0]
 801a44e:	3308      	adds	r3, #8
 801a450:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 801a454:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801a456:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a458:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801a45a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801a45c:	e841 2300 	strex	r3, r2, [r1]
 801a460:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 801a462:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a464:	2b00      	cmp	r3, #0
 801a466:	d1e3      	bne.n	801a430 <UART_RxISR_8BIT_FIFOEN+0x2c8>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 801a468:	687b      	ldr	r3, [r7, #4]
 801a46a:	4a17      	ldr	r2, [pc, #92]	@ (801a4c8 <UART_RxISR_8BIT_FIFOEN+0x360>)
 801a46c:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 801a46e:	687b      	ldr	r3, [r7, #4]
 801a470:	681b      	ldr	r3, [r3, #0]
 801a472:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a474:	68fb      	ldr	r3, [r7, #12]
 801a476:	e853 3f00 	ldrex	r3, [r3]
 801a47a:	60bb      	str	r3, [r7, #8]
   return(result);
 801a47c:	68bb      	ldr	r3, [r7, #8]
 801a47e:	f043 0320 	orr.w	r3, r3, #32
 801a482:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 801a486:	687b      	ldr	r3, [r7, #4]
 801a488:	681b      	ldr	r3, [r3, #0]
 801a48a:	461a      	mov	r2, r3
 801a48c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801a490:	61bb      	str	r3, [r7, #24]
 801a492:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a494:	6979      	ldr	r1, [r7, #20]
 801a496:	69ba      	ldr	r2, [r7, #24]
 801a498:	e841 2300 	strex	r3, r2, [r1]
 801a49c:	613b      	str	r3, [r7, #16]
   return(result);
 801a49e:	693b      	ldr	r3, [r7, #16]
 801a4a0:	2b00      	cmp	r3, #0
 801a4a2:	d1e4      	bne.n	801a46e <UART_RxISR_8BIT_FIFOEN+0x306>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801a4a4:	e007      	b.n	801a4b6 <UART_RxISR_8BIT_FIFOEN+0x34e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801a4a6:	687b      	ldr	r3, [r7, #4]
 801a4a8:	681b      	ldr	r3, [r3, #0]
 801a4aa:	699a      	ldr	r2, [r3, #24]
 801a4ac:	687b      	ldr	r3, [r7, #4]
 801a4ae:	681b      	ldr	r3, [r3, #0]
 801a4b0:	f042 0208 	orr.w	r2, r2, #8
 801a4b4:	619a      	str	r2, [r3, #24]
}
 801a4b6:	bf00      	nop
 801a4b8:	37b0      	adds	r7, #176	@ 0xb0
 801a4ba:	46bd      	mov	sp, r7
 801a4bc:	bd80      	pop	{r7, pc}
 801a4be:	bf00      	nop
 801a4c0:	effffffe 	.word	0xeffffffe
 801a4c4:	58000c00 	.word	0x58000c00
 801a4c8:	08019df9 	.word	0x08019df9

0801a4cc <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 801a4cc:	b580      	push	{r7, lr}
 801a4ce:	b0ae      	sub	sp, #184	@ 0xb8
 801a4d0:	af00      	add	r7, sp, #0
 801a4d2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 801a4d4:	687b      	ldr	r3, [r7, #4]
 801a4d6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801a4da:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 801a4de:	687b      	ldr	r3, [r7, #4]
 801a4e0:	681b      	ldr	r3, [r3, #0]
 801a4e2:	69db      	ldr	r3, [r3, #28]
 801a4e4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 801a4e8:	687b      	ldr	r3, [r7, #4]
 801a4ea:	681b      	ldr	r3, [r3, #0]
 801a4ec:	681b      	ldr	r3, [r3, #0]
 801a4ee:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 801a4f2:	687b      	ldr	r3, [r7, #4]
 801a4f4:	681b      	ldr	r3, [r3, #0]
 801a4f6:	689b      	ldr	r3, [r3, #8]
 801a4f8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801a4fc:	687b      	ldr	r3, [r7, #4]
 801a4fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801a502:	2b22      	cmp	r3, #34	@ 0x22
 801a504:	f040 8185 	bne.w	801a812 <UART_RxISR_16BIT_FIFOEN+0x346>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 801a508:	687b      	ldr	r3, [r7, #4]
 801a50a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 801a50e:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801a512:	e128      	b.n	801a766 <UART_RxISR_16BIT_FIFOEN+0x29a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801a514:	687b      	ldr	r3, [r7, #4]
 801a516:	681b      	ldr	r3, [r3, #0]
 801a518:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a51a:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 801a51e:	687b      	ldr	r3, [r7, #4]
 801a520:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801a522:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 801a526:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 801a52a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 801a52e:	4013      	ands	r3, r2
 801a530:	b29a      	uxth	r2, r3
 801a532:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801a536:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 801a538:	687b      	ldr	r3, [r7, #4]
 801a53a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801a53c:	1c9a      	adds	r2, r3, #2
 801a53e:	687b      	ldr	r3, [r7, #4]
 801a540:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 801a542:	687b      	ldr	r3, [r7, #4]
 801a544:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801a548:	b29b      	uxth	r3, r3
 801a54a:	3b01      	subs	r3, #1
 801a54c:	b29a      	uxth	r2, r3
 801a54e:	687b      	ldr	r3, [r7, #4]
 801a550:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 801a554:	687b      	ldr	r3, [r7, #4]
 801a556:	681b      	ldr	r3, [r3, #0]
 801a558:	69db      	ldr	r3, [r3, #28]
 801a55a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 801a55e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801a562:	f003 0307 	and.w	r3, r3, #7
 801a566:	2b00      	cmp	r3, #0
 801a568:	d053      	beq.n	801a612 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801a56a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801a56e:	f003 0301 	and.w	r3, r3, #1
 801a572:	2b00      	cmp	r3, #0
 801a574:	d011      	beq.n	801a59a <UART_RxISR_16BIT_FIFOEN+0xce>
 801a576:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801a57a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801a57e:	2b00      	cmp	r3, #0
 801a580:	d00b      	beq.n	801a59a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801a582:	687b      	ldr	r3, [r7, #4]
 801a584:	681b      	ldr	r3, [r3, #0]
 801a586:	2201      	movs	r2, #1
 801a588:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 801a58a:	687b      	ldr	r3, [r7, #4]
 801a58c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801a590:	f043 0201 	orr.w	r2, r3, #1
 801a594:	687b      	ldr	r3, [r7, #4]
 801a596:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801a59a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801a59e:	f003 0302 	and.w	r3, r3, #2
 801a5a2:	2b00      	cmp	r3, #0
 801a5a4:	d011      	beq.n	801a5ca <UART_RxISR_16BIT_FIFOEN+0xfe>
 801a5a6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 801a5aa:	f003 0301 	and.w	r3, r3, #1
 801a5ae:	2b00      	cmp	r3, #0
 801a5b0:	d00b      	beq.n	801a5ca <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801a5b2:	687b      	ldr	r3, [r7, #4]
 801a5b4:	681b      	ldr	r3, [r3, #0]
 801a5b6:	2202      	movs	r2, #2
 801a5b8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 801a5ba:	687b      	ldr	r3, [r7, #4]
 801a5bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801a5c0:	f043 0204 	orr.w	r2, r3, #4
 801a5c4:	687b      	ldr	r3, [r7, #4]
 801a5c6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801a5ca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801a5ce:	f003 0304 	and.w	r3, r3, #4
 801a5d2:	2b00      	cmp	r3, #0
 801a5d4:	d011      	beq.n	801a5fa <UART_RxISR_16BIT_FIFOEN+0x12e>
 801a5d6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 801a5da:	f003 0301 	and.w	r3, r3, #1
 801a5de:	2b00      	cmp	r3, #0
 801a5e0:	d00b      	beq.n	801a5fa <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801a5e2:	687b      	ldr	r3, [r7, #4]
 801a5e4:	681b      	ldr	r3, [r3, #0]
 801a5e6:	2204      	movs	r2, #4
 801a5e8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 801a5ea:	687b      	ldr	r3, [r7, #4]
 801a5ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801a5f0:	f043 0202 	orr.w	r2, r3, #2
 801a5f4:	687b      	ldr	r3, [r7, #4]
 801a5f6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801a5fa:	687b      	ldr	r3, [r7, #4]
 801a5fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801a600:	2b00      	cmp	r3, #0
 801a602:	d006      	beq.n	801a612 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801a604:	6878      	ldr	r0, [r7, #4]
 801a606:	f7fe f853 	bl	80186b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 801a60a:	687b      	ldr	r3, [r7, #4]
 801a60c:	2200      	movs	r2, #0
 801a60e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 801a612:	687b      	ldr	r3, [r7, #4]
 801a614:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801a618:	b29b      	uxth	r3, r3
 801a61a:	2b00      	cmp	r3, #0
 801a61c:	f040 80a3 	bne.w	801a766 <UART_RxISR_16BIT_FIFOEN+0x29a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801a620:	687b      	ldr	r3, [r7, #4]
 801a622:	681b      	ldr	r3, [r3, #0]
 801a624:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a626:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801a628:	e853 3f00 	ldrex	r3, [r3]
 801a62c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 801a62e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801a630:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801a634:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 801a638:	687b      	ldr	r3, [r7, #4]
 801a63a:	681b      	ldr	r3, [r3, #0]
 801a63c:	461a      	mov	r2, r3
 801a63e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801a642:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 801a646:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a648:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 801a64a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 801a64e:	e841 2300 	strex	r3, r2, [r1]
 801a652:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 801a654:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801a656:	2b00      	cmp	r3, #0
 801a658:	d1e2      	bne.n	801a620 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801a65a:	687b      	ldr	r3, [r7, #4]
 801a65c:	681b      	ldr	r3, [r3, #0]
 801a65e:	3308      	adds	r3, #8
 801a660:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a662:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801a664:	e853 3f00 	ldrex	r3, [r3]
 801a668:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 801a66a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801a66c:	4b6f      	ldr	r3, [pc, #444]	@ (801a82c <UART_RxISR_16BIT_FIFOEN+0x360>)
 801a66e:	4013      	ands	r3, r2
 801a670:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 801a674:	687b      	ldr	r3, [r7, #4]
 801a676:	681b      	ldr	r3, [r3, #0]
 801a678:	3308      	adds	r3, #8
 801a67a:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 801a67e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 801a680:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a682:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 801a684:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 801a686:	e841 2300 	strex	r3, r2, [r1]
 801a68a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 801a68c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801a68e:	2b00      	cmp	r3, #0
 801a690:	d1e3      	bne.n	801a65a <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801a692:	687b      	ldr	r3, [r7, #4]
 801a694:	2220      	movs	r2, #32
 801a696:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801a69a:	687b      	ldr	r3, [r7, #4]
 801a69c:	2200      	movs	r2, #0
 801a69e:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 801a6a0:	687b      	ldr	r3, [r7, #4]
 801a6a2:	2200      	movs	r2, #0
 801a6a4:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801a6a6:	687b      	ldr	r3, [r7, #4]
 801a6a8:	681b      	ldr	r3, [r3, #0]
 801a6aa:	4a61      	ldr	r2, [pc, #388]	@ (801a830 <UART_RxISR_16BIT_FIFOEN+0x364>)
 801a6ac:	4293      	cmp	r3, r2
 801a6ae:	d021      	beq.n	801a6f4 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801a6b0:	687b      	ldr	r3, [r7, #4]
 801a6b2:	681b      	ldr	r3, [r3, #0]
 801a6b4:	685b      	ldr	r3, [r3, #4]
 801a6b6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801a6ba:	2b00      	cmp	r3, #0
 801a6bc:	d01a      	beq.n	801a6f4 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801a6be:	687b      	ldr	r3, [r7, #4]
 801a6c0:	681b      	ldr	r3, [r3, #0]
 801a6c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a6c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801a6c6:	e853 3f00 	ldrex	r3, [r3]
 801a6ca:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 801a6cc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801a6ce:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 801a6d2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 801a6d6:	687b      	ldr	r3, [r7, #4]
 801a6d8:	681b      	ldr	r3, [r3, #0]
 801a6da:	461a      	mov	r2, r3
 801a6dc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 801a6e0:	65bb      	str	r3, [r7, #88]	@ 0x58
 801a6e2:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a6e4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801a6e6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801a6e8:	e841 2300 	strex	r3, r2, [r1]
 801a6ec:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 801a6ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801a6f0:	2b00      	cmp	r3, #0
 801a6f2:	d1e4      	bne.n	801a6be <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801a6f4:	687b      	ldr	r3, [r7, #4]
 801a6f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a6f8:	2b01      	cmp	r3, #1
 801a6fa:	d130      	bne.n	801a75e <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801a6fc:	687b      	ldr	r3, [r7, #4]
 801a6fe:	2200      	movs	r2, #0
 801a700:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801a702:	687b      	ldr	r3, [r7, #4]
 801a704:	681b      	ldr	r3, [r3, #0]
 801a706:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a708:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a70a:	e853 3f00 	ldrex	r3, [r3]
 801a70e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 801a710:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a712:	f023 0310 	bic.w	r3, r3, #16
 801a716:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 801a71a:	687b      	ldr	r3, [r7, #4]
 801a71c:	681b      	ldr	r3, [r3, #0]
 801a71e:	461a      	mov	r2, r3
 801a720:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801a724:	647b      	str	r3, [r7, #68]	@ 0x44
 801a726:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a728:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801a72a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801a72c:	e841 2300 	strex	r3, r2, [r1]
 801a730:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 801a732:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a734:	2b00      	cmp	r3, #0
 801a736:	d1e4      	bne.n	801a702 <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801a738:	687b      	ldr	r3, [r7, #4]
 801a73a:	681b      	ldr	r3, [r3, #0]
 801a73c:	69db      	ldr	r3, [r3, #28]
 801a73e:	f003 0310 	and.w	r3, r3, #16
 801a742:	2b10      	cmp	r3, #16
 801a744:	d103      	bne.n	801a74e <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801a746:	687b      	ldr	r3, [r7, #4]
 801a748:	681b      	ldr	r3, [r3, #0]
 801a74a:	2210      	movs	r2, #16
 801a74c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801a74e:	687b      	ldr	r3, [r7, #4]
 801a750:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801a754:	4619      	mov	r1, r3
 801a756:	6878      	ldr	r0, [r7, #4]
 801a758:	f7fd ffb4 	bl	80186c4 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 801a75c:	e00e      	b.n	801a77c <UART_RxISR_16BIT_FIFOEN+0x2b0>
          HAL_UART_RxCpltCallback(huart);
 801a75e:	6878      	ldr	r0, [r7, #4]
 801a760:	f7eb fdb2 	bl	80062c8 <HAL_UART_RxCpltCallback>
        break;
 801a764:	e00a      	b.n	801a77c <UART_RxISR_16BIT_FIFOEN+0x2b0>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801a766:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 801a76a:	2b00      	cmp	r3, #0
 801a76c:	d006      	beq.n	801a77c <UART_RxISR_16BIT_FIFOEN+0x2b0>
 801a76e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801a772:	f003 0320 	and.w	r3, r3, #32
 801a776:	2b00      	cmp	r3, #0
 801a778:	f47f aecc 	bne.w	801a514 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 801a77c:	687b      	ldr	r3, [r7, #4]
 801a77e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801a782:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 801a786:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 801a78a:	2b00      	cmp	r3, #0
 801a78c:	d049      	beq.n	801a822 <UART_RxISR_16BIT_FIFOEN+0x356>
 801a78e:	687b      	ldr	r3, [r7, #4]
 801a790:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 801a794:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 801a798:	429a      	cmp	r2, r3
 801a79a:	d242      	bcs.n	801a822 <UART_RxISR_16BIT_FIFOEN+0x356>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 801a79c:	687b      	ldr	r3, [r7, #4]
 801a79e:	681b      	ldr	r3, [r3, #0]
 801a7a0:	3308      	adds	r3, #8
 801a7a2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a7a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a7a6:	e853 3f00 	ldrex	r3, [r3]
 801a7aa:	623b      	str	r3, [r7, #32]
   return(result);
 801a7ac:	6a3b      	ldr	r3, [r7, #32]
 801a7ae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 801a7b2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 801a7b6:	687b      	ldr	r3, [r7, #4]
 801a7b8:	681b      	ldr	r3, [r3, #0]
 801a7ba:	3308      	adds	r3, #8
 801a7bc:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 801a7c0:	633a      	str	r2, [r7, #48]	@ 0x30
 801a7c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a7c4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801a7c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801a7c8:	e841 2300 	strex	r3, r2, [r1]
 801a7cc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 801a7ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a7d0:	2b00      	cmp	r3, #0
 801a7d2:	d1e3      	bne.n	801a79c <UART_RxISR_16BIT_FIFOEN+0x2d0>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 801a7d4:	687b      	ldr	r3, [r7, #4]
 801a7d6:	4a17      	ldr	r2, [pc, #92]	@ (801a834 <UART_RxISR_16BIT_FIFOEN+0x368>)
 801a7d8:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 801a7da:	687b      	ldr	r3, [r7, #4]
 801a7dc:	681b      	ldr	r3, [r3, #0]
 801a7de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a7e0:	693b      	ldr	r3, [r7, #16]
 801a7e2:	e853 3f00 	ldrex	r3, [r3]
 801a7e6:	60fb      	str	r3, [r7, #12]
   return(result);
 801a7e8:	68fb      	ldr	r3, [r7, #12]
 801a7ea:	f043 0320 	orr.w	r3, r3, #32
 801a7ee:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 801a7f2:	687b      	ldr	r3, [r7, #4]
 801a7f4:	681b      	ldr	r3, [r3, #0]
 801a7f6:	461a      	mov	r2, r3
 801a7f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 801a7fc:	61fb      	str	r3, [r7, #28]
 801a7fe:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a800:	69b9      	ldr	r1, [r7, #24]
 801a802:	69fa      	ldr	r2, [r7, #28]
 801a804:	e841 2300 	strex	r3, r2, [r1]
 801a808:	617b      	str	r3, [r7, #20]
   return(result);
 801a80a:	697b      	ldr	r3, [r7, #20]
 801a80c:	2b00      	cmp	r3, #0
 801a80e:	d1e4      	bne.n	801a7da <UART_RxISR_16BIT_FIFOEN+0x30e>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801a810:	e007      	b.n	801a822 <UART_RxISR_16BIT_FIFOEN+0x356>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801a812:	687b      	ldr	r3, [r7, #4]
 801a814:	681b      	ldr	r3, [r3, #0]
 801a816:	699a      	ldr	r2, [r3, #24]
 801a818:	687b      	ldr	r3, [r7, #4]
 801a81a:	681b      	ldr	r3, [r3, #0]
 801a81c:	f042 0208 	orr.w	r2, r2, #8
 801a820:	619a      	str	r2, [r3, #24]
}
 801a822:	bf00      	nop
 801a824:	37b8      	adds	r7, #184	@ 0xb8
 801a826:	46bd      	mov	sp, r7
 801a828:	bd80      	pop	{r7, pc}
 801a82a:	bf00      	nop
 801a82c:	effffffe 	.word	0xeffffffe
 801a830:	58000c00 	.word	0x58000c00
 801a834:	08019fb1 	.word	0x08019fb1

0801a838 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 801a838:	b480      	push	{r7}
 801a83a:	b083      	sub	sp, #12
 801a83c:	af00      	add	r7, sp, #0
 801a83e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 801a840:	bf00      	nop
 801a842:	370c      	adds	r7, #12
 801a844:	46bd      	mov	sp, r7
 801a846:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a84a:	4770      	bx	lr

0801a84c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 801a84c:	b480      	push	{r7}
 801a84e:	b083      	sub	sp, #12
 801a850:	af00      	add	r7, sp, #0
 801a852:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 801a854:	bf00      	nop
 801a856:	370c      	adds	r7, #12
 801a858:	46bd      	mov	sp, r7
 801a85a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a85e:	4770      	bx	lr

0801a860 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 801a860:	b480      	push	{r7}
 801a862:	b083      	sub	sp, #12
 801a864:	af00      	add	r7, sp, #0
 801a866:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 801a868:	bf00      	nop
 801a86a:	370c      	adds	r7, #12
 801a86c:	46bd      	mov	sp, r7
 801a86e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a872:	4770      	bx	lr

0801a874 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 801a874:	b480      	push	{r7}
 801a876:	b085      	sub	sp, #20
 801a878:	af00      	add	r7, sp, #0
 801a87a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 801a87c:	687b      	ldr	r3, [r7, #4]
 801a87e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801a882:	2b01      	cmp	r3, #1
 801a884:	d101      	bne.n	801a88a <HAL_UARTEx_DisableFifoMode+0x16>
 801a886:	2302      	movs	r3, #2
 801a888:	e027      	b.n	801a8da <HAL_UARTEx_DisableFifoMode+0x66>
 801a88a:	687b      	ldr	r3, [r7, #4]
 801a88c:	2201      	movs	r2, #1
 801a88e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801a892:	687b      	ldr	r3, [r7, #4]
 801a894:	2224      	movs	r2, #36	@ 0x24
 801a896:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801a89a:	687b      	ldr	r3, [r7, #4]
 801a89c:	681b      	ldr	r3, [r3, #0]
 801a89e:	681b      	ldr	r3, [r3, #0]
 801a8a0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801a8a2:	687b      	ldr	r3, [r7, #4]
 801a8a4:	681b      	ldr	r3, [r3, #0]
 801a8a6:	681a      	ldr	r2, [r3, #0]
 801a8a8:	687b      	ldr	r3, [r7, #4]
 801a8aa:	681b      	ldr	r3, [r3, #0]
 801a8ac:	f022 0201 	bic.w	r2, r2, #1
 801a8b0:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 801a8b2:	68fb      	ldr	r3, [r7, #12]
 801a8b4:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 801a8b8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 801a8ba:	687b      	ldr	r3, [r7, #4]
 801a8bc:	2200      	movs	r2, #0
 801a8be:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801a8c0:	687b      	ldr	r3, [r7, #4]
 801a8c2:	681b      	ldr	r3, [r3, #0]
 801a8c4:	68fa      	ldr	r2, [r7, #12]
 801a8c6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801a8c8:	687b      	ldr	r3, [r7, #4]
 801a8ca:	2220      	movs	r2, #32
 801a8cc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801a8d0:	687b      	ldr	r3, [r7, #4]
 801a8d2:	2200      	movs	r2, #0
 801a8d4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801a8d8:	2300      	movs	r3, #0
}
 801a8da:	4618      	mov	r0, r3
 801a8dc:	3714      	adds	r7, #20
 801a8de:	46bd      	mov	sp, r7
 801a8e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a8e4:	4770      	bx	lr

0801a8e6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801a8e6:	b580      	push	{r7, lr}
 801a8e8:	b084      	sub	sp, #16
 801a8ea:	af00      	add	r7, sp, #0
 801a8ec:	6078      	str	r0, [r7, #4]
 801a8ee:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801a8f0:	687b      	ldr	r3, [r7, #4]
 801a8f2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801a8f6:	2b01      	cmp	r3, #1
 801a8f8:	d101      	bne.n	801a8fe <HAL_UARTEx_SetTxFifoThreshold+0x18>
 801a8fa:	2302      	movs	r3, #2
 801a8fc:	e02d      	b.n	801a95a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 801a8fe:	687b      	ldr	r3, [r7, #4]
 801a900:	2201      	movs	r2, #1
 801a902:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801a906:	687b      	ldr	r3, [r7, #4]
 801a908:	2224      	movs	r2, #36	@ 0x24
 801a90a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801a90e:	687b      	ldr	r3, [r7, #4]
 801a910:	681b      	ldr	r3, [r3, #0]
 801a912:	681b      	ldr	r3, [r3, #0]
 801a914:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801a916:	687b      	ldr	r3, [r7, #4]
 801a918:	681b      	ldr	r3, [r3, #0]
 801a91a:	681a      	ldr	r2, [r3, #0]
 801a91c:	687b      	ldr	r3, [r7, #4]
 801a91e:	681b      	ldr	r3, [r3, #0]
 801a920:	f022 0201 	bic.w	r2, r2, #1
 801a924:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 801a926:	687b      	ldr	r3, [r7, #4]
 801a928:	681b      	ldr	r3, [r3, #0]
 801a92a:	689b      	ldr	r3, [r3, #8]
 801a92c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 801a930:	687b      	ldr	r3, [r7, #4]
 801a932:	681b      	ldr	r3, [r3, #0]
 801a934:	683a      	ldr	r2, [r7, #0]
 801a936:	430a      	orrs	r2, r1
 801a938:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801a93a:	6878      	ldr	r0, [r7, #4]
 801a93c:	f000 f850 	bl	801a9e0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801a940:	687b      	ldr	r3, [r7, #4]
 801a942:	681b      	ldr	r3, [r3, #0]
 801a944:	68fa      	ldr	r2, [r7, #12]
 801a946:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801a948:	687b      	ldr	r3, [r7, #4]
 801a94a:	2220      	movs	r2, #32
 801a94c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801a950:	687b      	ldr	r3, [r7, #4]
 801a952:	2200      	movs	r2, #0
 801a954:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801a958:	2300      	movs	r3, #0
}
 801a95a:	4618      	mov	r0, r3
 801a95c:	3710      	adds	r7, #16
 801a95e:	46bd      	mov	sp, r7
 801a960:	bd80      	pop	{r7, pc}

0801a962 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801a962:	b580      	push	{r7, lr}
 801a964:	b084      	sub	sp, #16
 801a966:	af00      	add	r7, sp, #0
 801a968:	6078      	str	r0, [r7, #4]
 801a96a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801a96c:	687b      	ldr	r3, [r7, #4]
 801a96e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801a972:	2b01      	cmp	r3, #1
 801a974:	d101      	bne.n	801a97a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 801a976:	2302      	movs	r3, #2
 801a978:	e02d      	b.n	801a9d6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 801a97a:	687b      	ldr	r3, [r7, #4]
 801a97c:	2201      	movs	r2, #1
 801a97e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801a982:	687b      	ldr	r3, [r7, #4]
 801a984:	2224      	movs	r2, #36	@ 0x24
 801a986:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801a98a:	687b      	ldr	r3, [r7, #4]
 801a98c:	681b      	ldr	r3, [r3, #0]
 801a98e:	681b      	ldr	r3, [r3, #0]
 801a990:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801a992:	687b      	ldr	r3, [r7, #4]
 801a994:	681b      	ldr	r3, [r3, #0]
 801a996:	681a      	ldr	r2, [r3, #0]
 801a998:	687b      	ldr	r3, [r7, #4]
 801a99a:	681b      	ldr	r3, [r3, #0]
 801a99c:	f022 0201 	bic.w	r2, r2, #1
 801a9a0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 801a9a2:	687b      	ldr	r3, [r7, #4]
 801a9a4:	681b      	ldr	r3, [r3, #0]
 801a9a6:	689b      	ldr	r3, [r3, #8]
 801a9a8:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 801a9ac:	687b      	ldr	r3, [r7, #4]
 801a9ae:	681b      	ldr	r3, [r3, #0]
 801a9b0:	683a      	ldr	r2, [r7, #0]
 801a9b2:	430a      	orrs	r2, r1
 801a9b4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801a9b6:	6878      	ldr	r0, [r7, #4]
 801a9b8:	f000 f812 	bl	801a9e0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801a9bc:	687b      	ldr	r3, [r7, #4]
 801a9be:	681b      	ldr	r3, [r3, #0]
 801a9c0:	68fa      	ldr	r2, [r7, #12]
 801a9c2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801a9c4:	687b      	ldr	r3, [r7, #4]
 801a9c6:	2220      	movs	r2, #32
 801a9c8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801a9cc:	687b      	ldr	r3, [r7, #4]
 801a9ce:	2200      	movs	r2, #0
 801a9d0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801a9d4:	2300      	movs	r3, #0
}
 801a9d6:	4618      	mov	r0, r3
 801a9d8:	3710      	adds	r7, #16
 801a9da:	46bd      	mov	sp, r7
 801a9dc:	bd80      	pop	{r7, pc}
	...

0801a9e0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 801a9e0:	b480      	push	{r7}
 801a9e2:	b085      	sub	sp, #20
 801a9e4:	af00      	add	r7, sp, #0
 801a9e6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 801a9e8:	687b      	ldr	r3, [r7, #4]
 801a9ea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801a9ec:	2b00      	cmp	r3, #0
 801a9ee:	d108      	bne.n	801aa02 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 801a9f0:	687b      	ldr	r3, [r7, #4]
 801a9f2:	2201      	movs	r2, #1
 801a9f4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 801a9f8:	687b      	ldr	r3, [r7, #4]
 801a9fa:	2201      	movs	r2, #1
 801a9fc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 801aa00:	e031      	b.n	801aa66 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 801aa02:	2310      	movs	r3, #16
 801aa04:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801aa06:	2310      	movs	r3, #16
 801aa08:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 801aa0a:	687b      	ldr	r3, [r7, #4]
 801aa0c:	681b      	ldr	r3, [r3, #0]
 801aa0e:	689b      	ldr	r3, [r3, #8]
 801aa10:	0e5b      	lsrs	r3, r3, #25
 801aa12:	b2db      	uxtb	r3, r3
 801aa14:	f003 0307 	and.w	r3, r3, #7
 801aa18:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 801aa1a:	687b      	ldr	r3, [r7, #4]
 801aa1c:	681b      	ldr	r3, [r3, #0]
 801aa1e:	689b      	ldr	r3, [r3, #8]
 801aa20:	0f5b      	lsrs	r3, r3, #29
 801aa22:	b2db      	uxtb	r3, r3
 801aa24:	f003 0307 	and.w	r3, r3, #7
 801aa28:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801aa2a:	7bbb      	ldrb	r3, [r7, #14]
 801aa2c:	7b3a      	ldrb	r2, [r7, #12]
 801aa2e:	4911      	ldr	r1, [pc, #68]	@ (801aa74 <UARTEx_SetNbDataToProcess+0x94>)
 801aa30:	5c8a      	ldrb	r2, [r1, r2]
 801aa32:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 801aa36:	7b3a      	ldrb	r2, [r7, #12]
 801aa38:	490f      	ldr	r1, [pc, #60]	@ (801aa78 <UARTEx_SetNbDataToProcess+0x98>)
 801aa3a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801aa3c:	fb93 f3f2 	sdiv	r3, r3, r2
 801aa40:	b29a      	uxth	r2, r3
 801aa42:	687b      	ldr	r3, [r7, #4]
 801aa44:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801aa48:	7bfb      	ldrb	r3, [r7, #15]
 801aa4a:	7b7a      	ldrb	r2, [r7, #13]
 801aa4c:	4909      	ldr	r1, [pc, #36]	@ (801aa74 <UARTEx_SetNbDataToProcess+0x94>)
 801aa4e:	5c8a      	ldrb	r2, [r1, r2]
 801aa50:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 801aa54:	7b7a      	ldrb	r2, [r7, #13]
 801aa56:	4908      	ldr	r1, [pc, #32]	@ (801aa78 <UARTEx_SetNbDataToProcess+0x98>)
 801aa58:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801aa5a:	fb93 f3f2 	sdiv	r3, r3, r2
 801aa5e:	b29a      	uxth	r2, r3
 801aa60:	687b      	ldr	r3, [r7, #4]
 801aa62:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 801aa66:	bf00      	nop
 801aa68:	3714      	adds	r7, #20
 801aa6a:	46bd      	mov	sp, r7
 801aa6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aa70:	4770      	bx	lr
 801aa72:	bf00      	nop
 801aa74:	0801e8dc 	.word	0x0801e8dc
 801aa78:	0801e8e4 	.word	0x0801e8e4

0801aa7c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 801aa7c:	b580      	push	{r7, lr}
 801aa7e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 801aa80:	4904      	ldr	r1, [pc, #16]	@ (801aa94 <MX_FATFS_Init+0x18>)
 801aa82:	4805      	ldr	r0, [pc, #20]	@ (801aa98 <MX_FATFS_Init+0x1c>)
 801aa84:	f003 f8d8 	bl	801dc38 <FATFS_LinkDriver>
 801aa88:	4603      	mov	r3, r0
 801aa8a:	461a      	mov	r2, r3
 801aa8c:	4b03      	ldr	r3, [pc, #12]	@ (801aa9c <MX_FATFS_Init+0x20>)
 801aa8e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 801aa90:	bf00      	nop
 801aa92:	bd80      	pop	{r7, pc}
 801aa94:	2400054c 	.word	0x2400054c
 801aa98:	24000014 	.word	0x24000014
 801aa9c:	24000548 	.word	0x24000548

0801aaa0 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 801aaa0:	b480      	push	{r7}
 801aaa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 801aaa4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 801aaa6:	4618      	mov	r0, r3
 801aaa8:	46bd      	mov	sp, r7
 801aaaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aaae:	4770      	bx	lr

0801aab0 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 801aab0:	b580      	push	{r7, lr}
 801aab2:	b082      	sub	sp, #8
 801aab4:	af00      	add	r7, sp, #0
 801aab6:	4603      	mov	r3, r0
 801aab8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 801aaba:	79fb      	ldrb	r3, [r7, #7]
 801aabc:	4618      	mov	r0, r3
 801aabe:	f7e9 fc19 	bl	80042f4 <SD_disk_initialize>
 801aac2:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 801aac4:	4618      	mov	r0, r3
 801aac6:	3708      	adds	r7, #8
 801aac8:	46bd      	mov	sp, r7
 801aaca:	bd80      	pop	{r7, pc}

0801aacc <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 801aacc:	b580      	push	{r7, lr}
 801aace:	b082      	sub	sp, #8
 801aad0:	af00      	add	r7, sp, #0
 801aad2:	4603      	mov	r3, r0
 801aad4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status(pdrv);
 801aad6:	79fb      	ldrb	r3, [r7, #7]
 801aad8:	4618      	mov	r0, r3
 801aada:	f7e9 fcf7 	bl	80044cc <SD_disk_status>
 801aade:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 801aae0:	4618      	mov	r0, r3
 801aae2:	3708      	adds	r7, #8
 801aae4:	46bd      	mov	sp, r7
 801aae6:	bd80      	pop	{r7, pc}

0801aae8 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 801aae8:	b580      	push	{r7, lr}
 801aaea:	b084      	sub	sp, #16
 801aaec:	af00      	add	r7, sp, #0
 801aaee:	60b9      	str	r1, [r7, #8]
 801aaf0:	607a      	str	r2, [r7, #4]
 801aaf2:	603b      	str	r3, [r7, #0]
 801aaf4:	4603      	mov	r3, r0
 801aaf6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 801aaf8:	7bf8      	ldrb	r0, [r7, #15]
 801aafa:	683b      	ldr	r3, [r7, #0]
 801aafc:	687a      	ldr	r2, [r7, #4]
 801aafe:	68b9      	ldr	r1, [r7, #8]
 801ab00:	f7e9 fcfa 	bl	80044f8 <SD_disk_read>
 801ab04:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 801ab06:	4618      	mov	r0, r3
 801ab08:	3710      	adds	r7, #16
 801ab0a:	46bd      	mov	sp, r7
 801ab0c:	bd80      	pop	{r7, pc}

0801ab0e <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 801ab0e:	b580      	push	{r7, lr}
 801ab10:	b084      	sub	sp, #16
 801ab12:	af00      	add	r7, sp, #0
 801ab14:	60b9      	str	r1, [r7, #8]
 801ab16:	607a      	str	r2, [r7, #4]
 801ab18:	603b      	str	r3, [r7, #0]
 801ab1a:	4603      	mov	r3, r0
 801ab1c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 801ab1e:	7bf8      	ldrb	r0, [r7, #15]
 801ab20:	683b      	ldr	r3, [r7, #0]
 801ab22:	687a      	ldr	r2, [r7, #4]
 801ab24:	68b9      	ldr	r1, [r7, #8]
 801ab26:	f7e9 fd51 	bl	80045cc <SD_disk_write>
 801ab2a:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 801ab2c:	4618      	mov	r0, r3
 801ab2e:	3710      	adds	r7, #16
 801ab30:	46bd      	mov	sp, r7
 801ab32:	bd80      	pop	{r7, pc}

0801ab34 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 801ab34:	b580      	push	{r7, lr}
 801ab36:	b082      	sub	sp, #8
 801ab38:	af00      	add	r7, sp, #0
 801ab3a:	4603      	mov	r3, r0
 801ab3c:	603a      	str	r2, [r7, #0]
 801ab3e:	71fb      	strb	r3, [r7, #7]
 801ab40:	460b      	mov	r3, r1
 801ab42:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */

    return SD_disk_ioctl(pdrv, cmd, buff);
 801ab44:	79b9      	ldrb	r1, [r7, #6]
 801ab46:	79fb      	ldrb	r3, [r7, #7]
 801ab48:	683a      	ldr	r2, [r7, #0]
 801ab4a:	4618      	mov	r0, r3
 801ab4c:	f7e9 fdc2 	bl	80046d4 <SD_disk_ioctl>
 801ab50:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 801ab52:	4618      	mov	r0, r3
 801ab54:	3708      	adds	r7, #8
 801ab56:	46bd      	mov	sp, r7
 801ab58:	bd80      	pop	{r7, pc}
	...

0801ab5c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 801ab5c:	b580      	push	{r7, lr}
 801ab5e:	b084      	sub	sp, #16
 801ab60:	af00      	add	r7, sp, #0
 801ab62:	4603      	mov	r3, r0
 801ab64:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 801ab66:	79fb      	ldrb	r3, [r7, #7]
 801ab68:	4a08      	ldr	r2, [pc, #32]	@ (801ab8c <disk_status+0x30>)
 801ab6a:	009b      	lsls	r3, r3, #2
 801ab6c:	4413      	add	r3, r2
 801ab6e:	685b      	ldr	r3, [r3, #4]
 801ab70:	685b      	ldr	r3, [r3, #4]
 801ab72:	79fa      	ldrb	r2, [r7, #7]
 801ab74:	4905      	ldr	r1, [pc, #20]	@ (801ab8c <disk_status+0x30>)
 801ab76:	440a      	add	r2, r1
 801ab78:	7a12      	ldrb	r2, [r2, #8]
 801ab7a:	4610      	mov	r0, r2
 801ab7c:	4798      	blx	r3
 801ab7e:	4603      	mov	r3, r0
 801ab80:	73fb      	strb	r3, [r7, #15]
  return stat;
 801ab82:	7bfb      	ldrb	r3, [r7, #15]
}
 801ab84:	4618      	mov	r0, r3
 801ab86:	3710      	adds	r7, #16
 801ab88:	46bd      	mov	sp, r7
 801ab8a:	bd80      	pop	{r7, pc}
 801ab8c:	24000768 	.word	0x24000768

0801ab90 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 801ab90:	b580      	push	{r7, lr}
 801ab92:	b084      	sub	sp, #16
 801ab94:	af00      	add	r7, sp, #0
 801ab96:	4603      	mov	r3, r0
 801ab98:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 801ab9a:	2300      	movs	r3, #0
 801ab9c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 801ab9e:	79fb      	ldrb	r3, [r7, #7]
 801aba0:	4a0e      	ldr	r2, [pc, #56]	@ (801abdc <disk_initialize+0x4c>)
 801aba2:	5cd3      	ldrb	r3, [r2, r3]
 801aba4:	2b00      	cmp	r3, #0
 801aba6:	d114      	bne.n	801abd2 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 801aba8:	79fb      	ldrb	r3, [r7, #7]
 801abaa:	4a0c      	ldr	r2, [pc, #48]	@ (801abdc <disk_initialize+0x4c>)
 801abac:	009b      	lsls	r3, r3, #2
 801abae:	4413      	add	r3, r2
 801abb0:	685b      	ldr	r3, [r3, #4]
 801abb2:	681b      	ldr	r3, [r3, #0]
 801abb4:	79fa      	ldrb	r2, [r7, #7]
 801abb6:	4909      	ldr	r1, [pc, #36]	@ (801abdc <disk_initialize+0x4c>)
 801abb8:	440a      	add	r2, r1
 801abba:	7a12      	ldrb	r2, [r2, #8]
 801abbc:	4610      	mov	r0, r2
 801abbe:	4798      	blx	r3
 801abc0:	4603      	mov	r3, r0
 801abc2:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 801abc4:	7bfb      	ldrb	r3, [r7, #15]
 801abc6:	2b00      	cmp	r3, #0
 801abc8:	d103      	bne.n	801abd2 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 801abca:	79fb      	ldrb	r3, [r7, #7]
 801abcc:	4a03      	ldr	r2, [pc, #12]	@ (801abdc <disk_initialize+0x4c>)
 801abce:	2101      	movs	r1, #1
 801abd0:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 801abd2:	7bfb      	ldrb	r3, [r7, #15]
}
 801abd4:	4618      	mov	r0, r3
 801abd6:	3710      	adds	r7, #16
 801abd8:	46bd      	mov	sp, r7
 801abda:	bd80      	pop	{r7, pc}
 801abdc:	24000768 	.word	0x24000768

0801abe0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 801abe0:	b590      	push	{r4, r7, lr}
 801abe2:	b087      	sub	sp, #28
 801abe4:	af00      	add	r7, sp, #0
 801abe6:	60b9      	str	r1, [r7, #8]
 801abe8:	607a      	str	r2, [r7, #4]
 801abea:	603b      	str	r3, [r7, #0]
 801abec:	4603      	mov	r3, r0
 801abee:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 801abf0:	7bfb      	ldrb	r3, [r7, #15]
 801abf2:	4a0a      	ldr	r2, [pc, #40]	@ (801ac1c <disk_read+0x3c>)
 801abf4:	009b      	lsls	r3, r3, #2
 801abf6:	4413      	add	r3, r2
 801abf8:	685b      	ldr	r3, [r3, #4]
 801abfa:	689c      	ldr	r4, [r3, #8]
 801abfc:	7bfb      	ldrb	r3, [r7, #15]
 801abfe:	4a07      	ldr	r2, [pc, #28]	@ (801ac1c <disk_read+0x3c>)
 801ac00:	4413      	add	r3, r2
 801ac02:	7a18      	ldrb	r0, [r3, #8]
 801ac04:	683b      	ldr	r3, [r7, #0]
 801ac06:	687a      	ldr	r2, [r7, #4]
 801ac08:	68b9      	ldr	r1, [r7, #8]
 801ac0a:	47a0      	blx	r4
 801ac0c:	4603      	mov	r3, r0
 801ac0e:	75fb      	strb	r3, [r7, #23]
  return res;
 801ac10:	7dfb      	ldrb	r3, [r7, #23]
}
 801ac12:	4618      	mov	r0, r3
 801ac14:	371c      	adds	r7, #28
 801ac16:	46bd      	mov	sp, r7
 801ac18:	bd90      	pop	{r4, r7, pc}
 801ac1a:	bf00      	nop
 801ac1c:	24000768 	.word	0x24000768

0801ac20 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 801ac20:	b590      	push	{r4, r7, lr}
 801ac22:	b087      	sub	sp, #28
 801ac24:	af00      	add	r7, sp, #0
 801ac26:	60b9      	str	r1, [r7, #8]
 801ac28:	607a      	str	r2, [r7, #4]
 801ac2a:	603b      	str	r3, [r7, #0]
 801ac2c:	4603      	mov	r3, r0
 801ac2e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 801ac30:	7bfb      	ldrb	r3, [r7, #15]
 801ac32:	4a0a      	ldr	r2, [pc, #40]	@ (801ac5c <disk_write+0x3c>)
 801ac34:	009b      	lsls	r3, r3, #2
 801ac36:	4413      	add	r3, r2
 801ac38:	685b      	ldr	r3, [r3, #4]
 801ac3a:	68dc      	ldr	r4, [r3, #12]
 801ac3c:	7bfb      	ldrb	r3, [r7, #15]
 801ac3e:	4a07      	ldr	r2, [pc, #28]	@ (801ac5c <disk_write+0x3c>)
 801ac40:	4413      	add	r3, r2
 801ac42:	7a18      	ldrb	r0, [r3, #8]
 801ac44:	683b      	ldr	r3, [r7, #0]
 801ac46:	687a      	ldr	r2, [r7, #4]
 801ac48:	68b9      	ldr	r1, [r7, #8]
 801ac4a:	47a0      	blx	r4
 801ac4c:	4603      	mov	r3, r0
 801ac4e:	75fb      	strb	r3, [r7, #23]
  return res;
 801ac50:	7dfb      	ldrb	r3, [r7, #23]
}
 801ac52:	4618      	mov	r0, r3
 801ac54:	371c      	adds	r7, #28
 801ac56:	46bd      	mov	sp, r7
 801ac58:	bd90      	pop	{r4, r7, pc}
 801ac5a:	bf00      	nop
 801ac5c:	24000768 	.word	0x24000768

0801ac60 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 801ac60:	b580      	push	{r7, lr}
 801ac62:	b084      	sub	sp, #16
 801ac64:	af00      	add	r7, sp, #0
 801ac66:	4603      	mov	r3, r0
 801ac68:	603a      	str	r2, [r7, #0]
 801ac6a:	71fb      	strb	r3, [r7, #7]
 801ac6c:	460b      	mov	r3, r1
 801ac6e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 801ac70:	79fb      	ldrb	r3, [r7, #7]
 801ac72:	4a09      	ldr	r2, [pc, #36]	@ (801ac98 <disk_ioctl+0x38>)
 801ac74:	009b      	lsls	r3, r3, #2
 801ac76:	4413      	add	r3, r2
 801ac78:	685b      	ldr	r3, [r3, #4]
 801ac7a:	691b      	ldr	r3, [r3, #16]
 801ac7c:	79fa      	ldrb	r2, [r7, #7]
 801ac7e:	4906      	ldr	r1, [pc, #24]	@ (801ac98 <disk_ioctl+0x38>)
 801ac80:	440a      	add	r2, r1
 801ac82:	7a10      	ldrb	r0, [r2, #8]
 801ac84:	79b9      	ldrb	r1, [r7, #6]
 801ac86:	683a      	ldr	r2, [r7, #0]
 801ac88:	4798      	blx	r3
 801ac8a:	4603      	mov	r3, r0
 801ac8c:	73fb      	strb	r3, [r7, #15]
  return res;
 801ac8e:	7bfb      	ldrb	r3, [r7, #15]
}
 801ac90:	4618      	mov	r0, r3
 801ac92:	3710      	adds	r7, #16
 801ac94:	46bd      	mov	sp, r7
 801ac96:	bd80      	pop	{r7, pc}
 801ac98:	24000768 	.word	0x24000768

0801ac9c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 801ac9c:	b480      	push	{r7}
 801ac9e:	b085      	sub	sp, #20
 801aca0:	af00      	add	r7, sp, #0
 801aca2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 801aca4:	687b      	ldr	r3, [r7, #4]
 801aca6:	3301      	adds	r3, #1
 801aca8:	781b      	ldrb	r3, [r3, #0]
 801acaa:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 801acac:	89fb      	ldrh	r3, [r7, #14]
 801acae:	021b      	lsls	r3, r3, #8
 801acb0:	b21a      	sxth	r2, r3
 801acb2:	687b      	ldr	r3, [r7, #4]
 801acb4:	781b      	ldrb	r3, [r3, #0]
 801acb6:	b21b      	sxth	r3, r3
 801acb8:	4313      	orrs	r3, r2
 801acba:	b21b      	sxth	r3, r3
 801acbc:	81fb      	strh	r3, [r7, #14]
	return rv;
 801acbe:	89fb      	ldrh	r3, [r7, #14]
}
 801acc0:	4618      	mov	r0, r3
 801acc2:	3714      	adds	r7, #20
 801acc4:	46bd      	mov	sp, r7
 801acc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801acca:	4770      	bx	lr

0801accc <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 801accc:	b480      	push	{r7}
 801acce:	b085      	sub	sp, #20
 801acd0:	af00      	add	r7, sp, #0
 801acd2:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 801acd4:	687b      	ldr	r3, [r7, #4]
 801acd6:	3303      	adds	r3, #3
 801acd8:	781b      	ldrb	r3, [r3, #0]
 801acda:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 801acdc:	68fb      	ldr	r3, [r7, #12]
 801acde:	021b      	lsls	r3, r3, #8
 801ace0:	687a      	ldr	r2, [r7, #4]
 801ace2:	3202      	adds	r2, #2
 801ace4:	7812      	ldrb	r2, [r2, #0]
 801ace6:	4313      	orrs	r3, r2
 801ace8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 801acea:	68fb      	ldr	r3, [r7, #12]
 801acec:	021b      	lsls	r3, r3, #8
 801acee:	687a      	ldr	r2, [r7, #4]
 801acf0:	3201      	adds	r2, #1
 801acf2:	7812      	ldrb	r2, [r2, #0]
 801acf4:	4313      	orrs	r3, r2
 801acf6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 801acf8:	68fb      	ldr	r3, [r7, #12]
 801acfa:	021b      	lsls	r3, r3, #8
 801acfc:	687a      	ldr	r2, [r7, #4]
 801acfe:	7812      	ldrb	r2, [r2, #0]
 801ad00:	4313      	orrs	r3, r2
 801ad02:	60fb      	str	r3, [r7, #12]
	return rv;
 801ad04:	68fb      	ldr	r3, [r7, #12]
}
 801ad06:	4618      	mov	r0, r3
 801ad08:	3714      	adds	r7, #20
 801ad0a:	46bd      	mov	sp, r7
 801ad0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ad10:	4770      	bx	lr

0801ad12 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 801ad12:	b480      	push	{r7}
 801ad14:	b083      	sub	sp, #12
 801ad16:	af00      	add	r7, sp, #0
 801ad18:	6078      	str	r0, [r7, #4]
 801ad1a:	460b      	mov	r3, r1
 801ad1c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 801ad1e:	687b      	ldr	r3, [r7, #4]
 801ad20:	1c5a      	adds	r2, r3, #1
 801ad22:	607a      	str	r2, [r7, #4]
 801ad24:	887a      	ldrh	r2, [r7, #2]
 801ad26:	b2d2      	uxtb	r2, r2
 801ad28:	701a      	strb	r2, [r3, #0]
 801ad2a:	887b      	ldrh	r3, [r7, #2]
 801ad2c:	0a1b      	lsrs	r3, r3, #8
 801ad2e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 801ad30:	687b      	ldr	r3, [r7, #4]
 801ad32:	1c5a      	adds	r2, r3, #1
 801ad34:	607a      	str	r2, [r7, #4]
 801ad36:	887a      	ldrh	r2, [r7, #2]
 801ad38:	b2d2      	uxtb	r2, r2
 801ad3a:	701a      	strb	r2, [r3, #0]
}
 801ad3c:	bf00      	nop
 801ad3e:	370c      	adds	r7, #12
 801ad40:	46bd      	mov	sp, r7
 801ad42:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ad46:	4770      	bx	lr

0801ad48 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 801ad48:	b480      	push	{r7}
 801ad4a:	b083      	sub	sp, #12
 801ad4c:	af00      	add	r7, sp, #0
 801ad4e:	6078      	str	r0, [r7, #4]
 801ad50:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801ad52:	687b      	ldr	r3, [r7, #4]
 801ad54:	1c5a      	adds	r2, r3, #1
 801ad56:	607a      	str	r2, [r7, #4]
 801ad58:	683a      	ldr	r2, [r7, #0]
 801ad5a:	b2d2      	uxtb	r2, r2
 801ad5c:	701a      	strb	r2, [r3, #0]
 801ad5e:	683b      	ldr	r3, [r7, #0]
 801ad60:	0a1b      	lsrs	r3, r3, #8
 801ad62:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801ad64:	687b      	ldr	r3, [r7, #4]
 801ad66:	1c5a      	adds	r2, r3, #1
 801ad68:	607a      	str	r2, [r7, #4]
 801ad6a:	683a      	ldr	r2, [r7, #0]
 801ad6c:	b2d2      	uxtb	r2, r2
 801ad6e:	701a      	strb	r2, [r3, #0]
 801ad70:	683b      	ldr	r3, [r7, #0]
 801ad72:	0a1b      	lsrs	r3, r3, #8
 801ad74:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801ad76:	687b      	ldr	r3, [r7, #4]
 801ad78:	1c5a      	adds	r2, r3, #1
 801ad7a:	607a      	str	r2, [r7, #4]
 801ad7c:	683a      	ldr	r2, [r7, #0]
 801ad7e:	b2d2      	uxtb	r2, r2
 801ad80:	701a      	strb	r2, [r3, #0]
 801ad82:	683b      	ldr	r3, [r7, #0]
 801ad84:	0a1b      	lsrs	r3, r3, #8
 801ad86:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 801ad88:	687b      	ldr	r3, [r7, #4]
 801ad8a:	1c5a      	adds	r2, r3, #1
 801ad8c:	607a      	str	r2, [r7, #4]
 801ad8e:	683a      	ldr	r2, [r7, #0]
 801ad90:	b2d2      	uxtb	r2, r2
 801ad92:	701a      	strb	r2, [r3, #0]
}
 801ad94:	bf00      	nop
 801ad96:	370c      	adds	r7, #12
 801ad98:	46bd      	mov	sp, r7
 801ad9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ad9e:	4770      	bx	lr

0801ada0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 801ada0:	b480      	push	{r7}
 801ada2:	b087      	sub	sp, #28
 801ada4:	af00      	add	r7, sp, #0
 801ada6:	60f8      	str	r0, [r7, #12]
 801ada8:	60b9      	str	r1, [r7, #8]
 801adaa:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 801adac:	68fb      	ldr	r3, [r7, #12]
 801adae:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 801adb0:	68bb      	ldr	r3, [r7, #8]
 801adb2:	613b      	str	r3, [r7, #16]

	if (cnt) {
 801adb4:	687b      	ldr	r3, [r7, #4]
 801adb6:	2b00      	cmp	r3, #0
 801adb8:	d00d      	beq.n	801add6 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 801adba:	693a      	ldr	r2, [r7, #16]
 801adbc:	1c53      	adds	r3, r2, #1
 801adbe:	613b      	str	r3, [r7, #16]
 801adc0:	697b      	ldr	r3, [r7, #20]
 801adc2:	1c59      	adds	r1, r3, #1
 801adc4:	6179      	str	r1, [r7, #20]
 801adc6:	7812      	ldrb	r2, [r2, #0]
 801adc8:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 801adca:	687b      	ldr	r3, [r7, #4]
 801adcc:	3b01      	subs	r3, #1
 801adce:	607b      	str	r3, [r7, #4]
 801add0:	687b      	ldr	r3, [r7, #4]
 801add2:	2b00      	cmp	r3, #0
 801add4:	d1f1      	bne.n	801adba <mem_cpy+0x1a>
	}
}
 801add6:	bf00      	nop
 801add8:	371c      	adds	r7, #28
 801adda:	46bd      	mov	sp, r7
 801addc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ade0:	4770      	bx	lr

0801ade2 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 801ade2:	b480      	push	{r7}
 801ade4:	b087      	sub	sp, #28
 801ade6:	af00      	add	r7, sp, #0
 801ade8:	60f8      	str	r0, [r7, #12]
 801adea:	60b9      	str	r1, [r7, #8]
 801adec:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 801adee:	68fb      	ldr	r3, [r7, #12]
 801adf0:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 801adf2:	697b      	ldr	r3, [r7, #20]
 801adf4:	1c5a      	adds	r2, r3, #1
 801adf6:	617a      	str	r2, [r7, #20]
 801adf8:	68ba      	ldr	r2, [r7, #8]
 801adfa:	b2d2      	uxtb	r2, r2
 801adfc:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 801adfe:	687b      	ldr	r3, [r7, #4]
 801ae00:	3b01      	subs	r3, #1
 801ae02:	607b      	str	r3, [r7, #4]
 801ae04:	687b      	ldr	r3, [r7, #4]
 801ae06:	2b00      	cmp	r3, #0
 801ae08:	d1f3      	bne.n	801adf2 <mem_set+0x10>
}
 801ae0a:	bf00      	nop
 801ae0c:	bf00      	nop
 801ae0e:	371c      	adds	r7, #28
 801ae10:	46bd      	mov	sp, r7
 801ae12:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ae16:	4770      	bx	lr

0801ae18 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 801ae18:	b480      	push	{r7}
 801ae1a:	b089      	sub	sp, #36	@ 0x24
 801ae1c:	af00      	add	r7, sp, #0
 801ae1e:	60f8      	str	r0, [r7, #12]
 801ae20:	60b9      	str	r1, [r7, #8]
 801ae22:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 801ae24:	68fb      	ldr	r3, [r7, #12]
 801ae26:	61fb      	str	r3, [r7, #28]
 801ae28:	68bb      	ldr	r3, [r7, #8]
 801ae2a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 801ae2c:	2300      	movs	r3, #0
 801ae2e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 801ae30:	69fb      	ldr	r3, [r7, #28]
 801ae32:	1c5a      	adds	r2, r3, #1
 801ae34:	61fa      	str	r2, [r7, #28]
 801ae36:	781b      	ldrb	r3, [r3, #0]
 801ae38:	4619      	mov	r1, r3
 801ae3a:	69bb      	ldr	r3, [r7, #24]
 801ae3c:	1c5a      	adds	r2, r3, #1
 801ae3e:	61ba      	str	r2, [r7, #24]
 801ae40:	781b      	ldrb	r3, [r3, #0]
 801ae42:	1acb      	subs	r3, r1, r3
 801ae44:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 801ae46:	687b      	ldr	r3, [r7, #4]
 801ae48:	3b01      	subs	r3, #1
 801ae4a:	607b      	str	r3, [r7, #4]
 801ae4c:	687b      	ldr	r3, [r7, #4]
 801ae4e:	2b00      	cmp	r3, #0
 801ae50:	d002      	beq.n	801ae58 <mem_cmp+0x40>
 801ae52:	697b      	ldr	r3, [r7, #20]
 801ae54:	2b00      	cmp	r3, #0
 801ae56:	d0eb      	beq.n	801ae30 <mem_cmp+0x18>

	return r;
 801ae58:	697b      	ldr	r3, [r7, #20]
}
 801ae5a:	4618      	mov	r0, r3
 801ae5c:	3724      	adds	r7, #36	@ 0x24
 801ae5e:	46bd      	mov	sp, r7
 801ae60:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ae64:	4770      	bx	lr

0801ae66 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 801ae66:	b480      	push	{r7}
 801ae68:	b083      	sub	sp, #12
 801ae6a:	af00      	add	r7, sp, #0
 801ae6c:	6078      	str	r0, [r7, #4]
 801ae6e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 801ae70:	e002      	b.n	801ae78 <chk_chr+0x12>
 801ae72:	687b      	ldr	r3, [r7, #4]
 801ae74:	3301      	adds	r3, #1
 801ae76:	607b      	str	r3, [r7, #4]
 801ae78:	687b      	ldr	r3, [r7, #4]
 801ae7a:	781b      	ldrb	r3, [r3, #0]
 801ae7c:	2b00      	cmp	r3, #0
 801ae7e:	d005      	beq.n	801ae8c <chk_chr+0x26>
 801ae80:	687b      	ldr	r3, [r7, #4]
 801ae82:	781b      	ldrb	r3, [r3, #0]
 801ae84:	461a      	mov	r2, r3
 801ae86:	683b      	ldr	r3, [r7, #0]
 801ae88:	4293      	cmp	r3, r2
 801ae8a:	d1f2      	bne.n	801ae72 <chk_chr+0xc>
	return *str;
 801ae8c:	687b      	ldr	r3, [r7, #4]
 801ae8e:	781b      	ldrb	r3, [r3, #0]
}
 801ae90:	4618      	mov	r0, r3
 801ae92:	370c      	adds	r7, #12
 801ae94:	46bd      	mov	sp, r7
 801ae96:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ae9a:	4770      	bx	lr

0801ae9c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 801ae9c:	b480      	push	{r7}
 801ae9e:	b085      	sub	sp, #20
 801aea0:	af00      	add	r7, sp, #0
 801aea2:	6078      	str	r0, [r7, #4]
 801aea4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 801aea6:	2300      	movs	r3, #0
 801aea8:	60bb      	str	r3, [r7, #8]
 801aeaa:	68bb      	ldr	r3, [r7, #8]
 801aeac:	60fb      	str	r3, [r7, #12]
 801aeae:	e029      	b.n	801af04 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 801aeb0:	4a27      	ldr	r2, [pc, #156]	@ (801af50 <chk_lock+0xb4>)
 801aeb2:	68fb      	ldr	r3, [r7, #12]
 801aeb4:	011b      	lsls	r3, r3, #4
 801aeb6:	4413      	add	r3, r2
 801aeb8:	681b      	ldr	r3, [r3, #0]
 801aeba:	2b00      	cmp	r3, #0
 801aebc:	d01d      	beq.n	801aefa <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801aebe:	4a24      	ldr	r2, [pc, #144]	@ (801af50 <chk_lock+0xb4>)
 801aec0:	68fb      	ldr	r3, [r7, #12]
 801aec2:	011b      	lsls	r3, r3, #4
 801aec4:	4413      	add	r3, r2
 801aec6:	681a      	ldr	r2, [r3, #0]
 801aec8:	687b      	ldr	r3, [r7, #4]
 801aeca:	681b      	ldr	r3, [r3, #0]
 801aecc:	429a      	cmp	r2, r3
 801aece:	d116      	bne.n	801aefe <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 801aed0:	4a1f      	ldr	r2, [pc, #124]	@ (801af50 <chk_lock+0xb4>)
 801aed2:	68fb      	ldr	r3, [r7, #12]
 801aed4:	011b      	lsls	r3, r3, #4
 801aed6:	4413      	add	r3, r2
 801aed8:	3304      	adds	r3, #4
 801aeda:	681a      	ldr	r2, [r3, #0]
 801aedc:	687b      	ldr	r3, [r7, #4]
 801aede:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801aee0:	429a      	cmp	r2, r3
 801aee2:	d10c      	bne.n	801aefe <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 801aee4:	4a1a      	ldr	r2, [pc, #104]	@ (801af50 <chk_lock+0xb4>)
 801aee6:	68fb      	ldr	r3, [r7, #12]
 801aee8:	011b      	lsls	r3, r3, #4
 801aeea:	4413      	add	r3, r2
 801aeec:	3308      	adds	r3, #8
 801aeee:	681a      	ldr	r2, [r3, #0]
 801aef0:	687b      	ldr	r3, [r7, #4]
 801aef2:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 801aef4:	429a      	cmp	r2, r3
 801aef6:	d102      	bne.n	801aefe <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 801aef8:	e007      	b.n	801af0a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 801aefa:	2301      	movs	r3, #1
 801aefc:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 801aefe:	68fb      	ldr	r3, [r7, #12]
 801af00:	3301      	adds	r3, #1
 801af02:	60fb      	str	r3, [r7, #12]
 801af04:	68fb      	ldr	r3, [r7, #12]
 801af06:	2b00      	cmp	r3, #0
 801af08:	d0d2      	beq.n	801aeb0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 801af0a:	68fb      	ldr	r3, [r7, #12]
 801af0c:	2b01      	cmp	r3, #1
 801af0e:	d109      	bne.n	801af24 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 801af10:	68bb      	ldr	r3, [r7, #8]
 801af12:	2b00      	cmp	r3, #0
 801af14:	d102      	bne.n	801af1c <chk_lock+0x80>
 801af16:	683b      	ldr	r3, [r7, #0]
 801af18:	2b02      	cmp	r3, #2
 801af1a:	d101      	bne.n	801af20 <chk_lock+0x84>
 801af1c:	2300      	movs	r3, #0
 801af1e:	e010      	b.n	801af42 <chk_lock+0xa6>
 801af20:	2312      	movs	r3, #18
 801af22:	e00e      	b.n	801af42 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 801af24:	683b      	ldr	r3, [r7, #0]
 801af26:	2b00      	cmp	r3, #0
 801af28:	d108      	bne.n	801af3c <chk_lock+0xa0>
 801af2a:	4a09      	ldr	r2, [pc, #36]	@ (801af50 <chk_lock+0xb4>)
 801af2c:	68fb      	ldr	r3, [r7, #12]
 801af2e:	011b      	lsls	r3, r3, #4
 801af30:	4413      	add	r3, r2
 801af32:	330c      	adds	r3, #12
 801af34:	881b      	ldrh	r3, [r3, #0]
 801af36:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801af3a:	d101      	bne.n	801af40 <chk_lock+0xa4>
 801af3c:	2310      	movs	r3, #16
 801af3e:	e000      	b.n	801af42 <chk_lock+0xa6>
 801af40:	2300      	movs	r3, #0
}
 801af42:	4618      	mov	r0, r3
 801af44:	3714      	adds	r7, #20
 801af46:	46bd      	mov	sp, r7
 801af48:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af4c:	4770      	bx	lr
 801af4e:	bf00      	nop
 801af50:	24000558 	.word	0x24000558

0801af54 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 801af54:	b480      	push	{r7}
 801af56:	b083      	sub	sp, #12
 801af58:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801af5a:	2300      	movs	r3, #0
 801af5c:	607b      	str	r3, [r7, #4]
 801af5e:	e002      	b.n	801af66 <enq_lock+0x12>
 801af60:	687b      	ldr	r3, [r7, #4]
 801af62:	3301      	adds	r3, #1
 801af64:	607b      	str	r3, [r7, #4]
 801af66:	687b      	ldr	r3, [r7, #4]
 801af68:	2b00      	cmp	r3, #0
 801af6a:	d106      	bne.n	801af7a <enq_lock+0x26>
 801af6c:	4a09      	ldr	r2, [pc, #36]	@ (801af94 <enq_lock+0x40>)
 801af6e:	687b      	ldr	r3, [r7, #4]
 801af70:	011b      	lsls	r3, r3, #4
 801af72:	4413      	add	r3, r2
 801af74:	681b      	ldr	r3, [r3, #0]
 801af76:	2b00      	cmp	r3, #0
 801af78:	d1f2      	bne.n	801af60 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 801af7a:	687b      	ldr	r3, [r7, #4]
 801af7c:	2b01      	cmp	r3, #1
 801af7e:	bf14      	ite	ne
 801af80:	2301      	movne	r3, #1
 801af82:	2300      	moveq	r3, #0
 801af84:	b2db      	uxtb	r3, r3
}
 801af86:	4618      	mov	r0, r3
 801af88:	370c      	adds	r7, #12
 801af8a:	46bd      	mov	sp, r7
 801af8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af90:	4770      	bx	lr
 801af92:	bf00      	nop
 801af94:	24000558 	.word	0x24000558

0801af98 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 801af98:	b480      	push	{r7}
 801af9a:	b085      	sub	sp, #20
 801af9c:	af00      	add	r7, sp, #0
 801af9e:	6078      	str	r0, [r7, #4]
 801afa0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801afa2:	2300      	movs	r3, #0
 801afa4:	60fb      	str	r3, [r7, #12]
 801afa6:	e01f      	b.n	801afe8 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 801afa8:	4a41      	ldr	r2, [pc, #260]	@ (801b0b0 <inc_lock+0x118>)
 801afaa:	68fb      	ldr	r3, [r7, #12]
 801afac:	011b      	lsls	r3, r3, #4
 801afae:	4413      	add	r3, r2
 801afb0:	681a      	ldr	r2, [r3, #0]
 801afb2:	687b      	ldr	r3, [r7, #4]
 801afb4:	681b      	ldr	r3, [r3, #0]
 801afb6:	429a      	cmp	r2, r3
 801afb8:	d113      	bne.n	801afe2 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 801afba:	4a3d      	ldr	r2, [pc, #244]	@ (801b0b0 <inc_lock+0x118>)
 801afbc:	68fb      	ldr	r3, [r7, #12]
 801afbe:	011b      	lsls	r3, r3, #4
 801afc0:	4413      	add	r3, r2
 801afc2:	3304      	adds	r3, #4
 801afc4:	681a      	ldr	r2, [r3, #0]
 801afc6:	687b      	ldr	r3, [r7, #4]
 801afc8:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 801afca:	429a      	cmp	r2, r3
 801afcc:	d109      	bne.n	801afe2 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 801afce:	4a38      	ldr	r2, [pc, #224]	@ (801b0b0 <inc_lock+0x118>)
 801afd0:	68fb      	ldr	r3, [r7, #12]
 801afd2:	011b      	lsls	r3, r3, #4
 801afd4:	4413      	add	r3, r2
 801afd6:	3308      	adds	r3, #8
 801afd8:	681a      	ldr	r2, [r3, #0]
 801afda:	687b      	ldr	r3, [r7, #4]
 801afdc:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 801afde:	429a      	cmp	r2, r3
 801afe0:	d006      	beq.n	801aff0 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801afe2:	68fb      	ldr	r3, [r7, #12]
 801afe4:	3301      	adds	r3, #1
 801afe6:	60fb      	str	r3, [r7, #12]
 801afe8:	68fb      	ldr	r3, [r7, #12]
 801afea:	2b00      	cmp	r3, #0
 801afec:	d0dc      	beq.n	801afa8 <inc_lock+0x10>
 801afee:	e000      	b.n	801aff2 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 801aff0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 801aff2:	68fb      	ldr	r3, [r7, #12]
 801aff4:	2b01      	cmp	r3, #1
 801aff6:	d132      	bne.n	801b05e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801aff8:	2300      	movs	r3, #0
 801affa:	60fb      	str	r3, [r7, #12]
 801affc:	e002      	b.n	801b004 <inc_lock+0x6c>
 801affe:	68fb      	ldr	r3, [r7, #12]
 801b000:	3301      	adds	r3, #1
 801b002:	60fb      	str	r3, [r7, #12]
 801b004:	68fb      	ldr	r3, [r7, #12]
 801b006:	2b00      	cmp	r3, #0
 801b008:	d106      	bne.n	801b018 <inc_lock+0x80>
 801b00a:	4a29      	ldr	r2, [pc, #164]	@ (801b0b0 <inc_lock+0x118>)
 801b00c:	68fb      	ldr	r3, [r7, #12]
 801b00e:	011b      	lsls	r3, r3, #4
 801b010:	4413      	add	r3, r2
 801b012:	681b      	ldr	r3, [r3, #0]
 801b014:	2b00      	cmp	r3, #0
 801b016:	d1f2      	bne.n	801affe <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 801b018:	68fb      	ldr	r3, [r7, #12]
 801b01a:	2b01      	cmp	r3, #1
 801b01c:	d101      	bne.n	801b022 <inc_lock+0x8a>
 801b01e:	2300      	movs	r3, #0
 801b020:	e040      	b.n	801b0a4 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 801b022:	687b      	ldr	r3, [r7, #4]
 801b024:	681a      	ldr	r2, [r3, #0]
 801b026:	4922      	ldr	r1, [pc, #136]	@ (801b0b0 <inc_lock+0x118>)
 801b028:	68fb      	ldr	r3, [r7, #12]
 801b02a:	011b      	lsls	r3, r3, #4
 801b02c:	440b      	add	r3, r1
 801b02e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 801b030:	687b      	ldr	r3, [r7, #4]
 801b032:	689a      	ldr	r2, [r3, #8]
 801b034:	491e      	ldr	r1, [pc, #120]	@ (801b0b0 <inc_lock+0x118>)
 801b036:	68fb      	ldr	r3, [r7, #12]
 801b038:	011b      	lsls	r3, r3, #4
 801b03a:	440b      	add	r3, r1
 801b03c:	3304      	adds	r3, #4
 801b03e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 801b040:	687b      	ldr	r3, [r7, #4]
 801b042:	695a      	ldr	r2, [r3, #20]
 801b044:	491a      	ldr	r1, [pc, #104]	@ (801b0b0 <inc_lock+0x118>)
 801b046:	68fb      	ldr	r3, [r7, #12]
 801b048:	011b      	lsls	r3, r3, #4
 801b04a:	440b      	add	r3, r1
 801b04c:	3308      	adds	r3, #8
 801b04e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 801b050:	4a17      	ldr	r2, [pc, #92]	@ (801b0b0 <inc_lock+0x118>)
 801b052:	68fb      	ldr	r3, [r7, #12]
 801b054:	011b      	lsls	r3, r3, #4
 801b056:	4413      	add	r3, r2
 801b058:	330c      	adds	r3, #12
 801b05a:	2200      	movs	r2, #0
 801b05c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 801b05e:	683b      	ldr	r3, [r7, #0]
 801b060:	2b00      	cmp	r3, #0
 801b062:	d009      	beq.n	801b078 <inc_lock+0xe0>
 801b064:	4a12      	ldr	r2, [pc, #72]	@ (801b0b0 <inc_lock+0x118>)
 801b066:	68fb      	ldr	r3, [r7, #12]
 801b068:	011b      	lsls	r3, r3, #4
 801b06a:	4413      	add	r3, r2
 801b06c:	330c      	adds	r3, #12
 801b06e:	881b      	ldrh	r3, [r3, #0]
 801b070:	2b00      	cmp	r3, #0
 801b072:	d001      	beq.n	801b078 <inc_lock+0xe0>
 801b074:	2300      	movs	r3, #0
 801b076:	e015      	b.n	801b0a4 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 801b078:	683b      	ldr	r3, [r7, #0]
 801b07a:	2b00      	cmp	r3, #0
 801b07c:	d108      	bne.n	801b090 <inc_lock+0xf8>
 801b07e:	4a0c      	ldr	r2, [pc, #48]	@ (801b0b0 <inc_lock+0x118>)
 801b080:	68fb      	ldr	r3, [r7, #12]
 801b082:	011b      	lsls	r3, r3, #4
 801b084:	4413      	add	r3, r2
 801b086:	330c      	adds	r3, #12
 801b088:	881b      	ldrh	r3, [r3, #0]
 801b08a:	3301      	adds	r3, #1
 801b08c:	b29a      	uxth	r2, r3
 801b08e:	e001      	b.n	801b094 <inc_lock+0xfc>
 801b090:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801b094:	4906      	ldr	r1, [pc, #24]	@ (801b0b0 <inc_lock+0x118>)
 801b096:	68fb      	ldr	r3, [r7, #12]
 801b098:	011b      	lsls	r3, r3, #4
 801b09a:	440b      	add	r3, r1
 801b09c:	330c      	adds	r3, #12
 801b09e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 801b0a0:	68fb      	ldr	r3, [r7, #12]
 801b0a2:	3301      	adds	r3, #1
}
 801b0a4:	4618      	mov	r0, r3
 801b0a6:	3714      	adds	r7, #20
 801b0a8:	46bd      	mov	sp, r7
 801b0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b0ae:	4770      	bx	lr
 801b0b0:	24000558 	.word	0x24000558

0801b0b4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 801b0b4:	b480      	push	{r7}
 801b0b6:	b085      	sub	sp, #20
 801b0b8:	af00      	add	r7, sp, #0
 801b0ba:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 801b0bc:	687b      	ldr	r3, [r7, #4]
 801b0be:	3b01      	subs	r3, #1
 801b0c0:	607b      	str	r3, [r7, #4]
 801b0c2:	687b      	ldr	r3, [r7, #4]
 801b0c4:	2b00      	cmp	r3, #0
 801b0c6:	d125      	bne.n	801b114 <dec_lock+0x60>
		n = Files[i].ctr;
 801b0c8:	4a17      	ldr	r2, [pc, #92]	@ (801b128 <dec_lock+0x74>)
 801b0ca:	687b      	ldr	r3, [r7, #4]
 801b0cc:	011b      	lsls	r3, r3, #4
 801b0ce:	4413      	add	r3, r2
 801b0d0:	330c      	adds	r3, #12
 801b0d2:	881b      	ldrh	r3, [r3, #0]
 801b0d4:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 801b0d6:	89fb      	ldrh	r3, [r7, #14]
 801b0d8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801b0dc:	d101      	bne.n	801b0e2 <dec_lock+0x2e>
 801b0de:	2300      	movs	r3, #0
 801b0e0:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 801b0e2:	89fb      	ldrh	r3, [r7, #14]
 801b0e4:	2b00      	cmp	r3, #0
 801b0e6:	d002      	beq.n	801b0ee <dec_lock+0x3a>
 801b0e8:	89fb      	ldrh	r3, [r7, #14]
 801b0ea:	3b01      	subs	r3, #1
 801b0ec:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 801b0ee:	4a0e      	ldr	r2, [pc, #56]	@ (801b128 <dec_lock+0x74>)
 801b0f0:	687b      	ldr	r3, [r7, #4]
 801b0f2:	011b      	lsls	r3, r3, #4
 801b0f4:	4413      	add	r3, r2
 801b0f6:	330c      	adds	r3, #12
 801b0f8:	89fa      	ldrh	r2, [r7, #14]
 801b0fa:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 801b0fc:	89fb      	ldrh	r3, [r7, #14]
 801b0fe:	2b00      	cmp	r3, #0
 801b100:	d105      	bne.n	801b10e <dec_lock+0x5a>
 801b102:	4a09      	ldr	r2, [pc, #36]	@ (801b128 <dec_lock+0x74>)
 801b104:	687b      	ldr	r3, [r7, #4]
 801b106:	011b      	lsls	r3, r3, #4
 801b108:	4413      	add	r3, r2
 801b10a:	2200      	movs	r2, #0
 801b10c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 801b10e:	2300      	movs	r3, #0
 801b110:	737b      	strb	r3, [r7, #13]
 801b112:	e001      	b.n	801b118 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 801b114:	2302      	movs	r3, #2
 801b116:	737b      	strb	r3, [r7, #13]
	}
	return res;
 801b118:	7b7b      	ldrb	r3, [r7, #13]
}
 801b11a:	4618      	mov	r0, r3
 801b11c:	3714      	adds	r7, #20
 801b11e:	46bd      	mov	sp, r7
 801b120:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b124:	4770      	bx	lr
 801b126:	bf00      	nop
 801b128:	24000558 	.word	0x24000558

0801b12c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 801b12c:	b480      	push	{r7}
 801b12e:	b085      	sub	sp, #20
 801b130:	af00      	add	r7, sp, #0
 801b132:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 801b134:	2300      	movs	r3, #0
 801b136:	60fb      	str	r3, [r7, #12]
 801b138:	e010      	b.n	801b15c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 801b13a:	4a0d      	ldr	r2, [pc, #52]	@ (801b170 <clear_lock+0x44>)
 801b13c:	68fb      	ldr	r3, [r7, #12]
 801b13e:	011b      	lsls	r3, r3, #4
 801b140:	4413      	add	r3, r2
 801b142:	681b      	ldr	r3, [r3, #0]
 801b144:	687a      	ldr	r2, [r7, #4]
 801b146:	429a      	cmp	r2, r3
 801b148:	d105      	bne.n	801b156 <clear_lock+0x2a>
 801b14a:	4a09      	ldr	r2, [pc, #36]	@ (801b170 <clear_lock+0x44>)
 801b14c:	68fb      	ldr	r3, [r7, #12]
 801b14e:	011b      	lsls	r3, r3, #4
 801b150:	4413      	add	r3, r2
 801b152:	2200      	movs	r2, #0
 801b154:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 801b156:	68fb      	ldr	r3, [r7, #12]
 801b158:	3301      	adds	r3, #1
 801b15a:	60fb      	str	r3, [r7, #12]
 801b15c:	68fb      	ldr	r3, [r7, #12]
 801b15e:	2b00      	cmp	r3, #0
 801b160:	d0eb      	beq.n	801b13a <clear_lock+0xe>
	}
}
 801b162:	bf00      	nop
 801b164:	bf00      	nop
 801b166:	3714      	adds	r7, #20
 801b168:	46bd      	mov	sp, r7
 801b16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b16e:	4770      	bx	lr
 801b170:	24000558 	.word	0x24000558

0801b174 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 801b174:	b580      	push	{r7, lr}
 801b176:	b086      	sub	sp, #24
 801b178:	af00      	add	r7, sp, #0
 801b17a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 801b17c:	2300      	movs	r3, #0
 801b17e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 801b180:	687b      	ldr	r3, [r7, #4]
 801b182:	78db      	ldrb	r3, [r3, #3]
 801b184:	2b00      	cmp	r3, #0
 801b186:	d034      	beq.n	801b1f2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 801b188:	687b      	ldr	r3, [r7, #4]
 801b18a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801b18c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 801b18e:	687b      	ldr	r3, [r7, #4]
 801b190:	7858      	ldrb	r0, [r3, #1]
 801b192:	687b      	ldr	r3, [r7, #4]
 801b194:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801b198:	2301      	movs	r3, #1
 801b19a:	697a      	ldr	r2, [r7, #20]
 801b19c:	f7ff fd40 	bl	801ac20 <disk_write>
 801b1a0:	4603      	mov	r3, r0
 801b1a2:	2b00      	cmp	r3, #0
 801b1a4:	d002      	beq.n	801b1ac <sync_window+0x38>
			res = FR_DISK_ERR;
 801b1a6:	2301      	movs	r3, #1
 801b1a8:	73fb      	strb	r3, [r7, #15]
 801b1aa:	e022      	b.n	801b1f2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 801b1ac:	687b      	ldr	r3, [r7, #4]
 801b1ae:	2200      	movs	r2, #0
 801b1b0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 801b1b2:	687b      	ldr	r3, [r7, #4]
 801b1b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b1b6:	697a      	ldr	r2, [r7, #20]
 801b1b8:	1ad2      	subs	r2, r2, r3
 801b1ba:	687b      	ldr	r3, [r7, #4]
 801b1bc:	6a1b      	ldr	r3, [r3, #32]
 801b1be:	429a      	cmp	r2, r3
 801b1c0:	d217      	bcs.n	801b1f2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801b1c2:	687b      	ldr	r3, [r7, #4]
 801b1c4:	789b      	ldrb	r3, [r3, #2]
 801b1c6:	613b      	str	r3, [r7, #16]
 801b1c8:	e010      	b.n	801b1ec <sync_window+0x78>
					wsect += fs->fsize;
 801b1ca:	687b      	ldr	r3, [r7, #4]
 801b1cc:	6a1b      	ldr	r3, [r3, #32]
 801b1ce:	697a      	ldr	r2, [r7, #20]
 801b1d0:	4413      	add	r3, r2
 801b1d2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 801b1d4:	687b      	ldr	r3, [r7, #4]
 801b1d6:	7858      	ldrb	r0, [r3, #1]
 801b1d8:	687b      	ldr	r3, [r7, #4]
 801b1da:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801b1de:	2301      	movs	r3, #1
 801b1e0:	697a      	ldr	r2, [r7, #20]
 801b1e2:	f7ff fd1d 	bl	801ac20 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801b1e6:	693b      	ldr	r3, [r7, #16]
 801b1e8:	3b01      	subs	r3, #1
 801b1ea:	613b      	str	r3, [r7, #16]
 801b1ec:	693b      	ldr	r3, [r7, #16]
 801b1ee:	2b01      	cmp	r3, #1
 801b1f0:	d8eb      	bhi.n	801b1ca <sync_window+0x56>
				}
			}
		}
	}
	return res;
 801b1f2:	7bfb      	ldrb	r3, [r7, #15]
}
 801b1f4:	4618      	mov	r0, r3
 801b1f6:	3718      	adds	r7, #24
 801b1f8:	46bd      	mov	sp, r7
 801b1fa:	bd80      	pop	{r7, pc}

0801b1fc <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 801b1fc:	b580      	push	{r7, lr}
 801b1fe:	b084      	sub	sp, #16
 801b200:	af00      	add	r7, sp, #0
 801b202:	6078      	str	r0, [r7, #4]
 801b204:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 801b206:	2300      	movs	r3, #0
 801b208:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 801b20a:	687b      	ldr	r3, [r7, #4]
 801b20c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801b20e:	683a      	ldr	r2, [r7, #0]
 801b210:	429a      	cmp	r2, r3
 801b212:	d01b      	beq.n	801b24c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 801b214:	6878      	ldr	r0, [r7, #4]
 801b216:	f7ff ffad 	bl	801b174 <sync_window>
 801b21a:	4603      	mov	r3, r0
 801b21c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 801b21e:	7bfb      	ldrb	r3, [r7, #15]
 801b220:	2b00      	cmp	r3, #0
 801b222:	d113      	bne.n	801b24c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 801b224:	687b      	ldr	r3, [r7, #4]
 801b226:	7858      	ldrb	r0, [r3, #1]
 801b228:	687b      	ldr	r3, [r7, #4]
 801b22a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801b22e:	2301      	movs	r3, #1
 801b230:	683a      	ldr	r2, [r7, #0]
 801b232:	f7ff fcd5 	bl	801abe0 <disk_read>
 801b236:	4603      	mov	r3, r0
 801b238:	2b00      	cmp	r3, #0
 801b23a:	d004      	beq.n	801b246 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 801b23c:	f04f 33ff 	mov.w	r3, #4294967295
 801b240:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 801b242:	2301      	movs	r3, #1
 801b244:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 801b246:	687b      	ldr	r3, [r7, #4]
 801b248:	683a      	ldr	r2, [r7, #0]
 801b24a:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
	return res;
 801b24c:	7bfb      	ldrb	r3, [r7, #15]
}
 801b24e:	4618      	mov	r0, r3
 801b250:	3710      	adds	r7, #16
 801b252:	46bd      	mov	sp, r7
 801b254:	bd80      	pop	{r7, pc}
	...

0801b258 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 801b258:	b580      	push	{r7, lr}
 801b25a:	b084      	sub	sp, #16
 801b25c:	af00      	add	r7, sp, #0
 801b25e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 801b260:	6878      	ldr	r0, [r7, #4]
 801b262:	f7ff ff87 	bl	801b174 <sync_window>
 801b266:	4603      	mov	r3, r0
 801b268:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 801b26a:	7bfb      	ldrb	r3, [r7, #15]
 801b26c:	2b00      	cmp	r3, #0
 801b26e:	d159      	bne.n	801b324 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 801b270:	687b      	ldr	r3, [r7, #4]
 801b272:	781b      	ldrb	r3, [r3, #0]
 801b274:	2b03      	cmp	r3, #3
 801b276:	d149      	bne.n	801b30c <sync_fs+0xb4>
 801b278:	687b      	ldr	r3, [r7, #4]
 801b27a:	791b      	ldrb	r3, [r3, #4]
 801b27c:	2b01      	cmp	r3, #1
 801b27e:	d145      	bne.n	801b30c <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 801b280:	687b      	ldr	r3, [r7, #4]
 801b282:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 801b286:	687b      	ldr	r3, [r7, #4]
 801b288:	899b      	ldrh	r3, [r3, #12]
 801b28a:	461a      	mov	r2, r3
 801b28c:	2100      	movs	r1, #0
 801b28e:	f7ff fda8 	bl	801ade2 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 801b292:	687b      	ldr	r3, [r7, #4]
 801b294:	3338      	adds	r3, #56	@ 0x38
 801b296:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 801b29a:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 801b29e:	4618      	mov	r0, r3
 801b2a0:	f7ff fd37 	bl	801ad12 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 801b2a4:	687b      	ldr	r3, [r7, #4]
 801b2a6:	3338      	adds	r3, #56	@ 0x38
 801b2a8:	4921      	ldr	r1, [pc, #132]	@ (801b330 <sync_fs+0xd8>)
 801b2aa:	4618      	mov	r0, r3
 801b2ac:	f7ff fd4c 	bl	801ad48 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 801b2b0:	687b      	ldr	r3, [r7, #4]
 801b2b2:	3338      	adds	r3, #56	@ 0x38
 801b2b4:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 801b2b8:	491e      	ldr	r1, [pc, #120]	@ (801b334 <sync_fs+0xdc>)
 801b2ba:	4618      	mov	r0, r3
 801b2bc:	f7ff fd44 	bl	801ad48 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 801b2c0:	687b      	ldr	r3, [r7, #4]
 801b2c2:	3338      	adds	r3, #56	@ 0x38
 801b2c4:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 801b2c8:	687b      	ldr	r3, [r7, #4]
 801b2ca:	699b      	ldr	r3, [r3, #24]
 801b2cc:	4619      	mov	r1, r3
 801b2ce:	4610      	mov	r0, r2
 801b2d0:	f7ff fd3a 	bl	801ad48 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 801b2d4:	687b      	ldr	r3, [r7, #4]
 801b2d6:	3338      	adds	r3, #56	@ 0x38
 801b2d8:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 801b2dc:	687b      	ldr	r3, [r7, #4]
 801b2de:	695b      	ldr	r3, [r3, #20]
 801b2e0:	4619      	mov	r1, r3
 801b2e2:	4610      	mov	r0, r2
 801b2e4:	f7ff fd30 	bl	801ad48 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 801b2e8:	687b      	ldr	r3, [r7, #4]
 801b2ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801b2ec:	1c5a      	adds	r2, r3, #1
 801b2ee:	687b      	ldr	r3, [r7, #4]
 801b2f0:	635a      	str	r2, [r3, #52]	@ 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 801b2f2:	687b      	ldr	r3, [r7, #4]
 801b2f4:	7858      	ldrb	r0, [r3, #1]
 801b2f6:	687b      	ldr	r3, [r7, #4]
 801b2f8:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801b2fc:	687b      	ldr	r3, [r7, #4]
 801b2fe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801b300:	2301      	movs	r3, #1
 801b302:	f7ff fc8d 	bl	801ac20 <disk_write>
			fs->fsi_flag = 0;
 801b306:	687b      	ldr	r3, [r7, #4]
 801b308:	2200      	movs	r2, #0
 801b30a:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 801b30c:	687b      	ldr	r3, [r7, #4]
 801b30e:	785b      	ldrb	r3, [r3, #1]
 801b310:	2200      	movs	r2, #0
 801b312:	2100      	movs	r1, #0
 801b314:	4618      	mov	r0, r3
 801b316:	f7ff fca3 	bl	801ac60 <disk_ioctl>
 801b31a:	4603      	mov	r3, r0
 801b31c:	2b00      	cmp	r3, #0
 801b31e:	d001      	beq.n	801b324 <sync_fs+0xcc>
 801b320:	2301      	movs	r3, #1
 801b322:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 801b324:	7bfb      	ldrb	r3, [r7, #15]
}
 801b326:	4618      	mov	r0, r3
 801b328:	3710      	adds	r7, #16
 801b32a:	46bd      	mov	sp, r7
 801b32c:	bd80      	pop	{r7, pc}
 801b32e:	bf00      	nop
 801b330:	41615252 	.word	0x41615252
 801b334:	61417272 	.word	0x61417272

0801b338 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 801b338:	b480      	push	{r7}
 801b33a:	b083      	sub	sp, #12
 801b33c:	af00      	add	r7, sp, #0
 801b33e:	6078      	str	r0, [r7, #4]
 801b340:	6039      	str	r1, [r7, #0]
	clst -= 2;
 801b342:	683b      	ldr	r3, [r7, #0]
 801b344:	3b02      	subs	r3, #2
 801b346:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 801b348:	687b      	ldr	r3, [r7, #4]
 801b34a:	69db      	ldr	r3, [r3, #28]
 801b34c:	3b02      	subs	r3, #2
 801b34e:	683a      	ldr	r2, [r7, #0]
 801b350:	429a      	cmp	r2, r3
 801b352:	d301      	bcc.n	801b358 <clust2sect+0x20>
 801b354:	2300      	movs	r3, #0
 801b356:	e008      	b.n	801b36a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 801b358:	687b      	ldr	r3, [r7, #4]
 801b35a:	895b      	ldrh	r3, [r3, #10]
 801b35c:	461a      	mov	r2, r3
 801b35e:	683b      	ldr	r3, [r7, #0]
 801b360:	fb03 f202 	mul.w	r2, r3, r2
 801b364:	687b      	ldr	r3, [r7, #4]
 801b366:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801b368:	4413      	add	r3, r2
}
 801b36a:	4618      	mov	r0, r3
 801b36c:	370c      	adds	r7, #12
 801b36e:	46bd      	mov	sp, r7
 801b370:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b374:	4770      	bx	lr

0801b376 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 801b376:	b580      	push	{r7, lr}
 801b378:	b086      	sub	sp, #24
 801b37a:	af00      	add	r7, sp, #0
 801b37c:	6078      	str	r0, [r7, #4]
 801b37e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 801b380:	687b      	ldr	r3, [r7, #4]
 801b382:	681b      	ldr	r3, [r3, #0]
 801b384:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 801b386:	683b      	ldr	r3, [r7, #0]
 801b388:	2b01      	cmp	r3, #1
 801b38a:	d904      	bls.n	801b396 <get_fat+0x20>
 801b38c:	693b      	ldr	r3, [r7, #16]
 801b38e:	69db      	ldr	r3, [r3, #28]
 801b390:	683a      	ldr	r2, [r7, #0]
 801b392:	429a      	cmp	r2, r3
 801b394:	d302      	bcc.n	801b39c <get_fat+0x26>
		val = 1;	/* Internal error */
 801b396:	2301      	movs	r3, #1
 801b398:	617b      	str	r3, [r7, #20]
 801b39a:	e0ba      	b.n	801b512 <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 801b39c:	f04f 33ff 	mov.w	r3, #4294967295
 801b3a0:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 801b3a2:	693b      	ldr	r3, [r7, #16]
 801b3a4:	781b      	ldrb	r3, [r3, #0]
 801b3a6:	2b03      	cmp	r3, #3
 801b3a8:	f000 8082 	beq.w	801b4b0 <get_fat+0x13a>
 801b3ac:	2b03      	cmp	r3, #3
 801b3ae:	f300 80a6 	bgt.w	801b4fe <get_fat+0x188>
 801b3b2:	2b01      	cmp	r3, #1
 801b3b4:	d002      	beq.n	801b3bc <get_fat+0x46>
 801b3b6:	2b02      	cmp	r3, #2
 801b3b8:	d055      	beq.n	801b466 <get_fat+0xf0>
 801b3ba:	e0a0      	b.n	801b4fe <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 801b3bc:	683b      	ldr	r3, [r7, #0]
 801b3be:	60fb      	str	r3, [r7, #12]
 801b3c0:	68fb      	ldr	r3, [r7, #12]
 801b3c2:	085b      	lsrs	r3, r3, #1
 801b3c4:	68fa      	ldr	r2, [r7, #12]
 801b3c6:	4413      	add	r3, r2
 801b3c8:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801b3ca:	693b      	ldr	r3, [r7, #16]
 801b3cc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801b3ce:	693b      	ldr	r3, [r7, #16]
 801b3d0:	899b      	ldrh	r3, [r3, #12]
 801b3d2:	4619      	mov	r1, r3
 801b3d4:	68fb      	ldr	r3, [r7, #12]
 801b3d6:	fbb3 f3f1 	udiv	r3, r3, r1
 801b3da:	4413      	add	r3, r2
 801b3dc:	4619      	mov	r1, r3
 801b3de:	6938      	ldr	r0, [r7, #16]
 801b3e0:	f7ff ff0c 	bl	801b1fc <move_window>
 801b3e4:	4603      	mov	r3, r0
 801b3e6:	2b00      	cmp	r3, #0
 801b3e8:	f040 808c 	bne.w	801b504 <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 801b3ec:	68fb      	ldr	r3, [r7, #12]
 801b3ee:	1c5a      	adds	r2, r3, #1
 801b3f0:	60fa      	str	r2, [r7, #12]
 801b3f2:	693a      	ldr	r2, [r7, #16]
 801b3f4:	8992      	ldrh	r2, [r2, #12]
 801b3f6:	fbb3 f1f2 	udiv	r1, r3, r2
 801b3fa:	fb01 f202 	mul.w	r2, r1, r2
 801b3fe:	1a9b      	subs	r3, r3, r2
 801b400:	693a      	ldr	r2, [r7, #16]
 801b402:	4413      	add	r3, r2
 801b404:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801b408:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801b40a:	693b      	ldr	r3, [r7, #16]
 801b40c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801b40e:	693b      	ldr	r3, [r7, #16]
 801b410:	899b      	ldrh	r3, [r3, #12]
 801b412:	4619      	mov	r1, r3
 801b414:	68fb      	ldr	r3, [r7, #12]
 801b416:	fbb3 f3f1 	udiv	r3, r3, r1
 801b41a:	4413      	add	r3, r2
 801b41c:	4619      	mov	r1, r3
 801b41e:	6938      	ldr	r0, [r7, #16]
 801b420:	f7ff feec 	bl	801b1fc <move_window>
 801b424:	4603      	mov	r3, r0
 801b426:	2b00      	cmp	r3, #0
 801b428:	d16e      	bne.n	801b508 <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 801b42a:	693b      	ldr	r3, [r7, #16]
 801b42c:	899b      	ldrh	r3, [r3, #12]
 801b42e:	461a      	mov	r2, r3
 801b430:	68fb      	ldr	r3, [r7, #12]
 801b432:	fbb3 f1f2 	udiv	r1, r3, r2
 801b436:	fb01 f202 	mul.w	r2, r1, r2
 801b43a:	1a9b      	subs	r3, r3, r2
 801b43c:	693a      	ldr	r2, [r7, #16]
 801b43e:	4413      	add	r3, r2
 801b440:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801b444:	021b      	lsls	r3, r3, #8
 801b446:	68ba      	ldr	r2, [r7, #8]
 801b448:	4313      	orrs	r3, r2
 801b44a:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 801b44c:	683b      	ldr	r3, [r7, #0]
 801b44e:	f003 0301 	and.w	r3, r3, #1
 801b452:	2b00      	cmp	r3, #0
 801b454:	d002      	beq.n	801b45c <get_fat+0xe6>
 801b456:	68bb      	ldr	r3, [r7, #8]
 801b458:	091b      	lsrs	r3, r3, #4
 801b45a:	e002      	b.n	801b462 <get_fat+0xec>
 801b45c:	68bb      	ldr	r3, [r7, #8]
 801b45e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801b462:	617b      	str	r3, [r7, #20]
			break;
 801b464:	e055      	b.n	801b512 <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801b466:	693b      	ldr	r3, [r7, #16]
 801b468:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801b46a:	693b      	ldr	r3, [r7, #16]
 801b46c:	899b      	ldrh	r3, [r3, #12]
 801b46e:	085b      	lsrs	r3, r3, #1
 801b470:	b29b      	uxth	r3, r3
 801b472:	4619      	mov	r1, r3
 801b474:	683b      	ldr	r3, [r7, #0]
 801b476:	fbb3 f3f1 	udiv	r3, r3, r1
 801b47a:	4413      	add	r3, r2
 801b47c:	4619      	mov	r1, r3
 801b47e:	6938      	ldr	r0, [r7, #16]
 801b480:	f7ff febc 	bl	801b1fc <move_window>
 801b484:	4603      	mov	r3, r0
 801b486:	2b00      	cmp	r3, #0
 801b488:	d140      	bne.n	801b50c <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 801b48a:	693b      	ldr	r3, [r7, #16]
 801b48c:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801b490:	683b      	ldr	r3, [r7, #0]
 801b492:	005b      	lsls	r3, r3, #1
 801b494:	693a      	ldr	r2, [r7, #16]
 801b496:	8992      	ldrh	r2, [r2, #12]
 801b498:	fbb3 f0f2 	udiv	r0, r3, r2
 801b49c:	fb00 f202 	mul.w	r2, r0, r2
 801b4a0:	1a9b      	subs	r3, r3, r2
 801b4a2:	440b      	add	r3, r1
 801b4a4:	4618      	mov	r0, r3
 801b4a6:	f7ff fbf9 	bl	801ac9c <ld_word>
 801b4aa:	4603      	mov	r3, r0
 801b4ac:	617b      	str	r3, [r7, #20]
			break;
 801b4ae:	e030      	b.n	801b512 <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801b4b0:	693b      	ldr	r3, [r7, #16]
 801b4b2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801b4b4:	693b      	ldr	r3, [r7, #16]
 801b4b6:	899b      	ldrh	r3, [r3, #12]
 801b4b8:	089b      	lsrs	r3, r3, #2
 801b4ba:	b29b      	uxth	r3, r3
 801b4bc:	4619      	mov	r1, r3
 801b4be:	683b      	ldr	r3, [r7, #0]
 801b4c0:	fbb3 f3f1 	udiv	r3, r3, r1
 801b4c4:	4413      	add	r3, r2
 801b4c6:	4619      	mov	r1, r3
 801b4c8:	6938      	ldr	r0, [r7, #16]
 801b4ca:	f7ff fe97 	bl	801b1fc <move_window>
 801b4ce:	4603      	mov	r3, r0
 801b4d0:	2b00      	cmp	r3, #0
 801b4d2:	d11d      	bne.n	801b510 <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 801b4d4:	693b      	ldr	r3, [r7, #16]
 801b4d6:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801b4da:	683b      	ldr	r3, [r7, #0]
 801b4dc:	009b      	lsls	r3, r3, #2
 801b4de:	693a      	ldr	r2, [r7, #16]
 801b4e0:	8992      	ldrh	r2, [r2, #12]
 801b4e2:	fbb3 f0f2 	udiv	r0, r3, r2
 801b4e6:	fb00 f202 	mul.w	r2, r0, r2
 801b4ea:	1a9b      	subs	r3, r3, r2
 801b4ec:	440b      	add	r3, r1
 801b4ee:	4618      	mov	r0, r3
 801b4f0:	f7ff fbec 	bl	801accc <ld_dword>
 801b4f4:	4603      	mov	r3, r0
 801b4f6:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 801b4fa:	617b      	str	r3, [r7, #20]
			break;
 801b4fc:	e009      	b.n	801b512 <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 801b4fe:	2301      	movs	r3, #1
 801b500:	617b      	str	r3, [r7, #20]
 801b502:	e006      	b.n	801b512 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801b504:	bf00      	nop
 801b506:	e004      	b.n	801b512 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801b508:	bf00      	nop
 801b50a:	e002      	b.n	801b512 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801b50c:	bf00      	nop
 801b50e:	e000      	b.n	801b512 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801b510:	bf00      	nop
		}
	}

	return val;
 801b512:	697b      	ldr	r3, [r7, #20]
}
 801b514:	4618      	mov	r0, r3
 801b516:	3718      	adds	r7, #24
 801b518:	46bd      	mov	sp, r7
 801b51a:	bd80      	pop	{r7, pc}

0801b51c <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 801b51c:	b590      	push	{r4, r7, lr}
 801b51e:	b089      	sub	sp, #36	@ 0x24
 801b520:	af00      	add	r7, sp, #0
 801b522:	60f8      	str	r0, [r7, #12]
 801b524:	60b9      	str	r1, [r7, #8]
 801b526:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 801b528:	2302      	movs	r3, #2
 801b52a:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 801b52c:	68bb      	ldr	r3, [r7, #8]
 801b52e:	2b01      	cmp	r3, #1
 801b530:	f240 8109 	bls.w	801b746 <put_fat+0x22a>
 801b534:	68fb      	ldr	r3, [r7, #12]
 801b536:	69db      	ldr	r3, [r3, #28]
 801b538:	68ba      	ldr	r2, [r7, #8]
 801b53a:	429a      	cmp	r2, r3
 801b53c:	f080 8103 	bcs.w	801b746 <put_fat+0x22a>
		switch (fs->fs_type) {
 801b540:	68fb      	ldr	r3, [r7, #12]
 801b542:	781b      	ldrb	r3, [r3, #0]
 801b544:	2b03      	cmp	r3, #3
 801b546:	f000 80b6 	beq.w	801b6b6 <put_fat+0x19a>
 801b54a:	2b03      	cmp	r3, #3
 801b54c:	f300 80fb 	bgt.w	801b746 <put_fat+0x22a>
 801b550:	2b01      	cmp	r3, #1
 801b552:	d003      	beq.n	801b55c <put_fat+0x40>
 801b554:	2b02      	cmp	r3, #2
 801b556:	f000 8083 	beq.w	801b660 <put_fat+0x144>
 801b55a:	e0f4      	b.n	801b746 <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 801b55c:	68bb      	ldr	r3, [r7, #8]
 801b55e:	61bb      	str	r3, [r7, #24]
 801b560:	69bb      	ldr	r3, [r7, #24]
 801b562:	085b      	lsrs	r3, r3, #1
 801b564:	69ba      	ldr	r2, [r7, #24]
 801b566:	4413      	add	r3, r2
 801b568:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801b56a:	68fb      	ldr	r3, [r7, #12]
 801b56c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801b56e:	68fb      	ldr	r3, [r7, #12]
 801b570:	899b      	ldrh	r3, [r3, #12]
 801b572:	4619      	mov	r1, r3
 801b574:	69bb      	ldr	r3, [r7, #24]
 801b576:	fbb3 f3f1 	udiv	r3, r3, r1
 801b57a:	4413      	add	r3, r2
 801b57c:	4619      	mov	r1, r3
 801b57e:	68f8      	ldr	r0, [r7, #12]
 801b580:	f7ff fe3c 	bl	801b1fc <move_window>
 801b584:	4603      	mov	r3, r0
 801b586:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801b588:	7ffb      	ldrb	r3, [r7, #31]
 801b58a:	2b00      	cmp	r3, #0
 801b58c:	f040 80d4 	bne.w	801b738 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 801b590:	68fb      	ldr	r3, [r7, #12]
 801b592:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801b596:	69bb      	ldr	r3, [r7, #24]
 801b598:	1c5a      	adds	r2, r3, #1
 801b59a:	61ba      	str	r2, [r7, #24]
 801b59c:	68fa      	ldr	r2, [r7, #12]
 801b59e:	8992      	ldrh	r2, [r2, #12]
 801b5a0:	fbb3 f0f2 	udiv	r0, r3, r2
 801b5a4:	fb00 f202 	mul.w	r2, r0, r2
 801b5a8:	1a9b      	subs	r3, r3, r2
 801b5aa:	440b      	add	r3, r1
 801b5ac:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 801b5ae:	68bb      	ldr	r3, [r7, #8]
 801b5b0:	f003 0301 	and.w	r3, r3, #1
 801b5b4:	2b00      	cmp	r3, #0
 801b5b6:	d00d      	beq.n	801b5d4 <put_fat+0xb8>
 801b5b8:	697b      	ldr	r3, [r7, #20]
 801b5ba:	781b      	ldrb	r3, [r3, #0]
 801b5bc:	b25b      	sxtb	r3, r3
 801b5be:	f003 030f 	and.w	r3, r3, #15
 801b5c2:	b25a      	sxtb	r2, r3
 801b5c4:	687b      	ldr	r3, [r7, #4]
 801b5c6:	b2db      	uxtb	r3, r3
 801b5c8:	011b      	lsls	r3, r3, #4
 801b5ca:	b25b      	sxtb	r3, r3
 801b5cc:	4313      	orrs	r3, r2
 801b5ce:	b25b      	sxtb	r3, r3
 801b5d0:	b2db      	uxtb	r3, r3
 801b5d2:	e001      	b.n	801b5d8 <put_fat+0xbc>
 801b5d4:	687b      	ldr	r3, [r7, #4]
 801b5d6:	b2db      	uxtb	r3, r3
 801b5d8:	697a      	ldr	r2, [r7, #20]
 801b5da:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 801b5dc:	68fb      	ldr	r3, [r7, #12]
 801b5de:	2201      	movs	r2, #1
 801b5e0:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801b5e2:	68fb      	ldr	r3, [r7, #12]
 801b5e4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801b5e6:	68fb      	ldr	r3, [r7, #12]
 801b5e8:	899b      	ldrh	r3, [r3, #12]
 801b5ea:	4619      	mov	r1, r3
 801b5ec:	69bb      	ldr	r3, [r7, #24]
 801b5ee:	fbb3 f3f1 	udiv	r3, r3, r1
 801b5f2:	4413      	add	r3, r2
 801b5f4:	4619      	mov	r1, r3
 801b5f6:	68f8      	ldr	r0, [r7, #12]
 801b5f8:	f7ff fe00 	bl	801b1fc <move_window>
 801b5fc:	4603      	mov	r3, r0
 801b5fe:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801b600:	7ffb      	ldrb	r3, [r7, #31]
 801b602:	2b00      	cmp	r3, #0
 801b604:	f040 809a 	bne.w	801b73c <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 801b608:	68fb      	ldr	r3, [r7, #12]
 801b60a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801b60e:	68fb      	ldr	r3, [r7, #12]
 801b610:	899b      	ldrh	r3, [r3, #12]
 801b612:	461a      	mov	r2, r3
 801b614:	69bb      	ldr	r3, [r7, #24]
 801b616:	fbb3 f0f2 	udiv	r0, r3, r2
 801b61a:	fb00 f202 	mul.w	r2, r0, r2
 801b61e:	1a9b      	subs	r3, r3, r2
 801b620:	440b      	add	r3, r1
 801b622:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 801b624:	68bb      	ldr	r3, [r7, #8]
 801b626:	f003 0301 	and.w	r3, r3, #1
 801b62a:	2b00      	cmp	r3, #0
 801b62c:	d003      	beq.n	801b636 <put_fat+0x11a>
 801b62e:	687b      	ldr	r3, [r7, #4]
 801b630:	091b      	lsrs	r3, r3, #4
 801b632:	b2db      	uxtb	r3, r3
 801b634:	e00e      	b.n	801b654 <put_fat+0x138>
 801b636:	697b      	ldr	r3, [r7, #20]
 801b638:	781b      	ldrb	r3, [r3, #0]
 801b63a:	b25b      	sxtb	r3, r3
 801b63c:	f023 030f 	bic.w	r3, r3, #15
 801b640:	b25a      	sxtb	r2, r3
 801b642:	687b      	ldr	r3, [r7, #4]
 801b644:	0a1b      	lsrs	r3, r3, #8
 801b646:	b25b      	sxtb	r3, r3
 801b648:	f003 030f 	and.w	r3, r3, #15
 801b64c:	b25b      	sxtb	r3, r3
 801b64e:	4313      	orrs	r3, r2
 801b650:	b25b      	sxtb	r3, r3
 801b652:	b2db      	uxtb	r3, r3
 801b654:	697a      	ldr	r2, [r7, #20]
 801b656:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 801b658:	68fb      	ldr	r3, [r7, #12]
 801b65a:	2201      	movs	r2, #1
 801b65c:	70da      	strb	r2, [r3, #3]
			break;
 801b65e:	e072      	b.n	801b746 <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 801b660:	68fb      	ldr	r3, [r7, #12]
 801b662:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801b664:	68fb      	ldr	r3, [r7, #12]
 801b666:	899b      	ldrh	r3, [r3, #12]
 801b668:	085b      	lsrs	r3, r3, #1
 801b66a:	b29b      	uxth	r3, r3
 801b66c:	4619      	mov	r1, r3
 801b66e:	68bb      	ldr	r3, [r7, #8]
 801b670:	fbb3 f3f1 	udiv	r3, r3, r1
 801b674:	4413      	add	r3, r2
 801b676:	4619      	mov	r1, r3
 801b678:	68f8      	ldr	r0, [r7, #12]
 801b67a:	f7ff fdbf 	bl	801b1fc <move_window>
 801b67e:	4603      	mov	r3, r0
 801b680:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801b682:	7ffb      	ldrb	r3, [r7, #31]
 801b684:	2b00      	cmp	r3, #0
 801b686:	d15b      	bne.n	801b740 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 801b688:	68fb      	ldr	r3, [r7, #12]
 801b68a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801b68e:	68bb      	ldr	r3, [r7, #8]
 801b690:	005b      	lsls	r3, r3, #1
 801b692:	68fa      	ldr	r2, [r7, #12]
 801b694:	8992      	ldrh	r2, [r2, #12]
 801b696:	fbb3 f0f2 	udiv	r0, r3, r2
 801b69a:	fb00 f202 	mul.w	r2, r0, r2
 801b69e:	1a9b      	subs	r3, r3, r2
 801b6a0:	440b      	add	r3, r1
 801b6a2:	687a      	ldr	r2, [r7, #4]
 801b6a4:	b292      	uxth	r2, r2
 801b6a6:	4611      	mov	r1, r2
 801b6a8:	4618      	mov	r0, r3
 801b6aa:	f7ff fb32 	bl	801ad12 <st_word>
			fs->wflag = 1;
 801b6ae:	68fb      	ldr	r3, [r7, #12]
 801b6b0:	2201      	movs	r2, #1
 801b6b2:	70da      	strb	r2, [r3, #3]
			break;
 801b6b4:	e047      	b.n	801b746 <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 801b6b6:	68fb      	ldr	r3, [r7, #12]
 801b6b8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801b6ba:	68fb      	ldr	r3, [r7, #12]
 801b6bc:	899b      	ldrh	r3, [r3, #12]
 801b6be:	089b      	lsrs	r3, r3, #2
 801b6c0:	b29b      	uxth	r3, r3
 801b6c2:	4619      	mov	r1, r3
 801b6c4:	68bb      	ldr	r3, [r7, #8]
 801b6c6:	fbb3 f3f1 	udiv	r3, r3, r1
 801b6ca:	4413      	add	r3, r2
 801b6cc:	4619      	mov	r1, r3
 801b6ce:	68f8      	ldr	r0, [r7, #12]
 801b6d0:	f7ff fd94 	bl	801b1fc <move_window>
 801b6d4:	4603      	mov	r3, r0
 801b6d6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801b6d8:	7ffb      	ldrb	r3, [r7, #31]
 801b6da:	2b00      	cmp	r3, #0
 801b6dc:	d132      	bne.n	801b744 <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 801b6de:	687b      	ldr	r3, [r7, #4]
 801b6e0:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 801b6e4:	68fb      	ldr	r3, [r7, #12]
 801b6e6:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801b6ea:	68bb      	ldr	r3, [r7, #8]
 801b6ec:	009b      	lsls	r3, r3, #2
 801b6ee:	68fa      	ldr	r2, [r7, #12]
 801b6f0:	8992      	ldrh	r2, [r2, #12]
 801b6f2:	fbb3 f0f2 	udiv	r0, r3, r2
 801b6f6:	fb00 f202 	mul.w	r2, r0, r2
 801b6fa:	1a9b      	subs	r3, r3, r2
 801b6fc:	440b      	add	r3, r1
 801b6fe:	4618      	mov	r0, r3
 801b700:	f7ff fae4 	bl	801accc <ld_dword>
 801b704:	4603      	mov	r3, r0
 801b706:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 801b70a:	4323      	orrs	r3, r4
 801b70c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 801b70e:	68fb      	ldr	r3, [r7, #12]
 801b710:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801b714:	68bb      	ldr	r3, [r7, #8]
 801b716:	009b      	lsls	r3, r3, #2
 801b718:	68fa      	ldr	r2, [r7, #12]
 801b71a:	8992      	ldrh	r2, [r2, #12]
 801b71c:	fbb3 f0f2 	udiv	r0, r3, r2
 801b720:	fb00 f202 	mul.w	r2, r0, r2
 801b724:	1a9b      	subs	r3, r3, r2
 801b726:	440b      	add	r3, r1
 801b728:	6879      	ldr	r1, [r7, #4]
 801b72a:	4618      	mov	r0, r3
 801b72c:	f7ff fb0c 	bl	801ad48 <st_dword>
			fs->wflag = 1;
 801b730:	68fb      	ldr	r3, [r7, #12]
 801b732:	2201      	movs	r2, #1
 801b734:	70da      	strb	r2, [r3, #3]
			break;
 801b736:	e006      	b.n	801b746 <put_fat+0x22a>
			if (res != FR_OK) break;
 801b738:	bf00      	nop
 801b73a:	e004      	b.n	801b746 <put_fat+0x22a>
			if (res != FR_OK) break;
 801b73c:	bf00      	nop
 801b73e:	e002      	b.n	801b746 <put_fat+0x22a>
			if (res != FR_OK) break;
 801b740:	bf00      	nop
 801b742:	e000      	b.n	801b746 <put_fat+0x22a>
			if (res != FR_OK) break;
 801b744:	bf00      	nop
		}
	}
	return res;
 801b746:	7ffb      	ldrb	r3, [r7, #31]
}
 801b748:	4618      	mov	r0, r3
 801b74a:	3724      	adds	r7, #36	@ 0x24
 801b74c:	46bd      	mov	sp, r7
 801b74e:	bd90      	pop	{r4, r7, pc}

0801b750 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 801b750:	b580      	push	{r7, lr}
 801b752:	b088      	sub	sp, #32
 801b754:	af00      	add	r7, sp, #0
 801b756:	60f8      	str	r0, [r7, #12]
 801b758:	60b9      	str	r1, [r7, #8]
 801b75a:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 801b75c:	2300      	movs	r3, #0
 801b75e:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 801b760:	68fb      	ldr	r3, [r7, #12]
 801b762:	681b      	ldr	r3, [r3, #0]
 801b764:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 801b766:	68bb      	ldr	r3, [r7, #8]
 801b768:	2b01      	cmp	r3, #1
 801b76a:	d904      	bls.n	801b776 <remove_chain+0x26>
 801b76c:	69bb      	ldr	r3, [r7, #24]
 801b76e:	69db      	ldr	r3, [r3, #28]
 801b770:	68ba      	ldr	r2, [r7, #8]
 801b772:	429a      	cmp	r2, r3
 801b774:	d301      	bcc.n	801b77a <remove_chain+0x2a>
 801b776:	2302      	movs	r3, #2
 801b778:	e04b      	b.n	801b812 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 801b77a:	687b      	ldr	r3, [r7, #4]
 801b77c:	2b00      	cmp	r3, #0
 801b77e:	d00c      	beq.n	801b79a <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 801b780:	f04f 32ff 	mov.w	r2, #4294967295
 801b784:	6879      	ldr	r1, [r7, #4]
 801b786:	69b8      	ldr	r0, [r7, #24]
 801b788:	f7ff fec8 	bl	801b51c <put_fat>
 801b78c:	4603      	mov	r3, r0
 801b78e:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 801b790:	7ffb      	ldrb	r3, [r7, #31]
 801b792:	2b00      	cmp	r3, #0
 801b794:	d001      	beq.n	801b79a <remove_chain+0x4a>
 801b796:	7ffb      	ldrb	r3, [r7, #31]
 801b798:	e03b      	b.n	801b812 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 801b79a:	68b9      	ldr	r1, [r7, #8]
 801b79c:	68f8      	ldr	r0, [r7, #12]
 801b79e:	f7ff fdea 	bl	801b376 <get_fat>
 801b7a2:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 801b7a4:	697b      	ldr	r3, [r7, #20]
 801b7a6:	2b00      	cmp	r3, #0
 801b7a8:	d031      	beq.n	801b80e <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 801b7aa:	697b      	ldr	r3, [r7, #20]
 801b7ac:	2b01      	cmp	r3, #1
 801b7ae:	d101      	bne.n	801b7b4 <remove_chain+0x64>
 801b7b0:	2302      	movs	r3, #2
 801b7b2:	e02e      	b.n	801b812 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 801b7b4:	697b      	ldr	r3, [r7, #20]
 801b7b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b7ba:	d101      	bne.n	801b7c0 <remove_chain+0x70>
 801b7bc:	2301      	movs	r3, #1
 801b7be:	e028      	b.n	801b812 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 801b7c0:	2200      	movs	r2, #0
 801b7c2:	68b9      	ldr	r1, [r7, #8]
 801b7c4:	69b8      	ldr	r0, [r7, #24]
 801b7c6:	f7ff fea9 	bl	801b51c <put_fat>
 801b7ca:	4603      	mov	r3, r0
 801b7cc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 801b7ce:	7ffb      	ldrb	r3, [r7, #31]
 801b7d0:	2b00      	cmp	r3, #0
 801b7d2:	d001      	beq.n	801b7d8 <remove_chain+0x88>
 801b7d4:	7ffb      	ldrb	r3, [r7, #31]
 801b7d6:	e01c      	b.n	801b812 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 801b7d8:	69bb      	ldr	r3, [r7, #24]
 801b7da:	699a      	ldr	r2, [r3, #24]
 801b7dc:	69bb      	ldr	r3, [r7, #24]
 801b7de:	69db      	ldr	r3, [r3, #28]
 801b7e0:	3b02      	subs	r3, #2
 801b7e2:	429a      	cmp	r2, r3
 801b7e4:	d20b      	bcs.n	801b7fe <remove_chain+0xae>
			fs->free_clst++;
 801b7e6:	69bb      	ldr	r3, [r7, #24]
 801b7e8:	699b      	ldr	r3, [r3, #24]
 801b7ea:	1c5a      	adds	r2, r3, #1
 801b7ec:	69bb      	ldr	r3, [r7, #24]
 801b7ee:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 801b7f0:	69bb      	ldr	r3, [r7, #24]
 801b7f2:	791b      	ldrb	r3, [r3, #4]
 801b7f4:	f043 0301 	orr.w	r3, r3, #1
 801b7f8:	b2da      	uxtb	r2, r3
 801b7fa:	69bb      	ldr	r3, [r7, #24]
 801b7fc:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 801b7fe:	697b      	ldr	r3, [r7, #20]
 801b800:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 801b802:	69bb      	ldr	r3, [r7, #24]
 801b804:	69db      	ldr	r3, [r3, #28]
 801b806:	68ba      	ldr	r2, [r7, #8]
 801b808:	429a      	cmp	r2, r3
 801b80a:	d3c6      	bcc.n	801b79a <remove_chain+0x4a>
 801b80c:	e000      	b.n	801b810 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 801b80e:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 801b810:	2300      	movs	r3, #0
}
 801b812:	4618      	mov	r0, r3
 801b814:	3720      	adds	r7, #32
 801b816:	46bd      	mov	sp, r7
 801b818:	bd80      	pop	{r7, pc}

0801b81a <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 801b81a:	b580      	push	{r7, lr}
 801b81c:	b088      	sub	sp, #32
 801b81e:	af00      	add	r7, sp, #0
 801b820:	6078      	str	r0, [r7, #4]
 801b822:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 801b824:	687b      	ldr	r3, [r7, #4]
 801b826:	681b      	ldr	r3, [r3, #0]
 801b828:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 801b82a:	683b      	ldr	r3, [r7, #0]
 801b82c:	2b00      	cmp	r3, #0
 801b82e:	d10d      	bne.n	801b84c <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 801b830:	693b      	ldr	r3, [r7, #16]
 801b832:	695b      	ldr	r3, [r3, #20]
 801b834:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 801b836:	69bb      	ldr	r3, [r7, #24]
 801b838:	2b00      	cmp	r3, #0
 801b83a:	d004      	beq.n	801b846 <create_chain+0x2c>
 801b83c:	693b      	ldr	r3, [r7, #16]
 801b83e:	69db      	ldr	r3, [r3, #28]
 801b840:	69ba      	ldr	r2, [r7, #24]
 801b842:	429a      	cmp	r2, r3
 801b844:	d31b      	bcc.n	801b87e <create_chain+0x64>
 801b846:	2301      	movs	r3, #1
 801b848:	61bb      	str	r3, [r7, #24]
 801b84a:	e018      	b.n	801b87e <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 801b84c:	6839      	ldr	r1, [r7, #0]
 801b84e:	6878      	ldr	r0, [r7, #4]
 801b850:	f7ff fd91 	bl	801b376 <get_fat>
 801b854:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 801b856:	68fb      	ldr	r3, [r7, #12]
 801b858:	2b01      	cmp	r3, #1
 801b85a:	d801      	bhi.n	801b860 <create_chain+0x46>
 801b85c:	2301      	movs	r3, #1
 801b85e:	e070      	b.n	801b942 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 801b860:	68fb      	ldr	r3, [r7, #12]
 801b862:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b866:	d101      	bne.n	801b86c <create_chain+0x52>
 801b868:	68fb      	ldr	r3, [r7, #12]
 801b86a:	e06a      	b.n	801b942 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 801b86c:	693b      	ldr	r3, [r7, #16]
 801b86e:	69db      	ldr	r3, [r3, #28]
 801b870:	68fa      	ldr	r2, [r7, #12]
 801b872:	429a      	cmp	r2, r3
 801b874:	d201      	bcs.n	801b87a <create_chain+0x60>
 801b876:	68fb      	ldr	r3, [r7, #12]
 801b878:	e063      	b.n	801b942 <create_chain+0x128>
		scl = clst;
 801b87a:	683b      	ldr	r3, [r7, #0]
 801b87c:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 801b87e:	69bb      	ldr	r3, [r7, #24]
 801b880:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 801b882:	69fb      	ldr	r3, [r7, #28]
 801b884:	3301      	adds	r3, #1
 801b886:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 801b888:	693b      	ldr	r3, [r7, #16]
 801b88a:	69db      	ldr	r3, [r3, #28]
 801b88c:	69fa      	ldr	r2, [r7, #28]
 801b88e:	429a      	cmp	r2, r3
 801b890:	d307      	bcc.n	801b8a2 <create_chain+0x88>
				ncl = 2;
 801b892:	2302      	movs	r3, #2
 801b894:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 801b896:	69fa      	ldr	r2, [r7, #28]
 801b898:	69bb      	ldr	r3, [r7, #24]
 801b89a:	429a      	cmp	r2, r3
 801b89c:	d901      	bls.n	801b8a2 <create_chain+0x88>
 801b89e:	2300      	movs	r3, #0
 801b8a0:	e04f      	b.n	801b942 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 801b8a2:	69f9      	ldr	r1, [r7, #28]
 801b8a4:	6878      	ldr	r0, [r7, #4]
 801b8a6:	f7ff fd66 	bl	801b376 <get_fat>
 801b8aa:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 801b8ac:	68fb      	ldr	r3, [r7, #12]
 801b8ae:	2b00      	cmp	r3, #0
 801b8b0:	d00e      	beq.n	801b8d0 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 801b8b2:	68fb      	ldr	r3, [r7, #12]
 801b8b4:	2b01      	cmp	r3, #1
 801b8b6:	d003      	beq.n	801b8c0 <create_chain+0xa6>
 801b8b8:	68fb      	ldr	r3, [r7, #12]
 801b8ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b8be:	d101      	bne.n	801b8c4 <create_chain+0xaa>
 801b8c0:	68fb      	ldr	r3, [r7, #12]
 801b8c2:	e03e      	b.n	801b942 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 801b8c4:	69fa      	ldr	r2, [r7, #28]
 801b8c6:	69bb      	ldr	r3, [r7, #24]
 801b8c8:	429a      	cmp	r2, r3
 801b8ca:	d1da      	bne.n	801b882 <create_chain+0x68>
 801b8cc:	2300      	movs	r3, #0
 801b8ce:	e038      	b.n	801b942 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 801b8d0:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 801b8d2:	f04f 32ff 	mov.w	r2, #4294967295
 801b8d6:	69f9      	ldr	r1, [r7, #28]
 801b8d8:	6938      	ldr	r0, [r7, #16]
 801b8da:	f7ff fe1f 	bl	801b51c <put_fat>
 801b8de:	4603      	mov	r3, r0
 801b8e0:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 801b8e2:	7dfb      	ldrb	r3, [r7, #23]
 801b8e4:	2b00      	cmp	r3, #0
 801b8e6:	d109      	bne.n	801b8fc <create_chain+0xe2>
 801b8e8:	683b      	ldr	r3, [r7, #0]
 801b8ea:	2b00      	cmp	r3, #0
 801b8ec:	d006      	beq.n	801b8fc <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 801b8ee:	69fa      	ldr	r2, [r7, #28]
 801b8f0:	6839      	ldr	r1, [r7, #0]
 801b8f2:	6938      	ldr	r0, [r7, #16]
 801b8f4:	f7ff fe12 	bl	801b51c <put_fat>
 801b8f8:	4603      	mov	r3, r0
 801b8fa:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 801b8fc:	7dfb      	ldrb	r3, [r7, #23]
 801b8fe:	2b00      	cmp	r3, #0
 801b900:	d116      	bne.n	801b930 <create_chain+0x116>
		fs->last_clst = ncl;
 801b902:	693b      	ldr	r3, [r7, #16]
 801b904:	69fa      	ldr	r2, [r7, #28]
 801b906:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 801b908:	693b      	ldr	r3, [r7, #16]
 801b90a:	699a      	ldr	r2, [r3, #24]
 801b90c:	693b      	ldr	r3, [r7, #16]
 801b90e:	69db      	ldr	r3, [r3, #28]
 801b910:	3b02      	subs	r3, #2
 801b912:	429a      	cmp	r2, r3
 801b914:	d804      	bhi.n	801b920 <create_chain+0x106>
 801b916:	693b      	ldr	r3, [r7, #16]
 801b918:	699b      	ldr	r3, [r3, #24]
 801b91a:	1e5a      	subs	r2, r3, #1
 801b91c:	693b      	ldr	r3, [r7, #16]
 801b91e:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 801b920:	693b      	ldr	r3, [r7, #16]
 801b922:	791b      	ldrb	r3, [r3, #4]
 801b924:	f043 0301 	orr.w	r3, r3, #1
 801b928:	b2da      	uxtb	r2, r3
 801b92a:	693b      	ldr	r3, [r7, #16]
 801b92c:	711a      	strb	r2, [r3, #4]
 801b92e:	e007      	b.n	801b940 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 801b930:	7dfb      	ldrb	r3, [r7, #23]
 801b932:	2b01      	cmp	r3, #1
 801b934:	d102      	bne.n	801b93c <create_chain+0x122>
 801b936:	f04f 33ff 	mov.w	r3, #4294967295
 801b93a:	e000      	b.n	801b93e <create_chain+0x124>
 801b93c:	2301      	movs	r3, #1
 801b93e:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 801b940:	69fb      	ldr	r3, [r7, #28]
}
 801b942:	4618      	mov	r0, r3
 801b944:	3720      	adds	r7, #32
 801b946:	46bd      	mov	sp, r7
 801b948:	bd80      	pop	{r7, pc}

0801b94a <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 801b94a:	b480      	push	{r7}
 801b94c:	b087      	sub	sp, #28
 801b94e:	af00      	add	r7, sp, #0
 801b950:	6078      	str	r0, [r7, #4]
 801b952:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 801b954:	687b      	ldr	r3, [r7, #4]
 801b956:	681b      	ldr	r3, [r3, #0]
 801b958:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 801b95a:	687b      	ldr	r3, [r7, #4]
 801b95c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b95e:	3304      	adds	r3, #4
 801b960:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 801b962:	68fb      	ldr	r3, [r7, #12]
 801b964:	899b      	ldrh	r3, [r3, #12]
 801b966:	461a      	mov	r2, r3
 801b968:	683b      	ldr	r3, [r7, #0]
 801b96a:	fbb3 f3f2 	udiv	r3, r3, r2
 801b96e:	68fa      	ldr	r2, [r7, #12]
 801b970:	8952      	ldrh	r2, [r2, #10]
 801b972:	fbb3 f3f2 	udiv	r3, r3, r2
 801b976:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801b978:	693b      	ldr	r3, [r7, #16]
 801b97a:	1d1a      	adds	r2, r3, #4
 801b97c:	613a      	str	r2, [r7, #16]
 801b97e:	681b      	ldr	r3, [r3, #0]
 801b980:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 801b982:	68bb      	ldr	r3, [r7, #8]
 801b984:	2b00      	cmp	r3, #0
 801b986:	d101      	bne.n	801b98c <clmt_clust+0x42>
 801b988:	2300      	movs	r3, #0
 801b98a:	e010      	b.n	801b9ae <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 801b98c:	697a      	ldr	r2, [r7, #20]
 801b98e:	68bb      	ldr	r3, [r7, #8]
 801b990:	429a      	cmp	r2, r3
 801b992:	d307      	bcc.n	801b9a4 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 801b994:	697a      	ldr	r2, [r7, #20]
 801b996:	68bb      	ldr	r3, [r7, #8]
 801b998:	1ad3      	subs	r3, r2, r3
 801b99a:	617b      	str	r3, [r7, #20]
 801b99c:	693b      	ldr	r3, [r7, #16]
 801b99e:	3304      	adds	r3, #4
 801b9a0:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801b9a2:	e7e9      	b.n	801b978 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 801b9a4:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 801b9a6:	693b      	ldr	r3, [r7, #16]
 801b9a8:	681a      	ldr	r2, [r3, #0]
 801b9aa:	697b      	ldr	r3, [r7, #20]
 801b9ac:	4413      	add	r3, r2
}
 801b9ae:	4618      	mov	r0, r3
 801b9b0:	371c      	adds	r7, #28
 801b9b2:	46bd      	mov	sp, r7
 801b9b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b9b8:	4770      	bx	lr

0801b9ba <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 801b9ba:	b580      	push	{r7, lr}
 801b9bc:	b086      	sub	sp, #24
 801b9be:	af00      	add	r7, sp, #0
 801b9c0:	6078      	str	r0, [r7, #4]
 801b9c2:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 801b9c4:	687b      	ldr	r3, [r7, #4]
 801b9c6:	681b      	ldr	r3, [r3, #0]
 801b9c8:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 801b9ca:	683b      	ldr	r3, [r7, #0]
 801b9cc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801b9d0:	d204      	bcs.n	801b9dc <dir_sdi+0x22>
 801b9d2:	683b      	ldr	r3, [r7, #0]
 801b9d4:	f003 031f 	and.w	r3, r3, #31
 801b9d8:	2b00      	cmp	r3, #0
 801b9da:	d001      	beq.n	801b9e0 <dir_sdi+0x26>
		return FR_INT_ERR;
 801b9dc:	2302      	movs	r3, #2
 801b9de:	e071      	b.n	801bac4 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 801b9e0:	687b      	ldr	r3, [r7, #4]
 801b9e2:	683a      	ldr	r2, [r7, #0]
 801b9e4:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 801b9e6:	687b      	ldr	r3, [r7, #4]
 801b9e8:	689b      	ldr	r3, [r3, #8]
 801b9ea:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 801b9ec:	697b      	ldr	r3, [r7, #20]
 801b9ee:	2b00      	cmp	r3, #0
 801b9f0:	d106      	bne.n	801ba00 <dir_sdi+0x46>
 801b9f2:	693b      	ldr	r3, [r7, #16]
 801b9f4:	781b      	ldrb	r3, [r3, #0]
 801b9f6:	2b02      	cmp	r3, #2
 801b9f8:	d902      	bls.n	801ba00 <dir_sdi+0x46>
		clst = fs->dirbase;
 801b9fa:	693b      	ldr	r3, [r7, #16]
 801b9fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b9fe:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 801ba00:	697b      	ldr	r3, [r7, #20]
 801ba02:	2b00      	cmp	r3, #0
 801ba04:	d10c      	bne.n	801ba20 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 801ba06:	683b      	ldr	r3, [r7, #0]
 801ba08:	095b      	lsrs	r3, r3, #5
 801ba0a:	693a      	ldr	r2, [r7, #16]
 801ba0c:	8912      	ldrh	r2, [r2, #8]
 801ba0e:	4293      	cmp	r3, r2
 801ba10:	d301      	bcc.n	801ba16 <dir_sdi+0x5c>
 801ba12:	2302      	movs	r3, #2
 801ba14:	e056      	b.n	801bac4 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 801ba16:	693b      	ldr	r3, [r7, #16]
 801ba18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801ba1a:	687b      	ldr	r3, [r7, #4]
 801ba1c:	61da      	str	r2, [r3, #28]
 801ba1e:	e02d      	b.n	801ba7c <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 801ba20:	693b      	ldr	r3, [r7, #16]
 801ba22:	895b      	ldrh	r3, [r3, #10]
 801ba24:	461a      	mov	r2, r3
 801ba26:	693b      	ldr	r3, [r7, #16]
 801ba28:	899b      	ldrh	r3, [r3, #12]
 801ba2a:	fb02 f303 	mul.w	r3, r2, r3
 801ba2e:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 801ba30:	e019      	b.n	801ba66 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 801ba32:	687b      	ldr	r3, [r7, #4]
 801ba34:	6979      	ldr	r1, [r7, #20]
 801ba36:	4618      	mov	r0, r3
 801ba38:	f7ff fc9d 	bl	801b376 <get_fat>
 801ba3c:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801ba3e:	697b      	ldr	r3, [r7, #20]
 801ba40:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ba44:	d101      	bne.n	801ba4a <dir_sdi+0x90>
 801ba46:	2301      	movs	r3, #1
 801ba48:	e03c      	b.n	801bac4 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 801ba4a:	697b      	ldr	r3, [r7, #20]
 801ba4c:	2b01      	cmp	r3, #1
 801ba4e:	d904      	bls.n	801ba5a <dir_sdi+0xa0>
 801ba50:	693b      	ldr	r3, [r7, #16]
 801ba52:	69db      	ldr	r3, [r3, #28]
 801ba54:	697a      	ldr	r2, [r7, #20]
 801ba56:	429a      	cmp	r2, r3
 801ba58:	d301      	bcc.n	801ba5e <dir_sdi+0xa4>
 801ba5a:	2302      	movs	r3, #2
 801ba5c:	e032      	b.n	801bac4 <dir_sdi+0x10a>
			ofs -= csz;
 801ba5e:	683a      	ldr	r2, [r7, #0]
 801ba60:	68fb      	ldr	r3, [r7, #12]
 801ba62:	1ad3      	subs	r3, r2, r3
 801ba64:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 801ba66:	683a      	ldr	r2, [r7, #0]
 801ba68:	68fb      	ldr	r3, [r7, #12]
 801ba6a:	429a      	cmp	r2, r3
 801ba6c:	d2e1      	bcs.n	801ba32 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 801ba6e:	6979      	ldr	r1, [r7, #20]
 801ba70:	6938      	ldr	r0, [r7, #16]
 801ba72:	f7ff fc61 	bl	801b338 <clust2sect>
 801ba76:	4602      	mov	r2, r0
 801ba78:	687b      	ldr	r3, [r7, #4]
 801ba7a:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 801ba7c:	687b      	ldr	r3, [r7, #4]
 801ba7e:	697a      	ldr	r2, [r7, #20]
 801ba80:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 801ba82:	687b      	ldr	r3, [r7, #4]
 801ba84:	69db      	ldr	r3, [r3, #28]
 801ba86:	2b00      	cmp	r3, #0
 801ba88:	d101      	bne.n	801ba8e <dir_sdi+0xd4>
 801ba8a:	2302      	movs	r3, #2
 801ba8c:	e01a      	b.n	801bac4 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 801ba8e:	687b      	ldr	r3, [r7, #4]
 801ba90:	69da      	ldr	r2, [r3, #28]
 801ba92:	693b      	ldr	r3, [r7, #16]
 801ba94:	899b      	ldrh	r3, [r3, #12]
 801ba96:	4619      	mov	r1, r3
 801ba98:	683b      	ldr	r3, [r7, #0]
 801ba9a:	fbb3 f3f1 	udiv	r3, r3, r1
 801ba9e:	441a      	add	r2, r3
 801baa0:	687b      	ldr	r3, [r7, #4]
 801baa2:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 801baa4:	693b      	ldr	r3, [r7, #16]
 801baa6:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801baaa:	693b      	ldr	r3, [r7, #16]
 801baac:	899b      	ldrh	r3, [r3, #12]
 801baae:	461a      	mov	r2, r3
 801bab0:	683b      	ldr	r3, [r7, #0]
 801bab2:	fbb3 f0f2 	udiv	r0, r3, r2
 801bab6:	fb00 f202 	mul.w	r2, r0, r2
 801baba:	1a9b      	subs	r3, r3, r2
 801babc:	18ca      	adds	r2, r1, r3
 801babe:	687b      	ldr	r3, [r7, #4]
 801bac0:	621a      	str	r2, [r3, #32]

	return FR_OK;
 801bac2:	2300      	movs	r3, #0
}
 801bac4:	4618      	mov	r0, r3
 801bac6:	3718      	adds	r7, #24
 801bac8:	46bd      	mov	sp, r7
 801baca:	bd80      	pop	{r7, pc}

0801bacc <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 801bacc:	b580      	push	{r7, lr}
 801bace:	b086      	sub	sp, #24
 801bad0:	af00      	add	r7, sp, #0
 801bad2:	6078      	str	r0, [r7, #4]
 801bad4:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 801bad6:	687b      	ldr	r3, [r7, #4]
 801bad8:	681b      	ldr	r3, [r3, #0]
 801bada:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 801badc:	687b      	ldr	r3, [r7, #4]
 801bade:	695b      	ldr	r3, [r3, #20]
 801bae0:	3320      	adds	r3, #32
 801bae2:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 801bae4:	687b      	ldr	r3, [r7, #4]
 801bae6:	69db      	ldr	r3, [r3, #28]
 801bae8:	2b00      	cmp	r3, #0
 801baea:	d003      	beq.n	801baf4 <dir_next+0x28>
 801baec:	68bb      	ldr	r3, [r7, #8]
 801baee:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801baf2:	d301      	bcc.n	801baf8 <dir_next+0x2c>
 801baf4:	2304      	movs	r3, #4
 801baf6:	e0bb      	b.n	801bc70 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 801baf8:	68fb      	ldr	r3, [r7, #12]
 801bafa:	899b      	ldrh	r3, [r3, #12]
 801bafc:	461a      	mov	r2, r3
 801bafe:	68bb      	ldr	r3, [r7, #8]
 801bb00:	fbb3 f1f2 	udiv	r1, r3, r2
 801bb04:	fb01 f202 	mul.w	r2, r1, r2
 801bb08:	1a9b      	subs	r3, r3, r2
 801bb0a:	2b00      	cmp	r3, #0
 801bb0c:	f040 809d 	bne.w	801bc4a <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 801bb10:	687b      	ldr	r3, [r7, #4]
 801bb12:	69db      	ldr	r3, [r3, #28]
 801bb14:	1c5a      	adds	r2, r3, #1
 801bb16:	687b      	ldr	r3, [r7, #4]
 801bb18:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 801bb1a:	687b      	ldr	r3, [r7, #4]
 801bb1c:	699b      	ldr	r3, [r3, #24]
 801bb1e:	2b00      	cmp	r3, #0
 801bb20:	d10b      	bne.n	801bb3a <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 801bb22:	68bb      	ldr	r3, [r7, #8]
 801bb24:	095b      	lsrs	r3, r3, #5
 801bb26:	68fa      	ldr	r2, [r7, #12]
 801bb28:	8912      	ldrh	r2, [r2, #8]
 801bb2a:	4293      	cmp	r3, r2
 801bb2c:	f0c0 808d 	bcc.w	801bc4a <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 801bb30:	687b      	ldr	r3, [r7, #4]
 801bb32:	2200      	movs	r2, #0
 801bb34:	61da      	str	r2, [r3, #28]
 801bb36:	2304      	movs	r3, #4
 801bb38:	e09a      	b.n	801bc70 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 801bb3a:	68fb      	ldr	r3, [r7, #12]
 801bb3c:	899b      	ldrh	r3, [r3, #12]
 801bb3e:	461a      	mov	r2, r3
 801bb40:	68bb      	ldr	r3, [r7, #8]
 801bb42:	fbb3 f3f2 	udiv	r3, r3, r2
 801bb46:	68fa      	ldr	r2, [r7, #12]
 801bb48:	8952      	ldrh	r2, [r2, #10]
 801bb4a:	3a01      	subs	r2, #1
 801bb4c:	4013      	ands	r3, r2
 801bb4e:	2b00      	cmp	r3, #0
 801bb50:	d17b      	bne.n	801bc4a <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 801bb52:	687a      	ldr	r2, [r7, #4]
 801bb54:	687b      	ldr	r3, [r7, #4]
 801bb56:	699b      	ldr	r3, [r3, #24]
 801bb58:	4619      	mov	r1, r3
 801bb5a:	4610      	mov	r0, r2
 801bb5c:	f7ff fc0b 	bl	801b376 <get_fat>
 801bb60:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 801bb62:	697b      	ldr	r3, [r7, #20]
 801bb64:	2b01      	cmp	r3, #1
 801bb66:	d801      	bhi.n	801bb6c <dir_next+0xa0>
 801bb68:	2302      	movs	r3, #2
 801bb6a:	e081      	b.n	801bc70 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 801bb6c:	697b      	ldr	r3, [r7, #20]
 801bb6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 801bb72:	d101      	bne.n	801bb78 <dir_next+0xac>
 801bb74:	2301      	movs	r3, #1
 801bb76:	e07b      	b.n	801bc70 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 801bb78:	68fb      	ldr	r3, [r7, #12]
 801bb7a:	69db      	ldr	r3, [r3, #28]
 801bb7c:	697a      	ldr	r2, [r7, #20]
 801bb7e:	429a      	cmp	r2, r3
 801bb80:	d359      	bcc.n	801bc36 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 801bb82:	683b      	ldr	r3, [r7, #0]
 801bb84:	2b00      	cmp	r3, #0
 801bb86:	d104      	bne.n	801bb92 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 801bb88:	687b      	ldr	r3, [r7, #4]
 801bb8a:	2200      	movs	r2, #0
 801bb8c:	61da      	str	r2, [r3, #28]
 801bb8e:	2304      	movs	r3, #4
 801bb90:	e06e      	b.n	801bc70 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 801bb92:	687a      	ldr	r2, [r7, #4]
 801bb94:	687b      	ldr	r3, [r7, #4]
 801bb96:	699b      	ldr	r3, [r3, #24]
 801bb98:	4619      	mov	r1, r3
 801bb9a:	4610      	mov	r0, r2
 801bb9c:	f7ff fe3d 	bl	801b81a <create_chain>
 801bba0:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 801bba2:	697b      	ldr	r3, [r7, #20]
 801bba4:	2b00      	cmp	r3, #0
 801bba6:	d101      	bne.n	801bbac <dir_next+0xe0>
 801bba8:	2307      	movs	r3, #7
 801bbaa:	e061      	b.n	801bc70 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 801bbac:	697b      	ldr	r3, [r7, #20]
 801bbae:	2b01      	cmp	r3, #1
 801bbb0:	d101      	bne.n	801bbb6 <dir_next+0xea>
 801bbb2:	2302      	movs	r3, #2
 801bbb4:	e05c      	b.n	801bc70 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801bbb6:	697b      	ldr	r3, [r7, #20]
 801bbb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 801bbbc:	d101      	bne.n	801bbc2 <dir_next+0xf6>
 801bbbe:	2301      	movs	r3, #1
 801bbc0:	e056      	b.n	801bc70 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 801bbc2:	68f8      	ldr	r0, [r7, #12]
 801bbc4:	f7ff fad6 	bl	801b174 <sync_window>
 801bbc8:	4603      	mov	r3, r0
 801bbca:	2b00      	cmp	r3, #0
 801bbcc:	d001      	beq.n	801bbd2 <dir_next+0x106>
 801bbce:	2301      	movs	r3, #1
 801bbd0:	e04e      	b.n	801bc70 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 801bbd2:	68fb      	ldr	r3, [r7, #12]
 801bbd4:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 801bbd8:	68fb      	ldr	r3, [r7, #12]
 801bbda:	899b      	ldrh	r3, [r3, #12]
 801bbdc:	461a      	mov	r2, r3
 801bbde:	2100      	movs	r1, #0
 801bbe0:	f7ff f8ff 	bl	801ade2 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801bbe4:	2300      	movs	r3, #0
 801bbe6:	613b      	str	r3, [r7, #16]
 801bbe8:	6979      	ldr	r1, [r7, #20]
 801bbea:	68f8      	ldr	r0, [r7, #12]
 801bbec:	f7ff fba4 	bl	801b338 <clust2sect>
 801bbf0:	4602      	mov	r2, r0
 801bbf2:	68fb      	ldr	r3, [r7, #12]
 801bbf4:	635a      	str	r2, [r3, #52]	@ 0x34
 801bbf6:	e012      	b.n	801bc1e <dir_next+0x152>
						fs->wflag = 1;
 801bbf8:	68fb      	ldr	r3, [r7, #12]
 801bbfa:	2201      	movs	r2, #1
 801bbfc:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 801bbfe:	68f8      	ldr	r0, [r7, #12]
 801bc00:	f7ff fab8 	bl	801b174 <sync_window>
 801bc04:	4603      	mov	r3, r0
 801bc06:	2b00      	cmp	r3, #0
 801bc08:	d001      	beq.n	801bc0e <dir_next+0x142>
 801bc0a:	2301      	movs	r3, #1
 801bc0c:	e030      	b.n	801bc70 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801bc0e:	693b      	ldr	r3, [r7, #16]
 801bc10:	3301      	adds	r3, #1
 801bc12:	613b      	str	r3, [r7, #16]
 801bc14:	68fb      	ldr	r3, [r7, #12]
 801bc16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801bc18:	1c5a      	adds	r2, r3, #1
 801bc1a:	68fb      	ldr	r3, [r7, #12]
 801bc1c:	635a      	str	r2, [r3, #52]	@ 0x34
 801bc1e:	68fb      	ldr	r3, [r7, #12]
 801bc20:	895b      	ldrh	r3, [r3, #10]
 801bc22:	461a      	mov	r2, r3
 801bc24:	693b      	ldr	r3, [r7, #16]
 801bc26:	4293      	cmp	r3, r2
 801bc28:	d3e6      	bcc.n	801bbf8 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 801bc2a:	68fb      	ldr	r3, [r7, #12]
 801bc2c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801bc2e:	693b      	ldr	r3, [r7, #16]
 801bc30:	1ad2      	subs	r2, r2, r3
 801bc32:	68fb      	ldr	r3, [r7, #12]
 801bc34:	635a      	str	r2, [r3, #52]	@ 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 801bc36:	687b      	ldr	r3, [r7, #4]
 801bc38:	697a      	ldr	r2, [r7, #20]
 801bc3a:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 801bc3c:	6979      	ldr	r1, [r7, #20]
 801bc3e:	68f8      	ldr	r0, [r7, #12]
 801bc40:	f7ff fb7a 	bl	801b338 <clust2sect>
 801bc44:	4602      	mov	r2, r0
 801bc46:	687b      	ldr	r3, [r7, #4]
 801bc48:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 801bc4a:	687b      	ldr	r3, [r7, #4]
 801bc4c:	68ba      	ldr	r2, [r7, #8]
 801bc4e:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 801bc50:	68fb      	ldr	r3, [r7, #12]
 801bc52:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801bc56:	68fb      	ldr	r3, [r7, #12]
 801bc58:	899b      	ldrh	r3, [r3, #12]
 801bc5a:	461a      	mov	r2, r3
 801bc5c:	68bb      	ldr	r3, [r7, #8]
 801bc5e:	fbb3 f0f2 	udiv	r0, r3, r2
 801bc62:	fb00 f202 	mul.w	r2, r0, r2
 801bc66:	1a9b      	subs	r3, r3, r2
 801bc68:	18ca      	adds	r2, r1, r3
 801bc6a:	687b      	ldr	r3, [r7, #4]
 801bc6c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 801bc6e:	2300      	movs	r3, #0
}
 801bc70:	4618      	mov	r0, r3
 801bc72:	3718      	adds	r7, #24
 801bc74:	46bd      	mov	sp, r7
 801bc76:	bd80      	pop	{r7, pc}

0801bc78 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 801bc78:	b580      	push	{r7, lr}
 801bc7a:	b086      	sub	sp, #24
 801bc7c:	af00      	add	r7, sp, #0
 801bc7e:	6078      	str	r0, [r7, #4]
 801bc80:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 801bc82:	687b      	ldr	r3, [r7, #4]
 801bc84:	681b      	ldr	r3, [r3, #0]
 801bc86:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 801bc88:	2100      	movs	r1, #0
 801bc8a:	6878      	ldr	r0, [r7, #4]
 801bc8c:	f7ff fe95 	bl	801b9ba <dir_sdi>
 801bc90:	4603      	mov	r3, r0
 801bc92:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801bc94:	7dfb      	ldrb	r3, [r7, #23]
 801bc96:	2b00      	cmp	r3, #0
 801bc98:	d12b      	bne.n	801bcf2 <dir_alloc+0x7a>
		n = 0;
 801bc9a:	2300      	movs	r3, #0
 801bc9c:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 801bc9e:	687b      	ldr	r3, [r7, #4]
 801bca0:	69db      	ldr	r3, [r3, #28]
 801bca2:	4619      	mov	r1, r3
 801bca4:	68f8      	ldr	r0, [r7, #12]
 801bca6:	f7ff faa9 	bl	801b1fc <move_window>
 801bcaa:	4603      	mov	r3, r0
 801bcac:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801bcae:	7dfb      	ldrb	r3, [r7, #23]
 801bcb0:	2b00      	cmp	r3, #0
 801bcb2:	d11d      	bne.n	801bcf0 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 801bcb4:	687b      	ldr	r3, [r7, #4]
 801bcb6:	6a1b      	ldr	r3, [r3, #32]
 801bcb8:	781b      	ldrb	r3, [r3, #0]
 801bcba:	2be5      	cmp	r3, #229	@ 0xe5
 801bcbc:	d004      	beq.n	801bcc8 <dir_alloc+0x50>
 801bcbe:	687b      	ldr	r3, [r7, #4]
 801bcc0:	6a1b      	ldr	r3, [r3, #32]
 801bcc2:	781b      	ldrb	r3, [r3, #0]
 801bcc4:	2b00      	cmp	r3, #0
 801bcc6:	d107      	bne.n	801bcd8 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 801bcc8:	693b      	ldr	r3, [r7, #16]
 801bcca:	3301      	adds	r3, #1
 801bccc:	613b      	str	r3, [r7, #16]
 801bcce:	693a      	ldr	r2, [r7, #16]
 801bcd0:	683b      	ldr	r3, [r7, #0]
 801bcd2:	429a      	cmp	r2, r3
 801bcd4:	d102      	bne.n	801bcdc <dir_alloc+0x64>
 801bcd6:	e00c      	b.n	801bcf2 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 801bcd8:	2300      	movs	r3, #0
 801bcda:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 801bcdc:	2101      	movs	r1, #1
 801bcde:	6878      	ldr	r0, [r7, #4]
 801bce0:	f7ff fef4 	bl	801bacc <dir_next>
 801bce4:	4603      	mov	r3, r0
 801bce6:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 801bce8:	7dfb      	ldrb	r3, [r7, #23]
 801bcea:	2b00      	cmp	r3, #0
 801bcec:	d0d7      	beq.n	801bc9e <dir_alloc+0x26>
 801bcee:	e000      	b.n	801bcf2 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 801bcf0:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 801bcf2:	7dfb      	ldrb	r3, [r7, #23]
 801bcf4:	2b04      	cmp	r3, #4
 801bcf6:	d101      	bne.n	801bcfc <dir_alloc+0x84>
 801bcf8:	2307      	movs	r3, #7
 801bcfa:	75fb      	strb	r3, [r7, #23]
	return res;
 801bcfc:	7dfb      	ldrb	r3, [r7, #23]
}
 801bcfe:	4618      	mov	r0, r3
 801bd00:	3718      	adds	r7, #24
 801bd02:	46bd      	mov	sp, r7
 801bd04:	bd80      	pop	{r7, pc}

0801bd06 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 801bd06:	b580      	push	{r7, lr}
 801bd08:	b084      	sub	sp, #16
 801bd0a:	af00      	add	r7, sp, #0
 801bd0c:	6078      	str	r0, [r7, #4]
 801bd0e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 801bd10:	683b      	ldr	r3, [r7, #0]
 801bd12:	331a      	adds	r3, #26
 801bd14:	4618      	mov	r0, r3
 801bd16:	f7fe ffc1 	bl	801ac9c <ld_word>
 801bd1a:	4603      	mov	r3, r0
 801bd1c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 801bd1e:	687b      	ldr	r3, [r7, #4]
 801bd20:	781b      	ldrb	r3, [r3, #0]
 801bd22:	2b03      	cmp	r3, #3
 801bd24:	d109      	bne.n	801bd3a <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 801bd26:	683b      	ldr	r3, [r7, #0]
 801bd28:	3314      	adds	r3, #20
 801bd2a:	4618      	mov	r0, r3
 801bd2c:	f7fe ffb6 	bl	801ac9c <ld_word>
 801bd30:	4603      	mov	r3, r0
 801bd32:	041b      	lsls	r3, r3, #16
 801bd34:	68fa      	ldr	r2, [r7, #12]
 801bd36:	4313      	orrs	r3, r2
 801bd38:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 801bd3a:	68fb      	ldr	r3, [r7, #12]
}
 801bd3c:	4618      	mov	r0, r3
 801bd3e:	3710      	adds	r7, #16
 801bd40:	46bd      	mov	sp, r7
 801bd42:	bd80      	pop	{r7, pc}

0801bd44 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 801bd44:	b580      	push	{r7, lr}
 801bd46:	b084      	sub	sp, #16
 801bd48:	af00      	add	r7, sp, #0
 801bd4a:	60f8      	str	r0, [r7, #12]
 801bd4c:	60b9      	str	r1, [r7, #8]
 801bd4e:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 801bd50:	68bb      	ldr	r3, [r7, #8]
 801bd52:	331a      	adds	r3, #26
 801bd54:	687a      	ldr	r2, [r7, #4]
 801bd56:	b292      	uxth	r2, r2
 801bd58:	4611      	mov	r1, r2
 801bd5a:	4618      	mov	r0, r3
 801bd5c:	f7fe ffd9 	bl	801ad12 <st_word>
	if (fs->fs_type == FS_FAT32) {
 801bd60:	68fb      	ldr	r3, [r7, #12]
 801bd62:	781b      	ldrb	r3, [r3, #0]
 801bd64:	2b03      	cmp	r3, #3
 801bd66:	d109      	bne.n	801bd7c <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 801bd68:	68bb      	ldr	r3, [r7, #8]
 801bd6a:	f103 0214 	add.w	r2, r3, #20
 801bd6e:	687b      	ldr	r3, [r7, #4]
 801bd70:	0c1b      	lsrs	r3, r3, #16
 801bd72:	b29b      	uxth	r3, r3
 801bd74:	4619      	mov	r1, r3
 801bd76:	4610      	mov	r0, r2
 801bd78:	f7fe ffcb 	bl	801ad12 <st_word>
	}
}
 801bd7c:	bf00      	nop
 801bd7e:	3710      	adds	r7, #16
 801bd80:	46bd      	mov	sp, r7
 801bd82:	bd80      	pop	{r7, pc}

0801bd84 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 801bd84:	b590      	push	{r4, r7, lr}
 801bd86:	b087      	sub	sp, #28
 801bd88:	af00      	add	r7, sp, #0
 801bd8a:	6078      	str	r0, [r7, #4]
 801bd8c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 801bd8e:	683b      	ldr	r3, [r7, #0]
 801bd90:	331a      	adds	r3, #26
 801bd92:	4618      	mov	r0, r3
 801bd94:	f7fe ff82 	bl	801ac9c <ld_word>
 801bd98:	4603      	mov	r3, r0
 801bd9a:	2b00      	cmp	r3, #0
 801bd9c:	d001      	beq.n	801bda2 <cmp_lfn+0x1e>
 801bd9e:	2300      	movs	r3, #0
 801bda0:	e059      	b.n	801be56 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 801bda2:	683b      	ldr	r3, [r7, #0]
 801bda4:	781b      	ldrb	r3, [r3, #0]
 801bda6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801bdaa:	1e5a      	subs	r2, r3, #1
 801bdac:	4613      	mov	r3, r2
 801bdae:	005b      	lsls	r3, r3, #1
 801bdb0:	4413      	add	r3, r2
 801bdb2:	009b      	lsls	r3, r3, #2
 801bdb4:	4413      	add	r3, r2
 801bdb6:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 801bdb8:	2301      	movs	r3, #1
 801bdba:	81fb      	strh	r3, [r7, #14]
 801bdbc:	2300      	movs	r3, #0
 801bdbe:	613b      	str	r3, [r7, #16]
 801bdc0:	e033      	b.n	801be2a <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 801bdc2:	4a27      	ldr	r2, [pc, #156]	@ (801be60 <cmp_lfn+0xdc>)
 801bdc4:	693b      	ldr	r3, [r7, #16]
 801bdc6:	4413      	add	r3, r2
 801bdc8:	781b      	ldrb	r3, [r3, #0]
 801bdca:	461a      	mov	r2, r3
 801bdcc:	683b      	ldr	r3, [r7, #0]
 801bdce:	4413      	add	r3, r2
 801bdd0:	4618      	mov	r0, r3
 801bdd2:	f7fe ff63 	bl	801ac9c <ld_word>
 801bdd6:	4603      	mov	r3, r0
 801bdd8:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 801bdda:	89fb      	ldrh	r3, [r7, #14]
 801bddc:	2b00      	cmp	r3, #0
 801bdde:	d01a      	beq.n	801be16 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 801bde0:	697b      	ldr	r3, [r7, #20]
 801bde2:	2bfe      	cmp	r3, #254	@ 0xfe
 801bde4:	d812      	bhi.n	801be0c <cmp_lfn+0x88>
 801bde6:	89bb      	ldrh	r3, [r7, #12]
 801bde8:	4618      	mov	r0, r3
 801bdea:	f001 ff71 	bl	801dcd0 <ff_wtoupper>
 801bdee:	4603      	mov	r3, r0
 801bdf0:	461c      	mov	r4, r3
 801bdf2:	697b      	ldr	r3, [r7, #20]
 801bdf4:	1c5a      	adds	r2, r3, #1
 801bdf6:	617a      	str	r2, [r7, #20]
 801bdf8:	005b      	lsls	r3, r3, #1
 801bdfa:	687a      	ldr	r2, [r7, #4]
 801bdfc:	4413      	add	r3, r2
 801bdfe:	881b      	ldrh	r3, [r3, #0]
 801be00:	4618      	mov	r0, r3
 801be02:	f001 ff65 	bl	801dcd0 <ff_wtoupper>
 801be06:	4603      	mov	r3, r0
 801be08:	429c      	cmp	r4, r3
 801be0a:	d001      	beq.n	801be10 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 801be0c:	2300      	movs	r3, #0
 801be0e:	e022      	b.n	801be56 <cmp_lfn+0xd2>
			}
			wc = uc;
 801be10:	89bb      	ldrh	r3, [r7, #12]
 801be12:	81fb      	strh	r3, [r7, #14]
 801be14:	e006      	b.n	801be24 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 801be16:	89bb      	ldrh	r3, [r7, #12]
 801be18:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801be1c:	4293      	cmp	r3, r2
 801be1e:	d001      	beq.n	801be24 <cmp_lfn+0xa0>
 801be20:	2300      	movs	r3, #0
 801be22:	e018      	b.n	801be56 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 801be24:	693b      	ldr	r3, [r7, #16]
 801be26:	3301      	adds	r3, #1
 801be28:	613b      	str	r3, [r7, #16]
 801be2a:	693b      	ldr	r3, [r7, #16]
 801be2c:	2b0c      	cmp	r3, #12
 801be2e:	d9c8      	bls.n	801bdc2 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 801be30:	683b      	ldr	r3, [r7, #0]
 801be32:	781b      	ldrb	r3, [r3, #0]
 801be34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801be38:	2b00      	cmp	r3, #0
 801be3a:	d00b      	beq.n	801be54 <cmp_lfn+0xd0>
 801be3c:	89fb      	ldrh	r3, [r7, #14]
 801be3e:	2b00      	cmp	r3, #0
 801be40:	d008      	beq.n	801be54 <cmp_lfn+0xd0>
 801be42:	697b      	ldr	r3, [r7, #20]
 801be44:	005b      	lsls	r3, r3, #1
 801be46:	687a      	ldr	r2, [r7, #4]
 801be48:	4413      	add	r3, r2
 801be4a:	881b      	ldrh	r3, [r3, #0]
 801be4c:	2b00      	cmp	r3, #0
 801be4e:	d001      	beq.n	801be54 <cmp_lfn+0xd0>
 801be50:	2300      	movs	r3, #0
 801be52:	e000      	b.n	801be56 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 801be54:	2301      	movs	r3, #1
}
 801be56:	4618      	mov	r0, r3
 801be58:	371c      	adds	r7, #28
 801be5a:	46bd      	mov	sp, r7
 801be5c:	bd90      	pop	{r4, r7, pc}
 801be5e:	bf00      	nop
 801be60:	0801e96c 	.word	0x0801e96c

0801be64 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 801be64:	b580      	push	{r7, lr}
 801be66:	b086      	sub	sp, #24
 801be68:	af00      	add	r7, sp, #0
 801be6a:	6078      	str	r0, [r7, #4]
 801be6c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 801be6e:	683b      	ldr	r3, [r7, #0]
 801be70:	331a      	adds	r3, #26
 801be72:	4618      	mov	r0, r3
 801be74:	f7fe ff12 	bl	801ac9c <ld_word>
 801be78:	4603      	mov	r3, r0
 801be7a:	2b00      	cmp	r3, #0
 801be7c:	d001      	beq.n	801be82 <pick_lfn+0x1e>
 801be7e:	2300      	movs	r3, #0
 801be80:	e04d      	b.n	801bf1e <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 801be82:	683b      	ldr	r3, [r7, #0]
 801be84:	781b      	ldrb	r3, [r3, #0]
 801be86:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801be8a:	1e5a      	subs	r2, r3, #1
 801be8c:	4613      	mov	r3, r2
 801be8e:	005b      	lsls	r3, r3, #1
 801be90:	4413      	add	r3, r2
 801be92:	009b      	lsls	r3, r3, #2
 801be94:	4413      	add	r3, r2
 801be96:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 801be98:	2301      	movs	r3, #1
 801be9a:	81fb      	strh	r3, [r7, #14]
 801be9c:	2300      	movs	r3, #0
 801be9e:	613b      	str	r3, [r7, #16]
 801bea0:	e028      	b.n	801bef4 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 801bea2:	4a21      	ldr	r2, [pc, #132]	@ (801bf28 <pick_lfn+0xc4>)
 801bea4:	693b      	ldr	r3, [r7, #16]
 801bea6:	4413      	add	r3, r2
 801bea8:	781b      	ldrb	r3, [r3, #0]
 801beaa:	461a      	mov	r2, r3
 801beac:	683b      	ldr	r3, [r7, #0]
 801beae:	4413      	add	r3, r2
 801beb0:	4618      	mov	r0, r3
 801beb2:	f7fe fef3 	bl	801ac9c <ld_word>
 801beb6:	4603      	mov	r3, r0
 801beb8:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 801beba:	89fb      	ldrh	r3, [r7, #14]
 801bebc:	2b00      	cmp	r3, #0
 801bebe:	d00f      	beq.n	801bee0 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 801bec0:	697b      	ldr	r3, [r7, #20]
 801bec2:	2bfe      	cmp	r3, #254	@ 0xfe
 801bec4:	d901      	bls.n	801beca <pick_lfn+0x66>
 801bec6:	2300      	movs	r3, #0
 801bec8:	e029      	b.n	801bf1e <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 801beca:	89bb      	ldrh	r3, [r7, #12]
 801becc:	81fb      	strh	r3, [r7, #14]
 801bece:	697b      	ldr	r3, [r7, #20]
 801bed0:	1c5a      	adds	r2, r3, #1
 801bed2:	617a      	str	r2, [r7, #20]
 801bed4:	005b      	lsls	r3, r3, #1
 801bed6:	687a      	ldr	r2, [r7, #4]
 801bed8:	4413      	add	r3, r2
 801beda:	89fa      	ldrh	r2, [r7, #14]
 801bedc:	801a      	strh	r2, [r3, #0]
 801bede:	e006      	b.n	801beee <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 801bee0:	89bb      	ldrh	r3, [r7, #12]
 801bee2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801bee6:	4293      	cmp	r3, r2
 801bee8:	d001      	beq.n	801beee <pick_lfn+0x8a>
 801beea:	2300      	movs	r3, #0
 801beec:	e017      	b.n	801bf1e <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 801beee:	693b      	ldr	r3, [r7, #16]
 801bef0:	3301      	adds	r3, #1
 801bef2:	613b      	str	r3, [r7, #16]
 801bef4:	693b      	ldr	r3, [r7, #16]
 801bef6:	2b0c      	cmp	r3, #12
 801bef8:	d9d3      	bls.n	801bea2 <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 801befa:	683b      	ldr	r3, [r7, #0]
 801befc:	781b      	ldrb	r3, [r3, #0]
 801befe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801bf02:	2b00      	cmp	r3, #0
 801bf04:	d00a      	beq.n	801bf1c <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 801bf06:	697b      	ldr	r3, [r7, #20]
 801bf08:	2bfe      	cmp	r3, #254	@ 0xfe
 801bf0a:	d901      	bls.n	801bf10 <pick_lfn+0xac>
 801bf0c:	2300      	movs	r3, #0
 801bf0e:	e006      	b.n	801bf1e <pick_lfn+0xba>
		lfnbuf[i] = 0;
 801bf10:	697b      	ldr	r3, [r7, #20]
 801bf12:	005b      	lsls	r3, r3, #1
 801bf14:	687a      	ldr	r2, [r7, #4]
 801bf16:	4413      	add	r3, r2
 801bf18:	2200      	movs	r2, #0
 801bf1a:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 801bf1c:	2301      	movs	r3, #1
}
 801bf1e:	4618      	mov	r0, r3
 801bf20:	3718      	adds	r7, #24
 801bf22:	46bd      	mov	sp, r7
 801bf24:	bd80      	pop	{r7, pc}
 801bf26:	bf00      	nop
 801bf28:	0801e96c 	.word	0x0801e96c

0801bf2c <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 801bf2c:	b580      	push	{r7, lr}
 801bf2e:	b088      	sub	sp, #32
 801bf30:	af00      	add	r7, sp, #0
 801bf32:	60f8      	str	r0, [r7, #12]
 801bf34:	60b9      	str	r1, [r7, #8]
 801bf36:	4611      	mov	r1, r2
 801bf38:	461a      	mov	r2, r3
 801bf3a:	460b      	mov	r3, r1
 801bf3c:	71fb      	strb	r3, [r7, #7]
 801bf3e:	4613      	mov	r3, r2
 801bf40:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 801bf42:	68bb      	ldr	r3, [r7, #8]
 801bf44:	330d      	adds	r3, #13
 801bf46:	79ba      	ldrb	r2, [r7, #6]
 801bf48:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 801bf4a:	68bb      	ldr	r3, [r7, #8]
 801bf4c:	330b      	adds	r3, #11
 801bf4e:	220f      	movs	r2, #15
 801bf50:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 801bf52:	68bb      	ldr	r3, [r7, #8]
 801bf54:	330c      	adds	r3, #12
 801bf56:	2200      	movs	r2, #0
 801bf58:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 801bf5a:	68bb      	ldr	r3, [r7, #8]
 801bf5c:	331a      	adds	r3, #26
 801bf5e:	2100      	movs	r1, #0
 801bf60:	4618      	mov	r0, r3
 801bf62:	f7fe fed6 	bl	801ad12 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 801bf66:	79fb      	ldrb	r3, [r7, #7]
 801bf68:	1e5a      	subs	r2, r3, #1
 801bf6a:	4613      	mov	r3, r2
 801bf6c:	005b      	lsls	r3, r3, #1
 801bf6e:	4413      	add	r3, r2
 801bf70:	009b      	lsls	r3, r3, #2
 801bf72:	4413      	add	r3, r2
 801bf74:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 801bf76:	2300      	movs	r3, #0
 801bf78:	82fb      	strh	r3, [r7, #22]
 801bf7a:	2300      	movs	r3, #0
 801bf7c:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 801bf7e:	8afb      	ldrh	r3, [r7, #22]
 801bf80:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801bf84:	4293      	cmp	r3, r2
 801bf86:	d007      	beq.n	801bf98 <put_lfn+0x6c>
 801bf88:	69fb      	ldr	r3, [r7, #28]
 801bf8a:	1c5a      	adds	r2, r3, #1
 801bf8c:	61fa      	str	r2, [r7, #28]
 801bf8e:	005b      	lsls	r3, r3, #1
 801bf90:	68fa      	ldr	r2, [r7, #12]
 801bf92:	4413      	add	r3, r2
 801bf94:	881b      	ldrh	r3, [r3, #0]
 801bf96:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 801bf98:	4a17      	ldr	r2, [pc, #92]	@ (801bff8 <put_lfn+0xcc>)
 801bf9a:	69bb      	ldr	r3, [r7, #24]
 801bf9c:	4413      	add	r3, r2
 801bf9e:	781b      	ldrb	r3, [r3, #0]
 801bfa0:	461a      	mov	r2, r3
 801bfa2:	68bb      	ldr	r3, [r7, #8]
 801bfa4:	4413      	add	r3, r2
 801bfa6:	8afa      	ldrh	r2, [r7, #22]
 801bfa8:	4611      	mov	r1, r2
 801bfaa:	4618      	mov	r0, r3
 801bfac:	f7fe feb1 	bl	801ad12 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 801bfb0:	8afb      	ldrh	r3, [r7, #22]
 801bfb2:	2b00      	cmp	r3, #0
 801bfb4:	d102      	bne.n	801bfbc <put_lfn+0x90>
 801bfb6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801bfba:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 801bfbc:	69bb      	ldr	r3, [r7, #24]
 801bfbe:	3301      	adds	r3, #1
 801bfc0:	61bb      	str	r3, [r7, #24]
 801bfc2:	69bb      	ldr	r3, [r7, #24]
 801bfc4:	2b0c      	cmp	r3, #12
 801bfc6:	d9da      	bls.n	801bf7e <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 801bfc8:	8afb      	ldrh	r3, [r7, #22]
 801bfca:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801bfce:	4293      	cmp	r3, r2
 801bfd0:	d006      	beq.n	801bfe0 <put_lfn+0xb4>
 801bfd2:	69fb      	ldr	r3, [r7, #28]
 801bfd4:	005b      	lsls	r3, r3, #1
 801bfd6:	68fa      	ldr	r2, [r7, #12]
 801bfd8:	4413      	add	r3, r2
 801bfda:	881b      	ldrh	r3, [r3, #0]
 801bfdc:	2b00      	cmp	r3, #0
 801bfde:	d103      	bne.n	801bfe8 <put_lfn+0xbc>
 801bfe0:	79fb      	ldrb	r3, [r7, #7]
 801bfe2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801bfe6:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 801bfe8:	68bb      	ldr	r3, [r7, #8]
 801bfea:	79fa      	ldrb	r2, [r7, #7]
 801bfec:	701a      	strb	r2, [r3, #0]
}
 801bfee:	bf00      	nop
 801bff0:	3720      	adds	r7, #32
 801bff2:	46bd      	mov	sp, r7
 801bff4:	bd80      	pop	{r7, pc}
 801bff6:	bf00      	nop
 801bff8:	0801e96c 	.word	0x0801e96c

0801bffc <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 801bffc:	b580      	push	{r7, lr}
 801bffe:	b08c      	sub	sp, #48	@ 0x30
 801c000:	af00      	add	r7, sp, #0
 801c002:	60f8      	str	r0, [r7, #12]
 801c004:	60b9      	str	r1, [r7, #8]
 801c006:	607a      	str	r2, [r7, #4]
 801c008:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 801c00a:	220b      	movs	r2, #11
 801c00c:	68b9      	ldr	r1, [r7, #8]
 801c00e:	68f8      	ldr	r0, [r7, #12]
 801c010:	f7fe fec6 	bl	801ada0 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 801c014:	683b      	ldr	r3, [r7, #0]
 801c016:	2b05      	cmp	r3, #5
 801c018:	d929      	bls.n	801c06e <gen_numname+0x72>
		sr = seq;
 801c01a:	683b      	ldr	r3, [r7, #0]
 801c01c:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 801c01e:	e020      	b.n	801c062 <gen_numname+0x66>
			wc = *lfn++;
 801c020:	687b      	ldr	r3, [r7, #4]
 801c022:	1c9a      	adds	r2, r3, #2
 801c024:	607a      	str	r2, [r7, #4]
 801c026:	881b      	ldrh	r3, [r3, #0]
 801c028:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 801c02a:	2300      	movs	r3, #0
 801c02c:	62bb      	str	r3, [r7, #40]	@ 0x28
 801c02e:	e015      	b.n	801c05c <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 801c030:	69fb      	ldr	r3, [r7, #28]
 801c032:	005a      	lsls	r2, r3, #1
 801c034:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801c036:	f003 0301 	and.w	r3, r3, #1
 801c03a:	4413      	add	r3, r2
 801c03c:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 801c03e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801c040:	085b      	lsrs	r3, r3, #1
 801c042:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 801c044:	69fb      	ldr	r3, [r7, #28]
 801c046:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801c04a:	2b00      	cmp	r3, #0
 801c04c:	d003      	beq.n	801c056 <gen_numname+0x5a>
 801c04e:	69fa      	ldr	r2, [r7, #28]
 801c050:	4b30      	ldr	r3, [pc, #192]	@ (801c114 <gen_numname+0x118>)
 801c052:	4053      	eors	r3, r2
 801c054:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 801c056:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c058:	3301      	adds	r3, #1
 801c05a:	62bb      	str	r3, [r7, #40]	@ 0x28
 801c05c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c05e:	2b0f      	cmp	r3, #15
 801c060:	d9e6      	bls.n	801c030 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 801c062:	687b      	ldr	r3, [r7, #4]
 801c064:	881b      	ldrh	r3, [r3, #0]
 801c066:	2b00      	cmp	r3, #0
 801c068:	d1da      	bne.n	801c020 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 801c06a:	69fb      	ldr	r3, [r7, #28]
 801c06c:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 801c06e:	2307      	movs	r3, #7
 801c070:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 801c072:	683b      	ldr	r3, [r7, #0]
 801c074:	b2db      	uxtb	r3, r3
 801c076:	f003 030f 	and.w	r3, r3, #15
 801c07a:	b2db      	uxtb	r3, r3
 801c07c:	3330      	adds	r3, #48	@ 0x30
 801c07e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 801c082:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801c086:	2b39      	cmp	r3, #57	@ 0x39
 801c088:	d904      	bls.n	801c094 <gen_numname+0x98>
 801c08a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801c08e:	3307      	adds	r3, #7
 801c090:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 801c094:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c096:	1e5a      	subs	r2, r3, #1
 801c098:	62ba      	str	r2, [r7, #40]	@ 0x28
 801c09a:	3330      	adds	r3, #48	@ 0x30
 801c09c:	443b      	add	r3, r7
 801c09e:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 801c0a2:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 801c0a6:	683b      	ldr	r3, [r7, #0]
 801c0a8:	091b      	lsrs	r3, r3, #4
 801c0aa:	603b      	str	r3, [r7, #0]
	} while (seq);
 801c0ac:	683b      	ldr	r3, [r7, #0]
 801c0ae:	2b00      	cmp	r3, #0
 801c0b0:	d1df      	bne.n	801c072 <gen_numname+0x76>
	ns[i] = '~';
 801c0b2:	f107 0214 	add.w	r2, r7, #20
 801c0b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c0b8:	4413      	add	r3, r2
 801c0ba:	227e      	movs	r2, #126	@ 0x7e
 801c0bc:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 801c0be:	2300      	movs	r3, #0
 801c0c0:	627b      	str	r3, [r7, #36]	@ 0x24
 801c0c2:	e002      	b.n	801c0ca <gen_numname+0xce>
 801c0c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c0c6:	3301      	adds	r3, #1
 801c0c8:	627b      	str	r3, [r7, #36]	@ 0x24
 801c0ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801c0cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c0ce:	429a      	cmp	r2, r3
 801c0d0:	d205      	bcs.n	801c0de <gen_numname+0xe2>
 801c0d2:	68fa      	ldr	r2, [r7, #12]
 801c0d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c0d6:	4413      	add	r3, r2
 801c0d8:	781b      	ldrb	r3, [r3, #0]
 801c0da:	2b20      	cmp	r3, #32
 801c0dc:	d1f2      	bne.n	801c0c4 <gen_numname+0xc8>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 801c0de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c0e0:	2b07      	cmp	r3, #7
 801c0e2:	d807      	bhi.n	801c0f4 <gen_numname+0xf8>
 801c0e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c0e6:	1c5a      	adds	r2, r3, #1
 801c0e8:	62ba      	str	r2, [r7, #40]	@ 0x28
 801c0ea:	3330      	adds	r3, #48	@ 0x30
 801c0ec:	443b      	add	r3, r7
 801c0ee:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 801c0f2:	e000      	b.n	801c0f6 <gen_numname+0xfa>
 801c0f4:	2120      	movs	r1, #32
 801c0f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c0f8:	1c5a      	adds	r2, r3, #1
 801c0fa:	627a      	str	r2, [r7, #36]	@ 0x24
 801c0fc:	68fa      	ldr	r2, [r7, #12]
 801c0fe:	4413      	add	r3, r2
 801c100:	460a      	mov	r2, r1
 801c102:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 801c104:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c106:	2b07      	cmp	r3, #7
 801c108:	d9e9      	bls.n	801c0de <gen_numname+0xe2>
}
 801c10a:	bf00      	nop
 801c10c:	bf00      	nop
 801c10e:	3730      	adds	r7, #48	@ 0x30
 801c110:	46bd      	mov	sp, r7
 801c112:	bd80      	pop	{r7, pc}
 801c114:	00011021 	.word	0x00011021

0801c118 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 801c118:	b480      	push	{r7}
 801c11a:	b085      	sub	sp, #20
 801c11c:	af00      	add	r7, sp, #0
 801c11e:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 801c120:	2300      	movs	r3, #0
 801c122:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 801c124:	230b      	movs	r3, #11
 801c126:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 801c128:	7bfb      	ldrb	r3, [r7, #15]
 801c12a:	b2da      	uxtb	r2, r3
 801c12c:	0852      	lsrs	r2, r2, #1
 801c12e:	01db      	lsls	r3, r3, #7
 801c130:	4313      	orrs	r3, r2
 801c132:	b2da      	uxtb	r2, r3
 801c134:	687b      	ldr	r3, [r7, #4]
 801c136:	1c59      	adds	r1, r3, #1
 801c138:	6079      	str	r1, [r7, #4]
 801c13a:	781b      	ldrb	r3, [r3, #0]
 801c13c:	4413      	add	r3, r2
 801c13e:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 801c140:	68bb      	ldr	r3, [r7, #8]
 801c142:	3b01      	subs	r3, #1
 801c144:	60bb      	str	r3, [r7, #8]
 801c146:	68bb      	ldr	r3, [r7, #8]
 801c148:	2b00      	cmp	r3, #0
 801c14a:	d1ed      	bne.n	801c128 <sum_sfn+0x10>
	return sum;
 801c14c:	7bfb      	ldrb	r3, [r7, #15]
}
 801c14e:	4618      	mov	r0, r3
 801c150:	3714      	adds	r7, #20
 801c152:	46bd      	mov	sp, r7
 801c154:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c158:	4770      	bx	lr

0801c15a <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 801c15a:	b580      	push	{r7, lr}
 801c15c:	b086      	sub	sp, #24
 801c15e:	af00      	add	r7, sp, #0
 801c160:	6078      	str	r0, [r7, #4]
 801c162:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 801c164:	2304      	movs	r3, #4
 801c166:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 801c168:	687b      	ldr	r3, [r7, #4]
 801c16a:	681b      	ldr	r3, [r3, #0]
 801c16c:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 801c16e:	23ff      	movs	r3, #255	@ 0xff
 801c170:	757b      	strb	r3, [r7, #21]
 801c172:	23ff      	movs	r3, #255	@ 0xff
 801c174:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 801c176:	e081      	b.n	801c27c <dir_read+0x122>
		res = move_window(fs, dp->sect);
 801c178:	687b      	ldr	r3, [r7, #4]
 801c17a:	69db      	ldr	r3, [r3, #28]
 801c17c:	4619      	mov	r1, r3
 801c17e:	6938      	ldr	r0, [r7, #16]
 801c180:	f7ff f83c 	bl	801b1fc <move_window>
 801c184:	4603      	mov	r3, r0
 801c186:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801c188:	7dfb      	ldrb	r3, [r7, #23]
 801c18a:	2b00      	cmp	r3, #0
 801c18c:	d17c      	bne.n	801c288 <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 801c18e:	687b      	ldr	r3, [r7, #4]
 801c190:	6a1b      	ldr	r3, [r3, #32]
 801c192:	781b      	ldrb	r3, [r3, #0]
 801c194:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 801c196:	7dbb      	ldrb	r3, [r7, #22]
 801c198:	2b00      	cmp	r3, #0
 801c19a:	d102      	bne.n	801c1a2 <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 801c19c:	2304      	movs	r3, #4
 801c19e:	75fb      	strb	r3, [r7, #23]
 801c1a0:	e077      	b.n	801c292 <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 801c1a2:	687b      	ldr	r3, [r7, #4]
 801c1a4:	6a1b      	ldr	r3, [r3, #32]
 801c1a6:	330b      	adds	r3, #11
 801c1a8:	781b      	ldrb	r3, [r3, #0]
 801c1aa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801c1ae:	73fb      	strb	r3, [r7, #15]
 801c1b0:	687b      	ldr	r3, [r7, #4]
 801c1b2:	7bfa      	ldrb	r2, [r7, #15]
 801c1b4:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 801c1b6:	7dbb      	ldrb	r3, [r7, #22]
 801c1b8:	2be5      	cmp	r3, #229	@ 0xe5
 801c1ba:	d00e      	beq.n	801c1da <dir_read+0x80>
 801c1bc:	7dbb      	ldrb	r3, [r7, #22]
 801c1be:	2b2e      	cmp	r3, #46	@ 0x2e
 801c1c0:	d00b      	beq.n	801c1da <dir_read+0x80>
 801c1c2:	7bfb      	ldrb	r3, [r7, #15]
 801c1c4:	f023 0320 	bic.w	r3, r3, #32
 801c1c8:	2b08      	cmp	r3, #8
 801c1ca:	bf0c      	ite	eq
 801c1cc:	2301      	moveq	r3, #1
 801c1ce:	2300      	movne	r3, #0
 801c1d0:	b2db      	uxtb	r3, r3
 801c1d2:	461a      	mov	r2, r3
 801c1d4:	683b      	ldr	r3, [r7, #0]
 801c1d6:	4293      	cmp	r3, r2
 801c1d8:	d002      	beq.n	801c1e0 <dir_read+0x86>
				ord = 0xFF;
 801c1da:	23ff      	movs	r3, #255	@ 0xff
 801c1dc:	757b      	strb	r3, [r7, #21]
 801c1de:	e044      	b.n	801c26a <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 801c1e0:	7bfb      	ldrb	r3, [r7, #15]
 801c1e2:	2b0f      	cmp	r3, #15
 801c1e4:	d12f      	bne.n	801c246 <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 801c1e6:	7dbb      	ldrb	r3, [r7, #22]
 801c1e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801c1ec:	2b00      	cmp	r3, #0
 801c1ee:	d00d      	beq.n	801c20c <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 801c1f0:	687b      	ldr	r3, [r7, #4]
 801c1f2:	6a1b      	ldr	r3, [r3, #32]
 801c1f4:	7b5b      	ldrb	r3, [r3, #13]
 801c1f6:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 801c1f8:	7dbb      	ldrb	r3, [r7, #22]
 801c1fa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801c1fe:	75bb      	strb	r3, [r7, #22]
 801c200:	7dbb      	ldrb	r3, [r7, #22]
 801c202:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 801c204:	687b      	ldr	r3, [r7, #4]
 801c206:	695a      	ldr	r2, [r3, #20]
 801c208:	687b      	ldr	r3, [r7, #4]
 801c20a:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 801c20c:	7dba      	ldrb	r2, [r7, #22]
 801c20e:	7d7b      	ldrb	r3, [r7, #21]
 801c210:	429a      	cmp	r2, r3
 801c212:	d115      	bne.n	801c240 <dir_read+0xe6>
 801c214:	687b      	ldr	r3, [r7, #4]
 801c216:	6a1b      	ldr	r3, [r3, #32]
 801c218:	330d      	adds	r3, #13
 801c21a:	781b      	ldrb	r3, [r3, #0]
 801c21c:	7d3a      	ldrb	r2, [r7, #20]
 801c21e:	429a      	cmp	r2, r3
 801c220:	d10e      	bne.n	801c240 <dir_read+0xe6>
 801c222:	693b      	ldr	r3, [r7, #16]
 801c224:	691a      	ldr	r2, [r3, #16]
 801c226:	687b      	ldr	r3, [r7, #4]
 801c228:	6a1b      	ldr	r3, [r3, #32]
 801c22a:	4619      	mov	r1, r3
 801c22c:	4610      	mov	r0, r2
 801c22e:	f7ff fe19 	bl	801be64 <pick_lfn>
 801c232:	4603      	mov	r3, r0
 801c234:	2b00      	cmp	r3, #0
 801c236:	d003      	beq.n	801c240 <dir_read+0xe6>
 801c238:	7d7b      	ldrb	r3, [r7, #21]
 801c23a:	3b01      	subs	r3, #1
 801c23c:	b2db      	uxtb	r3, r3
 801c23e:	e000      	b.n	801c242 <dir_read+0xe8>
 801c240:	23ff      	movs	r3, #255	@ 0xff
 801c242:	757b      	strb	r3, [r7, #21]
 801c244:	e011      	b.n	801c26a <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 801c246:	7d7b      	ldrb	r3, [r7, #21]
 801c248:	2b00      	cmp	r3, #0
 801c24a:	d109      	bne.n	801c260 <dir_read+0x106>
 801c24c:	687b      	ldr	r3, [r7, #4]
 801c24e:	6a1b      	ldr	r3, [r3, #32]
 801c250:	4618      	mov	r0, r3
 801c252:	f7ff ff61 	bl	801c118 <sum_sfn>
 801c256:	4603      	mov	r3, r0
 801c258:	461a      	mov	r2, r3
 801c25a:	7d3b      	ldrb	r3, [r7, #20]
 801c25c:	4293      	cmp	r3, r2
 801c25e:	d015      	beq.n	801c28c <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 801c260:	687b      	ldr	r3, [r7, #4]
 801c262:	f04f 32ff 	mov.w	r2, #4294967295
 801c266:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					break;
 801c268:	e010      	b.n	801c28c <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 801c26a:	2100      	movs	r1, #0
 801c26c:	6878      	ldr	r0, [r7, #4]
 801c26e:	f7ff fc2d 	bl	801bacc <dir_next>
 801c272:	4603      	mov	r3, r0
 801c274:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801c276:	7dfb      	ldrb	r3, [r7, #23]
 801c278:	2b00      	cmp	r3, #0
 801c27a:	d109      	bne.n	801c290 <dir_read+0x136>
	while (dp->sect) {
 801c27c:	687b      	ldr	r3, [r7, #4]
 801c27e:	69db      	ldr	r3, [r3, #28]
 801c280:	2b00      	cmp	r3, #0
 801c282:	f47f af79 	bne.w	801c178 <dir_read+0x1e>
 801c286:	e004      	b.n	801c292 <dir_read+0x138>
		if (res != FR_OK) break;
 801c288:	bf00      	nop
 801c28a:	e002      	b.n	801c292 <dir_read+0x138>
					break;
 801c28c:	bf00      	nop
 801c28e:	e000      	b.n	801c292 <dir_read+0x138>
		if (res != FR_OK) break;
 801c290:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 801c292:	7dfb      	ldrb	r3, [r7, #23]
 801c294:	2b00      	cmp	r3, #0
 801c296:	d002      	beq.n	801c29e <dir_read+0x144>
 801c298:	687b      	ldr	r3, [r7, #4]
 801c29a:	2200      	movs	r2, #0
 801c29c:	61da      	str	r2, [r3, #28]
	return res;
 801c29e:	7dfb      	ldrb	r3, [r7, #23]
}
 801c2a0:	4618      	mov	r0, r3
 801c2a2:	3718      	adds	r7, #24
 801c2a4:	46bd      	mov	sp, r7
 801c2a6:	bd80      	pop	{r7, pc}

0801c2a8 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 801c2a8:	b580      	push	{r7, lr}
 801c2aa:	b086      	sub	sp, #24
 801c2ac:	af00      	add	r7, sp, #0
 801c2ae:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801c2b0:	687b      	ldr	r3, [r7, #4]
 801c2b2:	681b      	ldr	r3, [r3, #0]
 801c2b4:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 801c2b6:	2100      	movs	r1, #0
 801c2b8:	6878      	ldr	r0, [r7, #4]
 801c2ba:	f7ff fb7e 	bl	801b9ba <dir_sdi>
 801c2be:	4603      	mov	r3, r0
 801c2c0:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 801c2c2:	7dfb      	ldrb	r3, [r7, #23]
 801c2c4:	2b00      	cmp	r3, #0
 801c2c6:	d001      	beq.n	801c2cc <dir_find+0x24>
 801c2c8:	7dfb      	ldrb	r3, [r7, #23]
 801c2ca:	e0a9      	b.n	801c420 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 801c2cc:	23ff      	movs	r3, #255	@ 0xff
 801c2ce:	753b      	strb	r3, [r7, #20]
 801c2d0:	7d3b      	ldrb	r3, [r7, #20]
 801c2d2:	757b      	strb	r3, [r7, #21]
 801c2d4:	687b      	ldr	r3, [r7, #4]
 801c2d6:	f04f 32ff 	mov.w	r2, #4294967295
 801c2da:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 801c2dc:	687b      	ldr	r3, [r7, #4]
 801c2de:	69db      	ldr	r3, [r3, #28]
 801c2e0:	4619      	mov	r1, r3
 801c2e2:	6938      	ldr	r0, [r7, #16]
 801c2e4:	f7fe ff8a 	bl	801b1fc <move_window>
 801c2e8:	4603      	mov	r3, r0
 801c2ea:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801c2ec:	7dfb      	ldrb	r3, [r7, #23]
 801c2ee:	2b00      	cmp	r3, #0
 801c2f0:	f040 8090 	bne.w	801c414 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 801c2f4:	687b      	ldr	r3, [r7, #4]
 801c2f6:	6a1b      	ldr	r3, [r3, #32]
 801c2f8:	781b      	ldrb	r3, [r3, #0]
 801c2fa:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 801c2fc:	7dbb      	ldrb	r3, [r7, #22]
 801c2fe:	2b00      	cmp	r3, #0
 801c300:	d102      	bne.n	801c308 <dir_find+0x60>
 801c302:	2304      	movs	r3, #4
 801c304:	75fb      	strb	r3, [r7, #23]
 801c306:	e08a      	b.n	801c41e <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 801c308:	687b      	ldr	r3, [r7, #4]
 801c30a:	6a1b      	ldr	r3, [r3, #32]
 801c30c:	330b      	adds	r3, #11
 801c30e:	781b      	ldrb	r3, [r3, #0]
 801c310:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801c314:	73fb      	strb	r3, [r7, #15]
 801c316:	687b      	ldr	r3, [r7, #4]
 801c318:	7bfa      	ldrb	r2, [r7, #15]
 801c31a:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 801c31c:	7dbb      	ldrb	r3, [r7, #22]
 801c31e:	2be5      	cmp	r3, #229	@ 0xe5
 801c320:	d007      	beq.n	801c332 <dir_find+0x8a>
 801c322:	7bfb      	ldrb	r3, [r7, #15]
 801c324:	f003 0308 	and.w	r3, r3, #8
 801c328:	2b00      	cmp	r3, #0
 801c32a:	d009      	beq.n	801c340 <dir_find+0x98>
 801c32c:	7bfb      	ldrb	r3, [r7, #15]
 801c32e:	2b0f      	cmp	r3, #15
 801c330:	d006      	beq.n	801c340 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 801c332:	23ff      	movs	r3, #255	@ 0xff
 801c334:	757b      	strb	r3, [r7, #21]
 801c336:	687b      	ldr	r3, [r7, #4]
 801c338:	f04f 32ff 	mov.w	r2, #4294967295
 801c33c:	631a      	str	r2, [r3, #48]	@ 0x30
 801c33e:	e05e      	b.n	801c3fe <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 801c340:	7bfb      	ldrb	r3, [r7, #15]
 801c342:	2b0f      	cmp	r3, #15
 801c344:	d136      	bne.n	801c3b4 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 801c346:	687b      	ldr	r3, [r7, #4]
 801c348:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 801c34c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801c350:	2b00      	cmp	r3, #0
 801c352:	d154      	bne.n	801c3fe <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 801c354:	7dbb      	ldrb	r3, [r7, #22]
 801c356:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801c35a:	2b00      	cmp	r3, #0
 801c35c:	d00d      	beq.n	801c37a <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 801c35e:	687b      	ldr	r3, [r7, #4]
 801c360:	6a1b      	ldr	r3, [r3, #32]
 801c362:	7b5b      	ldrb	r3, [r3, #13]
 801c364:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 801c366:	7dbb      	ldrb	r3, [r7, #22]
 801c368:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801c36c:	75bb      	strb	r3, [r7, #22]
 801c36e:	7dbb      	ldrb	r3, [r7, #22]
 801c370:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 801c372:	687b      	ldr	r3, [r7, #4]
 801c374:	695a      	ldr	r2, [r3, #20]
 801c376:	687b      	ldr	r3, [r7, #4]
 801c378:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 801c37a:	7dba      	ldrb	r2, [r7, #22]
 801c37c:	7d7b      	ldrb	r3, [r7, #21]
 801c37e:	429a      	cmp	r2, r3
 801c380:	d115      	bne.n	801c3ae <dir_find+0x106>
 801c382:	687b      	ldr	r3, [r7, #4]
 801c384:	6a1b      	ldr	r3, [r3, #32]
 801c386:	330d      	adds	r3, #13
 801c388:	781b      	ldrb	r3, [r3, #0]
 801c38a:	7d3a      	ldrb	r2, [r7, #20]
 801c38c:	429a      	cmp	r2, r3
 801c38e:	d10e      	bne.n	801c3ae <dir_find+0x106>
 801c390:	693b      	ldr	r3, [r7, #16]
 801c392:	691a      	ldr	r2, [r3, #16]
 801c394:	687b      	ldr	r3, [r7, #4]
 801c396:	6a1b      	ldr	r3, [r3, #32]
 801c398:	4619      	mov	r1, r3
 801c39a:	4610      	mov	r0, r2
 801c39c:	f7ff fcf2 	bl	801bd84 <cmp_lfn>
 801c3a0:	4603      	mov	r3, r0
 801c3a2:	2b00      	cmp	r3, #0
 801c3a4:	d003      	beq.n	801c3ae <dir_find+0x106>
 801c3a6:	7d7b      	ldrb	r3, [r7, #21]
 801c3a8:	3b01      	subs	r3, #1
 801c3aa:	b2db      	uxtb	r3, r3
 801c3ac:	e000      	b.n	801c3b0 <dir_find+0x108>
 801c3ae:	23ff      	movs	r3, #255	@ 0xff
 801c3b0:	757b      	strb	r3, [r7, #21]
 801c3b2:	e024      	b.n	801c3fe <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 801c3b4:	7d7b      	ldrb	r3, [r7, #21]
 801c3b6:	2b00      	cmp	r3, #0
 801c3b8:	d109      	bne.n	801c3ce <dir_find+0x126>
 801c3ba:	687b      	ldr	r3, [r7, #4]
 801c3bc:	6a1b      	ldr	r3, [r3, #32]
 801c3be:	4618      	mov	r0, r3
 801c3c0:	f7ff feaa 	bl	801c118 <sum_sfn>
 801c3c4:	4603      	mov	r3, r0
 801c3c6:	461a      	mov	r2, r3
 801c3c8:	7d3b      	ldrb	r3, [r7, #20]
 801c3ca:	4293      	cmp	r3, r2
 801c3cc:	d024      	beq.n	801c418 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 801c3ce:	687b      	ldr	r3, [r7, #4]
 801c3d0:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 801c3d4:	f003 0301 	and.w	r3, r3, #1
 801c3d8:	2b00      	cmp	r3, #0
 801c3da:	d10a      	bne.n	801c3f2 <dir_find+0x14a>
 801c3dc:	687b      	ldr	r3, [r7, #4]
 801c3de:	6a18      	ldr	r0, [r3, #32]
 801c3e0:	687b      	ldr	r3, [r7, #4]
 801c3e2:	3324      	adds	r3, #36	@ 0x24
 801c3e4:	220b      	movs	r2, #11
 801c3e6:	4619      	mov	r1, r3
 801c3e8:	f7fe fd16 	bl	801ae18 <mem_cmp>
 801c3ec:	4603      	mov	r3, r0
 801c3ee:	2b00      	cmp	r3, #0
 801c3f0:	d014      	beq.n	801c41c <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 801c3f2:	23ff      	movs	r3, #255	@ 0xff
 801c3f4:	757b      	strb	r3, [r7, #21]
 801c3f6:	687b      	ldr	r3, [r7, #4]
 801c3f8:	f04f 32ff 	mov.w	r2, #4294967295
 801c3fc:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 801c3fe:	2100      	movs	r1, #0
 801c400:	6878      	ldr	r0, [r7, #4]
 801c402:	f7ff fb63 	bl	801bacc <dir_next>
 801c406:	4603      	mov	r3, r0
 801c408:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 801c40a:	7dfb      	ldrb	r3, [r7, #23]
 801c40c:	2b00      	cmp	r3, #0
 801c40e:	f43f af65 	beq.w	801c2dc <dir_find+0x34>
 801c412:	e004      	b.n	801c41e <dir_find+0x176>
		if (res != FR_OK) break;
 801c414:	bf00      	nop
 801c416:	e002      	b.n	801c41e <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 801c418:	bf00      	nop
 801c41a:	e000      	b.n	801c41e <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 801c41c:	bf00      	nop

	return res;
 801c41e:	7dfb      	ldrb	r3, [r7, #23]
}
 801c420:	4618      	mov	r0, r3
 801c422:	3718      	adds	r7, #24
 801c424:	46bd      	mov	sp, r7
 801c426:	bd80      	pop	{r7, pc}

0801c428 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 801c428:	b580      	push	{r7, lr}
 801c42a:	b08c      	sub	sp, #48	@ 0x30
 801c42c:	af00      	add	r7, sp, #0
 801c42e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801c430:	687b      	ldr	r3, [r7, #4]
 801c432:	681b      	ldr	r3, [r3, #0]
 801c434:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 801c436:	687b      	ldr	r3, [r7, #4]
 801c438:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 801c43c:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 801c440:	2b00      	cmp	r3, #0
 801c442:	d001      	beq.n	801c448 <dir_register+0x20>
 801c444:	2306      	movs	r3, #6
 801c446:	e0e0      	b.n	801c60a <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 801c448:	2300      	movs	r3, #0
 801c44a:	627b      	str	r3, [r7, #36]	@ 0x24
 801c44c:	e002      	b.n	801c454 <dir_register+0x2c>
 801c44e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c450:	3301      	adds	r3, #1
 801c452:	627b      	str	r3, [r7, #36]	@ 0x24
 801c454:	69fb      	ldr	r3, [r7, #28]
 801c456:	691a      	ldr	r2, [r3, #16]
 801c458:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c45a:	005b      	lsls	r3, r3, #1
 801c45c:	4413      	add	r3, r2
 801c45e:	881b      	ldrh	r3, [r3, #0]
 801c460:	2b00      	cmp	r3, #0
 801c462:	d1f4      	bne.n	801c44e <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 801c464:	687b      	ldr	r3, [r7, #4]
 801c466:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 801c46a:	f107 030c 	add.w	r3, r7, #12
 801c46e:	220c      	movs	r2, #12
 801c470:	4618      	mov	r0, r3
 801c472:	f7fe fc95 	bl	801ada0 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 801c476:	7dfb      	ldrb	r3, [r7, #23]
 801c478:	f003 0301 	and.w	r3, r3, #1
 801c47c:	2b00      	cmp	r3, #0
 801c47e:	d032      	beq.n	801c4e6 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 801c480:	687b      	ldr	r3, [r7, #4]
 801c482:	2240      	movs	r2, #64	@ 0x40
 801c484:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 801c488:	2301      	movs	r3, #1
 801c48a:	62bb      	str	r3, [r7, #40]	@ 0x28
 801c48c:	e016      	b.n	801c4bc <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 801c48e:	687b      	ldr	r3, [r7, #4]
 801c490:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 801c494:	69fb      	ldr	r3, [r7, #28]
 801c496:	691a      	ldr	r2, [r3, #16]
 801c498:	f107 010c 	add.w	r1, r7, #12
 801c49c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c49e:	f7ff fdad 	bl	801bffc <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 801c4a2:	6878      	ldr	r0, [r7, #4]
 801c4a4:	f7ff ff00 	bl	801c2a8 <dir_find>
 801c4a8:	4603      	mov	r3, r0
 801c4aa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 801c4ae:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801c4b2:	2b00      	cmp	r3, #0
 801c4b4:	d106      	bne.n	801c4c4 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 801c4b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c4b8:	3301      	adds	r3, #1
 801c4ba:	62bb      	str	r3, [r7, #40]	@ 0x28
 801c4bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c4be:	2b63      	cmp	r3, #99	@ 0x63
 801c4c0:	d9e5      	bls.n	801c48e <dir_register+0x66>
 801c4c2:	e000      	b.n	801c4c6 <dir_register+0x9e>
			if (res != FR_OK) break;
 801c4c4:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 801c4c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c4c8:	2b64      	cmp	r3, #100	@ 0x64
 801c4ca:	d101      	bne.n	801c4d0 <dir_register+0xa8>
 801c4cc:	2307      	movs	r3, #7
 801c4ce:	e09c      	b.n	801c60a <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 801c4d0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801c4d4:	2b04      	cmp	r3, #4
 801c4d6:	d002      	beq.n	801c4de <dir_register+0xb6>
 801c4d8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801c4dc:	e095      	b.n	801c60a <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 801c4de:	7dfa      	ldrb	r2, [r7, #23]
 801c4e0:	687b      	ldr	r3, [r7, #4]
 801c4e2:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 801c4e6:	7dfb      	ldrb	r3, [r7, #23]
 801c4e8:	f003 0302 	and.w	r3, r3, #2
 801c4ec:	2b00      	cmp	r3, #0
 801c4ee:	d007      	beq.n	801c500 <dir_register+0xd8>
 801c4f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c4f2:	330c      	adds	r3, #12
 801c4f4:	4a47      	ldr	r2, [pc, #284]	@ (801c614 <dir_register+0x1ec>)
 801c4f6:	fba2 2303 	umull	r2, r3, r2, r3
 801c4fa:	089b      	lsrs	r3, r3, #2
 801c4fc:	3301      	adds	r3, #1
 801c4fe:	e000      	b.n	801c502 <dir_register+0xda>
 801c500:	2301      	movs	r3, #1
 801c502:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 801c504:	6a39      	ldr	r1, [r7, #32]
 801c506:	6878      	ldr	r0, [r7, #4]
 801c508:	f7ff fbb6 	bl	801bc78 <dir_alloc>
 801c50c:	4603      	mov	r3, r0
 801c50e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 801c512:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801c516:	2b00      	cmp	r3, #0
 801c518:	d148      	bne.n	801c5ac <dir_register+0x184>
 801c51a:	6a3b      	ldr	r3, [r7, #32]
 801c51c:	3b01      	subs	r3, #1
 801c51e:	623b      	str	r3, [r7, #32]
 801c520:	6a3b      	ldr	r3, [r7, #32]
 801c522:	2b00      	cmp	r3, #0
 801c524:	d042      	beq.n	801c5ac <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 801c526:	687b      	ldr	r3, [r7, #4]
 801c528:	695a      	ldr	r2, [r3, #20]
 801c52a:	6a3b      	ldr	r3, [r7, #32]
 801c52c:	015b      	lsls	r3, r3, #5
 801c52e:	1ad3      	subs	r3, r2, r3
 801c530:	4619      	mov	r1, r3
 801c532:	6878      	ldr	r0, [r7, #4]
 801c534:	f7ff fa41 	bl	801b9ba <dir_sdi>
 801c538:	4603      	mov	r3, r0
 801c53a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 801c53e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801c542:	2b00      	cmp	r3, #0
 801c544:	d132      	bne.n	801c5ac <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 801c546:	687b      	ldr	r3, [r7, #4]
 801c548:	3324      	adds	r3, #36	@ 0x24
 801c54a:	4618      	mov	r0, r3
 801c54c:	f7ff fde4 	bl	801c118 <sum_sfn>
 801c550:	4603      	mov	r3, r0
 801c552:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 801c554:	687b      	ldr	r3, [r7, #4]
 801c556:	69db      	ldr	r3, [r3, #28]
 801c558:	4619      	mov	r1, r3
 801c55a:	69f8      	ldr	r0, [r7, #28]
 801c55c:	f7fe fe4e 	bl	801b1fc <move_window>
 801c560:	4603      	mov	r3, r0
 801c562:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 801c566:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801c56a:	2b00      	cmp	r3, #0
 801c56c:	d11d      	bne.n	801c5aa <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 801c56e:	69fb      	ldr	r3, [r7, #28]
 801c570:	6918      	ldr	r0, [r3, #16]
 801c572:	687b      	ldr	r3, [r7, #4]
 801c574:	6a19      	ldr	r1, [r3, #32]
 801c576:	6a3b      	ldr	r3, [r7, #32]
 801c578:	b2da      	uxtb	r2, r3
 801c57a:	7efb      	ldrb	r3, [r7, #27]
 801c57c:	f7ff fcd6 	bl	801bf2c <put_lfn>
				fs->wflag = 1;
 801c580:	69fb      	ldr	r3, [r7, #28]
 801c582:	2201      	movs	r2, #1
 801c584:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 801c586:	2100      	movs	r1, #0
 801c588:	6878      	ldr	r0, [r7, #4]
 801c58a:	f7ff fa9f 	bl	801bacc <dir_next>
 801c58e:	4603      	mov	r3, r0
 801c590:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 801c594:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801c598:	2b00      	cmp	r3, #0
 801c59a:	d107      	bne.n	801c5ac <dir_register+0x184>
 801c59c:	6a3b      	ldr	r3, [r7, #32]
 801c59e:	3b01      	subs	r3, #1
 801c5a0:	623b      	str	r3, [r7, #32]
 801c5a2:	6a3b      	ldr	r3, [r7, #32]
 801c5a4:	2b00      	cmp	r3, #0
 801c5a6:	d1d5      	bne.n	801c554 <dir_register+0x12c>
 801c5a8:	e000      	b.n	801c5ac <dir_register+0x184>
				if (res != FR_OK) break;
 801c5aa:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 801c5ac:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801c5b0:	2b00      	cmp	r3, #0
 801c5b2:	d128      	bne.n	801c606 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 801c5b4:	687b      	ldr	r3, [r7, #4]
 801c5b6:	69db      	ldr	r3, [r3, #28]
 801c5b8:	4619      	mov	r1, r3
 801c5ba:	69f8      	ldr	r0, [r7, #28]
 801c5bc:	f7fe fe1e 	bl	801b1fc <move_window>
 801c5c0:	4603      	mov	r3, r0
 801c5c2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 801c5c6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801c5ca:	2b00      	cmp	r3, #0
 801c5cc:	d11b      	bne.n	801c606 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 801c5ce:	687b      	ldr	r3, [r7, #4]
 801c5d0:	6a1b      	ldr	r3, [r3, #32]
 801c5d2:	2220      	movs	r2, #32
 801c5d4:	2100      	movs	r1, #0
 801c5d6:	4618      	mov	r0, r3
 801c5d8:	f7fe fc03 	bl	801ade2 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 801c5dc:	687b      	ldr	r3, [r7, #4]
 801c5de:	6a18      	ldr	r0, [r3, #32]
 801c5e0:	687b      	ldr	r3, [r7, #4]
 801c5e2:	3324      	adds	r3, #36	@ 0x24
 801c5e4:	220b      	movs	r2, #11
 801c5e6:	4619      	mov	r1, r3
 801c5e8:	f7fe fbda 	bl	801ada0 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 801c5ec:	687b      	ldr	r3, [r7, #4]
 801c5ee:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 801c5f2:	687b      	ldr	r3, [r7, #4]
 801c5f4:	6a1b      	ldr	r3, [r3, #32]
 801c5f6:	330c      	adds	r3, #12
 801c5f8:	f002 0218 	and.w	r2, r2, #24
 801c5fc:	b2d2      	uxtb	r2, r2
 801c5fe:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 801c600:	69fb      	ldr	r3, [r7, #28]
 801c602:	2201      	movs	r2, #1
 801c604:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 801c606:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 801c60a:	4618      	mov	r0, r3
 801c60c:	3730      	adds	r7, #48	@ 0x30
 801c60e:	46bd      	mov	sp, r7
 801c610:	bd80      	pop	{r7, pc}
 801c612:	bf00      	nop
 801c614:	4ec4ec4f 	.word	0x4ec4ec4f

0801c618 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 801c618:	b580      	push	{r7, lr}
 801c61a:	b086      	sub	sp, #24
 801c61c:	af00      	add	r7, sp, #0
 801c61e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801c620:	687b      	ldr	r3, [r7, #4]
 801c622:	681b      	ldr	r3, [r3, #0]
 801c624:	613b      	str	r3, [r7, #16]
#if _USE_LFN != 0	/* LFN configuration */
	DWORD last = dp->dptr;
 801c626:	687b      	ldr	r3, [r7, #4]
 801c628:	695b      	ldr	r3, [r3, #20]
 801c62a:	60fb      	str	r3, [r7, #12]

	res = (dp->blk_ofs == 0xFFFFFFFF) ? FR_OK : dir_sdi(dp, dp->blk_ofs);	/* Goto top of the entry block if LFN is exist */
 801c62c:	687b      	ldr	r3, [r7, #4]
 801c62e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801c630:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c634:	d007      	beq.n	801c646 <dir_remove+0x2e>
 801c636:	687b      	ldr	r3, [r7, #4]
 801c638:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801c63a:	4619      	mov	r1, r3
 801c63c:	6878      	ldr	r0, [r7, #4]
 801c63e:	f7ff f9bc 	bl	801b9ba <dir_sdi>
 801c642:	4603      	mov	r3, r0
 801c644:	e000      	b.n	801c648 <dir_remove+0x30>
 801c646:	2300      	movs	r3, #0
 801c648:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801c64a:	7dfb      	ldrb	r3, [r7, #23]
 801c64c:	2b00      	cmp	r3, #0
 801c64e:	d128      	bne.n	801c6a2 <dir_remove+0x8a>
		do {
			res = move_window(fs, dp->sect);
 801c650:	687b      	ldr	r3, [r7, #4]
 801c652:	69db      	ldr	r3, [r3, #28]
 801c654:	4619      	mov	r1, r3
 801c656:	6938      	ldr	r0, [r7, #16]
 801c658:	f7fe fdd0 	bl	801b1fc <move_window>
 801c65c:	4603      	mov	r3, r0
 801c65e:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801c660:	7dfb      	ldrb	r3, [r7, #23]
 801c662:	2b00      	cmp	r3, #0
 801c664:	d115      	bne.n	801c692 <dir_remove+0x7a>
			/* Mark an entry 'deleted' */
			if (_FS_EXFAT && fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
				dp->dir[XDIR_Type] &= 0x7F;
			} else {									/* On the FAT12/16/32 volume */
				dp->dir[DIR_Name] = DDEM;
 801c666:	687b      	ldr	r3, [r7, #4]
 801c668:	6a1b      	ldr	r3, [r3, #32]
 801c66a:	22e5      	movs	r2, #229	@ 0xe5
 801c66c:	701a      	strb	r2, [r3, #0]
			}
			fs->wflag = 1;
 801c66e:	693b      	ldr	r3, [r7, #16]
 801c670:	2201      	movs	r2, #1
 801c672:	70da      	strb	r2, [r3, #3]
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 801c674:	687b      	ldr	r3, [r7, #4]
 801c676:	695b      	ldr	r3, [r3, #20]
 801c678:	68fa      	ldr	r2, [r7, #12]
 801c67a:	429a      	cmp	r2, r3
 801c67c:	d90b      	bls.n	801c696 <dir_remove+0x7e>
			res = dir_next(dp, 0);	/* Next entry */
 801c67e:	2100      	movs	r1, #0
 801c680:	6878      	ldr	r0, [r7, #4]
 801c682:	f7ff fa23 	bl	801bacc <dir_next>
 801c686:	4603      	mov	r3, r0
 801c688:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);
 801c68a:	7dfb      	ldrb	r3, [r7, #23]
 801c68c:	2b00      	cmp	r3, #0
 801c68e:	d0df      	beq.n	801c650 <dir_remove+0x38>
 801c690:	e002      	b.n	801c698 <dir_remove+0x80>
			if (res != FR_OK) break;
 801c692:	bf00      	nop
 801c694:	e000      	b.n	801c698 <dir_remove+0x80>
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 801c696:	bf00      	nop
		if (res == FR_NO_FILE) res = FR_INT_ERR;
 801c698:	7dfb      	ldrb	r3, [r7, #23]
 801c69a:	2b04      	cmp	r3, #4
 801c69c:	d101      	bne.n	801c6a2 <dir_remove+0x8a>
 801c69e:	2302      	movs	r3, #2
 801c6a0:	75fb      	strb	r3, [r7, #23]
		dp->dir[DIR_Name] = DDEM;
		fs->wflag = 1;
	}
#endif

	return res;
 801c6a2:	7dfb      	ldrb	r3, [r7, #23]
}
 801c6a4:	4618      	mov	r0, r3
 801c6a6:	3718      	adds	r7, #24
 801c6a8:	46bd      	mov	sp, r7
 801c6aa:	bd80      	pop	{r7, pc}

0801c6ac <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 801c6ac:	b580      	push	{r7, lr}
 801c6ae:	b08a      	sub	sp, #40	@ 0x28
 801c6b0:	af00      	add	r7, sp, #0
 801c6b2:	6078      	str	r0, [r7, #4]
 801c6b4:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 801c6b6:	683b      	ldr	r3, [r7, #0]
 801c6b8:	681b      	ldr	r3, [r3, #0]
 801c6ba:	613b      	str	r3, [r7, #16]
 801c6bc:	687b      	ldr	r3, [r7, #4]
 801c6be:	681b      	ldr	r3, [r3, #0]
 801c6c0:	691b      	ldr	r3, [r3, #16]
 801c6c2:	60fb      	str	r3, [r7, #12]
 801c6c4:	2300      	movs	r3, #0
 801c6c6:	617b      	str	r3, [r7, #20]
 801c6c8:	697b      	ldr	r3, [r7, #20]
 801c6ca:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 801c6cc:	69bb      	ldr	r3, [r7, #24]
 801c6ce:	1c5a      	adds	r2, r3, #1
 801c6d0:	61ba      	str	r2, [r7, #24]
 801c6d2:	693a      	ldr	r2, [r7, #16]
 801c6d4:	4413      	add	r3, r2
 801c6d6:	781b      	ldrb	r3, [r3, #0]
 801c6d8:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 801c6da:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c6dc:	2b1f      	cmp	r3, #31
 801c6de:	d940      	bls.n	801c762 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 801c6e0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c6e2:	2b2f      	cmp	r3, #47	@ 0x2f
 801c6e4:	d006      	beq.n	801c6f4 <create_name+0x48>
 801c6e6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c6e8:	2b5c      	cmp	r3, #92	@ 0x5c
 801c6ea:	d110      	bne.n	801c70e <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 801c6ec:	e002      	b.n	801c6f4 <create_name+0x48>
 801c6ee:	69bb      	ldr	r3, [r7, #24]
 801c6f0:	3301      	adds	r3, #1
 801c6f2:	61bb      	str	r3, [r7, #24]
 801c6f4:	693a      	ldr	r2, [r7, #16]
 801c6f6:	69bb      	ldr	r3, [r7, #24]
 801c6f8:	4413      	add	r3, r2
 801c6fa:	781b      	ldrb	r3, [r3, #0]
 801c6fc:	2b2f      	cmp	r3, #47	@ 0x2f
 801c6fe:	d0f6      	beq.n	801c6ee <create_name+0x42>
 801c700:	693a      	ldr	r2, [r7, #16]
 801c702:	69bb      	ldr	r3, [r7, #24]
 801c704:	4413      	add	r3, r2
 801c706:	781b      	ldrb	r3, [r3, #0]
 801c708:	2b5c      	cmp	r3, #92	@ 0x5c
 801c70a:	d0f0      	beq.n	801c6ee <create_name+0x42>
			break;
 801c70c:	e02a      	b.n	801c764 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 801c70e:	697b      	ldr	r3, [r7, #20]
 801c710:	2bfe      	cmp	r3, #254	@ 0xfe
 801c712:	d901      	bls.n	801c718 <create_name+0x6c>
 801c714:	2306      	movs	r3, #6
 801c716:	e17d      	b.n	801ca14 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 801c718:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c71a:	b2db      	uxtb	r3, r3
 801c71c:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 801c71e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c720:	2101      	movs	r1, #1
 801c722:	4618      	mov	r0, r3
 801c724:	f001 fa98 	bl	801dc58 <ff_convert>
 801c728:	4603      	mov	r3, r0
 801c72a:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 801c72c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c72e:	2b00      	cmp	r3, #0
 801c730:	d101      	bne.n	801c736 <create_name+0x8a>
 801c732:	2306      	movs	r3, #6
 801c734:	e16e      	b.n	801ca14 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 801c736:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c738:	2b7f      	cmp	r3, #127	@ 0x7f
 801c73a:	d809      	bhi.n	801c750 <create_name+0xa4>
 801c73c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c73e:	4619      	mov	r1, r3
 801c740:	488d      	ldr	r0, [pc, #564]	@ (801c978 <create_name+0x2cc>)
 801c742:	f7fe fb90 	bl	801ae66 <chk_chr>
 801c746:	4603      	mov	r3, r0
 801c748:	2b00      	cmp	r3, #0
 801c74a:	d001      	beq.n	801c750 <create_name+0xa4>
 801c74c:	2306      	movs	r3, #6
 801c74e:	e161      	b.n	801ca14 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 801c750:	697b      	ldr	r3, [r7, #20]
 801c752:	1c5a      	adds	r2, r3, #1
 801c754:	617a      	str	r2, [r7, #20]
 801c756:	005b      	lsls	r3, r3, #1
 801c758:	68fa      	ldr	r2, [r7, #12]
 801c75a:	4413      	add	r3, r2
 801c75c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801c75e:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 801c760:	e7b4      	b.n	801c6cc <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 801c762:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 801c764:	693a      	ldr	r2, [r7, #16]
 801c766:	69bb      	ldr	r3, [r7, #24]
 801c768:	441a      	add	r2, r3
 801c76a:	683b      	ldr	r3, [r7, #0]
 801c76c:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 801c76e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c770:	2b1f      	cmp	r3, #31
 801c772:	d801      	bhi.n	801c778 <create_name+0xcc>
 801c774:	2304      	movs	r3, #4
 801c776:	e000      	b.n	801c77a <create_name+0xce>
 801c778:	2300      	movs	r3, #0
 801c77a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 801c77e:	e011      	b.n	801c7a4 <create_name+0xf8>
		w = lfn[di - 1];
 801c780:	697a      	ldr	r2, [r7, #20]
 801c782:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801c786:	4413      	add	r3, r2
 801c788:	005b      	lsls	r3, r3, #1
 801c78a:	68fa      	ldr	r2, [r7, #12]
 801c78c:	4413      	add	r3, r2
 801c78e:	881b      	ldrh	r3, [r3, #0]
 801c790:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 801c792:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c794:	2b20      	cmp	r3, #32
 801c796:	d002      	beq.n	801c79e <create_name+0xf2>
 801c798:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c79a:	2b2e      	cmp	r3, #46	@ 0x2e
 801c79c:	d106      	bne.n	801c7ac <create_name+0x100>
		di--;
 801c79e:	697b      	ldr	r3, [r7, #20]
 801c7a0:	3b01      	subs	r3, #1
 801c7a2:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 801c7a4:	697b      	ldr	r3, [r7, #20]
 801c7a6:	2b00      	cmp	r3, #0
 801c7a8:	d1ea      	bne.n	801c780 <create_name+0xd4>
 801c7aa:	e000      	b.n	801c7ae <create_name+0x102>
		if (w != ' ' && w != '.') break;
 801c7ac:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 801c7ae:	697b      	ldr	r3, [r7, #20]
 801c7b0:	005b      	lsls	r3, r3, #1
 801c7b2:	68fa      	ldr	r2, [r7, #12]
 801c7b4:	4413      	add	r3, r2
 801c7b6:	2200      	movs	r2, #0
 801c7b8:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 801c7ba:	697b      	ldr	r3, [r7, #20]
 801c7bc:	2b00      	cmp	r3, #0
 801c7be:	d101      	bne.n	801c7c4 <create_name+0x118>
 801c7c0:	2306      	movs	r3, #6
 801c7c2:	e127      	b.n	801ca14 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 801c7c4:	687b      	ldr	r3, [r7, #4]
 801c7c6:	3324      	adds	r3, #36	@ 0x24
 801c7c8:	220b      	movs	r2, #11
 801c7ca:	2120      	movs	r1, #32
 801c7cc:	4618      	mov	r0, r3
 801c7ce:	f7fe fb08 	bl	801ade2 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 801c7d2:	2300      	movs	r3, #0
 801c7d4:	61bb      	str	r3, [r7, #24]
 801c7d6:	e002      	b.n	801c7de <create_name+0x132>
 801c7d8:	69bb      	ldr	r3, [r7, #24]
 801c7da:	3301      	adds	r3, #1
 801c7dc:	61bb      	str	r3, [r7, #24]
 801c7de:	69bb      	ldr	r3, [r7, #24]
 801c7e0:	005b      	lsls	r3, r3, #1
 801c7e2:	68fa      	ldr	r2, [r7, #12]
 801c7e4:	4413      	add	r3, r2
 801c7e6:	881b      	ldrh	r3, [r3, #0]
 801c7e8:	2b20      	cmp	r3, #32
 801c7ea:	d0f5      	beq.n	801c7d8 <create_name+0x12c>
 801c7ec:	69bb      	ldr	r3, [r7, #24]
 801c7ee:	005b      	lsls	r3, r3, #1
 801c7f0:	68fa      	ldr	r2, [r7, #12]
 801c7f2:	4413      	add	r3, r2
 801c7f4:	881b      	ldrh	r3, [r3, #0]
 801c7f6:	2b2e      	cmp	r3, #46	@ 0x2e
 801c7f8:	d0ee      	beq.n	801c7d8 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 801c7fa:	69bb      	ldr	r3, [r7, #24]
 801c7fc:	2b00      	cmp	r3, #0
 801c7fe:	d009      	beq.n	801c814 <create_name+0x168>
 801c800:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801c804:	f043 0303 	orr.w	r3, r3, #3
 801c808:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 801c80c:	e002      	b.n	801c814 <create_name+0x168>
 801c80e:	697b      	ldr	r3, [r7, #20]
 801c810:	3b01      	subs	r3, #1
 801c812:	617b      	str	r3, [r7, #20]
 801c814:	697b      	ldr	r3, [r7, #20]
 801c816:	2b00      	cmp	r3, #0
 801c818:	d009      	beq.n	801c82e <create_name+0x182>
 801c81a:	697a      	ldr	r2, [r7, #20]
 801c81c:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801c820:	4413      	add	r3, r2
 801c822:	005b      	lsls	r3, r3, #1
 801c824:	68fa      	ldr	r2, [r7, #12]
 801c826:	4413      	add	r3, r2
 801c828:	881b      	ldrh	r3, [r3, #0]
 801c82a:	2b2e      	cmp	r3, #46	@ 0x2e
 801c82c:	d1ef      	bne.n	801c80e <create_name+0x162>

	i = b = 0; ni = 8;
 801c82e:	2300      	movs	r3, #0
 801c830:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801c834:	2300      	movs	r3, #0
 801c836:	623b      	str	r3, [r7, #32]
 801c838:	2308      	movs	r3, #8
 801c83a:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 801c83c:	69bb      	ldr	r3, [r7, #24]
 801c83e:	1c5a      	adds	r2, r3, #1
 801c840:	61ba      	str	r2, [r7, #24]
 801c842:	005b      	lsls	r3, r3, #1
 801c844:	68fa      	ldr	r2, [r7, #12]
 801c846:	4413      	add	r3, r2
 801c848:	881b      	ldrh	r3, [r3, #0]
 801c84a:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 801c84c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c84e:	2b00      	cmp	r3, #0
 801c850:	f000 8090 	beq.w	801c974 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 801c854:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c856:	2b20      	cmp	r3, #32
 801c858:	d006      	beq.n	801c868 <create_name+0x1bc>
 801c85a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c85c:	2b2e      	cmp	r3, #46	@ 0x2e
 801c85e:	d10a      	bne.n	801c876 <create_name+0x1ca>
 801c860:	69ba      	ldr	r2, [r7, #24]
 801c862:	697b      	ldr	r3, [r7, #20]
 801c864:	429a      	cmp	r2, r3
 801c866:	d006      	beq.n	801c876 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 801c868:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801c86c:	f043 0303 	orr.w	r3, r3, #3
 801c870:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801c874:	e07d      	b.n	801c972 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 801c876:	6a3a      	ldr	r2, [r7, #32]
 801c878:	69fb      	ldr	r3, [r7, #28]
 801c87a:	429a      	cmp	r2, r3
 801c87c:	d203      	bcs.n	801c886 <create_name+0x1da>
 801c87e:	69ba      	ldr	r2, [r7, #24]
 801c880:	697b      	ldr	r3, [r7, #20]
 801c882:	429a      	cmp	r2, r3
 801c884:	d123      	bne.n	801c8ce <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 801c886:	69fb      	ldr	r3, [r7, #28]
 801c888:	2b0b      	cmp	r3, #11
 801c88a:	d106      	bne.n	801c89a <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 801c88c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801c890:	f043 0303 	orr.w	r3, r3, #3
 801c894:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801c898:	e075      	b.n	801c986 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 801c89a:	69ba      	ldr	r2, [r7, #24]
 801c89c:	697b      	ldr	r3, [r7, #20]
 801c89e:	429a      	cmp	r2, r3
 801c8a0:	d005      	beq.n	801c8ae <create_name+0x202>
 801c8a2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801c8a6:	f043 0303 	orr.w	r3, r3, #3
 801c8aa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 801c8ae:	69ba      	ldr	r2, [r7, #24]
 801c8b0:	697b      	ldr	r3, [r7, #20]
 801c8b2:	429a      	cmp	r2, r3
 801c8b4:	d866      	bhi.n	801c984 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 801c8b6:	697b      	ldr	r3, [r7, #20]
 801c8b8:	61bb      	str	r3, [r7, #24]
 801c8ba:	2308      	movs	r3, #8
 801c8bc:	623b      	str	r3, [r7, #32]
 801c8be:	230b      	movs	r3, #11
 801c8c0:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 801c8c2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801c8c6:	009b      	lsls	r3, r3, #2
 801c8c8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801c8cc:	e051      	b.n	801c972 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 801c8ce:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c8d0:	2b7f      	cmp	r3, #127	@ 0x7f
 801c8d2:	d914      	bls.n	801c8fe <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 801c8d4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c8d6:	2100      	movs	r1, #0
 801c8d8:	4618      	mov	r0, r3
 801c8da:	f001 f9bd 	bl	801dc58 <ff_convert>
 801c8de:	4603      	mov	r3, r0
 801c8e0:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 801c8e2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c8e4:	2b00      	cmp	r3, #0
 801c8e6:	d004      	beq.n	801c8f2 <create_name+0x246>
 801c8e8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c8ea:	3b80      	subs	r3, #128	@ 0x80
 801c8ec:	4a23      	ldr	r2, [pc, #140]	@ (801c97c <create_name+0x2d0>)
 801c8ee:	5cd3      	ldrb	r3, [r2, r3]
 801c8f0:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 801c8f2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801c8f6:	f043 0302 	orr.w	r3, r3, #2
 801c8fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 801c8fe:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c900:	2b00      	cmp	r3, #0
 801c902:	d007      	beq.n	801c914 <create_name+0x268>
 801c904:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c906:	4619      	mov	r1, r3
 801c908:	481d      	ldr	r0, [pc, #116]	@ (801c980 <create_name+0x2d4>)
 801c90a:	f7fe faac 	bl	801ae66 <chk_chr>
 801c90e:	4603      	mov	r3, r0
 801c910:	2b00      	cmp	r3, #0
 801c912:	d008      	beq.n	801c926 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 801c914:	235f      	movs	r3, #95	@ 0x5f
 801c916:	84bb      	strh	r3, [r7, #36]	@ 0x24
 801c918:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801c91c:	f043 0303 	orr.w	r3, r3, #3
 801c920:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801c924:	e01b      	b.n	801c95e <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 801c926:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c928:	2b40      	cmp	r3, #64	@ 0x40
 801c92a:	d909      	bls.n	801c940 <create_name+0x294>
 801c92c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c92e:	2b5a      	cmp	r3, #90	@ 0x5a
 801c930:	d806      	bhi.n	801c940 <create_name+0x294>
					b |= 2;
 801c932:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801c936:	f043 0302 	orr.w	r3, r3, #2
 801c93a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801c93e:	e00e      	b.n	801c95e <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 801c940:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c942:	2b60      	cmp	r3, #96	@ 0x60
 801c944:	d90b      	bls.n	801c95e <create_name+0x2b2>
 801c946:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c948:	2b7a      	cmp	r3, #122	@ 0x7a
 801c94a:	d808      	bhi.n	801c95e <create_name+0x2b2>
						b |= 1; w -= 0x20;
 801c94c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801c950:	f043 0301 	orr.w	r3, r3, #1
 801c954:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801c958:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c95a:	3b20      	subs	r3, #32
 801c95c:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 801c95e:	6a3b      	ldr	r3, [r7, #32]
 801c960:	1c5a      	adds	r2, r3, #1
 801c962:	623a      	str	r2, [r7, #32]
 801c964:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801c966:	b2d1      	uxtb	r1, r2
 801c968:	687a      	ldr	r2, [r7, #4]
 801c96a:	4413      	add	r3, r2
 801c96c:	460a      	mov	r2, r1
 801c96e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 801c972:	e763      	b.n	801c83c <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 801c974:	bf00      	nop
 801c976:	e006      	b.n	801c986 <create_name+0x2da>
 801c978:	0801e854 	.word	0x0801e854
 801c97c:	0801e8ec 	.word	0x0801e8ec
 801c980:	0801e860 	.word	0x0801e860
			if (si > di) break;			/* No extension */
 801c984:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 801c986:	687b      	ldr	r3, [r7, #4]
 801c988:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 801c98c:	2be5      	cmp	r3, #229	@ 0xe5
 801c98e:	d103      	bne.n	801c998 <create_name+0x2ec>
 801c990:	687b      	ldr	r3, [r7, #4]
 801c992:	2205      	movs	r2, #5
 801c994:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 801c998:	69fb      	ldr	r3, [r7, #28]
 801c99a:	2b08      	cmp	r3, #8
 801c99c:	d104      	bne.n	801c9a8 <create_name+0x2fc>
 801c99e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801c9a2:	009b      	lsls	r3, r3, #2
 801c9a4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 801c9a8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801c9ac:	f003 030c 	and.w	r3, r3, #12
 801c9b0:	2b0c      	cmp	r3, #12
 801c9b2:	d005      	beq.n	801c9c0 <create_name+0x314>
 801c9b4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801c9b8:	f003 0303 	and.w	r3, r3, #3
 801c9bc:	2b03      	cmp	r3, #3
 801c9be:	d105      	bne.n	801c9cc <create_name+0x320>
 801c9c0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801c9c4:	f043 0302 	orr.w	r3, r3, #2
 801c9c8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 801c9cc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801c9d0:	f003 0302 	and.w	r3, r3, #2
 801c9d4:	2b00      	cmp	r3, #0
 801c9d6:	d117      	bne.n	801ca08 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 801c9d8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801c9dc:	f003 0303 	and.w	r3, r3, #3
 801c9e0:	2b01      	cmp	r3, #1
 801c9e2:	d105      	bne.n	801c9f0 <create_name+0x344>
 801c9e4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801c9e8:	f043 0310 	orr.w	r3, r3, #16
 801c9ec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 801c9f0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801c9f4:	f003 030c 	and.w	r3, r3, #12
 801c9f8:	2b04      	cmp	r3, #4
 801c9fa:	d105      	bne.n	801ca08 <create_name+0x35c>
 801c9fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801ca00:	f043 0308 	orr.w	r3, r3, #8
 801ca04:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 801ca08:	687b      	ldr	r3, [r7, #4]
 801ca0a:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 801ca0e:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 801ca12:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 801ca14:	4618      	mov	r0, r3
 801ca16:	3728      	adds	r7, #40	@ 0x28
 801ca18:	46bd      	mov	sp, r7
 801ca1a:	bd80      	pop	{r7, pc}

0801ca1c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 801ca1c:	b580      	push	{r7, lr}
 801ca1e:	b086      	sub	sp, #24
 801ca20:	af00      	add	r7, sp, #0
 801ca22:	6078      	str	r0, [r7, #4]
 801ca24:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 801ca26:	687b      	ldr	r3, [r7, #4]
 801ca28:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 801ca2a:	693b      	ldr	r3, [r7, #16]
 801ca2c:	681b      	ldr	r3, [r3, #0]
 801ca2e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 801ca30:	e002      	b.n	801ca38 <follow_path+0x1c>
 801ca32:	683b      	ldr	r3, [r7, #0]
 801ca34:	3301      	adds	r3, #1
 801ca36:	603b      	str	r3, [r7, #0]
 801ca38:	683b      	ldr	r3, [r7, #0]
 801ca3a:	781b      	ldrb	r3, [r3, #0]
 801ca3c:	2b2f      	cmp	r3, #47	@ 0x2f
 801ca3e:	d0f8      	beq.n	801ca32 <follow_path+0x16>
 801ca40:	683b      	ldr	r3, [r7, #0]
 801ca42:	781b      	ldrb	r3, [r3, #0]
 801ca44:	2b5c      	cmp	r3, #92	@ 0x5c
 801ca46:	d0f4      	beq.n	801ca32 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 801ca48:	693b      	ldr	r3, [r7, #16]
 801ca4a:	2200      	movs	r2, #0
 801ca4c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 801ca4e:	683b      	ldr	r3, [r7, #0]
 801ca50:	781b      	ldrb	r3, [r3, #0]
 801ca52:	2b1f      	cmp	r3, #31
 801ca54:	d80a      	bhi.n	801ca6c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 801ca56:	687b      	ldr	r3, [r7, #4]
 801ca58:	2280      	movs	r2, #128	@ 0x80
 801ca5a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 801ca5e:	2100      	movs	r1, #0
 801ca60:	6878      	ldr	r0, [r7, #4]
 801ca62:	f7fe ffaa 	bl	801b9ba <dir_sdi>
 801ca66:	4603      	mov	r3, r0
 801ca68:	75fb      	strb	r3, [r7, #23]
 801ca6a:	e048      	b.n	801cafe <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801ca6c:	463b      	mov	r3, r7
 801ca6e:	4619      	mov	r1, r3
 801ca70:	6878      	ldr	r0, [r7, #4]
 801ca72:	f7ff fe1b 	bl	801c6ac <create_name>
 801ca76:	4603      	mov	r3, r0
 801ca78:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801ca7a:	7dfb      	ldrb	r3, [r7, #23]
 801ca7c:	2b00      	cmp	r3, #0
 801ca7e:	d139      	bne.n	801caf4 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 801ca80:	6878      	ldr	r0, [r7, #4]
 801ca82:	f7ff fc11 	bl	801c2a8 <dir_find>
 801ca86:	4603      	mov	r3, r0
 801ca88:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 801ca8a:	687b      	ldr	r3, [r7, #4]
 801ca8c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 801ca90:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 801ca92:	7dfb      	ldrb	r3, [r7, #23]
 801ca94:	2b00      	cmp	r3, #0
 801ca96:	d00a      	beq.n	801caae <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 801ca98:	7dfb      	ldrb	r3, [r7, #23]
 801ca9a:	2b04      	cmp	r3, #4
 801ca9c:	d12c      	bne.n	801caf8 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 801ca9e:	7afb      	ldrb	r3, [r7, #11]
 801caa0:	f003 0304 	and.w	r3, r3, #4
 801caa4:	2b00      	cmp	r3, #0
 801caa6:	d127      	bne.n	801caf8 <follow_path+0xdc>
 801caa8:	2305      	movs	r3, #5
 801caaa:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 801caac:	e024      	b.n	801caf8 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801caae:	7afb      	ldrb	r3, [r7, #11]
 801cab0:	f003 0304 	and.w	r3, r3, #4
 801cab4:	2b00      	cmp	r3, #0
 801cab6:	d121      	bne.n	801cafc <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 801cab8:	693b      	ldr	r3, [r7, #16]
 801caba:	799b      	ldrb	r3, [r3, #6]
 801cabc:	f003 0310 	and.w	r3, r3, #16
 801cac0:	2b00      	cmp	r3, #0
 801cac2:	d102      	bne.n	801caca <follow_path+0xae>
				res = FR_NO_PATH; break;
 801cac4:	2305      	movs	r3, #5
 801cac6:	75fb      	strb	r3, [r7, #23]
 801cac8:	e019      	b.n	801cafe <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 801caca:	68fb      	ldr	r3, [r7, #12]
 801cacc:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801cad0:	687b      	ldr	r3, [r7, #4]
 801cad2:	695b      	ldr	r3, [r3, #20]
 801cad4:	68fa      	ldr	r2, [r7, #12]
 801cad6:	8992      	ldrh	r2, [r2, #12]
 801cad8:	fbb3 f0f2 	udiv	r0, r3, r2
 801cadc:	fb00 f202 	mul.w	r2, r0, r2
 801cae0:	1a9b      	subs	r3, r3, r2
 801cae2:	440b      	add	r3, r1
 801cae4:	4619      	mov	r1, r3
 801cae6:	68f8      	ldr	r0, [r7, #12]
 801cae8:	f7ff f90d 	bl	801bd06 <ld_clust>
 801caec:	4602      	mov	r2, r0
 801caee:	693b      	ldr	r3, [r7, #16]
 801caf0:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801caf2:	e7bb      	b.n	801ca6c <follow_path+0x50>
			if (res != FR_OK) break;
 801caf4:	bf00      	nop
 801caf6:	e002      	b.n	801cafe <follow_path+0xe2>
				break;
 801caf8:	bf00      	nop
 801cafa:	e000      	b.n	801cafe <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801cafc:	bf00      	nop
			}
		}
	}

	return res;
 801cafe:	7dfb      	ldrb	r3, [r7, #23]
}
 801cb00:	4618      	mov	r0, r3
 801cb02:	3718      	adds	r7, #24
 801cb04:	46bd      	mov	sp, r7
 801cb06:	bd80      	pop	{r7, pc}

0801cb08 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 801cb08:	b480      	push	{r7}
 801cb0a:	b087      	sub	sp, #28
 801cb0c:	af00      	add	r7, sp, #0
 801cb0e:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 801cb10:	f04f 33ff 	mov.w	r3, #4294967295
 801cb14:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 801cb16:	687b      	ldr	r3, [r7, #4]
 801cb18:	681b      	ldr	r3, [r3, #0]
 801cb1a:	2b00      	cmp	r3, #0
 801cb1c:	d031      	beq.n	801cb82 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 801cb1e:	687b      	ldr	r3, [r7, #4]
 801cb20:	681b      	ldr	r3, [r3, #0]
 801cb22:	617b      	str	r3, [r7, #20]
 801cb24:	e002      	b.n	801cb2c <get_ldnumber+0x24>
 801cb26:	697b      	ldr	r3, [r7, #20]
 801cb28:	3301      	adds	r3, #1
 801cb2a:	617b      	str	r3, [r7, #20]
 801cb2c:	697b      	ldr	r3, [r7, #20]
 801cb2e:	781b      	ldrb	r3, [r3, #0]
 801cb30:	2b1f      	cmp	r3, #31
 801cb32:	d903      	bls.n	801cb3c <get_ldnumber+0x34>
 801cb34:	697b      	ldr	r3, [r7, #20]
 801cb36:	781b      	ldrb	r3, [r3, #0]
 801cb38:	2b3a      	cmp	r3, #58	@ 0x3a
 801cb3a:	d1f4      	bne.n	801cb26 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 801cb3c:	697b      	ldr	r3, [r7, #20]
 801cb3e:	781b      	ldrb	r3, [r3, #0]
 801cb40:	2b3a      	cmp	r3, #58	@ 0x3a
 801cb42:	d11c      	bne.n	801cb7e <get_ldnumber+0x76>
			tp = *path;
 801cb44:	687b      	ldr	r3, [r7, #4]
 801cb46:	681b      	ldr	r3, [r3, #0]
 801cb48:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 801cb4a:	68fb      	ldr	r3, [r7, #12]
 801cb4c:	1c5a      	adds	r2, r3, #1
 801cb4e:	60fa      	str	r2, [r7, #12]
 801cb50:	781b      	ldrb	r3, [r3, #0]
 801cb52:	3b30      	subs	r3, #48	@ 0x30
 801cb54:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 801cb56:	68bb      	ldr	r3, [r7, #8]
 801cb58:	2b09      	cmp	r3, #9
 801cb5a:	d80e      	bhi.n	801cb7a <get_ldnumber+0x72>
 801cb5c:	68fa      	ldr	r2, [r7, #12]
 801cb5e:	697b      	ldr	r3, [r7, #20]
 801cb60:	429a      	cmp	r2, r3
 801cb62:	d10a      	bne.n	801cb7a <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 801cb64:	68bb      	ldr	r3, [r7, #8]
 801cb66:	2b00      	cmp	r3, #0
 801cb68:	d107      	bne.n	801cb7a <get_ldnumber+0x72>
					vol = (int)i;
 801cb6a:	68bb      	ldr	r3, [r7, #8]
 801cb6c:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 801cb6e:	697b      	ldr	r3, [r7, #20]
 801cb70:	3301      	adds	r3, #1
 801cb72:	617b      	str	r3, [r7, #20]
 801cb74:	687b      	ldr	r3, [r7, #4]
 801cb76:	697a      	ldr	r2, [r7, #20]
 801cb78:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 801cb7a:	693b      	ldr	r3, [r7, #16]
 801cb7c:	e002      	b.n	801cb84 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 801cb7e:	2300      	movs	r3, #0
 801cb80:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 801cb82:	693b      	ldr	r3, [r7, #16]
}
 801cb84:	4618      	mov	r0, r3
 801cb86:	371c      	adds	r7, #28
 801cb88:	46bd      	mov	sp, r7
 801cb8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cb8e:	4770      	bx	lr

0801cb90 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 801cb90:	b580      	push	{r7, lr}
 801cb92:	b082      	sub	sp, #8
 801cb94:	af00      	add	r7, sp, #0
 801cb96:	6078      	str	r0, [r7, #4]
 801cb98:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 801cb9a:	687b      	ldr	r3, [r7, #4]
 801cb9c:	2200      	movs	r2, #0
 801cb9e:	70da      	strb	r2, [r3, #3]
 801cba0:	687b      	ldr	r3, [r7, #4]
 801cba2:	f04f 32ff 	mov.w	r2, #4294967295
 801cba6:	635a      	str	r2, [r3, #52]	@ 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 801cba8:	6839      	ldr	r1, [r7, #0]
 801cbaa:	6878      	ldr	r0, [r7, #4]
 801cbac:	f7fe fb26 	bl	801b1fc <move_window>
 801cbb0:	4603      	mov	r3, r0
 801cbb2:	2b00      	cmp	r3, #0
 801cbb4:	d001      	beq.n	801cbba <check_fs+0x2a>
 801cbb6:	2304      	movs	r3, #4
 801cbb8:	e038      	b.n	801cc2c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 801cbba:	687b      	ldr	r3, [r7, #4]
 801cbbc:	3338      	adds	r3, #56	@ 0x38
 801cbbe:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 801cbc2:	4618      	mov	r0, r3
 801cbc4:	f7fe f86a 	bl	801ac9c <ld_word>
 801cbc8:	4603      	mov	r3, r0
 801cbca:	461a      	mov	r2, r3
 801cbcc:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 801cbd0:	429a      	cmp	r2, r3
 801cbd2:	d001      	beq.n	801cbd8 <check_fs+0x48>
 801cbd4:	2303      	movs	r3, #3
 801cbd6:	e029      	b.n	801cc2c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 801cbd8:	687b      	ldr	r3, [r7, #4]
 801cbda:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801cbde:	2be9      	cmp	r3, #233	@ 0xe9
 801cbe0:	d009      	beq.n	801cbf6 <check_fs+0x66>
 801cbe2:	687b      	ldr	r3, [r7, #4]
 801cbe4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801cbe8:	2beb      	cmp	r3, #235	@ 0xeb
 801cbea:	d11e      	bne.n	801cc2a <check_fs+0x9a>
 801cbec:	687b      	ldr	r3, [r7, #4]
 801cbee:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 801cbf2:	2b90      	cmp	r3, #144	@ 0x90
 801cbf4:	d119      	bne.n	801cc2a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 801cbf6:	687b      	ldr	r3, [r7, #4]
 801cbf8:	3338      	adds	r3, #56	@ 0x38
 801cbfa:	3336      	adds	r3, #54	@ 0x36
 801cbfc:	4618      	mov	r0, r3
 801cbfe:	f7fe f865 	bl	801accc <ld_dword>
 801cc02:	4603      	mov	r3, r0
 801cc04:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 801cc08:	4a0a      	ldr	r2, [pc, #40]	@ (801cc34 <check_fs+0xa4>)
 801cc0a:	4293      	cmp	r3, r2
 801cc0c:	d101      	bne.n	801cc12 <check_fs+0x82>
 801cc0e:	2300      	movs	r3, #0
 801cc10:	e00c      	b.n	801cc2c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 801cc12:	687b      	ldr	r3, [r7, #4]
 801cc14:	3338      	adds	r3, #56	@ 0x38
 801cc16:	3352      	adds	r3, #82	@ 0x52
 801cc18:	4618      	mov	r0, r3
 801cc1a:	f7fe f857 	bl	801accc <ld_dword>
 801cc1e:	4603      	mov	r3, r0
 801cc20:	4a05      	ldr	r2, [pc, #20]	@ (801cc38 <check_fs+0xa8>)
 801cc22:	4293      	cmp	r3, r2
 801cc24:	d101      	bne.n	801cc2a <check_fs+0x9a>
 801cc26:	2300      	movs	r3, #0
 801cc28:	e000      	b.n	801cc2c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 801cc2a:	2302      	movs	r3, #2
}
 801cc2c:	4618      	mov	r0, r3
 801cc2e:	3708      	adds	r7, #8
 801cc30:	46bd      	mov	sp, r7
 801cc32:	bd80      	pop	{r7, pc}
 801cc34:	00544146 	.word	0x00544146
 801cc38:	33544146 	.word	0x33544146

0801cc3c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 801cc3c:	b580      	push	{r7, lr}
 801cc3e:	b096      	sub	sp, #88	@ 0x58
 801cc40:	af00      	add	r7, sp, #0
 801cc42:	60f8      	str	r0, [r7, #12]
 801cc44:	60b9      	str	r1, [r7, #8]
 801cc46:	4613      	mov	r3, r2
 801cc48:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 801cc4a:	68bb      	ldr	r3, [r7, #8]
 801cc4c:	2200      	movs	r2, #0
 801cc4e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 801cc50:	68f8      	ldr	r0, [r7, #12]
 801cc52:	f7ff ff59 	bl	801cb08 <get_ldnumber>
 801cc56:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 801cc58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801cc5a:	2b00      	cmp	r3, #0
 801cc5c:	da01      	bge.n	801cc62 <find_volume+0x26>
 801cc5e:	230b      	movs	r3, #11
 801cc60:	e265      	b.n	801d12e <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 801cc62:	4a9f      	ldr	r2, [pc, #636]	@ (801cee0 <find_volume+0x2a4>)
 801cc64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801cc66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801cc6a:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 801cc6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cc6e:	2b00      	cmp	r3, #0
 801cc70:	d101      	bne.n	801cc76 <find_volume+0x3a>
 801cc72:	230c      	movs	r3, #12
 801cc74:	e25b      	b.n	801d12e <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 801cc76:	68bb      	ldr	r3, [r7, #8]
 801cc78:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801cc7a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 801cc7c:	79fb      	ldrb	r3, [r7, #7]
 801cc7e:	f023 0301 	bic.w	r3, r3, #1
 801cc82:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 801cc84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cc86:	781b      	ldrb	r3, [r3, #0]
 801cc88:	2b00      	cmp	r3, #0
 801cc8a:	d01a      	beq.n	801ccc2 <find_volume+0x86>
		stat = disk_status(fs->drv);
 801cc8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cc8e:	785b      	ldrb	r3, [r3, #1]
 801cc90:	4618      	mov	r0, r3
 801cc92:	f7fd ff63 	bl	801ab5c <disk_status>
 801cc96:	4603      	mov	r3, r0
 801cc98:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 801cc9c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801cca0:	f003 0301 	and.w	r3, r3, #1
 801cca4:	2b00      	cmp	r3, #0
 801cca6:	d10c      	bne.n	801ccc2 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 801cca8:	79fb      	ldrb	r3, [r7, #7]
 801ccaa:	2b00      	cmp	r3, #0
 801ccac:	d007      	beq.n	801ccbe <find_volume+0x82>
 801ccae:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801ccb2:	f003 0304 	and.w	r3, r3, #4
 801ccb6:	2b00      	cmp	r3, #0
 801ccb8:	d001      	beq.n	801ccbe <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 801ccba:	230a      	movs	r3, #10
 801ccbc:	e237      	b.n	801d12e <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 801ccbe:	2300      	movs	r3, #0
 801ccc0:	e235      	b.n	801d12e <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 801ccc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ccc4:	2200      	movs	r2, #0
 801ccc6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 801ccc8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801ccca:	b2da      	uxtb	r2, r3
 801cccc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ccce:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 801ccd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ccd2:	785b      	ldrb	r3, [r3, #1]
 801ccd4:	4618      	mov	r0, r3
 801ccd6:	f7fd ff5b 	bl	801ab90 <disk_initialize>
 801ccda:	4603      	mov	r3, r0
 801ccdc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 801cce0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801cce4:	f003 0301 	and.w	r3, r3, #1
 801cce8:	2b00      	cmp	r3, #0
 801ccea:	d001      	beq.n	801ccf0 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 801ccec:	2303      	movs	r3, #3
 801ccee:	e21e      	b.n	801d12e <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 801ccf0:	79fb      	ldrb	r3, [r7, #7]
 801ccf2:	2b00      	cmp	r3, #0
 801ccf4:	d007      	beq.n	801cd06 <find_volume+0xca>
 801ccf6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801ccfa:	f003 0304 	and.w	r3, r3, #4
 801ccfe:	2b00      	cmp	r3, #0
 801cd00:	d001      	beq.n	801cd06 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 801cd02:	230a      	movs	r3, #10
 801cd04:	e213      	b.n	801d12e <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 801cd06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cd08:	7858      	ldrb	r0, [r3, #1]
 801cd0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cd0c:	330c      	adds	r3, #12
 801cd0e:	461a      	mov	r2, r3
 801cd10:	2102      	movs	r1, #2
 801cd12:	f7fd ffa5 	bl	801ac60 <disk_ioctl>
 801cd16:	4603      	mov	r3, r0
 801cd18:	2b00      	cmp	r3, #0
 801cd1a:	d001      	beq.n	801cd20 <find_volume+0xe4>
 801cd1c:	2301      	movs	r3, #1
 801cd1e:	e206      	b.n	801d12e <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 801cd20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cd22:	899b      	ldrh	r3, [r3, #12]
 801cd24:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801cd28:	d80d      	bhi.n	801cd46 <find_volume+0x10a>
 801cd2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cd2c:	899b      	ldrh	r3, [r3, #12]
 801cd2e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801cd32:	d308      	bcc.n	801cd46 <find_volume+0x10a>
 801cd34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cd36:	899b      	ldrh	r3, [r3, #12]
 801cd38:	461a      	mov	r2, r3
 801cd3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cd3c:	899b      	ldrh	r3, [r3, #12]
 801cd3e:	3b01      	subs	r3, #1
 801cd40:	4013      	ands	r3, r2
 801cd42:	2b00      	cmp	r3, #0
 801cd44:	d001      	beq.n	801cd4a <find_volume+0x10e>
 801cd46:	2301      	movs	r3, #1
 801cd48:	e1f1      	b.n	801d12e <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 801cd4a:	2300      	movs	r3, #0
 801cd4c:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 801cd4e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801cd50:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801cd52:	f7ff ff1d 	bl	801cb90 <check_fs>
 801cd56:	4603      	mov	r3, r0
 801cd58:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 801cd5c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801cd60:	2b02      	cmp	r3, #2
 801cd62:	d149      	bne.n	801cdf8 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801cd64:	2300      	movs	r3, #0
 801cd66:	643b      	str	r3, [r7, #64]	@ 0x40
 801cd68:	e01e      	b.n	801cda8 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 801cd6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cd6c:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 801cd70:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801cd72:	011b      	lsls	r3, r3, #4
 801cd74:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 801cd78:	4413      	add	r3, r2
 801cd7a:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 801cd7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cd7e:	3304      	adds	r3, #4
 801cd80:	781b      	ldrb	r3, [r3, #0]
 801cd82:	2b00      	cmp	r3, #0
 801cd84:	d006      	beq.n	801cd94 <find_volume+0x158>
 801cd86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cd88:	3308      	adds	r3, #8
 801cd8a:	4618      	mov	r0, r3
 801cd8c:	f7fd ff9e 	bl	801accc <ld_dword>
 801cd90:	4602      	mov	r2, r0
 801cd92:	e000      	b.n	801cd96 <find_volume+0x15a>
 801cd94:	2200      	movs	r2, #0
 801cd96:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801cd98:	009b      	lsls	r3, r3, #2
 801cd9a:	3358      	adds	r3, #88	@ 0x58
 801cd9c:	443b      	add	r3, r7
 801cd9e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801cda2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801cda4:	3301      	adds	r3, #1
 801cda6:	643b      	str	r3, [r7, #64]	@ 0x40
 801cda8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801cdaa:	2b03      	cmp	r3, #3
 801cdac:	d9dd      	bls.n	801cd6a <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 801cdae:	2300      	movs	r3, #0
 801cdb0:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 801cdb2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801cdb4:	2b00      	cmp	r3, #0
 801cdb6:	d002      	beq.n	801cdbe <find_volume+0x182>
 801cdb8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801cdba:	3b01      	subs	r3, #1
 801cdbc:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 801cdbe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801cdc0:	009b      	lsls	r3, r3, #2
 801cdc2:	3358      	adds	r3, #88	@ 0x58
 801cdc4:	443b      	add	r3, r7
 801cdc6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 801cdca:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 801cdcc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801cdce:	2b00      	cmp	r3, #0
 801cdd0:	d005      	beq.n	801cdde <find_volume+0x1a2>
 801cdd2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801cdd4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801cdd6:	f7ff fedb 	bl	801cb90 <check_fs>
 801cdda:	4603      	mov	r3, r0
 801cddc:	e000      	b.n	801cde0 <find_volume+0x1a4>
 801cdde:	2303      	movs	r3, #3
 801cde0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 801cde4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801cde8:	2b01      	cmp	r3, #1
 801cdea:	d905      	bls.n	801cdf8 <find_volume+0x1bc>
 801cdec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801cdee:	3301      	adds	r3, #1
 801cdf0:	643b      	str	r3, [r7, #64]	@ 0x40
 801cdf2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801cdf4:	2b03      	cmp	r3, #3
 801cdf6:	d9e2      	bls.n	801cdbe <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 801cdf8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801cdfc:	2b04      	cmp	r3, #4
 801cdfe:	d101      	bne.n	801ce04 <find_volume+0x1c8>
 801ce00:	2301      	movs	r3, #1
 801ce02:	e194      	b.n	801d12e <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 801ce04:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801ce08:	2b01      	cmp	r3, #1
 801ce0a:	d901      	bls.n	801ce10 <find_volume+0x1d4>
 801ce0c:	230d      	movs	r3, #13
 801ce0e:	e18e      	b.n	801d12e <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 801ce10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ce12:	3338      	adds	r3, #56	@ 0x38
 801ce14:	330b      	adds	r3, #11
 801ce16:	4618      	mov	r0, r3
 801ce18:	f7fd ff40 	bl	801ac9c <ld_word>
 801ce1c:	4603      	mov	r3, r0
 801ce1e:	461a      	mov	r2, r3
 801ce20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ce22:	899b      	ldrh	r3, [r3, #12]
 801ce24:	429a      	cmp	r2, r3
 801ce26:	d001      	beq.n	801ce2c <find_volume+0x1f0>
 801ce28:	230d      	movs	r3, #13
 801ce2a:	e180      	b.n	801d12e <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 801ce2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ce2e:	3338      	adds	r3, #56	@ 0x38
 801ce30:	3316      	adds	r3, #22
 801ce32:	4618      	mov	r0, r3
 801ce34:	f7fd ff32 	bl	801ac9c <ld_word>
 801ce38:	4603      	mov	r3, r0
 801ce3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 801ce3c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801ce3e:	2b00      	cmp	r3, #0
 801ce40:	d106      	bne.n	801ce50 <find_volume+0x214>
 801ce42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ce44:	3338      	adds	r3, #56	@ 0x38
 801ce46:	3324      	adds	r3, #36	@ 0x24
 801ce48:	4618      	mov	r0, r3
 801ce4a:	f7fd ff3f 	bl	801accc <ld_dword>
 801ce4e:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 801ce50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ce52:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801ce54:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 801ce56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ce58:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 801ce5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ce5e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 801ce60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ce62:	789b      	ldrb	r3, [r3, #2]
 801ce64:	2b01      	cmp	r3, #1
 801ce66:	d005      	beq.n	801ce74 <find_volume+0x238>
 801ce68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ce6a:	789b      	ldrb	r3, [r3, #2]
 801ce6c:	2b02      	cmp	r3, #2
 801ce6e:	d001      	beq.n	801ce74 <find_volume+0x238>
 801ce70:	230d      	movs	r3, #13
 801ce72:	e15c      	b.n	801d12e <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 801ce74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ce76:	789b      	ldrb	r3, [r3, #2]
 801ce78:	461a      	mov	r2, r3
 801ce7a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801ce7c:	fb02 f303 	mul.w	r3, r2, r3
 801ce80:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 801ce82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ce84:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801ce88:	461a      	mov	r2, r3
 801ce8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ce8c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 801ce8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ce90:	895b      	ldrh	r3, [r3, #10]
 801ce92:	2b00      	cmp	r3, #0
 801ce94:	d008      	beq.n	801cea8 <find_volume+0x26c>
 801ce96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ce98:	895b      	ldrh	r3, [r3, #10]
 801ce9a:	461a      	mov	r2, r3
 801ce9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ce9e:	895b      	ldrh	r3, [r3, #10]
 801cea0:	3b01      	subs	r3, #1
 801cea2:	4013      	ands	r3, r2
 801cea4:	2b00      	cmp	r3, #0
 801cea6:	d001      	beq.n	801ceac <find_volume+0x270>
 801cea8:	230d      	movs	r3, #13
 801ceaa:	e140      	b.n	801d12e <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 801ceac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ceae:	3338      	adds	r3, #56	@ 0x38
 801ceb0:	3311      	adds	r3, #17
 801ceb2:	4618      	mov	r0, r3
 801ceb4:	f7fd fef2 	bl	801ac9c <ld_word>
 801ceb8:	4603      	mov	r3, r0
 801ceba:	461a      	mov	r2, r3
 801cebc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cebe:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 801cec0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cec2:	891b      	ldrh	r3, [r3, #8]
 801cec4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801cec6:	8992      	ldrh	r2, [r2, #12]
 801cec8:	0952      	lsrs	r2, r2, #5
 801ceca:	b292      	uxth	r2, r2
 801cecc:	fbb3 f1f2 	udiv	r1, r3, r2
 801ced0:	fb01 f202 	mul.w	r2, r1, r2
 801ced4:	1a9b      	subs	r3, r3, r2
 801ced6:	b29b      	uxth	r3, r3
 801ced8:	2b00      	cmp	r3, #0
 801ceda:	d003      	beq.n	801cee4 <find_volume+0x2a8>
 801cedc:	230d      	movs	r3, #13
 801cede:	e126      	b.n	801d12e <find_volume+0x4f2>
 801cee0:	24000550 	.word	0x24000550

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 801cee4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cee6:	3338      	adds	r3, #56	@ 0x38
 801cee8:	3313      	adds	r3, #19
 801ceea:	4618      	mov	r0, r3
 801ceec:	f7fd fed6 	bl	801ac9c <ld_word>
 801cef0:	4603      	mov	r3, r0
 801cef2:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 801cef4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801cef6:	2b00      	cmp	r3, #0
 801cef8:	d106      	bne.n	801cf08 <find_volume+0x2cc>
 801cefa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cefc:	3338      	adds	r3, #56	@ 0x38
 801cefe:	3320      	adds	r3, #32
 801cf00:	4618      	mov	r0, r3
 801cf02:	f7fd fee3 	bl	801accc <ld_dword>
 801cf06:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 801cf08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cf0a:	3338      	adds	r3, #56	@ 0x38
 801cf0c:	330e      	adds	r3, #14
 801cf0e:	4618      	mov	r0, r3
 801cf10:	f7fd fec4 	bl	801ac9c <ld_word>
 801cf14:	4603      	mov	r3, r0
 801cf16:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 801cf18:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801cf1a:	2b00      	cmp	r3, #0
 801cf1c:	d101      	bne.n	801cf22 <find_volume+0x2e6>
 801cf1e:	230d      	movs	r3, #13
 801cf20:	e105      	b.n	801d12e <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 801cf22:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801cf24:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801cf26:	4413      	add	r3, r2
 801cf28:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801cf2a:	8911      	ldrh	r1, [r2, #8]
 801cf2c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801cf2e:	8992      	ldrh	r2, [r2, #12]
 801cf30:	0952      	lsrs	r2, r2, #5
 801cf32:	b292      	uxth	r2, r2
 801cf34:	fbb1 f2f2 	udiv	r2, r1, r2
 801cf38:	b292      	uxth	r2, r2
 801cf3a:	4413      	add	r3, r2
 801cf3c:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 801cf3e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801cf40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801cf42:	429a      	cmp	r2, r3
 801cf44:	d201      	bcs.n	801cf4a <find_volume+0x30e>
 801cf46:	230d      	movs	r3, #13
 801cf48:	e0f1      	b.n	801d12e <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 801cf4a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801cf4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801cf4e:	1ad3      	subs	r3, r2, r3
 801cf50:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801cf52:	8952      	ldrh	r2, [r2, #10]
 801cf54:	fbb3 f3f2 	udiv	r3, r3, r2
 801cf58:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 801cf5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cf5c:	2b00      	cmp	r3, #0
 801cf5e:	d101      	bne.n	801cf64 <find_volume+0x328>
 801cf60:	230d      	movs	r3, #13
 801cf62:	e0e4      	b.n	801d12e <find_volume+0x4f2>
		fmt = FS_FAT32;
 801cf64:	2303      	movs	r3, #3
 801cf66:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 801cf6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cf6c:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 801cf70:	4293      	cmp	r3, r2
 801cf72:	d802      	bhi.n	801cf7a <find_volume+0x33e>
 801cf74:	2302      	movs	r3, #2
 801cf76:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 801cf7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cf7c:	f640 72f5 	movw	r2, #4085	@ 0xff5
 801cf80:	4293      	cmp	r3, r2
 801cf82:	d802      	bhi.n	801cf8a <find_volume+0x34e>
 801cf84:	2301      	movs	r3, #1
 801cf86:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 801cf8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cf8c:	1c9a      	adds	r2, r3, #2
 801cf8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cf90:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 801cf92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cf94:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801cf96:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 801cf98:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801cf9a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801cf9c:	441a      	add	r2, r3
 801cf9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cfa0:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 801cfa2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801cfa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801cfa6:	441a      	add	r2, r3
 801cfa8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cfaa:	631a      	str	r2, [r3, #48]	@ 0x30
		if (fmt == FS_FAT32) {
 801cfac:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801cfb0:	2b03      	cmp	r3, #3
 801cfb2:	d11e      	bne.n	801cff2 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 801cfb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cfb6:	3338      	adds	r3, #56	@ 0x38
 801cfb8:	332a      	adds	r3, #42	@ 0x2a
 801cfba:	4618      	mov	r0, r3
 801cfbc:	f7fd fe6e 	bl	801ac9c <ld_word>
 801cfc0:	4603      	mov	r3, r0
 801cfc2:	2b00      	cmp	r3, #0
 801cfc4:	d001      	beq.n	801cfca <find_volume+0x38e>
 801cfc6:	230d      	movs	r3, #13
 801cfc8:	e0b1      	b.n	801d12e <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 801cfca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cfcc:	891b      	ldrh	r3, [r3, #8]
 801cfce:	2b00      	cmp	r3, #0
 801cfd0:	d001      	beq.n	801cfd6 <find_volume+0x39a>
 801cfd2:	230d      	movs	r3, #13
 801cfd4:	e0ab      	b.n	801d12e <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 801cfd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cfd8:	3338      	adds	r3, #56	@ 0x38
 801cfda:	332c      	adds	r3, #44	@ 0x2c
 801cfdc:	4618      	mov	r0, r3
 801cfde:	f7fd fe75 	bl	801accc <ld_dword>
 801cfe2:	4602      	mov	r2, r0
 801cfe4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cfe6:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 801cfe8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cfea:	69db      	ldr	r3, [r3, #28]
 801cfec:	009b      	lsls	r3, r3, #2
 801cfee:	647b      	str	r3, [r7, #68]	@ 0x44
 801cff0:	e01f      	b.n	801d032 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 801cff2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cff4:	891b      	ldrh	r3, [r3, #8]
 801cff6:	2b00      	cmp	r3, #0
 801cff8:	d101      	bne.n	801cffe <find_volume+0x3c2>
 801cffa:	230d      	movs	r3, #13
 801cffc:	e097      	b.n	801d12e <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 801cffe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d000:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801d002:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801d004:	441a      	add	r2, r3
 801d006:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d008:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 801d00a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801d00e:	2b02      	cmp	r3, #2
 801d010:	d103      	bne.n	801d01a <find_volume+0x3de>
 801d012:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d014:	69db      	ldr	r3, [r3, #28]
 801d016:	005b      	lsls	r3, r3, #1
 801d018:	e00a      	b.n	801d030 <find_volume+0x3f4>
 801d01a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d01c:	69da      	ldr	r2, [r3, #28]
 801d01e:	4613      	mov	r3, r2
 801d020:	005b      	lsls	r3, r3, #1
 801d022:	4413      	add	r3, r2
 801d024:	085a      	lsrs	r2, r3, #1
 801d026:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d028:	69db      	ldr	r3, [r3, #28]
 801d02a:	f003 0301 	and.w	r3, r3, #1
 801d02e:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 801d030:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 801d032:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d034:	6a1a      	ldr	r2, [r3, #32]
 801d036:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d038:	899b      	ldrh	r3, [r3, #12]
 801d03a:	4619      	mov	r1, r3
 801d03c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801d03e:	440b      	add	r3, r1
 801d040:	3b01      	subs	r3, #1
 801d042:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801d044:	8989      	ldrh	r1, [r1, #12]
 801d046:	fbb3 f3f1 	udiv	r3, r3, r1
 801d04a:	429a      	cmp	r2, r3
 801d04c:	d201      	bcs.n	801d052 <find_volume+0x416>
 801d04e:	230d      	movs	r3, #13
 801d050:	e06d      	b.n	801d12e <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 801d052:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d054:	f04f 32ff 	mov.w	r2, #4294967295
 801d058:	619a      	str	r2, [r3, #24]
 801d05a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d05c:	699a      	ldr	r2, [r3, #24]
 801d05e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d060:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 801d062:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d064:	2280      	movs	r2, #128	@ 0x80
 801d066:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 801d068:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801d06c:	2b03      	cmp	r3, #3
 801d06e:	d149      	bne.n	801d104 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 801d070:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d072:	3338      	adds	r3, #56	@ 0x38
 801d074:	3330      	adds	r3, #48	@ 0x30
 801d076:	4618      	mov	r0, r3
 801d078:	f7fd fe10 	bl	801ac9c <ld_word>
 801d07c:	4603      	mov	r3, r0
 801d07e:	2b01      	cmp	r3, #1
 801d080:	d140      	bne.n	801d104 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 801d082:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801d084:	3301      	adds	r3, #1
 801d086:	4619      	mov	r1, r3
 801d088:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801d08a:	f7fe f8b7 	bl	801b1fc <move_window>
 801d08e:	4603      	mov	r3, r0
 801d090:	2b00      	cmp	r3, #0
 801d092:	d137      	bne.n	801d104 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 801d094:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d096:	2200      	movs	r2, #0
 801d098:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 801d09a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d09c:	3338      	adds	r3, #56	@ 0x38
 801d09e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 801d0a2:	4618      	mov	r0, r3
 801d0a4:	f7fd fdfa 	bl	801ac9c <ld_word>
 801d0a8:	4603      	mov	r3, r0
 801d0aa:	461a      	mov	r2, r3
 801d0ac:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 801d0b0:	429a      	cmp	r2, r3
 801d0b2:	d127      	bne.n	801d104 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 801d0b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d0b6:	3338      	adds	r3, #56	@ 0x38
 801d0b8:	4618      	mov	r0, r3
 801d0ba:	f7fd fe07 	bl	801accc <ld_dword>
 801d0be:	4603      	mov	r3, r0
 801d0c0:	4a1d      	ldr	r2, [pc, #116]	@ (801d138 <find_volume+0x4fc>)
 801d0c2:	4293      	cmp	r3, r2
 801d0c4:	d11e      	bne.n	801d104 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 801d0c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d0c8:	3338      	adds	r3, #56	@ 0x38
 801d0ca:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 801d0ce:	4618      	mov	r0, r3
 801d0d0:	f7fd fdfc 	bl	801accc <ld_dword>
 801d0d4:	4603      	mov	r3, r0
 801d0d6:	4a19      	ldr	r2, [pc, #100]	@ (801d13c <find_volume+0x500>)
 801d0d8:	4293      	cmp	r3, r2
 801d0da:	d113      	bne.n	801d104 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 801d0dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d0de:	3338      	adds	r3, #56	@ 0x38
 801d0e0:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 801d0e4:	4618      	mov	r0, r3
 801d0e6:	f7fd fdf1 	bl	801accc <ld_dword>
 801d0ea:	4602      	mov	r2, r0
 801d0ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d0ee:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 801d0f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d0f2:	3338      	adds	r3, #56	@ 0x38
 801d0f4:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 801d0f8:	4618      	mov	r0, r3
 801d0fa:	f7fd fde7 	bl	801accc <ld_dword>
 801d0fe:	4602      	mov	r2, r0
 801d100:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d102:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 801d104:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d106:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 801d10a:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 801d10c:	4b0c      	ldr	r3, [pc, #48]	@ (801d140 <find_volume+0x504>)
 801d10e:	881b      	ldrh	r3, [r3, #0]
 801d110:	3301      	adds	r3, #1
 801d112:	b29a      	uxth	r2, r3
 801d114:	4b0a      	ldr	r3, [pc, #40]	@ (801d140 <find_volume+0x504>)
 801d116:	801a      	strh	r2, [r3, #0]
 801d118:	4b09      	ldr	r3, [pc, #36]	@ (801d140 <find_volume+0x504>)
 801d11a:	881a      	ldrh	r2, [r3, #0]
 801d11c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d11e:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 801d120:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d122:	4a08      	ldr	r2, [pc, #32]	@ (801d144 <find_volume+0x508>)
 801d124:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 801d126:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801d128:	f7fe f800 	bl	801b12c <clear_lock>
#endif
	return FR_OK;
 801d12c:	2300      	movs	r3, #0
}
 801d12e:	4618      	mov	r0, r3
 801d130:	3758      	adds	r7, #88	@ 0x58
 801d132:	46bd      	mov	sp, r7
 801d134:	bd80      	pop	{r7, pc}
 801d136:	bf00      	nop
 801d138:	41615252 	.word	0x41615252
 801d13c:	61417272 	.word	0x61417272
 801d140:	24000554 	.word	0x24000554
 801d144:	24000568 	.word	0x24000568

0801d148 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 801d148:	b580      	push	{r7, lr}
 801d14a:	b084      	sub	sp, #16
 801d14c:	af00      	add	r7, sp, #0
 801d14e:	6078      	str	r0, [r7, #4]
 801d150:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 801d152:	2309      	movs	r3, #9
 801d154:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 801d156:	687b      	ldr	r3, [r7, #4]
 801d158:	2b00      	cmp	r3, #0
 801d15a:	d01c      	beq.n	801d196 <validate+0x4e>
 801d15c:	687b      	ldr	r3, [r7, #4]
 801d15e:	681b      	ldr	r3, [r3, #0]
 801d160:	2b00      	cmp	r3, #0
 801d162:	d018      	beq.n	801d196 <validate+0x4e>
 801d164:	687b      	ldr	r3, [r7, #4]
 801d166:	681b      	ldr	r3, [r3, #0]
 801d168:	781b      	ldrb	r3, [r3, #0]
 801d16a:	2b00      	cmp	r3, #0
 801d16c:	d013      	beq.n	801d196 <validate+0x4e>
 801d16e:	687b      	ldr	r3, [r7, #4]
 801d170:	889a      	ldrh	r2, [r3, #4]
 801d172:	687b      	ldr	r3, [r7, #4]
 801d174:	681b      	ldr	r3, [r3, #0]
 801d176:	88db      	ldrh	r3, [r3, #6]
 801d178:	429a      	cmp	r2, r3
 801d17a:	d10c      	bne.n	801d196 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 801d17c:	687b      	ldr	r3, [r7, #4]
 801d17e:	681b      	ldr	r3, [r3, #0]
 801d180:	785b      	ldrb	r3, [r3, #1]
 801d182:	4618      	mov	r0, r3
 801d184:	f7fd fcea 	bl	801ab5c <disk_status>
 801d188:	4603      	mov	r3, r0
 801d18a:	f003 0301 	and.w	r3, r3, #1
 801d18e:	2b00      	cmp	r3, #0
 801d190:	d101      	bne.n	801d196 <validate+0x4e>
			res = FR_OK;
 801d192:	2300      	movs	r3, #0
 801d194:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 801d196:	7bfb      	ldrb	r3, [r7, #15]
 801d198:	2b00      	cmp	r3, #0
 801d19a:	d102      	bne.n	801d1a2 <validate+0x5a>
 801d19c:	687b      	ldr	r3, [r7, #4]
 801d19e:	681b      	ldr	r3, [r3, #0]
 801d1a0:	e000      	b.n	801d1a4 <validate+0x5c>
 801d1a2:	2300      	movs	r3, #0
 801d1a4:	683a      	ldr	r2, [r7, #0]
 801d1a6:	6013      	str	r3, [r2, #0]
	return res;
 801d1a8:	7bfb      	ldrb	r3, [r7, #15]
}
 801d1aa:	4618      	mov	r0, r3
 801d1ac:	3710      	adds	r7, #16
 801d1ae:	46bd      	mov	sp, r7
 801d1b0:	bd80      	pop	{r7, pc}
	...

0801d1b4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 801d1b4:	b580      	push	{r7, lr}
 801d1b6:	b088      	sub	sp, #32
 801d1b8:	af00      	add	r7, sp, #0
 801d1ba:	60f8      	str	r0, [r7, #12]
 801d1bc:	60b9      	str	r1, [r7, #8]
 801d1be:	4613      	mov	r3, r2
 801d1c0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 801d1c2:	68bb      	ldr	r3, [r7, #8]
 801d1c4:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 801d1c6:	f107 0310 	add.w	r3, r7, #16
 801d1ca:	4618      	mov	r0, r3
 801d1cc:	f7ff fc9c 	bl	801cb08 <get_ldnumber>
 801d1d0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 801d1d2:	69fb      	ldr	r3, [r7, #28]
 801d1d4:	2b00      	cmp	r3, #0
 801d1d6:	da01      	bge.n	801d1dc <f_mount+0x28>
 801d1d8:	230b      	movs	r3, #11
 801d1da:	e02b      	b.n	801d234 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 801d1dc:	4a17      	ldr	r2, [pc, #92]	@ (801d23c <f_mount+0x88>)
 801d1de:	69fb      	ldr	r3, [r7, #28]
 801d1e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801d1e4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 801d1e6:	69bb      	ldr	r3, [r7, #24]
 801d1e8:	2b00      	cmp	r3, #0
 801d1ea:	d005      	beq.n	801d1f8 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 801d1ec:	69b8      	ldr	r0, [r7, #24]
 801d1ee:	f7fd ff9d 	bl	801b12c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 801d1f2:	69bb      	ldr	r3, [r7, #24]
 801d1f4:	2200      	movs	r2, #0
 801d1f6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 801d1f8:	68fb      	ldr	r3, [r7, #12]
 801d1fa:	2b00      	cmp	r3, #0
 801d1fc:	d002      	beq.n	801d204 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 801d1fe:	68fb      	ldr	r3, [r7, #12]
 801d200:	2200      	movs	r2, #0
 801d202:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 801d204:	68fa      	ldr	r2, [r7, #12]
 801d206:	490d      	ldr	r1, [pc, #52]	@ (801d23c <f_mount+0x88>)
 801d208:	69fb      	ldr	r3, [r7, #28]
 801d20a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 801d20e:	68fb      	ldr	r3, [r7, #12]
 801d210:	2b00      	cmp	r3, #0
 801d212:	d002      	beq.n	801d21a <f_mount+0x66>
 801d214:	79fb      	ldrb	r3, [r7, #7]
 801d216:	2b01      	cmp	r3, #1
 801d218:	d001      	beq.n	801d21e <f_mount+0x6a>
 801d21a:	2300      	movs	r3, #0
 801d21c:	e00a      	b.n	801d234 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 801d21e:	f107 010c 	add.w	r1, r7, #12
 801d222:	f107 0308 	add.w	r3, r7, #8
 801d226:	2200      	movs	r2, #0
 801d228:	4618      	mov	r0, r3
 801d22a:	f7ff fd07 	bl	801cc3c <find_volume>
 801d22e:	4603      	mov	r3, r0
 801d230:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 801d232:	7dfb      	ldrb	r3, [r7, #23]
}
 801d234:	4618      	mov	r0, r3
 801d236:	3720      	adds	r7, #32
 801d238:	46bd      	mov	sp, r7
 801d23a:	bd80      	pop	{r7, pc}
 801d23c:	24000550 	.word	0x24000550

0801d240 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 801d240:	b580      	push	{r7, lr}
 801d242:	b09a      	sub	sp, #104	@ 0x68
 801d244:	af00      	add	r7, sp, #0
 801d246:	60f8      	str	r0, [r7, #12]
 801d248:	60b9      	str	r1, [r7, #8]
 801d24a:	4613      	mov	r3, r2
 801d24c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 801d24e:	68fb      	ldr	r3, [r7, #12]
 801d250:	2b00      	cmp	r3, #0
 801d252:	d101      	bne.n	801d258 <f_open+0x18>
 801d254:	2309      	movs	r3, #9
 801d256:	e1b7      	b.n	801d5c8 <f_open+0x388>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 801d258:	79fb      	ldrb	r3, [r7, #7]
 801d25a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801d25e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 801d260:	79fa      	ldrb	r2, [r7, #7]
 801d262:	f107 0114 	add.w	r1, r7, #20
 801d266:	f107 0308 	add.w	r3, r7, #8
 801d26a:	4618      	mov	r0, r3
 801d26c:	f7ff fce6 	bl	801cc3c <find_volume>
 801d270:	4603      	mov	r3, r0
 801d272:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 801d276:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801d27a:	2b00      	cmp	r3, #0
 801d27c:	f040 819b 	bne.w	801d5b6 <f_open+0x376>
		dj.obj.fs = fs;
 801d280:	697b      	ldr	r3, [r7, #20]
 801d282:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 801d284:	68ba      	ldr	r2, [r7, #8]
 801d286:	f107 0318 	add.w	r3, r7, #24
 801d28a:	4611      	mov	r1, r2
 801d28c:	4618      	mov	r0, r3
 801d28e:	f7ff fbc5 	bl	801ca1c <follow_path>
 801d292:	4603      	mov	r3, r0
 801d294:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 801d298:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801d29c:	2b00      	cmp	r3, #0
 801d29e:	d118      	bne.n	801d2d2 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 801d2a0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801d2a4:	b25b      	sxtb	r3, r3
 801d2a6:	2b00      	cmp	r3, #0
 801d2a8:	da03      	bge.n	801d2b2 <f_open+0x72>
				res = FR_INVALID_NAME;
 801d2aa:	2306      	movs	r3, #6
 801d2ac:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 801d2b0:	e00f      	b.n	801d2d2 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801d2b2:	79fb      	ldrb	r3, [r7, #7]
 801d2b4:	2b01      	cmp	r3, #1
 801d2b6:	bf8c      	ite	hi
 801d2b8:	2301      	movhi	r3, #1
 801d2ba:	2300      	movls	r3, #0
 801d2bc:	b2db      	uxtb	r3, r3
 801d2be:	461a      	mov	r2, r3
 801d2c0:	f107 0318 	add.w	r3, r7, #24
 801d2c4:	4611      	mov	r1, r2
 801d2c6:	4618      	mov	r0, r3
 801d2c8:	f7fd fde8 	bl	801ae9c <chk_lock>
 801d2cc:	4603      	mov	r3, r0
 801d2ce:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 801d2d2:	79fb      	ldrb	r3, [r7, #7]
 801d2d4:	f003 031c 	and.w	r3, r3, #28
 801d2d8:	2b00      	cmp	r3, #0
 801d2da:	d07f      	beq.n	801d3dc <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 801d2dc:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801d2e0:	2b00      	cmp	r3, #0
 801d2e2:	d017      	beq.n	801d314 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 801d2e4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801d2e8:	2b04      	cmp	r3, #4
 801d2ea:	d10e      	bne.n	801d30a <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 801d2ec:	f7fd fe32 	bl	801af54 <enq_lock>
 801d2f0:	4603      	mov	r3, r0
 801d2f2:	2b00      	cmp	r3, #0
 801d2f4:	d006      	beq.n	801d304 <f_open+0xc4>
 801d2f6:	f107 0318 	add.w	r3, r7, #24
 801d2fa:	4618      	mov	r0, r3
 801d2fc:	f7ff f894 	bl	801c428 <dir_register>
 801d300:	4603      	mov	r3, r0
 801d302:	e000      	b.n	801d306 <f_open+0xc6>
 801d304:	2312      	movs	r3, #18
 801d306:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 801d30a:	79fb      	ldrb	r3, [r7, #7]
 801d30c:	f043 0308 	orr.w	r3, r3, #8
 801d310:	71fb      	strb	r3, [r7, #7]
 801d312:	e010      	b.n	801d336 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 801d314:	7fbb      	ldrb	r3, [r7, #30]
 801d316:	f003 0311 	and.w	r3, r3, #17
 801d31a:	2b00      	cmp	r3, #0
 801d31c:	d003      	beq.n	801d326 <f_open+0xe6>
					res = FR_DENIED;
 801d31e:	2307      	movs	r3, #7
 801d320:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 801d324:	e007      	b.n	801d336 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 801d326:	79fb      	ldrb	r3, [r7, #7]
 801d328:	f003 0304 	and.w	r3, r3, #4
 801d32c:	2b00      	cmp	r3, #0
 801d32e:	d002      	beq.n	801d336 <f_open+0xf6>
 801d330:	2308      	movs	r3, #8
 801d332:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 801d336:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801d33a:	2b00      	cmp	r3, #0
 801d33c:	d168      	bne.n	801d410 <f_open+0x1d0>
 801d33e:	79fb      	ldrb	r3, [r7, #7]
 801d340:	f003 0308 	and.w	r3, r3, #8
 801d344:	2b00      	cmp	r3, #0
 801d346:	d063      	beq.n	801d410 <f_open+0x1d0>
				dw = GET_FATTIME();
 801d348:	f7fd fbaa 	bl	801aaa0 <get_fattime>
 801d34c:	65b8      	str	r0, [r7, #88]	@ 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 801d34e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d350:	330e      	adds	r3, #14
 801d352:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 801d354:	4618      	mov	r0, r3
 801d356:	f7fd fcf7 	bl	801ad48 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 801d35a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d35c:	3316      	adds	r3, #22
 801d35e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 801d360:	4618      	mov	r0, r3
 801d362:	f7fd fcf1 	bl	801ad48 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 801d366:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d368:	330b      	adds	r3, #11
 801d36a:	2220      	movs	r2, #32
 801d36c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 801d36e:	697b      	ldr	r3, [r7, #20]
 801d370:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801d372:	4611      	mov	r1, r2
 801d374:	4618      	mov	r0, r3
 801d376:	f7fe fcc6 	bl	801bd06 <ld_clust>
 801d37a:	6578      	str	r0, [r7, #84]	@ 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 801d37c:	697b      	ldr	r3, [r7, #20]
 801d37e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801d380:	2200      	movs	r2, #0
 801d382:	4618      	mov	r0, r3
 801d384:	f7fe fcde 	bl	801bd44 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 801d388:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d38a:	331c      	adds	r3, #28
 801d38c:	2100      	movs	r1, #0
 801d38e:	4618      	mov	r0, r3
 801d390:	f7fd fcda 	bl	801ad48 <st_dword>
					fs->wflag = 1;
 801d394:	697b      	ldr	r3, [r7, #20]
 801d396:	2201      	movs	r2, #1
 801d398:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 801d39a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801d39c:	2b00      	cmp	r3, #0
 801d39e:	d037      	beq.n	801d410 <f_open+0x1d0>
						dw = fs->winsect;
 801d3a0:	697b      	ldr	r3, [r7, #20]
 801d3a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801d3a4:	65bb      	str	r3, [r7, #88]	@ 0x58
						res = remove_chain(&dj.obj, cl, 0);
 801d3a6:	f107 0318 	add.w	r3, r7, #24
 801d3aa:	2200      	movs	r2, #0
 801d3ac:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801d3ae:	4618      	mov	r0, r3
 801d3b0:	f7fe f9ce 	bl	801b750 <remove_chain>
 801d3b4:	4603      	mov	r3, r0
 801d3b6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 801d3ba:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801d3be:	2b00      	cmp	r3, #0
 801d3c0:	d126      	bne.n	801d410 <f_open+0x1d0>
							res = move_window(fs, dw);
 801d3c2:	697b      	ldr	r3, [r7, #20]
 801d3c4:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 801d3c6:	4618      	mov	r0, r3
 801d3c8:	f7fd ff18 	bl	801b1fc <move_window>
 801d3cc:	4603      	mov	r3, r0
 801d3ce:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 801d3d2:	697b      	ldr	r3, [r7, #20]
 801d3d4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801d3d6:	3a01      	subs	r2, #1
 801d3d8:	615a      	str	r2, [r3, #20]
 801d3da:	e019      	b.n	801d410 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 801d3dc:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801d3e0:	2b00      	cmp	r3, #0
 801d3e2:	d115      	bne.n	801d410 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 801d3e4:	7fbb      	ldrb	r3, [r7, #30]
 801d3e6:	f003 0310 	and.w	r3, r3, #16
 801d3ea:	2b00      	cmp	r3, #0
 801d3ec:	d003      	beq.n	801d3f6 <f_open+0x1b6>
					res = FR_NO_FILE;
 801d3ee:	2304      	movs	r3, #4
 801d3f0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 801d3f4:	e00c      	b.n	801d410 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 801d3f6:	79fb      	ldrb	r3, [r7, #7]
 801d3f8:	f003 0302 	and.w	r3, r3, #2
 801d3fc:	2b00      	cmp	r3, #0
 801d3fe:	d007      	beq.n	801d410 <f_open+0x1d0>
 801d400:	7fbb      	ldrb	r3, [r7, #30]
 801d402:	f003 0301 	and.w	r3, r3, #1
 801d406:	2b00      	cmp	r3, #0
 801d408:	d002      	beq.n	801d410 <f_open+0x1d0>
						res = FR_DENIED;
 801d40a:	2307      	movs	r3, #7
 801d40c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 801d410:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801d414:	2b00      	cmp	r3, #0
 801d416:	d126      	bne.n	801d466 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 801d418:	79fb      	ldrb	r3, [r7, #7]
 801d41a:	f003 0308 	and.w	r3, r3, #8
 801d41e:	2b00      	cmp	r3, #0
 801d420:	d003      	beq.n	801d42a <f_open+0x1ea>
				mode |= FA_MODIFIED;
 801d422:	79fb      	ldrb	r3, [r7, #7]
 801d424:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801d428:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 801d42a:	697b      	ldr	r3, [r7, #20]
 801d42c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801d42e:	68fb      	ldr	r3, [r7, #12]
 801d430:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 801d432:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801d434:	68fb      	ldr	r3, [r7, #12]
 801d436:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801d438:	79fb      	ldrb	r3, [r7, #7]
 801d43a:	2b01      	cmp	r3, #1
 801d43c:	bf8c      	ite	hi
 801d43e:	2301      	movhi	r3, #1
 801d440:	2300      	movls	r3, #0
 801d442:	b2db      	uxtb	r3, r3
 801d444:	461a      	mov	r2, r3
 801d446:	f107 0318 	add.w	r3, r7, #24
 801d44a:	4611      	mov	r1, r2
 801d44c:	4618      	mov	r0, r3
 801d44e:	f7fd fda3 	bl	801af98 <inc_lock>
 801d452:	4602      	mov	r2, r0
 801d454:	68fb      	ldr	r3, [r7, #12]
 801d456:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 801d458:	68fb      	ldr	r3, [r7, #12]
 801d45a:	691b      	ldr	r3, [r3, #16]
 801d45c:	2b00      	cmp	r3, #0
 801d45e:	d102      	bne.n	801d466 <f_open+0x226>
 801d460:	2302      	movs	r3, #2
 801d462:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 801d466:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801d46a:	2b00      	cmp	r3, #0
 801d46c:	f040 80a3 	bne.w	801d5b6 <f_open+0x376>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 801d470:	697b      	ldr	r3, [r7, #20]
 801d472:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801d474:	4611      	mov	r1, r2
 801d476:	4618      	mov	r0, r3
 801d478:	f7fe fc45 	bl	801bd06 <ld_clust>
 801d47c:	4602      	mov	r2, r0
 801d47e:	68fb      	ldr	r3, [r7, #12]
 801d480:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 801d482:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d484:	331c      	adds	r3, #28
 801d486:	4618      	mov	r0, r3
 801d488:	f7fd fc20 	bl	801accc <ld_dword>
 801d48c:	4602      	mov	r2, r0
 801d48e:	68fb      	ldr	r3, [r7, #12]
 801d490:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 801d492:	68fb      	ldr	r3, [r7, #12]
 801d494:	2200      	movs	r2, #0
 801d496:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 801d498:	697a      	ldr	r2, [r7, #20]
 801d49a:	68fb      	ldr	r3, [r7, #12]
 801d49c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 801d49e:	697b      	ldr	r3, [r7, #20]
 801d4a0:	88da      	ldrh	r2, [r3, #6]
 801d4a2:	68fb      	ldr	r3, [r7, #12]
 801d4a4:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 801d4a6:	68fb      	ldr	r3, [r7, #12]
 801d4a8:	79fa      	ldrb	r2, [r7, #7]
 801d4aa:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 801d4ac:	68fb      	ldr	r3, [r7, #12]
 801d4ae:	2200      	movs	r2, #0
 801d4b0:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 801d4b2:	68fb      	ldr	r3, [r7, #12]
 801d4b4:	2200      	movs	r2, #0
 801d4b6:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 801d4b8:	68fb      	ldr	r3, [r7, #12]
 801d4ba:	2200      	movs	r2, #0
 801d4bc:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 801d4be:	68fb      	ldr	r3, [r7, #12]
 801d4c0:	3330      	adds	r3, #48	@ 0x30
 801d4c2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 801d4c6:	2100      	movs	r1, #0
 801d4c8:	4618      	mov	r0, r3
 801d4ca:	f7fd fc8a 	bl	801ade2 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 801d4ce:	79fb      	ldrb	r3, [r7, #7]
 801d4d0:	f003 0320 	and.w	r3, r3, #32
 801d4d4:	2b00      	cmp	r3, #0
 801d4d6:	d06e      	beq.n	801d5b6 <f_open+0x376>
 801d4d8:	68fb      	ldr	r3, [r7, #12]
 801d4da:	68db      	ldr	r3, [r3, #12]
 801d4dc:	2b00      	cmp	r3, #0
 801d4de:	d06a      	beq.n	801d5b6 <f_open+0x376>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 801d4e0:	68fb      	ldr	r3, [r7, #12]
 801d4e2:	68da      	ldr	r2, [r3, #12]
 801d4e4:	68fb      	ldr	r3, [r7, #12]
 801d4e6:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 801d4e8:	697b      	ldr	r3, [r7, #20]
 801d4ea:	895b      	ldrh	r3, [r3, #10]
 801d4ec:	461a      	mov	r2, r3
 801d4ee:	697b      	ldr	r3, [r7, #20]
 801d4f0:	899b      	ldrh	r3, [r3, #12]
 801d4f2:	fb02 f303 	mul.w	r3, r2, r3
 801d4f6:	653b      	str	r3, [r7, #80]	@ 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 801d4f8:	68fb      	ldr	r3, [r7, #12]
 801d4fa:	689b      	ldr	r3, [r3, #8]
 801d4fc:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801d4fe:	68fb      	ldr	r3, [r7, #12]
 801d500:	68db      	ldr	r3, [r3, #12]
 801d502:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801d504:	e016      	b.n	801d534 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 801d506:	68fb      	ldr	r3, [r7, #12]
 801d508:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 801d50a:	4618      	mov	r0, r3
 801d50c:	f7fd ff33 	bl	801b376 <get_fat>
 801d510:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 801d512:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801d514:	2b01      	cmp	r3, #1
 801d516:	d802      	bhi.n	801d51e <f_open+0x2de>
 801d518:	2302      	movs	r3, #2
 801d51a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 801d51e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801d520:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d524:	d102      	bne.n	801d52c <f_open+0x2ec>
 801d526:	2301      	movs	r3, #1
 801d528:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801d52c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801d52e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801d530:	1ad3      	subs	r3, r2, r3
 801d532:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801d534:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801d538:	2b00      	cmp	r3, #0
 801d53a:	d103      	bne.n	801d544 <f_open+0x304>
 801d53c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801d53e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801d540:	429a      	cmp	r2, r3
 801d542:	d8e0      	bhi.n	801d506 <f_open+0x2c6>
				}
				fp->clust = clst;
 801d544:	68fb      	ldr	r3, [r7, #12]
 801d546:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 801d548:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 801d54a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801d54e:	2b00      	cmp	r3, #0
 801d550:	d131      	bne.n	801d5b6 <f_open+0x376>
 801d552:	697b      	ldr	r3, [r7, #20]
 801d554:	899b      	ldrh	r3, [r3, #12]
 801d556:	461a      	mov	r2, r3
 801d558:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801d55a:	fbb3 f1f2 	udiv	r1, r3, r2
 801d55e:	fb01 f202 	mul.w	r2, r1, r2
 801d562:	1a9b      	subs	r3, r3, r2
 801d564:	2b00      	cmp	r3, #0
 801d566:	d026      	beq.n	801d5b6 <f_open+0x376>
					if ((sc = clust2sect(fs, clst)) == 0) {
 801d568:	697b      	ldr	r3, [r7, #20]
 801d56a:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 801d56c:	4618      	mov	r0, r3
 801d56e:	f7fd fee3 	bl	801b338 <clust2sect>
 801d572:	64f8      	str	r0, [r7, #76]	@ 0x4c
 801d574:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801d576:	2b00      	cmp	r3, #0
 801d578:	d103      	bne.n	801d582 <f_open+0x342>
						res = FR_INT_ERR;
 801d57a:	2302      	movs	r3, #2
 801d57c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 801d580:	e019      	b.n	801d5b6 <f_open+0x376>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 801d582:	697b      	ldr	r3, [r7, #20]
 801d584:	899b      	ldrh	r3, [r3, #12]
 801d586:	461a      	mov	r2, r3
 801d588:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801d58a:	fbb3 f2f2 	udiv	r2, r3, r2
 801d58e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801d590:	441a      	add	r2, r3
 801d592:	68fb      	ldr	r3, [r7, #12]
 801d594:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 801d596:	697b      	ldr	r3, [r7, #20]
 801d598:	7858      	ldrb	r0, [r3, #1]
 801d59a:	68fb      	ldr	r3, [r7, #12]
 801d59c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801d5a0:	68fb      	ldr	r3, [r7, #12]
 801d5a2:	6a1a      	ldr	r2, [r3, #32]
 801d5a4:	2301      	movs	r3, #1
 801d5a6:	f7fd fb1b 	bl	801abe0 <disk_read>
 801d5aa:	4603      	mov	r3, r0
 801d5ac:	2b00      	cmp	r3, #0
 801d5ae:	d002      	beq.n	801d5b6 <f_open+0x376>
 801d5b0:	2301      	movs	r3, #1
 801d5b2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 801d5b6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801d5ba:	2b00      	cmp	r3, #0
 801d5bc:	d002      	beq.n	801d5c4 <f_open+0x384>
 801d5be:	68fb      	ldr	r3, [r7, #12]
 801d5c0:	2200      	movs	r2, #0
 801d5c2:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 801d5c4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 801d5c8:	4618      	mov	r0, r3
 801d5ca:	3768      	adds	r7, #104	@ 0x68
 801d5cc:	46bd      	mov	sp, r7
 801d5ce:	bd80      	pop	{r7, pc}

0801d5d0 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 801d5d0:	b580      	push	{r7, lr}
 801d5d2:	b08c      	sub	sp, #48	@ 0x30
 801d5d4:	af00      	add	r7, sp, #0
 801d5d6:	60f8      	str	r0, [r7, #12]
 801d5d8:	60b9      	str	r1, [r7, #8]
 801d5da:	607a      	str	r2, [r7, #4]
 801d5dc:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 801d5de:	68bb      	ldr	r3, [r7, #8]
 801d5e0:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 801d5e2:	683b      	ldr	r3, [r7, #0]
 801d5e4:	2200      	movs	r2, #0
 801d5e6:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 801d5e8:	68fb      	ldr	r3, [r7, #12]
 801d5ea:	f107 0210 	add.w	r2, r7, #16
 801d5ee:	4611      	mov	r1, r2
 801d5f0:	4618      	mov	r0, r3
 801d5f2:	f7ff fda9 	bl	801d148 <validate>
 801d5f6:	4603      	mov	r3, r0
 801d5f8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 801d5fc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801d600:	2b00      	cmp	r3, #0
 801d602:	d107      	bne.n	801d614 <f_write+0x44>
 801d604:	68fb      	ldr	r3, [r7, #12]
 801d606:	7d5b      	ldrb	r3, [r3, #21]
 801d608:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 801d60c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801d610:	2b00      	cmp	r3, #0
 801d612:	d002      	beq.n	801d61a <f_write+0x4a>
 801d614:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801d618:	e16a      	b.n	801d8f0 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 801d61a:	68fb      	ldr	r3, [r7, #12]
 801d61c:	7d1b      	ldrb	r3, [r3, #20]
 801d61e:	f003 0302 	and.w	r3, r3, #2
 801d622:	2b00      	cmp	r3, #0
 801d624:	d101      	bne.n	801d62a <f_write+0x5a>
 801d626:	2307      	movs	r3, #7
 801d628:	e162      	b.n	801d8f0 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 801d62a:	68fb      	ldr	r3, [r7, #12]
 801d62c:	699a      	ldr	r2, [r3, #24]
 801d62e:	687b      	ldr	r3, [r7, #4]
 801d630:	441a      	add	r2, r3
 801d632:	68fb      	ldr	r3, [r7, #12]
 801d634:	699b      	ldr	r3, [r3, #24]
 801d636:	429a      	cmp	r2, r3
 801d638:	f080 814c 	bcs.w	801d8d4 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 801d63c:	68fb      	ldr	r3, [r7, #12]
 801d63e:	699b      	ldr	r3, [r3, #24]
 801d640:	43db      	mvns	r3, r3
 801d642:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 801d644:	e146      	b.n	801d8d4 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 801d646:	68fb      	ldr	r3, [r7, #12]
 801d648:	699b      	ldr	r3, [r3, #24]
 801d64a:	693a      	ldr	r2, [r7, #16]
 801d64c:	8992      	ldrh	r2, [r2, #12]
 801d64e:	fbb3 f1f2 	udiv	r1, r3, r2
 801d652:	fb01 f202 	mul.w	r2, r1, r2
 801d656:	1a9b      	subs	r3, r3, r2
 801d658:	2b00      	cmp	r3, #0
 801d65a:	f040 80f1 	bne.w	801d840 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 801d65e:	68fb      	ldr	r3, [r7, #12]
 801d660:	699b      	ldr	r3, [r3, #24]
 801d662:	693a      	ldr	r2, [r7, #16]
 801d664:	8992      	ldrh	r2, [r2, #12]
 801d666:	fbb3 f3f2 	udiv	r3, r3, r2
 801d66a:	693a      	ldr	r2, [r7, #16]
 801d66c:	8952      	ldrh	r2, [r2, #10]
 801d66e:	3a01      	subs	r2, #1
 801d670:	4013      	ands	r3, r2
 801d672:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 801d674:	69bb      	ldr	r3, [r7, #24]
 801d676:	2b00      	cmp	r3, #0
 801d678:	d143      	bne.n	801d702 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 801d67a:	68fb      	ldr	r3, [r7, #12]
 801d67c:	699b      	ldr	r3, [r3, #24]
 801d67e:	2b00      	cmp	r3, #0
 801d680:	d10c      	bne.n	801d69c <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 801d682:	68fb      	ldr	r3, [r7, #12]
 801d684:	689b      	ldr	r3, [r3, #8]
 801d686:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 801d688:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d68a:	2b00      	cmp	r3, #0
 801d68c:	d11a      	bne.n	801d6c4 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 801d68e:	68fb      	ldr	r3, [r7, #12]
 801d690:	2100      	movs	r1, #0
 801d692:	4618      	mov	r0, r3
 801d694:	f7fe f8c1 	bl	801b81a <create_chain>
 801d698:	62b8      	str	r0, [r7, #40]	@ 0x28
 801d69a:	e013      	b.n	801d6c4 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801d69c:	68fb      	ldr	r3, [r7, #12]
 801d69e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d6a0:	2b00      	cmp	r3, #0
 801d6a2:	d007      	beq.n	801d6b4 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 801d6a4:	68fb      	ldr	r3, [r7, #12]
 801d6a6:	699b      	ldr	r3, [r3, #24]
 801d6a8:	4619      	mov	r1, r3
 801d6aa:	68f8      	ldr	r0, [r7, #12]
 801d6ac:	f7fe f94d 	bl	801b94a <clmt_clust>
 801d6b0:	62b8      	str	r0, [r7, #40]	@ 0x28
 801d6b2:	e007      	b.n	801d6c4 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 801d6b4:	68fa      	ldr	r2, [r7, #12]
 801d6b6:	68fb      	ldr	r3, [r7, #12]
 801d6b8:	69db      	ldr	r3, [r3, #28]
 801d6ba:	4619      	mov	r1, r3
 801d6bc:	4610      	mov	r0, r2
 801d6be:	f7fe f8ac 	bl	801b81a <create_chain>
 801d6c2:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801d6c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d6c6:	2b00      	cmp	r3, #0
 801d6c8:	f000 8109 	beq.w	801d8de <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 801d6cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d6ce:	2b01      	cmp	r3, #1
 801d6d0:	d104      	bne.n	801d6dc <f_write+0x10c>
 801d6d2:	68fb      	ldr	r3, [r7, #12]
 801d6d4:	2202      	movs	r2, #2
 801d6d6:	755a      	strb	r2, [r3, #21]
 801d6d8:	2302      	movs	r3, #2
 801d6da:	e109      	b.n	801d8f0 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801d6dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d6de:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d6e2:	d104      	bne.n	801d6ee <f_write+0x11e>
 801d6e4:	68fb      	ldr	r3, [r7, #12]
 801d6e6:	2201      	movs	r2, #1
 801d6e8:	755a      	strb	r2, [r3, #21]
 801d6ea:	2301      	movs	r3, #1
 801d6ec:	e100      	b.n	801d8f0 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 801d6ee:	68fb      	ldr	r3, [r7, #12]
 801d6f0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801d6f2:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 801d6f4:	68fb      	ldr	r3, [r7, #12]
 801d6f6:	689b      	ldr	r3, [r3, #8]
 801d6f8:	2b00      	cmp	r3, #0
 801d6fa:	d102      	bne.n	801d702 <f_write+0x132>
 801d6fc:	68fb      	ldr	r3, [r7, #12]
 801d6fe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801d700:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 801d702:	68fb      	ldr	r3, [r7, #12]
 801d704:	7d1b      	ldrb	r3, [r3, #20]
 801d706:	b25b      	sxtb	r3, r3
 801d708:	2b00      	cmp	r3, #0
 801d70a:	da18      	bge.n	801d73e <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801d70c:	693b      	ldr	r3, [r7, #16]
 801d70e:	7858      	ldrb	r0, [r3, #1]
 801d710:	68fb      	ldr	r3, [r7, #12]
 801d712:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801d716:	68fb      	ldr	r3, [r7, #12]
 801d718:	6a1a      	ldr	r2, [r3, #32]
 801d71a:	2301      	movs	r3, #1
 801d71c:	f7fd fa80 	bl	801ac20 <disk_write>
 801d720:	4603      	mov	r3, r0
 801d722:	2b00      	cmp	r3, #0
 801d724:	d004      	beq.n	801d730 <f_write+0x160>
 801d726:	68fb      	ldr	r3, [r7, #12]
 801d728:	2201      	movs	r2, #1
 801d72a:	755a      	strb	r2, [r3, #21]
 801d72c:	2301      	movs	r3, #1
 801d72e:	e0df      	b.n	801d8f0 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 801d730:	68fb      	ldr	r3, [r7, #12]
 801d732:	7d1b      	ldrb	r3, [r3, #20]
 801d734:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801d738:	b2da      	uxtb	r2, r3
 801d73a:	68fb      	ldr	r3, [r7, #12]
 801d73c:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 801d73e:	693a      	ldr	r2, [r7, #16]
 801d740:	68fb      	ldr	r3, [r7, #12]
 801d742:	69db      	ldr	r3, [r3, #28]
 801d744:	4619      	mov	r1, r3
 801d746:	4610      	mov	r0, r2
 801d748:	f7fd fdf6 	bl	801b338 <clust2sect>
 801d74c:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 801d74e:	697b      	ldr	r3, [r7, #20]
 801d750:	2b00      	cmp	r3, #0
 801d752:	d104      	bne.n	801d75e <f_write+0x18e>
 801d754:	68fb      	ldr	r3, [r7, #12]
 801d756:	2202      	movs	r2, #2
 801d758:	755a      	strb	r2, [r3, #21]
 801d75a:	2302      	movs	r3, #2
 801d75c:	e0c8      	b.n	801d8f0 <f_write+0x320>
			sect += csect;
 801d75e:	697a      	ldr	r2, [r7, #20]
 801d760:	69bb      	ldr	r3, [r7, #24]
 801d762:	4413      	add	r3, r2
 801d764:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 801d766:	693b      	ldr	r3, [r7, #16]
 801d768:	899b      	ldrh	r3, [r3, #12]
 801d76a:	461a      	mov	r2, r3
 801d76c:	687b      	ldr	r3, [r7, #4]
 801d76e:	fbb3 f3f2 	udiv	r3, r3, r2
 801d772:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 801d774:	6a3b      	ldr	r3, [r7, #32]
 801d776:	2b00      	cmp	r3, #0
 801d778:	d043      	beq.n	801d802 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 801d77a:	69ba      	ldr	r2, [r7, #24]
 801d77c:	6a3b      	ldr	r3, [r7, #32]
 801d77e:	4413      	add	r3, r2
 801d780:	693a      	ldr	r2, [r7, #16]
 801d782:	8952      	ldrh	r2, [r2, #10]
 801d784:	4293      	cmp	r3, r2
 801d786:	d905      	bls.n	801d794 <f_write+0x1c4>
					cc = fs->csize - csect;
 801d788:	693b      	ldr	r3, [r7, #16]
 801d78a:	895b      	ldrh	r3, [r3, #10]
 801d78c:	461a      	mov	r2, r3
 801d78e:	69bb      	ldr	r3, [r7, #24]
 801d790:	1ad3      	subs	r3, r2, r3
 801d792:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801d794:	693b      	ldr	r3, [r7, #16]
 801d796:	7858      	ldrb	r0, [r3, #1]
 801d798:	6a3b      	ldr	r3, [r7, #32]
 801d79a:	697a      	ldr	r2, [r7, #20]
 801d79c:	69f9      	ldr	r1, [r7, #28]
 801d79e:	f7fd fa3f 	bl	801ac20 <disk_write>
 801d7a2:	4603      	mov	r3, r0
 801d7a4:	2b00      	cmp	r3, #0
 801d7a6:	d004      	beq.n	801d7b2 <f_write+0x1e2>
 801d7a8:	68fb      	ldr	r3, [r7, #12]
 801d7aa:	2201      	movs	r2, #1
 801d7ac:	755a      	strb	r2, [r3, #21]
 801d7ae:	2301      	movs	r3, #1
 801d7b0:	e09e      	b.n	801d8f0 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 801d7b2:	68fb      	ldr	r3, [r7, #12]
 801d7b4:	6a1a      	ldr	r2, [r3, #32]
 801d7b6:	697b      	ldr	r3, [r7, #20]
 801d7b8:	1ad3      	subs	r3, r2, r3
 801d7ba:	6a3a      	ldr	r2, [r7, #32]
 801d7bc:	429a      	cmp	r2, r3
 801d7be:	d918      	bls.n	801d7f2 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 801d7c0:	68fb      	ldr	r3, [r7, #12]
 801d7c2:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 801d7c6:	68fb      	ldr	r3, [r7, #12]
 801d7c8:	6a1a      	ldr	r2, [r3, #32]
 801d7ca:	697b      	ldr	r3, [r7, #20]
 801d7cc:	1ad3      	subs	r3, r2, r3
 801d7ce:	693a      	ldr	r2, [r7, #16]
 801d7d0:	8992      	ldrh	r2, [r2, #12]
 801d7d2:	fb02 f303 	mul.w	r3, r2, r3
 801d7d6:	69fa      	ldr	r2, [r7, #28]
 801d7d8:	18d1      	adds	r1, r2, r3
 801d7da:	693b      	ldr	r3, [r7, #16]
 801d7dc:	899b      	ldrh	r3, [r3, #12]
 801d7de:	461a      	mov	r2, r3
 801d7e0:	f7fd fade 	bl	801ada0 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 801d7e4:	68fb      	ldr	r3, [r7, #12]
 801d7e6:	7d1b      	ldrb	r3, [r3, #20]
 801d7e8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801d7ec:	b2da      	uxtb	r2, r3
 801d7ee:	68fb      	ldr	r3, [r7, #12]
 801d7f0:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 801d7f2:	693b      	ldr	r3, [r7, #16]
 801d7f4:	899b      	ldrh	r3, [r3, #12]
 801d7f6:	461a      	mov	r2, r3
 801d7f8:	6a3b      	ldr	r3, [r7, #32]
 801d7fa:	fb02 f303 	mul.w	r3, r2, r3
 801d7fe:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 801d800:	e04b      	b.n	801d89a <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801d802:	68fb      	ldr	r3, [r7, #12]
 801d804:	6a1b      	ldr	r3, [r3, #32]
 801d806:	697a      	ldr	r2, [r7, #20]
 801d808:	429a      	cmp	r2, r3
 801d80a:	d016      	beq.n	801d83a <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 801d80c:	68fb      	ldr	r3, [r7, #12]
 801d80e:	699a      	ldr	r2, [r3, #24]
 801d810:	68fb      	ldr	r3, [r7, #12]
 801d812:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801d814:	429a      	cmp	r2, r3
 801d816:	d210      	bcs.n	801d83a <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 801d818:	693b      	ldr	r3, [r7, #16]
 801d81a:	7858      	ldrb	r0, [r3, #1]
 801d81c:	68fb      	ldr	r3, [r7, #12]
 801d81e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801d822:	2301      	movs	r3, #1
 801d824:	697a      	ldr	r2, [r7, #20]
 801d826:	f7fd f9db 	bl	801abe0 <disk_read>
 801d82a:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 801d82c:	2b00      	cmp	r3, #0
 801d82e:	d004      	beq.n	801d83a <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 801d830:	68fb      	ldr	r3, [r7, #12]
 801d832:	2201      	movs	r2, #1
 801d834:	755a      	strb	r2, [r3, #21]
 801d836:	2301      	movs	r3, #1
 801d838:	e05a      	b.n	801d8f0 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 801d83a:	68fb      	ldr	r3, [r7, #12]
 801d83c:	697a      	ldr	r2, [r7, #20]
 801d83e:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 801d840:	693b      	ldr	r3, [r7, #16]
 801d842:	899b      	ldrh	r3, [r3, #12]
 801d844:	4618      	mov	r0, r3
 801d846:	68fb      	ldr	r3, [r7, #12]
 801d848:	699b      	ldr	r3, [r3, #24]
 801d84a:	693a      	ldr	r2, [r7, #16]
 801d84c:	8992      	ldrh	r2, [r2, #12]
 801d84e:	fbb3 f1f2 	udiv	r1, r3, r2
 801d852:	fb01 f202 	mul.w	r2, r1, r2
 801d856:	1a9b      	subs	r3, r3, r2
 801d858:	1ac3      	subs	r3, r0, r3
 801d85a:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 801d85c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801d85e:	687b      	ldr	r3, [r7, #4]
 801d860:	429a      	cmp	r2, r3
 801d862:	d901      	bls.n	801d868 <f_write+0x298>
 801d864:	687b      	ldr	r3, [r7, #4]
 801d866:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 801d868:	68fb      	ldr	r3, [r7, #12]
 801d86a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801d86e:	68fb      	ldr	r3, [r7, #12]
 801d870:	699b      	ldr	r3, [r3, #24]
 801d872:	693a      	ldr	r2, [r7, #16]
 801d874:	8992      	ldrh	r2, [r2, #12]
 801d876:	fbb3 f0f2 	udiv	r0, r3, r2
 801d87a:	fb00 f202 	mul.w	r2, r0, r2
 801d87e:	1a9b      	subs	r3, r3, r2
 801d880:	440b      	add	r3, r1
 801d882:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801d884:	69f9      	ldr	r1, [r7, #28]
 801d886:	4618      	mov	r0, r3
 801d888:	f7fd fa8a 	bl	801ada0 <mem_cpy>
		fp->flag |= FA_DIRTY;
 801d88c:	68fb      	ldr	r3, [r7, #12]
 801d88e:	7d1b      	ldrb	r3, [r3, #20]
 801d890:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 801d894:	b2da      	uxtb	r2, r3
 801d896:	68fb      	ldr	r3, [r7, #12]
 801d898:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 801d89a:	69fa      	ldr	r2, [r7, #28]
 801d89c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d89e:	4413      	add	r3, r2
 801d8a0:	61fb      	str	r3, [r7, #28]
 801d8a2:	68fb      	ldr	r3, [r7, #12]
 801d8a4:	699a      	ldr	r2, [r3, #24]
 801d8a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d8a8:	441a      	add	r2, r3
 801d8aa:	68fb      	ldr	r3, [r7, #12]
 801d8ac:	619a      	str	r2, [r3, #24]
 801d8ae:	68fb      	ldr	r3, [r7, #12]
 801d8b0:	68da      	ldr	r2, [r3, #12]
 801d8b2:	68fb      	ldr	r3, [r7, #12]
 801d8b4:	699b      	ldr	r3, [r3, #24]
 801d8b6:	429a      	cmp	r2, r3
 801d8b8:	bf38      	it	cc
 801d8ba:	461a      	movcc	r2, r3
 801d8bc:	68fb      	ldr	r3, [r7, #12]
 801d8be:	60da      	str	r2, [r3, #12]
 801d8c0:	683b      	ldr	r3, [r7, #0]
 801d8c2:	681a      	ldr	r2, [r3, #0]
 801d8c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d8c6:	441a      	add	r2, r3
 801d8c8:	683b      	ldr	r3, [r7, #0]
 801d8ca:	601a      	str	r2, [r3, #0]
 801d8cc:	687a      	ldr	r2, [r7, #4]
 801d8ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d8d0:	1ad3      	subs	r3, r2, r3
 801d8d2:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 801d8d4:	687b      	ldr	r3, [r7, #4]
 801d8d6:	2b00      	cmp	r3, #0
 801d8d8:	f47f aeb5 	bne.w	801d646 <f_write+0x76>
 801d8dc:	e000      	b.n	801d8e0 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801d8de:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 801d8e0:	68fb      	ldr	r3, [r7, #12]
 801d8e2:	7d1b      	ldrb	r3, [r3, #20]
 801d8e4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801d8e8:	b2da      	uxtb	r2, r3
 801d8ea:	68fb      	ldr	r3, [r7, #12]
 801d8ec:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 801d8ee:	2300      	movs	r3, #0
}
 801d8f0:	4618      	mov	r0, r3
 801d8f2:	3730      	adds	r7, #48	@ 0x30
 801d8f4:	46bd      	mov	sp, r7
 801d8f6:	bd80      	pop	{r7, pc}

0801d8f8 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 801d8f8:	b580      	push	{r7, lr}
 801d8fa:	b086      	sub	sp, #24
 801d8fc:	af00      	add	r7, sp, #0
 801d8fe:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 801d900:	687b      	ldr	r3, [r7, #4]
 801d902:	f107 0208 	add.w	r2, r7, #8
 801d906:	4611      	mov	r1, r2
 801d908:	4618      	mov	r0, r3
 801d90a:	f7ff fc1d 	bl	801d148 <validate>
 801d90e:	4603      	mov	r3, r0
 801d910:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801d912:	7dfb      	ldrb	r3, [r7, #23]
 801d914:	2b00      	cmp	r3, #0
 801d916:	d168      	bne.n	801d9ea <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 801d918:	687b      	ldr	r3, [r7, #4]
 801d91a:	7d1b      	ldrb	r3, [r3, #20]
 801d91c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801d920:	2b00      	cmp	r3, #0
 801d922:	d062      	beq.n	801d9ea <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 801d924:	687b      	ldr	r3, [r7, #4]
 801d926:	7d1b      	ldrb	r3, [r3, #20]
 801d928:	b25b      	sxtb	r3, r3
 801d92a:	2b00      	cmp	r3, #0
 801d92c:	da15      	bge.n	801d95a <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 801d92e:	68bb      	ldr	r3, [r7, #8]
 801d930:	7858      	ldrb	r0, [r3, #1]
 801d932:	687b      	ldr	r3, [r7, #4]
 801d934:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801d938:	687b      	ldr	r3, [r7, #4]
 801d93a:	6a1a      	ldr	r2, [r3, #32]
 801d93c:	2301      	movs	r3, #1
 801d93e:	f7fd f96f 	bl	801ac20 <disk_write>
 801d942:	4603      	mov	r3, r0
 801d944:	2b00      	cmp	r3, #0
 801d946:	d001      	beq.n	801d94c <f_sync+0x54>
 801d948:	2301      	movs	r3, #1
 801d94a:	e04f      	b.n	801d9ec <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 801d94c:	687b      	ldr	r3, [r7, #4]
 801d94e:	7d1b      	ldrb	r3, [r3, #20]
 801d950:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801d954:	b2da      	uxtb	r2, r3
 801d956:	687b      	ldr	r3, [r7, #4]
 801d958:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 801d95a:	f7fd f8a1 	bl	801aaa0 <get_fattime>
 801d95e:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 801d960:	68ba      	ldr	r2, [r7, #8]
 801d962:	687b      	ldr	r3, [r7, #4]
 801d964:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d966:	4619      	mov	r1, r3
 801d968:	4610      	mov	r0, r2
 801d96a:	f7fd fc47 	bl	801b1fc <move_window>
 801d96e:	4603      	mov	r3, r0
 801d970:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 801d972:	7dfb      	ldrb	r3, [r7, #23]
 801d974:	2b00      	cmp	r3, #0
 801d976:	d138      	bne.n	801d9ea <f_sync+0xf2>
					dir = fp->dir_ptr;
 801d978:	687b      	ldr	r3, [r7, #4]
 801d97a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801d97c:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 801d97e:	68fb      	ldr	r3, [r7, #12]
 801d980:	330b      	adds	r3, #11
 801d982:	781a      	ldrb	r2, [r3, #0]
 801d984:	68fb      	ldr	r3, [r7, #12]
 801d986:	330b      	adds	r3, #11
 801d988:	f042 0220 	orr.w	r2, r2, #32
 801d98c:	b2d2      	uxtb	r2, r2
 801d98e:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 801d990:	687b      	ldr	r3, [r7, #4]
 801d992:	6818      	ldr	r0, [r3, #0]
 801d994:	687b      	ldr	r3, [r7, #4]
 801d996:	689b      	ldr	r3, [r3, #8]
 801d998:	461a      	mov	r2, r3
 801d99a:	68f9      	ldr	r1, [r7, #12]
 801d99c:	f7fe f9d2 	bl	801bd44 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 801d9a0:	68fb      	ldr	r3, [r7, #12]
 801d9a2:	f103 021c 	add.w	r2, r3, #28
 801d9a6:	687b      	ldr	r3, [r7, #4]
 801d9a8:	68db      	ldr	r3, [r3, #12]
 801d9aa:	4619      	mov	r1, r3
 801d9ac:	4610      	mov	r0, r2
 801d9ae:	f7fd f9cb 	bl	801ad48 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 801d9b2:	68fb      	ldr	r3, [r7, #12]
 801d9b4:	3316      	adds	r3, #22
 801d9b6:	6939      	ldr	r1, [r7, #16]
 801d9b8:	4618      	mov	r0, r3
 801d9ba:	f7fd f9c5 	bl	801ad48 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 801d9be:	68fb      	ldr	r3, [r7, #12]
 801d9c0:	3312      	adds	r3, #18
 801d9c2:	2100      	movs	r1, #0
 801d9c4:	4618      	mov	r0, r3
 801d9c6:	f7fd f9a4 	bl	801ad12 <st_word>
					fs->wflag = 1;
 801d9ca:	68bb      	ldr	r3, [r7, #8]
 801d9cc:	2201      	movs	r2, #1
 801d9ce:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 801d9d0:	68bb      	ldr	r3, [r7, #8]
 801d9d2:	4618      	mov	r0, r3
 801d9d4:	f7fd fc40 	bl	801b258 <sync_fs>
 801d9d8:	4603      	mov	r3, r0
 801d9da:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 801d9dc:	687b      	ldr	r3, [r7, #4]
 801d9de:	7d1b      	ldrb	r3, [r3, #20]
 801d9e0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801d9e4:	b2da      	uxtb	r2, r3
 801d9e6:	687b      	ldr	r3, [r7, #4]
 801d9e8:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 801d9ea:	7dfb      	ldrb	r3, [r7, #23]
}
 801d9ec:	4618      	mov	r0, r3
 801d9ee:	3718      	adds	r7, #24
 801d9f0:	46bd      	mov	sp, r7
 801d9f2:	bd80      	pop	{r7, pc}

0801d9f4 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 801d9f4:	b580      	push	{r7, lr}
 801d9f6:	b084      	sub	sp, #16
 801d9f8:	af00      	add	r7, sp, #0
 801d9fa:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 801d9fc:	6878      	ldr	r0, [r7, #4]
 801d9fe:	f7ff ff7b 	bl	801d8f8 <f_sync>
 801da02:	4603      	mov	r3, r0
 801da04:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 801da06:	7bfb      	ldrb	r3, [r7, #15]
 801da08:	2b00      	cmp	r3, #0
 801da0a:	d118      	bne.n	801da3e <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 801da0c:	687b      	ldr	r3, [r7, #4]
 801da0e:	f107 0208 	add.w	r2, r7, #8
 801da12:	4611      	mov	r1, r2
 801da14:	4618      	mov	r0, r3
 801da16:	f7ff fb97 	bl	801d148 <validate>
 801da1a:	4603      	mov	r3, r0
 801da1c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 801da1e:	7bfb      	ldrb	r3, [r7, #15]
 801da20:	2b00      	cmp	r3, #0
 801da22:	d10c      	bne.n	801da3e <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 801da24:	687b      	ldr	r3, [r7, #4]
 801da26:	691b      	ldr	r3, [r3, #16]
 801da28:	4618      	mov	r0, r3
 801da2a:	f7fd fb43 	bl	801b0b4 <dec_lock>
 801da2e:	4603      	mov	r3, r0
 801da30:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 801da32:	7bfb      	ldrb	r3, [r7, #15]
 801da34:	2b00      	cmp	r3, #0
 801da36:	d102      	bne.n	801da3e <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 801da38:	687b      	ldr	r3, [r7, #4]
 801da3a:	2200      	movs	r2, #0
 801da3c:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 801da3e:	7bfb      	ldrb	r3, [r7, #15]
}
 801da40:	4618      	mov	r0, r3
 801da42:	3710      	adds	r7, #16
 801da44:	46bd      	mov	sp, r7
 801da46:	bd80      	pop	{r7, pc}

0801da48 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 801da48:	b580      	push	{r7, lr}
 801da4a:	b0a0      	sub	sp, #128	@ 0x80
 801da4c:	af00      	add	r7, sp, #0
 801da4e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 801da50:	2300      	movs	r3, #0
 801da52:	67bb      	str	r3, [r7, #120]	@ 0x78
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 801da54:	f107 010c 	add.w	r1, r7, #12
 801da58:	1d3b      	adds	r3, r7, #4
 801da5a:	2202      	movs	r2, #2
 801da5c:	4618      	mov	r0, r3
 801da5e:	f7ff f8ed 	bl	801cc3c <find_volume>
 801da62:	4603      	mov	r3, r0
 801da64:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
	dj.obj.fs = fs;
 801da68:	68fb      	ldr	r3, [r7, #12]
 801da6a:	647b      	str	r3, [r7, #68]	@ 0x44
	if (res == FR_OK) {
 801da6c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801da70:	2b00      	cmp	r3, #0
 801da72:	f040 808e 	bne.w	801db92 <f_unlink+0x14a>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 801da76:	687a      	ldr	r2, [r7, #4]
 801da78:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 801da7c:	4611      	mov	r1, r2
 801da7e:	4618      	mov	r0, r3
 801da80:	f7fe ffcc 	bl	801ca1c <follow_path>
 801da84:	4603      	mov	r3, r0
 801da86:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 801da8a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801da8e:	2b00      	cmp	r3, #0
 801da90:	d108      	bne.n	801daa4 <f_unlink+0x5c>
 801da92:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 801da96:	2102      	movs	r1, #2
 801da98:	4618      	mov	r0, r3
 801da9a:	f7fd f9ff 	bl	801ae9c <chk_lock>
 801da9e:	4603      	mov	r3, r0
 801daa0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
#endif
		if (res == FR_OK) {					/* The object is accessible */
 801daa4:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801daa8:	2b00      	cmp	r3, #0
 801daaa:	d172      	bne.n	801db92 <f_unlink+0x14a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 801daac:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 801dab0:	b25b      	sxtb	r3, r3
 801dab2:	2b00      	cmp	r3, #0
 801dab4:	da03      	bge.n	801dabe <f_unlink+0x76>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 801dab6:	2306      	movs	r3, #6
 801dab8:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 801dabc:	e008      	b.n	801dad0 <f_unlink+0x88>
			} else {
				if (dj.obj.attr & AM_RDO) {
 801dabe:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 801dac2:	f003 0301 	and.w	r3, r3, #1
 801dac6:	2b00      	cmp	r3, #0
 801dac8:	d002      	beq.n	801dad0 <f_unlink+0x88>
					res = FR_DENIED;		/* Cannot remove R/O object */
 801daca:	2307      	movs	r3, #7
 801dacc:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
				}
			}
			if (res == FR_OK) {
 801dad0:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801dad4:	2b00      	cmp	r3, #0
 801dad6:	d134      	bne.n	801db42 <f_unlink+0xfa>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 801dad8:	68fb      	ldr	r3, [r7, #12]
 801dada:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 801dadc:	4611      	mov	r1, r2
 801dade:	4618      	mov	r0, r3
 801dae0:	f7fe f911 	bl	801bd06 <ld_clust>
 801dae4:	67b8      	str	r0, [r7, #120]	@ 0x78
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 801dae6:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 801daea:	f003 0310 	and.w	r3, r3, #16
 801daee:	2b00      	cmp	r3, #0
 801daf0:	d027      	beq.n	801db42 <f_unlink+0xfa>
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 801daf2:	68fb      	ldr	r3, [r7, #12]
 801daf4:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 801daf6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801daf8:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 801dafa:	f107 0310 	add.w	r3, r7, #16
 801dafe:	2100      	movs	r1, #0
 801db00:	4618      	mov	r0, r3
 801db02:	f7fd ff5a 	bl	801b9ba <dir_sdi>
 801db06:	4603      	mov	r3, r0
 801db08:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
						if (res == FR_OK) {
 801db0c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801db10:	2b00      	cmp	r3, #0
 801db12:	d116      	bne.n	801db42 <f_unlink+0xfa>
							res = dir_read(&sdj, 0);			/* Read an item */
 801db14:	f107 0310 	add.w	r3, r7, #16
 801db18:	2100      	movs	r1, #0
 801db1a:	4618      	mov	r0, r3
 801db1c:	f7fe fb1d 	bl	801c15a <dir_read>
 801db20:	4603      	mov	r3, r0
 801db22:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 801db26:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801db2a:	2b00      	cmp	r3, #0
 801db2c:	d102      	bne.n	801db34 <f_unlink+0xec>
 801db2e:	2307      	movs	r3, #7
 801db30:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 801db34:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801db38:	2b04      	cmp	r3, #4
 801db3a:	d102      	bne.n	801db42 <f_unlink+0xfa>
 801db3c:	2300      	movs	r3, #0
 801db3e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
						}
					}
				}
			}
			if (res == FR_OK) {
 801db42:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801db46:	2b00      	cmp	r3, #0
 801db48:	d123      	bne.n	801db92 <f_unlink+0x14a>
				res = dir_remove(&dj);			/* Remove the directory entry */
 801db4a:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 801db4e:	4618      	mov	r0, r3
 801db50:	f7fe fd62 	bl	801c618 <dir_remove>
 801db54:	4603      	mov	r3, r0
 801db56:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 801db5a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801db5e:	2b00      	cmp	r3, #0
 801db60:	d10c      	bne.n	801db7c <f_unlink+0x134>
 801db62:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801db64:	2b00      	cmp	r3, #0
 801db66:	d009      	beq.n	801db7c <f_unlink+0x134>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 801db68:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 801db6c:	2200      	movs	r2, #0
 801db6e:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 801db70:	4618      	mov	r0, r3
 801db72:	f7fd fded 	bl	801b750 <remove_chain>
 801db76:	4603      	mov	r3, r0
 801db78:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 801db7c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801db80:	2b00      	cmp	r3, #0
 801db82:	d106      	bne.n	801db92 <f_unlink+0x14a>
 801db84:	68fb      	ldr	r3, [r7, #12]
 801db86:	4618      	mov	r0, r3
 801db88:	f7fd fb66 	bl	801b258 <sync_fs>
 801db8c:	4603      	mov	r3, r0
 801db8e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 801db92:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 801db96:	4618      	mov	r0, r3
 801db98:	3780      	adds	r7, #128	@ 0x80
 801db9a:	46bd      	mov	sp, r7
 801db9c:	bd80      	pop	{r7, pc}
	...

0801dba0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 801dba0:	b480      	push	{r7}
 801dba2:	b087      	sub	sp, #28
 801dba4:	af00      	add	r7, sp, #0
 801dba6:	60f8      	str	r0, [r7, #12]
 801dba8:	60b9      	str	r1, [r7, #8]
 801dbaa:	4613      	mov	r3, r2
 801dbac:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801dbae:	2301      	movs	r3, #1
 801dbb0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801dbb2:	2300      	movs	r3, #0
 801dbb4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801dbb6:	4b1f      	ldr	r3, [pc, #124]	@ (801dc34 <FATFS_LinkDriverEx+0x94>)
 801dbb8:	7a5b      	ldrb	r3, [r3, #9]
 801dbba:	b2db      	uxtb	r3, r3
 801dbbc:	2b00      	cmp	r3, #0
 801dbbe:	d131      	bne.n	801dc24 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 801dbc0:	4b1c      	ldr	r3, [pc, #112]	@ (801dc34 <FATFS_LinkDriverEx+0x94>)
 801dbc2:	7a5b      	ldrb	r3, [r3, #9]
 801dbc4:	b2db      	uxtb	r3, r3
 801dbc6:	461a      	mov	r2, r3
 801dbc8:	4b1a      	ldr	r3, [pc, #104]	@ (801dc34 <FATFS_LinkDriverEx+0x94>)
 801dbca:	2100      	movs	r1, #0
 801dbcc:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801dbce:	4b19      	ldr	r3, [pc, #100]	@ (801dc34 <FATFS_LinkDriverEx+0x94>)
 801dbd0:	7a5b      	ldrb	r3, [r3, #9]
 801dbd2:	b2db      	uxtb	r3, r3
 801dbd4:	4a17      	ldr	r2, [pc, #92]	@ (801dc34 <FATFS_LinkDriverEx+0x94>)
 801dbd6:	009b      	lsls	r3, r3, #2
 801dbd8:	4413      	add	r3, r2
 801dbda:	68fa      	ldr	r2, [r7, #12]
 801dbdc:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801dbde:	4b15      	ldr	r3, [pc, #84]	@ (801dc34 <FATFS_LinkDriverEx+0x94>)
 801dbe0:	7a5b      	ldrb	r3, [r3, #9]
 801dbe2:	b2db      	uxtb	r3, r3
 801dbe4:	461a      	mov	r2, r3
 801dbe6:	4b13      	ldr	r3, [pc, #76]	@ (801dc34 <FATFS_LinkDriverEx+0x94>)
 801dbe8:	4413      	add	r3, r2
 801dbea:	79fa      	ldrb	r2, [r7, #7]
 801dbec:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801dbee:	4b11      	ldr	r3, [pc, #68]	@ (801dc34 <FATFS_LinkDriverEx+0x94>)
 801dbf0:	7a5b      	ldrb	r3, [r3, #9]
 801dbf2:	b2db      	uxtb	r3, r3
 801dbf4:	1c5a      	adds	r2, r3, #1
 801dbf6:	b2d1      	uxtb	r1, r2
 801dbf8:	4a0e      	ldr	r2, [pc, #56]	@ (801dc34 <FATFS_LinkDriverEx+0x94>)
 801dbfa:	7251      	strb	r1, [r2, #9]
 801dbfc:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801dbfe:	7dbb      	ldrb	r3, [r7, #22]
 801dc00:	3330      	adds	r3, #48	@ 0x30
 801dc02:	b2da      	uxtb	r2, r3
 801dc04:	68bb      	ldr	r3, [r7, #8]
 801dc06:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 801dc08:	68bb      	ldr	r3, [r7, #8]
 801dc0a:	3301      	adds	r3, #1
 801dc0c:	223a      	movs	r2, #58	@ 0x3a
 801dc0e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 801dc10:	68bb      	ldr	r3, [r7, #8]
 801dc12:	3302      	adds	r3, #2
 801dc14:	222f      	movs	r2, #47	@ 0x2f
 801dc16:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 801dc18:	68bb      	ldr	r3, [r7, #8]
 801dc1a:	3303      	adds	r3, #3
 801dc1c:	2200      	movs	r2, #0
 801dc1e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 801dc20:	2300      	movs	r3, #0
 801dc22:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 801dc24:	7dfb      	ldrb	r3, [r7, #23]
}
 801dc26:	4618      	mov	r0, r3
 801dc28:	371c      	adds	r7, #28
 801dc2a:	46bd      	mov	sp, r7
 801dc2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dc30:	4770      	bx	lr
 801dc32:	bf00      	nop
 801dc34:	24000768 	.word	0x24000768

0801dc38 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 801dc38:	b580      	push	{r7, lr}
 801dc3a:	b082      	sub	sp, #8
 801dc3c:	af00      	add	r7, sp, #0
 801dc3e:	6078      	str	r0, [r7, #4]
 801dc40:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801dc42:	2200      	movs	r2, #0
 801dc44:	6839      	ldr	r1, [r7, #0]
 801dc46:	6878      	ldr	r0, [r7, #4]
 801dc48:	f7ff ffaa 	bl	801dba0 <FATFS_LinkDriverEx>
 801dc4c:	4603      	mov	r3, r0
}
 801dc4e:	4618      	mov	r0, r3
 801dc50:	3708      	adds	r7, #8
 801dc52:	46bd      	mov	sp, r7
 801dc54:	bd80      	pop	{r7, pc}
	...

0801dc58 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 801dc58:	b480      	push	{r7}
 801dc5a:	b085      	sub	sp, #20
 801dc5c:	af00      	add	r7, sp, #0
 801dc5e:	4603      	mov	r3, r0
 801dc60:	6039      	str	r1, [r7, #0]
 801dc62:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 801dc64:	88fb      	ldrh	r3, [r7, #6]
 801dc66:	2b7f      	cmp	r3, #127	@ 0x7f
 801dc68:	d802      	bhi.n	801dc70 <ff_convert+0x18>
		c = chr;
 801dc6a:	88fb      	ldrh	r3, [r7, #6]
 801dc6c:	81fb      	strh	r3, [r7, #14]
 801dc6e:	e025      	b.n	801dcbc <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 801dc70:	683b      	ldr	r3, [r7, #0]
 801dc72:	2b00      	cmp	r3, #0
 801dc74:	d00b      	beq.n	801dc8e <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 801dc76:	88fb      	ldrh	r3, [r7, #6]
 801dc78:	2bff      	cmp	r3, #255	@ 0xff
 801dc7a:	d805      	bhi.n	801dc88 <ff_convert+0x30>
 801dc7c:	88fb      	ldrh	r3, [r7, #6]
 801dc7e:	3b80      	subs	r3, #128	@ 0x80
 801dc80:	4a12      	ldr	r2, [pc, #72]	@ (801dccc <ff_convert+0x74>)
 801dc82:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801dc86:	e000      	b.n	801dc8a <ff_convert+0x32>
 801dc88:	2300      	movs	r3, #0
 801dc8a:	81fb      	strh	r3, [r7, #14]
 801dc8c:	e016      	b.n	801dcbc <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 801dc8e:	2300      	movs	r3, #0
 801dc90:	81fb      	strh	r3, [r7, #14]
 801dc92:	e009      	b.n	801dca8 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 801dc94:	89fb      	ldrh	r3, [r7, #14]
 801dc96:	4a0d      	ldr	r2, [pc, #52]	@ (801dccc <ff_convert+0x74>)
 801dc98:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801dc9c:	88fa      	ldrh	r2, [r7, #6]
 801dc9e:	429a      	cmp	r2, r3
 801dca0:	d006      	beq.n	801dcb0 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 801dca2:	89fb      	ldrh	r3, [r7, #14]
 801dca4:	3301      	adds	r3, #1
 801dca6:	81fb      	strh	r3, [r7, #14]
 801dca8:	89fb      	ldrh	r3, [r7, #14]
 801dcaa:	2b7f      	cmp	r3, #127	@ 0x7f
 801dcac:	d9f2      	bls.n	801dc94 <ff_convert+0x3c>
 801dcae:	e000      	b.n	801dcb2 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 801dcb0:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 801dcb2:	89fb      	ldrh	r3, [r7, #14]
 801dcb4:	3380      	adds	r3, #128	@ 0x80
 801dcb6:	b29b      	uxth	r3, r3
 801dcb8:	b2db      	uxtb	r3, r3
 801dcba:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 801dcbc:	89fb      	ldrh	r3, [r7, #14]
}
 801dcbe:	4618      	mov	r0, r3
 801dcc0:	3714      	adds	r7, #20
 801dcc2:	46bd      	mov	sp, r7
 801dcc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dcc8:	4770      	bx	lr
 801dcca:	bf00      	nop
 801dccc:	0801e97c 	.word	0x0801e97c

0801dcd0 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 801dcd0:	b480      	push	{r7}
 801dcd2:	b087      	sub	sp, #28
 801dcd4:	af00      	add	r7, sp, #0
 801dcd6:	4603      	mov	r3, r0
 801dcd8:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 801dcda:	88fb      	ldrh	r3, [r7, #6]
 801dcdc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801dce0:	d201      	bcs.n	801dce6 <ff_wtoupper+0x16>
 801dce2:	4b3e      	ldr	r3, [pc, #248]	@ (801dddc <ff_wtoupper+0x10c>)
 801dce4:	e000      	b.n	801dce8 <ff_wtoupper+0x18>
 801dce6:	4b3e      	ldr	r3, [pc, #248]	@ (801dde0 <ff_wtoupper+0x110>)
 801dce8:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 801dcea:	697b      	ldr	r3, [r7, #20]
 801dcec:	1c9a      	adds	r2, r3, #2
 801dcee:	617a      	str	r2, [r7, #20]
 801dcf0:	881b      	ldrh	r3, [r3, #0]
 801dcf2:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 801dcf4:	8a7b      	ldrh	r3, [r7, #18]
 801dcf6:	2b00      	cmp	r3, #0
 801dcf8:	d068      	beq.n	801ddcc <ff_wtoupper+0xfc>
 801dcfa:	88fa      	ldrh	r2, [r7, #6]
 801dcfc:	8a7b      	ldrh	r3, [r7, #18]
 801dcfe:	429a      	cmp	r2, r3
 801dd00:	d364      	bcc.n	801ddcc <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 801dd02:	697b      	ldr	r3, [r7, #20]
 801dd04:	1c9a      	adds	r2, r3, #2
 801dd06:	617a      	str	r2, [r7, #20]
 801dd08:	881b      	ldrh	r3, [r3, #0]
 801dd0a:	823b      	strh	r3, [r7, #16]
 801dd0c:	8a3b      	ldrh	r3, [r7, #16]
 801dd0e:	0a1b      	lsrs	r3, r3, #8
 801dd10:	81fb      	strh	r3, [r7, #14]
 801dd12:	8a3b      	ldrh	r3, [r7, #16]
 801dd14:	b2db      	uxtb	r3, r3
 801dd16:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 801dd18:	88fa      	ldrh	r2, [r7, #6]
 801dd1a:	8a79      	ldrh	r1, [r7, #18]
 801dd1c:	8a3b      	ldrh	r3, [r7, #16]
 801dd1e:	440b      	add	r3, r1
 801dd20:	429a      	cmp	r2, r3
 801dd22:	da49      	bge.n	801ddb8 <ff_wtoupper+0xe8>
			switch (cmd) {
 801dd24:	89fb      	ldrh	r3, [r7, #14]
 801dd26:	2b08      	cmp	r3, #8
 801dd28:	d84f      	bhi.n	801ddca <ff_wtoupper+0xfa>
 801dd2a:	a201      	add	r2, pc, #4	@ (adr r2, 801dd30 <ff_wtoupper+0x60>)
 801dd2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801dd30:	0801dd55 	.word	0x0801dd55
 801dd34:	0801dd67 	.word	0x0801dd67
 801dd38:	0801dd7d 	.word	0x0801dd7d
 801dd3c:	0801dd85 	.word	0x0801dd85
 801dd40:	0801dd8d 	.word	0x0801dd8d
 801dd44:	0801dd95 	.word	0x0801dd95
 801dd48:	0801dd9d 	.word	0x0801dd9d
 801dd4c:	0801dda5 	.word	0x0801dda5
 801dd50:	0801ddad 	.word	0x0801ddad
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 801dd54:	88fa      	ldrh	r2, [r7, #6]
 801dd56:	8a7b      	ldrh	r3, [r7, #18]
 801dd58:	1ad3      	subs	r3, r2, r3
 801dd5a:	005b      	lsls	r3, r3, #1
 801dd5c:	697a      	ldr	r2, [r7, #20]
 801dd5e:	4413      	add	r3, r2
 801dd60:	881b      	ldrh	r3, [r3, #0]
 801dd62:	80fb      	strh	r3, [r7, #6]
 801dd64:	e027      	b.n	801ddb6 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 801dd66:	88fa      	ldrh	r2, [r7, #6]
 801dd68:	8a7b      	ldrh	r3, [r7, #18]
 801dd6a:	1ad3      	subs	r3, r2, r3
 801dd6c:	b29b      	uxth	r3, r3
 801dd6e:	f003 0301 	and.w	r3, r3, #1
 801dd72:	b29b      	uxth	r3, r3
 801dd74:	88fa      	ldrh	r2, [r7, #6]
 801dd76:	1ad3      	subs	r3, r2, r3
 801dd78:	80fb      	strh	r3, [r7, #6]
 801dd7a:	e01c      	b.n	801ddb6 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 801dd7c:	88fb      	ldrh	r3, [r7, #6]
 801dd7e:	3b10      	subs	r3, #16
 801dd80:	80fb      	strh	r3, [r7, #6]
 801dd82:	e018      	b.n	801ddb6 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 801dd84:	88fb      	ldrh	r3, [r7, #6]
 801dd86:	3b20      	subs	r3, #32
 801dd88:	80fb      	strh	r3, [r7, #6]
 801dd8a:	e014      	b.n	801ddb6 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 801dd8c:	88fb      	ldrh	r3, [r7, #6]
 801dd8e:	3b30      	subs	r3, #48	@ 0x30
 801dd90:	80fb      	strh	r3, [r7, #6]
 801dd92:	e010      	b.n	801ddb6 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 801dd94:	88fb      	ldrh	r3, [r7, #6]
 801dd96:	3b1a      	subs	r3, #26
 801dd98:	80fb      	strh	r3, [r7, #6]
 801dd9a:	e00c      	b.n	801ddb6 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 801dd9c:	88fb      	ldrh	r3, [r7, #6]
 801dd9e:	3308      	adds	r3, #8
 801dda0:	80fb      	strh	r3, [r7, #6]
 801dda2:	e008      	b.n	801ddb6 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 801dda4:	88fb      	ldrh	r3, [r7, #6]
 801dda6:	3b50      	subs	r3, #80	@ 0x50
 801dda8:	80fb      	strh	r3, [r7, #6]
 801ddaa:	e004      	b.n	801ddb6 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 801ddac:	88fb      	ldrh	r3, [r7, #6]
 801ddae:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 801ddb2:	80fb      	strh	r3, [r7, #6]
 801ddb4:	bf00      	nop
			}
			break;
 801ddb6:	e008      	b.n	801ddca <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 801ddb8:	89fb      	ldrh	r3, [r7, #14]
 801ddba:	2b00      	cmp	r3, #0
 801ddbc:	d195      	bne.n	801dcea <ff_wtoupper+0x1a>
 801ddbe:	8a3b      	ldrh	r3, [r7, #16]
 801ddc0:	005b      	lsls	r3, r3, #1
 801ddc2:	697a      	ldr	r2, [r7, #20]
 801ddc4:	4413      	add	r3, r2
 801ddc6:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 801ddc8:	e78f      	b.n	801dcea <ff_wtoupper+0x1a>
			break;
 801ddca:	bf00      	nop
	}

	return chr;
 801ddcc:	88fb      	ldrh	r3, [r7, #6]
}
 801ddce:	4618      	mov	r0, r3
 801ddd0:	371c      	adds	r7, #28
 801ddd2:	46bd      	mov	sp, r7
 801ddd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ddd8:	4770      	bx	lr
 801ddda:	bf00      	nop
 801dddc:	0801ea7c 	.word	0x0801ea7c
 801dde0:	0801ec70 	.word	0x0801ec70

0801dde4 <memset>:
 801dde4:	4402      	add	r2, r0
 801dde6:	4603      	mov	r3, r0
 801dde8:	4293      	cmp	r3, r2
 801ddea:	d100      	bne.n	801ddee <memset+0xa>
 801ddec:	4770      	bx	lr
 801ddee:	f803 1b01 	strb.w	r1, [r3], #1
 801ddf2:	e7f9      	b.n	801dde8 <memset+0x4>

0801ddf4 <__errno>:
 801ddf4:	4b01      	ldr	r3, [pc, #4]	@ (801ddfc <__errno+0x8>)
 801ddf6:	6818      	ldr	r0, [r3, #0]
 801ddf8:	4770      	bx	lr
 801ddfa:	bf00      	nop
 801ddfc:	24000028 	.word	0x24000028

0801de00 <__libc_init_array>:
 801de00:	b570      	push	{r4, r5, r6, lr}
 801de02:	4d0d      	ldr	r5, [pc, #52]	@ (801de38 <__libc_init_array+0x38>)
 801de04:	4c0d      	ldr	r4, [pc, #52]	@ (801de3c <__libc_init_array+0x3c>)
 801de06:	1b64      	subs	r4, r4, r5
 801de08:	10a4      	asrs	r4, r4, #2
 801de0a:	2600      	movs	r6, #0
 801de0c:	42a6      	cmp	r6, r4
 801de0e:	d109      	bne.n	801de24 <__libc_init_array+0x24>
 801de10:	4d0b      	ldr	r5, [pc, #44]	@ (801de40 <__libc_init_array+0x40>)
 801de12:	4c0c      	ldr	r4, [pc, #48]	@ (801de44 <__libc_init_array+0x44>)
 801de14:	f000 fd00 	bl	801e818 <_init>
 801de18:	1b64      	subs	r4, r4, r5
 801de1a:	10a4      	asrs	r4, r4, #2
 801de1c:	2600      	movs	r6, #0
 801de1e:	42a6      	cmp	r6, r4
 801de20:	d105      	bne.n	801de2e <__libc_init_array+0x2e>
 801de22:	bd70      	pop	{r4, r5, r6, pc}
 801de24:	f855 3b04 	ldr.w	r3, [r5], #4
 801de28:	4798      	blx	r3
 801de2a:	3601      	adds	r6, #1
 801de2c:	e7ee      	b.n	801de0c <__libc_init_array+0xc>
 801de2e:	f855 3b04 	ldr.w	r3, [r5], #4
 801de32:	4798      	blx	r3
 801de34:	3601      	adds	r6, #1
 801de36:	e7f2      	b.n	801de1e <__libc_init_array+0x1e>
 801de38:	08020660 	.word	0x08020660
 801de3c:	08020660 	.word	0x08020660
 801de40:	08020660 	.word	0x08020660
 801de44:	08020664 	.word	0x08020664

0801de48 <atan2>:
 801de48:	f000 baaa 	b.w	801e3a0 <__ieee754_atan2>
 801de4c:	0000      	movs	r0, r0
	...

0801de50 <sqrt>:
 801de50:	b508      	push	{r3, lr}
 801de52:	ed2d 8b04 	vpush	{d8-d9}
 801de56:	eeb0 8b40 	vmov.f64	d8, d0
 801de5a:	f000 fa9d 	bl	801e398 <__ieee754_sqrt>
 801de5e:	eeb4 8b48 	vcmp.f64	d8, d8
 801de62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801de66:	d60c      	bvs.n	801de82 <sqrt+0x32>
 801de68:	ed9f 9b07 	vldr	d9, [pc, #28]	@ 801de88 <sqrt+0x38>
 801de6c:	eeb4 8bc9 	vcmpe.f64	d8, d9
 801de70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801de74:	d505      	bpl.n	801de82 <sqrt+0x32>
 801de76:	f7ff ffbd 	bl	801ddf4 <__errno>
 801de7a:	ee89 0b09 	vdiv.f64	d0, d9, d9
 801de7e:	2321      	movs	r3, #33	@ 0x21
 801de80:	6003      	str	r3, [r0, #0]
 801de82:	ecbd 8b04 	vpop	{d8-d9}
 801de86:	bd08      	pop	{r3, pc}
	...

0801de90 <checkint>:
 801de90:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801de94:	f240 33fe 	movw	r3, #1022	@ 0x3fe
 801de98:	429a      	cmp	r2, r3
 801de9a:	b570      	push	{r4, r5, r6, lr}
 801de9c:	dd2a      	ble.n	801def4 <checkint+0x64>
 801de9e:	f240 4333 	movw	r3, #1075	@ 0x433
 801dea2:	429a      	cmp	r2, r3
 801dea4:	dc24      	bgt.n	801def0 <checkint+0x60>
 801dea6:	1a9b      	subs	r3, r3, r2
 801dea8:	f1a3 0620 	sub.w	r6, r3, #32
 801deac:	f04f 32ff 	mov.w	r2, #4294967295
 801deb0:	fa02 f403 	lsl.w	r4, r2, r3
 801deb4:	fa02 f606 	lsl.w	r6, r2, r6
 801deb8:	f1c3 0520 	rsb	r5, r3, #32
 801debc:	fa22 f505 	lsr.w	r5, r2, r5
 801dec0:	4334      	orrs	r4, r6
 801dec2:	432c      	orrs	r4, r5
 801dec4:	409a      	lsls	r2, r3
 801dec6:	ea20 0202 	bic.w	r2, r0, r2
 801deca:	ea21 0404 	bic.w	r4, r1, r4
 801dece:	4322      	orrs	r2, r4
 801ded0:	f1a3 0420 	sub.w	r4, r3, #32
 801ded4:	f1c3 0220 	rsb	r2, r3, #32
 801ded8:	d10c      	bne.n	801def4 <checkint+0x64>
 801deda:	40d8      	lsrs	r0, r3
 801dedc:	fa01 f302 	lsl.w	r3, r1, r2
 801dee0:	4318      	orrs	r0, r3
 801dee2:	40e1      	lsrs	r1, r4
 801dee4:	4308      	orrs	r0, r1
 801dee6:	f000 0001 	and.w	r0, r0, #1
 801deea:	f1d0 0002 	rsbs	r0, r0, #2
 801deee:	bd70      	pop	{r4, r5, r6, pc}
 801def0:	2002      	movs	r0, #2
 801def2:	e7fc      	b.n	801deee <checkint+0x5e>
 801def4:	2000      	movs	r0, #0
 801def6:	e7fa      	b.n	801deee <checkint+0x5e>

0801def8 <pow>:
 801def8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801defc:	ee10 4a90 	vmov	r4, s1
 801df00:	ed2d 8b0a 	vpush	{d8-d12}
 801df04:	ea4f 5814 	mov.w	r8, r4, lsr #20
 801df08:	ee11 aa90 	vmov	sl, s3
 801df0c:	f108 32ff 	add.w	r2, r8, #4294967295
 801df10:	f240 73fd 	movw	r3, #2045	@ 0x7fd
 801df14:	429a      	cmp	r2, r3
 801df16:	ee10 5a10 	vmov	r5, s0
 801df1a:	ee11 0a10 	vmov	r0, s2
 801df1e:	b087      	sub	sp, #28
 801df20:	46c4      	mov	ip, r8
 801df22:	ea4f 561a 	mov.w	r6, sl, lsr #20
 801df26:	d806      	bhi.n	801df36 <pow+0x3e>
 801df28:	f3c6 030a 	ubfx	r3, r6, #0, #11
 801df2c:	f2a3 33be 	subw	r3, r3, #958	@ 0x3be
 801df30:	2b7f      	cmp	r3, #127	@ 0x7f
 801df32:	f240 8157 	bls.w	801e1e4 <pow+0x2ec>
 801df36:	1802      	adds	r2, r0, r0
 801df38:	eb4a 010a 	adc.w	r1, sl, sl
 801df3c:	f06f 0b01 	mvn.w	fp, #1
 801df40:	1e57      	subs	r7, r2, #1
 801df42:	f141 33ff 	adc.w	r3, r1, #4294967295
 801df46:	f46f 1e00 	mvn.w	lr, #2097152	@ 0x200000
 801df4a:	45bb      	cmp	fp, r7
 801df4c:	eb7e 0303 	sbcs.w	r3, lr, r3
 801df50:	d242      	bcs.n	801dfd8 <pow+0xe0>
 801df52:	ea52 0301 	orrs.w	r3, r2, r1
 801df56:	f04f 0300 	mov.w	r3, #0
 801df5a:	d10c      	bne.n	801df76 <pow+0x7e>
 801df5c:	196d      	adds	r5, r5, r5
 801df5e:	f484 2400 	eor.w	r4, r4, #524288	@ 0x80000
 801df62:	4164      	adcs	r4, r4
 801df64:	42ab      	cmp	r3, r5
 801df66:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 801df6a:	41a3      	sbcs	r3, r4
 801df6c:	f0c0 808f 	bcc.w	801e08e <pow+0x196>
 801df70:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 801df74:	e02b      	b.n	801dfce <pow+0xd6>
 801df76:	4ed4      	ldr	r6, [pc, #848]	@ (801e2c8 <pow+0x3d0>)
 801df78:	42b4      	cmp	r4, r6
 801df7a:	bf08      	it	eq
 801df7c:	429d      	cmpeq	r5, r3
 801df7e:	d109      	bne.n	801df94 <pow+0x9c>
 801df80:	1800      	adds	r0, r0, r0
 801df82:	f48a 2a00 	eor.w	sl, sl, #524288	@ 0x80000
 801df86:	eb4a 0a0a 	adc.w	sl, sl, sl
 801df8a:	4283      	cmp	r3, r0
 801df8c:	4bcf      	ldr	r3, [pc, #828]	@ (801e2cc <pow+0x3d4>)
 801df8e:	eb73 030a 	sbcs.w	r3, r3, sl
 801df92:	e7eb      	b.n	801df6c <pow+0x74>
 801df94:	196d      	adds	r5, r5, r5
 801df96:	48ce      	ldr	r0, [pc, #824]	@ (801e2d0 <pow+0x3d8>)
 801df98:	4164      	adcs	r4, r4
 801df9a:	42ab      	cmp	r3, r5
 801df9c:	eb70 0604 	sbcs.w	r6, r0, r4
 801dfa0:	d375      	bcc.n	801e08e <pow+0x196>
 801dfa2:	4281      	cmp	r1, r0
 801dfa4:	bf08      	it	eq
 801dfa6:	429a      	cmpeq	r2, r3
 801dfa8:	d171      	bne.n	801e08e <pow+0x196>
 801dfaa:	4aca      	ldr	r2, [pc, #808]	@ (801e2d4 <pow+0x3dc>)
 801dfac:	4294      	cmp	r4, r2
 801dfae:	bf08      	it	eq
 801dfb0:	429d      	cmpeq	r5, r3
 801dfb2:	d0dd      	beq.n	801df70 <pow+0x78>
 801dfb4:	4294      	cmp	r4, r2
 801dfb6:	ea6f 0a0a 	mvn.w	sl, sl
 801dfba:	bf34      	ite	cc
 801dfbc:	2400      	movcc	r4, #0
 801dfbe:	2401      	movcs	r4, #1
 801dfc0:	ea4f 7ada 	mov.w	sl, sl, lsr #31
 801dfc4:	4554      	cmp	r4, sl
 801dfc6:	f040 81dc 	bne.w	801e382 <pow+0x48a>
 801dfca:	ee21 0b01 	vmul.f64	d0, d1, d1
 801dfce:	b007      	add	sp, #28
 801dfd0:	ecbd 8b0a 	vpop	{d8-d12}
 801dfd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dfd8:	196f      	adds	r7, r5, r5
 801dfda:	eb44 0904 	adc.w	r9, r4, r4
 801dfde:	1e7a      	subs	r2, r7, #1
 801dfe0:	f169 0300 	sbc.w	r3, r9, #0
 801dfe4:	4593      	cmp	fp, r2
 801dfe6:	eb7e 0303 	sbcs.w	r3, lr, r3
 801dfea:	d225      	bcs.n	801e038 <pow+0x140>
 801dfec:	ee20 0b00 	vmul.f64	d0, d0, d0
 801dff0:	2c00      	cmp	r4, #0
 801dff2:	da13      	bge.n	801e01c <pow+0x124>
 801dff4:	4651      	mov	r1, sl
 801dff6:	f7ff ff4b 	bl	801de90 <checkint>
 801dffa:	2801      	cmp	r0, #1
 801dffc:	d10e      	bne.n	801e01c <pow+0x124>
 801dffe:	eeb1 0b40 	vneg.f64	d0, d0
 801e002:	ea57 0909 	orrs.w	r9, r7, r9
 801e006:	d10b      	bne.n	801e020 <pow+0x128>
 801e008:	f1ba 0f00 	cmp.w	sl, #0
 801e00c:	dadf      	bge.n	801dfce <pow+0xd6>
 801e00e:	b007      	add	sp, #28
 801e010:	ecbd 8b0a 	vpop	{d8-d12}
 801e014:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e018:	f000 bbba 	b.w	801e790 <__math_divzero>
 801e01c:	2000      	movs	r0, #0
 801e01e:	e7f0      	b.n	801e002 <pow+0x10a>
 801e020:	f1ba 0f00 	cmp.w	sl, #0
 801e024:	dad3      	bge.n	801dfce <pow+0xd6>
 801e026:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 801e02a:	ee86 7b00 	vdiv.f64	d7, d6, d0
 801e02e:	ed8d 7b00 	vstr	d7, [sp]
 801e032:	ed9d 0b00 	vldr	d0, [sp]
 801e036:	e7ca      	b.n	801dfce <pow+0xd6>
 801e038:	2c00      	cmp	r4, #0
 801e03a:	da2b      	bge.n	801e094 <pow+0x19c>
 801e03c:	4651      	mov	r1, sl
 801e03e:	f7ff ff27 	bl	801de90 <checkint>
 801e042:	b930      	cbnz	r0, 801e052 <pow+0x15a>
 801e044:	b007      	add	sp, #28
 801e046:	ecbd 8b0a 	vpop	{d8-d12}
 801e04a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e04e:	f000 bbb7 	b.w	801e7c0 <__math_invalid>
 801e052:	1e41      	subs	r1, r0, #1
 801e054:	4248      	negs	r0, r1
 801e056:	4148      	adcs	r0, r1
 801e058:	0480      	lsls	r0, r0, #18
 801e05a:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 801e05e:	f3c8 0c0a 	ubfx	ip, r8, #0, #11
 801e062:	f3c6 020a 	ubfx	r2, r6, #0, #11
 801e066:	f2a2 33be 	subw	r3, r2, #958	@ 0x3be
 801e06a:	2b7f      	cmp	r3, #127	@ 0x7f
 801e06c:	d92d      	bls.n	801e0ca <pow+0x1d2>
 801e06e:	4b96      	ldr	r3, [pc, #600]	@ (801e2c8 <pow+0x3d0>)
 801e070:	2000      	movs	r0, #0
 801e072:	429c      	cmp	r4, r3
 801e074:	bf08      	it	eq
 801e076:	4285      	cmpeq	r5, r0
 801e078:	f43f af7a 	beq.w	801df70 <pow+0x78>
 801e07c:	f240 31bd 	movw	r1, #957	@ 0x3bd
 801e080:	428a      	cmp	r2, r1
 801e082:	d80c      	bhi.n	801e09e <pow+0x1a6>
 801e084:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 801e088:	42a8      	cmp	r0, r5
 801e08a:	41a3      	sbcs	r3, r4
 801e08c:	d204      	bcs.n	801e098 <pow+0x1a0>
 801e08e:	ee31 0b00 	vadd.f64	d0, d1, d0
 801e092:	e79c      	b.n	801dfce <pow+0xd6>
 801e094:	2000      	movs	r0, #0
 801e096:	e7e4      	b.n	801e062 <pow+0x16a>
 801e098:	ee30 0b41 	vsub.f64	d0, d0, d1
 801e09c:	e797      	b.n	801dfce <pow+0xd6>
 801e09e:	2d01      	cmp	r5, #1
 801e0a0:	eb74 0303 	sbcs.w	r3, r4, r3
 801e0a4:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 801e0a8:	bf34      	ite	cc
 801e0aa:	2301      	movcc	r3, #1
 801e0ac:	2300      	movcs	r3, #0
 801e0ae:	4296      	cmp	r6, r2
 801e0b0:	bf8c      	ite	hi
 801e0b2:	2600      	movhi	r6, #0
 801e0b4:	2601      	movls	r6, #1
 801e0b6:	42b3      	cmp	r3, r6
 801e0b8:	f000 809c 	beq.w	801e1f4 <pow+0x2fc>
 801e0bc:	b007      	add	sp, #28
 801e0be:	ecbd 8b0a 	vpop	{d8-d12}
 801e0c2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e0c6:	f000 bb5b 	b.w	801e780 <__math_oflow>
 801e0ca:	f1bc 0f00 	cmp.w	ip, #0
 801e0ce:	d10a      	bne.n	801e0e6 <pow+0x1ee>
 801e0d0:	ed9f 7b79 	vldr	d7, [pc, #484]	@ 801e2b8 <pow+0x3c0>
 801e0d4:	ee20 7b07 	vmul.f64	d7, d0, d7
 801e0d8:	ec53 2b17 	vmov	r2, r3, d7
 801e0dc:	f023 4400 	bic.w	r4, r3, #2147483648	@ 0x80000000
 801e0e0:	4615      	mov	r5, r2
 801e0e2:	f1a4 7450 	sub.w	r4, r4, #54525952	@ 0x3400000
 801e0e6:	4a7c      	ldr	r2, [pc, #496]	@ (801e2d8 <pow+0x3e0>)
 801e0e8:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 801e0ec:	4422      	add	r2, r4
 801e0ee:	1513      	asrs	r3, r2, #20
 801e0f0:	f3c2 3146 	ubfx	r1, r2, #13, #7
 801e0f4:	ee03 3a10 	vmov	s6, r3
 801e0f8:	0d12      	lsrs	r2, r2, #20
 801e0fa:	4b78      	ldr	r3, [pc, #480]	@ (801e2dc <pow+0x3e4>)
 801e0fc:	0512      	lsls	r2, r2, #20
 801e0fe:	eb03 1641 	add.w	r6, r3, r1, lsl #5
 801e102:	1aa7      	subs	r7, r4, r2
 801e104:	eb03 1241 	add.w	r2, r3, r1, lsl #5
 801e108:	ed92 5b12 	vldr	d5, [r2, #72]	@ 0x48
 801e10c:	ed96 7b18 	vldr	d7, [r6, #96]	@ 0x60
 801e110:	1e2e      	subs	r6, r5, #0
 801e112:	ec47 6b14 	vmov	d4, r6, r7
 801e116:	ed92 2b16 	vldr	d2, [r2, #88]	@ 0x58
 801e11a:	eea4 6b05 	vfma.f64	d6, d4, d5
 801e11e:	ed93 5b00 	vldr	d5, [r3]
 801e122:	eeb8 3bc3 	vcvt.f64.s32	d3, s6
 801e126:	eea3 2b05 	vfma.f64	d2, d3, d5
 801e12a:	ed93 5b02 	vldr	d5, [r3, #8]
 801e12e:	ee36 4b02 	vadd.f64	d4, d6, d2
 801e132:	ee32 2b44 	vsub.f64	d2, d2, d4
 801e136:	eea3 7b05 	vfma.f64	d7, d3, d5
 801e13a:	ed93 5b04 	vldr	d5, [r3, #16]
 801e13e:	ee32 2b06 	vadd.f64	d2, d2, d6
 801e142:	ee37 7b02 	vadd.f64	d7, d7, d2
 801e146:	ee26 5b05 	vmul.f64	d5, d6, d5
 801e14a:	ee26 0b05 	vmul.f64	d0, d6, d5
 801e14e:	ee34 8b00 	vadd.f64	d8, d4, d0
 801e152:	eeb0 9b40 	vmov.f64	d9, d0
 801e156:	ee34 4b48 	vsub.f64	d4, d4, d8
 801e15a:	ee96 9b05 	vfnms.f64	d9, d6, d5
 801e15e:	ee34 ab00 	vadd.f64	d10, d4, d0
 801e162:	ed93 5b06 	vldr	d5, [r3, #24]
 801e166:	ee26 bb00 	vmul.f64	d11, d6, d0
 801e16a:	ee37 7b09 	vadd.f64	d7, d7, d9
 801e16e:	ed93 4b08 	vldr	d4, [r3, #32]
 801e172:	ee37 7b0a 	vadd.f64	d7, d7, d10
 801e176:	ed93 3b0c 	vldr	d3, [r3, #48]	@ 0x30
 801e17a:	eea6 5b04 	vfma.f64	d5, d6, d4
 801e17e:	ed93 4b0a 	vldr	d4, [r3, #40]	@ 0x28
 801e182:	ed93 cb10 	vldr	d12, [r3, #64]	@ 0x40
 801e186:	eea6 4b03 	vfma.f64	d4, d6, d3
 801e18a:	ed93 3b0e 	vldr	d3, [r3, #56]	@ 0x38
 801e18e:	eea6 3b0c 	vfma.f64	d3, d6, d12
 801e192:	eea0 4b03 	vfma.f64	d4, d0, d3
 801e196:	eea0 5b04 	vfma.f64	d5, d0, d4
 801e19a:	eeab 7b05 	vfma.f64	d7, d11, d5
 801e19e:	ee38 4b07 	vadd.f64	d4, d8, d7
 801e1a2:	ee21 6b04 	vmul.f64	d6, d1, d4
 801e1a6:	ee16 3a90 	vmov	r3, s13
 801e1aa:	eeb0 5b46 	vmov.f64	d5, d6
 801e1ae:	f3c3 560a 	ubfx	r6, r3, #20, #11
 801e1b2:	f46f 7272 	mvn.w	r2, #968	@ 0x3c8
 801e1b6:	18b2      	adds	r2, r6, r2
 801e1b8:	2a3e      	cmp	r2, #62	@ 0x3e
 801e1ba:	ee91 5b04 	vfnms.f64	d5, d1, d4
 801e1be:	ee38 8b44 	vsub.f64	d8, d8, d4
 801e1c2:	ee38 8b07 	vadd.f64	d8, d8, d7
 801e1c6:	eea1 5b08 	vfma.f64	d5, d1, d8
 801e1ca:	d91b      	bls.n	801e204 <pow+0x30c>
 801e1cc:	2a00      	cmp	r2, #0
 801e1ce:	da0b      	bge.n	801e1e8 <pow+0x2f0>
 801e1d0:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 801e1d4:	ee36 0b00 	vadd.f64	d0, d6, d0
 801e1d8:	2800      	cmp	r0, #0
 801e1da:	f43f aef8 	beq.w	801dfce <pow+0xd6>
 801e1de:	eeb1 0b40 	vneg.f64	d0, d0
 801e1e2:	e6f4      	b.n	801dfce <pow+0xd6>
 801e1e4:	2000      	movs	r0, #0
 801e1e6:	e77e      	b.n	801e0e6 <pow+0x1ee>
 801e1e8:	f5b6 6f81 	cmp.w	r6, #1032	@ 0x408
 801e1ec:	d909      	bls.n	801e202 <pow+0x30a>
 801e1ee:	2b00      	cmp	r3, #0
 801e1f0:	f6bf af64 	bge.w	801e0bc <pow+0x1c4>
 801e1f4:	b007      	add	sp, #28
 801e1f6:	ecbd 8b0a 	vpop	{d8-d12}
 801e1fa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e1fe:	f000 bab7 	b.w	801e770 <__math_uflow>
 801e202:	2600      	movs	r6, #0
 801e204:	4936      	ldr	r1, [pc, #216]	@ (801e2e0 <pow+0x3e8>)
 801e206:	ed91 4b02 	vldr	d4, [r1, #8]
 801e20a:	ed91 3b00 	vldr	d3, [r1]
 801e20e:	eeb0 7b44 	vmov.f64	d7, d4
 801e212:	eea6 7b03 	vfma.f64	d7, d6, d3
 801e216:	ee17 5a10 	vmov	r5, s14
 801e21a:	ee37 7b44 	vsub.f64	d7, d7, d4
 801e21e:	ed91 4b04 	vldr	d4, [r1, #16]
 801e222:	f005 037f 	and.w	r3, r5, #127	@ 0x7f
 801e226:	eea7 6b04 	vfma.f64	d6, d7, d4
 801e22a:	ed91 4b06 	vldr	d4, [r1, #24]
 801e22e:	18dc      	adds	r4, r3, r3
 801e230:	f104 030f 	add.w	r3, r4, #15
 801e234:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 801e238:	eea7 6b04 	vfma.f64	d6, d7, d4
 801e23c:	ed91 3b0a 	vldr	d3, [r1, #40]	@ 0x28
 801e240:	ee35 5b06 	vadd.f64	d5, d5, d6
 801e244:	ee25 6b05 	vmul.f64	d6, d5, d5
 801e248:	ed94 7b1c 	vldr	d7, [r4, #112]	@ 0x70
 801e24c:	ed91 4b08 	vldr	d4, [r1, #32]
 801e250:	ee35 7b07 	vadd.f64	d7, d5, d7
 801e254:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 801e258:	eea5 4b03 	vfma.f64	d4, d5, d3
 801e25c:	ed91 3b0e 	vldr	d3, [r1, #56]	@ 0x38
 801e260:	eea6 7b04 	vfma.f64	d7, d6, d4
 801e264:	ee26 6b06 	vmul.f64	d6, d6, d6
 801e268:	ed91 4b0c 	vldr	d4, [r1, #48]	@ 0x30
 801e26c:	f851 c033 	ldr.w	ip, [r1, r3, lsl #3]
 801e270:	f8d2 e004 	ldr.w	lr, [r2, #4]
 801e274:	eea5 4b03 	vfma.f64	d4, d5, d3
 801e278:	1940      	adds	r0, r0, r5
 801e27a:	2700      	movs	r7, #0
 801e27c:	eb17 020c 	adds.w	r2, r7, ip
 801e280:	eb0e 3340 	add.w	r3, lr, r0, lsl #13
 801e284:	eea6 7b04 	vfma.f64	d7, d6, d4
 801e288:	2e00      	cmp	r6, #0
 801e28a:	d175      	bne.n	801e378 <pow+0x480>
 801e28c:	42bd      	cmp	r5, r7
 801e28e:	db29      	blt.n	801e2e4 <pow+0x3ec>
 801e290:	f103 4140 	add.w	r1, r3, #3221225472	@ 0xc0000000
 801e294:	f501 0170 	add.w	r1, r1, #15728640	@ 0xf00000
 801e298:	4610      	mov	r0, r2
 801e29a:	ec41 0b10 	vmov	d0, r0, r1
 801e29e:	eea7 0b00 	vfma.f64	d0, d7, d0
 801e2a2:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 801e2c0 <pow+0x3c8>
 801e2a6:	ee20 0b07 	vmul.f64	d0, d0, d7
 801e2aa:	b007      	add	sp, #28
 801e2ac:	ecbd 8b0a 	vpop	{d8-d12}
 801e2b0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e2b4:	f000 ba9c 	b.w	801e7f0 <__math_check_oflow>
 801e2b8:	00000000 	.word	0x00000000
 801e2bc:	43300000 	.word	0x43300000
 801e2c0:	00000000 	.word	0x00000000
 801e2c4:	7f000000 	.word	0x7f000000
 801e2c8:	3ff00000 	.word	0x3ff00000
 801e2cc:	fff00000 	.word	0xfff00000
 801e2d0:	ffe00000 	.word	0xffe00000
 801e2d4:	7fe00000 	.word	0x7fe00000
 801e2d8:	c0196aab 	.word	0xc0196aab
 801e2dc:	0801ed30 	.word	0x0801ed30
 801e2e0:	0801fde8 	.word	0x0801fde8
 801e2e4:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 801e2e8:	f501 1100 	add.w	r1, r1, #2097152	@ 0x200000
 801e2ec:	4610      	mov	r0, r2
 801e2ee:	ec41 0b15 	vmov	d5, r0, r1
 801e2f2:	eeb7 3b00 	vmov.f64	d3, #112	@ 0x3f800000  1.0
 801e2f6:	ee27 6b05 	vmul.f64	d6, d7, d5
 801e2fa:	ee35 7b06 	vadd.f64	d7, d5, d6
 801e2fe:	eeb0 4bc7 	vabs.f64	d4, d7
 801e302:	eeb4 4bc3 	vcmpe.f64	d4, d3
 801e306:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e30a:	ed9f 0b1f 	vldr	d0, [pc, #124]	@ 801e388 <pow+0x490>
 801e30e:	d52a      	bpl.n	801e366 <pow+0x46e>
 801e310:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801e314:	ee35 5b47 	vsub.f64	d5, d5, d7
 801e318:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e31c:	ee35 5b06 	vadd.f64	d5, d5, d6
 801e320:	eebf 4b00 	vmov.f64	d4, #240	@ 0xbf800000 -1.0
 801e324:	bf58      	it	pl
 801e326:	eeb0 4b43 	vmovpl.f64	d4, d3
 801e32a:	ee37 3b04 	vadd.f64	d3, d7, d4
 801e32e:	ee34 6b43 	vsub.f64	d6, d4, d3
 801e332:	ee36 6b07 	vadd.f64	d6, d6, d7
 801e336:	ee36 6b05 	vadd.f64	d6, d6, d5
 801e33a:	ee36 6b03 	vadd.f64	d6, d6, d3
 801e33e:	ee36 7b44 	vsub.f64	d7, d6, d4
 801e342:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801e346:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e34a:	d104      	bne.n	801e356 <pow+0x45e>
 801e34c:	4632      	mov	r2, r6
 801e34e:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 801e352:	ec43 2b17 	vmov	d7, r2, r3
 801e356:	ed8d 0b02 	vstr	d0, [sp, #8]
 801e35a:	ed9d 6b02 	vldr	d6, [sp, #8]
 801e35e:	ee26 6b00 	vmul.f64	d6, d6, d0
 801e362:	ed8d 6b04 	vstr	d6, [sp, #16]
 801e366:	ee27 0b00 	vmul.f64	d0, d7, d0
 801e36a:	b007      	add	sp, #28
 801e36c:	ecbd 8b0a 	vpop	{d8-d12}
 801e370:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e374:	f000 ba33 	b.w	801e7de <__math_check_uflow>
 801e378:	ec43 2b10 	vmov	d0, r2, r3
 801e37c:	eea7 0b00 	vfma.f64	d0, d7, d0
 801e380:	e625      	b.n	801dfce <pow+0xd6>
 801e382:	ed9f 0b03 	vldr	d0, [pc, #12]	@ 801e390 <pow+0x498>
 801e386:	e622      	b.n	801dfce <pow+0xd6>
 801e388:	00000000 	.word	0x00000000
 801e38c:	00100000 	.word	0x00100000
	...

0801e398 <__ieee754_sqrt>:
 801e398:	eeb1 0bc0 	vsqrt.f64	d0, d0
 801e39c:	4770      	bx	lr
	...

0801e3a0 <__ieee754_atan2>:
 801e3a0:	ee11 1a10 	vmov	r1, s2
 801e3a4:	eeb0 7b40 	vmov.f64	d7, d0
 801e3a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e3aa:	ee11 5a90 	vmov	r5, s3
 801e3ae:	424b      	negs	r3, r1
 801e3b0:	4f59      	ldr	r7, [pc, #356]	@ (801e518 <__ieee754_atan2+0x178>)
 801e3b2:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 801e3b6:	430b      	orrs	r3, r1
 801e3b8:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 801e3bc:	42bb      	cmp	r3, r7
 801e3be:	d80d      	bhi.n	801e3dc <__ieee754_atan2+0x3c>
 801e3c0:	ee10 ca10 	vmov	ip, s0
 801e3c4:	ee17 6a90 	vmov	r6, s15
 801e3c8:	f1cc 0000 	rsb	r0, ip, #0
 801e3cc:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 801e3d0:	ea40 000c 	orr.w	r0, r0, ip
 801e3d4:	ea43 70d0 	orr.w	r0, r3, r0, lsr #31
 801e3d8:	42b8      	cmp	r0, r7
 801e3da:	d904      	bls.n	801e3e6 <__ieee754_atan2+0x46>
 801e3dc:	ee37 7b01 	vadd.f64	d7, d7, d1
 801e3e0:	eeb0 0b47 	vmov.f64	d0, d7
 801e3e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e3e6:	f105 4040 	add.w	r0, r5, #3221225472	@ 0xc0000000
 801e3ea:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 801e3ee:	4308      	orrs	r0, r1
 801e3f0:	d103      	bne.n	801e3fa <__ieee754_atan2+0x5a>
 801e3f2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801e3f6:	f000 b897 	b.w	801e528 <atan>
 801e3fa:	17ac      	asrs	r4, r5, #30
 801e3fc:	f004 0402 	and.w	r4, r4, #2
 801e400:	ea53 0c0c 	orrs.w	ip, r3, ip
 801e404:	ea44 74d6 	orr.w	r4, r4, r6, lsr #31
 801e408:	d107      	bne.n	801e41a <__ieee754_atan2+0x7a>
 801e40a:	2c02      	cmp	r4, #2
 801e40c:	d05c      	beq.n	801e4c8 <__ieee754_atan2+0x128>
 801e40e:	ed9f 6b34 	vldr	d6, [pc, #208]	@ 801e4e0 <__ieee754_atan2+0x140>
 801e412:	2c03      	cmp	r4, #3
 801e414:	fe06 7b00 	vseleq.f64	d7, d6, d0
 801e418:	e7e2      	b.n	801e3e0 <__ieee754_atan2+0x40>
 801e41a:	4311      	orrs	r1, r2
 801e41c:	d107      	bne.n	801e42e <__ieee754_atan2+0x8e>
 801e41e:	ed9f 7b32 	vldr	d7, [pc, #200]	@ 801e4e8 <__ieee754_atan2+0x148>
 801e422:	ed9f 6b33 	vldr	d6, [pc, #204]	@ 801e4f0 <__ieee754_atan2+0x150>
 801e426:	2e00      	cmp	r6, #0
 801e428:	fe27 7b06 	vselge.f64	d7, d7, d6
 801e42c:	e7d8      	b.n	801e3e0 <__ieee754_atan2+0x40>
 801e42e:	42ba      	cmp	r2, r7
 801e430:	d10f      	bne.n	801e452 <__ieee754_atan2+0xb2>
 801e432:	4293      	cmp	r3, r2
 801e434:	f104 34ff 	add.w	r4, r4, #4294967295
 801e438:	d107      	bne.n	801e44a <__ieee754_atan2+0xaa>
 801e43a:	2c02      	cmp	r4, #2
 801e43c:	d847      	bhi.n	801e4ce <__ieee754_atan2+0x12e>
 801e43e:	4b37      	ldr	r3, [pc, #220]	@ (801e51c <__ieee754_atan2+0x17c>)
 801e440:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801e444:	ed93 7b00 	vldr	d7, [r3]
 801e448:	e7ca      	b.n	801e3e0 <__ieee754_atan2+0x40>
 801e44a:	2c02      	cmp	r4, #2
 801e44c:	d842      	bhi.n	801e4d4 <__ieee754_atan2+0x134>
 801e44e:	4b34      	ldr	r3, [pc, #208]	@ (801e520 <__ieee754_atan2+0x180>)
 801e450:	e7f6      	b.n	801e440 <__ieee754_atan2+0xa0>
 801e452:	42bb      	cmp	r3, r7
 801e454:	d0e3      	beq.n	801e41e <__ieee754_atan2+0x7e>
 801e456:	1a9b      	subs	r3, r3, r2
 801e458:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 801e45c:	ea4f 5223 	mov.w	r2, r3, asr #20
 801e460:	da1a      	bge.n	801e498 <__ieee754_atan2+0xf8>
 801e462:	2d00      	cmp	r5, #0
 801e464:	da01      	bge.n	801e46a <__ieee754_atan2+0xca>
 801e466:	323c      	adds	r2, #60	@ 0x3c
 801e468:	db19      	blt.n	801e49e <__ieee754_atan2+0xfe>
 801e46a:	ee87 0b01 	vdiv.f64	d0, d7, d1
 801e46e:	f000 f955 	bl	801e71c <fabs>
 801e472:	f000 f859 	bl	801e528 <atan>
 801e476:	eeb0 7b40 	vmov.f64	d7, d0
 801e47a:	2c01      	cmp	r4, #1
 801e47c:	d012      	beq.n	801e4a4 <__ieee754_atan2+0x104>
 801e47e:	2c02      	cmp	r4, #2
 801e480:	d019      	beq.n	801e4b6 <__ieee754_atan2+0x116>
 801e482:	2c00      	cmp	r4, #0
 801e484:	d0ac      	beq.n	801e3e0 <__ieee754_atan2+0x40>
 801e486:	ed9f 6b1c 	vldr	d6, [pc, #112]	@ 801e4f8 <__ieee754_atan2+0x158>
 801e48a:	ee37 7b46 	vsub.f64	d7, d7, d6
 801e48e:	ed9f 6b1c 	vldr	d6, [pc, #112]	@ 801e500 <__ieee754_atan2+0x160>
 801e492:	ee37 7b46 	vsub.f64	d7, d7, d6
 801e496:	e7a3      	b.n	801e3e0 <__ieee754_atan2+0x40>
 801e498:	ed9f 7b13 	vldr	d7, [pc, #76]	@ 801e4e8 <__ieee754_atan2+0x148>
 801e49c:	e7ed      	b.n	801e47a <__ieee754_atan2+0xda>
 801e49e:	ed9f 7b1a 	vldr	d7, [pc, #104]	@ 801e508 <__ieee754_atan2+0x168>
 801e4a2:	e7ea      	b.n	801e47a <__ieee754_atan2+0xda>
 801e4a4:	ee17 1a90 	vmov	r1, s15
 801e4a8:	ec53 2b17 	vmov	r2, r3, d7
 801e4ac:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801e4b0:	ec43 2b17 	vmov	d7, r2, r3
 801e4b4:	e794      	b.n	801e3e0 <__ieee754_atan2+0x40>
 801e4b6:	ed9f 6b10 	vldr	d6, [pc, #64]	@ 801e4f8 <__ieee754_atan2+0x158>
 801e4ba:	ee37 7b46 	vsub.f64	d7, d7, d6
 801e4be:	ed9f 6b10 	vldr	d6, [pc, #64]	@ 801e500 <__ieee754_atan2+0x160>
 801e4c2:	ee36 7b47 	vsub.f64	d7, d6, d7
 801e4c6:	e78b      	b.n	801e3e0 <__ieee754_atan2+0x40>
 801e4c8:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 801e500 <__ieee754_atan2+0x160>
 801e4cc:	e788      	b.n	801e3e0 <__ieee754_atan2+0x40>
 801e4ce:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 801e510 <__ieee754_atan2+0x170>
 801e4d2:	e785      	b.n	801e3e0 <__ieee754_atan2+0x40>
 801e4d4:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 801e508 <__ieee754_atan2+0x168>
 801e4d8:	e782      	b.n	801e3e0 <__ieee754_atan2+0x40>
 801e4da:	bf00      	nop
 801e4dc:	f3af 8000 	nop.w
 801e4e0:	54442d18 	.word	0x54442d18
 801e4e4:	c00921fb 	.word	0xc00921fb
 801e4e8:	54442d18 	.word	0x54442d18
 801e4ec:	3ff921fb 	.word	0x3ff921fb
 801e4f0:	54442d18 	.word	0x54442d18
 801e4f4:	bff921fb 	.word	0xbff921fb
 801e4f8:	33145c07 	.word	0x33145c07
 801e4fc:	3ca1a626 	.word	0x3ca1a626
 801e500:	54442d18 	.word	0x54442d18
 801e504:	400921fb 	.word	0x400921fb
	...
 801e510:	54442d18 	.word	0x54442d18
 801e514:	3fe921fb 	.word	0x3fe921fb
 801e518:	7ff00000 	.word	0x7ff00000
 801e51c:	0801fd90 	.word	0x0801fd90
 801e520:	0801fd78 	.word	0x0801fd78
 801e524:	00000000 	.word	0x00000000

0801e528 <atan>:
 801e528:	b538      	push	{r3, r4, r5, lr}
 801e52a:	eeb0 7b40 	vmov.f64	d7, d0
 801e52e:	ee17 5a90 	vmov	r5, s15
 801e532:	4b73      	ldr	r3, [pc, #460]	@ (801e700 <atan+0x1d8>)
 801e534:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 801e538:	429c      	cmp	r4, r3
 801e53a:	d913      	bls.n	801e564 <atan+0x3c>
 801e53c:	4b71      	ldr	r3, [pc, #452]	@ (801e704 <atan+0x1dc>)
 801e53e:	429c      	cmp	r4, r3
 801e540:	d803      	bhi.n	801e54a <atan+0x22>
 801e542:	d107      	bne.n	801e554 <atan+0x2c>
 801e544:	ee10 3a10 	vmov	r3, s0
 801e548:	b123      	cbz	r3, 801e554 <atan+0x2c>
 801e54a:	ee37 7b07 	vadd.f64	d7, d7, d7
 801e54e:	eeb0 0b47 	vmov.f64	d0, d7
 801e552:	bd38      	pop	{r3, r4, r5, pc}
 801e554:	ed9f 7b4e 	vldr	d7, [pc, #312]	@ 801e690 <atan+0x168>
 801e558:	ed9f 6b4f 	vldr	d6, [pc, #316]	@ 801e698 <atan+0x170>
 801e55c:	2d00      	cmp	r5, #0
 801e55e:	fe36 7b07 	vselgt.f64	d7, d6, d7
 801e562:	e7f4      	b.n	801e54e <atan+0x26>
 801e564:	4b68      	ldr	r3, [pc, #416]	@ (801e708 <atan+0x1e0>)
 801e566:	429c      	cmp	r4, r3
 801e568:	d811      	bhi.n	801e58e <atan+0x66>
 801e56a:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 801e56e:	429c      	cmp	r4, r3
 801e570:	d80a      	bhi.n	801e588 <atan+0x60>
 801e572:	eeb7 5b00 	vmov.f64	d5, #112	@ 0x3f800000  1.0
 801e576:	ed9f 6b4a 	vldr	d6, [pc, #296]	@ 801e6a0 <atan+0x178>
 801e57a:	ee30 6b06 	vadd.f64	d6, d0, d6
 801e57e:	eeb4 6bc5 	vcmpe.f64	d6, d5
 801e582:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e586:	dce2      	bgt.n	801e54e <atan+0x26>
 801e588:	f04f 33ff 	mov.w	r3, #4294967295
 801e58c:	e013      	b.n	801e5b6 <atan+0x8e>
 801e58e:	f000 f8c5 	bl	801e71c <fabs>
 801e592:	4b5e      	ldr	r3, [pc, #376]	@ (801e70c <atan+0x1e4>)
 801e594:	429c      	cmp	r4, r3
 801e596:	d84f      	bhi.n	801e638 <atan+0x110>
 801e598:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 801e59c:	429c      	cmp	r4, r3
 801e59e:	d841      	bhi.n	801e624 <atan+0xfc>
 801e5a0:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 801e5a4:	eebf 5b00 	vmov.f64	d5, #240	@ 0xbf800000 -1.0
 801e5a8:	2300      	movs	r3, #0
 801e5aa:	eea0 5b07 	vfma.f64	d5, d0, d7
 801e5ae:	ee30 0b07 	vadd.f64	d0, d0, d7
 801e5b2:	ee85 7b00 	vdiv.f64	d7, d5, d0
 801e5b6:	ed9f 6b3c 	vldr	d6, [pc, #240]	@ 801e6a8 <atan+0x180>
 801e5ba:	ee27 4b07 	vmul.f64	d4, d7, d7
 801e5be:	ee24 5b04 	vmul.f64	d5, d4, d4
 801e5c2:	ed9f 3b3b 	vldr	d3, [pc, #236]	@ 801e6b0 <atan+0x188>
 801e5c6:	eea5 3b06 	vfma.f64	d3, d5, d6
 801e5ca:	ed9f 6b3b 	vldr	d6, [pc, #236]	@ 801e6b8 <atan+0x190>
 801e5ce:	eea3 6b05 	vfma.f64	d6, d3, d5
 801e5d2:	ed9f 3b3b 	vldr	d3, [pc, #236]	@ 801e6c0 <atan+0x198>
 801e5d6:	eea6 3b05 	vfma.f64	d3, d6, d5
 801e5da:	ed9f 6b3b 	vldr	d6, [pc, #236]	@ 801e6c8 <atan+0x1a0>
 801e5de:	eea3 6b05 	vfma.f64	d6, d3, d5
 801e5e2:	ed9f 3b3b 	vldr	d3, [pc, #236]	@ 801e6d0 <atan+0x1a8>
 801e5e6:	ed9f 2b3c 	vldr	d2, [pc, #240]	@ 801e6d8 <atan+0x1b0>
 801e5ea:	eea6 3b05 	vfma.f64	d3, d6, d5
 801e5ee:	ed9f 6b3c 	vldr	d6, [pc, #240]	@ 801e6e0 <atan+0x1b8>
 801e5f2:	eea5 2b06 	vfma.f64	d2, d5, d6
 801e5f6:	ed9f 6b3c 	vldr	d6, [pc, #240]	@ 801e6e8 <atan+0x1c0>
 801e5fa:	eea2 6b05 	vfma.f64	d6, d2, d5
 801e5fe:	ed9f 2b3c 	vldr	d2, [pc, #240]	@ 801e6f0 <atan+0x1c8>
 801e602:	eea6 2b05 	vfma.f64	d2, d6, d5
 801e606:	ed9f 6b3c 	vldr	d6, [pc, #240]	@ 801e6f8 <atan+0x1d0>
 801e60a:	1c5a      	adds	r2, r3, #1
 801e60c:	eea2 6b05 	vfma.f64	d6, d2, d5
 801e610:	ee26 6b05 	vmul.f64	d6, d6, d5
 801e614:	eea3 6b04 	vfma.f64	d6, d3, d4
 801e618:	ee27 6b06 	vmul.f64	d6, d7, d6
 801e61c:	d121      	bne.n	801e662 <atan+0x13a>
 801e61e:	ee37 7b46 	vsub.f64	d7, d7, d6
 801e622:	e794      	b.n	801e54e <atan+0x26>
 801e624:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
 801e628:	2301      	movs	r3, #1
 801e62a:	ee30 5b47 	vsub.f64	d5, d0, d7
 801e62e:	ee30 0b07 	vadd.f64	d0, d0, d7
 801e632:	ee85 7b00 	vdiv.f64	d7, d5, d0
 801e636:	e7be      	b.n	801e5b6 <atan+0x8e>
 801e638:	4b35      	ldr	r3, [pc, #212]	@ (801e710 <atan+0x1e8>)
 801e63a:	429c      	cmp	r4, r3
 801e63c:	d20b      	bcs.n	801e656 <atan+0x12e>
 801e63e:	eeb7 7b08 	vmov.f64	d7, #120	@ 0x3fc00000  1.5
 801e642:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 801e646:	ee30 5b47 	vsub.f64	d5, d0, d7
 801e64a:	eea0 6b07 	vfma.f64	d6, d0, d7
 801e64e:	2302      	movs	r3, #2
 801e650:	ee85 7b06 	vdiv.f64	d7, d5, d6
 801e654:	e7af      	b.n	801e5b6 <atan+0x8e>
 801e656:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 801e65a:	2303      	movs	r3, #3
 801e65c:	ee86 7b00 	vdiv.f64	d7, d6, d0
 801e660:	e7a9      	b.n	801e5b6 <atan+0x8e>
 801e662:	4a2c      	ldr	r2, [pc, #176]	@ (801e714 <atan+0x1ec>)
 801e664:	492c      	ldr	r1, [pc, #176]	@ (801e718 <atan+0x1f0>)
 801e666:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 801e66a:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 801e66e:	ed93 5b00 	vldr	d5, [r3]
 801e672:	ee36 6b45 	vsub.f64	d6, d6, d5
 801e676:	ee36 6b47 	vsub.f64	d6, d6, d7
 801e67a:	ed92 7b00 	vldr	d7, [r2]
 801e67e:	2d00      	cmp	r5, #0
 801e680:	ee37 7b46 	vsub.f64	d7, d7, d6
 801e684:	bfb8      	it	lt
 801e686:	eeb1 7b47 	vneglt.f64	d7, d7
 801e68a:	e760      	b.n	801e54e <atan+0x26>
 801e68c:	f3af 8000 	nop.w
 801e690:	54442d18 	.word	0x54442d18
 801e694:	bff921fb 	.word	0xbff921fb
 801e698:	54442d18 	.word	0x54442d18
 801e69c:	3ff921fb 	.word	0x3ff921fb
 801e6a0:	8800759c 	.word	0x8800759c
 801e6a4:	7e37e43c 	.word	0x7e37e43c
 801e6a8:	e322da11 	.word	0xe322da11
 801e6ac:	3f90ad3a 	.word	0x3f90ad3a
 801e6b0:	24760deb 	.word	0x24760deb
 801e6b4:	3fa97b4b 	.word	0x3fa97b4b
 801e6b8:	a0d03d51 	.word	0xa0d03d51
 801e6bc:	3fb10d66 	.word	0x3fb10d66
 801e6c0:	c54c206e 	.word	0xc54c206e
 801e6c4:	3fb745cd 	.word	0x3fb745cd
 801e6c8:	920083ff 	.word	0x920083ff
 801e6cc:	3fc24924 	.word	0x3fc24924
 801e6d0:	5555550d 	.word	0x5555550d
 801e6d4:	3fd55555 	.word	0x3fd55555
 801e6d8:	52defd9a 	.word	0x52defd9a
 801e6dc:	bfadde2d 	.word	0xbfadde2d
 801e6e0:	2c6a6c2f 	.word	0x2c6a6c2f
 801e6e4:	bfa2b444 	.word	0xbfa2b444
 801e6e8:	af749a6d 	.word	0xaf749a6d
 801e6ec:	bfb3b0f2 	.word	0xbfb3b0f2
 801e6f0:	fe231671 	.word	0xfe231671
 801e6f4:	bfbc71c6 	.word	0xbfbc71c6
 801e6f8:	9998ebc4 	.word	0x9998ebc4
 801e6fc:	bfc99999 	.word	0xbfc99999
 801e700:	440fffff 	.word	0x440fffff
 801e704:	7ff00000 	.word	0x7ff00000
 801e708:	3fdbffff 	.word	0x3fdbffff
 801e70c:	3ff2ffff 	.word	0x3ff2ffff
 801e710:	40038000 	.word	0x40038000
 801e714:	0801fdc8 	.word	0x0801fdc8
 801e718:	0801fda8 	.word	0x0801fda8

0801e71c <fabs>:
 801e71c:	ec51 0b10 	vmov	r0, r1, d0
 801e720:	4602      	mov	r2, r0
 801e722:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801e726:	ec43 2b10 	vmov	d0, r2, r3
 801e72a:	4770      	bx	lr

0801e72c <with_errno>:
 801e72c:	b510      	push	{r4, lr}
 801e72e:	ed2d 8b02 	vpush	{d8}
 801e732:	eeb0 8b40 	vmov.f64	d8, d0
 801e736:	4604      	mov	r4, r0
 801e738:	f7ff fb5c 	bl	801ddf4 <__errno>
 801e73c:	eeb0 0b48 	vmov.f64	d0, d8
 801e740:	ecbd 8b02 	vpop	{d8}
 801e744:	6004      	str	r4, [r0, #0]
 801e746:	bd10      	pop	{r4, pc}

0801e748 <xflow>:
 801e748:	b082      	sub	sp, #8
 801e74a:	b158      	cbz	r0, 801e764 <xflow+0x1c>
 801e74c:	eeb1 7b40 	vneg.f64	d7, d0
 801e750:	ed8d 7b00 	vstr	d7, [sp]
 801e754:	ed9d 7b00 	vldr	d7, [sp]
 801e758:	2022      	movs	r0, #34	@ 0x22
 801e75a:	ee20 0b07 	vmul.f64	d0, d0, d7
 801e75e:	b002      	add	sp, #8
 801e760:	f7ff bfe4 	b.w	801e72c <with_errno>
 801e764:	eeb0 7b40 	vmov.f64	d7, d0
 801e768:	e7f2      	b.n	801e750 <xflow+0x8>
 801e76a:	0000      	movs	r0, r0
 801e76c:	0000      	movs	r0, r0
	...

0801e770 <__math_uflow>:
 801e770:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 801e778 <__math_uflow+0x8>
 801e774:	f7ff bfe8 	b.w	801e748 <xflow>
 801e778:	00000000 	.word	0x00000000
 801e77c:	10000000 	.word	0x10000000

0801e780 <__math_oflow>:
 801e780:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 801e788 <__math_oflow+0x8>
 801e784:	f7ff bfe0 	b.w	801e748 <xflow>
 801e788:	00000000 	.word	0x00000000
 801e78c:	70000000 	.word	0x70000000

0801e790 <__math_divzero>:
 801e790:	b082      	sub	sp, #8
 801e792:	2800      	cmp	r0, #0
 801e794:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 801e798:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
 801e79c:	fe07 7b06 	vseleq.f64	d7, d7, d6
 801e7a0:	ed8d 7b00 	vstr	d7, [sp]
 801e7a4:	ed9d 0b00 	vldr	d0, [sp]
 801e7a8:	ed9f 7b03 	vldr	d7, [pc, #12]	@ 801e7b8 <__math_divzero+0x28>
 801e7ac:	2022      	movs	r0, #34	@ 0x22
 801e7ae:	ee80 0b07 	vdiv.f64	d0, d0, d7
 801e7b2:	b002      	add	sp, #8
 801e7b4:	f7ff bfba 	b.w	801e72c <with_errno>
	...

0801e7c0 <__math_invalid>:
 801e7c0:	eeb0 7b40 	vmov.f64	d7, d0
 801e7c4:	eeb4 7b47 	vcmp.f64	d7, d7
 801e7c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e7cc:	ee30 6b40 	vsub.f64	d6, d0, d0
 801e7d0:	ee86 0b06 	vdiv.f64	d0, d6, d6
 801e7d4:	d602      	bvs.n	801e7dc <__math_invalid+0x1c>
 801e7d6:	2021      	movs	r0, #33	@ 0x21
 801e7d8:	f7ff bfa8 	b.w	801e72c <with_errno>
 801e7dc:	4770      	bx	lr

0801e7de <__math_check_uflow>:
 801e7de:	eeb5 0b40 	vcmp.f64	d0, #0.0
 801e7e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e7e6:	d102      	bne.n	801e7ee <__math_check_uflow+0x10>
 801e7e8:	2022      	movs	r0, #34	@ 0x22
 801e7ea:	f7ff bf9f 	b.w	801e72c <with_errno>
 801e7ee:	4770      	bx	lr

0801e7f0 <__math_check_oflow>:
 801e7f0:	ed9f 6b07 	vldr	d6, [pc, #28]	@ 801e810 <__math_check_oflow+0x20>
 801e7f4:	eeb0 7bc0 	vabs.f64	d7, d0
 801e7f8:	eeb4 7b46 	vcmp.f64	d7, d6
 801e7fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e800:	dd02      	ble.n	801e808 <__math_check_oflow+0x18>
 801e802:	2022      	movs	r0, #34	@ 0x22
 801e804:	f7ff bf92 	b.w	801e72c <with_errno>
 801e808:	4770      	bx	lr
 801e80a:	bf00      	nop
 801e80c:	f3af 8000 	nop.w
 801e810:	ffffffff 	.word	0xffffffff
 801e814:	7fefffff 	.word	0x7fefffff

0801e818 <_init>:
 801e818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e81a:	bf00      	nop
 801e81c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801e81e:	bc08      	pop	{r3}
 801e820:	469e      	mov	lr, r3
 801e822:	4770      	bx	lr

0801e824 <_fini>:
 801e824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e826:	bf00      	nop
 801e828:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801e82a:	bc08      	pop	{r3}
 801e82c:	469e      	mov	lr, r3
 801e82e:	4770      	bx	lr
