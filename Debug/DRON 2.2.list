
DRON 2.2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00006000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001e580  080002d0  080002d0  000062d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001e28  0801e850  0801e850  00024850  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08020678  08020678  00026678  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08020680  08020680  00026680  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08020684  08020684  00026684  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000078  24000000  08020688  00027000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000834  24000078  08020700  00027078  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240008ac  08020700  000278ac  2**0
                  ALLOC
  9 .IRAM         000041c6  00000000  00000000  00001000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 10 .DRAM         00000000  20000000  20000000  00049730  2**0
                  CONTENTS
 11 .RAM1         00021880  24000eb0  24000eb0  00027eb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .ARM.attributes 0000002e  00000000  00000000  00049730  2**0
                  CONTENTS, READONLY
 13 .debug_info   00032105  00000000  00000000  0004975e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005ef4  00000000  00000000  0007b863  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002458  00000000  00000000  00081758  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001c27  00000000  00000000  00083bb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0003c716  00000000  00000000  000857d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003868e  00000000  00000000  000c1eed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0016ccfe  00000000  00000000  000fa57b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00267279  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00009f78  00000000  00000000  002672bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004d  00000000  00000000  00271234  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000078 	.word	0x24000078
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0801e838 	.word	0x0801e838

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	2400007c 	.word	0x2400007c
 800030c:	0801e838 	.word	0x0801e838

08000310 <__aeabi_ldivmod>:
 8000310:	b97b      	cbnz	r3, 8000332 <__aeabi_ldivmod+0x22>
 8000312:	b972      	cbnz	r2, 8000332 <__aeabi_ldivmod+0x22>
 8000314:	2900      	cmp	r1, #0
 8000316:	bfbe      	ittt	lt
 8000318:	2000      	movlt	r0, #0
 800031a:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 800031e:	e006      	blt.n	800032e <__aeabi_ldivmod+0x1e>
 8000320:	bf08      	it	eq
 8000322:	2800      	cmpeq	r0, #0
 8000324:	bf1c      	itt	ne
 8000326:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 800032a:	f04f 30ff 	movne.w	r0, #4294967295
 800032e:	f000 b9b5 	b.w	800069c <__aeabi_idiv0>
 8000332:	f1ad 0c08 	sub.w	ip, sp, #8
 8000336:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800033a:	2900      	cmp	r1, #0
 800033c:	db09      	blt.n	8000352 <__aeabi_ldivmod+0x42>
 800033e:	2b00      	cmp	r3, #0
 8000340:	db1a      	blt.n	8000378 <__aeabi_ldivmod+0x68>
 8000342:	f000 f84d 	bl	80003e0 <__udivmoddi4>
 8000346:	f8dd e004 	ldr.w	lr, [sp, #4]
 800034a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034e:	b004      	add	sp, #16
 8000350:	4770      	bx	lr
 8000352:	4240      	negs	r0, r0
 8000354:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000358:	2b00      	cmp	r3, #0
 800035a:	db1b      	blt.n	8000394 <__aeabi_ldivmod+0x84>
 800035c:	f000 f840 	bl	80003e0 <__udivmoddi4>
 8000360:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000364:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000368:	b004      	add	sp, #16
 800036a:	4240      	negs	r0, r0
 800036c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000370:	4252      	negs	r2, r2
 8000372:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000376:	4770      	bx	lr
 8000378:	4252      	negs	r2, r2
 800037a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800037e:	f000 f82f 	bl	80003e0 <__udivmoddi4>
 8000382:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000386:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800038a:	b004      	add	sp, #16
 800038c:	4240      	negs	r0, r0
 800038e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000392:	4770      	bx	lr
 8000394:	4252      	negs	r2, r2
 8000396:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800039a:	f000 f821 	bl	80003e0 <__udivmoddi4>
 800039e:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003a6:	b004      	add	sp, #16
 80003a8:	4252      	negs	r2, r2
 80003aa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003ae:	4770      	bx	lr

080003b0 <__aeabi_uldivmod>:
 80003b0:	b953      	cbnz	r3, 80003c8 <__aeabi_uldivmod+0x18>
 80003b2:	b94a      	cbnz	r2, 80003c8 <__aeabi_uldivmod+0x18>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bf08      	it	eq
 80003b8:	2800      	cmpeq	r0, #0
 80003ba:	bf1c      	itt	ne
 80003bc:	f04f 31ff 	movne.w	r1, #4294967295
 80003c0:	f04f 30ff 	movne.w	r0, #4294967295
 80003c4:	f000 b96a 	b.w	800069c <__aeabi_idiv0>
 80003c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003d0:	f000 f806 	bl	80003e0 <__udivmoddi4>
 80003d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003dc:	b004      	add	sp, #16
 80003de:	4770      	bx	lr

080003e0 <__udivmoddi4>:
 80003e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003e4:	9d08      	ldr	r5, [sp, #32]
 80003e6:	460c      	mov	r4, r1
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d14e      	bne.n	800048a <__udivmoddi4+0xaa>
 80003ec:	4694      	mov	ip, r2
 80003ee:	458c      	cmp	ip, r1
 80003f0:	4686      	mov	lr, r0
 80003f2:	fab2 f282 	clz	r2, r2
 80003f6:	d962      	bls.n	80004be <__udivmoddi4+0xde>
 80003f8:	b14a      	cbz	r2, 800040e <__udivmoddi4+0x2e>
 80003fa:	f1c2 0320 	rsb	r3, r2, #32
 80003fe:	4091      	lsls	r1, r2
 8000400:	fa20 f303 	lsr.w	r3, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	4319      	orrs	r1, r3
 800040a:	fa00 fe02 	lsl.w	lr, r0, r2
 800040e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000412:	fa1f f68c 	uxth.w	r6, ip
 8000416:	fbb1 f4f7 	udiv	r4, r1, r7
 800041a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041e:	fb07 1114 	mls	r1, r7, r4, r1
 8000422:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000426:	fb04 f106 	mul.w	r1, r4, r6
 800042a:	4299      	cmp	r1, r3
 800042c:	d90a      	bls.n	8000444 <__udivmoddi4+0x64>
 800042e:	eb1c 0303 	adds.w	r3, ip, r3
 8000432:	f104 30ff 	add.w	r0, r4, #4294967295
 8000436:	f080 8112 	bcs.w	800065e <__udivmoddi4+0x27e>
 800043a:	4299      	cmp	r1, r3
 800043c:	f240 810f 	bls.w	800065e <__udivmoddi4+0x27e>
 8000440:	3c02      	subs	r4, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a59      	subs	r1, r3, r1
 8000446:	fa1f f38e 	uxth.w	r3, lr
 800044a:	fbb1 f0f7 	udiv	r0, r1, r7
 800044e:	fb07 1110 	mls	r1, r7, r0, r1
 8000452:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000456:	fb00 f606 	mul.w	r6, r0, r6
 800045a:	429e      	cmp	r6, r3
 800045c:	d90a      	bls.n	8000474 <__udivmoddi4+0x94>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 31ff 	add.w	r1, r0, #4294967295
 8000466:	f080 80fc 	bcs.w	8000662 <__udivmoddi4+0x282>
 800046a:	429e      	cmp	r6, r3
 800046c:	f240 80f9 	bls.w	8000662 <__udivmoddi4+0x282>
 8000470:	4463      	add	r3, ip
 8000472:	3802      	subs	r0, #2
 8000474:	1b9b      	subs	r3, r3, r6
 8000476:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800047a:	2100      	movs	r1, #0
 800047c:	b11d      	cbz	r5, 8000486 <__udivmoddi4+0xa6>
 800047e:	40d3      	lsrs	r3, r2
 8000480:	2200      	movs	r2, #0
 8000482:	e9c5 3200 	strd	r3, r2, [r5]
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	428b      	cmp	r3, r1
 800048c:	d905      	bls.n	800049a <__udivmoddi4+0xba>
 800048e:	b10d      	cbz	r5, 8000494 <__udivmoddi4+0xb4>
 8000490:	e9c5 0100 	strd	r0, r1, [r5]
 8000494:	2100      	movs	r1, #0
 8000496:	4608      	mov	r0, r1
 8000498:	e7f5      	b.n	8000486 <__udivmoddi4+0xa6>
 800049a:	fab3 f183 	clz	r1, r3
 800049e:	2900      	cmp	r1, #0
 80004a0:	d146      	bne.n	8000530 <__udivmoddi4+0x150>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d302      	bcc.n	80004ac <__udivmoddi4+0xcc>
 80004a6:	4290      	cmp	r0, r2
 80004a8:	f0c0 80f0 	bcc.w	800068c <__udivmoddi4+0x2ac>
 80004ac:	1a86      	subs	r6, r0, r2
 80004ae:	eb64 0303 	sbc.w	r3, r4, r3
 80004b2:	2001      	movs	r0, #1
 80004b4:	2d00      	cmp	r5, #0
 80004b6:	d0e6      	beq.n	8000486 <__udivmoddi4+0xa6>
 80004b8:	e9c5 6300 	strd	r6, r3, [r5]
 80004bc:	e7e3      	b.n	8000486 <__udivmoddi4+0xa6>
 80004be:	2a00      	cmp	r2, #0
 80004c0:	f040 8090 	bne.w	80005e4 <__udivmoddi4+0x204>
 80004c4:	eba1 040c 	sub.w	r4, r1, ip
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa1f f78c 	uxth.w	r7, ip
 80004d0:	2101      	movs	r1, #1
 80004d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004da:	fb08 4416 	mls	r4, r8, r6, r4
 80004de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004e2:	fb07 f006 	mul.w	r0, r7, r6
 80004e6:	4298      	cmp	r0, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x11c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80004f2:	d202      	bcs.n	80004fa <__udivmoddi4+0x11a>
 80004f4:	4298      	cmp	r0, r3
 80004f6:	f200 80cd 	bhi.w	8000694 <__udivmoddi4+0x2b4>
 80004fa:	4626      	mov	r6, r4
 80004fc:	1a1c      	subs	r4, r3, r0
 80004fe:	fa1f f38e 	uxth.w	r3, lr
 8000502:	fbb4 f0f8 	udiv	r0, r4, r8
 8000506:	fb08 4410 	mls	r4, r8, r0, r4
 800050a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800050e:	fb00 f707 	mul.w	r7, r0, r7
 8000512:	429f      	cmp	r7, r3
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x148>
 8000516:	eb1c 0303 	adds.w	r3, ip, r3
 800051a:	f100 34ff 	add.w	r4, r0, #4294967295
 800051e:	d202      	bcs.n	8000526 <__udivmoddi4+0x146>
 8000520:	429f      	cmp	r7, r3
 8000522:	f200 80b0 	bhi.w	8000686 <__udivmoddi4+0x2a6>
 8000526:	4620      	mov	r0, r4
 8000528:	1bdb      	subs	r3, r3, r7
 800052a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800052e:	e7a5      	b.n	800047c <__udivmoddi4+0x9c>
 8000530:	f1c1 0620 	rsb	r6, r1, #32
 8000534:	408b      	lsls	r3, r1
 8000536:	fa22 f706 	lsr.w	r7, r2, r6
 800053a:	431f      	orrs	r7, r3
 800053c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000540:	fa04 f301 	lsl.w	r3, r4, r1
 8000544:	ea43 030c 	orr.w	r3, r3, ip
 8000548:	40f4      	lsrs	r4, r6
 800054a:	fa00 f801 	lsl.w	r8, r0, r1
 800054e:	0c38      	lsrs	r0, r7, #16
 8000550:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000554:	fbb4 fef0 	udiv	lr, r4, r0
 8000558:	fa1f fc87 	uxth.w	ip, r7
 800055c:	fb00 441e 	mls	r4, r0, lr, r4
 8000560:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000564:	fb0e f90c 	mul.w	r9, lr, ip
 8000568:	45a1      	cmp	r9, r4
 800056a:	fa02 f201 	lsl.w	r2, r2, r1
 800056e:	d90a      	bls.n	8000586 <__udivmoddi4+0x1a6>
 8000570:	193c      	adds	r4, r7, r4
 8000572:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000576:	f080 8084 	bcs.w	8000682 <__udivmoddi4+0x2a2>
 800057a:	45a1      	cmp	r9, r4
 800057c:	f240 8081 	bls.w	8000682 <__udivmoddi4+0x2a2>
 8000580:	f1ae 0e02 	sub.w	lr, lr, #2
 8000584:	443c      	add	r4, r7
 8000586:	eba4 0409 	sub.w	r4, r4, r9
 800058a:	fa1f f983 	uxth.w	r9, r3
 800058e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000592:	fb00 4413 	mls	r4, r0, r3, r4
 8000596:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800059a:	fb03 fc0c 	mul.w	ip, r3, ip
 800059e:	45a4      	cmp	ip, r4
 80005a0:	d907      	bls.n	80005b2 <__udivmoddi4+0x1d2>
 80005a2:	193c      	adds	r4, r7, r4
 80005a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80005a8:	d267      	bcs.n	800067a <__udivmoddi4+0x29a>
 80005aa:	45a4      	cmp	ip, r4
 80005ac:	d965      	bls.n	800067a <__udivmoddi4+0x29a>
 80005ae:	3b02      	subs	r3, #2
 80005b0:	443c      	add	r4, r7
 80005b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80005b6:	fba0 9302 	umull	r9, r3, r0, r2
 80005ba:	eba4 040c 	sub.w	r4, r4, ip
 80005be:	429c      	cmp	r4, r3
 80005c0:	46ce      	mov	lr, r9
 80005c2:	469c      	mov	ip, r3
 80005c4:	d351      	bcc.n	800066a <__udivmoddi4+0x28a>
 80005c6:	d04e      	beq.n	8000666 <__udivmoddi4+0x286>
 80005c8:	b155      	cbz	r5, 80005e0 <__udivmoddi4+0x200>
 80005ca:	ebb8 030e 	subs.w	r3, r8, lr
 80005ce:	eb64 040c 	sbc.w	r4, r4, ip
 80005d2:	fa04 f606 	lsl.w	r6, r4, r6
 80005d6:	40cb      	lsrs	r3, r1
 80005d8:	431e      	orrs	r6, r3
 80005da:	40cc      	lsrs	r4, r1
 80005dc:	e9c5 6400 	strd	r6, r4, [r5]
 80005e0:	2100      	movs	r1, #0
 80005e2:	e750      	b.n	8000486 <__udivmoddi4+0xa6>
 80005e4:	f1c2 0320 	rsb	r3, r2, #32
 80005e8:	fa20 f103 	lsr.w	r1, r0, r3
 80005ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80005f0:	fa24 f303 	lsr.w	r3, r4, r3
 80005f4:	4094      	lsls	r4, r2
 80005f6:	430c      	orrs	r4, r1
 80005f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000600:	fa1f f78c 	uxth.w	r7, ip
 8000604:	fbb3 f0f8 	udiv	r0, r3, r8
 8000608:	fb08 3110 	mls	r1, r8, r0, r3
 800060c:	0c23      	lsrs	r3, r4, #16
 800060e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000612:	fb00 f107 	mul.w	r1, r0, r7
 8000616:	4299      	cmp	r1, r3
 8000618:	d908      	bls.n	800062c <__udivmoddi4+0x24c>
 800061a:	eb1c 0303 	adds.w	r3, ip, r3
 800061e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000622:	d22c      	bcs.n	800067e <__udivmoddi4+0x29e>
 8000624:	4299      	cmp	r1, r3
 8000626:	d92a      	bls.n	800067e <__udivmoddi4+0x29e>
 8000628:	3802      	subs	r0, #2
 800062a:	4463      	add	r3, ip
 800062c:	1a5b      	subs	r3, r3, r1
 800062e:	b2a4      	uxth	r4, r4
 8000630:	fbb3 f1f8 	udiv	r1, r3, r8
 8000634:	fb08 3311 	mls	r3, r8, r1, r3
 8000638:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800063c:	fb01 f307 	mul.w	r3, r1, r7
 8000640:	42a3      	cmp	r3, r4
 8000642:	d908      	bls.n	8000656 <__udivmoddi4+0x276>
 8000644:	eb1c 0404 	adds.w	r4, ip, r4
 8000648:	f101 36ff 	add.w	r6, r1, #4294967295
 800064c:	d213      	bcs.n	8000676 <__udivmoddi4+0x296>
 800064e:	42a3      	cmp	r3, r4
 8000650:	d911      	bls.n	8000676 <__udivmoddi4+0x296>
 8000652:	3902      	subs	r1, #2
 8000654:	4464      	add	r4, ip
 8000656:	1ae4      	subs	r4, r4, r3
 8000658:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800065c:	e739      	b.n	80004d2 <__udivmoddi4+0xf2>
 800065e:	4604      	mov	r4, r0
 8000660:	e6f0      	b.n	8000444 <__udivmoddi4+0x64>
 8000662:	4608      	mov	r0, r1
 8000664:	e706      	b.n	8000474 <__udivmoddi4+0x94>
 8000666:	45c8      	cmp	r8, r9
 8000668:	d2ae      	bcs.n	80005c8 <__udivmoddi4+0x1e8>
 800066a:	ebb9 0e02 	subs.w	lr, r9, r2
 800066e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000672:	3801      	subs	r0, #1
 8000674:	e7a8      	b.n	80005c8 <__udivmoddi4+0x1e8>
 8000676:	4631      	mov	r1, r6
 8000678:	e7ed      	b.n	8000656 <__udivmoddi4+0x276>
 800067a:	4603      	mov	r3, r0
 800067c:	e799      	b.n	80005b2 <__udivmoddi4+0x1d2>
 800067e:	4630      	mov	r0, r6
 8000680:	e7d4      	b.n	800062c <__udivmoddi4+0x24c>
 8000682:	46d6      	mov	lr, sl
 8000684:	e77f      	b.n	8000586 <__udivmoddi4+0x1a6>
 8000686:	4463      	add	r3, ip
 8000688:	3802      	subs	r0, #2
 800068a:	e74d      	b.n	8000528 <__udivmoddi4+0x148>
 800068c:	4606      	mov	r6, r0
 800068e:	4623      	mov	r3, r4
 8000690:	4608      	mov	r0, r1
 8000692:	e70f      	b.n	80004b4 <__udivmoddi4+0xd4>
 8000694:	3e02      	subs	r6, #2
 8000696:	4463      	add	r3, ip
 8000698:	e730      	b.n	80004fc <__udivmoddi4+0x11c>
 800069a:	bf00      	nop

0800069c <__aeabi_idiv0>:
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop

080006a0 <BMP180_read_ID>:

static I2C_HandleTypeDef *hi2c_BMP180;
extern uint8_t BMP180_Press_IT[3], BMP180_Temp_IT[2];
extern uint8_t BMP180_IRQ;

uint8_t BMP180_read_ID(void){// comunication = 0x55
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b086      	sub	sp, #24
 80006a4:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_BMP180, BMP180_ADDRES, id_register, 1, &data, 1, 100);
 80006a6:	4b09      	ldr	r3, [pc, #36]	@ (80006cc <BMP180_read_ID+0x2c>)
 80006a8:	6818      	ldr	r0, [r3, #0]
 80006aa:	2364      	movs	r3, #100	@ 0x64
 80006ac:	9302      	str	r3, [sp, #8]
 80006ae:	2301      	movs	r3, #1
 80006b0:	9301      	str	r3, [sp, #4]
 80006b2:	1dfb      	adds	r3, r7, #7
 80006b4:	9300      	str	r3, [sp, #0]
 80006b6:	2301      	movs	r3, #1
 80006b8:	22d0      	movs	r2, #208	@ 0xd0
 80006ba:	21ee      	movs	r1, #238	@ 0xee
 80006bc:	f00e f90c 	bl	800e8d8 <HAL_I2C_Mem_Read>
	return data;
 80006c0:	79fb      	ldrb	r3, [r7, #7]
}
 80006c2:	4618      	mov	r0, r3
 80006c4:	3708      	adds	r7, #8
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	24000094 	.word	0x24000094

080006d0 <BMP180_init>:

uint8_t BMP180_init(I2C_HandleTypeDef*hi2c){
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b084      	sub	sp, #16
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
	hi2c_BMP180 = hi2c;
 80006d8:	4a0b      	ldr	r2, [pc, #44]	@ (8000708 <BMP180_init+0x38>)
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	6013      	str	r3, [r2, #0]
	BMP180_read_calliberation_data();
 80006de:	f000 f8dd 	bl	800089c <BMP180_read_calliberation_data>

	uint8_t status = 0;
 80006e2:	2300      	movs	r3, #0
 80006e4:	73fb      	strb	r3, [r7, #15]
	status = BMP180_read_ID();
 80006e6:	f7ff ffdb 	bl	80006a0 <BMP180_read_ID>
 80006ea:	4603      	mov	r3, r0
 80006ec:	73fb      	strb	r3, [r7, #15]

	if(status != 0x55){
 80006ee:	7bfb      	ldrb	r3, [r7, #15]
 80006f0:	2b55      	cmp	r3, #85	@ 0x55
 80006f2:	d002      	beq.n	80006fa <BMP180_init+0x2a>
		status = 0;
 80006f4:	2300      	movs	r3, #0
 80006f6:	73fb      	strb	r3, [r7, #15]
 80006f8:	e001      	b.n	80006fe <BMP180_init+0x2e>
	}
	else{
		status = 1;
 80006fa:	2301      	movs	r3, #1
 80006fc:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 80006fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8000700:	4618      	mov	r0, r3
 8000702:	3710      	adds	r7, #16
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}
 8000708:	24000094 	.word	0x24000094

0800070c <BMP180_READ_temp>:

uint16_t BMP180_READ_temp(void){
 800070c:	b580      	push	{r7, lr}
 800070e:	b086      	sub	sp, #24
 8000710:	af04      	add	r7, sp, #16
	uint8_t data[2];
	HAL_I2C_Mem_Read(hi2c_BMP180, BMP180_ADDRES, out_msb, 1, data, 2, 100);
 8000712:	4b0d      	ldr	r3, [pc, #52]	@ (8000748 <BMP180_READ_temp+0x3c>)
 8000714:	6818      	ldr	r0, [r3, #0]
 8000716:	2364      	movs	r3, #100	@ 0x64
 8000718:	9302      	str	r3, [sp, #8]
 800071a:	2302      	movs	r3, #2
 800071c:	9301      	str	r3, [sp, #4]
 800071e:	1d3b      	adds	r3, r7, #4
 8000720:	9300      	str	r3, [sp, #0]
 8000722:	2301      	movs	r3, #1
 8000724:	22f6      	movs	r2, #246	@ 0xf6
 8000726:	21ee      	movs	r1, #238	@ 0xee
 8000728:	f00e f8d6 	bl	800e8d8 <HAL_I2C_Mem_Read>
	UT = ((data[0]<<8) | data[1]);
 800072c:	793b      	ldrb	r3, [r7, #4]
 800072e:	021b      	lsls	r3, r3, #8
 8000730:	797a      	ldrb	r2, [r7, #5]
 8000732:	4313      	orrs	r3, r2
 8000734:	4a05      	ldr	r2, [pc, #20]	@ (800074c <BMP180_READ_temp+0x40>)
 8000736:	6013      	str	r3, [r2, #0]
	return UT;
 8000738:	4b04      	ldr	r3, [pc, #16]	@ (800074c <BMP180_READ_temp+0x40>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	b29b      	uxth	r3, r3
}
 800073e:	4618      	mov	r0, r3
 8000740:	3708      	adds	r7, #8
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	24000094 	.word	0x24000094
 800074c:	000000a8 	.word	0x000000a8

08000750 <BMP180_READ_pres>:

uint32_t BMP180_READ_pres(void){
 8000750:	b580      	push	{r7, lr}
 8000752:	b086      	sub	sp, #24
 8000754:	af04      	add	r7, sp, #16
	uint8_t data[3];
	HAL_I2C_Mem_Read(hi2c_BMP180, BMP180_ADDRES, out_msb, 1, data, 3, 1000);
 8000756:	4b0d      	ldr	r3, [pc, #52]	@ (800078c <BMP180_READ_pres+0x3c>)
 8000758:	6818      	ldr	r0, [r3, #0]
 800075a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800075e:	9302      	str	r3, [sp, #8]
 8000760:	2303      	movs	r3, #3
 8000762:	9301      	str	r3, [sp, #4]
 8000764:	1d3b      	adds	r3, r7, #4
 8000766:	9300      	str	r3, [sp, #0]
 8000768:	2301      	movs	r3, #1
 800076a:	22f6      	movs	r2, #246	@ 0xf6
 800076c:	21ee      	movs	r1, #238	@ 0xee
 800076e:	f00e f8b3 	bl	800e8d8 <HAL_I2C_Mem_Read>
	return (((data[0]<<16)|(data[1]<<8)|data[2]) >> 5);
 8000772:	793b      	ldrb	r3, [r7, #4]
 8000774:	041a      	lsls	r2, r3, #16
 8000776:	797b      	ldrb	r3, [r7, #5]
 8000778:	021b      	lsls	r3, r3, #8
 800077a:	4313      	orrs	r3, r2
 800077c:	79ba      	ldrb	r2, [r7, #6]
 800077e:	4313      	orrs	r3, r2
 8000780:	115b      	asrs	r3, r3, #5
}
 8000782:	4618      	mov	r0, r3
 8000784:	3708      	adds	r7, #8
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	24000094 	.word	0x24000094

08000790 <BMP180_GET_temp_IT>:
void BMP180_READ_pres_IT(void){
	HAL_I2C_Mem_Read_IT(hi2c_BMP180, BMP180_ADDRES, out_msb, 1, (uint8_t *)BMP180_Press_IT, 3);
	BMP180_IRQ = 2;
}

uint16_t BMP180_GET_temp_IT(void){
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0
	UT = ((BMP180_Temp_IT[0]<<8) | BMP180_Temp_IT[1]);
 8000794:	4b07      	ldr	r3, [pc, #28]	@ (80007b4 <BMP180_GET_temp_IT+0x24>)
 8000796:	781b      	ldrb	r3, [r3, #0]
 8000798:	021b      	lsls	r3, r3, #8
 800079a:	4a06      	ldr	r2, [pc, #24]	@ (80007b4 <BMP180_GET_temp_IT+0x24>)
 800079c:	7852      	ldrb	r2, [r2, #1]
 800079e:	4313      	orrs	r3, r2
 80007a0:	4a05      	ldr	r2, [pc, #20]	@ (80007b8 <BMP180_GET_temp_IT+0x28>)
 80007a2:	6013      	str	r3, [r2, #0]
	return UT;
 80007a4:	4b04      	ldr	r3, [pc, #16]	@ (80007b8 <BMP180_GET_temp_IT+0x28>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	b29b      	uxth	r3, r3
}
 80007aa:	4618      	mov	r0, r3
 80007ac:	46bd      	mov	sp, r7
 80007ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b2:	4770      	bx	lr
 80007b4:	24000ecc 	.word	0x24000ecc
 80007b8:	000000a8 	.word	0x000000a8

080007bc <BMP180_GET_pres_IT>:

uint32_t BMP180_GET_pres_IT(void){
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0
	return (((BMP180_Press_IT[0]<<16)|(BMP180_Press_IT[1]<<8)|BMP180_Press_IT[2]) >> 5);
 80007c0:	4b07      	ldr	r3, [pc, #28]	@ (80007e0 <BMP180_GET_pres_IT+0x24>)
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	041a      	lsls	r2, r3, #16
 80007c6:	4b06      	ldr	r3, [pc, #24]	@ (80007e0 <BMP180_GET_pres_IT+0x24>)
 80007c8:	785b      	ldrb	r3, [r3, #1]
 80007ca:	021b      	lsls	r3, r3, #8
 80007cc:	4313      	orrs	r3, r2
 80007ce:	4a04      	ldr	r2, [pc, #16]	@ (80007e0 <BMP180_GET_pres_IT+0x24>)
 80007d0:	7892      	ldrb	r2, [r2, #2]
 80007d2:	4313      	orrs	r3, r2
 80007d4:	115b      	asrs	r3, r3, #5
}
 80007d6:	4618      	mov	r0, r3
 80007d8:	46bd      	mov	sp, r7
 80007da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007de:	4770      	bx	lr
 80007e0:	24000ec8 	.word	0x24000ec8

080007e4 <BMP180_start_measurment_temp>:
//	BMP180_start_measurment_pres();
//	//HAL_Delay(26);
//	pressure = BMP180_READ_pres();
//}

void BMP180_start_measurment_temp(void){
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b086      	sub	sp, #24
 80007e8:	af04      	add	r7, sp, #16
	uint8_t data = 0x2E;
 80007ea:	232e      	movs	r3, #46	@ 0x2e
 80007ec:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(hi2c_BMP180, BMP180_ADDRES, ctrl_meas, 1, &data, 1, 100);
 80007ee:	4b08      	ldr	r3, [pc, #32]	@ (8000810 <BMP180_start_measurment_temp+0x2c>)
 80007f0:	6818      	ldr	r0, [r3, #0]
 80007f2:	2364      	movs	r3, #100	@ 0x64
 80007f4:	9302      	str	r3, [sp, #8]
 80007f6:	2301      	movs	r3, #1
 80007f8:	9301      	str	r3, [sp, #4]
 80007fa:	1dfb      	adds	r3, r7, #7
 80007fc:	9300      	str	r3, [sp, #0]
 80007fe:	2301      	movs	r3, #1
 8000800:	22f4      	movs	r2, #244	@ 0xf4
 8000802:	21ee      	movs	r1, #238	@ 0xee
 8000804:	f00d ff54 	bl	800e6b0 <HAL_I2C_Mem_Write>
}
 8000808:	bf00      	nop
 800080a:	3708      	adds	r7, #8
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	24000094 	.word	0x24000094

08000814 <BMP180_start_measurment_pres>:

void BMP180_start_measurment_pres(void){
 8000814:	b580      	push	{r7, lr}
 8000816:	b086      	sub	sp, #24
 8000818:	af04      	add	r7, sp, #16
	uint8_t data = 0xF4;
 800081a:	23f4      	movs	r3, #244	@ 0xf4
 800081c:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(hi2c_BMP180, BMP180_ADDRES, ctrl_meas, 1, &data, 1, 100);
 800081e:	4b08      	ldr	r3, [pc, #32]	@ (8000840 <BMP180_start_measurment_pres+0x2c>)
 8000820:	6818      	ldr	r0, [r3, #0]
 8000822:	2364      	movs	r3, #100	@ 0x64
 8000824:	9302      	str	r3, [sp, #8]
 8000826:	2301      	movs	r3, #1
 8000828:	9301      	str	r3, [sp, #4]
 800082a:	1dfb      	adds	r3, r7, #7
 800082c:	9300      	str	r3, [sp, #0]
 800082e:	2301      	movs	r3, #1
 8000830:	22f4      	movs	r2, #244	@ 0xf4
 8000832:	21ee      	movs	r1, #238	@ 0xee
 8000834:	f00d ff3c 	bl	800e6b0 <HAL_I2C_Mem_Write>
}
 8000838:	bf00      	nop
 800083a:	3708      	adds	r7, #8
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}
 8000840:	24000094 	.word	0x24000094

08000844 <BMP180_start_measurment_pres_IT>:

void BMP180_start_measurment_pres_IT(void){
 8000844:	b580      	push	{r7, lr}
 8000846:	b084      	sub	sp, #16
 8000848:	af02      	add	r7, sp, #8
	uint8_t data = 0xF4;
 800084a:	23f4      	movs	r3, #244	@ 0xf4
 800084c:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write_IT(hi2c_BMP180, BMP180_ADDRES, ctrl_meas, 1, &data, 1);
 800084e:	4b07      	ldr	r3, [pc, #28]	@ (800086c <BMP180_start_measurment_pres_IT+0x28>)
 8000850:	6818      	ldr	r0, [r3, #0]
 8000852:	2301      	movs	r3, #1
 8000854:	9301      	str	r3, [sp, #4]
 8000856:	1dfb      	adds	r3, r7, #7
 8000858:	9300      	str	r3, [sp, #0]
 800085a:	2301      	movs	r3, #1
 800085c:	22f4      	movs	r2, #244	@ 0xf4
 800085e:	21ee      	movs	r1, #238	@ 0xee
 8000860:	f00e f954 	bl	800eb0c <HAL_I2C_Mem_Write_IT>
}
 8000864:	bf00      	nop
 8000866:	3708      	adds	r7, #8
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	24000094 	.word	0x24000094

08000870 <BMP180_start_measurment_temp_IT>:

void BMP180_start_measurment_temp_IT(void){
 8000870:	b580      	push	{r7, lr}
 8000872:	b084      	sub	sp, #16
 8000874:	af02      	add	r7, sp, #8
	uint8_t data = 0x2E;
 8000876:	232e      	movs	r3, #46	@ 0x2e
 8000878:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write_IT(hi2c_BMP180, BMP180_ADDRES, ctrl_meas, 1, &data, 1);
 800087a:	4b07      	ldr	r3, [pc, #28]	@ (8000898 <BMP180_start_measurment_temp_IT+0x28>)
 800087c:	6818      	ldr	r0, [r3, #0]
 800087e:	2301      	movs	r3, #1
 8000880:	9301      	str	r3, [sp, #4]
 8000882:	1dfb      	adds	r3, r7, #7
 8000884:	9300      	str	r3, [sp, #0]
 8000886:	2301      	movs	r3, #1
 8000888:	22f4      	movs	r2, #244	@ 0xf4
 800088a:	21ee      	movs	r1, #238	@ 0xee
 800088c:	f00e f93e 	bl	800eb0c <HAL_I2C_Mem_Write_IT>
}
 8000890:	bf00      	nop
 8000892:	3708      	adds	r7, #8
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	24000094 	.word	0x24000094

0800089c <BMP180_read_calliberation_data>:

void BMP180_read_calliberation_data(void){
 800089c:	b580      	push	{r7, lr}
 800089e:	b08a      	sub	sp, #40	@ 0x28
 80008a0:	af04      	add	r7, sp, #16

	uint8_t Callib_Data[22] = {0};
 80008a2:	2300      	movs	r3, #0
 80008a4:	603b      	str	r3, [r7, #0]
 80008a6:	1d3b      	adds	r3, r7, #4
 80008a8:	2200      	movs	r2, #0
 80008aa:	601a      	str	r2, [r3, #0]
 80008ac:	605a      	str	r2, [r3, #4]
 80008ae:	609a      	str	r2, [r3, #8]
 80008b0:	60da      	str	r2, [r3, #12]
 80008b2:	821a      	strh	r2, [r3, #16]
	uint16_t Callib_Start = 0xAA;
 80008b4:	23aa      	movs	r3, #170	@ 0xaa
 80008b6:	82fb      	strh	r3, [r7, #22]
	HAL_I2C_Mem_Read(hi2c_BMP180, BMP180_ADDRES, Callib_Start, 1, Callib_Data, 22, 100);
 80008b8:	4b3b      	ldr	r3, [pc, #236]	@ (80009a8 <BMP180_read_calliberation_data+0x10c>)
 80008ba:	6818      	ldr	r0, [r3, #0]
 80008bc:	8afa      	ldrh	r2, [r7, #22]
 80008be:	2364      	movs	r3, #100	@ 0x64
 80008c0:	9302      	str	r3, [sp, #8]
 80008c2:	2316      	movs	r3, #22
 80008c4:	9301      	str	r3, [sp, #4]
 80008c6:	463b      	mov	r3, r7
 80008c8:	9300      	str	r3, [sp, #0]
 80008ca:	2301      	movs	r3, #1
 80008cc:	21ee      	movs	r1, #238	@ 0xee
 80008ce:	f00e f803 	bl	800e8d8 <HAL_I2C_Mem_Read>

	AC1 = (int16_t)((Callib_Data[0] << 8) | Callib_Data[1]);
 80008d2:	783b      	ldrb	r3, [r7, #0]
 80008d4:	021b      	lsls	r3, r3, #8
 80008d6:	b21a      	sxth	r2, r3
 80008d8:	787b      	ldrb	r3, [r7, #1]
 80008da:	b21b      	sxth	r3, r3
 80008dc:	4313      	orrs	r3, r2
 80008de:	b21a      	sxth	r2, r3
 80008e0:	4b32      	ldr	r3, [pc, #200]	@ (80009ac <BMP180_read_calliberation_data+0x110>)
 80008e2:	801a      	strh	r2, [r3, #0]
	AC2 = (int16_t)((Callib_Data[2] << 8) | Callib_Data[3]);
 80008e4:	78bb      	ldrb	r3, [r7, #2]
 80008e6:	021b      	lsls	r3, r3, #8
 80008e8:	b21a      	sxth	r2, r3
 80008ea:	78fb      	ldrb	r3, [r7, #3]
 80008ec:	b21b      	sxth	r3, r3
 80008ee:	4313      	orrs	r3, r2
 80008f0:	b21a      	sxth	r2, r3
 80008f2:	4b2f      	ldr	r3, [pc, #188]	@ (80009b0 <BMP180_read_calliberation_data+0x114>)
 80008f4:	801a      	strh	r2, [r3, #0]
	AC3 = (int16_t)((Callib_Data[4] << 8) | Callib_Data[5]);
 80008f6:	793b      	ldrb	r3, [r7, #4]
 80008f8:	021b      	lsls	r3, r3, #8
 80008fa:	b21a      	sxth	r2, r3
 80008fc:	797b      	ldrb	r3, [r7, #5]
 80008fe:	b21b      	sxth	r3, r3
 8000900:	4313      	orrs	r3, r2
 8000902:	b21a      	sxth	r2, r3
 8000904:	4b2b      	ldr	r3, [pc, #172]	@ (80009b4 <BMP180_read_calliberation_data+0x118>)
 8000906:	801a      	strh	r2, [r3, #0]
	AC4 = (int16_t)((Callib_Data[6] << 8) | Callib_Data[7]);
 8000908:	79bb      	ldrb	r3, [r7, #6]
 800090a:	021b      	lsls	r3, r3, #8
 800090c:	b21a      	sxth	r2, r3
 800090e:	79fb      	ldrb	r3, [r7, #7]
 8000910:	b21b      	sxth	r3, r3
 8000912:	4313      	orrs	r3, r2
 8000914:	b21b      	sxth	r3, r3
 8000916:	b29a      	uxth	r2, r3
 8000918:	4b27      	ldr	r3, [pc, #156]	@ (80009b8 <BMP180_read_calliberation_data+0x11c>)
 800091a:	801a      	strh	r2, [r3, #0]
	AC5 = (int16_t)((Callib_Data[8] << 8) | Callib_Data[9]);
 800091c:	7a3b      	ldrb	r3, [r7, #8]
 800091e:	021b      	lsls	r3, r3, #8
 8000920:	b21a      	sxth	r2, r3
 8000922:	7a7b      	ldrb	r3, [r7, #9]
 8000924:	b21b      	sxth	r3, r3
 8000926:	4313      	orrs	r3, r2
 8000928:	b21b      	sxth	r3, r3
 800092a:	b29a      	uxth	r2, r3
 800092c:	4b23      	ldr	r3, [pc, #140]	@ (80009bc <BMP180_read_calliberation_data+0x120>)
 800092e:	801a      	strh	r2, [r3, #0]
	AC6 = (int16_t)((Callib_Data[10] << 8) | Callib_Data[11]);
 8000930:	7abb      	ldrb	r3, [r7, #10]
 8000932:	021b      	lsls	r3, r3, #8
 8000934:	b21a      	sxth	r2, r3
 8000936:	7afb      	ldrb	r3, [r7, #11]
 8000938:	b21b      	sxth	r3, r3
 800093a:	4313      	orrs	r3, r2
 800093c:	b21b      	sxth	r3, r3
 800093e:	b29a      	uxth	r2, r3
 8000940:	4b1f      	ldr	r3, [pc, #124]	@ (80009c0 <BMP180_read_calliberation_data+0x124>)
 8000942:	801a      	strh	r2, [r3, #0]
	B1 = (int16_t)((Callib_Data[12] << 8) | Callib_Data[13]);
 8000944:	7b3b      	ldrb	r3, [r7, #12]
 8000946:	021b      	lsls	r3, r3, #8
 8000948:	b21a      	sxth	r2, r3
 800094a:	7b7b      	ldrb	r3, [r7, #13]
 800094c:	b21b      	sxth	r3, r3
 800094e:	4313      	orrs	r3, r2
 8000950:	b21a      	sxth	r2, r3
 8000952:	4b1c      	ldr	r3, [pc, #112]	@ (80009c4 <BMP180_read_calliberation_data+0x128>)
 8000954:	801a      	strh	r2, [r3, #0]
	B2 = (int16_t)((Callib_Data[14] << 8) | Callib_Data[15]);
 8000956:	7bbb      	ldrb	r3, [r7, #14]
 8000958:	021b      	lsls	r3, r3, #8
 800095a:	b21a      	sxth	r2, r3
 800095c:	7bfb      	ldrb	r3, [r7, #15]
 800095e:	b21b      	sxth	r3, r3
 8000960:	4313      	orrs	r3, r2
 8000962:	b21a      	sxth	r2, r3
 8000964:	4b18      	ldr	r3, [pc, #96]	@ (80009c8 <BMP180_read_calliberation_data+0x12c>)
 8000966:	801a      	strh	r2, [r3, #0]
	MB = (int16_t)((Callib_Data[16] << 8) | Callib_Data[17]);
 8000968:	7c3b      	ldrb	r3, [r7, #16]
 800096a:	021b      	lsls	r3, r3, #8
 800096c:	b21a      	sxth	r2, r3
 800096e:	7c7b      	ldrb	r3, [r7, #17]
 8000970:	b21b      	sxth	r3, r3
 8000972:	4313      	orrs	r3, r2
 8000974:	b21a      	sxth	r2, r3
 8000976:	4b15      	ldr	r3, [pc, #84]	@ (80009cc <BMP180_read_calliberation_data+0x130>)
 8000978:	801a      	strh	r2, [r3, #0]
	MC = (int16_t)((Callib_Data[18] << 8) | Callib_Data[19]);
 800097a:	7cbb      	ldrb	r3, [r7, #18]
 800097c:	021b      	lsls	r3, r3, #8
 800097e:	b21a      	sxth	r2, r3
 8000980:	7cfb      	ldrb	r3, [r7, #19]
 8000982:	b21b      	sxth	r3, r3
 8000984:	4313      	orrs	r3, r2
 8000986:	b21a      	sxth	r2, r3
 8000988:	4b11      	ldr	r3, [pc, #68]	@ (80009d0 <BMP180_read_calliberation_data+0x134>)
 800098a:	801a      	strh	r2, [r3, #0]
	MD = (int16_t)((Callib_Data[20] << 8) | Callib_Data[21]);
 800098c:	7d3b      	ldrb	r3, [r7, #20]
 800098e:	021b      	lsls	r3, r3, #8
 8000990:	b21a      	sxth	r2, r3
 8000992:	7d7b      	ldrb	r3, [r7, #21]
 8000994:	b21b      	sxth	r3, r3
 8000996:	4313      	orrs	r3, r2
 8000998:	b21a      	sxth	r2, r3
 800099a:	4b0e      	ldr	r3, [pc, #56]	@ (80009d4 <BMP180_read_calliberation_data+0x138>)
 800099c:	801a      	strh	r2, [r3, #0]
}
 800099e:	bf00      	nop
 80009a0:	3718      	adds	r7, #24
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	24000094 	.word	0x24000094
 80009ac:	00000082 	.word	0x00000082
 80009b0:	00000084 	.word	0x00000084
 80009b4:	00000086 	.word	0x00000086
 80009b8:	0000007c 	.word	0x0000007c
 80009bc:	0000007e 	.word	0x0000007e
 80009c0:	00000080 	.word	0x00000080
 80009c4:	00000088 	.word	0x00000088
 80009c8:	0000008a 	.word	0x0000008a
 80009cc:	0000008c 	.word	0x0000008c
 80009d0:	0000008e 	.word	0x0000008e
 80009d4:	00000090 	.word	0x00000090

080009d8 <BMP180_GET_temp>:

float BMP180_GET_temp(uint16_t temperature){
 80009d8:	b480      	push	{r7}
 80009da:	b083      	sub	sp, #12
 80009dc:	af00      	add	r7, sp, #0
 80009de:	4603      	mov	r3, r0
 80009e0:	80fb      	strh	r3, [r7, #6]

	X1 = ((temperature - AC6) * AC5)/32768;
 80009e2:	88fb      	ldrh	r3, [r7, #6]
 80009e4:	4a22      	ldr	r2, [pc, #136]	@ (8000a70 <BMP180_GET_temp+0x98>)
 80009e6:	8812      	ldrh	r2, [r2, #0]
 80009e8:	1a9b      	subs	r3, r3, r2
 80009ea:	4a22      	ldr	r2, [pc, #136]	@ (8000a74 <BMP180_GET_temp+0x9c>)
 80009ec:	8812      	ldrh	r2, [r2, #0]
 80009ee:	fb02 f303 	mul.w	r3, r2, r3
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	da03      	bge.n	80009fe <BMP180_GET_temp+0x26>
 80009f6:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80009fa:	441a      	add	r2, r3
 80009fc:	4613      	mov	r3, r2
 80009fe:	13db      	asrs	r3, r3, #15
 8000a00:	461a      	mov	r2, r3
 8000a02:	4b1d      	ldr	r3, [pc, #116]	@ (8000a78 <BMP180_GET_temp+0xa0>)
 8000a04:	601a      	str	r2, [r3, #0]
	X2 = (MC * 2048)/(X1 + MD);
 8000a06:	4b1d      	ldr	r3, [pc, #116]	@ (8000a7c <BMP180_GET_temp+0xa4>)
 8000a08:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a0c:	02da      	lsls	r2, r3, #11
 8000a0e:	4b1c      	ldr	r3, [pc, #112]	@ (8000a80 <BMP180_GET_temp+0xa8>)
 8000a10:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a14:	4619      	mov	r1, r3
 8000a16:	4b18      	ldr	r3, [pc, #96]	@ (8000a78 <BMP180_GET_temp+0xa0>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	440b      	add	r3, r1
 8000a1c:	fb92 f3f3 	sdiv	r3, r2, r3
 8000a20:	4a18      	ldr	r2, [pc, #96]	@ (8000a84 <BMP180_GET_temp+0xac>)
 8000a22:	6013      	str	r3, [r2, #0]
	B5 = X1 + X2;
 8000a24:	4b14      	ldr	r3, [pc, #80]	@ (8000a78 <BMP180_GET_temp+0xa0>)
 8000a26:	681a      	ldr	r2, [r3, #0]
 8000a28:	4b16      	ldr	r3, [pc, #88]	@ (8000a84 <BMP180_GET_temp+0xac>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	4413      	add	r3, r2
 8000a2e:	4a16      	ldr	r2, [pc, #88]	@ (8000a88 <BMP180_GET_temp+0xb0>)
 8000a30:	6013      	str	r3, [r2, #0]
	temp = (B5 + 8)/16;
 8000a32:	4b15      	ldr	r3, [pc, #84]	@ (8000a88 <BMP180_GET_temp+0xb0>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	3308      	adds	r3, #8
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	da00      	bge.n	8000a3e <BMP180_GET_temp+0x66>
 8000a3c:	330f      	adds	r3, #15
 8000a3e:	111b      	asrs	r3, r3, #4
 8000a40:	ee07 3a90 	vmov	s15, r3
 8000a44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a48:	4b10      	ldr	r3, [pc, #64]	@ (8000a8c <BMP180_GET_temp+0xb4>)
 8000a4a:	edc3 7a00 	vstr	s15, [r3]
	return temp/10.0;
 8000a4e:	4b0f      	ldr	r3, [pc, #60]	@ (8000a8c <BMP180_GET_temp+0xb4>)
 8000a50:	edd3 7a00 	vldr	s15, [r3]
 8000a54:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8000a58:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000a5c:	eef0 7a66 	vmov.f32	s15, s13
}
 8000a60:	eeb0 0a67 	vmov.f32	s0, s15
 8000a64:	370c      	adds	r7, #12
 8000a66:	46bd      	mov	sp, r7
 8000a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop
 8000a70:	00000080 	.word	0x00000080
 8000a74:	0000007e 	.word	0x0000007e
 8000a78:	000000ac 	.word	0x000000ac
 8000a7c:	0000008e 	.word	0x0000008e
 8000a80:	00000090 	.word	0x00000090
 8000a84:	000000b0 	.word	0x000000b0
 8000a88:	000000b4 	.word	0x000000b4
 8000a8c:	000000c4 	.word	0x000000c4

08000a90 <BMP180_GET_pres>:

float BMP180_GET_pres(uint16_t pressure){
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	4603      	mov	r3, r0
 8000a98:	80fb      	strh	r3, [r7, #6]

	UP = BMP180_READ_pres();
 8000a9a:	f7ff fe59 	bl	8000750 <BMP180_READ_pres>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	4a9c      	ldr	r2, [pc, #624]	@ (8000d14 <BMP180_GET_pres+0x284>)
 8000aa2:	6013      	str	r3, [r2, #0]
	X1 = (((UT-AC6) * AC5)/32768);//
 8000aa4:	4b9c      	ldr	r3, [pc, #624]	@ (8000d18 <BMP180_GET_pres+0x288>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	4a9c      	ldr	r2, [pc, #624]	@ (8000d1c <BMP180_GET_pres+0x28c>)
 8000aaa:	8812      	ldrh	r2, [r2, #0]
 8000aac:	1a9b      	subs	r3, r3, r2
 8000aae:	4a9c      	ldr	r2, [pc, #624]	@ (8000d20 <BMP180_GET_pres+0x290>)
 8000ab0:	8812      	ldrh	r2, [r2, #0]
 8000ab2:	fb02 f303 	mul.w	r3, r2, r3
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	da03      	bge.n	8000ac2 <BMP180_GET_pres+0x32>
 8000aba:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8000abe:	441a      	add	r2, r3
 8000ac0:	4613      	mov	r3, r2
 8000ac2:	13db      	asrs	r3, r3, #15
 8000ac4:	461a      	mov	r2, r3
 8000ac6:	4b97      	ldr	r3, [pc, #604]	@ (8000d24 <BMP180_GET_pres+0x294>)
 8000ac8:	601a      	str	r2, [r3, #0]
	X2 = ((MC*(2048)) / (X1+MD));
 8000aca:	4b97      	ldr	r3, [pc, #604]	@ (8000d28 <BMP180_GET_pres+0x298>)
 8000acc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ad0:	02da      	lsls	r2, r3, #11
 8000ad2:	4b96      	ldr	r3, [pc, #600]	@ (8000d2c <BMP180_GET_pres+0x29c>)
 8000ad4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ad8:	4619      	mov	r1, r3
 8000ada:	4b92      	ldr	r3, [pc, #584]	@ (8000d24 <BMP180_GET_pres+0x294>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	440b      	add	r3, r1
 8000ae0:	fb92 f3f3 	sdiv	r3, r2, r3
 8000ae4:	4a92      	ldr	r2, [pc, #584]	@ (8000d30 <BMP180_GET_pres+0x2a0>)
 8000ae6:	6013      	str	r3, [r2, #0]
	B5 = X1+X2;
 8000ae8:	4b8e      	ldr	r3, [pc, #568]	@ (8000d24 <BMP180_GET_pres+0x294>)
 8000aea:	681a      	ldr	r2, [r3, #0]
 8000aec:	4b90      	ldr	r3, [pc, #576]	@ (8000d30 <BMP180_GET_pres+0x2a0>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	4413      	add	r3, r2
 8000af2:	4a90      	ldr	r2, [pc, #576]	@ (8000d34 <BMP180_GET_pres+0x2a4>)
 8000af4:	6013      	str	r3, [r2, #0]
	B6 = B5-4000;
 8000af6:	4b8f      	ldr	r3, [pc, #572]	@ (8000d34 <BMP180_GET_pres+0x2a4>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	f5a3 637a 	sub.w	r3, r3, #4000	@ 0xfa0
 8000afe:	4a8e      	ldr	r2, [pc, #568]	@ (8000d38 <BMP180_GET_pres+0x2a8>)
 8000b00:	6013      	str	r3, [r2, #0]
	X1 = (B2 * (B6*B6/(4096)))/(2048);
 8000b02:	4b8e      	ldr	r3, [pc, #568]	@ (8000d3c <BMP180_GET_pres+0x2ac>)
 8000b04:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b08:	4619      	mov	r1, r3
 8000b0a:	4b8b      	ldr	r3, [pc, #556]	@ (8000d38 <BMP180_GET_pres+0x2a8>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	4a8a      	ldr	r2, [pc, #552]	@ (8000d38 <BMP180_GET_pres+0x2a8>)
 8000b10:	6812      	ldr	r2, [r2, #0]
 8000b12:	fb02 f303 	mul.w	r3, r2, r3
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	da01      	bge.n	8000b1e <BMP180_GET_pres+0x8e>
 8000b1a:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 8000b1e:	131b      	asrs	r3, r3, #12
 8000b20:	fb01 f303 	mul.w	r3, r1, r3
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	da01      	bge.n	8000b2c <BMP180_GET_pres+0x9c>
 8000b28:	f203 73ff 	addw	r3, r3, #2047	@ 0x7ff
 8000b2c:	12db      	asrs	r3, r3, #11
 8000b2e:	461a      	mov	r2, r3
 8000b30:	4b7c      	ldr	r3, [pc, #496]	@ (8000d24 <BMP180_GET_pres+0x294>)
 8000b32:	601a      	str	r2, [r3, #0]
	X2 = AC2*B6/(2048);
 8000b34:	4b82      	ldr	r3, [pc, #520]	@ (8000d40 <BMP180_GET_pres+0x2b0>)
 8000b36:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b3a:	461a      	mov	r2, r3
 8000b3c:	4b7e      	ldr	r3, [pc, #504]	@ (8000d38 <BMP180_GET_pres+0x2a8>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	fb02 f303 	mul.w	r3, r2, r3
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	da01      	bge.n	8000b4c <BMP180_GET_pres+0xbc>
 8000b48:	f203 73ff 	addw	r3, r3, #2047	@ 0x7ff
 8000b4c:	12db      	asrs	r3, r3, #11
 8000b4e:	461a      	mov	r2, r3
 8000b50:	4b77      	ldr	r3, [pc, #476]	@ (8000d30 <BMP180_GET_pres+0x2a0>)
 8000b52:	601a      	str	r2, [r3, #0]
	X3 = X1+X2;
 8000b54:	4b73      	ldr	r3, [pc, #460]	@ (8000d24 <BMP180_GET_pres+0x294>)
 8000b56:	681a      	ldr	r2, [r3, #0]
 8000b58:	4b75      	ldr	r3, [pc, #468]	@ (8000d30 <BMP180_GET_pres+0x2a0>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4413      	add	r3, r2
 8000b5e:	4a79      	ldr	r2, [pc, #484]	@ (8000d44 <BMP180_GET_pres+0x2b4>)
 8000b60:	6013      	str	r3, [r2, #0]
	B3 = (((AC1*4+X3)<<3)+2)/4;
 8000b62:	4b79      	ldr	r3, [pc, #484]	@ (8000d48 <BMP180_GET_pres+0x2b8>)
 8000b64:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b68:	009a      	lsls	r2, r3, #2
 8000b6a:	4b76      	ldr	r3, [pc, #472]	@ (8000d44 <BMP180_GET_pres+0x2b4>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	4413      	add	r3, r2
 8000b70:	00db      	lsls	r3, r3, #3
 8000b72:	3302      	adds	r3, #2
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	da00      	bge.n	8000b7a <BMP180_GET_pres+0xea>
 8000b78:	3303      	adds	r3, #3
 8000b7a:	109b      	asrs	r3, r3, #2
 8000b7c:	461a      	mov	r2, r3
 8000b7e:	4b73      	ldr	r3, [pc, #460]	@ (8000d4c <BMP180_GET_pres+0x2bc>)
 8000b80:	601a      	str	r2, [r3, #0]
	X1 = AC3*B6/8192;
 8000b82:	4b73      	ldr	r3, [pc, #460]	@ (8000d50 <BMP180_GET_pres+0x2c0>)
 8000b84:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b88:	461a      	mov	r2, r3
 8000b8a:	4b6b      	ldr	r3, [pc, #428]	@ (8000d38 <BMP180_GET_pres+0x2a8>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	fb02 f303 	mul.w	r3, r2, r3
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	da03      	bge.n	8000b9e <BMP180_GET_pres+0x10e>
 8000b96:	f641 72ff 	movw	r2, #8191	@ 0x1fff
 8000b9a:	441a      	add	r2, r3
 8000b9c:	4613      	mov	r3, r2
 8000b9e:	135b      	asrs	r3, r3, #13
 8000ba0:	461a      	mov	r2, r3
 8000ba2:	4b60      	ldr	r3, [pc, #384]	@ (8000d24 <BMP180_GET_pres+0x294>)
 8000ba4:	601a      	str	r2, [r3, #0]
	X2 = (B1 * (B6*B6/(4096)))/(65536);
 8000ba6:	4b6b      	ldr	r3, [pc, #428]	@ (8000d54 <BMP180_GET_pres+0x2c4>)
 8000ba8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000bac:	4619      	mov	r1, r3
 8000bae:	4b62      	ldr	r3, [pc, #392]	@ (8000d38 <BMP180_GET_pres+0x2a8>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	4a61      	ldr	r2, [pc, #388]	@ (8000d38 <BMP180_GET_pres+0x2a8>)
 8000bb4:	6812      	ldr	r2, [r2, #0]
 8000bb6:	fb02 f303 	mul.w	r3, r2, r3
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	da01      	bge.n	8000bc2 <BMP180_GET_pres+0x132>
 8000bbe:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 8000bc2:	131b      	asrs	r3, r3, #12
 8000bc4:	fb01 f303 	mul.w	r3, r1, r3
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	da03      	bge.n	8000bd4 <BMP180_GET_pres+0x144>
 8000bcc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000bd0:	441a      	add	r2, r3
 8000bd2:	4613      	mov	r3, r2
 8000bd4:	141b      	asrs	r3, r3, #16
 8000bd6:	461a      	mov	r2, r3
 8000bd8:	4b55      	ldr	r3, [pc, #340]	@ (8000d30 <BMP180_GET_pres+0x2a0>)
 8000bda:	601a      	str	r2, [r3, #0]
	X3 = ((X1+X2)+2)/4;
 8000bdc:	4b51      	ldr	r3, [pc, #324]	@ (8000d24 <BMP180_GET_pres+0x294>)
 8000bde:	681a      	ldr	r2, [r3, #0]
 8000be0:	4b53      	ldr	r3, [pc, #332]	@ (8000d30 <BMP180_GET_pres+0x2a0>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4413      	add	r3, r2
 8000be6:	3302      	adds	r3, #2
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	da00      	bge.n	8000bee <BMP180_GET_pres+0x15e>
 8000bec:	3303      	adds	r3, #3
 8000bee:	109b      	asrs	r3, r3, #2
 8000bf0:	461a      	mov	r2, r3
 8000bf2:	4b54      	ldr	r3, [pc, #336]	@ (8000d44 <BMP180_GET_pres+0x2b4>)
 8000bf4:	601a      	str	r2, [r3, #0]
	B4 = AC4* (uint32_t)(X3+32768)/(32768);
 8000bf6:	4b58      	ldr	r3, [pc, #352]	@ (8000d58 <BMP180_GET_pres+0x2c8>)
 8000bf8:	881b      	ldrh	r3, [r3, #0]
 8000bfa:	461a      	mov	r2, r3
 8000bfc:	4b51      	ldr	r3, [pc, #324]	@ (8000d44 <BMP180_GET_pres+0x2b4>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8000c04:	fb02 f303 	mul.w	r3, r2, r3
 8000c08:	0bdb      	lsrs	r3, r3, #15
 8000c0a:	4a54      	ldr	r2, [pc, #336]	@ (8000d5c <BMP180_GET_pres+0x2cc>)
 8000c0c:	6013      	str	r3, [r2, #0]
	B7 = ((uint32_t)UP-B3)*(50000>>3);
 8000c0e:	4b41      	ldr	r3, [pc, #260]	@ (8000d14 <BMP180_GET_pres+0x284>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	4a4e      	ldr	r2, [pc, #312]	@ (8000d4c <BMP180_GET_pres+0x2bc>)
 8000c14:	6812      	ldr	r2, [r2, #0]
 8000c16:	1a9b      	subs	r3, r3, r2
 8000c18:	f641 026a 	movw	r2, #6250	@ 0x186a
 8000c1c:	fb02 f303 	mul.w	r3, r2, r3
 8000c20:	4a4f      	ldr	r2, [pc, #316]	@ (8000d60 <BMP180_GET_pres+0x2d0>)
 8000c22:	6013      	str	r3, [r2, #0]
	if (B7 < 0x80000000){
 8000c24:	4b4e      	ldr	r3, [pc, #312]	@ (8000d60 <BMP180_GET_pres+0x2d0>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	db0e      	blt.n	8000c4a <BMP180_GET_pres+0x1ba>
		pres = (B7*2)/B4;
 8000c2c:	4b4c      	ldr	r3, [pc, #304]	@ (8000d60 <BMP180_GET_pres+0x2d0>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	005a      	lsls	r2, r3, #1
 8000c32:	4b4a      	ldr	r3, [pc, #296]	@ (8000d5c <BMP180_GET_pres+0x2cc>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c3a:	ee07 3a90 	vmov	s15, r3
 8000c3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000c42:	4b48      	ldr	r3, [pc, #288]	@ (8000d64 <BMP180_GET_pres+0x2d4>)
 8000c44:	edc3 7a00 	vstr	s15, [r3]
 8000c48:	e00d      	b.n	8000c66 <BMP180_GET_pres+0x1d6>
	}
	else{
		pres = (B7/B4)*2;
 8000c4a:	4b45      	ldr	r3, [pc, #276]	@ (8000d60 <BMP180_GET_pres+0x2d0>)
 8000c4c:	681a      	ldr	r2, [r3, #0]
 8000c4e:	4b43      	ldr	r3, [pc, #268]	@ (8000d5c <BMP180_GET_pres+0x2cc>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c56:	005b      	lsls	r3, r3, #1
 8000c58:	ee07 3a90 	vmov	s15, r3
 8000c5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000c60:	4b40      	ldr	r3, [pc, #256]	@ (8000d64 <BMP180_GET_pres+0x2d4>)
 8000c62:	edc3 7a00 	vstr	s15, [r3]
	}
	X1 = (pres/(256))*(pres/(256));
 8000c66:	4b3f      	ldr	r3, [pc, #252]	@ (8000d64 <BMP180_GET_pres+0x2d4>)
 8000c68:	edd3 7a00 	vldr	s15, [r3]
 8000c6c:	eddf 6a3e 	vldr	s13, [pc, #248]	@ 8000d68 <BMP180_GET_pres+0x2d8>
 8000c70:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000c74:	4b3b      	ldr	r3, [pc, #236]	@ (8000d64 <BMP180_GET_pres+0x2d4>)
 8000c76:	edd3 6a00 	vldr	s13, [r3]
 8000c7a:	ed9f 6a3b 	vldr	s12, [pc, #236]	@ 8000d68 <BMP180_GET_pres+0x2d8>
 8000c7e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8000c82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c86:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000c8a:	ee17 2a90 	vmov	r2, s15
 8000c8e:	4b25      	ldr	r3, [pc, #148]	@ (8000d24 <BMP180_GET_pres+0x294>)
 8000c90:	601a      	str	r2, [r3, #0]
	X1 = (X1*3038)/(65536);
 8000c92:	4b24      	ldr	r3, [pc, #144]	@ (8000d24 <BMP180_GET_pres+0x294>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	f640 32de 	movw	r2, #3038	@ 0xbde
 8000c9a:	fb02 f303 	mul.w	r3, r2, r3
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	da03      	bge.n	8000caa <BMP180_GET_pres+0x21a>
 8000ca2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000ca6:	441a      	add	r2, r3
 8000ca8:	4613      	mov	r3, r2
 8000caa:	141b      	asrs	r3, r3, #16
 8000cac:	461a      	mov	r2, r3
 8000cae:	4b1d      	ldr	r3, [pc, #116]	@ (8000d24 <BMP180_GET_pres+0x294>)
 8000cb0:	601a      	str	r2, [r3, #0]
	X2 = (-7357*pres)/(65536);
 8000cb2:	4b2c      	ldr	r3, [pc, #176]	@ (8000d64 <BMP180_GET_pres+0x2d4>)
 8000cb4:	edd3 7a00 	vldr	s15, [r3]
 8000cb8:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 8000d6c <BMP180_GET_pres+0x2dc>
 8000cbc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000cc0:	eddf 6a2b 	vldr	s13, [pc, #172]	@ 8000d70 <BMP180_GET_pres+0x2e0>
 8000cc4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000cc8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ccc:	ee17 2a90 	vmov	r2, s15
 8000cd0:	4b17      	ldr	r3, [pc, #92]	@ (8000d30 <BMP180_GET_pres+0x2a0>)
 8000cd2:	601a      	str	r2, [r3, #0]
	pres = pres + (X1+X2+3791)/(16);
 8000cd4:	4b13      	ldr	r3, [pc, #76]	@ (8000d24 <BMP180_GET_pres+0x294>)
 8000cd6:	681a      	ldr	r2, [r3, #0]
 8000cd8:	4b15      	ldr	r3, [pc, #84]	@ (8000d30 <BMP180_GET_pres+0x2a0>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4413      	add	r3, r2
 8000cde:	f603 63cf 	addw	r3, r3, #3791	@ 0xecf
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	da00      	bge.n	8000ce8 <BMP180_GET_pres+0x258>
 8000ce6:	330f      	adds	r3, #15
 8000ce8:	111b      	asrs	r3, r3, #4
 8000cea:	ee07 3a90 	vmov	s15, r3
 8000cee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000cf2:	4b1c      	ldr	r3, [pc, #112]	@ (8000d64 <BMP180_GET_pres+0x2d4>)
 8000cf4:	edd3 7a00 	vldr	s15, [r3]
 8000cf8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000cfc:	4b19      	ldr	r3, [pc, #100]	@ (8000d64 <BMP180_GET_pres+0x2d4>)
 8000cfe:	edc3 7a00 	vstr	s15, [r3]
	return pres;
 8000d02:	4b18      	ldr	r3, [pc, #96]	@ (8000d64 <BMP180_GET_pres+0x2d4>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	ee07 3a90 	vmov	s15, r3
}
 8000d0a:	eeb0 0a67 	vmov.f32	s0, s15
 8000d0e:	3708      	adds	r7, #8
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	0000009c 	.word	0x0000009c
 8000d18:	000000a8 	.word	0x000000a8
 8000d1c:	00000080 	.word	0x00000080
 8000d20:	0000007e 	.word	0x0000007e
 8000d24:	000000ac 	.word	0x000000ac
 8000d28:	0000008e 	.word	0x0000008e
 8000d2c:	00000090 	.word	0x00000090
 8000d30:	000000b0 	.word	0x000000b0
 8000d34:	000000b4 	.word	0x000000b4
 8000d38:	000000b8 	.word	0x000000b8
 8000d3c:	0000008a 	.word	0x0000008a
 8000d40:	00000084 	.word	0x00000084
 8000d44:	000000c0 	.word	0x000000c0
 8000d48:	00000082 	.word	0x00000082
 8000d4c:	000000bc 	.word	0x000000bc
 8000d50:	00000086 	.word	0x00000086
 8000d54:	00000088 	.word	0x00000088
 8000d58:	0000007c 	.word	0x0000007c
 8000d5c:	00000094 	.word	0x00000094
 8000d60:	00000098 	.word	0x00000098
 8000d64:	000000c8 	.word	0x000000c8
 8000d68:	43800000 	.word	0x43800000
 8000d6c:	c5e5e800 	.word	0xc5e5e800
 8000d70:	47800000 	.word	0x47800000

08000d74 <BMP180_CALIBRATION>:

void BMP180_CALIBRATION(float *firstpres){
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]

	//for(int i = 0; i < 30; i++){
	BMP180_start_measurment_temp();
 8000d7c:	f7ff fd32 	bl	80007e4 <BMP180_start_measurment_temp>
	HAL_Delay(10); // 9
 8000d80:	200a      	movs	r0, #10
 8000d82:	f008 fa67 	bl	8009254 <HAL_Delay>
	temperature = BMP180_READ_temp();
 8000d86:	f7ff fcc1 	bl	800070c <BMP180_READ_temp>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	461a      	mov	r2, r3
 8000d8e:	4b15      	ldr	r3, [pc, #84]	@ (8000de4 <BMP180_CALIBRATION+0x70>)
 8000d90:	601a      	str	r2, [r3, #0]
	temp = BMP180_GET_temp(temperature);
 8000d92:	4b14      	ldr	r3, [pc, #80]	@ (8000de4 <BMP180_CALIBRATION+0x70>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	b29b      	uxth	r3, r3
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f7ff fe1d 	bl	80009d8 <BMP180_GET_temp>
 8000d9e:	eef0 7a40 	vmov.f32	s15, s0
 8000da2:	4b11      	ldr	r3, [pc, #68]	@ (8000de8 <BMP180_CALIBRATION+0x74>)
 8000da4:	edc3 7a00 	vstr	s15, [r3]
	BMP180_start_measurment_pres();
 8000da8:	f7ff fd34 	bl	8000814 <BMP180_start_measurment_pres>
	HAL_Delay(30); // 30
 8000dac:	201e      	movs	r0, #30
 8000dae:	f008 fa51 	bl	8009254 <HAL_Delay>
	pressure = BMP180_READ_pres();
 8000db2:	f7ff fccd 	bl	8000750 <BMP180_READ_pres>
 8000db6:	4603      	mov	r3, r0
 8000db8:	461a      	mov	r2, r3
 8000dba:	4b0c      	ldr	r3, [pc, #48]	@ (8000dec <BMP180_CALIBRATION+0x78>)
 8000dbc:	601a      	str	r2, [r3, #0]
	pres = BMP180_GET_pres(pressure);
 8000dbe:	4b0b      	ldr	r3, [pc, #44]	@ (8000dec <BMP180_CALIBRATION+0x78>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	b29b      	uxth	r3, r3
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f7ff fe63 	bl	8000a90 <BMP180_GET_pres>
 8000dca:	eef0 7a40 	vmov.f32	s15, s0
 8000dce:	4b08      	ldr	r3, [pc, #32]	@ (8000df0 <BMP180_CALIBRATION+0x7c>)
 8000dd0:	edc3 7a00 	vstr	s15, [r3]
	//}
	*firstpres = pres;
 8000dd4:	4b06      	ldr	r3, [pc, #24]	@ (8000df0 <BMP180_CALIBRATION+0x7c>)
 8000dd6:	681a      	ldr	r2, [r3, #0]
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	601a      	str	r2, [r3, #0]
}
 8000ddc:	bf00      	nop
 8000dde:	3708      	adds	r7, #8
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	000000a0 	.word	0x000000a0
 8000de8:	000000c4 	.word	0x000000c4
 8000dec:	000000a4 	.word	0x000000a4
 8000df0:	000000c8 	.word	0x000000c8

08000df4 <BMP180_GET_height>:

float BMP180_GET_height(void){
 8000df4:	b480      	push	{r7}
 8000df6:	b083      	sub	sp, #12
 8000df8:	af00      	add	r7, sp, #0
	float height = 0, factor; // metry
 8000dfa:	f04f 0300 	mov.w	r3, #0
 8000dfe:	607b      	str	r3, [r7, #4]
	factor = 11.3; // na 1m cisnienie spada o 11,3 pa
 8000e00:	4b0a      	ldr	r3, [pc, #40]	@ (8000e2c <BMP180_GET_height+0x38>)
 8000e02:	603b      	str	r3, [r7, #0]
	height = (ampritude/factor);
 8000e04:	4b0a      	ldr	r3, [pc, #40]	@ (8000e30 <BMP180_GET_height+0x3c>)
 8000e06:	edd3 6a00 	vldr	s13, [r3]
 8000e0a:	ed97 7a00 	vldr	s14, [r7]
 8000e0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000e12:	edc7 7a01 	vstr	s15, [r7, #4]
	return height;
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	ee07 3a90 	vmov	s15, r3
}
 8000e1c:	eeb0 0a67 	vmov.f32	s0, s15
 8000e20:	370c      	adds	r7, #12
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop
 8000e2c:	4134cccd 	.word	0x4134cccd
 8000e30:	000000d0 	.word	0x000000d0

08000e34 <ESC_1_SPEED>:
static TIM_HandleTypeDef *htim_ESC; //450Hz



void ESC_1_SPEED(uint16_t a)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b083      	sub	sp, #12
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	80fb      	strh	r3, [r7, #6]
	  if(a < min_speed)
 8000e3e:	88fb      	ldrh	r3, [r7, #6]
 8000e40:	f642 1203 	movw	r2, #10499	@ 0x2903
 8000e44:	4293      	cmp	r3, r2
 8000e46:	d802      	bhi.n	8000e4e <ESC_1_SPEED+0x1a>
	  {
		  a = min_speed;
 8000e48:	f642 1304 	movw	r3, #10500	@ 0x2904
 8000e4c:	80fb      	strh	r3, [r7, #6]
	  }
	  if(a >  max_speed)
 8000e4e:	88fb      	ldrh	r3, [r7, #6]
 8000e50:	f644 422c 	movw	r2, #19500	@ 0x4c2c
 8000e54:	4293      	cmp	r3, r2
 8000e56:	d902      	bls.n	8000e5e <ESC_1_SPEED+0x2a>
	  {
		  a =  max_speed;
 8000e58:	f644 432c 	movw	r3, #19500	@ 0x4c2c
 8000e5c:	80fb      	strh	r3, [r7, #6]
	  }
	  __HAL_TIM_SET_COMPARE(htim_ESC, TIM_CHANNEL_1, a);
 8000e5e:	4b05      	ldr	r3, [pc, #20]	@ (8000e74 <ESC_1_SPEED+0x40>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	88fa      	ldrh	r2, [r7, #6]
 8000e66:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000e68:	bf00      	nop
 8000e6a:	370c      	adds	r7, #12
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e72:	4770      	bx	lr
 8000e74:	24000098 	.word	0x24000098

08000e78 <ESC_2_SPEED>:

void ESC_2_SPEED(uint16_t a)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b083      	sub	sp, #12
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	4603      	mov	r3, r0
 8000e80:	80fb      	strh	r3, [r7, #6]
	  if(a < min_speed - Engine2_balance)
 8000e82:	88fb      	ldrh	r3, [r7, #6]
 8000e84:	f642 1203 	movw	r2, #10499	@ 0x2903
 8000e88:	4293      	cmp	r3, r2
 8000e8a:	d802      	bhi.n	8000e92 <ESC_2_SPEED+0x1a>
	  {
		  a = min_speed - Engine2_balance;
 8000e8c:	f642 1304 	movw	r3, #10500	@ 0x2904
 8000e90:	80fb      	strh	r3, [r7, #6]
	  }
	  if(a >  max_speed - Engine2_balance)
 8000e92:	88fb      	ldrh	r3, [r7, #6]
 8000e94:	f644 422c 	movw	r2, #19500	@ 0x4c2c
 8000e98:	4293      	cmp	r3, r2
 8000e9a:	d902      	bls.n	8000ea2 <ESC_2_SPEED+0x2a>
	  {
		  a =  max_speed - Engine2_balance;
 8000e9c:	f644 432c 	movw	r3, #19500	@ 0x4c2c
 8000ea0:	80fb      	strh	r3, [r7, #6]
	  }

	  __HAL_TIM_SET_COMPARE(htim_ESC, TIM_CHANNEL_2, a - Engine2_balance);
 8000ea2:	4b05      	ldr	r3, [pc, #20]	@ (8000eb8 <ESC_2_SPEED+0x40>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	88fa      	ldrh	r2, [r7, #6]
 8000eaa:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8000eac:	bf00      	nop
 8000eae:	370c      	adds	r7, #12
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr
 8000eb8:	24000098 	.word	0x24000098

08000ebc <ESC_3_SPEED>:

void ESC_3_SPEED(uint16_t a)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b083      	sub	sp, #12
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	80fb      	strh	r3, [r7, #6]
	  if(a < min_speed - Engine3_balance)
 8000ec6:	88fb      	ldrh	r3, [r7, #6]
 8000ec8:	f642 1203 	movw	r2, #10499	@ 0x2903
 8000ecc:	4293      	cmp	r3, r2
 8000ece:	d802      	bhi.n	8000ed6 <ESC_3_SPEED+0x1a>
	  {
		  a = min_speed - Engine3_balance;
 8000ed0:	f642 1304 	movw	r3, #10500	@ 0x2904
 8000ed4:	80fb      	strh	r3, [r7, #6]
	  }
	  if(a >  max_speed - Engine3_balance)
 8000ed6:	88fb      	ldrh	r3, [r7, #6]
 8000ed8:	f644 422c 	movw	r2, #19500	@ 0x4c2c
 8000edc:	4293      	cmp	r3, r2
 8000ede:	d902      	bls.n	8000ee6 <ESC_3_SPEED+0x2a>
	  {
		  a =  max_speed - Engine3_balance;
 8000ee0:	f644 432c 	movw	r3, #19500	@ 0x4c2c
 8000ee4:	80fb      	strh	r3, [r7, #6]
	  }

	  __HAL_TIM_SET_COMPARE(htim_ESC, TIM_CHANNEL_3, a - Engine3_balance);
 8000ee6:	4b05      	ldr	r3, [pc, #20]	@ (8000efc <ESC_3_SPEED+0x40>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	88fa      	ldrh	r2, [r7, #6]
 8000eee:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8000ef0:	bf00      	nop
 8000ef2:	370c      	adds	r7, #12
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr
 8000efc:	24000098 	.word	0x24000098

08000f00 <ESC_4_SPEED>:

void ESC_4_SPEED(uint16_t a)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b083      	sub	sp, #12
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	4603      	mov	r3, r0
 8000f08:	80fb      	strh	r3, [r7, #6]
	  if(a < min_speed - Engine4_balance)
 8000f0a:	88fb      	ldrh	r3, [r7, #6]
 8000f0c:	f642 1203 	movw	r2, #10499	@ 0x2903
 8000f10:	4293      	cmp	r3, r2
 8000f12:	d802      	bhi.n	8000f1a <ESC_4_SPEED+0x1a>
	  {
		  a = min_speed - Engine4_balance;
 8000f14:	f642 1304 	movw	r3, #10500	@ 0x2904
 8000f18:	80fb      	strh	r3, [r7, #6]
	  }
	  if(a > max_speed - Engine4_balance)
 8000f1a:	88fb      	ldrh	r3, [r7, #6]
 8000f1c:	f644 422c 	movw	r2, #19500	@ 0x4c2c
 8000f20:	4293      	cmp	r3, r2
 8000f22:	d902      	bls.n	8000f2a <ESC_4_SPEED+0x2a>
	  {
		  a = max_speed - Engine4_balance;
 8000f24:	f644 432c 	movw	r3, #19500	@ 0x4c2c
 8000f28:	80fb      	strh	r3, [r7, #6]
	  }

	  __HAL_TIM_SET_COMPARE(htim_ESC, TIM_CHANNEL_4, a - Engine4_balance);
 8000f2a:	4b05      	ldr	r3, [pc, #20]	@ (8000f40 <ESC_4_SPEED+0x40>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	88fa      	ldrh	r2, [r7, #6]
 8000f32:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8000f34:	bf00      	nop
 8000f36:	370c      	adds	r7, #12
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr
 8000f40:	24000098 	.word	0x24000098

08000f44 <ESC_INT>:
 *
 * najpierw wlonczamy PWM a dopiero potem zasilanie do silników, w przeciwnym razie ESC mogą włączyć się w trybie programowania.
 *
 */
void ESC_INT(TIM_HandleTypeDef *htim)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
	htim_ESC = htim;
 8000f4c:	4a20      	ldr	r2, [pc, #128]	@ (8000fd0 <ESC_INT+0x8c>)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	6013      	str	r3, [r2, #0]


	HAL_TIM_PWM_Start(htim_ESC, TIM_CHANNEL_1);
 8000f52:	4b1f      	ldr	r3, [pc, #124]	@ (8000fd0 <ESC_INT+0x8c>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	2100      	movs	r1, #0
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f015 fa25 	bl	80163a8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim_ESC, TIM_CHANNEL_2);
 8000f5e:	4b1c      	ldr	r3, [pc, #112]	@ (8000fd0 <ESC_INT+0x8c>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	2104      	movs	r1, #4
 8000f64:	4618      	mov	r0, r3
 8000f66:	f015 fa1f 	bl	80163a8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim_ESC, TIM_CHANNEL_3);
 8000f6a:	4b19      	ldr	r3, [pc, #100]	@ (8000fd0 <ESC_INT+0x8c>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	2108      	movs	r1, #8
 8000f70:	4618      	mov	r0, r3
 8000f72:	f015 fa19 	bl	80163a8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim_ESC, TIM_CHANNEL_4);
 8000f76:	4b16      	ldr	r3, [pc, #88]	@ (8000fd0 <ESC_INT+0x8c>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	210c      	movs	r1, #12
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f015 fa13 	bl	80163a8 <HAL_TIM_PWM_Start>

	__HAL_TIM_SET_COMPARE(htim_ESC, TIM_CHANNEL_4, 10000);
 8000f82:	4b13      	ldr	r3, [pc, #76]	@ (8000fd0 <ESC_INT+0x8c>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000f8c:	641a      	str	r2, [r3, #64]	@ 0x40
	__HAL_TIM_SET_COMPARE(htim_ESC, TIM_CHANNEL_3, 10000);
 8000f8e:	4b10      	ldr	r3, [pc, #64]	@ (8000fd0 <ESC_INT+0x8c>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000f98:	63da      	str	r2, [r3, #60]	@ 0x3c
	__HAL_TIM_SET_COMPARE(htim_ESC, TIM_CHANNEL_2, 10000);
 8000f9a:	4b0d      	ldr	r3, [pc, #52]	@ (8000fd0 <ESC_INT+0x8c>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000fa4:	639a      	str	r2, [r3, #56]	@ 0x38
	__HAL_TIM_SET_COMPARE(htim_ESC, TIM_CHANNEL_1, 10000);
 8000fa6:	4b0a      	ldr	r3, [pc, #40]	@ (8000fd0 <ESC_INT+0x8c>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000fb0:	635a      	str	r2, [r3, #52]	@ 0x34
	ESC_POWER_0;
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000fb8:	4806      	ldr	r0, [pc, #24]	@ (8000fd4 <ESC_INT+0x90>)
 8000fba:	f00d faa9 	bl	800e510 <HAL_GPIO_WritePin>
	HAL_Delay(3000);
 8000fbe:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000fc2:	f008 f947 	bl	8009254 <HAL_Delay>
}
 8000fc6:	bf00      	nop
 8000fc8:	3708      	adds	r7, #8
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	24000098 	.word	0x24000098
 8000fd4:	58021800 	.word	0x58021800

08000fd8 <HMC5883L_Init>:
static I2C_HandleTypeDef *hi2c_HMC5883L;

extern uint8_t HMC5883L_Data_IT[6];
extern uint8_t HMC583L_IRQ;

uint8_t HMC5883L_Init(I2C_HandleTypeDef*hi2c){
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b088      	sub	sp, #32
 8000fdc:	af04      	add	r7, sp, #16
 8000fde:	6078      	str	r0, [r7, #4]

	hi2c_HMC5883L = hi2c;
 8000fe0:	4a2a      	ldr	r2, [pc, #168]	@ (800108c <HMC5883L_Init+0xb4>)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	6013      	str	r3, [r2, #0]

	uint8_t data = 0;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	73fb      	strb	r3, [r7, #15]
	 * bit3 = 0			30 HzOutput rate
	 * bit2 = 0		}
	 * bit1 = 0
	 * bit0 = 0
	 */
	data = 0xF0;
 8000fea:	23f0      	movs	r3, #240	@ 0xf0
 8000fec:	73fb      	strb	r3, [r7, #15]

	HAL_I2C_Mem_Write(hi2c_HMC5883L, HMC5883L_I2C_Address<<1, HMC5883L_Configuration_Register_A, 1, &data, 1, 1);
 8000fee:	4b27      	ldr	r3, [pc, #156]	@ (800108c <HMC5883L_Init+0xb4>)
 8000ff0:	6818      	ldr	r0, [r3, #0]
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	9302      	str	r3, [sp, #8]
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	9301      	str	r3, [sp, #4]
 8000ffa:	f107 030f 	add.w	r3, r7, #15
 8000ffe:	9300      	str	r3, [sp, #0]
 8001000:	2301      	movs	r3, #1
 8001002:	2200      	movs	r2, #0
 8001004:	213c      	movs	r1, #60	@ 0x3c
 8001006:	f00d fb53 	bl	800e6b0 <HAL_I2C_Mem_Write>
	 * bit3 = 0
	 * bit2 = 0
	 * bit1 = 0
	 * bit0 = 0
	 */
	data = 0x32;
 800100a:	2332      	movs	r3, #50	@ 0x32
 800100c:	73fb      	strb	r3, [r7, #15]

	HAL_I2C_Mem_Write(hi2c_HMC5883L, HMC5883L_I2C_Address<<1, HMC5883L_Configuration_Register_B, 1, &data, 1, 1);
 800100e:	4b1f      	ldr	r3, [pc, #124]	@ (800108c <HMC5883L_Init+0xb4>)
 8001010:	6818      	ldr	r0, [r3, #0]
 8001012:	2301      	movs	r3, #1
 8001014:	9302      	str	r3, [sp, #8]
 8001016:	2301      	movs	r3, #1
 8001018:	9301      	str	r3, [sp, #4]
 800101a:	f107 030f 	add.w	r3, r7, #15
 800101e:	9300      	str	r3, [sp, #0]
 8001020:	2301      	movs	r3, #1
 8001022:	2201      	movs	r2, #1
 8001024:	213c      	movs	r1, #60	@ 0x3c
 8001026:	f00d fb43 	bl	800e6b0 <HAL_I2C_Mem_Write>
	 * bit3 = 0
	 * bit2 = 0
	 * bit1 = 0	{ Continuous-Measurement Mode
	 * bit0 = 0 }
	 */
	data = 0x80;
 800102a:	2380      	movs	r3, #128	@ 0x80
 800102c:	73fb      	strb	r3, [r7, #15]

	HAL_I2C_Mem_Write(hi2c_HMC5883L, HMC5883L_I2C_Address<<1, HMC5883L_Mode_Register, 1, &data, 1, 1);
 800102e:	4b17      	ldr	r3, [pc, #92]	@ (800108c <HMC5883L_Init+0xb4>)
 8001030:	6818      	ldr	r0, [r3, #0]
 8001032:	2301      	movs	r3, #1
 8001034:	9302      	str	r3, [sp, #8]
 8001036:	2301      	movs	r3, #1
 8001038:	9301      	str	r3, [sp, #4]
 800103a:	f107 030f 	add.w	r3, r7, #15
 800103e:	9300      	str	r3, [sp, #0]
 8001040:	2301      	movs	r3, #1
 8001042:	2202      	movs	r2, #2
 8001044:	213c      	movs	r1, #60	@ 0x3c
 8001046:	f00d fb33 	bl	800e6b0 <HAL_I2C_Mem_Write>


	uint8_t status = 0;
 800104a:	2300      	movs	r3, #0
 800104c:	73bb      	strb	r3, [r7, #14]

	HAL_I2C_Mem_Read(hi2c_HMC5883L, HMC5883L_I2C_Address<<1, HMC5883L_Identifaction_Register_A, 1, &status, 1, 1);
 800104e:	4b0f      	ldr	r3, [pc, #60]	@ (800108c <HMC5883L_Init+0xb4>)
 8001050:	6818      	ldr	r0, [r3, #0]
 8001052:	2301      	movs	r3, #1
 8001054:	9302      	str	r3, [sp, #8]
 8001056:	2301      	movs	r3, #1
 8001058:	9301      	str	r3, [sp, #4]
 800105a:	f107 030e 	add.w	r3, r7, #14
 800105e:	9300      	str	r3, [sp, #0]
 8001060:	2301      	movs	r3, #1
 8001062:	220a      	movs	r2, #10
 8001064:	213c      	movs	r1, #60	@ 0x3c
 8001066:	f00d fc37 	bl	800e8d8 <HAL_I2C_Mem_Read>

	if(status != 0x48){
 800106a:	7bbb      	ldrb	r3, [r7, #14]
 800106c:	2b48      	cmp	r3, #72	@ 0x48
 800106e:	d002      	beq.n	8001076 <HMC5883L_Init+0x9e>
		status = 0;
 8001070:	2300      	movs	r3, #0
 8001072:	73bb      	strb	r3, [r7, #14]
 8001074:	e001      	b.n	800107a <HMC5883L_Init+0xa2>
	}
	else{
		status = 1;
 8001076:	2301      	movs	r3, #1
 8001078:	73bb      	strb	r3, [r7, #14]
	}
	HAL_Delay(10);
 800107a:	200a      	movs	r0, #10
 800107c:	f008 f8ea 	bl	8009254 <HAL_Delay>

	return status;
 8001080:	7bbb      	ldrb	r3, [r7, #14]
}
 8001082:	4618      	mov	r0, r3
 8001084:	3710      	adds	r7, #16
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	2400009c 	.word	0x2400009c

08001090 <HMC5883L_Get_Z_Start>:


int16_t HMC5883L_Get_Z_Start(void){
 8001090:	b580      	push	{r7, lr}
 8001092:	b086      	sub	sp, #24
 8001094:	af04      	add	r7, sp, #16
	int16_t fulldata = 182;
 8001096:	23b6      	movs	r3, #182	@ 0xb6
 8001098:	80fb      	strh	r3, [r7, #6]
	uint8_t data[6];

	HAL_I2C_Mem_Read(hi2c_HMC5883L, HMC5883L_I2C_Address<<1, HMC5883L_Data_Output_Z_MSB_Register, 1, data, 6, 1);
 800109a:	4b0d      	ldr	r3, [pc, #52]	@ (80010d0 <HMC5883L_Get_Z_Start+0x40>)
 800109c:	6818      	ldr	r0, [r3, #0]
 800109e:	2301      	movs	r3, #1
 80010a0:	9302      	str	r3, [sp, #8]
 80010a2:	2306      	movs	r3, #6
 80010a4:	9301      	str	r3, [sp, #4]
 80010a6:	463b      	mov	r3, r7
 80010a8:	9300      	str	r3, [sp, #0]
 80010aa:	2301      	movs	r3, #1
 80010ac:	2205      	movs	r2, #5
 80010ae:	213c      	movs	r1, #60	@ 0x3c
 80010b0:	f00d fc12 	bl	800e8d8 <HAL_I2C_Mem_Read>

	fulldata = ((int16_t)data[4]<<8) | data[5];
 80010b4:	793b      	ldrb	r3, [r7, #4]
 80010b6:	021b      	lsls	r3, r3, #8
 80010b8:	b21a      	sxth	r2, r3
 80010ba:	797b      	ldrb	r3, [r7, #5]
 80010bc:	b21b      	sxth	r3, r3
 80010be:	4313      	orrs	r3, r2
 80010c0:	80fb      	strh	r3, [r7, #6]

	return fulldata;
 80010c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	3708      	adds	r7, #8
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	2400009c 	.word	0x2400009c

080010d4 <HMC5883L_Get_Z_Start_IT>:

void HMC5883L_Get_Z_Start_IT(void){
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af02      	add	r7, sp, #8
	HAL_I2C_Mem_Read_IT(hi2c_HMC5883L, HMC5883L_I2C_Address<<1, HMC5883L_Data_Output_Z_MSB_Register, 1, (uint8_t *)HMC5883L_Data_IT, 6);
 80010da:	4b08      	ldr	r3, [pc, #32]	@ (80010fc <HMC5883L_Get_Z_Start_IT+0x28>)
 80010dc:	6818      	ldr	r0, [r3, #0]
 80010de:	2306      	movs	r3, #6
 80010e0:	9301      	str	r3, [sp, #4]
 80010e2:	4b07      	ldr	r3, [pc, #28]	@ (8001100 <HMC5883L_Get_Z_Start_IT+0x2c>)
 80010e4:	9300      	str	r3, [sp, #0]
 80010e6:	2301      	movs	r3, #1
 80010e8:	2205      	movs	r2, #5
 80010ea:	213c      	movs	r1, #60	@ 0x3c
 80010ec:	f00d fd98 	bl	800ec20 <HAL_I2C_Mem_Read_IT>
	HMC583L_IRQ = 1;
 80010f0:	4b04      	ldr	r3, [pc, #16]	@ (8001104 <HMC5883L_Get_Z_Start_IT+0x30>)
 80010f2:	2201      	movs	r2, #1
 80010f4:	701a      	strb	r2, [r3, #0]
}
 80010f6:	bf00      	nop
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	2400009c 	.word	0x2400009c
 8001100:	24000ec0 	.word	0x24000ec0
 8001104:	000041b5 	.word	0x000041b5

08001108 <HMC5883L_Get_Z_End_IT>:

int16_t HMC5883L_Get_Z_End_IT(void){
 8001108:	b480      	push	{r7}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
	int16_t fulldata = 0;
 800110e:	2300      	movs	r3, #0
 8001110:	80fb      	strh	r3, [r7, #6]

	fulldata = ((int16_t)HMC5883L_Data_IT[4]<<8) | HMC5883L_Data_IT[5];
 8001112:	4b08      	ldr	r3, [pc, #32]	@ (8001134 <HMC5883L_Get_Z_End_IT+0x2c>)
 8001114:	791b      	ldrb	r3, [r3, #4]
 8001116:	021b      	lsls	r3, r3, #8
 8001118:	b21a      	sxth	r2, r3
 800111a:	4b06      	ldr	r3, [pc, #24]	@ (8001134 <HMC5883L_Get_Z_End_IT+0x2c>)
 800111c:	795b      	ldrb	r3, [r3, #5]
 800111e:	b21b      	sxth	r3, r3
 8001120:	4313      	orrs	r3, r2
 8001122:	80fb      	strh	r3, [r7, #6]

	return fulldata;
 8001124:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001128:	4618      	mov	r0, r3
 800112a:	370c      	adds	r7, #12
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr
 8001134:	24000ec0 	.word	0x24000ec0

08001138 <HMC5883L_Calibration>:


int16_t HMC5883L_Calibration(void){
 8001138:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800113c:	b084      	sub	sp, #16
 800113e:	af00      	add	r7, sp, #0
	int64_t mes_data = 0;
 8001140:	f04f 0200 	mov.w	r2, #0
 8001144:	f04f 0300 	mov.w	r3, #0
 8001148:	e9c7 2302 	strd	r2, r3, [r7, #8]
	for(int i = 0; i < 10; i++){
 800114c:	2300      	movs	r3, #0
 800114e:	607b      	str	r3, [r7, #4]
 8001150:	e014      	b.n	800117c <HMC5883L_Calibration+0x44>
		mes_data += HMC5883L_Get_Z_Start();
 8001152:	f7ff ff9d 	bl	8001090 <HMC5883L_Get_Z_Start>
 8001156:	4603      	mov	r3, r0
 8001158:	b21b      	sxth	r3, r3
 800115a:	17da      	asrs	r2, r3, #31
 800115c:	461c      	mov	r4, r3
 800115e:	4615      	mov	r5, r2
 8001160:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001164:	eb12 0804 	adds.w	r8, r2, r4
 8001168:	eb43 0905 	adc.w	r9, r3, r5
 800116c:	e9c7 8902 	strd	r8, r9, [r7, #8]
		HAL_Delay(100); //Output = 30Hz
 8001170:	2064      	movs	r0, #100	@ 0x64
 8001172:	f008 f86f 	bl	8009254 <HAL_Delay>
	for(int i = 0; i < 10; i++){
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	3301      	adds	r3, #1
 800117a:	607b      	str	r3, [r7, #4]
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	2b09      	cmp	r3, #9
 8001180:	dde7      	ble.n	8001152 <HMC5883L_Calibration+0x1a>
	}

	return (mes_data/10);
 8001182:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001186:	f04f 020a 	mov.w	r2, #10
 800118a:	f04f 0300 	mov.w	r3, #0
 800118e:	f7ff f8bf 	bl	8000310 <__aeabi_ldivmod>
 8001192:	4602      	mov	r2, r0
 8001194:	460b      	mov	r3, r1
 8001196:	b213      	sxth	r3, r2
}
 8001198:	4618      	mov	r0, r3
 800119a:	3710      	adds	r7, #16
 800119c:	46bd      	mov	sp, r7
 800119e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

080011a4 <MPU6050_INIT>:
//extern float xval;
//extern float yval;
//extern float zval;


uint8_t MPU6050_INIT(I2C_HandleTypeDef*hi2c){
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b084      	sub	sp, #16
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
	hi2c_mpu6050 = hi2c;
 80011ac:	4a13      	ldr	r2, [pc, #76]	@ (80011fc <MPU6050_INIT+0x58>)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	6013      	str	r3, [r2, #0]
	MPU6050_RESET();
 80011b2:	f000 f825 	bl	8001200 <MPU6050_RESET>
	MPU6050_CONFIG_SAMPLE_RATE();
 80011b6:	f000 f88f 	bl	80012d8 <MPU6050_CONFIG_SAMPLE_RATE>
	MPU6050_CONFIG_DLPF(0x05);// //05
 80011ba:	2005      	movs	r0, #5
 80011bc:	f000 f838 	bl	8001230 <MPU6050_CONFIG_DLPF>
	/*
	 *  0 - 250 o/s
	 *  0x08 - 500 o/s
	 */
	MPU6050_CONFIG_GYRO(0x08);//+-500 o/s
 80011c0:	2008      	movs	r0, #8
 80011c2:	f000 f851 	bl	8001268 <MPU6050_CONFIG_GYRO>
	MPU6050_CONFIG_ACCEL(0x08); // +-4g
 80011c6:	2008      	movs	r0, #8
 80011c8:	f000 f86a 	bl	80012a0 <MPU6050_CONFIG_ACCEL>

	MPU6050_Enable_I2C_Bypass();
 80011cc:	f000 fd34 	bl	8001c38 <MPU6050_Enable_I2C_Bypass>
	MPU6050_CONFIG_USER_CONTROL();
 80011d0:	f000 f89a 	bl	8001308 <MPU6050_CONFIG_USER_CONTROL>

	HAL_Delay(10);
 80011d4:	200a      	movs	r0, #10
 80011d6:	f008 f83d 	bl	8009254 <HAL_Delay>

	uint8_t status;
	status = MPU6050_READ_ID();
 80011da:	f000 fd15 	bl	8001c08 <MPU6050_READ_ID>
 80011de:	4603      	mov	r3, r0
 80011e0:	73fb      	strb	r3, [r7, #15]

	if(status != 104){
 80011e2:	7bfb      	ldrb	r3, [r7, #15]
 80011e4:	2b68      	cmp	r3, #104	@ 0x68
 80011e6:	d002      	beq.n	80011ee <MPU6050_INIT+0x4a>
		status = 0;//error
 80011e8:	2300      	movs	r3, #0
 80011ea:	73fb      	strb	r3, [r7, #15]
 80011ec:	e001      	b.n	80011f2 <MPU6050_INIT+0x4e>
	}
	else{
		status = 1;//ok
 80011ee:	2301      	movs	r3, #1
 80011f0:	73fb      	strb	r3, [r7, #15]
//	int x = MPU6050_GET_ACCEL_FULLVALUE_X();
//	x = MPU6050_READ_CONFIG_SAMPLE_RATE();
//	x = MPU6050_READ_CONFIG_DLPF();//1kHz;
//	x = MPU6050_READ_CONFIG_GYRO();//+-500 o/s;
//	x = MPU6050_READ_CONFIG_ACCEL(); // +-8g;;
	return status;
 80011f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	3710      	adds	r7, #16
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	240000a0 	.word	0x240000a0

08001200 <MPU6050_RESET>:


void MPU6050_RESET(void){
 8001200:	b580      	push	{r7, lr}
 8001202:	b086      	sub	sp, #24
 8001204:	af04      	add	r7, sp, #16
	uint8_t data = 0x00;//0x80
 8001206:	2300      	movs	r3, #0
 8001208:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_PWR_MGMT_1, 1, &data, 1, 1);
 800120a:	4b08      	ldr	r3, [pc, #32]	@ (800122c <MPU6050_RESET+0x2c>)
 800120c:	6818      	ldr	r0, [r3, #0]
 800120e:	2301      	movs	r3, #1
 8001210:	9302      	str	r3, [sp, #8]
 8001212:	2301      	movs	r3, #1
 8001214:	9301      	str	r3, [sp, #4]
 8001216:	1dfb      	adds	r3, r7, #7
 8001218:	9300      	str	r3, [sp, #0]
 800121a:	2301      	movs	r3, #1
 800121c:	226b      	movs	r2, #107	@ 0x6b
 800121e:	21d0      	movs	r1, #208	@ 0xd0
 8001220:	f00d fa46 	bl	800e6b0 <HAL_I2C_Mem_Write>
}
 8001224:	bf00      	nop
 8001226:	3708      	adds	r7, #8
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	240000a0 	.word	0x240000a0

08001230 <MPU6050_CONFIG_DLPF>:

void MPU6050_CONFIG_DLPF(uint8_t DLPF_CFG){
 8001230:	b580      	push	{r7, lr}
 8001232:	b088      	sub	sp, #32
 8001234:	af04      	add	r7, sp, #16
 8001236:	4603      	mov	r3, r0
 8001238:	71fb      	strb	r3, [r7, #7]
	uint8_t data = DLPF_CFG;
 800123a:	79fb      	ldrb	r3, [r7, #7]
 800123c:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_CONFIG, 1, &data, 1, 1);
 800123e:	4b09      	ldr	r3, [pc, #36]	@ (8001264 <MPU6050_CONFIG_DLPF+0x34>)
 8001240:	6818      	ldr	r0, [r3, #0]
 8001242:	2301      	movs	r3, #1
 8001244:	9302      	str	r3, [sp, #8]
 8001246:	2301      	movs	r3, #1
 8001248:	9301      	str	r3, [sp, #4]
 800124a:	f107 030f 	add.w	r3, r7, #15
 800124e:	9300      	str	r3, [sp, #0]
 8001250:	2301      	movs	r3, #1
 8001252:	221a      	movs	r2, #26
 8001254:	21d0      	movs	r1, #208	@ 0xd0
 8001256:	f00d fa2b 	bl	800e6b0 <HAL_I2C_Mem_Write>
}
 800125a:	bf00      	nop
 800125c:	3710      	adds	r7, #16
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	240000a0 	.word	0x240000a0

08001268 <MPU6050_CONFIG_GYRO>:

void MPU6050_CONFIG_GYRO(uint8_t GYRO_CFG/*konfiguracja gyroskopy*/){
 8001268:	b580      	push	{r7, lr}
 800126a:	b088      	sub	sp, #32
 800126c:	af04      	add	r7, sp, #16
 800126e:	4603      	mov	r3, r0
 8001270:	71fb      	strb	r3, [r7, #7]
	uint8_t data = GYRO_CFG;
 8001272:	79fb      	ldrb	r3, [r7, #7]
 8001274:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_GYRO_CONFIG, 1, &data, 1, 1);
 8001276:	4b09      	ldr	r3, [pc, #36]	@ (800129c <MPU6050_CONFIG_GYRO+0x34>)
 8001278:	6818      	ldr	r0, [r3, #0]
 800127a:	2301      	movs	r3, #1
 800127c:	9302      	str	r3, [sp, #8]
 800127e:	2301      	movs	r3, #1
 8001280:	9301      	str	r3, [sp, #4]
 8001282:	f107 030f 	add.w	r3, r7, #15
 8001286:	9300      	str	r3, [sp, #0]
 8001288:	2301      	movs	r3, #1
 800128a:	221b      	movs	r2, #27
 800128c:	21d0      	movs	r1, #208	@ 0xd0
 800128e:	f00d fa0f 	bl	800e6b0 <HAL_I2C_Mem_Write>
}
 8001292:	bf00      	nop
 8001294:	3710      	adds	r7, #16
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	240000a0 	.word	0x240000a0

080012a0 <MPU6050_CONFIG_ACCEL>:

void MPU6050_CONFIG_ACCEL(uint8_t ACCEL_CFG/*konfiguracja akcelorometru*/){
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b088      	sub	sp, #32
 80012a4:	af04      	add	r7, sp, #16
 80012a6:	4603      	mov	r3, r0
 80012a8:	71fb      	strb	r3, [r7, #7]
	uint8_t data = ACCEL_CFG;
 80012aa:	79fb      	ldrb	r3, [r7, #7]
 80012ac:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_ACCEL_CONFIG, 1, &data, 1, 1);
 80012ae:	4b09      	ldr	r3, [pc, #36]	@ (80012d4 <MPU6050_CONFIG_ACCEL+0x34>)
 80012b0:	6818      	ldr	r0, [r3, #0]
 80012b2:	2301      	movs	r3, #1
 80012b4:	9302      	str	r3, [sp, #8]
 80012b6:	2301      	movs	r3, #1
 80012b8:	9301      	str	r3, [sp, #4]
 80012ba:	f107 030f 	add.w	r3, r7, #15
 80012be:	9300      	str	r3, [sp, #0]
 80012c0:	2301      	movs	r3, #1
 80012c2:	221c      	movs	r2, #28
 80012c4:	21d0      	movs	r1, #208	@ 0xd0
 80012c6:	f00d f9f3 	bl	800e6b0 <HAL_I2C_Mem_Write>
}
 80012ca:	bf00      	nop
 80012cc:	3710      	adds	r7, #16
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	240000a0 	.word	0x240000a0

080012d8 <MPU6050_CONFIG_SAMPLE_RATE>:
void MPU6050_CONFIG_INT(void){
	uint8_t data = 0x00;
	HAL_I2C_Mem_Write(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_INT_ENABLE, 1, &data, 1, 1);
}

void MPU6050_CONFIG_SAMPLE_RATE(void){
 80012d8:	b580      	push	{r7, lr}
 80012da:	b086      	sub	sp, #24
 80012dc:	af04      	add	r7, sp, #16
	uint8_t data = 0x00; // Sample Rate = Gyroscope Output Rate / (1 + SMPLRT_DIV)                 Gyroscope Output Rate = 1kHz
 80012de:	2300      	movs	r3, #0
 80012e0:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_SMPLRT_DIV, 1, &data, 1, 1);
 80012e2:	4b08      	ldr	r3, [pc, #32]	@ (8001304 <MPU6050_CONFIG_SAMPLE_RATE+0x2c>)
 80012e4:	6818      	ldr	r0, [r3, #0]
 80012e6:	2301      	movs	r3, #1
 80012e8:	9302      	str	r3, [sp, #8]
 80012ea:	2301      	movs	r3, #1
 80012ec:	9301      	str	r3, [sp, #4]
 80012ee:	1dfb      	adds	r3, r7, #7
 80012f0:	9300      	str	r3, [sp, #0]
 80012f2:	2301      	movs	r3, #1
 80012f4:	2219      	movs	r2, #25
 80012f6:	21d0      	movs	r1, #208	@ 0xd0
 80012f8:	f00d f9da 	bl	800e6b0 <HAL_I2C_Mem_Write>
}
 80012fc:	bf00      	nop
 80012fe:	3708      	adds	r7, #8
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	240000a0 	.word	0x240000a0

08001308 <MPU6050_CONFIG_USER_CONTROL>:
void MPU6050_CONFIG_INTERRUPT_ENABLE(void){
	uint8_t data = 0x00;
	HAL_I2C_Mem_Write(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_PWR_MGMT_2, 1, &data, 1, 1);
}

void MPU6050_CONFIG_USER_CONTROL(void){
 8001308:	b580      	push	{r7, lr}
 800130a:	b086      	sub	sp, #24
 800130c:	af04      	add	r7, sp, #16
	uint8_t data = 0x00;
 800130e:	2300      	movs	r3, #0
 8001310:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_USER_CTRL, 1, &data, 1, 1);
 8001312:	4b08      	ldr	r3, [pc, #32]	@ (8001334 <MPU6050_CONFIG_USER_CONTROL+0x2c>)
 8001314:	6818      	ldr	r0, [r3, #0]
 8001316:	2301      	movs	r3, #1
 8001318:	9302      	str	r3, [sp, #8]
 800131a:	2301      	movs	r3, #1
 800131c:	9301      	str	r3, [sp, #4]
 800131e:	1dfb      	adds	r3, r7, #7
 8001320:	9300      	str	r3, [sp, #0]
 8001322:	2301      	movs	r3, #1
 8001324:	226a      	movs	r2, #106	@ 0x6a
 8001326:	21d0      	movs	r1, #208	@ 0xd0
 8001328:	f00d f9c2 	bl	800e6b0 <HAL_I2C_Mem_Write>
}
 800132c:	bf00      	nop
 800132e:	3708      	adds	r7, #8
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	240000a0 	.word	0x240000a0

08001338 <MPU6050_CALIBRATION>:


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void MPU6050_CALIBRATION(float *accelx_cal,float *accely_cal,float*accelz_cal,float *gyrox_cal,float *gyroy_cal,
		float *gyroz_cal, float Gyr_Scale, float Acc_Scale){
 8001338:	b580      	push	{r7, lr}
 800133a:	b08e      	sub	sp, #56	@ 0x38
 800133c:	af00      	add	r7, sp, #0
 800133e:	6178      	str	r0, [r7, #20]
 8001340:	6139      	str	r1, [r7, #16]
 8001342:	60fa      	str	r2, [r7, #12]
 8001344:	60bb      	str	r3, [r7, #8]
 8001346:	ed87 0a01 	vstr	s0, [r7, #4]
 800134a:	edc7 0a00 	vstr	s1, [r7]

	float accelx = 0, accely = 0, accelz = 0, gyrox = 0, gyroy = 0, gyroz = 0;
 800134e:	f04f 0300 	mov.w	r3, #0
 8001352:	637b      	str	r3, [r7, #52]	@ 0x34
 8001354:	f04f 0300 	mov.w	r3, #0
 8001358:	633b      	str	r3, [r7, #48]	@ 0x30
 800135a:	f04f 0300 	mov.w	r3, #0
 800135e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001360:	f04f 0300 	mov.w	r3, #0
 8001364:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001366:	f04f 0300 	mov.w	r3, #0
 800136a:	627b      	str	r3, [r7, #36]	@ 0x24
 800136c:	f04f 0300 	mov.w	r3, #0
 8001370:	623b      	str	r3, [r7, #32]
	for(int i = 0; i < 1000; i++){ //5 sec
 8001372:	2300      	movs	r3, #0
 8001374:	61fb      	str	r3, [r7, #28]
 8001376:	e06b      	b.n	8001450 <MPU6050_CALIBRATION+0x118>
		  accelx = accelx + MPU6050_GET_ACCEL_FULLVALUE_X()/Acc_Scale;
 8001378:	f000 fbc2 	bl	8001b00 <MPU6050_GET_ACCEL_FULLVALUE_X>
 800137c:	4603      	mov	r3, r0
 800137e:	ee07 3a90 	vmov	s15, r3
 8001382:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001386:	ed97 7a00 	vldr	s14, [r7]
 800138a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800138e:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8001392:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001396:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
		  accely = accely + MPU6050_GET_ACCEL_FULLVALUE_Y()/Acc_Scale;
 800139a:	f000 fbd1 	bl	8001b40 <MPU6050_GET_ACCEL_FULLVALUE_Y>
 800139e:	4603      	mov	r3, r0
 80013a0:	ee07 3a90 	vmov	s15, r3
 80013a4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80013a8:	ed97 7a00 	vldr	s14, [r7]
 80013ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013b0:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 80013b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013b8:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
		  accelz = accelz + MPU6050_GET_ACCEL_FULLVALUE_Z()/Acc_Scale;
 80013bc:	f000 fbd4 	bl	8001b68 <MPU6050_GET_ACCEL_FULLVALUE_Z>
 80013c0:	4603      	mov	r3, r0
 80013c2:	ee07 3a90 	vmov	s15, r3
 80013c6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80013ca:	ed97 7a00 	vldr	s14, [r7]
 80013ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013d2:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80013d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013da:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

		  gyrox = gyrox + MPU6050_GET_GYRO_FULLVALUE_X()/Gyr_Scale;
 80013de:	f000 fbd7 	bl	8001b90 <MPU6050_GET_GYRO_FULLVALUE_X>
 80013e2:	4603      	mov	r3, r0
 80013e4:	ee07 3a90 	vmov	s15, r3
 80013e8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80013ec:	ed97 7a01 	vldr	s14, [r7, #4]
 80013f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013f4:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80013f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013fc:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
		  gyroy = gyroy + MPU6050_GET_GYRO_FULLVALUE_Y()/Gyr_Scale;
 8001400:	f000 fbda 	bl	8001bb8 <MPU6050_GET_GYRO_FULLVALUE_Y>
 8001404:	4603      	mov	r3, r0
 8001406:	ee07 3a90 	vmov	s15, r3
 800140a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800140e:	ed97 7a01 	vldr	s14, [r7, #4]
 8001412:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001416:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800141a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800141e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
		  gyroz = gyroz + MPU6050_GET_GYRO_FULLVALUE_Z()/Gyr_Scale;
 8001422:	f000 fbdd 	bl	8001be0 <MPU6050_GET_GYRO_FULLVALUE_Z>
 8001426:	4603      	mov	r3, r0
 8001428:	ee07 3a90 	vmov	s15, r3
 800142c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001430:	ed97 7a01 	vldr	s14, [r7, #4]
 8001434:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001438:	ed97 7a08 	vldr	s14, [r7, #32]
 800143c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001440:	edc7 7a08 	vstr	s15, [r7, #32]
		  HAL_Delay(1);
 8001444:	2001      	movs	r0, #1
 8001446:	f007 ff05 	bl	8009254 <HAL_Delay>
	for(int i = 0; i < 1000; i++){ //5 sec
 800144a:	69fb      	ldr	r3, [r7, #28]
 800144c:	3301      	adds	r3, #1
 800144e:	61fb      	str	r3, [r7, #28]
 8001450:	69fb      	ldr	r3, [r7, #28]
 8001452:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001456:	db8f      	blt.n	8001378 <MPU6050_CALIBRATION+0x40>
	}
	*accelx_cal = accelx/1000;
 8001458:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 800145c:	eddf 6a20 	vldr	s13, [pc, #128]	@ 80014e0 <MPU6050_CALIBRATION+0x1a8>
 8001460:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	edc3 7a00 	vstr	s15, [r3]
	*accely_cal = accely/1000;
 800146a:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 800146e:	eddf 6a1c 	vldr	s13, [pc, #112]	@ 80014e0 <MPU6050_CALIBRATION+0x1a8>
 8001472:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001476:	693b      	ldr	r3, [r7, #16]
 8001478:	edc3 7a00 	vstr	s15, [r3]
	*accelz_cal = accelz/1000;
 800147c:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8001480:	eddf 6a17 	vldr	s13, [pc, #92]	@ 80014e0 <MPU6050_CALIBRATION+0x1a8>
 8001484:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	edc3 7a00 	vstr	s15, [r3]

	*accelz_cal = 1 - *accelz_cal;
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	edd3 7a00 	vldr	s15, [r3]
 8001494:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001498:	ee77 7a67 	vsub.f32	s15, s14, s15
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	edc3 7a00 	vstr	s15, [r3]

	*gyrox_cal = gyrox/1000;
 80014a2:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80014a6:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 80014e0 <MPU6050_CALIBRATION+0x1a8>
 80014aa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014ae:	68bb      	ldr	r3, [r7, #8]
 80014b0:	edc3 7a00 	vstr	s15, [r3]
	*gyroy_cal = gyroy/1000;
 80014b4:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80014b8:	eddf 6a09 	vldr	s13, [pc, #36]	@ 80014e0 <MPU6050_CALIBRATION+0x1a8>
 80014bc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80014c2:	edc3 7a00 	vstr	s15, [r3]
	*gyroz_cal = gyroz/1000;
 80014c6:	ed97 7a08 	vldr	s14, [r7, #32]
 80014ca:	eddf 6a05 	vldr	s13, [pc, #20]	@ 80014e0 <MPU6050_CALIBRATION+0x1a8>
 80014ce:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80014d4:	edc3 7a00 	vstr	s15, [r3]
}
 80014d8:	bf00      	nop
 80014da:	3738      	adds	r7, #56	@ 0x38
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	447a0000 	.word	0x447a0000
 80014e4:	00000000 	.word	0x00000000

080014e8 <MPU6050_GET_ACCEL_TO_ANGLE>:

void MPU6050_GET_ACCEL_TO_ANGLE(float ax, float ay, float az, float *ax_ang, float *ay_ang/*, float *az_ang*/){
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b090      	sub	sp, #64	@ 0x40
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	ed87 0a05 	vstr	s0, [r7, #20]
 80014f2:	edc7 0a04 	vstr	s1, [r7, #16]
 80014f6:	ed87 1a03 	vstr	s2, [r7, #12]
 80014fa:	60b8      	str	r0, [r7, #8]
 80014fc:	6079      	str	r1, [r7, #4]
	double i = 0-1,axan,ayan;
 80014fe:	f04f 0200 	mov.w	r2, #0
 8001502:	4b37      	ldr	r3, [pc, #220]	@ (80015e0 <MPU6050_GET_ACCEL_TO_ANGLE+0xf8>)
 8001504:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
	double ang1 = sqrt((ax*ax)+(az*az));
 8001508:	edd7 7a05 	vldr	s15, [r7, #20]
 800150c:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001510:	edd7 7a03 	vldr	s15, [r7, #12]
 8001514:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001518:	ee77 7a27 	vadd.f32	s15, s14, s15
 800151c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001520:	eeb0 0b47 	vmov.f64	d0, d7
 8001524:	f01c fca4 	bl	801de70 <sqrt>
 8001528:	ed87 0b0c 	vstr	d0, [r7, #48]	@ 0x30
	double ang2 = sqrt((ay*ay)+(az*az));
 800152c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001530:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001534:	edd7 7a03 	vldr	s15, [r7, #12]
 8001538:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800153c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001540:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001544:	eeb0 0b47 	vmov.f64	d0, d7
 8001548:	f01c fc92 	bl	801de70 <sqrt>
 800154c:	ed87 0b0a 	vstr	d0, [r7, #40]	@ 0x28
	axan = atan2((ay*i), ang1);
 8001550:	edd7 7a04 	vldr	s15, [r7, #16]
 8001554:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001558:	ed97 7b0e 	vldr	d7, [r7, #56]	@ 0x38
 800155c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001560:	ed97 1b0c 	vldr	d1, [r7, #48]	@ 0x30
 8001564:	eeb0 0b47 	vmov.f64	d0, d7
 8001568:	f01c fc7e 	bl	801de68 <atan2>
 800156c:	ed87 0b08 	vstr	d0, [r7, #32]
	ayan= atan2(ax, ang2);
 8001570:	edd7 7a05 	vldr	s15, [r7, #20]
 8001574:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001578:	ed97 1b0a 	vldr	d1, [r7, #40]	@ 0x28
 800157c:	eeb0 0b47 	vmov.f64	d0, d7
 8001580:	f01c fc72 	bl	801de68 <atan2>
 8001584:	ed87 0b06 	vstr	d0, [r7, #24]

	*ax_ang = (axan*180)/M_PI;
 8001588:	ed97 7b08 	vldr	d7, [r7, #32]
 800158c:	ed9f 6b10 	vldr	d6, [pc, #64]	@ 80015d0 <MPU6050_GET_ACCEL_TO_ANGLE+0xe8>
 8001590:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001594:	ed9f 5b10 	vldr	d5, [pc, #64]	@ 80015d8 <MPU6050_GET_ACCEL_TO_ANGLE+0xf0>
 8001598:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800159c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80015a0:	68bb      	ldr	r3, [r7, #8]
 80015a2:	edc3 7a00 	vstr	s15, [r3]
	*ay_ang = (ayan*180)/M_PI;
 80015a6:	ed97 7b06 	vldr	d7, [r7, #24]
 80015aa:	ed9f 6b09 	vldr	d6, [pc, #36]	@ 80015d0 <MPU6050_GET_ACCEL_TO_ANGLE+0xe8>
 80015ae:	ee27 6b06 	vmul.f64	d6, d7, d6
 80015b2:	ed9f 5b09 	vldr	d5, [pc, #36]	@ 80015d8 <MPU6050_GET_ACCEL_TO_ANGLE+0xf0>
 80015b6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80015ba:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	edc3 7a00 	vstr	s15, [r3]
}
 80015c4:	bf00      	nop
 80015c6:	3740      	adds	r7, #64	@ 0x40
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	f3af 8000 	nop.w
 80015d0:	00000000 	.word	0x00000000
 80015d4:	40668000 	.word	0x40668000
 80015d8:	54442d18 	.word	0x54442d18
 80015dc:	400921fb 	.word	0x400921fb
 80015e0:	bff00000 	.word	0xbff00000

080015e4 <MPU6050_GET_ACCANDGYR_CALANDSCL>:
	*gy_ang = (gy/1000) + *gy_ang;
	*gz_ang = (gz/1000) + *gz_ang;
}

void MPU6050_GET_ACCANDGYR_CALANDSCL(float *ax, float*ay, float*az, float*gx, float*gy, float*gz, float accelx_cal,float accely_cal,
		float accelz_cal,float gyrox_cal,float gyroy_cal,float gyroz_cal, float Gyr_Scale, float Acc_Scale){
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b094      	sub	sp, #80	@ 0x50
 80015e8:	af04      	add	r7, sp, #16
 80015ea:	62f8      	str	r0, [r7, #44]	@ 0x2c
 80015ec:	62b9      	str	r1, [r7, #40]	@ 0x28
 80015ee:	627a      	str	r2, [r7, #36]	@ 0x24
 80015f0:	623b      	str	r3, [r7, #32]
 80015f2:	ed87 0a07 	vstr	s0, [r7, #28]
 80015f6:	edc7 0a06 	vstr	s1, [r7, #24]
 80015fa:	ed87 1a05 	vstr	s2, [r7, #20]
 80015fe:	edc7 1a04 	vstr	s3, [r7, #16]
 8001602:	ed87 2a03 	vstr	s4, [r7, #12]
 8001606:	edc7 2a02 	vstr	s5, [r7, #8]
 800160a:	ed87 3a01 	vstr	s6, [r7, #4]
 800160e:	edc7 3a00 	vstr	s7, [r7]

	uint8_t pdata[14];
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_ACCEL_XOUT_H, 1, pdata, 14, 1); // szybesz o ~1ms
 8001612:	4b4e      	ldr	r3, [pc, #312]	@ (800174c <MPU6050_GET_ACCANDGYR_CALANDSCL+0x168>)
 8001614:	6818      	ldr	r0, [r3, #0]
 8001616:	2301      	movs	r3, #1
 8001618:	9302      	str	r3, [sp, #8]
 800161a:	230e      	movs	r3, #14
 800161c:	9301      	str	r3, [sp, #4]
 800161e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001622:	9300      	str	r3, [sp, #0]
 8001624:	2301      	movs	r3, #1
 8001626:	223b      	movs	r2, #59	@ 0x3b
 8001628:	21d0      	movs	r1, #208	@ 0xd0
 800162a:	f00d f955 	bl	800e8d8 <HAL_I2C_Mem_Read>

	//HAL_I2C_Mem_Read_IT(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_ACCEL_XOUT_H, 1, pdata, 14);

	*ax = (((int16_t)(pdata[0]<<8) | pdata[1])/Acc_Scale) - accelx_cal;
 800162e:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001632:	021b      	lsls	r3, r3, #8
 8001634:	b21b      	sxth	r3, r3
 8001636:	461a      	mov	r2, r3
 8001638:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 800163c:	4313      	orrs	r3, r2
 800163e:	ee07 3a90 	vmov	s15, r3
 8001642:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001646:	edd7 7a00 	vldr	s15, [r7]
 800164a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800164e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001652:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001656:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001658:	edc3 7a00 	vstr	s15, [r3]
	*ay = (((int16_t)(pdata[2]<<8) | pdata[3])/Acc_Scale) - accely_cal;
 800165c:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8001660:	021b      	lsls	r3, r3, #8
 8001662:	b21b      	sxth	r3, r3
 8001664:	461a      	mov	r2, r3
 8001666:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800166a:	4313      	orrs	r3, r2
 800166c:	ee07 3a90 	vmov	s15, r3
 8001670:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001674:	edd7 7a00 	vldr	s15, [r7]
 8001678:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800167c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001680:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001684:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001686:	edc3 7a00 	vstr	s15, [r3]
	*az = (((int16_t)(pdata[4]<<8) | pdata[5])/Acc_Scale) + accelz_cal;
 800168a:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800168e:	021b      	lsls	r3, r3, #8
 8001690:	b21b      	sxth	r3, r3
 8001692:	461a      	mov	r2, r3
 8001694:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8001698:	4313      	orrs	r3, r2
 800169a:	ee07 3a90 	vmov	s15, r3
 800169e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80016a2:	edd7 7a00 	vldr	s15, [r7]
 80016a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80016aa:	edd7 7a05 	vldr	s15, [r7, #20]
 80016ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016b4:	edc3 7a00 	vstr	s15, [r3]

	*gx = (((int16_t)(pdata[8]<<8) | pdata[9])/Gyr_Scale) - gyrox_cal;
 80016b8:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 80016bc:	021b      	lsls	r3, r3, #8
 80016be:	b21b      	sxth	r3, r3
 80016c0:	461a      	mov	r2, r3
 80016c2:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80016c6:	4313      	orrs	r3, r2
 80016c8:	ee07 3a90 	vmov	s15, r3
 80016cc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80016d0:	edd7 7a01 	vldr	s15, [r7, #4]
 80016d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80016d8:	edd7 7a04 	vldr	s15, [r7, #16]
 80016dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016e0:	6a3b      	ldr	r3, [r7, #32]
 80016e2:	edc3 7a00 	vstr	s15, [r3]
	*gy = (((int16_t)(pdata[10]<<8) | pdata[11])/Gyr_Scale) - gyroy_cal;
 80016e6:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 80016ea:	021b      	lsls	r3, r3, #8
 80016ec:	b21b      	sxth	r3, r3
 80016ee:	461a      	mov	r2, r3
 80016f0:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 80016f4:	4313      	orrs	r3, r2
 80016f6:	ee07 3a90 	vmov	s15, r3
 80016fa:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80016fe:	edd7 7a01 	vldr	s15, [r7, #4]
 8001702:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001706:	edd7 7a03 	vldr	s15, [r7, #12]
 800170a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800170e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001710:	edc3 7a00 	vstr	s15, [r3]
	*gz = (((int16_t)(pdata[12]<<8) | pdata[13])/Gyr_Scale) - gyroz_cal;
 8001714:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8001718:	021b      	lsls	r3, r3, #8
 800171a:	b21b      	sxth	r3, r3
 800171c:	461a      	mov	r2, r3
 800171e:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8001722:	4313      	orrs	r3, r2
 8001724:	ee07 3a90 	vmov	s15, r3
 8001728:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800172c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001730:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001734:	edd7 7a02 	vldr	s15, [r7, #8]
 8001738:	ee77 7a67 	vsub.f32	s15, s14, s15
 800173c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800173e:	edc3 7a00 	vstr	s15, [r3]
//	  *az = (MPU6050_GET_ACCEL_FULLVALUE_Z()/Acc_Scale) + accelz_cal;
//
//	  *gx = (MPU6050_GET_GYRO_FULLVALUE_X()/Gyr_Scale) - gyrox_cal;
//	  *gy = (MPU6050_GET_GYRO_FULLVALUE_Y()/Gyr_Scale) - gyroy_cal;
//	  *gz = (MPU6050_GET_GYRO_FULLVALUE_Z()/Gyr_Scale) - gyroz_cal;
}
 8001742:	bf00      	nop
 8001744:	3740      	adds	r7, #64	@ 0x40
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	240000a0 	.word	0x240000a0

08001750 <MPU6050_GET_ACCANDGYR_CALANDSCL_IT>:

void MPU6050_GET_ACCANDGYR_CALANDSCL_IT(void){
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af02      	add	r7, sp, #8


	HAL_I2C_Mem_Read_IT(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_ACCEL_XOUT_H, 1, (uint8_t *)MPU6050_IT_DATA, 14);
 8001756:	4b08      	ldr	r3, [pc, #32]	@ (8001778 <MPU6050_GET_ACCANDGYR_CALANDSCL_IT+0x28>)
 8001758:	6818      	ldr	r0, [r3, #0]
 800175a:	230e      	movs	r3, #14
 800175c:	9301      	str	r3, [sp, #4]
 800175e:	4b07      	ldr	r3, [pc, #28]	@ (800177c <MPU6050_GET_ACCANDGYR_CALANDSCL_IT+0x2c>)
 8001760:	9300      	str	r3, [sp, #0]
 8001762:	2301      	movs	r3, #1
 8001764:	223b      	movs	r2, #59	@ 0x3b
 8001766:	21d0      	movs	r1, #208	@ 0xd0
 8001768:	f00d fa5a 	bl	800ec20 <HAL_I2C_Mem_Read_IT>
	MPU6050_IRQ = 1;
 800176c:	4b04      	ldr	r3, [pc, #16]	@ (8001780 <MPU6050_GET_ACCANDGYR_CALANDSCL_IT+0x30>)
 800176e:	2201      	movs	r2, #1
 8001770:	701a      	strb	r2, [r3, #0]


}
 8001772:	bf00      	nop
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	240000a0 	.word	0x240000a0
 800177c:	24000eb0 	.word	0x24000eb0
 8001780:	000041b4 	.word	0x000041b4

08001784 <MPU6050_GET_CALANDSCL_IT>:

void MPU6050_GET_CALANDSCL_IT(float *ax, float*ay, float*az, float*gx, float*gy, float*gz, float accelx_cal,float accely_cal,float accelz_cal,float gyrox_cal,float gyroy_cal,float gyroz_cal, float Gyr_Scale, float Acc_Scale){
 8001784:	b480      	push	{r7}
 8001786:	b08d      	sub	sp, #52	@ 0x34
 8001788:	af00      	add	r7, sp, #0
 800178a:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800178c:	62b9      	str	r1, [r7, #40]	@ 0x28
 800178e:	627a      	str	r2, [r7, #36]	@ 0x24
 8001790:	623b      	str	r3, [r7, #32]
 8001792:	ed87 0a07 	vstr	s0, [r7, #28]
 8001796:	edc7 0a06 	vstr	s1, [r7, #24]
 800179a:	ed87 1a05 	vstr	s2, [r7, #20]
 800179e:	edc7 1a04 	vstr	s3, [r7, #16]
 80017a2:	ed87 2a03 	vstr	s4, [r7, #12]
 80017a6:	edc7 2a02 	vstr	s5, [r7, #8]
 80017aa:	ed87 3a01 	vstr	s6, [r7, #4]
 80017ae:	edc7 3a00 	vstr	s7, [r7]
	*ax = (((int16_t)(MPU6050_IT_DATA[0]<<8) | MPU6050_IT_DATA[1])/Acc_Scale) - accelx_cal;
 80017b2:	4b48      	ldr	r3, [pc, #288]	@ (80018d4 <MPU6050_GET_CALANDSCL_IT+0x150>)
 80017b4:	781b      	ldrb	r3, [r3, #0]
 80017b6:	021b      	lsls	r3, r3, #8
 80017b8:	b21b      	sxth	r3, r3
 80017ba:	461a      	mov	r2, r3
 80017bc:	4b45      	ldr	r3, [pc, #276]	@ (80018d4 <MPU6050_GET_CALANDSCL_IT+0x150>)
 80017be:	785b      	ldrb	r3, [r3, #1]
 80017c0:	4313      	orrs	r3, r2
 80017c2:	ee07 3a90 	vmov	s15, r3
 80017c6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80017ca:	edd7 7a00 	vldr	s15, [r7]
 80017ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80017d2:	edd7 7a07 	vldr	s15, [r7, #28]
 80017d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017dc:	edc3 7a00 	vstr	s15, [r3]
	*ay = (((int16_t)(MPU6050_IT_DATA[2]<<8) | MPU6050_IT_DATA[3])/Acc_Scale) - accely_cal;
 80017e0:	4b3c      	ldr	r3, [pc, #240]	@ (80018d4 <MPU6050_GET_CALANDSCL_IT+0x150>)
 80017e2:	789b      	ldrb	r3, [r3, #2]
 80017e4:	021b      	lsls	r3, r3, #8
 80017e6:	b21b      	sxth	r3, r3
 80017e8:	461a      	mov	r2, r3
 80017ea:	4b3a      	ldr	r3, [pc, #232]	@ (80018d4 <MPU6050_GET_CALANDSCL_IT+0x150>)
 80017ec:	78db      	ldrb	r3, [r3, #3]
 80017ee:	4313      	orrs	r3, r2
 80017f0:	ee07 3a90 	vmov	s15, r3
 80017f4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80017f8:	edd7 7a00 	vldr	s15, [r7]
 80017fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001800:	edd7 7a06 	vldr	s15, [r7, #24]
 8001804:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001808:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800180a:	edc3 7a00 	vstr	s15, [r3]
	*az = (((int16_t)(MPU6050_IT_DATA[4]<<8) | MPU6050_IT_DATA[5])/Acc_Scale) + accelz_cal;
 800180e:	4b31      	ldr	r3, [pc, #196]	@ (80018d4 <MPU6050_GET_CALANDSCL_IT+0x150>)
 8001810:	791b      	ldrb	r3, [r3, #4]
 8001812:	021b      	lsls	r3, r3, #8
 8001814:	b21b      	sxth	r3, r3
 8001816:	461a      	mov	r2, r3
 8001818:	4b2e      	ldr	r3, [pc, #184]	@ (80018d4 <MPU6050_GET_CALANDSCL_IT+0x150>)
 800181a:	795b      	ldrb	r3, [r3, #5]
 800181c:	4313      	orrs	r3, r2
 800181e:	ee07 3a90 	vmov	s15, r3
 8001822:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001826:	edd7 7a00 	vldr	s15, [r7]
 800182a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800182e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001832:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001838:	edc3 7a00 	vstr	s15, [r3]

	*gx = (((int16_t)(MPU6050_IT_DATA[8]<<8) | MPU6050_IT_DATA[9])/Gyr_Scale) - gyrox_cal;
 800183c:	4b25      	ldr	r3, [pc, #148]	@ (80018d4 <MPU6050_GET_CALANDSCL_IT+0x150>)
 800183e:	7a1b      	ldrb	r3, [r3, #8]
 8001840:	021b      	lsls	r3, r3, #8
 8001842:	b21b      	sxth	r3, r3
 8001844:	461a      	mov	r2, r3
 8001846:	4b23      	ldr	r3, [pc, #140]	@ (80018d4 <MPU6050_GET_CALANDSCL_IT+0x150>)
 8001848:	7a5b      	ldrb	r3, [r3, #9]
 800184a:	4313      	orrs	r3, r2
 800184c:	ee07 3a90 	vmov	s15, r3
 8001850:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001854:	edd7 7a01 	vldr	s15, [r7, #4]
 8001858:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800185c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001860:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001864:	6a3b      	ldr	r3, [r7, #32]
 8001866:	edc3 7a00 	vstr	s15, [r3]
	*gy = (((int16_t)(MPU6050_IT_DATA[10]<<8) | MPU6050_IT_DATA[11])/Gyr_Scale) - gyroy_cal;
 800186a:	4b1a      	ldr	r3, [pc, #104]	@ (80018d4 <MPU6050_GET_CALANDSCL_IT+0x150>)
 800186c:	7a9b      	ldrb	r3, [r3, #10]
 800186e:	021b      	lsls	r3, r3, #8
 8001870:	b21b      	sxth	r3, r3
 8001872:	461a      	mov	r2, r3
 8001874:	4b17      	ldr	r3, [pc, #92]	@ (80018d4 <MPU6050_GET_CALANDSCL_IT+0x150>)
 8001876:	7adb      	ldrb	r3, [r3, #11]
 8001878:	4313      	orrs	r3, r2
 800187a:	ee07 3a90 	vmov	s15, r3
 800187e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001882:	edd7 7a01 	vldr	s15, [r7, #4]
 8001886:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800188a:	edd7 7a03 	vldr	s15, [r7, #12]
 800188e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001892:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001894:	edc3 7a00 	vstr	s15, [r3]
	*gz = (((int16_t)(MPU6050_IT_DATA[12]<<8) | MPU6050_IT_DATA[13])/Gyr_Scale) - gyroz_cal;
 8001898:	4b0e      	ldr	r3, [pc, #56]	@ (80018d4 <MPU6050_GET_CALANDSCL_IT+0x150>)
 800189a:	7b1b      	ldrb	r3, [r3, #12]
 800189c:	021b      	lsls	r3, r3, #8
 800189e:	b21b      	sxth	r3, r3
 80018a0:	461a      	mov	r2, r3
 80018a2:	4b0c      	ldr	r3, [pc, #48]	@ (80018d4 <MPU6050_GET_CALANDSCL_IT+0x150>)
 80018a4:	7b5b      	ldrb	r3, [r3, #13]
 80018a6:	4313      	orrs	r3, r2
 80018a8:	ee07 3a90 	vmov	s15, r3
 80018ac:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80018b0:	edd7 7a01 	vldr	s15, [r7, #4]
 80018b4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80018b8:	edd7 7a02 	vldr	s15, [r7, #8]
 80018bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80018c2:	edc3 7a00 	vstr	s15, [r3]
}
 80018c6:	bf00      	nop
 80018c8:	3734      	adds	r7, #52	@ 0x34
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr
 80018d2:	bf00      	nop
 80018d4:	24000eb0 	.word	0x24000eb0

080018d8 <MPU6050_GET_ACCANDGYR_FILTRED>:

void MPU6050_GET_ACCANDGYR_FILTRED(Complementary_Filter *Complementary_Filter_st, float ax_ang, float ay_ang, float megz_ang, float gx_ang,
		float gy_ang, float gz_ang){
 80018d8:	b580      	push	{r7, lr}
 80018da:	b088      	sub	sp, #32
 80018dc:	af00      	add	r7, sp, #0
 80018de:	61f8      	str	r0, [r7, #28]
 80018e0:	ed87 0a06 	vstr	s0, [r7, #24]
 80018e4:	edc7 0a05 	vstr	s1, [r7, #20]
 80018e8:	ed87 1a04 	vstr	s2, [r7, #16]
 80018ec:	edc7 1a03 	vstr	s3, [r7, #12]
 80018f0:	ed87 2a02 	vstr	s4, [r7, #8]
 80018f4:	edc7 2a01 	vstr	s5, [r7, #4]
	Complementary_getFilter(Complementary_Filter_st, ax_ang, ay_ang, megz_ang, gx_ang, gy_ang, gz_ang);
 80018f8:	edd7 2a01 	vldr	s5, [r7, #4]
 80018fc:	ed97 2a02 	vldr	s4, [r7, #8]
 8001900:	edd7 1a03 	vldr	s3, [r7, #12]
 8001904:	ed97 1a04 	vldr	s2, [r7, #16]
 8001908:	edd7 0a05 	vldr	s1, [r7, #20]
 800190c:	ed97 0a06 	vldr	s0, [r7, #24]
 8001910:	69f8      	ldr	r0, [r7, #28]
 8001912:	f000 f9a9 	bl	8001c68 <Complementary_getFilter>
	//W_Filter(Complementary_Filter_st);
}
 8001916:	bf00      	nop
 8001918:	3720      	adds	r7, #32
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
	...

08001920 <MPU6050_GET_ACCEL_YH>:
uint8_t MPU6050_GET_ACCEL_XL(void){
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_ACCEL_XOUT_L, 1, &data, 1, 1);
	return data;
}
uint8_t MPU6050_GET_ACCEL_YH(void){
 8001920:	b580      	push	{r7, lr}
 8001922:	b086      	sub	sp, #24
 8001924:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_ACCEL_YOUT_H, 1, &data, 1, 1);
 8001926:	4b09      	ldr	r3, [pc, #36]	@ (800194c <MPU6050_GET_ACCEL_YH+0x2c>)
 8001928:	6818      	ldr	r0, [r3, #0]
 800192a:	2301      	movs	r3, #1
 800192c:	9302      	str	r3, [sp, #8]
 800192e:	2301      	movs	r3, #1
 8001930:	9301      	str	r3, [sp, #4]
 8001932:	1dfb      	adds	r3, r7, #7
 8001934:	9300      	str	r3, [sp, #0]
 8001936:	2301      	movs	r3, #1
 8001938:	223d      	movs	r2, #61	@ 0x3d
 800193a:	21d0      	movs	r1, #208	@ 0xd0
 800193c:	f00c ffcc 	bl	800e8d8 <HAL_I2C_Mem_Read>
	return data;
 8001940:	79fb      	ldrb	r3, [r7, #7]
}
 8001942:	4618      	mov	r0, r3
 8001944:	3708      	adds	r7, #8
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	240000a0 	.word	0x240000a0

08001950 <MPU6050_GET_ACCEL_YL>:
uint8_t MPU6050_GET_ACCEL_YL(void){
 8001950:	b580      	push	{r7, lr}
 8001952:	b086      	sub	sp, #24
 8001954:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_ACCEL_YOUT_L, 1, &data, 1, 1);
 8001956:	4b09      	ldr	r3, [pc, #36]	@ (800197c <MPU6050_GET_ACCEL_YL+0x2c>)
 8001958:	6818      	ldr	r0, [r3, #0]
 800195a:	2301      	movs	r3, #1
 800195c:	9302      	str	r3, [sp, #8]
 800195e:	2301      	movs	r3, #1
 8001960:	9301      	str	r3, [sp, #4]
 8001962:	1dfb      	adds	r3, r7, #7
 8001964:	9300      	str	r3, [sp, #0]
 8001966:	2301      	movs	r3, #1
 8001968:	223e      	movs	r2, #62	@ 0x3e
 800196a:	21d0      	movs	r1, #208	@ 0xd0
 800196c:	f00c ffb4 	bl	800e8d8 <HAL_I2C_Mem_Read>
	return data;
 8001970:	79fb      	ldrb	r3, [r7, #7]
}
 8001972:	4618      	mov	r0, r3
 8001974:	3708      	adds	r7, #8
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	240000a0 	.word	0x240000a0

08001980 <MPU6050_GET_ACCEL_ZH>:
uint8_t MPU6050_GET_ACCEL_ZH(void){
 8001980:	b580      	push	{r7, lr}
 8001982:	b086      	sub	sp, #24
 8001984:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_ACCEL_ZOUT_H, 1, &data, 1, 1);
 8001986:	4b09      	ldr	r3, [pc, #36]	@ (80019ac <MPU6050_GET_ACCEL_ZH+0x2c>)
 8001988:	6818      	ldr	r0, [r3, #0]
 800198a:	2301      	movs	r3, #1
 800198c:	9302      	str	r3, [sp, #8]
 800198e:	2301      	movs	r3, #1
 8001990:	9301      	str	r3, [sp, #4]
 8001992:	1dfb      	adds	r3, r7, #7
 8001994:	9300      	str	r3, [sp, #0]
 8001996:	2301      	movs	r3, #1
 8001998:	223f      	movs	r2, #63	@ 0x3f
 800199a:	21d0      	movs	r1, #208	@ 0xd0
 800199c:	f00c ff9c 	bl	800e8d8 <HAL_I2C_Mem_Read>
	return data;
 80019a0:	79fb      	ldrb	r3, [r7, #7]
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	3708      	adds	r7, #8
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	240000a0 	.word	0x240000a0

080019b0 <MPU6050_GET_ACCEL_ZL>:
uint8_t MPU6050_GET_ACCEL_ZL(void){
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b086      	sub	sp, #24
 80019b4:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_ACCEL_ZOUT_L, 1, &data, 1, 1);
 80019b6:	4b09      	ldr	r3, [pc, #36]	@ (80019dc <MPU6050_GET_ACCEL_ZL+0x2c>)
 80019b8:	6818      	ldr	r0, [r3, #0]
 80019ba:	2301      	movs	r3, #1
 80019bc:	9302      	str	r3, [sp, #8]
 80019be:	2301      	movs	r3, #1
 80019c0:	9301      	str	r3, [sp, #4]
 80019c2:	1dfb      	adds	r3, r7, #7
 80019c4:	9300      	str	r3, [sp, #0]
 80019c6:	2301      	movs	r3, #1
 80019c8:	2240      	movs	r2, #64	@ 0x40
 80019ca:	21d0      	movs	r1, #208	@ 0xd0
 80019cc:	f00c ff84 	bl	800e8d8 <HAL_I2C_Mem_Read>
	return data;
 80019d0:	79fb      	ldrb	r3, [r7, #7]
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	3708      	adds	r7, #8
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	240000a0 	.word	0x240000a0

080019e0 <MPU6050_GET_GYRO_XH>:

uint8_t MPU6050_GET_GYRO_XH(void){
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b086      	sub	sp, #24
 80019e4:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_GYRO_XOUT_H, 1, &data, 1, 1);
 80019e6:	4b09      	ldr	r3, [pc, #36]	@ (8001a0c <MPU6050_GET_GYRO_XH+0x2c>)
 80019e8:	6818      	ldr	r0, [r3, #0]
 80019ea:	2301      	movs	r3, #1
 80019ec:	9302      	str	r3, [sp, #8]
 80019ee:	2301      	movs	r3, #1
 80019f0:	9301      	str	r3, [sp, #4]
 80019f2:	1dfb      	adds	r3, r7, #7
 80019f4:	9300      	str	r3, [sp, #0]
 80019f6:	2301      	movs	r3, #1
 80019f8:	2243      	movs	r2, #67	@ 0x43
 80019fa:	21d0      	movs	r1, #208	@ 0xd0
 80019fc:	f00c ff6c 	bl	800e8d8 <HAL_I2C_Mem_Read>
	return data;
 8001a00:	79fb      	ldrb	r3, [r7, #7]
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	3708      	adds	r7, #8
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	240000a0 	.word	0x240000a0

08001a10 <MPU6050_GET_GYRO_XL>:
uint8_t MPU6050_GET_GYRO_XL(void){
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b086      	sub	sp, #24
 8001a14:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_GYRO_XOUT_L, 1, &data, 1, 1);
 8001a16:	4b09      	ldr	r3, [pc, #36]	@ (8001a3c <MPU6050_GET_GYRO_XL+0x2c>)
 8001a18:	6818      	ldr	r0, [r3, #0]
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	9302      	str	r3, [sp, #8]
 8001a1e:	2301      	movs	r3, #1
 8001a20:	9301      	str	r3, [sp, #4]
 8001a22:	1dfb      	adds	r3, r7, #7
 8001a24:	9300      	str	r3, [sp, #0]
 8001a26:	2301      	movs	r3, #1
 8001a28:	2244      	movs	r2, #68	@ 0x44
 8001a2a:	21d0      	movs	r1, #208	@ 0xd0
 8001a2c:	f00c ff54 	bl	800e8d8 <HAL_I2C_Mem_Read>
	return data;
 8001a30:	79fb      	ldrb	r3, [r7, #7]
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	3708      	adds	r7, #8
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	240000a0 	.word	0x240000a0

08001a40 <MPU6050_GET_GYRO_YH>:
uint8_t MPU6050_GET_GYRO_YH(void){
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b086      	sub	sp, #24
 8001a44:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_GYRO_YOUT_H, 1, &data, 1, 1);
 8001a46:	4b09      	ldr	r3, [pc, #36]	@ (8001a6c <MPU6050_GET_GYRO_YH+0x2c>)
 8001a48:	6818      	ldr	r0, [r3, #0]
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	9302      	str	r3, [sp, #8]
 8001a4e:	2301      	movs	r3, #1
 8001a50:	9301      	str	r3, [sp, #4]
 8001a52:	1dfb      	adds	r3, r7, #7
 8001a54:	9300      	str	r3, [sp, #0]
 8001a56:	2301      	movs	r3, #1
 8001a58:	2245      	movs	r2, #69	@ 0x45
 8001a5a:	21d0      	movs	r1, #208	@ 0xd0
 8001a5c:	f00c ff3c 	bl	800e8d8 <HAL_I2C_Mem_Read>
	return data;
 8001a60:	79fb      	ldrb	r3, [r7, #7]
}
 8001a62:	4618      	mov	r0, r3
 8001a64:	3708      	adds	r7, #8
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	240000a0 	.word	0x240000a0

08001a70 <MPU6050_GET_GYRO_YL>:
uint8_t MPU6050_GET_GYRO_YL(void){
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b086      	sub	sp, #24
 8001a74:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_GYRO_YOUT_L, 1, &data, 1, 1);
 8001a76:	4b09      	ldr	r3, [pc, #36]	@ (8001a9c <MPU6050_GET_GYRO_YL+0x2c>)
 8001a78:	6818      	ldr	r0, [r3, #0]
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	9302      	str	r3, [sp, #8]
 8001a7e:	2301      	movs	r3, #1
 8001a80:	9301      	str	r3, [sp, #4]
 8001a82:	1dfb      	adds	r3, r7, #7
 8001a84:	9300      	str	r3, [sp, #0]
 8001a86:	2301      	movs	r3, #1
 8001a88:	2246      	movs	r2, #70	@ 0x46
 8001a8a:	21d0      	movs	r1, #208	@ 0xd0
 8001a8c:	f00c ff24 	bl	800e8d8 <HAL_I2C_Mem_Read>
	return data;
 8001a90:	79fb      	ldrb	r3, [r7, #7]
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3708      	adds	r7, #8
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	240000a0 	.word	0x240000a0

08001aa0 <MPU6050_GET_GYRO_ZH>:
uint8_t MPU6050_GET_GYRO_ZH(void){
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b086      	sub	sp, #24
 8001aa4:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_GYRO_ZOUT_H, 1, &data, 1, 1);
 8001aa6:	4b09      	ldr	r3, [pc, #36]	@ (8001acc <MPU6050_GET_GYRO_ZH+0x2c>)
 8001aa8:	6818      	ldr	r0, [r3, #0]
 8001aaa:	2301      	movs	r3, #1
 8001aac:	9302      	str	r3, [sp, #8]
 8001aae:	2301      	movs	r3, #1
 8001ab0:	9301      	str	r3, [sp, #4]
 8001ab2:	1dfb      	adds	r3, r7, #7
 8001ab4:	9300      	str	r3, [sp, #0]
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	2247      	movs	r2, #71	@ 0x47
 8001aba:	21d0      	movs	r1, #208	@ 0xd0
 8001abc:	f00c ff0c 	bl	800e8d8 <HAL_I2C_Mem_Read>
	return data;
 8001ac0:	79fb      	ldrb	r3, [r7, #7]
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3708      	adds	r7, #8
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	240000a0 	.word	0x240000a0

08001ad0 <MPU6050_GET_GYRO_ZL>:
uint8_t MPU6050_GET_GYRO_ZL(void){
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b086      	sub	sp, #24
 8001ad4:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_GYRO_ZOUT_L, 1, &data, 1, 1);
 8001ad6:	4b09      	ldr	r3, [pc, #36]	@ (8001afc <MPU6050_GET_GYRO_ZL+0x2c>)
 8001ad8:	6818      	ldr	r0, [r3, #0]
 8001ada:	2301      	movs	r3, #1
 8001adc:	9302      	str	r3, [sp, #8]
 8001ade:	2301      	movs	r3, #1
 8001ae0:	9301      	str	r3, [sp, #4]
 8001ae2:	1dfb      	adds	r3, r7, #7
 8001ae4:	9300      	str	r3, [sp, #0]
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	2248      	movs	r2, #72	@ 0x48
 8001aea:	21d0      	movs	r1, #208	@ 0xd0
 8001aec:	f00c fef4 	bl	800e8d8 <HAL_I2C_Mem_Read>
	return data;
 8001af0:	79fb      	ldrb	r3, [r7, #7]
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3708      	adds	r7, #8
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	240000a0 	.word	0x240000a0

08001b00 <MPU6050_GET_ACCEL_FULLVALUE_X>:
int16_t MPU6050_GET_ACCEL_FULLVALUE_X(void){
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b086      	sub	sp, #24
 8001b04:	af04      	add	r7, sp, #16
	int16_t data;
	uint8_t pdata[2];

	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_ACCEL_XOUT_H, 1, pdata, 2, 1);
 8001b06:	4b0d      	ldr	r3, [pc, #52]	@ (8001b3c <MPU6050_GET_ACCEL_FULLVALUE_X+0x3c>)
 8001b08:	6818      	ldr	r0, [r3, #0]
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	9302      	str	r3, [sp, #8]
 8001b0e:	2302      	movs	r3, #2
 8001b10:	9301      	str	r3, [sp, #4]
 8001b12:	1d3b      	adds	r3, r7, #4
 8001b14:	9300      	str	r3, [sp, #0]
 8001b16:	2301      	movs	r3, #1
 8001b18:	223b      	movs	r2, #59	@ 0x3b
 8001b1a:	21d0      	movs	r1, #208	@ 0xd0
 8001b1c:	f00c fedc 	bl	800e8d8 <HAL_I2C_Mem_Read>

	data = (pdata[0]<<8)|pdata[1];
 8001b20:	793b      	ldrb	r3, [r7, #4]
 8001b22:	021b      	lsls	r3, r3, #8
 8001b24:	b21a      	sxth	r2, r3
 8001b26:	797b      	ldrb	r3, [r7, #5]
 8001b28:	b21b      	sxth	r3, r3
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	80fb      	strh	r3, [r7, #6]
	return data;
 8001b2e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	3708      	adds	r7, #8
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	240000a0 	.word	0x240000a0

08001b40 <MPU6050_GET_ACCEL_FULLVALUE_Y>:

int16_t MPU6050_GET_ACCEL_FULLVALUE_Y(void){
 8001b40:	b590      	push	{r4, r7, lr}
 8001b42:	b083      	sub	sp, #12
 8001b44:	af00      	add	r7, sp, #0
	int16_t data;
	data = (MPU6050_GET_ACCEL_YH()<<8)|MPU6050_GET_ACCEL_YL();
 8001b46:	f7ff feeb 	bl	8001920 <MPU6050_GET_ACCEL_YH>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	021b      	lsls	r3, r3, #8
 8001b4e:	b21c      	sxth	r4, r3
 8001b50:	f7ff fefe 	bl	8001950 <MPU6050_GET_ACCEL_YL>
 8001b54:	4603      	mov	r3, r0
 8001b56:	b21b      	sxth	r3, r3
 8001b58:	4323      	orrs	r3, r4
 8001b5a:	80fb      	strh	r3, [r7, #6]
	return data;
 8001b5c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	370c      	adds	r7, #12
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd90      	pop	{r4, r7, pc}

08001b68 <MPU6050_GET_ACCEL_FULLVALUE_Z>:
int16_t MPU6050_GET_ACCEL_FULLVALUE_Z(void){
 8001b68:	b590      	push	{r4, r7, lr}
 8001b6a:	b083      	sub	sp, #12
 8001b6c:	af00      	add	r7, sp, #0
	int16_t data;
	data = (MPU6050_GET_ACCEL_ZH()<<8)|MPU6050_GET_ACCEL_ZL();
 8001b6e:	f7ff ff07 	bl	8001980 <MPU6050_GET_ACCEL_ZH>
 8001b72:	4603      	mov	r3, r0
 8001b74:	021b      	lsls	r3, r3, #8
 8001b76:	b21c      	sxth	r4, r3
 8001b78:	f7ff ff1a 	bl	80019b0 <MPU6050_GET_ACCEL_ZL>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	b21b      	sxth	r3, r3
 8001b80:	4323      	orrs	r3, r4
 8001b82:	80fb      	strh	r3, [r7, #6]
	return data;
 8001b84:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	370c      	adds	r7, #12
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd90      	pop	{r4, r7, pc}

08001b90 <MPU6050_GET_GYRO_FULLVALUE_X>:

int16_t MPU6050_GET_GYRO_FULLVALUE_X(void){
 8001b90:	b590      	push	{r4, r7, lr}
 8001b92:	b083      	sub	sp, #12
 8001b94:	af00      	add	r7, sp, #0
	int16_t data;
	data = (MPU6050_GET_GYRO_XH()<<8)|MPU6050_GET_GYRO_XL();
 8001b96:	f7ff ff23 	bl	80019e0 <MPU6050_GET_GYRO_XH>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	021b      	lsls	r3, r3, #8
 8001b9e:	b21c      	sxth	r4, r3
 8001ba0:	f7ff ff36 	bl	8001a10 <MPU6050_GET_GYRO_XL>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	b21b      	sxth	r3, r3
 8001ba8:	4323      	orrs	r3, r4
 8001baa:	80fb      	strh	r3, [r7, #6]
	return data;
 8001bac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	370c      	adds	r7, #12
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd90      	pop	{r4, r7, pc}

08001bb8 <MPU6050_GET_GYRO_FULLVALUE_Y>:
int16_t MPU6050_GET_GYRO_FULLVALUE_Y(void){
 8001bb8:	b590      	push	{r4, r7, lr}
 8001bba:	b083      	sub	sp, #12
 8001bbc:	af00      	add	r7, sp, #0
	int16_t data;
	data = (MPU6050_GET_GYRO_YH()<<8)|MPU6050_GET_GYRO_YL();
 8001bbe:	f7ff ff3f 	bl	8001a40 <MPU6050_GET_GYRO_YH>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	021b      	lsls	r3, r3, #8
 8001bc6:	b21c      	sxth	r4, r3
 8001bc8:	f7ff ff52 	bl	8001a70 <MPU6050_GET_GYRO_YL>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	b21b      	sxth	r3, r3
 8001bd0:	4323      	orrs	r3, r4
 8001bd2:	80fb      	strh	r3, [r7, #6]
	return data;
 8001bd4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	370c      	adds	r7, #12
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd90      	pop	{r4, r7, pc}

08001be0 <MPU6050_GET_GYRO_FULLVALUE_Z>:
int16_t MPU6050_GET_GYRO_FULLVALUE_Z(void){
 8001be0:	b590      	push	{r4, r7, lr}
 8001be2:	b083      	sub	sp, #12
 8001be4:	af00      	add	r7, sp, #0
	int16_t data;
	data = (MPU6050_GET_GYRO_ZH()<<8)|MPU6050_GET_GYRO_ZL();
 8001be6:	f7ff ff5b 	bl	8001aa0 <MPU6050_GET_GYRO_ZH>
 8001bea:	4603      	mov	r3, r0
 8001bec:	021b      	lsls	r3, r3, #8
 8001bee:	b21c      	sxth	r4, r3
 8001bf0:	f7ff ff6e 	bl	8001ad0 <MPU6050_GET_GYRO_ZL>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	b21b      	sxth	r3, r3
 8001bf8:	4323      	orrs	r3, r4
 8001bfa:	80fb      	strh	r3, [r7, #6]
	return data;
 8001bfc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	370c      	adds	r7, #12
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd90      	pop	{r4, r7, pc}

08001c08 <MPU6050_READ_ID>:

int8_t MPU6050_READ_ID(void){
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b086      	sub	sp, #24
 8001c0c:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_WHO_AM_I, 1, &data, 1, 1);
 8001c0e:	4b09      	ldr	r3, [pc, #36]	@ (8001c34 <MPU6050_READ_ID+0x2c>)
 8001c10:	6818      	ldr	r0, [r3, #0]
 8001c12:	2301      	movs	r3, #1
 8001c14:	9302      	str	r3, [sp, #8]
 8001c16:	2301      	movs	r3, #1
 8001c18:	9301      	str	r3, [sp, #4]
 8001c1a:	1dfb      	adds	r3, r7, #7
 8001c1c:	9300      	str	r3, [sp, #0]
 8001c1e:	2301      	movs	r3, #1
 8001c20:	2275      	movs	r2, #117	@ 0x75
 8001c22:	21d0      	movs	r1, #208	@ 0xd0
 8001c24:	f00c fe58 	bl	800e8d8 <HAL_I2C_Mem_Read>
	return data;
 8001c28:	79fb      	ldrb	r3, [r7, #7]
 8001c2a:	b25b      	sxtb	r3, r3
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	3708      	adds	r7, #8
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	240000a0 	.word	0x240000a0

08001c38 <MPU6050_Enable_I2C_Bypass>:
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_USER_CTRL, 1, &data, 1, 1);
	return data;
}


void MPU6050_Enable_I2C_Bypass(void){
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b086      	sub	sp, #24
 8001c3c:	af04      	add	r7, sp, #16
	uint8_t data = 0x02;
 8001c3e:	2302      	movs	r3, #2
 8001c40:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_INT_PIN_CFG, 1, &data, 1, 1);
 8001c42:	4b08      	ldr	r3, [pc, #32]	@ (8001c64 <MPU6050_Enable_I2C_Bypass+0x2c>)
 8001c44:	6818      	ldr	r0, [r3, #0]
 8001c46:	2301      	movs	r3, #1
 8001c48:	9302      	str	r3, [sp, #8]
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	9301      	str	r3, [sp, #4]
 8001c4e:	1dfb      	adds	r3, r7, #7
 8001c50:	9300      	str	r3, [sp, #0]
 8001c52:	2301      	movs	r3, #1
 8001c54:	2237      	movs	r2, #55	@ 0x37
 8001c56:	21d0      	movs	r1, #208	@ 0xd0
 8001c58:	f00c fd2a 	bl	800e6b0 <HAL_I2C_Mem_Write>
}
 8001c5c:	bf00      	nop
 8001c5e:	3708      	adds	r7, #8
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	240000a0 	.word	0x240000a0

08001c68 <Complementary_getFilter>:

    return Kalman->angle;
};


void Complementary_getFilter(Complementary_Filter *Complementary_Filter_st,float ax_ang, float ay_ang, float magz_ang, float gx_ang, float gy_ang, float gz_ang){
 8001c68:	b480      	push	{r7}
 8001c6a:	b089      	sub	sp, #36	@ 0x24
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	61f8      	str	r0, [r7, #28]
 8001c70:	ed87 0a06 	vstr	s0, [r7, #24]
 8001c74:	edc7 0a05 	vstr	s1, [r7, #20]
 8001c78:	ed87 1a04 	vstr	s2, [r7, #16]
 8001c7c:	edc7 1a03 	vstr	s3, [r7, #12]
 8001c80:	ed87 2a02 	vstr	s4, [r7, #8]
 8001c84:	edc7 2a01 	vstr	s5, [r7, #4]

		Complementary_Filter_st->x = (0.02*ax_ang*(-1))+(0.98*((gx_ang*looptime)+Complementary_Filter_st->ox));// mnozenie X-1 poniewaz akcelerometr miezy w drugą strone niz zyroskop
 8001c88:	4b35      	ldr	r3, [pc, #212]	@ (8001d60 <Complementary_getFilter+0xf8>)
 8001c8a:	ed93 7a00 	vldr	s14, [r3]
 8001c8e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c92:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	edd3 7a03 	vldr	s15, [r3, #12]
 8001c9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ca0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001ca4:	ed9f 6b2a 	vldr	d6, [pc, #168]	@ 8001d50 <Complementary_getFilter+0xe8>
 8001ca8:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001cac:	edd7 7a06 	vldr	s15, [r7, #24]
 8001cb0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001cb4:	ed9f 5b28 	vldr	d5, [pc, #160]	@ 8001d58 <Complementary_getFilter+0xf0>
 8001cb8:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001cbc:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001cc0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001cc4:	69fb      	ldr	r3, [r7, #28]
 8001cc6:	edc3 7a00 	vstr	s15, [r3]
		Complementary_Filter_st->y = (0.02*ay_ang*(-1))+(0.98*((gy_ang*looptime)+Complementary_Filter_st->oy));
 8001cca:	4b25      	ldr	r3, [pc, #148]	@ (8001d60 <Complementary_getFilter+0xf8>)
 8001ccc:	ed93 7a00 	vldr	s14, [r3]
 8001cd0:	edd7 7a02 	vldr	s15, [r7, #8]
 8001cd4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001cd8:	69fb      	ldr	r3, [r7, #28]
 8001cda:	edd3 7a04 	vldr	s15, [r3, #16]
 8001cde:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ce2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001ce6:	ed9f 6b1a 	vldr	d6, [pc, #104]	@ 8001d50 <Complementary_getFilter+0xe8>
 8001cea:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001cee:	edd7 7a05 	vldr	s15, [r7, #20]
 8001cf2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001cf6:	ed9f 5b18 	vldr	d5, [pc, #96]	@ 8001d58 <Complementary_getFilter+0xf0>
 8001cfa:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001cfe:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001d02:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001d06:	69fb      	ldr	r3, [r7, #28]
 8001d08:	edc3 7a01 	vstr	s15, [r3, #4]
		Complementary_Filter_st->z = (1*((gz_ang*looptime)+Complementary_Filter_st->oz));
 8001d0c:	4b14      	ldr	r3, [pc, #80]	@ (8001d60 <Complementary_getFilter+0xf8>)
 8001d0e:	ed93 7a00 	vldr	s14, [r3]
 8001d12:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d16:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d1a:	69fb      	ldr	r3, [r7, #28]
 8001d1c:	edd3 7a05 	vldr	s15, [r3, #20]
 8001d20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d24:	69fb      	ldr	r3, [r7, #28]
 8001d26:	edc3 7a02 	vstr	s15, [r3, #8]

		Complementary_Filter_st->ox = Complementary_Filter_st->x;
 8001d2a:	69fb      	ldr	r3, [r7, #28]
 8001d2c:	681a      	ldr	r2, [r3, #0]
 8001d2e:	69fb      	ldr	r3, [r7, #28]
 8001d30:	60da      	str	r2, [r3, #12]
		Complementary_Filter_st->oy = Complementary_Filter_st->y;
 8001d32:	69fb      	ldr	r3, [r7, #28]
 8001d34:	685a      	ldr	r2, [r3, #4]
 8001d36:	69fb      	ldr	r3, [r7, #28]
 8001d38:	611a      	str	r2, [r3, #16]
		Complementary_Filter_st->oz = Complementary_Filter_st->z;
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	689a      	ldr	r2, [r3, #8]
 8001d3e:	69fb      	ldr	r3, [r7, #28]
 8001d40:	615a      	str	r2, [r3, #20]
//
//	for(int i = 1; i < 15; i++){
//		OldZs[i] = OldZs[i-1];
//	}
//	OldZs[0] = Complementary_Filter_st->oz;
}
 8001d42:	bf00      	nop
 8001d44:	3724      	adds	r7, #36	@ 0x24
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr
 8001d4e:	bf00      	nop
 8001d50:	f5c28f5c 	.word	0xf5c28f5c
 8001d54:	3fef5c28 	.word	0x3fef5c28
 8001d58:	47ae147b 	.word	0x47ae147b
 8001d5c:	3f947ae1 	.word	0x3f947ae1
 8001d60:	0801e8c4 	.word	0x0801e8c4

08001d64 <nRF24_Delay>:

#define NRF24_CE_HIGH		HAL_GPIO_WritePin(NRF24_CE_GPIO_Port, NRF24_CE_Pin, GPIO_PIN_SET)
#define NRF24_CE_LOW		HAL_GPIO_WritePin(NRF24_CE_GPIO_Port, NRF24_CE_Pin, GPIO_PIN_RESET)

static void nRF24_Delay(uint8_t Time)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b082      	sub	sp, #8
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(1);
 8001d6e:	2001      	movs	r0, #1
 8001d70:	f007 fa70 	bl	8009254 <HAL_Delay>
}
 8001d74:	bf00      	nop
 8001d76:	3708      	adds	r7, #8
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}

08001d7c <nRF24_SendSpi>:

static void nRF24_SendSpi(uint8_t *Data, uint8_t Length)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b082      	sub	sp, #8
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
 8001d84:	460b      	mov	r3, r1
 8001d86:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Transmit(hspi_nrf, Data, Length, 1000);
 8001d88:	4b06      	ldr	r3, [pc, #24]	@ (8001da4 <nRF24_SendSpi+0x28>)
 8001d8a:	6818      	ldr	r0, [r3, #0]
 8001d8c:	78fb      	ldrb	r3, [r7, #3]
 8001d8e:	b29a      	uxth	r2, r3
 8001d90:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d94:	6879      	ldr	r1, [r7, #4]
 8001d96:	f012 fd17 	bl	80147c8 <HAL_SPI_Transmit>
}
 8001d9a:	bf00      	nop
 8001d9c:	3708      	adds	r7, #8
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	240000a4 	.word	0x240000a4

08001da8 <nRF24_ReadSpi>:

static void nRF24_ReadSpi(uint8_t *Data, uint8_t Length)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b082      	sub	sp, #8
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
 8001db0:	460b      	mov	r3, r1
 8001db2:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Receive(hspi_nrf, Data, Length, 1000);
 8001db4:	4b06      	ldr	r3, [pc, #24]	@ (8001dd0 <nRF24_ReadSpi+0x28>)
 8001db6:	6818      	ldr	r0, [r3, #0]
 8001db8:	78fb      	ldrb	r3, [r7, #3]
 8001dba:	b29a      	uxth	r2, r3
 8001dbc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001dc0:	6879      	ldr	r1, [r7, #4]
 8001dc2:	f012 feef 	bl	8014ba4 <HAL_SPI_Receive>
}
 8001dc6:	bf00      	nop
 8001dc8:	3708      	adds	r7, #8
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	240000a4 	.word	0x240000a4

08001dd4 <nRF24_ReadRegister>:
//
// END OF BASIC READ/WRITE FUNCTIONS
//

static uint8_t nRF24_ReadRegister(uint8_t reg)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b084      	sub	sp, #16
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	4603      	mov	r3, r0
 8001ddc:	71fb      	strb	r3, [r7, #7]
	uint8_t result;

	reg = NRF24_CMD_R_REGISTER | reg;
 8001dde:	79fb      	ldrb	r3, [r7, #7]
 8001de0:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 8001de2:	2200      	movs	r2, #0
 8001de4:	2180      	movs	r1, #128	@ 0x80
 8001de6:	480c      	ldr	r0, [pc, #48]	@ (8001e18 <nRF24_ReadRegister+0x44>)
 8001de8:	f00c fb92 	bl	800e510 <HAL_GPIO_WritePin>
	nRF24_SendSpi(&reg, 1);
 8001dec:	1dfb      	adds	r3, r7, #7
 8001dee:	2101      	movs	r1, #1
 8001df0:	4618      	mov	r0, r3
 8001df2:	f7ff ffc3 	bl	8001d7c <nRF24_SendSpi>
	nRF24_ReadSpi(&result, 1);
 8001df6:	f107 030f 	add.w	r3, r7, #15
 8001dfa:	2101      	movs	r1, #1
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f7ff ffd3 	bl	8001da8 <nRF24_ReadSpi>
	NRF24_CSN_HIGH;
 8001e02:	2201      	movs	r2, #1
 8001e04:	2180      	movs	r1, #128	@ 0x80
 8001e06:	4804      	ldr	r0, [pc, #16]	@ (8001e18 <nRF24_ReadRegister+0x44>)
 8001e08:	f00c fb82 	bl	800e510 <HAL_GPIO_WritePin>

	return result;
 8001e0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	3710      	adds	r7, #16
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	58020400 	.word	0x58020400

08001e1c <nRF24_ReadRegisters>:

static void nRF24_ReadRegisters(uint8_t reg, uint8_t* ret, uint8_t len)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b082      	sub	sp, #8
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	4603      	mov	r3, r0
 8001e24:	6039      	str	r1, [r7, #0]
 8001e26:	71fb      	strb	r3, [r7, #7]
 8001e28:	4613      	mov	r3, r2
 8001e2a:	71bb      	strb	r3, [r7, #6]
	reg = NRF24_CMD_R_REGISTER | reg;
 8001e2c:	79fb      	ldrb	r3, [r7, #7]
 8001e2e:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 8001e30:	2200      	movs	r2, #0
 8001e32:	2180      	movs	r1, #128	@ 0x80
 8001e34:	480a      	ldr	r0, [pc, #40]	@ (8001e60 <nRF24_ReadRegisters+0x44>)
 8001e36:	f00c fb6b 	bl	800e510 <HAL_GPIO_WritePin>

	nRF24_SendSpi(&reg, 1);
 8001e3a:	1dfb      	adds	r3, r7, #7
 8001e3c:	2101      	movs	r1, #1
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f7ff ff9c 	bl	8001d7c <nRF24_SendSpi>
	nRF24_ReadSpi(ret, len);
 8001e44:	79bb      	ldrb	r3, [r7, #6]
 8001e46:	4619      	mov	r1, r3
 8001e48:	6838      	ldr	r0, [r7, #0]
 8001e4a:	f7ff ffad 	bl	8001da8 <nRF24_ReadSpi>

	NRF24_CSN_HIGH;
 8001e4e:	2201      	movs	r2, #1
 8001e50:	2180      	movs	r1, #128	@ 0x80
 8001e52:	4803      	ldr	r0, [pc, #12]	@ (8001e60 <nRF24_ReadRegisters+0x44>)
 8001e54:	f00c fb5c 	bl	800e510 <HAL_GPIO_WritePin>
}
 8001e58:	bf00      	nop
 8001e5a:	3708      	adds	r7, #8
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}
 8001e60:	58020400 	.word	0x58020400

08001e64 <nRF24_WriteRegister>:

static void nRF24_WriteRegister(uint8_t reg, uint8_t val)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b084      	sub	sp, #16
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	460a      	mov	r2, r1
 8001e6e:	71fb      	strb	r3, [r7, #7]
 8001e70:	4613      	mov	r3, r2
 8001e72:	71bb      	strb	r3, [r7, #6]
	uint8_t tmp[2];

	tmp[0] = NRF24_CMD_W_REGISTER | reg;
 8001e74:	79fb      	ldrb	r3, [r7, #7]
 8001e76:	f043 0320 	orr.w	r3, r3, #32
 8001e7a:	b2db      	uxtb	r3, r3
 8001e7c:	733b      	strb	r3, [r7, #12]
	tmp[1] = val;
 8001e7e:	79bb      	ldrb	r3, [r7, #6]
 8001e80:	737b      	strb	r3, [r7, #13]

	NRF24_CSN_LOW;
 8001e82:	2200      	movs	r2, #0
 8001e84:	2180      	movs	r1, #128	@ 0x80
 8001e86:	4809      	ldr	r0, [pc, #36]	@ (8001eac <nRF24_WriteRegister+0x48>)
 8001e88:	f00c fb42 	bl	800e510 <HAL_GPIO_WritePin>

	nRF24_SendSpi(tmp, 2);
 8001e8c:	f107 030c 	add.w	r3, r7, #12
 8001e90:	2102      	movs	r1, #2
 8001e92:	4618      	mov	r0, r3
 8001e94:	f7ff ff72 	bl	8001d7c <nRF24_SendSpi>

	NRF24_CSN_HIGH;
 8001e98:	2201      	movs	r2, #1
 8001e9a:	2180      	movs	r1, #128	@ 0x80
 8001e9c:	4803      	ldr	r0, [pc, #12]	@ (8001eac <nRF24_WriteRegister+0x48>)
 8001e9e:	f00c fb37 	bl	800e510 <HAL_GPIO_WritePin>
}
 8001ea2:	bf00      	nop
 8001ea4:	3710      	adds	r7, #16
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	58020400 	.word	0x58020400

08001eb0 <nRF24_WriteRegisters>:

static void nRF24_WriteRegisters(uint8_t reg, uint8_t* val, uint8_t len)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b082      	sub	sp, #8
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	6039      	str	r1, [r7, #0]
 8001eba:	71fb      	strb	r3, [r7, #7]
 8001ebc:	4613      	mov	r3, r2
 8001ebe:	71bb      	strb	r3, [r7, #6]
	reg = NRF24_CMD_W_REGISTER | reg;
 8001ec0:	79fb      	ldrb	r3, [r7, #7]
 8001ec2:	f043 0320 	orr.w	r3, r3, #32
 8001ec6:	b2db      	uxtb	r3, r3
 8001ec8:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 8001eca:	2200      	movs	r2, #0
 8001ecc:	2180      	movs	r1, #128	@ 0x80
 8001ece:	480b      	ldr	r0, [pc, #44]	@ (8001efc <nRF24_WriteRegisters+0x4c>)
 8001ed0:	f00c fb1e 	bl	800e510 <HAL_GPIO_WritePin>

	nRF24_SendSpi(&reg, 1);
 8001ed4:	1dfb      	adds	r3, r7, #7
 8001ed6:	2101      	movs	r1, #1
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f7ff ff4f 	bl	8001d7c <nRF24_SendSpi>
	nRF24_SendSpi(val, len);
 8001ede:	79bb      	ldrb	r3, [r7, #6]
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	6838      	ldr	r0, [r7, #0]
 8001ee4:	f7ff ff4a 	bl	8001d7c <nRF24_SendSpi>

	NRF24_CSN_HIGH;
 8001ee8:	2201      	movs	r2, #1
 8001eea:	2180      	movs	r1, #128	@ 0x80
 8001eec:	4803      	ldr	r0, [pc, #12]	@ (8001efc <nRF24_WriteRegisters+0x4c>)
 8001eee:	f00c fb0f 	bl	800e510 <HAL_GPIO_WritePin>
}
 8001ef2:	bf00      	nop
 8001ef4:	3708      	adds	r7, #8
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	58020400 	.word	0x58020400

08001f00 <nRF24_RX_Mode>:

void nRF24_RX_Mode(void)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b082      	sub	sp, #8
 8001f04:	af00      	add	r7, sp, #0
	uint8_t config = nRF24_ReadConfig();
 8001f06:	f000 f84d 	bl	8001fa4 <nRF24_ReadConfig>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	71fb      	strb	r3, [r7, #7]
	// Restore pipe 0 adress after comeback from TX mode
	nRF24_SetRXAddress(0, addr_p0_backup);
 8001f0e:	4910      	ldr	r1, [pc, #64]	@ (8001f50 <nRF24_RX_Mode+0x50>)
 8001f10:	2000      	movs	r0, #0
 8001f12:	f000 f9f6 	bl	8002302 <nRF24_SetRXAddress>
	// PWR_UP bit set
	config |= (1<<NRF24_PWR_UP);
 8001f16:	79fb      	ldrb	r3, [r7, #7]
 8001f18:	f043 0302 	orr.w	r3, r3, #2
 8001f1c:	71fb      	strb	r3, [r7, #7]
	// PRIM_RX bit set
	config |= (1<<NRF24_PRIM_RX);
 8001f1e:	79fb      	ldrb	r3, [r7, #7]
 8001f20:	f043 0301 	orr.w	r3, r3, #1
 8001f24:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteConfig(config);
 8001f26:	79fb      	ldrb	r3, [r7, #7]
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f000 f843 	bl	8001fb4 <nRF24_WriteConfig>
	// Reset status
	nRF24_WriteStatus((1<<NRF24_RX_DR)|(1<<NRF24_TX_DS)|(1<<NRF24_MAX_RT));
 8001f2e:	2070      	movs	r0, #112	@ 0x70
 8001f30:	f000 f89b 	bl	800206a <nRF24_WriteStatus>
	// Flush RX
	nRF24_FlushRX();
 8001f34:	f000 f8a8 	bl	8002088 <nRF24_FlushRX>
	// Flush TX
	nRF24_FlushTX();
 8001f38:	f000 f8c0 	bl	80020bc <nRF24_FlushTX>

	NRF24_CE_HIGH;
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	2140      	movs	r1, #64	@ 0x40
 8001f40:	4804      	ldr	r0, [pc, #16]	@ (8001f54 <nRF24_RX_Mode+0x54>)
 8001f42:	f00c fae5 	bl	800e510 <HAL_GPIO_WritePin>
	//nRF24_Delay(1);
}
 8001f46:	bf00      	nop
 8001f48:	3708      	adds	r7, #8
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	240000a8 	.word	0x240000a8
 8001f54:	58020400 	.word	0x58020400

08001f58 <nRF24_TX_Mode>:

void nRF24_TX_Mode(void)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b082      	sub	sp, #8
 8001f5c:	af00      	add	r7, sp, #0
	NRF24_CE_LOW;
 8001f5e:	2200      	movs	r2, #0
 8001f60:	2140      	movs	r1, #64	@ 0x40
 8001f62:	480f      	ldr	r0, [pc, #60]	@ (8001fa0 <nRF24_TX_Mode+0x48>)
 8001f64:	f00c fad4 	bl	800e510 <HAL_GPIO_WritePin>

	uint8_t config = nRF24_ReadConfig();
 8001f68:	f000 f81c 	bl	8001fa4 <nRF24_ReadConfig>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	71fb      	strb	r3, [r7, #7]
	// PWR_UP bit set
	config |= (1<<NRF24_PWR_UP);
 8001f70:	79fb      	ldrb	r3, [r7, #7]
 8001f72:	f043 0302 	orr.w	r3, r3, #2
 8001f76:	71fb      	strb	r3, [r7, #7]
	// PRIM_RX bit low
	config &= ~(1<<NRF24_PRIM_RX);
 8001f78:	79fb      	ldrb	r3, [r7, #7]
 8001f7a:	f023 0301 	bic.w	r3, r3, #1
 8001f7e:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteConfig(config);
 8001f80:	79fb      	ldrb	r3, [r7, #7]
 8001f82:	4618      	mov	r0, r3
 8001f84:	f000 f816 	bl	8001fb4 <nRF24_WriteConfig>
	// Reset status
	nRF24_WriteStatus((1<<NRF24_RX_DR)|(1<<NRF24_TX_DS)|(1<<NRF24_MAX_RT));
 8001f88:	2070      	movs	r0, #112	@ 0x70
 8001f8a:	f000 f86e 	bl	800206a <nRF24_WriteStatus>
	// Flush RX
	nRF24_FlushRX();
 8001f8e:	f000 f87b 	bl	8002088 <nRF24_FlushRX>
	// Flush TX
	nRF24_FlushTX();
 8001f92:	f000 f893 	bl	80020bc <nRF24_FlushTX>

	//nRF24_Delay(1);
}
 8001f96:	bf00      	nop
 8001f98:	3708      	adds	r7, #8
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	58020400 	.word	0x58020400

08001fa4 <nRF24_ReadConfig>:



uint8_t nRF24_ReadConfig(void)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	af00      	add	r7, sp, #0
	return (nRF24_ReadRegister(NRF24_CONFIG));
 8001fa8:	2000      	movs	r0, #0
 8001faa:	f7ff ff13 	bl	8001dd4 <nRF24_ReadRegister>
 8001fae:	4603      	mov	r3, r0
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	bd80      	pop	{r7, pc}

08001fb4 <nRF24_WriteConfig>:

void nRF24_WriteConfig(uint8_t conf)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b082      	sub	sp, #8
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	4603      	mov	r3, r0
 8001fbc:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_CONFIG, conf);
 8001fbe:	79fb      	ldrb	r3, [r7, #7]
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	2000      	movs	r0, #0
 8001fc4:	f7ff ff4e 	bl	8001e64 <nRF24_WriteRegister>
}
 8001fc8:	bf00      	nop
 8001fca:	3708      	adds	r7, #8
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}

08001fd0 <nRF24_SetPALevel>:

void nRF24_SetPALevel(uint8_t lev)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b084      	sub	sp, #16
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	71fb      	strb	r3, [r7, #7]
	uint8_t rf_setup = nRF24_ReadRegister(NRF24_RF_SETUP);
 8001fda:	2006      	movs	r0, #6
 8001fdc:	f7ff fefa 	bl	8001dd4 <nRF24_ReadRegister>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	73fb      	strb	r3, [r7, #15]
	rf_setup &= 0xF8; // Clear PWR bits
 8001fe4:	7bfb      	ldrb	r3, [r7, #15]
 8001fe6:	f023 0307 	bic.w	r3, r3, #7
 8001fea:	73fb      	strb	r3, [r7, #15]
	rf_setup |= (lev<<1);
 8001fec:	79fb      	ldrb	r3, [r7, #7]
 8001fee:	005b      	lsls	r3, r3, #1
 8001ff0:	b25a      	sxtb	r2, r3
 8001ff2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	b25b      	sxtb	r3, r3
 8001ffa:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_RF_SETUP, rf_setup);
 8001ffc:	7bfb      	ldrb	r3, [r7, #15]
 8001ffe:	4619      	mov	r1, r3
 8002000:	2006      	movs	r0, #6
 8002002:	f7ff ff2f 	bl	8001e64 <nRF24_WriteRegister>
}
 8002006:	bf00      	nop
 8002008:	3710      	adds	r7, #16
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}

0800200e <nRF24_SetDataRate>:

void nRF24_SetDataRate(uint8_t dr)
{
 800200e:	b580      	push	{r7, lr}
 8002010:	b084      	sub	sp, #16
 8002012:	af00      	add	r7, sp, #0
 8002014:	4603      	mov	r3, r0
 8002016:	71fb      	strb	r3, [r7, #7]
	uint8_t rf_setup = nRF24_ReadRegister(NRF24_RF_SETUP);
 8002018:	2006      	movs	r0, #6
 800201a:	f7ff fedb 	bl	8001dd4 <nRF24_ReadRegister>
 800201e:	4603      	mov	r3, r0
 8002020:	73fb      	strb	r3, [r7, #15]
	rf_setup &= 0xD7; // Clear DR bits (1MBPS)
 8002022:	7bfb      	ldrb	r3, [r7, #15]
 8002024:	f023 0328 	bic.w	r3, r3, #40	@ 0x28
 8002028:	73fb      	strb	r3, [r7, #15]
	if(dr == NRF24_RF_DR_250KBPS)
 800202a:	79fb      	ldrb	r3, [r7, #7]
 800202c:	2b02      	cmp	r3, #2
 800202e:	d104      	bne.n	800203a <nRF24_SetDataRate+0x2c>
		rf_setup |= (1<<NRF24_RF_DR_LOW);
 8002030:	7bfb      	ldrb	r3, [r7, #15]
 8002032:	f043 0320 	orr.w	r3, r3, #32
 8002036:	73fb      	strb	r3, [r7, #15]
 8002038:	e006      	b.n	8002048 <nRF24_SetDataRate+0x3a>
	else if(dr == NRF24_RF_DR_2MBPS)
 800203a:	79fb      	ldrb	r3, [r7, #7]
 800203c:	2b01      	cmp	r3, #1
 800203e:	d103      	bne.n	8002048 <nRF24_SetDataRate+0x3a>
		rf_setup |= (1<<NRF24_RF_DR_HIGH);
 8002040:	7bfb      	ldrb	r3, [r7, #15]
 8002042:	f043 0308 	orr.w	r3, r3, #8
 8002046:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_RF_SETUP, rf_setup);
 8002048:	7bfb      	ldrb	r3, [r7, #15]
 800204a:	4619      	mov	r1, r3
 800204c:	2006      	movs	r0, #6
 800204e:	f7ff ff09 	bl	8001e64 <nRF24_WriteRegister>
}
 8002052:	bf00      	nop
 8002054:	3710      	adds	r7, #16
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}

0800205a <nRF24_ReadStatus>:

uint8_t nRF24_ReadStatus(void)
{
 800205a:	b580      	push	{r7, lr}
 800205c:	af00      	add	r7, sp, #0
	return (nRF24_ReadRegister(NRF24_STATUS));
 800205e:	2007      	movs	r0, #7
 8002060:	f7ff feb8 	bl	8001dd4 <nRF24_ReadRegister>
 8002064:	4603      	mov	r3, r0
}
 8002066:	4618      	mov	r0, r3
 8002068:	bd80      	pop	{r7, pc}

0800206a <nRF24_WriteStatus>:

void nRF24_WriteStatus(uint8_t st)
{
 800206a:	b580      	push	{r7, lr}
 800206c:	b082      	sub	sp, #8
 800206e:	af00      	add	r7, sp, #0
 8002070:	4603      	mov	r3, r0
 8002072:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_STATUS, st);
 8002074:	79fb      	ldrb	r3, [r7, #7]
 8002076:	4619      	mov	r1, r3
 8002078:	2007      	movs	r0, #7
 800207a:	f7ff fef3 	bl	8001e64 <nRF24_WriteRegister>
}
 800207e:	bf00      	nop
 8002080:	3708      	adds	r7, #8
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}
	...

08002088 <nRF24_FlushRX>:

void nRF24_FlushRX(void)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b082      	sub	sp, #8
 800208c:	af00      	add	r7, sp, #0
	uint8_t command = NRF24_CMD_FLUSH_RX;
 800208e:	23e2      	movs	r3, #226	@ 0xe2
 8002090:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 8002092:	2200      	movs	r2, #0
 8002094:	2180      	movs	r1, #128	@ 0x80
 8002096:	4808      	ldr	r0, [pc, #32]	@ (80020b8 <nRF24_FlushRX+0x30>)
 8002098:	f00c fa3a 	bl	800e510 <HAL_GPIO_WritePin>
	nRF24_SendSpi(&command, 1);
 800209c:	1dfb      	adds	r3, r7, #7
 800209e:	2101      	movs	r1, #1
 80020a0:	4618      	mov	r0, r3
 80020a2:	f7ff fe6b 	bl	8001d7c <nRF24_SendSpi>
	NRF24_CSN_HIGH;
 80020a6:	2201      	movs	r2, #1
 80020a8:	2180      	movs	r1, #128	@ 0x80
 80020aa:	4803      	ldr	r0, [pc, #12]	@ (80020b8 <nRF24_FlushRX+0x30>)
 80020ac:	f00c fa30 	bl	800e510 <HAL_GPIO_WritePin>
}
 80020b0:	bf00      	nop
 80020b2:	3708      	adds	r7, #8
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}
 80020b8:	58020400 	.word	0x58020400

080020bc <nRF24_FlushTX>:

void nRF24_FlushTX(void)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b082      	sub	sp, #8
 80020c0:	af00      	add	r7, sp, #0
	uint8_t command = NRF24_CMD_FLUSH_TX;
 80020c2:	23e1      	movs	r3, #225	@ 0xe1
 80020c4:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 80020c6:	2200      	movs	r2, #0
 80020c8:	2180      	movs	r1, #128	@ 0x80
 80020ca:	4808      	ldr	r0, [pc, #32]	@ (80020ec <nRF24_FlushTX+0x30>)
 80020cc:	f00c fa20 	bl	800e510 <HAL_GPIO_WritePin>
	nRF24_SendSpi(&command, 1);
 80020d0:	1dfb      	adds	r3, r7, #7
 80020d2:	2101      	movs	r1, #1
 80020d4:	4618      	mov	r0, r3
 80020d6:	f7ff fe51 	bl	8001d7c <nRF24_SendSpi>
	NRF24_CSN_HIGH;
 80020da:	2201      	movs	r2, #1
 80020dc:	2180      	movs	r1, #128	@ 0x80
 80020de:	4803      	ldr	r0, [pc, #12]	@ (80020ec <nRF24_FlushTX+0x30>)
 80020e0:	f00c fa16 	bl	800e510 <HAL_GPIO_WritePin>
}
 80020e4:	bf00      	nop
 80020e6:	3708      	adds	r7, #8
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}
 80020ec:	58020400 	.word	0x58020400

080020f0 <nRF24_EnableCRC>:

void nRF24_EnableCRC(uint8_t onoff)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b084      	sub	sp, #16
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	4603      	mov	r3, r0
 80020f8:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 80020fa:	f7ff ff53 	bl	8001fa4 <nRF24_ReadConfig>
 80020fe:	4603      	mov	r3, r0
 8002100:	73fb      	strb	r3, [r7, #15]

	if(onoff)
 8002102:	79fb      	ldrb	r3, [r7, #7]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d004      	beq.n	8002112 <nRF24_EnableCRC+0x22>
		config |= (1<<NRF24_EN_CRC);
 8002108:	7bfb      	ldrb	r3, [r7, #15]
 800210a:	f043 0308 	orr.w	r3, r3, #8
 800210e:	73fb      	strb	r3, [r7, #15]
 8002110:	e003      	b.n	800211a <nRF24_EnableCRC+0x2a>
	else
		config &= ~(1<<NRF24_EN_CRC);
 8002112:	7bfb      	ldrb	r3, [r7, #15]
 8002114:	f023 0308 	bic.w	r3, r3, #8
 8002118:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteConfig(config);
 800211a:	7bfb      	ldrb	r3, [r7, #15]
 800211c:	4618      	mov	r0, r3
 800211e:	f7ff ff49 	bl	8001fb4 <nRF24_WriteConfig>
}
 8002122:	bf00      	nop
 8002124:	3710      	adds	r7, #16
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}

0800212a <nRF24_SetCRCLength>:

void nRF24_SetCRCLength(uint8_t crcl)
{
 800212a:	b580      	push	{r7, lr}
 800212c:	b084      	sub	sp, #16
 800212e:	af00      	add	r7, sp, #0
 8002130:	4603      	mov	r3, r0
 8002132:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 8002134:	f7ff ff36 	bl	8001fa4 <nRF24_ReadConfig>
 8002138:	4603      	mov	r3, r0
 800213a:	73fb      	strb	r3, [r7, #15]
	if(crcl == NRF24_CRC_WIDTH_2B)
 800213c:	79fb      	ldrb	r3, [r7, #7]
 800213e:	2b01      	cmp	r3, #1
 8002140:	d104      	bne.n	800214c <nRF24_SetCRCLength+0x22>
		config |= (1<<NRF24_CRCO);
 8002142:	7bfb      	ldrb	r3, [r7, #15]
 8002144:	f043 0304 	orr.w	r3, r3, #4
 8002148:	73fb      	strb	r3, [r7, #15]
 800214a:	e003      	b.n	8002154 <nRF24_SetCRCLength+0x2a>
	else
		config &= ~(1<<NRF24_CRCO);
 800214c:	7bfb      	ldrb	r3, [r7, #15]
 800214e:	f023 0304 	bic.w	r3, r3, #4
 8002152:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteConfig(config);
 8002154:	7bfb      	ldrb	r3, [r7, #15]
 8002156:	4618      	mov	r0, r3
 8002158:	f7ff ff2c 	bl	8001fb4 <nRF24_WriteConfig>
}
 800215c:	bf00      	nop
 800215e:	3710      	adds	r7, #16
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}

08002164 <nRF24_SetRetries>:

void nRF24_SetRetries(uint8_t ard, uint8_t arc)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b082      	sub	sp, #8
 8002168:	af00      	add	r7, sp, #0
 800216a:	4603      	mov	r3, r0
 800216c:	460a      	mov	r2, r1
 800216e:	71fb      	strb	r3, [r7, #7]
 8002170:	4613      	mov	r3, r2
 8002172:	71bb      	strb	r3, [r7, #6]
	// ard * 250us, arc repeats
	nRF24_WriteRegister(NRF24_SETUP_RETR, (((ard & 0x0F)<<NRF24_ARD) | ((arc & 0x0F)<<NRF24_ARC)));
 8002174:	79fb      	ldrb	r3, [r7, #7]
 8002176:	011b      	lsls	r3, r3, #4
 8002178:	b25a      	sxtb	r2, r3
 800217a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800217e:	f003 030f 	and.w	r3, r3, #15
 8002182:	b25b      	sxtb	r3, r3
 8002184:	4313      	orrs	r3, r2
 8002186:	b25b      	sxtb	r3, r3
 8002188:	b2db      	uxtb	r3, r3
 800218a:	4619      	mov	r1, r3
 800218c:	2004      	movs	r0, #4
 800218e:	f7ff fe69 	bl	8001e64 <nRF24_WriteRegister>
}
 8002192:	bf00      	nop
 8002194:	3708      	adds	r7, #8
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}

0800219a <nRF24_SetRFChannel>:

void nRF24_SetRFChannel(uint8_t channel)
{
 800219a:	b580      	push	{r7, lr}
 800219c:	b082      	sub	sp, #8
 800219e:	af00      	add	r7, sp, #0
 80021a0:	4603      	mov	r3, r0
 80021a2:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_RF_CH, (channel & 0x7F));
 80021a4:	79fb      	ldrb	r3, [r7, #7]
 80021a6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80021aa:	b2db      	uxtb	r3, r3
 80021ac:	4619      	mov	r1, r3
 80021ae:	2005      	movs	r0, #5
 80021b0:	f7ff fe58 	bl	8001e64 <nRF24_WriteRegister>
}
 80021b4:	bf00      	nop
 80021b6:	3708      	adds	r7, #8
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}

080021bc <nRF24_SetPayloadSize>:

void nRF24_SetPayloadSize(uint8_t pipe, uint8_t size)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b082      	sub	sp, #8
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	4603      	mov	r3, r0
 80021c4:	460a      	mov	r2, r1
 80021c6:	71fb      	strb	r3, [r7, #7]
 80021c8:	4613      	mov	r3, r2
 80021ca:	71bb      	strb	r3, [r7, #6]
	if(pipe > 5)
 80021cc:	79fb      	ldrb	r3, [r7, #7]
 80021ce:	2b05      	cmp	r3, #5
 80021d0:	d901      	bls.n	80021d6 <nRF24_SetPayloadSize+0x1a>
		pipe = 5; // Block too high pipe number
 80021d2:	2305      	movs	r3, #5
 80021d4:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_RX_PW_P0 + pipe , (size & 0x3F));
 80021d6:	79fb      	ldrb	r3, [r7, #7]
 80021d8:	3311      	adds	r3, #17
 80021da:	b2da      	uxtb	r2, r3
 80021dc:	79bb      	ldrb	r3, [r7, #6]
 80021de:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80021e2:	b2db      	uxtb	r3, r3
 80021e4:	4619      	mov	r1, r3
 80021e6:	4610      	mov	r0, r2
 80021e8:	f7ff fe3c 	bl	8001e64 <nRF24_WriteRegister>
}
 80021ec:	bf00      	nop
 80021ee:	3708      	adds	r7, #8
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}

080021f4 <nRF24_EnablePipe>:

void nRF24_EnablePipe(uint8_t pipe, uint8_t onoff)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b084      	sub	sp, #16
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	4603      	mov	r3, r0
 80021fc:	460a      	mov	r2, r1
 80021fe:	71fb      	strb	r3, [r7, #7]
 8002200:	4613      	mov	r3, r2
 8002202:	71bb      	strb	r3, [r7, #6]
	if(pipe > 5)
 8002204:	79fb      	ldrb	r3, [r7, #7]
 8002206:	2b05      	cmp	r3, #5
 8002208:	d901      	bls.n	800220e <nRF24_EnablePipe+0x1a>
		pipe = 5; // Block too high pipe number
 800220a:	2305      	movs	r3, #5
 800220c:	71fb      	strb	r3, [r7, #7]
	uint8_t enable_pipe = nRF24_ReadRegister(NRF24_EN_RXADDR);
 800220e:	2002      	movs	r0, #2
 8002210:	f7ff fde0 	bl	8001dd4 <nRF24_ReadRegister>
 8002214:	4603      	mov	r3, r0
 8002216:	73fb      	strb	r3, [r7, #15]
	if(onoff == 1)
 8002218:	79bb      	ldrb	r3, [r7, #6]
 800221a:	2b01      	cmp	r3, #1
 800221c:	d10a      	bne.n	8002234 <nRF24_EnablePipe+0x40>
		enable_pipe |= (1<<pipe);
 800221e:	79fb      	ldrb	r3, [r7, #7]
 8002220:	2201      	movs	r2, #1
 8002222:	fa02 f303 	lsl.w	r3, r2, r3
 8002226:	b25a      	sxtb	r2, r3
 8002228:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800222c:	4313      	orrs	r3, r2
 800222e:	b25b      	sxtb	r3, r3
 8002230:	73fb      	strb	r3, [r7, #15]
 8002232:	e00b      	b.n	800224c <nRF24_EnablePipe+0x58>
	else
		enable_pipe &= ~(1<<pipe);
 8002234:	79fb      	ldrb	r3, [r7, #7]
 8002236:	2201      	movs	r2, #1
 8002238:	fa02 f303 	lsl.w	r3, r2, r3
 800223c:	b25b      	sxtb	r3, r3
 800223e:	43db      	mvns	r3, r3
 8002240:	b25a      	sxtb	r2, r3
 8002242:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002246:	4013      	ands	r3, r2
 8002248:	b25b      	sxtb	r3, r3
 800224a:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_EN_RXADDR, enable_pipe);
 800224c:	7bfb      	ldrb	r3, [r7, #15]
 800224e:	4619      	mov	r1, r3
 8002250:	2002      	movs	r0, #2
 8002252:	f7ff fe07 	bl	8001e64 <nRF24_WriteRegister>
}
 8002256:	bf00      	nop
 8002258:	3710      	adds	r7, #16
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}

0800225e <nRF24_AutoACK>:

void nRF24_AutoACK(uint8_t pipe, uint8_t onoff)
{
 800225e:	b580      	push	{r7, lr}
 8002260:	b084      	sub	sp, #16
 8002262:	af00      	add	r7, sp, #0
 8002264:	4603      	mov	r3, r0
 8002266:	460a      	mov	r2, r1
 8002268:	71fb      	strb	r3, [r7, #7]
 800226a:	4613      	mov	r3, r2
 800226c:	71bb      	strb	r3, [r7, #6]
	if(pipe > 5)
 800226e:	79fb      	ldrb	r3, [r7, #7]
 8002270:	2b05      	cmp	r3, #5
 8002272:	d901      	bls.n	8002278 <nRF24_AutoACK+0x1a>
		pipe = 5; // Block too high pipe number
 8002274:	2305      	movs	r3, #5
 8002276:	71fb      	strb	r3, [r7, #7]
	uint8_t enaa = nRF24_ReadRegister(NRF24_EN_AA);
 8002278:	2001      	movs	r0, #1
 800227a:	f7ff fdab 	bl	8001dd4 <nRF24_ReadRegister>
 800227e:	4603      	mov	r3, r0
 8002280:	73fb      	strb	r3, [r7, #15]
	if(onoff == 1)
 8002282:	79bb      	ldrb	r3, [r7, #6]
 8002284:	2b01      	cmp	r3, #1
 8002286:	d10a      	bne.n	800229e <nRF24_AutoACK+0x40>
		enaa |= (1<<pipe);
 8002288:	79fb      	ldrb	r3, [r7, #7]
 800228a:	2201      	movs	r2, #1
 800228c:	fa02 f303 	lsl.w	r3, r2, r3
 8002290:	b25a      	sxtb	r2, r3
 8002292:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002296:	4313      	orrs	r3, r2
 8002298:	b25b      	sxtb	r3, r3
 800229a:	73fb      	strb	r3, [r7, #15]
 800229c:	e00b      	b.n	80022b6 <nRF24_AutoACK+0x58>
	else
		enaa &= ~(1<<pipe);
 800229e:	79fb      	ldrb	r3, [r7, #7]
 80022a0:	2201      	movs	r2, #1
 80022a2:	fa02 f303 	lsl.w	r3, r2, r3
 80022a6:	b25b      	sxtb	r3, r3
 80022a8:	43db      	mvns	r3, r3
 80022aa:	b25a      	sxtb	r2, r3
 80022ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022b0:	4013      	ands	r3, r2
 80022b2:	b25b      	sxtb	r3, r3
 80022b4:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_EN_AA, enaa);
 80022b6:	7bfb      	ldrb	r3, [r7, #15]
 80022b8:	4619      	mov	r1, r3
 80022ba:	2001      	movs	r0, #1
 80022bc:	f7ff fdd2 	bl	8001e64 <nRF24_WriteRegister>
}
 80022c0:	bf00      	nop
 80022c2:	3710      	adds	r7, #16
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}

080022c8 <nRF24_SetAddressWidth>:

void nRF24_SetAddressWidth(uint8_t size)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b082      	sub	sp, #8
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	4603      	mov	r3, r0
 80022d0:	71fb      	strb	r3, [r7, #7]
	if(size > 5)
 80022d2:	79fb      	ldrb	r3, [r7, #7]
 80022d4:	2b05      	cmp	r3, #5
 80022d6:	d901      	bls.n	80022dc <nRF24_SetAddressWidth+0x14>
		size = 5; // Maximum are 5 bytes
 80022d8:	2305      	movs	r3, #5
 80022da:	71fb      	strb	r3, [r7, #7]
	if(size < 3)
 80022dc:	79fb      	ldrb	r3, [r7, #7]
 80022de:	2b02      	cmp	r3, #2
 80022e0:	d801      	bhi.n	80022e6 <nRF24_SetAddressWidth+0x1e>
		size = 3; // Minimum are 3 bytes
 80022e2:	2303      	movs	r3, #3
 80022e4:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_SETUP_AW, ((size-2) & 0x03));
 80022e6:	79fb      	ldrb	r3, [r7, #7]
 80022e8:	3b02      	subs	r3, #2
 80022ea:	b2db      	uxtb	r3, r3
 80022ec:	f003 0303 	and.w	r3, r3, #3
 80022f0:	b2db      	uxtb	r3, r3
 80022f2:	4619      	mov	r1, r3
 80022f4:	2003      	movs	r0, #3
 80022f6:	f7ff fdb5 	bl	8001e64 <nRF24_WriteRegister>
}
 80022fa:	bf00      	nop
 80022fc:	3708      	adds	r7, #8
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}

08002302 <nRF24_SetRXAddress>:

void nRF24_SetRXAddress(uint8_t pipe, uint8_t* address)
{
 8002302:	b580      	push	{r7, lr}
 8002304:	b084      	sub	sp, #16
 8002306:	af00      	add	r7, sp, #0
 8002308:	4603      	mov	r3, r0
 800230a:	6039      	str	r1, [r7, #0]
 800230c:	71fb      	strb	r3, [r7, #7]
	// pipe 0 and pipe 1 are fully 40-bits storaged
	// pipe 2-5 is storaged only with last byte. Rest are as same as pipe 1
	// pipe 0 and 1 are LSByte first so they are needed to reverse address
	if((pipe == 0) || (pipe == 1))
 800230e:	79fb      	ldrb	r3, [r7, #7]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d002      	beq.n	800231a <nRF24_SetRXAddress+0x18>
 8002314:	79fb      	ldrb	r3, [r7, #7]
 8002316:	2b01      	cmp	r3, #1
 8002318:	d11d      	bne.n	8002356 <nRF24_SetRXAddress+0x54>
	{
		uint8_t i;
		uint8_t address_rev[NRF24_ADDR_SIZE];
		for(i = 0; i<NRF24_ADDR_SIZE; i++)
 800231a:	2300      	movs	r3, #0
 800231c:	73fb      	strb	r3, [r7, #15]
 800231e:	e00d      	b.n	800233c <nRF24_SetRXAddress+0x3a>
			address_rev[NRF24_ADDR_SIZE - 1 - i] = address[i];
 8002320:	7bfb      	ldrb	r3, [r7, #15]
 8002322:	683a      	ldr	r2, [r7, #0]
 8002324:	441a      	add	r2, r3
 8002326:	7bfb      	ldrb	r3, [r7, #15]
 8002328:	f1c3 0302 	rsb	r3, r3, #2
 800232c:	7812      	ldrb	r2, [r2, #0]
 800232e:	3310      	adds	r3, #16
 8002330:	443b      	add	r3, r7
 8002332:	f803 2c04 	strb.w	r2, [r3, #-4]
		for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8002336:	7bfb      	ldrb	r3, [r7, #15]
 8002338:	3301      	adds	r3, #1
 800233a:	73fb      	strb	r3, [r7, #15]
 800233c:	7bfb      	ldrb	r3, [r7, #15]
 800233e:	2b02      	cmp	r3, #2
 8002340:	d9ee      	bls.n	8002320 <nRF24_SetRXAddress+0x1e>
		nRF24_WriteRegisters(NRF24_RX_ADDR_P0 + pipe, address_rev, NRF24_ADDR_SIZE);
 8002342:	79fb      	ldrb	r3, [r7, #7]
 8002344:	330a      	adds	r3, #10
 8002346:	b2db      	uxtb	r3, r3
 8002348:	f107 010c 	add.w	r1, r7, #12
 800234c:	2203      	movs	r2, #3
 800234e:	4618      	mov	r0, r3
 8002350:	f7ff fdae 	bl	8001eb0 <nRF24_WriteRegisters>
	{
 8002354:	e00a      	b.n	800236c <nRF24_SetRXAddress+0x6a>
	}
	else
		nRF24_WriteRegister(NRF24_RX_ADDR_P0 + pipe, address[NRF24_ADDR_SIZE-1]);
 8002356:	79fb      	ldrb	r3, [r7, #7]
 8002358:	330a      	adds	r3, #10
 800235a:	b2da      	uxtb	r2, r3
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	3302      	adds	r3, #2
 8002360:	781b      	ldrb	r3, [r3, #0]
 8002362:	4619      	mov	r1, r3
 8002364:	4610      	mov	r0, r2
 8002366:	f7ff fd7d 	bl	8001e64 <nRF24_WriteRegister>
}
 800236a:	bf00      	nop
 800236c:	bf00      	nop
 800236e:	3710      	adds	r7, #16
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}

08002374 <nRF24_SetTXAddress>:

void nRF24_SetTXAddress(uint8_t* address)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b084      	sub	sp, #16
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
	// TX address is storaged similar to RX pipe 0 - LSByte first
	uint8_t i;
	uint8_t address_rev[NRF24_ADDR_SIZE];

	nRF24_ReadRegisters(NRF24_RX_ADDR_P0, address_rev, NRF24_ADDR_SIZE); // Backup P0 address
 800237c:	f107 030c 	add.w	r3, r7, #12
 8002380:	2203      	movs	r2, #3
 8002382:	4619      	mov	r1, r3
 8002384:	200a      	movs	r0, #10
 8002386:	f7ff fd49 	bl	8001e1c <nRF24_ReadRegisters>
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 800238a:	2300      	movs	r3, #0
 800238c:	73fb      	strb	r3, [r7, #15]
 800238e:	e00c      	b.n	80023aa <nRF24_SetTXAddress+0x36>
		addr_p0_backup[NRF24_ADDR_SIZE - 1 - i] = address_rev[i]; //Reverse P0 address
 8002390:	7bfa      	ldrb	r2, [r7, #15]
 8002392:	7bfb      	ldrb	r3, [r7, #15]
 8002394:	f1c3 0302 	rsb	r3, r3, #2
 8002398:	3210      	adds	r2, #16
 800239a:	443a      	add	r2, r7
 800239c:	f812 1c04 	ldrb.w	r1, [r2, #-4]
 80023a0:	4a16      	ldr	r2, [pc, #88]	@ (80023fc <nRF24_SetTXAddress+0x88>)
 80023a2:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 80023a4:	7bfb      	ldrb	r3, [r7, #15]
 80023a6:	3301      	adds	r3, #1
 80023a8:	73fb      	strb	r3, [r7, #15]
 80023aa:	7bfb      	ldrb	r3, [r7, #15]
 80023ac:	2b02      	cmp	r3, #2
 80023ae:	d9ef      	bls.n	8002390 <nRF24_SetTXAddress+0x1c>

	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 80023b0:	2300      	movs	r3, #0
 80023b2:	73fb      	strb	r3, [r7, #15]
 80023b4:	e00d      	b.n	80023d2 <nRF24_SetTXAddress+0x5e>
		address_rev[NRF24_ADDR_SIZE - 1 - i] = address[i];
 80023b6:	7bfb      	ldrb	r3, [r7, #15]
 80023b8:	687a      	ldr	r2, [r7, #4]
 80023ba:	441a      	add	r2, r3
 80023bc:	7bfb      	ldrb	r3, [r7, #15]
 80023be:	f1c3 0302 	rsb	r3, r3, #2
 80023c2:	7812      	ldrb	r2, [r2, #0]
 80023c4:	3310      	adds	r3, #16
 80023c6:	443b      	add	r3, r7
 80023c8:	f803 2c04 	strb.w	r2, [r3, #-4]
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 80023cc:	7bfb      	ldrb	r3, [r7, #15]
 80023ce:	3301      	adds	r3, #1
 80023d0:	73fb      	strb	r3, [r7, #15]
 80023d2:	7bfb      	ldrb	r3, [r7, #15]
 80023d4:	2b02      	cmp	r3, #2
 80023d6:	d9ee      	bls.n	80023b6 <nRF24_SetTXAddress+0x42>
	//make pipe 0 address backup;

	nRF24_WriteRegisters(NRF24_RX_ADDR_P0, address_rev, NRF24_ADDR_SIZE); // Pipe 0 must be same for auto ACk
 80023d8:	f107 030c 	add.w	r3, r7, #12
 80023dc:	2203      	movs	r2, #3
 80023de:	4619      	mov	r1, r3
 80023e0:	200a      	movs	r0, #10
 80023e2:	f7ff fd65 	bl	8001eb0 <nRF24_WriteRegisters>
	nRF24_WriteRegisters(NRF24_TX_ADDR, address_rev, NRF24_ADDR_SIZE);
 80023e6:	f107 030c 	add.w	r3, r7, #12
 80023ea:	2203      	movs	r2, #3
 80023ec:	4619      	mov	r1, r3
 80023ee:	2010      	movs	r0, #16
 80023f0:	f7ff fd5e 	bl	8001eb0 <nRF24_WriteRegisters>

}
 80023f4:	bf00      	nop
 80023f6:	3710      	adds	r7, #16
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}
 80023fc:	240000a8 	.word	0x240000a8

08002400 <nRF24_ClearInterrupts>:

void nRF24_ClearInterrupts(void)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b082      	sub	sp, #8
 8002404:	af00      	add	r7, sp, #0
	uint8_t status = nRF24_ReadStatus();
 8002406:	f7ff fe28 	bl	800205a <nRF24_ReadStatus>
 800240a:	4603      	mov	r3, r0
 800240c:	71fb      	strb	r3, [r7, #7]
	status |= (7<<4); // Clear bits 4, 5, 6.
 800240e:	79fb      	ldrb	r3, [r7, #7]
 8002410:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 8002414:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteStatus(status);
 8002416:	79fb      	ldrb	r3, [r7, #7]
 8002418:	4618      	mov	r0, r3
 800241a:	f7ff fe26 	bl	800206a <nRF24_WriteStatus>
}
 800241e:	bf00      	nop
 8002420:	3708      	adds	r7, #8
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}

08002426 <nRF24_EnableRXDataReadyIRQ>:

void nRF24_EnableRXDataReadyIRQ(uint8_t onoff)
{
 8002426:	b580      	push	{r7, lr}
 8002428:	b084      	sub	sp, #16
 800242a:	af00      	add	r7, sp, #0
 800242c:	4603      	mov	r3, r0
 800242e:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 8002430:	f7ff fdb8 	bl	8001fa4 <nRF24_ReadConfig>
 8002434:	4603      	mov	r3, r0
 8002436:	73fb      	strb	r3, [r7, #15]

	if(!onoff)
 8002438:	79fb      	ldrb	r3, [r7, #7]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d104      	bne.n	8002448 <nRF24_EnableRXDataReadyIRQ+0x22>
		config |= (1<<NRF24_RX_DR);
 800243e:	7bfb      	ldrb	r3, [r7, #15]
 8002440:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002444:	73fb      	strb	r3, [r7, #15]
 8002446:	e003      	b.n	8002450 <nRF24_EnableRXDataReadyIRQ+0x2a>
	else
		config &= ~(1<<NRF24_RX_DR);
 8002448:	7bfb      	ldrb	r3, [r7, #15]
 800244a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800244e:	73fb      	strb	r3, [r7, #15]

	nRF24_WriteConfig(config);
 8002450:	7bfb      	ldrb	r3, [r7, #15]
 8002452:	4618      	mov	r0, r3
 8002454:	f7ff fdae 	bl	8001fb4 <nRF24_WriteConfig>
}
 8002458:	bf00      	nop
 800245a:	3710      	adds	r7, #16
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}

08002460 <nRF24_EnableTXDataSentIRQ>:

void nRF24_EnableTXDataSentIRQ(uint8_t onoff)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b084      	sub	sp, #16
 8002464:	af00      	add	r7, sp, #0
 8002466:	4603      	mov	r3, r0
 8002468:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 800246a:	f7ff fd9b 	bl	8001fa4 <nRF24_ReadConfig>
 800246e:	4603      	mov	r3, r0
 8002470:	73fb      	strb	r3, [r7, #15]

	if(!onoff)
 8002472:	79fb      	ldrb	r3, [r7, #7]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d104      	bne.n	8002482 <nRF24_EnableTXDataSentIRQ+0x22>
		config |= (1<<NRF24_TX_DS);
 8002478:	7bfb      	ldrb	r3, [r7, #15]
 800247a:	f043 0320 	orr.w	r3, r3, #32
 800247e:	73fb      	strb	r3, [r7, #15]
 8002480:	e003      	b.n	800248a <nRF24_EnableTXDataSentIRQ+0x2a>
	else
		config &= ~(1<<NRF24_TX_DS);
 8002482:	7bfb      	ldrb	r3, [r7, #15]
 8002484:	f023 0320 	bic.w	r3, r3, #32
 8002488:	73fb      	strb	r3, [r7, #15]

	nRF24_WriteConfig(config);
 800248a:	7bfb      	ldrb	r3, [r7, #15]
 800248c:	4618      	mov	r0, r3
 800248e:	f7ff fd91 	bl	8001fb4 <nRF24_WriteConfig>
}
 8002492:	bf00      	nop
 8002494:	3710      	adds	r7, #16
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}

0800249a <nRF24_EnableMaxRetransmitIRQ>:

void nRF24_EnableMaxRetransmitIRQ(uint8_t onoff)
{
 800249a:	b580      	push	{r7, lr}
 800249c:	b084      	sub	sp, #16
 800249e:	af00      	add	r7, sp, #0
 80024a0:	4603      	mov	r3, r0
 80024a2:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 80024a4:	f7ff fd7e 	bl	8001fa4 <nRF24_ReadConfig>
 80024a8:	4603      	mov	r3, r0
 80024aa:	73fb      	strb	r3, [r7, #15]

	if(!onoff)
 80024ac:	79fb      	ldrb	r3, [r7, #7]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d104      	bne.n	80024bc <nRF24_EnableMaxRetransmitIRQ+0x22>
		config |= (1<<NRF24_MAX_RT);
 80024b2:	7bfb      	ldrb	r3, [r7, #15]
 80024b4:	f043 0310 	orr.w	r3, r3, #16
 80024b8:	73fb      	strb	r3, [r7, #15]
 80024ba:	e003      	b.n	80024c4 <nRF24_EnableMaxRetransmitIRQ+0x2a>
	else
		config &= ~(1<<NRF24_MAX_RT);
 80024bc:	7bfb      	ldrb	r3, [r7, #15]
 80024be:	f023 0310 	bic.w	r3, r3, #16
 80024c2:	73fb      	strb	r3, [r7, #15]

	nRF24_WriteConfig(config);
 80024c4:	7bfb      	ldrb	r3, [r7, #15]
 80024c6:	4618      	mov	r0, r3
 80024c8:	f7ff fd74 	bl	8001fb4 <nRF24_WriteConfig>
}
 80024cc:	bf00      	nop
 80024ce:	3710      	adds	r7, #16
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}

080024d4 <nRF24_WriteTXPayload>:

void nRF24_WriteTXPayload(uint8_t * data/*, uint8_t size*/)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b082      	sub	sp, #8
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
	nRF24_WriteRegisters(NRF24_CMD_W_TX_PAYLOAD, data, NRF24_PAYLOAD_SIZE);
 80024dc:	2220      	movs	r2, #32
 80024de:	6879      	ldr	r1, [r7, #4]
 80024e0:	20a0      	movs	r0, #160	@ 0xa0
 80024e2:	f7ff fce5 	bl	8001eb0 <nRF24_WriteRegisters>
	//nRF24_WaitTX();
}
 80024e6:	bf00      	nop
 80024e8:	3708      	adds	r7, #8
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}
	...

080024f0 <nRF24_WaitTX>:

void nRF24_WaitTX()
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b082      	sub	sp, #8
 80024f4:	af00      	add	r7, sp, #0
	uint8_t status;
	NRF24_CE_HIGH;
 80024f6:	2201      	movs	r2, #1
 80024f8:	2140      	movs	r1, #64	@ 0x40
 80024fa:	4810      	ldr	r0, [pc, #64]	@ (800253c <nRF24_WaitTX+0x4c>)
 80024fc:	f00c f808 	bl	800e510 <HAL_GPIO_WritePin>
	nRF24_Delay(1);
 8002500:	2001      	movs	r0, #1
 8002502:	f7ff fc2f 	bl	8001d64 <nRF24_Delay>
	NRF24_CE_LOW;
 8002506:	2200      	movs	r2, #0
 8002508:	2140      	movs	r1, #64	@ 0x40
 800250a:	480c      	ldr	r0, [pc, #48]	@ (800253c <nRF24_WaitTX+0x4c>)
 800250c:	f00c f800 	bl	800e510 <HAL_GPIO_WritePin>
	do
	{
		nRF24_Delay(1);
 8002510:	2001      	movs	r0, #1
 8002512:	f7ff fc27 	bl	8001d64 <nRF24_Delay>
		status = nRF24_ReadStatus();
 8002516:	f7ff fda0 	bl	800205a <nRF24_ReadStatus>
 800251a:	4603      	mov	r3, r0
 800251c:	71fb      	strb	r3, [r7, #7]
	}while(!((status & (1<<NRF24_MAX_RT)) || (status & (1<<NRF24_TX_DS))));
 800251e:	79fb      	ldrb	r3, [r7, #7]
 8002520:	f003 0310 	and.w	r3, r3, #16
 8002524:	2b00      	cmp	r3, #0
 8002526:	d104      	bne.n	8002532 <nRF24_WaitTX+0x42>
 8002528:	79fb      	ldrb	r3, [r7, #7]
 800252a:	f003 0320 	and.w	r3, r3, #32
 800252e:	2b00      	cmp	r3, #0
 8002530:	d0ee      	beq.n	8002510 <nRF24_WaitTX+0x20>

}
 8002532:	bf00      	nop
 8002534:	3708      	adds	r7, #8
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}
 800253a:	bf00      	nop
 800253c:	58020400 	.word	0x58020400

08002540 <nRF24_ReadRXPaylaod>:

void nRF24_ReadRXPaylaod(uint8_t *data/*, uint8_t *size*/)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b082      	sub	sp, #8
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
	nRF24_ReadRegisters(NRF24_CMD_R_RX_PAYLOAD, data, NRF24_PAYLOAD_SIZE);
 8002548:	2220      	movs	r2, #32
 800254a:	6879      	ldr	r1, [r7, #4]
 800254c:	2061      	movs	r0, #97	@ 0x61
 800254e:	f7ff fc65 	bl	8001e1c <nRF24_ReadRegisters>
	nRF24_WriteRegister(NRF24_STATUS, (1<<NRF24_RX_DR));
 8002552:	2140      	movs	r1, #64	@ 0x40
 8002554:	2007      	movs	r0, #7
 8002556:	f7ff fc85 	bl	8001e64 <nRF24_WriteRegister>

	if(nRF24_ReadStatus() & (1<<NRF24_TX_DS)){
 800255a:	f7ff fd7e 	bl	800205a <nRF24_ReadStatus>
 800255e:	4603      	mov	r3, r0
 8002560:	f003 0320 	and.w	r3, r3, #32
 8002564:	2b00      	cmp	r3, #0
 8002566:	d003      	beq.n	8002570 <nRF24_ReadRXPaylaod+0x30>
		nRF24_WriteRegister(NRF24_STATUS, (1<<NRF24_TX_DS));
 8002568:	2120      	movs	r1, #32
 800256a:	2007      	movs	r0, #7
 800256c:	f7ff fc7a 	bl	8001e64 <nRF24_WriteRegister>
//	nRF24_ReadRegisters(NRF24_CMD_R_RX_PAYLOAD, data, *size);
//
//	nRF24_WriteRegister(NRF24_STATUS, (1<NRF24_RX_DR));
//	if(nRF24_ReadStatus() & (1<<NRF24_TX_DS))
//		nRF24_WriteRegister(NRF24_STATUS, (1<<NRF24_TX_DS));
}
 8002570:	bf00      	nop
 8002572:	3708      	adds	r7, #8
 8002574:	46bd      	mov	sp, r7
 8002576:	bd80      	pop	{r7, pc}

08002578 <nRF24_IsBitSetInFifoStatus>:

	return 0;
}

uint8_t nRF24_IsBitSetInFifoStatus(uint8_t Bit)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b084      	sub	sp, #16
 800257c:	af00      	add	r7, sp, #0
 800257e:	4603      	mov	r3, r0
 8002580:	71fb      	strb	r3, [r7, #7]
	uint8_t FifoStatus;

	FifoStatus = nRF24_ReadFifoStatus();
 8002582:	f000 f811 	bl	80025a8 <nRF24_ReadFifoStatus>
 8002586:	4603      	mov	r3, r0
 8002588:	73fb      	strb	r3, [r7, #15]

	if(FifoStatus & (1<<Bit))
 800258a:	7bfa      	ldrb	r2, [r7, #15]
 800258c:	79fb      	ldrb	r3, [r7, #7]
 800258e:	fa42 f303 	asr.w	r3, r2, r3
 8002592:	f003 0301 	and.w	r3, r3, #1
 8002596:	2b00      	cmp	r3, #0
 8002598:	d001      	beq.n	800259e <nRF24_IsBitSetInFifoStatus+0x26>
	{
		return 1;
 800259a:	2301      	movs	r3, #1
 800259c:	e000      	b.n	80025a0 <nRF24_IsBitSetInFifoStatus+0x28>
	}

	return 0;
 800259e:	2300      	movs	r3, #0
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	3710      	adds	r7, #16
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}

080025a8 <nRF24_ReadFifoStatus>:

uint8_t nRF24_ReadFifoStatus(void)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	af00      	add	r7, sp, #0
	return (nRF24_ReadRegister(NRF24_FIFO_STATUS));
 80025ac:	2017      	movs	r0, #23
 80025ae:	f7ff fc11 	bl	8001dd4 <nRF24_ReadRegister>
 80025b2:	4603      	mov	r3, r0
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	bd80      	pop	{r7, pc}

080025b8 <nRF24_Init>:



void nRF24_Init(SPI_HandleTypeDef *hspi)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b082      	sub	sp, #8
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
	hspi_nrf = hspi;
 80025c0:	4a25      	ldr	r2, [pc, #148]	@ (8002658 <nRF24_Init+0xa0>)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6013      	str	r3, [r2, #0]

	NRF24_CE_LOW;
 80025c6:	2200      	movs	r2, #0
 80025c8:	2140      	movs	r1, #64	@ 0x40
 80025ca:	4824      	ldr	r0, [pc, #144]	@ (800265c <nRF24_Init+0xa4>)
 80025cc:	f00b ffa0 	bl	800e510 <HAL_GPIO_WritePin>
	NRF24_CSN_HIGH;
 80025d0:	2201      	movs	r2, #1
 80025d2:	2180      	movs	r1, #128	@ 0x80
 80025d4:	4821      	ldr	r0, [pc, #132]	@ (800265c <nRF24_Init+0xa4>)
 80025d6:	f00b ff9b 	bl	800e510 <HAL_GPIO_WritePin>

	HAL_Delay(10); // Wait for radio power up
 80025da:	200a      	movs	r0, #10
 80025dc:	f006 fe3a 	bl	8009254 <HAL_Delay>

	nRF24_SetPALevel(NRF24_PA_PWR_0dBM); // Radio power
 80025e0:	2003      	movs	r0, #3
 80025e2:	f7ff fcf5 	bl	8001fd0 <nRF24_SetPALevel>
	nRF24_SetDataRate(NRF24_RF_DR_2MBPS); // Data Rate
 80025e6:	2001      	movs	r0, #1
 80025e8:	f7ff fd11 	bl	800200e <nRF24_SetDataRate>
	nRF24_EnableCRC(1); // Enable CRC
 80025ec:	2001      	movs	r0, #1
 80025ee:	f7ff fd7f 	bl	80020f0 <nRF24_EnableCRC>
	nRF24_SetCRCLength(NRF24_CRC_WIDTH_1B); // CRC Length 1 byte
 80025f2:	2000      	movs	r0, #0
 80025f4:	f7ff fd99 	bl	800212a <nRF24_SetCRCLength>
	nRF24_SetRetries(0x00, 0x00); // 1000us, 0 times
 80025f8:	2100      	movs	r1, #0
 80025fa:	2000      	movs	r0, #0
 80025fc:	f7ff fdb2 	bl	8002164 <nRF24_SetRetries>

#if (NRF24_DYNAMIC_PAYLOAD == 1)
	nRF24_WriteRegister(NRF24_FEATURE, nRF24_ReadRegister(NRF24_FEATURE) | (1<<NRF24_EN_DPL)); // Enable dynamic payload feature
	nRF24_WriteRegister(NRF24_DYNPD, 0x3F); // Enable dynamic payloads for all pipes
#else
	nRF24_WriteRegister(NRF24_DYNPD, 0); // Disable dynamic payloads for all pipes
 8002600:	2100      	movs	r1, #0
 8002602:	201c      	movs	r0, #28
 8002604:	f7ff fc2e 	bl	8001e64 <nRF24_WriteRegister>
	nRF24_SetPayloadSize(0, NRF24_PAYLOAD_SIZE); // Set 32 bytes payload for pipe 0
 8002608:	2120      	movs	r1, #32
 800260a:	2000      	movs	r0, #0
 800260c:	f7ff fdd6 	bl	80021bc <nRF24_SetPayloadSize>
#endif
	nRF24_SetRFChannel(15); // Set RF channel for transmission
 8002610:	200f      	movs	r0, #15
 8002612:	f7ff fdc2 	bl	800219a <nRF24_SetRFChannel>
	nRF24_EnablePipe(0, 1); // Enable pipe 0
 8002616:	2101      	movs	r1, #1
 8002618:	2000      	movs	r0, #0
 800261a:	f7ff fdeb 	bl	80021f4 <nRF24_EnablePipe>
	nRF24_AutoACK(0, 1); // Enable auto ACK for pipe 0
 800261e:	2101      	movs	r1, #1
 8002620:	2000      	movs	r0, #0
 8002622:	f7ff fe1c 	bl	800225e <nRF24_AutoACK>
	nRF24_SetAddressWidth(NRF24_ADDR_SIZE); // Set address size
 8002626:	2003      	movs	r0, #3
 8002628:	f7ff fe4e 	bl	80022c8 <nRF24_SetAddressWidth>

	HAL_Delay(1);
 800262c:	2001      	movs	r0, #1
 800262e:	f006 fe11 	bl	8009254 <HAL_Delay>

	nRF24_EnableRXDataReadyIRQ(1);
 8002632:	2001      	movs	r0, #1
 8002634:	f7ff fef7 	bl	8002426 <nRF24_EnableRXDataReadyIRQ>
	nRF24_EnableTXDataSentIRQ(0);
 8002638:	2000      	movs	r0, #0
 800263a:	f7ff ff11 	bl	8002460 <nRF24_EnableTXDataSentIRQ>
	nRF24_EnableMaxRetransmitIRQ(0);
 800263e:	2000      	movs	r0, #0
 8002640:	f7ff ff2b 	bl	800249a <nRF24_EnableMaxRetransmitIRQ>

	HAL_Delay(1);
 8002644:	2001      	movs	r0, #1
 8002646:	f006 fe05 	bl	8009254 <HAL_Delay>

	nRF24_ClearInterrupts();
 800264a:	f7ff fed9 	bl	8002400 <nRF24_ClearInterrupts>


}
 800264e:	bf00      	nop
 8002650:	3708      	adds	r7, #8
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}
 8002656:	bf00      	nop
 8002658:	240000a4 	.word	0x240000a4
 800265c:	58020400 	.word	0x58020400

08002660 <nRF24_Inittest>:
void nRF24_Inittest(void)
{
 8002660:	b480      	push	{r7}
 8002662:	af00      	add	r7, sp, #0
//	xz[5] = nRF24_ReadRegister(NRF24_EN_RXADDR);
//	xz[6] = nRF24_ReadRegister(NRF24_EN_AA);
//	xz[7] = nRF24_ReadRegister(NRF24_SETUP_AW);
//	xz[8] = nRF24_ReadConfig();

}
 8002664:	bf00      	nop
 8002666:	46bd      	mov	sp, r7
 8002668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266c:	4770      	bx	lr
	...

08002670 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8002670:	b480      	push	{r7}
 8002672:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002674:	f3bf 8f4f 	dsb	sy
}
 8002678:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800267a:	4b06      	ldr	r3, [pc, #24]	@ (8002694 <__NVIC_SystemReset+0x24>)
 800267c:	68db      	ldr	r3, [r3, #12]
 800267e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002682:	4904      	ldr	r1, [pc, #16]	@ (8002694 <__NVIC_SystemReset+0x24>)
 8002684:	4b04      	ldr	r3, [pc, #16]	@ (8002698 <__NVIC_SystemReset+0x28>)
 8002686:	4313      	orrs	r3, r2
 8002688:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800268a:	f3bf 8f4f 	dsb	sy
}
 800268e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8002690:	bf00      	nop
 8002692:	e7fd      	b.n	8002690 <__NVIC_SystemReset+0x20>
 8002694:	e000ed00 	.word	0xe000ed00
 8002698:	05fa0004 	.word	0x05fa0004

0800269c <interpretcommand>:
#include "main.h"

void interpretcommand(void){
 800269c:	b480      	push	{r7}
 800269e:	b087      	sub	sp, #28
 80026a0:	af00      	add	r7, sp, #0

	uint8_t vcount = 0, J1 = 0;
 80026a2:	2300      	movs	r3, #0
 80026a4:	75fb      	strb	r3, [r7, #23]
 80026a6:	2300      	movs	r3, #0
 80026a8:	75bb      	strb	r3, [r7, #22]
	char value1[10];


	commandready = 0;
 80026aa:	4b1f      	ldr	r3, [pc, #124]	@ (8002728 <interpretcommand+0x8c>)
 80026ac:	2200      	movs	r2, #0
 80026ae:	701a      	strb	r2, [r3, #0]

	for(int j = 0; j < 80; j++){
 80026b0:	2300      	movs	r3, #0
 80026b2:	613b      	str	r3, [r7, #16]
 80026b4:	e02e      	b.n	8002714 <interpretcommand+0x78>

		if(words[j] == ' '){
 80026b6:	4a1d      	ldr	r2, [pc, #116]	@ (800272c <interpretcommand+0x90>)
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	4413      	add	r3, r2
 80026bc:	781b      	ldrb	r3, [r3, #0]
 80026be:	2b20      	cmp	r3, #32
 80026c0:	d102      	bne.n	80026c8 <interpretcommand+0x2c>
			vcount++;
 80026c2:	7dfb      	ldrb	r3, [r7, #23]
 80026c4:	3301      	adds	r3, #1
 80026c6:	75fb      	strb	r3, [r7, #23]
		}
		if(vcount == 0){
 80026c8:	7dfb      	ldrb	r3, [r7, #23]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d108      	bne.n	80026e0 <interpretcommand+0x44>
			command[j] = words[j];
 80026ce:	4a17      	ldr	r2, [pc, #92]	@ (800272c <interpretcommand+0x90>)
 80026d0:	693b      	ldr	r3, [r7, #16]
 80026d2:	4413      	add	r3, r2
 80026d4:	7819      	ldrb	r1, [r3, #0]
 80026d6:	4a16      	ldr	r2, [pc, #88]	@ (8002730 <interpretcommand+0x94>)
 80026d8:	693b      	ldr	r3, [r7, #16]
 80026da:	4413      	add	r3, r2
 80026dc:	460a      	mov	r2, r1
 80026de:	701a      	strb	r2, [r3, #0]
		}
		if(vcount == 1){
 80026e0:	7dfb      	ldrb	r3, [r7, #23]
 80026e2:	2b01      	cmp	r3, #1
 80026e4:	d113      	bne.n	800270e <interpretcommand+0x72>
			value1[J1] = words[j];
 80026e6:	7dbb      	ldrb	r3, [r7, #22]
 80026e8:	4910      	ldr	r1, [pc, #64]	@ (800272c <interpretcommand+0x90>)
 80026ea:	693a      	ldr	r2, [r7, #16]
 80026ec:	440a      	add	r2, r1
 80026ee:	7812      	ldrb	r2, [r2, #0]
 80026f0:	3318      	adds	r3, #24
 80026f2:	443b      	add	r3, r7
 80026f4:	f803 2c14 	strb.w	r2, [r3, #-20]
			UASRT_PID_VAL[J1] = (int)value1[J1];//;printf("%d", value11[i]);
 80026f8:	7dba      	ldrb	r2, [r7, #22]
 80026fa:	7dbb      	ldrb	r3, [r7, #22]
 80026fc:	3218      	adds	r2, #24
 80026fe:	443a      	add	r2, r7
 8002700:	f812 1c14 	ldrb.w	r1, [r2, #-20]
 8002704:	4a0b      	ldr	r2, [pc, #44]	@ (8002734 <interpretcommand+0x98>)
 8002706:	54d1      	strb	r1, [r2, r3]
			J1++;
 8002708:	7dbb      	ldrb	r3, [r7, #22]
 800270a:	3301      	adds	r3, #1
 800270c:	75bb      	strb	r3, [r7, #22]
	for(int j = 0; j < 80; j++){
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	3301      	adds	r3, #1
 8002712:	613b      	str	r3, [r7, #16]
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	2b4f      	cmp	r3, #79	@ 0x4f
 8002718:	ddcd      	ble.n	80026b6 <interpretcommand+0x1a>
		}
	}
}
 800271a:	bf00      	nop
 800271c:	bf00      	nop
 800271e:	371c      	adds	r7, #28
 8002720:	46bd      	mov	sp, r7
 8002722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002726:	4770      	bx	lr
 8002728:	0000419e 	.word	0x0000419e
 800272c:	00004194 	.word	0x00004194
 8002730:	00004190 	.word	0x00004190
 8002734:	00004180 	.word	0x00004180

08002738 <executecommand>:

void executecommand(char command[], uint8_t value1[]){
 8002738:	b580      	push	{r7, lr}
 800273a:	b084      	sub	sp, #16
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
 8002740:	6039      	str	r1, [r7, #0]

	if(command[0] == 'P')
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	781b      	ldrb	r3, [r3, #0]
 8002746:	2b50      	cmp	r3, #80	@ 0x50
 8002748:	d14c      	bne.n	80027e4 <executecommand+0xac>
	{
		p_pitchfactor = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 800274a:	4bd5      	ldr	r3, [pc, #852]	@ (8002aa0 <executecommand+0x368>)
 800274c:	785b      	ldrb	r3, [r3, #1]
 800274e:	ee07 3a90 	vmov	s15, r3
 8002752:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002756:	ed9f 7ad3 	vldr	s14, [pc, #844]	@ 8002aa4 <executecommand+0x36c>
 800275a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800275e:	ed9f 7ad2 	vldr	s14, [pc, #840]	@ 8002aa8 <executecommand+0x370>
 8002762:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002766:	4bce      	ldr	r3, [pc, #824]	@ (8002aa0 <executecommand+0x368>)
 8002768:	789b      	ldrb	r3, [r3, #2]
 800276a:	ee07 3a90 	vmov	s15, r3
 800276e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002772:	eddf 6acc 	vldr	s13, [pc, #816]	@ 8002aa4 <executecommand+0x36c>
 8002776:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800277a:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 800277e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002782:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002786:	4bc6      	ldr	r3, [pc, #792]	@ (8002aa0 <executecommand+0x368>)
 8002788:	78db      	ldrb	r3, [r3, #3]
 800278a:	ee07 3a90 	vmov	s15, r3
 800278e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002792:	eddf 6ac4 	vldr	s13, [pc, #784]	@ 8002aa4 <executecommand+0x36c>
 8002796:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800279a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800279e:	4bc0      	ldr	r3, [pc, #768]	@ (8002aa0 <executecommand+0x368>)
 80027a0:	791b      	ldrb	r3, [r3, #4]
 80027a2:	ee07 3a90 	vmov	s15, r3
 80027a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027aa:	eddf 6abe 	vldr	s13, [pc, #760]	@ 8002aa4 <executecommand+0x36c>
 80027ae:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80027b2:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 80027b6:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80027ba:	ee37 7a27 	vadd.f32	s14, s14, s15
 80027be:	4bb8      	ldr	r3, [pc, #736]	@ (8002aa0 <executecommand+0x368>)
 80027c0:	795b      	ldrb	r3, [r3, #5]
 80027c2:	ee07 3a90 	vmov	s15, r3
 80027c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027ca:	eddf 6ab6 	vldr	s13, [pc, #728]	@ 8002aa4 <executecommand+0x36c>
 80027ce:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80027d2:	ed9f 6ab5 	vldr	s12, [pc, #724]	@ 8002aa8 <executecommand+0x370>
 80027d6:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80027da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027de:	4bb3      	ldr	r3, [pc, #716]	@ (8002aac <executecommand+0x374>)
 80027e0:	edc3 7a00 	vstr	s15, [r3]
	}

	if(command[0] == 'I')
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	781b      	ldrb	r3, [r3, #0]
 80027e8:	2b49      	cmp	r3, #73	@ 0x49
 80027ea:	d14f      	bne.n	800288c <executecommand+0x154>
	{
		i_pitchfactor = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 80027ec:	4bac      	ldr	r3, [pc, #688]	@ (8002aa0 <executecommand+0x368>)
 80027ee:	785b      	ldrb	r3, [r3, #1]
 80027f0:	ee07 3a90 	vmov	s15, r3
 80027f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027f8:	ed9f 7aaa 	vldr	s14, [pc, #680]	@ 8002aa4 <executecommand+0x36c>
 80027fc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002800:	ed9f 7aa9 	vldr	s14, [pc, #676]	@ 8002aa8 <executecommand+0x370>
 8002804:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002808:	4ba5      	ldr	r3, [pc, #660]	@ (8002aa0 <executecommand+0x368>)
 800280a:	789b      	ldrb	r3, [r3, #2]
 800280c:	ee07 3a90 	vmov	s15, r3
 8002810:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002814:	eddf 6aa3 	vldr	s13, [pc, #652]	@ 8002aa4 <executecommand+0x36c>
 8002818:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800281c:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002820:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002824:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002828:	4b9d      	ldr	r3, [pc, #628]	@ (8002aa0 <executecommand+0x368>)
 800282a:	78db      	ldrb	r3, [r3, #3]
 800282c:	ee07 3a90 	vmov	s15, r3
 8002830:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002834:	eddf 6a9b 	vldr	s13, [pc, #620]	@ 8002aa4 <executecommand+0x36c>
 8002838:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800283c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002840:	4b97      	ldr	r3, [pc, #604]	@ (8002aa0 <executecommand+0x368>)
 8002842:	791b      	ldrb	r3, [r3, #4]
 8002844:	ee07 3a90 	vmov	s15, r3
 8002848:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800284c:	eddf 6a95 	vldr	s13, [pc, #596]	@ 8002aa4 <executecommand+0x36c>
 8002850:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002854:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8002858:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800285c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002860:	4b8f      	ldr	r3, [pc, #572]	@ (8002aa0 <executecommand+0x368>)
 8002862:	795b      	ldrb	r3, [r3, #5]
 8002864:	ee07 3a90 	vmov	s15, r3
 8002868:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800286c:	eddf 6a8d 	vldr	s13, [pc, #564]	@ 8002aa4 <executecommand+0x36c>
 8002870:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002874:	ed9f 6a8c 	vldr	s12, [pc, #560]	@ 8002aa8 <executecommand+0x370>
 8002878:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800287c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002880:	4b8b      	ldr	r3, [pc, #556]	@ (8002ab0 <executecommand+0x378>)
 8002882:	edc3 7a00 	vstr	s15, [r3]
		error_sum_pitch = 0;
 8002886:	4b8b      	ldr	r3, [pc, #556]	@ (8002ab4 <executecommand+0x37c>)
 8002888:	2200      	movs	r2, #0
 800288a:	601a      	str	r2, [r3, #0]
	}

	if(command[0] == 'D')
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	781b      	ldrb	r3, [r3, #0]
 8002890:	2b44      	cmp	r3, #68	@ 0x44
 8002892:	d14c      	bne.n	800292e <executecommand+0x1f6>
	{
		d_pitchfactor = ((((float)UASRT_PID_VAL[1])-48)*1000) + ((((float)UASRT_PID_VAL[2])-48)*100) + ((((float)UASRT_PID_VAL[3])-48)*10) + ((((float)UASRT_PID_VAL[4])-48)) + ((((float)UASRT_PID_VAL[5])-48)/10);
 8002894:	4b82      	ldr	r3, [pc, #520]	@ (8002aa0 <executecommand+0x368>)
 8002896:	785b      	ldrb	r3, [r3, #1]
 8002898:	ee07 3a90 	vmov	s15, r3
 800289c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028a0:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 8002aa4 <executecommand+0x36c>
 80028a4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80028a8:	ed9f 7a83 	vldr	s14, [pc, #524]	@ 8002ab8 <executecommand+0x380>
 80028ac:	ee27 7a87 	vmul.f32	s14, s15, s14
 80028b0:	4b7b      	ldr	r3, [pc, #492]	@ (8002aa0 <executecommand+0x368>)
 80028b2:	789b      	ldrb	r3, [r3, #2]
 80028b4:	ee07 3a90 	vmov	s15, r3
 80028b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028bc:	eddf 6a79 	vldr	s13, [pc, #484]	@ 8002aa4 <executecommand+0x36c>
 80028c0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80028c4:	eddf 6a78 	vldr	s13, [pc, #480]	@ 8002aa8 <executecommand+0x370>
 80028c8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80028cc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80028d0:	4b73      	ldr	r3, [pc, #460]	@ (8002aa0 <executecommand+0x368>)
 80028d2:	78db      	ldrb	r3, [r3, #3]
 80028d4:	ee07 3a90 	vmov	s15, r3
 80028d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028dc:	eddf 6a71 	vldr	s13, [pc, #452]	@ 8002aa4 <executecommand+0x36c>
 80028e0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80028e4:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 80028e8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80028ec:	ee37 7a27 	vadd.f32	s14, s14, s15
 80028f0:	4b6b      	ldr	r3, [pc, #428]	@ (8002aa0 <executecommand+0x368>)
 80028f2:	791b      	ldrb	r3, [r3, #4]
 80028f4:	ee07 3a90 	vmov	s15, r3
 80028f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028fc:	eddf 6a69 	vldr	s13, [pc, #420]	@ 8002aa4 <executecommand+0x36c>
 8002900:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002904:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002908:	4b65      	ldr	r3, [pc, #404]	@ (8002aa0 <executecommand+0x368>)
 800290a:	795b      	ldrb	r3, [r3, #5]
 800290c:	ee07 3a90 	vmov	s15, r3
 8002910:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002914:	eddf 6a63 	vldr	s13, [pc, #396]	@ 8002aa4 <executecommand+0x36c>
 8002918:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800291c:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8002920:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002924:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002928:	4b64      	ldr	r3, [pc, #400]	@ (8002abc <executecommand+0x384>)
 800292a:	edc3 7a00 	vstr	s15, [r3]
	}
	if(command[0] == 'p')
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	781b      	ldrb	r3, [r3, #0]
 8002932:	2b70      	cmp	r3, #112	@ 0x70
 8002934:	d14c      	bne.n	80029d0 <executecommand+0x298>
	{
		p_angular_rate_pitchfactor = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 8002936:	4b5a      	ldr	r3, [pc, #360]	@ (8002aa0 <executecommand+0x368>)
 8002938:	785b      	ldrb	r3, [r3, #1]
 800293a:	ee07 3a90 	vmov	s15, r3
 800293e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002942:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 8002aa4 <executecommand+0x36c>
 8002946:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800294a:	ed9f 7a57 	vldr	s14, [pc, #348]	@ 8002aa8 <executecommand+0x370>
 800294e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002952:	4b53      	ldr	r3, [pc, #332]	@ (8002aa0 <executecommand+0x368>)
 8002954:	789b      	ldrb	r3, [r3, #2]
 8002956:	ee07 3a90 	vmov	s15, r3
 800295a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800295e:	eddf 6a51 	vldr	s13, [pc, #324]	@ 8002aa4 <executecommand+0x36c>
 8002962:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002966:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 800296a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800296e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002972:	4b4b      	ldr	r3, [pc, #300]	@ (8002aa0 <executecommand+0x368>)
 8002974:	78db      	ldrb	r3, [r3, #3]
 8002976:	ee07 3a90 	vmov	s15, r3
 800297a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800297e:	eddf 6a49 	vldr	s13, [pc, #292]	@ 8002aa4 <executecommand+0x36c>
 8002982:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002986:	ee37 7a27 	vadd.f32	s14, s14, s15
 800298a:	4b45      	ldr	r3, [pc, #276]	@ (8002aa0 <executecommand+0x368>)
 800298c:	791b      	ldrb	r3, [r3, #4]
 800298e:	ee07 3a90 	vmov	s15, r3
 8002992:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002996:	eddf 6a43 	vldr	s13, [pc, #268]	@ 8002aa4 <executecommand+0x36c>
 800299a:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800299e:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 80029a2:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80029a6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80029aa:	4b3d      	ldr	r3, [pc, #244]	@ (8002aa0 <executecommand+0x368>)
 80029ac:	795b      	ldrb	r3, [r3, #5]
 80029ae:	ee07 3a90 	vmov	s15, r3
 80029b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029b6:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8002aa4 <executecommand+0x36c>
 80029ba:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80029be:	ed9f 6a3a 	vldr	s12, [pc, #232]	@ 8002aa8 <executecommand+0x370>
 80029c2:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80029c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029ca:	4b3d      	ldr	r3, [pc, #244]	@ (8002ac0 <executecommand+0x388>)
 80029cc:	edc3 7a00 	vstr	s15, [r3]
	}

	if(command[0] == 'i')
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	781b      	ldrb	r3, [r3, #0]
 80029d4:	2b69      	cmp	r3, #105	@ 0x69
 80029d6:	d14f      	bne.n	8002a78 <executecommand+0x340>
	{
		i_angular_rate_pitchfactor = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 80029d8:	4b31      	ldr	r3, [pc, #196]	@ (8002aa0 <executecommand+0x368>)
 80029da:	785b      	ldrb	r3, [r3, #1]
 80029dc:	ee07 3a90 	vmov	s15, r3
 80029e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029e4:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8002aa4 <executecommand+0x36c>
 80029e8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80029ec:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 8002aa8 <executecommand+0x370>
 80029f0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80029f4:	4b2a      	ldr	r3, [pc, #168]	@ (8002aa0 <executecommand+0x368>)
 80029f6:	789b      	ldrb	r3, [r3, #2]
 80029f8:	ee07 3a90 	vmov	s15, r3
 80029fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a00:	eddf 6a28 	vldr	s13, [pc, #160]	@ 8002aa4 <executecommand+0x36c>
 8002a04:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002a08:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002a0c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002a10:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a14:	4b22      	ldr	r3, [pc, #136]	@ (8002aa0 <executecommand+0x368>)
 8002a16:	78db      	ldrb	r3, [r3, #3]
 8002a18:	ee07 3a90 	vmov	s15, r3
 8002a1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a20:	eddf 6a20 	vldr	s13, [pc, #128]	@ 8002aa4 <executecommand+0x36c>
 8002a24:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002a28:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a2c:	4b1c      	ldr	r3, [pc, #112]	@ (8002aa0 <executecommand+0x368>)
 8002a2e:	791b      	ldrb	r3, [r3, #4]
 8002a30:	ee07 3a90 	vmov	s15, r3
 8002a34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a38:	eddf 6a1a 	vldr	s13, [pc, #104]	@ 8002aa4 <executecommand+0x36c>
 8002a3c:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002a40:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8002a44:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002a48:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a4c:	4b14      	ldr	r3, [pc, #80]	@ (8002aa0 <executecommand+0x368>)
 8002a4e:	795b      	ldrb	r3, [r3, #5]
 8002a50:	ee07 3a90 	vmov	s15, r3
 8002a54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a58:	eddf 6a12 	vldr	s13, [pc, #72]	@ 8002aa4 <executecommand+0x36c>
 8002a5c:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002a60:	ed9f 6a11 	vldr	s12, [pc, #68]	@ 8002aa8 <executecommand+0x370>
 8002a64:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002a68:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a6c:	4b15      	ldr	r3, [pc, #84]	@ (8002ac4 <executecommand+0x38c>)
 8002a6e:	edc3 7a00 	vstr	s15, [r3]
		error_sum_angular_rate_pitch = 0;
 8002a72:	4b15      	ldr	r3, [pc, #84]	@ (8002ac8 <executecommand+0x390>)
 8002a74:	2200      	movs	r2, #0
 8002a76:	601a      	str	r2, [r3, #0]
	}

	if(command[0] == 'd')
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	781b      	ldrb	r3, [r3, #0]
 8002a7c:	2b64      	cmp	r3, #100	@ 0x64
 8002a7e:	d164      	bne.n	8002b4a <executecommand+0x412>
	{
		d_angular_rate_pitchfactor = ((((float)UASRT_PID_VAL[1])-48)*1000) + ((((float)UASRT_PID_VAL[2])-48)*100) + ((((float)UASRT_PID_VAL[3])-48)*10) + ((((float)UASRT_PID_VAL[4])-48)) + ((((float)UASRT_PID_VAL[5])-48)/10);
 8002a80:	4b07      	ldr	r3, [pc, #28]	@ (8002aa0 <executecommand+0x368>)
 8002a82:	785b      	ldrb	r3, [r3, #1]
 8002a84:	ee07 3a90 	vmov	s15, r3
 8002a88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a8c:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8002aa4 <executecommand+0x36c>
 8002a90:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002a94:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8002ab8 <executecommand+0x380>
 8002a98:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002a9c:	e016      	b.n	8002acc <executecommand+0x394>
 8002a9e:	bf00      	nop
 8002aa0:	00004180 	.word	0x00004180
 8002aa4:	42400000 	.word	0x42400000
 8002aa8:	42c80000 	.word	0x42c80000
 8002aac:	000040ac 	.word	0x000040ac
 8002ab0:	000040b8 	.word	0x000040b8
 8002ab4:	0000407c 	.word	0x0000407c
 8002ab8:	447a0000 	.word	0x447a0000
 8002abc:	000040c4 	.word	0x000040c4
 8002ac0:	0000410c 	.word	0x0000410c
 8002ac4:	00004118 	.word	0x00004118
 8002ac8:	00004088 	.word	0x00004088
 8002acc:	4bd3      	ldr	r3, [pc, #844]	@ (8002e1c <executecommand+0x6e4>)
 8002ace:	789b      	ldrb	r3, [r3, #2]
 8002ad0:	ee07 3a90 	vmov	s15, r3
 8002ad4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ad8:	eddf 6ad1 	vldr	s13, [pc, #836]	@ 8002e20 <executecommand+0x6e8>
 8002adc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002ae0:	eddf 6ad0 	vldr	s13, [pc, #832]	@ 8002e24 <executecommand+0x6ec>
 8002ae4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002ae8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002aec:	4bcb      	ldr	r3, [pc, #812]	@ (8002e1c <executecommand+0x6e4>)
 8002aee:	78db      	ldrb	r3, [r3, #3]
 8002af0:	ee07 3a90 	vmov	s15, r3
 8002af4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002af8:	eddf 6ac9 	vldr	s13, [pc, #804]	@ 8002e20 <executecommand+0x6e8>
 8002afc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002b00:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002b04:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002b08:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b0c:	4bc3      	ldr	r3, [pc, #780]	@ (8002e1c <executecommand+0x6e4>)
 8002b0e:	791b      	ldrb	r3, [r3, #4]
 8002b10:	ee07 3a90 	vmov	s15, r3
 8002b14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b18:	eddf 6ac1 	vldr	s13, [pc, #772]	@ 8002e20 <executecommand+0x6e8>
 8002b1c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002b20:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b24:	4bbd      	ldr	r3, [pc, #756]	@ (8002e1c <executecommand+0x6e4>)
 8002b26:	795b      	ldrb	r3, [r3, #5]
 8002b28:	ee07 3a90 	vmov	s15, r3
 8002b2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b30:	eddf 6abb 	vldr	s13, [pc, #748]	@ 8002e20 <executecommand+0x6e8>
 8002b34:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002b38:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8002b3c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002b40:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b44:	4bb8      	ldr	r3, [pc, #736]	@ (8002e28 <executecommand+0x6f0>)
 8002b46:	edc3 7a00 	vstr	s15, [r3]
	}
	if(command[0] == 'F')
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	781b      	ldrb	r3, [r3, #0]
 8002b4e:	2b46      	cmp	r3, #70	@ 0x46
 8002b50:	d150      	bne.n	8002bf4 <executecommand+0x4bc>
	{
		FDP_D_Gain_AR = ((((float)UASRT_PID_VAL[1])-48)*1000) + ((((float)UASRT_PID_VAL[2])-48)*100) + ((((float)UASRT_PID_VAL[3])-48)*10) + ((((float)UASRT_PID_VAL[4])-48)) + ((((float)UASRT_PID_VAL[5])-48)/10);
 8002b52:	4bb2      	ldr	r3, [pc, #712]	@ (8002e1c <executecommand+0x6e4>)
 8002b54:	785b      	ldrb	r3, [r3, #1]
 8002b56:	ee07 3a90 	vmov	s15, r3
 8002b5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b5e:	ed9f 7ab0 	vldr	s14, [pc, #704]	@ 8002e20 <executecommand+0x6e8>
 8002b62:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002b66:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 8002e2c <executecommand+0x6f4>
 8002b6a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002b6e:	4bab      	ldr	r3, [pc, #684]	@ (8002e1c <executecommand+0x6e4>)
 8002b70:	789b      	ldrb	r3, [r3, #2]
 8002b72:	ee07 3a90 	vmov	s15, r3
 8002b76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b7a:	eddf 6aa9 	vldr	s13, [pc, #676]	@ 8002e20 <executecommand+0x6e8>
 8002b7e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002b82:	eddf 6aa8 	vldr	s13, [pc, #672]	@ 8002e24 <executecommand+0x6ec>
 8002b86:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002b8a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b8e:	4ba3      	ldr	r3, [pc, #652]	@ (8002e1c <executecommand+0x6e4>)
 8002b90:	78db      	ldrb	r3, [r3, #3]
 8002b92:	ee07 3a90 	vmov	s15, r3
 8002b96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b9a:	eddf 6aa1 	vldr	s13, [pc, #644]	@ 8002e20 <executecommand+0x6e8>
 8002b9e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002ba2:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002ba6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002baa:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002bae:	4b9b      	ldr	r3, [pc, #620]	@ (8002e1c <executecommand+0x6e4>)
 8002bb0:	791b      	ldrb	r3, [r3, #4]
 8002bb2:	ee07 3a90 	vmov	s15, r3
 8002bb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002bba:	eddf 6a99 	vldr	s13, [pc, #612]	@ 8002e20 <executecommand+0x6e8>
 8002bbe:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002bc2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002bc6:	4b95      	ldr	r3, [pc, #596]	@ (8002e1c <executecommand+0x6e4>)
 8002bc8:	795b      	ldrb	r3, [r3, #5]
 8002bca:	ee07 3a90 	vmov	s15, r3
 8002bce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002bd2:	eddf 6a93 	vldr	s13, [pc, #588]	@ 8002e20 <executecommand+0x6e8>
 8002bd6:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002bda:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8002bde:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002be2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002be6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002bea:	ee17 3a90 	vmov	r3, s15
 8002bee:	b21a      	sxth	r2, r3
 8002bf0:	4b8f      	ldr	r3, [pc, #572]	@ (8002e30 <executecommand+0x6f8>)
 8002bf2:	801a      	strh	r2, [r3, #0]
	}
	if(command[0] == 'f')
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	781b      	ldrb	r3, [r3, #0]
 8002bf8:	2b66      	cmp	r3, #102	@ 0x66
 8002bfa:	d150      	bne.n	8002c9e <executecommand+0x566>
	{
		FDP_D_Gain = ((((float)UASRT_PID_VAL[1])-48)*1000) + ((((float)UASRT_PID_VAL[2])-48)*100) + ((((float)UASRT_PID_VAL[3])-48)*10) + ((((float)UASRT_PID_VAL[4])-48)) + ((((float)UASRT_PID_VAL[5])-48)/10);
 8002bfc:	4b87      	ldr	r3, [pc, #540]	@ (8002e1c <executecommand+0x6e4>)
 8002bfe:	785b      	ldrb	r3, [r3, #1]
 8002c00:	ee07 3a90 	vmov	s15, r3
 8002c04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c08:	ed9f 7a85 	vldr	s14, [pc, #532]	@ 8002e20 <executecommand+0x6e8>
 8002c0c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002c10:	ed9f 7a86 	vldr	s14, [pc, #536]	@ 8002e2c <executecommand+0x6f4>
 8002c14:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002c18:	4b80      	ldr	r3, [pc, #512]	@ (8002e1c <executecommand+0x6e4>)
 8002c1a:	789b      	ldrb	r3, [r3, #2]
 8002c1c:	ee07 3a90 	vmov	s15, r3
 8002c20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c24:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 8002e20 <executecommand+0x6e8>
 8002c28:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002c2c:	eddf 6a7d 	vldr	s13, [pc, #500]	@ 8002e24 <executecommand+0x6ec>
 8002c30:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002c34:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c38:	4b78      	ldr	r3, [pc, #480]	@ (8002e1c <executecommand+0x6e4>)
 8002c3a:	78db      	ldrb	r3, [r3, #3]
 8002c3c:	ee07 3a90 	vmov	s15, r3
 8002c40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c44:	eddf 6a76 	vldr	s13, [pc, #472]	@ 8002e20 <executecommand+0x6e8>
 8002c48:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002c4c:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002c50:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002c54:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c58:	4b70      	ldr	r3, [pc, #448]	@ (8002e1c <executecommand+0x6e4>)
 8002c5a:	791b      	ldrb	r3, [r3, #4]
 8002c5c:	ee07 3a90 	vmov	s15, r3
 8002c60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c64:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8002e20 <executecommand+0x6e8>
 8002c68:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002c6c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c70:	4b6a      	ldr	r3, [pc, #424]	@ (8002e1c <executecommand+0x6e4>)
 8002c72:	795b      	ldrb	r3, [r3, #5]
 8002c74:	ee07 3a90 	vmov	s15, r3
 8002c78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c7c:	eddf 6a68 	vldr	s13, [pc, #416]	@ 8002e20 <executecommand+0x6e8>
 8002c80:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002c84:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8002c88:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002c8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c90:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002c94:	ee17 3a90 	vmov	r3, s15
 8002c98:	b21a      	sxth	r2, r3
 8002c9a:	4b66      	ldr	r3, [pc, #408]	@ (8002e34 <executecommand+0x6fc>)
 8002c9c:	801a      	strh	r2, [r3, #0]




//rool
	if(command[0] == 'a')
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	781b      	ldrb	r3, [r3, #0]
 8002ca2:	2b61      	cmp	r3, #97	@ 0x61
 8002ca4:	d14c      	bne.n	8002d40 <executecommand+0x608>
		{
			p_roolfactor = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 8002ca6:	4b5d      	ldr	r3, [pc, #372]	@ (8002e1c <executecommand+0x6e4>)
 8002ca8:	785b      	ldrb	r3, [r3, #1]
 8002caa:	ee07 3a90 	vmov	s15, r3
 8002cae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002cb2:	ed9f 7a5b 	vldr	s14, [pc, #364]	@ 8002e20 <executecommand+0x6e8>
 8002cb6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002cba:	ed9f 7a5a 	vldr	s14, [pc, #360]	@ 8002e24 <executecommand+0x6ec>
 8002cbe:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002cc2:	4b56      	ldr	r3, [pc, #344]	@ (8002e1c <executecommand+0x6e4>)
 8002cc4:	789b      	ldrb	r3, [r3, #2]
 8002cc6:	ee07 3a90 	vmov	s15, r3
 8002cca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002cce:	eddf 6a54 	vldr	s13, [pc, #336]	@ 8002e20 <executecommand+0x6e8>
 8002cd2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002cd6:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002cda:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002cde:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ce2:	4b4e      	ldr	r3, [pc, #312]	@ (8002e1c <executecommand+0x6e4>)
 8002ce4:	78db      	ldrb	r3, [r3, #3]
 8002ce6:	ee07 3a90 	vmov	s15, r3
 8002cea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002cee:	eddf 6a4c 	vldr	s13, [pc, #304]	@ 8002e20 <executecommand+0x6e8>
 8002cf2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002cf6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002cfa:	4b48      	ldr	r3, [pc, #288]	@ (8002e1c <executecommand+0x6e4>)
 8002cfc:	791b      	ldrb	r3, [r3, #4]
 8002cfe:	ee07 3a90 	vmov	s15, r3
 8002d02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d06:	eddf 6a46 	vldr	s13, [pc, #280]	@ 8002e20 <executecommand+0x6e8>
 8002d0a:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002d0e:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8002d12:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002d16:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d1a:	4b40      	ldr	r3, [pc, #256]	@ (8002e1c <executecommand+0x6e4>)
 8002d1c:	795b      	ldrb	r3, [r3, #5]
 8002d1e:	ee07 3a90 	vmov	s15, r3
 8002d22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d26:	eddf 6a3e 	vldr	s13, [pc, #248]	@ 8002e20 <executecommand+0x6e8>
 8002d2a:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002d2e:	ed9f 6a3d 	vldr	s12, [pc, #244]	@ 8002e24 <executecommand+0x6ec>
 8002d32:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002d36:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d3a:	4b3f      	ldr	r3, [pc, #252]	@ (8002e38 <executecommand+0x700>)
 8002d3c:	edc3 7a00 	vstr	s15, [r3]
		}

		if(command[0] == 'b')
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	781b      	ldrb	r3, [r3, #0]
 8002d44:	2b62      	cmp	r3, #98	@ 0x62
 8002d46:	d14f      	bne.n	8002de8 <executecommand+0x6b0>
		{
			i_roolfactor = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 8002d48:	4b34      	ldr	r3, [pc, #208]	@ (8002e1c <executecommand+0x6e4>)
 8002d4a:	785b      	ldrb	r3, [r3, #1]
 8002d4c:	ee07 3a90 	vmov	s15, r3
 8002d50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d54:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8002e20 <executecommand+0x6e8>
 8002d58:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002d5c:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8002e24 <executecommand+0x6ec>
 8002d60:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002d64:	4b2d      	ldr	r3, [pc, #180]	@ (8002e1c <executecommand+0x6e4>)
 8002d66:	789b      	ldrb	r3, [r3, #2]
 8002d68:	ee07 3a90 	vmov	s15, r3
 8002d6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d70:	eddf 6a2b 	vldr	s13, [pc, #172]	@ 8002e20 <executecommand+0x6e8>
 8002d74:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002d78:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002d7c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002d80:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d84:	4b25      	ldr	r3, [pc, #148]	@ (8002e1c <executecommand+0x6e4>)
 8002d86:	78db      	ldrb	r3, [r3, #3]
 8002d88:	ee07 3a90 	vmov	s15, r3
 8002d8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d90:	eddf 6a23 	vldr	s13, [pc, #140]	@ 8002e20 <executecommand+0x6e8>
 8002d94:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002d98:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d9c:	4b1f      	ldr	r3, [pc, #124]	@ (8002e1c <executecommand+0x6e4>)
 8002d9e:	791b      	ldrb	r3, [r3, #4]
 8002da0:	ee07 3a90 	vmov	s15, r3
 8002da4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002da8:	eddf 6a1d 	vldr	s13, [pc, #116]	@ 8002e20 <executecommand+0x6e8>
 8002dac:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002db0:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8002db4:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002db8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002dbc:	4b17      	ldr	r3, [pc, #92]	@ (8002e1c <executecommand+0x6e4>)
 8002dbe:	795b      	ldrb	r3, [r3, #5]
 8002dc0:	ee07 3a90 	vmov	s15, r3
 8002dc4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002dc8:	eddf 6a15 	vldr	s13, [pc, #84]	@ 8002e20 <executecommand+0x6e8>
 8002dcc:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002dd0:	ed9f 6a14 	vldr	s12, [pc, #80]	@ 8002e24 <executecommand+0x6ec>
 8002dd4:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002dd8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ddc:	4b17      	ldr	r3, [pc, #92]	@ (8002e3c <executecommand+0x704>)
 8002dde:	edc3 7a00 	vstr	s15, [r3]
			error_sum_rool = 0;
 8002de2:	4b17      	ldr	r3, [pc, #92]	@ (8002e40 <executecommand+0x708>)
 8002de4:	2200      	movs	r2, #0
 8002de6:	601a      	str	r2, [r3, #0]
		}

		if(command[0] == 'c')
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	781b      	ldrb	r3, [r3, #0]
 8002dec:	2b63      	cmp	r3, #99	@ 0x63
 8002dee:	d166      	bne.n	8002ebe <executecommand+0x786>
		{
			d_roolfactor = ((((float)UASRT_PID_VAL[1])-48)*1000) + ((((float)UASRT_PID_VAL[2])-48)*100) + ((((float)UASRT_PID_VAL[3])-48)*10) + ((((float)UASRT_PID_VAL[4])-48)) + ((((float)UASRT_PID_VAL[5])-48)/10);
 8002df0:	4b0a      	ldr	r3, [pc, #40]	@ (8002e1c <executecommand+0x6e4>)
 8002df2:	785b      	ldrb	r3, [r3, #1]
 8002df4:	ee07 3a90 	vmov	s15, r3
 8002df8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002dfc:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8002e20 <executecommand+0x6e8>
 8002e00:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002e04:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8002e2c <executecommand+0x6f4>
 8002e08:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002e0c:	4b03      	ldr	r3, [pc, #12]	@ (8002e1c <executecommand+0x6e4>)
 8002e0e:	789b      	ldrb	r3, [r3, #2]
 8002e10:	ee07 3a90 	vmov	s15, r3
 8002e14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e18:	e018      	b.n	8002e4c <executecommand+0x714>
 8002e1a:	bf00      	nop
 8002e1c:	00004180 	.word	0x00004180
 8002e20:	42400000 	.word	0x42400000
 8002e24:	42c80000 	.word	0x42c80000
 8002e28:	00004124 	.word	0x00004124
 8002e2c:	447a0000 	.word	0x447a0000
 8002e30:	00004054 	.word	0x00004054
 8002e34:	00004056 	.word	0x00004056
 8002e38:	000040b0 	.word	0x000040b0
 8002e3c:	000040bc 	.word	0x000040bc
 8002e40:	00004080 	.word	0x00004080
 8002e44:	42400000 	.word	0x42400000
 8002e48:	42c80000 	.word	0x42c80000
 8002e4c:	ed5f 6a03 	vldr	s13, [pc, #-12]	@ 8002e44 <executecommand+0x70c>
 8002e50:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002e54:	ed5f 6a04 	vldr	s13, [pc, #-16]	@ 8002e48 <executecommand+0x710>
 8002e58:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002e5c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e60:	4bd5      	ldr	r3, [pc, #852]	@ (80031b8 <executecommand+0xa80>)
 8002e62:	78db      	ldrb	r3, [r3, #3]
 8002e64:	ee07 3a90 	vmov	s15, r3
 8002e68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e6c:	eddf 6ad3 	vldr	s13, [pc, #844]	@ 80031bc <executecommand+0xa84>
 8002e70:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002e74:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002e78:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002e7c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e80:	4bcd      	ldr	r3, [pc, #820]	@ (80031b8 <executecommand+0xa80>)
 8002e82:	791b      	ldrb	r3, [r3, #4]
 8002e84:	ee07 3a90 	vmov	s15, r3
 8002e88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e8c:	eddf 6acb 	vldr	s13, [pc, #812]	@ 80031bc <executecommand+0xa84>
 8002e90:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002e94:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e98:	4bc7      	ldr	r3, [pc, #796]	@ (80031b8 <executecommand+0xa80>)
 8002e9a:	795b      	ldrb	r3, [r3, #5]
 8002e9c:	ee07 3a90 	vmov	s15, r3
 8002ea0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ea4:	eddf 6ac5 	vldr	s13, [pc, #788]	@ 80031bc <executecommand+0xa84>
 8002ea8:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002eac:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8002eb0:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002eb4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002eb8:	4bc1      	ldr	r3, [pc, #772]	@ (80031c0 <executecommand+0xa88>)
 8002eba:	edc3 7a00 	vstr	s15, [r3]
		}
		if(command[0] == 'e')
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	781b      	ldrb	r3, [r3, #0]
 8002ec2:	2b65      	cmp	r3, #101	@ 0x65
 8002ec4:	d14c      	bne.n	8002f60 <executecommand+0x828>
		{
			p_angular_rate_roolfactor = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 8002ec6:	4bbc      	ldr	r3, [pc, #752]	@ (80031b8 <executecommand+0xa80>)
 8002ec8:	785b      	ldrb	r3, [r3, #1]
 8002eca:	ee07 3a90 	vmov	s15, r3
 8002ece:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ed2:	ed9f 7aba 	vldr	s14, [pc, #744]	@ 80031bc <executecommand+0xa84>
 8002ed6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002eda:	ed9f 7aba 	vldr	s14, [pc, #744]	@ 80031c4 <executecommand+0xa8c>
 8002ede:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002ee2:	4bb5      	ldr	r3, [pc, #724]	@ (80031b8 <executecommand+0xa80>)
 8002ee4:	789b      	ldrb	r3, [r3, #2]
 8002ee6:	ee07 3a90 	vmov	s15, r3
 8002eea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002eee:	eddf 6ab3 	vldr	s13, [pc, #716]	@ 80031bc <executecommand+0xa84>
 8002ef2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002ef6:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002efa:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002efe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f02:	4bad      	ldr	r3, [pc, #692]	@ (80031b8 <executecommand+0xa80>)
 8002f04:	78db      	ldrb	r3, [r3, #3]
 8002f06:	ee07 3a90 	vmov	s15, r3
 8002f0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f0e:	eddf 6aab 	vldr	s13, [pc, #684]	@ 80031bc <executecommand+0xa84>
 8002f12:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002f16:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f1a:	4ba7      	ldr	r3, [pc, #668]	@ (80031b8 <executecommand+0xa80>)
 8002f1c:	791b      	ldrb	r3, [r3, #4]
 8002f1e:	ee07 3a90 	vmov	s15, r3
 8002f22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f26:	eddf 6aa5 	vldr	s13, [pc, #660]	@ 80031bc <executecommand+0xa84>
 8002f2a:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002f2e:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8002f32:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002f36:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f3a:	4b9f      	ldr	r3, [pc, #636]	@ (80031b8 <executecommand+0xa80>)
 8002f3c:	795b      	ldrb	r3, [r3, #5]
 8002f3e:	ee07 3a90 	vmov	s15, r3
 8002f42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f46:	eddf 6a9d 	vldr	s13, [pc, #628]	@ 80031bc <executecommand+0xa84>
 8002f4a:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002f4e:	ed9f 6a9d 	vldr	s12, [pc, #628]	@ 80031c4 <executecommand+0xa8c>
 8002f52:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002f56:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f5a:	4b9b      	ldr	r3, [pc, #620]	@ (80031c8 <executecommand+0xa90>)
 8002f5c:	edc3 7a00 	vstr	s15, [r3]
		}

		if(command[0] == 'g')
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	781b      	ldrb	r3, [r3, #0]
 8002f64:	2b67      	cmp	r3, #103	@ 0x67
 8002f66:	d14f      	bne.n	8003008 <executecommand+0x8d0>
		{
			i_angular_rate_roolfactor = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 8002f68:	4b93      	ldr	r3, [pc, #588]	@ (80031b8 <executecommand+0xa80>)
 8002f6a:	785b      	ldrb	r3, [r3, #1]
 8002f6c:	ee07 3a90 	vmov	s15, r3
 8002f70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f74:	ed9f 7a91 	vldr	s14, [pc, #580]	@ 80031bc <executecommand+0xa84>
 8002f78:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002f7c:	ed9f 7a91 	vldr	s14, [pc, #580]	@ 80031c4 <executecommand+0xa8c>
 8002f80:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002f84:	4b8c      	ldr	r3, [pc, #560]	@ (80031b8 <executecommand+0xa80>)
 8002f86:	789b      	ldrb	r3, [r3, #2]
 8002f88:	ee07 3a90 	vmov	s15, r3
 8002f8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f90:	eddf 6a8a 	vldr	s13, [pc, #552]	@ 80031bc <executecommand+0xa84>
 8002f94:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002f98:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002f9c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002fa0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002fa4:	4b84      	ldr	r3, [pc, #528]	@ (80031b8 <executecommand+0xa80>)
 8002fa6:	78db      	ldrb	r3, [r3, #3]
 8002fa8:	ee07 3a90 	vmov	s15, r3
 8002fac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fb0:	eddf 6a82 	vldr	s13, [pc, #520]	@ 80031bc <executecommand+0xa84>
 8002fb4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002fb8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002fbc:	4b7e      	ldr	r3, [pc, #504]	@ (80031b8 <executecommand+0xa80>)
 8002fbe:	791b      	ldrb	r3, [r3, #4]
 8002fc0:	ee07 3a90 	vmov	s15, r3
 8002fc4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fc8:	eddf 6a7c 	vldr	s13, [pc, #496]	@ 80031bc <executecommand+0xa84>
 8002fcc:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002fd0:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8002fd4:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002fd8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002fdc:	4b76      	ldr	r3, [pc, #472]	@ (80031b8 <executecommand+0xa80>)
 8002fde:	795b      	ldrb	r3, [r3, #5]
 8002fe0:	ee07 3a90 	vmov	s15, r3
 8002fe4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fe8:	eddf 6a74 	vldr	s13, [pc, #464]	@ 80031bc <executecommand+0xa84>
 8002fec:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002ff0:	ed9f 6a74 	vldr	s12, [pc, #464]	@ 80031c4 <executecommand+0xa8c>
 8002ff4:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002ff8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ffc:	4b73      	ldr	r3, [pc, #460]	@ (80031cc <executecommand+0xa94>)
 8002ffe:	edc3 7a00 	vstr	s15, [r3]
			error_sum_angular_rate_rool = 0;
 8003002:	4b73      	ldr	r3, [pc, #460]	@ (80031d0 <executecommand+0xa98>)
 8003004:	2200      	movs	r2, #0
 8003006:	601a      	str	r2, [r3, #0]
		}

		if(command[0] == 'h')
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	781b      	ldrb	r3, [r3, #0]
 800300c:	2b68      	cmp	r3, #104	@ 0x68
 800300e:	d14c      	bne.n	80030aa <executecommand+0x972>
		{
			d_angular_rate_roolfactor = ((((float)UASRT_PID_VAL[1])-48)*1000) + ((((float)UASRT_PID_VAL[2])-48)*100) + ((((float)UASRT_PID_VAL[3])-48)*10) + ((((float)UASRT_PID_VAL[4])-48)) + ((((float)UASRT_PID_VAL[5])-48)/10);
 8003010:	4b69      	ldr	r3, [pc, #420]	@ (80031b8 <executecommand+0xa80>)
 8003012:	785b      	ldrb	r3, [r3, #1]
 8003014:	ee07 3a90 	vmov	s15, r3
 8003018:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800301c:	ed9f 7a67 	vldr	s14, [pc, #412]	@ 80031bc <executecommand+0xa84>
 8003020:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003024:	ed9f 7a6b 	vldr	s14, [pc, #428]	@ 80031d4 <executecommand+0xa9c>
 8003028:	ee27 7a87 	vmul.f32	s14, s15, s14
 800302c:	4b62      	ldr	r3, [pc, #392]	@ (80031b8 <executecommand+0xa80>)
 800302e:	789b      	ldrb	r3, [r3, #2]
 8003030:	ee07 3a90 	vmov	s15, r3
 8003034:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003038:	eddf 6a60 	vldr	s13, [pc, #384]	@ 80031bc <executecommand+0xa84>
 800303c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003040:	eddf 6a60 	vldr	s13, [pc, #384]	@ 80031c4 <executecommand+0xa8c>
 8003044:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003048:	ee37 7a27 	vadd.f32	s14, s14, s15
 800304c:	4b5a      	ldr	r3, [pc, #360]	@ (80031b8 <executecommand+0xa80>)
 800304e:	78db      	ldrb	r3, [r3, #3]
 8003050:	ee07 3a90 	vmov	s15, r3
 8003054:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003058:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80031bc <executecommand+0xa84>
 800305c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003060:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8003064:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003068:	ee37 7a27 	vadd.f32	s14, s14, s15
 800306c:	4b52      	ldr	r3, [pc, #328]	@ (80031b8 <executecommand+0xa80>)
 800306e:	791b      	ldrb	r3, [r3, #4]
 8003070:	ee07 3a90 	vmov	s15, r3
 8003074:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003078:	eddf 6a50 	vldr	s13, [pc, #320]	@ 80031bc <executecommand+0xa84>
 800307c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003080:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003084:	4b4c      	ldr	r3, [pc, #304]	@ (80031b8 <executecommand+0xa80>)
 8003086:	795b      	ldrb	r3, [r3, #5]
 8003088:	ee07 3a90 	vmov	s15, r3
 800308c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003090:	eddf 6a4a 	vldr	s13, [pc, #296]	@ 80031bc <executecommand+0xa84>
 8003094:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8003098:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 800309c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80030a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030a4:	4b4c      	ldr	r3, [pc, #304]	@ (80031d8 <executecommand+0xaa0>)
 80030a6:	edc3 7a00 	vstr	s15, [r3]





		if(command[0] == 'j')
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	781b      	ldrb	r3, [r3, #0]
 80030ae:	2b6a      	cmp	r3, #106	@ 0x6a
 80030b0:	d14c      	bne.n	800314c <executecommand+0xa14>
			{
				p_yawfactor = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 80030b2:	4b41      	ldr	r3, [pc, #260]	@ (80031b8 <executecommand+0xa80>)
 80030b4:	785b      	ldrb	r3, [r3, #1]
 80030b6:	ee07 3a90 	vmov	s15, r3
 80030ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030be:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 80031bc <executecommand+0xa84>
 80030c2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80030c6:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 80031c4 <executecommand+0xa8c>
 80030ca:	ee27 7a87 	vmul.f32	s14, s15, s14
 80030ce:	4b3a      	ldr	r3, [pc, #232]	@ (80031b8 <executecommand+0xa80>)
 80030d0:	789b      	ldrb	r3, [r3, #2]
 80030d2:	ee07 3a90 	vmov	s15, r3
 80030d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030da:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80031bc <executecommand+0xa84>
 80030de:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80030e2:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 80030e6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80030ea:	ee37 7a27 	vadd.f32	s14, s14, s15
 80030ee:	4b32      	ldr	r3, [pc, #200]	@ (80031b8 <executecommand+0xa80>)
 80030f0:	78db      	ldrb	r3, [r3, #3]
 80030f2:	ee07 3a90 	vmov	s15, r3
 80030f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030fa:	eddf 6a30 	vldr	s13, [pc, #192]	@ 80031bc <executecommand+0xa84>
 80030fe:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003102:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003106:	4b2c      	ldr	r3, [pc, #176]	@ (80031b8 <executecommand+0xa80>)
 8003108:	791b      	ldrb	r3, [r3, #4]
 800310a:	ee07 3a90 	vmov	s15, r3
 800310e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003112:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 80031bc <executecommand+0xa84>
 8003116:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800311a:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 800311e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003122:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003126:	4b24      	ldr	r3, [pc, #144]	@ (80031b8 <executecommand+0xa80>)
 8003128:	795b      	ldrb	r3, [r3, #5]
 800312a:	ee07 3a90 	vmov	s15, r3
 800312e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003132:	eddf 6a22 	vldr	s13, [pc, #136]	@ 80031bc <executecommand+0xa84>
 8003136:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800313a:	ed9f 6a22 	vldr	s12, [pc, #136]	@ 80031c4 <executecommand+0xa8c>
 800313e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003142:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003146:	4b25      	ldr	r3, [pc, #148]	@ (80031dc <executecommand+0xaa4>)
 8003148:	edc3 7a00 	vstr	s15, [r3]
			}

			if(command[0] == 'k')
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	781b      	ldrb	r3, [r3, #0]
 8003150:	2b6b      	cmp	r3, #107	@ 0x6b
 8003152:	d167      	bne.n	8003224 <executecommand+0xaec>
			{
				i_yawfactor = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 8003154:	4b18      	ldr	r3, [pc, #96]	@ (80031b8 <executecommand+0xa80>)
 8003156:	785b      	ldrb	r3, [r3, #1]
 8003158:	ee07 3a90 	vmov	s15, r3
 800315c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003160:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 80031bc <executecommand+0xa84>
 8003164:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003168:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 80031c4 <executecommand+0xa8c>
 800316c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003170:	4b11      	ldr	r3, [pc, #68]	@ (80031b8 <executecommand+0xa80>)
 8003172:	789b      	ldrb	r3, [r3, #2]
 8003174:	ee07 3a90 	vmov	s15, r3
 8003178:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800317c:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 80031bc <executecommand+0xa84>
 8003180:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003184:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8003188:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800318c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003190:	4b09      	ldr	r3, [pc, #36]	@ (80031b8 <executecommand+0xa80>)
 8003192:	78db      	ldrb	r3, [r3, #3]
 8003194:	ee07 3a90 	vmov	s15, r3
 8003198:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800319c:	eddf 6a07 	vldr	s13, [pc, #28]	@ 80031bc <executecommand+0xa84>
 80031a0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80031a4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80031a8:	4b03      	ldr	r3, [pc, #12]	@ (80031b8 <executecommand+0xa80>)
 80031aa:	791b      	ldrb	r3, [r3, #4]
 80031ac:	ee07 3a90 	vmov	s15, r3
 80031b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031b4:	e016      	b.n	80031e4 <executecommand+0xaac>
 80031b6:	bf00      	nop
 80031b8:	00004180 	.word	0x00004180
 80031bc:	42400000 	.word	0x42400000
 80031c0:	000040c8 	.word	0x000040c8
 80031c4:	42c80000 	.word	0x42c80000
 80031c8:	00004110 	.word	0x00004110
 80031cc:	0000411c 	.word	0x0000411c
 80031d0:	0000408c 	.word	0x0000408c
 80031d4:	447a0000 	.word	0x447a0000
 80031d8:	00004128 	.word	0x00004128
 80031dc:	000040b4 	.word	0x000040b4
 80031e0:	42400000 	.word	0x42400000
 80031e4:	ed5f 6a02 	vldr	s13, [pc, #-8]	@ 80031e0 <executecommand+0xaa8>
 80031e8:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80031ec:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 80031f0:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80031f4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80031f8:	4bba      	ldr	r3, [pc, #744]	@ (80034e4 <executecommand+0xdac>)
 80031fa:	795b      	ldrb	r3, [r3, #5]
 80031fc:	ee07 3a90 	vmov	s15, r3
 8003200:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003204:	eddf 6ab8 	vldr	s13, [pc, #736]	@ 80034e8 <executecommand+0xdb0>
 8003208:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800320c:	ed9f 6ab7 	vldr	s12, [pc, #732]	@ 80034ec <executecommand+0xdb4>
 8003210:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003214:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003218:	4bb5      	ldr	r3, [pc, #724]	@ (80034f0 <executecommand+0xdb8>)
 800321a:	edc3 7a00 	vstr	s15, [r3]
				error_sum_yaw = 0;
 800321e:	4bb5      	ldr	r3, [pc, #724]	@ (80034f4 <executecommand+0xdbc>)
 8003220:	2200      	movs	r2, #0
 8003222:	601a      	str	r2, [r3, #0]
			}

			if(command[0] == 'l')
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	781b      	ldrb	r3, [r3, #0]
 8003228:	2b6c      	cmp	r3, #108	@ 0x6c
 800322a:	d14c      	bne.n	80032c6 <executecommand+0xb8e>
			{
				d_yawfactor = ((((float)UASRT_PID_VAL[1])-48)*1000) + ((((float)UASRT_PID_VAL[2])-48)*100) + ((((float)UASRT_PID_VAL[3])-48)*10) + ((((float)UASRT_PID_VAL[4])-48)) + ((((float)UASRT_PID_VAL[5])-48)/10);
 800322c:	4bad      	ldr	r3, [pc, #692]	@ (80034e4 <executecommand+0xdac>)
 800322e:	785b      	ldrb	r3, [r3, #1]
 8003230:	ee07 3a90 	vmov	s15, r3
 8003234:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003238:	ed9f 7aab 	vldr	s14, [pc, #684]	@ 80034e8 <executecommand+0xdb0>
 800323c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003240:	ed9f 7aad 	vldr	s14, [pc, #692]	@ 80034f8 <executecommand+0xdc0>
 8003244:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003248:	4ba6      	ldr	r3, [pc, #664]	@ (80034e4 <executecommand+0xdac>)
 800324a:	789b      	ldrb	r3, [r3, #2]
 800324c:	ee07 3a90 	vmov	s15, r3
 8003250:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003254:	eddf 6aa4 	vldr	s13, [pc, #656]	@ 80034e8 <executecommand+0xdb0>
 8003258:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800325c:	eddf 6aa3 	vldr	s13, [pc, #652]	@ 80034ec <executecommand+0xdb4>
 8003260:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003264:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003268:	4b9e      	ldr	r3, [pc, #632]	@ (80034e4 <executecommand+0xdac>)
 800326a:	78db      	ldrb	r3, [r3, #3]
 800326c:	ee07 3a90 	vmov	s15, r3
 8003270:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003274:	eddf 6a9c 	vldr	s13, [pc, #624]	@ 80034e8 <executecommand+0xdb0>
 8003278:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800327c:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8003280:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003284:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003288:	4b96      	ldr	r3, [pc, #600]	@ (80034e4 <executecommand+0xdac>)
 800328a:	791b      	ldrb	r3, [r3, #4]
 800328c:	ee07 3a90 	vmov	s15, r3
 8003290:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003294:	eddf 6a94 	vldr	s13, [pc, #592]	@ 80034e8 <executecommand+0xdb0>
 8003298:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800329c:	ee37 7a27 	vadd.f32	s14, s14, s15
 80032a0:	4b90      	ldr	r3, [pc, #576]	@ (80034e4 <executecommand+0xdac>)
 80032a2:	795b      	ldrb	r3, [r3, #5]
 80032a4:	ee07 3a90 	vmov	s15, r3
 80032a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032ac:	eddf 6a8e 	vldr	s13, [pc, #568]	@ 80034e8 <executecommand+0xdb0>
 80032b0:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80032b4:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 80032b8:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80032bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032c0:	4b8e      	ldr	r3, [pc, #568]	@ (80034fc <executecommand+0xdc4>)
 80032c2:	edc3 7a00 	vstr	s15, [r3]
			}
			if(command[0] == 'm')
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	781b      	ldrb	r3, [r3, #0]
 80032ca:	2b6d      	cmp	r3, #109	@ 0x6d
 80032cc:	d14c      	bne.n	8003368 <executecommand+0xc30>
			{
				p_angular_rate_yawfactor = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 80032ce:	4b85      	ldr	r3, [pc, #532]	@ (80034e4 <executecommand+0xdac>)
 80032d0:	785b      	ldrb	r3, [r3, #1]
 80032d2:	ee07 3a90 	vmov	s15, r3
 80032d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032da:	ed9f 7a83 	vldr	s14, [pc, #524]	@ 80034e8 <executecommand+0xdb0>
 80032de:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80032e2:	ed9f 7a82 	vldr	s14, [pc, #520]	@ 80034ec <executecommand+0xdb4>
 80032e6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80032ea:	4b7e      	ldr	r3, [pc, #504]	@ (80034e4 <executecommand+0xdac>)
 80032ec:	789b      	ldrb	r3, [r3, #2]
 80032ee:	ee07 3a90 	vmov	s15, r3
 80032f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032f6:	eddf 6a7c 	vldr	s13, [pc, #496]	@ 80034e8 <executecommand+0xdb0>
 80032fa:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80032fe:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8003302:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003306:	ee37 7a27 	vadd.f32	s14, s14, s15
 800330a:	4b76      	ldr	r3, [pc, #472]	@ (80034e4 <executecommand+0xdac>)
 800330c:	78db      	ldrb	r3, [r3, #3]
 800330e:	ee07 3a90 	vmov	s15, r3
 8003312:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003316:	eddf 6a74 	vldr	s13, [pc, #464]	@ 80034e8 <executecommand+0xdb0>
 800331a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800331e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003322:	4b70      	ldr	r3, [pc, #448]	@ (80034e4 <executecommand+0xdac>)
 8003324:	791b      	ldrb	r3, [r3, #4]
 8003326:	ee07 3a90 	vmov	s15, r3
 800332a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800332e:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 80034e8 <executecommand+0xdb0>
 8003332:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8003336:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 800333a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800333e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003342:	4b68      	ldr	r3, [pc, #416]	@ (80034e4 <executecommand+0xdac>)
 8003344:	795b      	ldrb	r3, [r3, #5]
 8003346:	ee07 3a90 	vmov	s15, r3
 800334a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800334e:	eddf 6a66 	vldr	s13, [pc, #408]	@ 80034e8 <executecommand+0xdb0>
 8003352:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8003356:	ed9f 6a65 	vldr	s12, [pc, #404]	@ 80034ec <executecommand+0xdb4>
 800335a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800335e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003362:	4b67      	ldr	r3, [pc, #412]	@ (8003500 <executecommand+0xdc8>)
 8003364:	edc3 7a00 	vstr	s15, [r3]
			}

			if(command[0] == 'n')
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	781b      	ldrb	r3, [r3, #0]
 800336c:	2b6e      	cmp	r3, #110	@ 0x6e
 800336e:	d14f      	bne.n	8003410 <executecommand+0xcd8>
			{
				i_angular_rate_yawfactor = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 8003370:	4b5c      	ldr	r3, [pc, #368]	@ (80034e4 <executecommand+0xdac>)
 8003372:	785b      	ldrb	r3, [r3, #1]
 8003374:	ee07 3a90 	vmov	s15, r3
 8003378:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800337c:	ed9f 7a5a 	vldr	s14, [pc, #360]	@ 80034e8 <executecommand+0xdb0>
 8003380:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003384:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 80034ec <executecommand+0xdb4>
 8003388:	ee27 7a87 	vmul.f32	s14, s15, s14
 800338c:	4b55      	ldr	r3, [pc, #340]	@ (80034e4 <executecommand+0xdac>)
 800338e:	789b      	ldrb	r3, [r3, #2]
 8003390:	ee07 3a90 	vmov	s15, r3
 8003394:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003398:	eddf 6a53 	vldr	s13, [pc, #332]	@ 80034e8 <executecommand+0xdb0>
 800339c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80033a0:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 80033a4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80033a8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80033ac:	4b4d      	ldr	r3, [pc, #308]	@ (80034e4 <executecommand+0xdac>)
 80033ae:	78db      	ldrb	r3, [r3, #3]
 80033b0:	ee07 3a90 	vmov	s15, r3
 80033b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033b8:	eddf 6a4b 	vldr	s13, [pc, #300]	@ 80034e8 <executecommand+0xdb0>
 80033bc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80033c0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80033c4:	4b47      	ldr	r3, [pc, #284]	@ (80034e4 <executecommand+0xdac>)
 80033c6:	791b      	ldrb	r3, [r3, #4]
 80033c8:	ee07 3a90 	vmov	s15, r3
 80033cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033d0:	eddf 6a45 	vldr	s13, [pc, #276]	@ 80034e8 <executecommand+0xdb0>
 80033d4:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80033d8:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 80033dc:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80033e0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80033e4:	4b3f      	ldr	r3, [pc, #252]	@ (80034e4 <executecommand+0xdac>)
 80033e6:	795b      	ldrb	r3, [r3, #5]
 80033e8:	ee07 3a90 	vmov	s15, r3
 80033ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033f0:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80034e8 <executecommand+0xdb0>
 80033f4:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80033f8:	ed9f 6a3c 	vldr	s12, [pc, #240]	@ 80034ec <executecommand+0xdb4>
 80033fc:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003400:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003404:	4b3f      	ldr	r3, [pc, #252]	@ (8003504 <executecommand+0xdcc>)
 8003406:	edc3 7a00 	vstr	s15, [r3]
				error_sum_angular_rate_yaw = 0;
 800340a:	4b3f      	ldr	r3, [pc, #252]	@ (8003508 <executecommand+0xdd0>)
 800340c:	2200      	movs	r2, #0
 800340e:	601a      	str	r2, [r3, #0]
			}

			if(command[0] == 'o')
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	781b      	ldrb	r3, [r3, #0]
 8003414:	2b6f      	cmp	r3, #111	@ 0x6f
 8003416:	d14c      	bne.n	80034b2 <executecommand+0xd7a>
			{
				d_angular_rate_yawfactor = ((((float)UASRT_PID_VAL[1])-48)*1000) + ((((float)UASRT_PID_VAL[2])-48)*100) + ((((float)UASRT_PID_VAL[3])-48)*10) + ((((float)UASRT_PID_VAL[4])-48)) + ((((float)UASRT_PID_VAL[5])-48)/10);
 8003418:	4b32      	ldr	r3, [pc, #200]	@ (80034e4 <executecommand+0xdac>)
 800341a:	785b      	ldrb	r3, [r3, #1]
 800341c:	ee07 3a90 	vmov	s15, r3
 8003420:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003424:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 80034e8 <executecommand+0xdb0>
 8003428:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800342c:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 80034f8 <executecommand+0xdc0>
 8003430:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003434:	4b2b      	ldr	r3, [pc, #172]	@ (80034e4 <executecommand+0xdac>)
 8003436:	789b      	ldrb	r3, [r3, #2]
 8003438:	ee07 3a90 	vmov	s15, r3
 800343c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003440:	eddf 6a29 	vldr	s13, [pc, #164]	@ 80034e8 <executecommand+0xdb0>
 8003444:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003448:	eddf 6a28 	vldr	s13, [pc, #160]	@ 80034ec <executecommand+0xdb4>
 800344c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003450:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003454:	4b23      	ldr	r3, [pc, #140]	@ (80034e4 <executecommand+0xdac>)
 8003456:	78db      	ldrb	r3, [r3, #3]
 8003458:	ee07 3a90 	vmov	s15, r3
 800345c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003460:	eddf 6a21 	vldr	s13, [pc, #132]	@ 80034e8 <executecommand+0xdb0>
 8003464:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003468:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 800346c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003470:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003474:	4b1b      	ldr	r3, [pc, #108]	@ (80034e4 <executecommand+0xdac>)
 8003476:	791b      	ldrb	r3, [r3, #4]
 8003478:	ee07 3a90 	vmov	s15, r3
 800347c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003480:	eddf 6a19 	vldr	s13, [pc, #100]	@ 80034e8 <executecommand+0xdb0>
 8003484:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003488:	ee37 7a27 	vadd.f32	s14, s14, s15
 800348c:	4b15      	ldr	r3, [pc, #84]	@ (80034e4 <executecommand+0xdac>)
 800348e:	795b      	ldrb	r3, [r3, #5]
 8003490:	ee07 3a90 	vmov	s15, r3
 8003494:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003498:	eddf 6a13 	vldr	s13, [pc, #76]	@ 80034e8 <executecommand+0xdb0>
 800349c:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80034a0:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 80034a4:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80034a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034ac:	4b17      	ldr	r3, [pc, #92]	@ (800350c <executecommand+0xdd4>)
 80034ae:	edc3 7a00 	vstr	s15, [r3]
			}

	if(command[0] == 'r'){
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	781b      	ldrb	r3, [r3, #0]
 80034b6:	2b72      	cmp	r3, #114	@ 0x72
 80034b8:	d101      	bne.n	80034be <executecommand+0xd86>
		NVIC_SystemReset();
 80034ba:	f7ff f8d9 	bl	8002670 <__NVIC_SystemReset>
	}

	for(int i = 0; i < 15; i++){
 80034be:	2300      	movs	r3, #0
 80034c0:	60fb      	str	r3, [r7, #12]
 80034c2:	e007      	b.n	80034d4 <executecommand+0xd9c>
		UASRT_PID_VAL[i] = 0;
 80034c4:	4a07      	ldr	r2, [pc, #28]	@ (80034e4 <executecommand+0xdac>)
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	4413      	add	r3, r2
 80034ca:	2200      	movs	r2, #0
 80034cc:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 15; i++){
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	3301      	adds	r3, #1
 80034d2:	60fb      	str	r3, [r7, #12]
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2b0e      	cmp	r3, #14
 80034d8:	ddf4      	ble.n	80034c4 <executecommand+0xd8c>
	}
//	for(int i = 0; i < 10; i++){
//		words[i] = 0;
//	}

}
 80034da:	bf00      	nop
 80034dc:	bf00      	nop
 80034de:	3710      	adds	r7, #16
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bd80      	pop	{r7, pc}
 80034e4:	00004180 	.word	0x00004180
 80034e8:	42400000 	.word	0x42400000
 80034ec:	42c80000 	.word	0x42c80000
 80034f0:	000040c0 	.word	0x000040c0
 80034f4:	00004084 	.word	0x00004084
 80034f8:	447a0000 	.word	0x447a0000
 80034fc:	000040cc 	.word	0x000040cc
 8003500:	00004114 	.word	0x00004114
 8003504:	00004120 	.word	0x00004120
 8003508:	00004090 	.word	0x00004090
 800350c:	0000412c 	.word	0x0000412c

08003510 <MX_ADC2_Init>:
ADC_HandleTypeDef hadc2;
DMA_HandleTypeDef hdma_adc2;

/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b08a      	sub	sp, #40	@ 0x28
 8003514:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003516:	1d3b      	adds	r3, r7, #4
 8003518:	2224      	movs	r2, #36	@ 0x24
 800351a:	2100      	movs	r1, #0
 800351c:	4618      	mov	r0, r3
 800351e:	f01a fc71 	bl	801de04 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8003522:	4b2e      	ldr	r3, [pc, #184]	@ (80035dc <MX_ADC2_Init+0xcc>)
 8003524:	4a2e      	ldr	r2, [pc, #184]	@ (80035e0 <MX_ADC2_Init+0xd0>)
 8003526:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV8;
 8003528:	4b2c      	ldr	r3, [pc, #176]	@ (80035dc <MX_ADC2_Init+0xcc>)
 800352a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800352e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8003530:	4b2a      	ldr	r3, [pc, #168]	@ (80035dc <MX_ADC2_Init+0xcc>)
 8003532:	2208      	movs	r2, #8
 8003534:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8003536:	4b29      	ldr	r3, [pc, #164]	@ (80035dc <MX_ADC2_Init+0xcc>)
 8003538:	2200      	movs	r2, #0
 800353a:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800353c:	4b27      	ldr	r3, [pc, #156]	@ (80035dc <MX_ADC2_Init+0xcc>)
 800353e:	2204      	movs	r2, #4
 8003540:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8003542:	4b26      	ldr	r3, [pc, #152]	@ (80035dc <MX_ADC2_Init+0xcc>)
 8003544:	2200      	movs	r2, #0
 8003546:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8003548:	4b24      	ldr	r3, [pc, #144]	@ (80035dc <MX_ADC2_Init+0xcc>)
 800354a:	2200      	movs	r2, #0
 800354c:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 800354e:	4b23      	ldr	r3, [pc, #140]	@ (80035dc <MX_ADC2_Init+0xcc>)
 8003550:	2201      	movs	r2, #1
 8003552:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8003554:	4b21      	ldr	r3, [pc, #132]	@ (80035dc <MX_ADC2_Init+0xcc>)
 8003556:	2200      	movs	r2, #0
 8003558:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T8_TRGO;
 800355c:	4b1f      	ldr	r3, [pc, #124]	@ (80035dc <MX_ADC2_Init+0xcc>)
 800355e:	f44f 629c 	mov.w	r2, #1248	@ 0x4e0
 8003562:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8003564:	4b1d      	ldr	r3, [pc, #116]	@ (80035dc <MX_ADC2_Init+0xcc>)
 8003566:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800356a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800356c:	4b1b      	ldr	r3, [pc, #108]	@ (80035dc <MX_ADC2_Init+0xcc>)
 800356e:	2203      	movs	r2, #3
 8003570:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8003572:	4b1a      	ldr	r3, [pc, #104]	@ (80035dc <MX_ADC2_Init+0xcc>)
 8003574:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003578:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800357a:	4b18      	ldr	r3, [pc, #96]	@ (80035dc <MX_ADC2_Init+0xcc>)
 800357c:	2200      	movs	r2, #0
 800357e:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc2.Init.OversamplingMode = DISABLE;
 8003580:	4b16      	ldr	r3, [pc, #88]	@ (80035dc <MX_ADC2_Init+0xcc>)
 8003582:	2200      	movs	r2, #0
 8003584:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc2.Init.Oversampling.Ratio = 1;
 8003588:	4b14      	ldr	r3, [pc, #80]	@ (80035dc <MX_ADC2_Init+0xcc>)
 800358a:	2201      	movs	r2, #1
 800358c:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800358e:	4813      	ldr	r0, [pc, #76]	@ (80035dc <MX_ADC2_Init+0xcc>)
 8003590:	f006 f970 	bl	8009874 <HAL_ADC_Init>
 8003594:	4603      	mov	r3, r0
 8003596:	2b00      	cmp	r3, #0
 8003598:	d001      	beq.n	800359e <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 800359a:	f004 faf1 	bl	8007b80 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800359e:	4b11      	ldr	r3, [pc, #68]	@ (80035e4 <MX_ADC2_Init+0xd4>)
 80035a0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80035a2:	2306      	movs	r3, #6
 80035a4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 80035a6:	2307      	movs	r3, #7
 80035a8:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80035aa:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80035ae:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80035b0:	2304      	movs	r3, #4
 80035b2:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80035b4:	2300      	movs	r3, #0
 80035b6:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 80035b8:	2300      	movs	r3, #0
 80035ba:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80035be:	1d3b      	adds	r3, r7, #4
 80035c0:	4619      	mov	r1, r3
 80035c2:	4806      	ldr	r0, [pc, #24]	@ (80035dc <MX_ADC2_Init+0xcc>)
 80035c4:	f006 fe9c 	bl	800a300 <HAL_ADC_ConfigChannel>
 80035c8:	4603      	mov	r3, r0
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d001      	beq.n	80035d2 <MX_ADC2_Init+0xc2>
  {
    Error_Handler();
 80035ce:	f004 fad7 	bl	8007b80 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80035d2:	bf00      	nop
 80035d4:	3728      	adds	r7, #40	@ 0x28
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}
 80035da:	bf00      	nop
 80035dc:	240000ac 	.word	0x240000ac
 80035e0:	40022100 	.word	0x40022100
 80035e4:	19200040 	.word	0x19200040

080035e8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b08a      	sub	sp, #40	@ 0x28
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035f0:	f107 0314 	add.w	r3, r7, #20
 80035f4:	2200      	movs	r2, #0
 80035f6:	601a      	str	r2, [r3, #0]
 80035f8:	605a      	str	r2, [r3, #4]
 80035fa:	609a      	str	r2, [r3, #8]
 80035fc:	60da      	str	r2, [r3, #12]
 80035fe:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC2)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a34      	ldr	r2, [pc, #208]	@ (80036d8 <HAL_ADC_MspInit+0xf0>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d162      	bne.n	80036d0 <HAL_ADC_MspInit+0xe8>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* ADC2 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800360a:	4b34      	ldr	r3, [pc, #208]	@ (80036dc <HAL_ADC_MspInit+0xf4>)
 800360c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003610:	4a32      	ldr	r2, [pc, #200]	@ (80036dc <HAL_ADC_MspInit+0xf4>)
 8003612:	f043 0320 	orr.w	r3, r3, #32
 8003616:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800361a:	4b30      	ldr	r3, [pc, #192]	@ (80036dc <HAL_ADC_MspInit+0xf4>)
 800361c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003620:	f003 0320 	and.w	r3, r3, #32
 8003624:	613b      	str	r3, [r7, #16]
 8003626:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003628:	4b2c      	ldr	r3, [pc, #176]	@ (80036dc <HAL_ADC_MspInit+0xf4>)
 800362a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800362e:	4a2b      	ldr	r2, [pc, #172]	@ (80036dc <HAL_ADC_MspInit+0xf4>)
 8003630:	f043 0320 	orr.w	r3, r3, #32
 8003634:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003638:	4b28      	ldr	r3, [pc, #160]	@ (80036dc <HAL_ADC_MspInit+0xf4>)
 800363a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800363e:	f003 0320 	and.w	r3, r3, #32
 8003642:	60fb      	str	r3, [r7, #12]
 8003644:	68fb      	ldr	r3, [r7, #12]
    /**ADC2 GPIO Configuration
    PF14     ------> ADC2_INP6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8003646:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800364a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800364c:	2303      	movs	r3, #3
 800364e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003650:	2300      	movs	r3, #0
 8003652:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003654:	f107 0314 	add.w	r3, r7, #20
 8003658:	4619      	mov	r1, r3
 800365a:	4821      	ldr	r0, [pc, #132]	@ (80036e0 <HAL_ADC_MspInit+0xf8>)
 800365c:	f00a fd98 	bl	800e190 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA2_Stream0;
 8003660:	4b20      	ldr	r3, [pc, #128]	@ (80036e4 <HAL_ADC_MspInit+0xfc>)
 8003662:	4a21      	ldr	r2, [pc, #132]	@ (80036e8 <HAL_ADC_MspInit+0x100>)
 8003664:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8003666:	4b1f      	ldr	r3, [pc, #124]	@ (80036e4 <HAL_ADC_MspInit+0xfc>)
 8003668:	220a      	movs	r2, #10
 800366a:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800366c:	4b1d      	ldr	r3, [pc, #116]	@ (80036e4 <HAL_ADC_MspInit+0xfc>)
 800366e:	2200      	movs	r2, #0
 8003670:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8003672:	4b1c      	ldr	r3, [pc, #112]	@ (80036e4 <HAL_ADC_MspInit+0xfc>)
 8003674:	2200      	movs	r2, #0
 8003676:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8003678:	4b1a      	ldr	r3, [pc, #104]	@ (80036e4 <HAL_ADC_MspInit+0xfc>)
 800367a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800367e:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003680:	4b18      	ldr	r3, [pc, #96]	@ (80036e4 <HAL_ADC_MspInit+0xfc>)
 8003682:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003686:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003688:	4b16      	ldr	r3, [pc, #88]	@ (80036e4 <HAL_ADC_MspInit+0xfc>)
 800368a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800368e:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8003690:	4b14      	ldr	r3, [pc, #80]	@ (80036e4 <HAL_ADC_MspInit+0xfc>)
 8003692:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003696:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8003698:	4b12      	ldr	r3, [pc, #72]	@ (80036e4 <HAL_ADC_MspInit+0xfc>)
 800369a:	2200      	movs	r2, #0
 800369c:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800369e:	4b11      	ldr	r3, [pc, #68]	@ (80036e4 <HAL_ADC_MspInit+0xfc>)
 80036a0:	2200      	movs	r2, #0
 80036a2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80036a4:	480f      	ldr	r0, [pc, #60]	@ (80036e4 <HAL_ADC_MspInit+0xfc>)
 80036a6:	f007 ff21 	bl	800b4ec <HAL_DMA_Init>
 80036aa:	4603      	mov	r3, r0
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d001      	beq.n	80036b4 <HAL_ADC_MspInit+0xcc>
    {
      Error_Handler();
 80036b0:	f004 fa66 	bl	8007b80 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	4a0b      	ldr	r2, [pc, #44]	@ (80036e4 <HAL_ADC_MspInit+0xfc>)
 80036b8:	659a      	str	r2, [r3, #88]	@ 0x58
 80036ba:	4a0a      	ldr	r2, [pc, #40]	@ (80036e4 <HAL_ADC_MspInit+0xfc>)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC2 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80036c0:	2200      	movs	r2, #0
 80036c2:	2100      	movs	r1, #0
 80036c4:	2012      	movs	r0, #18
 80036c6:	f007 fe64 	bl	800b392 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80036ca:	2012      	movs	r0, #18
 80036cc:	f007 fe7b 	bl	800b3c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 80036d0:	bf00      	nop
 80036d2:	3728      	adds	r7, #40	@ 0x28
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd80      	pop	{r7, pc}
 80036d8:	40022100 	.word	0x40022100
 80036dc:	58024400 	.word	0x58024400
 80036e0:	58021400 	.word	0x58021400
 80036e4:	2400011c 	.word	0x2400011c
 80036e8:	40020410 	.word	0x40020410

080036ec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b082      	sub	sp, #8
 80036f0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80036f2:	4b19      	ldr	r3, [pc, #100]	@ (8003758 <MX_DMA_Init+0x6c>)
 80036f4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80036f8:	4a17      	ldr	r2, [pc, #92]	@ (8003758 <MX_DMA_Init+0x6c>)
 80036fa:	f043 0302 	orr.w	r3, r3, #2
 80036fe:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003702:	4b15      	ldr	r3, [pc, #84]	@ (8003758 <MX_DMA_Init+0x6c>)
 8003704:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003708:	f003 0302 	and.w	r3, r3, #2
 800370c:	607b      	str	r3, [r7, #4]
 800370e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003710:	4b11      	ldr	r3, [pc, #68]	@ (8003758 <MX_DMA_Init+0x6c>)
 8003712:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003716:	4a10      	ldr	r2, [pc, #64]	@ (8003758 <MX_DMA_Init+0x6c>)
 8003718:	f043 0301 	orr.w	r3, r3, #1
 800371c:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003720:	4b0d      	ldr	r3, [pc, #52]	@ (8003758 <MX_DMA_Init+0x6c>)
 8003722:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003726:	f003 0301 	and.w	r3, r3, #1
 800372a:	603b      	str	r3, [r7, #0]
 800372c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800372e:	2200      	movs	r2, #0
 8003730:	2100      	movs	r1, #0
 8003732:	200b      	movs	r0, #11
 8003734:	f007 fe2d 	bl	800b392 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8003738:	200b      	movs	r0, #11
 800373a:	f007 fe44 	bl	800b3c6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800373e:	2200      	movs	r2, #0
 8003740:	2100      	movs	r1, #0
 8003742:	2038      	movs	r0, #56	@ 0x38
 8003744:	f007 fe25 	bl	800b392 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8003748:	2038      	movs	r0, #56	@ 0x38
 800374a:	f007 fe3c 	bl	800b3c6 <HAL_NVIC_EnableIRQ>

}
 800374e:	bf00      	nop
 8003750:	3708      	adds	r7, #8
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}
 8003756:	bf00      	nop
 8003758:	58024400 	.word	0x58024400
 800375c:	00000000 	.word	0x00000000

08003760 <Thrust_filter>:
 * Thrust_filter
 *
 * niepozwala zwiększac ani znimiejszac ciągu jezeli error wychylenia jest zbyt duzy
 *
 */
void Thrust_filter(double factor){
 8003760:	b580      	push	{r7, lr}
 8003762:	b08e      	sub	sp, #56	@ 0x38
 8003764:	af00      	add	r7, sp, #0
 8003766:	ed87 0b00 	vstr	d0, [r7]
	double error_pitch, error_rool, error_sum;
	double thrust_add = 0;
 800376a:	f04f 0200 	mov.w	r2, #0
 800376e:	f04f 0300 	mov.w	r3, #0
 8003772:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
	int16_t thrust_error;
	double thrust_function;
	uint8_t negflag = 0;
 8003776:	2300      	movs	r3, #0
 8003778:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
	error_pitch = (float)(wanted_pitch - now_pitch);
 800377c:	4b8c      	ldr	r3, [pc, #560]	@ (80039b0 <Thrust_filter+0x250>)
 800377e:	ed93 7a00 	vldr	s14, [r3]
 8003782:	4b8c      	ldr	r3, [pc, #560]	@ (80039b4 <Thrust_filter+0x254>)
 8003784:	edd3 7a00 	vldr	s15, [r3]
 8003788:	ee77 7a67 	vsub.f32	s15, s14, s15
 800378c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003790:	ed87 7b08 	vstr	d7, [r7, #32]
	error_rool 	= (float)(wanted_rool - now_rool);
 8003794:	4b88      	ldr	r3, [pc, #544]	@ (80039b8 <Thrust_filter+0x258>)
 8003796:	ed93 7a00 	vldr	s14, [r3]
 800379a:	4b88      	ldr	r3, [pc, #544]	@ (80039bc <Thrust_filter+0x25c>)
 800379c:	edd3 7a00 	vldr	s15, [r3]
 80037a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80037a4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80037a8:	ed87 7b06 	vstr	d7, [r7, #24]

	error_pitch = WartoscBezwgledna(error_pitch);
 80037ac:	ed97 7b08 	vldr	d7, [r7, #32]
 80037b0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80037b4:	eeb0 0a67 	vmov.f32	s0, s15
 80037b8:	f003 fd1c 	bl	80071f4 <WartoscBezwgledna>
 80037bc:	eef0 7a40 	vmov.f32	s15, s0
 80037c0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80037c4:	ed87 7b08 	vstr	d7, [r7, #32]
	error_rool 	= WartoscBezwgledna(error_rool);
 80037c8:	ed97 7b06 	vldr	d7, [r7, #24]
 80037cc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80037d0:	eeb0 0a67 	vmov.f32	s0, s15
 80037d4:	f003 fd0e 	bl	80071f4 <WartoscBezwgledna>
 80037d8:	eef0 7a40 	vmov.f32	s15, s0
 80037dc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80037e0:	ed87 7b06 	vstr	d7, [r7, #24]

	error_sum = pow(error_pitch + error_rool + 1, 5);
 80037e4:	ed97 6b08 	vldr	d6, [r7, #32]
 80037e8:	ed97 7b06 	vldr	d7, [r7, #24]
 80037ec:	ee36 7b07 	vadd.f64	d7, d6, d7
 80037f0:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 80037f4:	ee37 7b06 	vadd.f64	d7, d7, d6
 80037f8:	eeb1 1b04 	vmov.f64	d1, #20	@ 0x40a00000  5.0
 80037fc:	eeb0 0b47 	vmov.f64	d0, d7
 8003800:	f01a fb8a 	bl	801df18 <pow>
 8003804:	ed87 0b04 	vstr	d0, [r7, #16]
	if(wanted_thrust > 10500){
 8003808:	4b6d      	ldr	r3, [pc, #436]	@ (80039c0 <Thrust_filter+0x260>)
 800380a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800380e:	f642 1204 	movw	r2, #10500	@ 0x2904
 8003812:	4293      	cmp	r3, r2
 8003814:	dd03      	ble.n	800381e <Thrust_filter+0xbe>
		wanted_thrust = 10500;
 8003816:	4b6a      	ldr	r3, [pc, #424]	@ (80039c0 <Thrust_filter+0x260>)
 8003818:	f642 1204 	movw	r2, #10500	@ 0x2904
 800381c:	801a      	strh	r2, [r3, #0]
	}

	thrust_error = wanted_thrust - MYDRON.THRUST;
 800381e:	4b68      	ldr	r3, [pc, #416]	@ (80039c0 <Thrust_filter+0x260>)
 8003820:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003824:	b29a      	uxth	r2, r3
 8003826:	4b67      	ldr	r3, [pc, #412]	@ (80039c4 <Thrust_filter+0x264>)
 8003828:	885b      	ldrh	r3, [r3, #2]
 800382a:	1ad3      	subs	r3, r2, r3
 800382c:	b29b      	uxth	r3, r3
 800382e:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	if(thrust_error < 0){
 8003830:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 8003834:	2b00      	cmp	r3, #0
 8003836:	da13      	bge.n	8003860 <Thrust_filter+0x100>
		thrust_error = WartoscBezwgledna(thrust_error);
 8003838:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 800383c:	ee07 3a90 	vmov	s15, r3
 8003840:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003844:	eeb0 0a67 	vmov.f32	s0, s15
 8003848:	f003 fcd4 	bl	80071f4 <WartoscBezwgledna>
 800384c:	eef0 7a40 	vmov.f32	s15, s0
 8003850:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003854:	ee17 3a90 	vmov	r3, s15
 8003858:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		negflag = 1;
 800385a:	2301      	movs	r3, #1
 800385c:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
	}


	if((thrust_error) != 0){
 8003860:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 8003864:	2b00      	cmp	r3, #0
 8003866:	f000 8097 	beq.w	8003998 <Thrust_filter+0x238>
		thrust_function = 2000*(sqrt(sqrt((double)(thrust_error))));
 800386a:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 800386e:	ee07 3a90 	vmov	s15, r3
 8003872:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003876:	eeb0 0b47 	vmov.f64	d0, d7
 800387a:	f01a faf9 	bl	801de70 <sqrt>
 800387e:	eeb0 7b40 	vmov.f64	d7, d0
 8003882:	eeb0 0b47 	vmov.f64	d0, d7
 8003886:	f01a faf3 	bl	801de70 <sqrt>
 800388a:	eeb0 7b40 	vmov.f64	d7, d0
 800388e:	ed9f 6b44 	vldr	d6, [pc, #272]	@ 80039a0 <Thrust_filter+0x240>
 8003892:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003896:	ed87 7b02 	vstr	d7, [r7, #8]

		thrust_add = ((double)(factor * thrust_increse_factor * thrust_function/error_sum));
 800389a:	ed97 7b00 	vldr	d7, [r7]
 800389e:	ed9f 6b42 	vldr	d6, [pc, #264]	@ 80039a8 <Thrust_filter+0x248>
 80038a2:	ee27 6b06 	vmul.f64	d6, d7, d6
 80038a6:	ed97 7b02 	vldr	d7, [r7, #8]
 80038aa:	ee26 5b07 	vmul.f64	d5, d6, d7
 80038ae:	ed97 6b04 	vldr	d6, [r7, #16]
 80038b2:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80038b6:	ed87 7b0c 	vstr	d7, [r7, #48]	@ 0x30
		if(negflag == 1){
 80038ba:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80038be:	2b01      	cmp	r3, #1
 80038c0:	d105      	bne.n	80038ce <Thrust_filter+0x16e>
			thrust_add = thrust_add*(-1);
 80038c2:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 80038c6:	eeb1 7b47 	vneg.f64	d7, d7
 80038ca:	ed87 7b0c 	vstr	d7, [r7, #48]	@ 0x30
		}


		if(thrust_add < 1 && thrust_add > -1){
 80038ce:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 80038d2:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 80038d6:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80038da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038de:	d513      	bpl.n	8003908 <Thrust_filter+0x1a8>
 80038e0:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 80038e4:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 80038e8:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80038ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038f0:	dd0a      	ble.n	8003908 <Thrust_filter+0x1a8>
			thrust_values = thrust_values + thrust_add;
 80038f2:	4b35      	ldr	r3, [pc, #212]	@ (80039c8 <Thrust_filter+0x268>)
 80038f4:	ed93 6b00 	vldr	d6, [r3]
 80038f8:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 80038fc:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003900:	4b31      	ldr	r3, [pc, #196]	@ (80039c8 <Thrust_filter+0x268>)
 8003902:	ed83 7b00 	vstr	d7, [r3]
 8003906:	e010      	b.n	800392a <Thrust_filter+0x1ca>
		}
		else{
			MYDRON.THRUST = MYDRON.THRUST + thrust_add;
 8003908:	4b2e      	ldr	r3, [pc, #184]	@ (80039c4 <Thrust_filter+0x264>)
 800390a:	885b      	ldrh	r3, [r3, #2]
 800390c:	ee07 3a90 	vmov	s15, r3
 8003910:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8003914:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 8003918:	ee36 7b07 	vadd.f64	d7, d6, d7
 800391c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003920:	ee17 3a90 	vmov	r3, s15
 8003924:	b29a      	uxth	r2, r3
 8003926:	4b27      	ldr	r3, [pc, #156]	@ (80039c4 <Thrust_filter+0x264>)
 8003928:	805a      	strh	r2, [r3, #2]
		}

		if(thrust_values >= 1 || thrust_values <= -1){
 800392a:	4b27      	ldr	r3, [pc, #156]	@ (80039c8 <Thrust_filter+0x268>)
 800392c:	ed93 7b00 	vldr	d7, [r3]
 8003930:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8003934:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8003938:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800393c:	da09      	bge.n	8003952 <Thrust_filter+0x1f2>
 800393e:	4b22      	ldr	r3, [pc, #136]	@ (80039c8 <Thrust_filter+0x268>)
 8003940:	ed93 7b00 	vldr	d7, [r3]
 8003944:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 8003948:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800394c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003950:	d818      	bhi.n	8003984 <Thrust_filter+0x224>
			MYDRON.THRUST = MYDRON.THRUST + thrust_values;
 8003952:	4b1c      	ldr	r3, [pc, #112]	@ (80039c4 <Thrust_filter+0x264>)
 8003954:	885b      	ldrh	r3, [r3, #2]
 8003956:	ee07 3a90 	vmov	s15, r3
 800395a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800395e:	4b1a      	ldr	r3, [pc, #104]	@ (80039c8 <Thrust_filter+0x268>)
 8003960:	ed93 7b00 	vldr	d7, [r3]
 8003964:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003968:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800396c:	ee17 3a90 	vmov	r3, s15
 8003970:	b29a      	uxth	r2, r3
 8003972:	4b14      	ldr	r3, [pc, #80]	@ (80039c4 <Thrust_filter+0x264>)
 8003974:	805a      	strh	r2, [r3, #2]
			thrust_values = 0;
 8003976:	4914      	ldr	r1, [pc, #80]	@ (80039c8 <Thrust_filter+0x268>)
 8003978:	f04f 0200 	mov.w	r2, #0
 800397c:	f04f 0300 	mov.w	r3, #0
 8003980:	e9c1 2300 	strd	r2, r3, [r1]
		}
		if(MYDRON.THRUST > 10000){//ograniczenie THRUST
 8003984:	4b0f      	ldr	r3, [pc, #60]	@ (80039c4 <Thrust_filter+0x264>)
 8003986:	885b      	ldrh	r3, [r3, #2]
 8003988:	f242 7210 	movw	r2, #10000	@ 0x2710
 800398c:	4293      	cmp	r3, r2
 800398e:	d903      	bls.n	8003998 <Thrust_filter+0x238>
			MYDRON.THRUST = 10000;
 8003990:	4b0c      	ldr	r3, [pc, #48]	@ (80039c4 <Thrust_filter+0x264>)
 8003992:	f242 7210 	movw	r2, #10000	@ 0x2710
 8003996:	805a      	strh	r2, [r3, #2]
		}
	}
}
 8003998:	bf00      	nop
 800399a:	3738      	adds	r7, #56	@ 0x38
 800399c:	46bd      	mov	sp, r7
 800399e:	bd80      	pop	{r7, pc}
 80039a0:	00000000 	.word	0x00000000
 80039a4:	409f4000 	.word	0x409f4000
 80039a8:	30553261 	.word	0x30553261
 80039ac:	3f33a92a 	.word	0x3f33a92a
 80039b0:	00004048 	.word	0x00004048
 80039b4:	00004058 	.word	0x00004058
 80039b8:	0000404c 	.word	0x0000404c
 80039bc:	0000405c 	.word	0x0000405c
 80039c0:	0000403c 	.word	0x0000403c
 80039c4:	00000158 	.word	0x00000158
 80039c8:	00004040 	.word	0x00004040

080039cc <PID_cal>:

	*g_ax = *g_ax + PID_FAC[2]*((wanted_pitch - *g_ax) - old_error_pitch);

}

void PID_cal(float *PID_var, float *PID_FAC, uint8_t pry){//pitch = 1, rool = 2, yaw = 3
 80039cc:	b480      	push	{r7}
 80039ce:	b085      	sub	sp, #20
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	60f8      	str	r0, [r7, #12]
 80039d4:	60b9      	str	r1, [r7, #8]
 80039d6:	4613      	mov	r3, r2
 80039d8:	71fb      	strb	r3, [r7, #7]
	switch(pry){
 80039da:	79fb      	ldrb	r3, [r7, #7]
 80039dc:	3b01      	subs	r3, #1
 80039de:	2b05      	cmp	r3, #5
 80039e0:	f200 8270 	bhi.w	8003ec4 <PID_cal+0x4f8>
 80039e4:	a201      	add	r2, pc, #4	@ (adr r2, 80039ec <PID_cal+0x20>)
 80039e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039ea:	bf00      	nop
 80039ec:	08003a05 	.word	0x08003a05
 80039f0:	08003adf 	.word	0x08003adf
 80039f4:	08003bb9 	.word	0x08003bb9
 80039f8:	08003cd9 	.word	0x08003cd9
 80039fc:	08003d7d 	.word	0x08003d7d
 8003a00:	08003e21 	.word	0x08003e21
		case 1://pitch

			*PID_var = PID_FAC[0]*(wanted_pitch - now_pitch);
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	ed93 7a00 	vldr	s14, [r3]
 8003a0a:	4ba2      	ldr	r3, [pc, #648]	@ (8003c94 <PID_cal+0x2c8>)
 8003a0c:	edd3 6a00 	vldr	s13, [r3]
 8003a10:	4ba1      	ldr	r3, [pc, #644]	@ (8003c98 <PID_cal+0x2cc>)
 8003a12:	edd3 7a00 	vldr	s15, [r3]
 8003a16:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003a1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	edc3 7a00 	vstr	s15, [r3]

			*PID_var = *PID_var + PID_FAC[1]*error_sum_pitch*looptime;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	ed93 7a00 	vldr	s14, [r3]
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	3304      	adds	r3, #4
 8003a2e:	edd3 6a00 	vldr	s13, [r3]
 8003a32:	4b9a      	ldr	r3, [pc, #616]	@ (8003c9c <PID_cal+0x2d0>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	ee07 3a90 	vmov	s15, r3
 8003a3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a3e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003a42:	4b97      	ldr	r3, [pc, #604]	@ (8003ca0 <PID_cal+0x2d4>)
 8003a44:	edd3 7a00 	vldr	s15, [r3]
 8003a48:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003a4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	edc3 7a00 	vstr	s15, [r3]

			PID_FAC[3] = PID_FAC[2]*((wanted_pitch - now_pitch) - old_error_pitch);//policzenie częsci D
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	3308      	adds	r3, #8
 8003a5a:	ed93 7a00 	vldr	s14, [r3]
 8003a5e:	4b8d      	ldr	r3, [pc, #564]	@ (8003c94 <PID_cal+0x2c8>)
 8003a60:	edd3 6a00 	vldr	s13, [r3]
 8003a64:	4b8c      	ldr	r3, [pc, #560]	@ (8003c98 <PID_cal+0x2cc>)
 8003a66:	edd3 7a00 	vldr	s15, [r3]
 8003a6a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003a6e:	4b8d      	ldr	r3, [pc, #564]	@ (8003ca4 <PID_cal+0x2d8>)
 8003a70:	edd3 7a00 	vldr	s15, [r3]
 8003a74:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	330c      	adds	r3, #12
 8003a7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a80:	edc3 7a00 	vstr	s15, [r3]

			//FDP
			//PID_FAC[4] = (PID_FAC[4] * (FDP_D_Gain * looptime) / (1 + (FDP_D_Gain * looptime))) + (PID_FAC[5] * (1 / (1 + (FDP_D_Gain * looptime))));
			PID_FAC[4] = PID_FAC[3];//old d_fac
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	3310      	adds	r3, #16
 8003a88:	68ba      	ldr	r2, [r7, #8]
 8003a8a:	68d2      	ldr	r2, [r2, #12]
 8003a8c:	601a      	str	r2, [r3, #0]

			*PID_var = *PID_var + PID_FAC[3];
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	ed93 7a00 	vldr	s14, [r3]
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	330c      	adds	r3, #12
 8003a98:	edd3 7a00 	vldr	s15, [r3]
 8003a9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	edc3 7a00 	vstr	s15, [r3]

				if(*PID_var > 400){//PID_var jest w o/s, jezeli bendzei chcailo sie obracac szybciej niz.. przekroczy zakres pomiarowy akcelerometru
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	edd3 7a00 	vldr	s15, [r3]
 8003aac:	ed9f 7a7e 	vldr	s14, [pc, #504]	@ 8003ca8 <PID_cal+0x2dc>
 8003ab0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003ab4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ab8:	dd02      	ble.n	8003ac0 <PID_cal+0xf4>
					*PID_var = 400;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	4a7b      	ldr	r2, [pc, #492]	@ (8003cac <PID_cal+0x2e0>)
 8003abe:	601a      	str	r2, [r3, #0]
				}
				if(*PID_var < -400){
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	edd3 7a00 	vldr	s15, [r3]
 8003ac6:	ed9f 7a7a 	vldr	s14, [pc, #488]	@ 8003cb0 <PID_cal+0x2e4>
 8003aca:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003ace:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ad2:	d400      	bmi.n	8003ad6 <PID_cal+0x10a>
					*PID_var = -400;
				}
			break;
 8003ad4:	e1f7      	b.n	8003ec6 <PID_cal+0x4fa>
					*PID_var = -400;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	4a76      	ldr	r2, [pc, #472]	@ (8003cb4 <PID_cal+0x2e8>)
 8003ada:	601a      	str	r2, [r3, #0]
			break;
 8003adc:	e1f3      	b.n	8003ec6 <PID_cal+0x4fa>

		case 2://rool

			*PID_var = PID_FAC[0]*(wanted_rool - now_rool);
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	ed93 7a00 	vldr	s14, [r3]
 8003ae4:	4b74      	ldr	r3, [pc, #464]	@ (8003cb8 <PID_cal+0x2ec>)
 8003ae6:	edd3 6a00 	vldr	s13, [r3]
 8003aea:	4b74      	ldr	r3, [pc, #464]	@ (8003cbc <PID_cal+0x2f0>)
 8003aec:	edd3 7a00 	vldr	s15, [r3]
 8003af0:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003af4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	edc3 7a00 	vstr	s15, [r3]

			*PID_var = *PID_var + PID_FAC[1]*error_sum_rool*looptime;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	ed93 7a00 	vldr	s14, [r3]
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	3304      	adds	r3, #4
 8003b08:	edd3 6a00 	vldr	s13, [r3]
 8003b0c:	4b6c      	ldr	r3, [pc, #432]	@ (8003cc0 <PID_cal+0x2f4>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	ee07 3a90 	vmov	s15, r3
 8003b14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003b18:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003b1c:	4b60      	ldr	r3, [pc, #384]	@ (8003ca0 <PID_cal+0x2d4>)
 8003b1e:	edd3 7a00 	vldr	s15, [r3]
 8003b22:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003b26:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	edc3 7a00 	vstr	s15, [r3]

			PID_FAC[3] =  PID_FAC[2]*((wanted_rool - now_rool) - old_error_rool);
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	3308      	adds	r3, #8
 8003b34:	ed93 7a00 	vldr	s14, [r3]
 8003b38:	4b5f      	ldr	r3, [pc, #380]	@ (8003cb8 <PID_cal+0x2ec>)
 8003b3a:	edd3 6a00 	vldr	s13, [r3]
 8003b3e:	4b5f      	ldr	r3, [pc, #380]	@ (8003cbc <PID_cal+0x2f0>)
 8003b40:	edd3 7a00 	vldr	s15, [r3]
 8003b44:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003b48:	4b5e      	ldr	r3, [pc, #376]	@ (8003cc4 <PID_cal+0x2f8>)
 8003b4a:	edd3 7a00 	vldr	s15, [r3]
 8003b4e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	330c      	adds	r3, #12
 8003b56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b5a:	edc3 7a00 	vstr	s15, [r3]

			//FDP
			//PID_FAC[4] = (PID_FAC[4] * (FDP_D_Gain * looptime) / (1 + (FDP_D_Gain * looptime))) + (PID_FAC[5] * (1 / (1 + (FDP_D_Gain * looptime))));
			PID_FAC[4] = PID_FAC[3];//old d_fac
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	3310      	adds	r3, #16
 8003b62:	68ba      	ldr	r2, [r7, #8]
 8003b64:	68d2      	ldr	r2, [r2, #12]
 8003b66:	601a      	str	r2, [r3, #0]

			*PID_var = *PID_var + PID_FAC[3];
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	ed93 7a00 	vldr	s14, [r3]
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	330c      	adds	r3, #12
 8003b72:	edd3 7a00 	vldr	s15, [r3]
 8003b76:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	edc3 7a00 	vstr	s15, [r3]

			if(*PID_var > 400){
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	edd3 7a00 	vldr	s15, [r3]
 8003b86:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 8003ca8 <PID_cal+0x2dc>
 8003b8a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b92:	dd02      	ble.n	8003b9a <PID_cal+0x1ce>
				*PID_var = 400;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	4a45      	ldr	r2, [pc, #276]	@ (8003cac <PID_cal+0x2e0>)
 8003b98:	601a      	str	r2, [r3, #0]
			}
			if(*PID_var < -400){
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	edd3 7a00 	vldr	s15, [r3]
 8003ba0:	ed9f 7a43 	vldr	s14, [pc, #268]	@ 8003cb0 <PID_cal+0x2e4>
 8003ba4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003ba8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bac:	d400      	bmi.n	8003bb0 <PID_cal+0x1e4>
				*PID_var = -400;
			}
			break;
 8003bae:	e18a      	b.n	8003ec6 <PID_cal+0x4fa>
				*PID_var = -400;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	4a40      	ldr	r2, [pc, #256]	@ (8003cb4 <PID_cal+0x2e8>)
 8003bb4:	601a      	str	r2, [r3, #0]
			break;
 8003bb6:	e186      	b.n	8003ec6 <PID_cal+0x4fa>

		case 3:

			*PID_var = PID_FAC[0]*(wanted_yaw - now_yaw);
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	ed93 7a00 	vldr	s14, [r3]
 8003bbe:	4b42      	ldr	r3, [pc, #264]	@ (8003cc8 <PID_cal+0x2fc>)
 8003bc0:	edd3 6a00 	vldr	s13, [r3]
 8003bc4:	4b41      	ldr	r3, [pc, #260]	@ (8003ccc <PID_cal+0x300>)
 8003bc6:	edd3 7a00 	vldr	s15, [r3]
 8003bca:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003bce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	edc3 7a00 	vstr	s15, [r3]

			*PID_var = *PID_var + PID_FAC[1]*error_sum_yaw*looptime;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	ed93 7a00 	vldr	s14, [r3]
 8003bde:	68bb      	ldr	r3, [r7, #8]
 8003be0:	3304      	adds	r3, #4
 8003be2:	edd3 6a00 	vldr	s13, [r3]
 8003be6:	4b3a      	ldr	r3, [pc, #232]	@ (8003cd0 <PID_cal+0x304>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	ee07 3a90 	vmov	s15, r3
 8003bee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003bf2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003bf6:	4b2a      	ldr	r3, [pc, #168]	@ (8003ca0 <PID_cal+0x2d4>)
 8003bf8:	edd3 7a00 	vldr	s15, [r3]
 8003bfc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003c00:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	edc3 7a00 	vstr	s15, [r3]

			PID_FAC[3] = PID_FAC[2]*((wanted_yaw - now_yaw) - old_error_yaw);
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	3308      	adds	r3, #8
 8003c0e:	ed93 7a00 	vldr	s14, [r3]
 8003c12:	4b2d      	ldr	r3, [pc, #180]	@ (8003cc8 <PID_cal+0x2fc>)
 8003c14:	edd3 6a00 	vldr	s13, [r3]
 8003c18:	4b2c      	ldr	r3, [pc, #176]	@ (8003ccc <PID_cal+0x300>)
 8003c1a:	edd3 7a00 	vldr	s15, [r3]
 8003c1e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003c22:	4b2c      	ldr	r3, [pc, #176]	@ (8003cd4 <PID_cal+0x308>)
 8003c24:	edd3 7a00 	vldr	s15, [r3]
 8003c28:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	330c      	adds	r3, #12
 8003c30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c34:	edc3 7a00 	vstr	s15, [r3]

			//FDP
			//PID_FAC[4] = (PID_FAC[4] * (FDP_D_Gain * looptime) / (1 + (FDP_D_Gain * looptime))) + (PID_FAC[5] * (1 / (1 + (FDP_D_Gain * looptime))));
			PID_FAC[4] = PID_FAC[3];//old d_fac
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	3310      	adds	r3, #16
 8003c3c:	68ba      	ldr	r2, [r7, #8]
 8003c3e:	68d2      	ldr	r2, [r2, #12]
 8003c40:	601a      	str	r2, [r3, #0]

			*PID_var = *PID_var + PID_FAC[3];
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	ed93 7a00 	vldr	s14, [r3]
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	330c      	adds	r3, #12
 8003c4c:	edd3 7a00 	vldr	s15, [r3]
 8003c50:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	edc3 7a00 	vstr	s15, [r3]

			if(*PID_var > 400){
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	edd3 7a00 	vldr	s15, [r3]
 8003c60:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8003ca8 <PID_cal+0x2dc>
 8003c64:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003c68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c6c:	dd02      	ble.n	8003c74 <PID_cal+0x2a8>
				*PID_var = 400;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	4a0e      	ldr	r2, [pc, #56]	@ (8003cac <PID_cal+0x2e0>)
 8003c72:	601a      	str	r2, [r3, #0]
			}
			if(*PID_var < -400){
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	edd3 7a00 	vldr	s15, [r3]
 8003c7a:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8003cb0 <PID_cal+0x2e4>
 8003c7e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003c82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c86:	d400      	bmi.n	8003c8a <PID_cal+0x2be>
				*PID_var = -400;
			}
			break;
 8003c88:	e11d      	b.n	8003ec6 <PID_cal+0x4fa>
				*PID_var = -400;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	4a09      	ldr	r2, [pc, #36]	@ (8003cb4 <PID_cal+0x2e8>)
 8003c8e:	601a      	str	r2, [r3, #0]
			break;
 8003c90:	e119      	b.n	8003ec6 <PID_cal+0x4fa>
 8003c92:	bf00      	nop
 8003c94:	00004048 	.word	0x00004048
 8003c98:	00004058 	.word	0x00004058
 8003c9c:	0000407c 	.word	0x0000407c
 8003ca0:	0801e8c4 	.word	0x0801e8c4
 8003ca4:	00004064 	.word	0x00004064
 8003ca8:	43c80000 	.word	0x43c80000
 8003cac:	43c80000 	.word	0x43c80000
 8003cb0:	c3c80000 	.word	0xc3c80000
 8003cb4:	c3c80000 	.word	0xc3c80000
 8003cb8:	0000404c 	.word	0x0000404c
 8003cbc:	0000405c 	.word	0x0000405c
 8003cc0:	00004080 	.word	0x00004080
 8003cc4:	00004068 	.word	0x00004068
 8003cc8:	00004050 	.word	0x00004050
 8003ccc:	00004060 	.word	0x00004060
 8003cd0:	00004084 	.word	0x00004084
 8003cd4:	0000406c 	.word	0x0000406c

		case 4:// angular rates pitch

			*PID_var = PID_FAC[0]*(pid_pitch - gx);
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	ed93 7a00 	vldr	s14, [r3]
 8003cde:	4b7d      	ldr	r3, [pc, #500]	@ (8003ed4 <PID_cal+0x508>)
 8003ce0:	edd3 6a00 	vldr	s13, [r3]
 8003ce4:	4b7c      	ldr	r3, [pc, #496]	@ (8003ed8 <PID_cal+0x50c>)
 8003ce6:	edd3 7a00 	vldr	s15, [r3]
 8003cea:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003cee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	edc3 7a00 	vstr	s15, [r3]

			*PID_var = *PID_var + PID_FAC[1]*error_sum_angular_rate_pitch*looptime;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	ed93 7a00 	vldr	s14, [r3]
 8003cfe:	68bb      	ldr	r3, [r7, #8]
 8003d00:	3304      	adds	r3, #4
 8003d02:	edd3 6a00 	vldr	s13, [r3]
 8003d06:	4b75      	ldr	r3, [pc, #468]	@ (8003edc <PID_cal+0x510>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	ee07 3a90 	vmov	s15, r3
 8003d0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003d12:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003d16:	4b72      	ldr	r3, [pc, #456]	@ (8003ee0 <PID_cal+0x514>)
 8003d18:	edd3 7a00 	vldr	s15, [r3]
 8003d1c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003d20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	edc3 7a00 	vstr	s15, [r3]


			PID_FAC[3] = PID_FAC[2]*((pid_pitch - gx) - old_error_angular_rate_pitch);//policzenie częsci D
 8003d2a:	68bb      	ldr	r3, [r7, #8]
 8003d2c:	3308      	adds	r3, #8
 8003d2e:	ed93 7a00 	vldr	s14, [r3]
 8003d32:	4b68      	ldr	r3, [pc, #416]	@ (8003ed4 <PID_cal+0x508>)
 8003d34:	edd3 6a00 	vldr	s13, [r3]
 8003d38:	4b67      	ldr	r3, [pc, #412]	@ (8003ed8 <PID_cal+0x50c>)
 8003d3a:	edd3 7a00 	vldr	s15, [r3]
 8003d3e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003d42:	4b68      	ldr	r3, [pc, #416]	@ (8003ee4 <PID_cal+0x518>)
 8003d44:	edd3 7a00 	vldr	s15, [r3]
 8003d48:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	330c      	adds	r3, #12
 8003d50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d54:	edc3 7a00 	vstr	s15, [r3]

			//FDP
			//PID_FAC[4] = (PID_FAC[4] * (FDP_D_Gain_AR * looptime) / (1 + (FDP_D_Gain_AR * looptime))) + (PID_FAC[5] * (1 / (1 + (FDP_D_Gain_AR * looptime))));
			PID_FAC[4] = PID_FAC[3];//old d_fac
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	3310      	adds	r3, #16
 8003d5c:	68ba      	ldr	r2, [r7, #8]
 8003d5e:	68d2      	ldr	r2, [r2, #12]
 8003d60:	601a      	str	r2, [r3, #0]

			*PID_var = *PID_var + PID_FAC[3];
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	ed93 7a00 	vldr	s14, [r3]
 8003d68:	68bb      	ldr	r3, [r7, #8]
 8003d6a:	330c      	adds	r3, #12
 8003d6c:	edd3 7a00 	vldr	s15, [r3]
 8003d70:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	edc3 7a00 	vstr	s15, [r3]

			break;
 8003d7a:	e0a4      	b.n	8003ec6 <PID_cal+0x4fa>

		case 5:// angular rates rool

			*PID_var = PID_FAC[0]*(pid_rool - gy);
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	ed93 7a00 	vldr	s14, [r3]
 8003d82:	4b59      	ldr	r3, [pc, #356]	@ (8003ee8 <PID_cal+0x51c>)
 8003d84:	edd3 6a00 	vldr	s13, [r3]
 8003d88:	4b58      	ldr	r3, [pc, #352]	@ (8003eec <PID_cal+0x520>)
 8003d8a:	edd3 7a00 	vldr	s15, [r3]
 8003d8e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003d92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	edc3 7a00 	vstr	s15, [r3]

			*PID_var = *PID_var + PID_FAC[1]*error_sum_angular_rate_rool*looptime;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	ed93 7a00 	vldr	s14, [r3]
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	3304      	adds	r3, #4
 8003da6:	edd3 6a00 	vldr	s13, [r3]
 8003daa:	4b51      	ldr	r3, [pc, #324]	@ (8003ef0 <PID_cal+0x524>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	ee07 3a90 	vmov	s15, r3
 8003db2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003db6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003dba:	4b49      	ldr	r3, [pc, #292]	@ (8003ee0 <PID_cal+0x514>)
 8003dbc:	edd3 7a00 	vldr	s15, [r3]
 8003dc0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003dc4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	edc3 7a00 	vstr	s15, [r3]

			PID_FAC[3] =  PID_FAC[2]*((pid_rool - gy) - old_error_angular_rate_rool);
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	3308      	adds	r3, #8
 8003dd2:	ed93 7a00 	vldr	s14, [r3]
 8003dd6:	4b44      	ldr	r3, [pc, #272]	@ (8003ee8 <PID_cal+0x51c>)
 8003dd8:	edd3 6a00 	vldr	s13, [r3]
 8003ddc:	4b43      	ldr	r3, [pc, #268]	@ (8003eec <PID_cal+0x520>)
 8003dde:	edd3 7a00 	vldr	s15, [r3]
 8003de2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003de6:	4b43      	ldr	r3, [pc, #268]	@ (8003ef4 <PID_cal+0x528>)
 8003de8:	edd3 7a00 	vldr	s15, [r3]
 8003dec:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	330c      	adds	r3, #12
 8003df4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003df8:	edc3 7a00 	vstr	s15, [r3]

			//FDP
			//PID_FAC[4] = (PID_FAC[4] * (FDP_D_Gain_AR * looptime) / (1 + (FDP_D_Gain_AR * looptime))) + (PID_FAC[5] * (1 / (1 + (FDP_D_Gain_AR * looptime))));
			PID_FAC[4] = PID_FAC[3];//old d_fac
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	3310      	adds	r3, #16
 8003e00:	68ba      	ldr	r2, [r7, #8]
 8003e02:	68d2      	ldr	r2, [r2, #12]
 8003e04:	601a      	str	r2, [r3, #0]

			*PID_var = *PID_var + PID_FAC[3];
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	ed93 7a00 	vldr	s14, [r3]
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	330c      	adds	r3, #12
 8003e10:	edd3 7a00 	vldr	s15, [r3]
 8003e14:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	edc3 7a00 	vstr	s15, [r3]
			break;
 8003e1e:	e052      	b.n	8003ec6 <PID_cal+0x4fa>

		case 6:// angular rates yaw

			*PID_var = PID_FAC[0]*(pid_yaw - gz);
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	ed93 7a00 	vldr	s14, [r3]
 8003e26:	4b34      	ldr	r3, [pc, #208]	@ (8003ef8 <PID_cal+0x52c>)
 8003e28:	edd3 6a00 	vldr	s13, [r3]
 8003e2c:	4b33      	ldr	r3, [pc, #204]	@ (8003efc <PID_cal+0x530>)
 8003e2e:	edd3 7a00 	vldr	s15, [r3]
 8003e32:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003e36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	edc3 7a00 	vstr	s15, [r3]

			*PID_var = *PID_var + PID_FAC[1]*error_sum_angular_rate_yaw*looptime;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	ed93 7a00 	vldr	s14, [r3]
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	3304      	adds	r3, #4
 8003e4a:	edd3 6a00 	vldr	s13, [r3]
 8003e4e:	4b2c      	ldr	r3, [pc, #176]	@ (8003f00 <PID_cal+0x534>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	ee07 3a90 	vmov	s15, r3
 8003e56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003e5a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003e5e:	4b20      	ldr	r3, [pc, #128]	@ (8003ee0 <PID_cal+0x514>)
 8003e60:	edd3 7a00 	vldr	s15, [r3]
 8003e64:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003e68:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	edc3 7a00 	vstr	s15, [r3]

			PID_FAC[3] = PID_FAC[2]*((pid_yaw - gz) - old_error_angular_rate_yaw);
 8003e72:	68bb      	ldr	r3, [r7, #8]
 8003e74:	3308      	adds	r3, #8
 8003e76:	ed93 7a00 	vldr	s14, [r3]
 8003e7a:	4b1f      	ldr	r3, [pc, #124]	@ (8003ef8 <PID_cal+0x52c>)
 8003e7c:	edd3 6a00 	vldr	s13, [r3]
 8003e80:	4b1e      	ldr	r3, [pc, #120]	@ (8003efc <PID_cal+0x530>)
 8003e82:	edd3 7a00 	vldr	s15, [r3]
 8003e86:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003e8a:	4b1e      	ldr	r3, [pc, #120]	@ (8003f04 <PID_cal+0x538>)
 8003e8c:	edd3 7a00 	vldr	s15, [r3]
 8003e90:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	330c      	adds	r3, #12
 8003e98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e9c:	edc3 7a00 	vstr	s15, [r3]

			//FDP
			//PID_FAC[4] = (PID_FAC[4] * (FDP_D_Gain_AR * looptime) / (1 + (FDP_D_Gain_AR * looptime))) + (PID_FAC[5] * (1 / (1 + (FDP_D_Gain_AR * looptime))));//todo
			PID_FAC[4] = PID_FAC[3];//old d_fac
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	3310      	adds	r3, #16
 8003ea4:	68ba      	ldr	r2, [r7, #8]
 8003ea6:	68d2      	ldr	r2, [r2, #12]
 8003ea8:	601a      	str	r2, [r3, #0]

			*PID_var = *PID_var + PID_FAC[3];
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	ed93 7a00 	vldr	s14, [r3]
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	330c      	adds	r3, #12
 8003eb4:	edd3 7a00 	vldr	s15, [r3]
 8003eb8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	edc3 7a00 	vstr	s15, [r3]
			break;
 8003ec2:	e000      	b.n	8003ec6 <PID_cal+0x4fa>
		default:
			break;
 8003ec4:	bf00      	nop
	}
}
 8003ec6:	bf00      	nop
 8003ec8:	3714      	adds	r7, #20
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed0:	4770      	bx	lr
 8003ed2:	bf00      	nop
 8003ed4:	00004094 	.word	0x00004094
 8003ed8:	0000000c 	.word	0x0000000c
 8003edc:	00004088 	.word	0x00004088
 8003ee0:	0801e8c4 	.word	0x0801e8c4
 8003ee4:	00004070 	.word	0x00004070
 8003ee8:	0000409c 	.word	0x0000409c
 8003eec:	00000010 	.word	0x00000010
 8003ef0:	0000408c 	.word	0x0000408c
 8003ef4:	00004074 	.word	0x00004074
 8003ef8:	00004098 	.word	0x00004098
 8003efc:	00000014 	.word	0x00000014
 8003f00:	00004090 	.word	0x00004090
 8003f04:	00004078 	.word	0x00004078

08003f08 <Get_batteryvalue>:

void Get_batteryvalue(void){
 8003f08:	b480      	push	{r7}
 8003f0a:	af00      	add	r7, sp, #0
	 * 10V musi byc czyli 2,7027V
	 *	2,7027V to 3353
	 *	3400
	*/

	MYDRON.batterysize = (analogmess - 3353)/7.42;
 8003f0c:	4b1c      	ldr	r3, [pc, #112]	@ (8003f80 <Get_batteryvalue+0x78>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f6a3 5319 	subw	r3, r3, #3353	@ 0xd19
 8003f14:	ee07 3a90 	vmov	s15, r3
 8003f18:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8003f1c:	ed9f 5b16 	vldr	d5, [pc, #88]	@ 8003f78 <Get_batteryvalue+0x70>
 8003f20:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8003f24:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003f28:	ee17 3a90 	vmov	r3, s15
 8003f2c:	b29a      	uxth	r2, r3
 8003f2e:	4b15      	ldr	r3, [pc, #84]	@ (8003f84 <Get_batteryvalue+0x7c>)
 8003f30:	801a      	strh	r2, [r3, #0]
	if(MYDRON.batterysize >= 100){
 8003f32:	4b14      	ldr	r3, [pc, #80]	@ (8003f84 <Get_batteryvalue+0x7c>)
 8003f34:	881b      	ldrh	r3, [r3, #0]
 8003f36:	2b63      	cmp	r3, #99	@ 0x63
 8003f38:	d902      	bls.n	8003f40 <Get_batteryvalue+0x38>
		MYDRON.batterysize = 100;
 8003f3a:	4b12      	ldr	r3, [pc, #72]	@ (8003f84 <Get_batteryvalue+0x7c>)
 8003f3c:	2264      	movs	r2, #100	@ 0x64
 8003f3e:	801a      	strh	r2, [r3, #0]
	}

	if(MYDRON.batterysize < 25){
 8003f40:	4b10      	ldr	r3, [pc, #64]	@ (8003f84 <Get_batteryvalue+0x7c>)
 8003f42:	881b      	ldrh	r3, [r3, #0]
 8003f44:	2b18      	cmp	r3, #24
 8003f46:	d802      	bhi.n	8003f4e <Get_batteryvalue+0x46>
		MYDRON.dron_status.Battery = DRON_BATTERY_RUN_OUT;
 8003f48:	4b0e      	ldr	r3, [pc, #56]	@ (8003f84 <Get_batteryvalue+0x7c>)
 8003f4a:	2207      	movs	r2, #7
 8003f4c:	829a      	strh	r2, [r3, #20]
	}
	if(MYDRON.batterysize <= 10){
 8003f4e:	4b0d      	ldr	r3, [pc, #52]	@ (8003f84 <Get_batteryvalue+0x7c>)
 8003f50:	881b      	ldrh	r3, [r3, #0]
 8003f52:	2b0a      	cmp	r3, #10
 8003f54:	d802      	bhi.n	8003f5c <Get_batteryvalue+0x54>
		MYDRON.dron_status.Battery = DRON_BATTERY_CRIT_VAL;
 8003f56:	4b0b      	ldr	r3, [pc, #44]	@ (8003f84 <Get_batteryvalue+0x7c>)
 8003f58:	2209      	movs	r2, #9
 8003f5a:	829a      	strh	r2, [r3, #20]
	}
	if(MYDRON.batterysize >= 25){
 8003f5c:	4b09      	ldr	r3, [pc, #36]	@ (8003f84 <Get_batteryvalue+0x7c>)
 8003f5e:	881b      	ldrh	r3, [r3, #0]
 8003f60:	2b18      	cmp	r3, #24
 8003f62:	d902      	bls.n	8003f6a <Get_batteryvalue+0x62>
		MYDRON.dron_status.Battery = DRON_BATTERY_OK;
 8003f64:	4b07      	ldr	r3, [pc, #28]	@ (8003f84 <Get_batteryvalue+0x7c>)
 8003f66:	2208      	movs	r2, #8
 8003f68:	829a      	strh	r2, [r3, #20]
	}
}
 8003f6a:	bf00      	nop
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f72:	4770      	bx	lr
 8003f74:	f3af 8000 	nop.w
 8003f78:	7ae147ae 	.word	0x7ae147ae
 8003f7c:	401dae14 	.word	0x401dae14
 8003f80:	24000ed0 	.word	0x24000ed0
 8003f84:	00000158 	.word	0x00000158

08003f88 <SELECT>:
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	af00      	add	r7, sp, #0
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003f92:	4802      	ldr	r0, [pc, #8]	@ (8003f9c <SELECT+0x14>)
 8003f94:	f00a fabc 	bl	800e510 <HAL_GPIO_WritePin>
 8003f98:	bf00      	nop
 8003f9a:	bd80      	pop	{r7, pc}
 8003f9c:	58020c00 	.word	0x58020c00

08003fa0 <DESELECT>:
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	af00      	add	r7, sp, #0
 8003fa4:	2201      	movs	r2, #1
 8003fa6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003faa:	4802      	ldr	r0, [pc, #8]	@ (8003fb4 <DESELECT+0x14>)
 8003fac:	f00a fab0 	bl	800e510 <HAL_GPIO_WritePin>
 8003fb0:	bf00      	nop
 8003fb2:	bd80      	pop	{r7, pc}
 8003fb4:	58020c00 	.word	0x58020c00

08003fb8 <SPI_TxByte>:
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b082      	sub	sp, #8
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	71fb      	strb	r3, [r7, #7]
 8003fc2:	bf00      	nop
 8003fc4:	4b07      	ldr	r3, [pc, #28]	@ (8003fe4 <SPI_TxByte+0x2c>)
 8003fc6:	695b      	ldr	r3, [r3, #20]
 8003fc8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003fcc:	2b20      	cmp	r3, #32
 8003fce:	d1f9      	bne.n	8003fc4 <SPI_TxByte+0xc>
 8003fd0:	1df9      	adds	r1, r7, #7
 8003fd2:	2364      	movs	r3, #100	@ 0x64
 8003fd4:	2201      	movs	r2, #1
 8003fd6:	4804      	ldr	r0, [pc, #16]	@ (8003fe8 <SPI_TxByte+0x30>)
 8003fd8:	f010 fbf6 	bl	80147c8 <HAL_SPI_Transmit>
 8003fdc:	bf00      	nop
 8003fde:	3708      	adds	r7, #8
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bd80      	pop	{r7, pc}
 8003fe4:	40020010 	.word	0x40020010
 8003fe8:	240001ec 	.word	0x240001ec

08003fec <SPI_TxBuffer>:
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b082      	sub	sp, #8
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
 8003ff4:	460b      	mov	r3, r1
 8003ff6:	807b      	strh	r3, [r7, #2]
 8003ff8:	bf00      	nop
 8003ffa:	4b08      	ldr	r3, [pc, #32]	@ (800401c <SPI_TxBuffer+0x30>)
 8003ffc:	695b      	ldr	r3, [r3, #20]
 8003ffe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004002:	2b20      	cmp	r3, #32
 8004004:	d1f9      	bne.n	8003ffa <SPI_TxBuffer+0xe>
 8004006:	887b      	ldrh	r3, [r7, #2]
 8004008:	461a      	mov	r2, r3
 800400a:	6879      	ldr	r1, [r7, #4]
 800400c:	4804      	ldr	r0, [pc, #16]	@ (8004020 <SPI_TxBuffer+0x34>)
 800400e:	f011 fb75 	bl	80156fc <HAL_SPI_Transmit_DMA>
 8004012:	bf00      	nop
 8004014:	3708      	adds	r7, #8
 8004016:	46bd      	mov	sp, r7
 8004018:	bd80      	pop	{r7, pc}
 800401a:	bf00      	nop
 800401c:	40020010 	.word	0x40020010
 8004020:	240001ec 	.word	0x240001ec

08004024 <SPI_RxByte>:
 8004024:	b580      	push	{r7, lr}
 8004026:	b084      	sub	sp, #16
 8004028:	af02      	add	r7, sp, #8
 800402a:	23ff      	movs	r3, #255	@ 0xff
 800402c:	71fb      	strb	r3, [r7, #7]
 800402e:	bf00      	nop
 8004030:	4b09      	ldr	r3, [pc, #36]	@ (8004058 <SPI_RxByte+0x34>)
 8004032:	695b      	ldr	r3, [r3, #20]
 8004034:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004038:	2b20      	cmp	r3, #32
 800403a:	d1f9      	bne.n	8004030 <SPI_RxByte+0xc>
 800403c:	1dba      	adds	r2, r7, #6
 800403e:	1df9      	adds	r1, r7, #7
 8004040:	2364      	movs	r3, #100	@ 0x64
 8004042:	9300      	str	r3, [sp, #0]
 8004044:	2301      	movs	r3, #1
 8004046:	4805      	ldr	r0, [pc, #20]	@ (800405c <SPI_RxByte+0x38>)
 8004048:	f011 f81e 	bl	8015088 <HAL_SPI_TransmitReceive>
 800404c:	79bb      	ldrb	r3, [r7, #6]
 800404e:	4618      	mov	r0, r3
 8004050:	3708      	adds	r7, #8
 8004052:	46bd      	mov	sp, r7
 8004054:	bd80      	pop	{r7, pc}
 8004056:	bf00      	nop
 8004058:	40020010 	.word	0x40020010
 800405c:	240001ec 	.word	0x240001ec

08004060 <SPI_RxBytePtr>:
 8004060:	b580      	push	{r7, lr}
 8004062:	b082      	sub	sp, #8
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
 8004068:	f7ff ffdc 	bl	8004024 <SPI_RxByte>
 800406c:	4603      	mov	r3, r0
 800406e:	461a      	mov	r2, r3
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	701a      	strb	r2, [r3, #0]
 8004074:	bf00      	nop
 8004076:	3708      	adds	r7, #8
 8004078:	46bd      	mov	sp, r7
 800407a:	bd80      	pop	{r7, pc}

0800407c <SD_ReadyWait>:
 800407c:	b580      	push	{r7, lr}
 800407e:	b082      	sub	sp, #8
 8004080:	af00      	add	r7, sp, #0
 8004082:	4b0a      	ldr	r3, [pc, #40]	@ (80040ac <SD_ReadyWait+0x30>)
 8004084:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8004088:	801a      	strh	r2, [r3, #0]
 800408a:	f7ff ffcb 	bl	8004024 <SPI_RxByte>
 800408e:	4603      	mov	r3, r0
 8004090:	71fb      	strb	r3, [r7, #7]
 8004092:	79fb      	ldrb	r3, [r7, #7]
 8004094:	2bff      	cmp	r3, #255	@ 0xff
 8004096:	d004      	beq.n	80040a2 <SD_ReadyWait+0x26>
 8004098:	4b04      	ldr	r3, [pc, #16]	@ (80040ac <SD_ReadyWait+0x30>)
 800409a:	881b      	ldrh	r3, [r3, #0]
 800409c:	b29b      	uxth	r3, r3
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d1f3      	bne.n	800408a <SD_ReadyWait+0xe>
 80040a2:	79fb      	ldrb	r3, [r7, #7]
 80040a4:	4618      	mov	r0, r3
 80040a6:	3708      	adds	r7, #8
 80040a8:	46bd      	mov	sp, r7
 80040aa:	bd80      	pop	{r7, pc}
 80040ac:	2400037c 	.word	0x2400037c

080040b0 <SD_PowerOn>:
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b084      	sub	sp, #16
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 80040ba:	60fb      	str	r3, [r7, #12]
 80040bc:	f7ff ff70 	bl	8003fa0 <DESELECT>
 80040c0:	2300      	movs	r3, #0
 80040c2:	60bb      	str	r3, [r7, #8]
 80040c4:	e005      	b.n	80040d2 <SD_PowerOn+0x22>
 80040c6:	20ff      	movs	r0, #255	@ 0xff
 80040c8:	f7ff ff76 	bl	8003fb8 <SPI_TxByte>
 80040cc:	68bb      	ldr	r3, [r7, #8]
 80040ce:	3301      	adds	r3, #1
 80040d0:	60bb      	str	r3, [r7, #8]
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	2b09      	cmp	r3, #9
 80040d6:	ddf6      	ble.n	80040c6 <SD_PowerOn+0x16>
 80040d8:	f7ff ff56 	bl	8003f88 <SELECT>
 80040dc:	2340      	movs	r3, #64	@ 0x40
 80040de:	703b      	strb	r3, [r7, #0]
 80040e0:	2300      	movs	r3, #0
 80040e2:	707b      	strb	r3, [r7, #1]
 80040e4:	2300      	movs	r3, #0
 80040e6:	70bb      	strb	r3, [r7, #2]
 80040e8:	2300      	movs	r3, #0
 80040ea:	70fb      	strb	r3, [r7, #3]
 80040ec:	2300      	movs	r3, #0
 80040ee:	713b      	strb	r3, [r7, #4]
 80040f0:	2395      	movs	r3, #149	@ 0x95
 80040f2:	717b      	strb	r3, [r7, #5]
 80040f4:	463b      	mov	r3, r7
 80040f6:	2106      	movs	r1, #6
 80040f8:	4618      	mov	r0, r3
 80040fa:	f7ff ff77 	bl	8003fec <SPI_TxBuffer>
 80040fe:	e002      	b.n	8004106 <SD_PowerOn+0x56>
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	3b01      	subs	r3, #1
 8004104:	60fb      	str	r3, [r7, #12]
 8004106:	f7ff ff8d 	bl	8004024 <SPI_RxByte>
 800410a:	4603      	mov	r3, r0
 800410c:	2b01      	cmp	r3, #1
 800410e:	d002      	beq.n	8004116 <SD_PowerOn+0x66>
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d1f4      	bne.n	8004100 <SD_PowerOn+0x50>
 8004116:	f7ff ff43 	bl	8003fa0 <DESELECT>
 800411a:	20ff      	movs	r0, #255	@ 0xff
 800411c:	f7ff ff4c 	bl	8003fb8 <SPI_TxByte>
 8004120:	4b03      	ldr	r3, [pc, #12]	@ (8004130 <SD_PowerOn+0x80>)
 8004122:	2201      	movs	r2, #1
 8004124:	701a      	strb	r2, [r3, #0]
 8004126:	bf00      	nop
 8004128:	3710      	adds	r7, #16
 800412a:	46bd      	mov	sp, r7
 800412c:	bd80      	pop	{r7, pc}
 800412e:	bf00      	nop
 8004130:	24000195 	.word	0x24000195

08004134 <SD_PowerOff>:
 8004134:	b480      	push	{r7}
 8004136:	af00      	add	r7, sp, #0
 8004138:	4b03      	ldr	r3, [pc, #12]	@ (8004148 <SD_PowerOff+0x14>)
 800413a:	2200      	movs	r2, #0
 800413c:	701a      	strb	r2, [r3, #0]
 800413e:	bf00      	nop
 8004140:	46bd      	mov	sp, r7
 8004142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004146:	4770      	bx	lr
 8004148:	24000195 	.word	0x24000195

0800414c <SD_CheckPower>:
 800414c:	b480      	push	{r7}
 800414e:	af00      	add	r7, sp, #0
 8004150:	4b03      	ldr	r3, [pc, #12]	@ (8004160 <SD_CheckPower+0x14>)
 8004152:	781b      	ldrb	r3, [r3, #0]
 8004154:	4618      	mov	r0, r3
 8004156:	46bd      	mov	sp, r7
 8004158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415c:	4770      	bx	lr
 800415e:	bf00      	nop
 8004160:	24000195 	.word	0x24000195

08004164 <SD_RxDataBlock>:
 8004164:	b580      	push	{r7, lr}
 8004166:	b084      	sub	sp, #16
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
 800416c:	6039      	str	r1, [r7, #0]
 800416e:	4b14      	ldr	r3, [pc, #80]	@ (80041c0 <SD_RxDataBlock+0x5c>)
 8004170:	220a      	movs	r2, #10
 8004172:	801a      	strh	r2, [r3, #0]
 8004174:	f7ff ff56 	bl	8004024 <SPI_RxByte>
 8004178:	4603      	mov	r3, r0
 800417a:	73fb      	strb	r3, [r7, #15]
 800417c:	7bfb      	ldrb	r3, [r7, #15]
 800417e:	2bff      	cmp	r3, #255	@ 0xff
 8004180:	d104      	bne.n	800418c <SD_RxDataBlock+0x28>
 8004182:	4b0f      	ldr	r3, [pc, #60]	@ (80041c0 <SD_RxDataBlock+0x5c>)
 8004184:	881b      	ldrh	r3, [r3, #0]
 8004186:	b29b      	uxth	r3, r3
 8004188:	2b00      	cmp	r3, #0
 800418a:	d1f3      	bne.n	8004174 <SD_RxDataBlock+0x10>
 800418c:	7bfb      	ldrb	r3, [r7, #15]
 800418e:	2bfe      	cmp	r3, #254	@ 0xfe
 8004190:	d001      	beq.n	8004196 <SD_RxDataBlock+0x32>
 8004192:	2300      	movs	r3, #0
 8004194:	e00f      	b.n	80041b6 <SD_RxDataBlock+0x52>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	1c5a      	adds	r2, r3, #1
 800419a:	607a      	str	r2, [r7, #4]
 800419c:	4618      	mov	r0, r3
 800419e:	f7ff ff5f 	bl	8004060 <SPI_RxBytePtr>
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	1e5a      	subs	r2, r3, #1
 80041a6:	603a      	str	r2, [r7, #0]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d1f4      	bne.n	8004196 <SD_RxDataBlock+0x32>
 80041ac:	f7ff ff3a 	bl	8004024 <SPI_RxByte>
 80041b0:	f7ff ff38 	bl	8004024 <SPI_RxByte>
 80041b4:	2301      	movs	r3, #1
 80041b6:	4618      	mov	r0, r3
 80041b8:	3710      	adds	r7, #16
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bd80      	pop	{r7, pc}
 80041be:	bf00      	nop
 80041c0:	24000378 	.word	0x24000378

080041c4 <SD_TxDataBlock>:
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b084      	sub	sp, #16
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
 80041cc:	460b      	mov	r3, r1
 80041ce:	70fb      	strb	r3, [r7, #3]
 80041d0:	2300      	movs	r3, #0
 80041d2:	73bb      	strb	r3, [r7, #14]
 80041d4:	f7ff ff52 	bl	800407c <SD_ReadyWait>
 80041d8:	4603      	mov	r3, r0
 80041da:	2bff      	cmp	r3, #255	@ 0xff
 80041dc:	d001      	beq.n	80041e2 <SD_TxDataBlock+0x1e>
 80041de:	2300      	movs	r3, #0
 80041e0:	e02f      	b.n	8004242 <SD_TxDataBlock+0x7e>
 80041e2:	78fb      	ldrb	r3, [r7, #3]
 80041e4:	4618      	mov	r0, r3
 80041e6:	f7ff fee7 	bl	8003fb8 <SPI_TxByte>
 80041ea:	78fb      	ldrb	r3, [r7, #3]
 80041ec:	2bfd      	cmp	r3, #253	@ 0xfd
 80041ee:	d020      	beq.n	8004232 <SD_TxDataBlock+0x6e>
 80041f0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80041f4:	6878      	ldr	r0, [r7, #4]
 80041f6:	f7ff fef9 	bl	8003fec <SPI_TxBuffer>
 80041fa:	f7ff ff13 	bl	8004024 <SPI_RxByte>
 80041fe:	f7ff ff11 	bl	8004024 <SPI_RxByte>
 8004202:	e00b      	b.n	800421c <SD_TxDataBlock+0x58>
 8004204:	f7ff ff0e 	bl	8004024 <SPI_RxByte>
 8004208:	4603      	mov	r3, r0
 800420a:	73fb      	strb	r3, [r7, #15]
 800420c:	7bfb      	ldrb	r3, [r7, #15]
 800420e:	f003 031f 	and.w	r3, r3, #31
 8004212:	2b05      	cmp	r3, #5
 8004214:	d006      	beq.n	8004224 <SD_TxDataBlock+0x60>
 8004216:	7bbb      	ldrb	r3, [r7, #14]
 8004218:	3301      	adds	r3, #1
 800421a:	73bb      	strb	r3, [r7, #14]
 800421c:	7bbb      	ldrb	r3, [r7, #14]
 800421e:	2b40      	cmp	r3, #64	@ 0x40
 8004220:	d9f0      	bls.n	8004204 <SD_TxDataBlock+0x40>
 8004222:	e000      	b.n	8004226 <SD_TxDataBlock+0x62>
 8004224:	bf00      	nop
 8004226:	bf00      	nop
 8004228:	f7ff fefc 	bl	8004024 <SPI_RxByte>
 800422c:	4603      	mov	r3, r0
 800422e:	2b00      	cmp	r3, #0
 8004230:	d0fa      	beq.n	8004228 <SD_TxDataBlock+0x64>
 8004232:	7bfb      	ldrb	r3, [r7, #15]
 8004234:	f003 031f 	and.w	r3, r3, #31
 8004238:	2b05      	cmp	r3, #5
 800423a:	d101      	bne.n	8004240 <SD_TxDataBlock+0x7c>
 800423c:	2301      	movs	r3, #1
 800423e:	e000      	b.n	8004242 <SD_TxDataBlock+0x7e>
 8004240:	2300      	movs	r3, #0
 8004242:	4618      	mov	r0, r3
 8004244:	3710      	adds	r7, #16
 8004246:	46bd      	mov	sp, r7
 8004248:	bd80      	pop	{r7, pc}

0800424a <SD_SendCmd>:
 800424a:	b580      	push	{r7, lr}
 800424c:	b084      	sub	sp, #16
 800424e:	af00      	add	r7, sp, #0
 8004250:	4603      	mov	r3, r0
 8004252:	6039      	str	r1, [r7, #0]
 8004254:	71fb      	strb	r3, [r7, #7]
 8004256:	f7ff ff11 	bl	800407c <SD_ReadyWait>
 800425a:	4603      	mov	r3, r0
 800425c:	2bff      	cmp	r3, #255	@ 0xff
 800425e:	d001      	beq.n	8004264 <SD_SendCmd+0x1a>
 8004260:	23ff      	movs	r3, #255	@ 0xff
 8004262:	e042      	b.n	80042ea <SD_SendCmd+0xa0>
 8004264:	79fb      	ldrb	r3, [r7, #7]
 8004266:	4618      	mov	r0, r3
 8004268:	f7ff fea6 	bl	8003fb8 <SPI_TxByte>
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	0e1b      	lsrs	r3, r3, #24
 8004270:	b2db      	uxtb	r3, r3
 8004272:	4618      	mov	r0, r3
 8004274:	f7ff fea0 	bl	8003fb8 <SPI_TxByte>
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	0c1b      	lsrs	r3, r3, #16
 800427c:	b2db      	uxtb	r3, r3
 800427e:	4618      	mov	r0, r3
 8004280:	f7ff fe9a 	bl	8003fb8 <SPI_TxByte>
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	0a1b      	lsrs	r3, r3, #8
 8004288:	b2db      	uxtb	r3, r3
 800428a:	4618      	mov	r0, r3
 800428c:	f7ff fe94 	bl	8003fb8 <SPI_TxByte>
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	b2db      	uxtb	r3, r3
 8004294:	4618      	mov	r0, r3
 8004296:	f7ff fe8f 	bl	8003fb8 <SPI_TxByte>
 800429a:	79fb      	ldrb	r3, [r7, #7]
 800429c:	2b40      	cmp	r3, #64	@ 0x40
 800429e:	d102      	bne.n	80042a6 <SD_SendCmd+0x5c>
 80042a0:	2395      	movs	r3, #149	@ 0x95
 80042a2:	73fb      	strb	r3, [r7, #15]
 80042a4:	e007      	b.n	80042b6 <SD_SendCmd+0x6c>
 80042a6:	79fb      	ldrb	r3, [r7, #7]
 80042a8:	2b48      	cmp	r3, #72	@ 0x48
 80042aa:	d102      	bne.n	80042b2 <SD_SendCmd+0x68>
 80042ac:	2387      	movs	r3, #135	@ 0x87
 80042ae:	73fb      	strb	r3, [r7, #15]
 80042b0:	e001      	b.n	80042b6 <SD_SendCmd+0x6c>
 80042b2:	2301      	movs	r3, #1
 80042b4:	73fb      	strb	r3, [r7, #15]
 80042b6:	7bfb      	ldrb	r3, [r7, #15]
 80042b8:	4618      	mov	r0, r3
 80042ba:	f7ff fe7d 	bl	8003fb8 <SPI_TxByte>
 80042be:	79fb      	ldrb	r3, [r7, #7]
 80042c0:	2b4c      	cmp	r3, #76	@ 0x4c
 80042c2:	d101      	bne.n	80042c8 <SD_SendCmd+0x7e>
 80042c4:	f7ff feae 	bl	8004024 <SPI_RxByte>
 80042c8:	230a      	movs	r3, #10
 80042ca:	73bb      	strb	r3, [r7, #14]
 80042cc:	f7ff feaa 	bl	8004024 <SPI_RxByte>
 80042d0:	4603      	mov	r3, r0
 80042d2:	737b      	strb	r3, [r7, #13]
 80042d4:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	da05      	bge.n	80042e8 <SD_SendCmd+0x9e>
 80042dc:	7bbb      	ldrb	r3, [r7, #14]
 80042de:	3b01      	subs	r3, #1
 80042e0:	73bb      	strb	r3, [r7, #14]
 80042e2:	7bbb      	ldrb	r3, [r7, #14]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d1f1      	bne.n	80042cc <SD_SendCmd+0x82>
 80042e8:	7b7b      	ldrb	r3, [r7, #13]
 80042ea:	4618      	mov	r0, r3
 80042ec:	3710      	adds	r7, #16
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd80      	pop	{r7, pc}
	...

080042f4 <SD_disk_initialize>:
 80042f4:	b590      	push	{r4, r7, lr}
 80042f6:	b085      	sub	sp, #20
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	4603      	mov	r3, r0
 80042fc:	71fb      	strb	r3, [r7, #7]
 80042fe:	79fb      	ldrb	r3, [r7, #7]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d001      	beq.n	8004308 <SD_disk_initialize+0x14>
 8004304:	2301      	movs	r3, #1
 8004306:	e0d6      	b.n	80044b6 <SD_disk_initialize+0x1c2>
 8004308:	4b6d      	ldr	r3, [pc, #436]	@ (80044c0 <SD_disk_initialize+0x1cc>)
 800430a:	781b      	ldrb	r3, [r3, #0]
 800430c:	b2db      	uxtb	r3, r3
 800430e:	f003 0302 	and.w	r3, r3, #2
 8004312:	2b00      	cmp	r3, #0
 8004314:	d003      	beq.n	800431e <SD_disk_initialize+0x2a>
 8004316:	4b6a      	ldr	r3, [pc, #424]	@ (80044c0 <SD_disk_initialize+0x1cc>)
 8004318:	781b      	ldrb	r3, [r3, #0]
 800431a:	b2db      	uxtb	r3, r3
 800431c:	e0cb      	b.n	80044b6 <SD_disk_initialize+0x1c2>
 800431e:	f7ff fec7 	bl	80040b0 <SD_PowerOn>
 8004322:	f7ff fe31 	bl	8003f88 <SELECT>
 8004326:	2300      	movs	r3, #0
 8004328:	73bb      	strb	r3, [r7, #14]
 800432a:	2100      	movs	r1, #0
 800432c:	2040      	movs	r0, #64	@ 0x40
 800432e:	f7ff ff8c 	bl	800424a <SD_SendCmd>
 8004332:	4603      	mov	r3, r0
 8004334:	2b01      	cmp	r3, #1
 8004336:	f040 80a6 	bne.w	8004486 <SD_disk_initialize+0x192>
 800433a:	4b62      	ldr	r3, [pc, #392]	@ (80044c4 <SD_disk_initialize+0x1d0>)
 800433c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004340:	801a      	strh	r2, [r3, #0]
 8004342:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8004346:	2048      	movs	r0, #72	@ 0x48
 8004348:	f7ff ff7f 	bl	800424a <SD_SendCmd>
 800434c:	4603      	mov	r3, r0
 800434e:	2b01      	cmp	r3, #1
 8004350:	d158      	bne.n	8004404 <SD_disk_initialize+0x110>
 8004352:	2300      	movs	r3, #0
 8004354:	73fb      	strb	r3, [r7, #15]
 8004356:	e00c      	b.n	8004372 <SD_disk_initialize+0x7e>
 8004358:	7bfc      	ldrb	r4, [r7, #15]
 800435a:	f7ff fe63 	bl	8004024 <SPI_RxByte>
 800435e:	4603      	mov	r3, r0
 8004360:	461a      	mov	r2, r3
 8004362:	f104 0310 	add.w	r3, r4, #16
 8004366:	443b      	add	r3, r7
 8004368:	f803 2c08 	strb.w	r2, [r3, #-8]
 800436c:	7bfb      	ldrb	r3, [r7, #15]
 800436e:	3301      	adds	r3, #1
 8004370:	73fb      	strb	r3, [r7, #15]
 8004372:	7bfb      	ldrb	r3, [r7, #15]
 8004374:	2b03      	cmp	r3, #3
 8004376:	d9ef      	bls.n	8004358 <SD_disk_initialize+0x64>
 8004378:	7abb      	ldrb	r3, [r7, #10]
 800437a:	2b01      	cmp	r3, #1
 800437c:	f040 8083 	bne.w	8004486 <SD_disk_initialize+0x192>
 8004380:	7afb      	ldrb	r3, [r7, #11]
 8004382:	2baa      	cmp	r3, #170	@ 0xaa
 8004384:	d17f      	bne.n	8004486 <SD_disk_initialize+0x192>
 8004386:	2100      	movs	r1, #0
 8004388:	2077      	movs	r0, #119	@ 0x77
 800438a:	f7ff ff5e 	bl	800424a <SD_SendCmd>
 800438e:	4603      	mov	r3, r0
 8004390:	2b01      	cmp	r3, #1
 8004392:	d807      	bhi.n	80043a4 <SD_disk_initialize+0xb0>
 8004394:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8004398:	2069      	movs	r0, #105	@ 0x69
 800439a:	f7ff ff56 	bl	800424a <SD_SendCmd>
 800439e:	4603      	mov	r3, r0
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d005      	beq.n	80043b0 <SD_disk_initialize+0xbc>
 80043a4:	4b47      	ldr	r3, [pc, #284]	@ (80044c4 <SD_disk_initialize+0x1d0>)
 80043a6:	881b      	ldrh	r3, [r3, #0]
 80043a8:	b29b      	uxth	r3, r3
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d1eb      	bne.n	8004386 <SD_disk_initialize+0x92>
 80043ae:	e000      	b.n	80043b2 <SD_disk_initialize+0xbe>
 80043b0:	bf00      	nop
 80043b2:	4b44      	ldr	r3, [pc, #272]	@ (80044c4 <SD_disk_initialize+0x1d0>)
 80043b4:	881b      	ldrh	r3, [r3, #0]
 80043b6:	b29b      	uxth	r3, r3
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d064      	beq.n	8004486 <SD_disk_initialize+0x192>
 80043bc:	2100      	movs	r1, #0
 80043be:	207a      	movs	r0, #122	@ 0x7a
 80043c0:	f7ff ff43 	bl	800424a <SD_SendCmd>
 80043c4:	4603      	mov	r3, r0
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d15d      	bne.n	8004486 <SD_disk_initialize+0x192>
 80043ca:	2300      	movs	r3, #0
 80043cc:	73fb      	strb	r3, [r7, #15]
 80043ce:	e00c      	b.n	80043ea <SD_disk_initialize+0xf6>
 80043d0:	7bfc      	ldrb	r4, [r7, #15]
 80043d2:	f7ff fe27 	bl	8004024 <SPI_RxByte>
 80043d6:	4603      	mov	r3, r0
 80043d8:	461a      	mov	r2, r3
 80043da:	f104 0310 	add.w	r3, r4, #16
 80043de:	443b      	add	r3, r7
 80043e0:	f803 2c08 	strb.w	r2, [r3, #-8]
 80043e4:	7bfb      	ldrb	r3, [r7, #15]
 80043e6:	3301      	adds	r3, #1
 80043e8:	73fb      	strb	r3, [r7, #15]
 80043ea:	7bfb      	ldrb	r3, [r7, #15]
 80043ec:	2b03      	cmp	r3, #3
 80043ee:	d9ef      	bls.n	80043d0 <SD_disk_initialize+0xdc>
 80043f0:	7a3b      	ldrb	r3, [r7, #8]
 80043f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d001      	beq.n	80043fe <SD_disk_initialize+0x10a>
 80043fa:	230c      	movs	r3, #12
 80043fc:	e000      	b.n	8004400 <SD_disk_initialize+0x10c>
 80043fe:	2304      	movs	r3, #4
 8004400:	73bb      	strb	r3, [r7, #14]
 8004402:	e040      	b.n	8004486 <SD_disk_initialize+0x192>
 8004404:	2100      	movs	r1, #0
 8004406:	2077      	movs	r0, #119	@ 0x77
 8004408:	f7ff ff1f 	bl	800424a <SD_SendCmd>
 800440c:	4603      	mov	r3, r0
 800440e:	2b01      	cmp	r3, #1
 8004410:	d808      	bhi.n	8004424 <SD_disk_initialize+0x130>
 8004412:	2100      	movs	r1, #0
 8004414:	2069      	movs	r0, #105	@ 0x69
 8004416:	f7ff ff18 	bl	800424a <SD_SendCmd>
 800441a:	4603      	mov	r3, r0
 800441c:	2b01      	cmp	r3, #1
 800441e:	d801      	bhi.n	8004424 <SD_disk_initialize+0x130>
 8004420:	2302      	movs	r3, #2
 8004422:	e000      	b.n	8004426 <SD_disk_initialize+0x132>
 8004424:	2301      	movs	r3, #1
 8004426:	73bb      	strb	r3, [r7, #14]
 8004428:	7bbb      	ldrb	r3, [r7, #14]
 800442a:	2b02      	cmp	r3, #2
 800442c:	d10e      	bne.n	800444c <SD_disk_initialize+0x158>
 800442e:	2100      	movs	r1, #0
 8004430:	2077      	movs	r0, #119	@ 0x77
 8004432:	f7ff ff0a 	bl	800424a <SD_SendCmd>
 8004436:	4603      	mov	r3, r0
 8004438:	2b01      	cmp	r3, #1
 800443a:	d80e      	bhi.n	800445a <SD_disk_initialize+0x166>
 800443c:	2100      	movs	r1, #0
 800443e:	2069      	movs	r0, #105	@ 0x69
 8004440:	f7ff ff03 	bl	800424a <SD_SendCmd>
 8004444:	4603      	mov	r3, r0
 8004446:	2b00      	cmp	r3, #0
 8004448:	d107      	bne.n	800445a <SD_disk_initialize+0x166>
 800444a:	e00d      	b.n	8004468 <SD_disk_initialize+0x174>
 800444c:	2100      	movs	r1, #0
 800444e:	2041      	movs	r0, #65	@ 0x41
 8004450:	f7ff fefb 	bl	800424a <SD_SendCmd>
 8004454:	4603      	mov	r3, r0
 8004456:	2b00      	cmp	r3, #0
 8004458:	d005      	beq.n	8004466 <SD_disk_initialize+0x172>
 800445a:	4b1a      	ldr	r3, [pc, #104]	@ (80044c4 <SD_disk_initialize+0x1d0>)
 800445c:	881b      	ldrh	r3, [r3, #0]
 800445e:	b29b      	uxth	r3, r3
 8004460:	2b00      	cmp	r3, #0
 8004462:	d1e1      	bne.n	8004428 <SD_disk_initialize+0x134>
 8004464:	e000      	b.n	8004468 <SD_disk_initialize+0x174>
 8004466:	bf00      	nop
 8004468:	4b16      	ldr	r3, [pc, #88]	@ (80044c4 <SD_disk_initialize+0x1d0>)
 800446a:	881b      	ldrh	r3, [r3, #0]
 800446c:	b29b      	uxth	r3, r3
 800446e:	2b00      	cmp	r3, #0
 8004470:	d007      	beq.n	8004482 <SD_disk_initialize+0x18e>
 8004472:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004476:	2050      	movs	r0, #80	@ 0x50
 8004478:	f7ff fee7 	bl	800424a <SD_SendCmd>
 800447c:	4603      	mov	r3, r0
 800447e:	2b00      	cmp	r3, #0
 8004480:	d001      	beq.n	8004486 <SD_disk_initialize+0x192>
 8004482:	2300      	movs	r3, #0
 8004484:	73bb      	strb	r3, [r7, #14]
 8004486:	4a10      	ldr	r2, [pc, #64]	@ (80044c8 <SD_disk_initialize+0x1d4>)
 8004488:	7bbb      	ldrb	r3, [r7, #14]
 800448a:	7013      	strb	r3, [r2, #0]
 800448c:	f7ff fd88 	bl	8003fa0 <DESELECT>
 8004490:	f7ff fdc8 	bl	8004024 <SPI_RxByte>
 8004494:	7bbb      	ldrb	r3, [r7, #14]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d008      	beq.n	80044ac <SD_disk_initialize+0x1b8>
 800449a:	4b09      	ldr	r3, [pc, #36]	@ (80044c0 <SD_disk_initialize+0x1cc>)
 800449c:	781b      	ldrb	r3, [r3, #0]
 800449e:	b2db      	uxtb	r3, r3
 80044a0:	f023 0301 	bic.w	r3, r3, #1
 80044a4:	b2da      	uxtb	r2, r3
 80044a6:	4b06      	ldr	r3, [pc, #24]	@ (80044c0 <SD_disk_initialize+0x1cc>)
 80044a8:	701a      	strb	r2, [r3, #0]
 80044aa:	e001      	b.n	80044b0 <SD_disk_initialize+0x1bc>
 80044ac:	f7ff fe42 	bl	8004134 <SD_PowerOff>
 80044b0:	4b03      	ldr	r3, [pc, #12]	@ (80044c0 <SD_disk_initialize+0x1cc>)
 80044b2:	781b      	ldrb	r3, [r3, #0]
 80044b4:	b2db      	uxtb	r3, r3
 80044b6:	4618      	mov	r0, r3
 80044b8:	3714      	adds	r7, #20
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bd90      	pop	{r4, r7, pc}
 80044be:	bf00      	nop
 80044c0:	24000000 	.word	0x24000000
 80044c4:	24000378 	.word	0x24000378
 80044c8:	24000194 	.word	0x24000194

080044cc <SD_disk_status>:
 80044cc:	b480      	push	{r7}
 80044ce:	b083      	sub	sp, #12
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	4603      	mov	r3, r0
 80044d4:	71fb      	strb	r3, [r7, #7]
 80044d6:	79fb      	ldrb	r3, [r7, #7]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d001      	beq.n	80044e0 <SD_disk_status+0x14>
 80044dc:	2301      	movs	r3, #1
 80044de:	e002      	b.n	80044e6 <SD_disk_status+0x1a>
 80044e0:	4b04      	ldr	r3, [pc, #16]	@ (80044f4 <SD_disk_status+0x28>)
 80044e2:	781b      	ldrb	r3, [r3, #0]
 80044e4:	b2db      	uxtb	r3, r3
 80044e6:	4618      	mov	r0, r3
 80044e8:	370c      	adds	r7, #12
 80044ea:	46bd      	mov	sp, r7
 80044ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f0:	4770      	bx	lr
 80044f2:	bf00      	nop
 80044f4:	24000000 	.word	0x24000000

080044f8 <SD_disk_read>:
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b084      	sub	sp, #16
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	60b9      	str	r1, [r7, #8]
 8004500:	607a      	str	r2, [r7, #4]
 8004502:	603b      	str	r3, [r7, #0]
 8004504:	4603      	mov	r3, r0
 8004506:	73fb      	strb	r3, [r7, #15]
 8004508:	7bfb      	ldrb	r3, [r7, #15]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d102      	bne.n	8004514 <SD_disk_read+0x1c>
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d101      	bne.n	8004518 <SD_disk_read+0x20>
 8004514:	2304      	movs	r3, #4
 8004516:	e051      	b.n	80045bc <SD_disk_read+0xc4>
 8004518:	4b2a      	ldr	r3, [pc, #168]	@ (80045c4 <SD_disk_read+0xcc>)
 800451a:	781b      	ldrb	r3, [r3, #0]
 800451c:	b2db      	uxtb	r3, r3
 800451e:	f003 0301 	and.w	r3, r3, #1
 8004522:	2b00      	cmp	r3, #0
 8004524:	d001      	beq.n	800452a <SD_disk_read+0x32>
 8004526:	2303      	movs	r3, #3
 8004528:	e048      	b.n	80045bc <SD_disk_read+0xc4>
 800452a:	4b27      	ldr	r3, [pc, #156]	@ (80045c8 <SD_disk_read+0xd0>)
 800452c:	781b      	ldrb	r3, [r3, #0]
 800452e:	f003 0304 	and.w	r3, r3, #4
 8004532:	2b00      	cmp	r3, #0
 8004534:	d102      	bne.n	800453c <SD_disk_read+0x44>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	025b      	lsls	r3, r3, #9
 800453a:	607b      	str	r3, [r7, #4]
 800453c:	f7ff fd24 	bl	8003f88 <SELECT>
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	2b01      	cmp	r3, #1
 8004544:	d111      	bne.n	800456a <SD_disk_read+0x72>
 8004546:	6879      	ldr	r1, [r7, #4]
 8004548:	2051      	movs	r0, #81	@ 0x51
 800454a:	f7ff fe7e 	bl	800424a <SD_SendCmd>
 800454e:	4603      	mov	r3, r0
 8004550:	2b00      	cmp	r3, #0
 8004552:	d129      	bne.n	80045a8 <SD_disk_read+0xb0>
 8004554:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004558:	68b8      	ldr	r0, [r7, #8]
 800455a:	f7ff fe03 	bl	8004164 <SD_RxDataBlock>
 800455e:	4603      	mov	r3, r0
 8004560:	2b00      	cmp	r3, #0
 8004562:	d021      	beq.n	80045a8 <SD_disk_read+0xb0>
 8004564:	2300      	movs	r3, #0
 8004566:	603b      	str	r3, [r7, #0]
 8004568:	e01e      	b.n	80045a8 <SD_disk_read+0xb0>
 800456a:	6879      	ldr	r1, [r7, #4]
 800456c:	2052      	movs	r0, #82	@ 0x52
 800456e:	f7ff fe6c 	bl	800424a <SD_SendCmd>
 8004572:	4603      	mov	r3, r0
 8004574:	2b00      	cmp	r3, #0
 8004576:	d117      	bne.n	80045a8 <SD_disk_read+0xb0>
 8004578:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800457c:	68b8      	ldr	r0, [r7, #8]
 800457e:	f7ff fdf1 	bl	8004164 <SD_RxDataBlock>
 8004582:	4603      	mov	r3, r0
 8004584:	2b00      	cmp	r3, #0
 8004586:	d00a      	beq.n	800459e <SD_disk_read+0xa6>
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800458e:	60bb      	str	r3, [r7, #8]
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	3b01      	subs	r3, #1
 8004594:	603b      	str	r3, [r7, #0]
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d1ed      	bne.n	8004578 <SD_disk_read+0x80>
 800459c:	e000      	b.n	80045a0 <SD_disk_read+0xa8>
 800459e:	bf00      	nop
 80045a0:	2100      	movs	r1, #0
 80045a2:	204c      	movs	r0, #76	@ 0x4c
 80045a4:	f7ff fe51 	bl	800424a <SD_SendCmd>
 80045a8:	f7ff fcfa 	bl	8003fa0 <DESELECT>
 80045ac:	f7ff fd3a 	bl	8004024 <SPI_RxByte>
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	bf14      	ite	ne
 80045b6:	2301      	movne	r3, #1
 80045b8:	2300      	moveq	r3, #0
 80045ba:	b2db      	uxtb	r3, r3
 80045bc:	4618      	mov	r0, r3
 80045be:	3710      	adds	r7, #16
 80045c0:	46bd      	mov	sp, r7
 80045c2:	bd80      	pop	{r7, pc}
 80045c4:	24000000 	.word	0x24000000
 80045c8:	24000194 	.word	0x24000194

080045cc <SD_disk_write>:
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b084      	sub	sp, #16
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	60b9      	str	r1, [r7, #8]
 80045d4:	607a      	str	r2, [r7, #4]
 80045d6:	603b      	str	r3, [r7, #0]
 80045d8:	4603      	mov	r3, r0
 80045da:	73fb      	strb	r3, [r7, #15]
 80045dc:	7bfb      	ldrb	r3, [r7, #15]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d102      	bne.n	80045e8 <SD_disk_write+0x1c>
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d101      	bne.n	80045ec <SD_disk_write+0x20>
 80045e8:	2304      	movs	r3, #4
 80045ea:	e06b      	b.n	80046c4 <SD_disk_write+0xf8>
 80045ec:	4b37      	ldr	r3, [pc, #220]	@ (80046cc <SD_disk_write+0x100>)
 80045ee:	781b      	ldrb	r3, [r3, #0]
 80045f0:	b2db      	uxtb	r3, r3
 80045f2:	f003 0301 	and.w	r3, r3, #1
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d001      	beq.n	80045fe <SD_disk_write+0x32>
 80045fa:	2303      	movs	r3, #3
 80045fc:	e062      	b.n	80046c4 <SD_disk_write+0xf8>
 80045fe:	4b33      	ldr	r3, [pc, #204]	@ (80046cc <SD_disk_write+0x100>)
 8004600:	781b      	ldrb	r3, [r3, #0]
 8004602:	b2db      	uxtb	r3, r3
 8004604:	f003 0304 	and.w	r3, r3, #4
 8004608:	2b00      	cmp	r3, #0
 800460a:	d001      	beq.n	8004610 <SD_disk_write+0x44>
 800460c:	2302      	movs	r3, #2
 800460e:	e059      	b.n	80046c4 <SD_disk_write+0xf8>
 8004610:	4b2f      	ldr	r3, [pc, #188]	@ (80046d0 <SD_disk_write+0x104>)
 8004612:	781b      	ldrb	r3, [r3, #0]
 8004614:	f003 0304 	and.w	r3, r3, #4
 8004618:	2b00      	cmp	r3, #0
 800461a:	d102      	bne.n	8004622 <SD_disk_write+0x56>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	025b      	lsls	r3, r3, #9
 8004620:	607b      	str	r3, [r7, #4]
 8004622:	f7ff fcb1 	bl	8003f88 <SELECT>
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	2b01      	cmp	r3, #1
 800462a:	d110      	bne.n	800464e <SD_disk_write+0x82>
 800462c:	6879      	ldr	r1, [r7, #4]
 800462e:	2058      	movs	r0, #88	@ 0x58
 8004630:	f7ff fe0b 	bl	800424a <SD_SendCmd>
 8004634:	4603      	mov	r3, r0
 8004636:	2b00      	cmp	r3, #0
 8004638:	d13a      	bne.n	80046b0 <SD_disk_write+0xe4>
 800463a:	21fe      	movs	r1, #254	@ 0xfe
 800463c:	68b8      	ldr	r0, [r7, #8]
 800463e:	f7ff fdc1 	bl	80041c4 <SD_TxDataBlock>
 8004642:	4603      	mov	r3, r0
 8004644:	2b00      	cmp	r3, #0
 8004646:	d033      	beq.n	80046b0 <SD_disk_write+0xe4>
 8004648:	2300      	movs	r3, #0
 800464a:	603b      	str	r3, [r7, #0]
 800464c:	e030      	b.n	80046b0 <SD_disk_write+0xe4>
 800464e:	4b20      	ldr	r3, [pc, #128]	@ (80046d0 <SD_disk_write+0x104>)
 8004650:	781b      	ldrb	r3, [r3, #0]
 8004652:	f003 0302 	and.w	r3, r3, #2
 8004656:	2b00      	cmp	r3, #0
 8004658:	d007      	beq.n	800466a <SD_disk_write+0x9e>
 800465a:	2100      	movs	r1, #0
 800465c:	2077      	movs	r0, #119	@ 0x77
 800465e:	f7ff fdf4 	bl	800424a <SD_SendCmd>
 8004662:	6839      	ldr	r1, [r7, #0]
 8004664:	2057      	movs	r0, #87	@ 0x57
 8004666:	f7ff fdf0 	bl	800424a <SD_SendCmd>
 800466a:	6879      	ldr	r1, [r7, #4]
 800466c:	2059      	movs	r0, #89	@ 0x59
 800466e:	f7ff fdec 	bl	800424a <SD_SendCmd>
 8004672:	4603      	mov	r3, r0
 8004674:	2b00      	cmp	r3, #0
 8004676:	d11b      	bne.n	80046b0 <SD_disk_write+0xe4>
 8004678:	21fc      	movs	r1, #252	@ 0xfc
 800467a:	68b8      	ldr	r0, [r7, #8]
 800467c:	f7ff fda2 	bl	80041c4 <SD_TxDataBlock>
 8004680:	4603      	mov	r3, r0
 8004682:	2b00      	cmp	r3, #0
 8004684:	d00a      	beq.n	800469c <SD_disk_write+0xd0>
 8004686:	68bb      	ldr	r3, [r7, #8]
 8004688:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800468c:	60bb      	str	r3, [r7, #8]
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	3b01      	subs	r3, #1
 8004692:	603b      	str	r3, [r7, #0]
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d1ee      	bne.n	8004678 <SD_disk_write+0xac>
 800469a:	e000      	b.n	800469e <SD_disk_write+0xd2>
 800469c:	bf00      	nop
 800469e:	21fd      	movs	r1, #253	@ 0xfd
 80046a0:	2000      	movs	r0, #0
 80046a2:	f7ff fd8f 	bl	80041c4 <SD_TxDataBlock>
 80046a6:	4603      	mov	r3, r0
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d101      	bne.n	80046b0 <SD_disk_write+0xe4>
 80046ac:	2301      	movs	r3, #1
 80046ae:	603b      	str	r3, [r7, #0]
 80046b0:	f7ff fc76 	bl	8003fa0 <DESELECT>
 80046b4:	f7ff fcb6 	bl	8004024 <SPI_RxByte>
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	bf14      	ite	ne
 80046be:	2301      	movne	r3, #1
 80046c0:	2300      	moveq	r3, #0
 80046c2:	b2db      	uxtb	r3, r3
 80046c4:	4618      	mov	r0, r3
 80046c6:	3710      	adds	r7, #16
 80046c8:	46bd      	mov	sp, r7
 80046ca:	bd80      	pop	{r7, pc}
 80046cc:	24000000 	.word	0x24000000
 80046d0:	24000194 	.word	0x24000194

080046d4 <SD_disk_ioctl>:
 80046d4:	b590      	push	{r4, r7, lr}
 80046d6:	b08b      	sub	sp, #44	@ 0x2c
 80046d8:	af00      	add	r7, sp, #0
 80046da:	4603      	mov	r3, r0
 80046dc:	603a      	str	r2, [r7, #0]
 80046de:	71fb      	strb	r3, [r7, #7]
 80046e0:	460b      	mov	r3, r1
 80046e2:	71bb      	strb	r3, [r7, #6]
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	623b      	str	r3, [r7, #32]
 80046e8:	79fb      	ldrb	r3, [r7, #7]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d001      	beq.n	80046f2 <SD_disk_ioctl+0x1e>
 80046ee:	2304      	movs	r3, #4
 80046f0:	e113      	b.n	800491a <SD_disk_ioctl+0x246>
 80046f2:	2301      	movs	r3, #1
 80046f4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80046f8:	79bb      	ldrb	r3, [r7, #6]
 80046fa:	2b05      	cmp	r3, #5
 80046fc:	d124      	bne.n	8004748 <SD_disk_ioctl+0x74>
 80046fe:	6a3b      	ldr	r3, [r7, #32]
 8004700:	781b      	ldrb	r3, [r3, #0]
 8004702:	2b02      	cmp	r3, #2
 8004704:	d012      	beq.n	800472c <SD_disk_ioctl+0x58>
 8004706:	2b02      	cmp	r3, #2
 8004708:	dc1a      	bgt.n	8004740 <SD_disk_ioctl+0x6c>
 800470a:	2b00      	cmp	r3, #0
 800470c:	d002      	beq.n	8004714 <SD_disk_ioctl+0x40>
 800470e:	2b01      	cmp	r3, #1
 8004710:	d006      	beq.n	8004720 <SD_disk_ioctl+0x4c>
 8004712:	e015      	b.n	8004740 <SD_disk_ioctl+0x6c>
 8004714:	f7ff fd0e 	bl	8004134 <SD_PowerOff>
 8004718:	2300      	movs	r3, #0
 800471a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800471e:	e0fa      	b.n	8004916 <SD_disk_ioctl+0x242>
 8004720:	f7ff fcc6 	bl	80040b0 <SD_PowerOn>
 8004724:	2300      	movs	r3, #0
 8004726:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800472a:	e0f4      	b.n	8004916 <SD_disk_ioctl+0x242>
 800472c:	6a3b      	ldr	r3, [r7, #32]
 800472e:	1c5c      	adds	r4, r3, #1
 8004730:	f7ff fd0c 	bl	800414c <SD_CheckPower>
 8004734:	4603      	mov	r3, r0
 8004736:	7023      	strb	r3, [r4, #0]
 8004738:	2300      	movs	r3, #0
 800473a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800473e:	e0ea      	b.n	8004916 <SD_disk_ioctl+0x242>
 8004740:	2304      	movs	r3, #4
 8004742:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8004746:	e0e6      	b.n	8004916 <SD_disk_ioctl+0x242>
 8004748:	4b76      	ldr	r3, [pc, #472]	@ (8004924 <SD_disk_ioctl+0x250>)
 800474a:	781b      	ldrb	r3, [r3, #0]
 800474c:	b2db      	uxtb	r3, r3
 800474e:	f003 0301 	and.w	r3, r3, #1
 8004752:	2b00      	cmp	r3, #0
 8004754:	d001      	beq.n	800475a <SD_disk_ioctl+0x86>
 8004756:	2303      	movs	r3, #3
 8004758:	e0df      	b.n	800491a <SD_disk_ioctl+0x246>
 800475a:	f7ff fc15 	bl	8003f88 <SELECT>
 800475e:	79bb      	ldrb	r3, [r7, #6]
 8004760:	2b0d      	cmp	r3, #13
 8004762:	f200 80c9 	bhi.w	80048f8 <SD_disk_ioctl+0x224>
 8004766:	a201      	add	r2, pc, #4	@ (adr r2, 800476c <SD_disk_ioctl+0x98>)
 8004768:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800476c:	08004863 	.word	0x08004863
 8004770:	080047a5 	.word	0x080047a5
 8004774:	08004853 	.word	0x08004853
 8004778:	080048f9 	.word	0x080048f9
 800477c:	080048f9 	.word	0x080048f9
 8004780:	080048f9 	.word	0x080048f9
 8004784:	080048f9 	.word	0x080048f9
 8004788:	080048f9 	.word	0x080048f9
 800478c:	080048f9 	.word	0x080048f9
 8004790:	080048f9 	.word	0x080048f9
 8004794:	080048f9 	.word	0x080048f9
 8004798:	08004875 	.word	0x08004875
 800479c:	08004899 	.word	0x08004899
 80047a0:	080048bd 	.word	0x080048bd
 80047a4:	2100      	movs	r1, #0
 80047a6:	2049      	movs	r0, #73	@ 0x49
 80047a8:	f7ff fd4f 	bl	800424a <SD_SendCmd>
 80047ac:	4603      	mov	r3, r0
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	f040 80a6 	bne.w	8004900 <SD_disk_ioctl+0x22c>
 80047b4:	f107 030c 	add.w	r3, r7, #12
 80047b8:	2110      	movs	r1, #16
 80047ba:	4618      	mov	r0, r3
 80047bc:	f7ff fcd2 	bl	8004164 <SD_RxDataBlock>
 80047c0:	4603      	mov	r3, r0
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	f000 809c 	beq.w	8004900 <SD_disk_ioctl+0x22c>
 80047c8:	7b3b      	ldrb	r3, [r7, #12]
 80047ca:	099b      	lsrs	r3, r3, #6
 80047cc:	b2db      	uxtb	r3, r3
 80047ce:	2b01      	cmp	r3, #1
 80047d0:	d10d      	bne.n	80047ee <SD_disk_ioctl+0x11a>
 80047d2:	7d7b      	ldrb	r3, [r7, #21]
 80047d4:	461a      	mov	r2, r3
 80047d6:	7d3b      	ldrb	r3, [r7, #20]
 80047d8:	021b      	lsls	r3, r3, #8
 80047da:	b29b      	uxth	r3, r3
 80047dc:	4413      	add	r3, r2
 80047de:	b29b      	uxth	r3, r3
 80047e0:	3301      	adds	r3, #1
 80047e2:	83fb      	strh	r3, [r7, #30]
 80047e4:	8bfb      	ldrh	r3, [r7, #30]
 80047e6:	029a      	lsls	r2, r3, #10
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	601a      	str	r2, [r3, #0]
 80047ec:	e02d      	b.n	800484a <SD_disk_ioctl+0x176>
 80047ee:	7c7b      	ldrb	r3, [r7, #17]
 80047f0:	f003 030f 	and.w	r3, r3, #15
 80047f4:	b2da      	uxtb	r2, r3
 80047f6:	7dbb      	ldrb	r3, [r7, #22]
 80047f8:	09db      	lsrs	r3, r3, #7
 80047fa:	b2db      	uxtb	r3, r3
 80047fc:	4413      	add	r3, r2
 80047fe:	b2da      	uxtb	r2, r3
 8004800:	7d7b      	ldrb	r3, [r7, #21]
 8004802:	005b      	lsls	r3, r3, #1
 8004804:	b2db      	uxtb	r3, r3
 8004806:	f003 0306 	and.w	r3, r3, #6
 800480a:	b2db      	uxtb	r3, r3
 800480c:	4413      	add	r3, r2
 800480e:	b2db      	uxtb	r3, r3
 8004810:	3302      	adds	r3, #2
 8004812:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8004816:	7d3b      	ldrb	r3, [r7, #20]
 8004818:	099b      	lsrs	r3, r3, #6
 800481a:	b2db      	uxtb	r3, r3
 800481c:	461a      	mov	r2, r3
 800481e:	7cfb      	ldrb	r3, [r7, #19]
 8004820:	009b      	lsls	r3, r3, #2
 8004822:	b29b      	uxth	r3, r3
 8004824:	4413      	add	r3, r2
 8004826:	b29a      	uxth	r2, r3
 8004828:	7cbb      	ldrb	r3, [r7, #18]
 800482a:	029b      	lsls	r3, r3, #10
 800482c:	b29b      	uxth	r3, r3
 800482e:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004832:	b29b      	uxth	r3, r3
 8004834:	4413      	add	r3, r2
 8004836:	b29b      	uxth	r3, r3
 8004838:	3301      	adds	r3, #1
 800483a:	83fb      	strh	r3, [r7, #30]
 800483c:	8bfa      	ldrh	r2, [r7, #30]
 800483e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004842:	3b09      	subs	r3, #9
 8004844:	409a      	lsls	r2, r3
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	601a      	str	r2, [r3, #0]
 800484a:	2300      	movs	r3, #0
 800484c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8004850:	e056      	b.n	8004900 <SD_disk_ioctl+0x22c>
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004858:	801a      	strh	r2, [r3, #0]
 800485a:	2300      	movs	r3, #0
 800485c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8004860:	e055      	b.n	800490e <SD_disk_ioctl+0x23a>
 8004862:	f7ff fc0b 	bl	800407c <SD_ReadyWait>
 8004866:	4603      	mov	r3, r0
 8004868:	2bff      	cmp	r3, #255	@ 0xff
 800486a:	d14b      	bne.n	8004904 <SD_disk_ioctl+0x230>
 800486c:	2300      	movs	r3, #0
 800486e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8004872:	e047      	b.n	8004904 <SD_disk_ioctl+0x230>
 8004874:	2100      	movs	r1, #0
 8004876:	2049      	movs	r0, #73	@ 0x49
 8004878:	f7ff fce7 	bl	800424a <SD_SendCmd>
 800487c:	4603      	mov	r3, r0
 800487e:	2b00      	cmp	r3, #0
 8004880:	d142      	bne.n	8004908 <SD_disk_ioctl+0x234>
 8004882:	2110      	movs	r1, #16
 8004884:	6a38      	ldr	r0, [r7, #32]
 8004886:	f7ff fc6d 	bl	8004164 <SD_RxDataBlock>
 800488a:	4603      	mov	r3, r0
 800488c:	2b00      	cmp	r3, #0
 800488e:	d03b      	beq.n	8004908 <SD_disk_ioctl+0x234>
 8004890:	2300      	movs	r3, #0
 8004892:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8004896:	e037      	b.n	8004908 <SD_disk_ioctl+0x234>
 8004898:	2100      	movs	r1, #0
 800489a:	204a      	movs	r0, #74	@ 0x4a
 800489c:	f7ff fcd5 	bl	800424a <SD_SendCmd>
 80048a0:	4603      	mov	r3, r0
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d132      	bne.n	800490c <SD_disk_ioctl+0x238>
 80048a6:	2110      	movs	r1, #16
 80048a8:	6a38      	ldr	r0, [r7, #32]
 80048aa:	f7ff fc5b 	bl	8004164 <SD_RxDataBlock>
 80048ae:	4603      	mov	r3, r0
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d02b      	beq.n	800490c <SD_disk_ioctl+0x238>
 80048b4:	2300      	movs	r3, #0
 80048b6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80048ba:	e027      	b.n	800490c <SD_disk_ioctl+0x238>
 80048bc:	2100      	movs	r1, #0
 80048be:	207a      	movs	r0, #122	@ 0x7a
 80048c0:	f7ff fcc3 	bl	800424a <SD_SendCmd>
 80048c4:	4603      	mov	r3, r0
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d116      	bne.n	80048f8 <SD_disk_ioctl+0x224>
 80048ca:	2300      	movs	r3, #0
 80048cc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80048d0:	e00b      	b.n	80048ea <SD_disk_ioctl+0x216>
 80048d2:	6a3c      	ldr	r4, [r7, #32]
 80048d4:	1c63      	adds	r3, r4, #1
 80048d6:	623b      	str	r3, [r7, #32]
 80048d8:	f7ff fba4 	bl	8004024 <SPI_RxByte>
 80048dc:	4603      	mov	r3, r0
 80048de:	7023      	strb	r3, [r4, #0]
 80048e0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80048e4:	3301      	adds	r3, #1
 80048e6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80048ea:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80048ee:	2b03      	cmp	r3, #3
 80048f0:	d9ef      	bls.n	80048d2 <SD_disk_ioctl+0x1fe>
 80048f2:	2300      	movs	r3, #0
 80048f4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80048f8:	2304      	movs	r3, #4
 80048fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80048fe:	e006      	b.n	800490e <SD_disk_ioctl+0x23a>
 8004900:	bf00      	nop
 8004902:	e004      	b.n	800490e <SD_disk_ioctl+0x23a>
 8004904:	bf00      	nop
 8004906:	e002      	b.n	800490e <SD_disk_ioctl+0x23a>
 8004908:	bf00      	nop
 800490a:	e000      	b.n	800490e <SD_disk_ioctl+0x23a>
 800490c:	bf00      	nop
 800490e:	f7ff fb47 	bl	8003fa0 <DESELECT>
 8004912:	f7ff fb87 	bl	8004024 <SPI_RxByte>
 8004916:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800491a:	4618      	mov	r0, r3
 800491c:	372c      	adds	r7, #44	@ 0x2c
 800491e:	46bd      	mov	sp, r7
 8004920:	bd90      	pop	{r4, r7, pc}
 8004922:	bf00      	nop
 8004924:	24000000 	.word	0x24000000

08004928 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b08e      	sub	sp, #56	@ 0x38
 800492c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800492e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004932:	2200      	movs	r2, #0
 8004934:	601a      	str	r2, [r3, #0]
 8004936:	605a      	str	r2, [r3, #4]
 8004938:	609a      	str	r2, [r3, #8]
 800493a:	60da      	str	r2, [r3, #12]
 800493c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800493e:	4b8b      	ldr	r3, [pc, #556]	@ (8004b6c <MX_GPIO_Init+0x244>)
 8004940:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004944:	4a89      	ldr	r2, [pc, #548]	@ (8004b6c <MX_GPIO_Init+0x244>)
 8004946:	f043 0310 	orr.w	r3, r3, #16
 800494a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800494e:	4b87      	ldr	r3, [pc, #540]	@ (8004b6c <MX_GPIO_Init+0x244>)
 8004950:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004954:	f003 0310 	and.w	r3, r3, #16
 8004958:	623b      	str	r3, [r7, #32]
 800495a:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800495c:	4b83      	ldr	r3, [pc, #524]	@ (8004b6c <MX_GPIO_Init+0x244>)
 800495e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004962:	4a82      	ldr	r2, [pc, #520]	@ (8004b6c <MX_GPIO_Init+0x244>)
 8004964:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004968:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800496c:	4b7f      	ldr	r3, [pc, #508]	@ (8004b6c <MX_GPIO_Init+0x244>)
 800496e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004972:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004976:	61fb      	str	r3, [r7, #28]
 8004978:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800497a:	4b7c      	ldr	r3, [pc, #496]	@ (8004b6c <MX_GPIO_Init+0x244>)
 800497c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004980:	4a7a      	ldr	r2, [pc, #488]	@ (8004b6c <MX_GPIO_Init+0x244>)
 8004982:	f043 0301 	orr.w	r3, r3, #1
 8004986:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800498a:	4b78      	ldr	r3, [pc, #480]	@ (8004b6c <MX_GPIO_Init+0x244>)
 800498c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004990:	f003 0301 	and.w	r3, r3, #1
 8004994:	61bb      	str	r3, [r7, #24]
 8004996:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004998:	4b74      	ldr	r3, [pc, #464]	@ (8004b6c <MX_GPIO_Init+0x244>)
 800499a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800499e:	4a73      	ldr	r2, [pc, #460]	@ (8004b6c <MX_GPIO_Init+0x244>)
 80049a0:	f043 0320 	orr.w	r3, r3, #32
 80049a4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80049a8:	4b70      	ldr	r3, [pc, #448]	@ (8004b6c <MX_GPIO_Init+0x244>)
 80049aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80049ae:	f003 0320 	and.w	r3, r3, #32
 80049b2:	617b      	str	r3, [r7, #20]
 80049b4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80049b6:	4b6d      	ldr	r3, [pc, #436]	@ (8004b6c <MX_GPIO_Init+0x244>)
 80049b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80049bc:	4a6b      	ldr	r2, [pc, #428]	@ (8004b6c <MX_GPIO_Init+0x244>)
 80049be:	f043 0302 	orr.w	r3, r3, #2
 80049c2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80049c6:	4b69      	ldr	r3, [pc, #420]	@ (8004b6c <MX_GPIO_Init+0x244>)
 80049c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80049cc:	f003 0302 	and.w	r3, r3, #2
 80049d0:	613b      	str	r3, [r7, #16]
 80049d2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80049d4:	4b65      	ldr	r3, [pc, #404]	@ (8004b6c <MX_GPIO_Init+0x244>)
 80049d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80049da:	4a64      	ldr	r2, [pc, #400]	@ (8004b6c <MX_GPIO_Init+0x244>)
 80049dc:	f043 0308 	orr.w	r3, r3, #8
 80049e0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80049e4:	4b61      	ldr	r3, [pc, #388]	@ (8004b6c <MX_GPIO_Init+0x244>)
 80049e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80049ea:	f003 0308 	and.w	r3, r3, #8
 80049ee:	60fb      	str	r3, [r7, #12]
 80049f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80049f2:	4b5e      	ldr	r3, [pc, #376]	@ (8004b6c <MX_GPIO_Init+0x244>)
 80049f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80049f8:	4a5c      	ldr	r2, [pc, #368]	@ (8004b6c <MX_GPIO_Init+0x244>)
 80049fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80049fe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004a02:	4b5a      	ldr	r3, [pc, #360]	@ (8004b6c <MX_GPIO_Init+0x244>)
 8004a04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004a08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a0c:	60bb      	str	r3, [r7, #8]
 8004a0e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004a10:	4b56      	ldr	r3, [pc, #344]	@ (8004b6c <MX_GPIO_Init+0x244>)
 8004a12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004a16:	4a55      	ldr	r2, [pc, #340]	@ (8004b6c <MX_GPIO_Init+0x244>)
 8004a18:	f043 0304 	orr.w	r3, r3, #4
 8004a1c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004a20:	4b52      	ldr	r3, [pc, #328]	@ (8004b6c <MX_GPIO_Init+0x244>)
 8004a22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004a26:	f003 0304 	and.w	r3, r3, #4
 8004a2a:	607b      	str	r3, [r7, #4]
 8004a2c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED_6_Pin|LED_G_Pin, GPIO_PIN_RESET);
 8004a2e:	2200      	movs	r2, #0
 8004a30:	f248 0108 	movw	r1, #32776	@ 0x8008
 8004a34:	484e      	ldr	r0, [pc, #312]	@ (8004b70 <MX_GPIO_Init+0x248>)
 8004a36:	f009 fd6b 	bl	800e510 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_Y_Pin|LED_R_Pin|NRF24_CE_Pin|NRF24_CSN_Pin, GPIO_PIN_RESET);
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	f44f 614c 	mov.w	r1, #3264	@ 0xcc0
 8004a40:	484c      	ldr	r0, [pc, #304]	@ (8004b74 <MX_GPIO_Init+0x24c>)
 8004a42:	f009 fd65 	bl	800e510 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, uSD_LED_Pin|uSD_SC_Pin, GPIO_PIN_RESET);
 8004a46:	2200      	movs	r2, #0
 8004a48:	f44f 4108 	mov.w	r1, #34816	@ 0x8800
 8004a4c:	484a      	ldr	r0, [pc, #296]	@ (8004b78 <MX_GPIO_Init+0x250>)
 8004a4e:	f009 fd5f 	bl	800e510 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESC_Power_GPIO_Port, ESC_Power_Pin, GPIO_PIN_RESET);
 8004a52:	2200      	movs	r2, #0
 8004a54:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004a58:	4848      	ldr	r0, [pc, #288]	@ (8004b7c <MX_GPIO_Init+0x254>)
 8004a5a:	f009 fd59 	bl	800e510 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_7_Pin|LED_5_Pin, GPIO_PIN_RESET);
 8004a5e:	2200      	movs	r2, #0
 8004a60:	f44f 4101 	mov.w	r1, #33024	@ 0x8100
 8004a64:	4846      	ldr	r0, [pc, #280]	@ (8004b80 <MX_GPIO_Init+0x258>)
 8004a66:	f009 fd53 	bl	800e510 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = LED_6_Pin|LED_G_Pin;
 8004a6a:	f248 0308 	movw	r3, #32776	@ 0x8008
 8004a6e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004a70:	2301      	movs	r3, #1
 8004a72:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a74:	2300      	movs	r3, #0
 8004a76:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a78:	2300      	movs	r3, #0
 8004a7a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004a7c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004a80:	4619      	mov	r1, r3
 8004a82:	483b      	ldr	r0, [pc, #236]	@ (8004b70 <MX_GPIO_Init+0x248>)
 8004a84:	f009 fb84 	bl	800e190 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED_Y_Pin|LED_R_Pin|NRF24_CE_Pin|NRF24_CSN_Pin;
 8004a88:	f44f 634c 	mov.w	r3, #3264	@ 0xcc0
 8004a8c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004a8e:	2301      	movs	r3, #1
 8004a90:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a92:	2300      	movs	r3, #0
 8004a94:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a96:	2300      	movs	r3, #0
 8004a98:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004a9a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004a9e:	4619      	mov	r1, r3
 8004aa0:	4834      	ldr	r0, [pc, #208]	@ (8004b74 <MX_GPIO_Init+0x24c>)
 8004aa2:	f009 fb75 	bl	800e190 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = uSD_Detection_Pin;
 8004aa6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004aaa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004aac:	2300      	movs	r3, #0
 8004aae:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(uSD_Detection_GPIO_Port, &GPIO_InitStruct);
 8004ab4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004ab8:	4619      	mov	r1, r3
 8004aba:	482e      	ldr	r0, [pc, #184]	@ (8004b74 <MX_GPIO_Init+0x24c>)
 8004abc:	f009 fb68 	bl	800e190 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = uSD_LED_Pin;
 8004ac0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004ac4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004aca:	2300      	movs	r3, #0
 8004acc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ace:	2300      	movs	r3, #0
 8004ad0:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(uSD_LED_GPIO_Port, &GPIO_InitStruct);
 8004ad2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004ad6:	4619      	mov	r1, r3
 8004ad8:	4827      	ldr	r0, [pc, #156]	@ (8004b78 <MX_GPIO_Init+0x250>)
 8004ada:	f009 fb59 	bl	800e190 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = uSD_SC_Pin;
 8004ade:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004ae2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ae8:	2300      	movs	r3, #0
 8004aea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8004aec:	2301      	movs	r3, #1
 8004aee:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(uSD_SC_GPIO_Port, &GPIO_InitStruct);
 8004af0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004af4:	4619      	mov	r1, r3
 8004af6:	4820      	ldr	r0, [pc, #128]	@ (8004b78 <MX_GPIO_Init+0x250>)
 8004af8:	f009 fb4a 	bl	800e190 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ESC_Power_Pin;
 8004afc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004b00:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004b02:	2301      	movs	r3, #1
 8004b04:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b06:	2300      	movs	r3, #0
 8004b08:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(ESC_Power_GPIO_Port, &GPIO_InitStruct);
 8004b0e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004b12:	4619      	mov	r1, r3
 8004b14:	4819      	ldr	r0, [pc, #100]	@ (8004b7c <MX_GPIO_Init+0x254>)
 8004b16:	f009 fb3b 	bl	800e190 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LED_7_Pin|LED_5_Pin;
 8004b1a:	f44f 4301 	mov.w	r3, #33024	@ 0x8100
 8004b1e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004b20:	2301      	movs	r3, #1
 8004b22:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b24:	2300      	movs	r3, #0
 8004b26:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b28:	2300      	movs	r3, #0
 8004b2a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b2c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004b30:	4619      	mov	r1, r3
 8004b32:	4813      	ldr	r0, [pc, #76]	@ (8004b80 <MX_GPIO_Init+0x258>)
 8004b34:	f009 fb2c 	bl	800e190 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRF24_IRQ_Pin;
 8004b38:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004b3c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004b3e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8004b42:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b44:	2300      	movs	r3, #0
 8004b46:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(NRF24_IRQ_GPIO_Port, &GPIO_InitStruct);
 8004b48:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004b4c:	4619      	mov	r1, r3
 8004b4e:	480b      	ldr	r0, [pc, #44]	@ (8004b7c <MX_GPIO_Init+0x254>)
 8004b50:	f009 fb1e 	bl	800e190 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8004b54:	2200      	movs	r2, #0
 8004b56:	2100      	movs	r1, #0
 8004b58:	2028      	movs	r0, #40	@ 0x28
 8004b5a:	f006 fc1a 	bl	800b392 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004b5e:	2028      	movs	r0, #40	@ 0x28
 8004b60:	f006 fc31 	bl	800b3c6 <HAL_NVIC_EnableIRQ>

}
 8004b64:	bf00      	nop
 8004b66:	3738      	adds	r7, #56	@ 0x38
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	bd80      	pop	{r7, pc}
 8004b6c:	58024400 	.word	0x58024400
 8004b70:	58021000 	.word	0x58021000
 8004b74:	58020400 	.word	0x58020400
 8004b78:	58020c00 	.word	0x58020c00
 8004b7c:	58021800 	.word	0x58021800
 8004b80:	58020000 	.word	0x58020000

08004b84 <MX_I2C5_Init>:

I2C_HandleTypeDef hi2c5;

/* I2C5 init function */
void MX_I2C5_Init(void)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	af00      	add	r7, sp, #0
  /* USER CODE END I2C5_Init 0 */

  /* USER CODE BEGIN I2C5_Init 1 */

  /* USER CODE END I2C5_Init 1 */
  hi2c5.Instance = I2C5;
 8004b88:	4b1d      	ldr	r3, [pc, #116]	@ (8004c00 <MX_I2C5_Init+0x7c>)
 8004b8a:	4a1e      	ldr	r2, [pc, #120]	@ (8004c04 <MX_I2C5_Init+0x80>)
 8004b8c:	601a      	str	r2, [r3, #0]
  hi2c5.Init.Timing = 0x00000000;
 8004b8e:	4b1c      	ldr	r3, [pc, #112]	@ (8004c00 <MX_I2C5_Init+0x7c>)
 8004b90:	2200      	movs	r2, #0
 8004b92:	605a      	str	r2, [r3, #4]
  hi2c5.Init.OwnAddress1 = 0;
 8004b94:	4b1a      	ldr	r3, [pc, #104]	@ (8004c00 <MX_I2C5_Init+0x7c>)
 8004b96:	2200      	movs	r2, #0
 8004b98:	609a      	str	r2, [r3, #8]
  hi2c5.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004b9a:	4b19      	ldr	r3, [pc, #100]	@ (8004c00 <MX_I2C5_Init+0x7c>)
 8004b9c:	2201      	movs	r2, #1
 8004b9e:	60da      	str	r2, [r3, #12]
  hi2c5.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004ba0:	4b17      	ldr	r3, [pc, #92]	@ (8004c00 <MX_I2C5_Init+0x7c>)
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	611a      	str	r2, [r3, #16]
  hi2c5.Init.OwnAddress2 = 0;
 8004ba6:	4b16      	ldr	r3, [pc, #88]	@ (8004c00 <MX_I2C5_Init+0x7c>)
 8004ba8:	2200      	movs	r2, #0
 8004baa:	615a      	str	r2, [r3, #20]
  hi2c5.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004bac:	4b14      	ldr	r3, [pc, #80]	@ (8004c00 <MX_I2C5_Init+0x7c>)
 8004bae:	2200      	movs	r2, #0
 8004bb0:	619a      	str	r2, [r3, #24]
  hi2c5.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004bb2:	4b13      	ldr	r3, [pc, #76]	@ (8004c00 <MX_I2C5_Init+0x7c>)
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	61da      	str	r2, [r3, #28]
  hi2c5.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004bb8:	4b11      	ldr	r3, [pc, #68]	@ (8004c00 <MX_I2C5_Init+0x7c>)
 8004bba:	2200      	movs	r2, #0
 8004bbc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c5) != HAL_OK)
 8004bbe:	4810      	ldr	r0, [pc, #64]	@ (8004c00 <MX_I2C5_Init+0x7c>)
 8004bc0:	f009 fcda 	bl	800e578 <HAL_I2C_Init>
 8004bc4:	4603      	mov	r3, r0
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d001      	beq.n	8004bce <MX_I2C5_Init+0x4a>
  {
    Error_Handler();
 8004bca:	f002 ffd9 	bl	8007b80 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c5, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004bce:	2100      	movs	r1, #0
 8004bd0:	480b      	ldr	r0, [pc, #44]	@ (8004c00 <MX_I2C5_Init+0x7c>)
 8004bd2:	f00c f893 	bl	8010cfc <HAL_I2CEx_ConfigAnalogFilter>
 8004bd6:	4603      	mov	r3, r0
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d001      	beq.n	8004be0 <MX_I2C5_Init+0x5c>
  {
    Error_Handler();
 8004bdc:	f002 ffd0 	bl	8007b80 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c5, 0) != HAL_OK)
 8004be0:	2100      	movs	r1, #0
 8004be2:	4807      	ldr	r0, [pc, #28]	@ (8004c00 <MX_I2C5_Init+0x7c>)
 8004be4:	f00c f8d5 	bl	8010d92 <HAL_I2CEx_ConfigDigitalFilter>
 8004be8:	4603      	mov	r3, r0
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d001      	beq.n	8004bf2 <MX_I2C5_Init+0x6e>
  {
    Error_Handler();
 8004bee:	f002 ffc7 	bl	8007b80 <Error_Handler>
  }

  /** I2C Enable Fast Mode Plus
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C5);
 8004bf2:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8004bf6:	f00c f919 	bl	8010e2c <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C5_Init 2 */

  /* USER CODE END I2C5_Init 2 */

}
 8004bfa:	bf00      	nop
 8004bfc:	bd80      	pop	{r7, pc}
 8004bfe:	bf00      	nop
 8004c00:	24000198 	.word	0x24000198
 8004c04:	40006400 	.word	0x40006400

08004c08 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b0b8      	sub	sp, #224	@ 0xe0
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c10:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8004c14:	2200      	movs	r2, #0
 8004c16:	601a      	str	r2, [r3, #0]
 8004c18:	605a      	str	r2, [r3, #4]
 8004c1a:	609a      	str	r2, [r3, #8]
 8004c1c:	60da      	str	r2, [r3, #12]
 8004c1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004c20:	f107 0310 	add.w	r3, r7, #16
 8004c24:	22b8      	movs	r2, #184	@ 0xb8
 8004c26:	2100      	movs	r1, #0
 8004c28:	4618      	mov	r0, r3
 8004c2a:	f019 f8eb 	bl	801de04 <memset>
  if(i2cHandle->Instance==I2C5)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4a2b      	ldr	r2, [pc, #172]	@ (8004ce0 <HAL_I2C_MspInit+0xd8>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d14f      	bne.n	8004cd8 <HAL_I2C_MspInit+0xd0>

  /* USER CODE END I2C5_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C5;
 8004c38:	f04f 0208 	mov.w	r2, #8
 8004c3c:	f04f 0300 	mov.w	r3, #0
 8004c40:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_CSI;
 8004c44:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8004c48:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004c4c:	f107 0310 	add.w	r3, r7, #16
 8004c50:	4618      	mov	r0, r3
 8004c52:	f00d f8af 	bl	8011db4 <HAL_RCCEx_PeriphCLKConfig>
 8004c56:	4603      	mov	r3, r0
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d001      	beq.n	8004c60 <HAL_I2C_MspInit+0x58>
    {
      Error_Handler();
 8004c5c:	f002 ff90 	bl	8007b80 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004c60:	4b20      	ldr	r3, [pc, #128]	@ (8004ce4 <HAL_I2C_MspInit+0xdc>)
 8004c62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004c66:	4a1f      	ldr	r2, [pc, #124]	@ (8004ce4 <HAL_I2C_MspInit+0xdc>)
 8004c68:	f043 0304 	orr.w	r3, r3, #4
 8004c6c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004c70:	4b1c      	ldr	r3, [pc, #112]	@ (8004ce4 <HAL_I2C_MspInit+0xdc>)
 8004c72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004c76:	f003 0304 	and.w	r3, r3, #4
 8004c7a:	60fb      	str	r3, [r7, #12]
 8004c7c:	68fb      	ldr	r3, [r7, #12]
    /**I2C5 GPIO Configuration
    PC10     ------> I2C5_SDA
    PC11     ------> I2C5_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8004c7e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8004c82:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004c86:	2312      	movs	r3, #18
 8004c88:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c92:	2300      	movs	r3, #0
 8004c94:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C5;
 8004c98:	2304      	movs	r3, #4
 8004c9a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004c9e:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8004ca2:	4619      	mov	r1, r3
 8004ca4:	4810      	ldr	r0, [pc, #64]	@ (8004ce8 <HAL_I2C_MspInit+0xe0>)
 8004ca6:	f009 fa73 	bl	800e190 <HAL_GPIO_Init>

    /* I2C5 clock enable */
    __HAL_RCC_I2C5_CLK_ENABLE();
 8004caa:	4b0e      	ldr	r3, [pc, #56]	@ (8004ce4 <HAL_I2C_MspInit+0xdc>)
 8004cac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004cb0:	4a0c      	ldr	r2, [pc, #48]	@ (8004ce4 <HAL_I2C_MspInit+0xdc>)
 8004cb2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004cb6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8004cba:	4b0a      	ldr	r3, [pc, #40]	@ (8004ce4 <HAL_I2C_MspInit+0xdc>)
 8004cbc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004cc0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004cc4:	60bb      	str	r3, [r7, #8]
 8004cc6:	68bb      	ldr	r3, [r7, #8]

    /* I2C5 interrupt Init */
    HAL_NVIC_SetPriority(I2C5_EV_IRQn, 1, 0);
 8004cc8:	2200      	movs	r2, #0
 8004cca:	2101      	movs	r1, #1
 8004ccc:	209d      	movs	r0, #157	@ 0x9d
 8004cce:	f006 fb60 	bl	800b392 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C5_EV_IRQn);
 8004cd2:	209d      	movs	r0, #157	@ 0x9d
 8004cd4:	f006 fb77 	bl	800b3c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C5_MspInit 1 */

  /* USER CODE END I2C5_MspInit 1 */
  }
}
 8004cd8:	bf00      	nop
 8004cda:	37e0      	adds	r7, #224	@ 0xe0
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	bd80      	pop	{r7, pc}
 8004ce0:	40006400 	.word	0x40006400
 8004ce4:	58024400 	.word	0x58024400
 8004ce8:	58020800 	.word	0x58020800

08004cec <__NVIC_SystemReset>:
{
 8004cec:	b480      	push	{r7}
 8004cee:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8004cf0:	f3bf 8f4f 	dsb	sy
}
 8004cf4:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8004cf6:	4b06      	ldr	r3, [pc, #24]	@ (8004d10 <__NVIC_SystemReset+0x24>)
 8004cf8:	68db      	ldr	r3, [r3, #12]
 8004cfa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8004cfe:	4904      	ldr	r1, [pc, #16]	@ (8004d10 <__NVIC_SystemReset+0x24>)
 8004d00:	4b04      	ldr	r3, [pc, #16]	@ (8004d14 <__NVIC_SystemReset+0x28>)
 8004d02:	4313      	orrs	r3, r2
 8004d04:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8004d06:	f3bf 8f4f 	dsb	sy
}
 8004d0a:	bf00      	nop
    __NOP();
 8004d0c:	bf00      	nop
 8004d0e:	e7fd      	b.n	8004d0c <__NVIC_SystemReset+0x20>
 8004d10:	e000ed00 	.word	0xe000ed00
 8004d14:	05fa0004 	.word	0x05fa0004

08004d18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b08a      	sub	sp, #40	@ 0x28
 8004d1c:	af02      	add	r7, sp, #8
//		//oczekiwanie az napiecia na zasilaczu narosnie
//	}
  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8004d1e:	f002 ff03 	bl	8007b28 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8004d22:	4b11      	ldr	r3, [pc, #68]	@ (8004d68 <main+0x50>)
 8004d24:	695b      	ldr	r3, [r3, #20]
 8004d26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d11e      	bne.n	8004d6c <main+0x54>
  __ASM volatile ("dsb 0xF":::"memory");
 8004d2e:	f3bf 8f4f 	dsb	sy
}
 8004d32:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004d34:	f3bf 8f6f 	isb	sy
}
 8004d38:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8004d3a:	4b0b      	ldr	r3, [pc, #44]	@ (8004d68 <main+0x50>)
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8004d42:	f3bf 8f4f 	dsb	sy
}
 8004d46:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004d48:	f3bf 8f6f 	isb	sy
}
 8004d4c:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8004d4e:	4b06      	ldr	r3, [pc, #24]	@ (8004d68 <main+0x50>)
 8004d50:	695b      	ldr	r3, [r3, #20]
 8004d52:	4a05      	ldr	r2, [pc, #20]	@ (8004d68 <main+0x50>)
 8004d54:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004d58:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8004d5a:	f3bf 8f4f 	dsb	sy
}
 8004d5e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004d60:	f3bf 8f6f 	isb	sy
}
 8004d64:	e003      	b.n	8004d6e <main+0x56>
 8004d66:	bf00      	nop
 8004d68:	e000ed00 	.word	0xe000ed00
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8004d6c:	bf00      	nop
  SCB_EnableICache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004d6e:	f004 f9df 	bl	8009130 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004d72:	f000 ff63 	bl	8005c3c <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8004d76:	f000 ffd3 	bl	8005d20 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004d7a:	f7ff fdd5 	bl	8004928 <MX_GPIO_Init>
  MX_DMA_Init();
 8004d7e:	f7fe fcb5 	bl	80036ec <MX_DMA_Init>
  MX_I2C5_Init();
 8004d82:	f7ff feff 	bl	8004b84 <MX_I2C5_Init>
  MX_SPI6_Init();
 8004d86:	f002 ff57 	bl	8007c38 <MX_SPI6_Init>
  MX_ADC2_Init();
 8004d8a:	f7fe fbc1 	bl	8003510 <MX_ADC2_Init>
  MX_SPI2_Init();
 8004d8e:	f002 fefd 	bl	8007b8c <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8004d92:	f004 f8e5 	bl	8008f60 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8004d96:	f003 fe03 	bl	80089a0 <MX_TIM1_Init>
  MX_TIM8_Init();
 8004d9a:	f003 ff79 	bl	8008c90 <MX_TIM8_Init>
  MX_TIM3_Init();
 8004d9e:	f003 fefb 	bl	8008b98 <MX_TIM3_Init>
  MX_FATFS_Init();
 8004da2:	f015 fe7b 	bl	801aa9c <MX_FATFS_Init>
  MX_TIM2_Init();
 8004da6:	f003 fea3 	bl	8008af0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  	STARTUP = 1;
 8004daa:	4b9a      	ldr	r3, [pc, #616]	@ (8005014 <main+0x2fc>)
 8004dac:	2201      	movs	r2, #1
 8004dae:	701a      	strb	r2, [r3, #0]
  	ESC_POWER_1;
 8004db0:	2201      	movs	r2, #1
 8004db2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004db6:	4898      	ldr	r0, [pc, #608]	@ (8005018 <main+0x300>)
 8004db8:	f009 fbaa 	bl	800e510 <HAL_GPIO_WritePin>
  	DRON_ON_GRUND = 1;
 8004dbc:	4b97      	ldr	r3, [pc, #604]	@ (800501c <main+0x304>)
 8004dbe:	2201      	movs	r2, #1
 8004dc0:	701a      	strb	r2, [r3, #0]

  	PID_FAC_Pitch[0] = p_pitchfactor;
 8004dc2:	4b97      	ldr	r3, [pc, #604]	@ (8005020 <main+0x308>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4a97      	ldr	r2, [pc, #604]	@ (8005024 <main+0x30c>)
 8004dc8:	6013      	str	r3, [r2, #0]
  	PID_FAC_Pitch[1] = i_pitchfactor;
 8004dca:	4b97      	ldr	r3, [pc, #604]	@ (8005028 <main+0x310>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4a95      	ldr	r2, [pc, #596]	@ (8005024 <main+0x30c>)
 8004dd0:	6053      	str	r3, [r2, #4]
  	PID_FAC_Pitch[2] = d_pitchfactor;
 8004dd2:	4b96      	ldr	r3, [pc, #600]	@ (800502c <main+0x314>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4a93      	ldr	r2, [pc, #588]	@ (8005024 <main+0x30c>)
 8004dd8:	6093      	str	r3, [r2, #8]
  	PID_FAC_Pitch[4] = 0;
 8004dda:	4b92      	ldr	r3, [pc, #584]	@ (8005024 <main+0x30c>)
 8004ddc:	f04f 0200 	mov.w	r2, #0
 8004de0:	611a      	str	r2, [r3, #16]

  	PID_FAC_Rool[0] = p_roolfactor;
 8004de2:	4b93      	ldr	r3, [pc, #588]	@ (8005030 <main+0x318>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4a93      	ldr	r2, [pc, #588]	@ (8005034 <main+0x31c>)
 8004de8:	6013      	str	r3, [r2, #0]
  	PID_FAC_Rool[1] = i_roolfactor;
 8004dea:	4b93      	ldr	r3, [pc, #588]	@ (8005038 <main+0x320>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4a91      	ldr	r2, [pc, #580]	@ (8005034 <main+0x31c>)
 8004df0:	6053      	str	r3, [r2, #4]
  	PID_FAC_Rool[2] = d_roolfactor;
 8004df2:	4b92      	ldr	r3, [pc, #584]	@ (800503c <main+0x324>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4a8f      	ldr	r2, [pc, #572]	@ (8005034 <main+0x31c>)
 8004df8:	6093      	str	r3, [r2, #8]
  	PID_FAC_Rool[4] = 0;
 8004dfa:	4b8e      	ldr	r3, [pc, #568]	@ (8005034 <main+0x31c>)
 8004dfc:	f04f 0200 	mov.w	r2, #0
 8004e00:	611a      	str	r2, [r3, #16]

  	PID_FAC_Yaw[0] = p_yawfactor;
 8004e02:	4b8f      	ldr	r3, [pc, #572]	@ (8005040 <main+0x328>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4a8f      	ldr	r2, [pc, #572]	@ (8005044 <main+0x32c>)
 8004e08:	6013      	str	r3, [r2, #0]
  	PID_FAC_Yaw[1] = i_yawfactor;
 8004e0a:	4b8f      	ldr	r3, [pc, #572]	@ (8005048 <main+0x330>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4a8d      	ldr	r2, [pc, #564]	@ (8005044 <main+0x32c>)
 8004e10:	6053      	str	r3, [r2, #4]
  	PID_FAC_Yaw[2] = d_yawfactor;
 8004e12:	4b8e      	ldr	r3, [pc, #568]	@ (800504c <main+0x334>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4a8b      	ldr	r2, [pc, #556]	@ (8005044 <main+0x32c>)
 8004e18:	6093      	str	r3, [r2, #8]
  	PID_FAC_Yaw[4] = 0;
 8004e1a:	4b8a      	ldr	r3, [pc, #552]	@ (8005044 <main+0x32c>)
 8004e1c:	f04f 0200 	mov.w	r2, #0
 8004e20:	611a      	str	r2, [r3, #16]


  	ax_ang =0,ay_ang = 0,az_ang = 0, gx_ang = 0, gy_ang = 0, gz_ang = 0;
 8004e22:	4b8b      	ldr	r3, [pc, #556]	@ (8005050 <main+0x338>)
 8004e24:	f04f 0200 	mov.w	r2, #0
 8004e28:	601a      	str	r2, [r3, #0]
 8004e2a:	4b8a      	ldr	r3, [pc, #552]	@ (8005054 <main+0x33c>)
 8004e2c:	f04f 0200 	mov.w	r2, #0
 8004e30:	601a      	str	r2, [r3, #0]
 8004e32:	4b89      	ldr	r3, [pc, #548]	@ (8005058 <main+0x340>)
 8004e34:	f04f 0200 	mov.w	r2, #0
 8004e38:	601a      	str	r2, [r3, #0]
 8004e3a:	4b88      	ldr	r3, [pc, #544]	@ (800505c <main+0x344>)
 8004e3c:	f04f 0200 	mov.w	r2, #0
 8004e40:	601a      	str	r2, [r3, #0]
 8004e42:	4b87      	ldr	r3, [pc, #540]	@ (8005060 <main+0x348>)
 8004e44:	f04f 0200 	mov.w	r2, #0
 8004e48:	601a      	str	r2, [r3, #0]
 8004e4a:	4b86      	ldr	r3, [pc, #536]	@ (8005064 <main+0x34c>)
 8004e4c:	f04f 0200 	mov.w	r2, #0
 8004e50:	601a      	str	r2, [r3, #0]
  	Mag_Z = 0;
 8004e52:	4b85      	ldr	r3, [pc, #532]	@ (8005068 <main+0x350>)
 8004e54:	f04f 0200 	mov.w	r2, #0
 8004e58:	601a      	str	r2, [r3, #0]
  	TIM_inte_SD = 0, TIM_inte = 0;
 8004e5a:	4b84      	ldr	r3, [pc, #528]	@ (800506c <main+0x354>)
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	601a      	str	r2, [r3, #0]
 8004e60:	4b83      	ldr	r3, [pc, #524]	@ (8005070 <main+0x358>)
 8004e62:	2200      	movs	r2, #0
 8004e64:	601a      	str	r2, [r3, #0]
  	NRF_TIM_Inte = 0;
 8004e66:	4b83      	ldr	r3, [pc, #524]	@ (8005074 <main+0x35c>)
 8004e68:	2200      	movs	r2, #0
 8004e6a:	601a      	str	r2, [r3, #0]
  	temp = 0, pres = 0, startpres = 0, ampritude = 0;
 8004e6c:	4b82      	ldr	r3, [pc, #520]	@ (8005078 <main+0x360>)
 8004e6e:	f04f 0200 	mov.w	r2, #0
 8004e72:	601a      	str	r2, [r3, #0]
 8004e74:	4b81      	ldr	r3, [pc, #516]	@ (800507c <main+0x364>)
 8004e76:	f04f 0200 	mov.w	r2, #0
 8004e7a:	601a      	str	r2, [r3, #0]
 8004e7c:	4b80      	ldr	r3, [pc, #512]	@ (8005080 <main+0x368>)
 8004e7e:	f04f 0200 	mov.w	r2, #0
 8004e82:	601a      	str	r2, [r3, #0]
 8004e84:	4b7f      	ldr	r3, [pc, #508]	@ (8005084 <main+0x36c>)
 8004e86:	f04f 0200 	mov.w	r2, #0
 8004e8a:	601a      	str	r2, [r3, #0]
  	last_wanted_pitch_rx = 0;
 8004e8c:	4b7e      	ldr	r3, [pc, #504]	@ (8005088 <main+0x370>)
 8004e8e:	f04f 0200 	mov.w	r2, #0
 8004e92:	601a      	str	r2, [r3, #0]
  	last_wanted_rool_rx = 0;
 8004e94:	4b7d      	ldr	r3, [pc, #500]	@ (800508c <main+0x374>)
 8004e96:	f04f 0200 	mov.w	r2, #0
 8004e9a:	601a      	str	r2, [r3, #0]
  	last_wanted_yaw_rx = 0;
 8004e9c:	4b7c      	ldr	r3, [pc, #496]	@ (8005090 <main+0x378>)
 8004e9e:	f04f 0200 	mov.w	r2, #0
 8004ea2:	601a      	str	r2, [r3, #0]
  	wanted_thrust = 0;
 8004ea4:	4b7b      	ldr	r3, [pc, #492]	@ (8005094 <main+0x37c>)
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	801a      	strh	r2, [r3, #0]
  	thrust_limit = 10000;
 8004eaa:	4b7b      	ldr	r3, [pc, #492]	@ (8005098 <main+0x380>)
 8004eac:	f242 7210 	movw	r2, #10000	@ 0x2710
 8004eb0:	801a      	strh	r2, [r3, #0]
  	FDP_D_Gain_AR = 100;
 8004eb2:	4b7a      	ldr	r3, [pc, #488]	@ (800509c <main+0x384>)
 8004eb4:	2264      	movs	r2, #100	@ 0x64
 8004eb6:	801a      	strh	r2, [r3, #0]
  	FDP_D_Gain = 100;
 8004eb8:	4b79      	ldr	r3, [pc, #484]	@ (80050a0 <main+0x388>)
 8004eba:	2264      	movs	r2, #100	@ 0x64
 8004ebc:	801a      	strh	r2, [r3, #0]
  	old_error_pitch = 0;// ruznica
 8004ebe:	4b79      	ldr	r3, [pc, #484]	@ (80050a4 <main+0x38c>)
 8004ec0:	f04f 0200 	mov.w	r2, #0
 8004ec4:	601a      	str	r2, [r3, #0]
  	old_error_rool = 0;
 8004ec6:	4b78      	ldr	r3, [pc, #480]	@ (80050a8 <main+0x390>)
 8004ec8:	f04f 0200 	mov.w	r2, #0
 8004ecc:	601a      	str	r2, [r3, #0]
  	old_error_yaw = 0;
 8004ece:	4b77      	ldr	r3, [pc, #476]	@ (80050ac <main+0x394>)
 8004ed0:	f04f 0200 	mov.w	r2, #0
 8004ed4:	601a      	str	r2, [r3, #0]
  	old_error_angular_rate_pitch = 0;// ruznica
 8004ed6:	4b76      	ldr	r3, [pc, #472]	@ (80050b0 <main+0x398>)
 8004ed8:	f04f 0200 	mov.w	r2, #0
 8004edc:	601a      	str	r2, [r3, #0]
  	old_error_angular_rate_rool = 0;
 8004ede:	4b75      	ldr	r3, [pc, #468]	@ (80050b4 <main+0x39c>)
 8004ee0:	f04f 0200 	mov.w	r2, #0
 8004ee4:	601a      	str	r2, [r3, #0]
  	old_error_angular_rate_yaw = 0;
 8004ee6:	4b74      	ldr	r3, [pc, #464]	@ (80050b8 <main+0x3a0>)
 8004ee8:	f04f 0200 	mov.w	r2, #0
 8004eec:	601a      	str	r2, [r3, #0]
  	error_sum_pitch = 0;//todo zmiezycz startowy error, by start nastepowal szybciej
 8004eee:	4b73      	ldr	r3, [pc, #460]	@ (80050bc <main+0x3a4>)
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	601a      	str	r2, [r3, #0]
  	error_sum_rool = 0;
 8004ef4:	4b72      	ldr	r3, [pc, #456]	@ (80050c0 <main+0x3a8>)
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	601a      	str	r2, [r3, #0]
  	error_sum_yaw = 0;
 8004efa:	4b72      	ldr	r3, [pc, #456]	@ (80050c4 <main+0x3ac>)
 8004efc:	2200      	movs	r2, #0
 8004efe:	601a      	str	r2, [r3, #0]
  	error_sum_angular_rate_pitch = 0;
 8004f00:	4b71      	ldr	r3, [pc, #452]	@ (80050c8 <main+0x3b0>)
 8004f02:	2200      	movs	r2, #0
 8004f04:	601a      	str	r2, [r3, #0]
  	error_sum_angular_rate_rool = 0;
 8004f06:	4b71      	ldr	r3, [pc, #452]	@ (80050cc <main+0x3b4>)
 8004f08:	2200      	movs	r2, #0
 8004f0a:	601a      	str	r2, [r3, #0]
  	error_sum_angular_rate_yaw = 0;
 8004f0c:	4b70      	ldr	r3, [pc, #448]	@ (80050d0 <main+0x3b8>)
 8004f0e:	2200      	movs	r2, #0
 8004f10:	601a      	str	r2, [r3, #0]
  	SPEED1 = min_speed;
 8004f12:	4b70      	ldr	r3, [pc, #448]	@ (80050d4 <main+0x3bc>)
 8004f14:	f642 1204 	movw	r2, #10500	@ 0x2904
 8004f18:	801a      	strh	r2, [r3, #0]
  	SPEED2 = min_speed;
 8004f1a:	4b6f      	ldr	r3, [pc, #444]	@ (80050d8 <main+0x3c0>)
 8004f1c:	f642 1204 	movw	r2, #10500	@ 0x2904
 8004f20:	801a      	strh	r2, [r3, #0]
  	SPEED3 = min_speed;
 8004f22:	4b6e      	ldr	r3, [pc, #440]	@ (80050dc <main+0x3c4>)
 8004f24:	f642 1204 	movw	r2, #10500	@ 0x2904
 8004f28:	801a      	strh	r2, [r3, #0]
  	SPEED4 = min_speed;
 8004f2a:	4b6d      	ldr	r3, [pc, #436]	@ (80050e0 <main+0x3c8>)
 8004f2c:	f642 1204 	movw	r2, #10500	@ 0x2904
 8004f30:	801a      	strh	r2, [r3, #0]
  	OLD_SPEED1 = min_speed;
 8004f32:	4b6c      	ldr	r3, [pc, #432]	@ (80050e4 <main+0x3cc>)
 8004f34:	f642 1204 	movw	r2, #10500	@ 0x2904
 8004f38:	801a      	strh	r2, [r3, #0]
  	OLD_SPEED2 = min_speed;
 8004f3a:	4b6b      	ldr	r3, [pc, #428]	@ (80050e8 <main+0x3d0>)
 8004f3c:	f642 1204 	movw	r2, #10500	@ 0x2904
 8004f40:	801a      	strh	r2, [r3, #0]
  	OLD_SPEED3 = min_speed;
 8004f42:	4b6a      	ldr	r3, [pc, #424]	@ (80050ec <main+0x3d4>)
 8004f44:	f642 1204 	movw	r2, #10500	@ 0x2904
 8004f48:	801a      	strh	r2, [r3, #0]
  	OLD_SPEED4 = min_speed;
 8004f4a:	4b69      	ldr	r3, [pc, #420]	@ (80050f0 <main+0x3d8>)
 8004f4c:	f642 1204 	movw	r2, #10500	@ 0x2904
 8004f50:	801a      	strh	r2, [r3, #0]
  	commandready = 0;
 8004f52:	4b68      	ldr	r3, [pc, #416]	@ (80050f4 <main+0x3dc>)
 8004f54:	2200      	movs	r2, #0
 8004f56:	701a      	strb	r2, [r3, #0]
  	command_ch_num = 0;
 8004f58:	4b67      	ldr	r3, [pc, #412]	@ (80050f8 <main+0x3e0>)
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	701a      	strb	r2, [r3, #0]
  	Mainloop_Number = 0;
 8004f5e:	4b67      	ldr	r3, [pc, #412]	@ (80050fc <main+0x3e4>)
 8004f60:	2200      	movs	r2, #0
 8004f62:	601a      	str	r2, [r3, #0]
  	SD_In_Use = 0;
 8004f64:	4b66      	ldr	r3, [pc, #408]	@ (8005100 <main+0x3e8>)
 8004f66:	2200      	movs	r2, #0
 8004f68:	601a      	str	r2, [r3, #0]
  	wobble_strenght = 1;
 8004f6a:	4b66      	ldr	r3, [pc, #408]	@ (8005104 <main+0x3ec>)
 8004f6c:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8004f70:	601a      	str	r2, [r3, #0]
  	MPU6050_IRQ = 0, HMC583L_IRQ = 0, BMP180_IRQ = 0;
 8004f72:	4b65      	ldr	r3, [pc, #404]	@ (8005108 <main+0x3f0>)
 8004f74:	2200      	movs	r2, #0
 8004f76:	701a      	strb	r2, [r3, #0]
 8004f78:	4b64      	ldr	r3, [pc, #400]	@ (800510c <main+0x3f4>)
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	701a      	strb	r2, [r3, #0]
 8004f7e:	4b64      	ldr	r3, [pc, #400]	@ (8005110 <main+0x3f8>)
 8004f80:	2200      	movs	r2, #0
 8004f82:	701a      	strb	r2, [r3, #0]
  	i = 0, loopnum = 0;
 8004f84:	4b63      	ldr	r3, [pc, #396]	@ (8005114 <main+0x3fc>)
 8004f86:	2200      	movs	r2, #0
 8004f88:	601a      	str	r2, [r3, #0]
 8004f8a:	4b63      	ldr	r3, [pc, #396]	@ (8005118 <main+0x400>)
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	601a      	str	r2, [r3, #0]


	  p_angular_rate_pitchfactor = 14;
 8004f90:	4b62      	ldr	r3, [pc, #392]	@ (800511c <main+0x404>)
 8004f92:	4a63      	ldr	r2, [pc, #396]	@ (8005120 <main+0x408>)
 8004f94:	601a      	str	r2, [r3, #0]
	  p_angular_rate_roolfactor = 12;
 8004f96:	4b63      	ldr	r3, [pc, #396]	@ (8005124 <main+0x40c>)
 8004f98:	4a63      	ldr	r2, [pc, #396]	@ (8005128 <main+0x410>)
 8004f9a:	601a      	str	r2, [r3, #0]
	  p_angular_rate_yawfactor = 5;// -> 10
 8004f9c:	4b63      	ldr	r3, [pc, #396]	@ (800512c <main+0x414>)
 8004f9e:	4a64      	ldr	r2, [pc, #400]	@ (8005130 <main+0x418>)
 8004fa0:	601a      	str	r2, [r3, #0]
	///////////////////////////////////////////////////////////////////////////
	  i_angular_rate_pitchfactor = 10;
 8004fa2:	4b64      	ldr	r3, [pc, #400]	@ (8005134 <main+0x41c>)
 8004fa4:	4a64      	ldr	r2, [pc, #400]	@ (8005138 <main+0x420>)
 8004fa6:	601a      	str	r2, [r3, #0]
	  i_angular_rate_roolfactor = 10;
 8004fa8:	4b64      	ldr	r3, [pc, #400]	@ (800513c <main+0x424>)
 8004faa:	4a63      	ldr	r2, [pc, #396]	@ (8005138 <main+0x420>)
 8004fac:	601a      	str	r2, [r3, #0]
	  i_angular_rate_yawfactor = 0;
 8004fae:	4b64      	ldr	r3, [pc, #400]	@ (8005140 <main+0x428>)
 8004fb0:	f04f 0200 	mov.w	r2, #0
 8004fb4:	601a      	str	r2, [r3, #0]
	///////////////////////////////////////////////////////////////////////////
	  d_angular_rate_pitchfactor = 30;
 8004fb6:	4b63      	ldr	r3, [pc, #396]	@ (8005144 <main+0x42c>)
 8004fb8:	4a63      	ldr	r2, [pc, #396]	@ (8005148 <main+0x430>)
 8004fba:	601a      	str	r2, [r3, #0]
	  d_angular_rate_roolfactor = 20;
 8004fbc:	4b63      	ldr	r3, [pc, #396]	@ (800514c <main+0x434>)
 8004fbe:	4a64      	ldr	r2, [pc, #400]	@ (8005150 <main+0x438>)
 8004fc0:	601a      	str	r2, [r3, #0]
	  d_angular_rate_yawfactor = 5;
 8004fc2:	4b64      	ldr	r3, [pc, #400]	@ (8005154 <main+0x43c>)
 8004fc4:	4a5a      	ldr	r2, [pc, #360]	@ (8005130 <main+0x418>)
 8004fc6:	601a      	str	r2, [r3, #0]

	  p_pitchfactor = 5.5;
 8004fc8:	4b15      	ldr	r3, [pc, #84]	@ (8005020 <main+0x308>)
 8004fca:	4a63      	ldr	r2, [pc, #396]	@ (8005158 <main+0x440>)
 8004fcc:	601a      	str	r2, [r3, #0]
	  p_roolfactor = 6;//5
 8004fce:	4b18      	ldr	r3, [pc, #96]	@ (8005030 <main+0x318>)
 8004fd0:	4a62      	ldr	r2, [pc, #392]	@ (800515c <main+0x444>)
 8004fd2:	601a      	str	r2, [r3, #0]
	  p_yawfactor = 5;
 8004fd4:	4b1a      	ldr	r3, [pc, #104]	@ (8005040 <main+0x328>)
 8004fd6:	4a56      	ldr	r2, [pc, #344]	@ (8005130 <main+0x418>)
 8004fd8:	601a      	str	r2, [r3, #0]
	///////////////////////////////////////////////////////////////////////////
	  i_pitchfactor = 9;//8
 8004fda:	4b13      	ldr	r3, [pc, #76]	@ (8005028 <main+0x310>)
 8004fdc:	4a60      	ldr	r2, [pc, #384]	@ (8005160 <main+0x448>)
 8004fde:	601a      	str	r2, [r3, #0]
	  i_roolfactor = 8;//10
 8004fe0:	4b15      	ldr	r3, [pc, #84]	@ (8005038 <main+0x320>)
 8004fe2:	f04f 4282 	mov.w	r2, #1090519040	@ 0x41000000
 8004fe6:	601a      	str	r2, [r3, #0]
	  i_yawfactor = 0;
 8004fe8:	4b17      	ldr	r3, [pc, #92]	@ (8005048 <main+0x330>)
 8004fea:	f04f 0200 	mov.w	r2, #0
 8004fee:	601a      	str	r2, [r3, #0]
	///////////////////////////////////////////////////////////////////////////
	  d_pitchfactor = 30;//25
 8004ff0:	4b0e      	ldr	r3, [pc, #56]	@ (800502c <main+0x314>)
 8004ff2:	4a55      	ldr	r2, [pc, #340]	@ (8005148 <main+0x430>)
 8004ff4:	601a      	str	r2, [r3, #0]
	  d_roolfactor = 20;
 8004ff6:	4b11      	ldr	r3, [pc, #68]	@ (800503c <main+0x324>)
 8004ff8:	4a55      	ldr	r2, [pc, #340]	@ (8005150 <main+0x438>)
 8004ffa:	601a      	str	r2, [r3, #0]
	  d_yawfactor = 0;
 8004ffc:	4b13      	ldr	r3, [pc, #76]	@ (800504c <main+0x334>)
 8004ffe:	f04f 0200 	mov.w	r2, #0
 8005002:	601a      	str	r2, [r3, #0]

  	  PID_FAC_Angular_Rate_Pitch[0] = p_angular_rate_pitchfactor;
 8005004:	4b45      	ldr	r3, [pc, #276]	@ (800511c <main+0x404>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4a56      	ldr	r2, [pc, #344]	@ (8005164 <main+0x44c>)
 800500a:	6013      	str	r3, [r2, #0]
  	  PID_FAC_Angular_Rate_Pitch[1] = i_angular_rate_pitchfactor;
 800500c:	4b49      	ldr	r3, [pc, #292]	@ (8005134 <main+0x41c>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	e0aa      	b.n	8005168 <main+0x450>
 8005012:	bf00      	nop
 8005014:	0000005c 	.word	0x0000005c
 8005018:	58021800 	.word	0x58021800
 800501c:	0000417c 	.word	0x0000417c
 8005020:	000040ac 	.word	0x000040ac
 8005024:	000040d0 	.word	0x000040d0
 8005028:	000040b8 	.word	0x000040b8
 800502c:	000040c4 	.word	0x000040c4
 8005030:	000040b0 	.word	0x000040b0
 8005034:	000040e4 	.word	0x000040e4
 8005038:	000040bc 	.word	0x000040bc
 800503c:	000040c8 	.word	0x000040c8
 8005040:	000040b4 	.word	0x000040b4
 8005044:	000040f8 	.word	0x000040f8
 8005048:	000040c0 	.word	0x000040c0
 800504c:	000040cc 	.word	0x000040cc
 8005050:	00000018 	.word	0x00000018
 8005054:	0000001c 	.word	0x0000001c
 8005058:	00000020 	.word	0x00000020
 800505c:	00000024 	.word	0x00000024
 8005060:	00000028 	.word	0x00000028
 8005064:	0000002c 	.word	0x0000002c
 8005068:	00000048 	.word	0x00000048
 800506c:	00000054 	.word	0x00000054
 8005070:	00000058 	.word	0x00000058
 8005074:	00000060 	.word	0x00000060
 8005078:	000000c4 	.word	0x000000c4
 800507c:	000000c8 	.word	0x000000c8
 8005080:	000000cc 	.word	0x000000cc
 8005084:	000000d0 	.word	0x000000d0
 8005088:	00004030 	.word	0x00004030
 800508c:	00004034 	.word	0x00004034
 8005090:	00004038 	.word	0x00004038
 8005094:	0000403c 	.word	0x0000403c
 8005098:	0000403e 	.word	0x0000403e
 800509c:	00004054 	.word	0x00004054
 80050a0:	00004056 	.word	0x00004056
 80050a4:	00004064 	.word	0x00004064
 80050a8:	00004068 	.word	0x00004068
 80050ac:	0000406c 	.word	0x0000406c
 80050b0:	00004070 	.word	0x00004070
 80050b4:	00004074 	.word	0x00004074
 80050b8:	00004078 	.word	0x00004078
 80050bc:	0000407c 	.word	0x0000407c
 80050c0:	00004080 	.word	0x00004080
 80050c4:	00004084 	.word	0x00004084
 80050c8:	00004088 	.word	0x00004088
 80050cc:	0000408c 	.word	0x0000408c
 80050d0:	00004090 	.word	0x00004090
 80050d4:	0000416c 	.word	0x0000416c
 80050d8:	0000416e 	.word	0x0000416e
 80050dc:	00004170 	.word	0x00004170
 80050e0:	00004172 	.word	0x00004172
 80050e4:	00004174 	.word	0x00004174
 80050e8:	00004176 	.word	0x00004176
 80050ec:	00004178 	.word	0x00004178
 80050f0:	0000417a 	.word	0x0000417a
 80050f4:	0000419e 	.word	0x0000419e
 80050f8:	0000419f 	.word	0x0000419f
 80050fc:	000041a4 	.word	0x000041a4
 8005100:	000041a8 	.word	0x000041a8
 8005104:	000041b0 	.word	0x000041b0
 8005108:	000041b4 	.word	0x000041b4
 800510c:	000041b5 	.word	0x000041b5
 8005110:	000041b6 	.word	0x000041b6
 8005114:	000041b8 	.word	0x000041b8
 8005118:	000041bc 	.word	0x000041bc
 800511c:	0000410c 	.word	0x0000410c
 8005120:	41600000 	.word	0x41600000
 8005124:	00004110 	.word	0x00004110
 8005128:	41400000 	.word	0x41400000
 800512c:	00004114 	.word	0x00004114
 8005130:	40a00000 	.word	0x40a00000
 8005134:	00004118 	.word	0x00004118
 8005138:	41200000 	.word	0x41200000
 800513c:	0000411c 	.word	0x0000411c
 8005140:	00004120 	.word	0x00004120
 8005144:	00004124 	.word	0x00004124
 8005148:	41f00000 	.word	0x41f00000
 800514c:	00004128 	.word	0x00004128
 8005150:	41a00000 	.word	0x41a00000
 8005154:	0000412c 	.word	0x0000412c
 8005158:	40b00000 	.word	0x40b00000
 800515c:	40c00000 	.word	0x40c00000
 8005160:	41100000 	.word	0x41100000
 8005164:	00004130 	.word	0x00004130
 8005168:	4a97      	ldr	r2, [pc, #604]	@ (80053c8 <main+0x6b0>)
 800516a:	6053      	str	r3, [r2, #4]
  	  PID_FAC_Angular_Rate_Pitch[2] = d_angular_rate_pitchfactor;
 800516c:	4b97      	ldr	r3, [pc, #604]	@ (80053cc <main+0x6b4>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4a95      	ldr	r2, [pc, #596]	@ (80053c8 <main+0x6b0>)
 8005172:	6093      	str	r3, [r2, #8]
  	  PID_FAC_Angular_Rate_Rool[0] = p_angular_rate_roolfactor;//
 8005174:	4b96      	ldr	r3, [pc, #600]	@ (80053d0 <main+0x6b8>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4a96      	ldr	r2, [pc, #600]	@ (80053d4 <main+0x6bc>)
 800517a:	6013      	str	r3, [r2, #0]
  	  PID_FAC_Angular_Rate_Rool[1] = i_angular_rate_roolfactor;
 800517c:	4b96      	ldr	r3, [pc, #600]	@ (80053d8 <main+0x6c0>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	4a94      	ldr	r2, [pc, #592]	@ (80053d4 <main+0x6bc>)
 8005182:	6053      	str	r3, [r2, #4]
  	  PID_FAC_Angular_Rate_Rool[2] = d_angular_rate_roolfactor;
 8005184:	4b95      	ldr	r3, [pc, #596]	@ (80053dc <main+0x6c4>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4a92      	ldr	r2, [pc, #584]	@ (80053d4 <main+0x6bc>)
 800518a:	6093      	str	r3, [r2, #8]
  	  PID_FAC_Angular_Rate_Yaw[0] = p_angular_rate_yawfactor;//
 800518c:	4b94      	ldr	r3, [pc, #592]	@ (80053e0 <main+0x6c8>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4a94      	ldr	r2, [pc, #592]	@ (80053e4 <main+0x6cc>)
 8005192:	6013      	str	r3, [r2, #0]
  	  PID_FAC_Angular_Rate_Yaw[1] = i_angular_rate_yawfactor;
 8005194:	4b94      	ldr	r3, [pc, #592]	@ (80053e8 <main+0x6d0>)
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	4a92      	ldr	r2, [pc, #584]	@ (80053e4 <main+0x6cc>)
 800519a:	6053      	str	r3, [r2, #4]
  	  PID_FAC_Angular_Rate_Yaw[2] = d_angular_rate_yawfactor;
 800519c:	4b93      	ldr	r3, [pc, #588]	@ (80053ec <main+0x6d4>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4a90      	ldr	r2, [pc, #576]	@ (80053e4 <main+0x6cc>)
 80051a2:	6093      	str	r3, [r2, #8]
  	  PID_FAC_Pitch[0] = p_pitchfactor;
 80051a4:	4b92      	ldr	r3, [pc, #584]	@ (80053f0 <main+0x6d8>)
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	4a92      	ldr	r2, [pc, #584]	@ (80053f4 <main+0x6dc>)
 80051aa:	6013      	str	r3, [r2, #0]
  	  PID_FAC_Pitch[1] = i_pitchfactor;
 80051ac:	4b92      	ldr	r3, [pc, #584]	@ (80053f8 <main+0x6e0>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4a90      	ldr	r2, [pc, #576]	@ (80053f4 <main+0x6dc>)
 80051b2:	6053      	str	r3, [r2, #4]
  	  PID_FAC_Pitch[2] = d_pitchfactor;
 80051b4:	4b91      	ldr	r3, [pc, #580]	@ (80053fc <main+0x6e4>)
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4a8e      	ldr	r2, [pc, #568]	@ (80053f4 <main+0x6dc>)
 80051ba:	6093      	str	r3, [r2, #8]
  	  PID_FAC_Rool[0] = p_roolfactor;//
 80051bc:	4b90      	ldr	r3, [pc, #576]	@ (8005400 <main+0x6e8>)
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4a90      	ldr	r2, [pc, #576]	@ (8005404 <main+0x6ec>)
 80051c2:	6013      	str	r3, [r2, #0]
  	  PID_FAC_Rool[1] = i_roolfactor;
 80051c4:	4b90      	ldr	r3, [pc, #576]	@ (8005408 <main+0x6f0>)
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	4a8e      	ldr	r2, [pc, #568]	@ (8005404 <main+0x6ec>)
 80051ca:	6053      	str	r3, [r2, #4]
  	  PID_FAC_Rool[2] = d_roolfactor;
 80051cc:	4b8f      	ldr	r3, [pc, #572]	@ (800540c <main+0x6f4>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4a8c      	ldr	r2, [pc, #560]	@ (8005404 <main+0x6ec>)
 80051d2:	6093      	str	r3, [r2, #8]
  	  PID_FAC_Yaw[0] = p_yawfactor;//
 80051d4:	4b8e      	ldr	r3, [pc, #568]	@ (8005410 <main+0x6f8>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4a8e      	ldr	r2, [pc, #568]	@ (8005414 <main+0x6fc>)
 80051da:	6013      	str	r3, [r2, #0]
  	  PID_FAC_Yaw[1] = i_yawfactor;
 80051dc:	4b8e      	ldr	r3, [pc, #568]	@ (8005418 <main+0x700>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4a8c      	ldr	r2, [pc, #560]	@ (8005414 <main+0x6fc>)
 80051e2:	6053      	str	r3, [r2, #4]
  	  PID_FAC_Yaw[2] = d_yawfactor;
 80051e4:	4b8d      	ldr	r3, [pc, #564]	@ (800541c <main+0x704>)
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4a8a      	ldr	r2, [pc, #552]	@ (8005414 <main+0x6fc>)
 80051ea:	6093      	str	r3, [r2, #8]


  	data.ox = 0;
 80051ec:	4b8c      	ldr	r3, [pc, #560]	@ (8005420 <main+0x708>)
 80051ee:	f04f 0200 	mov.w	r2, #0
 80051f2:	60da      	str	r2, [r3, #12]
  	data.x = 0;
 80051f4:	4b8a      	ldr	r3, [pc, #552]	@ (8005420 <main+0x708>)
 80051f6:	f04f 0200 	mov.w	r2, #0
 80051fa:	601a      	str	r2, [r3, #0]
  	data.oy = 0;
 80051fc:	4b88      	ldr	r3, [pc, #544]	@ (8005420 <main+0x708>)
 80051fe:	f04f 0200 	mov.w	r2, #0
 8005202:	611a      	str	r2, [r3, #16]
  	data.y = 0;
 8005204:	4b86      	ldr	r3, [pc, #536]	@ (8005420 <main+0x708>)
 8005206:	f04f 0200 	mov.w	r2, #0
 800520a:	605a      	str	r2, [r3, #4]
  	data.oz = 0;
 800520c:	4b84      	ldr	r3, [pc, #528]	@ (8005420 <main+0x708>)
 800520e:	f04f 0200 	mov.w	r2, #0
 8005212:	615a      	str	r2, [r3, #20]
  	data.z = 0;
 8005214:	4b82      	ldr	r3, [pc, #520]	@ (8005420 <main+0x708>)
 8005216:	f04f 0200 	mov.w	r2, #0
 800521a:	609a      	str	r2, [r3, #8]


  	pid_pitch = 0;
 800521c:	4b81      	ldr	r3, [pc, #516]	@ (8005424 <main+0x70c>)
 800521e:	f04f 0200 	mov.w	r2, #0
 8005222:	601a      	str	r2, [r3, #0]
  	pid_yaw = 0;
 8005224:	4b80      	ldr	r3, [pc, #512]	@ (8005428 <main+0x710>)
 8005226:	f04f 0200 	mov.w	r2, #0
 800522a:	601a      	str	r2, [r3, #0]
  	pid_rool = 0;
 800522c:	4b7f      	ldr	r3, [pc, #508]	@ (800542c <main+0x714>)
 800522e:	f04f 0200 	mov.w	r2, #0
 8005232:	601a      	str	r2, [r3, #0]

  	pid_angular_rate_pitch = 0;
 8005234:	4b7e      	ldr	r3, [pc, #504]	@ (8005430 <main+0x718>)
 8005236:	f04f 0200 	mov.w	r2, #0
 800523a:	601a      	str	r2, [r3, #0]
  	pid_angular_rate_yaw = 0;
 800523c:	4b7d      	ldr	r3, [pc, #500]	@ (8005434 <main+0x71c>)
 800523e:	f04f 0200 	mov.w	r2, #0
 8005242:	601a      	str	r2, [r3, #0]
  	pid_angular_rate_rool = 0;
 8005244:	4b7c      	ldr	r3, [pc, #496]	@ (8005438 <main+0x720>)
 8005246:	f04f 0200 	mov.w	r2, #0
 800524a:	601a      	str	r2, [r3, #0]

  	MYDRON.PITCH_STA = 0;
 800524c:	4b7b      	ldr	r3, [pc, #492]	@ (800543c <main+0x724>)
 800524e:	2200      	movs	r2, #0
 8005250:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  	MYDRON.ROOL_STA = 0;
 8005254:	4b79      	ldr	r3, [pc, #484]	@ (800543c <main+0x724>)
 8005256:	2200      	movs	r2, #0
 8005258:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
  	MYDRON.YAW_STA = 0;
 800525c:	4b77      	ldr	r3, [pc, #476]	@ (800543c <main+0x724>)
 800525e:	2200      	movs	r2, #0
 8005260:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  	ax = 0,ay = 0,az = 0, gx = 0, gy = 0, gz = 0;
 8005264:	4b76      	ldr	r3, [pc, #472]	@ (8005440 <main+0x728>)
 8005266:	f04f 0200 	mov.w	r2, #0
 800526a:	601a      	str	r2, [r3, #0]
 800526c:	4b75      	ldr	r3, [pc, #468]	@ (8005444 <main+0x72c>)
 800526e:	f04f 0200 	mov.w	r2, #0
 8005272:	601a      	str	r2, [r3, #0]
 8005274:	4b74      	ldr	r3, [pc, #464]	@ (8005448 <main+0x730>)
 8005276:	f04f 0200 	mov.w	r2, #0
 800527a:	601a      	str	r2, [r3, #0]
 800527c:	4b73      	ldr	r3, [pc, #460]	@ (800544c <main+0x734>)
 800527e:	f04f 0200 	mov.w	r2, #0
 8005282:	601a      	str	r2, [r3, #0]
 8005284:	4b72      	ldr	r3, [pc, #456]	@ (8005450 <main+0x738>)
 8005286:	f04f 0200 	mov.w	r2, #0
 800528a:	601a      	str	r2, [r3, #0]
 800528c:	4b71      	ldr	r3, [pc, #452]	@ (8005454 <main+0x73c>)
 800528e:	f04f 0200 	mov.w	r2, #0
 8005292:	601a      	str	r2, [r3, #0]
  	ax_ang = 0,ay_ang = 0,az_ang = 0, gx_ang = 0, gy_ang = 0, gz_ang = 0;
 8005294:	4b70      	ldr	r3, [pc, #448]	@ (8005458 <main+0x740>)
 8005296:	f04f 0200 	mov.w	r2, #0
 800529a:	601a      	str	r2, [r3, #0]
 800529c:	4b6f      	ldr	r3, [pc, #444]	@ (800545c <main+0x744>)
 800529e:	f04f 0200 	mov.w	r2, #0
 80052a2:	601a      	str	r2, [r3, #0]
 80052a4:	4b6e      	ldr	r3, [pc, #440]	@ (8005460 <main+0x748>)
 80052a6:	f04f 0200 	mov.w	r2, #0
 80052aa:	601a      	str	r2, [r3, #0]
 80052ac:	4b6d      	ldr	r3, [pc, #436]	@ (8005464 <main+0x74c>)
 80052ae:	f04f 0200 	mov.w	r2, #0
 80052b2:	601a      	str	r2, [r3, #0]
 80052b4:	4b6c      	ldr	r3, [pc, #432]	@ (8005468 <main+0x750>)
 80052b6:	f04f 0200 	mov.w	r2, #0
 80052ba:	601a      	str	r2, [r3, #0]
 80052bc:	4b6b      	ldr	r3, [pc, #428]	@ (800546c <main+0x754>)
 80052be:	f04f 0200 	mov.w	r2, #0
 80052c2:	601a      	str	r2, [r3, #0]
  	accelx_cal = 0, accely_cal = 0, accelz_cal = 0, gyrox_cal = 0, gyroy_cal = 0, gyroz_cal = 0;
 80052c4:	4b6a      	ldr	r3, [pc, #424]	@ (8005470 <main+0x758>)
 80052c6:	f04f 0200 	mov.w	r2, #0
 80052ca:	601a      	str	r2, [r3, #0]
 80052cc:	4b69      	ldr	r3, [pc, #420]	@ (8005474 <main+0x75c>)
 80052ce:	f04f 0200 	mov.w	r2, #0
 80052d2:	601a      	str	r2, [r3, #0]
 80052d4:	4b68      	ldr	r3, [pc, #416]	@ (8005478 <main+0x760>)
 80052d6:	f04f 0200 	mov.w	r2, #0
 80052da:	601a      	str	r2, [r3, #0]
 80052dc:	4b67      	ldr	r3, [pc, #412]	@ (800547c <main+0x764>)
 80052de:	f04f 0200 	mov.w	r2, #0
 80052e2:	601a      	str	r2, [r3, #0]
 80052e4:	4b66      	ldr	r3, [pc, #408]	@ (8005480 <main+0x768>)
 80052e6:	f04f 0200 	mov.w	r2, #0
 80052ea:	601a      	str	r2, [r3, #0]
 80052ec:	4b65      	ldr	r3, [pc, #404]	@ (8005484 <main+0x76c>)
 80052ee:	f04f 0200 	mov.w	r2, #0
 80052f2:	601a      	str	r2, [r3, #0]

  	uint8_t o[3] = "Odb";
 80052f4:	4a64      	ldr	r2, [pc, #400]	@ (8005488 <main+0x770>)
 80052f6:	f107 0308 	add.w	r3, r7, #8
 80052fa:	6812      	ldr	r2, [r2, #0]
 80052fc:	4611      	mov	r1, r2
 80052fe:	8019      	strh	r1, [r3, #0]
 8005300:	3302      	adds	r3, #2
 8005302:	0c12      	lsrs	r2, r2, #16
 8005304:	701a      	strb	r2, [r3, #0]
  	uint8_t n[3] = "Nad";
 8005306:	4a61      	ldr	r2, [pc, #388]	@ (800548c <main+0x774>)
 8005308:	1d3b      	adds	r3, r7, #4
 800530a:	6812      	ldr	r2, [r2, #0]
 800530c:	4611      	mov	r1, r2
 800530e:	8019      	strh	r1, [r3, #0]
 8005310:	3302      	adds	r3, #2
 8005312:	0c12      	lsrs	r2, r2, #16
 8005314:	701a      	strb	r2, [r3, #0]


  	LED_5_1;
 8005316:	2201      	movs	r2, #1
 8005318:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800531c:	485c      	ldr	r0, [pc, #368]	@ (8005490 <main+0x778>)
 800531e:	f009 f8f7 	bl	800e510 <HAL_GPIO_WritePin>
  	LED_6_1;
 8005322:	2201      	movs	r2, #1
 8005324:	2108      	movs	r1, #8
 8005326:	485b      	ldr	r0, [pc, #364]	@ (8005494 <main+0x77c>)
 8005328:	f009 f8f2 	bl	800e510 <HAL_GPIO_WritePin>
  	LED_7_1;
 800532c:	2201      	movs	r2, #1
 800532e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005332:	4857      	ldr	r0, [pc, #348]	@ (8005490 <main+0x778>)
 8005334:	f009 f8ec 	bl	800e510 <HAL_GPIO_WritePin>
  	LED_uSD_1;
 8005338:	2201      	movs	r2, #1
 800533a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800533e:	4856      	ldr	r0, [pc, #344]	@ (8005498 <main+0x780>)
 8005340:	f009 f8e6 	bl	800e510 <HAL_GPIO_WritePin>
  	LED_G_1;
 8005344:	2201      	movs	r2, #1
 8005346:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800534a:	4852      	ldr	r0, [pc, #328]	@ (8005494 <main+0x77c>)
 800534c:	f009 f8e0 	bl	800e510 <HAL_GPIO_WritePin>
  	LED_Y_1;
 8005350:	2201      	movs	r2, #1
 8005352:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005356:	4851      	ldr	r0, [pc, #324]	@ (800549c <main+0x784>)
 8005358:	f009 f8da 	bl	800e510 <HAL_GPIO_WritePin>
  	LED_R_1;
 800535c:	2201      	movs	r2, #1
 800535e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005362:	484e      	ldr	r0, [pc, #312]	@ (800549c <main+0x784>)
 8005364:	f009 f8d4 	bl	800e510 <HAL_GPIO_WritePin>
  	HAL_Delay(1000);
 8005368:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800536c:	f003 ff72 	bl	8009254 <HAL_Delay>
  	LED_G_0;
 8005370:	2200      	movs	r2, #0
 8005372:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005376:	4847      	ldr	r0, [pc, #284]	@ (8005494 <main+0x77c>)
 8005378:	f009 f8ca 	bl	800e510 <HAL_GPIO_WritePin>
  	LED_Y_0;
 800537c:	2200      	movs	r2, #0
 800537e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005382:	4846      	ldr	r0, [pc, #280]	@ (800549c <main+0x784>)
 8005384:	f009 f8c4 	bl	800e510 <HAL_GPIO_WritePin>
  	LED_R_0;
 8005388:	2200      	movs	r2, #0
 800538a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800538e:	4843      	ldr	r0, [pc, #268]	@ (800549c <main+0x784>)
 8005390:	f009 f8be 	bl	800e510 <HAL_GPIO_WritePin>
  	LED_5_0;
 8005394:	2200      	movs	r2, #0
 8005396:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800539a:	483d      	ldr	r0, [pc, #244]	@ (8005490 <main+0x778>)
 800539c:	f009 f8b8 	bl	800e510 <HAL_GPIO_WritePin>
  	LED_6_0;
 80053a0:	2200      	movs	r2, #0
 80053a2:	2108      	movs	r1, #8
 80053a4:	483b      	ldr	r0, [pc, #236]	@ (8005494 <main+0x77c>)
 80053a6:	f009 f8b3 	bl	800e510 <HAL_GPIO_WritePin>
  	LED_7_0;
 80053aa:	2200      	movs	r2, #0
 80053ac:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80053b0:	4837      	ldr	r0, [pc, #220]	@ (8005490 <main+0x778>)
 80053b2:	f009 f8ad 	bl	800e510 <HAL_GPIO_WritePin>
  	LED_uSD_0;
 80053b6:	2200      	movs	r2, #0
 80053b8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80053bc:	4836      	ldr	r0, [pc, #216]	@ (8005498 <main+0x780>)
 80053be:	f009 f8a7 	bl	800e510 <HAL_GPIO_WritePin>




  	for(int i = 0; i < 4000; i++){
 80053c2:	2300      	movs	r3, #0
 80053c4:	61fb      	str	r3, [r7, #28]
 80053c6:	e075      	b.n	80054b4 <main+0x79c>
 80053c8:	00004130 	.word	0x00004130
 80053cc:	00004124 	.word	0x00004124
 80053d0:	00004110 	.word	0x00004110
 80053d4:	00004144 	.word	0x00004144
 80053d8:	0000411c 	.word	0x0000411c
 80053dc:	00004128 	.word	0x00004128
 80053e0:	00004114 	.word	0x00004114
 80053e4:	00004158 	.word	0x00004158
 80053e8:	00004120 	.word	0x00004120
 80053ec:	0000412c 	.word	0x0000412c
 80053f0:	000040ac 	.word	0x000040ac
 80053f4:	000040d0 	.word	0x000040d0
 80053f8:	000040b8 	.word	0x000040b8
 80053fc:	000040c4 	.word	0x000040c4
 8005400:	000040b0 	.word	0x000040b0
 8005404:	000040e4 	.word	0x000040e4
 8005408:	000040bc 	.word	0x000040bc
 800540c:	000040c8 	.word	0x000040c8
 8005410:	000040b4 	.word	0x000040b4
 8005414:	000040f8 	.word	0x000040f8
 8005418:	000040c0 	.word	0x000040c0
 800541c:	000040cc 	.word	0x000040cc
 8005420:	00000064 	.word	0x00000064
 8005424:	00004094 	.word	0x00004094
 8005428:	00004098 	.word	0x00004098
 800542c:	0000409c 	.word	0x0000409c
 8005430:	000040a0 	.word	0x000040a0
 8005434:	000040a4 	.word	0x000040a4
 8005438:	000040a8 	.word	0x000040a8
 800543c:	00000158 	.word	0x00000158
 8005440:	00000000 	.word	0x00000000
 8005444:	00000004 	.word	0x00000004
 8005448:	00000008 	.word	0x00000008
 800544c:	0000000c 	.word	0x0000000c
 8005450:	00000010 	.word	0x00000010
 8005454:	00000014 	.word	0x00000014
 8005458:	00000018 	.word	0x00000018
 800545c:	0000001c 	.word	0x0000001c
 8005460:	00000020 	.word	0x00000020
 8005464:	00000024 	.word	0x00000024
 8005468:	00000028 	.word	0x00000028
 800546c:	0000002c 	.word	0x0000002c
 8005470:	00000030 	.word	0x00000030
 8005474:	00000034 	.word	0x00000034
 8005478:	00000038 	.word	0x00000038
 800547c:	0000003c 	.word	0x0000003c
 8005480:	00000040 	.word	0x00000040
 8005484:	00000044 	.word	0x00000044
 8005488:	0801e86c 	.word	0x0801e86c
 800548c:	0801e870 	.word	0x0801e870
 8005490:	58020000 	.word	0x58020000
 8005494:	58021000 	.word	0x58021000
 8005498:	58020c00 	.word	0x58020c00
 800549c:	58020400 	.word	0x58020400
  		Old_Data_stack.olddata[i] = 0;
 80054a0:	4ab8      	ldr	r2, [pc, #736]	@ (8005784 <main+0xa6c>)
 80054a2:	69fb      	ldr	r3, [r7, #28]
 80054a4:	009b      	lsls	r3, r3, #2
 80054a6:	4413      	add	r3, r2
 80054a8:	f04f 0200 	mov.w	r2, #0
 80054ac:	601a      	str	r2, [r3, #0]
  	for(int i = 0; i < 4000; i++){
 80054ae:	69fb      	ldr	r3, [r7, #28]
 80054b0:	3301      	adds	r3, #1
 80054b2:	61fb      	str	r3, [r7, #28]
 80054b4:	69fb      	ldr	r3, [r7, #28]
 80054b6:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 80054ba:	dbf1      	blt.n	80054a0 <main+0x788>
  	}
  	Old_Data_stack.start_pointer = 0;
 80054bc:	4bb1      	ldr	r3, [pc, #708]	@ (8005784 <main+0xa6c>)
 80054be:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 80054c2:	2200      	movs	r2, #0
 80054c4:	f8a3 2ea8 	strh.w	r2, [r3, #3752]	@ 0xea8
  	Old_Data_stack.end_pointer = 4000;
 80054c8:	4bae      	ldr	r3, [pc, #696]	@ (8005784 <main+0xa6c>)
 80054ca:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 80054ce:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 80054d2:	f8a3 2eaa 	strh.w	r2, [r3, #3754]	@ 0xeaa

  	analogmess = 0;
 80054d6:	4bac      	ldr	r3, [pc, #688]	@ (8005788 <main+0xa70>)
 80054d8:	2200      	movs	r2, #0
 80054da:	601a      	str	r2, [r3, #0]


  	HAL_TIM_Base_Start(&htim8);
 80054dc:	48ab      	ldr	r0, [pc, #684]	@ (800578c <main+0xa74>)
 80054de:	f010 fe07 	bl	80160f0 <HAL_TIM_Base_Start>
  	HAL_ADC_Start_DMA(&hadc2, &analogmess, 1);//todo psuje program
 80054e2:	2201      	movs	r2, #1
 80054e4:	49a8      	ldr	r1, [pc, #672]	@ (8005788 <main+0xa70>)
 80054e6:	48aa      	ldr	r0, [pc, #680]	@ (8005790 <main+0xa78>)
 80054e8:	f004 fbcc 	bl	8009c84 <HAL_ADC_Start_DMA>
  	LED_R_1;
 80054ec:	2201      	movs	r2, #1
 80054ee:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80054f2:	48a8      	ldr	r0, [pc, #672]	@ (8005794 <main+0xa7c>)
 80054f4:	f009 f80c 	bl	800e510 <HAL_GPIO_WritePin>
  	while(analogmess == 0){
 80054f8:	bf00      	nop
 80054fa:	4ba3      	ldr	r3, [pc, #652]	@ (8005788 <main+0xa70>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d0fb      	beq.n	80054fa <main+0x7e2>

  	}
  	LED_R_0;
 8005502:	2200      	movs	r2, #0
 8005504:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005508:	48a2      	ldr	r0, [pc, #648]	@ (8005794 <main+0xa7c>)
 800550a:	f009 f801 	bl	800e510 <HAL_GPIO_WritePin>

  	Get_batteryvalue();
 800550e:	f7fe fcfb 	bl	8003f08 <Get_batteryvalue>

  	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);//pwm do diodt RGB
 8005512:	2104      	movs	r1, #4
 8005514:	48a0      	ldr	r0, [pc, #640]	@ (8005798 <main+0xa80>)
 8005516:	f010 ff47 	bl	80163a8 <HAL_TIM_PWM_Start>
  	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800551a:	2108      	movs	r1, #8
 800551c:	489e      	ldr	r0, [pc, #632]	@ (8005798 <main+0xa80>)
 800551e:	f010 ff43 	bl	80163a8 <HAL_TIM_PWM_Start>
  	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8005522:	210c      	movs	r1, #12
 8005524:	489c      	ldr	r0, [pc, #624]	@ (8005798 <main+0xa80>)
 8005526:	f010 ff3f 	bl	80163a8 <HAL_TIM_PWM_Start>


  	RGB_LED_For_BAT(MYDRON.batterysize);
 800552a:	4b9c      	ldr	r3, [pc, #624]	@ (800579c <main+0xa84>)
 800552c:	881b      	ldrh	r3, [r3, #0]
 800552e:	b2db      	uxtb	r3, r3
 8005530:	4618      	mov	r0, r3
 8005532:	f001 fe99 	bl	8007268 <RGB_LED_For_BAT>
  	if(MYDRON.dron_status.Battery == DRON_BATTERY_RUN_OUT)
 8005536:	4b99      	ldr	r3, [pc, #612]	@ (800579c <main+0xa84>)
 8005538:	8a9b      	ldrh	r3, [r3, #20]
 800553a:	2b07      	cmp	r3, #7
 800553c:	d107      	bne.n	800554e <main+0x836>
  	{
  		LED_R_1;
 800553e:	2201      	movs	r2, #1
 8005540:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005544:	4893      	ldr	r0, [pc, #588]	@ (8005794 <main+0xa7c>)
 8005546:	f008 ffe3 	bl	800e510 <HAL_GPIO_WritePin>
  		while(1){
 800554a:	bf00      	nop
 800554c:	e7fd      	b.n	800554a <main+0x832>

  		}
  	}
  	if(MYDRON.dron_status.Battery == DRON_BATTERY_CRIT_VAL){
 800554e:	4b93      	ldr	r3, [pc, #588]	@ (800579c <main+0xa84>)
 8005550:	8a9b      	ldrh	r3, [r3, #20]
 8005552:	2b09      	cmp	r3, #9
 8005554:	d107      	bne.n	8005566 <main+0x84e>
  		LED_R_1;
 8005556:	2201      	movs	r2, #1
 8005558:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800555c:	488d      	ldr	r0, [pc, #564]	@ (8005794 <main+0xa7c>)
 800555e:	f008 ffd7 	bl	800e510 <HAL_GPIO_WritePin>
  		while(1){
 8005562:	bf00      	nop
 8005564:	e7fd      	b.n	8005562 <main+0x84a>
  		}
  	}


  /////////////////////////////// uSD
	SD_enable_Flag = HAL_GPIO_ReadPin(uSD_Detection_GPIO_Port, uSD_Detection_Pin);// jezeli karta SD jest wlozona, pin CardDetect jest zwierany do masy
 8005566:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800556a:	488a      	ldr	r0, [pc, #552]	@ (8005794 <main+0xa7c>)
 800556c:	f008 ffb8 	bl	800e4e0 <HAL_GPIO_ReadPin>
 8005570:	4603      	mov	r3, r0
 8005572:	461a      	mov	r2, r3
 8005574:	4b8a      	ldr	r3, [pc, #552]	@ (80057a0 <main+0xa88>)
 8005576:	701a      	strb	r2, [r3, #0]

	if(SD_enable_Flag == 1){
 8005578:	4b89      	ldr	r3, [pc, #548]	@ (80057a0 <main+0xa88>)
 800557a:	781b      	ldrb	r3, [r3, #0]
 800557c:	2b01      	cmp	r3, #1
 800557e:	d103      	bne.n	8005588 <main+0x870>
		SD_enable_Flag = 0;
 8005580:	4b87      	ldr	r3, [pc, #540]	@ (80057a0 <main+0xa88>)
 8005582:	2200      	movs	r2, #0
 8005584:	701a      	strb	r2, [r3, #0]
 8005586:	e002      	b.n	800558e <main+0x876>
	}
	else{
		SD_enable_Flag = 1;
 8005588:	4b85      	ldr	r3, [pc, #532]	@ (80057a0 <main+0xa88>)
 800558a:	2201      	movs	r2, #1
 800558c:	701a      	strb	r2, [r3, #0]
	}

	if(SD_enable_Flag == 1){
 800558e:	4b84      	ldr	r3, [pc, #528]	@ (80057a0 <main+0xa88>)
 8005590:	781b      	ldrb	r3, [r3, #0]
 8005592:	2b01      	cmp	r3, #1
 8005594:	d15f      	bne.n	8005656 <main+0x93e>
		LED_uSD_1;
 8005596:	2201      	movs	r2, #1
 8005598:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800559c:	4881      	ldr	r0, [pc, #516]	@ (80057a4 <main+0xa8c>)
 800559e:	f008 ffb7 	bl	800e510 <HAL_GPIO_WritePin>
		fresult = f_mount(&fs, "/", 1);
 80055a2:	2201      	movs	r2, #1
 80055a4:	4980      	ldr	r1, [pc, #512]	@ (80057a8 <main+0xa90>)
 80055a6:	4881      	ldr	r0, [pc, #516]	@ (80057ac <main+0xa94>)
 80055a8:	f017 fe14 	bl	801d1d4 <f_mount>
 80055ac:	4603      	mov	r3, r0
 80055ae:	461a      	mov	r2, r3
 80055b0:	4b7f      	ldr	r3, [pc, #508]	@ (80057b0 <main+0xa98>)
 80055b2:	701a      	strb	r2, [r3, #0]
		fresult = f_unlink("/file.txt");//skasowanie poprzedniego pliku
 80055b4:	487f      	ldr	r0, [pc, #508]	@ (80057b4 <main+0xa9c>)
 80055b6:	f018 fa57 	bl	801da68 <f_unlink>
 80055ba:	4603      	mov	r3, r0
 80055bc:	461a      	mov	r2, r3
 80055be:	4b7c      	ldr	r3, [pc, #496]	@ (80057b0 <main+0xa98>)
 80055c0:	701a      	strb	r2, [r3, #0]
		fresult = f_mount(&fs, "/", 1);
 80055c2:	2201      	movs	r2, #1
 80055c4:	4978      	ldr	r1, [pc, #480]	@ (80057a8 <main+0xa90>)
 80055c6:	4879      	ldr	r0, [pc, #484]	@ (80057ac <main+0xa94>)
 80055c8:	f017 fe04 	bl	801d1d4 <f_mount>
 80055cc:	4603      	mov	r3, r0
 80055ce:	461a      	mov	r2, r3
 80055d0:	4b77      	ldr	r3, [pc, #476]	@ (80057b0 <main+0xa98>)
 80055d2:	701a      	strb	r2, [r3, #0]
		fresult = f_open(&fil, "file.txt", FA_CREATE_ALWAYS | FA_WRITE);// utwozenie nowego pliku
 80055d4:	220a      	movs	r2, #10
 80055d6:	4978      	ldr	r1, [pc, #480]	@ (80057b8 <main+0xaa0>)
 80055d8:	4878      	ldr	r0, [pc, #480]	@ (80057bc <main+0xaa4>)
 80055da:	f017 fe41 	bl	801d260 <f_open>
 80055de:	4603      	mov	r3, r0
 80055e0:	461a      	mov	r2, r3
 80055e2:	4b73      	ldr	r3, [pc, #460]	@ (80057b0 <main+0xa98>)
 80055e4:	701a      	strb	r2, [r3, #0]
		LED_uSD_0;
 80055e6:	2200      	movs	r2, #0
 80055e8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80055ec:	486d      	ldr	r0, [pc, #436]	@ (80057a4 <main+0xa8c>)
 80055ee:	f008 ff8f 	bl	800e510 <HAL_GPIO_WritePin>

		LED_uSD_1;
 80055f2:	2201      	movs	r2, #1
 80055f4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80055f8:	486a      	ldr	r0, [pc, #424]	@ (80057a4 <main+0xa8c>)
 80055fa:	f008 ff89 	bl	800e510 <HAL_GPIO_WritePin>
		for(int i = 0; i < 129000; i++){
 80055fe:	2300      	movs	r3, #0
 8005600:	61bb      	str	r3, [r7, #24]
 8005602:	e007      	b.n	8005614 <main+0x8fc>
			DataToSendBuffer[i] = 49;
 8005604:	4a6e      	ldr	r2, [pc, #440]	@ (80057c0 <main+0xaa8>)
 8005606:	69bb      	ldr	r3, [r7, #24]
 8005608:	4413      	add	r3, r2
 800560a:	2231      	movs	r2, #49	@ 0x31
 800560c:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < 129000; i++){
 800560e:	69bb      	ldr	r3, [r7, #24]
 8005610:	3301      	adds	r3, #1
 8005612:	61bb      	str	r3, [r7, #24]
 8005614:	69bb      	ldr	r3, [r7, #24]
 8005616:	4a6b      	ldr	r2, [pc, #428]	@ (80057c4 <main+0xaac>)
 8005618:	4293      	cmp	r3, r2
 800561a:	ddf3      	ble.n	8005604 <main+0x8ec>
		}
		fresult = f_write(&fil, DataToSendBuffer, 129, &bw);//64000
 800561c:	4b6a      	ldr	r3, [pc, #424]	@ (80057c8 <main+0xab0>)
 800561e:	2281      	movs	r2, #129	@ 0x81
 8005620:	4967      	ldr	r1, [pc, #412]	@ (80057c0 <main+0xaa8>)
 8005622:	4866      	ldr	r0, [pc, #408]	@ (80057bc <main+0xaa4>)
 8005624:	f017 ffe4 	bl	801d5f0 <f_write>
 8005628:	4603      	mov	r3, r0
 800562a:	461a      	mov	r2, r3
 800562c:	4b60      	ldr	r3, [pc, #384]	@ (80057b0 <main+0xa98>)
 800562e:	701a      	strb	r2, [r3, #0]
		fresult = f_close(&fil);
 8005630:	4862      	ldr	r0, [pc, #392]	@ (80057bc <main+0xaa4>)
 8005632:	f018 f9ef 	bl	801da14 <f_close>
 8005636:	4603      	mov	r3, r0
 8005638:	461a      	mov	r2, r3
 800563a:	4b5d      	ldr	r3, [pc, #372]	@ (80057b0 <main+0xa98>)
 800563c:	701a      	strb	r2, [r3, #0]

		if(fresult != FR_OK){
 800563e:	4b5c      	ldr	r3, [pc, #368]	@ (80057b0 <main+0xa98>)
 8005640:	781b      	ldrb	r3, [r3, #0]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d001      	beq.n	800564a <main+0x932>
			while(1){
 8005646:	bf00      	nop
 8005648:	e7fd      	b.n	8005646 <main+0x92e>

			}
		}
		LED_uSD_0;
 800564a:	2200      	movs	r2, #0
 800564c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005650:	4854      	ldr	r0, [pc, #336]	@ (80057a4 <main+0xa8c>)
 8005652:	f008 ff5d 	bl	800e510 <HAL_GPIO_WritePin>
	}

	/////////////////////////////// MPU6050
		LED_5_1;
 8005656:	2201      	movs	r2, #1
 8005658:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800565c:	485b      	ldr	r0, [pc, #364]	@ (80057cc <main+0xab4>)
 800565e:	f008 ff57 	bl	800e510 <HAL_GPIO_WritePin>
		if(MPU6050_INIT(&hi2c5) == 0){
 8005662:	485b      	ldr	r0, [pc, #364]	@ (80057d0 <main+0xab8>)
 8005664:	f7fb fd9e 	bl	80011a4 <MPU6050_INIT>
 8005668:	4603      	mov	r3, r0
 800566a:	2b00      	cmp	r3, #0
 800566c:	d107      	bne.n	800567e <main+0x966>
			LED_R_1;
 800566e:	2201      	movs	r2, #1
 8005670:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005674:	4847      	ldr	r0, [pc, #284]	@ (8005794 <main+0xa7c>)
 8005676:	f008 ff4b 	bl	800e510 <HAL_GPIO_WritePin>
			while(1){
 800567a:	bf00      	nop
 800567c:	e7fd      	b.n	800567a <main+0x962>
			}
		}
		LED_Y_1;
 800567e:	2201      	movs	r2, #1
 8005680:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005684:	4843      	ldr	r0, [pc, #268]	@ (8005794 <main+0xa7c>)
 8005686:	f008 ff43 	bl	800e510 <HAL_GPIO_WritePin>
		MPU6050_CALIBRATION(&accelx_cal, &accely_cal, &accelz_cal, &gyrox_cal, &gyroy_cal, &gyroz_cal, Gyr_Scale, Acc_Scale);
 800568a:	eddf 7a52 	vldr	s15, [pc, #328]	@ 80057d4 <main+0xabc>
 800568e:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 80057d8 <main+0xac0>
 8005692:	4b52      	ldr	r3, [pc, #328]	@ (80057dc <main+0xac4>)
 8005694:	9301      	str	r3, [sp, #4]
 8005696:	4b52      	ldr	r3, [pc, #328]	@ (80057e0 <main+0xac8>)
 8005698:	9300      	str	r3, [sp, #0]
 800569a:	eef0 0a47 	vmov.f32	s1, s14
 800569e:	eeb0 0a67 	vmov.f32	s0, s15
 80056a2:	4b50      	ldr	r3, [pc, #320]	@ (80057e4 <main+0xacc>)
 80056a4:	4a50      	ldr	r2, [pc, #320]	@ (80057e8 <main+0xad0>)
 80056a6:	4951      	ldr	r1, [pc, #324]	@ (80057ec <main+0xad4>)
 80056a8:	4851      	ldr	r0, [pc, #324]	@ (80057f0 <main+0xad8>)
 80056aa:	f7fb fe45 	bl	8001338 <MPU6050_CALIBRATION>
		LED_Y_0;
 80056ae:	2200      	movs	r2, #0
 80056b0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80056b4:	4837      	ldr	r0, [pc, #220]	@ (8005794 <main+0xa7c>)
 80056b6:	f008 ff2b 	bl	800e510 <HAL_GPIO_WritePin>

	/////////////////////////////// BMP180
		if(BMP180_init(&hi2c5) == 0){
 80056ba:	4845      	ldr	r0, [pc, #276]	@ (80057d0 <main+0xab8>)
 80056bc:	f7fb f808 	bl	80006d0 <BMP180_init>
 80056c0:	4603      	mov	r3, r0
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d107      	bne.n	80056d6 <main+0x9be>
			LED_R_1;
 80056c6:	2201      	movs	r2, #1
 80056c8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80056cc:	4831      	ldr	r0, [pc, #196]	@ (8005794 <main+0xa7c>)
 80056ce:	f008 ff1f 	bl	800e510 <HAL_GPIO_WritePin>
			while(1){
 80056d2:	bf00      	nop
 80056d4:	e7fd      	b.n	80056d2 <main+0x9ba>
			}
		}
		LED_Y_1;
 80056d6:	2201      	movs	r2, #1
 80056d8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80056dc:	482d      	ldr	r0, [pc, #180]	@ (8005794 <main+0xa7c>)
 80056de:	f008 ff17 	bl	800e510 <HAL_GPIO_WritePin>
		BMP180_CALIBRATION(&startpres);
 80056e2:	4844      	ldr	r0, [pc, #272]	@ (80057f4 <main+0xadc>)
 80056e4:	f7fb fb46 	bl	8000d74 <BMP180_CALIBRATION>
		LED_Y_0;
 80056e8:	2200      	movs	r2, #0
 80056ea:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80056ee:	4829      	ldr	r0, [pc, #164]	@ (8005794 <main+0xa7c>)
 80056f0:	f008 ff0e 	bl	800e510 <HAL_GPIO_WritePin>
	/////////////////////////////// HMC5883L
		if(HMC5883L_Init(&hi2c5) == 0){
 80056f4:	4836      	ldr	r0, [pc, #216]	@ (80057d0 <main+0xab8>)
 80056f6:	f7fb fc6f 	bl	8000fd8 <HMC5883L_Init>
 80056fa:	4603      	mov	r3, r0
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d107      	bne.n	8005710 <main+0x9f8>
			LED_R_1;
 8005700:	2201      	movs	r2, #1
 8005702:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005706:	4823      	ldr	r0, [pc, #140]	@ (8005794 <main+0xa7c>)
 8005708:	f008 ff02 	bl	800e510 <HAL_GPIO_WritePin>
			while(1){
 800570c:	bf00      	nop
 800570e:	e7fd      	b.n	800570c <main+0x9f4>
			}
		}
		LED_Y_1;
 8005710:	2201      	movs	r2, #1
 8005712:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005716:	481f      	ldr	r0, [pc, #124]	@ (8005794 <main+0xa7c>)
 8005718:	f008 fefa 	bl	800e510 <HAL_GPIO_WritePin>
		Mag_Offset_val = HMC5883L_Calibration();
 800571c:	f7fb fd0c 	bl	8001138 <HMC5883L_Calibration>
 8005720:	4603      	mov	r3, r0
 8005722:	461a      	mov	r2, r3
 8005724:	4b34      	ldr	r3, [pc, #208]	@ (80057f8 <main+0xae0>)
 8005726:	801a      	strh	r2, [r3, #0]
		LED_Y_0;
 8005728:	2200      	movs	r2, #0
 800572a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800572e:	4819      	ldr	r0, [pc, #100]	@ (8005794 <main+0xa7c>)
 8005730:	f008 feee 	bl	800e510 <HAL_GPIO_WritePin>

		LED_5_0;
 8005734:	2200      	movs	r2, #0
 8005736:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800573a:	4824      	ldr	r0, [pc, #144]	@ (80057cc <main+0xab4>)
 800573c:	f008 fee8 	bl	800e510 <HAL_GPIO_WritePin>



		MYDRON.dron_status.Connection = DRON_CONNECTED;
 8005740:	4b16      	ldr	r3, [pc, #88]	@ (800579c <main+0xa84>)
 8005742:	2201      	movs	r2, #1
 8005744:	825a      	strh	r2, [r3, #18]
		MYDRON.dron_status.position = DRON_POSITION_OK;
 8005746:	4b15      	ldr	r3, [pc, #84]	@ (800579c <main+0xa84>)
 8005748:	220c      	movs	r2, #12
 800574a:	835a      	strh	r2, [r3, #26]


		MYDRON.THRUST = 0;
 800574c:	4b13      	ldr	r3, [pc, #76]	@ (800579c <main+0xa84>)
 800574e:	2200      	movs	r2, #0
 8005750:	805a      	strh	r2, [r3, #2]




	/////////////////////////////// nRF24
		LED_6_1;
 8005752:	2201      	movs	r2, #1
 8005754:	2108      	movs	r1, #8
 8005756:	4829      	ldr	r0, [pc, #164]	@ (80057fc <main+0xae4>)
 8005758:	f008 feda 	bl	800e510 <HAL_GPIO_WritePin>
		nRF24_Init(&hspi6);
 800575c:	4828      	ldr	r0, [pc, #160]	@ (8005800 <main+0xae8>)
 800575e:	f7fc ff2b 	bl	80025b8 <nRF24_Init>
		nRF24_SetRXAddress(0, o);
 8005762:	f107 0308 	add.w	r3, r7, #8
 8005766:	4619      	mov	r1, r3
 8005768:	2000      	movs	r0, #0
 800576a:	f7fc fdca 	bl	8002302 <nRF24_SetRXAddress>
		nRF24_SetTXAddress(n);
 800576e:	1d3b      	adds	r3, r7, #4
 8005770:	4618      	mov	r0, r3
 8005772:	f7fc fdff 	bl	8002374 <nRF24_SetTXAddress>
		nRF24_Inittest();
 8005776:	f7fc ff73 	bl	8002660 <nRF24_Inittest>
		nRF24_TX_Mode();
 800577a:	f7fc fbed 	bl	8001f58 <nRF24_TX_Mode>


		for(int i = 0; i < 32; i++){
 800577e:	2300      	movs	r3, #0
 8005780:	617b      	str	r3, [r7, #20]
 8005782:	e047      	b.n	8005814 <main+0xafc>
 8005784:	0000017c 	.word	0x0000017c
 8005788:	24000ed0 	.word	0x24000ed0
 800578c:	24000464 	.word	0x24000464
 8005790:	240000ac 	.word	0x240000ac
 8005794:	58020400 	.word	0x58020400
 8005798:	24000380 	.word	0x24000380
 800579c:	00000158 	.word	0x00000158
 80057a0:	000041ac 	.word	0x000041ac
 80057a4:	58020c00 	.word	0x58020c00
 80057a8:	0801e850 	.word	0x0801e850
 80057ac:	24000ed4 	.word	0x24000ed4
 80057b0:	24001f0c 	.word	0x24001f0c
 80057b4:	0801e854 	.word	0x0801e854
 80057b8:	0801e860 	.word	0x0801e860
 80057bc:	24001f10 	.word	0x24001f10
 80057c0:	24002f48 	.word	0x24002f48
 80057c4:	0001f7e7 	.word	0x0001f7e7
 80057c8:	24002f44 	.word	0x24002f44
 80057cc:	58020000 	.word	0x58020000
 80057d0:	24000198 	.word	0x24000198
 80057d4:	42830000 	.word	0x42830000
 80057d8:	46000000 	.word	0x46000000
 80057dc:	00000044 	.word	0x00000044
 80057e0:	00000040 	.word	0x00000040
 80057e4:	0000003c 	.word	0x0000003c
 80057e8:	00000038 	.word	0x00000038
 80057ec:	00000034 	.word	0x00000034
 80057f0:	00000030 	.word	0x00000030
 80057f4:	000000cc 	.word	0x000000cc
 80057f8:	00000050 	.word	0x00000050
 80057fc:	58021000 	.word	0x58021000
 8005800:	24000274 	.word	0x24000274
			Txcode[i] = 0;
 8005804:	4a6c      	ldr	r2, [pc, #432]	@ (80059b8 <main+0xca0>)
 8005806:	697b      	ldr	r3, [r7, #20]
 8005808:	4413      	add	r3, r2
 800580a:	2200      	movs	r2, #0
 800580c:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < 32; i++){
 800580e:	697b      	ldr	r3, [r7, #20]
 8005810:	3301      	adds	r3, #1
 8005812:	617b      	str	r3, [r7, #20]
 8005814:	697b      	ldr	r3, [r7, #20]
 8005816:	2b1f      	cmp	r3, #31
 8005818:	ddf4      	ble.n	8005804 <main+0xaec>
		}
		Txcode[22] = 'd';
 800581a:	4b67      	ldr	r3, [pc, #412]	@ (80059b8 <main+0xca0>)
 800581c:	2264      	movs	r2, #100	@ 0x64
 800581e:	759a      	strb	r2, [r3, #22]
		Txcode[23] = 'r';
 8005820:	4b65      	ldr	r3, [pc, #404]	@ (80059b8 <main+0xca0>)
 8005822:	2272      	movs	r2, #114	@ 0x72
 8005824:	75da      	strb	r2, [r3, #23]
		Txcode[24] = 'o';
 8005826:	4b64      	ldr	r3, [pc, #400]	@ (80059b8 <main+0xca0>)
 8005828:	226f      	movs	r2, #111	@ 0x6f
 800582a:	761a      	strb	r2, [r3, #24]
		Txcode[25] = 'n';
 800582c:	4b62      	ldr	r3, [pc, #392]	@ (80059b8 <main+0xca0>)
 800582e:	226e      	movs	r2, #110	@ 0x6e
 8005830:	765a      	strb	r2, [r3, #25]
		Txcode[26] = '2';
 8005832:	4b61      	ldr	r3, [pc, #388]	@ (80059b8 <main+0xca0>)
 8005834:	2232      	movs	r2, #50	@ 0x32
 8005836:	769a      	strb	r2, [r3, #26]
		Txcode[27] = 'c';
 8005838:	4b5f      	ldr	r3, [pc, #380]	@ (80059b8 <main+0xca0>)
 800583a:	2263      	movs	r2, #99	@ 0x63
 800583c:	76da      	strb	r2, [r3, #27]
		Txcode[28] = '1';
 800583e:	4b5e      	ldr	r3, [pc, #376]	@ (80059b8 <main+0xca0>)
 8005840:	2231      	movs	r2, #49	@ 0x31
 8005842:	771a      	strb	r2, [r3, #28]
		Txcode[29] = 'z';
 8005844:	4b5c      	ldr	r3, [pc, #368]	@ (80059b8 <main+0xca0>)
 8005846:	227a      	movs	r2, #122	@ 0x7a
 8005848:	775a      	strb	r2, [r3, #29]
		Txcode[30] = 'a';
 800584a:	4b5b      	ldr	r3, [pc, #364]	@ (80059b8 <main+0xca0>)
 800584c:	2261      	movs	r2, #97	@ 0x61
 800584e:	779a      	strb	r2, [r3, #30]
		Txcode[31] = '7';
 8005850:	4b59      	ldr	r3, [pc, #356]	@ (80059b8 <main+0xca0>)
 8005852:	2237      	movs	r2, #55	@ 0x37
 8005854:	77da      	strb	r2, [r3, #31]



		nRF24_WriteTXPayload(Txcode);
 8005856:	4858      	ldr	r0, [pc, #352]	@ (80059b8 <main+0xca0>)
 8005858:	f7fc fe3c 	bl	80024d4 <nRF24_WriteTXPayload>
		nRF24_WaitTX();
 800585c:	f7fc fe48 	bl	80024f0 <nRF24_WaitTX>
		nRF24_RX_Mode();
 8005860:	f7fc fb4e 	bl	8001f00 <nRF24_RX_Mode>

		uint8_t cunter = 0;
 8005864:	2300      	movs	r3, #0
 8005866:	74fb      	strb	r3, [r7, #19]

		while(nRF24_IsBitSetInFifoStatus(NRF24_RX_EMPTY) == 1){
 8005868:	e022      	b.n	80058b0 <main+0xb98>
			LED_G_1;
 800586a:	2201      	movs	r2, #1
 800586c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005870:	4852      	ldr	r0, [pc, #328]	@ (80059bc <main+0xca4>)
 8005872:	f008 fe4d 	bl	800e510 <HAL_GPIO_WritePin>
			LED_Y_1;
 8005876:	2201      	movs	r2, #1
 8005878:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800587c:	4850      	ldr	r0, [pc, #320]	@ (80059c0 <main+0xca8>)
 800587e:	f008 fe47 	bl	800e510 <HAL_GPIO_WritePin>
			HAL_Delay(1);
 8005882:	2001      	movs	r0, #1
 8005884:	f003 fce6 	bl	8009254 <HAL_Delay>
			LED_G_0;
 8005888:	2200      	movs	r2, #0
 800588a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800588e:	484b      	ldr	r0, [pc, #300]	@ (80059bc <main+0xca4>)
 8005890:	f008 fe3e 	bl	800e510 <HAL_GPIO_WritePin>
			LED_Y_0;
 8005894:	2200      	movs	r2, #0
 8005896:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800589a:	4849      	ldr	r0, [pc, #292]	@ (80059c0 <main+0xca8>)
 800589c:	f008 fe38 	bl	800e510 <HAL_GPIO_WritePin>

			cunter++;
 80058a0:	7cfb      	ldrb	r3, [r7, #19]
 80058a2:	3301      	adds	r3, #1
 80058a4:	74fb      	strb	r3, [r7, #19]
			if(cunter == 100){
 80058a6:	7cfb      	ldrb	r3, [r7, #19]
 80058a8:	2b64      	cmp	r3, #100	@ 0x64
 80058aa:	d101      	bne.n	80058b0 <main+0xb98>
				NVIC_SystemReset();
 80058ac:	f7ff fa1e 	bl	8004cec <__NVIC_SystemReset>
		while(nRF24_IsBitSetInFifoStatus(NRF24_RX_EMPTY) == 1){
 80058b0:	2000      	movs	r0, #0
 80058b2:	f7fc fe61 	bl	8002578 <nRF24_IsBitSetInFifoStatus>
 80058b6:	4603      	mov	r3, r0
 80058b8:	2b01      	cmp	r3, #1
 80058ba:	d0d6      	beq.n	800586a <main+0xb52>
			}
		}

		nRF24_ReadRXPaylaod(RxData);
 80058bc:	4841      	ldr	r0, [pc, #260]	@ (80059c4 <main+0xcac>)
 80058be:	f7fc fe3f 	bl	8002540 <nRF24_ReadRXPaylaod>
		LED_6_0;
 80058c2:	2200      	movs	r2, #0
 80058c4:	2108      	movs	r1, #8
 80058c6:	483d      	ldr	r0, [pc, #244]	@ (80059bc <main+0xca4>)
 80058c8:	f008 fe22 	bl	800e510 <HAL_GPIO_WritePin>
		for(int i = 12; i < 22; i++){
 80058cc:	230c      	movs	r3, #12
 80058ce:	60fb      	str	r3, [r7, #12]
 80058d0:	e00b      	b.n	80058ea <main+0xbd2>
			Rxcode[i] = RxData[i];
 80058d2:	4a3c      	ldr	r2, [pc, #240]	@ (80059c4 <main+0xcac>)
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	4413      	add	r3, r2
 80058d8:	7819      	ldrb	r1, [r3, #0]
 80058da:	4a3b      	ldr	r2, [pc, #236]	@ (80059c8 <main+0xcb0>)
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	4413      	add	r3, r2
 80058e0:	460a      	mov	r2, r1
 80058e2:	701a      	strb	r2, [r3, #0]
		for(int i = 12; i < 22; i++){
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	3301      	adds	r3, #1
 80058e8:	60fb      	str	r3, [r7, #12]
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	2b15      	cmp	r3, #21
 80058ee:	ddf0      	ble.n	80058d2 <main+0xbba>
		}
	///////////////////////////////////////////////////////////////////////
		ESC_INT(&htim3);
 80058f0:	4836      	ldr	r0, [pc, #216]	@ (80059cc <main+0xcb4>)
 80058f2:	f7fb fb27 	bl	8000f44 <ESC_INT>

		LED_7_1;
 80058f6:	2201      	movs	r2, #1
 80058f8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80058fc:	4834      	ldr	r0, [pc, #208]	@ (80059d0 <main+0xcb8>)
 80058fe:	f008 fe07 	bl	800e510 <HAL_GPIO_WritePin>
		HAL_UART_Receive_IT(&huart1, &Received, 1);
 8005902:	2201      	movs	r2, #1
 8005904:	4933      	ldr	r1, [pc, #204]	@ (80059d4 <main+0xcbc>)
 8005906:	4834      	ldr	r0, [pc, #208]	@ (80059d8 <main+0xcc0>)
 8005908:	f012 fad2 	bl	8017eb0 <HAL_UART_Receive_IT>
		LED_7_0;
 800590c:	2200      	movs	r2, #0
 800590e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005912:	482f      	ldr	r0, [pc, #188]	@ (80059d0 <main+0xcb8>)
 8005914:	f008 fdfc 	bl	800e510 <HAL_GPIO_WritePin>

		HAL_TIM_Base_Start_IT(&htim2); // przerwanie co 1 ms
 8005918:	4830      	ldr	r0, [pc, #192]	@ (80059dc <main+0xcc4>)
 800591a:	f010 fc67 	bl	80161ec <HAL_TIM_Base_Start_IT>



	  	RGB_LED_For_BAT(MYDRON.batterysize);
 800591e:	4b30      	ldr	r3, [pc, #192]	@ (80059e0 <main+0xcc8>)
 8005920:	881b      	ldrh	r3, [r3, #0]
 8005922:	b2db      	uxtb	r3, r3
 8005924:	4618      	mov	r0, r3
 8005926:	f001 fc9f 	bl	8007268 <RGB_LED_For_BAT>


	  	if(MYDRON.dron_status.Battery == DRON_BATTERY_RUN_OUT)
 800592a:	4b2d      	ldr	r3, [pc, #180]	@ (80059e0 <main+0xcc8>)
 800592c:	8a9b      	ldrh	r3, [r3, #20]
 800592e:	2b07      	cmp	r3, #7
 8005930:	d107      	bne.n	8005942 <main+0xc2a>
	  	{
	  		LED_R_1;
 8005932:	2201      	movs	r2, #1
 8005934:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005938:	4821      	ldr	r0, [pc, #132]	@ (80059c0 <main+0xca8>)
 800593a:	f008 fde9 	bl	800e510 <HAL_GPIO_WritePin>
	  		while(1){
 800593e:	bf00      	nop
 8005940:	e7fd      	b.n	800593e <main+0xc26>
	  		}
	  	}



	  	if(MYDRON.dron_status.Battery == DRON_BATTERY_CRIT_VAL){
 8005942:	4b27      	ldr	r3, [pc, #156]	@ (80059e0 <main+0xcc8>)
 8005944:	8a9b      	ldrh	r3, [r3, #20]
 8005946:	2b09      	cmp	r3, #9
 8005948:	d107      	bne.n	800595a <main+0xc42>
	  		LED_R_1;
 800594a:	2201      	movs	r2, #1
 800594c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005950:	481b      	ldr	r0, [pc, #108]	@ (80059c0 <main+0xca8>)
 8005952:	f008 fddd 	bl	800e510 <HAL_GPIO_WritePin>
	  		while(1){
 8005956:	bf00      	nop
 8005958:	e7fd      	b.n	8005956 <main+0xc3e>
	  		}
	  	}



		STARTUP = 0;
 800595a:	4b22      	ldr	r3, [pc, #136]	@ (80059e4 <main+0xccc>)
 800595c:	2200      	movs	r2, #0
 800595e:	701a      	strb	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(MYDRON.dron_status.Battery == DRON_BATTERY_RUN_OUT){
 8005960:	4b1f      	ldr	r3, [pc, #124]	@ (80059e0 <main+0xcc8>)
 8005962:	8a9b      	ldrh	r3, [r3, #20]
 8005964:	2b07      	cmp	r3, #7
 8005966:	d10a      	bne.n	800597e <main+0xc66>
	  			LED_R_1;
 8005968:	2201      	movs	r2, #1
 800596a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800596e:	4814      	ldr	r0, [pc, #80]	@ (80059c0 <main+0xca8>)
 8005970:	f008 fdce 	bl	800e510 <HAL_GPIO_WritePin>
	  			thrust_limit = MYDRON.THRUST;
 8005974:	4b1a      	ldr	r3, [pc, #104]	@ (80059e0 <main+0xcc8>)
 8005976:	885b      	ldrh	r3, [r3, #2]
 8005978:	b21a      	sxth	r2, r3
 800597a:	4b1b      	ldr	r3, [pc, #108]	@ (80059e8 <main+0xcd0>)
 800597c:	801a      	strh	r2, [r3, #0]
	  		}
	  		if(MYDRON.dron_status.Battery == DRON_BATTERY_OK){
 800597e:	4b18      	ldr	r3, [pc, #96]	@ (80059e0 <main+0xcc8>)
 8005980:	8a9b      	ldrh	r3, [r3, #20]
 8005982:	2b08      	cmp	r3, #8
 8005984:	d103      	bne.n	800598e <main+0xc76>
	  			thrust_limit = 10000;
 8005986:	4b18      	ldr	r3, [pc, #96]	@ (80059e8 <main+0xcd0>)
 8005988:	f242 7210 	movw	r2, #10000	@ 0x2710
 800598c:	801a      	strh	r2, [r3, #0]
	  		}
	  		if(MYDRON.dron_status.Battery == DRON_BATTERY_CRIT_VAL){
 800598e:	4b14      	ldr	r3, [pc, #80]	@ (80059e0 <main+0xcc8>)
 8005990:	8a9b      	ldrh	r3, [r3, #20]
 8005992:	2b09      	cmp	r3, #9
 8005994:	d137      	bne.n	8005a06 <main+0xcee>
	  			ESC_POWER_1;
 8005996:	2201      	movs	r2, #1
 8005998:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800599c:	4813      	ldr	r0, [pc, #76]	@ (80059ec <main+0xcd4>)
 800599e:	f008 fdb7 	bl	800e510 <HAL_GPIO_WritePin>
	  			LED_R_1;
 80059a2:	2201      	movs	r2, #1
 80059a4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80059a8:	4805      	ldr	r0, [pc, #20]	@ (80059c0 <main+0xca8>)
 80059aa:	f008 fdb1 	bl	800e510 <HAL_GPIO_WritePin>
	  			f_close(&fil);
 80059ae:	4810      	ldr	r0, [pc, #64]	@ (80059f0 <main+0xcd8>)
 80059b0:	f018 f830 	bl	801da14 <f_close>
	  			while(MYDRON.dron_status.Battery == DRON_BATTERY_CRIT_VAL){
 80059b4:	e023      	b.n	80059fe <main+0xce6>
 80059b6:	bf00      	nop
 80059b8:	000000f4 	.word	0x000000f4
 80059bc:	58021000 	.word	0x58021000
 80059c0:	58020400 	.word	0x58020400
 80059c4:	000000d4 	.word	0x000000d4
 80059c8:	00000134 	.word	0x00000134
 80059cc:	24000418 	.word	0x24000418
 80059d0:	58020000 	.word	0x58020000
 80059d4:	000041a0 	.word	0x000041a0
 80059d8:	240004b0 	.word	0x240004b0
 80059dc:	240003cc 	.word	0x240003cc
 80059e0:	00000158 	.word	0x00000158
 80059e4:	0000005c 	.word	0x0000005c
 80059e8:	0000403e 	.word	0x0000403e
 80059ec:	58021800 	.word	0x58021800
 80059f0:	24001f10 	.word	0x24001f10
	  				HAL_Delay(10);
 80059f4:	200a      	movs	r0, #10
 80059f6:	f003 fc2d 	bl	8009254 <HAL_Delay>
	  				Get_batteryvalue();
 80059fa:	f7fe fa85 	bl	8003f08 <Get_batteryvalue>
	  			while(MYDRON.dron_status.Battery == DRON_BATTERY_CRIT_VAL){
 80059fe:	4b65      	ldr	r3, [pc, #404]	@ (8005b94 <main+0xe7c>)
 8005a00:	8a9b      	ldrh	r3, [r3, #20]
 8005a02:	2b09      	cmp	r3, #9
 8005a04:	d0f6      	beq.n	80059f4 <main+0xcdc>
	  			}
	  		}

	  		if(commandready == 1){
 8005a06:	4b64      	ldr	r3, [pc, #400]	@ (8005b98 <main+0xe80>)
 8005a08:	781b      	ldrb	r3, [r3, #0]
 8005a0a:	2b01      	cmp	r3, #1
 8005a0c:	d159      	bne.n	8005ac2 <main+0xdaa>
	  			LED_7_1;
 8005a0e:	2201      	movs	r2, #1
 8005a10:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005a14:	4861      	ldr	r0, [pc, #388]	@ (8005b9c <main+0xe84>)
 8005a16:	f008 fd7b 	bl	800e510 <HAL_GPIO_WritePin>
	  			interpretcommand();
 8005a1a:	f7fc fe3f 	bl	800269c <interpretcommand>
	  			executecommand(command, UASRT_PID_VAL);
 8005a1e:	4960      	ldr	r1, [pc, #384]	@ (8005ba0 <main+0xe88>)
 8005a20:	4860      	ldr	r0, [pc, #384]	@ (8005ba4 <main+0xe8c>)
 8005a22:	f7fc fe89 	bl	8002738 <executecommand>
	  			LED_7_0;
 8005a26:	2200      	movs	r2, #0
 8005a28:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005a2c:	485b      	ldr	r0, [pc, #364]	@ (8005b9c <main+0xe84>)
 8005a2e:	f008 fd6f 	bl	800e510 <HAL_GPIO_WritePin>

	  			PID_FAC_Pitch[0] = p_pitchfactor;
 8005a32:	4b5d      	ldr	r3, [pc, #372]	@ (8005ba8 <main+0xe90>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	4a5d      	ldr	r2, [pc, #372]	@ (8005bac <main+0xe94>)
 8005a38:	6013      	str	r3, [r2, #0]
	  			PID_FAC_Pitch[1] = i_pitchfactor;
 8005a3a:	4b5d      	ldr	r3, [pc, #372]	@ (8005bb0 <main+0xe98>)
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	4a5b      	ldr	r2, [pc, #364]	@ (8005bac <main+0xe94>)
 8005a40:	6053      	str	r3, [r2, #4]
	  			PID_FAC_Pitch[2] = d_pitchfactor;
 8005a42:	4b5c      	ldr	r3, [pc, #368]	@ (8005bb4 <main+0xe9c>)
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	4a59      	ldr	r2, [pc, #356]	@ (8005bac <main+0xe94>)
 8005a48:	6093      	str	r3, [r2, #8]

	  			PID_FAC_Angular_Rate_Pitch[0] = p_angular_rate_pitchfactor;
 8005a4a:	4b5b      	ldr	r3, [pc, #364]	@ (8005bb8 <main+0xea0>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	4a5b      	ldr	r2, [pc, #364]	@ (8005bbc <main+0xea4>)
 8005a50:	6013      	str	r3, [r2, #0]
	  			PID_FAC_Angular_Rate_Pitch[1] = i_angular_rate_pitchfactor;
 8005a52:	4b5b      	ldr	r3, [pc, #364]	@ (8005bc0 <main+0xea8>)
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	4a59      	ldr	r2, [pc, #356]	@ (8005bbc <main+0xea4>)
 8005a58:	6053      	str	r3, [r2, #4]
	  			PID_FAC_Angular_Rate_Pitch[2] = d_angular_rate_pitchfactor;
 8005a5a:	4b5a      	ldr	r3, [pc, #360]	@ (8005bc4 <main+0xeac>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4a57      	ldr	r2, [pc, #348]	@ (8005bbc <main+0xea4>)
 8005a60:	6093      	str	r3, [r2, #8]

	  			PID_FAC_Rool[0] = p_roolfactor;
 8005a62:	4b59      	ldr	r3, [pc, #356]	@ (8005bc8 <main+0xeb0>)
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	4a59      	ldr	r2, [pc, #356]	@ (8005bcc <main+0xeb4>)
 8005a68:	6013      	str	r3, [r2, #0]
	  			PID_FAC_Rool[1] = i_roolfactor;
 8005a6a:	4b59      	ldr	r3, [pc, #356]	@ (8005bd0 <main+0xeb8>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	4a57      	ldr	r2, [pc, #348]	@ (8005bcc <main+0xeb4>)
 8005a70:	6053      	str	r3, [r2, #4]
	  			PID_FAC_Rool[2] = d_roolfactor;
 8005a72:	4b58      	ldr	r3, [pc, #352]	@ (8005bd4 <main+0xebc>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	4a55      	ldr	r2, [pc, #340]	@ (8005bcc <main+0xeb4>)
 8005a78:	6093      	str	r3, [r2, #8]

	  			PID_FAC_Angular_Rate_Rool[0] = p_angular_rate_roolfactor;
 8005a7a:	4b57      	ldr	r3, [pc, #348]	@ (8005bd8 <main+0xec0>)
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	4a57      	ldr	r2, [pc, #348]	@ (8005bdc <main+0xec4>)
 8005a80:	6013      	str	r3, [r2, #0]
	  			PID_FAC_Angular_Rate_Rool[1] = i_angular_rate_roolfactor;
 8005a82:	4b57      	ldr	r3, [pc, #348]	@ (8005be0 <main+0xec8>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4a55      	ldr	r2, [pc, #340]	@ (8005bdc <main+0xec4>)
 8005a88:	6053      	str	r3, [r2, #4]
	  			PID_FAC_Angular_Rate_Rool[2] = d_angular_rate_roolfactor;
 8005a8a:	4b56      	ldr	r3, [pc, #344]	@ (8005be4 <main+0xecc>)
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	4a53      	ldr	r2, [pc, #332]	@ (8005bdc <main+0xec4>)
 8005a90:	6093      	str	r3, [r2, #8]

	  			PID_FAC_Yaw[0] = p_yawfactor;
 8005a92:	4b55      	ldr	r3, [pc, #340]	@ (8005be8 <main+0xed0>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	4a55      	ldr	r2, [pc, #340]	@ (8005bec <main+0xed4>)
 8005a98:	6013      	str	r3, [r2, #0]
	  			PID_FAC_Yaw[1] = i_yawfactor;
 8005a9a:	4b55      	ldr	r3, [pc, #340]	@ (8005bf0 <main+0xed8>)
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	4a53      	ldr	r2, [pc, #332]	@ (8005bec <main+0xed4>)
 8005aa0:	6053      	str	r3, [r2, #4]
	  			PID_FAC_Yaw[2] = d_yawfactor;
 8005aa2:	4b54      	ldr	r3, [pc, #336]	@ (8005bf4 <main+0xedc>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	4a51      	ldr	r2, [pc, #324]	@ (8005bec <main+0xed4>)
 8005aa8:	6093      	str	r3, [r2, #8]

	  			PID_FAC_Angular_Rate_Yaw[0] = p_angular_rate_yawfactor;
 8005aaa:	4b53      	ldr	r3, [pc, #332]	@ (8005bf8 <main+0xee0>)
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	4a53      	ldr	r2, [pc, #332]	@ (8005bfc <main+0xee4>)
 8005ab0:	6013      	str	r3, [r2, #0]
	  			PID_FAC_Angular_Rate_Yaw[1] = i_angular_rate_yawfactor;
 8005ab2:	4b53      	ldr	r3, [pc, #332]	@ (8005c00 <main+0xee8>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	4a51      	ldr	r2, [pc, #324]	@ (8005bfc <main+0xee4>)
 8005ab8:	6053      	str	r3, [r2, #4]
	  			PID_FAC_Angular_Rate_Yaw[2] = d_angular_rate_yawfactor;
 8005aba:	4b52      	ldr	r3, [pc, #328]	@ (8005c04 <main+0xeec>)
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	4a4f      	ldr	r2, [pc, #316]	@ (8005bfc <main+0xee4>)
 8005ac0:	6093      	str	r3, [r2, #8]
	  		}

	  		if((TIM_inte_SD == 1) && (fresult == FR_OK) && (SD_enable_Flag == 1)){// 1ms, 1KHz
 8005ac2:	4b51      	ldr	r3, [pc, #324]	@ (8005c08 <main+0xef0>)
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	2b01      	cmp	r3, #1
 8005ac8:	d14f      	bne.n	8005b6a <main+0xe52>
 8005aca:	4b50      	ldr	r3, [pc, #320]	@ (8005c0c <main+0xef4>)
 8005acc:	781b      	ldrb	r3, [r3, #0]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d14b      	bne.n	8005b6a <main+0xe52>
 8005ad2:	4b4f      	ldr	r3, [pc, #316]	@ (8005c10 <main+0xef8>)
 8005ad4:	781b      	ldrb	r3, [r3, #0]
 8005ad6:	2b01      	cmp	r3, #1
 8005ad8:	d147      	bne.n	8005b6a <main+0xe52>
	  			TIM_inte_SD = 0;
 8005ada:	4b4b      	ldr	r3, [pc, #300]	@ (8005c08 <main+0xef0>)
 8005adc:	2200      	movs	r2, #0
 8005ade:	601a      	str	r2, [r3, #0]

	  			uSD_Card_SendData_To_Buffer(Mainloop_Number);//todo blokuje pentle główną po ponownym uruchomieniu gdzy napięcie zsotanie odlonczone
 8005ae0:	4b4c      	ldr	r3, [pc, #304]	@ (8005c14 <main+0xefc>)
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	f001 fd55 	bl	8007594 <uSD_Card_SendData_To_Buffer>

	  			if(Mainloop_Number == 999){//zapisywanie karty raz na 1 sec
 8005aea:	4b4a      	ldr	r3, [pc, #296]	@ (8005c14 <main+0xefc>)
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d12b      	bne.n	8005b4e <main+0xe36>
	  				SD_In_Use = 1;
 8005af6:	4b48      	ldr	r3, [pc, #288]	@ (8005c18 <main+0xf00>)
 8005af8:	2201      	movs	r2, #1
 8005afa:	601a      	str	r2, [r3, #0]
	  				LED_uSD_1;
 8005afc:	2201      	movs	r2, #1
 8005afe:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005b02:	4846      	ldr	r0, [pc, #280]	@ (8005c1c <main+0xf04>)
 8005b04:	f008 fd04 	bl	800e510 <HAL_GPIO_WritePin>
	  				fresult = f_open(&fil, "file.txt", FA_OPEN_APPEND | FA_WRITE);
 8005b08:	2232      	movs	r2, #50	@ 0x32
 8005b0a:	4945      	ldr	r1, [pc, #276]	@ (8005c20 <main+0xf08>)
 8005b0c:	4845      	ldr	r0, [pc, #276]	@ (8005c24 <main+0xf0c>)
 8005b0e:	f017 fba7 	bl	801d260 <f_open>
 8005b12:	4603      	mov	r3, r0
 8005b14:	461a      	mov	r2, r3
 8005b16:	4b3d      	ldr	r3, [pc, #244]	@ (8005c0c <main+0xef4>)
 8005b18:	701a      	strb	r2, [r3, #0]
	  				fresult = f_write(&fil, DataToSendBuffer, 129000, &bw);
 8005b1a:	4b43      	ldr	r3, [pc, #268]	@ (8005c28 <main+0xf10>)
 8005b1c:	4a43      	ldr	r2, [pc, #268]	@ (8005c2c <main+0xf14>)
 8005b1e:	4944      	ldr	r1, [pc, #272]	@ (8005c30 <main+0xf18>)
 8005b20:	4840      	ldr	r0, [pc, #256]	@ (8005c24 <main+0xf0c>)
 8005b22:	f017 fd65 	bl	801d5f0 <f_write>
 8005b26:	4603      	mov	r3, r0
 8005b28:	461a      	mov	r2, r3
 8005b2a:	4b38      	ldr	r3, [pc, #224]	@ (8005c0c <main+0xef4>)
 8005b2c:	701a      	strb	r2, [r3, #0]
	  				fresult = f_close(&fil);
 8005b2e:	483d      	ldr	r0, [pc, #244]	@ (8005c24 <main+0xf0c>)
 8005b30:	f017 ff70 	bl	801da14 <f_close>
 8005b34:	4603      	mov	r3, r0
 8005b36:	461a      	mov	r2, r3
 8005b38:	4b34      	ldr	r3, [pc, #208]	@ (8005c0c <main+0xef4>)
 8005b3a:	701a      	strb	r2, [r3, #0]
	  				LED_uSD_0;
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005b42:	4836      	ldr	r0, [pc, #216]	@ (8005c1c <main+0xf04>)
 8005b44:	f008 fce4 	bl	800e510 <HAL_GPIO_WritePin>
	  				SD_In_Use = 0;
 8005b48:	4b33      	ldr	r3, [pc, #204]	@ (8005c18 <main+0xf00>)
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	601a      	str	r2, [r3, #0]
	  				}
	  			if(Mainloop_Number < 1000){
 8005b4e:	4b31      	ldr	r3, [pc, #196]	@ (8005c14 <main+0xefc>)
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005b56:	d205      	bcs.n	8005b64 <main+0xe4c>
	  				Mainloop_Number++;
 8005b58:	4b2e      	ldr	r3, [pc, #184]	@ (8005c14 <main+0xefc>)
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	3301      	adds	r3, #1
 8005b5e:	4a2d      	ldr	r2, [pc, #180]	@ (8005c14 <main+0xefc>)
 8005b60:	6013      	str	r3, [r2, #0]
 8005b62:	e002      	b.n	8005b6a <main+0xe52>
	  			}
	  			else{
	  				Mainloop_Number = 0;
 8005b64:	4b2b      	ldr	r3, [pc, #172]	@ (8005c14 <main+0xefc>)
 8005b66:	2200      	movs	r2, #0
 8005b68:	601a      	str	r2, [r3, #0]
	  			}
	  		}

	  		if(TIM_inte == 1){
 8005b6a:	4b32      	ldr	r3, [pc, #200]	@ (8005c34 <main+0xf1c>)
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	2b01      	cmp	r3, #1
 8005b70:	f47f aef6 	bne.w	8005960 <main+0xc48>
	  			LED_R_0;
 8005b74:	2200      	movs	r2, #0
 8005b76:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005b7a:	482f      	ldr	r0, [pc, #188]	@ (8005c38 <main+0xf20>)
 8005b7c:	f008 fcc8 	bl	800e510 <HAL_GPIO_WritePin>
	  			RGB_LED_For_BAT(MYDRON.batterysize);
 8005b80:	4b04      	ldr	r3, [pc, #16]	@ (8005b94 <main+0xe7c>)
 8005b82:	881b      	ldrh	r3, [r3, #0]
 8005b84:	b2db      	uxtb	r3, r3
 8005b86:	4618      	mov	r0, r3
 8005b88:	f001 fb6e 	bl	8007268 <RGB_LED_For_BAT>
	  			TIM_inte = 0;
 8005b8c:	4b29      	ldr	r3, [pc, #164]	@ (8005c34 <main+0xf1c>)
 8005b8e:	2200      	movs	r2, #0
 8005b90:	601a      	str	r2, [r3, #0]
	  if(MYDRON.dron_status.Battery == DRON_BATTERY_RUN_OUT){
 8005b92:	e6e5      	b.n	8005960 <main+0xc48>
 8005b94:	00000158 	.word	0x00000158
 8005b98:	0000419e 	.word	0x0000419e
 8005b9c:	58020000 	.word	0x58020000
 8005ba0:	00004180 	.word	0x00004180
 8005ba4:	00004190 	.word	0x00004190
 8005ba8:	000040ac 	.word	0x000040ac
 8005bac:	000040d0 	.word	0x000040d0
 8005bb0:	000040b8 	.word	0x000040b8
 8005bb4:	000040c4 	.word	0x000040c4
 8005bb8:	0000410c 	.word	0x0000410c
 8005bbc:	00004130 	.word	0x00004130
 8005bc0:	00004118 	.word	0x00004118
 8005bc4:	00004124 	.word	0x00004124
 8005bc8:	000040b0 	.word	0x000040b0
 8005bcc:	000040e4 	.word	0x000040e4
 8005bd0:	000040bc 	.word	0x000040bc
 8005bd4:	000040c8 	.word	0x000040c8
 8005bd8:	00004110 	.word	0x00004110
 8005bdc:	00004144 	.word	0x00004144
 8005be0:	0000411c 	.word	0x0000411c
 8005be4:	00004128 	.word	0x00004128
 8005be8:	000040b4 	.word	0x000040b4
 8005bec:	000040f8 	.word	0x000040f8
 8005bf0:	000040c0 	.word	0x000040c0
 8005bf4:	000040cc 	.word	0x000040cc
 8005bf8:	00004114 	.word	0x00004114
 8005bfc:	00004158 	.word	0x00004158
 8005c00:	00004120 	.word	0x00004120
 8005c04:	0000412c 	.word	0x0000412c
 8005c08:	00000054 	.word	0x00000054
 8005c0c:	24001f0c 	.word	0x24001f0c
 8005c10:	000041ac 	.word	0x000041ac
 8005c14:	000041a4 	.word	0x000041a4
 8005c18:	000041a8 	.word	0x000041a8
 8005c1c:	58020c00 	.word	0x58020c00
 8005c20:	0801e860 	.word	0x0801e860
 8005c24:	24001f10 	.word	0x24001f10
 8005c28:	24002f44 	.word	0x24002f44
 8005c2c:	0001f7e8 	.word	0x0001f7e8
 8005c30:	24002f48 	.word	0x24002f48
 8005c34:	00000058 	.word	0x00000058
 8005c38:	58020400 	.word	0x58020400

08005c3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b09c      	sub	sp, #112	@ 0x70
 8005c40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005c42:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005c46:	224c      	movs	r2, #76	@ 0x4c
 8005c48:	2100      	movs	r1, #0
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	f018 f8da 	bl	801de04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005c50:	1d3b      	adds	r3, r7, #4
 8005c52:	2220      	movs	r2, #32
 8005c54:	2100      	movs	r1, #0
 8005c56:	4618      	mov	r0, r3
 8005c58:	f018 f8d4 	bl	801de04 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8005c5c:	2002      	movs	r0, #2
 8005c5e:	f00b f909 	bl	8010e74 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8005c62:	2300      	movs	r3, #0
 8005c64:	603b      	str	r3, [r7, #0]
 8005c66:	4b2d      	ldr	r3, [pc, #180]	@ (8005d1c <SystemClock_Config+0xe0>)
 8005c68:	699b      	ldr	r3, [r3, #24]
 8005c6a:	4a2c      	ldr	r2, [pc, #176]	@ (8005d1c <SystemClock_Config+0xe0>)
 8005c6c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8005c70:	6193      	str	r3, [r2, #24]
 8005c72:	4b2a      	ldr	r3, [pc, #168]	@ (8005d1c <SystemClock_Config+0xe0>)
 8005c74:	699b      	ldr	r3, [r3, #24]
 8005c76:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8005c7a:	603b      	str	r3, [r7, #0]
 8005c7c:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8005c7e:	bf00      	nop
 8005c80:	4b26      	ldr	r3, [pc, #152]	@ (8005d1c <SystemClock_Config+0xe0>)
 8005c82:	699b      	ldr	r3, [r3, #24]
 8005c84:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005c88:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005c8c:	d1f8      	bne.n	8005c80 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_CSI|RCC_OSCILLATORTYPE_HSE;
 8005c8e:	2311      	movs	r3, #17
 8005c90:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005c92:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005c96:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.CSIState = RCC_CSI_ON;
 8005c98:	2380      	movs	r3, #128	@ 0x80
 8005c9a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.CSICalibrationValue = 16;
 8005c9c:	2310      	movs	r3, #16
 8005c9e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005ca0:	2302      	movs	r3, #2
 8005ca2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005ca4:	2302      	movs	r3, #2
 8005ca6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 3;
 8005ca8:	2303      	movs	r3, #3
 8005caa:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 68;
 8005cac:	2344      	movs	r3, #68	@ 0x44
 8005cae:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8005cb0:	2301      	movs	r3, #1
 8005cb2:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8005cb4:	2302      	movs	r3, #2
 8005cb6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8005cb8:	2302      	movs	r3, #2
 8005cba:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8005cbc:	230c      	movs	r3, #12
 8005cbe:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 6144;
 8005cc4:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8005cc8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005cca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005cce:	4618      	mov	r0, r3
 8005cd0:	f00b f90a 	bl	8010ee8 <HAL_RCC_OscConfig>
 8005cd4:	4603      	mov	r3, r0
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d001      	beq.n	8005cde <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8005cda:	f001 ff51 	bl	8007b80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005cde:	233f      	movs	r3, #63	@ 0x3f
 8005ce0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005ce2:	2303      	movs	r3, #3
 8005ce4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8005cea:	2308      	movs	r3, #8
 8005cec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8005cee:	2340      	movs	r3, #64	@ 0x40
 8005cf0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8005cf2:	2340      	movs	r3, #64	@ 0x40
 8005cf4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8005cf6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005cfa:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8005cfc:	2340      	movs	r3, #64	@ 0x40
 8005cfe:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8005d00:	1d3b      	adds	r3, r7, #4
 8005d02:	2103      	movs	r1, #3
 8005d04:	4618      	mov	r0, r3
 8005d06:	f00b fcc9 	bl	801169c <HAL_RCC_ClockConfig>
 8005d0a:	4603      	mov	r3, r0
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d001      	beq.n	8005d14 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8005d10:	f001 ff36 	bl	8007b80 <Error_Handler>
  }
}
 8005d14:	bf00      	nop
 8005d16:	3770      	adds	r7, #112	@ 0x70
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	bd80      	pop	{r7, pc}
 8005d1c:	58024800 	.word	0x58024800

08005d20 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b0ae      	sub	sp, #184	@ 0xb8
 8005d24:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005d26:	463b      	mov	r3, r7
 8005d28:	22b8      	movs	r2, #184	@ 0xb8
 8005d2a:	2100      	movs	r1, #0
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	f018 f869 	bl	801de04 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_SPI2;
 8005d32:	f44f 2201 	mov.w	r2, #528384	@ 0x81000
 8005d36:	f04f 0300 	mov.w	r3, #0
 8005d3a:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 22;
 8005d3e:	2316      	movs	r3, #22
 8005d40:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 192;
 8005d42:	23c0      	movs	r3, #192	@ 0xc0
 8005d44:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 3;
 8005d46:	2303      	movs	r3, #3
 8005d48:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8005d4a:	2302      	movs	r3, #2
 8005d4c:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8005d4e:	2302      	movs	r3, #2
 8005d50:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_0;
 8005d52:	2300      	movs	r3, #0
 8005d54:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8005d56:	2320      	movs	r3, #32
 8005d58:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 8005d5e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005d62:	65fb      	str	r3, [r7, #92]	@ 0x5c
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8005d64:	2300      	movs	r3, #0
 8005d66:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005d6a:	463b      	mov	r3, r7
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	f00c f821 	bl	8011db4 <HAL_RCCEx_PeriphCLKConfig>
 8005d72:	4603      	mov	r3, r0
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d001      	beq.n	8005d7c <PeriphCommonClock_Config+0x5c>
  {
    Error_Handler();
 8005d78:	f001 ff02 	bl	8007b80 <Error_Handler>
  }
}
 8005d7c:	bf00      	nop
 8005d7e:	37b8      	adds	r7, #184	@ 0xb8
 8005d80:	46bd      	mov	sp, r7
 8005d82:	bd80      	pop	{r7, pc}

08005d84 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b084      	sub	sp, #16
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
	if(htim == &htim2)// 1 ms
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	4a87      	ldr	r2, [pc, #540]	@ (8005fac <HAL_TIM_PeriodElapsedCallback+0x228>)
 8005d90:	4293      	cmp	r3, r2
 8005d92:	f040 8107 	bne.w	8005fa4 <HAL_TIM_PeriodElapsedCallback+0x220>
	{
		TIM_inte_SD = 1;
 8005d96:	4b86      	ldr	r3, [pc, #536]	@ (8005fb0 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8005d98:	2201      	movs	r2, #1
 8005d9a:	601a      	str	r2, [r3, #0]
		TIM_inte = 1;
 8005d9c:	4b85      	ldr	r3, [pc, #532]	@ (8005fb4 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8005d9e:	2201      	movs	r2, #1
 8005da0:	601a      	str	r2, [r3, #0]
		NRF_TIM_Inte++;
 8005da2:	4b85      	ldr	r3, [pc, #532]	@ (8005fb8 <HAL_TIM_PeriodElapsedCallback+0x234>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	3301      	adds	r3, #1
 8005da8:	4a83      	ldr	r2, [pc, #524]	@ (8005fb8 <HAL_TIM_PeriodElapsedCallback+0x234>)
 8005daa:	6013      	str	r3, [r2, #0]


		if(i == 0){// na calosc 50ms
 8005dac:	4b83      	ldr	r3, [pc, #524]	@ (8005fbc <HAL_TIM_PeriodElapsedCallback+0x238>)
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d10d      	bne.n	8005dd0 <HAL_TIM_PeriodElapsedCallback+0x4c>
			LED_5_1;
 8005db4:	2201      	movs	r2, #1
 8005db6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005dba:	4881      	ldr	r0, [pc, #516]	@ (8005fc0 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8005dbc:	f008 fba8 	bl	800e510 <HAL_GPIO_WritePin>
			BMP180_start_measurment_temp_IT();
 8005dc0:	f7fa fd56 	bl	8000870 <BMP180_start_measurment_temp_IT>
			LED_5_0;
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005dca:	487d      	ldr	r0, [pc, #500]	@ (8005fc0 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8005dcc:	f008 fba0 	bl	800e510 <HAL_GPIO_WritePin>
		}

		if(i == 10){//2
 8005dd0:	4b7a      	ldr	r3, [pc, #488]	@ (8005fbc <HAL_TIM_PeriodElapsedCallback+0x238>)
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	2b0a      	cmp	r3, #10
 8005dd6:	d10d      	bne.n	8005df4 <HAL_TIM_PeriodElapsedCallback+0x70>
			LED_5_1;
 8005dd8:	2201      	movs	r2, #1
 8005dda:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005dde:	4878      	ldr	r0, [pc, #480]	@ (8005fc0 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8005de0:	f008 fb96 	bl	800e510 <HAL_GPIO_WritePin>
			BMP180_start_measurment_pres_IT();
 8005de4:	f7fa fd2e 	bl	8000844 <BMP180_start_measurment_pres_IT>
			LED_5_0;
 8005de8:	2200      	movs	r2, #0
 8005dea:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005dee:	4874      	ldr	r0, [pc, #464]	@ (8005fc0 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8005df0:	f008 fb8e 	bl	800e510 <HAL_GPIO_WritePin>
		}

		if(i == 36){
 8005df4:	4b71      	ldr	r3, [pc, #452]	@ (8005fbc <HAL_TIM_PeriodElapsedCallback+0x238>)
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	2b24      	cmp	r3, #36	@ 0x24
 8005dfa:	d10d      	bne.n	8005e18 <HAL_TIM_PeriodElapsedCallback+0x94>
			LED_5_1;
 8005dfc:	2201      	movs	r2, #1
 8005dfe:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005e02:	486f      	ldr	r0, [pc, #444]	@ (8005fc0 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8005e04:	f008 fb84 	bl	800e510 <HAL_GPIO_WritePin>
			HMC5883L_Get_Z_Start_IT();
 8005e08:	f7fb f964 	bl	80010d4 <HMC5883L_Get_Z_Start_IT>
			LED_5_0;
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005e12:	486b      	ldr	r0, [pc, #428]	@ (8005fc0 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8005e14:	f008 fb7c 	bl	800e510 <HAL_GPIO_WritePin>
		}

		if(i == 38){
 8005e18:	4b68      	ldr	r3, [pc, #416]	@ (8005fbc <HAL_TIM_PeriodElapsedCallback+0x238>)
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	2b26      	cmp	r3, #38	@ 0x26
 8005e1e:	d10e      	bne.n	8005e3e <HAL_TIM_PeriodElapsedCallback+0xba>
			LED_6_1;
 8005e20:	2201      	movs	r2, #1
 8005e22:	2108      	movs	r1, #8
 8005e24:	4867      	ldr	r0, [pc, #412]	@ (8005fc4 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8005e26:	f008 fb73 	bl	800e510 <HAL_GPIO_WritePin>
			nRF24_TX_Mode();
 8005e2a:	f7fc f895 	bl	8001f58 <nRF24_TX_Mode>
			nRF24_Rx_Mode = 0;
 8005e2e:	4b66      	ldr	r3, [pc, #408]	@ (8005fc8 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8005e30:	2200      	movs	r2, #0
 8005e32:	701a      	strb	r2, [r3, #0]
			LED_6_0;
 8005e34:	2200      	movs	r2, #0
 8005e36:	2108      	movs	r1, #8
 8005e38:	4862      	ldr	r0, [pc, #392]	@ (8005fc4 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8005e3a:	f008 fb69 	bl	800e510 <HAL_GPIO_WritePin>
		}
		if(i == 40){//5
 8005e3e:	4b5f      	ldr	r3, [pc, #380]	@ (8005fbc <HAL_TIM_PeriodElapsedCallback+0x238>)
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	2b28      	cmp	r3, #40	@ 0x28
 8005e44:	d14c      	bne.n	8005ee0 <HAL_TIM_PeriodElapsedCallback+0x15c>
			ampritude = startpres - pres;
 8005e46:	4b61      	ldr	r3, [pc, #388]	@ (8005fcc <HAL_TIM_PeriodElapsedCallback+0x248>)
 8005e48:	ed93 7a00 	vldr	s14, [r3]
 8005e4c:	4b60      	ldr	r3, [pc, #384]	@ (8005fd0 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8005e4e:	edd3 7a00 	vldr	s15, [r3]
 8005e52:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005e56:	4b5f      	ldr	r3, [pc, #380]	@ (8005fd4 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8005e58:	edc3 7a00 	vstr	s15, [r3]

			MYDRON.dronheight = (uint16_t)BMP180_GET_height();
 8005e5c:	f7fa ffca 	bl	8000df4 <BMP180_GET_height>
 8005e60:	eef0 7a40 	vmov.f32	s15, s0
 8005e64:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e68:	ee17 3a90 	vmov	r3, s15
 8005e6c:	b29b      	uxth	r3, r3
 8005e6e:	b21a      	sxth	r2, r3
 8005e70:	4b59      	ldr	r3, [pc, #356]	@ (8005fd8 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8005e72:	83da      	strh	r2, [r3, #30]
			convert_value_to_array(MYDRON.dronheight, TxData, 0, 3);
 8005e74:	4b58      	ldr	r3, [pc, #352]	@ (8005fd8 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8005e76:	f9b3 001e 	ldrsh.w	r0, [r3, #30]
 8005e7a:	2303      	movs	r3, #3
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	4957      	ldr	r1, [pc, #348]	@ (8005fdc <HAL_TIM_PeriodElapsedCallback+0x258>)
 8005e80:	f001 f919 	bl	80070b6 <convert_value_to_array>

			Get_batteryvalue();
 8005e84:	f7fe f840 	bl	8003f08 <Get_batteryvalue>

			convert_value_to_array(MYDRON.batterysize, TxData, 3, 6);
 8005e88:	4b53      	ldr	r3, [pc, #332]	@ (8005fd8 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8005e8a:	881b      	ldrh	r3, [r3, #0]
 8005e8c:	b218      	sxth	r0, r3
 8005e8e:	2306      	movs	r3, #6
 8005e90:	2203      	movs	r2, #3
 8005e92:	4952      	ldr	r1, [pc, #328]	@ (8005fdc <HAL_TIM_PeriodElapsedCallback+0x258>)
 8005e94:	f001 f90f 	bl	80070b6 <convert_value_to_array>

			for(int i = 0; i < 10; i++){
 8005e98:	2300      	movs	r3, #0
 8005e9a:	60fb      	str	r3, [r7, #12]
 8005e9c:	e00b      	b.n	8005eb6 <HAL_TIM_PeriodElapsedCallback+0x132>
				TxData[22+i] = Txcode[22+i];
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	f103 0216 	add.w	r2, r3, #22
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	3316      	adds	r3, #22
 8005ea8:	494d      	ldr	r1, [pc, #308]	@ (8005fe0 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8005eaa:	5c89      	ldrb	r1, [r1, r2]
 8005eac:	4a4b      	ldr	r2, [pc, #300]	@ (8005fdc <HAL_TIM_PeriodElapsedCallback+0x258>)
 8005eae:	54d1      	strb	r1, [r2, r3]
			for(int i = 0; i < 10; i++){
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	3301      	adds	r3, #1
 8005eb4:	60fb      	str	r3, [r7, #12]
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	2b09      	cmp	r3, #9
 8005eba:	ddf0      	ble.n	8005e9e <HAL_TIM_PeriodElapsedCallback+0x11a>
			}
			LED_6_1;
 8005ebc:	2201      	movs	r2, #1
 8005ebe:	2108      	movs	r1, #8
 8005ec0:	4840      	ldr	r0, [pc, #256]	@ (8005fc4 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8005ec2:	f008 fb25 	bl	800e510 <HAL_GPIO_WritePin>
			nRF24_WriteTXPayload(TxData);
 8005ec6:	4845      	ldr	r0, [pc, #276]	@ (8005fdc <HAL_TIM_PeriodElapsedCallback+0x258>)
 8005ec8:	f7fc fb04 	bl	80024d4 <nRF24_WriteTXPayload>
			NRF24_CE_HIGH;
 8005ecc:	2201      	movs	r2, #1
 8005ece:	2140      	movs	r1, #64	@ 0x40
 8005ed0:	4844      	ldr	r0, [pc, #272]	@ (8005fe4 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8005ed2:	f008 fb1d 	bl	800e510 <HAL_GPIO_WritePin>
			LED_6_0;
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	2108      	movs	r1, #8
 8005eda:	483a      	ldr	r0, [pc, #232]	@ (8005fc4 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8005edc:	f008 fb18 	bl	800e510 <HAL_GPIO_WritePin>
		}
		if(i == 41){
 8005ee0:	4b36      	ldr	r3, [pc, #216]	@ (8005fbc <HAL_TIM_PeriodElapsedCallback+0x238>)
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	2b29      	cmp	r3, #41	@ 0x29
 8005ee6:	d104      	bne.n	8005ef2 <HAL_TIM_PeriodElapsedCallback+0x16e>
			NRF24_CE_LOW;
 8005ee8:	2200      	movs	r2, #0
 8005eea:	2140      	movs	r1, #64	@ 0x40
 8005eec:	483d      	ldr	r0, [pc, #244]	@ (8005fe4 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8005eee:	f008 fb0f 	bl	800e510 <HAL_GPIO_WritePin>
		}
		if(i >= 42){
 8005ef2:	4b32      	ldr	r3, [pc, #200]	@ (8005fbc <HAL_TIM_PeriodElapsedCallback+0x238>)
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	2b29      	cmp	r3, #41	@ 0x29
 8005ef8:	dd16      	ble.n	8005f28 <HAL_TIM_PeriodElapsedCallback+0x1a4>
			if(nRF24_Rx_Mode != 1){
 8005efa:	4b33      	ldr	r3, [pc, #204]	@ (8005fc8 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8005efc:	781b      	ldrb	r3, [r3, #0]
 8005efe:	2b01      	cmp	r3, #1
 8005f00:	d012      	beq.n	8005f28 <HAL_TIM_PeriodElapsedCallback+0x1a4>
				if(((nRF24_ReadStatus() & (1<<NRF24_MAX_RT)) || (nRF24_ReadStatus() & (1<<NRF24_TX_DS)))){
 8005f02:	f7fc f8aa 	bl	800205a <nRF24_ReadStatus>
 8005f06:	4603      	mov	r3, r0
 8005f08:	f003 0310 	and.w	r3, r3, #16
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d106      	bne.n	8005f1e <HAL_TIM_PeriodElapsedCallback+0x19a>
 8005f10:	f7fc f8a3 	bl	800205a <nRF24_ReadStatus>
 8005f14:	4603      	mov	r3, r0
 8005f16:	f003 0320 	and.w	r3, r3, #32
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d004      	beq.n	8005f28 <HAL_TIM_PeriodElapsedCallback+0x1a4>
					nRF24_RX_Mode();
 8005f1e:	f7fb ffef 	bl	8001f00 <nRF24_RX_Mode>
					nRF24_Rx_Mode = 1;
 8005f22:	4b29      	ldr	r3, [pc, #164]	@ (8005fc8 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8005f24:	2201      	movs	r2, #1
 8005f26:	701a      	strb	r2, [r3, #0]
				}
			}
		}

		LED_5_1;
 8005f28:	2201      	movs	r2, #1
 8005f2a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005f2e:	4824      	ldr	r0, [pc, #144]	@ (8005fc0 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8005f30:	f008 faee 	bl	800e510 <HAL_GPIO_WritePin>
		MPU6050_GET_ACCANDGYR_CALANDSCL_IT();
 8005f34:	f7fb fc0c 	bl	8001750 <MPU6050_GET_ACCANDGYR_CALANDSCL_IT>
		LED_5_0;
 8005f38:	2200      	movs	r2, #0
 8005f3a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005f3e:	4820      	ldr	r0, [pc, #128]	@ (8005fc0 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8005f40:	f008 fae6 	bl	800e510 <HAL_GPIO_WritePin>

		if(i == 100){
 8005f44:	4b1d      	ldr	r3, [pc, #116]	@ (8005fbc <HAL_TIM_PeriodElapsedCallback+0x238>)
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	2b64      	cmp	r3, #100	@ 0x64
 8005f4a:	d103      	bne.n	8005f54 <HAL_TIM_PeriodElapsedCallback+0x1d0>
			i = 0;
 8005f4c:	4b1b      	ldr	r3, [pc, #108]	@ (8005fbc <HAL_TIM_PeriodElapsedCallback+0x238>)
 8005f4e:	2200      	movs	r2, #0
 8005f50:	601a      	str	r2, [r3, #0]
 8005f52:	e004      	b.n	8005f5e <HAL_TIM_PeriodElapsedCallback+0x1da>
		}
		else{
			i++;
 8005f54:	4b19      	ldr	r3, [pc, #100]	@ (8005fbc <HAL_TIM_PeriodElapsedCallback+0x238>)
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	3301      	adds	r3, #1
 8005f5a:	4a18      	ldr	r2, [pc, #96]	@ (8005fbc <HAL_TIM_PeriodElapsedCallback+0x238>)
 8005f5c:	6013      	str	r3, [r2, #0]
		}
		if(NRF_TIM_Inte >= 1000){
 8005f5e:	4b16      	ldr	r3, [pc, #88]	@ (8005fb8 <HAL_TIM_PeriodElapsedCallback+0x234>)
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005f66:	d308      	bcc.n	8005f7a <HAL_TIM_PeriodElapsedCallback+0x1f6>
			LED_R_1;
 8005f68:	2201      	movs	r2, #1
 8005f6a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005f6e:	481d      	ldr	r0, [pc, #116]	@ (8005fe4 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8005f70:	f008 face 	bl	800e510 <HAL_GPIO_WritePin>
			MYDRON.dron_status.Connection = DRON_DISCONNECTED;
 8005f74:	4b18      	ldr	r3, [pc, #96]	@ (8005fd8 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8005f76:	2202      	movs	r2, #2
 8005f78:	825a      	strh	r2, [r3, #18]
		}
		if(MYDRON.dron_status.Connection == DRON_DISCONNECTED){
 8005f7a:	4b17      	ldr	r3, [pc, #92]	@ (8005fd8 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8005f7c:	8a5b      	ldrh	r3, [r3, #18]
 8005f7e:	2b02      	cmp	r3, #2
 8005f80:	d110      	bne.n	8005fa4 <HAL_TIM_PeriodElapsedCallback+0x220>
			wanted_rool = 0;
 8005f82:	4b19      	ldr	r3, [pc, #100]	@ (8005fe8 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8005f84:	f04f 0200 	mov.w	r2, #0
 8005f88:	601a      	str	r2, [r3, #0]
			wanted_pitch = 0;
 8005f8a:	4b18      	ldr	r3, [pc, #96]	@ (8005fec <HAL_TIM_PeriodElapsedCallback+0x268>)
 8005f8c:	f04f 0200 	mov.w	r2, #0
 8005f90:	601a      	str	r2, [r3, #0]
			wanted_yaw = 0;
 8005f92:	4b17      	ldr	r3, [pc, #92]	@ (8005ff0 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8005f94:	f04f 0200 	mov.w	r2, #0
 8005f98:	601a      	str	r2, [r3, #0]
			wanted_thrust = DRON_SLOWFALING;
 8005f9a:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8005f9e:	b21a      	sxth	r2, r3
 8005fa0:	4b14      	ldr	r3, [pc, #80]	@ (8005ff4 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8005fa2:	801a      	strh	r2, [r3, #0]
		}
	}
}
 8005fa4:	bf00      	nop
 8005fa6:	3710      	adds	r7, #16
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	bd80      	pop	{r7, pc}
 8005fac:	240003cc 	.word	0x240003cc
 8005fb0:	00000054 	.word	0x00000054
 8005fb4:	00000058 	.word	0x00000058
 8005fb8:	00000060 	.word	0x00000060
 8005fbc:	000041b8 	.word	0x000041b8
 8005fc0:	58020000 	.word	0x58020000
 8005fc4:	58021000 	.word	0x58021000
 8005fc8:	00000154 	.word	0x00000154
 8005fcc:	000000cc 	.word	0x000000cc
 8005fd0:	000000c8 	.word	0x000000c8
 8005fd4:	000000d0 	.word	0x000000d0
 8005fd8:	00000158 	.word	0x00000158
 8005fdc:	00000114 	.word	0x00000114
 8005fe0:	000000f4 	.word	0x000000f4
 8005fe4:	58020400 	.word	0x58020400
 8005fe8:	0000404c 	.word	0x0000404c
 8005fec:	00004048 	.word	0x00004048
 8005ff0:	00004050 	.word	0x00004050
 8005ff4:	0000403c 	.word	0x0000403c

08005ff8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b084      	sub	sp, #16
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	4603      	mov	r3, r0
 8006000:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin == GPIO_PIN_15)
 8006002:	88fb      	ldrh	r3, [r7, #6]
 8006004:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006008:	f040 812c 	bne.w	8006264 <HAL_GPIO_EXTI_Callback+0x26c>
	{
		if(STARTUP == 0){
 800600c:	4b97      	ldr	r3, [pc, #604]	@ (800626c <HAL_GPIO_EXTI_Callback+0x274>)
 800600e:	781b      	ldrb	r3, [r3, #0]
 8006010:	2b00      	cmp	r3, #0
 8006012:	f040 8127 	bne.w	8006264 <HAL_GPIO_EXTI_Callback+0x26c>
			LED_6_1;
 8006016:	2201      	movs	r2, #1
 8006018:	2108      	movs	r1, #8
 800601a:	4895      	ldr	r0, [pc, #596]	@ (8006270 <HAL_GPIO_EXTI_Callback+0x278>)
 800601c:	f008 fa78 	bl	800e510 <HAL_GPIO_WritePin>
			nRF24_ReadRXPaylaod(RxData);
 8006020:	4894      	ldr	r0, [pc, #592]	@ (8006274 <HAL_GPIO_EXTI_Callback+0x27c>)
 8006022:	f7fc fa8d 	bl	8002540 <nRF24_ReadRXPaylaod>
			LED_6_0;
 8006026:	2200      	movs	r2, #0
 8006028:	2108      	movs	r1, #8
 800602a:	4891      	ldr	r0, [pc, #580]	@ (8006270 <HAL_GPIO_EXTI_Callback+0x278>)
 800602c:	f008 fa70 	bl	800e510 <HAL_GPIO_WritePin>


			LED_Y_1;
 8006030:	2201      	movs	r2, #1
 8006032:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8006036:	4890      	ldr	r0, [pc, #576]	@ (8006278 <HAL_GPIO_EXTI_Callback+0x280>)
 8006038:	f008 fa6a 	bl	800e510 <HAL_GPIO_WritePin>

			loopnum = 0;
 800603c:	4b8f      	ldr	r3, [pc, #572]	@ (800627c <HAL_GPIO_EXTI_Callback+0x284>)
 800603e:	2200      	movs	r2, #0
 8006040:	601a      	str	r2, [r3, #0]
			for(int abc = 0; abc < 10; abc++){//sprawdzenia poprawnosci kodu nadanego
 8006042:	2300      	movs	r3, #0
 8006044:	60fb      	str	r3, [r7, #12]
 8006046:	e011      	b.n	800606c <HAL_GPIO_EXTI_Callback+0x74>
				if(RxData[12+abc] == Rxcode[abc+12]){
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	330c      	adds	r3, #12
 800604c:	4a89      	ldr	r2, [pc, #548]	@ (8006274 <HAL_GPIO_EXTI_Callback+0x27c>)
 800604e:	5cd2      	ldrb	r2, [r2, r3]
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	330c      	adds	r3, #12
 8006054:	498a      	ldr	r1, [pc, #552]	@ (8006280 <HAL_GPIO_EXTI_Callback+0x288>)
 8006056:	5ccb      	ldrb	r3, [r1, r3]
 8006058:	429a      	cmp	r2, r3
 800605a:	d104      	bne.n	8006066 <HAL_GPIO_EXTI_Callback+0x6e>
					loopnum++;
 800605c:	4b87      	ldr	r3, [pc, #540]	@ (800627c <HAL_GPIO_EXTI_Callback+0x284>)
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	3301      	adds	r3, #1
 8006062:	4a86      	ldr	r2, [pc, #536]	@ (800627c <HAL_GPIO_EXTI_Callback+0x284>)
 8006064:	6013      	str	r3, [r2, #0]
			for(int abc = 0; abc < 10; abc++){//sprawdzenia poprawnosci kodu nadanego
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	3301      	adds	r3, #1
 800606a:	60fb      	str	r3, [r7, #12]
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	2b09      	cmp	r3, #9
 8006070:	ddea      	ble.n	8006048 <HAL_GPIO_EXTI_Callback+0x50>
				}
			}

			if(loopnum == 10){
 8006072:	4b82      	ldr	r3, [pc, #520]	@ (800627c <HAL_GPIO_EXTI_Callback+0x284>)
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	2b0a      	cmp	r3, #10
 8006078:	f040 80e3 	bne.w	8006242 <HAL_GPIO_EXTI_Callback+0x24a>
				convert_array_to_value(RxData, &wanted_pitch_v, 0, 2);//pitch
 800607c:	2302      	movs	r3, #2
 800607e:	2200      	movs	r2, #0
 8006080:	4980      	ldr	r1, [pc, #512]	@ (8006284 <HAL_GPIO_EXTI_Callback+0x28c>)
 8006082:	487c      	ldr	r0, [pc, #496]	@ (8006274 <HAL_GPIO_EXTI_Callback+0x27c>)
 8006084:	f000 ffc6 	bl	8007014 <convert_array_to_value>
				convert_array_to_value(RxData, &wanted_roll_v, 3, 5);// pid_angular_rate_rool wanted_roll_v
 8006088:	2305      	movs	r3, #5
 800608a:	2203      	movs	r2, #3
 800608c:	497e      	ldr	r1, [pc, #504]	@ (8006288 <HAL_GPIO_EXTI_Callback+0x290>)
 800608e:	4879      	ldr	r0, [pc, #484]	@ (8006274 <HAL_GPIO_EXTI_Callback+0x27c>)
 8006090:	f000 ffc0 	bl	8007014 <convert_array_to_value>
				if(wobble_strenght == 1){
 8006094:	4b7d      	ldr	r3, [pc, #500]	@ (800628c <HAL_GPIO_EXTI_Callback+0x294>)
 8006096:	edd3 7a00 	vldr	s15, [r3]
 800609a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800609e:	eef4 7a47 	vcmp.f32	s15, s14
 80060a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060a6:	d105      	bne.n	80060b4 <HAL_GPIO_EXTI_Callback+0xbc>
					convert_array_to_value(RxData, &wanted_thrust, 6, 8);//
 80060a8:	2308      	movs	r3, #8
 80060aa:	2206      	movs	r2, #6
 80060ac:	4978      	ldr	r1, [pc, #480]	@ (8006290 <HAL_GPIO_EXTI_Callback+0x298>)
 80060ae:	4871      	ldr	r0, [pc, #452]	@ (8006274 <HAL_GPIO_EXTI_Callback+0x27c>)
 80060b0:	f000 ffb0 	bl	8007014 <convert_array_to_value>
				}
				convert_array_to_value(RxData, &wanted_yaw_v, 9, 11);//
 80060b4:	230b      	movs	r3, #11
 80060b6:	2209      	movs	r2, #9
 80060b8:	4976      	ldr	r1, [pc, #472]	@ (8006294 <HAL_GPIO_EXTI_Callback+0x29c>)
 80060ba:	486e      	ldr	r0, [pc, #440]	@ (8006274 <HAL_GPIO_EXTI_Callback+0x27c>)
 80060bc:	f000 ffaa 	bl	8007014 <convert_array_to_value>
				MYDRON.dron_status.Connection = DRON_CONNECTED;
 80060c0:	4b75      	ldr	r3, [pc, #468]	@ (8006298 <HAL_GPIO_EXTI_Callback+0x2a0>)
 80060c2:	2201      	movs	r2, #1
 80060c4:	825a      	strh	r2, [r3, #18]

				if(RxData[23] == 1){
 80060c6:	4b6b      	ldr	r3, [pc, #428]	@ (8006274 <HAL_GPIO_EXTI_Callback+0x27c>)
 80060c8:	7ddb      	ldrb	r3, [r3, #23]
 80060ca:	2b01      	cmp	r3, #1
 80060cc:	d11b      	bne.n	8006106 <HAL_GPIO_EXTI_Callback+0x10e>
					ESC_POWER_1;
 80060ce:	2201      	movs	r2, #1
 80060d0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80060d4:	4871      	ldr	r0, [pc, #452]	@ (800629c <HAL_GPIO_EXTI_Callback+0x2a4>)
 80060d6:	f008 fa1b 	bl	800e510 <HAL_GPIO_WritePin>
					LED_R_1;
 80060da:	2201      	movs	r2, #1
 80060dc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80060e0:	4865      	ldr	r0, [pc, #404]	@ (8006278 <HAL_GPIO_EXTI_Callback+0x280>)
 80060e2:	f008 fa15 	bl	800e510 <HAL_GPIO_WritePin>
					if(SD_enable_Flag == 1){
 80060e6:	4b6e      	ldr	r3, [pc, #440]	@ (80062a0 <HAL_GPIO_EXTI_Callback+0x2a8>)
 80060e8:	781b      	ldrb	r3, [r3, #0]
 80060ea:	2b01      	cmp	r3, #1
 80060ec:	d10b      	bne.n	8006106 <HAL_GPIO_EXTI_Callback+0x10e>
						f_close(&fil);
 80060ee:	486d      	ldr	r0, [pc, #436]	@ (80062a4 <HAL_GPIO_EXTI_Callback+0x2ac>)
 80060f0:	f017 fc90 	bl	801da14 <f_close>
						fresult = f_mount(NULL, "/", 1);
 80060f4:	2201      	movs	r2, #1
 80060f6:	496c      	ldr	r1, [pc, #432]	@ (80062a8 <HAL_GPIO_EXTI_Callback+0x2b0>)
 80060f8:	2000      	movs	r0, #0
 80060fa:	f017 f86b 	bl	801d1d4 <f_mount>
 80060fe:	4603      	mov	r3, r0
 8006100:	461a      	mov	r2, r3
 8006102:	4b6a      	ldr	r3, [pc, #424]	@ (80062ac <HAL_GPIO_EXTI_Callback+0x2b4>)
 8006104:	701a      	strb	r2, [r3, #0]
					}

				}

				if(wanted_thrust == 9999){
 8006106:	4b62      	ldr	r3, [pc, #392]	@ (8006290 <HAL_GPIO_EXTI_Callback+0x298>)
 8006108:	f9b3 3000 	ldrsh.w	r3, [r3]
 800610c:	f242 720f 	movw	r2, #9999	@ 0x270f
 8006110:	4293      	cmp	r3, r2
 8006112:	d103      	bne.n	800611c <HAL_GPIO_EXTI_Callback+0x124>
					MYDRON.THRUST_flag = THRUST_MAX;
 8006114:	4b60      	ldr	r3, [pc, #384]	@ (8006298 <HAL_GPIO_EXTI_Callback+0x2a0>)
 8006116:	2210      	movs	r2, #16
 8006118:	f883 2020 	strb.w	r2, [r3, #32]
	  			}
				wanted_thrust = wanted_thrust * 20;
 800611c:	4b5c      	ldr	r3, [pc, #368]	@ (8006290 <HAL_GPIO_EXTI_Callback+0x298>)
 800611e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006122:	b29b      	uxth	r3, r3
 8006124:	461a      	mov	r2, r3
 8006126:	0092      	lsls	r2, r2, #2
 8006128:	4413      	add	r3, r2
 800612a:	009b      	lsls	r3, r3, #2
 800612c:	b29b      	uxth	r3, r3
 800612e:	b21a      	sxth	r2, r3
 8006130:	4b57      	ldr	r3, [pc, #348]	@ (8006290 <HAL_GPIO_EXTI_Callback+0x298>)
 8006132:	801a      	strh	r2, [r3, #0]
				wanted_thrust = wanted_thrust - 10000;
 8006134:	4b56      	ldr	r3, [pc, #344]	@ (8006290 <HAL_GPIO_EXTI_Callback+0x298>)
 8006136:	f9b3 3000 	ldrsh.w	r3, [r3]
 800613a:	b29a      	uxth	r2, r3
 800613c:	4b5c      	ldr	r3, [pc, #368]	@ (80062b0 <HAL_GPIO_EXTI_Callback+0x2b8>)
 800613e:	4413      	add	r3, r2
 8006140:	b29b      	uxth	r3, r3
 8006142:	b21a      	sxth	r2, r3
 8006144:	4b52      	ldr	r3, [pc, #328]	@ (8006290 <HAL_GPIO_EXTI_Callback+0x298>)
 8006146:	801a      	strh	r2, [r3, #0]
				if(wanted_thrust < 0){
 8006148:	4b51      	ldr	r3, [pc, #324]	@ (8006290 <HAL_GPIO_EXTI_Callback+0x298>)
 800614a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800614e:	2b00      	cmp	r3, #0
 8006150:	da02      	bge.n	8006158 <HAL_GPIO_EXTI_Callback+0x160>
					wanted_thrust = 0;
 8006152:	4b4f      	ldr	r3, [pc, #316]	@ (8006290 <HAL_GPIO_EXTI_Callback+0x298>)
 8006154:	2200      	movs	r2, #0
 8006156:	801a      	strh	r2, [r3, #0]
	  			}

				wanted_rool_rx = (wanted_roll_v - 500)*wanted_rool_factro;//wanted_rool_rx (-90 <-> 90)
 8006158:	4b4b      	ldr	r3, [pc, #300]	@ (8006288 <HAL_GPIO_EXTI_Callback+0x290>)
 800615a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800615e:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8006162:	ee07 3a90 	vmov	s15, r3
 8006166:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800616a:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 80062b4 <HAL_GPIO_EXTI_Callback+0x2bc>
 800616e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006172:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006176:	ee17 3a90 	vmov	r3, s15
 800617a:	b21a      	sxth	r2, r3
 800617c:	4b4e      	ldr	r3, [pc, #312]	@ (80062b8 <HAL_GPIO_EXTI_Callback+0x2c0>)
 800617e:	801a      	strh	r2, [r3, #0]
				wanted_pitch_rx = (wanted_pitch_v - 500)*wanted_pitch_factro;// (-450 <-> 450)
 8006180:	4b40      	ldr	r3, [pc, #256]	@ (8006284 <HAL_GPIO_EXTI_Callback+0x28c>)
 8006182:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006186:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 800618a:	ee07 3a90 	vmov	s15, r3
 800618e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006192:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 80062bc <HAL_GPIO_EXTI_Callback+0x2c4>
 8006196:	ee67 7a87 	vmul.f32	s15, s15, s14
 800619a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800619e:	ee17 3a90 	vmov	r3, s15
 80061a2:	b21a      	sxth	r2, r3
 80061a4:	4b46      	ldr	r3, [pc, #280]	@ (80062c0 <HAL_GPIO_EXTI_Callback+0x2c8>)
 80061a6:	801a      	strh	r2, [r3, #0]
				wanted_yaw_rx = (wanted_yaw_v - 500)*wanted_yaw_factro;
 80061a8:	4b3a      	ldr	r3, [pc, #232]	@ (8006294 <HAL_GPIO_EXTI_Callback+0x29c>)
 80061aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80061ae:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 80061b2:	ee07 3a90 	vmov	s15, r3
 80061b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80061ba:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 80062c4 <HAL_GPIO_EXTI_Callback+0x2cc>
 80061be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80061c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80061c6:	ee17 3a90 	vmov	r3, s15
 80061ca:	b21a      	sxth	r2, r3
 80061cc:	4b3e      	ldr	r3, [pc, #248]	@ (80062c8 <HAL_GPIO_EXTI_Callback+0x2d0>)
 80061ce:	801a      	strh	r2, [r3, #0]

				if(wanted_rool_rx >= 30){
 80061d0:	4b39      	ldr	r3, [pc, #228]	@ (80062b8 <HAL_GPIO_EXTI_Callback+0x2c0>)
 80061d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80061d6:	2b1d      	cmp	r3, #29
 80061d8:	dd02      	ble.n	80061e0 <HAL_GPIO_EXTI_Callback+0x1e8>
					wanted_rool_rx = 30;
 80061da:	4b37      	ldr	r3, [pc, #220]	@ (80062b8 <HAL_GPIO_EXTI_Callback+0x2c0>)
 80061dc:	221e      	movs	r2, #30
 80061de:	801a      	strh	r2, [r3, #0]
				}
				if(wanted_rool_rx <= -30){
 80061e0:	4b35      	ldr	r3, [pc, #212]	@ (80062b8 <HAL_GPIO_EXTI_Callback+0x2c0>)
 80061e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80061e6:	f113 0f1d 	cmn.w	r3, #29
 80061ea:	da03      	bge.n	80061f4 <HAL_GPIO_EXTI_Callback+0x1fc>
					wanted_rool_rx = -30;
 80061ec:	4b32      	ldr	r3, [pc, #200]	@ (80062b8 <HAL_GPIO_EXTI_Callback+0x2c0>)
 80061ee:	f64f 72e2 	movw	r2, #65506	@ 0xffe2
 80061f2:	801a      	strh	r2, [r3, #0]
				}
				if(wanted_pitch_rx >= 30){
 80061f4:	4b32      	ldr	r3, [pc, #200]	@ (80062c0 <HAL_GPIO_EXTI_Callback+0x2c8>)
 80061f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80061fa:	2b1d      	cmp	r3, #29
 80061fc:	dd02      	ble.n	8006204 <HAL_GPIO_EXTI_Callback+0x20c>
					wanted_pitch_rx = 30;
 80061fe:	4b30      	ldr	r3, [pc, #192]	@ (80062c0 <HAL_GPIO_EXTI_Callback+0x2c8>)
 8006200:	221e      	movs	r2, #30
 8006202:	801a      	strh	r2, [r3, #0]
				}
				if(wanted_pitch_rx <= -30){
 8006204:	4b2e      	ldr	r3, [pc, #184]	@ (80062c0 <HAL_GPIO_EXTI_Callback+0x2c8>)
 8006206:	f9b3 3000 	ldrsh.w	r3, [r3]
 800620a:	f113 0f1d 	cmn.w	r3, #29
 800620e:	da03      	bge.n	8006218 <HAL_GPIO_EXTI_Callback+0x220>
					wanted_pitch_rx = -30;
 8006210:	4b2b      	ldr	r3, [pc, #172]	@ (80062c0 <HAL_GPIO_EXTI_Callback+0x2c8>)
 8006212:	f64f 72e2 	movw	r2, #65506	@ 0xffe2
 8006216:	801a      	strh	r2, [r3, #0]
				}
				if(wanted_yaw_rx >= 30){
 8006218:	4b2b      	ldr	r3, [pc, #172]	@ (80062c8 <HAL_GPIO_EXTI_Callback+0x2d0>)
 800621a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800621e:	2b1d      	cmp	r3, #29
 8006220:	dd02      	ble.n	8006228 <HAL_GPIO_EXTI_Callback+0x230>
					wanted_yaw_rx = 30;
 8006222:	4b29      	ldr	r3, [pc, #164]	@ (80062c8 <HAL_GPIO_EXTI_Callback+0x2d0>)
 8006224:	221e      	movs	r2, #30
 8006226:	801a      	strh	r2, [r3, #0]
				}
				if(wanted_yaw_rx <= -30){
 8006228:	4b27      	ldr	r3, [pc, #156]	@ (80062c8 <HAL_GPIO_EXTI_Callback+0x2d0>)
 800622a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800622e:	f113 0f1d 	cmn.w	r3, #29
 8006232:	da03      	bge.n	800623c <HAL_GPIO_EXTI_Callback+0x244>
					wanted_yaw_rx = -30;
 8006234:	4b24      	ldr	r3, [pc, #144]	@ (80062c8 <HAL_GPIO_EXTI_Callback+0x2d0>)
 8006236:	f64f 72e2 	movw	r2, #65506	@ 0xffe2
 800623a:	801a      	strh	r2, [r3, #0]
				}


				NRF_TIM_Inte = 0;
 800623c:	4b23      	ldr	r3, [pc, #140]	@ (80062cc <HAL_GPIO_EXTI_Callback+0x2d4>)
 800623e:	2200      	movs	r2, #0
 8006240:	601a      	str	r2, [r3, #0]
	  		}

	  			if(loopnum > 0 && loopnum < 10){
 8006242:	4b0e      	ldr	r3, [pc, #56]	@ (800627c <HAL_GPIO_EXTI_Callback+0x284>)
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	2b00      	cmp	r3, #0
 8006248:	dd06      	ble.n	8006258 <HAL_GPIO_EXTI_Callback+0x260>
 800624a:	4b0c      	ldr	r3, [pc, #48]	@ (800627c <HAL_GPIO_EXTI_Callback+0x284>)
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	2b09      	cmp	r3, #9
 8006250:	dc02      	bgt.n	8006258 <HAL_GPIO_EXTI_Callback+0x260>
	  				MYDRON.dron_status.Connection = DRON_CONNECTION_ERROR;
 8006252:	4b11      	ldr	r3, [pc, #68]	@ (8006298 <HAL_GPIO_EXTI_Callback+0x2a0>)
 8006254:	2203      	movs	r2, #3
 8006256:	825a      	strh	r2, [r3, #18]
	  			}


	  			LED_Y_0;
 8006258:	2200      	movs	r2, #0
 800625a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800625e:	4806      	ldr	r0, [pc, #24]	@ (8006278 <HAL_GPIO_EXTI_Callback+0x280>)
 8006260:	f008 f956 	bl	800e510 <HAL_GPIO_WritePin>
		}
	}
}
 8006264:	bf00      	nop
 8006266:	3710      	adds	r7, #16
 8006268:	46bd      	mov	sp, r7
 800626a:	bd80      	pop	{r7, pc}
 800626c:	0000005c 	.word	0x0000005c
 8006270:	58021000 	.word	0x58021000
 8006274:	000000d4 	.word	0x000000d4
 8006278:	58020400 	.word	0x58020400
 800627c:	000041bc 	.word	0x000041bc
 8006280:	00000134 	.word	0x00000134
 8006284:	000041c2 	.word	0x000041c2
 8006288:	000041c0 	.word	0x000041c0
 800628c:	000041b0 	.word	0x000041b0
 8006290:	0000403c 	.word	0x0000403c
 8006294:	000041c4 	.word	0x000041c4
 8006298:	00000158 	.word	0x00000158
 800629c:	58021800 	.word	0x58021800
 80062a0:	000041ac 	.word	0x000041ac
 80062a4:	24001f10 	.word	0x24001f10
 80062a8:	0801e850 	.word	0x0801e850
 80062ac:	24001f0c 	.word	0x24001f0c
 80062b0:	ffffd8f0 	.word	0xffffd8f0
 80062b4:	3f266666 	.word	0x3f266666
 80062b8:	0000402a 	.word	0x0000402a
 80062bc:	3f28f5c3 	.word	0x3f28f5c3
 80062c0:	00004028 	.word	0x00004028
 80062c4:	3f19999a 	.word	0x3f19999a
 80062c8:	0000402c 	.word	0x0000402c
 80062cc:	00000060 	.word	0x00000060

080062d0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)//pobieranie znakw z uart
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b084      	sub	sp, #16
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
	words[command_ch_num] = Received;
 80062d8:	4b24      	ldr	r3, [pc, #144]	@ (800636c <HAL_UART_RxCpltCallback+0x9c>)
 80062da:	781b      	ldrb	r3, [r3, #0]
 80062dc:	461a      	mov	r2, r3
 80062de:	4b24      	ldr	r3, [pc, #144]	@ (8006370 <HAL_UART_RxCpltCallback+0xa0>)
 80062e0:	7819      	ldrb	r1, [r3, #0]
 80062e2:	4b24      	ldr	r3, [pc, #144]	@ (8006374 <HAL_UART_RxCpltCallback+0xa4>)
 80062e4:	5499      	strb	r1, [r3, r2]

	if(words[command_ch_num] == '\r')
 80062e6:	4b21      	ldr	r3, [pc, #132]	@ (800636c <HAL_UART_RxCpltCallback+0x9c>)
 80062e8:	781b      	ldrb	r3, [r3, #0]
 80062ea:	461a      	mov	r2, r3
 80062ec:	4b21      	ldr	r3, [pc, #132]	@ (8006374 <HAL_UART_RxCpltCallback+0xa4>)
 80062ee:	5c9b      	ldrb	r3, [r3, r2]
 80062f0:	2b0d      	cmp	r3, #13
 80062f2:	d11a      	bne.n	800632a <HAL_UART_RxCpltCallback+0x5a>
	{
		char Y = '\n';
 80062f4:	230a      	movs	r3, #10
 80062f6:	73fb      	strb	r3, [r7, #15]
		HAL_UART_Transmit(&huart1, (uint8_t *)&Y, 1, 100);
 80062f8:	f107 010f 	add.w	r1, r7, #15
 80062fc:	2364      	movs	r3, #100	@ 0x64
 80062fe:	2201      	movs	r2, #1
 8006300:	481d      	ldr	r0, [pc, #116]	@ (8006378 <HAL_UART_RxCpltCallback+0xa8>)
 8006302:	f011 fcb3 	bl	8017c6c <HAL_UART_Transmit>
		Y = '\r';
 8006306:	230d      	movs	r3, #13
 8006308:	73fb      	strb	r3, [r7, #15]
		HAL_UART_Transmit(&huart1, (uint8_t *)&Y, 1, 100);
 800630a:	f107 010f 	add.w	r1, r7, #15
 800630e:	2364      	movs	r3, #100	@ 0x64
 8006310:	2201      	movs	r2, #1
 8006312:	4819      	ldr	r0, [pc, #100]	@ (8006378 <HAL_UART_RxCpltCallback+0xa8>)
 8006314:	f011 fcaa 	bl	8017c6c <HAL_UART_Transmit>
		words[command_ch_num] = 0;
 8006318:	4b14      	ldr	r3, [pc, #80]	@ (800636c <HAL_UART_RxCpltCallback+0x9c>)
 800631a:	781b      	ldrb	r3, [r3, #0]
 800631c:	461a      	mov	r2, r3
 800631e:	4b15      	ldr	r3, [pc, #84]	@ (8006374 <HAL_UART_RxCpltCallback+0xa4>)
 8006320:	2100      	movs	r1, #0
 8006322:	5499      	strb	r1, [r3, r2]
		commandready = 1;
 8006324:	4b15      	ldr	r3, [pc, #84]	@ (800637c <HAL_UART_RxCpltCallback+0xac>)
 8006326:	2201      	movs	r2, #1
 8006328:	701a      	strb	r2, [r3, #0]
	}

	HAL_UART_Transmit_IT(&huart1, (uint8_t *)&words[command_ch_num], 1);
 800632a:	4b10      	ldr	r3, [pc, #64]	@ (800636c <HAL_UART_RxCpltCallback+0x9c>)
 800632c:	781b      	ldrb	r3, [r3, #0]
 800632e:	461a      	mov	r2, r3
 8006330:	4b10      	ldr	r3, [pc, #64]	@ (8006374 <HAL_UART_RxCpltCallback+0xa4>)
 8006332:	4413      	add	r3, r2
 8006334:	2201      	movs	r2, #1
 8006336:	4619      	mov	r1, r3
 8006338:	480f      	ldr	r0, [pc, #60]	@ (8006378 <HAL_UART_RxCpltCallback+0xa8>)
 800633a:	f011 fd25 	bl	8017d88 <HAL_UART_Transmit_IT>
	HAL_UART_Receive_IT(&huart1, &Received, 1);
 800633e:	2201      	movs	r2, #1
 8006340:	490b      	ldr	r1, [pc, #44]	@ (8006370 <HAL_UART_RxCpltCallback+0xa0>)
 8006342:	480d      	ldr	r0, [pc, #52]	@ (8006378 <HAL_UART_RxCpltCallback+0xa8>)
 8006344:	f011 fdb4 	bl	8017eb0 <HAL_UART_Receive_IT>
	command_ch_num++;
 8006348:	4b08      	ldr	r3, [pc, #32]	@ (800636c <HAL_UART_RxCpltCallback+0x9c>)
 800634a:	781b      	ldrb	r3, [r3, #0]
 800634c:	3301      	adds	r3, #1
 800634e:	b2da      	uxtb	r2, r3
 8006350:	4b06      	ldr	r3, [pc, #24]	@ (800636c <HAL_UART_RxCpltCallback+0x9c>)
 8006352:	701a      	strb	r2, [r3, #0]

	if(commandready == 1)
 8006354:	4b09      	ldr	r3, [pc, #36]	@ (800637c <HAL_UART_RxCpltCallback+0xac>)
 8006356:	781b      	ldrb	r3, [r3, #0]
 8006358:	2b01      	cmp	r3, #1
 800635a:	d102      	bne.n	8006362 <HAL_UART_RxCpltCallback+0x92>
	{
		command_ch_num = 0;
 800635c:	4b03      	ldr	r3, [pc, #12]	@ (800636c <HAL_UART_RxCpltCallback+0x9c>)
 800635e:	2200      	movs	r2, #0
 8006360:	701a      	strb	r2, [r3, #0]
	}
}
 8006362:	bf00      	nop
 8006364:	3710      	adds	r7, #16
 8006366:	46bd      	mov	sp, r7
 8006368:	bd80      	pop	{r7, pc}
 800636a:	bf00      	nop
 800636c:	0000419f 	.word	0x0000419f
 8006370:	000041a0 	.word	0x000041a0
 8006374:	00004194 	.word	0x00004194
 8006378:	240004b0 	.word	0x240004b0
 800637c:	0000419e 	.word	0x0000419e

08006380 <HAL_I2C_MemRxCpltCallback>:

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c){
 8006380:	b580      	push	{r7, lr}
 8006382:	b084      	sub	sp, #16
 8006384:	af02      	add	r7, sp, #8
 8006386:	6078      	str	r0, [r7, #4]
	if(MPU6050_IRQ == 1){
 8006388:	4bbc      	ldr	r3, [pc, #752]	@ (800667c <HAL_I2C_MemRxCpltCallback+0x2fc>)
 800638a:	781b      	ldrb	r3, [r3, #0]
 800638c:	2b01      	cmp	r3, #1
 800638e:	f040 8595 	bne.w	8006ebc <HAL_I2C_MemRxCpltCallback+0xb3c>
			MPU6050_IRQ = 0;
 8006392:	4bba      	ldr	r3, [pc, #744]	@ (800667c <HAL_I2C_MemRxCpltCallback+0x2fc>)
 8006394:	2200      	movs	r2, #0
 8006396:	701a      	strb	r2, [r3, #0]
			LED_G_1;
 8006398:	2201      	movs	r2, #1
 800639a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800639e:	48b8      	ldr	r0, [pc, #736]	@ (8006680 <HAL_I2C_MemRxCpltCallback+0x300>)
 80063a0:	f008 f8b6 	bl	800e510 <HAL_GPIO_WritePin>

			MPU6050_GET_CALANDSCL_IT(&ax, &ay, &az, &gx, &gy, &gz, accelx_cal, accely_cal, accelz_cal, gyrox_cal, gyroy_cal, gyroz_cal, Gyr_Scale, Acc_Scale);
 80063a4:	4bb7      	ldr	r3, [pc, #732]	@ (8006684 <HAL_I2C_MemRxCpltCallback+0x304>)
 80063a6:	edd3 7a00 	vldr	s15, [r3]
 80063aa:	4bb7      	ldr	r3, [pc, #732]	@ (8006688 <HAL_I2C_MemRxCpltCallback+0x308>)
 80063ac:	ed93 7a00 	vldr	s14, [r3]
 80063b0:	4bb6      	ldr	r3, [pc, #728]	@ (800668c <HAL_I2C_MemRxCpltCallback+0x30c>)
 80063b2:	edd3 6a00 	vldr	s13, [r3]
 80063b6:	4bb6      	ldr	r3, [pc, #728]	@ (8006690 <HAL_I2C_MemRxCpltCallback+0x310>)
 80063b8:	ed93 6a00 	vldr	s12, [r3]
 80063bc:	4bb5      	ldr	r3, [pc, #724]	@ (8006694 <HAL_I2C_MemRxCpltCallback+0x314>)
 80063be:	edd3 5a00 	vldr	s11, [r3]
 80063c2:	4bb5      	ldr	r3, [pc, #724]	@ (8006698 <HAL_I2C_MemRxCpltCallback+0x318>)
 80063c4:	ed93 5a00 	vldr	s10, [r3]
 80063c8:	eddf 4ab4 	vldr	s9, [pc, #720]	@ 800669c <HAL_I2C_MemRxCpltCallback+0x31c>
 80063cc:	ed9f 4ab4 	vldr	s8, [pc, #720]	@ 80066a0 <HAL_I2C_MemRxCpltCallback+0x320>
 80063d0:	4bb4      	ldr	r3, [pc, #720]	@ (80066a4 <HAL_I2C_MemRxCpltCallback+0x324>)
 80063d2:	9301      	str	r3, [sp, #4]
 80063d4:	4bb4      	ldr	r3, [pc, #720]	@ (80066a8 <HAL_I2C_MemRxCpltCallback+0x328>)
 80063d6:	9300      	str	r3, [sp, #0]
 80063d8:	eef0 3a44 	vmov.f32	s7, s8
 80063dc:	eeb0 3a64 	vmov.f32	s6, s9
 80063e0:	eef0 2a45 	vmov.f32	s5, s10
 80063e4:	eeb0 2a65 	vmov.f32	s4, s11
 80063e8:	eef0 1a46 	vmov.f32	s3, s12
 80063ec:	eeb0 1a66 	vmov.f32	s2, s13
 80063f0:	eef0 0a47 	vmov.f32	s1, s14
 80063f4:	eeb0 0a67 	vmov.f32	s0, s15
 80063f8:	4bac      	ldr	r3, [pc, #688]	@ (80066ac <HAL_I2C_MemRxCpltCallback+0x32c>)
 80063fa:	4aad      	ldr	r2, [pc, #692]	@ (80066b0 <HAL_I2C_MemRxCpltCallback+0x330>)
 80063fc:	49ad      	ldr	r1, [pc, #692]	@ (80066b4 <HAL_I2C_MemRxCpltCallback+0x334>)
 80063fe:	48ae      	ldr	r0, [pc, #696]	@ (80066b8 <HAL_I2C_MemRxCpltCallback+0x338>)
 8006400:	f7fb f9c0 	bl	8001784 <MPU6050_GET_CALANDSCL_IT>
			MPU6050_GET_ACCEL_TO_ANGLE(ax, ay, az, &ax_ang, &ay_ang/*, &az_ang*/);
 8006404:	4bac      	ldr	r3, [pc, #688]	@ (80066b8 <HAL_I2C_MemRxCpltCallback+0x338>)
 8006406:	edd3 7a00 	vldr	s15, [r3]
 800640a:	4baa      	ldr	r3, [pc, #680]	@ (80066b4 <HAL_I2C_MemRxCpltCallback+0x334>)
 800640c:	ed93 7a00 	vldr	s14, [r3]
 8006410:	4ba7      	ldr	r3, [pc, #668]	@ (80066b0 <HAL_I2C_MemRxCpltCallback+0x330>)
 8006412:	edd3 6a00 	vldr	s13, [r3]
 8006416:	49a9      	ldr	r1, [pc, #676]	@ (80066bc <HAL_I2C_MemRxCpltCallback+0x33c>)
 8006418:	48a9      	ldr	r0, [pc, #676]	@ (80066c0 <HAL_I2C_MemRxCpltCallback+0x340>)
 800641a:	eeb0 1a66 	vmov.f32	s2, s13
 800641e:	eef0 0a47 	vmov.f32	s1, s14
 8006422:	eeb0 0a67 	vmov.f32	s0, s15
 8006426:	f7fb f85f 	bl	80014e8 <MPU6050_GET_ACCEL_TO_ANGLE>
			MPU6050_GET_ACCANDGYR_FILTRED(&data, ax_ang, ay_ang, Mag_Z, gx, gy, gz);
 800642a:	4ba5      	ldr	r3, [pc, #660]	@ (80066c0 <HAL_I2C_MemRxCpltCallback+0x340>)
 800642c:	edd3 7a00 	vldr	s15, [r3]
 8006430:	4ba2      	ldr	r3, [pc, #648]	@ (80066bc <HAL_I2C_MemRxCpltCallback+0x33c>)
 8006432:	ed93 7a00 	vldr	s14, [r3]
 8006436:	4ba3      	ldr	r3, [pc, #652]	@ (80066c4 <HAL_I2C_MemRxCpltCallback+0x344>)
 8006438:	edd3 6a00 	vldr	s13, [r3]
 800643c:	4b9b      	ldr	r3, [pc, #620]	@ (80066ac <HAL_I2C_MemRxCpltCallback+0x32c>)
 800643e:	ed93 6a00 	vldr	s12, [r3]
 8006442:	4b99      	ldr	r3, [pc, #612]	@ (80066a8 <HAL_I2C_MemRxCpltCallback+0x328>)
 8006444:	edd3 5a00 	vldr	s11, [r3]
 8006448:	4b96      	ldr	r3, [pc, #600]	@ (80066a4 <HAL_I2C_MemRxCpltCallback+0x324>)
 800644a:	ed93 5a00 	vldr	s10, [r3]
 800644e:	eef0 2a45 	vmov.f32	s5, s10
 8006452:	eeb0 2a65 	vmov.f32	s4, s11
 8006456:	eef0 1a46 	vmov.f32	s3, s12
 800645a:	eeb0 1a66 	vmov.f32	s2, s13
 800645e:	eef0 0a47 	vmov.f32	s1, s14
 8006462:	eeb0 0a67 	vmov.f32	s0, s15
 8006466:	4898      	ldr	r0, [pc, #608]	@ (80066c8 <HAL_I2C_MemRxCpltCallback+0x348>)
 8006468:	f7fb fa36 	bl	80018d8 <MPU6050_GET_ACCANDGYR_FILTRED>


			now_pitch = data.x;
 800646c:	4b96      	ldr	r3, [pc, #600]	@ (80066c8 <HAL_I2C_MemRxCpltCallback+0x348>)
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	4a96      	ldr	r2, [pc, #600]	@ (80066cc <HAL_I2C_MemRxCpltCallback+0x34c>)
 8006472:	6013      	str	r3, [r2, #0]
			now_rool = data.y;
 8006474:	4b94      	ldr	r3, [pc, #592]	@ (80066c8 <HAL_I2C_MemRxCpltCallback+0x348>)
 8006476:	685b      	ldr	r3, [r3, #4]
 8006478:	4a95      	ldr	r2, [pc, #596]	@ (80066d0 <HAL_I2C_MemRxCpltCallback+0x350>)
 800647a:	6013      	str	r3, [r2, #0]
			now_yaw = data.z;
 800647c:	4b92      	ldr	r3, [pc, #584]	@ (80066c8 <HAL_I2C_MemRxCpltCallback+0x348>)
 800647e:	689b      	ldr	r3, [r3, #8]
 8006480:	4a94      	ldr	r2, [pc, #592]	@ (80066d4 <HAL_I2C_MemRxCpltCallback+0x354>)
 8006482:	6013      	str	r3, [r2, #0]


			wanted_rool = (float)wanted_rool_rx/10;
 8006484:	4b94      	ldr	r3, [pc, #592]	@ (80066d8 <HAL_I2C_MemRxCpltCallback+0x358>)
 8006486:	f9b3 3000 	ldrsh.w	r3, [r3]
 800648a:	ee07 3a90 	vmov	s15, r3
 800648e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006492:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8006496:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800649a:	4b90      	ldr	r3, [pc, #576]	@ (80066dc <HAL_I2C_MemRxCpltCallback+0x35c>)
 800649c:	edc3 7a00 	vstr	s15, [r3]
			wanted_pitch = (float)wanted_pitch_rx/10;
 80064a0:	4b8f      	ldr	r3, [pc, #572]	@ (80066e0 <HAL_I2C_MemRxCpltCallback+0x360>)
 80064a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80064a6:	ee07 3a90 	vmov	s15, r3
 80064aa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80064ae:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 80064b2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80064b6:	4b8b      	ldr	r3, [pc, #556]	@ (80066e4 <HAL_I2C_MemRxCpltCallback+0x364>)
 80064b8:	edc3 7a00 	vstr	s15, [r3]
			wanted_yaw = 0;//(float)wanted_yaw_rx/10;
 80064bc:	4b8a      	ldr	r3, [pc, #552]	@ (80066e8 <HAL_I2C_MemRxCpltCallback+0x368>)
 80064be:	f04f 0200 	mov.w	r2, #0
 80064c2:	601a      	str	r2, [r3, #0]
				  			/*
				  				 * FDP
				  				 */
			wanted_rool = (wanted_rool * (FDP_FQ * looptime) / (1 + (FDP_FQ * looptime))) + (last_wanted_rool_rx * (1 / (1 + (FDP_FQ * looptime))));
 80064c4:	eddf 7a89 	vldr	s15, [pc, #548]	@ 80066ec <HAL_I2C_MemRxCpltCallback+0x36c>
 80064c8:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80064cc:	4b83      	ldr	r3, [pc, #524]	@ (80066dc <HAL_I2C_MemRxCpltCallback+0x35c>)
 80064ce:	edd3 7a00 	vldr	s15, [r3]
 80064d2:	ee67 6a27 	vmul.f32	s13, s14, s15
 80064d6:	eddf 7a85 	vldr	s15, [pc, #532]	@ 80066ec <HAL_I2C_MemRxCpltCallback+0x36c>
 80064da:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80064de:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80064e2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80064e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80064ea:	eddf 7a80 	vldr	s15, [pc, #512]	@ 80066ec <HAL_I2C_MemRxCpltCallback+0x36c>
 80064ee:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80064f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80064f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80064fa:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 80064fe:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8006502:	4b7b      	ldr	r3, [pc, #492]	@ (80066f0 <HAL_I2C_MemRxCpltCallback+0x370>)
 8006504:	edd3 7a00 	vldr	s15, [r3]
 8006508:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800650c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006510:	4b72      	ldr	r3, [pc, #456]	@ (80066dc <HAL_I2C_MemRxCpltCallback+0x35c>)
 8006512:	edc3 7a00 	vstr	s15, [r3]
			wanted_pitch = (wanted_pitch * (FDP_FQ * looptime) / (1 + (FDP_FQ * looptime))) + (last_wanted_pitch_rx * (1 / (1 + (FDP_FQ * looptime))));
 8006516:	eddf 7a75 	vldr	s15, [pc, #468]	@ 80066ec <HAL_I2C_MemRxCpltCallback+0x36c>
 800651a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800651e:	4b71      	ldr	r3, [pc, #452]	@ (80066e4 <HAL_I2C_MemRxCpltCallback+0x364>)
 8006520:	edd3 7a00 	vldr	s15, [r3]
 8006524:	ee67 6a27 	vmul.f32	s13, s14, s15
 8006528:	eddf 7a70 	vldr	s15, [pc, #448]	@ 80066ec <HAL_I2C_MemRxCpltCallback+0x36c>
 800652c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8006530:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006534:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006538:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800653c:	eddf 7a6b 	vldr	s15, [pc, #428]	@ 80066ec <HAL_I2C_MemRxCpltCallback+0x36c>
 8006540:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8006544:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006548:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800654c:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8006550:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8006554:	4b67      	ldr	r3, [pc, #412]	@ (80066f4 <HAL_I2C_MemRxCpltCallback+0x374>)
 8006556:	edd3 7a00 	vldr	s15, [r3]
 800655a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800655e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006562:	4b60      	ldr	r3, [pc, #384]	@ (80066e4 <HAL_I2C_MemRxCpltCallback+0x364>)
 8006564:	edc3 7a00 	vstr	s15, [r3]
			wanted_yaw = (wanted_yaw * (FDP_FQ * looptime) / (1 + (FDP_FQ * looptime))) + (last_wanted_yaw_rx * (1 / (1 + (FDP_FQ * looptime))));
 8006568:	eddf 7a60 	vldr	s15, [pc, #384]	@ 80066ec <HAL_I2C_MemRxCpltCallback+0x36c>
 800656c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8006570:	4b5d      	ldr	r3, [pc, #372]	@ (80066e8 <HAL_I2C_MemRxCpltCallback+0x368>)
 8006572:	edd3 7a00 	vldr	s15, [r3]
 8006576:	ee67 6a27 	vmul.f32	s13, s14, s15
 800657a:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 80066ec <HAL_I2C_MemRxCpltCallback+0x36c>
 800657e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8006582:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006586:	ee77 7a87 	vadd.f32	s15, s15, s14
 800658a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800658e:	eddf 7a57 	vldr	s15, [pc, #348]	@ 80066ec <HAL_I2C_MemRxCpltCallback+0x36c>
 8006592:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8006596:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800659a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800659e:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 80065a2:	eec6 6a27 	vdiv.f32	s13, s12, s15
 80065a6:	4b54      	ldr	r3, [pc, #336]	@ (80066f8 <HAL_I2C_MemRxCpltCallback+0x378>)
 80065a8:	edd3 7a00 	vldr	s15, [r3]
 80065ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80065b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80065b4:	4b4c      	ldr	r3, [pc, #304]	@ (80066e8 <HAL_I2C_MemRxCpltCallback+0x368>)
 80065b6:	edc3 7a00 	vstr	s15, [r3]


			last_wanted_rool_rx = wanted_rool;
 80065ba:	4b48      	ldr	r3, [pc, #288]	@ (80066dc <HAL_I2C_MemRxCpltCallback+0x35c>)
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	4a4c      	ldr	r2, [pc, #304]	@ (80066f0 <HAL_I2C_MemRxCpltCallback+0x370>)
 80065c0:	6013      	str	r3, [r2, #0]
			last_wanted_pitch_rx = wanted_pitch;
 80065c2:	4b48      	ldr	r3, [pc, #288]	@ (80066e4 <HAL_I2C_MemRxCpltCallback+0x364>)
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	4a4b      	ldr	r2, [pc, #300]	@ (80066f4 <HAL_I2C_MemRxCpltCallback+0x374>)
 80065c8:	6013      	str	r3, [r2, #0]
			last_wanted_yaw_rx = wanted_yaw;
 80065ca:	4b47      	ldr	r3, [pc, #284]	@ (80066e8 <HAL_I2C_MemRxCpltCallback+0x368>)
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	4a4a      	ldr	r2, [pc, #296]	@ (80066f8 <HAL_I2C_MemRxCpltCallback+0x378>)
 80065d0:	6013      	str	r3, [r2, #0]


			error_sum_pitch = (MYDRON.PITCH_STA != 0) ? error_sum_pitch : error_sum_pitch + (wanted_pitch - now_pitch);
 80065d2:	4b4a      	ldr	r3, [pc, #296]	@ (80066fc <HAL_I2C_MemRxCpltCallback+0x37c>)
 80065d4:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d008      	beq.n	80065ee <HAL_I2C_MemRxCpltCallback+0x26e>
 80065dc:	4b48      	ldr	r3, [pc, #288]	@ (8006700 <HAL_I2C_MemRxCpltCallback+0x380>)
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	ee07 3a90 	vmov	s15, r3
 80065e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80065e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80065ec:	e011      	b.n	8006612 <HAL_I2C_MemRxCpltCallback+0x292>
 80065ee:	4b44      	ldr	r3, [pc, #272]	@ (8006700 <HAL_I2C_MemRxCpltCallback+0x380>)
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	ee07 3a90 	vmov	s15, r3
 80065f6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80065fa:	4b3a      	ldr	r3, [pc, #232]	@ (80066e4 <HAL_I2C_MemRxCpltCallback+0x364>)
 80065fc:	edd3 6a00 	vldr	s13, [r3]
 8006600:	4b32      	ldr	r3, [pc, #200]	@ (80066cc <HAL_I2C_MemRxCpltCallback+0x34c>)
 8006602:	edd3 7a00 	vldr	s15, [r3]
 8006606:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800660a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800660e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006612:	4b3b      	ldr	r3, [pc, #236]	@ (8006700 <HAL_I2C_MemRxCpltCallback+0x380>)
 8006614:	edc3 7a00 	vstr	s15, [r3]
			error_sum_rool = (MYDRON.ROOL_STA != 0) ? error_sum_rool : error_sum_rool + (wanted_rool - now_rool);
 8006618:	4b38      	ldr	r3, [pc, #224]	@ (80066fc <HAL_I2C_MemRxCpltCallback+0x37c>)
 800661a:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 800661e:	2b00      	cmp	r3, #0
 8006620:	d008      	beq.n	8006634 <HAL_I2C_MemRxCpltCallback+0x2b4>
 8006622:	4b38      	ldr	r3, [pc, #224]	@ (8006704 <HAL_I2C_MemRxCpltCallback+0x384>)
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	ee07 3a90 	vmov	s15, r3
 800662a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800662e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006632:	e011      	b.n	8006658 <HAL_I2C_MemRxCpltCallback+0x2d8>
 8006634:	4b33      	ldr	r3, [pc, #204]	@ (8006704 <HAL_I2C_MemRxCpltCallback+0x384>)
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	ee07 3a90 	vmov	s15, r3
 800663c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006640:	4b26      	ldr	r3, [pc, #152]	@ (80066dc <HAL_I2C_MemRxCpltCallback+0x35c>)
 8006642:	edd3 6a00 	vldr	s13, [r3]
 8006646:	4b22      	ldr	r3, [pc, #136]	@ (80066d0 <HAL_I2C_MemRxCpltCallback+0x350>)
 8006648:	edd3 7a00 	vldr	s15, [r3]
 800664c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8006650:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006654:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006658:	4b2a      	ldr	r3, [pc, #168]	@ (8006704 <HAL_I2C_MemRxCpltCallback+0x384>)
 800665a:	edc3 7a00 	vstr	s15, [r3]
			error_sum_yaw = (MYDRON.YAW_STA != 0) ? error_sum_yaw : error_sum_yaw + (wanted_yaw - now_yaw);
 800665e:	4b27      	ldr	r3, [pc, #156]	@ (80066fc <HAL_I2C_MemRxCpltCallback+0x37c>)
 8006660:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8006664:	2b00      	cmp	r3, #0
 8006666:	d051      	beq.n	800670c <HAL_I2C_MemRxCpltCallback+0x38c>
 8006668:	4b27      	ldr	r3, [pc, #156]	@ (8006708 <HAL_I2C_MemRxCpltCallback+0x388>)
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	ee07 3a90 	vmov	s15, r3
 8006670:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006674:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006678:	e05a      	b.n	8006730 <HAL_I2C_MemRxCpltCallback+0x3b0>
 800667a:	bf00      	nop
 800667c:	000041b4 	.word	0x000041b4
 8006680:	58021000 	.word	0x58021000
 8006684:	00000030 	.word	0x00000030
 8006688:	00000034 	.word	0x00000034
 800668c:	00000038 	.word	0x00000038
 8006690:	0000003c 	.word	0x0000003c
 8006694:	00000040 	.word	0x00000040
 8006698:	00000044 	.word	0x00000044
 800669c:	42830000 	.word	0x42830000
 80066a0:	46000000 	.word	0x46000000
 80066a4:	00000014 	.word	0x00000014
 80066a8:	00000010 	.word	0x00000010
 80066ac:	0000000c 	.word	0x0000000c
 80066b0:	00000008 	.word	0x00000008
 80066b4:	00000004 	.word	0x00000004
 80066b8:	00000000 	.word	0x00000000
 80066bc:	0000001c 	.word	0x0000001c
 80066c0:	00000018 	.word	0x00000018
 80066c4:	00000048 	.word	0x00000048
 80066c8:	00000064 	.word	0x00000064
 80066cc:	00004058 	.word	0x00004058
 80066d0:	0000405c 	.word	0x0000405c
 80066d4:	00004060 	.word	0x00004060
 80066d8:	0000402a 	.word	0x0000402a
 80066dc:	0000404c 	.word	0x0000404c
 80066e0:	00004028 	.word	0x00004028
 80066e4:	00004048 	.word	0x00004048
 80066e8:	00004050 	.word	0x00004050
 80066ec:	3a83126f 	.word	0x3a83126f
 80066f0:	00004034 	.word	0x00004034
 80066f4:	00004030 	.word	0x00004030
 80066f8:	00004038 	.word	0x00004038
 80066fc:	00000158 	.word	0x00000158
 8006700:	0000407c 	.word	0x0000407c
 8006704:	00004080 	.word	0x00004080
 8006708:	00004084 	.word	0x00004084
 800670c:	4ba1      	ldr	r3, [pc, #644]	@ (8006994 <HAL_I2C_MemRxCpltCallback+0x614>)
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	ee07 3a90 	vmov	s15, r3
 8006714:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006718:	4b9f      	ldr	r3, [pc, #636]	@ (8006998 <HAL_I2C_MemRxCpltCallback+0x618>)
 800671a:	edd3 6a00 	vldr	s13, [r3]
 800671e:	4b9f      	ldr	r3, [pc, #636]	@ (800699c <HAL_I2C_MemRxCpltCallback+0x61c>)
 8006720:	edd3 7a00 	vldr	s15, [r3]
 8006724:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8006728:	ee77 7a27 	vadd.f32	s15, s14, s15
 800672c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006730:	4b98      	ldr	r3, [pc, #608]	@ (8006994 <HAL_I2C_MemRxCpltCallback+0x614>)
 8006732:	edc3 7a00 	vstr	s15, [r3]

			error_sum_angular_rate_pitch = (MYDRON.PITCH_STA != 0) ? error_sum_angular_rate_pitch : error_sum_angular_rate_pitch + (pid_pitch - gx);
 8006736:	4b9a      	ldr	r3, [pc, #616]	@ (80069a0 <HAL_I2C_MemRxCpltCallback+0x620>)
 8006738:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800673c:	2b00      	cmp	r3, #0
 800673e:	d008      	beq.n	8006752 <HAL_I2C_MemRxCpltCallback+0x3d2>
 8006740:	4b98      	ldr	r3, [pc, #608]	@ (80069a4 <HAL_I2C_MemRxCpltCallback+0x624>)
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	ee07 3a90 	vmov	s15, r3
 8006748:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800674c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006750:	e011      	b.n	8006776 <HAL_I2C_MemRxCpltCallback+0x3f6>
 8006752:	4b94      	ldr	r3, [pc, #592]	@ (80069a4 <HAL_I2C_MemRxCpltCallback+0x624>)
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	ee07 3a90 	vmov	s15, r3
 800675a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800675e:	4b92      	ldr	r3, [pc, #584]	@ (80069a8 <HAL_I2C_MemRxCpltCallback+0x628>)
 8006760:	edd3 6a00 	vldr	s13, [r3]
 8006764:	4b91      	ldr	r3, [pc, #580]	@ (80069ac <HAL_I2C_MemRxCpltCallback+0x62c>)
 8006766:	edd3 7a00 	vldr	s15, [r3]
 800676a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800676e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006772:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006776:	4b8b      	ldr	r3, [pc, #556]	@ (80069a4 <HAL_I2C_MemRxCpltCallback+0x624>)
 8006778:	edc3 7a00 	vstr	s15, [r3]
			error_sum_angular_rate_rool = (MYDRON.ROOL_STA != 0) ? error_sum_angular_rate_rool : error_sum_angular_rate_rool + (pid_rool - gy);
 800677c:	4b88      	ldr	r3, [pc, #544]	@ (80069a0 <HAL_I2C_MemRxCpltCallback+0x620>)
 800677e:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8006782:	2b00      	cmp	r3, #0
 8006784:	d008      	beq.n	8006798 <HAL_I2C_MemRxCpltCallback+0x418>
 8006786:	4b8a      	ldr	r3, [pc, #552]	@ (80069b0 <HAL_I2C_MemRxCpltCallback+0x630>)
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	ee07 3a90 	vmov	s15, r3
 800678e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006792:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006796:	e011      	b.n	80067bc <HAL_I2C_MemRxCpltCallback+0x43c>
 8006798:	4b85      	ldr	r3, [pc, #532]	@ (80069b0 <HAL_I2C_MemRxCpltCallback+0x630>)
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	ee07 3a90 	vmov	s15, r3
 80067a0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80067a4:	4b83      	ldr	r3, [pc, #524]	@ (80069b4 <HAL_I2C_MemRxCpltCallback+0x634>)
 80067a6:	edd3 6a00 	vldr	s13, [r3]
 80067aa:	4b83      	ldr	r3, [pc, #524]	@ (80069b8 <HAL_I2C_MemRxCpltCallback+0x638>)
 80067ac:	edd3 7a00 	vldr	s15, [r3]
 80067b0:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80067b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80067b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80067bc:	4b7c      	ldr	r3, [pc, #496]	@ (80069b0 <HAL_I2C_MemRxCpltCallback+0x630>)
 80067be:	edc3 7a00 	vstr	s15, [r3]
			error_sum_angular_rate_yaw = (MYDRON.YAW_STA != 0) ? error_sum_angular_rate_yaw : error_sum_angular_rate_yaw + (pid_yaw - gz);
 80067c2:	4b77      	ldr	r3, [pc, #476]	@ (80069a0 <HAL_I2C_MemRxCpltCallback+0x620>)
 80067c4:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d008      	beq.n	80067de <HAL_I2C_MemRxCpltCallback+0x45e>
 80067cc:	4b7b      	ldr	r3, [pc, #492]	@ (80069bc <HAL_I2C_MemRxCpltCallback+0x63c>)
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	ee07 3a90 	vmov	s15, r3
 80067d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80067d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80067dc:	e011      	b.n	8006802 <HAL_I2C_MemRxCpltCallback+0x482>
 80067de:	4b77      	ldr	r3, [pc, #476]	@ (80069bc <HAL_I2C_MemRxCpltCallback+0x63c>)
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	ee07 3a90 	vmov	s15, r3
 80067e6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80067ea:	4b75      	ldr	r3, [pc, #468]	@ (80069c0 <HAL_I2C_MemRxCpltCallback+0x640>)
 80067ec:	edd3 6a00 	vldr	s13, [r3]
 80067f0:	4b74      	ldr	r3, [pc, #464]	@ (80069c4 <HAL_I2C_MemRxCpltCallback+0x644>)
 80067f2:	edd3 7a00 	vldr	s15, [r3]
 80067f6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80067fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80067fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006802:	4b6e      	ldr	r3, [pc, #440]	@ (80069bc <HAL_I2C_MemRxCpltCallback+0x63c>)
 8006804:	edc3 7a00 	vstr	s15, [r3]


			PID_cal(&pid_pitch, PID_FAC_Pitch, 1);// angle control
 8006808:	2201      	movs	r2, #1
 800680a:	496f      	ldr	r1, [pc, #444]	@ (80069c8 <HAL_I2C_MemRxCpltCallback+0x648>)
 800680c:	4866      	ldr	r0, [pc, #408]	@ (80069a8 <HAL_I2C_MemRxCpltCallback+0x628>)
 800680e:	f7fd f8dd 	bl	80039cc <PID_cal>
			PID_cal(&pid_rool, PID_FAC_Rool, 2);
 8006812:	2202      	movs	r2, #2
 8006814:	496d      	ldr	r1, [pc, #436]	@ (80069cc <HAL_I2C_MemRxCpltCallback+0x64c>)
 8006816:	4867      	ldr	r0, [pc, #412]	@ (80069b4 <HAL_I2C_MemRxCpltCallback+0x634>)
 8006818:	f7fd f8d8 	bl	80039cc <PID_cal>
			PID_cal(&pid_yaw, PID_FAC_Yaw, 3);
 800681c:	2203      	movs	r2, #3
 800681e:	496c      	ldr	r1, [pc, #432]	@ (80069d0 <HAL_I2C_MemRxCpltCallback+0x650>)
 8006820:	4867      	ldr	r0, [pc, #412]	@ (80069c0 <HAL_I2C_MemRxCpltCallback+0x640>)
 8006822:	f7fd f8d3 	bl	80039cc <PID_cal>

			PID_cal(&pid_angular_rate_pitch, PID_FAC_Angular_Rate_Pitch, 4);// angle rate control
 8006826:	2204      	movs	r2, #4
 8006828:	496a      	ldr	r1, [pc, #424]	@ (80069d4 <HAL_I2C_MemRxCpltCallback+0x654>)
 800682a:	486b      	ldr	r0, [pc, #428]	@ (80069d8 <HAL_I2C_MemRxCpltCallback+0x658>)
 800682c:	f7fd f8ce 	bl	80039cc <PID_cal>
			PID_cal(&pid_angular_rate_rool, PID_FAC_Angular_Rate_Rool, 5);
 8006830:	2205      	movs	r2, #5
 8006832:	496a      	ldr	r1, [pc, #424]	@ (80069dc <HAL_I2C_MemRxCpltCallback+0x65c>)
 8006834:	486a      	ldr	r0, [pc, #424]	@ (80069e0 <HAL_I2C_MemRxCpltCallback+0x660>)
 8006836:	f7fd f8c9 	bl	80039cc <PID_cal>
			PID_cal(&pid_angular_rate_yaw, PID_FAC_Angular_Rate_Yaw, 6);
 800683a:	2206      	movs	r2, #6
 800683c:	4969      	ldr	r1, [pc, #420]	@ (80069e4 <HAL_I2C_MemRxCpltCallback+0x664>)
 800683e:	486a      	ldr	r0, [pc, #424]	@ (80069e8 <HAL_I2C_MemRxCpltCallback+0x668>)
 8006840:	f7fd f8c4 	bl	80039cc <PID_cal>


			old_error_pitch = wanted_pitch - now_pitch;
 8006844:	4b69      	ldr	r3, [pc, #420]	@ (80069ec <HAL_I2C_MemRxCpltCallback+0x66c>)
 8006846:	ed93 7a00 	vldr	s14, [r3]
 800684a:	4b69      	ldr	r3, [pc, #420]	@ (80069f0 <HAL_I2C_MemRxCpltCallback+0x670>)
 800684c:	edd3 7a00 	vldr	s15, [r3]
 8006850:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006854:	4b67      	ldr	r3, [pc, #412]	@ (80069f4 <HAL_I2C_MemRxCpltCallback+0x674>)
 8006856:	edc3 7a00 	vstr	s15, [r3]
			old_error_rool = wanted_rool - now_rool;
 800685a:	4b67      	ldr	r3, [pc, #412]	@ (80069f8 <HAL_I2C_MemRxCpltCallback+0x678>)
 800685c:	ed93 7a00 	vldr	s14, [r3]
 8006860:	4b66      	ldr	r3, [pc, #408]	@ (80069fc <HAL_I2C_MemRxCpltCallback+0x67c>)
 8006862:	edd3 7a00 	vldr	s15, [r3]
 8006866:	ee77 7a67 	vsub.f32	s15, s14, s15
 800686a:	4b65      	ldr	r3, [pc, #404]	@ (8006a00 <HAL_I2C_MemRxCpltCallback+0x680>)
 800686c:	edc3 7a00 	vstr	s15, [r3]
			old_error_yaw = wanted_yaw - now_yaw;
 8006870:	4b49      	ldr	r3, [pc, #292]	@ (8006998 <HAL_I2C_MemRxCpltCallback+0x618>)
 8006872:	ed93 7a00 	vldr	s14, [r3]
 8006876:	4b49      	ldr	r3, [pc, #292]	@ (800699c <HAL_I2C_MemRxCpltCallback+0x61c>)
 8006878:	edd3 7a00 	vldr	s15, [r3]
 800687c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006880:	4b60      	ldr	r3, [pc, #384]	@ (8006a04 <HAL_I2C_MemRxCpltCallback+0x684>)
 8006882:	edc3 7a00 	vstr	s15, [r3]

			old_error_angular_rate_pitch = pid_pitch - gx;
 8006886:	4b48      	ldr	r3, [pc, #288]	@ (80069a8 <HAL_I2C_MemRxCpltCallback+0x628>)
 8006888:	ed93 7a00 	vldr	s14, [r3]
 800688c:	4b47      	ldr	r3, [pc, #284]	@ (80069ac <HAL_I2C_MemRxCpltCallback+0x62c>)
 800688e:	edd3 7a00 	vldr	s15, [r3]
 8006892:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006896:	4b5c      	ldr	r3, [pc, #368]	@ (8006a08 <HAL_I2C_MemRxCpltCallback+0x688>)
 8006898:	edc3 7a00 	vstr	s15, [r3]
			old_error_angular_rate_rool = pid_rool - gy;
 800689c:	4b45      	ldr	r3, [pc, #276]	@ (80069b4 <HAL_I2C_MemRxCpltCallback+0x634>)
 800689e:	ed93 7a00 	vldr	s14, [r3]
 80068a2:	4b45      	ldr	r3, [pc, #276]	@ (80069b8 <HAL_I2C_MemRxCpltCallback+0x638>)
 80068a4:	edd3 7a00 	vldr	s15, [r3]
 80068a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80068ac:	4b57      	ldr	r3, [pc, #348]	@ (8006a0c <HAL_I2C_MemRxCpltCallback+0x68c>)
 80068ae:	edc3 7a00 	vstr	s15, [r3]
			old_error_angular_rate_yaw = wanted_yaw - gz;
 80068b2:	4b39      	ldr	r3, [pc, #228]	@ (8006998 <HAL_I2C_MemRxCpltCallback+0x618>)
 80068b4:	ed93 7a00 	vldr	s14, [r3]
 80068b8:	4b42      	ldr	r3, [pc, #264]	@ (80069c4 <HAL_I2C_MemRxCpltCallback+0x644>)
 80068ba:	edd3 7a00 	vldr	s15, [r3]
 80068be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80068c2:	4b53      	ldr	r3, [pc, #332]	@ (8006a10 <HAL_I2C_MemRxCpltCallback+0x690>)
 80068c4:	edc3 7a00 	vstr	s15, [r3]


			//MYDRON.ROOL 	= ((pid_angular_rate_rool > -5000) && (pid_angular_rate_rool < 5000)) ? pid_angular_rate_rool: (pid_angular_rate_rool > 0) ? 5000: -5000;
			MYDRON.ROOL 	= (pid_angular_rate_rool > 5000) ? ROOL_MAX_VAL(): (pid_angular_rate_rool < -5000) ? ROOL_MIN_VAL(): ROOL_GOOD_VAL();
 80068c8:	4b45      	ldr	r3, [pc, #276]	@ (80069e0 <HAL_I2C_MemRxCpltCallback+0x660>)
 80068ca:	edd3 7a00 	vldr	s15, [r3]
 80068ce:	ed9f 7a51 	vldr	s14, [pc, #324]	@ 8006a14 <HAL_I2C_MemRxCpltCallback+0x694>
 80068d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80068d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068da:	dd04      	ble.n	80068e6 <HAL_I2C_MemRxCpltCallback+0x566>
 80068dc:	f001 f87c 	bl	80079d8 <ROOL_MAX_VAL>
 80068e0:	4603      	mov	r3, r0
 80068e2:	461a      	mov	r2, r3
 80068e4:	e012      	b.n	800690c <HAL_I2C_MemRxCpltCallback+0x58c>
 80068e6:	4b3e      	ldr	r3, [pc, #248]	@ (80069e0 <HAL_I2C_MemRxCpltCallback+0x660>)
 80068e8:	edd3 7a00 	vldr	s15, [r3]
 80068ec:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 8006a18 <HAL_I2C_MemRxCpltCallback+0x698>
 80068f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80068f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068f8:	d504      	bpl.n	8006904 <HAL_I2C_MemRxCpltCallback+0x584>
 80068fa:	f001 f87d 	bl	80079f8 <ROOL_MIN_VAL>
 80068fe:	4603      	mov	r3, r0
 8006900:	461a      	mov	r2, r3
 8006902:	e003      	b.n	800690c <HAL_I2C_MemRxCpltCallback+0x58c>
 8006904:	f001 f8c8 	bl	8007a98 <ROOL_GOOD_VAL>
 8006908:	4603      	mov	r3, r0
 800690a:	461a      	mov	r2, r3
 800690c:	4b24      	ldr	r3, [pc, #144]	@ (80069a0 <HAL_I2C_MemRxCpltCallback+0x620>)
 800690e:	80da      	strh	r2, [r3, #6]
			MYDRON.PITCH 	= (pid_angular_rate_pitch > 5000) ? PITCH_MAX_VAL(): (pid_angular_rate_pitch < -5000) ? PITCH_MIN_VAL(): PITCH_GOOD_VAL();
 8006910:	4b31      	ldr	r3, [pc, #196]	@ (80069d8 <HAL_I2C_MemRxCpltCallback+0x658>)
 8006912:	edd3 7a00 	vldr	s15, [r3]
 8006916:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8006a14 <HAL_I2C_MemRxCpltCallback+0x694>
 800691a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800691e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006922:	dd04      	ble.n	800692e <HAL_I2C_MemRxCpltCallback+0x5ae>
 8006924:	f001 f878 	bl	8007a18 <PITCH_MAX_VAL>
 8006928:	4603      	mov	r3, r0
 800692a:	461a      	mov	r2, r3
 800692c:	e012      	b.n	8006954 <HAL_I2C_MemRxCpltCallback+0x5d4>
 800692e:	4b2a      	ldr	r3, [pc, #168]	@ (80069d8 <HAL_I2C_MemRxCpltCallback+0x658>)
 8006930:	edd3 7a00 	vldr	s15, [r3]
 8006934:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8006a18 <HAL_I2C_MemRxCpltCallback+0x698>
 8006938:	eef4 7ac7 	vcmpe.f32	s15, s14
 800693c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006940:	d504      	bpl.n	800694c <HAL_I2C_MemRxCpltCallback+0x5cc>
 8006942:	f001 f879 	bl	8007a38 <PITCH_MIN_VAL>
 8006946:	4603      	mov	r3, r0
 8006948:	461a      	mov	r2, r3
 800694a:	e003      	b.n	8006954 <HAL_I2C_MemRxCpltCallback+0x5d4>
 800694c:	f001 f8bc 	bl	8007ac8 <PITCH_GOOD_VAL>
 8006950:	4603      	mov	r3, r0
 8006952:	461a      	mov	r2, r3
 8006954:	4b12      	ldr	r3, [pc, #72]	@ (80069a0 <HAL_I2C_MemRxCpltCallback+0x620>)
 8006956:	809a      	strh	r2, [r3, #4]
			MYDRON.YAW 		= (pid_angular_rate_yaw > 5000) ? YAW_MAX_VAL(): (pid_angular_rate_yaw < -5000) ? YAW_MIN_VAL(): YAW_GOOD_VAL();
 8006958:	4b23      	ldr	r3, [pc, #140]	@ (80069e8 <HAL_I2C_MemRxCpltCallback+0x668>)
 800695a:	edd3 7a00 	vldr	s15, [r3]
 800695e:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 8006a14 <HAL_I2C_MemRxCpltCallback+0x694>
 8006962:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006966:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800696a:	dd04      	ble.n	8006976 <HAL_I2C_MemRxCpltCallback+0x5f6>
 800696c:	f001 f874 	bl	8007a58 <YAW_MAX_VAL>
 8006970:	4603      	mov	r3, r0
 8006972:	461a      	mov	r2, r3
 8006974:	e056      	b.n	8006a24 <HAL_I2C_MemRxCpltCallback+0x6a4>
 8006976:	4b1c      	ldr	r3, [pc, #112]	@ (80069e8 <HAL_I2C_MemRxCpltCallback+0x668>)
 8006978:	edd3 7a00 	vldr	s15, [r3]
 800697c:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8006a18 <HAL_I2C_MemRxCpltCallback+0x698>
 8006980:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006984:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006988:	d548      	bpl.n	8006a1c <HAL_I2C_MemRxCpltCallback+0x69c>
 800698a:	f001 f875 	bl	8007a78 <YAW_MIN_VAL>
 800698e:	4603      	mov	r3, r0
 8006990:	461a      	mov	r2, r3
 8006992:	e047      	b.n	8006a24 <HAL_I2C_MemRxCpltCallback+0x6a4>
 8006994:	00004084 	.word	0x00004084
 8006998:	00004050 	.word	0x00004050
 800699c:	00004060 	.word	0x00004060
 80069a0:	00000158 	.word	0x00000158
 80069a4:	00004088 	.word	0x00004088
 80069a8:	00004094 	.word	0x00004094
 80069ac:	0000000c 	.word	0x0000000c
 80069b0:	0000408c 	.word	0x0000408c
 80069b4:	0000409c 	.word	0x0000409c
 80069b8:	00000010 	.word	0x00000010
 80069bc:	00004090 	.word	0x00004090
 80069c0:	00004098 	.word	0x00004098
 80069c4:	00000014 	.word	0x00000014
 80069c8:	000040d0 	.word	0x000040d0
 80069cc:	000040e4 	.word	0x000040e4
 80069d0:	000040f8 	.word	0x000040f8
 80069d4:	00004130 	.word	0x00004130
 80069d8:	000040a0 	.word	0x000040a0
 80069dc:	00004144 	.word	0x00004144
 80069e0:	000040a8 	.word	0x000040a8
 80069e4:	00004158 	.word	0x00004158
 80069e8:	000040a4 	.word	0x000040a4
 80069ec:	00004048 	.word	0x00004048
 80069f0:	00004058 	.word	0x00004058
 80069f4:	00004064 	.word	0x00004064
 80069f8:	0000404c 	.word	0x0000404c
 80069fc:	0000405c 	.word	0x0000405c
 8006a00:	00004068 	.word	0x00004068
 8006a04:	0000406c 	.word	0x0000406c
 8006a08:	00004070 	.word	0x00004070
 8006a0c:	00004074 	.word	0x00004074
 8006a10:	00004078 	.word	0x00004078
 8006a14:	459c4000 	.word	0x459c4000
 8006a18:	c59c4000 	.word	0xc59c4000
 8006a1c:	f001 f86c 	bl	8007af8 <YAW_GOOD_VAL>
 8006a20:	4603      	mov	r3, r0
 8006a22:	461a      	mov	r2, r3
 8006a24:	4bc4      	ldr	r3, [pc, #784]	@ (8006d38 <HAL_I2C_MemRxCpltCallback+0x9b8>)
 8006a26:	811a      	strh	r2, [r3, #8]
//				wanted_thrust = MYDRON.THRUST/wobble_strenght;
//				Wobble_handler();
//			}


			Thrust_filter(1);
 8006a28:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 8006a2c:	f7fc fe98 	bl	8003760 <Thrust_filter>
			if(MYDRON.THRUST > thrust_limit){
 8006a30:	4bc1      	ldr	r3, [pc, #772]	@ (8006d38 <HAL_I2C_MemRxCpltCallback+0x9b8>)
 8006a32:	885b      	ldrh	r3, [r3, #2]
 8006a34:	461a      	mov	r2, r3
 8006a36:	4bc1      	ldr	r3, [pc, #772]	@ (8006d3c <HAL_I2C_MemRxCpltCallback+0x9bc>)
 8006a38:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006a3c:	429a      	cmp	r2, r3
 8006a3e:	dd05      	ble.n	8006a4c <HAL_I2C_MemRxCpltCallback+0x6cc>
				MYDRON.THRUST = thrust_limit;
 8006a40:	4bbe      	ldr	r3, [pc, #760]	@ (8006d3c <HAL_I2C_MemRxCpltCallback+0x9bc>)
 8006a42:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006a46:	b29a      	uxth	r2, r3
 8006a48:	4bbb      	ldr	r3, [pc, #748]	@ (8006d38 <HAL_I2C_MemRxCpltCallback+0x9b8>)
 8006a4a:	805a      	strh	r2, [r3, #2]
			}


			Stack_Push(WartoscBezwgledna(PID_FAC_Pitch[4]));
 8006a4c:	4bbc      	ldr	r3, [pc, #752]	@ (8006d40 <HAL_I2C_MemRxCpltCallback+0x9c0>)
 8006a4e:	edd3 7a04 	vldr	s15, [r3, #16]
 8006a52:	eeb0 0a67 	vmov.f32	s0, s15
 8006a56:	f000 fbcd 	bl	80071f4 <WartoscBezwgledna>
 8006a5a:	eef0 7a40 	vmov.f32	s15, s0
 8006a5e:	eeb0 0a67 	vmov.f32	s0, s15
 8006a62:	f000 ff6d 	bl	8007940 <Stack_Push>
			Stack_Push(WartoscBezwgledna(PID_FAC_Rool[4]));
 8006a66:	4bb7      	ldr	r3, [pc, #732]	@ (8006d44 <HAL_I2C_MemRxCpltCallback+0x9c4>)
 8006a68:	edd3 7a04 	vldr	s15, [r3, #16]
 8006a6c:	eeb0 0a67 	vmov.f32	s0, s15
 8006a70:	f000 fbc0 	bl	80071f4 <WartoscBezwgledna>
 8006a74:	eef0 7a40 	vmov.f32	s15, s0
 8006a78:	eeb0 0a67 	vmov.f32	s0, s15
 8006a7c:	f000 ff60 	bl	8007940 <Stack_Push>
			Stack_Push(now_pitch);
 8006a80:	4bb1      	ldr	r3, [pc, #708]	@ (8006d48 <HAL_I2C_MemRxCpltCallback+0x9c8>)
 8006a82:	edd3 7a00 	vldr	s15, [r3]
 8006a86:	eeb0 0a67 	vmov.f32	s0, s15
 8006a8a:	f000 ff59 	bl	8007940 <Stack_Push>
			Stack_Push(now_rool);
 8006a8e:	4baf      	ldr	r3, [pc, #700]	@ (8006d4c <HAL_I2C_MemRxCpltCallback+0x9cc>)
 8006a90:	edd3 7a00 	vldr	s15, [r3]
 8006a94:	eeb0 0a67 	vmov.f32	s0, s15
 8006a98:	f000 ff52 	bl	8007940 <Stack_Push>


			SPEED1 = (((uint32_t)((MYDRON.THRUST*0.7) + MYDRON.ROOL - MYDRON.PITCH + MYDRON.YAW + min_speed + 500)) < 20000) ? ((MYDRON.THRUST*0.7) + MYDRON.ROOL - MYDRON.PITCH + MYDRON.YAW + min_speed + 500) : 20000;//trust 7000 max
 8006a9c:	4ba6      	ldr	r3, [pc, #664]	@ (8006d38 <HAL_I2C_MemRxCpltCallback+0x9b8>)
 8006a9e:	885b      	ldrh	r3, [r3, #2]
 8006aa0:	ee07 3a90 	vmov	s15, r3
 8006aa4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006aa8:	ed9f 6b9d 	vldr	d6, [pc, #628]	@ 8006d20 <HAL_I2C_MemRxCpltCallback+0x9a0>
 8006aac:	ee27 6b06 	vmul.f64	d6, d7, d6
 8006ab0:	4ba1      	ldr	r3, [pc, #644]	@ (8006d38 <HAL_I2C_MemRxCpltCallback+0x9b8>)
 8006ab2:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8006ab6:	ee07 3a90 	vmov	s15, r3
 8006aba:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006abe:	ee36 6b07 	vadd.f64	d6, d6, d7
 8006ac2:	4b9d      	ldr	r3, [pc, #628]	@ (8006d38 <HAL_I2C_MemRxCpltCallback+0x9b8>)
 8006ac4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006ac8:	ee07 3a90 	vmov	s15, r3
 8006acc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006ad0:	ee36 6b47 	vsub.f64	d6, d6, d7
 8006ad4:	4b98      	ldr	r3, [pc, #608]	@ (8006d38 <HAL_I2C_MemRxCpltCallback+0x9b8>)
 8006ad6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006ada:	ee07 3a90 	vmov	s15, r3
 8006ade:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006ae2:	ee36 7b07 	vadd.f64	d7, d6, d7
 8006ae6:	ed9f 6b90 	vldr	d6, [pc, #576]	@ 8006d28 <HAL_I2C_MemRxCpltCallback+0x9a8>
 8006aea:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006aee:	ed9f 6b90 	vldr	d6, [pc, #576]	@ 8006d30 <HAL_I2C_MemRxCpltCallback+0x9b0>
 8006af2:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006af6:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006afa:	ee17 2a90 	vmov	r2, s15
 8006afe:	f644 631f 	movw	r3, #19999	@ 0x4e1f
 8006b02:	429a      	cmp	r2, r3
 8006b04:	d832      	bhi.n	8006b6c <HAL_I2C_MemRxCpltCallback+0x7ec>
 8006b06:	4b8c      	ldr	r3, [pc, #560]	@ (8006d38 <HAL_I2C_MemRxCpltCallback+0x9b8>)
 8006b08:	885b      	ldrh	r3, [r3, #2]
 8006b0a:	ee07 3a90 	vmov	s15, r3
 8006b0e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006b12:	ed9f 6b83 	vldr	d6, [pc, #524]	@ 8006d20 <HAL_I2C_MemRxCpltCallback+0x9a0>
 8006b16:	ee27 6b06 	vmul.f64	d6, d7, d6
 8006b1a:	4b87      	ldr	r3, [pc, #540]	@ (8006d38 <HAL_I2C_MemRxCpltCallback+0x9b8>)
 8006b1c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8006b20:	ee07 3a90 	vmov	s15, r3
 8006b24:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006b28:	ee36 6b07 	vadd.f64	d6, d6, d7
 8006b2c:	4b82      	ldr	r3, [pc, #520]	@ (8006d38 <HAL_I2C_MemRxCpltCallback+0x9b8>)
 8006b2e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006b32:	ee07 3a90 	vmov	s15, r3
 8006b36:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006b3a:	ee36 6b47 	vsub.f64	d6, d6, d7
 8006b3e:	4b7e      	ldr	r3, [pc, #504]	@ (8006d38 <HAL_I2C_MemRxCpltCallback+0x9b8>)
 8006b40:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006b44:	ee07 3a90 	vmov	s15, r3
 8006b48:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006b4c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8006b50:	ed9f 6b75 	vldr	d6, [pc, #468]	@ 8006d28 <HAL_I2C_MemRxCpltCallback+0x9a8>
 8006b54:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006b58:	ed9f 6b75 	vldr	d6, [pc, #468]	@ 8006d30 <HAL_I2C_MemRxCpltCallback+0x9b0>
 8006b5c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006b60:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006b64:	ee17 3a90 	vmov	r3, s15
 8006b68:	b29b      	uxth	r3, r3
 8006b6a:	e001      	b.n	8006b70 <HAL_I2C_MemRxCpltCallback+0x7f0>
 8006b6c:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8006b70:	4a77      	ldr	r2, [pc, #476]	@ (8006d50 <HAL_I2C_MemRxCpltCallback+0x9d0>)
 8006b72:	8013      	strh	r3, [r2, #0]
			SPEED2 = (((uint32_t)((MYDRON.THRUST*0.7) - MYDRON.ROOL - MYDRON.PITCH - MYDRON.YAW + min_speed + 500)) < 20000) ? ((MYDRON.THRUST*0.7) - MYDRON.ROOL - MYDRON.PITCH - MYDRON.YAW + min_speed + 500) : 20000;//
 8006b74:	4b70      	ldr	r3, [pc, #448]	@ (8006d38 <HAL_I2C_MemRxCpltCallback+0x9b8>)
 8006b76:	885b      	ldrh	r3, [r3, #2]
 8006b78:	ee07 3a90 	vmov	s15, r3
 8006b7c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006b80:	ed9f 6b67 	vldr	d6, [pc, #412]	@ 8006d20 <HAL_I2C_MemRxCpltCallback+0x9a0>
 8006b84:	ee27 6b06 	vmul.f64	d6, d7, d6
 8006b88:	4b6b      	ldr	r3, [pc, #428]	@ (8006d38 <HAL_I2C_MemRxCpltCallback+0x9b8>)
 8006b8a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8006b8e:	ee07 3a90 	vmov	s15, r3
 8006b92:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006b96:	ee36 6b47 	vsub.f64	d6, d6, d7
 8006b9a:	4b67      	ldr	r3, [pc, #412]	@ (8006d38 <HAL_I2C_MemRxCpltCallback+0x9b8>)
 8006b9c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006ba0:	ee07 3a90 	vmov	s15, r3
 8006ba4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006ba8:	ee36 6b47 	vsub.f64	d6, d6, d7
 8006bac:	4b62      	ldr	r3, [pc, #392]	@ (8006d38 <HAL_I2C_MemRxCpltCallback+0x9b8>)
 8006bae:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006bb2:	ee07 3a90 	vmov	s15, r3
 8006bb6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006bba:	ee36 7b47 	vsub.f64	d7, d6, d7
 8006bbe:	ed9f 6b5a 	vldr	d6, [pc, #360]	@ 8006d28 <HAL_I2C_MemRxCpltCallback+0x9a8>
 8006bc2:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006bc6:	ed9f 6b5a 	vldr	d6, [pc, #360]	@ 8006d30 <HAL_I2C_MemRxCpltCallback+0x9b0>
 8006bca:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006bce:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006bd2:	ee17 2a90 	vmov	r2, s15
 8006bd6:	f644 631f 	movw	r3, #19999	@ 0x4e1f
 8006bda:	429a      	cmp	r2, r3
 8006bdc:	d832      	bhi.n	8006c44 <HAL_I2C_MemRxCpltCallback+0x8c4>
 8006bde:	4b56      	ldr	r3, [pc, #344]	@ (8006d38 <HAL_I2C_MemRxCpltCallback+0x9b8>)
 8006be0:	885b      	ldrh	r3, [r3, #2]
 8006be2:	ee07 3a90 	vmov	s15, r3
 8006be6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006bea:	ed9f 6b4d 	vldr	d6, [pc, #308]	@ 8006d20 <HAL_I2C_MemRxCpltCallback+0x9a0>
 8006bee:	ee27 6b06 	vmul.f64	d6, d7, d6
 8006bf2:	4b51      	ldr	r3, [pc, #324]	@ (8006d38 <HAL_I2C_MemRxCpltCallback+0x9b8>)
 8006bf4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8006bf8:	ee07 3a90 	vmov	s15, r3
 8006bfc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006c00:	ee36 6b47 	vsub.f64	d6, d6, d7
 8006c04:	4b4c      	ldr	r3, [pc, #304]	@ (8006d38 <HAL_I2C_MemRxCpltCallback+0x9b8>)
 8006c06:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006c0a:	ee07 3a90 	vmov	s15, r3
 8006c0e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006c12:	ee36 6b47 	vsub.f64	d6, d6, d7
 8006c16:	4b48      	ldr	r3, [pc, #288]	@ (8006d38 <HAL_I2C_MemRxCpltCallback+0x9b8>)
 8006c18:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006c1c:	ee07 3a90 	vmov	s15, r3
 8006c20:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006c24:	ee36 7b47 	vsub.f64	d7, d6, d7
 8006c28:	ed9f 6b3f 	vldr	d6, [pc, #252]	@ 8006d28 <HAL_I2C_MemRxCpltCallback+0x9a8>
 8006c2c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006c30:	ed9f 6b3f 	vldr	d6, [pc, #252]	@ 8006d30 <HAL_I2C_MemRxCpltCallback+0x9b0>
 8006c34:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006c38:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006c3c:	ee17 3a90 	vmov	r3, s15
 8006c40:	b29b      	uxth	r3, r3
 8006c42:	e001      	b.n	8006c48 <HAL_I2C_MemRxCpltCallback+0x8c8>
 8006c44:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8006c48:	4a42      	ldr	r2, [pc, #264]	@ (8006d54 <HAL_I2C_MemRxCpltCallback+0x9d4>)
 8006c4a:	8013      	strh	r3, [r2, #0]
			SPEED3 = (((uint32_t)((MYDRON.THRUST*0.7) + MYDRON.ROOL + MYDRON.PITCH - MYDRON.YAW + min_speed + 500)) < 20000) ? ((MYDRON.THRUST*0.7) + MYDRON.ROOL + MYDRON.PITCH - MYDRON.YAW + min_speed + 500) : 20000;//
 8006c4c:	4b3a      	ldr	r3, [pc, #232]	@ (8006d38 <HAL_I2C_MemRxCpltCallback+0x9b8>)
 8006c4e:	885b      	ldrh	r3, [r3, #2]
 8006c50:	ee07 3a90 	vmov	s15, r3
 8006c54:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006c58:	ed9f 6b31 	vldr	d6, [pc, #196]	@ 8006d20 <HAL_I2C_MemRxCpltCallback+0x9a0>
 8006c5c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8006c60:	4b35      	ldr	r3, [pc, #212]	@ (8006d38 <HAL_I2C_MemRxCpltCallback+0x9b8>)
 8006c62:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8006c66:	ee07 3a90 	vmov	s15, r3
 8006c6a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006c6e:	ee36 6b07 	vadd.f64	d6, d6, d7
 8006c72:	4b31      	ldr	r3, [pc, #196]	@ (8006d38 <HAL_I2C_MemRxCpltCallback+0x9b8>)
 8006c74:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006c78:	ee07 3a90 	vmov	s15, r3
 8006c7c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006c80:	ee36 6b07 	vadd.f64	d6, d6, d7
 8006c84:	4b2c      	ldr	r3, [pc, #176]	@ (8006d38 <HAL_I2C_MemRxCpltCallback+0x9b8>)
 8006c86:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006c8a:	ee07 3a90 	vmov	s15, r3
 8006c8e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006c92:	ee36 7b47 	vsub.f64	d7, d6, d7
 8006c96:	ed9f 6b24 	vldr	d6, [pc, #144]	@ 8006d28 <HAL_I2C_MemRxCpltCallback+0x9a8>
 8006c9a:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006c9e:	ed9f 6b24 	vldr	d6, [pc, #144]	@ 8006d30 <HAL_I2C_MemRxCpltCallback+0x9b0>
 8006ca2:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006ca6:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006caa:	ee17 2a90 	vmov	r2, s15
 8006cae:	f644 631f 	movw	r3, #19999	@ 0x4e1f
 8006cb2:	429a      	cmp	r2, r3
 8006cb4:	d850      	bhi.n	8006d58 <HAL_I2C_MemRxCpltCallback+0x9d8>
 8006cb6:	4b20      	ldr	r3, [pc, #128]	@ (8006d38 <HAL_I2C_MemRxCpltCallback+0x9b8>)
 8006cb8:	885b      	ldrh	r3, [r3, #2]
 8006cba:	ee07 3a90 	vmov	s15, r3
 8006cbe:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006cc2:	ed9f 6b17 	vldr	d6, [pc, #92]	@ 8006d20 <HAL_I2C_MemRxCpltCallback+0x9a0>
 8006cc6:	ee27 6b06 	vmul.f64	d6, d7, d6
 8006cca:	4b1b      	ldr	r3, [pc, #108]	@ (8006d38 <HAL_I2C_MemRxCpltCallback+0x9b8>)
 8006ccc:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8006cd0:	ee07 3a90 	vmov	s15, r3
 8006cd4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006cd8:	ee36 6b07 	vadd.f64	d6, d6, d7
 8006cdc:	4b16      	ldr	r3, [pc, #88]	@ (8006d38 <HAL_I2C_MemRxCpltCallback+0x9b8>)
 8006cde:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006ce2:	ee07 3a90 	vmov	s15, r3
 8006ce6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006cea:	ee36 6b07 	vadd.f64	d6, d6, d7
 8006cee:	4b12      	ldr	r3, [pc, #72]	@ (8006d38 <HAL_I2C_MemRxCpltCallback+0x9b8>)
 8006cf0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006cf4:	ee07 3a90 	vmov	s15, r3
 8006cf8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006cfc:	ee36 7b47 	vsub.f64	d7, d6, d7
 8006d00:	ed9f 6b09 	vldr	d6, [pc, #36]	@ 8006d28 <HAL_I2C_MemRxCpltCallback+0x9a8>
 8006d04:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006d08:	ed9f 6b09 	vldr	d6, [pc, #36]	@ 8006d30 <HAL_I2C_MemRxCpltCallback+0x9b0>
 8006d0c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006d10:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006d14:	ee17 3a90 	vmov	r3, s15
 8006d18:	b29b      	uxth	r3, r3
 8006d1a:	e01f      	b.n	8006d5c <HAL_I2C_MemRxCpltCallback+0x9dc>
 8006d1c:	f3af 8000 	nop.w
 8006d20:	66666666 	.word	0x66666666
 8006d24:	3fe66666 	.word	0x3fe66666
 8006d28:	00000000 	.word	0x00000000
 8006d2c:	40c48200 	.word	0x40c48200
 8006d30:	00000000 	.word	0x00000000
 8006d34:	407f4000 	.word	0x407f4000
 8006d38:	00000158 	.word	0x00000158
 8006d3c:	0000403e 	.word	0x0000403e
 8006d40:	000040d0 	.word	0x000040d0
 8006d44:	000040e4 	.word	0x000040e4
 8006d48:	00004058 	.word	0x00004058
 8006d4c:	0000405c 	.word	0x0000405c
 8006d50:	0000416c 	.word	0x0000416c
 8006d54:	0000416e 	.word	0x0000416e
 8006d58:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8006d5c:	4a9a      	ldr	r2, [pc, #616]	@ (8006fc8 <HAL_I2C_MemRxCpltCallback+0xc48>)
 8006d5e:	8013      	strh	r3, [r2, #0]
			SPEED4 = (((uint32_t)((MYDRON.THRUST*0.7) - MYDRON.ROOL + MYDRON.PITCH + MYDRON.YAW + min_speed + 500)) < 20000) ? ((MYDRON.THRUST*0.7) - MYDRON.ROOL + MYDRON.PITCH + MYDRON.YAW + min_speed + 500) : 20000;//
 8006d60:	4b9a      	ldr	r3, [pc, #616]	@ (8006fcc <HAL_I2C_MemRxCpltCallback+0xc4c>)
 8006d62:	885b      	ldrh	r3, [r3, #2]
 8006d64:	ee07 3a90 	vmov	s15, r3
 8006d68:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006d6c:	ed9f 6b8a 	vldr	d6, [pc, #552]	@ 8006f98 <HAL_I2C_MemRxCpltCallback+0xc18>
 8006d70:	ee27 6b06 	vmul.f64	d6, d7, d6
 8006d74:	4b95      	ldr	r3, [pc, #596]	@ (8006fcc <HAL_I2C_MemRxCpltCallback+0xc4c>)
 8006d76:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8006d7a:	ee07 3a90 	vmov	s15, r3
 8006d7e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006d82:	ee36 6b47 	vsub.f64	d6, d6, d7
 8006d86:	4b91      	ldr	r3, [pc, #580]	@ (8006fcc <HAL_I2C_MemRxCpltCallback+0xc4c>)
 8006d88:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006d8c:	ee07 3a90 	vmov	s15, r3
 8006d90:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006d94:	ee36 6b07 	vadd.f64	d6, d6, d7
 8006d98:	4b8c      	ldr	r3, [pc, #560]	@ (8006fcc <HAL_I2C_MemRxCpltCallback+0xc4c>)
 8006d9a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006d9e:	ee07 3a90 	vmov	s15, r3
 8006da2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006da6:	ee36 7b07 	vadd.f64	d7, d6, d7
 8006daa:	ed9f 6b7d 	vldr	d6, [pc, #500]	@ 8006fa0 <HAL_I2C_MemRxCpltCallback+0xc20>
 8006dae:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006db2:	ed9f 6b7d 	vldr	d6, [pc, #500]	@ 8006fa8 <HAL_I2C_MemRxCpltCallback+0xc28>
 8006db6:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006dba:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006dbe:	ee17 2a90 	vmov	r2, s15
 8006dc2:	f644 631f 	movw	r3, #19999	@ 0x4e1f
 8006dc6:	429a      	cmp	r2, r3
 8006dc8:	d832      	bhi.n	8006e30 <HAL_I2C_MemRxCpltCallback+0xab0>
 8006dca:	4b80      	ldr	r3, [pc, #512]	@ (8006fcc <HAL_I2C_MemRxCpltCallback+0xc4c>)
 8006dcc:	885b      	ldrh	r3, [r3, #2]
 8006dce:	ee07 3a90 	vmov	s15, r3
 8006dd2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006dd6:	ed9f 6b70 	vldr	d6, [pc, #448]	@ 8006f98 <HAL_I2C_MemRxCpltCallback+0xc18>
 8006dda:	ee27 6b06 	vmul.f64	d6, d7, d6
 8006dde:	4b7b      	ldr	r3, [pc, #492]	@ (8006fcc <HAL_I2C_MemRxCpltCallback+0xc4c>)
 8006de0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8006de4:	ee07 3a90 	vmov	s15, r3
 8006de8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006dec:	ee36 6b47 	vsub.f64	d6, d6, d7
 8006df0:	4b76      	ldr	r3, [pc, #472]	@ (8006fcc <HAL_I2C_MemRxCpltCallback+0xc4c>)
 8006df2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006df6:	ee07 3a90 	vmov	s15, r3
 8006dfa:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006dfe:	ee36 6b07 	vadd.f64	d6, d6, d7
 8006e02:	4b72      	ldr	r3, [pc, #456]	@ (8006fcc <HAL_I2C_MemRxCpltCallback+0xc4c>)
 8006e04:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006e08:	ee07 3a90 	vmov	s15, r3
 8006e0c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006e10:	ee36 7b07 	vadd.f64	d7, d6, d7
 8006e14:	ed9f 6b62 	vldr	d6, [pc, #392]	@ 8006fa0 <HAL_I2C_MemRxCpltCallback+0xc20>
 8006e18:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006e1c:	ed9f 6b62 	vldr	d6, [pc, #392]	@ 8006fa8 <HAL_I2C_MemRxCpltCallback+0xc28>
 8006e20:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006e24:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006e28:	ee17 3a90 	vmov	r3, s15
 8006e2c:	b29b      	uxth	r3, r3
 8006e2e:	e001      	b.n	8006e34 <HAL_I2C_MemRxCpltCallback+0xab4>
 8006e30:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8006e34:	4a66      	ldr	r2, [pc, #408]	@ (8006fd0 <HAL_I2C_MemRxCpltCallback+0xc50>)
 8006e36:	8013      	strh	r3, [r2, #0]

			if(SPEED1 != OLD_SPEED1){
 8006e38:	4b66      	ldr	r3, [pc, #408]	@ (8006fd4 <HAL_I2C_MemRxCpltCallback+0xc54>)
 8006e3a:	881a      	ldrh	r2, [r3, #0]
 8006e3c:	4b66      	ldr	r3, [pc, #408]	@ (8006fd8 <HAL_I2C_MemRxCpltCallback+0xc58>)
 8006e3e:	881b      	ldrh	r3, [r3, #0]
 8006e40:	429a      	cmp	r2, r3
 8006e42:	d004      	beq.n	8006e4e <HAL_I2C_MemRxCpltCallback+0xace>
				ESC_1_SPEED(SPEED1);
 8006e44:	4b63      	ldr	r3, [pc, #396]	@ (8006fd4 <HAL_I2C_MemRxCpltCallback+0xc54>)
 8006e46:	881b      	ldrh	r3, [r3, #0]
 8006e48:	4618      	mov	r0, r3
 8006e4a:	f7f9 fff3 	bl	8000e34 <ESC_1_SPEED>
			}
			if(SPEED2 != OLD_SPEED2){
 8006e4e:	4b63      	ldr	r3, [pc, #396]	@ (8006fdc <HAL_I2C_MemRxCpltCallback+0xc5c>)
 8006e50:	881a      	ldrh	r2, [r3, #0]
 8006e52:	4b63      	ldr	r3, [pc, #396]	@ (8006fe0 <HAL_I2C_MemRxCpltCallback+0xc60>)
 8006e54:	881b      	ldrh	r3, [r3, #0]
 8006e56:	429a      	cmp	r2, r3
 8006e58:	d004      	beq.n	8006e64 <HAL_I2C_MemRxCpltCallback+0xae4>
				ESC_2_SPEED(SPEED2);
 8006e5a:	4b60      	ldr	r3, [pc, #384]	@ (8006fdc <HAL_I2C_MemRxCpltCallback+0xc5c>)
 8006e5c:	881b      	ldrh	r3, [r3, #0]
 8006e5e:	4618      	mov	r0, r3
 8006e60:	f7fa f80a 	bl	8000e78 <ESC_2_SPEED>
			}
			if(SPEED3 != OLD_SPEED3){
 8006e64:	4b58      	ldr	r3, [pc, #352]	@ (8006fc8 <HAL_I2C_MemRxCpltCallback+0xc48>)
 8006e66:	881a      	ldrh	r2, [r3, #0]
 8006e68:	4b5e      	ldr	r3, [pc, #376]	@ (8006fe4 <HAL_I2C_MemRxCpltCallback+0xc64>)
 8006e6a:	881b      	ldrh	r3, [r3, #0]
 8006e6c:	429a      	cmp	r2, r3
 8006e6e:	d004      	beq.n	8006e7a <HAL_I2C_MemRxCpltCallback+0xafa>
				ESC_3_SPEED(SPEED3);
 8006e70:	4b55      	ldr	r3, [pc, #340]	@ (8006fc8 <HAL_I2C_MemRxCpltCallback+0xc48>)
 8006e72:	881b      	ldrh	r3, [r3, #0]
 8006e74:	4618      	mov	r0, r3
 8006e76:	f7fa f821 	bl	8000ebc <ESC_3_SPEED>
			}
			if(SPEED4 != OLD_SPEED4){
 8006e7a:	4b55      	ldr	r3, [pc, #340]	@ (8006fd0 <HAL_I2C_MemRxCpltCallback+0xc50>)
 8006e7c:	881a      	ldrh	r2, [r3, #0]
 8006e7e:	4b5a      	ldr	r3, [pc, #360]	@ (8006fe8 <HAL_I2C_MemRxCpltCallback+0xc68>)
 8006e80:	881b      	ldrh	r3, [r3, #0]
 8006e82:	429a      	cmp	r2, r3
 8006e84:	d004      	beq.n	8006e90 <HAL_I2C_MemRxCpltCallback+0xb10>
				ESC_4_SPEED(SPEED4);
 8006e86:	4b52      	ldr	r3, [pc, #328]	@ (8006fd0 <HAL_I2C_MemRxCpltCallback+0xc50>)
 8006e88:	881b      	ldrh	r3, [r3, #0]
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	f7fa f838 	bl	8000f00 <ESC_4_SPEED>
			}

			OLD_SPEED1 = SPEED1;
 8006e90:	4b50      	ldr	r3, [pc, #320]	@ (8006fd4 <HAL_I2C_MemRxCpltCallback+0xc54>)
 8006e92:	881a      	ldrh	r2, [r3, #0]
 8006e94:	4b50      	ldr	r3, [pc, #320]	@ (8006fd8 <HAL_I2C_MemRxCpltCallback+0xc58>)
 8006e96:	801a      	strh	r2, [r3, #0]
			OLD_SPEED2 = SPEED2;
 8006e98:	4b50      	ldr	r3, [pc, #320]	@ (8006fdc <HAL_I2C_MemRxCpltCallback+0xc5c>)
 8006e9a:	881a      	ldrh	r2, [r3, #0]
 8006e9c:	4b50      	ldr	r3, [pc, #320]	@ (8006fe0 <HAL_I2C_MemRxCpltCallback+0xc60>)
 8006e9e:	801a      	strh	r2, [r3, #0]
			OLD_SPEED3 = SPEED3;
 8006ea0:	4b49      	ldr	r3, [pc, #292]	@ (8006fc8 <HAL_I2C_MemRxCpltCallback+0xc48>)
 8006ea2:	881a      	ldrh	r2, [r3, #0]
 8006ea4:	4b4f      	ldr	r3, [pc, #316]	@ (8006fe4 <HAL_I2C_MemRxCpltCallback+0xc64>)
 8006ea6:	801a      	strh	r2, [r3, #0]
			OLD_SPEED4 = SPEED4;
 8006ea8:	4b49      	ldr	r3, [pc, #292]	@ (8006fd0 <HAL_I2C_MemRxCpltCallback+0xc50>)
 8006eaa:	881a      	ldrh	r2, [r3, #0]
 8006eac:	4b4e      	ldr	r3, [pc, #312]	@ (8006fe8 <HAL_I2C_MemRxCpltCallback+0xc68>)
 8006eae:	801a      	strh	r2, [r3, #0]

			LED_G_0;
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006eb6:	484d      	ldr	r0, [pc, #308]	@ (8006fec <HAL_I2C_MemRxCpltCallback+0xc6c>)
 8006eb8:	f007 fb2a 	bl	800e510 <HAL_GPIO_WritePin>
	}
	if(HMC583L_IRQ == 1){
 8006ebc:	4b4c      	ldr	r3, [pc, #304]	@ (8006ff0 <HAL_I2C_MemRxCpltCallback+0xc70>)
 8006ebe:	781b      	ldrb	r3, [r3, #0]
 8006ec0:	2b01      	cmp	r3, #1
 8006ec2:	d132      	bne.n	8006f2a <HAL_I2C_MemRxCpltCallback+0xbaa>
		HMC583L_IRQ = 0;
 8006ec4:	4b4a      	ldr	r3, [pc, #296]	@ (8006ff0 <HAL_I2C_MemRxCpltCallback+0xc70>)
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	701a      	strb	r2, [r3, #0]
		Mag_Z = (float)(HMC5883L_Get_Z_End_IT() - Mag_Offset_val);
 8006eca:	f7fa f91d 	bl	8001108 <HMC5883L_Get_Z_End_IT>
 8006ece:	4603      	mov	r3, r0
 8006ed0:	461a      	mov	r2, r3
 8006ed2:	4b48      	ldr	r3, [pc, #288]	@ (8006ff4 <HAL_I2C_MemRxCpltCallback+0xc74>)
 8006ed4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006ed8:	1ad3      	subs	r3, r2, r3
 8006eda:	ee07 3a90 	vmov	s15, r3
 8006ede:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006ee2:	4b45      	ldr	r3, [pc, #276]	@ (8006ff8 <HAL_I2C_MemRxCpltCallback+0xc78>)
 8006ee4:	edc3 7a00 	vstr	s15, [r3]
		Mag_Z = (Mag_Z * (FDP_Mag_Z_FQ * 0.1) / (1 + (FDP_Mag_Z_FQ * 0.1))) + (Old_Mag_Z * (1 / (1 + (FDP_Mag_Z_FQ * 0.1)))); // 0.1 to looptime, co 100ms odczyt
 8006ee8:	4b43      	ldr	r3, [pc, #268]	@ (8006ff8 <HAL_I2C_MemRxCpltCallback+0xc78>)
 8006eea:	edd3 7a00 	vldr	s15, [r3]
 8006eee:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8006ef2:	ed9f 6b2f 	vldr	d6, [pc, #188]	@ 8006fb0 <HAL_I2C_MemRxCpltCallback+0xc30>
 8006ef6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006efa:	ed9f 5b2f 	vldr	d5, [pc, #188]	@ 8006fb8 <HAL_I2C_MemRxCpltCallback+0xc38>
 8006efe:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8006f02:	4b3e      	ldr	r3, [pc, #248]	@ (8006ffc <HAL_I2C_MemRxCpltCallback+0xc7c>)
 8006f04:	edd3 7a00 	vldr	s15, [r3]
 8006f08:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8006f0c:	ed9f 5b2c 	vldr	d5, [pc, #176]	@ 8006fc0 <HAL_I2C_MemRxCpltCallback+0xc40>
 8006f10:	ee27 7b05 	vmul.f64	d7, d7, d5
 8006f14:	ee36 7b07 	vadd.f64	d7, d6, d7
 8006f18:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8006f1c:	4b36      	ldr	r3, [pc, #216]	@ (8006ff8 <HAL_I2C_MemRxCpltCallback+0xc78>)
 8006f1e:	edc3 7a00 	vstr	s15, [r3]
		Old_Mag_Z = Mag_Z;
 8006f22:	4b35      	ldr	r3, [pc, #212]	@ (8006ff8 <HAL_I2C_MemRxCpltCallback+0xc78>)
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	4a35      	ldr	r2, [pc, #212]	@ (8006ffc <HAL_I2C_MemRxCpltCallback+0xc7c>)
 8006f28:	6013      	str	r3, [r2, #0]
	}
	if(BMP180_IRQ == 1){
 8006f2a:	4b35      	ldr	r3, [pc, #212]	@ (8007000 <HAL_I2C_MemRxCpltCallback+0xc80>)
 8006f2c:	781b      	ldrb	r3, [r3, #0]
 8006f2e:	2b01      	cmp	r3, #1
 8006f30:	d113      	bne.n	8006f5a <HAL_I2C_MemRxCpltCallback+0xbda>
		temperature = BMP180_GET_temp_IT();
 8006f32:	f7f9 fc2d 	bl	8000790 <BMP180_GET_temp_IT>
 8006f36:	4603      	mov	r3, r0
 8006f38:	461a      	mov	r2, r3
 8006f3a:	4b32      	ldr	r3, [pc, #200]	@ (8007004 <HAL_I2C_MemRxCpltCallback+0xc84>)
 8006f3c:	601a      	str	r2, [r3, #0]
		temp = BMP180_GET_temp(temperature);
 8006f3e:	4b31      	ldr	r3, [pc, #196]	@ (8007004 <HAL_I2C_MemRxCpltCallback+0xc84>)
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	b29b      	uxth	r3, r3
 8006f44:	4618      	mov	r0, r3
 8006f46:	f7f9 fd47 	bl	80009d8 <BMP180_GET_temp>
 8006f4a:	eef0 7a40 	vmov.f32	s15, s0
 8006f4e:	4b2e      	ldr	r3, [pc, #184]	@ (8007008 <HAL_I2C_MemRxCpltCallback+0xc88>)
 8006f50:	edc3 7a00 	vstr	s15, [r3]
		BMP180_IRQ = 0;
 8006f54:	4b2a      	ldr	r3, [pc, #168]	@ (8007000 <HAL_I2C_MemRxCpltCallback+0xc80>)
 8006f56:	2200      	movs	r2, #0
 8006f58:	701a      	strb	r2, [r3, #0]
	}
	if(BMP180_IRQ == 2){
 8006f5a:	4b29      	ldr	r3, [pc, #164]	@ (8007000 <HAL_I2C_MemRxCpltCallback+0xc80>)
 8006f5c:	781b      	ldrb	r3, [r3, #0]
 8006f5e:	2b02      	cmp	r3, #2
 8006f60:	d113      	bne.n	8006f8a <HAL_I2C_MemRxCpltCallback+0xc0a>
		pressure = BMP180_GET_pres_IT();
 8006f62:	f7f9 fc2b 	bl	80007bc <BMP180_GET_pres_IT>
 8006f66:	4603      	mov	r3, r0
 8006f68:	461a      	mov	r2, r3
 8006f6a:	4b28      	ldr	r3, [pc, #160]	@ (800700c <HAL_I2C_MemRxCpltCallback+0xc8c>)
 8006f6c:	601a      	str	r2, [r3, #0]
		pres = BMP180_GET_pres(pressure);
 8006f6e:	4b27      	ldr	r3, [pc, #156]	@ (800700c <HAL_I2C_MemRxCpltCallback+0xc8c>)
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	b29b      	uxth	r3, r3
 8006f74:	4618      	mov	r0, r3
 8006f76:	f7f9 fd8b 	bl	8000a90 <BMP180_GET_pres>
 8006f7a:	eef0 7a40 	vmov.f32	s15, s0
 8006f7e:	4b24      	ldr	r3, [pc, #144]	@ (8007010 <HAL_I2C_MemRxCpltCallback+0xc90>)
 8006f80:	edc3 7a00 	vstr	s15, [r3]
		BMP180_IRQ = 0;
 8006f84:	4b1e      	ldr	r3, [pc, #120]	@ (8007000 <HAL_I2C_MemRxCpltCallback+0xc80>)
 8006f86:	2200      	movs	r2, #0
 8006f88:	701a      	strb	r2, [r3, #0]
	}
}
 8006f8a:	bf00      	nop
 8006f8c:	3708      	adds	r7, #8
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	bd80      	pop	{r7, pc}
 8006f92:	bf00      	nop
 8006f94:	f3af 8000 	nop.w
 8006f98:	66666666 	.word	0x66666666
 8006f9c:	3fe66666 	.word	0x3fe66666
 8006fa0:	00000000 	.word	0x00000000
 8006fa4:	40c48200 	.word	0x40c48200
 8006fa8:	00000000 	.word	0x00000000
 8006fac:	407f4000 	.word	0x407f4000
 8006fb0:	9999999a 	.word	0x9999999a
 8006fb4:	3fc99999 	.word	0x3fc99999
 8006fb8:	33333333 	.word	0x33333333
 8006fbc:	3ff33333 	.word	0x3ff33333
 8006fc0:	aaaaaaab 	.word	0xaaaaaaab
 8006fc4:	3feaaaaa 	.word	0x3feaaaaa
 8006fc8:	00004170 	.word	0x00004170
 8006fcc:	00000158 	.word	0x00000158
 8006fd0:	00004172 	.word	0x00004172
 8006fd4:	0000416c 	.word	0x0000416c
 8006fd8:	00004174 	.word	0x00004174
 8006fdc:	0000416e 	.word	0x0000416e
 8006fe0:	00004176 	.word	0x00004176
 8006fe4:	00004178 	.word	0x00004178
 8006fe8:	0000417a 	.word	0x0000417a
 8006fec:	58021000 	.word	0x58021000
 8006ff0:	000041b5 	.word	0x000041b5
 8006ff4:	00000050 	.word	0x00000050
 8006ff8:	00000048 	.word	0x00000048
 8006ffc:	0000004c 	.word	0x0000004c
 8007000:	000041b6 	.word	0x000041b6
 8007004:	000000a0 	.word	0x000000a0
 8007008:	000000c4 	.word	0x000000c4
 800700c:	000000a4 	.word	0x000000a4
 8007010:	000000c8 	.word	0x000000c8

08007014 <convert_array_to_value>:


void convert_array_to_value(uint8_t arrayfrom[], int16_t *value , uint8_t rangebegin, uint8_t rangeend){
 8007014:	b580      	push	{r7, lr}
 8007016:	ed2d 8b04 	vpush	{d8-d9}
 800701a:	b086      	sub	sp, #24
 800701c:	af00      	add	r7, sp, #0
 800701e:	60f8      	str	r0, [r7, #12]
 8007020:	60b9      	str	r1, [r7, #8]
 8007022:	4611      	mov	r1, r2
 8007024:	461a      	mov	r2, r3
 8007026:	460b      	mov	r3, r1
 8007028:	71fb      	strb	r3, [r7, #7]
 800702a:	4613      	mov	r3, r2
 800702c:	71bb      	strb	r3, [r7, #6]
	*value = 0;
 800702e:	68bb      	ldr	r3, [r7, #8]
 8007030:	2200      	movs	r2, #0
 8007032:	801a      	strh	r2, [r3, #0]
	int range = rangeend - rangebegin;
 8007034:	79ba      	ldrb	r2, [r7, #6]
 8007036:	79fb      	ldrb	r3, [r7, #7]
 8007038:	1ad3      	subs	r3, r2, r3
 800703a:	613b      	str	r3, [r7, #16]

	for(int y = 0; y < range+1; y++){
 800703c:	2300      	movs	r3, #0
 800703e:	617b      	str	r3, [r7, #20]
 8007040:	e02e      	b.n	80070a0 <convert_array_to_value+0x8c>
		*value = *value + arrayfrom[rangebegin+y]*pow(10, range - y);
 8007042:	68bb      	ldr	r3, [r7, #8]
 8007044:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007048:	ee07 3a90 	vmov	s15, r3
 800704c:	eeb8 8be7 	vcvt.f64.s32	d8, s15
 8007050:	79fa      	ldrb	r2, [r7, #7]
 8007052:	697b      	ldr	r3, [r7, #20]
 8007054:	4413      	add	r3, r2
 8007056:	461a      	mov	r2, r3
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	4413      	add	r3, r2
 800705c:	781b      	ldrb	r3, [r3, #0]
 800705e:	ee07 3a90 	vmov	s15, r3
 8007062:	eeb8 9be7 	vcvt.f64.s32	d9, s15
 8007066:	693a      	ldr	r2, [r7, #16]
 8007068:	697b      	ldr	r3, [r7, #20]
 800706a:	1ad3      	subs	r3, r2, r3
 800706c:	ee07 3a90 	vmov	s15, r3
 8007070:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8007074:	eeb0 1b47 	vmov.f64	d1, d7
 8007078:	eeb2 0b04 	vmov.f64	d0, #36	@ 0x41200000  10.0
 800707c:	f016 ff4c 	bl	801df18 <pow>
 8007080:	eeb0 7b40 	vmov.f64	d7, d0
 8007084:	ee29 7b07 	vmul.f64	d7, d9, d7
 8007088:	ee38 7b07 	vadd.f64	d7, d8, d7
 800708c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8007090:	ee17 3a90 	vmov	r3, s15
 8007094:	b21a      	sxth	r2, r3
 8007096:	68bb      	ldr	r3, [r7, #8]
 8007098:	801a      	strh	r2, [r3, #0]
	for(int y = 0; y < range+1; y++){
 800709a:	697b      	ldr	r3, [r7, #20]
 800709c:	3301      	adds	r3, #1
 800709e:	617b      	str	r3, [r7, #20]
 80070a0:	693a      	ldr	r2, [r7, #16]
 80070a2:	697b      	ldr	r3, [r7, #20]
 80070a4:	429a      	cmp	r2, r3
 80070a6:	dacc      	bge.n	8007042 <convert_array_to_value+0x2e>
	}

}
 80070a8:	bf00      	nop
 80070aa:	bf00      	nop
 80070ac:	3718      	adds	r7, #24
 80070ae:	46bd      	mov	sp, r7
 80070b0:	ecbd 8b04 	vpop	{d8-d9}
 80070b4:	bd80      	pop	{r7, pc}

080070b6 <convert_value_to_array>:


void convert_value_to_array(int16_t value, uint8_t *arraytoputin, uint8_t rangebegin, uint8_t rangeend){
 80070b6:	b590      	push	{r4, r7, lr}
 80070b8:	b087      	sub	sp, #28
 80070ba:	af00      	add	r7, sp, #0
 80070bc:	6039      	str	r1, [r7, #0]
 80070be:	4611      	mov	r1, r2
 80070c0:	461a      	mov	r2, r3
 80070c2:	4603      	mov	r3, r0
 80070c4:	80fb      	strh	r3, [r7, #6]
 80070c6:	460b      	mov	r3, r1
 80070c8:	717b      	strb	r3, [r7, #5]
 80070ca:	4613      	mov	r3, r2
 80070cc:	713b      	strb	r3, [r7, #4]
	int x = 0;
 80070ce:	2300      	movs	r3, #0
 80070d0:	617b      	str	r3, [r7, #20]
	int loopnum = 0;
 80070d2:	2300      	movs	r3, #0
 80070d4:	613b      	str	r3, [r7, #16]
	int range = rangeend - rangebegin;
 80070d6:	793a      	ldrb	r2, [r7, #4]
 80070d8:	797b      	ldrb	r3, [r7, #5]
 80070da:	1ad3      	subs	r3, r2, r3
 80070dc:	60bb      	str	r3, [r7, #8]
	for(int i = 0; i < range+1; i++){// 3
 80070de:	2300      	movs	r3, #0
 80070e0:	60fb      	str	r3, [r7, #12]
 80070e2:	e03e      	b.n	8007162 <convert_value_to_array+0xac>
		while(value >= (uint16_t)pow(10,range - i)){
			if(value == 0){
 80070e4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d028      	beq.n	800713e <convert_value_to_array+0x88>
				break;
			}
			value -= (uint16_t)potenga(10,range - i);
 80070ec:	68ba      	ldr	r2, [r7, #8]
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	1ad3      	subs	r3, r2, r3
 80070f2:	4619      	mov	r1, r3
 80070f4:	200a      	movs	r0, #10
 80070f6:	f000 f83d 	bl	8007174 <potenga>
 80070fa:	4603      	mov	r3, r0
 80070fc:	b29b      	uxth	r3, r3
 80070fe:	88fa      	ldrh	r2, [r7, #6]
 8007100:	1ad3      	subs	r3, r2, r3
 8007102:	b29b      	uxth	r3, r3
 8007104:	80fb      	strh	r3, [r7, #6]
			x++;
 8007106:	697b      	ldr	r3, [r7, #20]
 8007108:	3301      	adds	r3, #1
 800710a:	617b      	str	r3, [r7, #20]
		while(value >= (uint16_t)pow(10,range - i)){
 800710c:	f9b7 4006 	ldrsh.w	r4, [r7, #6]
 8007110:	68ba      	ldr	r2, [r7, #8]
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	1ad3      	subs	r3, r2, r3
 8007116:	ee07 3a90 	vmov	s15, r3
 800711a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800711e:	eeb0 1b47 	vmov.f64	d1, d7
 8007122:	eeb2 0b04 	vmov.f64	d0, #36	@ 0x41200000  10.0
 8007126:	f016 fef7 	bl	801df18 <pow>
 800712a:	eeb0 7b40 	vmov.f64	d7, d0
 800712e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8007132:	ee17 3a90 	vmov	r3, s15
 8007136:	b29b      	uxth	r3, r3
 8007138:	429c      	cmp	r4, r3
 800713a:	dad3      	bge.n	80070e4 <convert_value_to_array+0x2e>
 800713c:	e000      	b.n	8007140 <convert_value_to_array+0x8a>
				break;
 800713e:	bf00      	nop
		}
		arraytoputin[rangebegin+loopnum] = (uint8_t)x;
 8007140:	797a      	ldrb	r2, [r7, #5]
 8007142:	693b      	ldr	r3, [r7, #16]
 8007144:	4413      	add	r3, r2
 8007146:	461a      	mov	r2, r3
 8007148:	683b      	ldr	r3, [r7, #0]
 800714a:	4413      	add	r3, r2
 800714c:	697a      	ldr	r2, [r7, #20]
 800714e:	b2d2      	uxtb	r2, r2
 8007150:	701a      	strb	r2, [r3, #0]
		loopnum++;
 8007152:	693b      	ldr	r3, [r7, #16]
 8007154:	3301      	adds	r3, #1
 8007156:	613b      	str	r3, [r7, #16]
		x = 0;
 8007158:	2300      	movs	r3, #0
 800715a:	617b      	str	r3, [r7, #20]
	for(int i = 0; i < range+1; i++){// 3
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	3301      	adds	r3, #1
 8007160:	60fb      	str	r3, [r7, #12]
 8007162:	68ba      	ldr	r2, [r7, #8]
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	429a      	cmp	r2, r3
 8007168:	dad0      	bge.n	800710c <convert_value_to_array+0x56>
	}
}
 800716a:	bf00      	nop
 800716c:	bf00      	nop
 800716e:	371c      	adds	r7, #28
 8007170:	46bd      	mov	sp, r7
 8007172:	bd90      	pop	{r4, r7, pc}

08007174 <potenga>:
uint32_t potenga(int a, int b){
 8007174:	b480      	push	{r7}
 8007176:	b087      	sub	sp, #28
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
 800717c:	6039      	str	r1, [r7, #0]
	int32_t c = a;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	60fb      	str	r3, [r7, #12]
	if(b == 0){
 8007182:	683b      	ldr	r3, [r7, #0]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d101      	bne.n	800718c <potenga+0x18>
		return 1;
 8007188:	2301      	movs	r3, #1
 800718a:	e02d      	b.n	80071e8 <potenga+0x74>
	}
	if(b == 1){
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	2b01      	cmp	r3, #1
 8007190:	d101      	bne.n	8007196 <potenga+0x22>
		return a;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	e028      	b.n	80071e8 <potenga+0x74>
	}
	if(b > 1){
 8007196:	683b      	ldr	r3, [r7, #0]
 8007198:	2b01      	cmp	r3, #1
 800719a:	dd10      	ble.n	80071be <potenga+0x4a>
			for(int i = 1; i < b; i++){
 800719c:	2301      	movs	r3, #1
 800719e:	617b      	str	r3, [r7, #20]
 80071a0:	e007      	b.n	80071b2 <potenga+0x3e>
			a = a*c;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	68fa      	ldr	r2, [r7, #12]
 80071a6:	fb02 f303 	mul.w	r3, r2, r3
 80071aa:	607b      	str	r3, [r7, #4]
			for(int i = 1; i < b; i++){
 80071ac:	697b      	ldr	r3, [r7, #20]
 80071ae:	3301      	adds	r3, #1
 80071b0:	617b      	str	r3, [r7, #20]
 80071b2:	697a      	ldr	r2, [r7, #20]
 80071b4:	683b      	ldr	r3, [r7, #0]
 80071b6:	429a      	cmp	r2, r3
 80071b8:	dbf3      	blt.n	80071a2 <potenga+0x2e>
		}
		return a;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	e014      	b.n	80071e8 <potenga+0x74>
	}
	if(b < 0){
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	da10      	bge.n	80071e6 <potenga+0x72>
		for(int i = 0; i < b; i++){
 80071c4:	2300      	movs	r3, #0
 80071c6:	613b      	str	r3, [r7, #16]
 80071c8:	e007      	b.n	80071da <potenga+0x66>
			a = a/c;
 80071ca:	687a      	ldr	r2, [r7, #4]
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	fb92 f3f3 	sdiv	r3, r2, r3
 80071d2:	607b      	str	r3, [r7, #4]
		for(int i = 0; i < b; i++){
 80071d4:	693b      	ldr	r3, [r7, #16]
 80071d6:	3301      	adds	r3, #1
 80071d8:	613b      	str	r3, [r7, #16]
 80071da:	693a      	ldr	r2, [r7, #16]
 80071dc:	683b      	ldr	r3, [r7, #0]
 80071de:	429a      	cmp	r2, r3
 80071e0:	dbf3      	blt.n	80071ca <potenga+0x56>
		}
		return a;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	e000      	b.n	80071e8 <potenga+0x74>
	}
	return a;
 80071e6:	687b      	ldr	r3, [r7, #4]
}
 80071e8:	4618      	mov	r0, r3
 80071ea:	371c      	adds	r7, #28
 80071ec:	46bd      	mov	sp, r7
 80071ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f2:	4770      	bx	lr

080071f4 <WartoscBezwgledna>:
void valswitch(uint8_t x){
	if(x == 2){
		x = 0;
	}
}
float WartoscBezwgledna(float a){
 80071f4:	b480      	push	{r7}
 80071f6:	b083      	sub	sp, #12
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	ed87 0a01 	vstr	s0, [r7, #4]
	if(a < 0){
 80071fe:	edd7 7a01 	vldr	s15, [r7, #4]
 8007202:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007206:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800720a:	d504      	bpl.n	8007216 <WartoscBezwgledna+0x22>
		return a*(-1);
 800720c:	edd7 7a01 	vldr	s15, [r7, #4]
 8007210:	eef1 7a67 	vneg.f32	s15, s15
 8007214:	e001      	b.n	800721a <WartoscBezwgledna+0x26>
	}
	else{
		return a;
 8007216:	edd7 7a01 	vldr	s15, [r7, #4]
	}
}
 800721a:	eeb0 0a67 	vmov.f32	s0, s15
 800721e:	370c      	adds	r7, #12
 8007220:	46bd      	mov	sp, r7
 8007222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007226:	4770      	bx	lr

08007228 <RGB_LED_Set_color>:
    ITM_SendChar(*ptr++);
  }
  return len;
}

void RGB_LED_Set_color(uint8_t R, uint8_t G, uint8_t B){
 8007228:	b480      	push	{r7}
 800722a:	b083      	sub	sp, #12
 800722c:	af00      	add	r7, sp, #0
 800722e:	4603      	mov	r3, r0
 8007230:	71fb      	strb	r3, [r7, #7]
 8007232:	460b      	mov	r3, r1
 8007234:	71bb      	strb	r3, [r7, #6]
 8007236:	4613      	mov	r3, r2
 8007238:	717b      	strb	r3, [r7, #5]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, B);
 800723a:	4b09      	ldr	r3, [pc, #36]	@ (8007260 <RGB_LED_Set_color+0x38>)
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	797a      	ldrb	r2, [r7, #5]
 8007240:	639a      	str	r2, [r3, #56]	@ 0x38
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, R);
 8007242:	4b07      	ldr	r3, [pc, #28]	@ (8007260 <RGB_LED_Set_color+0x38>)
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	79fa      	ldrb	r2, [r7, #7]
 8007248:	63da      	str	r2, [r3, #60]	@ 0x3c
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, G);
 800724a:	4b05      	ldr	r3, [pc, #20]	@ (8007260 <RGB_LED_Set_color+0x38>)
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	79ba      	ldrb	r2, [r7, #6]
 8007250:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8007252:	bf00      	nop
 8007254:	370c      	adds	r7, #12
 8007256:	46bd      	mov	sp, r7
 8007258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725c:	4770      	bx	lr
 800725e:	bf00      	nop
 8007260:	24000380 	.word	0x24000380
 8007264:	00000000 	.word	0x00000000

08007268 <RGB_LED_For_BAT>:

void RGB_LED_For_BAT(uint8_t batval){
 8007268:	b580      	push	{r7, lr}
 800726a:	b082      	sub	sp, #8
 800726c:	af00      	add	r7, sp, #0
 800726e:	4603      	mov	r3, r0
 8007270:	71fb      	strb	r3, [r7, #7]
 * batval == 75	  r = 128 g = 128 b = 0
 * batval == 0    r = 255 g = 0 b = 0
 *
 *   r + g = 255
 */
	RGB_LED_Set_color((255 - ((float)batval*2.55)), ((float)batval*2.55), 0);
 8007272:	79fb      	ldrb	r3, [r7, #7]
 8007274:	ee07 3a90 	vmov	s15, r3
 8007278:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800727c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8007280:	ed9f 6b13 	vldr	d6, [pc, #76]	@ 80072d0 <RGB_LED_For_BAT+0x68>
 8007284:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007288:	ed9f 6b13 	vldr	d6, [pc, #76]	@ 80072d8 <RGB_LED_For_BAT+0x70>
 800728c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8007290:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8007294:	edc7 7a00 	vstr	s15, [r7]
 8007298:	783b      	ldrb	r3, [r7, #0]
 800729a:	b2db      	uxtb	r3, r3
 800729c:	79fa      	ldrb	r2, [r7, #7]
 800729e:	ee07 2a90 	vmov	s15, r2
 80072a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072a6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80072aa:	ed9f 6b09 	vldr	d6, [pc, #36]	@ 80072d0 <RGB_LED_For_BAT+0x68>
 80072ae:	ee27 7b06 	vmul.f64	d7, d7, d6
 80072b2:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80072b6:	edc7 7a00 	vstr	s15, [r7]
 80072ba:	783a      	ldrb	r2, [r7, #0]
 80072bc:	b2d1      	uxtb	r1, r2
 80072be:	2200      	movs	r2, #0
 80072c0:	4618      	mov	r0, r3
 80072c2:	f7ff ffb1 	bl	8007228 <RGB_LED_Set_color>
}
 80072c6:	bf00      	nop
 80072c8:	3708      	adds	r7, #8
 80072ca:	46bd      	mov	sp, r7
 80072cc:	bd80      	pop	{r7, pc}
 80072ce:	bf00      	nop
 80072d0:	66666666 	.word	0x66666666
 80072d4:	40046666 	.word	0x40046666
 80072d8:	00000000 	.word	0x00000000
 80072dc:	406fe000 	.word	0x406fe000

080072e0 <convert_value_to_array2>:
 *	[0] -
 *	[1] 2
 *	[2] 2
 */

void convert_value_to_array2(int16_t value, uint8_t *arraytoputin, uint8_t rangebegin, uint8_t rangeend){
 80072e0:	b590      	push	{r4, r7, lr}
 80072e2:	b087      	sub	sp, #28
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6039      	str	r1, [r7, #0]
 80072e8:	4611      	mov	r1, r2
 80072ea:	461a      	mov	r2, r3
 80072ec:	4603      	mov	r3, r0
 80072ee:	80fb      	strh	r3, [r7, #6]
 80072f0:	460b      	mov	r3, r1
 80072f2:	717b      	strb	r3, [r7, #5]
 80072f4:	4613      	mov	r3, r2
 80072f6:	713b      	strb	r3, [r7, #4]
	int x = 0;
 80072f8:	2300      	movs	r3, #0
 80072fa:	617b      	str	r3, [r7, #20]
	int loopnum = 0;
 80072fc:	2300      	movs	r3, #0
 80072fe:	613b      	str	r3, [r7, #16]
	int range = rangeend - rangebegin;
 8007300:	793a      	ldrb	r2, [r7, #4]
 8007302:	797b      	ldrb	r3, [r7, #5]
 8007304:	1ad3      	subs	r3, r2, r3
 8007306:	60bb      	str	r3, [r7, #8]

	if(value < 0){
 8007308:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800730c:	2b00      	cmp	r3, #0
 800730e:	da04      	bge.n	800731a <convert_value_to_array2+0x3a>
		arraytoputin[rangebegin] = '-';
 8007310:	797b      	ldrb	r3, [r7, #5]
 8007312:	683a      	ldr	r2, [r7, #0]
 8007314:	4413      	add	r3, r2
 8007316:	222d      	movs	r2, #45	@ 0x2d
 8007318:	701a      	strb	r2, [r3, #0]
	}

	for(int i = 1; i < range+1; i++){// 3
 800731a:	2301      	movs	r3, #1
 800731c:	60fb      	str	r3, [r7, #12]
 800731e:	e035      	b.n	800738c <convert_value_to_array2+0xac>
		while(value >= (uint16_t)potenga(10,range - i)){
			if(value == 0){
 8007320:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007324:	2b00      	cmp	r3, #0
 8007326:	d01d      	beq.n	8007364 <convert_value_to_array2+0x84>
				break;
			}
			value -= (uint16_t)potenga(10,range - i);
 8007328:	68ba      	ldr	r2, [r7, #8]
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	1ad3      	subs	r3, r2, r3
 800732e:	4619      	mov	r1, r3
 8007330:	200a      	movs	r0, #10
 8007332:	f7ff ff1f 	bl	8007174 <potenga>
 8007336:	4603      	mov	r3, r0
 8007338:	b29b      	uxth	r3, r3
 800733a:	88fa      	ldrh	r2, [r7, #6]
 800733c:	1ad3      	subs	r3, r2, r3
 800733e:	b29b      	uxth	r3, r3
 8007340:	80fb      	strh	r3, [r7, #6]
			x++;
 8007342:	697b      	ldr	r3, [r7, #20]
 8007344:	3301      	adds	r3, #1
 8007346:	617b      	str	r3, [r7, #20]
		while(value >= (uint16_t)potenga(10,range - i)){
 8007348:	f9b7 4006 	ldrsh.w	r4, [r7, #6]
 800734c:	68ba      	ldr	r2, [r7, #8]
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	1ad3      	subs	r3, r2, r3
 8007352:	4619      	mov	r1, r3
 8007354:	200a      	movs	r0, #10
 8007356:	f7ff ff0d 	bl	8007174 <potenga>
 800735a:	4603      	mov	r3, r0
 800735c:	b29b      	uxth	r3, r3
 800735e:	429c      	cmp	r4, r3
 8007360:	dade      	bge.n	8007320 <convert_value_to_array2+0x40>
 8007362:	e000      	b.n	8007366 <convert_value_to_array2+0x86>
				break;
 8007364:	bf00      	nop
		}
		arraytoputin[rangebegin + loopnum] = (uint8_t)x + 48;//zamiana na ASCII
 8007366:	697b      	ldr	r3, [r7, #20]
 8007368:	b2da      	uxtb	r2, r3
 800736a:	7979      	ldrb	r1, [r7, #5]
 800736c:	693b      	ldr	r3, [r7, #16]
 800736e:	440b      	add	r3, r1
 8007370:	4619      	mov	r1, r3
 8007372:	683b      	ldr	r3, [r7, #0]
 8007374:	440b      	add	r3, r1
 8007376:	3230      	adds	r2, #48	@ 0x30
 8007378:	b2d2      	uxtb	r2, r2
 800737a:	701a      	strb	r2, [r3, #0]
		loopnum++;
 800737c:	693b      	ldr	r3, [r7, #16]
 800737e:	3301      	adds	r3, #1
 8007380:	613b      	str	r3, [r7, #16]
		x = 0;
 8007382:	2300      	movs	r3, #0
 8007384:	617b      	str	r3, [r7, #20]
	for(int i = 1; i < range+1; i++){// 3
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	3301      	adds	r3, #1
 800738a:	60fb      	str	r3, [r7, #12]
 800738c:	68ba      	ldr	r2, [r7, #8]
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	429a      	cmp	r2, r3
 8007392:	dad9      	bge.n	8007348 <convert_value_to_array2+0x68>
	}
}
 8007394:	bf00      	nop
 8007396:	bf00      	nop
 8007398:	371c      	adds	r7, #28
 800739a:	46bd      	mov	sp, r7
 800739c:	bd90      	pop	{r4, r7, pc}

0800739e <convert_value_to_array3>:
 *	1000.1
 *
 *	range = 5
 *
 */
void convert_value_to_array3(float value, uint8_t *arraytoputin, uint8_t rangebegin, uint8_t rangeend){
 800739e:	b580      	push	{r7, lr}
 80073a0:	ed2d 8b02 	vpush	{d8}
 80073a4:	b08c      	sub	sp, #48	@ 0x30
 80073a6:	af00      	add	r7, sp, #0
 80073a8:	ed87 0a03 	vstr	s0, [r7, #12]
 80073ac:	60b8      	str	r0, [r7, #8]
 80073ae:	460b      	mov	r3, r1
 80073b0:	71fb      	strb	r3, [r7, #7]
 80073b2:	4613      	mov	r3, r2
 80073b4:	71bb      	strb	r3, [r7, #6]
	int x = 0;
 80073b6:	2300      	movs	r3, #0
 80073b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	int loopnum = 0;
 80073ba:	2300      	movs	r3, #0
 80073bc:	62bb      	str	r3, [r7, #40]	@ 0x28
	int range = rangeend - rangebegin;
 80073be:	79ba      	ldrb	r2, [r7, #6]
 80073c0:	79fb      	ldrb	r3, [r7, #7]
 80073c2:	1ad3      	subs	r3, r2, r3
 80073c4:	617b      	str	r3, [r7, #20]
	int power_of_value = 0;
 80073c6:	2300      	movs	r3, #0
 80073c8:	627b      	str	r3, [r7, #36]	@ 0x24
	float a;
	int kropka;


	if(value < 0){
 80073ca:	edd7 7a03 	vldr	s15, [r7, #12]
 80073ce:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80073d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073d6:	d50a      	bpl.n	80073ee <convert_value_to_array3+0x50>
		arraytoputin[rangebegin] = '-';
 80073d8:	79fb      	ldrb	r3, [r7, #7]
 80073da:	68ba      	ldr	r2, [r7, #8]
 80073dc:	4413      	add	r3, r2
 80073de:	222d      	movs	r2, #45	@ 0x2d
 80073e0:	701a      	strb	r2, [r3, #0]
		value = value * -1;
 80073e2:	edd7 7a03 	vldr	s15, [r7, #12]
 80073e6:	eef1 7a67 	vneg.f32	s15, s15
 80073ea:	edc7 7a03 	vstr	s15, [r7, #12]
	}

	//sprawdzenie wagi pierwsazej liczby znaczącej
	//potrzebne do dzielenia
	for(int i = 1; i < range*2; i++){
 80073ee:	2301      	movs	r3, #1
 80073f0:	61fb      	str	r3, [r7, #28]
 80073f2:	e021      	b.n	8007438 <convert_value_to_array3+0x9a>
		a = pow(10,range - i);
 80073f4:	697a      	ldr	r2, [r7, #20]
 80073f6:	69fb      	ldr	r3, [r7, #28]
 80073f8:	1ad3      	subs	r3, r2, r3
 80073fa:	ee07 3a90 	vmov	s15, r3
 80073fe:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8007402:	eeb0 1b47 	vmov.f64	d1, d7
 8007406:	eeb2 0b04 	vmov.f64	d0, #36	@ 0x41200000  10.0
 800740a:	f016 fd85 	bl	801df18 <pow>
 800740e:	eeb0 7b40 	vmov.f64	d7, d0
 8007412:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8007416:	edc7 7a04 	vstr	s15, [r7, #16]
		if(value >= a){
 800741a:	ed97 7a03 	vldr	s14, [r7, #12]
 800741e:	edd7 7a04 	vldr	s15, [r7, #16]
 8007422:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007426:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800742a:	da0b      	bge.n	8007444 <convert_value_to_array3+0xa6>
			break;
		}
		power_of_value++;
 800742c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800742e:	3301      	adds	r3, #1
 8007430:	627b      	str	r3, [r7, #36]	@ 0x24
	for(int i = 1; i < range*2; i++){
 8007432:	69fb      	ldr	r3, [r7, #28]
 8007434:	3301      	adds	r3, #1
 8007436:	61fb      	str	r3, [r7, #28]
 8007438:	697b      	ldr	r3, [r7, #20]
 800743a:	005b      	lsls	r3, r3, #1
 800743c:	69fa      	ldr	r2, [r7, #28]
 800743e:	429a      	cmp	r2, r3
 8007440:	dbd8      	blt.n	80073f4 <convert_value_to_array3+0x56>
 8007442:	e000      	b.n	8007446 <convert_value_to_array3+0xa8>
			break;
 8007444:	bf00      	nop
	}

	power_of_value = range - power_of_value - 1;
 8007446:	697a      	ldr	r2, [r7, #20]
 8007448:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800744a:	1ad3      	subs	r3, r2, r3
 800744c:	3b01      	subs	r3, #1
 800744e:	627b      	str	r3, [r7, #36]	@ 0x24

	//		Sprawdzic gdzie jest kropka 0.00123 123.01 12.12
	if(power_of_value <= 0){
 8007450:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007452:	2b00      	cmp	r3, #0
 8007454:	dc07      	bgt.n	8007466 <convert_value_to_array3+0xc8>
		arraytoputin[rangebegin + 1] = '.';
 8007456:	79fb      	ldrb	r3, [r7, #7]
 8007458:	3301      	adds	r3, #1
 800745a:	68ba      	ldr	r2, [r7, #8]
 800745c:	4413      	add	r3, r2
 800745e:	222e      	movs	r2, #46	@ 0x2e
 8007460:	701a      	strb	r2, [r3, #0]
		kropka = 1;
 8007462:	2301      	movs	r3, #1
 8007464:	623b      	str	r3, [r7, #32]
	}
	if(power_of_value > 0){
 8007466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007468:	2b00      	cmp	r3, #0
 800746a:	dd0a      	ble.n	8007482 <convert_value_to_array3+0xe4>
		arraytoputin[rangebegin + power_of_value + 1] = '.';
 800746c:	79fa      	ldrb	r2, [r7, #7]
 800746e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007470:	4413      	add	r3, r2
 8007472:	3301      	adds	r3, #1
 8007474:	68ba      	ldr	r2, [r7, #8]
 8007476:	4413      	add	r3, r2
 8007478:	222e      	movs	r2, #46	@ 0x2e
 800747a:	701a      	strb	r2, [r3, #0]
		kropka = power_of_value + 1;
 800747c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800747e:	3301      	adds	r3, #1
 8007480:	623b      	str	r3, [r7, #32]
	}


	value = value*pow(10,(range-1) - power_of_value);
 8007482:	edd7 7a03 	vldr	s15, [r7, #12]
 8007486:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 800748a:	697b      	ldr	r3, [r7, #20]
 800748c:	1e5a      	subs	r2, r3, #1
 800748e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007490:	1ad3      	subs	r3, r2, r3
 8007492:	ee07 3a90 	vmov	s15, r3
 8007496:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800749a:	eeb0 1b47 	vmov.f64	d1, d7
 800749e:	eeb2 0b04 	vmov.f64	d0, #36	@ 0x41200000  10.0
 80074a2:	f016 fd39 	bl	801df18 <pow>
 80074a6:	eeb0 7b40 	vmov.f64	d7, d0
 80074aa:	ee28 7b07 	vmul.f64	d7, d8, d7
 80074ae:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80074b2:	edc7 7a03 	vstr	s15, [r7, #12]


	for(int i = 0; i < range-2; i++){// range-2 poniewaz jest znak kropki i ewentualny znak minusa na początku
 80074b6:	2300      	movs	r3, #0
 80074b8:	61bb      	str	r3, [r7, #24]
 80074ba:	e05f      	b.n	800757c <convert_value_to_array3+0x1de>
		while(value >= (uint16_t)pow(10,(range-1) - i)){
			if(value <= 0){
 80074bc:	edd7 7a03 	vldr	s15, [r7, #12]
 80074c0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80074c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074c8:	d93d      	bls.n	8007546 <convert_value_to_array3+0x1a8>
				break;
			}
			value = value - pow(10,(range-1) - i);
 80074ca:	edd7 7a03 	vldr	s15, [r7, #12]
 80074ce:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 80074d2:	697b      	ldr	r3, [r7, #20]
 80074d4:	1e5a      	subs	r2, r3, #1
 80074d6:	69bb      	ldr	r3, [r7, #24]
 80074d8:	1ad3      	subs	r3, r2, r3
 80074da:	ee07 3a90 	vmov	s15, r3
 80074de:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80074e2:	eeb0 1b47 	vmov.f64	d1, d7
 80074e6:	eeb2 0b04 	vmov.f64	d0, #36	@ 0x41200000  10.0
 80074ea:	f016 fd15 	bl	801df18 <pow>
 80074ee:	eeb0 7b40 	vmov.f64	d7, d0
 80074f2:	ee38 7b47 	vsub.f64	d7, d8, d7
 80074f6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80074fa:	edc7 7a03 	vstr	s15, [r7, #12]
			x++;
 80074fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007500:	3301      	adds	r3, #1
 8007502:	62fb      	str	r3, [r7, #44]	@ 0x2c
		while(value >= (uint16_t)pow(10,(range-1) - i)){
 8007504:	697b      	ldr	r3, [r7, #20]
 8007506:	1e5a      	subs	r2, r3, #1
 8007508:	69bb      	ldr	r3, [r7, #24]
 800750a:	1ad3      	subs	r3, r2, r3
 800750c:	ee07 3a90 	vmov	s15, r3
 8007510:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8007514:	eeb0 1b47 	vmov.f64	d1, d7
 8007518:	eeb2 0b04 	vmov.f64	d0, #36	@ 0x41200000  10.0
 800751c:	f016 fcfc 	bl	801df18 <pow>
 8007520:	eeb0 7b40 	vmov.f64	d7, d0
 8007524:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8007528:	ee17 3a90 	vmov	r3, s15
 800752c:	b29b      	uxth	r3, r3
 800752e:	ee07 3a90 	vmov	s15, r3
 8007532:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007536:	ed97 7a03 	vldr	s14, [r7, #12]
 800753a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800753e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007542:	dabb      	bge.n	80074bc <convert_value_to_array3+0x11e>
 8007544:	e000      	b.n	8007548 <convert_value_to_array3+0x1aa>
				break;
 8007546:	bf00      	nop
		}

        if(loopnum == kropka){
 8007548:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800754a:	6a3b      	ldr	r3, [r7, #32]
 800754c:	429a      	cmp	r2, r3
 800754e:	d102      	bne.n	8007556 <convert_value_to_array3+0x1b8>
            loopnum++;
 8007550:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007552:	3301      	adds	r3, #1
 8007554:	62bb      	str	r3, [r7, #40]	@ 0x28
        }
		arraytoputin[rangebegin + loopnum] = (uint8_t)x + 48;//zamiana na ASCII
 8007556:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007558:	b2da      	uxtb	r2, r3
 800755a:	79f9      	ldrb	r1, [r7, #7]
 800755c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800755e:	440b      	add	r3, r1
 8007560:	4619      	mov	r1, r3
 8007562:	68bb      	ldr	r3, [r7, #8]
 8007564:	440b      	add	r3, r1
 8007566:	3230      	adds	r2, #48	@ 0x30
 8007568:	b2d2      	uxtb	r2, r2
 800756a:	701a      	strb	r2, [r3, #0]
		loopnum++;
 800756c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800756e:	3301      	adds	r3, #1
 8007570:	62bb      	str	r3, [r7, #40]	@ 0x28
		x = 0;
 8007572:	2300      	movs	r3, #0
 8007574:	62fb      	str	r3, [r7, #44]	@ 0x2c
	for(int i = 0; i < range-2; i++){// range-2 poniewaz jest znak kropki i ewentualny znak minusa na początku
 8007576:	69bb      	ldr	r3, [r7, #24]
 8007578:	3301      	adds	r3, #1
 800757a:	61bb      	str	r3, [r7, #24]
 800757c:	697b      	ldr	r3, [r7, #20]
 800757e:	3b02      	subs	r3, #2
 8007580:	69ba      	ldr	r2, [r7, #24]
 8007582:	429a      	cmp	r2, r3
 8007584:	dbbe      	blt.n	8007504 <convert_value_to_array3+0x166>
	}
}
 8007586:	bf00      	nop
 8007588:	bf00      	nop
 800758a:	3730      	adds	r7, #48	@ 0x30
 800758c:	46bd      	mov	sp, r7
 800758e:	ecbd 8b02 	vpop	{d8}
 8007592:	bd80      	pop	{r7, pc}

08007594 <uSD_Card_SendData_To_Buffer>:
 *
 * Numer pentli 7 8
 *
 * Mag_Z 3
 */
void uSD_Card_SendData_To_Buffer(uint32_t a){
 8007594:	b580      	push	{r7, lr}
 8007596:	b082      	sub	sp, #8
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
	convert_value_to_array2(Mainloop_Number, DataToSendBuffer, (0 + (128*a)), (8 + (128*a)));
 800759c:	4ba6      	ldr	r3, [pc, #664]	@ (8007838 <uSD_Card_SendData_To_Buffer+0x2a4>)
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	b218      	sxth	r0, r3
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	b2db      	uxtb	r3, r3
 80075a6:	01db      	lsls	r3, r3, #7
 80075a8:	b2da      	uxtb	r2, r3
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	b2db      	uxtb	r3, r3
 80075ae:	01db      	lsls	r3, r3, #7
 80075b0:	b2db      	uxtb	r3, r3
 80075b2:	3308      	adds	r3, #8
 80075b4:	b2db      	uxtb	r3, r3
 80075b6:	49a1      	ldr	r1, [pc, #644]	@ (800783c <uSD_Card_SendData_To_Buffer+0x2a8>)
 80075b8:	f7ff fe92 	bl	80072e0 <convert_value_to_array2>
	 DataToSendBuffer[(8 + (128*a))] = ' ';
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	01db      	lsls	r3, r3, #7
 80075c0:	3308      	adds	r3, #8
 80075c2:	4a9e      	ldr	r2, [pc, #632]	@ (800783c <uSD_Card_SendData_To_Buffer+0x2a8>)
 80075c4:	2120      	movs	r1, #32
 80075c6:	54d1      	strb	r1, [r2, r3]


	convert_value_to_array2(SPEED1, DataToSendBuffer, (9 + (128*a)), (15 + (128*a)));
 80075c8:	4b9d      	ldr	r3, [pc, #628]	@ (8007840 <uSD_Card_SendData_To_Buffer+0x2ac>)
 80075ca:	881b      	ldrh	r3, [r3, #0]
 80075cc:	b218      	sxth	r0, r3
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	b2db      	uxtb	r3, r3
 80075d2:	01db      	lsls	r3, r3, #7
 80075d4:	b2db      	uxtb	r3, r3
 80075d6:	3309      	adds	r3, #9
 80075d8:	b2da      	uxtb	r2, r3
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	b2db      	uxtb	r3, r3
 80075de:	01db      	lsls	r3, r3, #7
 80075e0:	b2db      	uxtb	r3, r3
 80075e2:	330f      	adds	r3, #15
 80075e4:	b2db      	uxtb	r3, r3
 80075e6:	4995      	ldr	r1, [pc, #596]	@ (800783c <uSD_Card_SendData_To_Buffer+0x2a8>)
 80075e8:	f7ff fe7a 	bl	80072e0 <convert_value_to_array2>
	 DataToSendBuffer[(15 + (128*a))] = ' ';
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	01db      	lsls	r3, r3, #7
 80075f0:	330f      	adds	r3, #15
 80075f2:	4a92      	ldr	r2, [pc, #584]	@ (800783c <uSD_Card_SendData_To_Buffer+0x2a8>)
 80075f4:	2120      	movs	r1, #32
 80075f6:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array2(SPEED2, DataToSendBuffer, (16 + (128*a)), (22 + (128*a)));
 80075f8:	4b92      	ldr	r3, [pc, #584]	@ (8007844 <uSD_Card_SendData_To_Buffer+0x2b0>)
 80075fa:	881b      	ldrh	r3, [r3, #0]
 80075fc:	b218      	sxth	r0, r3
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	b2db      	uxtb	r3, r3
 8007602:	01db      	lsls	r3, r3, #7
 8007604:	b2db      	uxtb	r3, r3
 8007606:	3310      	adds	r3, #16
 8007608:	b2da      	uxtb	r2, r3
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	b2db      	uxtb	r3, r3
 800760e:	01db      	lsls	r3, r3, #7
 8007610:	b2db      	uxtb	r3, r3
 8007612:	3316      	adds	r3, #22
 8007614:	b2db      	uxtb	r3, r3
 8007616:	4989      	ldr	r1, [pc, #548]	@ (800783c <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007618:	f7ff fe62 	bl	80072e0 <convert_value_to_array2>
	 DataToSendBuffer[(22 + (128*a))] = ' ';
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	01db      	lsls	r3, r3, #7
 8007620:	3316      	adds	r3, #22
 8007622:	4a86      	ldr	r2, [pc, #536]	@ (800783c <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007624:	2120      	movs	r1, #32
 8007626:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array2(SPEED3, DataToSendBuffer, (23 + (128*a)), (29 + (128*a)));
 8007628:	4b87      	ldr	r3, [pc, #540]	@ (8007848 <uSD_Card_SendData_To_Buffer+0x2b4>)
 800762a:	881b      	ldrh	r3, [r3, #0]
 800762c:	b218      	sxth	r0, r3
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	b2db      	uxtb	r3, r3
 8007632:	01db      	lsls	r3, r3, #7
 8007634:	b2db      	uxtb	r3, r3
 8007636:	3317      	adds	r3, #23
 8007638:	b2da      	uxtb	r2, r3
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	b2db      	uxtb	r3, r3
 800763e:	01db      	lsls	r3, r3, #7
 8007640:	b2db      	uxtb	r3, r3
 8007642:	331d      	adds	r3, #29
 8007644:	b2db      	uxtb	r3, r3
 8007646:	497d      	ldr	r1, [pc, #500]	@ (800783c <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007648:	f7ff fe4a 	bl	80072e0 <convert_value_to_array2>
	 DataToSendBuffer[(29 + (128*a))] = ' ';
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	01db      	lsls	r3, r3, #7
 8007650:	331d      	adds	r3, #29
 8007652:	4a7a      	ldr	r2, [pc, #488]	@ (800783c <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007654:	2120      	movs	r1, #32
 8007656:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array2(SPEED4, DataToSendBuffer, (30 + (128*a)), (36 + (128*a)));
 8007658:	4b7c      	ldr	r3, [pc, #496]	@ (800784c <uSD_Card_SendData_To_Buffer+0x2b8>)
 800765a:	881b      	ldrh	r3, [r3, #0]
 800765c:	b218      	sxth	r0, r3
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	b2db      	uxtb	r3, r3
 8007662:	01db      	lsls	r3, r3, #7
 8007664:	b2db      	uxtb	r3, r3
 8007666:	331e      	adds	r3, #30
 8007668:	b2da      	uxtb	r2, r3
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	b2db      	uxtb	r3, r3
 800766e:	01db      	lsls	r3, r3, #7
 8007670:	b2db      	uxtb	r3, r3
 8007672:	3324      	adds	r3, #36	@ 0x24
 8007674:	b2db      	uxtb	r3, r3
 8007676:	4971      	ldr	r1, [pc, #452]	@ (800783c <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007678:	f7ff fe32 	bl	80072e0 <convert_value_to_array2>
	 DataToSendBuffer[(36 + (128*a))] = ' ';
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	01db      	lsls	r3, r3, #7
 8007680:	3324      	adds	r3, #36	@ 0x24
 8007682:	4a6e      	ldr	r2, [pc, #440]	@ (800783c <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007684:	2120      	movs	r1, #32
 8007686:	54d1      	strb	r1, [r2, r3]

	convert_value_to_array3(wanted_rool, DataToSendBuffer, (37 + (128*a)), (45 + (128*a)));
 8007688:	4b71      	ldr	r3, [pc, #452]	@ (8007850 <uSD_Card_SendData_To_Buffer+0x2bc>)
 800768a:	edd3 7a00 	vldr	s15, [r3]
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	b2db      	uxtb	r3, r3
 8007692:	01db      	lsls	r3, r3, #7
 8007694:	b2db      	uxtb	r3, r3
 8007696:	3325      	adds	r3, #37	@ 0x25
 8007698:	b2d9      	uxtb	r1, r3
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	b2db      	uxtb	r3, r3
 800769e:	01db      	lsls	r3, r3, #7
 80076a0:	b2db      	uxtb	r3, r3
 80076a2:	332d      	adds	r3, #45	@ 0x2d
 80076a4:	b2db      	uxtb	r3, r3
 80076a6:	461a      	mov	r2, r3
 80076a8:	4864      	ldr	r0, [pc, #400]	@ (800783c <uSD_Card_SendData_To_Buffer+0x2a8>)
 80076aa:	eeb0 0a67 	vmov.f32	s0, s15
 80076ae:	f7ff fe76 	bl	800739e <convert_value_to_array3>
	 DataToSendBuffer[(45 + (128*a))] = ' ';
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	01db      	lsls	r3, r3, #7
 80076b6:	332d      	adds	r3, #45	@ 0x2d
 80076b8:	4a60      	ldr	r2, [pc, #384]	@ (800783c <uSD_Card_SendData_To_Buffer+0x2a8>)
 80076ba:	2120      	movs	r1, #32
 80076bc:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array3(wanted_pitch, DataToSendBuffer, (46 + (128*a)), (54 + (128*a)));
 80076be:	4b65      	ldr	r3, [pc, #404]	@ (8007854 <uSD_Card_SendData_To_Buffer+0x2c0>)
 80076c0:	edd3 7a00 	vldr	s15, [r3]
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	b2db      	uxtb	r3, r3
 80076c8:	01db      	lsls	r3, r3, #7
 80076ca:	b2db      	uxtb	r3, r3
 80076cc:	332e      	adds	r3, #46	@ 0x2e
 80076ce:	b2d9      	uxtb	r1, r3
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	b2db      	uxtb	r3, r3
 80076d4:	01db      	lsls	r3, r3, #7
 80076d6:	b2db      	uxtb	r3, r3
 80076d8:	3336      	adds	r3, #54	@ 0x36
 80076da:	b2db      	uxtb	r3, r3
 80076dc:	461a      	mov	r2, r3
 80076de:	4857      	ldr	r0, [pc, #348]	@ (800783c <uSD_Card_SendData_To_Buffer+0x2a8>)
 80076e0:	eeb0 0a67 	vmov.f32	s0, s15
 80076e4:	f7ff fe5b 	bl	800739e <convert_value_to_array3>
	 DataToSendBuffer[(54 + (128*a))] = ' ';
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	01db      	lsls	r3, r3, #7
 80076ec:	3336      	adds	r3, #54	@ 0x36
 80076ee:	4a53      	ldr	r2, [pc, #332]	@ (800783c <uSD_Card_SendData_To_Buffer+0x2a8>)
 80076f0:	2120      	movs	r1, #32
 80076f2:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array3(wanted_yaw, DataToSendBuffer, (55 + (128*a)), (63 + (128*a)));
 80076f4:	4b58      	ldr	r3, [pc, #352]	@ (8007858 <uSD_Card_SendData_To_Buffer+0x2c4>)
 80076f6:	edd3 7a00 	vldr	s15, [r3]
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	b2db      	uxtb	r3, r3
 80076fe:	01db      	lsls	r3, r3, #7
 8007700:	b2db      	uxtb	r3, r3
 8007702:	3337      	adds	r3, #55	@ 0x37
 8007704:	b2d9      	uxtb	r1, r3
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	b2db      	uxtb	r3, r3
 800770a:	01db      	lsls	r3, r3, #7
 800770c:	b2db      	uxtb	r3, r3
 800770e:	333f      	adds	r3, #63	@ 0x3f
 8007710:	b2db      	uxtb	r3, r3
 8007712:	461a      	mov	r2, r3
 8007714:	4849      	ldr	r0, [pc, #292]	@ (800783c <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007716:	eeb0 0a67 	vmov.f32	s0, s15
 800771a:	f7ff fe40 	bl	800739e <convert_value_to_array3>
	 DataToSendBuffer[(63 + (128*a))] = ' ';
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	01db      	lsls	r3, r3, #7
 8007722:	333f      	adds	r3, #63	@ 0x3f
 8007724:	4a45      	ldr	r2, [pc, #276]	@ (800783c <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007726:	2120      	movs	r1, #32
 8007728:	54d1      	strb	r1, [r2, r3]

	convert_value_to_array2(error_sum_pitch, DataToSendBuffer, (64 + (128*a)), (72 + (128*a)));
 800772a:	4b4c      	ldr	r3, [pc, #304]	@ (800785c <uSD_Card_SendData_To_Buffer+0x2c8>)
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	b218      	sxth	r0, r3
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	b2db      	uxtb	r3, r3
 8007734:	01db      	lsls	r3, r3, #7
 8007736:	b2db      	uxtb	r3, r3
 8007738:	3340      	adds	r3, #64	@ 0x40
 800773a:	b2da      	uxtb	r2, r3
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	b2db      	uxtb	r3, r3
 8007740:	01db      	lsls	r3, r3, #7
 8007742:	b2db      	uxtb	r3, r3
 8007744:	3348      	adds	r3, #72	@ 0x48
 8007746:	b2db      	uxtb	r3, r3
 8007748:	493c      	ldr	r1, [pc, #240]	@ (800783c <uSD_Card_SendData_To_Buffer+0x2a8>)
 800774a:	f7ff fdc9 	bl	80072e0 <convert_value_to_array2>
	 DataToSendBuffer[(72 + (128*a))] = ' ';
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	01db      	lsls	r3, r3, #7
 8007752:	3348      	adds	r3, #72	@ 0x48
 8007754:	4a39      	ldr	r2, [pc, #228]	@ (800783c <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007756:	2120      	movs	r1, #32
 8007758:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array2(error_sum_rool, DataToSendBuffer, (73 + (128*a)), (81 + (128*a)));
 800775a:	4b41      	ldr	r3, [pc, #260]	@ (8007860 <uSD_Card_SendData_To_Buffer+0x2cc>)
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	b218      	sxth	r0, r3
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	b2db      	uxtb	r3, r3
 8007764:	01db      	lsls	r3, r3, #7
 8007766:	b2db      	uxtb	r3, r3
 8007768:	3349      	adds	r3, #73	@ 0x49
 800776a:	b2da      	uxtb	r2, r3
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	b2db      	uxtb	r3, r3
 8007770:	01db      	lsls	r3, r3, #7
 8007772:	b2db      	uxtb	r3, r3
 8007774:	3351      	adds	r3, #81	@ 0x51
 8007776:	b2db      	uxtb	r3, r3
 8007778:	4930      	ldr	r1, [pc, #192]	@ (800783c <uSD_Card_SendData_To_Buffer+0x2a8>)
 800777a:	f7ff fdb1 	bl	80072e0 <convert_value_to_array2>
	 DataToSendBuffer[(81 + (128*a))] = ' ';
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	01db      	lsls	r3, r3, #7
 8007782:	3351      	adds	r3, #81	@ 0x51
 8007784:	4a2d      	ldr	r2, [pc, #180]	@ (800783c <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007786:	2120      	movs	r1, #32
 8007788:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array2(error_sum_yaw, DataToSendBuffer, (82 + (128*a)), (90 + (128*a)));
 800778a:	4b36      	ldr	r3, [pc, #216]	@ (8007864 <uSD_Card_SendData_To_Buffer+0x2d0>)
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	b218      	sxth	r0, r3
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	b2db      	uxtb	r3, r3
 8007794:	01db      	lsls	r3, r3, #7
 8007796:	b2db      	uxtb	r3, r3
 8007798:	3352      	adds	r3, #82	@ 0x52
 800779a:	b2da      	uxtb	r2, r3
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	b2db      	uxtb	r3, r3
 80077a0:	01db      	lsls	r3, r3, #7
 80077a2:	b2db      	uxtb	r3, r3
 80077a4:	335a      	adds	r3, #90	@ 0x5a
 80077a6:	b2db      	uxtb	r3, r3
 80077a8:	4924      	ldr	r1, [pc, #144]	@ (800783c <uSD_Card_SendData_To_Buffer+0x2a8>)
 80077aa:	f7ff fd99 	bl	80072e0 <convert_value_to_array2>
	 DataToSendBuffer[(90 + (128*a))] = ' ';
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	01db      	lsls	r3, r3, #7
 80077b2:	335a      	adds	r3, #90	@ 0x5a
 80077b4:	4a21      	ldr	r2, [pc, #132]	@ (800783c <uSD_Card_SendData_To_Buffer+0x2a8>)
 80077b6:	2120      	movs	r1, #32
 80077b8:	54d1      	strb	r1, [r2, r3]

	convert_value_to_array3(data.x, DataToSendBuffer, (91 + (128*a)), (98 + (128*a)));
 80077ba:	4b2b      	ldr	r3, [pc, #172]	@ (8007868 <uSD_Card_SendData_To_Buffer+0x2d4>)
 80077bc:	edd3 7a00 	vldr	s15, [r3]
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	b2db      	uxtb	r3, r3
 80077c4:	01db      	lsls	r3, r3, #7
 80077c6:	b2db      	uxtb	r3, r3
 80077c8:	335b      	adds	r3, #91	@ 0x5b
 80077ca:	b2d9      	uxtb	r1, r3
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	b2db      	uxtb	r3, r3
 80077d0:	01db      	lsls	r3, r3, #7
 80077d2:	b2db      	uxtb	r3, r3
 80077d4:	3362      	adds	r3, #98	@ 0x62
 80077d6:	b2db      	uxtb	r3, r3
 80077d8:	461a      	mov	r2, r3
 80077da:	4818      	ldr	r0, [pc, #96]	@ (800783c <uSD_Card_SendData_To_Buffer+0x2a8>)
 80077dc:	eeb0 0a67 	vmov.f32	s0, s15
 80077e0:	f7ff fddd 	bl	800739e <convert_value_to_array3>
	 DataToSendBuffer[(98 + (128*a))] = ' ';
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	01db      	lsls	r3, r3, #7
 80077e8:	3362      	adds	r3, #98	@ 0x62
 80077ea:	4a14      	ldr	r2, [pc, #80]	@ (800783c <uSD_Card_SendData_To_Buffer+0x2a8>)
 80077ec:	2120      	movs	r1, #32
 80077ee:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array3(data.y, DataToSendBuffer, (99 + (128*a)), (106 + (128*a)));
 80077f0:	4b1d      	ldr	r3, [pc, #116]	@ (8007868 <uSD_Card_SendData_To_Buffer+0x2d4>)
 80077f2:	edd3 7a01 	vldr	s15, [r3, #4]
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	b2db      	uxtb	r3, r3
 80077fa:	01db      	lsls	r3, r3, #7
 80077fc:	b2db      	uxtb	r3, r3
 80077fe:	3363      	adds	r3, #99	@ 0x63
 8007800:	b2d9      	uxtb	r1, r3
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	b2db      	uxtb	r3, r3
 8007806:	01db      	lsls	r3, r3, #7
 8007808:	b2db      	uxtb	r3, r3
 800780a:	336a      	adds	r3, #106	@ 0x6a
 800780c:	b2db      	uxtb	r3, r3
 800780e:	461a      	mov	r2, r3
 8007810:	480a      	ldr	r0, [pc, #40]	@ (800783c <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007812:	eeb0 0a67 	vmov.f32	s0, s15
 8007816:	f7ff fdc2 	bl	800739e <convert_value_to_array3>
	 DataToSendBuffer[(106 + (128*a))] = ' ';
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	01db      	lsls	r3, r3, #7
 800781e:	336a      	adds	r3, #106	@ 0x6a
 8007820:	4a06      	ldr	r2, [pc, #24]	@ (800783c <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007822:	2120      	movs	r1, #32
 8007824:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array3(data.z, DataToSendBuffer, (107 + (128*a)), (114 + (128*a)));
 8007826:	4b10      	ldr	r3, [pc, #64]	@ (8007868 <uSD_Card_SendData_To_Buffer+0x2d4>)
 8007828:	edd3 7a02 	vldr	s15, [r3, #8]
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	b2db      	uxtb	r3, r3
 8007830:	01db      	lsls	r3, r3, #7
 8007832:	b2db      	uxtb	r3, r3
 8007834:	336b      	adds	r3, #107	@ 0x6b
 8007836:	e019      	b.n	800786c <uSD_Card_SendData_To_Buffer+0x2d8>
 8007838:	000041a4 	.word	0x000041a4
 800783c:	24002f48 	.word	0x24002f48
 8007840:	0000416c 	.word	0x0000416c
 8007844:	0000416e 	.word	0x0000416e
 8007848:	00004170 	.word	0x00004170
 800784c:	00004172 	.word	0x00004172
 8007850:	0000404c 	.word	0x0000404c
 8007854:	00004048 	.word	0x00004048
 8007858:	00004050 	.word	0x00004050
 800785c:	0000407c 	.word	0x0000407c
 8007860:	00004080 	.word	0x00004080
 8007864:	00004084 	.word	0x00004084
 8007868:	00000064 	.word	0x00000064
 800786c:	b2d9      	uxtb	r1, r3
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	b2db      	uxtb	r3, r3
 8007872:	01db      	lsls	r3, r3, #7
 8007874:	b2db      	uxtb	r3, r3
 8007876:	3372      	adds	r3, #114	@ 0x72
 8007878:	b2db      	uxtb	r3, r3
 800787a:	461a      	mov	r2, r3
 800787c:	482d      	ldr	r0, [pc, #180]	@ (8007934 <uSD_Card_SendData_To_Buffer+0x3a0>)
 800787e:	eeb0 0a67 	vmov.f32	s0, s15
 8007882:	f7ff fd8c 	bl	800739e <convert_value_to_array3>
	 DataToSendBuffer[(114 + (128*a))] = ' ';
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	01db      	lsls	r3, r3, #7
 800788a:	3372      	adds	r3, #114	@ 0x72
 800788c:	4a29      	ldr	r2, [pc, #164]	@ (8007934 <uSD_Card_SendData_To_Buffer+0x3a0>)
 800788e:	2120      	movs	r1, #32
 8007890:	54d1      	strb	r1, [r2, r3]


	convert_value_to_array2(MYDRON.batterysize, DataToSendBuffer, (115 + (128*a)), (119 + (128*a)));
 8007892:	4b29      	ldr	r3, [pc, #164]	@ (8007938 <uSD_Card_SendData_To_Buffer+0x3a4>)
 8007894:	881b      	ldrh	r3, [r3, #0]
 8007896:	b218      	sxth	r0, r3
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	b2db      	uxtb	r3, r3
 800789c:	01db      	lsls	r3, r3, #7
 800789e:	b2db      	uxtb	r3, r3
 80078a0:	3373      	adds	r3, #115	@ 0x73
 80078a2:	b2da      	uxtb	r2, r3
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	b2db      	uxtb	r3, r3
 80078a8:	01db      	lsls	r3, r3, #7
 80078aa:	b2db      	uxtb	r3, r3
 80078ac:	3377      	adds	r3, #119	@ 0x77
 80078ae:	b2db      	uxtb	r3, r3
 80078b0:	4920      	ldr	r1, [pc, #128]	@ (8007934 <uSD_Card_SendData_To_Buffer+0x3a0>)
 80078b2:	f7ff fd15 	bl	80072e0 <convert_value_to_array2>
	 DataToSendBuffer[(119 + (128*a))] = ' ';
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	01db      	lsls	r3, r3, #7
 80078ba:	3377      	adds	r3, #119	@ 0x77
 80078bc:	4a1d      	ldr	r2, [pc, #116]	@ (8007934 <uSD_Card_SendData_To_Buffer+0x3a0>)
 80078be:	2120      	movs	r1, #32
 80078c0:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array2(MYDRON.dron_status.Connection, DataToSendBuffer, (120 + (128*a)), (122 + (128*a)));
 80078c2:	4b1d      	ldr	r3, [pc, #116]	@ (8007938 <uSD_Card_SendData_To_Buffer+0x3a4>)
 80078c4:	8a5b      	ldrh	r3, [r3, #18]
 80078c6:	b218      	sxth	r0, r3
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	b2db      	uxtb	r3, r3
 80078cc:	01db      	lsls	r3, r3, #7
 80078ce:	b2db      	uxtb	r3, r3
 80078d0:	3378      	adds	r3, #120	@ 0x78
 80078d2:	b2da      	uxtb	r2, r3
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	b2db      	uxtb	r3, r3
 80078d8:	01db      	lsls	r3, r3, #7
 80078da:	b2db      	uxtb	r3, r3
 80078dc:	337a      	adds	r3, #122	@ 0x7a
 80078de:	b2db      	uxtb	r3, r3
 80078e0:	4914      	ldr	r1, [pc, #80]	@ (8007934 <uSD_Card_SendData_To_Buffer+0x3a0>)
 80078e2:	f7ff fcfd 	bl	80072e0 <convert_value_to_array2>
	 DataToSendBuffer[(122 + (128*a))] = ' ';
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	01db      	lsls	r3, r3, #7
 80078ea:	337a      	adds	r3, #122	@ 0x7a
 80078ec:	4a11      	ldr	r2, [pc, #68]	@ (8007934 <uSD_Card_SendData_To_Buffer+0x3a0>)
 80078ee:	2120      	movs	r1, #32
 80078f0:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array2(Mag_Z, DataToSendBuffer, (123 + (128*a)), (127 + (128*a)));
 80078f2:	4b12      	ldr	r3, [pc, #72]	@ (800793c <uSD_Card_SendData_To_Buffer+0x3a8>)
 80078f4:	edd3 7a00 	vldr	s15, [r3]
 80078f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80078fc:	ee17 3a90 	vmov	r3, s15
 8007900:	b218      	sxth	r0, r3
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	b2db      	uxtb	r3, r3
 8007906:	01db      	lsls	r3, r3, #7
 8007908:	b2db      	uxtb	r3, r3
 800790a:	337b      	adds	r3, #123	@ 0x7b
 800790c:	b2da      	uxtb	r2, r3
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	b2db      	uxtb	r3, r3
 8007912:	01db      	lsls	r3, r3, #7
 8007914:	b2db      	uxtb	r3, r3
 8007916:	337f      	adds	r3, #127	@ 0x7f
 8007918:	b2db      	uxtb	r3, r3
 800791a:	4906      	ldr	r1, [pc, #24]	@ (8007934 <uSD_Card_SendData_To_Buffer+0x3a0>)
 800791c:	f7ff fce0 	bl	80072e0 <convert_value_to_array2>
	 DataToSendBuffer[(128 + (128*a))] = '\n';
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	3301      	adds	r3, #1
 8007924:	01db      	lsls	r3, r3, #7
 8007926:	4a03      	ldr	r2, [pc, #12]	@ (8007934 <uSD_Card_SendData_To_Buffer+0x3a0>)
 8007928:	210a      	movs	r1, #10
 800792a:	54d1      	strb	r1, [r2, r3]
}
 800792c:	bf00      	nop
 800792e:	3708      	adds	r7, #8
 8007930:	46bd      	mov	sp, r7
 8007932:	bd80      	pop	{r7, pc}
 8007934:	24002f48 	.word	0x24002f48
 8007938:	00000158 	.word	0x00000158
 800793c:	00000048 	.word	0x00000048

08007940 <Stack_Push>:

void Stack_Push(float data){
 8007940:	b480      	push	{r7}
 8007942:	b083      	sub	sp, #12
 8007944:	af00      	add	r7, sp, #0
 8007946:	ed87 0a01 	vstr	s0, [r7, #4]
	Old_Data_stack.start_pointer++;
 800794a:	4b22      	ldr	r3, [pc, #136]	@ (80079d4 <Stack_Push+0x94>)
 800794c:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8007950:	f8b3 3ea8 	ldrh.w	r3, [r3, #3752]	@ 0xea8
 8007954:	3301      	adds	r3, #1
 8007956:	b29a      	uxth	r2, r3
 8007958:	4b1e      	ldr	r3, [pc, #120]	@ (80079d4 <Stack_Push+0x94>)
 800795a:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 800795e:	f8a3 2ea8 	strh.w	r2, [r3, #3752]	@ 0xea8
	if(Old_Data_stack.start_pointer == 4000){
 8007962:	4b1c      	ldr	r3, [pc, #112]	@ (80079d4 <Stack_Push+0x94>)
 8007964:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8007968:	f8b3 3ea8 	ldrh.w	r3, [r3, #3752]	@ 0xea8
 800796c:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 8007970:	d105      	bne.n	800797e <Stack_Push+0x3e>
		Old_Data_stack.start_pointer = 0;
 8007972:	4b18      	ldr	r3, [pc, #96]	@ (80079d4 <Stack_Push+0x94>)
 8007974:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8007978:	2200      	movs	r2, #0
 800797a:	f8a3 2ea8 	strh.w	r2, [r3, #3752]	@ 0xea8
	}
	Old_Data_stack.olddata[Old_Data_stack.start_pointer] = data;
 800797e:	4b15      	ldr	r3, [pc, #84]	@ (80079d4 <Stack_Push+0x94>)
 8007980:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8007984:	f8b3 3ea8 	ldrh.w	r3, [r3, #3752]	@ 0xea8
 8007988:	4a12      	ldr	r2, [pc, #72]	@ (80079d4 <Stack_Push+0x94>)
 800798a:	009b      	lsls	r3, r3, #2
 800798c:	4413      	add	r3, r2
 800798e:	687a      	ldr	r2, [r7, #4]
 8007990:	601a      	str	r2, [r3, #0]

	Old_Data_stack.end_pointer++;
 8007992:	4b10      	ldr	r3, [pc, #64]	@ (80079d4 <Stack_Push+0x94>)
 8007994:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8007998:	f8b3 3eaa 	ldrh.w	r3, [r3, #3754]	@ 0xeaa
 800799c:	3301      	adds	r3, #1
 800799e:	b29a      	uxth	r2, r3
 80079a0:	4b0c      	ldr	r3, [pc, #48]	@ (80079d4 <Stack_Push+0x94>)
 80079a2:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 80079a6:	f8a3 2eaa 	strh.w	r2, [r3, #3754]	@ 0xeaa
	if(Old_Data_stack.start_pointer == 4000){
 80079aa:	4b0a      	ldr	r3, [pc, #40]	@ (80079d4 <Stack_Push+0x94>)
 80079ac:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 80079b0:	f8b3 3ea8 	ldrh.w	r3, [r3, #3752]	@ 0xea8
 80079b4:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 80079b8:	d105      	bne.n	80079c6 <Stack_Push+0x86>
		Old_Data_stack.start_pointer = 0;
 80079ba:	4b06      	ldr	r3, [pc, #24]	@ (80079d4 <Stack_Push+0x94>)
 80079bc:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 80079c0:	2200      	movs	r2, #0
 80079c2:	f8a3 2ea8 	strh.w	r2, [r3, #3752]	@ 0xea8
	}
}
 80079c6:	bf00      	nop
 80079c8:	370c      	adds	r7, #12
 80079ca:	46bd      	mov	sp, r7
 80079cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d0:	4770      	bx	lr
 80079d2:	bf00      	nop
 80079d4:	0000017c 	.word	0x0000017c

080079d8 <ROOL_MAX_VAL>:

int16_t ROOL_MAX_VAL(void){
 80079d8:	b480      	push	{r7}
 80079da:	af00      	add	r7, sp, #0
	MYDRON.ROOL_STA = 2;
 80079dc:	4b05      	ldr	r3, [pc, #20]	@ (80079f4 <ROOL_MAX_VAL+0x1c>)
 80079de:	2202      	movs	r2, #2
 80079e0:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
	return 5000;
 80079e4:	f241 3388 	movw	r3, #5000	@ 0x1388
}
 80079e8:	4618      	mov	r0, r3
 80079ea:	46bd      	mov	sp, r7
 80079ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f0:	4770      	bx	lr
 80079f2:	bf00      	nop
 80079f4:	00000158 	.word	0x00000158

080079f8 <ROOL_MIN_VAL>:
int16_t ROOL_MIN_VAL(void){
 80079f8:	b480      	push	{r7}
 80079fa:	af00      	add	r7, sp, #0
	MYDRON.ROOL_STA = 1;
 80079fc:	4b04      	ldr	r3, [pc, #16]	@ (8007a10 <ROOL_MIN_VAL+0x18>)
 80079fe:	2201      	movs	r2, #1
 8007a00:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
	return -5000;
 8007a04:	4b03      	ldr	r3, [pc, #12]	@ (8007a14 <ROOL_MIN_VAL+0x1c>)
}
 8007a06:	4618      	mov	r0, r3
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0e:	4770      	bx	lr
 8007a10:	00000158 	.word	0x00000158
 8007a14:	ffffec78 	.word	0xffffec78

08007a18 <PITCH_MAX_VAL>:
int16_t PITCH_MAX_VAL(void){
 8007a18:	b480      	push	{r7}
 8007a1a:	af00      	add	r7, sp, #0
	MYDRON.PITCH_STA = 2;
 8007a1c:	4b05      	ldr	r3, [pc, #20]	@ (8007a34 <PITCH_MAX_VAL+0x1c>)
 8007a1e:	2202      	movs	r2, #2
 8007a20:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
	return 5000;
 8007a24:	f241 3388 	movw	r3, #5000	@ 0x1388
}
 8007a28:	4618      	mov	r0, r3
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a30:	4770      	bx	lr
 8007a32:	bf00      	nop
 8007a34:	00000158 	.word	0x00000158

08007a38 <PITCH_MIN_VAL>:
int16_t PITCH_MIN_VAL(void){
 8007a38:	b480      	push	{r7}
 8007a3a:	af00      	add	r7, sp, #0
	MYDRON.PITCH_STA = 1;
 8007a3c:	4b04      	ldr	r3, [pc, #16]	@ (8007a50 <PITCH_MIN_VAL+0x18>)
 8007a3e:	2201      	movs	r2, #1
 8007a40:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
	return -5000;
 8007a44:	4b03      	ldr	r3, [pc, #12]	@ (8007a54 <PITCH_MIN_VAL+0x1c>)
}
 8007a46:	4618      	mov	r0, r3
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4e:	4770      	bx	lr
 8007a50:	00000158 	.word	0x00000158
 8007a54:	ffffec78 	.word	0xffffec78

08007a58 <YAW_MAX_VAL>:
int16_t YAW_MAX_VAL(void){
 8007a58:	b480      	push	{r7}
 8007a5a:	af00      	add	r7, sp, #0
	MYDRON.YAW_STA = 2;
 8007a5c:	4b05      	ldr	r3, [pc, #20]	@ (8007a74 <YAW_MAX_VAL+0x1c>)
 8007a5e:	2202      	movs	r2, #2
 8007a60:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
	return 5000;
 8007a64:	f241 3388 	movw	r3, #5000	@ 0x1388
}
 8007a68:	4618      	mov	r0, r3
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a70:	4770      	bx	lr
 8007a72:	bf00      	nop
 8007a74:	00000158 	.word	0x00000158

08007a78 <YAW_MIN_VAL>:
int16_t YAW_MIN_VAL(void){
 8007a78:	b480      	push	{r7}
 8007a7a:	af00      	add	r7, sp, #0
	MYDRON.YAW_STA = 1;
 8007a7c:	4b04      	ldr	r3, [pc, #16]	@ (8007a90 <YAW_MIN_VAL+0x18>)
 8007a7e:	2201      	movs	r2, #1
 8007a80:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
	return -5000;
 8007a84:	4b03      	ldr	r3, [pc, #12]	@ (8007a94 <YAW_MIN_VAL+0x1c>)
}
 8007a86:	4618      	mov	r0, r3
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8e:	4770      	bx	lr
 8007a90:	00000158 	.word	0x00000158
 8007a94:	ffffec78 	.word	0xffffec78

08007a98 <ROOL_GOOD_VAL>:
int16_t ROOL_GOOD_VAL(void){
 8007a98:	b480      	push	{r7}
 8007a9a:	af00      	add	r7, sp, #0
	MYDRON.ROOL_STA = 0;
 8007a9c:	4b08      	ldr	r3, [pc, #32]	@ (8007ac0 <ROOL_GOOD_VAL+0x28>)
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
	return pid_angular_rate_rool;
 8007aa4:	4b07      	ldr	r3, [pc, #28]	@ (8007ac4 <ROOL_GOOD_VAL+0x2c>)
 8007aa6:	edd3 7a00 	vldr	s15, [r3]
 8007aaa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007aae:	ee17 3a90 	vmov	r3, s15
 8007ab2:	b21b      	sxth	r3, r3
}
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007abc:	4770      	bx	lr
 8007abe:	bf00      	nop
 8007ac0:	00000158 	.word	0x00000158
 8007ac4:	000040a8 	.word	0x000040a8

08007ac8 <PITCH_GOOD_VAL>:
int16_t PITCH_GOOD_VAL(void){
 8007ac8:	b480      	push	{r7}
 8007aca:	af00      	add	r7, sp, #0
	MYDRON.PITCH_STA = 0;
 8007acc:	4b08      	ldr	r3, [pc, #32]	@ (8007af0 <PITCH_GOOD_VAL+0x28>)
 8007ace:	2200      	movs	r2, #0
 8007ad0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
	return pid_angular_rate_pitch;
 8007ad4:	4b07      	ldr	r3, [pc, #28]	@ (8007af4 <PITCH_GOOD_VAL+0x2c>)
 8007ad6:	edd3 7a00 	vldr	s15, [r3]
 8007ada:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007ade:	ee17 3a90 	vmov	r3, s15
 8007ae2:	b21b      	sxth	r3, r3
}
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aec:	4770      	bx	lr
 8007aee:	bf00      	nop
 8007af0:	00000158 	.word	0x00000158
 8007af4:	000040a0 	.word	0x000040a0

08007af8 <YAW_GOOD_VAL>:
int16_t YAW_GOOD_VAL(void){
 8007af8:	b480      	push	{r7}
 8007afa:	af00      	add	r7, sp, #0
	MYDRON.YAW_STA = 0;
 8007afc:	4b08      	ldr	r3, [pc, #32]	@ (8007b20 <YAW_GOOD_VAL+0x28>)
 8007afe:	2200      	movs	r2, #0
 8007b00:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
	return pid_angular_rate_yaw;
 8007b04:	4b07      	ldr	r3, [pc, #28]	@ (8007b24 <YAW_GOOD_VAL+0x2c>)
 8007b06:	edd3 7a00 	vldr	s15, [r3]
 8007b0a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007b0e:	ee17 3a90 	vmov	r3, s15
 8007b12:	b21b      	sxth	r3, r3
}
 8007b14:	4618      	mov	r0, r3
 8007b16:	46bd      	mov	sp, r7
 8007b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1c:	4770      	bx	lr
 8007b1e:	bf00      	nop
 8007b20:	00000158 	.word	0x00000158
 8007b24:	000040a4 	.word	0x000040a4

08007b28 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b084      	sub	sp, #16
 8007b2c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8007b2e:	463b      	mov	r3, r7
 8007b30:	2200      	movs	r2, #0
 8007b32:	601a      	str	r2, [r3, #0]
 8007b34:	605a      	str	r2, [r3, #4]
 8007b36:	609a      	str	r2, [r3, #8]
 8007b38:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8007b3a:	f003 fc5f 	bl	800b3fc <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8007b3e:	2301      	movs	r3, #1
 8007b40:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8007b42:	2300      	movs	r3, #0
 8007b44:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8007b46:	2300      	movs	r3, #0
 8007b48:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8007b4a:	231f      	movs	r3, #31
 8007b4c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8007b4e:	2387      	movs	r3, #135	@ 0x87
 8007b50:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8007b52:	2300      	movs	r3, #0
 8007b54:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8007b56:	2300      	movs	r3, #0
 8007b58:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8007b5a:	2301      	movs	r3, #1
 8007b5c:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8007b5e:	2301      	movs	r3, #1
 8007b60:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8007b62:	2300      	movs	r3, #0
 8007b64:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8007b66:	2300      	movs	r3, #0
 8007b68:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8007b6a:	463b      	mov	r3, r7
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	f003 fc7d 	bl	800b46c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8007b72:	2004      	movs	r0, #4
 8007b74:	f003 fc5a 	bl	800b42c <HAL_MPU_Enable>

}
 8007b78:	bf00      	nop
 8007b7a:	3710      	adds	r7, #16
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	bd80      	pop	{r7, pc}

08007b80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007b80:	b480      	push	{r7}
 8007b82:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8007b84:	b672      	cpsid	i
}
 8007b86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8007b88:	bf00      	nop
 8007b8a:	e7fd      	b.n	8007b88 <Error_Handler+0x8>

08007b8c <MX_SPI2_Init>:
SPI_HandleTypeDef hspi6;
DMA_HandleTypeDef hdma_spi2_tx;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8007b90:	4b27      	ldr	r3, [pc, #156]	@ (8007c30 <MX_SPI2_Init+0xa4>)
 8007b92:	4a28      	ldr	r2, [pc, #160]	@ (8007c34 <MX_SPI2_Init+0xa8>)
 8007b94:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8007b96:	4b26      	ldr	r3, [pc, #152]	@ (8007c30 <MX_SPI2_Init+0xa4>)
 8007b98:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8007b9c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8007b9e:	4b24      	ldr	r3, [pc, #144]	@ (8007c30 <MX_SPI2_Init+0xa4>)
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8007ba4:	4b22      	ldr	r3, [pc, #136]	@ (8007c30 <MX_SPI2_Init+0xa4>)
 8007ba6:	2207      	movs	r2, #7
 8007ba8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8007baa:	4b21      	ldr	r3, [pc, #132]	@ (8007c30 <MX_SPI2_Init+0xa4>)
 8007bac:	2200      	movs	r2, #0
 8007bae:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8007bb0:	4b1f      	ldr	r3, [pc, #124]	@ (8007c30 <MX_SPI2_Init+0xa4>)
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8007bb6:	4b1e      	ldr	r3, [pc, #120]	@ (8007c30 <MX_SPI2_Init+0xa4>)
 8007bb8:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8007bbc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007bbe:	4b1c      	ldr	r3, [pc, #112]	@ (8007c30 <MX_SPI2_Init+0xa4>)
 8007bc0:	2200      	movs	r2, #0
 8007bc2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8007bc4:	4b1a      	ldr	r3, [pc, #104]	@ (8007c30 <MX_SPI2_Init+0xa4>)
 8007bc6:	2200      	movs	r2, #0
 8007bc8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8007bca:	4b19      	ldr	r3, [pc, #100]	@ (8007c30 <MX_SPI2_Init+0xa4>)
 8007bcc:	2200      	movs	r2, #0
 8007bce:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007bd0:	4b17      	ldr	r3, [pc, #92]	@ (8007c30 <MX_SPI2_Init+0xa4>)
 8007bd2:	2200      	movs	r2, #0
 8007bd4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8007bd6:	4b16      	ldr	r3, [pc, #88]	@ (8007c30 <MX_SPI2_Init+0xa4>)
 8007bd8:	2200      	movs	r2, #0
 8007bda:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8007bdc:	4b14      	ldr	r3, [pc, #80]	@ (8007c30 <MX_SPI2_Init+0xa4>)
 8007bde:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8007be2:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8007be4:	4b12      	ldr	r3, [pc, #72]	@ (8007c30 <MX_SPI2_Init+0xa4>)
 8007be6:	2200      	movs	r2, #0
 8007be8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8007bea:	4b11      	ldr	r3, [pc, #68]	@ (8007c30 <MX_SPI2_Init+0xa4>)
 8007bec:	2200      	movs	r2, #0
 8007bee:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8007bf0:	4b0f      	ldr	r3, [pc, #60]	@ (8007c30 <MX_SPI2_Init+0xa4>)
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8007bf6:	4b0e      	ldr	r3, [pc, #56]	@ (8007c30 <MX_SPI2_Init+0xa4>)
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8007bfc:	4b0c      	ldr	r3, [pc, #48]	@ (8007c30 <MX_SPI2_Init+0xa4>)
 8007bfe:	2200      	movs	r2, #0
 8007c00:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8007c02:	4b0b      	ldr	r3, [pc, #44]	@ (8007c30 <MX_SPI2_Init+0xa4>)
 8007c04:	2200      	movs	r2, #0
 8007c06:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8007c08:	4b09      	ldr	r3, [pc, #36]	@ (8007c30 <MX_SPI2_Init+0xa4>)
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8007c0e:	4b08      	ldr	r3, [pc, #32]	@ (8007c30 <MX_SPI2_Init+0xa4>)
 8007c10:	2200      	movs	r2, #0
 8007c12:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8007c14:	4b06      	ldr	r3, [pc, #24]	@ (8007c30 <MX_SPI2_Init+0xa4>)
 8007c16:	2200      	movs	r2, #0
 8007c18:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8007c1a:	4805      	ldr	r0, [pc, #20]	@ (8007c30 <MX_SPI2_Init+0xa4>)
 8007c1c:	f00c fcb0 	bl	8014580 <HAL_SPI_Init>
 8007c20:	4603      	mov	r3, r0
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d001      	beq.n	8007c2a <MX_SPI2_Init+0x9e>
  {
    Error_Handler();
 8007c26:	f7ff ffab 	bl	8007b80 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8007c2a:	bf00      	nop
 8007c2c:	bd80      	pop	{r7, pc}
 8007c2e:	bf00      	nop
 8007c30:	240001ec 	.word	0x240001ec
 8007c34:	40003800 	.word	0x40003800

08007c38 <MX_SPI6_Init>:
/* SPI6 init function */
void MX_SPI6_Init(void)
{
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI6_Init 0 */

  /* USER CODE BEGIN SPI6_Init 1 */

  /* USER CODE END SPI6_Init 1 */
  hspi6.Instance = SPI6;
 8007c3c:	4b27      	ldr	r3, [pc, #156]	@ (8007cdc <MX_SPI6_Init+0xa4>)
 8007c3e:	4a28      	ldr	r2, [pc, #160]	@ (8007ce0 <MX_SPI6_Init+0xa8>)
 8007c40:	601a      	str	r2, [r3, #0]
  hspi6.Init.Mode = SPI_MODE_MASTER;
 8007c42:	4b26      	ldr	r3, [pc, #152]	@ (8007cdc <MX_SPI6_Init+0xa4>)
 8007c44:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8007c48:	605a      	str	r2, [r3, #4]
  hspi6.Init.Direction = SPI_DIRECTION_2LINES;
 8007c4a:	4b24      	ldr	r3, [pc, #144]	@ (8007cdc <MX_SPI6_Init+0xa4>)
 8007c4c:	2200      	movs	r2, #0
 8007c4e:	609a      	str	r2, [r3, #8]
  hspi6.Init.DataSize = SPI_DATASIZE_8BIT;
 8007c50:	4b22      	ldr	r3, [pc, #136]	@ (8007cdc <MX_SPI6_Init+0xa4>)
 8007c52:	2207      	movs	r2, #7
 8007c54:	60da      	str	r2, [r3, #12]
  hspi6.Init.CLKPolarity = SPI_POLARITY_LOW;
 8007c56:	4b21      	ldr	r3, [pc, #132]	@ (8007cdc <MX_SPI6_Init+0xa4>)
 8007c58:	2200      	movs	r2, #0
 8007c5a:	611a      	str	r2, [r3, #16]
  hspi6.Init.CLKPhase = SPI_PHASE_1EDGE;
 8007c5c:	4b1f      	ldr	r3, [pc, #124]	@ (8007cdc <MX_SPI6_Init+0xa4>)
 8007c5e:	2200      	movs	r2, #0
 8007c60:	615a      	str	r2, [r3, #20]
  hspi6.Init.NSS = SPI_NSS_SOFT;
 8007c62:	4b1e      	ldr	r3, [pc, #120]	@ (8007cdc <MX_SPI6_Init+0xa4>)
 8007c64:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8007c68:	619a      	str	r2, [r3, #24]
  hspi6.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007c6a:	4b1c      	ldr	r3, [pc, #112]	@ (8007cdc <MX_SPI6_Init+0xa4>)
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	61da      	str	r2, [r3, #28]
  hspi6.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8007c70:	4b1a      	ldr	r3, [pc, #104]	@ (8007cdc <MX_SPI6_Init+0xa4>)
 8007c72:	2200      	movs	r2, #0
 8007c74:	621a      	str	r2, [r3, #32]
  hspi6.Init.TIMode = SPI_TIMODE_DISABLE;
 8007c76:	4b19      	ldr	r3, [pc, #100]	@ (8007cdc <MX_SPI6_Init+0xa4>)
 8007c78:	2200      	movs	r2, #0
 8007c7a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi6.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007c7c:	4b17      	ldr	r3, [pc, #92]	@ (8007cdc <MX_SPI6_Init+0xa4>)
 8007c7e:	2200      	movs	r2, #0
 8007c80:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi6.Init.CRCPolynomial = 0x0;
 8007c82:	4b16      	ldr	r3, [pc, #88]	@ (8007cdc <MX_SPI6_Init+0xa4>)
 8007c84:	2200      	movs	r2, #0
 8007c86:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi6.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8007c88:	4b14      	ldr	r3, [pc, #80]	@ (8007cdc <MX_SPI6_Init+0xa4>)
 8007c8a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8007c8e:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi6.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8007c90:	4b12      	ldr	r3, [pc, #72]	@ (8007cdc <MX_SPI6_Init+0xa4>)
 8007c92:	2200      	movs	r2, #0
 8007c94:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi6.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8007c96:	4b11      	ldr	r3, [pc, #68]	@ (8007cdc <MX_SPI6_Init+0xa4>)
 8007c98:	2200      	movs	r2, #0
 8007c9a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi6.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8007c9c:	4b0f      	ldr	r3, [pc, #60]	@ (8007cdc <MX_SPI6_Init+0xa4>)
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi6.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8007ca2:	4b0e      	ldr	r3, [pc, #56]	@ (8007cdc <MX_SPI6_Init+0xa4>)
 8007ca4:	2200      	movs	r2, #0
 8007ca6:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi6.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8007ca8:	4b0c      	ldr	r3, [pc, #48]	@ (8007cdc <MX_SPI6_Init+0xa4>)
 8007caa:	2200      	movs	r2, #0
 8007cac:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi6.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8007cae:	4b0b      	ldr	r3, [pc, #44]	@ (8007cdc <MX_SPI6_Init+0xa4>)
 8007cb0:	2200      	movs	r2, #0
 8007cb2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi6.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8007cb4:	4b09      	ldr	r3, [pc, #36]	@ (8007cdc <MX_SPI6_Init+0xa4>)
 8007cb6:	2200      	movs	r2, #0
 8007cb8:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi6.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8007cba:	4b08      	ldr	r3, [pc, #32]	@ (8007cdc <MX_SPI6_Init+0xa4>)
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi6.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8007cc0:	4b06      	ldr	r3, [pc, #24]	@ (8007cdc <MX_SPI6_Init+0xa4>)
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi6) != HAL_OK)
 8007cc6:	4805      	ldr	r0, [pc, #20]	@ (8007cdc <MX_SPI6_Init+0xa4>)
 8007cc8:	f00c fc5a 	bl	8014580 <HAL_SPI_Init>
 8007ccc:	4603      	mov	r3, r0
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d001      	beq.n	8007cd6 <MX_SPI6_Init+0x9e>
  {
    Error_Handler();
 8007cd2:	f7ff ff55 	bl	8007b80 <Error_Handler>
  }
  /* USER CODE BEGIN SPI6_Init 2 */

  /* USER CODE END SPI6_Init 2 */

}
 8007cd6:	bf00      	nop
 8007cd8:	bd80      	pop	{r7, pc}
 8007cda:	bf00      	nop
 8007cdc:	24000274 	.word	0x24000274
 8007ce0:	58001400 	.word	0x58001400

08007ce4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b0ba      	sub	sp, #232	@ 0xe8
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007cec:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8007cf0:	2200      	movs	r2, #0
 8007cf2:	601a      	str	r2, [r3, #0]
 8007cf4:	605a      	str	r2, [r3, #4]
 8007cf6:	609a      	str	r2, [r3, #8]
 8007cf8:	60da      	str	r2, [r3, #12]
 8007cfa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8007cfc:	f107 0318 	add.w	r3, r7, #24
 8007d00:	22b8      	movs	r2, #184	@ 0xb8
 8007d02:	2100      	movs	r1, #0
 8007d04:	4618      	mov	r0, r3
 8007d06:	f016 f87d 	bl	801de04 <memset>
  if(spiHandle->Instance==SPI2)
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	4a77      	ldr	r2, [pc, #476]	@ (8007eec <HAL_SPI_MspInit+0x208>)
 8007d10:	4293      	cmp	r3, r2
 8007d12:	f040 8089 	bne.w	8007e28 <HAL_SPI_MspInit+0x144>
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */

    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8007d16:	4b76      	ldr	r3, [pc, #472]	@ (8007ef0 <HAL_SPI_MspInit+0x20c>)
 8007d18:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007d1c:	4a74      	ldr	r2, [pc, #464]	@ (8007ef0 <HAL_SPI_MspInit+0x20c>)
 8007d1e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007d22:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8007d26:	4b72      	ldr	r3, [pc, #456]	@ (8007ef0 <HAL_SPI_MspInit+0x20c>)
 8007d28:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007d2c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007d30:	617b      	str	r3, [r7, #20]
 8007d32:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007d34:	4b6e      	ldr	r3, [pc, #440]	@ (8007ef0 <HAL_SPI_MspInit+0x20c>)
 8007d36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007d3a:	4a6d      	ldr	r2, [pc, #436]	@ (8007ef0 <HAL_SPI_MspInit+0x20c>)
 8007d3c:	f043 0302 	orr.w	r3, r3, #2
 8007d40:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8007d44:	4b6a      	ldr	r3, [pc, #424]	@ (8007ef0 <HAL_SPI_MspInit+0x20c>)
 8007d46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007d4a:	f003 0302 	and.w	r3, r3, #2
 8007d4e:	613b      	str	r3, [r7, #16]
 8007d50:	693b      	ldr	r3, [r7, #16]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8007d52:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8007d56:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007d5a:	2302      	movs	r3, #2
 8007d5c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d60:	2300      	movs	r3, #0
 8007d62:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8007d66:	2301      	movs	r3, #1
 8007d68:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8007d6c:	2305      	movs	r3, #5
 8007d6e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007d72:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8007d76:	4619      	mov	r1, r3
 8007d78:	485e      	ldr	r0, [pc, #376]	@ (8007ef4 <HAL_SPI_MspInit+0x210>)
 8007d7a:	f006 fa09 	bl	800e190 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8007d7e:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8007d82:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007d86:	2302      	movs	r3, #2
 8007d88:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007d8c:	2301      	movs	r3, #1
 8007d8e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8007d92:	2301      	movs	r3, #1
 8007d94:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8007d98:	2305      	movs	r3, #5
 8007d9a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007d9e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8007da2:	4619      	mov	r1, r3
 8007da4:	4853      	ldr	r0, [pc, #332]	@ (8007ef4 <HAL_SPI_MspInit+0x210>)
 8007da6:	f006 f9f3 	bl	800e190 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream0;
 8007daa:	4b53      	ldr	r3, [pc, #332]	@ (8007ef8 <HAL_SPI_MspInit+0x214>)
 8007dac:	4a53      	ldr	r2, [pc, #332]	@ (8007efc <HAL_SPI_MspInit+0x218>)
 8007dae:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_SPI2_TX;
 8007db0:	4b51      	ldr	r3, [pc, #324]	@ (8007ef8 <HAL_SPI_MspInit+0x214>)
 8007db2:	2228      	movs	r2, #40	@ 0x28
 8007db4:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007db6:	4b50      	ldr	r3, [pc, #320]	@ (8007ef8 <HAL_SPI_MspInit+0x214>)
 8007db8:	2240      	movs	r2, #64	@ 0x40
 8007dba:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007dbc:	4b4e      	ldr	r3, [pc, #312]	@ (8007ef8 <HAL_SPI_MspInit+0x214>)
 8007dbe:	2200      	movs	r2, #0
 8007dc0:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8007dc2:	4b4d      	ldr	r3, [pc, #308]	@ (8007ef8 <HAL_SPI_MspInit+0x214>)
 8007dc4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8007dc8:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007dca:	4b4b      	ldr	r3, [pc, #300]	@ (8007ef8 <HAL_SPI_MspInit+0x214>)
 8007dcc:	2200      	movs	r2, #0
 8007dce:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007dd0:	4b49      	ldr	r3, [pc, #292]	@ (8007ef8 <HAL_SPI_MspInit+0x214>)
 8007dd2:	2200      	movs	r2, #0
 8007dd4:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8007dd6:	4b48      	ldr	r3, [pc, #288]	@ (8007ef8 <HAL_SPI_MspInit+0x214>)
 8007dd8:	2200      	movs	r2, #0
 8007dda:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8007ddc:	4b46      	ldr	r3, [pc, #280]	@ (8007ef8 <HAL_SPI_MspInit+0x214>)
 8007dde:	2200      	movs	r2, #0
 8007de0:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8007de2:	4b45      	ldr	r3, [pc, #276]	@ (8007ef8 <HAL_SPI_MspInit+0x214>)
 8007de4:	2204      	movs	r2, #4
 8007de6:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_spi2_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8007de8:	4b43      	ldr	r3, [pc, #268]	@ (8007ef8 <HAL_SPI_MspInit+0x214>)
 8007dea:	2203      	movs	r2, #3
 8007dec:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_spi2_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8007dee:	4b42      	ldr	r3, [pc, #264]	@ (8007ef8 <HAL_SPI_MspInit+0x214>)
 8007df0:	2200      	movs	r2, #0
 8007df2:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_spi2_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8007df4:	4b40      	ldr	r3, [pc, #256]	@ (8007ef8 <HAL_SPI_MspInit+0x214>)
 8007df6:	2200      	movs	r2, #0
 8007df8:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8007dfa:	483f      	ldr	r0, [pc, #252]	@ (8007ef8 <HAL_SPI_MspInit+0x214>)
 8007dfc:	f003 fb76 	bl	800b4ec <HAL_DMA_Init>
 8007e00:	4603      	mov	r3, r0
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d001      	beq.n	8007e0a <HAL_SPI_MspInit+0x126>
    {
      Error_Handler();
 8007e06:	f7ff febb 	bl	8007b80 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	4a3a      	ldr	r2, [pc, #232]	@ (8007ef8 <HAL_SPI_MspInit+0x214>)
 8007e0e:	679a      	str	r2, [r3, #120]	@ 0x78
 8007e10:	4a39      	ldr	r2, [pc, #228]	@ (8007ef8 <HAL_SPI_MspInit+0x214>)
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8007e16:	2200      	movs	r2, #0
 8007e18:	2100      	movs	r1, #0
 8007e1a:	2024      	movs	r0, #36	@ 0x24
 8007e1c:	f003 fab9 	bl	800b392 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8007e20:	2024      	movs	r0, #36	@ 0x24
 8007e22:	f003 fad0 	bl	800b3c6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN SPI6_MspInit 1 */

  /* USER CODE END SPI6_MspInit 1 */
  }
}
 8007e26:	e05c      	b.n	8007ee2 <HAL_SPI_MspInit+0x1fe>
  else if(spiHandle->Instance==SPI6)
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	4a34      	ldr	r2, [pc, #208]	@ (8007f00 <HAL_SPI_MspInit+0x21c>)
 8007e2e:	4293      	cmp	r3, r2
 8007e30:	d157      	bne.n	8007ee2 <HAL_SPI_MspInit+0x1fe>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI6;
 8007e32:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8007e36:	f04f 0300 	mov.w	r3, #0
 8007e3a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.PLL3.PLL3M = 24;
 8007e3e:	2318      	movs	r3, #24
 8007e40:	643b      	str	r3, [r7, #64]	@ 0x40
    PeriphClkInitStruct.PLL3.PLL3N = 200;
 8007e42:	23c8      	movs	r3, #200	@ 0xc8
 8007e44:	647b      	str	r3, [r7, #68]	@ 0x44
    PeriphClkInitStruct.PLL3.PLL3P = 1;
 8007e46:	2301      	movs	r3, #1
 8007e48:	64bb      	str	r3, [r7, #72]	@ 0x48
    PeriphClkInitStruct.PLL3.PLL3Q = 10;
 8007e4a:	230a      	movs	r3, #10
 8007e4c:	64fb      	str	r3, [r7, #76]	@ 0x4c
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8007e4e:	2302      	movs	r3, #2
 8007e50:	653b      	str	r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_0;
 8007e52:	2300      	movs	r3, #0
 8007e54:	657b      	str	r3, [r7, #84]	@ 0x54
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 8007e56:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007e5a:	65bb      	str	r3, [r7, #88]	@ 0x58
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    PeriphClkInitStruct.Spi6ClockSelection = RCC_SPI6CLKSOURCE_PLL3;
 8007e60:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8007e64:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007e68:	f107 0318 	add.w	r3, r7, #24
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	f009 ffa1 	bl	8011db4 <HAL_RCCEx_PeriphCLKConfig>
 8007e72:	4603      	mov	r3, r0
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d001      	beq.n	8007e7c <HAL_SPI_MspInit+0x198>
      Error_Handler();
 8007e78:	f7ff fe82 	bl	8007b80 <Error_Handler>
    __HAL_RCC_SPI6_CLK_ENABLE();
 8007e7c:	4b1c      	ldr	r3, [pc, #112]	@ (8007ef0 <HAL_SPI_MspInit+0x20c>)
 8007e7e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007e82:	4a1b      	ldr	r2, [pc, #108]	@ (8007ef0 <HAL_SPI_MspInit+0x20c>)
 8007e84:	f043 0320 	orr.w	r3, r3, #32
 8007e88:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8007e8c:	4b18      	ldr	r3, [pc, #96]	@ (8007ef0 <HAL_SPI_MspInit+0x20c>)
 8007e8e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007e92:	f003 0320 	and.w	r3, r3, #32
 8007e96:	60fb      	str	r3, [r7, #12]
 8007e98:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007e9a:	4b15      	ldr	r3, [pc, #84]	@ (8007ef0 <HAL_SPI_MspInit+0x20c>)
 8007e9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007ea0:	4a13      	ldr	r2, [pc, #76]	@ (8007ef0 <HAL_SPI_MspInit+0x20c>)
 8007ea2:	f043 0302 	orr.w	r3, r3, #2
 8007ea6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8007eaa:	4b11      	ldr	r3, [pc, #68]	@ (8007ef0 <HAL_SPI_MspInit+0x20c>)
 8007eac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007eb0:	f003 0302 	and.w	r3, r3, #2
 8007eb4:	60bb      	str	r3, [r7, #8]
 8007eb6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8007eb8:	2338      	movs	r3, #56	@ 0x38
 8007eba:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007ebe:	2302      	movs	r3, #2
 8007ec0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007eca:	2300      	movs	r3, #0
 8007ecc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_SPI6;
 8007ed0:	2308      	movs	r3, #8
 8007ed2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007ed6:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8007eda:	4619      	mov	r1, r3
 8007edc:	4805      	ldr	r0, [pc, #20]	@ (8007ef4 <HAL_SPI_MspInit+0x210>)
 8007ede:	f006 f957 	bl	800e190 <HAL_GPIO_Init>
}
 8007ee2:	bf00      	nop
 8007ee4:	37e8      	adds	r7, #232	@ 0xe8
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	bd80      	pop	{r7, pc}
 8007eea:	bf00      	nop
 8007eec:	40003800 	.word	0x40003800
 8007ef0:	58024400 	.word	0x58024400
 8007ef4:	58020400 	.word	0x58020400
 8007ef8:	240002fc 	.word	0x240002fc
 8007efc:	40020010 	.word	0x40020010
 8007f00:	58001400 	.word	0x58001400

08007f04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007f04:	b480      	push	{r7}
 8007f06:	b083      	sub	sp, #12
 8007f08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007f0a:	4b0a      	ldr	r3, [pc, #40]	@ (8007f34 <HAL_MspInit+0x30>)
 8007f0c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007f10:	4a08      	ldr	r2, [pc, #32]	@ (8007f34 <HAL_MspInit+0x30>)
 8007f12:	f043 0302 	orr.w	r3, r3, #2
 8007f16:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8007f1a:	4b06      	ldr	r3, [pc, #24]	@ (8007f34 <HAL_MspInit+0x30>)
 8007f1c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007f20:	f003 0302 	and.w	r3, r3, #2
 8007f24:	607b      	str	r3, [r7, #4]
 8007f26:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007f28:	bf00      	nop
 8007f2a:	370c      	adds	r7, #12
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f32:	4770      	bx	lr
 8007f34:	58024400 	.word	0x58024400

08007f38 <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint32_t FatFsCnt = 0;
volatile uint32_t Timer1, Timer2;

void SDTimer_Handler(void)//1ms
{
 8007f38:	b480      	push	{r7}
 8007f3a:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 8007f3c:	4b0b      	ldr	r3, [pc, #44]	@ (8007f6c <SDTimer_Handler+0x34>)
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d004      	beq.n	8007f4e <SDTimer_Handler+0x16>
    Timer1--;
 8007f44:	4b09      	ldr	r3, [pc, #36]	@ (8007f6c <SDTimer_Handler+0x34>)
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	3b01      	subs	r3, #1
 8007f4a:	4a08      	ldr	r2, [pc, #32]	@ (8007f6c <SDTimer_Handler+0x34>)
 8007f4c:	6013      	str	r3, [r2, #0]

  if(Timer2 > 0)
 8007f4e:	4b08      	ldr	r3, [pc, #32]	@ (8007f70 <SDTimer_Handler+0x38>)
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d004      	beq.n	8007f60 <SDTimer_Handler+0x28>
    Timer2--;
 8007f56:	4b06      	ldr	r3, [pc, #24]	@ (8007f70 <SDTimer_Handler+0x38>)
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	3b01      	subs	r3, #1
 8007f5c:	4a04      	ldr	r2, [pc, #16]	@ (8007f70 <SDTimer_Handler+0x38>)
 8007f5e:	6013      	str	r3, [r2, #0]
}
 8007f60:	bf00      	nop
 8007f62:	46bd      	mov	sp, r7
 8007f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f68:	4770      	bx	lr
 8007f6a:	bf00      	nop
 8007f6c:	24000378 	.word	0x24000378
 8007f70:	2400037c 	.word	0x2400037c
 8007f74:	00000000 	.word	0x00000000

08007f78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	b082      	sub	sp, #8
 8007f7c:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */


	LED_G_0;
 8007f7e:	2200      	movs	r2, #0
 8007f80:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007f84:	48bc      	ldr	r0, [pc, #752]	@ (8008278 <NMI_Handler+0x300>)
 8007f86:	f006 fac3 	bl	800e510 <HAL_GPIO_WritePin>
	LED_Y_0;
 8007f8a:	2200      	movs	r2, #0
 8007f8c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8007f90:	48ba      	ldr	r0, [pc, #744]	@ (800827c <NMI_Handler+0x304>)
 8007f92:	f006 fabd 	bl	800e510 <HAL_GPIO_WritePin>
	LED_R_1;
 8007f96:	2201      	movs	r2, #1
 8007f98:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8007f9c:	48b7      	ldr	r0, [pc, #732]	@ (800827c <NMI_Handler+0x304>)
 8007f9e:	f006 fab7 	bl	800e510 <HAL_GPIO_WritePin>
//todo create crash log
	f_close(&fil);
 8007fa2:	48b7      	ldr	r0, [pc, #732]	@ (8008280 <NMI_Handler+0x308>)
 8007fa4:	f015 fd36 	bl	801da14 <f_close>

	wanted_rool = 0;
 8007fa8:	4bb6      	ldr	r3, [pc, #728]	@ (8008284 <NMI_Handler+0x30c>)
 8007faa:	f04f 0200 	mov.w	r2, #0
 8007fae:	601a      	str	r2, [r3, #0]
	wanted_pitch = 0;
 8007fb0:	4bb5      	ldr	r3, [pc, #724]	@ (8008288 <NMI_Handler+0x310>)
 8007fb2:	f04f 0200 	mov.w	r2, #0
 8007fb6:	601a      	str	r2, [r3, #0]
	wanted_yaw = 0;
 8007fb8:	4bb4      	ldr	r3, [pc, #720]	@ (800828c <NMI_Handler+0x314>)
 8007fba:	f04f 0200 	mov.w	r2, #0
 8007fbe:	601a      	str	r2, [r3, #0]
	wanted_thrust = DRON_SLOWFALING;
 8007fc0:	4bb3      	ldr	r3, [pc, #716]	@ (8008290 <NMI_Handler+0x318>)
 8007fc2:	881b      	ldrh	r3, [r3, #0]
 8007fc4:	b21a      	sxth	r2, r3
 8007fc6:	4bb3      	ldr	r3, [pc, #716]	@ (8008294 <NMI_Handler+0x31c>)
 8007fc8:	801a      	strh	r2, [r3, #0]
  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
  {
	   	HAL_Delay(1);
 8007fca:	2001      	movs	r0, #1
 8007fcc:	f001 f942 	bl	8009254 <HAL_Delay>
		MPU6050_GET_ACCANDGYR_CALANDSCL(&ax, &ay, &az, &gx, &gy, &gz, accelx_cal, accely_cal, accelz_cal, gyrox_cal, gyroy_cal, gyroz_cal, Gyr_Scale, Acc_Scale);
 8007fd0:	4bb1      	ldr	r3, [pc, #708]	@ (8008298 <NMI_Handler+0x320>)
 8007fd2:	edd3 7a00 	vldr	s15, [r3]
 8007fd6:	4bb1      	ldr	r3, [pc, #708]	@ (800829c <NMI_Handler+0x324>)
 8007fd8:	ed93 7a00 	vldr	s14, [r3]
 8007fdc:	4bb0      	ldr	r3, [pc, #704]	@ (80082a0 <NMI_Handler+0x328>)
 8007fde:	edd3 6a00 	vldr	s13, [r3]
 8007fe2:	4bb0      	ldr	r3, [pc, #704]	@ (80082a4 <NMI_Handler+0x32c>)
 8007fe4:	ed93 6a00 	vldr	s12, [r3]
 8007fe8:	4baf      	ldr	r3, [pc, #700]	@ (80082a8 <NMI_Handler+0x330>)
 8007fea:	edd3 5a00 	vldr	s11, [r3]
 8007fee:	4baf      	ldr	r3, [pc, #700]	@ (80082ac <NMI_Handler+0x334>)
 8007ff0:	ed93 5a00 	vldr	s10, [r3]
 8007ff4:	4bae      	ldr	r3, [pc, #696]	@ (80082b0 <NMI_Handler+0x338>)
 8007ff6:	edd3 4a00 	vldr	s9, [r3]
 8007ffa:	4bae      	ldr	r3, [pc, #696]	@ (80082b4 <NMI_Handler+0x33c>)
 8007ffc:	ed93 4a00 	vldr	s8, [r3]
 8008000:	4bad      	ldr	r3, [pc, #692]	@ (80082b8 <NMI_Handler+0x340>)
 8008002:	9301      	str	r3, [sp, #4]
 8008004:	4bad      	ldr	r3, [pc, #692]	@ (80082bc <NMI_Handler+0x344>)
 8008006:	9300      	str	r3, [sp, #0]
 8008008:	eef0 3a44 	vmov.f32	s7, s8
 800800c:	eeb0 3a64 	vmov.f32	s6, s9
 8008010:	eef0 2a45 	vmov.f32	s5, s10
 8008014:	eeb0 2a65 	vmov.f32	s4, s11
 8008018:	eef0 1a46 	vmov.f32	s3, s12
 800801c:	eeb0 1a66 	vmov.f32	s2, s13
 8008020:	eef0 0a47 	vmov.f32	s1, s14
 8008024:	eeb0 0a67 	vmov.f32	s0, s15
 8008028:	4ba5      	ldr	r3, [pc, #660]	@ (80082c0 <NMI_Handler+0x348>)
 800802a:	4aa6      	ldr	r2, [pc, #664]	@ (80082c4 <NMI_Handler+0x34c>)
 800802c:	49a6      	ldr	r1, [pc, #664]	@ (80082c8 <NMI_Handler+0x350>)
 800802e:	48a7      	ldr	r0, [pc, #668]	@ (80082cc <NMI_Handler+0x354>)
 8008030:	f7f9 fad8 	bl	80015e4 <MPU6050_GET_ACCANDGYR_CALANDSCL>
		MPU6050_GET_ACCEL_TO_ANGLE(ax, ay, az, &ax_ang, &ay_ang/*, &az_ang*/);
 8008034:	4ba5      	ldr	r3, [pc, #660]	@ (80082cc <NMI_Handler+0x354>)
 8008036:	edd3 7a00 	vldr	s15, [r3]
 800803a:	4ba3      	ldr	r3, [pc, #652]	@ (80082c8 <NMI_Handler+0x350>)
 800803c:	ed93 7a00 	vldr	s14, [r3]
 8008040:	4ba0      	ldr	r3, [pc, #640]	@ (80082c4 <NMI_Handler+0x34c>)
 8008042:	edd3 6a00 	vldr	s13, [r3]
 8008046:	49a2      	ldr	r1, [pc, #648]	@ (80082d0 <NMI_Handler+0x358>)
 8008048:	48a2      	ldr	r0, [pc, #648]	@ (80082d4 <NMI_Handler+0x35c>)
 800804a:	eeb0 1a66 	vmov.f32	s2, s13
 800804e:	eef0 0a47 	vmov.f32	s1, s14
 8008052:	eeb0 0a67 	vmov.f32	s0, s15
 8008056:	f7f9 fa47 	bl	80014e8 <MPU6050_GET_ACCEL_TO_ANGLE>
		MPU6050_GET_ACCANDGYR_FILTRED(&data, ax_ang, ay_ang, Mag_Z, gx, gy, gz);
 800805a:	4b9e      	ldr	r3, [pc, #632]	@ (80082d4 <NMI_Handler+0x35c>)
 800805c:	edd3 7a00 	vldr	s15, [r3]
 8008060:	4b9b      	ldr	r3, [pc, #620]	@ (80082d0 <NMI_Handler+0x358>)
 8008062:	ed93 7a00 	vldr	s14, [r3]
 8008066:	4b9c      	ldr	r3, [pc, #624]	@ (80082d8 <NMI_Handler+0x360>)
 8008068:	edd3 6a00 	vldr	s13, [r3]
 800806c:	4b94      	ldr	r3, [pc, #592]	@ (80082c0 <NMI_Handler+0x348>)
 800806e:	ed93 6a00 	vldr	s12, [r3]
 8008072:	4b92      	ldr	r3, [pc, #584]	@ (80082bc <NMI_Handler+0x344>)
 8008074:	edd3 5a00 	vldr	s11, [r3]
 8008078:	4b8f      	ldr	r3, [pc, #572]	@ (80082b8 <NMI_Handler+0x340>)
 800807a:	ed93 5a00 	vldr	s10, [r3]
 800807e:	eef0 2a45 	vmov.f32	s5, s10
 8008082:	eeb0 2a65 	vmov.f32	s4, s11
 8008086:	eef0 1a46 	vmov.f32	s3, s12
 800808a:	eeb0 1a66 	vmov.f32	s2, s13
 800808e:	eef0 0a47 	vmov.f32	s1, s14
 8008092:	eeb0 0a67 	vmov.f32	s0, s15
 8008096:	4891      	ldr	r0, [pc, #580]	@ (80082dc <NMI_Handler+0x364>)
 8008098:	f7f9 fc1e 	bl	80018d8 <MPU6050_GET_ACCANDGYR_FILTRED>


		now_pitch = data.x;
 800809c:	4b8f      	ldr	r3, [pc, #572]	@ (80082dc <NMI_Handler+0x364>)
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	4a8f      	ldr	r2, [pc, #572]	@ (80082e0 <NMI_Handler+0x368>)
 80080a2:	6013      	str	r3, [r2, #0]
		now_rool = data.y;
 80080a4:	4b8d      	ldr	r3, [pc, #564]	@ (80082dc <NMI_Handler+0x364>)
 80080a6:	685b      	ldr	r3, [r3, #4]
 80080a8:	4a8e      	ldr	r2, [pc, #568]	@ (80082e4 <NMI_Handler+0x36c>)
 80080aa:	6013      	str	r3, [r2, #0]
		now_yaw = data.z;
 80080ac:	4b8b      	ldr	r3, [pc, #556]	@ (80082dc <NMI_Handler+0x364>)
 80080ae:	689b      	ldr	r3, [r3, #8]
 80080b0:	4a8d      	ldr	r2, [pc, #564]	@ (80082e8 <NMI_Handler+0x370>)
 80080b2:	6013      	str	r3, [r2, #0]


		last_wanted_rool_rx = wanted_rool;
 80080b4:	4b73      	ldr	r3, [pc, #460]	@ (8008284 <NMI_Handler+0x30c>)
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	4a8c      	ldr	r2, [pc, #560]	@ (80082ec <NMI_Handler+0x374>)
 80080ba:	6013      	str	r3, [r2, #0]
		last_wanted_pitch_rx = wanted_pitch;
 80080bc:	4b72      	ldr	r3, [pc, #456]	@ (8008288 <NMI_Handler+0x310>)
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	4a8b      	ldr	r2, [pc, #556]	@ (80082f0 <NMI_Handler+0x378>)
 80080c2:	6013      	str	r3, [r2, #0]
		last_wanted_yaw_rx = wanted_yaw;
 80080c4:	4b71      	ldr	r3, [pc, #452]	@ (800828c <NMI_Handler+0x314>)
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	4a8a      	ldr	r2, [pc, #552]	@ (80082f4 <NMI_Handler+0x37c>)
 80080ca:	6013      	str	r3, [r2, #0]


		error_sum_pitch = error_sum_pitch + (wanted_pitch - now_pitch);
 80080cc:	4b8a      	ldr	r3, [pc, #552]	@ (80082f8 <NMI_Handler+0x380>)
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	ee07 3a90 	vmov	s15, r3
 80080d4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80080d8:	4b6b      	ldr	r3, [pc, #428]	@ (8008288 <NMI_Handler+0x310>)
 80080da:	edd3 6a00 	vldr	s13, [r3]
 80080de:	4b80      	ldr	r3, [pc, #512]	@ (80082e0 <NMI_Handler+0x368>)
 80080e0:	edd3 7a00 	vldr	s15, [r3]
 80080e4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80080e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80080ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80080f0:	ee17 2a90 	vmov	r2, s15
 80080f4:	4b80      	ldr	r3, [pc, #512]	@ (80082f8 <NMI_Handler+0x380>)
 80080f6:	601a      	str	r2, [r3, #0]
		error_sum_rool = error_sum_rool + (wanted_rool - now_rool);
 80080f8:	4b80      	ldr	r3, [pc, #512]	@ (80082fc <NMI_Handler+0x384>)
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	ee07 3a90 	vmov	s15, r3
 8008100:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008104:	4b5f      	ldr	r3, [pc, #380]	@ (8008284 <NMI_Handler+0x30c>)
 8008106:	edd3 6a00 	vldr	s13, [r3]
 800810a:	4b76      	ldr	r3, [pc, #472]	@ (80082e4 <NMI_Handler+0x36c>)
 800810c:	edd3 7a00 	vldr	s15, [r3]
 8008110:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8008114:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008118:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800811c:	ee17 2a90 	vmov	r2, s15
 8008120:	4b76      	ldr	r3, [pc, #472]	@ (80082fc <NMI_Handler+0x384>)
 8008122:	601a      	str	r2, [r3, #0]
		error_sum_yaw = error_sum_yaw + (wanted_yaw - now_yaw);
 8008124:	4b76      	ldr	r3, [pc, #472]	@ (8008300 <NMI_Handler+0x388>)
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	ee07 3a90 	vmov	s15, r3
 800812c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008130:	4b56      	ldr	r3, [pc, #344]	@ (800828c <NMI_Handler+0x314>)
 8008132:	edd3 6a00 	vldr	s13, [r3]
 8008136:	4b6c      	ldr	r3, [pc, #432]	@ (80082e8 <NMI_Handler+0x370>)
 8008138:	edd3 7a00 	vldr	s15, [r3]
 800813c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8008140:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008144:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008148:	ee17 2a90 	vmov	r2, s15
 800814c:	4b6c      	ldr	r3, [pc, #432]	@ (8008300 <NMI_Handler+0x388>)
 800814e:	601a      	str	r2, [r3, #0]

		error_sum_angular_rate_pitch = error_sum_angular_rate_pitch + (pid_pitch - gx);
 8008150:	4b6c      	ldr	r3, [pc, #432]	@ (8008304 <NMI_Handler+0x38c>)
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	ee07 3a90 	vmov	s15, r3
 8008158:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800815c:	4b6a      	ldr	r3, [pc, #424]	@ (8008308 <NMI_Handler+0x390>)
 800815e:	edd3 6a00 	vldr	s13, [r3]
 8008162:	4b57      	ldr	r3, [pc, #348]	@ (80082c0 <NMI_Handler+0x348>)
 8008164:	edd3 7a00 	vldr	s15, [r3]
 8008168:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800816c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008170:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008174:	ee17 2a90 	vmov	r2, s15
 8008178:	4b62      	ldr	r3, [pc, #392]	@ (8008304 <NMI_Handler+0x38c>)
 800817a:	601a      	str	r2, [r3, #0]
		error_sum_angular_rate_rool = error_sum_angular_rate_rool + (pid_rool - gy);
 800817c:	4b63      	ldr	r3, [pc, #396]	@ (800830c <NMI_Handler+0x394>)
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	ee07 3a90 	vmov	s15, r3
 8008184:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008188:	4b61      	ldr	r3, [pc, #388]	@ (8008310 <NMI_Handler+0x398>)
 800818a:	edd3 6a00 	vldr	s13, [r3]
 800818e:	4b4b      	ldr	r3, [pc, #300]	@ (80082bc <NMI_Handler+0x344>)
 8008190:	edd3 7a00 	vldr	s15, [r3]
 8008194:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8008198:	ee77 7a27 	vadd.f32	s15, s14, s15
 800819c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80081a0:	ee17 2a90 	vmov	r2, s15
 80081a4:	4b59      	ldr	r3, [pc, #356]	@ (800830c <NMI_Handler+0x394>)
 80081a6:	601a      	str	r2, [r3, #0]
		error_sum_angular_rate_yaw = error_sum_angular_rate_yaw + (pid_yaw - gz);
 80081a8:	4b5a      	ldr	r3, [pc, #360]	@ (8008314 <NMI_Handler+0x39c>)
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	ee07 3a90 	vmov	s15, r3
 80081b0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80081b4:	4b58      	ldr	r3, [pc, #352]	@ (8008318 <NMI_Handler+0x3a0>)
 80081b6:	edd3 6a00 	vldr	s13, [r3]
 80081ba:	4b3f      	ldr	r3, [pc, #252]	@ (80082b8 <NMI_Handler+0x340>)
 80081bc:	edd3 7a00 	vldr	s15, [r3]
 80081c0:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80081c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80081c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80081cc:	ee17 2a90 	vmov	r2, s15
 80081d0:	4b50      	ldr	r3, [pc, #320]	@ (8008314 <NMI_Handler+0x39c>)
 80081d2:	601a      	str	r2, [r3, #0]


		PID_cal(&pid_pitch, PID_FAC_Pitch, 1);// angle control
 80081d4:	2201      	movs	r2, #1
 80081d6:	4951      	ldr	r1, [pc, #324]	@ (800831c <NMI_Handler+0x3a4>)
 80081d8:	484b      	ldr	r0, [pc, #300]	@ (8008308 <NMI_Handler+0x390>)
 80081da:	f7fb fbf7 	bl	80039cc <PID_cal>
		PID_cal(&pid_rool, PID_FAC_Rool, 2);
 80081de:	2202      	movs	r2, #2
 80081e0:	494f      	ldr	r1, [pc, #316]	@ (8008320 <NMI_Handler+0x3a8>)
 80081e2:	484b      	ldr	r0, [pc, #300]	@ (8008310 <NMI_Handler+0x398>)
 80081e4:	f7fb fbf2 	bl	80039cc <PID_cal>

		PID_cal(&pid_angular_rate_pitch, PID_FAC_Angular_Rate_Pitch, 4);// angle rate control
 80081e8:	2204      	movs	r2, #4
 80081ea:	494e      	ldr	r1, [pc, #312]	@ (8008324 <NMI_Handler+0x3ac>)
 80081ec:	484e      	ldr	r0, [pc, #312]	@ (8008328 <NMI_Handler+0x3b0>)
 80081ee:	f7fb fbed 	bl	80039cc <PID_cal>
		PID_cal(&pid_angular_rate_rool, PID_FAC_Angular_Rate_Rool, 5);
 80081f2:	2205      	movs	r2, #5
 80081f4:	494d      	ldr	r1, [pc, #308]	@ (800832c <NMI_Handler+0x3b4>)
 80081f6:	484e      	ldr	r0, [pc, #312]	@ (8008330 <NMI_Handler+0x3b8>)
 80081f8:	f7fb fbe8 	bl	80039cc <PID_cal>
		PID_cal(&pid_angular_rate_yaw, PID_FAC_Angular_Rate_Yaw, 6);
 80081fc:	2206      	movs	r2, #6
 80081fe:	494d      	ldr	r1, [pc, #308]	@ (8008334 <NMI_Handler+0x3bc>)
 8008200:	484d      	ldr	r0, [pc, #308]	@ (8008338 <NMI_Handler+0x3c0>)
 8008202:	f7fb fbe3 	bl	80039cc <PID_cal>


		old_error_pitch = wanted_pitch - now_pitch;
 8008206:	4b20      	ldr	r3, [pc, #128]	@ (8008288 <NMI_Handler+0x310>)
 8008208:	ed93 7a00 	vldr	s14, [r3]
 800820c:	4b34      	ldr	r3, [pc, #208]	@ (80082e0 <NMI_Handler+0x368>)
 800820e:	edd3 7a00 	vldr	s15, [r3]
 8008212:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008216:	4b49      	ldr	r3, [pc, #292]	@ (800833c <NMI_Handler+0x3c4>)
 8008218:	edc3 7a00 	vstr	s15, [r3]
		old_error_rool = wanted_rool - now_rool;
 800821c:	4b19      	ldr	r3, [pc, #100]	@ (8008284 <NMI_Handler+0x30c>)
 800821e:	ed93 7a00 	vldr	s14, [r3]
 8008222:	4b30      	ldr	r3, [pc, #192]	@ (80082e4 <NMI_Handler+0x36c>)
 8008224:	edd3 7a00 	vldr	s15, [r3]
 8008228:	ee77 7a67 	vsub.f32	s15, s14, s15
 800822c:	4b44      	ldr	r3, [pc, #272]	@ (8008340 <NMI_Handler+0x3c8>)
 800822e:	edc3 7a00 	vstr	s15, [r3]

		old_error_angular_rate_pitch = pid_pitch - gx;
 8008232:	4b35      	ldr	r3, [pc, #212]	@ (8008308 <NMI_Handler+0x390>)
 8008234:	ed93 7a00 	vldr	s14, [r3]
 8008238:	4b21      	ldr	r3, [pc, #132]	@ (80082c0 <NMI_Handler+0x348>)
 800823a:	edd3 7a00 	vldr	s15, [r3]
 800823e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008242:	4b40      	ldr	r3, [pc, #256]	@ (8008344 <NMI_Handler+0x3cc>)
 8008244:	edc3 7a00 	vstr	s15, [r3]
		old_error_angular_rate_rool = pid_rool - gy;
 8008248:	4b31      	ldr	r3, [pc, #196]	@ (8008310 <NMI_Handler+0x398>)
 800824a:	ed93 7a00 	vldr	s14, [r3]
 800824e:	4b1b      	ldr	r3, [pc, #108]	@ (80082bc <NMI_Handler+0x344>)
 8008250:	edd3 7a00 	vldr	s15, [r3]
 8008254:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008258:	4b3b      	ldr	r3, [pc, #236]	@ (8008348 <NMI_Handler+0x3d0>)
 800825a:	edc3 7a00 	vstr	s15, [r3]
		old_error_angular_rate_yaw = wanted_yaw - gz;
 800825e:	4b0b      	ldr	r3, [pc, #44]	@ (800828c <NMI_Handler+0x314>)
 8008260:	ed93 7a00 	vldr	s14, [r3]
 8008264:	4b14      	ldr	r3, [pc, #80]	@ (80082b8 <NMI_Handler+0x340>)
 8008266:	edd3 7a00 	vldr	s15, [r3]
 800826a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800826e:	4b37      	ldr	r3, [pc, #220]	@ (800834c <NMI_Handler+0x3d4>)
 8008270:	edc3 7a00 	vstr	s15, [r3]
 8008274:	e06c      	b.n	8008350 <NMI_Handler+0x3d8>
 8008276:	bf00      	nop
 8008278:	58021000 	.word	0x58021000
 800827c:	58020400 	.word	0x58020400
 8008280:	24001f10 	.word	0x24001f10
 8008284:	0000404c 	.word	0x0000404c
 8008288:	00004048 	.word	0x00004048
 800828c:	00004050 	.word	0x00004050
 8008290:	0801e8c8 	.word	0x0801e8c8
 8008294:	0000403c 	.word	0x0000403c
 8008298:	00000030 	.word	0x00000030
 800829c:	00000034 	.word	0x00000034
 80082a0:	00000038 	.word	0x00000038
 80082a4:	0000003c 	.word	0x0000003c
 80082a8:	00000040 	.word	0x00000040
 80082ac:	00000044 	.word	0x00000044
 80082b0:	0801e8bc 	.word	0x0801e8bc
 80082b4:	0801e8c0 	.word	0x0801e8c0
 80082b8:	00000014 	.word	0x00000014
 80082bc:	00000010 	.word	0x00000010
 80082c0:	0000000c 	.word	0x0000000c
 80082c4:	00000008 	.word	0x00000008
 80082c8:	00000004 	.word	0x00000004
 80082cc:	00000000 	.word	0x00000000
 80082d0:	0000001c 	.word	0x0000001c
 80082d4:	00000018 	.word	0x00000018
 80082d8:	00000048 	.word	0x00000048
 80082dc:	00000064 	.word	0x00000064
 80082e0:	00004058 	.word	0x00004058
 80082e4:	0000405c 	.word	0x0000405c
 80082e8:	00004060 	.word	0x00004060
 80082ec:	00004034 	.word	0x00004034
 80082f0:	00004030 	.word	0x00004030
 80082f4:	00004038 	.word	0x00004038
 80082f8:	0000407c 	.word	0x0000407c
 80082fc:	00004080 	.word	0x00004080
 8008300:	00004084 	.word	0x00004084
 8008304:	00004088 	.word	0x00004088
 8008308:	00004094 	.word	0x00004094
 800830c:	0000408c 	.word	0x0000408c
 8008310:	0000409c 	.word	0x0000409c
 8008314:	00004090 	.word	0x00004090
 8008318:	00004098 	.word	0x00004098
 800831c:	000040d0 	.word	0x000040d0
 8008320:	000040e4 	.word	0x000040e4
 8008324:	00004130 	.word	0x00004130
 8008328:	000040a0 	.word	0x000040a0
 800832c:	00004144 	.word	0x00004144
 8008330:	000040a8 	.word	0x000040a8
 8008334:	00004158 	.word	0x00004158
 8008338:	000040a4 	.word	0x000040a4
 800833c:	00004064 	.word	0x00004064
 8008340:	00004068 	.word	0x00004068
 8008344:	00004070 	.word	0x00004070
 8008348:	00004074 	.word	0x00004074
 800834c:	00004078 	.word	0x00004078


		MYDRON.ROOL = pid_angular_rate_rool;
 8008350:	4b99      	ldr	r3, [pc, #612]	@ (80085b8 <NMI_Handler+0x640>)
 8008352:	edd3 7a00 	vldr	s15, [r3]
 8008356:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800835a:	ee17 3a90 	vmov	r3, s15
 800835e:	b21a      	sxth	r2, r3
 8008360:	4b96      	ldr	r3, [pc, #600]	@ (80085bc <NMI_Handler+0x644>)
 8008362:	80da      	strh	r2, [r3, #6]
		MYDRON.PITCH = pid_angular_rate_pitch;
 8008364:	4b96      	ldr	r3, [pc, #600]	@ (80085c0 <NMI_Handler+0x648>)
 8008366:	edd3 7a00 	vldr	s15, [r3]
 800836a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800836e:	ee17 3a90 	vmov	r3, s15
 8008372:	b21a      	sxth	r2, r3
 8008374:	4b91      	ldr	r3, [pc, #580]	@ (80085bc <NMI_Handler+0x644>)
 8008376:	809a      	strh	r2, [r3, #4]
		MYDRON.YAW = pid_angular_rate_yaw;
 8008378:	4b92      	ldr	r3, [pc, #584]	@ (80085c4 <NMI_Handler+0x64c>)
 800837a:	edd3 7a00 	vldr	s15, [r3]
 800837e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008382:	ee17 3a90 	vmov	r3, s15
 8008386:	b21a      	sxth	r2, r3
 8008388:	4b8c      	ldr	r3, [pc, #560]	@ (80085bc <NMI_Handler+0x644>)
 800838a:	811a      	strh	r2, [r3, #8]



		Thrust_filter(1);
 800838c:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 8008390:	f7fb f9e6 	bl	8003760 <Thrust_filter>
		if(MYDRON.THRUST > thrust_limit){
 8008394:	4b89      	ldr	r3, [pc, #548]	@ (80085bc <NMI_Handler+0x644>)
 8008396:	885b      	ldrh	r3, [r3, #2]
 8008398:	461a      	mov	r2, r3
 800839a:	4b8b      	ldr	r3, [pc, #556]	@ (80085c8 <NMI_Handler+0x650>)
 800839c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80083a0:	429a      	cmp	r2, r3
 80083a2:	dd05      	ble.n	80083b0 <NMI_Handler+0x438>
			MYDRON.THRUST = thrust_limit;
 80083a4:	4b88      	ldr	r3, [pc, #544]	@ (80085c8 <NMI_Handler+0x650>)
 80083a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80083aa:	b29a      	uxth	r2, r3
 80083ac:	4b83      	ldr	r3, [pc, #524]	@ (80085bc <NMI_Handler+0x644>)
 80083ae:	805a      	strh	r2, [r3, #2]
		}


		SPEED1 = (MYDRON.THRUST*0.7)+ MYDRON.ROOL - MYDRON.PITCH + MYDRON.YAW + min_speed + 500;//trust 7000 max
 80083b0:	4b82      	ldr	r3, [pc, #520]	@ (80085bc <NMI_Handler+0x644>)
 80083b2:	885b      	ldrh	r3, [r3, #2]
 80083b4:	ee07 3a90 	vmov	s15, r3
 80083b8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80083bc:	ed9f 6b78 	vldr	d6, [pc, #480]	@ 80085a0 <NMI_Handler+0x628>
 80083c0:	ee27 6b06 	vmul.f64	d6, d7, d6
 80083c4:	4b7d      	ldr	r3, [pc, #500]	@ (80085bc <NMI_Handler+0x644>)
 80083c6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80083ca:	ee07 3a90 	vmov	s15, r3
 80083ce:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80083d2:	ee36 6b07 	vadd.f64	d6, d6, d7
 80083d6:	4b79      	ldr	r3, [pc, #484]	@ (80085bc <NMI_Handler+0x644>)
 80083d8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80083dc:	ee07 3a90 	vmov	s15, r3
 80083e0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80083e4:	ee36 6b47 	vsub.f64	d6, d6, d7
 80083e8:	4b74      	ldr	r3, [pc, #464]	@ (80085bc <NMI_Handler+0x644>)
 80083ea:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80083ee:	ee07 3a90 	vmov	s15, r3
 80083f2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80083f6:	ee36 7b07 	vadd.f64	d7, d6, d7
 80083fa:	ed9f 6b6b 	vldr	d6, [pc, #428]	@ 80085a8 <NMI_Handler+0x630>
 80083fe:	ee37 7b06 	vadd.f64	d7, d7, d6
 8008402:	ed9f 6b6b 	vldr	d6, [pc, #428]	@ 80085b0 <NMI_Handler+0x638>
 8008406:	ee37 7b06 	vadd.f64	d7, d7, d6
 800840a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800840e:	ee17 3a90 	vmov	r3, s15
 8008412:	b29a      	uxth	r2, r3
 8008414:	4b6d      	ldr	r3, [pc, #436]	@ (80085cc <NMI_Handler+0x654>)
 8008416:	801a      	strh	r2, [r3, #0]
		SPEED2 = (MYDRON.THRUST*0.7)- MYDRON.ROOL - MYDRON.PITCH - MYDRON.YAW + min_speed + 500;//
 8008418:	4b68      	ldr	r3, [pc, #416]	@ (80085bc <NMI_Handler+0x644>)
 800841a:	885b      	ldrh	r3, [r3, #2]
 800841c:	ee07 3a90 	vmov	s15, r3
 8008420:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8008424:	ed9f 6b5e 	vldr	d6, [pc, #376]	@ 80085a0 <NMI_Handler+0x628>
 8008428:	ee27 6b06 	vmul.f64	d6, d7, d6
 800842c:	4b63      	ldr	r3, [pc, #396]	@ (80085bc <NMI_Handler+0x644>)
 800842e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8008432:	ee07 3a90 	vmov	s15, r3
 8008436:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800843a:	ee36 6b47 	vsub.f64	d6, d6, d7
 800843e:	4b5f      	ldr	r3, [pc, #380]	@ (80085bc <NMI_Handler+0x644>)
 8008440:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8008444:	ee07 3a90 	vmov	s15, r3
 8008448:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800844c:	ee36 6b47 	vsub.f64	d6, d6, d7
 8008450:	4b5a      	ldr	r3, [pc, #360]	@ (80085bc <NMI_Handler+0x644>)
 8008452:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008456:	ee07 3a90 	vmov	s15, r3
 800845a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800845e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8008462:	ed9f 6b51 	vldr	d6, [pc, #324]	@ 80085a8 <NMI_Handler+0x630>
 8008466:	ee37 7b06 	vadd.f64	d7, d7, d6
 800846a:	ed9f 6b51 	vldr	d6, [pc, #324]	@ 80085b0 <NMI_Handler+0x638>
 800846e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8008472:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8008476:	ee17 3a90 	vmov	r3, s15
 800847a:	b29a      	uxth	r2, r3
 800847c:	4b54      	ldr	r3, [pc, #336]	@ (80085d0 <NMI_Handler+0x658>)
 800847e:	801a      	strh	r2, [r3, #0]
		SPEED3 = (MYDRON.THRUST*0.7)+ MYDRON.ROOL + MYDRON.PITCH - MYDRON.YAW + min_speed + 500;//
 8008480:	4b4e      	ldr	r3, [pc, #312]	@ (80085bc <NMI_Handler+0x644>)
 8008482:	885b      	ldrh	r3, [r3, #2]
 8008484:	ee07 3a90 	vmov	s15, r3
 8008488:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800848c:	ed9f 6b44 	vldr	d6, [pc, #272]	@ 80085a0 <NMI_Handler+0x628>
 8008490:	ee27 6b06 	vmul.f64	d6, d7, d6
 8008494:	4b49      	ldr	r3, [pc, #292]	@ (80085bc <NMI_Handler+0x644>)
 8008496:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800849a:	ee07 3a90 	vmov	s15, r3
 800849e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80084a2:	ee36 6b07 	vadd.f64	d6, d6, d7
 80084a6:	4b45      	ldr	r3, [pc, #276]	@ (80085bc <NMI_Handler+0x644>)
 80084a8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80084ac:	ee07 3a90 	vmov	s15, r3
 80084b0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80084b4:	ee36 6b07 	vadd.f64	d6, d6, d7
 80084b8:	4b40      	ldr	r3, [pc, #256]	@ (80085bc <NMI_Handler+0x644>)
 80084ba:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80084be:	ee07 3a90 	vmov	s15, r3
 80084c2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80084c6:	ee36 7b47 	vsub.f64	d7, d6, d7
 80084ca:	ed9f 6b37 	vldr	d6, [pc, #220]	@ 80085a8 <NMI_Handler+0x630>
 80084ce:	ee37 7b06 	vadd.f64	d7, d7, d6
 80084d2:	ed9f 6b37 	vldr	d6, [pc, #220]	@ 80085b0 <NMI_Handler+0x638>
 80084d6:	ee37 7b06 	vadd.f64	d7, d7, d6
 80084da:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80084de:	ee17 3a90 	vmov	r3, s15
 80084e2:	b29a      	uxth	r2, r3
 80084e4:	4b3b      	ldr	r3, [pc, #236]	@ (80085d4 <NMI_Handler+0x65c>)
 80084e6:	801a      	strh	r2, [r3, #0]
		SPEED4 = (MYDRON.THRUST*0.7)- MYDRON.ROOL + MYDRON.PITCH + MYDRON.YAW + min_speed + 500;//
 80084e8:	4b34      	ldr	r3, [pc, #208]	@ (80085bc <NMI_Handler+0x644>)
 80084ea:	885b      	ldrh	r3, [r3, #2]
 80084ec:	ee07 3a90 	vmov	s15, r3
 80084f0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80084f4:	ed9f 6b2a 	vldr	d6, [pc, #168]	@ 80085a0 <NMI_Handler+0x628>
 80084f8:	ee27 6b06 	vmul.f64	d6, d7, d6
 80084fc:	4b2f      	ldr	r3, [pc, #188]	@ (80085bc <NMI_Handler+0x644>)
 80084fe:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8008502:	ee07 3a90 	vmov	s15, r3
 8008506:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800850a:	ee36 6b47 	vsub.f64	d6, d6, d7
 800850e:	4b2b      	ldr	r3, [pc, #172]	@ (80085bc <NMI_Handler+0x644>)
 8008510:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8008514:	ee07 3a90 	vmov	s15, r3
 8008518:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800851c:	ee36 6b07 	vadd.f64	d6, d6, d7
 8008520:	4b26      	ldr	r3, [pc, #152]	@ (80085bc <NMI_Handler+0x644>)
 8008522:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008526:	ee07 3a90 	vmov	s15, r3
 800852a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800852e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8008532:	ed9f 6b1d 	vldr	d6, [pc, #116]	@ 80085a8 <NMI_Handler+0x630>
 8008536:	ee37 7b06 	vadd.f64	d7, d7, d6
 800853a:	ed9f 6b1d 	vldr	d6, [pc, #116]	@ 80085b0 <NMI_Handler+0x638>
 800853e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8008542:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8008546:	ee17 3a90 	vmov	r3, s15
 800854a:	b29a      	uxth	r2, r3
 800854c:	4b22      	ldr	r3, [pc, #136]	@ (80085d8 <NMI_Handler+0x660>)
 800854e:	801a      	strh	r2, [r3, #0]

		ESC_1_SPEED(SPEED1);
 8008550:	4b1e      	ldr	r3, [pc, #120]	@ (80085cc <NMI_Handler+0x654>)
 8008552:	881b      	ldrh	r3, [r3, #0]
 8008554:	4618      	mov	r0, r3
 8008556:	f7f8 fc6d 	bl	8000e34 <ESC_1_SPEED>
		ESC_2_SPEED(SPEED2);
 800855a:	4b1d      	ldr	r3, [pc, #116]	@ (80085d0 <NMI_Handler+0x658>)
 800855c:	881b      	ldrh	r3, [r3, #0]
 800855e:	4618      	mov	r0, r3
 8008560:	f7f8 fc8a 	bl	8000e78 <ESC_2_SPEED>
		ESC_3_SPEED(SPEED3);
 8008564:	4b1b      	ldr	r3, [pc, #108]	@ (80085d4 <NMI_Handler+0x65c>)
 8008566:	881b      	ldrh	r3, [r3, #0]
 8008568:	4618      	mov	r0, r3
 800856a:	f7f8 fca7 	bl	8000ebc <ESC_3_SPEED>
		ESC_4_SPEED(SPEED4);
 800856e:	4b1a      	ldr	r3, [pc, #104]	@ (80085d8 <NMI_Handler+0x660>)
 8008570:	881b      	ldrh	r3, [r3, #0]
 8008572:	4618      	mov	r0, r3
 8008574:	f7f8 fcc4 	bl	8000f00 <ESC_4_SPEED>


		OLD_SPEED1 = SPEED1;
 8008578:	4b14      	ldr	r3, [pc, #80]	@ (80085cc <NMI_Handler+0x654>)
 800857a:	881a      	ldrh	r2, [r3, #0]
 800857c:	4b17      	ldr	r3, [pc, #92]	@ (80085dc <NMI_Handler+0x664>)
 800857e:	801a      	strh	r2, [r3, #0]
		OLD_SPEED2 = SPEED2;
 8008580:	4b13      	ldr	r3, [pc, #76]	@ (80085d0 <NMI_Handler+0x658>)
 8008582:	881a      	ldrh	r2, [r3, #0]
 8008584:	4b16      	ldr	r3, [pc, #88]	@ (80085e0 <NMI_Handler+0x668>)
 8008586:	801a      	strh	r2, [r3, #0]
		OLD_SPEED3 = SPEED3;
 8008588:	4b12      	ldr	r3, [pc, #72]	@ (80085d4 <NMI_Handler+0x65c>)
 800858a:	881a      	ldrh	r2, [r3, #0]
 800858c:	4b15      	ldr	r3, [pc, #84]	@ (80085e4 <NMI_Handler+0x66c>)
 800858e:	801a      	strh	r2, [r3, #0]
		OLD_SPEED4 = SPEED4;
 8008590:	4b11      	ldr	r3, [pc, #68]	@ (80085d8 <NMI_Handler+0x660>)
 8008592:	881a      	ldrh	r2, [r3, #0]
 8008594:	4b14      	ldr	r3, [pc, #80]	@ (80085e8 <NMI_Handler+0x670>)
 8008596:	801a      	strh	r2, [r3, #0]
	   	HAL_Delay(1);
 8008598:	e517      	b.n	8007fca <NMI_Handler+0x52>
 800859a:	bf00      	nop
 800859c:	f3af 8000 	nop.w
 80085a0:	66666666 	.word	0x66666666
 80085a4:	3fe66666 	.word	0x3fe66666
 80085a8:	00000000 	.word	0x00000000
 80085ac:	40c48200 	.word	0x40c48200
 80085b0:	00000000 	.word	0x00000000
 80085b4:	407f4000 	.word	0x407f4000
 80085b8:	000040a8 	.word	0x000040a8
 80085bc:	00000158 	.word	0x00000158
 80085c0:	000040a0 	.word	0x000040a0
 80085c4:	000040a4 	.word	0x000040a4
 80085c8:	0000403e 	.word	0x0000403e
 80085cc:	0000416c 	.word	0x0000416c
 80085d0:	0000416e 	.word	0x0000416e
 80085d4:	00004170 	.word	0x00004170
 80085d8:	00004172 	.word	0x00004172
 80085dc:	00004174 	.word	0x00004174
 80085e0:	00004176 	.word	0x00004176
 80085e4:	00004178 	.word	0x00004178
 80085e8:	0000417a 	.word	0x0000417a

080085ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80085ec:	b580      	push	{r7, lr}
 80085ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

	LED_G_1;
 80085f0:	2201      	movs	r2, #1
 80085f2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80085f6:	4812      	ldr	r0, [pc, #72]	@ (8008640 <HardFault_Handler+0x54>)
 80085f8:	f005 ff8a 	bl	800e510 <HAL_GPIO_WritePin>
	LED_Y_0;
 80085fc:	2200      	movs	r2, #0
 80085fe:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8008602:	4810      	ldr	r0, [pc, #64]	@ (8008644 <HardFault_Handler+0x58>)
 8008604:	f005 ff84 	bl	800e510 <HAL_GPIO_WritePin>
	LED_R_1;
 8008608:	2201      	movs	r2, #1
 800860a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800860e:	480d      	ldr	r0, [pc, #52]	@ (8008644 <HardFault_Handler+0x58>)
 8008610:	f005 ff7e 	bl	800e510 <HAL_GPIO_WritePin>
	//todo create crash log
	f_close(&fil);
 8008614:	480c      	ldr	r0, [pc, #48]	@ (8008648 <HardFault_Handler+0x5c>)
 8008616:	f015 f9fd 	bl	801da14 <f_close>
	wanted_rool = 0;
 800861a:	4b0c      	ldr	r3, [pc, #48]	@ (800864c <HardFault_Handler+0x60>)
 800861c:	f04f 0200 	mov.w	r2, #0
 8008620:	601a      	str	r2, [r3, #0]
	wanted_pitch = 0;
 8008622:	4b0b      	ldr	r3, [pc, #44]	@ (8008650 <HardFault_Handler+0x64>)
 8008624:	f04f 0200 	mov.w	r2, #0
 8008628:	601a      	str	r2, [r3, #0]
	wanted_yaw = 0;
 800862a:	4b0a      	ldr	r3, [pc, #40]	@ (8008654 <HardFault_Handler+0x68>)
 800862c:	f04f 0200 	mov.w	r2, #0
 8008630:	601a      	str	r2, [r3, #0]
	wanted_thrust = DRON_SLOWFALING;
 8008632:	4b09      	ldr	r3, [pc, #36]	@ (8008658 <HardFault_Handler+0x6c>)
 8008634:	881b      	ldrh	r3, [r3, #0]
 8008636:	b21a      	sxth	r2, r3
 8008638:	4b08      	ldr	r3, [pc, #32]	@ (800865c <HardFault_Handler+0x70>)
 800863a:	801a      	strh	r2, [r3, #0]
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800863c:	bf00      	nop
 800863e:	e7fd      	b.n	800863c <HardFault_Handler+0x50>
 8008640:	58021000 	.word	0x58021000
 8008644:	58020400 	.word	0x58020400
 8008648:	24001f10 	.word	0x24001f10
 800864c:	0000404c 	.word	0x0000404c
 8008650:	00004048 	.word	0x00004048
 8008654:	00004050 	.word	0x00004050
 8008658:	0801e8c8 	.word	0x0801e8c8
 800865c:	0000403c 	.word	0x0000403c

08008660 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008660:	b580      	push	{r7, lr}
 8008662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

	LED_G_0;
 8008664:	2200      	movs	r2, #0
 8008666:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800866a:	4812      	ldr	r0, [pc, #72]	@ (80086b4 <MemManage_Handler+0x54>)
 800866c:	f005 ff50 	bl	800e510 <HAL_GPIO_WritePin>
	LED_Y_0;
 8008670:	2200      	movs	r2, #0
 8008672:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8008676:	4810      	ldr	r0, [pc, #64]	@ (80086b8 <MemManage_Handler+0x58>)
 8008678:	f005 ff4a 	bl	800e510 <HAL_GPIO_WritePin>
	LED_R_1;
 800867c:	2201      	movs	r2, #1
 800867e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8008682:	480d      	ldr	r0, [pc, #52]	@ (80086b8 <MemManage_Handler+0x58>)
 8008684:	f005 ff44 	bl	800e510 <HAL_GPIO_WritePin>
	//todo create crash log
	f_close(&fil);
 8008688:	480c      	ldr	r0, [pc, #48]	@ (80086bc <MemManage_Handler+0x5c>)
 800868a:	f015 f9c3 	bl	801da14 <f_close>
	wanted_rool = 0;
 800868e:	4b0c      	ldr	r3, [pc, #48]	@ (80086c0 <MemManage_Handler+0x60>)
 8008690:	f04f 0200 	mov.w	r2, #0
 8008694:	601a      	str	r2, [r3, #0]
	wanted_pitch = 0;
 8008696:	4b0b      	ldr	r3, [pc, #44]	@ (80086c4 <MemManage_Handler+0x64>)
 8008698:	f04f 0200 	mov.w	r2, #0
 800869c:	601a      	str	r2, [r3, #0]
	wanted_yaw = 0;
 800869e:	4b0a      	ldr	r3, [pc, #40]	@ (80086c8 <MemManage_Handler+0x68>)
 80086a0:	f04f 0200 	mov.w	r2, #0
 80086a4:	601a      	str	r2, [r3, #0]
	wanted_thrust = DRON_SLOWFALING;
 80086a6:	4b09      	ldr	r3, [pc, #36]	@ (80086cc <MemManage_Handler+0x6c>)
 80086a8:	881b      	ldrh	r3, [r3, #0]
 80086aa:	b21a      	sxth	r2, r3
 80086ac:	4b08      	ldr	r3, [pc, #32]	@ (80086d0 <MemManage_Handler+0x70>)
 80086ae:	801a      	strh	r2, [r3, #0]
  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80086b0:	bf00      	nop
 80086b2:	e7fd      	b.n	80086b0 <MemManage_Handler+0x50>
 80086b4:	58021000 	.word	0x58021000
 80086b8:	58020400 	.word	0x58020400
 80086bc:	24001f10 	.word	0x24001f10
 80086c0:	0000404c 	.word	0x0000404c
 80086c4:	00004048 	.word	0x00004048
 80086c8:	00004050 	.word	0x00004050
 80086cc:	0801e8c8 	.word	0x0801e8c8
 80086d0:	0000403c 	.word	0x0000403c

080086d4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80086d4:	b580      	push	{r7, lr}
 80086d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

	LED_G_1;
 80086d8:	2201      	movs	r2, #1
 80086da:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80086de:	4812      	ldr	r0, [pc, #72]	@ (8008728 <BusFault_Handler+0x54>)
 80086e0:	f005 ff16 	bl	800e510 <HAL_GPIO_WritePin>
	LED_Y_1;
 80086e4:	2201      	movs	r2, #1
 80086e6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80086ea:	4810      	ldr	r0, [pc, #64]	@ (800872c <BusFault_Handler+0x58>)
 80086ec:	f005 ff10 	bl	800e510 <HAL_GPIO_WritePin>
	LED_R_1;
 80086f0:	2201      	movs	r2, #1
 80086f2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80086f6:	480d      	ldr	r0, [pc, #52]	@ (800872c <BusFault_Handler+0x58>)
 80086f8:	f005 ff0a 	bl	800e510 <HAL_GPIO_WritePin>
	//todo create crash log
	f_close(&fil);
 80086fc:	480c      	ldr	r0, [pc, #48]	@ (8008730 <BusFault_Handler+0x5c>)
 80086fe:	f015 f989 	bl	801da14 <f_close>
	wanted_rool = 0;
 8008702:	4b0c      	ldr	r3, [pc, #48]	@ (8008734 <BusFault_Handler+0x60>)
 8008704:	f04f 0200 	mov.w	r2, #0
 8008708:	601a      	str	r2, [r3, #0]
	wanted_pitch = 0;
 800870a:	4b0b      	ldr	r3, [pc, #44]	@ (8008738 <BusFault_Handler+0x64>)
 800870c:	f04f 0200 	mov.w	r2, #0
 8008710:	601a      	str	r2, [r3, #0]
	wanted_yaw = 0;
 8008712:	4b0a      	ldr	r3, [pc, #40]	@ (800873c <BusFault_Handler+0x68>)
 8008714:	f04f 0200 	mov.w	r2, #0
 8008718:	601a      	str	r2, [r3, #0]
	wanted_thrust = DRON_SLOWFALING;
 800871a:	4b09      	ldr	r3, [pc, #36]	@ (8008740 <BusFault_Handler+0x6c>)
 800871c:	881b      	ldrh	r3, [r3, #0]
 800871e:	b21a      	sxth	r2, r3
 8008720:	4b08      	ldr	r3, [pc, #32]	@ (8008744 <BusFault_Handler+0x70>)
 8008722:	801a      	strh	r2, [r3, #0]
  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008724:	bf00      	nop
 8008726:	e7fd      	b.n	8008724 <BusFault_Handler+0x50>
 8008728:	58021000 	.word	0x58021000
 800872c:	58020400 	.word	0x58020400
 8008730:	24001f10 	.word	0x24001f10
 8008734:	0000404c 	.word	0x0000404c
 8008738:	00004048 	.word	0x00004048
 800873c:	00004050 	.word	0x00004050
 8008740:	0801e8c8 	.word	0x0801e8c8
 8008744:	0000403c 	.word	0x0000403c

08008748 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008748:	b580      	push	{r7, lr}
 800874a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

	LED_G_0;
 800874c:	2200      	movs	r2, #0
 800874e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8008752:	4812      	ldr	r0, [pc, #72]	@ (800879c <UsageFault_Handler+0x54>)
 8008754:	f005 fedc 	bl	800e510 <HAL_GPIO_WritePin>
	LED_Y_1;
 8008758:	2201      	movs	r2, #1
 800875a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800875e:	4810      	ldr	r0, [pc, #64]	@ (80087a0 <UsageFault_Handler+0x58>)
 8008760:	f005 fed6 	bl	800e510 <HAL_GPIO_WritePin>
	LED_R_1;
 8008764:	2201      	movs	r2, #1
 8008766:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800876a:	480d      	ldr	r0, [pc, #52]	@ (80087a0 <UsageFault_Handler+0x58>)
 800876c:	f005 fed0 	bl	800e510 <HAL_GPIO_WritePin>
	//todo create crash log
	f_close(&fil);
 8008770:	480c      	ldr	r0, [pc, #48]	@ (80087a4 <UsageFault_Handler+0x5c>)
 8008772:	f015 f94f 	bl	801da14 <f_close>
	wanted_rool = 0;
 8008776:	4b0c      	ldr	r3, [pc, #48]	@ (80087a8 <UsageFault_Handler+0x60>)
 8008778:	f04f 0200 	mov.w	r2, #0
 800877c:	601a      	str	r2, [r3, #0]
	wanted_pitch = 0;
 800877e:	4b0b      	ldr	r3, [pc, #44]	@ (80087ac <UsageFault_Handler+0x64>)
 8008780:	f04f 0200 	mov.w	r2, #0
 8008784:	601a      	str	r2, [r3, #0]
	wanted_yaw = 0;
 8008786:	4b0a      	ldr	r3, [pc, #40]	@ (80087b0 <UsageFault_Handler+0x68>)
 8008788:	f04f 0200 	mov.w	r2, #0
 800878c:	601a      	str	r2, [r3, #0]
	wanted_thrust = DRON_SLOWFALING;
 800878e:	4b09      	ldr	r3, [pc, #36]	@ (80087b4 <UsageFault_Handler+0x6c>)
 8008790:	881b      	ldrh	r3, [r3, #0]
 8008792:	b21a      	sxth	r2, r3
 8008794:	4b08      	ldr	r3, [pc, #32]	@ (80087b8 <UsageFault_Handler+0x70>)
 8008796:	801a      	strh	r2, [r3, #0]
  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008798:	bf00      	nop
 800879a:	e7fd      	b.n	8008798 <UsageFault_Handler+0x50>
 800879c:	58021000 	.word	0x58021000
 80087a0:	58020400 	.word	0x58020400
 80087a4:	24001f10 	.word	0x24001f10
 80087a8:	0000404c 	.word	0x0000404c
 80087ac:	00004048 	.word	0x00004048
 80087b0:	00004050 	.word	0x00004050
 80087b4:	0801e8c8 	.word	0x0801e8c8
 80087b8:	0000403c 	.word	0x0000403c

080087bc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80087bc:	b480      	push	{r7}
 80087be:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80087c0:	bf00      	nop
 80087c2:	46bd      	mov	sp, r7
 80087c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c8:	4770      	bx	lr

080087ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80087ca:	b480      	push	{r7}
 80087cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80087ce:	bf00      	nop
 80087d0:	46bd      	mov	sp, r7
 80087d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d6:	4770      	bx	lr

080087d8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80087d8:	b480      	push	{r7}
 80087da:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80087dc:	bf00      	nop
 80087de:	46bd      	mov	sp, r7
 80087e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e4:	4770      	bx	lr
	...

080087e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80087e8:	b580      	push	{r7, lr}
 80087ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	  FatFsCnt++;
 80087ec:	4b08      	ldr	r3, [pc, #32]	@ (8008810 <SysTick_Handler+0x28>)
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	3301      	adds	r3, #1
 80087f2:	4a07      	ldr	r2, [pc, #28]	@ (8008810 <SysTick_Handler+0x28>)
 80087f4:	6013      	str	r3, [r2, #0]
	  if(FatFsCnt >= 10)
 80087f6:	4b06      	ldr	r3, [pc, #24]	@ (8008810 <SysTick_Handler+0x28>)
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	2b09      	cmp	r3, #9
 80087fc:	d904      	bls.n	8008808 <SysTick_Handler+0x20>
	  {
	    FatFsCnt = 0;
 80087fe:	4b04      	ldr	r3, [pc, #16]	@ (8008810 <SysTick_Handler+0x28>)
 8008800:	2200      	movs	r2, #0
 8008802:	601a      	str	r2, [r3, #0]
	    SDTimer_Handler();
 8008804:	f7ff fb98 	bl	8007f38 <SDTimer_Handler>
	  }
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008808:	f000 fd04 	bl	8009214 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800880c:	bf00      	nop
 800880e:	bd80      	pop	{r7, pc}
 8008810:	24000374 	.word	0x24000374

08008814 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8008814:	b580      	push	{r7, lr}
 8008816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8008818:	4802      	ldr	r0, [pc, #8]	@ (8008824 <DMA1_Stream0_IRQHandler+0x10>)
 800881a:	f004 f98d 	bl	800cb38 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800881e:	bf00      	nop
 8008820:	bd80      	pop	{r7, pc}
 8008822:	bf00      	nop
 8008824:	240002fc 	.word	0x240002fc

08008828 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8008828:	b580      	push	{r7, lr}
 800882a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc2);
 800882c:	4802      	ldr	r0, [pc, #8]	@ (8008838 <ADC_IRQHandler+0x10>)
 800882e:	f001 fb05 	bl	8009e3c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8008832:	bf00      	nop
 8008834:	bd80      	pop	{r7, pc}
 8008836:	bf00      	nop
 8008838:	240000ac 	.word	0x240000ac

0800883c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800883c:	b580      	push	{r7, lr}
 800883e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8008840:	4802      	ldr	r0, [pc, #8]	@ (800884c <TIM2_IRQHandler+0x10>)
 8008842:	f00d ff24 	bl	801668e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8008846:	bf00      	nop
 8008848:	bd80      	pop	{r7, pc}
 800884a:	bf00      	nop
 800884c:	240003cc 	.word	0x240003cc

08008850 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8008850:	b580      	push	{r7, lr}
 8008852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8008854:	4802      	ldr	r0, [pc, #8]	@ (8008860 <SPI2_IRQHandler+0x10>)
 8008856:	f00d f893 	bl	8015980 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800885a:	bf00      	nop
 800885c:	bd80      	pop	{r7, pc}
 800885e:	bf00      	nop
 8008860:	240001ec 	.word	0x240001ec

08008864 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8008864:	b580      	push	{r7, lr}
 8008866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8008868:	4802      	ldr	r0, [pc, #8]	@ (8008874 <USART1_IRQHandler+0x10>)
 800886a:	f00f fb6d 	bl	8017f48 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800886e:	bf00      	nop
 8008870:	bd80      	pop	{r7, pc}
 8008872:	bf00      	nop
 8008874:	240004b0 	.word	0x240004b0

08008878 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8008878:	b580      	push	{r7, lr}
 800887a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(NRF24_IRQ_Pin);
 800887c:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8008880:	f005 fe5f 	bl	800e542 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8008884:	bf00      	nop
 8008886:	bd80      	pop	{r7, pc}

08008888 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8008888:	b580      	push	{r7, lr}
 800888a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 800888c:	4802      	ldr	r0, [pc, #8]	@ (8008898 <DMA2_Stream0_IRQHandler+0x10>)
 800888e:	f004 f953 	bl	800cb38 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8008892:	bf00      	nop
 8008894:	bd80      	pop	{r7, pc}
 8008896:	bf00      	nop
 8008898:	2400011c 	.word	0x2400011c

0800889c <I2C5_EV_IRQHandler>:

/**
  * @brief This function handles I2C5 event interrupt.
  */
void I2C5_EV_IRQHandler(void)
{
 800889c:	b580      	push	{r7, lr}
 800889e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C5_EV_IRQn 0 */

  /* USER CODE END I2C5_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c5);
 80088a0:	4802      	ldr	r0, [pc, #8]	@ (80088ac <I2C5_EV_IRQHandler+0x10>)
 80088a2:	f006 fa43 	bl	800ed2c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C5_EV_IRQn 1 */

  /* USER CODE END I2C5_EV_IRQn 1 */
}
 80088a6:	bf00      	nop
 80088a8:	bd80      	pop	{r7, pc}
 80088aa:	bf00      	nop
 80088ac:	24000198 	.word	0x24000198

080088b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80088b0:	b480      	push	{r7}
 80088b2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80088b4:	4b32      	ldr	r3, [pc, #200]	@ (8008980 <SystemInit+0xd0>)
 80088b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80088ba:	4a31      	ldr	r2, [pc, #196]	@ (8008980 <SystemInit+0xd0>)
 80088bc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80088c0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80088c4:	4b2f      	ldr	r3, [pc, #188]	@ (8008984 <SystemInit+0xd4>)
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	f003 030f 	and.w	r3, r3, #15
 80088cc:	2b06      	cmp	r3, #6
 80088ce:	d807      	bhi.n	80088e0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80088d0:	4b2c      	ldr	r3, [pc, #176]	@ (8008984 <SystemInit+0xd4>)
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	f023 030f 	bic.w	r3, r3, #15
 80088d8:	4a2a      	ldr	r2, [pc, #168]	@ (8008984 <SystemInit+0xd4>)
 80088da:	f043 0307 	orr.w	r3, r3, #7
 80088de:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80088e0:	4b29      	ldr	r3, [pc, #164]	@ (8008988 <SystemInit+0xd8>)
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	4a28      	ldr	r2, [pc, #160]	@ (8008988 <SystemInit+0xd8>)
 80088e6:	f043 0301 	orr.w	r3, r3, #1
 80088ea:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80088ec:	4b26      	ldr	r3, [pc, #152]	@ (8008988 <SystemInit+0xd8>)
 80088ee:	2200      	movs	r2, #0
 80088f0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80088f2:	4b25      	ldr	r3, [pc, #148]	@ (8008988 <SystemInit+0xd8>)
 80088f4:	681a      	ldr	r2, [r3, #0]
 80088f6:	4924      	ldr	r1, [pc, #144]	@ (8008988 <SystemInit+0xd8>)
 80088f8:	4b24      	ldr	r3, [pc, #144]	@ (800898c <SystemInit+0xdc>)
 80088fa:	4013      	ands	r3, r2
 80088fc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80088fe:	4b21      	ldr	r3, [pc, #132]	@ (8008984 <SystemInit+0xd4>)
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	f003 0308 	and.w	r3, r3, #8
 8008906:	2b00      	cmp	r3, #0
 8008908:	d007      	beq.n	800891a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800890a:	4b1e      	ldr	r3, [pc, #120]	@ (8008984 <SystemInit+0xd4>)
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	f023 030f 	bic.w	r3, r3, #15
 8008912:	4a1c      	ldr	r2, [pc, #112]	@ (8008984 <SystemInit+0xd4>)
 8008914:	f043 0307 	orr.w	r3, r3, #7
 8008918:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800891a:	4b1b      	ldr	r3, [pc, #108]	@ (8008988 <SystemInit+0xd8>)
 800891c:	2200      	movs	r2, #0
 800891e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8008920:	4b19      	ldr	r3, [pc, #100]	@ (8008988 <SystemInit+0xd8>)
 8008922:	2200      	movs	r2, #0
 8008924:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8008926:	4b18      	ldr	r3, [pc, #96]	@ (8008988 <SystemInit+0xd8>)
 8008928:	2200      	movs	r2, #0
 800892a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800892c:	4b16      	ldr	r3, [pc, #88]	@ (8008988 <SystemInit+0xd8>)
 800892e:	4a18      	ldr	r2, [pc, #96]	@ (8008990 <SystemInit+0xe0>)
 8008930:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8008932:	4b15      	ldr	r3, [pc, #84]	@ (8008988 <SystemInit+0xd8>)
 8008934:	4a17      	ldr	r2, [pc, #92]	@ (8008994 <SystemInit+0xe4>)
 8008936:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8008938:	4b13      	ldr	r3, [pc, #76]	@ (8008988 <SystemInit+0xd8>)
 800893a:	4a17      	ldr	r2, [pc, #92]	@ (8008998 <SystemInit+0xe8>)
 800893c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800893e:	4b12      	ldr	r3, [pc, #72]	@ (8008988 <SystemInit+0xd8>)
 8008940:	2200      	movs	r2, #0
 8008942:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8008944:	4b10      	ldr	r3, [pc, #64]	@ (8008988 <SystemInit+0xd8>)
 8008946:	4a14      	ldr	r2, [pc, #80]	@ (8008998 <SystemInit+0xe8>)
 8008948:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800894a:	4b0f      	ldr	r3, [pc, #60]	@ (8008988 <SystemInit+0xd8>)
 800894c:	2200      	movs	r2, #0
 800894e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8008950:	4b0d      	ldr	r3, [pc, #52]	@ (8008988 <SystemInit+0xd8>)
 8008952:	4a11      	ldr	r2, [pc, #68]	@ (8008998 <SystemInit+0xe8>)
 8008954:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8008956:	4b0c      	ldr	r3, [pc, #48]	@ (8008988 <SystemInit+0xd8>)
 8008958:	2200      	movs	r2, #0
 800895a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800895c:	4b0a      	ldr	r3, [pc, #40]	@ (8008988 <SystemInit+0xd8>)
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	4a09      	ldr	r2, [pc, #36]	@ (8008988 <SystemInit+0xd8>)
 8008962:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008966:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8008968:	4b07      	ldr	r3, [pc, #28]	@ (8008988 <SystemInit+0xd8>)
 800896a:	2200      	movs	r2, #0
 800896c:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800896e:	4b0b      	ldr	r3, [pc, #44]	@ (800899c <SystemInit+0xec>)
 8008970:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8008974:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8008976:	bf00      	nop
 8008978:	46bd      	mov	sp, r7
 800897a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800897e:	4770      	bx	lr
 8008980:	e000ed00 	.word	0xe000ed00
 8008984:	52002000 	.word	0x52002000
 8008988:	58024400 	.word	0x58024400
 800898c:	eaf6ed7f 	.word	0xeaf6ed7f
 8008990:	02020200 	.word	0x02020200
 8008994:	01ff0000 	.word	0x01ff0000
 8008998:	01010280 	.word	0x01010280
 800899c:	52004000 	.word	0x52004000

080089a0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80089a0:	b580      	push	{r7, lr}
 80089a2:	b098      	sub	sp, #96	@ 0x60
 80089a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80089a6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80089aa:	2200      	movs	r2, #0
 80089ac:	601a      	str	r2, [r3, #0]
 80089ae:	605a      	str	r2, [r3, #4]
 80089b0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80089b2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80089b6:	2200      	movs	r2, #0
 80089b8:	601a      	str	r2, [r3, #0]
 80089ba:	605a      	str	r2, [r3, #4]
 80089bc:	609a      	str	r2, [r3, #8]
 80089be:	60da      	str	r2, [r3, #12]
 80089c0:	611a      	str	r2, [r3, #16]
 80089c2:	615a      	str	r2, [r3, #20]
 80089c4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80089c6:	1d3b      	adds	r3, r7, #4
 80089c8:	2234      	movs	r2, #52	@ 0x34
 80089ca:	2100      	movs	r1, #0
 80089cc:	4618      	mov	r0, r3
 80089ce:	f015 fa19 	bl	801de04 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80089d2:	4b45      	ldr	r3, [pc, #276]	@ (8008ae8 <MX_TIM1_Init+0x148>)
 80089d4:	4a45      	ldr	r2, [pc, #276]	@ (8008aec <MX_TIM1_Init+0x14c>)
 80089d6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 999;
 80089d8:	4b43      	ldr	r3, [pc, #268]	@ (8008ae8 <MX_TIM1_Init+0x148>)
 80089da:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80089de:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80089e0:	4b41      	ldr	r3, [pc, #260]	@ (8008ae8 <MX_TIM1_Init+0x148>)
 80089e2:	2200      	movs	r2, #0
 80089e4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 256;
 80089e6:	4b40      	ldr	r3, [pc, #256]	@ (8008ae8 <MX_TIM1_Init+0x148>)
 80089e8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80089ec:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80089ee:	4b3e      	ldr	r3, [pc, #248]	@ (8008ae8 <MX_TIM1_Init+0x148>)
 80089f0:	2200      	movs	r2, #0
 80089f2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80089f4:	4b3c      	ldr	r3, [pc, #240]	@ (8008ae8 <MX_TIM1_Init+0x148>)
 80089f6:	2200      	movs	r2, #0
 80089f8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80089fa:	4b3b      	ldr	r3, [pc, #236]	@ (8008ae8 <MX_TIM1_Init+0x148>)
 80089fc:	2280      	movs	r2, #128	@ 0x80
 80089fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8008a00:	4839      	ldr	r0, [pc, #228]	@ (8008ae8 <MX_TIM1_Init+0x148>)
 8008a02:	f00d fc79 	bl	80162f8 <HAL_TIM_PWM_Init>
 8008a06:	4603      	mov	r3, r0
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d001      	beq.n	8008a10 <MX_TIM1_Init+0x70>
  {
    Error_Handler();
 8008a0c:	f7ff f8b8 	bl	8007b80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008a10:	2300      	movs	r3, #0
 8008a12:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8008a14:	2300      	movs	r3, #0
 8008a16:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008a18:	2300      	movs	r3, #0
 8008a1a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8008a1c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8008a20:	4619      	mov	r1, r3
 8008a22:	4831      	ldr	r0, [pc, #196]	@ (8008ae8 <MX_TIM1_Init+0x148>)
 8008a24:	f00e ff8c 	bl	8017940 <HAL_TIMEx_MasterConfigSynchronization>
 8008a28:	4603      	mov	r3, r0
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d001      	beq.n	8008a32 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8008a2e:	f7ff f8a7 	bl	8007b80 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8008a32:	2360      	movs	r3, #96	@ 0x60
 8008a34:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8008a36:	2300      	movs	r3, #0
 8008a38:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8008a3e:	2300      	movs	r3, #0
 8008a40:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8008a42:	2300      	movs	r3, #0
 8008a44:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8008a46:	2300      	movs	r3, #0
 8008a48:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8008a4a:	2300      	movs	r3, #0
 8008a4c:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8008a4e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8008a52:	2204      	movs	r2, #4
 8008a54:	4619      	mov	r1, r3
 8008a56:	4824      	ldr	r0, [pc, #144]	@ (8008ae8 <MX_TIM1_Init+0x148>)
 8008a58:	f00d ffbc 	bl	80169d4 <HAL_TIM_PWM_ConfigChannel>
 8008a5c:	4603      	mov	r3, r0
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d001      	beq.n	8008a66 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8008a62:	f7ff f88d 	bl	8007b80 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8008a66:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8008a6a:	2208      	movs	r2, #8
 8008a6c:	4619      	mov	r1, r3
 8008a6e:	481e      	ldr	r0, [pc, #120]	@ (8008ae8 <MX_TIM1_Init+0x148>)
 8008a70:	f00d ffb0 	bl	80169d4 <HAL_TIM_PWM_ConfigChannel>
 8008a74:	4603      	mov	r3, r0
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d001      	beq.n	8008a7e <MX_TIM1_Init+0xde>
  {
    Error_Handler();
 8008a7a:	f7ff f881 	bl	8007b80 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8008a7e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8008a82:	220c      	movs	r2, #12
 8008a84:	4619      	mov	r1, r3
 8008a86:	4818      	ldr	r0, [pc, #96]	@ (8008ae8 <MX_TIM1_Init+0x148>)
 8008a88:	f00d ffa4 	bl	80169d4 <HAL_TIM_PWM_ConfigChannel>
 8008a8c:	4603      	mov	r3, r0
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d001      	beq.n	8008a96 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8008a92:	f7ff f875 	bl	8007b80 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8008a96:	2300      	movs	r3, #0
 8008a98:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8008a9e:	2300      	movs	r3, #0
 8008aa0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8008aa2:	2300      	movs	r3, #0
 8008aa4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8008aa6:	2300      	movs	r3, #0
 8008aa8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8008aaa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8008aae:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8008ab0:	2300      	movs	r3, #0
 8008ab2:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8008ab4:	2300      	movs	r3, #0
 8008ab6:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8008ab8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008abc:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8008abe:	2300      	movs	r3, #0
 8008ac0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8008ac2:	2300      	movs	r3, #0
 8008ac4:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8008ac6:	1d3b      	adds	r3, r7, #4
 8008ac8:	4619      	mov	r1, r3
 8008aca:	4807      	ldr	r0, [pc, #28]	@ (8008ae8 <MX_TIM1_Init+0x148>)
 8008acc:	f00e ffd4 	bl	8017a78 <HAL_TIMEx_ConfigBreakDeadTime>
 8008ad0:	4603      	mov	r3, r0
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d001      	beq.n	8008ada <MX_TIM1_Init+0x13a>
  {
    Error_Handler();
 8008ad6:	f7ff f853 	bl	8007b80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8008ada:	4803      	ldr	r0, [pc, #12]	@ (8008ae8 <MX_TIM1_Init+0x148>)
 8008adc:	f000 f9da 	bl	8008e94 <HAL_TIM_MspPostInit>

}
 8008ae0:	bf00      	nop
 8008ae2:	3760      	adds	r7, #96	@ 0x60
 8008ae4:	46bd      	mov	sp, r7
 8008ae6:	bd80      	pop	{r7, pc}
 8008ae8:	24000380 	.word	0x24000380
 8008aec:	40010000 	.word	0x40010000

08008af0 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8008af0:	b580      	push	{r7, lr}
 8008af2:	b088      	sub	sp, #32
 8008af4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008af6:	f107 0314 	add.w	r3, r7, #20
 8008afa:	2200      	movs	r2, #0
 8008afc:	601a      	str	r2, [r3, #0]
 8008afe:	605a      	str	r2, [r3, #4]
 8008b00:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8008b02:	1d3b      	adds	r3, r7, #4
 8008b04:	2200      	movs	r2, #0
 8008b06:	601a      	str	r2, [r3, #0]
 8008b08:	605a      	str	r2, [r3, #4]
 8008b0a:	609a      	str	r2, [r3, #8]
 8008b0c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8008b0e:	4b21      	ldr	r3, [pc, #132]	@ (8008b94 <MX_TIM2_Init+0xa4>)
 8008b10:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8008b14:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 274;
 8008b16:	4b1f      	ldr	r3, [pc, #124]	@ (8008b94 <MX_TIM2_Init+0xa4>)
 8008b18:	f44f 7289 	mov.w	r2, #274	@ 0x112
 8008b1c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008b1e:	4b1d      	ldr	r3, [pc, #116]	@ (8008b94 <MX_TIM2_Init+0xa4>)
 8008b20:	2200      	movs	r2, #0
 8008b22:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8008b24:	4b1b      	ldr	r3, [pc, #108]	@ (8008b94 <MX_TIM2_Init+0xa4>)
 8008b26:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8008b2a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008b2c:	4b19      	ldr	r3, [pc, #100]	@ (8008b94 <MX_TIM2_Init+0xa4>)
 8008b2e:	2200      	movs	r2, #0
 8008b30:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8008b32:	4b18      	ldr	r3, [pc, #96]	@ (8008b94 <MX_TIM2_Init+0xa4>)
 8008b34:	2280      	movs	r2, #128	@ 0x80
 8008b36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8008b38:	4816      	ldr	r0, [pc, #88]	@ (8008b94 <MX_TIM2_Init+0xa4>)
 8008b3a:	f00d fd51 	bl	80165e0 <HAL_TIM_IC_Init>
 8008b3e:	4603      	mov	r3, r0
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d001      	beq.n	8008b48 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8008b44:	f7ff f81c 	bl	8007b80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008b48:	2300      	movs	r3, #0
 8008b4a:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008b4c:	2300      	movs	r3, #0
 8008b4e:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8008b50:	f107 0314 	add.w	r3, r7, #20
 8008b54:	4619      	mov	r1, r3
 8008b56:	480f      	ldr	r0, [pc, #60]	@ (8008b94 <MX_TIM2_Init+0xa4>)
 8008b58:	f00e fef2 	bl	8017940 <HAL_TIMEx_MasterConfigSynchronization>
 8008b5c:	4603      	mov	r3, r0
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d001      	beq.n	8008b66 <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 8008b62:	f7ff f80d 	bl	8007b80 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8008b66:	2300      	movs	r3, #0
 8008b68:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8008b6a:	2301      	movs	r3, #1
 8008b6c:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8008b6e:	2300      	movs	r3, #0
 8008b70:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8008b72:	2300      	movs	r3, #0
 8008b74:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8008b76:	1d3b      	adds	r3, r7, #4
 8008b78:	2200      	movs	r2, #0
 8008b7a:	4619      	mov	r1, r3
 8008b7c:	4805      	ldr	r0, [pc, #20]	@ (8008b94 <MX_TIM2_Init+0xa4>)
 8008b7e:	f00d fe8d 	bl	801689c <HAL_TIM_IC_ConfigChannel>
 8008b82:	4603      	mov	r3, r0
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d001      	beq.n	8008b8c <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8008b88:	f7fe fffa 	bl	8007b80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8008b8c:	bf00      	nop
 8008b8e:	3720      	adds	r7, #32
 8008b90:	46bd      	mov	sp, r7
 8008b92:	bd80      	pop	{r7, pc}
 8008b94:	240003cc 	.word	0x240003cc

08008b98 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8008b98:	b580      	push	{r7, lr}
 8008b9a:	b08a      	sub	sp, #40	@ 0x28
 8008b9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008b9e:	f107 031c 	add.w	r3, r7, #28
 8008ba2:	2200      	movs	r2, #0
 8008ba4:	601a      	str	r2, [r3, #0]
 8008ba6:	605a      	str	r2, [r3, #4]
 8008ba8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8008baa:	463b      	mov	r3, r7
 8008bac:	2200      	movs	r2, #0
 8008bae:	601a      	str	r2, [r3, #0]
 8008bb0:	605a      	str	r2, [r3, #4]
 8008bb2:	609a      	str	r2, [r3, #8]
 8008bb4:	60da      	str	r2, [r3, #12]
 8008bb6:	611a      	str	r2, [r3, #16]
 8008bb8:	615a      	str	r2, [r3, #20]
 8008bba:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8008bbc:	4b32      	ldr	r3, [pc, #200]	@ (8008c88 <MX_TIM3_Init+0xf0>)
 8008bbe:	4a33      	ldr	r2, [pc, #204]	@ (8008c8c <MX_TIM3_Init+0xf4>)
 8008bc0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 28;
 8008bc2:	4b31      	ldr	r3, [pc, #196]	@ (8008c88 <MX_TIM3_Init+0xf0>)
 8008bc4:	221c      	movs	r2, #28
 8008bc6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008bc8:	4b2f      	ldr	r3, [pc, #188]	@ (8008c88 <MX_TIM3_Init+0xf0>)
 8008bca:	2200      	movs	r2, #0
 8008bcc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19999;
 8008bce:	4b2e      	ldr	r3, [pc, #184]	@ (8008c88 <MX_TIM3_Init+0xf0>)
 8008bd0:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8008bd4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008bd6:	4b2c      	ldr	r3, [pc, #176]	@ (8008c88 <MX_TIM3_Init+0xf0>)
 8008bd8:	2200      	movs	r2, #0
 8008bda:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008bdc:	4b2a      	ldr	r3, [pc, #168]	@ (8008c88 <MX_TIM3_Init+0xf0>)
 8008bde:	2200      	movs	r2, #0
 8008be0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8008be2:	4829      	ldr	r0, [pc, #164]	@ (8008c88 <MX_TIM3_Init+0xf0>)
 8008be4:	f00d fb88 	bl	80162f8 <HAL_TIM_PWM_Init>
 8008be8:	4603      	mov	r3, r0
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d001      	beq.n	8008bf2 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8008bee:	f7fe ffc7 	bl	8007b80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008bf6:	2300      	movs	r3, #0
 8008bf8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8008bfa:	f107 031c 	add.w	r3, r7, #28
 8008bfe:	4619      	mov	r1, r3
 8008c00:	4821      	ldr	r0, [pc, #132]	@ (8008c88 <MX_TIM3_Init+0xf0>)
 8008c02:	f00e fe9d 	bl	8017940 <HAL_TIMEx_MasterConfigSynchronization>
 8008c06:	4603      	mov	r3, r0
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d001      	beq.n	8008c10 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8008c0c:	f7fe ffb8 	bl	8007b80 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8008c10:	2360      	movs	r3, #96	@ 0x60
 8008c12:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8008c14:	2300      	movs	r3, #0
 8008c16:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8008c18:	2300      	movs	r3, #0
 8008c1a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8008c1c:	2300      	movs	r3, #0
 8008c1e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8008c20:	463b      	mov	r3, r7
 8008c22:	2200      	movs	r2, #0
 8008c24:	4619      	mov	r1, r3
 8008c26:	4818      	ldr	r0, [pc, #96]	@ (8008c88 <MX_TIM3_Init+0xf0>)
 8008c28:	f00d fed4 	bl	80169d4 <HAL_TIM_PWM_ConfigChannel>
 8008c2c:	4603      	mov	r3, r0
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d001      	beq.n	8008c36 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8008c32:	f7fe ffa5 	bl	8007b80 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8008c36:	463b      	mov	r3, r7
 8008c38:	2204      	movs	r2, #4
 8008c3a:	4619      	mov	r1, r3
 8008c3c:	4812      	ldr	r0, [pc, #72]	@ (8008c88 <MX_TIM3_Init+0xf0>)
 8008c3e:	f00d fec9 	bl	80169d4 <HAL_TIM_PWM_ConfigChannel>
 8008c42:	4603      	mov	r3, r0
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d001      	beq.n	8008c4c <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8008c48:	f7fe ff9a 	bl	8007b80 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8008c4c:	463b      	mov	r3, r7
 8008c4e:	2208      	movs	r2, #8
 8008c50:	4619      	mov	r1, r3
 8008c52:	480d      	ldr	r0, [pc, #52]	@ (8008c88 <MX_TIM3_Init+0xf0>)
 8008c54:	f00d febe 	bl	80169d4 <HAL_TIM_PWM_ConfigChannel>
 8008c58:	4603      	mov	r3, r0
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d001      	beq.n	8008c62 <MX_TIM3_Init+0xca>
  {
    Error_Handler();
 8008c5e:	f7fe ff8f 	bl	8007b80 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8008c62:	463b      	mov	r3, r7
 8008c64:	220c      	movs	r2, #12
 8008c66:	4619      	mov	r1, r3
 8008c68:	4807      	ldr	r0, [pc, #28]	@ (8008c88 <MX_TIM3_Init+0xf0>)
 8008c6a:	f00d feb3 	bl	80169d4 <HAL_TIM_PWM_ConfigChannel>
 8008c6e:	4603      	mov	r3, r0
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d001      	beq.n	8008c78 <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 8008c74:	f7fe ff84 	bl	8007b80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8008c78:	4803      	ldr	r0, [pc, #12]	@ (8008c88 <MX_TIM3_Init+0xf0>)
 8008c7a:	f000 f90b 	bl	8008e94 <HAL_TIM_MspPostInit>

}
 8008c7e:	bf00      	nop
 8008c80:	3728      	adds	r7, #40	@ 0x28
 8008c82:	46bd      	mov	sp, r7
 8008c84:	bd80      	pop	{r7, pc}
 8008c86:	bf00      	nop
 8008c88:	24000418 	.word	0x24000418
 8008c8c:	40000400 	.word	0x40000400

08008c90 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8008c90:	b580      	push	{r7, lr}
 8008c92:	b088      	sub	sp, #32
 8008c94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008c96:	f107 0310 	add.w	r3, r7, #16
 8008c9a:	2200      	movs	r2, #0
 8008c9c:	601a      	str	r2, [r3, #0]
 8008c9e:	605a      	str	r2, [r3, #4]
 8008ca0:	609a      	str	r2, [r3, #8]
 8008ca2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008ca4:	1d3b      	adds	r3, r7, #4
 8008ca6:	2200      	movs	r2, #0
 8008ca8:	601a      	str	r2, [r3, #0]
 8008caa:	605a      	str	r2, [r3, #4]
 8008cac:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8008cae:	4b21      	ldr	r3, [pc, #132]	@ (8008d34 <MX_TIM8_Init+0xa4>)
 8008cb0:	4a21      	ldr	r2, [pc, #132]	@ (8008d38 <MX_TIM8_Init+0xa8>)
 8008cb2:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 5549;
 8008cb4:	4b1f      	ldr	r3, [pc, #124]	@ (8008d34 <MX_TIM8_Init+0xa4>)
 8008cb6:	f241 52ad 	movw	r2, #5549	@ 0x15ad
 8008cba:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008cbc:	4b1d      	ldr	r3, [pc, #116]	@ (8008d34 <MX_TIM8_Init+0xa4>)
 8008cbe:	2200      	movs	r2, #0
 8008cc0:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 9999;
 8008cc2:	4b1c      	ldr	r3, [pc, #112]	@ (8008d34 <MX_TIM8_Init+0xa4>)
 8008cc4:	f242 720f 	movw	r2, #9999	@ 0x270f
 8008cc8:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008cca:	4b1a      	ldr	r3, [pc, #104]	@ (8008d34 <MX_TIM8_Init+0xa4>)
 8008ccc:	2200      	movs	r2, #0
 8008cce:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8008cd0:	4b18      	ldr	r3, [pc, #96]	@ (8008d34 <MX_TIM8_Init+0xa4>)
 8008cd2:	2200      	movs	r2, #0
 8008cd4:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008cd6:	4b17      	ldr	r3, [pc, #92]	@ (8008d34 <MX_TIM8_Init+0xa4>)
 8008cd8:	2200      	movs	r2, #0
 8008cda:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8008cdc:	4815      	ldr	r0, [pc, #84]	@ (8008d34 <MX_TIM8_Init+0xa4>)
 8008cde:	f00d f9b0 	bl	8016042 <HAL_TIM_Base_Init>
 8008ce2:	4603      	mov	r3, r0
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d001      	beq.n	8008cec <MX_TIM8_Init+0x5c>
  {
    Error_Handler();
 8008ce8:	f7fe ff4a 	bl	8007b80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008cec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008cf0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8008cf2:	f107 0310 	add.w	r3, r7, #16
 8008cf6:	4619      	mov	r1, r3
 8008cf8:	480e      	ldr	r0, [pc, #56]	@ (8008d34 <MX_TIM8_Init+0xa4>)
 8008cfa:	f00d ff7f 	bl	8016bfc <HAL_TIM_ConfigClockSource>
 8008cfe:	4603      	mov	r3, r0
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d001      	beq.n	8008d08 <MX_TIM8_Init+0x78>
  {
    Error_Handler();
 8008d04:	f7fe ff3c 	bl	8007b80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8008d08:	2320      	movs	r3, #32
 8008d0a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_UPDATE;
 8008d0c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8008d10:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008d12:	2300      	movs	r3, #0
 8008d14:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8008d16:	1d3b      	adds	r3, r7, #4
 8008d18:	4619      	mov	r1, r3
 8008d1a:	4806      	ldr	r0, [pc, #24]	@ (8008d34 <MX_TIM8_Init+0xa4>)
 8008d1c:	f00e fe10 	bl	8017940 <HAL_TIMEx_MasterConfigSynchronization>
 8008d20:	4603      	mov	r3, r0
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d001      	beq.n	8008d2a <MX_TIM8_Init+0x9a>
  {
    Error_Handler();
 8008d26:	f7fe ff2b 	bl	8007b80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8008d2a:	bf00      	nop
 8008d2c:	3720      	adds	r7, #32
 8008d2e:	46bd      	mov	sp, r7
 8008d30:	bd80      	pop	{r7, pc}
 8008d32:	bf00      	nop
 8008d34:	24000464 	.word	0x24000464
 8008d38:	40010400 	.word	0x40010400

08008d3c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8008d3c:	b480      	push	{r7}
 8008d3e:	b085      	sub	sp, #20
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	4a16      	ldr	r2, [pc, #88]	@ (8008da4 <HAL_TIM_PWM_MspInit+0x68>)
 8008d4a:	4293      	cmp	r3, r2
 8008d4c:	d10f      	bne.n	8008d6e <HAL_TIM_PWM_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8008d4e:	4b16      	ldr	r3, [pc, #88]	@ (8008da8 <HAL_TIM_PWM_MspInit+0x6c>)
 8008d50:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008d54:	4a14      	ldr	r2, [pc, #80]	@ (8008da8 <HAL_TIM_PWM_MspInit+0x6c>)
 8008d56:	f043 0301 	orr.w	r3, r3, #1
 8008d5a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8008d5e:	4b12      	ldr	r3, [pc, #72]	@ (8008da8 <HAL_TIM_PWM_MspInit+0x6c>)
 8008d60:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008d64:	f003 0301 	and.w	r3, r3, #1
 8008d68:	60fb      	str	r3, [r7, #12]
 8008d6a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8008d6c:	e013      	b.n	8008d96 <HAL_TIM_PWM_MspInit+0x5a>
  else if(tim_pwmHandle->Instance==TIM3)
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	4a0e      	ldr	r2, [pc, #56]	@ (8008dac <HAL_TIM_PWM_MspInit+0x70>)
 8008d74:	4293      	cmp	r3, r2
 8008d76:	d10e      	bne.n	8008d96 <HAL_TIM_PWM_MspInit+0x5a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8008d78:	4b0b      	ldr	r3, [pc, #44]	@ (8008da8 <HAL_TIM_PWM_MspInit+0x6c>)
 8008d7a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008d7e:	4a0a      	ldr	r2, [pc, #40]	@ (8008da8 <HAL_TIM_PWM_MspInit+0x6c>)
 8008d80:	f043 0302 	orr.w	r3, r3, #2
 8008d84:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8008d88:	4b07      	ldr	r3, [pc, #28]	@ (8008da8 <HAL_TIM_PWM_MspInit+0x6c>)
 8008d8a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008d8e:	f003 0302 	and.w	r3, r3, #2
 8008d92:	60bb      	str	r3, [r7, #8]
 8008d94:	68bb      	ldr	r3, [r7, #8]
}
 8008d96:	bf00      	nop
 8008d98:	3714      	adds	r7, #20
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da0:	4770      	bx	lr
 8008da2:	bf00      	nop
 8008da4:	40010000 	.word	0x40010000
 8008da8:	58024400 	.word	0x58024400
 8008dac:	40000400 	.word	0x40000400

08008db0 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 8008db0:	b580      	push	{r7, lr}
 8008db2:	b08a      	sub	sp, #40	@ 0x28
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008db8:	f107 0314 	add.w	r3, r7, #20
 8008dbc:	2200      	movs	r2, #0
 8008dbe:	601a      	str	r2, [r3, #0]
 8008dc0:	605a      	str	r2, [r3, #4]
 8008dc2:	609a      	str	r2, [r3, #8]
 8008dc4:	60da      	str	r2, [r3, #12]
 8008dc6:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM2)
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008dd0:	d135      	bne.n	8008e3e <HAL_TIM_IC_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8008dd2:	4b1d      	ldr	r3, [pc, #116]	@ (8008e48 <HAL_TIM_IC_MspInit+0x98>)
 8008dd4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008dd8:	4a1b      	ldr	r2, [pc, #108]	@ (8008e48 <HAL_TIM_IC_MspInit+0x98>)
 8008dda:	f043 0301 	orr.w	r3, r3, #1
 8008dde:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8008de2:	4b19      	ldr	r3, [pc, #100]	@ (8008e48 <HAL_TIM_IC_MspInit+0x98>)
 8008de4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008de8:	f003 0301 	and.w	r3, r3, #1
 8008dec:	613b      	str	r3, [r7, #16]
 8008dee:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008df0:	4b15      	ldr	r3, [pc, #84]	@ (8008e48 <HAL_TIM_IC_MspInit+0x98>)
 8008df2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008df6:	4a14      	ldr	r2, [pc, #80]	@ (8008e48 <HAL_TIM_IC_MspInit+0x98>)
 8008df8:	f043 0301 	orr.w	r3, r3, #1
 8008dfc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8008e00:	4b11      	ldr	r3, [pc, #68]	@ (8008e48 <HAL_TIM_IC_MspInit+0x98>)
 8008e02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008e06:	f003 0301 	and.w	r3, r3, #1
 8008e0a:	60fb      	str	r3, [r7, #12]
 8008e0c:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8008e0e:	2301      	movs	r3, #1
 8008e10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008e12:	2302      	movs	r3, #2
 8008e14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008e16:	2300      	movs	r3, #0
 8008e18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008e1a:	2300      	movs	r3, #0
 8008e1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8008e1e:	2301      	movs	r3, #1
 8008e20:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008e22:	f107 0314 	add.w	r3, r7, #20
 8008e26:	4619      	mov	r1, r3
 8008e28:	4808      	ldr	r0, [pc, #32]	@ (8008e4c <HAL_TIM_IC_MspInit+0x9c>)
 8008e2a:	f005 f9b1 	bl	800e190 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8008e2e:	2200      	movs	r2, #0
 8008e30:	2101      	movs	r1, #1
 8008e32:	201c      	movs	r0, #28
 8008e34:	f002 faad 	bl	800b392 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8008e38:	201c      	movs	r0, #28
 8008e3a:	f002 fac4 	bl	800b3c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8008e3e:	bf00      	nop
 8008e40:	3728      	adds	r7, #40	@ 0x28
 8008e42:	46bd      	mov	sp, r7
 8008e44:	bd80      	pop	{r7, pc}
 8008e46:	bf00      	nop
 8008e48:	58024400 	.word	0x58024400
 8008e4c:	58020000 	.word	0x58020000

08008e50 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8008e50:	b480      	push	{r7}
 8008e52:	b085      	sub	sp, #20
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM8)
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	4a0b      	ldr	r2, [pc, #44]	@ (8008e8c <HAL_TIM_Base_MspInit+0x3c>)
 8008e5e:	4293      	cmp	r3, r2
 8008e60:	d10e      	bne.n	8008e80 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8008e62:	4b0b      	ldr	r3, [pc, #44]	@ (8008e90 <HAL_TIM_Base_MspInit+0x40>)
 8008e64:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008e68:	4a09      	ldr	r2, [pc, #36]	@ (8008e90 <HAL_TIM_Base_MspInit+0x40>)
 8008e6a:	f043 0302 	orr.w	r3, r3, #2
 8008e6e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8008e72:	4b07      	ldr	r3, [pc, #28]	@ (8008e90 <HAL_TIM_Base_MspInit+0x40>)
 8008e74:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008e78:	f003 0302 	and.w	r3, r3, #2
 8008e7c:	60fb      	str	r3, [r7, #12]
 8008e7e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8008e80:	bf00      	nop
 8008e82:	3714      	adds	r7, #20
 8008e84:	46bd      	mov	sp, r7
 8008e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e8a:	4770      	bx	lr
 8008e8c:	40010400 	.word	0x40010400
 8008e90:	58024400 	.word	0x58024400

08008e94 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8008e94:	b580      	push	{r7, lr}
 8008e96:	b08a      	sub	sp, #40	@ 0x28
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008e9c:	f107 0314 	add.w	r3, r7, #20
 8008ea0:	2200      	movs	r2, #0
 8008ea2:	601a      	str	r2, [r3, #0]
 8008ea4:	605a      	str	r2, [r3, #4]
 8008ea6:	609a      	str	r2, [r3, #8]
 8008ea8:	60da      	str	r2, [r3, #12]
 8008eaa:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	4a26      	ldr	r2, [pc, #152]	@ (8008f4c <HAL_TIM_MspPostInit+0xb8>)
 8008eb2:	4293      	cmp	r3, r2
 8008eb4:	d120      	bne.n	8008ef8 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8008eb6:	4b26      	ldr	r3, [pc, #152]	@ (8008f50 <HAL_TIM_MspPostInit+0xbc>)
 8008eb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008ebc:	4a24      	ldr	r2, [pc, #144]	@ (8008f50 <HAL_TIM_MspPostInit+0xbc>)
 8008ebe:	f043 0310 	orr.w	r3, r3, #16
 8008ec2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8008ec6:	4b22      	ldr	r3, [pc, #136]	@ (8008f50 <HAL_TIM_MspPostInit+0xbc>)
 8008ec8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008ecc:	f003 0310 	and.w	r3, r3, #16
 8008ed0:	613b      	str	r3, [r7, #16]
 8008ed2:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 8008ed4:	f44f 43d0 	mov.w	r3, #26624	@ 0x6800
 8008ed8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008eda:	2302      	movs	r3, #2
 8008edc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008ede:	2300      	movs	r3, #0
 8008ee0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008ee2:	2300      	movs	r3, #0
 8008ee4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8008ee6:	2301      	movs	r3, #1
 8008ee8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8008eea:	f107 0314 	add.w	r3, r7, #20
 8008eee:	4619      	mov	r1, r3
 8008ef0:	4818      	ldr	r0, [pc, #96]	@ (8008f54 <HAL_TIM_MspPostInit+0xc0>)
 8008ef2:	f005 f94d 	bl	800e190 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8008ef6:	e024      	b.n	8008f42 <HAL_TIM_MspPostInit+0xae>
  else if(timHandle->Instance==TIM3)
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	4a16      	ldr	r2, [pc, #88]	@ (8008f58 <HAL_TIM_MspPostInit+0xc4>)
 8008efe:	4293      	cmp	r3, r2
 8008f00:	d11f      	bne.n	8008f42 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008f02:	4b13      	ldr	r3, [pc, #76]	@ (8008f50 <HAL_TIM_MspPostInit+0xbc>)
 8008f04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008f08:	4a11      	ldr	r2, [pc, #68]	@ (8008f50 <HAL_TIM_MspPostInit+0xbc>)
 8008f0a:	f043 0304 	orr.w	r3, r3, #4
 8008f0e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8008f12:	4b0f      	ldr	r3, [pc, #60]	@ (8008f50 <HAL_TIM_MspPostInit+0xbc>)
 8008f14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008f18:	f003 0304 	and.w	r3, r3, #4
 8008f1c:	60fb      	str	r3, [r7, #12]
 8008f1e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8008f20:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8008f24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008f26:	2302      	movs	r3, #2
 8008f28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008f2e:	2300      	movs	r3, #0
 8008f30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8008f32:	2302      	movs	r3, #2
 8008f34:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008f36:	f107 0314 	add.w	r3, r7, #20
 8008f3a:	4619      	mov	r1, r3
 8008f3c:	4807      	ldr	r0, [pc, #28]	@ (8008f5c <HAL_TIM_MspPostInit+0xc8>)
 8008f3e:	f005 f927 	bl	800e190 <HAL_GPIO_Init>
}
 8008f42:	bf00      	nop
 8008f44:	3728      	adds	r7, #40	@ 0x28
 8008f46:	46bd      	mov	sp, r7
 8008f48:	bd80      	pop	{r7, pc}
 8008f4a:	bf00      	nop
 8008f4c:	40010000 	.word	0x40010000
 8008f50:	58024400 	.word	0x58024400
 8008f54:	58021000 	.word	0x58021000
 8008f58:	40000400 	.word	0x40000400
 8008f5c:	58020800 	.word	0x58020800

08008f60 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8008f60:	b580      	push	{r7, lr}
 8008f62:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8008f64:	4b22      	ldr	r3, [pc, #136]	@ (8008ff0 <MX_USART1_UART_Init+0x90>)
 8008f66:	4a23      	ldr	r2, [pc, #140]	@ (8008ff4 <MX_USART1_UART_Init+0x94>)
 8008f68:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8008f6a:	4b21      	ldr	r3, [pc, #132]	@ (8008ff0 <MX_USART1_UART_Init+0x90>)
 8008f6c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8008f70:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8008f72:	4b1f      	ldr	r3, [pc, #124]	@ (8008ff0 <MX_USART1_UART_Init+0x90>)
 8008f74:	2200      	movs	r2, #0
 8008f76:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8008f78:	4b1d      	ldr	r3, [pc, #116]	@ (8008ff0 <MX_USART1_UART_Init+0x90>)
 8008f7a:	2200      	movs	r2, #0
 8008f7c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8008f7e:	4b1c      	ldr	r3, [pc, #112]	@ (8008ff0 <MX_USART1_UART_Init+0x90>)
 8008f80:	2200      	movs	r2, #0
 8008f82:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8008f84:	4b1a      	ldr	r3, [pc, #104]	@ (8008ff0 <MX_USART1_UART_Init+0x90>)
 8008f86:	220c      	movs	r2, #12
 8008f88:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008f8a:	4b19      	ldr	r3, [pc, #100]	@ (8008ff0 <MX_USART1_UART_Init+0x90>)
 8008f8c:	2200      	movs	r2, #0
 8008f8e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8008f90:	4b17      	ldr	r3, [pc, #92]	@ (8008ff0 <MX_USART1_UART_Init+0x90>)
 8008f92:	2200      	movs	r2, #0
 8008f94:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8008f96:	4b16      	ldr	r3, [pc, #88]	@ (8008ff0 <MX_USART1_UART_Init+0x90>)
 8008f98:	2200      	movs	r2, #0
 8008f9a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8008f9c:	4b14      	ldr	r3, [pc, #80]	@ (8008ff0 <MX_USART1_UART_Init+0x90>)
 8008f9e:	2200      	movs	r2, #0
 8008fa0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8008fa2:	4b13      	ldr	r3, [pc, #76]	@ (8008ff0 <MX_USART1_UART_Init+0x90>)
 8008fa4:	2200      	movs	r2, #0
 8008fa6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8008fa8:	4811      	ldr	r0, [pc, #68]	@ (8008ff0 <MX_USART1_UART_Init+0x90>)
 8008faa:	f00e fe0f 	bl	8017bcc <HAL_UART_Init>
 8008fae:	4603      	mov	r3, r0
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d001      	beq.n	8008fb8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8008fb4:	f7fe fde4 	bl	8007b80 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8008fb8:	2100      	movs	r1, #0
 8008fba:	480d      	ldr	r0, [pc, #52]	@ (8008ff0 <MX_USART1_UART_Init+0x90>)
 8008fbc:	f011 fca3 	bl	801a906 <HAL_UARTEx_SetTxFifoThreshold>
 8008fc0:	4603      	mov	r3, r0
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d001      	beq.n	8008fca <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8008fc6:	f7fe fddb 	bl	8007b80 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8008fca:	2100      	movs	r1, #0
 8008fcc:	4808      	ldr	r0, [pc, #32]	@ (8008ff0 <MX_USART1_UART_Init+0x90>)
 8008fce:	f011 fcd8 	bl	801a982 <HAL_UARTEx_SetRxFifoThreshold>
 8008fd2:	4603      	mov	r3, r0
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d001      	beq.n	8008fdc <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8008fd8:	f7fe fdd2 	bl	8007b80 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8008fdc:	4804      	ldr	r0, [pc, #16]	@ (8008ff0 <MX_USART1_UART_Init+0x90>)
 8008fde:	f011 fc59 	bl	801a894 <HAL_UARTEx_DisableFifoMode>
 8008fe2:	4603      	mov	r3, r0
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d001      	beq.n	8008fec <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8008fe8:	f7fe fdca 	bl	8007b80 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8008fec:	bf00      	nop
 8008fee:	bd80      	pop	{r7, pc}
 8008ff0:	240004b0 	.word	0x240004b0
 8008ff4:	40011000 	.word	0x40011000

08008ff8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8008ff8:	b580      	push	{r7, lr}
 8008ffa:	b0b8      	sub	sp, #224	@ 0xe0
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009000:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8009004:	2200      	movs	r2, #0
 8009006:	601a      	str	r2, [r3, #0]
 8009008:	605a      	str	r2, [r3, #4]
 800900a:	609a      	str	r2, [r3, #8]
 800900c:	60da      	str	r2, [r3, #12]
 800900e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8009010:	f107 0310 	add.w	r3, r7, #16
 8009014:	22b8      	movs	r2, #184	@ 0xb8
 8009016:	2100      	movs	r1, #0
 8009018:	4618      	mov	r0, r3
 800901a:	f014 fef3 	bl	801de04 <memset>
  if(uartHandle->Instance==USART1)
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	4a2b      	ldr	r2, [pc, #172]	@ (80090d0 <HAL_UART_MspInit+0xd8>)
 8009024:	4293      	cmp	r3, r2
 8009026:	d14e      	bne.n	80090c6 <HAL_UART_MspInit+0xce>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8009028:	f04f 0201 	mov.w	r2, #1
 800902c:	f04f 0300 	mov.w	r3, #0
 8009030:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8009034:	2300      	movs	r3, #0
 8009036:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800903a:	f107 0310 	add.w	r3, r7, #16
 800903e:	4618      	mov	r0, r3
 8009040:	f008 feb8 	bl	8011db4 <HAL_RCCEx_PeriphCLKConfig>
 8009044:	4603      	mov	r3, r0
 8009046:	2b00      	cmp	r3, #0
 8009048:	d001      	beq.n	800904e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800904a:	f7fe fd99 	bl	8007b80 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800904e:	4b21      	ldr	r3, [pc, #132]	@ (80090d4 <HAL_UART_MspInit+0xdc>)
 8009050:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009054:	4a1f      	ldr	r2, [pc, #124]	@ (80090d4 <HAL_UART_MspInit+0xdc>)
 8009056:	f043 0310 	orr.w	r3, r3, #16
 800905a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800905e:	4b1d      	ldr	r3, [pc, #116]	@ (80090d4 <HAL_UART_MspInit+0xdc>)
 8009060:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009064:	f003 0310 	and.w	r3, r3, #16
 8009068:	60fb      	str	r3, [r7, #12]
 800906a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800906c:	4b19      	ldr	r3, [pc, #100]	@ (80090d4 <HAL_UART_MspInit+0xdc>)
 800906e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009072:	4a18      	ldr	r2, [pc, #96]	@ (80090d4 <HAL_UART_MspInit+0xdc>)
 8009074:	f043 0301 	orr.w	r3, r3, #1
 8009078:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800907c:	4b15      	ldr	r3, [pc, #84]	@ (80090d4 <HAL_UART_MspInit+0xdc>)
 800907e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009082:	f003 0301 	and.w	r3, r3, #1
 8009086:	60bb      	str	r3, [r7, #8]
 8009088:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800908a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800908e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009092:	2302      	movs	r3, #2
 8009094:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009098:	2300      	movs	r3, #0
 800909a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800909e:	2300      	movs	r3, #0
 80090a0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80090a4:	2307      	movs	r3, #7
 80090a6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80090aa:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80090ae:	4619      	mov	r1, r3
 80090b0:	4809      	ldr	r0, [pc, #36]	@ (80090d8 <HAL_UART_MspInit+0xe0>)
 80090b2:	f005 f86d 	bl	800e190 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80090b6:	2200      	movs	r2, #0
 80090b8:	2100      	movs	r1, #0
 80090ba:	2025      	movs	r0, #37	@ 0x25
 80090bc:	f002 f969 	bl	800b392 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80090c0:	2025      	movs	r0, #37	@ 0x25
 80090c2:	f002 f980 	bl	800b3c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80090c6:	bf00      	nop
 80090c8:	37e0      	adds	r7, #224	@ 0xe0
 80090ca:	46bd      	mov	sp, r7
 80090cc:	bd80      	pop	{r7, pc}
 80090ce:	bf00      	nop
 80090d0:	40011000 	.word	0x40011000
 80090d4:	58024400 	.word	0x58024400
 80090d8:	58020000 	.word	0x58020000

080090dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80090dc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8009114 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80090e0:	f7ff fbe6 	bl	80088b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80090e4:	480c      	ldr	r0, [pc, #48]	@ (8009118 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80090e6:	490d      	ldr	r1, [pc, #52]	@ (800911c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80090e8:	4a0d      	ldr	r2, [pc, #52]	@ (8009120 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80090ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80090ec:	e002      	b.n	80090f4 <LoopCopyDataInit>

080090ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80090ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80090f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80090f2:	3304      	adds	r3, #4

080090f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80090f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80090f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80090f8:	d3f9      	bcc.n	80090ee <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80090fa:	4a0a      	ldr	r2, [pc, #40]	@ (8009124 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80090fc:	4c0a      	ldr	r4, [pc, #40]	@ (8009128 <LoopFillZerobss+0x22>)
  movs r3, #0
 80090fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8009100:	e001      	b.n	8009106 <LoopFillZerobss>

08009102 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8009102:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8009104:	3204      	adds	r2, #4

08009106 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8009106:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8009108:	d3fb      	bcc.n	8009102 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800910a:	f014 fe89 	bl	801de20 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800910e:	f7fb fe03 	bl	8004d18 <main>
  bx  lr
 8009112:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8009114:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8009118:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800911c:	24000078 	.word	0x24000078
  ldr r2, =_sidata
 8009120:	08020688 	.word	0x08020688
  ldr r2, =_sbss
 8009124:	24000078 	.word	0x24000078
  ldr r4, =_ebss
 8009128:	240008ac 	.word	0x240008ac

0800912c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800912c:	e7fe      	b.n	800912c <ADC3_IRQHandler>
	...

08009130 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8009130:	b580      	push	{r7, lr}
 8009132:	b082      	sub	sp, #8
 8009134:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8009136:	2003      	movs	r0, #3
 8009138:	f002 f920 	bl	800b37c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800913c:	f008 fc64 	bl	8011a08 <HAL_RCC_GetSysClockFreq>
 8009140:	4602      	mov	r2, r0
 8009142:	4b15      	ldr	r3, [pc, #84]	@ (8009198 <HAL_Init+0x68>)
 8009144:	699b      	ldr	r3, [r3, #24]
 8009146:	0a1b      	lsrs	r3, r3, #8
 8009148:	f003 030f 	and.w	r3, r3, #15
 800914c:	4913      	ldr	r1, [pc, #76]	@ (800919c <HAL_Init+0x6c>)
 800914e:	5ccb      	ldrb	r3, [r1, r3]
 8009150:	f003 031f 	and.w	r3, r3, #31
 8009154:	fa22 f303 	lsr.w	r3, r2, r3
 8009158:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800915a:	4b0f      	ldr	r3, [pc, #60]	@ (8009198 <HAL_Init+0x68>)
 800915c:	699b      	ldr	r3, [r3, #24]
 800915e:	f003 030f 	and.w	r3, r3, #15
 8009162:	4a0e      	ldr	r2, [pc, #56]	@ (800919c <HAL_Init+0x6c>)
 8009164:	5cd3      	ldrb	r3, [r2, r3]
 8009166:	f003 031f 	and.w	r3, r3, #31
 800916a:	687a      	ldr	r2, [r7, #4]
 800916c:	fa22 f303 	lsr.w	r3, r2, r3
 8009170:	4a0b      	ldr	r2, [pc, #44]	@ (80091a0 <HAL_Init+0x70>)
 8009172:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009174:	4a0b      	ldr	r2, [pc, #44]	@ (80091a4 <HAL_Init+0x74>)
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800917a:	200f      	movs	r0, #15
 800917c:	f000 f814 	bl	80091a8 <HAL_InitTick>
 8009180:	4603      	mov	r3, r0
 8009182:	2b00      	cmp	r3, #0
 8009184:	d001      	beq.n	800918a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8009186:	2301      	movs	r3, #1
 8009188:	e002      	b.n	8009190 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800918a:	f7fe febb 	bl	8007f04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800918e:	2300      	movs	r3, #0
}
 8009190:	4618      	mov	r0, r3
 8009192:	3708      	adds	r7, #8
 8009194:	46bd      	mov	sp, r7
 8009196:	bd80      	pop	{r7, pc}
 8009198:	58024400 	.word	0x58024400
 800919c:	0801e8cc 	.word	0x0801e8cc
 80091a0:	24000008 	.word	0x24000008
 80091a4:	24000004 	.word	0x24000004

080091a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80091a8:	b580      	push	{r7, lr}
 80091aa:	b082      	sub	sp, #8
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80091b0:	4b15      	ldr	r3, [pc, #84]	@ (8009208 <HAL_InitTick+0x60>)
 80091b2:	781b      	ldrb	r3, [r3, #0]
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d101      	bne.n	80091bc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80091b8:	2301      	movs	r3, #1
 80091ba:	e021      	b.n	8009200 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80091bc:	4b13      	ldr	r3, [pc, #76]	@ (800920c <HAL_InitTick+0x64>)
 80091be:	681a      	ldr	r2, [r3, #0]
 80091c0:	4b11      	ldr	r3, [pc, #68]	@ (8009208 <HAL_InitTick+0x60>)
 80091c2:	781b      	ldrb	r3, [r3, #0]
 80091c4:	4619      	mov	r1, r3
 80091c6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80091ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80091ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80091d2:	4618      	mov	r0, r3
 80091d4:	f002 f905 	bl	800b3e2 <HAL_SYSTICK_Config>
 80091d8:	4603      	mov	r3, r0
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d001      	beq.n	80091e2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80091de:	2301      	movs	r3, #1
 80091e0:	e00e      	b.n	8009200 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	2b0f      	cmp	r3, #15
 80091e6:	d80a      	bhi.n	80091fe <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80091e8:	2200      	movs	r2, #0
 80091ea:	6879      	ldr	r1, [r7, #4]
 80091ec:	f04f 30ff 	mov.w	r0, #4294967295
 80091f0:	f002 f8cf 	bl	800b392 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80091f4:	4a06      	ldr	r2, [pc, #24]	@ (8009210 <HAL_InitTick+0x68>)
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80091fa:	2300      	movs	r3, #0
 80091fc:	e000      	b.n	8009200 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80091fe:	2301      	movs	r3, #1
}
 8009200:	4618      	mov	r0, r3
 8009202:	3708      	adds	r7, #8
 8009204:	46bd      	mov	sp, r7
 8009206:	bd80      	pop	{r7, pc}
 8009208:	24000010 	.word	0x24000010
 800920c:	24000004 	.word	0x24000004
 8009210:	2400000c 	.word	0x2400000c

08009214 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009214:	b480      	push	{r7}
 8009216:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8009218:	4b06      	ldr	r3, [pc, #24]	@ (8009234 <HAL_IncTick+0x20>)
 800921a:	781b      	ldrb	r3, [r3, #0]
 800921c:	461a      	mov	r2, r3
 800921e:	4b06      	ldr	r3, [pc, #24]	@ (8009238 <HAL_IncTick+0x24>)
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	4413      	add	r3, r2
 8009224:	4a04      	ldr	r2, [pc, #16]	@ (8009238 <HAL_IncTick+0x24>)
 8009226:	6013      	str	r3, [r2, #0]
}
 8009228:	bf00      	nop
 800922a:	46bd      	mov	sp, r7
 800922c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009230:	4770      	bx	lr
 8009232:	bf00      	nop
 8009234:	24000010 	.word	0x24000010
 8009238:	24000544 	.word	0x24000544

0800923c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800923c:	b480      	push	{r7}
 800923e:	af00      	add	r7, sp, #0
  return uwTick;
 8009240:	4b03      	ldr	r3, [pc, #12]	@ (8009250 <HAL_GetTick+0x14>)
 8009242:	681b      	ldr	r3, [r3, #0]
}
 8009244:	4618      	mov	r0, r3
 8009246:	46bd      	mov	sp, r7
 8009248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800924c:	4770      	bx	lr
 800924e:	bf00      	nop
 8009250:	24000544 	.word	0x24000544

08009254 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8009254:	b580      	push	{r7, lr}
 8009256:	b084      	sub	sp, #16
 8009258:	af00      	add	r7, sp, #0
 800925a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800925c:	f7ff ffee 	bl	800923c <HAL_GetTick>
 8009260:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	f1b3 3fff 	cmp.w	r3, #4294967295
 800926c:	d005      	beq.n	800927a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800926e:	4b0a      	ldr	r3, [pc, #40]	@ (8009298 <HAL_Delay+0x44>)
 8009270:	781b      	ldrb	r3, [r3, #0]
 8009272:	461a      	mov	r2, r3
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	4413      	add	r3, r2
 8009278:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800927a:	bf00      	nop
 800927c:	f7ff ffde 	bl	800923c <HAL_GetTick>
 8009280:	4602      	mov	r2, r0
 8009282:	68bb      	ldr	r3, [r7, #8]
 8009284:	1ad3      	subs	r3, r2, r3
 8009286:	68fa      	ldr	r2, [r7, #12]
 8009288:	429a      	cmp	r2, r3
 800928a:	d8f7      	bhi.n	800927c <HAL_Delay+0x28>
  {
  }
}
 800928c:	bf00      	nop
 800928e:	bf00      	nop
 8009290:	3710      	adds	r7, #16
 8009292:	46bd      	mov	sp, r7
 8009294:	bd80      	pop	{r7, pc}
 8009296:	bf00      	nop
 8009298:	24000010 	.word	0x24000010

0800929c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800929c:	b480      	push	{r7}
 800929e:	b083      	sub	sp, #12
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	6078      	str	r0, [r7, #4]
 80092a4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	689b      	ldr	r3, [r3, #8]
 80092aa:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80092ae:	683b      	ldr	r3, [r7, #0]
 80092b0:	431a      	orrs	r2, r3
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	609a      	str	r2, [r3, #8]
}
 80092b6:	bf00      	nop
 80092b8:	370c      	adds	r7, #12
 80092ba:	46bd      	mov	sp, r7
 80092bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c0:	4770      	bx	lr

080092c2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80092c2:	b480      	push	{r7}
 80092c4:	b083      	sub	sp, #12
 80092c6:	af00      	add	r7, sp, #0
 80092c8:	6078      	str	r0, [r7, #4]
 80092ca:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	689b      	ldr	r3, [r3, #8]
 80092d0:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80092d4:	683b      	ldr	r3, [r7, #0]
 80092d6:	431a      	orrs	r2, r3
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	609a      	str	r2, [r3, #8]
}
 80092dc:	bf00      	nop
 80092de:	370c      	adds	r7, #12
 80092e0:	46bd      	mov	sp, r7
 80092e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e6:	4770      	bx	lr

080092e8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80092e8:	b480      	push	{r7}
 80092ea:	b083      	sub	sp, #12
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	689b      	ldr	r3, [r3, #8]
 80092f4:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80092f8:	4618      	mov	r0, r3
 80092fa:	370c      	adds	r7, #12
 80092fc:	46bd      	mov	sp, r7
 80092fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009302:	4770      	bx	lr

08009304 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8009304:	b480      	push	{r7}
 8009306:	b087      	sub	sp, #28
 8009308:	af00      	add	r7, sp, #0
 800930a:	60f8      	str	r0, [r7, #12]
 800930c:	60b9      	str	r1, [r7, #8]
 800930e:	607a      	str	r2, [r7, #4]
 8009310:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	3360      	adds	r3, #96	@ 0x60
 8009316:	461a      	mov	r2, r3
 8009318:	68bb      	ldr	r3, [r7, #8]
 800931a:	009b      	lsls	r3, r3, #2
 800931c:	4413      	add	r3, r2
 800931e:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	4a10      	ldr	r2, [pc, #64]	@ (8009364 <LL_ADC_SetOffset+0x60>)
 8009324:	4293      	cmp	r3, r2
 8009326:	d10b      	bne.n	8009340 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8009328:	697b      	ldr	r3, [r7, #20]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8009332:	683b      	ldr	r3, [r7, #0]
 8009334:	4313      	orrs	r3, r2
 8009336:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800933a:	697b      	ldr	r3, [r7, #20]
 800933c:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 800933e:	e00b      	b.n	8009358 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8009340:	697b      	ldr	r3, [r7, #20]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 800934e:	683b      	ldr	r3, [r7, #0]
 8009350:	430b      	orrs	r3, r1
 8009352:	431a      	orrs	r2, r3
 8009354:	697b      	ldr	r3, [r7, #20]
 8009356:	601a      	str	r2, [r3, #0]
}
 8009358:	bf00      	nop
 800935a:	371c      	adds	r7, #28
 800935c:	46bd      	mov	sp, r7
 800935e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009362:	4770      	bx	lr
 8009364:	58026000 	.word	0x58026000

08009368 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8009368:	b480      	push	{r7}
 800936a:	b085      	sub	sp, #20
 800936c:	af00      	add	r7, sp, #0
 800936e:	6078      	str	r0, [r7, #4]
 8009370:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	3360      	adds	r3, #96	@ 0x60
 8009376:	461a      	mov	r2, r3
 8009378:	683b      	ldr	r3, [r7, #0]
 800937a:	009b      	lsls	r3, r3, #2
 800937c:	4413      	add	r3, r2
 800937e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8009388:	4618      	mov	r0, r3
 800938a:	3714      	adds	r7, #20
 800938c:	46bd      	mov	sp, r7
 800938e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009392:	4770      	bx	lr

08009394 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8009394:	b480      	push	{r7}
 8009396:	b085      	sub	sp, #20
 8009398:	af00      	add	r7, sp, #0
 800939a:	60f8      	str	r0, [r7, #12]
 800939c:	60b9      	str	r1, [r7, #8]
 800939e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	691b      	ldr	r3, [r3, #16]
 80093a4:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 80093a8:	68bb      	ldr	r3, [r7, #8]
 80093aa:	f003 031f 	and.w	r3, r3, #31
 80093ae:	6879      	ldr	r1, [r7, #4]
 80093b0:	fa01 f303 	lsl.w	r3, r1, r3
 80093b4:	431a      	orrs	r2, r3
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	611a      	str	r2, [r3, #16]
}
 80093ba:	bf00      	nop
 80093bc:	3714      	adds	r7, #20
 80093be:	46bd      	mov	sp, r7
 80093c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c4:	4770      	bx	lr
	...

080093c8 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80093c8:	b480      	push	{r7}
 80093ca:	b087      	sub	sp, #28
 80093cc:	af00      	add	r7, sp, #0
 80093ce:	60f8      	str	r0, [r7, #12]
 80093d0:	60b9      	str	r1, [r7, #8]
 80093d2:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	4a0c      	ldr	r2, [pc, #48]	@ (8009408 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 80093d8:	4293      	cmp	r3, r2
 80093da:	d00e      	beq.n	80093fa <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	3360      	adds	r3, #96	@ 0x60
 80093e0:	461a      	mov	r2, r3
 80093e2:	68bb      	ldr	r3, [r7, #8]
 80093e4:	009b      	lsls	r3, r3, #2
 80093e6:	4413      	add	r3, r2
 80093e8:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80093ea:	697b      	ldr	r3, [r7, #20]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	431a      	orrs	r2, r3
 80093f6:	697b      	ldr	r3, [r7, #20]
 80093f8:	601a      	str	r2, [r3, #0]
  }
}
 80093fa:	bf00      	nop
 80093fc:	371c      	adds	r7, #28
 80093fe:	46bd      	mov	sp, r7
 8009400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009404:	4770      	bx	lr
 8009406:	bf00      	nop
 8009408:	58026000 	.word	0x58026000

0800940c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 800940c:	b480      	push	{r7}
 800940e:	b087      	sub	sp, #28
 8009410:	af00      	add	r7, sp, #0
 8009412:	60f8      	str	r0, [r7, #12]
 8009414:	60b9      	str	r1, [r7, #8]
 8009416:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	4a0c      	ldr	r2, [pc, #48]	@ (800944c <LL_ADC_SetOffsetSaturation+0x40>)
 800941c:	4293      	cmp	r3, r2
 800941e:	d10e      	bne.n	800943e <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	3360      	adds	r3, #96	@ 0x60
 8009424:	461a      	mov	r2, r3
 8009426:	68bb      	ldr	r3, [r7, #8]
 8009428:	009b      	lsls	r3, r3, #2
 800942a:	4413      	add	r3, r2
 800942c:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 800942e:	697b      	ldr	r3, [r7, #20]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	431a      	orrs	r2, r3
 800943a:	697b      	ldr	r3, [r7, #20]
 800943c:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 800943e:	bf00      	nop
 8009440:	371c      	adds	r7, #28
 8009442:	46bd      	mov	sp, r7
 8009444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009448:	4770      	bx	lr
 800944a:	bf00      	nop
 800944c:	58026000 	.word	0x58026000

08009450 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8009450:	b480      	push	{r7}
 8009452:	b087      	sub	sp, #28
 8009454:	af00      	add	r7, sp, #0
 8009456:	60f8      	str	r0, [r7, #12]
 8009458:	60b9      	str	r1, [r7, #8]
 800945a:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	4a0c      	ldr	r2, [pc, #48]	@ (8009490 <LL_ADC_SetOffsetSign+0x40>)
 8009460:	4293      	cmp	r3, r2
 8009462:	d10e      	bne.n	8009482 <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	3360      	adds	r3, #96	@ 0x60
 8009468:	461a      	mov	r2, r3
 800946a:	68bb      	ldr	r3, [r7, #8]
 800946c:	009b      	lsls	r3, r3, #2
 800946e:	4413      	add	r3, r2
 8009470:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8009472:	697b      	ldr	r3, [r7, #20]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	431a      	orrs	r2, r3
 800947e:	697b      	ldr	r3, [r7, #20]
 8009480:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8009482:	bf00      	nop
 8009484:	371c      	adds	r7, #28
 8009486:	46bd      	mov	sp, r7
 8009488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800948c:	4770      	bx	lr
 800948e:	bf00      	nop
 8009490:	58026000 	.word	0x58026000

08009494 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8009494:	b480      	push	{r7}
 8009496:	b087      	sub	sp, #28
 8009498:	af00      	add	r7, sp, #0
 800949a:	60f8      	str	r0, [r7, #12]
 800949c:	60b9      	str	r1, [r7, #8]
 800949e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	3360      	adds	r3, #96	@ 0x60
 80094a4:	461a      	mov	r2, r3
 80094a6:	68bb      	ldr	r3, [r7, #8]
 80094a8:	009b      	lsls	r3, r3, #2
 80094aa:	4413      	add	r3, r2
 80094ac:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	4a0c      	ldr	r2, [pc, #48]	@ (80094e4 <LL_ADC_SetOffsetState+0x50>)
 80094b2:	4293      	cmp	r3, r2
 80094b4:	d108      	bne.n	80094c8 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 80094b6:	697b      	ldr	r3, [r7, #20]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	431a      	orrs	r2, r3
 80094c2:	697b      	ldr	r3, [r7, #20]
 80094c4:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 80094c6:	e007      	b.n	80094d8 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 80094c8:	697b      	ldr	r3, [r7, #20]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	431a      	orrs	r2, r3
 80094d4:	697b      	ldr	r3, [r7, #20]
 80094d6:	601a      	str	r2, [r3, #0]
}
 80094d8:	bf00      	nop
 80094da:	371c      	adds	r7, #28
 80094dc:	46bd      	mov	sp, r7
 80094de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e2:	4770      	bx	lr
 80094e4:	58026000 	.word	0x58026000

080094e8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80094e8:	b480      	push	{r7}
 80094ea:	b083      	sub	sp, #12
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	68db      	ldr	r3, [r3, #12]
 80094f4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d101      	bne.n	8009500 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80094fc:	2301      	movs	r3, #1
 80094fe:	e000      	b.n	8009502 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8009500:	2300      	movs	r3, #0
}
 8009502:	4618      	mov	r0, r3
 8009504:	370c      	adds	r7, #12
 8009506:	46bd      	mov	sp, r7
 8009508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800950c:	4770      	bx	lr

0800950e <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800950e:	b480      	push	{r7}
 8009510:	b087      	sub	sp, #28
 8009512:	af00      	add	r7, sp, #0
 8009514:	60f8      	str	r0, [r7, #12]
 8009516:	60b9      	str	r1, [r7, #8]
 8009518:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	3330      	adds	r3, #48	@ 0x30
 800951e:	461a      	mov	r2, r3
 8009520:	68bb      	ldr	r3, [r7, #8]
 8009522:	0a1b      	lsrs	r3, r3, #8
 8009524:	009b      	lsls	r3, r3, #2
 8009526:	f003 030c 	and.w	r3, r3, #12
 800952a:	4413      	add	r3, r2
 800952c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800952e:	697b      	ldr	r3, [r7, #20]
 8009530:	681a      	ldr	r2, [r3, #0]
 8009532:	68bb      	ldr	r3, [r7, #8]
 8009534:	f003 031f 	and.w	r3, r3, #31
 8009538:	211f      	movs	r1, #31
 800953a:	fa01 f303 	lsl.w	r3, r1, r3
 800953e:	43db      	mvns	r3, r3
 8009540:	401a      	ands	r2, r3
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	0e9b      	lsrs	r3, r3, #26
 8009546:	f003 011f 	and.w	r1, r3, #31
 800954a:	68bb      	ldr	r3, [r7, #8]
 800954c:	f003 031f 	and.w	r3, r3, #31
 8009550:	fa01 f303 	lsl.w	r3, r1, r3
 8009554:	431a      	orrs	r2, r3
 8009556:	697b      	ldr	r3, [r7, #20]
 8009558:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800955a:	bf00      	nop
 800955c:	371c      	adds	r7, #28
 800955e:	46bd      	mov	sp, r7
 8009560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009564:	4770      	bx	lr

08009566 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8009566:	b480      	push	{r7}
 8009568:	b083      	sub	sp, #12
 800956a:	af00      	add	r7, sp, #0
 800956c:	6078      	str	r0, [r7, #4]
 800956e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	68db      	ldr	r3, [r3, #12]
 8009574:	f023 0203 	bic.w	r2, r3, #3
 8009578:	683b      	ldr	r3, [r7, #0]
 800957a:	431a      	orrs	r2, r3
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	60da      	str	r2, [r3, #12]
}
 8009580:	bf00      	nop
 8009582:	370c      	adds	r7, #12
 8009584:	46bd      	mov	sp, r7
 8009586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958a:	4770      	bx	lr

0800958c <LL_ADC_EnableDMAReq>:
  * @rmtoll CFGR     DMAEN          LL_ADC_REG_SetDMATransfer\n
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableDMAReq (ADC_TypeDef *ADCx)
{
 800958c:	b480      	push	{r7}
 800958e:	b083      	sub	sp, #12
 8009590:	af00      	add	r7, sp, #0
 8009592:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CFGR, ADC3_CFGR_DMAEN);
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	68db      	ldr	r3, [r3, #12]
 8009598:	f043 0201 	orr.w	r2, r3, #1
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	60da      	str	r2, [r3, #12]
}
 80095a0:	bf00      	nop
 80095a2:	370c      	adds	r7, #12
 80095a4:	46bd      	mov	sp, r7
 80095a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095aa:	4770      	bx	lr

080095ac <LL_ADC_REG_SetDMATransferMode>:
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_UNLIMITED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDMATransferMode(ADC_TypeDef *ADCx, uint32_t DMATransfer)
{
 80095ac:	b480      	push	{r7}
 80095ae:	b083      	sub	sp, #12
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	6078      	str	r0, [r7, #4]
 80095b4:	6039      	str	r1, [r7, #0]
  if (ADCx == ADC3)
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	4a08      	ldr	r2, [pc, #32]	@ (80095dc <LL_ADC_REG_SetDMATransferMode+0x30>)
 80095ba:	4293      	cmp	r3, r2
 80095bc:	d107      	bne.n	80095ce <LL_ADC_REG_SetDMATransferMode+0x22>
  {
    MODIFY_REG(ADCx->CFGR, ADC3_CFGR_DMAEN | ADC3_CFGR_DMACFG, DMATransfer);
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	68db      	ldr	r3, [r3, #12]
 80095c2:	f023 0203 	bic.w	r2, r3, #3
 80095c6:	683b      	ldr	r3, [r7, #0]
 80095c8:	431a      	orrs	r2, r3
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	60da      	str	r2, [r3, #12]
  }
}
 80095ce:	bf00      	nop
 80095d0:	370c      	adds	r7, #12
 80095d2:	46bd      	mov	sp, r7
 80095d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d8:	4770      	bx	lr
 80095da:	bf00      	nop
 80095dc:	58026000 	.word	0x58026000

080095e0 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80095e0:	b480      	push	{r7}
 80095e2:	b083      	sub	sp, #12
 80095e4:	af00      	add	r7, sp, #0
 80095e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80095ec:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d101      	bne.n	80095f8 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80095f4:	2301      	movs	r3, #1
 80095f6:	e000      	b.n	80095fa <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80095f8:	2300      	movs	r3, #0
}
 80095fa:	4618      	mov	r0, r3
 80095fc:	370c      	adds	r7, #12
 80095fe:	46bd      	mov	sp, r7
 8009600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009604:	4770      	bx	lr

08009606 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8009606:	b480      	push	{r7}
 8009608:	b087      	sub	sp, #28
 800960a:	af00      	add	r7, sp, #0
 800960c:	60f8      	str	r0, [r7, #12]
 800960e:	60b9      	str	r1, [r7, #8]
 8009610:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	3314      	adds	r3, #20
 8009616:	461a      	mov	r2, r3
 8009618:	68bb      	ldr	r3, [r7, #8]
 800961a:	0e5b      	lsrs	r3, r3, #25
 800961c:	009b      	lsls	r3, r3, #2
 800961e:	f003 0304 	and.w	r3, r3, #4
 8009622:	4413      	add	r3, r2
 8009624:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8009626:	697b      	ldr	r3, [r7, #20]
 8009628:	681a      	ldr	r2, [r3, #0]
 800962a:	68bb      	ldr	r3, [r7, #8]
 800962c:	0d1b      	lsrs	r3, r3, #20
 800962e:	f003 031f 	and.w	r3, r3, #31
 8009632:	2107      	movs	r1, #7
 8009634:	fa01 f303 	lsl.w	r3, r1, r3
 8009638:	43db      	mvns	r3, r3
 800963a:	401a      	ands	r2, r3
 800963c:	68bb      	ldr	r3, [r7, #8]
 800963e:	0d1b      	lsrs	r3, r3, #20
 8009640:	f003 031f 	and.w	r3, r3, #31
 8009644:	6879      	ldr	r1, [r7, #4]
 8009646:	fa01 f303 	lsl.w	r3, r1, r3
 800964a:	431a      	orrs	r2, r3
 800964c:	697b      	ldr	r3, [r7, #20]
 800964e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8009650:	bf00      	nop
 8009652:	371c      	adds	r7, #28
 8009654:	46bd      	mov	sp, r7
 8009656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800965a:	4770      	bx	lr

0800965c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800965c:	b480      	push	{r7}
 800965e:	b085      	sub	sp, #20
 8009660:	af00      	add	r7, sp, #0
 8009662:	60f8      	str	r0, [r7, #12]
 8009664:	60b9      	str	r1, [r7, #8]
 8009666:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	4a1a      	ldr	r2, [pc, #104]	@ (80096d4 <LL_ADC_SetChannelSingleDiff+0x78>)
 800966c:	4293      	cmp	r3, r2
 800966e:	d115      	bne.n	800969c <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8009676:	68bb      	ldr	r3, [r7, #8]
 8009678:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800967c:	43db      	mvns	r3, r3
 800967e:	401a      	ands	r2, r3
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	f003 0318 	and.w	r3, r3, #24
 8009686:	4914      	ldr	r1, [pc, #80]	@ (80096d8 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8009688:	40d9      	lsrs	r1, r3
 800968a:	68bb      	ldr	r3, [r7, #8]
 800968c:	400b      	ands	r3, r1
 800968e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009692:	431a      	orrs	r2, r3
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 800969a:	e014      	b.n	80096c6 <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 80096a2:	68bb      	ldr	r3, [r7, #8]
 80096a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80096a8:	43db      	mvns	r3, r3
 80096aa:	401a      	ands	r2, r3
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	f003 0318 	and.w	r3, r3, #24
 80096b2:	4909      	ldr	r1, [pc, #36]	@ (80096d8 <LL_ADC_SetChannelSingleDiff+0x7c>)
 80096b4:	40d9      	lsrs	r1, r3
 80096b6:	68bb      	ldr	r3, [r7, #8]
 80096b8:	400b      	ands	r3, r1
 80096ba:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80096be:	431a      	orrs	r2, r3
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
}
 80096c6:	bf00      	nop
 80096c8:	3714      	adds	r7, #20
 80096ca:	46bd      	mov	sp, r7
 80096cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d0:	4770      	bx	lr
 80096d2:	bf00      	nop
 80096d4:	58026000 	.word	0x58026000
 80096d8:	000fffff 	.word	0x000fffff

080096dc <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80096dc:	b480      	push	{r7}
 80096de:	b083      	sub	sp, #12
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	689b      	ldr	r3, [r3, #8]
 80096e8:	f003 031f 	and.w	r3, r3, #31
}
 80096ec:	4618      	mov	r0, r3
 80096ee:	370c      	adds	r7, #12
 80096f0:	46bd      	mov	sp, r7
 80096f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f6:	4770      	bx	lr

080096f8 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80096f8:	b480      	push	{r7}
 80096fa:	b083      	sub	sp, #12
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	689b      	ldr	r3, [r3, #8]
 8009704:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 8009708:	4618      	mov	r0, r3
 800970a:	370c      	adds	r7, #12
 800970c:	46bd      	mov	sp, r7
 800970e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009712:	4770      	bx	lr

08009714 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8009714:	b480      	push	{r7}
 8009716:	b083      	sub	sp, #12
 8009718:	af00      	add	r7, sp, #0
 800971a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	689a      	ldr	r2, [r3, #8]
 8009720:	4b04      	ldr	r3, [pc, #16]	@ (8009734 <LL_ADC_DisableDeepPowerDown+0x20>)
 8009722:	4013      	ands	r3, r2
 8009724:	687a      	ldr	r2, [r7, #4]
 8009726:	6093      	str	r3, [r2, #8]
}
 8009728:	bf00      	nop
 800972a:	370c      	adds	r7, #12
 800972c:	46bd      	mov	sp, r7
 800972e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009732:	4770      	bx	lr
 8009734:	5fffffc0 	.word	0x5fffffc0

08009738 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8009738:	b480      	push	{r7}
 800973a:	b083      	sub	sp, #12
 800973c:	af00      	add	r7, sp, #0
 800973e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	689b      	ldr	r3, [r3, #8]
 8009744:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009748:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800974c:	d101      	bne.n	8009752 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800974e:	2301      	movs	r3, #1
 8009750:	e000      	b.n	8009754 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8009752:	2300      	movs	r3, #0
}
 8009754:	4618      	mov	r0, r3
 8009756:	370c      	adds	r7, #12
 8009758:	46bd      	mov	sp, r7
 800975a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800975e:	4770      	bx	lr

08009760 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8009760:	b480      	push	{r7}
 8009762:	b083      	sub	sp, #12
 8009764:	af00      	add	r7, sp, #0
 8009766:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	689a      	ldr	r2, [r3, #8]
 800976c:	4b05      	ldr	r3, [pc, #20]	@ (8009784 <LL_ADC_EnableInternalRegulator+0x24>)
 800976e:	4013      	ands	r3, r2
 8009770:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8009778:	bf00      	nop
 800977a:	370c      	adds	r7, #12
 800977c:	46bd      	mov	sp, r7
 800977e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009782:	4770      	bx	lr
 8009784:	6fffffc0 	.word	0x6fffffc0

08009788 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8009788:	b480      	push	{r7}
 800978a:	b083      	sub	sp, #12
 800978c:	af00      	add	r7, sp, #0
 800978e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	689b      	ldr	r3, [r3, #8]
 8009794:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009798:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800979c:	d101      	bne.n	80097a2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800979e:	2301      	movs	r3, #1
 80097a0:	e000      	b.n	80097a4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80097a2:	2300      	movs	r3, #0
}
 80097a4:	4618      	mov	r0, r3
 80097a6:	370c      	adds	r7, #12
 80097a8:	46bd      	mov	sp, r7
 80097aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ae:	4770      	bx	lr

080097b0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80097b0:	b480      	push	{r7}
 80097b2:	b083      	sub	sp, #12
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	689a      	ldr	r2, [r3, #8]
 80097bc:	4b05      	ldr	r3, [pc, #20]	@ (80097d4 <LL_ADC_Enable+0x24>)
 80097be:	4013      	ands	r3, r2
 80097c0:	f043 0201 	orr.w	r2, r3, #1
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80097c8:	bf00      	nop
 80097ca:	370c      	adds	r7, #12
 80097cc:	46bd      	mov	sp, r7
 80097ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d2:	4770      	bx	lr
 80097d4:	7fffffc0 	.word	0x7fffffc0

080097d8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80097d8:	b480      	push	{r7}
 80097da:	b083      	sub	sp, #12
 80097dc:	af00      	add	r7, sp, #0
 80097de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	689b      	ldr	r3, [r3, #8]
 80097e4:	f003 0301 	and.w	r3, r3, #1
 80097e8:	2b01      	cmp	r3, #1
 80097ea:	d101      	bne.n	80097f0 <LL_ADC_IsEnabled+0x18>
 80097ec:	2301      	movs	r3, #1
 80097ee:	e000      	b.n	80097f2 <LL_ADC_IsEnabled+0x1a>
 80097f0:	2300      	movs	r3, #0
}
 80097f2:	4618      	mov	r0, r3
 80097f4:	370c      	adds	r7, #12
 80097f6:	46bd      	mov	sp, r7
 80097f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097fc:	4770      	bx	lr
	...

08009800 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8009800:	b480      	push	{r7}
 8009802:	b083      	sub	sp, #12
 8009804:	af00      	add	r7, sp, #0
 8009806:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	689a      	ldr	r2, [r3, #8]
 800980c:	4b05      	ldr	r3, [pc, #20]	@ (8009824 <LL_ADC_REG_StartConversion+0x24>)
 800980e:	4013      	ands	r3, r2
 8009810:	f043 0204 	orr.w	r2, r3, #4
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8009818:	bf00      	nop
 800981a:	370c      	adds	r7, #12
 800981c:	46bd      	mov	sp, r7
 800981e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009822:	4770      	bx	lr
 8009824:	7fffffc0 	.word	0x7fffffc0

08009828 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8009828:	b480      	push	{r7}
 800982a:	b083      	sub	sp, #12
 800982c:	af00      	add	r7, sp, #0
 800982e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	689b      	ldr	r3, [r3, #8]
 8009834:	f003 0304 	and.w	r3, r3, #4
 8009838:	2b04      	cmp	r3, #4
 800983a:	d101      	bne.n	8009840 <LL_ADC_REG_IsConversionOngoing+0x18>
 800983c:	2301      	movs	r3, #1
 800983e:	e000      	b.n	8009842 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8009840:	2300      	movs	r3, #0
}
 8009842:	4618      	mov	r0, r3
 8009844:	370c      	adds	r7, #12
 8009846:	46bd      	mov	sp, r7
 8009848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800984c:	4770      	bx	lr

0800984e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800984e:	b480      	push	{r7}
 8009850:	b083      	sub	sp, #12
 8009852:	af00      	add	r7, sp, #0
 8009854:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	689b      	ldr	r3, [r3, #8]
 800985a:	f003 0308 	and.w	r3, r3, #8
 800985e:	2b08      	cmp	r3, #8
 8009860:	d101      	bne.n	8009866 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8009862:	2301      	movs	r3, #1
 8009864:	e000      	b.n	8009868 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8009866:	2300      	movs	r3, #0
}
 8009868:	4618      	mov	r0, r3
 800986a:	370c      	adds	r7, #12
 800986c:	46bd      	mov	sp, r7
 800986e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009872:	4770      	bx	lr

08009874 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8009874:	b590      	push	{r4, r7, lr}
 8009876:	b089      	sub	sp, #36	@ 0x24
 8009878:	af00      	add	r7, sp, #0
 800987a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800987c:	2300      	movs	r3, #0
 800987e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8009880:	2300      	movs	r3, #0
 8009882:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	2b00      	cmp	r3, #0
 8009888:	d101      	bne.n	800988e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800988a:	2301      	movs	r3, #1
 800988c:	e1ee      	b.n	8009c6c <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	691b      	ldr	r3, [r3, #16]
 8009892:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009898:	2b00      	cmp	r3, #0
 800989a:	d109      	bne.n	80098b0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800989c:	6878      	ldr	r0, [r7, #4]
 800989e:	f7f9 fea3 	bl	80035e8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	2200      	movs	r2, #0
 80098a6:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	2200      	movs	r2, #0
 80098ac:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	4618      	mov	r0, r3
 80098b6:	f7ff ff3f 	bl	8009738 <LL_ADC_IsDeepPowerDownEnabled>
 80098ba:	4603      	mov	r3, r0
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d004      	beq.n	80098ca <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	4618      	mov	r0, r3
 80098c6:	f7ff ff25 	bl	8009714 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	4618      	mov	r0, r3
 80098d0:	f7ff ff5a 	bl	8009788 <LL_ADC_IsInternalRegulatorEnabled>
 80098d4:	4603      	mov	r3, r0
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d114      	bne.n	8009904 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	4618      	mov	r0, r3
 80098e0:	f7ff ff3e 	bl	8009760 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80098e4:	4b8e      	ldr	r3, [pc, #568]	@ (8009b20 <HAL_ADC_Init+0x2ac>)
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	099b      	lsrs	r3, r3, #6
 80098ea:	4a8e      	ldr	r2, [pc, #568]	@ (8009b24 <HAL_ADC_Init+0x2b0>)
 80098ec:	fba2 2303 	umull	r2, r3, r2, r3
 80098f0:	099b      	lsrs	r3, r3, #6
 80098f2:	3301      	adds	r3, #1
 80098f4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80098f6:	e002      	b.n	80098fe <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80098f8:	68bb      	ldr	r3, [r7, #8]
 80098fa:	3b01      	subs	r3, #1
 80098fc:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80098fe:	68bb      	ldr	r3, [r7, #8]
 8009900:	2b00      	cmp	r3, #0
 8009902:	d1f9      	bne.n	80098f8 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	4618      	mov	r0, r3
 800990a:	f7ff ff3d 	bl	8009788 <LL_ADC_IsInternalRegulatorEnabled>
 800990e:	4603      	mov	r3, r0
 8009910:	2b00      	cmp	r3, #0
 8009912:	d10d      	bne.n	8009930 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009918:	f043 0210 	orr.w	r2, r3, #16
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009924:	f043 0201 	orr.w	r2, r3, #1
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	665a      	str	r2, [r3, #100]	@ 0x64

    tmp_hal_status = HAL_ERROR;
 800992c:	2301      	movs	r3, #1
 800992e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	4618      	mov	r0, r3
 8009936:	f7ff ff77 	bl	8009828 <LL_ADC_REG_IsConversionOngoing>
 800993a:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009940:	f003 0310 	and.w	r3, r3, #16
 8009944:	2b00      	cmp	r3, #0
 8009946:	f040 8188 	bne.w	8009c5a <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800994a:	697b      	ldr	r3, [r7, #20]
 800994c:	2b00      	cmp	r3, #0
 800994e:	f040 8184 	bne.w	8009c5a <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009956:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800995a:	f043 0202 	orr.w	r2, r3, #2
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	4618      	mov	r0, r3
 8009968:	f7ff ff36 	bl	80097d8 <LL_ADC_IsEnabled>
 800996c:	4603      	mov	r3, r0
 800996e:	2b00      	cmp	r3, #0
 8009970:	d136      	bne.n	80099e0 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	4a6c      	ldr	r2, [pc, #432]	@ (8009b28 <HAL_ADC_Init+0x2b4>)
 8009978:	4293      	cmp	r3, r2
 800997a:	d004      	beq.n	8009986 <HAL_ADC_Init+0x112>
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	4a6a      	ldr	r2, [pc, #424]	@ (8009b2c <HAL_ADC_Init+0x2b8>)
 8009982:	4293      	cmp	r3, r2
 8009984:	d10e      	bne.n	80099a4 <HAL_ADC_Init+0x130>
 8009986:	4868      	ldr	r0, [pc, #416]	@ (8009b28 <HAL_ADC_Init+0x2b4>)
 8009988:	f7ff ff26 	bl	80097d8 <LL_ADC_IsEnabled>
 800998c:	4604      	mov	r4, r0
 800998e:	4867      	ldr	r0, [pc, #412]	@ (8009b2c <HAL_ADC_Init+0x2b8>)
 8009990:	f7ff ff22 	bl	80097d8 <LL_ADC_IsEnabled>
 8009994:	4603      	mov	r3, r0
 8009996:	4323      	orrs	r3, r4
 8009998:	2b00      	cmp	r3, #0
 800999a:	bf0c      	ite	eq
 800999c:	2301      	moveq	r3, #1
 800999e:	2300      	movne	r3, #0
 80099a0:	b2db      	uxtb	r3, r3
 80099a2:	e008      	b.n	80099b6 <HAL_ADC_Init+0x142>
 80099a4:	4862      	ldr	r0, [pc, #392]	@ (8009b30 <HAL_ADC_Init+0x2bc>)
 80099a6:	f7ff ff17 	bl	80097d8 <LL_ADC_IsEnabled>
 80099aa:	4603      	mov	r3, r0
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	bf0c      	ite	eq
 80099b0:	2301      	moveq	r3, #1
 80099b2:	2300      	movne	r3, #0
 80099b4:	b2db      	uxtb	r3, r3
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d012      	beq.n	80099e0 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	4a5a      	ldr	r2, [pc, #360]	@ (8009b28 <HAL_ADC_Init+0x2b4>)
 80099c0:	4293      	cmp	r3, r2
 80099c2:	d004      	beq.n	80099ce <HAL_ADC_Init+0x15a>
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	4a58      	ldr	r2, [pc, #352]	@ (8009b2c <HAL_ADC_Init+0x2b8>)
 80099ca:	4293      	cmp	r3, r2
 80099cc:	d101      	bne.n	80099d2 <HAL_ADC_Init+0x15e>
 80099ce:	4a59      	ldr	r2, [pc, #356]	@ (8009b34 <HAL_ADC_Init+0x2c0>)
 80099d0:	e000      	b.n	80099d4 <HAL_ADC_Init+0x160>
 80099d2:	4a59      	ldr	r2, [pc, #356]	@ (8009b38 <HAL_ADC_Init+0x2c4>)
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	685b      	ldr	r3, [r3, #4]
 80099d8:	4619      	mov	r1, r3
 80099da:	4610      	mov	r0, r2
 80099dc:	f7ff fc5e 	bl	800929c <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	4a52      	ldr	r2, [pc, #328]	@ (8009b30 <HAL_ADC_Init+0x2bc>)
 80099e6:	4293      	cmp	r3, r2
 80099e8:	d129      	bne.n	8009a3e <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	7e5b      	ldrb	r3, [r3, #25]
 80099ee:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80099f4:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 80099fa:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	689b      	ldr	r3, [r3, #8]
 8009a00:	2b08      	cmp	r3, #8
 8009a02:	d013      	beq.n	8009a2c <HAL_ADC_Init+0x1b8>
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	689b      	ldr	r3, [r3, #8]
 8009a08:	2b0c      	cmp	r3, #12
 8009a0a:	d00d      	beq.n	8009a28 <HAL_ADC_Init+0x1b4>
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	689b      	ldr	r3, [r3, #8]
 8009a10:	2b1c      	cmp	r3, #28
 8009a12:	d007      	beq.n	8009a24 <HAL_ADC_Init+0x1b0>
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	689b      	ldr	r3, [r3, #8]
 8009a18:	2b18      	cmp	r3, #24
 8009a1a:	d101      	bne.n	8009a20 <HAL_ADC_Init+0x1ac>
 8009a1c:	2318      	movs	r3, #24
 8009a1e:	e006      	b.n	8009a2e <HAL_ADC_Init+0x1ba>
 8009a20:	2300      	movs	r3, #0
 8009a22:	e004      	b.n	8009a2e <HAL_ADC_Init+0x1ba>
 8009a24:	2310      	movs	r3, #16
 8009a26:	e002      	b.n	8009a2e <HAL_ADC_Init+0x1ba>
 8009a28:	2308      	movs	r3, #8
 8009a2a:	e000      	b.n	8009a2e <HAL_ADC_Init+0x1ba>
 8009a2c:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 8009a2e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009a36:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8009a38:	4313      	orrs	r3, r2
 8009a3a:	61bb      	str	r3, [r7, #24]
 8009a3c:	e00e      	b.n	8009a5c <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	7e5b      	ldrb	r3, [r3, #25]
 8009a42:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8009a48:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8009a4e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009a56:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8009a58:	4313      	orrs	r3, r2
 8009a5a:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009a62:	2b01      	cmp	r3, #1
 8009a64:	d106      	bne.n	8009a74 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a6a:	3b01      	subs	r3, #1
 8009a6c:	045b      	lsls	r3, r3, #17
 8009a6e:	69ba      	ldr	r2, [r7, #24]
 8009a70:	4313      	orrs	r3, r2
 8009a72:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d009      	beq.n	8009a90 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a80:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a88:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8009a8a:	69ba      	ldr	r2, [r7, #24]
 8009a8c:	4313      	orrs	r3, r2
 8009a8e:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	4a26      	ldr	r2, [pc, #152]	@ (8009b30 <HAL_ADC_Init+0x2bc>)
 8009a96:	4293      	cmp	r3, r2
 8009a98:	d115      	bne.n	8009ac6 <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	68da      	ldr	r2, [r3, #12]
 8009aa0:	4b26      	ldr	r3, [pc, #152]	@ (8009b3c <HAL_ADC_Init+0x2c8>)
 8009aa2:	4013      	ands	r3, r2
 8009aa4:	687a      	ldr	r2, [r7, #4]
 8009aa6:	6812      	ldr	r2, [r2, #0]
 8009aa8:	69b9      	ldr	r1, [r7, #24]
 8009aaa:	430b      	orrs	r3, r1
 8009aac:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	691b      	ldr	r3, [r3, #16]
 8009ab4:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	430a      	orrs	r2, r1
 8009ac2:	611a      	str	r2, [r3, #16]
 8009ac4:	e009      	b.n	8009ada <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	68da      	ldr	r2, [r3, #12]
 8009acc:	4b1c      	ldr	r3, [pc, #112]	@ (8009b40 <HAL_ADC_Init+0x2cc>)
 8009ace:	4013      	ands	r3, r2
 8009ad0:	687a      	ldr	r2, [r7, #4]
 8009ad2:	6812      	ldr	r2, [r2, #0]
 8009ad4:	69b9      	ldr	r1, [r7, #24]
 8009ad6:	430b      	orrs	r3, r1
 8009ad8:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	4618      	mov	r0, r3
 8009ae0:	f7ff fea2 	bl	8009828 <LL_ADC_REG_IsConversionOngoing>
 8009ae4:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	4618      	mov	r0, r3
 8009aec:	f7ff feaf 	bl	800984e <LL_ADC_INJ_IsConversionOngoing>
 8009af0:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8009af2:	693b      	ldr	r3, [r7, #16]
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	f040 808e 	bne.w	8009c16 <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	f040 808a 	bne.w	8009c16 <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	4a0a      	ldr	r2, [pc, #40]	@ (8009b30 <HAL_ADC_Init+0x2bc>)
 8009b08:	4293      	cmp	r3, r2
 8009b0a:	d11b      	bne.n	8009b44 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	7e1b      	ldrb	r3, [r3, #24]
 8009b10:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8009b18:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 8009b1a:	4313      	orrs	r3, r2
 8009b1c:	61bb      	str	r3, [r7, #24]
 8009b1e:	e018      	b.n	8009b52 <HAL_ADC_Init+0x2de>
 8009b20:	24000004 	.word	0x24000004
 8009b24:	053e2d63 	.word	0x053e2d63
 8009b28:	40022000 	.word	0x40022000
 8009b2c:	40022100 	.word	0x40022100
 8009b30:	58026000 	.word	0x58026000
 8009b34:	40022300 	.word	0x40022300
 8009b38:	58026300 	.word	0x58026300
 8009b3c:	fff04007 	.word	0xfff04007
 8009b40:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	7e1b      	ldrb	r3, [r3, #24]
 8009b48:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        tmpCFGR = (
 8009b4e:	4313      	orrs	r3, r2
 8009b50:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	68da      	ldr	r2, [r3, #12]
 8009b58:	4b46      	ldr	r3, [pc, #280]	@ (8009c74 <HAL_ADC_Init+0x400>)
 8009b5a:	4013      	ands	r3, r2
 8009b5c:	687a      	ldr	r2, [r7, #4]
 8009b5e:	6812      	ldr	r2, [r2, #0]
 8009b60:	69b9      	ldr	r1, [r7, #24]
 8009b62:	430b      	orrs	r3, r1
 8009b64:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009b6c:	2b01      	cmp	r3, #1
 8009b6e:	d137      	bne.n	8009be0 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b74:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	4a3f      	ldr	r2, [pc, #252]	@ (8009c78 <HAL_ADC_Init+0x404>)
 8009b7c:	4293      	cmp	r3, r2
 8009b7e:	d116      	bne.n	8009bae <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	691a      	ldr	r2, [r3, #16]
 8009b86:	4b3d      	ldr	r3, [pc, #244]	@ (8009c7c <HAL_ADC_Init+0x408>)
 8009b88:	4013      	ands	r3, r2
 8009b8a:	687a      	ldr	r2, [r7, #4]
 8009b8c:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 8009b8e:	687a      	ldr	r2, [r7, #4]
 8009b90:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8009b92:	4311      	orrs	r1, r2
 8009b94:	687a      	ldr	r2, [r7, #4]
 8009b96:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8009b98:	4311      	orrs	r1, r2
 8009b9a:	687a      	ldr	r2, [r7, #4]
 8009b9c:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8009b9e:	430a      	orrs	r2, r1
 8009ba0:	431a      	orrs	r2, r3
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	f042 0201 	orr.w	r2, r2, #1
 8009baa:	611a      	str	r2, [r3, #16]
 8009bac:	e020      	b.n	8009bf0 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	691a      	ldr	r2, [r3, #16]
 8009bb4:	4b32      	ldr	r3, [pc, #200]	@ (8009c80 <HAL_ADC_Init+0x40c>)
 8009bb6:	4013      	ands	r3, r2
 8009bb8:	687a      	ldr	r2, [r7, #4]
 8009bba:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8009bbc:	3a01      	subs	r2, #1
 8009bbe:	0411      	lsls	r1, r2, #16
 8009bc0:	687a      	ldr	r2, [r7, #4]
 8009bc2:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8009bc4:	4311      	orrs	r1, r2
 8009bc6:	687a      	ldr	r2, [r7, #4]
 8009bc8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8009bca:	4311      	orrs	r1, r2
 8009bcc:	687a      	ldr	r2, [r7, #4]
 8009bce:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8009bd0:	430a      	orrs	r2, r1
 8009bd2:	431a      	orrs	r2, r3
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	f042 0201 	orr.w	r2, r2, #1
 8009bdc:	611a      	str	r2, [r3, #16]
 8009bde:	e007      	b.n	8009bf0 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	691a      	ldr	r2, [r3, #16]
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	f022 0201 	bic.w	r2, r2, #1
 8009bee:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	691b      	ldr	r3, [r3, #16]
 8009bf6:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	430a      	orrs	r2, r1
 8009c04:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	4a1b      	ldr	r2, [pc, #108]	@ (8009c78 <HAL_ADC_Init+0x404>)
 8009c0c:	4293      	cmp	r3, r2
 8009c0e:	d002      	beq.n	8009c16 <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8009c10:	6878      	ldr	r0, [r7, #4]
 8009c12:	f001 f9c3 	bl	800af9c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	691b      	ldr	r3, [r3, #16]
 8009c1a:	2b01      	cmp	r3, #1
 8009c1c:	d10c      	bne.n	8009c38 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c24:	f023 010f 	bic.w	r1, r3, #15
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	69db      	ldr	r3, [r3, #28]
 8009c2c:	1e5a      	subs	r2, r3, #1
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	430a      	orrs	r2, r1
 8009c34:	631a      	str	r2, [r3, #48]	@ 0x30
 8009c36:	e007      	b.n	8009c48 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	f022 020f 	bic.w	r2, r2, #15
 8009c46:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009c4c:	f023 0303 	bic.w	r3, r3, #3
 8009c50:	f043 0201 	orr.w	r2, r3, #1
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	661a      	str	r2, [r3, #96]	@ 0x60
 8009c58:	e007      	b.n	8009c6a <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009c5e:	f043 0210 	orr.w	r2, r3, #16
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8009c66:	2301      	movs	r3, #1
 8009c68:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8009c6a:	7ffb      	ldrb	r3, [r7, #31]
}
 8009c6c:	4618      	mov	r0, r3
 8009c6e:	3724      	adds	r7, #36	@ 0x24
 8009c70:	46bd      	mov	sp, r7
 8009c72:	bd90      	pop	{r4, r7, pc}
 8009c74:	ffffbffc 	.word	0xffffbffc
 8009c78:	58026000 	.word	0x58026000
 8009c7c:	fc00f81f 	.word	0xfc00f81f
 8009c80:	fc00f81e 	.word	0xfc00f81e

08009c84 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8009c84:	b580      	push	{r7, lr}
 8009c86:	b086      	sub	sp, #24
 8009c88:	af00      	add	r7, sp, #0
 8009c8a:	60f8      	str	r0, [r7, #12]
 8009c8c:	60b9      	str	r1, [r7, #8]
 8009c8e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	4a60      	ldr	r2, [pc, #384]	@ (8009e18 <HAL_ADC_Start_DMA+0x194>)
 8009c96:	4293      	cmp	r3, r2
 8009c98:	d004      	beq.n	8009ca4 <HAL_ADC_Start_DMA+0x20>
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	4a5f      	ldr	r2, [pc, #380]	@ (8009e1c <HAL_ADC_Start_DMA+0x198>)
 8009ca0:	4293      	cmp	r3, r2
 8009ca2:	d101      	bne.n	8009ca8 <HAL_ADC_Start_DMA+0x24>
 8009ca4:	4b5e      	ldr	r3, [pc, #376]	@ (8009e20 <HAL_ADC_Start_DMA+0x19c>)
 8009ca6:	e000      	b.n	8009caa <HAL_ADC_Start_DMA+0x26>
 8009ca8:	4b5e      	ldr	r3, [pc, #376]	@ (8009e24 <HAL_ADC_Start_DMA+0x1a0>)
 8009caa:	4618      	mov	r0, r3
 8009cac:	f7ff fd16 	bl	80096dc <LL_ADC_GetMultimode>
 8009cb0:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	4618      	mov	r0, r3
 8009cb8:	f7ff fdb6 	bl	8009828 <LL_ADC_REG_IsConversionOngoing>
 8009cbc:	4603      	mov	r3, r0
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	f040 80a2 	bne.w	8009e08 <HAL_ADC_Start_DMA+0x184>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8009cca:	2b01      	cmp	r3, #1
 8009ccc:	d101      	bne.n	8009cd2 <HAL_ADC_Start_DMA+0x4e>
 8009cce:	2302      	movs	r3, #2
 8009cd0:	e09d      	b.n	8009e0e <HAL_ADC_Start_DMA+0x18a>
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	2201      	movs	r2, #1
 8009cd6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8009cda:	693b      	ldr	r3, [r7, #16]
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d006      	beq.n	8009cee <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8009ce0:	693b      	ldr	r3, [r7, #16]
 8009ce2:	2b05      	cmp	r3, #5
 8009ce4:	d003      	beq.n	8009cee <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8009ce6:	693b      	ldr	r3, [r7, #16]
 8009ce8:	2b09      	cmp	r3, #9
 8009cea:	f040 8086 	bne.w	8009dfa <HAL_ADC_Start_DMA+0x176>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8009cee:	68f8      	ldr	r0, [r7, #12]
 8009cf0:	f001 f836 	bl	800ad60 <ADC_Enable>
 8009cf4:	4603      	mov	r3, r0
 8009cf6:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8009cf8:	7dfb      	ldrb	r3, [r7, #23]
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d178      	bne.n	8009df0 <HAL_ADC_Start_DMA+0x16c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8009d02:	4b49      	ldr	r3, [pc, #292]	@ (8009e28 <HAL_ADC_Start_DMA+0x1a4>)
 8009d04:	4013      	ands	r3, r2
 8009d06:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	661a      	str	r2, [r3, #96]	@ 0x60
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	4a42      	ldr	r2, [pc, #264]	@ (8009e1c <HAL_ADC_Start_DMA+0x198>)
 8009d14:	4293      	cmp	r3, r2
 8009d16:	d002      	beq.n	8009d1e <HAL_ADC_Start_DMA+0x9a>
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	e000      	b.n	8009d20 <HAL_ADC_Start_DMA+0x9c>
 8009d1e:	4b3e      	ldr	r3, [pc, #248]	@ (8009e18 <HAL_ADC_Start_DMA+0x194>)
 8009d20:	68fa      	ldr	r2, [r7, #12]
 8009d22:	6812      	ldr	r2, [r2, #0]
 8009d24:	4293      	cmp	r3, r2
 8009d26:	d002      	beq.n	8009d2e <HAL_ADC_Start_DMA+0xaa>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8009d28:	693b      	ldr	r3, [r7, #16]
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d105      	bne.n	8009d3a <HAL_ADC_Start_DMA+0xb6>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009d32:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009d3e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d006      	beq.n	8009d54 <HAL_ADC_Start_DMA+0xd0>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009d4a:	f023 0206 	bic.w	r2, r3, #6
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	665a      	str	r2, [r3, #100]	@ 0x64
 8009d52:	e002      	b.n	8009d5a <HAL_ADC_Start_DMA+0xd6>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	2200      	movs	r2, #0
 8009d58:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009d5e:	4a33      	ldr	r2, [pc, #204]	@ (8009e2c <HAL_ADC_Start_DMA+0x1a8>)
 8009d60:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009d66:	4a32      	ldr	r2, [pc, #200]	@ (8009e30 <HAL_ADC_Start_DMA+0x1ac>)
 8009d68:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009d6e:	4a31      	ldr	r2, [pc, #196]	@ (8009e34 <HAL_ADC_Start_DMA+0x1b0>)
 8009d70:	64da      	str	r2, [r3, #76]	@ 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	221c      	movs	r2, #28
 8009d78:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	2200      	movs	r2, #0
 8009d7e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	685a      	ldr	r2, [r3, #4]
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	f042 0210 	orr.w	r2, r2, #16
 8009d90:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA  mode*/
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	4a28      	ldr	r2, [pc, #160]	@ (8009e38 <HAL_ADC_Start_DMA+0x1b4>)
 8009d98:	4293      	cmp	r3, r2
 8009d9a:	d10f      	bne.n	8009dbc <HAL_ADC_Start_DMA+0x138>
        {
          LL_ADC_REG_SetDMATransferMode(hadc->Instance, ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	681a      	ldr	r2, [r3, #0]
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8009da6:	005b      	lsls	r3, r3, #1
 8009da8:	4619      	mov	r1, r3
 8009daa:	4610      	mov	r0, r2
 8009dac:	f7ff fbfe 	bl	80095ac <LL_ADC_REG_SetDMATransferMode>
          LL_ADC_EnableDMAReq(hadc->Instance);
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	4618      	mov	r0, r3
 8009db6:	f7ff fbe9 	bl	800958c <LL_ADC_EnableDMAReq>
 8009dba:	e007      	b.n	8009dcc <HAL_ADC_Start_DMA+0x148>
        }
        else
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	681a      	ldr	r2, [r3, #0]
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009dc4:	4619      	mov	r1, r3
 8009dc6:	4610      	mov	r0, r2
 8009dc8:	f7ff fbcd 	bl	8009566 <LL_ADC_REG_SetDataTransferMode>
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	3340      	adds	r3, #64	@ 0x40
 8009dd6:	4619      	mov	r1, r3
 8009dd8:	68ba      	ldr	r2, [r7, #8]
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	f001 fede 	bl	800bb9c <HAL_DMA_Start_IT>
 8009de0:	4603      	mov	r3, r0
 8009de2:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	4618      	mov	r0, r3
 8009dea:	f7ff fd09 	bl	8009800 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8009dee:	e00d      	b.n	8009e0c <HAL_ADC_Start_DMA+0x188>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	2200      	movs	r2, #0
 8009df4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
      if (tmp_hal_status == HAL_OK)
 8009df8:	e008      	b.n	8009e0c <HAL_ADC_Start_DMA+0x188>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8009dfa:	2301      	movs	r3, #1
 8009dfc:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	2200      	movs	r2, #0
 8009e02:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 8009e06:	e001      	b.n	8009e0c <HAL_ADC_Start_DMA+0x188>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8009e08:	2302      	movs	r3, #2
 8009e0a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8009e0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e0e:	4618      	mov	r0, r3
 8009e10:	3718      	adds	r7, #24
 8009e12:	46bd      	mov	sp, r7
 8009e14:	bd80      	pop	{r7, pc}
 8009e16:	bf00      	nop
 8009e18:	40022000 	.word	0x40022000
 8009e1c:	40022100 	.word	0x40022100
 8009e20:	40022300 	.word	0x40022300
 8009e24:	58026300 	.word	0x58026300
 8009e28:	fffff0fe 	.word	0xfffff0fe
 8009e2c:	0800ae75 	.word	0x0800ae75
 8009e30:	0800af4d 	.word	0x0800af4d
 8009e34:	0800af69 	.word	0x0800af69
 8009e38:	58026000 	.word	0x58026000

08009e3c <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8009e3c:	b580      	push	{r7, lr}
 8009e3e:	b08a      	sub	sp, #40	@ 0x28
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8009e44:	2300      	movs	r3, #0
 8009e46:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	685b      	ldr	r3, [r3, #4]
 8009e56:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	4a87      	ldr	r2, [pc, #540]	@ (800a07c <HAL_ADC_IRQHandler+0x240>)
 8009e5e:	4293      	cmp	r3, r2
 8009e60:	d004      	beq.n	8009e6c <HAL_ADC_IRQHandler+0x30>
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	4a86      	ldr	r2, [pc, #536]	@ (800a080 <HAL_ADC_IRQHandler+0x244>)
 8009e68:	4293      	cmp	r3, r2
 8009e6a:	d101      	bne.n	8009e70 <HAL_ADC_IRQHandler+0x34>
 8009e6c:	4b85      	ldr	r3, [pc, #532]	@ (800a084 <HAL_ADC_IRQHandler+0x248>)
 8009e6e:	e000      	b.n	8009e72 <HAL_ADC_IRQHandler+0x36>
 8009e70:	4b85      	ldr	r3, [pc, #532]	@ (800a088 <HAL_ADC_IRQHandler+0x24c>)
 8009e72:	4618      	mov	r0, r3
 8009e74:	f7ff fc32 	bl	80096dc <LL_ADC_GetMultimode>
 8009e78:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8009e7a:	69fb      	ldr	r3, [r7, #28]
 8009e7c:	f003 0302 	and.w	r3, r3, #2
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d017      	beq.n	8009eb4 <HAL_ADC_IRQHandler+0x78>
 8009e84:	69bb      	ldr	r3, [r7, #24]
 8009e86:	f003 0302 	and.w	r3, r3, #2
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d012      	beq.n	8009eb4 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009e92:	f003 0310 	and.w	r3, r3, #16
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d105      	bne.n	8009ea6 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009e9e:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	661a      	str	r2, [r3, #96]	@ 0x60

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8009ea6:	6878      	ldr	r0, [r7, #4]
 8009ea8:	f001 f98e 	bl	800b1c8 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	2202      	movs	r2, #2
 8009eb2:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8009eb4:	69fb      	ldr	r3, [r7, #28]
 8009eb6:	f003 0304 	and.w	r3, r3, #4
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d004      	beq.n	8009ec8 <HAL_ADC_IRQHandler+0x8c>
 8009ebe:	69bb      	ldr	r3, [r7, #24]
 8009ec0:	f003 0304 	and.w	r3, r3, #4
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d10a      	bne.n	8009ede <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8009ec8:	69fb      	ldr	r3, [r7, #28]
 8009eca:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	f000 8083 	beq.w	8009fda <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8009ed4:	69bb      	ldr	r3, [r7, #24]
 8009ed6:	f003 0308 	and.w	r3, r3, #8
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d07d      	beq.n	8009fda <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009ee2:	f003 0310 	and.w	r3, r3, #16
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d105      	bne.n	8009ef6 <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009eee:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	4618      	mov	r0, r3
 8009efc:	f7ff faf4 	bl	80094e8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8009f00:	4603      	mov	r3, r0
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d062      	beq.n	8009fcc <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	4a5d      	ldr	r2, [pc, #372]	@ (800a080 <HAL_ADC_IRQHandler+0x244>)
 8009f0c:	4293      	cmp	r3, r2
 8009f0e:	d002      	beq.n	8009f16 <HAL_ADC_IRQHandler+0xda>
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	e000      	b.n	8009f18 <HAL_ADC_IRQHandler+0xdc>
 8009f16:	4b59      	ldr	r3, [pc, #356]	@ (800a07c <HAL_ADC_IRQHandler+0x240>)
 8009f18:	687a      	ldr	r2, [r7, #4]
 8009f1a:	6812      	ldr	r2, [r2, #0]
 8009f1c:	4293      	cmp	r3, r2
 8009f1e:	d008      	beq.n	8009f32 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8009f20:	697b      	ldr	r3, [r7, #20]
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d005      	beq.n	8009f32 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8009f26:	697b      	ldr	r3, [r7, #20]
 8009f28:	2b05      	cmp	r3, #5
 8009f2a:	d002      	beq.n	8009f32 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8009f2c:	697b      	ldr	r3, [r7, #20]
 8009f2e:	2b09      	cmp	r3, #9
 8009f30:	d104      	bne.n	8009f3c <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	68db      	ldr	r3, [r3, #12]
 8009f38:	623b      	str	r3, [r7, #32]
 8009f3a:	e00c      	b.n	8009f56 <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	4a4f      	ldr	r2, [pc, #316]	@ (800a080 <HAL_ADC_IRQHandler+0x244>)
 8009f42:	4293      	cmp	r3, r2
 8009f44:	d002      	beq.n	8009f4c <HAL_ADC_IRQHandler+0x110>
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	e000      	b.n	8009f4e <HAL_ADC_IRQHandler+0x112>
 8009f4c:	4b4b      	ldr	r3, [pc, #300]	@ (800a07c <HAL_ADC_IRQHandler+0x240>)
 8009f4e:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8009f50:	693b      	ldr	r3, [r7, #16]
 8009f52:	68db      	ldr	r3, [r3, #12]
 8009f54:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8009f56:	6a3b      	ldr	r3, [r7, #32]
 8009f58:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d135      	bne.n	8009fcc <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	f003 0308 	and.w	r3, r3, #8
 8009f6a:	2b08      	cmp	r3, #8
 8009f6c:	d12e      	bne.n	8009fcc <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	4618      	mov	r0, r3
 8009f74:	f7ff fc58 	bl	8009828 <LL_ADC_REG_IsConversionOngoing>
 8009f78:	4603      	mov	r3, r0
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d11a      	bne.n	8009fb4 <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	685a      	ldr	r2, [r3, #4]
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	f022 020c 	bic.w	r2, r2, #12
 8009f8c:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009f92:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	661a      	str	r2, [r3, #96]	@ 0x60

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009f9e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d112      	bne.n	8009fcc <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009faa:	f043 0201 	orr.w	r2, r3, #1
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	661a      	str	r2, [r3, #96]	@ 0x60
 8009fb2:	e00b      	b.n	8009fcc <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009fb8:	f043 0210 	orr.w	r2, r3, #16
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009fc4:	f043 0201 	orr.w	r2, r3, #1
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	665a      	str	r2, [r3, #100]	@ 0x64
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8009fcc:	6878      	ldr	r0, [r7, #4]
 8009fce:	f000 f96f 	bl	800a2b0 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	220c      	movs	r2, #12
 8009fd8:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8009fda:	69fb      	ldr	r3, [r7, #28]
 8009fdc:	f003 0320 	and.w	r3, r3, #32
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d004      	beq.n	8009fee <HAL_ADC_IRQHandler+0x1b2>
 8009fe4:	69bb      	ldr	r3, [r7, #24]
 8009fe6:	f003 0320 	and.w	r3, r3, #32
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d10b      	bne.n	800a006 <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8009fee:	69fb      	ldr	r3, [r7, #28]
 8009ff0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	f000 80a0 	beq.w	800a13a <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8009ffa:	69bb      	ldr	r3, [r7, #24]
 8009ffc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a000:	2b00      	cmp	r3, #0
 800a002:	f000 809a 	beq.w	800a13a <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a00a:	f003 0310 	and.w	r3, r3, #16
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d105      	bne.n	800a01e <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a016:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	4618      	mov	r0, r3
 800a024:	f7ff fadc 	bl	80095e0 <LL_ADC_INJ_IsTriggerSourceSWStart>
 800a028:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	4618      	mov	r0, r3
 800a030:	f7ff fa5a 	bl	80094e8 <LL_ADC_REG_IsTriggerSourceSWStart>
 800a034:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	4a11      	ldr	r2, [pc, #68]	@ (800a080 <HAL_ADC_IRQHandler+0x244>)
 800a03c:	4293      	cmp	r3, r2
 800a03e:	d002      	beq.n	800a046 <HAL_ADC_IRQHandler+0x20a>
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	e000      	b.n	800a048 <HAL_ADC_IRQHandler+0x20c>
 800a046:	4b0d      	ldr	r3, [pc, #52]	@ (800a07c <HAL_ADC_IRQHandler+0x240>)
 800a048:	687a      	ldr	r2, [r7, #4]
 800a04a:	6812      	ldr	r2, [r2, #0]
 800a04c:	4293      	cmp	r3, r2
 800a04e:	d008      	beq.n	800a062 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800a050:	697b      	ldr	r3, [r7, #20]
 800a052:	2b00      	cmp	r3, #0
 800a054:	d005      	beq.n	800a062 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 800a056:	697b      	ldr	r3, [r7, #20]
 800a058:	2b06      	cmp	r3, #6
 800a05a:	d002      	beq.n	800a062 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 800a05c:	697b      	ldr	r3, [r7, #20]
 800a05e:	2b07      	cmp	r3, #7
 800a060:	d104      	bne.n	800a06c <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	68db      	ldr	r3, [r3, #12]
 800a068:	623b      	str	r3, [r7, #32]
 800a06a:	e014      	b.n	800a096 <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	4a03      	ldr	r2, [pc, #12]	@ (800a080 <HAL_ADC_IRQHandler+0x244>)
 800a072:	4293      	cmp	r3, r2
 800a074:	d00a      	beq.n	800a08c <HAL_ADC_IRQHandler+0x250>
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	e008      	b.n	800a08e <HAL_ADC_IRQHandler+0x252>
 800a07c:	40022000 	.word	0x40022000
 800a080:	40022100 	.word	0x40022100
 800a084:	40022300 	.word	0x40022300
 800a088:	58026300 	.word	0x58026300
 800a08c:	4b84      	ldr	r3, [pc, #528]	@ (800a2a0 <HAL_ADC_IRQHandler+0x464>)
 800a08e:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800a090:	693b      	ldr	r3, [r7, #16]
 800a092:	68db      	ldr	r3, [r3, #12]
 800a094:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d047      	beq.n	800a12c <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 800a09c:	6a3b      	ldr	r3, [r7, #32]
 800a09e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d007      	beq.n	800a0b6 <HAL_ADC_IRQHandler+0x27a>
 800a0a6:	68bb      	ldr	r3, [r7, #8]
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d03f      	beq.n	800a12c <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 800a0ac:	6a3b      	ldr	r3, [r7, #32]
 800a0ae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d13a      	bne.n	800a12c <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a0c0:	2b40      	cmp	r3, #64	@ 0x40
 800a0c2:	d133      	bne.n	800a12c <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 800a0c4:	6a3b      	ldr	r3, [r7, #32]
 800a0c6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d12e      	bne.n	800a12c <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	4618      	mov	r0, r3
 800a0d4:	f7ff fbbb 	bl	800984e <LL_ADC_INJ_IsConversionOngoing>
 800a0d8:	4603      	mov	r3, r0
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d11a      	bne.n	800a114 <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	685a      	ldr	r2, [r3, #4]
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800a0ec:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a0f2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	661a      	str	r2, [r3, #96]	@ 0x60

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a0fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a102:	2b00      	cmp	r3, #0
 800a104:	d112      	bne.n	800a12c <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a10a:	f043 0201 	orr.w	r2, r3, #1
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	661a      	str	r2, [r3, #96]	@ 0x60
 800a112:	e00b      	b.n	800a12c <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a118:	f043 0210 	orr.w	r2, r3, #16
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	661a      	str	r2, [r3, #96]	@ 0x60

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a124:	f043 0201 	orr.w	r2, r3, #1
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	665a      	str	r2, [r3, #100]	@ 0x64
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800a12c:	6878      	ldr	r0, [r7, #4]
 800a12e:	f001 f823 	bl	800b178 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	2260      	movs	r2, #96	@ 0x60
 800a138:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800a13a:	69fb      	ldr	r3, [r7, #28]
 800a13c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a140:	2b00      	cmp	r3, #0
 800a142:	d011      	beq.n	800a168 <HAL_ADC_IRQHandler+0x32c>
 800a144:	69bb      	ldr	r3, [r7, #24]
 800a146:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d00c      	beq.n	800a168 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a152:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800a15a:	6878      	ldr	r0, [r7, #4]
 800a15c:	f000 f8bc 	bl	800a2d8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	2280      	movs	r2, #128	@ 0x80
 800a166:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800a168:	69fb      	ldr	r3, [r7, #28]
 800a16a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d012      	beq.n	800a198 <HAL_ADC_IRQHandler+0x35c>
 800a172:	69bb      	ldr	r3, [r7, #24]
 800a174:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d00d      	beq.n	800a198 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a180:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800a188:	6878      	ldr	r0, [r7, #4]
 800a18a:	f001 f809 	bl	800b1a0 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a196:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800a198:	69fb      	ldr	r3, [r7, #28]
 800a19a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d012      	beq.n	800a1c8 <HAL_ADC_IRQHandler+0x38c>
 800a1a2:	69bb      	ldr	r3, [r7, #24]
 800a1a4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d00d      	beq.n	800a1c8 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a1b0:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800a1b8:	6878      	ldr	r0, [r7, #4]
 800a1ba:	f000 fffb 	bl	800b1b4 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a1c6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800a1c8:	69fb      	ldr	r3, [r7, #28]
 800a1ca:	f003 0310 	and.w	r3, r3, #16
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d043      	beq.n	800a25a <HAL_ADC_IRQHandler+0x41e>
 800a1d2:	69bb      	ldr	r3, [r7, #24]
 800a1d4:	f003 0310 	and.w	r3, r3, #16
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d03e      	beq.n	800a25a <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d102      	bne.n	800a1ea <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 800a1e4:	2301      	movs	r3, #1
 800a1e6:	627b      	str	r3, [r7, #36]	@ 0x24
 800a1e8:	e021      	b.n	800a22e <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 800a1ea:	697b      	ldr	r3, [r7, #20]
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d015      	beq.n	800a21c <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	4a2a      	ldr	r2, [pc, #168]	@ (800a2a0 <HAL_ADC_IRQHandler+0x464>)
 800a1f6:	4293      	cmp	r3, r2
 800a1f8:	d004      	beq.n	800a204 <HAL_ADC_IRQHandler+0x3c8>
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	4a29      	ldr	r2, [pc, #164]	@ (800a2a4 <HAL_ADC_IRQHandler+0x468>)
 800a200:	4293      	cmp	r3, r2
 800a202:	d101      	bne.n	800a208 <HAL_ADC_IRQHandler+0x3cc>
 800a204:	4b28      	ldr	r3, [pc, #160]	@ (800a2a8 <HAL_ADC_IRQHandler+0x46c>)
 800a206:	e000      	b.n	800a20a <HAL_ADC_IRQHandler+0x3ce>
 800a208:	4b28      	ldr	r3, [pc, #160]	@ (800a2ac <HAL_ADC_IRQHandler+0x470>)
 800a20a:	4618      	mov	r0, r3
 800a20c:	f7ff fa74 	bl	80096f8 <LL_ADC_GetMultiDMATransfer>
 800a210:	4603      	mov	r3, r0
 800a212:	2b00      	cmp	r3, #0
 800a214:	d00b      	beq.n	800a22e <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 800a216:	2301      	movs	r3, #1
 800a218:	627b      	str	r3, [r7, #36]	@ 0x24
 800a21a:	e008      	b.n	800a22e <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	68db      	ldr	r3, [r3, #12]
 800a222:	f003 0303 	and.w	r3, r3, #3
 800a226:	2b00      	cmp	r3, #0
 800a228:	d001      	beq.n	800a22e <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 800a22a:	2301      	movs	r3, #1
 800a22c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 800a22e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a230:	2b01      	cmp	r3, #1
 800a232:	d10e      	bne.n	800a252 <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a238:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a244:	f043 0202 	orr.w	r2, r3, #2
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	665a      	str	r2, [r3, #100]	@ 0x64
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800a24c:	6878      	ldr	r0, [r7, #4]
 800a24e:	f000 f84d 	bl	800a2ec <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	2210      	movs	r2, #16
 800a258:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800a25a:	69fb      	ldr	r3, [r7, #28]
 800a25c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a260:	2b00      	cmp	r3, #0
 800a262:	d018      	beq.n	800a296 <HAL_ADC_IRQHandler+0x45a>
 800a264:	69bb      	ldr	r3, [r7, #24]
 800a266:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d013      	beq.n	800a296 <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a272:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a27e:	f043 0208 	orr.w	r2, r3, #8
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800a28e:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800a290:	6878      	ldr	r0, [r7, #4]
 800a292:	f000 ff7b 	bl	800b18c <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 800a296:	bf00      	nop
 800a298:	3728      	adds	r7, #40	@ 0x28
 800a29a:	46bd      	mov	sp, r7
 800a29c:	bd80      	pop	{r7, pc}
 800a29e:	bf00      	nop
 800a2a0:	40022000 	.word	0x40022000
 800a2a4:	40022100 	.word	0x40022100
 800a2a8:	40022300 	.word	0x40022300
 800a2ac:	58026300 	.word	0x58026300

0800a2b0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800a2b0:	b480      	push	{r7}
 800a2b2:	b083      	sub	sp, #12
 800a2b4:	af00      	add	r7, sp, #0
 800a2b6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800a2b8:	bf00      	nop
 800a2ba:	370c      	adds	r7, #12
 800a2bc:	46bd      	mov	sp, r7
 800a2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c2:	4770      	bx	lr

0800a2c4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800a2c4:	b480      	push	{r7}
 800a2c6:	b083      	sub	sp, #12
 800a2c8:	af00      	add	r7, sp, #0
 800a2ca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800a2cc:	bf00      	nop
 800a2ce:	370c      	adds	r7, #12
 800a2d0:	46bd      	mov	sp, r7
 800a2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d6:	4770      	bx	lr

0800a2d8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800a2d8:	b480      	push	{r7}
 800a2da:	b083      	sub	sp, #12
 800a2dc:	af00      	add	r7, sp, #0
 800a2de:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800a2e0:	bf00      	nop
 800a2e2:	370c      	adds	r7, #12
 800a2e4:	46bd      	mov	sp, r7
 800a2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ea:	4770      	bx	lr

0800a2ec <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800a2ec:	b480      	push	{r7}
 800a2ee:	b083      	sub	sp, #12
 800a2f0:	af00      	add	r7, sp, #0
 800a2f2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800a2f4:	bf00      	nop
 800a2f6:	370c      	adds	r7, #12
 800a2f8:	46bd      	mov	sp, r7
 800a2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2fe:	4770      	bx	lr

0800a300 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800a300:	b590      	push	{r4, r7, lr}
 800a302:	b0b9      	sub	sp, #228	@ 0xe4
 800a304:	af00      	add	r7, sp, #0
 800a306:	6078      	str	r0, [r7, #4]
 800a308:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800a30a:	2300      	movs	r3, #0
 800a30c:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 800a310:	2300      	movs	r3, #0
 800a312:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a31a:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800a31c:	683b      	ldr	r3, [r7, #0]
 800a31e:	68db      	ldr	r3, [r3, #12]
 800a320:	4aab      	ldr	r2, [pc, #684]	@ (800a5d0 <HAL_ADC_ConfigChannel+0x2d0>)
 800a322:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800a32a:	2b01      	cmp	r3, #1
 800a32c:	d102      	bne.n	800a334 <HAL_ADC_ConfigChannel+0x34>
 800a32e:	2302      	movs	r3, #2
 800a330:	f000 bcfe 	b.w	800ad30 <HAL_ADC_ConfigChannel+0xa30>
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	2201      	movs	r2, #1
 800a338:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	4618      	mov	r0, r3
 800a342:	f7ff fa71 	bl	8009828 <LL_ADC_REG_IsConversionOngoing>
 800a346:	4603      	mov	r3, r0
 800a348:	2b00      	cmp	r3, #0
 800a34a:	f040 84e2 	bne.w	800ad12 <HAL_ADC_ConfigChannel+0xa12>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 800a34e:	683b      	ldr	r3, [r7, #0]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	2b00      	cmp	r3, #0
 800a354:	db38      	blt.n	800a3c8 <HAL_ADC_ConfigChannel+0xc8>
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	4a9e      	ldr	r2, [pc, #632]	@ (800a5d4 <HAL_ADC_ConfigChannel+0x2d4>)
 800a35c:	4293      	cmp	r3, r2
 800a35e:	d033      	beq.n	800a3c8 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 800a360:	683b      	ldr	r3, [r7, #0]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d108      	bne.n	800a37e <HAL_ADC_ConfigChannel+0x7e>
 800a36c:	683b      	ldr	r3, [r7, #0]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	0e9b      	lsrs	r3, r3, #26
 800a372:	f003 031f 	and.w	r3, r3, #31
 800a376:	2201      	movs	r2, #1
 800a378:	fa02 f303 	lsl.w	r3, r2, r3
 800a37c:	e01d      	b.n	800a3ba <HAL_ADC_ConfigChannel+0xba>
 800a37e:	683b      	ldr	r3, [r7, #0]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a386:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800a38a:	fa93 f3a3 	rbit	r3, r3
 800a38e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800a392:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800a396:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800a39a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d101      	bne.n	800a3a6 <HAL_ADC_ConfigChannel+0xa6>
  {
    return 32U;
 800a3a2:	2320      	movs	r3, #32
 800a3a4:	e004      	b.n	800a3b0 <HAL_ADC_ConfigChannel+0xb0>
  }
  return __builtin_clz(value);
 800a3a6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a3aa:	fab3 f383 	clz	r3, r3
 800a3ae:	b2db      	uxtb	r3, r3
 800a3b0:	f003 031f 	and.w	r3, r3, #31
 800a3b4:	2201      	movs	r2, #1
 800a3b6:	fa02 f303 	lsl.w	r3, r2, r3
 800a3ba:	687a      	ldr	r2, [r7, #4]
 800a3bc:	6812      	ldr	r2, [r2, #0]
 800a3be:	69d1      	ldr	r1, [r2, #28]
 800a3c0:	687a      	ldr	r2, [r7, #4]
 800a3c2:	6812      	ldr	r2, [r2, #0]
 800a3c4:	430b      	orrs	r3, r1
 800a3c6:	61d3      	str	r3, [r2, #28]
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	6818      	ldr	r0, [r3, #0]
 800a3cc:	683b      	ldr	r3, [r7, #0]
 800a3ce:	6859      	ldr	r1, [r3, #4]
 800a3d0:	683b      	ldr	r3, [r7, #0]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	461a      	mov	r2, r3
 800a3d6:	f7ff f89a 	bl	800950e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	4618      	mov	r0, r3
 800a3e0:	f7ff fa22 	bl	8009828 <LL_ADC_REG_IsConversionOngoing>
 800a3e4:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	4618      	mov	r0, r3
 800a3ee:	f7ff fa2e 	bl	800984e <LL_ADC_INJ_IsConversionOngoing>
 800a3f2:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800a3f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	f040 8270 	bne.w	800a8e0 <HAL_ADC_ConfigChannel+0x5e0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800a400:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800a404:	2b00      	cmp	r3, #0
 800a406:	f040 826b 	bne.w	800a8e0 <HAL_ADC_ConfigChannel+0x5e0>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	6818      	ldr	r0, [r3, #0]
 800a40e:	683b      	ldr	r3, [r7, #0]
 800a410:	6819      	ldr	r1, [r3, #0]
 800a412:	683b      	ldr	r3, [r7, #0]
 800a414:	689b      	ldr	r3, [r3, #8]
 800a416:	461a      	mov	r2, r3
 800a418:	f7ff f8f5 	bl	8009606 <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	4a6c      	ldr	r2, [pc, #432]	@ (800a5d4 <HAL_ADC_ConfigChannel+0x2d4>)
 800a422:	4293      	cmp	r3, r2
 800a424:	d10d      	bne.n	800a442 <HAL_ADC_ConfigChannel+0x142>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800a426:	683b      	ldr	r3, [r7, #0]
 800a428:	695a      	ldr	r2, [r3, #20]
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	68db      	ldr	r3, [r3, #12]
 800a430:	08db      	lsrs	r3, r3, #3
 800a432:	f003 0303 	and.w	r3, r3, #3
 800a436:	005b      	lsls	r3, r3, #1
 800a438:	fa02 f303 	lsl.w	r3, r2, r3
 800a43c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a440:	e032      	b.n	800a4a8 <HAL_ADC_ConfigChannel+0x1a8>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800a442:	4b65      	ldr	r3, [pc, #404]	@ (800a5d8 <HAL_ADC_ConfigChannel+0x2d8>)
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800a44a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a44e:	d10b      	bne.n	800a468 <HAL_ADC_ConfigChannel+0x168>
 800a450:	683b      	ldr	r3, [r7, #0]
 800a452:	695a      	ldr	r2, [r3, #20]
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	68db      	ldr	r3, [r3, #12]
 800a45a:	089b      	lsrs	r3, r3, #2
 800a45c:	f003 0307 	and.w	r3, r3, #7
 800a460:	005b      	lsls	r3, r3, #1
 800a462:	fa02 f303 	lsl.w	r3, r2, r3
 800a466:	e01d      	b.n	800a4a4 <HAL_ADC_ConfigChannel+0x1a4>
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	68db      	ldr	r3, [r3, #12]
 800a46e:	f003 0310 	and.w	r3, r3, #16
 800a472:	2b00      	cmp	r3, #0
 800a474:	d10b      	bne.n	800a48e <HAL_ADC_ConfigChannel+0x18e>
 800a476:	683b      	ldr	r3, [r7, #0]
 800a478:	695a      	ldr	r2, [r3, #20]
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	68db      	ldr	r3, [r3, #12]
 800a480:	089b      	lsrs	r3, r3, #2
 800a482:	f003 0307 	and.w	r3, r3, #7
 800a486:	005b      	lsls	r3, r3, #1
 800a488:	fa02 f303 	lsl.w	r3, r2, r3
 800a48c:	e00a      	b.n	800a4a4 <HAL_ADC_ConfigChannel+0x1a4>
 800a48e:	683b      	ldr	r3, [r7, #0]
 800a490:	695a      	ldr	r2, [r3, #20]
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	68db      	ldr	r3, [r3, #12]
 800a498:	089b      	lsrs	r3, r3, #2
 800a49a:	f003 0304 	and.w	r3, r3, #4
 800a49e:	005b      	lsls	r3, r3, #1
 800a4a0:	fa02 f303 	lsl.w	r3, r2, r3
 800a4a4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800a4a8:	683b      	ldr	r3, [r7, #0]
 800a4aa:	691b      	ldr	r3, [r3, #16]
 800a4ac:	2b04      	cmp	r3, #4
 800a4ae:	d048      	beq.n	800a542 <HAL_ADC_ConfigChannel+0x242>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	6818      	ldr	r0, [r3, #0]
 800a4b4:	683b      	ldr	r3, [r7, #0]
 800a4b6:	6919      	ldr	r1, [r3, #16]
 800a4b8:	683b      	ldr	r3, [r7, #0]
 800a4ba:	681a      	ldr	r2, [r3, #0]
 800a4bc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a4c0:	f7fe ff20 	bl	8009304 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	4a42      	ldr	r2, [pc, #264]	@ (800a5d4 <HAL_ADC_ConfigChannel+0x2d4>)
 800a4ca:	4293      	cmp	r3, r2
 800a4cc:	d119      	bne.n	800a502 <HAL_ADC_ConfigChannel+0x202>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	6818      	ldr	r0, [r3, #0]
 800a4d2:	683b      	ldr	r3, [r7, #0]
 800a4d4:	6919      	ldr	r1, [r3, #16]
 800a4d6:	683b      	ldr	r3, [r7, #0]
 800a4d8:	69db      	ldr	r3, [r3, #28]
 800a4da:	461a      	mov	r2, r3
 800a4dc:	f7fe ffb8 	bl	8009450 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	6818      	ldr	r0, [r3, #0]
 800a4e4:	683b      	ldr	r3, [r7, #0]
 800a4e6:	6919      	ldr	r1, [r3, #16]
 800a4e8:	683b      	ldr	r3, [r7, #0]
 800a4ea:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a4ee:	2b01      	cmp	r3, #1
 800a4f0:	d102      	bne.n	800a4f8 <HAL_ADC_ConfigChannel+0x1f8>
 800a4f2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800a4f6:	e000      	b.n	800a4fa <HAL_ADC_ConfigChannel+0x1fa>
 800a4f8:	2300      	movs	r3, #0
 800a4fa:	461a      	mov	r2, r3
 800a4fc:	f7fe ff86 	bl	800940c <LL_ADC_SetOffsetSaturation>
 800a500:	e1ee      	b.n	800a8e0 <HAL_ADC_ConfigChannel+0x5e0>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	6818      	ldr	r0, [r3, #0]
 800a506:	683b      	ldr	r3, [r7, #0]
 800a508:	6919      	ldr	r1, [r3, #16]
 800a50a:	683b      	ldr	r3, [r7, #0]
 800a50c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800a510:	2b01      	cmp	r3, #1
 800a512:	d102      	bne.n	800a51a <HAL_ADC_ConfigChannel+0x21a>
 800a514:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a518:	e000      	b.n	800a51c <HAL_ADC_ConfigChannel+0x21c>
 800a51a:	2300      	movs	r3, #0
 800a51c:	461a      	mov	r2, r3
 800a51e:	f7fe ff53 	bl	80093c8 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	6818      	ldr	r0, [r3, #0]
 800a526:	683b      	ldr	r3, [r7, #0]
 800a528:	6919      	ldr	r1, [r3, #16]
 800a52a:	683b      	ldr	r3, [r7, #0]
 800a52c:	7e1b      	ldrb	r3, [r3, #24]
 800a52e:	2b01      	cmp	r3, #1
 800a530:	d102      	bne.n	800a538 <HAL_ADC_ConfigChannel+0x238>
 800a532:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800a536:	e000      	b.n	800a53a <HAL_ADC_ConfigChannel+0x23a>
 800a538:	2300      	movs	r3, #0
 800a53a:	461a      	mov	r2, r3
 800a53c:	f7fe ff2a 	bl	8009394 <LL_ADC_SetDataRightShift>
 800a540:	e1ce      	b.n	800a8e0 <HAL_ADC_ConfigChannel+0x5e0>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	4a23      	ldr	r2, [pc, #140]	@ (800a5d4 <HAL_ADC_ConfigChannel+0x2d4>)
 800a548:	4293      	cmp	r3, r2
 800a54a:	f040 8181 	bne.w	800a850 <HAL_ADC_ConfigChannel+0x550>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	2100      	movs	r1, #0
 800a554:	4618      	mov	r0, r3
 800a556:	f7fe ff07 	bl	8009368 <LL_ADC_GetOffsetChannel>
 800a55a:	4603      	mov	r3, r0
 800a55c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a560:	2b00      	cmp	r3, #0
 800a562:	d10a      	bne.n	800a57a <HAL_ADC_ConfigChannel+0x27a>
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	2100      	movs	r1, #0
 800a56a:	4618      	mov	r0, r3
 800a56c:	f7fe fefc 	bl	8009368 <LL_ADC_GetOffsetChannel>
 800a570:	4603      	mov	r3, r0
 800a572:	0e9b      	lsrs	r3, r3, #26
 800a574:	f003 021f 	and.w	r2, r3, #31
 800a578:	e01e      	b.n	800a5b8 <HAL_ADC_ConfigChannel+0x2b8>
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	2100      	movs	r1, #0
 800a580:	4618      	mov	r0, r3
 800a582:	f7fe fef1 	bl	8009368 <LL_ADC_GetOffsetChannel>
 800a586:	4603      	mov	r3, r0
 800a588:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a58c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a590:	fa93 f3a3 	rbit	r3, r3
 800a594:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return result;
 800a598:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a59c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (value == 0U)
 800a5a0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d101      	bne.n	800a5ac <HAL_ADC_ConfigChannel+0x2ac>
    return 32U;
 800a5a8:	2320      	movs	r3, #32
 800a5aa:	e004      	b.n	800a5b6 <HAL_ADC_ConfigChannel+0x2b6>
  return __builtin_clz(value);
 800a5ac:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800a5b0:	fab3 f383 	clz	r3, r3
 800a5b4:	b2db      	uxtb	r3, r3
 800a5b6:	461a      	mov	r2, r3
 800a5b8:	683b      	ldr	r3, [r7, #0]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d10b      	bne.n	800a5dc <HAL_ADC_ConfigChannel+0x2dc>
 800a5c4:	683b      	ldr	r3, [r7, #0]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	0e9b      	lsrs	r3, r3, #26
 800a5ca:	f003 031f 	and.w	r3, r3, #31
 800a5ce:	e01e      	b.n	800a60e <HAL_ADC_ConfigChannel+0x30e>
 800a5d0:	47ff0000 	.word	0x47ff0000
 800a5d4:	58026000 	.word	0x58026000
 800a5d8:	5c001000 	.word	0x5c001000
 800a5dc:	683b      	ldr	r3, [r7, #0]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a5e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a5e8:	fa93 f3a3 	rbit	r3, r3
 800a5ec:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 800a5f0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a5f4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 800a5f8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d101      	bne.n	800a604 <HAL_ADC_ConfigChannel+0x304>
    return 32U;
 800a600:	2320      	movs	r3, #32
 800a602:	e004      	b.n	800a60e <HAL_ADC_ConfigChannel+0x30e>
  return __builtin_clz(value);
 800a604:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800a608:	fab3 f383 	clz	r3, r3
 800a60c:	b2db      	uxtb	r3, r3
 800a60e:	429a      	cmp	r2, r3
 800a610:	d106      	bne.n	800a620 <HAL_ADC_ConfigChannel+0x320>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	2200      	movs	r2, #0
 800a618:	2100      	movs	r1, #0
 800a61a:	4618      	mov	r0, r3
 800a61c:	f7fe ff3a 	bl	8009494 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	2101      	movs	r1, #1
 800a626:	4618      	mov	r0, r3
 800a628:	f7fe fe9e 	bl	8009368 <LL_ADC_GetOffsetChannel>
 800a62c:	4603      	mov	r3, r0
 800a62e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a632:	2b00      	cmp	r3, #0
 800a634:	d10a      	bne.n	800a64c <HAL_ADC_ConfigChannel+0x34c>
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	2101      	movs	r1, #1
 800a63c:	4618      	mov	r0, r3
 800a63e:	f7fe fe93 	bl	8009368 <LL_ADC_GetOffsetChannel>
 800a642:	4603      	mov	r3, r0
 800a644:	0e9b      	lsrs	r3, r3, #26
 800a646:	f003 021f 	and.w	r2, r3, #31
 800a64a:	e01e      	b.n	800a68a <HAL_ADC_ConfigChannel+0x38a>
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	2101      	movs	r1, #1
 800a652:	4618      	mov	r0, r3
 800a654:	f7fe fe88 	bl	8009368 <LL_ADC_GetOffsetChannel>
 800a658:	4603      	mov	r3, r0
 800a65a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a65e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a662:	fa93 f3a3 	rbit	r3, r3
 800a666:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 800a66a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a66e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 800a672:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800a676:	2b00      	cmp	r3, #0
 800a678:	d101      	bne.n	800a67e <HAL_ADC_ConfigChannel+0x37e>
    return 32U;
 800a67a:	2320      	movs	r3, #32
 800a67c:	e004      	b.n	800a688 <HAL_ADC_ConfigChannel+0x388>
  return __builtin_clz(value);
 800a67e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800a682:	fab3 f383 	clz	r3, r3
 800a686:	b2db      	uxtb	r3, r3
 800a688:	461a      	mov	r2, r3
 800a68a:	683b      	ldr	r3, [r7, #0]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a692:	2b00      	cmp	r3, #0
 800a694:	d105      	bne.n	800a6a2 <HAL_ADC_ConfigChannel+0x3a2>
 800a696:	683b      	ldr	r3, [r7, #0]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	0e9b      	lsrs	r3, r3, #26
 800a69c:	f003 031f 	and.w	r3, r3, #31
 800a6a0:	e018      	b.n	800a6d4 <HAL_ADC_ConfigChannel+0x3d4>
 800a6a2:	683b      	ldr	r3, [r7, #0]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a6aa:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800a6ae:	fa93 f3a3 	rbit	r3, r3
 800a6b2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 800a6b6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a6ba:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 800a6be:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d101      	bne.n	800a6ca <HAL_ADC_ConfigChannel+0x3ca>
    return 32U;
 800a6c6:	2320      	movs	r3, #32
 800a6c8:	e004      	b.n	800a6d4 <HAL_ADC_ConfigChannel+0x3d4>
  return __builtin_clz(value);
 800a6ca:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a6ce:	fab3 f383 	clz	r3, r3
 800a6d2:	b2db      	uxtb	r3, r3
 800a6d4:	429a      	cmp	r2, r3
 800a6d6:	d106      	bne.n	800a6e6 <HAL_ADC_ConfigChannel+0x3e6>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	2200      	movs	r2, #0
 800a6de:	2101      	movs	r1, #1
 800a6e0:	4618      	mov	r0, r3
 800a6e2:	f7fe fed7 	bl	8009494 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	2102      	movs	r1, #2
 800a6ec:	4618      	mov	r0, r3
 800a6ee:	f7fe fe3b 	bl	8009368 <LL_ADC_GetOffsetChannel>
 800a6f2:	4603      	mov	r3, r0
 800a6f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d10a      	bne.n	800a712 <HAL_ADC_ConfigChannel+0x412>
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	2102      	movs	r1, #2
 800a702:	4618      	mov	r0, r3
 800a704:	f7fe fe30 	bl	8009368 <LL_ADC_GetOffsetChannel>
 800a708:	4603      	mov	r3, r0
 800a70a:	0e9b      	lsrs	r3, r3, #26
 800a70c:	f003 021f 	and.w	r2, r3, #31
 800a710:	e01e      	b.n	800a750 <HAL_ADC_ConfigChannel+0x450>
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	2102      	movs	r1, #2
 800a718:	4618      	mov	r0, r3
 800a71a:	f7fe fe25 	bl	8009368 <LL_ADC_GetOffsetChannel>
 800a71e:	4603      	mov	r3, r0
 800a720:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a724:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a728:	fa93 f3a3 	rbit	r3, r3
 800a72c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 800a730:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a734:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 800a738:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d101      	bne.n	800a744 <HAL_ADC_ConfigChannel+0x444>
    return 32U;
 800a740:	2320      	movs	r3, #32
 800a742:	e004      	b.n	800a74e <HAL_ADC_ConfigChannel+0x44e>
  return __builtin_clz(value);
 800a744:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a748:	fab3 f383 	clz	r3, r3
 800a74c:	b2db      	uxtb	r3, r3
 800a74e:	461a      	mov	r2, r3
 800a750:	683b      	ldr	r3, [r7, #0]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d105      	bne.n	800a768 <HAL_ADC_ConfigChannel+0x468>
 800a75c:	683b      	ldr	r3, [r7, #0]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	0e9b      	lsrs	r3, r3, #26
 800a762:	f003 031f 	and.w	r3, r3, #31
 800a766:	e014      	b.n	800a792 <HAL_ADC_ConfigChannel+0x492>
 800a768:	683b      	ldr	r3, [r7, #0]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a76e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a770:	fa93 f3a3 	rbit	r3, r3
 800a774:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 800a776:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a778:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 800a77c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800a780:	2b00      	cmp	r3, #0
 800a782:	d101      	bne.n	800a788 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 800a784:	2320      	movs	r3, #32
 800a786:	e004      	b.n	800a792 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 800a788:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800a78c:	fab3 f383 	clz	r3, r3
 800a790:	b2db      	uxtb	r3, r3
 800a792:	429a      	cmp	r2, r3
 800a794:	d106      	bne.n	800a7a4 <HAL_ADC_ConfigChannel+0x4a4>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	2200      	movs	r2, #0
 800a79c:	2102      	movs	r1, #2
 800a79e:	4618      	mov	r0, r3
 800a7a0:	f7fe fe78 	bl	8009494 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	2103      	movs	r1, #3
 800a7aa:	4618      	mov	r0, r3
 800a7ac:	f7fe fddc 	bl	8009368 <LL_ADC_GetOffsetChannel>
 800a7b0:	4603      	mov	r3, r0
 800a7b2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d10a      	bne.n	800a7d0 <HAL_ADC_ConfigChannel+0x4d0>
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	2103      	movs	r1, #3
 800a7c0:	4618      	mov	r0, r3
 800a7c2:	f7fe fdd1 	bl	8009368 <LL_ADC_GetOffsetChannel>
 800a7c6:	4603      	mov	r3, r0
 800a7c8:	0e9b      	lsrs	r3, r3, #26
 800a7ca:	f003 021f 	and.w	r2, r3, #31
 800a7ce:	e017      	b.n	800a800 <HAL_ADC_ConfigChannel+0x500>
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	2103      	movs	r1, #3
 800a7d6:	4618      	mov	r0, r3
 800a7d8:	f7fe fdc6 	bl	8009368 <LL_ADC_GetOffsetChannel>
 800a7dc:	4603      	mov	r3, r0
 800a7de:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a7e0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a7e2:	fa93 f3a3 	rbit	r3, r3
 800a7e6:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 800a7e8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a7ea:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 800a7ec:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d101      	bne.n	800a7f6 <HAL_ADC_ConfigChannel+0x4f6>
    return 32U;
 800a7f2:	2320      	movs	r3, #32
 800a7f4:	e003      	b.n	800a7fe <HAL_ADC_ConfigChannel+0x4fe>
  return __builtin_clz(value);
 800a7f6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a7f8:	fab3 f383 	clz	r3, r3
 800a7fc:	b2db      	uxtb	r3, r3
 800a7fe:	461a      	mov	r2, r3
 800a800:	683b      	ldr	r3, [r7, #0]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d105      	bne.n	800a818 <HAL_ADC_ConfigChannel+0x518>
 800a80c:	683b      	ldr	r3, [r7, #0]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	0e9b      	lsrs	r3, r3, #26
 800a812:	f003 031f 	and.w	r3, r3, #31
 800a816:	e011      	b.n	800a83c <HAL_ADC_ConfigChannel+0x53c>
 800a818:	683b      	ldr	r3, [r7, #0]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a81e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a820:	fa93 f3a3 	rbit	r3, r3
 800a824:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 800a826:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a828:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 800a82a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d101      	bne.n	800a834 <HAL_ADC_ConfigChannel+0x534>
    return 32U;
 800a830:	2320      	movs	r3, #32
 800a832:	e003      	b.n	800a83c <HAL_ADC_ConfigChannel+0x53c>
  return __builtin_clz(value);
 800a834:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a836:	fab3 f383 	clz	r3, r3
 800a83a:	b2db      	uxtb	r3, r3
 800a83c:	429a      	cmp	r2, r3
 800a83e:	d14f      	bne.n	800a8e0 <HAL_ADC_ConfigChannel+0x5e0>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	2200      	movs	r2, #0
 800a846:	2103      	movs	r1, #3
 800a848:	4618      	mov	r0, r3
 800a84a:	f7fe fe23 	bl	8009494 <LL_ADC_SetOffsetState>
 800a84e:	e047      	b.n	800a8e0 <HAL_ADC_ConfigChannel+0x5e0>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a856:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800a85a:	683b      	ldr	r3, [r7, #0]
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	069b      	lsls	r3, r3, #26
 800a860:	429a      	cmp	r2, r3
 800a862:	d107      	bne.n	800a874 <HAL_ADC_ConfigChannel+0x574>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800a872:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a87a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800a87e:	683b      	ldr	r3, [r7, #0]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	069b      	lsls	r3, r3, #26
 800a884:	429a      	cmp	r2, r3
 800a886:	d107      	bne.n	800a898 <HAL_ADC_ConfigChannel+0x598>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800a896:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a89e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800a8a2:	683b      	ldr	r3, [r7, #0]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	069b      	lsls	r3, r3, #26
 800a8a8:	429a      	cmp	r2, r3
 800a8aa:	d107      	bne.n	800a8bc <HAL_ADC_ConfigChannel+0x5bc>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800a8ba:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a8c2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800a8c6:	683b      	ldr	r3, [r7, #0]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	069b      	lsls	r3, r3, #26
 800a8cc:	429a      	cmp	r2, r3
 800a8ce:	d107      	bne.n	800a8e0 <HAL_ADC_ConfigChannel+0x5e0>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800a8de:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	4618      	mov	r0, r3
 800a8e6:	f7fe ff77 	bl	80097d8 <LL_ADC_IsEnabled>
 800a8ea:	4603      	mov	r3, r0
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	f040 8219 	bne.w	800ad24 <HAL_ADC_ConfigChannel+0xa24>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	6818      	ldr	r0, [r3, #0]
 800a8f6:	683b      	ldr	r3, [r7, #0]
 800a8f8:	6819      	ldr	r1, [r3, #0]
 800a8fa:	683b      	ldr	r3, [r7, #0]
 800a8fc:	68db      	ldr	r3, [r3, #12]
 800a8fe:	461a      	mov	r2, r3
 800a900:	f7fe feac 	bl	800965c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800a904:	683b      	ldr	r3, [r7, #0]
 800a906:	68db      	ldr	r3, [r3, #12]
 800a908:	4aa1      	ldr	r2, [pc, #644]	@ (800ab90 <HAL_ADC_ConfigChannel+0x890>)
 800a90a:	4293      	cmp	r3, r2
 800a90c:	f040 812e 	bne.w	800ab6c <HAL_ADC_ConfigChannel+0x86c>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800a914:	683b      	ldr	r3, [r7, #0]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d10b      	bne.n	800a938 <HAL_ADC_ConfigChannel+0x638>
 800a920:	683b      	ldr	r3, [r7, #0]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	0e9b      	lsrs	r3, r3, #26
 800a926:	3301      	adds	r3, #1
 800a928:	f003 031f 	and.w	r3, r3, #31
 800a92c:	2b09      	cmp	r3, #9
 800a92e:	bf94      	ite	ls
 800a930:	2301      	movls	r3, #1
 800a932:	2300      	movhi	r3, #0
 800a934:	b2db      	uxtb	r3, r3
 800a936:	e019      	b.n	800a96c <HAL_ADC_ConfigChannel+0x66c>
 800a938:	683b      	ldr	r3, [r7, #0]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a93e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a940:	fa93 f3a3 	rbit	r3, r3
 800a944:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 800a946:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a948:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 800a94a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d101      	bne.n	800a954 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 800a950:	2320      	movs	r3, #32
 800a952:	e003      	b.n	800a95c <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 800a954:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a956:	fab3 f383 	clz	r3, r3
 800a95a:	b2db      	uxtb	r3, r3
 800a95c:	3301      	adds	r3, #1
 800a95e:	f003 031f 	and.w	r3, r3, #31
 800a962:	2b09      	cmp	r3, #9
 800a964:	bf94      	ite	ls
 800a966:	2301      	movls	r3, #1
 800a968:	2300      	movhi	r3, #0
 800a96a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d079      	beq.n	800aa64 <HAL_ADC_ConfigChannel+0x764>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800a970:	683b      	ldr	r3, [r7, #0]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d107      	bne.n	800a98c <HAL_ADC_ConfigChannel+0x68c>
 800a97c:	683b      	ldr	r3, [r7, #0]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	0e9b      	lsrs	r3, r3, #26
 800a982:	3301      	adds	r3, #1
 800a984:	069b      	lsls	r3, r3, #26
 800a986:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800a98a:	e015      	b.n	800a9b8 <HAL_ADC_ConfigChannel+0x6b8>
 800a98c:	683b      	ldr	r3, [r7, #0]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a992:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a994:	fa93 f3a3 	rbit	r3, r3
 800a998:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 800a99a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a99c:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 800a99e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d101      	bne.n	800a9a8 <HAL_ADC_ConfigChannel+0x6a8>
    return 32U;
 800a9a4:	2320      	movs	r3, #32
 800a9a6:	e003      	b.n	800a9b0 <HAL_ADC_ConfigChannel+0x6b0>
  return __builtin_clz(value);
 800a9a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a9aa:	fab3 f383 	clz	r3, r3
 800a9ae:	b2db      	uxtb	r3, r3
 800a9b0:	3301      	adds	r3, #1
 800a9b2:	069b      	lsls	r3, r3, #26
 800a9b4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800a9b8:	683b      	ldr	r3, [r7, #0]
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d109      	bne.n	800a9d8 <HAL_ADC_ConfigChannel+0x6d8>
 800a9c4:	683b      	ldr	r3, [r7, #0]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	0e9b      	lsrs	r3, r3, #26
 800a9ca:	3301      	adds	r3, #1
 800a9cc:	f003 031f 	and.w	r3, r3, #31
 800a9d0:	2101      	movs	r1, #1
 800a9d2:	fa01 f303 	lsl.w	r3, r1, r3
 800a9d6:	e017      	b.n	800aa08 <HAL_ADC_ConfigChannel+0x708>
 800a9d8:	683b      	ldr	r3, [r7, #0]
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a9de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a9e0:	fa93 f3a3 	rbit	r3, r3
 800a9e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 800a9e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a9e8:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 800a9ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d101      	bne.n	800a9f4 <HAL_ADC_ConfigChannel+0x6f4>
    return 32U;
 800a9f0:	2320      	movs	r3, #32
 800a9f2:	e003      	b.n	800a9fc <HAL_ADC_ConfigChannel+0x6fc>
  return __builtin_clz(value);
 800a9f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a9f6:	fab3 f383 	clz	r3, r3
 800a9fa:	b2db      	uxtb	r3, r3
 800a9fc:	3301      	adds	r3, #1
 800a9fe:	f003 031f 	and.w	r3, r3, #31
 800aa02:	2101      	movs	r1, #1
 800aa04:	fa01 f303 	lsl.w	r3, r1, r3
 800aa08:	ea42 0103 	orr.w	r1, r2, r3
 800aa0c:	683b      	ldr	r3, [r7, #0]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d10a      	bne.n	800aa2e <HAL_ADC_ConfigChannel+0x72e>
 800aa18:	683b      	ldr	r3, [r7, #0]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	0e9b      	lsrs	r3, r3, #26
 800aa1e:	3301      	adds	r3, #1
 800aa20:	f003 021f 	and.w	r2, r3, #31
 800aa24:	4613      	mov	r3, r2
 800aa26:	005b      	lsls	r3, r3, #1
 800aa28:	4413      	add	r3, r2
 800aa2a:	051b      	lsls	r3, r3, #20
 800aa2c:	e018      	b.n	800aa60 <HAL_ADC_ConfigChannel+0x760>
 800aa2e:	683b      	ldr	r3, [r7, #0]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800aa34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa36:	fa93 f3a3 	rbit	r3, r3
 800aa3a:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 800aa3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa3e:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 800aa40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d101      	bne.n	800aa4a <HAL_ADC_ConfigChannel+0x74a>
    return 32U;
 800aa46:	2320      	movs	r3, #32
 800aa48:	e003      	b.n	800aa52 <HAL_ADC_ConfigChannel+0x752>
  return __builtin_clz(value);
 800aa4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa4c:	fab3 f383 	clz	r3, r3
 800aa50:	b2db      	uxtb	r3, r3
 800aa52:	3301      	adds	r3, #1
 800aa54:	f003 021f 	and.w	r2, r3, #31
 800aa58:	4613      	mov	r3, r2
 800aa5a:	005b      	lsls	r3, r3, #1
 800aa5c:	4413      	add	r3, r2
 800aa5e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800aa60:	430b      	orrs	r3, r1
 800aa62:	e07e      	b.n	800ab62 <HAL_ADC_ConfigChannel+0x862>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800aa64:	683b      	ldr	r3, [r7, #0]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d107      	bne.n	800aa80 <HAL_ADC_ConfigChannel+0x780>
 800aa70:	683b      	ldr	r3, [r7, #0]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	0e9b      	lsrs	r3, r3, #26
 800aa76:	3301      	adds	r3, #1
 800aa78:	069b      	lsls	r3, r3, #26
 800aa7a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800aa7e:	e015      	b.n	800aaac <HAL_ADC_ConfigChannel+0x7ac>
 800aa80:	683b      	ldr	r3, [r7, #0]
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800aa86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa88:	fa93 f3a3 	rbit	r3, r3
 800aa8c:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 800aa8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa90:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 800aa92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d101      	bne.n	800aa9c <HAL_ADC_ConfigChannel+0x79c>
    return 32U;
 800aa98:	2320      	movs	r3, #32
 800aa9a:	e003      	b.n	800aaa4 <HAL_ADC_ConfigChannel+0x7a4>
  return __builtin_clz(value);
 800aa9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa9e:	fab3 f383 	clz	r3, r3
 800aaa2:	b2db      	uxtb	r3, r3
 800aaa4:	3301      	adds	r3, #1
 800aaa6:	069b      	lsls	r3, r3, #26
 800aaa8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800aaac:	683b      	ldr	r3, [r7, #0]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d109      	bne.n	800aacc <HAL_ADC_ConfigChannel+0x7cc>
 800aab8:	683b      	ldr	r3, [r7, #0]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	0e9b      	lsrs	r3, r3, #26
 800aabe:	3301      	adds	r3, #1
 800aac0:	f003 031f 	and.w	r3, r3, #31
 800aac4:	2101      	movs	r1, #1
 800aac6:	fa01 f303 	lsl.w	r3, r1, r3
 800aaca:	e017      	b.n	800aafc <HAL_ADC_ConfigChannel+0x7fc>
 800aacc:	683b      	ldr	r3, [r7, #0]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800aad2:	69fb      	ldr	r3, [r7, #28]
 800aad4:	fa93 f3a3 	rbit	r3, r3
 800aad8:	61bb      	str	r3, [r7, #24]
  return result;
 800aada:	69bb      	ldr	r3, [r7, #24]
 800aadc:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800aade:	6a3b      	ldr	r3, [r7, #32]
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d101      	bne.n	800aae8 <HAL_ADC_ConfigChannel+0x7e8>
    return 32U;
 800aae4:	2320      	movs	r3, #32
 800aae6:	e003      	b.n	800aaf0 <HAL_ADC_ConfigChannel+0x7f0>
  return __builtin_clz(value);
 800aae8:	6a3b      	ldr	r3, [r7, #32]
 800aaea:	fab3 f383 	clz	r3, r3
 800aaee:	b2db      	uxtb	r3, r3
 800aaf0:	3301      	adds	r3, #1
 800aaf2:	f003 031f 	and.w	r3, r3, #31
 800aaf6:	2101      	movs	r1, #1
 800aaf8:	fa01 f303 	lsl.w	r3, r1, r3
 800aafc:	ea42 0103 	orr.w	r1, r2, r3
 800ab00:	683b      	ldr	r3, [r7, #0]
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d10d      	bne.n	800ab28 <HAL_ADC_ConfigChannel+0x828>
 800ab0c:	683b      	ldr	r3, [r7, #0]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	0e9b      	lsrs	r3, r3, #26
 800ab12:	3301      	adds	r3, #1
 800ab14:	f003 021f 	and.w	r2, r3, #31
 800ab18:	4613      	mov	r3, r2
 800ab1a:	005b      	lsls	r3, r3, #1
 800ab1c:	4413      	add	r3, r2
 800ab1e:	3b1e      	subs	r3, #30
 800ab20:	051b      	lsls	r3, r3, #20
 800ab22:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800ab26:	e01b      	b.n	800ab60 <HAL_ADC_ConfigChannel+0x860>
 800ab28:	683b      	ldr	r3, [r7, #0]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ab2e:	693b      	ldr	r3, [r7, #16]
 800ab30:	fa93 f3a3 	rbit	r3, r3
 800ab34:	60fb      	str	r3, [r7, #12]
  return result;
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800ab3a:	697b      	ldr	r3, [r7, #20]
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d101      	bne.n	800ab44 <HAL_ADC_ConfigChannel+0x844>
    return 32U;
 800ab40:	2320      	movs	r3, #32
 800ab42:	e003      	b.n	800ab4c <HAL_ADC_ConfigChannel+0x84c>
  return __builtin_clz(value);
 800ab44:	697b      	ldr	r3, [r7, #20]
 800ab46:	fab3 f383 	clz	r3, r3
 800ab4a:	b2db      	uxtb	r3, r3
 800ab4c:	3301      	adds	r3, #1
 800ab4e:	f003 021f 	and.w	r2, r3, #31
 800ab52:	4613      	mov	r3, r2
 800ab54:	005b      	lsls	r3, r3, #1
 800ab56:	4413      	add	r3, r2
 800ab58:	3b1e      	subs	r3, #30
 800ab5a:	051b      	lsls	r3, r3, #20
 800ab5c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800ab60:	430b      	orrs	r3, r1
 800ab62:	683a      	ldr	r2, [r7, #0]
 800ab64:	6892      	ldr	r2, [r2, #8]
 800ab66:	4619      	mov	r1, r3
 800ab68:	f7fe fd4d 	bl	8009606 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800ab6c:	683b      	ldr	r3, [r7, #0]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	f280 80d7 	bge.w	800ad24 <HAL_ADC_ConfigChannel+0xa24>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	4a06      	ldr	r2, [pc, #24]	@ (800ab94 <HAL_ADC_ConfigChannel+0x894>)
 800ab7c:	4293      	cmp	r3, r2
 800ab7e:	d004      	beq.n	800ab8a <HAL_ADC_ConfigChannel+0x88a>
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	4a04      	ldr	r2, [pc, #16]	@ (800ab98 <HAL_ADC_ConfigChannel+0x898>)
 800ab86:	4293      	cmp	r3, r2
 800ab88:	d10a      	bne.n	800aba0 <HAL_ADC_ConfigChannel+0x8a0>
 800ab8a:	4b04      	ldr	r3, [pc, #16]	@ (800ab9c <HAL_ADC_ConfigChannel+0x89c>)
 800ab8c:	e009      	b.n	800aba2 <HAL_ADC_ConfigChannel+0x8a2>
 800ab8e:	bf00      	nop
 800ab90:	47ff0000 	.word	0x47ff0000
 800ab94:	40022000 	.word	0x40022000
 800ab98:	40022100 	.word	0x40022100
 800ab9c:	40022300 	.word	0x40022300
 800aba0:	4b65      	ldr	r3, [pc, #404]	@ (800ad38 <HAL_ADC_ConfigChannel+0xa38>)
 800aba2:	4618      	mov	r0, r3
 800aba4:	f7fe fba0 	bl	80092e8 <LL_ADC_GetCommonPathInternalCh>
 800aba8:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	4a62      	ldr	r2, [pc, #392]	@ (800ad3c <HAL_ADC_ConfigChannel+0xa3c>)
 800abb2:	4293      	cmp	r3, r2
 800abb4:	d004      	beq.n	800abc0 <HAL_ADC_ConfigChannel+0x8c0>
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	4a61      	ldr	r2, [pc, #388]	@ (800ad40 <HAL_ADC_ConfigChannel+0xa40>)
 800abbc:	4293      	cmp	r3, r2
 800abbe:	d10e      	bne.n	800abde <HAL_ADC_ConfigChannel+0x8de>
 800abc0:	485e      	ldr	r0, [pc, #376]	@ (800ad3c <HAL_ADC_ConfigChannel+0xa3c>)
 800abc2:	f7fe fe09 	bl	80097d8 <LL_ADC_IsEnabled>
 800abc6:	4604      	mov	r4, r0
 800abc8:	485d      	ldr	r0, [pc, #372]	@ (800ad40 <HAL_ADC_ConfigChannel+0xa40>)
 800abca:	f7fe fe05 	bl	80097d8 <LL_ADC_IsEnabled>
 800abce:	4603      	mov	r3, r0
 800abd0:	4323      	orrs	r3, r4
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	bf0c      	ite	eq
 800abd6:	2301      	moveq	r3, #1
 800abd8:	2300      	movne	r3, #0
 800abda:	b2db      	uxtb	r3, r3
 800abdc:	e008      	b.n	800abf0 <HAL_ADC_ConfigChannel+0x8f0>
 800abde:	4859      	ldr	r0, [pc, #356]	@ (800ad44 <HAL_ADC_ConfigChannel+0xa44>)
 800abe0:	f7fe fdfa 	bl	80097d8 <LL_ADC_IsEnabled>
 800abe4:	4603      	mov	r3, r0
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	bf0c      	ite	eq
 800abea:	2301      	moveq	r3, #1
 800abec:	2300      	movne	r3, #0
 800abee:	b2db      	uxtb	r3, r3
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	f000 8084 	beq.w	800acfe <HAL_ADC_ConfigChannel+0x9fe>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800abf6:	683b      	ldr	r3, [r7, #0]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	4a53      	ldr	r2, [pc, #332]	@ (800ad48 <HAL_ADC_ConfigChannel+0xa48>)
 800abfc:	4293      	cmp	r3, r2
 800abfe:	d132      	bne.n	800ac66 <HAL_ADC_ConfigChannel+0x966>
 800ac00:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800ac04:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d12c      	bne.n	800ac66 <HAL_ADC_ConfigChannel+0x966>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	4a4c      	ldr	r2, [pc, #304]	@ (800ad44 <HAL_ADC_ConfigChannel+0xa44>)
 800ac12:	4293      	cmp	r3, r2
 800ac14:	f040 8086 	bne.w	800ad24 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	4a47      	ldr	r2, [pc, #284]	@ (800ad3c <HAL_ADC_ConfigChannel+0xa3c>)
 800ac1e:	4293      	cmp	r3, r2
 800ac20:	d004      	beq.n	800ac2c <HAL_ADC_ConfigChannel+0x92c>
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	4a46      	ldr	r2, [pc, #280]	@ (800ad40 <HAL_ADC_ConfigChannel+0xa40>)
 800ac28:	4293      	cmp	r3, r2
 800ac2a:	d101      	bne.n	800ac30 <HAL_ADC_ConfigChannel+0x930>
 800ac2c:	4a47      	ldr	r2, [pc, #284]	@ (800ad4c <HAL_ADC_ConfigChannel+0xa4c>)
 800ac2e:	e000      	b.n	800ac32 <HAL_ADC_ConfigChannel+0x932>
 800ac30:	4a41      	ldr	r2, [pc, #260]	@ (800ad38 <HAL_ADC_ConfigChannel+0xa38>)
 800ac32:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800ac36:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800ac3a:	4619      	mov	r1, r3
 800ac3c:	4610      	mov	r0, r2
 800ac3e:	f7fe fb40 	bl	80092c2 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800ac42:	4b43      	ldr	r3, [pc, #268]	@ (800ad50 <HAL_ADC_ConfigChannel+0xa50>)
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	099b      	lsrs	r3, r3, #6
 800ac48:	4a42      	ldr	r2, [pc, #264]	@ (800ad54 <HAL_ADC_ConfigChannel+0xa54>)
 800ac4a:	fba2 2303 	umull	r2, r3, r2, r3
 800ac4e:	099b      	lsrs	r3, r3, #6
 800ac50:	3301      	adds	r3, #1
 800ac52:	005b      	lsls	r3, r3, #1
 800ac54:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800ac56:	e002      	b.n	800ac5e <HAL_ADC_ConfigChannel+0x95e>
              {
                wait_loop_index--;
 800ac58:	68bb      	ldr	r3, [r7, #8]
 800ac5a:	3b01      	subs	r3, #1
 800ac5c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800ac5e:	68bb      	ldr	r3, [r7, #8]
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d1f9      	bne.n	800ac58 <HAL_ADC_ConfigChannel+0x958>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800ac64:	e05e      	b.n	800ad24 <HAL_ADC_ConfigChannel+0xa24>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800ac66:	683b      	ldr	r3, [r7, #0]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	4a3b      	ldr	r2, [pc, #236]	@ (800ad58 <HAL_ADC_ConfigChannel+0xa58>)
 800ac6c:	4293      	cmp	r3, r2
 800ac6e:	d120      	bne.n	800acb2 <HAL_ADC_ConfigChannel+0x9b2>
 800ac70:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800ac74:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d11a      	bne.n	800acb2 <HAL_ADC_ConfigChannel+0x9b2>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	4a30      	ldr	r2, [pc, #192]	@ (800ad44 <HAL_ADC_ConfigChannel+0xa44>)
 800ac82:	4293      	cmp	r3, r2
 800ac84:	d14e      	bne.n	800ad24 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	4a2c      	ldr	r2, [pc, #176]	@ (800ad3c <HAL_ADC_ConfigChannel+0xa3c>)
 800ac8c:	4293      	cmp	r3, r2
 800ac8e:	d004      	beq.n	800ac9a <HAL_ADC_ConfigChannel+0x99a>
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	4a2a      	ldr	r2, [pc, #168]	@ (800ad40 <HAL_ADC_ConfigChannel+0xa40>)
 800ac96:	4293      	cmp	r3, r2
 800ac98:	d101      	bne.n	800ac9e <HAL_ADC_ConfigChannel+0x99e>
 800ac9a:	4a2c      	ldr	r2, [pc, #176]	@ (800ad4c <HAL_ADC_ConfigChannel+0xa4c>)
 800ac9c:	e000      	b.n	800aca0 <HAL_ADC_ConfigChannel+0x9a0>
 800ac9e:	4a26      	ldr	r2, [pc, #152]	@ (800ad38 <HAL_ADC_ConfigChannel+0xa38>)
 800aca0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800aca4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800aca8:	4619      	mov	r1, r3
 800acaa:	4610      	mov	r0, r2
 800acac:	f7fe fb09 	bl	80092c2 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800acb0:	e038      	b.n	800ad24 <HAL_ADC_ConfigChannel+0xa24>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800acb2:	683b      	ldr	r3, [r7, #0]
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	4a29      	ldr	r2, [pc, #164]	@ (800ad5c <HAL_ADC_ConfigChannel+0xa5c>)
 800acb8:	4293      	cmp	r3, r2
 800acba:	d133      	bne.n	800ad24 <HAL_ADC_ConfigChannel+0xa24>
 800acbc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800acc0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d12d      	bne.n	800ad24 <HAL_ADC_ConfigChannel+0xa24>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	4a1d      	ldr	r2, [pc, #116]	@ (800ad44 <HAL_ADC_ConfigChannel+0xa44>)
 800acce:	4293      	cmp	r3, r2
 800acd0:	d128      	bne.n	800ad24 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	4a19      	ldr	r2, [pc, #100]	@ (800ad3c <HAL_ADC_ConfigChannel+0xa3c>)
 800acd8:	4293      	cmp	r3, r2
 800acda:	d004      	beq.n	800ace6 <HAL_ADC_ConfigChannel+0x9e6>
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	4a17      	ldr	r2, [pc, #92]	@ (800ad40 <HAL_ADC_ConfigChannel+0xa40>)
 800ace2:	4293      	cmp	r3, r2
 800ace4:	d101      	bne.n	800acea <HAL_ADC_ConfigChannel+0x9ea>
 800ace6:	4a19      	ldr	r2, [pc, #100]	@ (800ad4c <HAL_ADC_ConfigChannel+0xa4c>)
 800ace8:	e000      	b.n	800acec <HAL_ADC_ConfigChannel+0x9ec>
 800acea:	4a13      	ldr	r2, [pc, #76]	@ (800ad38 <HAL_ADC_ConfigChannel+0xa38>)
 800acec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800acf0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800acf4:	4619      	mov	r1, r3
 800acf6:	4610      	mov	r0, r2
 800acf8:	f7fe fae3 	bl	80092c2 <LL_ADC_SetCommonPathInternalCh>
 800acfc:	e012      	b.n	800ad24 <HAL_ADC_ConfigChannel+0xa24>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ad02:	f043 0220 	orr.w	r2, r3, #32
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	661a      	str	r2, [r3, #96]	@ 0x60

          tmp_hal_status = HAL_ERROR;
 800ad0a:	2301      	movs	r3, #1
 800ad0c:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
 800ad10:	e008      	b.n	800ad24 <HAL_ADC_ConfigChannel+0xa24>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ad16:	f043 0220 	orr.w	r2, r3, #32
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800ad1e:	2301      	movs	r3, #1
 800ad20:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	2200      	movs	r2, #0
 800ad28:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 800ad2c:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
}
 800ad30:	4618      	mov	r0, r3
 800ad32:	37e4      	adds	r7, #228	@ 0xe4
 800ad34:	46bd      	mov	sp, r7
 800ad36:	bd90      	pop	{r4, r7, pc}
 800ad38:	58026300 	.word	0x58026300
 800ad3c:	40022000 	.word	0x40022000
 800ad40:	40022100 	.word	0x40022100
 800ad44:	58026000 	.word	0x58026000
 800ad48:	c7520000 	.word	0xc7520000
 800ad4c:	40022300 	.word	0x40022300
 800ad50:	24000004 	.word	0x24000004
 800ad54:	053e2d63 	.word	0x053e2d63
 800ad58:	c3210000 	.word	0xc3210000
 800ad5c:	cb840000 	.word	0xcb840000

0800ad60 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800ad60:	b580      	push	{r7, lr}
 800ad62:	b084      	sub	sp, #16
 800ad64:	af00      	add	r7, sp, #0
 800ad66:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	4618      	mov	r0, r3
 800ad6e:	f7fe fd33 	bl	80097d8 <LL_ADC_IsEnabled>
 800ad72:	4603      	mov	r3, r0
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d16e      	bne.n	800ae56 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	689a      	ldr	r2, [r3, #8]
 800ad7e:	4b38      	ldr	r3, [pc, #224]	@ (800ae60 <ADC_Enable+0x100>)
 800ad80:	4013      	ands	r3, r2
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d00d      	beq.n	800ada2 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ad8a:	f043 0210 	orr.w	r2, r3, #16
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ad96:	f043 0201 	orr.w	r2, r3, #1
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	665a      	str	r2, [r3, #100]	@ 0x64

      return HAL_ERROR;
 800ad9e:	2301      	movs	r3, #1
 800ada0:	e05a      	b.n	800ae58 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	4618      	mov	r0, r3
 800ada8:	f7fe fd02 	bl	80097b0 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800adac:	f7fe fa46 	bl	800923c <HAL_GetTick>
 800adb0:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	4a2b      	ldr	r2, [pc, #172]	@ (800ae64 <ADC_Enable+0x104>)
 800adb8:	4293      	cmp	r3, r2
 800adba:	d004      	beq.n	800adc6 <ADC_Enable+0x66>
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	4a29      	ldr	r2, [pc, #164]	@ (800ae68 <ADC_Enable+0x108>)
 800adc2:	4293      	cmp	r3, r2
 800adc4:	d101      	bne.n	800adca <ADC_Enable+0x6a>
 800adc6:	4b29      	ldr	r3, [pc, #164]	@ (800ae6c <ADC_Enable+0x10c>)
 800adc8:	e000      	b.n	800adcc <ADC_Enable+0x6c>
 800adca:	4b29      	ldr	r3, [pc, #164]	@ (800ae70 <ADC_Enable+0x110>)
 800adcc:	4618      	mov	r0, r3
 800adce:	f7fe fc85 	bl	80096dc <LL_ADC_GetMultimode>
 800add2:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	4a23      	ldr	r2, [pc, #140]	@ (800ae68 <ADC_Enable+0x108>)
 800adda:	4293      	cmp	r3, r2
 800addc:	d002      	beq.n	800ade4 <ADC_Enable+0x84>
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	e000      	b.n	800ade6 <ADC_Enable+0x86>
 800ade4:	4b1f      	ldr	r3, [pc, #124]	@ (800ae64 <ADC_Enable+0x104>)
 800ade6:	687a      	ldr	r2, [r7, #4]
 800ade8:	6812      	ldr	r2, [r2, #0]
 800adea:	4293      	cmp	r3, r2
 800adec:	d02c      	beq.n	800ae48 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800adee:	68bb      	ldr	r3, [r7, #8]
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d130      	bne.n	800ae56 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800adf4:	e028      	b.n	800ae48 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	4618      	mov	r0, r3
 800adfc:	f7fe fcec 	bl	80097d8 <LL_ADC_IsEnabled>
 800ae00:	4603      	mov	r3, r0
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d104      	bne.n	800ae10 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	4618      	mov	r0, r3
 800ae0c:	f7fe fcd0 	bl	80097b0 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800ae10:	f7fe fa14 	bl	800923c <HAL_GetTick>
 800ae14:	4602      	mov	r2, r0
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	1ad3      	subs	r3, r2, r3
 800ae1a:	2b02      	cmp	r3, #2
 800ae1c:	d914      	bls.n	800ae48 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	f003 0301 	and.w	r3, r3, #1
 800ae28:	2b01      	cmp	r3, #1
 800ae2a:	d00d      	beq.n	800ae48 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ae30:	f043 0210 	orr.w	r2, r3, #16
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ae3c:	f043 0201 	orr.w	r2, r3, #1
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	665a      	str	r2, [r3, #100]	@ 0x64

            return HAL_ERROR;
 800ae44:	2301      	movs	r3, #1
 800ae46:	e007      	b.n	800ae58 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	f003 0301 	and.w	r3, r3, #1
 800ae52:	2b01      	cmp	r3, #1
 800ae54:	d1cf      	bne.n	800adf6 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800ae56:	2300      	movs	r3, #0
}
 800ae58:	4618      	mov	r0, r3
 800ae5a:	3710      	adds	r7, #16
 800ae5c:	46bd      	mov	sp, r7
 800ae5e:	bd80      	pop	{r7, pc}
 800ae60:	8000003f 	.word	0x8000003f
 800ae64:	40022000 	.word	0x40022000
 800ae68:	40022100 	.word	0x40022100
 800ae6c:	40022300 	.word	0x40022300
 800ae70:	58026300 	.word	0x58026300

0800ae74 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800ae74:	b580      	push	{r7, lr}
 800ae76:	b084      	sub	sp, #16
 800ae78:	af00      	add	r7, sp, #0
 800ae7a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae80:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ae86:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d14b      	bne.n	800af26 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ae92:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	f003 0308 	and.w	r3, r3, #8
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d021      	beq.n	800aeec <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	4618      	mov	r0, r3
 800aeae:	f7fe fb1b 	bl	80094e8 <LL_ADC_REG_IsTriggerSourceSWStart>
 800aeb2:	4603      	mov	r3, r0
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d032      	beq.n	800af1e <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	68db      	ldr	r3, [r3, #12]
 800aebe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d12b      	bne.n	800af1e <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800aeca:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	661a      	str	r2, [r3, #96]	@ 0x60
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800aed6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d11f      	bne.n	800af1e <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800aee2:	f043 0201 	orr.w	r2, r3, #1
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	661a      	str	r2, [r3, #96]	@ 0x60
 800aeea:	e018      	b.n	800af1e <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	68db      	ldr	r3, [r3, #12]
 800aef2:	f003 0303 	and.w	r3, r3, #3
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d111      	bne.n	800af1e <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800aefe:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	661a      	str	r2, [r3, #96]	@ 0x60
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800af0a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d105      	bne.n	800af1e <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800af16:	f043 0201 	orr.w	r2, r3, #1
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800af1e:	68f8      	ldr	r0, [r7, #12]
 800af20:	f7ff f9c6 	bl	800a2b0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800af24:	e00e      	b.n	800af44 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800af2a:	f003 0310 	and.w	r3, r3, #16
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d003      	beq.n	800af3a <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800af32:	68f8      	ldr	r0, [r7, #12]
 800af34:	f7ff f9da 	bl	800a2ec <HAL_ADC_ErrorCallback>
}
 800af38:	e004      	b.n	800af44 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800af3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800af40:	6878      	ldr	r0, [r7, #4]
 800af42:	4798      	blx	r3
}
 800af44:	bf00      	nop
 800af46:	3710      	adds	r7, #16
 800af48:	46bd      	mov	sp, r7
 800af4a:	bd80      	pop	{r7, pc}

0800af4c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800af4c:	b580      	push	{r7, lr}
 800af4e:	b084      	sub	sp, #16
 800af50:	af00      	add	r7, sp, #0
 800af52:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800af58:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800af5a:	68f8      	ldr	r0, [r7, #12]
 800af5c:	f7ff f9b2 	bl	800a2c4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800af60:	bf00      	nop
 800af62:	3710      	adds	r7, #16
 800af64:	46bd      	mov	sp, r7
 800af66:	bd80      	pop	{r7, pc}

0800af68 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800af68:	b580      	push	{r7, lr}
 800af6a:	b084      	sub	sp, #16
 800af6c:	af00      	add	r7, sp, #0
 800af6e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800af74:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800af7a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800af86:	f043 0204 	orr.w	r2, r3, #4
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800af8e:	68f8      	ldr	r0, [r7, #12]
 800af90:	f7ff f9ac 	bl	800a2ec <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800af94:	bf00      	nop
 800af96:	3710      	adds	r7, #16
 800af98:	46bd      	mov	sp, r7
 800af9a:	bd80      	pop	{r7, pc}

0800af9c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 800af9c:	b580      	push	{r7, lr}
 800af9e:	b084      	sub	sp, #16
 800afa0:	af00      	add	r7, sp, #0
 800afa2:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	4a6c      	ldr	r2, [pc, #432]	@ (800b15c <ADC_ConfigureBoostMode+0x1c0>)
 800afaa:	4293      	cmp	r3, r2
 800afac:	d004      	beq.n	800afb8 <ADC_ConfigureBoostMode+0x1c>
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	4a6b      	ldr	r2, [pc, #428]	@ (800b160 <ADC_ConfigureBoostMode+0x1c4>)
 800afb4:	4293      	cmp	r3, r2
 800afb6:	d109      	bne.n	800afcc <ADC_ConfigureBoostMode+0x30>
 800afb8:	4b6a      	ldr	r3, [pc, #424]	@ (800b164 <ADC_ConfigureBoostMode+0x1c8>)
 800afba:	689b      	ldr	r3, [r3, #8]
 800afbc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	bf14      	ite	ne
 800afc4:	2301      	movne	r3, #1
 800afc6:	2300      	moveq	r3, #0
 800afc8:	b2db      	uxtb	r3, r3
 800afca:	e008      	b.n	800afde <ADC_ConfigureBoostMode+0x42>
 800afcc:	4b66      	ldr	r3, [pc, #408]	@ (800b168 <ADC_ConfigureBoostMode+0x1cc>)
 800afce:	689b      	ldr	r3, [r3, #8]
 800afd0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	bf14      	ite	ne
 800afd8:	2301      	movne	r3, #1
 800afda:	2300      	moveq	r3, #0
 800afdc:	b2db      	uxtb	r3, r3
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d01c      	beq.n	800b01c <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800afe2:	f006 fe8b 	bl	8011cfc <HAL_RCC_GetHCLKFreq>
 800afe6:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	685b      	ldr	r3, [r3, #4]
 800afec:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800aff0:	d010      	beq.n	800b014 <ADC_ConfigureBoostMode+0x78>
 800aff2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800aff6:	d873      	bhi.n	800b0e0 <ADC_ConfigureBoostMode+0x144>
 800aff8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800affc:	d002      	beq.n	800b004 <ADC_ConfigureBoostMode+0x68>
 800affe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b002:	d16d      	bne.n	800b0e0 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	685b      	ldr	r3, [r3, #4]
 800b008:	0c1b      	lsrs	r3, r3, #16
 800b00a:	68fa      	ldr	r2, [r7, #12]
 800b00c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b010:	60fb      	str	r3, [r7, #12]
        break;
 800b012:	e068      	b.n	800b0e6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	089b      	lsrs	r3, r3, #2
 800b018:	60fb      	str	r3, [r7, #12]
        break;
 800b01a:	e064      	b.n	800b0e6 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 800b01c:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800b020:	f04f 0100 	mov.w	r1, #0
 800b024:	f008 f866 	bl	80130f4 <HAL_RCCEx_GetPeriphCLKFreq>
 800b028:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	685b      	ldr	r3, [r3, #4]
 800b02e:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 800b032:	d051      	beq.n	800b0d8 <ADC_ConfigureBoostMode+0x13c>
 800b034:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 800b038:	d854      	bhi.n	800b0e4 <ADC_ConfigureBoostMode+0x148>
 800b03a:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 800b03e:	d047      	beq.n	800b0d0 <ADC_ConfigureBoostMode+0x134>
 800b040:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 800b044:	d84e      	bhi.n	800b0e4 <ADC_ConfigureBoostMode+0x148>
 800b046:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 800b04a:	d03d      	beq.n	800b0c8 <ADC_ConfigureBoostMode+0x12c>
 800b04c:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 800b050:	d848      	bhi.n	800b0e4 <ADC_ConfigureBoostMode+0x148>
 800b052:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b056:	d033      	beq.n	800b0c0 <ADC_ConfigureBoostMode+0x124>
 800b058:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b05c:	d842      	bhi.n	800b0e4 <ADC_ConfigureBoostMode+0x148>
 800b05e:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 800b062:	d029      	beq.n	800b0b8 <ADC_ConfigureBoostMode+0x11c>
 800b064:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 800b068:	d83c      	bhi.n	800b0e4 <ADC_ConfigureBoostMode+0x148>
 800b06a:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800b06e:	d01a      	beq.n	800b0a6 <ADC_ConfigureBoostMode+0x10a>
 800b070:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800b074:	d836      	bhi.n	800b0e4 <ADC_ConfigureBoostMode+0x148>
 800b076:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800b07a:	d014      	beq.n	800b0a6 <ADC_ConfigureBoostMode+0x10a>
 800b07c:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800b080:	d830      	bhi.n	800b0e4 <ADC_ConfigureBoostMode+0x148>
 800b082:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b086:	d00e      	beq.n	800b0a6 <ADC_ConfigureBoostMode+0x10a>
 800b088:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b08c:	d82a      	bhi.n	800b0e4 <ADC_ConfigureBoostMode+0x148>
 800b08e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800b092:	d008      	beq.n	800b0a6 <ADC_ConfigureBoostMode+0x10a>
 800b094:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800b098:	d824      	bhi.n	800b0e4 <ADC_ConfigureBoostMode+0x148>
 800b09a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b09e:	d002      	beq.n	800b0a6 <ADC_ConfigureBoostMode+0x10a>
 800b0a0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800b0a4:	d11e      	bne.n	800b0e4 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	685b      	ldr	r3, [r3, #4]
 800b0aa:	0c9b      	lsrs	r3, r3, #18
 800b0ac:	005b      	lsls	r3, r3, #1
 800b0ae:	68fa      	ldr	r2, [r7, #12]
 800b0b0:	fbb2 f3f3 	udiv	r3, r2, r3
 800b0b4:	60fb      	str	r3, [r7, #12]
        break;
 800b0b6:	e016      	b.n	800b0e6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	091b      	lsrs	r3, r3, #4
 800b0bc:	60fb      	str	r3, [r7, #12]
        break;
 800b0be:	e012      	b.n	800b0e6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	095b      	lsrs	r3, r3, #5
 800b0c4:	60fb      	str	r3, [r7, #12]
        break;
 800b0c6:	e00e      	b.n	800b0e6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	099b      	lsrs	r3, r3, #6
 800b0cc:	60fb      	str	r3, [r7, #12]
        break;
 800b0ce:	e00a      	b.n	800b0e6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	09db      	lsrs	r3, r3, #7
 800b0d4:	60fb      	str	r3, [r7, #12]
        break;
 800b0d6:	e006      	b.n	800b0e6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	0a1b      	lsrs	r3, r3, #8
 800b0dc:	60fb      	str	r3, [r7, #12]
        break;
 800b0de:	e002      	b.n	800b0e6 <ADC_ConfigureBoostMode+0x14a>
        break;
 800b0e0:	bf00      	nop
 800b0e2:	e000      	b.n	800b0e6 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 800b0e4:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	085b      	lsrs	r3, r3, #1
 800b0ea:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	4a1f      	ldr	r2, [pc, #124]	@ (800b16c <ADC_ConfigureBoostMode+0x1d0>)
 800b0f0:	4293      	cmp	r3, r2
 800b0f2:	d808      	bhi.n	800b106 <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	689a      	ldr	r2, [r3, #8]
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800b102:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 800b104:	e025      	b.n	800b152 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	4a19      	ldr	r2, [pc, #100]	@ (800b170 <ADC_ConfigureBoostMode+0x1d4>)
 800b10a:	4293      	cmp	r3, r2
 800b10c:	d80a      	bhi.n	800b124 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	689b      	ldr	r3, [r3, #8]
 800b114:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b120:	609a      	str	r2, [r3, #8]
}
 800b122:	e016      	b.n	800b152 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	4a13      	ldr	r2, [pc, #76]	@ (800b174 <ADC_ConfigureBoostMode+0x1d8>)
 800b128:	4293      	cmp	r3, r2
 800b12a:	d80a      	bhi.n	800b142 <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	689b      	ldr	r3, [r3, #8]
 800b132:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b13e:	609a      	str	r2, [r3, #8]
}
 800b140:	e007      	b.n	800b152 <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	689a      	ldr	r2, [r3, #8]
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 800b150:	609a      	str	r2, [r3, #8]
}
 800b152:	bf00      	nop
 800b154:	3710      	adds	r7, #16
 800b156:	46bd      	mov	sp, r7
 800b158:	bd80      	pop	{r7, pc}
 800b15a:	bf00      	nop
 800b15c:	40022000 	.word	0x40022000
 800b160:	40022100 	.word	0x40022100
 800b164:	40022300 	.word	0x40022300
 800b168:	58026300 	.word	0x58026300
 800b16c:	005f5e10 	.word	0x005f5e10
 800b170:	00bebc20 	.word	0x00bebc20
 800b174:	017d7840 	.word	0x017d7840

0800b178 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800b178:	b480      	push	{r7}
 800b17a:	b083      	sub	sp, #12
 800b17c:	af00      	add	r7, sp, #0
 800b17e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 800b180:	bf00      	nop
 800b182:	370c      	adds	r7, #12
 800b184:	46bd      	mov	sp, r7
 800b186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b18a:	4770      	bx	lr

0800b18c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 800b18c:	b480      	push	{r7}
 800b18e:	b083      	sub	sp, #12
 800b190:	af00      	add	r7, sp, #0
 800b192:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 800b194:	bf00      	nop
 800b196:	370c      	adds	r7, #12
 800b198:	46bd      	mov	sp, r7
 800b19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b19e:	4770      	bx	lr

0800b1a0 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 800b1a0:	b480      	push	{r7}
 800b1a2:	b083      	sub	sp, #12
 800b1a4:	af00      	add	r7, sp, #0
 800b1a6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 800b1a8:	bf00      	nop
 800b1aa:	370c      	adds	r7, #12
 800b1ac:	46bd      	mov	sp, r7
 800b1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b2:	4770      	bx	lr

0800b1b4 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 800b1b4:	b480      	push	{r7}
 800b1b6:	b083      	sub	sp, #12
 800b1b8:	af00      	add	r7, sp, #0
 800b1ba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 800b1bc:	bf00      	nop
 800b1be:	370c      	adds	r7, #12
 800b1c0:	46bd      	mov	sp, r7
 800b1c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1c6:	4770      	bx	lr

0800b1c8 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 800b1c8:	b480      	push	{r7}
 800b1ca:	b083      	sub	sp, #12
 800b1cc:	af00      	add	r7, sp, #0
 800b1ce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 800b1d0:	bf00      	nop
 800b1d2:	370c      	adds	r7, #12
 800b1d4:	46bd      	mov	sp, r7
 800b1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1da:	4770      	bx	lr

0800b1dc <__NVIC_SetPriorityGrouping>:
{
 800b1dc:	b480      	push	{r7}
 800b1de:	b085      	sub	sp, #20
 800b1e0:	af00      	add	r7, sp, #0
 800b1e2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	f003 0307 	and.w	r3, r3, #7
 800b1ea:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800b1ec:	4b0b      	ldr	r3, [pc, #44]	@ (800b21c <__NVIC_SetPriorityGrouping+0x40>)
 800b1ee:	68db      	ldr	r3, [r3, #12]
 800b1f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800b1f2:	68ba      	ldr	r2, [r7, #8]
 800b1f4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800b1f8:	4013      	ands	r3, r2
 800b1fa:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800b200:	68bb      	ldr	r3, [r7, #8]
 800b202:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800b204:	4b06      	ldr	r3, [pc, #24]	@ (800b220 <__NVIC_SetPriorityGrouping+0x44>)
 800b206:	4313      	orrs	r3, r2
 800b208:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800b20a:	4a04      	ldr	r2, [pc, #16]	@ (800b21c <__NVIC_SetPriorityGrouping+0x40>)
 800b20c:	68bb      	ldr	r3, [r7, #8]
 800b20e:	60d3      	str	r3, [r2, #12]
}
 800b210:	bf00      	nop
 800b212:	3714      	adds	r7, #20
 800b214:	46bd      	mov	sp, r7
 800b216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b21a:	4770      	bx	lr
 800b21c:	e000ed00 	.word	0xe000ed00
 800b220:	05fa0000 	.word	0x05fa0000

0800b224 <__NVIC_GetPriorityGrouping>:
{
 800b224:	b480      	push	{r7}
 800b226:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800b228:	4b04      	ldr	r3, [pc, #16]	@ (800b23c <__NVIC_GetPriorityGrouping+0x18>)
 800b22a:	68db      	ldr	r3, [r3, #12]
 800b22c:	0a1b      	lsrs	r3, r3, #8
 800b22e:	f003 0307 	and.w	r3, r3, #7
}
 800b232:	4618      	mov	r0, r3
 800b234:	46bd      	mov	sp, r7
 800b236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b23a:	4770      	bx	lr
 800b23c:	e000ed00 	.word	0xe000ed00

0800b240 <__NVIC_EnableIRQ>:
{
 800b240:	b480      	push	{r7}
 800b242:	b083      	sub	sp, #12
 800b244:	af00      	add	r7, sp, #0
 800b246:	4603      	mov	r3, r0
 800b248:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800b24a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b24e:	2b00      	cmp	r3, #0
 800b250:	db0b      	blt.n	800b26a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800b252:	88fb      	ldrh	r3, [r7, #6]
 800b254:	f003 021f 	and.w	r2, r3, #31
 800b258:	4907      	ldr	r1, [pc, #28]	@ (800b278 <__NVIC_EnableIRQ+0x38>)
 800b25a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b25e:	095b      	lsrs	r3, r3, #5
 800b260:	2001      	movs	r0, #1
 800b262:	fa00 f202 	lsl.w	r2, r0, r2
 800b266:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800b26a:	bf00      	nop
 800b26c:	370c      	adds	r7, #12
 800b26e:	46bd      	mov	sp, r7
 800b270:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b274:	4770      	bx	lr
 800b276:	bf00      	nop
 800b278:	e000e100 	.word	0xe000e100

0800b27c <__NVIC_SetPriority>:
{
 800b27c:	b480      	push	{r7}
 800b27e:	b083      	sub	sp, #12
 800b280:	af00      	add	r7, sp, #0
 800b282:	4603      	mov	r3, r0
 800b284:	6039      	str	r1, [r7, #0]
 800b286:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800b288:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	db0a      	blt.n	800b2a6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b290:	683b      	ldr	r3, [r7, #0]
 800b292:	b2da      	uxtb	r2, r3
 800b294:	490c      	ldr	r1, [pc, #48]	@ (800b2c8 <__NVIC_SetPriority+0x4c>)
 800b296:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b29a:	0112      	lsls	r2, r2, #4
 800b29c:	b2d2      	uxtb	r2, r2
 800b29e:	440b      	add	r3, r1
 800b2a0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800b2a4:	e00a      	b.n	800b2bc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b2a6:	683b      	ldr	r3, [r7, #0]
 800b2a8:	b2da      	uxtb	r2, r3
 800b2aa:	4908      	ldr	r1, [pc, #32]	@ (800b2cc <__NVIC_SetPriority+0x50>)
 800b2ac:	88fb      	ldrh	r3, [r7, #6]
 800b2ae:	f003 030f 	and.w	r3, r3, #15
 800b2b2:	3b04      	subs	r3, #4
 800b2b4:	0112      	lsls	r2, r2, #4
 800b2b6:	b2d2      	uxtb	r2, r2
 800b2b8:	440b      	add	r3, r1
 800b2ba:	761a      	strb	r2, [r3, #24]
}
 800b2bc:	bf00      	nop
 800b2be:	370c      	adds	r7, #12
 800b2c0:	46bd      	mov	sp, r7
 800b2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2c6:	4770      	bx	lr
 800b2c8:	e000e100 	.word	0xe000e100
 800b2cc:	e000ed00 	.word	0xe000ed00

0800b2d0 <NVIC_EncodePriority>:
{
 800b2d0:	b480      	push	{r7}
 800b2d2:	b089      	sub	sp, #36	@ 0x24
 800b2d4:	af00      	add	r7, sp, #0
 800b2d6:	60f8      	str	r0, [r7, #12]
 800b2d8:	60b9      	str	r1, [r7, #8]
 800b2da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	f003 0307 	and.w	r3, r3, #7
 800b2e2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800b2e4:	69fb      	ldr	r3, [r7, #28]
 800b2e6:	f1c3 0307 	rsb	r3, r3, #7
 800b2ea:	2b04      	cmp	r3, #4
 800b2ec:	bf28      	it	cs
 800b2ee:	2304      	movcs	r3, #4
 800b2f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800b2f2:	69fb      	ldr	r3, [r7, #28]
 800b2f4:	3304      	adds	r3, #4
 800b2f6:	2b06      	cmp	r3, #6
 800b2f8:	d902      	bls.n	800b300 <NVIC_EncodePriority+0x30>
 800b2fa:	69fb      	ldr	r3, [r7, #28]
 800b2fc:	3b03      	subs	r3, #3
 800b2fe:	e000      	b.n	800b302 <NVIC_EncodePriority+0x32>
 800b300:	2300      	movs	r3, #0
 800b302:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b304:	f04f 32ff 	mov.w	r2, #4294967295
 800b308:	69bb      	ldr	r3, [r7, #24]
 800b30a:	fa02 f303 	lsl.w	r3, r2, r3
 800b30e:	43da      	mvns	r2, r3
 800b310:	68bb      	ldr	r3, [r7, #8]
 800b312:	401a      	ands	r2, r3
 800b314:	697b      	ldr	r3, [r7, #20]
 800b316:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800b318:	f04f 31ff 	mov.w	r1, #4294967295
 800b31c:	697b      	ldr	r3, [r7, #20]
 800b31e:	fa01 f303 	lsl.w	r3, r1, r3
 800b322:	43d9      	mvns	r1, r3
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b328:	4313      	orrs	r3, r2
}
 800b32a:	4618      	mov	r0, r3
 800b32c:	3724      	adds	r7, #36	@ 0x24
 800b32e:	46bd      	mov	sp, r7
 800b330:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b334:	4770      	bx	lr
	...

0800b338 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800b338:	b580      	push	{r7, lr}
 800b33a:	b082      	sub	sp, #8
 800b33c:	af00      	add	r7, sp, #0
 800b33e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	3b01      	subs	r3, #1
 800b344:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b348:	d301      	bcc.n	800b34e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800b34a:	2301      	movs	r3, #1
 800b34c:	e00f      	b.n	800b36e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800b34e:	4a0a      	ldr	r2, [pc, #40]	@ (800b378 <SysTick_Config+0x40>)
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	3b01      	subs	r3, #1
 800b354:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800b356:	210f      	movs	r1, #15
 800b358:	f04f 30ff 	mov.w	r0, #4294967295
 800b35c:	f7ff ff8e 	bl	800b27c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800b360:	4b05      	ldr	r3, [pc, #20]	@ (800b378 <SysTick_Config+0x40>)
 800b362:	2200      	movs	r2, #0
 800b364:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800b366:	4b04      	ldr	r3, [pc, #16]	@ (800b378 <SysTick_Config+0x40>)
 800b368:	2207      	movs	r2, #7
 800b36a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800b36c:	2300      	movs	r3, #0
}
 800b36e:	4618      	mov	r0, r3
 800b370:	3708      	adds	r7, #8
 800b372:	46bd      	mov	sp, r7
 800b374:	bd80      	pop	{r7, pc}
 800b376:	bf00      	nop
 800b378:	e000e010 	.word	0xe000e010

0800b37c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800b37c:	b580      	push	{r7, lr}
 800b37e:	b082      	sub	sp, #8
 800b380:	af00      	add	r7, sp, #0
 800b382:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800b384:	6878      	ldr	r0, [r7, #4]
 800b386:	f7ff ff29 	bl	800b1dc <__NVIC_SetPriorityGrouping>
}
 800b38a:	bf00      	nop
 800b38c:	3708      	adds	r7, #8
 800b38e:	46bd      	mov	sp, r7
 800b390:	bd80      	pop	{r7, pc}

0800b392 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800b392:	b580      	push	{r7, lr}
 800b394:	b086      	sub	sp, #24
 800b396:	af00      	add	r7, sp, #0
 800b398:	4603      	mov	r3, r0
 800b39a:	60b9      	str	r1, [r7, #8]
 800b39c:	607a      	str	r2, [r7, #4]
 800b39e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800b3a0:	f7ff ff40 	bl	800b224 <__NVIC_GetPriorityGrouping>
 800b3a4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800b3a6:	687a      	ldr	r2, [r7, #4]
 800b3a8:	68b9      	ldr	r1, [r7, #8]
 800b3aa:	6978      	ldr	r0, [r7, #20]
 800b3ac:	f7ff ff90 	bl	800b2d0 <NVIC_EncodePriority>
 800b3b0:	4602      	mov	r2, r0
 800b3b2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800b3b6:	4611      	mov	r1, r2
 800b3b8:	4618      	mov	r0, r3
 800b3ba:	f7ff ff5f 	bl	800b27c <__NVIC_SetPriority>
}
 800b3be:	bf00      	nop
 800b3c0:	3718      	adds	r7, #24
 800b3c2:	46bd      	mov	sp, r7
 800b3c4:	bd80      	pop	{r7, pc}

0800b3c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b3c6:	b580      	push	{r7, lr}
 800b3c8:	b082      	sub	sp, #8
 800b3ca:	af00      	add	r7, sp, #0
 800b3cc:	4603      	mov	r3, r0
 800b3ce:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800b3d0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b3d4:	4618      	mov	r0, r3
 800b3d6:	f7ff ff33 	bl	800b240 <__NVIC_EnableIRQ>
}
 800b3da:	bf00      	nop
 800b3dc:	3708      	adds	r7, #8
 800b3de:	46bd      	mov	sp, r7
 800b3e0:	bd80      	pop	{r7, pc}

0800b3e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800b3e2:	b580      	push	{r7, lr}
 800b3e4:	b082      	sub	sp, #8
 800b3e6:	af00      	add	r7, sp, #0
 800b3e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800b3ea:	6878      	ldr	r0, [r7, #4]
 800b3ec:	f7ff ffa4 	bl	800b338 <SysTick_Config>
 800b3f0:	4603      	mov	r3, r0
}
 800b3f2:	4618      	mov	r0, r3
 800b3f4:	3708      	adds	r7, #8
 800b3f6:	46bd      	mov	sp, r7
 800b3f8:	bd80      	pop	{r7, pc}
	...

0800b3fc <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 800b3fc:	b480      	push	{r7}
 800b3fe:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 800b400:	f3bf 8f5f 	dmb	sy
}
 800b404:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800b406:	4b07      	ldr	r3, [pc, #28]	@ (800b424 <HAL_MPU_Disable+0x28>)
 800b408:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b40a:	4a06      	ldr	r2, [pc, #24]	@ (800b424 <HAL_MPU_Disable+0x28>)
 800b40c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b410:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800b412:	4b05      	ldr	r3, [pc, #20]	@ (800b428 <HAL_MPU_Disable+0x2c>)
 800b414:	2200      	movs	r2, #0
 800b416:	605a      	str	r2, [r3, #4]
}
 800b418:	bf00      	nop
 800b41a:	46bd      	mov	sp, r7
 800b41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b420:	4770      	bx	lr
 800b422:	bf00      	nop
 800b424:	e000ed00 	.word	0xe000ed00
 800b428:	e000ed90 	.word	0xe000ed90

0800b42c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 800b42c:	b480      	push	{r7}
 800b42e:	b083      	sub	sp, #12
 800b430:	af00      	add	r7, sp, #0
 800b432:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800b434:	4a0b      	ldr	r2, [pc, #44]	@ (800b464 <HAL_MPU_Enable+0x38>)
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	f043 0301 	orr.w	r3, r3, #1
 800b43c:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800b43e:	4b0a      	ldr	r3, [pc, #40]	@ (800b468 <HAL_MPU_Enable+0x3c>)
 800b440:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b442:	4a09      	ldr	r2, [pc, #36]	@ (800b468 <HAL_MPU_Enable+0x3c>)
 800b444:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b448:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800b44a:	f3bf 8f4f 	dsb	sy
}
 800b44e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800b450:	f3bf 8f6f 	isb	sy
}
 800b454:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800b456:	bf00      	nop
 800b458:	370c      	adds	r7, #12
 800b45a:	46bd      	mov	sp, r7
 800b45c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b460:	4770      	bx	lr
 800b462:	bf00      	nop
 800b464:	e000ed90 	.word	0xe000ed90
 800b468:	e000ed00 	.word	0xe000ed00

0800b46c <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 800b46c:	b480      	push	{r7}
 800b46e:	b083      	sub	sp, #12
 800b470:	af00      	add	r7, sp, #0
 800b472:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	785a      	ldrb	r2, [r3, #1]
 800b478:	4b1b      	ldr	r3, [pc, #108]	@ (800b4e8 <HAL_MPU_ConfigRegion+0x7c>)
 800b47a:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 800b47c:	4b1a      	ldr	r3, [pc, #104]	@ (800b4e8 <HAL_MPU_ConfigRegion+0x7c>)
 800b47e:	691b      	ldr	r3, [r3, #16]
 800b480:	4a19      	ldr	r2, [pc, #100]	@ (800b4e8 <HAL_MPU_ConfigRegion+0x7c>)
 800b482:	f023 0301 	bic.w	r3, r3, #1
 800b486:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 800b488:	4a17      	ldr	r2, [pc, #92]	@ (800b4e8 <HAL_MPU_ConfigRegion+0x7c>)
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	685b      	ldr	r3, [r3, #4]
 800b48e:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	7b1b      	ldrb	r3, [r3, #12]
 800b494:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	7adb      	ldrb	r3, [r3, #11]
 800b49a:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800b49c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	7a9b      	ldrb	r3, [r3, #10]
 800b4a2:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800b4a4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	7b5b      	ldrb	r3, [r3, #13]
 800b4aa:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800b4ac:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	7b9b      	ldrb	r3, [r3, #14]
 800b4b2:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800b4b4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	7bdb      	ldrb	r3, [r3, #15]
 800b4ba:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800b4bc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	7a5b      	ldrb	r3, [r3, #9]
 800b4c2:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800b4c4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	7a1b      	ldrb	r3, [r3, #8]
 800b4ca:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800b4cc:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800b4ce:	687a      	ldr	r2, [r7, #4]
 800b4d0:	7812      	ldrb	r2, [r2, #0]
 800b4d2:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800b4d4:	4a04      	ldr	r2, [pc, #16]	@ (800b4e8 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800b4d6:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800b4d8:	6113      	str	r3, [r2, #16]
}
 800b4da:	bf00      	nop
 800b4dc:	370c      	adds	r7, #12
 800b4de:	46bd      	mov	sp, r7
 800b4e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4e4:	4770      	bx	lr
 800b4e6:	bf00      	nop
 800b4e8:	e000ed90 	.word	0xe000ed90

0800b4ec <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800b4ec:	b580      	push	{r7, lr}
 800b4ee:	b086      	sub	sp, #24
 800b4f0:	af00      	add	r7, sp, #0
 800b4f2:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 800b4f4:	f7fd fea2 	bl	800923c <HAL_GetTick>
 800b4f8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d101      	bne.n	800b504 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800b500:	2301      	movs	r3, #1
 800b502:	e312      	b.n	800bb2a <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	4a66      	ldr	r2, [pc, #408]	@ (800b6a4 <HAL_DMA_Init+0x1b8>)
 800b50a:	4293      	cmp	r3, r2
 800b50c:	d04a      	beq.n	800b5a4 <HAL_DMA_Init+0xb8>
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	4a65      	ldr	r2, [pc, #404]	@ (800b6a8 <HAL_DMA_Init+0x1bc>)
 800b514:	4293      	cmp	r3, r2
 800b516:	d045      	beq.n	800b5a4 <HAL_DMA_Init+0xb8>
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	4a63      	ldr	r2, [pc, #396]	@ (800b6ac <HAL_DMA_Init+0x1c0>)
 800b51e:	4293      	cmp	r3, r2
 800b520:	d040      	beq.n	800b5a4 <HAL_DMA_Init+0xb8>
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	4a62      	ldr	r2, [pc, #392]	@ (800b6b0 <HAL_DMA_Init+0x1c4>)
 800b528:	4293      	cmp	r3, r2
 800b52a:	d03b      	beq.n	800b5a4 <HAL_DMA_Init+0xb8>
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	4a60      	ldr	r2, [pc, #384]	@ (800b6b4 <HAL_DMA_Init+0x1c8>)
 800b532:	4293      	cmp	r3, r2
 800b534:	d036      	beq.n	800b5a4 <HAL_DMA_Init+0xb8>
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	4a5f      	ldr	r2, [pc, #380]	@ (800b6b8 <HAL_DMA_Init+0x1cc>)
 800b53c:	4293      	cmp	r3, r2
 800b53e:	d031      	beq.n	800b5a4 <HAL_DMA_Init+0xb8>
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	4a5d      	ldr	r2, [pc, #372]	@ (800b6bc <HAL_DMA_Init+0x1d0>)
 800b546:	4293      	cmp	r3, r2
 800b548:	d02c      	beq.n	800b5a4 <HAL_DMA_Init+0xb8>
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	4a5c      	ldr	r2, [pc, #368]	@ (800b6c0 <HAL_DMA_Init+0x1d4>)
 800b550:	4293      	cmp	r3, r2
 800b552:	d027      	beq.n	800b5a4 <HAL_DMA_Init+0xb8>
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	4a5a      	ldr	r2, [pc, #360]	@ (800b6c4 <HAL_DMA_Init+0x1d8>)
 800b55a:	4293      	cmp	r3, r2
 800b55c:	d022      	beq.n	800b5a4 <HAL_DMA_Init+0xb8>
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	4a59      	ldr	r2, [pc, #356]	@ (800b6c8 <HAL_DMA_Init+0x1dc>)
 800b564:	4293      	cmp	r3, r2
 800b566:	d01d      	beq.n	800b5a4 <HAL_DMA_Init+0xb8>
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	4a57      	ldr	r2, [pc, #348]	@ (800b6cc <HAL_DMA_Init+0x1e0>)
 800b56e:	4293      	cmp	r3, r2
 800b570:	d018      	beq.n	800b5a4 <HAL_DMA_Init+0xb8>
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	4a56      	ldr	r2, [pc, #344]	@ (800b6d0 <HAL_DMA_Init+0x1e4>)
 800b578:	4293      	cmp	r3, r2
 800b57a:	d013      	beq.n	800b5a4 <HAL_DMA_Init+0xb8>
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	4a54      	ldr	r2, [pc, #336]	@ (800b6d4 <HAL_DMA_Init+0x1e8>)
 800b582:	4293      	cmp	r3, r2
 800b584:	d00e      	beq.n	800b5a4 <HAL_DMA_Init+0xb8>
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	4a53      	ldr	r2, [pc, #332]	@ (800b6d8 <HAL_DMA_Init+0x1ec>)
 800b58c:	4293      	cmp	r3, r2
 800b58e:	d009      	beq.n	800b5a4 <HAL_DMA_Init+0xb8>
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	4a51      	ldr	r2, [pc, #324]	@ (800b6dc <HAL_DMA_Init+0x1f0>)
 800b596:	4293      	cmp	r3, r2
 800b598:	d004      	beq.n	800b5a4 <HAL_DMA_Init+0xb8>
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	4a50      	ldr	r2, [pc, #320]	@ (800b6e0 <HAL_DMA_Init+0x1f4>)
 800b5a0:	4293      	cmp	r3, r2
 800b5a2:	d101      	bne.n	800b5a8 <HAL_DMA_Init+0xbc>
 800b5a4:	2301      	movs	r3, #1
 800b5a6:	e000      	b.n	800b5aa <HAL_DMA_Init+0xbe>
 800b5a8:	2300      	movs	r3, #0
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	f000 813c 	beq.w	800b828 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	2202      	movs	r2, #2
 800b5b4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	2200      	movs	r2, #0
 800b5bc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	4a37      	ldr	r2, [pc, #220]	@ (800b6a4 <HAL_DMA_Init+0x1b8>)
 800b5c6:	4293      	cmp	r3, r2
 800b5c8:	d04a      	beq.n	800b660 <HAL_DMA_Init+0x174>
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	4a36      	ldr	r2, [pc, #216]	@ (800b6a8 <HAL_DMA_Init+0x1bc>)
 800b5d0:	4293      	cmp	r3, r2
 800b5d2:	d045      	beq.n	800b660 <HAL_DMA_Init+0x174>
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	4a34      	ldr	r2, [pc, #208]	@ (800b6ac <HAL_DMA_Init+0x1c0>)
 800b5da:	4293      	cmp	r3, r2
 800b5dc:	d040      	beq.n	800b660 <HAL_DMA_Init+0x174>
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	4a33      	ldr	r2, [pc, #204]	@ (800b6b0 <HAL_DMA_Init+0x1c4>)
 800b5e4:	4293      	cmp	r3, r2
 800b5e6:	d03b      	beq.n	800b660 <HAL_DMA_Init+0x174>
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	4a31      	ldr	r2, [pc, #196]	@ (800b6b4 <HAL_DMA_Init+0x1c8>)
 800b5ee:	4293      	cmp	r3, r2
 800b5f0:	d036      	beq.n	800b660 <HAL_DMA_Init+0x174>
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	4a30      	ldr	r2, [pc, #192]	@ (800b6b8 <HAL_DMA_Init+0x1cc>)
 800b5f8:	4293      	cmp	r3, r2
 800b5fa:	d031      	beq.n	800b660 <HAL_DMA_Init+0x174>
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	4a2e      	ldr	r2, [pc, #184]	@ (800b6bc <HAL_DMA_Init+0x1d0>)
 800b602:	4293      	cmp	r3, r2
 800b604:	d02c      	beq.n	800b660 <HAL_DMA_Init+0x174>
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	4a2d      	ldr	r2, [pc, #180]	@ (800b6c0 <HAL_DMA_Init+0x1d4>)
 800b60c:	4293      	cmp	r3, r2
 800b60e:	d027      	beq.n	800b660 <HAL_DMA_Init+0x174>
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	4a2b      	ldr	r2, [pc, #172]	@ (800b6c4 <HAL_DMA_Init+0x1d8>)
 800b616:	4293      	cmp	r3, r2
 800b618:	d022      	beq.n	800b660 <HAL_DMA_Init+0x174>
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	4a2a      	ldr	r2, [pc, #168]	@ (800b6c8 <HAL_DMA_Init+0x1dc>)
 800b620:	4293      	cmp	r3, r2
 800b622:	d01d      	beq.n	800b660 <HAL_DMA_Init+0x174>
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	4a28      	ldr	r2, [pc, #160]	@ (800b6cc <HAL_DMA_Init+0x1e0>)
 800b62a:	4293      	cmp	r3, r2
 800b62c:	d018      	beq.n	800b660 <HAL_DMA_Init+0x174>
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	4a27      	ldr	r2, [pc, #156]	@ (800b6d0 <HAL_DMA_Init+0x1e4>)
 800b634:	4293      	cmp	r3, r2
 800b636:	d013      	beq.n	800b660 <HAL_DMA_Init+0x174>
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	4a25      	ldr	r2, [pc, #148]	@ (800b6d4 <HAL_DMA_Init+0x1e8>)
 800b63e:	4293      	cmp	r3, r2
 800b640:	d00e      	beq.n	800b660 <HAL_DMA_Init+0x174>
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	4a24      	ldr	r2, [pc, #144]	@ (800b6d8 <HAL_DMA_Init+0x1ec>)
 800b648:	4293      	cmp	r3, r2
 800b64a:	d009      	beq.n	800b660 <HAL_DMA_Init+0x174>
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	4a22      	ldr	r2, [pc, #136]	@ (800b6dc <HAL_DMA_Init+0x1f0>)
 800b652:	4293      	cmp	r3, r2
 800b654:	d004      	beq.n	800b660 <HAL_DMA_Init+0x174>
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	4a21      	ldr	r2, [pc, #132]	@ (800b6e0 <HAL_DMA_Init+0x1f4>)
 800b65c:	4293      	cmp	r3, r2
 800b65e:	d108      	bne.n	800b672 <HAL_DMA_Init+0x186>
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	681a      	ldr	r2, [r3, #0]
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	f022 0201 	bic.w	r2, r2, #1
 800b66e:	601a      	str	r2, [r3, #0]
 800b670:	e007      	b.n	800b682 <HAL_DMA_Init+0x196>
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	681a      	ldr	r2, [r3, #0]
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	f022 0201 	bic.w	r2, r2, #1
 800b680:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800b682:	e02f      	b.n	800b6e4 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800b684:	f7fd fdda 	bl	800923c <HAL_GetTick>
 800b688:	4602      	mov	r2, r0
 800b68a:	693b      	ldr	r3, [r7, #16]
 800b68c:	1ad3      	subs	r3, r2, r3
 800b68e:	2b05      	cmp	r3, #5
 800b690:	d928      	bls.n	800b6e4 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	2220      	movs	r2, #32
 800b696:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	2203      	movs	r2, #3
 800b69c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 800b6a0:	2301      	movs	r3, #1
 800b6a2:	e242      	b.n	800bb2a <HAL_DMA_Init+0x63e>
 800b6a4:	40020010 	.word	0x40020010
 800b6a8:	40020028 	.word	0x40020028
 800b6ac:	40020040 	.word	0x40020040
 800b6b0:	40020058 	.word	0x40020058
 800b6b4:	40020070 	.word	0x40020070
 800b6b8:	40020088 	.word	0x40020088
 800b6bc:	400200a0 	.word	0x400200a0
 800b6c0:	400200b8 	.word	0x400200b8
 800b6c4:	40020410 	.word	0x40020410
 800b6c8:	40020428 	.word	0x40020428
 800b6cc:	40020440 	.word	0x40020440
 800b6d0:	40020458 	.word	0x40020458
 800b6d4:	40020470 	.word	0x40020470
 800b6d8:	40020488 	.word	0x40020488
 800b6dc:	400204a0 	.word	0x400204a0
 800b6e0:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	f003 0301 	and.w	r3, r3, #1
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d1c8      	bne.n	800b684 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800b6fa:	697a      	ldr	r2, [r7, #20]
 800b6fc:	4b83      	ldr	r3, [pc, #524]	@ (800b90c <HAL_DMA_Init+0x420>)
 800b6fe:	4013      	ands	r3, r2
 800b700:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800b70a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	691b      	ldr	r3, [r3, #16]
 800b710:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b716:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	699b      	ldr	r3, [r3, #24]
 800b71c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b722:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	6a1b      	ldr	r3, [r3, #32]
 800b728:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800b72a:	697a      	ldr	r2, [r7, #20]
 800b72c:	4313      	orrs	r3, r2
 800b72e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b734:	2b04      	cmp	r3, #4
 800b736:	d107      	bne.n	800b748 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b740:	4313      	orrs	r3, r2
 800b742:	697a      	ldr	r2, [r7, #20]
 800b744:	4313      	orrs	r3, r2
 800b746:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	685b      	ldr	r3, [r3, #4]
 800b74c:	2b28      	cmp	r3, #40	@ 0x28
 800b74e:	d903      	bls.n	800b758 <HAL_DMA_Init+0x26c>
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	685b      	ldr	r3, [r3, #4]
 800b754:	2b2e      	cmp	r3, #46	@ 0x2e
 800b756:	d91f      	bls.n	800b798 <HAL_DMA_Init+0x2ac>
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	685b      	ldr	r3, [r3, #4]
 800b75c:	2b3e      	cmp	r3, #62	@ 0x3e
 800b75e:	d903      	bls.n	800b768 <HAL_DMA_Init+0x27c>
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	685b      	ldr	r3, [r3, #4]
 800b764:	2b42      	cmp	r3, #66	@ 0x42
 800b766:	d917      	bls.n	800b798 <HAL_DMA_Init+0x2ac>
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	685b      	ldr	r3, [r3, #4]
 800b76c:	2b46      	cmp	r3, #70	@ 0x46
 800b76e:	d903      	bls.n	800b778 <HAL_DMA_Init+0x28c>
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	685b      	ldr	r3, [r3, #4]
 800b774:	2b48      	cmp	r3, #72	@ 0x48
 800b776:	d90f      	bls.n	800b798 <HAL_DMA_Init+0x2ac>
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	685b      	ldr	r3, [r3, #4]
 800b77c:	2b4e      	cmp	r3, #78	@ 0x4e
 800b77e:	d903      	bls.n	800b788 <HAL_DMA_Init+0x29c>
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	685b      	ldr	r3, [r3, #4]
 800b784:	2b52      	cmp	r3, #82	@ 0x52
 800b786:	d907      	bls.n	800b798 <HAL_DMA_Init+0x2ac>
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	685b      	ldr	r3, [r3, #4]
 800b78c:	2b73      	cmp	r3, #115	@ 0x73
 800b78e:	d905      	bls.n	800b79c <HAL_DMA_Init+0x2b0>
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	685b      	ldr	r3, [r3, #4]
 800b794:	2b77      	cmp	r3, #119	@ 0x77
 800b796:	d801      	bhi.n	800b79c <HAL_DMA_Init+0x2b0>
 800b798:	2301      	movs	r3, #1
 800b79a:	e000      	b.n	800b79e <HAL_DMA_Init+0x2b2>
 800b79c:	2300      	movs	r3, #0
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d003      	beq.n	800b7aa <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800b7a2:	697b      	ldr	r3, [r7, #20]
 800b7a4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b7a8:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	697a      	ldr	r2, [r7, #20]
 800b7b0:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	695b      	ldr	r3, [r3, #20]
 800b7b8:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800b7ba:	697b      	ldr	r3, [r7, #20]
 800b7bc:	f023 0307 	bic.w	r3, r3, #7
 800b7c0:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b7c6:	697a      	ldr	r2, [r7, #20]
 800b7c8:	4313      	orrs	r3, r2
 800b7ca:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b7d0:	2b04      	cmp	r3, #4
 800b7d2:	d117      	bne.n	800b804 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b7d8:	697a      	ldr	r2, [r7, #20]
 800b7da:	4313      	orrs	r3, r2
 800b7dc:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d00e      	beq.n	800b804 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800b7e6:	6878      	ldr	r0, [r7, #4]
 800b7e8:	f002 fb48 	bl	800de7c <DMA_CheckFifoParam>
 800b7ec:	4603      	mov	r3, r0
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d008      	beq.n	800b804 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	2240      	movs	r2, #64	@ 0x40
 800b7f6:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	2201      	movs	r2, #1
 800b7fc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 800b800:	2301      	movs	r3, #1
 800b802:	e192      	b.n	800bb2a <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	697a      	ldr	r2, [r7, #20]
 800b80a:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800b80c:	6878      	ldr	r0, [r7, #4]
 800b80e:	f002 fa83 	bl	800dd18 <DMA_CalcBaseAndBitshift>
 800b812:	4603      	mov	r3, r0
 800b814:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b81a:	f003 031f 	and.w	r3, r3, #31
 800b81e:	223f      	movs	r2, #63	@ 0x3f
 800b820:	409a      	lsls	r2, r3
 800b822:	68bb      	ldr	r3, [r7, #8]
 800b824:	609a      	str	r2, [r3, #8]
 800b826:	e0c8      	b.n	800b9ba <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	4a38      	ldr	r2, [pc, #224]	@ (800b910 <HAL_DMA_Init+0x424>)
 800b82e:	4293      	cmp	r3, r2
 800b830:	d022      	beq.n	800b878 <HAL_DMA_Init+0x38c>
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	4a37      	ldr	r2, [pc, #220]	@ (800b914 <HAL_DMA_Init+0x428>)
 800b838:	4293      	cmp	r3, r2
 800b83a:	d01d      	beq.n	800b878 <HAL_DMA_Init+0x38c>
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	4a35      	ldr	r2, [pc, #212]	@ (800b918 <HAL_DMA_Init+0x42c>)
 800b842:	4293      	cmp	r3, r2
 800b844:	d018      	beq.n	800b878 <HAL_DMA_Init+0x38c>
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	4a34      	ldr	r2, [pc, #208]	@ (800b91c <HAL_DMA_Init+0x430>)
 800b84c:	4293      	cmp	r3, r2
 800b84e:	d013      	beq.n	800b878 <HAL_DMA_Init+0x38c>
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	4a32      	ldr	r2, [pc, #200]	@ (800b920 <HAL_DMA_Init+0x434>)
 800b856:	4293      	cmp	r3, r2
 800b858:	d00e      	beq.n	800b878 <HAL_DMA_Init+0x38c>
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	4a31      	ldr	r2, [pc, #196]	@ (800b924 <HAL_DMA_Init+0x438>)
 800b860:	4293      	cmp	r3, r2
 800b862:	d009      	beq.n	800b878 <HAL_DMA_Init+0x38c>
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	4a2f      	ldr	r2, [pc, #188]	@ (800b928 <HAL_DMA_Init+0x43c>)
 800b86a:	4293      	cmp	r3, r2
 800b86c:	d004      	beq.n	800b878 <HAL_DMA_Init+0x38c>
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	4a2e      	ldr	r2, [pc, #184]	@ (800b92c <HAL_DMA_Init+0x440>)
 800b874:	4293      	cmp	r3, r2
 800b876:	d101      	bne.n	800b87c <HAL_DMA_Init+0x390>
 800b878:	2301      	movs	r3, #1
 800b87a:	e000      	b.n	800b87e <HAL_DMA_Init+0x392>
 800b87c:	2300      	movs	r3, #0
 800b87e:	2b00      	cmp	r3, #0
 800b880:	f000 8092 	beq.w	800b9a8 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	4a21      	ldr	r2, [pc, #132]	@ (800b910 <HAL_DMA_Init+0x424>)
 800b88a:	4293      	cmp	r3, r2
 800b88c:	d021      	beq.n	800b8d2 <HAL_DMA_Init+0x3e6>
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	4a20      	ldr	r2, [pc, #128]	@ (800b914 <HAL_DMA_Init+0x428>)
 800b894:	4293      	cmp	r3, r2
 800b896:	d01c      	beq.n	800b8d2 <HAL_DMA_Init+0x3e6>
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	4a1e      	ldr	r2, [pc, #120]	@ (800b918 <HAL_DMA_Init+0x42c>)
 800b89e:	4293      	cmp	r3, r2
 800b8a0:	d017      	beq.n	800b8d2 <HAL_DMA_Init+0x3e6>
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	4a1d      	ldr	r2, [pc, #116]	@ (800b91c <HAL_DMA_Init+0x430>)
 800b8a8:	4293      	cmp	r3, r2
 800b8aa:	d012      	beq.n	800b8d2 <HAL_DMA_Init+0x3e6>
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	4a1b      	ldr	r2, [pc, #108]	@ (800b920 <HAL_DMA_Init+0x434>)
 800b8b2:	4293      	cmp	r3, r2
 800b8b4:	d00d      	beq.n	800b8d2 <HAL_DMA_Init+0x3e6>
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	4a1a      	ldr	r2, [pc, #104]	@ (800b924 <HAL_DMA_Init+0x438>)
 800b8bc:	4293      	cmp	r3, r2
 800b8be:	d008      	beq.n	800b8d2 <HAL_DMA_Init+0x3e6>
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	4a18      	ldr	r2, [pc, #96]	@ (800b928 <HAL_DMA_Init+0x43c>)
 800b8c6:	4293      	cmp	r3, r2
 800b8c8:	d003      	beq.n	800b8d2 <HAL_DMA_Init+0x3e6>
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	4a17      	ldr	r2, [pc, #92]	@ (800b92c <HAL_DMA_Init+0x440>)
 800b8d0:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	2202      	movs	r2, #2
 800b8d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	2200      	movs	r2, #0
 800b8de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800b8ea:	697a      	ldr	r2, [r7, #20]
 800b8ec:	4b10      	ldr	r3, [pc, #64]	@ (800b930 <HAL_DMA_Init+0x444>)
 800b8ee:	4013      	ands	r3, r2
 800b8f0:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	689b      	ldr	r3, [r3, #8]
 800b8f6:	2b40      	cmp	r3, #64	@ 0x40
 800b8f8:	d01c      	beq.n	800b934 <HAL_DMA_Init+0x448>
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	689b      	ldr	r3, [r3, #8]
 800b8fe:	2b80      	cmp	r3, #128	@ 0x80
 800b900:	d102      	bne.n	800b908 <HAL_DMA_Init+0x41c>
 800b902:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800b906:	e016      	b.n	800b936 <HAL_DMA_Init+0x44a>
 800b908:	2300      	movs	r3, #0
 800b90a:	e014      	b.n	800b936 <HAL_DMA_Init+0x44a>
 800b90c:	fe10803f 	.word	0xfe10803f
 800b910:	58025408 	.word	0x58025408
 800b914:	5802541c 	.word	0x5802541c
 800b918:	58025430 	.word	0x58025430
 800b91c:	58025444 	.word	0x58025444
 800b920:	58025458 	.word	0x58025458
 800b924:	5802546c 	.word	0x5802546c
 800b928:	58025480 	.word	0x58025480
 800b92c:	58025494 	.word	0x58025494
 800b930:	fffe000f 	.word	0xfffe000f
 800b934:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800b936:	687a      	ldr	r2, [r7, #4]
 800b938:	68d2      	ldr	r2, [r2, #12]
 800b93a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800b93c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	691b      	ldr	r3, [r3, #16]
 800b942:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800b944:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	695b      	ldr	r3, [r3, #20]
 800b94a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800b94c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	699b      	ldr	r3, [r3, #24]
 800b952:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800b954:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	69db      	ldr	r3, [r3, #28]
 800b95a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800b95c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	6a1b      	ldr	r3, [r3, #32]
 800b962:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800b964:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800b966:	697a      	ldr	r2, [r7, #20]
 800b968:	4313      	orrs	r3, r2
 800b96a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	697a      	ldr	r2, [r7, #20]
 800b972:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	461a      	mov	r2, r3
 800b97a:	4b6e      	ldr	r3, [pc, #440]	@ (800bb34 <HAL_DMA_Init+0x648>)
 800b97c:	4413      	add	r3, r2
 800b97e:	4a6e      	ldr	r2, [pc, #440]	@ (800bb38 <HAL_DMA_Init+0x64c>)
 800b980:	fba2 2303 	umull	r2, r3, r2, r3
 800b984:	091b      	lsrs	r3, r3, #4
 800b986:	009a      	lsls	r2, r3, #2
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800b98c:	6878      	ldr	r0, [r7, #4]
 800b98e:	f002 f9c3 	bl	800dd18 <DMA_CalcBaseAndBitshift>
 800b992:	4603      	mov	r3, r0
 800b994:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b99a:	f003 031f 	and.w	r3, r3, #31
 800b99e:	2201      	movs	r2, #1
 800b9a0:	409a      	lsls	r2, r3
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	605a      	str	r2, [r3, #4]
 800b9a6:	e008      	b.n	800b9ba <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	2240      	movs	r2, #64	@ 0x40
 800b9ac:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	2203      	movs	r2, #3
 800b9b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 800b9b6:	2301      	movs	r3, #1
 800b9b8:	e0b7      	b.n	800bb2a <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	4a5f      	ldr	r2, [pc, #380]	@ (800bb3c <HAL_DMA_Init+0x650>)
 800b9c0:	4293      	cmp	r3, r2
 800b9c2:	d072      	beq.n	800baaa <HAL_DMA_Init+0x5be>
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	4a5d      	ldr	r2, [pc, #372]	@ (800bb40 <HAL_DMA_Init+0x654>)
 800b9ca:	4293      	cmp	r3, r2
 800b9cc:	d06d      	beq.n	800baaa <HAL_DMA_Init+0x5be>
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	4a5c      	ldr	r2, [pc, #368]	@ (800bb44 <HAL_DMA_Init+0x658>)
 800b9d4:	4293      	cmp	r3, r2
 800b9d6:	d068      	beq.n	800baaa <HAL_DMA_Init+0x5be>
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	4a5a      	ldr	r2, [pc, #360]	@ (800bb48 <HAL_DMA_Init+0x65c>)
 800b9de:	4293      	cmp	r3, r2
 800b9e0:	d063      	beq.n	800baaa <HAL_DMA_Init+0x5be>
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	4a59      	ldr	r2, [pc, #356]	@ (800bb4c <HAL_DMA_Init+0x660>)
 800b9e8:	4293      	cmp	r3, r2
 800b9ea:	d05e      	beq.n	800baaa <HAL_DMA_Init+0x5be>
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	4a57      	ldr	r2, [pc, #348]	@ (800bb50 <HAL_DMA_Init+0x664>)
 800b9f2:	4293      	cmp	r3, r2
 800b9f4:	d059      	beq.n	800baaa <HAL_DMA_Init+0x5be>
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	4a56      	ldr	r2, [pc, #344]	@ (800bb54 <HAL_DMA_Init+0x668>)
 800b9fc:	4293      	cmp	r3, r2
 800b9fe:	d054      	beq.n	800baaa <HAL_DMA_Init+0x5be>
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	4a54      	ldr	r2, [pc, #336]	@ (800bb58 <HAL_DMA_Init+0x66c>)
 800ba06:	4293      	cmp	r3, r2
 800ba08:	d04f      	beq.n	800baaa <HAL_DMA_Init+0x5be>
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	4a53      	ldr	r2, [pc, #332]	@ (800bb5c <HAL_DMA_Init+0x670>)
 800ba10:	4293      	cmp	r3, r2
 800ba12:	d04a      	beq.n	800baaa <HAL_DMA_Init+0x5be>
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	4a51      	ldr	r2, [pc, #324]	@ (800bb60 <HAL_DMA_Init+0x674>)
 800ba1a:	4293      	cmp	r3, r2
 800ba1c:	d045      	beq.n	800baaa <HAL_DMA_Init+0x5be>
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	4a50      	ldr	r2, [pc, #320]	@ (800bb64 <HAL_DMA_Init+0x678>)
 800ba24:	4293      	cmp	r3, r2
 800ba26:	d040      	beq.n	800baaa <HAL_DMA_Init+0x5be>
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	4a4e      	ldr	r2, [pc, #312]	@ (800bb68 <HAL_DMA_Init+0x67c>)
 800ba2e:	4293      	cmp	r3, r2
 800ba30:	d03b      	beq.n	800baaa <HAL_DMA_Init+0x5be>
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	4a4d      	ldr	r2, [pc, #308]	@ (800bb6c <HAL_DMA_Init+0x680>)
 800ba38:	4293      	cmp	r3, r2
 800ba3a:	d036      	beq.n	800baaa <HAL_DMA_Init+0x5be>
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	4a4b      	ldr	r2, [pc, #300]	@ (800bb70 <HAL_DMA_Init+0x684>)
 800ba42:	4293      	cmp	r3, r2
 800ba44:	d031      	beq.n	800baaa <HAL_DMA_Init+0x5be>
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	4a4a      	ldr	r2, [pc, #296]	@ (800bb74 <HAL_DMA_Init+0x688>)
 800ba4c:	4293      	cmp	r3, r2
 800ba4e:	d02c      	beq.n	800baaa <HAL_DMA_Init+0x5be>
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	4a48      	ldr	r2, [pc, #288]	@ (800bb78 <HAL_DMA_Init+0x68c>)
 800ba56:	4293      	cmp	r3, r2
 800ba58:	d027      	beq.n	800baaa <HAL_DMA_Init+0x5be>
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	4a47      	ldr	r2, [pc, #284]	@ (800bb7c <HAL_DMA_Init+0x690>)
 800ba60:	4293      	cmp	r3, r2
 800ba62:	d022      	beq.n	800baaa <HAL_DMA_Init+0x5be>
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	4a45      	ldr	r2, [pc, #276]	@ (800bb80 <HAL_DMA_Init+0x694>)
 800ba6a:	4293      	cmp	r3, r2
 800ba6c:	d01d      	beq.n	800baaa <HAL_DMA_Init+0x5be>
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	4a44      	ldr	r2, [pc, #272]	@ (800bb84 <HAL_DMA_Init+0x698>)
 800ba74:	4293      	cmp	r3, r2
 800ba76:	d018      	beq.n	800baaa <HAL_DMA_Init+0x5be>
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	4a42      	ldr	r2, [pc, #264]	@ (800bb88 <HAL_DMA_Init+0x69c>)
 800ba7e:	4293      	cmp	r3, r2
 800ba80:	d013      	beq.n	800baaa <HAL_DMA_Init+0x5be>
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	4a41      	ldr	r2, [pc, #260]	@ (800bb8c <HAL_DMA_Init+0x6a0>)
 800ba88:	4293      	cmp	r3, r2
 800ba8a:	d00e      	beq.n	800baaa <HAL_DMA_Init+0x5be>
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	4a3f      	ldr	r2, [pc, #252]	@ (800bb90 <HAL_DMA_Init+0x6a4>)
 800ba92:	4293      	cmp	r3, r2
 800ba94:	d009      	beq.n	800baaa <HAL_DMA_Init+0x5be>
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	4a3e      	ldr	r2, [pc, #248]	@ (800bb94 <HAL_DMA_Init+0x6a8>)
 800ba9c:	4293      	cmp	r3, r2
 800ba9e:	d004      	beq.n	800baaa <HAL_DMA_Init+0x5be>
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	4a3c      	ldr	r2, [pc, #240]	@ (800bb98 <HAL_DMA_Init+0x6ac>)
 800baa6:	4293      	cmp	r3, r2
 800baa8:	d101      	bne.n	800baae <HAL_DMA_Init+0x5c2>
 800baaa:	2301      	movs	r3, #1
 800baac:	e000      	b.n	800bab0 <HAL_DMA_Init+0x5c4>
 800baae:	2300      	movs	r3, #0
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d032      	beq.n	800bb1a <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800bab4:	6878      	ldr	r0, [r7, #4]
 800bab6:	f002 fa5d 	bl	800df74 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	689b      	ldr	r3, [r3, #8]
 800babe:	2b80      	cmp	r3, #128	@ 0x80
 800bac0:	d102      	bne.n	800bac8 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	2200      	movs	r2, #0
 800bac6:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	685a      	ldr	r2, [r3, #4]
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bad0:	b2d2      	uxtb	r2, r2
 800bad2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bad8:	687a      	ldr	r2, [r7, #4]
 800bada:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800badc:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	685b      	ldr	r3, [r3, #4]
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d010      	beq.n	800bb08 <HAL_DMA_Init+0x61c>
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	685b      	ldr	r3, [r3, #4]
 800baea:	2b08      	cmp	r3, #8
 800baec:	d80c      	bhi.n	800bb08 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800baee:	6878      	ldr	r0, [r7, #4]
 800baf0:	f002 fada 	bl	800e0a8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800baf8:	2200      	movs	r2, #0
 800bafa:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bb00:	687a      	ldr	r2, [r7, #4]
 800bb02:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800bb04:	605a      	str	r2, [r3, #4]
 800bb06:	e008      	b.n	800bb1a <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	2200      	movs	r2, #0
 800bb0c:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	2200      	movs	r2, #0
 800bb12:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	2200      	movs	r2, #0
 800bb18:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	2200      	movs	r2, #0
 800bb1e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	2201      	movs	r2, #1
 800bb24:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800bb28:	2300      	movs	r3, #0
}
 800bb2a:	4618      	mov	r0, r3
 800bb2c:	3718      	adds	r7, #24
 800bb2e:	46bd      	mov	sp, r7
 800bb30:	bd80      	pop	{r7, pc}
 800bb32:	bf00      	nop
 800bb34:	a7fdabf8 	.word	0xa7fdabf8
 800bb38:	cccccccd 	.word	0xcccccccd
 800bb3c:	40020010 	.word	0x40020010
 800bb40:	40020028 	.word	0x40020028
 800bb44:	40020040 	.word	0x40020040
 800bb48:	40020058 	.word	0x40020058
 800bb4c:	40020070 	.word	0x40020070
 800bb50:	40020088 	.word	0x40020088
 800bb54:	400200a0 	.word	0x400200a0
 800bb58:	400200b8 	.word	0x400200b8
 800bb5c:	40020410 	.word	0x40020410
 800bb60:	40020428 	.word	0x40020428
 800bb64:	40020440 	.word	0x40020440
 800bb68:	40020458 	.word	0x40020458
 800bb6c:	40020470 	.word	0x40020470
 800bb70:	40020488 	.word	0x40020488
 800bb74:	400204a0 	.word	0x400204a0
 800bb78:	400204b8 	.word	0x400204b8
 800bb7c:	58025408 	.word	0x58025408
 800bb80:	5802541c 	.word	0x5802541c
 800bb84:	58025430 	.word	0x58025430
 800bb88:	58025444 	.word	0x58025444
 800bb8c:	58025458 	.word	0x58025458
 800bb90:	5802546c 	.word	0x5802546c
 800bb94:	58025480 	.word	0x58025480
 800bb98:	58025494 	.word	0x58025494

0800bb9c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800bb9c:	b580      	push	{r7, lr}
 800bb9e:	b086      	sub	sp, #24
 800bba0:	af00      	add	r7, sp, #0
 800bba2:	60f8      	str	r0, [r7, #12]
 800bba4:	60b9      	str	r1, [r7, #8]
 800bba6:	607a      	str	r2, [r7, #4]
 800bba8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800bbaa:	2300      	movs	r3, #0
 800bbac:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d101      	bne.n	800bbb8 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 800bbb4:	2301      	movs	r3, #1
 800bbb6:	e226      	b.n	800c006 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800bbbe:	2b01      	cmp	r3, #1
 800bbc0:	d101      	bne.n	800bbc6 <HAL_DMA_Start_IT+0x2a>
 800bbc2:	2302      	movs	r3, #2
 800bbc4:	e21f      	b.n	800c006 <HAL_DMA_Start_IT+0x46a>
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	2201      	movs	r2, #1
 800bbca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800bbd4:	b2db      	uxtb	r3, r3
 800bbd6:	2b01      	cmp	r3, #1
 800bbd8:	f040 820a 	bne.w	800bff0 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	2202      	movs	r2, #2
 800bbe0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	2200      	movs	r2, #0
 800bbe8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	4a68      	ldr	r2, [pc, #416]	@ (800bd90 <HAL_DMA_Start_IT+0x1f4>)
 800bbf0:	4293      	cmp	r3, r2
 800bbf2:	d04a      	beq.n	800bc8a <HAL_DMA_Start_IT+0xee>
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	4a66      	ldr	r2, [pc, #408]	@ (800bd94 <HAL_DMA_Start_IT+0x1f8>)
 800bbfa:	4293      	cmp	r3, r2
 800bbfc:	d045      	beq.n	800bc8a <HAL_DMA_Start_IT+0xee>
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	4a65      	ldr	r2, [pc, #404]	@ (800bd98 <HAL_DMA_Start_IT+0x1fc>)
 800bc04:	4293      	cmp	r3, r2
 800bc06:	d040      	beq.n	800bc8a <HAL_DMA_Start_IT+0xee>
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	4a63      	ldr	r2, [pc, #396]	@ (800bd9c <HAL_DMA_Start_IT+0x200>)
 800bc0e:	4293      	cmp	r3, r2
 800bc10:	d03b      	beq.n	800bc8a <HAL_DMA_Start_IT+0xee>
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	4a62      	ldr	r2, [pc, #392]	@ (800bda0 <HAL_DMA_Start_IT+0x204>)
 800bc18:	4293      	cmp	r3, r2
 800bc1a:	d036      	beq.n	800bc8a <HAL_DMA_Start_IT+0xee>
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	4a60      	ldr	r2, [pc, #384]	@ (800bda4 <HAL_DMA_Start_IT+0x208>)
 800bc22:	4293      	cmp	r3, r2
 800bc24:	d031      	beq.n	800bc8a <HAL_DMA_Start_IT+0xee>
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	4a5f      	ldr	r2, [pc, #380]	@ (800bda8 <HAL_DMA_Start_IT+0x20c>)
 800bc2c:	4293      	cmp	r3, r2
 800bc2e:	d02c      	beq.n	800bc8a <HAL_DMA_Start_IT+0xee>
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	4a5d      	ldr	r2, [pc, #372]	@ (800bdac <HAL_DMA_Start_IT+0x210>)
 800bc36:	4293      	cmp	r3, r2
 800bc38:	d027      	beq.n	800bc8a <HAL_DMA_Start_IT+0xee>
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	4a5c      	ldr	r2, [pc, #368]	@ (800bdb0 <HAL_DMA_Start_IT+0x214>)
 800bc40:	4293      	cmp	r3, r2
 800bc42:	d022      	beq.n	800bc8a <HAL_DMA_Start_IT+0xee>
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	4a5a      	ldr	r2, [pc, #360]	@ (800bdb4 <HAL_DMA_Start_IT+0x218>)
 800bc4a:	4293      	cmp	r3, r2
 800bc4c:	d01d      	beq.n	800bc8a <HAL_DMA_Start_IT+0xee>
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	4a59      	ldr	r2, [pc, #356]	@ (800bdb8 <HAL_DMA_Start_IT+0x21c>)
 800bc54:	4293      	cmp	r3, r2
 800bc56:	d018      	beq.n	800bc8a <HAL_DMA_Start_IT+0xee>
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	4a57      	ldr	r2, [pc, #348]	@ (800bdbc <HAL_DMA_Start_IT+0x220>)
 800bc5e:	4293      	cmp	r3, r2
 800bc60:	d013      	beq.n	800bc8a <HAL_DMA_Start_IT+0xee>
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	4a56      	ldr	r2, [pc, #344]	@ (800bdc0 <HAL_DMA_Start_IT+0x224>)
 800bc68:	4293      	cmp	r3, r2
 800bc6a:	d00e      	beq.n	800bc8a <HAL_DMA_Start_IT+0xee>
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	4a54      	ldr	r2, [pc, #336]	@ (800bdc4 <HAL_DMA_Start_IT+0x228>)
 800bc72:	4293      	cmp	r3, r2
 800bc74:	d009      	beq.n	800bc8a <HAL_DMA_Start_IT+0xee>
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	4a53      	ldr	r2, [pc, #332]	@ (800bdc8 <HAL_DMA_Start_IT+0x22c>)
 800bc7c:	4293      	cmp	r3, r2
 800bc7e:	d004      	beq.n	800bc8a <HAL_DMA_Start_IT+0xee>
 800bc80:	68fb      	ldr	r3, [r7, #12]
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	4a51      	ldr	r2, [pc, #324]	@ (800bdcc <HAL_DMA_Start_IT+0x230>)
 800bc86:	4293      	cmp	r3, r2
 800bc88:	d108      	bne.n	800bc9c <HAL_DMA_Start_IT+0x100>
 800bc8a:	68fb      	ldr	r3, [r7, #12]
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	681a      	ldr	r2, [r3, #0]
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	f022 0201 	bic.w	r2, r2, #1
 800bc98:	601a      	str	r2, [r3, #0]
 800bc9a:	e007      	b.n	800bcac <HAL_DMA_Start_IT+0x110>
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	681a      	ldr	r2, [r3, #0]
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	f022 0201 	bic.w	r2, r2, #1
 800bcaa:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800bcac:	683b      	ldr	r3, [r7, #0]
 800bcae:	687a      	ldr	r2, [r7, #4]
 800bcb0:	68b9      	ldr	r1, [r7, #8]
 800bcb2:	68f8      	ldr	r0, [r7, #12]
 800bcb4:	f001 fe84 	bl	800d9c0 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	4a34      	ldr	r2, [pc, #208]	@ (800bd90 <HAL_DMA_Start_IT+0x1f4>)
 800bcbe:	4293      	cmp	r3, r2
 800bcc0:	d04a      	beq.n	800bd58 <HAL_DMA_Start_IT+0x1bc>
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	4a33      	ldr	r2, [pc, #204]	@ (800bd94 <HAL_DMA_Start_IT+0x1f8>)
 800bcc8:	4293      	cmp	r3, r2
 800bcca:	d045      	beq.n	800bd58 <HAL_DMA_Start_IT+0x1bc>
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	4a31      	ldr	r2, [pc, #196]	@ (800bd98 <HAL_DMA_Start_IT+0x1fc>)
 800bcd2:	4293      	cmp	r3, r2
 800bcd4:	d040      	beq.n	800bd58 <HAL_DMA_Start_IT+0x1bc>
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	4a30      	ldr	r2, [pc, #192]	@ (800bd9c <HAL_DMA_Start_IT+0x200>)
 800bcdc:	4293      	cmp	r3, r2
 800bcde:	d03b      	beq.n	800bd58 <HAL_DMA_Start_IT+0x1bc>
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	4a2e      	ldr	r2, [pc, #184]	@ (800bda0 <HAL_DMA_Start_IT+0x204>)
 800bce6:	4293      	cmp	r3, r2
 800bce8:	d036      	beq.n	800bd58 <HAL_DMA_Start_IT+0x1bc>
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	4a2d      	ldr	r2, [pc, #180]	@ (800bda4 <HAL_DMA_Start_IT+0x208>)
 800bcf0:	4293      	cmp	r3, r2
 800bcf2:	d031      	beq.n	800bd58 <HAL_DMA_Start_IT+0x1bc>
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	4a2b      	ldr	r2, [pc, #172]	@ (800bda8 <HAL_DMA_Start_IT+0x20c>)
 800bcfa:	4293      	cmp	r3, r2
 800bcfc:	d02c      	beq.n	800bd58 <HAL_DMA_Start_IT+0x1bc>
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	4a2a      	ldr	r2, [pc, #168]	@ (800bdac <HAL_DMA_Start_IT+0x210>)
 800bd04:	4293      	cmp	r3, r2
 800bd06:	d027      	beq.n	800bd58 <HAL_DMA_Start_IT+0x1bc>
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	4a28      	ldr	r2, [pc, #160]	@ (800bdb0 <HAL_DMA_Start_IT+0x214>)
 800bd0e:	4293      	cmp	r3, r2
 800bd10:	d022      	beq.n	800bd58 <HAL_DMA_Start_IT+0x1bc>
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	4a27      	ldr	r2, [pc, #156]	@ (800bdb4 <HAL_DMA_Start_IT+0x218>)
 800bd18:	4293      	cmp	r3, r2
 800bd1a:	d01d      	beq.n	800bd58 <HAL_DMA_Start_IT+0x1bc>
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	4a25      	ldr	r2, [pc, #148]	@ (800bdb8 <HAL_DMA_Start_IT+0x21c>)
 800bd22:	4293      	cmp	r3, r2
 800bd24:	d018      	beq.n	800bd58 <HAL_DMA_Start_IT+0x1bc>
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	4a24      	ldr	r2, [pc, #144]	@ (800bdbc <HAL_DMA_Start_IT+0x220>)
 800bd2c:	4293      	cmp	r3, r2
 800bd2e:	d013      	beq.n	800bd58 <HAL_DMA_Start_IT+0x1bc>
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	4a22      	ldr	r2, [pc, #136]	@ (800bdc0 <HAL_DMA_Start_IT+0x224>)
 800bd36:	4293      	cmp	r3, r2
 800bd38:	d00e      	beq.n	800bd58 <HAL_DMA_Start_IT+0x1bc>
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	4a21      	ldr	r2, [pc, #132]	@ (800bdc4 <HAL_DMA_Start_IT+0x228>)
 800bd40:	4293      	cmp	r3, r2
 800bd42:	d009      	beq.n	800bd58 <HAL_DMA_Start_IT+0x1bc>
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	4a1f      	ldr	r2, [pc, #124]	@ (800bdc8 <HAL_DMA_Start_IT+0x22c>)
 800bd4a:	4293      	cmp	r3, r2
 800bd4c:	d004      	beq.n	800bd58 <HAL_DMA_Start_IT+0x1bc>
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	681b      	ldr	r3, [r3, #0]
 800bd52:	4a1e      	ldr	r2, [pc, #120]	@ (800bdcc <HAL_DMA_Start_IT+0x230>)
 800bd54:	4293      	cmp	r3, r2
 800bd56:	d101      	bne.n	800bd5c <HAL_DMA_Start_IT+0x1c0>
 800bd58:	2301      	movs	r3, #1
 800bd5a:	e000      	b.n	800bd5e <HAL_DMA_Start_IT+0x1c2>
 800bd5c:	2300      	movs	r3, #0
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	d036      	beq.n	800bdd0 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	f023 021e 	bic.w	r2, r3, #30
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	f042 0216 	orr.w	r2, r2, #22
 800bd74:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d03e      	beq.n	800bdfc <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	681a      	ldr	r2, [r3, #0]
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	f042 0208 	orr.w	r2, r2, #8
 800bd8c:	601a      	str	r2, [r3, #0]
 800bd8e:	e035      	b.n	800bdfc <HAL_DMA_Start_IT+0x260>
 800bd90:	40020010 	.word	0x40020010
 800bd94:	40020028 	.word	0x40020028
 800bd98:	40020040 	.word	0x40020040
 800bd9c:	40020058 	.word	0x40020058
 800bda0:	40020070 	.word	0x40020070
 800bda4:	40020088 	.word	0x40020088
 800bda8:	400200a0 	.word	0x400200a0
 800bdac:	400200b8 	.word	0x400200b8
 800bdb0:	40020410 	.word	0x40020410
 800bdb4:	40020428 	.word	0x40020428
 800bdb8:	40020440 	.word	0x40020440
 800bdbc:	40020458 	.word	0x40020458
 800bdc0:	40020470 	.word	0x40020470
 800bdc4:	40020488 	.word	0x40020488
 800bdc8:	400204a0 	.word	0x400204a0
 800bdcc:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	f023 020e 	bic.w	r2, r3, #14
 800bdda:	68fb      	ldr	r3, [r7, #12]
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	f042 020a 	orr.w	r2, r2, #10
 800bde2:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d007      	beq.n	800bdfc <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	681a      	ldr	r2, [r3, #0]
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	f042 0204 	orr.w	r2, r2, #4
 800bdfa:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	4a83      	ldr	r2, [pc, #524]	@ (800c010 <HAL_DMA_Start_IT+0x474>)
 800be02:	4293      	cmp	r3, r2
 800be04:	d072      	beq.n	800beec <HAL_DMA_Start_IT+0x350>
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	4a82      	ldr	r2, [pc, #520]	@ (800c014 <HAL_DMA_Start_IT+0x478>)
 800be0c:	4293      	cmp	r3, r2
 800be0e:	d06d      	beq.n	800beec <HAL_DMA_Start_IT+0x350>
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	4a80      	ldr	r2, [pc, #512]	@ (800c018 <HAL_DMA_Start_IT+0x47c>)
 800be16:	4293      	cmp	r3, r2
 800be18:	d068      	beq.n	800beec <HAL_DMA_Start_IT+0x350>
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	4a7f      	ldr	r2, [pc, #508]	@ (800c01c <HAL_DMA_Start_IT+0x480>)
 800be20:	4293      	cmp	r3, r2
 800be22:	d063      	beq.n	800beec <HAL_DMA_Start_IT+0x350>
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	4a7d      	ldr	r2, [pc, #500]	@ (800c020 <HAL_DMA_Start_IT+0x484>)
 800be2a:	4293      	cmp	r3, r2
 800be2c:	d05e      	beq.n	800beec <HAL_DMA_Start_IT+0x350>
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	4a7c      	ldr	r2, [pc, #496]	@ (800c024 <HAL_DMA_Start_IT+0x488>)
 800be34:	4293      	cmp	r3, r2
 800be36:	d059      	beq.n	800beec <HAL_DMA_Start_IT+0x350>
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	4a7a      	ldr	r2, [pc, #488]	@ (800c028 <HAL_DMA_Start_IT+0x48c>)
 800be3e:	4293      	cmp	r3, r2
 800be40:	d054      	beq.n	800beec <HAL_DMA_Start_IT+0x350>
 800be42:	68fb      	ldr	r3, [r7, #12]
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	4a79      	ldr	r2, [pc, #484]	@ (800c02c <HAL_DMA_Start_IT+0x490>)
 800be48:	4293      	cmp	r3, r2
 800be4a:	d04f      	beq.n	800beec <HAL_DMA_Start_IT+0x350>
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	4a77      	ldr	r2, [pc, #476]	@ (800c030 <HAL_DMA_Start_IT+0x494>)
 800be52:	4293      	cmp	r3, r2
 800be54:	d04a      	beq.n	800beec <HAL_DMA_Start_IT+0x350>
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	4a76      	ldr	r2, [pc, #472]	@ (800c034 <HAL_DMA_Start_IT+0x498>)
 800be5c:	4293      	cmp	r3, r2
 800be5e:	d045      	beq.n	800beec <HAL_DMA_Start_IT+0x350>
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	4a74      	ldr	r2, [pc, #464]	@ (800c038 <HAL_DMA_Start_IT+0x49c>)
 800be66:	4293      	cmp	r3, r2
 800be68:	d040      	beq.n	800beec <HAL_DMA_Start_IT+0x350>
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	4a73      	ldr	r2, [pc, #460]	@ (800c03c <HAL_DMA_Start_IT+0x4a0>)
 800be70:	4293      	cmp	r3, r2
 800be72:	d03b      	beq.n	800beec <HAL_DMA_Start_IT+0x350>
 800be74:	68fb      	ldr	r3, [r7, #12]
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	4a71      	ldr	r2, [pc, #452]	@ (800c040 <HAL_DMA_Start_IT+0x4a4>)
 800be7a:	4293      	cmp	r3, r2
 800be7c:	d036      	beq.n	800beec <HAL_DMA_Start_IT+0x350>
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	4a70      	ldr	r2, [pc, #448]	@ (800c044 <HAL_DMA_Start_IT+0x4a8>)
 800be84:	4293      	cmp	r3, r2
 800be86:	d031      	beq.n	800beec <HAL_DMA_Start_IT+0x350>
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	4a6e      	ldr	r2, [pc, #440]	@ (800c048 <HAL_DMA_Start_IT+0x4ac>)
 800be8e:	4293      	cmp	r3, r2
 800be90:	d02c      	beq.n	800beec <HAL_DMA_Start_IT+0x350>
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	4a6d      	ldr	r2, [pc, #436]	@ (800c04c <HAL_DMA_Start_IT+0x4b0>)
 800be98:	4293      	cmp	r3, r2
 800be9a:	d027      	beq.n	800beec <HAL_DMA_Start_IT+0x350>
 800be9c:	68fb      	ldr	r3, [r7, #12]
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	4a6b      	ldr	r2, [pc, #428]	@ (800c050 <HAL_DMA_Start_IT+0x4b4>)
 800bea2:	4293      	cmp	r3, r2
 800bea4:	d022      	beq.n	800beec <HAL_DMA_Start_IT+0x350>
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	4a6a      	ldr	r2, [pc, #424]	@ (800c054 <HAL_DMA_Start_IT+0x4b8>)
 800beac:	4293      	cmp	r3, r2
 800beae:	d01d      	beq.n	800beec <HAL_DMA_Start_IT+0x350>
 800beb0:	68fb      	ldr	r3, [r7, #12]
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	4a68      	ldr	r2, [pc, #416]	@ (800c058 <HAL_DMA_Start_IT+0x4bc>)
 800beb6:	4293      	cmp	r3, r2
 800beb8:	d018      	beq.n	800beec <HAL_DMA_Start_IT+0x350>
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	4a67      	ldr	r2, [pc, #412]	@ (800c05c <HAL_DMA_Start_IT+0x4c0>)
 800bec0:	4293      	cmp	r3, r2
 800bec2:	d013      	beq.n	800beec <HAL_DMA_Start_IT+0x350>
 800bec4:	68fb      	ldr	r3, [r7, #12]
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	4a65      	ldr	r2, [pc, #404]	@ (800c060 <HAL_DMA_Start_IT+0x4c4>)
 800beca:	4293      	cmp	r3, r2
 800becc:	d00e      	beq.n	800beec <HAL_DMA_Start_IT+0x350>
 800bece:	68fb      	ldr	r3, [r7, #12]
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	4a64      	ldr	r2, [pc, #400]	@ (800c064 <HAL_DMA_Start_IT+0x4c8>)
 800bed4:	4293      	cmp	r3, r2
 800bed6:	d009      	beq.n	800beec <HAL_DMA_Start_IT+0x350>
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	4a62      	ldr	r2, [pc, #392]	@ (800c068 <HAL_DMA_Start_IT+0x4cc>)
 800bede:	4293      	cmp	r3, r2
 800bee0:	d004      	beq.n	800beec <HAL_DMA_Start_IT+0x350>
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	4a61      	ldr	r2, [pc, #388]	@ (800c06c <HAL_DMA_Start_IT+0x4d0>)
 800bee8:	4293      	cmp	r3, r2
 800beea:	d101      	bne.n	800bef0 <HAL_DMA_Start_IT+0x354>
 800beec:	2301      	movs	r3, #1
 800beee:	e000      	b.n	800bef2 <HAL_DMA_Start_IT+0x356>
 800bef0:	2300      	movs	r3, #0
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d01a      	beq.n	800bf2c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d007      	beq.n	800bf14 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800bf04:	68fb      	ldr	r3, [r7, #12]
 800bf06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bf08:	681a      	ldr	r2, [r3, #0]
 800bf0a:	68fb      	ldr	r3, [r7, #12]
 800bf0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bf0e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800bf12:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d007      	beq.n	800bf2c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bf20:	681a      	ldr	r2, [r3, #0]
 800bf22:	68fb      	ldr	r3, [r7, #12]
 800bf24:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bf26:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800bf2a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	4a37      	ldr	r2, [pc, #220]	@ (800c010 <HAL_DMA_Start_IT+0x474>)
 800bf32:	4293      	cmp	r3, r2
 800bf34:	d04a      	beq.n	800bfcc <HAL_DMA_Start_IT+0x430>
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	4a36      	ldr	r2, [pc, #216]	@ (800c014 <HAL_DMA_Start_IT+0x478>)
 800bf3c:	4293      	cmp	r3, r2
 800bf3e:	d045      	beq.n	800bfcc <HAL_DMA_Start_IT+0x430>
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	4a34      	ldr	r2, [pc, #208]	@ (800c018 <HAL_DMA_Start_IT+0x47c>)
 800bf46:	4293      	cmp	r3, r2
 800bf48:	d040      	beq.n	800bfcc <HAL_DMA_Start_IT+0x430>
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	4a33      	ldr	r2, [pc, #204]	@ (800c01c <HAL_DMA_Start_IT+0x480>)
 800bf50:	4293      	cmp	r3, r2
 800bf52:	d03b      	beq.n	800bfcc <HAL_DMA_Start_IT+0x430>
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	4a31      	ldr	r2, [pc, #196]	@ (800c020 <HAL_DMA_Start_IT+0x484>)
 800bf5a:	4293      	cmp	r3, r2
 800bf5c:	d036      	beq.n	800bfcc <HAL_DMA_Start_IT+0x430>
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	4a30      	ldr	r2, [pc, #192]	@ (800c024 <HAL_DMA_Start_IT+0x488>)
 800bf64:	4293      	cmp	r3, r2
 800bf66:	d031      	beq.n	800bfcc <HAL_DMA_Start_IT+0x430>
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	4a2e      	ldr	r2, [pc, #184]	@ (800c028 <HAL_DMA_Start_IT+0x48c>)
 800bf6e:	4293      	cmp	r3, r2
 800bf70:	d02c      	beq.n	800bfcc <HAL_DMA_Start_IT+0x430>
 800bf72:	68fb      	ldr	r3, [r7, #12]
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	4a2d      	ldr	r2, [pc, #180]	@ (800c02c <HAL_DMA_Start_IT+0x490>)
 800bf78:	4293      	cmp	r3, r2
 800bf7a:	d027      	beq.n	800bfcc <HAL_DMA_Start_IT+0x430>
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	4a2b      	ldr	r2, [pc, #172]	@ (800c030 <HAL_DMA_Start_IT+0x494>)
 800bf82:	4293      	cmp	r3, r2
 800bf84:	d022      	beq.n	800bfcc <HAL_DMA_Start_IT+0x430>
 800bf86:	68fb      	ldr	r3, [r7, #12]
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	4a2a      	ldr	r2, [pc, #168]	@ (800c034 <HAL_DMA_Start_IT+0x498>)
 800bf8c:	4293      	cmp	r3, r2
 800bf8e:	d01d      	beq.n	800bfcc <HAL_DMA_Start_IT+0x430>
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	4a28      	ldr	r2, [pc, #160]	@ (800c038 <HAL_DMA_Start_IT+0x49c>)
 800bf96:	4293      	cmp	r3, r2
 800bf98:	d018      	beq.n	800bfcc <HAL_DMA_Start_IT+0x430>
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	4a27      	ldr	r2, [pc, #156]	@ (800c03c <HAL_DMA_Start_IT+0x4a0>)
 800bfa0:	4293      	cmp	r3, r2
 800bfa2:	d013      	beq.n	800bfcc <HAL_DMA_Start_IT+0x430>
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	4a25      	ldr	r2, [pc, #148]	@ (800c040 <HAL_DMA_Start_IT+0x4a4>)
 800bfaa:	4293      	cmp	r3, r2
 800bfac:	d00e      	beq.n	800bfcc <HAL_DMA_Start_IT+0x430>
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	4a24      	ldr	r2, [pc, #144]	@ (800c044 <HAL_DMA_Start_IT+0x4a8>)
 800bfb4:	4293      	cmp	r3, r2
 800bfb6:	d009      	beq.n	800bfcc <HAL_DMA_Start_IT+0x430>
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	4a22      	ldr	r2, [pc, #136]	@ (800c048 <HAL_DMA_Start_IT+0x4ac>)
 800bfbe:	4293      	cmp	r3, r2
 800bfc0:	d004      	beq.n	800bfcc <HAL_DMA_Start_IT+0x430>
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	4a21      	ldr	r2, [pc, #132]	@ (800c04c <HAL_DMA_Start_IT+0x4b0>)
 800bfc8:	4293      	cmp	r3, r2
 800bfca:	d108      	bne.n	800bfde <HAL_DMA_Start_IT+0x442>
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	681a      	ldr	r2, [r3, #0]
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	f042 0201 	orr.w	r2, r2, #1
 800bfda:	601a      	str	r2, [r3, #0]
 800bfdc:	e012      	b.n	800c004 <HAL_DMA_Start_IT+0x468>
 800bfde:	68fb      	ldr	r3, [r7, #12]
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	681a      	ldr	r2, [r3, #0]
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	f042 0201 	orr.w	r2, r2, #1
 800bfec:	601a      	str	r2, [r3, #0]
 800bfee:	e009      	b.n	800c004 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800bff6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	2200      	movs	r2, #0
 800bffc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 800c000:	2301      	movs	r3, #1
 800c002:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800c004:	7dfb      	ldrb	r3, [r7, #23]
}
 800c006:	4618      	mov	r0, r3
 800c008:	3718      	adds	r7, #24
 800c00a:	46bd      	mov	sp, r7
 800c00c:	bd80      	pop	{r7, pc}
 800c00e:	bf00      	nop
 800c010:	40020010 	.word	0x40020010
 800c014:	40020028 	.word	0x40020028
 800c018:	40020040 	.word	0x40020040
 800c01c:	40020058 	.word	0x40020058
 800c020:	40020070 	.word	0x40020070
 800c024:	40020088 	.word	0x40020088
 800c028:	400200a0 	.word	0x400200a0
 800c02c:	400200b8 	.word	0x400200b8
 800c030:	40020410 	.word	0x40020410
 800c034:	40020428 	.word	0x40020428
 800c038:	40020440 	.word	0x40020440
 800c03c:	40020458 	.word	0x40020458
 800c040:	40020470 	.word	0x40020470
 800c044:	40020488 	.word	0x40020488
 800c048:	400204a0 	.word	0x400204a0
 800c04c:	400204b8 	.word	0x400204b8
 800c050:	58025408 	.word	0x58025408
 800c054:	5802541c 	.word	0x5802541c
 800c058:	58025430 	.word	0x58025430
 800c05c:	58025444 	.word	0x58025444
 800c060:	58025458 	.word	0x58025458
 800c064:	5802546c 	.word	0x5802546c
 800c068:	58025480 	.word	0x58025480
 800c06c:	58025494 	.word	0x58025494

0800c070 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800c070:	b580      	push	{r7, lr}
 800c072:	b086      	sub	sp, #24
 800c074:	af00      	add	r7, sp, #0
 800c076:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 800c078:	f7fd f8e0 	bl	800923c <HAL_GetTick>
 800c07c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	2b00      	cmp	r3, #0
 800c082:	d101      	bne.n	800c088 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800c084:	2301      	movs	r3, #1
 800c086:	e2dc      	b.n	800c642 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800c08e:	b2db      	uxtb	r3, r3
 800c090:	2b02      	cmp	r3, #2
 800c092:	d008      	beq.n	800c0a6 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	2280      	movs	r2, #128	@ 0x80
 800c098:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	2200      	movs	r2, #0
 800c09e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 800c0a2:	2301      	movs	r3, #1
 800c0a4:	e2cd      	b.n	800c642 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	4a76      	ldr	r2, [pc, #472]	@ (800c284 <HAL_DMA_Abort+0x214>)
 800c0ac:	4293      	cmp	r3, r2
 800c0ae:	d04a      	beq.n	800c146 <HAL_DMA_Abort+0xd6>
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	4a74      	ldr	r2, [pc, #464]	@ (800c288 <HAL_DMA_Abort+0x218>)
 800c0b6:	4293      	cmp	r3, r2
 800c0b8:	d045      	beq.n	800c146 <HAL_DMA_Abort+0xd6>
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	4a73      	ldr	r2, [pc, #460]	@ (800c28c <HAL_DMA_Abort+0x21c>)
 800c0c0:	4293      	cmp	r3, r2
 800c0c2:	d040      	beq.n	800c146 <HAL_DMA_Abort+0xd6>
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	4a71      	ldr	r2, [pc, #452]	@ (800c290 <HAL_DMA_Abort+0x220>)
 800c0ca:	4293      	cmp	r3, r2
 800c0cc:	d03b      	beq.n	800c146 <HAL_DMA_Abort+0xd6>
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	4a70      	ldr	r2, [pc, #448]	@ (800c294 <HAL_DMA_Abort+0x224>)
 800c0d4:	4293      	cmp	r3, r2
 800c0d6:	d036      	beq.n	800c146 <HAL_DMA_Abort+0xd6>
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	4a6e      	ldr	r2, [pc, #440]	@ (800c298 <HAL_DMA_Abort+0x228>)
 800c0de:	4293      	cmp	r3, r2
 800c0e0:	d031      	beq.n	800c146 <HAL_DMA_Abort+0xd6>
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	4a6d      	ldr	r2, [pc, #436]	@ (800c29c <HAL_DMA_Abort+0x22c>)
 800c0e8:	4293      	cmp	r3, r2
 800c0ea:	d02c      	beq.n	800c146 <HAL_DMA_Abort+0xd6>
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	4a6b      	ldr	r2, [pc, #428]	@ (800c2a0 <HAL_DMA_Abort+0x230>)
 800c0f2:	4293      	cmp	r3, r2
 800c0f4:	d027      	beq.n	800c146 <HAL_DMA_Abort+0xd6>
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	4a6a      	ldr	r2, [pc, #424]	@ (800c2a4 <HAL_DMA_Abort+0x234>)
 800c0fc:	4293      	cmp	r3, r2
 800c0fe:	d022      	beq.n	800c146 <HAL_DMA_Abort+0xd6>
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	4a68      	ldr	r2, [pc, #416]	@ (800c2a8 <HAL_DMA_Abort+0x238>)
 800c106:	4293      	cmp	r3, r2
 800c108:	d01d      	beq.n	800c146 <HAL_DMA_Abort+0xd6>
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	4a67      	ldr	r2, [pc, #412]	@ (800c2ac <HAL_DMA_Abort+0x23c>)
 800c110:	4293      	cmp	r3, r2
 800c112:	d018      	beq.n	800c146 <HAL_DMA_Abort+0xd6>
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	4a65      	ldr	r2, [pc, #404]	@ (800c2b0 <HAL_DMA_Abort+0x240>)
 800c11a:	4293      	cmp	r3, r2
 800c11c:	d013      	beq.n	800c146 <HAL_DMA_Abort+0xd6>
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	4a64      	ldr	r2, [pc, #400]	@ (800c2b4 <HAL_DMA_Abort+0x244>)
 800c124:	4293      	cmp	r3, r2
 800c126:	d00e      	beq.n	800c146 <HAL_DMA_Abort+0xd6>
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	4a62      	ldr	r2, [pc, #392]	@ (800c2b8 <HAL_DMA_Abort+0x248>)
 800c12e:	4293      	cmp	r3, r2
 800c130:	d009      	beq.n	800c146 <HAL_DMA_Abort+0xd6>
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	4a61      	ldr	r2, [pc, #388]	@ (800c2bc <HAL_DMA_Abort+0x24c>)
 800c138:	4293      	cmp	r3, r2
 800c13a:	d004      	beq.n	800c146 <HAL_DMA_Abort+0xd6>
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	4a5f      	ldr	r2, [pc, #380]	@ (800c2c0 <HAL_DMA_Abort+0x250>)
 800c142:	4293      	cmp	r3, r2
 800c144:	d101      	bne.n	800c14a <HAL_DMA_Abort+0xda>
 800c146:	2301      	movs	r3, #1
 800c148:	e000      	b.n	800c14c <HAL_DMA_Abort+0xdc>
 800c14a:	2300      	movs	r3, #0
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d013      	beq.n	800c178 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	681a      	ldr	r2, [r3, #0]
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	f022 021e 	bic.w	r2, r2, #30
 800c15e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	695a      	ldr	r2, [r3, #20]
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800c16e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	617b      	str	r3, [r7, #20]
 800c176:	e00a      	b.n	800c18e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	681a      	ldr	r2, [r3, #0]
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	f022 020e 	bic.w	r2, r2, #14
 800c186:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	4a3c      	ldr	r2, [pc, #240]	@ (800c284 <HAL_DMA_Abort+0x214>)
 800c194:	4293      	cmp	r3, r2
 800c196:	d072      	beq.n	800c27e <HAL_DMA_Abort+0x20e>
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	4a3a      	ldr	r2, [pc, #232]	@ (800c288 <HAL_DMA_Abort+0x218>)
 800c19e:	4293      	cmp	r3, r2
 800c1a0:	d06d      	beq.n	800c27e <HAL_DMA_Abort+0x20e>
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	4a39      	ldr	r2, [pc, #228]	@ (800c28c <HAL_DMA_Abort+0x21c>)
 800c1a8:	4293      	cmp	r3, r2
 800c1aa:	d068      	beq.n	800c27e <HAL_DMA_Abort+0x20e>
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	4a37      	ldr	r2, [pc, #220]	@ (800c290 <HAL_DMA_Abort+0x220>)
 800c1b2:	4293      	cmp	r3, r2
 800c1b4:	d063      	beq.n	800c27e <HAL_DMA_Abort+0x20e>
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	4a36      	ldr	r2, [pc, #216]	@ (800c294 <HAL_DMA_Abort+0x224>)
 800c1bc:	4293      	cmp	r3, r2
 800c1be:	d05e      	beq.n	800c27e <HAL_DMA_Abort+0x20e>
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	4a34      	ldr	r2, [pc, #208]	@ (800c298 <HAL_DMA_Abort+0x228>)
 800c1c6:	4293      	cmp	r3, r2
 800c1c8:	d059      	beq.n	800c27e <HAL_DMA_Abort+0x20e>
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	681b      	ldr	r3, [r3, #0]
 800c1ce:	4a33      	ldr	r2, [pc, #204]	@ (800c29c <HAL_DMA_Abort+0x22c>)
 800c1d0:	4293      	cmp	r3, r2
 800c1d2:	d054      	beq.n	800c27e <HAL_DMA_Abort+0x20e>
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	4a31      	ldr	r2, [pc, #196]	@ (800c2a0 <HAL_DMA_Abort+0x230>)
 800c1da:	4293      	cmp	r3, r2
 800c1dc:	d04f      	beq.n	800c27e <HAL_DMA_Abort+0x20e>
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	4a30      	ldr	r2, [pc, #192]	@ (800c2a4 <HAL_DMA_Abort+0x234>)
 800c1e4:	4293      	cmp	r3, r2
 800c1e6:	d04a      	beq.n	800c27e <HAL_DMA_Abort+0x20e>
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	4a2e      	ldr	r2, [pc, #184]	@ (800c2a8 <HAL_DMA_Abort+0x238>)
 800c1ee:	4293      	cmp	r3, r2
 800c1f0:	d045      	beq.n	800c27e <HAL_DMA_Abort+0x20e>
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	4a2d      	ldr	r2, [pc, #180]	@ (800c2ac <HAL_DMA_Abort+0x23c>)
 800c1f8:	4293      	cmp	r3, r2
 800c1fa:	d040      	beq.n	800c27e <HAL_DMA_Abort+0x20e>
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	4a2b      	ldr	r2, [pc, #172]	@ (800c2b0 <HAL_DMA_Abort+0x240>)
 800c202:	4293      	cmp	r3, r2
 800c204:	d03b      	beq.n	800c27e <HAL_DMA_Abort+0x20e>
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	4a2a      	ldr	r2, [pc, #168]	@ (800c2b4 <HAL_DMA_Abort+0x244>)
 800c20c:	4293      	cmp	r3, r2
 800c20e:	d036      	beq.n	800c27e <HAL_DMA_Abort+0x20e>
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	681b      	ldr	r3, [r3, #0]
 800c214:	4a28      	ldr	r2, [pc, #160]	@ (800c2b8 <HAL_DMA_Abort+0x248>)
 800c216:	4293      	cmp	r3, r2
 800c218:	d031      	beq.n	800c27e <HAL_DMA_Abort+0x20e>
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	4a27      	ldr	r2, [pc, #156]	@ (800c2bc <HAL_DMA_Abort+0x24c>)
 800c220:	4293      	cmp	r3, r2
 800c222:	d02c      	beq.n	800c27e <HAL_DMA_Abort+0x20e>
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	4a25      	ldr	r2, [pc, #148]	@ (800c2c0 <HAL_DMA_Abort+0x250>)
 800c22a:	4293      	cmp	r3, r2
 800c22c:	d027      	beq.n	800c27e <HAL_DMA_Abort+0x20e>
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	4a24      	ldr	r2, [pc, #144]	@ (800c2c4 <HAL_DMA_Abort+0x254>)
 800c234:	4293      	cmp	r3, r2
 800c236:	d022      	beq.n	800c27e <HAL_DMA_Abort+0x20e>
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	4a22      	ldr	r2, [pc, #136]	@ (800c2c8 <HAL_DMA_Abort+0x258>)
 800c23e:	4293      	cmp	r3, r2
 800c240:	d01d      	beq.n	800c27e <HAL_DMA_Abort+0x20e>
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	4a21      	ldr	r2, [pc, #132]	@ (800c2cc <HAL_DMA_Abort+0x25c>)
 800c248:	4293      	cmp	r3, r2
 800c24a:	d018      	beq.n	800c27e <HAL_DMA_Abort+0x20e>
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	4a1f      	ldr	r2, [pc, #124]	@ (800c2d0 <HAL_DMA_Abort+0x260>)
 800c252:	4293      	cmp	r3, r2
 800c254:	d013      	beq.n	800c27e <HAL_DMA_Abort+0x20e>
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	4a1e      	ldr	r2, [pc, #120]	@ (800c2d4 <HAL_DMA_Abort+0x264>)
 800c25c:	4293      	cmp	r3, r2
 800c25e:	d00e      	beq.n	800c27e <HAL_DMA_Abort+0x20e>
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	4a1c      	ldr	r2, [pc, #112]	@ (800c2d8 <HAL_DMA_Abort+0x268>)
 800c266:	4293      	cmp	r3, r2
 800c268:	d009      	beq.n	800c27e <HAL_DMA_Abort+0x20e>
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	4a1b      	ldr	r2, [pc, #108]	@ (800c2dc <HAL_DMA_Abort+0x26c>)
 800c270:	4293      	cmp	r3, r2
 800c272:	d004      	beq.n	800c27e <HAL_DMA_Abort+0x20e>
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	4a19      	ldr	r2, [pc, #100]	@ (800c2e0 <HAL_DMA_Abort+0x270>)
 800c27a:	4293      	cmp	r3, r2
 800c27c:	d132      	bne.n	800c2e4 <HAL_DMA_Abort+0x274>
 800c27e:	2301      	movs	r3, #1
 800c280:	e031      	b.n	800c2e6 <HAL_DMA_Abort+0x276>
 800c282:	bf00      	nop
 800c284:	40020010 	.word	0x40020010
 800c288:	40020028 	.word	0x40020028
 800c28c:	40020040 	.word	0x40020040
 800c290:	40020058 	.word	0x40020058
 800c294:	40020070 	.word	0x40020070
 800c298:	40020088 	.word	0x40020088
 800c29c:	400200a0 	.word	0x400200a0
 800c2a0:	400200b8 	.word	0x400200b8
 800c2a4:	40020410 	.word	0x40020410
 800c2a8:	40020428 	.word	0x40020428
 800c2ac:	40020440 	.word	0x40020440
 800c2b0:	40020458 	.word	0x40020458
 800c2b4:	40020470 	.word	0x40020470
 800c2b8:	40020488 	.word	0x40020488
 800c2bc:	400204a0 	.word	0x400204a0
 800c2c0:	400204b8 	.word	0x400204b8
 800c2c4:	58025408 	.word	0x58025408
 800c2c8:	5802541c 	.word	0x5802541c
 800c2cc:	58025430 	.word	0x58025430
 800c2d0:	58025444 	.word	0x58025444
 800c2d4:	58025458 	.word	0x58025458
 800c2d8:	5802546c 	.word	0x5802546c
 800c2dc:	58025480 	.word	0x58025480
 800c2e0:	58025494 	.word	0x58025494
 800c2e4:	2300      	movs	r3, #0
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d007      	beq.n	800c2fa <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c2ee:	681a      	ldr	r2, [r3, #0]
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c2f4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800c2f8:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	4a6d      	ldr	r2, [pc, #436]	@ (800c4b4 <HAL_DMA_Abort+0x444>)
 800c300:	4293      	cmp	r3, r2
 800c302:	d04a      	beq.n	800c39a <HAL_DMA_Abort+0x32a>
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	4a6b      	ldr	r2, [pc, #428]	@ (800c4b8 <HAL_DMA_Abort+0x448>)
 800c30a:	4293      	cmp	r3, r2
 800c30c:	d045      	beq.n	800c39a <HAL_DMA_Abort+0x32a>
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	4a6a      	ldr	r2, [pc, #424]	@ (800c4bc <HAL_DMA_Abort+0x44c>)
 800c314:	4293      	cmp	r3, r2
 800c316:	d040      	beq.n	800c39a <HAL_DMA_Abort+0x32a>
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	4a68      	ldr	r2, [pc, #416]	@ (800c4c0 <HAL_DMA_Abort+0x450>)
 800c31e:	4293      	cmp	r3, r2
 800c320:	d03b      	beq.n	800c39a <HAL_DMA_Abort+0x32a>
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	4a67      	ldr	r2, [pc, #412]	@ (800c4c4 <HAL_DMA_Abort+0x454>)
 800c328:	4293      	cmp	r3, r2
 800c32a:	d036      	beq.n	800c39a <HAL_DMA_Abort+0x32a>
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	4a65      	ldr	r2, [pc, #404]	@ (800c4c8 <HAL_DMA_Abort+0x458>)
 800c332:	4293      	cmp	r3, r2
 800c334:	d031      	beq.n	800c39a <HAL_DMA_Abort+0x32a>
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	4a64      	ldr	r2, [pc, #400]	@ (800c4cc <HAL_DMA_Abort+0x45c>)
 800c33c:	4293      	cmp	r3, r2
 800c33e:	d02c      	beq.n	800c39a <HAL_DMA_Abort+0x32a>
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	4a62      	ldr	r2, [pc, #392]	@ (800c4d0 <HAL_DMA_Abort+0x460>)
 800c346:	4293      	cmp	r3, r2
 800c348:	d027      	beq.n	800c39a <HAL_DMA_Abort+0x32a>
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	4a61      	ldr	r2, [pc, #388]	@ (800c4d4 <HAL_DMA_Abort+0x464>)
 800c350:	4293      	cmp	r3, r2
 800c352:	d022      	beq.n	800c39a <HAL_DMA_Abort+0x32a>
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	4a5f      	ldr	r2, [pc, #380]	@ (800c4d8 <HAL_DMA_Abort+0x468>)
 800c35a:	4293      	cmp	r3, r2
 800c35c:	d01d      	beq.n	800c39a <HAL_DMA_Abort+0x32a>
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	4a5e      	ldr	r2, [pc, #376]	@ (800c4dc <HAL_DMA_Abort+0x46c>)
 800c364:	4293      	cmp	r3, r2
 800c366:	d018      	beq.n	800c39a <HAL_DMA_Abort+0x32a>
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	4a5c      	ldr	r2, [pc, #368]	@ (800c4e0 <HAL_DMA_Abort+0x470>)
 800c36e:	4293      	cmp	r3, r2
 800c370:	d013      	beq.n	800c39a <HAL_DMA_Abort+0x32a>
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	4a5b      	ldr	r2, [pc, #364]	@ (800c4e4 <HAL_DMA_Abort+0x474>)
 800c378:	4293      	cmp	r3, r2
 800c37a:	d00e      	beq.n	800c39a <HAL_DMA_Abort+0x32a>
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	4a59      	ldr	r2, [pc, #356]	@ (800c4e8 <HAL_DMA_Abort+0x478>)
 800c382:	4293      	cmp	r3, r2
 800c384:	d009      	beq.n	800c39a <HAL_DMA_Abort+0x32a>
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	4a58      	ldr	r2, [pc, #352]	@ (800c4ec <HAL_DMA_Abort+0x47c>)
 800c38c:	4293      	cmp	r3, r2
 800c38e:	d004      	beq.n	800c39a <HAL_DMA_Abort+0x32a>
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	4a56      	ldr	r2, [pc, #344]	@ (800c4f0 <HAL_DMA_Abort+0x480>)
 800c396:	4293      	cmp	r3, r2
 800c398:	d108      	bne.n	800c3ac <HAL_DMA_Abort+0x33c>
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	681a      	ldr	r2, [r3, #0]
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	f022 0201 	bic.w	r2, r2, #1
 800c3a8:	601a      	str	r2, [r3, #0]
 800c3aa:	e007      	b.n	800c3bc <HAL_DMA_Abort+0x34c>
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	681a      	ldr	r2, [r3, #0]
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	f022 0201 	bic.w	r2, r2, #1
 800c3ba:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800c3bc:	e013      	b.n	800c3e6 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800c3be:	f7fc ff3d 	bl	800923c <HAL_GetTick>
 800c3c2:	4602      	mov	r2, r0
 800c3c4:	693b      	ldr	r3, [r7, #16]
 800c3c6:	1ad3      	subs	r3, r2, r3
 800c3c8:	2b05      	cmp	r3, #5
 800c3ca:	d90c      	bls.n	800c3e6 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	2220      	movs	r2, #32
 800c3d0:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	2203      	movs	r2, #3
 800c3d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	2200      	movs	r2, #0
 800c3de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 800c3e2:	2301      	movs	r3, #1
 800c3e4:	e12d      	b.n	800c642 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800c3e6:	697b      	ldr	r3, [r7, #20]
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	f003 0301 	and.w	r3, r3, #1
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d1e5      	bne.n	800c3be <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	4a2f      	ldr	r2, [pc, #188]	@ (800c4b4 <HAL_DMA_Abort+0x444>)
 800c3f8:	4293      	cmp	r3, r2
 800c3fa:	d04a      	beq.n	800c492 <HAL_DMA_Abort+0x422>
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	4a2d      	ldr	r2, [pc, #180]	@ (800c4b8 <HAL_DMA_Abort+0x448>)
 800c402:	4293      	cmp	r3, r2
 800c404:	d045      	beq.n	800c492 <HAL_DMA_Abort+0x422>
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	4a2c      	ldr	r2, [pc, #176]	@ (800c4bc <HAL_DMA_Abort+0x44c>)
 800c40c:	4293      	cmp	r3, r2
 800c40e:	d040      	beq.n	800c492 <HAL_DMA_Abort+0x422>
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	4a2a      	ldr	r2, [pc, #168]	@ (800c4c0 <HAL_DMA_Abort+0x450>)
 800c416:	4293      	cmp	r3, r2
 800c418:	d03b      	beq.n	800c492 <HAL_DMA_Abort+0x422>
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	4a29      	ldr	r2, [pc, #164]	@ (800c4c4 <HAL_DMA_Abort+0x454>)
 800c420:	4293      	cmp	r3, r2
 800c422:	d036      	beq.n	800c492 <HAL_DMA_Abort+0x422>
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	4a27      	ldr	r2, [pc, #156]	@ (800c4c8 <HAL_DMA_Abort+0x458>)
 800c42a:	4293      	cmp	r3, r2
 800c42c:	d031      	beq.n	800c492 <HAL_DMA_Abort+0x422>
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	4a26      	ldr	r2, [pc, #152]	@ (800c4cc <HAL_DMA_Abort+0x45c>)
 800c434:	4293      	cmp	r3, r2
 800c436:	d02c      	beq.n	800c492 <HAL_DMA_Abort+0x422>
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	4a24      	ldr	r2, [pc, #144]	@ (800c4d0 <HAL_DMA_Abort+0x460>)
 800c43e:	4293      	cmp	r3, r2
 800c440:	d027      	beq.n	800c492 <HAL_DMA_Abort+0x422>
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	4a23      	ldr	r2, [pc, #140]	@ (800c4d4 <HAL_DMA_Abort+0x464>)
 800c448:	4293      	cmp	r3, r2
 800c44a:	d022      	beq.n	800c492 <HAL_DMA_Abort+0x422>
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	4a21      	ldr	r2, [pc, #132]	@ (800c4d8 <HAL_DMA_Abort+0x468>)
 800c452:	4293      	cmp	r3, r2
 800c454:	d01d      	beq.n	800c492 <HAL_DMA_Abort+0x422>
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	4a20      	ldr	r2, [pc, #128]	@ (800c4dc <HAL_DMA_Abort+0x46c>)
 800c45c:	4293      	cmp	r3, r2
 800c45e:	d018      	beq.n	800c492 <HAL_DMA_Abort+0x422>
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	4a1e      	ldr	r2, [pc, #120]	@ (800c4e0 <HAL_DMA_Abort+0x470>)
 800c466:	4293      	cmp	r3, r2
 800c468:	d013      	beq.n	800c492 <HAL_DMA_Abort+0x422>
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	4a1d      	ldr	r2, [pc, #116]	@ (800c4e4 <HAL_DMA_Abort+0x474>)
 800c470:	4293      	cmp	r3, r2
 800c472:	d00e      	beq.n	800c492 <HAL_DMA_Abort+0x422>
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	4a1b      	ldr	r2, [pc, #108]	@ (800c4e8 <HAL_DMA_Abort+0x478>)
 800c47a:	4293      	cmp	r3, r2
 800c47c:	d009      	beq.n	800c492 <HAL_DMA_Abort+0x422>
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	4a1a      	ldr	r2, [pc, #104]	@ (800c4ec <HAL_DMA_Abort+0x47c>)
 800c484:	4293      	cmp	r3, r2
 800c486:	d004      	beq.n	800c492 <HAL_DMA_Abort+0x422>
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	4a18      	ldr	r2, [pc, #96]	@ (800c4f0 <HAL_DMA_Abort+0x480>)
 800c48e:	4293      	cmp	r3, r2
 800c490:	d101      	bne.n	800c496 <HAL_DMA_Abort+0x426>
 800c492:	2301      	movs	r3, #1
 800c494:	e000      	b.n	800c498 <HAL_DMA_Abort+0x428>
 800c496:	2300      	movs	r3, #0
 800c498:	2b00      	cmp	r3, #0
 800c49a:	d02b      	beq.n	800c4f4 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c4a0:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c4a6:	f003 031f 	and.w	r3, r3, #31
 800c4aa:	223f      	movs	r2, #63	@ 0x3f
 800c4ac:	409a      	lsls	r2, r3
 800c4ae:	68bb      	ldr	r3, [r7, #8]
 800c4b0:	609a      	str	r2, [r3, #8]
 800c4b2:	e02a      	b.n	800c50a <HAL_DMA_Abort+0x49a>
 800c4b4:	40020010 	.word	0x40020010
 800c4b8:	40020028 	.word	0x40020028
 800c4bc:	40020040 	.word	0x40020040
 800c4c0:	40020058 	.word	0x40020058
 800c4c4:	40020070 	.word	0x40020070
 800c4c8:	40020088 	.word	0x40020088
 800c4cc:	400200a0 	.word	0x400200a0
 800c4d0:	400200b8 	.word	0x400200b8
 800c4d4:	40020410 	.word	0x40020410
 800c4d8:	40020428 	.word	0x40020428
 800c4dc:	40020440 	.word	0x40020440
 800c4e0:	40020458 	.word	0x40020458
 800c4e4:	40020470 	.word	0x40020470
 800c4e8:	40020488 	.word	0x40020488
 800c4ec:	400204a0 	.word	0x400204a0
 800c4f0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c4f8:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c4fe:	f003 031f 	and.w	r3, r3, #31
 800c502:	2201      	movs	r2, #1
 800c504:	409a      	lsls	r2, r3
 800c506:	68fb      	ldr	r3, [r7, #12]
 800c508:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	681b      	ldr	r3, [r3, #0]
 800c50e:	4a4f      	ldr	r2, [pc, #316]	@ (800c64c <HAL_DMA_Abort+0x5dc>)
 800c510:	4293      	cmp	r3, r2
 800c512:	d072      	beq.n	800c5fa <HAL_DMA_Abort+0x58a>
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	4a4d      	ldr	r2, [pc, #308]	@ (800c650 <HAL_DMA_Abort+0x5e0>)
 800c51a:	4293      	cmp	r3, r2
 800c51c:	d06d      	beq.n	800c5fa <HAL_DMA_Abort+0x58a>
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	4a4c      	ldr	r2, [pc, #304]	@ (800c654 <HAL_DMA_Abort+0x5e4>)
 800c524:	4293      	cmp	r3, r2
 800c526:	d068      	beq.n	800c5fa <HAL_DMA_Abort+0x58a>
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	4a4a      	ldr	r2, [pc, #296]	@ (800c658 <HAL_DMA_Abort+0x5e8>)
 800c52e:	4293      	cmp	r3, r2
 800c530:	d063      	beq.n	800c5fa <HAL_DMA_Abort+0x58a>
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	4a49      	ldr	r2, [pc, #292]	@ (800c65c <HAL_DMA_Abort+0x5ec>)
 800c538:	4293      	cmp	r3, r2
 800c53a:	d05e      	beq.n	800c5fa <HAL_DMA_Abort+0x58a>
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	4a47      	ldr	r2, [pc, #284]	@ (800c660 <HAL_DMA_Abort+0x5f0>)
 800c542:	4293      	cmp	r3, r2
 800c544:	d059      	beq.n	800c5fa <HAL_DMA_Abort+0x58a>
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	4a46      	ldr	r2, [pc, #280]	@ (800c664 <HAL_DMA_Abort+0x5f4>)
 800c54c:	4293      	cmp	r3, r2
 800c54e:	d054      	beq.n	800c5fa <HAL_DMA_Abort+0x58a>
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	4a44      	ldr	r2, [pc, #272]	@ (800c668 <HAL_DMA_Abort+0x5f8>)
 800c556:	4293      	cmp	r3, r2
 800c558:	d04f      	beq.n	800c5fa <HAL_DMA_Abort+0x58a>
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	4a43      	ldr	r2, [pc, #268]	@ (800c66c <HAL_DMA_Abort+0x5fc>)
 800c560:	4293      	cmp	r3, r2
 800c562:	d04a      	beq.n	800c5fa <HAL_DMA_Abort+0x58a>
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	4a41      	ldr	r2, [pc, #260]	@ (800c670 <HAL_DMA_Abort+0x600>)
 800c56a:	4293      	cmp	r3, r2
 800c56c:	d045      	beq.n	800c5fa <HAL_DMA_Abort+0x58a>
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	4a40      	ldr	r2, [pc, #256]	@ (800c674 <HAL_DMA_Abort+0x604>)
 800c574:	4293      	cmp	r3, r2
 800c576:	d040      	beq.n	800c5fa <HAL_DMA_Abort+0x58a>
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	4a3e      	ldr	r2, [pc, #248]	@ (800c678 <HAL_DMA_Abort+0x608>)
 800c57e:	4293      	cmp	r3, r2
 800c580:	d03b      	beq.n	800c5fa <HAL_DMA_Abort+0x58a>
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	4a3d      	ldr	r2, [pc, #244]	@ (800c67c <HAL_DMA_Abort+0x60c>)
 800c588:	4293      	cmp	r3, r2
 800c58a:	d036      	beq.n	800c5fa <HAL_DMA_Abort+0x58a>
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	4a3b      	ldr	r2, [pc, #236]	@ (800c680 <HAL_DMA_Abort+0x610>)
 800c592:	4293      	cmp	r3, r2
 800c594:	d031      	beq.n	800c5fa <HAL_DMA_Abort+0x58a>
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	681b      	ldr	r3, [r3, #0]
 800c59a:	4a3a      	ldr	r2, [pc, #232]	@ (800c684 <HAL_DMA_Abort+0x614>)
 800c59c:	4293      	cmp	r3, r2
 800c59e:	d02c      	beq.n	800c5fa <HAL_DMA_Abort+0x58a>
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	4a38      	ldr	r2, [pc, #224]	@ (800c688 <HAL_DMA_Abort+0x618>)
 800c5a6:	4293      	cmp	r3, r2
 800c5a8:	d027      	beq.n	800c5fa <HAL_DMA_Abort+0x58a>
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	4a37      	ldr	r2, [pc, #220]	@ (800c68c <HAL_DMA_Abort+0x61c>)
 800c5b0:	4293      	cmp	r3, r2
 800c5b2:	d022      	beq.n	800c5fa <HAL_DMA_Abort+0x58a>
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	4a35      	ldr	r2, [pc, #212]	@ (800c690 <HAL_DMA_Abort+0x620>)
 800c5ba:	4293      	cmp	r3, r2
 800c5bc:	d01d      	beq.n	800c5fa <HAL_DMA_Abort+0x58a>
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	4a34      	ldr	r2, [pc, #208]	@ (800c694 <HAL_DMA_Abort+0x624>)
 800c5c4:	4293      	cmp	r3, r2
 800c5c6:	d018      	beq.n	800c5fa <HAL_DMA_Abort+0x58a>
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	4a32      	ldr	r2, [pc, #200]	@ (800c698 <HAL_DMA_Abort+0x628>)
 800c5ce:	4293      	cmp	r3, r2
 800c5d0:	d013      	beq.n	800c5fa <HAL_DMA_Abort+0x58a>
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	4a31      	ldr	r2, [pc, #196]	@ (800c69c <HAL_DMA_Abort+0x62c>)
 800c5d8:	4293      	cmp	r3, r2
 800c5da:	d00e      	beq.n	800c5fa <HAL_DMA_Abort+0x58a>
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	4a2f      	ldr	r2, [pc, #188]	@ (800c6a0 <HAL_DMA_Abort+0x630>)
 800c5e2:	4293      	cmp	r3, r2
 800c5e4:	d009      	beq.n	800c5fa <HAL_DMA_Abort+0x58a>
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	4a2e      	ldr	r2, [pc, #184]	@ (800c6a4 <HAL_DMA_Abort+0x634>)
 800c5ec:	4293      	cmp	r3, r2
 800c5ee:	d004      	beq.n	800c5fa <HAL_DMA_Abort+0x58a>
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	4a2c      	ldr	r2, [pc, #176]	@ (800c6a8 <HAL_DMA_Abort+0x638>)
 800c5f6:	4293      	cmp	r3, r2
 800c5f8:	d101      	bne.n	800c5fe <HAL_DMA_Abort+0x58e>
 800c5fa:	2301      	movs	r3, #1
 800c5fc:	e000      	b.n	800c600 <HAL_DMA_Abort+0x590>
 800c5fe:	2300      	movs	r3, #0
 800c600:	2b00      	cmp	r3, #0
 800c602:	d015      	beq.n	800c630 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c608:	687a      	ldr	r2, [r7, #4]
 800c60a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800c60c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c612:	2b00      	cmp	r3, #0
 800c614:	d00c      	beq.n	800c630 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c61a:	681a      	ldr	r2, [r3, #0]
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c620:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800c624:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c62a:	687a      	ldr	r2, [r7, #4]
 800c62c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800c62e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	2201      	movs	r2, #1
 800c634:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	2200      	movs	r2, #0
 800c63c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 800c640:	2300      	movs	r3, #0
}
 800c642:	4618      	mov	r0, r3
 800c644:	3718      	adds	r7, #24
 800c646:	46bd      	mov	sp, r7
 800c648:	bd80      	pop	{r7, pc}
 800c64a:	bf00      	nop
 800c64c:	40020010 	.word	0x40020010
 800c650:	40020028 	.word	0x40020028
 800c654:	40020040 	.word	0x40020040
 800c658:	40020058 	.word	0x40020058
 800c65c:	40020070 	.word	0x40020070
 800c660:	40020088 	.word	0x40020088
 800c664:	400200a0 	.word	0x400200a0
 800c668:	400200b8 	.word	0x400200b8
 800c66c:	40020410 	.word	0x40020410
 800c670:	40020428 	.word	0x40020428
 800c674:	40020440 	.word	0x40020440
 800c678:	40020458 	.word	0x40020458
 800c67c:	40020470 	.word	0x40020470
 800c680:	40020488 	.word	0x40020488
 800c684:	400204a0 	.word	0x400204a0
 800c688:	400204b8 	.word	0x400204b8
 800c68c:	58025408 	.word	0x58025408
 800c690:	5802541c 	.word	0x5802541c
 800c694:	58025430 	.word	0x58025430
 800c698:	58025444 	.word	0x58025444
 800c69c:	58025458 	.word	0x58025458
 800c6a0:	5802546c 	.word	0x5802546c
 800c6a4:	58025480 	.word	0x58025480
 800c6a8:	58025494 	.word	0x58025494

0800c6ac <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800c6ac:	b580      	push	{r7, lr}
 800c6ae:	b084      	sub	sp, #16
 800c6b0:	af00      	add	r7, sp, #0
 800c6b2:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d101      	bne.n	800c6be <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800c6ba:	2301      	movs	r3, #1
 800c6bc:	e237      	b.n	800cb2e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800c6c4:	b2db      	uxtb	r3, r3
 800c6c6:	2b02      	cmp	r3, #2
 800c6c8:	d004      	beq.n	800c6d4 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	2280      	movs	r2, #128	@ 0x80
 800c6ce:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800c6d0:	2301      	movs	r3, #1
 800c6d2:	e22c      	b.n	800cb2e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	4a5c      	ldr	r2, [pc, #368]	@ (800c84c <HAL_DMA_Abort_IT+0x1a0>)
 800c6da:	4293      	cmp	r3, r2
 800c6dc:	d04a      	beq.n	800c774 <HAL_DMA_Abort_IT+0xc8>
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	681b      	ldr	r3, [r3, #0]
 800c6e2:	4a5b      	ldr	r2, [pc, #364]	@ (800c850 <HAL_DMA_Abort_IT+0x1a4>)
 800c6e4:	4293      	cmp	r3, r2
 800c6e6:	d045      	beq.n	800c774 <HAL_DMA_Abort_IT+0xc8>
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	4a59      	ldr	r2, [pc, #356]	@ (800c854 <HAL_DMA_Abort_IT+0x1a8>)
 800c6ee:	4293      	cmp	r3, r2
 800c6f0:	d040      	beq.n	800c774 <HAL_DMA_Abort_IT+0xc8>
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	4a58      	ldr	r2, [pc, #352]	@ (800c858 <HAL_DMA_Abort_IT+0x1ac>)
 800c6f8:	4293      	cmp	r3, r2
 800c6fa:	d03b      	beq.n	800c774 <HAL_DMA_Abort_IT+0xc8>
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	4a56      	ldr	r2, [pc, #344]	@ (800c85c <HAL_DMA_Abort_IT+0x1b0>)
 800c702:	4293      	cmp	r3, r2
 800c704:	d036      	beq.n	800c774 <HAL_DMA_Abort_IT+0xc8>
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	681b      	ldr	r3, [r3, #0]
 800c70a:	4a55      	ldr	r2, [pc, #340]	@ (800c860 <HAL_DMA_Abort_IT+0x1b4>)
 800c70c:	4293      	cmp	r3, r2
 800c70e:	d031      	beq.n	800c774 <HAL_DMA_Abort_IT+0xc8>
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	681b      	ldr	r3, [r3, #0]
 800c714:	4a53      	ldr	r2, [pc, #332]	@ (800c864 <HAL_DMA_Abort_IT+0x1b8>)
 800c716:	4293      	cmp	r3, r2
 800c718:	d02c      	beq.n	800c774 <HAL_DMA_Abort_IT+0xc8>
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	4a52      	ldr	r2, [pc, #328]	@ (800c868 <HAL_DMA_Abort_IT+0x1bc>)
 800c720:	4293      	cmp	r3, r2
 800c722:	d027      	beq.n	800c774 <HAL_DMA_Abort_IT+0xc8>
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	4a50      	ldr	r2, [pc, #320]	@ (800c86c <HAL_DMA_Abort_IT+0x1c0>)
 800c72a:	4293      	cmp	r3, r2
 800c72c:	d022      	beq.n	800c774 <HAL_DMA_Abort_IT+0xc8>
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	4a4f      	ldr	r2, [pc, #316]	@ (800c870 <HAL_DMA_Abort_IT+0x1c4>)
 800c734:	4293      	cmp	r3, r2
 800c736:	d01d      	beq.n	800c774 <HAL_DMA_Abort_IT+0xc8>
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	4a4d      	ldr	r2, [pc, #308]	@ (800c874 <HAL_DMA_Abort_IT+0x1c8>)
 800c73e:	4293      	cmp	r3, r2
 800c740:	d018      	beq.n	800c774 <HAL_DMA_Abort_IT+0xc8>
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	4a4c      	ldr	r2, [pc, #304]	@ (800c878 <HAL_DMA_Abort_IT+0x1cc>)
 800c748:	4293      	cmp	r3, r2
 800c74a:	d013      	beq.n	800c774 <HAL_DMA_Abort_IT+0xc8>
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	4a4a      	ldr	r2, [pc, #296]	@ (800c87c <HAL_DMA_Abort_IT+0x1d0>)
 800c752:	4293      	cmp	r3, r2
 800c754:	d00e      	beq.n	800c774 <HAL_DMA_Abort_IT+0xc8>
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	4a49      	ldr	r2, [pc, #292]	@ (800c880 <HAL_DMA_Abort_IT+0x1d4>)
 800c75c:	4293      	cmp	r3, r2
 800c75e:	d009      	beq.n	800c774 <HAL_DMA_Abort_IT+0xc8>
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	4a47      	ldr	r2, [pc, #284]	@ (800c884 <HAL_DMA_Abort_IT+0x1d8>)
 800c766:	4293      	cmp	r3, r2
 800c768:	d004      	beq.n	800c774 <HAL_DMA_Abort_IT+0xc8>
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	4a46      	ldr	r2, [pc, #280]	@ (800c888 <HAL_DMA_Abort_IT+0x1dc>)
 800c770:	4293      	cmp	r3, r2
 800c772:	d101      	bne.n	800c778 <HAL_DMA_Abort_IT+0xcc>
 800c774:	2301      	movs	r3, #1
 800c776:	e000      	b.n	800c77a <HAL_DMA_Abort_IT+0xce>
 800c778:	2300      	movs	r3, #0
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	f000 8086 	beq.w	800c88c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	2204      	movs	r2, #4
 800c784:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	4a2f      	ldr	r2, [pc, #188]	@ (800c84c <HAL_DMA_Abort_IT+0x1a0>)
 800c78e:	4293      	cmp	r3, r2
 800c790:	d04a      	beq.n	800c828 <HAL_DMA_Abort_IT+0x17c>
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	4a2e      	ldr	r2, [pc, #184]	@ (800c850 <HAL_DMA_Abort_IT+0x1a4>)
 800c798:	4293      	cmp	r3, r2
 800c79a:	d045      	beq.n	800c828 <HAL_DMA_Abort_IT+0x17c>
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	4a2c      	ldr	r2, [pc, #176]	@ (800c854 <HAL_DMA_Abort_IT+0x1a8>)
 800c7a2:	4293      	cmp	r3, r2
 800c7a4:	d040      	beq.n	800c828 <HAL_DMA_Abort_IT+0x17c>
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	4a2b      	ldr	r2, [pc, #172]	@ (800c858 <HAL_DMA_Abort_IT+0x1ac>)
 800c7ac:	4293      	cmp	r3, r2
 800c7ae:	d03b      	beq.n	800c828 <HAL_DMA_Abort_IT+0x17c>
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	681b      	ldr	r3, [r3, #0]
 800c7b4:	4a29      	ldr	r2, [pc, #164]	@ (800c85c <HAL_DMA_Abort_IT+0x1b0>)
 800c7b6:	4293      	cmp	r3, r2
 800c7b8:	d036      	beq.n	800c828 <HAL_DMA_Abort_IT+0x17c>
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	4a28      	ldr	r2, [pc, #160]	@ (800c860 <HAL_DMA_Abort_IT+0x1b4>)
 800c7c0:	4293      	cmp	r3, r2
 800c7c2:	d031      	beq.n	800c828 <HAL_DMA_Abort_IT+0x17c>
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	681b      	ldr	r3, [r3, #0]
 800c7c8:	4a26      	ldr	r2, [pc, #152]	@ (800c864 <HAL_DMA_Abort_IT+0x1b8>)
 800c7ca:	4293      	cmp	r3, r2
 800c7cc:	d02c      	beq.n	800c828 <HAL_DMA_Abort_IT+0x17c>
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	681b      	ldr	r3, [r3, #0]
 800c7d2:	4a25      	ldr	r2, [pc, #148]	@ (800c868 <HAL_DMA_Abort_IT+0x1bc>)
 800c7d4:	4293      	cmp	r3, r2
 800c7d6:	d027      	beq.n	800c828 <HAL_DMA_Abort_IT+0x17c>
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	4a23      	ldr	r2, [pc, #140]	@ (800c86c <HAL_DMA_Abort_IT+0x1c0>)
 800c7de:	4293      	cmp	r3, r2
 800c7e0:	d022      	beq.n	800c828 <HAL_DMA_Abort_IT+0x17c>
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	4a22      	ldr	r2, [pc, #136]	@ (800c870 <HAL_DMA_Abort_IT+0x1c4>)
 800c7e8:	4293      	cmp	r3, r2
 800c7ea:	d01d      	beq.n	800c828 <HAL_DMA_Abort_IT+0x17c>
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	4a20      	ldr	r2, [pc, #128]	@ (800c874 <HAL_DMA_Abort_IT+0x1c8>)
 800c7f2:	4293      	cmp	r3, r2
 800c7f4:	d018      	beq.n	800c828 <HAL_DMA_Abort_IT+0x17c>
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	4a1f      	ldr	r2, [pc, #124]	@ (800c878 <HAL_DMA_Abort_IT+0x1cc>)
 800c7fc:	4293      	cmp	r3, r2
 800c7fe:	d013      	beq.n	800c828 <HAL_DMA_Abort_IT+0x17c>
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	4a1d      	ldr	r2, [pc, #116]	@ (800c87c <HAL_DMA_Abort_IT+0x1d0>)
 800c806:	4293      	cmp	r3, r2
 800c808:	d00e      	beq.n	800c828 <HAL_DMA_Abort_IT+0x17c>
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	4a1c      	ldr	r2, [pc, #112]	@ (800c880 <HAL_DMA_Abort_IT+0x1d4>)
 800c810:	4293      	cmp	r3, r2
 800c812:	d009      	beq.n	800c828 <HAL_DMA_Abort_IT+0x17c>
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	4a1a      	ldr	r2, [pc, #104]	@ (800c884 <HAL_DMA_Abort_IT+0x1d8>)
 800c81a:	4293      	cmp	r3, r2
 800c81c:	d004      	beq.n	800c828 <HAL_DMA_Abort_IT+0x17c>
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	4a19      	ldr	r2, [pc, #100]	@ (800c888 <HAL_DMA_Abort_IT+0x1dc>)
 800c824:	4293      	cmp	r3, r2
 800c826:	d108      	bne.n	800c83a <HAL_DMA_Abort_IT+0x18e>
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	681a      	ldr	r2, [r3, #0]
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	f022 0201 	bic.w	r2, r2, #1
 800c836:	601a      	str	r2, [r3, #0]
 800c838:	e178      	b.n	800cb2c <HAL_DMA_Abort_IT+0x480>
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	681a      	ldr	r2, [r3, #0]
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	f022 0201 	bic.w	r2, r2, #1
 800c848:	601a      	str	r2, [r3, #0]
 800c84a:	e16f      	b.n	800cb2c <HAL_DMA_Abort_IT+0x480>
 800c84c:	40020010 	.word	0x40020010
 800c850:	40020028 	.word	0x40020028
 800c854:	40020040 	.word	0x40020040
 800c858:	40020058 	.word	0x40020058
 800c85c:	40020070 	.word	0x40020070
 800c860:	40020088 	.word	0x40020088
 800c864:	400200a0 	.word	0x400200a0
 800c868:	400200b8 	.word	0x400200b8
 800c86c:	40020410 	.word	0x40020410
 800c870:	40020428 	.word	0x40020428
 800c874:	40020440 	.word	0x40020440
 800c878:	40020458 	.word	0x40020458
 800c87c:	40020470 	.word	0x40020470
 800c880:	40020488 	.word	0x40020488
 800c884:	400204a0 	.word	0x400204a0
 800c888:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	681a      	ldr	r2, [r3, #0]
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	681b      	ldr	r3, [r3, #0]
 800c896:	f022 020e 	bic.w	r2, r2, #14
 800c89a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	4a6c      	ldr	r2, [pc, #432]	@ (800ca54 <HAL_DMA_Abort_IT+0x3a8>)
 800c8a2:	4293      	cmp	r3, r2
 800c8a4:	d04a      	beq.n	800c93c <HAL_DMA_Abort_IT+0x290>
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	681b      	ldr	r3, [r3, #0]
 800c8aa:	4a6b      	ldr	r2, [pc, #428]	@ (800ca58 <HAL_DMA_Abort_IT+0x3ac>)
 800c8ac:	4293      	cmp	r3, r2
 800c8ae:	d045      	beq.n	800c93c <HAL_DMA_Abort_IT+0x290>
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	4a69      	ldr	r2, [pc, #420]	@ (800ca5c <HAL_DMA_Abort_IT+0x3b0>)
 800c8b6:	4293      	cmp	r3, r2
 800c8b8:	d040      	beq.n	800c93c <HAL_DMA_Abort_IT+0x290>
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	681b      	ldr	r3, [r3, #0]
 800c8be:	4a68      	ldr	r2, [pc, #416]	@ (800ca60 <HAL_DMA_Abort_IT+0x3b4>)
 800c8c0:	4293      	cmp	r3, r2
 800c8c2:	d03b      	beq.n	800c93c <HAL_DMA_Abort_IT+0x290>
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	4a66      	ldr	r2, [pc, #408]	@ (800ca64 <HAL_DMA_Abort_IT+0x3b8>)
 800c8ca:	4293      	cmp	r3, r2
 800c8cc:	d036      	beq.n	800c93c <HAL_DMA_Abort_IT+0x290>
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	4a65      	ldr	r2, [pc, #404]	@ (800ca68 <HAL_DMA_Abort_IT+0x3bc>)
 800c8d4:	4293      	cmp	r3, r2
 800c8d6:	d031      	beq.n	800c93c <HAL_DMA_Abort_IT+0x290>
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	4a63      	ldr	r2, [pc, #396]	@ (800ca6c <HAL_DMA_Abort_IT+0x3c0>)
 800c8de:	4293      	cmp	r3, r2
 800c8e0:	d02c      	beq.n	800c93c <HAL_DMA_Abort_IT+0x290>
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	4a62      	ldr	r2, [pc, #392]	@ (800ca70 <HAL_DMA_Abort_IT+0x3c4>)
 800c8e8:	4293      	cmp	r3, r2
 800c8ea:	d027      	beq.n	800c93c <HAL_DMA_Abort_IT+0x290>
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	4a60      	ldr	r2, [pc, #384]	@ (800ca74 <HAL_DMA_Abort_IT+0x3c8>)
 800c8f2:	4293      	cmp	r3, r2
 800c8f4:	d022      	beq.n	800c93c <HAL_DMA_Abort_IT+0x290>
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	4a5f      	ldr	r2, [pc, #380]	@ (800ca78 <HAL_DMA_Abort_IT+0x3cc>)
 800c8fc:	4293      	cmp	r3, r2
 800c8fe:	d01d      	beq.n	800c93c <HAL_DMA_Abort_IT+0x290>
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	681b      	ldr	r3, [r3, #0]
 800c904:	4a5d      	ldr	r2, [pc, #372]	@ (800ca7c <HAL_DMA_Abort_IT+0x3d0>)
 800c906:	4293      	cmp	r3, r2
 800c908:	d018      	beq.n	800c93c <HAL_DMA_Abort_IT+0x290>
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	681b      	ldr	r3, [r3, #0]
 800c90e:	4a5c      	ldr	r2, [pc, #368]	@ (800ca80 <HAL_DMA_Abort_IT+0x3d4>)
 800c910:	4293      	cmp	r3, r2
 800c912:	d013      	beq.n	800c93c <HAL_DMA_Abort_IT+0x290>
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	681b      	ldr	r3, [r3, #0]
 800c918:	4a5a      	ldr	r2, [pc, #360]	@ (800ca84 <HAL_DMA_Abort_IT+0x3d8>)
 800c91a:	4293      	cmp	r3, r2
 800c91c:	d00e      	beq.n	800c93c <HAL_DMA_Abort_IT+0x290>
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	681b      	ldr	r3, [r3, #0]
 800c922:	4a59      	ldr	r2, [pc, #356]	@ (800ca88 <HAL_DMA_Abort_IT+0x3dc>)
 800c924:	4293      	cmp	r3, r2
 800c926:	d009      	beq.n	800c93c <HAL_DMA_Abort_IT+0x290>
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	681b      	ldr	r3, [r3, #0]
 800c92c:	4a57      	ldr	r2, [pc, #348]	@ (800ca8c <HAL_DMA_Abort_IT+0x3e0>)
 800c92e:	4293      	cmp	r3, r2
 800c930:	d004      	beq.n	800c93c <HAL_DMA_Abort_IT+0x290>
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	4a56      	ldr	r2, [pc, #344]	@ (800ca90 <HAL_DMA_Abort_IT+0x3e4>)
 800c938:	4293      	cmp	r3, r2
 800c93a:	d108      	bne.n	800c94e <HAL_DMA_Abort_IT+0x2a2>
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	681b      	ldr	r3, [r3, #0]
 800c940:	681a      	ldr	r2, [r3, #0]
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	f022 0201 	bic.w	r2, r2, #1
 800c94a:	601a      	str	r2, [r3, #0]
 800c94c:	e007      	b.n	800c95e <HAL_DMA_Abort_IT+0x2b2>
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	681a      	ldr	r2, [r3, #0]
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	f022 0201 	bic.w	r2, r2, #1
 800c95c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	681b      	ldr	r3, [r3, #0]
 800c962:	4a3c      	ldr	r2, [pc, #240]	@ (800ca54 <HAL_DMA_Abort_IT+0x3a8>)
 800c964:	4293      	cmp	r3, r2
 800c966:	d072      	beq.n	800ca4e <HAL_DMA_Abort_IT+0x3a2>
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	681b      	ldr	r3, [r3, #0]
 800c96c:	4a3a      	ldr	r2, [pc, #232]	@ (800ca58 <HAL_DMA_Abort_IT+0x3ac>)
 800c96e:	4293      	cmp	r3, r2
 800c970:	d06d      	beq.n	800ca4e <HAL_DMA_Abort_IT+0x3a2>
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	681b      	ldr	r3, [r3, #0]
 800c976:	4a39      	ldr	r2, [pc, #228]	@ (800ca5c <HAL_DMA_Abort_IT+0x3b0>)
 800c978:	4293      	cmp	r3, r2
 800c97a:	d068      	beq.n	800ca4e <HAL_DMA_Abort_IT+0x3a2>
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	681b      	ldr	r3, [r3, #0]
 800c980:	4a37      	ldr	r2, [pc, #220]	@ (800ca60 <HAL_DMA_Abort_IT+0x3b4>)
 800c982:	4293      	cmp	r3, r2
 800c984:	d063      	beq.n	800ca4e <HAL_DMA_Abort_IT+0x3a2>
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	681b      	ldr	r3, [r3, #0]
 800c98a:	4a36      	ldr	r2, [pc, #216]	@ (800ca64 <HAL_DMA_Abort_IT+0x3b8>)
 800c98c:	4293      	cmp	r3, r2
 800c98e:	d05e      	beq.n	800ca4e <HAL_DMA_Abort_IT+0x3a2>
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	4a34      	ldr	r2, [pc, #208]	@ (800ca68 <HAL_DMA_Abort_IT+0x3bc>)
 800c996:	4293      	cmp	r3, r2
 800c998:	d059      	beq.n	800ca4e <HAL_DMA_Abort_IT+0x3a2>
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	681b      	ldr	r3, [r3, #0]
 800c99e:	4a33      	ldr	r2, [pc, #204]	@ (800ca6c <HAL_DMA_Abort_IT+0x3c0>)
 800c9a0:	4293      	cmp	r3, r2
 800c9a2:	d054      	beq.n	800ca4e <HAL_DMA_Abort_IT+0x3a2>
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	4a31      	ldr	r2, [pc, #196]	@ (800ca70 <HAL_DMA_Abort_IT+0x3c4>)
 800c9aa:	4293      	cmp	r3, r2
 800c9ac:	d04f      	beq.n	800ca4e <HAL_DMA_Abort_IT+0x3a2>
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	681b      	ldr	r3, [r3, #0]
 800c9b2:	4a30      	ldr	r2, [pc, #192]	@ (800ca74 <HAL_DMA_Abort_IT+0x3c8>)
 800c9b4:	4293      	cmp	r3, r2
 800c9b6:	d04a      	beq.n	800ca4e <HAL_DMA_Abort_IT+0x3a2>
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	681b      	ldr	r3, [r3, #0]
 800c9bc:	4a2e      	ldr	r2, [pc, #184]	@ (800ca78 <HAL_DMA_Abort_IT+0x3cc>)
 800c9be:	4293      	cmp	r3, r2
 800c9c0:	d045      	beq.n	800ca4e <HAL_DMA_Abort_IT+0x3a2>
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	4a2d      	ldr	r2, [pc, #180]	@ (800ca7c <HAL_DMA_Abort_IT+0x3d0>)
 800c9c8:	4293      	cmp	r3, r2
 800c9ca:	d040      	beq.n	800ca4e <HAL_DMA_Abort_IT+0x3a2>
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	681b      	ldr	r3, [r3, #0]
 800c9d0:	4a2b      	ldr	r2, [pc, #172]	@ (800ca80 <HAL_DMA_Abort_IT+0x3d4>)
 800c9d2:	4293      	cmp	r3, r2
 800c9d4:	d03b      	beq.n	800ca4e <HAL_DMA_Abort_IT+0x3a2>
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	681b      	ldr	r3, [r3, #0]
 800c9da:	4a2a      	ldr	r2, [pc, #168]	@ (800ca84 <HAL_DMA_Abort_IT+0x3d8>)
 800c9dc:	4293      	cmp	r3, r2
 800c9de:	d036      	beq.n	800ca4e <HAL_DMA_Abort_IT+0x3a2>
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	681b      	ldr	r3, [r3, #0]
 800c9e4:	4a28      	ldr	r2, [pc, #160]	@ (800ca88 <HAL_DMA_Abort_IT+0x3dc>)
 800c9e6:	4293      	cmp	r3, r2
 800c9e8:	d031      	beq.n	800ca4e <HAL_DMA_Abort_IT+0x3a2>
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	4a27      	ldr	r2, [pc, #156]	@ (800ca8c <HAL_DMA_Abort_IT+0x3e0>)
 800c9f0:	4293      	cmp	r3, r2
 800c9f2:	d02c      	beq.n	800ca4e <HAL_DMA_Abort_IT+0x3a2>
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	4a25      	ldr	r2, [pc, #148]	@ (800ca90 <HAL_DMA_Abort_IT+0x3e4>)
 800c9fa:	4293      	cmp	r3, r2
 800c9fc:	d027      	beq.n	800ca4e <HAL_DMA_Abort_IT+0x3a2>
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	681b      	ldr	r3, [r3, #0]
 800ca02:	4a24      	ldr	r2, [pc, #144]	@ (800ca94 <HAL_DMA_Abort_IT+0x3e8>)
 800ca04:	4293      	cmp	r3, r2
 800ca06:	d022      	beq.n	800ca4e <HAL_DMA_Abort_IT+0x3a2>
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	681b      	ldr	r3, [r3, #0]
 800ca0c:	4a22      	ldr	r2, [pc, #136]	@ (800ca98 <HAL_DMA_Abort_IT+0x3ec>)
 800ca0e:	4293      	cmp	r3, r2
 800ca10:	d01d      	beq.n	800ca4e <HAL_DMA_Abort_IT+0x3a2>
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	4a21      	ldr	r2, [pc, #132]	@ (800ca9c <HAL_DMA_Abort_IT+0x3f0>)
 800ca18:	4293      	cmp	r3, r2
 800ca1a:	d018      	beq.n	800ca4e <HAL_DMA_Abort_IT+0x3a2>
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	4a1f      	ldr	r2, [pc, #124]	@ (800caa0 <HAL_DMA_Abort_IT+0x3f4>)
 800ca22:	4293      	cmp	r3, r2
 800ca24:	d013      	beq.n	800ca4e <HAL_DMA_Abort_IT+0x3a2>
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	681b      	ldr	r3, [r3, #0]
 800ca2a:	4a1e      	ldr	r2, [pc, #120]	@ (800caa4 <HAL_DMA_Abort_IT+0x3f8>)
 800ca2c:	4293      	cmp	r3, r2
 800ca2e:	d00e      	beq.n	800ca4e <HAL_DMA_Abort_IT+0x3a2>
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	4a1c      	ldr	r2, [pc, #112]	@ (800caa8 <HAL_DMA_Abort_IT+0x3fc>)
 800ca36:	4293      	cmp	r3, r2
 800ca38:	d009      	beq.n	800ca4e <HAL_DMA_Abort_IT+0x3a2>
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	681b      	ldr	r3, [r3, #0]
 800ca3e:	4a1b      	ldr	r2, [pc, #108]	@ (800caac <HAL_DMA_Abort_IT+0x400>)
 800ca40:	4293      	cmp	r3, r2
 800ca42:	d004      	beq.n	800ca4e <HAL_DMA_Abort_IT+0x3a2>
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	4a19      	ldr	r2, [pc, #100]	@ (800cab0 <HAL_DMA_Abort_IT+0x404>)
 800ca4a:	4293      	cmp	r3, r2
 800ca4c:	d132      	bne.n	800cab4 <HAL_DMA_Abort_IT+0x408>
 800ca4e:	2301      	movs	r3, #1
 800ca50:	e031      	b.n	800cab6 <HAL_DMA_Abort_IT+0x40a>
 800ca52:	bf00      	nop
 800ca54:	40020010 	.word	0x40020010
 800ca58:	40020028 	.word	0x40020028
 800ca5c:	40020040 	.word	0x40020040
 800ca60:	40020058 	.word	0x40020058
 800ca64:	40020070 	.word	0x40020070
 800ca68:	40020088 	.word	0x40020088
 800ca6c:	400200a0 	.word	0x400200a0
 800ca70:	400200b8 	.word	0x400200b8
 800ca74:	40020410 	.word	0x40020410
 800ca78:	40020428 	.word	0x40020428
 800ca7c:	40020440 	.word	0x40020440
 800ca80:	40020458 	.word	0x40020458
 800ca84:	40020470 	.word	0x40020470
 800ca88:	40020488 	.word	0x40020488
 800ca8c:	400204a0 	.word	0x400204a0
 800ca90:	400204b8 	.word	0x400204b8
 800ca94:	58025408 	.word	0x58025408
 800ca98:	5802541c 	.word	0x5802541c
 800ca9c:	58025430 	.word	0x58025430
 800caa0:	58025444 	.word	0x58025444
 800caa4:	58025458 	.word	0x58025458
 800caa8:	5802546c 	.word	0x5802546c
 800caac:	58025480 	.word	0x58025480
 800cab0:	58025494 	.word	0x58025494
 800cab4:	2300      	movs	r3, #0
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	d028      	beq.n	800cb0c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800cabe:	681a      	ldr	r2, [r3, #0]
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800cac4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800cac8:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cace:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cad4:	f003 031f 	and.w	r3, r3, #31
 800cad8:	2201      	movs	r2, #1
 800cada:	409a      	lsls	r2, r3
 800cadc:	68fb      	ldr	r3, [r7, #12]
 800cade:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cae4:	687a      	ldr	r2, [r7, #4]
 800cae6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800cae8:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d00c      	beq.n	800cb0c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800caf6:	681a      	ldr	r2, [r3, #0]
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cafc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800cb00:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cb06:	687a      	ldr	r2, [r7, #4]
 800cb08:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800cb0a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	2201      	movs	r2, #1
 800cb10:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	2200      	movs	r2, #0
 800cb18:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	d003      	beq.n	800cb2c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cb28:	6878      	ldr	r0, [r7, #4]
 800cb2a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800cb2c:	2300      	movs	r3, #0
}
 800cb2e:	4618      	mov	r0, r3
 800cb30:	3710      	adds	r7, #16
 800cb32:	46bd      	mov	sp, r7
 800cb34:	bd80      	pop	{r7, pc}
 800cb36:	bf00      	nop

0800cb38 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800cb38:	b580      	push	{r7, lr}
 800cb3a:	b08a      	sub	sp, #40	@ 0x28
 800cb3c:	af00      	add	r7, sp, #0
 800cb3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800cb40:	2300      	movs	r3, #0
 800cb42:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800cb44:	4b67      	ldr	r3, [pc, #412]	@ (800cce4 <HAL_DMA_IRQHandler+0x1ac>)
 800cb46:	681b      	ldr	r3, [r3, #0]
 800cb48:	4a67      	ldr	r2, [pc, #412]	@ (800cce8 <HAL_DMA_IRQHandler+0x1b0>)
 800cb4a:	fba2 2303 	umull	r2, r3, r2, r3
 800cb4e:	0a9b      	lsrs	r3, r3, #10
 800cb50:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cb56:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cb5c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800cb5e:	6a3b      	ldr	r3, [r7, #32]
 800cb60:	681b      	ldr	r3, [r3, #0]
 800cb62:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800cb64:	69fb      	ldr	r3, [r7, #28]
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	681b      	ldr	r3, [r3, #0]
 800cb6e:	4a5f      	ldr	r2, [pc, #380]	@ (800ccec <HAL_DMA_IRQHandler+0x1b4>)
 800cb70:	4293      	cmp	r3, r2
 800cb72:	d04a      	beq.n	800cc0a <HAL_DMA_IRQHandler+0xd2>
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	681b      	ldr	r3, [r3, #0]
 800cb78:	4a5d      	ldr	r2, [pc, #372]	@ (800ccf0 <HAL_DMA_IRQHandler+0x1b8>)
 800cb7a:	4293      	cmp	r3, r2
 800cb7c:	d045      	beq.n	800cc0a <HAL_DMA_IRQHandler+0xd2>
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	681b      	ldr	r3, [r3, #0]
 800cb82:	4a5c      	ldr	r2, [pc, #368]	@ (800ccf4 <HAL_DMA_IRQHandler+0x1bc>)
 800cb84:	4293      	cmp	r3, r2
 800cb86:	d040      	beq.n	800cc0a <HAL_DMA_IRQHandler+0xd2>
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	681b      	ldr	r3, [r3, #0]
 800cb8c:	4a5a      	ldr	r2, [pc, #360]	@ (800ccf8 <HAL_DMA_IRQHandler+0x1c0>)
 800cb8e:	4293      	cmp	r3, r2
 800cb90:	d03b      	beq.n	800cc0a <HAL_DMA_IRQHandler+0xd2>
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	681b      	ldr	r3, [r3, #0]
 800cb96:	4a59      	ldr	r2, [pc, #356]	@ (800ccfc <HAL_DMA_IRQHandler+0x1c4>)
 800cb98:	4293      	cmp	r3, r2
 800cb9a:	d036      	beq.n	800cc0a <HAL_DMA_IRQHandler+0xd2>
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	681b      	ldr	r3, [r3, #0]
 800cba0:	4a57      	ldr	r2, [pc, #348]	@ (800cd00 <HAL_DMA_IRQHandler+0x1c8>)
 800cba2:	4293      	cmp	r3, r2
 800cba4:	d031      	beq.n	800cc0a <HAL_DMA_IRQHandler+0xd2>
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	681b      	ldr	r3, [r3, #0]
 800cbaa:	4a56      	ldr	r2, [pc, #344]	@ (800cd04 <HAL_DMA_IRQHandler+0x1cc>)
 800cbac:	4293      	cmp	r3, r2
 800cbae:	d02c      	beq.n	800cc0a <HAL_DMA_IRQHandler+0xd2>
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	4a54      	ldr	r2, [pc, #336]	@ (800cd08 <HAL_DMA_IRQHandler+0x1d0>)
 800cbb6:	4293      	cmp	r3, r2
 800cbb8:	d027      	beq.n	800cc0a <HAL_DMA_IRQHandler+0xd2>
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	4a53      	ldr	r2, [pc, #332]	@ (800cd0c <HAL_DMA_IRQHandler+0x1d4>)
 800cbc0:	4293      	cmp	r3, r2
 800cbc2:	d022      	beq.n	800cc0a <HAL_DMA_IRQHandler+0xd2>
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	4a51      	ldr	r2, [pc, #324]	@ (800cd10 <HAL_DMA_IRQHandler+0x1d8>)
 800cbca:	4293      	cmp	r3, r2
 800cbcc:	d01d      	beq.n	800cc0a <HAL_DMA_IRQHandler+0xd2>
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	681b      	ldr	r3, [r3, #0]
 800cbd2:	4a50      	ldr	r2, [pc, #320]	@ (800cd14 <HAL_DMA_IRQHandler+0x1dc>)
 800cbd4:	4293      	cmp	r3, r2
 800cbd6:	d018      	beq.n	800cc0a <HAL_DMA_IRQHandler+0xd2>
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	681b      	ldr	r3, [r3, #0]
 800cbdc:	4a4e      	ldr	r2, [pc, #312]	@ (800cd18 <HAL_DMA_IRQHandler+0x1e0>)
 800cbde:	4293      	cmp	r3, r2
 800cbe0:	d013      	beq.n	800cc0a <HAL_DMA_IRQHandler+0xd2>
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	4a4d      	ldr	r2, [pc, #308]	@ (800cd1c <HAL_DMA_IRQHandler+0x1e4>)
 800cbe8:	4293      	cmp	r3, r2
 800cbea:	d00e      	beq.n	800cc0a <HAL_DMA_IRQHandler+0xd2>
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	4a4b      	ldr	r2, [pc, #300]	@ (800cd20 <HAL_DMA_IRQHandler+0x1e8>)
 800cbf2:	4293      	cmp	r3, r2
 800cbf4:	d009      	beq.n	800cc0a <HAL_DMA_IRQHandler+0xd2>
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	4a4a      	ldr	r2, [pc, #296]	@ (800cd24 <HAL_DMA_IRQHandler+0x1ec>)
 800cbfc:	4293      	cmp	r3, r2
 800cbfe:	d004      	beq.n	800cc0a <HAL_DMA_IRQHandler+0xd2>
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	681b      	ldr	r3, [r3, #0]
 800cc04:	4a48      	ldr	r2, [pc, #288]	@ (800cd28 <HAL_DMA_IRQHandler+0x1f0>)
 800cc06:	4293      	cmp	r3, r2
 800cc08:	d101      	bne.n	800cc0e <HAL_DMA_IRQHandler+0xd6>
 800cc0a:	2301      	movs	r3, #1
 800cc0c:	e000      	b.n	800cc10 <HAL_DMA_IRQHandler+0xd8>
 800cc0e:	2300      	movs	r3, #0
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	f000 842b 	beq.w	800d46c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cc1a:	f003 031f 	and.w	r3, r3, #31
 800cc1e:	2208      	movs	r2, #8
 800cc20:	409a      	lsls	r2, r3
 800cc22:	69bb      	ldr	r3, [r7, #24]
 800cc24:	4013      	ands	r3, r2
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	f000 80a2 	beq.w	800cd70 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	4a2e      	ldr	r2, [pc, #184]	@ (800ccec <HAL_DMA_IRQHandler+0x1b4>)
 800cc32:	4293      	cmp	r3, r2
 800cc34:	d04a      	beq.n	800cccc <HAL_DMA_IRQHandler+0x194>
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	681b      	ldr	r3, [r3, #0]
 800cc3a:	4a2d      	ldr	r2, [pc, #180]	@ (800ccf0 <HAL_DMA_IRQHandler+0x1b8>)
 800cc3c:	4293      	cmp	r3, r2
 800cc3e:	d045      	beq.n	800cccc <HAL_DMA_IRQHandler+0x194>
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	681b      	ldr	r3, [r3, #0]
 800cc44:	4a2b      	ldr	r2, [pc, #172]	@ (800ccf4 <HAL_DMA_IRQHandler+0x1bc>)
 800cc46:	4293      	cmp	r3, r2
 800cc48:	d040      	beq.n	800cccc <HAL_DMA_IRQHandler+0x194>
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	4a2a      	ldr	r2, [pc, #168]	@ (800ccf8 <HAL_DMA_IRQHandler+0x1c0>)
 800cc50:	4293      	cmp	r3, r2
 800cc52:	d03b      	beq.n	800cccc <HAL_DMA_IRQHandler+0x194>
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	681b      	ldr	r3, [r3, #0]
 800cc58:	4a28      	ldr	r2, [pc, #160]	@ (800ccfc <HAL_DMA_IRQHandler+0x1c4>)
 800cc5a:	4293      	cmp	r3, r2
 800cc5c:	d036      	beq.n	800cccc <HAL_DMA_IRQHandler+0x194>
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	681b      	ldr	r3, [r3, #0]
 800cc62:	4a27      	ldr	r2, [pc, #156]	@ (800cd00 <HAL_DMA_IRQHandler+0x1c8>)
 800cc64:	4293      	cmp	r3, r2
 800cc66:	d031      	beq.n	800cccc <HAL_DMA_IRQHandler+0x194>
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	681b      	ldr	r3, [r3, #0]
 800cc6c:	4a25      	ldr	r2, [pc, #148]	@ (800cd04 <HAL_DMA_IRQHandler+0x1cc>)
 800cc6e:	4293      	cmp	r3, r2
 800cc70:	d02c      	beq.n	800cccc <HAL_DMA_IRQHandler+0x194>
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	4a24      	ldr	r2, [pc, #144]	@ (800cd08 <HAL_DMA_IRQHandler+0x1d0>)
 800cc78:	4293      	cmp	r3, r2
 800cc7a:	d027      	beq.n	800cccc <HAL_DMA_IRQHandler+0x194>
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	681b      	ldr	r3, [r3, #0]
 800cc80:	4a22      	ldr	r2, [pc, #136]	@ (800cd0c <HAL_DMA_IRQHandler+0x1d4>)
 800cc82:	4293      	cmp	r3, r2
 800cc84:	d022      	beq.n	800cccc <HAL_DMA_IRQHandler+0x194>
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	681b      	ldr	r3, [r3, #0]
 800cc8a:	4a21      	ldr	r2, [pc, #132]	@ (800cd10 <HAL_DMA_IRQHandler+0x1d8>)
 800cc8c:	4293      	cmp	r3, r2
 800cc8e:	d01d      	beq.n	800cccc <HAL_DMA_IRQHandler+0x194>
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	681b      	ldr	r3, [r3, #0]
 800cc94:	4a1f      	ldr	r2, [pc, #124]	@ (800cd14 <HAL_DMA_IRQHandler+0x1dc>)
 800cc96:	4293      	cmp	r3, r2
 800cc98:	d018      	beq.n	800cccc <HAL_DMA_IRQHandler+0x194>
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	681b      	ldr	r3, [r3, #0]
 800cc9e:	4a1e      	ldr	r2, [pc, #120]	@ (800cd18 <HAL_DMA_IRQHandler+0x1e0>)
 800cca0:	4293      	cmp	r3, r2
 800cca2:	d013      	beq.n	800cccc <HAL_DMA_IRQHandler+0x194>
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	681b      	ldr	r3, [r3, #0]
 800cca8:	4a1c      	ldr	r2, [pc, #112]	@ (800cd1c <HAL_DMA_IRQHandler+0x1e4>)
 800ccaa:	4293      	cmp	r3, r2
 800ccac:	d00e      	beq.n	800cccc <HAL_DMA_IRQHandler+0x194>
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	681b      	ldr	r3, [r3, #0]
 800ccb2:	4a1b      	ldr	r2, [pc, #108]	@ (800cd20 <HAL_DMA_IRQHandler+0x1e8>)
 800ccb4:	4293      	cmp	r3, r2
 800ccb6:	d009      	beq.n	800cccc <HAL_DMA_IRQHandler+0x194>
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	4a19      	ldr	r2, [pc, #100]	@ (800cd24 <HAL_DMA_IRQHandler+0x1ec>)
 800ccbe:	4293      	cmp	r3, r2
 800ccc0:	d004      	beq.n	800cccc <HAL_DMA_IRQHandler+0x194>
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	681b      	ldr	r3, [r3, #0]
 800ccc6:	4a18      	ldr	r2, [pc, #96]	@ (800cd28 <HAL_DMA_IRQHandler+0x1f0>)
 800ccc8:	4293      	cmp	r3, r2
 800ccca:	d12f      	bne.n	800cd2c <HAL_DMA_IRQHandler+0x1f4>
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	681b      	ldr	r3, [r3, #0]
 800ccd0:	681b      	ldr	r3, [r3, #0]
 800ccd2:	f003 0304 	and.w	r3, r3, #4
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	bf14      	ite	ne
 800ccda:	2301      	movne	r3, #1
 800ccdc:	2300      	moveq	r3, #0
 800ccde:	b2db      	uxtb	r3, r3
 800cce0:	e02e      	b.n	800cd40 <HAL_DMA_IRQHandler+0x208>
 800cce2:	bf00      	nop
 800cce4:	24000004 	.word	0x24000004
 800cce8:	1b4e81b5 	.word	0x1b4e81b5
 800ccec:	40020010 	.word	0x40020010
 800ccf0:	40020028 	.word	0x40020028
 800ccf4:	40020040 	.word	0x40020040
 800ccf8:	40020058 	.word	0x40020058
 800ccfc:	40020070 	.word	0x40020070
 800cd00:	40020088 	.word	0x40020088
 800cd04:	400200a0 	.word	0x400200a0
 800cd08:	400200b8 	.word	0x400200b8
 800cd0c:	40020410 	.word	0x40020410
 800cd10:	40020428 	.word	0x40020428
 800cd14:	40020440 	.word	0x40020440
 800cd18:	40020458 	.word	0x40020458
 800cd1c:	40020470 	.word	0x40020470
 800cd20:	40020488 	.word	0x40020488
 800cd24:	400204a0 	.word	0x400204a0
 800cd28:	400204b8 	.word	0x400204b8
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	f003 0308 	and.w	r3, r3, #8
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	bf14      	ite	ne
 800cd3a:	2301      	movne	r3, #1
 800cd3c:	2300      	moveq	r3, #0
 800cd3e:	b2db      	uxtb	r3, r3
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	d015      	beq.n	800cd70 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	681a      	ldr	r2, [r3, #0]
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	681b      	ldr	r3, [r3, #0]
 800cd4e:	f022 0204 	bic.w	r2, r2, #4
 800cd52:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cd58:	f003 031f 	and.w	r3, r3, #31
 800cd5c:	2208      	movs	r2, #8
 800cd5e:	409a      	lsls	r2, r3
 800cd60:	6a3b      	ldr	r3, [r7, #32]
 800cd62:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cd68:	f043 0201 	orr.w	r2, r3, #1
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cd74:	f003 031f 	and.w	r3, r3, #31
 800cd78:	69ba      	ldr	r2, [r7, #24]
 800cd7a:	fa22 f303 	lsr.w	r3, r2, r3
 800cd7e:	f003 0301 	and.w	r3, r3, #1
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	d06e      	beq.n	800ce64 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	681b      	ldr	r3, [r3, #0]
 800cd8a:	4a69      	ldr	r2, [pc, #420]	@ (800cf30 <HAL_DMA_IRQHandler+0x3f8>)
 800cd8c:	4293      	cmp	r3, r2
 800cd8e:	d04a      	beq.n	800ce26 <HAL_DMA_IRQHandler+0x2ee>
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	4a67      	ldr	r2, [pc, #412]	@ (800cf34 <HAL_DMA_IRQHandler+0x3fc>)
 800cd96:	4293      	cmp	r3, r2
 800cd98:	d045      	beq.n	800ce26 <HAL_DMA_IRQHandler+0x2ee>
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	681b      	ldr	r3, [r3, #0]
 800cd9e:	4a66      	ldr	r2, [pc, #408]	@ (800cf38 <HAL_DMA_IRQHandler+0x400>)
 800cda0:	4293      	cmp	r3, r2
 800cda2:	d040      	beq.n	800ce26 <HAL_DMA_IRQHandler+0x2ee>
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	681b      	ldr	r3, [r3, #0]
 800cda8:	4a64      	ldr	r2, [pc, #400]	@ (800cf3c <HAL_DMA_IRQHandler+0x404>)
 800cdaa:	4293      	cmp	r3, r2
 800cdac:	d03b      	beq.n	800ce26 <HAL_DMA_IRQHandler+0x2ee>
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	681b      	ldr	r3, [r3, #0]
 800cdb2:	4a63      	ldr	r2, [pc, #396]	@ (800cf40 <HAL_DMA_IRQHandler+0x408>)
 800cdb4:	4293      	cmp	r3, r2
 800cdb6:	d036      	beq.n	800ce26 <HAL_DMA_IRQHandler+0x2ee>
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	681b      	ldr	r3, [r3, #0]
 800cdbc:	4a61      	ldr	r2, [pc, #388]	@ (800cf44 <HAL_DMA_IRQHandler+0x40c>)
 800cdbe:	4293      	cmp	r3, r2
 800cdc0:	d031      	beq.n	800ce26 <HAL_DMA_IRQHandler+0x2ee>
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	681b      	ldr	r3, [r3, #0]
 800cdc6:	4a60      	ldr	r2, [pc, #384]	@ (800cf48 <HAL_DMA_IRQHandler+0x410>)
 800cdc8:	4293      	cmp	r3, r2
 800cdca:	d02c      	beq.n	800ce26 <HAL_DMA_IRQHandler+0x2ee>
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	681b      	ldr	r3, [r3, #0]
 800cdd0:	4a5e      	ldr	r2, [pc, #376]	@ (800cf4c <HAL_DMA_IRQHandler+0x414>)
 800cdd2:	4293      	cmp	r3, r2
 800cdd4:	d027      	beq.n	800ce26 <HAL_DMA_IRQHandler+0x2ee>
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	681b      	ldr	r3, [r3, #0]
 800cdda:	4a5d      	ldr	r2, [pc, #372]	@ (800cf50 <HAL_DMA_IRQHandler+0x418>)
 800cddc:	4293      	cmp	r3, r2
 800cdde:	d022      	beq.n	800ce26 <HAL_DMA_IRQHandler+0x2ee>
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	4a5b      	ldr	r2, [pc, #364]	@ (800cf54 <HAL_DMA_IRQHandler+0x41c>)
 800cde6:	4293      	cmp	r3, r2
 800cde8:	d01d      	beq.n	800ce26 <HAL_DMA_IRQHandler+0x2ee>
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	681b      	ldr	r3, [r3, #0]
 800cdee:	4a5a      	ldr	r2, [pc, #360]	@ (800cf58 <HAL_DMA_IRQHandler+0x420>)
 800cdf0:	4293      	cmp	r3, r2
 800cdf2:	d018      	beq.n	800ce26 <HAL_DMA_IRQHandler+0x2ee>
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	681b      	ldr	r3, [r3, #0]
 800cdf8:	4a58      	ldr	r2, [pc, #352]	@ (800cf5c <HAL_DMA_IRQHandler+0x424>)
 800cdfa:	4293      	cmp	r3, r2
 800cdfc:	d013      	beq.n	800ce26 <HAL_DMA_IRQHandler+0x2ee>
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	681b      	ldr	r3, [r3, #0]
 800ce02:	4a57      	ldr	r2, [pc, #348]	@ (800cf60 <HAL_DMA_IRQHandler+0x428>)
 800ce04:	4293      	cmp	r3, r2
 800ce06:	d00e      	beq.n	800ce26 <HAL_DMA_IRQHandler+0x2ee>
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	681b      	ldr	r3, [r3, #0]
 800ce0c:	4a55      	ldr	r2, [pc, #340]	@ (800cf64 <HAL_DMA_IRQHandler+0x42c>)
 800ce0e:	4293      	cmp	r3, r2
 800ce10:	d009      	beq.n	800ce26 <HAL_DMA_IRQHandler+0x2ee>
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	681b      	ldr	r3, [r3, #0]
 800ce16:	4a54      	ldr	r2, [pc, #336]	@ (800cf68 <HAL_DMA_IRQHandler+0x430>)
 800ce18:	4293      	cmp	r3, r2
 800ce1a:	d004      	beq.n	800ce26 <HAL_DMA_IRQHandler+0x2ee>
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	681b      	ldr	r3, [r3, #0]
 800ce20:	4a52      	ldr	r2, [pc, #328]	@ (800cf6c <HAL_DMA_IRQHandler+0x434>)
 800ce22:	4293      	cmp	r3, r2
 800ce24:	d10a      	bne.n	800ce3c <HAL_DMA_IRQHandler+0x304>
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	681b      	ldr	r3, [r3, #0]
 800ce2a:	695b      	ldr	r3, [r3, #20]
 800ce2c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ce30:	2b00      	cmp	r3, #0
 800ce32:	bf14      	ite	ne
 800ce34:	2301      	movne	r3, #1
 800ce36:	2300      	moveq	r3, #0
 800ce38:	b2db      	uxtb	r3, r3
 800ce3a:	e003      	b.n	800ce44 <HAL_DMA_IRQHandler+0x30c>
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	681b      	ldr	r3, [r3, #0]
 800ce42:	2300      	movs	r3, #0
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	d00d      	beq.n	800ce64 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ce4c:	f003 031f 	and.w	r3, r3, #31
 800ce50:	2201      	movs	r2, #1
 800ce52:	409a      	lsls	r2, r3
 800ce54:	6a3b      	ldr	r3, [r7, #32]
 800ce56:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ce5c:	f043 0202 	orr.w	r2, r3, #2
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ce68:	f003 031f 	and.w	r3, r3, #31
 800ce6c:	2204      	movs	r2, #4
 800ce6e:	409a      	lsls	r2, r3
 800ce70:	69bb      	ldr	r3, [r7, #24]
 800ce72:	4013      	ands	r3, r2
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	f000 808f 	beq.w	800cf98 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	681b      	ldr	r3, [r3, #0]
 800ce7e:	4a2c      	ldr	r2, [pc, #176]	@ (800cf30 <HAL_DMA_IRQHandler+0x3f8>)
 800ce80:	4293      	cmp	r3, r2
 800ce82:	d04a      	beq.n	800cf1a <HAL_DMA_IRQHandler+0x3e2>
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	681b      	ldr	r3, [r3, #0]
 800ce88:	4a2a      	ldr	r2, [pc, #168]	@ (800cf34 <HAL_DMA_IRQHandler+0x3fc>)
 800ce8a:	4293      	cmp	r3, r2
 800ce8c:	d045      	beq.n	800cf1a <HAL_DMA_IRQHandler+0x3e2>
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	4a29      	ldr	r2, [pc, #164]	@ (800cf38 <HAL_DMA_IRQHandler+0x400>)
 800ce94:	4293      	cmp	r3, r2
 800ce96:	d040      	beq.n	800cf1a <HAL_DMA_IRQHandler+0x3e2>
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	681b      	ldr	r3, [r3, #0]
 800ce9c:	4a27      	ldr	r2, [pc, #156]	@ (800cf3c <HAL_DMA_IRQHandler+0x404>)
 800ce9e:	4293      	cmp	r3, r2
 800cea0:	d03b      	beq.n	800cf1a <HAL_DMA_IRQHandler+0x3e2>
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	4a26      	ldr	r2, [pc, #152]	@ (800cf40 <HAL_DMA_IRQHandler+0x408>)
 800cea8:	4293      	cmp	r3, r2
 800ceaa:	d036      	beq.n	800cf1a <HAL_DMA_IRQHandler+0x3e2>
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	681b      	ldr	r3, [r3, #0]
 800ceb0:	4a24      	ldr	r2, [pc, #144]	@ (800cf44 <HAL_DMA_IRQHandler+0x40c>)
 800ceb2:	4293      	cmp	r3, r2
 800ceb4:	d031      	beq.n	800cf1a <HAL_DMA_IRQHandler+0x3e2>
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	681b      	ldr	r3, [r3, #0]
 800ceba:	4a23      	ldr	r2, [pc, #140]	@ (800cf48 <HAL_DMA_IRQHandler+0x410>)
 800cebc:	4293      	cmp	r3, r2
 800cebe:	d02c      	beq.n	800cf1a <HAL_DMA_IRQHandler+0x3e2>
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	681b      	ldr	r3, [r3, #0]
 800cec4:	4a21      	ldr	r2, [pc, #132]	@ (800cf4c <HAL_DMA_IRQHandler+0x414>)
 800cec6:	4293      	cmp	r3, r2
 800cec8:	d027      	beq.n	800cf1a <HAL_DMA_IRQHandler+0x3e2>
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	681b      	ldr	r3, [r3, #0]
 800cece:	4a20      	ldr	r2, [pc, #128]	@ (800cf50 <HAL_DMA_IRQHandler+0x418>)
 800ced0:	4293      	cmp	r3, r2
 800ced2:	d022      	beq.n	800cf1a <HAL_DMA_IRQHandler+0x3e2>
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	681b      	ldr	r3, [r3, #0]
 800ced8:	4a1e      	ldr	r2, [pc, #120]	@ (800cf54 <HAL_DMA_IRQHandler+0x41c>)
 800ceda:	4293      	cmp	r3, r2
 800cedc:	d01d      	beq.n	800cf1a <HAL_DMA_IRQHandler+0x3e2>
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	4a1d      	ldr	r2, [pc, #116]	@ (800cf58 <HAL_DMA_IRQHandler+0x420>)
 800cee4:	4293      	cmp	r3, r2
 800cee6:	d018      	beq.n	800cf1a <HAL_DMA_IRQHandler+0x3e2>
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	4a1b      	ldr	r2, [pc, #108]	@ (800cf5c <HAL_DMA_IRQHandler+0x424>)
 800ceee:	4293      	cmp	r3, r2
 800cef0:	d013      	beq.n	800cf1a <HAL_DMA_IRQHandler+0x3e2>
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	681b      	ldr	r3, [r3, #0]
 800cef6:	4a1a      	ldr	r2, [pc, #104]	@ (800cf60 <HAL_DMA_IRQHandler+0x428>)
 800cef8:	4293      	cmp	r3, r2
 800cefa:	d00e      	beq.n	800cf1a <HAL_DMA_IRQHandler+0x3e2>
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	4a18      	ldr	r2, [pc, #96]	@ (800cf64 <HAL_DMA_IRQHandler+0x42c>)
 800cf02:	4293      	cmp	r3, r2
 800cf04:	d009      	beq.n	800cf1a <HAL_DMA_IRQHandler+0x3e2>
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	681b      	ldr	r3, [r3, #0]
 800cf0a:	4a17      	ldr	r2, [pc, #92]	@ (800cf68 <HAL_DMA_IRQHandler+0x430>)
 800cf0c:	4293      	cmp	r3, r2
 800cf0e:	d004      	beq.n	800cf1a <HAL_DMA_IRQHandler+0x3e2>
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	681b      	ldr	r3, [r3, #0]
 800cf14:	4a15      	ldr	r2, [pc, #84]	@ (800cf6c <HAL_DMA_IRQHandler+0x434>)
 800cf16:	4293      	cmp	r3, r2
 800cf18:	d12a      	bne.n	800cf70 <HAL_DMA_IRQHandler+0x438>
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	681b      	ldr	r3, [r3, #0]
 800cf1e:	681b      	ldr	r3, [r3, #0]
 800cf20:	f003 0302 	and.w	r3, r3, #2
 800cf24:	2b00      	cmp	r3, #0
 800cf26:	bf14      	ite	ne
 800cf28:	2301      	movne	r3, #1
 800cf2a:	2300      	moveq	r3, #0
 800cf2c:	b2db      	uxtb	r3, r3
 800cf2e:	e023      	b.n	800cf78 <HAL_DMA_IRQHandler+0x440>
 800cf30:	40020010 	.word	0x40020010
 800cf34:	40020028 	.word	0x40020028
 800cf38:	40020040 	.word	0x40020040
 800cf3c:	40020058 	.word	0x40020058
 800cf40:	40020070 	.word	0x40020070
 800cf44:	40020088 	.word	0x40020088
 800cf48:	400200a0 	.word	0x400200a0
 800cf4c:	400200b8 	.word	0x400200b8
 800cf50:	40020410 	.word	0x40020410
 800cf54:	40020428 	.word	0x40020428
 800cf58:	40020440 	.word	0x40020440
 800cf5c:	40020458 	.word	0x40020458
 800cf60:	40020470 	.word	0x40020470
 800cf64:	40020488 	.word	0x40020488
 800cf68:	400204a0 	.word	0x400204a0
 800cf6c:	400204b8 	.word	0x400204b8
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	681b      	ldr	r3, [r3, #0]
 800cf74:	681b      	ldr	r3, [r3, #0]
 800cf76:	2300      	movs	r3, #0
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	d00d      	beq.n	800cf98 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cf80:	f003 031f 	and.w	r3, r3, #31
 800cf84:	2204      	movs	r2, #4
 800cf86:	409a      	lsls	r2, r3
 800cf88:	6a3b      	ldr	r3, [r7, #32]
 800cf8a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cf90:	f043 0204 	orr.w	r2, r3, #4
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cf9c:	f003 031f 	and.w	r3, r3, #31
 800cfa0:	2210      	movs	r2, #16
 800cfa2:	409a      	lsls	r2, r3
 800cfa4:	69bb      	ldr	r3, [r7, #24]
 800cfa6:	4013      	ands	r3, r2
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	f000 80a6 	beq.w	800d0fa <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	681b      	ldr	r3, [r3, #0]
 800cfb2:	4a85      	ldr	r2, [pc, #532]	@ (800d1c8 <HAL_DMA_IRQHandler+0x690>)
 800cfb4:	4293      	cmp	r3, r2
 800cfb6:	d04a      	beq.n	800d04e <HAL_DMA_IRQHandler+0x516>
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	681b      	ldr	r3, [r3, #0]
 800cfbc:	4a83      	ldr	r2, [pc, #524]	@ (800d1cc <HAL_DMA_IRQHandler+0x694>)
 800cfbe:	4293      	cmp	r3, r2
 800cfc0:	d045      	beq.n	800d04e <HAL_DMA_IRQHandler+0x516>
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	681b      	ldr	r3, [r3, #0]
 800cfc6:	4a82      	ldr	r2, [pc, #520]	@ (800d1d0 <HAL_DMA_IRQHandler+0x698>)
 800cfc8:	4293      	cmp	r3, r2
 800cfca:	d040      	beq.n	800d04e <HAL_DMA_IRQHandler+0x516>
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	681b      	ldr	r3, [r3, #0]
 800cfd0:	4a80      	ldr	r2, [pc, #512]	@ (800d1d4 <HAL_DMA_IRQHandler+0x69c>)
 800cfd2:	4293      	cmp	r3, r2
 800cfd4:	d03b      	beq.n	800d04e <HAL_DMA_IRQHandler+0x516>
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	681b      	ldr	r3, [r3, #0]
 800cfda:	4a7f      	ldr	r2, [pc, #508]	@ (800d1d8 <HAL_DMA_IRQHandler+0x6a0>)
 800cfdc:	4293      	cmp	r3, r2
 800cfde:	d036      	beq.n	800d04e <HAL_DMA_IRQHandler+0x516>
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	681b      	ldr	r3, [r3, #0]
 800cfe4:	4a7d      	ldr	r2, [pc, #500]	@ (800d1dc <HAL_DMA_IRQHandler+0x6a4>)
 800cfe6:	4293      	cmp	r3, r2
 800cfe8:	d031      	beq.n	800d04e <HAL_DMA_IRQHandler+0x516>
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	681b      	ldr	r3, [r3, #0]
 800cfee:	4a7c      	ldr	r2, [pc, #496]	@ (800d1e0 <HAL_DMA_IRQHandler+0x6a8>)
 800cff0:	4293      	cmp	r3, r2
 800cff2:	d02c      	beq.n	800d04e <HAL_DMA_IRQHandler+0x516>
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	681b      	ldr	r3, [r3, #0]
 800cff8:	4a7a      	ldr	r2, [pc, #488]	@ (800d1e4 <HAL_DMA_IRQHandler+0x6ac>)
 800cffa:	4293      	cmp	r3, r2
 800cffc:	d027      	beq.n	800d04e <HAL_DMA_IRQHandler+0x516>
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	681b      	ldr	r3, [r3, #0]
 800d002:	4a79      	ldr	r2, [pc, #484]	@ (800d1e8 <HAL_DMA_IRQHandler+0x6b0>)
 800d004:	4293      	cmp	r3, r2
 800d006:	d022      	beq.n	800d04e <HAL_DMA_IRQHandler+0x516>
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	681b      	ldr	r3, [r3, #0]
 800d00c:	4a77      	ldr	r2, [pc, #476]	@ (800d1ec <HAL_DMA_IRQHandler+0x6b4>)
 800d00e:	4293      	cmp	r3, r2
 800d010:	d01d      	beq.n	800d04e <HAL_DMA_IRQHandler+0x516>
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	681b      	ldr	r3, [r3, #0]
 800d016:	4a76      	ldr	r2, [pc, #472]	@ (800d1f0 <HAL_DMA_IRQHandler+0x6b8>)
 800d018:	4293      	cmp	r3, r2
 800d01a:	d018      	beq.n	800d04e <HAL_DMA_IRQHandler+0x516>
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	4a74      	ldr	r2, [pc, #464]	@ (800d1f4 <HAL_DMA_IRQHandler+0x6bc>)
 800d022:	4293      	cmp	r3, r2
 800d024:	d013      	beq.n	800d04e <HAL_DMA_IRQHandler+0x516>
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	681b      	ldr	r3, [r3, #0]
 800d02a:	4a73      	ldr	r2, [pc, #460]	@ (800d1f8 <HAL_DMA_IRQHandler+0x6c0>)
 800d02c:	4293      	cmp	r3, r2
 800d02e:	d00e      	beq.n	800d04e <HAL_DMA_IRQHandler+0x516>
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	681b      	ldr	r3, [r3, #0]
 800d034:	4a71      	ldr	r2, [pc, #452]	@ (800d1fc <HAL_DMA_IRQHandler+0x6c4>)
 800d036:	4293      	cmp	r3, r2
 800d038:	d009      	beq.n	800d04e <HAL_DMA_IRQHandler+0x516>
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	681b      	ldr	r3, [r3, #0]
 800d03e:	4a70      	ldr	r2, [pc, #448]	@ (800d200 <HAL_DMA_IRQHandler+0x6c8>)
 800d040:	4293      	cmp	r3, r2
 800d042:	d004      	beq.n	800d04e <HAL_DMA_IRQHandler+0x516>
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	4a6e      	ldr	r2, [pc, #440]	@ (800d204 <HAL_DMA_IRQHandler+0x6cc>)
 800d04a:	4293      	cmp	r3, r2
 800d04c:	d10a      	bne.n	800d064 <HAL_DMA_IRQHandler+0x52c>
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	681b      	ldr	r3, [r3, #0]
 800d052:	681b      	ldr	r3, [r3, #0]
 800d054:	f003 0308 	and.w	r3, r3, #8
 800d058:	2b00      	cmp	r3, #0
 800d05a:	bf14      	ite	ne
 800d05c:	2301      	movne	r3, #1
 800d05e:	2300      	moveq	r3, #0
 800d060:	b2db      	uxtb	r3, r3
 800d062:	e009      	b.n	800d078 <HAL_DMA_IRQHandler+0x540>
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	681b      	ldr	r3, [r3, #0]
 800d06a:	f003 0304 	and.w	r3, r3, #4
 800d06e:	2b00      	cmp	r3, #0
 800d070:	bf14      	ite	ne
 800d072:	2301      	movne	r3, #1
 800d074:	2300      	moveq	r3, #0
 800d076:	b2db      	uxtb	r3, r3
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d03e      	beq.n	800d0fa <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d080:	f003 031f 	and.w	r3, r3, #31
 800d084:	2210      	movs	r2, #16
 800d086:	409a      	lsls	r2, r3
 800d088:	6a3b      	ldr	r3, [r7, #32]
 800d08a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	681b      	ldr	r3, [r3, #0]
 800d092:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800d096:	2b00      	cmp	r3, #0
 800d098:	d018      	beq.n	800d0cc <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	681b      	ldr	r3, [r3, #0]
 800d09e:	681b      	ldr	r3, [r3, #0]
 800d0a0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	d108      	bne.n	800d0ba <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	d024      	beq.n	800d0fa <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d0b4:	6878      	ldr	r0, [r7, #4]
 800d0b6:	4798      	blx	r3
 800d0b8:	e01f      	b.n	800d0fa <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d0be:	2b00      	cmp	r3, #0
 800d0c0:	d01b      	beq.n	800d0fa <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d0c6:	6878      	ldr	r0, [r7, #4]
 800d0c8:	4798      	blx	r3
 800d0ca:	e016      	b.n	800d0fa <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	681b      	ldr	r3, [r3, #0]
 800d0d0:	681b      	ldr	r3, [r3, #0]
 800d0d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	d107      	bne.n	800d0ea <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	681b      	ldr	r3, [r3, #0]
 800d0de:	681a      	ldr	r2, [r3, #0]
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	681b      	ldr	r3, [r3, #0]
 800d0e4:	f022 0208 	bic.w	r2, r2, #8
 800d0e8:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d003      	beq.n	800d0fa <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d0f6:	6878      	ldr	r0, [r7, #4]
 800d0f8:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d0fe:	f003 031f 	and.w	r3, r3, #31
 800d102:	2220      	movs	r2, #32
 800d104:	409a      	lsls	r2, r3
 800d106:	69bb      	ldr	r3, [r7, #24]
 800d108:	4013      	ands	r3, r2
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	f000 8110 	beq.w	800d330 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	681b      	ldr	r3, [r3, #0]
 800d114:	4a2c      	ldr	r2, [pc, #176]	@ (800d1c8 <HAL_DMA_IRQHandler+0x690>)
 800d116:	4293      	cmp	r3, r2
 800d118:	d04a      	beq.n	800d1b0 <HAL_DMA_IRQHandler+0x678>
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	681b      	ldr	r3, [r3, #0]
 800d11e:	4a2b      	ldr	r2, [pc, #172]	@ (800d1cc <HAL_DMA_IRQHandler+0x694>)
 800d120:	4293      	cmp	r3, r2
 800d122:	d045      	beq.n	800d1b0 <HAL_DMA_IRQHandler+0x678>
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	681b      	ldr	r3, [r3, #0]
 800d128:	4a29      	ldr	r2, [pc, #164]	@ (800d1d0 <HAL_DMA_IRQHandler+0x698>)
 800d12a:	4293      	cmp	r3, r2
 800d12c:	d040      	beq.n	800d1b0 <HAL_DMA_IRQHandler+0x678>
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	681b      	ldr	r3, [r3, #0]
 800d132:	4a28      	ldr	r2, [pc, #160]	@ (800d1d4 <HAL_DMA_IRQHandler+0x69c>)
 800d134:	4293      	cmp	r3, r2
 800d136:	d03b      	beq.n	800d1b0 <HAL_DMA_IRQHandler+0x678>
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	681b      	ldr	r3, [r3, #0]
 800d13c:	4a26      	ldr	r2, [pc, #152]	@ (800d1d8 <HAL_DMA_IRQHandler+0x6a0>)
 800d13e:	4293      	cmp	r3, r2
 800d140:	d036      	beq.n	800d1b0 <HAL_DMA_IRQHandler+0x678>
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	681b      	ldr	r3, [r3, #0]
 800d146:	4a25      	ldr	r2, [pc, #148]	@ (800d1dc <HAL_DMA_IRQHandler+0x6a4>)
 800d148:	4293      	cmp	r3, r2
 800d14a:	d031      	beq.n	800d1b0 <HAL_DMA_IRQHandler+0x678>
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	681b      	ldr	r3, [r3, #0]
 800d150:	4a23      	ldr	r2, [pc, #140]	@ (800d1e0 <HAL_DMA_IRQHandler+0x6a8>)
 800d152:	4293      	cmp	r3, r2
 800d154:	d02c      	beq.n	800d1b0 <HAL_DMA_IRQHandler+0x678>
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	681b      	ldr	r3, [r3, #0]
 800d15a:	4a22      	ldr	r2, [pc, #136]	@ (800d1e4 <HAL_DMA_IRQHandler+0x6ac>)
 800d15c:	4293      	cmp	r3, r2
 800d15e:	d027      	beq.n	800d1b0 <HAL_DMA_IRQHandler+0x678>
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	4a20      	ldr	r2, [pc, #128]	@ (800d1e8 <HAL_DMA_IRQHandler+0x6b0>)
 800d166:	4293      	cmp	r3, r2
 800d168:	d022      	beq.n	800d1b0 <HAL_DMA_IRQHandler+0x678>
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	681b      	ldr	r3, [r3, #0]
 800d16e:	4a1f      	ldr	r2, [pc, #124]	@ (800d1ec <HAL_DMA_IRQHandler+0x6b4>)
 800d170:	4293      	cmp	r3, r2
 800d172:	d01d      	beq.n	800d1b0 <HAL_DMA_IRQHandler+0x678>
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	681b      	ldr	r3, [r3, #0]
 800d178:	4a1d      	ldr	r2, [pc, #116]	@ (800d1f0 <HAL_DMA_IRQHandler+0x6b8>)
 800d17a:	4293      	cmp	r3, r2
 800d17c:	d018      	beq.n	800d1b0 <HAL_DMA_IRQHandler+0x678>
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	681b      	ldr	r3, [r3, #0]
 800d182:	4a1c      	ldr	r2, [pc, #112]	@ (800d1f4 <HAL_DMA_IRQHandler+0x6bc>)
 800d184:	4293      	cmp	r3, r2
 800d186:	d013      	beq.n	800d1b0 <HAL_DMA_IRQHandler+0x678>
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	681b      	ldr	r3, [r3, #0]
 800d18c:	4a1a      	ldr	r2, [pc, #104]	@ (800d1f8 <HAL_DMA_IRQHandler+0x6c0>)
 800d18e:	4293      	cmp	r3, r2
 800d190:	d00e      	beq.n	800d1b0 <HAL_DMA_IRQHandler+0x678>
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	681b      	ldr	r3, [r3, #0]
 800d196:	4a19      	ldr	r2, [pc, #100]	@ (800d1fc <HAL_DMA_IRQHandler+0x6c4>)
 800d198:	4293      	cmp	r3, r2
 800d19a:	d009      	beq.n	800d1b0 <HAL_DMA_IRQHandler+0x678>
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	4a17      	ldr	r2, [pc, #92]	@ (800d200 <HAL_DMA_IRQHandler+0x6c8>)
 800d1a2:	4293      	cmp	r3, r2
 800d1a4:	d004      	beq.n	800d1b0 <HAL_DMA_IRQHandler+0x678>
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	681b      	ldr	r3, [r3, #0]
 800d1aa:	4a16      	ldr	r2, [pc, #88]	@ (800d204 <HAL_DMA_IRQHandler+0x6cc>)
 800d1ac:	4293      	cmp	r3, r2
 800d1ae:	d12b      	bne.n	800d208 <HAL_DMA_IRQHandler+0x6d0>
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	681b      	ldr	r3, [r3, #0]
 800d1b4:	681b      	ldr	r3, [r3, #0]
 800d1b6:	f003 0310 	and.w	r3, r3, #16
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	bf14      	ite	ne
 800d1be:	2301      	movne	r3, #1
 800d1c0:	2300      	moveq	r3, #0
 800d1c2:	b2db      	uxtb	r3, r3
 800d1c4:	e02a      	b.n	800d21c <HAL_DMA_IRQHandler+0x6e4>
 800d1c6:	bf00      	nop
 800d1c8:	40020010 	.word	0x40020010
 800d1cc:	40020028 	.word	0x40020028
 800d1d0:	40020040 	.word	0x40020040
 800d1d4:	40020058 	.word	0x40020058
 800d1d8:	40020070 	.word	0x40020070
 800d1dc:	40020088 	.word	0x40020088
 800d1e0:	400200a0 	.word	0x400200a0
 800d1e4:	400200b8 	.word	0x400200b8
 800d1e8:	40020410 	.word	0x40020410
 800d1ec:	40020428 	.word	0x40020428
 800d1f0:	40020440 	.word	0x40020440
 800d1f4:	40020458 	.word	0x40020458
 800d1f8:	40020470 	.word	0x40020470
 800d1fc:	40020488 	.word	0x40020488
 800d200:	400204a0 	.word	0x400204a0
 800d204:	400204b8 	.word	0x400204b8
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	681b      	ldr	r3, [r3, #0]
 800d20c:	681b      	ldr	r3, [r3, #0]
 800d20e:	f003 0302 	and.w	r3, r3, #2
 800d212:	2b00      	cmp	r3, #0
 800d214:	bf14      	ite	ne
 800d216:	2301      	movne	r3, #1
 800d218:	2300      	moveq	r3, #0
 800d21a:	b2db      	uxtb	r3, r3
 800d21c:	2b00      	cmp	r3, #0
 800d21e:	f000 8087 	beq.w	800d330 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d226:	f003 031f 	and.w	r3, r3, #31
 800d22a:	2220      	movs	r2, #32
 800d22c:	409a      	lsls	r2, r3
 800d22e:	6a3b      	ldr	r3, [r7, #32]
 800d230:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800d238:	b2db      	uxtb	r3, r3
 800d23a:	2b04      	cmp	r3, #4
 800d23c:	d139      	bne.n	800d2b2 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	681b      	ldr	r3, [r3, #0]
 800d242:	681a      	ldr	r2, [r3, #0]
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	681b      	ldr	r3, [r3, #0]
 800d248:	f022 0216 	bic.w	r2, r2, #22
 800d24c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	681b      	ldr	r3, [r3, #0]
 800d252:	695a      	ldr	r2, [r3, #20]
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	681b      	ldr	r3, [r3, #0]
 800d258:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800d25c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d262:	2b00      	cmp	r3, #0
 800d264:	d103      	bne.n	800d26e <HAL_DMA_IRQHandler+0x736>
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	d007      	beq.n	800d27e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	681b      	ldr	r3, [r3, #0]
 800d272:	681a      	ldr	r2, [r3, #0]
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	681b      	ldr	r3, [r3, #0]
 800d278:	f022 0208 	bic.w	r2, r2, #8
 800d27c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d282:	f003 031f 	and.w	r3, r3, #31
 800d286:	223f      	movs	r2, #63	@ 0x3f
 800d288:	409a      	lsls	r2, r3
 800d28a:	6a3b      	ldr	r3, [r7, #32]
 800d28c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	2201      	movs	r2, #1
 800d292:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	2200      	movs	r2, #0
 800d29a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	f000 834a 	beq.w	800d93c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d2ac:	6878      	ldr	r0, [r7, #4]
 800d2ae:	4798      	blx	r3
          }
          return;
 800d2b0:	e344      	b.n	800d93c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	681b      	ldr	r3, [r3, #0]
 800d2b6:	681b      	ldr	r3, [r3, #0]
 800d2b8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800d2bc:	2b00      	cmp	r3, #0
 800d2be:	d018      	beq.n	800d2f2 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	681b      	ldr	r3, [r3, #0]
 800d2c4:	681b      	ldr	r3, [r3, #0]
 800d2c6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	d108      	bne.n	800d2e0 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	d02c      	beq.n	800d330 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d2da:	6878      	ldr	r0, [r7, #4]
 800d2dc:	4798      	blx	r3
 800d2de:	e027      	b.n	800d330 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	d023      	beq.n	800d330 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d2ec:	6878      	ldr	r0, [r7, #4]
 800d2ee:	4798      	blx	r3
 800d2f0:	e01e      	b.n	800d330 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	681b      	ldr	r3, [r3, #0]
 800d2f6:	681b      	ldr	r3, [r3, #0]
 800d2f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d2fc:	2b00      	cmp	r3, #0
 800d2fe:	d10f      	bne.n	800d320 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	681b      	ldr	r3, [r3, #0]
 800d304:	681a      	ldr	r2, [r3, #0]
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	681b      	ldr	r3, [r3, #0]
 800d30a:	f022 0210 	bic.w	r2, r2, #16
 800d30e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	2201      	movs	r2, #1
 800d314:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	2200      	movs	r2, #0
 800d31c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d324:	2b00      	cmp	r3, #0
 800d326:	d003      	beq.n	800d330 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d32c:	6878      	ldr	r0, [r7, #4]
 800d32e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d334:	2b00      	cmp	r3, #0
 800d336:	f000 8306 	beq.w	800d946 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d33e:	f003 0301 	and.w	r3, r3, #1
 800d342:	2b00      	cmp	r3, #0
 800d344:	f000 8088 	beq.w	800d458 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	2204      	movs	r2, #4
 800d34c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	681b      	ldr	r3, [r3, #0]
 800d354:	4a7a      	ldr	r2, [pc, #488]	@ (800d540 <HAL_DMA_IRQHandler+0xa08>)
 800d356:	4293      	cmp	r3, r2
 800d358:	d04a      	beq.n	800d3f0 <HAL_DMA_IRQHandler+0x8b8>
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	681b      	ldr	r3, [r3, #0]
 800d35e:	4a79      	ldr	r2, [pc, #484]	@ (800d544 <HAL_DMA_IRQHandler+0xa0c>)
 800d360:	4293      	cmp	r3, r2
 800d362:	d045      	beq.n	800d3f0 <HAL_DMA_IRQHandler+0x8b8>
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	681b      	ldr	r3, [r3, #0]
 800d368:	4a77      	ldr	r2, [pc, #476]	@ (800d548 <HAL_DMA_IRQHandler+0xa10>)
 800d36a:	4293      	cmp	r3, r2
 800d36c:	d040      	beq.n	800d3f0 <HAL_DMA_IRQHandler+0x8b8>
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	681b      	ldr	r3, [r3, #0]
 800d372:	4a76      	ldr	r2, [pc, #472]	@ (800d54c <HAL_DMA_IRQHandler+0xa14>)
 800d374:	4293      	cmp	r3, r2
 800d376:	d03b      	beq.n	800d3f0 <HAL_DMA_IRQHandler+0x8b8>
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	681b      	ldr	r3, [r3, #0]
 800d37c:	4a74      	ldr	r2, [pc, #464]	@ (800d550 <HAL_DMA_IRQHandler+0xa18>)
 800d37e:	4293      	cmp	r3, r2
 800d380:	d036      	beq.n	800d3f0 <HAL_DMA_IRQHandler+0x8b8>
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	681b      	ldr	r3, [r3, #0]
 800d386:	4a73      	ldr	r2, [pc, #460]	@ (800d554 <HAL_DMA_IRQHandler+0xa1c>)
 800d388:	4293      	cmp	r3, r2
 800d38a:	d031      	beq.n	800d3f0 <HAL_DMA_IRQHandler+0x8b8>
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	681b      	ldr	r3, [r3, #0]
 800d390:	4a71      	ldr	r2, [pc, #452]	@ (800d558 <HAL_DMA_IRQHandler+0xa20>)
 800d392:	4293      	cmp	r3, r2
 800d394:	d02c      	beq.n	800d3f0 <HAL_DMA_IRQHandler+0x8b8>
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	681b      	ldr	r3, [r3, #0]
 800d39a:	4a70      	ldr	r2, [pc, #448]	@ (800d55c <HAL_DMA_IRQHandler+0xa24>)
 800d39c:	4293      	cmp	r3, r2
 800d39e:	d027      	beq.n	800d3f0 <HAL_DMA_IRQHandler+0x8b8>
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	681b      	ldr	r3, [r3, #0]
 800d3a4:	4a6e      	ldr	r2, [pc, #440]	@ (800d560 <HAL_DMA_IRQHandler+0xa28>)
 800d3a6:	4293      	cmp	r3, r2
 800d3a8:	d022      	beq.n	800d3f0 <HAL_DMA_IRQHandler+0x8b8>
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	681b      	ldr	r3, [r3, #0]
 800d3ae:	4a6d      	ldr	r2, [pc, #436]	@ (800d564 <HAL_DMA_IRQHandler+0xa2c>)
 800d3b0:	4293      	cmp	r3, r2
 800d3b2:	d01d      	beq.n	800d3f0 <HAL_DMA_IRQHandler+0x8b8>
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	681b      	ldr	r3, [r3, #0]
 800d3b8:	4a6b      	ldr	r2, [pc, #428]	@ (800d568 <HAL_DMA_IRQHandler+0xa30>)
 800d3ba:	4293      	cmp	r3, r2
 800d3bc:	d018      	beq.n	800d3f0 <HAL_DMA_IRQHandler+0x8b8>
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	681b      	ldr	r3, [r3, #0]
 800d3c2:	4a6a      	ldr	r2, [pc, #424]	@ (800d56c <HAL_DMA_IRQHandler+0xa34>)
 800d3c4:	4293      	cmp	r3, r2
 800d3c6:	d013      	beq.n	800d3f0 <HAL_DMA_IRQHandler+0x8b8>
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	681b      	ldr	r3, [r3, #0]
 800d3cc:	4a68      	ldr	r2, [pc, #416]	@ (800d570 <HAL_DMA_IRQHandler+0xa38>)
 800d3ce:	4293      	cmp	r3, r2
 800d3d0:	d00e      	beq.n	800d3f0 <HAL_DMA_IRQHandler+0x8b8>
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	681b      	ldr	r3, [r3, #0]
 800d3d6:	4a67      	ldr	r2, [pc, #412]	@ (800d574 <HAL_DMA_IRQHandler+0xa3c>)
 800d3d8:	4293      	cmp	r3, r2
 800d3da:	d009      	beq.n	800d3f0 <HAL_DMA_IRQHandler+0x8b8>
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	681b      	ldr	r3, [r3, #0]
 800d3e0:	4a65      	ldr	r2, [pc, #404]	@ (800d578 <HAL_DMA_IRQHandler+0xa40>)
 800d3e2:	4293      	cmp	r3, r2
 800d3e4:	d004      	beq.n	800d3f0 <HAL_DMA_IRQHandler+0x8b8>
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	681b      	ldr	r3, [r3, #0]
 800d3ea:	4a64      	ldr	r2, [pc, #400]	@ (800d57c <HAL_DMA_IRQHandler+0xa44>)
 800d3ec:	4293      	cmp	r3, r2
 800d3ee:	d108      	bne.n	800d402 <HAL_DMA_IRQHandler+0x8ca>
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	681b      	ldr	r3, [r3, #0]
 800d3f4:	681a      	ldr	r2, [r3, #0]
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	681b      	ldr	r3, [r3, #0]
 800d3fa:	f022 0201 	bic.w	r2, r2, #1
 800d3fe:	601a      	str	r2, [r3, #0]
 800d400:	e007      	b.n	800d412 <HAL_DMA_IRQHandler+0x8da>
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	681b      	ldr	r3, [r3, #0]
 800d406:	681a      	ldr	r2, [r3, #0]
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	681b      	ldr	r3, [r3, #0]
 800d40c:	f022 0201 	bic.w	r2, r2, #1
 800d410:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800d412:	68fb      	ldr	r3, [r7, #12]
 800d414:	3301      	adds	r3, #1
 800d416:	60fb      	str	r3, [r7, #12]
 800d418:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d41a:	429a      	cmp	r2, r3
 800d41c:	d307      	bcc.n	800d42e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	681b      	ldr	r3, [r3, #0]
 800d422:	681b      	ldr	r3, [r3, #0]
 800d424:	f003 0301 	and.w	r3, r3, #1
 800d428:	2b00      	cmp	r3, #0
 800d42a:	d1f2      	bne.n	800d412 <HAL_DMA_IRQHandler+0x8da>
 800d42c:	e000      	b.n	800d430 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800d42e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	681b      	ldr	r3, [r3, #0]
 800d434:	681b      	ldr	r3, [r3, #0]
 800d436:	f003 0301 	and.w	r3, r3, #1
 800d43a:	2b00      	cmp	r3, #0
 800d43c:	d004      	beq.n	800d448 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	2203      	movs	r2, #3
 800d442:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800d446:	e003      	b.n	800d450 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	2201      	movs	r2, #1
 800d44c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	2200      	movs	r2, #0
 800d454:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	f000 8272 	beq.w	800d946 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d466:	6878      	ldr	r0, [r7, #4]
 800d468:	4798      	blx	r3
 800d46a:	e26c      	b.n	800d946 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	681b      	ldr	r3, [r3, #0]
 800d470:	4a43      	ldr	r2, [pc, #268]	@ (800d580 <HAL_DMA_IRQHandler+0xa48>)
 800d472:	4293      	cmp	r3, r2
 800d474:	d022      	beq.n	800d4bc <HAL_DMA_IRQHandler+0x984>
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	681b      	ldr	r3, [r3, #0]
 800d47a:	4a42      	ldr	r2, [pc, #264]	@ (800d584 <HAL_DMA_IRQHandler+0xa4c>)
 800d47c:	4293      	cmp	r3, r2
 800d47e:	d01d      	beq.n	800d4bc <HAL_DMA_IRQHandler+0x984>
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	681b      	ldr	r3, [r3, #0]
 800d484:	4a40      	ldr	r2, [pc, #256]	@ (800d588 <HAL_DMA_IRQHandler+0xa50>)
 800d486:	4293      	cmp	r3, r2
 800d488:	d018      	beq.n	800d4bc <HAL_DMA_IRQHandler+0x984>
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	681b      	ldr	r3, [r3, #0]
 800d48e:	4a3f      	ldr	r2, [pc, #252]	@ (800d58c <HAL_DMA_IRQHandler+0xa54>)
 800d490:	4293      	cmp	r3, r2
 800d492:	d013      	beq.n	800d4bc <HAL_DMA_IRQHandler+0x984>
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	681b      	ldr	r3, [r3, #0]
 800d498:	4a3d      	ldr	r2, [pc, #244]	@ (800d590 <HAL_DMA_IRQHandler+0xa58>)
 800d49a:	4293      	cmp	r3, r2
 800d49c:	d00e      	beq.n	800d4bc <HAL_DMA_IRQHandler+0x984>
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	681b      	ldr	r3, [r3, #0]
 800d4a2:	4a3c      	ldr	r2, [pc, #240]	@ (800d594 <HAL_DMA_IRQHandler+0xa5c>)
 800d4a4:	4293      	cmp	r3, r2
 800d4a6:	d009      	beq.n	800d4bc <HAL_DMA_IRQHandler+0x984>
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	681b      	ldr	r3, [r3, #0]
 800d4ac:	4a3a      	ldr	r2, [pc, #232]	@ (800d598 <HAL_DMA_IRQHandler+0xa60>)
 800d4ae:	4293      	cmp	r3, r2
 800d4b0:	d004      	beq.n	800d4bc <HAL_DMA_IRQHandler+0x984>
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	681b      	ldr	r3, [r3, #0]
 800d4b6:	4a39      	ldr	r2, [pc, #228]	@ (800d59c <HAL_DMA_IRQHandler+0xa64>)
 800d4b8:	4293      	cmp	r3, r2
 800d4ba:	d101      	bne.n	800d4c0 <HAL_DMA_IRQHandler+0x988>
 800d4bc:	2301      	movs	r3, #1
 800d4be:	e000      	b.n	800d4c2 <HAL_DMA_IRQHandler+0x98a>
 800d4c0:	2300      	movs	r3, #0
 800d4c2:	2b00      	cmp	r3, #0
 800d4c4:	f000 823f 	beq.w	800d946 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	681b      	ldr	r3, [r3, #0]
 800d4cc:	681b      	ldr	r3, [r3, #0]
 800d4ce:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d4d4:	f003 031f 	and.w	r3, r3, #31
 800d4d8:	2204      	movs	r2, #4
 800d4da:	409a      	lsls	r2, r3
 800d4dc:	697b      	ldr	r3, [r7, #20]
 800d4de:	4013      	ands	r3, r2
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	f000 80cd 	beq.w	800d680 <HAL_DMA_IRQHandler+0xb48>
 800d4e6:	693b      	ldr	r3, [r7, #16]
 800d4e8:	f003 0304 	and.w	r3, r3, #4
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	f000 80c7 	beq.w	800d680 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d4f6:	f003 031f 	and.w	r3, r3, #31
 800d4fa:	2204      	movs	r2, #4
 800d4fc:	409a      	lsls	r2, r3
 800d4fe:	69fb      	ldr	r3, [r7, #28]
 800d500:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800d502:	693b      	ldr	r3, [r7, #16]
 800d504:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d508:	2b00      	cmp	r3, #0
 800d50a:	d049      	beq.n	800d5a0 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800d50c:	693b      	ldr	r3, [r7, #16]
 800d50e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800d512:	2b00      	cmp	r3, #0
 800d514:	d109      	bne.n	800d52a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d51a:	2b00      	cmp	r3, #0
 800d51c:	f000 8210 	beq.w	800d940 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d524:	6878      	ldr	r0, [r7, #4]
 800d526:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800d528:	e20a      	b.n	800d940 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d52e:	2b00      	cmp	r3, #0
 800d530:	f000 8206 	beq.w	800d940 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d538:	6878      	ldr	r0, [r7, #4]
 800d53a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800d53c:	e200      	b.n	800d940 <HAL_DMA_IRQHandler+0xe08>
 800d53e:	bf00      	nop
 800d540:	40020010 	.word	0x40020010
 800d544:	40020028 	.word	0x40020028
 800d548:	40020040 	.word	0x40020040
 800d54c:	40020058 	.word	0x40020058
 800d550:	40020070 	.word	0x40020070
 800d554:	40020088 	.word	0x40020088
 800d558:	400200a0 	.word	0x400200a0
 800d55c:	400200b8 	.word	0x400200b8
 800d560:	40020410 	.word	0x40020410
 800d564:	40020428 	.word	0x40020428
 800d568:	40020440 	.word	0x40020440
 800d56c:	40020458 	.word	0x40020458
 800d570:	40020470 	.word	0x40020470
 800d574:	40020488 	.word	0x40020488
 800d578:	400204a0 	.word	0x400204a0
 800d57c:	400204b8 	.word	0x400204b8
 800d580:	58025408 	.word	0x58025408
 800d584:	5802541c 	.word	0x5802541c
 800d588:	58025430 	.word	0x58025430
 800d58c:	58025444 	.word	0x58025444
 800d590:	58025458 	.word	0x58025458
 800d594:	5802546c 	.word	0x5802546c
 800d598:	58025480 	.word	0x58025480
 800d59c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800d5a0:	693b      	ldr	r3, [r7, #16]
 800d5a2:	f003 0320 	and.w	r3, r3, #32
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	d160      	bne.n	800d66c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	681b      	ldr	r3, [r3, #0]
 800d5ae:	4a7f      	ldr	r2, [pc, #508]	@ (800d7ac <HAL_DMA_IRQHandler+0xc74>)
 800d5b0:	4293      	cmp	r3, r2
 800d5b2:	d04a      	beq.n	800d64a <HAL_DMA_IRQHandler+0xb12>
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	681b      	ldr	r3, [r3, #0]
 800d5b8:	4a7d      	ldr	r2, [pc, #500]	@ (800d7b0 <HAL_DMA_IRQHandler+0xc78>)
 800d5ba:	4293      	cmp	r3, r2
 800d5bc:	d045      	beq.n	800d64a <HAL_DMA_IRQHandler+0xb12>
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	681b      	ldr	r3, [r3, #0]
 800d5c2:	4a7c      	ldr	r2, [pc, #496]	@ (800d7b4 <HAL_DMA_IRQHandler+0xc7c>)
 800d5c4:	4293      	cmp	r3, r2
 800d5c6:	d040      	beq.n	800d64a <HAL_DMA_IRQHandler+0xb12>
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	681b      	ldr	r3, [r3, #0]
 800d5cc:	4a7a      	ldr	r2, [pc, #488]	@ (800d7b8 <HAL_DMA_IRQHandler+0xc80>)
 800d5ce:	4293      	cmp	r3, r2
 800d5d0:	d03b      	beq.n	800d64a <HAL_DMA_IRQHandler+0xb12>
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	681b      	ldr	r3, [r3, #0]
 800d5d6:	4a79      	ldr	r2, [pc, #484]	@ (800d7bc <HAL_DMA_IRQHandler+0xc84>)
 800d5d8:	4293      	cmp	r3, r2
 800d5da:	d036      	beq.n	800d64a <HAL_DMA_IRQHandler+0xb12>
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	4a77      	ldr	r2, [pc, #476]	@ (800d7c0 <HAL_DMA_IRQHandler+0xc88>)
 800d5e2:	4293      	cmp	r3, r2
 800d5e4:	d031      	beq.n	800d64a <HAL_DMA_IRQHandler+0xb12>
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	681b      	ldr	r3, [r3, #0]
 800d5ea:	4a76      	ldr	r2, [pc, #472]	@ (800d7c4 <HAL_DMA_IRQHandler+0xc8c>)
 800d5ec:	4293      	cmp	r3, r2
 800d5ee:	d02c      	beq.n	800d64a <HAL_DMA_IRQHandler+0xb12>
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	681b      	ldr	r3, [r3, #0]
 800d5f4:	4a74      	ldr	r2, [pc, #464]	@ (800d7c8 <HAL_DMA_IRQHandler+0xc90>)
 800d5f6:	4293      	cmp	r3, r2
 800d5f8:	d027      	beq.n	800d64a <HAL_DMA_IRQHandler+0xb12>
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	681b      	ldr	r3, [r3, #0]
 800d5fe:	4a73      	ldr	r2, [pc, #460]	@ (800d7cc <HAL_DMA_IRQHandler+0xc94>)
 800d600:	4293      	cmp	r3, r2
 800d602:	d022      	beq.n	800d64a <HAL_DMA_IRQHandler+0xb12>
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	681b      	ldr	r3, [r3, #0]
 800d608:	4a71      	ldr	r2, [pc, #452]	@ (800d7d0 <HAL_DMA_IRQHandler+0xc98>)
 800d60a:	4293      	cmp	r3, r2
 800d60c:	d01d      	beq.n	800d64a <HAL_DMA_IRQHandler+0xb12>
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	681b      	ldr	r3, [r3, #0]
 800d612:	4a70      	ldr	r2, [pc, #448]	@ (800d7d4 <HAL_DMA_IRQHandler+0xc9c>)
 800d614:	4293      	cmp	r3, r2
 800d616:	d018      	beq.n	800d64a <HAL_DMA_IRQHandler+0xb12>
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	681b      	ldr	r3, [r3, #0]
 800d61c:	4a6e      	ldr	r2, [pc, #440]	@ (800d7d8 <HAL_DMA_IRQHandler+0xca0>)
 800d61e:	4293      	cmp	r3, r2
 800d620:	d013      	beq.n	800d64a <HAL_DMA_IRQHandler+0xb12>
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	681b      	ldr	r3, [r3, #0]
 800d626:	4a6d      	ldr	r2, [pc, #436]	@ (800d7dc <HAL_DMA_IRQHandler+0xca4>)
 800d628:	4293      	cmp	r3, r2
 800d62a:	d00e      	beq.n	800d64a <HAL_DMA_IRQHandler+0xb12>
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	681b      	ldr	r3, [r3, #0]
 800d630:	4a6b      	ldr	r2, [pc, #428]	@ (800d7e0 <HAL_DMA_IRQHandler+0xca8>)
 800d632:	4293      	cmp	r3, r2
 800d634:	d009      	beq.n	800d64a <HAL_DMA_IRQHandler+0xb12>
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	681b      	ldr	r3, [r3, #0]
 800d63a:	4a6a      	ldr	r2, [pc, #424]	@ (800d7e4 <HAL_DMA_IRQHandler+0xcac>)
 800d63c:	4293      	cmp	r3, r2
 800d63e:	d004      	beq.n	800d64a <HAL_DMA_IRQHandler+0xb12>
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	681b      	ldr	r3, [r3, #0]
 800d644:	4a68      	ldr	r2, [pc, #416]	@ (800d7e8 <HAL_DMA_IRQHandler+0xcb0>)
 800d646:	4293      	cmp	r3, r2
 800d648:	d108      	bne.n	800d65c <HAL_DMA_IRQHandler+0xb24>
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	681b      	ldr	r3, [r3, #0]
 800d64e:	681a      	ldr	r2, [r3, #0]
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	681b      	ldr	r3, [r3, #0]
 800d654:	f022 0208 	bic.w	r2, r2, #8
 800d658:	601a      	str	r2, [r3, #0]
 800d65a:	e007      	b.n	800d66c <HAL_DMA_IRQHandler+0xb34>
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	681b      	ldr	r3, [r3, #0]
 800d660:	681a      	ldr	r2, [r3, #0]
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	681b      	ldr	r3, [r3, #0]
 800d666:	f022 0204 	bic.w	r2, r2, #4
 800d66a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d670:	2b00      	cmp	r3, #0
 800d672:	f000 8165 	beq.w	800d940 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d67a:	6878      	ldr	r0, [r7, #4]
 800d67c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800d67e:	e15f      	b.n	800d940 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d684:	f003 031f 	and.w	r3, r3, #31
 800d688:	2202      	movs	r2, #2
 800d68a:	409a      	lsls	r2, r3
 800d68c:	697b      	ldr	r3, [r7, #20]
 800d68e:	4013      	ands	r3, r2
 800d690:	2b00      	cmp	r3, #0
 800d692:	f000 80c5 	beq.w	800d820 <HAL_DMA_IRQHandler+0xce8>
 800d696:	693b      	ldr	r3, [r7, #16]
 800d698:	f003 0302 	and.w	r3, r3, #2
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	f000 80bf 	beq.w	800d820 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d6a6:	f003 031f 	and.w	r3, r3, #31
 800d6aa:	2202      	movs	r2, #2
 800d6ac:	409a      	lsls	r2, r3
 800d6ae:	69fb      	ldr	r3, [r7, #28]
 800d6b0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800d6b2:	693b      	ldr	r3, [r7, #16]
 800d6b4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d6b8:	2b00      	cmp	r3, #0
 800d6ba:	d018      	beq.n	800d6ee <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800d6bc:	693b      	ldr	r3, [r7, #16]
 800d6be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800d6c2:	2b00      	cmp	r3, #0
 800d6c4:	d109      	bne.n	800d6da <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	f000 813a 	beq.w	800d944 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d6d4:	6878      	ldr	r0, [r7, #4]
 800d6d6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800d6d8:	e134      	b.n	800d944 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	f000 8130 	beq.w	800d944 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d6e8:	6878      	ldr	r0, [r7, #4]
 800d6ea:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800d6ec:	e12a      	b.n	800d944 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800d6ee:	693b      	ldr	r3, [r7, #16]
 800d6f0:	f003 0320 	and.w	r3, r3, #32
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	f040 8089 	bne.w	800d80c <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	681b      	ldr	r3, [r3, #0]
 800d6fe:	4a2b      	ldr	r2, [pc, #172]	@ (800d7ac <HAL_DMA_IRQHandler+0xc74>)
 800d700:	4293      	cmp	r3, r2
 800d702:	d04a      	beq.n	800d79a <HAL_DMA_IRQHandler+0xc62>
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	681b      	ldr	r3, [r3, #0]
 800d708:	4a29      	ldr	r2, [pc, #164]	@ (800d7b0 <HAL_DMA_IRQHandler+0xc78>)
 800d70a:	4293      	cmp	r3, r2
 800d70c:	d045      	beq.n	800d79a <HAL_DMA_IRQHandler+0xc62>
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	681b      	ldr	r3, [r3, #0]
 800d712:	4a28      	ldr	r2, [pc, #160]	@ (800d7b4 <HAL_DMA_IRQHandler+0xc7c>)
 800d714:	4293      	cmp	r3, r2
 800d716:	d040      	beq.n	800d79a <HAL_DMA_IRQHandler+0xc62>
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	681b      	ldr	r3, [r3, #0]
 800d71c:	4a26      	ldr	r2, [pc, #152]	@ (800d7b8 <HAL_DMA_IRQHandler+0xc80>)
 800d71e:	4293      	cmp	r3, r2
 800d720:	d03b      	beq.n	800d79a <HAL_DMA_IRQHandler+0xc62>
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	681b      	ldr	r3, [r3, #0]
 800d726:	4a25      	ldr	r2, [pc, #148]	@ (800d7bc <HAL_DMA_IRQHandler+0xc84>)
 800d728:	4293      	cmp	r3, r2
 800d72a:	d036      	beq.n	800d79a <HAL_DMA_IRQHandler+0xc62>
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	681b      	ldr	r3, [r3, #0]
 800d730:	4a23      	ldr	r2, [pc, #140]	@ (800d7c0 <HAL_DMA_IRQHandler+0xc88>)
 800d732:	4293      	cmp	r3, r2
 800d734:	d031      	beq.n	800d79a <HAL_DMA_IRQHandler+0xc62>
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	681b      	ldr	r3, [r3, #0]
 800d73a:	4a22      	ldr	r2, [pc, #136]	@ (800d7c4 <HAL_DMA_IRQHandler+0xc8c>)
 800d73c:	4293      	cmp	r3, r2
 800d73e:	d02c      	beq.n	800d79a <HAL_DMA_IRQHandler+0xc62>
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	681b      	ldr	r3, [r3, #0]
 800d744:	4a20      	ldr	r2, [pc, #128]	@ (800d7c8 <HAL_DMA_IRQHandler+0xc90>)
 800d746:	4293      	cmp	r3, r2
 800d748:	d027      	beq.n	800d79a <HAL_DMA_IRQHandler+0xc62>
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	681b      	ldr	r3, [r3, #0]
 800d74e:	4a1f      	ldr	r2, [pc, #124]	@ (800d7cc <HAL_DMA_IRQHandler+0xc94>)
 800d750:	4293      	cmp	r3, r2
 800d752:	d022      	beq.n	800d79a <HAL_DMA_IRQHandler+0xc62>
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	681b      	ldr	r3, [r3, #0]
 800d758:	4a1d      	ldr	r2, [pc, #116]	@ (800d7d0 <HAL_DMA_IRQHandler+0xc98>)
 800d75a:	4293      	cmp	r3, r2
 800d75c:	d01d      	beq.n	800d79a <HAL_DMA_IRQHandler+0xc62>
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	681b      	ldr	r3, [r3, #0]
 800d762:	4a1c      	ldr	r2, [pc, #112]	@ (800d7d4 <HAL_DMA_IRQHandler+0xc9c>)
 800d764:	4293      	cmp	r3, r2
 800d766:	d018      	beq.n	800d79a <HAL_DMA_IRQHandler+0xc62>
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	681b      	ldr	r3, [r3, #0]
 800d76c:	4a1a      	ldr	r2, [pc, #104]	@ (800d7d8 <HAL_DMA_IRQHandler+0xca0>)
 800d76e:	4293      	cmp	r3, r2
 800d770:	d013      	beq.n	800d79a <HAL_DMA_IRQHandler+0xc62>
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	681b      	ldr	r3, [r3, #0]
 800d776:	4a19      	ldr	r2, [pc, #100]	@ (800d7dc <HAL_DMA_IRQHandler+0xca4>)
 800d778:	4293      	cmp	r3, r2
 800d77a:	d00e      	beq.n	800d79a <HAL_DMA_IRQHandler+0xc62>
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	681b      	ldr	r3, [r3, #0]
 800d780:	4a17      	ldr	r2, [pc, #92]	@ (800d7e0 <HAL_DMA_IRQHandler+0xca8>)
 800d782:	4293      	cmp	r3, r2
 800d784:	d009      	beq.n	800d79a <HAL_DMA_IRQHandler+0xc62>
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	681b      	ldr	r3, [r3, #0]
 800d78a:	4a16      	ldr	r2, [pc, #88]	@ (800d7e4 <HAL_DMA_IRQHandler+0xcac>)
 800d78c:	4293      	cmp	r3, r2
 800d78e:	d004      	beq.n	800d79a <HAL_DMA_IRQHandler+0xc62>
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	681b      	ldr	r3, [r3, #0]
 800d794:	4a14      	ldr	r2, [pc, #80]	@ (800d7e8 <HAL_DMA_IRQHandler+0xcb0>)
 800d796:	4293      	cmp	r3, r2
 800d798:	d128      	bne.n	800d7ec <HAL_DMA_IRQHandler+0xcb4>
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	681b      	ldr	r3, [r3, #0]
 800d79e:	681a      	ldr	r2, [r3, #0]
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	681b      	ldr	r3, [r3, #0]
 800d7a4:	f022 0214 	bic.w	r2, r2, #20
 800d7a8:	601a      	str	r2, [r3, #0]
 800d7aa:	e027      	b.n	800d7fc <HAL_DMA_IRQHandler+0xcc4>
 800d7ac:	40020010 	.word	0x40020010
 800d7b0:	40020028 	.word	0x40020028
 800d7b4:	40020040 	.word	0x40020040
 800d7b8:	40020058 	.word	0x40020058
 800d7bc:	40020070 	.word	0x40020070
 800d7c0:	40020088 	.word	0x40020088
 800d7c4:	400200a0 	.word	0x400200a0
 800d7c8:	400200b8 	.word	0x400200b8
 800d7cc:	40020410 	.word	0x40020410
 800d7d0:	40020428 	.word	0x40020428
 800d7d4:	40020440 	.word	0x40020440
 800d7d8:	40020458 	.word	0x40020458
 800d7dc:	40020470 	.word	0x40020470
 800d7e0:	40020488 	.word	0x40020488
 800d7e4:	400204a0 	.word	0x400204a0
 800d7e8:	400204b8 	.word	0x400204b8
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	681b      	ldr	r3, [r3, #0]
 800d7f0:	681a      	ldr	r2, [r3, #0]
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	681b      	ldr	r3, [r3, #0]
 800d7f6:	f022 020a 	bic.w	r2, r2, #10
 800d7fa:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	2201      	movs	r2, #1
 800d800:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	2200      	movs	r2, #0
 800d808:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d810:	2b00      	cmp	r3, #0
 800d812:	f000 8097 	beq.w	800d944 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d81a:	6878      	ldr	r0, [r7, #4]
 800d81c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800d81e:	e091      	b.n	800d944 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d824:	f003 031f 	and.w	r3, r3, #31
 800d828:	2208      	movs	r2, #8
 800d82a:	409a      	lsls	r2, r3
 800d82c:	697b      	ldr	r3, [r7, #20]
 800d82e:	4013      	ands	r3, r2
 800d830:	2b00      	cmp	r3, #0
 800d832:	f000 8088 	beq.w	800d946 <HAL_DMA_IRQHandler+0xe0e>
 800d836:	693b      	ldr	r3, [r7, #16]
 800d838:	f003 0308 	and.w	r3, r3, #8
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	f000 8082 	beq.w	800d946 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	681b      	ldr	r3, [r3, #0]
 800d846:	4a41      	ldr	r2, [pc, #260]	@ (800d94c <HAL_DMA_IRQHandler+0xe14>)
 800d848:	4293      	cmp	r3, r2
 800d84a:	d04a      	beq.n	800d8e2 <HAL_DMA_IRQHandler+0xdaa>
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	681b      	ldr	r3, [r3, #0]
 800d850:	4a3f      	ldr	r2, [pc, #252]	@ (800d950 <HAL_DMA_IRQHandler+0xe18>)
 800d852:	4293      	cmp	r3, r2
 800d854:	d045      	beq.n	800d8e2 <HAL_DMA_IRQHandler+0xdaa>
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	681b      	ldr	r3, [r3, #0]
 800d85a:	4a3e      	ldr	r2, [pc, #248]	@ (800d954 <HAL_DMA_IRQHandler+0xe1c>)
 800d85c:	4293      	cmp	r3, r2
 800d85e:	d040      	beq.n	800d8e2 <HAL_DMA_IRQHandler+0xdaa>
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	681b      	ldr	r3, [r3, #0]
 800d864:	4a3c      	ldr	r2, [pc, #240]	@ (800d958 <HAL_DMA_IRQHandler+0xe20>)
 800d866:	4293      	cmp	r3, r2
 800d868:	d03b      	beq.n	800d8e2 <HAL_DMA_IRQHandler+0xdaa>
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	681b      	ldr	r3, [r3, #0]
 800d86e:	4a3b      	ldr	r2, [pc, #236]	@ (800d95c <HAL_DMA_IRQHandler+0xe24>)
 800d870:	4293      	cmp	r3, r2
 800d872:	d036      	beq.n	800d8e2 <HAL_DMA_IRQHandler+0xdaa>
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	681b      	ldr	r3, [r3, #0]
 800d878:	4a39      	ldr	r2, [pc, #228]	@ (800d960 <HAL_DMA_IRQHandler+0xe28>)
 800d87a:	4293      	cmp	r3, r2
 800d87c:	d031      	beq.n	800d8e2 <HAL_DMA_IRQHandler+0xdaa>
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	681b      	ldr	r3, [r3, #0]
 800d882:	4a38      	ldr	r2, [pc, #224]	@ (800d964 <HAL_DMA_IRQHandler+0xe2c>)
 800d884:	4293      	cmp	r3, r2
 800d886:	d02c      	beq.n	800d8e2 <HAL_DMA_IRQHandler+0xdaa>
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	681b      	ldr	r3, [r3, #0]
 800d88c:	4a36      	ldr	r2, [pc, #216]	@ (800d968 <HAL_DMA_IRQHandler+0xe30>)
 800d88e:	4293      	cmp	r3, r2
 800d890:	d027      	beq.n	800d8e2 <HAL_DMA_IRQHandler+0xdaa>
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	681b      	ldr	r3, [r3, #0]
 800d896:	4a35      	ldr	r2, [pc, #212]	@ (800d96c <HAL_DMA_IRQHandler+0xe34>)
 800d898:	4293      	cmp	r3, r2
 800d89a:	d022      	beq.n	800d8e2 <HAL_DMA_IRQHandler+0xdaa>
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	4a33      	ldr	r2, [pc, #204]	@ (800d970 <HAL_DMA_IRQHandler+0xe38>)
 800d8a2:	4293      	cmp	r3, r2
 800d8a4:	d01d      	beq.n	800d8e2 <HAL_DMA_IRQHandler+0xdaa>
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	681b      	ldr	r3, [r3, #0]
 800d8aa:	4a32      	ldr	r2, [pc, #200]	@ (800d974 <HAL_DMA_IRQHandler+0xe3c>)
 800d8ac:	4293      	cmp	r3, r2
 800d8ae:	d018      	beq.n	800d8e2 <HAL_DMA_IRQHandler+0xdaa>
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	681b      	ldr	r3, [r3, #0]
 800d8b4:	4a30      	ldr	r2, [pc, #192]	@ (800d978 <HAL_DMA_IRQHandler+0xe40>)
 800d8b6:	4293      	cmp	r3, r2
 800d8b8:	d013      	beq.n	800d8e2 <HAL_DMA_IRQHandler+0xdaa>
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	681b      	ldr	r3, [r3, #0]
 800d8be:	4a2f      	ldr	r2, [pc, #188]	@ (800d97c <HAL_DMA_IRQHandler+0xe44>)
 800d8c0:	4293      	cmp	r3, r2
 800d8c2:	d00e      	beq.n	800d8e2 <HAL_DMA_IRQHandler+0xdaa>
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	681b      	ldr	r3, [r3, #0]
 800d8c8:	4a2d      	ldr	r2, [pc, #180]	@ (800d980 <HAL_DMA_IRQHandler+0xe48>)
 800d8ca:	4293      	cmp	r3, r2
 800d8cc:	d009      	beq.n	800d8e2 <HAL_DMA_IRQHandler+0xdaa>
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	681b      	ldr	r3, [r3, #0]
 800d8d2:	4a2c      	ldr	r2, [pc, #176]	@ (800d984 <HAL_DMA_IRQHandler+0xe4c>)
 800d8d4:	4293      	cmp	r3, r2
 800d8d6:	d004      	beq.n	800d8e2 <HAL_DMA_IRQHandler+0xdaa>
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	681b      	ldr	r3, [r3, #0]
 800d8dc:	4a2a      	ldr	r2, [pc, #168]	@ (800d988 <HAL_DMA_IRQHandler+0xe50>)
 800d8de:	4293      	cmp	r3, r2
 800d8e0:	d108      	bne.n	800d8f4 <HAL_DMA_IRQHandler+0xdbc>
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	681b      	ldr	r3, [r3, #0]
 800d8e6:	681a      	ldr	r2, [r3, #0]
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	681b      	ldr	r3, [r3, #0]
 800d8ec:	f022 021c 	bic.w	r2, r2, #28
 800d8f0:	601a      	str	r2, [r3, #0]
 800d8f2:	e007      	b.n	800d904 <HAL_DMA_IRQHandler+0xdcc>
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	681b      	ldr	r3, [r3, #0]
 800d8f8:	681a      	ldr	r2, [r3, #0]
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	681b      	ldr	r3, [r3, #0]
 800d8fe:	f022 020e 	bic.w	r2, r2, #14
 800d902:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d908:	f003 031f 	and.w	r3, r3, #31
 800d90c:	2201      	movs	r2, #1
 800d90e:	409a      	lsls	r2, r3
 800d910:	69fb      	ldr	r3, [r7, #28]
 800d912:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	2201      	movs	r2, #1
 800d918:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	2201      	movs	r2, #1
 800d91e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	2200      	movs	r2, #0
 800d926:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d92e:	2b00      	cmp	r3, #0
 800d930:	d009      	beq.n	800d946 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d936:	6878      	ldr	r0, [r7, #4]
 800d938:	4798      	blx	r3
 800d93a:	e004      	b.n	800d946 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800d93c:	bf00      	nop
 800d93e:	e002      	b.n	800d946 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800d940:	bf00      	nop
 800d942:	e000      	b.n	800d946 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800d944:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800d946:	3728      	adds	r7, #40	@ 0x28
 800d948:	46bd      	mov	sp, r7
 800d94a:	bd80      	pop	{r7, pc}
 800d94c:	40020010 	.word	0x40020010
 800d950:	40020028 	.word	0x40020028
 800d954:	40020040 	.word	0x40020040
 800d958:	40020058 	.word	0x40020058
 800d95c:	40020070 	.word	0x40020070
 800d960:	40020088 	.word	0x40020088
 800d964:	400200a0 	.word	0x400200a0
 800d968:	400200b8 	.word	0x400200b8
 800d96c:	40020410 	.word	0x40020410
 800d970:	40020428 	.word	0x40020428
 800d974:	40020440 	.word	0x40020440
 800d978:	40020458 	.word	0x40020458
 800d97c:	40020470 	.word	0x40020470
 800d980:	40020488 	.word	0x40020488
 800d984:	400204a0 	.word	0x400204a0
 800d988:	400204b8 	.word	0x400204b8

0800d98c <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800d98c:	b480      	push	{r7}
 800d98e:	b083      	sub	sp, #12
 800d990:	af00      	add	r7, sp, #0
 800d992:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800d99a:	b2db      	uxtb	r3, r3
}
 800d99c:	4618      	mov	r0, r3
 800d99e:	370c      	adds	r7, #12
 800d9a0:	46bd      	mov	sp, r7
 800d9a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9a6:	4770      	bx	lr

0800d9a8 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800d9a8:	b480      	push	{r7}
 800d9aa:	b083      	sub	sp, #12
 800d9ac:	af00      	add	r7, sp, #0
 800d9ae:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 800d9b4:	4618      	mov	r0, r3
 800d9b6:	370c      	adds	r7, #12
 800d9b8:	46bd      	mov	sp, r7
 800d9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9be:	4770      	bx	lr

0800d9c0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800d9c0:	b480      	push	{r7}
 800d9c2:	b087      	sub	sp, #28
 800d9c4:	af00      	add	r7, sp, #0
 800d9c6:	60f8      	str	r0, [r7, #12]
 800d9c8:	60b9      	str	r1, [r7, #8]
 800d9ca:	607a      	str	r2, [r7, #4]
 800d9cc:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800d9ce:	68fb      	ldr	r3, [r7, #12]
 800d9d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d9d2:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800d9d4:	68fb      	ldr	r3, [r7, #12]
 800d9d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d9d8:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800d9da:	68fb      	ldr	r3, [r7, #12]
 800d9dc:	681b      	ldr	r3, [r3, #0]
 800d9de:	4a7f      	ldr	r2, [pc, #508]	@ (800dbdc <DMA_SetConfig+0x21c>)
 800d9e0:	4293      	cmp	r3, r2
 800d9e2:	d072      	beq.n	800daca <DMA_SetConfig+0x10a>
 800d9e4:	68fb      	ldr	r3, [r7, #12]
 800d9e6:	681b      	ldr	r3, [r3, #0]
 800d9e8:	4a7d      	ldr	r2, [pc, #500]	@ (800dbe0 <DMA_SetConfig+0x220>)
 800d9ea:	4293      	cmp	r3, r2
 800d9ec:	d06d      	beq.n	800daca <DMA_SetConfig+0x10a>
 800d9ee:	68fb      	ldr	r3, [r7, #12]
 800d9f0:	681b      	ldr	r3, [r3, #0]
 800d9f2:	4a7c      	ldr	r2, [pc, #496]	@ (800dbe4 <DMA_SetConfig+0x224>)
 800d9f4:	4293      	cmp	r3, r2
 800d9f6:	d068      	beq.n	800daca <DMA_SetConfig+0x10a>
 800d9f8:	68fb      	ldr	r3, [r7, #12]
 800d9fa:	681b      	ldr	r3, [r3, #0]
 800d9fc:	4a7a      	ldr	r2, [pc, #488]	@ (800dbe8 <DMA_SetConfig+0x228>)
 800d9fe:	4293      	cmp	r3, r2
 800da00:	d063      	beq.n	800daca <DMA_SetConfig+0x10a>
 800da02:	68fb      	ldr	r3, [r7, #12]
 800da04:	681b      	ldr	r3, [r3, #0]
 800da06:	4a79      	ldr	r2, [pc, #484]	@ (800dbec <DMA_SetConfig+0x22c>)
 800da08:	4293      	cmp	r3, r2
 800da0a:	d05e      	beq.n	800daca <DMA_SetConfig+0x10a>
 800da0c:	68fb      	ldr	r3, [r7, #12]
 800da0e:	681b      	ldr	r3, [r3, #0]
 800da10:	4a77      	ldr	r2, [pc, #476]	@ (800dbf0 <DMA_SetConfig+0x230>)
 800da12:	4293      	cmp	r3, r2
 800da14:	d059      	beq.n	800daca <DMA_SetConfig+0x10a>
 800da16:	68fb      	ldr	r3, [r7, #12]
 800da18:	681b      	ldr	r3, [r3, #0]
 800da1a:	4a76      	ldr	r2, [pc, #472]	@ (800dbf4 <DMA_SetConfig+0x234>)
 800da1c:	4293      	cmp	r3, r2
 800da1e:	d054      	beq.n	800daca <DMA_SetConfig+0x10a>
 800da20:	68fb      	ldr	r3, [r7, #12]
 800da22:	681b      	ldr	r3, [r3, #0]
 800da24:	4a74      	ldr	r2, [pc, #464]	@ (800dbf8 <DMA_SetConfig+0x238>)
 800da26:	4293      	cmp	r3, r2
 800da28:	d04f      	beq.n	800daca <DMA_SetConfig+0x10a>
 800da2a:	68fb      	ldr	r3, [r7, #12]
 800da2c:	681b      	ldr	r3, [r3, #0]
 800da2e:	4a73      	ldr	r2, [pc, #460]	@ (800dbfc <DMA_SetConfig+0x23c>)
 800da30:	4293      	cmp	r3, r2
 800da32:	d04a      	beq.n	800daca <DMA_SetConfig+0x10a>
 800da34:	68fb      	ldr	r3, [r7, #12]
 800da36:	681b      	ldr	r3, [r3, #0]
 800da38:	4a71      	ldr	r2, [pc, #452]	@ (800dc00 <DMA_SetConfig+0x240>)
 800da3a:	4293      	cmp	r3, r2
 800da3c:	d045      	beq.n	800daca <DMA_SetConfig+0x10a>
 800da3e:	68fb      	ldr	r3, [r7, #12]
 800da40:	681b      	ldr	r3, [r3, #0]
 800da42:	4a70      	ldr	r2, [pc, #448]	@ (800dc04 <DMA_SetConfig+0x244>)
 800da44:	4293      	cmp	r3, r2
 800da46:	d040      	beq.n	800daca <DMA_SetConfig+0x10a>
 800da48:	68fb      	ldr	r3, [r7, #12]
 800da4a:	681b      	ldr	r3, [r3, #0]
 800da4c:	4a6e      	ldr	r2, [pc, #440]	@ (800dc08 <DMA_SetConfig+0x248>)
 800da4e:	4293      	cmp	r3, r2
 800da50:	d03b      	beq.n	800daca <DMA_SetConfig+0x10a>
 800da52:	68fb      	ldr	r3, [r7, #12]
 800da54:	681b      	ldr	r3, [r3, #0]
 800da56:	4a6d      	ldr	r2, [pc, #436]	@ (800dc0c <DMA_SetConfig+0x24c>)
 800da58:	4293      	cmp	r3, r2
 800da5a:	d036      	beq.n	800daca <DMA_SetConfig+0x10a>
 800da5c:	68fb      	ldr	r3, [r7, #12]
 800da5e:	681b      	ldr	r3, [r3, #0]
 800da60:	4a6b      	ldr	r2, [pc, #428]	@ (800dc10 <DMA_SetConfig+0x250>)
 800da62:	4293      	cmp	r3, r2
 800da64:	d031      	beq.n	800daca <DMA_SetConfig+0x10a>
 800da66:	68fb      	ldr	r3, [r7, #12]
 800da68:	681b      	ldr	r3, [r3, #0]
 800da6a:	4a6a      	ldr	r2, [pc, #424]	@ (800dc14 <DMA_SetConfig+0x254>)
 800da6c:	4293      	cmp	r3, r2
 800da6e:	d02c      	beq.n	800daca <DMA_SetConfig+0x10a>
 800da70:	68fb      	ldr	r3, [r7, #12]
 800da72:	681b      	ldr	r3, [r3, #0]
 800da74:	4a68      	ldr	r2, [pc, #416]	@ (800dc18 <DMA_SetConfig+0x258>)
 800da76:	4293      	cmp	r3, r2
 800da78:	d027      	beq.n	800daca <DMA_SetConfig+0x10a>
 800da7a:	68fb      	ldr	r3, [r7, #12]
 800da7c:	681b      	ldr	r3, [r3, #0]
 800da7e:	4a67      	ldr	r2, [pc, #412]	@ (800dc1c <DMA_SetConfig+0x25c>)
 800da80:	4293      	cmp	r3, r2
 800da82:	d022      	beq.n	800daca <DMA_SetConfig+0x10a>
 800da84:	68fb      	ldr	r3, [r7, #12]
 800da86:	681b      	ldr	r3, [r3, #0]
 800da88:	4a65      	ldr	r2, [pc, #404]	@ (800dc20 <DMA_SetConfig+0x260>)
 800da8a:	4293      	cmp	r3, r2
 800da8c:	d01d      	beq.n	800daca <DMA_SetConfig+0x10a>
 800da8e:	68fb      	ldr	r3, [r7, #12]
 800da90:	681b      	ldr	r3, [r3, #0]
 800da92:	4a64      	ldr	r2, [pc, #400]	@ (800dc24 <DMA_SetConfig+0x264>)
 800da94:	4293      	cmp	r3, r2
 800da96:	d018      	beq.n	800daca <DMA_SetConfig+0x10a>
 800da98:	68fb      	ldr	r3, [r7, #12]
 800da9a:	681b      	ldr	r3, [r3, #0]
 800da9c:	4a62      	ldr	r2, [pc, #392]	@ (800dc28 <DMA_SetConfig+0x268>)
 800da9e:	4293      	cmp	r3, r2
 800daa0:	d013      	beq.n	800daca <DMA_SetConfig+0x10a>
 800daa2:	68fb      	ldr	r3, [r7, #12]
 800daa4:	681b      	ldr	r3, [r3, #0]
 800daa6:	4a61      	ldr	r2, [pc, #388]	@ (800dc2c <DMA_SetConfig+0x26c>)
 800daa8:	4293      	cmp	r3, r2
 800daaa:	d00e      	beq.n	800daca <DMA_SetConfig+0x10a>
 800daac:	68fb      	ldr	r3, [r7, #12]
 800daae:	681b      	ldr	r3, [r3, #0]
 800dab0:	4a5f      	ldr	r2, [pc, #380]	@ (800dc30 <DMA_SetConfig+0x270>)
 800dab2:	4293      	cmp	r3, r2
 800dab4:	d009      	beq.n	800daca <DMA_SetConfig+0x10a>
 800dab6:	68fb      	ldr	r3, [r7, #12]
 800dab8:	681b      	ldr	r3, [r3, #0]
 800daba:	4a5e      	ldr	r2, [pc, #376]	@ (800dc34 <DMA_SetConfig+0x274>)
 800dabc:	4293      	cmp	r3, r2
 800dabe:	d004      	beq.n	800daca <DMA_SetConfig+0x10a>
 800dac0:	68fb      	ldr	r3, [r7, #12]
 800dac2:	681b      	ldr	r3, [r3, #0]
 800dac4:	4a5c      	ldr	r2, [pc, #368]	@ (800dc38 <DMA_SetConfig+0x278>)
 800dac6:	4293      	cmp	r3, r2
 800dac8:	d101      	bne.n	800dace <DMA_SetConfig+0x10e>
 800daca:	2301      	movs	r3, #1
 800dacc:	e000      	b.n	800dad0 <DMA_SetConfig+0x110>
 800dace:	2300      	movs	r3, #0
 800dad0:	2b00      	cmp	r3, #0
 800dad2:	d00d      	beq.n	800daf0 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800dad4:	68fb      	ldr	r3, [r7, #12]
 800dad6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800dad8:	68fa      	ldr	r2, [r7, #12]
 800dada:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800dadc:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800dade:	68fb      	ldr	r3, [r7, #12]
 800dae0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	d004      	beq.n	800daf0 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800dae6:	68fb      	ldr	r3, [r7, #12]
 800dae8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800daea:	68fa      	ldr	r2, [r7, #12]
 800daec:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800daee:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800daf0:	68fb      	ldr	r3, [r7, #12]
 800daf2:	681b      	ldr	r3, [r3, #0]
 800daf4:	4a39      	ldr	r2, [pc, #228]	@ (800dbdc <DMA_SetConfig+0x21c>)
 800daf6:	4293      	cmp	r3, r2
 800daf8:	d04a      	beq.n	800db90 <DMA_SetConfig+0x1d0>
 800dafa:	68fb      	ldr	r3, [r7, #12]
 800dafc:	681b      	ldr	r3, [r3, #0]
 800dafe:	4a38      	ldr	r2, [pc, #224]	@ (800dbe0 <DMA_SetConfig+0x220>)
 800db00:	4293      	cmp	r3, r2
 800db02:	d045      	beq.n	800db90 <DMA_SetConfig+0x1d0>
 800db04:	68fb      	ldr	r3, [r7, #12]
 800db06:	681b      	ldr	r3, [r3, #0]
 800db08:	4a36      	ldr	r2, [pc, #216]	@ (800dbe4 <DMA_SetConfig+0x224>)
 800db0a:	4293      	cmp	r3, r2
 800db0c:	d040      	beq.n	800db90 <DMA_SetConfig+0x1d0>
 800db0e:	68fb      	ldr	r3, [r7, #12]
 800db10:	681b      	ldr	r3, [r3, #0]
 800db12:	4a35      	ldr	r2, [pc, #212]	@ (800dbe8 <DMA_SetConfig+0x228>)
 800db14:	4293      	cmp	r3, r2
 800db16:	d03b      	beq.n	800db90 <DMA_SetConfig+0x1d0>
 800db18:	68fb      	ldr	r3, [r7, #12]
 800db1a:	681b      	ldr	r3, [r3, #0]
 800db1c:	4a33      	ldr	r2, [pc, #204]	@ (800dbec <DMA_SetConfig+0x22c>)
 800db1e:	4293      	cmp	r3, r2
 800db20:	d036      	beq.n	800db90 <DMA_SetConfig+0x1d0>
 800db22:	68fb      	ldr	r3, [r7, #12]
 800db24:	681b      	ldr	r3, [r3, #0]
 800db26:	4a32      	ldr	r2, [pc, #200]	@ (800dbf0 <DMA_SetConfig+0x230>)
 800db28:	4293      	cmp	r3, r2
 800db2a:	d031      	beq.n	800db90 <DMA_SetConfig+0x1d0>
 800db2c:	68fb      	ldr	r3, [r7, #12]
 800db2e:	681b      	ldr	r3, [r3, #0]
 800db30:	4a30      	ldr	r2, [pc, #192]	@ (800dbf4 <DMA_SetConfig+0x234>)
 800db32:	4293      	cmp	r3, r2
 800db34:	d02c      	beq.n	800db90 <DMA_SetConfig+0x1d0>
 800db36:	68fb      	ldr	r3, [r7, #12]
 800db38:	681b      	ldr	r3, [r3, #0]
 800db3a:	4a2f      	ldr	r2, [pc, #188]	@ (800dbf8 <DMA_SetConfig+0x238>)
 800db3c:	4293      	cmp	r3, r2
 800db3e:	d027      	beq.n	800db90 <DMA_SetConfig+0x1d0>
 800db40:	68fb      	ldr	r3, [r7, #12]
 800db42:	681b      	ldr	r3, [r3, #0]
 800db44:	4a2d      	ldr	r2, [pc, #180]	@ (800dbfc <DMA_SetConfig+0x23c>)
 800db46:	4293      	cmp	r3, r2
 800db48:	d022      	beq.n	800db90 <DMA_SetConfig+0x1d0>
 800db4a:	68fb      	ldr	r3, [r7, #12]
 800db4c:	681b      	ldr	r3, [r3, #0]
 800db4e:	4a2c      	ldr	r2, [pc, #176]	@ (800dc00 <DMA_SetConfig+0x240>)
 800db50:	4293      	cmp	r3, r2
 800db52:	d01d      	beq.n	800db90 <DMA_SetConfig+0x1d0>
 800db54:	68fb      	ldr	r3, [r7, #12]
 800db56:	681b      	ldr	r3, [r3, #0]
 800db58:	4a2a      	ldr	r2, [pc, #168]	@ (800dc04 <DMA_SetConfig+0x244>)
 800db5a:	4293      	cmp	r3, r2
 800db5c:	d018      	beq.n	800db90 <DMA_SetConfig+0x1d0>
 800db5e:	68fb      	ldr	r3, [r7, #12]
 800db60:	681b      	ldr	r3, [r3, #0]
 800db62:	4a29      	ldr	r2, [pc, #164]	@ (800dc08 <DMA_SetConfig+0x248>)
 800db64:	4293      	cmp	r3, r2
 800db66:	d013      	beq.n	800db90 <DMA_SetConfig+0x1d0>
 800db68:	68fb      	ldr	r3, [r7, #12]
 800db6a:	681b      	ldr	r3, [r3, #0]
 800db6c:	4a27      	ldr	r2, [pc, #156]	@ (800dc0c <DMA_SetConfig+0x24c>)
 800db6e:	4293      	cmp	r3, r2
 800db70:	d00e      	beq.n	800db90 <DMA_SetConfig+0x1d0>
 800db72:	68fb      	ldr	r3, [r7, #12]
 800db74:	681b      	ldr	r3, [r3, #0]
 800db76:	4a26      	ldr	r2, [pc, #152]	@ (800dc10 <DMA_SetConfig+0x250>)
 800db78:	4293      	cmp	r3, r2
 800db7a:	d009      	beq.n	800db90 <DMA_SetConfig+0x1d0>
 800db7c:	68fb      	ldr	r3, [r7, #12]
 800db7e:	681b      	ldr	r3, [r3, #0]
 800db80:	4a24      	ldr	r2, [pc, #144]	@ (800dc14 <DMA_SetConfig+0x254>)
 800db82:	4293      	cmp	r3, r2
 800db84:	d004      	beq.n	800db90 <DMA_SetConfig+0x1d0>
 800db86:	68fb      	ldr	r3, [r7, #12]
 800db88:	681b      	ldr	r3, [r3, #0]
 800db8a:	4a23      	ldr	r2, [pc, #140]	@ (800dc18 <DMA_SetConfig+0x258>)
 800db8c:	4293      	cmp	r3, r2
 800db8e:	d101      	bne.n	800db94 <DMA_SetConfig+0x1d4>
 800db90:	2301      	movs	r3, #1
 800db92:	e000      	b.n	800db96 <DMA_SetConfig+0x1d6>
 800db94:	2300      	movs	r3, #0
 800db96:	2b00      	cmp	r3, #0
 800db98:	d059      	beq.n	800dc4e <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800db9a:	68fb      	ldr	r3, [r7, #12]
 800db9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800db9e:	f003 031f 	and.w	r3, r3, #31
 800dba2:	223f      	movs	r2, #63	@ 0x3f
 800dba4:	409a      	lsls	r2, r3
 800dba6:	697b      	ldr	r3, [r7, #20]
 800dba8:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800dbaa:	68fb      	ldr	r3, [r7, #12]
 800dbac:	681b      	ldr	r3, [r3, #0]
 800dbae:	681a      	ldr	r2, [r3, #0]
 800dbb0:	68fb      	ldr	r3, [r7, #12]
 800dbb2:	681b      	ldr	r3, [r3, #0]
 800dbb4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800dbb8:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800dbba:	68fb      	ldr	r3, [r7, #12]
 800dbbc:	681b      	ldr	r3, [r3, #0]
 800dbbe:	683a      	ldr	r2, [r7, #0]
 800dbc0:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800dbc2:	68fb      	ldr	r3, [r7, #12]
 800dbc4:	689b      	ldr	r3, [r3, #8]
 800dbc6:	2b40      	cmp	r3, #64	@ 0x40
 800dbc8:	d138      	bne.n	800dc3c <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800dbca:	68fb      	ldr	r3, [r7, #12]
 800dbcc:	681b      	ldr	r3, [r3, #0]
 800dbce:	687a      	ldr	r2, [r7, #4]
 800dbd0:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800dbd2:	68fb      	ldr	r3, [r7, #12]
 800dbd4:	681b      	ldr	r3, [r3, #0]
 800dbd6:	68ba      	ldr	r2, [r7, #8]
 800dbd8:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800dbda:	e086      	b.n	800dcea <DMA_SetConfig+0x32a>
 800dbdc:	40020010 	.word	0x40020010
 800dbe0:	40020028 	.word	0x40020028
 800dbe4:	40020040 	.word	0x40020040
 800dbe8:	40020058 	.word	0x40020058
 800dbec:	40020070 	.word	0x40020070
 800dbf0:	40020088 	.word	0x40020088
 800dbf4:	400200a0 	.word	0x400200a0
 800dbf8:	400200b8 	.word	0x400200b8
 800dbfc:	40020410 	.word	0x40020410
 800dc00:	40020428 	.word	0x40020428
 800dc04:	40020440 	.word	0x40020440
 800dc08:	40020458 	.word	0x40020458
 800dc0c:	40020470 	.word	0x40020470
 800dc10:	40020488 	.word	0x40020488
 800dc14:	400204a0 	.word	0x400204a0
 800dc18:	400204b8 	.word	0x400204b8
 800dc1c:	58025408 	.word	0x58025408
 800dc20:	5802541c 	.word	0x5802541c
 800dc24:	58025430 	.word	0x58025430
 800dc28:	58025444 	.word	0x58025444
 800dc2c:	58025458 	.word	0x58025458
 800dc30:	5802546c 	.word	0x5802546c
 800dc34:	58025480 	.word	0x58025480
 800dc38:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800dc3c:	68fb      	ldr	r3, [r7, #12]
 800dc3e:	681b      	ldr	r3, [r3, #0]
 800dc40:	68ba      	ldr	r2, [r7, #8]
 800dc42:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800dc44:	68fb      	ldr	r3, [r7, #12]
 800dc46:	681b      	ldr	r3, [r3, #0]
 800dc48:	687a      	ldr	r2, [r7, #4]
 800dc4a:	60da      	str	r2, [r3, #12]
}
 800dc4c:	e04d      	b.n	800dcea <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800dc4e:	68fb      	ldr	r3, [r7, #12]
 800dc50:	681b      	ldr	r3, [r3, #0]
 800dc52:	4a29      	ldr	r2, [pc, #164]	@ (800dcf8 <DMA_SetConfig+0x338>)
 800dc54:	4293      	cmp	r3, r2
 800dc56:	d022      	beq.n	800dc9e <DMA_SetConfig+0x2de>
 800dc58:	68fb      	ldr	r3, [r7, #12]
 800dc5a:	681b      	ldr	r3, [r3, #0]
 800dc5c:	4a27      	ldr	r2, [pc, #156]	@ (800dcfc <DMA_SetConfig+0x33c>)
 800dc5e:	4293      	cmp	r3, r2
 800dc60:	d01d      	beq.n	800dc9e <DMA_SetConfig+0x2de>
 800dc62:	68fb      	ldr	r3, [r7, #12]
 800dc64:	681b      	ldr	r3, [r3, #0]
 800dc66:	4a26      	ldr	r2, [pc, #152]	@ (800dd00 <DMA_SetConfig+0x340>)
 800dc68:	4293      	cmp	r3, r2
 800dc6a:	d018      	beq.n	800dc9e <DMA_SetConfig+0x2de>
 800dc6c:	68fb      	ldr	r3, [r7, #12]
 800dc6e:	681b      	ldr	r3, [r3, #0]
 800dc70:	4a24      	ldr	r2, [pc, #144]	@ (800dd04 <DMA_SetConfig+0x344>)
 800dc72:	4293      	cmp	r3, r2
 800dc74:	d013      	beq.n	800dc9e <DMA_SetConfig+0x2de>
 800dc76:	68fb      	ldr	r3, [r7, #12]
 800dc78:	681b      	ldr	r3, [r3, #0]
 800dc7a:	4a23      	ldr	r2, [pc, #140]	@ (800dd08 <DMA_SetConfig+0x348>)
 800dc7c:	4293      	cmp	r3, r2
 800dc7e:	d00e      	beq.n	800dc9e <DMA_SetConfig+0x2de>
 800dc80:	68fb      	ldr	r3, [r7, #12]
 800dc82:	681b      	ldr	r3, [r3, #0]
 800dc84:	4a21      	ldr	r2, [pc, #132]	@ (800dd0c <DMA_SetConfig+0x34c>)
 800dc86:	4293      	cmp	r3, r2
 800dc88:	d009      	beq.n	800dc9e <DMA_SetConfig+0x2de>
 800dc8a:	68fb      	ldr	r3, [r7, #12]
 800dc8c:	681b      	ldr	r3, [r3, #0]
 800dc8e:	4a20      	ldr	r2, [pc, #128]	@ (800dd10 <DMA_SetConfig+0x350>)
 800dc90:	4293      	cmp	r3, r2
 800dc92:	d004      	beq.n	800dc9e <DMA_SetConfig+0x2de>
 800dc94:	68fb      	ldr	r3, [r7, #12]
 800dc96:	681b      	ldr	r3, [r3, #0]
 800dc98:	4a1e      	ldr	r2, [pc, #120]	@ (800dd14 <DMA_SetConfig+0x354>)
 800dc9a:	4293      	cmp	r3, r2
 800dc9c:	d101      	bne.n	800dca2 <DMA_SetConfig+0x2e2>
 800dc9e:	2301      	movs	r3, #1
 800dca0:	e000      	b.n	800dca4 <DMA_SetConfig+0x2e4>
 800dca2:	2300      	movs	r3, #0
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	d020      	beq.n	800dcea <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800dca8:	68fb      	ldr	r3, [r7, #12]
 800dcaa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800dcac:	f003 031f 	and.w	r3, r3, #31
 800dcb0:	2201      	movs	r2, #1
 800dcb2:	409a      	lsls	r2, r3
 800dcb4:	693b      	ldr	r3, [r7, #16]
 800dcb6:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800dcb8:	68fb      	ldr	r3, [r7, #12]
 800dcba:	681b      	ldr	r3, [r3, #0]
 800dcbc:	683a      	ldr	r2, [r7, #0]
 800dcbe:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800dcc0:	68fb      	ldr	r3, [r7, #12]
 800dcc2:	689b      	ldr	r3, [r3, #8]
 800dcc4:	2b40      	cmp	r3, #64	@ 0x40
 800dcc6:	d108      	bne.n	800dcda <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800dcc8:	68fb      	ldr	r3, [r7, #12]
 800dcca:	681b      	ldr	r3, [r3, #0]
 800dccc:	687a      	ldr	r2, [r7, #4]
 800dcce:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800dcd0:	68fb      	ldr	r3, [r7, #12]
 800dcd2:	681b      	ldr	r3, [r3, #0]
 800dcd4:	68ba      	ldr	r2, [r7, #8]
 800dcd6:	60da      	str	r2, [r3, #12]
}
 800dcd8:	e007      	b.n	800dcea <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800dcda:	68fb      	ldr	r3, [r7, #12]
 800dcdc:	681b      	ldr	r3, [r3, #0]
 800dcde:	68ba      	ldr	r2, [r7, #8]
 800dce0:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800dce2:	68fb      	ldr	r3, [r7, #12]
 800dce4:	681b      	ldr	r3, [r3, #0]
 800dce6:	687a      	ldr	r2, [r7, #4]
 800dce8:	60da      	str	r2, [r3, #12]
}
 800dcea:	bf00      	nop
 800dcec:	371c      	adds	r7, #28
 800dcee:	46bd      	mov	sp, r7
 800dcf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcf4:	4770      	bx	lr
 800dcf6:	bf00      	nop
 800dcf8:	58025408 	.word	0x58025408
 800dcfc:	5802541c 	.word	0x5802541c
 800dd00:	58025430 	.word	0x58025430
 800dd04:	58025444 	.word	0x58025444
 800dd08:	58025458 	.word	0x58025458
 800dd0c:	5802546c 	.word	0x5802546c
 800dd10:	58025480 	.word	0x58025480
 800dd14:	58025494 	.word	0x58025494

0800dd18 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800dd18:	b480      	push	{r7}
 800dd1a:	b085      	sub	sp, #20
 800dd1c:	af00      	add	r7, sp, #0
 800dd1e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	681b      	ldr	r3, [r3, #0]
 800dd24:	4a42      	ldr	r2, [pc, #264]	@ (800de30 <DMA_CalcBaseAndBitshift+0x118>)
 800dd26:	4293      	cmp	r3, r2
 800dd28:	d04a      	beq.n	800ddc0 <DMA_CalcBaseAndBitshift+0xa8>
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	681b      	ldr	r3, [r3, #0]
 800dd2e:	4a41      	ldr	r2, [pc, #260]	@ (800de34 <DMA_CalcBaseAndBitshift+0x11c>)
 800dd30:	4293      	cmp	r3, r2
 800dd32:	d045      	beq.n	800ddc0 <DMA_CalcBaseAndBitshift+0xa8>
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	681b      	ldr	r3, [r3, #0]
 800dd38:	4a3f      	ldr	r2, [pc, #252]	@ (800de38 <DMA_CalcBaseAndBitshift+0x120>)
 800dd3a:	4293      	cmp	r3, r2
 800dd3c:	d040      	beq.n	800ddc0 <DMA_CalcBaseAndBitshift+0xa8>
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	681b      	ldr	r3, [r3, #0]
 800dd42:	4a3e      	ldr	r2, [pc, #248]	@ (800de3c <DMA_CalcBaseAndBitshift+0x124>)
 800dd44:	4293      	cmp	r3, r2
 800dd46:	d03b      	beq.n	800ddc0 <DMA_CalcBaseAndBitshift+0xa8>
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	681b      	ldr	r3, [r3, #0]
 800dd4c:	4a3c      	ldr	r2, [pc, #240]	@ (800de40 <DMA_CalcBaseAndBitshift+0x128>)
 800dd4e:	4293      	cmp	r3, r2
 800dd50:	d036      	beq.n	800ddc0 <DMA_CalcBaseAndBitshift+0xa8>
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	681b      	ldr	r3, [r3, #0]
 800dd56:	4a3b      	ldr	r2, [pc, #236]	@ (800de44 <DMA_CalcBaseAndBitshift+0x12c>)
 800dd58:	4293      	cmp	r3, r2
 800dd5a:	d031      	beq.n	800ddc0 <DMA_CalcBaseAndBitshift+0xa8>
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	681b      	ldr	r3, [r3, #0]
 800dd60:	4a39      	ldr	r2, [pc, #228]	@ (800de48 <DMA_CalcBaseAndBitshift+0x130>)
 800dd62:	4293      	cmp	r3, r2
 800dd64:	d02c      	beq.n	800ddc0 <DMA_CalcBaseAndBitshift+0xa8>
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	681b      	ldr	r3, [r3, #0]
 800dd6a:	4a38      	ldr	r2, [pc, #224]	@ (800de4c <DMA_CalcBaseAndBitshift+0x134>)
 800dd6c:	4293      	cmp	r3, r2
 800dd6e:	d027      	beq.n	800ddc0 <DMA_CalcBaseAndBitshift+0xa8>
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	681b      	ldr	r3, [r3, #0]
 800dd74:	4a36      	ldr	r2, [pc, #216]	@ (800de50 <DMA_CalcBaseAndBitshift+0x138>)
 800dd76:	4293      	cmp	r3, r2
 800dd78:	d022      	beq.n	800ddc0 <DMA_CalcBaseAndBitshift+0xa8>
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	681b      	ldr	r3, [r3, #0]
 800dd7e:	4a35      	ldr	r2, [pc, #212]	@ (800de54 <DMA_CalcBaseAndBitshift+0x13c>)
 800dd80:	4293      	cmp	r3, r2
 800dd82:	d01d      	beq.n	800ddc0 <DMA_CalcBaseAndBitshift+0xa8>
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	681b      	ldr	r3, [r3, #0]
 800dd88:	4a33      	ldr	r2, [pc, #204]	@ (800de58 <DMA_CalcBaseAndBitshift+0x140>)
 800dd8a:	4293      	cmp	r3, r2
 800dd8c:	d018      	beq.n	800ddc0 <DMA_CalcBaseAndBitshift+0xa8>
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	681b      	ldr	r3, [r3, #0]
 800dd92:	4a32      	ldr	r2, [pc, #200]	@ (800de5c <DMA_CalcBaseAndBitshift+0x144>)
 800dd94:	4293      	cmp	r3, r2
 800dd96:	d013      	beq.n	800ddc0 <DMA_CalcBaseAndBitshift+0xa8>
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	681b      	ldr	r3, [r3, #0]
 800dd9c:	4a30      	ldr	r2, [pc, #192]	@ (800de60 <DMA_CalcBaseAndBitshift+0x148>)
 800dd9e:	4293      	cmp	r3, r2
 800dda0:	d00e      	beq.n	800ddc0 <DMA_CalcBaseAndBitshift+0xa8>
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	681b      	ldr	r3, [r3, #0]
 800dda6:	4a2f      	ldr	r2, [pc, #188]	@ (800de64 <DMA_CalcBaseAndBitshift+0x14c>)
 800dda8:	4293      	cmp	r3, r2
 800ddaa:	d009      	beq.n	800ddc0 <DMA_CalcBaseAndBitshift+0xa8>
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	681b      	ldr	r3, [r3, #0]
 800ddb0:	4a2d      	ldr	r2, [pc, #180]	@ (800de68 <DMA_CalcBaseAndBitshift+0x150>)
 800ddb2:	4293      	cmp	r3, r2
 800ddb4:	d004      	beq.n	800ddc0 <DMA_CalcBaseAndBitshift+0xa8>
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	681b      	ldr	r3, [r3, #0]
 800ddba:	4a2c      	ldr	r2, [pc, #176]	@ (800de6c <DMA_CalcBaseAndBitshift+0x154>)
 800ddbc:	4293      	cmp	r3, r2
 800ddbe:	d101      	bne.n	800ddc4 <DMA_CalcBaseAndBitshift+0xac>
 800ddc0:	2301      	movs	r3, #1
 800ddc2:	e000      	b.n	800ddc6 <DMA_CalcBaseAndBitshift+0xae>
 800ddc4:	2300      	movs	r3, #0
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	d024      	beq.n	800de14 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	681b      	ldr	r3, [r3, #0]
 800ddce:	b2db      	uxtb	r3, r3
 800ddd0:	3b10      	subs	r3, #16
 800ddd2:	4a27      	ldr	r2, [pc, #156]	@ (800de70 <DMA_CalcBaseAndBitshift+0x158>)
 800ddd4:	fba2 2303 	umull	r2, r3, r2, r3
 800ddd8:	091b      	lsrs	r3, r3, #4
 800ddda:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800dddc:	68fb      	ldr	r3, [r7, #12]
 800ddde:	f003 0307 	and.w	r3, r3, #7
 800dde2:	4a24      	ldr	r2, [pc, #144]	@ (800de74 <DMA_CalcBaseAndBitshift+0x15c>)
 800dde4:	5cd3      	ldrb	r3, [r2, r3]
 800dde6:	461a      	mov	r2, r3
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 800ddec:	68fb      	ldr	r3, [r7, #12]
 800ddee:	2b03      	cmp	r3, #3
 800ddf0:	d908      	bls.n	800de04 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	681b      	ldr	r3, [r3, #0]
 800ddf6:	461a      	mov	r2, r3
 800ddf8:	4b1f      	ldr	r3, [pc, #124]	@ (800de78 <DMA_CalcBaseAndBitshift+0x160>)
 800ddfa:	4013      	ands	r3, r2
 800ddfc:	1d1a      	adds	r2, r3, #4
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	659a      	str	r2, [r3, #88]	@ 0x58
 800de02:	e00d      	b.n	800de20 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	681b      	ldr	r3, [r3, #0]
 800de08:	461a      	mov	r2, r3
 800de0a:	4b1b      	ldr	r3, [pc, #108]	@ (800de78 <DMA_CalcBaseAndBitshift+0x160>)
 800de0c:	4013      	ands	r3, r2
 800de0e:	687a      	ldr	r2, [r7, #4]
 800de10:	6593      	str	r3, [r2, #88]	@ 0x58
 800de12:	e005      	b.n	800de20 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	681b      	ldr	r3, [r3, #0]
 800de18:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800de24:	4618      	mov	r0, r3
 800de26:	3714      	adds	r7, #20
 800de28:	46bd      	mov	sp, r7
 800de2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de2e:	4770      	bx	lr
 800de30:	40020010 	.word	0x40020010
 800de34:	40020028 	.word	0x40020028
 800de38:	40020040 	.word	0x40020040
 800de3c:	40020058 	.word	0x40020058
 800de40:	40020070 	.word	0x40020070
 800de44:	40020088 	.word	0x40020088
 800de48:	400200a0 	.word	0x400200a0
 800de4c:	400200b8 	.word	0x400200b8
 800de50:	40020410 	.word	0x40020410
 800de54:	40020428 	.word	0x40020428
 800de58:	40020440 	.word	0x40020440
 800de5c:	40020458 	.word	0x40020458
 800de60:	40020470 	.word	0x40020470
 800de64:	40020488 	.word	0x40020488
 800de68:	400204a0 	.word	0x400204a0
 800de6c:	400204b8 	.word	0x400204b8
 800de70:	aaaaaaab 	.word	0xaaaaaaab
 800de74:	0801e8dc 	.word	0x0801e8dc
 800de78:	fffffc00 	.word	0xfffffc00

0800de7c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800de7c:	b480      	push	{r7}
 800de7e:	b085      	sub	sp, #20
 800de80:	af00      	add	r7, sp, #0
 800de82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800de84:	2300      	movs	r3, #0
 800de86:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	699b      	ldr	r3, [r3, #24]
 800de8c:	2b00      	cmp	r3, #0
 800de8e:	d120      	bne.n	800ded2 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800de94:	2b03      	cmp	r3, #3
 800de96:	d858      	bhi.n	800df4a <DMA_CheckFifoParam+0xce>
 800de98:	a201      	add	r2, pc, #4	@ (adr r2, 800dea0 <DMA_CheckFifoParam+0x24>)
 800de9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de9e:	bf00      	nop
 800dea0:	0800deb1 	.word	0x0800deb1
 800dea4:	0800dec3 	.word	0x0800dec3
 800dea8:	0800deb1 	.word	0x0800deb1
 800deac:	0800df4b 	.word	0x0800df4b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800deb4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800deb8:	2b00      	cmp	r3, #0
 800deba:	d048      	beq.n	800df4e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800debc:	2301      	movs	r3, #1
 800debe:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800dec0:	e045      	b.n	800df4e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dec6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800deca:	d142      	bne.n	800df52 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800decc:	2301      	movs	r3, #1
 800dece:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800ded0:	e03f      	b.n	800df52 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	699b      	ldr	r3, [r3, #24]
 800ded6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800deda:	d123      	bne.n	800df24 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dee0:	2b03      	cmp	r3, #3
 800dee2:	d838      	bhi.n	800df56 <DMA_CheckFifoParam+0xda>
 800dee4:	a201      	add	r2, pc, #4	@ (adr r2, 800deec <DMA_CheckFifoParam+0x70>)
 800dee6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800deea:	bf00      	nop
 800deec:	0800defd 	.word	0x0800defd
 800def0:	0800df03 	.word	0x0800df03
 800def4:	0800defd 	.word	0x0800defd
 800def8:	0800df15 	.word	0x0800df15
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800defc:	2301      	movs	r3, #1
 800defe:	73fb      	strb	r3, [r7, #15]
        break;
 800df00:	e030      	b.n	800df64 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800df06:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800df0a:	2b00      	cmp	r3, #0
 800df0c:	d025      	beq.n	800df5a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800df0e:	2301      	movs	r3, #1
 800df10:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800df12:	e022      	b.n	800df5a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800df18:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800df1c:	d11f      	bne.n	800df5e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800df1e:	2301      	movs	r3, #1
 800df20:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800df22:	e01c      	b.n	800df5e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800df28:	2b02      	cmp	r3, #2
 800df2a:	d902      	bls.n	800df32 <DMA_CheckFifoParam+0xb6>
 800df2c:	2b03      	cmp	r3, #3
 800df2e:	d003      	beq.n	800df38 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800df30:	e018      	b.n	800df64 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800df32:	2301      	movs	r3, #1
 800df34:	73fb      	strb	r3, [r7, #15]
        break;
 800df36:	e015      	b.n	800df64 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800df3c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800df40:	2b00      	cmp	r3, #0
 800df42:	d00e      	beq.n	800df62 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800df44:	2301      	movs	r3, #1
 800df46:	73fb      	strb	r3, [r7, #15]
    break;
 800df48:	e00b      	b.n	800df62 <DMA_CheckFifoParam+0xe6>
        break;
 800df4a:	bf00      	nop
 800df4c:	e00a      	b.n	800df64 <DMA_CheckFifoParam+0xe8>
        break;
 800df4e:	bf00      	nop
 800df50:	e008      	b.n	800df64 <DMA_CheckFifoParam+0xe8>
        break;
 800df52:	bf00      	nop
 800df54:	e006      	b.n	800df64 <DMA_CheckFifoParam+0xe8>
        break;
 800df56:	bf00      	nop
 800df58:	e004      	b.n	800df64 <DMA_CheckFifoParam+0xe8>
        break;
 800df5a:	bf00      	nop
 800df5c:	e002      	b.n	800df64 <DMA_CheckFifoParam+0xe8>
        break;
 800df5e:	bf00      	nop
 800df60:	e000      	b.n	800df64 <DMA_CheckFifoParam+0xe8>
    break;
 800df62:	bf00      	nop
    }
  }

  return status;
 800df64:	7bfb      	ldrb	r3, [r7, #15]
}
 800df66:	4618      	mov	r0, r3
 800df68:	3714      	adds	r7, #20
 800df6a:	46bd      	mov	sp, r7
 800df6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df70:	4770      	bx	lr
 800df72:	bf00      	nop

0800df74 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800df74:	b480      	push	{r7}
 800df76:	b085      	sub	sp, #20
 800df78:	af00      	add	r7, sp, #0
 800df7a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	681b      	ldr	r3, [r3, #0]
 800df80:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	681b      	ldr	r3, [r3, #0]
 800df86:	4a38      	ldr	r2, [pc, #224]	@ (800e068 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800df88:	4293      	cmp	r3, r2
 800df8a:	d022      	beq.n	800dfd2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	681b      	ldr	r3, [r3, #0]
 800df90:	4a36      	ldr	r2, [pc, #216]	@ (800e06c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800df92:	4293      	cmp	r3, r2
 800df94:	d01d      	beq.n	800dfd2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	681b      	ldr	r3, [r3, #0]
 800df9a:	4a35      	ldr	r2, [pc, #212]	@ (800e070 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800df9c:	4293      	cmp	r3, r2
 800df9e:	d018      	beq.n	800dfd2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	681b      	ldr	r3, [r3, #0]
 800dfa4:	4a33      	ldr	r2, [pc, #204]	@ (800e074 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800dfa6:	4293      	cmp	r3, r2
 800dfa8:	d013      	beq.n	800dfd2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	681b      	ldr	r3, [r3, #0]
 800dfae:	4a32      	ldr	r2, [pc, #200]	@ (800e078 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800dfb0:	4293      	cmp	r3, r2
 800dfb2:	d00e      	beq.n	800dfd2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	681b      	ldr	r3, [r3, #0]
 800dfb8:	4a30      	ldr	r2, [pc, #192]	@ (800e07c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800dfba:	4293      	cmp	r3, r2
 800dfbc:	d009      	beq.n	800dfd2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	681b      	ldr	r3, [r3, #0]
 800dfc2:	4a2f      	ldr	r2, [pc, #188]	@ (800e080 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800dfc4:	4293      	cmp	r3, r2
 800dfc6:	d004      	beq.n	800dfd2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	681b      	ldr	r3, [r3, #0]
 800dfcc:	4a2d      	ldr	r2, [pc, #180]	@ (800e084 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800dfce:	4293      	cmp	r3, r2
 800dfd0:	d101      	bne.n	800dfd6 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800dfd2:	2301      	movs	r3, #1
 800dfd4:	e000      	b.n	800dfd8 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800dfd6:	2300      	movs	r3, #0
 800dfd8:	2b00      	cmp	r3, #0
 800dfda:	d01a      	beq.n	800e012 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	681b      	ldr	r3, [r3, #0]
 800dfe0:	b2db      	uxtb	r3, r3
 800dfe2:	3b08      	subs	r3, #8
 800dfe4:	4a28      	ldr	r2, [pc, #160]	@ (800e088 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800dfe6:	fba2 2303 	umull	r2, r3, r2, r3
 800dfea:	091b      	lsrs	r3, r3, #4
 800dfec:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800dfee:	68fa      	ldr	r2, [r7, #12]
 800dff0:	4b26      	ldr	r3, [pc, #152]	@ (800e08c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800dff2:	4413      	add	r3, r2
 800dff4:	009b      	lsls	r3, r3, #2
 800dff6:	461a      	mov	r2, r3
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	4a24      	ldr	r2, [pc, #144]	@ (800e090 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800e000:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800e002:	68fb      	ldr	r3, [r7, #12]
 800e004:	f003 031f 	and.w	r3, r3, #31
 800e008:	2201      	movs	r2, #1
 800e00a:	409a      	lsls	r2, r3
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800e010:	e024      	b.n	800e05c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	681b      	ldr	r3, [r3, #0]
 800e016:	b2db      	uxtb	r3, r3
 800e018:	3b10      	subs	r3, #16
 800e01a:	4a1e      	ldr	r2, [pc, #120]	@ (800e094 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800e01c:	fba2 2303 	umull	r2, r3, r2, r3
 800e020:	091b      	lsrs	r3, r3, #4
 800e022:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800e024:	68bb      	ldr	r3, [r7, #8]
 800e026:	4a1c      	ldr	r2, [pc, #112]	@ (800e098 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800e028:	4293      	cmp	r3, r2
 800e02a:	d806      	bhi.n	800e03a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800e02c:	68bb      	ldr	r3, [r7, #8]
 800e02e:	4a1b      	ldr	r2, [pc, #108]	@ (800e09c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800e030:	4293      	cmp	r3, r2
 800e032:	d902      	bls.n	800e03a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800e034:	68fb      	ldr	r3, [r7, #12]
 800e036:	3308      	adds	r3, #8
 800e038:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800e03a:	68fa      	ldr	r2, [r7, #12]
 800e03c:	4b18      	ldr	r3, [pc, #96]	@ (800e0a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800e03e:	4413      	add	r3, r2
 800e040:	009b      	lsls	r3, r3, #2
 800e042:	461a      	mov	r2, r3
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	4a16      	ldr	r2, [pc, #88]	@ (800e0a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800e04c:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800e04e:	68fb      	ldr	r3, [r7, #12]
 800e050:	f003 031f 	and.w	r3, r3, #31
 800e054:	2201      	movs	r2, #1
 800e056:	409a      	lsls	r2, r3
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800e05c:	bf00      	nop
 800e05e:	3714      	adds	r7, #20
 800e060:	46bd      	mov	sp, r7
 800e062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e066:	4770      	bx	lr
 800e068:	58025408 	.word	0x58025408
 800e06c:	5802541c 	.word	0x5802541c
 800e070:	58025430 	.word	0x58025430
 800e074:	58025444 	.word	0x58025444
 800e078:	58025458 	.word	0x58025458
 800e07c:	5802546c 	.word	0x5802546c
 800e080:	58025480 	.word	0x58025480
 800e084:	58025494 	.word	0x58025494
 800e088:	cccccccd 	.word	0xcccccccd
 800e08c:	16009600 	.word	0x16009600
 800e090:	58025880 	.word	0x58025880
 800e094:	aaaaaaab 	.word	0xaaaaaaab
 800e098:	400204b8 	.word	0x400204b8
 800e09c:	4002040f 	.word	0x4002040f
 800e0a0:	10008200 	.word	0x10008200
 800e0a4:	40020880 	.word	0x40020880

0800e0a8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800e0a8:	b480      	push	{r7}
 800e0aa:	b085      	sub	sp, #20
 800e0ac:	af00      	add	r7, sp, #0
 800e0ae:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	685b      	ldr	r3, [r3, #4]
 800e0b4:	b2db      	uxtb	r3, r3
 800e0b6:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800e0b8:	68fb      	ldr	r3, [r7, #12]
 800e0ba:	2b00      	cmp	r3, #0
 800e0bc:	d04a      	beq.n	800e154 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800e0be:	68fb      	ldr	r3, [r7, #12]
 800e0c0:	2b08      	cmp	r3, #8
 800e0c2:	d847      	bhi.n	800e154 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	681b      	ldr	r3, [r3, #0]
 800e0c8:	4a25      	ldr	r2, [pc, #148]	@ (800e160 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800e0ca:	4293      	cmp	r3, r2
 800e0cc:	d022      	beq.n	800e114 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	681b      	ldr	r3, [r3, #0]
 800e0d2:	4a24      	ldr	r2, [pc, #144]	@ (800e164 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800e0d4:	4293      	cmp	r3, r2
 800e0d6:	d01d      	beq.n	800e114 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	681b      	ldr	r3, [r3, #0]
 800e0dc:	4a22      	ldr	r2, [pc, #136]	@ (800e168 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800e0de:	4293      	cmp	r3, r2
 800e0e0:	d018      	beq.n	800e114 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	681b      	ldr	r3, [r3, #0]
 800e0e6:	4a21      	ldr	r2, [pc, #132]	@ (800e16c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800e0e8:	4293      	cmp	r3, r2
 800e0ea:	d013      	beq.n	800e114 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	681b      	ldr	r3, [r3, #0]
 800e0f0:	4a1f      	ldr	r2, [pc, #124]	@ (800e170 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800e0f2:	4293      	cmp	r3, r2
 800e0f4:	d00e      	beq.n	800e114 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	681b      	ldr	r3, [r3, #0]
 800e0fa:	4a1e      	ldr	r2, [pc, #120]	@ (800e174 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800e0fc:	4293      	cmp	r3, r2
 800e0fe:	d009      	beq.n	800e114 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	681b      	ldr	r3, [r3, #0]
 800e104:	4a1c      	ldr	r2, [pc, #112]	@ (800e178 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800e106:	4293      	cmp	r3, r2
 800e108:	d004      	beq.n	800e114 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	681b      	ldr	r3, [r3, #0]
 800e10e:	4a1b      	ldr	r2, [pc, #108]	@ (800e17c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800e110:	4293      	cmp	r3, r2
 800e112:	d101      	bne.n	800e118 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800e114:	2301      	movs	r3, #1
 800e116:	e000      	b.n	800e11a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800e118:	2300      	movs	r3, #0
 800e11a:	2b00      	cmp	r3, #0
 800e11c:	d00a      	beq.n	800e134 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800e11e:	68fa      	ldr	r2, [r7, #12]
 800e120:	4b17      	ldr	r3, [pc, #92]	@ (800e180 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800e122:	4413      	add	r3, r2
 800e124:	009b      	lsls	r3, r3, #2
 800e126:	461a      	mov	r2, r3
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	4a15      	ldr	r2, [pc, #84]	@ (800e184 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800e130:	671a      	str	r2, [r3, #112]	@ 0x70
 800e132:	e009      	b.n	800e148 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800e134:	68fa      	ldr	r2, [r7, #12]
 800e136:	4b14      	ldr	r3, [pc, #80]	@ (800e188 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800e138:	4413      	add	r3, r2
 800e13a:	009b      	lsls	r3, r3, #2
 800e13c:	461a      	mov	r2, r3
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	4a11      	ldr	r2, [pc, #68]	@ (800e18c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800e146:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800e148:	68fb      	ldr	r3, [r7, #12]
 800e14a:	3b01      	subs	r3, #1
 800e14c:	2201      	movs	r2, #1
 800e14e:	409a      	lsls	r2, r3
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 800e154:	bf00      	nop
 800e156:	3714      	adds	r7, #20
 800e158:	46bd      	mov	sp, r7
 800e15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e15e:	4770      	bx	lr
 800e160:	58025408 	.word	0x58025408
 800e164:	5802541c 	.word	0x5802541c
 800e168:	58025430 	.word	0x58025430
 800e16c:	58025444 	.word	0x58025444
 800e170:	58025458 	.word	0x58025458
 800e174:	5802546c 	.word	0x5802546c
 800e178:	58025480 	.word	0x58025480
 800e17c:	58025494 	.word	0x58025494
 800e180:	1600963f 	.word	0x1600963f
 800e184:	58025940 	.word	0x58025940
 800e188:	1000823f 	.word	0x1000823f
 800e18c:	40020940 	.word	0x40020940

0800e190 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800e190:	b480      	push	{r7}
 800e192:	b089      	sub	sp, #36	@ 0x24
 800e194:	af00      	add	r7, sp, #0
 800e196:	6078      	str	r0, [r7, #4]
 800e198:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800e19a:	2300      	movs	r3, #0
 800e19c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800e19e:	4b86      	ldr	r3, [pc, #536]	@ (800e3b8 <HAL_GPIO_Init+0x228>)
 800e1a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800e1a2:	e18c      	b.n	800e4be <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800e1a4:	683b      	ldr	r3, [r7, #0]
 800e1a6:	681a      	ldr	r2, [r3, #0]
 800e1a8:	2101      	movs	r1, #1
 800e1aa:	69fb      	ldr	r3, [r7, #28]
 800e1ac:	fa01 f303 	lsl.w	r3, r1, r3
 800e1b0:	4013      	ands	r3, r2
 800e1b2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800e1b4:	693b      	ldr	r3, [r7, #16]
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	f000 817e 	beq.w	800e4b8 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800e1bc:	683b      	ldr	r3, [r7, #0]
 800e1be:	685b      	ldr	r3, [r3, #4]
 800e1c0:	f003 0303 	and.w	r3, r3, #3
 800e1c4:	2b01      	cmp	r3, #1
 800e1c6:	d005      	beq.n	800e1d4 <HAL_GPIO_Init+0x44>
 800e1c8:	683b      	ldr	r3, [r7, #0]
 800e1ca:	685b      	ldr	r3, [r3, #4]
 800e1cc:	f003 0303 	and.w	r3, r3, #3
 800e1d0:	2b02      	cmp	r3, #2
 800e1d2:	d130      	bne.n	800e236 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	689b      	ldr	r3, [r3, #8]
 800e1d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800e1da:	69fb      	ldr	r3, [r7, #28]
 800e1dc:	005b      	lsls	r3, r3, #1
 800e1de:	2203      	movs	r2, #3
 800e1e0:	fa02 f303 	lsl.w	r3, r2, r3
 800e1e4:	43db      	mvns	r3, r3
 800e1e6:	69ba      	ldr	r2, [r7, #24]
 800e1e8:	4013      	ands	r3, r2
 800e1ea:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800e1ec:	683b      	ldr	r3, [r7, #0]
 800e1ee:	68da      	ldr	r2, [r3, #12]
 800e1f0:	69fb      	ldr	r3, [r7, #28]
 800e1f2:	005b      	lsls	r3, r3, #1
 800e1f4:	fa02 f303 	lsl.w	r3, r2, r3
 800e1f8:	69ba      	ldr	r2, [r7, #24]
 800e1fa:	4313      	orrs	r3, r2
 800e1fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	69ba      	ldr	r2, [r7, #24]
 800e202:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	685b      	ldr	r3, [r3, #4]
 800e208:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800e20a:	2201      	movs	r2, #1
 800e20c:	69fb      	ldr	r3, [r7, #28]
 800e20e:	fa02 f303 	lsl.w	r3, r2, r3
 800e212:	43db      	mvns	r3, r3
 800e214:	69ba      	ldr	r2, [r7, #24]
 800e216:	4013      	ands	r3, r2
 800e218:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800e21a:	683b      	ldr	r3, [r7, #0]
 800e21c:	685b      	ldr	r3, [r3, #4]
 800e21e:	091b      	lsrs	r3, r3, #4
 800e220:	f003 0201 	and.w	r2, r3, #1
 800e224:	69fb      	ldr	r3, [r7, #28]
 800e226:	fa02 f303 	lsl.w	r3, r2, r3
 800e22a:	69ba      	ldr	r2, [r7, #24]
 800e22c:	4313      	orrs	r3, r2
 800e22e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	69ba      	ldr	r2, [r7, #24]
 800e234:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800e236:	683b      	ldr	r3, [r7, #0]
 800e238:	685b      	ldr	r3, [r3, #4]
 800e23a:	f003 0303 	and.w	r3, r3, #3
 800e23e:	2b03      	cmp	r3, #3
 800e240:	d017      	beq.n	800e272 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	68db      	ldr	r3, [r3, #12]
 800e246:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800e248:	69fb      	ldr	r3, [r7, #28]
 800e24a:	005b      	lsls	r3, r3, #1
 800e24c:	2203      	movs	r2, #3
 800e24e:	fa02 f303 	lsl.w	r3, r2, r3
 800e252:	43db      	mvns	r3, r3
 800e254:	69ba      	ldr	r2, [r7, #24]
 800e256:	4013      	ands	r3, r2
 800e258:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800e25a:	683b      	ldr	r3, [r7, #0]
 800e25c:	689a      	ldr	r2, [r3, #8]
 800e25e:	69fb      	ldr	r3, [r7, #28]
 800e260:	005b      	lsls	r3, r3, #1
 800e262:	fa02 f303 	lsl.w	r3, r2, r3
 800e266:	69ba      	ldr	r2, [r7, #24]
 800e268:	4313      	orrs	r3, r2
 800e26a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	69ba      	ldr	r2, [r7, #24]
 800e270:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800e272:	683b      	ldr	r3, [r7, #0]
 800e274:	685b      	ldr	r3, [r3, #4]
 800e276:	f003 0303 	and.w	r3, r3, #3
 800e27a:	2b02      	cmp	r3, #2
 800e27c:	d123      	bne.n	800e2c6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800e27e:	69fb      	ldr	r3, [r7, #28]
 800e280:	08da      	lsrs	r2, r3, #3
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	3208      	adds	r2, #8
 800e286:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e28a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800e28c:	69fb      	ldr	r3, [r7, #28]
 800e28e:	f003 0307 	and.w	r3, r3, #7
 800e292:	009b      	lsls	r3, r3, #2
 800e294:	220f      	movs	r2, #15
 800e296:	fa02 f303 	lsl.w	r3, r2, r3
 800e29a:	43db      	mvns	r3, r3
 800e29c:	69ba      	ldr	r2, [r7, #24]
 800e29e:	4013      	ands	r3, r2
 800e2a0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800e2a2:	683b      	ldr	r3, [r7, #0]
 800e2a4:	691a      	ldr	r2, [r3, #16]
 800e2a6:	69fb      	ldr	r3, [r7, #28]
 800e2a8:	f003 0307 	and.w	r3, r3, #7
 800e2ac:	009b      	lsls	r3, r3, #2
 800e2ae:	fa02 f303 	lsl.w	r3, r2, r3
 800e2b2:	69ba      	ldr	r2, [r7, #24]
 800e2b4:	4313      	orrs	r3, r2
 800e2b6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800e2b8:	69fb      	ldr	r3, [r7, #28]
 800e2ba:	08da      	lsrs	r2, r3, #3
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	3208      	adds	r2, #8
 800e2c0:	69b9      	ldr	r1, [r7, #24]
 800e2c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	681b      	ldr	r3, [r3, #0]
 800e2ca:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800e2cc:	69fb      	ldr	r3, [r7, #28]
 800e2ce:	005b      	lsls	r3, r3, #1
 800e2d0:	2203      	movs	r2, #3
 800e2d2:	fa02 f303 	lsl.w	r3, r2, r3
 800e2d6:	43db      	mvns	r3, r3
 800e2d8:	69ba      	ldr	r2, [r7, #24]
 800e2da:	4013      	ands	r3, r2
 800e2dc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800e2de:	683b      	ldr	r3, [r7, #0]
 800e2e0:	685b      	ldr	r3, [r3, #4]
 800e2e2:	f003 0203 	and.w	r2, r3, #3
 800e2e6:	69fb      	ldr	r3, [r7, #28]
 800e2e8:	005b      	lsls	r3, r3, #1
 800e2ea:	fa02 f303 	lsl.w	r3, r2, r3
 800e2ee:	69ba      	ldr	r2, [r7, #24]
 800e2f0:	4313      	orrs	r3, r2
 800e2f2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	69ba      	ldr	r2, [r7, #24]
 800e2f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800e2fa:	683b      	ldr	r3, [r7, #0]
 800e2fc:	685b      	ldr	r3, [r3, #4]
 800e2fe:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800e302:	2b00      	cmp	r3, #0
 800e304:	f000 80d8 	beq.w	800e4b8 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800e308:	4b2c      	ldr	r3, [pc, #176]	@ (800e3bc <HAL_GPIO_Init+0x22c>)
 800e30a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800e30e:	4a2b      	ldr	r2, [pc, #172]	@ (800e3bc <HAL_GPIO_Init+0x22c>)
 800e310:	f043 0302 	orr.w	r3, r3, #2
 800e314:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800e318:	4b28      	ldr	r3, [pc, #160]	@ (800e3bc <HAL_GPIO_Init+0x22c>)
 800e31a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800e31e:	f003 0302 	and.w	r3, r3, #2
 800e322:	60fb      	str	r3, [r7, #12]
 800e324:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800e326:	4a26      	ldr	r2, [pc, #152]	@ (800e3c0 <HAL_GPIO_Init+0x230>)
 800e328:	69fb      	ldr	r3, [r7, #28]
 800e32a:	089b      	lsrs	r3, r3, #2
 800e32c:	3302      	adds	r3, #2
 800e32e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e332:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800e334:	69fb      	ldr	r3, [r7, #28]
 800e336:	f003 0303 	and.w	r3, r3, #3
 800e33a:	009b      	lsls	r3, r3, #2
 800e33c:	220f      	movs	r2, #15
 800e33e:	fa02 f303 	lsl.w	r3, r2, r3
 800e342:	43db      	mvns	r3, r3
 800e344:	69ba      	ldr	r2, [r7, #24]
 800e346:	4013      	ands	r3, r2
 800e348:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	4a1d      	ldr	r2, [pc, #116]	@ (800e3c4 <HAL_GPIO_Init+0x234>)
 800e34e:	4293      	cmp	r3, r2
 800e350:	d04a      	beq.n	800e3e8 <HAL_GPIO_Init+0x258>
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	4a1c      	ldr	r2, [pc, #112]	@ (800e3c8 <HAL_GPIO_Init+0x238>)
 800e356:	4293      	cmp	r3, r2
 800e358:	d02b      	beq.n	800e3b2 <HAL_GPIO_Init+0x222>
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	4a1b      	ldr	r2, [pc, #108]	@ (800e3cc <HAL_GPIO_Init+0x23c>)
 800e35e:	4293      	cmp	r3, r2
 800e360:	d025      	beq.n	800e3ae <HAL_GPIO_Init+0x21e>
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	4a1a      	ldr	r2, [pc, #104]	@ (800e3d0 <HAL_GPIO_Init+0x240>)
 800e366:	4293      	cmp	r3, r2
 800e368:	d01f      	beq.n	800e3aa <HAL_GPIO_Init+0x21a>
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	4a19      	ldr	r2, [pc, #100]	@ (800e3d4 <HAL_GPIO_Init+0x244>)
 800e36e:	4293      	cmp	r3, r2
 800e370:	d019      	beq.n	800e3a6 <HAL_GPIO_Init+0x216>
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	4a18      	ldr	r2, [pc, #96]	@ (800e3d8 <HAL_GPIO_Init+0x248>)
 800e376:	4293      	cmp	r3, r2
 800e378:	d013      	beq.n	800e3a2 <HAL_GPIO_Init+0x212>
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	4a17      	ldr	r2, [pc, #92]	@ (800e3dc <HAL_GPIO_Init+0x24c>)
 800e37e:	4293      	cmp	r3, r2
 800e380:	d00d      	beq.n	800e39e <HAL_GPIO_Init+0x20e>
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	4a16      	ldr	r2, [pc, #88]	@ (800e3e0 <HAL_GPIO_Init+0x250>)
 800e386:	4293      	cmp	r3, r2
 800e388:	d007      	beq.n	800e39a <HAL_GPIO_Init+0x20a>
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	4a15      	ldr	r2, [pc, #84]	@ (800e3e4 <HAL_GPIO_Init+0x254>)
 800e38e:	4293      	cmp	r3, r2
 800e390:	d101      	bne.n	800e396 <HAL_GPIO_Init+0x206>
 800e392:	2309      	movs	r3, #9
 800e394:	e029      	b.n	800e3ea <HAL_GPIO_Init+0x25a>
 800e396:	230a      	movs	r3, #10
 800e398:	e027      	b.n	800e3ea <HAL_GPIO_Init+0x25a>
 800e39a:	2307      	movs	r3, #7
 800e39c:	e025      	b.n	800e3ea <HAL_GPIO_Init+0x25a>
 800e39e:	2306      	movs	r3, #6
 800e3a0:	e023      	b.n	800e3ea <HAL_GPIO_Init+0x25a>
 800e3a2:	2305      	movs	r3, #5
 800e3a4:	e021      	b.n	800e3ea <HAL_GPIO_Init+0x25a>
 800e3a6:	2304      	movs	r3, #4
 800e3a8:	e01f      	b.n	800e3ea <HAL_GPIO_Init+0x25a>
 800e3aa:	2303      	movs	r3, #3
 800e3ac:	e01d      	b.n	800e3ea <HAL_GPIO_Init+0x25a>
 800e3ae:	2302      	movs	r3, #2
 800e3b0:	e01b      	b.n	800e3ea <HAL_GPIO_Init+0x25a>
 800e3b2:	2301      	movs	r3, #1
 800e3b4:	e019      	b.n	800e3ea <HAL_GPIO_Init+0x25a>
 800e3b6:	bf00      	nop
 800e3b8:	58000080 	.word	0x58000080
 800e3bc:	58024400 	.word	0x58024400
 800e3c0:	58000400 	.word	0x58000400
 800e3c4:	58020000 	.word	0x58020000
 800e3c8:	58020400 	.word	0x58020400
 800e3cc:	58020800 	.word	0x58020800
 800e3d0:	58020c00 	.word	0x58020c00
 800e3d4:	58021000 	.word	0x58021000
 800e3d8:	58021400 	.word	0x58021400
 800e3dc:	58021800 	.word	0x58021800
 800e3e0:	58021c00 	.word	0x58021c00
 800e3e4:	58022400 	.word	0x58022400
 800e3e8:	2300      	movs	r3, #0
 800e3ea:	69fa      	ldr	r2, [r7, #28]
 800e3ec:	f002 0203 	and.w	r2, r2, #3
 800e3f0:	0092      	lsls	r2, r2, #2
 800e3f2:	4093      	lsls	r3, r2
 800e3f4:	69ba      	ldr	r2, [r7, #24]
 800e3f6:	4313      	orrs	r3, r2
 800e3f8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800e3fa:	4938      	ldr	r1, [pc, #224]	@ (800e4dc <HAL_GPIO_Init+0x34c>)
 800e3fc:	69fb      	ldr	r3, [r7, #28]
 800e3fe:	089b      	lsrs	r3, r3, #2
 800e400:	3302      	adds	r3, #2
 800e402:	69ba      	ldr	r2, [r7, #24]
 800e404:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800e408:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e40c:	681b      	ldr	r3, [r3, #0]
 800e40e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800e410:	693b      	ldr	r3, [r7, #16]
 800e412:	43db      	mvns	r3, r3
 800e414:	69ba      	ldr	r2, [r7, #24]
 800e416:	4013      	ands	r3, r2
 800e418:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800e41a:	683b      	ldr	r3, [r7, #0]
 800e41c:	685b      	ldr	r3, [r3, #4]
 800e41e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800e422:	2b00      	cmp	r3, #0
 800e424:	d003      	beq.n	800e42e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800e426:	69ba      	ldr	r2, [r7, #24]
 800e428:	693b      	ldr	r3, [r7, #16]
 800e42a:	4313      	orrs	r3, r2
 800e42c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800e42e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800e432:	69bb      	ldr	r3, [r7, #24]
 800e434:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800e436:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e43a:	685b      	ldr	r3, [r3, #4]
 800e43c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800e43e:	693b      	ldr	r3, [r7, #16]
 800e440:	43db      	mvns	r3, r3
 800e442:	69ba      	ldr	r2, [r7, #24]
 800e444:	4013      	ands	r3, r2
 800e446:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800e448:	683b      	ldr	r3, [r7, #0]
 800e44a:	685b      	ldr	r3, [r3, #4]
 800e44c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800e450:	2b00      	cmp	r3, #0
 800e452:	d003      	beq.n	800e45c <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 800e454:	69ba      	ldr	r2, [r7, #24]
 800e456:	693b      	ldr	r3, [r7, #16]
 800e458:	4313      	orrs	r3, r2
 800e45a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800e45c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800e460:	69bb      	ldr	r3, [r7, #24]
 800e462:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800e464:	697b      	ldr	r3, [r7, #20]
 800e466:	685b      	ldr	r3, [r3, #4]
 800e468:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800e46a:	693b      	ldr	r3, [r7, #16]
 800e46c:	43db      	mvns	r3, r3
 800e46e:	69ba      	ldr	r2, [r7, #24]
 800e470:	4013      	ands	r3, r2
 800e472:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800e474:	683b      	ldr	r3, [r7, #0]
 800e476:	685b      	ldr	r3, [r3, #4]
 800e478:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	d003      	beq.n	800e488 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 800e480:	69ba      	ldr	r2, [r7, #24]
 800e482:	693b      	ldr	r3, [r7, #16]
 800e484:	4313      	orrs	r3, r2
 800e486:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800e488:	697b      	ldr	r3, [r7, #20]
 800e48a:	69ba      	ldr	r2, [r7, #24]
 800e48c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800e48e:	697b      	ldr	r3, [r7, #20]
 800e490:	681b      	ldr	r3, [r3, #0]
 800e492:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800e494:	693b      	ldr	r3, [r7, #16]
 800e496:	43db      	mvns	r3, r3
 800e498:	69ba      	ldr	r2, [r7, #24]
 800e49a:	4013      	ands	r3, r2
 800e49c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800e49e:	683b      	ldr	r3, [r7, #0]
 800e4a0:	685b      	ldr	r3, [r3, #4]
 800e4a2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800e4a6:	2b00      	cmp	r3, #0
 800e4a8:	d003      	beq.n	800e4b2 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800e4aa:	69ba      	ldr	r2, [r7, #24]
 800e4ac:	693b      	ldr	r3, [r7, #16]
 800e4ae:	4313      	orrs	r3, r2
 800e4b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800e4b2:	697b      	ldr	r3, [r7, #20]
 800e4b4:	69ba      	ldr	r2, [r7, #24]
 800e4b6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800e4b8:	69fb      	ldr	r3, [r7, #28]
 800e4ba:	3301      	adds	r3, #1
 800e4bc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800e4be:	683b      	ldr	r3, [r7, #0]
 800e4c0:	681a      	ldr	r2, [r3, #0]
 800e4c2:	69fb      	ldr	r3, [r7, #28]
 800e4c4:	fa22 f303 	lsr.w	r3, r2, r3
 800e4c8:	2b00      	cmp	r3, #0
 800e4ca:	f47f ae6b 	bne.w	800e1a4 <HAL_GPIO_Init+0x14>
  }
}
 800e4ce:	bf00      	nop
 800e4d0:	bf00      	nop
 800e4d2:	3724      	adds	r7, #36	@ 0x24
 800e4d4:	46bd      	mov	sp, r7
 800e4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4da:	4770      	bx	lr
 800e4dc:	58000400 	.word	0x58000400

0800e4e0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800e4e0:	b480      	push	{r7}
 800e4e2:	b085      	sub	sp, #20
 800e4e4:	af00      	add	r7, sp, #0
 800e4e6:	6078      	str	r0, [r7, #4]
 800e4e8:	460b      	mov	r3, r1
 800e4ea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	691a      	ldr	r2, [r3, #16]
 800e4f0:	887b      	ldrh	r3, [r7, #2]
 800e4f2:	4013      	ands	r3, r2
 800e4f4:	2b00      	cmp	r3, #0
 800e4f6:	d002      	beq.n	800e4fe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800e4f8:	2301      	movs	r3, #1
 800e4fa:	73fb      	strb	r3, [r7, #15]
 800e4fc:	e001      	b.n	800e502 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800e4fe:	2300      	movs	r3, #0
 800e500:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800e502:	7bfb      	ldrb	r3, [r7, #15]
}
 800e504:	4618      	mov	r0, r3
 800e506:	3714      	adds	r7, #20
 800e508:	46bd      	mov	sp, r7
 800e50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e50e:	4770      	bx	lr

0800e510 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800e510:	b480      	push	{r7}
 800e512:	b083      	sub	sp, #12
 800e514:	af00      	add	r7, sp, #0
 800e516:	6078      	str	r0, [r7, #4]
 800e518:	460b      	mov	r3, r1
 800e51a:	807b      	strh	r3, [r7, #2]
 800e51c:	4613      	mov	r3, r2
 800e51e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800e520:	787b      	ldrb	r3, [r7, #1]
 800e522:	2b00      	cmp	r3, #0
 800e524:	d003      	beq.n	800e52e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800e526:	887a      	ldrh	r2, [r7, #2]
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800e52c:	e003      	b.n	800e536 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800e52e:	887b      	ldrh	r3, [r7, #2]
 800e530:	041a      	lsls	r2, r3, #16
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	619a      	str	r2, [r3, #24]
}
 800e536:	bf00      	nop
 800e538:	370c      	adds	r7, #12
 800e53a:	46bd      	mov	sp, r7
 800e53c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e540:	4770      	bx	lr

0800e542 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800e542:	b580      	push	{r7, lr}
 800e544:	b082      	sub	sp, #8
 800e546:	af00      	add	r7, sp, #0
 800e548:	4603      	mov	r3, r0
 800e54a:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 800e54c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e550:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800e554:	88fb      	ldrh	r3, [r7, #6]
 800e556:	4013      	ands	r3, r2
 800e558:	2b00      	cmp	r3, #0
 800e55a:	d008      	beq.n	800e56e <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800e55c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800e560:	88fb      	ldrh	r3, [r7, #6]
 800e562:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800e566:	88fb      	ldrh	r3, [r7, #6]
 800e568:	4618      	mov	r0, r3
 800e56a:	f7f7 fd45 	bl	8005ff8 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800e56e:	bf00      	nop
 800e570:	3708      	adds	r7, #8
 800e572:	46bd      	mov	sp, r7
 800e574:	bd80      	pop	{r7, pc}
	...

0800e578 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800e578:	b580      	push	{r7, lr}
 800e57a:	b082      	sub	sp, #8
 800e57c:	af00      	add	r7, sp, #0
 800e57e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	2b00      	cmp	r3, #0
 800e584:	d101      	bne.n	800e58a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800e586:	2301      	movs	r3, #1
 800e588:	e08b      	b.n	800e6a2 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e590:	b2db      	uxtb	r3, r3
 800e592:	2b00      	cmp	r3, #0
 800e594:	d106      	bne.n	800e5a4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	2200      	movs	r2, #0
 800e59a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800e59e:	6878      	ldr	r0, [r7, #4]
 800e5a0:	f7f6 fb32 	bl	8004c08 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	2224      	movs	r2, #36	@ 0x24
 800e5a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	681b      	ldr	r3, [r3, #0]
 800e5b0:	681a      	ldr	r2, [r3, #0]
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	681b      	ldr	r3, [r3, #0]
 800e5b6:	f022 0201 	bic.w	r2, r2, #1
 800e5ba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	685a      	ldr	r2, [r3, #4]
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	681b      	ldr	r3, [r3, #0]
 800e5c4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800e5c8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	681b      	ldr	r3, [r3, #0]
 800e5ce:	689a      	ldr	r2, [r3, #8]
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	681b      	ldr	r3, [r3, #0]
 800e5d4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800e5d8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	68db      	ldr	r3, [r3, #12]
 800e5de:	2b01      	cmp	r3, #1
 800e5e0:	d107      	bne.n	800e5f2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	689a      	ldr	r2, [r3, #8]
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	681b      	ldr	r3, [r3, #0]
 800e5ea:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800e5ee:	609a      	str	r2, [r3, #8]
 800e5f0:	e006      	b.n	800e600 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	689a      	ldr	r2, [r3, #8]
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	681b      	ldr	r3, [r3, #0]
 800e5fa:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800e5fe:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	68db      	ldr	r3, [r3, #12]
 800e604:	2b02      	cmp	r3, #2
 800e606:	d108      	bne.n	800e61a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	681b      	ldr	r3, [r3, #0]
 800e60c:	685a      	ldr	r2, [r3, #4]
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	681b      	ldr	r3, [r3, #0]
 800e612:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e616:	605a      	str	r2, [r3, #4]
 800e618:	e007      	b.n	800e62a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	681b      	ldr	r3, [r3, #0]
 800e61e:	685a      	ldr	r2, [r3, #4]
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	681b      	ldr	r3, [r3, #0]
 800e624:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800e628:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	681b      	ldr	r3, [r3, #0]
 800e62e:	6859      	ldr	r1, [r3, #4]
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	681a      	ldr	r2, [r3, #0]
 800e634:	4b1d      	ldr	r3, [pc, #116]	@ (800e6ac <HAL_I2C_Init+0x134>)
 800e636:	430b      	orrs	r3, r1
 800e638:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	681b      	ldr	r3, [r3, #0]
 800e63e:	68da      	ldr	r2, [r3, #12]
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	681b      	ldr	r3, [r3, #0]
 800e644:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800e648:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	691a      	ldr	r2, [r3, #16]
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	695b      	ldr	r3, [r3, #20]
 800e652:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	699b      	ldr	r3, [r3, #24]
 800e65a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	681b      	ldr	r3, [r3, #0]
 800e660:	430a      	orrs	r2, r1
 800e662:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	69d9      	ldr	r1, [r3, #28]
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	6a1a      	ldr	r2, [r3, #32]
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	681b      	ldr	r3, [r3, #0]
 800e670:	430a      	orrs	r2, r1
 800e672:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	681b      	ldr	r3, [r3, #0]
 800e678:	681a      	ldr	r2, [r3, #0]
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	681b      	ldr	r3, [r3, #0]
 800e67e:	f042 0201 	orr.w	r2, r2, #1
 800e682:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	2200      	movs	r2, #0
 800e688:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	2220      	movs	r2, #32
 800e68e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	2200      	movs	r2, #0
 800e696:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	2200      	movs	r2, #0
 800e69c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800e6a0:	2300      	movs	r3, #0
}
 800e6a2:	4618      	mov	r0, r3
 800e6a4:	3708      	adds	r7, #8
 800e6a6:	46bd      	mov	sp, r7
 800e6a8:	bd80      	pop	{r7, pc}
 800e6aa:	bf00      	nop
 800e6ac:	02008000 	.word	0x02008000

0800e6b0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e6b0:	b580      	push	{r7, lr}
 800e6b2:	b088      	sub	sp, #32
 800e6b4:	af02      	add	r7, sp, #8
 800e6b6:	60f8      	str	r0, [r7, #12]
 800e6b8:	4608      	mov	r0, r1
 800e6ba:	4611      	mov	r1, r2
 800e6bc:	461a      	mov	r2, r3
 800e6be:	4603      	mov	r3, r0
 800e6c0:	817b      	strh	r3, [r7, #10]
 800e6c2:	460b      	mov	r3, r1
 800e6c4:	813b      	strh	r3, [r7, #8]
 800e6c6:	4613      	mov	r3, r2
 800e6c8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800e6ca:	68fb      	ldr	r3, [r7, #12]
 800e6cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e6d0:	b2db      	uxtb	r3, r3
 800e6d2:	2b20      	cmp	r3, #32
 800e6d4:	f040 80f9 	bne.w	800e8ca <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800e6d8:	6a3b      	ldr	r3, [r7, #32]
 800e6da:	2b00      	cmp	r3, #0
 800e6dc:	d002      	beq.n	800e6e4 <HAL_I2C_Mem_Write+0x34>
 800e6de:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e6e0:	2b00      	cmp	r3, #0
 800e6e2:	d105      	bne.n	800e6f0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800e6e4:	68fb      	ldr	r3, [r7, #12]
 800e6e6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e6ea:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800e6ec:	2301      	movs	r3, #1
 800e6ee:	e0ed      	b.n	800e8cc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e6f0:	68fb      	ldr	r3, [r7, #12]
 800e6f2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800e6f6:	2b01      	cmp	r3, #1
 800e6f8:	d101      	bne.n	800e6fe <HAL_I2C_Mem_Write+0x4e>
 800e6fa:	2302      	movs	r3, #2
 800e6fc:	e0e6      	b.n	800e8cc <HAL_I2C_Mem_Write+0x21c>
 800e6fe:	68fb      	ldr	r3, [r7, #12]
 800e700:	2201      	movs	r2, #1
 800e702:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800e706:	f7fa fd99 	bl	800923c <HAL_GetTick>
 800e70a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800e70c:	697b      	ldr	r3, [r7, #20]
 800e70e:	9300      	str	r3, [sp, #0]
 800e710:	2319      	movs	r3, #25
 800e712:	2201      	movs	r2, #1
 800e714:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800e718:	68f8      	ldr	r0, [r7, #12]
 800e71a:	f002 f818 	bl	801074e <I2C_WaitOnFlagUntilTimeout>
 800e71e:	4603      	mov	r3, r0
 800e720:	2b00      	cmp	r3, #0
 800e722:	d001      	beq.n	800e728 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800e724:	2301      	movs	r3, #1
 800e726:	e0d1      	b.n	800e8cc <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800e728:	68fb      	ldr	r3, [r7, #12]
 800e72a:	2221      	movs	r2, #33	@ 0x21
 800e72c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800e730:	68fb      	ldr	r3, [r7, #12]
 800e732:	2240      	movs	r2, #64	@ 0x40
 800e734:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e738:	68fb      	ldr	r3, [r7, #12]
 800e73a:	2200      	movs	r2, #0
 800e73c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800e73e:	68fb      	ldr	r3, [r7, #12]
 800e740:	6a3a      	ldr	r2, [r7, #32]
 800e742:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800e744:	68fb      	ldr	r3, [r7, #12]
 800e746:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800e748:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800e74a:	68fb      	ldr	r3, [r7, #12]
 800e74c:	2200      	movs	r2, #0
 800e74e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800e750:	88f8      	ldrh	r0, [r7, #6]
 800e752:	893a      	ldrh	r2, [r7, #8]
 800e754:	8979      	ldrh	r1, [r7, #10]
 800e756:	697b      	ldr	r3, [r7, #20]
 800e758:	9301      	str	r3, [sp, #4]
 800e75a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e75c:	9300      	str	r3, [sp, #0]
 800e75e:	4603      	mov	r3, r0
 800e760:	68f8      	ldr	r0, [r7, #12]
 800e762:	f001 f965 	bl	800fa30 <I2C_RequestMemoryWrite>
 800e766:	4603      	mov	r3, r0
 800e768:	2b00      	cmp	r3, #0
 800e76a:	d005      	beq.n	800e778 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800e76c:	68fb      	ldr	r3, [r7, #12]
 800e76e:	2200      	movs	r2, #0
 800e770:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800e774:	2301      	movs	r3, #1
 800e776:	e0a9      	b.n	800e8cc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800e778:	68fb      	ldr	r3, [r7, #12]
 800e77a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e77c:	b29b      	uxth	r3, r3
 800e77e:	2bff      	cmp	r3, #255	@ 0xff
 800e780:	d90e      	bls.n	800e7a0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800e782:	68fb      	ldr	r3, [r7, #12]
 800e784:	22ff      	movs	r2, #255	@ 0xff
 800e786:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800e788:	68fb      	ldr	r3, [r7, #12]
 800e78a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e78c:	b2da      	uxtb	r2, r3
 800e78e:	8979      	ldrh	r1, [r7, #10]
 800e790:	2300      	movs	r3, #0
 800e792:	9300      	str	r3, [sp, #0]
 800e794:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800e798:	68f8      	ldr	r0, [r7, #12]
 800e79a:	f002 f99b 	bl	8010ad4 <I2C_TransferConfig>
 800e79e:	e00f      	b.n	800e7c0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800e7a0:	68fb      	ldr	r3, [r7, #12]
 800e7a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e7a4:	b29a      	uxth	r2, r3
 800e7a6:	68fb      	ldr	r3, [r7, #12]
 800e7a8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800e7aa:	68fb      	ldr	r3, [r7, #12]
 800e7ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e7ae:	b2da      	uxtb	r2, r3
 800e7b0:	8979      	ldrh	r1, [r7, #10]
 800e7b2:	2300      	movs	r3, #0
 800e7b4:	9300      	str	r3, [sp, #0]
 800e7b6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800e7ba:	68f8      	ldr	r0, [r7, #12]
 800e7bc:	f002 f98a 	bl	8010ad4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800e7c0:	697a      	ldr	r2, [r7, #20]
 800e7c2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e7c4:	68f8      	ldr	r0, [r7, #12]
 800e7c6:	f002 f81b 	bl	8010800 <I2C_WaitOnTXISFlagUntilTimeout>
 800e7ca:	4603      	mov	r3, r0
 800e7cc:	2b00      	cmp	r3, #0
 800e7ce:	d001      	beq.n	800e7d4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800e7d0:	2301      	movs	r3, #1
 800e7d2:	e07b      	b.n	800e8cc <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800e7d4:	68fb      	ldr	r3, [r7, #12]
 800e7d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e7d8:	781a      	ldrb	r2, [r3, #0]
 800e7da:	68fb      	ldr	r3, [r7, #12]
 800e7dc:	681b      	ldr	r3, [r3, #0]
 800e7de:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800e7e0:	68fb      	ldr	r3, [r7, #12]
 800e7e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e7e4:	1c5a      	adds	r2, r3, #1
 800e7e6:	68fb      	ldr	r3, [r7, #12]
 800e7e8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800e7ea:	68fb      	ldr	r3, [r7, #12]
 800e7ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e7ee:	b29b      	uxth	r3, r3
 800e7f0:	3b01      	subs	r3, #1
 800e7f2:	b29a      	uxth	r2, r3
 800e7f4:	68fb      	ldr	r3, [r7, #12]
 800e7f6:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800e7f8:	68fb      	ldr	r3, [r7, #12]
 800e7fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e7fc:	3b01      	subs	r3, #1
 800e7fe:	b29a      	uxth	r2, r3
 800e800:	68fb      	ldr	r3, [r7, #12]
 800e802:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800e804:	68fb      	ldr	r3, [r7, #12]
 800e806:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e808:	b29b      	uxth	r3, r3
 800e80a:	2b00      	cmp	r3, #0
 800e80c:	d034      	beq.n	800e878 <HAL_I2C_Mem_Write+0x1c8>
 800e80e:	68fb      	ldr	r3, [r7, #12]
 800e810:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e812:	2b00      	cmp	r3, #0
 800e814:	d130      	bne.n	800e878 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800e816:	697b      	ldr	r3, [r7, #20]
 800e818:	9300      	str	r3, [sp, #0]
 800e81a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e81c:	2200      	movs	r2, #0
 800e81e:	2180      	movs	r1, #128	@ 0x80
 800e820:	68f8      	ldr	r0, [r7, #12]
 800e822:	f001 ff94 	bl	801074e <I2C_WaitOnFlagUntilTimeout>
 800e826:	4603      	mov	r3, r0
 800e828:	2b00      	cmp	r3, #0
 800e82a:	d001      	beq.n	800e830 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800e82c:	2301      	movs	r3, #1
 800e82e:	e04d      	b.n	800e8cc <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800e830:	68fb      	ldr	r3, [r7, #12]
 800e832:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e834:	b29b      	uxth	r3, r3
 800e836:	2bff      	cmp	r3, #255	@ 0xff
 800e838:	d90e      	bls.n	800e858 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800e83a:	68fb      	ldr	r3, [r7, #12]
 800e83c:	22ff      	movs	r2, #255	@ 0xff
 800e83e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800e840:	68fb      	ldr	r3, [r7, #12]
 800e842:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e844:	b2da      	uxtb	r2, r3
 800e846:	8979      	ldrh	r1, [r7, #10]
 800e848:	2300      	movs	r3, #0
 800e84a:	9300      	str	r3, [sp, #0]
 800e84c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800e850:	68f8      	ldr	r0, [r7, #12]
 800e852:	f002 f93f 	bl	8010ad4 <I2C_TransferConfig>
 800e856:	e00f      	b.n	800e878 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800e858:	68fb      	ldr	r3, [r7, #12]
 800e85a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e85c:	b29a      	uxth	r2, r3
 800e85e:	68fb      	ldr	r3, [r7, #12]
 800e860:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800e862:	68fb      	ldr	r3, [r7, #12]
 800e864:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e866:	b2da      	uxtb	r2, r3
 800e868:	8979      	ldrh	r1, [r7, #10]
 800e86a:	2300      	movs	r3, #0
 800e86c:	9300      	str	r3, [sp, #0]
 800e86e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800e872:	68f8      	ldr	r0, [r7, #12]
 800e874:	f002 f92e 	bl	8010ad4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800e878:	68fb      	ldr	r3, [r7, #12]
 800e87a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e87c:	b29b      	uxth	r3, r3
 800e87e:	2b00      	cmp	r3, #0
 800e880:	d19e      	bne.n	800e7c0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800e882:	697a      	ldr	r2, [r7, #20]
 800e884:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e886:	68f8      	ldr	r0, [r7, #12]
 800e888:	f002 f801 	bl	801088e <I2C_WaitOnSTOPFlagUntilTimeout>
 800e88c:	4603      	mov	r3, r0
 800e88e:	2b00      	cmp	r3, #0
 800e890:	d001      	beq.n	800e896 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800e892:	2301      	movs	r3, #1
 800e894:	e01a      	b.n	800e8cc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800e896:	68fb      	ldr	r3, [r7, #12]
 800e898:	681b      	ldr	r3, [r3, #0]
 800e89a:	2220      	movs	r2, #32
 800e89c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800e89e:	68fb      	ldr	r3, [r7, #12]
 800e8a0:	681b      	ldr	r3, [r3, #0]
 800e8a2:	6859      	ldr	r1, [r3, #4]
 800e8a4:	68fb      	ldr	r3, [r7, #12]
 800e8a6:	681a      	ldr	r2, [r3, #0]
 800e8a8:	4b0a      	ldr	r3, [pc, #40]	@ (800e8d4 <HAL_I2C_Mem_Write+0x224>)
 800e8aa:	400b      	ands	r3, r1
 800e8ac:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800e8ae:	68fb      	ldr	r3, [r7, #12]
 800e8b0:	2220      	movs	r2, #32
 800e8b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800e8b6:	68fb      	ldr	r3, [r7, #12]
 800e8b8:	2200      	movs	r2, #0
 800e8ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e8be:	68fb      	ldr	r3, [r7, #12]
 800e8c0:	2200      	movs	r2, #0
 800e8c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800e8c6:	2300      	movs	r3, #0
 800e8c8:	e000      	b.n	800e8cc <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800e8ca:	2302      	movs	r3, #2
  }
}
 800e8cc:	4618      	mov	r0, r3
 800e8ce:	3718      	adds	r7, #24
 800e8d0:	46bd      	mov	sp, r7
 800e8d2:	bd80      	pop	{r7, pc}
 800e8d4:	fe00e800 	.word	0xfe00e800

0800e8d8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e8d8:	b580      	push	{r7, lr}
 800e8da:	b088      	sub	sp, #32
 800e8dc:	af02      	add	r7, sp, #8
 800e8de:	60f8      	str	r0, [r7, #12]
 800e8e0:	4608      	mov	r0, r1
 800e8e2:	4611      	mov	r1, r2
 800e8e4:	461a      	mov	r2, r3
 800e8e6:	4603      	mov	r3, r0
 800e8e8:	817b      	strh	r3, [r7, #10]
 800e8ea:	460b      	mov	r3, r1
 800e8ec:	813b      	strh	r3, [r7, #8]
 800e8ee:	4613      	mov	r3, r2
 800e8f0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800e8f2:	68fb      	ldr	r3, [r7, #12]
 800e8f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e8f8:	b2db      	uxtb	r3, r3
 800e8fa:	2b20      	cmp	r3, #32
 800e8fc:	f040 80fd 	bne.w	800eafa <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800e900:	6a3b      	ldr	r3, [r7, #32]
 800e902:	2b00      	cmp	r3, #0
 800e904:	d002      	beq.n	800e90c <HAL_I2C_Mem_Read+0x34>
 800e906:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e908:	2b00      	cmp	r3, #0
 800e90a:	d105      	bne.n	800e918 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800e90c:	68fb      	ldr	r3, [r7, #12]
 800e90e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e912:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800e914:	2301      	movs	r3, #1
 800e916:	e0f1      	b.n	800eafc <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e918:	68fb      	ldr	r3, [r7, #12]
 800e91a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800e91e:	2b01      	cmp	r3, #1
 800e920:	d101      	bne.n	800e926 <HAL_I2C_Mem_Read+0x4e>
 800e922:	2302      	movs	r3, #2
 800e924:	e0ea      	b.n	800eafc <HAL_I2C_Mem_Read+0x224>
 800e926:	68fb      	ldr	r3, [r7, #12]
 800e928:	2201      	movs	r2, #1
 800e92a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800e92e:	f7fa fc85 	bl	800923c <HAL_GetTick>
 800e932:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800e934:	697b      	ldr	r3, [r7, #20]
 800e936:	9300      	str	r3, [sp, #0]
 800e938:	2319      	movs	r3, #25
 800e93a:	2201      	movs	r2, #1
 800e93c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800e940:	68f8      	ldr	r0, [r7, #12]
 800e942:	f001 ff04 	bl	801074e <I2C_WaitOnFlagUntilTimeout>
 800e946:	4603      	mov	r3, r0
 800e948:	2b00      	cmp	r3, #0
 800e94a:	d001      	beq.n	800e950 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800e94c:	2301      	movs	r3, #1
 800e94e:	e0d5      	b.n	800eafc <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800e950:	68fb      	ldr	r3, [r7, #12]
 800e952:	2222      	movs	r2, #34	@ 0x22
 800e954:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800e958:	68fb      	ldr	r3, [r7, #12]
 800e95a:	2240      	movs	r2, #64	@ 0x40
 800e95c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e960:	68fb      	ldr	r3, [r7, #12]
 800e962:	2200      	movs	r2, #0
 800e964:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800e966:	68fb      	ldr	r3, [r7, #12]
 800e968:	6a3a      	ldr	r2, [r7, #32]
 800e96a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800e96c:	68fb      	ldr	r3, [r7, #12]
 800e96e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800e970:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800e972:	68fb      	ldr	r3, [r7, #12]
 800e974:	2200      	movs	r2, #0
 800e976:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800e978:	88f8      	ldrh	r0, [r7, #6]
 800e97a:	893a      	ldrh	r2, [r7, #8]
 800e97c:	8979      	ldrh	r1, [r7, #10]
 800e97e:	697b      	ldr	r3, [r7, #20]
 800e980:	9301      	str	r3, [sp, #4]
 800e982:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e984:	9300      	str	r3, [sp, #0]
 800e986:	4603      	mov	r3, r0
 800e988:	68f8      	ldr	r0, [r7, #12]
 800e98a:	f001 f8a5 	bl	800fad8 <I2C_RequestMemoryRead>
 800e98e:	4603      	mov	r3, r0
 800e990:	2b00      	cmp	r3, #0
 800e992:	d005      	beq.n	800e9a0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800e994:	68fb      	ldr	r3, [r7, #12]
 800e996:	2200      	movs	r2, #0
 800e998:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800e99c:	2301      	movs	r3, #1
 800e99e:	e0ad      	b.n	800eafc <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800e9a0:	68fb      	ldr	r3, [r7, #12]
 800e9a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e9a4:	b29b      	uxth	r3, r3
 800e9a6:	2bff      	cmp	r3, #255	@ 0xff
 800e9a8:	d90e      	bls.n	800e9c8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800e9aa:	68fb      	ldr	r3, [r7, #12]
 800e9ac:	22ff      	movs	r2, #255	@ 0xff
 800e9ae:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800e9b0:	68fb      	ldr	r3, [r7, #12]
 800e9b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e9b4:	b2da      	uxtb	r2, r3
 800e9b6:	8979      	ldrh	r1, [r7, #10]
 800e9b8:	4b52      	ldr	r3, [pc, #328]	@ (800eb04 <HAL_I2C_Mem_Read+0x22c>)
 800e9ba:	9300      	str	r3, [sp, #0]
 800e9bc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800e9c0:	68f8      	ldr	r0, [r7, #12]
 800e9c2:	f002 f887 	bl	8010ad4 <I2C_TransferConfig>
 800e9c6:	e00f      	b.n	800e9e8 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800e9c8:	68fb      	ldr	r3, [r7, #12]
 800e9ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e9cc:	b29a      	uxth	r2, r3
 800e9ce:	68fb      	ldr	r3, [r7, #12]
 800e9d0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800e9d2:	68fb      	ldr	r3, [r7, #12]
 800e9d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e9d6:	b2da      	uxtb	r2, r3
 800e9d8:	8979      	ldrh	r1, [r7, #10]
 800e9da:	4b4a      	ldr	r3, [pc, #296]	@ (800eb04 <HAL_I2C_Mem_Read+0x22c>)
 800e9dc:	9300      	str	r3, [sp, #0]
 800e9de:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800e9e2:	68f8      	ldr	r0, [r7, #12]
 800e9e4:	f002 f876 	bl	8010ad4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800e9e8:	697b      	ldr	r3, [r7, #20]
 800e9ea:	9300      	str	r3, [sp, #0]
 800e9ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e9ee:	2200      	movs	r2, #0
 800e9f0:	2104      	movs	r1, #4
 800e9f2:	68f8      	ldr	r0, [r7, #12]
 800e9f4:	f001 feab 	bl	801074e <I2C_WaitOnFlagUntilTimeout>
 800e9f8:	4603      	mov	r3, r0
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	d001      	beq.n	800ea02 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800e9fe:	2301      	movs	r3, #1
 800ea00:	e07c      	b.n	800eafc <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800ea02:	68fb      	ldr	r3, [r7, #12]
 800ea04:	681b      	ldr	r3, [r3, #0]
 800ea06:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ea08:	68fb      	ldr	r3, [r7, #12]
 800ea0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ea0c:	b2d2      	uxtb	r2, r2
 800ea0e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800ea10:	68fb      	ldr	r3, [r7, #12]
 800ea12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ea14:	1c5a      	adds	r2, r3, #1
 800ea16:	68fb      	ldr	r3, [r7, #12]
 800ea18:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800ea1a:	68fb      	ldr	r3, [r7, #12]
 800ea1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ea1e:	3b01      	subs	r3, #1
 800ea20:	b29a      	uxth	r2, r3
 800ea22:	68fb      	ldr	r3, [r7, #12]
 800ea24:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800ea26:	68fb      	ldr	r3, [r7, #12]
 800ea28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ea2a:	b29b      	uxth	r3, r3
 800ea2c:	3b01      	subs	r3, #1
 800ea2e:	b29a      	uxth	r2, r3
 800ea30:	68fb      	ldr	r3, [r7, #12]
 800ea32:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800ea34:	68fb      	ldr	r3, [r7, #12]
 800ea36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ea38:	b29b      	uxth	r3, r3
 800ea3a:	2b00      	cmp	r3, #0
 800ea3c:	d034      	beq.n	800eaa8 <HAL_I2C_Mem_Read+0x1d0>
 800ea3e:	68fb      	ldr	r3, [r7, #12]
 800ea40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ea42:	2b00      	cmp	r3, #0
 800ea44:	d130      	bne.n	800eaa8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800ea46:	697b      	ldr	r3, [r7, #20]
 800ea48:	9300      	str	r3, [sp, #0]
 800ea4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea4c:	2200      	movs	r2, #0
 800ea4e:	2180      	movs	r1, #128	@ 0x80
 800ea50:	68f8      	ldr	r0, [r7, #12]
 800ea52:	f001 fe7c 	bl	801074e <I2C_WaitOnFlagUntilTimeout>
 800ea56:	4603      	mov	r3, r0
 800ea58:	2b00      	cmp	r3, #0
 800ea5a:	d001      	beq.n	800ea60 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800ea5c:	2301      	movs	r3, #1
 800ea5e:	e04d      	b.n	800eafc <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ea60:	68fb      	ldr	r3, [r7, #12]
 800ea62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ea64:	b29b      	uxth	r3, r3
 800ea66:	2bff      	cmp	r3, #255	@ 0xff
 800ea68:	d90e      	bls.n	800ea88 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800ea6a:	68fb      	ldr	r3, [r7, #12]
 800ea6c:	22ff      	movs	r2, #255	@ 0xff
 800ea6e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800ea70:	68fb      	ldr	r3, [r7, #12]
 800ea72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ea74:	b2da      	uxtb	r2, r3
 800ea76:	8979      	ldrh	r1, [r7, #10]
 800ea78:	2300      	movs	r3, #0
 800ea7a:	9300      	str	r3, [sp, #0]
 800ea7c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800ea80:	68f8      	ldr	r0, [r7, #12]
 800ea82:	f002 f827 	bl	8010ad4 <I2C_TransferConfig>
 800ea86:	e00f      	b.n	800eaa8 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800ea88:	68fb      	ldr	r3, [r7, #12]
 800ea8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ea8c:	b29a      	uxth	r2, r3
 800ea8e:	68fb      	ldr	r3, [r7, #12]
 800ea90:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800ea92:	68fb      	ldr	r3, [r7, #12]
 800ea94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ea96:	b2da      	uxtb	r2, r3
 800ea98:	8979      	ldrh	r1, [r7, #10]
 800ea9a:	2300      	movs	r3, #0
 800ea9c:	9300      	str	r3, [sp, #0]
 800ea9e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800eaa2:	68f8      	ldr	r0, [r7, #12]
 800eaa4:	f002 f816 	bl	8010ad4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800eaa8:	68fb      	ldr	r3, [r7, #12]
 800eaaa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800eaac:	b29b      	uxth	r3, r3
 800eaae:	2b00      	cmp	r3, #0
 800eab0:	d19a      	bne.n	800e9e8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800eab2:	697a      	ldr	r2, [r7, #20]
 800eab4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800eab6:	68f8      	ldr	r0, [r7, #12]
 800eab8:	f001 fee9 	bl	801088e <I2C_WaitOnSTOPFlagUntilTimeout>
 800eabc:	4603      	mov	r3, r0
 800eabe:	2b00      	cmp	r3, #0
 800eac0:	d001      	beq.n	800eac6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800eac2:	2301      	movs	r3, #1
 800eac4:	e01a      	b.n	800eafc <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800eac6:	68fb      	ldr	r3, [r7, #12]
 800eac8:	681b      	ldr	r3, [r3, #0]
 800eaca:	2220      	movs	r2, #32
 800eacc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800eace:	68fb      	ldr	r3, [r7, #12]
 800ead0:	681b      	ldr	r3, [r3, #0]
 800ead2:	6859      	ldr	r1, [r3, #4]
 800ead4:	68fb      	ldr	r3, [r7, #12]
 800ead6:	681a      	ldr	r2, [r3, #0]
 800ead8:	4b0b      	ldr	r3, [pc, #44]	@ (800eb08 <HAL_I2C_Mem_Read+0x230>)
 800eada:	400b      	ands	r3, r1
 800eadc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800eade:	68fb      	ldr	r3, [r7, #12]
 800eae0:	2220      	movs	r2, #32
 800eae2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800eae6:	68fb      	ldr	r3, [r7, #12]
 800eae8:	2200      	movs	r2, #0
 800eaea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800eaee:	68fb      	ldr	r3, [r7, #12]
 800eaf0:	2200      	movs	r2, #0
 800eaf2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800eaf6:	2300      	movs	r3, #0
 800eaf8:	e000      	b.n	800eafc <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800eafa:	2302      	movs	r3, #2
  }
}
 800eafc:	4618      	mov	r0, r3
 800eafe:	3718      	adds	r7, #24
 800eb00:	46bd      	mov	sp, r7
 800eb02:	bd80      	pop	{r7, pc}
 800eb04:	80002400 	.word	0x80002400
 800eb08:	fe00e800 	.word	0xfe00e800

0800eb0c <HAL_I2C_Mem_Write_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                       uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 800eb0c:	b580      	push	{r7, lr}
 800eb0e:	b086      	sub	sp, #24
 800eb10:	af02      	add	r7, sp, #8
 800eb12:	60f8      	str	r0, [r7, #12]
 800eb14:	4608      	mov	r0, r1
 800eb16:	4611      	mov	r1, r2
 800eb18:	461a      	mov	r2, r3
 800eb1a:	4603      	mov	r3, r0
 800eb1c:	817b      	strh	r3, [r7, #10]
 800eb1e:	460b      	mov	r3, r1
 800eb20:	813b      	strh	r3, [r7, #8]
 800eb22:	4613      	mov	r3, r2
 800eb24:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800eb26:	68fb      	ldr	r3, [r7, #12]
 800eb28:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800eb2c:	b2db      	uxtb	r3, r3
 800eb2e:	2b20      	cmp	r3, #32
 800eb30:	d16a      	bne.n	800ec08 <HAL_I2C_Mem_Write_IT+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800eb32:	69bb      	ldr	r3, [r7, #24]
 800eb34:	2b00      	cmp	r3, #0
 800eb36:	d002      	beq.n	800eb3e <HAL_I2C_Mem_Write_IT+0x32>
 800eb38:	8bbb      	ldrh	r3, [r7, #28]
 800eb3a:	2b00      	cmp	r3, #0
 800eb3c:	d105      	bne.n	800eb4a <HAL_I2C_Mem_Write_IT+0x3e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800eb3e:	68fb      	ldr	r3, [r7, #12]
 800eb40:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800eb44:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800eb46:	2301      	movs	r3, #1
 800eb48:	e05f      	b.n	800ec0a <HAL_I2C_Mem_Write_IT+0xfe>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800eb4a:	68fb      	ldr	r3, [r7, #12]
 800eb4c:	681b      	ldr	r3, [r3, #0]
 800eb4e:	699b      	ldr	r3, [r3, #24]
 800eb50:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800eb54:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800eb58:	d101      	bne.n	800eb5e <HAL_I2C_Mem_Write_IT+0x52>
    {
      return HAL_BUSY;
 800eb5a:	2302      	movs	r3, #2
 800eb5c:	e055      	b.n	800ec0a <HAL_I2C_Mem_Write_IT+0xfe>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800eb5e:	68fb      	ldr	r3, [r7, #12]
 800eb60:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800eb64:	2b01      	cmp	r3, #1
 800eb66:	d101      	bne.n	800eb6c <HAL_I2C_Mem_Write_IT+0x60>
 800eb68:	2302      	movs	r3, #2
 800eb6a:	e04e      	b.n	800ec0a <HAL_I2C_Mem_Write_IT+0xfe>
 800eb6c:	68fb      	ldr	r3, [r7, #12]
 800eb6e:	2201      	movs	r2, #1
 800eb70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800eb74:	68fb      	ldr	r3, [r7, #12]
 800eb76:	2221      	movs	r2, #33	@ 0x21
 800eb78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 800eb7c:	68fb      	ldr	r3, [r7, #12]
 800eb7e:	2240      	movs	r2, #64	@ 0x40
 800eb80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800eb84:	68fb      	ldr	r3, [r7, #12]
 800eb86:	2200      	movs	r2, #0
 800eb88:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->XferSize    = 0U;
 800eb8a:	68fb      	ldr	r3, [r7, #12]
 800eb8c:	2200      	movs	r2, #0
 800eb8e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->pBuffPtr    = pData;
 800eb90:	68fb      	ldr	r3, [r7, #12]
 800eb92:	69ba      	ldr	r2, [r7, #24]
 800eb94:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800eb96:	68fb      	ldr	r3, [r7, #12]
 800eb98:	8bba      	ldrh	r2, [r7, #28]
 800eb9a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800eb9c:	68fb      	ldr	r3, [r7, #12]
 800eb9e:	4a1d      	ldr	r2, [pc, #116]	@ (800ec14 <HAL_I2C_Mem_Write_IT+0x108>)
 800eba0:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_IT;
 800eba2:	68fb      	ldr	r3, [r7, #12]
 800eba4:	4a1c      	ldr	r2, [pc, #112]	@ (800ec18 <HAL_I2C_Mem_Write_IT+0x10c>)
 800eba6:	635a      	str	r2, [r3, #52]	@ 0x34
    hi2c->Devaddress  = DevAddress;
 800eba8:	897a      	ldrh	r2, [r7, #10]
 800ebaa:	68fb      	ldr	r3, [r7, #12]
 800ebac:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800ebae:	88fb      	ldrh	r3, [r7, #6]
 800ebb0:	2b01      	cmp	r3, #1
 800ebb2:	d109      	bne.n	800ebc8 <HAL_I2C_Mem_Write_IT+0xbc>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800ebb4:	893b      	ldrh	r3, [r7, #8]
 800ebb6:	b2da      	uxtb	r2, r3
 800ebb8:	68fb      	ldr	r3, [r7, #12]
 800ebba:	681b      	ldr	r3, [r3, #0]
 800ebbc:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 800ebbe:	68fb      	ldr	r3, [r7, #12]
 800ebc0:	f04f 32ff 	mov.w	r2, #4294967295
 800ebc4:	651a      	str	r2, [r3, #80]	@ 0x50
 800ebc6:	e00b      	b.n	800ebe0 <HAL_I2C_Mem_Write_IT+0xd4>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800ebc8:	893b      	ldrh	r3, [r7, #8]
 800ebca:	0a1b      	lsrs	r3, r3, #8
 800ebcc:	b29b      	uxth	r3, r3
 800ebce:	b2da      	uxtb	r2, r3
 800ebd0:	68fb      	ldr	r3, [r7, #12]
 800ebd2:	681b      	ldr	r3, [r3, #0]
 800ebd4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 800ebd6:	893b      	ldrh	r3, [r7, #8]
 800ebd8:	b2db      	uxtb	r3, r3
 800ebda:	461a      	mov	r2, r3
 800ebdc:	68fb      	ldr	r3, [r7, #12]
 800ebde:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* Send Slave Address and Memory Address */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800ebe0:	88fb      	ldrh	r3, [r7, #6]
 800ebe2:	b2da      	uxtb	r2, r3
 800ebe4:	8979      	ldrh	r1, [r7, #10]
 800ebe6:	4b0d      	ldr	r3, [pc, #52]	@ (800ec1c <HAL_I2C_Mem_Write_IT+0x110>)
 800ebe8:	9300      	str	r3, [sp, #0]
 800ebea:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800ebee:	68f8      	ldr	r0, [r7, #12]
 800ebf0:	f001 ff70 	bl	8010ad4 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ebf4:	68fb      	ldr	r3, [r7, #12]
 800ebf6:	2200      	movs	r2, #0
 800ebf8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 800ebfc:	2101      	movs	r1, #1
 800ebfe:	68f8      	ldr	r0, [r7, #12]
 800ec00:	f001 ff9a 	bl	8010b38 <I2C_Enable_IRQ>

    return HAL_OK;
 800ec04:	2300      	movs	r3, #0
 800ec06:	e000      	b.n	800ec0a <HAL_I2C_Mem_Write_IT+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800ec08:	2302      	movs	r3, #2
  }
}
 800ec0a:	4618      	mov	r0, r3
 800ec0c:	3710      	adds	r7, #16
 800ec0e:	46bd      	mov	sp, r7
 800ec10:	bd80      	pop	{r7, pc}
 800ec12:	bf00      	nop
 800ec14:	ffff0000 	.word	0xffff0000
 800ec18:	0800ee1d 	.word	0x0800ee1d
 800ec1c:	80002000 	.word	0x80002000

0800ec20 <HAL_I2C_Mem_Read_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                      uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 800ec20:	b580      	push	{r7, lr}
 800ec22:	b086      	sub	sp, #24
 800ec24:	af02      	add	r7, sp, #8
 800ec26:	60f8      	str	r0, [r7, #12]
 800ec28:	4608      	mov	r0, r1
 800ec2a:	4611      	mov	r1, r2
 800ec2c:	461a      	mov	r2, r3
 800ec2e:	4603      	mov	r3, r0
 800ec30:	817b      	strh	r3, [r7, #10]
 800ec32:	460b      	mov	r3, r1
 800ec34:	813b      	strh	r3, [r7, #8]
 800ec36:	4613      	mov	r3, r2
 800ec38:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ec3a:	68fb      	ldr	r3, [r7, #12]
 800ec3c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ec40:	b2db      	uxtb	r3, r3
 800ec42:	2b20      	cmp	r3, #32
 800ec44:	d166      	bne.n	800ed14 <HAL_I2C_Mem_Read_IT+0xf4>
  {
    if ((pData == NULL) || (Size == 0U))
 800ec46:	69bb      	ldr	r3, [r7, #24]
 800ec48:	2b00      	cmp	r3, #0
 800ec4a:	d002      	beq.n	800ec52 <HAL_I2C_Mem_Read_IT+0x32>
 800ec4c:	8bbb      	ldrh	r3, [r7, #28]
 800ec4e:	2b00      	cmp	r3, #0
 800ec50:	d105      	bne.n	800ec5e <HAL_I2C_Mem_Read_IT+0x3e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800ec52:	68fb      	ldr	r3, [r7, #12]
 800ec54:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ec58:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800ec5a:	2301      	movs	r3, #1
 800ec5c:	e05b      	b.n	800ed16 <HAL_I2C_Mem_Read_IT+0xf6>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800ec5e:	68fb      	ldr	r3, [r7, #12]
 800ec60:	681b      	ldr	r3, [r3, #0]
 800ec62:	699b      	ldr	r3, [r3, #24]
 800ec64:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ec68:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ec6c:	d101      	bne.n	800ec72 <HAL_I2C_Mem_Read_IT+0x52>
    {
      return HAL_BUSY;
 800ec6e:	2302      	movs	r3, #2
 800ec70:	e051      	b.n	800ed16 <HAL_I2C_Mem_Read_IT+0xf6>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ec72:	68fb      	ldr	r3, [r7, #12]
 800ec74:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800ec78:	2b01      	cmp	r3, #1
 800ec7a:	d101      	bne.n	800ec80 <HAL_I2C_Mem_Read_IT+0x60>
 800ec7c:	2302      	movs	r3, #2
 800ec7e:	e04a      	b.n	800ed16 <HAL_I2C_Mem_Read_IT+0xf6>
 800ec80:	68fb      	ldr	r3, [r7, #12]
 800ec82:	2201      	movs	r2, #1
 800ec84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800ec88:	68fb      	ldr	r3, [r7, #12]
 800ec8a:	2222      	movs	r2, #34	@ 0x22
 800ec8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 800ec90:	68fb      	ldr	r3, [r7, #12]
 800ec92:	2240      	movs	r2, #64	@ 0x40
 800ec94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800ec98:	68fb      	ldr	r3, [r7, #12]
 800ec9a:	2200      	movs	r2, #0
 800ec9c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800ec9e:	68fb      	ldr	r3, [r7, #12]
 800eca0:	69ba      	ldr	r2, [r7, #24]
 800eca2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800eca4:	68fb      	ldr	r3, [r7, #12]
 800eca6:	8bba      	ldrh	r2, [r7, #28]
 800eca8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800ecaa:	68fb      	ldr	r3, [r7, #12]
 800ecac:	4a1c      	ldr	r2, [pc, #112]	@ (800ed20 <HAL_I2C_Mem_Read_IT+0x100>)
 800ecae:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_IT;
 800ecb0:	68fb      	ldr	r3, [r7, #12]
 800ecb2:	4a1c      	ldr	r2, [pc, #112]	@ (800ed24 <HAL_I2C_Mem_Read_IT+0x104>)
 800ecb4:	635a      	str	r2, [r3, #52]	@ 0x34
    hi2c->Devaddress  = DevAddress;
 800ecb6:	897a      	ldrh	r2, [r7, #10]
 800ecb8:	68fb      	ldr	r3, [r7, #12]
 800ecba:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800ecbc:	88fb      	ldrh	r3, [r7, #6]
 800ecbe:	2b01      	cmp	r3, #1
 800ecc0:	d109      	bne.n	800ecd6 <HAL_I2C_Mem_Read_IT+0xb6>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800ecc2:	893b      	ldrh	r3, [r7, #8]
 800ecc4:	b2da      	uxtb	r2, r3
 800ecc6:	68fb      	ldr	r3, [r7, #12]
 800ecc8:	681b      	ldr	r3, [r3, #0]
 800ecca:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 800eccc:	68fb      	ldr	r3, [r7, #12]
 800ecce:	f04f 32ff 	mov.w	r2, #4294967295
 800ecd2:	651a      	str	r2, [r3, #80]	@ 0x50
 800ecd4:	e00b      	b.n	800ecee <HAL_I2C_Mem_Read_IT+0xce>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800ecd6:	893b      	ldrh	r3, [r7, #8]
 800ecd8:	0a1b      	lsrs	r3, r3, #8
 800ecda:	b29b      	uxth	r3, r3
 800ecdc:	b2da      	uxtb	r2, r3
 800ecde:	68fb      	ldr	r3, [r7, #12]
 800ece0:	681b      	ldr	r3, [r3, #0]
 800ece2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 800ece4:	893b      	ldrh	r3, [r7, #8]
 800ece6:	b2db      	uxtb	r3, r3
 800ece8:	461a      	mov	r2, r3
 800ecea:	68fb      	ldr	r3, [r7, #12]
 800ecec:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* Send Slave Address and Memory Address */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800ecee:	88fb      	ldrh	r3, [r7, #6]
 800ecf0:	b2da      	uxtb	r2, r3
 800ecf2:	8979      	ldrh	r1, [r7, #10]
 800ecf4:	4b0c      	ldr	r3, [pc, #48]	@ (800ed28 <HAL_I2C_Mem_Read_IT+0x108>)
 800ecf6:	9300      	str	r3, [sp, #0]
 800ecf8:	2300      	movs	r3, #0
 800ecfa:	68f8      	ldr	r0, [r7, #12]
 800ecfc:	f001 feea 	bl	8010ad4 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ed00:	68fb      	ldr	r3, [r7, #12]
 800ed02:	2200      	movs	r2, #0
 800ed04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 800ed08:	2101      	movs	r1, #1
 800ed0a:	68f8      	ldr	r0, [r7, #12]
 800ed0c:	f001 ff14 	bl	8010b38 <I2C_Enable_IRQ>

    return HAL_OK;
 800ed10:	2300      	movs	r3, #0
 800ed12:	e000      	b.n	800ed16 <HAL_I2C_Mem_Read_IT+0xf6>
  }
  else
  {
    return HAL_BUSY;
 800ed14:	2302      	movs	r3, #2
  }
}
 800ed16:	4618      	mov	r0, r3
 800ed18:	3710      	adds	r7, #16
 800ed1a:	46bd      	mov	sp, r7
 800ed1c:	bd80      	pop	{r7, pc}
 800ed1e:	bf00      	nop
 800ed20:	ffff0000 	.word	0xffff0000
 800ed24:	0800ee1d 	.word	0x0800ee1d
 800ed28:	80002000 	.word	0x80002000

0800ed2c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 800ed2c:	b580      	push	{r7, lr}
 800ed2e:	b084      	sub	sp, #16
 800ed30:	af00      	add	r7, sp, #0
 800ed32:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800ed34:	687b      	ldr	r3, [r7, #4]
 800ed36:	681b      	ldr	r3, [r3, #0]
 800ed38:	699b      	ldr	r3, [r3, #24]
 800ed3a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	681b      	ldr	r3, [r3, #0]
 800ed40:	681b      	ldr	r3, [r3, #0]
 800ed42:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ed48:	2b00      	cmp	r3, #0
 800ed4a:	d005      	beq.n	800ed58 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ed50:	68ba      	ldr	r2, [r7, #8]
 800ed52:	68f9      	ldr	r1, [r7, #12]
 800ed54:	6878      	ldr	r0, [r7, #4]
 800ed56:	4798      	blx	r3
  }
}
 800ed58:	bf00      	nop
 800ed5a:	3710      	adds	r7, #16
 800ed5c:	46bd      	mov	sp, r7
 800ed5e:	bd80      	pop	{r7, pc}

0800ed60 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800ed60:	b480      	push	{r7}
 800ed62:	b083      	sub	sp, #12
 800ed64:	af00      	add	r7, sp, #0
 800ed66:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800ed68:	bf00      	nop
 800ed6a:	370c      	adds	r7, #12
 800ed6c:	46bd      	mov	sp, r7
 800ed6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed72:	4770      	bx	lr

0800ed74 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800ed74:	b480      	push	{r7}
 800ed76:	b083      	sub	sp, #12
 800ed78:	af00      	add	r7, sp, #0
 800ed7a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800ed7c:	bf00      	nop
 800ed7e:	370c      	adds	r7, #12
 800ed80:	46bd      	mov	sp, r7
 800ed82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed86:	4770      	bx	lr

0800ed88 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800ed88:	b480      	push	{r7}
 800ed8a:	b083      	sub	sp, #12
 800ed8c:	af00      	add	r7, sp, #0
 800ed8e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800ed90:	bf00      	nop
 800ed92:	370c      	adds	r7, #12
 800ed94:	46bd      	mov	sp, r7
 800ed96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed9a:	4770      	bx	lr

0800ed9c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800ed9c:	b480      	push	{r7}
 800ed9e:	b083      	sub	sp, #12
 800eda0:	af00      	add	r7, sp, #0
 800eda2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800eda4:	bf00      	nop
 800eda6:	370c      	adds	r7, #12
 800eda8:	46bd      	mov	sp, r7
 800edaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edae:	4770      	bx	lr

0800edb0 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800edb0:	b480      	push	{r7}
 800edb2:	b083      	sub	sp, #12
 800edb4:	af00      	add	r7, sp, #0
 800edb6:	6078      	str	r0, [r7, #4]
 800edb8:	460b      	mov	r3, r1
 800edba:	70fb      	strb	r3, [r7, #3]
 800edbc:	4613      	mov	r3, r2
 800edbe:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800edc0:	bf00      	nop
 800edc2:	370c      	adds	r7, #12
 800edc4:	46bd      	mov	sp, r7
 800edc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edca:	4770      	bx	lr

0800edcc <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800edcc:	b480      	push	{r7}
 800edce:	b083      	sub	sp, #12
 800edd0:	af00      	add	r7, sp, #0
 800edd2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800edd4:	bf00      	nop
 800edd6:	370c      	adds	r7, #12
 800edd8:	46bd      	mov	sp, r7
 800edda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edde:	4770      	bx	lr

0800ede0 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800ede0:	b480      	push	{r7}
 800ede2:	b083      	sub	sp, #12
 800ede4:	af00      	add	r7, sp, #0
 800ede6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800ede8:	bf00      	nop
 800edea:	370c      	adds	r7, #12
 800edec:	46bd      	mov	sp, r7
 800edee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edf2:	4770      	bx	lr

0800edf4 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800edf4:	b480      	push	{r7}
 800edf6:	b083      	sub	sp, #12
 800edf8:	af00      	add	r7, sp, #0
 800edfa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800edfc:	bf00      	nop
 800edfe:	370c      	adds	r7, #12
 800ee00:	46bd      	mov	sp, r7
 800ee02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee06:	4770      	bx	lr

0800ee08 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800ee08:	b480      	push	{r7}
 800ee0a:	b083      	sub	sp, #12
 800ee0c:	af00      	add	r7, sp, #0
 800ee0e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800ee10:	bf00      	nop
 800ee12:	370c      	adds	r7, #12
 800ee14:	46bd      	mov	sp, r7
 800ee16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee1a:	4770      	bx	lr

0800ee1c <I2C_Mem_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                        uint32_t ITSources)
{
 800ee1c:	b580      	push	{r7, lr}
 800ee1e:	b088      	sub	sp, #32
 800ee20:	af02      	add	r7, sp, #8
 800ee22:	60f8      	str	r0, [r7, #12]
 800ee24:	60b9      	str	r1, [r7, #8]
 800ee26:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 800ee28:	4b8d      	ldr	r3, [pc, #564]	@ (800f060 <I2C_Mem_ISR_IT+0x244>)
 800ee2a:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800ee2c:	68bb      	ldr	r3, [r7, #8]
 800ee2e:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800ee30:	68fb      	ldr	r3, [r7, #12]
 800ee32:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800ee36:	2b01      	cmp	r3, #1
 800ee38:	d101      	bne.n	800ee3e <I2C_Mem_ISR_IT+0x22>
 800ee3a:	2302      	movs	r3, #2
 800ee3c:	e10c      	b.n	800f058 <I2C_Mem_ISR_IT+0x23c>
 800ee3e:	68fb      	ldr	r3, [r7, #12]
 800ee40:	2201      	movs	r2, #1
 800ee42:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800ee46:	693b      	ldr	r3, [r7, #16]
 800ee48:	f003 0310 	and.w	r3, r3, #16
 800ee4c:	2b00      	cmp	r3, #0
 800ee4e:	d012      	beq.n	800ee76 <I2C_Mem_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800ee56:	2b00      	cmp	r3, #0
 800ee58:	d00d      	beq.n	800ee76 <I2C_Mem_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ee5a:	68fb      	ldr	r3, [r7, #12]
 800ee5c:	681b      	ldr	r3, [r3, #0]
 800ee5e:	2210      	movs	r2, #16
 800ee60:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800ee62:	68fb      	ldr	r3, [r7, #12]
 800ee64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ee66:	f043 0204 	orr.w	r2, r3, #4
 800ee6a:	68fb      	ldr	r3, [r7, #12]
 800ee6c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800ee6e:	68f8      	ldr	r0, [r7, #12]
 800ee70:	f001 fc2b 	bl	80106ca <I2C_Flush_TXDR>
 800ee74:	e0dd      	b.n	800f032 <I2C_Mem_ISR_IT+0x216>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800ee76:	693b      	ldr	r3, [r7, #16]
 800ee78:	f003 0304 	and.w	r3, r3, #4
 800ee7c:	2b00      	cmp	r3, #0
 800ee7e:	d022      	beq.n	800eec6 <I2C_Mem_ISR_IT+0xaa>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800ee86:	2b00      	cmp	r3, #0
 800ee88:	d01d      	beq.n	800eec6 <I2C_Mem_ISR_IT+0xaa>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800ee8a:	693b      	ldr	r3, [r7, #16]
 800ee8c:	f023 0304 	bic.w	r3, r3, #4
 800ee90:	613b      	str	r3, [r7, #16]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800ee92:	68fb      	ldr	r3, [r7, #12]
 800ee94:	681b      	ldr	r3, [r3, #0]
 800ee96:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ee98:	68fb      	ldr	r3, [r7, #12]
 800ee9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ee9c:	b2d2      	uxtb	r2, r2
 800ee9e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800eea0:	68fb      	ldr	r3, [r7, #12]
 800eea2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eea4:	1c5a      	adds	r2, r3, #1
 800eea6:	68fb      	ldr	r3, [r7, #12]
 800eea8:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 800eeaa:	68fb      	ldr	r3, [r7, #12]
 800eeac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800eeae:	3b01      	subs	r3, #1
 800eeb0:	b29a      	uxth	r2, r3
 800eeb2:	68fb      	ldr	r3, [r7, #12]
 800eeb4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 800eeb6:	68fb      	ldr	r3, [r7, #12]
 800eeb8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800eeba:	b29b      	uxth	r3, r3
 800eebc:	3b01      	subs	r3, #1
 800eebe:	b29a      	uxth	r2, r3
 800eec0:	68fb      	ldr	r3, [r7, #12]
 800eec2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800eec4:	e0b5      	b.n	800f032 <I2C_Mem_ISR_IT+0x216>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800eec6:	693b      	ldr	r3, [r7, #16]
 800eec8:	f003 0302 	and.w	r3, r3, #2
 800eecc:	2b00      	cmp	r3, #0
 800eece:	d02c      	beq.n	800ef2a <I2C_Mem_ISR_IT+0x10e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800eed6:	2b00      	cmp	r3, #0
 800eed8:	d027      	beq.n	800ef2a <I2C_Mem_ISR_IT+0x10e>
  {
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 800eeda:	68fb      	ldr	r3, [r7, #12]
 800eedc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800eede:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eee2:	d118      	bne.n	800ef16 <I2C_Mem_ISR_IT+0xfa>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800eee4:	68fb      	ldr	r3, [r7, #12]
 800eee6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eee8:	781a      	ldrb	r2, [r3, #0]
 800eeea:	68fb      	ldr	r3, [r7, #12]
 800eeec:	681b      	ldr	r3, [r3, #0]
 800eeee:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800eef0:	68fb      	ldr	r3, [r7, #12]
 800eef2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eef4:	1c5a      	adds	r2, r3, #1
 800eef6:	68fb      	ldr	r3, [r7, #12]
 800eef8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800eefa:	68fb      	ldr	r3, [r7, #12]
 800eefc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800eefe:	3b01      	subs	r3, #1
 800ef00:	b29a      	uxth	r2, r3
 800ef02:	68fb      	ldr	r3, [r7, #12]
 800ef04:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800ef06:	68fb      	ldr	r3, [r7, #12]
 800ef08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ef0a:	b29b      	uxth	r3, r3
 800ef0c:	3b01      	subs	r3, #1
 800ef0e:	b29a      	uxth	r2, r3
 800ef10:	68fb      	ldr	r3, [r7, #12]
 800ef12:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 800ef14:	e08d      	b.n	800f032 <I2C_Mem_ISR_IT+0x216>
    }
    else
    {
      /* Write LSB part of Memory Address */
      hi2c->Instance->TXDR = hi2c->Memaddress;
 800ef16:	68fb      	ldr	r3, [r7, #12]
 800ef18:	681b      	ldr	r3, [r3, #0]
 800ef1a:	68fa      	ldr	r2, [r7, #12]
 800ef1c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800ef1e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 800ef20:	68fb      	ldr	r3, [r7, #12]
 800ef22:	f04f 32ff 	mov.w	r2, #4294967295
 800ef26:	651a      	str	r2, [r3, #80]	@ 0x50
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 800ef28:	e083      	b.n	800f032 <I2C_Mem_ISR_IT+0x216>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800ef2a:	693b      	ldr	r3, [r7, #16]
 800ef2c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ef30:	2b00      	cmp	r3, #0
 800ef32:	d03c      	beq.n	800efae <I2C_Mem_ISR_IT+0x192>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800ef3a:	2b00      	cmp	r3, #0
 800ef3c:	d037      	beq.n	800efae <I2C_Mem_ISR_IT+0x192>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800ef3e:	68fb      	ldr	r3, [r7, #12]
 800ef40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ef42:	b29b      	uxth	r3, r3
 800ef44:	2b00      	cmp	r3, #0
 800ef46:	d02c      	beq.n	800efa2 <I2C_Mem_ISR_IT+0x186>
 800ef48:	68fb      	ldr	r3, [r7, #12]
 800ef4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ef4c:	2b00      	cmp	r3, #0
 800ef4e:	d128      	bne.n	800efa2 <I2C_Mem_ISR_IT+0x186>
    {
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ef50:	68fb      	ldr	r3, [r7, #12]
 800ef52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ef54:	b29b      	uxth	r3, r3
 800ef56:	2bff      	cmp	r3, #255	@ 0xff
 800ef58:	d910      	bls.n	800ef7c <I2C_Mem_ISR_IT+0x160>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800ef5a:	68fb      	ldr	r3, [r7, #12]
 800ef5c:	22ff      	movs	r2, #255	@ 0xff
 800ef5e:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800ef60:	68fb      	ldr	r3, [r7, #12]
 800ef62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ef64:	b299      	uxth	r1, r3
 800ef66:	68fb      	ldr	r3, [r7, #12]
 800ef68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ef6a:	b2da      	uxtb	r2, r3
 800ef6c:	2300      	movs	r3, #0
 800ef6e:	9300      	str	r3, [sp, #0]
 800ef70:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800ef74:	68f8      	ldr	r0, [r7, #12]
 800ef76:	f001 fdad 	bl	8010ad4 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ef7a:	e017      	b.n	800efac <I2C_Mem_ISR_IT+0x190>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800ef7c:	68fb      	ldr	r3, [r7, #12]
 800ef7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ef80:	b29a      	uxth	r2, r3
 800ef82:	68fb      	ldr	r3, [r7, #12]
 800ef84:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800ef86:	68fb      	ldr	r3, [r7, #12]
 800ef88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ef8a:	b299      	uxth	r1, r3
 800ef8c:	68fb      	ldr	r3, [r7, #12]
 800ef8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ef90:	b2da      	uxtb	r2, r3
 800ef92:	2300      	movs	r3, #0
 800ef94:	9300      	str	r3, [sp, #0]
 800ef96:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800ef9a:	68f8      	ldr	r0, [r7, #12]
 800ef9c:	f001 fd9a 	bl	8010ad4 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800efa0:	e004      	b.n	800efac <I2C_Mem_ISR_IT+0x190>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800efa2:	2140      	movs	r1, #64	@ 0x40
 800efa4:	68f8      	ldr	r0, [r7, #12]
 800efa6:	f001 fa79 	bl	801049c <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800efaa:	e042      	b.n	800f032 <I2C_Mem_ISR_IT+0x216>
 800efac:	e041      	b.n	800f032 <I2C_Mem_ISR_IT+0x216>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800efae:	693b      	ldr	r3, [r7, #16]
 800efb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800efb4:	2b00      	cmp	r3, #0
 800efb6:	d03c      	beq.n	800f032 <I2C_Mem_ISR_IT+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800efbe:	2b00      	cmp	r3, #0
 800efc0:	d037      	beq.n	800f032 <I2C_Mem_ISR_IT+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800efc2:	2101      	movs	r1, #1
 800efc4:	68f8      	ldr	r0, [r7, #12]
 800efc6:	f001 fe3b 	bl	8010c40 <I2C_Disable_IRQ>

    /* Enable ERR, TC, STOP, NACK and RXI interrupts */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 800efca:	2102      	movs	r1, #2
 800efcc:	68f8      	ldr	r0, [r7, #12]
 800efce:	f001 fdb3 	bl	8010b38 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800efd2:	68fb      	ldr	r3, [r7, #12]
 800efd4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800efd8:	b2db      	uxtb	r3, r3
 800efda:	2b22      	cmp	r3, #34	@ 0x22
 800efdc:	d101      	bne.n	800efe2 <I2C_Mem_ISR_IT+0x1c6>
    {
      direction = I2C_GENERATE_START_READ;
 800efde:	4b21      	ldr	r3, [pc, #132]	@ (800f064 <I2C_Mem_ISR_IT+0x248>)
 800efe0:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800efe2:	68fb      	ldr	r3, [r7, #12]
 800efe4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800efe6:	b29b      	uxth	r3, r3
 800efe8:	2bff      	cmp	r3, #255	@ 0xff
 800efea:	d910      	bls.n	800f00e <I2C_Mem_ISR_IT+0x1f2>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800efec:	68fb      	ldr	r3, [r7, #12]
 800efee:	22ff      	movs	r2, #255	@ 0xff
 800eff0:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800eff2:	68fb      	ldr	r3, [r7, #12]
 800eff4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800eff6:	b299      	uxth	r1, r3
 800eff8:	68fb      	ldr	r3, [r7, #12]
 800effa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800effc:	b2da      	uxtb	r2, r3
 800effe:	697b      	ldr	r3, [r7, #20]
 800f000:	9300      	str	r3, [sp, #0]
 800f002:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800f006:	68f8      	ldr	r0, [r7, #12]
 800f008:	f001 fd64 	bl	8010ad4 <I2C_TransferConfig>
 800f00c:	e011      	b.n	800f032 <I2C_Mem_ISR_IT+0x216>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800f00e:	68fb      	ldr	r3, [r7, #12]
 800f010:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f012:	b29a      	uxth	r2, r3
 800f014:	68fb      	ldr	r3, [r7, #12]
 800f016:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800f018:	68fb      	ldr	r3, [r7, #12]
 800f01a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f01c:	b299      	uxth	r1, r3
 800f01e:	68fb      	ldr	r3, [r7, #12]
 800f020:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f022:	b2da      	uxtb	r2, r3
 800f024:	697b      	ldr	r3, [r7, #20]
 800f026:	9300      	str	r3, [sp, #0]
 800f028:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800f02c:	68f8      	ldr	r0, [r7, #12]
 800f02e:	f001 fd51 	bl	8010ad4 <I2C_TransferConfig>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800f032:	693b      	ldr	r3, [r7, #16]
 800f034:	f003 0320 	and.w	r3, r3, #32
 800f038:	2b00      	cmp	r3, #0
 800f03a:	d008      	beq.n	800f04e <I2C_Mem_ISR_IT+0x232>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800f042:	2b00      	cmp	r3, #0
 800f044:	d003      	beq.n	800f04e <I2C_Mem_ISR_IT+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 800f046:	6939      	ldr	r1, [r7, #16]
 800f048:	68f8      	ldr	r0, [r7, #12]
 800f04a:	f000 feb7 	bl	800fdbc <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800f04e:	68fb      	ldr	r3, [r7, #12]
 800f050:	2200      	movs	r2, #0
 800f052:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800f056:	2300      	movs	r3, #0
}
 800f058:	4618      	mov	r0, r3
 800f05a:	3718      	adds	r7, #24
 800f05c:	46bd      	mov	sp, r7
 800f05e:	bd80      	pop	{r7, pc}
 800f060:	80002000 	.word	0x80002000
 800f064:	80002400 	.word	0x80002400

0800f068 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800f068:	b580      	push	{r7, lr}
 800f06a:	b086      	sub	sp, #24
 800f06c:	af00      	add	r7, sp, #0
 800f06e:	60f8      	str	r0, [r7, #12]
 800f070:	60b9      	str	r1, [r7, #8]
 800f072:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800f074:	68fb      	ldr	r3, [r7, #12]
 800f076:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f078:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800f07a:	68bb      	ldr	r3, [r7, #8]
 800f07c:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800f07e:	68fb      	ldr	r3, [r7, #12]
 800f080:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800f084:	2b01      	cmp	r3, #1
 800f086:	d101      	bne.n	800f08c <I2C_Slave_ISR_IT+0x24>
 800f088:	2302      	movs	r3, #2
 800f08a:	e0e2      	b.n	800f252 <I2C_Slave_ISR_IT+0x1ea>
 800f08c:	68fb      	ldr	r3, [r7, #12]
 800f08e:	2201      	movs	r2, #1
 800f090:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800f094:	693b      	ldr	r3, [r7, #16]
 800f096:	f003 0320 	and.w	r3, r3, #32
 800f09a:	2b00      	cmp	r3, #0
 800f09c:	d009      	beq.n	800f0b2 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800f0a4:	2b00      	cmp	r3, #0
 800f0a6:	d004      	beq.n	800f0b2 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800f0a8:	6939      	ldr	r1, [r7, #16]
 800f0aa:	68f8      	ldr	r0, [r7, #12]
 800f0ac:	f000 ff4e 	bl	800ff4c <I2C_ITSlaveCplt>
 800f0b0:	e0ca      	b.n	800f248 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800f0b2:	693b      	ldr	r3, [r7, #16]
 800f0b4:	f003 0310 	and.w	r3, r3, #16
 800f0b8:	2b00      	cmp	r3, #0
 800f0ba:	d04b      	beq.n	800f154 <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800f0c2:	2b00      	cmp	r3, #0
 800f0c4:	d046      	beq.n	800f154 <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800f0c6:	68fb      	ldr	r3, [r7, #12]
 800f0c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f0ca:	b29b      	uxth	r3, r3
 800f0cc:	2b00      	cmp	r3, #0
 800f0ce:	d128      	bne.n	800f122 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800f0d0:	68fb      	ldr	r3, [r7, #12]
 800f0d2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f0d6:	b2db      	uxtb	r3, r3
 800f0d8:	2b28      	cmp	r3, #40	@ 0x28
 800f0da:	d108      	bne.n	800f0ee <I2C_Slave_ISR_IT+0x86>
 800f0dc:	697b      	ldr	r3, [r7, #20]
 800f0de:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800f0e2:	d104      	bne.n	800f0ee <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800f0e4:	6939      	ldr	r1, [r7, #16]
 800f0e6:	68f8      	ldr	r0, [r7, #12]
 800f0e8:	f001 f984 	bl	80103f4 <I2C_ITListenCplt>
 800f0ec:	e031      	b.n	800f152 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800f0ee:	68fb      	ldr	r3, [r7, #12]
 800f0f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f0f4:	b2db      	uxtb	r3, r3
 800f0f6:	2b29      	cmp	r3, #41	@ 0x29
 800f0f8:	d10e      	bne.n	800f118 <I2C_Slave_ISR_IT+0xb0>
 800f0fa:	697b      	ldr	r3, [r7, #20]
 800f0fc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800f100:	d00a      	beq.n	800f118 <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f102:	68fb      	ldr	r3, [r7, #12]
 800f104:	681b      	ldr	r3, [r3, #0]
 800f106:	2210      	movs	r2, #16
 800f108:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800f10a:	68f8      	ldr	r0, [r7, #12]
 800f10c:	f001 fadd 	bl	80106ca <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800f110:	68f8      	ldr	r0, [r7, #12]
 800f112:	f000 fdf6 	bl	800fd02 <I2C_ITSlaveSeqCplt>
 800f116:	e01c      	b.n	800f152 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f118:	68fb      	ldr	r3, [r7, #12]
 800f11a:	681b      	ldr	r3, [r3, #0]
 800f11c:	2210      	movs	r2, #16
 800f11e:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800f120:	e08f      	b.n	800f242 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f122:	68fb      	ldr	r3, [r7, #12]
 800f124:	681b      	ldr	r3, [r3, #0]
 800f126:	2210      	movs	r2, #16
 800f128:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800f12a:	68fb      	ldr	r3, [r7, #12]
 800f12c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f12e:	f043 0204 	orr.w	r2, r3, #4
 800f132:	68fb      	ldr	r3, [r7, #12]
 800f134:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800f136:	697b      	ldr	r3, [r7, #20]
 800f138:	2b00      	cmp	r3, #0
 800f13a:	d003      	beq.n	800f144 <I2C_Slave_ISR_IT+0xdc>
 800f13c:	697b      	ldr	r3, [r7, #20]
 800f13e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800f142:	d17e      	bne.n	800f242 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800f144:	68fb      	ldr	r3, [r7, #12]
 800f146:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f148:	4619      	mov	r1, r3
 800f14a:	68f8      	ldr	r0, [r7, #12]
 800f14c:	f001 f9a6 	bl	801049c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800f150:	e077      	b.n	800f242 <I2C_Slave_ISR_IT+0x1da>
 800f152:	e076      	b.n	800f242 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800f154:	693b      	ldr	r3, [r7, #16]
 800f156:	f003 0304 	and.w	r3, r3, #4
 800f15a:	2b00      	cmp	r3, #0
 800f15c:	d02f      	beq.n	800f1be <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800f164:	2b00      	cmp	r3, #0
 800f166:	d02a      	beq.n	800f1be <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 800f168:	68fb      	ldr	r3, [r7, #12]
 800f16a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f16c:	b29b      	uxth	r3, r3
 800f16e:	2b00      	cmp	r3, #0
 800f170:	d018      	beq.n	800f1a4 <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800f172:	68fb      	ldr	r3, [r7, #12]
 800f174:	681b      	ldr	r3, [r3, #0]
 800f176:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f178:	68fb      	ldr	r3, [r7, #12]
 800f17a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f17c:	b2d2      	uxtb	r2, r2
 800f17e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800f180:	68fb      	ldr	r3, [r7, #12]
 800f182:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f184:	1c5a      	adds	r2, r3, #1
 800f186:	68fb      	ldr	r3, [r7, #12]
 800f188:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800f18a:	68fb      	ldr	r3, [r7, #12]
 800f18c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f18e:	3b01      	subs	r3, #1
 800f190:	b29a      	uxth	r2, r3
 800f192:	68fb      	ldr	r3, [r7, #12]
 800f194:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800f196:	68fb      	ldr	r3, [r7, #12]
 800f198:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f19a:	b29b      	uxth	r3, r3
 800f19c:	3b01      	subs	r3, #1
 800f19e:	b29a      	uxth	r2, r3
 800f1a0:	68fb      	ldr	r3, [r7, #12]
 800f1a2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800f1a4:	68fb      	ldr	r3, [r7, #12]
 800f1a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f1a8:	b29b      	uxth	r3, r3
 800f1aa:	2b00      	cmp	r3, #0
 800f1ac:	d14b      	bne.n	800f246 <I2C_Slave_ISR_IT+0x1de>
 800f1ae:	697b      	ldr	r3, [r7, #20]
 800f1b0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800f1b4:	d047      	beq.n	800f246 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800f1b6:	68f8      	ldr	r0, [r7, #12]
 800f1b8:	f000 fda3 	bl	800fd02 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800f1bc:	e043      	b.n	800f246 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800f1be:	693b      	ldr	r3, [r7, #16]
 800f1c0:	f003 0308 	and.w	r3, r3, #8
 800f1c4:	2b00      	cmp	r3, #0
 800f1c6:	d009      	beq.n	800f1dc <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800f1ce:	2b00      	cmp	r3, #0
 800f1d0:	d004      	beq.n	800f1dc <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800f1d2:	6939      	ldr	r1, [r7, #16]
 800f1d4:	68f8      	ldr	r0, [r7, #12]
 800f1d6:	f000 fcd3 	bl	800fb80 <I2C_ITAddrCplt>
 800f1da:	e035      	b.n	800f248 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800f1dc:	693b      	ldr	r3, [r7, #16]
 800f1de:	f003 0302 	and.w	r3, r3, #2
 800f1e2:	2b00      	cmp	r3, #0
 800f1e4:	d030      	beq.n	800f248 <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800f1ec:	2b00      	cmp	r3, #0
 800f1ee:	d02b      	beq.n	800f248 <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800f1f0:	68fb      	ldr	r3, [r7, #12]
 800f1f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f1f4:	b29b      	uxth	r3, r3
 800f1f6:	2b00      	cmp	r3, #0
 800f1f8:	d018      	beq.n	800f22c <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800f1fa:	68fb      	ldr	r3, [r7, #12]
 800f1fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f1fe:	781a      	ldrb	r2, [r3, #0]
 800f200:	68fb      	ldr	r3, [r7, #12]
 800f202:	681b      	ldr	r3, [r3, #0]
 800f204:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800f206:	68fb      	ldr	r3, [r7, #12]
 800f208:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f20a:	1c5a      	adds	r2, r3, #1
 800f20c:	68fb      	ldr	r3, [r7, #12]
 800f20e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800f210:	68fb      	ldr	r3, [r7, #12]
 800f212:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f214:	b29b      	uxth	r3, r3
 800f216:	3b01      	subs	r3, #1
 800f218:	b29a      	uxth	r2, r3
 800f21a:	68fb      	ldr	r3, [r7, #12]
 800f21c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800f21e:	68fb      	ldr	r3, [r7, #12]
 800f220:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f222:	3b01      	subs	r3, #1
 800f224:	b29a      	uxth	r2, r3
 800f226:	68fb      	ldr	r3, [r7, #12]
 800f228:	851a      	strh	r2, [r3, #40]	@ 0x28
 800f22a:	e00d      	b.n	800f248 <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800f22c:	697b      	ldr	r3, [r7, #20]
 800f22e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800f232:	d002      	beq.n	800f23a <I2C_Slave_ISR_IT+0x1d2>
 800f234:	697b      	ldr	r3, [r7, #20]
 800f236:	2b00      	cmp	r3, #0
 800f238:	d106      	bne.n	800f248 <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800f23a:	68f8      	ldr	r0, [r7, #12]
 800f23c:	f000 fd61 	bl	800fd02 <I2C_ITSlaveSeqCplt>
 800f240:	e002      	b.n	800f248 <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 800f242:	bf00      	nop
 800f244:	e000      	b.n	800f248 <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 800f246:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800f248:	68fb      	ldr	r3, [r7, #12]
 800f24a:	2200      	movs	r2, #0
 800f24c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800f250:	2300      	movs	r3, #0
}
 800f252:	4618      	mov	r0, r3
 800f254:	3718      	adds	r7, #24
 800f256:	46bd      	mov	sp, r7
 800f258:	bd80      	pop	{r7, pc}

0800f25a <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 800f25a:	b580      	push	{r7, lr}
 800f25c:	b088      	sub	sp, #32
 800f25e:	af02      	add	r7, sp, #8
 800f260:	60f8      	str	r0, [r7, #12]
 800f262:	60b9      	str	r1, [r7, #8]
 800f264:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800f266:	68fb      	ldr	r3, [r7, #12]
 800f268:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800f26c:	2b01      	cmp	r3, #1
 800f26e:	d101      	bne.n	800f274 <I2C_Master_ISR_DMA+0x1a>
 800f270:	2302      	movs	r3, #2
 800f272:	e0d9      	b.n	800f428 <I2C_Master_ISR_DMA+0x1ce>
 800f274:	68fb      	ldr	r3, [r7, #12]
 800f276:	2201      	movs	r2, #1
 800f278:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800f27c:	68bb      	ldr	r3, [r7, #8]
 800f27e:	f003 0310 	and.w	r3, r3, #16
 800f282:	2b00      	cmp	r3, #0
 800f284:	d016      	beq.n	800f2b4 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800f28c:	2b00      	cmp	r3, #0
 800f28e:	d011      	beq.n	800f2b4 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f290:	68fb      	ldr	r3, [r7, #12]
 800f292:	681b      	ldr	r3, [r3, #0]
 800f294:	2210      	movs	r2, #16
 800f296:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800f298:	68fb      	ldr	r3, [r7, #12]
 800f29a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f29c:	f043 0204 	orr.w	r2, r3, #4
 800f2a0:	68fb      	ldr	r3, [r7, #12]
 800f2a2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800f2a4:	2120      	movs	r1, #32
 800f2a6:	68f8      	ldr	r0, [r7, #12]
 800f2a8:	f001 fc46 	bl	8010b38 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800f2ac:	68f8      	ldr	r0, [r7, #12]
 800f2ae:	f001 fa0c 	bl	80106ca <I2C_Flush_TXDR>
 800f2b2:	e0b4      	b.n	800f41e <I2C_Master_ISR_DMA+0x1c4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800f2b4:	68bb      	ldr	r3, [r7, #8]
 800f2b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f2ba:	2b00      	cmp	r3, #0
 800f2bc:	d071      	beq.n	800f3a2 <I2C_Master_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800f2c4:	2b00      	cmp	r3, #0
 800f2c6:	d06c      	beq.n	800f3a2 <I2C_Master_ISR_DMA+0x148>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 800f2c8:	68fb      	ldr	r3, [r7, #12]
 800f2ca:	681b      	ldr	r3, [r3, #0]
 800f2cc:	681a      	ldr	r2, [r3, #0]
 800f2ce:	68fb      	ldr	r3, [r7, #12]
 800f2d0:	681b      	ldr	r3, [r3, #0]
 800f2d2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800f2d6:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 800f2d8:	68fb      	ldr	r3, [r7, #12]
 800f2da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f2dc:	b29b      	uxth	r3, r3
 800f2de:	2b00      	cmp	r3, #0
 800f2e0:	d04e      	beq.n	800f380 <I2C_Master_ISR_DMA+0x126>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800f2e2:	68fb      	ldr	r3, [r7, #12]
 800f2e4:	681b      	ldr	r3, [r3, #0]
 800f2e6:	685b      	ldr	r3, [r3, #4]
 800f2e8:	b29b      	uxth	r3, r3
 800f2ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f2ee:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800f2f0:	68fb      	ldr	r3, [r7, #12]
 800f2f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f2f4:	b29b      	uxth	r3, r3
 800f2f6:	2bff      	cmp	r3, #255	@ 0xff
 800f2f8:	d906      	bls.n	800f308 <I2C_Master_ISR_DMA+0xae>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800f2fa:	68fb      	ldr	r3, [r7, #12]
 800f2fc:	22ff      	movs	r2, #255	@ 0xff
 800f2fe:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 800f300:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800f304:	617b      	str	r3, [r7, #20]
 800f306:	e010      	b.n	800f32a <I2C_Master_ISR_DMA+0xd0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800f308:	68fb      	ldr	r3, [r7, #12]
 800f30a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f30c:	b29a      	uxth	r2, r3
 800f30e:	68fb      	ldr	r3, [r7, #12]
 800f310:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800f312:	68fb      	ldr	r3, [r7, #12]
 800f314:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f316:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800f31a:	d003      	beq.n	800f324 <I2C_Master_ISR_DMA+0xca>
        {
          xfermode = hi2c->XferOptions;
 800f31c:	68fb      	ldr	r3, [r7, #12]
 800f31e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f320:	617b      	str	r3, [r7, #20]
 800f322:	e002      	b.n	800f32a <I2C_Master_ISR_DMA+0xd0>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 800f324:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800f328:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 800f32a:	68fb      	ldr	r3, [r7, #12]
 800f32c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f32e:	b2da      	uxtb	r2, r3
 800f330:	8a79      	ldrh	r1, [r7, #18]
 800f332:	2300      	movs	r3, #0
 800f334:	9300      	str	r3, [sp, #0]
 800f336:	697b      	ldr	r3, [r7, #20]
 800f338:	68f8      	ldr	r0, [r7, #12]
 800f33a:	f001 fbcb 	bl	8010ad4 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800f33e:	68fb      	ldr	r3, [r7, #12]
 800f340:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f342:	b29a      	uxth	r2, r3
 800f344:	68fb      	ldr	r3, [r7, #12]
 800f346:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f348:	1ad3      	subs	r3, r2, r3
 800f34a:	b29a      	uxth	r2, r3
 800f34c:	68fb      	ldr	r3, [r7, #12]
 800f34e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800f350:	68fb      	ldr	r3, [r7, #12]
 800f352:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f356:	b2db      	uxtb	r3, r3
 800f358:	2b22      	cmp	r3, #34	@ 0x22
 800f35a:	d108      	bne.n	800f36e <I2C_Master_ISR_DMA+0x114>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800f35c:	68fb      	ldr	r3, [r7, #12]
 800f35e:	681b      	ldr	r3, [r3, #0]
 800f360:	681a      	ldr	r2, [r3, #0]
 800f362:	68fb      	ldr	r3, [r7, #12]
 800f364:	681b      	ldr	r3, [r3, #0]
 800f366:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800f36a:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800f36c:	e057      	b.n	800f41e <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800f36e:	68fb      	ldr	r3, [r7, #12]
 800f370:	681b      	ldr	r3, [r3, #0]
 800f372:	681a      	ldr	r2, [r3, #0]
 800f374:	68fb      	ldr	r3, [r7, #12]
 800f376:	681b      	ldr	r3, [r3, #0]
 800f378:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800f37c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800f37e:	e04e      	b.n	800f41e <I2C_Master_ISR_DMA+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800f380:	68fb      	ldr	r3, [r7, #12]
 800f382:	681b      	ldr	r3, [r3, #0]
 800f384:	685b      	ldr	r3, [r3, #4]
 800f386:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f38a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800f38e:	d003      	beq.n	800f398 <I2C_Master_ISR_DMA+0x13e>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800f390:	68f8      	ldr	r0, [r7, #12]
 800f392:	f000 fc79 	bl	800fc88 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 800f396:	e042      	b.n	800f41e <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800f398:	2140      	movs	r1, #64	@ 0x40
 800f39a:	68f8      	ldr	r0, [r7, #12]
 800f39c:	f001 f87e 	bl	801049c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800f3a0:	e03d      	b.n	800f41e <I2C_Master_ISR_DMA+0x1c4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800f3a2:	68bb      	ldr	r3, [r7, #8]
 800f3a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f3a8:	2b00      	cmp	r3, #0
 800f3aa:	d028      	beq.n	800f3fe <I2C_Master_ISR_DMA+0x1a4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800f3b2:	2b00      	cmp	r3, #0
 800f3b4:	d023      	beq.n	800f3fe <I2C_Master_ISR_DMA+0x1a4>
  {
    if (hi2c->XferCount == 0U)
 800f3b6:	68fb      	ldr	r3, [r7, #12]
 800f3b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f3ba:	b29b      	uxth	r3, r3
 800f3bc:	2b00      	cmp	r3, #0
 800f3be:	d119      	bne.n	800f3f4 <I2C_Master_ISR_DMA+0x19a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800f3c0:	68fb      	ldr	r3, [r7, #12]
 800f3c2:	681b      	ldr	r3, [r3, #0]
 800f3c4:	685b      	ldr	r3, [r3, #4]
 800f3c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f3ca:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800f3ce:	d025      	beq.n	800f41c <I2C_Master_ISR_DMA+0x1c2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800f3d0:	68fb      	ldr	r3, [r7, #12]
 800f3d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f3d4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800f3d8:	d108      	bne.n	800f3ec <I2C_Master_ISR_DMA+0x192>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800f3da:	68fb      	ldr	r3, [r7, #12]
 800f3dc:	681b      	ldr	r3, [r3, #0]
 800f3de:	685a      	ldr	r2, [r3, #4]
 800f3e0:	68fb      	ldr	r3, [r7, #12]
 800f3e2:	681b      	ldr	r3, [r3, #0]
 800f3e4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800f3e8:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 800f3ea:	e017      	b.n	800f41c <I2C_Master_ISR_DMA+0x1c2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800f3ec:	68f8      	ldr	r0, [r7, #12]
 800f3ee:	f000 fc4b 	bl	800fc88 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 800f3f2:	e013      	b.n	800f41c <I2C_Master_ISR_DMA+0x1c2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800f3f4:	2140      	movs	r1, #64	@ 0x40
 800f3f6:	68f8      	ldr	r0, [r7, #12]
 800f3f8:	f001 f850 	bl	801049c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800f3fc:	e00e      	b.n	800f41c <I2C_Master_ISR_DMA+0x1c2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800f3fe:	68bb      	ldr	r3, [r7, #8]
 800f400:	f003 0320 	and.w	r3, r3, #32
 800f404:	2b00      	cmp	r3, #0
 800f406:	d00a      	beq.n	800f41e <I2C_Master_ISR_DMA+0x1c4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800f40e:	2b00      	cmp	r3, #0
 800f410:	d005      	beq.n	800f41e <I2C_Master_ISR_DMA+0x1c4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800f412:	68b9      	ldr	r1, [r7, #8]
 800f414:	68f8      	ldr	r0, [r7, #12]
 800f416:	f000 fcd1 	bl	800fdbc <I2C_ITMasterCplt>
 800f41a:	e000      	b.n	800f41e <I2C_Master_ISR_DMA+0x1c4>
    if (hi2c->XferCount == 0U)
 800f41c:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800f41e:	68fb      	ldr	r3, [r7, #12]
 800f420:	2200      	movs	r2, #0
 800f422:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800f426:	2300      	movs	r3, #0
}
 800f428:	4618      	mov	r0, r3
 800f42a:	3718      	adds	r7, #24
 800f42c:	46bd      	mov	sp, r7
 800f42e:	bd80      	pop	{r7, pc}

0800f430 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 800f430:	b580      	push	{r7, lr}
 800f432:	b088      	sub	sp, #32
 800f434:	af02      	add	r7, sp, #8
 800f436:	60f8      	str	r0, [r7, #12]
 800f438:	60b9      	str	r1, [r7, #8]
 800f43a:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 800f43c:	4b8d      	ldr	r3, [pc, #564]	@ (800f674 <I2C_Mem_ISR_DMA+0x244>)
 800f43e:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800f440:	68fb      	ldr	r3, [r7, #12]
 800f442:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800f446:	2b01      	cmp	r3, #1
 800f448:	d101      	bne.n	800f44e <I2C_Mem_ISR_DMA+0x1e>
 800f44a:	2302      	movs	r3, #2
 800f44c:	e10e      	b.n	800f66c <I2C_Mem_ISR_DMA+0x23c>
 800f44e:	68fb      	ldr	r3, [r7, #12]
 800f450:	2201      	movs	r2, #1
 800f452:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800f456:	68bb      	ldr	r3, [r7, #8]
 800f458:	f003 0310 	and.w	r3, r3, #16
 800f45c:	2b00      	cmp	r3, #0
 800f45e:	d016      	beq.n	800f48e <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800f466:	2b00      	cmp	r3, #0
 800f468:	d011      	beq.n	800f48e <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f46a:	68fb      	ldr	r3, [r7, #12]
 800f46c:	681b      	ldr	r3, [r3, #0]
 800f46e:	2210      	movs	r2, #16
 800f470:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800f472:	68fb      	ldr	r3, [r7, #12]
 800f474:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f476:	f043 0204 	orr.w	r2, r3, #4
 800f47a:	68fb      	ldr	r3, [r7, #12]
 800f47c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800f47e:	2120      	movs	r1, #32
 800f480:	68f8      	ldr	r0, [r7, #12]
 800f482:	f001 fb59 	bl	8010b38 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800f486:	68f8      	ldr	r0, [r7, #12]
 800f488:	f001 f91f 	bl	80106ca <I2C_Flush_TXDR>
 800f48c:	e0e9      	b.n	800f662 <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800f48e:	68bb      	ldr	r3, [r7, #8]
 800f490:	f003 0302 	and.w	r3, r3, #2
 800f494:	2b00      	cmp	r3, #0
 800f496:	d00e      	beq.n	800f4b6 <I2C_Mem_ISR_DMA+0x86>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800f49e:	2b00      	cmp	r3, #0
 800f4a0:	d009      	beq.n	800f4b6 <I2C_Mem_ISR_DMA+0x86>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 800f4a2:	68fb      	ldr	r3, [r7, #12]
 800f4a4:	681b      	ldr	r3, [r3, #0]
 800f4a6:	68fa      	ldr	r2, [r7, #12]
 800f4a8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800f4aa:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 800f4ac:	68fb      	ldr	r3, [r7, #12]
 800f4ae:	f04f 32ff 	mov.w	r2, #4294967295
 800f4b2:	651a      	str	r2, [r3, #80]	@ 0x50
 800f4b4:	e0d5      	b.n	800f662 <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800f4b6:	68bb      	ldr	r3, [r7, #8]
 800f4b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f4bc:	2b00      	cmp	r3, #0
 800f4be:	d05f      	beq.n	800f580 <I2C_Mem_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800f4c6:	2b00      	cmp	r3, #0
 800f4c8:	d05a      	beq.n	800f580 <I2C_Mem_ISR_DMA+0x150>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800f4ca:	2101      	movs	r1, #1
 800f4cc:	68f8      	ldr	r0, [r7, #12]
 800f4ce:	f001 fbb7 	bl	8010c40 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800f4d2:	2110      	movs	r1, #16
 800f4d4:	68f8      	ldr	r0, [r7, #12]
 800f4d6:	f001 fb2f 	bl	8010b38 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 800f4da:	68fb      	ldr	r3, [r7, #12]
 800f4dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f4de:	b29b      	uxth	r3, r3
 800f4e0:	2b00      	cmp	r3, #0
 800f4e2:	d048      	beq.n	800f576 <I2C_Mem_ISR_DMA+0x146>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800f4e4:	68fb      	ldr	r3, [r7, #12]
 800f4e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f4e8:	b29b      	uxth	r3, r3
 800f4ea:	2bff      	cmp	r3, #255	@ 0xff
 800f4ec:	d910      	bls.n	800f510 <I2C_Mem_ISR_DMA+0xe0>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800f4ee:	68fb      	ldr	r3, [r7, #12]
 800f4f0:	22ff      	movs	r2, #255	@ 0xff
 800f4f2:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800f4f4:	68fb      	ldr	r3, [r7, #12]
 800f4f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f4f8:	b299      	uxth	r1, r3
 800f4fa:	68fb      	ldr	r3, [r7, #12]
 800f4fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f4fe:	b2da      	uxtb	r2, r3
 800f500:	2300      	movs	r3, #0
 800f502:	9300      	str	r3, [sp, #0]
 800f504:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800f508:	68f8      	ldr	r0, [r7, #12]
 800f50a:	f001 fae3 	bl	8010ad4 <I2C_TransferConfig>
 800f50e:	e011      	b.n	800f534 <I2C_Mem_ISR_DMA+0x104>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800f510:	68fb      	ldr	r3, [r7, #12]
 800f512:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f514:	b29a      	uxth	r2, r3
 800f516:	68fb      	ldr	r3, [r7, #12]
 800f518:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800f51a:	68fb      	ldr	r3, [r7, #12]
 800f51c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f51e:	b299      	uxth	r1, r3
 800f520:	68fb      	ldr	r3, [r7, #12]
 800f522:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f524:	b2da      	uxtb	r2, r3
 800f526:	2300      	movs	r3, #0
 800f528:	9300      	str	r3, [sp, #0]
 800f52a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800f52e:	68f8      	ldr	r0, [r7, #12]
 800f530:	f001 fad0 	bl	8010ad4 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800f534:	68fb      	ldr	r3, [r7, #12]
 800f536:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f538:	b29a      	uxth	r2, r3
 800f53a:	68fb      	ldr	r3, [r7, #12]
 800f53c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f53e:	1ad3      	subs	r3, r2, r3
 800f540:	b29a      	uxth	r2, r3
 800f542:	68fb      	ldr	r3, [r7, #12]
 800f544:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800f546:	68fb      	ldr	r3, [r7, #12]
 800f548:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f54c:	b2db      	uxtb	r3, r3
 800f54e:	2b22      	cmp	r3, #34	@ 0x22
 800f550:	d108      	bne.n	800f564 <I2C_Mem_ISR_DMA+0x134>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800f552:	68fb      	ldr	r3, [r7, #12]
 800f554:	681b      	ldr	r3, [r3, #0]
 800f556:	681a      	ldr	r2, [r3, #0]
 800f558:	68fb      	ldr	r3, [r7, #12]
 800f55a:	681b      	ldr	r3, [r3, #0]
 800f55c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800f560:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800f562:	e07e      	b.n	800f662 <I2C_Mem_ISR_DMA+0x232>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800f564:	68fb      	ldr	r3, [r7, #12]
 800f566:	681b      	ldr	r3, [r3, #0]
 800f568:	681a      	ldr	r2, [r3, #0]
 800f56a:	68fb      	ldr	r3, [r7, #12]
 800f56c:	681b      	ldr	r3, [r3, #0]
 800f56e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800f572:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800f574:	e075      	b.n	800f662 <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800f576:	2140      	movs	r1, #64	@ 0x40
 800f578:	68f8      	ldr	r0, [r7, #12]
 800f57a:	f000 ff8f 	bl	801049c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800f57e:	e070      	b.n	800f662 <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800f580:	68bb      	ldr	r3, [r7, #8]
 800f582:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f586:	2b00      	cmp	r3, #0
 800f588:	d05d      	beq.n	800f646 <I2C_Mem_ISR_DMA+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800f58a:	687b      	ldr	r3, [r7, #4]
 800f58c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800f590:	2b00      	cmp	r3, #0
 800f592:	d058      	beq.n	800f646 <I2C_Mem_ISR_DMA+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800f594:	2101      	movs	r1, #1
 800f596:	68f8      	ldr	r0, [r7, #12]
 800f598:	f001 fb52 	bl	8010c40 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800f59c:	2110      	movs	r1, #16
 800f59e:	68f8      	ldr	r0, [r7, #12]
 800f5a0:	f001 faca 	bl	8010b38 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800f5a4:	68fb      	ldr	r3, [r7, #12]
 800f5a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f5aa:	b2db      	uxtb	r3, r3
 800f5ac:	2b22      	cmp	r3, #34	@ 0x22
 800f5ae:	d101      	bne.n	800f5b4 <I2C_Mem_ISR_DMA+0x184>
    {
      direction = I2C_GENERATE_START_READ;
 800f5b0:	4b31      	ldr	r3, [pc, #196]	@ (800f678 <I2C_Mem_ISR_DMA+0x248>)
 800f5b2:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800f5b4:	68fb      	ldr	r3, [r7, #12]
 800f5b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f5b8:	b29b      	uxth	r3, r3
 800f5ba:	2bff      	cmp	r3, #255	@ 0xff
 800f5bc:	d910      	bls.n	800f5e0 <I2C_Mem_ISR_DMA+0x1b0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800f5be:	68fb      	ldr	r3, [r7, #12]
 800f5c0:	22ff      	movs	r2, #255	@ 0xff
 800f5c2:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800f5c4:	68fb      	ldr	r3, [r7, #12]
 800f5c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f5c8:	b299      	uxth	r1, r3
 800f5ca:	68fb      	ldr	r3, [r7, #12]
 800f5cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f5ce:	b2da      	uxtb	r2, r3
 800f5d0:	697b      	ldr	r3, [r7, #20]
 800f5d2:	9300      	str	r3, [sp, #0]
 800f5d4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800f5d8:	68f8      	ldr	r0, [r7, #12]
 800f5da:	f001 fa7b 	bl	8010ad4 <I2C_TransferConfig>
 800f5de:	e011      	b.n	800f604 <I2C_Mem_ISR_DMA+0x1d4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800f5e0:	68fb      	ldr	r3, [r7, #12]
 800f5e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f5e4:	b29a      	uxth	r2, r3
 800f5e6:	68fb      	ldr	r3, [r7, #12]
 800f5e8:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800f5ea:	68fb      	ldr	r3, [r7, #12]
 800f5ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f5ee:	b299      	uxth	r1, r3
 800f5f0:	68fb      	ldr	r3, [r7, #12]
 800f5f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f5f4:	b2da      	uxtb	r2, r3
 800f5f6:	697b      	ldr	r3, [r7, #20]
 800f5f8:	9300      	str	r3, [sp, #0]
 800f5fa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800f5fe:	68f8      	ldr	r0, [r7, #12]
 800f600:	f001 fa68 	bl	8010ad4 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 800f604:	68fb      	ldr	r3, [r7, #12]
 800f606:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f608:	b29a      	uxth	r2, r3
 800f60a:	68fb      	ldr	r3, [r7, #12]
 800f60c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f60e:	1ad3      	subs	r3, r2, r3
 800f610:	b29a      	uxth	r2, r3
 800f612:	68fb      	ldr	r3, [r7, #12]
 800f614:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800f616:	68fb      	ldr	r3, [r7, #12]
 800f618:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f61c:	b2db      	uxtb	r3, r3
 800f61e:	2b22      	cmp	r3, #34	@ 0x22
 800f620:	d108      	bne.n	800f634 <I2C_Mem_ISR_DMA+0x204>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800f622:	68fb      	ldr	r3, [r7, #12]
 800f624:	681b      	ldr	r3, [r3, #0]
 800f626:	681a      	ldr	r2, [r3, #0]
 800f628:	68fb      	ldr	r3, [r7, #12]
 800f62a:	681b      	ldr	r3, [r3, #0]
 800f62c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800f630:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800f632:	e016      	b.n	800f662 <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800f634:	68fb      	ldr	r3, [r7, #12]
 800f636:	681b      	ldr	r3, [r3, #0]
 800f638:	681a      	ldr	r2, [r3, #0]
 800f63a:	68fb      	ldr	r3, [r7, #12]
 800f63c:	681b      	ldr	r3, [r3, #0]
 800f63e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800f642:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800f644:	e00d      	b.n	800f662 <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800f646:	68bb      	ldr	r3, [r7, #8]
 800f648:	f003 0320 	and.w	r3, r3, #32
 800f64c:	2b00      	cmp	r3, #0
 800f64e:	d008      	beq.n	800f662 <I2C_Mem_ISR_DMA+0x232>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800f656:	2b00      	cmp	r3, #0
 800f658:	d003      	beq.n	800f662 <I2C_Mem_ISR_DMA+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800f65a:	68b9      	ldr	r1, [r7, #8]
 800f65c:	68f8      	ldr	r0, [r7, #12]
 800f65e:	f000 fbad 	bl	800fdbc <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800f662:	68fb      	ldr	r3, [r7, #12]
 800f664:	2200      	movs	r2, #0
 800f666:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800f66a:	2300      	movs	r3, #0
}
 800f66c:	4618      	mov	r0, r3
 800f66e:	3718      	adds	r7, #24
 800f670:	46bd      	mov	sp, r7
 800f672:	bd80      	pop	{r7, pc}
 800f674:	80002000 	.word	0x80002000
 800f678:	80002400 	.word	0x80002400

0800f67c <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800f67c:	b580      	push	{r7, lr}
 800f67e:	b088      	sub	sp, #32
 800f680:	af00      	add	r7, sp, #0
 800f682:	60f8      	str	r0, [r7, #12]
 800f684:	60b9      	str	r1, [r7, #8]
 800f686:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800f688:	68fb      	ldr	r3, [r7, #12]
 800f68a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f68c:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 800f68e:	2300      	movs	r3, #0
 800f690:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 800f692:	68fb      	ldr	r3, [r7, #12]
 800f694:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800f698:	2b01      	cmp	r3, #1
 800f69a:	d101      	bne.n	800f6a0 <I2C_Slave_ISR_DMA+0x24>
 800f69c:	2302      	movs	r3, #2
 800f69e:	e1c2      	b.n	800fa26 <I2C_Slave_ISR_DMA+0x3aa>
 800f6a0:	68fb      	ldr	r3, [r7, #12]
 800f6a2:	2201      	movs	r2, #1
 800f6a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800f6a8:	68bb      	ldr	r3, [r7, #8]
 800f6aa:	f003 0320 	and.w	r3, r3, #32
 800f6ae:	2b00      	cmp	r3, #0
 800f6b0:	d009      	beq.n	800f6c6 <I2C_Slave_ISR_DMA+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800f6b8:	2b00      	cmp	r3, #0
 800f6ba:	d004      	beq.n	800f6c6 <I2C_Slave_ISR_DMA+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 800f6bc:	68b9      	ldr	r1, [r7, #8]
 800f6be:	68f8      	ldr	r0, [r7, #12]
 800f6c0:	f000 fc44 	bl	800ff4c <I2C_ITSlaveCplt>
 800f6c4:	e1aa      	b.n	800fa1c <I2C_Slave_ISR_DMA+0x3a0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800f6c6:	68bb      	ldr	r3, [r7, #8]
 800f6c8:	f003 0310 	and.w	r3, r3, #16
 800f6cc:	2b00      	cmp	r3, #0
 800f6ce:	f000 8197 	beq.w	800fa00 <I2C_Slave_ISR_DMA+0x384>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800f6d2:	687b      	ldr	r3, [r7, #4]
 800f6d4:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800f6d8:	2b00      	cmp	r3, #0
 800f6da:	f000 8191 	beq.w	800fa00 <I2C_Slave_ISR_DMA+0x384>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800f6e4:	2b00      	cmp	r3, #0
 800f6e6:	d105      	bne.n	800f6f4 <I2C_Slave_ISR_DMA+0x78>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 800f6e8:	687b      	ldr	r3, [r7, #4]
 800f6ea:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800f6ee:	2b00      	cmp	r3, #0
 800f6f0:	f000 817f 	beq.w	800f9f2 <I2C_Slave_ISR_DMA+0x376>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 800f6f4:	68fb      	ldr	r3, [r7, #12]
 800f6f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f6f8:	2b00      	cmp	r3, #0
 800f6fa:	d07b      	beq.n	800f7f4 <I2C_Slave_ISR_DMA+0x178>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800f702:	2b00      	cmp	r3, #0
 800f704:	d076      	beq.n	800f7f4 <I2C_Slave_ISR_DMA+0x178>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 800f706:	68fb      	ldr	r3, [r7, #12]
 800f708:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f70a:	681b      	ldr	r3, [r3, #0]
 800f70c:	4a74      	ldr	r2, [pc, #464]	@ (800f8e0 <I2C_Slave_ISR_DMA+0x264>)
 800f70e:	4293      	cmp	r3, r2
 800f710:	d059      	beq.n	800f7c6 <I2C_Slave_ISR_DMA+0x14a>
 800f712:	68fb      	ldr	r3, [r7, #12]
 800f714:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f716:	681b      	ldr	r3, [r3, #0]
 800f718:	4a72      	ldr	r2, [pc, #456]	@ (800f8e4 <I2C_Slave_ISR_DMA+0x268>)
 800f71a:	4293      	cmp	r3, r2
 800f71c:	d053      	beq.n	800f7c6 <I2C_Slave_ISR_DMA+0x14a>
 800f71e:	68fb      	ldr	r3, [r7, #12]
 800f720:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f722:	681b      	ldr	r3, [r3, #0]
 800f724:	4a70      	ldr	r2, [pc, #448]	@ (800f8e8 <I2C_Slave_ISR_DMA+0x26c>)
 800f726:	4293      	cmp	r3, r2
 800f728:	d04d      	beq.n	800f7c6 <I2C_Slave_ISR_DMA+0x14a>
 800f72a:	68fb      	ldr	r3, [r7, #12]
 800f72c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f72e:	681b      	ldr	r3, [r3, #0]
 800f730:	4a6e      	ldr	r2, [pc, #440]	@ (800f8ec <I2C_Slave_ISR_DMA+0x270>)
 800f732:	4293      	cmp	r3, r2
 800f734:	d047      	beq.n	800f7c6 <I2C_Slave_ISR_DMA+0x14a>
 800f736:	68fb      	ldr	r3, [r7, #12]
 800f738:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f73a:	681b      	ldr	r3, [r3, #0]
 800f73c:	4a6c      	ldr	r2, [pc, #432]	@ (800f8f0 <I2C_Slave_ISR_DMA+0x274>)
 800f73e:	4293      	cmp	r3, r2
 800f740:	d041      	beq.n	800f7c6 <I2C_Slave_ISR_DMA+0x14a>
 800f742:	68fb      	ldr	r3, [r7, #12]
 800f744:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f746:	681b      	ldr	r3, [r3, #0]
 800f748:	4a6a      	ldr	r2, [pc, #424]	@ (800f8f4 <I2C_Slave_ISR_DMA+0x278>)
 800f74a:	4293      	cmp	r3, r2
 800f74c:	d03b      	beq.n	800f7c6 <I2C_Slave_ISR_DMA+0x14a>
 800f74e:	68fb      	ldr	r3, [r7, #12]
 800f750:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f752:	681b      	ldr	r3, [r3, #0]
 800f754:	4a68      	ldr	r2, [pc, #416]	@ (800f8f8 <I2C_Slave_ISR_DMA+0x27c>)
 800f756:	4293      	cmp	r3, r2
 800f758:	d035      	beq.n	800f7c6 <I2C_Slave_ISR_DMA+0x14a>
 800f75a:	68fb      	ldr	r3, [r7, #12]
 800f75c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f75e:	681b      	ldr	r3, [r3, #0]
 800f760:	4a66      	ldr	r2, [pc, #408]	@ (800f8fc <I2C_Slave_ISR_DMA+0x280>)
 800f762:	4293      	cmp	r3, r2
 800f764:	d02f      	beq.n	800f7c6 <I2C_Slave_ISR_DMA+0x14a>
 800f766:	68fb      	ldr	r3, [r7, #12]
 800f768:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f76a:	681b      	ldr	r3, [r3, #0]
 800f76c:	4a64      	ldr	r2, [pc, #400]	@ (800f900 <I2C_Slave_ISR_DMA+0x284>)
 800f76e:	4293      	cmp	r3, r2
 800f770:	d029      	beq.n	800f7c6 <I2C_Slave_ISR_DMA+0x14a>
 800f772:	68fb      	ldr	r3, [r7, #12]
 800f774:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f776:	681b      	ldr	r3, [r3, #0]
 800f778:	4a62      	ldr	r2, [pc, #392]	@ (800f904 <I2C_Slave_ISR_DMA+0x288>)
 800f77a:	4293      	cmp	r3, r2
 800f77c:	d023      	beq.n	800f7c6 <I2C_Slave_ISR_DMA+0x14a>
 800f77e:	68fb      	ldr	r3, [r7, #12]
 800f780:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f782:	681b      	ldr	r3, [r3, #0]
 800f784:	4a60      	ldr	r2, [pc, #384]	@ (800f908 <I2C_Slave_ISR_DMA+0x28c>)
 800f786:	4293      	cmp	r3, r2
 800f788:	d01d      	beq.n	800f7c6 <I2C_Slave_ISR_DMA+0x14a>
 800f78a:	68fb      	ldr	r3, [r7, #12]
 800f78c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f78e:	681b      	ldr	r3, [r3, #0]
 800f790:	4a5e      	ldr	r2, [pc, #376]	@ (800f90c <I2C_Slave_ISR_DMA+0x290>)
 800f792:	4293      	cmp	r3, r2
 800f794:	d017      	beq.n	800f7c6 <I2C_Slave_ISR_DMA+0x14a>
 800f796:	68fb      	ldr	r3, [r7, #12]
 800f798:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f79a:	681b      	ldr	r3, [r3, #0]
 800f79c:	4a5c      	ldr	r2, [pc, #368]	@ (800f910 <I2C_Slave_ISR_DMA+0x294>)
 800f79e:	4293      	cmp	r3, r2
 800f7a0:	d011      	beq.n	800f7c6 <I2C_Slave_ISR_DMA+0x14a>
 800f7a2:	68fb      	ldr	r3, [r7, #12]
 800f7a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f7a6:	681b      	ldr	r3, [r3, #0]
 800f7a8:	4a5a      	ldr	r2, [pc, #360]	@ (800f914 <I2C_Slave_ISR_DMA+0x298>)
 800f7aa:	4293      	cmp	r3, r2
 800f7ac:	d00b      	beq.n	800f7c6 <I2C_Slave_ISR_DMA+0x14a>
 800f7ae:	68fb      	ldr	r3, [r7, #12]
 800f7b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f7b2:	681b      	ldr	r3, [r3, #0]
 800f7b4:	4a58      	ldr	r2, [pc, #352]	@ (800f918 <I2C_Slave_ISR_DMA+0x29c>)
 800f7b6:	4293      	cmp	r3, r2
 800f7b8:	d005      	beq.n	800f7c6 <I2C_Slave_ISR_DMA+0x14a>
 800f7ba:	68fb      	ldr	r3, [r7, #12]
 800f7bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f7be:	681b      	ldr	r3, [r3, #0]
 800f7c0:	4a56      	ldr	r2, [pc, #344]	@ (800f91c <I2C_Slave_ISR_DMA+0x2a0>)
 800f7c2:	4293      	cmp	r3, r2
 800f7c4:	d109      	bne.n	800f7da <I2C_Slave_ISR_DMA+0x15e>
 800f7c6:	68fb      	ldr	r3, [r7, #12]
 800f7c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f7ca:	681b      	ldr	r3, [r3, #0]
 800f7cc:	685b      	ldr	r3, [r3, #4]
 800f7ce:	2b00      	cmp	r3, #0
 800f7d0:	bf0c      	ite	eq
 800f7d2:	2301      	moveq	r3, #1
 800f7d4:	2300      	movne	r3, #0
 800f7d6:	b2db      	uxtb	r3, r3
 800f7d8:	e008      	b.n	800f7ec <I2C_Slave_ISR_DMA+0x170>
 800f7da:	68fb      	ldr	r3, [r7, #12]
 800f7dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f7de:	681b      	ldr	r3, [r3, #0]
 800f7e0:	685b      	ldr	r3, [r3, #4]
 800f7e2:	2b00      	cmp	r3, #0
 800f7e4:	bf0c      	ite	eq
 800f7e6:	2301      	moveq	r3, #1
 800f7e8:	2300      	movne	r3, #0
 800f7ea:	b2db      	uxtb	r3, r3
 800f7ec:	2b00      	cmp	r3, #0
 800f7ee:	d001      	beq.n	800f7f4 <I2C_Slave_ISR_DMA+0x178>
          {
            treatdmanack = 1U;
 800f7f0:	2301      	movs	r3, #1
 800f7f2:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 800f7f4:	68fb      	ldr	r3, [r7, #12]
 800f7f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f7f8:	2b00      	cmp	r3, #0
 800f7fa:	f000 809e 	beq.w	800f93a <I2C_Slave_ISR_DMA+0x2be>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800f804:	2b00      	cmp	r3, #0
 800f806:	f000 8098 	beq.w	800f93a <I2C_Slave_ISR_DMA+0x2be>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 800f80a:	68fb      	ldr	r3, [r7, #12]
 800f80c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f80e:	681b      	ldr	r3, [r3, #0]
 800f810:	4a33      	ldr	r2, [pc, #204]	@ (800f8e0 <I2C_Slave_ISR_DMA+0x264>)
 800f812:	4293      	cmp	r3, r2
 800f814:	d059      	beq.n	800f8ca <I2C_Slave_ISR_DMA+0x24e>
 800f816:	68fb      	ldr	r3, [r7, #12]
 800f818:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f81a:	681b      	ldr	r3, [r3, #0]
 800f81c:	4a31      	ldr	r2, [pc, #196]	@ (800f8e4 <I2C_Slave_ISR_DMA+0x268>)
 800f81e:	4293      	cmp	r3, r2
 800f820:	d053      	beq.n	800f8ca <I2C_Slave_ISR_DMA+0x24e>
 800f822:	68fb      	ldr	r3, [r7, #12]
 800f824:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f826:	681b      	ldr	r3, [r3, #0]
 800f828:	4a2f      	ldr	r2, [pc, #188]	@ (800f8e8 <I2C_Slave_ISR_DMA+0x26c>)
 800f82a:	4293      	cmp	r3, r2
 800f82c:	d04d      	beq.n	800f8ca <I2C_Slave_ISR_DMA+0x24e>
 800f82e:	68fb      	ldr	r3, [r7, #12]
 800f830:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f832:	681b      	ldr	r3, [r3, #0]
 800f834:	4a2d      	ldr	r2, [pc, #180]	@ (800f8ec <I2C_Slave_ISR_DMA+0x270>)
 800f836:	4293      	cmp	r3, r2
 800f838:	d047      	beq.n	800f8ca <I2C_Slave_ISR_DMA+0x24e>
 800f83a:	68fb      	ldr	r3, [r7, #12]
 800f83c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f83e:	681b      	ldr	r3, [r3, #0]
 800f840:	4a2b      	ldr	r2, [pc, #172]	@ (800f8f0 <I2C_Slave_ISR_DMA+0x274>)
 800f842:	4293      	cmp	r3, r2
 800f844:	d041      	beq.n	800f8ca <I2C_Slave_ISR_DMA+0x24e>
 800f846:	68fb      	ldr	r3, [r7, #12]
 800f848:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f84a:	681b      	ldr	r3, [r3, #0]
 800f84c:	4a29      	ldr	r2, [pc, #164]	@ (800f8f4 <I2C_Slave_ISR_DMA+0x278>)
 800f84e:	4293      	cmp	r3, r2
 800f850:	d03b      	beq.n	800f8ca <I2C_Slave_ISR_DMA+0x24e>
 800f852:	68fb      	ldr	r3, [r7, #12]
 800f854:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f856:	681b      	ldr	r3, [r3, #0]
 800f858:	4a27      	ldr	r2, [pc, #156]	@ (800f8f8 <I2C_Slave_ISR_DMA+0x27c>)
 800f85a:	4293      	cmp	r3, r2
 800f85c:	d035      	beq.n	800f8ca <I2C_Slave_ISR_DMA+0x24e>
 800f85e:	68fb      	ldr	r3, [r7, #12]
 800f860:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f862:	681b      	ldr	r3, [r3, #0]
 800f864:	4a25      	ldr	r2, [pc, #148]	@ (800f8fc <I2C_Slave_ISR_DMA+0x280>)
 800f866:	4293      	cmp	r3, r2
 800f868:	d02f      	beq.n	800f8ca <I2C_Slave_ISR_DMA+0x24e>
 800f86a:	68fb      	ldr	r3, [r7, #12]
 800f86c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f86e:	681b      	ldr	r3, [r3, #0]
 800f870:	4a23      	ldr	r2, [pc, #140]	@ (800f900 <I2C_Slave_ISR_DMA+0x284>)
 800f872:	4293      	cmp	r3, r2
 800f874:	d029      	beq.n	800f8ca <I2C_Slave_ISR_DMA+0x24e>
 800f876:	68fb      	ldr	r3, [r7, #12]
 800f878:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f87a:	681b      	ldr	r3, [r3, #0]
 800f87c:	4a21      	ldr	r2, [pc, #132]	@ (800f904 <I2C_Slave_ISR_DMA+0x288>)
 800f87e:	4293      	cmp	r3, r2
 800f880:	d023      	beq.n	800f8ca <I2C_Slave_ISR_DMA+0x24e>
 800f882:	68fb      	ldr	r3, [r7, #12]
 800f884:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f886:	681b      	ldr	r3, [r3, #0]
 800f888:	4a1f      	ldr	r2, [pc, #124]	@ (800f908 <I2C_Slave_ISR_DMA+0x28c>)
 800f88a:	4293      	cmp	r3, r2
 800f88c:	d01d      	beq.n	800f8ca <I2C_Slave_ISR_DMA+0x24e>
 800f88e:	68fb      	ldr	r3, [r7, #12]
 800f890:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f892:	681b      	ldr	r3, [r3, #0]
 800f894:	4a1d      	ldr	r2, [pc, #116]	@ (800f90c <I2C_Slave_ISR_DMA+0x290>)
 800f896:	4293      	cmp	r3, r2
 800f898:	d017      	beq.n	800f8ca <I2C_Slave_ISR_DMA+0x24e>
 800f89a:	68fb      	ldr	r3, [r7, #12]
 800f89c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f89e:	681b      	ldr	r3, [r3, #0]
 800f8a0:	4a1b      	ldr	r2, [pc, #108]	@ (800f910 <I2C_Slave_ISR_DMA+0x294>)
 800f8a2:	4293      	cmp	r3, r2
 800f8a4:	d011      	beq.n	800f8ca <I2C_Slave_ISR_DMA+0x24e>
 800f8a6:	68fb      	ldr	r3, [r7, #12]
 800f8a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f8aa:	681b      	ldr	r3, [r3, #0]
 800f8ac:	4a19      	ldr	r2, [pc, #100]	@ (800f914 <I2C_Slave_ISR_DMA+0x298>)
 800f8ae:	4293      	cmp	r3, r2
 800f8b0:	d00b      	beq.n	800f8ca <I2C_Slave_ISR_DMA+0x24e>
 800f8b2:	68fb      	ldr	r3, [r7, #12]
 800f8b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f8b6:	681b      	ldr	r3, [r3, #0]
 800f8b8:	4a17      	ldr	r2, [pc, #92]	@ (800f918 <I2C_Slave_ISR_DMA+0x29c>)
 800f8ba:	4293      	cmp	r3, r2
 800f8bc:	d005      	beq.n	800f8ca <I2C_Slave_ISR_DMA+0x24e>
 800f8be:	68fb      	ldr	r3, [r7, #12]
 800f8c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f8c2:	681b      	ldr	r3, [r3, #0]
 800f8c4:	4a15      	ldr	r2, [pc, #84]	@ (800f91c <I2C_Slave_ISR_DMA+0x2a0>)
 800f8c6:	4293      	cmp	r3, r2
 800f8c8:	d12a      	bne.n	800f920 <I2C_Slave_ISR_DMA+0x2a4>
 800f8ca:	68fb      	ldr	r3, [r7, #12]
 800f8cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f8ce:	681b      	ldr	r3, [r3, #0]
 800f8d0:	685b      	ldr	r3, [r3, #4]
 800f8d2:	2b00      	cmp	r3, #0
 800f8d4:	bf0c      	ite	eq
 800f8d6:	2301      	moveq	r3, #1
 800f8d8:	2300      	movne	r3, #0
 800f8da:	b2db      	uxtb	r3, r3
 800f8dc:	e029      	b.n	800f932 <I2C_Slave_ISR_DMA+0x2b6>
 800f8de:	bf00      	nop
 800f8e0:	40020010 	.word	0x40020010
 800f8e4:	40020028 	.word	0x40020028
 800f8e8:	40020040 	.word	0x40020040
 800f8ec:	40020058 	.word	0x40020058
 800f8f0:	40020070 	.word	0x40020070
 800f8f4:	40020088 	.word	0x40020088
 800f8f8:	400200a0 	.word	0x400200a0
 800f8fc:	400200b8 	.word	0x400200b8
 800f900:	40020410 	.word	0x40020410
 800f904:	40020428 	.word	0x40020428
 800f908:	40020440 	.word	0x40020440
 800f90c:	40020458 	.word	0x40020458
 800f910:	40020470 	.word	0x40020470
 800f914:	40020488 	.word	0x40020488
 800f918:	400204a0 	.word	0x400204a0
 800f91c:	400204b8 	.word	0x400204b8
 800f920:	68fb      	ldr	r3, [r7, #12]
 800f922:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f924:	681b      	ldr	r3, [r3, #0]
 800f926:	685b      	ldr	r3, [r3, #4]
 800f928:	2b00      	cmp	r3, #0
 800f92a:	bf0c      	ite	eq
 800f92c:	2301      	moveq	r3, #1
 800f92e:	2300      	movne	r3, #0
 800f930:	b2db      	uxtb	r3, r3
 800f932:	2b00      	cmp	r3, #0
 800f934:	d001      	beq.n	800f93a <I2C_Slave_ISR_DMA+0x2be>
          {
            treatdmanack = 1U;
 800f936:	2301      	movs	r3, #1
 800f938:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 800f93a:	69fb      	ldr	r3, [r7, #28]
 800f93c:	2b01      	cmp	r3, #1
 800f93e:	d128      	bne.n	800f992 <I2C_Slave_ISR_DMA+0x316>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800f940:	68fb      	ldr	r3, [r7, #12]
 800f942:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f946:	b2db      	uxtb	r3, r3
 800f948:	2b28      	cmp	r3, #40	@ 0x28
 800f94a:	d108      	bne.n	800f95e <I2C_Slave_ISR_DMA+0x2e2>
 800f94c:	69bb      	ldr	r3, [r7, #24]
 800f94e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800f952:	d104      	bne.n	800f95e <I2C_Slave_ISR_DMA+0x2e2>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 800f954:	68b9      	ldr	r1, [r7, #8]
 800f956:	68f8      	ldr	r0, [r7, #12]
 800f958:	f000 fd4c 	bl	80103f4 <I2C_ITListenCplt>
 800f95c:	e048      	b.n	800f9f0 <I2C_Slave_ISR_DMA+0x374>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800f95e:	68fb      	ldr	r3, [r7, #12]
 800f960:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f964:	b2db      	uxtb	r3, r3
 800f966:	2b29      	cmp	r3, #41	@ 0x29
 800f968:	d10e      	bne.n	800f988 <I2C_Slave_ISR_DMA+0x30c>
 800f96a:	69bb      	ldr	r3, [r7, #24]
 800f96c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800f970:	d00a      	beq.n	800f988 <I2C_Slave_ISR_DMA+0x30c>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f972:	68fb      	ldr	r3, [r7, #12]
 800f974:	681b      	ldr	r3, [r3, #0]
 800f976:	2210      	movs	r2, #16
 800f978:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 800f97a:	68f8      	ldr	r0, [r7, #12]
 800f97c:	f000 fea5 	bl	80106ca <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 800f980:	68f8      	ldr	r0, [r7, #12]
 800f982:	f000 f9be 	bl	800fd02 <I2C_ITSlaveSeqCplt>
 800f986:	e033      	b.n	800f9f0 <I2C_Slave_ISR_DMA+0x374>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f988:	68fb      	ldr	r3, [r7, #12]
 800f98a:	681b      	ldr	r3, [r3, #0]
 800f98c:	2210      	movs	r2, #16
 800f98e:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 800f990:	e034      	b.n	800f9fc <I2C_Slave_ISR_DMA+0x380>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f992:	68fb      	ldr	r3, [r7, #12]
 800f994:	681b      	ldr	r3, [r3, #0]
 800f996:	2210      	movs	r2, #16
 800f998:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800f99a:	68fb      	ldr	r3, [r7, #12]
 800f99c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f99e:	f043 0204 	orr.w	r2, r3, #4
 800f9a2:	68fb      	ldr	r3, [r7, #12]
 800f9a4:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 800f9a6:	68fb      	ldr	r3, [r7, #12]
 800f9a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f9ac:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800f9ae:	69bb      	ldr	r3, [r7, #24]
 800f9b0:	2b00      	cmp	r3, #0
 800f9b2:	d003      	beq.n	800f9bc <I2C_Slave_ISR_DMA+0x340>
 800f9b4:	69bb      	ldr	r3, [r7, #24]
 800f9b6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800f9ba:	d11f      	bne.n	800f9fc <I2C_Slave_ISR_DMA+0x380>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800f9bc:	7dfb      	ldrb	r3, [r7, #23]
 800f9be:	2b21      	cmp	r3, #33	@ 0x21
 800f9c0:	d002      	beq.n	800f9c8 <I2C_Slave_ISR_DMA+0x34c>
 800f9c2:	7dfb      	ldrb	r3, [r7, #23]
 800f9c4:	2b29      	cmp	r3, #41	@ 0x29
 800f9c6:	d103      	bne.n	800f9d0 <I2C_Slave_ISR_DMA+0x354>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800f9c8:	68fb      	ldr	r3, [r7, #12]
 800f9ca:	2221      	movs	r2, #33	@ 0x21
 800f9cc:	631a      	str	r2, [r3, #48]	@ 0x30
 800f9ce:	e008      	b.n	800f9e2 <I2C_Slave_ISR_DMA+0x366>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800f9d0:	7dfb      	ldrb	r3, [r7, #23]
 800f9d2:	2b22      	cmp	r3, #34	@ 0x22
 800f9d4:	d002      	beq.n	800f9dc <I2C_Slave_ISR_DMA+0x360>
 800f9d6:	7dfb      	ldrb	r3, [r7, #23]
 800f9d8:	2b2a      	cmp	r3, #42	@ 0x2a
 800f9da:	d102      	bne.n	800f9e2 <I2C_Slave_ISR_DMA+0x366>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800f9dc:	68fb      	ldr	r3, [r7, #12]
 800f9de:	2222      	movs	r2, #34	@ 0x22
 800f9e0:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 800f9e2:	68fb      	ldr	r3, [r7, #12]
 800f9e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f9e6:	4619      	mov	r1, r3
 800f9e8:	68f8      	ldr	r0, [r7, #12]
 800f9ea:	f000 fd57 	bl	801049c <I2C_ITError>
      if (treatdmanack == 1U)
 800f9ee:	e005      	b.n	800f9fc <I2C_Slave_ISR_DMA+0x380>
 800f9f0:	e004      	b.n	800f9fc <I2C_Slave_ISR_DMA+0x380>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f9f2:	68fb      	ldr	r3, [r7, #12]
 800f9f4:	681b      	ldr	r3, [r3, #0]
 800f9f6:	2210      	movs	r2, #16
 800f9f8:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800f9fa:	e00f      	b.n	800fa1c <I2C_Slave_ISR_DMA+0x3a0>
      if (treatdmanack == 1U)
 800f9fc:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800f9fe:	e00d      	b.n	800fa1c <I2C_Slave_ISR_DMA+0x3a0>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800fa00:	68bb      	ldr	r3, [r7, #8]
 800fa02:	f003 0308 	and.w	r3, r3, #8
 800fa06:	2b00      	cmp	r3, #0
 800fa08:	d008      	beq.n	800fa1c <I2C_Slave_ISR_DMA+0x3a0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800fa0a:	687b      	ldr	r3, [r7, #4]
 800fa0c:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800fa10:	2b00      	cmp	r3, #0
 800fa12:	d003      	beq.n	800fa1c <I2C_Slave_ISR_DMA+0x3a0>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 800fa14:	68b9      	ldr	r1, [r7, #8]
 800fa16:	68f8      	ldr	r0, [r7, #12]
 800fa18:	f000 f8b2 	bl	800fb80 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800fa1c:	68fb      	ldr	r3, [r7, #12]
 800fa1e:	2200      	movs	r2, #0
 800fa20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800fa24:	2300      	movs	r3, #0
}
 800fa26:	4618      	mov	r0, r3
 800fa28:	3720      	adds	r7, #32
 800fa2a:	46bd      	mov	sp, r7
 800fa2c:	bd80      	pop	{r7, pc}
 800fa2e:	bf00      	nop

0800fa30 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800fa30:	b580      	push	{r7, lr}
 800fa32:	b086      	sub	sp, #24
 800fa34:	af02      	add	r7, sp, #8
 800fa36:	60f8      	str	r0, [r7, #12]
 800fa38:	4608      	mov	r0, r1
 800fa3a:	4611      	mov	r1, r2
 800fa3c:	461a      	mov	r2, r3
 800fa3e:	4603      	mov	r3, r0
 800fa40:	817b      	strh	r3, [r7, #10]
 800fa42:	460b      	mov	r3, r1
 800fa44:	813b      	strh	r3, [r7, #8]
 800fa46:	4613      	mov	r3, r2
 800fa48:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800fa4a:	88fb      	ldrh	r3, [r7, #6]
 800fa4c:	b2da      	uxtb	r2, r3
 800fa4e:	8979      	ldrh	r1, [r7, #10]
 800fa50:	4b20      	ldr	r3, [pc, #128]	@ (800fad4 <I2C_RequestMemoryWrite+0xa4>)
 800fa52:	9300      	str	r3, [sp, #0]
 800fa54:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800fa58:	68f8      	ldr	r0, [r7, #12]
 800fa5a:	f001 f83b 	bl	8010ad4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800fa5e:	69fa      	ldr	r2, [r7, #28]
 800fa60:	69b9      	ldr	r1, [r7, #24]
 800fa62:	68f8      	ldr	r0, [r7, #12]
 800fa64:	f000 fecc 	bl	8010800 <I2C_WaitOnTXISFlagUntilTimeout>
 800fa68:	4603      	mov	r3, r0
 800fa6a:	2b00      	cmp	r3, #0
 800fa6c:	d001      	beq.n	800fa72 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800fa6e:	2301      	movs	r3, #1
 800fa70:	e02c      	b.n	800facc <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800fa72:	88fb      	ldrh	r3, [r7, #6]
 800fa74:	2b01      	cmp	r3, #1
 800fa76:	d105      	bne.n	800fa84 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800fa78:	893b      	ldrh	r3, [r7, #8]
 800fa7a:	b2da      	uxtb	r2, r3
 800fa7c:	68fb      	ldr	r3, [r7, #12]
 800fa7e:	681b      	ldr	r3, [r3, #0]
 800fa80:	629a      	str	r2, [r3, #40]	@ 0x28
 800fa82:	e015      	b.n	800fab0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800fa84:	893b      	ldrh	r3, [r7, #8]
 800fa86:	0a1b      	lsrs	r3, r3, #8
 800fa88:	b29b      	uxth	r3, r3
 800fa8a:	b2da      	uxtb	r2, r3
 800fa8c:	68fb      	ldr	r3, [r7, #12]
 800fa8e:	681b      	ldr	r3, [r3, #0]
 800fa90:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800fa92:	69fa      	ldr	r2, [r7, #28]
 800fa94:	69b9      	ldr	r1, [r7, #24]
 800fa96:	68f8      	ldr	r0, [r7, #12]
 800fa98:	f000 feb2 	bl	8010800 <I2C_WaitOnTXISFlagUntilTimeout>
 800fa9c:	4603      	mov	r3, r0
 800fa9e:	2b00      	cmp	r3, #0
 800faa0:	d001      	beq.n	800faa6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800faa2:	2301      	movs	r3, #1
 800faa4:	e012      	b.n	800facc <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800faa6:	893b      	ldrh	r3, [r7, #8]
 800faa8:	b2da      	uxtb	r2, r3
 800faaa:	68fb      	ldr	r3, [r7, #12]
 800faac:	681b      	ldr	r3, [r3, #0]
 800faae:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800fab0:	69fb      	ldr	r3, [r7, #28]
 800fab2:	9300      	str	r3, [sp, #0]
 800fab4:	69bb      	ldr	r3, [r7, #24]
 800fab6:	2200      	movs	r2, #0
 800fab8:	2180      	movs	r1, #128	@ 0x80
 800faba:	68f8      	ldr	r0, [r7, #12]
 800fabc:	f000 fe47 	bl	801074e <I2C_WaitOnFlagUntilTimeout>
 800fac0:	4603      	mov	r3, r0
 800fac2:	2b00      	cmp	r3, #0
 800fac4:	d001      	beq.n	800faca <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800fac6:	2301      	movs	r3, #1
 800fac8:	e000      	b.n	800facc <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800faca:	2300      	movs	r3, #0
}
 800facc:	4618      	mov	r0, r3
 800face:	3710      	adds	r7, #16
 800fad0:	46bd      	mov	sp, r7
 800fad2:	bd80      	pop	{r7, pc}
 800fad4:	80002000 	.word	0x80002000

0800fad8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800fad8:	b580      	push	{r7, lr}
 800fada:	b086      	sub	sp, #24
 800fadc:	af02      	add	r7, sp, #8
 800fade:	60f8      	str	r0, [r7, #12]
 800fae0:	4608      	mov	r0, r1
 800fae2:	4611      	mov	r1, r2
 800fae4:	461a      	mov	r2, r3
 800fae6:	4603      	mov	r3, r0
 800fae8:	817b      	strh	r3, [r7, #10]
 800faea:	460b      	mov	r3, r1
 800faec:	813b      	strh	r3, [r7, #8]
 800faee:	4613      	mov	r3, r2
 800faf0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800faf2:	88fb      	ldrh	r3, [r7, #6]
 800faf4:	b2da      	uxtb	r2, r3
 800faf6:	8979      	ldrh	r1, [r7, #10]
 800faf8:	4b20      	ldr	r3, [pc, #128]	@ (800fb7c <I2C_RequestMemoryRead+0xa4>)
 800fafa:	9300      	str	r3, [sp, #0]
 800fafc:	2300      	movs	r3, #0
 800fafe:	68f8      	ldr	r0, [r7, #12]
 800fb00:	f000 ffe8 	bl	8010ad4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800fb04:	69fa      	ldr	r2, [r7, #28]
 800fb06:	69b9      	ldr	r1, [r7, #24]
 800fb08:	68f8      	ldr	r0, [r7, #12]
 800fb0a:	f000 fe79 	bl	8010800 <I2C_WaitOnTXISFlagUntilTimeout>
 800fb0e:	4603      	mov	r3, r0
 800fb10:	2b00      	cmp	r3, #0
 800fb12:	d001      	beq.n	800fb18 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800fb14:	2301      	movs	r3, #1
 800fb16:	e02c      	b.n	800fb72 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800fb18:	88fb      	ldrh	r3, [r7, #6]
 800fb1a:	2b01      	cmp	r3, #1
 800fb1c:	d105      	bne.n	800fb2a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800fb1e:	893b      	ldrh	r3, [r7, #8]
 800fb20:	b2da      	uxtb	r2, r3
 800fb22:	68fb      	ldr	r3, [r7, #12]
 800fb24:	681b      	ldr	r3, [r3, #0]
 800fb26:	629a      	str	r2, [r3, #40]	@ 0x28
 800fb28:	e015      	b.n	800fb56 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800fb2a:	893b      	ldrh	r3, [r7, #8]
 800fb2c:	0a1b      	lsrs	r3, r3, #8
 800fb2e:	b29b      	uxth	r3, r3
 800fb30:	b2da      	uxtb	r2, r3
 800fb32:	68fb      	ldr	r3, [r7, #12]
 800fb34:	681b      	ldr	r3, [r3, #0]
 800fb36:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800fb38:	69fa      	ldr	r2, [r7, #28]
 800fb3a:	69b9      	ldr	r1, [r7, #24]
 800fb3c:	68f8      	ldr	r0, [r7, #12]
 800fb3e:	f000 fe5f 	bl	8010800 <I2C_WaitOnTXISFlagUntilTimeout>
 800fb42:	4603      	mov	r3, r0
 800fb44:	2b00      	cmp	r3, #0
 800fb46:	d001      	beq.n	800fb4c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800fb48:	2301      	movs	r3, #1
 800fb4a:	e012      	b.n	800fb72 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800fb4c:	893b      	ldrh	r3, [r7, #8]
 800fb4e:	b2da      	uxtb	r2, r3
 800fb50:	68fb      	ldr	r3, [r7, #12]
 800fb52:	681b      	ldr	r3, [r3, #0]
 800fb54:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800fb56:	69fb      	ldr	r3, [r7, #28]
 800fb58:	9300      	str	r3, [sp, #0]
 800fb5a:	69bb      	ldr	r3, [r7, #24]
 800fb5c:	2200      	movs	r2, #0
 800fb5e:	2140      	movs	r1, #64	@ 0x40
 800fb60:	68f8      	ldr	r0, [r7, #12]
 800fb62:	f000 fdf4 	bl	801074e <I2C_WaitOnFlagUntilTimeout>
 800fb66:	4603      	mov	r3, r0
 800fb68:	2b00      	cmp	r3, #0
 800fb6a:	d001      	beq.n	800fb70 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800fb6c:	2301      	movs	r3, #1
 800fb6e:	e000      	b.n	800fb72 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800fb70:	2300      	movs	r3, #0
}
 800fb72:	4618      	mov	r0, r3
 800fb74:	3710      	adds	r7, #16
 800fb76:	46bd      	mov	sp, r7
 800fb78:	bd80      	pop	{r7, pc}
 800fb7a:	bf00      	nop
 800fb7c:	80002000 	.word	0x80002000

0800fb80 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800fb80:	b580      	push	{r7, lr}
 800fb82:	b084      	sub	sp, #16
 800fb84:	af00      	add	r7, sp, #0
 800fb86:	6078      	str	r0, [r7, #4]
 800fb88:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800fb90:	b2db      	uxtb	r3, r3
 800fb92:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800fb96:	2b28      	cmp	r3, #40	@ 0x28
 800fb98:	d16a      	bne.n	800fc70 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800fb9a:	687b      	ldr	r3, [r7, #4]
 800fb9c:	681b      	ldr	r3, [r3, #0]
 800fb9e:	699b      	ldr	r3, [r3, #24]
 800fba0:	0c1b      	lsrs	r3, r3, #16
 800fba2:	b2db      	uxtb	r3, r3
 800fba4:	f003 0301 	and.w	r3, r3, #1
 800fba8:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800fbaa:	687b      	ldr	r3, [r7, #4]
 800fbac:	681b      	ldr	r3, [r3, #0]
 800fbae:	699b      	ldr	r3, [r3, #24]
 800fbb0:	0c1b      	lsrs	r3, r3, #16
 800fbb2:	b29b      	uxth	r3, r3
 800fbb4:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800fbb8:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800fbba:	687b      	ldr	r3, [r7, #4]
 800fbbc:	681b      	ldr	r3, [r3, #0]
 800fbbe:	689b      	ldr	r3, [r3, #8]
 800fbc0:	b29b      	uxth	r3, r3
 800fbc2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800fbc6:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800fbc8:	687b      	ldr	r3, [r7, #4]
 800fbca:	681b      	ldr	r3, [r3, #0]
 800fbcc:	68db      	ldr	r3, [r3, #12]
 800fbce:	b29b      	uxth	r3, r3
 800fbd0:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800fbd4:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	68db      	ldr	r3, [r3, #12]
 800fbda:	2b02      	cmp	r3, #2
 800fbdc:	d138      	bne.n	800fc50 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800fbde:	897b      	ldrh	r3, [r7, #10]
 800fbe0:	09db      	lsrs	r3, r3, #7
 800fbe2:	b29a      	uxth	r2, r3
 800fbe4:	89bb      	ldrh	r3, [r7, #12]
 800fbe6:	4053      	eors	r3, r2
 800fbe8:	b29b      	uxth	r3, r3
 800fbea:	f003 0306 	and.w	r3, r3, #6
 800fbee:	2b00      	cmp	r3, #0
 800fbf0:	d11c      	bne.n	800fc2c <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800fbf2:	897b      	ldrh	r3, [r7, #10]
 800fbf4:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800fbf6:	687b      	ldr	r3, [r7, #4]
 800fbf8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800fbfa:	1c5a      	adds	r2, r3, #1
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 800fc00:	687b      	ldr	r3, [r7, #4]
 800fc02:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800fc04:	2b02      	cmp	r3, #2
 800fc06:	d13b      	bne.n	800fc80 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800fc08:	687b      	ldr	r3, [r7, #4]
 800fc0a:	2200      	movs	r2, #0
 800fc0c:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800fc0e:	687b      	ldr	r3, [r7, #4]
 800fc10:	681b      	ldr	r3, [r3, #0]
 800fc12:	2208      	movs	r2, #8
 800fc14:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800fc16:	687b      	ldr	r3, [r7, #4]
 800fc18:	2200      	movs	r2, #0
 800fc1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800fc1e:	89ba      	ldrh	r2, [r7, #12]
 800fc20:	7bfb      	ldrb	r3, [r7, #15]
 800fc22:	4619      	mov	r1, r3
 800fc24:	6878      	ldr	r0, [r7, #4]
 800fc26:	f7ff f8c3 	bl	800edb0 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800fc2a:	e029      	b.n	800fc80 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800fc2c:	893b      	ldrh	r3, [r7, #8]
 800fc2e:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800fc30:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800fc34:	6878      	ldr	r0, [r7, #4]
 800fc36:	f001 f803 	bl	8010c40 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	2200      	movs	r2, #0
 800fc3e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800fc42:	89ba      	ldrh	r2, [r7, #12]
 800fc44:	7bfb      	ldrb	r3, [r7, #15]
 800fc46:	4619      	mov	r1, r3
 800fc48:	6878      	ldr	r0, [r7, #4]
 800fc4a:	f7ff f8b1 	bl	800edb0 <HAL_I2C_AddrCallback>
}
 800fc4e:	e017      	b.n	800fc80 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800fc50:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800fc54:	6878      	ldr	r0, [r7, #4]
 800fc56:	f000 fff3 	bl	8010c40 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800fc5a:	687b      	ldr	r3, [r7, #4]
 800fc5c:	2200      	movs	r2, #0
 800fc5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800fc62:	89ba      	ldrh	r2, [r7, #12]
 800fc64:	7bfb      	ldrb	r3, [r7, #15]
 800fc66:	4619      	mov	r1, r3
 800fc68:	6878      	ldr	r0, [r7, #4]
 800fc6a:	f7ff f8a1 	bl	800edb0 <HAL_I2C_AddrCallback>
}
 800fc6e:	e007      	b.n	800fc80 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800fc70:	687b      	ldr	r3, [r7, #4]
 800fc72:	681b      	ldr	r3, [r3, #0]
 800fc74:	2208      	movs	r2, #8
 800fc76:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800fc78:	687b      	ldr	r3, [r7, #4]
 800fc7a:	2200      	movs	r2, #0
 800fc7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 800fc80:	bf00      	nop
 800fc82:	3710      	adds	r7, #16
 800fc84:	46bd      	mov	sp, r7
 800fc86:	bd80      	pop	{r7, pc}

0800fc88 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800fc88:	b580      	push	{r7, lr}
 800fc8a:	b082      	sub	sp, #8
 800fc8c:	af00      	add	r7, sp, #0
 800fc8e:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800fc90:	687b      	ldr	r3, [r7, #4]
 800fc92:	2200      	movs	r2, #0
 800fc94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800fc98:	687b      	ldr	r3, [r7, #4]
 800fc9a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800fc9e:	b2db      	uxtb	r3, r3
 800fca0:	2b21      	cmp	r3, #33	@ 0x21
 800fca2:	d115      	bne.n	800fcd0 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800fca4:	687b      	ldr	r3, [r7, #4]
 800fca6:	2220      	movs	r2, #32
 800fca8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800fcac:	687b      	ldr	r3, [r7, #4]
 800fcae:	2211      	movs	r2, #17
 800fcb0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 800fcb2:	687b      	ldr	r3, [r7, #4]
 800fcb4:	2200      	movs	r2, #0
 800fcb6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800fcb8:	2101      	movs	r1, #1
 800fcba:	6878      	ldr	r0, [r7, #4]
 800fcbc:	f000 ffc0 	bl	8010c40 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	2200      	movs	r2, #0
 800fcc4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 800fcc8:	6878      	ldr	r0, [r7, #4]
 800fcca:	f7ff f849 	bl	800ed60 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800fcce:	e014      	b.n	800fcfa <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 800fcd0:	687b      	ldr	r3, [r7, #4]
 800fcd2:	2220      	movs	r2, #32
 800fcd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800fcd8:	687b      	ldr	r3, [r7, #4]
 800fcda:	2212      	movs	r2, #18
 800fcdc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 800fcde:	687b      	ldr	r3, [r7, #4]
 800fce0:	2200      	movs	r2, #0
 800fce2:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800fce4:	2102      	movs	r1, #2
 800fce6:	6878      	ldr	r0, [r7, #4]
 800fce8:	f000 ffaa 	bl	8010c40 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800fcec:	687b      	ldr	r3, [r7, #4]
 800fcee:	2200      	movs	r2, #0
 800fcf0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 800fcf4:	6878      	ldr	r0, [r7, #4]
 800fcf6:	f7ff f83d 	bl	800ed74 <HAL_I2C_MasterRxCpltCallback>
}
 800fcfa:	bf00      	nop
 800fcfc:	3708      	adds	r7, #8
 800fcfe:	46bd      	mov	sp, r7
 800fd00:	bd80      	pop	{r7, pc}

0800fd02 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800fd02:	b580      	push	{r7, lr}
 800fd04:	b084      	sub	sp, #16
 800fd06:	af00      	add	r7, sp, #0
 800fd08:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800fd0a:	687b      	ldr	r3, [r7, #4]
 800fd0c:	681b      	ldr	r3, [r3, #0]
 800fd0e:	681b      	ldr	r3, [r3, #0]
 800fd10:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800fd12:	687b      	ldr	r3, [r7, #4]
 800fd14:	2200      	movs	r2, #0
 800fd16:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800fd1a:	68fb      	ldr	r3, [r7, #12]
 800fd1c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800fd20:	2b00      	cmp	r3, #0
 800fd22:	d008      	beq.n	800fd36 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800fd24:	687b      	ldr	r3, [r7, #4]
 800fd26:	681b      	ldr	r3, [r3, #0]
 800fd28:	681a      	ldr	r2, [r3, #0]
 800fd2a:	687b      	ldr	r3, [r7, #4]
 800fd2c:	681b      	ldr	r3, [r3, #0]
 800fd2e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800fd32:	601a      	str	r2, [r3, #0]
 800fd34:	e00c      	b.n	800fd50 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800fd36:	68fb      	ldr	r3, [r7, #12]
 800fd38:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800fd3c:	2b00      	cmp	r3, #0
 800fd3e:	d007      	beq.n	800fd50 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	681b      	ldr	r3, [r3, #0]
 800fd44:	681a      	ldr	r2, [r3, #0]
 800fd46:	687b      	ldr	r3, [r7, #4]
 800fd48:	681b      	ldr	r3, [r3, #0]
 800fd4a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800fd4e:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800fd50:	687b      	ldr	r3, [r7, #4]
 800fd52:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800fd56:	b2db      	uxtb	r3, r3
 800fd58:	2b29      	cmp	r3, #41	@ 0x29
 800fd5a:	d112      	bne.n	800fd82 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800fd5c:	687b      	ldr	r3, [r7, #4]
 800fd5e:	2228      	movs	r2, #40	@ 0x28
 800fd60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	2221      	movs	r2, #33	@ 0x21
 800fd68:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800fd6a:	2101      	movs	r1, #1
 800fd6c:	6878      	ldr	r0, [r7, #4]
 800fd6e:	f000 ff67 	bl	8010c40 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	2200      	movs	r2, #0
 800fd76:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800fd7a:	6878      	ldr	r0, [r7, #4]
 800fd7c:	f7ff f804 	bl	800ed88 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800fd80:	e017      	b.n	800fdb2 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800fd82:	687b      	ldr	r3, [r7, #4]
 800fd84:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800fd88:	b2db      	uxtb	r3, r3
 800fd8a:	2b2a      	cmp	r3, #42	@ 0x2a
 800fd8c:	d111      	bne.n	800fdb2 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800fd8e:	687b      	ldr	r3, [r7, #4]
 800fd90:	2228      	movs	r2, #40	@ 0x28
 800fd92:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800fd96:	687b      	ldr	r3, [r7, #4]
 800fd98:	2222      	movs	r2, #34	@ 0x22
 800fd9a:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800fd9c:	2102      	movs	r1, #2
 800fd9e:	6878      	ldr	r0, [r7, #4]
 800fda0:	f000 ff4e 	bl	8010c40 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800fda4:	687b      	ldr	r3, [r7, #4]
 800fda6:	2200      	movs	r2, #0
 800fda8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800fdac:	6878      	ldr	r0, [r7, #4]
 800fdae:	f7fe fff5 	bl	800ed9c <HAL_I2C_SlaveRxCpltCallback>
}
 800fdb2:	bf00      	nop
 800fdb4:	3710      	adds	r7, #16
 800fdb6:	46bd      	mov	sp, r7
 800fdb8:	bd80      	pop	{r7, pc}
	...

0800fdbc <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800fdbc:	b580      	push	{r7, lr}
 800fdbe:	b086      	sub	sp, #24
 800fdc0:	af00      	add	r7, sp, #0
 800fdc2:	6078      	str	r0, [r7, #4]
 800fdc4:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 800fdc6:	683b      	ldr	r3, [r7, #0]
 800fdc8:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800fdca:	687b      	ldr	r3, [r7, #4]
 800fdcc:	681b      	ldr	r3, [r3, #0]
 800fdce:	2220      	movs	r2, #32
 800fdd0:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800fdd2:	687b      	ldr	r3, [r7, #4]
 800fdd4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800fdd8:	b2db      	uxtb	r3, r3
 800fdda:	2b21      	cmp	r3, #33	@ 0x21
 800fddc:	d107      	bne.n	800fdee <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800fdde:	2101      	movs	r1, #1
 800fde0:	6878      	ldr	r0, [r7, #4]
 800fde2:	f000 ff2d 	bl	8010c40 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800fde6:	687b      	ldr	r3, [r7, #4]
 800fde8:	2211      	movs	r2, #17
 800fdea:	631a      	str	r2, [r3, #48]	@ 0x30
 800fdec:	e00c      	b.n	800fe08 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800fdee:	687b      	ldr	r3, [r7, #4]
 800fdf0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800fdf4:	b2db      	uxtb	r3, r3
 800fdf6:	2b22      	cmp	r3, #34	@ 0x22
 800fdf8:	d106      	bne.n	800fe08 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800fdfa:	2102      	movs	r1, #2
 800fdfc:	6878      	ldr	r0, [r7, #4]
 800fdfe:	f000 ff1f 	bl	8010c40 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800fe02:	687b      	ldr	r3, [r7, #4]
 800fe04:	2212      	movs	r2, #18
 800fe06:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800fe08:	687b      	ldr	r3, [r7, #4]
 800fe0a:	681b      	ldr	r3, [r3, #0]
 800fe0c:	6859      	ldr	r1, [r3, #4]
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	681a      	ldr	r2, [r3, #0]
 800fe12:	4b4c      	ldr	r3, [pc, #304]	@ (800ff44 <I2C_ITMasterCplt+0x188>)
 800fe14:	400b      	ands	r3, r1
 800fe16:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 800fe18:	687b      	ldr	r3, [r7, #4]
 800fe1a:	2200      	movs	r2, #0
 800fe1c:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800fe1e:	687b      	ldr	r3, [r7, #4]
 800fe20:	4a49      	ldr	r2, [pc, #292]	@ (800ff48 <I2C_ITMasterCplt+0x18c>)
 800fe22:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 800fe24:	697b      	ldr	r3, [r7, #20]
 800fe26:	f003 0310 	and.w	r3, r3, #16
 800fe2a:	2b00      	cmp	r3, #0
 800fe2c:	d009      	beq.n	800fe42 <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800fe2e:	687b      	ldr	r3, [r7, #4]
 800fe30:	681b      	ldr	r3, [r3, #0]
 800fe32:	2210      	movs	r2, #16
 800fe34:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fe3a:	f043 0204 	orr.w	r2, r3, #4
 800fe3e:	687b      	ldr	r3, [r7, #4]
 800fe40:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 800fe42:	687b      	ldr	r3, [r7, #4]
 800fe44:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800fe48:	b2db      	uxtb	r3, r3
 800fe4a:	2b60      	cmp	r3, #96	@ 0x60
 800fe4c:	d10a      	bne.n	800fe64 <I2C_ITMasterCplt+0xa8>
 800fe4e:	697b      	ldr	r3, [r7, #20]
 800fe50:	f003 0304 	and.w	r3, r3, #4
 800fe54:	2b00      	cmp	r3, #0
 800fe56:	d005      	beq.n	800fe64 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 800fe58:	687b      	ldr	r3, [r7, #4]
 800fe5a:	681b      	ldr	r3, [r3, #0]
 800fe5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fe5e:	b2db      	uxtb	r3, r3
 800fe60:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 800fe62:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800fe64:	6878      	ldr	r0, [r7, #4]
 800fe66:	f000 fc30 	bl	80106ca <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800fe6a:	687b      	ldr	r3, [r7, #4]
 800fe6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fe6e:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 800fe70:	687b      	ldr	r3, [r7, #4]
 800fe72:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800fe76:	b2db      	uxtb	r3, r3
 800fe78:	2b60      	cmp	r3, #96	@ 0x60
 800fe7a:	d002      	beq.n	800fe82 <I2C_ITMasterCplt+0xc6>
 800fe7c:	693b      	ldr	r3, [r7, #16]
 800fe7e:	2b00      	cmp	r3, #0
 800fe80:	d006      	beq.n	800fe90 <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800fe82:	687b      	ldr	r3, [r7, #4]
 800fe84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fe86:	4619      	mov	r1, r3
 800fe88:	6878      	ldr	r0, [r7, #4]
 800fe8a:	f000 fb07 	bl	801049c <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 800fe8e:	e054      	b.n	800ff3a <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800fe96:	b2db      	uxtb	r3, r3
 800fe98:	2b21      	cmp	r3, #33	@ 0x21
 800fe9a:	d124      	bne.n	800fee6 <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 800fe9c:	687b      	ldr	r3, [r7, #4]
 800fe9e:	2220      	movs	r2, #32
 800fea0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800fea4:	687b      	ldr	r3, [r7, #4]
 800fea6:	2200      	movs	r2, #0
 800fea8:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800feaa:	687b      	ldr	r3, [r7, #4]
 800feac:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800feb0:	b2db      	uxtb	r3, r3
 800feb2:	2b40      	cmp	r3, #64	@ 0x40
 800feb4:	d10b      	bne.n	800fece <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	2200      	movs	r2, #0
 800feba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800febe:	687b      	ldr	r3, [r7, #4]
 800fec0:	2200      	movs	r2, #0
 800fec2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 800fec6:	6878      	ldr	r0, [r7, #4]
 800fec8:	f7fe ff8a 	bl	800ede0 <HAL_I2C_MemTxCpltCallback>
}
 800fecc:	e035      	b.n	800ff3a <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	2200      	movs	r2, #0
 800fed2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800fed6:	687b      	ldr	r3, [r7, #4]
 800fed8:	2200      	movs	r2, #0
 800feda:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800fede:	6878      	ldr	r0, [r7, #4]
 800fee0:	f7fe ff3e 	bl	800ed60 <HAL_I2C_MasterTxCpltCallback>
}
 800fee4:	e029      	b.n	800ff3a <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800fee6:	687b      	ldr	r3, [r7, #4]
 800fee8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800feec:	b2db      	uxtb	r3, r3
 800feee:	2b22      	cmp	r3, #34	@ 0x22
 800fef0:	d123      	bne.n	800ff3a <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 800fef2:	687b      	ldr	r3, [r7, #4]
 800fef4:	2220      	movs	r2, #32
 800fef6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800fefa:	687b      	ldr	r3, [r7, #4]
 800fefc:	2200      	movs	r2, #0
 800fefe:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800ff06:	b2db      	uxtb	r3, r3
 800ff08:	2b40      	cmp	r3, #64	@ 0x40
 800ff0a:	d10b      	bne.n	800ff24 <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800ff0c:	687b      	ldr	r3, [r7, #4]
 800ff0e:	2200      	movs	r2, #0
 800ff10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800ff14:	687b      	ldr	r3, [r7, #4]
 800ff16:	2200      	movs	r2, #0
 800ff18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 800ff1c:	6878      	ldr	r0, [r7, #4]
 800ff1e:	f7f6 fa2f 	bl	8006380 <HAL_I2C_MemRxCpltCallback>
}
 800ff22:	e00a      	b.n	800ff3a <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	2200      	movs	r2, #0
 800ff28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	2200      	movs	r2, #0
 800ff30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800ff34:	6878      	ldr	r0, [r7, #4]
 800ff36:	f7fe ff1d 	bl	800ed74 <HAL_I2C_MasterRxCpltCallback>
}
 800ff3a:	bf00      	nop
 800ff3c:	3718      	adds	r7, #24
 800ff3e:	46bd      	mov	sp, r7
 800ff40:	bd80      	pop	{r7, pc}
 800ff42:	bf00      	nop
 800ff44:	fe00e800 	.word	0xfe00e800
 800ff48:	ffff0000 	.word	0xffff0000

0800ff4c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800ff4c:	b580      	push	{r7, lr}
 800ff4e:	b086      	sub	sp, #24
 800ff50:	af00      	add	r7, sp, #0
 800ff52:	6078      	str	r0, [r7, #4]
 800ff54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800ff56:	687b      	ldr	r3, [r7, #4]
 800ff58:	681b      	ldr	r3, [r3, #0]
 800ff5a:	681b      	ldr	r3, [r3, #0]
 800ff5c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800ff5e:	683b      	ldr	r3, [r7, #0]
 800ff60:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 800ff62:	687b      	ldr	r3, [r7, #4]
 800ff64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ff66:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800ff68:	687b      	ldr	r3, [r7, #4]
 800ff6a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ff6e:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ff70:	687b      	ldr	r3, [r7, #4]
 800ff72:	681b      	ldr	r3, [r3, #0]
 800ff74:	2220      	movs	r2, #32
 800ff76:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800ff78:	7afb      	ldrb	r3, [r7, #11]
 800ff7a:	2b21      	cmp	r3, #33	@ 0x21
 800ff7c:	d002      	beq.n	800ff84 <I2C_ITSlaveCplt+0x38>
 800ff7e:	7afb      	ldrb	r3, [r7, #11]
 800ff80:	2b29      	cmp	r3, #41	@ 0x29
 800ff82:	d108      	bne.n	800ff96 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800ff84:	f248 0101 	movw	r1, #32769	@ 0x8001
 800ff88:	6878      	ldr	r0, [r7, #4]
 800ff8a:	f000 fe59 	bl	8010c40 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800ff8e:	687b      	ldr	r3, [r7, #4]
 800ff90:	2221      	movs	r2, #33	@ 0x21
 800ff92:	631a      	str	r2, [r3, #48]	@ 0x30
 800ff94:	e019      	b.n	800ffca <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800ff96:	7afb      	ldrb	r3, [r7, #11]
 800ff98:	2b22      	cmp	r3, #34	@ 0x22
 800ff9a:	d002      	beq.n	800ffa2 <I2C_ITSlaveCplt+0x56>
 800ff9c:	7afb      	ldrb	r3, [r7, #11]
 800ff9e:	2b2a      	cmp	r3, #42	@ 0x2a
 800ffa0:	d108      	bne.n	800ffb4 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800ffa2:	f248 0102 	movw	r1, #32770	@ 0x8002
 800ffa6:	6878      	ldr	r0, [r7, #4]
 800ffa8:	f000 fe4a 	bl	8010c40 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800ffac:	687b      	ldr	r3, [r7, #4]
 800ffae:	2222      	movs	r2, #34	@ 0x22
 800ffb0:	631a      	str	r2, [r3, #48]	@ 0x30
 800ffb2:	e00a      	b.n	800ffca <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 800ffb4:	7afb      	ldrb	r3, [r7, #11]
 800ffb6:	2b28      	cmp	r3, #40	@ 0x28
 800ffb8:	d107      	bne.n	800ffca <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800ffba:	f248 0103 	movw	r1, #32771	@ 0x8003
 800ffbe:	6878      	ldr	r0, [r7, #4]
 800ffc0:	f000 fe3e 	bl	8010c40 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 800ffc4:	687b      	ldr	r3, [r7, #4]
 800ffc6:	2200      	movs	r2, #0
 800ffc8:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800ffca:	687b      	ldr	r3, [r7, #4]
 800ffcc:	681b      	ldr	r3, [r3, #0]
 800ffce:	685a      	ldr	r2, [r3, #4]
 800ffd0:	687b      	ldr	r3, [r7, #4]
 800ffd2:	681b      	ldr	r3, [r3, #0]
 800ffd4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800ffd8:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800ffda:	687b      	ldr	r3, [r7, #4]
 800ffdc:	681b      	ldr	r3, [r3, #0]
 800ffde:	6859      	ldr	r1, [r3, #4]
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	681a      	ldr	r2, [r3, #0]
 800ffe4:	4b7f      	ldr	r3, [pc, #508]	@ (80101e4 <I2C_ITSlaveCplt+0x298>)
 800ffe6:	400b      	ands	r3, r1
 800ffe8:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800ffea:	6878      	ldr	r0, [r7, #4]
 800ffec:	f000 fb6d 	bl	80106ca <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800fff0:	693b      	ldr	r3, [r7, #16]
 800fff2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800fff6:	2b00      	cmp	r3, #0
 800fff8:	d07a      	beq.n	80100f0 <I2C_ITSlaveCplt+0x1a4>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800fffa:	687b      	ldr	r3, [r7, #4]
 800fffc:	681b      	ldr	r3, [r3, #0]
 800fffe:	681a      	ldr	r2, [r3, #0]
 8010000:	687b      	ldr	r3, [r7, #4]
 8010002:	681b      	ldr	r3, [r3, #0]
 8010004:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8010008:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 801000a:	687b      	ldr	r3, [r7, #4]
 801000c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801000e:	2b00      	cmp	r3, #0
 8010010:	f000 8111 	beq.w	8010236 <I2C_ITSlaveCplt+0x2ea>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8010014:	687b      	ldr	r3, [r7, #4]
 8010016:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010018:	681b      	ldr	r3, [r3, #0]
 801001a:	4a73      	ldr	r2, [pc, #460]	@ (80101e8 <I2C_ITSlaveCplt+0x29c>)
 801001c:	4293      	cmp	r3, r2
 801001e:	d059      	beq.n	80100d4 <I2C_ITSlaveCplt+0x188>
 8010020:	687b      	ldr	r3, [r7, #4]
 8010022:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010024:	681b      	ldr	r3, [r3, #0]
 8010026:	4a71      	ldr	r2, [pc, #452]	@ (80101ec <I2C_ITSlaveCplt+0x2a0>)
 8010028:	4293      	cmp	r3, r2
 801002a:	d053      	beq.n	80100d4 <I2C_ITSlaveCplt+0x188>
 801002c:	687b      	ldr	r3, [r7, #4]
 801002e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010030:	681b      	ldr	r3, [r3, #0]
 8010032:	4a6f      	ldr	r2, [pc, #444]	@ (80101f0 <I2C_ITSlaveCplt+0x2a4>)
 8010034:	4293      	cmp	r3, r2
 8010036:	d04d      	beq.n	80100d4 <I2C_ITSlaveCplt+0x188>
 8010038:	687b      	ldr	r3, [r7, #4]
 801003a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801003c:	681b      	ldr	r3, [r3, #0]
 801003e:	4a6d      	ldr	r2, [pc, #436]	@ (80101f4 <I2C_ITSlaveCplt+0x2a8>)
 8010040:	4293      	cmp	r3, r2
 8010042:	d047      	beq.n	80100d4 <I2C_ITSlaveCplt+0x188>
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010048:	681b      	ldr	r3, [r3, #0]
 801004a:	4a6b      	ldr	r2, [pc, #428]	@ (80101f8 <I2C_ITSlaveCplt+0x2ac>)
 801004c:	4293      	cmp	r3, r2
 801004e:	d041      	beq.n	80100d4 <I2C_ITSlaveCplt+0x188>
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010054:	681b      	ldr	r3, [r3, #0]
 8010056:	4a69      	ldr	r2, [pc, #420]	@ (80101fc <I2C_ITSlaveCplt+0x2b0>)
 8010058:	4293      	cmp	r3, r2
 801005a:	d03b      	beq.n	80100d4 <I2C_ITSlaveCplt+0x188>
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010060:	681b      	ldr	r3, [r3, #0]
 8010062:	4a67      	ldr	r2, [pc, #412]	@ (8010200 <I2C_ITSlaveCplt+0x2b4>)
 8010064:	4293      	cmp	r3, r2
 8010066:	d035      	beq.n	80100d4 <I2C_ITSlaveCplt+0x188>
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801006c:	681b      	ldr	r3, [r3, #0]
 801006e:	4a65      	ldr	r2, [pc, #404]	@ (8010204 <I2C_ITSlaveCplt+0x2b8>)
 8010070:	4293      	cmp	r3, r2
 8010072:	d02f      	beq.n	80100d4 <I2C_ITSlaveCplt+0x188>
 8010074:	687b      	ldr	r3, [r7, #4]
 8010076:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010078:	681b      	ldr	r3, [r3, #0]
 801007a:	4a63      	ldr	r2, [pc, #396]	@ (8010208 <I2C_ITSlaveCplt+0x2bc>)
 801007c:	4293      	cmp	r3, r2
 801007e:	d029      	beq.n	80100d4 <I2C_ITSlaveCplt+0x188>
 8010080:	687b      	ldr	r3, [r7, #4]
 8010082:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010084:	681b      	ldr	r3, [r3, #0]
 8010086:	4a61      	ldr	r2, [pc, #388]	@ (801020c <I2C_ITSlaveCplt+0x2c0>)
 8010088:	4293      	cmp	r3, r2
 801008a:	d023      	beq.n	80100d4 <I2C_ITSlaveCplt+0x188>
 801008c:	687b      	ldr	r3, [r7, #4]
 801008e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010090:	681b      	ldr	r3, [r3, #0]
 8010092:	4a5f      	ldr	r2, [pc, #380]	@ (8010210 <I2C_ITSlaveCplt+0x2c4>)
 8010094:	4293      	cmp	r3, r2
 8010096:	d01d      	beq.n	80100d4 <I2C_ITSlaveCplt+0x188>
 8010098:	687b      	ldr	r3, [r7, #4]
 801009a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801009c:	681b      	ldr	r3, [r3, #0]
 801009e:	4a5d      	ldr	r2, [pc, #372]	@ (8010214 <I2C_ITSlaveCplt+0x2c8>)
 80100a0:	4293      	cmp	r3, r2
 80100a2:	d017      	beq.n	80100d4 <I2C_ITSlaveCplt+0x188>
 80100a4:	687b      	ldr	r3, [r7, #4]
 80100a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80100a8:	681b      	ldr	r3, [r3, #0]
 80100aa:	4a5b      	ldr	r2, [pc, #364]	@ (8010218 <I2C_ITSlaveCplt+0x2cc>)
 80100ac:	4293      	cmp	r3, r2
 80100ae:	d011      	beq.n	80100d4 <I2C_ITSlaveCplt+0x188>
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80100b4:	681b      	ldr	r3, [r3, #0]
 80100b6:	4a59      	ldr	r2, [pc, #356]	@ (801021c <I2C_ITSlaveCplt+0x2d0>)
 80100b8:	4293      	cmp	r3, r2
 80100ba:	d00b      	beq.n	80100d4 <I2C_ITSlaveCplt+0x188>
 80100bc:	687b      	ldr	r3, [r7, #4]
 80100be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80100c0:	681b      	ldr	r3, [r3, #0]
 80100c2:	4a57      	ldr	r2, [pc, #348]	@ (8010220 <I2C_ITSlaveCplt+0x2d4>)
 80100c4:	4293      	cmp	r3, r2
 80100c6:	d005      	beq.n	80100d4 <I2C_ITSlaveCplt+0x188>
 80100c8:	687b      	ldr	r3, [r7, #4]
 80100ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80100cc:	681b      	ldr	r3, [r3, #0]
 80100ce:	4a55      	ldr	r2, [pc, #340]	@ (8010224 <I2C_ITSlaveCplt+0x2d8>)
 80100d0:	4293      	cmp	r3, r2
 80100d2:	d105      	bne.n	80100e0 <I2C_ITSlaveCplt+0x194>
 80100d4:	687b      	ldr	r3, [r7, #4]
 80100d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80100d8:	681b      	ldr	r3, [r3, #0]
 80100da:	685b      	ldr	r3, [r3, #4]
 80100dc:	b29b      	uxth	r3, r3
 80100de:	e004      	b.n	80100ea <I2C_ITSlaveCplt+0x19e>
 80100e0:	687b      	ldr	r3, [r7, #4]
 80100e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80100e4:	681b      	ldr	r3, [r3, #0]
 80100e6:	685b      	ldr	r3, [r3, #4]
 80100e8:	b29b      	uxth	r3, r3
 80100ea:	687a      	ldr	r2, [r7, #4]
 80100ec:	8553      	strh	r3, [r2, #42]	@ 0x2a
 80100ee:	e0a2      	b.n	8010236 <I2C_ITSlaveCplt+0x2ea>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80100f0:	693b      	ldr	r3, [r7, #16]
 80100f2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80100f6:	2b00      	cmp	r3, #0
 80100f8:	f000 809d 	beq.w	8010236 <I2C_ITSlaveCplt+0x2ea>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	681b      	ldr	r3, [r3, #0]
 8010100:	681a      	ldr	r2, [r3, #0]
 8010102:	687b      	ldr	r3, [r7, #4]
 8010104:	681b      	ldr	r3, [r3, #0]
 8010106:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 801010a:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010110:	2b00      	cmp	r3, #0
 8010112:	f000 8090 	beq.w	8010236 <I2C_ITSlaveCplt+0x2ea>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8010116:	687b      	ldr	r3, [r7, #4]
 8010118:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801011a:	681b      	ldr	r3, [r3, #0]
 801011c:	4a32      	ldr	r2, [pc, #200]	@ (80101e8 <I2C_ITSlaveCplt+0x29c>)
 801011e:	4293      	cmp	r3, r2
 8010120:	d059      	beq.n	80101d6 <I2C_ITSlaveCplt+0x28a>
 8010122:	687b      	ldr	r3, [r7, #4]
 8010124:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010126:	681b      	ldr	r3, [r3, #0]
 8010128:	4a30      	ldr	r2, [pc, #192]	@ (80101ec <I2C_ITSlaveCplt+0x2a0>)
 801012a:	4293      	cmp	r3, r2
 801012c:	d053      	beq.n	80101d6 <I2C_ITSlaveCplt+0x28a>
 801012e:	687b      	ldr	r3, [r7, #4]
 8010130:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010132:	681b      	ldr	r3, [r3, #0]
 8010134:	4a2e      	ldr	r2, [pc, #184]	@ (80101f0 <I2C_ITSlaveCplt+0x2a4>)
 8010136:	4293      	cmp	r3, r2
 8010138:	d04d      	beq.n	80101d6 <I2C_ITSlaveCplt+0x28a>
 801013a:	687b      	ldr	r3, [r7, #4]
 801013c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801013e:	681b      	ldr	r3, [r3, #0]
 8010140:	4a2c      	ldr	r2, [pc, #176]	@ (80101f4 <I2C_ITSlaveCplt+0x2a8>)
 8010142:	4293      	cmp	r3, r2
 8010144:	d047      	beq.n	80101d6 <I2C_ITSlaveCplt+0x28a>
 8010146:	687b      	ldr	r3, [r7, #4]
 8010148:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801014a:	681b      	ldr	r3, [r3, #0]
 801014c:	4a2a      	ldr	r2, [pc, #168]	@ (80101f8 <I2C_ITSlaveCplt+0x2ac>)
 801014e:	4293      	cmp	r3, r2
 8010150:	d041      	beq.n	80101d6 <I2C_ITSlaveCplt+0x28a>
 8010152:	687b      	ldr	r3, [r7, #4]
 8010154:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010156:	681b      	ldr	r3, [r3, #0]
 8010158:	4a28      	ldr	r2, [pc, #160]	@ (80101fc <I2C_ITSlaveCplt+0x2b0>)
 801015a:	4293      	cmp	r3, r2
 801015c:	d03b      	beq.n	80101d6 <I2C_ITSlaveCplt+0x28a>
 801015e:	687b      	ldr	r3, [r7, #4]
 8010160:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010162:	681b      	ldr	r3, [r3, #0]
 8010164:	4a26      	ldr	r2, [pc, #152]	@ (8010200 <I2C_ITSlaveCplt+0x2b4>)
 8010166:	4293      	cmp	r3, r2
 8010168:	d035      	beq.n	80101d6 <I2C_ITSlaveCplt+0x28a>
 801016a:	687b      	ldr	r3, [r7, #4]
 801016c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801016e:	681b      	ldr	r3, [r3, #0]
 8010170:	4a24      	ldr	r2, [pc, #144]	@ (8010204 <I2C_ITSlaveCplt+0x2b8>)
 8010172:	4293      	cmp	r3, r2
 8010174:	d02f      	beq.n	80101d6 <I2C_ITSlaveCplt+0x28a>
 8010176:	687b      	ldr	r3, [r7, #4]
 8010178:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801017a:	681b      	ldr	r3, [r3, #0]
 801017c:	4a22      	ldr	r2, [pc, #136]	@ (8010208 <I2C_ITSlaveCplt+0x2bc>)
 801017e:	4293      	cmp	r3, r2
 8010180:	d029      	beq.n	80101d6 <I2C_ITSlaveCplt+0x28a>
 8010182:	687b      	ldr	r3, [r7, #4]
 8010184:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010186:	681b      	ldr	r3, [r3, #0]
 8010188:	4a20      	ldr	r2, [pc, #128]	@ (801020c <I2C_ITSlaveCplt+0x2c0>)
 801018a:	4293      	cmp	r3, r2
 801018c:	d023      	beq.n	80101d6 <I2C_ITSlaveCplt+0x28a>
 801018e:	687b      	ldr	r3, [r7, #4]
 8010190:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010192:	681b      	ldr	r3, [r3, #0]
 8010194:	4a1e      	ldr	r2, [pc, #120]	@ (8010210 <I2C_ITSlaveCplt+0x2c4>)
 8010196:	4293      	cmp	r3, r2
 8010198:	d01d      	beq.n	80101d6 <I2C_ITSlaveCplt+0x28a>
 801019a:	687b      	ldr	r3, [r7, #4]
 801019c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801019e:	681b      	ldr	r3, [r3, #0]
 80101a0:	4a1c      	ldr	r2, [pc, #112]	@ (8010214 <I2C_ITSlaveCplt+0x2c8>)
 80101a2:	4293      	cmp	r3, r2
 80101a4:	d017      	beq.n	80101d6 <I2C_ITSlaveCplt+0x28a>
 80101a6:	687b      	ldr	r3, [r7, #4]
 80101a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80101aa:	681b      	ldr	r3, [r3, #0]
 80101ac:	4a1a      	ldr	r2, [pc, #104]	@ (8010218 <I2C_ITSlaveCplt+0x2cc>)
 80101ae:	4293      	cmp	r3, r2
 80101b0:	d011      	beq.n	80101d6 <I2C_ITSlaveCplt+0x28a>
 80101b2:	687b      	ldr	r3, [r7, #4]
 80101b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80101b6:	681b      	ldr	r3, [r3, #0]
 80101b8:	4a18      	ldr	r2, [pc, #96]	@ (801021c <I2C_ITSlaveCplt+0x2d0>)
 80101ba:	4293      	cmp	r3, r2
 80101bc:	d00b      	beq.n	80101d6 <I2C_ITSlaveCplt+0x28a>
 80101be:	687b      	ldr	r3, [r7, #4]
 80101c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80101c2:	681b      	ldr	r3, [r3, #0]
 80101c4:	4a16      	ldr	r2, [pc, #88]	@ (8010220 <I2C_ITSlaveCplt+0x2d4>)
 80101c6:	4293      	cmp	r3, r2
 80101c8:	d005      	beq.n	80101d6 <I2C_ITSlaveCplt+0x28a>
 80101ca:	687b      	ldr	r3, [r7, #4]
 80101cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80101ce:	681b      	ldr	r3, [r3, #0]
 80101d0:	4a14      	ldr	r2, [pc, #80]	@ (8010224 <I2C_ITSlaveCplt+0x2d8>)
 80101d2:	4293      	cmp	r3, r2
 80101d4:	d128      	bne.n	8010228 <I2C_ITSlaveCplt+0x2dc>
 80101d6:	687b      	ldr	r3, [r7, #4]
 80101d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80101da:	681b      	ldr	r3, [r3, #0]
 80101dc:	685b      	ldr	r3, [r3, #4]
 80101de:	b29b      	uxth	r3, r3
 80101e0:	e027      	b.n	8010232 <I2C_ITSlaveCplt+0x2e6>
 80101e2:	bf00      	nop
 80101e4:	fe00e800 	.word	0xfe00e800
 80101e8:	40020010 	.word	0x40020010
 80101ec:	40020028 	.word	0x40020028
 80101f0:	40020040 	.word	0x40020040
 80101f4:	40020058 	.word	0x40020058
 80101f8:	40020070 	.word	0x40020070
 80101fc:	40020088 	.word	0x40020088
 8010200:	400200a0 	.word	0x400200a0
 8010204:	400200b8 	.word	0x400200b8
 8010208:	40020410 	.word	0x40020410
 801020c:	40020428 	.word	0x40020428
 8010210:	40020440 	.word	0x40020440
 8010214:	40020458 	.word	0x40020458
 8010218:	40020470 	.word	0x40020470
 801021c:	40020488 	.word	0x40020488
 8010220:	400204a0 	.word	0x400204a0
 8010224:	400204b8 	.word	0x400204b8
 8010228:	687b      	ldr	r3, [r7, #4]
 801022a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801022c:	681b      	ldr	r3, [r3, #0]
 801022e:	685b      	ldr	r3, [r3, #4]
 8010230:	b29b      	uxth	r3, r3
 8010232:	687a      	ldr	r2, [r7, #4]
 8010234:	8553      	strh	r3, [r2, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8010236:	697b      	ldr	r3, [r7, #20]
 8010238:	f003 0304 	and.w	r3, r3, #4
 801023c:	2b00      	cmp	r3, #0
 801023e:	d020      	beq.n	8010282 <I2C_ITSlaveCplt+0x336>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8010240:	697b      	ldr	r3, [r7, #20]
 8010242:	f023 0304 	bic.w	r3, r3, #4
 8010246:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8010248:	687b      	ldr	r3, [r7, #4]
 801024a:	681b      	ldr	r3, [r3, #0]
 801024c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801024e:	687b      	ldr	r3, [r7, #4]
 8010250:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010252:	b2d2      	uxtb	r2, r2
 8010254:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8010256:	687b      	ldr	r3, [r7, #4]
 8010258:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801025a:	1c5a      	adds	r2, r3, #1
 801025c:	687b      	ldr	r3, [r7, #4]
 801025e:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8010260:	687b      	ldr	r3, [r7, #4]
 8010262:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010264:	2b00      	cmp	r3, #0
 8010266:	d00c      	beq.n	8010282 <I2C_ITSlaveCplt+0x336>
    {
      hi2c->XferSize--;
 8010268:	687b      	ldr	r3, [r7, #4]
 801026a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801026c:	3b01      	subs	r3, #1
 801026e:	b29a      	uxth	r2, r3
 8010270:	687b      	ldr	r3, [r7, #4]
 8010272:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8010274:	687b      	ldr	r3, [r7, #4]
 8010276:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010278:	b29b      	uxth	r3, r3
 801027a:	3b01      	subs	r3, #1
 801027c:	b29a      	uxth	r2, r3
 801027e:	687b      	ldr	r3, [r7, #4]
 8010280:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8010282:	687b      	ldr	r3, [r7, #4]
 8010284:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010286:	b29b      	uxth	r3, r3
 8010288:	2b00      	cmp	r3, #0
 801028a:	d005      	beq.n	8010298 <I2C_ITSlaveCplt+0x34c>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801028c:	687b      	ldr	r3, [r7, #4]
 801028e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010290:	f043 0204 	orr.w	r2, r3, #4
 8010294:	687b      	ldr	r3, [r7, #4]
 8010296:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8010298:	697b      	ldr	r3, [r7, #20]
 801029a:	f003 0310 	and.w	r3, r3, #16
 801029e:	2b00      	cmp	r3, #0
 80102a0:	d049      	beq.n	8010336 <I2C_ITSlaveCplt+0x3ea>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 80102a2:	693b      	ldr	r3, [r7, #16]
 80102a4:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80102a8:	2b00      	cmp	r3, #0
 80102aa:	d044      	beq.n	8010336 <I2C_ITSlaveCplt+0x3ea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80102ac:	687b      	ldr	r3, [r7, #4]
 80102ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80102b0:	b29b      	uxth	r3, r3
 80102b2:	2b00      	cmp	r3, #0
 80102b4:	d128      	bne.n	8010308 <I2C_ITSlaveCplt+0x3bc>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80102b6:	687b      	ldr	r3, [r7, #4]
 80102b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80102bc:	b2db      	uxtb	r3, r3
 80102be:	2b28      	cmp	r3, #40	@ 0x28
 80102c0:	d108      	bne.n	80102d4 <I2C_ITSlaveCplt+0x388>
 80102c2:	68fb      	ldr	r3, [r7, #12]
 80102c4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80102c8:	d104      	bne.n	80102d4 <I2C_ITSlaveCplt+0x388>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80102ca:	6979      	ldr	r1, [r7, #20]
 80102cc:	6878      	ldr	r0, [r7, #4]
 80102ce:	f000 f891 	bl	80103f4 <I2C_ITListenCplt>
 80102d2:	e030      	b.n	8010336 <I2C_ITSlaveCplt+0x3ea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80102da:	b2db      	uxtb	r3, r3
 80102dc:	2b29      	cmp	r3, #41	@ 0x29
 80102de:	d10e      	bne.n	80102fe <I2C_ITSlaveCplt+0x3b2>
 80102e0:	68fb      	ldr	r3, [r7, #12]
 80102e2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80102e6:	d00a      	beq.n	80102fe <I2C_ITSlaveCplt+0x3b2>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80102e8:	687b      	ldr	r3, [r7, #4]
 80102ea:	681b      	ldr	r3, [r3, #0]
 80102ec:	2210      	movs	r2, #16
 80102ee:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80102f0:	6878      	ldr	r0, [r7, #4]
 80102f2:	f000 f9ea 	bl	80106ca <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80102f6:	6878      	ldr	r0, [r7, #4]
 80102f8:	f7ff fd03 	bl	800fd02 <I2C_ITSlaveSeqCplt>
 80102fc:	e01b      	b.n	8010336 <I2C_ITSlaveCplt+0x3ea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80102fe:	687b      	ldr	r3, [r7, #4]
 8010300:	681b      	ldr	r3, [r3, #0]
 8010302:	2210      	movs	r2, #16
 8010304:	61da      	str	r2, [r3, #28]
 8010306:	e016      	b.n	8010336 <I2C_ITSlaveCplt+0x3ea>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8010308:	687b      	ldr	r3, [r7, #4]
 801030a:	681b      	ldr	r3, [r3, #0]
 801030c:	2210      	movs	r2, #16
 801030e:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8010310:	687b      	ldr	r3, [r7, #4]
 8010312:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010314:	f043 0204 	orr.w	r2, r3, #4
 8010318:	687b      	ldr	r3, [r7, #4]
 801031a:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 801031c:	68fb      	ldr	r3, [r7, #12]
 801031e:	2b00      	cmp	r3, #0
 8010320:	d003      	beq.n	801032a <I2C_ITSlaveCplt+0x3de>
 8010322:	68fb      	ldr	r3, [r7, #12]
 8010324:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8010328:	d105      	bne.n	8010336 <I2C_ITSlaveCplt+0x3ea>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 801032a:	687b      	ldr	r3, [r7, #4]
 801032c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801032e:	4619      	mov	r1, r3
 8010330:	6878      	ldr	r0, [r7, #4]
 8010332:	f000 f8b3 	bl	801049c <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8010336:	687b      	ldr	r3, [r7, #4]
 8010338:	2200      	movs	r2, #0
 801033a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 801033e:	687b      	ldr	r3, [r7, #4]
 8010340:	2200      	movs	r2, #0
 8010342:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8010344:	687b      	ldr	r3, [r7, #4]
 8010346:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010348:	2b00      	cmp	r3, #0
 801034a:	d010      	beq.n	801036e <I2C_ITSlaveCplt+0x422>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 801034c:	687b      	ldr	r3, [r7, #4]
 801034e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010350:	4619      	mov	r1, r3
 8010352:	6878      	ldr	r0, [r7, #4]
 8010354:	f000 f8a2 	bl	801049c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8010358:	687b      	ldr	r3, [r7, #4]
 801035a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 801035e:	b2db      	uxtb	r3, r3
 8010360:	2b28      	cmp	r3, #40	@ 0x28
 8010362:	d141      	bne.n	80103e8 <I2C_ITSlaveCplt+0x49c>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8010364:	6979      	ldr	r1, [r7, #20]
 8010366:	6878      	ldr	r0, [r7, #4]
 8010368:	f000 f844 	bl	80103f4 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 801036c:	e03c      	b.n	80103e8 <I2C_ITSlaveCplt+0x49c>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 801036e:	687b      	ldr	r3, [r7, #4]
 8010370:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010372:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8010376:	d014      	beq.n	80103a2 <I2C_ITSlaveCplt+0x456>
    I2C_ITSlaveSeqCplt(hi2c);
 8010378:	6878      	ldr	r0, [r7, #4]
 801037a:	f7ff fcc2 	bl	800fd02 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 801037e:	687b      	ldr	r3, [r7, #4]
 8010380:	4a1b      	ldr	r2, [pc, #108]	@ (80103f0 <I2C_ITSlaveCplt+0x4a4>)
 8010382:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8010384:	687b      	ldr	r3, [r7, #4]
 8010386:	2220      	movs	r2, #32
 8010388:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 801038c:	687b      	ldr	r3, [r7, #4]
 801038e:	2200      	movs	r2, #0
 8010390:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8010392:	687b      	ldr	r3, [r7, #4]
 8010394:	2200      	movs	r2, #0
 8010396:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 801039a:	6878      	ldr	r0, [r7, #4]
 801039c:	f7fe fd16 	bl	800edcc <HAL_I2C_ListenCpltCallback>
}
 80103a0:	e022      	b.n	80103e8 <I2C_ITSlaveCplt+0x49c>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80103a2:	687b      	ldr	r3, [r7, #4]
 80103a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80103a8:	b2db      	uxtb	r3, r3
 80103aa:	2b22      	cmp	r3, #34	@ 0x22
 80103ac:	d10e      	bne.n	80103cc <I2C_ITSlaveCplt+0x480>
    hi2c->State = HAL_I2C_STATE_READY;
 80103ae:	687b      	ldr	r3, [r7, #4]
 80103b0:	2220      	movs	r2, #32
 80103b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80103b6:	687b      	ldr	r3, [r7, #4]
 80103b8:	2200      	movs	r2, #0
 80103ba:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80103bc:	687b      	ldr	r3, [r7, #4]
 80103be:	2200      	movs	r2, #0
 80103c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80103c4:	6878      	ldr	r0, [r7, #4]
 80103c6:	f7fe fce9 	bl	800ed9c <HAL_I2C_SlaveRxCpltCallback>
}
 80103ca:	e00d      	b.n	80103e8 <I2C_ITSlaveCplt+0x49c>
    hi2c->State = HAL_I2C_STATE_READY;
 80103cc:	687b      	ldr	r3, [r7, #4]
 80103ce:	2220      	movs	r2, #32
 80103d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80103d4:	687b      	ldr	r3, [r7, #4]
 80103d6:	2200      	movs	r2, #0
 80103d8:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80103da:	687b      	ldr	r3, [r7, #4]
 80103dc:	2200      	movs	r2, #0
 80103de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80103e2:	6878      	ldr	r0, [r7, #4]
 80103e4:	f7fe fcd0 	bl	800ed88 <HAL_I2C_SlaveTxCpltCallback>
}
 80103e8:	bf00      	nop
 80103ea:	3718      	adds	r7, #24
 80103ec:	46bd      	mov	sp, r7
 80103ee:	bd80      	pop	{r7, pc}
 80103f0:	ffff0000 	.word	0xffff0000

080103f4 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80103f4:	b580      	push	{r7, lr}
 80103f6:	b082      	sub	sp, #8
 80103f8:	af00      	add	r7, sp, #0
 80103fa:	6078      	str	r0, [r7, #4]
 80103fc:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80103fe:	687b      	ldr	r3, [r7, #4]
 8010400:	4a25      	ldr	r2, [pc, #148]	@ (8010498 <I2C_ITListenCplt+0xa4>)
 8010402:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8010404:	687b      	ldr	r3, [r7, #4]
 8010406:	2200      	movs	r2, #0
 8010408:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 801040a:	687b      	ldr	r3, [r7, #4]
 801040c:	2220      	movs	r2, #32
 801040e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8010412:	687b      	ldr	r3, [r7, #4]
 8010414:	2200      	movs	r2, #0
 8010416:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 801041a:	687b      	ldr	r3, [r7, #4]
 801041c:	2200      	movs	r2, #0
 801041e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8010420:	683b      	ldr	r3, [r7, #0]
 8010422:	f003 0304 	and.w	r3, r3, #4
 8010426:	2b00      	cmp	r3, #0
 8010428:	d022      	beq.n	8010470 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 801042a:	687b      	ldr	r3, [r7, #4]
 801042c:	681b      	ldr	r3, [r3, #0]
 801042e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010430:	687b      	ldr	r3, [r7, #4]
 8010432:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010434:	b2d2      	uxtb	r2, r2
 8010436:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8010438:	687b      	ldr	r3, [r7, #4]
 801043a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801043c:	1c5a      	adds	r2, r3, #1
 801043e:	687b      	ldr	r3, [r7, #4]
 8010440:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8010442:	687b      	ldr	r3, [r7, #4]
 8010444:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010446:	2b00      	cmp	r3, #0
 8010448:	d012      	beq.n	8010470 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 801044a:	687b      	ldr	r3, [r7, #4]
 801044c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801044e:	3b01      	subs	r3, #1
 8010450:	b29a      	uxth	r2, r3
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8010456:	687b      	ldr	r3, [r7, #4]
 8010458:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801045a:	b29b      	uxth	r3, r3
 801045c:	3b01      	subs	r3, #1
 801045e:	b29a      	uxth	r2, r3
 8010460:	687b      	ldr	r3, [r7, #4]
 8010462:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8010464:	687b      	ldr	r3, [r7, #4]
 8010466:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010468:	f043 0204 	orr.w	r2, r3, #4
 801046c:	687b      	ldr	r3, [r7, #4]
 801046e:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8010470:	f248 0103 	movw	r1, #32771	@ 0x8003
 8010474:	6878      	ldr	r0, [r7, #4]
 8010476:	f000 fbe3 	bl	8010c40 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801047a:	687b      	ldr	r3, [r7, #4]
 801047c:	681b      	ldr	r3, [r3, #0]
 801047e:	2210      	movs	r2, #16
 8010480:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8010482:	687b      	ldr	r3, [r7, #4]
 8010484:	2200      	movs	r2, #0
 8010486:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 801048a:	6878      	ldr	r0, [r7, #4]
 801048c:	f7fe fc9e 	bl	800edcc <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8010490:	bf00      	nop
 8010492:	3708      	adds	r7, #8
 8010494:	46bd      	mov	sp, r7
 8010496:	bd80      	pop	{r7, pc}
 8010498:	ffff0000 	.word	0xffff0000

0801049c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 801049c:	b580      	push	{r7, lr}
 801049e:	b084      	sub	sp, #16
 80104a0:	af00      	add	r7, sp, #0
 80104a2:	6078      	str	r0, [r7, #4]
 80104a4:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80104a6:	687b      	ldr	r3, [r7, #4]
 80104a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80104ac:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80104ae:	687b      	ldr	r3, [r7, #4]
 80104b0:	2200      	movs	r2, #0
 80104b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80104b6:	687b      	ldr	r3, [r7, #4]
 80104b8:	4a6d      	ldr	r2, [pc, #436]	@ (8010670 <I2C_ITError+0x1d4>)
 80104ba:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 80104bc:	687b      	ldr	r3, [r7, #4]
 80104be:	2200      	movs	r2, #0
 80104c0:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80104c2:	687b      	ldr	r3, [r7, #4]
 80104c4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80104c6:	683b      	ldr	r3, [r7, #0]
 80104c8:	431a      	orrs	r2, r3
 80104ca:	687b      	ldr	r3, [r7, #4]
 80104cc:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80104ce:	7bfb      	ldrb	r3, [r7, #15]
 80104d0:	2b28      	cmp	r3, #40	@ 0x28
 80104d2:	d005      	beq.n	80104e0 <I2C_ITError+0x44>
 80104d4:	7bfb      	ldrb	r3, [r7, #15]
 80104d6:	2b29      	cmp	r3, #41	@ 0x29
 80104d8:	d002      	beq.n	80104e0 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80104da:	7bfb      	ldrb	r3, [r7, #15]
 80104dc:	2b2a      	cmp	r3, #42	@ 0x2a
 80104de:	d10b      	bne.n	80104f8 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80104e0:	2103      	movs	r1, #3
 80104e2:	6878      	ldr	r0, [r7, #4]
 80104e4:	f000 fbac 	bl	8010c40 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	2228      	movs	r2, #40	@ 0x28
 80104ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80104f0:	687b      	ldr	r3, [r7, #4]
 80104f2:	4a60      	ldr	r2, [pc, #384]	@ (8010674 <I2C_ITError+0x1d8>)
 80104f4:	635a      	str	r2, [r3, #52]	@ 0x34
 80104f6:	e030      	b.n	801055a <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80104f8:	f248 0103 	movw	r1, #32771	@ 0x8003
 80104fc:	6878      	ldr	r0, [r7, #4]
 80104fe:	f000 fb9f 	bl	8010c40 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8010502:	6878      	ldr	r0, [r7, #4]
 8010504:	f000 f8e1 	bl	80106ca <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8010508:	687b      	ldr	r3, [r7, #4]
 801050a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 801050e:	b2db      	uxtb	r3, r3
 8010510:	2b60      	cmp	r3, #96	@ 0x60
 8010512:	d01f      	beq.n	8010554 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8010514:	687b      	ldr	r3, [r7, #4]
 8010516:	2220      	movs	r2, #32
 8010518:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 801051c:	687b      	ldr	r3, [r7, #4]
 801051e:	681b      	ldr	r3, [r3, #0]
 8010520:	699b      	ldr	r3, [r3, #24]
 8010522:	f003 0320 	and.w	r3, r3, #32
 8010526:	2b20      	cmp	r3, #32
 8010528:	d114      	bne.n	8010554 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 801052a:	687b      	ldr	r3, [r7, #4]
 801052c:	681b      	ldr	r3, [r3, #0]
 801052e:	699b      	ldr	r3, [r3, #24]
 8010530:	f003 0310 	and.w	r3, r3, #16
 8010534:	2b10      	cmp	r3, #16
 8010536:	d109      	bne.n	801054c <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	681b      	ldr	r3, [r3, #0]
 801053c:	2210      	movs	r2, #16
 801053e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8010540:	687b      	ldr	r3, [r7, #4]
 8010542:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010544:	f043 0204 	orr.w	r2, r3, #4
 8010548:	687b      	ldr	r3, [r7, #4]
 801054a:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801054c:	687b      	ldr	r3, [r7, #4]
 801054e:	681b      	ldr	r3, [r3, #0]
 8010550:	2220      	movs	r2, #32
 8010552:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8010554:	687b      	ldr	r3, [r7, #4]
 8010556:	2200      	movs	r2, #0
 8010558:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 801055a:	687b      	ldr	r3, [r7, #4]
 801055c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801055e:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010564:	2b00      	cmp	r3, #0
 8010566:	d039      	beq.n	80105dc <I2C_ITError+0x140>
 8010568:	68bb      	ldr	r3, [r7, #8]
 801056a:	2b11      	cmp	r3, #17
 801056c:	d002      	beq.n	8010574 <I2C_ITError+0xd8>
 801056e:	68bb      	ldr	r3, [r7, #8]
 8010570:	2b21      	cmp	r3, #33	@ 0x21
 8010572:	d133      	bne.n	80105dc <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8010574:	687b      	ldr	r3, [r7, #4]
 8010576:	681b      	ldr	r3, [r3, #0]
 8010578:	681b      	ldr	r3, [r3, #0]
 801057a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 801057e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8010582:	d107      	bne.n	8010594 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8010584:	687b      	ldr	r3, [r7, #4]
 8010586:	681b      	ldr	r3, [r3, #0]
 8010588:	681a      	ldr	r2, [r3, #0]
 801058a:	687b      	ldr	r3, [r7, #4]
 801058c:	681b      	ldr	r3, [r3, #0]
 801058e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8010592:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8010594:	687b      	ldr	r3, [r7, #4]
 8010596:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010598:	4618      	mov	r0, r3
 801059a:	f7fd f9f7 	bl	800d98c <HAL_DMA_GetState>
 801059e:	4603      	mov	r3, r0
 80105a0:	2b01      	cmp	r3, #1
 80105a2:	d017      	beq.n	80105d4 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80105a8:	4a33      	ldr	r2, [pc, #204]	@ (8010678 <I2C_ITError+0x1dc>)
 80105aa:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	2200      	movs	r2, #0
 80105b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80105b4:	687b      	ldr	r3, [r7, #4]
 80105b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80105b8:	4618      	mov	r0, r3
 80105ba:	f7fc f877 	bl	800c6ac <HAL_DMA_Abort_IT>
 80105be:	4603      	mov	r3, r0
 80105c0:	2b00      	cmp	r3, #0
 80105c2:	d04d      	beq.n	8010660 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80105c4:	687b      	ldr	r3, [r7, #4]
 80105c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80105c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80105ca:	687a      	ldr	r2, [r7, #4]
 80105cc:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80105ce:	4610      	mov	r0, r2
 80105d0:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80105d2:	e045      	b.n	8010660 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80105d4:	6878      	ldr	r0, [r7, #4]
 80105d6:	f000 f851 	bl	801067c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80105da:	e041      	b.n	8010660 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80105dc:	687b      	ldr	r3, [r7, #4]
 80105de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80105e0:	2b00      	cmp	r3, #0
 80105e2:	d039      	beq.n	8010658 <I2C_ITError+0x1bc>
 80105e4:	68bb      	ldr	r3, [r7, #8]
 80105e6:	2b12      	cmp	r3, #18
 80105e8:	d002      	beq.n	80105f0 <I2C_ITError+0x154>
 80105ea:	68bb      	ldr	r3, [r7, #8]
 80105ec:	2b22      	cmp	r3, #34	@ 0x22
 80105ee:	d133      	bne.n	8010658 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80105f0:	687b      	ldr	r3, [r7, #4]
 80105f2:	681b      	ldr	r3, [r3, #0]
 80105f4:	681b      	ldr	r3, [r3, #0]
 80105f6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80105fa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80105fe:	d107      	bne.n	8010610 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8010600:	687b      	ldr	r3, [r7, #4]
 8010602:	681b      	ldr	r3, [r3, #0]
 8010604:	681a      	ldr	r2, [r3, #0]
 8010606:	687b      	ldr	r3, [r7, #4]
 8010608:	681b      	ldr	r3, [r3, #0]
 801060a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 801060e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8010610:	687b      	ldr	r3, [r7, #4]
 8010612:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010614:	4618      	mov	r0, r3
 8010616:	f7fd f9b9 	bl	800d98c <HAL_DMA_GetState>
 801061a:	4603      	mov	r3, r0
 801061c:	2b01      	cmp	r3, #1
 801061e:	d017      	beq.n	8010650 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010624:	4a14      	ldr	r2, [pc, #80]	@ (8010678 <I2C_ITError+0x1dc>)
 8010626:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8010628:	687b      	ldr	r3, [r7, #4]
 801062a:	2200      	movs	r2, #0
 801062c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8010630:	687b      	ldr	r3, [r7, #4]
 8010632:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010634:	4618      	mov	r0, r3
 8010636:	f7fc f839 	bl	800c6ac <HAL_DMA_Abort_IT>
 801063a:	4603      	mov	r3, r0
 801063c:	2b00      	cmp	r3, #0
 801063e:	d011      	beq.n	8010664 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8010640:	687b      	ldr	r3, [r7, #4]
 8010642:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010644:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010646:	687a      	ldr	r2, [r7, #4]
 8010648:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 801064a:	4610      	mov	r0, r2
 801064c:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 801064e:	e009      	b.n	8010664 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8010650:	6878      	ldr	r0, [r7, #4]
 8010652:	f000 f813 	bl	801067c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8010656:	e005      	b.n	8010664 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8010658:	6878      	ldr	r0, [r7, #4]
 801065a:	f000 f80f 	bl	801067c <I2C_TreatErrorCallback>
  }
}
 801065e:	e002      	b.n	8010666 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8010660:	bf00      	nop
 8010662:	e000      	b.n	8010666 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8010664:	bf00      	nop
}
 8010666:	bf00      	nop
 8010668:	3710      	adds	r7, #16
 801066a:	46bd      	mov	sp, r7
 801066c:	bd80      	pop	{r7, pc}
 801066e:	bf00      	nop
 8010670:	ffff0000 	.word	0xffff0000
 8010674:	0800f069 	.word	0x0800f069
 8010678:	08010713 	.word	0x08010713

0801067c <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 801067c:	b580      	push	{r7, lr}
 801067e:	b082      	sub	sp, #8
 8010680:	af00      	add	r7, sp, #0
 8010682:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8010684:	687b      	ldr	r3, [r7, #4]
 8010686:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 801068a:	b2db      	uxtb	r3, r3
 801068c:	2b60      	cmp	r3, #96	@ 0x60
 801068e:	d10e      	bne.n	80106ae <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8010690:	687b      	ldr	r3, [r7, #4]
 8010692:	2220      	movs	r2, #32
 8010694:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8010698:	687b      	ldr	r3, [r7, #4]
 801069a:	2200      	movs	r2, #0
 801069c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801069e:	687b      	ldr	r3, [r7, #4]
 80106a0:	2200      	movs	r2, #0
 80106a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80106a6:	6878      	ldr	r0, [r7, #4]
 80106a8:	f7fe fbae 	bl	800ee08 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80106ac:	e009      	b.n	80106c2 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80106ae:	687b      	ldr	r3, [r7, #4]
 80106b0:	2200      	movs	r2, #0
 80106b2:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80106b4:	687b      	ldr	r3, [r7, #4]
 80106b6:	2200      	movs	r2, #0
 80106b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80106bc:	6878      	ldr	r0, [r7, #4]
 80106be:	f7fe fb99 	bl	800edf4 <HAL_I2C_ErrorCallback>
}
 80106c2:	bf00      	nop
 80106c4:	3708      	adds	r7, #8
 80106c6:	46bd      	mov	sp, r7
 80106c8:	bd80      	pop	{r7, pc}

080106ca <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80106ca:	b480      	push	{r7}
 80106cc:	b083      	sub	sp, #12
 80106ce:	af00      	add	r7, sp, #0
 80106d0:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80106d2:	687b      	ldr	r3, [r7, #4]
 80106d4:	681b      	ldr	r3, [r3, #0]
 80106d6:	699b      	ldr	r3, [r3, #24]
 80106d8:	f003 0302 	and.w	r3, r3, #2
 80106dc:	2b02      	cmp	r3, #2
 80106de:	d103      	bne.n	80106e8 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80106e0:	687b      	ldr	r3, [r7, #4]
 80106e2:	681b      	ldr	r3, [r3, #0]
 80106e4:	2200      	movs	r2, #0
 80106e6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80106e8:	687b      	ldr	r3, [r7, #4]
 80106ea:	681b      	ldr	r3, [r3, #0]
 80106ec:	699b      	ldr	r3, [r3, #24]
 80106ee:	f003 0301 	and.w	r3, r3, #1
 80106f2:	2b01      	cmp	r3, #1
 80106f4:	d007      	beq.n	8010706 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80106f6:	687b      	ldr	r3, [r7, #4]
 80106f8:	681b      	ldr	r3, [r3, #0]
 80106fa:	699a      	ldr	r2, [r3, #24]
 80106fc:	687b      	ldr	r3, [r7, #4]
 80106fe:	681b      	ldr	r3, [r3, #0]
 8010700:	f042 0201 	orr.w	r2, r2, #1
 8010704:	619a      	str	r2, [r3, #24]
  }
}
 8010706:	bf00      	nop
 8010708:	370c      	adds	r7, #12
 801070a:	46bd      	mov	sp, r7
 801070c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010710:	4770      	bx	lr

08010712 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8010712:	b580      	push	{r7, lr}
 8010714:	b084      	sub	sp, #16
 8010716:	af00      	add	r7, sp, #0
 8010718:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 801071a:	687b      	ldr	r3, [r7, #4]
 801071c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801071e:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8010720:	68fb      	ldr	r3, [r7, #12]
 8010722:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010724:	2b00      	cmp	r3, #0
 8010726:	d003      	beq.n	8010730 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8010728:	68fb      	ldr	r3, [r7, #12]
 801072a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801072c:	2200      	movs	r2, #0
 801072e:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8010730:	68fb      	ldr	r3, [r7, #12]
 8010732:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010734:	2b00      	cmp	r3, #0
 8010736:	d003      	beq.n	8010740 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8010738:	68fb      	ldr	r3, [r7, #12]
 801073a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801073c:	2200      	movs	r2, #0
 801073e:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8010740:	68f8      	ldr	r0, [r7, #12]
 8010742:	f7ff ff9b 	bl	801067c <I2C_TreatErrorCallback>
}
 8010746:	bf00      	nop
 8010748:	3710      	adds	r7, #16
 801074a:	46bd      	mov	sp, r7
 801074c:	bd80      	pop	{r7, pc}

0801074e <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 801074e:	b580      	push	{r7, lr}
 8010750:	b084      	sub	sp, #16
 8010752:	af00      	add	r7, sp, #0
 8010754:	60f8      	str	r0, [r7, #12]
 8010756:	60b9      	str	r1, [r7, #8]
 8010758:	603b      	str	r3, [r7, #0]
 801075a:	4613      	mov	r3, r2
 801075c:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 801075e:	e03b      	b.n	80107d8 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8010760:	69ba      	ldr	r2, [r7, #24]
 8010762:	6839      	ldr	r1, [r7, #0]
 8010764:	68f8      	ldr	r0, [r7, #12]
 8010766:	f000 f8d5 	bl	8010914 <I2C_IsErrorOccurred>
 801076a:	4603      	mov	r3, r0
 801076c:	2b00      	cmp	r3, #0
 801076e:	d001      	beq.n	8010774 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8010770:	2301      	movs	r3, #1
 8010772:	e041      	b.n	80107f8 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010774:	683b      	ldr	r3, [r7, #0]
 8010776:	f1b3 3fff 	cmp.w	r3, #4294967295
 801077a:	d02d      	beq.n	80107d8 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801077c:	f7f8 fd5e 	bl	800923c <HAL_GetTick>
 8010780:	4602      	mov	r2, r0
 8010782:	69bb      	ldr	r3, [r7, #24]
 8010784:	1ad3      	subs	r3, r2, r3
 8010786:	683a      	ldr	r2, [r7, #0]
 8010788:	429a      	cmp	r2, r3
 801078a:	d302      	bcc.n	8010792 <I2C_WaitOnFlagUntilTimeout+0x44>
 801078c:	683b      	ldr	r3, [r7, #0]
 801078e:	2b00      	cmp	r3, #0
 8010790:	d122      	bne.n	80107d8 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8010792:	68fb      	ldr	r3, [r7, #12]
 8010794:	681b      	ldr	r3, [r3, #0]
 8010796:	699a      	ldr	r2, [r3, #24]
 8010798:	68bb      	ldr	r3, [r7, #8]
 801079a:	4013      	ands	r3, r2
 801079c:	68ba      	ldr	r2, [r7, #8]
 801079e:	429a      	cmp	r2, r3
 80107a0:	bf0c      	ite	eq
 80107a2:	2301      	moveq	r3, #1
 80107a4:	2300      	movne	r3, #0
 80107a6:	b2db      	uxtb	r3, r3
 80107a8:	461a      	mov	r2, r3
 80107aa:	79fb      	ldrb	r3, [r7, #7]
 80107ac:	429a      	cmp	r2, r3
 80107ae:	d113      	bne.n	80107d8 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80107b0:	68fb      	ldr	r3, [r7, #12]
 80107b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80107b4:	f043 0220 	orr.w	r2, r3, #32
 80107b8:	68fb      	ldr	r3, [r7, #12]
 80107ba:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80107bc:	68fb      	ldr	r3, [r7, #12]
 80107be:	2220      	movs	r2, #32
 80107c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80107c4:	68fb      	ldr	r3, [r7, #12]
 80107c6:	2200      	movs	r2, #0
 80107c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80107cc:	68fb      	ldr	r3, [r7, #12]
 80107ce:	2200      	movs	r2, #0
 80107d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80107d4:	2301      	movs	r3, #1
 80107d6:	e00f      	b.n	80107f8 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80107d8:	68fb      	ldr	r3, [r7, #12]
 80107da:	681b      	ldr	r3, [r3, #0]
 80107dc:	699a      	ldr	r2, [r3, #24]
 80107de:	68bb      	ldr	r3, [r7, #8]
 80107e0:	4013      	ands	r3, r2
 80107e2:	68ba      	ldr	r2, [r7, #8]
 80107e4:	429a      	cmp	r2, r3
 80107e6:	bf0c      	ite	eq
 80107e8:	2301      	moveq	r3, #1
 80107ea:	2300      	movne	r3, #0
 80107ec:	b2db      	uxtb	r3, r3
 80107ee:	461a      	mov	r2, r3
 80107f0:	79fb      	ldrb	r3, [r7, #7]
 80107f2:	429a      	cmp	r2, r3
 80107f4:	d0b4      	beq.n	8010760 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80107f6:	2300      	movs	r3, #0
}
 80107f8:	4618      	mov	r0, r3
 80107fa:	3710      	adds	r7, #16
 80107fc:	46bd      	mov	sp, r7
 80107fe:	bd80      	pop	{r7, pc}

08010800 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8010800:	b580      	push	{r7, lr}
 8010802:	b084      	sub	sp, #16
 8010804:	af00      	add	r7, sp, #0
 8010806:	60f8      	str	r0, [r7, #12]
 8010808:	60b9      	str	r1, [r7, #8]
 801080a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 801080c:	e033      	b.n	8010876 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 801080e:	687a      	ldr	r2, [r7, #4]
 8010810:	68b9      	ldr	r1, [r7, #8]
 8010812:	68f8      	ldr	r0, [r7, #12]
 8010814:	f000 f87e 	bl	8010914 <I2C_IsErrorOccurred>
 8010818:	4603      	mov	r3, r0
 801081a:	2b00      	cmp	r3, #0
 801081c:	d001      	beq.n	8010822 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 801081e:	2301      	movs	r3, #1
 8010820:	e031      	b.n	8010886 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010822:	68bb      	ldr	r3, [r7, #8]
 8010824:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010828:	d025      	beq.n	8010876 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801082a:	f7f8 fd07 	bl	800923c <HAL_GetTick>
 801082e:	4602      	mov	r2, r0
 8010830:	687b      	ldr	r3, [r7, #4]
 8010832:	1ad3      	subs	r3, r2, r3
 8010834:	68ba      	ldr	r2, [r7, #8]
 8010836:	429a      	cmp	r2, r3
 8010838:	d302      	bcc.n	8010840 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 801083a:	68bb      	ldr	r3, [r7, #8]
 801083c:	2b00      	cmp	r3, #0
 801083e:	d11a      	bne.n	8010876 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8010840:	68fb      	ldr	r3, [r7, #12]
 8010842:	681b      	ldr	r3, [r3, #0]
 8010844:	699b      	ldr	r3, [r3, #24]
 8010846:	f003 0302 	and.w	r3, r3, #2
 801084a:	2b02      	cmp	r3, #2
 801084c:	d013      	beq.n	8010876 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801084e:	68fb      	ldr	r3, [r7, #12]
 8010850:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010852:	f043 0220 	orr.w	r2, r3, #32
 8010856:	68fb      	ldr	r3, [r7, #12]
 8010858:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 801085a:	68fb      	ldr	r3, [r7, #12]
 801085c:	2220      	movs	r2, #32
 801085e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8010862:	68fb      	ldr	r3, [r7, #12]
 8010864:	2200      	movs	r2, #0
 8010866:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 801086a:	68fb      	ldr	r3, [r7, #12]
 801086c:	2200      	movs	r2, #0
 801086e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8010872:	2301      	movs	r3, #1
 8010874:	e007      	b.n	8010886 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8010876:	68fb      	ldr	r3, [r7, #12]
 8010878:	681b      	ldr	r3, [r3, #0]
 801087a:	699b      	ldr	r3, [r3, #24]
 801087c:	f003 0302 	and.w	r3, r3, #2
 8010880:	2b02      	cmp	r3, #2
 8010882:	d1c4      	bne.n	801080e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8010884:	2300      	movs	r3, #0
}
 8010886:	4618      	mov	r0, r3
 8010888:	3710      	adds	r7, #16
 801088a:	46bd      	mov	sp, r7
 801088c:	bd80      	pop	{r7, pc}

0801088e <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 801088e:	b580      	push	{r7, lr}
 8010890:	b084      	sub	sp, #16
 8010892:	af00      	add	r7, sp, #0
 8010894:	60f8      	str	r0, [r7, #12]
 8010896:	60b9      	str	r1, [r7, #8]
 8010898:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 801089a:	e02f      	b.n	80108fc <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 801089c:	687a      	ldr	r2, [r7, #4]
 801089e:	68b9      	ldr	r1, [r7, #8]
 80108a0:	68f8      	ldr	r0, [r7, #12]
 80108a2:	f000 f837 	bl	8010914 <I2C_IsErrorOccurred>
 80108a6:	4603      	mov	r3, r0
 80108a8:	2b00      	cmp	r3, #0
 80108aa:	d001      	beq.n	80108b0 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80108ac:	2301      	movs	r3, #1
 80108ae:	e02d      	b.n	801090c <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80108b0:	f7f8 fcc4 	bl	800923c <HAL_GetTick>
 80108b4:	4602      	mov	r2, r0
 80108b6:	687b      	ldr	r3, [r7, #4]
 80108b8:	1ad3      	subs	r3, r2, r3
 80108ba:	68ba      	ldr	r2, [r7, #8]
 80108bc:	429a      	cmp	r2, r3
 80108be:	d302      	bcc.n	80108c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80108c0:	68bb      	ldr	r3, [r7, #8]
 80108c2:	2b00      	cmp	r3, #0
 80108c4:	d11a      	bne.n	80108fc <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80108c6:	68fb      	ldr	r3, [r7, #12]
 80108c8:	681b      	ldr	r3, [r3, #0]
 80108ca:	699b      	ldr	r3, [r3, #24]
 80108cc:	f003 0320 	and.w	r3, r3, #32
 80108d0:	2b20      	cmp	r3, #32
 80108d2:	d013      	beq.n	80108fc <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80108d4:	68fb      	ldr	r3, [r7, #12]
 80108d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80108d8:	f043 0220 	orr.w	r2, r3, #32
 80108dc:	68fb      	ldr	r3, [r7, #12]
 80108de:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80108e0:	68fb      	ldr	r3, [r7, #12]
 80108e2:	2220      	movs	r2, #32
 80108e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80108e8:	68fb      	ldr	r3, [r7, #12]
 80108ea:	2200      	movs	r2, #0
 80108ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80108f0:	68fb      	ldr	r3, [r7, #12]
 80108f2:	2200      	movs	r2, #0
 80108f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80108f8:	2301      	movs	r3, #1
 80108fa:	e007      	b.n	801090c <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80108fc:	68fb      	ldr	r3, [r7, #12]
 80108fe:	681b      	ldr	r3, [r3, #0]
 8010900:	699b      	ldr	r3, [r3, #24]
 8010902:	f003 0320 	and.w	r3, r3, #32
 8010906:	2b20      	cmp	r3, #32
 8010908:	d1c8      	bne.n	801089c <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 801090a:	2300      	movs	r3, #0
}
 801090c:	4618      	mov	r0, r3
 801090e:	3710      	adds	r7, #16
 8010910:	46bd      	mov	sp, r7
 8010912:	bd80      	pop	{r7, pc}

08010914 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8010914:	b580      	push	{r7, lr}
 8010916:	b08a      	sub	sp, #40	@ 0x28
 8010918:	af00      	add	r7, sp, #0
 801091a:	60f8      	str	r0, [r7, #12]
 801091c:	60b9      	str	r1, [r7, #8]
 801091e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8010920:	2300      	movs	r3, #0
 8010922:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8010926:	68fb      	ldr	r3, [r7, #12]
 8010928:	681b      	ldr	r3, [r3, #0]
 801092a:	699b      	ldr	r3, [r3, #24]
 801092c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 801092e:	2300      	movs	r3, #0
 8010930:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8010932:	687b      	ldr	r3, [r7, #4]
 8010934:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8010936:	69bb      	ldr	r3, [r7, #24]
 8010938:	f003 0310 	and.w	r3, r3, #16
 801093c:	2b00      	cmp	r3, #0
 801093e:	d068      	beq.n	8010a12 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8010940:	68fb      	ldr	r3, [r7, #12]
 8010942:	681b      	ldr	r3, [r3, #0]
 8010944:	2210      	movs	r2, #16
 8010946:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8010948:	e049      	b.n	80109de <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 801094a:	68bb      	ldr	r3, [r7, #8]
 801094c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010950:	d045      	beq.n	80109de <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8010952:	f7f8 fc73 	bl	800923c <HAL_GetTick>
 8010956:	4602      	mov	r2, r0
 8010958:	69fb      	ldr	r3, [r7, #28]
 801095a:	1ad3      	subs	r3, r2, r3
 801095c:	68ba      	ldr	r2, [r7, #8]
 801095e:	429a      	cmp	r2, r3
 8010960:	d302      	bcc.n	8010968 <I2C_IsErrorOccurred+0x54>
 8010962:	68bb      	ldr	r3, [r7, #8]
 8010964:	2b00      	cmp	r3, #0
 8010966:	d13a      	bne.n	80109de <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8010968:	68fb      	ldr	r3, [r7, #12]
 801096a:	681b      	ldr	r3, [r3, #0]
 801096c:	685b      	ldr	r3, [r3, #4]
 801096e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8010972:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8010974:	68fb      	ldr	r3, [r7, #12]
 8010976:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801097a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 801097c:	68fb      	ldr	r3, [r7, #12]
 801097e:	681b      	ldr	r3, [r3, #0]
 8010980:	699b      	ldr	r3, [r3, #24]
 8010982:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8010986:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801098a:	d121      	bne.n	80109d0 <I2C_IsErrorOccurred+0xbc>
 801098c:	697b      	ldr	r3, [r7, #20]
 801098e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8010992:	d01d      	beq.n	80109d0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8010994:	7cfb      	ldrb	r3, [r7, #19]
 8010996:	2b20      	cmp	r3, #32
 8010998:	d01a      	beq.n	80109d0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 801099a:	68fb      	ldr	r3, [r7, #12]
 801099c:	681b      	ldr	r3, [r3, #0]
 801099e:	685a      	ldr	r2, [r3, #4]
 80109a0:	68fb      	ldr	r3, [r7, #12]
 80109a2:	681b      	ldr	r3, [r3, #0]
 80109a4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80109a8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80109aa:	f7f8 fc47 	bl	800923c <HAL_GetTick>
 80109ae:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80109b0:	e00e      	b.n	80109d0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80109b2:	f7f8 fc43 	bl	800923c <HAL_GetTick>
 80109b6:	4602      	mov	r2, r0
 80109b8:	69fb      	ldr	r3, [r7, #28]
 80109ba:	1ad3      	subs	r3, r2, r3
 80109bc:	2b19      	cmp	r3, #25
 80109be:	d907      	bls.n	80109d0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80109c0:	6a3b      	ldr	r3, [r7, #32]
 80109c2:	f043 0320 	orr.w	r3, r3, #32
 80109c6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80109c8:	2301      	movs	r3, #1
 80109ca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80109ce:	e006      	b.n	80109de <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80109d0:	68fb      	ldr	r3, [r7, #12]
 80109d2:	681b      	ldr	r3, [r3, #0]
 80109d4:	699b      	ldr	r3, [r3, #24]
 80109d6:	f003 0320 	and.w	r3, r3, #32
 80109da:	2b20      	cmp	r3, #32
 80109dc:	d1e9      	bne.n	80109b2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80109de:	68fb      	ldr	r3, [r7, #12]
 80109e0:	681b      	ldr	r3, [r3, #0]
 80109e2:	699b      	ldr	r3, [r3, #24]
 80109e4:	f003 0320 	and.w	r3, r3, #32
 80109e8:	2b20      	cmp	r3, #32
 80109ea:	d003      	beq.n	80109f4 <I2C_IsErrorOccurred+0xe0>
 80109ec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80109f0:	2b00      	cmp	r3, #0
 80109f2:	d0aa      	beq.n	801094a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80109f4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80109f8:	2b00      	cmp	r3, #0
 80109fa:	d103      	bne.n	8010a04 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80109fc:	68fb      	ldr	r3, [r7, #12]
 80109fe:	681b      	ldr	r3, [r3, #0]
 8010a00:	2220      	movs	r2, #32
 8010a02:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8010a04:	6a3b      	ldr	r3, [r7, #32]
 8010a06:	f043 0304 	orr.w	r3, r3, #4
 8010a0a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8010a0c:	2301      	movs	r3, #1
 8010a0e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8010a12:	68fb      	ldr	r3, [r7, #12]
 8010a14:	681b      	ldr	r3, [r3, #0]
 8010a16:	699b      	ldr	r3, [r3, #24]
 8010a18:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8010a1a:	69bb      	ldr	r3, [r7, #24]
 8010a1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010a20:	2b00      	cmp	r3, #0
 8010a22:	d00b      	beq.n	8010a3c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8010a24:	6a3b      	ldr	r3, [r7, #32]
 8010a26:	f043 0301 	orr.w	r3, r3, #1
 8010a2a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8010a2c:	68fb      	ldr	r3, [r7, #12]
 8010a2e:	681b      	ldr	r3, [r3, #0]
 8010a30:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8010a34:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8010a36:	2301      	movs	r3, #1
 8010a38:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8010a3c:	69bb      	ldr	r3, [r7, #24]
 8010a3e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8010a42:	2b00      	cmp	r3, #0
 8010a44:	d00b      	beq.n	8010a5e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8010a46:	6a3b      	ldr	r3, [r7, #32]
 8010a48:	f043 0308 	orr.w	r3, r3, #8
 8010a4c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8010a4e:	68fb      	ldr	r3, [r7, #12]
 8010a50:	681b      	ldr	r3, [r3, #0]
 8010a52:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8010a56:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8010a58:	2301      	movs	r3, #1
 8010a5a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8010a5e:	69bb      	ldr	r3, [r7, #24]
 8010a60:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8010a64:	2b00      	cmp	r3, #0
 8010a66:	d00b      	beq.n	8010a80 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8010a68:	6a3b      	ldr	r3, [r7, #32]
 8010a6a:	f043 0302 	orr.w	r3, r3, #2
 8010a6e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8010a70:	68fb      	ldr	r3, [r7, #12]
 8010a72:	681b      	ldr	r3, [r3, #0]
 8010a74:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010a78:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8010a7a:	2301      	movs	r3, #1
 8010a7c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8010a80:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010a84:	2b00      	cmp	r3, #0
 8010a86:	d01c      	beq.n	8010ac2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8010a88:	68f8      	ldr	r0, [r7, #12]
 8010a8a:	f7ff fe1e 	bl	80106ca <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8010a8e:	68fb      	ldr	r3, [r7, #12]
 8010a90:	681b      	ldr	r3, [r3, #0]
 8010a92:	6859      	ldr	r1, [r3, #4]
 8010a94:	68fb      	ldr	r3, [r7, #12]
 8010a96:	681a      	ldr	r2, [r3, #0]
 8010a98:	4b0d      	ldr	r3, [pc, #52]	@ (8010ad0 <I2C_IsErrorOccurred+0x1bc>)
 8010a9a:	400b      	ands	r3, r1
 8010a9c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8010a9e:	68fb      	ldr	r3, [r7, #12]
 8010aa0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8010aa2:	6a3b      	ldr	r3, [r7, #32]
 8010aa4:	431a      	orrs	r2, r3
 8010aa6:	68fb      	ldr	r3, [r7, #12]
 8010aa8:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8010aaa:	68fb      	ldr	r3, [r7, #12]
 8010aac:	2220      	movs	r2, #32
 8010aae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8010ab2:	68fb      	ldr	r3, [r7, #12]
 8010ab4:	2200      	movs	r2, #0
 8010ab6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8010aba:	68fb      	ldr	r3, [r7, #12]
 8010abc:	2200      	movs	r2, #0
 8010abe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8010ac2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8010ac6:	4618      	mov	r0, r3
 8010ac8:	3728      	adds	r7, #40	@ 0x28
 8010aca:	46bd      	mov	sp, r7
 8010acc:	bd80      	pop	{r7, pc}
 8010ace:	bf00      	nop
 8010ad0:	fe00e800 	.word	0xfe00e800

08010ad4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8010ad4:	b480      	push	{r7}
 8010ad6:	b087      	sub	sp, #28
 8010ad8:	af00      	add	r7, sp, #0
 8010ada:	60f8      	str	r0, [r7, #12]
 8010adc:	607b      	str	r3, [r7, #4]
 8010ade:	460b      	mov	r3, r1
 8010ae0:	817b      	strh	r3, [r7, #10]
 8010ae2:	4613      	mov	r3, r2
 8010ae4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8010ae6:	897b      	ldrh	r3, [r7, #10]
 8010ae8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8010aec:	7a7b      	ldrb	r3, [r7, #9]
 8010aee:	041b      	lsls	r3, r3, #16
 8010af0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8010af4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8010af6:	687b      	ldr	r3, [r7, #4]
 8010af8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8010afa:	6a3b      	ldr	r3, [r7, #32]
 8010afc:	4313      	orrs	r3, r2
 8010afe:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8010b02:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8010b04:	68fb      	ldr	r3, [r7, #12]
 8010b06:	681b      	ldr	r3, [r3, #0]
 8010b08:	685a      	ldr	r2, [r3, #4]
 8010b0a:	6a3b      	ldr	r3, [r7, #32]
 8010b0c:	0d5b      	lsrs	r3, r3, #21
 8010b0e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8010b12:	4b08      	ldr	r3, [pc, #32]	@ (8010b34 <I2C_TransferConfig+0x60>)
 8010b14:	430b      	orrs	r3, r1
 8010b16:	43db      	mvns	r3, r3
 8010b18:	ea02 0103 	and.w	r1, r2, r3
 8010b1c:	68fb      	ldr	r3, [r7, #12]
 8010b1e:	681b      	ldr	r3, [r3, #0]
 8010b20:	697a      	ldr	r2, [r7, #20]
 8010b22:	430a      	orrs	r2, r1
 8010b24:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8010b26:	bf00      	nop
 8010b28:	371c      	adds	r7, #28
 8010b2a:	46bd      	mov	sp, r7
 8010b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b30:	4770      	bx	lr
 8010b32:	bf00      	nop
 8010b34:	03ff63ff 	.word	0x03ff63ff

08010b38 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8010b38:	b480      	push	{r7}
 8010b3a:	b085      	sub	sp, #20
 8010b3c:	af00      	add	r7, sp, #0
 8010b3e:	6078      	str	r0, [r7, #4]
 8010b40:	460b      	mov	r3, r1
 8010b42:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8010b44:	2300      	movs	r3, #0
 8010b46:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8010b48:	687b      	ldr	r3, [r7, #4]
 8010b4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010b4c:	4a39      	ldr	r2, [pc, #228]	@ (8010c34 <I2C_Enable_IRQ+0xfc>)
 8010b4e:	4293      	cmp	r3, r2
 8010b50:	d032      	beq.n	8010bb8 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8010b52:	687b      	ldr	r3, [r7, #4]
 8010b54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8010b56:	4a38      	ldr	r2, [pc, #224]	@ (8010c38 <I2C_Enable_IRQ+0x100>)
 8010b58:	4293      	cmp	r3, r2
 8010b5a:	d02d      	beq.n	8010bb8 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8010b5c:	687b      	ldr	r3, [r7, #4]
 8010b5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8010b60:	4a36      	ldr	r2, [pc, #216]	@ (8010c3c <I2C_Enable_IRQ+0x104>)
 8010b62:	4293      	cmp	r3, r2
 8010b64:	d028      	beq.n	8010bb8 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8010b66:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010b6a:	2b00      	cmp	r3, #0
 8010b6c:	da03      	bge.n	8010b76 <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8010b6e:	68fb      	ldr	r3, [r7, #12]
 8010b70:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8010b74:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8010b76:	887b      	ldrh	r3, [r7, #2]
 8010b78:	f003 0301 	and.w	r3, r3, #1
 8010b7c:	2b00      	cmp	r3, #0
 8010b7e:	d003      	beq.n	8010b88 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8010b80:	68fb      	ldr	r3, [r7, #12]
 8010b82:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8010b86:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8010b88:	887b      	ldrh	r3, [r7, #2]
 8010b8a:	f003 0302 	and.w	r3, r3, #2
 8010b8e:	2b00      	cmp	r3, #0
 8010b90:	d003      	beq.n	8010b9a <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8010b92:	68fb      	ldr	r3, [r7, #12]
 8010b94:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8010b98:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8010b9a:	887b      	ldrh	r3, [r7, #2]
 8010b9c:	2b10      	cmp	r3, #16
 8010b9e:	d103      	bne.n	8010ba8 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8010ba0:	68fb      	ldr	r3, [r7, #12]
 8010ba2:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8010ba6:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8010ba8:	887b      	ldrh	r3, [r7, #2]
 8010baa:	2b20      	cmp	r3, #32
 8010bac:	d133      	bne.n	8010c16 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8010bae:	68fb      	ldr	r3, [r7, #12]
 8010bb0:	f043 0320 	orr.w	r3, r3, #32
 8010bb4:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8010bb6:	e02e      	b.n	8010c16 <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8010bb8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010bbc:	2b00      	cmp	r3, #0
 8010bbe:	da03      	bge.n	8010bc8 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8010bc0:	68fb      	ldr	r3, [r7, #12]
 8010bc2:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8010bc6:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8010bc8:	887b      	ldrh	r3, [r7, #2]
 8010bca:	f003 0301 	and.w	r3, r3, #1
 8010bce:	2b00      	cmp	r3, #0
 8010bd0:	d003      	beq.n	8010bda <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8010bd2:	68fb      	ldr	r3, [r7, #12]
 8010bd4:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8010bd8:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8010bda:	887b      	ldrh	r3, [r7, #2]
 8010bdc:	f003 0302 	and.w	r3, r3, #2
 8010be0:	2b00      	cmp	r3, #0
 8010be2:	d003      	beq.n	8010bec <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8010be4:	68fb      	ldr	r3, [r7, #12]
 8010be6:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8010bea:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8010bec:	887b      	ldrh	r3, [r7, #2]
 8010bee:	2b10      	cmp	r3, #16
 8010bf0:	d103      	bne.n	8010bfa <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8010bf2:	68fb      	ldr	r3, [r7, #12]
 8010bf4:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8010bf8:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8010bfa:	887b      	ldrh	r3, [r7, #2]
 8010bfc:	2b20      	cmp	r3, #32
 8010bfe:	d103      	bne.n	8010c08 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8010c00:	68fb      	ldr	r3, [r7, #12]
 8010c02:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8010c06:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8010c08:	887b      	ldrh	r3, [r7, #2]
 8010c0a:	2b40      	cmp	r3, #64	@ 0x40
 8010c0c:	d103      	bne.n	8010c16 <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8010c0e:	68fb      	ldr	r3, [r7, #12]
 8010c10:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010c14:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8010c16:	687b      	ldr	r3, [r7, #4]
 8010c18:	681b      	ldr	r3, [r3, #0]
 8010c1a:	6819      	ldr	r1, [r3, #0]
 8010c1c:	687b      	ldr	r3, [r7, #4]
 8010c1e:	681b      	ldr	r3, [r3, #0]
 8010c20:	68fa      	ldr	r2, [r7, #12]
 8010c22:	430a      	orrs	r2, r1
 8010c24:	601a      	str	r2, [r3, #0]
}
 8010c26:	bf00      	nop
 8010c28:	3714      	adds	r7, #20
 8010c2a:	46bd      	mov	sp, r7
 8010c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c30:	4770      	bx	lr
 8010c32:	bf00      	nop
 8010c34:	0800f25b 	.word	0x0800f25b
 8010c38:	0800f67d 	.word	0x0800f67d
 8010c3c:	0800f431 	.word	0x0800f431

08010c40 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8010c40:	b480      	push	{r7}
 8010c42:	b085      	sub	sp, #20
 8010c44:	af00      	add	r7, sp, #0
 8010c46:	6078      	str	r0, [r7, #4]
 8010c48:	460b      	mov	r3, r1
 8010c4a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8010c4c:	2300      	movs	r3, #0
 8010c4e:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8010c50:	887b      	ldrh	r3, [r7, #2]
 8010c52:	f003 0301 	and.w	r3, r3, #1
 8010c56:	2b00      	cmp	r3, #0
 8010c58:	d00f      	beq.n	8010c7a <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8010c5a:	68fb      	ldr	r3, [r7, #12]
 8010c5c:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8010c60:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8010c62:	687b      	ldr	r3, [r7, #4]
 8010c64:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8010c68:	b2db      	uxtb	r3, r3
 8010c6a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8010c6e:	2b28      	cmp	r3, #40	@ 0x28
 8010c70:	d003      	beq.n	8010c7a <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8010c72:	68fb      	ldr	r3, [r7, #12]
 8010c74:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8010c78:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8010c7a:	887b      	ldrh	r3, [r7, #2]
 8010c7c:	f003 0302 	and.w	r3, r3, #2
 8010c80:	2b00      	cmp	r3, #0
 8010c82:	d00f      	beq.n	8010ca4 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8010c84:	68fb      	ldr	r3, [r7, #12]
 8010c86:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8010c8a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8010c8c:	687b      	ldr	r3, [r7, #4]
 8010c8e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8010c92:	b2db      	uxtb	r3, r3
 8010c94:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8010c98:	2b28      	cmp	r3, #40	@ 0x28
 8010c9a:	d003      	beq.n	8010ca4 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8010c9c:	68fb      	ldr	r3, [r7, #12]
 8010c9e:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8010ca2:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8010ca4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010ca8:	2b00      	cmp	r3, #0
 8010caa:	da03      	bge.n	8010cb4 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8010cac:	68fb      	ldr	r3, [r7, #12]
 8010cae:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8010cb2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8010cb4:	887b      	ldrh	r3, [r7, #2]
 8010cb6:	2b10      	cmp	r3, #16
 8010cb8:	d103      	bne.n	8010cc2 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8010cba:	68fb      	ldr	r3, [r7, #12]
 8010cbc:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8010cc0:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8010cc2:	887b      	ldrh	r3, [r7, #2]
 8010cc4:	2b20      	cmp	r3, #32
 8010cc6:	d103      	bne.n	8010cd0 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8010cc8:	68fb      	ldr	r3, [r7, #12]
 8010cca:	f043 0320 	orr.w	r3, r3, #32
 8010cce:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8010cd0:	887b      	ldrh	r3, [r7, #2]
 8010cd2:	2b40      	cmp	r3, #64	@ 0x40
 8010cd4:	d103      	bne.n	8010cde <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8010cd6:	68fb      	ldr	r3, [r7, #12]
 8010cd8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010cdc:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8010cde:	687b      	ldr	r3, [r7, #4]
 8010ce0:	681b      	ldr	r3, [r3, #0]
 8010ce2:	6819      	ldr	r1, [r3, #0]
 8010ce4:	68fb      	ldr	r3, [r7, #12]
 8010ce6:	43da      	mvns	r2, r3
 8010ce8:	687b      	ldr	r3, [r7, #4]
 8010cea:	681b      	ldr	r3, [r3, #0]
 8010cec:	400a      	ands	r2, r1
 8010cee:	601a      	str	r2, [r3, #0]
}
 8010cf0:	bf00      	nop
 8010cf2:	3714      	adds	r7, #20
 8010cf4:	46bd      	mov	sp, r7
 8010cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cfa:	4770      	bx	lr

08010cfc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8010cfc:	b480      	push	{r7}
 8010cfe:	b083      	sub	sp, #12
 8010d00:	af00      	add	r7, sp, #0
 8010d02:	6078      	str	r0, [r7, #4]
 8010d04:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8010d06:	687b      	ldr	r3, [r7, #4]
 8010d08:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8010d0c:	b2db      	uxtb	r3, r3
 8010d0e:	2b20      	cmp	r3, #32
 8010d10:	d138      	bne.n	8010d84 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8010d12:	687b      	ldr	r3, [r7, #4]
 8010d14:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8010d18:	2b01      	cmp	r3, #1
 8010d1a:	d101      	bne.n	8010d20 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8010d1c:	2302      	movs	r3, #2
 8010d1e:	e032      	b.n	8010d86 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8010d20:	687b      	ldr	r3, [r7, #4]
 8010d22:	2201      	movs	r2, #1
 8010d24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8010d28:	687b      	ldr	r3, [r7, #4]
 8010d2a:	2224      	movs	r2, #36	@ 0x24
 8010d2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8010d30:	687b      	ldr	r3, [r7, #4]
 8010d32:	681b      	ldr	r3, [r3, #0]
 8010d34:	681a      	ldr	r2, [r3, #0]
 8010d36:	687b      	ldr	r3, [r7, #4]
 8010d38:	681b      	ldr	r3, [r3, #0]
 8010d3a:	f022 0201 	bic.w	r2, r2, #1
 8010d3e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8010d40:	687b      	ldr	r3, [r7, #4]
 8010d42:	681b      	ldr	r3, [r3, #0]
 8010d44:	681a      	ldr	r2, [r3, #0]
 8010d46:	687b      	ldr	r3, [r7, #4]
 8010d48:	681b      	ldr	r3, [r3, #0]
 8010d4a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8010d4e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8010d50:	687b      	ldr	r3, [r7, #4]
 8010d52:	681b      	ldr	r3, [r3, #0]
 8010d54:	6819      	ldr	r1, [r3, #0]
 8010d56:	687b      	ldr	r3, [r7, #4]
 8010d58:	681b      	ldr	r3, [r3, #0]
 8010d5a:	683a      	ldr	r2, [r7, #0]
 8010d5c:	430a      	orrs	r2, r1
 8010d5e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8010d60:	687b      	ldr	r3, [r7, #4]
 8010d62:	681b      	ldr	r3, [r3, #0]
 8010d64:	681a      	ldr	r2, [r3, #0]
 8010d66:	687b      	ldr	r3, [r7, #4]
 8010d68:	681b      	ldr	r3, [r3, #0]
 8010d6a:	f042 0201 	orr.w	r2, r2, #1
 8010d6e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8010d70:	687b      	ldr	r3, [r7, #4]
 8010d72:	2220      	movs	r2, #32
 8010d74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8010d78:	687b      	ldr	r3, [r7, #4]
 8010d7a:	2200      	movs	r2, #0
 8010d7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8010d80:	2300      	movs	r3, #0
 8010d82:	e000      	b.n	8010d86 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8010d84:	2302      	movs	r3, #2
  }
}
 8010d86:	4618      	mov	r0, r3
 8010d88:	370c      	adds	r7, #12
 8010d8a:	46bd      	mov	sp, r7
 8010d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d90:	4770      	bx	lr

08010d92 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8010d92:	b480      	push	{r7}
 8010d94:	b085      	sub	sp, #20
 8010d96:	af00      	add	r7, sp, #0
 8010d98:	6078      	str	r0, [r7, #4]
 8010d9a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8010d9c:	687b      	ldr	r3, [r7, #4]
 8010d9e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8010da2:	b2db      	uxtb	r3, r3
 8010da4:	2b20      	cmp	r3, #32
 8010da6:	d139      	bne.n	8010e1c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8010da8:	687b      	ldr	r3, [r7, #4]
 8010daa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8010dae:	2b01      	cmp	r3, #1
 8010db0:	d101      	bne.n	8010db6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8010db2:	2302      	movs	r3, #2
 8010db4:	e033      	b.n	8010e1e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8010db6:	687b      	ldr	r3, [r7, #4]
 8010db8:	2201      	movs	r2, #1
 8010dba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8010dbe:	687b      	ldr	r3, [r7, #4]
 8010dc0:	2224      	movs	r2, #36	@ 0x24
 8010dc2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8010dc6:	687b      	ldr	r3, [r7, #4]
 8010dc8:	681b      	ldr	r3, [r3, #0]
 8010dca:	681a      	ldr	r2, [r3, #0]
 8010dcc:	687b      	ldr	r3, [r7, #4]
 8010dce:	681b      	ldr	r3, [r3, #0]
 8010dd0:	f022 0201 	bic.w	r2, r2, #1
 8010dd4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8010dd6:	687b      	ldr	r3, [r7, #4]
 8010dd8:	681b      	ldr	r3, [r3, #0]
 8010dda:	681b      	ldr	r3, [r3, #0]
 8010ddc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8010dde:	68fb      	ldr	r3, [r7, #12]
 8010de0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8010de4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8010de6:	683b      	ldr	r3, [r7, #0]
 8010de8:	021b      	lsls	r3, r3, #8
 8010dea:	68fa      	ldr	r2, [r7, #12]
 8010dec:	4313      	orrs	r3, r2
 8010dee:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8010df0:	687b      	ldr	r3, [r7, #4]
 8010df2:	681b      	ldr	r3, [r3, #0]
 8010df4:	68fa      	ldr	r2, [r7, #12]
 8010df6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8010df8:	687b      	ldr	r3, [r7, #4]
 8010dfa:	681b      	ldr	r3, [r3, #0]
 8010dfc:	681a      	ldr	r2, [r3, #0]
 8010dfe:	687b      	ldr	r3, [r7, #4]
 8010e00:	681b      	ldr	r3, [r3, #0]
 8010e02:	f042 0201 	orr.w	r2, r2, #1
 8010e06:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8010e08:	687b      	ldr	r3, [r7, #4]
 8010e0a:	2220      	movs	r2, #32
 8010e0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8010e10:	687b      	ldr	r3, [r7, #4]
 8010e12:	2200      	movs	r2, #0
 8010e14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8010e18:	2300      	movs	r3, #0
 8010e1a:	e000      	b.n	8010e1e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8010e1c:	2302      	movs	r3, #2
  }
}
 8010e1e:	4618      	mov	r0, r3
 8010e20:	3714      	adds	r7, #20
 8010e22:	46bd      	mov	sp, r7
 8010e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e28:	4770      	bx	lr
	...

08010e2c <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C5 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C5 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8010e2c:	b480      	push	{r7}
 8010e2e:	b085      	sub	sp, #20
 8010e30:	af00      	add	r7, sp, #0
 8010e32:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8010e34:	4b0d      	ldr	r3, [pc, #52]	@ (8010e6c <HAL_I2CEx_EnableFastModePlus+0x40>)
 8010e36:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8010e3a:	4a0c      	ldr	r2, [pc, #48]	@ (8010e6c <HAL_I2CEx_EnableFastModePlus+0x40>)
 8010e3c:	f043 0302 	orr.w	r3, r3, #2
 8010e40:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8010e44:	4b09      	ldr	r3, [pc, #36]	@ (8010e6c <HAL_I2CEx_EnableFastModePlus+0x40>)
 8010e46:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8010e4a:	f003 0302 	and.w	r3, r3, #2
 8010e4e:	60fb      	str	r3, [r7, #12]
 8010e50:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
 8010e52:	4b07      	ldr	r3, [pc, #28]	@ (8010e70 <HAL_I2CEx_EnableFastModePlus+0x44>)
 8010e54:	685a      	ldr	r2, [r3, #4]
 8010e56:	4906      	ldr	r1, [pc, #24]	@ (8010e70 <HAL_I2CEx_EnableFastModePlus+0x44>)
 8010e58:	687b      	ldr	r3, [r7, #4]
 8010e5a:	4313      	orrs	r3, r2
 8010e5c:	604b      	str	r3, [r1, #4]
}
 8010e5e:	bf00      	nop
 8010e60:	3714      	adds	r7, #20
 8010e62:	46bd      	mov	sp, r7
 8010e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e68:	4770      	bx	lr
 8010e6a:	bf00      	nop
 8010e6c:	58024400 	.word	0x58024400
 8010e70:	58000400 	.word	0x58000400

08010e74 <HAL_PWREx_ConfigSupply>:
 8010e74:	b580      	push	{r7, lr}
 8010e76:	b084      	sub	sp, #16
 8010e78:	af00      	add	r7, sp, #0
 8010e7a:	6078      	str	r0, [r7, #4]
 8010e7c:	4b19      	ldr	r3, [pc, #100]	@ (8010ee4 <HAL_PWREx_ConfigSupply+0x70>)
 8010e7e:	68db      	ldr	r3, [r3, #12]
 8010e80:	f003 0304 	and.w	r3, r3, #4
 8010e84:	2b04      	cmp	r3, #4
 8010e86:	d00a      	beq.n	8010e9e <HAL_PWREx_ConfigSupply+0x2a>
 8010e88:	4b16      	ldr	r3, [pc, #88]	@ (8010ee4 <HAL_PWREx_ConfigSupply+0x70>)
 8010e8a:	68db      	ldr	r3, [r3, #12]
 8010e8c:	f003 0307 	and.w	r3, r3, #7
 8010e90:	687a      	ldr	r2, [r7, #4]
 8010e92:	429a      	cmp	r2, r3
 8010e94:	d001      	beq.n	8010e9a <HAL_PWREx_ConfigSupply+0x26>
 8010e96:	2301      	movs	r3, #1
 8010e98:	e01f      	b.n	8010eda <HAL_PWREx_ConfigSupply+0x66>
 8010e9a:	2300      	movs	r3, #0
 8010e9c:	e01d      	b.n	8010eda <HAL_PWREx_ConfigSupply+0x66>
 8010e9e:	4b11      	ldr	r3, [pc, #68]	@ (8010ee4 <HAL_PWREx_ConfigSupply+0x70>)
 8010ea0:	68db      	ldr	r3, [r3, #12]
 8010ea2:	f023 0207 	bic.w	r2, r3, #7
 8010ea6:	490f      	ldr	r1, [pc, #60]	@ (8010ee4 <HAL_PWREx_ConfigSupply+0x70>)
 8010ea8:	687b      	ldr	r3, [r7, #4]
 8010eaa:	4313      	orrs	r3, r2
 8010eac:	60cb      	str	r3, [r1, #12]
 8010eae:	f7f8 f9c5 	bl	800923c <HAL_GetTick>
 8010eb2:	60f8      	str	r0, [r7, #12]
 8010eb4:	e009      	b.n	8010eca <HAL_PWREx_ConfigSupply+0x56>
 8010eb6:	f7f8 f9c1 	bl	800923c <HAL_GetTick>
 8010eba:	4602      	mov	r2, r0
 8010ebc:	68fb      	ldr	r3, [r7, #12]
 8010ebe:	1ad3      	subs	r3, r2, r3
 8010ec0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8010ec4:	d901      	bls.n	8010eca <HAL_PWREx_ConfigSupply+0x56>
 8010ec6:	2301      	movs	r3, #1
 8010ec8:	e007      	b.n	8010eda <HAL_PWREx_ConfigSupply+0x66>
 8010eca:	4b06      	ldr	r3, [pc, #24]	@ (8010ee4 <HAL_PWREx_ConfigSupply+0x70>)
 8010ecc:	685b      	ldr	r3, [r3, #4]
 8010ece:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8010ed2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8010ed6:	d1ee      	bne.n	8010eb6 <HAL_PWREx_ConfigSupply+0x42>
 8010ed8:	2300      	movs	r3, #0
 8010eda:	4618      	mov	r0, r3
 8010edc:	3710      	adds	r7, #16
 8010ede:	46bd      	mov	sp, r7
 8010ee0:	bd80      	pop	{r7, pc}
 8010ee2:	bf00      	nop
 8010ee4:	58024800 	.word	0x58024800

08010ee8 <HAL_RCC_OscConfig>:
 8010ee8:	b580      	push	{r7, lr}
 8010eea:	b08c      	sub	sp, #48	@ 0x30
 8010eec:	af00      	add	r7, sp, #0
 8010eee:	6078      	str	r0, [r7, #4]
 8010ef0:	687b      	ldr	r3, [r7, #4]
 8010ef2:	2b00      	cmp	r3, #0
 8010ef4:	d101      	bne.n	8010efa <HAL_RCC_OscConfig+0x12>
 8010ef6:	2301      	movs	r3, #1
 8010ef8:	e3c8      	b.n	801168c <HAL_RCC_OscConfig+0x7a4>
 8010efa:	687b      	ldr	r3, [r7, #4]
 8010efc:	681b      	ldr	r3, [r3, #0]
 8010efe:	f003 0301 	and.w	r3, r3, #1
 8010f02:	2b00      	cmp	r3, #0
 8010f04:	f000 8087 	beq.w	8011016 <HAL_RCC_OscConfig+0x12e>
 8010f08:	4b88      	ldr	r3, [pc, #544]	@ (801112c <HAL_RCC_OscConfig+0x244>)
 8010f0a:	691b      	ldr	r3, [r3, #16]
 8010f0c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8010f10:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010f12:	4b86      	ldr	r3, [pc, #536]	@ (801112c <HAL_RCC_OscConfig+0x244>)
 8010f14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010f16:	62bb      	str	r3, [r7, #40]	@ 0x28
 8010f18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010f1a:	2b10      	cmp	r3, #16
 8010f1c:	d007      	beq.n	8010f2e <HAL_RCC_OscConfig+0x46>
 8010f1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010f20:	2b18      	cmp	r3, #24
 8010f22:	d110      	bne.n	8010f46 <HAL_RCC_OscConfig+0x5e>
 8010f24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010f26:	f003 0303 	and.w	r3, r3, #3
 8010f2a:	2b02      	cmp	r3, #2
 8010f2c:	d10b      	bne.n	8010f46 <HAL_RCC_OscConfig+0x5e>
 8010f2e:	4b7f      	ldr	r3, [pc, #508]	@ (801112c <HAL_RCC_OscConfig+0x244>)
 8010f30:	681b      	ldr	r3, [r3, #0]
 8010f32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8010f36:	2b00      	cmp	r3, #0
 8010f38:	d06c      	beq.n	8011014 <HAL_RCC_OscConfig+0x12c>
 8010f3a:	687b      	ldr	r3, [r7, #4]
 8010f3c:	685b      	ldr	r3, [r3, #4]
 8010f3e:	2b00      	cmp	r3, #0
 8010f40:	d168      	bne.n	8011014 <HAL_RCC_OscConfig+0x12c>
 8010f42:	2301      	movs	r3, #1
 8010f44:	e3a2      	b.n	801168c <HAL_RCC_OscConfig+0x7a4>
 8010f46:	687b      	ldr	r3, [r7, #4]
 8010f48:	685b      	ldr	r3, [r3, #4]
 8010f4a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010f4e:	d106      	bne.n	8010f5e <HAL_RCC_OscConfig+0x76>
 8010f50:	4b76      	ldr	r3, [pc, #472]	@ (801112c <HAL_RCC_OscConfig+0x244>)
 8010f52:	681b      	ldr	r3, [r3, #0]
 8010f54:	4a75      	ldr	r2, [pc, #468]	@ (801112c <HAL_RCC_OscConfig+0x244>)
 8010f56:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8010f5a:	6013      	str	r3, [r2, #0]
 8010f5c:	e02e      	b.n	8010fbc <HAL_RCC_OscConfig+0xd4>
 8010f5e:	687b      	ldr	r3, [r7, #4]
 8010f60:	685b      	ldr	r3, [r3, #4]
 8010f62:	2b00      	cmp	r3, #0
 8010f64:	d10c      	bne.n	8010f80 <HAL_RCC_OscConfig+0x98>
 8010f66:	4b71      	ldr	r3, [pc, #452]	@ (801112c <HAL_RCC_OscConfig+0x244>)
 8010f68:	681b      	ldr	r3, [r3, #0]
 8010f6a:	4a70      	ldr	r2, [pc, #448]	@ (801112c <HAL_RCC_OscConfig+0x244>)
 8010f6c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8010f70:	6013      	str	r3, [r2, #0]
 8010f72:	4b6e      	ldr	r3, [pc, #440]	@ (801112c <HAL_RCC_OscConfig+0x244>)
 8010f74:	681b      	ldr	r3, [r3, #0]
 8010f76:	4a6d      	ldr	r2, [pc, #436]	@ (801112c <HAL_RCC_OscConfig+0x244>)
 8010f78:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8010f7c:	6013      	str	r3, [r2, #0]
 8010f7e:	e01d      	b.n	8010fbc <HAL_RCC_OscConfig+0xd4>
 8010f80:	687b      	ldr	r3, [r7, #4]
 8010f82:	685b      	ldr	r3, [r3, #4]
 8010f84:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8010f88:	d10c      	bne.n	8010fa4 <HAL_RCC_OscConfig+0xbc>
 8010f8a:	4b68      	ldr	r3, [pc, #416]	@ (801112c <HAL_RCC_OscConfig+0x244>)
 8010f8c:	681b      	ldr	r3, [r3, #0]
 8010f8e:	4a67      	ldr	r2, [pc, #412]	@ (801112c <HAL_RCC_OscConfig+0x244>)
 8010f90:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8010f94:	6013      	str	r3, [r2, #0]
 8010f96:	4b65      	ldr	r3, [pc, #404]	@ (801112c <HAL_RCC_OscConfig+0x244>)
 8010f98:	681b      	ldr	r3, [r3, #0]
 8010f9a:	4a64      	ldr	r2, [pc, #400]	@ (801112c <HAL_RCC_OscConfig+0x244>)
 8010f9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8010fa0:	6013      	str	r3, [r2, #0]
 8010fa2:	e00b      	b.n	8010fbc <HAL_RCC_OscConfig+0xd4>
 8010fa4:	4b61      	ldr	r3, [pc, #388]	@ (801112c <HAL_RCC_OscConfig+0x244>)
 8010fa6:	681b      	ldr	r3, [r3, #0]
 8010fa8:	4a60      	ldr	r2, [pc, #384]	@ (801112c <HAL_RCC_OscConfig+0x244>)
 8010faa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8010fae:	6013      	str	r3, [r2, #0]
 8010fb0:	4b5e      	ldr	r3, [pc, #376]	@ (801112c <HAL_RCC_OscConfig+0x244>)
 8010fb2:	681b      	ldr	r3, [r3, #0]
 8010fb4:	4a5d      	ldr	r2, [pc, #372]	@ (801112c <HAL_RCC_OscConfig+0x244>)
 8010fb6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8010fba:	6013      	str	r3, [r2, #0]
 8010fbc:	687b      	ldr	r3, [r7, #4]
 8010fbe:	685b      	ldr	r3, [r3, #4]
 8010fc0:	2b00      	cmp	r3, #0
 8010fc2:	d013      	beq.n	8010fec <HAL_RCC_OscConfig+0x104>
 8010fc4:	f7f8 f93a 	bl	800923c <HAL_GetTick>
 8010fc8:	6278      	str	r0, [r7, #36]	@ 0x24
 8010fca:	e008      	b.n	8010fde <HAL_RCC_OscConfig+0xf6>
 8010fcc:	f7f8 f936 	bl	800923c <HAL_GetTick>
 8010fd0:	4602      	mov	r2, r0
 8010fd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010fd4:	1ad3      	subs	r3, r2, r3
 8010fd6:	2b64      	cmp	r3, #100	@ 0x64
 8010fd8:	d901      	bls.n	8010fde <HAL_RCC_OscConfig+0xf6>
 8010fda:	2303      	movs	r3, #3
 8010fdc:	e356      	b.n	801168c <HAL_RCC_OscConfig+0x7a4>
 8010fde:	4b53      	ldr	r3, [pc, #332]	@ (801112c <HAL_RCC_OscConfig+0x244>)
 8010fe0:	681b      	ldr	r3, [r3, #0]
 8010fe2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8010fe6:	2b00      	cmp	r3, #0
 8010fe8:	d0f0      	beq.n	8010fcc <HAL_RCC_OscConfig+0xe4>
 8010fea:	e014      	b.n	8011016 <HAL_RCC_OscConfig+0x12e>
 8010fec:	f7f8 f926 	bl	800923c <HAL_GetTick>
 8010ff0:	6278      	str	r0, [r7, #36]	@ 0x24
 8010ff2:	e008      	b.n	8011006 <HAL_RCC_OscConfig+0x11e>
 8010ff4:	f7f8 f922 	bl	800923c <HAL_GetTick>
 8010ff8:	4602      	mov	r2, r0
 8010ffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010ffc:	1ad3      	subs	r3, r2, r3
 8010ffe:	2b64      	cmp	r3, #100	@ 0x64
 8011000:	d901      	bls.n	8011006 <HAL_RCC_OscConfig+0x11e>
 8011002:	2303      	movs	r3, #3
 8011004:	e342      	b.n	801168c <HAL_RCC_OscConfig+0x7a4>
 8011006:	4b49      	ldr	r3, [pc, #292]	@ (801112c <HAL_RCC_OscConfig+0x244>)
 8011008:	681b      	ldr	r3, [r3, #0]
 801100a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801100e:	2b00      	cmp	r3, #0
 8011010:	d1f0      	bne.n	8010ff4 <HAL_RCC_OscConfig+0x10c>
 8011012:	e000      	b.n	8011016 <HAL_RCC_OscConfig+0x12e>
 8011014:	bf00      	nop
 8011016:	687b      	ldr	r3, [r7, #4]
 8011018:	681b      	ldr	r3, [r3, #0]
 801101a:	f003 0302 	and.w	r3, r3, #2
 801101e:	2b00      	cmp	r3, #0
 8011020:	f000 808c 	beq.w	801113c <HAL_RCC_OscConfig+0x254>
 8011024:	4b41      	ldr	r3, [pc, #260]	@ (801112c <HAL_RCC_OscConfig+0x244>)
 8011026:	691b      	ldr	r3, [r3, #16]
 8011028:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801102c:	623b      	str	r3, [r7, #32]
 801102e:	4b3f      	ldr	r3, [pc, #252]	@ (801112c <HAL_RCC_OscConfig+0x244>)
 8011030:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011032:	61fb      	str	r3, [r7, #28]
 8011034:	6a3b      	ldr	r3, [r7, #32]
 8011036:	2b00      	cmp	r3, #0
 8011038:	d007      	beq.n	801104a <HAL_RCC_OscConfig+0x162>
 801103a:	6a3b      	ldr	r3, [r7, #32]
 801103c:	2b18      	cmp	r3, #24
 801103e:	d137      	bne.n	80110b0 <HAL_RCC_OscConfig+0x1c8>
 8011040:	69fb      	ldr	r3, [r7, #28]
 8011042:	f003 0303 	and.w	r3, r3, #3
 8011046:	2b00      	cmp	r3, #0
 8011048:	d132      	bne.n	80110b0 <HAL_RCC_OscConfig+0x1c8>
 801104a:	4b38      	ldr	r3, [pc, #224]	@ (801112c <HAL_RCC_OscConfig+0x244>)
 801104c:	681b      	ldr	r3, [r3, #0]
 801104e:	f003 0304 	and.w	r3, r3, #4
 8011052:	2b00      	cmp	r3, #0
 8011054:	d005      	beq.n	8011062 <HAL_RCC_OscConfig+0x17a>
 8011056:	687b      	ldr	r3, [r7, #4]
 8011058:	68db      	ldr	r3, [r3, #12]
 801105a:	2b00      	cmp	r3, #0
 801105c:	d101      	bne.n	8011062 <HAL_RCC_OscConfig+0x17a>
 801105e:	2301      	movs	r3, #1
 8011060:	e314      	b.n	801168c <HAL_RCC_OscConfig+0x7a4>
 8011062:	4b32      	ldr	r3, [pc, #200]	@ (801112c <HAL_RCC_OscConfig+0x244>)
 8011064:	681b      	ldr	r3, [r3, #0]
 8011066:	f023 0219 	bic.w	r2, r3, #25
 801106a:	687b      	ldr	r3, [r7, #4]
 801106c:	68db      	ldr	r3, [r3, #12]
 801106e:	492f      	ldr	r1, [pc, #188]	@ (801112c <HAL_RCC_OscConfig+0x244>)
 8011070:	4313      	orrs	r3, r2
 8011072:	600b      	str	r3, [r1, #0]
 8011074:	f7f8 f8e2 	bl	800923c <HAL_GetTick>
 8011078:	6278      	str	r0, [r7, #36]	@ 0x24
 801107a:	e008      	b.n	801108e <HAL_RCC_OscConfig+0x1a6>
 801107c:	f7f8 f8de 	bl	800923c <HAL_GetTick>
 8011080:	4602      	mov	r2, r0
 8011082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011084:	1ad3      	subs	r3, r2, r3
 8011086:	2b02      	cmp	r3, #2
 8011088:	d901      	bls.n	801108e <HAL_RCC_OscConfig+0x1a6>
 801108a:	2303      	movs	r3, #3
 801108c:	e2fe      	b.n	801168c <HAL_RCC_OscConfig+0x7a4>
 801108e:	4b27      	ldr	r3, [pc, #156]	@ (801112c <HAL_RCC_OscConfig+0x244>)
 8011090:	681b      	ldr	r3, [r3, #0]
 8011092:	f003 0304 	and.w	r3, r3, #4
 8011096:	2b00      	cmp	r3, #0
 8011098:	d0f0      	beq.n	801107c <HAL_RCC_OscConfig+0x194>
 801109a:	4b24      	ldr	r3, [pc, #144]	@ (801112c <HAL_RCC_OscConfig+0x244>)
 801109c:	685b      	ldr	r3, [r3, #4]
 801109e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80110a2:	687b      	ldr	r3, [r7, #4]
 80110a4:	691b      	ldr	r3, [r3, #16]
 80110a6:	061b      	lsls	r3, r3, #24
 80110a8:	4920      	ldr	r1, [pc, #128]	@ (801112c <HAL_RCC_OscConfig+0x244>)
 80110aa:	4313      	orrs	r3, r2
 80110ac:	604b      	str	r3, [r1, #4]
 80110ae:	e045      	b.n	801113c <HAL_RCC_OscConfig+0x254>
 80110b0:	687b      	ldr	r3, [r7, #4]
 80110b2:	68db      	ldr	r3, [r3, #12]
 80110b4:	2b00      	cmp	r3, #0
 80110b6:	d026      	beq.n	8011106 <HAL_RCC_OscConfig+0x21e>
 80110b8:	4b1c      	ldr	r3, [pc, #112]	@ (801112c <HAL_RCC_OscConfig+0x244>)
 80110ba:	681b      	ldr	r3, [r3, #0]
 80110bc:	f023 0219 	bic.w	r2, r3, #25
 80110c0:	687b      	ldr	r3, [r7, #4]
 80110c2:	68db      	ldr	r3, [r3, #12]
 80110c4:	4919      	ldr	r1, [pc, #100]	@ (801112c <HAL_RCC_OscConfig+0x244>)
 80110c6:	4313      	orrs	r3, r2
 80110c8:	600b      	str	r3, [r1, #0]
 80110ca:	f7f8 f8b7 	bl	800923c <HAL_GetTick>
 80110ce:	6278      	str	r0, [r7, #36]	@ 0x24
 80110d0:	e008      	b.n	80110e4 <HAL_RCC_OscConfig+0x1fc>
 80110d2:	f7f8 f8b3 	bl	800923c <HAL_GetTick>
 80110d6:	4602      	mov	r2, r0
 80110d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80110da:	1ad3      	subs	r3, r2, r3
 80110dc:	2b02      	cmp	r3, #2
 80110de:	d901      	bls.n	80110e4 <HAL_RCC_OscConfig+0x1fc>
 80110e0:	2303      	movs	r3, #3
 80110e2:	e2d3      	b.n	801168c <HAL_RCC_OscConfig+0x7a4>
 80110e4:	4b11      	ldr	r3, [pc, #68]	@ (801112c <HAL_RCC_OscConfig+0x244>)
 80110e6:	681b      	ldr	r3, [r3, #0]
 80110e8:	f003 0304 	and.w	r3, r3, #4
 80110ec:	2b00      	cmp	r3, #0
 80110ee:	d0f0      	beq.n	80110d2 <HAL_RCC_OscConfig+0x1ea>
 80110f0:	4b0e      	ldr	r3, [pc, #56]	@ (801112c <HAL_RCC_OscConfig+0x244>)
 80110f2:	685b      	ldr	r3, [r3, #4]
 80110f4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80110f8:	687b      	ldr	r3, [r7, #4]
 80110fa:	691b      	ldr	r3, [r3, #16]
 80110fc:	061b      	lsls	r3, r3, #24
 80110fe:	490b      	ldr	r1, [pc, #44]	@ (801112c <HAL_RCC_OscConfig+0x244>)
 8011100:	4313      	orrs	r3, r2
 8011102:	604b      	str	r3, [r1, #4]
 8011104:	e01a      	b.n	801113c <HAL_RCC_OscConfig+0x254>
 8011106:	4b09      	ldr	r3, [pc, #36]	@ (801112c <HAL_RCC_OscConfig+0x244>)
 8011108:	681b      	ldr	r3, [r3, #0]
 801110a:	4a08      	ldr	r2, [pc, #32]	@ (801112c <HAL_RCC_OscConfig+0x244>)
 801110c:	f023 0301 	bic.w	r3, r3, #1
 8011110:	6013      	str	r3, [r2, #0]
 8011112:	f7f8 f893 	bl	800923c <HAL_GetTick>
 8011116:	6278      	str	r0, [r7, #36]	@ 0x24
 8011118:	e00a      	b.n	8011130 <HAL_RCC_OscConfig+0x248>
 801111a:	f7f8 f88f 	bl	800923c <HAL_GetTick>
 801111e:	4602      	mov	r2, r0
 8011120:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011122:	1ad3      	subs	r3, r2, r3
 8011124:	2b02      	cmp	r3, #2
 8011126:	d903      	bls.n	8011130 <HAL_RCC_OscConfig+0x248>
 8011128:	2303      	movs	r3, #3
 801112a:	e2af      	b.n	801168c <HAL_RCC_OscConfig+0x7a4>
 801112c:	58024400 	.word	0x58024400
 8011130:	4b96      	ldr	r3, [pc, #600]	@ (801138c <HAL_RCC_OscConfig+0x4a4>)
 8011132:	681b      	ldr	r3, [r3, #0]
 8011134:	f003 0304 	and.w	r3, r3, #4
 8011138:	2b00      	cmp	r3, #0
 801113a:	d1ee      	bne.n	801111a <HAL_RCC_OscConfig+0x232>
 801113c:	687b      	ldr	r3, [r7, #4]
 801113e:	681b      	ldr	r3, [r3, #0]
 8011140:	f003 0310 	and.w	r3, r3, #16
 8011144:	2b00      	cmp	r3, #0
 8011146:	d06a      	beq.n	801121e <HAL_RCC_OscConfig+0x336>
 8011148:	4b90      	ldr	r3, [pc, #576]	@ (801138c <HAL_RCC_OscConfig+0x4a4>)
 801114a:	691b      	ldr	r3, [r3, #16]
 801114c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8011150:	61bb      	str	r3, [r7, #24]
 8011152:	4b8e      	ldr	r3, [pc, #568]	@ (801138c <HAL_RCC_OscConfig+0x4a4>)
 8011154:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011156:	617b      	str	r3, [r7, #20]
 8011158:	69bb      	ldr	r3, [r7, #24]
 801115a:	2b08      	cmp	r3, #8
 801115c:	d007      	beq.n	801116e <HAL_RCC_OscConfig+0x286>
 801115e:	69bb      	ldr	r3, [r7, #24]
 8011160:	2b18      	cmp	r3, #24
 8011162:	d11b      	bne.n	801119c <HAL_RCC_OscConfig+0x2b4>
 8011164:	697b      	ldr	r3, [r7, #20]
 8011166:	f003 0303 	and.w	r3, r3, #3
 801116a:	2b01      	cmp	r3, #1
 801116c:	d116      	bne.n	801119c <HAL_RCC_OscConfig+0x2b4>
 801116e:	4b87      	ldr	r3, [pc, #540]	@ (801138c <HAL_RCC_OscConfig+0x4a4>)
 8011170:	681b      	ldr	r3, [r3, #0]
 8011172:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8011176:	2b00      	cmp	r3, #0
 8011178:	d005      	beq.n	8011186 <HAL_RCC_OscConfig+0x29e>
 801117a:	687b      	ldr	r3, [r7, #4]
 801117c:	69db      	ldr	r3, [r3, #28]
 801117e:	2b80      	cmp	r3, #128	@ 0x80
 8011180:	d001      	beq.n	8011186 <HAL_RCC_OscConfig+0x29e>
 8011182:	2301      	movs	r3, #1
 8011184:	e282      	b.n	801168c <HAL_RCC_OscConfig+0x7a4>
 8011186:	4b81      	ldr	r3, [pc, #516]	@ (801138c <HAL_RCC_OscConfig+0x4a4>)
 8011188:	68db      	ldr	r3, [r3, #12]
 801118a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 801118e:	687b      	ldr	r3, [r7, #4]
 8011190:	6a1b      	ldr	r3, [r3, #32]
 8011192:	061b      	lsls	r3, r3, #24
 8011194:	497d      	ldr	r1, [pc, #500]	@ (801138c <HAL_RCC_OscConfig+0x4a4>)
 8011196:	4313      	orrs	r3, r2
 8011198:	60cb      	str	r3, [r1, #12]
 801119a:	e040      	b.n	801121e <HAL_RCC_OscConfig+0x336>
 801119c:	687b      	ldr	r3, [r7, #4]
 801119e:	69db      	ldr	r3, [r3, #28]
 80111a0:	2b00      	cmp	r3, #0
 80111a2:	d023      	beq.n	80111ec <HAL_RCC_OscConfig+0x304>
 80111a4:	4b79      	ldr	r3, [pc, #484]	@ (801138c <HAL_RCC_OscConfig+0x4a4>)
 80111a6:	681b      	ldr	r3, [r3, #0]
 80111a8:	4a78      	ldr	r2, [pc, #480]	@ (801138c <HAL_RCC_OscConfig+0x4a4>)
 80111aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80111ae:	6013      	str	r3, [r2, #0]
 80111b0:	f7f8 f844 	bl	800923c <HAL_GetTick>
 80111b4:	6278      	str	r0, [r7, #36]	@ 0x24
 80111b6:	e008      	b.n	80111ca <HAL_RCC_OscConfig+0x2e2>
 80111b8:	f7f8 f840 	bl	800923c <HAL_GetTick>
 80111bc:	4602      	mov	r2, r0
 80111be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80111c0:	1ad3      	subs	r3, r2, r3
 80111c2:	2b02      	cmp	r3, #2
 80111c4:	d901      	bls.n	80111ca <HAL_RCC_OscConfig+0x2e2>
 80111c6:	2303      	movs	r3, #3
 80111c8:	e260      	b.n	801168c <HAL_RCC_OscConfig+0x7a4>
 80111ca:	4b70      	ldr	r3, [pc, #448]	@ (801138c <HAL_RCC_OscConfig+0x4a4>)
 80111cc:	681b      	ldr	r3, [r3, #0]
 80111ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80111d2:	2b00      	cmp	r3, #0
 80111d4:	d0f0      	beq.n	80111b8 <HAL_RCC_OscConfig+0x2d0>
 80111d6:	4b6d      	ldr	r3, [pc, #436]	@ (801138c <HAL_RCC_OscConfig+0x4a4>)
 80111d8:	68db      	ldr	r3, [r3, #12]
 80111da:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80111de:	687b      	ldr	r3, [r7, #4]
 80111e0:	6a1b      	ldr	r3, [r3, #32]
 80111e2:	061b      	lsls	r3, r3, #24
 80111e4:	4969      	ldr	r1, [pc, #420]	@ (801138c <HAL_RCC_OscConfig+0x4a4>)
 80111e6:	4313      	orrs	r3, r2
 80111e8:	60cb      	str	r3, [r1, #12]
 80111ea:	e018      	b.n	801121e <HAL_RCC_OscConfig+0x336>
 80111ec:	4b67      	ldr	r3, [pc, #412]	@ (801138c <HAL_RCC_OscConfig+0x4a4>)
 80111ee:	681b      	ldr	r3, [r3, #0]
 80111f0:	4a66      	ldr	r2, [pc, #408]	@ (801138c <HAL_RCC_OscConfig+0x4a4>)
 80111f2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80111f6:	6013      	str	r3, [r2, #0]
 80111f8:	f7f8 f820 	bl	800923c <HAL_GetTick>
 80111fc:	6278      	str	r0, [r7, #36]	@ 0x24
 80111fe:	e008      	b.n	8011212 <HAL_RCC_OscConfig+0x32a>
 8011200:	f7f8 f81c 	bl	800923c <HAL_GetTick>
 8011204:	4602      	mov	r2, r0
 8011206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011208:	1ad3      	subs	r3, r2, r3
 801120a:	2b02      	cmp	r3, #2
 801120c:	d901      	bls.n	8011212 <HAL_RCC_OscConfig+0x32a>
 801120e:	2303      	movs	r3, #3
 8011210:	e23c      	b.n	801168c <HAL_RCC_OscConfig+0x7a4>
 8011212:	4b5e      	ldr	r3, [pc, #376]	@ (801138c <HAL_RCC_OscConfig+0x4a4>)
 8011214:	681b      	ldr	r3, [r3, #0]
 8011216:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801121a:	2b00      	cmp	r3, #0
 801121c:	d1f0      	bne.n	8011200 <HAL_RCC_OscConfig+0x318>
 801121e:	687b      	ldr	r3, [r7, #4]
 8011220:	681b      	ldr	r3, [r3, #0]
 8011222:	f003 0308 	and.w	r3, r3, #8
 8011226:	2b00      	cmp	r3, #0
 8011228:	d036      	beq.n	8011298 <HAL_RCC_OscConfig+0x3b0>
 801122a:	687b      	ldr	r3, [r7, #4]
 801122c:	695b      	ldr	r3, [r3, #20]
 801122e:	2b00      	cmp	r3, #0
 8011230:	d019      	beq.n	8011266 <HAL_RCC_OscConfig+0x37e>
 8011232:	4b56      	ldr	r3, [pc, #344]	@ (801138c <HAL_RCC_OscConfig+0x4a4>)
 8011234:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011236:	4a55      	ldr	r2, [pc, #340]	@ (801138c <HAL_RCC_OscConfig+0x4a4>)
 8011238:	f043 0301 	orr.w	r3, r3, #1
 801123c:	6753      	str	r3, [r2, #116]	@ 0x74
 801123e:	f7f7 fffd 	bl	800923c <HAL_GetTick>
 8011242:	6278      	str	r0, [r7, #36]	@ 0x24
 8011244:	e008      	b.n	8011258 <HAL_RCC_OscConfig+0x370>
 8011246:	f7f7 fff9 	bl	800923c <HAL_GetTick>
 801124a:	4602      	mov	r2, r0
 801124c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801124e:	1ad3      	subs	r3, r2, r3
 8011250:	2b02      	cmp	r3, #2
 8011252:	d901      	bls.n	8011258 <HAL_RCC_OscConfig+0x370>
 8011254:	2303      	movs	r3, #3
 8011256:	e219      	b.n	801168c <HAL_RCC_OscConfig+0x7a4>
 8011258:	4b4c      	ldr	r3, [pc, #304]	@ (801138c <HAL_RCC_OscConfig+0x4a4>)
 801125a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801125c:	f003 0302 	and.w	r3, r3, #2
 8011260:	2b00      	cmp	r3, #0
 8011262:	d0f0      	beq.n	8011246 <HAL_RCC_OscConfig+0x35e>
 8011264:	e018      	b.n	8011298 <HAL_RCC_OscConfig+0x3b0>
 8011266:	4b49      	ldr	r3, [pc, #292]	@ (801138c <HAL_RCC_OscConfig+0x4a4>)
 8011268:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801126a:	4a48      	ldr	r2, [pc, #288]	@ (801138c <HAL_RCC_OscConfig+0x4a4>)
 801126c:	f023 0301 	bic.w	r3, r3, #1
 8011270:	6753      	str	r3, [r2, #116]	@ 0x74
 8011272:	f7f7 ffe3 	bl	800923c <HAL_GetTick>
 8011276:	6278      	str	r0, [r7, #36]	@ 0x24
 8011278:	e008      	b.n	801128c <HAL_RCC_OscConfig+0x3a4>
 801127a:	f7f7 ffdf 	bl	800923c <HAL_GetTick>
 801127e:	4602      	mov	r2, r0
 8011280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011282:	1ad3      	subs	r3, r2, r3
 8011284:	2b02      	cmp	r3, #2
 8011286:	d901      	bls.n	801128c <HAL_RCC_OscConfig+0x3a4>
 8011288:	2303      	movs	r3, #3
 801128a:	e1ff      	b.n	801168c <HAL_RCC_OscConfig+0x7a4>
 801128c:	4b3f      	ldr	r3, [pc, #252]	@ (801138c <HAL_RCC_OscConfig+0x4a4>)
 801128e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011290:	f003 0302 	and.w	r3, r3, #2
 8011294:	2b00      	cmp	r3, #0
 8011296:	d1f0      	bne.n	801127a <HAL_RCC_OscConfig+0x392>
 8011298:	687b      	ldr	r3, [r7, #4]
 801129a:	681b      	ldr	r3, [r3, #0]
 801129c:	f003 0320 	and.w	r3, r3, #32
 80112a0:	2b00      	cmp	r3, #0
 80112a2:	d036      	beq.n	8011312 <HAL_RCC_OscConfig+0x42a>
 80112a4:	687b      	ldr	r3, [r7, #4]
 80112a6:	699b      	ldr	r3, [r3, #24]
 80112a8:	2b00      	cmp	r3, #0
 80112aa:	d019      	beq.n	80112e0 <HAL_RCC_OscConfig+0x3f8>
 80112ac:	4b37      	ldr	r3, [pc, #220]	@ (801138c <HAL_RCC_OscConfig+0x4a4>)
 80112ae:	681b      	ldr	r3, [r3, #0]
 80112b0:	4a36      	ldr	r2, [pc, #216]	@ (801138c <HAL_RCC_OscConfig+0x4a4>)
 80112b2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80112b6:	6013      	str	r3, [r2, #0]
 80112b8:	f7f7 ffc0 	bl	800923c <HAL_GetTick>
 80112bc:	6278      	str	r0, [r7, #36]	@ 0x24
 80112be:	e008      	b.n	80112d2 <HAL_RCC_OscConfig+0x3ea>
 80112c0:	f7f7 ffbc 	bl	800923c <HAL_GetTick>
 80112c4:	4602      	mov	r2, r0
 80112c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80112c8:	1ad3      	subs	r3, r2, r3
 80112ca:	2b02      	cmp	r3, #2
 80112cc:	d901      	bls.n	80112d2 <HAL_RCC_OscConfig+0x3ea>
 80112ce:	2303      	movs	r3, #3
 80112d0:	e1dc      	b.n	801168c <HAL_RCC_OscConfig+0x7a4>
 80112d2:	4b2e      	ldr	r3, [pc, #184]	@ (801138c <HAL_RCC_OscConfig+0x4a4>)
 80112d4:	681b      	ldr	r3, [r3, #0]
 80112d6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80112da:	2b00      	cmp	r3, #0
 80112dc:	d0f0      	beq.n	80112c0 <HAL_RCC_OscConfig+0x3d8>
 80112de:	e018      	b.n	8011312 <HAL_RCC_OscConfig+0x42a>
 80112e0:	4b2a      	ldr	r3, [pc, #168]	@ (801138c <HAL_RCC_OscConfig+0x4a4>)
 80112e2:	681b      	ldr	r3, [r3, #0]
 80112e4:	4a29      	ldr	r2, [pc, #164]	@ (801138c <HAL_RCC_OscConfig+0x4a4>)
 80112e6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80112ea:	6013      	str	r3, [r2, #0]
 80112ec:	f7f7 ffa6 	bl	800923c <HAL_GetTick>
 80112f0:	6278      	str	r0, [r7, #36]	@ 0x24
 80112f2:	e008      	b.n	8011306 <HAL_RCC_OscConfig+0x41e>
 80112f4:	f7f7 ffa2 	bl	800923c <HAL_GetTick>
 80112f8:	4602      	mov	r2, r0
 80112fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80112fc:	1ad3      	subs	r3, r2, r3
 80112fe:	2b02      	cmp	r3, #2
 8011300:	d901      	bls.n	8011306 <HAL_RCC_OscConfig+0x41e>
 8011302:	2303      	movs	r3, #3
 8011304:	e1c2      	b.n	801168c <HAL_RCC_OscConfig+0x7a4>
 8011306:	4b21      	ldr	r3, [pc, #132]	@ (801138c <HAL_RCC_OscConfig+0x4a4>)
 8011308:	681b      	ldr	r3, [r3, #0]
 801130a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801130e:	2b00      	cmp	r3, #0
 8011310:	d1f0      	bne.n	80112f4 <HAL_RCC_OscConfig+0x40c>
 8011312:	687b      	ldr	r3, [r7, #4]
 8011314:	681b      	ldr	r3, [r3, #0]
 8011316:	f003 0304 	and.w	r3, r3, #4
 801131a:	2b00      	cmp	r3, #0
 801131c:	f000 8086 	beq.w	801142c <HAL_RCC_OscConfig+0x544>
 8011320:	4b1b      	ldr	r3, [pc, #108]	@ (8011390 <HAL_RCC_OscConfig+0x4a8>)
 8011322:	681b      	ldr	r3, [r3, #0]
 8011324:	4a1a      	ldr	r2, [pc, #104]	@ (8011390 <HAL_RCC_OscConfig+0x4a8>)
 8011326:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801132a:	6013      	str	r3, [r2, #0]
 801132c:	f7f7 ff86 	bl	800923c <HAL_GetTick>
 8011330:	6278      	str	r0, [r7, #36]	@ 0x24
 8011332:	e008      	b.n	8011346 <HAL_RCC_OscConfig+0x45e>
 8011334:	f7f7 ff82 	bl	800923c <HAL_GetTick>
 8011338:	4602      	mov	r2, r0
 801133a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801133c:	1ad3      	subs	r3, r2, r3
 801133e:	2b64      	cmp	r3, #100	@ 0x64
 8011340:	d901      	bls.n	8011346 <HAL_RCC_OscConfig+0x45e>
 8011342:	2303      	movs	r3, #3
 8011344:	e1a2      	b.n	801168c <HAL_RCC_OscConfig+0x7a4>
 8011346:	4b12      	ldr	r3, [pc, #72]	@ (8011390 <HAL_RCC_OscConfig+0x4a8>)
 8011348:	681b      	ldr	r3, [r3, #0]
 801134a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801134e:	2b00      	cmp	r3, #0
 8011350:	d0f0      	beq.n	8011334 <HAL_RCC_OscConfig+0x44c>
 8011352:	687b      	ldr	r3, [r7, #4]
 8011354:	689b      	ldr	r3, [r3, #8]
 8011356:	2b01      	cmp	r3, #1
 8011358:	d106      	bne.n	8011368 <HAL_RCC_OscConfig+0x480>
 801135a:	4b0c      	ldr	r3, [pc, #48]	@ (801138c <HAL_RCC_OscConfig+0x4a4>)
 801135c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801135e:	4a0b      	ldr	r2, [pc, #44]	@ (801138c <HAL_RCC_OscConfig+0x4a4>)
 8011360:	f043 0301 	orr.w	r3, r3, #1
 8011364:	6713      	str	r3, [r2, #112]	@ 0x70
 8011366:	e032      	b.n	80113ce <HAL_RCC_OscConfig+0x4e6>
 8011368:	687b      	ldr	r3, [r7, #4]
 801136a:	689b      	ldr	r3, [r3, #8]
 801136c:	2b00      	cmp	r3, #0
 801136e:	d111      	bne.n	8011394 <HAL_RCC_OscConfig+0x4ac>
 8011370:	4b06      	ldr	r3, [pc, #24]	@ (801138c <HAL_RCC_OscConfig+0x4a4>)
 8011372:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011374:	4a05      	ldr	r2, [pc, #20]	@ (801138c <HAL_RCC_OscConfig+0x4a4>)
 8011376:	f023 0301 	bic.w	r3, r3, #1
 801137a:	6713      	str	r3, [r2, #112]	@ 0x70
 801137c:	4b03      	ldr	r3, [pc, #12]	@ (801138c <HAL_RCC_OscConfig+0x4a4>)
 801137e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011380:	4a02      	ldr	r2, [pc, #8]	@ (801138c <HAL_RCC_OscConfig+0x4a4>)
 8011382:	f023 0304 	bic.w	r3, r3, #4
 8011386:	6713      	str	r3, [r2, #112]	@ 0x70
 8011388:	e021      	b.n	80113ce <HAL_RCC_OscConfig+0x4e6>
 801138a:	bf00      	nop
 801138c:	58024400 	.word	0x58024400
 8011390:	58024800 	.word	0x58024800
 8011394:	687b      	ldr	r3, [r7, #4]
 8011396:	689b      	ldr	r3, [r3, #8]
 8011398:	2b05      	cmp	r3, #5
 801139a:	d10c      	bne.n	80113b6 <HAL_RCC_OscConfig+0x4ce>
 801139c:	4b83      	ldr	r3, [pc, #524]	@ (80115ac <HAL_RCC_OscConfig+0x6c4>)
 801139e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80113a0:	4a82      	ldr	r2, [pc, #520]	@ (80115ac <HAL_RCC_OscConfig+0x6c4>)
 80113a2:	f043 0304 	orr.w	r3, r3, #4
 80113a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80113a8:	4b80      	ldr	r3, [pc, #512]	@ (80115ac <HAL_RCC_OscConfig+0x6c4>)
 80113aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80113ac:	4a7f      	ldr	r2, [pc, #508]	@ (80115ac <HAL_RCC_OscConfig+0x6c4>)
 80113ae:	f043 0301 	orr.w	r3, r3, #1
 80113b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80113b4:	e00b      	b.n	80113ce <HAL_RCC_OscConfig+0x4e6>
 80113b6:	4b7d      	ldr	r3, [pc, #500]	@ (80115ac <HAL_RCC_OscConfig+0x6c4>)
 80113b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80113ba:	4a7c      	ldr	r2, [pc, #496]	@ (80115ac <HAL_RCC_OscConfig+0x6c4>)
 80113bc:	f023 0301 	bic.w	r3, r3, #1
 80113c0:	6713      	str	r3, [r2, #112]	@ 0x70
 80113c2:	4b7a      	ldr	r3, [pc, #488]	@ (80115ac <HAL_RCC_OscConfig+0x6c4>)
 80113c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80113c6:	4a79      	ldr	r2, [pc, #484]	@ (80115ac <HAL_RCC_OscConfig+0x6c4>)
 80113c8:	f023 0304 	bic.w	r3, r3, #4
 80113cc:	6713      	str	r3, [r2, #112]	@ 0x70
 80113ce:	687b      	ldr	r3, [r7, #4]
 80113d0:	689b      	ldr	r3, [r3, #8]
 80113d2:	2b00      	cmp	r3, #0
 80113d4:	d015      	beq.n	8011402 <HAL_RCC_OscConfig+0x51a>
 80113d6:	f7f7 ff31 	bl	800923c <HAL_GetTick>
 80113da:	6278      	str	r0, [r7, #36]	@ 0x24
 80113dc:	e00a      	b.n	80113f4 <HAL_RCC_OscConfig+0x50c>
 80113de:	f7f7 ff2d 	bl	800923c <HAL_GetTick>
 80113e2:	4602      	mov	r2, r0
 80113e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80113e6:	1ad3      	subs	r3, r2, r3
 80113e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80113ec:	4293      	cmp	r3, r2
 80113ee:	d901      	bls.n	80113f4 <HAL_RCC_OscConfig+0x50c>
 80113f0:	2303      	movs	r3, #3
 80113f2:	e14b      	b.n	801168c <HAL_RCC_OscConfig+0x7a4>
 80113f4:	4b6d      	ldr	r3, [pc, #436]	@ (80115ac <HAL_RCC_OscConfig+0x6c4>)
 80113f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80113f8:	f003 0302 	and.w	r3, r3, #2
 80113fc:	2b00      	cmp	r3, #0
 80113fe:	d0ee      	beq.n	80113de <HAL_RCC_OscConfig+0x4f6>
 8011400:	e014      	b.n	801142c <HAL_RCC_OscConfig+0x544>
 8011402:	f7f7 ff1b 	bl	800923c <HAL_GetTick>
 8011406:	6278      	str	r0, [r7, #36]	@ 0x24
 8011408:	e00a      	b.n	8011420 <HAL_RCC_OscConfig+0x538>
 801140a:	f7f7 ff17 	bl	800923c <HAL_GetTick>
 801140e:	4602      	mov	r2, r0
 8011410:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011412:	1ad3      	subs	r3, r2, r3
 8011414:	f241 3288 	movw	r2, #5000	@ 0x1388
 8011418:	4293      	cmp	r3, r2
 801141a:	d901      	bls.n	8011420 <HAL_RCC_OscConfig+0x538>
 801141c:	2303      	movs	r3, #3
 801141e:	e135      	b.n	801168c <HAL_RCC_OscConfig+0x7a4>
 8011420:	4b62      	ldr	r3, [pc, #392]	@ (80115ac <HAL_RCC_OscConfig+0x6c4>)
 8011422:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011424:	f003 0302 	and.w	r3, r3, #2
 8011428:	2b00      	cmp	r3, #0
 801142a:	d1ee      	bne.n	801140a <HAL_RCC_OscConfig+0x522>
 801142c:	687b      	ldr	r3, [r7, #4]
 801142e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011430:	2b00      	cmp	r3, #0
 8011432:	f000 812a 	beq.w	801168a <HAL_RCC_OscConfig+0x7a2>
 8011436:	4b5d      	ldr	r3, [pc, #372]	@ (80115ac <HAL_RCC_OscConfig+0x6c4>)
 8011438:	691b      	ldr	r3, [r3, #16]
 801143a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801143e:	2b18      	cmp	r3, #24
 8011440:	f000 80ba 	beq.w	80115b8 <HAL_RCC_OscConfig+0x6d0>
 8011444:	687b      	ldr	r3, [r7, #4]
 8011446:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011448:	2b02      	cmp	r3, #2
 801144a:	f040 8095 	bne.w	8011578 <HAL_RCC_OscConfig+0x690>
 801144e:	4b57      	ldr	r3, [pc, #348]	@ (80115ac <HAL_RCC_OscConfig+0x6c4>)
 8011450:	681b      	ldr	r3, [r3, #0]
 8011452:	4a56      	ldr	r2, [pc, #344]	@ (80115ac <HAL_RCC_OscConfig+0x6c4>)
 8011454:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8011458:	6013      	str	r3, [r2, #0]
 801145a:	f7f7 feef 	bl	800923c <HAL_GetTick>
 801145e:	6278      	str	r0, [r7, #36]	@ 0x24
 8011460:	e008      	b.n	8011474 <HAL_RCC_OscConfig+0x58c>
 8011462:	f7f7 feeb 	bl	800923c <HAL_GetTick>
 8011466:	4602      	mov	r2, r0
 8011468:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801146a:	1ad3      	subs	r3, r2, r3
 801146c:	2b02      	cmp	r3, #2
 801146e:	d901      	bls.n	8011474 <HAL_RCC_OscConfig+0x58c>
 8011470:	2303      	movs	r3, #3
 8011472:	e10b      	b.n	801168c <HAL_RCC_OscConfig+0x7a4>
 8011474:	4b4d      	ldr	r3, [pc, #308]	@ (80115ac <HAL_RCC_OscConfig+0x6c4>)
 8011476:	681b      	ldr	r3, [r3, #0]
 8011478:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801147c:	2b00      	cmp	r3, #0
 801147e:	d1f0      	bne.n	8011462 <HAL_RCC_OscConfig+0x57a>
 8011480:	4b4a      	ldr	r3, [pc, #296]	@ (80115ac <HAL_RCC_OscConfig+0x6c4>)
 8011482:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8011484:	4b4a      	ldr	r3, [pc, #296]	@ (80115b0 <HAL_RCC_OscConfig+0x6c8>)
 8011486:	4013      	ands	r3, r2
 8011488:	687a      	ldr	r2, [r7, #4]
 801148a:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 801148c:	687a      	ldr	r2, [r7, #4]
 801148e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8011490:	0112      	lsls	r2, r2, #4
 8011492:	430a      	orrs	r2, r1
 8011494:	4945      	ldr	r1, [pc, #276]	@ (80115ac <HAL_RCC_OscConfig+0x6c4>)
 8011496:	4313      	orrs	r3, r2
 8011498:	628b      	str	r3, [r1, #40]	@ 0x28
 801149a:	687b      	ldr	r3, [r7, #4]
 801149c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801149e:	3b01      	subs	r3, #1
 80114a0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80114a4:	687b      	ldr	r3, [r7, #4]
 80114a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80114a8:	3b01      	subs	r3, #1
 80114aa:	025b      	lsls	r3, r3, #9
 80114ac:	b29b      	uxth	r3, r3
 80114ae:	431a      	orrs	r2, r3
 80114b0:	687b      	ldr	r3, [r7, #4]
 80114b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80114b4:	3b01      	subs	r3, #1
 80114b6:	041b      	lsls	r3, r3, #16
 80114b8:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80114bc:	431a      	orrs	r2, r3
 80114be:	687b      	ldr	r3, [r7, #4]
 80114c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80114c2:	3b01      	subs	r3, #1
 80114c4:	061b      	lsls	r3, r3, #24
 80114c6:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80114ca:	4938      	ldr	r1, [pc, #224]	@ (80115ac <HAL_RCC_OscConfig+0x6c4>)
 80114cc:	4313      	orrs	r3, r2
 80114ce:	630b      	str	r3, [r1, #48]	@ 0x30
 80114d0:	4b36      	ldr	r3, [pc, #216]	@ (80115ac <HAL_RCC_OscConfig+0x6c4>)
 80114d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80114d4:	4a35      	ldr	r2, [pc, #212]	@ (80115ac <HAL_RCC_OscConfig+0x6c4>)
 80114d6:	f023 0301 	bic.w	r3, r3, #1
 80114da:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80114dc:	4b33      	ldr	r3, [pc, #204]	@ (80115ac <HAL_RCC_OscConfig+0x6c4>)
 80114de:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80114e0:	4b34      	ldr	r3, [pc, #208]	@ (80115b4 <HAL_RCC_OscConfig+0x6cc>)
 80114e2:	4013      	ands	r3, r2
 80114e4:	687a      	ldr	r2, [r7, #4]
 80114e6:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80114e8:	00d2      	lsls	r2, r2, #3
 80114ea:	4930      	ldr	r1, [pc, #192]	@ (80115ac <HAL_RCC_OscConfig+0x6c4>)
 80114ec:	4313      	orrs	r3, r2
 80114ee:	634b      	str	r3, [r1, #52]	@ 0x34
 80114f0:	4b2e      	ldr	r3, [pc, #184]	@ (80115ac <HAL_RCC_OscConfig+0x6c4>)
 80114f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80114f4:	f023 020c 	bic.w	r2, r3, #12
 80114f8:	687b      	ldr	r3, [r7, #4]
 80114fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80114fc:	492b      	ldr	r1, [pc, #172]	@ (80115ac <HAL_RCC_OscConfig+0x6c4>)
 80114fe:	4313      	orrs	r3, r2
 8011500:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8011502:	4b2a      	ldr	r3, [pc, #168]	@ (80115ac <HAL_RCC_OscConfig+0x6c4>)
 8011504:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011506:	f023 0202 	bic.w	r2, r3, #2
 801150a:	687b      	ldr	r3, [r7, #4]
 801150c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801150e:	4927      	ldr	r1, [pc, #156]	@ (80115ac <HAL_RCC_OscConfig+0x6c4>)
 8011510:	4313      	orrs	r3, r2
 8011512:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8011514:	4b25      	ldr	r3, [pc, #148]	@ (80115ac <HAL_RCC_OscConfig+0x6c4>)
 8011516:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011518:	4a24      	ldr	r2, [pc, #144]	@ (80115ac <HAL_RCC_OscConfig+0x6c4>)
 801151a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801151e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8011520:	4b22      	ldr	r3, [pc, #136]	@ (80115ac <HAL_RCC_OscConfig+0x6c4>)
 8011522:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011524:	4a21      	ldr	r2, [pc, #132]	@ (80115ac <HAL_RCC_OscConfig+0x6c4>)
 8011526:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801152a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 801152c:	4b1f      	ldr	r3, [pc, #124]	@ (80115ac <HAL_RCC_OscConfig+0x6c4>)
 801152e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011530:	4a1e      	ldr	r2, [pc, #120]	@ (80115ac <HAL_RCC_OscConfig+0x6c4>)
 8011532:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8011536:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8011538:	4b1c      	ldr	r3, [pc, #112]	@ (80115ac <HAL_RCC_OscConfig+0x6c4>)
 801153a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801153c:	4a1b      	ldr	r2, [pc, #108]	@ (80115ac <HAL_RCC_OscConfig+0x6c4>)
 801153e:	f043 0301 	orr.w	r3, r3, #1
 8011542:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8011544:	4b19      	ldr	r3, [pc, #100]	@ (80115ac <HAL_RCC_OscConfig+0x6c4>)
 8011546:	681b      	ldr	r3, [r3, #0]
 8011548:	4a18      	ldr	r2, [pc, #96]	@ (80115ac <HAL_RCC_OscConfig+0x6c4>)
 801154a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 801154e:	6013      	str	r3, [r2, #0]
 8011550:	f7f7 fe74 	bl	800923c <HAL_GetTick>
 8011554:	6278      	str	r0, [r7, #36]	@ 0x24
 8011556:	e008      	b.n	801156a <HAL_RCC_OscConfig+0x682>
 8011558:	f7f7 fe70 	bl	800923c <HAL_GetTick>
 801155c:	4602      	mov	r2, r0
 801155e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011560:	1ad3      	subs	r3, r2, r3
 8011562:	2b02      	cmp	r3, #2
 8011564:	d901      	bls.n	801156a <HAL_RCC_OscConfig+0x682>
 8011566:	2303      	movs	r3, #3
 8011568:	e090      	b.n	801168c <HAL_RCC_OscConfig+0x7a4>
 801156a:	4b10      	ldr	r3, [pc, #64]	@ (80115ac <HAL_RCC_OscConfig+0x6c4>)
 801156c:	681b      	ldr	r3, [r3, #0]
 801156e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8011572:	2b00      	cmp	r3, #0
 8011574:	d0f0      	beq.n	8011558 <HAL_RCC_OscConfig+0x670>
 8011576:	e088      	b.n	801168a <HAL_RCC_OscConfig+0x7a2>
 8011578:	4b0c      	ldr	r3, [pc, #48]	@ (80115ac <HAL_RCC_OscConfig+0x6c4>)
 801157a:	681b      	ldr	r3, [r3, #0]
 801157c:	4a0b      	ldr	r2, [pc, #44]	@ (80115ac <HAL_RCC_OscConfig+0x6c4>)
 801157e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8011582:	6013      	str	r3, [r2, #0]
 8011584:	f7f7 fe5a 	bl	800923c <HAL_GetTick>
 8011588:	6278      	str	r0, [r7, #36]	@ 0x24
 801158a:	e008      	b.n	801159e <HAL_RCC_OscConfig+0x6b6>
 801158c:	f7f7 fe56 	bl	800923c <HAL_GetTick>
 8011590:	4602      	mov	r2, r0
 8011592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011594:	1ad3      	subs	r3, r2, r3
 8011596:	2b02      	cmp	r3, #2
 8011598:	d901      	bls.n	801159e <HAL_RCC_OscConfig+0x6b6>
 801159a:	2303      	movs	r3, #3
 801159c:	e076      	b.n	801168c <HAL_RCC_OscConfig+0x7a4>
 801159e:	4b03      	ldr	r3, [pc, #12]	@ (80115ac <HAL_RCC_OscConfig+0x6c4>)
 80115a0:	681b      	ldr	r3, [r3, #0]
 80115a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80115a6:	2b00      	cmp	r3, #0
 80115a8:	d1f0      	bne.n	801158c <HAL_RCC_OscConfig+0x6a4>
 80115aa:	e06e      	b.n	801168a <HAL_RCC_OscConfig+0x7a2>
 80115ac:	58024400 	.word	0x58024400
 80115b0:	fffffc0c 	.word	0xfffffc0c
 80115b4:	ffff0007 	.word	0xffff0007
 80115b8:	4b36      	ldr	r3, [pc, #216]	@ (8011694 <HAL_RCC_OscConfig+0x7ac>)
 80115ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80115bc:	613b      	str	r3, [r7, #16]
 80115be:	4b35      	ldr	r3, [pc, #212]	@ (8011694 <HAL_RCC_OscConfig+0x7ac>)
 80115c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80115c2:	60fb      	str	r3, [r7, #12]
 80115c4:	687b      	ldr	r3, [r7, #4]
 80115c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80115c8:	2b01      	cmp	r3, #1
 80115ca:	d031      	beq.n	8011630 <HAL_RCC_OscConfig+0x748>
 80115cc:	693b      	ldr	r3, [r7, #16]
 80115ce:	f003 0203 	and.w	r2, r3, #3
 80115d2:	687b      	ldr	r3, [r7, #4]
 80115d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80115d6:	429a      	cmp	r2, r3
 80115d8:	d12a      	bne.n	8011630 <HAL_RCC_OscConfig+0x748>
 80115da:	693b      	ldr	r3, [r7, #16]
 80115dc:	091b      	lsrs	r3, r3, #4
 80115de:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80115e2:	687b      	ldr	r3, [r7, #4]
 80115e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80115e6:	429a      	cmp	r2, r3
 80115e8:	d122      	bne.n	8011630 <HAL_RCC_OscConfig+0x748>
 80115ea:	68fb      	ldr	r3, [r7, #12]
 80115ec:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80115f0:	687b      	ldr	r3, [r7, #4]
 80115f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80115f4:	3b01      	subs	r3, #1
 80115f6:	429a      	cmp	r2, r3
 80115f8:	d11a      	bne.n	8011630 <HAL_RCC_OscConfig+0x748>
 80115fa:	68fb      	ldr	r3, [r7, #12]
 80115fc:	0a5b      	lsrs	r3, r3, #9
 80115fe:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8011602:	687b      	ldr	r3, [r7, #4]
 8011604:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011606:	3b01      	subs	r3, #1
 8011608:	429a      	cmp	r2, r3
 801160a:	d111      	bne.n	8011630 <HAL_RCC_OscConfig+0x748>
 801160c:	68fb      	ldr	r3, [r7, #12]
 801160e:	0c1b      	lsrs	r3, r3, #16
 8011610:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8011614:	687b      	ldr	r3, [r7, #4]
 8011616:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011618:	3b01      	subs	r3, #1
 801161a:	429a      	cmp	r2, r3
 801161c:	d108      	bne.n	8011630 <HAL_RCC_OscConfig+0x748>
 801161e:	68fb      	ldr	r3, [r7, #12]
 8011620:	0e1b      	lsrs	r3, r3, #24
 8011622:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8011626:	687b      	ldr	r3, [r7, #4]
 8011628:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801162a:	3b01      	subs	r3, #1
 801162c:	429a      	cmp	r2, r3
 801162e:	d001      	beq.n	8011634 <HAL_RCC_OscConfig+0x74c>
 8011630:	2301      	movs	r3, #1
 8011632:	e02b      	b.n	801168c <HAL_RCC_OscConfig+0x7a4>
 8011634:	4b17      	ldr	r3, [pc, #92]	@ (8011694 <HAL_RCC_OscConfig+0x7ac>)
 8011636:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011638:	08db      	lsrs	r3, r3, #3
 801163a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801163e:	613b      	str	r3, [r7, #16]
 8011640:	687b      	ldr	r3, [r7, #4]
 8011642:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8011644:	693a      	ldr	r2, [r7, #16]
 8011646:	429a      	cmp	r2, r3
 8011648:	d01f      	beq.n	801168a <HAL_RCC_OscConfig+0x7a2>
 801164a:	4b12      	ldr	r3, [pc, #72]	@ (8011694 <HAL_RCC_OscConfig+0x7ac>)
 801164c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801164e:	4a11      	ldr	r2, [pc, #68]	@ (8011694 <HAL_RCC_OscConfig+0x7ac>)
 8011650:	f023 0301 	bic.w	r3, r3, #1
 8011654:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8011656:	f7f7 fdf1 	bl	800923c <HAL_GetTick>
 801165a:	6278      	str	r0, [r7, #36]	@ 0x24
 801165c:	bf00      	nop
 801165e:	f7f7 fded 	bl	800923c <HAL_GetTick>
 8011662:	4602      	mov	r2, r0
 8011664:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011666:	4293      	cmp	r3, r2
 8011668:	d0f9      	beq.n	801165e <HAL_RCC_OscConfig+0x776>
 801166a:	4b0a      	ldr	r3, [pc, #40]	@ (8011694 <HAL_RCC_OscConfig+0x7ac>)
 801166c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801166e:	4b0a      	ldr	r3, [pc, #40]	@ (8011698 <HAL_RCC_OscConfig+0x7b0>)
 8011670:	4013      	ands	r3, r2
 8011672:	687a      	ldr	r2, [r7, #4]
 8011674:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8011676:	00d2      	lsls	r2, r2, #3
 8011678:	4906      	ldr	r1, [pc, #24]	@ (8011694 <HAL_RCC_OscConfig+0x7ac>)
 801167a:	4313      	orrs	r3, r2
 801167c:	634b      	str	r3, [r1, #52]	@ 0x34
 801167e:	4b05      	ldr	r3, [pc, #20]	@ (8011694 <HAL_RCC_OscConfig+0x7ac>)
 8011680:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011682:	4a04      	ldr	r2, [pc, #16]	@ (8011694 <HAL_RCC_OscConfig+0x7ac>)
 8011684:	f043 0301 	orr.w	r3, r3, #1
 8011688:	62d3      	str	r3, [r2, #44]	@ 0x2c
 801168a:	2300      	movs	r3, #0
 801168c:	4618      	mov	r0, r3
 801168e:	3730      	adds	r7, #48	@ 0x30
 8011690:	46bd      	mov	sp, r7
 8011692:	bd80      	pop	{r7, pc}
 8011694:	58024400 	.word	0x58024400
 8011698:	ffff0007 	.word	0xffff0007

0801169c <HAL_RCC_ClockConfig>:
 801169c:	b580      	push	{r7, lr}
 801169e:	b086      	sub	sp, #24
 80116a0:	af00      	add	r7, sp, #0
 80116a2:	6078      	str	r0, [r7, #4]
 80116a4:	6039      	str	r1, [r7, #0]
 80116a6:	687b      	ldr	r3, [r7, #4]
 80116a8:	2b00      	cmp	r3, #0
 80116aa:	d101      	bne.n	80116b0 <HAL_RCC_ClockConfig+0x14>
 80116ac:	2301      	movs	r3, #1
 80116ae:	e19c      	b.n	80119ea <HAL_RCC_ClockConfig+0x34e>
 80116b0:	4b8a      	ldr	r3, [pc, #552]	@ (80118dc <HAL_RCC_ClockConfig+0x240>)
 80116b2:	681b      	ldr	r3, [r3, #0]
 80116b4:	f003 030f 	and.w	r3, r3, #15
 80116b8:	683a      	ldr	r2, [r7, #0]
 80116ba:	429a      	cmp	r2, r3
 80116bc:	d910      	bls.n	80116e0 <HAL_RCC_ClockConfig+0x44>
 80116be:	4b87      	ldr	r3, [pc, #540]	@ (80118dc <HAL_RCC_ClockConfig+0x240>)
 80116c0:	681b      	ldr	r3, [r3, #0]
 80116c2:	f023 020f 	bic.w	r2, r3, #15
 80116c6:	4985      	ldr	r1, [pc, #532]	@ (80118dc <HAL_RCC_ClockConfig+0x240>)
 80116c8:	683b      	ldr	r3, [r7, #0]
 80116ca:	4313      	orrs	r3, r2
 80116cc:	600b      	str	r3, [r1, #0]
 80116ce:	4b83      	ldr	r3, [pc, #524]	@ (80118dc <HAL_RCC_ClockConfig+0x240>)
 80116d0:	681b      	ldr	r3, [r3, #0]
 80116d2:	f003 030f 	and.w	r3, r3, #15
 80116d6:	683a      	ldr	r2, [r7, #0]
 80116d8:	429a      	cmp	r2, r3
 80116da:	d001      	beq.n	80116e0 <HAL_RCC_ClockConfig+0x44>
 80116dc:	2301      	movs	r3, #1
 80116de:	e184      	b.n	80119ea <HAL_RCC_ClockConfig+0x34e>
 80116e0:	687b      	ldr	r3, [r7, #4]
 80116e2:	681b      	ldr	r3, [r3, #0]
 80116e4:	f003 0304 	and.w	r3, r3, #4
 80116e8:	2b00      	cmp	r3, #0
 80116ea:	d010      	beq.n	801170e <HAL_RCC_ClockConfig+0x72>
 80116ec:	687b      	ldr	r3, [r7, #4]
 80116ee:	691a      	ldr	r2, [r3, #16]
 80116f0:	4b7b      	ldr	r3, [pc, #492]	@ (80118e0 <HAL_RCC_ClockConfig+0x244>)
 80116f2:	699b      	ldr	r3, [r3, #24]
 80116f4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80116f8:	429a      	cmp	r2, r3
 80116fa:	d908      	bls.n	801170e <HAL_RCC_ClockConfig+0x72>
 80116fc:	4b78      	ldr	r3, [pc, #480]	@ (80118e0 <HAL_RCC_ClockConfig+0x244>)
 80116fe:	699b      	ldr	r3, [r3, #24]
 8011700:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8011704:	687b      	ldr	r3, [r7, #4]
 8011706:	691b      	ldr	r3, [r3, #16]
 8011708:	4975      	ldr	r1, [pc, #468]	@ (80118e0 <HAL_RCC_ClockConfig+0x244>)
 801170a:	4313      	orrs	r3, r2
 801170c:	618b      	str	r3, [r1, #24]
 801170e:	687b      	ldr	r3, [r7, #4]
 8011710:	681b      	ldr	r3, [r3, #0]
 8011712:	f003 0308 	and.w	r3, r3, #8
 8011716:	2b00      	cmp	r3, #0
 8011718:	d010      	beq.n	801173c <HAL_RCC_ClockConfig+0xa0>
 801171a:	687b      	ldr	r3, [r7, #4]
 801171c:	695a      	ldr	r2, [r3, #20]
 801171e:	4b70      	ldr	r3, [pc, #448]	@ (80118e0 <HAL_RCC_ClockConfig+0x244>)
 8011720:	69db      	ldr	r3, [r3, #28]
 8011722:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8011726:	429a      	cmp	r2, r3
 8011728:	d908      	bls.n	801173c <HAL_RCC_ClockConfig+0xa0>
 801172a:	4b6d      	ldr	r3, [pc, #436]	@ (80118e0 <HAL_RCC_ClockConfig+0x244>)
 801172c:	69db      	ldr	r3, [r3, #28]
 801172e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8011732:	687b      	ldr	r3, [r7, #4]
 8011734:	695b      	ldr	r3, [r3, #20]
 8011736:	496a      	ldr	r1, [pc, #424]	@ (80118e0 <HAL_RCC_ClockConfig+0x244>)
 8011738:	4313      	orrs	r3, r2
 801173a:	61cb      	str	r3, [r1, #28]
 801173c:	687b      	ldr	r3, [r7, #4]
 801173e:	681b      	ldr	r3, [r3, #0]
 8011740:	f003 0310 	and.w	r3, r3, #16
 8011744:	2b00      	cmp	r3, #0
 8011746:	d010      	beq.n	801176a <HAL_RCC_ClockConfig+0xce>
 8011748:	687b      	ldr	r3, [r7, #4]
 801174a:	699a      	ldr	r2, [r3, #24]
 801174c:	4b64      	ldr	r3, [pc, #400]	@ (80118e0 <HAL_RCC_ClockConfig+0x244>)
 801174e:	69db      	ldr	r3, [r3, #28]
 8011750:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8011754:	429a      	cmp	r2, r3
 8011756:	d908      	bls.n	801176a <HAL_RCC_ClockConfig+0xce>
 8011758:	4b61      	ldr	r3, [pc, #388]	@ (80118e0 <HAL_RCC_ClockConfig+0x244>)
 801175a:	69db      	ldr	r3, [r3, #28]
 801175c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8011760:	687b      	ldr	r3, [r7, #4]
 8011762:	699b      	ldr	r3, [r3, #24]
 8011764:	495e      	ldr	r1, [pc, #376]	@ (80118e0 <HAL_RCC_ClockConfig+0x244>)
 8011766:	4313      	orrs	r3, r2
 8011768:	61cb      	str	r3, [r1, #28]
 801176a:	687b      	ldr	r3, [r7, #4]
 801176c:	681b      	ldr	r3, [r3, #0]
 801176e:	f003 0320 	and.w	r3, r3, #32
 8011772:	2b00      	cmp	r3, #0
 8011774:	d010      	beq.n	8011798 <HAL_RCC_ClockConfig+0xfc>
 8011776:	687b      	ldr	r3, [r7, #4]
 8011778:	69da      	ldr	r2, [r3, #28]
 801177a:	4b59      	ldr	r3, [pc, #356]	@ (80118e0 <HAL_RCC_ClockConfig+0x244>)
 801177c:	6a1b      	ldr	r3, [r3, #32]
 801177e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8011782:	429a      	cmp	r2, r3
 8011784:	d908      	bls.n	8011798 <HAL_RCC_ClockConfig+0xfc>
 8011786:	4b56      	ldr	r3, [pc, #344]	@ (80118e0 <HAL_RCC_ClockConfig+0x244>)
 8011788:	6a1b      	ldr	r3, [r3, #32]
 801178a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 801178e:	687b      	ldr	r3, [r7, #4]
 8011790:	69db      	ldr	r3, [r3, #28]
 8011792:	4953      	ldr	r1, [pc, #332]	@ (80118e0 <HAL_RCC_ClockConfig+0x244>)
 8011794:	4313      	orrs	r3, r2
 8011796:	620b      	str	r3, [r1, #32]
 8011798:	687b      	ldr	r3, [r7, #4]
 801179a:	681b      	ldr	r3, [r3, #0]
 801179c:	f003 0302 	and.w	r3, r3, #2
 80117a0:	2b00      	cmp	r3, #0
 80117a2:	d010      	beq.n	80117c6 <HAL_RCC_ClockConfig+0x12a>
 80117a4:	687b      	ldr	r3, [r7, #4]
 80117a6:	68da      	ldr	r2, [r3, #12]
 80117a8:	4b4d      	ldr	r3, [pc, #308]	@ (80118e0 <HAL_RCC_ClockConfig+0x244>)
 80117aa:	699b      	ldr	r3, [r3, #24]
 80117ac:	f003 030f 	and.w	r3, r3, #15
 80117b0:	429a      	cmp	r2, r3
 80117b2:	d908      	bls.n	80117c6 <HAL_RCC_ClockConfig+0x12a>
 80117b4:	4b4a      	ldr	r3, [pc, #296]	@ (80118e0 <HAL_RCC_ClockConfig+0x244>)
 80117b6:	699b      	ldr	r3, [r3, #24]
 80117b8:	f023 020f 	bic.w	r2, r3, #15
 80117bc:	687b      	ldr	r3, [r7, #4]
 80117be:	68db      	ldr	r3, [r3, #12]
 80117c0:	4947      	ldr	r1, [pc, #284]	@ (80118e0 <HAL_RCC_ClockConfig+0x244>)
 80117c2:	4313      	orrs	r3, r2
 80117c4:	618b      	str	r3, [r1, #24]
 80117c6:	687b      	ldr	r3, [r7, #4]
 80117c8:	681b      	ldr	r3, [r3, #0]
 80117ca:	f003 0301 	and.w	r3, r3, #1
 80117ce:	2b00      	cmp	r3, #0
 80117d0:	d055      	beq.n	801187e <HAL_RCC_ClockConfig+0x1e2>
 80117d2:	4b43      	ldr	r3, [pc, #268]	@ (80118e0 <HAL_RCC_ClockConfig+0x244>)
 80117d4:	699b      	ldr	r3, [r3, #24]
 80117d6:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80117da:	687b      	ldr	r3, [r7, #4]
 80117dc:	689b      	ldr	r3, [r3, #8]
 80117de:	4940      	ldr	r1, [pc, #256]	@ (80118e0 <HAL_RCC_ClockConfig+0x244>)
 80117e0:	4313      	orrs	r3, r2
 80117e2:	618b      	str	r3, [r1, #24]
 80117e4:	687b      	ldr	r3, [r7, #4]
 80117e6:	685b      	ldr	r3, [r3, #4]
 80117e8:	2b02      	cmp	r3, #2
 80117ea:	d107      	bne.n	80117fc <HAL_RCC_ClockConfig+0x160>
 80117ec:	4b3c      	ldr	r3, [pc, #240]	@ (80118e0 <HAL_RCC_ClockConfig+0x244>)
 80117ee:	681b      	ldr	r3, [r3, #0]
 80117f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80117f4:	2b00      	cmp	r3, #0
 80117f6:	d121      	bne.n	801183c <HAL_RCC_ClockConfig+0x1a0>
 80117f8:	2301      	movs	r3, #1
 80117fa:	e0f6      	b.n	80119ea <HAL_RCC_ClockConfig+0x34e>
 80117fc:	687b      	ldr	r3, [r7, #4]
 80117fe:	685b      	ldr	r3, [r3, #4]
 8011800:	2b03      	cmp	r3, #3
 8011802:	d107      	bne.n	8011814 <HAL_RCC_ClockConfig+0x178>
 8011804:	4b36      	ldr	r3, [pc, #216]	@ (80118e0 <HAL_RCC_ClockConfig+0x244>)
 8011806:	681b      	ldr	r3, [r3, #0]
 8011808:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801180c:	2b00      	cmp	r3, #0
 801180e:	d115      	bne.n	801183c <HAL_RCC_ClockConfig+0x1a0>
 8011810:	2301      	movs	r3, #1
 8011812:	e0ea      	b.n	80119ea <HAL_RCC_ClockConfig+0x34e>
 8011814:	687b      	ldr	r3, [r7, #4]
 8011816:	685b      	ldr	r3, [r3, #4]
 8011818:	2b01      	cmp	r3, #1
 801181a:	d107      	bne.n	801182c <HAL_RCC_ClockConfig+0x190>
 801181c:	4b30      	ldr	r3, [pc, #192]	@ (80118e0 <HAL_RCC_ClockConfig+0x244>)
 801181e:	681b      	ldr	r3, [r3, #0]
 8011820:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8011824:	2b00      	cmp	r3, #0
 8011826:	d109      	bne.n	801183c <HAL_RCC_ClockConfig+0x1a0>
 8011828:	2301      	movs	r3, #1
 801182a:	e0de      	b.n	80119ea <HAL_RCC_ClockConfig+0x34e>
 801182c:	4b2c      	ldr	r3, [pc, #176]	@ (80118e0 <HAL_RCC_ClockConfig+0x244>)
 801182e:	681b      	ldr	r3, [r3, #0]
 8011830:	f003 0304 	and.w	r3, r3, #4
 8011834:	2b00      	cmp	r3, #0
 8011836:	d101      	bne.n	801183c <HAL_RCC_ClockConfig+0x1a0>
 8011838:	2301      	movs	r3, #1
 801183a:	e0d6      	b.n	80119ea <HAL_RCC_ClockConfig+0x34e>
 801183c:	4b28      	ldr	r3, [pc, #160]	@ (80118e0 <HAL_RCC_ClockConfig+0x244>)
 801183e:	691b      	ldr	r3, [r3, #16]
 8011840:	f023 0207 	bic.w	r2, r3, #7
 8011844:	687b      	ldr	r3, [r7, #4]
 8011846:	685b      	ldr	r3, [r3, #4]
 8011848:	4925      	ldr	r1, [pc, #148]	@ (80118e0 <HAL_RCC_ClockConfig+0x244>)
 801184a:	4313      	orrs	r3, r2
 801184c:	610b      	str	r3, [r1, #16]
 801184e:	f7f7 fcf5 	bl	800923c <HAL_GetTick>
 8011852:	6178      	str	r0, [r7, #20]
 8011854:	e00a      	b.n	801186c <HAL_RCC_ClockConfig+0x1d0>
 8011856:	f7f7 fcf1 	bl	800923c <HAL_GetTick>
 801185a:	4602      	mov	r2, r0
 801185c:	697b      	ldr	r3, [r7, #20]
 801185e:	1ad3      	subs	r3, r2, r3
 8011860:	f241 3288 	movw	r2, #5000	@ 0x1388
 8011864:	4293      	cmp	r3, r2
 8011866:	d901      	bls.n	801186c <HAL_RCC_ClockConfig+0x1d0>
 8011868:	2303      	movs	r3, #3
 801186a:	e0be      	b.n	80119ea <HAL_RCC_ClockConfig+0x34e>
 801186c:	4b1c      	ldr	r3, [pc, #112]	@ (80118e0 <HAL_RCC_ClockConfig+0x244>)
 801186e:	691b      	ldr	r3, [r3, #16]
 8011870:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8011874:	687b      	ldr	r3, [r7, #4]
 8011876:	685b      	ldr	r3, [r3, #4]
 8011878:	00db      	lsls	r3, r3, #3
 801187a:	429a      	cmp	r2, r3
 801187c:	d1eb      	bne.n	8011856 <HAL_RCC_ClockConfig+0x1ba>
 801187e:	687b      	ldr	r3, [r7, #4]
 8011880:	681b      	ldr	r3, [r3, #0]
 8011882:	f003 0302 	and.w	r3, r3, #2
 8011886:	2b00      	cmp	r3, #0
 8011888:	d010      	beq.n	80118ac <HAL_RCC_ClockConfig+0x210>
 801188a:	687b      	ldr	r3, [r7, #4]
 801188c:	68da      	ldr	r2, [r3, #12]
 801188e:	4b14      	ldr	r3, [pc, #80]	@ (80118e0 <HAL_RCC_ClockConfig+0x244>)
 8011890:	699b      	ldr	r3, [r3, #24]
 8011892:	f003 030f 	and.w	r3, r3, #15
 8011896:	429a      	cmp	r2, r3
 8011898:	d208      	bcs.n	80118ac <HAL_RCC_ClockConfig+0x210>
 801189a:	4b11      	ldr	r3, [pc, #68]	@ (80118e0 <HAL_RCC_ClockConfig+0x244>)
 801189c:	699b      	ldr	r3, [r3, #24]
 801189e:	f023 020f 	bic.w	r2, r3, #15
 80118a2:	687b      	ldr	r3, [r7, #4]
 80118a4:	68db      	ldr	r3, [r3, #12]
 80118a6:	490e      	ldr	r1, [pc, #56]	@ (80118e0 <HAL_RCC_ClockConfig+0x244>)
 80118a8:	4313      	orrs	r3, r2
 80118aa:	618b      	str	r3, [r1, #24]
 80118ac:	4b0b      	ldr	r3, [pc, #44]	@ (80118dc <HAL_RCC_ClockConfig+0x240>)
 80118ae:	681b      	ldr	r3, [r3, #0]
 80118b0:	f003 030f 	and.w	r3, r3, #15
 80118b4:	683a      	ldr	r2, [r7, #0]
 80118b6:	429a      	cmp	r2, r3
 80118b8:	d214      	bcs.n	80118e4 <HAL_RCC_ClockConfig+0x248>
 80118ba:	4b08      	ldr	r3, [pc, #32]	@ (80118dc <HAL_RCC_ClockConfig+0x240>)
 80118bc:	681b      	ldr	r3, [r3, #0]
 80118be:	f023 020f 	bic.w	r2, r3, #15
 80118c2:	4906      	ldr	r1, [pc, #24]	@ (80118dc <HAL_RCC_ClockConfig+0x240>)
 80118c4:	683b      	ldr	r3, [r7, #0]
 80118c6:	4313      	orrs	r3, r2
 80118c8:	600b      	str	r3, [r1, #0]
 80118ca:	4b04      	ldr	r3, [pc, #16]	@ (80118dc <HAL_RCC_ClockConfig+0x240>)
 80118cc:	681b      	ldr	r3, [r3, #0]
 80118ce:	f003 030f 	and.w	r3, r3, #15
 80118d2:	683a      	ldr	r2, [r7, #0]
 80118d4:	429a      	cmp	r2, r3
 80118d6:	d005      	beq.n	80118e4 <HAL_RCC_ClockConfig+0x248>
 80118d8:	2301      	movs	r3, #1
 80118da:	e086      	b.n	80119ea <HAL_RCC_ClockConfig+0x34e>
 80118dc:	52002000 	.word	0x52002000
 80118e0:	58024400 	.word	0x58024400
 80118e4:	687b      	ldr	r3, [r7, #4]
 80118e6:	681b      	ldr	r3, [r3, #0]
 80118e8:	f003 0304 	and.w	r3, r3, #4
 80118ec:	2b00      	cmp	r3, #0
 80118ee:	d010      	beq.n	8011912 <HAL_RCC_ClockConfig+0x276>
 80118f0:	687b      	ldr	r3, [r7, #4]
 80118f2:	691a      	ldr	r2, [r3, #16]
 80118f4:	4b3f      	ldr	r3, [pc, #252]	@ (80119f4 <HAL_RCC_ClockConfig+0x358>)
 80118f6:	699b      	ldr	r3, [r3, #24]
 80118f8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80118fc:	429a      	cmp	r2, r3
 80118fe:	d208      	bcs.n	8011912 <HAL_RCC_ClockConfig+0x276>
 8011900:	4b3c      	ldr	r3, [pc, #240]	@ (80119f4 <HAL_RCC_ClockConfig+0x358>)
 8011902:	699b      	ldr	r3, [r3, #24]
 8011904:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8011908:	687b      	ldr	r3, [r7, #4]
 801190a:	691b      	ldr	r3, [r3, #16]
 801190c:	4939      	ldr	r1, [pc, #228]	@ (80119f4 <HAL_RCC_ClockConfig+0x358>)
 801190e:	4313      	orrs	r3, r2
 8011910:	618b      	str	r3, [r1, #24]
 8011912:	687b      	ldr	r3, [r7, #4]
 8011914:	681b      	ldr	r3, [r3, #0]
 8011916:	f003 0308 	and.w	r3, r3, #8
 801191a:	2b00      	cmp	r3, #0
 801191c:	d010      	beq.n	8011940 <HAL_RCC_ClockConfig+0x2a4>
 801191e:	687b      	ldr	r3, [r7, #4]
 8011920:	695a      	ldr	r2, [r3, #20]
 8011922:	4b34      	ldr	r3, [pc, #208]	@ (80119f4 <HAL_RCC_ClockConfig+0x358>)
 8011924:	69db      	ldr	r3, [r3, #28]
 8011926:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 801192a:	429a      	cmp	r2, r3
 801192c:	d208      	bcs.n	8011940 <HAL_RCC_ClockConfig+0x2a4>
 801192e:	4b31      	ldr	r3, [pc, #196]	@ (80119f4 <HAL_RCC_ClockConfig+0x358>)
 8011930:	69db      	ldr	r3, [r3, #28]
 8011932:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8011936:	687b      	ldr	r3, [r7, #4]
 8011938:	695b      	ldr	r3, [r3, #20]
 801193a:	492e      	ldr	r1, [pc, #184]	@ (80119f4 <HAL_RCC_ClockConfig+0x358>)
 801193c:	4313      	orrs	r3, r2
 801193e:	61cb      	str	r3, [r1, #28]
 8011940:	687b      	ldr	r3, [r7, #4]
 8011942:	681b      	ldr	r3, [r3, #0]
 8011944:	f003 0310 	and.w	r3, r3, #16
 8011948:	2b00      	cmp	r3, #0
 801194a:	d010      	beq.n	801196e <HAL_RCC_ClockConfig+0x2d2>
 801194c:	687b      	ldr	r3, [r7, #4]
 801194e:	699a      	ldr	r2, [r3, #24]
 8011950:	4b28      	ldr	r3, [pc, #160]	@ (80119f4 <HAL_RCC_ClockConfig+0x358>)
 8011952:	69db      	ldr	r3, [r3, #28]
 8011954:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8011958:	429a      	cmp	r2, r3
 801195a:	d208      	bcs.n	801196e <HAL_RCC_ClockConfig+0x2d2>
 801195c:	4b25      	ldr	r3, [pc, #148]	@ (80119f4 <HAL_RCC_ClockConfig+0x358>)
 801195e:	69db      	ldr	r3, [r3, #28]
 8011960:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8011964:	687b      	ldr	r3, [r7, #4]
 8011966:	699b      	ldr	r3, [r3, #24]
 8011968:	4922      	ldr	r1, [pc, #136]	@ (80119f4 <HAL_RCC_ClockConfig+0x358>)
 801196a:	4313      	orrs	r3, r2
 801196c:	61cb      	str	r3, [r1, #28]
 801196e:	687b      	ldr	r3, [r7, #4]
 8011970:	681b      	ldr	r3, [r3, #0]
 8011972:	f003 0320 	and.w	r3, r3, #32
 8011976:	2b00      	cmp	r3, #0
 8011978:	d010      	beq.n	801199c <HAL_RCC_ClockConfig+0x300>
 801197a:	687b      	ldr	r3, [r7, #4]
 801197c:	69da      	ldr	r2, [r3, #28]
 801197e:	4b1d      	ldr	r3, [pc, #116]	@ (80119f4 <HAL_RCC_ClockConfig+0x358>)
 8011980:	6a1b      	ldr	r3, [r3, #32]
 8011982:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8011986:	429a      	cmp	r2, r3
 8011988:	d208      	bcs.n	801199c <HAL_RCC_ClockConfig+0x300>
 801198a:	4b1a      	ldr	r3, [pc, #104]	@ (80119f4 <HAL_RCC_ClockConfig+0x358>)
 801198c:	6a1b      	ldr	r3, [r3, #32]
 801198e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8011992:	687b      	ldr	r3, [r7, #4]
 8011994:	69db      	ldr	r3, [r3, #28]
 8011996:	4917      	ldr	r1, [pc, #92]	@ (80119f4 <HAL_RCC_ClockConfig+0x358>)
 8011998:	4313      	orrs	r3, r2
 801199a:	620b      	str	r3, [r1, #32]
 801199c:	f000 f834 	bl	8011a08 <HAL_RCC_GetSysClockFreq>
 80119a0:	4602      	mov	r2, r0
 80119a2:	4b14      	ldr	r3, [pc, #80]	@ (80119f4 <HAL_RCC_ClockConfig+0x358>)
 80119a4:	699b      	ldr	r3, [r3, #24]
 80119a6:	0a1b      	lsrs	r3, r3, #8
 80119a8:	f003 030f 	and.w	r3, r3, #15
 80119ac:	4912      	ldr	r1, [pc, #72]	@ (80119f8 <HAL_RCC_ClockConfig+0x35c>)
 80119ae:	5ccb      	ldrb	r3, [r1, r3]
 80119b0:	f003 031f 	and.w	r3, r3, #31
 80119b4:	fa22 f303 	lsr.w	r3, r2, r3
 80119b8:	613b      	str	r3, [r7, #16]
 80119ba:	4b0e      	ldr	r3, [pc, #56]	@ (80119f4 <HAL_RCC_ClockConfig+0x358>)
 80119bc:	699b      	ldr	r3, [r3, #24]
 80119be:	f003 030f 	and.w	r3, r3, #15
 80119c2:	4a0d      	ldr	r2, [pc, #52]	@ (80119f8 <HAL_RCC_ClockConfig+0x35c>)
 80119c4:	5cd3      	ldrb	r3, [r2, r3]
 80119c6:	f003 031f 	and.w	r3, r3, #31
 80119ca:	693a      	ldr	r2, [r7, #16]
 80119cc:	fa22 f303 	lsr.w	r3, r2, r3
 80119d0:	4a0a      	ldr	r2, [pc, #40]	@ (80119fc <HAL_RCC_ClockConfig+0x360>)
 80119d2:	6013      	str	r3, [r2, #0]
 80119d4:	4a0a      	ldr	r2, [pc, #40]	@ (8011a00 <HAL_RCC_ClockConfig+0x364>)
 80119d6:	693b      	ldr	r3, [r7, #16]
 80119d8:	6013      	str	r3, [r2, #0]
 80119da:	4b0a      	ldr	r3, [pc, #40]	@ (8011a04 <HAL_RCC_ClockConfig+0x368>)
 80119dc:	681b      	ldr	r3, [r3, #0]
 80119de:	4618      	mov	r0, r3
 80119e0:	f7f7 fbe2 	bl	80091a8 <HAL_InitTick>
 80119e4:	4603      	mov	r3, r0
 80119e6:	73fb      	strb	r3, [r7, #15]
 80119e8:	7bfb      	ldrb	r3, [r7, #15]
 80119ea:	4618      	mov	r0, r3
 80119ec:	3718      	adds	r7, #24
 80119ee:	46bd      	mov	sp, r7
 80119f0:	bd80      	pop	{r7, pc}
 80119f2:	bf00      	nop
 80119f4:	58024400 	.word	0x58024400
 80119f8:	0801e8cc 	.word	0x0801e8cc
 80119fc:	24000008 	.word	0x24000008
 8011a00:	24000004 	.word	0x24000004
 8011a04:	2400000c 	.word	0x2400000c

08011a08 <HAL_RCC_GetSysClockFreq>:
 8011a08:	b480      	push	{r7}
 8011a0a:	b089      	sub	sp, #36	@ 0x24
 8011a0c:	af00      	add	r7, sp, #0
 8011a0e:	4bb3      	ldr	r3, [pc, #716]	@ (8011cdc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011a10:	691b      	ldr	r3, [r3, #16]
 8011a12:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8011a16:	2b18      	cmp	r3, #24
 8011a18:	f200 8155 	bhi.w	8011cc6 <HAL_RCC_GetSysClockFreq+0x2be>
 8011a1c:	a201      	add	r2, pc, #4	@ (adr r2, 8011a24 <HAL_RCC_GetSysClockFreq+0x1c>)
 8011a1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011a22:	bf00      	nop
 8011a24:	08011a89 	.word	0x08011a89
 8011a28:	08011cc7 	.word	0x08011cc7
 8011a2c:	08011cc7 	.word	0x08011cc7
 8011a30:	08011cc7 	.word	0x08011cc7
 8011a34:	08011cc7 	.word	0x08011cc7
 8011a38:	08011cc7 	.word	0x08011cc7
 8011a3c:	08011cc7 	.word	0x08011cc7
 8011a40:	08011cc7 	.word	0x08011cc7
 8011a44:	08011aaf 	.word	0x08011aaf
 8011a48:	08011cc7 	.word	0x08011cc7
 8011a4c:	08011cc7 	.word	0x08011cc7
 8011a50:	08011cc7 	.word	0x08011cc7
 8011a54:	08011cc7 	.word	0x08011cc7
 8011a58:	08011cc7 	.word	0x08011cc7
 8011a5c:	08011cc7 	.word	0x08011cc7
 8011a60:	08011cc7 	.word	0x08011cc7
 8011a64:	08011ab5 	.word	0x08011ab5
 8011a68:	08011cc7 	.word	0x08011cc7
 8011a6c:	08011cc7 	.word	0x08011cc7
 8011a70:	08011cc7 	.word	0x08011cc7
 8011a74:	08011cc7 	.word	0x08011cc7
 8011a78:	08011cc7 	.word	0x08011cc7
 8011a7c:	08011cc7 	.word	0x08011cc7
 8011a80:	08011cc7 	.word	0x08011cc7
 8011a84:	08011abb 	.word	0x08011abb
 8011a88:	4b94      	ldr	r3, [pc, #592]	@ (8011cdc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011a8a:	681b      	ldr	r3, [r3, #0]
 8011a8c:	f003 0320 	and.w	r3, r3, #32
 8011a90:	2b00      	cmp	r3, #0
 8011a92:	d009      	beq.n	8011aa8 <HAL_RCC_GetSysClockFreq+0xa0>
 8011a94:	4b91      	ldr	r3, [pc, #580]	@ (8011cdc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011a96:	681b      	ldr	r3, [r3, #0]
 8011a98:	08db      	lsrs	r3, r3, #3
 8011a9a:	f003 0303 	and.w	r3, r3, #3
 8011a9e:	4a90      	ldr	r2, [pc, #576]	@ (8011ce0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8011aa0:	fa22 f303 	lsr.w	r3, r2, r3
 8011aa4:	61bb      	str	r3, [r7, #24]
 8011aa6:	e111      	b.n	8011ccc <HAL_RCC_GetSysClockFreq+0x2c4>
 8011aa8:	4b8d      	ldr	r3, [pc, #564]	@ (8011ce0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8011aaa:	61bb      	str	r3, [r7, #24]
 8011aac:	e10e      	b.n	8011ccc <HAL_RCC_GetSysClockFreq+0x2c4>
 8011aae:	4b8d      	ldr	r3, [pc, #564]	@ (8011ce4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8011ab0:	61bb      	str	r3, [r7, #24]
 8011ab2:	e10b      	b.n	8011ccc <HAL_RCC_GetSysClockFreq+0x2c4>
 8011ab4:	4b8c      	ldr	r3, [pc, #560]	@ (8011ce8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8011ab6:	61bb      	str	r3, [r7, #24]
 8011ab8:	e108      	b.n	8011ccc <HAL_RCC_GetSysClockFreq+0x2c4>
 8011aba:	4b88      	ldr	r3, [pc, #544]	@ (8011cdc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011abc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011abe:	f003 0303 	and.w	r3, r3, #3
 8011ac2:	617b      	str	r3, [r7, #20]
 8011ac4:	4b85      	ldr	r3, [pc, #532]	@ (8011cdc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011ac6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011ac8:	091b      	lsrs	r3, r3, #4
 8011aca:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8011ace:	613b      	str	r3, [r7, #16]
 8011ad0:	4b82      	ldr	r3, [pc, #520]	@ (8011cdc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011ad2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011ad4:	f003 0301 	and.w	r3, r3, #1
 8011ad8:	60fb      	str	r3, [r7, #12]
 8011ada:	4b80      	ldr	r3, [pc, #512]	@ (8011cdc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011adc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011ade:	08db      	lsrs	r3, r3, #3
 8011ae0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011ae4:	68fa      	ldr	r2, [r7, #12]
 8011ae6:	fb02 f303 	mul.w	r3, r2, r3
 8011aea:	ee07 3a90 	vmov	s15, r3
 8011aee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011af2:	edc7 7a02 	vstr	s15, [r7, #8]
 8011af6:	693b      	ldr	r3, [r7, #16]
 8011af8:	2b00      	cmp	r3, #0
 8011afa:	f000 80e1 	beq.w	8011cc0 <HAL_RCC_GetSysClockFreq+0x2b8>
 8011afe:	697b      	ldr	r3, [r7, #20]
 8011b00:	2b02      	cmp	r3, #2
 8011b02:	f000 8083 	beq.w	8011c0c <HAL_RCC_GetSysClockFreq+0x204>
 8011b06:	697b      	ldr	r3, [r7, #20]
 8011b08:	2b02      	cmp	r3, #2
 8011b0a:	f200 80a1 	bhi.w	8011c50 <HAL_RCC_GetSysClockFreq+0x248>
 8011b0e:	697b      	ldr	r3, [r7, #20]
 8011b10:	2b00      	cmp	r3, #0
 8011b12:	d003      	beq.n	8011b1c <HAL_RCC_GetSysClockFreq+0x114>
 8011b14:	697b      	ldr	r3, [r7, #20]
 8011b16:	2b01      	cmp	r3, #1
 8011b18:	d056      	beq.n	8011bc8 <HAL_RCC_GetSysClockFreq+0x1c0>
 8011b1a:	e099      	b.n	8011c50 <HAL_RCC_GetSysClockFreq+0x248>
 8011b1c:	4b6f      	ldr	r3, [pc, #444]	@ (8011cdc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011b1e:	681b      	ldr	r3, [r3, #0]
 8011b20:	f003 0320 	and.w	r3, r3, #32
 8011b24:	2b00      	cmp	r3, #0
 8011b26:	d02d      	beq.n	8011b84 <HAL_RCC_GetSysClockFreq+0x17c>
 8011b28:	4b6c      	ldr	r3, [pc, #432]	@ (8011cdc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011b2a:	681b      	ldr	r3, [r3, #0]
 8011b2c:	08db      	lsrs	r3, r3, #3
 8011b2e:	f003 0303 	and.w	r3, r3, #3
 8011b32:	4a6b      	ldr	r2, [pc, #428]	@ (8011ce0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8011b34:	fa22 f303 	lsr.w	r3, r2, r3
 8011b38:	607b      	str	r3, [r7, #4]
 8011b3a:	687b      	ldr	r3, [r7, #4]
 8011b3c:	ee07 3a90 	vmov	s15, r3
 8011b40:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011b44:	693b      	ldr	r3, [r7, #16]
 8011b46:	ee07 3a90 	vmov	s15, r3
 8011b4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011b4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011b52:	4b62      	ldr	r3, [pc, #392]	@ (8011cdc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011b54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011b56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011b5a:	ee07 3a90 	vmov	s15, r3
 8011b5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011b62:	ed97 6a02 	vldr	s12, [r7, #8]
 8011b66:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8011cec <HAL_RCC_GetSysClockFreq+0x2e4>
 8011b6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011b6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011b72:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8011b76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011b7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011b7e:	edc7 7a07 	vstr	s15, [r7, #28]
 8011b82:	e087      	b.n	8011c94 <HAL_RCC_GetSysClockFreq+0x28c>
 8011b84:	693b      	ldr	r3, [r7, #16]
 8011b86:	ee07 3a90 	vmov	s15, r3
 8011b8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011b8e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8011cf0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8011b92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011b96:	4b51      	ldr	r3, [pc, #324]	@ (8011cdc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011b98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011b9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011b9e:	ee07 3a90 	vmov	s15, r3
 8011ba2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011ba6:	ed97 6a02 	vldr	s12, [r7, #8]
 8011baa:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8011cec <HAL_RCC_GetSysClockFreq+0x2e4>
 8011bae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011bb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011bb6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8011bba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011bbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011bc2:	edc7 7a07 	vstr	s15, [r7, #28]
 8011bc6:	e065      	b.n	8011c94 <HAL_RCC_GetSysClockFreq+0x28c>
 8011bc8:	693b      	ldr	r3, [r7, #16]
 8011bca:	ee07 3a90 	vmov	s15, r3
 8011bce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011bd2:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8011cf4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8011bd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011bda:	4b40      	ldr	r3, [pc, #256]	@ (8011cdc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011bdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011bde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011be2:	ee07 3a90 	vmov	s15, r3
 8011be6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011bea:	ed97 6a02 	vldr	s12, [r7, #8]
 8011bee:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8011cec <HAL_RCC_GetSysClockFreq+0x2e4>
 8011bf2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011bf6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011bfa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8011bfe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011c02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011c06:	edc7 7a07 	vstr	s15, [r7, #28]
 8011c0a:	e043      	b.n	8011c94 <HAL_RCC_GetSysClockFreq+0x28c>
 8011c0c:	693b      	ldr	r3, [r7, #16]
 8011c0e:	ee07 3a90 	vmov	s15, r3
 8011c12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011c16:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8011cf8 <HAL_RCC_GetSysClockFreq+0x2f0>
 8011c1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011c1e:	4b2f      	ldr	r3, [pc, #188]	@ (8011cdc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011c20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011c22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011c26:	ee07 3a90 	vmov	s15, r3
 8011c2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011c2e:	ed97 6a02 	vldr	s12, [r7, #8]
 8011c32:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8011cec <HAL_RCC_GetSysClockFreq+0x2e4>
 8011c36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011c3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011c3e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8011c42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011c46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011c4a:	edc7 7a07 	vstr	s15, [r7, #28]
 8011c4e:	e021      	b.n	8011c94 <HAL_RCC_GetSysClockFreq+0x28c>
 8011c50:	693b      	ldr	r3, [r7, #16]
 8011c52:	ee07 3a90 	vmov	s15, r3
 8011c56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011c5a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8011cf4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8011c5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011c62:	4b1e      	ldr	r3, [pc, #120]	@ (8011cdc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011c64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011c66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011c6a:	ee07 3a90 	vmov	s15, r3
 8011c6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011c72:	ed97 6a02 	vldr	s12, [r7, #8]
 8011c76:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8011cec <HAL_RCC_GetSysClockFreq+0x2e4>
 8011c7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011c7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011c82:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8011c86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011c8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011c8e:	edc7 7a07 	vstr	s15, [r7, #28]
 8011c92:	bf00      	nop
 8011c94:	4b11      	ldr	r3, [pc, #68]	@ (8011cdc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011c96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011c98:	0a5b      	lsrs	r3, r3, #9
 8011c9a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011c9e:	3301      	adds	r3, #1
 8011ca0:	603b      	str	r3, [r7, #0]
 8011ca2:	683b      	ldr	r3, [r7, #0]
 8011ca4:	ee07 3a90 	vmov	s15, r3
 8011ca8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8011cac:	edd7 6a07 	vldr	s13, [r7, #28]
 8011cb0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011cb4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011cb8:	ee17 3a90 	vmov	r3, s15
 8011cbc:	61bb      	str	r3, [r7, #24]
 8011cbe:	e005      	b.n	8011ccc <HAL_RCC_GetSysClockFreq+0x2c4>
 8011cc0:	2300      	movs	r3, #0
 8011cc2:	61bb      	str	r3, [r7, #24]
 8011cc4:	e002      	b.n	8011ccc <HAL_RCC_GetSysClockFreq+0x2c4>
 8011cc6:	4b07      	ldr	r3, [pc, #28]	@ (8011ce4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8011cc8:	61bb      	str	r3, [r7, #24]
 8011cca:	bf00      	nop
 8011ccc:	69bb      	ldr	r3, [r7, #24]
 8011cce:	4618      	mov	r0, r3
 8011cd0:	3724      	adds	r7, #36	@ 0x24
 8011cd2:	46bd      	mov	sp, r7
 8011cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cd8:	4770      	bx	lr
 8011cda:	bf00      	nop
 8011cdc:	58024400 	.word	0x58024400
 8011ce0:	03d09000 	.word	0x03d09000
 8011ce4:	003d0900 	.word	0x003d0900
 8011ce8:	016e3600 	.word	0x016e3600
 8011cec:	46000000 	.word	0x46000000
 8011cf0:	4c742400 	.word	0x4c742400
 8011cf4:	4a742400 	.word	0x4a742400
 8011cf8:	4bb71b00 	.word	0x4bb71b00

08011cfc <HAL_RCC_GetHCLKFreq>:
 8011cfc:	b580      	push	{r7, lr}
 8011cfe:	b082      	sub	sp, #8
 8011d00:	af00      	add	r7, sp, #0
 8011d02:	f7ff fe81 	bl	8011a08 <HAL_RCC_GetSysClockFreq>
 8011d06:	4602      	mov	r2, r0
 8011d08:	4b10      	ldr	r3, [pc, #64]	@ (8011d4c <HAL_RCC_GetHCLKFreq+0x50>)
 8011d0a:	699b      	ldr	r3, [r3, #24]
 8011d0c:	0a1b      	lsrs	r3, r3, #8
 8011d0e:	f003 030f 	and.w	r3, r3, #15
 8011d12:	490f      	ldr	r1, [pc, #60]	@ (8011d50 <HAL_RCC_GetHCLKFreq+0x54>)
 8011d14:	5ccb      	ldrb	r3, [r1, r3]
 8011d16:	f003 031f 	and.w	r3, r3, #31
 8011d1a:	fa22 f303 	lsr.w	r3, r2, r3
 8011d1e:	607b      	str	r3, [r7, #4]
 8011d20:	4b0a      	ldr	r3, [pc, #40]	@ (8011d4c <HAL_RCC_GetHCLKFreq+0x50>)
 8011d22:	699b      	ldr	r3, [r3, #24]
 8011d24:	f003 030f 	and.w	r3, r3, #15
 8011d28:	4a09      	ldr	r2, [pc, #36]	@ (8011d50 <HAL_RCC_GetHCLKFreq+0x54>)
 8011d2a:	5cd3      	ldrb	r3, [r2, r3]
 8011d2c:	f003 031f 	and.w	r3, r3, #31
 8011d30:	687a      	ldr	r2, [r7, #4]
 8011d32:	fa22 f303 	lsr.w	r3, r2, r3
 8011d36:	4a07      	ldr	r2, [pc, #28]	@ (8011d54 <HAL_RCC_GetHCLKFreq+0x58>)
 8011d38:	6013      	str	r3, [r2, #0]
 8011d3a:	4a07      	ldr	r2, [pc, #28]	@ (8011d58 <HAL_RCC_GetHCLKFreq+0x5c>)
 8011d3c:	687b      	ldr	r3, [r7, #4]
 8011d3e:	6013      	str	r3, [r2, #0]
 8011d40:	4b04      	ldr	r3, [pc, #16]	@ (8011d54 <HAL_RCC_GetHCLKFreq+0x58>)
 8011d42:	681b      	ldr	r3, [r3, #0]
 8011d44:	4618      	mov	r0, r3
 8011d46:	3708      	adds	r7, #8
 8011d48:	46bd      	mov	sp, r7
 8011d4a:	bd80      	pop	{r7, pc}
 8011d4c:	58024400 	.word	0x58024400
 8011d50:	0801e8cc 	.word	0x0801e8cc
 8011d54:	24000008 	.word	0x24000008
 8011d58:	24000004 	.word	0x24000004

08011d5c <HAL_RCC_GetPCLK1Freq>:
 8011d5c:	b580      	push	{r7, lr}
 8011d5e:	af00      	add	r7, sp, #0
 8011d60:	f7ff ffcc 	bl	8011cfc <HAL_RCC_GetHCLKFreq>
 8011d64:	4602      	mov	r2, r0
 8011d66:	4b06      	ldr	r3, [pc, #24]	@ (8011d80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8011d68:	69db      	ldr	r3, [r3, #28]
 8011d6a:	091b      	lsrs	r3, r3, #4
 8011d6c:	f003 0307 	and.w	r3, r3, #7
 8011d70:	4904      	ldr	r1, [pc, #16]	@ (8011d84 <HAL_RCC_GetPCLK1Freq+0x28>)
 8011d72:	5ccb      	ldrb	r3, [r1, r3]
 8011d74:	f003 031f 	and.w	r3, r3, #31
 8011d78:	fa22 f303 	lsr.w	r3, r2, r3
 8011d7c:	4618      	mov	r0, r3
 8011d7e:	bd80      	pop	{r7, pc}
 8011d80:	58024400 	.word	0x58024400
 8011d84:	0801e8cc 	.word	0x0801e8cc

08011d88 <HAL_RCC_GetPCLK2Freq>:
 8011d88:	b580      	push	{r7, lr}
 8011d8a:	af00      	add	r7, sp, #0
 8011d8c:	f7ff ffb6 	bl	8011cfc <HAL_RCC_GetHCLKFreq>
 8011d90:	4602      	mov	r2, r0
 8011d92:	4b06      	ldr	r3, [pc, #24]	@ (8011dac <HAL_RCC_GetPCLK2Freq+0x24>)
 8011d94:	69db      	ldr	r3, [r3, #28]
 8011d96:	0a1b      	lsrs	r3, r3, #8
 8011d98:	f003 0307 	and.w	r3, r3, #7
 8011d9c:	4904      	ldr	r1, [pc, #16]	@ (8011db0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8011d9e:	5ccb      	ldrb	r3, [r1, r3]
 8011da0:	f003 031f 	and.w	r3, r3, #31
 8011da4:	fa22 f303 	lsr.w	r3, r2, r3
 8011da8:	4618      	mov	r0, r3
 8011daa:	bd80      	pop	{r7, pc}
 8011dac:	58024400 	.word	0x58024400
 8011db0:	0801e8cc 	.word	0x0801e8cc

08011db4 <HAL_RCCEx_PeriphCLKConfig>:
 8011db4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8011db8:	b0c6      	sub	sp, #280	@ 0x118
 8011dba:	af00      	add	r7, sp, #0
 8011dbc:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
 8011dc0:	2300      	movs	r3, #0
 8011dc2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 8011dc6:	2300      	movs	r3, #0
 8011dc8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8011dcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011dd4:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8011dd8:	2500      	movs	r5, #0
 8011dda:	ea54 0305 	orrs.w	r3, r4, r5
 8011dde:	d049      	beq.n	8011e74 <HAL_RCCEx_PeriphCLKConfig+0xc0>
 8011de0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011de4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011de6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8011dea:	d02f      	beq.n	8011e4c <HAL_RCCEx_PeriphCLKConfig+0x98>
 8011dec:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8011df0:	d828      	bhi.n	8011e44 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8011df2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8011df6:	d01a      	beq.n	8011e2e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8011df8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8011dfc:	d822      	bhi.n	8011e44 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8011dfe:	2b00      	cmp	r3, #0
 8011e00:	d003      	beq.n	8011e0a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8011e02:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8011e06:	d007      	beq.n	8011e18 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8011e08:	e01c      	b.n	8011e44 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8011e0a:	4bab      	ldr	r3, [pc, #684]	@ (80120b8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8011e0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011e0e:	4aaa      	ldr	r2, [pc, #680]	@ (80120b8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8011e10:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8011e14:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8011e16:	e01a      	b.n	8011e4e <HAL_RCCEx_PeriphCLKConfig+0x9a>
 8011e18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011e1c:	3308      	adds	r3, #8
 8011e1e:	2102      	movs	r1, #2
 8011e20:	4618      	mov	r0, r3
 8011e22:	f002 fa49 	bl	80142b8 <RCCEx_PLL2_Config>
 8011e26:	4603      	mov	r3, r0
 8011e28:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 8011e2c:	e00f      	b.n	8011e4e <HAL_RCCEx_PeriphCLKConfig+0x9a>
 8011e2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011e32:	3328      	adds	r3, #40	@ 0x28
 8011e34:	2102      	movs	r1, #2
 8011e36:	4618      	mov	r0, r3
 8011e38:	f002 faf0 	bl	801441c <RCCEx_PLL3_Config>
 8011e3c:	4603      	mov	r3, r0
 8011e3e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 8011e42:	e004      	b.n	8011e4e <HAL_RCCEx_PeriphCLKConfig+0x9a>
 8011e44:	2301      	movs	r3, #1
 8011e46:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 8011e4a:	e000      	b.n	8011e4e <HAL_RCCEx_PeriphCLKConfig+0x9a>
 8011e4c:	bf00      	nop
 8011e4e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8011e52:	2b00      	cmp	r3, #0
 8011e54:	d10a      	bne.n	8011e6c <HAL_RCCEx_PeriphCLKConfig+0xb8>
 8011e56:	4b98      	ldr	r3, [pc, #608]	@ (80120b8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8011e58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011e5a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8011e5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011e62:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011e64:	4a94      	ldr	r2, [pc, #592]	@ (80120b8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8011e66:	430b      	orrs	r3, r1
 8011e68:	6513      	str	r3, [r2, #80]	@ 0x50
 8011e6a:	e003      	b.n	8011e74 <HAL_RCCEx_PeriphCLKConfig+0xc0>
 8011e6c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8011e70:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8011e74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011e78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e7c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8011e80:	f04f 0900 	mov.w	r9, #0
 8011e84:	ea58 0309 	orrs.w	r3, r8, r9
 8011e88:	d047      	beq.n	8011f1a <HAL_RCCEx_PeriphCLKConfig+0x166>
 8011e8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011e8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011e90:	2b04      	cmp	r3, #4
 8011e92:	d82a      	bhi.n	8011eea <HAL_RCCEx_PeriphCLKConfig+0x136>
 8011e94:	a201      	add	r2, pc, #4	@ (adr r2, 8011e9c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8011e96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011e9a:	bf00      	nop
 8011e9c:	08011eb1 	.word	0x08011eb1
 8011ea0:	08011ebf 	.word	0x08011ebf
 8011ea4:	08011ed5 	.word	0x08011ed5
 8011ea8:	08011ef3 	.word	0x08011ef3
 8011eac:	08011ef3 	.word	0x08011ef3
 8011eb0:	4b81      	ldr	r3, [pc, #516]	@ (80120b8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8011eb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011eb4:	4a80      	ldr	r2, [pc, #512]	@ (80120b8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8011eb6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8011eba:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8011ebc:	e01a      	b.n	8011ef4 <HAL_RCCEx_PeriphCLKConfig+0x140>
 8011ebe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011ec2:	3308      	adds	r3, #8
 8011ec4:	2100      	movs	r1, #0
 8011ec6:	4618      	mov	r0, r3
 8011ec8:	f002 f9f6 	bl	80142b8 <RCCEx_PLL2_Config>
 8011ecc:	4603      	mov	r3, r0
 8011ece:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 8011ed2:	e00f      	b.n	8011ef4 <HAL_RCCEx_PeriphCLKConfig+0x140>
 8011ed4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011ed8:	3328      	adds	r3, #40	@ 0x28
 8011eda:	2100      	movs	r1, #0
 8011edc:	4618      	mov	r0, r3
 8011ede:	f002 fa9d 	bl	801441c <RCCEx_PLL3_Config>
 8011ee2:	4603      	mov	r3, r0
 8011ee4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 8011ee8:	e004      	b.n	8011ef4 <HAL_RCCEx_PeriphCLKConfig+0x140>
 8011eea:	2301      	movs	r3, #1
 8011eec:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 8011ef0:	e000      	b.n	8011ef4 <HAL_RCCEx_PeriphCLKConfig+0x140>
 8011ef2:	bf00      	nop
 8011ef4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8011ef8:	2b00      	cmp	r3, #0
 8011efa:	d10a      	bne.n	8011f12 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8011efc:	4b6e      	ldr	r3, [pc, #440]	@ (80120b8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8011efe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011f00:	f023 0107 	bic.w	r1, r3, #7
 8011f04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011f08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011f0a:	4a6b      	ldr	r2, [pc, #428]	@ (80120b8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8011f0c:	430b      	orrs	r3, r1
 8011f0e:	6513      	str	r3, [r2, #80]	@ 0x50
 8011f10:	e003      	b.n	8011f1a <HAL_RCCEx_PeriphCLKConfig+0x166>
 8011f12:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8011f16:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8011f1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f22:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 8011f26:	f04f 0b00 	mov.w	fp, #0
 8011f2a:	ea5a 030b 	orrs.w	r3, sl, fp
 8011f2e:	d05b      	beq.n	8011fe8 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8011f30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011f34:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8011f38:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8011f3c:	d03b      	beq.n	8011fb6 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8011f3e:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8011f42:	d834      	bhi.n	8011fae <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8011f44:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8011f48:	d037      	beq.n	8011fba <HAL_RCCEx_PeriphCLKConfig+0x206>
 8011f4a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8011f4e:	d82e      	bhi.n	8011fae <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8011f50:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8011f54:	d033      	beq.n	8011fbe <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8011f56:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8011f5a:	d828      	bhi.n	8011fae <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8011f5c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8011f60:	d01a      	beq.n	8011f98 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8011f62:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8011f66:	d822      	bhi.n	8011fae <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8011f68:	2b00      	cmp	r3, #0
 8011f6a:	d003      	beq.n	8011f74 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8011f6c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8011f70:	d007      	beq.n	8011f82 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8011f72:	e01c      	b.n	8011fae <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8011f74:	4b50      	ldr	r3, [pc, #320]	@ (80120b8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8011f76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011f78:	4a4f      	ldr	r2, [pc, #316]	@ (80120b8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8011f7a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8011f7e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8011f80:	e01e      	b.n	8011fc0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
 8011f82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011f86:	3308      	adds	r3, #8
 8011f88:	2100      	movs	r1, #0
 8011f8a:	4618      	mov	r0, r3
 8011f8c:	f002 f994 	bl	80142b8 <RCCEx_PLL2_Config>
 8011f90:	4603      	mov	r3, r0
 8011f92:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 8011f96:	e013      	b.n	8011fc0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
 8011f98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011f9c:	3328      	adds	r3, #40	@ 0x28
 8011f9e:	2100      	movs	r1, #0
 8011fa0:	4618      	mov	r0, r3
 8011fa2:	f002 fa3b 	bl	801441c <RCCEx_PLL3_Config>
 8011fa6:	4603      	mov	r3, r0
 8011fa8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 8011fac:	e008      	b.n	8011fc0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
 8011fae:	2301      	movs	r3, #1
 8011fb0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 8011fb4:	e004      	b.n	8011fc0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
 8011fb6:	bf00      	nop
 8011fb8:	e002      	b.n	8011fc0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
 8011fba:	bf00      	nop
 8011fbc:	e000      	b.n	8011fc0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
 8011fbe:	bf00      	nop
 8011fc0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8011fc4:	2b00      	cmp	r3, #0
 8011fc6:	d10b      	bne.n	8011fe0 <HAL_RCCEx_PeriphCLKConfig+0x22c>
 8011fc8:	4b3b      	ldr	r3, [pc, #236]	@ (80120b8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8011fca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011fcc:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8011fd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011fd4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8011fd8:	4a37      	ldr	r2, [pc, #220]	@ (80120b8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8011fda:	430b      	orrs	r3, r1
 8011fdc:	6593      	str	r3, [r2, #88]	@ 0x58
 8011fde:	e003      	b.n	8011fe8 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8011fe0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8011fe4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8011fe8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ff0:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8011ff4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8011ff8:	2300      	movs	r3, #0
 8011ffa:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8011ffe:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8012002:	460b      	mov	r3, r1
 8012004:	4313      	orrs	r3, r2
 8012006:	d05d      	beq.n	80120c4 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8012008:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801200c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8012010:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8012014:	d03b      	beq.n	801208e <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8012016:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 801201a:	d834      	bhi.n	8012086 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 801201c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8012020:	d037      	beq.n	8012092 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8012022:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8012026:	d82e      	bhi.n	8012086 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8012028:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 801202c:	d033      	beq.n	8012096 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 801202e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8012032:	d828      	bhi.n	8012086 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8012034:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8012038:	d01a      	beq.n	8012070 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 801203a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801203e:	d822      	bhi.n	8012086 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8012040:	2b00      	cmp	r3, #0
 8012042:	d003      	beq.n	801204c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8012044:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8012048:	d007      	beq.n	801205a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 801204a:	e01c      	b.n	8012086 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 801204c:	4b1a      	ldr	r3, [pc, #104]	@ (80120b8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 801204e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012050:	4a19      	ldr	r2, [pc, #100]	@ (80120b8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8012052:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8012056:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8012058:	e01e      	b.n	8012098 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
 801205a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801205e:	3308      	adds	r3, #8
 8012060:	2100      	movs	r1, #0
 8012062:	4618      	mov	r0, r3
 8012064:	f002 f928 	bl	80142b8 <RCCEx_PLL2_Config>
 8012068:	4603      	mov	r3, r0
 801206a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 801206e:	e013      	b.n	8012098 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
 8012070:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012074:	3328      	adds	r3, #40	@ 0x28
 8012076:	2100      	movs	r1, #0
 8012078:	4618      	mov	r0, r3
 801207a:	f002 f9cf 	bl	801441c <RCCEx_PLL3_Config>
 801207e:	4603      	mov	r3, r0
 8012080:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 8012084:	e008      	b.n	8012098 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
 8012086:	2301      	movs	r3, #1
 8012088:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 801208c:	e004      	b.n	8012098 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
 801208e:	bf00      	nop
 8012090:	e002      	b.n	8012098 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
 8012092:	bf00      	nop
 8012094:	e000      	b.n	8012098 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
 8012096:	bf00      	nop
 8012098:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801209c:	2b00      	cmp	r3, #0
 801209e:	d10d      	bne.n	80120bc <HAL_RCCEx_PeriphCLKConfig+0x308>
 80120a0:	4b05      	ldr	r3, [pc, #20]	@ (80120b8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80120a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80120a4:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80120a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80120ac:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80120b0:	4a01      	ldr	r2, [pc, #4]	@ (80120b8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80120b2:	430b      	orrs	r3, r1
 80120b4:	6593      	str	r3, [r2, #88]	@ 0x58
 80120b6:	e005      	b.n	80120c4 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80120b8:	58024400 	.word	0x58024400
 80120bc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80120c0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 80120c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80120c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120cc:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80120d0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80120d4:	2300      	movs	r3, #0
 80120d6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80120da:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80120de:	460b      	mov	r3, r1
 80120e0:	4313      	orrs	r3, r2
 80120e2:	d03a      	beq.n	801215a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
 80120e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80120e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80120ea:	2b30      	cmp	r3, #48	@ 0x30
 80120ec:	d01f      	beq.n	801212e <HAL_RCCEx_PeriphCLKConfig+0x37a>
 80120ee:	2b30      	cmp	r3, #48	@ 0x30
 80120f0:	d819      	bhi.n	8012126 <HAL_RCCEx_PeriphCLKConfig+0x372>
 80120f2:	2b20      	cmp	r3, #32
 80120f4:	d00c      	beq.n	8012110 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80120f6:	2b20      	cmp	r3, #32
 80120f8:	d815      	bhi.n	8012126 <HAL_RCCEx_PeriphCLKConfig+0x372>
 80120fa:	2b00      	cmp	r3, #0
 80120fc:	d019      	beq.n	8012132 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80120fe:	2b10      	cmp	r3, #16
 8012100:	d111      	bne.n	8012126 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8012102:	4baa      	ldr	r3, [pc, #680]	@ (80123ac <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8012104:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012106:	4aa9      	ldr	r2, [pc, #676]	@ (80123ac <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8012108:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801210c:	62d3      	str	r3, [r2, #44]	@ 0x2c
 801210e:	e011      	b.n	8012134 <HAL_RCCEx_PeriphCLKConfig+0x380>
 8012110:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012114:	3308      	adds	r3, #8
 8012116:	2102      	movs	r1, #2
 8012118:	4618      	mov	r0, r3
 801211a:	f002 f8cd 	bl	80142b8 <RCCEx_PLL2_Config>
 801211e:	4603      	mov	r3, r0
 8012120:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 8012124:	e006      	b.n	8012134 <HAL_RCCEx_PeriphCLKConfig+0x380>
 8012126:	2301      	movs	r3, #1
 8012128:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 801212c:	e002      	b.n	8012134 <HAL_RCCEx_PeriphCLKConfig+0x380>
 801212e:	bf00      	nop
 8012130:	e000      	b.n	8012134 <HAL_RCCEx_PeriphCLKConfig+0x380>
 8012132:	bf00      	nop
 8012134:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012138:	2b00      	cmp	r3, #0
 801213a:	d10a      	bne.n	8012152 <HAL_RCCEx_PeriphCLKConfig+0x39e>
 801213c:	4b9b      	ldr	r3, [pc, #620]	@ (80123ac <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 801213e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012140:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8012144:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012148:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801214a:	4a98      	ldr	r2, [pc, #608]	@ (80123ac <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 801214c:	430b      	orrs	r3, r1
 801214e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8012150:	e003      	b.n	801215a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
 8012152:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012156:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 801215a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801215e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012162:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8012166:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 801216a:	2300      	movs	r3, #0
 801216c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8012170:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8012174:	460b      	mov	r3, r1
 8012176:	4313      	orrs	r3, r2
 8012178:	d051      	beq.n	801221e <HAL_RCCEx_PeriphCLKConfig+0x46a>
 801217a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801217e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8012180:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8012184:	d035      	beq.n	80121f2 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8012186:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801218a:	d82e      	bhi.n	80121ea <HAL_RCCEx_PeriphCLKConfig+0x436>
 801218c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8012190:	d031      	beq.n	80121f6 <HAL_RCCEx_PeriphCLKConfig+0x442>
 8012192:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8012196:	d828      	bhi.n	80121ea <HAL_RCCEx_PeriphCLKConfig+0x436>
 8012198:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801219c:	d01a      	beq.n	80121d4 <HAL_RCCEx_PeriphCLKConfig+0x420>
 801219e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80121a2:	d822      	bhi.n	80121ea <HAL_RCCEx_PeriphCLKConfig+0x436>
 80121a4:	2b00      	cmp	r3, #0
 80121a6:	d003      	beq.n	80121b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 80121a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80121ac:	d007      	beq.n	80121be <HAL_RCCEx_PeriphCLKConfig+0x40a>
 80121ae:	e01c      	b.n	80121ea <HAL_RCCEx_PeriphCLKConfig+0x436>
 80121b0:	4b7e      	ldr	r3, [pc, #504]	@ (80123ac <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80121b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80121b4:	4a7d      	ldr	r2, [pc, #500]	@ (80123ac <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80121b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80121ba:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80121bc:	e01c      	b.n	80121f8 <HAL_RCCEx_PeriphCLKConfig+0x444>
 80121be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80121c2:	3308      	adds	r3, #8
 80121c4:	2100      	movs	r1, #0
 80121c6:	4618      	mov	r0, r3
 80121c8:	f002 f876 	bl	80142b8 <RCCEx_PLL2_Config>
 80121cc:	4603      	mov	r3, r0
 80121ce:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 80121d2:	e011      	b.n	80121f8 <HAL_RCCEx_PeriphCLKConfig+0x444>
 80121d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80121d8:	3328      	adds	r3, #40	@ 0x28
 80121da:	2100      	movs	r1, #0
 80121dc:	4618      	mov	r0, r3
 80121de:	f002 f91d 	bl	801441c <RCCEx_PLL3_Config>
 80121e2:	4603      	mov	r3, r0
 80121e4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 80121e8:	e006      	b.n	80121f8 <HAL_RCCEx_PeriphCLKConfig+0x444>
 80121ea:	2301      	movs	r3, #1
 80121ec:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 80121f0:	e002      	b.n	80121f8 <HAL_RCCEx_PeriphCLKConfig+0x444>
 80121f2:	bf00      	nop
 80121f4:	e000      	b.n	80121f8 <HAL_RCCEx_PeriphCLKConfig+0x444>
 80121f6:	bf00      	nop
 80121f8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80121fc:	2b00      	cmp	r3, #0
 80121fe:	d10a      	bne.n	8012216 <HAL_RCCEx_PeriphCLKConfig+0x462>
 8012200:	4b6a      	ldr	r3, [pc, #424]	@ (80123ac <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8012202:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012204:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8012208:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801220c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801220e:	4a67      	ldr	r2, [pc, #412]	@ (80123ac <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8012210:	430b      	orrs	r3, r1
 8012212:	6513      	str	r3, [r2, #80]	@ 0x50
 8012214:	e003      	b.n	801221e <HAL_RCCEx_PeriphCLKConfig+0x46a>
 8012216:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801221a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 801221e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012222:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012226:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 801222a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 801222e:	2300      	movs	r3, #0
 8012230:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8012234:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8012238:	460b      	mov	r3, r1
 801223a:	4313      	orrs	r3, r2
 801223c:	d053      	beq.n	80122e6 <HAL_RCCEx_PeriphCLKConfig+0x532>
 801223e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012242:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8012244:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8012248:	d033      	beq.n	80122b2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 801224a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 801224e:	d82c      	bhi.n	80122aa <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8012250:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8012254:	d02f      	beq.n	80122b6 <HAL_RCCEx_PeriphCLKConfig+0x502>
 8012256:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 801225a:	d826      	bhi.n	80122aa <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 801225c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8012260:	d02b      	beq.n	80122ba <HAL_RCCEx_PeriphCLKConfig+0x506>
 8012262:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8012266:	d820      	bhi.n	80122aa <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8012268:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801226c:	d012      	beq.n	8012294 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 801226e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8012272:	d81a      	bhi.n	80122aa <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8012274:	2b00      	cmp	r3, #0
 8012276:	d022      	beq.n	80122be <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8012278:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801227c:	d115      	bne.n	80122aa <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 801227e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012282:	3308      	adds	r3, #8
 8012284:	2101      	movs	r1, #1
 8012286:	4618      	mov	r0, r3
 8012288:	f002 f816 	bl	80142b8 <RCCEx_PLL2_Config>
 801228c:	4603      	mov	r3, r0
 801228e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 8012292:	e015      	b.n	80122c0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8012294:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012298:	3328      	adds	r3, #40	@ 0x28
 801229a:	2101      	movs	r1, #1
 801229c:	4618      	mov	r0, r3
 801229e:	f002 f8bd 	bl	801441c <RCCEx_PLL3_Config>
 80122a2:	4603      	mov	r3, r0
 80122a4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 80122a8:	e00a      	b.n	80122c0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 80122aa:	2301      	movs	r3, #1
 80122ac:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 80122b0:	e006      	b.n	80122c0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 80122b2:	bf00      	nop
 80122b4:	e004      	b.n	80122c0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 80122b6:	bf00      	nop
 80122b8:	e002      	b.n	80122c0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 80122ba:	bf00      	nop
 80122bc:	e000      	b.n	80122c0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 80122be:	bf00      	nop
 80122c0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80122c4:	2b00      	cmp	r3, #0
 80122c6:	d10a      	bne.n	80122de <HAL_RCCEx_PeriphCLKConfig+0x52a>
 80122c8:	4b38      	ldr	r3, [pc, #224]	@ (80123ac <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80122ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80122cc:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80122d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80122d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80122d6:	4a35      	ldr	r2, [pc, #212]	@ (80123ac <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80122d8:	430b      	orrs	r3, r1
 80122da:	6513      	str	r3, [r2, #80]	@ 0x50
 80122dc:	e003      	b.n	80122e6 <HAL_RCCEx_PeriphCLKConfig+0x532>
 80122de:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80122e2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 80122e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80122ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122ee:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80122f2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80122f6:	2300      	movs	r3, #0
 80122f8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80122fc:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8012300:	460b      	mov	r3, r1
 8012302:	4313      	orrs	r3, r2
 8012304:	d058      	beq.n	80123b8 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8012306:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801230a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 801230e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8012312:	d033      	beq.n	801237c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8012314:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8012318:	d82c      	bhi.n	8012374 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 801231a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801231e:	d02f      	beq.n	8012380 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8012320:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8012324:	d826      	bhi.n	8012374 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8012326:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 801232a:	d02b      	beq.n	8012384 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 801232c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8012330:	d820      	bhi.n	8012374 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8012332:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8012336:	d012      	beq.n	801235e <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8012338:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801233c:	d81a      	bhi.n	8012374 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 801233e:	2b00      	cmp	r3, #0
 8012340:	d022      	beq.n	8012388 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8012342:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8012346:	d115      	bne.n	8012374 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8012348:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801234c:	3308      	adds	r3, #8
 801234e:	2101      	movs	r1, #1
 8012350:	4618      	mov	r0, r3
 8012352:	f001 ffb1 	bl	80142b8 <RCCEx_PLL2_Config>
 8012356:	4603      	mov	r3, r0
 8012358:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 801235c:	e015      	b.n	801238a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
 801235e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012362:	3328      	adds	r3, #40	@ 0x28
 8012364:	2101      	movs	r1, #1
 8012366:	4618      	mov	r0, r3
 8012368:	f002 f858 	bl	801441c <RCCEx_PLL3_Config>
 801236c:	4603      	mov	r3, r0
 801236e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 8012372:	e00a      	b.n	801238a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
 8012374:	2301      	movs	r3, #1
 8012376:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 801237a:	e006      	b.n	801238a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
 801237c:	bf00      	nop
 801237e:	e004      	b.n	801238a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
 8012380:	bf00      	nop
 8012382:	e002      	b.n	801238a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
 8012384:	bf00      	nop
 8012386:	e000      	b.n	801238a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
 8012388:	bf00      	nop
 801238a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801238e:	2b00      	cmp	r3, #0
 8012390:	d10e      	bne.n	80123b0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
 8012392:	4b06      	ldr	r3, [pc, #24]	@ (80123ac <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8012394:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012396:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 801239a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801239e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80123a2:	4a02      	ldr	r2, [pc, #8]	@ (80123ac <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80123a4:	430b      	orrs	r3, r1
 80123a6:	6593      	str	r3, [r2, #88]	@ 0x58
 80123a8:	e006      	b.n	80123b8 <HAL_RCCEx_PeriphCLKConfig+0x604>
 80123aa:	bf00      	nop
 80123ac:	58024400 	.word	0x58024400
 80123b0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80123b4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 80123b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80123bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123c0:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80123c4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80123c8:	2300      	movs	r3, #0
 80123ca:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80123ce:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80123d2:	460b      	mov	r3, r1
 80123d4:	4313      	orrs	r3, r2
 80123d6:	d037      	beq.n	8012448 <HAL_RCCEx_PeriphCLKConfig+0x694>
 80123d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80123dc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80123de:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80123e2:	d00e      	beq.n	8012402 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 80123e4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80123e8:	d816      	bhi.n	8012418 <HAL_RCCEx_PeriphCLKConfig+0x664>
 80123ea:	2b00      	cmp	r3, #0
 80123ec:	d018      	beq.n	8012420 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80123ee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80123f2:	d111      	bne.n	8012418 <HAL_RCCEx_PeriphCLKConfig+0x664>
 80123f4:	4bc4      	ldr	r3, [pc, #784]	@ (8012708 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80123f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80123f8:	4ac3      	ldr	r2, [pc, #780]	@ (8012708 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80123fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80123fe:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8012400:	e00f      	b.n	8012422 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8012402:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012406:	3308      	adds	r3, #8
 8012408:	2101      	movs	r1, #1
 801240a:	4618      	mov	r0, r3
 801240c:	f001 ff54 	bl	80142b8 <RCCEx_PLL2_Config>
 8012410:	4603      	mov	r3, r0
 8012412:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 8012416:	e004      	b.n	8012422 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8012418:	2301      	movs	r3, #1
 801241a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 801241e:	e000      	b.n	8012422 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8012420:	bf00      	nop
 8012422:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012426:	2b00      	cmp	r3, #0
 8012428:	d10a      	bne.n	8012440 <HAL_RCCEx_PeriphCLKConfig+0x68c>
 801242a:	4bb7      	ldr	r3, [pc, #732]	@ (8012708 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801242c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801242e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8012432:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012436:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012438:	4ab3      	ldr	r2, [pc, #716]	@ (8012708 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801243a:	430b      	orrs	r3, r1
 801243c:	6513      	str	r3, [r2, #80]	@ 0x50
 801243e:	e003      	b.n	8012448 <HAL_RCCEx_PeriphCLKConfig+0x694>
 8012440:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012444:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8012448:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801244c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012450:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8012454:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8012458:	2300      	movs	r3, #0
 801245a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 801245e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8012462:	460b      	mov	r3, r1
 8012464:	4313      	orrs	r3, r2
 8012466:	d039      	beq.n	80124dc <HAL_RCCEx_PeriphCLKConfig+0x728>
 8012468:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801246c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801246e:	2b03      	cmp	r3, #3
 8012470:	d81c      	bhi.n	80124ac <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8012472:	a201      	add	r2, pc, #4	@ (adr r2, 8012478 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8012474:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012478:	080124b5 	.word	0x080124b5
 801247c:	08012489 	.word	0x08012489
 8012480:	08012497 	.word	0x08012497
 8012484:	080124b5 	.word	0x080124b5
 8012488:	4b9f      	ldr	r3, [pc, #636]	@ (8012708 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801248a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801248c:	4a9e      	ldr	r2, [pc, #632]	@ (8012708 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801248e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8012492:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8012494:	e00f      	b.n	80124b6 <HAL_RCCEx_PeriphCLKConfig+0x702>
 8012496:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801249a:	3308      	adds	r3, #8
 801249c:	2102      	movs	r1, #2
 801249e:	4618      	mov	r0, r3
 80124a0:	f001 ff0a 	bl	80142b8 <RCCEx_PLL2_Config>
 80124a4:	4603      	mov	r3, r0
 80124a6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 80124aa:	e004      	b.n	80124b6 <HAL_RCCEx_PeriphCLKConfig+0x702>
 80124ac:	2301      	movs	r3, #1
 80124ae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 80124b2:	e000      	b.n	80124b6 <HAL_RCCEx_PeriphCLKConfig+0x702>
 80124b4:	bf00      	nop
 80124b6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80124ba:	2b00      	cmp	r3, #0
 80124bc:	d10a      	bne.n	80124d4 <HAL_RCCEx_PeriphCLKConfig+0x720>
 80124be:	4b92      	ldr	r3, [pc, #584]	@ (8012708 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80124c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80124c2:	f023 0103 	bic.w	r1, r3, #3
 80124c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80124ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80124cc:	4a8e      	ldr	r2, [pc, #568]	@ (8012708 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80124ce:	430b      	orrs	r3, r1
 80124d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80124d2:	e003      	b.n	80124dc <HAL_RCCEx_PeriphCLKConfig+0x728>
 80124d4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80124d8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 80124dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80124e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80124e4:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80124e8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80124ec:	2300      	movs	r3, #0
 80124ee:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80124f2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80124f6:	460b      	mov	r3, r1
 80124f8:	4313      	orrs	r3, r2
 80124fa:	f000 8099 	beq.w	8012630 <HAL_RCCEx_PeriphCLKConfig+0x87c>
 80124fe:	4b83      	ldr	r3, [pc, #524]	@ (801270c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8012500:	681b      	ldr	r3, [r3, #0]
 8012502:	4a82      	ldr	r2, [pc, #520]	@ (801270c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8012504:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8012508:	6013      	str	r3, [r2, #0]
 801250a:	f7f6 fe97 	bl	800923c <HAL_GetTick>
 801250e:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110
 8012512:	e00b      	b.n	801252c <HAL_RCCEx_PeriphCLKConfig+0x778>
 8012514:	f7f6 fe92 	bl	800923c <HAL_GetTick>
 8012518:	4602      	mov	r2, r0
 801251a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 801251e:	1ad3      	subs	r3, r2, r3
 8012520:	2b64      	cmp	r3, #100	@ 0x64
 8012522:	d903      	bls.n	801252c <HAL_RCCEx_PeriphCLKConfig+0x778>
 8012524:	2303      	movs	r3, #3
 8012526:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 801252a:	e005      	b.n	8012538 <HAL_RCCEx_PeriphCLKConfig+0x784>
 801252c:	4b77      	ldr	r3, [pc, #476]	@ (801270c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 801252e:	681b      	ldr	r3, [r3, #0]
 8012530:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8012534:	2b00      	cmp	r3, #0
 8012536:	d0ed      	beq.n	8012514 <HAL_RCCEx_PeriphCLKConfig+0x760>
 8012538:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801253c:	2b00      	cmp	r3, #0
 801253e:	d173      	bne.n	8012628 <HAL_RCCEx_PeriphCLKConfig+0x874>
 8012540:	4b71      	ldr	r3, [pc, #452]	@ (8012708 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8012542:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8012544:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012548:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 801254c:	4053      	eors	r3, r2
 801254e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8012552:	2b00      	cmp	r3, #0
 8012554:	d015      	beq.n	8012582 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8012556:	4b6c      	ldr	r3, [pc, #432]	@ (8012708 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8012558:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801255a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 801255e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8012562:	4b69      	ldr	r3, [pc, #420]	@ (8012708 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8012564:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012566:	4a68      	ldr	r2, [pc, #416]	@ (8012708 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8012568:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801256c:	6713      	str	r3, [r2, #112]	@ 0x70
 801256e:	4b66      	ldr	r3, [pc, #408]	@ (8012708 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8012570:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012572:	4a65      	ldr	r2, [pc, #404]	@ (8012708 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8012574:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8012578:	6713      	str	r3, [r2, #112]	@ 0x70
 801257a:	4a63      	ldr	r2, [pc, #396]	@ (8012708 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801257c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8012580:	6713      	str	r3, [r2, #112]	@ 0x70
 8012582:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012586:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 801258a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801258e:	d118      	bne.n	80125c2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
 8012590:	f7f6 fe54 	bl	800923c <HAL_GetTick>
 8012594:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110
 8012598:	e00d      	b.n	80125b6 <HAL_RCCEx_PeriphCLKConfig+0x802>
 801259a:	f7f6 fe4f 	bl	800923c <HAL_GetTick>
 801259e:	4602      	mov	r2, r0
 80125a0:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80125a4:	1ad2      	subs	r2, r2, r3
 80125a6:	f241 3388 	movw	r3, #5000	@ 0x1388
 80125aa:	429a      	cmp	r2, r3
 80125ac:	d903      	bls.n	80125b6 <HAL_RCCEx_PeriphCLKConfig+0x802>
 80125ae:	2303      	movs	r3, #3
 80125b0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 80125b4:	e005      	b.n	80125c2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
 80125b6:	4b54      	ldr	r3, [pc, #336]	@ (8012708 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80125b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80125ba:	f003 0302 	and.w	r3, r3, #2
 80125be:	2b00      	cmp	r3, #0
 80125c0:	d0eb      	beq.n	801259a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
 80125c2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80125c6:	2b00      	cmp	r3, #0
 80125c8:	d129      	bne.n	801261e <HAL_RCCEx_PeriphCLKConfig+0x86a>
 80125ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80125ce:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80125d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80125d6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80125da:	d10e      	bne.n	80125fa <HAL_RCCEx_PeriphCLKConfig+0x846>
 80125dc:	4b4a      	ldr	r3, [pc, #296]	@ (8012708 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80125de:	691b      	ldr	r3, [r3, #16]
 80125e0:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80125e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80125e8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80125ec:	091a      	lsrs	r2, r3, #4
 80125ee:	4b48      	ldr	r3, [pc, #288]	@ (8012710 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80125f0:	4013      	ands	r3, r2
 80125f2:	4a45      	ldr	r2, [pc, #276]	@ (8012708 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80125f4:	430b      	orrs	r3, r1
 80125f6:	6113      	str	r3, [r2, #16]
 80125f8:	e005      	b.n	8012606 <HAL_RCCEx_PeriphCLKConfig+0x852>
 80125fa:	4b43      	ldr	r3, [pc, #268]	@ (8012708 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80125fc:	691b      	ldr	r3, [r3, #16]
 80125fe:	4a42      	ldr	r2, [pc, #264]	@ (8012708 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8012600:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8012604:	6113      	str	r3, [r2, #16]
 8012606:	4b40      	ldr	r3, [pc, #256]	@ (8012708 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8012608:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 801260a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801260e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8012612:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8012616:	4a3c      	ldr	r2, [pc, #240]	@ (8012708 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8012618:	430b      	orrs	r3, r1
 801261a:	6713      	str	r3, [r2, #112]	@ 0x70
 801261c:	e008      	b.n	8012630 <HAL_RCCEx_PeriphCLKConfig+0x87c>
 801261e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012622:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8012626:	e003      	b.n	8012630 <HAL_RCCEx_PeriphCLKConfig+0x87c>
 8012628:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801262c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8012630:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012638:	f002 0301 	and.w	r3, r2, #1
 801263c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8012640:	2300      	movs	r3, #0
 8012642:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8012646:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 801264a:	460b      	mov	r3, r1
 801264c:	4313      	orrs	r3, r2
 801264e:	f000 808f 	beq.w	8012770 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
 8012652:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012656:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8012658:	2b28      	cmp	r3, #40	@ 0x28
 801265a:	d871      	bhi.n	8012740 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 801265c:	a201      	add	r2, pc, #4	@ (adr r2, 8012664 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 801265e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012662:	bf00      	nop
 8012664:	08012749 	.word	0x08012749
 8012668:	08012741 	.word	0x08012741
 801266c:	08012741 	.word	0x08012741
 8012670:	08012741 	.word	0x08012741
 8012674:	08012741 	.word	0x08012741
 8012678:	08012741 	.word	0x08012741
 801267c:	08012741 	.word	0x08012741
 8012680:	08012741 	.word	0x08012741
 8012684:	08012715 	.word	0x08012715
 8012688:	08012741 	.word	0x08012741
 801268c:	08012741 	.word	0x08012741
 8012690:	08012741 	.word	0x08012741
 8012694:	08012741 	.word	0x08012741
 8012698:	08012741 	.word	0x08012741
 801269c:	08012741 	.word	0x08012741
 80126a0:	08012741 	.word	0x08012741
 80126a4:	0801272b 	.word	0x0801272b
 80126a8:	08012741 	.word	0x08012741
 80126ac:	08012741 	.word	0x08012741
 80126b0:	08012741 	.word	0x08012741
 80126b4:	08012741 	.word	0x08012741
 80126b8:	08012741 	.word	0x08012741
 80126bc:	08012741 	.word	0x08012741
 80126c0:	08012741 	.word	0x08012741
 80126c4:	08012749 	.word	0x08012749
 80126c8:	08012741 	.word	0x08012741
 80126cc:	08012741 	.word	0x08012741
 80126d0:	08012741 	.word	0x08012741
 80126d4:	08012741 	.word	0x08012741
 80126d8:	08012741 	.word	0x08012741
 80126dc:	08012741 	.word	0x08012741
 80126e0:	08012741 	.word	0x08012741
 80126e4:	08012749 	.word	0x08012749
 80126e8:	08012741 	.word	0x08012741
 80126ec:	08012741 	.word	0x08012741
 80126f0:	08012741 	.word	0x08012741
 80126f4:	08012741 	.word	0x08012741
 80126f8:	08012741 	.word	0x08012741
 80126fc:	08012741 	.word	0x08012741
 8012700:	08012741 	.word	0x08012741
 8012704:	08012749 	.word	0x08012749
 8012708:	58024400 	.word	0x58024400
 801270c:	58024800 	.word	0x58024800
 8012710:	00ffffcf 	.word	0x00ffffcf
 8012714:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012718:	3308      	adds	r3, #8
 801271a:	2101      	movs	r1, #1
 801271c:	4618      	mov	r0, r3
 801271e:	f001 fdcb 	bl	80142b8 <RCCEx_PLL2_Config>
 8012722:	4603      	mov	r3, r0
 8012724:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 8012728:	e00f      	b.n	801274a <HAL_RCCEx_PeriphCLKConfig+0x996>
 801272a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801272e:	3328      	adds	r3, #40	@ 0x28
 8012730:	2101      	movs	r1, #1
 8012732:	4618      	mov	r0, r3
 8012734:	f001 fe72 	bl	801441c <RCCEx_PLL3_Config>
 8012738:	4603      	mov	r3, r0
 801273a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 801273e:	e004      	b.n	801274a <HAL_RCCEx_PeriphCLKConfig+0x996>
 8012740:	2301      	movs	r3, #1
 8012742:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 8012746:	e000      	b.n	801274a <HAL_RCCEx_PeriphCLKConfig+0x996>
 8012748:	bf00      	nop
 801274a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801274e:	2b00      	cmp	r3, #0
 8012750:	d10a      	bne.n	8012768 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
 8012752:	4bbf      	ldr	r3, [pc, #764]	@ (8012a50 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8012754:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012756:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 801275a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801275e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8012760:	4abb      	ldr	r2, [pc, #748]	@ (8012a50 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8012762:	430b      	orrs	r3, r1
 8012764:	6553      	str	r3, [r2, #84]	@ 0x54
 8012766:	e003      	b.n	8012770 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
 8012768:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801276c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8012770:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012778:	f002 0302 	and.w	r3, r2, #2
 801277c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8012780:	2300      	movs	r3, #0
 8012782:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8012786:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 801278a:	460b      	mov	r3, r1
 801278c:	4313      	orrs	r3, r2
 801278e:	d041      	beq.n	8012814 <HAL_RCCEx_PeriphCLKConfig+0xa60>
 8012790:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012794:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012796:	2b05      	cmp	r3, #5
 8012798:	d824      	bhi.n	80127e4 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 801279a:	a201      	add	r2, pc, #4	@ (adr r2, 80127a0 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 801279c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80127a0:	080127ed 	.word	0x080127ed
 80127a4:	080127b9 	.word	0x080127b9
 80127a8:	080127cf 	.word	0x080127cf
 80127ac:	080127ed 	.word	0x080127ed
 80127b0:	080127ed 	.word	0x080127ed
 80127b4:	080127ed 	.word	0x080127ed
 80127b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80127bc:	3308      	adds	r3, #8
 80127be:	2101      	movs	r1, #1
 80127c0:	4618      	mov	r0, r3
 80127c2:	f001 fd79 	bl	80142b8 <RCCEx_PLL2_Config>
 80127c6:	4603      	mov	r3, r0
 80127c8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 80127cc:	e00f      	b.n	80127ee <HAL_RCCEx_PeriphCLKConfig+0xa3a>
 80127ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80127d2:	3328      	adds	r3, #40	@ 0x28
 80127d4:	2101      	movs	r1, #1
 80127d6:	4618      	mov	r0, r3
 80127d8:	f001 fe20 	bl	801441c <RCCEx_PLL3_Config>
 80127dc:	4603      	mov	r3, r0
 80127de:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 80127e2:	e004      	b.n	80127ee <HAL_RCCEx_PeriphCLKConfig+0xa3a>
 80127e4:	2301      	movs	r3, #1
 80127e6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 80127ea:	e000      	b.n	80127ee <HAL_RCCEx_PeriphCLKConfig+0xa3a>
 80127ec:	bf00      	nop
 80127ee:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80127f2:	2b00      	cmp	r3, #0
 80127f4:	d10a      	bne.n	801280c <HAL_RCCEx_PeriphCLKConfig+0xa58>
 80127f6:	4b96      	ldr	r3, [pc, #600]	@ (8012a50 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80127f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80127fa:	f023 0107 	bic.w	r1, r3, #7
 80127fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012802:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012804:	4a92      	ldr	r2, [pc, #584]	@ (8012a50 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8012806:	430b      	orrs	r3, r1
 8012808:	6553      	str	r3, [r2, #84]	@ 0x54
 801280a:	e003      	b.n	8012814 <HAL_RCCEx_PeriphCLKConfig+0xa60>
 801280c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012810:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8012814:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012818:	e9d3 2300 	ldrd	r2, r3, [r3]
 801281c:	f002 0304 	and.w	r3, r2, #4
 8012820:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8012824:	2300      	movs	r3, #0
 8012826:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 801282a:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 801282e:	460b      	mov	r3, r1
 8012830:	4313      	orrs	r3, r2
 8012832:	d044      	beq.n	80128be <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8012834:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012838:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801283c:	2b05      	cmp	r3, #5
 801283e:	d825      	bhi.n	801288c <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8012840:	a201      	add	r2, pc, #4	@ (adr r2, 8012848 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8012842:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012846:	bf00      	nop
 8012848:	08012895 	.word	0x08012895
 801284c:	08012861 	.word	0x08012861
 8012850:	08012877 	.word	0x08012877
 8012854:	08012895 	.word	0x08012895
 8012858:	08012895 	.word	0x08012895
 801285c:	08012895 	.word	0x08012895
 8012860:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012864:	3308      	adds	r3, #8
 8012866:	2101      	movs	r1, #1
 8012868:	4618      	mov	r0, r3
 801286a:	f001 fd25 	bl	80142b8 <RCCEx_PLL2_Config>
 801286e:	4603      	mov	r3, r0
 8012870:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 8012874:	e00f      	b.n	8012896 <HAL_RCCEx_PeriphCLKConfig+0xae2>
 8012876:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801287a:	3328      	adds	r3, #40	@ 0x28
 801287c:	2101      	movs	r1, #1
 801287e:	4618      	mov	r0, r3
 8012880:	f001 fdcc 	bl	801441c <RCCEx_PLL3_Config>
 8012884:	4603      	mov	r3, r0
 8012886:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 801288a:	e004      	b.n	8012896 <HAL_RCCEx_PeriphCLKConfig+0xae2>
 801288c:	2301      	movs	r3, #1
 801288e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 8012892:	e000      	b.n	8012896 <HAL_RCCEx_PeriphCLKConfig+0xae2>
 8012894:	bf00      	nop
 8012896:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801289a:	2b00      	cmp	r3, #0
 801289c:	d10b      	bne.n	80128b6 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 801289e:	4b6c      	ldr	r3, [pc, #432]	@ (8012a50 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80128a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80128a2:	f023 0107 	bic.w	r1, r3, #7
 80128a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80128aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80128ae:	4a68      	ldr	r2, [pc, #416]	@ (8012a50 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80128b0:	430b      	orrs	r3, r1
 80128b2:	6593      	str	r3, [r2, #88]	@ 0x58
 80128b4:	e003      	b.n	80128be <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 80128b6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80128ba:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 80128be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80128c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80128c6:	f002 0320 	and.w	r3, r2, #32
 80128ca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80128ce:	2300      	movs	r3, #0
 80128d0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80128d4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80128d8:	460b      	mov	r3, r1
 80128da:	4313      	orrs	r3, r2
 80128dc:	d055      	beq.n	801298a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
 80128de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80128e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80128e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80128ea:	d033      	beq.n	8012954 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 80128ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80128f0:	d82c      	bhi.n	801294c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80128f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80128f6:	d02f      	beq.n	8012958 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 80128f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80128fc:	d826      	bhi.n	801294c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80128fe:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8012902:	d02b      	beq.n	801295c <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8012904:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8012908:	d820      	bhi.n	801294c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 801290a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801290e:	d012      	beq.n	8012936 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8012910:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8012914:	d81a      	bhi.n	801294c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8012916:	2b00      	cmp	r3, #0
 8012918:	d022      	beq.n	8012960 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 801291a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801291e:	d115      	bne.n	801294c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8012920:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012924:	3308      	adds	r3, #8
 8012926:	2100      	movs	r1, #0
 8012928:	4618      	mov	r0, r3
 801292a:	f001 fcc5 	bl	80142b8 <RCCEx_PLL2_Config>
 801292e:	4603      	mov	r3, r0
 8012930:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 8012934:	e015      	b.n	8012962 <HAL_RCCEx_PeriphCLKConfig+0xbae>
 8012936:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801293a:	3328      	adds	r3, #40	@ 0x28
 801293c:	2102      	movs	r1, #2
 801293e:	4618      	mov	r0, r3
 8012940:	f001 fd6c 	bl	801441c <RCCEx_PLL3_Config>
 8012944:	4603      	mov	r3, r0
 8012946:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 801294a:	e00a      	b.n	8012962 <HAL_RCCEx_PeriphCLKConfig+0xbae>
 801294c:	2301      	movs	r3, #1
 801294e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 8012952:	e006      	b.n	8012962 <HAL_RCCEx_PeriphCLKConfig+0xbae>
 8012954:	bf00      	nop
 8012956:	e004      	b.n	8012962 <HAL_RCCEx_PeriphCLKConfig+0xbae>
 8012958:	bf00      	nop
 801295a:	e002      	b.n	8012962 <HAL_RCCEx_PeriphCLKConfig+0xbae>
 801295c:	bf00      	nop
 801295e:	e000      	b.n	8012962 <HAL_RCCEx_PeriphCLKConfig+0xbae>
 8012960:	bf00      	nop
 8012962:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012966:	2b00      	cmp	r3, #0
 8012968:	d10b      	bne.n	8012982 <HAL_RCCEx_PeriphCLKConfig+0xbce>
 801296a:	4b39      	ldr	r3, [pc, #228]	@ (8012a50 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 801296c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801296e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8012972:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012976:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801297a:	4a35      	ldr	r2, [pc, #212]	@ (8012a50 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 801297c:	430b      	orrs	r3, r1
 801297e:	6553      	str	r3, [r2, #84]	@ 0x54
 8012980:	e003      	b.n	801298a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
 8012982:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012986:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 801298a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801298e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012992:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8012996:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 801299a:	2300      	movs	r3, #0
 801299c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80129a0:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80129a4:	460b      	mov	r3, r1
 80129a6:	4313      	orrs	r3, r2
 80129a8:	d058      	beq.n	8012a5c <HAL_RCCEx_PeriphCLKConfig+0xca8>
 80129aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80129ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80129b2:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80129b6:	d033      	beq.n	8012a20 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 80129b8:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80129bc:	d82c      	bhi.n	8012a18 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80129be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80129c2:	d02f      	beq.n	8012a24 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80129c4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80129c8:	d826      	bhi.n	8012a18 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80129ca:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80129ce:	d02b      	beq.n	8012a28 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 80129d0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80129d4:	d820      	bhi.n	8012a18 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80129d6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80129da:	d012      	beq.n	8012a02 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 80129dc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80129e0:	d81a      	bhi.n	8012a18 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80129e2:	2b00      	cmp	r3, #0
 80129e4:	d022      	beq.n	8012a2c <HAL_RCCEx_PeriphCLKConfig+0xc78>
 80129e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80129ea:	d115      	bne.n	8012a18 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80129ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80129f0:	3308      	adds	r3, #8
 80129f2:	2100      	movs	r1, #0
 80129f4:	4618      	mov	r0, r3
 80129f6:	f001 fc5f 	bl	80142b8 <RCCEx_PLL2_Config>
 80129fa:	4603      	mov	r3, r0
 80129fc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 8012a00:	e015      	b.n	8012a2e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
 8012a02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012a06:	3328      	adds	r3, #40	@ 0x28
 8012a08:	2102      	movs	r1, #2
 8012a0a:	4618      	mov	r0, r3
 8012a0c:	f001 fd06 	bl	801441c <RCCEx_PLL3_Config>
 8012a10:	4603      	mov	r3, r0
 8012a12:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 8012a16:	e00a      	b.n	8012a2e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
 8012a18:	2301      	movs	r3, #1
 8012a1a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 8012a1e:	e006      	b.n	8012a2e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
 8012a20:	bf00      	nop
 8012a22:	e004      	b.n	8012a2e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
 8012a24:	bf00      	nop
 8012a26:	e002      	b.n	8012a2e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
 8012a28:	bf00      	nop
 8012a2a:	e000      	b.n	8012a2e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
 8012a2c:	bf00      	nop
 8012a2e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012a32:	2b00      	cmp	r3, #0
 8012a34:	d10e      	bne.n	8012a54 <HAL_RCCEx_PeriphCLKConfig+0xca0>
 8012a36:	4b06      	ldr	r3, [pc, #24]	@ (8012a50 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8012a38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012a3a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8012a3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012a42:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8012a46:	4a02      	ldr	r2, [pc, #8]	@ (8012a50 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8012a48:	430b      	orrs	r3, r1
 8012a4a:	6593      	str	r3, [r2, #88]	@ 0x58
 8012a4c:	e006      	b.n	8012a5c <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8012a4e:	bf00      	nop
 8012a50:	58024400 	.word	0x58024400
 8012a54:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012a58:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8012a5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012a60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a64:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8012a68:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8012a6c:	2300      	movs	r3, #0
 8012a6e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8012a72:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8012a76:	460b      	mov	r3, r1
 8012a78:	4313      	orrs	r3, r2
 8012a7a:	d055      	beq.n	8012b28 <HAL_RCCEx_PeriphCLKConfig+0xd74>
 8012a7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012a80:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8012a84:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8012a88:	d033      	beq.n	8012af2 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8012a8a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8012a8e:	d82c      	bhi.n	8012aea <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8012a90:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8012a94:	d02f      	beq.n	8012af6 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8012a96:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8012a9a:	d826      	bhi.n	8012aea <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8012a9c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8012aa0:	d02b      	beq.n	8012afa <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8012aa2:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8012aa6:	d820      	bhi.n	8012aea <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8012aa8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8012aac:	d012      	beq.n	8012ad4 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8012aae:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8012ab2:	d81a      	bhi.n	8012aea <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8012ab4:	2b00      	cmp	r3, #0
 8012ab6:	d022      	beq.n	8012afe <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8012ab8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8012abc:	d115      	bne.n	8012aea <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8012abe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012ac2:	3308      	adds	r3, #8
 8012ac4:	2100      	movs	r1, #0
 8012ac6:	4618      	mov	r0, r3
 8012ac8:	f001 fbf6 	bl	80142b8 <RCCEx_PLL2_Config>
 8012acc:	4603      	mov	r3, r0
 8012ace:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 8012ad2:	e015      	b.n	8012b00 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
 8012ad4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012ad8:	3328      	adds	r3, #40	@ 0x28
 8012ada:	2102      	movs	r1, #2
 8012adc:	4618      	mov	r0, r3
 8012ade:	f001 fc9d 	bl	801441c <RCCEx_PLL3_Config>
 8012ae2:	4603      	mov	r3, r0
 8012ae4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 8012ae8:	e00a      	b.n	8012b00 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
 8012aea:	2301      	movs	r3, #1
 8012aec:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 8012af0:	e006      	b.n	8012b00 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
 8012af2:	bf00      	nop
 8012af4:	e004      	b.n	8012b00 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
 8012af6:	bf00      	nop
 8012af8:	e002      	b.n	8012b00 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
 8012afa:	bf00      	nop
 8012afc:	e000      	b.n	8012b00 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
 8012afe:	bf00      	nop
 8012b00:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012b04:	2b00      	cmp	r3, #0
 8012b06:	d10b      	bne.n	8012b20 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
 8012b08:	4ba0      	ldr	r3, [pc, #640]	@ (8012d8c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012b0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012b0c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8012b10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012b14:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8012b18:	4a9c      	ldr	r2, [pc, #624]	@ (8012d8c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012b1a:	430b      	orrs	r3, r1
 8012b1c:	6593      	str	r3, [r2, #88]	@ 0x58
 8012b1e:	e003      	b.n	8012b28 <HAL_RCCEx_PeriphCLKConfig+0xd74>
 8012b20:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012b24:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8012b28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b30:	f002 0308 	and.w	r3, r2, #8
 8012b34:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8012b38:	2300      	movs	r3, #0
 8012b3a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8012b3e:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8012b42:	460b      	mov	r3, r1
 8012b44:	4313      	orrs	r3, r2
 8012b46:	d01e      	beq.n	8012b86 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8012b48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012b4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012b50:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8012b54:	d10c      	bne.n	8012b70 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8012b56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012b5a:	3328      	adds	r3, #40	@ 0x28
 8012b5c:	2102      	movs	r1, #2
 8012b5e:	4618      	mov	r0, r3
 8012b60:	f001 fc5c 	bl	801441c <RCCEx_PLL3_Config>
 8012b64:	4603      	mov	r3, r0
 8012b66:	2b00      	cmp	r3, #0
 8012b68:	d002      	beq.n	8012b70 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8012b6a:	2301      	movs	r3, #1
 8012b6c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8012b70:	4b86      	ldr	r3, [pc, #536]	@ (8012d8c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012b72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012b74:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8012b78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012b7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012b80:	4a82      	ldr	r2, [pc, #520]	@ (8012d8c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012b82:	430b      	orrs	r3, r1
 8012b84:	6553      	str	r3, [r2, #84]	@ 0x54
 8012b86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012b8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b8e:	f002 0310 	and.w	r3, r2, #16
 8012b92:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8012b96:	2300      	movs	r3, #0
 8012b98:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8012b9c:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8012ba0:	460b      	mov	r3, r1
 8012ba2:	4313      	orrs	r3, r2
 8012ba4:	d01e      	beq.n	8012be4 <HAL_RCCEx_PeriphCLKConfig+0xe30>
 8012ba6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012baa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8012bae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8012bb2:	d10c      	bne.n	8012bce <HAL_RCCEx_PeriphCLKConfig+0xe1a>
 8012bb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012bb8:	3328      	adds	r3, #40	@ 0x28
 8012bba:	2102      	movs	r1, #2
 8012bbc:	4618      	mov	r0, r3
 8012bbe:	f001 fc2d 	bl	801441c <RCCEx_PLL3_Config>
 8012bc2:	4603      	mov	r3, r0
 8012bc4:	2b00      	cmp	r3, #0
 8012bc6:	d002      	beq.n	8012bce <HAL_RCCEx_PeriphCLKConfig+0xe1a>
 8012bc8:	2301      	movs	r3, #1
 8012bca:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8012bce:	4b6f      	ldr	r3, [pc, #444]	@ (8012d8c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012bd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012bd2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8012bd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012bda:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8012bde:	4a6b      	ldr	r2, [pc, #428]	@ (8012d8c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012be0:	430b      	orrs	r3, r1
 8012be2:	6593      	str	r3, [r2, #88]	@ 0x58
 8012be4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012be8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012bec:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8012bf0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8012bf2:	2300      	movs	r3, #0
 8012bf4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8012bf6:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8012bfa:	460b      	mov	r3, r1
 8012bfc:	4313      	orrs	r3, r2
 8012bfe:	d03e      	beq.n	8012c7e <HAL_RCCEx_PeriphCLKConfig+0xeca>
 8012c00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012c04:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8012c08:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8012c0c:	d022      	beq.n	8012c54 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8012c0e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8012c12:	d81b      	bhi.n	8012c4c <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8012c14:	2b00      	cmp	r3, #0
 8012c16:	d003      	beq.n	8012c20 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8012c18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8012c1c:	d00b      	beq.n	8012c36 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8012c1e:	e015      	b.n	8012c4c <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8012c20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012c24:	3308      	adds	r3, #8
 8012c26:	2100      	movs	r1, #0
 8012c28:	4618      	mov	r0, r3
 8012c2a:	f001 fb45 	bl	80142b8 <RCCEx_PLL2_Config>
 8012c2e:	4603      	mov	r3, r0
 8012c30:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 8012c34:	e00f      	b.n	8012c56 <HAL_RCCEx_PeriphCLKConfig+0xea2>
 8012c36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012c3a:	3328      	adds	r3, #40	@ 0x28
 8012c3c:	2102      	movs	r1, #2
 8012c3e:	4618      	mov	r0, r3
 8012c40:	f001 fbec 	bl	801441c <RCCEx_PLL3_Config>
 8012c44:	4603      	mov	r3, r0
 8012c46:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 8012c4a:	e004      	b.n	8012c56 <HAL_RCCEx_PeriphCLKConfig+0xea2>
 8012c4c:	2301      	movs	r3, #1
 8012c4e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 8012c52:	e000      	b.n	8012c56 <HAL_RCCEx_PeriphCLKConfig+0xea2>
 8012c54:	bf00      	nop
 8012c56:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012c5a:	2b00      	cmp	r3, #0
 8012c5c:	d10b      	bne.n	8012c76 <HAL_RCCEx_PeriphCLKConfig+0xec2>
 8012c5e:	4b4b      	ldr	r3, [pc, #300]	@ (8012d8c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012c60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012c62:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8012c66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012c6a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8012c6e:	4a47      	ldr	r2, [pc, #284]	@ (8012d8c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012c70:	430b      	orrs	r3, r1
 8012c72:	6593      	str	r3, [r2, #88]	@ 0x58
 8012c74:	e003      	b.n	8012c7e <HAL_RCCEx_PeriphCLKConfig+0xeca>
 8012c76:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012c7a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8012c7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c86:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8012c8a:	673b      	str	r3, [r7, #112]	@ 0x70
 8012c8c:	2300      	movs	r3, #0
 8012c8e:	677b      	str	r3, [r7, #116]	@ 0x74
 8012c90:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8012c94:	460b      	mov	r3, r1
 8012c96:	4313      	orrs	r3, r2
 8012c98:	d03b      	beq.n	8012d12 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
 8012c9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012c9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8012ca2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8012ca6:	d01f      	beq.n	8012ce8 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8012ca8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8012cac:	d818      	bhi.n	8012ce0 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8012cae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8012cb2:	d003      	beq.n	8012cbc <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8012cb4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8012cb8:	d007      	beq.n	8012cca <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8012cba:	e011      	b.n	8012ce0 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8012cbc:	4b33      	ldr	r3, [pc, #204]	@ (8012d8c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012cbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012cc0:	4a32      	ldr	r2, [pc, #200]	@ (8012d8c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012cc2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8012cc6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8012cc8:	e00f      	b.n	8012cea <HAL_RCCEx_PeriphCLKConfig+0xf36>
 8012cca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012cce:	3328      	adds	r3, #40	@ 0x28
 8012cd0:	2101      	movs	r1, #1
 8012cd2:	4618      	mov	r0, r3
 8012cd4:	f001 fba2 	bl	801441c <RCCEx_PLL3_Config>
 8012cd8:	4603      	mov	r3, r0
 8012cda:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 8012cde:	e004      	b.n	8012cea <HAL_RCCEx_PeriphCLKConfig+0xf36>
 8012ce0:	2301      	movs	r3, #1
 8012ce2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 8012ce6:	e000      	b.n	8012cea <HAL_RCCEx_PeriphCLKConfig+0xf36>
 8012ce8:	bf00      	nop
 8012cea:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012cee:	2b00      	cmp	r3, #0
 8012cf0:	d10b      	bne.n	8012d0a <HAL_RCCEx_PeriphCLKConfig+0xf56>
 8012cf2:	4b26      	ldr	r3, [pc, #152]	@ (8012d8c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012cf4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012cf6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8012cfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012cfe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8012d02:	4a22      	ldr	r2, [pc, #136]	@ (8012d8c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012d04:	430b      	orrs	r3, r1
 8012d06:	6553      	str	r3, [r2, #84]	@ 0x54
 8012d08:	e003      	b.n	8012d12 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
 8012d0a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012d0e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8012d12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012d16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d1a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8012d1e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8012d20:	2300      	movs	r3, #0
 8012d22:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8012d24:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8012d28:	460b      	mov	r3, r1
 8012d2a:	4313      	orrs	r3, r2
 8012d2c:	d034      	beq.n	8012d98 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8012d2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012d32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012d34:	2b00      	cmp	r3, #0
 8012d36:	d003      	beq.n	8012d40 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8012d38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8012d3c:	d007      	beq.n	8012d4e <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8012d3e:	e011      	b.n	8012d64 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
 8012d40:	4b12      	ldr	r3, [pc, #72]	@ (8012d8c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012d42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012d44:	4a11      	ldr	r2, [pc, #68]	@ (8012d8c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012d46:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8012d4a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8012d4c:	e00e      	b.n	8012d6c <HAL_RCCEx_PeriphCLKConfig+0xfb8>
 8012d4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012d52:	3308      	adds	r3, #8
 8012d54:	2102      	movs	r1, #2
 8012d56:	4618      	mov	r0, r3
 8012d58:	f001 faae 	bl	80142b8 <RCCEx_PLL2_Config>
 8012d5c:	4603      	mov	r3, r0
 8012d5e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 8012d62:	e003      	b.n	8012d6c <HAL_RCCEx_PeriphCLKConfig+0xfb8>
 8012d64:	2301      	movs	r3, #1
 8012d66:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 8012d6a:	bf00      	nop
 8012d6c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012d70:	2b00      	cmp	r3, #0
 8012d72:	d10d      	bne.n	8012d90 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
 8012d74:	4b05      	ldr	r3, [pc, #20]	@ (8012d8c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012d76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012d78:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8012d7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012d80:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012d82:	4a02      	ldr	r2, [pc, #8]	@ (8012d8c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012d84:	430b      	orrs	r3, r1
 8012d86:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8012d88:	e006      	b.n	8012d98 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8012d8a:	bf00      	nop
 8012d8c:	58024400 	.word	0x58024400
 8012d90:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012d94:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8012d98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012da0:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8012da4:	663b      	str	r3, [r7, #96]	@ 0x60
 8012da6:	2300      	movs	r3, #0
 8012da8:	667b      	str	r3, [r7, #100]	@ 0x64
 8012daa:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8012dae:	460b      	mov	r3, r1
 8012db0:	4313      	orrs	r3, r2
 8012db2:	d00c      	beq.n	8012dce <HAL_RCCEx_PeriphCLKConfig+0x101a>
 8012db4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012db8:	3328      	adds	r3, #40	@ 0x28
 8012dba:	2102      	movs	r1, #2
 8012dbc:	4618      	mov	r0, r3
 8012dbe:	f001 fb2d 	bl	801441c <RCCEx_PLL3_Config>
 8012dc2:	4603      	mov	r3, r0
 8012dc4:	2b00      	cmp	r3, #0
 8012dc6:	d002      	beq.n	8012dce <HAL_RCCEx_PeriphCLKConfig+0x101a>
 8012dc8:	2301      	movs	r3, #1
 8012dca:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8012dce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012dd6:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8012dda:	65bb      	str	r3, [r7, #88]	@ 0x58
 8012ddc:	2300      	movs	r3, #0
 8012dde:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8012de0:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8012de4:	460b      	mov	r3, r1
 8012de6:	4313      	orrs	r3, r2
 8012de8:	d036      	beq.n	8012e58 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
 8012dea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012dee:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8012df0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8012df4:	d018      	beq.n	8012e28 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8012df6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8012dfa:	d811      	bhi.n	8012e20 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8012dfc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012e00:	d014      	beq.n	8012e2c <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8012e02:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012e06:	d80b      	bhi.n	8012e20 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8012e08:	2b00      	cmp	r3, #0
 8012e0a:	d011      	beq.n	8012e30 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8012e0c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8012e10:	d106      	bne.n	8012e20 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8012e12:	4bb7      	ldr	r3, [pc, #732]	@ (80130f0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8012e14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012e16:	4ab6      	ldr	r2, [pc, #728]	@ (80130f0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8012e18:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8012e1c:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8012e1e:	e008      	b.n	8012e32 <HAL_RCCEx_PeriphCLKConfig+0x107e>
 8012e20:	2301      	movs	r3, #1
 8012e22:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 8012e26:	e004      	b.n	8012e32 <HAL_RCCEx_PeriphCLKConfig+0x107e>
 8012e28:	bf00      	nop
 8012e2a:	e002      	b.n	8012e32 <HAL_RCCEx_PeriphCLKConfig+0x107e>
 8012e2c:	bf00      	nop
 8012e2e:	e000      	b.n	8012e32 <HAL_RCCEx_PeriphCLKConfig+0x107e>
 8012e30:	bf00      	nop
 8012e32:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012e36:	2b00      	cmp	r3, #0
 8012e38:	d10a      	bne.n	8012e50 <HAL_RCCEx_PeriphCLKConfig+0x109c>
 8012e3a:	4bad      	ldr	r3, [pc, #692]	@ (80130f0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8012e3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012e3e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8012e42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012e46:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8012e48:	4aa9      	ldr	r2, [pc, #676]	@ (80130f0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8012e4a:	430b      	orrs	r3, r1
 8012e4c:	6553      	str	r3, [r2, #84]	@ 0x54
 8012e4e:	e003      	b.n	8012e58 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
 8012e50:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012e54:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8012e58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e60:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8012e64:	653b      	str	r3, [r7, #80]	@ 0x50
 8012e66:	2300      	movs	r3, #0
 8012e68:	657b      	str	r3, [r7, #84]	@ 0x54
 8012e6a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8012e6e:	460b      	mov	r3, r1
 8012e70:	4313      	orrs	r3, r2
 8012e72:	d009      	beq.n	8012e88 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
 8012e74:	4b9e      	ldr	r3, [pc, #632]	@ (80130f0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8012e76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012e78:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8012e7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012e80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012e82:	4a9b      	ldr	r2, [pc, #620]	@ (80130f0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8012e84:	430b      	orrs	r3, r1
 8012e86:	6513      	str	r3, [r2, #80]	@ 0x50
 8012e88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e90:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8012e94:	64bb      	str	r3, [r7, #72]	@ 0x48
 8012e96:	2300      	movs	r3, #0
 8012e98:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8012e9a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8012e9e:	460b      	mov	r3, r1
 8012ea0:	4313      	orrs	r3, r2
 8012ea2:	d009      	beq.n	8012eb8 <HAL_RCCEx_PeriphCLKConfig+0x1104>
 8012ea4:	4b92      	ldr	r3, [pc, #584]	@ (80130f0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8012ea6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012ea8:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8012eac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012eb0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8012eb2:	4a8f      	ldr	r2, [pc, #572]	@ (80130f0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8012eb4:	430b      	orrs	r3, r1
 8012eb6:	6513      	str	r3, [r2, #80]	@ 0x50
 8012eb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ec0:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8012ec4:	643b      	str	r3, [r7, #64]	@ 0x40
 8012ec6:	2300      	movs	r3, #0
 8012ec8:	647b      	str	r3, [r7, #68]	@ 0x44
 8012eca:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8012ece:	460b      	mov	r3, r1
 8012ed0:	4313      	orrs	r3, r2
 8012ed2:	d00e      	beq.n	8012ef2 <HAL_RCCEx_PeriphCLKConfig+0x113e>
 8012ed4:	4b86      	ldr	r3, [pc, #536]	@ (80130f0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8012ed6:	691b      	ldr	r3, [r3, #16]
 8012ed8:	4a85      	ldr	r2, [pc, #532]	@ (80130f0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8012eda:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8012ede:	6113      	str	r3, [r2, #16]
 8012ee0:	4b83      	ldr	r3, [pc, #524]	@ (80130f0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8012ee2:	6919      	ldr	r1, [r3, #16]
 8012ee4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012ee8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8012eec:	4a80      	ldr	r2, [pc, #512]	@ (80130f0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8012eee:	430b      	orrs	r3, r1
 8012ef0:	6113      	str	r3, [r2, #16]
 8012ef2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012efa:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8012efe:	63bb      	str	r3, [r7, #56]	@ 0x38
 8012f00:	2300      	movs	r3, #0
 8012f02:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8012f04:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8012f08:	460b      	mov	r3, r1
 8012f0a:	4313      	orrs	r3, r2
 8012f0c:	d009      	beq.n	8012f22 <HAL_RCCEx_PeriphCLKConfig+0x116e>
 8012f0e:	4b78      	ldr	r3, [pc, #480]	@ (80130f0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8012f10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012f12:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8012f16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012f1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012f1c:	4a74      	ldr	r2, [pc, #464]	@ (80130f0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8012f1e:	430b      	orrs	r3, r1
 8012f20:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8012f22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f2a:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8012f2e:	633b      	str	r3, [r7, #48]	@ 0x30
 8012f30:	2300      	movs	r3, #0
 8012f32:	637b      	str	r3, [r7, #52]	@ 0x34
 8012f34:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8012f38:	460b      	mov	r3, r1
 8012f3a:	4313      	orrs	r3, r2
 8012f3c:	d00a      	beq.n	8012f54 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
 8012f3e:	4b6c      	ldr	r3, [pc, #432]	@ (80130f0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8012f40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012f42:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8012f46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012f4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8012f4e:	4a68      	ldr	r2, [pc, #416]	@ (80130f0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8012f50:	430b      	orrs	r3, r1
 8012f52:	6553      	str	r3, [r2, #84]	@ 0x54
 8012f54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012f58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f5c:	2100      	movs	r1, #0
 8012f5e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8012f60:	f003 0301 	and.w	r3, r3, #1
 8012f64:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8012f66:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8012f6a:	460b      	mov	r3, r1
 8012f6c:	4313      	orrs	r3, r2
 8012f6e:	d011      	beq.n	8012f94 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
 8012f70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012f74:	3308      	adds	r3, #8
 8012f76:	2100      	movs	r1, #0
 8012f78:	4618      	mov	r0, r3
 8012f7a:	f001 f99d 	bl	80142b8 <RCCEx_PLL2_Config>
 8012f7e:	4603      	mov	r3, r0
 8012f80:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 8012f84:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012f88:	2b00      	cmp	r3, #0
 8012f8a:	d003      	beq.n	8012f94 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
 8012f8c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012f90:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8012f94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f9c:	2100      	movs	r1, #0
 8012f9e:	6239      	str	r1, [r7, #32]
 8012fa0:	f003 0302 	and.w	r3, r3, #2
 8012fa4:	627b      	str	r3, [r7, #36]	@ 0x24
 8012fa6:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8012faa:	460b      	mov	r3, r1
 8012fac:	4313      	orrs	r3, r2
 8012fae:	d011      	beq.n	8012fd4 <HAL_RCCEx_PeriphCLKConfig+0x1220>
 8012fb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012fb4:	3308      	adds	r3, #8
 8012fb6:	2101      	movs	r1, #1
 8012fb8:	4618      	mov	r0, r3
 8012fba:	f001 f97d 	bl	80142b8 <RCCEx_PLL2_Config>
 8012fbe:	4603      	mov	r3, r0
 8012fc0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 8012fc4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012fc8:	2b00      	cmp	r3, #0
 8012fca:	d003      	beq.n	8012fd4 <HAL_RCCEx_PeriphCLKConfig+0x1220>
 8012fcc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012fd0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8012fd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012fdc:	2100      	movs	r1, #0
 8012fde:	61b9      	str	r1, [r7, #24]
 8012fe0:	f003 0304 	and.w	r3, r3, #4
 8012fe4:	61fb      	str	r3, [r7, #28]
 8012fe6:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8012fea:	460b      	mov	r3, r1
 8012fec:	4313      	orrs	r3, r2
 8012fee:	d011      	beq.n	8013014 <HAL_RCCEx_PeriphCLKConfig+0x1260>
 8012ff0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012ff4:	3308      	adds	r3, #8
 8012ff6:	2102      	movs	r1, #2
 8012ff8:	4618      	mov	r0, r3
 8012ffa:	f001 f95d 	bl	80142b8 <RCCEx_PLL2_Config>
 8012ffe:	4603      	mov	r3, r0
 8013000:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 8013004:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8013008:	2b00      	cmp	r3, #0
 801300a:	d003      	beq.n	8013014 <HAL_RCCEx_PeriphCLKConfig+0x1260>
 801300c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8013010:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8013014:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8013018:	e9d3 2300 	ldrd	r2, r3, [r3]
 801301c:	2100      	movs	r1, #0
 801301e:	6139      	str	r1, [r7, #16]
 8013020:	f003 0308 	and.w	r3, r3, #8
 8013024:	617b      	str	r3, [r7, #20]
 8013026:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 801302a:	460b      	mov	r3, r1
 801302c:	4313      	orrs	r3, r2
 801302e:	d011      	beq.n	8013054 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
 8013030:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8013034:	3328      	adds	r3, #40	@ 0x28
 8013036:	2100      	movs	r1, #0
 8013038:	4618      	mov	r0, r3
 801303a:	f001 f9ef 	bl	801441c <RCCEx_PLL3_Config>
 801303e:	4603      	mov	r3, r0
 8013040:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 8013044:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8013048:	2b00      	cmp	r3, #0
 801304a:	d003      	beq.n	8013054 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
 801304c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8013050:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8013054:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8013058:	e9d3 2300 	ldrd	r2, r3, [r3]
 801305c:	2100      	movs	r1, #0
 801305e:	60b9      	str	r1, [r7, #8]
 8013060:	f003 0310 	and.w	r3, r3, #16
 8013064:	60fb      	str	r3, [r7, #12]
 8013066:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 801306a:	460b      	mov	r3, r1
 801306c:	4313      	orrs	r3, r2
 801306e:	d011      	beq.n	8013094 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
 8013070:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8013074:	3328      	adds	r3, #40	@ 0x28
 8013076:	2101      	movs	r1, #1
 8013078:	4618      	mov	r0, r3
 801307a:	f001 f9cf 	bl	801441c <RCCEx_PLL3_Config>
 801307e:	4603      	mov	r3, r0
 8013080:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 8013084:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8013088:	2b00      	cmp	r3, #0
 801308a:	d003      	beq.n	8013094 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
 801308c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8013090:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8013094:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8013098:	e9d3 2300 	ldrd	r2, r3, [r3]
 801309c:	2100      	movs	r1, #0
 801309e:	6039      	str	r1, [r7, #0]
 80130a0:	f003 0320 	and.w	r3, r3, #32
 80130a4:	607b      	str	r3, [r7, #4]
 80130a6:	e9d7 1200 	ldrd	r1, r2, [r7]
 80130aa:	460b      	mov	r3, r1
 80130ac:	4313      	orrs	r3, r2
 80130ae:	d011      	beq.n	80130d4 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 80130b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80130b4:	3328      	adds	r3, #40	@ 0x28
 80130b6:	2102      	movs	r1, #2
 80130b8:	4618      	mov	r0, r3
 80130ba:	f001 f9af 	bl	801441c <RCCEx_PLL3_Config>
 80130be:	4603      	mov	r3, r0
 80130c0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 80130c4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80130c8:	2b00      	cmp	r3, #0
 80130ca:	d003      	beq.n	80130d4 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 80130cc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80130d0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 80130d4:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 80130d8:	2b00      	cmp	r3, #0
 80130da:	d101      	bne.n	80130e0 <HAL_RCCEx_PeriphCLKConfig+0x132c>
 80130dc:	2300      	movs	r3, #0
 80130de:	e000      	b.n	80130e2 <HAL_RCCEx_PeriphCLKConfig+0x132e>
 80130e0:	2301      	movs	r3, #1
 80130e2:	4618      	mov	r0, r3
 80130e4:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 80130e8:	46bd      	mov	sp, r7
 80130ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80130ee:	bf00      	nop
 80130f0:	58024400 	.word	0x58024400

080130f4 <HAL_RCCEx_GetPeriphCLKFreq>:
 80130f4:	b580      	push	{r7, lr}
 80130f6:	b090      	sub	sp, #64	@ 0x40
 80130f8:	af00      	add	r7, sp, #0
 80130fa:	e9c7 0100 	strd	r0, r1, [r7]
 80130fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013102:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8013106:	430b      	orrs	r3, r1
 8013108:	f040 8094 	bne.w	8013234 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
 801310c:	4b9b      	ldr	r3, [pc, #620]	@ (801337c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801310e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8013110:	f003 0307 	and.w	r3, r3, #7
 8013114:	633b      	str	r3, [r7, #48]	@ 0x30
 8013116:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013118:	2b04      	cmp	r3, #4
 801311a:	f200 8087 	bhi.w	801322c <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 801311e:	a201      	add	r2, pc, #4	@ (adr r2, 8013124 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8013120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013124:	08013139 	.word	0x08013139
 8013128:	08013161 	.word	0x08013161
 801312c:	08013189 	.word	0x08013189
 8013130:	08013225 	.word	0x08013225
 8013134:	080131b1 	.word	0x080131b1
 8013138:	4b90      	ldr	r3, [pc, #576]	@ (801337c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801313a:	681b      	ldr	r3, [r3, #0]
 801313c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8013140:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8013144:	d108      	bne.n	8013158 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 8013146:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801314a:	4618      	mov	r0, r3
 801314c:	f000 ff62 	bl	8014014 <HAL_RCCEx_GetPLL1ClockFreq>
 8013150:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013152:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013154:	f000 bc93 	b.w	8013a7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8013158:	2300      	movs	r3, #0
 801315a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801315c:	f000 bc8f 	b.w	8013a7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8013160:	4b86      	ldr	r3, [pc, #536]	@ (801337c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8013162:	681b      	ldr	r3, [r3, #0]
 8013164:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8013168:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 801316c:	d108      	bne.n	8013180 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
 801316e:	f107 0318 	add.w	r3, r7, #24
 8013172:	4618      	mov	r0, r3
 8013174:	f000 fca6 	bl	8013ac4 <HAL_RCCEx_GetPLL2ClockFreq>
 8013178:	69bb      	ldr	r3, [r7, #24]
 801317a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801317c:	f000 bc7f 	b.w	8013a7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8013180:	2300      	movs	r3, #0
 8013182:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013184:	f000 bc7b 	b.w	8013a7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8013188:	4b7c      	ldr	r3, [pc, #496]	@ (801337c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801318a:	681b      	ldr	r3, [r3, #0]
 801318c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8013190:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8013194:	d108      	bne.n	80131a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
 8013196:	f107 030c 	add.w	r3, r7, #12
 801319a:	4618      	mov	r0, r3
 801319c:	f000 fde6 	bl	8013d6c <HAL_RCCEx_GetPLL3ClockFreq>
 80131a0:	68fb      	ldr	r3, [r7, #12]
 80131a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80131a4:	f000 bc6b 	b.w	8013a7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80131a8:	2300      	movs	r3, #0
 80131aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80131ac:	f000 bc67 	b.w	8013a7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80131b0:	4b72      	ldr	r3, [pc, #456]	@ (801337c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80131b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80131b4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80131b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80131ba:	4b70      	ldr	r3, [pc, #448]	@ (801337c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80131bc:	681b      	ldr	r3, [r3, #0]
 80131be:	f003 0304 	and.w	r3, r3, #4
 80131c2:	2b04      	cmp	r3, #4
 80131c4:	d10c      	bne.n	80131e0 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80131c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80131c8:	2b00      	cmp	r3, #0
 80131ca:	d109      	bne.n	80131e0 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80131cc:	4b6b      	ldr	r3, [pc, #428]	@ (801337c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80131ce:	681b      	ldr	r3, [r3, #0]
 80131d0:	08db      	lsrs	r3, r3, #3
 80131d2:	f003 0303 	and.w	r3, r3, #3
 80131d6:	4a6a      	ldr	r2, [pc, #424]	@ (8013380 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 80131d8:	fa22 f303 	lsr.w	r3, r2, r3
 80131dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80131de:	e01f      	b.n	8013220 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 80131e0:	4b66      	ldr	r3, [pc, #408]	@ (801337c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80131e2:	681b      	ldr	r3, [r3, #0]
 80131e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80131e8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80131ec:	d106      	bne.n	80131fc <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 80131ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80131f0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80131f4:	d102      	bne.n	80131fc <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 80131f6:	4b63      	ldr	r3, [pc, #396]	@ (8013384 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80131f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80131fa:	e011      	b.n	8013220 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 80131fc:	4b5f      	ldr	r3, [pc, #380]	@ (801337c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80131fe:	681b      	ldr	r3, [r3, #0]
 8013200:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8013204:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8013208:	d106      	bne.n	8013218 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 801320a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801320c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8013210:	d102      	bne.n	8013218 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8013212:	4b5d      	ldr	r3, [pc, #372]	@ (8013388 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8013214:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013216:	e003      	b.n	8013220 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 8013218:	2300      	movs	r3, #0
 801321a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801321c:	f000 bc2f 	b.w	8013a7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8013220:	f000 bc2d 	b.w	8013a7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8013224:	4b59      	ldr	r3, [pc, #356]	@ (801338c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8013226:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013228:	f000 bc29 	b.w	8013a7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 801322c:	2300      	movs	r3, #0
 801322e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013230:	f000 bc25 	b.w	8013a7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8013234:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013238:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 801323c:	430b      	orrs	r3, r1
 801323e:	f040 80a7 	bne.w	8013390 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
 8013242:	4b4e      	ldr	r3, [pc, #312]	@ (801337c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8013244:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8013246:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 801324a:	633b      	str	r3, [r7, #48]	@ 0x30
 801324c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801324e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8013252:	d054      	beq.n	80132fe <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 8013254:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013256:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 801325a:	f200 808b 	bhi.w	8013374 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 801325e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013260:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8013264:	f000 8083 	beq.w	801336e <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 8013268:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801326a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 801326e:	f200 8081 	bhi.w	8013374 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8013272:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013274:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8013278:	d02f      	beq.n	80132da <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 801327a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801327c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8013280:	d878      	bhi.n	8013374 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8013282:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013284:	2b00      	cmp	r3, #0
 8013286:	d004      	beq.n	8013292 <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 8013288:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801328a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801328e:	d012      	beq.n	80132b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 8013290:	e070      	b.n	8013374 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8013292:	4b3a      	ldr	r3, [pc, #232]	@ (801337c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8013294:	681b      	ldr	r3, [r3, #0]
 8013296:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801329a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801329e:	d107      	bne.n	80132b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 80132a0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80132a4:	4618      	mov	r0, r3
 80132a6:	f000 feb5 	bl	8014014 <HAL_RCCEx_GetPLL1ClockFreq>
 80132aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80132ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80132ae:	e3e6      	b.n	8013a7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80132b0:	2300      	movs	r3, #0
 80132b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80132b4:	e3e3      	b.n	8013a7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80132b6:	4b31      	ldr	r3, [pc, #196]	@ (801337c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80132b8:	681b      	ldr	r3, [r3, #0]
 80132ba:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80132be:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80132c2:	d107      	bne.n	80132d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 80132c4:	f107 0318 	add.w	r3, r7, #24
 80132c8:	4618      	mov	r0, r3
 80132ca:	f000 fbfb 	bl	8013ac4 <HAL_RCCEx_GetPLL2ClockFreq>
 80132ce:	69bb      	ldr	r3, [r7, #24]
 80132d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80132d2:	e3d4      	b.n	8013a7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80132d4:	2300      	movs	r3, #0
 80132d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80132d8:	e3d1      	b.n	8013a7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80132da:	4b28      	ldr	r3, [pc, #160]	@ (801337c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80132dc:	681b      	ldr	r3, [r3, #0]
 80132de:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80132e2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80132e6:	d107      	bne.n	80132f8 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
 80132e8:	f107 030c 	add.w	r3, r7, #12
 80132ec:	4618      	mov	r0, r3
 80132ee:	f000 fd3d 	bl	8013d6c <HAL_RCCEx_GetPLL3ClockFreq>
 80132f2:	68fb      	ldr	r3, [r7, #12]
 80132f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80132f6:	e3c2      	b.n	8013a7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80132f8:	2300      	movs	r3, #0
 80132fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80132fc:	e3bf      	b.n	8013a7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80132fe:	4b1f      	ldr	r3, [pc, #124]	@ (801337c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8013300:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013302:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8013306:	637b      	str	r3, [r7, #52]	@ 0x34
 8013308:	4b1c      	ldr	r3, [pc, #112]	@ (801337c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801330a:	681b      	ldr	r3, [r3, #0]
 801330c:	f003 0304 	and.w	r3, r3, #4
 8013310:	2b04      	cmp	r3, #4
 8013312:	d10c      	bne.n	801332e <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 8013314:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013316:	2b00      	cmp	r3, #0
 8013318:	d109      	bne.n	801332e <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 801331a:	4b18      	ldr	r3, [pc, #96]	@ (801337c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801331c:	681b      	ldr	r3, [r3, #0]
 801331e:	08db      	lsrs	r3, r3, #3
 8013320:	f003 0303 	and.w	r3, r3, #3
 8013324:	4a16      	ldr	r2, [pc, #88]	@ (8013380 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8013326:	fa22 f303 	lsr.w	r3, r2, r3
 801332a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801332c:	e01e      	b.n	801336c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
 801332e:	4b13      	ldr	r3, [pc, #76]	@ (801337c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8013330:	681b      	ldr	r3, [r3, #0]
 8013332:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8013336:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801333a:	d106      	bne.n	801334a <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 801333c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801333e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8013342:	d102      	bne.n	801334a <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 8013344:	4b0f      	ldr	r3, [pc, #60]	@ (8013384 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8013346:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013348:	e010      	b.n	801336c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
 801334a:	4b0c      	ldr	r3, [pc, #48]	@ (801337c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801334c:	681b      	ldr	r3, [r3, #0]
 801334e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8013352:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8013356:	d106      	bne.n	8013366 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8013358:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801335a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801335e:	d102      	bne.n	8013366 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8013360:	4b09      	ldr	r3, [pc, #36]	@ (8013388 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8013362:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013364:	e002      	b.n	801336c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
 8013366:	2300      	movs	r3, #0
 8013368:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801336a:	e388      	b.n	8013a7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 801336c:	e387      	b.n	8013a7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 801336e:	4b07      	ldr	r3, [pc, #28]	@ (801338c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8013370:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013372:	e384      	b.n	8013a7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8013374:	2300      	movs	r3, #0
 8013376:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013378:	e381      	b.n	8013a7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 801337a:	bf00      	nop
 801337c:	58024400 	.word	0x58024400
 8013380:	03d09000 	.word	0x03d09000
 8013384:	003d0900 	.word	0x003d0900
 8013388:	016e3600 	.word	0x016e3600
 801338c:	00bb8000 	.word	0x00bb8000
 8013390:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013394:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8013398:	430b      	orrs	r3, r1
 801339a:	f040 809c 	bne.w	80134d6 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 801339e:	4b9e      	ldr	r3, [pc, #632]	@ (8013618 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80133a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80133a2:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 80133a6:	633b      	str	r3, [r7, #48]	@ 0x30
 80133a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80133aa:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80133ae:	d054      	beq.n	801345a <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 80133b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80133b2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80133b6:	f200 808b 	bhi.w	80134d0 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 80133ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80133bc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80133c0:	f000 8083 	beq.w	80134ca <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 80133c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80133c6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80133ca:	f200 8081 	bhi.w	80134d0 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 80133ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80133d0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80133d4:	d02f      	beq.n	8013436 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 80133d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80133d8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80133dc:	d878      	bhi.n	80134d0 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 80133de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80133e0:	2b00      	cmp	r3, #0
 80133e2:	d004      	beq.n	80133ee <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 80133e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80133e6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80133ea:	d012      	beq.n	8013412 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 80133ec:	e070      	b.n	80134d0 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 80133ee:	4b8a      	ldr	r3, [pc, #552]	@ (8013618 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80133f0:	681b      	ldr	r3, [r3, #0]
 80133f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80133f6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80133fa:	d107      	bne.n	801340c <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 80133fc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8013400:	4618      	mov	r0, r3
 8013402:	f000 fe07 	bl	8014014 <HAL_RCCEx_GetPLL1ClockFreq>
 8013406:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013408:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801340a:	e338      	b.n	8013a7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 801340c:	2300      	movs	r3, #0
 801340e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013410:	e335      	b.n	8013a7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8013412:	4b81      	ldr	r3, [pc, #516]	@ (8013618 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8013414:	681b      	ldr	r3, [r3, #0]
 8013416:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801341a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 801341e:	d107      	bne.n	8013430 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
 8013420:	f107 0318 	add.w	r3, r7, #24
 8013424:	4618      	mov	r0, r3
 8013426:	f000 fb4d 	bl	8013ac4 <HAL_RCCEx_GetPLL2ClockFreq>
 801342a:	69bb      	ldr	r3, [r7, #24]
 801342c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801342e:	e326      	b.n	8013a7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8013430:	2300      	movs	r3, #0
 8013432:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013434:	e323      	b.n	8013a7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8013436:	4b78      	ldr	r3, [pc, #480]	@ (8013618 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8013438:	681b      	ldr	r3, [r3, #0]
 801343a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801343e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8013442:	d107      	bne.n	8013454 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
 8013444:	f107 030c 	add.w	r3, r7, #12
 8013448:	4618      	mov	r0, r3
 801344a:	f000 fc8f 	bl	8013d6c <HAL_RCCEx_GetPLL3ClockFreq>
 801344e:	68fb      	ldr	r3, [r7, #12]
 8013450:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013452:	e314      	b.n	8013a7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8013454:	2300      	movs	r3, #0
 8013456:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013458:	e311      	b.n	8013a7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 801345a:	4b6f      	ldr	r3, [pc, #444]	@ (8013618 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801345c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801345e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8013462:	637b      	str	r3, [r7, #52]	@ 0x34
 8013464:	4b6c      	ldr	r3, [pc, #432]	@ (8013618 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8013466:	681b      	ldr	r3, [r3, #0]
 8013468:	f003 0304 	and.w	r3, r3, #4
 801346c:	2b04      	cmp	r3, #4
 801346e:	d10c      	bne.n	801348a <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 8013470:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013472:	2b00      	cmp	r3, #0
 8013474:	d109      	bne.n	801348a <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 8013476:	4b68      	ldr	r3, [pc, #416]	@ (8013618 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8013478:	681b      	ldr	r3, [r3, #0]
 801347a:	08db      	lsrs	r3, r3, #3
 801347c:	f003 0303 	and.w	r3, r3, #3
 8013480:	4a66      	ldr	r2, [pc, #408]	@ (801361c <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 8013482:	fa22 f303 	lsr.w	r3, r2, r3
 8013486:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013488:	e01e      	b.n	80134c8 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
 801348a:	4b63      	ldr	r3, [pc, #396]	@ (8013618 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801348c:	681b      	ldr	r3, [r3, #0]
 801348e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8013492:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8013496:	d106      	bne.n	80134a6 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8013498:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801349a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801349e:	d102      	bne.n	80134a6 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 80134a0:	4b5f      	ldr	r3, [pc, #380]	@ (8013620 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 80134a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80134a4:	e010      	b.n	80134c8 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
 80134a6:	4b5c      	ldr	r3, [pc, #368]	@ (8013618 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80134a8:	681b      	ldr	r3, [r3, #0]
 80134aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80134ae:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80134b2:	d106      	bne.n	80134c2 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 80134b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80134b6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80134ba:	d102      	bne.n	80134c2 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 80134bc:	4b59      	ldr	r3, [pc, #356]	@ (8013624 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80134be:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80134c0:	e002      	b.n	80134c8 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
 80134c2:	2300      	movs	r3, #0
 80134c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80134c6:	e2da      	b.n	8013a7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80134c8:	e2d9      	b.n	8013a7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80134ca:	4b57      	ldr	r3, [pc, #348]	@ (8013628 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80134cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80134ce:	e2d6      	b.n	8013a7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80134d0:	2300      	movs	r3, #0
 80134d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80134d4:	e2d3      	b.n	8013a7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80134d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80134da:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 80134de:	430b      	orrs	r3, r1
 80134e0:	f040 80a7 	bne.w	8013632 <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
 80134e4:	4b4c      	ldr	r3, [pc, #304]	@ (8013618 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80134e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80134e8:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80134ec:	63bb      	str	r3, [r7, #56]	@ 0x38
 80134ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80134f0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80134f4:	d055      	beq.n	80135a2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 80134f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80134f8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80134fc:	f200 8096 	bhi.w	801362c <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8013500:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013502:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8013506:	f000 8084 	beq.w	8013612 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 801350a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801350c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8013510:	f200 808c 	bhi.w	801362c <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8013514:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013516:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801351a:	d030      	beq.n	801357e <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 801351c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801351e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8013522:	f200 8083 	bhi.w	801362c <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8013526:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013528:	2b00      	cmp	r3, #0
 801352a:	d004      	beq.n	8013536 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 801352c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801352e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8013532:	d012      	beq.n	801355a <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 8013534:	e07a      	b.n	801362c <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8013536:	4b38      	ldr	r3, [pc, #224]	@ (8013618 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8013538:	681b      	ldr	r3, [r3, #0]
 801353a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801353e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8013542:	d107      	bne.n	8013554 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
 8013544:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8013548:	4618      	mov	r0, r3
 801354a:	f000 fd63 	bl	8014014 <HAL_RCCEx_GetPLL1ClockFreq>
 801354e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013550:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013552:	e294      	b.n	8013a7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8013554:	2300      	movs	r3, #0
 8013556:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013558:	e291      	b.n	8013a7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 801355a:	4b2f      	ldr	r3, [pc, #188]	@ (8013618 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801355c:	681b      	ldr	r3, [r3, #0]
 801355e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8013562:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8013566:	d107      	bne.n	8013578 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
 8013568:	f107 0318 	add.w	r3, r7, #24
 801356c:	4618      	mov	r0, r3
 801356e:	f000 faa9 	bl	8013ac4 <HAL_RCCEx_GetPLL2ClockFreq>
 8013572:	69bb      	ldr	r3, [r7, #24]
 8013574:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013576:	e282      	b.n	8013a7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8013578:	2300      	movs	r3, #0
 801357a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801357c:	e27f      	b.n	8013a7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 801357e:	4b26      	ldr	r3, [pc, #152]	@ (8013618 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8013580:	681b      	ldr	r3, [r3, #0]
 8013582:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8013586:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801358a:	d107      	bne.n	801359c <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
 801358c:	f107 030c 	add.w	r3, r7, #12
 8013590:	4618      	mov	r0, r3
 8013592:	f000 fbeb 	bl	8013d6c <HAL_RCCEx_GetPLL3ClockFreq>
 8013596:	68fb      	ldr	r3, [r7, #12]
 8013598:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801359a:	e270      	b.n	8013a7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 801359c:	2300      	movs	r3, #0
 801359e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80135a0:	e26d      	b.n	8013a7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80135a2:	4b1d      	ldr	r3, [pc, #116]	@ (8013618 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80135a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80135a6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80135aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80135ac:	4b1a      	ldr	r3, [pc, #104]	@ (8013618 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80135ae:	681b      	ldr	r3, [r3, #0]
 80135b0:	f003 0304 	and.w	r3, r3, #4
 80135b4:	2b04      	cmp	r3, #4
 80135b6:	d10c      	bne.n	80135d2 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 80135b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80135ba:	2b00      	cmp	r3, #0
 80135bc:	d109      	bne.n	80135d2 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 80135be:	4b16      	ldr	r3, [pc, #88]	@ (8013618 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80135c0:	681b      	ldr	r3, [r3, #0]
 80135c2:	08db      	lsrs	r3, r3, #3
 80135c4:	f003 0303 	and.w	r3, r3, #3
 80135c8:	4a14      	ldr	r2, [pc, #80]	@ (801361c <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 80135ca:	fa22 f303 	lsr.w	r3, r2, r3
 80135ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80135d0:	e01e      	b.n	8013610 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
 80135d2:	4b11      	ldr	r3, [pc, #68]	@ (8013618 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80135d4:	681b      	ldr	r3, [r3, #0]
 80135d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80135da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80135de:	d106      	bne.n	80135ee <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 80135e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80135e2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80135e6:	d102      	bne.n	80135ee <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 80135e8:	4b0d      	ldr	r3, [pc, #52]	@ (8013620 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 80135ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80135ec:	e010      	b.n	8013610 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
 80135ee:	4b0a      	ldr	r3, [pc, #40]	@ (8013618 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80135f0:	681b      	ldr	r3, [r3, #0]
 80135f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80135f6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80135fa:	d106      	bne.n	801360a <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 80135fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80135fe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8013602:	d102      	bne.n	801360a <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 8013604:	4b07      	ldr	r3, [pc, #28]	@ (8013624 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8013606:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013608:	e002      	b.n	8013610 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
 801360a:	2300      	movs	r3, #0
 801360c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801360e:	e236      	b.n	8013a7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8013610:	e235      	b.n	8013a7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8013612:	4b05      	ldr	r3, [pc, #20]	@ (8013628 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8013614:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013616:	e232      	b.n	8013a7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8013618:	58024400 	.word	0x58024400
 801361c:	03d09000 	.word	0x03d09000
 8013620:	003d0900 	.word	0x003d0900
 8013624:	016e3600 	.word	0x016e3600
 8013628:	00bb8000 	.word	0x00bb8000
 801362c:	2300      	movs	r3, #0
 801362e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013630:	e225      	b.n	8013a7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8013632:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013636:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 801363a:	430b      	orrs	r3, r1
 801363c:	f040 8085 	bne.w	801374a <HAL_RCCEx_GetPeriphCLKFreq+0x656>
 8013640:	4b9c      	ldr	r3, [pc, #624]	@ (80138b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8013642:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8013644:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8013648:	63bb      	str	r3, [r7, #56]	@ 0x38
 801364a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801364c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8013650:	d06b      	beq.n	801372a <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 8013652:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013654:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8013658:	d874      	bhi.n	8013744 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 801365a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801365c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8013660:	d056      	beq.n	8013710 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 8013662:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013664:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8013668:	d86c      	bhi.n	8013744 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 801366a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801366c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8013670:	d03b      	beq.n	80136ea <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 8013672:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013674:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8013678:	d864      	bhi.n	8013744 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 801367a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801367c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8013680:	d021      	beq.n	80136c6 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 8013682:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013684:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8013688:	d85c      	bhi.n	8013744 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 801368a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801368c:	2b00      	cmp	r3, #0
 801368e:	d004      	beq.n	801369a <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 8013690:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013692:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8013696:	d004      	beq.n	80136a2 <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 8013698:	e054      	b.n	8013744 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 801369a:	f7fe fb5f 	bl	8011d5c <HAL_RCC_GetPCLK1Freq>
 801369e:	63f8      	str	r0, [r7, #60]	@ 0x3c
 80136a0:	e1ed      	b.n	8013a7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80136a2:	4b84      	ldr	r3, [pc, #528]	@ (80138b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80136a4:	681b      	ldr	r3, [r3, #0]
 80136a6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80136aa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80136ae:	d107      	bne.n	80136c0 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 80136b0:	f107 0318 	add.w	r3, r7, #24
 80136b4:	4618      	mov	r0, r3
 80136b6:	f000 fa05 	bl	8013ac4 <HAL_RCCEx_GetPLL2ClockFreq>
 80136ba:	69fb      	ldr	r3, [r7, #28]
 80136bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80136be:	e1de      	b.n	8013a7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80136c0:	2300      	movs	r3, #0
 80136c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80136c4:	e1db      	b.n	8013a7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80136c6:	4b7b      	ldr	r3, [pc, #492]	@ (80138b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80136c8:	681b      	ldr	r3, [r3, #0]
 80136ca:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80136ce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80136d2:	d107      	bne.n	80136e4 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 80136d4:	f107 030c 	add.w	r3, r7, #12
 80136d8:	4618      	mov	r0, r3
 80136da:	f000 fb47 	bl	8013d6c <HAL_RCCEx_GetPLL3ClockFreq>
 80136de:	693b      	ldr	r3, [r7, #16]
 80136e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80136e2:	e1cc      	b.n	8013a7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80136e4:	2300      	movs	r3, #0
 80136e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80136e8:	e1c9      	b.n	8013a7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80136ea:	4b72      	ldr	r3, [pc, #456]	@ (80138b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80136ec:	681b      	ldr	r3, [r3, #0]
 80136ee:	f003 0304 	and.w	r3, r3, #4
 80136f2:	2b04      	cmp	r3, #4
 80136f4:	d109      	bne.n	801370a <HAL_RCCEx_GetPeriphCLKFreq+0x616>
 80136f6:	4b6f      	ldr	r3, [pc, #444]	@ (80138b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80136f8:	681b      	ldr	r3, [r3, #0]
 80136fa:	08db      	lsrs	r3, r3, #3
 80136fc:	f003 0303 	and.w	r3, r3, #3
 8013700:	4a6d      	ldr	r2, [pc, #436]	@ (80138b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 8013702:	fa22 f303 	lsr.w	r3, r2, r3
 8013706:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013708:	e1b9      	b.n	8013a7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 801370a:	2300      	movs	r3, #0
 801370c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801370e:	e1b6      	b.n	8013a7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8013710:	4b68      	ldr	r3, [pc, #416]	@ (80138b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8013712:	681b      	ldr	r3, [r3, #0]
 8013714:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8013718:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801371c:	d102      	bne.n	8013724 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 801371e:	4b67      	ldr	r3, [pc, #412]	@ (80138bc <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 8013720:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013722:	e1ac      	b.n	8013a7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8013724:	2300      	movs	r3, #0
 8013726:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013728:	e1a9      	b.n	8013a7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 801372a:	4b62      	ldr	r3, [pc, #392]	@ (80138b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801372c:	681b      	ldr	r3, [r3, #0]
 801372e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8013732:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8013736:	d102      	bne.n	801373e <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
 8013738:	4b61      	ldr	r3, [pc, #388]	@ (80138c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 801373a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801373c:	e19f      	b.n	8013a7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 801373e:	2300      	movs	r3, #0
 8013740:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013742:	e19c      	b.n	8013a7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8013744:	2300      	movs	r3, #0
 8013746:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013748:	e199      	b.n	8013a7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 801374a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801374e:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8013752:	430b      	orrs	r3, r1
 8013754:	d173      	bne.n	801383e <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
 8013756:	4b57      	ldr	r3, [pc, #348]	@ (80138b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8013758:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801375a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 801375e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8013760:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013762:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8013766:	d02f      	beq.n	80137c8 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 8013768:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801376a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801376e:	d863      	bhi.n	8013838 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 8013770:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013772:	2b00      	cmp	r3, #0
 8013774:	d004      	beq.n	8013780 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 8013776:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013778:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801377c:	d012      	beq.n	80137a4 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 801377e:	e05b      	b.n	8013838 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 8013780:	4b4c      	ldr	r3, [pc, #304]	@ (80138b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8013782:	681b      	ldr	r3, [r3, #0]
 8013784:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8013788:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 801378c:	d107      	bne.n	801379e <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
 801378e:	f107 0318 	add.w	r3, r7, #24
 8013792:	4618      	mov	r0, r3
 8013794:	f000 f996 	bl	8013ac4 <HAL_RCCEx_GetPLL2ClockFreq>
 8013798:	69bb      	ldr	r3, [r7, #24]
 801379a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801379c:	e16f      	b.n	8013a7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 801379e:	2300      	movs	r3, #0
 80137a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80137a2:	e16c      	b.n	8013a7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80137a4:	4b43      	ldr	r3, [pc, #268]	@ (80138b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80137a6:	681b      	ldr	r3, [r3, #0]
 80137a8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80137ac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80137b0:	d107      	bne.n	80137c2 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
 80137b2:	f107 030c 	add.w	r3, r7, #12
 80137b6:	4618      	mov	r0, r3
 80137b8:	f000 fad8 	bl	8013d6c <HAL_RCCEx_GetPLL3ClockFreq>
 80137bc:	697b      	ldr	r3, [r7, #20]
 80137be:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80137c0:	e15d      	b.n	8013a7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80137c2:	2300      	movs	r3, #0
 80137c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80137c6:	e15a      	b.n	8013a7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80137c8:	4b3a      	ldr	r3, [pc, #232]	@ (80138b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80137ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80137cc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80137d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80137d2:	4b38      	ldr	r3, [pc, #224]	@ (80138b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80137d4:	681b      	ldr	r3, [r3, #0]
 80137d6:	f003 0304 	and.w	r3, r3, #4
 80137da:	2b04      	cmp	r3, #4
 80137dc:	d10c      	bne.n	80137f8 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 80137de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80137e0:	2b00      	cmp	r3, #0
 80137e2:	d109      	bne.n	80137f8 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 80137e4:	4b33      	ldr	r3, [pc, #204]	@ (80138b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80137e6:	681b      	ldr	r3, [r3, #0]
 80137e8:	08db      	lsrs	r3, r3, #3
 80137ea:	f003 0303 	and.w	r3, r3, #3
 80137ee:	4a32      	ldr	r2, [pc, #200]	@ (80138b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 80137f0:	fa22 f303 	lsr.w	r3, r2, r3
 80137f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80137f6:	e01e      	b.n	8013836 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
 80137f8:	4b2e      	ldr	r3, [pc, #184]	@ (80138b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80137fa:	681b      	ldr	r3, [r3, #0]
 80137fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8013800:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8013804:	d106      	bne.n	8013814 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 8013806:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013808:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801380c:	d102      	bne.n	8013814 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 801380e:	4b2b      	ldr	r3, [pc, #172]	@ (80138bc <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 8013810:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013812:	e010      	b.n	8013836 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
 8013814:	4b27      	ldr	r3, [pc, #156]	@ (80138b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8013816:	681b      	ldr	r3, [r3, #0]
 8013818:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801381c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8013820:	d106      	bne.n	8013830 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 8013822:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013824:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8013828:	d102      	bne.n	8013830 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 801382a:	4b25      	ldr	r3, [pc, #148]	@ (80138c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 801382c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801382e:	e002      	b.n	8013836 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
 8013830:	2300      	movs	r3, #0
 8013832:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013834:	e123      	b.n	8013a7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8013836:	e122      	b.n	8013a7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8013838:	2300      	movs	r3, #0
 801383a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801383c:	e11f      	b.n	8013a7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 801383e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013842:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8013846:	430b      	orrs	r3, r1
 8013848:	d13c      	bne.n	80138c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
 801384a:	4b1a      	ldr	r3, [pc, #104]	@ (80138b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801384c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801384e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8013852:	63bb      	str	r3, [r7, #56]	@ 0x38
 8013854:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013856:	2b00      	cmp	r3, #0
 8013858:	d004      	beq.n	8013864 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 801385a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801385c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8013860:	d012      	beq.n	8013888 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 8013862:	e023      	b.n	80138ac <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
 8013864:	4b13      	ldr	r3, [pc, #76]	@ (80138b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8013866:	681b      	ldr	r3, [r3, #0]
 8013868:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801386c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8013870:	d107      	bne.n	8013882 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
 8013872:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8013876:	4618      	mov	r0, r3
 8013878:	f000 fbcc 	bl	8014014 <HAL_RCCEx_GetPLL1ClockFreq>
 801387c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801387e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013880:	e0fd      	b.n	8013a7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8013882:	2300      	movs	r3, #0
 8013884:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013886:	e0fa      	b.n	8013a7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8013888:	4b0a      	ldr	r3, [pc, #40]	@ (80138b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801388a:	681b      	ldr	r3, [r3, #0]
 801388c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8013890:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8013894:	d107      	bne.n	80138a6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
 8013896:	f107 0318 	add.w	r3, r7, #24
 801389a:	4618      	mov	r0, r3
 801389c:	f000 f912 	bl	8013ac4 <HAL_RCCEx_GetPLL2ClockFreq>
 80138a0:	6a3b      	ldr	r3, [r7, #32]
 80138a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80138a4:	e0eb      	b.n	8013a7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80138a6:	2300      	movs	r3, #0
 80138a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80138aa:	e0e8      	b.n	8013a7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80138ac:	2300      	movs	r3, #0
 80138ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80138b0:	e0e5      	b.n	8013a7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80138b2:	bf00      	nop
 80138b4:	58024400 	.word	0x58024400
 80138b8:	03d09000 	.word	0x03d09000
 80138bc:	003d0900 	.word	0x003d0900
 80138c0:	016e3600 	.word	0x016e3600
 80138c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80138c8:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 80138cc:	430b      	orrs	r3, r1
 80138ce:	f040 8085 	bne.w	80139dc <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
 80138d2:	4b6d      	ldr	r3, [pc, #436]	@ (8013a88 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80138d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80138d6:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 80138da:	63bb      	str	r3, [r7, #56]	@ 0x38
 80138dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80138de:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80138e2:	d06b      	beq.n	80139bc <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 80138e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80138e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80138ea:	d874      	bhi.n	80139d6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 80138ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80138ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80138f2:	d056      	beq.n	80139a2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 80138f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80138f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80138fa:	d86c      	bhi.n	80139d6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 80138fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80138fe:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8013902:	d03b      	beq.n	801397c <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 8013904:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013906:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 801390a:	d864      	bhi.n	80139d6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 801390c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801390e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8013912:	d021      	beq.n	8013958 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 8013914:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013916:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801391a:	d85c      	bhi.n	80139d6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 801391c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801391e:	2b00      	cmp	r3, #0
 8013920:	d004      	beq.n	801392c <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 8013922:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013924:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8013928:	d004      	beq.n	8013934 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 801392a:	e054      	b.n	80139d6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 801392c:	f000 f8b4 	bl	8013a98 <HAL_RCCEx_GetD3PCLK1Freq>
 8013930:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8013932:	e0a4      	b.n	8013a7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8013934:	4b54      	ldr	r3, [pc, #336]	@ (8013a88 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8013936:	681b      	ldr	r3, [r3, #0]
 8013938:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801393c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8013940:	d107      	bne.n	8013952 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
 8013942:	f107 0318 	add.w	r3, r7, #24
 8013946:	4618      	mov	r0, r3
 8013948:	f000 f8bc 	bl	8013ac4 <HAL_RCCEx_GetPLL2ClockFreq>
 801394c:	69fb      	ldr	r3, [r7, #28]
 801394e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013950:	e095      	b.n	8013a7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8013952:	2300      	movs	r3, #0
 8013954:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013956:	e092      	b.n	8013a7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8013958:	4b4b      	ldr	r3, [pc, #300]	@ (8013a88 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 801395a:	681b      	ldr	r3, [r3, #0]
 801395c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8013960:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8013964:	d107      	bne.n	8013976 <HAL_RCCEx_GetPeriphCLKFreq+0x882>
 8013966:	f107 030c 	add.w	r3, r7, #12
 801396a:	4618      	mov	r0, r3
 801396c:	f000 f9fe 	bl	8013d6c <HAL_RCCEx_GetPLL3ClockFreq>
 8013970:	693b      	ldr	r3, [r7, #16]
 8013972:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013974:	e083      	b.n	8013a7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8013976:	2300      	movs	r3, #0
 8013978:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801397a:	e080      	b.n	8013a7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 801397c:	4b42      	ldr	r3, [pc, #264]	@ (8013a88 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 801397e:	681b      	ldr	r3, [r3, #0]
 8013980:	f003 0304 	and.w	r3, r3, #4
 8013984:	2b04      	cmp	r3, #4
 8013986:	d109      	bne.n	801399c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
 8013988:	4b3f      	ldr	r3, [pc, #252]	@ (8013a88 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 801398a:	681b      	ldr	r3, [r3, #0]
 801398c:	08db      	lsrs	r3, r3, #3
 801398e:	f003 0303 	and.w	r3, r3, #3
 8013992:	4a3e      	ldr	r2, [pc, #248]	@ (8013a8c <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8013994:	fa22 f303 	lsr.w	r3, r2, r3
 8013998:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801399a:	e070      	b.n	8013a7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 801399c:	2300      	movs	r3, #0
 801399e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80139a0:	e06d      	b.n	8013a7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80139a2:	4b39      	ldr	r3, [pc, #228]	@ (8013a88 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80139a4:	681b      	ldr	r3, [r3, #0]
 80139a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80139aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80139ae:	d102      	bne.n	80139b6 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
 80139b0:	4b37      	ldr	r3, [pc, #220]	@ (8013a90 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80139b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80139b4:	e063      	b.n	8013a7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80139b6:	2300      	movs	r3, #0
 80139b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80139ba:	e060      	b.n	8013a7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80139bc:	4b32      	ldr	r3, [pc, #200]	@ (8013a88 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80139be:	681b      	ldr	r3, [r3, #0]
 80139c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80139c4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80139c8:	d102      	bne.n	80139d0 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
 80139ca:	4b32      	ldr	r3, [pc, #200]	@ (8013a94 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 80139cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80139ce:	e056      	b.n	8013a7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80139d0:	2300      	movs	r3, #0
 80139d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80139d4:	e053      	b.n	8013a7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80139d6:	2300      	movs	r3, #0
 80139d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80139da:	e050      	b.n	8013a7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80139dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80139e0:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 80139e4:	430b      	orrs	r3, r1
 80139e6:	d148      	bne.n	8013a7a <HAL_RCCEx_GetPeriphCLKFreq+0x986>
 80139e8:	4b27      	ldr	r3, [pc, #156]	@ (8013a88 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80139ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80139ec:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80139f0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80139f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80139f4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80139f8:	d02a      	beq.n	8013a50 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 80139fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80139fc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8013a00:	d838      	bhi.n	8013a74 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 8013a02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013a04:	2b00      	cmp	r3, #0
 8013a06:	d004      	beq.n	8013a12 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8013a08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013a0a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8013a0e:	d00d      	beq.n	8013a2c <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 8013a10:	e030      	b.n	8013a74 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 8013a12:	4b1d      	ldr	r3, [pc, #116]	@ (8013a88 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8013a14:	681b      	ldr	r3, [r3, #0]
 8013a16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8013a1a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8013a1e:	d102      	bne.n	8013a26 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
 8013a20:	4b1c      	ldr	r3, [pc, #112]	@ (8013a94 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8013a22:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013a24:	e02b      	b.n	8013a7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8013a26:	2300      	movs	r3, #0
 8013a28:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013a2a:	e028      	b.n	8013a7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8013a2c:	4b16      	ldr	r3, [pc, #88]	@ (8013a88 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8013a2e:	681b      	ldr	r3, [r3, #0]
 8013a30:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8013a34:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8013a38:	d107      	bne.n	8013a4a <HAL_RCCEx_GetPeriphCLKFreq+0x956>
 8013a3a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8013a3e:	4618      	mov	r0, r3
 8013a40:	f000 fae8 	bl	8014014 <HAL_RCCEx_GetPLL1ClockFreq>
 8013a44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013a46:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013a48:	e019      	b.n	8013a7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8013a4a:	2300      	movs	r3, #0
 8013a4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013a4e:	e016      	b.n	8013a7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8013a50:	4b0d      	ldr	r3, [pc, #52]	@ (8013a88 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8013a52:	681b      	ldr	r3, [r3, #0]
 8013a54:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8013a58:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8013a5c:	d107      	bne.n	8013a6e <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
 8013a5e:	f107 0318 	add.w	r3, r7, #24
 8013a62:	4618      	mov	r0, r3
 8013a64:	f000 f82e 	bl	8013ac4 <HAL_RCCEx_GetPLL2ClockFreq>
 8013a68:	69fb      	ldr	r3, [r7, #28]
 8013a6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013a6c:	e007      	b.n	8013a7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8013a6e:	2300      	movs	r3, #0
 8013a70:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013a72:	e004      	b.n	8013a7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8013a74:	2300      	movs	r3, #0
 8013a76:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013a78:	e001      	b.n	8013a7e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8013a7a:	2300      	movs	r3, #0
 8013a7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013a7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013a80:	4618      	mov	r0, r3
 8013a82:	3740      	adds	r7, #64	@ 0x40
 8013a84:	46bd      	mov	sp, r7
 8013a86:	bd80      	pop	{r7, pc}
 8013a88:	58024400 	.word	0x58024400
 8013a8c:	03d09000 	.word	0x03d09000
 8013a90:	003d0900 	.word	0x003d0900
 8013a94:	016e3600 	.word	0x016e3600

08013a98 <HAL_RCCEx_GetD3PCLK1Freq>:
 8013a98:	b580      	push	{r7, lr}
 8013a9a:	af00      	add	r7, sp, #0
 8013a9c:	f7fe f92e 	bl	8011cfc <HAL_RCC_GetHCLKFreq>
 8013aa0:	4602      	mov	r2, r0
 8013aa2:	4b06      	ldr	r3, [pc, #24]	@ (8013abc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8013aa4:	6a1b      	ldr	r3, [r3, #32]
 8013aa6:	091b      	lsrs	r3, r3, #4
 8013aa8:	f003 0307 	and.w	r3, r3, #7
 8013aac:	4904      	ldr	r1, [pc, #16]	@ (8013ac0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8013aae:	5ccb      	ldrb	r3, [r1, r3]
 8013ab0:	f003 031f 	and.w	r3, r3, #31
 8013ab4:	fa22 f303 	lsr.w	r3, r2, r3
 8013ab8:	4618      	mov	r0, r3
 8013aba:	bd80      	pop	{r7, pc}
 8013abc:	58024400 	.word	0x58024400
 8013ac0:	0801e8cc 	.word	0x0801e8cc

08013ac4 <HAL_RCCEx_GetPLL2ClockFreq>:
 8013ac4:	b480      	push	{r7}
 8013ac6:	b089      	sub	sp, #36	@ 0x24
 8013ac8:	af00      	add	r7, sp, #0
 8013aca:	6078      	str	r0, [r7, #4]
 8013acc:	4ba1      	ldr	r3, [pc, #644]	@ (8013d54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013ace:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013ad0:	f003 0303 	and.w	r3, r3, #3
 8013ad4:	61bb      	str	r3, [r7, #24]
 8013ad6:	4b9f      	ldr	r3, [pc, #636]	@ (8013d54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013ad8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013ada:	0b1b      	lsrs	r3, r3, #12
 8013adc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8013ae0:	617b      	str	r3, [r7, #20]
 8013ae2:	4b9c      	ldr	r3, [pc, #624]	@ (8013d54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013ae4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013ae6:	091b      	lsrs	r3, r3, #4
 8013ae8:	f003 0301 	and.w	r3, r3, #1
 8013aec:	613b      	str	r3, [r7, #16]
 8013aee:	4b99      	ldr	r3, [pc, #612]	@ (8013d54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013af0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013af2:	08db      	lsrs	r3, r3, #3
 8013af4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013af8:	693a      	ldr	r2, [r7, #16]
 8013afa:	fb02 f303 	mul.w	r3, r2, r3
 8013afe:	ee07 3a90 	vmov	s15, r3
 8013b02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013b06:	edc7 7a03 	vstr	s15, [r7, #12]
 8013b0a:	697b      	ldr	r3, [r7, #20]
 8013b0c:	2b00      	cmp	r3, #0
 8013b0e:	f000 8111 	beq.w	8013d34 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
 8013b12:	69bb      	ldr	r3, [r7, #24]
 8013b14:	2b02      	cmp	r3, #2
 8013b16:	f000 8083 	beq.w	8013c20 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8013b1a:	69bb      	ldr	r3, [r7, #24]
 8013b1c:	2b02      	cmp	r3, #2
 8013b1e:	f200 80a1 	bhi.w	8013c64 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8013b22:	69bb      	ldr	r3, [r7, #24]
 8013b24:	2b00      	cmp	r3, #0
 8013b26:	d003      	beq.n	8013b30 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8013b28:	69bb      	ldr	r3, [r7, #24]
 8013b2a:	2b01      	cmp	r3, #1
 8013b2c:	d056      	beq.n	8013bdc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8013b2e:	e099      	b.n	8013c64 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8013b30:	4b88      	ldr	r3, [pc, #544]	@ (8013d54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013b32:	681b      	ldr	r3, [r3, #0]
 8013b34:	f003 0320 	and.w	r3, r3, #32
 8013b38:	2b00      	cmp	r3, #0
 8013b3a:	d02d      	beq.n	8013b98 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
 8013b3c:	4b85      	ldr	r3, [pc, #532]	@ (8013d54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013b3e:	681b      	ldr	r3, [r3, #0]
 8013b40:	08db      	lsrs	r3, r3, #3
 8013b42:	f003 0303 	and.w	r3, r3, #3
 8013b46:	4a84      	ldr	r2, [pc, #528]	@ (8013d58 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8013b48:	fa22 f303 	lsr.w	r3, r2, r3
 8013b4c:	60bb      	str	r3, [r7, #8]
 8013b4e:	68bb      	ldr	r3, [r7, #8]
 8013b50:	ee07 3a90 	vmov	s15, r3
 8013b54:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013b58:	697b      	ldr	r3, [r7, #20]
 8013b5a:	ee07 3a90 	vmov	s15, r3
 8013b5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013b62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013b66:	4b7b      	ldr	r3, [pc, #492]	@ (8013d54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013b68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013b6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013b6e:	ee07 3a90 	vmov	s15, r3
 8013b72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013b76:	ed97 6a03 	vldr	s12, [r7, #12]
 8013b7a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8013d5c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8013b7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013b82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013b86:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8013b8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013b8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013b92:	edc7 7a07 	vstr	s15, [r7, #28]
 8013b96:	e087      	b.n	8013ca8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
 8013b98:	697b      	ldr	r3, [r7, #20]
 8013b9a:	ee07 3a90 	vmov	s15, r3
 8013b9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013ba2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8013d60 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8013ba6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013baa:	4b6a      	ldr	r3, [pc, #424]	@ (8013d54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013bac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013bae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013bb2:	ee07 3a90 	vmov	s15, r3
 8013bb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013bba:	ed97 6a03 	vldr	s12, [r7, #12]
 8013bbe:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8013d5c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8013bc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013bc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013bca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8013bce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013bd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013bd6:	edc7 7a07 	vstr	s15, [r7, #28]
 8013bda:	e065      	b.n	8013ca8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
 8013bdc:	697b      	ldr	r3, [r7, #20]
 8013bde:	ee07 3a90 	vmov	s15, r3
 8013be2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013be6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8013d64 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8013bea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013bee:	4b59      	ldr	r3, [pc, #356]	@ (8013d54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013bf0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013bf2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013bf6:	ee07 3a90 	vmov	s15, r3
 8013bfa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013bfe:	ed97 6a03 	vldr	s12, [r7, #12]
 8013c02:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8013d5c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8013c06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013c0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013c0e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8013c12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013c16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013c1a:	edc7 7a07 	vstr	s15, [r7, #28]
 8013c1e:	e043      	b.n	8013ca8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
 8013c20:	697b      	ldr	r3, [r7, #20]
 8013c22:	ee07 3a90 	vmov	s15, r3
 8013c26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013c2a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8013d68 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8013c2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013c32:	4b48      	ldr	r3, [pc, #288]	@ (8013d54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013c34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013c36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013c3a:	ee07 3a90 	vmov	s15, r3
 8013c3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013c42:	ed97 6a03 	vldr	s12, [r7, #12]
 8013c46:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8013d5c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8013c4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013c4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013c52:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8013c56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013c5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013c5e:	edc7 7a07 	vstr	s15, [r7, #28]
 8013c62:	e021      	b.n	8013ca8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
 8013c64:	697b      	ldr	r3, [r7, #20]
 8013c66:	ee07 3a90 	vmov	s15, r3
 8013c6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013c6e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8013d64 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8013c72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013c76:	4b37      	ldr	r3, [pc, #220]	@ (8013d54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013c78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013c7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013c7e:	ee07 3a90 	vmov	s15, r3
 8013c82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013c86:	ed97 6a03 	vldr	s12, [r7, #12]
 8013c8a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8013d5c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8013c8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013c92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013c96:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8013c9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013c9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013ca2:	edc7 7a07 	vstr	s15, [r7, #28]
 8013ca6:	bf00      	nop
 8013ca8:	4b2a      	ldr	r3, [pc, #168]	@ (8013d54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013caa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013cac:	0a5b      	lsrs	r3, r3, #9
 8013cae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013cb2:	ee07 3a90 	vmov	s15, r3
 8013cb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013cba:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8013cbe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8013cc2:	edd7 6a07 	vldr	s13, [r7, #28]
 8013cc6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013cca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013cce:	ee17 2a90 	vmov	r2, s15
 8013cd2:	687b      	ldr	r3, [r7, #4]
 8013cd4:	601a      	str	r2, [r3, #0]
 8013cd6:	4b1f      	ldr	r3, [pc, #124]	@ (8013d54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013cd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013cda:	0c1b      	lsrs	r3, r3, #16
 8013cdc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013ce0:	ee07 3a90 	vmov	s15, r3
 8013ce4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013ce8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8013cec:	ee37 7a87 	vadd.f32	s14, s15, s14
 8013cf0:	edd7 6a07 	vldr	s13, [r7, #28]
 8013cf4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013cf8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013cfc:	ee17 2a90 	vmov	r2, s15
 8013d00:	687b      	ldr	r3, [r7, #4]
 8013d02:	605a      	str	r2, [r3, #4]
 8013d04:	4b13      	ldr	r3, [pc, #76]	@ (8013d54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013d06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013d08:	0e1b      	lsrs	r3, r3, #24
 8013d0a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013d0e:	ee07 3a90 	vmov	s15, r3
 8013d12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013d16:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8013d1a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8013d1e:	edd7 6a07 	vldr	s13, [r7, #28]
 8013d22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013d26:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013d2a:	ee17 2a90 	vmov	r2, s15
 8013d2e:	687b      	ldr	r3, [r7, #4]
 8013d30:	609a      	str	r2, [r3, #8]
 8013d32:	e008      	b.n	8013d46 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
 8013d34:	687b      	ldr	r3, [r7, #4]
 8013d36:	2200      	movs	r2, #0
 8013d38:	601a      	str	r2, [r3, #0]
 8013d3a:	687b      	ldr	r3, [r7, #4]
 8013d3c:	2200      	movs	r2, #0
 8013d3e:	605a      	str	r2, [r3, #4]
 8013d40:	687b      	ldr	r3, [r7, #4]
 8013d42:	2200      	movs	r2, #0
 8013d44:	609a      	str	r2, [r3, #8]
 8013d46:	bf00      	nop
 8013d48:	3724      	adds	r7, #36	@ 0x24
 8013d4a:	46bd      	mov	sp, r7
 8013d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d50:	4770      	bx	lr
 8013d52:	bf00      	nop
 8013d54:	58024400 	.word	0x58024400
 8013d58:	03d09000 	.word	0x03d09000
 8013d5c:	46000000 	.word	0x46000000
 8013d60:	4c742400 	.word	0x4c742400
 8013d64:	4a742400 	.word	0x4a742400
 8013d68:	4bb71b00 	.word	0x4bb71b00

08013d6c <HAL_RCCEx_GetPLL3ClockFreq>:
 8013d6c:	b480      	push	{r7}
 8013d6e:	b089      	sub	sp, #36	@ 0x24
 8013d70:	af00      	add	r7, sp, #0
 8013d72:	6078      	str	r0, [r7, #4]
 8013d74:	4ba1      	ldr	r3, [pc, #644]	@ (8013ffc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013d76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013d78:	f003 0303 	and.w	r3, r3, #3
 8013d7c:	61bb      	str	r3, [r7, #24]
 8013d7e:	4b9f      	ldr	r3, [pc, #636]	@ (8013ffc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013d80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013d82:	0d1b      	lsrs	r3, r3, #20
 8013d84:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8013d88:	617b      	str	r3, [r7, #20]
 8013d8a:	4b9c      	ldr	r3, [pc, #624]	@ (8013ffc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013d8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013d8e:	0a1b      	lsrs	r3, r3, #8
 8013d90:	f003 0301 	and.w	r3, r3, #1
 8013d94:	613b      	str	r3, [r7, #16]
 8013d96:	4b99      	ldr	r3, [pc, #612]	@ (8013ffc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013d98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013d9a:	08db      	lsrs	r3, r3, #3
 8013d9c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013da0:	693a      	ldr	r2, [r7, #16]
 8013da2:	fb02 f303 	mul.w	r3, r2, r3
 8013da6:	ee07 3a90 	vmov	s15, r3
 8013daa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013dae:	edc7 7a03 	vstr	s15, [r7, #12]
 8013db2:	697b      	ldr	r3, [r7, #20]
 8013db4:	2b00      	cmp	r3, #0
 8013db6:	f000 8111 	beq.w	8013fdc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
 8013dba:	69bb      	ldr	r3, [r7, #24]
 8013dbc:	2b02      	cmp	r3, #2
 8013dbe:	f000 8083 	beq.w	8013ec8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8013dc2:	69bb      	ldr	r3, [r7, #24]
 8013dc4:	2b02      	cmp	r3, #2
 8013dc6:	f200 80a1 	bhi.w	8013f0c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8013dca:	69bb      	ldr	r3, [r7, #24]
 8013dcc:	2b00      	cmp	r3, #0
 8013dce:	d003      	beq.n	8013dd8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8013dd0:	69bb      	ldr	r3, [r7, #24]
 8013dd2:	2b01      	cmp	r3, #1
 8013dd4:	d056      	beq.n	8013e84 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8013dd6:	e099      	b.n	8013f0c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8013dd8:	4b88      	ldr	r3, [pc, #544]	@ (8013ffc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013dda:	681b      	ldr	r3, [r3, #0]
 8013ddc:	f003 0320 	and.w	r3, r3, #32
 8013de0:	2b00      	cmp	r3, #0
 8013de2:	d02d      	beq.n	8013e40 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
 8013de4:	4b85      	ldr	r3, [pc, #532]	@ (8013ffc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013de6:	681b      	ldr	r3, [r3, #0]
 8013de8:	08db      	lsrs	r3, r3, #3
 8013dea:	f003 0303 	and.w	r3, r3, #3
 8013dee:	4a84      	ldr	r2, [pc, #528]	@ (8014000 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8013df0:	fa22 f303 	lsr.w	r3, r2, r3
 8013df4:	60bb      	str	r3, [r7, #8]
 8013df6:	68bb      	ldr	r3, [r7, #8]
 8013df8:	ee07 3a90 	vmov	s15, r3
 8013dfc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013e00:	697b      	ldr	r3, [r7, #20]
 8013e02:	ee07 3a90 	vmov	s15, r3
 8013e06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013e0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013e0e:	4b7b      	ldr	r3, [pc, #492]	@ (8013ffc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013e10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013e12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013e16:	ee07 3a90 	vmov	s15, r3
 8013e1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013e1e:	ed97 6a03 	vldr	s12, [r7, #12]
 8013e22:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8014004 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8013e26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013e2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013e2e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8013e32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013e36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013e3a:	edc7 7a07 	vstr	s15, [r7, #28]
 8013e3e:	e087      	b.n	8013f50 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
 8013e40:	697b      	ldr	r3, [r7, #20]
 8013e42:	ee07 3a90 	vmov	s15, r3
 8013e46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013e4a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8014008 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8013e4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013e52:	4b6a      	ldr	r3, [pc, #424]	@ (8013ffc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013e54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013e56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013e5a:	ee07 3a90 	vmov	s15, r3
 8013e5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013e62:	ed97 6a03 	vldr	s12, [r7, #12]
 8013e66:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8014004 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8013e6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013e6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013e72:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8013e76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013e7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013e7e:	edc7 7a07 	vstr	s15, [r7, #28]
 8013e82:	e065      	b.n	8013f50 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
 8013e84:	697b      	ldr	r3, [r7, #20]
 8013e86:	ee07 3a90 	vmov	s15, r3
 8013e8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013e8e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 801400c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8013e92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013e96:	4b59      	ldr	r3, [pc, #356]	@ (8013ffc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013e98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013e9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013e9e:	ee07 3a90 	vmov	s15, r3
 8013ea2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013ea6:	ed97 6a03 	vldr	s12, [r7, #12]
 8013eaa:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8014004 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8013eae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013eb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013eb6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8013eba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013ebe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013ec2:	edc7 7a07 	vstr	s15, [r7, #28]
 8013ec6:	e043      	b.n	8013f50 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
 8013ec8:	697b      	ldr	r3, [r7, #20]
 8013eca:	ee07 3a90 	vmov	s15, r3
 8013ece:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013ed2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8014010 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8013ed6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013eda:	4b48      	ldr	r3, [pc, #288]	@ (8013ffc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013edc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013ede:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013ee2:	ee07 3a90 	vmov	s15, r3
 8013ee6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013eea:	ed97 6a03 	vldr	s12, [r7, #12]
 8013eee:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8014004 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8013ef2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013ef6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013efa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8013efe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013f02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013f06:	edc7 7a07 	vstr	s15, [r7, #28]
 8013f0a:	e021      	b.n	8013f50 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
 8013f0c:	697b      	ldr	r3, [r7, #20]
 8013f0e:	ee07 3a90 	vmov	s15, r3
 8013f12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013f16:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 801400c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8013f1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013f1e:	4b37      	ldr	r3, [pc, #220]	@ (8013ffc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013f20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013f22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013f26:	ee07 3a90 	vmov	s15, r3
 8013f2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013f2e:	ed97 6a03 	vldr	s12, [r7, #12]
 8013f32:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8014004 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8013f36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013f3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013f3e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8013f42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013f46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013f4a:	edc7 7a07 	vstr	s15, [r7, #28]
 8013f4e:	bf00      	nop
 8013f50:	4b2a      	ldr	r3, [pc, #168]	@ (8013ffc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013f52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013f54:	0a5b      	lsrs	r3, r3, #9
 8013f56:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013f5a:	ee07 3a90 	vmov	s15, r3
 8013f5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013f62:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8013f66:	ee37 7a87 	vadd.f32	s14, s15, s14
 8013f6a:	edd7 6a07 	vldr	s13, [r7, #28]
 8013f6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013f72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013f76:	ee17 2a90 	vmov	r2, s15
 8013f7a:	687b      	ldr	r3, [r7, #4]
 8013f7c:	601a      	str	r2, [r3, #0]
 8013f7e:	4b1f      	ldr	r3, [pc, #124]	@ (8013ffc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013f80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013f82:	0c1b      	lsrs	r3, r3, #16
 8013f84:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013f88:	ee07 3a90 	vmov	s15, r3
 8013f8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013f90:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8013f94:	ee37 7a87 	vadd.f32	s14, s15, s14
 8013f98:	edd7 6a07 	vldr	s13, [r7, #28]
 8013f9c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013fa0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013fa4:	ee17 2a90 	vmov	r2, s15
 8013fa8:	687b      	ldr	r3, [r7, #4]
 8013faa:	605a      	str	r2, [r3, #4]
 8013fac:	4b13      	ldr	r3, [pc, #76]	@ (8013ffc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013fae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013fb0:	0e1b      	lsrs	r3, r3, #24
 8013fb2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013fb6:	ee07 3a90 	vmov	s15, r3
 8013fba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013fbe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8013fc2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8013fc6:	edd7 6a07 	vldr	s13, [r7, #28]
 8013fca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013fce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013fd2:	ee17 2a90 	vmov	r2, s15
 8013fd6:	687b      	ldr	r3, [r7, #4]
 8013fd8:	609a      	str	r2, [r3, #8]
 8013fda:	e008      	b.n	8013fee <HAL_RCCEx_GetPLL3ClockFreq+0x282>
 8013fdc:	687b      	ldr	r3, [r7, #4]
 8013fde:	2200      	movs	r2, #0
 8013fe0:	601a      	str	r2, [r3, #0]
 8013fe2:	687b      	ldr	r3, [r7, #4]
 8013fe4:	2200      	movs	r2, #0
 8013fe6:	605a      	str	r2, [r3, #4]
 8013fe8:	687b      	ldr	r3, [r7, #4]
 8013fea:	2200      	movs	r2, #0
 8013fec:	609a      	str	r2, [r3, #8]
 8013fee:	bf00      	nop
 8013ff0:	3724      	adds	r7, #36	@ 0x24
 8013ff2:	46bd      	mov	sp, r7
 8013ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ff8:	4770      	bx	lr
 8013ffa:	bf00      	nop
 8013ffc:	58024400 	.word	0x58024400
 8014000:	03d09000 	.word	0x03d09000
 8014004:	46000000 	.word	0x46000000
 8014008:	4c742400 	.word	0x4c742400
 801400c:	4a742400 	.word	0x4a742400
 8014010:	4bb71b00 	.word	0x4bb71b00

08014014 <HAL_RCCEx_GetPLL1ClockFreq>:
 8014014:	b480      	push	{r7}
 8014016:	b089      	sub	sp, #36	@ 0x24
 8014018:	af00      	add	r7, sp, #0
 801401a:	6078      	str	r0, [r7, #4]
 801401c:	4ba0      	ldr	r3, [pc, #640]	@ (80142a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801401e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014020:	f003 0303 	and.w	r3, r3, #3
 8014024:	61bb      	str	r3, [r7, #24]
 8014026:	4b9e      	ldr	r3, [pc, #632]	@ (80142a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8014028:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801402a:	091b      	lsrs	r3, r3, #4
 801402c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8014030:	617b      	str	r3, [r7, #20]
 8014032:	4b9b      	ldr	r3, [pc, #620]	@ (80142a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8014034:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014036:	f003 0301 	and.w	r3, r3, #1
 801403a:	613b      	str	r3, [r7, #16]
 801403c:	4b98      	ldr	r3, [pc, #608]	@ (80142a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801403e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014040:	08db      	lsrs	r3, r3, #3
 8014042:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014046:	693a      	ldr	r2, [r7, #16]
 8014048:	fb02 f303 	mul.w	r3, r2, r3
 801404c:	ee07 3a90 	vmov	s15, r3
 8014050:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014054:	edc7 7a03 	vstr	s15, [r7, #12]
 8014058:	697b      	ldr	r3, [r7, #20]
 801405a:	2b00      	cmp	r3, #0
 801405c:	f000 8111 	beq.w	8014282 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
 8014060:	69bb      	ldr	r3, [r7, #24]
 8014062:	2b02      	cmp	r3, #2
 8014064:	f000 8083 	beq.w	801416e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8014068:	69bb      	ldr	r3, [r7, #24]
 801406a:	2b02      	cmp	r3, #2
 801406c:	f200 80a1 	bhi.w	80141b2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8014070:	69bb      	ldr	r3, [r7, #24]
 8014072:	2b00      	cmp	r3, #0
 8014074:	d003      	beq.n	801407e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8014076:	69bb      	ldr	r3, [r7, #24]
 8014078:	2b01      	cmp	r3, #1
 801407a:	d056      	beq.n	801412a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 801407c:	e099      	b.n	80141b2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 801407e:	4b88      	ldr	r3, [pc, #544]	@ (80142a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8014080:	681b      	ldr	r3, [r3, #0]
 8014082:	f003 0320 	and.w	r3, r3, #32
 8014086:	2b00      	cmp	r3, #0
 8014088:	d02d      	beq.n	80140e6 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
 801408a:	4b85      	ldr	r3, [pc, #532]	@ (80142a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801408c:	681b      	ldr	r3, [r3, #0]
 801408e:	08db      	lsrs	r3, r3, #3
 8014090:	f003 0303 	and.w	r3, r3, #3
 8014094:	4a83      	ldr	r2, [pc, #524]	@ (80142a4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8014096:	fa22 f303 	lsr.w	r3, r2, r3
 801409a:	60bb      	str	r3, [r7, #8]
 801409c:	68bb      	ldr	r3, [r7, #8]
 801409e:	ee07 3a90 	vmov	s15, r3
 80140a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80140a6:	697b      	ldr	r3, [r7, #20]
 80140a8:	ee07 3a90 	vmov	s15, r3
 80140ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80140b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80140b4:	4b7a      	ldr	r3, [pc, #488]	@ (80142a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80140b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80140b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80140bc:	ee07 3a90 	vmov	s15, r3
 80140c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80140c4:	ed97 6a03 	vldr	s12, [r7, #12]
 80140c8:	eddf 5a77 	vldr	s11, [pc, #476]	@ 80142a8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80140cc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80140d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80140d4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80140d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80140dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80140e0:	edc7 7a07 	vstr	s15, [r7, #28]
 80140e4:	e087      	b.n	80141f6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
 80140e6:	697b      	ldr	r3, [r7, #20]
 80140e8:	ee07 3a90 	vmov	s15, r3
 80140ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80140f0:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 80142ac <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80140f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80140f8:	4b69      	ldr	r3, [pc, #420]	@ (80142a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80140fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80140fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014100:	ee07 3a90 	vmov	s15, r3
 8014104:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8014108:	ed97 6a03 	vldr	s12, [r7, #12]
 801410c:	eddf 5a66 	vldr	s11, [pc, #408]	@ 80142a8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8014110:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8014114:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8014118:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801411c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8014120:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014124:	edc7 7a07 	vstr	s15, [r7, #28]
 8014128:	e065      	b.n	80141f6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
 801412a:	697b      	ldr	r3, [r7, #20]
 801412c:	ee07 3a90 	vmov	s15, r3
 8014130:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014134:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 80142b0 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8014138:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801413c:	4b58      	ldr	r3, [pc, #352]	@ (80142a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801413e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014140:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014144:	ee07 3a90 	vmov	s15, r3
 8014148:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801414c:	ed97 6a03 	vldr	s12, [r7, #12]
 8014150:	eddf 5a55 	vldr	s11, [pc, #340]	@ 80142a8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8014154:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8014158:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801415c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8014160:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8014164:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014168:	edc7 7a07 	vstr	s15, [r7, #28]
 801416c:	e043      	b.n	80141f6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
 801416e:	697b      	ldr	r3, [r7, #20]
 8014170:	ee07 3a90 	vmov	s15, r3
 8014174:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014178:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 80142b4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 801417c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8014180:	4b47      	ldr	r3, [pc, #284]	@ (80142a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8014182:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014184:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014188:	ee07 3a90 	vmov	s15, r3
 801418c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8014190:	ed97 6a03 	vldr	s12, [r7, #12]
 8014194:	eddf 5a44 	vldr	s11, [pc, #272]	@ 80142a8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8014198:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801419c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80141a0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80141a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80141a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80141ac:	edc7 7a07 	vstr	s15, [r7, #28]
 80141b0:	e021      	b.n	80141f6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
 80141b2:	697b      	ldr	r3, [r7, #20]
 80141b4:	ee07 3a90 	vmov	s15, r3
 80141b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80141bc:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 80142ac <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80141c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80141c4:	4b36      	ldr	r3, [pc, #216]	@ (80142a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80141c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80141c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80141cc:	ee07 3a90 	vmov	s15, r3
 80141d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80141d4:	ed97 6a03 	vldr	s12, [r7, #12]
 80141d8:	eddf 5a33 	vldr	s11, [pc, #204]	@ 80142a8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80141dc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80141e0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80141e4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80141e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80141ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80141f0:	edc7 7a07 	vstr	s15, [r7, #28]
 80141f4:	bf00      	nop
 80141f6:	4b2a      	ldr	r3, [pc, #168]	@ (80142a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80141f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80141fa:	0a5b      	lsrs	r3, r3, #9
 80141fc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8014200:	ee07 3a90 	vmov	s15, r3
 8014204:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014208:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801420c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8014210:	edd7 6a07 	vldr	s13, [r7, #28]
 8014214:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8014218:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801421c:	ee17 2a90 	vmov	r2, s15
 8014220:	687b      	ldr	r3, [r7, #4]
 8014222:	601a      	str	r2, [r3, #0]
 8014224:	4b1e      	ldr	r3, [pc, #120]	@ (80142a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8014226:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014228:	0c1b      	lsrs	r3, r3, #16
 801422a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801422e:	ee07 3a90 	vmov	s15, r3
 8014232:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014236:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801423a:	ee37 7a87 	vadd.f32	s14, s15, s14
 801423e:	edd7 6a07 	vldr	s13, [r7, #28]
 8014242:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8014246:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801424a:	ee17 2a90 	vmov	r2, s15
 801424e:	687b      	ldr	r3, [r7, #4]
 8014250:	605a      	str	r2, [r3, #4]
 8014252:	4b13      	ldr	r3, [pc, #76]	@ (80142a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8014254:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014256:	0e1b      	lsrs	r3, r3, #24
 8014258:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801425c:	ee07 3a90 	vmov	s15, r3
 8014260:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014264:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8014268:	ee37 7a87 	vadd.f32	s14, s15, s14
 801426c:	edd7 6a07 	vldr	s13, [r7, #28]
 8014270:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8014274:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8014278:	ee17 2a90 	vmov	r2, s15
 801427c:	687b      	ldr	r3, [r7, #4]
 801427e:	609a      	str	r2, [r3, #8]
 8014280:	e008      	b.n	8014294 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
 8014282:	687b      	ldr	r3, [r7, #4]
 8014284:	2200      	movs	r2, #0
 8014286:	601a      	str	r2, [r3, #0]
 8014288:	687b      	ldr	r3, [r7, #4]
 801428a:	2200      	movs	r2, #0
 801428c:	605a      	str	r2, [r3, #4]
 801428e:	687b      	ldr	r3, [r7, #4]
 8014290:	2200      	movs	r2, #0
 8014292:	609a      	str	r2, [r3, #8]
 8014294:	bf00      	nop
 8014296:	3724      	adds	r7, #36	@ 0x24
 8014298:	46bd      	mov	sp, r7
 801429a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801429e:	4770      	bx	lr
 80142a0:	58024400 	.word	0x58024400
 80142a4:	03d09000 	.word	0x03d09000
 80142a8:	46000000 	.word	0x46000000
 80142ac:	4c742400 	.word	0x4c742400
 80142b0:	4a742400 	.word	0x4a742400
 80142b4:	4bb71b00 	.word	0x4bb71b00

080142b8 <RCCEx_PLL2_Config>:
 80142b8:	b580      	push	{r7, lr}
 80142ba:	b084      	sub	sp, #16
 80142bc:	af00      	add	r7, sp, #0
 80142be:	6078      	str	r0, [r7, #4]
 80142c0:	6039      	str	r1, [r7, #0]
 80142c2:	2300      	movs	r3, #0
 80142c4:	73fb      	strb	r3, [r7, #15]
 80142c6:	4b53      	ldr	r3, [pc, #332]	@ (8014414 <RCCEx_PLL2_Config+0x15c>)
 80142c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80142ca:	f003 0303 	and.w	r3, r3, #3
 80142ce:	2b03      	cmp	r3, #3
 80142d0:	d101      	bne.n	80142d6 <RCCEx_PLL2_Config+0x1e>
 80142d2:	2301      	movs	r3, #1
 80142d4:	e099      	b.n	801440a <RCCEx_PLL2_Config+0x152>
 80142d6:	4b4f      	ldr	r3, [pc, #316]	@ (8014414 <RCCEx_PLL2_Config+0x15c>)
 80142d8:	681b      	ldr	r3, [r3, #0]
 80142da:	4a4e      	ldr	r2, [pc, #312]	@ (8014414 <RCCEx_PLL2_Config+0x15c>)
 80142dc:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80142e0:	6013      	str	r3, [r2, #0]
 80142e2:	f7f4 ffab 	bl	800923c <HAL_GetTick>
 80142e6:	60b8      	str	r0, [r7, #8]
 80142e8:	e008      	b.n	80142fc <RCCEx_PLL2_Config+0x44>
 80142ea:	f7f4 ffa7 	bl	800923c <HAL_GetTick>
 80142ee:	4602      	mov	r2, r0
 80142f0:	68bb      	ldr	r3, [r7, #8]
 80142f2:	1ad3      	subs	r3, r2, r3
 80142f4:	2b02      	cmp	r3, #2
 80142f6:	d901      	bls.n	80142fc <RCCEx_PLL2_Config+0x44>
 80142f8:	2303      	movs	r3, #3
 80142fa:	e086      	b.n	801440a <RCCEx_PLL2_Config+0x152>
 80142fc:	4b45      	ldr	r3, [pc, #276]	@ (8014414 <RCCEx_PLL2_Config+0x15c>)
 80142fe:	681b      	ldr	r3, [r3, #0]
 8014300:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8014304:	2b00      	cmp	r3, #0
 8014306:	d1f0      	bne.n	80142ea <RCCEx_PLL2_Config+0x32>
 8014308:	4b42      	ldr	r3, [pc, #264]	@ (8014414 <RCCEx_PLL2_Config+0x15c>)
 801430a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801430c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8014310:	687b      	ldr	r3, [r7, #4]
 8014312:	681b      	ldr	r3, [r3, #0]
 8014314:	031b      	lsls	r3, r3, #12
 8014316:	493f      	ldr	r1, [pc, #252]	@ (8014414 <RCCEx_PLL2_Config+0x15c>)
 8014318:	4313      	orrs	r3, r2
 801431a:	628b      	str	r3, [r1, #40]	@ 0x28
 801431c:	687b      	ldr	r3, [r7, #4]
 801431e:	685b      	ldr	r3, [r3, #4]
 8014320:	3b01      	subs	r3, #1
 8014322:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8014326:	687b      	ldr	r3, [r7, #4]
 8014328:	689b      	ldr	r3, [r3, #8]
 801432a:	3b01      	subs	r3, #1
 801432c:	025b      	lsls	r3, r3, #9
 801432e:	b29b      	uxth	r3, r3
 8014330:	431a      	orrs	r2, r3
 8014332:	687b      	ldr	r3, [r7, #4]
 8014334:	68db      	ldr	r3, [r3, #12]
 8014336:	3b01      	subs	r3, #1
 8014338:	041b      	lsls	r3, r3, #16
 801433a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 801433e:	431a      	orrs	r2, r3
 8014340:	687b      	ldr	r3, [r7, #4]
 8014342:	691b      	ldr	r3, [r3, #16]
 8014344:	3b01      	subs	r3, #1
 8014346:	061b      	lsls	r3, r3, #24
 8014348:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 801434c:	4931      	ldr	r1, [pc, #196]	@ (8014414 <RCCEx_PLL2_Config+0x15c>)
 801434e:	4313      	orrs	r3, r2
 8014350:	638b      	str	r3, [r1, #56]	@ 0x38
 8014352:	4b30      	ldr	r3, [pc, #192]	@ (8014414 <RCCEx_PLL2_Config+0x15c>)
 8014354:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014356:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 801435a:	687b      	ldr	r3, [r7, #4]
 801435c:	695b      	ldr	r3, [r3, #20]
 801435e:	492d      	ldr	r1, [pc, #180]	@ (8014414 <RCCEx_PLL2_Config+0x15c>)
 8014360:	4313      	orrs	r3, r2
 8014362:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8014364:	4b2b      	ldr	r3, [pc, #172]	@ (8014414 <RCCEx_PLL2_Config+0x15c>)
 8014366:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014368:	f023 0220 	bic.w	r2, r3, #32
 801436c:	687b      	ldr	r3, [r7, #4]
 801436e:	699b      	ldr	r3, [r3, #24]
 8014370:	4928      	ldr	r1, [pc, #160]	@ (8014414 <RCCEx_PLL2_Config+0x15c>)
 8014372:	4313      	orrs	r3, r2
 8014374:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8014376:	4b27      	ldr	r3, [pc, #156]	@ (8014414 <RCCEx_PLL2_Config+0x15c>)
 8014378:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801437a:	4a26      	ldr	r2, [pc, #152]	@ (8014414 <RCCEx_PLL2_Config+0x15c>)
 801437c:	f023 0310 	bic.w	r3, r3, #16
 8014380:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8014382:	4b24      	ldr	r3, [pc, #144]	@ (8014414 <RCCEx_PLL2_Config+0x15c>)
 8014384:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8014386:	4b24      	ldr	r3, [pc, #144]	@ (8014418 <RCCEx_PLL2_Config+0x160>)
 8014388:	4013      	ands	r3, r2
 801438a:	687a      	ldr	r2, [r7, #4]
 801438c:	69d2      	ldr	r2, [r2, #28]
 801438e:	00d2      	lsls	r2, r2, #3
 8014390:	4920      	ldr	r1, [pc, #128]	@ (8014414 <RCCEx_PLL2_Config+0x15c>)
 8014392:	4313      	orrs	r3, r2
 8014394:	63cb      	str	r3, [r1, #60]	@ 0x3c
 8014396:	4b1f      	ldr	r3, [pc, #124]	@ (8014414 <RCCEx_PLL2_Config+0x15c>)
 8014398:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801439a:	4a1e      	ldr	r2, [pc, #120]	@ (8014414 <RCCEx_PLL2_Config+0x15c>)
 801439c:	f043 0310 	orr.w	r3, r3, #16
 80143a0:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80143a2:	683b      	ldr	r3, [r7, #0]
 80143a4:	2b00      	cmp	r3, #0
 80143a6:	d106      	bne.n	80143b6 <RCCEx_PLL2_Config+0xfe>
 80143a8:	4b1a      	ldr	r3, [pc, #104]	@ (8014414 <RCCEx_PLL2_Config+0x15c>)
 80143aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80143ac:	4a19      	ldr	r2, [pc, #100]	@ (8014414 <RCCEx_PLL2_Config+0x15c>)
 80143ae:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80143b2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80143b4:	e00f      	b.n	80143d6 <RCCEx_PLL2_Config+0x11e>
 80143b6:	683b      	ldr	r3, [r7, #0]
 80143b8:	2b01      	cmp	r3, #1
 80143ba:	d106      	bne.n	80143ca <RCCEx_PLL2_Config+0x112>
 80143bc:	4b15      	ldr	r3, [pc, #84]	@ (8014414 <RCCEx_PLL2_Config+0x15c>)
 80143be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80143c0:	4a14      	ldr	r2, [pc, #80]	@ (8014414 <RCCEx_PLL2_Config+0x15c>)
 80143c2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80143c6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80143c8:	e005      	b.n	80143d6 <RCCEx_PLL2_Config+0x11e>
 80143ca:	4b12      	ldr	r3, [pc, #72]	@ (8014414 <RCCEx_PLL2_Config+0x15c>)
 80143cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80143ce:	4a11      	ldr	r2, [pc, #68]	@ (8014414 <RCCEx_PLL2_Config+0x15c>)
 80143d0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80143d4:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80143d6:	4b0f      	ldr	r3, [pc, #60]	@ (8014414 <RCCEx_PLL2_Config+0x15c>)
 80143d8:	681b      	ldr	r3, [r3, #0]
 80143da:	4a0e      	ldr	r2, [pc, #56]	@ (8014414 <RCCEx_PLL2_Config+0x15c>)
 80143dc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80143e0:	6013      	str	r3, [r2, #0]
 80143e2:	f7f4 ff2b 	bl	800923c <HAL_GetTick>
 80143e6:	60b8      	str	r0, [r7, #8]
 80143e8:	e008      	b.n	80143fc <RCCEx_PLL2_Config+0x144>
 80143ea:	f7f4 ff27 	bl	800923c <HAL_GetTick>
 80143ee:	4602      	mov	r2, r0
 80143f0:	68bb      	ldr	r3, [r7, #8]
 80143f2:	1ad3      	subs	r3, r2, r3
 80143f4:	2b02      	cmp	r3, #2
 80143f6:	d901      	bls.n	80143fc <RCCEx_PLL2_Config+0x144>
 80143f8:	2303      	movs	r3, #3
 80143fa:	e006      	b.n	801440a <RCCEx_PLL2_Config+0x152>
 80143fc:	4b05      	ldr	r3, [pc, #20]	@ (8014414 <RCCEx_PLL2_Config+0x15c>)
 80143fe:	681b      	ldr	r3, [r3, #0]
 8014400:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8014404:	2b00      	cmp	r3, #0
 8014406:	d0f0      	beq.n	80143ea <RCCEx_PLL2_Config+0x132>
 8014408:	7bfb      	ldrb	r3, [r7, #15]
 801440a:	4618      	mov	r0, r3
 801440c:	3710      	adds	r7, #16
 801440e:	46bd      	mov	sp, r7
 8014410:	bd80      	pop	{r7, pc}
 8014412:	bf00      	nop
 8014414:	58024400 	.word	0x58024400
 8014418:	ffff0007 	.word	0xffff0007

0801441c <RCCEx_PLL3_Config>:
 801441c:	b580      	push	{r7, lr}
 801441e:	b084      	sub	sp, #16
 8014420:	af00      	add	r7, sp, #0
 8014422:	6078      	str	r0, [r7, #4]
 8014424:	6039      	str	r1, [r7, #0]
 8014426:	2300      	movs	r3, #0
 8014428:	73fb      	strb	r3, [r7, #15]
 801442a:	4b53      	ldr	r3, [pc, #332]	@ (8014578 <RCCEx_PLL3_Config+0x15c>)
 801442c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801442e:	f003 0303 	and.w	r3, r3, #3
 8014432:	2b03      	cmp	r3, #3
 8014434:	d101      	bne.n	801443a <RCCEx_PLL3_Config+0x1e>
 8014436:	2301      	movs	r3, #1
 8014438:	e099      	b.n	801456e <RCCEx_PLL3_Config+0x152>
 801443a:	4b4f      	ldr	r3, [pc, #316]	@ (8014578 <RCCEx_PLL3_Config+0x15c>)
 801443c:	681b      	ldr	r3, [r3, #0]
 801443e:	4a4e      	ldr	r2, [pc, #312]	@ (8014578 <RCCEx_PLL3_Config+0x15c>)
 8014440:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8014444:	6013      	str	r3, [r2, #0]
 8014446:	f7f4 fef9 	bl	800923c <HAL_GetTick>
 801444a:	60b8      	str	r0, [r7, #8]
 801444c:	e008      	b.n	8014460 <RCCEx_PLL3_Config+0x44>
 801444e:	f7f4 fef5 	bl	800923c <HAL_GetTick>
 8014452:	4602      	mov	r2, r0
 8014454:	68bb      	ldr	r3, [r7, #8]
 8014456:	1ad3      	subs	r3, r2, r3
 8014458:	2b02      	cmp	r3, #2
 801445a:	d901      	bls.n	8014460 <RCCEx_PLL3_Config+0x44>
 801445c:	2303      	movs	r3, #3
 801445e:	e086      	b.n	801456e <RCCEx_PLL3_Config+0x152>
 8014460:	4b45      	ldr	r3, [pc, #276]	@ (8014578 <RCCEx_PLL3_Config+0x15c>)
 8014462:	681b      	ldr	r3, [r3, #0]
 8014464:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8014468:	2b00      	cmp	r3, #0
 801446a:	d1f0      	bne.n	801444e <RCCEx_PLL3_Config+0x32>
 801446c:	4b42      	ldr	r3, [pc, #264]	@ (8014578 <RCCEx_PLL3_Config+0x15c>)
 801446e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014470:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8014474:	687b      	ldr	r3, [r7, #4]
 8014476:	681b      	ldr	r3, [r3, #0]
 8014478:	051b      	lsls	r3, r3, #20
 801447a:	493f      	ldr	r1, [pc, #252]	@ (8014578 <RCCEx_PLL3_Config+0x15c>)
 801447c:	4313      	orrs	r3, r2
 801447e:	628b      	str	r3, [r1, #40]	@ 0x28
 8014480:	687b      	ldr	r3, [r7, #4]
 8014482:	685b      	ldr	r3, [r3, #4]
 8014484:	3b01      	subs	r3, #1
 8014486:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801448a:	687b      	ldr	r3, [r7, #4]
 801448c:	689b      	ldr	r3, [r3, #8]
 801448e:	3b01      	subs	r3, #1
 8014490:	025b      	lsls	r3, r3, #9
 8014492:	b29b      	uxth	r3, r3
 8014494:	431a      	orrs	r2, r3
 8014496:	687b      	ldr	r3, [r7, #4]
 8014498:	68db      	ldr	r3, [r3, #12]
 801449a:	3b01      	subs	r3, #1
 801449c:	041b      	lsls	r3, r3, #16
 801449e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80144a2:	431a      	orrs	r2, r3
 80144a4:	687b      	ldr	r3, [r7, #4]
 80144a6:	691b      	ldr	r3, [r3, #16]
 80144a8:	3b01      	subs	r3, #1
 80144aa:	061b      	lsls	r3, r3, #24
 80144ac:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80144b0:	4931      	ldr	r1, [pc, #196]	@ (8014578 <RCCEx_PLL3_Config+0x15c>)
 80144b2:	4313      	orrs	r3, r2
 80144b4:	640b      	str	r3, [r1, #64]	@ 0x40
 80144b6:	4b30      	ldr	r3, [pc, #192]	@ (8014578 <RCCEx_PLL3_Config+0x15c>)
 80144b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80144ba:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80144be:	687b      	ldr	r3, [r7, #4]
 80144c0:	695b      	ldr	r3, [r3, #20]
 80144c2:	492d      	ldr	r1, [pc, #180]	@ (8014578 <RCCEx_PLL3_Config+0x15c>)
 80144c4:	4313      	orrs	r3, r2
 80144c6:	62cb      	str	r3, [r1, #44]	@ 0x2c
 80144c8:	4b2b      	ldr	r3, [pc, #172]	@ (8014578 <RCCEx_PLL3_Config+0x15c>)
 80144ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80144cc:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80144d0:	687b      	ldr	r3, [r7, #4]
 80144d2:	699b      	ldr	r3, [r3, #24]
 80144d4:	4928      	ldr	r1, [pc, #160]	@ (8014578 <RCCEx_PLL3_Config+0x15c>)
 80144d6:	4313      	orrs	r3, r2
 80144d8:	62cb      	str	r3, [r1, #44]	@ 0x2c
 80144da:	4b27      	ldr	r3, [pc, #156]	@ (8014578 <RCCEx_PLL3_Config+0x15c>)
 80144dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80144de:	4a26      	ldr	r2, [pc, #152]	@ (8014578 <RCCEx_PLL3_Config+0x15c>)
 80144e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80144e4:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80144e6:	4b24      	ldr	r3, [pc, #144]	@ (8014578 <RCCEx_PLL3_Config+0x15c>)
 80144e8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80144ea:	4b24      	ldr	r3, [pc, #144]	@ (801457c <RCCEx_PLL3_Config+0x160>)
 80144ec:	4013      	ands	r3, r2
 80144ee:	687a      	ldr	r2, [r7, #4]
 80144f0:	69d2      	ldr	r2, [r2, #28]
 80144f2:	00d2      	lsls	r2, r2, #3
 80144f4:	4920      	ldr	r1, [pc, #128]	@ (8014578 <RCCEx_PLL3_Config+0x15c>)
 80144f6:	4313      	orrs	r3, r2
 80144f8:	644b      	str	r3, [r1, #68]	@ 0x44
 80144fa:	4b1f      	ldr	r3, [pc, #124]	@ (8014578 <RCCEx_PLL3_Config+0x15c>)
 80144fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80144fe:	4a1e      	ldr	r2, [pc, #120]	@ (8014578 <RCCEx_PLL3_Config+0x15c>)
 8014500:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8014504:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8014506:	683b      	ldr	r3, [r7, #0]
 8014508:	2b00      	cmp	r3, #0
 801450a:	d106      	bne.n	801451a <RCCEx_PLL3_Config+0xfe>
 801450c:	4b1a      	ldr	r3, [pc, #104]	@ (8014578 <RCCEx_PLL3_Config+0x15c>)
 801450e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014510:	4a19      	ldr	r2, [pc, #100]	@ (8014578 <RCCEx_PLL3_Config+0x15c>)
 8014512:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8014516:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8014518:	e00f      	b.n	801453a <RCCEx_PLL3_Config+0x11e>
 801451a:	683b      	ldr	r3, [r7, #0]
 801451c:	2b01      	cmp	r3, #1
 801451e:	d106      	bne.n	801452e <RCCEx_PLL3_Config+0x112>
 8014520:	4b15      	ldr	r3, [pc, #84]	@ (8014578 <RCCEx_PLL3_Config+0x15c>)
 8014522:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014524:	4a14      	ldr	r2, [pc, #80]	@ (8014578 <RCCEx_PLL3_Config+0x15c>)
 8014526:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 801452a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 801452c:	e005      	b.n	801453a <RCCEx_PLL3_Config+0x11e>
 801452e:	4b12      	ldr	r3, [pc, #72]	@ (8014578 <RCCEx_PLL3_Config+0x15c>)
 8014530:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014532:	4a11      	ldr	r2, [pc, #68]	@ (8014578 <RCCEx_PLL3_Config+0x15c>)
 8014534:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8014538:	62d3      	str	r3, [r2, #44]	@ 0x2c
 801453a:	4b0f      	ldr	r3, [pc, #60]	@ (8014578 <RCCEx_PLL3_Config+0x15c>)
 801453c:	681b      	ldr	r3, [r3, #0]
 801453e:	4a0e      	ldr	r2, [pc, #56]	@ (8014578 <RCCEx_PLL3_Config+0x15c>)
 8014540:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8014544:	6013      	str	r3, [r2, #0]
 8014546:	f7f4 fe79 	bl	800923c <HAL_GetTick>
 801454a:	60b8      	str	r0, [r7, #8]
 801454c:	e008      	b.n	8014560 <RCCEx_PLL3_Config+0x144>
 801454e:	f7f4 fe75 	bl	800923c <HAL_GetTick>
 8014552:	4602      	mov	r2, r0
 8014554:	68bb      	ldr	r3, [r7, #8]
 8014556:	1ad3      	subs	r3, r2, r3
 8014558:	2b02      	cmp	r3, #2
 801455a:	d901      	bls.n	8014560 <RCCEx_PLL3_Config+0x144>
 801455c:	2303      	movs	r3, #3
 801455e:	e006      	b.n	801456e <RCCEx_PLL3_Config+0x152>
 8014560:	4b05      	ldr	r3, [pc, #20]	@ (8014578 <RCCEx_PLL3_Config+0x15c>)
 8014562:	681b      	ldr	r3, [r3, #0]
 8014564:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8014568:	2b00      	cmp	r3, #0
 801456a:	d0f0      	beq.n	801454e <RCCEx_PLL3_Config+0x132>
 801456c:	7bfb      	ldrb	r3, [r7, #15]
 801456e:	4618      	mov	r0, r3
 8014570:	3710      	adds	r7, #16
 8014572:	46bd      	mov	sp, r7
 8014574:	bd80      	pop	{r7, pc}
 8014576:	bf00      	nop
 8014578:	58024400 	.word	0x58024400
 801457c:	ffff0007 	.word	0xffff0007

08014580 <HAL_SPI_Init>:
 8014580:	b580      	push	{r7, lr}
 8014582:	b084      	sub	sp, #16
 8014584:	af00      	add	r7, sp, #0
 8014586:	6078      	str	r0, [r7, #4]
 8014588:	687b      	ldr	r3, [r7, #4]
 801458a:	2b00      	cmp	r3, #0
 801458c:	d101      	bne.n	8014592 <HAL_SPI_Init+0x12>
 801458e:	2301      	movs	r3, #1
 8014590:	e10f      	b.n	80147b2 <HAL_SPI_Init+0x232>
 8014592:	687b      	ldr	r3, [r7, #4]
 8014594:	2200      	movs	r2, #0
 8014596:	629a      	str	r2, [r3, #40]	@ 0x28
 8014598:	687b      	ldr	r3, [r7, #4]
 801459a:	681b      	ldr	r3, [r3, #0]
 801459c:	4a87      	ldr	r2, [pc, #540]	@ (80147bc <HAL_SPI_Init+0x23c>)
 801459e:	4293      	cmp	r3, r2
 80145a0:	d00f      	beq.n	80145c2 <HAL_SPI_Init+0x42>
 80145a2:	687b      	ldr	r3, [r7, #4]
 80145a4:	681b      	ldr	r3, [r3, #0]
 80145a6:	4a86      	ldr	r2, [pc, #536]	@ (80147c0 <HAL_SPI_Init+0x240>)
 80145a8:	4293      	cmp	r3, r2
 80145aa:	d00a      	beq.n	80145c2 <HAL_SPI_Init+0x42>
 80145ac:	687b      	ldr	r3, [r7, #4]
 80145ae:	681b      	ldr	r3, [r3, #0]
 80145b0:	4a84      	ldr	r2, [pc, #528]	@ (80147c4 <HAL_SPI_Init+0x244>)
 80145b2:	4293      	cmp	r3, r2
 80145b4:	d005      	beq.n	80145c2 <HAL_SPI_Init+0x42>
 80145b6:	687b      	ldr	r3, [r7, #4]
 80145b8:	68db      	ldr	r3, [r3, #12]
 80145ba:	2b0f      	cmp	r3, #15
 80145bc:	d901      	bls.n	80145c2 <HAL_SPI_Init+0x42>
 80145be:	2301      	movs	r3, #1
 80145c0:	e0f7      	b.n	80147b2 <HAL_SPI_Init+0x232>
 80145c2:	6878      	ldr	r0, [r7, #4]
 80145c4:	f001 fd22 	bl	801600c <SPI_GetPacketSize>
 80145c8:	60f8      	str	r0, [r7, #12]
 80145ca:	687b      	ldr	r3, [r7, #4]
 80145cc:	681b      	ldr	r3, [r3, #0]
 80145ce:	4a7b      	ldr	r2, [pc, #492]	@ (80147bc <HAL_SPI_Init+0x23c>)
 80145d0:	4293      	cmp	r3, r2
 80145d2:	d00c      	beq.n	80145ee <HAL_SPI_Init+0x6e>
 80145d4:	687b      	ldr	r3, [r7, #4]
 80145d6:	681b      	ldr	r3, [r3, #0]
 80145d8:	4a79      	ldr	r2, [pc, #484]	@ (80147c0 <HAL_SPI_Init+0x240>)
 80145da:	4293      	cmp	r3, r2
 80145dc:	d007      	beq.n	80145ee <HAL_SPI_Init+0x6e>
 80145de:	687b      	ldr	r3, [r7, #4]
 80145e0:	681b      	ldr	r3, [r3, #0]
 80145e2:	4a78      	ldr	r2, [pc, #480]	@ (80147c4 <HAL_SPI_Init+0x244>)
 80145e4:	4293      	cmp	r3, r2
 80145e6:	d002      	beq.n	80145ee <HAL_SPI_Init+0x6e>
 80145e8:	68fb      	ldr	r3, [r7, #12]
 80145ea:	2b08      	cmp	r3, #8
 80145ec:	d811      	bhi.n	8014612 <HAL_SPI_Init+0x92>
 80145ee:	687b      	ldr	r3, [r7, #4]
 80145f0:	681b      	ldr	r3, [r3, #0]
 80145f2:	4a72      	ldr	r2, [pc, #456]	@ (80147bc <HAL_SPI_Init+0x23c>)
 80145f4:	4293      	cmp	r3, r2
 80145f6:	d009      	beq.n	801460c <HAL_SPI_Init+0x8c>
 80145f8:	687b      	ldr	r3, [r7, #4]
 80145fa:	681b      	ldr	r3, [r3, #0]
 80145fc:	4a70      	ldr	r2, [pc, #448]	@ (80147c0 <HAL_SPI_Init+0x240>)
 80145fe:	4293      	cmp	r3, r2
 8014600:	d004      	beq.n	801460c <HAL_SPI_Init+0x8c>
 8014602:	687b      	ldr	r3, [r7, #4]
 8014604:	681b      	ldr	r3, [r3, #0]
 8014606:	4a6f      	ldr	r2, [pc, #444]	@ (80147c4 <HAL_SPI_Init+0x244>)
 8014608:	4293      	cmp	r3, r2
 801460a:	d104      	bne.n	8014616 <HAL_SPI_Init+0x96>
 801460c:	68fb      	ldr	r3, [r7, #12]
 801460e:	2b10      	cmp	r3, #16
 8014610:	d901      	bls.n	8014616 <HAL_SPI_Init+0x96>
 8014612:	2301      	movs	r3, #1
 8014614:	e0cd      	b.n	80147b2 <HAL_SPI_Init+0x232>
 8014616:	687b      	ldr	r3, [r7, #4]
 8014618:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 801461c:	b2db      	uxtb	r3, r3
 801461e:	2b00      	cmp	r3, #0
 8014620:	d106      	bne.n	8014630 <HAL_SPI_Init+0xb0>
 8014622:	687b      	ldr	r3, [r7, #4]
 8014624:	2200      	movs	r2, #0
 8014626:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 801462a:	6878      	ldr	r0, [r7, #4]
 801462c:	f7f3 fb5a 	bl	8007ce4 <HAL_SPI_MspInit>
 8014630:	687b      	ldr	r3, [r7, #4]
 8014632:	2202      	movs	r2, #2
 8014634:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
 8014638:	687b      	ldr	r3, [r7, #4]
 801463a:	681b      	ldr	r3, [r3, #0]
 801463c:	681a      	ldr	r2, [r3, #0]
 801463e:	687b      	ldr	r3, [r7, #4]
 8014640:	681b      	ldr	r3, [r3, #0]
 8014642:	f022 0201 	bic.w	r2, r2, #1
 8014646:	601a      	str	r2, [r3, #0]
 8014648:	687b      	ldr	r3, [r7, #4]
 801464a:	681b      	ldr	r3, [r3, #0]
 801464c:	689b      	ldr	r3, [r3, #8]
 801464e:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8014652:	60bb      	str	r3, [r7, #8]
 8014654:	687b      	ldr	r3, [r7, #4]
 8014656:	699b      	ldr	r3, [r3, #24]
 8014658:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 801465c:	d119      	bne.n	8014692 <HAL_SPI_Init+0x112>
 801465e:	687b      	ldr	r3, [r7, #4]
 8014660:	685b      	ldr	r3, [r3, #4]
 8014662:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8014666:	d103      	bne.n	8014670 <HAL_SPI_Init+0xf0>
 8014668:	687b      	ldr	r3, [r7, #4]
 801466a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801466c:	2b00      	cmp	r3, #0
 801466e:	d008      	beq.n	8014682 <HAL_SPI_Init+0x102>
 8014670:	687b      	ldr	r3, [r7, #4]
 8014672:	685b      	ldr	r3, [r3, #4]
 8014674:	2b00      	cmp	r3, #0
 8014676:	d10c      	bne.n	8014692 <HAL_SPI_Init+0x112>
 8014678:	687b      	ldr	r3, [r7, #4]
 801467a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801467c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8014680:	d107      	bne.n	8014692 <HAL_SPI_Init+0x112>
 8014682:	687b      	ldr	r3, [r7, #4]
 8014684:	681b      	ldr	r3, [r3, #0]
 8014686:	681a      	ldr	r2, [r3, #0]
 8014688:	687b      	ldr	r3, [r7, #4]
 801468a:	681b      	ldr	r3, [r3, #0]
 801468c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8014690:	601a      	str	r2, [r3, #0]
 8014692:	687b      	ldr	r3, [r7, #4]
 8014694:	685b      	ldr	r3, [r3, #4]
 8014696:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 801469a:	2b00      	cmp	r3, #0
 801469c:	d00f      	beq.n	80146be <HAL_SPI_Init+0x13e>
 801469e:	687b      	ldr	r3, [r7, #4]
 80146a0:	68db      	ldr	r3, [r3, #12]
 80146a2:	2b06      	cmp	r3, #6
 80146a4:	d90b      	bls.n	80146be <HAL_SPI_Init+0x13e>
 80146a6:	687b      	ldr	r3, [r7, #4]
 80146a8:	681b      	ldr	r3, [r3, #0]
 80146aa:	681b      	ldr	r3, [r3, #0]
 80146ac:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 80146b0:	687b      	ldr	r3, [r7, #4]
 80146b2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80146b4:	687b      	ldr	r3, [r7, #4]
 80146b6:	681b      	ldr	r3, [r3, #0]
 80146b8:	430a      	orrs	r2, r1
 80146ba:	601a      	str	r2, [r3, #0]
 80146bc:	e007      	b.n	80146ce <HAL_SPI_Init+0x14e>
 80146be:	687b      	ldr	r3, [r7, #4]
 80146c0:	681b      	ldr	r3, [r3, #0]
 80146c2:	681a      	ldr	r2, [r3, #0]
 80146c4:	687b      	ldr	r3, [r7, #4]
 80146c6:	681b      	ldr	r3, [r3, #0]
 80146c8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80146cc:	601a      	str	r2, [r3, #0]
 80146ce:	687b      	ldr	r3, [r7, #4]
 80146d0:	69da      	ldr	r2, [r3, #28]
 80146d2:	687b      	ldr	r3, [r7, #4]
 80146d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80146d6:	431a      	orrs	r2, r3
 80146d8:	68bb      	ldr	r3, [r7, #8]
 80146da:	431a      	orrs	r2, r3
 80146dc:	687b      	ldr	r3, [r7, #4]
 80146de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80146e0:	ea42 0103 	orr.w	r1, r2, r3
 80146e4:	687b      	ldr	r3, [r7, #4]
 80146e6:	68da      	ldr	r2, [r3, #12]
 80146e8:	687b      	ldr	r3, [r7, #4]
 80146ea:	681b      	ldr	r3, [r3, #0]
 80146ec:	430a      	orrs	r2, r1
 80146ee:	609a      	str	r2, [r3, #8]
 80146f0:	687b      	ldr	r3, [r7, #4]
 80146f2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80146f4:	687b      	ldr	r3, [r7, #4]
 80146f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80146f8:	431a      	orrs	r2, r3
 80146fa:	687b      	ldr	r3, [r7, #4]
 80146fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80146fe:	431a      	orrs	r2, r3
 8014700:	687b      	ldr	r3, [r7, #4]
 8014702:	699b      	ldr	r3, [r3, #24]
 8014704:	431a      	orrs	r2, r3
 8014706:	687b      	ldr	r3, [r7, #4]
 8014708:	691b      	ldr	r3, [r3, #16]
 801470a:	431a      	orrs	r2, r3
 801470c:	687b      	ldr	r3, [r7, #4]
 801470e:	695b      	ldr	r3, [r3, #20]
 8014710:	431a      	orrs	r2, r3
 8014712:	687b      	ldr	r3, [r7, #4]
 8014714:	6a1b      	ldr	r3, [r3, #32]
 8014716:	431a      	orrs	r2, r3
 8014718:	687b      	ldr	r3, [r7, #4]
 801471a:	685b      	ldr	r3, [r3, #4]
 801471c:	431a      	orrs	r2, r3
 801471e:	687b      	ldr	r3, [r7, #4]
 8014720:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8014722:	431a      	orrs	r2, r3
 8014724:	687b      	ldr	r3, [r7, #4]
 8014726:	689b      	ldr	r3, [r3, #8]
 8014728:	431a      	orrs	r2, r3
 801472a:	687b      	ldr	r3, [r7, #4]
 801472c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801472e:	ea42 0103 	orr.w	r1, r2, r3
 8014732:	687b      	ldr	r3, [r7, #4]
 8014734:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8014736:	687b      	ldr	r3, [r7, #4]
 8014738:	681b      	ldr	r3, [r3, #0]
 801473a:	430a      	orrs	r2, r1
 801473c:	60da      	str	r2, [r3, #12]
 801473e:	687b      	ldr	r3, [r7, #4]
 8014740:	685b      	ldr	r3, [r3, #4]
 8014742:	2b00      	cmp	r3, #0
 8014744:	d113      	bne.n	801476e <HAL_SPI_Init+0x1ee>
 8014746:	687b      	ldr	r3, [r7, #4]
 8014748:	681b      	ldr	r3, [r3, #0]
 801474a:	689b      	ldr	r3, [r3, #8]
 801474c:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8014750:	687b      	ldr	r3, [r7, #4]
 8014752:	681b      	ldr	r3, [r3, #0]
 8014754:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8014758:	609a      	str	r2, [r3, #8]
 801475a:	687b      	ldr	r3, [r7, #4]
 801475c:	681b      	ldr	r3, [r3, #0]
 801475e:	689b      	ldr	r3, [r3, #8]
 8014760:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8014764:	687b      	ldr	r3, [r7, #4]
 8014766:	681b      	ldr	r3, [r3, #0]
 8014768:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 801476c:	609a      	str	r2, [r3, #8]
 801476e:	687b      	ldr	r3, [r7, #4]
 8014770:	681b      	ldr	r3, [r3, #0]
 8014772:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8014774:	687b      	ldr	r3, [r7, #4]
 8014776:	681b      	ldr	r3, [r3, #0]
 8014778:	f022 0201 	bic.w	r2, r2, #1
 801477c:	651a      	str	r2, [r3, #80]	@ 0x50
 801477e:	687b      	ldr	r3, [r7, #4]
 8014780:	685b      	ldr	r3, [r3, #4]
 8014782:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8014786:	2b00      	cmp	r3, #0
 8014788:	d00a      	beq.n	80147a0 <HAL_SPI_Init+0x220>
 801478a:	687b      	ldr	r3, [r7, #4]
 801478c:	681b      	ldr	r3, [r3, #0]
 801478e:	68db      	ldr	r3, [r3, #12]
 8014790:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8014794:	687b      	ldr	r3, [r7, #4]
 8014796:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8014798:	687b      	ldr	r3, [r7, #4]
 801479a:	681b      	ldr	r3, [r3, #0]
 801479c:	430a      	orrs	r2, r1
 801479e:	60da      	str	r2, [r3, #12]
 80147a0:	687b      	ldr	r3, [r7, #4]
 80147a2:	2200      	movs	r2, #0
 80147a4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 80147a8:	687b      	ldr	r3, [r7, #4]
 80147aa:	2201      	movs	r2, #1
 80147ac:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
 80147b0:	2300      	movs	r3, #0
 80147b2:	4618      	mov	r0, r3
 80147b4:	3710      	adds	r7, #16
 80147b6:	46bd      	mov	sp, r7
 80147b8:	bd80      	pop	{r7, pc}
 80147ba:	bf00      	nop
 80147bc:	40013000 	.word	0x40013000
 80147c0:	40003800 	.word	0x40003800
 80147c4:	40003c00 	.word	0x40003c00

080147c8 <HAL_SPI_Transmit>:
 80147c8:	b580      	push	{r7, lr}
 80147ca:	b088      	sub	sp, #32
 80147cc:	af02      	add	r7, sp, #8
 80147ce:	60f8      	str	r0, [r7, #12]
 80147d0:	60b9      	str	r1, [r7, #8]
 80147d2:	603b      	str	r3, [r7, #0]
 80147d4:	4613      	mov	r3, r2
 80147d6:	80fb      	strh	r3, [r7, #6]
 80147d8:	68fb      	ldr	r3, [r7, #12]
 80147da:	681b      	ldr	r3, [r3, #0]
 80147dc:	3320      	adds	r3, #32
 80147de:	617b      	str	r3, [r7, #20]
 80147e0:	f7f4 fd2c 	bl	800923c <HAL_GetTick>
 80147e4:	6138      	str	r0, [r7, #16]
 80147e6:	68fb      	ldr	r3, [r7, #12]
 80147e8:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80147ec:	b2db      	uxtb	r3, r3
 80147ee:	2b01      	cmp	r3, #1
 80147f0:	d001      	beq.n	80147f6 <HAL_SPI_Transmit+0x2e>
 80147f2:	2302      	movs	r3, #2
 80147f4:	e1d1      	b.n	8014b9a <HAL_SPI_Transmit+0x3d2>
 80147f6:	68bb      	ldr	r3, [r7, #8]
 80147f8:	2b00      	cmp	r3, #0
 80147fa:	d002      	beq.n	8014802 <HAL_SPI_Transmit+0x3a>
 80147fc:	88fb      	ldrh	r3, [r7, #6]
 80147fe:	2b00      	cmp	r3, #0
 8014800:	d101      	bne.n	8014806 <HAL_SPI_Transmit+0x3e>
 8014802:	2301      	movs	r3, #1
 8014804:	e1c9      	b.n	8014b9a <HAL_SPI_Transmit+0x3d2>
 8014806:	68fb      	ldr	r3, [r7, #12]
 8014808:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 801480c:	2b01      	cmp	r3, #1
 801480e:	d101      	bne.n	8014814 <HAL_SPI_Transmit+0x4c>
 8014810:	2302      	movs	r3, #2
 8014812:	e1c2      	b.n	8014b9a <HAL_SPI_Transmit+0x3d2>
 8014814:	68fb      	ldr	r3, [r7, #12]
 8014816:	2201      	movs	r2, #1
 8014818:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 801481c:	68fb      	ldr	r3, [r7, #12]
 801481e:	2203      	movs	r2, #3
 8014820:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
 8014824:	68fb      	ldr	r3, [r7, #12]
 8014826:	2200      	movs	r2, #0
 8014828:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 801482c:	68fb      	ldr	r3, [r7, #12]
 801482e:	68ba      	ldr	r2, [r7, #8]
 8014830:	65da      	str	r2, [r3, #92]	@ 0x5c
 8014832:	68fb      	ldr	r3, [r7, #12]
 8014834:	88fa      	ldrh	r2, [r7, #6]
 8014836:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 801483a:	68fb      	ldr	r3, [r7, #12]
 801483c:	88fa      	ldrh	r2, [r7, #6]
 801483e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8014842:	68fb      	ldr	r3, [r7, #12]
 8014844:	2200      	movs	r2, #0
 8014846:	665a      	str	r2, [r3, #100]	@ 0x64
 8014848:	68fb      	ldr	r3, [r7, #12]
 801484a:	2200      	movs	r2, #0
 801484c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 8014850:	68fb      	ldr	r3, [r7, #12]
 8014852:	2200      	movs	r2, #0
 8014854:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8014858:	68fb      	ldr	r3, [r7, #12]
 801485a:	2200      	movs	r2, #0
 801485c:	675a      	str	r2, [r3, #116]	@ 0x74
 801485e:	68fb      	ldr	r3, [r7, #12]
 8014860:	2200      	movs	r2, #0
 8014862:	671a      	str	r2, [r3, #112]	@ 0x70
 8014864:	68fb      	ldr	r3, [r7, #12]
 8014866:	689b      	ldr	r3, [r3, #8]
 8014868:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 801486c:	d108      	bne.n	8014880 <HAL_SPI_Transmit+0xb8>
 801486e:	68fb      	ldr	r3, [r7, #12]
 8014870:	681b      	ldr	r3, [r3, #0]
 8014872:	681a      	ldr	r2, [r3, #0]
 8014874:	68fb      	ldr	r3, [r7, #12]
 8014876:	681b      	ldr	r3, [r3, #0]
 8014878:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 801487c:	601a      	str	r2, [r3, #0]
 801487e:	e009      	b.n	8014894 <HAL_SPI_Transmit+0xcc>
 8014880:	68fb      	ldr	r3, [r7, #12]
 8014882:	681b      	ldr	r3, [r3, #0]
 8014884:	68db      	ldr	r3, [r3, #12]
 8014886:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 801488a:	68fb      	ldr	r3, [r7, #12]
 801488c:	681b      	ldr	r3, [r3, #0]
 801488e:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8014892:	60da      	str	r2, [r3, #12]
 8014894:	68fb      	ldr	r3, [r7, #12]
 8014896:	681b      	ldr	r3, [r3, #0]
 8014898:	685a      	ldr	r2, [r3, #4]
 801489a:	4b96      	ldr	r3, [pc, #600]	@ (8014af4 <HAL_SPI_Transmit+0x32c>)
 801489c:	4013      	ands	r3, r2
 801489e:	88f9      	ldrh	r1, [r7, #6]
 80148a0:	68fa      	ldr	r2, [r7, #12]
 80148a2:	6812      	ldr	r2, [r2, #0]
 80148a4:	430b      	orrs	r3, r1
 80148a6:	6053      	str	r3, [r2, #4]
 80148a8:	68fb      	ldr	r3, [r7, #12]
 80148aa:	681b      	ldr	r3, [r3, #0]
 80148ac:	681a      	ldr	r2, [r3, #0]
 80148ae:	68fb      	ldr	r3, [r7, #12]
 80148b0:	681b      	ldr	r3, [r3, #0]
 80148b2:	f042 0201 	orr.w	r2, r2, #1
 80148b6:	601a      	str	r2, [r3, #0]
 80148b8:	68fb      	ldr	r3, [r7, #12]
 80148ba:	685b      	ldr	r3, [r3, #4]
 80148bc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80148c0:	d107      	bne.n	80148d2 <HAL_SPI_Transmit+0x10a>
 80148c2:	68fb      	ldr	r3, [r7, #12]
 80148c4:	681b      	ldr	r3, [r3, #0]
 80148c6:	681a      	ldr	r2, [r3, #0]
 80148c8:	68fb      	ldr	r3, [r7, #12]
 80148ca:	681b      	ldr	r3, [r3, #0]
 80148cc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80148d0:	601a      	str	r2, [r3, #0]
 80148d2:	68fb      	ldr	r3, [r7, #12]
 80148d4:	68db      	ldr	r3, [r3, #12]
 80148d6:	2b0f      	cmp	r3, #15
 80148d8:	d947      	bls.n	801496a <HAL_SPI_Transmit+0x1a2>
 80148da:	e03f      	b.n	801495c <HAL_SPI_Transmit+0x194>
 80148dc:	68fb      	ldr	r3, [r7, #12]
 80148de:	681b      	ldr	r3, [r3, #0]
 80148e0:	695b      	ldr	r3, [r3, #20]
 80148e2:	f003 0302 	and.w	r3, r3, #2
 80148e6:	2b02      	cmp	r3, #2
 80148e8:	d114      	bne.n	8014914 <HAL_SPI_Transmit+0x14c>
 80148ea:	68fb      	ldr	r3, [r7, #12]
 80148ec:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80148ee:	68fb      	ldr	r3, [r7, #12]
 80148f0:	681b      	ldr	r3, [r3, #0]
 80148f2:	6812      	ldr	r2, [r2, #0]
 80148f4:	621a      	str	r2, [r3, #32]
 80148f6:	68fb      	ldr	r3, [r7, #12]
 80148f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80148fa:	1d1a      	adds	r2, r3, #4
 80148fc:	68fb      	ldr	r3, [r7, #12]
 80148fe:	65da      	str	r2, [r3, #92]	@ 0x5c
 8014900:	68fb      	ldr	r3, [r7, #12]
 8014902:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8014906:	b29b      	uxth	r3, r3
 8014908:	3b01      	subs	r3, #1
 801490a:	b29a      	uxth	r2, r3
 801490c:	68fb      	ldr	r3, [r7, #12]
 801490e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8014912:	e023      	b.n	801495c <HAL_SPI_Transmit+0x194>
 8014914:	f7f4 fc92 	bl	800923c <HAL_GetTick>
 8014918:	4602      	mov	r2, r0
 801491a:	693b      	ldr	r3, [r7, #16]
 801491c:	1ad3      	subs	r3, r2, r3
 801491e:	683a      	ldr	r2, [r7, #0]
 8014920:	429a      	cmp	r2, r3
 8014922:	d803      	bhi.n	801492c <HAL_SPI_Transmit+0x164>
 8014924:	683b      	ldr	r3, [r7, #0]
 8014926:	f1b3 3fff 	cmp.w	r3, #4294967295
 801492a:	d102      	bne.n	8014932 <HAL_SPI_Transmit+0x16a>
 801492c:	683b      	ldr	r3, [r7, #0]
 801492e:	2b00      	cmp	r3, #0
 8014930:	d114      	bne.n	801495c <HAL_SPI_Transmit+0x194>
 8014932:	68f8      	ldr	r0, [r7, #12]
 8014934:	f001 fa9c 	bl	8015e70 <SPI_CloseTransfer>
 8014938:	68fb      	ldr	r3, [r7, #12]
 801493a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801493e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8014942:	68fb      	ldr	r3, [r7, #12]
 8014944:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8014948:	68fb      	ldr	r3, [r7, #12]
 801494a:	2201      	movs	r2, #1
 801494c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
 8014950:	68fb      	ldr	r3, [r7, #12]
 8014952:	2200      	movs	r2, #0
 8014954:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 8014958:	2303      	movs	r3, #3
 801495a:	e11e      	b.n	8014b9a <HAL_SPI_Transmit+0x3d2>
 801495c:	68fb      	ldr	r3, [r7, #12]
 801495e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8014962:	b29b      	uxth	r3, r3
 8014964:	2b00      	cmp	r3, #0
 8014966:	d1b9      	bne.n	80148dc <HAL_SPI_Transmit+0x114>
 8014968:	e0f1      	b.n	8014b4e <HAL_SPI_Transmit+0x386>
 801496a:	68fb      	ldr	r3, [r7, #12]
 801496c:	68db      	ldr	r3, [r3, #12]
 801496e:	2b07      	cmp	r3, #7
 8014970:	f240 80e6 	bls.w	8014b40 <HAL_SPI_Transmit+0x378>
 8014974:	e05d      	b.n	8014a32 <HAL_SPI_Transmit+0x26a>
 8014976:	68fb      	ldr	r3, [r7, #12]
 8014978:	681b      	ldr	r3, [r3, #0]
 801497a:	695b      	ldr	r3, [r3, #20]
 801497c:	f003 0302 	and.w	r3, r3, #2
 8014980:	2b02      	cmp	r3, #2
 8014982:	d132      	bne.n	80149ea <HAL_SPI_Transmit+0x222>
 8014984:	68fb      	ldr	r3, [r7, #12]
 8014986:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801498a:	b29b      	uxth	r3, r3
 801498c:	2b01      	cmp	r3, #1
 801498e:	d918      	bls.n	80149c2 <HAL_SPI_Transmit+0x1fa>
 8014990:	68fb      	ldr	r3, [r7, #12]
 8014992:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014994:	2b00      	cmp	r3, #0
 8014996:	d014      	beq.n	80149c2 <HAL_SPI_Transmit+0x1fa>
 8014998:	68fb      	ldr	r3, [r7, #12]
 801499a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 801499c:	68fb      	ldr	r3, [r7, #12]
 801499e:	681b      	ldr	r3, [r3, #0]
 80149a0:	6812      	ldr	r2, [r2, #0]
 80149a2:	621a      	str	r2, [r3, #32]
 80149a4:	68fb      	ldr	r3, [r7, #12]
 80149a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80149a8:	1d1a      	adds	r2, r3, #4
 80149aa:	68fb      	ldr	r3, [r7, #12]
 80149ac:	65da      	str	r2, [r3, #92]	@ 0x5c
 80149ae:	68fb      	ldr	r3, [r7, #12]
 80149b0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80149b4:	b29b      	uxth	r3, r3
 80149b6:	3b02      	subs	r3, #2
 80149b8:	b29a      	uxth	r2, r3
 80149ba:	68fb      	ldr	r3, [r7, #12]
 80149bc:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80149c0:	e037      	b.n	8014a32 <HAL_SPI_Transmit+0x26a>
 80149c2:	68fb      	ldr	r3, [r7, #12]
 80149c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80149c6:	881a      	ldrh	r2, [r3, #0]
 80149c8:	697b      	ldr	r3, [r7, #20]
 80149ca:	801a      	strh	r2, [r3, #0]
 80149cc:	68fb      	ldr	r3, [r7, #12]
 80149ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80149d0:	1c9a      	adds	r2, r3, #2
 80149d2:	68fb      	ldr	r3, [r7, #12]
 80149d4:	65da      	str	r2, [r3, #92]	@ 0x5c
 80149d6:	68fb      	ldr	r3, [r7, #12]
 80149d8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80149dc:	b29b      	uxth	r3, r3
 80149de:	3b01      	subs	r3, #1
 80149e0:	b29a      	uxth	r2, r3
 80149e2:	68fb      	ldr	r3, [r7, #12]
 80149e4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80149e8:	e023      	b.n	8014a32 <HAL_SPI_Transmit+0x26a>
 80149ea:	f7f4 fc27 	bl	800923c <HAL_GetTick>
 80149ee:	4602      	mov	r2, r0
 80149f0:	693b      	ldr	r3, [r7, #16]
 80149f2:	1ad3      	subs	r3, r2, r3
 80149f4:	683a      	ldr	r2, [r7, #0]
 80149f6:	429a      	cmp	r2, r3
 80149f8:	d803      	bhi.n	8014a02 <HAL_SPI_Transmit+0x23a>
 80149fa:	683b      	ldr	r3, [r7, #0]
 80149fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014a00:	d102      	bne.n	8014a08 <HAL_SPI_Transmit+0x240>
 8014a02:	683b      	ldr	r3, [r7, #0]
 8014a04:	2b00      	cmp	r3, #0
 8014a06:	d114      	bne.n	8014a32 <HAL_SPI_Transmit+0x26a>
 8014a08:	68f8      	ldr	r0, [r7, #12]
 8014a0a:	f001 fa31 	bl	8015e70 <SPI_CloseTransfer>
 8014a0e:	68fb      	ldr	r3, [r7, #12]
 8014a10:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8014a14:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8014a18:	68fb      	ldr	r3, [r7, #12]
 8014a1a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8014a1e:	68fb      	ldr	r3, [r7, #12]
 8014a20:	2201      	movs	r2, #1
 8014a22:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
 8014a26:	68fb      	ldr	r3, [r7, #12]
 8014a28:	2200      	movs	r2, #0
 8014a2a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 8014a2e:	2303      	movs	r3, #3
 8014a30:	e0b3      	b.n	8014b9a <HAL_SPI_Transmit+0x3d2>
 8014a32:	68fb      	ldr	r3, [r7, #12]
 8014a34:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8014a38:	b29b      	uxth	r3, r3
 8014a3a:	2b00      	cmp	r3, #0
 8014a3c:	d19b      	bne.n	8014976 <HAL_SPI_Transmit+0x1ae>
 8014a3e:	e086      	b.n	8014b4e <HAL_SPI_Transmit+0x386>
 8014a40:	68fb      	ldr	r3, [r7, #12]
 8014a42:	681b      	ldr	r3, [r3, #0]
 8014a44:	695b      	ldr	r3, [r3, #20]
 8014a46:	f003 0302 	and.w	r3, r3, #2
 8014a4a:	2b02      	cmp	r3, #2
 8014a4c:	d154      	bne.n	8014af8 <HAL_SPI_Transmit+0x330>
 8014a4e:	68fb      	ldr	r3, [r7, #12]
 8014a50:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8014a54:	b29b      	uxth	r3, r3
 8014a56:	2b03      	cmp	r3, #3
 8014a58:	d918      	bls.n	8014a8c <HAL_SPI_Transmit+0x2c4>
 8014a5a:	68fb      	ldr	r3, [r7, #12]
 8014a5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014a5e:	2b40      	cmp	r3, #64	@ 0x40
 8014a60:	d914      	bls.n	8014a8c <HAL_SPI_Transmit+0x2c4>
 8014a62:	68fb      	ldr	r3, [r7, #12]
 8014a64:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8014a66:	68fb      	ldr	r3, [r7, #12]
 8014a68:	681b      	ldr	r3, [r3, #0]
 8014a6a:	6812      	ldr	r2, [r2, #0]
 8014a6c:	621a      	str	r2, [r3, #32]
 8014a6e:	68fb      	ldr	r3, [r7, #12]
 8014a70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8014a72:	1d1a      	adds	r2, r3, #4
 8014a74:	68fb      	ldr	r3, [r7, #12]
 8014a76:	65da      	str	r2, [r3, #92]	@ 0x5c
 8014a78:	68fb      	ldr	r3, [r7, #12]
 8014a7a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8014a7e:	b29b      	uxth	r3, r3
 8014a80:	3b04      	subs	r3, #4
 8014a82:	b29a      	uxth	r2, r3
 8014a84:	68fb      	ldr	r3, [r7, #12]
 8014a86:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8014a8a:	e059      	b.n	8014b40 <HAL_SPI_Transmit+0x378>
 8014a8c:	68fb      	ldr	r3, [r7, #12]
 8014a8e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8014a92:	b29b      	uxth	r3, r3
 8014a94:	2b01      	cmp	r3, #1
 8014a96:	d917      	bls.n	8014ac8 <HAL_SPI_Transmit+0x300>
 8014a98:	68fb      	ldr	r3, [r7, #12]
 8014a9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014a9c:	2b00      	cmp	r3, #0
 8014a9e:	d013      	beq.n	8014ac8 <HAL_SPI_Transmit+0x300>
 8014aa0:	68fb      	ldr	r3, [r7, #12]
 8014aa2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8014aa4:	881a      	ldrh	r2, [r3, #0]
 8014aa6:	697b      	ldr	r3, [r7, #20]
 8014aa8:	801a      	strh	r2, [r3, #0]
 8014aaa:	68fb      	ldr	r3, [r7, #12]
 8014aac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8014aae:	1c9a      	adds	r2, r3, #2
 8014ab0:	68fb      	ldr	r3, [r7, #12]
 8014ab2:	65da      	str	r2, [r3, #92]	@ 0x5c
 8014ab4:	68fb      	ldr	r3, [r7, #12]
 8014ab6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8014aba:	b29b      	uxth	r3, r3
 8014abc:	3b02      	subs	r3, #2
 8014abe:	b29a      	uxth	r2, r3
 8014ac0:	68fb      	ldr	r3, [r7, #12]
 8014ac2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8014ac6:	e03b      	b.n	8014b40 <HAL_SPI_Transmit+0x378>
 8014ac8:	68fb      	ldr	r3, [r7, #12]
 8014aca:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8014acc:	68fb      	ldr	r3, [r7, #12]
 8014ace:	681b      	ldr	r3, [r3, #0]
 8014ad0:	3320      	adds	r3, #32
 8014ad2:	7812      	ldrb	r2, [r2, #0]
 8014ad4:	701a      	strb	r2, [r3, #0]
 8014ad6:	68fb      	ldr	r3, [r7, #12]
 8014ad8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8014ada:	1c5a      	adds	r2, r3, #1
 8014adc:	68fb      	ldr	r3, [r7, #12]
 8014ade:	65da      	str	r2, [r3, #92]	@ 0x5c
 8014ae0:	68fb      	ldr	r3, [r7, #12]
 8014ae2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8014ae6:	b29b      	uxth	r3, r3
 8014ae8:	3b01      	subs	r3, #1
 8014aea:	b29a      	uxth	r2, r3
 8014aec:	68fb      	ldr	r3, [r7, #12]
 8014aee:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8014af2:	e025      	b.n	8014b40 <HAL_SPI_Transmit+0x378>
 8014af4:	ffff0000 	.word	0xffff0000
 8014af8:	f7f4 fba0 	bl	800923c <HAL_GetTick>
 8014afc:	4602      	mov	r2, r0
 8014afe:	693b      	ldr	r3, [r7, #16]
 8014b00:	1ad3      	subs	r3, r2, r3
 8014b02:	683a      	ldr	r2, [r7, #0]
 8014b04:	429a      	cmp	r2, r3
 8014b06:	d803      	bhi.n	8014b10 <HAL_SPI_Transmit+0x348>
 8014b08:	683b      	ldr	r3, [r7, #0]
 8014b0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014b0e:	d102      	bne.n	8014b16 <HAL_SPI_Transmit+0x34e>
 8014b10:	683b      	ldr	r3, [r7, #0]
 8014b12:	2b00      	cmp	r3, #0
 8014b14:	d114      	bne.n	8014b40 <HAL_SPI_Transmit+0x378>
 8014b16:	68f8      	ldr	r0, [r7, #12]
 8014b18:	f001 f9aa 	bl	8015e70 <SPI_CloseTransfer>
 8014b1c:	68fb      	ldr	r3, [r7, #12]
 8014b1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8014b22:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8014b26:	68fb      	ldr	r3, [r7, #12]
 8014b28:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8014b2c:	68fb      	ldr	r3, [r7, #12]
 8014b2e:	2201      	movs	r2, #1
 8014b30:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
 8014b34:	68fb      	ldr	r3, [r7, #12]
 8014b36:	2200      	movs	r2, #0
 8014b38:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 8014b3c:	2303      	movs	r3, #3
 8014b3e:	e02c      	b.n	8014b9a <HAL_SPI_Transmit+0x3d2>
 8014b40:	68fb      	ldr	r3, [r7, #12]
 8014b42:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8014b46:	b29b      	uxth	r3, r3
 8014b48:	2b00      	cmp	r3, #0
 8014b4a:	f47f af79 	bne.w	8014a40 <HAL_SPI_Transmit+0x278>
 8014b4e:	693b      	ldr	r3, [r7, #16]
 8014b50:	9300      	str	r3, [sp, #0]
 8014b52:	683b      	ldr	r3, [r7, #0]
 8014b54:	2200      	movs	r2, #0
 8014b56:	2108      	movs	r1, #8
 8014b58:	68f8      	ldr	r0, [r7, #12]
 8014b5a:	f001 fa29 	bl	8015fb0 <SPI_WaitOnFlagUntilTimeout>
 8014b5e:	4603      	mov	r3, r0
 8014b60:	2b00      	cmp	r3, #0
 8014b62:	d007      	beq.n	8014b74 <HAL_SPI_Transmit+0x3ac>
 8014b64:	68fb      	ldr	r3, [r7, #12]
 8014b66:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8014b6a:	f043 0220 	orr.w	r2, r3, #32
 8014b6e:	68fb      	ldr	r3, [r7, #12]
 8014b70:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8014b74:	68f8      	ldr	r0, [r7, #12]
 8014b76:	f001 f97b 	bl	8015e70 <SPI_CloseTransfer>
 8014b7a:	68fb      	ldr	r3, [r7, #12]
 8014b7c:	2201      	movs	r2, #1
 8014b7e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
 8014b82:	68fb      	ldr	r3, [r7, #12]
 8014b84:	2200      	movs	r2, #0
 8014b86:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 8014b8a:	68fb      	ldr	r3, [r7, #12]
 8014b8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8014b90:	2b00      	cmp	r3, #0
 8014b92:	d001      	beq.n	8014b98 <HAL_SPI_Transmit+0x3d0>
 8014b94:	2301      	movs	r3, #1
 8014b96:	e000      	b.n	8014b9a <HAL_SPI_Transmit+0x3d2>
 8014b98:	2300      	movs	r3, #0
 8014b9a:	4618      	mov	r0, r3
 8014b9c:	3718      	adds	r7, #24
 8014b9e:	46bd      	mov	sp, r7
 8014ba0:	bd80      	pop	{r7, pc}
 8014ba2:	bf00      	nop

08014ba4 <HAL_SPI_Receive>:
 8014ba4:	b580      	push	{r7, lr}
 8014ba6:	b088      	sub	sp, #32
 8014ba8:	af00      	add	r7, sp, #0
 8014baa:	60f8      	str	r0, [r7, #12]
 8014bac:	60b9      	str	r1, [r7, #8]
 8014bae:	603b      	str	r3, [r7, #0]
 8014bb0:	4613      	mov	r3, r2
 8014bb2:	80fb      	strh	r3, [r7, #6]
 8014bb4:	68fb      	ldr	r3, [r7, #12]
 8014bb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014bb8:	095b      	lsrs	r3, r3, #5
 8014bba:	b29b      	uxth	r3, r3
 8014bbc:	3301      	adds	r3, #1
 8014bbe:	83fb      	strh	r3, [r7, #30]
 8014bc0:	68fb      	ldr	r3, [r7, #12]
 8014bc2:	681b      	ldr	r3, [r3, #0]
 8014bc4:	3330      	adds	r3, #48	@ 0x30
 8014bc6:	61bb      	str	r3, [r7, #24]
 8014bc8:	f7f4 fb38 	bl	800923c <HAL_GetTick>
 8014bcc:	6178      	str	r0, [r7, #20]
 8014bce:	68fb      	ldr	r3, [r7, #12]
 8014bd0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8014bd4:	b2db      	uxtb	r3, r3
 8014bd6:	2b01      	cmp	r3, #1
 8014bd8:	d001      	beq.n	8014bde <HAL_SPI_Receive+0x3a>
 8014bda:	2302      	movs	r3, #2
 8014bdc:	e250      	b.n	8015080 <HAL_SPI_Receive+0x4dc>
 8014bde:	68bb      	ldr	r3, [r7, #8]
 8014be0:	2b00      	cmp	r3, #0
 8014be2:	d002      	beq.n	8014bea <HAL_SPI_Receive+0x46>
 8014be4:	88fb      	ldrh	r3, [r7, #6]
 8014be6:	2b00      	cmp	r3, #0
 8014be8:	d101      	bne.n	8014bee <HAL_SPI_Receive+0x4a>
 8014bea:	2301      	movs	r3, #1
 8014bec:	e248      	b.n	8015080 <HAL_SPI_Receive+0x4dc>
 8014bee:	68fb      	ldr	r3, [r7, #12]
 8014bf0:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8014bf4:	2b01      	cmp	r3, #1
 8014bf6:	d101      	bne.n	8014bfc <HAL_SPI_Receive+0x58>
 8014bf8:	2302      	movs	r3, #2
 8014bfa:	e241      	b.n	8015080 <HAL_SPI_Receive+0x4dc>
 8014bfc:	68fb      	ldr	r3, [r7, #12]
 8014bfe:	2201      	movs	r2, #1
 8014c00:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 8014c04:	68fb      	ldr	r3, [r7, #12]
 8014c06:	2204      	movs	r2, #4
 8014c08:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
 8014c0c:	68fb      	ldr	r3, [r7, #12]
 8014c0e:	2200      	movs	r2, #0
 8014c10:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8014c14:	68fb      	ldr	r3, [r7, #12]
 8014c16:	68ba      	ldr	r2, [r7, #8]
 8014c18:	665a      	str	r2, [r3, #100]	@ 0x64
 8014c1a:	68fb      	ldr	r3, [r7, #12]
 8014c1c:	88fa      	ldrh	r2, [r7, #6]
 8014c1e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 8014c22:	68fb      	ldr	r3, [r7, #12]
 8014c24:	88fa      	ldrh	r2, [r7, #6]
 8014c26:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8014c2a:	68fb      	ldr	r3, [r7, #12]
 8014c2c:	2200      	movs	r2, #0
 8014c2e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8014c30:	68fb      	ldr	r3, [r7, #12]
 8014c32:	2200      	movs	r2, #0
 8014c34:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8014c38:	68fb      	ldr	r3, [r7, #12]
 8014c3a:	2200      	movs	r2, #0
 8014c3c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8014c40:	68fb      	ldr	r3, [r7, #12]
 8014c42:	2200      	movs	r2, #0
 8014c44:	671a      	str	r2, [r3, #112]	@ 0x70
 8014c46:	68fb      	ldr	r3, [r7, #12]
 8014c48:	2200      	movs	r2, #0
 8014c4a:	675a      	str	r2, [r3, #116]	@ 0x74
 8014c4c:	68fb      	ldr	r3, [r7, #12]
 8014c4e:	689b      	ldr	r3, [r3, #8]
 8014c50:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8014c54:	d108      	bne.n	8014c68 <HAL_SPI_Receive+0xc4>
 8014c56:	68fb      	ldr	r3, [r7, #12]
 8014c58:	681b      	ldr	r3, [r3, #0]
 8014c5a:	681a      	ldr	r2, [r3, #0]
 8014c5c:	68fb      	ldr	r3, [r7, #12]
 8014c5e:	681b      	ldr	r3, [r3, #0]
 8014c60:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8014c64:	601a      	str	r2, [r3, #0]
 8014c66:	e009      	b.n	8014c7c <HAL_SPI_Receive+0xd8>
 8014c68:	68fb      	ldr	r3, [r7, #12]
 8014c6a:	681b      	ldr	r3, [r3, #0]
 8014c6c:	68db      	ldr	r3, [r3, #12]
 8014c6e:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8014c72:	68fb      	ldr	r3, [r7, #12]
 8014c74:	681b      	ldr	r3, [r3, #0]
 8014c76:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8014c7a:	60da      	str	r2, [r3, #12]
 8014c7c:	68fb      	ldr	r3, [r7, #12]
 8014c7e:	681b      	ldr	r3, [r3, #0]
 8014c80:	685a      	ldr	r2, [r3, #4]
 8014c82:	4b95      	ldr	r3, [pc, #596]	@ (8014ed8 <HAL_SPI_Receive+0x334>)
 8014c84:	4013      	ands	r3, r2
 8014c86:	88f9      	ldrh	r1, [r7, #6]
 8014c88:	68fa      	ldr	r2, [r7, #12]
 8014c8a:	6812      	ldr	r2, [r2, #0]
 8014c8c:	430b      	orrs	r3, r1
 8014c8e:	6053      	str	r3, [r2, #4]
 8014c90:	68fb      	ldr	r3, [r7, #12]
 8014c92:	681b      	ldr	r3, [r3, #0]
 8014c94:	681a      	ldr	r2, [r3, #0]
 8014c96:	68fb      	ldr	r3, [r7, #12]
 8014c98:	681b      	ldr	r3, [r3, #0]
 8014c9a:	f042 0201 	orr.w	r2, r2, #1
 8014c9e:	601a      	str	r2, [r3, #0]
 8014ca0:	68fb      	ldr	r3, [r7, #12]
 8014ca2:	685b      	ldr	r3, [r3, #4]
 8014ca4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8014ca8:	d107      	bne.n	8014cba <HAL_SPI_Receive+0x116>
 8014caa:	68fb      	ldr	r3, [r7, #12]
 8014cac:	681b      	ldr	r3, [r3, #0]
 8014cae:	681a      	ldr	r2, [r3, #0]
 8014cb0:	68fb      	ldr	r3, [r7, #12]
 8014cb2:	681b      	ldr	r3, [r3, #0]
 8014cb4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8014cb8:	601a      	str	r2, [r3, #0]
 8014cba:	68fb      	ldr	r3, [r7, #12]
 8014cbc:	68db      	ldr	r3, [r3, #12]
 8014cbe:	2b0f      	cmp	r3, #15
 8014cc0:	d96c      	bls.n	8014d9c <HAL_SPI_Receive+0x1f8>
 8014cc2:	e064      	b.n	8014d8e <HAL_SPI_Receive+0x1ea>
 8014cc4:	68fb      	ldr	r3, [r7, #12]
 8014cc6:	681b      	ldr	r3, [r3, #0]
 8014cc8:	695b      	ldr	r3, [r3, #20]
 8014cca:	613b      	str	r3, [r7, #16]
 8014ccc:	68fb      	ldr	r3, [r7, #12]
 8014cce:	681b      	ldr	r3, [r3, #0]
 8014cd0:	695b      	ldr	r3, [r3, #20]
 8014cd2:	f003 0301 	and.w	r3, r3, #1
 8014cd6:	2b01      	cmp	r3, #1
 8014cd8:	d114      	bne.n	8014d04 <HAL_SPI_Receive+0x160>
 8014cda:	68fb      	ldr	r3, [r7, #12]
 8014cdc:	681a      	ldr	r2, [r3, #0]
 8014cde:	68fb      	ldr	r3, [r7, #12]
 8014ce0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014ce2:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8014ce4:	601a      	str	r2, [r3, #0]
 8014ce6:	68fb      	ldr	r3, [r7, #12]
 8014ce8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014cea:	1d1a      	adds	r2, r3, #4
 8014cec:	68fb      	ldr	r3, [r7, #12]
 8014cee:	665a      	str	r2, [r3, #100]	@ 0x64
 8014cf0:	68fb      	ldr	r3, [r7, #12]
 8014cf2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014cf6:	b29b      	uxth	r3, r3
 8014cf8:	3b01      	subs	r3, #1
 8014cfa:	b29a      	uxth	r2, r3
 8014cfc:	68fb      	ldr	r3, [r7, #12]
 8014cfe:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8014d02:	e044      	b.n	8014d8e <HAL_SPI_Receive+0x1ea>
 8014d04:	68fb      	ldr	r3, [r7, #12]
 8014d06:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014d0a:	b29b      	uxth	r3, r3
 8014d0c:	8bfa      	ldrh	r2, [r7, #30]
 8014d0e:	429a      	cmp	r2, r3
 8014d10:	d919      	bls.n	8014d46 <HAL_SPI_Receive+0x1a2>
 8014d12:	693b      	ldr	r3, [r7, #16]
 8014d14:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8014d18:	2b00      	cmp	r3, #0
 8014d1a:	d014      	beq.n	8014d46 <HAL_SPI_Receive+0x1a2>
 8014d1c:	68fb      	ldr	r3, [r7, #12]
 8014d1e:	681a      	ldr	r2, [r3, #0]
 8014d20:	68fb      	ldr	r3, [r7, #12]
 8014d22:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014d24:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8014d26:	601a      	str	r2, [r3, #0]
 8014d28:	68fb      	ldr	r3, [r7, #12]
 8014d2a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014d2c:	1d1a      	adds	r2, r3, #4
 8014d2e:	68fb      	ldr	r3, [r7, #12]
 8014d30:	665a      	str	r2, [r3, #100]	@ 0x64
 8014d32:	68fb      	ldr	r3, [r7, #12]
 8014d34:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014d38:	b29b      	uxth	r3, r3
 8014d3a:	3b01      	subs	r3, #1
 8014d3c:	b29a      	uxth	r2, r3
 8014d3e:	68fb      	ldr	r3, [r7, #12]
 8014d40:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8014d44:	e023      	b.n	8014d8e <HAL_SPI_Receive+0x1ea>
 8014d46:	f7f4 fa79 	bl	800923c <HAL_GetTick>
 8014d4a:	4602      	mov	r2, r0
 8014d4c:	697b      	ldr	r3, [r7, #20]
 8014d4e:	1ad3      	subs	r3, r2, r3
 8014d50:	683a      	ldr	r2, [r7, #0]
 8014d52:	429a      	cmp	r2, r3
 8014d54:	d803      	bhi.n	8014d5e <HAL_SPI_Receive+0x1ba>
 8014d56:	683b      	ldr	r3, [r7, #0]
 8014d58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014d5c:	d102      	bne.n	8014d64 <HAL_SPI_Receive+0x1c0>
 8014d5e:	683b      	ldr	r3, [r7, #0]
 8014d60:	2b00      	cmp	r3, #0
 8014d62:	d114      	bne.n	8014d8e <HAL_SPI_Receive+0x1ea>
 8014d64:	68f8      	ldr	r0, [r7, #12]
 8014d66:	f001 f883 	bl	8015e70 <SPI_CloseTransfer>
 8014d6a:	68fb      	ldr	r3, [r7, #12]
 8014d6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8014d70:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8014d74:	68fb      	ldr	r3, [r7, #12]
 8014d76:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8014d7a:	68fb      	ldr	r3, [r7, #12]
 8014d7c:	2201      	movs	r2, #1
 8014d7e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
 8014d82:	68fb      	ldr	r3, [r7, #12]
 8014d84:	2200      	movs	r2, #0
 8014d86:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 8014d8a:	2303      	movs	r3, #3
 8014d8c:	e178      	b.n	8015080 <HAL_SPI_Receive+0x4dc>
 8014d8e:	68fb      	ldr	r3, [r7, #12]
 8014d90:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014d94:	b29b      	uxth	r3, r3
 8014d96:	2b00      	cmp	r3, #0
 8014d98:	d194      	bne.n	8014cc4 <HAL_SPI_Receive+0x120>
 8014d9a:	e15e      	b.n	801505a <HAL_SPI_Receive+0x4b6>
 8014d9c:	68fb      	ldr	r3, [r7, #12]
 8014d9e:	68db      	ldr	r3, [r3, #12]
 8014da0:	2b07      	cmp	r3, #7
 8014da2:	f240 8153 	bls.w	801504c <HAL_SPI_Receive+0x4a8>
 8014da6:	e08f      	b.n	8014ec8 <HAL_SPI_Receive+0x324>
 8014da8:	68fb      	ldr	r3, [r7, #12]
 8014daa:	681b      	ldr	r3, [r3, #0]
 8014dac:	695b      	ldr	r3, [r3, #20]
 8014dae:	613b      	str	r3, [r7, #16]
 8014db0:	68fb      	ldr	r3, [r7, #12]
 8014db2:	681b      	ldr	r3, [r3, #0]
 8014db4:	695b      	ldr	r3, [r3, #20]
 8014db6:	f003 0301 	and.w	r3, r3, #1
 8014dba:	2b01      	cmp	r3, #1
 8014dbc:	d114      	bne.n	8014de8 <HAL_SPI_Receive+0x244>
 8014dbe:	68fb      	ldr	r3, [r7, #12]
 8014dc0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014dc2:	69ba      	ldr	r2, [r7, #24]
 8014dc4:	8812      	ldrh	r2, [r2, #0]
 8014dc6:	b292      	uxth	r2, r2
 8014dc8:	801a      	strh	r2, [r3, #0]
 8014dca:	68fb      	ldr	r3, [r7, #12]
 8014dcc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014dce:	1c9a      	adds	r2, r3, #2
 8014dd0:	68fb      	ldr	r3, [r7, #12]
 8014dd2:	665a      	str	r2, [r3, #100]	@ 0x64
 8014dd4:	68fb      	ldr	r3, [r7, #12]
 8014dd6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014dda:	b29b      	uxth	r3, r3
 8014ddc:	3b01      	subs	r3, #1
 8014dde:	b29a      	uxth	r2, r3
 8014de0:	68fb      	ldr	r3, [r7, #12]
 8014de2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8014de6:	e06f      	b.n	8014ec8 <HAL_SPI_Receive+0x324>
 8014de8:	68fb      	ldr	r3, [r7, #12]
 8014dea:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014dee:	b29b      	uxth	r3, r3
 8014df0:	8bfa      	ldrh	r2, [r7, #30]
 8014df2:	429a      	cmp	r2, r3
 8014df4:	d924      	bls.n	8014e40 <HAL_SPI_Receive+0x29c>
 8014df6:	693b      	ldr	r3, [r7, #16]
 8014df8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8014dfc:	2b00      	cmp	r3, #0
 8014dfe:	d01f      	beq.n	8014e40 <HAL_SPI_Receive+0x29c>
 8014e00:	68fb      	ldr	r3, [r7, #12]
 8014e02:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014e04:	69ba      	ldr	r2, [r7, #24]
 8014e06:	8812      	ldrh	r2, [r2, #0]
 8014e08:	b292      	uxth	r2, r2
 8014e0a:	801a      	strh	r2, [r3, #0]
 8014e0c:	68fb      	ldr	r3, [r7, #12]
 8014e0e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014e10:	1c9a      	adds	r2, r3, #2
 8014e12:	68fb      	ldr	r3, [r7, #12]
 8014e14:	665a      	str	r2, [r3, #100]	@ 0x64
 8014e16:	68fb      	ldr	r3, [r7, #12]
 8014e18:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014e1a:	69ba      	ldr	r2, [r7, #24]
 8014e1c:	8812      	ldrh	r2, [r2, #0]
 8014e1e:	b292      	uxth	r2, r2
 8014e20:	801a      	strh	r2, [r3, #0]
 8014e22:	68fb      	ldr	r3, [r7, #12]
 8014e24:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014e26:	1c9a      	adds	r2, r3, #2
 8014e28:	68fb      	ldr	r3, [r7, #12]
 8014e2a:	665a      	str	r2, [r3, #100]	@ 0x64
 8014e2c:	68fb      	ldr	r3, [r7, #12]
 8014e2e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014e32:	b29b      	uxth	r3, r3
 8014e34:	3b02      	subs	r3, #2
 8014e36:	b29a      	uxth	r2, r3
 8014e38:	68fb      	ldr	r3, [r7, #12]
 8014e3a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8014e3e:	e043      	b.n	8014ec8 <HAL_SPI_Receive+0x324>
 8014e40:	68fb      	ldr	r3, [r7, #12]
 8014e42:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014e46:	b29b      	uxth	r3, r3
 8014e48:	2b01      	cmp	r3, #1
 8014e4a:	d119      	bne.n	8014e80 <HAL_SPI_Receive+0x2dc>
 8014e4c:	693b      	ldr	r3, [r7, #16]
 8014e4e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8014e52:	2b00      	cmp	r3, #0
 8014e54:	d014      	beq.n	8014e80 <HAL_SPI_Receive+0x2dc>
 8014e56:	68fb      	ldr	r3, [r7, #12]
 8014e58:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014e5a:	69ba      	ldr	r2, [r7, #24]
 8014e5c:	8812      	ldrh	r2, [r2, #0]
 8014e5e:	b292      	uxth	r2, r2
 8014e60:	801a      	strh	r2, [r3, #0]
 8014e62:	68fb      	ldr	r3, [r7, #12]
 8014e64:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014e66:	1c9a      	adds	r2, r3, #2
 8014e68:	68fb      	ldr	r3, [r7, #12]
 8014e6a:	665a      	str	r2, [r3, #100]	@ 0x64
 8014e6c:	68fb      	ldr	r3, [r7, #12]
 8014e6e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014e72:	b29b      	uxth	r3, r3
 8014e74:	3b01      	subs	r3, #1
 8014e76:	b29a      	uxth	r2, r3
 8014e78:	68fb      	ldr	r3, [r7, #12]
 8014e7a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8014e7e:	e023      	b.n	8014ec8 <HAL_SPI_Receive+0x324>
 8014e80:	f7f4 f9dc 	bl	800923c <HAL_GetTick>
 8014e84:	4602      	mov	r2, r0
 8014e86:	697b      	ldr	r3, [r7, #20]
 8014e88:	1ad3      	subs	r3, r2, r3
 8014e8a:	683a      	ldr	r2, [r7, #0]
 8014e8c:	429a      	cmp	r2, r3
 8014e8e:	d803      	bhi.n	8014e98 <HAL_SPI_Receive+0x2f4>
 8014e90:	683b      	ldr	r3, [r7, #0]
 8014e92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014e96:	d102      	bne.n	8014e9e <HAL_SPI_Receive+0x2fa>
 8014e98:	683b      	ldr	r3, [r7, #0]
 8014e9a:	2b00      	cmp	r3, #0
 8014e9c:	d114      	bne.n	8014ec8 <HAL_SPI_Receive+0x324>
 8014e9e:	68f8      	ldr	r0, [r7, #12]
 8014ea0:	f000 ffe6 	bl	8015e70 <SPI_CloseTransfer>
 8014ea4:	68fb      	ldr	r3, [r7, #12]
 8014ea6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8014eaa:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8014eae:	68fb      	ldr	r3, [r7, #12]
 8014eb0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8014eb4:	68fb      	ldr	r3, [r7, #12]
 8014eb6:	2201      	movs	r2, #1
 8014eb8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
 8014ebc:	68fb      	ldr	r3, [r7, #12]
 8014ebe:	2200      	movs	r2, #0
 8014ec0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 8014ec4:	2303      	movs	r3, #3
 8014ec6:	e0db      	b.n	8015080 <HAL_SPI_Receive+0x4dc>
 8014ec8:	68fb      	ldr	r3, [r7, #12]
 8014eca:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014ece:	b29b      	uxth	r3, r3
 8014ed0:	2b00      	cmp	r3, #0
 8014ed2:	f47f af69 	bne.w	8014da8 <HAL_SPI_Receive+0x204>
 8014ed6:	e0c0      	b.n	801505a <HAL_SPI_Receive+0x4b6>
 8014ed8:	ffff0000 	.word	0xffff0000
 8014edc:	68fb      	ldr	r3, [r7, #12]
 8014ede:	681b      	ldr	r3, [r3, #0]
 8014ee0:	695b      	ldr	r3, [r3, #20]
 8014ee2:	613b      	str	r3, [r7, #16]
 8014ee4:	68fb      	ldr	r3, [r7, #12]
 8014ee6:	681b      	ldr	r3, [r3, #0]
 8014ee8:	695b      	ldr	r3, [r3, #20]
 8014eea:	f003 0301 	and.w	r3, r3, #1
 8014eee:	2b01      	cmp	r3, #1
 8014ef0:	d117      	bne.n	8014f22 <HAL_SPI_Receive+0x37e>
 8014ef2:	68fb      	ldr	r3, [r7, #12]
 8014ef4:	681b      	ldr	r3, [r3, #0]
 8014ef6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8014efa:	68fb      	ldr	r3, [r7, #12]
 8014efc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014efe:	7812      	ldrb	r2, [r2, #0]
 8014f00:	b2d2      	uxtb	r2, r2
 8014f02:	701a      	strb	r2, [r3, #0]
 8014f04:	68fb      	ldr	r3, [r7, #12]
 8014f06:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014f08:	1c5a      	adds	r2, r3, #1
 8014f0a:	68fb      	ldr	r3, [r7, #12]
 8014f0c:	665a      	str	r2, [r3, #100]	@ 0x64
 8014f0e:	68fb      	ldr	r3, [r7, #12]
 8014f10:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014f14:	b29b      	uxth	r3, r3
 8014f16:	3b01      	subs	r3, #1
 8014f18:	b29a      	uxth	r2, r3
 8014f1a:	68fb      	ldr	r3, [r7, #12]
 8014f1c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8014f20:	e094      	b.n	801504c <HAL_SPI_Receive+0x4a8>
 8014f22:	68fb      	ldr	r3, [r7, #12]
 8014f24:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014f28:	b29b      	uxth	r3, r3
 8014f2a:	8bfa      	ldrh	r2, [r7, #30]
 8014f2c:	429a      	cmp	r2, r3
 8014f2e:	d946      	bls.n	8014fbe <HAL_SPI_Receive+0x41a>
 8014f30:	693b      	ldr	r3, [r7, #16]
 8014f32:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8014f36:	2b00      	cmp	r3, #0
 8014f38:	d041      	beq.n	8014fbe <HAL_SPI_Receive+0x41a>
 8014f3a:	68fb      	ldr	r3, [r7, #12]
 8014f3c:	681b      	ldr	r3, [r3, #0]
 8014f3e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8014f42:	68fb      	ldr	r3, [r7, #12]
 8014f44:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014f46:	7812      	ldrb	r2, [r2, #0]
 8014f48:	b2d2      	uxtb	r2, r2
 8014f4a:	701a      	strb	r2, [r3, #0]
 8014f4c:	68fb      	ldr	r3, [r7, #12]
 8014f4e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014f50:	1c5a      	adds	r2, r3, #1
 8014f52:	68fb      	ldr	r3, [r7, #12]
 8014f54:	665a      	str	r2, [r3, #100]	@ 0x64
 8014f56:	68fb      	ldr	r3, [r7, #12]
 8014f58:	681b      	ldr	r3, [r3, #0]
 8014f5a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8014f5e:	68fb      	ldr	r3, [r7, #12]
 8014f60:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014f62:	7812      	ldrb	r2, [r2, #0]
 8014f64:	b2d2      	uxtb	r2, r2
 8014f66:	701a      	strb	r2, [r3, #0]
 8014f68:	68fb      	ldr	r3, [r7, #12]
 8014f6a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014f6c:	1c5a      	adds	r2, r3, #1
 8014f6e:	68fb      	ldr	r3, [r7, #12]
 8014f70:	665a      	str	r2, [r3, #100]	@ 0x64
 8014f72:	68fb      	ldr	r3, [r7, #12]
 8014f74:	681b      	ldr	r3, [r3, #0]
 8014f76:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8014f7a:	68fb      	ldr	r3, [r7, #12]
 8014f7c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014f7e:	7812      	ldrb	r2, [r2, #0]
 8014f80:	b2d2      	uxtb	r2, r2
 8014f82:	701a      	strb	r2, [r3, #0]
 8014f84:	68fb      	ldr	r3, [r7, #12]
 8014f86:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014f88:	1c5a      	adds	r2, r3, #1
 8014f8a:	68fb      	ldr	r3, [r7, #12]
 8014f8c:	665a      	str	r2, [r3, #100]	@ 0x64
 8014f8e:	68fb      	ldr	r3, [r7, #12]
 8014f90:	681b      	ldr	r3, [r3, #0]
 8014f92:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8014f96:	68fb      	ldr	r3, [r7, #12]
 8014f98:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014f9a:	7812      	ldrb	r2, [r2, #0]
 8014f9c:	b2d2      	uxtb	r2, r2
 8014f9e:	701a      	strb	r2, [r3, #0]
 8014fa0:	68fb      	ldr	r3, [r7, #12]
 8014fa2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014fa4:	1c5a      	adds	r2, r3, #1
 8014fa6:	68fb      	ldr	r3, [r7, #12]
 8014fa8:	665a      	str	r2, [r3, #100]	@ 0x64
 8014faa:	68fb      	ldr	r3, [r7, #12]
 8014fac:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014fb0:	b29b      	uxth	r3, r3
 8014fb2:	3b04      	subs	r3, #4
 8014fb4:	b29a      	uxth	r2, r3
 8014fb6:	68fb      	ldr	r3, [r7, #12]
 8014fb8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8014fbc:	e046      	b.n	801504c <HAL_SPI_Receive+0x4a8>
 8014fbe:	68fb      	ldr	r3, [r7, #12]
 8014fc0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014fc4:	b29b      	uxth	r3, r3
 8014fc6:	2b03      	cmp	r3, #3
 8014fc8:	d81c      	bhi.n	8015004 <HAL_SPI_Receive+0x460>
 8014fca:	693b      	ldr	r3, [r7, #16]
 8014fcc:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 8014fd0:	2b00      	cmp	r3, #0
 8014fd2:	d017      	beq.n	8015004 <HAL_SPI_Receive+0x460>
 8014fd4:	68fb      	ldr	r3, [r7, #12]
 8014fd6:	681b      	ldr	r3, [r3, #0]
 8014fd8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8014fdc:	68fb      	ldr	r3, [r7, #12]
 8014fde:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014fe0:	7812      	ldrb	r2, [r2, #0]
 8014fe2:	b2d2      	uxtb	r2, r2
 8014fe4:	701a      	strb	r2, [r3, #0]
 8014fe6:	68fb      	ldr	r3, [r7, #12]
 8014fe8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014fea:	1c5a      	adds	r2, r3, #1
 8014fec:	68fb      	ldr	r3, [r7, #12]
 8014fee:	665a      	str	r2, [r3, #100]	@ 0x64
 8014ff0:	68fb      	ldr	r3, [r7, #12]
 8014ff2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014ff6:	b29b      	uxth	r3, r3
 8014ff8:	3b01      	subs	r3, #1
 8014ffa:	b29a      	uxth	r2, r3
 8014ffc:	68fb      	ldr	r3, [r7, #12]
 8014ffe:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8015002:	e023      	b.n	801504c <HAL_SPI_Receive+0x4a8>
 8015004:	f7f4 f91a 	bl	800923c <HAL_GetTick>
 8015008:	4602      	mov	r2, r0
 801500a:	697b      	ldr	r3, [r7, #20]
 801500c:	1ad3      	subs	r3, r2, r3
 801500e:	683a      	ldr	r2, [r7, #0]
 8015010:	429a      	cmp	r2, r3
 8015012:	d803      	bhi.n	801501c <HAL_SPI_Receive+0x478>
 8015014:	683b      	ldr	r3, [r7, #0]
 8015016:	f1b3 3fff 	cmp.w	r3, #4294967295
 801501a:	d102      	bne.n	8015022 <HAL_SPI_Receive+0x47e>
 801501c:	683b      	ldr	r3, [r7, #0]
 801501e:	2b00      	cmp	r3, #0
 8015020:	d114      	bne.n	801504c <HAL_SPI_Receive+0x4a8>
 8015022:	68f8      	ldr	r0, [r7, #12]
 8015024:	f000 ff24 	bl	8015e70 <SPI_CloseTransfer>
 8015028:	68fb      	ldr	r3, [r7, #12]
 801502a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801502e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8015032:	68fb      	ldr	r3, [r7, #12]
 8015034:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8015038:	68fb      	ldr	r3, [r7, #12]
 801503a:	2201      	movs	r2, #1
 801503c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
 8015040:	68fb      	ldr	r3, [r7, #12]
 8015042:	2200      	movs	r2, #0
 8015044:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 8015048:	2303      	movs	r3, #3
 801504a:	e019      	b.n	8015080 <HAL_SPI_Receive+0x4dc>
 801504c:	68fb      	ldr	r3, [r7, #12]
 801504e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8015052:	b29b      	uxth	r3, r3
 8015054:	2b00      	cmp	r3, #0
 8015056:	f47f af41 	bne.w	8014edc <HAL_SPI_Receive+0x338>
 801505a:	68f8      	ldr	r0, [r7, #12]
 801505c:	f000 ff08 	bl	8015e70 <SPI_CloseTransfer>
 8015060:	68fb      	ldr	r3, [r7, #12]
 8015062:	2201      	movs	r2, #1
 8015064:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
 8015068:	68fb      	ldr	r3, [r7, #12]
 801506a:	2200      	movs	r2, #0
 801506c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 8015070:	68fb      	ldr	r3, [r7, #12]
 8015072:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015076:	2b00      	cmp	r3, #0
 8015078:	d001      	beq.n	801507e <HAL_SPI_Receive+0x4da>
 801507a:	2301      	movs	r3, #1
 801507c:	e000      	b.n	8015080 <HAL_SPI_Receive+0x4dc>
 801507e:	2300      	movs	r3, #0
 8015080:	4618      	mov	r0, r3
 8015082:	3720      	adds	r7, #32
 8015084:	46bd      	mov	sp, r7
 8015086:	bd80      	pop	{r7, pc}

08015088 <HAL_SPI_TransmitReceive>:
 8015088:	b580      	push	{r7, lr}
 801508a:	b08e      	sub	sp, #56	@ 0x38
 801508c:	af02      	add	r7, sp, #8
 801508e:	60f8      	str	r0, [r7, #12]
 8015090:	60b9      	str	r1, [r7, #8]
 8015092:	607a      	str	r2, [r7, #4]
 8015094:	807b      	strh	r3, [r7, #2]
 8015096:	68fb      	ldr	r3, [r7, #12]
 8015098:	681b      	ldr	r3, [r3, #0]
 801509a:	3320      	adds	r3, #32
 801509c:	627b      	str	r3, [r7, #36]	@ 0x24
 801509e:	68fb      	ldr	r3, [r7, #12]
 80150a0:	681b      	ldr	r3, [r3, #0]
 80150a2:	3330      	adds	r3, #48	@ 0x30
 80150a4:	623b      	str	r3, [r7, #32]
 80150a6:	68fb      	ldr	r3, [r7, #12]
 80150a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80150aa:	095b      	lsrs	r3, r3, #5
 80150ac:	b29b      	uxth	r3, r3
 80150ae:	3301      	adds	r3, #1
 80150b0:	83fb      	strh	r3, [r7, #30]
 80150b2:	f7f4 f8c3 	bl	800923c <HAL_GetTick>
 80150b6:	61b8      	str	r0, [r7, #24]
 80150b8:	887b      	ldrh	r3, [r7, #2]
 80150ba:	857b      	strh	r3, [r7, #42]	@ 0x2a
 80150bc:	887b      	ldrh	r3, [r7, #2]
 80150be:	853b      	strh	r3, [r7, #40]	@ 0x28
 80150c0:	68fb      	ldr	r3, [r7, #12]
 80150c2:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80150c6:	b2db      	uxtb	r3, r3
 80150c8:	2b01      	cmp	r3, #1
 80150ca:	d001      	beq.n	80150d0 <HAL_SPI_TransmitReceive+0x48>
 80150cc:	2302      	movs	r3, #2
 80150ce:	e310      	b.n	80156f2 <HAL_SPI_TransmitReceive+0x66a>
 80150d0:	68bb      	ldr	r3, [r7, #8]
 80150d2:	2b00      	cmp	r3, #0
 80150d4:	d005      	beq.n	80150e2 <HAL_SPI_TransmitReceive+0x5a>
 80150d6:	687b      	ldr	r3, [r7, #4]
 80150d8:	2b00      	cmp	r3, #0
 80150da:	d002      	beq.n	80150e2 <HAL_SPI_TransmitReceive+0x5a>
 80150dc:	887b      	ldrh	r3, [r7, #2]
 80150de:	2b00      	cmp	r3, #0
 80150e0:	d101      	bne.n	80150e6 <HAL_SPI_TransmitReceive+0x5e>
 80150e2:	2301      	movs	r3, #1
 80150e4:	e305      	b.n	80156f2 <HAL_SPI_TransmitReceive+0x66a>
 80150e6:	68fb      	ldr	r3, [r7, #12]
 80150e8:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80150ec:	2b01      	cmp	r3, #1
 80150ee:	d101      	bne.n	80150f4 <HAL_SPI_TransmitReceive+0x6c>
 80150f0:	2302      	movs	r3, #2
 80150f2:	e2fe      	b.n	80156f2 <HAL_SPI_TransmitReceive+0x66a>
 80150f4:	68fb      	ldr	r3, [r7, #12]
 80150f6:	2201      	movs	r2, #1
 80150f8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 80150fc:	68fb      	ldr	r3, [r7, #12]
 80150fe:	2205      	movs	r2, #5
 8015100:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
 8015104:	68fb      	ldr	r3, [r7, #12]
 8015106:	2200      	movs	r2, #0
 8015108:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 801510c:	68fb      	ldr	r3, [r7, #12]
 801510e:	687a      	ldr	r2, [r7, #4]
 8015110:	665a      	str	r2, [r3, #100]	@ 0x64
 8015112:	68fb      	ldr	r3, [r7, #12]
 8015114:	887a      	ldrh	r2, [r7, #2]
 8015116:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 801511a:	68fb      	ldr	r3, [r7, #12]
 801511c:	887a      	ldrh	r2, [r7, #2]
 801511e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 8015122:	68fb      	ldr	r3, [r7, #12]
 8015124:	68ba      	ldr	r2, [r7, #8]
 8015126:	65da      	str	r2, [r3, #92]	@ 0x5c
 8015128:	68fb      	ldr	r3, [r7, #12]
 801512a:	887a      	ldrh	r2, [r7, #2]
 801512c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8015130:	68fb      	ldr	r3, [r7, #12]
 8015132:	887a      	ldrh	r2, [r7, #2]
 8015134:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8015138:	68fb      	ldr	r3, [r7, #12]
 801513a:	2200      	movs	r2, #0
 801513c:	671a      	str	r2, [r3, #112]	@ 0x70
 801513e:	68fb      	ldr	r3, [r7, #12]
 8015140:	2200      	movs	r2, #0
 8015142:	675a      	str	r2, [r3, #116]	@ 0x74
 8015144:	68fb      	ldr	r3, [r7, #12]
 8015146:	681b      	ldr	r3, [r3, #0]
 8015148:	68da      	ldr	r2, [r3, #12]
 801514a:	68fb      	ldr	r3, [r7, #12]
 801514c:	681b      	ldr	r3, [r3, #0]
 801514e:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 8015152:	60da      	str	r2, [r3, #12]
 8015154:	68fb      	ldr	r3, [r7, #12]
 8015156:	681b      	ldr	r3, [r3, #0]
 8015158:	4a70      	ldr	r2, [pc, #448]	@ (801531c <HAL_SPI_TransmitReceive+0x294>)
 801515a:	4293      	cmp	r3, r2
 801515c:	d009      	beq.n	8015172 <HAL_SPI_TransmitReceive+0xea>
 801515e:	68fb      	ldr	r3, [r7, #12]
 8015160:	681b      	ldr	r3, [r3, #0]
 8015162:	4a6f      	ldr	r2, [pc, #444]	@ (8015320 <HAL_SPI_TransmitReceive+0x298>)
 8015164:	4293      	cmp	r3, r2
 8015166:	d004      	beq.n	8015172 <HAL_SPI_TransmitReceive+0xea>
 8015168:	68fb      	ldr	r3, [r7, #12]
 801516a:	681b      	ldr	r3, [r3, #0]
 801516c:	4a6d      	ldr	r2, [pc, #436]	@ (8015324 <HAL_SPI_TransmitReceive+0x29c>)
 801516e:	4293      	cmp	r3, r2
 8015170:	d102      	bne.n	8015178 <HAL_SPI_TransmitReceive+0xf0>
 8015172:	2310      	movs	r3, #16
 8015174:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8015176:	e001      	b.n	801517c <HAL_SPI_TransmitReceive+0xf4>
 8015178:	2308      	movs	r3, #8
 801517a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801517c:	68fb      	ldr	r3, [r7, #12]
 801517e:	681b      	ldr	r3, [r3, #0]
 8015180:	685a      	ldr	r2, [r3, #4]
 8015182:	4b69      	ldr	r3, [pc, #420]	@ (8015328 <HAL_SPI_TransmitReceive+0x2a0>)
 8015184:	4013      	ands	r3, r2
 8015186:	8879      	ldrh	r1, [r7, #2]
 8015188:	68fa      	ldr	r2, [r7, #12]
 801518a:	6812      	ldr	r2, [r2, #0]
 801518c:	430b      	orrs	r3, r1
 801518e:	6053      	str	r3, [r2, #4]
 8015190:	68fb      	ldr	r3, [r7, #12]
 8015192:	681b      	ldr	r3, [r3, #0]
 8015194:	681a      	ldr	r2, [r3, #0]
 8015196:	68fb      	ldr	r3, [r7, #12]
 8015198:	681b      	ldr	r3, [r3, #0]
 801519a:	f042 0201 	orr.w	r2, r2, #1
 801519e:	601a      	str	r2, [r3, #0]
 80151a0:	68fb      	ldr	r3, [r7, #12]
 80151a2:	685b      	ldr	r3, [r3, #4]
 80151a4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80151a8:	d107      	bne.n	80151ba <HAL_SPI_TransmitReceive+0x132>
 80151aa:	68fb      	ldr	r3, [r7, #12]
 80151ac:	681b      	ldr	r3, [r3, #0]
 80151ae:	681a      	ldr	r2, [r3, #0]
 80151b0:	68fb      	ldr	r3, [r7, #12]
 80151b2:	681b      	ldr	r3, [r3, #0]
 80151b4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80151b8:	601a      	str	r2, [r3, #0]
 80151ba:	68fb      	ldr	r3, [r7, #12]
 80151bc:	68db      	ldr	r3, [r3, #12]
 80151be:	2b0f      	cmp	r3, #15
 80151c0:	f240 80a2 	bls.w	8015308 <HAL_SPI_TransmitReceive+0x280>
 80151c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80151c6:	089b      	lsrs	r3, r3, #2
 80151c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80151ca:	e094      	b.n	80152f6 <HAL_SPI_TransmitReceive+0x26e>
 80151cc:	68fb      	ldr	r3, [r7, #12]
 80151ce:	681b      	ldr	r3, [r3, #0]
 80151d0:	695b      	ldr	r3, [r3, #20]
 80151d2:	f003 0302 	and.w	r3, r3, #2
 80151d6:	2b02      	cmp	r3, #2
 80151d8:	d120      	bne.n	801521c <HAL_SPI_TransmitReceive+0x194>
 80151da:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80151dc:	2b00      	cmp	r3, #0
 80151de:	d01d      	beq.n	801521c <HAL_SPI_TransmitReceive+0x194>
 80151e0:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80151e2:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 80151e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80151e6:	440b      	add	r3, r1
 80151e8:	429a      	cmp	r2, r3
 80151ea:	d217      	bcs.n	801521c <HAL_SPI_TransmitReceive+0x194>
 80151ec:	68fb      	ldr	r3, [r7, #12]
 80151ee:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80151f0:	68fb      	ldr	r3, [r7, #12]
 80151f2:	681b      	ldr	r3, [r3, #0]
 80151f4:	6812      	ldr	r2, [r2, #0]
 80151f6:	621a      	str	r2, [r3, #32]
 80151f8:	68fb      	ldr	r3, [r7, #12]
 80151fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80151fc:	1d1a      	adds	r2, r3, #4
 80151fe:	68fb      	ldr	r3, [r7, #12]
 8015200:	65da      	str	r2, [r3, #92]	@ 0x5c
 8015202:	68fb      	ldr	r3, [r7, #12]
 8015204:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8015208:	b29b      	uxth	r3, r3
 801520a:	3b01      	subs	r3, #1
 801520c:	b29a      	uxth	r2, r3
 801520e:	68fb      	ldr	r3, [r7, #12]
 8015210:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8015214:	68fb      	ldr	r3, [r7, #12]
 8015216:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801521a:	857b      	strh	r3, [r7, #42]	@ 0x2a
 801521c:	68fb      	ldr	r3, [r7, #12]
 801521e:	681b      	ldr	r3, [r3, #0]
 8015220:	695b      	ldr	r3, [r3, #20]
 8015222:	617b      	str	r3, [r7, #20]
 8015224:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8015226:	2b00      	cmp	r3, #0
 8015228:	d065      	beq.n	80152f6 <HAL_SPI_TransmitReceive+0x26e>
 801522a:	68fb      	ldr	r3, [r7, #12]
 801522c:	681b      	ldr	r3, [r3, #0]
 801522e:	695b      	ldr	r3, [r3, #20]
 8015230:	f003 0301 	and.w	r3, r3, #1
 8015234:	2b01      	cmp	r3, #1
 8015236:	d118      	bne.n	801526a <HAL_SPI_TransmitReceive+0x1e2>
 8015238:	68fb      	ldr	r3, [r7, #12]
 801523a:	681a      	ldr	r2, [r3, #0]
 801523c:	68fb      	ldr	r3, [r7, #12]
 801523e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015240:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8015242:	601a      	str	r2, [r3, #0]
 8015244:	68fb      	ldr	r3, [r7, #12]
 8015246:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015248:	1d1a      	adds	r2, r3, #4
 801524a:	68fb      	ldr	r3, [r7, #12]
 801524c:	665a      	str	r2, [r3, #100]	@ 0x64
 801524e:	68fb      	ldr	r3, [r7, #12]
 8015250:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8015254:	b29b      	uxth	r3, r3
 8015256:	3b01      	subs	r3, #1
 8015258:	b29a      	uxth	r2, r3
 801525a:	68fb      	ldr	r3, [r7, #12]
 801525c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8015260:	68fb      	ldr	r3, [r7, #12]
 8015262:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8015266:	853b      	strh	r3, [r7, #40]	@ 0x28
 8015268:	e045      	b.n	80152f6 <HAL_SPI_TransmitReceive+0x26e>
 801526a:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 801526c:	8bfb      	ldrh	r3, [r7, #30]
 801526e:	429a      	cmp	r2, r3
 8015270:	d21d      	bcs.n	80152ae <HAL_SPI_TransmitReceive+0x226>
 8015272:	697b      	ldr	r3, [r7, #20]
 8015274:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8015278:	2b00      	cmp	r3, #0
 801527a:	d018      	beq.n	80152ae <HAL_SPI_TransmitReceive+0x226>
 801527c:	68fb      	ldr	r3, [r7, #12]
 801527e:	681a      	ldr	r2, [r3, #0]
 8015280:	68fb      	ldr	r3, [r7, #12]
 8015282:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015284:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8015286:	601a      	str	r2, [r3, #0]
 8015288:	68fb      	ldr	r3, [r7, #12]
 801528a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801528c:	1d1a      	adds	r2, r3, #4
 801528e:	68fb      	ldr	r3, [r7, #12]
 8015290:	665a      	str	r2, [r3, #100]	@ 0x64
 8015292:	68fb      	ldr	r3, [r7, #12]
 8015294:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8015298:	b29b      	uxth	r3, r3
 801529a:	3b01      	subs	r3, #1
 801529c:	b29a      	uxth	r2, r3
 801529e:	68fb      	ldr	r3, [r7, #12]
 80152a0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80152a4:	68fb      	ldr	r3, [r7, #12]
 80152a6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80152aa:	853b      	strh	r3, [r7, #40]	@ 0x28
 80152ac:	e023      	b.n	80152f6 <HAL_SPI_TransmitReceive+0x26e>
 80152ae:	f7f3 ffc5 	bl	800923c <HAL_GetTick>
 80152b2:	4602      	mov	r2, r0
 80152b4:	69bb      	ldr	r3, [r7, #24]
 80152b6:	1ad3      	subs	r3, r2, r3
 80152b8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80152ba:	429a      	cmp	r2, r3
 80152bc:	d803      	bhi.n	80152c6 <HAL_SPI_TransmitReceive+0x23e>
 80152be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80152c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80152c4:	d102      	bne.n	80152cc <HAL_SPI_TransmitReceive+0x244>
 80152c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80152c8:	2b00      	cmp	r3, #0
 80152ca:	d114      	bne.n	80152f6 <HAL_SPI_TransmitReceive+0x26e>
 80152cc:	68f8      	ldr	r0, [r7, #12]
 80152ce:	f000 fdcf 	bl	8015e70 <SPI_CloseTransfer>
 80152d2:	68fb      	ldr	r3, [r7, #12]
 80152d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80152d8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80152dc:	68fb      	ldr	r3, [r7, #12]
 80152de:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 80152e2:	68fb      	ldr	r3, [r7, #12]
 80152e4:	2201      	movs	r2, #1
 80152e6:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
 80152ea:	68fb      	ldr	r3, [r7, #12]
 80152ec:	2200      	movs	r2, #0
 80152ee:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 80152f2:	2303      	movs	r3, #3
 80152f4:	e1fd      	b.n	80156f2 <HAL_SPI_TransmitReceive+0x66a>
 80152f6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80152f8:	2b00      	cmp	r3, #0
 80152fa:	f47f af67 	bne.w	80151cc <HAL_SPI_TransmitReceive+0x144>
 80152fe:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8015300:	2b00      	cmp	r3, #0
 8015302:	f47f af63 	bne.w	80151cc <HAL_SPI_TransmitReceive+0x144>
 8015306:	e1ce      	b.n	80156a6 <HAL_SPI_TransmitReceive+0x61e>
 8015308:	68fb      	ldr	r3, [r7, #12]
 801530a:	68db      	ldr	r3, [r3, #12]
 801530c:	2b07      	cmp	r3, #7
 801530e:	f240 81c2 	bls.w	8015696 <HAL_SPI_TransmitReceive+0x60e>
 8015312:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015314:	085b      	lsrs	r3, r3, #1
 8015316:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8015318:	e0c9      	b.n	80154ae <HAL_SPI_TransmitReceive+0x426>
 801531a:	bf00      	nop
 801531c:	40013000 	.word	0x40013000
 8015320:	40003800 	.word	0x40003800
 8015324:	40003c00 	.word	0x40003c00
 8015328:	ffff0000 	.word	0xffff0000
 801532c:	68fb      	ldr	r3, [r7, #12]
 801532e:	681b      	ldr	r3, [r3, #0]
 8015330:	695b      	ldr	r3, [r3, #20]
 8015332:	f003 0302 	and.w	r3, r3, #2
 8015336:	2b02      	cmp	r3, #2
 8015338:	d11f      	bne.n	801537a <HAL_SPI_TransmitReceive+0x2f2>
 801533a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801533c:	2b00      	cmp	r3, #0
 801533e:	d01c      	beq.n	801537a <HAL_SPI_TransmitReceive+0x2f2>
 8015340:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8015342:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8015344:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015346:	440b      	add	r3, r1
 8015348:	429a      	cmp	r2, r3
 801534a:	d216      	bcs.n	801537a <HAL_SPI_TransmitReceive+0x2f2>
 801534c:	68fb      	ldr	r3, [r7, #12]
 801534e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8015350:	881a      	ldrh	r2, [r3, #0]
 8015352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015354:	801a      	strh	r2, [r3, #0]
 8015356:	68fb      	ldr	r3, [r7, #12]
 8015358:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801535a:	1c9a      	adds	r2, r3, #2
 801535c:	68fb      	ldr	r3, [r7, #12]
 801535e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8015360:	68fb      	ldr	r3, [r7, #12]
 8015362:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8015366:	b29b      	uxth	r3, r3
 8015368:	3b01      	subs	r3, #1
 801536a:	b29a      	uxth	r2, r3
 801536c:	68fb      	ldr	r3, [r7, #12]
 801536e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8015372:	68fb      	ldr	r3, [r7, #12]
 8015374:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8015378:	857b      	strh	r3, [r7, #42]	@ 0x2a
 801537a:	68fb      	ldr	r3, [r7, #12]
 801537c:	681b      	ldr	r3, [r3, #0]
 801537e:	695b      	ldr	r3, [r3, #20]
 8015380:	617b      	str	r3, [r7, #20]
 8015382:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8015384:	2b00      	cmp	r3, #0
 8015386:	f000 8092 	beq.w	80154ae <HAL_SPI_TransmitReceive+0x426>
 801538a:	68fb      	ldr	r3, [r7, #12]
 801538c:	681b      	ldr	r3, [r3, #0]
 801538e:	695b      	ldr	r3, [r3, #20]
 8015390:	f003 0301 	and.w	r3, r3, #1
 8015394:	2b01      	cmp	r3, #1
 8015396:	d118      	bne.n	80153ca <HAL_SPI_TransmitReceive+0x342>
 8015398:	68fb      	ldr	r3, [r7, #12]
 801539a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801539c:	6a3a      	ldr	r2, [r7, #32]
 801539e:	8812      	ldrh	r2, [r2, #0]
 80153a0:	b292      	uxth	r2, r2
 80153a2:	801a      	strh	r2, [r3, #0]
 80153a4:	68fb      	ldr	r3, [r7, #12]
 80153a6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80153a8:	1c9a      	adds	r2, r3, #2
 80153aa:	68fb      	ldr	r3, [r7, #12]
 80153ac:	665a      	str	r2, [r3, #100]	@ 0x64
 80153ae:	68fb      	ldr	r3, [r7, #12]
 80153b0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80153b4:	b29b      	uxth	r3, r3
 80153b6:	3b01      	subs	r3, #1
 80153b8:	b29a      	uxth	r2, r3
 80153ba:	68fb      	ldr	r3, [r7, #12]
 80153bc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80153c0:	68fb      	ldr	r3, [r7, #12]
 80153c2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80153c6:	853b      	strh	r3, [r7, #40]	@ 0x28
 80153c8:	e071      	b.n	80154ae <HAL_SPI_TransmitReceive+0x426>
 80153ca:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80153cc:	8bfb      	ldrh	r3, [r7, #30]
 80153ce:	429a      	cmp	r2, r3
 80153d0:	d228      	bcs.n	8015424 <HAL_SPI_TransmitReceive+0x39c>
 80153d2:	697b      	ldr	r3, [r7, #20]
 80153d4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80153d8:	2b00      	cmp	r3, #0
 80153da:	d023      	beq.n	8015424 <HAL_SPI_TransmitReceive+0x39c>
 80153dc:	68fb      	ldr	r3, [r7, #12]
 80153de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80153e0:	6a3a      	ldr	r2, [r7, #32]
 80153e2:	8812      	ldrh	r2, [r2, #0]
 80153e4:	b292      	uxth	r2, r2
 80153e6:	801a      	strh	r2, [r3, #0]
 80153e8:	68fb      	ldr	r3, [r7, #12]
 80153ea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80153ec:	1c9a      	adds	r2, r3, #2
 80153ee:	68fb      	ldr	r3, [r7, #12]
 80153f0:	665a      	str	r2, [r3, #100]	@ 0x64
 80153f2:	68fb      	ldr	r3, [r7, #12]
 80153f4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80153f6:	6a3a      	ldr	r2, [r7, #32]
 80153f8:	8812      	ldrh	r2, [r2, #0]
 80153fa:	b292      	uxth	r2, r2
 80153fc:	801a      	strh	r2, [r3, #0]
 80153fe:	68fb      	ldr	r3, [r7, #12]
 8015400:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015402:	1c9a      	adds	r2, r3, #2
 8015404:	68fb      	ldr	r3, [r7, #12]
 8015406:	665a      	str	r2, [r3, #100]	@ 0x64
 8015408:	68fb      	ldr	r3, [r7, #12]
 801540a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801540e:	b29b      	uxth	r3, r3
 8015410:	3b02      	subs	r3, #2
 8015412:	b29a      	uxth	r2, r3
 8015414:	68fb      	ldr	r3, [r7, #12]
 8015416:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 801541a:	68fb      	ldr	r3, [r7, #12]
 801541c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8015420:	853b      	strh	r3, [r7, #40]	@ 0x28
 8015422:	e044      	b.n	80154ae <HAL_SPI_TransmitReceive+0x426>
 8015424:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8015426:	2b01      	cmp	r3, #1
 8015428:	d11d      	bne.n	8015466 <HAL_SPI_TransmitReceive+0x3de>
 801542a:	697b      	ldr	r3, [r7, #20]
 801542c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8015430:	2b00      	cmp	r3, #0
 8015432:	d018      	beq.n	8015466 <HAL_SPI_TransmitReceive+0x3de>
 8015434:	68fb      	ldr	r3, [r7, #12]
 8015436:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015438:	6a3a      	ldr	r2, [r7, #32]
 801543a:	8812      	ldrh	r2, [r2, #0]
 801543c:	b292      	uxth	r2, r2
 801543e:	801a      	strh	r2, [r3, #0]
 8015440:	68fb      	ldr	r3, [r7, #12]
 8015442:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015444:	1c9a      	adds	r2, r3, #2
 8015446:	68fb      	ldr	r3, [r7, #12]
 8015448:	665a      	str	r2, [r3, #100]	@ 0x64
 801544a:	68fb      	ldr	r3, [r7, #12]
 801544c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8015450:	b29b      	uxth	r3, r3
 8015452:	3b01      	subs	r3, #1
 8015454:	b29a      	uxth	r2, r3
 8015456:	68fb      	ldr	r3, [r7, #12]
 8015458:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 801545c:	68fb      	ldr	r3, [r7, #12]
 801545e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8015462:	853b      	strh	r3, [r7, #40]	@ 0x28
 8015464:	e023      	b.n	80154ae <HAL_SPI_TransmitReceive+0x426>
 8015466:	f7f3 fee9 	bl	800923c <HAL_GetTick>
 801546a:	4602      	mov	r2, r0
 801546c:	69bb      	ldr	r3, [r7, #24]
 801546e:	1ad3      	subs	r3, r2, r3
 8015470:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8015472:	429a      	cmp	r2, r3
 8015474:	d803      	bhi.n	801547e <HAL_SPI_TransmitReceive+0x3f6>
 8015476:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015478:	f1b3 3fff 	cmp.w	r3, #4294967295
 801547c:	d102      	bne.n	8015484 <HAL_SPI_TransmitReceive+0x3fc>
 801547e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015480:	2b00      	cmp	r3, #0
 8015482:	d114      	bne.n	80154ae <HAL_SPI_TransmitReceive+0x426>
 8015484:	68f8      	ldr	r0, [r7, #12]
 8015486:	f000 fcf3 	bl	8015e70 <SPI_CloseTransfer>
 801548a:	68fb      	ldr	r3, [r7, #12]
 801548c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015490:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8015494:	68fb      	ldr	r3, [r7, #12]
 8015496:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 801549a:	68fb      	ldr	r3, [r7, #12]
 801549c:	2201      	movs	r2, #1
 801549e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
 80154a2:	68fb      	ldr	r3, [r7, #12]
 80154a4:	2200      	movs	r2, #0
 80154a6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 80154aa:	2303      	movs	r3, #3
 80154ac:	e121      	b.n	80156f2 <HAL_SPI_TransmitReceive+0x66a>
 80154ae:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80154b0:	2b00      	cmp	r3, #0
 80154b2:	f47f af3b 	bne.w	801532c <HAL_SPI_TransmitReceive+0x2a4>
 80154b6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80154b8:	2b00      	cmp	r3, #0
 80154ba:	f47f af37 	bne.w	801532c <HAL_SPI_TransmitReceive+0x2a4>
 80154be:	e0f2      	b.n	80156a6 <HAL_SPI_TransmitReceive+0x61e>
 80154c0:	68fb      	ldr	r3, [r7, #12]
 80154c2:	681b      	ldr	r3, [r3, #0]
 80154c4:	695b      	ldr	r3, [r3, #20]
 80154c6:	f003 0302 	and.w	r3, r3, #2
 80154ca:	2b02      	cmp	r3, #2
 80154cc:	d121      	bne.n	8015512 <HAL_SPI_TransmitReceive+0x48a>
 80154ce:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80154d0:	2b00      	cmp	r3, #0
 80154d2:	d01e      	beq.n	8015512 <HAL_SPI_TransmitReceive+0x48a>
 80154d4:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80154d6:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 80154d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80154da:	440b      	add	r3, r1
 80154dc:	429a      	cmp	r2, r3
 80154de:	d218      	bcs.n	8015512 <HAL_SPI_TransmitReceive+0x48a>
 80154e0:	68fb      	ldr	r3, [r7, #12]
 80154e2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80154e4:	68fb      	ldr	r3, [r7, #12]
 80154e6:	681b      	ldr	r3, [r3, #0]
 80154e8:	3320      	adds	r3, #32
 80154ea:	7812      	ldrb	r2, [r2, #0]
 80154ec:	701a      	strb	r2, [r3, #0]
 80154ee:	68fb      	ldr	r3, [r7, #12]
 80154f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80154f2:	1c5a      	adds	r2, r3, #1
 80154f4:	68fb      	ldr	r3, [r7, #12]
 80154f6:	65da      	str	r2, [r3, #92]	@ 0x5c
 80154f8:	68fb      	ldr	r3, [r7, #12]
 80154fa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80154fe:	b29b      	uxth	r3, r3
 8015500:	3b01      	subs	r3, #1
 8015502:	b29a      	uxth	r2, r3
 8015504:	68fb      	ldr	r3, [r7, #12]
 8015506:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 801550a:	68fb      	ldr	r3, [r7, #12]
 801550c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8015510:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8015512:	68fb      	ldr	r3, [r7, #12]
 8015514:	681b      	ldr	r3, [r3, #0]
 8015516:	695b      	ldr	r3, [r3, #20]
 8015518:	617b      	str	r3, [r7, #20]
 801551a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 801551c:	2b00      	cmp	r3, #0
 801551e:	f000 80ba 	beq.w	8015696 <HAL_SPI_TransmitReceive+0x60e>
 8015522:	68fb      	ldr	r3, [r7, #12]
 8015524:	681b      	ldr	r3, [r3, #0]
 8015526:	695b      	ldr	r3, [r3, #20]
 8015528:	f003 0301 	and.w	r3, r3, #1
 801552c:	2b01      	cmp	r3, #1
 801552e:	d11b      	bne.n	8015568 <HAL_SPI_TransmitReceive+0x4e0>
 8015530:	68fb      	ldr	r3, [r7, #12]
 8015532:	681b      	ldr	r3, [r3, #0]
 8015534:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8015538:	68fb      	ldr	r3, [r7, #12]
 801553a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801553c:	7812      	ldrb	r2, [r2, #0]
 801553e:	b2d2      	uxtb	r2, r2
 8015540:	701a      	strb	r2, [r3, #0]
 8015542:	68fb      	ldr	r3, [r7, #12]
 8015544:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015546:	1c5a      	adds	r2, r3, #1
 8015548:	68fb      	ldr	r3, [r7, #12]
 801554a:	665a      	str	r2, [r3, #100]	@ 0x64
 801554c:	68fb      	ldr	r3, [r7, #12]
 801554e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8015552:	b29b      	uxth	r3, r3
 8015554:	3b01      	subs	r3, #1
 8015556:	b29a      	uxth	r2, r3
 8015558:	68fb      	ldr	r3, [r7, #12]
 801555a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 801555e:	68fb      	ldr	r3, [r7, #12]
 8015560:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8015564:	853b      	strh	r3, [r7, #40]	@ 0x28
 8015566:	e096      	b.n	8015696 <HAL_SPI_TransmitReceive+0x60e>
 8015568:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 801556a:	8bfb      	ldrh	r3, [r7, #30]
 801556c:	429a      	cmp	r2, r3
 801556e:	d24a      	bcs.n	8015606 <HAL_SPI_TransmitReceive+0x57e>
 8015570:	697b      	ldr	r3, [r7, #20]
 8015572:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8015576:	2b00      	cmp	r3, #0
 8015578:	d045      	beq.n	8015606 <HAL_SPI_TransmitReceive+0x57e>
 801557a:	68fb      	ldr	r3, [r7, #12]
 801557c:	681b      	ldr	r3, [r3, #0]
 801557e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8015582:	68fb      	ldr	r3, [r7, #12]
 8015584:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015586:	7812      	ldrb	r2, [r2, #0]
 8015588:	b2d2      	uxtb	r2, r2
 801558a:	701a      	strb	r2, [r3, #0]
 801558c:	68fb      	ldr	r3, [r7, #12]
 801558e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015590:	1c5a      	adds	r2, r3, #1
 8015592:	68fb      	ldr	r3, [r7, #12]
 8015594:	665a      	str	r2, [r3, #100]	@ 0x64
 8015596:	68fb      	ldr	r3, [r7, #12]
 8015598:	681b      	ldr	r3, [r3, #0]
 801559a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801559e:	68fb      	ldr	r3, [r7, #12]
 80155a0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80155a2:	7812      	ldrb	r2, [r2, #0]
 80155a4:	b2d2      	uxtb	r2, r2
 80155a6:	701a      	strb	r2, [r3, #0]
 80155a8:	68fb      	ldr	r3, [r7, #12]
 80155aa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80155ac:	1c5a      	adds	r2, r3, #1
 80155ae:	68fb      	ldr	r3, [r7, #12]
 80155b0:	665a      	str	r2, [r3, #100]	@ 0x64
 80155b2:	68fb      	ldr	r3, [r7, #12]
 80155b4:	681b      	ldr	r3, [r3, #0]
 80155b6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80155ba:	68fb      	ldr	r3, [r7, #12]
 80155bc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80155be:	7812      	ldrb	r2, [r2, #0]
 80155c0:	b2d2      	uxtb	r2, r2
 80155c2:	701a      	strb	r2, [r3, #0]
 80155c4:	68fb      	ldr	r3, [r7, #12]
 80155c6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80155c8:	1c5a      	adds	r2, r3, #1
 80155ca:	68fb      	ldr	r3, [r7, #12]
 80155cc:	665a      	str	r2, [r3, #100]	@ 0x64
 80155ce:	68fb      	ldr	r3, [r7, #12]
 80155d0:	681b      	ldr	r3, [r3, #0]
 80155d2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80155d6:	68fb      	ldr	r3, [r7, #12]
 80155d8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80155da:	7812      	ldrb	r2, [r2, #0]
 80155dc:	b2d2      	uxtb	r2, r2
 80155de:	701a      	strb	r2, [r3, #0]
 80155e0:	68fb      	ldr	r3, [r7, #12]
 80155e2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80155e4:	1c5a      	adds	r2, r3, #1
 80155e6:	68fb      	ldr	r3, [r7, #12]
 80155e8:	665a      	str	r2, [r3, #100]	@ 0x64
 80155ea:	68fb      	ldr	r3, [r7, #12]
 80155ec:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80155f0:	b29b      	uxth	r3, r3
 80155f2:	3b04      	subs	r3, #4
 80155f4:	b29a      	uxth	r2, r3
 80155f6:	68fb      	ldr	r3, [r7, #12]
 80155f8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80155fc:	68fb      	ldr	r3, [r7, #12]
 80155fe:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8015602:	853b      	strh	r3, [r7, #40]	@ 0x28
 8015604:	e047      	b.n	8015696 <HAL_SPI_TransmitReceive+0x60e>
 8015606:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8015608:	2b03      	cmp	r3, #3
 801560a:	d820      	bhi.n	801564e <HAL_SPI_TransmitReceive+0x5c6>
 801560c:	697b      	ldr	r3, [r7, #20]
 801560e:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 8015612:	2b00      	cmp	r3, #0
 8015614:	d01b      	beq.n	801564e <HAL_SPI_TransmitReceive+0x5c6>
 8015616:	68fb      	ldr	r3, [r7, #12]
 8015618:	681b      	ldr	r3, [r3, #0]
 801561a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801561e:	68fb      	ldr	r3, [r7, #12]
 8015620:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015622:	7812      	ldrb	r2, [r2, #0]
 8015624:	b2d2      	uxtb	r2, r2
 8015626:	701a      	strb	r2, [r3, #0]
 8015628:	68fb      	ldr	r3, [r7, #12]
 801562a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801562c:	1c5a      	adds	r2, r3, #1
 801562e:	68fb      	ldr	r3, [r7, #12]
 8015630:	665a      	str	r2, [r3, #100]	@ 0x64
 8015632:	68fb      	ldr	r3, [r7, #12]
 8015634:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8015638:	b29b      	uxth	r3, r3
 801563a:	3b01      	subs	r3, #1
 801563c:	b29a      	uxth	r2, r3
 801563e:	68fb      	ldr	r3, [r7, #12]
 8015640:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8015644:	68fb      	ldr	r3, [r7, #12]
 8015646:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801564a:	853b      	strh	r3, [r7, #40]	@ 0x28
 801564c:	e023      	b.n	8015696 <HAL_SPI_TransmitReceive+0x60e>
 801564e:	f7f3 fdf5 	bl	800923c <HAL_GetTick>
 8015652:	4602      	mov	r2, r0
 8015654:	69bb      	ldr	r3, [r7, #24]
 8015656:	1ad3      	subs	r3, r2, r3
 8015658:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801565a:	429a      	cmp	r2, r3
 801565c:	d803      	bhi.n	8015666 <HAL_SPI_TransmitReceive+0x5de>
 801565e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015660:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015664:	d102      	bne.n	801566c <HAL_SPI_TransmitReceive+0x5e4>
 8015666:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015668:	2b00      	cmp	r3, #0
 801566a:	d114      	bne.n	8015696 <HAL_SPI_TransmitReceive+0x60e>
 801566c:	68f8      	ldr	r0, [r7, #12]
 801566e:	f000 fbff 	bl	8015e70 <SPI_CloseTransfer>
 8015672:	68fb      	ldr	r3, [r7, #12]
 8015674:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015678:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 801567c:	68fb      	ldr	r3, [r7, #12]
 801567e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8015682:	68fb      	ldr	r3, [r7, #12]
 8015684:	2201      	movs	r2, #1
 8015686:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
 801568a:	68fb      	ldr	r3, [r7, #12]
 801568c:	2200      	movs	r2, #0
 801568e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 8015692:	2303      	movs	r3, #3
 8015694:	e02d      	b.n	80156f2 <HAL_SPI_TransmitReceive+0x66a>
 8015696:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8015698:	2b00      	cmp	r3, #0
 801569a:	f47f af11 	bne.w	80154c0 <HAL_SPI_TransmitReceive+0x438>
 801569e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80156a0:	2b00      	cmp	r3, #0
 80156a2:	f47f af0d 	bne.w	80154c0 <HAL_SPI_TransmitReceive+0x438>
 80156a6:	69bb      	ldr	r3, [r7, #24]
 80156a8:	9300      	str	r3, [sp, #0]
 80156aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80156ac:	2200      	movs	r2, #0
 80156ae:	2108      	movs	r1, #8
 80156b0:	68f8      	ldr	r0, [r7, #12]
 80156b2:	f000 fc7d 	bl	8015fb0 <SPI_WaitOnFlagUntilTimeout>
 80156b6:	4603      	mov	r3, r0
 80156b8:	2b00      	cmp	r3, #0
 80156ba:	d007      	beq.n	80156cc <HAL_SPI_TransmitReceive+0x644>
 80156bc:	68fb      	ldr	r3, [r7, #12]
 80156be:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80156c2:	f043 0220 	orr.w	r2, r3, #32
 80156c6:	68fb      	ldr	r3, [r7, #12]
 80156c8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 80156cc:	68f8      	ldr	r0, [r7, #12]
 80156ce:	f000 fbcf 	bl	8015e70 <SPI_CloseTransfer>
 80156d2:	68fb      	ldr	r3, [r7, #12]
 80156d4:	2201      	movs	r2, #1
 80156d6:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
 80156da:	68fb      	ldr	r3, [r7, #12]
 80156dc:	2200      	movs	r2, #0
 80156de:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 80156e2:	68fb      	ldr	r3, [r7, #12]
 80156e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80156e8:	2b00      	cmp	r3, #0
 80156ea:	d001      	beq.n	80156f0 <HAL_SPI_TransmitReceive+0x668>
 80156ec:	2301      	movs	r3, #1
 80156ee:	e000      	b.n	80156f2 <HAL_SPI_TransmitReceive+0x66a>
 80156f0:	2300      	movs	r3, #0
 80156f2:	4618      	mov	r0, r3
 80156f4:	3730      	adds	r7, #48	@ 0x30
 80156f6:	46bd      	mov	sp, r7
 80156f8:	bd80      	pop	{r7, pc}
 80156fa:	bf00      	nop

080156fc <HAL_SPI_Transmit_DMA>:
 80156fc:	b580      	push	{r7, lr}
 80156fe:	b084      	sub	sp, #16
 8015700:	af00      	add	r7, sp, #0
 8015702:	60f8      	str	r0, [r7, #12]
 8015704:	60b9      	str	r1, [r7, #8]
 8015706:	4613      	mov	r3, r2
 8015708:	80fb      	strh	r3, [r7, #6]
 801570a:	68fb      	ldr	r3, [r7, #12]
 801570c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8015710:	b2db      	uxtb	r3, r3
 8015712:	2b01      	cmp	r3, #1
 8015714:	d001      	beq.n	801571a <HAL_SPI_Transmit_DMA+0x1e>
 8015716:	2302      	movs	r3, #2
 8015718:	e126      	b.n	8015968 <HAL_SPI_Transmit_DMA+0x26c>
 801571a:	68bb      	ldr	r3, [r7, #8]
 801571c:	2b00      	cmp	r3, #0
 801571e:	d002      	beq.n	8015726 <HAL_SPI_Transmit_DMA+0x2a>
 8015720:	88fb      	ldrh	r3, [r7, #6]
 8015722:	2b00      	cmp	r3, #0
 8015724:	d101      	bne.n	801572a <HAL_SPI_Transmit_DMA+0x2e>
 8015726:	2301      	movs	r3, #1
 8015728:	e11e      	b.n	8015968 <HAL_SPI_Transmit_DMA+0x26c>
 801572a:	68fb      	ldr	r3, [r7, #12]
 801572c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8015730:	2b01      	cmp	r3, #1
 8015732:	d101      	bne.n	8015738 <HAL_SPI_Transmit_DMA+0x3c>
 8015734:	2302      	movs	r3, #2
 8015736:	e117      	b.n	8015968 <HAL_SPI_Transmit_DMA+0x26c>
 8015738:	68fb      	ldr	r3, [r7, #12]
 801573a:	2201      	movs	r2, #1
 801573c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 8015740:	68fb      	ldr	r3, [r7, #12]
 8015742:	2203      	movs	r2, #3
 8015744:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
 8015748:	68fb      	ldr	r3, [r7, #12]
 801574a:	2200      	movs	r2, #0
 801574c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8015750:	68fb      	ldr	r3, [r7, #12]
 8015752:	68ba      	ldr	r2, [r7, #8]
 8015754:	65da      	str	r2, [r3, #92]	@ 0x5c
 8015756:	68fb      	ldr	r3, [r7, #12]
 8015758:	88fa      	ldrh	r2, [r7, #6]
 801575a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 801575e:	68fb      	ldr	r3, [r7, #12]
 8015760:	88fa      	ldrh	r2, [r7, #6]
 8015762:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8015766:	68fb      	ldr	r3, [r7, #12]
 8015768:	2200      	movs	r2, #0
 801576a:	665a      	str	r2, [r3, #100]	@ 0x64
 801576c:	68fb      	ldr	r3, [r7, #12]
 801576e:	2200      	movs	r2, #0
 8015770:	675a      	str	r2, [r3, #116]	@ 0x74
 8015772:	68fb      	ldr	r3, [r7, #12]
 8015774:	2200      	movs	r2, #0
 8015776:	671a      	str	r2, [r3, #112]	@ 0x70
 8015778:	68fb      	ldr	r3, [r7, #12]
 801577a:	2200      	movs	r2, #0
 801577c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 8015780:	68fb      	ldr	r3, [r7, #12]
 8015782:	2200      	movs	r2, #0
 8015784:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8015788:	68fb      	ldr	r3, [r7, #12]
 801578a:	689b      	ldr	r3, [r3, #8]
 801578c:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8015790:	d108      	bne.n	80157a4 <HAL_SPI_Transmit_DMA+0xa8>
 8015792:	68fb      	ldr	r3, [r7, #12]
 8015794:	681b      	ldr	r3, [r3, #0]
 8015796:	681a      	ldr	r2, [r3, #0]
 8015798:	68fb      	ldr	r3, [r7, #12]
 801579a:	681b      	ldr	r3, [r3, #0]
 801579c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80157a0:	601a      	str	r2, [r3, #0]
 80157a2:	e009      	b.n	80157b8 <HAL_SPI_Transmit_DMA+0xbc>
 80157a4:	68fb      	ldr	r3, [r7, #12]
 80157a6:	681b      	ldr	r3, [r3, #0]
 80157a8:	68db      	ldr	r3, [r3, #12]
 80157aa:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 80157ae:	68fb      	ldr	r3, [r7, #12]
 80157b0:	681b      	ldr	r3, [r3, #0]
 80157b2:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80157b6:	60da      	str	r2, [r3, #12]
 80157b8:	68fb      	ldr	r3, [r7, #12]
 80157ba:	68db      	ldr	r3, [r3, #12]
 80157bc:	2b0f      	cmp	r3, #15
 80157be:	d905      	bls.n	80157cc <HAL_SPI_Transmit_DMA+0xd0>
 80157c0:	68fb      	ldr	r3, [r7, #12]
 80157c2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80157c4:	699b      	ldr	r3, [r3, #24]
 80157c6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80157ca:	d10f      	bne.n	80157ec <HAL_SPI_Transmit_DMA+0xf0>
 80157cc:	68fb      	ldr	r3, [r7, #12]
 80157ce:	68db      	ldr	r3, [r3, #12]
 80157d0:	2b07      	cmp	r3, #7
 80157d2:	d911      	bls.n	80157f8 <HAL_SPI_Transmit_DMA+0xfc>
 80157d4:	68fb      	ldr	r3, [r7, #12]
 80157d6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80157d8:	699b      	ldr	r3, [r3, #24]
 80157da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80157de:	d00b      	beq.n	80157f8 <HAL_SPI_Transmit_DMA+0xfc>
 80157e0:	68fb      	ldr	r3, [r7, #12]
 80157e2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80157e4:	699b      	ldr	r3, [r3, #24]
 80157e6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80157ea:	d005      	beq.n	80157f8 <HAL_SPI_Transmit_DMA+0xfc>
 80157ec:	68fb      	ldr	r3, [r7, #12]
 80157ee:	2200      	movs	r2, #0
 80157f0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 80157f4:	2301      	movs	r3, #1
 80157f6:	e0b7      	b.n	8015968 <HAL_SPI_Transmit_DMA+0x26c>
 80157f8:	68fb      	ldr	r3, [r7, #12]
 80157fa:	68db      	ldr	r3, [r3, #12]
 80157fc:	2b07      	cmp	r3, #7
 80157fe:	d820      	bhi.n	8015842 <HAL_SPI_Transmit_DMA+0x146>
 8015800:	68fb      	ldr	r3, [r7, #12]
 8015802:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015804:	699b      	ldr	r3, [r3, #24]
 8015806:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801580a:	d109      	bne.n	8015820 <HAL_SPI_Transmit_DMA+0x124>
 801580c:	68fb      	ldr	r3, [r7, #12]
 801580e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8015812:	b29b      	uxth	r3, r3
 8015814:	3301      	adds	r3, #1
 8015816:	105b      	asrs	r3, r3, #1
 8015818:	b29a      	uxth	r2, r3
 801581a:	68fb      	ldr	r3, [r7, #12]
 801581c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8015820:	68fb      	ldr	r3, [r7, #12]
 8015822:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015824:	699b      	ldr	r3, [r3, #24]
 8015826:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801582a:	d11e      	bne.n	801586a <HAL_SPI_Transmit_DMA+0x16e>
 801582c:	68fb      	ldr	r3, [r7, #12]
 801582e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8015832:	b29b      	uxth	r3, r3
 8015834:	3303      	adds	r3, #3
 8015836:	109b      	asrs	r3, r3, #2
 8015838:	b29a      	uxth	r2, r3
 801583a:	68fb      	ldr	r3, [r7, #12]
 801583c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8015840:	e013      	b.n	801586a <HAL_SPI_Transmit_DMA+0x16e>
 8015842:	68fb      	ldr	r3, [r7, #12]
 8015844:	68db      	ldr	r3, [r3, #12]
 8015846:	2b0f      	cmp	r3, #15
 8015848:	d80f      	bhi.n	801586a <HAL_SPI_Transmit_DMA+0x16e>
 801584a:	68fb      	ldr	r3, [r7, #12]
 801584c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801584e:	699b      	ldr	r3, [r3, #24]
 8015850:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8015854:	d109      	bne.n	801586a <HAL_SPI_Transmit_DMA+0x16e>
 8015856:	68fb      	ldr	r3, [r7, #12]
 8015858:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801585c:	b29b      	uxth	r3, r3
 801585e:	3301      	adds	r3, #1
 8015860:	105b      	asrs	r3, r3, #1
 8015862:	b29a      	uxth	r2, r3
 8015864:	68fb      	ldr	r3, [r7, #12]
 8015866:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 801586a:	68fb      	ldr	r3, [r7, #12]
 801586c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801586e:	4a40      	ldr	r2, [pc, #256]	@ (8015970 <HAL_SPI_Transmit_DMA+0x274>)
 8015870:	641a      	str	r2, [r3, #64]	@ 0x40
 8015872:	68fb      	ldr	r3, [r7, #12]
 8015874:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015876:	4a3f      	ldr	r2, [pc, #252]	@ (8015974 <HAL_SPI_Transmit_DMA+0x278>)
 8015878:	63da      	str	r2, [r3, #60]	@ 0x3c
 801587a:	68fb      	ldr	r3, [r7, #12]
 801587c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801587e:	4a3e      	ldr	r2, [pc, #248]	@ (8015978 <HAL_SPI_Transmit_DMA+0x27c>)
 8015880:	64da      	str	r2, [r3, #76]	@ 0x4c
 8015882:	68fb      	ldr	r3, [r7, #12]
 8015884:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015886:	2200      	movs	r2, #0
 8015888:	651a      	str	r2, [r3, #80]	@ 0x50
 801588a:	68fb      	ldr	r3, [r7, #12]
 801588c:	681b      	ldr	r3, [r3, #0]
 801588e:	689a      	ldr	r2, [r3, #8]
 8015890:	68fb      	ldr	r3, [r7, #12]
 8015892:	681b      	ldr	r3, [r3, #0]
 8015894:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8015898:	609a      	str	r2, [r3, #8]
 801589a:	68fb      	ldr	r3, [r7, #12]
 801589c:	6f98      	ldr	r0, [r3, #120]	@ 0x78
 801589e:	68fb      	ldr	r3, [r7, #12]
 80158a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80158a2:	4619      	mov	r1, r3
 80158a4:	68fb      	ldr	r3, [r7, #12]
 80158a6:	681b      	ldr	r3, [r3, #0]
 80158a8:	3320      	adds	r3, #32
 80158aa:	461a      	mov	r2, r3
 80158ac:	68fb      	ldr	r3, [r7, #12]
 80158ae:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80158b2:	b29b      	uxth	r3, r3
 80158b4:	f7f6 f972 	bl	800bb9c <HAL_DMA_Start_IT>
 80158b8:	4603      	mov	r3, r0
 80158ba:	2b00      	cmp	r3, #0
 80158bc:	d011      	beq.n	80158e2 <HAL_SPI_Transmit_DMA+0x1e6>
 80158be:	68fb      	ldr	r3, [r7, #12]
 80158c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80158c4:	f043 0210 	orr.w	r2, r3, #16
 80158c8:	68fb      	ldr	r3, [r7, #12]
 80158ca:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 80158ce:	68fb      	ldr	r3, [r7, #12]
 80158d0:	2201      	movs	r2, #1
 80158d2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
 80158d6:	68fb      	ldr	r3, [r7, #12]
 80158d8:	2200      	movs	r2, #0
 80158da:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 80158de:	2301      	movs	r3, #1
 80158e0:	e042      	b.n	8015968 <HAL_SPI_Transmit_DMA+0x26c>
 80158e2:	68fb      	ldr	r3, [r7, #12]
 80158e4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80158e6:	69db      	ldr	r3, [r3, #28]
 80158e8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80158ec:	d108      	bne.n	8015900 <HAL_SPI_Transmit_DMA+0x204>
 80158ee:	68fb      	ldr	r3, [r7, #12]
 80158f0:	681b      	ldr	r3, [r3, #0]
 80158f2:	6859      	ldr	r1, [r3, #4]
 80158f4:	68fb      	ldr	r3, [r7, #12]
 80158f6:	681a      	ldr	r2, [r3, #0]
 80158f8:	4b20      	ldr	r3, [pc, #128]	@ (801597c <HAL_SPI_Transmit_DMA+0x280>)
 80158fa:	400b      	ands	r3, r1
 80158fc:	6053      	str	r3, [r2, #4]
 80158fe:	e009      	b.n	8015914 <HAL_SPI_Transmit_DMA+0x218>
 8015900:	68fb      	ldr	r3, [r7, #12]
 8015902:	681b      	ldr	r3, [r3, #0]
 8015904:	685a      	ldr	r2, [r3, #4]
 8015906:	4b1d      	ldr	r3, [pc, #116]	@ (801597c <HAL_SPI_Transmit_DMA+0x280>)
 8015908:	4013      	ands	r3, r2
 801590a:	88f9      	ldrh	r1, [r7, #6]
 801590c:	68fa      	ldr	r2, [r7, #12]
 801590e:	6812      	ldr	r2, [r2, #0]
 8015910:	430b      	orrs	r3, r1
 8015912:	6053      	str	r3, [r2, #4]
 8015914:	68fb      	ldr	r3, [r7, #12]
 8015916:	681b      	ldr	r3, [r3, #0]
 8015918:	689a      	ldr	r2, [r3, #8]
 801591a:	68fb      	ldr	r3, [r7, #12]
 801591c:	681b      	ldr	r3, [r3, #0]
 801591e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8015922:	609a      	str	r2, [r3, #8]
 8015924:	68fb      	ldr	r3, [r7, #12]
 8015926:	681b      	ldr	r3, [r3, #0]
 8015928:	691a      	ldr	r2, [r3, #16]
 801592a:	68fb      	ldr	r3, [r7, #12]
 801592c:	681b      	ldr	r3, [r3, #0]
 801592e:	f442 7248 	orr.w	r2, r2, #800	@ 0x320
 8015932:	611a      	str	r2, [r3, #16]
 8015934:	68fb      	ldr	r3, [r7, #12]
 8015936:	681b      	ldr	r3, [r3, #0]
 8015938:	681a      	ldr	r2, [r3, #0]
 801593a:	68fb      	ldr	r3, [r7, #12]
 801593c:	681b      	ldr	r3, [r3, #0]
 801593e:	f042 0201 	orr.w	r2, r2, #1
 8015942:	601a      	str	r2, [r3, #0]
 8015944:	68fb      	ldr	r3, [r7, #12]
 8015946:	685b      	ldr	r3, [r3, #4]
 8015948:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 801594c:	d107      	bne.n	801595e <HAL_SPI_Transmit_DMA+0x262>
 801594e:	68fb      	ldr	r3, [r7, #12]
 8015950:	681b      	ldr	r3, [r3, #0]
 8015952:	681a      	ldr	r2, [r3, #0]
 8015954:	68fb      	ldr	r3, [r7, #12]
 8015956:	681b      	ldr	r3, [r3, #0]
 8015958:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 801595c:	601a      	str	r2, [r3, #0]
 801595e:	68fb      	ldr	r3, [r7, #12]
 8015960:	2200      	movs	r2, #0
 8015962:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 8015966:	2300      	movs	r3, #0
 8015968:	4618      	mov	r0, r3
 801596a:	3710      	adds	r7, #16
 801596c:	46bd      	mov	sp, r7
 801596e:	bd80      	pop	{r7, pc}
 8015970:	08015ddb 	.word	0x08015ddb
 8015974:	08015d95 	.word	0x08015d95
 8015978:	08015df7 	.word	0x08015df7
 801597c:	ffff0000 	.word	0xffff0000

08015980 <HAL_SPI_IRQHandler>:
 8015980:	b580      	push	{r7, lr}
 8015982:	b08a      	sub	sp, #40	@ 0x28
 8015984:	af00      	add	r7, sp, #0
 8015986:	6078      	str	r0, [r7, #4]
 8015988:	687b      	ldr	r3, [r7, #4]
 801598a:	681b      	ldr	r3, [r3, #0]
 801598c:	691b      	ldr	r3, [r3, #16]
 801598e:	623b      	str	r3, [r7, #32]
 8015990:	687b      	ldr	r3, [r7, #4]
 8015992:	681b      	ldr	r3, [r3, #0]
 8015994:	695b      	ldr	r3, [r3, #20]
 8015996:	61fb      	str	r3, [r7, #28]
 8015998:	6a3a      	ldr	r2, [r7, #32]
 801599a:	69fb      	ldr	r3, [r7, #28]
 801599c:	4013      	ands	r3, r2
 801599e:	61bb      	str	r3, [r7, #24]
 80159a0:	687b      	ldr	r3, [r7, #4]
 80159a2:	681b      	ldr	r3, [r3, #0]
 80159a4:	689b      	ldr	r3, [r3, #8]
 80159a6:	617b      	str	r3, [r7, #20]
 80159a8:	2300      	movs	r3, #0
 80159aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80159ac:	687b      	ldr	r3, [r7, #4]
 80159ae:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80159b2:	74fb      	strb	r3, [r7, #19]
 80159b4:	687b      	ldr	r3, [r7, #4]
 80159b6:	681b      	ldr	r3, [r3, #0]
 80159b8:	3330      	adds	r3, #48	@ 0x30
 80159ba:	60fb      	str	r3, [r7, #12]
 80159bc:	69fb      	ldr	r3, [r7, #28]
 80159be:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80159c2:	2b00      	cmp	r3, #0
 80159c4:	d010      	beq.n	80159e8 <HAL_SPI_IRQHandler+0x68>
 80159c6:	6a3b      	ldr	r3, [r7, #32]
 80159c8:	f003 0308 	and.w	r3, r3, #8
 80159cc:	2b00      	cmp	r3, #0
 80159ce:	d00b      	beq.n	80159e8 <HAL_SPI_IRQHandler+0x68>
 80159d0:	687b      	ldr	r3, [r7, #4]
 80159d2:	681b      	ldr	r3, [r3, #0]
 80159d4:	699a      	ldr	r2, [r3, #24]
 80159d6:	687b      	ldr	r3, [r7, #4]
 80159d8:	681b      	ldr	r3, [r3, #0]
 80159da:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80159de:	619a      	str	r2, [r3, #24]
 80159e0:	6878      	ldr	r0, [r7, #4]
 80159e2:	f000 f9cd 	bl	8015d80 <HAL_SPI_SuspendCallback>
 80159e6:	e192      	b.n	8015d0e <HAL_SPI_IRQHandler+0x38e>
 80159e8:	69bb      	ldr	r3, [r7, #24]
 80159ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80159ee:	2b00      	cmp	r3, #0
 80159f0:	d113      	bne.n	8015a1a <HAL_SPI_IRQHandler+0x9a>
 80159f2:	69bb      	ldr	r3, [r7, #24]
 80159f4:	f003 0320 	and.w	r3, r3, #32
 80159f8:	2b00      	cmp	r3, #0
 80159fa:	d10e      	bne.n	8015a1a <HAL_SPI_IRQHandler+0x9a>
 80159fc:	69bb      	ldr	r3, [r7, #24]
 80159fe:	f003 0304 	and.w	r3, r3, #4
 8015a02:	2b00      	cmp	r3, #0
 8015a04:	d009      	beq.n	8015a1a <HAL_SPI_IRQHandler+0x9a>
 8015a06:	687b      	ldr	r3, [r7, #4]
 8015a08:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015a0a:	6878      	ldr	r0, [r7, #4]
 8015a0c:	4798      	blx	r3
 8015a0e:	687b      	ldr	r3, [r7, #4]
 8015a10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015a12:	6878      	ldr	r0, [r7, #4]
 8015a14:	4798      	blx	r3
 8015a16:	2301      	movs	r3, #1
 8015a18:	627b      	str	r3, [r7, #36]	@ 0x24
 8015a1a:	69bb      	ldr	r3, [r7, #24]
 8015a1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8015a20:	2b00      	cmp	r3, #0
 8015a22:	d10f      	bne.n	8015a44 <HAL_SPI_IRQHandler+0xc4>
 8015a24:	69bb      	ldr	r3, [r7, #24]
 8015a26:	f003 0301 	and.w	r3, r3, #1
 8015a2a:	2b00      	cmp	r3, #0
 8015a2c:	d00a      	beq.n	8015a44 <HAL_SPI_IRQHandler+0xc4>
 8015a2e:	69bb      	ldr	r3, [r7, #24]
 8015a30:	f003 0304 	and.w	r3, r3, #4
 8015a34:	2b00      	cmp	r3, #0
 8015a36:	d105      	bne.n	8015a44 <HAL_SPI_IRQHandler+0xc4>
 8015a38:	687b      	ldr	r3, [r7, #4]
 8015a3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015a3c:	6878      	ldr	r0, [r7, #4]
 8015a3e:	4798      	blx	r3
 8015a40:	2301      	movs	r3, #1
 8015a42:	627b      	str	r3, [r7, #36]	@ 0x24
 8015a44:	69bb      	ldr	r3, [r7, #24]
 8015a46:	f003 0320 	and.w	r3, r3, #32
 8015a4a:	2b00      	cmp	r3, #0
 8015a4c:	d10f      	bne.n	8015a6e <HAL_SPI_IRQHandler+0xee>
 8015a4e:	69bb      	ldr	r3, [r7, #24]
 8015a50:	f003 0302 	and.w	r3, r3, #2
 8015a54:	2b00      	cmp	r3, #0
 8015a56:	d00a      	beq.n	8015a6e <HAL_SPI_IRQHandler+0xee>
 8015a58:	69bb      	ldr	r3, [r7, #24]
 8015a5a:	f003 0304 	and.w	r3, r3, #4
 8015a5e:	2b00      	cmp	r3, #0
 8015a60:	d105      	bne.n	8015a6e <HAL_SPI_IRQHandler+0xee>
 8015a62:	687b      	ldr	r3, [r7, #4]
 8015a64:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015a66:	6878      	ldr	r0, [r7, #4]
 8015a68:	4798      	blx	r3
 8015a6a:	2301      	movs	r3, #1
 8015a6c:	627b      	str	r3, [r7, #36]	@ 0x24
 8015a6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015a70:	2b00      	cmp	r3, #0
 8015a72:	f040 8147 	bne.w	8015d04 <HAL_SPI_IRQHandler+0x384>
 8015a76:	69bb      	ldr	r3, [r7, #24]
 8015a78:	f003 0308 	and.w	r3, r3, #8
 8015a7c:	2b00      	cmp	r3, #0
 8015a7e:	f000 808b 	beq.w	8015b98 <HAL_SPI_IRQHandler+0x218>
 8015a82:	687b      	ldr	r3, [r7, #4]
 8015a84:	681b      	ldr	r3, [r3, #0]
 8015a86:	699a      	ldr	r2, [r3, #24]
 8015a88:	687b      	ldr	r3, [r7, #4]
 8015a8a:	681b      	ldr	r3, [r3, #0]
 8015a8c:	f042 0208 	orr.w	r2, r2, #8
 8015a90:	619a      	str	r2, [r3, #24]
 8015a92:	687b      	ldr	r3, [r7, #4]
 8015a94:	681b      	ldr	r3, [r3, #0]
 8015a96:	699a      	ldr	r2, [r3, #24]
 8015a98:	687b      	ldr	r3, [r7, #4]
 8015a9a:	681b      	ldr	r3, [r3, #0]
 8015a9c:	f042 0210 	orr.w	r2, r2, #16
 8015aa0:	619a      	str	r2, [r3, #24]
 8015aa2:	687b      	ldr	r3, [r7, #4]
 8015aa4:	681b      	ldr	r3, [r3, #0]
 8015aa6:	699a      	ldr	r2, [r3, #24]
 8015aa8:	687b      	ldr	r3, [r7, #4]
 8015aaa:	681b      	ldr	r3, [r3, #0]
 8015aac:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8015ab0:	619a      	str	r2, [r3, #24]
 8015ab2:	687b      	ldr	r3, [r7, #4]
 8015ab4:	681b      	ldr	r3, [r3, #0]
 8015ab6:	691a      	ldr	r2, [r3, #16]
 8015ab8:	687b      	ldr	r3, [r7, #4]
 8015aba:	681b      	ldr	r3, [r3, #0]
 8015abc:	f022 0208 	bic.w	r2, r2, #8
 8015ac0:	611a      	str	r2, [r3, #16]
 8015ac2:	687b      	ldr	r3, [r7, #4]
 8015ac4:	681b      	ldr	r3, [r3, #0]
 8015ac6:	689b      	ldr	r3, [r3, #8]
 8015ac8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8015acc:	2b00      	cmp	r3, #0
 8015ace:	d13d      	bne.n	8015b4c <HAL_SPI_IRQHandler+0x1cc>
 8015ad0:	e036      	b.n	8015b40 <HAL_SPI_IRQHandler+0x1c0>
 8015ad2:	687b      	ldr	r3, [r7, #4]
 8015ad4:	68db      	ldr	r3, [r3, #12]
 8015ad6:	2b0f      	cmp	r3, #15
 8015ad8:	d90b      	bls.n	8015af2 <HAL_SPI_IRQHandler+0x172>
 8015ada:	687b      	ldr	r3, [r7, #4]
 8015adc:	681a      	ldr	r2, [r3, #0]
 8015ade:	687b      	ldr	r3, [r7, #4]
 8015ae0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015ae2:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8015ae4:	601a      	str	r2, [r3, #0]
 8015ae6:	687b      	ldr	r3, [r7, #4]
 8015ae8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015aea:	1d1a      	adds	r2, r3, #4
 8015aec:	687b      	ldr	r3, [r7, #4]
 8015aee:	665a      	str	r2, [r3, #100]	@ 0x64
 8015af0:	e01d      	b.n	8015b2e <HAL_SPI_IRQHandler+0x1ae>
 8015af2:	687b      	ldr	r3, [r7, #4]
 8015af4:	68db      	ldr	r3, [r3, #12]
 8015af6:	2b07      	cmp	r3, #7
 8015af8:	d90b      	bls.n	8015b12 <HAL_SPI_IRQHandler+0x192>
 8015afa:	687b      	ldr	r3, [r7, #4]
 8015afc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015afe:	68fa      	ldr	r2, [r7, #12]
 8015b00:	8812      	ldrh	r2, [r2, #0]
 8015b02:	b292      	uxth	r2, r2
 8015b04:	801a      	strh	r2, [r3, #0]
 8015b06:	687b      	ldr	r3, [r7, #4]
 8015b08:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015b0a:	1c9a      	adds	r2, r3, #2
 8015b0c:	687b      	ldr	r3, [r7, #4]
 8015b0e:	665a      	str	r2, [r3, #100]	@ 0x64
 8015b10:	e00d      	b.n	8015b2e <HAL_SPI_IRQHandler+0x1ae>
 8015b12:	687b      	ldr	r3, [r7, #4]
 8015b14:	681b      	ldr	r3, [r3, #0]
 8015b16:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8015b1a:	687b      	ldr	r3, [r7, #4]
 8015b1c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015b1e:	7812      	ldrb	r2, [r2, #0]
 8015b20:	b2d2      	uxtb	r2, r2
 8015b22:	701a      	strb	r2, [r3, #0]
 8015b24:	687b      	ldr	r3, [r7, #4]
 8015b26:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015b28:	1c5a      	adds	r2, r3, #1
 8015b2a:	687b      	ldr	r3, [r7, #4]
 8015b2c:	665a      	str	r2, [r3, #100]	@ 0x64
 8015b2e:	687b      	ldr	r3, [r7, #4]
 8015b30:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8015b34:	b29b      	uxth	r3, r3
 8015b36:	3b01      	subs	r3, #1
 8015b38:	b29a      	uxth	r2, r3
 8015b3a:	687b      	ldr	r3, [r7, #4]
 8015b3c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8015b40:	687b      	ldr	r3, [r7, #4]
 8015b42:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8015b46:	b29b      	uxth	r3, r3
 8015b48:	2b00      	cmp	r3, #0
 8015b4a:	d1c2      	bne.n	8015ad2 <HAL_SPI_IRQHandler+0x152>
 8015b4c:	6878      	ldr	r0, [r7, #4]
 8015b4e:	f000 f98f 	bl	8015e70 <SPI_CloseTransfer>
 8015b52:	687b      	ldr	r3, [r7, #4]
 8015b54:	2201      	movs	r2, #1
 8015b56:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
 8015b5a:	687b      	ldr	r3, [r7, #4]
 8015b5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015b60:	2b00      	cmp	r3, #0
 8015b62:	d003      	beq.n	8015b6c <HAL_SPI_IRQHandler+0x1ec>
 8015b64:	6878      	ldr	r0, [r7, #4]
 8015b66:	f000 f901 	bl	8015d6c <HAL_SPI_ErrorCallback>
 8015b6a:	e0d0      	b.n	8015d0e <HAL_SPI_IRQHandler+0x38e>
 8015b6c:	7cfb      	ldrb	r3, [r7, #19]
 8015b6e:	2b05      	cmp	r3, #5
 8015b70:	d103      	bne.n	8015b7a <HAL_SPI_IRQHandler+0x1fa>
 8015b72:	6878      	ldr	r0, [r7, #4]
 8015b74:	f000 f8e6 	bl	8015d44 <HAL_SPI_TxRxCpltCallback>
 8015b78:	e0c6      	b.n	8015d08 <HAL_SPI_IRQHandler+0x388>
 8015b7a:	7cfb      	ldrb	r3, [r7, #19]
 8015b7c:	2b04      	cmp	r3, #4
 8015b7e:	d103      	bne.n	8015b88 <HAL_SPI_IRQHandler+0x208>
 8015b80:	6878      	ldr	r0, [r7, #4]
 8015b82:	f000 f8d5 	bl	8015d30 <HAL_SPI_RxCpltCallback>
 8015b86:	e0bf      	b.n	8015d08 <HAL_SPI_IRQHandler+0x388>
 8015b88:	7cfb      	ldrb	r3, [r7, #19]
 8015b8a:	2b03      	cmp	r3, #3
 8015b8c:	f040 80bc 	bne.w	8015d08 <HAL_SPI_IRQHandler+0x388>
 8015b90:	6878      	ldr	r0, [r7, #4]
 8015b92:	f000 f8c3 	bl	8015d1c <HAL_SPI_TxCpltCallback>
 8015b96:	e0b7      	b.n	8015d08 <HAL_SPI_IRQHandler+0x388>
 8015b98:	69bb      	ldr	r3, [r7, #24]
 8015b9a:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 8015b9e:	2b00      	cmp	r3, #0
 8015ba0:	f000 80b5 	beq.w	8015d0e <HAL_SPI_IRQHandler+0x38e>
 8015ba4:	69bb      	ldr	r3, [r7, #24]
 8015ba6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8015baa:	2b00      	cmp	r3, #0
 8015bac:	d00f      	beq.n	8015bce <HAL_SPI_IRQHandler+0x24e>
 8015bae:	687b      	ldr	r3, [r7, #4]
 8015bb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015bb4:	f043 0204 	orr.w	r2, r3, #4
 8015bb8:	687b      	ldr	r3, [r7, #4]
 8015bba:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8015bbe:	687b      	ldr	r3, [r7, #4]
 8015bc0:	681b      	ldr	r3, [r3, #0]
 8015bc2:	699a      	ldr	r2, [r3, #24]
 8015bc4:	687b      	ldr	r3, [r7, #4]
 8015bc6:	681b      	ldr	r3, [r3, #0]
 8015bc8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8015bcc:	619a      	str	r2, [r3, #24]
 8015bce:	69bb      	ldr	r3, [r7, #24]
 8015bd0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8015bd4:	2b00      	cmp	r3, #0
 8015bd6:	d00f      	beq.n	8015bf8 <HAL_SPI_IRQHandler+0x278>
 8015bd8:	687b      	ldr	r3, [r7, #4]
 8015bda:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015bde:	f043 0201 	orr.w	r2, r3, #1
 8015be2:	687b      	ldr	r3, [r7, #4]
 8015be4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8015be8:	687b      	ldr	r3, [r7, #4]
 8015bea:	681b      	ldr	r3, [r3, #0]
 8015bec:	699a      	ldr	r2, [r3, #24]
 8015bee:	687b      	ldr	r3, [r7, #4]
 8015bf0:	681b      	ldr	r3, [r3, #0]
 8015bf2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8015bf6:	619a      	str	r2, [r3, #24]
 8015bf8:	69bb      	ldr	r3, [r7, #24]
 8015bfa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8015bfe:	2b00      	cmp	r3, #0
 8015c00:	d00f      	beq.n	8015c22 <HAL_SPI_IRQHandler+0x2a2>
 8015c02:	687b      	ldr	r3, [r7, #4]
 8015c04:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015c08:	f043 0208 	orr.w	r2, r3, #8
 8015c0c:	687b      	ldr	r3, [r7, #4]
 8015c0e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8015c12:	687b      	ldr	r3, [r7, #4]
 8015c14:	681b      	ldr	r3, [r3, #0]
 8015c16:	699a      	ldr	r2, [r3, #24]
 8015c18:	687b      	ldr	r3, [r7, #4]
 8015c1a:	681b      	ldr	r3, [r3, #0]
 8015c1c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8015c20:	619a      	str	r2, [r3, #24]
 8015c22:	69bb      	ldr	r3, [r7, #24]
 8015c24:	f003 0320 	and.w	r3, r3, #32
 8015c28:	2b00      	cmp	r3, #0
 8015c2a:	d00f      	beq.n	8015c4c <HAL_SPI_IRQHandler+0x2cc>
 8015c2c:	687b      	ldr	r3, [r7, #4]
 8015c2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015c32:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8015c36:	687b      	ldr	r3, [r7, #4]
 8015c38:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8015c3c:	687b      	ldr	r3, [r7, #4]
 8015c3e:	681b      	ldr	r3, [r3, #0]
 8015c40:	699a      	ldr	r2, [r3, #24]
 8015c42:	687b      	ldr	r3, [r7, #4]
 8015c44:	681b      	ldr	r3, [r3, #0]
 8015c46:	f042 0220 	orr.w	r2, r2, #32
 8015c4a:	619a      	str	r2, [r3, #24]
 8015c4c:	687b      	ldr	r3, [r7, #4]
 8015c4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015c52:	2b00      	cmp	r3, #0
 8015c54:	d05a      	beq.n	8015d0c <HAL_SPI_IRQHandler+0x38c>
 8015c56:	687b      	ldr	r3, [r7, #4]
 8015c58:	681b      	ldr	r3, [r3, #0]
 8015c5a:	681a      	ldr	r2, [r3, #0]
 8015c5c:	687b      	ldr	r3, [r7, #4]
 8015c5e:	681b      	ldr	r3, [r3, #0]
 8015c60:	f022 0201 	bic.w	r2, r2, #1
 8015c64:	601a      	str	r2, [r3, #0]
 8015c66:	687b      	ldr	r3, [r7, #4]
 8015c68:	681b      	ldr	r3, [r3, #0]
 8015c6a:	6919      	ldr	r1, [r3, #16]
 8015c6c:	687b      	ldr	r3, [r7, #4]
 8015c6e:	681a      	ldr	r2, [r3, #0]
 8015c70:	4b28      	ldr	r3, [pc, #160]	@ (8015d14 <HAL_SPI_IRQHandler+0x394>)
 8015c72:	400b      	ands	r3, r1
 8015c74:	6113      	str	r3, [r2, #16]
 8015c76:	697b      	ldr	r3, [r7, #20]
 8015c78:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8015c7c:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8015c80:	d138      	bne.n	8015cf4 <HAL_SPI_IRQHandler+0x374>
 8015c82:	687b      	ldr	r3, [r7, #4]
 8015c84:	681b      	ldr	r3, [r3, #0]
 8015c86:	689a      	ldr	r2, [r3, #8]
 8015c88:	687b      	ldr	r3, [r7, #4]
 8015c8a:	681b      	ldr	r3, [r3, #0]
 8015c8c:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8015c90:	609a      	str	r2, [r3, #8]
 8015c92:	687b      	ldr	r3, [r7, #4]
 8015c94:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8015c96:	2b00      	cmp	r3, #0
 8015c98:	d013      	beq.n	8015cc2 <HAL_SPI_IRQHandler+0x342>
 8015c9a:	687b      	ldr	r3, [r7, #4]
 8015c9c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8015c9e:	4a1e      	ldr	r2, [pc, #120]	@ (8015d18 <HAL_SPI_IRQHandler+0x398>)
 8015ca0:	651a      	str	r2, [r3, #80]	@ 0x50
 8015ca2:	687b      	ldr	r3, [r7, #4]
 8015ca4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8015ca6:	4618      	mov	r0, r3
 8015ca8:	f7f6 fd00 	bl	800c6ac <HAL_DMA_Abort_IT>
 8015cac:	4603      	mov	r3, r0
 8015cae:	2b00      	cmp	r3, #0
 8015cb0:	d007      	beq.n	8015cc2 <HAL_SPI_IRQHandler+0x342>
 8015cb2:	687b      	ldr	r3, [r7, #4]
 8015cb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015cb8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8015cbc:	687b      	ldr	r3, [r7, #4]
 8015cbe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8015cc2:	687b      	ldr	r3, [r7, #4]
 8015cc4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015cc6:	2b00      	cmp	r3, #0
 8015cc8:	d020      	beq.n	8015d0c <HAL_SPI_IRQHandler+0x38c>
 8015cca:	687b      	ldr	r3, [r7, #4]
 8015ccc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015cce:	4a12      	ldr	r2, [pc, #72]	@ (8015d18 <HAL_SPI_IRQHandler+0x398>)
 8015cd0:	651a      	str	r2, [r3, #80]	@ 0x50
 8015cd2:	687b      	ldr	r3, [r7, #4]
 8015cd4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015cd6:	4618      	mov	r0, r3
 8015cd8:	f7f6 fce8 	bl	800c6ac <HAL_DMA_Abort_IT>
 8015cdc:	4603      	mov	r3, r0
 8015cde:	2b00      	cmp	r3, #0
 8015ce0:	d014      	beq.n	8015d0c <HAL_SPI_IRQHandler+0x38c>
 8015ce2:	687b      	ldr	r3, [r7, #4]
 8015ce4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015ce8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8015cec:	687b      	ldr	r3, [r7, #4]
 8015cee:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8015cf2:	e00b      	b.n	8015d0c <HAL_SPI_IRQHandler+0x38c>
 8015cf4:	687b      	ldr	r3, [r7, #4]
 8015cf6:	2201      	movs	r2, #1
 8015cf8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
 8015cfc:	6878      	ldr	r0, [r7, #4]
 8015cfe:	f000 f835 	bl	8015d6c <HAL_SPI_ErrorCallback>
 8015d02:	e003      	b.n	8015d0c <HAL_SPI_IRQHandler+0x38c>
 8015d04:	bf00      	nop
 8015d06:	e002      	b.n	8015d0e <HAL_SPI_IRQHandler+0x38e>
 8015d08:	bf00      	nop
 8015d0a:	e000      	b.n	8015d0e <HAL_SPI_IRQHandler+0x38e>
 8015d0c:	bf00      	nop
 8015d0e:	3728      	adds	r7, #40	@ 0x28
 8015d10:	46bd      	mov	sp, r7
 8015d12:	bd80      	pop	{r7, pc}
 8015d14:	fffffc94 	.word	0xfffffc94
 8015d18:	08015e3d 	.word	0x08015e3d

08015d1c <HAL_SPI_TxCpltCallback>:
 8015d1c:	b480      	push	{r7}
 8015d1e:	b083      	sub	sp, #12
 8015d20:	af00      	add	r7, sp, #0
 8015d22:	6078      	str	r0, [r7, #4]
 8015d24:	bf00      	nop
 8015d26:	370c      	adds	r7, #12
 8015d28:	46bd      	mov	sp, r7
 8015d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d2e:	4770      	bx	lr

08015d30 <HAL_SPI_RxCpltCallback>:
 8015d30:	b480      	push	{r7}
 8015d32:	b083      	sub	sp, #12
 8015d34:	af00      	add	r7, sp, #0
 8015d36:	6078      	str	r0, [r7, #4]
 8015d38:	bf00      	nop
 8015d3a:	370c      	adds	r7, #12
 8015d3c:	46bd      	mov	sp, r7
 8015d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d42:	4770      	bx	lr

08015d44 <HAL_SPI_TxRxCpltCallback>:
 8015d44:	b480      	push	{r7}
 8015d46:	b083      	sub	sp, #12
 8015d48:	af00      	add	r7, sp, #0
 8015d4a:	6078      	str	r0, [r7, #4]
 8015d4c:	bf00      	nop
 8015d4e:	370c      	adds	r7, #12
 8015d50:	46bd      	mov	sp, r7
 8015d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d56:	4770      	bx	lr

08015d58 <HAL_SPI_TxHalfCpltCallback>:
 8015d58:	b480      	push	{r7}
 8015d5a:	b083      	sub	sp, #12
 8015d5c:	af00      	add	r7, sp, #0
 8015d5e:	6078      	str	r0, [r7, #4]
 8015d60:	bf00      	nop
 8015d62:	370c      	adds	r7, #12
 8015d64:	46bd      	mov	sp, r7
 8015d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d6a:	4770      	bx	lr

08015d6c <HAL_SPI_ErrorCallback>:
 8015d6c:	b480      	push	{r7}
 8015d6e:	b083      	sub	sp, #12
 8015d70:	af00      	add	r7, sp, #0
 8015d72:	6078      	str	r0, [r7, #4]
 8015d74:	bf00      	nop
 8015d76:	370c      	adds	r7, #12
 8015d78:	46bd      	mov	sp, r7
 8015d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d7e:	4770      	bx	lr

08015d80 <HAL_SPI_SuspendCallback>:
 8015d80:	b480      	push	{r7}
 8015d82:	b083      	sub	sp, #12
 8015d84:	af00      	add	r7, sp, #0
 8015d86:	6078      	str	r0, [r7, #4]
 8015d88:	bf00      	nop
 8015d8a:	370c      	adds	r7, #12
 8015d8c:	46bd      	mov	sp, r7
 8015d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d92:	4770      	bx	lr

08015d94 <SPI_DMATransmitCplt>:
 8015d94:	b580      	push	{r7, lr}
 8015d96:	b084      	sub	sp, #16
 8015d98:	af00      	add	r7, sp, #0
 8015d9a:	6078      	str	r0, [r7, #4]
 8015d9c:	687b      	ldr	r3, [r7, #4]
 8015d9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015da0:	60fb      	str	r3, [r7, #12]
 8015da2:	68fb      	ldr	r3, [r7, #12]
 8015da4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8015da8:	b2db      	uxtb	r3, r3
 8015daa:	2b07      	cmp	r3, #7
 8015dac:	d011      	beq.n	8015dd2 <SPI_DMATransmitCplt+0x3e>
 8015dae:	68fb      	ldr	r3, [r7, #12]
 8015db0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015db2:	69db      	ldr	r3, [r3, #28]
 8015db4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8015db8:	d103      	bne.n	8015dc2 <SPI_DMATransmitCplt+0x2e>
 8015dba:	68f8      	ldr	r0, [r7, #12]
 8015dbc:	f7ff ffae 	bl	8015d1c <HAL_SPI_TxCpltCallback>
 8015dc0:	e007      	b.n	8015dd2 <SPI_DMATransmitCplt+0x3e>
 8015dc2:	68fb      	ldr	r3, [r7, #12]
 8015dc4:	681b      	ldr	r3, [r3, #0]
 8015dc6:	691a      	ldr	r2, [r3, #16]
 8015dc8:	68fb      	ldr	r3, [r7, #12]
 8015dca:	681b      	ldr	r3, [r3, #0]
 8015dcc:	f042 0208 	orr.w	r2, r2, #8
 8015dd0:	611a      	str	r2, [r3, #16]
 8015dd2:	bf00      	nop
 8015dd4:	3710      	adds	r7, #16
 8015dd6:	46bd      	mov	sp, r7
 8015dd8:	bd80      	pop	{r7, pc}

08015dda <SPI_DMAHalfTransmitCplt>:
 8015dda:	b580      	push	{r7, lr}
 8015ddc:	b084      	sub	sp, #16
 8015dde:	af00      	add	r7, sp, #0
 8015de0:	6078      	str	r0, [r7, #4]
 8015de2:	687b      	ldr	r3, [r7, #4]
 8015de4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015de6:	60fb      	str	r3, [r7, #12]
 8015de8:	68f8      	ldr	r0, [r7, #12]
 8015dea:	f7ff ffb5 	bl	8015d58 <HAL_SPI_TxHalfCpltCallback>
 8015dee:	bf00      	nop
 8015df0:	3710      	adds	r7, #16
 8015df2:	46bd      	mov	sp, r7
 8015df4:	bd80      	pop	{r7, pc}

08015df6 <SPI_DMAError>:
 8015df6:	b580      	push	{r7, lr}
 8015df8:	b084      	sub	sp, #16
 8015dfa:	af00      	add	r7, sp, #0
 8015dfc:	6078      	str	r0, [r7, #4]
 8015dfe:	687b      	ldr	r3, [r7, #4]
 8015e00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015e02:	60fb      	str	r3, [r7, #12]
 8015e04:	6878      	ldr	r0, [r7, #4]
 8015e06:	f7f7 fdcf 	bl	800d9a8 <HAL_DMA_GetError>
 8015e0a:	4603      	mov	r3, r0
 8015e0c:	2b02      	cmp	r3, #2
 8015e0e:	d011      	beq.n	8015e34 <SPI_DMAError+0x3e>
 8015e10:	68f8      	ldr	r0, [r7, #12]
 8015e12:	f000 f82d 	bl	8015e70 <SPI_CloseTransfer>
 8015e16:	68fb      	ldr	r3, [r7, #12]
 8015e18:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015e1c:	f043 0210 	orr.w	r2, r3, #16
 8015e20:	68fb      	ldr	r3, [r7, #12]
 8015e22:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8015e26:	68fb      	ldr	r3, [r7, #12]
 8015e28:	2201      	movs	r2, #1
 8015e2a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
 8015e2e:	68f8      	ldr	r0, [r7, #12]
 8015e30:	f7ff ff9c 	bl	8015d6c <HAL_SPI_ErrorCallback>
 8015e34:	bf00      	nop
 8015e36:	3710      	adds	r7, #16
 8015e38:	46bd      	mov	sp, r7
 8015e3a:	bd80      	pop	{r7, pc}

08015e3c <SPI_DMAAbortOnError>:
 8015e3c:	b580      	push	{r7, lr}
 8015e3e:	b084      	sub	sp, #16
 8015e40:	af00      	add	r7, sp, #0
 8015e42:	6078      	str	r0, [r7, #4]
 8015e44:	687b      	ldr	r3, [r7, #4]
 8015e46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015e48:	60fb      	str	r3, [r7, #12]
 8015e4a:	68fb      	ldr	r3, [r7, #12]
 8015e4c:	2200      	movs	r2, #0
 8015e4e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8015e52:	68fb      	ldr	r3, [r7, #12]
 8015e54:	2200      	movs	r2, #0
 8015e56:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8015e5a:	68fb      	ldr	r3, [r7, #12]
 8015e5c:	2201      	movs	r2, #1
 8015e5e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
 8015e62:	68f8      	ldr	r0, [r7, #12]
 8015e64:	f7ff ff82 	bl	8015d6c <HAL_SPI_ErrorCallback>
 8015e68:	bf00      	nop
 8015e6a:	3710      	adds	r7, #16
 8015e6c:	46bd      	mov	sp, r7
 8015e6e:	bd80      	pop	{r7, pc}

08015e70 <SPI_CloseTransfer>:
 8015e70:	b480      	push	{r7}
 8015e72:	b085      	sub	sp, #20
 8015e74:	af00      	add	r7, sp, #0
 8015e76:	6078      	str	r0, [r7, #4]
 8015e78:	687b      	ldr	r3, [r7, #4]
 8015e7a:	681b      	ldr	r3, [r3, #0]
 8015e7c:	695b      	ldr	r3, [r3, #20]
 8015e7e:	60fb      	str	r3, [r7, #12]
 8015e80:	687b      	ldr	r3, [r7, #4]
 8015e82:	681b      	ldr	r3, [r3, #0]
 8015e84:	699a      	ldr	r2, [r3, #24]
 8015e86:	687b      	ldr	r3, [r7, #4]
 8015e88:	681b      	ldr	r3, [r3, #0]
 8015e8a:	f042 0208 	orr.w	r2, r2, #8
 8015e8e:	619a      	str	r2, [r3, #24]
 8015e90:	687b      	ldr	r3, [r7, #4]
 8015e92:	681b      	ldr	r3, [r3, #0]
 8015e94:	699a      	ldr	r2, [r3, #24]
 8015e96:	687b      	ldr	r3, [r7, #4]
 8015e98:	681b      	ldr	r3, [r3, #0]
 8015e9a:	f042 0210 	orr.w	r2, r2, #16
 8015e9e:	619a      	str	r2, [r3, #24]
 8015ea0:	687b      	ldr	r3, [r7, #4]
 8015ea2:	681b      	ldr	r3, [r3, #0]
 8015ea4:	681a      	ldr	r2, [r3, #0]
 8015ea6:	687b      	ldr	r3, [r7, #4]
 8015ea8:	681b      	ldr	r3, [r3, #0]
 8015eaa:	f022 0201 	bic.w	r2, r2, #1
 8015eae:	601a      	str	r2, [r3, #0]
 8015eb0:	687b      	ldr	r3, [r7, #4]
 8015eb2:	681b      	ldr	r3, [r3, #0]
 8015eb4:	6919      	ldr	r1, [r3, #16]
 8015eb6:	687b      	ldr	r3, [r7, #4]
 8015eb8:	681a      	ldr	r2, [r3, #0]
 8015eba:	4b3c      	ldr	r3, [pc, #240]	@ (8015fac <SPI_CloseTransfer+0x13c>)
 8015ebc:	400b      	ands	r3, r1
 8015ebe:	6113      	str	r3, [r2, #16]
 8015ec0:	687b      	ldr	r3, [r7, #4]
 8015ec2:	681b      	ldr	r3, [r3, #0]
 8015ec4:	689a      	ldr	r2, [r3, #8]
 8015ec6:	687b      	ldr	r3, [r7, #4]
 8015ec8:	681b      	ldr	r3, [r3, #0]
 8015eca:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8015ece:	609a      	str	r2, [r3, #8]
 8015ed0:	687b      	ldr	r3, [r7, #4]
 8015ed2:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8015ed6:	b2db      	uxtb	r3, r3
 8015ed8:	2b04      	cmp	r3, #4
 8015eda:	d014      	beq.n	8015f06 <SPI_CloseTransfer+0x96>
 8015edc:	68fb      	ldr	r3, [r7, #12]
 8015ede:	f003 0320 	and.w	r3, r3, #32
 8015ee2:	2b00      	cmp	r3, #0
 8015ee4:	d00f      	beq.n	8015f06 <SPI_CloseTransfer+0x96>
 8015ee6:	687b      	ldr	r3, [r7, #4]
 8015ee8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015eec:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8015ef0:	687b      	ldr	r3, [r7, #4]
 8015ef2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8015ef6:	687b      	ldr	r3, [r7, #4]
 8015ef8:	681b      	ldr	r3, [r3, #0]
 8015efa:	699a      	ldr	r2, [r3, #24]
 8015efc:	687b      	ldr	r3, [r7, #4]
 8015efe:	681b      	ldr	r3, [r3, #0]
 8015f00:	f042 0220 	orr.w	r2, r2, #32
 8015f04:	619a      	str	r2, [r3, #24]
 8015f06:	687b      	ldr	r3, [r7, #4]
 8015f08:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8015f0c:	b2db      	uxtb	r3, r3
 8015f0e:	2b03      	cmp	r3, #3
 8015f10:	d014      	beq.n	8015f3c <SPI_CloseTransfer+0xcc>
 8015f12:	68fb      	ldr	r3, [r7, #12]
 8015f14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8015f18:	2b00      	cmp	r3, #0
 8015f1a:	d00f      	beq.n	8015f3c <SPI_CloseTransfer+0xcc>
 8015f1c:	687b      	ldr	r3, [r7, #4]
 8015f1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015f22:	f043 0204 	orr.w	r2, r3, #4
 8015f26:	687b      	ldr	r3, [r7, #4]
 8015f28:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8015f2c:	687b      	ldr	r3, [r7, #4]
 8015f2e:	681b      	ldr	r3, [r3, #0]
 8015f30:	699a      	ldr	r2, [r3, #24]
 8015f32:	687b      	ldr	r3, [r7, #4]
 8015f34:	681b      	ldr	r3, [r3, #0]
 8015f36:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8015f3a:	619a      	str	r2, [r3, #24]
 8015f3c:	68fb      	ldr	r3, [r7, #12]
 8015f3e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8015f42:	2b00      	cmp	r3, #0
 8015f44:	d00f      	beq.n	8015f66 <SPI_CloseTransfer+0xf6>
 8015f46:	687b      	ldr	r3, [r7, #4]
 8015f48:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015f4c:	f043 0201 	orr.w	r2, r3, #1
 8015f50:	687b      	ldr	r3, [r7, #4]
 8015f52:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8015f56:	687b      	ldr	r3, [r7, #4]
 8015f58:	681b      	ldr	r3, [r3, #0]
 8015f5a:	699a      	ldr	r2, [r3, #24]
 8015f5c:	687b      	ldr	r3, [r7, #4]
 8015f5e:	681b      	ldr	r3, [r3, #0]
 8015f60:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8015f64:	619a      	str	r2, [r3, #24]
 8015f66:	68fb      	ldr	r3, [r7, #12]
 8015f68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8015f6c:	2b00      	cmp	r3, #0
 8015f6e:	d00f      	beq.n	8015f90 <SPI_CloseTransfer+0x120>
 8015f70:	687b      	ldr	r3, [r7, #4]
 8015f72:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015f76:	f043 0208 	orr.w	r2, r3, #8
 8015f7a:	687b      	ldr	r3, [r7, #4]
 8015f7c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8015f80:	687b      	ldr	r3, [r7, #4]
 8015f82:	681b      	ldr	r3, [r3, #0]
 8015f84:	699a      	ldr	r2, [r3, #24]
 8015f86:	687b      	ldr	r3, [r7, #4]
 8015f88:	681b      	ldr	r3, [r3, #0]
 8015f8a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8015f8e:	619a      	str	r2, [r3, #24]
 8015f90:	687b      	ldr	r3, [r7, #4]
 8015f92:	2200      	movs	r2, #0
 8015f94:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8015f98:	687b      	ldr	r3, [r7, #4]
 8015f9a:	2200      	movs	r2, #0
 8015f9c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8015fa0:	bf00      	nop
 8015fa2:	3714      	adds	r7, #20
 8015fa4:	46bd      	mov	sp, r7
 8015fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015faa:	4770      	bx	lr
 8015fac:	fffffc90 	.word	0xfffffc90

08015fb0 <SPI_WaitOnFlagUntilTimeout>:
 8015fb0:	b580      	push	{r7, lr}
 8015fb2:	b084      	sub	sp, #16
 8015fb4:	af00      	add	r7, sp, #0
 8015fb6:	60f8      	str	r0, [r7, #12]
 8015fb8:	60b9      	str	r1, [r7, #8]
 8015fba:	603b      	str	r3, [r7, #0]
 8015fbc:	4613      	mov	r3, r2
 8015fbe:	71fb      	strb	r3, [r7, #7]
 8015fc0:	e010      	b.n	8015fe4 <SPI_WaitOnFlagUntilTimeout+0x34>
 8015fc2:	f7f3 f93b 	bl	800923c <HAL_GetTick>
 8015fc6:	4602      	mov	r2, r0
 8015fc8:	69bb      	ldr	r3, [r7, #24]
 8015fca:	1ad3      	subs	r3, r2, r3
 8015fcc:	683a      	ldr	r2, [r7, #0]
 8015fce:	429a      	cmp	r2, r3
 8015fd0:	d803      	bhi.n	8015fda <SPI_WaitOnFlagUntilTimeout+0x2a>
 8015fd2:	683b      	ldr	r3, [r7, #0]
 8015fd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015fd8:	d102      	bne.n	8015fe0 <SPI_WaitOnFlagUntilTimeout+0x30>
 8015fda:	683b      	ldr	r3, [r7, #0]
 8015fdc:	2b00      	cmp	r3, #0
 8015fde:	d101      	bne.n	8015fe4 <SPI_WaitOnFlagUntilTimeout+0x34>
 8015fe0:	2303      	movs	r3, #3
 8015fe2:	e00f      	b.n	8016004 <SPI_WaitOnFlagUntilTimeout+0x54>
 8015fe4:	68fb      	ldr	r3, [r7, #12]
 8015fe6:	681b      	ldr	r3, [r3, #0]
 8015fe8:	695a      	ldr	r2, [r3, #20]
 8015fea:	68bb      	ldr	r3, [r7, #8]
 8015fec:	4013      	ands	r3, r2
 8015fee:	68ba      	ldr	r2, [r7, #8]
 8015ff0:	429a      	cmp	r2, r3
 8015ff2:	bf0c      	ite	eq
 8015ff4:	2301      	moveq	r3, #1
 8015ff6:	2300      	movne	r3, #0
 8015ff8:	b2db      	uxtb	r3, r3
 8015ffa:	461a      	mov	r2, r3
 8015ffc:	79fb      	ldrb	r3, [r7, #7]
 8015ffe:	429a      	cmp	r2, r3
 8016000:	d0df      	beq.n	8015fc2 <SPI_WaitOnFlagUntilTimeout+0x12>
 8016002:	2300      	movs	r3, #0
 8016004:	4618      	mov	r0, r3
 8016006:	3710      	adds	r7, #16
 8016008:	46bd      	mov	sp, r7
 801600a:	bd80      	pop	{r7, pc}

0801600c <SPI_GetPacketSize>:
 801600c:	b480      	push	{r7}
 801600e:	b085      	sub	sp, #20
 8016010:	af00      	add	r7, sp, #0
 8016012:	6078      	str	r0, [r7, #4]
 8016014:	687b      	ldr	r3, [r7, #4]
 8016016:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8016018:	095b      	lsrs	r3, r3, #5
 801601a:	3301      	adds	r3, #1
 801601c:	60fb      	str	r3, [r7, #12]
 801601e:	687b      	ldr	r3, [r7, #4]
 8016020:	68db      	ldr	r3, [r3, #12]
 8016022:	3301      	adds	r3, #1
 8016024:	60bb      	str	r3, [r7, #8]
 8016026:	68bb      	ldr	r3, [r7, #8]
 8016028:	3307      	adds	r3, #7
 801602a:	08db      	lsrs	r3, r3, #3
 801602c:	60bb      	str	r3, [r7, #8]
 801602e:	68bb      	ldr	r3, [r7, #8]
 8016030:	68fa      	ldr	r2, [r7, #12]
 8016032:	fb02 f303 	mul.w	r3, r2, r3
 8016036:	4618      	mov	r0, r3
 8016038:	3714      	adds	r7, #20
 801603a:	46bd      	mov	sp, r7
 801603c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016040:	4770      	bx	lr

08016042 <HAL_TIM_Base_Init>:
 8016042:	b580      	push	{r7, lr}
 8016044:	b082      	sub	sp, #8
 8016046:	af00      	add	r7, sp, #0
 8016048:	6078      	str	r0, [r7, #4]
 801604a:	687b      	ldr	r3, [r7, #4]
 801604c:	2b00      	cmp	r3, #0
 801604e:	d101      	bne.n	8016054 <HAL_TIM_Base_Init+0x12>
 8016050:	2301      	movs	r3, #1
 8016052:	e049      	b.n	80160e8 <HAL_TIM_Base_Init+0xa6>
 8016054:	687b      	ldr	r3, [r7, #4]
 8016056:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 801605a:	b2db      	uxtb	r3, r3
 801605c:	2b00      	cmp	r3, #0
 801605e:	d106      	bne.n	801606e <HAL_TIM_Base_Init+0x2c>
 8016060:	687b      	ldr	r3, [r7, #4]
 8016062:	2200      	movs	r2, #0
 8016064:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8016068:	6878      	ldr	r0, [r7, #4]
 801606a:	f7f2 fef1 	bl	8008e50 <HAL_TIM_Base_MspInit>
 801606e:	687b      	ldr	r3, [r7, #4]
 8016070:	2202      	movs	r2, #2
 8016072:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8016076:	687b      	ldr	r3, [r7, #4]
 8016078:	681a      	ldr	r2, [r3, #0]
 801607a:	687b      	ldr	r3, [r7, #4]
 801607c:	3304      	adds	r3, #4
 801607e:	4619      	mov	r1, r3
 8016080:	4610      	mov	r0, r2
 8016082:	f000 fedb 	bl	8016e3c <TIM_Base_SetConfig>
 8016086:	687b      	ldr	r3, [r7, #4]
 8016088:	2201      	movs	r2, #1
 801608a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
 801608e:	687b      	ldr	r3, [r7, #4]
 8016090:	2201      	movs	r2, #1
 8016092:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8016096:	687b      	ldr	r3, [r7, #4]
 8016098:	2201      	movs	r2, #1
 801609a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 801609e:	687b      	ldr	r3, [r7, #4]
 80160a0:	2201      	movs	r2, #1
 80160a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80160a6:	687b      	ldr	r3, [r7, #4]
 80160a8:	2201      	movs	r2, #1
 80160aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80160ae:	687b      	ldr	r3, [r7, #4]
 80160b0:	2201      	movs	r2, #1
 80160b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80160b6:	687b      	ldr	r3, [r7, #4]
 80160b8:	2201      	movs	r2, #1
 80160ba:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80160be:	687b      	ldr	r3, [r7, #4]
 80160c0:	2201      	movs	r2, #1
 80160c2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80160c6:	687b      	ldr	r3, [r7, #4]
 80160c8:	2201      	movs	r2, #1
 80160ca:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80160ce:	687b      	ldr	r3, [r7, #4]
 80160d0:	2201      	movs	r2, #1
 80160d2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80160d6:	687b      	ldr	r3, [r7, #4]
 80160d8:	2201      	movs	r2, #1
 80160da:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
 80160de:	687b      	ldr	r3, [r7, #4]
 80160e0:	2201      	movs	r2, #1
 80160e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80160e6:	2300      	movs	r3, #0
 80160e8:	4618      	mov	r0, r3
 80160ea:	3708      	adds	r7, #8
 80160ec:	46bd      	mov	sp, r7
 80160ee:	bd80      	pop	{r7, pc}

080160f0 <HAL_TIM_Base_Start>:
 80160f0:	b480      	push	{r7}
 80160f2:	b085      	sub	sp, #20
 80160f4:	af00      	add	r7, sp, #0
 80160f6:	6078      	str	r0, [r7, #4]
 80160f8:	687b      	ldr	r3, [r7, #4]
 80160fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80160fe:	b2db      	uxtb	r3, r3
 8016100:	2b01      	cmp	r3, #1
 8016102:	d001      	beq.n	8016108 <HAL_TIM_Base_Start+0x18>
 8016104:	2301      	movs	r3, #1
 8016106:	e056      	b.n	80161b6 <HAL_TIM_Base_Start+0xc6>
 8016108:	687b      	ldr	r3, [r7, #4]
 801610a:	2202      	movs	r2, #2
 801610c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8016110:	687b      	ldr	r3, [r7, #4]
 8016112:	681b      	ldr	r3, [r3, #0]
 8016114:	4a2b      	ldr	r2, [pc, #172]	@ (80161c4 <HAL_TIM_Base_Start+0xd4>)
 8016116:	4293      	cmp	r3, r2
 8016118:	d02c      	beq.n	8016174 <HAL_TIM_Base_Start+0x84>
 801611a:	687b      	ldr	r3, [r7, #4]
 801611c:	681b      	ldr	r3, [r3, #0]
 801611e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8016122:	d027      	beq.n	8016174 <HAL_TIM_Base_Start+0x84>
 8016124:	687b      	ldr	r3, [r7, #4]
 8016126:	681b      	ldr	r3, [r3, #0]
 8016128:	4a27      	ldr	r2, [pc, #156]	@ (80161c8 <HAL_TIM_Base_Start+0xd8>)
 801612a:	4293      	cmp	r3, r2
 801612c:	d022      	beq.n	8016174 <HAL_TIM_Base_Start+0x84>
 801612e:	687b      	ldr	r3, [r7, #4]
 8016130:	681b      	ldr	r3, [r3, #0]
 8016132:	4a26      	ldr	r2, [pc, #152]	@ (80161cc <HAL_TIM_Base_Start+0xdc>)
 8016134:	4293      	cmp	r3, r2
 8016136:	d01d      	beq.n	8016174 <HAL_TIM_Base_Start+0x84>
 8016138:	687b      	ldr	r3, [r7, #4]
 801613a:	681b      	ldr	r3, [r3, #0]
 801613c:	4a24      	ldr	r2, [pc, #144]	@ (80161d0 <HAL_TIM_Base_Start+0xe0>)
 801613e:	4293      	cmp	r3, r2
 8016140:	d018      	beq.n	8016174 <HAL_TIM_Base_Start+0x84>
 8016142:	687b      	ldr	r3, [r7, #4]
 8016144:	681b      	ldr	r3, [r3, #0]
 8016146:	4a23      	ldr	r2, [pc, #140]	@ (80161d4 <HAL_TIM_Base_Start+0xe4>)
 8016148:	4293      	cmp	r3, r2
 801614a:	d013      	beq.n	8016174 <HAL_TIM_Base_Start+0x84>
 801614c:	687b      	ldr	r3, [r7, #4]
 801614e:	681b      	ldr	r3, [r3, #0]
 8016150:	4a21      	ldr	r2, [pc, #132]	@ (80161d8 <HAL_TIM_Base_Start+0xe8>)
 8016152:	4293      	cmp	r3, r2
 8016154:	d00e      	beq.n	8016174 <HAL_TIM_Base_Start+0x84>
 8016156:	687b      	ldr	r3, [r7, #4]
 8016158:	681b      	ldr	r3, [r3, #0]
 801615a:	4a20      	ldr	r2, [pc, #128]	@ (80161dc <HAL_TIM_Base_Start+0xec>)
 801615c:	4293      	cmp	r3, r2
 801615e:	d009      	beq.n	8016174 <HAL_TIM_Base_Start+0x84>
 8016160:	687b      	ldr	r3, [r7, #4]
 8016162:	681b      	ldr	r3, [r3, #0]
 8016164:	4a1e      	ldr	r2, [pc, #120]	@ (80161e0 <HAL_TIM_Base_Start+0xf0>)
 8016166:	4293      	cmp	r3, r2
 8016168:	d004      	beq.n	8016174 <HAL_TIM_Base_Start+0x84>
 801616a:	687b      	ldr	r3, [r7, #4]
 801616c:	681b      	ldr	r3, [r3, #0]
 801616e:	4a1d      	ldr	r2, [pc, #116]	@ (80161e4 <HAL_TIM_Base_Start+0xf4>)
 8016170:	4293      	cmp	r3, r2
 8016172:	d115      	bne.n	80161a0 <HAL_TIM_Base_Start+0xb0>
 8016174:	687b      	ldr	r3, [r7, #4]
 8016176:	681b      	ldr	r3, [r3, #0]
 8016178:	689a      	ldr	r2, [r3, #8]
 801617a:	4b1b      	ldr	r3, [pc, #108]	@ (80161e8 <HAL_TIM_Base_Start+0xf8>)
 801617c:	4013      	ands	r3, r2
 801617e:	60fb      	str	r3, [r7, #12]
 8016180:	68fb      	ldr	r3, [r7, #12]
 8016182:	2b06      	cmp	r3, #6
 8016184:	d015      	beq.n	80161b2 <HAL_TIM_Base_Start+0xc2>
 8016186:	68fb      	ldr	r3, [r7, #12]
 8016188:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801618c:	d011      	beq.n	80161b2 <HAL_TIM_Base_Start+0xc2>
 801618e:	687b      	ldr	r3, [r7, #4]
 8016190:	681b      	ldr	r3, [r3, #0]
 8016192:	681a      	ldr	r2, [r3, #0]
 8016194:	687b      	ldr	r3, [r7, #4]
 8016196:	681b      	ldr	r3, [r3, #0]
 8016198:	f042 0201 	orr.w	r2, r2, #1
 801619c:	601a      	str	r2, [r3, #0]
 801619e:	e008      	b.n	80161b2 <HAL_TIM_Base_Start+0xc2>
 80161a0:	687b      	ldr	r3, [r7, #4]
 80161a2:	681b      	ldr	r3, [r3, #0]
 80161a4:	681a      	ldr	r2, [r3, #0]
 80161a6:	687b      	ldr	r3, [r7, #4]
 80161a8:	681b      	ldr	r3, [r3, #0]
 80161aa:	f042 0201 	orr.w	r2, r2, #1
 80161ae:	601a      	str	r2, [r3, #0]
 80161b0:	e000      	b.n	80161b4 <HAL_TIM_Base_Start+0xc4>
 80161b2:	bf00      	nop
 80161b4:	2300      	movs	r3, #0
 80161b6:	4618      	mov	r0, r3
 80161b8:	3714      	adds	r7, #20
 80161ba:	46bd      	mov	sp, r7
 80161bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161c0:	4770      	bx	lr
 80161c2:	bf00      	nop
 80161c4:	40010000 	.word	0x40010000
 80161c8:	40000400 	.word	0x40000400
 80161cc:	40000800 	.word	0x40000800
 80161d0:	40000c00 	.word	0x40000c00
 80161d4:	40010400 	.word	0x40010400
 80161d8:	40001800 	.word	0x40001800
 80161dc:	40014000 	.word	0x40014000
 80161e0:	4000e000 	.word	0x4000e000
 80161e4:	4000e400 	.word	0x4000e400
 80161e8:	00010007 	.word	0x00010007

080161ec <HAL_TIM_Base_Start_IT>:
 80161ec:	b480      	push	{r7}
 80161ee:	b085      	sub	sp, #20
 80161f0:	af00      	add	r7, sp, #0
 80161f2:	6078      	str	r0, [r7, #4]
 80161f4:	687b      	ldr	r3, [r7, #4]
 80161f6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80161fa:	b2db      	uxtb	r3, r3
 80161fc:	2b01      	cmp	r3, #1
 80161fe:	d001      	beq.n	8016204 <HAL_TIM_Base_Start_IT+0x18>
 8016200:	2301      	movs	r3, #1
 8016202:	e05e      	b.n	80162c2 <HAL_TIM_Base_Start_IT+0xd6>
 8016204:	687b      	ldr	r3, [r7, #4]
 8016206:	2202      	movs	r2, #2
 8016208:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 801620c:	687b      	ldr	r3, [r7, #4]
 801620e:	681b      	ldr	r3, [r3, #0]
 8016210:	68da      	ldr	r2, [r3, #12]
 8016212:	687b      	ldr	r3, [r7, #4]
 8016214:	681b      	ldr	r3, [r3, #0]
 8016216:	f042 0201 	orr.w	r2, r2, #1
 801621a:	60da      	str	r2, [r3, #12]
 801621c:	687b      	ldr	r3, [r7, #4]
 801621e:	681b      	ldr	r3, [r3, #0]
 8016220:	4a2b      	ldr	r2, [pc, #172]	@ (80162d0 <HAL_TIM_Base_Start_IT+0xe4>)
 8016222:	4293      	cmp	r3, r2
 8016224:	d02c      	beq.n	8016280 <HAL_TIM_Base_Start_IT+0x94>
 8016226:	687b      	ldr	r3, [r7, #4]
 8016228:	681b      	ldr	r3, [r3, #0]
 801622a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801622e:	d027      	beq.n	8016280 <HAL_TIM_Base_Start_IT+0x94>
 8016230:	687b      	ldr	r3, [r7, #4]
 8016232:	681b      	ldr	r3, [r3, #0]
 8016234:	4a27      	ldr	r2, [pc, #156]	@ (80162d4 <HAL_TIM_Base_Start_IT+0xe8>)
 8016236:	4293      	cmp	r3, r2
 8016238:	d022      	beq.n	8016280 <HAL_TIM_Base_Start_IT+0x94>
 801623a:	687b      	ldr	r3, [r7, #4]
 801623c:	681b      	ldr	r3, [r3, #0]
 801623e:	4a26      	ldr	r2, [pc, #152]	@ (80162d8 <HAL_TIM_Base_Start_IT+0xec>)
 8016240:	4293      	cmp	r3, r2
 8016242:	d01d      	beq.n	8016280 <HAL_TIM_Base_Start_IT+0x94>
 8016244:	687b      	ldr	r3, [r7, #4]
 8016246:	681b      	ldr	r3, [r3, #0]
 8016248:	4a24      	ldr	r2, [pc, #144]	@ (80162dc <HAL_TIM_Base_Start_IT+0xf0>)
 801624a:	4293      	cmp	r3, r2
 801624c:	d018      	beq.n	8016280 <HAL_TIM_Base_Start_IT+0x94>
 801624e:	687b      	ldr	r3, [r7, #4]
 8016250:	681b      	ldr	r3, [r3, #0]
 8016252:	4a23      	ldr	r2, [pc, #140]	@ (80162e0 <HAL_TIM_Base_Start_IT+0xf4>)
 8016254:	4293      	cmp	r3, r2
 8016256:	d013      	beq.n	8016280 <HAL_TIM_Base_Start_IT+0x94>
 8016258:	687b      	ldr	r3, [r7, #4]
 801625a:	681b      	ldr	r3, [r3, #0]
 801625c:	4a21      	ldr	r2, [pc, #132]	@ (80162e4 <HAL_TIM_Base_Start_IT+0xf8>)
 801625e:	4293      	cmp	r3, r2
 8016260:	d00e      	beq.n	8016280 <HAL_TIM_Base_Start_IT+0x94>
 8016262:	687b      	ldr	r3, [r7, #4]
 8016264:	681b      	ldr	r3, [r3, #0]
 8016266:	4a20      	ldr	r2, [pc, #128]	@ (80162e8 <HAL_TIM_Base_Start_IT+0xfc>)
 8016268:	4293      	cmp	r3, r2
 801626a:	d009      	beq.n	8016280 <HAL_TIM_Base_Start_IT+0x94>
 801626c:	687b      	ldr	r3, [r7, #4]
 801626e:	681b      	ldr	r3, [r3, #0]
 8016270:	4a1e      	ldr	r2, [pc, #120]	@ (80162ec <HAL_TIM_Base_Start_IT+0x100>)
 8016272:	4293      	cmp	r3, r2
 8016274:	d004      	beq.n	8016280 <HAL_TIM_Base_Start_IT+0x94>
 8016276:	687b      	ldr	r3, [r7, #4]
 8016278:	681b      	ldr	r3, [r3, #0]
 801627a:	4a1d      	ldr	r2, [pc, #116]	@ (80162f0 <HAL_TIM_Base_Start_IT+0x104>)
 801627c:	4293      	cmp	r3, r2
 801627e:	d115      	bne.n	80162ac <HAL_TIM_Base_Start_IT+0xc0>
 8016280:	687b      	ldr	r3, [r7, #4]
 8016282:	681b      	ldr	r3, [r3, #0]
 8016284:	689a      	ldr	r2, [r3, #8]
 8016286:	4b1b      	ldr	r3, [pc, #108]	@ (80162f4 <HAL_TIM_Base_Start_IT+0x108>)
 8016288:	4013      	ands	r3, r2
 801628a:	60fb      	str	r3, [r7, #12]
 801628c:	68fb      	ldr	r3, [r7, #12]
 801628e:	2b06      	cmp	r3, #6
 8016290:	d015      	beq.n	80162be <HAL_TIM_Base_Start_IT+0xd2>
 8016292:	68fb      	ldr	r3, [r7, #12]
 8016294:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8016298:	d011      	beq.n	80162be <HAL_TIM_Base_Start_IT+0xd2>
 801629a:	687b      	ldr	r3, [r7, #4]
 801629c:	681b      	ldr	r3, [r3, #0]
 801629e:	681a      	ldr	r2, [r3, #0]
 80162a0:	687b      	ldr	r3, [r7, #4]
 80162a2:	681b      	ldr	r3, [r3, #0]
 80162a4:	f042 0201 	orr.w	r2, r2, #1
 80162a8:	601a      	str	r2, [r3, #0]
 80162aa:	e008      	b.n	80162be <HAL_TIM_Base_Start_IT+0xd2>
 80162ac:	687b      	ldr	r3, [r7, #4]
 80162ae:	681b      	ldr	r3, [r3, #0]
 80162b0:	681a      	ldr	r2, [r3, #0]
 80162b2:	687b      	ldr	r3, [r7, #4]
 80162b4:	681b      	ldr	r3, [r3, #0]
 80162b6:	f042 0201 	orr.w	r2, r2, #1
 80162ba:	601a      	str	r2, [r3, #0]
 80162bc:	e000      	b.n	80162c0 <HAL_TIM_Base_Start_IT+0xd4>
 80162be:	bf00      	nop
 80162c0:	2300      	movs	r3, #0
 80162c2:	4618      	mov	r0, r3
 80162c4:	3714      	adds	r7, #20
 80162c6:	46bd      	mov	sp, r7
 80162c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162cc:	4770      	bx	lr
 80162ce:	bf00      	nop
 80162d0:	40010000 	.word	0x40010000
 80162d4:	40000400 	.word	0x40000400
 80162d8:	40000800 	.word	0x40000800
 80162dc:	40000c00 	.word	0x40000c00
 80162e0:	40010400 	.word	0x40010400
 80162e4:	40001800 	.word	0x40001800
 80162e8:	40014000 	.word	0x40014000
 80162ec:	4000e000 	.word	0x4000e000
 80162f0:	4000e400 	.word	0x4000e400
 80162f4:	00010007 	.word	0x00010007

080162f8 <HAL_TIM_PWM_Init>:
 80162f8:	b580      	push	{r7, lr}
 80162fa:	b082      	sub	sp, #8
 80162fc:	af00      	add	r7, sp, #0
 80162fe:	6078      	str	r0, [r7, #4]
 8016300:	687b      	ldr	r3, [r7, #4]
 8016302:	2b00      	cmp	r3, #0
 8016304:	d101      	bne.n	801630a <HAL_TIM_PWM_Init+0x12>
 8016306:	2301      	movs	r3, #1
 8016308:	e049      	b.n	801639e <HAL_TIM_PWM_Init+0xa6>
 801630a:	687b      	ldr	r3, [r7, #4]
 801630c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8016310:	b2db      	uxtb	r3, r3
 8016312:	2b00      	cmp	r3, #0
 8016314:	d106      	bne.n	8016324 <HAL_TIM_PWM_Init+0x2c>
 8016316:	687b      	ldr	r3, [r7, #4]
 8016318:	2200      	movs	r2, #0
 801631a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 801631e:	6878      	ldr	r0, [r7, #4]
 8016320:	f7f2 fd0c 	bl	8008d3c <HAL_TIM_PWM_MspInit>
 8016324:	687b      	ldr	r3, [r7, #4]
 8016326:	2202      	movs	r2, #2
 8016328:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 801632c:	687b      	ldr	r3, [r7, #4]
 801632e:	681a      	ldr	r2, [r3, #0]
 8016330:	687b      	ldr	r3, [r7, #4]
 8016332:	3304      	adds	r3, #4
 8016334:	4619      	mov	r1, r3
 8016336:	4610      	mov	r0, r2
 8016338:	f000 fd80 	bl	8016e3c <TIM_Base_SetConfig>
 801633c:	687b      	ldr	r3, [r7, #4]
 801633e:	2201      	movs	r2, #1
 8016340:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
 8016344:	687b      	ldr	r3, [r7, #4]
 8016346:	2201      	movs	r2, #1
 8016348:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 801634c:	687b      	ldr	r3, [r7, #4]
 801634e:	2201      	movs	r2, #1
 8016350:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8016354:	687b      	ldr	r3, [r7, #4]
 8016356:	2201      	movs	r2, #1
 8016358:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 801635c:	687b      	ldr	r3, [r7, #4]
 801635e:	2201      	movs	r2, #1
 8016360:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8016364:	687b      	ldr	r3, [r7, #4]
 8016366:	2201      	movs	r2, #1
 8016368:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 801636c:	687b      	ldr	r3, [r7, #4]
 801636e:	2201      	movs	r2, #1
 8016370:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8016374:	687b      	ldr	r3, [r7, #4]
 8016376:	2201      	movs	r2, #1
 8016378:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801637c:	687b      	ldr	r3, [r7, #4]
 801637e:	2201      	movs	r2, #1
 8016380:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8016384:	687b      	ldr	r3, [r7, #4]
 8016386:	2201      	movs	r2, #1
 8016388:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 801638c:	687b      	ldr	r3, [r7, #4]
 801638e:	2201      	movs	r2, #1
 8016390:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
 8016394:	687b      	ldr	r3, [r7, #4]
 8016396:	2201      	movs	r2, #1
 8016398:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 801639c:	2300      	movs	r3, #0
 801639e:	4618      	mov	r0, r3
 80163a0:	3708      	adds	r7, #8
 80163a2:	46bd      	mov	sp, r7
 80163a4:	bd80      	pop	{r7, pc}
	...

080163a8 <HAL_TIM_PWM_Start>:
 80163a8:	b580      	push	{r7, lr}
 80163aa:	b084      	sub	sp, #16
 80163ac:	af00      	add	r7, sp, #0
 80163ae:	6078      	str	r0, [r7, #4]
 80163b0:	6039      	str	r1, [r7, #0]
 80163b2:	683b      	ldr	r3, [r7, #0]
 80163b4:	2b00      	cmp	r3, #0
 80163b6:	d109      	bne.n	80163cc <HAL_TIM_PWM_Start+0x24>
 80163b8:	687b      	ldr	r3, [r7, #4]
 80163ba:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80163be:	b2db      	uxtb	r3, r3
 80163c0:	2b01      	cmp	r3, #1
 80163c2:	bf14      	ite	ne
 80163c4:	2301      	movne	r3, #1
 80163c6:	2300      	moveq	r3, #0
 80163c8:	b2db      	uxtb	r3, r3
 80163ca:	e03c      	b.n	8016446 <HAL_TIM_PWM_Start+0x9e>
 80163cc:	683b      	ldr	r3, [r7, #0]
 80163ce:	2b04      	cmp	r3, #4
 80163d0:	d109      	bne.n	80163e6 <HAL_TIM_PWM_Start+0x3e>
 80163d2:	687b      	ldr	r3, [r7, #4]
 80163d4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80163d8:	b2db      	uxtb	r3, r3
 80163da:	2b01      	cmp	r3, #1
 80163dc:	bf14      	ite	ne
 80163de:	2301      	movne	r3, #1
 80163e0:	2300      	moveq	r3, #0
 80163e2:	b2db      	uxtb	r3, r3
 80163e4:	e02f      	b.n	8016446 <HAL_TIM_PWM_Start+0x9e>
 80163e6:	683b      	ldr	r3, [r7, #0]
 80163e8:	2b08      	cmp	r3, #8
 80163ea:	d109      	bne.n	8016400 <HAL_TIM_PWM_Start+0x58>
 80163ec:	687b      	ldr	r3, [r7, #4]
 80163ee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80163f2:	b2db      	uxtb	r3, r3
 80163f4:	2b01      	cmp	r3, #1
 80163f6:	bf14      	ite	ne
 80163f8:	2301      	movne	r3, #1
 80163fa:	2300      	moveq	r3, #0
 80163fc:	b2db      	uxtb	r3, r3
 80163fe:	e022      	b.n	8016446 <HAL_TIM_PWM_Start+0x9e>
 8016400:	683b      	ldr	r3, [r7, #0]
 8016402:	2b0c      	cmp	r3, #12
 8016404:	d109      	bne.n	801641a <HAL_TIM_PWM_Start+0x72>
 8016406:	687b      	ldr	r3, [r7, #4]
 8016408:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 801640c:	b2db      	uxtb	r3, r3
 801640e:	2b01      	cmp	r3, #1
 8016410:	bf14      	ite	ne
 8016412:	2301      	movne	r3, #1
 8016414:	2300      	moveq	r3, #0
 8016416:	b2db      	uxtb	r3, r3
 8016418:	e015      	b.n	8016446 <HAL_TIM_PWM_Start+0x9e>
 801641a:	683b      	ldr	r3, [r7, #0]
 801641c:	2b10      	cmp	r3, #16
 801641e:	d109      	bne.n	8016434 <HAL_TIM_PWM_Start+0x8c>
 8016420:	687b      	ldr	r3, [r7, #4]
 8016422:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8016426:	b2db      	uxtb	r3, r3
 8016428:	2b01      	cmp	r3, #1
 801642a:	bf14      	ite	ne
 801642c:	2301      	movne	r3, #1
 801642e:	2300      	moveq	r3, #0
 8016430:	b2db      	uxtb	r3, r3
 8016432:	e008      	b.n	8016446 <HAL_TIM_PWM_Start+0x9e>
 8016434:	687b      	ldr	r3, [r7, #4]
 8016436:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 801643a:	b2db      	uxtb	r3, r3
 801643c:	2b01      	cmp	r3, #1
 801643e:	bf14      	ite	ne
 8016440:	2301      	movne	r3, #1
 8016442:	2300      	moveq	r3, #0
 8016444:	b2db      	uxtb	r3, r3
 8016446:	2b00      	cmp	r3, #0
 8016448:	d001      	beq.n	801644e <HAL_TIM_PWM_Start+0xa6>
 801644a:	2301      	movs	r3, #1
 801644c:	e0ab      	b.n	80165a6 <HAL_TIM_PWM_Start+0x1fe>
 801644e:	683b      	ldr	r3, [r7, #0]
 8016450:	2b00      	cmp	r3, #0
 8016452:	d104      	bne.n	801645e <HAL_TIM_PWM_Start+0xb6>
 8016454:	687b      	ldr	r3, [r7, #4]
 8016456:	2202      	movs	r2, #2
 8016458:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 801645c:	e023      	b.n	80164a6 <HAL_TIM_PWM_Start+0xfe>
 801645e:	683b      	ldr	r3, [r7, #0]
 8016460:	2b04      	cmp	r3, #4
 8016462:	d104      	bne.n	801646e <HAL_TIM_PWM_Start+0xc6>
 8016464:	687b      	ldr	r3, [r7, #4]
 8016466:	2202      	movs	r2, #2
 8016468:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 801646c:	e01b      	b.n	80164a6 <HAL_TIM_PWM_Start+0xfe>
 801646e:	683b      	ldr	r3, [r7, #0]
 8016470:	2b08      	cmp	r3, #8
 8016472:	d104      	bne.n	801647e <HAL_TIM_PWM_Start+0xd6>
 8016474:	687b      	ldr	r3, [r7, #4]
 8016476:	2202      	movs	r2, #2
 8016478:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 801647c:	e013      	b.n	80164a6 <HAL_TIM_PWM_Start+0xfe>
 801647e:	683b      	ldr	r3, [r7, #0]
 8016480:	2b0c      	cmp	r3, #12
 8016482:	d104      	bne.n	801648e <HAL_TIM_PWM_Start+0xe6>
 8016484:	687b      	ldr	r3, [r7, #4]
 8016486:	2202      	movs	r2, #2
 8016488:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 801648c:	e00b      	b.n	80164a6 <HAL_TIM_PWM_Start+0xfe>
 801648e:	683b      	ldr	r3, [r7, #0]
 8016490:	2b10      	cmp	r3, #16
 8016492:	d104      	bne.n	801649e <HAL_TIM_PWM_Start+0xf6>
 8016494:	687b      	ldr	r3, [r7, #4]
 8016496:	2202      	movs	r2, #2
 8016498:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 801649c:	e003      	b.n	80164a6 <HAL_TIM_PWM_Start+0xfe>
 801649e:	687b      	ldr	r3, [r7, #4]
 80164a0:	2202      	movs	r2, #2
 80164a2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80164a6:	687b      	ldr	r3, [r7, #4]
 80164a8:	681b      	ldr	r3, [r3, #0]
 80164aa:	2201      	movs	r2, #1
 80164ac:	6839      	ldr	r1, [r7, #0]
 80164ae:	4618      	mov	r0, r3
 80164b0:	f001 fa20 	bl	80178f4 <TIM_CCxChannelCmd>
 80164b4:	687b      	ldr	r3, [r7, #4]
 80164b6:	681b      	ldr	r3, [r3, #0]
 80164b8:	4a3d      	ldr	r2, [pc, #244]	@ (80165b0 <HAL_TIM_PWM_Start+0x208>)
 80164ba:	4293      	cmp	r3, r2
 80164bc:	d013      	beq.n	80164e6 <HAL_TIM_PWM_Start+0x13e>
 80164be:	687b      	ldr	r3, [r7, #4]
 80164c0:	681b      	ldr	r3, [r3, #0]
 80164c2:	4a3c      	ldr	r2, [pc, #240]	@ (80165b4 <HAL_TIM_PWM_Start+0x20c>)
 80164c4:	4293      	cmp	r3, r2
 80164c6:	d00e      	beq.n	80164e6 <HAL_TIM_PWM_Start+0x13e>
 80164c8:	687b      	ldr	r3, [r7, #4]
 80164ca:	681b      	ldr	r3, [r3, #0]
 80164cc:	4a3a      	ldr	r2, [pc, #232]	@ (80165b8 <HAL_TIM_PWM_Start+0x210>)
 80164ce:	4293      	cmp	r3, r2
 80164d0:	d009      	beq.n	80164e6 <HAL_TIM_PWM_Start+0x13e>
 80164d2:	687b      	ldr	r3, [r7, #4]
 80164d4:	681b      	ldr	r3, [r3, #0]
 80164d6:	4a39      	ldr	r2, [pc, #228]	@ (80165bc <HAL_TIM_PWM_Start+0x214>)
 80164d8:	4293      	cmp	r3, r2
 80164da:	d004      	beq.n	80164e6 <HAL_TIM_PWM_Start+0x13e>
 80164dc:	687b      	ldr	r3, [r7, #4]
 80164de:	681b      	ldr	r3, [r3, #0]
 80164e0:	4a37      	ldr	r2, [pc, #220]	@ (80165c0 <HAL_TIM_PWM_Start+0x218>)
 80164e2:	4293      	cmp	r3, r2
 80164e4:	d101      	bne.n	80164ea <HAL_TIM_PWM_Start+0x142>
 80164e6:	2301      	movs	r3, #1
 80164e8:	e000      	b.n	80164ec <HAL_TIM_PWM_Start+0x144>
 80164ea:	2300      	movs	r3, #0
 80164ec:	2b00      	cmp	r3, #0
 80164ee:	d007      	beq.n	8016500 <HAL_TIM_PWM_Start+0x158>
 80164f0:	687b      	ldr	r3, [r7, #4]
 80164f2:	681b      	ldr	r3, [r3, #0]
 80164f4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80164f6:	687b      	ldr	r3, [r7, #4]
 80164f8:	681b      	ldr	r3, [r3, #0]
 80164fa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80164fe:	645a      	str	r2, [r3, #68]	@ 0x44
 8016500:	687b      	ldr	r3, [r7, #4]
 8016502:	681b      	ldr	r3, [r3, #0]
 8016504:	4a2a      	ldr	r2, [pc, #168]	@ (80165b0 <HAL_TIM_PWM_Start+0x208>)
 8016506:	4293      	cmp	r3, r2
 8016508:	d02c      	beq.n	8016564 <HAL_TIM_PWM_Start+0x1bc>
 801650a:	687b      	ldr	r3, [r7, #4]
 801650c:	681b      	ldr	r3, [r3, #0]
 801650e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8016512:	d027      	beq.n	8016564 <HAL_TIM_PWM_Start+0x1bc>
 8016514:	687b      	ldr	r3, [r7, #4]
 8016516:	681b      	ldr	r3, [r3, #0]
 8016518:	4a2a      	ldr	r2, [pc, #168]	@ (80165c4 <HAL_TIM_PWM_Start+0x21c>)
 801651a:	4293      	cmp	r3, r2
 801651c:	d022      	beq.n	8016564 <HAL_TIM_PWM_Start+0x1bc>
 801651e:	687b      	ldr	r3, [r7, #4]
 8016520:	681b      	ldr	r3, [r3, #0]
 8016522:	4a29      	ldr	r2, [pc, #164]	@ (80165c8 <HAL_TIM_PWM_Start+0x220>)
 8016524:	4293      	cmp	r3, r2
 8016526:	d01d      	beq.n	8016564 <HAL_TIM_PWM_Start+0x1bc>
 8016528:	687b      	ldr	r3, [r7, #4]
 801652a:	681b      	ldr	r3, [r3, #0]
 801652c:	4a27      	ldr	r2, [pc, #156]	@ (80165cc <HAL_TIM_PWM_Start+0x224>)
 801652e:	4293      	cmp	r3, r2
 8016530:	d018      	beq.n	8016564 <HAL_TIM_PWM_Start+0x1bc>
 8016532:	687b      	ldr	r3, [r7, #4]
 8016534:	681b      	ldr	r3, [r3, #0]
 8016536:	4a1f      	ldr	r2, [pc, #124]	@ (80165b4 <HAL_TIM_PWM_Start+0x20c>)
 8016538:	4293      	cmp	r3, r2
 801653a:	d013      	beq.n	8016564 <HAL_TIM_PWM_Start+0x1bc>
 801653c:	687b      	ldr	r3, [r7, #4]
 801653e:	681b      	ldr	r3, [r3, #0]
 8016540:	4a23      	ldr	r2, [pc, #140]	@ (80165d0 <HAL_TIM_PWM_Start+0x228>)
 8016542:	4293      	cmp	r3, r2
 8016544:	d00e      	beq.n	8016564 <HAL_TIM_PWM_Start+0x1bc>
 8016546:	687b      	ldr	r3, [r7, #4]
 8016548:	681b      	ldr	r3, [r3, #0]
 801654a:	4a1b      	ldr	r2, [pc, #108]	@ (80165b8 <HAL_TIM_PWM_Start+0x210>)
 801654c:	4293      	cmp	r3, r2
 801654e:	d009      	beq.n	8016564 <HAL_TIM_PWM_Start+0x1bc>
 8016550:	687b      	ldr	r3, [r7, #4]
 8016552:	681b      	ldr	r3, [r3, #0]
 8016554:	4a1f      	ldr	r2, [pc, #124]	@ (80165d4 <HAL_TIM_PWM_Start+0x22c>)
 8016556:	4293      	cmp	r3, r2
 8016558:	d004      	beq.n	8016564 <HAL_TIM_PWM_Start+0x1bc>
 801655a:	687b      	ldr	r3, [r7, #4]
 801655c:	681b      	ldr	r3, [r3, #0]
 801655e:	4a1e      	ldr	r2, [pc, #120]	@ (80165d8 <HAL_TIM_PWM_Start+0x230>)
 8016560:	4293      	cmp	r3, r2
 8016562:	d115      	bne.n	8016590 <HAL_TIM_PWM_Start+0x1e8>
 8016564:	687b      	ldr	r3, [r7, #4]
 8016566:	681b      	ldr	r3, [r3, #0]
 8016568:	689a      	ldr	r2, [r3, #8]
 801656a:	4b1c      	ldr	r3, [pc, #112]	@ (80165dc <HAL_TIM_PWM_Start+0x234>)
 801656c:	4013      	ands	r3, r2
 801656e:	60fb      	str	r3, [r7, #12]
 8016570:	68fb      	ldr	r3, [r7, #12]
 8016572:	2b06      	cmp	r3, #6
 8016574:	d015      	beq.n	80165a2 <HAL_TIM_PWM_Start+0x1fa>
 8016576:	68fb      	ldr	r3, [r7, #12]
 8016578:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801657c:	d011      	beq.n	80165a2 <HAL_TIM_PWM_Start+0x1fa>
 801657e:	687b      	ldr	r3, [r7, #4]
 8016580:	681b      	ldr	r3, [r3, #0]
 8016582:	681a      	ldr	r2, [r3, #0]
 8016584:	687b      	ldr	r3, [r7, #4]
 8016586:	681b      	ldr	r3, [r3, #0]
 8016588:	f042 0201 	orr.w	r2, r2, #1
 801658c:	601a      	str	r2, [r3, #0]
 801658e:	e008      	b.n	80165a2 <HAL_TIM_PWM_Start+0x1fa>
 8016590:	687b      	ldr	r3, [r7, #4]
 8016592:	681b      	ldr	r3, [r3, #0]
 8016594:	681a      	ldr	r2, [r3, #0]
 8016596:	687b      	ldr	r3, [r7, #4]
 8016598:	681b      	ldr	r3, [r3, #0]
 801659a:	f042 0201 	orr.w	r2, r2, #1
 801659e:	601a      	str	r2, [r3, #0]
 80165a0:	e000      	b.n	80165a4 <HAL_TIM_PWM_Start+0x1fc>
 80165a2:	bf00      	nop
 80165a4:	2300      	movs	r3, #0
 80165a6:	4618      	mov	r0, r3
 80165a8:	3710      	adds	r7, #16
 80165aa:	46bd      	mov	sp, r7
 80165ac:	bd80      	pop	{r7, pc}
 80165ae:	bf00      	nop
 80165b0:	40010000 	.word	0x40010000
 80165b4:	40010400 	.word	0x40010400
 80165b8:	40014000 	.word	0x40014000
 80165bc:	40014400 	.word	0x40014400
 80165c0:	40014800 	.word	0x40014800
 80165c4:	40000400 	.word	0x40000400
 80165c8:	40000800 	.word	0x40000800
 80165cc:	40000c00 	.word	0x40000c00
 80165d0:	40001800 	.word	0x40001800
 80165d4:	4000e000 	.word	0x4000e000
 80165d8:	4000e400 	.word	0x4000e400
 80165dc:	00010007 	.word	0x00010007

080165e0 <HAL_TIM_IC_Init>:
 80165e0:	b580      	push	{r7, lr}
 80165e2:	b082      	sub	sp, #8
 80165e4:	af00      	add	r7, sp, #0
 80165e6:	6078      	str	r0, [r7, #4]
 80165e8:	687b      	ldr	r3, [r7, #4]
 80165ea:	2b00      	cmp	r3, #0
 80165ec:	d101      	bne.n	80165f2 <HAL_TIM_IC_Init+0x12>
 80165ee:	2301      	movs	r3, #1
 80165f0:	e049      	b.n	8016686 <HAL_TIM_IC_Init+0xa6>
 80165f2:	687b      	ldr	r3, [r7, #4]
 80165f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80165f8:	b2db      	uxtb	r3, r3
 80165fa:	2b00      	cmp	r3, #0
 80165fc:	d106      	bne.n	801660c <HAL_TIM_IC_Init+0x2c>
 80165fe:	687b      	ldr	r3, [r7, #4]
 8016600:	2200      	movs	r2, #0
 8016602:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8016606:	6878      	ldr	r0, [r7, #4]
 8016608:	f7f2 fbd2 	bl	8008db0 <HAL_TIM_IC_MspInit>
 801660c:	687b      	ldr	r3, [r7, #4]
 801660e:	2202      	movs	r2, #2
 8016610:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8016614:	687b      	ldr	r3, [r7, #4]
 8016616:	681a      	ldr	r2, [r3, #0]
 8016618:	687b      	ldr	r3, [r7, #4]
 801661a:	3304      	adds	r3, #4
 801661c:	4619      	mov	r1, r3
 801661e:	4610      	mov	r0, r2
 8016620:	f000 fc0c 	bl	8016e3c <TIM_Base_SetConfig>
 8016624:	687b      	ldr	r3, [r7, #4]
 8016626:	2201      	movs	r2, #1
 8016628:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
 801662c:	687b      	ldr	r3, [r7, #4]
 801662e:	2201      	movs	r2, #1
 8016630:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8016634:	687b      	ldr	r3, [r7, #4]
 8016636:	2201      	movs	r2, #1
 8016638:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 801663c:	687b      	ldr	r3, [r7, #4]
 801663e:	2201      	movs	r2, #1
 8016640:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8016644:	687b      	ldr	r3, [r7, #4]
 8016646:	2201      	movs	r2, #1
 8016648:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 801664c:	687b      	ldr	r3, [r7, #4]
 801664e:	2201      	movs	r2, #1
 8016650:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8016654:	687b      	ldr	r3, [r7, #4]
 8016656:	2201      	movs	r2, #1
 8016658:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 801665c:	687b      	ldr	r3, [r7, #4]
 801665e:	2201      	movs	r2, #1
 8016660:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8016664:	687b      	ldr	r3, [r7, #4]
 8016666:	2201      	movs	r2, #1
 8016668:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 801666c:	687b      	ldr	r3, [r7, #4]
 801666e:	2201      	movs	r2, #1
 8016670:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8016674:	687b      	ldr	r3, [r7, #4]
 8016676:	2201      	movs	r2, #1
 8016678:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
 801667c:	687b      	ldr	r3, [r7, #4]
 801667e:	2201      	movs	r2, #1
 8016680:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8016684:	2300      	movs	r3, #0
 8016686:	4618      	mov	r0, r3
 8016688:	3708      	adds	r7, #8
 801668a:	46bd      	mov	sp, r7
 801668c:	bd80      	pop	{r7, pc}

0801668e <HAL_TIM_IRQHandler>:
 801668e:	b580      	push	{r7, lr}
 8016690:	b084      	sub	sp, #16
 8016692:	af00      	add	r7, sp, #0
 8016694:	6078      	str	r0, [r7, #4]
 8016696:	687b      	ldr	r3, [r7, #4]
 8016698:	681b      	ldr	r3, [r3, #0]
 801669a:	68db      	ldr	r3, [r3, #12]
 801669c:	60fb      	str	r3, [r7, #12]
 801669e:	687b      	ldr	r3, [r7, #4]
 80166a0:	681b      	ldr	r3, [r3, #0]
 80166a2:	691b      	ldr	r3, [r3, #16]
 80166a4:	60bb      	str	r3, [r7, #8]
 80166a6:	68bb      	ldr	r3, [r7, #8]
 80166a8:	f003 0302 	and.w	r3, r3, #2
 80166ac:	2b00      	cmp	r3, #0
 80166ae:	d020      	beq.n	80166f2 <HAL_TIM_IRQHandler+0x64>
 80166b0:	68fb      	ldr	r3, [r7, #12]
 80166b2:	f003 0302 	and.w	r3, r3, #2
 80166b6:	2b00      	cmp	r3, #0
 80166b8:	d01b      	beq.n	80166f2 <HAL_TIM_IRQHandler+0x64>
 80166ba:	687b      	ldr	r3, [r7, #4]
 80166bc:	681b      	ldr	r3, [r3, #0]
 80166be:	f06f 0202 	mvn.w	r2, #2
 80166c2:	611a      	str	r2, [r3, #16]
 80166c4:	687b      	ldr	r3, [r7, #4]
 80166c6:	2201      	movs	r2, #1
 80166c8:	771a      	strb	r2, [r3, #28]
 80166ca:	687b      	ldr	r3, [r7, #4]
 80166cc:	681b      	ldr	r3, [r3, #0]
 80166ce:	699b      	ldr	r3, [r3, #24]
 80166d0:	f003 0303 	and.w	r3, r3, #3
 80166d4:	2b00      	cmp	r3, #0
 80166d6:	d003      	beq.n	80166e0 <HAL_TIM_IRQHandler+0x52>
 80166d8:	6878      	ldr	r0, [r7, #4]
 80166da:	f000 fb91 	bl	8016e00 <HAL_TIM_IC_CaptureCallback>
 80166de:	e005      	b.n	80166ec <HAL_TIM_IRQHandler+0x5e>
 80166e0:	6878      	ldr	r0, [r7, #4]
 80166e2:	f000 fb83 	bl	8016dec <HAL_TIM_OC_DelayElapsedCallback>
 80166e6:	6878      	ldr	r0, [r7, #4]
 80166e8:	f000 fb94 	bl	8016e14 <HAL_TIM_PWM_PulseFinishedCallback>
 80166ec:	687b      	ldr	r3, [r7, #4]
 80166ee:	2200      	movs	r2, #0
 80166f0:	771a      	strb	r2, [r3, #28]
 80166f2:	68bb      	ldr	r3, [r7, #8]
 80166f4:	f003 0304 	and.w	r3, r3, #4
 80166f8:	2b00      	cmp	r3, #0
 80166fa:	d020      	beq.n	801673e <HAL_TIM_IRQHandler+0xb0>
 80166fc:	68fb      	ldr	r3, [r7, #12]
 80166fe:	f003 0304 	and.w	r3, r3, #4
 8016702:	2b00      	cmp	r3, #0
 8016704:	d01b      	beq.n	801673e <HAL_TIM_IRQHandler+0xb0>
 8016706:	687b      	ldr	r3, [r7, #4]
 8016708:	681b      	ldr	r3, [r3, #0]
 801670a:	f06f 0204 	mvn.w	r2, #4
 801670e:	611a      	str	r2, [r3, #16]
 8016710:	687b      	ldr	r3, [r7, #4]
 8016712:	2202      	movs	r2, #2
 8016714:	771a      	strb	r2, [r3, #28]
 8016716:	687b      	ldr	r3, [r7, #4]
 8016718:	681b      	ldr	r3, [r3, #0]
 801671a:	699b      	ldr	r3, [r3, #24]
 801671c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8016720:	2b00      	cmp	r3, #0
 8016722:	d003      	beq.n	801672c <HAL_TIM_IRQHandler+0x9e>
 8016724:	6878      	ldr	r0, [r7, #4]
 8016726:	f000 fb6b 	bl	8016e00 <HAL_TIM_IC_CaptureCallback>
 801672a:	e005      	b.n	8016738 <HAL_TIM_IRQHandler+0xaa>
 801672c:	6878      	ldr	r0, [r7, #4]
 801672e:	f000 fb5d 	bl	8016dec <HAL_TIM_OC_DelayElapsedCallback>
 8016732:	6878      	ldr	r0, [r7, #4]
 8016734:	f000 fb6e 	bl	8016e14 <HAL_TIM_PWM_PulseFinishedCallback>
 8016738:	687b      	ldr	r3, [r7, #4]
 801673a:	2200      	movs	r2, #0
 801673c:	771a      	strb	r2, [r3, #28]
 801673e:	68bb      	ldr	r3, [r7, #8]
 8016740:	f003 0308 	and.w	r3, r3, #8
 8016744:	2b00      	cmp	r3, #0
 8016746:	d020      	beq.n	801678a <HAL_TIM_IRQHandler+0xfc>
 8016748:	68fb      	ldr	r3, [r7, #12]
 801674a:	f003 0308 	and.w	r3, r3, #8
 801674e:	2b00      	cmp	r3, #0
 8016750:	d01b      	beq.n	801678a <HAL_TIM_IRQHandler+0xfc>
 8016752:	687b      	ldr	r3, [r7, #4]
 8016754:	681b      	ldr	r3, [r3, #0]
 8016756:	f06f 0208 	mvn.w	r2, #8
 801675a:	611a      	str	r2, [r3, #16]
 801675c:	687b      	ldr	r3, [r7, #4]
 801675e:	2204      	movs	r2, #4
 8016760:	771a      	strb	r2, [r3, #28]
 8016762:	687b      	ldr	r3, [r7, #4]
 8016764:	681b      	ldr	r3, [r3, #0]
 8016766:	69db      	ldr	r3, [r3, #28]
 8016768:	f003 0303 	and.w	r3, r3, #3
 801676c:	2b00      	cmp	r3, #0
 801676e:	d003      	beq.n	8016778 <HAL_TIM_IRQHandler+0xea>
 8016770:	6878      	ldr	r0, [r7, #4]
 8016772:	f000 fb45 	bl	8016e00 <HAL_TIM_IC_CaptureCallback>
 8016776:	e005      	b.n	8016784 <HAL_TIM_IRQHandler+0xf6>
 8016778:	6878      	ldr	r0, [r7, #4]
 801677a:	f000 fb37 	bl	8016dec <HAL_TIM_OC_DelayElapsedCallback>
 801677e:	6878      	ldr	r0, [r7, #4]
 8016780:	f000 fb48 	bl	8016e14 <HAL_TIM_PWM_PulseFinishedCallback>
 8016784:	687b      	ldr	r3, [r7, #4]
 8016786:	2200      	movs	r2, #0
 8016788:	771a      	strb	r2, [r3, #28]
 801678a:	68bb      	ldr	r3, [r7, #8]
 801678c:	f003 0310 	and.w	r3, r3, #16
 8016790:	2b00      	cmp	r3, #0
 8016792:	d020      	beq.n	80167d6 <HAL_TIM_IRQHandler+0x148>
 8016794:	68fb      	ldr	r3, [r7, #12]
 8016796:	f003 0310 	and.w	r3, r3, #16
 801679a:	2b00      	cmp	r3, #0
 801679c:	d01b      	beq.n	80167d6 <HAL_TIM_IRQHandler+0x148>
 801679e:	687b      	ldr	r3, [r7, #4]
 80167a0:	681b      	ldr	r3, [r3, #0]
 80167a2:	f06f 0210 	mvn.w	r2, #16
 80167a6:	611a      	str	r2, [r3, #16]
 80167a8:	687b      	ldr	r3, [r7, #4]
 80167aa:	2208      	movs	r2, #8
 80167ac:	771a      	strb	r2, [r3, #28]
 80167ae:	687b      	ldr	r3, [r7, #4]
 80167b0:	681b      	ldr	r3, [r3, #0]
 80167b2:	69db      	ldr	r3, [r3, #28]
 80167b4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80167b8:	2b00      	cmp	r3, #0
 80167ba:	d003      	beq.n	80167c4 <HAL_TIM_IRQHandler+0x136>
 80167bc:	6878      	ldr	r0, [r7, #4]
 80167be:	f000 fb1f 	bl	8016e00 <HAL_TIM_IC_CaptureCallback>
 80167c2:	e005      	b.n	80167d0 <HAL_TIM_IRQHandler+0x142>
 80167c4:	6878      	ldr	r0, [r7, #4]
 80167c6:	f000 fb11 	bl	8016dec <HAL_TIM_OC_DelayElapsedCallback>
 80167ca:	6878      	ldr	r0, [r7, #4]
 80167cc:	f000 fb22 	bl	8016e14 <HAL_TIM_PWM_PulseFinishedCallback>
 80167d0:	687b      	ldr	r3, [r7, #4]
 80167d2:	2200      	movs	r2, #0
 80167d4:	771a      	strb	r2, [r3, #28]
 80167d6:	68bb      	ldr	r3, [r7, #8]
 80167d8:	f003 0301 	and.w	r3, r3, #1
 80167dc:	2b00      	cmp	r3, #0
 80167de:	d00c      	beq.n	80167fa <HAL_TIM_IRQHandler+0x16c>
 80167e0:	68fb      	ldr	r3, [r7, #12]
 80167e2:	f003 0301 	and.w	r3, r3, #1
 80167e6:	2b00      	cmp	r3, #0
 80167e8:	d007      	beq.n	80167fa <HAL_TIM_IRQHandler+0x16c>
 80167ea:	687b      	ldr	r3, [r7, #4]
 80167ec:	681b      	ldr	r3, [r3, #0]
 80167ee:	f06f 0201 	mvn.w	r2, #1
 80167f2:	611a      	str	r2, [r3, #16]
 80167f4:	6878      	ldr	r0, [r7, #4]
 80167f6:	f7ef fac5 	bl	8005d84 <HAL_TIM_PeriodElapsedCallback>
 80167fa:	68bb      	ldr	r3, [r7, #8]
 80167fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8016800:	2b00      	cmp	r3, #0
 8016802:	d104      	bne.n	801680e <HAL_TIM_IRQHandler+0x180>
 8016804:	68bb      	ldr	r3, [r7, #8]
 8016806:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801680a:	2b00      	cmp	r3, #0
 801680c:	d00c      	beq.n	8016828 <HAL_TIM_IRQHandler+0x19a>
 801680e:	68fb      	ldr	r3, [r7, #12]
 8016810:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8016814:	2b00      	cmp	r3, #0
 8016816:	d007      	beq.n	8016828 <HAL_TIM_IRQHandler+0x19a>
 8016818:	687b      	ldr	r3, [r7, #4]
 801681a:	681b      	ldr	r3, [r3, #0]
 801681c:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8016820:	611a      	str	r2, [r3, #16]
 8016822:	6878      	ldr	r0, [r7, #4]
 8016824:	f001 f9be 	bl	8017ba4 <HAL_TIMEx_BreakCallback>
 8016828:	68bb      	ldr	r3, [r7, #8]
 801682a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801682e:	2b00      	cmp	r3, #0
 8016830:	d00c      	beq.n	801684c <HAL_TIM_IRQHandler+0x1be>
 8016832:	68fb      	ldr	r3, [r7, #12]
 8016834:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8016838:	2b00      	cmp	r3, #0
 801683a:	d007      	beq.n	801684c <HAL_TIM_IRQHandler+0x1be>
 801683c:	687b      	ldr	r3, [r7, #4]
 801683e:	681b      	ldr	r3, [r3, #0]
 8016840:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8016844:	611a      	str	r2, [r3, #16]
 8016846:	6878      	ldr	r0, [r7, #4]
 8016848:	f001 f9b6 	bl	8017bb8 <HAL_TIMEx_Break2Callback>
 801684c:	68bb      	ldr	r3, [r7, #8]
 801684e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8016852:	2b00      	cmp	r3, #0
 8016854:	d00c      	beq.n	8016870 <HAL_TIM_IRQHandler+0x1e2>
 8016856:	68fb      	ldr	r3, [r7, #12]
 8016858:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801685c:	2b00      	cmp	r3, #0
 801685e:	d007      	beq.n	8016870 <HAL_TIM_IRQHandler+0x1e2>
 8016860:	687b      	ldr	r3, [r7, #4]
 8016862:	681b      	ldr	r3, [r3, #0]
 8016864:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8016868:	611a      	str	r2, [r3, #16]
 801686a:	6878      	ldr	r0, [r7, #4]
 801686c:	f000 fadc 	bl	8016e28 <HAL_TIM_TriggerCallback>
 8016870:	68bb      	ldr	r3, [r7, #8]
 8016872:	f003 0320 	and.w	r3, r3, #32
 8016876:	2b00      	cmp	r3, #0
 8016878:	d00c      	beq.n	8016894 <HAL_TIM_IRQHandler+0x206>
 801687a:	68fb      	ldr	r3, [r7, #12]
 801687c:	f003 0320 	and.w	r3, r3, #32
 8016880:	2b00      	cmp	r3, #0
 8016882:	d007      	beq.n	8016894 <HAL_TIM_IRQHandler+0x206>
 8016884:	687b      	ldr	r3, [r7, #4]
 8016886:	681b      	ldr	r3, [r3, #0]
 8016888:	f06f 0220 	mvn.w	r2, #32
 801688c:	611a      	str	r2, [r3, #16]
 801688e:	6878      	ldr	r0, [r7, #4]
 8016890:	f001 f97e 	bl	8017b90 <HAL_TIMEx_CommutCallback>
 8016894:	bf00      	nop
 8016896:	3710      	adds	r7, #16
 8016898:	46bd      	mov	sp, r7
 801689a:	bd80      	pop	{r7, pc}

0801689c <HAL_TIM_IC_ConfigChannel>:
 801689c:	b580      	push	{r7, lr}
 801689e:	b086      	sub	sp, #24
 80168a0:	af00      	add	r7, sp, #0
 80168a2:	60f8      	str	r0, [r7, #12]
 80168a4:	60b9      	str	r1, [r7, #8]
 80168a6:	607a      	str	r2, [r7, #4]
 80168a8:	2300      	movs	r3, #0
 80168aa:	75fb      	strb	r3, [r7, #23]
 80168ac:	68fb      	ldr	r3, [r7, #12]
 80168ae:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80168b2:	2b01      	cmp	r3, #1
 80168b4:	d101      	bne.n	80168ba <HAL_TIM_IC_ConfigChannel+0x1e>
 80168b6:	2302      	movs	r3, #2
 80168b8:	e088      	b.n	80169cc <HAL_TIM_IC_ConfigChannel+0x130>
 80168ba:	68fb      	ldr	r3, [r7, #12]
 80168bc:	2201      	movs	r2, #1
 80168be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80168c2:	687b      	ldr	r3, [r7, #4]
 80168c4:	2b00      	cmp	r3, #0
 80168c6:	d11b      	bne.n	8016900 <HAL_TIM_IC_ConfigChannel+0x64>
 80168c8:	68fb      	ldr	r3, [r7, #12]
 80168ca:	6818      	ldr	r0, [r3, #0]
 80168cc:	68bb      	ldr	r3, [r7, #8]
 80168ce:	6819      	ldr	r1, [r3, #0]
 80168d0:	68bb      	ldr	r3, [r7, #8]
 80168d2:	685a      	ldr	r2, [r3, #4]
 80168d4:	68bb      	ldr	r3, [r7, #8]
 80168d6:	68db      	ldr	r3, [r3, #12]
 80168d8:	f000 fe38 	bl	801754c <TIM_TI1_SetConfig>
 80168dc:	68fb      	ldr	r3, [r7, #12]
 80168de:	681b      	ldr	r3, [r3, #0]
 80168e0:	699a      	ldr	r2, [r3, #24]
 80168e2:	68fb      	ldr	r3, [r7, #12]
 80168e4:	681b      	ldr	r3, [r3, #0]
 80168e6:	f022 020c 	bic.w	r2, r2, #12
 80168ea:	619a      	str	r2, [r3, #24]
 80168ec:	68fb      	ldr	r3, [r7, #12]
 80168ee:	681b      	ldr	r3, [r3, #0]
 80168f0:	6999      	ldr	r1, [r3, #24]
 80168f2:	68bb      	ldr	r3, [r7, #8]
 80168f4:	689a      	ldr	r2, [r3, #8]
 80168f6:	68fb      	ldr	r3, [r7, #12]
 80168f8:	681b      	ldr	r3, [r3, #0]
 80168fa:	430a      	orrs	r2, r1
 80168fc:	619a      	str	r2, [r3, #24]
 80168fe:	e060      	b.n	80169c2 <HAL_TIM_IC_ConfigChannel+0x126>
 8016900:	687b      	ldr	r3, [r7, #4]
 8016902:	2b04      	cmp	r3, #4
 8016904:	d11c      	bne.n	8016940 <HAL_TIM_IC_ConfigChannel+0xa4>
 8016906:	68fb      	ldr	r3, [r7, #12]
 8016908:	6818      	ldr	r0, [r3, #0]
 801690a:	68bb      	ldr	r3, [r7, #8]
 801690c:	6819      	ldr	r1, [r3, #0]
 801690e:	68bb      	ldr	r3, [r7, #8]
 8016910:	685a      	ldr	r2, [r3, #4]
 8016912:	68bb      	ldr	r3, [r7, #8]
 8016914:	68db      	ldr	r3, [r3, #12]
 8016916:	f000 fec8 	bl	80176aa <TIM_TI2_SetConfig>
 801691a:	68fb      	ldr	r3, [r7, #12]
 801691c:	681b      	ldr	r3, [r3, #0]
 801691e:	699a      	ldr	r2, [r3, #24]
 8016920:	68fb      	ldr	r3, [r7, #12]
 8016922:	681b      	ldr	r3, [r3, #0]
 8016924:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8016928:	619a      	str	r2, [r3, #24]
 801692a:	68fb      	ldr	r3, [r7, #12]
 801692c:	681b      	ldr	r3, [r3, #0]
 801692e:	6999      	ldr	r1, [r3, #24]
 8016930:	68bb      	ldr	r3, [r7, #8]
 8016932:	689b      	ldr	r3, [r3, #8]
 8016934:	021a      	lsls	r2, r3, #8
 8016936:	68fb      	ldr	r3, [r7, #12]
 8016938:	681b      	ldr	r3, [r3, #0]
 801693a:	430a      	orrs	r2, r1
 801693c:	619a      	str	r2, [r3, #24]
 801693e:	e040      	b.n	80169c2 <HAL_TIM_IC_ConfigChannel+0x126>
 8016940:	687b      	ldr	r3, [r7, #4]
 8016942:	2b08      	cmp	r3, #8
 8016944:	d11b      	bne.n	801697e <HAL_TIM_IC_ConfigChannel+0xe2>
 8016946:	68fb      	ldr	r3, [r7, #12]
 8016948:	6818      	ldr	r0, [r3, #0]
 801694a:	68bb      	ldr	r3, [r7, #8]
 801694c:	6819      	ldr	r1, [r3, #0]
 801694e:	68bb      	ldr	r3, [r7, #8]
 8016950:	685a      	ldr	r2, [r3, #4]
 8016952:	68bb      	ldr	r3, [r7, #8]
 8016954:	68db      	ldr	r3, [r3, #12]
 8016956:	f000 ff15 	bl	8017784 <TIM_TI3_SetConfig>
 801695a:	68fb      	ldr	r3, [r7, #12]
 801695c:	681b      	ldr	r3, [r3, #0]
 801695e:	69da      	ldr	r2, [r3, #28]
 8016960:	68fb      	ldr	r3, [r7, #12]
 8016962:	681b      	ldr	r3, [r3, #0]
 8016964:	f022 020c 	bic.w	r2, r2, #12
 8016968:	61da      	str	r2, [r3, #28]
 801696a:	68fb      	ldr	r3, [r7, #12]
 801696c:	681b      	ldr	r3, [r3, #0]
 801696e:	69d9      	ldr	r1, [r3, #28]
 8016970:	68bb      	ldr	r3, [r7, #8]
 8016972:	689a      	ldr	r2, [r3, #8]
 8016974:	68fb      	ldr	r3, [r7, #12]
 8016976:	681b      	ldr	r3, [r3, #0]
 8016978:	430a      	orrs	r2, r1
 801697a:	61da      	str	r2, [r3, #28]
 801697c:	e021      	b.n	80169c2 <HAL_TIM_IC_ConfigChannel+0x126>
 801697e:	687b      	ldr	r3, [r7, #4]
 8016980:	2b0c      	cmp	r3, #12
 8016982:	d11c      	bne.n	80169be <HAL_TIM_IC_ConfigChannel+0x122>
 8016984:	68fb      	ldr	r3, [r7, #12]
 8016986:	6818      	ldr	r0, [r3, #0]
 8016988:	68bb      	ldr	r3, [r7, #8]
 801698a:	6819      	ldr	r1, [r3, #0]
 801698c:	68bb      	ldr	r3, [r7, #8]
 801698e:	685a      	ldr	r2, [r3, #4]
 8016990:	68bb      	ldr	r3, [r7, #8]
 8016992:	68db      	ldr	r3, [r3, #12]
 8016994:	f000 ff32 	bl	80177fc <TIM_TI4_SetConfig>
 8016998:	68fb      	ldr	r3, [r7, #12]
 801699a:	681b      	ldr	r3, [r3, #0]
 801699c:	69da      	ldr	r2, [r3, #28]
 801699e:	68fb      	ldr	r3, [r7, #12]
 80169a0:	681b      	ldr	r3, [r3, #0]
 80169a2:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80169a6:	61da      	str	r2, [r3, #28]
 80169a8:	68fb      	ldr	r3, [r7, #12]
 80169aa:	681b      	ldr	r3, [r3, #0]
 80169ac:	69d9      	ldr	r1, [r3, #28]
 80169ae:	68bb      	ldr	r3, [r7, #8]
 80169b0:	689b      	ldr	r3, [r3, #8]
 80169b2:	021a      	lsls	r2, r3, #8
 80169b4:	68fb      	ldr	r3, [r7, #12]
 80169b6:	681b      	ldr	r3, [r3, #0]
 80169b8:	430a      	orrs	r2, r1
 80169ba:	61da      	str	r2, [r3, #28]
 80169bc:	e001      	b.n	80169c2 <HAL_TIM_IC_ConfigChannel+0x126>
 80169be:	2301      	movs	r3, #1
 80169c0:	75fb      	strb	r3, [r7, #23]
 80169c2:	68fb      	ldr	r3, [r7, #12]
 80169c4:	2200      	movs	r2, #0
 80169c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80169ca:	7dfb      	ldrb	r3, [r7, #23]
 80169cc:	4618      	mov	r0, r3
 80169ce:	3718      	adds	r7, #24
 80169d0:	46bd      	mov	sp, r7
 80169d2:	bd80      	pop	{r7, pc}

080169d4 <HAL_TIM_PWM_ConfigChannel>:
 80169d4:	b580      	push	{r7, lr}
 80169d6:	b086      	sub	sp, #24
 80169d8:	af00      	add	r7, sp, #0
 80169da:	60f8      	str	r0, [r7, #12]
 80169dc:	60b9      	str	r1, [r7, #8]
 80169de:	607a      	str	r2, [r7, #4]
 80169e0:	2300      	movs	r3, #0
 80169e2:	75fb      	strb	r3, [r7, #23]
 80169e4:	68fb      	ldr	r3, [r7, #12]
 80169e6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80169ea:	2b01      	cmp	r3, #1
 80169ec:	d101      	bne.n	80169f2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80169ee:	2302      	movs	r3, #2
 80169f0:	e0ff      	b.n	8016bf2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80169f2:	68fb      	ldr	r3, [r7, #12]
 80169f4:	2201      	movs	r2, #1
 80169f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80169fa:	687b      	ldr	r3, [r7, #4]
 80169fc:	2b14      	cmp	r3, #20
 80169fe:	f200 80f0 	bhi.w	8016be2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8016a02:	a201      	add	r2, pc, #4	@ (adr r2, 8016a08 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8016a04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016a08:	08016a5d 	.word	0x08016a5d
 8016a0c:	08016be3 	.word	0x08016be3
 8016a10:	08016be3 	.word	0x08016be3
 8016a14:	08016be3 	.word	0x08016be3
 8016a18:	08016a9d 	.word	0x08016a9d
 8016a1c:	08016be3 	.word	0x08016be3
 8016a20:	08016be3 	.word	0x08016be3
 8016a24:	08016be3 	.word	0x08016be3
 8016a28:	08016adf 	.word	0x08016adf
 8016a2c:	08016be3 	.word	0x08016be3
 8016a30:	08016be3 	.word	0x08016be3
 8016a34:	08016be3 	.word	0x08016be3
 8016a38:	08016b1f 	.word	0x08016b1f
 8016a3c:	08016be3 	.word	0x08016be3
 8016a40:	08016be3 	.word	0x08016be3
 8016a44:	08016be3 	.word	0x08016be3
 8016a48:	08016b61 	.word	0x08016b61
 8016a4c:	08016be3 	.word	0x08016be3
 8016a50:	08016be3 	.word	0x08016be3
 8016a54:	08016be3 	.word	0x08016be3
 8016a58:	08016ba1 	.word	0x08016ba1
 8016a5c:	68fb      	ldr	r3, [r7, #12]
 8016a5e:	681b      	ldr	r3, [r3, #0]
 8016a60:	68b9      	ldr	r1, [r7, #8]
 8016a62:	4618      	mov	r0, r3
 8016a64:	f000 fa9c 	bl	8016fa0 <TIM_OC1_SetConfig>
 8016a68:	68fb      	ldr	r3, [r7, #12]
 8016a6a:	681b      	ldr	r3, [r3, #0]
 8016a6c:	699a      	ldr	r2, [r3, #24]
 8016a6e:	68fb      	ldr	r3, [r7, #12]
 8016a70:	681b      	ldr	r3, [r3, #0]
 8016a72:	f042 0208 	orr.w	r2, r2, #8
 8016a76:	619a      	str	r2, [r3, #24]
 8016a78:	68fb      	ldr	r3, [r7, #12]
 8016a7a:	681b      	ldr	r3, [r3, #0]
 8016a7c:	699a      	ldr	r2, [r3, #24]
 8016a7e:	68fb      	ldr	r3, [r7, #12]
 8016a80:	681b      	ldr	r3, [r3, #0]
 8016a82:	f022 0204 	bic.w	r2, r2, #4
 8016a86:	619a      	str	r2, [r3, #24]
 8016a88:	68fb      	ldr	r3, [r7, #12]
 8016a8a:	681b      	ldr	r3, [r3, #0]
 8016a8c:	6999      	ldr	r1, [r3, #24]
 8016a8e:	68bb      	ldr	r3, [r7, #8]
 8016a90:	691a      	ldr	r2, [r3, #16]
 8016a92:	68fb      	ldr	r3, [r7, #12]
 8016a94:	681b      	ldr	r3, [r3, #0]
 8016a96:	430a      	orrs	r2, r1
 8016a98:	619a      	str	r2, [r3, #24]
 8016a9a:	e0a5      	b.n	8016be8 <HAL_TIM_PWM_ConfigChannel+0x214>
 8016a9c:	68fb      	ldr	r3, [r7, #12]
 8016a9e:	681b      	ldr	r3, [r3, #0]
 8016aa0:	68b9      	ldr	r1, [r7, #8]
 8016aa2:	4618      	mov	r0, r3
 8016aa4:	f000 fb0c 	bl	80170c0 <TIM_OC2_SetConfig>
 8016aa8:	68fb      	ldr	r3, [r7, #12]
 8016aaa:	681b      	ldr	r3, [r3, #0]
 8016aac:	699a      	ldr	r2, [r3, #24]
 8016aae:	68fb      	ldr	r3, [r7, #12]
 8016ab0:	681b      	ldr	r3, [r3, #0]
 8016ab2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8016ab6:	619a      	str	r2, [r3, #24]
 8016ab8:	68fb      	ldr	r3, [r7, #12]
 8016aba:	681b      	ldr	r3, [r3, #0]
 8016abc:	699a      	ldr	r2, [r3, #24]
 8016abe:	68fb      	ldr	r3, [r7, #12]
 8016ac0:	681b      	ldr	r3, [r3, #0]
 8016ac2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8016ac6:	619a      	str	r2, [r3, #24]
 8016ac8:	68fb      	ldr	r3, [r7, #12]
 8016aca:	681b      	ldr	r3, [r3, #0]
 8016acc:	6999      	ldr	r1, [r3, #24]
 8016ace:	68bb      	ldr	r3, [r7, #8]
 8016ad0:	691b      	ldr	r3, [r3, #16]
 8016ad2:	021a      	lsls	r2, r3, #8
 8016ad4:	68fb      	ldr	r3, [r7, #12]
 8016ad6:	681b      	ldr	r3, [r3, #0]
 8016ad8:	430a      	orrs	r2, r1
 8016ada:	619a      	str	r2, [r3, #24]
 8016adc:	e084      	b.n	8016be8 <HAL_TIM_PWM_ConfigChannel+0x214>
 8016ade:	68fb      	ldr	r3, [r7, #12]
 8016ae0:	681b      	ldr	r3, [r3, #0]
 8016ae2:	68b9      	ldr	r1, [r7, #8]
 8016ae4:	4618      	mov	r0, r3
 8016ae6:	f000 fb75 	bl	80171d4 <TIM_OC3_SetConfig>
 8016aea:	68fb      	ldr	r3, [r7, #12]
 8016aec:	681b      	ldr	r3, [r3, #0]
 8016aee:	69da      	ldr	r2, [r3, #28]
 8016af0:	68fb      	ldr	r3, [r7, #12]
 8016af2:	681b      	ldr	r3, [r3, #0]
 8016af4:	f042 0208 	orr.w	r2, r2, #8
 8016af8:	61da      	str	r2, [r3, #28]
 8016afa:	68fb      	ldr	r3, [r7, #12]
 8016afc:	681b      	ldr	r3, [r3, #0]
 8016afe:	69da      	ldr	r2, [r3, #28]
 8016b00:	68fb      	ldr	r3, [r7, #12]
 8016b02:	681b      	ldr	r3, [r3, #0]
 8016b04:	f022 0204 	bic.w	r2, r2, #4
 8016b08:	61da      	str	r2, [r3, #28]
 8016b0a:	68fb      	ldr	r3, [r7, #12]
 8016b0c:	681b      	ldr	r3, [r3, #0]
 8016b0e:	69d9      	ldr	r1, [r3, #28]
 8016b10:	68bb      	ldr	r3, [r7, #8]
 8016b12:	691a      	ldr	r2, [r3, #16]
 8016b14:	68fb      	ldr	r3, [r7, #12]
 8016b16:	681b      	ldr	r3, [r3, #0]
 8016b18:	430a      	orrs	r2, r1
 8016b1a:	61da      	str	r2, [r3, #28]
 8016b1c:	e064      	b.n	8016be8 <HAL_TIM_PWM_ConfigChannel+0x214>
 8016b1e:	68fb      	ldr	r3, [r7, #12]
 8016b20:	681b      	ldr	r3, [r3, #0]
 8016b22:	68b9      	ldr	r1, [r7, #8]
 8016b24:	4618      	mov	r0, r3
 8016b26:	f000 fbdd 	bl	80172e4 <TIM_OC4_SetConfig>
 8016b2a:	68fb      	ldr	r3, [r7, #12]
 8016b2c:	681b      	ldr	r3, [r3, #0]
 8016b2e:	69da      	ldr	r2, [r3, #28]
 8016b30:	68fb      	ldr	r3, [r7, #12]
 8016b32:	681b      	ldr	r3, [r3, #0]
 8016b34:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8016b38:	61da      	str	r2, [r3, #28]
 8016b3a:	68fb      	ldr	r3, [r7, #12]
 8016b3c:	681b      	ldr	r3, [r3, #0]
 8016b3e:	69da      	ldr	r2, [r3, #28]
 8016b40:	68fb      	ldr	r3, [r7, #12]
 8016b42:	681b      	ldr	r3, [r3, #0]
 8016b44:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8016b48:	61da      	str	r2, [r3, #28]
 8016b4a:	68fb      	ldr	r3, [r7, #12]
 8016b4c:	681b      	ldr	r3, [r3, #0]
 8016b4e:	69d9      	ldr	r1, [r3, #28]
 8016b50:	68bb      	ldr	r3, [r7, #8]
 8016b52:	691b      	ldr	r3, [r3, #16]
 8016b54:	021a      	lsls	r2, r3, #8
 8016b56:	68fb      	ldr	r3, [r7, #12]
 8016b58:	681b      	ldr	r3, [r3, #0]
 8016b5a:	430a      	orrs	r2, r1
 8016b5c:	61da      	str	r2, [r3, #28]
 8016b5e:	e043      	b.n	8016be8 <HAL_TIM_PWM_ConfigChannel+0x214>
 8016b60:	68fb      	ldr	r3, [r7, #12]
 8016b62:	681b      	ldr	r3, [r3, #0]
 8016b64:	68b9      	ldr	r1, [r7, #8]
 8016b66:	4618      	mov	r0, r3
 8016b68:	f000 fc26 	bl	80173b8 <TIM_OC5_SetConfig>
 8016b6c:	68fb      	ldr	r3, [r7, #12]
 8016b6e:	681b      	ldr	r3, [r3, #0]
 8016b70:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8016b72:	68fb      	ldr	r3, [r7, #12]
 8016b74:	681b      	ldr	r3, [r3, #0]
 8016b76:	f042 0208 	orr.w	r2, r2, #8
 8016b7a:	655a      	str	r2, [r3, #84]	@ 0x54
 8016b7c:	68fb      	ldr	r3, [r7, #12]
 8016b7e:	681b      	ldr	r3, [r3, #0]
 8016b80:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8016b82:	68fb      	ldr	r3, [r7, #12]
 8016b84:	681b      	ldr	r3, [r3, #0]
 8016b86:	f022 0204 	bic.w	r2, r2, #4
 8016b8a:	655a      	str	r2, [r3, #84]	@ 0x54
 8016b8c:	68fb      	ldr	r3, [r7, #12]
 8016b8e:	681b      	ldr	r3, [r3, #0]
 8016b90:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8016b92:	68bb      	ldr	r3, [r7, #8]
 8016b94:	691a      	ldr	r2, [r3, #16]
 8016b96:	68fb      	ldr	r3, [r7, #12]
 8016b98:	681b      	ldr	r3, [r3, #0]
 8016b9a:	430a      	orrs	r2, r1
 8016b9c:	655a      	str	r2, [r3, #84]	@ 0x54
 8016b9e:	e023      	b.n	8016be8 <HAL_TIM_PWM_ConfigChannel+0x214>
 8016ba0:	68fb      	ldr	r3, [r7, #12]
 8016ba2:	681b      	ldr	r3, [r3, #0]
 8016ba4:	68b9      	ldr	r1, [r7, #8]
 8016ba6:	4618      	mov	r0, r3
 8016ba8:	f000 fc6a 	bl	8017480 <TIM_OC6_SetConfig>
 8016bac:	68fb      	ldr	r3, [r7, #12]
 8016bae:	681b      	ldr	r3, [r3, #0]
 8016bb0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8016bb2:	68fb      	ldr	r3, [r7, #12]
 8016bb4:	681b      	ldr	r3, [r3, #0]
 8016bb6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8016bba:	655a      	str	r2, [r3, #84]	@ 0x54
 8016bbc:	68fb      	ldr	r3, [r7, #12]
 8016bbe:	681b      	ldr	r3, [r3, #0]
 8016bc0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8016bc2:	68fb      	ldr	r3, [r7, #12]
 8016bc4:	681b      	ldr	r3, [r3, #0]
 8016bc6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8016bca:	655a      	str	r2, [r3, #84]	@ 0x54
 8016bcc:	68fb      	ldr	r3, [r7, #12]
 8016bce:	681b      	ldr	r3, [r3, #0]
 8016bd0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8016bd2:	68bb      	ldr	r3, [r7, #8]
 8016bd4:	691b      	ldr	r3, [r3, #16]
 8016bd6:	021a      	lsls	r2, r3, #8
 8016bd8:	68fb      	ldr	r3, [r7, #12]
 8016bda:	681b      	ldr	r3, [r3, #0]
 8016bdc:	430a      	orrs	r2, r1
 8016bde:	655a      	str	r2, [r3, #84]	@ 0x54
 8016be0:	e002      	b.n	8016be8 <HAL_TIM_PWM_ConfigChannel+0x214>
 8016be2:	2301      	movs	r3, #1
 8016be4:	75fb      	strb	r3, [r7, #23]
 8016be6:	bf00      	nop
 8016be8:	68fb      	ldr	r3, [r7, #12]
 8016bea:	2200      	movs	r2, #0
 8016bec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8016bf0:	7dfb      	ldrb	r3, [r7, #23]
 8016bf2:	4618      	mov	r0, r3
 8016bf4:	3718      	adds	r7, #24
 8016bf6:	46bd      	mov	sp, r7
 8016bf8:	bd80      	pop	{r7, pc}
 8016bfa:	bf00      	nop

08016bfc <HAL_TIM_ConfigClockSource>:
 8016bfc:	b580      	push	{r7, lr}
 8016bfe:	b084      	sub	sp, #16
 8016c00:	af00      	add	r7, sp, #0
 8016c02:	6078      	str	r0, [r7, #4]
 8016c04:	6039      	str	r1, [r7, #0]
 8016c06:	2300      	movs	r3, #0
 8016c08:	73fb      	strb	r3, [r7, #15]
 8016c0a:	687b      	ldr	r3, [r7, #4]
 8016c0c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8016c10:	2b01      	cmp	r3, #1
 8016c12:	d101      	bne.n	8016c18 <HAL_TIM_ConfigClockSource+0x1c>
 8016c14:	2302      	movs	r3, #2
 8016c16:	e0dc      	b.n	8016dd2 <HAL_TIM_ConfigClockSource+0x1d6>
 8016c18:	687b      	ldr	r3, [r7, #4]
 8016c1a:	2201      	movs	r2, #1
 8016c1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8016c20:	687b      	ldr	r3, [r7, #4]
 8016c22:	2202      	movs	r2, #2
 8016c24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8016c28:	687b      	ldr	r3, [r7, #4]
 8016c2a:	681b      	ldr	r3, [r3, #0]
 8016c2c:	689b      	ldr	r3, [r3, #8]
 8016c2e:	60bb      	str	r3, [r7, #8]
 8016c30:	68ba      	ldr	r2, [r7, #8]
 8016c32:	4b6a      	ldr	r3, [pc, #424]	@ (8016ddc <HAL_TIM_ConfigClockSource+0x1e0>)
 8016c34:	4013      	ands	r3, r2
 8016c36:	60bb      	str	r3, [r7, #8]
 8016c38:	68bb      	ldr	r3, [r7, #8]
 8016c3a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8016c3e:	60bb      	str	r3, [r7, #8]
 8016c40:	687b      	ldr	r3, [r7, #4]
 8016c42:	681b      	ldr	r3, [r3, #0]
 8016c44:	68ba      	ldr	r2, [r7, #8]
 8016c46:	609a      	str	r2, [r3, #8]
 8016c48:	683b      	ldr	r3, [r7, #0]
 8016c4a:	681b      	ldr	r3, [r3, #0]
 8016c4c:	4a64      	ldr	r2, [pc, #400]	@ (8016de0 <HAL_TIM_ConfigClockSource+0x1e4>)
 8016c4e:	4293      	cmp	r3, r2
 8016c50:	f000 80a9 	beq.w	8016da6 <HAL_TIM_ConfigClockSource+0x1aa>
 8016c54:	4a62      	ldr	r2, [pc, #392]	@ (8016de0 <HAL_TIM_ConfigClockSource+0x1e4>)
 8016c56:	4293      	cmp	r3, r2
 8016c58:	f200 80ae 	bhi.w	8016db8 <HAL_TIM_ConfigClockSource+0x1bc>
 8016c5c:	4a61      	ldr	r2, [pc, #388]	@ (8016de4 <HAL_TIM_ConfigClockSource+0x1e8>)
 8016c5e:	4293      	cmp	r3, r2
 8016c60:	f000 80a1 	beq.w	8016da6 <HAL_TIM_ConfigClockSource+0x1aa>
 8016c64:	4a5f      	ldr	r2, [pc, #380]	@ (8016de4 <HAL_TIM_ConfigClockSource+0x1e8>)
 8016c66:	4293      	cmp	r3, r2
 8016c68:	f200 80a6 	bhi.w	8016db8 <HAL_TIM_ConfigClockSource+0x1bc>
 8016c6c:	4a5e      	ldr	r2, [pc, #376]	@ (8016de8 <HAL_TIM_ConfigClockSource+0x1ec>)
 8016c6e:	4293      	cmp	r3, r2
 8016c70:	f000 8099 	beq.w	8016da6 <HAL_TIM_ConfigClockSource+0x1aa>
 8016c74:	4a5c      	ldr	r2, [pc, #368]	@ (8016de8 <HAL_TIM_ConfigClockSource+0x1ec>)
 8016c76:	4293      	cmp	r3, r2
 8016c78:	f200 809e 	bhi.w	8016db8 <HAL_TIM_ConfigClockSource+0x1bc>
 8016c7c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8016c80:	f000 8091 	beq.w	8016da6 <HAL_TIM_ConfigClockSource+0x1aa>
 8016c84:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8016c88:	f200 8096 	bhi.w	8016db8 <HAL_TIM_ConfigClockSource+0x1bc>
 8016c8c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8016c90:	f000 8089 	beq.w	8016da6 <HAL_TIM_ConfigClockSource+0x1aa>
 8016c94:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8016c98:	f200 808e 	bhi.w	8016db8 <HAL_TIM_ConfigClockSource+0x1bc>
 8016c9c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8016ca0:	d03e      	beq.n	8016d20 <HAL_TIM_ConfigClockSource+0x124>
 8016ca2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8016ca6:	f200 8087 	bhi.w	8016db8 <HAL_TIM_ConfigClockSource+0x1bc>
 8016caa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8016cae:	f000 8086 	beq.w	8016dbe <HAL_TIM_ConfigClockSource+0x1c2>
 8016cb2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8016cb6:	d87f      	bhi.n	8016db8 <HAL_TIM_ConfigClockSource+0x1bc>
 8016cb8:	2b70      	cmp	r3, #112	@ 0x70
 8016cba:	d01a      	beq.n	8016cf2 <HAL_TIM_ConfigClockSource+0xf6>
 8016cbc:	2b70      	cmp	r3, #112	@ 0x70
 8016cbe:	d87b      	bhi.n	8016db8 <HAL_TIM_ConfigClockSource+0x1bc>
 8016cc0:	2b60      	cmp	r3, #96	@ 0x60
 8016cc2:	d050      	beq.n	8016d66 <HAL_TIM_ConfigClockSource+0x16a>
 8016cc4:	2b60      	cmp	r3, #96	@ 0x60
 8016cc6:	d877      	bhi.n	8016db8 <HAL_TIM_ConfigClockSource+0x1bc>
 8016cc8:	2b50      	cmp	r3, #80	@ 0x50
 8016cca:	d03c      	beq.n	8016d46 <HAL_TIM_ConfigClockSource+0x14a>
 8016ccc:	2b50      	cmp	r3, #80	@ 0x50
 8016cce:	d873      	bhi.n	8016db8 <HAL_TIM_ConfigClockSource+0x1bc>
 8016cd0:	2b40      	cmp	r3, #64	@ 0x40
 8016cd2:	d058      	beq.n	8016d86 <HAL_TIM_ConfigClockSource+0x18a>
 8016cd4:	2b40      	cmp	r3, #64	@ 0x40
 8016cd6:	d86f      	bhi.n	8016db8 <HAL_TIM_ConfigClockSource+0x1bc>
 8016cd8:	2b30      	cmp	r3, #48	@ 0x30
 8016cda:	d064      	beq.n	8016da6 <HAL_TIM_ConfigClockSource+0x1aa>
 8016cdc:	2b30      	cmp	r3, #48	@ 0x30
 8016cde:	d86b      	bhi.n	8016db8 <HAL_TIM_ConfigClockSource+0x1bc>
 8016ce0:	2b20      	cmp	r3, #32
 8016ce2:	d060      	beq.n	8016da6 <HAL_TIM_ConfigClockSource+0x1aa>
 8016ce4:	2b20      	cmp	r3, #32
 8016ce6:	d867      	bhi.n	8016db8 <HAL_TIM_ConfigClockSource+0x1bc>
 8016ce8:	2b00      	cmp	r3, #0
 8016cea:	d05c      	beq.n	8016da6 <HAL_TIM_ConfigClockSource+0x1aa>
 8016cec:	2b10      	cmp	r3, #16
 8016cee:	d05a      	beq.n	8016da6 <HAL_TIM_ConfigClockSource+0x1aa>
 8016cf0:	e062      	b.n	8016db8 <HAL_TIM_ConfigClockSource+0x1bc>
 8016cf2:	687b      	ldr	r3, [r7, #4]
 8016cf4:	6818      	ldr	r0, [r3, #0]
 8016cf6:	683b      	ldr	r3, [r7, #0]
 8016cf8:	6899      	ldr	r1, [r3, #8]
 8016cfa:	683b      	ldr	r3, [r7, #0]
 8016cfc:	685a      	ldr	r2, [r3, #4]
 8016cfe:	683b      	ldr	r3, [r7, #0]
 8016d00:	68db      	ldr	r3, [r3, #12]
 8016d02:	f000 fdd7 	bl	80178b4 <TIM_ETR_SetConfig>
 8016d06:	687b      	ldr	r3, [r7, #4]
 8016d08:	681b      	ldr	r3, [r3, #0]
 8016d0a:	689b      	ldr	r3, [r3, #8]
 8016d0c:	60bb      	str	r3, [r7, #8]
 8016d0e:	68bb      	ldr	r3, [r7, #8]
 8016d10:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8016d14:	60bb      	str	r3, [r7, #8]
 8016d16:	687b      	ldr	r3, [r7, #4]
 8016d18:	681b      	ldr	r3, [r3, #0]
 8016d1a:	68ba      	ldr	r2, [r7, #8]
 8016d1c:	609a      	str	r2, [r3, #8]
 8016d1e:	e04f      	b.n	8016dc0 <HAL_TIM_ConfigClockSource+0x1c4>
 8016d20:	687b      	ldr	r3, [r7, #4]
 8016d22:	6818      	ldr	r0, [r3, #0]
 8016d24:	683b      	ldr	r3, [r7, #0]
 8016d26:	6899      	ldr	r1, [r3, #8]
 8016d28:	683b      	ldr	r3, [r7, #0]
 8016d2a:	685a      	ldr	r2, [r3, #4]
 8016d2c:	683b      	ldr	r3, [r7, #0]
 8016d2e:	68db      	ldr	r3, [r3, #12]
 8016d30:	f000 fdc0 	bl	80178b4 <TIM_ETR_SetConfig>
 8016d34:	687b      	ldr	r3, [r7, #4]
 8016d36:	681b      	ldr	r3, [r3, #0]
 8016d38:	689a      	ldr	r2, [r3, #8]
 8016d3a:	687b      	ldr	r3, [r7, #4]
 8016d3c:	681b      	ldr	r3, [r3, #0]
 8016d3e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8016d42:	609a      	str	r2, [r3, #8]
 8016d44:	e03c      	b.n	8016dc0 <HAL_TIM_ConfigClockSource+0x1c4>
 8016d46:	687b      	ldr	r3, [r7, #4]
 8016d48:	6818      	ldr	r0, [r3, #0]
 8016d4a:	683b      	ldr	r3, [r7, #0]
 8016d4c:	6859      	ldr	r1, [r3, #4]
 8016d4e:	683b      	ldr	r3, [r7, #0]
 8016d50:	68db      	ldr	r3, [r3, #12]
 8016d52:	461a      	mov	r2, r3
 8016d54:	f000 fc7a 	bl	801764c <TIM_TI1_ConfigInputStage>
 8016d58:	687b      	ldr	r3, [r7, #4]
 8016d5a:	681b      	ldr	r3, [r3, #0]
 8016d5c:	2150      	movs	r1, #80	@ 0x50
 8016d5e:	4618      	mov	r0, r3
 8016d60:	f000 fd8a 	bl	8017878 <TIM_ITRx_SetConfig>
 8016d64:	e02c      	b.n	8016dc0 <HAL_TIM_ConfigClockSource+0x1c4>
 8016d66:	687b      	ldr	r3, [r7, #4]
 8016d68:	6818      	ldr	r0, [r3, #0]
 8016d6a:	683b      	ldr	r3, [r7, #0]
 8016d6c:	6859      	ldr	r1, [r3, #4]
 8016d6e:	683b      	ldr	r3, [r7, #0]
 8016d70:	68db      	ldr	r3, [r3, #12]
 8016d72:	461a      	mov	r2, r3
 8016d74:	f000 fcd6 	bl	8017724 <TIM_TI2_ConfigInputStage>
 8016d78:	687b      	ldr	r3, [r7, #4]
 8016d7a:	681b      	ldr	r3, [r3, #0]
 8016d7c:	2160      	movs	r1, #96	@ 0x60
 8016d7e:	4618      	mov	r0, r3
 8016d80:	f000 fd7a 	bl	8017878 <TIM_ITRx_SetConfig>
 8016d84:	e01c      	b.n	8016dc0 <HAL_TIM_ConfigClockSource+0x1c4>
 8016d86:	687b      	ldr	r3, [r7, #4]
 8016d88:	6818      	ldr	r0, [r3, #0]
 8016d8a:	683b      	ldr	r3, [r7, #0]
 8016d8c:	6859      	ldr	r1, [r3, #4]
 8016d8e:	683b      	ldr	r3, [r7, #0]
 8016d90:	68db      	ldr	r3, [r3, #12]
 8016d92:	461a      	mov	r2, r3
 8016d94:	f000 fc5a 	bl	801764c <TIM_TI1_ConfigInputStage>
 8016d98:	687b      	ldr	r3, [r7, #4]
 8016d9a:	681b      	ldr	r3, [r3, #0]
 8016d9c:	2140      	movs	r1, #64	@ 0x40
 8016d9e:	4618      	mov	r0, r3
 8016da0:	f000 fd6a 	bl	8017878 <TIM_ITRx_SetConfig>
 8016da4:	e00c      	b.n	8016dc0 <HAL_TIM_ConfigClockSource+0x1c4>
 8016da6:	687b      	ldr	r3, [r7, #4]
 8016da8:	681a      	ldr	r2, [r3, #0]
 8016daa:	683b      	ldr	r3, [r7, #0]
 8016dac:	681b      	ldr	r3, [r3, #0]
 8016dae:	4619      	mov	r1, r3
 8016db0:	4610      	mov	r0, r2
 8016db2:	f000 fd61 	bl	8017878 <TIM_ITRx_SetConfig>
 8016db6:	e003      	b.n	8016dc0 <HAL_TIM_ConfigClockSource+0x1c4>
 8016db8:	2301      	movs	r3, #1
 8016dba:	73fb      	strb	r3, [r7, #15]
 8016dbc:	e000      	b.n	8016dc0 <HAL_TIM_ConfigClockSource+0x1c4>
 8016dbe:	bf00      	nop
 8016dc0:	687b      	ldr	r3, [r7, #4]
 8016dc2:	2201      	movs	r2, #1
 8016dc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8016dc8:	687b      	ldr	r3, [r7, #4]
 8016dca:	2200      	movs	r2, #0
 8016dcc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8016dd0:	7bfb      	ldrb	r3, [r7, #15]
 8016dd2:	4618      	mov	r0, r3
 8016dd4:	3710      	adds	r7, #16
 8016dd6:	46bd      	mov	sp, r7
 8016dd8:	bd80      	pop	{r7, pc}
 8016dda:	bf00      	nop
 8016ddc:	ffceff88 	.word	0xffceff88
 8016de0:	00100040 	.word	0x00100040
 8016de4:	00100030 	.word	0x00100030
 8016de8:	00100020 	.word	0x00100020

08016dec <HAL_TIM_OC_DelayElapsedCallback>:
 8016dec:	b480      	push	{r7}
 8016dee:	b083      	sub	sp, #12
 8016df0:	af00      	add	r7, sp, #0
 8016df2:	6078      	str	r0, [r7, #4]
 8016df4:	bf00      	nop
 8016df6:	370c      	adds	r7, #12
 8016df8:	46bd      	mov	sp, r7
 8016dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016dfe:	4770      	bx	lr

08016e00 <HAL_TIM_IC_CaptureCallback>:
 8016e00:	b480      	push	{r7}
 8016e02:	b083      	sub	sp, #12
 8016e04:	af00      	add	r7, sp, #0
 8016e06:	6078      	str	r0, [r7, #4]
 8016e08:	bf00      	nop
 8016e0a:	370c      	adds	r7, #12
 8016e0c:	46bd      	mov	sp, r7
 8016e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e12:	4770      	bx	lr

08016e14 <HAL_TIM_PWM_PulseFinishedCallback>:
 8016e14:	b480      	push	{r7}
 8016e16:	b083      	sub	sp, #12
 8016e18:	af00      	add	r7, sp, #0
 8016e1a:	6078      	str	r0, [r7, #4]
 8016e1c:	bf00      	nop
 8016e1e:	370c      	adds	r7, #12
 8016e20:	46bd      	mov	sp, r7
 8016e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e26:	4770      	bx	lr

08016e28 <HAL_TIM_TriggerCallback>:
 8016e28:	b480      	push	{r7}
 8016e2a:	b083      	sub	sp, #12
 8016e2c:	af00      	add	r7, sp, #0
 8016e2e:	6078      	str	r0, [r7, #4]
 8016e30:	bf00      	nop
 8016e32:	370c      	adds	r7, #12
 8016e34:	46bd      	mov	sp, r7
 8016e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e3a:	4770      	bx	lr

08016e3c <TIM_Base_SetConfig>:
 8016e3c:	b480      	push	{r7}
 8016e3e:	b085      	sub	sp, #20
 8016e40:	af00      	add	r7, sp, #0
 8016e42:	6078      	str	r0, [r7, #4]
 8016e44:	6039      	str	r1, [r7, #0]
 8016e46:	687b      	ldr	r3, [r7, #4]
 8016e48:	681b      	ldr	r3, [r3, #0]
 8016e4a:	60fb      	str	r3, [r7, #12]
 8016e4c:	687b      	ldr	r3, [r7, #4]
 8016e4e:	4a4a      	ldr	r2, [pc, #296]	@ (8016f78 <TIM_Base_SetConfig+0x13c>)
 8016e50:	4293      	cmp	r3, r2
 8016e52:	d013      	beq.n	8016e7c <TIM_Base_SetConfig+0x40>
 8016e54:	687b      	ldr	r3, [r7, #4]
 8016e56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8016e5a:	d00f      	beq.n	8016e7c <TIM_Base_SetConfig+0x40>
 8016e5c:	687b      	ldr	r3, [r7, #4]
 8016e5e:	4a47      	ldr	r2, [pc, #284]	@ (8016f7c <TIM_Base_SetConfig+0x140>)
 8016e60:	4293      	cmp	r3, r2
 8016e62:	d00b      	beq.n	8016e7c <TIM_Base_SetConfig+0x40>
 8016e64:	687b      	ldr	r3, [r7, #4]
 8016e66:	4a46      	ldr	r2, [pc, #280]	@ (8016f80 <TIM_Base_SetConfig+0x144>)
 8016e68:	4293      	cmp	r3, r2
 8016e6a:	d007      	beq.n	8016e7c <TIM_Base_SetConfig+0x40>
 8016e6c:	687b      	ldr	r3, [r7, #4]
 8016e6e:	4a45      	ldr	r2, [pc, #276]	@ (8016f84 <TIM_Base_SetConfig+0x148>)
 8016e70:	4293      	cmp	r3, r2
 8016e72:	d003      	beq.n	8016e7c <TIM_Base_SetConfig+0x40>
 8016e74:	687b      	ldr	r3, [r7, #4]
 8016e76:	4a44      	ldr	r2, [pc, #272]	@ (8016f88 <TIM_Base_SetConfig+0x14c>)
 8016e78:	4293      	cmp	r3, r2
 8016e7a:	d108      	bne.n	8016e8e <TIM_Base_SetConfig+0x52>
 8016e7c:	68fb      	ldr	r3, [r7, #12]
 8016e7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8016e82:	60fb      	str	r3, [r7, #12]
 8016e84:	683b      	ldr	r3, [r7, #0]
 8016e86:	685b      	ldr	r3, [r3, #4]
 8016e88:	68fa      	ldr	r2, [r7, #12]
 8016e8a:	4313      	orrs	r3, r2
 8016e8c:	60fb      	str	r3, [r7, #12]
 8016e8e:	687b      	ldr	r3, [r7, #4]
 8016e90:	4a39      	ldr	r2, [pc, #228]	@ (8016f78 <TIM_Base_SetConfig+0x13c>)
 8016e92:	4293      	cmp	r3, r2
 8016e94:	d027      	beq.n	8016ee6 <TIM_Base_SetConfig+0xaa>
 8016e96:	687b      	ldr	r3, [r7, #4]
 8016e98:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8016e9c:	d023      	beq.n	8016ee6 <TIM_Base_SetConfig+0xaa>
 8016e9e:	687b      	ldr	r3, [r7, #4]
 8016ea0:	4a36      	ldr	r2, [pc, #216]	@ (8016f7c <TIM_Base_SetConfig+0x140>)
 8016ea2:	4293      	cmp	r3, r2
 8016ea4:	d01f      	beq.n	8016ee6 <TIM_Base_SetConfig+0xaa>
 8016ea6:	687b      	ldr	r3, [r7, #4]
 8016ea8:	4a35      	ldr	r2, [pc, #212]	@ (8016f80 <TIM_Base_SetConfig+0x144>)
 8016eaa:	4293      	cmp	r3, r2
 8016eac:	d01b      	beq.n	8016ee6 <TIM_Base_SetConfig+0xaa>
 8016eae:	687b      	ldr	r3, [r7, #4]
 8016eb0:	4a34      	ldr	r2, [pc, #208]	@ (8016f84 <TIM_Base_SetConfig+0x148>)
 8016eb2:	4293      	cmp	r3, r2
 8016eb4:	d017      	beq.n	8016ee6 <TIM_Base_SetConfig+0xaa>
 8016eb6:	687b      	ldr	r3, [r7, #4]
 8016eb8:	4a33      	ldr	r2, [pc, #204]	@ (8016f88 <TIM_Base_SetConfig+0x14c>)
 8016eba:	4293      	cmp	r3, r2
 8016ebc:	d013      	beq.n	8016ee6 <TIM_Base_SetConfig+0xaa>
 8016ebe:	687b      	ldr	r3, [r7, #4]
 8016ec0:	4a32      	ldr	r2, [pc, #200]	@ (8016f8c <TIM_Base_SetConfig+0x150>)
 8016ec2:	4293      	cmp	r3, r2
 8016ec4:	d00f      	beq.n	8016ee6 <TIM_Base_SetConfig+0xaa>
 8016ec6:	687b      	ldr	r3, [r7, #4]
 8016ec8:	4a31      	ldr	r2, [pc, #196]	@ (8016f90 <TIM_Base_SetConfig+0x154>)
 8016eca:	4293      	cmp	r3, r2
 8016ecc:	d00b      	beq.n	8016ee6 <TIM_Base_SetConfig+0xaa>
 8016ece:	687b      	ldr	r3, [r7, #4]
 8016ed0:	4a30      	ldr	r2, [pc, #192]	@ (8016f94 <TIM_Base_SetConfig+0x158>)
 8016ed2:	4293      	cmp	r3, r2
 8016ed4:	d007      	beq.n	8016ee6 <TIM_Base_SetConfig+0xaa>
 8016ed6:	687b      	ldr	r3, [r7, #4]
 8016ed8:	4a2f      	ldr	r2, [pc, #188]	@ (8016f98 <TIM_Base_SetConfig+0x15c>)
 8016eda:	4293      	cmp	r3, r2
 8016edc:	d003      	beq.n	8016ee6 <TIM_Base_SetConfig+0xaa>
 8016ede:	687b      	ldr	r3, [r7, #4]
 8016ee0:	4a2e      	ldr	r2, [pc, #184]	@ (8016f9c <TIM_Base_SetConfig+0x160>)
 8016ee2:	4293      	cmp	r3, r2
 8016ee4:	d108      	bne.n	8016ef8 <TIM_Base_SetConfig+0xbc>
 8016ee6:	68fb      	ldr	r3, [r7, #12]
 8016ee8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8016eec:	60fb      	str	r3, [r7, #12]
 8016eee:	683b      	ldr	r3, [r7, #0]
 8016ef0:	68db      	ldr	r3, [r3, #12]
 8016ef2:	68fa      	ldr	r2, [r7, #12]
 8016ef4:	4313      	orrs	r3, r2
 8016ef6:	60fb      	str	r3, [r7, #12]
 8016ef8:	68fb      	ldr	r3, [r7, #12]
 8016efa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8016efe:	683b      	ldr	r3, [r7, #0]
 8016f00:	695b      	ldr	r3, [r3, #20]
 8016f02:	4313      	orrs	r3, r2
 8016f04:	60fb      	str	r3, [r7, #12]
 8016f06:	687b      	ldr	r3, [r7, #4]
 8016f08:	68fa      	ldr	r2, [r7, #12]
 8016f0a:	601a      	str	r2, [r3, #0]
 8016f0c:	683b      	ldr	r3, [r7, #0]
 8016f0e:	689a      	ldr	r2, [r3, #8]
 8016f10:	687b      	ldr	r3, [r7, #4]
 8016f12:	62da      	str	r2, [r3, #44]	@ 0x2c
 8016f14:	683b      	ldr	r3, [r7, #0]
 8016f16:	681a      	ldr	r2, [r3, #0]
 8016f18:	687b      	ldr	r3, [r7, #4]
 8016f1a:	629a      	str	r2, [r3, #40]	@ 0x28
 8016f1c:	687b      	ldr	r3, [r7, #4]
 8016f1e:	4a16      	ldr	r2, [pc, #88]	@ (8016f78 <TIM_Base_SetConfig+0x13c>)
 8016f20:	4293      	cmp	r3, r2
 8016f22:	d00f      	beq.n	8016f44 <TIM_Base_SetConfig+0x108>
 8016f24:	687b      	ldr	r3, [r7, #4]
 8016f26:	4a18      	ldr	r2, [pc, #96]	@ (8016f88 <TIM_Base_SetConfig+0x14c>)
 8016f28:	4293      	cmp	r3, r2
 8016f2a:	d00b      	beq.n	8016f44 <TIM_Base_SetConfig+0x108>
 8016f2c:	687b      	ldr	r3, [r7, #4]
 8016f2e:	4a17      	ldr	r2, [pc, #92]	@ (8016f8c <TIM_Base_SetConfig+0x150>)
 8016f30:	4293      	cmp	r3, r2
 8016f32:	d007      	beq.n	8016f44 <TIM_Base_SetConfig+0x108>
 8016f34:	687b      	ldr	r3, [r7, #4]
 8016f36:	4a16      	ldr	r2, [pc, #88]	@ (8016f90 <TIM_Base_SetConfig+0x154>)
 8016f38:	4293      	cmp	r3, r2
 8016f3a:	d003      	beq.n	8016f44 <TIM_Base_SetConfig+0x108>
 8016f3c:	687b      	ldr	r3, [r7, #4]
 8016f3e:	4a15      	ldr	r2, [pc, #84]	@ (8016f94 <TIM_Base_SetConfig+0x158>)
 8016f40:	4293      	cmp	r3, r2
 8016f42:	d103      	bne.n	8016f4c <TIM_Base_SetConfig+0x110>
 8016f44:	683b      	ldr	r3, [r7, #0]
 8016f46:	691a      	ldr	r2, [r3, #16]
 8016f48:	687b      	ldr	r3, [r7, #4]
 8016f4a:	631a      	str	r2, [r3, #48]	@ 0x30
 8016f4c:	687b      	ldr	r3, [r7, #4]
 8016f4e:	2201      	movs	r2, #1
 8016f50:	615a      	str	r2, [r3, #20]
 8016f52:	687b      	ldr	r3, [r7, #4]
 8016f54:	691b      	ldr	r3, [r3, #16]
 8016f56:	f003 0301 	and.w	r3, r3, #1
 8016f5a:	2b01      	cmp	r3, #1
 8016f5c:	d105      	bne.n	8016f6a <TIM_Base_SetConfig+0x12e>
 8016f5e:	687b      	ldr	r3, [r7, #4]
 8016f60:	691b      	ldr	r3, [r3, #16]
 8016f62:	f023 0201 	bic.w	r2, r3, #1
 8016f66:	687b      	ldr	r3, [r7, #4]
 8016f68:	611a      	str	r2, [r3, #16]
 8016f6a:	bf00      	nop
 8016f6c:	3714      	adds	r7, #20
 8016f6e:	46bd      	mov	sp, r7
 8016f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f74:	4770      	bx	lr
 8016f76:	bf00      	nop
 8016f78:	40010000 	.word	0x40010000
 8016f7c:	40000400 	.word	0x40000400
 8016f80:	40000800 	.word	0x40000800
 8016f84:	40000c00 	.word	0x40000c00
 8016f88:	40010400 	.word	0x40010400
 8016f8c:	40014000 	.word	0x40014000
 8016f90:	40014400 	.word	0x40014400
 8016f94:	40014800 	.word	0x40014800
 8016f98:	4000e000 	.word	0x4000e000
 8016f9c:	4000e400 	.word	0x4000e400

08016fa0 <TIM_OC1_SetConfig>:
 8016fa0:	b480      	push	{r7}
 8016fa2:	b087      	sub	sp, #28
 8016fa4:	af00      	add	r7, sp, #0
 8016fa6:	6078      	str	r0, [r7, #4]
 8016fa8:	6039      	str	r1, [r7, #0]
 8016faa:	687b      	ldr	r3, [r7, #4]
 8016fac:	6a1b      	ldr	r3, [r3, #32]
 8016fae:	617b      	str	r3, [r7, #20]
 8016fb0:	687b      	ldr	r3, [r7, #4]
 8016fb2:	6a1b      	ldr	r3, [r3, #32]
 8016fb4:	f023 0201 	bic.w	r2, r3, #1
 8016fb8:	687b      	ldr	r3, [r7, #4]
 8016fba:	621a      	str	r2, [r3, #32]
 8016fbc:	687b      	ldr	r3, [r7, #4]
 8016fbe:	685b      	ldr	r3, [r3, #4]
 8016fc0:	613b      	str	r3, [r7, #16]
 8016fc2:	687b      	ldr	r3, [r7, #4]
 8016fc4:	699b      	ldr	r3, [r3, #24]
 8016fc6:	60fb      	str	r3, [r7, #12]
 8016fc8:	68fa      	ldr	r2, [r7, #12]
 8016fca:	4b37      	ldr	r3, [pc, #220]	@ (80170a8 <TIM_OC1_SetConfig+0x108>)
 8016fcc:	4013      	ands	r3, r2
 8016fce:	60fb      	str	r3, [r7, #12]
 8016fd0:	68fb      	ldr	r3, [r7, #12]
 8016fd2:	f023 0303 	bic.w	r3, r3, #3
 8016fd6:	60fb      	str	r3, [r7, #12]
 8016fd8:	683b      	ldr	r3, [r7, #0]
 8016fda:	681b      	ldr	r3, [r3, #0]
 8016fdc:	68fa      	ldr	r2, [r7, #12]
 8016fde:	4313      	orrs	r3, r2
 8016fe0:	60fb      	str	r3, [r7, #12]
 8016fe2:	697b      	ldr	r3, [r7, #20]
 8016fe4:	f023 0302 	bic.w	r3, r3, #2
 8016fe8:	617b      	str	r3, [r7, #20]
 8016fea:	683b      	ldr	r3, [r7, #0]
 8016fec:	689b      	ldr	r3, [r3, #8]
 8016fee:	697a      	ldr	r2, [r7, #20]
 8016ff0:	4313      	orrs	r3, r2
 8016ff2:	617b      	str	r3, [r7, #20]
 8016ff4:	687b      	ldr	r3, [r7, #4]
 8016ff6:	4a2d      	ldr	r2, [pc, #180]	@ (80170ac <TIM_OC1_SetConfig+0x10c>)
 8016ff8:	4293      	cmp	r3, r2
 8016ffa:	d00f      	beq.n	801701c <TIM_OC1_SetConfig+0x7c>
 8016ffc:	687b      	ldr	r3, [r7, #4]
 8016ffe:	4a2c      	ldr	r2, [pc, #176]	@ (80170b0 <TIM_OC1_SetConfig+0x110>)
 8017000:	4293      	cmp	r3, r2
 8017002:	d00b      	beq.n	801701c <TIM_OC1_SetConfig+0x7c>
 8017004:	687b      	ldr	r3, [r7, #4]
 8017006:	4a2b      	ldr	r2, [pc, #172]	@ (80170b4 <TIM_OC1_SetConfig+0x114>)
 8017008:	4293      	cmp	r3, r2
 801700a:	d007      	beq.n	801701c <TIM_OC1_SetConfig+0x7c>
 801700c:	687b      	ldr	r3, [r7, #4]
 801700e:	4a2a      	ldr	r2, [pc, #168]	@ (80170b8 <TIM_OC1_SetConfig+0x118>)
 8017010:	4293      	cmp	r3, r2
 8017012:	d003      	beq.n	801701c <TIM_OC1_SetConfig+0x7c>
 8017014:	687b      	ldr	r3, [r7, #4]
 8017016:	4a29      	ldr	r2, [pc, #164]	@ (80170bc <TIM_OC1_SetConfig+0x11c>)
 8017018:	4293      	cmp	r3, r2
 801701a:	d10c      	bne.n	8017036 <TIM_OC1_SetConfig+0x96>
 801701c:	697b      	ldr	r3, [r7, #20]
 801701e:	f023 0308 	bic.w	r3, r3, #8
 8017022:	617b      	str	r3, [r7, #20]
 8017024:	683b      	ldr	r3, [r7, #0]
 8017026:	68db      	ldr	r3, [r3, #12]
 8017028:	697a      	ldr	r2, [r7, #20]
 801702a:	4313      	orrs	r3, r2
 801702c:	617b      	str	r3, [r7, #20]
 801702e:	697b      	ldr	r3, [r7, #20]
 8017030:	f023 0304 	bic.w	r3, r3, #4
 8017034:	617b      	str	r3, [r7, #20]
 8017036:	687b      	ldr	r3, [r7, #4]
 8017038:	4a1c      	ldr	r2, [pc, #112]	@ (80170ac <TIM_OC1_SetConfig+0x10c>)
 801703a:	4293      	cmp	r3, r2
 801703c:	d00f      	beq.n	801705e <TIM_OC1_SetConfig+0xbe>
 801703e:	687b      	ldr	r3, [r7, #4]
 8017040:	4a1b      	ldr	r2, [pc, #108]	@ (80170b0 <TIM_OC1_SetConfig+0x110>)
 8017042:	4293      	cmp	r3, r2
 8017044:	d00b      	beq.n	801705e <TIM_OC1_SetConfig+0xbe>
 8017046:	687b      	ldr	r3, [r7, #4]
 8017048:	4a1a      	ldr	r2, [pc, #104]	@ (80170b4 <TIM_OC1_SetConfig+0x114>)
 801704a:	4293      	cmp	r3, r2
 801704c:	d007      	beq.n	801705e <TIM_OC1_SetConfig+0xbe>
 801704e:	687b      	ldr	r3, [r7, #4]
 8017050:	4a19      	ldr	r2, [pc, #100]	@ (80170b8 <TIM_OC1_SetConfig+0x118>)
 8017052:	4293      	cmp	r3, r2
 8017054:	d003      	beq.n	801705e <TIM_OC1_SetConfig+0xbe>
 8017056:	687b      	ldr	r3, [r7, #4]
 8017058:	4a18      	ldr	r2, [pc, #96]	@ (80170bc <TIM_OC1_SetConfig+0x11c>)
 801705a:	4293      	cmp	r3, r2
 801705c:	d111      	bne.n	8017082 <TIM_OC1_SetConfig+0xe2>
 801705e:	693b      	ldr	r3, [r7, #16]
 8017060:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8017064:	613b      	str	r3, [r7, #16]
 8017066:	693b      	ldr	r3, [r7, #16]
 8017068:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 801706c:	613b      	str	r3, [r7, #16]
 801706e:	683b      	ldr	r3, [r7, #0]
 8017070:	695b      	ldr	r3, [r3, #20]
 8017072:	693a      	ldr	r2, [r7, #16]
 8017074:	4313      	orrs	r3, r2
 8017076:	613b      	str	r3, [r7, #16]
 8017078:	683b      	ldr	r3, [r7, #0]
 801707a:	699b      	ldr	r3, [r3, #24]
 801707c:	693a      	ldr	r2, [r7, #16]
 801707e:	4313      	orrs	r3, r2
 8017080:	613b      	str	r3, [r7, #16]
 8017082:	687b      	ldr	r3, [r7, #4]
 8017084:	693a      	ldr	r2, [r7, #16]
 8017086:	605a      	str	r2, [r3, #4]
 8017088:	687b      	ldr	r3, [r7, #4]
 801708a:	68fa      	ldr	r2, [r7, #12]
 801708c:	619a      	str	r2, [r3, #24]
 801708e:	683b      	ldr	r3, [r7, #0]
 8017090:	685a      	ldr	r2, [r3, #4]
 8017092:	687b      	ldr	r3, [r7, #4]
 8017094:	635a      	str	r2, [r3, #52]	@ 0x34
 8017096:	687b      	ldr	r3, [r7, #4]
 8017098:	697a      	ldr	r2, [r7, #20]
 801709a:	621a      	str	r2, [r3, #32]
 801709c:	bf00      	nop
 801709e:	371c      	adds	r7, #28
 80170a0:	46bd      	mov	sp, r7
 80170a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170a6:	4770      	bx	lr
 80170a8:	fffeff8f 	.word	0xfffeff8f
 80170ac:	40010000 	.word	0x40010000
 80170b0:	40010400 	.word	0x40010400
 80170b4:	40014000 	.word	0x40014000
 80170b8:	40014400 	.word	0x40014400
 80170bc:	40014800 	.word	0x40014800

080170c0 <TIM_OC2_SetConfig>:
 80170c0:	b480      	push	{r7}
 80170c2:	b087      	sub	sp, #28
 80170c4:	af00      	add	r7, sp, #0
 80170c6:	6078      	str	r0, [r7, #4]
 80170c8:	6039      	str	r1, [r7, #0]
 80170ca:	687b      	ldr	r3, [r7, #4]
 80170cc:	6a1b      	ldr	r3, [r3, #32]
 80170ce:	617b      	str	r3, [r7, #20]
 80170d0:	687b      	ldr	r3, [r7, #4]
 80170d2:	6a1b      	ldr	r3, [r3, #32]
 80170d4:	f023 0210 	bic.w	r2, r3, #16
 80170d8:	687b      	ldr	r3, [r7, #4]
 80170da:	621a      	str	r2, [r3, #32]
 80170dc:	687b      	ldr	r3, [r7, #4]
 80170de:	685b      	ldr	r3, [r3, #4]
 80170e0:	613b      	str	r3, [r7, #16]
 80170e2:	687b      	ldr	r3, [r7, #4]
 80170e4:	699b      	ldr	r3, [r3, #24]
 80170e6:	60fb      	str	r3, [r7, #12]
 80170e8:	68fa      	ldr	r2, [r7, #12]
 80170ea:	4b34      	ldr	r3, [pc, #208]	@ (80171bc <TIM_OC2_SetConfig+0xfc>)
 80170ec:	4013      	ands	r3, r2
 80170ee:	60fb      	str	r3, [r7, #12]
 80170f0:	68fb      	ldr	r3, [r7, #12]
 80170f2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80170f6:	60fb      	str	r3, [r7, #12]
 80170f8:	683b      	ldr	r3, [r7, #0]
 80170fa:	681b      	ldr	r3, [r3, #0]
 80170fc:	021b      	lsls	r3, r3, #8
 80170fe:	68fa      	ldr	r2, [r7, #12]
 8017100:	4313      	orrs	r3, r2
 8017102:	60fb      	str	r3, [r7, #12]
 8017104:	697b      	ldr	r3, [r7, #20]
 8017106:	f023 0320 	bic.w	r3, r3, #32
 801710a:	617b      	str	r3, [r7, #20]
 801710c:	683b      	ldr	r3, [r7, #0]
 801710e:	689b      	ldr	r3, [r3, #8]
 8017110:	011b      	lsls	r3, r3, #4
 8017112:	697a      	ldr	r2, [r7, #20]
 8017114:	4313      	orrs	r3, r2
 8017116:	617b      	str	r3, [r7, #20]
 8017118:	687b      	ldr	r3, [r7, #4]
 801711a:	4a29      	ldr	r2, [pc, #164]	@ (80171c0 <TIM_OC2_SetConfig+0x100>)
 801711c:	4293      	cmp	r3, r2
 801711e:	d003      	beq.n	8017128 <TIM_OC2_SetConfig+0x68>
 8017120:	687b      	ldr	r3, [r7, #4]
 8017122:	4a28      	ldr	r2, [pc, #160]	@ (80171c4 <TIM_OC2_SetConfig+0x104>)
 8017124:	4293      	cmp	r3, r2
 8017126:	d10d      	bne.n	8017144 <TIM_OC2_SetConfig+0x84>
 8017128:	697b      	ldr	r3, [r7, #20]
 801712a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801712e:	617b      	str	r3, [r7, #20]
 8017130:	683b      	ldr	r3, [r7, #0]
 8017132:	68db      	ldr	r3, [r3, #12]
 8017134:	011b      	lsls	r3, r3, #4
 8017136:	697a      	ldr	r2, [r7, #20]
 8017138:	4313      	orrs	r3, r2
 801713a:	617b      	str	r3, [r7, #20]
 801713c:	697b      	ldr	r3, [r7, #20]
 801713e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8017142:	617b      	str	r3, [r7, #20]
 8017144:	687b      	ldr	r3, [r7, #4]
 8017146:	4a1e      	ldr	r2, [pc, #120]	@ (80171c0 <TIM_OC2_SetConfig+0x100>)
 8017148:	4293      	cmp	r3, r2
 801714a:	d00f      	beq.n	801716c <TIM_OC2_SetConfig+0xac>
 801714c:	687b      	ldr	r3, [r7, #4]
 801714e:	4a1d      	ldr	r2, [pc, #116]	@ (80171c4 <TIM_OC2_SetConfig+0x104>)
 8017150:	4293      	cmp	r3, r2
 8017152:	d00b      	beq.n	801716c <TIM_OC2_SetConfig+0xac>
 8017154:	687b      	ldr	r3, [r7, #4]
 8017156:	4a1c      	ldr	r2, [pc, #112]	@ (80171c8 <TIM_OC2_SetConfig+0x108>)
 8017158:	4293      	cmp	r3, r2
 801715a:	d007      	beq.n	801716c <TIM_OC2_SetConfig+0xac>
 801715c:	687b      	ldr	r3, [r7, #4]
 801715e:	4a1b      	ldr	r2, [pc, #108]	@ (80171cc <TIM_OC2_SetConfig+0x10c>)
 8017160:	4293      	cmp	r3, r2
 8017162:	d003      	beq.n	801716c <TIM_OC2_SetConfig+0xac>
 8017164:	687b      	ldr	r3, [r7, #4]
 8017166:	4a1a      	ldr	r2, [pc, #104]	@ (80171d0 <TIM_OC2_SetConfig+0x110>)
 8017168:	4293      	cmp	r3, r2
 801716a:	d113      	bne.n	8017194 <TIM_OC2_SetConfig+0xd4>
 801716c:	693b      	ldr	r3, [r7, #16]
 801716e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8017172:	613b      	str	r3, [r7, #16]
 8017174:	693b      	ldr	r3, [r7, #16]
 8017176:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 801717a:	613b      	str	r3, [r7, #16]
 801717c:	683b      	ldr	r3, [r7, #0]
 801717e:	695b      	ldr	r3, [r3, #20]
 8017180:	009b      	lsls	r3, r3, #2
 8017182:	693a      	ldr	r2, [r7, #16]
 8017184:	4313      	orrs	r3, r2
 8017186:	613b      	str	r3, [r7, #16]
 8017188:	683b      	ldr	r3, [r7, #0]
 801718a:	699b      	ldr	r3, [r3, #24]
 801718c:	009b      	lsls	r3, r3, #2
 801718e:	693a      	ldr	r2, [r7, #16]
 8017190:	4313      	orrs	r3, r2
 8017192:	613b      	str	r3, [r7, #16]
 8017194:	687b      	ldr	r3, [r7, #4]
 8017196:	693a      	ldr	r2, [r7, #16]
 8017198:	605a      	str	r2, [r3, #4]
 801719a:	687b      	ldr	r3, [r7, #4]
 801719c:	68fa      	ldr	r2, [r7, #12]
 801719e:	619a      	str	r2, [r3, #24]
 80171a0:	683b      	ldr	r3, [r7, #0]
 80171a2:	685a      	ldr	r2, [r3, #4]
 80171a4:	687b      	ldr	r3, [r7, #4]
 80171a6:	639a      	str	r2, [r3, #56]	@ 0x38
 80171a8:	687b      	ldr	r3, [r7, #4]
 80171aa:	697a      	ldr	r2, [r7, #20]
 80171ac:	621a      	str	r2, [r3, #32]
 80171ae:	bf00      	nop
 80171b0:	371c      	adds	r7, #28
 80171b2:	46bd      	mov	sp, r7
 80171b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171b8:	4770      	bx	lr
 80171ba:	bf00      	nop
 80171bc:	feff8fff 	.word	0xfeff8fff
 80171c0:	40010000 	.word	0x40010000
 80171c4:	40010400 	.word	0x40010400
 80171c8:	40014000 	.word	0x40014000
 80171cc:	40014400 	.word	0x40014400
 80171d0:	40014800 	.word	0x40014800

080171d4 <TIM_OC3_SetConfig>:
 80171d4:	b480      	push	{r7}
 80171d6:	b087      	sub	sp, #28
 80171d8:	af00      	add	r7, sp, #0
 80171da:	6078      	str	r0, [r7, #4]
 80171dc:	6039      	str	r1, [r7, #0]
 80171de:	687b      	ldr	r3, [r7, #4]
 80171e0:	6a1b      	ldr	r3, [r3, #32]
 80171e2:	617b      	str	r3, [r7, #20]
 80171e4:	687b      	ldr	r3, [r7, #4]
 80171e6:	6a1b      	ldr	r3, [r3, #32]
 80171e8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80171ec:	687b      	ldr	r3, [r7, #4]
 80171ee:	621a      	str	r2, [r3, #32]
 80171f0:	687b      	ldr	r3, [r7, #4]
 80171f2:	685b      	ldr	r3, [r3, #4]
 80171f4:	613b      	str	r3, [r7, #16]
 80171f6:	687b      	ldr	r3, [r7, #4]
 80171f8:	69db      	ldr	r3, [r3, #28]
 80171fa:	60fb      	str	r3, [r7, #12]
 80171fc:	68fa      	ldr	r2, [r7, #12]
 80171fe:	4b33      	ldr	r3, [pc, #204]	@ (80172cc <TIM_OC3_SetConfig+0xf8>)
 8017200:	4013      	ands	r3, r2
 8017202:	60fb      	str	r3, [r7, #12]
 8017204:	68fb      	ldr	r3, [r7, #12]
 8017206:	f023 0303 	bic.w	r3, r3, #3
 801720a:	60fb      	str	r3, [r7, #12]
 801720c:	683b      	ldr	r3, [r7, #0]
 801720e:	681b      	ldr	r3, [r3, #0]
 8017210:	68fa      	ldr	r2, [r7, #12]
 8017212:	4313      	orrs	r3, r2
 8017214:	60fb      	str	r3, [r7, #12]
 8017216:	697b      	ldr	r3, [r7, #20]
 8017218:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 801721c:	617b      	str	r3, [r7, #20]
 801721e:	683b      	ldr	r3, [r7, #0]
 8017220:	689b      	ldr	r3, [r3, #8]
 8017222:	021b      	lsls	r3, r3, #8
 8017224:	697a      	ldr	r2, [r7, #20]
 8017226:	4313      	orrs	r3, r2
 8017228:	617b      	str	r3, [r7, #20]
 801722a:	687b      	ldr	r3, [r7, #4]
 801722c:	4a28      	ldr	r2, [pc, #160]	@ (80172d0 <TIM_OC3_SetConfig+0xfc>)
 801722e:	4293      	cmp	r3, r2
 8017230:	d003      	beq.n	801723a <TIM_OC3_SetConfig+0x66>
 8017232:	687b      	ldr	r3, [r7, #4]
 8017234:	4a27      	ldr	r2, [pc, #156]	@ (80172d4 <TIM_OC3_SetConfig+0x100>)
 8017236:	4293      	cmp	r3, r2
 8017238:	d10d      	bne.n	8017256 <TIM_OC3_SetConfig+0x82>
 801723a:	697b      	ldr	r3, [r7, #20]
 801723c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8017240:	617b      	str	r3, [r7, #20]
 8017242:	683b      	ldr	r3, [r7, #0]
 8017244:	68db      	ldr	r3, [r3, #12]
 8017246:	021b      	lsls	r3, r3, #8
 8017248:	697a      	ldr	r2, [r7, #20]
 801724a:	4313      	orrs	r3, r2
 801724c:	617b      	str	r3, [r7, #20]
 801724e:	697b      	ldr	r3, [r7, #20]
 8017250:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8017254:	617b      	str	r3, [r7, #20]
 8017256:	687b      	ldr	r3, [r7, #4]
 8017258:	4a1d      	ldr	r2, [pc, #116]	@ (80172d0 <TIM_OC3_SetConfig+0xfc>)
 801725a:	4293      	cmp	r3, r2
 801725c:	d00f      	beq.n	801727e <TIM_OC3_SetConfig+0xaa>
 801725e:	687b      	ldr	r3, [r7, #4]
 8017260:	4a1c      	ldr	r2, [pc, #112]	@ (80172d4 <TIM_OC3_SetConfig+0x100>)
 8017262:	4293      	cmp	r3, r2
 8017264:	d00b      	beq.n	801727e <TIM_OC3_SetConfig+0xaa>
 8017266:	687b      	ldr	r3, [r7, #4]
 8017268:	4a1b      	ldr	r2, [pc, #108]	@ (80172d8 <TIM_OC3_SetConfig+0x104>)
 801726a:	4293      	cmp	r3, r2
 801726c:	d007      	beq.n	801727e <TIM_OC3_SetConfig+0xaa>
 801726e:	687b      	ldr	r3, [r7, #4]
 8017270:	4a1a      	ldr	r2, [pc, #104]	@ (80172dc <TIM_OC3_SetConfig+0x108>)
 8017272:	4293      	cmp	r3, r2
 8017274:	d003      	beq.n	801727e <TIM_OC3_SetConfig+0xaa>
 8017276:	687b      	ldr	r3, [r7, #4]
 8017278:	4a19      	ldr	r2, [pc, #100]	@ (80172e0 <TIM_OC3_SetConfig+0x10c>)
 801727a:	4293      	cmp	r3, r2
 801727c:	d113      	bne.n	80172a6 <TIM_OC3_SetConfig+0xd2>
 801727e:	693b      	ldr	r3, [r7, #16]
 8017280:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8017284:	613b      	str	r3, [r7, #16]
 8017286:	693b      	ldr	r3, [r7, #16]
 8017288:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 801728c:	613b      	str	r3, [r7, #16]
 801728e:	683b      	ldr	r3, [r7, #0]
 8017290:	695b      	ldr	r3, [r3, #20]
 8017292:	011b      	lsls	r3, r3, #4
 8017294:	693a      	ldr	r2, [r7, #16]
 8017296:	4313      	orrs	r3, r2
 8017298:	613b      	str	r3, [r7, #16]
 801729a:	683b      	ldr	r3, [r7, #0]
 801729c:	699b      	ldr	r3, [r3, #24]
 801729e:	011b      	lsls	r3, r3, #4
 80172a0:	693a      	ldr	r2, [r7, #16]
 80172a2:	4313      	orrs	r3, r2
 80172a4:	613b      	str	r3, [r7, #16]
 80172a6:	687b      	ldr	r3, [r7, #4]
 80172a8:	693a      	ldr	r2, [r7, #16]
 80172aa:	605a      	str	r2, [r3, #4]
 80172ac:	687b      	ldr	r3, [r7, #4]
 80172ae:	68fa      	ldr	r2, [r7, #12]
 80172b0:	61da      	str	r2, [r3, #28]
 80172b2:	683b      	ldr	r3, [r7, #0]
 80172b4:	685a      	ldr	r2, [r3, #4]
 80172b6:	687b      	ldr	r3, [r7, #4]
 80172b8:	63da      	str	r2, [r3, #60]	@ 0x3c
 80172ba:	687b      	ldr	r3, [r7, #4]
 80172bc:	697a      	ldr	r2, [r7, #20]
 80172be:	621a      	str	r2, [r3, #32]
 80172c0:	bf00      	nop
 80172c2:	371c      	adds	r7, #28
 80172c4:	46bd      	mov	sp, r7
 80172c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172ca:	4770      	bx	lr
 80172cc:	fffeff8f 	.word	0xfffeff8f
 80172d0:	40010000 	.word	0x40010000
 80172d4:	40010400 	.word	0x40010400
 80172d8:	40014000 	.word	0x40014000
 80172dc:	40014400 	.word	0x40014400
 80172e0:	40014800 	.word	0x40014800

080172e4 <TIM_OC4_SetConfig>:
 80172e4:	b480      	push	{r7}
 80172e6:	b087      	sub	sp, #28
 80172e8:	af00      	add	r7, sp, #0
 80172ea:	6078      	str	r0, [r7, #4]
 80172ec:	6039      	str	r1, [r7, #0]
 80172ee:	687b      	ldr	r3, [r7, #4]
 80172f0:	6a1b      	ldr	r3, [r3, #32]
 80172f2:	613b      	str	r3, [r7, #16]
 80172f4:	687b      	ldr	r3, [r7, #4]
 80172f6:	6a1b      	ldr	r3, [r3, #32]
 80172f8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80172fc:	687b      	ldr	r3, [r7, #4]
 80172fe:	621a      	str	r2, [r3, #32]
 8017300:	687b      	ldr	r3, [r7, #4]
 8017302:	685b      	ldr	r3, [r3, #4]
 8017304:	617b      	str	r3, [r7, #20]
 8017306:	687b      	ldr	r3, [r7, #4]
 8017308:	69db      	ldr	r3, [r3, #28]
 801730a:	60fb      	str	r3, [r7, #12]
 801730c:	68fa      	ldr	r2, [r7, #12]
 801730e:	4b24      	ldr	r3, [pc, #144]	@ (80173a0 <TIM_OC4_SetConfig+0xbc>)
 8017310:	4013      	ands	r3, r2
 8017312:	60fb      	str	r3, [r7, #12]
 8017314:	68fb      	ldr	r3, [r7, #12]
 8017316:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 801731a:	60fb      	str	r3, [r7, #12]
 801731c:	683b      	ldr	r3, [r7, #0]
 801731e:	681b      	ldr	r3, [r3, #0]
 8017320:	021b      	lsls	r3, r3, #8
 8017322:	68fa      	ldr	r2, [r7, #12]
 8017324:	4313      	orrs	r3, r2
 8017326:	60fb      	str	r3, [r7, #12]
 8017328:	693b      	ldr	r3, [r7, #16]
 801732a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 801732e:	613b      	str	r3, [r7, #16]
 8017330:	683b      	ldr	r3, [r7, #0]
 8017332:	689b      	ldr	r3, [r3, #8]
 8017334:	031b      	lsls	r3, r3, #12
 8017336:	693a      	ldr	r2, [r7, #16]
 8017338:	4313      	orrs	r3, r2
 801733a:	613b      	str	r3, [r7, #16]
 801733c:	687b      	ldr	r3, [r7, #4]
 801733e:	4a19      	ldr	r2, [pc, #100]	@ (80173a4 <TIM_OC4_SetConfig+0xc0>)
 8017340:	4293      	cmp	r3, r2
 8017342:	d00f      	beq.n	8017364 <TIM_OC4_SetConfig+0x80>
 8017344:	687b      	ldr	r3, [r7, #4]
 8017346:	4a18      	ldr	r2, [pc, #96]	@ (80173a8 <TIM_OC4_SetConfig+0xc4>)
 8017348:	4293      	cmp	r3, r2
 801734a:	d00b      	beq.n	8017364 <TIM_OC4_SetConfig+0x80>
 801734c:	687b      	ldr	r3, [r7, #4]
 801734e:	4a17      	ldr	r2, [pc, #92]	@ (80173ac <TIM_OC4_SetConfig+0xc8>)
 8017350:	4293      	cmp	r3, r2
 8017352:	d007      	beq.n	8017364 <TIM_OC4_SetConfig+0x80>
 8017354:	687b      	ldr	r3, [r7, #4]
 8017356:	4a16      	ldr	r2, [pc, #88]	@ (80173b0 <TIM_OC4_SetConfig+0xcc>)
 8017358:	4293      	cmp	r3, r2
 801735a:	d003      	beq.n	8017364 <TIM_OC4_SetConfig+0x80>
 801735c:	687b      	ldr	r3, [r7, #4]
 801735e:	4a15      	ldr	r2, [pc, #84]	@ (80173b4 <TIM_OC4_SetConfig+0xd0>)
 8017360:	4293      	cmp	r3, r2
 8017362:	d109      	bne.n	8017378 <TIM_OC4_SetConfig+0x94>
 8017364:	697b      	ldr	r3, [r7, #20]
 8017366:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 801736a:	617b      	str	r3, [r7, #20]
 801736c:	683b      	ldr	r3, [r7, #0]
 801736e:	695b      	ldr	r3, [r3, #20]
 8017370:	019b      	lsls	r3, r3, #6
 8017372:	697a      	ldr	r2, [r7, #20]
 8017374:	4313      	orrs	r3, r2
 8017376:	617b      	str	r3, [r7, #20]
 8017378:	687b      	ldr	r3, [r7, #4]
 801737a:	697a      	ldr	r2, [r7, #20]
 801737c:	605a      	str	r2, [r3, #4]
 801737e:	687b      	ldr	r3, [r7, #4]
 8017380:	68fa      	ldr	r2, [r7, #12]
 8017382:	61da      	str	r2, [r3, #28]
 8017384:	683b      	ldr	r3, [r7, #0]
 8017386:	685a      	ldr	r2, [r3, #4]
 8017388:	687b      	ldr	r3, [r7, #4]
 801738a:	641a      	str	r2, [r3, #64]	@ 0x40
 801738c:	687b      	ldr	r3, [r7, #4]
 801738e:	693a      	ldr	r2, [r7, #16]
 8017390:	621a      	str	r2, [r3, #32]
 8017392:	bf00      	nop
 8017394:	371c      	adds	r7, #28
 8017396:	46bd      	mov	sp, r7
 8017398:	f85d 7b04 	ldr.w	r7, [sp], #4
 801739c:	4770      	bx	lr
 801739e:	bf00      	nop
 80173a0:	feff8fff 	.word	0xfeff8fff
 80173a4:	40010000 	.word	0x40010000
 80173a8:	40010400 	.word	0x40010400
 80173ac:	40014000 	.word	0x40014000
 80173b0:	40014400 	.word	0x40014400
 80173b4:	40014800 	.word	0x40014800

080173b8 <TIM_OC5_SetConfig>:
 80173b8:	b480      	push	{r7}
 80173ba:	b087      	sub	sp, #28
 80173bc:	af00      	add	r7, sp, #0
 80173be:	6078      	str	r0, [r7, #4]
 80173c0:	6039      	str	r1, [r7, #0]
 80173c2:	687b      	ldr	r3, [r7, #4]
 80173c4:	6a1b      	ldr	r3, [r3, #32]
 80173c6:	613b      	str	r3, [r7, #16]
 80173c8:	687b      	ldr	r3, [r7, #4]
 80173ca:	6a1b      	ldr	r3, [r3, #32]
 80173cc:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80173d0:	687b      	ldr	r3, [r7, #4]
 80173d2:	621a      	str	r2, [r3, #32]
 80173d4:	687b      	ldr	r3, [r7, #4]
 80173d6:	685b      	ldr	r3, [r3, #4]
 80173d8:	617b      	str	r3, [r7, #20]
 80173da:	687b      	ldr	r3, [r7, #4]
 80173dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80173de:	60fb      	str	r3, [r7, #12]
 80173e0:	68fa      	ldr	r2, [r7, #12]
 80173e2:	4b21      	ldr	r3, [pc, #132]	@ (8017468 <TIM_OC5_SetConfig+0xb0>)
 80173e4:	4013      	ands	r3, r2
 80173e6:	60fb      	str	r3, [r7, #12]
 80173e8:	683b      	ldr	r3, [r7, #0]
 80173ea:	681b      	ldr	r3, [r3, #0]
 80173ec:	68fa      	ldr	r2, [r7, #12]
 80173ee:	4313      	orrs	r3, r2
 80173f0:	60fb      	str	r3, [r7, #12]
 80173f2:	693b      	ldr	r3, [r7, #16]
 80173f4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80173f8:	613b      	str	r3, [r7, #16]
 80173fa:	683b      	ldr	r3, [r7, #0]
 80173fc:	689b      	ldr	r3, [r3, #8]
 80173fe:	041b      	lsls	r3, r3, #16
 8017400:	693a      	ldr	r2, [r7, #16]
 8017402:	4313      	orrs	r3, r2
 8017404:	613b      	str	r3, [r7, #16]
 8017406:	687b      	ldr	r3, [r7, #4]
 8017408:	4a18      	ldr	r2, [pc, #96]	@ (801746c <TIM_OC5_SetConfig+0xb4>)
 801740a:	4293      	cmp	r3, r2
 801740c:	d00f      	beq.n	801742e <TIM_OC5_SetConfig+0x76>
 801740e:	687b      	ldr	r3, [r7, #4]
 8017410:	4a17      	ldr	r2, [pc, #92]	@ (8017470 <TIM_OC5_SetConfig+0xb8>)
 8017412:	4293      	cmp	r3, r2
 8017414:	d00b      	beq.n	801742e <TIM_OC5_SetConfig+0x76>
 8017416:	687b      	ldr	r3, [r7, #4]
 8017418:	4a16      	ldr	r2, [pc, #88]	@ (8017474 <TIM_OC5_SetConfig+0xbc>)
 801741a:	4293      	cmp	r3, r2
 801741c:	d007      	beq.n	801742e <TIM_OC5_SetConfig+0x76>
 801741e:	687b      	ldr	r3, [r7, #4]
 8017420:	4a15      	ldr	r2, [pc, #84]	@ (8017478 <TIM_OC5_SetConfig+0xc0>)
 8017422:	4293      	cmp	r3, r2
 8017424:	d003      	beq.n	801742e <TIM_OC5_SetConfig+0x76>
 8017426:	687b      	ldr	r3, [r7, #4]
 8017428:	4a14      	ldr	r2, [pc, #80]	@ (801747c <TIM_OC5_SetConfig+0xc4>)
 801742a:	4293      	cmp	r3, r2
 801742c:	d109      	bne.n	8017442 <TIM_OC5_SetConfig+0x8a>
 801742e:	697b      	ldr	r3, [r7, #20]
 8017430:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8017434:	617b      	str	r3, [r7, #20]
 8017436:	683b      	ldr	r3, [r7, #0]
 8017438:	695b      	ldr	r3, [r3, #20]
 801743a:	021b      	lsls	r3, r3, #8
 801743c:	697a      	ldr	r2, [r7, #20]
 801743e:	4313      	orrs	r3, r2
 8017440:	617b      	str	r3, [r7, #20]
 8017442:	687b      	ldr	r3, [r7, #4]
 8017444:	697a      	ldr	r2, [r7, #20]
 8017446:	605a      	str	r2, [r3, #4]
 8017448:	687b      	ldr	r3, [r7, #4]
 801744a:	68fa      	ldr	r2, [r7, #12]
 801744c:	655a      	str	r2, [r3, #84]	@ 0x54
 801744e:	683b      	ldr	r3, [r7, #0]
 8017450:	685a      	ldr	r2, [r3, #4]
 8017452:	687b      	ldr	r3, [r7, #4]
 8017454:	659a      	str	r2, [r3, #88]	@ 0x58
 8017456:	687b      	ldr	r3, [r7, #4]
 8017458:	693a      	ldr	r2, [r7, #16]
 801745a:	621a      	str	r2, [r3, #32]
 801745c:	bf00      	nop
 801745e:	371c      	adds	r7, #28
 8017460:	46bd      	mov	sp, r7
 8017462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017466:	4770      	bx	lr
 8017468:	fffeff8f 	.word	0xfffeff8f
 801746c:	40010000 	.word	0x40010000
 8017470:	40010400 	.word	0x40010400
 8017474:	40014000 	.word	0x40014000
 8017478:	40014400 	.word	0x40014400
 801747c:	40014800 	.word	0x40014800

08017480 <TIM_OC6_SetConfig>:
 8017480:	b480      	push	{r7}
 8017482:	b087      	sub	sp, #28
 8017484:	af00      	add	r7, sp, #0
 8017486:	6078      	str	r0, [r7, #4]
 8017488:	6039      	str	r1, [r7, #0]
 801748a:	687b      	ldr	r3, [r7, #4]
 801748c:	6a1b      	ldr	r3, [r3, #32]
 801748e:	613b      	str	r3, [r7, #16]
 8017490:	687b      	ldr	r3, [r7, #4]
 8017492:	6a1b      	ldr	r3, [r3, #32]
 8017494:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8017498:	687b      	ldr	r3, [r7, #4]
 801749a:	621a      	str	r2, [r3, #32]
 801749c:	687b      	ldr	r3, [r7, #4]
 801749e:	685b      	ldr	r3, [r3, #4]
 80174a0:	617b      	str	r3, [r7, #20]
 80174a2:	687b      	ldr	r3, [r7, #4]
 80174a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80174a6:	60fb      	str	r3, [r7, #12]
 80174a8:	68fa      	ldr	r2, [r7, #12]
 80174aa:	4b22      	ldr	r3, [pc, #136]	@ (8017534 <TIM_OC6_SetConfig+0xb4>)
 80174ac:	4013      	ands	r3, r2
 80174ae:	60fb      	str	r3, [r7, #12]
 80174b0:	683b      	ldr	r3, [r7, #0]
 80174b2:	681b      	ldr	r3, [r3, #0]
 80174b4:	021b      	lsls	r3, r3, #8
 80174b6:	68fa      	ldr	r2, [r7, #12]
 80174b8:	4313      	orrs	r3, r2
 80174ba:	60fb      	str	r3, [r7, #12]
 80174bc:	693b      	ldr	r3, [r7, #16]
 80174be:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80174c2:	613b      	str	r3, [r7, #16]
 80174c4:	683b      	ldr	r3, [r7, #0]
 80174c6:	689b      	ldr	r3, [r3, #8]
 80174c8:	051b      	lsls	r3, r3, #20
 80174ca:	693a      	ldr	r2, [r7, #16]
 80174cc:	4313      	orrs	r3, r2
 80174ce:	613b      	str	r3, [r7, #16]
 80174d0:	687b      	ldr	r3, [r7, #4]
 80174d2:	4a19      	ldr	r2, [pc, #100]	@ (8017538 <TIM_OC6_SetConfig+0xb8>)
 80174d4:	4293      	cmp	r3, r2
 80174d6:	d00f      	beq.n	80174f8 <TIM_OC6_SetConfig+0x78>
 80174d8:	687b      	ldr	r3, [r7, #4]
 80174da:	4a18      	ldr	r2, [pc, #96]	@ (801753c <TIM_OC6_SetConfig+0xbc>)
 80174dc:	4293      	cmp	r3, r2
 80174de:	d00b      	beq.n	80174f8 <TIM_OC6_SetConfig+0x78>
 80174e0:	687b      	ldr	r3, [r7, #4]
 80174e2:	4a17      	ldr	r2, [pc, #92]	@ (8017540 <TIM_OC6_SetConfig+0xc0>)
 80174e4:	4293      	cmp	r3, r2
 80174e6:	d007      	beq.n	80174f8 <TIM_OC6_SetConfig+0x78>
 80174e8:	687b      	ldr	r3, [r7, #4]
 80174ea:	4a16      	ldr	r2, [pc, #88]	@ (8017544 <TIM_OC6_SetConfig+0xc4>)
 80174ec:	4293      	cmp	r3, r2
 80174ee:	d003      	beq.n	80174f8 <TIM_OC6_SetConfig+0x78>
 80174f0:	687b      	ldr	r3, [r7, #4]
 80174f2:	4a15      	ldr	r2, [pc, #84]	@ (8017548 <TIM_OC6_SetConfig+0xc8>)
 80174f4:	4293      	cmp	r3, r2
 80174f6:	d109      	bne.n	801750c <TIM_OC6_SetConfig+0x8c>
 80174f8:	697b      	ldr	r3, [r7, #20]
 80174fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80174fe:	617b      	str	r3, [r7, #20]
 8017500:	683b      	ldr	r3, [r7, #0]
 8017502:	695b      	ldr	r3, [r3, #20]
 8017504:	029b      	lsls	r3, r3, #10
 8017506:	697a      	ldr	r2, [r7, #20]
 8017508:	4313      	orrs	r3, r2
 801750a:	617b      	str	r3, [r7, #20]
 801750c:	687b      	ldr	r3, [r7, #4]
 801750e:	697a      	ldr	r2, [r7, #20]
 8017510:	605a      	str	r2, [r3, #4]
 8017512:	687b      	ldr	r3, [r7, #4]
 8017514:	68fa      	ldr	r2, [r7, #12]
 8017516:	655a      	str	r2, [r3, #84]	@ 0x54
 8017518:	683b      	ldr	r3, [r7, #0]
 801751a:	685a      	ldr	r2, [r3, #4]
 801751c:	687b      	ldr	r3, [r7, #4]
 801751e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8017520:	687b      	ldr	r3, [r7, #4]
 8017522:	693a      	ldr	r2, [r7, #16]
 8017524:	621a      	str	r2, [r3, #32]
 8017526:	bf00      	nop
 8017528:	371c      	adds	r7, #28
 801752a:	46bd      	mov	sp, r7
 801752c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017530:	4770      	bx	lr
 8017532:	bf00      	nop
 8017534:	feff8fff 	.word	0xfeff8fff
 8017538:	40010000 	.word	0x40010000
 801753c:	40010400 	.word	0x40010400
 8017540:	40014000 	.word	0x40014000
 8017544:	40014400 	.word	0x40014400
 8017548:	40014800 	.word	0x40014800

0801754c <TIM_TI1_SetConfig>:
 801754c:	b480      	push	{r7}
 801754e:	b087      	sub	sp, #28
 8017550:	af00      	add	r7, sp, #0
 8017552:	60f8      	str	r0, [r7, #12]
 8017554:	60b9      	str	r1, [r7, #8]
 8017556:	607a      	str	r2, [r7, #4]
 8017558:	603b      	str	r3, [r7, #0]
 801755a:	68fb      	ldr	r3, [r7, #12]
 801755c:	6a1b      	ldr	r3, [r3, #32]
 801755e:	613b      	str	r3, [r7, #16]
 8017560:	68fb      	ldr	r3, [r7, #12]
 8017562:	6a1b      	ldr	r3, [r3, #32]
 8017564:	f023 0201 	bic.w	r2, r3, #1
 8017568:	68fb      	ldr	r3, [r7, #12]
 801756a:	621a      	str	r2, [r3, #32]
 801756c:	68fb      	ldr	r3, [r7, #12]
 801756e:	699b      	ldr	r3, [r3, #24]
 8017570:	617b      	str	r3, [r7, #20]
 8017572:	68fb      	ldr	r3, [r7, #12]
 8017574:	4a2c      	ldr	r2, [pc, #176]	@ (8017628 <TIM_TI1_SetConfig+0xdc>)
 8017576:	4293      	cmp	r3, r2
 8017578:	d023      	beq.n	80175c2 <TIM_TI1_SetConfig+0x76>
 801757a:	68fb      	ldr	r3, [r7, #12]
 801757c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8017580:	d01f      	beq.n	80175c2 <TIM_TI1_SetConfig+0x76>
 8017582:	68fb      	ldr	r3, [r7, #12]
 8017584:	4a29      	ldr	r2, [pc, #164]	@ (801762c <TIM_TI1_SetConfig+0xe0>)
 8017586:	4293      	cmp	r3, r2
 8017588:	d01b      	beq.n	80175c2 <TIM_TI1_SetConfig+0x76>
 801758a:	68fb      	ldr	r3, [r7, #12]
 801758c:	4a28      	ldr	r2, [pc, #160]	@ (8017630 <TIM_TI1_SetConfig+0xe4>)
 801758e:	4293      	cmp	r3, r2
 8017590:	d017      	beq.n	80175c2 <TIM_TI1_SetConfig+0x76>
 8017592:	68fb      	ldr	r3, [r7, #12]
 8017594:	4a27      	ldr	r2, [pc, #156]	@ (8017634 <TIM_TI1_SetConfig+0xe8>)
 8017596:	4293      	cmp	r3, r2
 8017598:	d013      	beq.n	80175c2 <TIM_TI1_SetConfig+0x76>
 801759a:	68fb      	ldr	r3, [r7, #12]
 801759c:	4a26      	ldr	r2, [pc, #152]	@ (8017638 <TIM_TI1_SetConfig+0xec>)
 801759e:	4293      	cmp	r3, r2
 80175a0:	d00f      	beq.n	80175c2 <TIM_TI1_SetConfig+0x76>
 80175a2:	68fb      	ldr	r3, [r7, #12]
 80175a4:	4a25      	ldr	r2, [pc, #148]	@ (801763c <TIM_TI1_SetConfig+0xf0>)
 80175a6:	4293      	cmp	r3, r2
 80175a8:	d00b      	beq.n	80175c2 <TIM_TI1_SetConfig+0x76>
 80175aa:	68fb      	ldr	r3, [r7, #12]
 80175ac:	4a24      	ldr	r2, [pc, #144]	@ (8017640 <TIM_TI1_SetConfig+0xf4>)
 80175ae:	4293      	cmp	r3, r2
 80175b0:	d007      	beq.n	80175c2 <TIM_TI1_SetConfig+0x76>
 80175b2:	68fb      	ldr	r3, [r7, #12]
 80175b4:	4a23      	ldr	r2, [pc, #140]	@ (8017644 <TIM_TI1_SetConfig+0xf8>)
 80175b6:	4293      	cmp	r3, r2
 80175b8:	d003      	beq.n	80175c2 <TIM_TI1_SetConfig+0x76>
 80175ba:	68fb      	ldr	r3, [r7, #12]
 80175bc:	4a22      	ldr	r2, [pc, #136]	@ (8017648 <TIM_TI1_SetConfig+0xfc>)
 80175be:	4293      	cmp	r3, r2
 80175c0:	d101      	bne.n	80175c6 <TIM_TI1_SetConfig+0x7a>
 80175c2:	2301      	movs	r3, #1
 80175c4:	e000      	b.n	80175c8 <TIM_TI1_SetConfig+0x7c>
 80175c6:	2300      	movs	r3, #0
 80175c8:	2b00      	cmp	r3, #0
 80175ca:	d008      	beq.n	80175de <TIM_TI1_SetConfig+0x92>
 80175cc:	697b      	ldr	r3, [r7, #20]
 80175ce:	f023 0303 	bic.w	r3, r3, #3
 80175d2:	617b      	str	r3, [r7, #20]
 80175d4:	697a      	ldr	r2, [r7, #20]
 80175d6:	687b      	ldr	r3, [r7, #4]
 80175d8:	4313      	orrs	r3, r2
 80175da:	617b      	str	r3, [r7, #20]
 80175dc:	e003      	b.n	80175e6 <TIM_TI1_SetConfig+0x9a>
 80175de:	697b      	ldr	r3, [r7, #20]
 80175e0:	f043 0301 	orr.w	r3, r3, #1
 80175e4:	617b      	str	r3, [r7, #20]
 80175e6:	697b      	ldr	r3, [r7, #20]
 80175e8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80175ec:	617b      	str	r3, [r7, #20]
 80175ee:	683b      	ldr	r3, [r7, #0]
 80175f0:	011b      	lsls	r3, r3, #4
 80175f2:	b2db      	uxtb	r3, r3
 80175f4:	697a      	ldr	r2, [r7, #20]
 80175f6:	4313      	orrs	r3, r2
 80175f8:	617b      	str	r3, [r7, #20]
 80175fa:	693b      	ldr	r3, [r7, #16]
 80175fc:	f023 030a 	bic.w	r3, r3, #10
 8017600:	613b      	str	r3, [r7, #16]
 8017602:	68bb      	ldr	r3, [r7, #8]
 8017604:	f003 030a 	and.w	r3, r3, #10
 8017608:	693a      	ldr	r2, [r7, #16]
 801760a:	4313      	orrs	r3, r2
 801760c:	613b      	str	r3, [r7, #16]
 801760e:	68fb      	ldr	r3, [r7, #12]
 8017610:	697a      	ldr	r2, [r7, #20]
 8017612:	619a      	str	r2, [r3, #24]
 8017614:	68fb      	ldr	r3, [r7, #12]
 8017616:	693a      	ldr	r2, [r7, #16]
 8017618:	621a      	str	r2, [r3, #32]
 801761a:	bf00      	nop
 801761c:	371c      	adds	r7, #28
 801761e:	46bd      	mov	sp, r7
 8017620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017624:	4770      	bx	lr
 8017626:	bf00      	nop
 8017628:	40010000 	.word	0x40010000
 801762c:	40000400 	.word	0x40000400
 8017630:	40000800 	.word	0x40000800
 8017634:	40000c00 	.word	0x40000c00
 8017638:	40010400 	.word	0x40010400
 801763c:	40001800 	.word	0x40001800
 8017640:	40014000 	.word	0x40014000
 8017644:	4000e000 	.word	0x4000e000
 8017648:	4000e400 	.word	0x4000e400

0801764c <TIM_TI1_ConfigInputStage>:
 801764c:	b480      	push	{r7}
 801764e:	b087      	sub	sp, #28
 8017650:	af00      	add	r7, sp, #0
 8017652:	60f8      	str	r0, [r7, #12]
 8017654:	60b9      	str	r1, [r7, #8]
 8017656:	607a      	str	r2, [r7, #4]
 8017658:	68fb      	ldr	r3, [r7, #12]
 801765a:	6a1b      	ldr	r3, [r3, #32]
 801765c:	617b      	str	r3, [r7, #20]
 801765e:	68fb      	ldr	r3, [r7, #12]
 8017660:	6a1b      	ldr	r3, [r3, #32]
 8017662:	f023 0201 	bic.w	r2, r3, #1
 8017666:	68fb      	ldr	r3, [r7, #12]
 8017668:	621a      	str	r2, [r3, #32]
 801766a:	68fb      	ldr	r3, [r7, #12]
 801766c:	699b      	ldr	r3, [r3, #24]
 801766e:	613b      	str	r3, [r7, #16]
 8017670:	693b      	ldr	r3, [r7, #16]
 8017672:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8017676:	613b      	str	r3, [r7, #16]
 8017678:	687b      	ldr	r3, [r7, #4]
 801767a:	011b      	lsls	r3, r3, #4
 801767c:	693a      	ldr	r2, [r7, #16]
 801767e:	4313      	orrs	r3, r2
 8017680:	613b      	str	r3, [r7, #16]
 8017682:	697b      	ldr	r3, [r7, #20]
 8017684:	f023 030a 	bic.w	r3, r3, #10
 8017688:	617b      	str	r3, [r7, #20]
 801768a:	697a      	ldr	r2, [r7, #20]
 801768c:	68bb      	ldr	r3, [r7, #8]
 801768e:	4313      	orrs	r3, r2
 8017690:	617b      	str	r3, [r7, #20]
 8017692:	68fb      	ldr	r3, [r7, #12]
 8017694:	693a      	ldr	r2, [r7, #16]
 8017696:	619a      	str	r2, [r3, #24]
 8017698:	68fb      	ldr	r3, [r7, #12]
 801769a:	697a      	ldr	r2, [r7, #20]
 801769c:	621a      	str	r2, [r3, #32]
 801769e:	bf00      	nop
 80176a0:	371c      	adds	r7, #28
 80176a2:	46bd      	mov	sp, r7
 80176a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176a8:	4770      	bx	lr

080176aa <TIM_TI2_SetConfig>:
 80176aa:	b480      	push	{r7}
 80176ac:	b087      	sub	sp, #28
 80176ae:	af00      	add	r7, sp, #0
 80176b0:	60f8      	str	r0, [r7, #12]
 80176b2:	60b9      	str	r1, [r7, #8]
 80176b4:	607a      	str	r2, [r7, #4]
 80176b6:	603b      	str	r3, [r7, #0]
 80176b8:	68fb      	ldr	r3, [r7, #12]
 80176ba:	6a1b      	ldr	r3, [r3, #32]
 80176bc:	617b      	str	r3, [r7, #20]
 80176be:	68fb      	ldr	r3, [r7, #12]
 80176c0:	6a1b      	ldr	r3, [r3, #32]
 80176c2:	f023 0210 	bic.w	r2, r3, #16
 80176c6:	68fb      	ldr	r3, [r7, #12]
 80176c8:	621a      	str	r2, [r3, #32]
 80176ca:	68fb      	ldr	r3, [r7, #12]
 80176cc:	699b      	ldr	r3, [r3, #24]
 80176ce:	613b      	str	r3, [r7, #16]
 80176d0:	693b      	ldr	r3, [r7, #16]
 80176d2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80176d6:	613b      	str	r3, [r7, #16]
 80176d8:	687b      	ldr	r3, [r7, #4]
 80176da:	021b      	lsls	r3, r3, #8
 80176dc:	693a      	ldr	r2, [r7, #16]
 80176de:	4313      	orrs	r3, r2
 80176e0:	613b      	str	r3, [r7, #16]
 80176e2:	693b      	ldr	r3, [r7, #16]
 80176e4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80176e8:	613b      	str	r3, [r7, #16]
 80176ea:	683b      	ldr	r3, [r7, #0]
 80176ec:	031b      	lsls	r3, r3, #12
 80176ee:	b29b      	uxth	r3, r3
 80176f0:	693a      	ldr	r2, [r7, #16]
 80176f2:	4313      	orrs	r3, r2
 80176f4:	613b      	str	r3, [r7, #16]
 80176f6:	697b      	ldr	r3, [r7, #20]
 80176f8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80176fc:	617b      	str	r3, [r7, #20]
 80176fe:	68bb      	ldr	r3, [r7, #8]
 8017700:	011b      	lsls	r3, r3, #4
 8017702:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8017706:	697a      	ldr	r2, [r7, #20]
 8017708:	4313      	orrs	r3, r2
 801770a:	617b      	str	r3, [r7, #20]
 801770c:	68fb      	ldr	r3, [r7, #12]
 801770e:	693a      	ldr	r2, [r7, #16]
 8017710:	619a      	str	r2, [r3, #24]
 8017712:	68fb      	ldr	r3, [r7, #12]
 8017714:	697a      	ldr	r2, [r7, #20]
 8017716:	621a      	str	r2, [r3, #32]
 8017718:	bf00      	nop
 801771a:	371c      	adds	r7, #28
 801771c:	46bd      	mov	sp, r7
 801771e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017722:	4770      	bx	lr

08017724 <TIM_TI2_ConfigInputStage>:
 8017724:	b480      	push	{r7}
 8017726:	b087      	sub	sp, #28
 8017728:	af00      	add	r7, sp, #0
 801772a:	60f8      	str	r0, [r7, #12]
 801772c:	60b9      	str	r1, [r7, #8]
 801772e:	607a      	str	r2, [r7, #4]
 8017730:	68fb      	ldr	r3, [r7, #12]
 8017732:	6a1b      	ldr	r3, [r3, #32]
 8017734:	617b      	str	r3, [r7, #20]
 8017736:	68fb      	ldr	r3, [r7, #12]
 8017738:	6a1b      	ldr	r3, [r3, #32]
 801773a:	f023 0210 	bic.w	r2, r3, #16
 801773e:	68fb      	ldr	r3, [r7, #12]
 8017740:	621a      	str	r2, [r3, #32]
 8017742:	68fb      	ldr	r3, [r7, #12]
 8017744:	699b      	ldr	r3, [r3, #24]
 8017746:	613b      	str	r3, [r7, #16]
 8017748:	693b      	ldr	r3, [r7, #16]
 801774a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 801774e:	613b      	str	r3, [r7, #16]
 8017750:	687b      	ldr	r3, [r7, #4]
 8017752:	031b      	lsls	r3, r3, #12
 8017754:	693a      	ldr	r2, [r7, #16]
 8017756:	4313      	orrs	r3, r2
 8017758:	613b      	str	r3, [r7, #16]
 801775a:	697b      	ldr	r3, [r7, #20]
 801775c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8017760:	617b      	str	r3, [r7, #20]
 8017762:	68bb      	ldr	r3, [r7, #8]
 8017764:	011b      	lsls	r3, r3, #4
 8017766:	697a      	ldr	r2, [r7, #20]
 8017768:	4313      	orrs	r3, r2
 801776a:	617b      	str	r3, [r7, #20]
 801776c:	68fb      	ldr	r3, [r7, #12]
 801776e:	693a      	ldr	r2, [r7, #16]
 8017770:	619a      	str	r2, [r3, #24]
 8017772:	68fb      	ldr	r3, [r7, #12]
 8017774:	697a      	ldr	r2, [r7, #20]
 8017776:	621a      	str	r2, [r3, #32]
 8017778:	bf00      	nop
 801777a:	371c      	adds	r7, #28
 801777c:	46bd      	mov	sp, r7
 801777e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017782:	4770      	bx	lr

08017784 <TIM_TI3_SetConfig>:
 8017784:	b480      	push	{r7}
 8017786:	b087      	sub	sp, #28
 8017788:	af00      	add	r7, sp, #0
 801778a:	60f8      	str	r0, [r7, #12]
 801778c:	60b9      	str	r1, [r7, #8]
 801778e:	607a      	str	r2, [r7, #4]
 8017790:	603b      	str	r3, [r7, #0]
 8017792:	68fb      	ldr	r3, [r7, #12]
 8017794:	6a1b      	ldr	r3, [r3, #32]
 8017796:	617b      	str	r3, [r7, #20]
 8017798:	68fb      	ldr	r3, [r7, #12]
 801779a:	6a1b      	ldr	r3, [r3, #32]
 801779c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80177a0:	68fb      	ldr	r3, [r7, #12]
 80177a2:	621a      	str	r2, [r3, #32]
 80177a4:	68fb      	ldr	r3, [r7, #12]
 80177a6:	69db      	ldr	r3, [r3, #28]
 80177a8:	613b      	str	r3, [r7, #16]
 80177aa:	693b      	ldr	r3, [r7, #16]
 80177ac:	f023 0303 	bic.w	r3, r3, #3
 80177b0:	613b      	str	r3, [r7, #16]
 80177b2:	693a      	ldr	r2, [r7, #16]
 80177b4:	687b      	ldr	r3, [r7, #4]
 80177b6:	4313      	orrs	r3, r2
 80177b8:	613b      	str	r3, [r7, #16]
 80177ba:	693b      	ldr	r3, [r7, #16]
 80177bc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80177c0:	613b      	str	r3, [r7, #16]
 80177c2:	683b      	ldr	r3, [r7, #0]
 80177c4:	011b      	lsls	r3, r3, #4
 80177c6:	b2db      	uxtb	r3, r3
 80177c8:	693a      	ldr	r2, [r7, #16]
 80177ca:	4313      	orrs	r3, r2
 80177cc:	613b      	str	r3, [r7, #16]
 80177ce:	697b      	ldr	r3, [r7, #20]
 80177d0:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 80177d4:	617b      	str	r3, [r7, #20]
 80177d6:	68bb      	ldr	r3, [r7, #8]
 80177d8:	021b      	lsls	r3, r3, #8
 80177da:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 80177de:	697a      	ldr	r2, [r7, #20]
 80177e0:	4313      	orrs	r3, r2
 80177e2:	617b      	str	r3, [r7, #20]
 80177e4:	68fb      	ldr	r3, [r7, #12]
 80177e6:	693a      	ldr	r2, [r7, #16]
 80177e8:	61da      	str	r2, [r3, #28]
 80177ea:	68fb      	ldr	r3, [r7, #12]
 80177ec:	697a      	ldr	r2, [r7, #20]
 80177ee:	621a      	str	r2, [r3, #32]
 80177f0:	bf00      	nop
 80177f2:	371c      	adds	r7, #28
 80177f4:	46bd      	mov	sp, r7
 80177f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177fa:	4770      	bx	lr

080177fc <TIM_TI4_SetConfig>:
 80177fc:	b480      	push	{r7}
 80177fe:	b087      	sub	sp, #28
 8017800:	af00      	add	r7, sp, #0
 8017802:	60f8      	str	r0, [r7, #12]
 8017804:	60b9      	str	r1, [r7, #8]
 8017806:	607a      	str	r2, [r7, #4]
 8017808:	603b      	str	r3, [r7, #0]
 801780a:	68fb      	ldr	r3, [r7, #12]
 801780c:	6a1b      	ldr	r3, [r3, #32]
 801780e:	617b      	str	r3, [r7, #20]
 8017810:	68fb      	ldr	r3, [r7, #12]
 8017812:	6a1b      	ldr	r3, [r3, #32]
 8017814:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8017818:	68fb      	ldr	r3, [r7, #12]
 801781a:	621a      	str	r2, [r3, #32]
 801781c:	68fb      	ldr	r3, [r7, #12]
 801781e:	69db      	ldr	r3, [r3, #28]
 8017820:	613b      	str	r3, [r7, #16]
 8017822:	693b      	ldr	r3, [r7, #16]
 8017824:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8017828:	613b      	str	r3, [r7, #16]
 801782a:	687b      	ldr	r3, [r7, #4]
 801782c:	021b      	lsls	r3, r3, #8
 801782e:	693a      	ldr	r2, [r7, #16]
 8017830:	4313      	orrs	r3, r2
 8017832:	613b      	str	r3, [r7, #16]
 8017834:	693b      	ldr	r3, [r7, #16]
 8017836:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 801783a:	613b      	str	r3, [r7, #16]
 801783c:	683b      	ldr	r3, [r7, #0]
 801783e:	031b      	lsls	r3, r3, #12
 8017840:	b29b      	uxth	r3, r3
 8017842:	693a      	ldr	r2, [r7, #16]
 8017844:	4313      	orrs	r3, r2
 8017846:	613b      	str	r3, [r7, #16]
 8017848:	697b      	ldr	r3, [r7, #20]
 801784a:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 801784e:	617b      	str	r3, [r7, #20]
 8017850:	68bb      	ldr	r3, [r7, #8]
 8017852:	031b      	lsls	r3, r3, #12
 8017854:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8017858:	697a      	ldr	r2, [r7, #20]
 801785a:	4313      	orrs	r3, r2
 801785c:	617b      	str	r3, [r7, #20]
 801785e:	68fb      	ldr	r3, [r7, #12]
 8017860:	693a      	ldr	r2, [r7, #16]
 8017862:	61da      	str	r2, [r3, #28]
 8017864:	68fb      	ldr	r3, [r7, #12]
 8017866:	697a      	ldr	r2, [r7, #20]
 8017868:	621a      	str	r2, [r3, #32]
 801786a:	bf00      	nop
 801786c:	371c      	adds	r7, #28
 801786e:	46bd      	mov	sp, r7
 8017870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017874:	4770      	bx	lr
	...

08017878 <TIM_ITRx_SetConfig>:
 8017878:	b480      	push	{r7}
 801787a:	b085      	sub	sp, #20
 801787c:	af00      	add	r7, sp, #0
 801787e:	6078      	str	r0, [r7, #4]
 8017880:	6039      	str	r1, [r7, #0]
 8017882:	687b      	ldr	r3, [r7, #4]
 8017884:	689b      	ldr	r3, [r3, #8]
 8017886:	60fb      	str	r3, [r7, #12]
 8017888:	68fa      	ldr	r2, [r7, #12]
 801788a:	4b09      	ldr	r3, [pc, #36]	@ (80178b0 <TIM_ITRx_SetConfig+0x38>)
 801788c:	4013      	ands	r3, r2
 801788e:	60fb      	str	r3, [r7, #12]
 8017890:	683a      	ldr	r2, [r7, #0]
 8017892:	68fb      	ldr	r3, [r7, #12]
 8017894:	4313      	orrs	r3, r2
 8017896:	f043 0307 	orr.w	r3, r3, #7
 801789a:	60fb      	str	r3, [r7, #12]
 801789c:	687b      	ldr	r3, [r7, #4]
 801789e:	68fa      	ldr	r2, [r7, #12]
 80178a0:	609a      	str	r2, [r3, #8]
 80178a2:	bf00      	nop
 80178a4:	3714      	adds	r7, #20
 80178a6:	46bd      	mov	sp, r7
 80178a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178ac:	4770      	bx	lr
 80178ae:	bf00      	nop
 80178b0:	ffcfff8f 	.word	0xffcfff8f

080178b4 <TIM_ETR_SetConfig>:
 80178b4:	b480      	push	{r7}
 80178b6:	b087      	sub	sp, #28
 80178b8:	af00      	add	r7, sp, #0
 80178ba:	60f8      	str	r0, [r7, #12]
 80178bc:	60b9      	str	r1, [r7, #8]
 80178be:	607a      	str	r2, [r7, #4]
 80178c0:	603b      	str	r3, [r7, #0]
 80178c2:	68fb      	ldr	r3, [r7, #12]
 80178c4:	689b      	ldr	r3, [r3, #8]
 80178c6:	617b      	str	r3, [r7, #20]
 80178c8:	697b      	ldr	r3, [r7, #20]
 80178ca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80178ce:	617b      	str	r3, [r7, #20]
 80178d0:	683b      	ldr	r3, [r7, #0]
 80178d2:	021a      	lsls	r2, r3, #8
 80178d4:	687b      	ldr	r3, [r7, #4]
 80178d6:	431a      	orrs	r2, r3
 80178d8:	68bb      	ldr	r3, [r7, #8]
 80178da:	4313      	orrs	r3, r2
 80178dc:	697a      	ldr	r2, [r7, #20]
 80178de:	4313      	orrs	r3, r2
 80178e0:	617b      	str	r3, [r7, #20]
 80178e2:	68fb      	ldr	r3, [r7, #12]
 80178e4:	697a      	ldr	r2, [r7, #20]
 80178e6:	609a      	str	r2, [r3, #8]
 80178e8:	bf00      	nop
 80178ea:	371c      	adds	r7, #28
 80178ec:	46bd      	mov	sp, r7
 80178ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178f2:	4770      	bx	lr

080178f4 <TIM_CCxChannelCmd>:
 80178f4:	b480      	push	{r7}
 80178f6:	b087      	sub	sp, #28
 80178f8:	af00      	add	r7, sp, #0
 80178fa:	60f8      	str	r0, [r7, #12]
 80178fc:	60b9      	str	r1, [r7, #8]
 80178fe:	607a      	str	r2, [r7, #4]
 8017900:	68bb      	ldr	r3, [r7, #8]
 8017902:	f003 031f 	and.w	r3, r3, #31
 8017906:	2201      	movs	r2, #1
 8017908:	fa02 f303 	lsl.w	r3, r2, r3
 801790c:	617b      	str	r3, [r7, #20]
 801790e:	68fb      	ldr	r3, [r7, #12]
 8017910:	6a1a      	ldr	r2, [r3, #32]
 8017912:	697b      	ldr	r3, [r7, #20]
 8017914:	43db      	mvns	r3, r3
 8017916:	401a      	ands	r2, r3
 8017918:	68fb      	ldr	r3, [r7, #12]
 801791a:	621a      	str	r2, [r3, #32]
 801791c:	68fb      	ldr	r3, [r7, #12]
 801791e:	6a1a      	ldr	r2, [r3, #32]
 8017920:	68bb      	ldr	r3, [r7, #8]
 8017922:	f003 031f 	and.w	r3, r3, #31
 8017926:	6879      	ldr	r1, [r7, #4]
 8017928:	fa01 f303 	lsl.w	r3, r1, r3
 801792c:	431a      	orrs	r2, r3
 801792e:	68fb      	ldr	r3, [r7, #12]
 8017930:	621a      	str	r2, [r3, #32]
 8017932:	bf00      	nop
 8017934:	371c      	adds	r7, #28
 8017936:	46bd      	mov	sp, r7
 8017938:	f85d 7b04 	ldr.w	r7, [sp], #4
 801793c:	4770      	bx	lr
	...

08017940 <HAL_TIMEx_MasterConfigSynchronization>:
 8017940:	b480      	push	{r7}
 8017942:	b085      	sub	sp, #20
 8017944:	af00      	add	r7, sp, #0
 8017946:	6078      	str	r0, [r7, #4]
 8017948:	6039      	str	r1, [r7, #0]
 801794a:	687b      	ldr	r3, [r7, #4]
 801794c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8017950:	2b01      	cmp	r3, #1
 8017952:	d101      	bne.n	8017958 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8017954:	2302      	movs	r3, #2
 8017956:	e077      	b.n	8017a48 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 8017958:	687b      	ldr	r3, [r7, #4]
 801795a:	2201      	movs	r2, #1
 801795c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8017960:	687b      	ldr	r3, [r7, #4]
 8017962:	2202      	movs	r2, #2
 8017964:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8017968:	687b      	ldr	r3, [r7, #4]
 801796a:	681b      	ldr	r3, [r3, #0]
 801796c:	685b      	ldr	r3, [r3, #4]
 801796e:	60fb      	str	r3, [r7, #12]
 8017970:	687b      	ldr	r3, [r7, #4]
 8017972:	681b      	ldr	r3, [r3, #0]
 8017974:	689b      	ldr	r3, [r3, #8]
 8017976:	60bb      	str	r3, [r7, #8]
 8017978:	687b      	ldr	r3, [r7, #4]
 801797a:	681b      	ldr	r3, [r3, #0]
 801797c:	4a35      	ldr	r2, [pc, #212]	@ (8017a54 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 801797e:	4293      	cmp	r3, r2
 8017980:	d004      	beq.n	801798c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8017982:	687b      	ldr	r3, [r7, #4]
 8017984:	681b      	ldr	r3, [r3, #0]
 8017986:	4a34      	ldr	r2, [pc, #208]	@ (8017a58 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8017988:	4293      	cmp	r3, r2
 801798a:	d108      	bne.n	801799e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 801798c:	68fb      	ldr	r3, [r7, #12]
 801798e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8017992:	60fb      	str	r3, [r7, #12]
 8017994:	683b      	ldr	r3, [r7, #0]
 8017996:	685b      	ldr	r3, [r3, #4]
 8017998:	68fa      	ldr	r2, [r7, #12]
 801799a:	4313      	orrs	r3, r2
 801799c:	60fb      	str	r3, [r7, #12]
 801799e:	68fb      	ldr	r3, [r7, #12]
 80179a0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80179a4:	60fb      	str	r3, [r7, #12]
 80179a6:	683b      	ldr	r3, [r7, #0]
 80179a8:	681b      	ldr	r3, [r3, #0]
 80179aa:	68fa      	ldr	r2, [r7, #12]
 80179ac:	4313      	orrs	r3, r2
 80179ae:	60fb      	str	r3, [r7, #12]
 80179b0:	687b      	ldr	r3, [r7, #4]
 80179b2:	681b      	ldr	r3, [r3, #0]
 80179b4:	68fa      	ldr	r2, [r7, #12]
 80179b6:	605a      	str	r2, [r3, #4]
 80179b8:	687b      	ldr	r3, [r7, #4]
 80179ba:	681b      	ldr	r3, [r3, #0]
 80179bc:	4a25      	ldr	r2, [pc, #148]	@ (8017a54 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80179be:	4293      	cmp	r3, r2
 80179c0:	d02c      	beq.n	8017a1c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80179c2:	687b      	ldr	r3, [r7, #4]
 80179c4:	681b      	ldr	r3, [r3, #0]
 80179c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80179ca:	d027      	beq.n	8017a1c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80179cc:	687b      	ldr	r3, [r7, #4]
 80179ce:	681b      	ldr	r3, [r3, #0]
 80179d0:	4a22      	ldr	r2, [pc, #136]	@ (8017a5c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80179d2:	4293      	cmp	r3, r2
 80179d4:	d022      	beq.n	8017a1c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80179d6:	687b      	ldr	r3, [r7, #4]
 80179d8:	681b      	ldr	r3, [r3, #0]
 80179da:	4a21      	ldr	r2, [pc, #132]	@ (8017a60 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80179dc:	4293      	cmp	r3, r2
 80179de:	d01d      	beq.n	8017a1c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80179e0:	687b      	ldr	r3, [r7, #4]
 80179e2:	681b      	ldr	r3, [r3, #0]
 80179e4:	4a1f      	ldr	r2, [pc, #124]	@ (8017a64 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80179e6:	4293      	cmp	r3, r2
 80179e8:	d018      	beq.n	8017a1c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80179ea:	687b      	ldr	r3, [r7, #4]
 80179ec:	681b      	ldr	r3, [r3, #0]
 80179ee:	4a1a      	ldr	r2, [pc, #104]	@ (8017a58 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80179f0:	4293      	cmp	r3, r2
 80179f2:	d013      	beq.n	8017a1c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80179f4:	687b      	ldr	r3, [r7, #4]
 80179f6:	681b      	ldr	r3, [r3, #0]
 80179f8:	4a1b      	ldr	r2, [pc, #108]	@ (8017a68 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80179fa:	4293      	cmp	r3, r2
 80179fc:	d00e      	beq.n	8017a1c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80179fe:	687b      	ldr	r3, [r7, #4]
 8017a00:	681b      	ldr	r3, [r3, #0]
 8017a02:	4a1a      	ldr	r2, [pc, #104]	@ (8017a6c <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8017a04:	4293      	cmp	r3, r2
 8017a06:	d009      	beq.n	8017a1c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8017a08:	687b      	ldr	r3, [r7, #4]
 8017a0a:	681b      	ldr	r3, [r3, #0]
 8017a0c:	4a18      	ldr	r2, [pc, #96]	@ (8017a70 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 8017a0e:	4293      	cmp	r3, r2
 8017a10:	d004      	beq.n	8017a1c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8017a12:	687b      	ldr	r3, [r7, #4]
 8017a14:	681b      	ldr	r3, [r3, #0]
 8017a16:	4a17      	ldr	r2, [pc, #92]	@ (8017a74 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8017a18:	4293      	cmp	r3, r2
 8017a1a:	d10c      	bne.n	8017a36 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
 8017a1c:	68bb      	ldr	r3, [r7, #8]
 8017a1e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8017a22:	60bb      	str	r3, [r7, #8]
 8017a24:	683b      	ldr	r3, [r7, #0]
 8017a26:	689b      	ldr	r3, [r3, #8]
 8017a28:	68ba      	ldr	r2, [r7, #8]
 8017a2a:	4313      	orrs	r3, r2
 8017a2c:	60bb      	str	r3, [r7, #8]
 8017a2e:	687b      	ldr	r3, [r7, #4]
 8017a30:	681b      	ldr	r3, [r3, #0]
 8017a32:	68ba      	ldr	r2, [r7, #8]
 8017a34:	609a      	str	r2, [r3, #8]
 8017a36:	687b      	ldr	r3, [r7, #4]
 8017a38:	2201      	movs	r2, #1
 8017a3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8017a3e:	687b      	ldr	r3, [r7, #4]
 8017a40:	2200      	movs	r2, #0
 8017a42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8017a46:	2300      	movs	r3, #0
 8017a48:	4618      	mov	r0, r3
 8017a4a:	3714      	adds	r7, #20
 8017a4c:	46bd      	mov	sp, r7
 8017a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a52:	4770      	bx	lr
 8017a54:	40010000 	.word	0x40010000
 8017a58:	40010400 	.word	0x40010400
 8017a5c:	40000400 	.word	0x40000400
 8017a60:	40000800 	.word	0x40000800
 8017a64:	40000c00 	.word	0x40000c00
 8017a68:	40001800 	.word	0x40001800
 8017a6c:	40014000 	.word	0x40014000
 8017a70:	4000e000 	.word	0x4000e000
 8017a74:	4000e400 	.word	0x4000e400

08017a78 <HAL_TIMEx_ConfigBreakDeadTime>:
 8017a78:	b480      	push	{r7}
 8017a7a:	b085      	sub	sp, #20
 8017a7c:	af00      	add	r7, sp, #0
 8017a7e:	6078      	str	r0, [r7, #4]
 8017a80:	6039      	str	r1, [r7, #0]
 8017a82:	2300      	movs	r3, #0
 8017a84:	60fb      	str	r3, [r7, #12]
 8017a86:	687b      	ldr	r3, [r7, #4]
 8017a88:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8017a8c:	2b01      	cmp	r3, #1
 8017a8e:	d101      	bne.n	8017a94 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8017a90:	2302      	movs	r3, #2
 8017a92:	e073      	b.n	8017b7c <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 8017a94:	687b      	ldr	r3, [r7, #4]
 8017a96:	2201      	movs	r2, #1
 8017a98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8017a9c:	68fb      	ldr	r3, [r7, #12]
 8017a9e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8017aa2:	683b      	ldr	r3, [r7, #0]
 8017aa4:	68db      	ldr	r3, [r3, #12]
 8017aa6:	4313      	orrs	r3, r2
 8017aa8:	60fb      	str	r3, [r7, #12]
 8017aaa:	68fb      	ldr	r3, [r7, #12]
 8017aac:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8017ab0:	683b      	ldr	r3, [r7, #0]
 8017ab2:	689b      	ldr	r3, [r3, #8]
 8017ab4:	4313      	orrs	r3, r2
 8017ab6:	60fb      	str	r3, [r7, #12]
 8017ab8:	68fb      	ldr	r3, [r7, #12]
 8017aba:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8017abe:	683b      	ldr	r3, [r7, #0]
 8017ac0:	685b      	ldr	r3, [r3, #4]
 8017ac2:	4313      	orrs	r3, r2
 8017ac4:	60fb      	str	r3, [r7, #12]
 8017ac6:	68fb      	ldr	r3, [r7, #12]
 8017ac8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8017acc:	683b      	ldr	r3, [r7, #0]
 8017ace:	681b      	ldr	r3, [r3, #0]
 8017ad0:	4313      	orrs	r3, r2
 8017ad2:	60fb      	str	r3, [r7, #12]
 8017ad4:	68fb      	ldr	r3, [r7, #12]
 8017ad6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8017ada:	683b      	ldr	r3, [r7, #0]
 8017adc:	691b      	ldr	r3, [r3, #16]
 8017ade:	4313      	orrs	r3, r2
 8017ae0:	60fb      	str	r3, [r7, #12]
 8017ae2:	68fb      	ldr	r3, [r7, #12]
 8017ae4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8017ae8:	683b      	ldr	r3, [r7, #0]
 8017aea:	695b      	ldr	r3, [r3, #20]
 8017aec:	4313      	orrs	r3, r2
 8017aee:	60fb      	str	r3, [r7, #12]
 8017af0:	68fb      	ldr	r3, [r7, #12]
 8017af2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8017af6:	683b      	ldr	r3, [r7, #0]
 8017af8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017afa:	4313      	orrs	r3, r2
 8017afc:	60fb      	str	r3, [r7, #12]
 8017afe:	68fb      	ldr	r3, [r7, #12]
 8017b00:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8017b04:	683b      	ldr	r3, [r7, #0]
 8017b06:	699b      	ldr	r3, [r3, #24]
 8017b08:	041b      	lsls	r3, r3, #16
 8017b0a:	4313      	orrs	r3, r2
 8017b0c:	60fb      	str	r3, [r7, #12]
 8017b0e:	68fb      	ldr	r3, [r7, #12]
 8017b10:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8017b14:	683b      	ldr	r3, [r7, #0]
 8017b16:	69db      	ldr	r3, [r3, #28]
 8017b18:	4313      	orrs	r3, r2
 8017b1a:	60fb      	str	r3, [r7, #12]
 8017b1c:	687b      	ldr	r3, [r7, #4]
 8017b1e:	681b      	ldr	r3, [r3, #0]
 8017b20:	4a19      	ldr	r2, [pc, #100]	@ (8017b88 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8017b22:	4293      	cmp	r3, r2
 8017b24:	d004      	beq.n	8017b30 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 8017b26:	687b      	ldr	r3, [r7, #4]
 8017b28:	681b      	ldr	r3, [r3, #0]
 8017b2a:	4a18      	ldr	r2, [pc, #96]	@ (8017b8c <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8017b2c:	4293      	cmp	r3, r2
 8017b2e:	d11c      	bne.n	8017b6a <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
 8017b30:	68fb      	ldr	r3, [r7, #12]
 8017b32:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8017b36:	683b      	ldr	r3, [r7, #0]
 8017b38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017b3a:	051b      	lsls	r3, r3, #20
 8017b3c:	4313      	orrs	r3, r2
 8017b3e:	60fb      	str	r3, [r7, #12]
 8017b40:	68fb      	ldr	r3, [r7, #12]
 8017b42:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8017b46:	683b      	ldr	r3, [r7, #0]
 8017b48:	6a1b      	ldr	r3, [r3, #32]
 8017b4a:	4313      	orrs	r3, r2
 8017b4c:	60fb      	str	r3, [r7, #12]
 8017b4e:	68fb      	ldr	r3, [r7, #12]
 8017b50:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8017b54:	683b      	ldr	r3, [r7, #0]
 8017b56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017b58:	4313      	orrs	r3, r2
 8017b5a:	60fb      	str	r3, [r7, #12]
 8017b5c:	68fb      	ldr	r3, [r7, #12]
 8017b5e:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8017b62:	683b      	ldr	r3, [r7, #0]
 8017b64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017b66:	4313      	orrs	r3, r2
 8017b68:	60fb      	str	r3, [r7, #12]
 8017b6a:	687b      	ldr	r3, [r7, #4]
 8017b6c:	681b      	ldr	r3, [r3, #0]
 8017b6e:	68fa      	ldr	r2, [r7, #12]
 8017b70:	645a      	str	r2, [r3, #68]	@ 0x44
 8017b72:	687b      	ldr	r3, [r7, #4]
 8017b74:	2200      	movs	r2, #0
 8017b76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8017b7a:	2300      	movs	r3, #0
 8017b7c:	4618      	mov	r0, r3
 8017b7e:	3714      	adds	r7, #20
 8017b80:	46bd      	mov	sp, r7
 8017b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b86:	4770      	bx	lr
 8017b88:	40010000 	.word	0x40010000
 8017b8c:	40010400 	.word	0x40010400

08017b90 <HAL_TIMEx_CommutCallback>:
 8017b90:	b480      	push	{r7}
 8017b92:	b083      	sub	sp, #12
 8017b94:	af00      	add	r7, sp, #0
 8017b96:	6078      	str	r0, [r7, #4]
 8017b98:	bf00      	nop
 8017b9a:	370c      	adds	r7, #12
 8017b9c:	46bd      	mov	sp, r7
 8017b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ba2:	4770      	bx	lr

08017ba4 <HAL_TIMEx_BreakCallback>:
 8017ba4:	b480      	push	{r7}
 8017ba6:	b083      	sub	sp, #12
 8017ba8:	af00      	add	r7, sp, #0
 8017baa:	6078      	str	r0, [r7, #4]
 8017bac:	bf00      	nop
 8017bae:	370c      	adds	r7, #12
 8017bb0:	46bd      	mov	sp, r7
 8017bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017bb6:	4770      	bx	lr

08017bb8 <HAL_TIMEx_Break2Callback>:
 8017bb8:	b480      	push	{r7}
 8017bba:	b083      	sub	sp, #12
 8017bbc:	af00      	add	r7, sp, #0
 8017bbe:	6078      	str	r0, [r7, #4]
 8017bc0:	bf00      	nop
 8017bc2:	370c      	adds	r7, #12
 8017bc4:	46bd      	mov	sp, r7
 8017bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017bca:	4770      	bx	lr

08017bcc <HAL_UART_Init>:
 8017bcc:	b580      	push	{r7, lr}
 8017bce:	b082      	sub	sp, #8
 8017bd0:	af00      	add	r7, sp, #0
 8017bd2:	6078      	str	r0, [r7, #4]
 8017bd4:	687b      	ldr	r3, [r7, #4]
 8017bd6:	2b00      	cmp	r3, #0
 8017bd8:	d101      	bne.n	8017bde <HAL_UART_Init+0x12>
 8017bda:	2301      	movs	r3, #1
 8017bdc:	e042      	b.n	8017c64 <HAL_UART_Init+0x98>
 8017bde:	687b      	ldr	r3, [r7, #4]
 8017be0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8017be4:	2b00      	cmp	r3, #0
 8017be6:	d106      	bne.n	8017bf6 <HAL_UART_Init+0x2a>
 8017be8:	687b      	ldr	r3, [r7, #4]
 8017bea:	2200      	movs	r2, #0
 8017bec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
 8017bf0:	6878      	ldr	r0, [r7, #4]
 8017bf2:	f7f1 fa01 	bl	8008ff8 <HAL_UART_MspInit>
 8017bf6:	687b      	ldr	r3, [r7, #4]
 8017bf8:	2224      	movs	r2, #36	@ 0x24
 8017bfa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 8017bfe:	687b      	ldr	r3, [r7, #4]
 8017c00:	681b      	ldr	r3, [r3, #0]
 8017c02:	681a      	ldr	r2, [r3, #0]
 8017c04:	687b      	ldr	r3, [r7, #4]
 8017c06:	681b      	ldr	r3, [r3, #0]
 8017c08:	f022 0201 	bic.w	r2, r2, #1
 8017c0c:	601a      	str	r2, [r3, #0]
 8017c0e:	687b      	ldr	r3, [r7, #4]
 8017c10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017c12:	2b00      	cmp	r3, #0
 8017c14:	d002      	beq.n	8017c1c <HAL_UART_Init+0x50>
 8017c16:	6878      	ldr	r0, [r7, #4]
 8017c18:	f001 fbdc 	bl	80193d4 <UART_AdvFeatureConfig>
 8017c1c:	6878      	ldr	r0, [r7, #4]
 8017c1e:	f000 fd6d 	bl	80186fc <UART_SetConfig>
 8017c22:	4603      	mov	r3, r0
 8017c24:	2b01      	cmp	r3, #1
 8017c26:	d101      	bne.n	8017c2c <HAL_UART_Init+0x60>
 8017c28:	2301      	movs	r3, #1
 8017c2a:	e01b      	b.n	8017c64 <HAL_UART_Init+0x98>
 8017c2c:	687b      	ldr	r3, [r7, #4]
 8017c2e:	681b      	ldr	r3, [r3, #0]
 8017c30:	685a      	ldr	r2, [r3, #4]
 8017c32:	687b      	ldr	r3, [r7, #4]
 8017c34:	681b      	ldr	r3, [r3, #0]
 8017c36:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8017c3a:	605a      	str	r2, [r3, #4]
 8017c3c:	687b      	ldr	r3, [r7, #4]
 8017c3e:	681b      	ldr	r3, [r3, #0]
 8017c40:	689a      	ldr	r2, [r3, #8]
 8017c42:	687b      	ldr	r3, [r7, #4]
 8017c44:	681b      	ldr	r3, [r3, #0]
 8017c46:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8017c4a:	609a      	str	r2, [r3, #8]
 8017c4c:	687b      	ldr	r3, [r7, #4]
 8017c4e:	681b      	ldr	r3, [r3, #0]
 8017c50:	681a      	ldr	r2, [r3, #0]
 8017c52:	687b      	ldr	r3, [r7, #4]
 8017c54:	681b      	ldr	r3, [r3, #0]
 8017c56:	f042 0201 	orr.w	r2, r2, #1
 8017c5a:	601a      	str	r2, [r3, #0]
 8017c5c:	6878      	ldr	r0, [r7, #4]
 8017c5e:	f001 fc5b 	bl	8019518 <UART_CheckIdleState>
 8017c62:	4603      	mov	r3, r0
 8017c64:	4618      	mov	r0, r3
 8017c66:	3708      	adds	r7, #8
 8017c68:	46bd      	mov	sp, r7
 8017c6a:	bd80      	pop	{r7, pc}

08017c6c <HAL_UART_Transmit>:
 8017c6c:	b580      	push	{r7, lr}
 8017c6e:	b08a      	sub	sp, #40	@ 0x28
 8017c70:	af02      	add	r7, sp, #8
 8017c72:	60f8      	str	r0, [r7, #12]
 8017c74:	60b9      	str	r1, [r7, #8]
 8017c76:	603b      	str	r3, [r7, #0]
 8017c78:	4613      	mov	r3, r2
 8017c7a:	80fb      	strh	r3, [r7, #6]
 8017c7c:	68fb      	ldr	r3, [r7, #12]
 8017c7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8017c82:	2b20      	cmp	r3, #32
 8017c84:	d17b      	bne.n	8017d7e <HAL_UART_Transmit+0x112>
 8017c86:	68bb      	ldr	r3, [r7, #8]
 8017c88:	2b00      	cmp	r3, #0
 8017c8a:	d002      	beq.n	8017c92 <HAL_UART_Transmit+0x26>
 8017c8c:	88fb      	ldrh	r3, [r7, #6]
 8017c8e:	2b00      	cmp	r3, #0
 8017c90:	d101      	bne.n	8017c96 <HAL_UART_Transmit+0x2a>
 8017c92:	2301      	movs	r3, #1
 8017c94:	e074      	b.n	8017d80 <HAL_UART_Transmit+0x114>
 8017c96:	68fb      	ldr	r3, [r7, #12]
 8017c98:	2200      	movs	r2, #0
 8017c9a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 8017c9e:	68fb      	ldr	r3, [r7, #12]
 8017ca0:	2221      	movs	r2, #33	@ 0x21
 8017ca2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 8017ca6:	f7f1 fac9 	bl	800923c <HAL_GetTick>
 8017caa:	6178      	str	r0, [r7, #20]
 8017cac:	68fb      	ldr	r3, [r7, #12]
 8017cae:	88fa      	ldrh	r2, [r7, #6]
 8017cb0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
 8017cb4:	68fb      	ldr	r3, [r7, #12]
 8017cb6:	88fa      	ldrh	r2, [r7, #6]
 8017cb8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 8017cbc:	68fb      	ldr	r3, [r7, #12]
 8017cbe:	689b      	ldr	r3, [r3, #8]
 8017cc0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8017cc4:	d108      	bne.n	8017cd8 <HAL_UART_Transmit+0x6c>
 8017cc6:	68fb      	ldr	r3, [r7, #12]
 8017cc8:	691b      	ldr	r3, [r3, #16]
 8017cca:	2b00      	cmp	r3, #0
 8017ccc:	d104      	bne.n	8017cd8 <HAL_UART_Transmit+0x6c>
 8017cce:	2300      	movs	r3, #0
 8017cd0:	61fb      	str	r3, [r7, #28]
 8017cd2:	68bb      	ldr	r3, [r7, #8]
 8017cd4:	61bb      	str	r3, [r7, #24]
 8017cd6:	e003      	b.n	8017ce0 <HAL_UART_Transmit+0x74>
 8017cd8:	68bb      	ldr	r3, [r7, #8]
 8017cda:	61fb      	str	r3, [r7, #28]
 8017cdc:	2300      	movs	r3, #0
 8017cde:	61bb      	str	r3, [r7, #24]
 8017ce0:	e030      	b.n	8017d44 <HAL_UART_Transmit+0xd8>
 8017ce2:	683b      	ldr	r3, [r7, #0]
 8017ce4:	9300      	str	r3, [sp, #0]
 8017ce6:	697b      	ldr	r3, [r7, #20]
 8017ce8:	2200      	movs	r2, #0
 8017cea:	2180      	movs	r1, #128	@ 0x80
 8017cec:	68f8      	ldr	r0, [r7, #12]
 8017cee:	f001 fcbd 	bl	801966c <UART_WaitOnFlagUntilTimeout>
 8017cf2:	4603      	mov	r3, r0
 8017cf4:	2b00      	cmp	r3, #0
 8017cf6:	d005      	beq.n	8017d04 <HAL_UART_Transmit+0x98>
 8017cf8:	68fb      	ldr	r3, [r7, #12]
 8017cfa:	2220      	movs	r2, #32
 8017cfc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 8017d00:	2303      	movs	r3, #3
 8017d02:	e03d      	b.n	8017d80 <HAL_UART_Transmit+0x114>
 8017d04:	69fb      	ldr	r3, [r7, #28]
 8017d06:	2b00      	cmp	r3, #0
 8017d08:	d10b      	bne.n	8017d22 <HAL_UART_Transmit+0xb6>
 8017d0a:	69bb      	ldr	r3, [r7, #24]
 8017d0c:	881b      	ldrh	r3, [r3, #0]
 8017d0e:	461a      	mov	r2, r3
 8017d10:	68fb      	ldr	r3, [r7, #12]
 8017d12:	681b      	ldr	r3, [r3, #0]
 8017d14:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8017d18:	629a      	str	r2, [r3, #40]	@ 0x28
 8017d1a:	69bb      	ldr	r3, [r7, #24]
 8017d1c:	3302      	adds	r3, #2
 8017d1e:	61bb      	str	r3, [r7, #24]
 8017d20:	e007      	b.n	8017d32 <HAL_UART_Transmit+0xc6>
 8017d22:	69fb      	ldr	r3, [r7, #28]
 8017d24:	781a      	ldrb	r2, [r3, #0]
 8017d26:	68fb      	ldr	r3, [r7, #12]
 8017d28:	681b      	ldr	r3, [r3, #0]
 8017d2a:	629a      	str	r2, [r3, #40]	@ 0x28
 8017d2c:	69fb      	ldr	r3, [r7, #28]
 8017d2e:	3301      	adds	r3, #1
 8017d30:	61fb      	str	r3, [r7, #28]
 8017d32:	68fb      	ldr	r3, [r7, #12]
 8017d34:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8017d38:	b29b      	uxth	r3, r3
 8017d3a:	3b01      	subs	r3, #1
 8017d3c:	b29a      	uxth	r2, r3
 8017d3e:	68fb      	ldr	r3, [r7, #12]
 8017d40:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 8017d44:	68fb      	ldr	r3, [r7, #12]
 8017d46:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8017d4a:	b29b      	uxth	r3, r3
 8017d4c:	2b00      	cmp	r3, #0
 8017d4e:	d1c8      	bne.n	8017ce2 <HAL_UART_Transmit+0x76>
 8017d50:	683b      	ldr	r3, [r7, #0]
 8017d52:	9300      	str	r3, [sp, #0]
 8017d54:	697b      	ldr	r3, [r7, #20]
 8017d56:	2200      	movs	r2, #0
 8017d58:	2140      	movs	r1, #64	@ 0x40
 8017d5a:	68f8      	ldr	r0, [r7, #12]
 8017d5c:	f001 fc86 	bl	801966c <UART_WaitOnFlagUntilTimeout>
 8017d60:	4603      	mov	r3, r0
 8017d62:	2b00      	cmp	r3, #0
 8017d64:	d005      	beq.n	8017d72 <HAL_UART_Transmit+0x106>
 8017d66:	68fb      	ldr	r3, [r7, #12]
 8017d68:	2220      	movs	r2, #32
 8017d6a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 8017d6e:	2303      	movs	r3, #3
 8017d70:	e006      	b.n	8017d80 <HAL_UART_Transmit+0x114>
 8017d72:	68fb      	ldr	r3, [r7, #12]
 8017d74:	2220      	movs	r2, #32
 8017d76:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 8017d7a:	2300      	movs	r3, #0
 8017d7c:	e000      	b.n	8017d80 <HAL_UART_Transmit+0x114>
 8017d7e:	2302      	movs	r3, #2
 8017d80:	4618      	mov	r0, r3
 8017d82:	3720      	adds	r7, #32
 8017d84:	46bd      	mov	sp, r7
 8017d86:	bd80      	pop	{r7, pc}

08017d88 <HAL_UART_Transmit_IT>:
 8017d88:	b480      	push	{r7}
 8017d8a:	b091      	sub	sp, #68	@ 0x44
 8017d8c:	af00      	add	r7, sp, #0
 8017d8e:	60f8      	str	r0, [r7, #12]
 8017d90:	60b9      	str	r1, [r7, #8]
 8017d92:	4613      	mov	r3, r2
 8017d94:	80fb      	strh	r3, [r7, #6]
 8017d96:	68fb      	ldr	r3, [r7, #12]
 8017d98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8017d9c:	2b20      	cmp	r3, #32
 8017d9e:	d178      	bne.n	8017e92 <HAL_UART_Transmit_IT+0x10a>
 8017da0:	68bb      	ldr	r3, [r7, #8]
 8017da2:	2b00      	cmp	r3, #0
 8017da4:	d002      	beq.n	8017dac <HAL_UART_Transmit_IT+0x24>
 8017da6:	88fb      	ldrh	r3, [r7, #6]
 8017da8:	2b00      	cmp	r3, #0
 8017daa:	d101      	bne.n	8017db0 <HAL_UART_Transmit_IT+0x28>
 8017dac:	2301      	movs	r3, #1
 8017dae:	e071      	b.n	8017e94 <HAL_UART_Transmit_IT+0x10c>
 8017db0:	68fb      	ldr	r3, [r7, #12]
 8017db2:	68ba      	ldr	r2, [r7, #8]
 8017db4:	651a      	str	r2, [r3, #80]	@ 0x50
 8017db6:	68fb      	ldr	r3, [r7, #12]
 8017db8:	88fa      	ldrh	r2, [r7, #6]
 8017dba:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
 8017dbe:	68fb      	ldr	r3, [r7, #12]
 8017dc0:	88fa      	ldrh	r2, [r7, #6]
 8017dc2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 8017dc6:	68fb      	ldr	r3, [r7, #12]
 8017dc8:	2200      	movs	r2, #0
 8017dca:	679a      	str	r2, [r3, #120]	@ 0x78
 8017dcc:	68fb      	ldr	r3, [r7, #12]
 8017dce:	2200      	movs	r2, #0
 8017dd0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 8017dd4:	68fb      	ldr	r3, [r7, #12]
 8017dd6:	2221      	movs	r2, #33	@ 0x21
 8017dd8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 8017ddc:	68fb      	ldr	r3, [r7, #12]
 8017dde:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8017de0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8017de4:	d12a      	bne.n	8017e3c <HAL_UART_Transmit_IT+0xb4>
 8017de6:	68fb      	ldr	r3, [r7, #12]
 8017de8:	689b      	ldr	r3, [r3, #8]
 8017dea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8017dee:	d107      	bne.n	8017e00 <HAL_UART_Transmit_IT+0x78>
 8017df0:	68fb      	ldr	r3, [r7, #12]
 8017df2:	691b      	ldr	r3, [r3, #16]
 8017df4:	2b00      	cmp	r3, #0
 8017df6:	d103      	bne.n	8017e00 <HAL_UART_Transmit_IT+0x78>
 8017df8:	68fb      	ldr	r3, [r7, #12]
 8017dfa:	4a29      	ldr	r2, [pc, #164]	@ (8017ea0 <HAL_UART_Transmit_IT+0x118>)
 8017dfc:	679a      	str	r2, [r3, #120]	@ 0x78
 8017dfe:	e002      	b.n	8017e06 <HAL_UART_Transmit_IT+0x7e>
 8017e00:	68fb      	ldr	r3, [r7, #12]
 8017e02:	4a28      	ldr	r2, [pc, #160]	@ (8017ea4 <HAL_UART_Transmit_IT+0x11c>)
 8017e04:	679a      	str	r2, [r3, #120]	@ 0x78
 8017e06:	68fb      	ldr	r3, [r7, #12]
 8017e08:	681b      	ldr	r3, [r3, #0]
 8017e0a:	3308      	adds	r3, #8
 8017e0c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8017e0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017e10:	e853 3f00 	ldrex	r3, [r3]
 8017e14:	627b      	str	r3, [r7, #36]	@ 0x24
 8017e16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017e18:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8017e1c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8017e1e:	68fb      	ldr	r3, [r7, #12]
 8017e20:	681b      	ldr	r3, [r3, #0]
 8017e22:	3308      	adds	r3, #8
 8017e24:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8017e26:	637a      	str	r2, [r7, #52]	@ 0x34
 8017e28:	633b      	str	r3, [r7, #48]	@ 0x30
 8017e2a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8017e2c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8017e2e:	e841 2300 	strex	r3, r2, [r1]
 8017e32:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8017e34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017e36:	2b00      	cmp	r3, #0
 8017e38:	d1e5      	bne.n	8017e06 <HAL_UART_Transmit_IT+0x7e>
 8017e3a:	e028      	b.n	8017e8e <HAL_UART_Transmit_IT+0x106>
 8017e3c:	68fb      	ldr	r3, [r7, #12]
 8017e3e:	689b      	ldr	r3, [r3, #8]
 8017e40:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8017e44:	d107      	bne.n	8017e56 <HAL_UART_Transmit_IT+0xce>
 8017e46:	68fb      	ldr	r3, [r7, #12]
 8017e48:	691b      	ldr	r3, [r3, #16]
 8017e4a:	2b00      	cmp	r3, #0
 8017e4c:	d103      	bne.n	8017e56 <HAL_UART_Transmit_IT+0xce>
 8017e4e:	68fb      	ldr	r3, [r7, #12]
 8017e50:	4a15      	ldr	r2, [pc, #84]	@ (8017ea8 <HAL_UART_Transmit_IT+0x120>)
 8017e52:	679a      	str	r2, [r3, #120]	@ 0x78
 8017e54:	e002      	b.n	8017e5c <HAL_UART_Transmit_IT+0xd4>
 8017e56:	68fb      	ldr	r3, [r7, #12]
 8017e58:	4a14      	ldr	r2, [pc, #80]	@ (8017eac <HAL_UART_Transmit_IT+0x124>)
 8017e5a:	679a      	str	r2, [r3, #120]	@ 0x78
 8017e5c:	68fb      	ldr	r3, [r7, #12]
 8017e5e:	681b      	ldr	r3, [r3, #0]
 8017e60:	617b      	str	r3, [r7, #20]
 8017e62:	697b      	ldr	r3, [r7, #20]
 8017e64:	e853 3f00 	ldrex	r3, [r3]
 8017e68:	613b      	str	r3, [r7, #16]
 8017e6a:	693b      	ldr	r3, [r7, #16]
 8017e6c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8017e70:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8017e72:	68fb      	ldr	r3, [r7, #12]
 8017e74:	681b      	ldr	r3, [r3, #0]
 8017e76:	461a      	mov	r2, r3
 8017e78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017e7a:	623b      	str	r3, [r7, #32]
 8017e7c:	61fa      	str	r2, [r7, #28]
 8017e7e:	69f9      	ldr	r1, [r7, #28]
 8017e80:	6a3a      	ldr	r2, [r7, #32]
 8017e82:	e841 2300 	strex	r3, r2, [r1]
 8017e86:	61bb      	str	r3, [r7, #24]
 8017e88:	69bb      	ldr	r3, [r7, #24]
 8017e8a:	2b00      	cmp	r3, #0
 8017e8c:	d1e6      	bne.n	8017e5c <HAL_UART_Transmit_IT+0xd4>
 8017e8e:	2300      	movs	r3, #0
 8017e90:	e000      	b.n	8017e94 <HAL_UART_Transmit_IT+0x10c>
 8017e92:	2302      	movs	r3, #2
 8017e94:	4618      	mov	r0, r3
 8017e96:	3744      	adds	r7, #68	@ 0x44
 8017e98:	46bd      	mov	sp, r7
 8017e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e9e:	4770      	bx	lr
 8017ea0:	08019cdf 	.word	0x08019cdf
 8017ea4:	08019bff 	.word	0x08019bff
 8017ea8:	08019b3d 	.word	0x08019b3d
 8017eac:	08019a85 	.word	0x08019a85

08017eb0 <HAL_UART_Receive_IT>:
 8017eb0:	b580      	push	{r7, lr}
 8017eb2:	b08a      	sub	sp, #40	@ 0x28
 8017eb4:	af00      	add	r7, sp, #0
 8017eb6:	60f8      	str	r0, [r7, #12]
 8017eb8:	60b9      	str	r1, [r7, #8]
 8017eba:	4613      	mov	r3, r2
 8017ebc:	80fb      	strh	r3, [r7, #6]
 8017ebe:	68fb      	ldr	r3, [r7, #12]
 8017ec0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8017ec4:	2b20      	cmp	r3, #32
 8017ec6:	d137      	bne.n	8017f38 <HAL_UART_Receive_IT+0x88>
 8017ec8:	68bb      	ldr	r3, [r7, #8]
 8017eca:	2b00      	cmp	r3, #0
 8017ecc:	d002      	beq.n	8017ed4 <HAL_UART_Receive_IT+0x24>
 8017ece:	88fb      	ldrh	r3, [r7, #6]
 8017ed0:	2b00      	cmp	r3, #0
 8017ed2:	d101      	bne.n	8017ed8 <HAL_UART_Receive_IT+0x28>
 8017ed4:	2301      	movs	r3, #1
 8017ed6:	e030      	b.n	8017f3a <HAL_UART_Receive_IT+0x8a>
 8017ed8:	68fb      	ldr	r3, [r7, #12]
 8017eda:	2200      	movs	r2, #0
 8017edc:	66da      	str	r2, [r3, #108]	@ 0x6c
 8017ede:	68fb      	ldr	r3, [r7, #12]
 8017ee0:	681b      	ldr	r3, [r3, #0]
 8017ee2:	4a18      	ldr	r2, [pc, #96]	@ (8017f44 <HAL_UART_Receive_IT+0x94>)
 8017ee4:	4293      	cmp	r3, r2
 8017ee6:	d01f      	beq.n	8017f28 <HAL_UART_Receive_IT+0x78>
 8017ee8:	68fb      	ldr	r3, [r7, #12]
 8017eea:	681b      	ldr	r3, [r3, #0]
 8017eec:	685b      	ldr	r3, [r3, #4]
 8017eee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8017ef2:	2b00      	cmp	r3, #0
 8017ef4:	d018      	beq.n	8017f28 <HAL_UART_Receive_IT+0x78>
 8017ef6:	68fb      	ldr	r3, [r7, #12]
 8017ef8:	681b      	ldr	r3, [r3, #0]
 8017efa:	617b      	str	r3, [r7, #20]
 8017efc:	697b      	ldr	r3, [r7, #20]
 8017efe:	e853 3f00 	ldrex	r3, [r3]
 8017f02:	613b      	str	r3, [r7, #16]
 8017f04:	693b      	ldr	r3, [r7, #16]
 8017f06:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8017f0a:	627b      	str	r3, [r7, #36]	@ 0x24
 8017f0c:	68fb      	ldr	r3, [r7, #12]
 8017f0e:	681b      	ldr	r3, [r3, #0]
 8017f10:	461a      	mov	r2, r3
 8017f12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017f14:	623b      	str	r3, [r7, #32]
 8017f16:	61fa      	str	r2, [r7, #28]
 8017f18:	69f9      	ldr	r1, [r7, #28]
 8017f1a:	6a3a      	ldr	r2, [r7, #32]
 8017f1c:	e841 2300 	strex	r3, r2, [r1]
 8017f20:	61bb      	str	r3, [r7, #24]
 8017f22:	69bb      	ldr	r3, [r7, #24]
 8017f24:	2b00      	cmp	r3, #0
 8017f26:	d1e6      	bne.n	8017ef6 <HAL_UART_Receive_IT+0x46>
 8017f28:	88fb      	ldrh	r3, [r7, #6]
 8017f2a:	461a      	mov	r2, r3
 8017f2c:	68b9      	ldr	r1, [r7, #8]
 8017f2e:	68f8      	ldr	r0, [r7, #12]
 8017f30:	f001 fc0a 	bl	8019748 <UART_Start_Receive_IT>
 8017f34:	4603      	mov	r3, r0
 8017f36:	e000      	b.n	8017f3a <HAL_UART_Receive_IT+0x8a>
 8017f38:	2302      	movs	r3, #2
 8017f3a:	4618      	mov	r0, r3
 8017f3c:	3728      	adds	r7, #40	@ 0x28
 8017f3e:	46bd      	mov	sp, r7
 8017f40:	bd80      	pop	{r7, pc}
 8017f42:	bf00      	nop
 8017f44:	58000c00 	.word	0x58000c00

08017f48 <HAL_UART_IRQHandler>:
 8017f48:	b580      	push	{r7, lr}
 8017f4a:	b0ba      	sub	sp, #232	@ 0xe8
 8017f4c:	af00      	add	r7, sp, #0
 8017f4e:	6078      	str	r0, [r7, #4]
 8017f50:	687b      	ldr	r3, [r7, #4]
 8017f52:	681b      	ldr	r3, [r3, #0]
 8017f54:	69db      	ldr	r3, [r3, #28]
 8017f56:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8017f5a:	687b      	ldr	r3, [r7, #4]
 8017f5c:	681b      	ldr	r3, [r3, #0]
 8017f5e:	681b      	ldr	r3, [r3, #0]
 8017f60:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8017f64:	687b      	ldr	r3, [r7, #4]
 8017f66:	681b      	ldr	r3, [r3, #0]
 8017f68:	689b      	ldr	r3, [r3, #8]
 8017f6a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8017f6e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8017f72:	f640 030f 	movw	r3, #2063	@ 0x80f
 8017f76:	4013      	ands	r3, r2
 8017f78:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8017f7c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8017f80:	2b00      	cmp	r3, #0
 8017f82:	d11b      	bne.n	8017fbc <HAL_UART_IRQHandler+0x74>
 8017f84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8017f88:	f003 0320 	and.w	r3, r3, #32
 8017f8c:	2b00      	cmp	r3, #0
 8017f8e:	d015      	beq.n	8017fbc <HAL_UART_IRQHandler+0x74>
 8017f90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8017f94:	f003 0320 	and.w	r3, r3, #32
 8017f98:	2b00      	cmp	r3, #0
 8017f9a:	d105      	bne.n	8017fa8 <HAL_UART_IRQHandler+0x60>
 8017f9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8017fa0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8017fa4:	2b00      	cmp	r3, #0
 8017fa6:	d009      	beq.n	8017fbc <HAL_UART_IRQHandler+0x74>
 8017fa8:	687b      	ldr	r3, [r7, #4]
 8017faa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017fac:	2b00      	cmp	r3, #0
 8017fae:	f000 8377 	beq.w	80186a0 <HAL_UART_IRQHandler+0x758>
 8017fb2:	687b      	ldr	r3, [r7, #4]
 8017fb4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017fb6:	6878      	ldr	r0, [r7, #4]
 8017fb8:	4798      	blx	r3
 8017fba:	e371      	b.n	80186a0 <HAL_UART_IRQHandler+0x758>
 8017fbc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8017fc0:	2b00      	cmp	r3, #0
 8017fc2:	f000 8123 	beq.w	801820c <HAL_UART_IRQHandler+0x2c4>
 8017fc6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8017fca:	4b8d      	ldr	r3, [pc, #564]	@ (8018200 <HAL_UART_IRQHandler+0x2b8>)
 8017fcc:	4013      	ands	r3, r2
 8017fce:	2b00      	cmp	r3, #0
 8017fd0:	d106      	bne.n	8017fe0 <HAL_UART_IRQHandler+0x98>
 8017fd2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8017fd6:	4b8b      	ldr	r3, [pc, #556]	@ (8018204 <HAL_UART_IRQHandler+0x2bc>)
 8017fd8:	4013      	ands	r3, r2
 8017fda:	2b00      	cmp	r3, #0
 8017fdc:	f000 8116 	beq.w	801820c <HAL_UART_IRQHandler+0x2c4>
 8017fe0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8017fe4:	f003 0301 	and.w	r3, r3, #1
 8017fe8:	2b00      	cmp	r3, #0
 8017fea:	d011      	beq.n	8018010 <HAL_UART_IRQHandler+0xc8>
 8017fec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8017ff0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8017ff4:	2b00      	cmp	r3, #0
 8017ff6:	d00b      	beq.n	8018010 <HAL_UART_IRQHandler+0xc8>
 8017ff8:	687b      	ldr	r3, [r7, #4]
 8017ffa:	681b      	ldr	r3, [r3, #0]
 8017ffc:	2201      	movs	r2, #1
 8017ffe:	621a      	str	r2, [r3, #32]
 8018000:	687b      	ldr	r3, [r7, #4]
 8018002:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8018006:	f043 0201 	orr.w	r2, r3, #1
 801800a:	687b      	ldr	r3, [r7, #4]
 801800c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 8018010:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8018014:	f003 0302 	and.w	r3, r3, #2
 8018018:	2b00      	cmp	r3, #0
 801801a:	d011      	beq.n	8018040 <HAL_UART_IRQHandler+0xf8>
 801801c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8018020:	f003 0301 	and.w	r3, r3, #1
 8018024:	2b00      	cmp	r3, #0
 8018026:	d00b      	beq.n	8018040 <HAL_UART_IRQHandler+0xf8>
 8018028:	687b      	ldr	r3, [r7, #4]
 801802a:	681b      	ldr	r3, [r3, #0]
 801802c:	2202      	movs	r2, #2
 801802e:	621a      	str	r2, [r3, #32]
 8018030:	687b      	ldr	r3, [r7, #4]
 8018032:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8018036:	f043 0204 	orr.w	r2, r3, #4
 801803a:	687b      	ldr	r3, [r7, #4]
 801803c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 8018040:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8018044:	f003 0304 	and.w	r3, r3, #4
 8018048:	2b00      	cmp	r3, #0
 801804a:	d011      	beq.n	8018070 <HAL_UART_IRQHandler+0x128>
 801804c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8018050:	f003 0301 	and.w	r3, r3, #1
 8018054:	2b00      	cmp	r3, #0
 8018056:	d00b      	beq.n	8018070 <HAL_UART_IRQHandler+0x128>
 8018058:	687b      	ldr	r3, [r7, #4]
 801805a:	681b      	ldr	r3, [r3, #0]
 801805c:	2204      	movs	r2, #4
 801805e:	621a      	str	r2, [r3, #32]
 8018060:	687b      	ldr	r3, [r7, #4]
 8018062:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8018066:	f043 0202 	orr.w	r2, r3, #2
 801806a:	687b      	ldr	r3, [r7, #4]
 801806c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 8018070:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8018074:	f003 0308 	and.w	r3, r3, #8
 8018078:	2b00      	cmp	r3, #0
 801807a:	d017      	beq.n	80180ac <HAL_UART_IRQHandler+0x164>
 801807c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8018080:	f003 0320 	and.w	r3, r3, #32
 8018084:	2b00      	cmp	r3, #0
 8018086:	d105      	bne.n	8018094 <HAL_UART_IRQHandler+0x14c>
 8018088:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 801808c:	4b5c      	ldr	r3, [pc, #368]	@ (8018200 <HAL_UART_IRQHandler+0x2b8>)
 801808e:	4013      	ands	r3, r2
 8018090:	2b00      	cmp	r3, #0
 8018092:	d00b      	beq.n	80180ac <HAL_UART_IRQHandler+0x164>
 8018094:	687b      	ldr	r3, [r7, #4]
 8018096:	681b      	ldr	r3, [r3, #0]
 8018098:	2208      	movs	r2, #8
 801809a:	621a      	str	r2, [r3, #32]
 801809c:	687b      	ldr	r3, [r7, #4]
 801809e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80180a2:	f043 0208 	orr.w	r2, r3, #8
 80180a6:	687b      	ldr	r3, [r7, #4]
 80180a8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 80180ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80180b0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80180b4:	2b00      	cmp	r3, #0
 80180b6:	d012      	beq.n	80180de <HAL_UART_IRQHandler+0x196>
 80180b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80180bc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80180c0:	2b00      	cmp	r3, #0
 80180c2:	d00c      	beq.n	80180de <HAL_UART_IRQHandler+0x196>
 80180c4:	687b      	ldr	r3, [r7, #4]
 80180c6:	681b      	ldr	r3, [r3, #0]
 80180c8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80180cc:	621a      	str	r2, [r3, #32]
 80180ce:	687b      	ldr	r3, [r7, #4]
 80180d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80180d4:	f043 0220 	orr.w	r2, r3, #32
 80180d8:	687b      	ldr	r3, [r7, #4]
 80180da:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 80180de:	687b      	ldr	r3, [r7, #4]
 80180e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80180e4:	2b00      	cmp	r3, #0
 80180e6:	f000 82dd 	beq.w	80186a4 <HAL_UART_IRQHandler+0x75c>
 80180ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80180ee:	f003 0320 	and.w	r3, r3, #32
 80180f2:	2b00      	cmp	r3, #0
 80180f4:	d013      	beq.n	801811e <HAL_UART_IRQHandler+0x1d6>
 80180f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80180fa:	f003 0320 	and.w	r3, r3, #32
 80180fe:	2b00      	cmp	r3, #0
 8018100:	d105      	bne.n	801810e <HAL_UART_IRQHandler+0x1c6>
 8018102:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8018106:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 801810a:	2b00      	cmp	r3, #0
 801810c:	d007      	beq.n	801811e <HAL_UART_IRQHandler+0x1d6>
 801810e:	687b      	ldr	r3, [r7, #4]
 8018110:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8018112:	2b00      	cmp	r3, #0
 8018114:	d003      	beq.n	801811e <HAL_UART_IRQHandler+0x1d6>
 8018116:	687b      	ldr	r3, [r7, #4]
 8018118:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801811a:	6878      	ldr	r0, [r7, #4]
 801811c:	4798      	blx	r3
 801811e:	687b      	ldr	r3, [r7, #4]
 8018120:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8018124:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8018128:	687b      	ldr	r3, [r7, #4]
 801812a:	681b      	ldr	r3, [r3, #0]
 801812c:	689b      	ldr	r3, [r3, #8]
 801812e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8018132:	2b40      	cmp	r3, #64	@ 0x40
 8018134:	d005      	beq.n	8018142 <HAL_UART_IRQHandler+0x1fa>
 8018136:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 801813a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 801813e:	2b00      	cmp	r3, #0
 8018140:	d054      	beq.n	80181ec <HAL_UART_IRQHandler+0x2a4>
 8018142:	6878      	ldr	r0, [r7, #4]
 8018144:	f001 fc22 	bl	801998c <UART_EndRxTransfer>
 8018148:	687b      	ldr	r3, [r7, #4]
 801814a:	681b      	ldr	r3, [r3, #0]
 801814c:	689b      	ldr	r3, [r3, #8]
 801814e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8018152:	2b40      	cmp	r3, #64	@ 0x40
 8018154:	d146      	bne.n	80181e4 <HAL_UART_IRQHandler+0x29c>
 8018156:	687b      	ldr	r3, [r7, #4]
 8018158:	681b      	ldr	r3, [r3, #0]
 801815a:	3308      	adds	r3, #8
 801815c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8018160:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8018164:	e853 3f00 	ldrex	r3, [r3]
 8018168:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 801816c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8018170:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8018174:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8018178:	687b      	ldr	r3, [r7, #4]
 801817a:	681b      	ldr	r3, [r3, #0]
 801817c:	3308      	adds	r3, #8
 801817e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8018182:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8018186:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 801818a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 801818e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8018192:	e841 2300 	strex	r3, r2, [r1]
 8018196:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 801819a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801819e:	2b00      	cmp	r3, #0
 80181a0:	d1d9      	bne.n	8018156 <HAL_UART_IRQHandler+0x20e>
 80181a2:	687b      	ldr	r3, [r7, #4]
 80181a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80181a8:	2b00      	cmp	r3, #0
 80181aa:	d017      	beq.n	80181dc <HAL_UART_IRQHandler+0x294>
 80181ac:	687b      	ldr	r3, [r7, #4]
 80181ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80181b2:	4a15      	ldr	r2, [pc, #84]	@ (8018208 <HAL_UART_IRQHandler+0x2c0>)
 80181b4:	651a      	str	r2, [r3, #80]	@ 0x50
 80181b6:	687b      	ldr	r3, [r7, #4]
 80181b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80181bc:	4618      	mov	r0, r3
 80181be:	f7f4 fa75 	bl	800c6ac <HAL_DMA_Abort_IT>
 80181c2:	4603      	mov	r3, r0
 80181c4:	2b00      	cmp	r3, #0
 80181c6:	d019      	beq.n	80181fc <HAL_UART_IRQHandler+0x2b4>
 80181c8:	687b      	ldr	r3, [r7, #4]
 80181ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80181ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80181d0:	687a      	ldr	r2, [r7, #4]
 80181d2:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80181d6:	4610      	mov	r0, r2
 80181d8:	4798      	blx	r3
 80181da:	e00f      	b.n	80181fc <HAL_UART_IRQHandler+0x2b4>
 80181dc:	6878      	ldr	r0, [r7, #4]
 80181de:	f000 fa77 	bl	80186d0 <HAL_UART_ErrorCallback>
 80181e2:	e00b      	b.n	80181fc <HAL_UART_IRQHandler+0x2b4>
 80181e4:	6878      	ldr	r0, [r7, #4]
 80181e6:	f000 fa73 	bl	80186d0 <HAL_UART_ErrorCallback>
 80181ea:	e007      	b.n	80181fc <HAL_UART_IRQHandler+0x2b4>
 80181ec:	6878      	ldr	r0, [r7, #4]
 80181ee:	f000 fa6f 	bl	80186d0 <HAL_UART_ErrorCallback>
 80181f2:	687b      	ldr	r3, [r7, #4]
 80181f4:	2200      	movs	r2, #0
 80181f6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 80181fa:	e253      	b.n	80186a4 <HAL_UART_IRQHandler+0x75c>
 80181fc:	bf00      	nop
 80181fe:	e251      	b.n	80186a4 <HAL_UART_IRQHandler+0x75c>
 8018200:	10000001 	.word	0x10000001
 8018204:	04000120 	.word	0x04000120
 8018208:	08019a59 	.word	0x08019a59
 801820c:	687b      	ldr	r3, [r7, #4]
 801820e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018210:	2b01      	cmp	r3, #1
 8018212:	f040 81e7 	bne.w	80185e4 <HAL_UART_IRQHandler+0x69c>
 8018216:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801821a:	f003 0310 	and.w	r3, r3, #16
 801821e:	2b00      	cmp	r3, #0
 8018220:	f000 81e0 	beq.w	80185e4 <HAL_UART_IRQHandler+0x69c>
 8018224:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8018228:	f003 0310 	and.w	r3, r3, #16
 801822c:	2b00      	cmp	r3, #0
 801822e:	f000 81d9 	beq.w	80185e4 <HAL_UART_IRQHandler+0x69c>
 8018232:	687b      	ldr	r3, [r7, #4]
 8018234:	681b      	ldr	r3, [r3, #0]
 8018236:	2210      	movs	r2, #16
 8018238:	621a      	str	r2, [r3, #32]
 801823a:	687b      	ldr	r3, [r7, #4]
 801823c:	681b      	ldr	r3, [r3, #0]
 801823e:	689b      	ldr	r3, [r3, #8]
 8018240:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8018244:	2b40      	cmp	r3, #64	@ 0x40
 8018246:	f040 8151 	bne.w	80184ec <HAL_UART_IRQHandler+0x5a4>
 801824a:	687b      	ldr	r3, [r7, #4]
 801824c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8018250:	681b      	ldr	r3, [r3, #0]
 8018252:	4a96      	ldr	r2, [pc, #600]	@ (80184ac <HAL_UART_IRQHandler+0x564>)
 8018254:	4293      	cmp	r3, r2
 8018256:	d068      	beq.n	801832a <HAL_UART_IRQHandler+0x3e2>
 8018258:	687b      	ldr	r3, [r7, #4]
 801825a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801825e:	681b      	ldr	r3, [r3, #0]
 8018260:	4a93      	ldr	r2, [pc, #588]	@ (80184b0 <HAL_UART_IRQHandler+0x568>)
 8018262:	4293      	cmp	r3, r2
 8018264:	d061      	beq.n	801832a <HAL_UART_IRQHandler+0x3e2>
 8018266:	687b      	ldr	r3, [r7, #4]
 8018268:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801826c:	681b      	ldr	r3, [r3, #0]
 801826e:	4a91      	ldr	r2, [pc, #580]	@ (80184b4 <HAL_UART_IRQHandler+0x56c>)
 8018270:	4293      	cmp	r3, r2
 8018272:	d05a      	beq.n	801832a <HAL_UART_IRQHandler+0x3e2>
 8018274:	687b      	ldr	r3, [r7, #4]
 8018276:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801827a:	681b      	ldr	r3, [r3, #0]
 801827c:	4a8e      	ldr	r2, [pc, #568]	@ (80184b8 <HAL_UART_IRQHandler+0x570>)
 801827e:	4293      	cmp	r3, r2
 8018280:	d053      	beq.n	801832a <HAL_UART_IRQHandler+0x3e2>
 8018282:	687b      	ldr	r3, [r7, #4]
 8018284:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8018288:	681b      	ldr	r3, [r3, #0]
 801828a:	4a8c      	ldr	r2, [pc, #560]	@ (80184bc <HAL_UART_IRQHandler+0x574>)
 801828c:	4293      	cmp	r3, r2
 801828e:	d04c      	beq.n	801832a <HAL_UART_IRQHandler+0x3e2>
 8018290:	687b      	ldr	r3, [r7, #4]
 8018292:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8018296:	681b      	ldr	r3, [r3, #0]
 8018298:	4a89      	ldr	r2, [pc, #548]	@ (80184c0 <HAL_UART_IRQHandler+0x578>)
 801829a:	4293      	cmp	r3, r2
 801829c:	d045      	beq.n	801832a <HAL_UART_IRQHandler+0x3e2>
 801829e:	687b      	ldr	r3, [r7, #4]
 80182a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80182a4:	681b      	ldr	r3, [r3, #0]
 80182a6:	4a87      	ldr	r2, [pc, #540]	@ (80184c4 <HAL_UART_IRQHandler+0x57c>)
 80182a8:	4293      	cmp	r3, r2
 80182aa:	d03e      	beq.n	801832a <HAL_UART_IRQHandler+0x3e2>
 80182ac:	687b      	ldr	r3, [r7, #4]
 80182ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80182b2:	681b      	ldr	r3, [r3, #0]
 80182b4:	4a84      	ldr	r2, [pc, #528]	@ (80184c8 <HAL_UART_IRQHandler+0x580>)
 80182b6:	4293      	cmp	r3, r2
 80182b8:	d037      	beq.n	801832a <HAL_UART_IRQHandler+0x3e2>
 80182ba:	687b      	ldr	r3, [r7, #4]
 80182bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80182c0:	681b      	ldr	r3, [r3, #0]
 80182c2:	4a82      	ldr	r2, [pc, #520]	@ (80184cc <HAL_UART_IRQHandler+0x584>)
 80182c4:	4293      	cmp	r3, r2
 80182c6:	d030      	beq.n	801832a <HAL_UART_IRQHandler+0x3e2>
 80182c8:	687b      	ldr	r3, [r7, #4]
 80182ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80182ce:	681b      	ldr	r3, [r3, #0]
 80182d0:	4a7f      	ldr	r2, [pc, #508]	@ (80184d0 <HAL_UART_IRQHandler+0x588>)
 80182d2:	4293      	cmp	r3, r2
 80182d4:	d029      	beq.n	801832a <HAL_UART_IRQHandler+0x3e2>
 80182d6:	687b      	ldr	r3, [r7, #4]
 80182d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80182dc:	681b      	ldr	r3, [r3, #0]
 80182de:	4a7d      	ldr	r2, [pc, #500]	@ (80184d4 <HAL_UART_IRQHandler+0x58c>)
 80182e0:	4293      	cmp	r3, r2
 80182e2:	d022      	beq.n	801832a <HAL_UART_IRQHandler+0x3e2>
 80182e4:	687b      	ldr	r3, [r7, #4]
 80182e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80182ea:	681b      	ldr	r3, [r3, #0]
 80182ec:	4a7a      	ldr	r2, [pc, #488]	@ (80184d8 <HAL_UART_IRQHandler+0x590>)
 80182ee:	4293      	cmp	r3, r2
 80182f0:	d01b      	beq.n	801832a <HAL_UART_IRQHandler+0x3e2>
 80182f2:	687b      	ldr	r3, [r7, #4]
 80182f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80182f8:	681b      	ldr	r3, [r3, #0]
 80182fa:	4a78      	ldr	r2, [pc, #480]	@ (80184dc <HAL_UART_IRQHandler+0x594>)
 80182fc:	4293      	cmp	r3, r2
 80182fe:	d014      	beq.n	801832a <HAL_UART_IRQHandler+0x3e2>
 8018300:	687b      	ldr	r3, [r7, #4]
 8018302:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8018306:	681b      	ldr	r3, [r3, #0]
 8018308:	4a75      	ldr	r2, [pc, #468]	@ (80184e0 <HAL_UART_IRQHandler+0x598>)
 801830a:	4293      	cmp	r3, r2
 801830c:	d00d      	beq.n	801832a <HAL_UART_IRQHandler+0x3e2>
 801830e:	687b      	ldr	r3, [r7, #4]
 8018310:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8018314:	681b      	ldr	r3, [r3, #0]
 8018316:	4a73      	ldr	r2, [pc, #460]	@ (80184e4 <HAL_UART_IRQHandler+0x59c>)
 8018318:	4293      	cmp	r3, r2
 801831a:	d006      	beq.n	801832a <HAL_UART_IRQHandler+0x3e2>
 801831c:	687b      	ldr	r3, [r7, #4]
 801831e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8018322:	681b      	ldr	r3, [r3, #0]
 8018324:	4a70      	ldr	r2, [pc, #448]	@ (80184e8 <HAL_UART_IRQHandler+0x5a0>)
 8018326:	4293      	cmp	r3, r2
 8018328:	d106      	bne.n	8018338 <HAL_UART_IRQHandler+0x3f0>
 801832a:	687b      	ldr	r3, [r7, #4]
 801832c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8018330:	681b      	ldr	r3, [r3, #0]
 8018332:	685b      	ldr	r3, [r3, #4]
 8018334:	b29b      	uxth	r3, r3
 8018336:	e005      	b.n	8018344 <HAL_UART_IRQHandler+0x3fc>
 8018338:	687b      	ldr	r3, [r7, #4]
 801833a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801833e:	681b      	ldr	r3, [r3, #0]
 8018340:	685b      	ldr	r3, [r3, #4]
 8018342:	b29b      	uxth	r3, r3
 8018344:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
 8018348:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 801834c:	2b00      	cmp	r3, #0
 801834e:	f000 81ab 	beq.w	80186a8 <HAL_UART_IRQHandler+0x760>
 8018352:	687b      	ldr	r3, [r7, #4]
 8018354:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8018358:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 801835c:	429a      	cmp	r2, r3
 801835e:	f080 81a3 	bcs.w	80186a8 <HAL_UART_IRQHandler+0x760>
 8018362:	687b      	ldr	r3, [r7, #4]
 8018364:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8018368:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
 801836c:	687b      	ldr	r3, [r7, #4]
 801836e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8018372:	69db      	ldr	r3, [r3, #28]
 8018374:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8018378:	f000 8087 	beq.w	801848a <HAL_UART_IRQHandler+0x542>
 801837c:	687b      	ldr	r3, [r7, #4]
 801837e:	681b      	ldr	r3, [r3, #0]
 8018380:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8018384:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8018388:	e853 3f00 	ldrex	r3, [r3]
 801838c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8018390:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8018394:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8018398:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 801839c:	687b      	ldr	r3, [r7, #4]
 801839e:	681b      	ldr	r3, [r3, #0]
 80183a0:	461a      	mov	r2, r3
 80183a2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80183a6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80183aa:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 80183ae:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80183b2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80183b6:	e841 2300 	strex	r3, r2, [r1]
 80183ba:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80183be:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80183c2:	2b00      	cmp	r3, #0
 80183c4:	d1da      	bne.n	801837c <HAL_UART_IRQHandler+0x434>
 80183c6:	687b      	ldr	r3, [r7, #4]
 80183c8:	681b      	ldr	r3, [r3, #0]
 80183ca:	3308      	adds	r3, #8
 80183cc:	677b      	str	r3, [r7, #116]	@ 0x74
 80183ce:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80183d0:	e853 3f00 	ldrex	r3, [r3]
 80183d4:	673b      	str	r3, [r7, #112]	@ 0x70
 80183d6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80183d8:	f023 0301 	bic.w	r3, r3, #1
 80183dc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80183e0:	687b      	ldr	r3, [r7, #4]
 80183e2:	681b      	ldr	r3, [r3, #0]
 80183e4:	3308      	adds	r3, #8
 80183e6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80183ea:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80183ee:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80183f0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80183f2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80183f6:	e841 2300 	strex	r3, r2, [r1]
 80183fa:	67bb      	str	r3, [r7, #120]	@ 0x78
 80183fc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80183fe:	2b00      	cmp	r3, #0
 8018400:	d1e1      	bne.n	80183c6 <HAL_UART_IRQHandler+0x47e>
 8018402:	687b      	ldr	r3, [r7, #4]
 8018404:	681b      	ldr	r3, [r3, #0]
 8018406:	3308      	adds	r3, #8
 8018408:	663b      	str	r3, [r7, #96]	@ 0x60
 801840a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801840c:	e853 3f00 	ldrex	r3, [r3]
 8018410:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8018412:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8018414:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8018418:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 801841c:	687b      	ldr	r3, [r7, #4]
 801841e:	681b      	ldr	r3, [r3, #0]
 8018420:	3308      	adds	r3, #8
 8018422:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8018426:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8018428:	66bb      	str	r3, [r7, #104]	@ 0x68
 801842a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 801842c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 801842e:	e841 2300 	strex	r3, r2, [r1]
 8018432:	667b      	str	r3, [r7, #100]	@ 0x64
 8018434:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8018436:	2b00      	cmp	r3, #0
 8018438:	d1e3      	bne.n	8018402 <HAL_UART_IRQHandler+0x4ba>
 801843a:	687b      	ldr	r3, [r7, #4]
 801843c:	2220      	movs	r2, #32
 801843e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 8018442:	687b      	ldr	r3, [r7, #4]
 8018444:	2200      	movs	r2, #0
 8018446:	66da      	str	r2, [r3, #108]	@ 0x6c
 8018448:	687b      	ldr	r3, [r7, #4]
 801844a:	681b      	ldr	r3, [r3, #0]
 801844c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801844e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018450:	e853 3f00 	ldrex	r3, [r3]
 8018454:	64bb      	str	r3, [r7, #72]	@ 0x48
 8018456:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8018458:	f023 0310 	bic.w	r3, r3, #16
 801845c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8018460:	687b      	ldr	r3, [r7, #4]
 8018462:	681b      	ldr	r3, [r3, #0]
 8018464:	461a      	mov	r2, r3
 8018466:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801846a:	65bb      	str	r3, [r7, #88]	@ 0x58
 801846c:	657a      	str	r2, [r7, #84]	@ 0x54
 801846e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8018470:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8018472:	e841 2300 	strex	r3, r2, [r1]
 8018476:	653b      	str	r3, [r7, #80]	@ 0x50
 8018478:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801847a:	2b00      	cmp	r3, #0
 801847c:	d1e4      	bne.n	8018448 <HAL_UART_IRQHandler+0x500>
 801847e:	687b      	ldr	r3, [r7, #4]
 8018480:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8018484:	4618      	mov	r0, r3
 8018486:	f7f3 fdf3 	bl	800c070 <HAL_DMA_Abort>
 801848a:	687b      	ldr	r3, [r7, #4]
 801848c:	2202      	movs	r2, #2
 801848e:	671a      	str	r2, [r3, #112]	@ 0x70
 8018490:	687b      	ldr	r3, [r7, #4]
 8018492:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8018496:	687b      	ldr	r3, [r7, #4]
 8018498:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801849c:	b29b      	uxth	r3, r3
 801849e:	1ad3      	subs	r3, r2, r3
 80184a0:	b29b      	uxth	r3, r3
 80184a2:	4619      	mov	r1, r3
 80184a4:	6878      	ldr	r0, [r7, #4]
 80184a6:	f000 f91d 	bl	80186e4 <HAL_UARTEx_RxEventCallback>
 80184aa:	e0fd      	b.n	80186a8 <HAL_UART_IRQHandler+0x760>
 80184ac:	40020010 	.word	0x40020010
 80184b0:	40020028 	.word	0x40020028
 80184b4:	40020040 	.word	0x40020040
 80184b8:	40020058 	.word	0x40020058
 80184bc:	40020070 	.word	0x40020070
 80184c0:	40020088 	.word	0x40020088
 80184c4:	400200a0 	.word	0x400200a0
 80184c8:	400200b8 	.word	0x400200b8
 80184cc:	40020410 	.word	0x40020410
 80184d0:	40020428 	.word	0x40020428
 80184d4:	40020440 	.word	0x40020440
 80184d8:	40020458 	.word	0x40020458
 80184dc:	40020470 	.word	0x40020470
 80184e0:	40020488 	.word	0x40020488
 80184e4:	400204a0 	.word	0x400204a0
 80184e8:	400204b8 	.word	0x400204b8
 80184ec:	687b      	ldr	r3, [r7, #4]
 80184ee:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80184f2:	687b      	ldr	r3, [r7, #4]
 80184f4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80184f8:	b29b      	uxth	r3, r3
 80184fa:	1ad3      	subs	r3, r2, r3
 80184fc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
 8018500:	687b      	ldr	r3, [r7, #4]
 8018502:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8018506:	b29b      	uxth	r3, r3
 8018508:	2b00      	cmp	r3, #0
 801850a:	f000 80cf 	beq.w	80186ac <HAL_UART_IRQHandler+0x764>
 801850e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8018512:	2b00      	cmp	r3, #0
 8018514:	f000 80ca 	beq.w	80186ac <HAL_UART_IRQHandler+0x764>
 8018518:	687b      	ldr	r3, [r7, #4]
 801851a:	681b      	ldr	r3, [r3, #0]
 801851c:	63bb      	str	r3, [r7, #56]	@ 0x38
 801851e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018520:	e853 3f00 	ldrex	r3, [r3]
 8018524:	637b      	str	r3, [r7, #52]	@ 0x34
 8018526:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018528:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801852c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8018530:	687b      	ldr	r3, [r7, #4]
 8018532:	681b      	ldr	r3, [r3, #0]
 8018534:	461a      	mov	r2, r3
 8018536:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 801853a:	647b      	str	r3, [r7, #68]	@ 0x44
 801853c:	643a      	str	r2, [r7, #64]	@ 0x40
 801853e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8018540:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8018542:	e841 2300 	strex	r3, r2, [r1]
 8018546:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8018548:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801854a:	2b00      	cmp	r3, #0
 801854c:	d1e4      	bne.n	8018518 <HAL_UART_IRQHandler+0x5d0>
 801854e:	687b      	ldr	r3, [r7, #4]
 8018550:	681b      	ldr	r3, [r3, #0]
 8018552:	3308      	adds	r3, #8
 8018554:	627b      	str	r3, [r7, #36]	@ 0x24
 8018556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018558:	e853 3f00 	ldrex	r3, [r3]
 801855c:	623b      	str	r3, [r7, #32]
 801855e:	6a3a      	ldr	r2, [r7, #32]
 8018560:	4b55      	ldr	r3, [pc, #340]	@ (80186b8 <HAL_UART_IRQHandler+0x770>)
 8018562:	4013      	ands	r3, r2
 8018564:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8018568:	687b      	ldr	r3, [r7, #4]
 801856a:	681b      	ldr	r3, [r3, #0]
 801856c:	3308      	adds	r3, #8
 801856e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8018572:	633a      	str	r2, [r7, #48]	@ 0x30
 8018574:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8018576:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8018578:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801857a:	e841 2300 	strex	r3, r2, [r1]
 801857e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8018580:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018582:	2b00      	cmp	r3, #0
 8018584:	d1e3      	bne.n	801854e <HAL_UART_IRQHandler+0x606>
 8018586:	687b      	ldr	r3, [r7, #4]
 8018588:	2220      	movs	r2, #32
 801858a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 801858e:	687b      	ldr	r3, [r7, #4]
 8018590:	2200      	movs	r2, #0
 8018592:	66da      	str	r2, [r3, #108]	@ 0x6c
 8018594:	687b      	ldr	r3, [r7, #4]
 8018596:	2200      	movs	r2, #0
 8018598:	675a      	str	r2, [r3, #116]	@ 0x74
 801859a:	687b      	ldr	r3, [r7, #4]
 801859c:	681b      	ldr	r3, [r3, #0]
 801859e:	613b      	str	r3, [r7, #16]
 80185a0:	693b      	ldr	r3, [r7, #16]
 80185a2:	e853 3f00 	ldrex	r3, [r3]
 80185a6:	60fb      	str	r3, [r7, #12]
 80185a8:	68fb      	ldr	r3, [r7, #12]
 80185aa:	f023 0310 	bic.w	r3, r3, #16
 80185ae:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80185b2:	687b      	ldr	r3, [r7, #4]
 80185b4:	681b      	ldr	r3, [r3, #0]
 80185b6:	461a      	mov	r2, r3
 80185b8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80185bc:	61fb      	str	r3, [r7, #28]
 80185be:	61ba      	str	r2, [r7, #24]
 80185c0:	69b9      	ldr	r1, [r7, #24]
 80185c2:	69fa      	ldr	r2, [r7, #28]
 80185c4:	e841 2300 	strex	r3, r2, [r1]
 80185c8:	617b      	str	r3, [r7, #20]
 80185ca:	697b      	ldr	r3, [r7, #20]
 80185cc:	2b00      	cmp	r3, #0
 80185ce:	d1e4      	bne.n	801859a <HAL_UART_IRQHandler+0x652>
 80185d0:	687b      	ldr	r3, [r7, #4]
 80185d2:	2202      	movs	r2, #2
 80185d4:	671a      	str	r2, [r3, #112]	@ 0x70
 80185d6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80185da:	4619      	mov	r1, r3
 80185dc:	6878      	ldr	r0, [r7, #4]
 80185de:	f000 f881 	bl	80186e4 <HAL_UARTEx_RxEventCallback>
 80185e2:	e063      	b.n	80186ac <HAL_UART_IRQHandler+0x764>
 80185e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80185e8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80185ec:	2b00      	cmp	r3, #0
 80185ee:	d00e      	beq.n	801860e <HAL_UART_IRQHandler+0x6c6>
 80185f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80185f4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80185f8:	2b00      	cmp	r3, #0
 80185fa:	d008      	beq.n	801860e <HAL_UART_IRQHandler+0x6c6>
 80185fc:	687b      	ldr	r3, [r7, #4]
 80185fe:	681b      	ldr	r3, [r3, #0]
 8018600:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8018604:	621a      	str	r2, [r3, #32]
 8018606:	6878      	ldr	r0, [r7, #4]
 8018608:	f002 f926 	bl	801a858 <HAL_UARTEx_WakeupCallback>
 801860c:	e051      	b.n	80186b2 <HAL_UART_IRQHandler+0x76a>
 801860e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8018612:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8018616:	2b00      	cmp	r3, #0
 8018618:	d014      	beq.n	8018644 <HAL_UART_IRQHandler+0x6fc>
 801861a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801861e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8018622:	2b00      	cmp	r3, #0
 8018624:	d105      	bne.n	8018632 <HAL_UART_IRQHandler+0x6ea>
 8018626:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801862a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801862e:	2b00      	cmp	r3, #0
 8018630:	d008      	beq.n	8018644 <HAL_UART_IRQHandler+0x6fc>
 8018632:	687b      	ldr	r3, [r7, #4]
 8018634:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8018636:	2b00      	cmp	r3, #0
 8018638:	d03a      	beq.n	80186b0 <HAL_UART_IRQHandler+0x768>
 801863a:	687b      	ldr	r3, [r7, #4]
 801863c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801863e:	6878      	ldr	r0, [r7, #4]
 8018640:	4798      	blx	r3
 8018642:	e035      	b.n	80186b0 <HAL_UART_IRQHandler+0x768>
 8018644:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8018648:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801864c:	2b00      	cmp	r3, #0
 801864e:	d009      	beq.n	8018664 <HAL_UART_IRQHandler+0x71c>
 8018650:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8018654:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8018658:	2b00      	cmp	r3, #0
 801865a:	d003      	beq.n	8018664 <HAL_UART_IRQHandler+0x71c>
 801865c:	6878      	ldr	r0, [r7, #4]
 801865e:	f001 fbb3 	bl	8019dc8 <UART_EndTransmit_IT>
 8018662:	e026      	b.n	80186b2 <HAL_UART_IRQHandler+0x76a>
 8018664:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8018668:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801866c:	2b00      	cmp	r3, #0
 801866e:	d009      	beq.n	8018684 <HAL_UART_IRQHandler+0x73c>
 8018670:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8018674:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8018678:	2b00      	cmp	r3, #0
 801867a:	d003      	beq.n	8018684 <HAL_UART_IRQHandler+0x73c>
 801867c:	6878      	ldr	r0, [r7, #4]
 801867e:	f002 f8ff 	bl	801a880 <HAL_UARTEx_TxFifoEmptyCallback>
 8018682:	e016      	b.n	80186b2 <HAL_UART_IRQHandler+0x76a>
 8018684:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8018688:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 801868c:	2b00      	cmp	r3, #0
 801868e:	d010      	beq.n	80186b2 <HAL_UART_IRQHandler+0x76a>
 8018690:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8018694:	2b00      	cmp	r3, #0
 8018696:	da0c      	bge.n	80186b2 <HAL_UART_IRQHandler+0x76a>
 8018698:	6878      	ldr	r0, [r7, #4]
 801869a:	f002 f8e7 	bl	801a86c <HAL_UARTEx_RxFifoFullCallback>
 801869e:	e008      	b.n	80186b2 <HAL_UART_IRQHandler+0x76a>
 80186a0:	bf00      	nop
 80186a2:	e006      	b.n	80186b2 <HAL_UART_IRQHandler+0x76a>
 80186a4:	bf00      	nop
 80186a6:	e004      	b.n	80186b2 <HAL_UART_IRQHandler+0x76a>
 80186a8:	bf00      	nop
 80186aa:	e002      	b.n	80186b2 <HAL_UART_IRQHandler+0x76a>
 80186ac:	bf00      	nop
 80186ae:	e000      	b.n	80186b2 <HAL_UART_IRQHandler+0x76a>
 80186b0:	bf00      	nop
 80186b2:	37e8      	adds	r7, #232	@ 0xe8
 80186b4:	46bd      	mov	sp, r7
 80186b6:	bd80      	pop	{r7, pc}
 80186b8:	effffffe 	.word	0xeffffffe

080186bc <HAL_UART_TxCpltCallback>:
 80186bc:	b480      	push	{r7}
 80186be:	b083      	sub	sp, #12
 80186c0:	af00      	add	r7, sp, #0
 80186c2:	6078      	str	r0, [r7, #4]
 80186c4:	bf00      	nop
 80186c6:	370c      	adds	r7, #12
 80186c8:	46bd      	mov	sp, r7
 80186ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80186ce:	4770      	bx	lr

080186d0 <HAL_UART_ErrorCallback>:
 80186d0:	b480      	push	{r7}
 80186d2:	b083      	sub	sp, #12
 80186d4:	af00      	add	r7, sp, #0
 80186d6:	6078      	str	r0, [r7, #4]
 80186d8:	bf00      	nop
 80186da:	370c      	adds	r7, #12
 80186dc:	46bd      	mov	sp, r7
 80186de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80186e2:	4770      	bx	lr

080186e4 <HAL_UARTEx_RxEventCallback>:
 80186e4:	b480      	push	{r7}
 80186e6:	b083      	sub	sp, #12
 80186e8:	af00      	add	r7, sp, #0
 80186ea:	6078      	str	r0, [r7, #4]
 80186ec:	460b      	mov	r3, r1
 80186ee:	807b      	strh	r3, [r7, #2]
 80186f0:	bf00      	nop
 80186f2:	370c      	adds	r7, #12
 80186f4:	46bd      	mov	sp, r7
 80186f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80186fa:	4770      	bx	lr

080186fc <UART_SetConfig>:
 80186fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8018700:	b092      	sub	sp, #72	@ 0x48
 8018702:	af00      	add	r7, sp, #0
 8018704:	6178      	str	r0, [r7, #20]
 8018706:	2300      	movs	r3, #0
 8018708:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 801870c:	697b      	ldr	r3, [r7, #20]
 801870e:	689a      	ldr	r2, [r3, #8]
 8018710:	697b      	ldr	r3, [r7, #20]
 8018712:	691b      	ldr	r3, [r3, #16]
 8018714:	431a      	orrs	r2, r3
 8018716:	697b      	ldr	r3, [r7, #20]
 8018718:	695b      	ldr	r3, [r3, #20]
 801871a:	431a      	orrs	r2, r3
 801871c:	697b      	ldr	r3, [r7, #20]
 801871e:	69db      	ldr	r3, [r3, #28]
 8018720:	4313      	orrs	r3, r2
 8018722:	647b      	str	r3, [r7, #68]	@ 0x44
 8018724:	697b      	ldr	r3, [r7, #20]
 8018726:	681b      	ldr	r3, [r3, #0]
 8018728:	681a      	ldr	r2, [r3, #0]
 801872a:	4bbe      	ldr	r3, [pc, #760]	@ (8018a24 <UART_SetConfig+0x328>)
 801872c:	4013      	ands	r3, r2
 801872e:	697a      	ldr	r2, [r7, #20]
 8018730:	6812      	ldr	r2, [r2, #0]
 8018732:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8018734:	430b      	orrs	r3, r1
 8018736:	6013      	str	r3, [r2, #0]
 8018738:	697b      	ldr	r3, [r7, #20]
 801873a:	681b      	ldr	r3, [r3, #0]
 801873c:	685b      	ldr	r3, [r3, #4]
 801873e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8018742:	697b      	ldr	r3, [r7, #20]
 8018744:	68da      	ldr	r2, [r3, #12]
 8018746:	697b      	ldr	r3, [r7, #20]
 8018748:	681b      	ldr	r3, [r3, #0]
 801874a:	430a      	orrs	r2, r1
 801874c:	605a      	str	r2, [r3, #4]
 801874e:	697b      	ldr	r3, [r7, #20]
 8018750:	699b      	ldr	r3, [r3, #24]
 8018752:	647b      	str	r3, [r7, #68]	@ 0x44
 8018754:	697b      	ldr	r3, [r7, #20]
 8018756:	681b      	ldr	r3, [r3, #0]
 8018758:	4ab3      	ldr	r2, [pc, #716]	@ (8018a28 <UART_SetConfig+0x32c>)
 801875a:	4293      	cmp	r3, r2
 801875c:	d004      	beq.n	8018768 <UART_SetConfig+0x6c>
 801875e:	697b      	ldr	r3, [r7, #20]
 8018760:	6a1b      	ldr	r3, [r3, #32]
 8018762:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8018764:	4313      	orrs	r3, r2
 8018766:	647b      	str	r3, [r7, #68]	@ 0x44
 8018768:	697b      	ldr	r3, [r7, #20]
 801876a:	681b      	ldr	r3, [r3, #0]
 801876c:	689a      	ldr	r2, [r3, #8]
 801876e:	4baf      	ldr	r3, [pc, #700]	@ (8018a2c <UART_SetConfig+0x330>)
 8018770:	4013      	ands	r3, r2
 8018772:	697a      	ldr	r2, [r7, #20]
 8018774:	6812      	ldr	r2, [r2, #0]
 8018776:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8018778:	430b      	orrs	r3, r1
 801877a:	6093      	str	r3, [r2, #8]
 801877c:	697b      	ldr	r3, [r7, #20]
 801877e:	681b      	ldr	r3, [r3, #0]
 8018780:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018782:	f023 010f 	bic.w	r1, r3, #15
 8018786:	697b      	ldr	r3, [r7, #20]
 8018788:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801878a:	697b      	ldr	r3, [r7, #20]
 801878c:	681b      	ldr	r3, [r3, #0]
 801878e:	430a      	orrs	r2, r1
 8018790:	62da      	str	r2, [r3, #44]	@ 0x2c
 8018792:	697b      	ldr	r3, [r7, #20]
 8018794:	681b      	ldr	r3, [r3, #0]
 8018796:	4aa6      	ldr	r2, [pc, #664]	@ (8018a30 <UART_SetConfig+0x334>)
 8018798:	4293      	cmp	r3, r2
 801879a:	d177      	bne.n	801888c <UART_SetConfig+0x190>
 801879c:	4ba5      	ldr	r3, [pc, #660]	@ (8018a34 <UART_SetConfig+0x338>)
 801879e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80187a0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80187a4:	2b28      	cmp	r3, #40	@ 0x28
 80187a6:	d86d      	bhi.n	8018884 <UART_SetConfig+0x188>
 80187a8:	a201      	add	r2, pc, #4	@ (adr r2, 80187b0 <UART_SetConfig+0xb4>)
 80187aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80187ae:	bf00      	nop
 80187b0:	08018855 	.word	0x08018855
 80187b4:	08018885 	.word	0x08018885
 80187b8:	08018885 	.word	0x08018885
 80187bc:	08018885 	.word	0x08018885
 80187c0:	08018885 	.word	0x08018885
 80187c4:	08018885 	.word	0x08018885
 80187c8:	08018885 	.word	0x08018885
 80187cc:	08018885 	.word	0x08018885
 80187d0:	0801885d 	.word	0x0801885d
 80187d4:	08018885 	.word	0x08018885
 80187d8:	08018885 	.word	0x08018885
 80187dc:	08018885 	.word	0x08018885
 80187e0:	08018885 	.word	0x08018885
 80187e4:	08018885 	.word	0x08018885
 80187e8:	08018885 	.word	0x08018885
 80187ec:	08018885 	.word	0x08018885
 80187f0:	08018865 	.word	0x08018865
 80187f4:	08018885 	.word	0x08018885
 80187f8:	08018885 	.word	0x08018885
 80187fc:	08018885 	.word	0x08018885
 8018800:	08018885 	.word	0x08018885
 8018804:	08018885 	.word	0x08018885
 8018808:	08018885 	.word	0x08018885
 801880c:	08018885 	.word	0x08018885
 8018810:	0801886d 	.word	0x0801886d
 8018814:	08018885 	.word	0x08018885
 8018818:	08018885 	.word	0x08018885
 801881c:	08018885 	.word	0x08018885
 8018820:	08018885 	.word	0x08018885
 8018824:	08018885 	.word	0x08018885
 8018828:	08018885 	.word	0x08018885
 801882c:	08018885 	.word	0x08018885
 8018830:	08018875 	.word	0x08018875
 8018834:	08018885 	.word	0x08018885
 8018838:	08018885 	.word	0x08018885
 801883c:	08018885 	.word	0x08018885
 8018840:	08018885 	.word	0x08018885
 8018844:	08018885 	.word	0x08018885
 8018848:	08018885 	.word	0x08018885
 801884c:	08018885 	.word	0x08018885
 8018850:	0801887d 	.word	0x0801887d
 8018854:	2301      	movs	r3, #1
 8018856:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801885a:	e326      	b.n	8018eaa <UART_SetConfig+0x7ae>
 801885c:	2304      	movs	r3, #4
 801885e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018862:	e322      	b.n	8018eaa <UART_SetConfig+0x7ae>
 8018864:	2308      	movs	r3, #8
 8018866:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801886a:	e31e      	b.n	8018eaa <UART_SetConfig+0x7ae>
 801886c:	2310      	movs	r3, #16
 801886e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018872:	e31a      	b.n	8018eaa <UART_SetConfig+0x7ae>
 8018874:	2320      	movs	r3, #32
 8018876:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801887a:	e316      	b.n	8018eaa <UART_SetConfig+0x7ae>
 801887c:	2340      	movs	r3, #64	@ 0x40
 801887e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018882:	e312      	b.n	8018eaa <UART_SetConfig+0x7ae>
 8018884:	2380      	movs	r3, #128	@ 0x80
 8018886:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801888a:	e30e      	b.n	8018eaa <UART_SetConfig+0x7ae>
 801888c:	697b      	ldr	r3, [r7, #20]
 801888e:	681b      	ldr	r3, [r3, #0]
 8018890:	4a69      	ldr	r2, [pc, #420]	@ (8018a38 <UART_SetConfig+0x33c>)
 8018892:	4293      	cmp	r3, r2
 8018894:	d130      	bne.n	80188f8 <UART_SetConfig+0x1fc>
 8018896:	4b67      	ldr	r3, [pc, #412]	@ (8018a34 <UART_SetConfig+0x338>)
 8018898:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801889a:	f003 0307 	and.w	r3, r3, #7
 801889e:	2b05      	cmp	r3, #5
 80188a0:	d826      	bhi.n	80188f0 <UART_SetConfig+0x1f4>
 80188a2:	a201      	add	r2, pc, #4	@ (adr r2, 80188a8 <UART_SetConfig+0x1ac>)
 80188a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80188a8:	080188c1 	.word	0x080188c1
 80188ac:	080188c9 	.word	0x080188c9
 80188b0:	080188d1 	.word	0x080188d1
 80188b4:	080188d9 	.word	0x080188d9
 80188b8:	080188e1 	.word	0x080188e1
 80188bc:	080188e9 	.word	0x080188e9
 80188c0:	2300      	movs	r3, #0
 80188c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80188c6:	e2f0      	b.n	8018eaa <UART_SetConfig+0x7ae>
 80188c8:	2304      	movs	r3, #4
 80188ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80188ce:	e2ec      	b.n	8018eaa <UART_SetConfig+0x7ae>
 80188d0:	2308      	movs	r3, #8
 80188d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80188d6:	e2e8      	b.n	8018eaa <UART_SetConfig+0x7ae>
 80188d8:	2310      	movs	r3, #16
 80188da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80188de:	e2e4      	b.n	8018eaa <UART_SetConfig+0x7ae>
 80188e0:	2320      	movs	r3, #32
 80188e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80188e6:	e2e0      	b.n	8018eaa <UART_SetConfig+0x7ae>
 80188e8:	2340      	movs	r3, #64	@ 0x40
 80188ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80188ee:	e2dc      	b.n	8018eaa <UART_SetConfig+0x7ae>
 80188f0:	2380      	movs	r3, #128	@ 0x80
 80188f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80188f6:	e2d8      	b.n	8018eaa <UART_SetConfig+0x7ae>
 80188f8:	697b      	ldr	r3, [r7, #20]
 80188fa:	681b      	ldr	r3, [r3, #0]
 80188fc:	4a4f      	ldr	r2, [pc, #316]	@ (8018a3c <UART_SetConfig+0x340>)
 80188fe:	4293      	cmp	r3, r2
 8018900:	d130      	bne.n	8018964 <UART_SetConfig+0x268>
 8018902:	4b4c      	ldr	r3, [pc, #304]	@ (8018a34 <UART_SetConfig+0x338>)
 8018904:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018906:	f003 0307 	and.w	r3, r3, #7
 801890a:	2b05      	cmp	r3, #5
 801890c:	d826      	bhi.n	801895c <UART_SetConfig+0x260>
 801890e:	a201      	add	r2, pc, #4	@ (adr r2, 8018914 <UART_SetConfig+0x218>)
 8018910:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018914:	0801892d 	.word	0x0801892d
 8018918:	08018935 	.word	0x08018935
 801891c:	0801893d 	.word	0x0801893d
 8018920:	08018945 	.word	0x08018945
 8018924:	0801894d 	.word	0x0801894d
 8018928:	08018955 	.word	0x08018955
 801892c:	2300      	movs	r3, #0
 801892e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018932:	e2ba      	b.n	8018eaa <UART_SetConfig+0x7ae>
 8018934:	2304      	movs	r3, #4
 8018936:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801893a:	e2b6      	b.n	8018eaa <UART_SetConfig+0x7ae>
 801893c:	2308      	movs	r3, #8
 801893e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018942:	e2b2      	b.n	8018eaa <UART_SetConfig+0x7ae>
 8018944:	2310      	movs	r3, #16
 8018946:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801894a:	e2ae      	b.n	8018eaa <UART_SetConfig+0x7ae>
 801894c:	2320      	movs	r3, #32
 801894e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018952:	e2aa      	b.n	8018eaa <UART_SetConfig+0x7ae>
 8018954:	2340      	movs	r3, #64	@ 0x40
 8018956:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801895a:	e2a6      	b.n	8018eaa <UART_SetConfig+0x7ae>
 801895c:	2380      	movs	r3, #128	@ 0x80
 801895e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018962:	e2a2      	b.n	8018eaa <UART_SetConfig+0x7ae>
 8018964:	697b      	ldr	r3, [r7, #20]
 8018966:	681b      	ldr	r3, [r3, #0]
 8018968:	4a35      	ldr	r2, [pc, #212]	@ (8018a40 <UART_SetConfig+0x344>)
 801896a:	4293      	cmp	r3, r2
 801896c:	d130      	bne.n	80189d0 <UART_SetConfig+0x2d4>
 801896e:	4b31      	ldr	r3, [pc, #196]	@ (8018a34 <UART_SetConfig+0x338>)
 8018970:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018972:	f003 0307 	and.w	r3, r3, #7
 8018976:	2b05      	cmp	r3, #5
 8018978:	d826      	bhi.n	80189c8 <UART_SetConfig+0x2cc>
 801897a:	a201      	add	r2, pc, #4	@ (adr r2, 8018980 <UART_SetConfig+0x284>)
 801897c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018980:	08018999 	.word	0x08018999
 8018984:	080189a1 	.word	0x080189a1
 8018988:	080189a9 	.word	0x080189a9
 801898c:	080189b1 	.word	0x080189b1
 8018990:	080189b9 	.word	0x080189b9
 8018994:	080189c1 	.word	0x080189c1
 8018998:	2300      	movs	r3, #0
 801899a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801899e:	e284      	b.n	8018eaa <UART_SetConfig+0x7ae>
 80189a0:	2304      	movs	r3, #4
 80189a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80189a6:	e280      	b.n	8018eaa <UART_SetConfig+0x7ae>
 80189a8:	2308      	movs	r3, #8
 80189aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80189ae:	e27c      	b.n	8018eaa <UART_SetConfig+0x7ae>
 80189b0:	2310      	movs	r3, #16
 80189b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80189b6:	e278      	b.n	8018eaa <UART_SetConfig+0x7ae>
 80189b8:	2320      	movs	r3, #32
 80189ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80189be:	e274      	b.n	8018eaa <UART_SetConfig+0x7ae>
 80189c0:	2340      	movs	r3, #64	@ 0x40
 80189c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80189c6:	e270      	b.n	8018eaa <UART_SetConfig+0x7ae>
 80189c8:	2380      	movs	r3, #128	@ 0x80
 80189ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80189ce:	e26c      	b.n	8018eaa <UART_SetConfig+0x7ae>
 80189d0:	697b      	ldr	r3, [r7, #20]
 80189d2:	681b      	ldr	r3, [r3, #0]
 80189d4:	4a1b      	ldr	r2, [pc, #108]	@ (8018a44 <UART_SetConfig+0x348>)
 80189d6:	4293      	cmp	r3, r2
 80189d8:	d142      	bne.n	8018a60 <UART_SetConfig+0x364>
 80189da:	4b16      	ldr	r3, [pc, #88]	@ (8018a34 <UART_SetConfig+0x338>)
 80189dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80189de:	f003 0307 	and.w	r3, r3, #7
 80189e2:	2b05      	cmp	r3, #5
 80189e4:	d838      	bhi.n	8018a58 <UART_SetConfig+0x35c>
 80189e6:	a201      	add	r2, pc, #4	@ (adr r2, 80189ec <UART_SetConfig+0x2f0>)
 80189e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80189ec:	08018a05 	.word	0x08018a05
 80189f0:	08018a0d 	.word	0x08018a0d
 80189f4:	08018a15 	.word	0x08018a15
 80189f8:	08018a1d 	.word	0x08018a1d
 80189fc:	08018a49 	.word	0x08018a49
 8018a00:	08018a51 	.word	0x08018a51
 8018a04:	2300      	movs	r3, #0
 8018a06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018a0a:	e24e      	b.n	8018eaa <UART_SetConfig+0x7ae>
 8018a0c:	2304      	movs	r3, #4
 8018a0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018a12:	e24a      	b.n	8018eaa <UART_SetConfig+0x7ae>
 8018a14:	2308      	movs	r3, #8
 8018a16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018a1a:	e246      	b.n	8018eaa <UART_SetConfig+0x7ae>
 8018a1c:	2310      	movs	r3, #16
 8018a1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018a22:	e242      	b.n	8018eaa <UART_SetConfig+0x7ae>
 8018a24:	cfff69f3 	.word	0xcfff69f3
 8018a28:	58000c00 	.word	0x58000c00
 8018a2c:	11fff4ff 	.word	0x11fff4ff
 8018a30:	40011000 	.word	0x40011000
 8018a34:	58024400 	.word	0x58024400
 8018a38:	40004400 	.word	0x40004400
 8018a3c:	40004800 	.word	0x40004800
 8018a40:	40004c00 	.word	0x40004c00
 8018a44:	40005000 	.word	0x40005000
 8018a48:	2320      	movs	r3, #32
 8018a4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018a4e:	e22c      	b.n	8018eaa <UART_SetConfig+0x7ae>
 8018a50:	2340      	movs	r3, #64	@ 0x40
 8018a52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018a56:	e228      	b.n	8018eaa <UART_SetConfig+0x7ae>
 8018a58:	2380      	movs	r3, #128	@ 0x80
 8018a5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018a5e:	e224      	b.n	8018eaa <UART_SetConfig+0x7ae>
 8018a60:	697b      	ldr	r3, [r7, #20]
 8018a62:	681b      	ldr	r3, [r3, #0]
 8018a64:	4ab1      	ldr	r2, [pc, #708]	@ (8018d2c <UART_SetConfig+0x630>)
 8018a66:	4293      	cmp	r3, r2
 8018a68:	d176      	bne.n	8018b58 <UART_SetConfig+0x45c>
 8018a6a:	4bb1      	ldr	r3, [pc, #708]	@ (8018d30 <UART_SetConfig+0x634>)
 8018a6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018a6e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8018a72:	2b28      	cmp	r3, #40	@ 0x28
 8018a74:	d86c      	bhi.n	8018b50 <UART_SetConfig+0x454>
 8018a76:	a201      	add	r2, pc, #4	@ (adr r2, 8018a7c <UART_SetConfig+0x380>)
 8018a78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018a7c:	08018b21 	.word	0x08018b21
 8018a80:	08018b51 	.word	0x08018b51
 8018a84:	08018b51 	.word	0x08018b51
 8018a88:	08018b51 	.word	0x08018b51
 8018a8c:	08018b51 	.word	0x08018b51
 8018a90:	08018b51 	.word	0x08018b51
 8018a94:	08018b51 	.word	0x08018b51
 8018a98:	08018b51 	.word	0x08018b51
 8018a9c:	08018b29 	.word	0x08018b29
 8018aa0:	08018b51 	.word	0x08018b51
 8018aa4:	08018b51 	.word	0x08018b51
 8018aa8:	08018b51 	.word	0x08018b51
 8018aac:	08018b51 	.word	0x08018b51
 8018ab0:	08018b51 	.word	0x08018b51
 8018ab4:	08018b51 	.word	0x08018b51
 8018ab8:	08018b51 	.word	0x08018b51
 8018abc:	08018b31 	.word	0x08018b31
 8018ac0:	08018b51 	.word	0x08018b51
 8018ac4:	08018b51 	.word	0x08018b51
 8018ac8:	08018b51 	.word	0x08018b51
 8018acc:	08018b51 	.word	0x08018b51
 8018ad0:	08018b51 	.word	0x08018b51
 8018ad4:	08018b51 	.word	0x08018b51
 8018ad8:	08018b51 	.word	0x08018b51
 8018adc:	08018b39 	.word	0x08018b39
 8018ae0:	08018b51 	.word	0x08018b51
 8018ae4:	08018b51 	.word	0x08018b51
 8018ae8:	08018b51 	.word	0x08018b51
 8018aec:	08018b51 	.word	0x08018b51
 8018af0:	08018b51 	.word	0x08018b51
 8018af4:	08018b51 	.word	0x08018b51
 8018af8:	08018b51 	.word	0x08018b51
 8018afc:	08018b41 	.word	0x08018b41
 8018b00:	08018b51 	.word	0x08018b51
 8018b04:	08018b51 	.word	0x08018b51
 8018b08:	08018b51 	.word	0x08018b51
 8018b0c:	08018b51 	.word	0x08018b51
 8018b10:	08018b51 	.word	0x08018b51
 8018b14:	08018b51 	.word	0x08018b51
 8018b18:	08018b51 	.word	0x08018b51
 8018b1c:	08018b49 	.word	0x08018b49
 8018b20:	2301      	movs	r3, #1
 8018b22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018b26:	e1c0      	b.n	8018eaa <UART_SetConfig+0x7ae>
 8018b28:	2304      	movs	r3, #4
 8018b2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018b2e:	e1bc      	b.n	8018eaa <UART_SetConfig+0x7ae>
 8018b30:	2308      	movs	r3, #8
 8018b32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018b36:	e1b8      	b.n	8018eaa <UART_SetConfig+0x7ae>
 8018b38:	2310      	movs	r3, #16
 8018b3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018b3e:	e1b4      	b.n	8018eaa <UART_SetConfig+0x7ae>
 8018b40:	2320      	movs	r3, #32
 8018b42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018b46:	e1b0      	b.n	8018eaa <UART_SetConfig+0x7ae>
 8018b48:	2340      	movs	r3, #64	@ 0x40
 8018b4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018b4e:	e1ac      	b.n	8018eaa <UART_SetConfig+0x7ae>
 8018b50:	2380      	movs	r3, #128	@ 0x80
 8018b52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018b56:	e1a8      	b.n	8018eaa <UART_SetConfig+0x7ae>
 8018b58:	697b      	ldr	r3, [r7, #20]
 8018b5a:	681b      	ldr	r3, [r3, #0]
 8018b5c:	4a75      	ldr	r2, [pc, #468]	@ (8018d34 <UART_SetConfig+0x638>)
 8018b5e:	4293      	cmp	r3, r2
 8018b60:	d130      	bne.n	8018bc4 <UART_SetConfig+0x4c8>
 8018b62:	4b73      	ldr	r3, [pc, #460]	@ (8018d30 <UART_SetConfig+0x634>)
 8018b64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018b66:	f003 0307 	and.w	r3, r3, #7
 8018b6a:	2b05      	cmp	r3, #5
 8018b6c:	d826      	bhi.n	8018bbc <UART_SetConfig+0x4c0>
 8018b6e:	a201      	add	r2, pc, #4	@ (adr r2, 8018b74 <UART_SetConfig+0x478>)
 8018b70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018b74:	08018b8d 	.word	0x08018b8d
 8018b78:	08018b95 	.word	0x08018b95
 8018b7c:	08018b9d 	.word	0x08018b9d
 8018b80:	08018ba5 	.word	0x08018ba5
 8018b84:	08018bad 	.word	0x08018bad
 8018b88:	08018bb5 	.word	0x08018bb5
 8018b8c:	2300      	movs	r3, #0
 8018b8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018b92:	e18a      	b.n	8018eaa <UART_SetConfig+0x7ae>
 8018b94:	2304      	movs	r3, #4
 8018b96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018b9a:	e186      	b.n	8018eaa <UART_SetConfig+0x7ae>
 8018b9c:	2308      	movs	r3, #8
 8018b9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018ba2:	e182      	b.n	8018eaa <UART_SetConfig+0x7ae>
 8018ba4:	2310      	movs	r3, #16
 8018ba6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018baa:	e17e      	b.n	8018eaa <UART_SetConfig+0x7ae>
 8018bac:	2320      	movs	r3, #32
 8018bae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018bb2:	e17a      	b.n	8018eaa <UART_SetConfig+0x7ae>
 8018bb4:	2340      	movs	r3, #64	@ 0x40
 8018bb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018bba:	e176      	b.n	8018eaa <UART_SetConfig+0x7ae>
 8018bbc:	2380      	movs	r3, #128	@ 0x80
 8018bbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018bc2:	e172      	b.n	8018eaa <UART_SetConfig+0x7ae>
 8018bc4:	697b      	ldr	r3, [r7, #20]
 8018bc6:	681b      	ldr	r3, [r3, #0]
 8018bc8:	4a5b      	ldr	r2, [pc, #364]	@ (8018d38 <UART_SetConfig+0x63c>)
 8018bca:	4293      	cmp	r3, r2
 8018bcc:	d130      	bne.n	8018c30 <UART_SetConfig+0x534>
 8018bce:	4b58      	ldr	r3, [pc, #352]	@ (8018d30 <UART_SetConfig+0x634>)
 8018bd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018bd2:	f003 0307 	and.w	r3, r3, #7
 8018bd6:	2b05      	cmp	r3, #5
 8018bd8:	d826      	bhi.n	8018c28 <UART_SetConfig+0x52c>
 8018bda:	a201      	add	r2, pc, #4	@ (adr r2, 8018be0 <UART_SetConfig+0x4e4>)
 8018bdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018be0:	08018bf9 	.word	0x08018bf9
 8018be4:	08018c01 	.word	0x08018c01
 8018be8:	08018c09 	.word	0x08018c09
 8018bec:	08018c11 	.word	0x08018c11
 8018bf0:	08018c19 	.word	0x08018c19
 8018bf4:	08018c21 	.word	0x08018c21
 8018bf8:	2300      	movs	r3, #0
 8018bfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018bfe:	e154      	b.n	8018eaa <UART_SetConfig+0x7ae>
 8018c00:	2304      	movs	r3, #4
 8018c02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018c06:	e150      	b.n	8018eaa <UART_SetConfig+0x7ae>
 8018c08:	2308      	movs	r3, #8
 8018c0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018c0e:	e14c      	b.n	8018eaa <UART_SetConfig+0x7ae>
 8018c10:	2310      	movs	r3, #16
 8018c12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018c16:	e148      	b.n	8018eaa <UART_SetConfig+0x7ae>
 8018c18:	2320      	movs	r3, #32
 8018c1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018c1e:	e144      	b.n	8018eaa <UART_SetConfig+0x7ae>
 8018c20:	2340      	movs	r3, #64	@ 0x40
 8018c22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018c26:	e140      	b.n	8018eaa <UART_SetConfig+0x7ae>
 8018c28:	2380      	movs	r3, #128	@ 0x80
 8018c2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018c2e:	e13c      	b.n	8018eaa <UART_SetConfig+0x7ae>
 8018c30:	697b      	ldr	r3, [r7, #20]
 8018c32:	681b      	ldr	r3, [r3, #0]
 8018c34:	4a41      	ldr	r2, [pc, #260]	@ (8018d3c <UART_SetConfig+0x640>)
 8018c36:	4293      	cmp	r3, r2
 8018c38:	f040 8082 	bne.w	8018d40 <UART_SetConfig+0x644>
 8018c3c:	4b3c      	ldr	r3, [pc, #240]	@ (8018d30 <UART_SetConfig+0x634>)
 8018c3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018c40:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8018c44:	2b28      	cmp	r3, #40	@ 0x28
 8018c46:	d86d      	bhi.n	8018d24 <UART_SetConfig+0x628>
 8018c48:	a201      	add	r2, pc, #4	@ (adr r2, 8018c50 <UART_SetConfig+0x554>)
 8018c4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018c4e:	bf00      	nop
 8018c50:	08018cf5 	.word	0x08018cf5
 8018c54:	08018d25 	.word	0x08018d25
 8018c58:	08018d25 	.word	0x08018d25
 8018c5c:	08018d25 	.word	0x08018d25
 8018c60:	08018d25 	.word	0x08018d25
 8018c64:	08018d25 	.word	0x08018d25
 8018c68:	08018d25 	.word	0x08018d25
 8018c6c:	08018d25 	.word	0x08018d25
 8018c70:	08018cfd 	.word	0x08018cfd
 8018c74:	08018d25 	.word	0x08018d25
 8018c78:	08018d25 	.word	0x08018d25
 8018c7c:	08018d25 	.word	0x08018d25
 8018c80:	08018d25 	.word	0x08018d25
 8018c84:	08018d25 	.word	0x08018d25
 8018c88:	08018d25 	.word	0x08018d25
 8018c8c:	08018d25 	.word	0x08018d25
 8018c90:	08018d05 	.word	0x08018d05
 8018c94:	08018d25 	.word	0x08018d25
 8018c98:	08018d25 	.word	0x08018d25
 8018c9c:	08018d25 	.word	0x08018d25
 8018ca0:	08018d25 	.word	0x08018d25
 8018ca4:	08018d25 	.word	0x08018d25
 8018ca8:	08018d25 	.word	0x08018d25
 8018cac:	08018d25 	.word	0x08018d25
 8018cb0:	08018d0d 	.word	0x08018d0d
 8018cb4:	08018d25 	.word	0x08018d25
 8018cb8:	08018d25 	.word	0x08018d25
 8018cbc:	08018d25 	.word	0x08018d25
 8018cc0:	08018d25 	.word	0x08018d25
 8018cc4:	08018d25 	.word	0x08018d25
 8018cc8:	08018d25 	.word	0x08018d25
 8018ccc:	08018d25 	.word	0x08018d25
 8018cd0:	08018d15 	.word	0x08018d15
 8018cd4:	08018d25 	.word	0x08018d25
 8018cd8:	08018d25 	.word	0x08018d25
 8018cdc:	08018d25 	.word	0x08018d25
 8018ce0:	08018d25 	.word	0x08018d25
 8018ce4:	08018d25 	.word	0x08018d25
 8018ce8:	08018d25 	.word	0x08018d25
 8018cec:	08018d25 	.word	0x08018d25
 8018cf0:	08018d1d 	.word	0x08018d1d
 8018cf4:	2301      	movs	r3, #1
 8018cf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018cfa:	e0d6      	b.n	8018eaa <UART_SetConfig+0x7ae>
 8018cfc:	2304      	movs	r3, #4
 8018cfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018d02:	e0d2      	b.n	8018eaa <UART_SetConfig+0x7ae>
 8018d04:	2308      	movs	r3, #8
 8018d06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018d0a:	e0ce      	b.n	8018eaa <UART_SetConfig+0x7ae>
 8018d0c:	2310      	movs	r3, #16
 8018d0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018d12:	e0ca      	b.n	8018eaa <UART_SetConfig+0x7ae>
 8018d14:	2320      	movs	r3, #32
 8018d16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018d1a:	e0c6      	b.n	8018eaa <UART_SetConfig+0x7ae>
 8018d1c:	2340      	movs	r3, #64	@ 0x40
 8018d1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018d22:	e0c2      	b.n	8018eaa <UART_SetConfig+0x7ae>
 8018d24:	2380      	movs	r3, #128	@ 0x80
 8018d26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018d2a:	e0be      	b.n	8018eaa <UART_SetConfig+0x7ae>
 8018d2c:	40011400 	.word	0x40011400
 8018d30:	58024400 	.word	0x58024400
 8018d34:	40007800 	.word	0x40007800
 8018d38:	40007c00 	.word	0x40007c00
 8018d3c:	40011800 	.word	0x40011800
 8018d40:	697b      	ldr	r3, [r7, #20]
 8018d42:	681b      	ldr	r3, [r3, #0]
 8018d44:	4aad      	ldr	r2, [pc, #692]	@ (8018ffc <UART_SetConfig+0x900>)
 8018d46:	4293      	cmp	r3, r2
 8018d48:	d176      	bne.n	8018e38 <UART_SetConfig+0x73c>
 8018d4a:	4bad      	ldr	r3, [pc, #692]	@ (8019000 <UART_SetConfig+0x904>)
 8018d4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018d4e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8018d52:	2b28      	cmp	r3, #40	@ 0x28
 8018d54:	d86c      	bhi.n	8018e30 <UART_SetConfig+0x734>
 8018d56:	a201      	add	r2, pc, #4	@ (adr r2, 8018d5c <UART_SetConfig+0x660>)
 8018d58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018d5c:	08018e01 	.word	0x08018e01
 8018d60:	08018e31 	.word	0x08018e31
 8018d64:	08018e31 	.word	0x08018e31
 8018d68:	08018e31 	.word	0x08018e31
 8018d6c:	08018e31 	.word	0x08018e31
 8018d70:	08018e31 	.word	0x08018e31
 8018d74:	08018e31 	.word	0x08018e31
 8018d78:	08018e31 	.word	0x08018e31
 8018d7c:	08018e09 	.word	0x08018e09
 8018d80:	08018e31 	.word	0x08018e31
 8018d84:	08018e31 	.word	0x08018e31
 8018d88:	08018e31 	.word	0x08018e31
 8018d8c:	08018e31 	.word	0x08018e31
 8018d90:	08018e31 	.word	0x08018e31
 8018d94:	08018e31 	.word	0x08018e31
 8018d98:	08018e31 	.word	0x08018e31
 8018d9c:	08018e11 	.word	0x08018e11
 8018da0:	08018e31 	.word	0x08018e31
 8018da4:	08018e31 	.word	0x08018e31
 8018da8:	08018e31 	.word	0x08018e31
 8018dac:	08018e31 	.word	0x08018e31
 8018db0:	08018e31 	.word	0x08018e31
 8018db4:	08018e31 	.word	0x08018e31
 8018db8:	08018e31 	.word	0x08018e31
 8018dbc:	08018e19 	.word	0x08018e19
 8018dc0:	08018e31 	.word	0x08018e31
 8018dc4:	08018e31 	.word	0x08018e31
 8018dc8:	08018e31 	.word	0x08018e31
 8018dcc:	08018e31 	.word	0x08018e31
 8018dd0:	08018e31 	.word	0x08018e31
 8018dd4:	08018e31 	.word	0x08018e31
 8018dd8:	08018e31 	.word	0x08018e31
 8018ddc:	08018e21 	.word	0x08018e21
 8018de0:	08018e31 	.word	0x08018e31
 8018de4:	08018e31 	.word	0x08018e31
 8018de8:	08018e31 	.word	0x08018e31
 8018dec:	08018e31 	.word	0x08018e31
 8018df0:	08018e31 	.word	0x08018e31
 8018df4:	08018e31 	.word	0x08018e31
 8018df8:	08018e31 	.word	0x08018e31
 8018dfc:	08018e29 	.word	0x08018e29
 8018e00:	2301      	movs	r3, #1
 8018e02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018e06:	e050      	b.n	8018eaa <UART_SetConfig+0x7ae>
 8018e08:	2304      	movs	r3, #4
 8018e0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018e0e:	e04c      	b.n	8018eaa <UART_SetConfig+0x7ae>
 8018e10:	2308      	movs	r3, #8
 8018e12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018e16:	e048      	b.n	8018eaa <UART_SetConfig+0x7ae>
 8018e18:	2310      	movs	r3, #16
 8018e1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018e1e:	e044      	b.n	8018eaa <UART_SetConfig+0x7ae>
 8018e20:	2320      	movs	r3, #32
 8018e22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018e26:	e040      	b.n	8018eaa <UART_SetConfig+0x7ae>
 8018e28:	2340      	movs	r3, #64	@ 0x40
 8018e2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018e2e:	e03c      	b.n	8018eaa <UART_SetConfig+0x7ae>
 8018e30:	2380      	movs	r3, #128	@ 0x80
 8018e32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018e36:	e038      	b.n	8018eaa <UART_SetConfig+0x7ae>
 8018e38:	697b      	ldr	r3, [r7, #20]
 8018e3a:	681b      	ldr	r3, [r3, #0]
 8018e3c:	4a71      	ldr	r2, [pc, #452]	@ (8019004 <UART_SetConfig+0x908>)
 8018e3e:	4293      	cmp	r3, r2
 8018e40:	d130      	bne.n	8018ea4 <UART_SetConfig+0x7a8>
 8018e42:	4b6f      	ldr	r3, [pc, #444]	@ (8019000 <UART_SetConfig+0x904>)
 8018e44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8018e46:	f003 0307 	and.w	r3, r3, #7
 8018e4a:	2b05      	cmp	r3, #5
 8018e4c:	d826      	bhi.n	8018e9c <UART_SetConfig+0x7a0>
 8018e4e:	a201      	add	r2, pc, #4	@ (adr r2, 8018e54 <UART_SetConfig+0x758>)
 8018e50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018e54:	08018e6d 	.word	0x08018e6d
 8018e58:	08018e75 	.word	0x08018e75
 8018e5c:	08018e7d 	.word	0x08018e7d
 8018e60:	08018e85 	.word	0x08018e85
 8018e64:	08018e8d 	.word	0x08018e8d
 8018e68:	08018e95 	.word	0x08018e95
 8018e6c:	2302      	movs	r3, #2
 8018e6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018e72:	e01a      	b.n	8018eaa <UART_SetConfig+0x7ae>
 8018e74:	2304      	movs	r3, #4
 8018e76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018e7a:	e016      	b.n	8018eaa <UART_SetConfig+0x7ae>
 8018e7c:	2308      	movs	r3, #8
 8018e7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018e82:	e012      	b.n	8018eaa <UART_SetConfig+0x7ae>
 8018e84:	2310      	movs	r3, #16
 8018e86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018e8a:	e00e      	b.n	8018eaa <UART_SetConfig+0x7ae>
 8018e8c:	2320      	movs	r3, #32
 8018e8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018e92:	e00a      	b.n	8018eaa <UART_SetConfig+0x7ae>
 8018e94:	2340      	movs	r3, #64	@ 0x40
 8018e96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018e9a:	e006      	b.n	8018eaa <UART_SetConfig+0x7ae>
 8018e9c:	2380      	movs	r3, #128	@ 0x80
 8018e9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018ea2:	e002      	b.n	8018eaa <UART_SetConfig+0x7ae>
 8018ea4:	2380      	movs	r3, #128	@ 0x80
 8018ea6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018eaa:	697b      	ldr	r3, [r7, #20]
 8018eac:	681b      	ldr	r3, [r3, #0]
 8018eae:	4a55      	ldr	r2, [pc, #340]	@ (8019004 <UART_SetConfig+0x908>)
 8018eb0:	4293      	cmp	r3, r2
 8018eb2:	f040 80f8 	bne.w	80190a6 <UART_SetConfig+0x9aa>
 8018eb6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8018eba:	2b20      	cmp	r3, #32
 8018ebc:	dc46      	bgt.n	8018f4c <UART_SetConfig+0x850>
 8018ebe:	2b02      	cmp	r3, #2
 8018ec0:	db75      	blt.n	8018fae <UART_SetConfig+0x8b2>
 8018ec2:	3b02      	subs	r3, #2
 8018ec4:	2b1e      	cmp	r3, #30
 8018ec6:	d872      	bhi.n	8018fae <UART_SetConfig+0x8b2>
 8018ec8:	a201      	add	r2, pc, #4	@ (adr r2, 8018ed0 <UART_SetConfig+0x7d4>)
 8018eca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018ece:	bf00      	nop
 8018ed0:	08018f53 	.word	0x08018f53
 8018ed4:	08018faf 	.word	0x08018faf
 8018ed8:	08018f5b 	.word	0x08018f5b
 8018edc:	08018faf 	.word	0x08018faf
 8018ee0:	08018faf 	.word	0x08018faf
 8018ee4:	08018faf 	.word	0x08018faf
 8018ee8:	08018f6b 	.word	0x08018f6b
 8018eec:	08018faf 	.word	0x08018faf
 8018ef0:	08018faf 	.word	0x08018faf
 8018ef4:	08018faf 	.word	0x08018faf
 8018ef8:	08018faf 	.word	0x08018faf
 8018efc:	08018faf 	.word	0x08018faf
 8018f00:	08018faf 	.word	0x08018faf
 8018f04:	08018faf 	.word	0x08018faf
 8018f08:	08018f7b 	.word	0x08018f7b
 8018f0c:	08018faf 	.word	0x08018faf
 8018f10:	08018faf 	.word	0x08018faf
 8018f14:	08018faf 	.word	0x08018faf
 8018f18:	08018faf 	.word	0x08018faf
 8018f1c:	08018faf 	.word	0x08018faf
 8018f20:	08018faf 	.word	0x08018faf
 8018f24:	08018faf 	.word	0x08018faf
 8018f28:	08018faf 	.word	0x08018faf
 8018f2c:	08018faf 	.word	0x08018faf
 8018f30:	08018faf 	.word	0x08018faf
 8018f34:	08018faf 	.word	0x08018faf
 8018f38:	08018faf 	.word	0x08018faf
 8018f3c:	08018faf 	.word	0x08018faf
 8018f40:	08018faf 	.word	0x08018faf
 8018f44:	08018faf 	.word	0x08018faf
 8018f48:	08018fa1 	.word	0x08018fa1
 8018f4c:	2b40      	cmp	r3, #64	@ 0x40
 8018f4e:	d02a      	beq.n	8018fa6 <UART_SetConfig+0x8aa>
 8018f50:	e02d      	b.n	8018fae <UART_SetConfig+0x8b2>
 8018f52:	f7fa fda1 	bl	8013a98 <HAL_RCCEx_GetD3PCLK1Freq>
 8018f56:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8018f58:	e02f      	b.n	8018fba <UART_SetConfig+0x8be>
 8018f5a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8018f5e:	4618      	mov	r0, r3
 8018f60:	f7fa fdb0 	bl	8013ac4 <HAL_RCCEx_GetPLL2ClockFreq>
 8018f64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018f66:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8018f68:	e027      	b.n	8018fba <UART_SetConfig+0x8be>
 8018f6a:	f107 0318 	add.w	r3, r7, #24
 8018f6e:	4618      	mov	r0, r3
 8018f70:	f7fa fefc 	bl	8013d6c <HAL_RCCEx_GetPLL3ClockFreq>
 8018f74:	69fb      	ldr	r3, [r7, #28]
 8018f76:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8018f78:	e01f      	b.n	8018fba <UART_SetConfig+0x8be>
 8018f7a:	4b21      	ldr	r3, [pc, #132]	@ (8019000 <UART_SetConfig+0x904>)
 8018f7c:	681b      	ldr	r3, [r3, #0]
 8018f7e:	f003 0320 	and.w	r3, r3, #32
 8018f82:	2b00      	cmp	r3, #0
 8018f84:	d009      	beq.n	8018f9a <UART_SetConfig+0x89e>
 8018f86:	4b1e      	ldr	r3, [pc, #120]	@ (8019000 <UART_SetConfig+0x904>)
 8018f88:	681b      	ldr	r3, [r3, #0]
 8018f8a:	08db      	lsrs	r3, r3, #3
 8018f8c:	f003 0303 	and.w	r3, r3, #3
 8018f90:	4a1d      	ldr	r2, [pc, #116]	@ (8019008 <UART_SetConfig+0x90c>)
 8018f92:	fa22 f303 	lsr.w	r3, r2, r3
 8018f96:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8018f98:	e00f      	b.n	8018fba <UART_SetConfig+0x8be>
 8018f9a:	4b1b      	ldr	r3, [pc, #108]	@ (8019008 <UART_SetConfig+0x90c>)
 8018f9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8018f9e:	e00c      	b.n	8018fba <UART_SetConfig+0x8be>
 8018fa0:	4b1a      	ldr	r3, [pc, #104]	@ (801900c <UART_SetConfig+0x910>)
 8018fa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8018fa4:	e009      	b.n	8018fba <UART_SetConfig+0x8be>
 8018fa6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8018faa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8018fac:	e005      	b.n	8018fba <UART_SetConfig+0x8be>
 8018fae:	2300      	movs	r3, #0
 8018fb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8018fb2:	2301      	movs	r3, #1
 8018fb4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8018fb8:	bf00      	nop
 8018fba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018fbc:	2b00      	cmp	r3, #0
 8018fbe:	f000 81ee 	beq.w	801939e <UART_SetConfig+0xca2>
 8018fc2:	697b      	ldr	r3, [r7, #20]
 8018fc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018fc6:	4a12      	ldr	r2, [pc, #72]	@ (8019010 <UART_SetConfig+0x914>)
 8018fc8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8018fcc:	461a      	mov	r2, r3
 8018fce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018fd0:	fbb3 f3f2 	udiv	r3, r3, r2
 8018fd4:	633b      	str	r3, [r7, #48]	@ 0x30
 8018fd6:	697b      	ldr	r3, [r7, #20]
 8018fd8:	685a      	ldr	r2, [r3, #4]
 8018fda:	4613      	mov	r3, r2
 8018fdc:	005b      	lsls	r3, r3, #1
 8018fde:	4413      	add	r3, r2
 8018fe0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8018fe2:	429a      	cmp	r2, r3
 8018fe4:	d305      	bcc.n	8018ff2 <UART_SetConfig+0x8f6>
 8018fe6:	697b      	ldr	r3, [r7, #20]
 8018fe8:	685b      	ldr	r3, [r3, #4]
 8018fea:	031b      	lsls	r3, r3, #12
 8018fec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8018fee:	429a      	cmp	r2, r3
 8018ff0:	d910      	bls.n	8019014 <UART_SetConfig+0x918>
 8018ff2:	2301      	movs	r3, #1
 8018ff4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8018ff8:	e1d1      	b.n	801939e <UART_SetConfig+0xca2>
 8018ffa:	bf00      	nop
 8018ffc:	40011c00 	.word	0x40011c00
 8019000:	58024400 	.word	0x58024400
 8019004:	58000c00 	.word	0x58000c00
 8019008:	03d09000 	.word	0x03d09000
 801900c:	003d0900 	.word	0x003d0900
 8019010:	0801e8e4 	.word	0x0801e8e4
 8019014:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019016:	2200      	movs	r2, #0
 8019018:	60bb      	str	r3, [r7, #8]
 801901a:	60fa      	str	r2, [r7, #12]
 801901c:	697b      	ldr	r3, [r7, #20]
 801901e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019020:	4ac0      	ldr	r2, [pc, #768]	@ (8019324 <UART_SetConfig+0xc28>)
 8019022:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8019026:	b29b      	uxth	r3, r3
 8019028:	2200      	movs	r2, #0
 801902a:	603b      	str	r3, [r7, #0]
 801902c:	607a      	str	r2, [r7, #4]
 801902e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8019032:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8019036:	f7e7 f9bb 	bl	80003b0 <__aeabi_uldivmod>
 801903a:	4602      	mov	r2, r0
 801903c:	460b      	mov	r3, r1
 801903e:	4610      	mov	r0, r2
 8019040:	4619      	mov	r1, r3
 8019042:	f04f 0200 	mov.w	r2, #0
 8019046:	f04f 0300 	mov.w	r3, #0
 801904a:	020b      	lsls	r3, r1, #8
 801904c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8019050:	0202      	lsls	r2, r0, #8
 8019052:	6979      	ldr	r1, [r7, #20]
 8019054:	6849      	ldr	r1, [r1, #4]
 8019056:	0849      	lsrs	r1, r1, #1
 8019058:	2000      	movs	r0, #0
 801905a:	460c      	mov	r4, r1
 801905c:	4605      	mov	r5, r0
 801905e:	eb12 0804 	adds.w	r8, r2, r4
 8019062:	eb43 0905 	adc.w	r9, r3, r5
 8019066:	697b      	ldr	r3, [r7, #20]
 8019068:	685b      	ldr	r3, [r3, #4]
 801906a:	2200      	movs	r2, #0
 801906c:	469a      	mov	sl, r3
 801906e:	4693      	mov	fp, r2
 8019070:	4652      	mov	r2, sl
 8019072:	465b      	mov	r3, fp
 8019074:	4640      	mov	r0, r8
 8019076:	4649      	mov	r1, r9
 8019078:	f7e7 f99a 	bl	80003b0 <__aeabi_uldivmod>
 801907c:	4602      	mov	r2, r0
 801907e:	460b      	mov	r3, r1
 8019080:	4613      	mov	r3, r2
 8019082:	63bb      	str	r3, [r7, #56]	@ 0x38
 8019084:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019086:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801908a:	d308      	bcc.n	801909e <UART_SetConfig+0x9a2>
 801908c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801908e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8019092:	d204      	bcs.n	801909e <UART_SetConfig+0x9a2>
 8019094:	697b      	ldr	r3, [r7, #20]
 8019096:	681b      	ldr	r3, [r3, #0]
 8019098:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801909a:	60da      	str	r2, [r3, #12]
 801909c:	e17f      	b.n	801939e <UART_SetConfig+0xca2>
 801909e:	2301      	movs	r3, #1
 80190a0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80190a4:	e17b      	b.n	801939e <UART_SetConfig+0xca2>
 80190a6:	697b      	ldr	r3, [r7, #20]
 80190a8:	69db      	ldr	r3, [r3, #28]
 80190aa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80190ae:	f040 80bd 	bne.w	801922c <UART_SetConfig+0xb30>
 80190b2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80190b6:	2b20      	cmp	r3, #32
 80190b8:	dc48      	bgt.n	801914c <UART_SetConfig+0xa50>
 80190ba:	2b00      	cmp	r3, #0
 80190bc:	db7b      	blt.n	80191b6 <UART_SetConfig+0xaba>
 80190be:	2b20      	cmp	r3, #32
 80190c0:	d879      	bhi.n	80191b6 <UART_SetConfig+0xaba>
 80190c2:	a201      	add	r2, pc, #4	@ (adr r2, 80190c8 <UART_SetConfig+0x9cc>)
 80190c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80190c8:	08019153 	.word	0x08019153
 80190cc:	0801915b 	.word	0x0801915b
 80190d0:	080191b7 	.word	0x080191b7
 80190d4:	080191b7 	.word	0x080191b7
 80190d8:	08019163 	.word	0x08019163
 80190dc:	080191b7 	.word	0x080191b7
 80190e0:	080191b7 	.word	0x080191b7
 80190e4:	080191b7 	.word	0x080191b7
 80190e8:	08019173 	.word	0x08019173
 80190ec:	080191b7 	.word	0x080191b7
 80190f0:	080191b7 	.word	0x080191b7
 80190f4:	080191b7 	.word	0x080191b7
 80190f8:	080191b7 	.word	0x080191b7
 80190fc:	080191b7 	.word	0x080191b7
 8019100:	080191b7 	.word	0x080191b7
 8019104:	080191b7 	.word	0x080191b7
 8019108:	08019183 	.word	0x08019183
 801910c:	080191b7 	.word	0x080191b7
 8019110:	080191b7 	.word	0x080191b7
 8019114:	080191b7 	.word	0x080191b7
 8019118:	080191b7 	.word	0x080191b7
 801911c:	080191b7 	.word	0x080191b7
 8019120:	080191b7 	.word	0x080191b7
 8019124:	080191b7 	.word	0x080191b7
 8019128:	080191b7 	.word	0x080191b7
 801912c:	080191b7 	.word	0x080191b7
 8019130:	080191b7 	.word	0x080191b7
 8019134:	080191b7 	.word	0x080191b7
 8019138:	080191b7 	.word	0x080191b7
 801913c:	080191b7 	.word	0x080191b7
 8019140:	080191b7 	.word	0x080191b7
 8019144:	080191b7 	.word	0x080191b7
 8019148:	080191a9 	.word	0x080191a9
 801914c:	2b40      	cmp	r3, #64	@ 0x40
 801914e:	d02e      	beq.n	80191ae <UART_SetConfig+0xab2>
 8019150:	e031      	b.n	80191b6 <UART_SetConfig+0xaba>
 8019152:	f7f8 fe03 	bl	8011d5c <HAL_RCC_GetPCLK1Freq>
 8019156:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8019158:	e033      	b.n	80191c2 <UART_SetConfig+0xac6>
 801915a:	f7f8 fe15 	bl	8011d88 <HAL_RCC_GetPCLK2Freq>
 801915e:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8019160:	e02f      	b.n	80191c2 <UART_SetConfig+0xac6>
 8019162:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8019166:	4618      	mov	r0, r3
 8019168:	f7fa fcac 	bl	8013ac4 <HAL_RCCEx_GetPLL2ClockFreq>
 801916c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801916e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8019170:	e027      	b.n	80191c2 <UART_SetConfig+0xac6>
 8019172:	f107 0318 	add.w	r3, r7, #24
 8019176:	4618      	mov	r0, r3
 8019178:	f7fa fdf8 	bl	8013d6c <HAL_RCCEx_GetPLL3ClockFreq>
 801917c:	69fb      	ldr	r3, [r7, #28]
 801917e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8019180:	e01f      	b.n	80191c2 <UART_SetConfig+0xac6>
 8019182:	4b69      	ldr	r3, [pc, #420]	@ (8019328 <UART_SetConfig+0xc2c>)
 8019184:	681b      	ldr	r3, [r3, #0]
 8019186:	f003 0320 	and.w	r3, r3, #32
 801918a:	2b00      	cmp	r3, #0
 801918c:	d009      	beq.n	80191a2 <UART_SetConfig+0xaa6>
 801918e:	4b66      	ldr	r3, [pc, #408]	@ (8019328 <UART_SetConfig+0xc2c>)
 8019190:	681b      	ldr	r3, [r3, #0]
 8019192:	08db      	lsrs	r3, r3, #3
 8019194:	f003 0303 	and.w	r3, r3, #3
 8019198:	4a64      	ldr	r2, [pc, #400]	@ (801932c <UART_SetConfig+0xc30>)
 801919a:	fa22 f303 	lsr.w	r3, r2, r3
 801919e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80191a0:	e00f      	b.n	80191c2 <UART_SetConfig+0xac6>
 80191a2:	4b62      	ldr	r3, [pc, #392]	@ (801932c <UART_SetConfig+0xc30>)
 80191a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80191a6:	e00c      	b.n	80191c2 <UART_SetConfig+0xac6>
 80191a8:	4b61      	ldr	r3, [pc, #388]	@ (8019330 <UART_SetConfig+0xc34>)
 80191aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80191ac:	e009      	b.n	80191c2 <UART_SetConfig+0xac6>
 80191ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80191b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80191b4:	e005      	b.n	80191c2 <UART_SetConfig+0xac6>
 80191b6:	2300      	movs	r3, #0
 80191b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80191ba:	2301      	movs	r3, #1
 80191bc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80191c0:	bf00      	nop
 80191c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80191c4:	2b00      	cmp	r3, #0
 80191c6:	f000 80ea 	beq.w	801939e <UART_SetConfig+0xca2>
 80191ca:	697b      	ldr	r3, [r7, #20]
 80191cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80191ce:	4a55      	ldr	r2, [pc, #340]	@ (8019324 <UART_SetConfig+0xc28>)
 80191d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80191d4:	461a      	mov	r2, r3
 80191d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80191d8:	fbb3 f3f2 	udiv	r3, r3, r2
 80191dc:	005a      	lsls	r2, r3, #1
 80191de:	697b      	ldr	r3, [r7, #20]
 80191e0:	685b      	ldr	r3, [r3, #4]
 80191e2:	085b      	lsrs	r3, r3, #1
 80191e4:	441a      	add	r2, r3
 80191e6:	697b      	ldr	r3, [r7, #20]
 80191e8:	685b      	ldr	r3, [r3, #4]
 80191ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80191ee:	63bb      	str	r3, [r7, #56]	@ 0x38
 80191f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80191f2:	2b0f      	cmp	r3, #15
 80191f4:	d916      	bls.n	8019224 <UART_SetConfig+0xb28>
 80191f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80191f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80191fc:	d212      	bcs.n	8019224 <UART_SetConfig+0xb28>
 80191fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019200:	b29b      	uxth	r3, r3
 8019202:	f023 030f 	bic.w	r3, r3, #15
 8019206:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8019208:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801920a:	085b      	lsrs	r3, r3, #1
 801920c:	b29b      	uxth	r3, r3
 801920e:	f003 0307 	and.w	r3, r3, #7
 8019212:	b29a      	uxth	r2, r3
 8019214:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8019216:	4313      	orrs	r3, r2
 8019218:	86fb      	strh	r3, [r7, #54]	@ 0x36
 801921a:	697b      	ldr	r3, [r7, #20]
 801921c:	681b      	ldr	r3, [r3, #0]
 801921e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8019220:	60da      	str	r2, [r3, #12]
 8019222:	e0bc      	b.n	801939e <UART_SetConfig+0xca2>
 8019224:	2301      	movs	r3, #1
 8019226:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 801922a:	e0b8      	b.n	801939e <UART_SetConfig+0xca2>
 801922c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8019230:	2b20      	cmp	r3, #32
 8019232:	dc4b      	bgt.n	80192cc <UART_SetConfig+0xbd0>
 8019234:	2b00      	cmp	r3, #0
 8019236:	f2c0 8087 	blt.w	8019348 <UART_SetConfig+0xc4c>
 801923a:	2b20      	cmp	r3, #32
 801923c:	f200 8084 	bhi.w	8019348 <UART_SetConfig+0xc4c>
 8019240:	a201      	add	r2, pc, #4	@ (adr r2, 8019248 <UART_SetConfig+0xb4c>)
 8019242:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019246:	bf00      	nop
 8019248:	080192d3 	.word	0x080192d3
 801924c:	080192db 	.word	0x080192db
 8019250:	08019349 	.word	0x08019349
 8019254:	08019349 	.word	0x08019349
 8019258:	080192e3 	.word	0x080192e3
 801925c:	08019349 	.word	0x08019349
 8019260:	08019349 	.word	0x08019349
 8019264:	08019349 	.word	0x08019349
 8019268:	080192f3 	.word	0x080192f3
 801926c:	08019349 	.word	0x08019349
 8019270:	08019349 	.word	0x08019349
 8019274:	08019349 	.word	0x08019349
 8019278:	08019349 	.word	0x08019349
 801927c:	08019349 	.word	0x08019349
 8019280:	08019349 	.word	0x08019349
 8019284:	08019349 	.word	0x08019349
 8019288:	08019303 	.word	0x08019303
 801928c:	08019349 	.word	0x08019349
 8019290:	08019349 	.word	0x08019349
 8019294:	08019349 	.word	0x08019349
 8019298:	08019349 	.word	0x08019349
 801929c:	08019349 	.word	0x08019349
 80192a0:	08019349 	.word	0x08019349
 80192a4:	08019349 	.word	0x08019349
 80192a8:	08019349 	.word	0x08019349
 80192ac:	08019349 	.word	0x08019349
 80192b0:	08019349 	.word	0x08019349
 80192b4:	08019349 	.word	0x08019349
 80192b8:	08019349 	.word	0x08019349
 80192bc:	08019349 	.word	0x08019349
 80192c0:	08019349 	.word	0x08019349
 80192c4:	08019349 	.word	0x08019349
 80192c8:	0801933b 	.word	0x0801933b
 80192cc:	2b40      	cmp	r3, #64	@ 0x40
 80192ce:	d037      	beq.n	8019340 <UART_SetConfig+0xc44>
 80192d0:	e03a      	b.n	8019348 <UART_SetConfig+0xc4c>
 80192d2:	f7f8 fd43 	bl	8011d5c <HAL_RCC_GetPCLK1Freq>
 80192d6:	63f8      	str	r0, [r7, #60]	@ 0x3c
 80192d8:	e03c      	b.n	8019354 <UART_SetConfig+0xc58>
 80192da:	f7f8 fd55 	bl	8011d88 <HAL_RCC_GetPCLK2Freq>
 80192de:	63f8      	str	r0, [r7, #60]	@ 0x3c
 80192e0:	e038      	b.n	8019354 <UART_SetConfig+0xc58>
 80192e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80192e6:	4618      	mov	r0, r3
 80192e8:	f7fa fbec 	bl	8013ac4 <HAL_RCCEx_GetPLL2ClockFreq>
 80192ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80192ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80192f0:	e030      	b.n	8019354 <UART_SetConfig+0xc58>
 80192f2:	f107 0318 	add.w	r3, r7, #24
 80192f6:	4618      	mov	r0, r3
 80192f8:	f7fa fd38 	bl	8013d6c <HAL_RCCEx_GetPLL3ClockFreq>
 80192fc:	69fb      	ldr	r3, [r7, #28]
 80192fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8019300:	e028      	b.n	8019354 <UART_SetConfig+0xc58>
 8019302:	4b09      	ldr	r3, [pc, #36]	@ (8019328 <UART_SetConfig+0xc2c>)
 8019304:	681b      	ldr	r3, [r3, #0]
 8019306:	f003 0320 	and.w	r3, r3, #32
 801930a:	2b00      	cmp	r3, #0
 801930c:	d012      	beq.n	8019334 <UART_SetConfig+0xc38>
 801930e:	4b06      	ldr	r3, [pc, #24]	@ (8019328 <UART_SetConfig+0xc2c>)
 8019310:	681b      	ldr	r3, [r3, #0]
 8019312:	08db      	lsrs	r3, r3, #3
 8019314:	f003 0303 	and.w	r3, r3, #3
 8019318:	4a04      	ldr	r2, [pc, #16]	@ (801932c <UART_SetConfig+0xc30>)
 801931a:	fa22 f303 	lsr.w	r3, r2, r3
 801931e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8019320:	e018      	b.n	8019354 <UART_SetConfig+0xc58>
 8019322:	bf00      	nop
 8019324:	0801e8e4 	.word	0x0801e8e4
 8019328:	58024400 	.word	0x58024400
 801932c:	03d09000 	.word	0x03d09000
 8019330:	003d0900 	.word	0x003d0900
 8019334:	4b24      	ldr	r3, [pc, #144]	@ (80193c8 <UART_SetConfig+0xccc>)
 8019336:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8019338:	e00c      	b.n	8019354 <UART_SetConfig+0xc58>
 801933a:	4b24      	ldr	r3, [pc, #144]	@ (80193cc <UART_SetConfig+0xcd0>)
 801933c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801933e:	e009      	b.n	8019354 <UART_SetConfig+0xc58>
 8019340:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8019344:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8019346:	e005      	b.n	8019354 <UART_SetConfig+0xc58>
 8019348:	2300      	movs	r3, #0
 801934a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801934c:	2301      	movs	r3, #1
 801934e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8019352:	bf00      	nop
 8019354:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019356:	2b00      	cmp	r3, #0
 8019358:	d021      	beq.n	801939e <UART_SetConfig+0xca2>
 801935a:	697b      	ldr	r3, [r7, #20]
 801935c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801935e:	4a1c      	ldr	r2, [pc, #112]	@ (80193d0 <UART_SetConfig+0xcd4>)
 8019360:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8019364:	461a      	mov	r2, r3
 8019366:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019368:	fbb3 f2f2 	udiv	r2, r3, r2
 801936c:	697b      	ldr	r3, [r7, #20]
 801936e:	685b      	ldr	r3, [r3, #4]
 8019370:	085b      	lsrs	r3, r3, #1
 8019372:	441a      	add	r2, r3
 8019374:	697b      	ldr	r3, [r7, #20]
 8019376:	685b      	ldr	r3, [r3, #4]
 8019378:	fbb2 f3f3 	udiv	r3, r2, r3
 801937c:	63bb      	str	r3, [r7, #56]	@ 0x38
 801937e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019380:	2b0f      	cmp	r3, #15
 8019382:	d909      	bls.n	8019398 <UART_SetConfig+0xc9c>
 8019384:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019386:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801938a:	d205      	bcs.n	8019398 <UART_SetConfig+0xc9c>
 801938c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801938e:	b29a      	uxth	r2, r3
 8019390:	697b      	ldr	r3, [r7, #20]
 8019392:	681b      	ldr	r3, [r3, #0]
 8019394:	60da      	str	r2, [r3, #12]
 8019396:	e002      	b.n	801939e <UART_SetConfig+0xca2>
 8019398:	2301      	movs	r3, #1
 801939a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 801939e:	697b      	ldr	r3, [r7, #20]
 80193a0:	2201      	movs	r2, #1
 80193a2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80193a6:	697b      	ldr	r3, [r7, #20]
 80193a8:	2201      	movs	r2, #1
 80193aa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 80193ae:	697b      	ldr	r3, [r7, #20]
 80193b0:	2200      	movs	r2, #0
 80193b2:	675a      	str	r2, [r3, #116]	@ 0x74
 80193b4:	697b      	ldr	r3, [r7, #20]
 80193b6:	2200      	movs	r2, #0
 80193b8:	679a      	str	r2, [r3, #120]	@ 0x78
 80193ba:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 80193be:	4618      	mov	r0, r3
 80193c0:	3748      	adds	r7, #72	@ 0x48
 80193c2:	46bd      	mov	sp, r7
 80193c4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80193c8:	03d09000 	.word	0x03d09000
 80193cc:	003d0900 	.word	0x003d0900
 80193d0:	0801e8e4 	.word	0x0801e8e4

080193d4 <UART_AdvFeatureConfig>:
 80193d4:	b480      	push	{r7}
 80193d6:	b083      	sub	sp, #12
 80193d8:	af00      	add	r7, sp, #0
 80193da:	6078      	str	r0, [r7, #4]
 80193dc:	687b      	ldr	r3, [r7, #4]
 80193de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80193e0:	f003 0308 	and.w	r3, r3, #8
 80193e4:	2b00      	cmp	r3, #0
 80193e6:	d00a      	beq.n	80193fe <UART_AdvFeatureConfig+0x2a>
 80193e8:	687b      	ldr	r3, [r7, #4]
 80193ea:	681b      	ldr	r3, [r3, #0]
 80193ec:	685b      	ldr	r3, [r3, #4]
 80193ee:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80193f2:	687b      	ldr	r3, [r7, #4]
 80193f4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80193f6:	687b      	ldr	r3, [r7, #4]
 80193f8:	681b      	ldr	r3, [r3, #0]
 80193fa:	430a      	orrs	r2, r1
 80193fc:	605a      	str	r2, [r3, #4]
 80193fe:	687b      	ldr	r3, [r7, #4]
 8019400:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019402:	f003 0301 	and.w	r3, r3, #1
 8019406:	2b00      	cmp	r3, #0
 8019408:	d00a      	beq.n	8019420 <UART_AdvFeatureConfig+0x4c>
 801940a:	687b      	ldr	r3, [r7, #4]
 801940c:	681b      	ldr	r3, [r3, #0]
 801940e:	685b      	ldr	r3, [r3, #4]
 8019410:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8019414:	687b      	ldr	r3, [r7, #4]
 8019416:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8019418:	687b      	ldr	r3, [r7, #4]
 801941a:	681b      	ldr	r3, [r3, #0]
 801941c:	430a      	orrs	r2, r1
 801941e:	605a      	str	r2, [r3, #4]
 8019420:	687b      	ldr	r3, [r7, #4]
 8019422:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019424:	f003 0302 	and.w	r3, r3, #2
 8019428:	2b00      	cmp	r3, #0
 801942a:	d00a      	beq.n	8019442 <UART_AdvFeatureConfig+0x6e>
 801942c:	687b      	ldr	r3, [r7, #4]
 801942e:	681b      	ldr	r3, [r3, #0]
 8019430:	685b      	ldr	r3, [r3, #4]
 8019432:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8019436:	687b      	ldr	r3, [r7, #4]
 8019438:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801943a:	687b      	ldr	r3, [r7, #4]
 801943c:	681b      	ldr	r3, [r3, #0]
 801943e:	430a      	orrs	r2, r1
 8019440:	605a      	str	r2, [r3, #4]
 8019442:	687b      	ldr	r3, [r7, #4]
 8019444:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019446:	f003 0304 	and.w	r3, r3, #4
 801944a:	2b00      	cmp	r3, #0
 801944c:	d00a      	beq.n	8019464 <UART_AdvFeatureConfig+0x90>
 801944e:	687b      	ldr	r3, [r7, #4]
 8019450:	681b      	ldr	r3, [r3, #0]
 8019452:	685b      	ldr	r3, [r3, #4]
 8019454:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8019458:	687b      	ldr	r3, [r7, #4]
 801945a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801945c:	687b      	ldr	r3, [r7, #4]
 801945e:	681b      	ldr	r3, [r3, #0]
 8019460:	430a      	orrs	r2, r1
 8019462:	605a      	str	r2, [r3, #4]
 8019464:	687b      	ldr	r3, [r7, #4]
 8019466:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019468:	f003 0310 	and.w	r3, r3, #16
 801946c:	2b00      	cmp	r3, #0
 801946e:	d00a      	beq.n	8019486 <UART_AdvFeatureConfig+0xb2>
 8019470:	687b      	ldr	r3, [r7, #4]
 8019472:	681b      	ldr	r3, [r3, #0]
 8019474:	689b      	ldr	r3, [r3, #8]
 8019476:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 801947a:	687b      	ldr	r3, [r7, #4]
 801947c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801947e:	687b      	ldr	r3, [r7, #4]
 8019480:	681b      	ldr	r3, [r3, #0]
 8019482:	430a      	orrs	r2, r1
 8019484:	609a      	str	r2, [r3, #8]
 8019486:	687b      	ldr	r3, [r7, #4]
 8019488:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801948a:	f003 0320 	and.w	r3, r3, #32
 801948e:	2b00      	cmp	r3, #0
 8019490:	d00a      	beq.n	80194a8 <UART_AdvFeatureConfig+0xd4>
 8019492:	687b      	ldr	r3, [r7, #4]
 8019494:	681b      	ldr	r3, [r3, #0]
 8019496:	689b      	ldr	r3, [r3, #8]
 8019498:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 801949c:	687b      	ldr	r3, [r7, #4]
 801949e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80194a0:	687b      	ldr	r3, [r7, #4]
 80194a2:	681b      	ldr	r3, [r3, #0]
 80194a4:	430a      	orrs	r2, r1
 80194a6:	609a      	str	r2, [r3, #8]
 80194a8:	687b      	ldr	r3, [r7, #4]
 80194aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80194ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80194b0:	2b00      	cmp	r3, #0
 80194b2:	d01a      	beq.n	80194ea <UART_AdvFeatureConfig+0x116>
 80194b4:	687b      	ldr	r3, [r7, #4]
 80194b6:	681b      	ldr	r3, [r3, #0]
 80194b8:	685b      	ldr	r3, [r3, #4]
 80194ba:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80194be:	687b      	ldr	r3, [r7, #4]
 80194c0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80194c2:	687b      	ldr	r3, [r7, #4]
 80194c4:	681b      	ldr	r3, [r3, #0]
 80194c6:	430a      	orrs	r2, r1
 80194c8:	605a      	str	r2, [r3, #4]
 80194ca:	687b      	ldr	r3, [r7, #4]
 80194cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80194ce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80194d2:	d10a      	bne.n	80194ea <UART_AdvFeatureConfig+0x116>
 80194d4:	687b      	ldr	r3, [r7, #4]
 80194d6:	681b      	ldr	r3, [r3, #0]
 80194d8:	685b      	ldr	r3, [r3, #4]
 80194da:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80194de:	687b      	ldr	r3, [r7, #4]
 80194e0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80194e2:	687b      	ldr	r3, [r7, #4]
 80194e4:	681b      	ldr	r3, [r3, #0]
 80194e6:	430a      	orrs	r2, r1
 80194e8:	605a      	str	r2, [r3, #4]
 80194ea:	687b      	ldr	r3, [r7, #4]
 80194ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80194ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80194f2:	2b00      	cmp	r3, #0
 80194f4:	d00a      	beq.n	801950c <UART_AdvFeatureConfig+0x138>
 80194f6:	687b      	ldr	r3, [r7, #4]
 80194f8:	681b      	ldr	r3, [r3, #0]
 80194fa:	685b      	ldr	r3, [r3, #4]
 80194fc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8019500:	687b      	ldr	r3, [r7, #4]
 8019502:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8019504:	687b      	ldr	r3, [r7, #4]
 8019506:	681b      	ldr	r3, [r3, #0]
 8019508:	430a      	orrs	r2, r1
 801950a:	605a      	str	r2, [r3, #4]
 801950c:	bf00      	nop
 801950e:	370c      	adds	r7, #12
 8019510:	46bd      	mov	sp, r7
 8019512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019516:	4770      	bx	lr

08019518 <UART_CheckIdleState>:
 8019518:	b580      	push	{r7, lr}
 801951a:	b098      	sub	sp, #96	@ 0x60
 801951c:	af02      	add	r7, sp, #8
 801951e:	6078      	str	r0, [r7, #4]
 8019520:	687b      	ldr	r3, [r7, #4]
 8019522:	2200      	movs	r2, #0
 8019524:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 8019528:	f7ef fe88 	bl	800923c <HAL_GetTick>
 801952c:	6578      	str	r0, [r7, #84]	@ 0x54
 801952e:	687b      	ldr	r3, [r7, #4]
 8019530:	681b      	ldr	r3, [r3, #0]
 8019532:	681b      	ldr	r3, [r3, #0]
 8019534:	f003 0308 	and.w	r3, r3, #8
 8019538:	2b08      	cmp	r3, #8
 801953a:	d12f      	bne.n	801959c <UART_CheckIdleState+0x84>
 801953c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8019540:	9300      	str	r3, [sp, #0]
 8019542:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019544:	2200      	movs	r2, #0
 8019546:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 801954a:	6878      	ldr	r0, [r7, #4]
 801954c:	f000 f88e 	bl	801966c <UART_WaitOnFlagUntilTimeout>
 8019550:	4603      	mov	r3, r0
 8019552:	2b00      	cmp	r3, #0
 8019554:	d022      	beq.n	801959c <UART_CheckIdleState+0x84>
 8019556:	687b      	ldr	r3, [r7, #4]
 8019558:	681b      	ldr	r3, [r3, #0]
 801955a:	63bb      	str	r3, [r7, #56]	@ 0x38
 801955c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801955e:	e853 3f00 	ldrex	r3, [r3]
 8019562:	637b      	str	r3, [r7, #52]	@ 0x34
 8019564:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019566:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801956a:	653b      	str	r3, [r7, #80]	@ 0x50
 801956c:	687b      	ldr	r3, [r7, #4]
 801956e:	681b      	ldr	r3, [r3, #0]
 8019570:	461a      	mov	r2, r3
 8019572:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019574:	647b      	str	r3, [r7, #68]	@ 0x44
 8019576:	643a      	str	r2, [r7, #64]	@ 0x40
 8019578:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801957a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801957c:	e841 2300 	strex	r3, r2, [r1]
 8019580:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8019582:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019584:	2b00      	cmp	r3, #0
 8019586:	d1e6      	bne.n	8019556 <UART_CheckIdleState+0x3e>
 8019588:	687b      	ldr	r3, [r7, #4]
 801958a:	2220      	movs	r2, #32
 801958c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 8019590:	687b      	ldr	r3, [r7, #4]
 8019592:	2200      	movs	r2, #0
 8019594:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
 8019598:	2303      	movs	r3, #3
 801959a:	e063      	b.n	8019664 <UART_CheckIdleState+0x14c>
 801959c:	687b      	ldr	r3, [r7, #4]
 801959e:	681b      	ldr	r3, [r3, #0]
 80195a0:	681b      	ldr	r3, [r3, #0]
 80195a2:	f003 0304 	and.w	r3, r3, #4
 80195a6:	2b04      	cmp	r3, #4
 80195a8:	d149      	bne.n	801963e <UART_CheckIdleState+0x126>
 80195aa:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80195ae:	9300      	str	r3, [sp, #0]
 80195b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80195b2:	2200      	movs	r2, #0
 80195b4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80195b8:	6878      	ldr	r0, [r7, #4]
 80195ba:	f000 f857 	bl	801966c <UART_WaitOnFlagUntilTimeout>
 80195be:	4603      	mov	r3, r0
 80195c0:	2b00      	cmp	r3, #0
 80195c2:	d03c      	beq.n	801963e <UART_CheckIdleState+0x126>
 80195c4:	687b      	ldr	r3, [r7, #4]
 80195c6:	681b      	ldr	r3, [r3, #0]
 80195c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80195ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80195cc:	e853 3f00 	ldrex	r3, [r3]
 80195d0:	623b      	str	r3, [r7, #32]
 80195d2:	6a3b      	ldr	r3, [r7, #32]
 80195d4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80195d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80195da:	687b      	ldr	r3, [r7, #4]
 80195dc:	681b      	ldr	r3, [r3, #0]
 80195de:	461a      	mov	r2, r3
 80195e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80195e2:	633b      	str	r3, [r7, #48]	@ 0x30
 80195e4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80195e6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80195e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80195ea:	e841 2300 	strex	r3, r2, [r1]
 80195ee:	62bb      	str	r3, [r7, #40]	@ 0x28
 80195f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80195f2:	2b00      	cmp	r3, #0
 80195f4:	d1e6      	bne.n	80195c4 <UART_CheckIdleState+0xac>
 80195f6:	687b      	ldr	r3, [r7, #4]
 80195f8:	681b      	ldr	r3, [r3, #0]
 80195fa:	3308      	adds	r3, #8
 80195fc:	613b      	str	r3, [r7, #16]
 80195fe:	693b      	ldr	r3, [r7, #16]
 8019600:	e853 3f00 	ldrex	r3, [r3]
 8019604:	60fb      	str	r3, [r7, #12]
 8019606:	68fb      	ldr	r3, [r7, #12]
 8019608:	f023 0301 	bic.w	r3, r3, #1
 801960c:	64bb      	str	r3, [r7, #72]	@ 0x48
 801960e:	687b      	ldr	r3, [r7, #4]
 8019610:	681b      	ldr	r3, [r3, #0]
 8019612:	3308      	adds	r3, #8
 8019614:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8019616:	61fa      	str	r2, [r7, #28]
 8019618:	61bb      	str	r3, [r7, #24]
 801961a:	69b9      	ldr	r1, [r7, #24]
 801961c:	69fa      	ldr	r2, [r7, #28]
 801961e:	e841 2300 	strex	r3, r2, [r1]
 8019622:	617b      	str	r3, [r7, #20]
 8019624:	697b      	ldr	r3, [r7, #20]
 8019626:	2b00      	cmp	r3, #0
 8019628:	d1e5      	bne.n	80195f6 <UART_CheckIdleState+0xde>
 801962a:	687b      	ldr	r3, [r7, #4]
 801962c:	2220      	movs	r2, #32
 801962e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 8019632:	687b      	ldr	r3, [r7, #4]
 8019634:	2200      	movs	r2, #0
 8019636:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
 801963a:	2303      	movs	r3, #3
 801963c:	e012      	b.n	8019664 <UART_CheckIdleState+0x14c>
 801963e:	687b      	ldr	r3, [r7, #4]
 8019640:	2220      	movs	r2, #32
 8019642:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 8019646:	687b      	ldr	r3, [r7, #4]
 8019648:	2220      	movs	r2, #32
 801964a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 801964e:	687b      	ldr	r3, [r7, #4]
 8019650:	2200      	movs	r2, #0
 8019652:	66da      	str	r2, [r3, #108]	@ 0x6c
 8019654:	687b      	ldr	r3, [r7, #4]
 8019656:	2200      	movs	r2, #0
 8019658:	671a      	str	r2, [r3, #112]	@ 0x70
 801965a:	687b      	ldr	r3, [r7, #4]
 801965c:	2200      	movs	r2, #0
 801965e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
 8019662:	2300      	movs	r3, #0
 8019664:	4618      	mov	r0, r3
 8019666:	3758      	adds	r7, #88	@ 0x58
 8019668:	46bd      	mov	sp, r7
 801966a:	bd80      	pop	{r7, pc}

0801966c <UART_WaitOnFlagUntilTimeout>:
 801966c:	b580      	push	{r7, lr}
 801966e:	b084      	sub	sp, #16
 8019670:	af00      	add	r7, sp, #0
 8019672:	60f8      	str	r0, [r7, #12]
 8019674:	60b9      	str	r1, [r7, #8]
 8019676:	603b      	str	r3, [r7, #0]
 8019678:	4613      	mov	r3, r2
 801967a:	71fb      	strb	r3, [r7, #7]
 801967c:	e04f      	b.n	801971e <UART_WaitOnFlagUntilTimeout+0xb2>
 801967e:	69bb      	ldr	r3, [r7, #24]
 8019680:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019684:	d04b      	beq.n	801971e <UART_WaitOnFlagUntilTimeout+0xb2>
 8019686:	f7ef fdd9 	bl	800923c <HAL_GetTick>
 801968a:	4602      	mov	r2, r0
 801968c:	683b      	ldr	r3, [r7, #0]
 801968e:	1ad3      	subs	r3, r2, r3
 8019690:	69ba      	ldr	r2, [r7, #24]
 8019692:	429a      	cmp	r2, r3
 8019694:	d302      	bcc.n	801969c <UART_WaitOnFlagUntilTimeout+0x30>
 8019696:	69bb      	ldr	r3, [r7, #24]
 8019698:	2b00      	cmp	r3, #0
 801969a:	d101      	bne.n	80196a0 <UART_WaitOnFlagUntilTimeout+0x34>
 801969c:	2303      	movs	r3, #3
 801969e:	e04e      	b.n	801973e <UART_WaitOnFlagUntilTimeout+0xd2>
 80196a0:	68fb      	ldr	r3, [r7, #12]
 80196a2:	681b      	ldr	r3, [r3, #0]
 80196a4:	681b      	ldr	r3, [r3, #0]
 80196a6:	f003 0304 	and.w	r3, r3, #4
 80196aa:	2b00      	cmp	r3, #0
 80196ac:	d037      	beq.n	801971e <UART_WaitOnFlagUntilTimeout+0xb2>
 80196ae:	68bb      	ldr	r3, [r7, #8]
 80196b0:	2b80      	cmp	r3, #128	@ 0x80
 80196b2:	d034      	beq.n	801971e <UART_WaitOnFlagUntilTimeout+0xb2>
 80196b4:	68bb      	ldr	r3, [r7, #8]
 80196b6:	2b40      	cmp	r3, #64	@ 0x40
 80196b8:	d031      	beq.n	801971e <UART_WaitOnFlagUntilTimeout+0xb2>
 80196ba:	68fb      	ldr	r3, [r7, #12]
 80196bc:	681b      	ldr	r3, [r3, #0]
 80196be:	69db      	ldr	r3, [r3, #28]
 80196c0:	f003 0308 	and.w	r3, r3, #8
 80196c4:	2b08      	cmp	r3, #8
 80196c6:	d110      	bne.n	80196ea <UART_WaitOnFlagUntilTimeout+0x7e>
 80196c8:	68fb      	ldr	r3, [r7, #12]
 80196ca:	681b      	ldr	r3, [r3, #0]
 80196cc:	2208      	movs	r2, #8
 80196ce:	621a      	str	r2, [r3, #32]
 80196d0:	68f8      	ldr	r0, [r7, #12]
 80196d2:	f000 f95b 	bl	801998c <UART_EndRxTransfer>
 80196d6:	68fb      	ldr	r3, [r7, #12]
 80196d8:	2208      	movs	r2, #8
 80196da:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 80196de:	68fb      	ldr	r3, [r7, #12]
 80196e0:	2200      	movs	r2, #0
 80196e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
 80196e6:	2301      	movs	r3, #1
 80196e8:	e029      	b.n	801973e <UART_WaitOnFlagUntilTimeout+0xd2>
 80196ea:	68fb      	ldr	r3, [r7, #12]
 80196ec:	681b      	ldr	r3, [r3, #0]
 80196ee:	69db      	ldr	r3, [r3, #28]
 80196f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80196f4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80196f8:	d111      	bne.n	801971e <UART_WaitOnFlagUntilTimeout+0xb2>
 80196fa:	68fb      	ldr	r3, [r7, #12]
 80196fc:	681b      	ldr	r3, [r3, #0]
 80196fe:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8019702:	621a      	str	r2, [r3, #32]
 8019704:	68f8      	ldr	r0, [r7, #12]
 8019706:	f000 f941 	bl	801998c <UART_EndRxTransfer>
 801970a:	68fb      	ldr	r3, [r7, #12]
 801970c:	2220      	movs	r2, #32
 801970e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 8019712:	68fb      	ldr	r3, [r7, #12]
 8019714:	2200      	movs	r2, #0
 8019716:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
 801971a:	2303      	movs	r3, #3
 801971c:	e00f      	b.n	801973e <UART_WaitOnFlagUntilTimeout+0xd2>
 801971e:	68fb      	ldr	r3, [r7, #12]
 8019720:	681b      	ldr	r3, [r3, #0]
 8019722:	69da      	ldr	r2, [r3, #28]
 8019724:	68bb      	ldr	r3, [r7, #8]
 8019726:	4013      	ands	r3, r2
 8019728:	68ba      	ldr	r2, [r7, #8]
 801972a:	429a      	cmp	r2, r3
 801972c:	bf0c      	ite	eq
 801972e:	2301      	moveq	r3, #1
 8019730:	2300      	movne	r3, #0
 8019732:	b2db      	uxtb	r3, r3
 8019734:	461a      	mov	r2, r3
 8019736:	79fb      	ldrb	r3, [r7, #7]
 8019738:	429a      	cmp	r2, r3
 801973a:	d0a0      	beq.n	801967e <UART_WaitOnFlagUntilTimeout+0x12>
 801973c:	2300      	movs	r3, #0
 801973e:	4618      	mov	r0, r3
 8019740:	3710      	adds	r7, #16
 8019742:	46bd      	mov	sp, r7
 8019744:	bd80      	pop	{r7, pc}
	...

08019748 <UART_Start_Receive_IT>:
 8019748:	b480      	push	{r7}
 801974a:	b0a3      	sub	sp, #140	@ 0x8c
 801974c:	af00      	add	r7, sp, #0
 801974e:	60f8      	str	r0, [r7, #12]
 8019750:	60b9      	str	r1, [r7, #8]
 8019752:	4613      	mov	r3, r2
 8019754:	80fb      	strh	r3, [r7, #6]
 8019756:	68fb      	ldr	r3, [r7, #12]
 8019758:	68ba      	ldr	r2, [r7, #8]
 801975a:	659a      	str	r2, [r3, #88]	@ 0x58
 801975c:	68fb      	ldr	r3, [r7, #12]
 801975e:	88fa      	ldrh	r2, [r7, #6]
 8019760:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8019764:	68fb      	ldr	r3, [r7, #12]
 8019766:	88fa      	ldrh	r2, [r7, #6]
 8019768:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
 801976c:	68fb      	ldr	r3, [r7, #12]
 801976e:	2200      	movs	r2, #0
 8019770:	675a      	str	r2, [r3, #116]	@ 0x74
 8019772:	68fb      	ldr	r3, [r7, #12]
 8019774:	689b      	ldr	r3, [r3, #8]
 8019776:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801977a:	d10e      	bne.n	801979a <UART_Start_Receive_IT+0x52>
 801977c:	68fb      	ldr	r3, [r7, #12]
 801977e:	691b      	ldr	r3, [r3, #16]
 8019780:	2b00      	cmp	r3, #0
 8019782:	d105      	bne.n	8019790 <UART_Start_Receive_IT+0x48>
 8019784:	68fb      	ldr	r3, [r7, #12]
 8019786:	f240 12ff 	movw	r2, #511	@ 0x1ff
 801978a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 801978e:	e02d      	b.n	80197ec <UART_Start_Receive_IT+0xa4>
 8019790:	68fb      	ldr	r3, [r7, #12]
 8019792:	22ff      	movs	r2, #255	@ 0xff
 8019794:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8019798:	e028      	b.n	80197ec <UART_Start_Receive_IT+0xa4>
 801979a:	68fb      	ldr	r3, [r7, #12]
 801979c:	689b      	ldr	r3, [r3, #8]
 801979e:	2b00      	cmp	r3, #0
 80197a0:	d10d      	bne.n	80197be <UART_Start_Receive_IT+0x76>
 80197a2:	68fb      	ldr	r3, [r7, #12]
 80197a4:	691b      	ldr	r3, [r3, #16]
 80197a6:	2b00      	cmp	r3, #0
 80197a8:	d104      	bne.n	80197b4 <UART_Start_Receive_IT+0x6c>
 80197aa:	68fb      	ldr	r3, [r7, #12]
 80197ac:	22ff      	movs	r2, #255	@ 0xff
 80197ae:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80197b2:	e01b      	b.n	80197ec <UART_Start_Receive_IT+0xa4>
 80197b4:	68fb      	ldr	r3, [r7, #12]
 80197b6:	227f      	movs	r2, #127	@ 0x7f
 80197b8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80197bc:	e016      	b.n	80197ec <UART_Start_Receive_IT+0xa4>
 80197be:	68fb      	ldr	r3, [r7, #12]
 80197c0:	689b      	ldr	r3, [r3, #8]
 80197c2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80197c6:	d10d      	bne.n	80197e4 <UART_Start_Receive_IT+0x9c>
 80197c8:	68fb      	ldr	r3, [r7, #12]
 80197ca:	691b      	ldr	r3, [r3, #16]
 80197cc:	2b00      	cmp	r3, #0
 80197ce:	d104      	bne.n	80197da <UART_Start_Receive_IT+0x92>
 80197d0:	68fb      	ldr	r3, [r7, #12]
 80197d2:	227f      	movs	r2, #127	@ 0x7f
 80197d4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80197d8:	e008      	b.n	80197ec <UART_Start_Receive_IT+0xa4>
 80197da:	68fb      	ldr	r3, [r7, #12]
 80197dc:	223f      	movs	r2, #63	@ 0x3f
 80197de:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80197e2:	e003      	b.n	80197ec <UART_Start_Receive_IT+0xa4>
 80197e4:	68fb      	ldr	r3, [r7, #12]
 80197e6:	2200      	movs	r2, #0
 80197e8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80197ec:	68fb      	ldr	r3, [r7, #12]
 80197ee:	2200      	movs	r2, #0
 80197f0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 80197f4:	68fb      	ldr	r3, [r7, #12]
 80197f6:	2222      	movs	r2, #34	@ 0x22
 80197f8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 80197fc:	68fb      	ldr	r3, [r7, #12]
 80197fe:	681b      	ldr	r3, [r3, #0]
 8019800:	3308      	adds	r3, #8
 8019802:	667b      	str	r3, [r7, #100]	@ 0x64
 8019804:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8019806:	e853 3f00 	ldrex	r3, [r3]
 801980a:	663b      	str	r3, [r7, #96]	@ 0x60
 801980c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801980e:	f043 0301 	orr.w	r3, r3, #1
 8019812:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8019816:	68fb      	ldr	r3, [r7, #12]
 8019818:	681b      	ldr	r3, [r3, #0]
 801981a:	3308      	adds	r3, #8
 801981c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8019820:	673a      	str	r2, [r7, #112]	@ 0x70
 8019822:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8019824:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8019826:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8019828:	e841 2300 	strex	r3, r2, [r1]
 801982c:	66bb      	str	r3, [r7, #104]	@ 0x68
 801982e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8019830:	2b00      	cmp	r3, #0
 8019832:	d1e3      	bne.n	80197fc <UART_Start_Receive_IT+0xb4>
 8019834:	68fb      	ldr	r3, [r7, #12]
 8019836:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8019838:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801983c:	d14f      	bne.n	80198de <UART_Start_Receive_IT+0x196>
 801983e:	68fb      	ldr	r3, [r7, #12]
 8019840:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8019844:	88fa      	ldrh	r2, [r7, #6]
 8019846:	429a      	cmp	r2, r3
 8019848:	d349      	bcc.n	80198de <UART_Start_Receive_IT+0x196>
 801984a:	68fb      	ldr	r3, [r7, #12]
 801984c:	689b      	ldr	r3, [r3, #8]
 801984e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8019852:	d107      	bne.n	8019864 <UART_Start_Receive_IT+0x11c>
 8019854:	68fb      	ldr	r3, [r7, #12]
 8019856:	691b      	ldr	r3, [r3, #16]
 8019858:	2b00      	cmp	r3, #0
 801985a:	d103      	bne.n	8019864 <UART_Start_Receive_IT+0x11c>
 801985c:	68fb      	ldr	r3, [r7, #12]
 801985e:	4a47      	ldr	r2, [pc, #284]	@ (801997c <UART_Start_Receive_IT+0x234>)
 8019860:	675a      	str	r2, [r3, #116]	@ 0x74
 8019862:	e002      	b.n	801986a <UART_Start_Receive_IT+0x122>
 8019864:	68fb      	ldr	r3, [r7, #12]
 8019866:	4a46      	ldr	r2, [pc, #280]	@ (8019980 <UART_Start_Receive_IT+0x238>)
 8019868:	675a      	str	r2, [r3, #116]	@ 0x74
 801986a:	68fb      	ldr	r3, [r7, #12]
 801986c:	691b      	ldr	r3, [r3, #16]
 801986e:	2b00      	cmp	r3, #0
 8019870:	d01a      	beq.n	80198a8 <UART_Start_Receive_IT+0x160>
 8019872:	68fb      	ldr	r3, [r7, #12]
 8019874:	681b      	ldr	r3, [r3, #0]
 8019876:	653b      	str	r3, [r7, #80]	@ 0x50
 8019878:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801987a:	e853 3f00 	ldrex	r3, [r3]
 801987e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8019880:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8019882:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8019886:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 801988a:	68fb      	ldr	r3, [r7, #12]
 801988c:	681b      	ldr	r3, [r3, #0]
 801988e:	461a      	mov	r2, r3
 8019890:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8019894:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8019896:	65ba      	str	r2, [r7, #88]	@ 0x58
 8019898:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 801989a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801989c:	e841 2300 	strex	r3, r2, [r1]
 80198a0:	657b      	str	r3, [r7, #84]	@ 0x54
 80198a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80198a4:	2b00      	cmp	r3, #0
 80198a6:	d1e4      	bne.n	8019872 <UART_Start_Receive_IT+0x12a>
 80198a8:	68fb      	ldr	r3, [r7, #12]
 80198aa:	681b      	ldr	r3, [r3, #0]
 80198ac:	3308      	adds	r3, #8
 80198ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80198b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80198b2:	e853 3f00 	ldrex	r3, [r3]
 80198b6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80198b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80198ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80198be:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80198c0:	68fb      	ldr	r3, [r7, #12]
 80198c2:	681b      	ldr	r3, [r3, #0]
 80198c4:	3308      	adds	r3, #8
 80198c6:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80198c8:	64ba      	str	r2, [r7, #72]	@ 0x48
 80198ca:	647b      	str	r3, [r7, #68]	@ 0x44
 80198cc:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80198ce:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80198d0:	e841 2300 	strex	r3, r2, [r1]
 80198d4:	643b      	str	r3, [r7, #64]	@ 0x40
 80198d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80198d8:	2b00      	cmp	r3, #0
 80198da:	d1e5      	bne.n	80198a8 <UART_Start_Receive_IT+0x160>
 80198dc:	e046      	b.n	801996c <UART_Start_Receive_IT+0x224>
 80198de:	68fb      	ldr	r3, [r7, #12]
 80198e0:	689b      	ldr	r3, [r3, #8]
 80198e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80198e6:	d107      	bne.n	80198f8 <UART_Start_Receive_IT+0x1b0>
 80198e8:	68fb      	ldr	r3, [r7, #12]
 80198ea:	691b      	ldr	r3, [r3, #16]
 80198ec:	2b00      	cmp	r3, #0
 80198ee:	d103      	bne.n	80198f8 <UART_Start_Receive_IT+0x1b0>
 80198f0:	68fb      	ldr	r3, [r7, #12]
 80198f2:	4a24      	ldr	r2, [pc, #144]	@ (8019984 <UART_Start_Receive_IT+0x23c>)
 80198f4:	675a      	str	r2, [r3, #116]	@ 0x74
 80198f6:	e002      	b.n	80198fe <UART_Start_Receive_IT+0x1b6>
 80198f8:	68fb      	ldr	r3, [r7, #12]
 80198fa:	4a23      	ldr	r2, [pc, #140]	@ (8019988 <UART_Start_Receive_IT+0x240>)
 80198fc:	675a      	str	r2, [r3, #116]	@ 0x74
 80198fe:	68fb      	ldr	r3, [r7, #12]
 8019900:	691b      	ldr	r3, [r3, #16]
 8019902:	2b00      	cmp	r3, #0
 8019904:	d019      	beq.n	801993a <UART_Start_Receive_IT+0x1f2>
 8019906:	68fb      	ldr	r3, [r7, #12]
 8019908:	681b      	ldr	r3, [r3, #0]
 801990a:	62bb      	str	r3, [r7, #40]	@ 0x28
 801990c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801990e:	e853 3f00 	ldrex	r3, [r3]
 8019912:	627b      	str	r3, [r7, #36]	@ 0x24
 8019914:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019916:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 801991a:	677b      	str	r3, [r7, #116]	@ 0x74
 801991c:	68fb      	ldr	r3, [r7, #12]
 801991e:	681b      	ldr	r3, [r3, #0]
 8019920:	461a      	mov	r2, r3
 8019922:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8019924:	637b      	str	r3, [r7, #52]	@ 0x34
 8019926:	633a      	str	r2, [r7, #48]	@ 0x30
 8019928:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801992a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801992c:	e841 2300 	strex	r3, r2, [r1]
 8019930:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8019932:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019934:	2b00      	cmp	r3, #0
 8019936:	d1e6      	bne.n	8019906 <UART_Start_Receive_IT+0x1be>
 8019938:	e018      	b.n	801996c <UART_Start_Receive_IT+0x224>
 801993a:	68fb      	ldr	r3, [r7, #12]
 801993c:	681b      	ldr	r3, [r3, #0]
 801993e:	617b      	str	r3, [r7, #20]
 8019940:	697b      	ldr	r3, [r7, #20]
 8019942:	e853 3f00 	ldrex	r3, [r3]
 8019946:	613b      	str	r3, [r7, #16]
 8019948:	693b      	ldr	r3, [r7, #16]
 801994a:	f043 0320 	orr.w	r3, r3, #32
 801994e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8019950:	68fb      	ldr	r3, [r7, #12]
 8019952:	681b      	ldr	r3, [r3, #0]
 8019954:	461a      	mov	r2, r3
 8019956:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8019958:	623b      	str	r3, [r7, #32]
 801995a:	61fa      	str	r2, [r7, #28]
 801995c:	69f9      	ldr	r1, [r7, #28]
 801995e:	6a3a      	ldr	r2, [r7, #32]
 8019960:	e841 2300 	strex	r3, r2, [r1]
 8019964:	61bb      	str	r3, [r7, #24]
 8019966:	69bb      	ldr	r3, [r7, #24]
 8019968:	2b00      	cmp	r3, #0
 801996a:	d1e6      	bne.n	801993a <UART_Start_Receive_IT+0x1f2>
 801996c:	2300      	movs	r3, #0
 801996e:	4618      	mov	r0, r3
 8019970:	378c      	adds	r7, #140	@ 0x8c
 8019972:	46bd      	mov	sp, r7
 8019974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019978:	4770      	bx	lr
 801997a:	bf00      	nop
 801997c:	0801a4f1 	.word	0x0801a4f1
 8019980:	0801a191 	.word	0x0801a191
 8019984:	08019fd9 	.word	0x08019fd9
 8019988:	08019e21 	.word	0x08019e21

0801998c <UART_EndRxTransfer>:
 801998c:	b480      	push	{r7}
 801998e:	b095      	sub	sp, #84	@ 0x54
 8019990:	af00      	add	r7, sp, #0
 8019992:	6078      	str	r0, [r7, #4]
 8019994:	687b      	ldr	r3, [r7, #4]
 8019996:	681b      	ldr	r3, [r3, #0]
 8019998:	637b      	str	r3, [r7, #52]	@ 0x34
 801999a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801999c:	e853 3f00 	ldrex	r3, [r3]
 80199a0:	633b      	str	r3, [r7, #48]	@ 0x30
 80199a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80199a4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80199a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80199aa:	687b      	ldr	r3, [r7, #4]
 80199ac:	681b      	ldr	r3, [r3, #0]
 80199ae:	461a      	mov	r2, r3
 80199b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80199b2:	643b      	str	r3, [r7, #64]	@ 0x40
 80199b4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80199b6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80199b8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80199ba:	e841 2300 	strex	r3, r2, [r1]
 80199be:	63bb      	str	r3, [r7, #56]	@ 0x38
 80199c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80199c2:	2b00      	cmp	r3, #0
 80199c4:	d1e6      	bne.n	8019994 <UART_EndRxTransfer+0x8>
 80199c6:	687b      	ldr	r3, [r7, #4]
 80199c8:	681b      	ldr	r3, [r3, #0]
 80199ca:	3308      	adds	r3, #8
 80199cc:	623b      	str	r3, [r7, #32]
 80199ce:	6a3b      	ldr	r3, [r7, #32]
 80199d0:	e853 3f00 	ldrex	r3, [r3]
 80199d4:	61fb      	str	r3, [r7, #28]
 80199d6:	69fa      	ldr	r2, [r7, #28]
 80199d8:	4b1e      	ldr	r3, [pc, #120]	@ (8019a54 <UART_EndRxTransfer+0xc8>)
 80199da:	4013      	ands	r3, r2
 80199dc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80199de:	687b      	ldr	r3, [r7, #4]
 80199e0:	681b      	ldr	r3, [r3, #0]
 80199e2:	3308      	adds	r3, #8
 80199e4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80199e6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80199e8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80199ea:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80199ec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80199ee:	e841 2300 	strex	r3, r2, [r1]
 80199f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80199f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80199f6:	2b00      	cmp	r3, #0
 80199f8:	d1e5      	bne.n	80199c6 <UART_EndRxTransfer+0x3a>
 80199fa:	687b      	ldr	r3, [r7, #4]
 80199fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80199fe:	2b01      	cmp	r3, #1
 8019a00:	d118      	bne.n	8019a34 <UART_EndRxTransfer+0xa8>
 8019a02:	687b      	ldr	r3, [r7, #4]
 8019a04:	681b      	ldr	r3, [r3, #0]
 8019a06:	60fb      	str	r3, [r7, #12]
 8019a08:	68fb      	ldr	r3, [r7, #12]
 8019a0a:	e853 3f00 	ldrex	r3, [r3]
 8019a0e:	60bb      	str	r3, [r7, #8]
 8019a10:	68bb      	ldr	r3, [r7, #8]
 8019a12:	f023 0310 	bic.w	r3, r3, #16
 8019a16:	647b      	str	r3, [r7, #68]	@ 0x44
 8019a18:	687b      	ldr	r3, [r7, #4]
 8019a1a:	681b      	ldr	r3, [r3, #0]
 8019a1c:	461a      	mov	r2, r3
 8019a1e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8019a20:	61bb      	str	r3, [r7, #24]
 8019a22:	617a      	str	r2, [r7, #20]
 8019a24:	6979      	ldr	r1, [r7, #20]
 8019a26:	69ba      	ldr	r2, [r7, #24]
 8019a28:	e841 2300 	strex	r3, r2, [r1]
 8019a2c:	613b      	str	r3, [r7, #16]
 8019a2e:	693b      	ldr	r3, [r7, #16]
 8019a30:	2b00      	cmp	r3, #0
 8019a32:	d1e6      	bne.n	8019a02 <UART_EndRxTransfer+0x76>
 8019a34:	687b      	ldr	r3, [r7, #4]
 8019a36:	2220      	movs	r2, #32
 8019a38:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 8019a3c:	687b      	ldr	r3, [r7, #4]
 8019a3e:	2200      	movs	r2, #0
 8019a40:	66da      	str	r2, [r3, #108]	@ 0x6c
 8019a42:	687b      	ldr	r3, [r7, #4]
 8019a44:	2200      	movs	r2, #0
 8019a46:	675a      	str	r2, [r3, #116]	@ 0x74
 8019a48:	bf00      	nop
 8019a4a:	3754      	adds	r7, #84	@ 0x54
 8019a4c:	46bd      	mov	sp, r7
 8019a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a52:	4770      	bx	lr
 8019a54:	effffffe 	.word	0xeffffffe

08019a58 <UART_DMAAbortOnError>:
 8019a58:	b580      	push	{r7, lr}
 8019a5a:	b084      	sub	sp, #16
 8019a5c:	af00      	add	r7, sp, #0
 8019a5e:	6078      	str	r0, [r7, #4]
 8019a60:	687b      	ldr	r3, [r7, #4]
 8019a62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8019a64:	60fb      	str	r3, [r7, #12]
 8019a66:	68fb      	ldr	r3, [r7, #12]
 8019a68:	2200      	movs	r2, #0
 8019a6a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
 8019a6e:	68fb      	ldr	r3, [r7, #12]
 8019a70:	2200      	movs	r2, #0
 8019a72:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 8019a76:	68f8      	ldr	r0, [r7, #12]
 8019a78:	f7fe fe2a 	bl	80186d0 <HAL_UART_ErrorCallback>
 8019a7c:	bf00      	nop
 8019a7e:	3710      	adds	r7, #16
 8019a80:	46bd      	mov	sp, r7
 8019a82:	bd80      	pop	{r7, pc}

08019a84 <UART_TxISR_8BIT>:
 8019a84:	b480      	push	{r7}
 8019a86:	b08f      	sub	sp, #60	@ 0x3c
 8019a88:	af00      	add	r7, sp, #0
 8019a8a:	6078      	str	r0, [r7, #4]
 8019a8c:	687b      	ldr	r3, [r7, #4]
 8019a8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8019a92:	2b21      	cmp	r3, #33	@ 0x21
 8019a94:	d14c      	bne.n	8019b30 <UART_TxISR_8BIT+0xac>
 8019a96:	687b      	ldr	r3, [r7, #4]
 8019a98:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8019a9c:	b29b      	uxth	r3, r3
 8019a9e:	2b00      	cmp	r3, #0
 8019aa0:	d132      	bne.n	8019b08 <UART_TxISR_8BIT+0x84>
 8019aa2:	687b      	ldr	r3, [r7, #4]
 8019aa4:	681b      	ldr	r3, [r3, #0]
 8019aa6:	623b      	str	r3, [r7, #32]
 8019aa8:	6a3b      	ldr	r3, [r7, #32]
 8019aaa:	e853 3f00 	ldrex	r3, [r3]
 8019aae:	61fb      	str	r3, [r7, #28]
 8019ab0:	69fb      	ldr	r3, [r7, #28]
 8019ab2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8019ab6:	637b      	str	r3, [r7, #52]	@ 0x34
 8019ab8:	687b      	ldr	r3, [r7, #4]
 8019aba:	681b      	ldr	r3, [r3, #0]
 8019abc:	461a      	mov	r2, r3
 8019abe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019ac0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8019ac2:	62ba      	str	r2, [r7, #40]	@ 0x28
 8019ac4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8019ac6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8019ac8:	e841 2300 	strex	r3, r2, [r1]
 8019acc:	627b      	str	r3, [r7, #36]	@ 0x24
 8019ace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019ad0:	2b00      	cmp	r3, #0
 8019ad2:	d1e6      	bne.n	8019aa2 <UART_TxISR_8BIT+0x1e>
 8019ad4:	687b      	ldr	r3, [r7, #4]
 8019ad6:	681b      	ldr	r3, [r3, #0]
 8019ad8:	60fb      	str	r3, [r7, #12]
 8019ada:	68fb      	ldr	r3, [r7, #12]
 8019adc:	e853 3f00 	ldrex	r3, [r3]
 8019ae0:	60bb      	str	r3, [r7, #8]
 8019ae2:	68bb      	ldr	r3, [r7, #8]
 8019ae4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8019ae8:	633b      	str	r3, [r7, #48]	@ 0x30
 8019aea:	687b      	ldr	r3, [r7, #4]
 8019aec:	681b      	ldr	r3, [r3, #0]
 8019aee:	461a      	mov	r2, r3
 8019af0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019af2:	61bb      	str	r3, [r7, #24]
 8019af4:	617a      	str	r2, [r7, #20]
 8019af6:	6979      	ldr	r1, [r7, #20]
 8019af8:	69ba      	ldr	r2, [r7, #24]
 8019afa:	e841 2300 	strex	r3, r2, [r1]
 8019afe:	613b      	str	r3, [r7, #16]
 8019b00:	693b      	ldr	r3, [r7, #16]
 8019b02:	2b00      	cmp	r3, #0
 8019b04:	d1e6      	bne.n	8019ad4 <UART_TxISR_8BIT+0x50>
 8019b06:	e013      	b.n	8019b30 <UART_TxISR_8BIT+0xac>
 8019b08:	687b      	ldr	r3, [r7, #4]
 8019b0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8019b0c:	781a      	ldrb	r2, [r3, #0]
 8019b0e:	687b      	ldr	r3, [r7, #4]
 8019b10:	681b      	ldr	r3, [r3, #0]
 8019b12:	629a      	str	r2, [r3, #40]	@ 0x28
 8019b14:	687b      	ldr	r3, [r7, #4]
 8019b16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8019b18:	1c5a      	adds	r2, r3, #1
 8019b1a:	687b      	ldr	r3, [r7, #4]
 8019b1c:	651a      	str	r2, [r3, #80]	@ 0x50
 8019b1e:	687b      	ldr	r3, [r7, #4]
 8019b20:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8019b24:	b29b      	uxth	r3, r3
 8019b26:	3b01      	subs	r3, #1
 8019b28:	b29a      	uxth	r2, r3
 8019b2a:	687b      	ldr	r3, [r7, #4]
 8019b2c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 8019b30:	bf00      	nop
 8019b32:	373c      	adds	r7, #60	@ 0x3c
 8019b34:	46bd      	mov	sp, r7
 8019b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b3a:	4770      	bx	lr

08019b3c <UART_TxISR_16BIT>:
 8019b3c:	b480      	push	{r7}
 8019b3e:	b091      	sub	sp, #68	@ 0x44
 8019b40:	af00      	add	r7, sp, #0
 8019b42:	6078      	str	r0, [r7, #4]
 8019b44:	687b      	ldr	r3, [r7, #4]
 8019b46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8019b4a:	2b21      	cmp	r3, #33	@ 0x21
 8019b4c:	d151      	bne.n	8019bf2 <UART_TxISR_16BIT+0xb6>
 8019b4e:	687b      	ldr	r3, [r7, #4]
 8019b50:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8019b54:	b29b      	uxth	r3, r3
 8019b56:	2b00      	cmp	r3, #0
 8019b58:	d132      	bne.n	8019bc0 <UART_TxISR_16BIT+0x84>
 8019b5a:	687b      	ldr	r3, [r7, #4]
 8019b5c:	681b      	ldr	r3, [r3, #0]
 8019b5e:	627b      	str	r3, [r7, #36]	@ 0x24
 8019b60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019b62:	e853 3f00 	ldrex	r3, [r3]
 8019b66:	623b      	str	r3, [r7, #32]
 8019b68:	6a3b      	ldr	r3, [r7, #32]
 8019b6a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8019b6e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8019b70:	687b      	ldr	r3, [r7, #4]
 8019b72:	681b      	ldr	r3, [r3, #0]
 8019b74:	461a      	mov	r2, r3
 8019b76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019b78:	633b      	str	r3, [r7, #48]	@ 0x30
 8019b7a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8019b7c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8019b7e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8019b80:	e841 2300 	strex	r3, r2, [r1]
 8019b84:	62bb      	str	r3, [r7, #40]	@ 0x28
 8019b86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019b88:	2b00      	cmp	r3, #0
 8019b8a:	d1e6      	bne.n	8019b5a <UART_TxISR_16BIT+0x1e>
 8019b8c:	687b      	ldr	r3, [r7, #4]
 8019b8e:	681b      	ldr	r3, [r3, #0]
 8019b90:	613b      	str	r3, [r7, #16]
 8019b92:	693b      	ldr	r3, [r7, #16]
 8019b94:	e853 3f00 	ldrex	r3, [r3]
 8019b98:	60fb      	str	r3, [r7, #12]
 8019b9a:	68fb      	ldr	r3, [r7, #12]
 8019b9c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8019ba0:	637b      	str	r3, [r7, #52]	@ 0x34
 8019ba2:	687b      	ldr	r3, [r7, #4]
 8019ba4:	681b      	ldr	r3, [r3, #0]
 8019ba6:	461a      	mov	r2, r3
 8019ba8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019baa:	61fb      	str	r3, [r7, #28]
 8019bac:	61ba      	str	r2, [r7, #24]
 8019bae:	69b9      	ldr	r1, [r7, #24]
 8019bb0:	69fa      	ldr	r2, [r7, #28]
 8019bb2:	e841 2300 	strex	r3, r2, [r1]
 8019bb6:	617b      	str	r3, [r7, #20]
 8019bb8:	697b      	ldr	r3, [r7, #20]
 8019bba:	2b00      	cmp	r3, #0
 8019bbc:	d1e6      	bne.n	8019b8c <UART_TxISR_16BIT+0x50>
 8019bbe:	e018      	b.n	8019bf2 <UART_TxISR_16BIT+0xb6>
 8019bc0:	687b      	ldr	r3, [r7, #4]
 8019bc2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8019bc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8019bc6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019bc8:	881b      	ldrh	r3, [r3, #0]
 8019bca:	461a      	mov	r2, r3
 8019bcc:	687b      	ldr	r3, [r7, #4]
 8019bce:	681b      	ldr	r3, [r3, #0]
 8019bd0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8019bd4:	629a      	str	r2, [r3, #40]	@ 0x28
 8019bd6:	687b      	ldr	r3, [r7, #4]
 8019bd8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8019bda:	1c9a      	adds	r2, r3, #2
 8019bdc:	687b      	ldr	r3, [r7, #4]
 8019bde:	651a      	str	r2, [r3, #80]	@ 0x50
 8019be0:	687b      	ldr	r3, [r7, #4]
 8019be2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8019be6:	b29b      	uxth	r3, r3
 8019be8:	3b01      	subs	r3, #1
 8019bea:	b29a      	uxth	r2, r3
 8019bec:	687b      	ldr	r3, [r7, #4]
 8019bee:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 8019bf2:	bf00      	nop
 8019bf4:	3744      	adds	r7, #68	@ 0x44
 8019bf6:	46bd      	mov	sp, r7
 8019bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019bfc:	4770      	bx	lr

08019bfe <UART_TxISR_8BIT_FIFOEN>:
 8019bfe:	b480      	push	{r7}
 8019c00:	b091      	sub	sp, #68	@ 0x44
 8019c02:	af00      	add	r7, sp, #0
 8019c04:	6078      	str	r0, [r7, #4]
 8019c06:	687b      	ldr	r3, [r7, #4]
 8019c08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8019c0c:	2b21      	cmp	r3, #33	@ 0x21
 8019c0e:	d160      	bne.n	8019cd2 <UART_TxISR_8BIT_FIFOEN+0xd4>
 8019c10:	687b      	ldr	r3, [r7, #4]
 8019c12:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8019c16:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8019c18:	e057      	b.n	8019cca <UART_TxISR_8BIT_FIFOEN+0xcc>
 8019c1a:	687b      	ldr	r3, [r7, #4]
 8019c1c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8019c20:	b29b      	uxth	r3, r3
 8019c22:	2b00      	cmp	r3, #0
 8019c24:	d133      	bne.n	8019c8e <UART_TxISR_8BIT_FIFOEN+0x90>
 8019c26:	687b      	ldr	r3, [r7, #4]
 8019c28:	681b      	ldr	r3, [r3, #0]
 8019c2a:	3308      	adds	r3, #8
 8019c2c:	627b      	str	r3, [r7, #36]	@ 0x24
 8019c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019c30:	e853 3f00 	ldrex	r3, [r3]
 8019c34:	623b      	str	r3, [r7, #32]
 8019c36:	6a3b      	ldr	r3, [r7, #32]
 8019c38:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8019c3c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8019c3e:	687b      	ldr	r3, [r7, #4]
 8019c40:	681b      	ldr	r3, [r3, #0]
 8019c42:	3308      	adds	r3, #8
 8019c44:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8019c46:	633a      	str	r2, [r7, #48]	@ 0x30
 8019c48:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8019c4a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8019c4c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8019c4e:	e841 2300 	strex	r3, r2, [r1]
 8019c52:	62bb      	str	r3, [r7, #40]	@ 0x28
 8019c54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019c56:	2b00      	cmp	r3, #0
 8019c58:	d1e5      	bne.n	8019c26 <UART_TxISR_8BIT_FIFOEN+0x28>
 8019c5a:	687b      	ldr	r3, [r7, #4]
 8019c5c:	681b      	ldr	r3, [r3, #0]
 8019c5e:	613b      	str	r3, [r7, #16]
 8019c60:	693b      	ldr	r3, [r7, #16]
 8019c62:	e853 3f00 	ldrex	r3, [r3]
 8019c66:	60fb      	str	r3, [r7, #12]
 8019c68:	68fb      	ldr	r3, [r7, #12]
 8019c6a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8019c6e:	637b      	str	r3, [r7, #52]	@ 0x34
 8019c70:	687b      	ldr	r3, [r7, #4]
 8019c72:	681b      	ldr	r3, [r3, #0]
 8019c74:	461a      	mov	r2, r3
 8019c76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019c78:	61fb      	str	r3, [r7, #28]
 8019c7a:	61ba      	str	r2, [r7, #24]
 8019c7c:	69b9      	ldr	r1, [r7, #24]
 8019c7e:	69fa      	ldr	r2, [r7, #28]
 8019c80:	e841 2300 	strex	r3, r2, [r1]
 8019c84:	617b      	str	r3, [r7, #20]
 8019c86:	697b      	ldr	r3, [r7, #20]
 8019c88:	2b00      	cmp	r3, #0
 8019c8a:	d1e6      	bne.n	8019c5a <UART_TxISR_8BIT_FIFOEN+0x5c>
 8019c8c:	e021      	b.n	8019cd2 <UART_TxISR_8BIT_FIFOEN+0xd4>
 8019c8e:	687b      	ldr	r3, [r7, #4]
 8019c90:	681b      	ldr	r3, [r3, #0]
 8019c92:	69db      	ldr	r3, [r3, #28]
 8019c94:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8019c98:	2b00      	cmp	r3, #0
 8019c9a:	d013      	beq.n	8019cc4 <UART_TxISR_8BIT_FIFOEN+0xc6>
 8019c9c:	687b      	ldr	r3, [r7, #4]
 8019c9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8019ca0:	781a      	ldrb	r2, [r3, #0]
 8019ca2:	687b      	ldr	r3, [r7, #4]
 8019ca4:	681b      	ldr	r3, [r3, #0]
 8019ca6:	629a      	str	r2, [r3, #40]	@ 0x28
 8019ca8:	687b      	ldr	r3, [r7, #4]
 8019caa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8019cac:	1c5a      	adds	r2, r3, #1
 8019cae:	687b      	ldr	r3, [r7, #4]
 8019cb0:	651a      	str	r2, [r3, #80]	@ 0x50
 8019cb2:	687b      	ldr	r3, [r7, #4]
 8019cb4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8019cb8:	b29b      	uxth	r3, r3
 8019cba:	3b01      	subs	r3, #1
 8019cbc:	b29a      	uxth	r2, r3
 8019cbe:	687b      	ldr	r3, [r7, #4]
 8019cc0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 8019cc4:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8019cc6:	3b01      	subs	r3, #1
 8019cc8:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8019cca:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8019ccc:	2b00      	cmp	r3, #0
 8019cce:	d1a4      	bne.n	8019c1a <UART_TxISR_8BIT_FIFOEN+0x1c>
 8019cd0:	e7ff      	b.n	8019cd2 <UART_TxISR_8BIT_FIFOEN+0xd4>
 8019cd2:	bf00      	nop
 8019cd4:	3744      	adds	r7, #68	@ 0x44
 8019cd6:	46bd      	mov	sp, r7
 8019cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019cdc:	4770      	bx	lr

08019cde <UART_TxISR_16BIT_FIFOEN>:
 8019cde:	b480      	push	{r7}
 8019ce0:	b091      	sub	sp, #68	@ 0x44
 8019ce2:	af00      	add	r7, sp, #0
 8019ce4:	6078      	str	r0, [r7, #4]
 8019ce6:	687b      	ldr	r3, [r7, #4]
 8019ce8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8019cec:	2b21      	cmp	r3, #33	@ 0x21
 8019cee:	d165      	bne.n	8019dbc <UART_TxISR_16BIT_FIFOEN+0xde>
 8019cf0:	687b      	ldr	r3, [r7, #4]
 8019cf2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8019cf6:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8019cf8:	e05c      	b.n	8019db4 <UART_TxISR_16BIT_FIFOEN+0xd6>
 8019cfa:	687b      	ldr	r3, [r7, #4]
 8019cfc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8019d00:	b29b      	uxth	r3, r3
 8019d02:	2b00      	cmp	r3, #0
 8019d04:	d133      	bne.n	8019d6e <UART_TxISR_16BIT_FIFOEN+0x90>
 8019d06:	687b      	ldr	r3, [r7, #4]
 8019d08:	681b      	ldr	r3, [r3, #0]
 8019d0a:	3308      	adds	r3, #8
 8019d0c:	623b      	str	r3, [r7, #32]
 8019d0e:	6a3b      	ldr	r3, [r7, #32]
 8019d10:	e853 3f00 	ldrex	r3, [r3]
 8019d14:	61fb      	str	r3, [r7, #28]
 8019d16:	69fb      	ldr	r3, [r7, #28]
 8019d18:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8019d1c:	637b      	str	r3, [r7, #52]	@ 0x34
 8019d1e:	687b      	ldr	r3, [r7, #4]
 8019d20:	681b      	ldr	r3, [r3, #0]
 8019d22:	3308      	adds	r3, #8
 8019d24:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8019d26:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8019d28:	62bb      	str	r3, [r7, #40]	@ 0x28
 8019d2a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8019d2c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8019d2e:	e841 2300 	strex	r3, r2, [r1]
 8019d32:	627b      	str	r3, [r7, #36]	@ 0x24
 8019d34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019d36:	2b00      	cmp	r3, #0
 8019d38:	d1e5      	bne.n	8019d06 <UART_TxISR_16BIT_FIFOEN+0x28>
 8019d3a:	687b      	ldr	r3, [r7, #4]
 8019d3c:	681b      	ldr	r3, [r3, #0]
 8019d3e:	60fb      	str	r3, [r7, #12]
 8019d40:	68fb      	ldr	r3, [r7, #12]
 8019d42:	e853 3f00 	ldrex	r3, [r3]
 8019d46:	60bb      	str	r3, [r7, #8]
 8019d48:	68bb      	ldr	r3, [r7, #8]
 8019d4a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8019d4e:	633b      	str	r3, [r7, #48]	@ 0x30
 8019d50:	687b      	ldr	r3, [r7, #4]
 8019d52:	681b      	ldr	r3, [r3, #0]
 8019d54:	461a      	mov	r2, r3
 8019d56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019d58:	61bb      	str	r3, [r7, #24]
 8019d5a:	617a      	str	r2, [r7, #20]
 8019d5c:	6979      	ldr	r1, [r7, #20]
 8019d5e:	69ba      	ldr	r2, [r7, #24]
 8019d60:	e841 2300 	strex	r3, r2, [r1]
 8019d64:	613b      	str	r3, [r7, #16]
 8019d66:	693b      	ldr	r3, [r7, #16]
 8019d68:	2b00      	cmp	r3, #0
 8019d6a:	d1e6      	bne.n	8019d3a <UART_TxISR_16BIT_FIFOEN+0x5c>
 8019d6c:	e026      	b.n	8019dbc <UART_TxISR_16BIT_FIFOEN+0xde>
 8019d6e:	687b      	ldr	r3, [r7, #4]
 8019d70:	681b      	ldr	r3, [r3, #0]
 8019d72:	69db      	ldr	r3, [r3, #28]
 8019d74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8019d78:	2b00      	cmp	r3, #0
 8019d7a:	d018      	beq.n	8019dae <UART_TxISR_16BIT_FIFOEN+0xd0>
 8019d7c:	687b      	ldr	r3, [r7, #4]
 8019d7e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8019d80:	63bb      	str	r3, [r7, #56]	@ 0x38
 8019d82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019d84:	881b      	ldrh	r3, [r3, #0]
 8019d86:	461a      	mov	r2, r3
 8019d88:	687b      	ldr	r3, [r7, #4]
 8019d8a:	681b      	ldr	r3, [r3, #0]
 8019d8c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8019d90:	629a      	str	r2, [r3, #40]	@ 0x28
 8019d92:	687b      	ldr	r3, [r7, #4]
 8019d94:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8019d96:	1c9a      	adds	r2, r3, #2
 8019d98:	687b      	ldr	r3, [r7, #4]
 8019d9a:	651a      	str	r2, [r3, #80]	@ 0x50
 8019d9c:	687b      	ldr	r3, [r7, #4]
 8019d9e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8019da2:	b29b      	uxth	r3, r3
 8019da4:	3b01      	subs	r3, #1
 8019da6:	b29a      	uxth	r2, r3
 8019da8:	687b      	ldr	r3, [r7, #4]
 8019daa:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 8019dae:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8019db0:	3b01      	subs	r3, #1
 8019db2:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8019db4:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8019db6:	2b00      	cmp	r3, #0
 8019db8:	d19f      	bne.n	8019cfa <UART_TxISR_16BIT_FIFOEN+0x1c>
 8019dba:	e7ff      	b.n	8019dbc <UART_TxISR_16BIT_FIFOEN+0xde>
 8019dbc:	bf00      	nop
 8019dbe:	3744      	adds	r7, #68	@ 0x44
 8019dc0:	46bd      	mov	sp, r7
 8019dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019dc6:	4770      	bx	lr

08019dc8 <UART_EndTransmit_IT>:
 8019dc8:	b580      	push	{r7, lr}
 8019dca:	b088      	sub	sp, #32
 8019dcc:	af00      	add	r7, sp, #0
 8019dce:	6078      	str	r0, [r7, #4]
 8019dd0:	687b      	ldr	r3, [r7, #4]
 8019dd2:	681b      	ldr	r3, [r3, #0]
 8019dd4:	60fb      	str	r3, [r7, #12]
 8019dd6:	68fb      	ldr	r3, [r7, #12]
 8019dd8:	e853 3f00 	ldrex	r3, [r3]
 8019ddc:	60bb      	str	r3, [r7, #8]
 8019dde:	68bb      	ldr	r3, [r7, #8]
 8019de0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8019de4:	61fb      	str	r3, [r7, #28]
 8019de6:	687b      	ldr	r3, [r7, #4]
 8019de8:	681b      	ldr	r3, [r3, #0]
 8019dea:	461a      	mov	r2, r3
 8019dec:	69fb      	ldr	r3, [r7, #28]
 8019dee:	61bb      	str	r3, [r7, #24]
 8019df0:	617a      	str	r2, [r7, #20]
 8019df2:	6979      	ldr	r1, [r7, #20]
 8019df4:	69ba      	ldr	r2, [r7, #24]
 8019df6:	e841 2300 	strex	r3, r2, [r1]
 8019dfa:	613b      	str	r3, [r7, #16]
 8019dfc:	693b      	ldr	r3, [r7, #16]
 8019dfe:	2b00      	cmp	r3, #0
 8019e00:	d1e6      	bne.n	8019dd0 <UART_EndTransmit_IT+0x8>
 8019e02:	687b      	ldr	r3, [r7, #4]
 8019e04:	2220      	movs	r2, #32
 8019e06:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 8019e0a:	687b      	ldr	r3, [r7, #4]
 8019e0c:	2200      	movs	r2, #0
 8019e0e:	679a      	str	r2, [r3, #120]	@ 0x78
 8019e10:	6878      	ldr	r0, [r7, #4]
 8019e12:	f7fe fc53 	bl	80186bc <HAL_UART_TxCpltCallback>
 8019e16:	bf00      	nop
 8019e18:	3720      	adds	r7, #32
 8019e1a:	46bd      	mov	sp, r7
 8019e1c:	bd80      	pop	{r7, pc}
	...

08019e20 <UART_RxISR_8BIT>:
 8019e20:	b580      	push	{r7, lr}
 8019e22:	b09c      	sub	sp, #112	@ 0x70
 8019e24:	af00      	add	r7, sp, #0
 8019e26:	6078      	str	r0, [r7, #4]
 8019e28:	687b      	ldr	r3, [r7, #4]
 8019e2a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8019e2e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 8019e32:	687b      	ldr	r3, [r7, #4]
 8019e34:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8019e38:	2b22      	cmp	r3, #34	@ 0x22
 8019e3a:	f040 80be 	bne.w	8019fba <UART_RxISR_8BIT+0x19a>
 8019e3e:	687b      	ldr	r3, [r7, #4]
 8019e40:	681b      	ldr	r3, [r3, #0]
 8019e42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019e44:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 8019e48:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8019e4c:	b2d9      	uxtb	r1, r3
 8019e4e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8019e52:	b2da      	uxtb	r2, r3
 8019e54:	687b      	ldr	r3, [r7, #4]
 8019e56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8019e58:	400a      	ands	r2, r1
 8019e5a:	b2d2      	uxtb	r2, r2
 8019e5c:	701a      	strb	r2, [r3, #0]
 8019e5e:	687b      	ldr	r3, [r7, #4]
 8019e60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8019e62:	1c5a      	adds	r2, r3, #1
 8019e64:	687b      	ldr	r3, [r7, #4]
 8019e66:	659a      	str	r2, [r3, #88]	@ 0x58
 8019e68:	687b      	ldr	r3, [r7, #4]
 8019e6a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8019e6e:	b29b      	uxth	r3, r3
 8019e70:	3b01      	subs	r3, #1
 8019e72:	b29a      	uxth	r2, r3
 8019e74:	687b      	ldr	r3, [r7, #4]
 8019e76:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
 8019e7a:	687b      	ldr	r3, [r7, #4]
 8019e7c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8019e80:	b29b      	uxth	r3, r3
 8019e82:	2b00      	cmp	r3, #0
 8019e84:	f040 80a1 	bne.w	8019fca <UART_RxISR_8BIT+0x1aa>
 8019e88:	687b      	ldr	r3, [r7, #4]
 8019e8a:	681b      	ldr	r3, [r3, #0]
 8019e8c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8019e8e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8019e90:	e853 3f00 	ldrex	r3, [r3]
 8019e94:	64bb      	str	r3, [r7, #72]	@ 0x48
 8019e96:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8019e98:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8019e9c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8019e9e:	687b      	ldr	r3, [r7, #4]
 8019ea0:	681b      	ldr	r3, [r3, #0]
 8019ea2:	461a      	mov	r2, r3
 8019ea4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8019ea6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8019ea8:	657a      	str	r2, [r7, #84]	@ 0x54
 8019eaa:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8019eac:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8019eae:	e841 2300 	strex	r3, r2, [r1]
 8019eb2:	653b      	str	r3, [r7, #80]	@ 0x50
 8019eb4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019eb6:	2b00      	cmp	r3, #0
 8019eb8:	d1e6      	bne.n	8019e88 <UART_RxISR_8BIT+0x68>
 8019eba:	687b      	ldr	r3, [r7, #4]
 8019ebc:	681b      	ldr	r3, [r3, #0]
 8019ebe:	3308      	adds	r3, #8
 8019ec0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8019ec2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019ec4:	e853 3f00 	ldrex	r3, [r3]
 8019ec8:	637b      	str	r3, [r7, #52]	@ 0x34
 8019eca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019ecc:	f023 0301 	bic.w	r3, r3, #1
 8019ed0:	667b      	str	r3, [r7, #100]	@ 0x64
 8019ed2:	687b      	ldr	r3, [r7, #4]
 8019ed4:	681b      	ldr	r3, [r3, #0]
 8019ed6:	3308      	adds	r3, #8
 8019ed8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8019eda:	647a      	str	r2, [r7, #68]	@ 0x44
 8019edc:	643b      	str	r3, [r7, #64]	@ 0x40
 8019ede:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8019ee0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8019ee2:	e841 2300 	strex	r3, r2, [r1]
 8019ee6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8019ee8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019eea:	2b00      	cmp	r3, #0
 8019eec:	d1e5      	bne.n	8019eba <UART_RxISR_8BIT+0x9a>
 8019eee:	687b      	ldr	r3, [r7, #4]
 8019ef0:	2220      	movs	r2, #32
 8019ef2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 8019ef6:	687b      	ldr	r3, [r7, #4]
 8019ef8:	2200      	movs	r2, #0
 8019efa:	675a      	str	r2, [r3, #116]	@ 0x74
 8019efc:	687b      	ldr	r3, [r7, #4]
 8019efe:	2200      	movs	r2, #0
 8019f00:	671a      	str	r2, [r3, #112]	@ 0x70
 8019f02:	687b      	ldr	r3, [r7, #4]
 8019f04:	681b      	ldr	r3, [r3, #0]
 8019f06:	4a33      	ldr	r2, [pc, #204]	@ (8019fd4 <UART_RxISR_8BIT+0x1b4>)
 8019f08:	4293      	cmp	r3, r2
 8019f0a:	d01f      	beq.n	8019f4c <UART_RxISR_8BIT+0x12c>
 8019f0c:	687b      	ldr	r3, [r7, #4]
 8019f0e:	681b      	ldr	r3, [r3, #0]
 8019f10:	685b      	ldr	r3, [r3, #4]
 8019f12:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8019f16:	2b00      	cmp	r3, #0
 8019f18:	d018      	beq.n	8019f4c <UART_RxISR_8BIT+0x12c>
 8019f1a:	687b      	ldr	r3, [r7, #4]
 8019f1c:	681b      	ldr	r3, [r3, #0]
 8019f1e:	627b      	str	r3, [r7, #36]	@ 0x24
 8019f20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019f22:	e853 3f00 	ldrex	r3, [r3]
 8019f26:	623b      	str	r3, [r7, #32]
 8019f28:	6a3b      	ldr	r3, [r7, #32]
 8019f2a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8019f2e:	663b      	str	r3, [r7, #96]	@ 0x60
 8019f30:	687b      	ldr	r3, [r7, #4]
 8019f32:	681b      	ldr	r3, [r3, #0]
 8019f34:	461a      	mov	r2, r3
 8019f36:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8019f38:	633b      	str	r3, [r7, #48]	@ 0x30
 8019f3a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8019f3c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8019f3e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8019f40:	e841 2300 	strex	r3, r2, [r1]
 8019f44:	62bb      	str	r3, [r7, #40]	@ 0x28
 8019f46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019f48:	2b00      	cmp	r3, #0
 8019f4a:	d1e6      	bne.n	8019f1a <UART_RxISR_8BIT+0xfa>
 8019f4c:	687b      	ldr	r3, [r7, #4]
 8019f4e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019f50:	2b01      	cmp	r3, #1
 8019f52:	d12e      	bne.n	8019fb2 <UART_RxISR_8BIT+0x192>
 8019f54:	687b      	ldr	r3, [r7, #4]
 8019f56:	2200      	movs	r2, #0
 8019f58:	66da      	str	r2, [r3, #108]	@ 0x6c
 8019f5a:	687b      	ldr	r3, [r7, #4]
 8019f5c:	681b      	ldr	r3, [r3, #0]
 8019f5e:	613b      	str	r3, [r7, #16]
 8019f60:	693b      	ldr	r3, [r7, #16]
 8019f62:	e853 3f00 	ldrex	r3, [r3]
 8019f66:	60fb      	str	r3, [r7, #12]
 8019f68:	68fb      	ldr	r3, [r7, #12]
 8019f6a:	f023 0310 	bic.w	r3, r3, #16
 8019f6e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8019f70:	687b      	ldr	r3, [r7, #4]
 8019f72:	681b      	ldr	r3, [r3, #0]
 8019f74:	461a      	mov	r2, r3
 8019f76:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8019f78:	61fb      	str	r3, [r7, #28]
 8019f7a:	61ba      	str	r2, [r7, #24]
 8019f7c:	69b9      	ldr	r1, [r7, #24]
 8019f7e:	69fa      	ldr	r2, [r7, #28]
 8019f80:	e841 2300 	strex	r3, r2, [r1]
 8019f84:	617b      	str	r3, [r7, #20]
 8019f86:	697b      	ldr	r3, [r7, #20]
 8019f88:	2b00      	cmp	r3, #0
 8019f8a:	d1e6      	bne.n	8019f5a <UART_RxISR_8BIT+0x13a>
 8019f8c:	687b      	ldr	r3, [r7, #4]
 8019f8e:	681b      	ldr	r3, [r3, #0]
 8019f90:	69db      	ldr	r3, [r3, #28]
 8019f92:	f003 0310 	and.w	r3, r3, #16
 8019f96:	2b10      	cmp	r3, #16
 8019f98:	d103      	bne.n	8019fa2 <UART_RxISR_8BIT+0x182>
 8019f9a:	687b      	ldr	r3, [r7, #4]
 8019f9c:	681b      	ldr	r3, [r3, #0]
 8019f9e:	2210      	movs	r2, #16
 8019fa0:	621a      	str	r2, [r3, #32]
 8019fa2:	687b      	ldr	r3, [r7, #4]
 8019fa4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8019fa8:	4619      	mov	r1, r3
 8019faa:	6878      	ldr	r0, [r7, #4]
 8019fac:	f7fe fb9a 	bl	80186e4 <HAL_UARTEx_RxEventCallback>
 8019fb0:	e00b      	b.n	8019fca <UART_RxISR_8BIT+0x1aa>
 8019fb2:	6878      	ldr	r0, [r7, #4]
 8019fb4:	f7ec f98c 	bl	80062d0 <HAL_UART_RxCpltCallback>
 8019fb8:	e007      	b.n	8019fca <UART_RxISR_8BIT+0x1aa>
 8019fba:	687b      	ldr	r3, [r7, #4]
 8019fbc:	681b      	ldr	r3, [r3, #0]
 8019fbe:	699a      	ldr	r2, [r3, #24]
 8019fc0:	687b      	ldr	r3, [r7, #4]
 8019fc2:	681b      	ldr	r3, [r3, #0]
 8019fc4:	f042 0208 	orr.w	r2, r2, #8
 8019fc8:	619a      	str	r2, [r3, #24]
 8019fca:	bf00      	nop
 8019fcc:	3770      	adds	r7, #112	@ 0x70
 8019fce:	46bd      	mov	sp, r7
 8019fd0:	bd80      	pop	{r7, pc}
 8019fd2:	bf00      	nop
 8019fd4:	58000c00 	.word	0x58000c00

08019fd8 <UART_RxISR_16BIT>:
 8019fd8:	b580      	push	{r7, lr}
 8019fda:	b09c      	sub	sp, #112	@ 0x70
 8019fdc:	af00      	add	r7, sp, #0
 8019fde:	6078      	str	r0, [r7, #4]
 8019fe0:	687b      	ldr	r3, [r7, #4]
 8019fe2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8019fe6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 8019fea:	687b      	ldr	r3, [r7, #4]
 8019fec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8019ff0:	2b22      	cmp	r3, #34	@ 0x22
 8019ff2:	f040 80be 	bne.w	801a172 <UART_RxISR_16BIT+0x19a>
 8019ff6:	687b      	ldr	r3, [r7, #4]
 8019ff8:	681b      	ldr	r3, [r3, #0]
 8019ffa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019ffc:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 801a000:	687b      	ldr	r3, [r7, #4]
 801a002:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801a004:	66bb      	str	r3, [r7, #104]	@ 0x68
 801a006:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 801a00a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 801a00e:	4013      	ands	r3, r2
 801a010:	b29a      	uxth	r2, r3
 801a012:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801a014:	801a      	strh	r2, [r3, #0]
 801a016:	687b      	ldr	r3, [r7, #4]
 801a018:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801a01a:	1c9a      	adds	r2, r3, #2
 801a01c:	687b      	ldr	r3, [r7, #4]
 801a01e:	659a      	str	r2, [r3, #88]	@ 0x58
 801a020:	687b      	ldr	r3, [r7, #4]
 801a022:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801a026:	b29b      	uxth	r3, r3
 801a028:	3b01      	subs	r3, #1
 801a02a:	b29a      	uxth	r2, r3
 801a02c:	687b      	ldr	r3, [r7, #4]
 801a02e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
 801a032:	687b      	ldr	r3, [r7, #4]
 801a034:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801a038:	b29b      	uxth	r3, r3
 801a03a:	2b00      	cmp	r3, #0
 801a03c:	f040 80a1 	bne.w	801a182 <UART_RxISR_16BIT+0x1aa>
 801a040:	687b      	ldr	r3, [r7, #4]
 801a042:	681b      	ldr	r3, [r3, #0]
 801a044:	64bb      	str	r3, [r7, #72]	@ 0x48
 801a046:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801a048:	e853 3f00 	ldrex	r3, [r3]
 801a04c:	647b      	str	r3, [r7, #68]	@ 0x44
 801a04e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801a050:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801a054:	667b      	str	r3, [r7, #100]	@ 0x64
 801a056:	687b      	ldr	r3, [r7, #4]
 801a058:	681b      	ldr	r3, [r3, #0]
 801a05a:	461a      	mov	r2, r3
 801a05c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801a05e:	657b      	str	r3, [r7, #84]	@ 0x54
 801a060:	653a      	str	r2, [r7, #80]	@ 0x50
 801a062:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801a064:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801a066:	e841 2300 	strex	r3, r2, [r1]
 801a06a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801a06c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801a06e:	2b00      	cmp	r3, #0
 801a070:	d1e6      	bne.n	801a040 <UART_RxISR_16BIT+0x68>
 801a072:	687b      	ldr	r3, [r7, #4]
 801a074:	681b      	ldr	r3, [r3, #0]
 801a076:	3308      	adds	r3, #8
 801a078:	637b      	str	r3, [r7, #52]	@ 0x34
 801a07a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a07c:	e853 3f00 	ldrex	r3, [r3]
 801a080:	633b      	str	r3, [r7, #48]	@ 0x30
 801a082:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a084:	f023 0301 	bic.w	r3, r3, #1
 801a088:	663b      	str	r3, [r7, #96]	@ 0x60
 801a08a:	687b      	ldr	r3, [r7, #4]
 801a08c:	681b      	ldr	r3, [r3, #0]
 801a08e:	3308      	adds	r3, #8
 801a090:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 801a092:	643a      	str	r2, [r7, #64]	@ 0x40
 801a094:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801a096:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801a098:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801a09a:	e841 2300 	strex	r3, r2, [r1]
 801a09e:	63bb      	str	r3, [r7, #56]	@ 0x38
 801a0a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a0a2:	2b00      	cmp	r3, #0
 801a0a4:	d1e5      	bne.n	801a072 <UART_RxISR_16BIT+0x9a>
 801a0a6:	687b      	ldr	r3, [r7, #4]
 801a0a8:	2220      	movs	r2, #32
 801a0aa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 801a0ae:	687b      	ldr	r3, [r7, #4]
 801a0b0:	2200      	movs	r2, #0
 801a0b2:	675a      	str	r2, [r3, #116]	@ 0x74
 801a0b4:	687b      	ldr	r3, [r7, #4]
 801a0b6:	2200      	movs	r2, #0
 801a0b8:	671a      	str	r2, [r3, #112]	@ 0x70
 801a0ba:	687b      	ldr	r3, [r7, #4]
 801a0bc:	681b      	ldr	r3, [r3, #0]
 801a0be:	4a33      	ldr	r2, [pc, #204]	@ (801a18c <UART_RxISR_16BIT+0x1b4>)
 801a0c0:	4293      	cmp	r3, r2
 801a0c2:	d01f      	beq.n	801a104 <UART_RxISR_16BIT+0x12c>
 801a0c4:	687b      	ldr	r3, [r7, #4]
 801a0c6:	681b      	ldr	r3, [r3, #0]
 801a0c8:	685b      	ldr	r3, [r3, #4]
 801a0ca:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801a0ce:	2b00      	cmp	r3, #0
 801a0d0:	d018      	beq.n	801a104 <UART_RxISR_16BIT+0x12c>
 801a0d2:	687b      	ldr	r3, [r7, #4]
 801a0d4:	681b      	ldr	r3, [r3, #0]
 801a0d6:	623b      	str	r3, [r7, #32]
 801a0d8:	6a3b      	ldr	r3, [r7, #32]
 801a0da:	e853 3f00 	ldrex	r3, [r3]
 801a0de:	61fb      	str	r3, [r7, #28]
 801a0e0:	69fb      	ldr	r3, [r7, #28]
 801a0e2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 801a0e6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801a0e8:	687b      	ldr	r3, [r7, #4]
 801a0ea:	681b      	ldr	r3, [r3, #0]
 801a0ec:	461a      	mov	r2, r3
 801a0ee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801a0f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801a0f2:	62ba      	str	r2, [r7, #40]	@ 0x28
 801a0f4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801a0f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801a0f8:	e841 2300 	strex	r3, r2, [r1]
 801a0fc:	627b      	str	r3, [r7, #36]	@ 0x24
 801a0fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a100:	2b00      	cmp	r3, #0
 801a102:	d1e6      	bne.n	801a0d2 <UART_RxISR_16BIT+0xfa>
 801a104:	687b      	ldr	r3, [r7, #4]
 801a106:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a108:	2b01      	cmp	r3, #1
 801a10a:	d12e      	bne.n	801a16a <UART_RxISR_16BIT+0x192>
 801a10c:	687b      	ldr	r3, [r7, #4]
 801a10e:	2200      	movs	r2, #0
 801a110:	66da      	str	r2, [r3, #108]	@ 0x6c
 801a112:	687b      	ldr	r3, [r7, #4]
 801a114:	681b      	ldr	r3, [r3, #0]
 801a116:	60fb      	str	r3, [r7, #12]
 801a118:	68fb      	ldr	r3, [r7, #12]
 801a11a:	e853 3f00 	ldrex	r3, [r3]
 801a11e:	60bb      	str	r3, [r7, #8]
 801a120:	68bb      	ldr	r3, [r7, #8]
 801a122:	f023 0310 	bic.w	r3, r3, #16
 801a126:	65bb      	str	r3, [r7, #88]	@ 0x58
 801a128:	687b      	ldr	r3, [r7, #4]
 801a12a:	681b      	ldr	r3, [r3, #0]
 801a12c:	461a      	mov	r2, r3
 801a12e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801a130:	61bb      	str	r3, [r7, #24]
 801a132:	617a      	str	r2, [r7, #20]
 801a134:	6979      	ldr	r1, [r7, #20]
 801a136:	69ba      	ldr	r2, [r7, #24]
 801a138:	e841 2300 	strex	r3, r2, [r1]
 801a13c:	613b      	str	r3, [r7, #16]
 801a13e:	693b      	ldr	r3, [r7, #16]
 801a140:	2b00      	cmp	r3, #0
 801a142:	d1e6      	bne.n	801a112 <UART_RxISR_16BIT+0x13a>
 801a144:	687b      	ldr	r3, [r7, #4]
 801a146:	681b      	ldr	r3, [r3, #0]
 801a148:	69db      	ldr	r3, [r3, #28]
 801a14a:	f003 0310 	and.w	r3, r3, #16
 801a14e:	2b10      	cmp	r3, #16
 801a150:	d103      	bne.n	801a15a <UART_RxISR_16BIT+0x182>
 801a152:	687b      	ldr	r3, [r7, #4]
 801a154:	681b      	ldr	r3, [r3, #0]
 801a156:	2210      	movs	r2, #16
 801a158:	621a      	str	r2, [r3, #32]
 801a15a:	687b      	ldr	r3, [r7, #4]
 801a15c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801a160:	4619      	mov	r1, r3
 801a162:	6878      	ldr	r0, [r7, #4]
 801a164:	f7fe fabe 	bl	80186e4 <HAL_UARTEx_RxEventCallback>
 801a168:	e00b      	b.n	801a182 <UART_RxISR_16BIT+0x1aa>
 801a16a:	6878      	ldr	r0, [r7, #4]
 801a16c:	f7ec f8b0 	bl	80062d0 <HAL_UART_RxCpltCallback>
 801a170:	e007      	b.n	801a182 <UART_RxISR_16BIT+0x1aa>
 801a172:	687b      	ldr	r3, [r7, #4]
 801a174:	681b      	ldr	r3, [r3, #0]
 801a176:	699a      	ldr	r2, [r3, #24]
 801a178:	687b      	ldr	r3, [r7, #4]
 801a17a:	681b      	ldr	r3, [r3, #0]
 801a17c:	f042 0208 	orr.w	r2, r2, #8
 801a180:	619a      	str	r2, [r3, #24]
 801a182:	bf00      	nop
 801a184:	3770      	adds	r7, #112	@ 0x70
 801a186:	46bd      	mov	sp, r7
 801a188:	bd80      	pop	{r7, pc}
 801a18a:	bf00      	nop
 801a18c:	58000c00 	.word	0x58000c00

0801a190 <UART_RxISR_8BIT_FIFOEN>:
 801a190:	b580      	push	{r7, lr}
 801a192:	b0ac      	sub	sp, #176	@ 0xb0
 801a194:	af00      	add	r7, sp, #0
 801a196:	6078      	str	r0, [r7, #4]
 801a198:	687b      	ldr	r3, [r7, #4]
 801a19a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801a19e:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
 801a1a2:	687b      	ldr	r3, [r7, #4]
 801a1a4:	681b      	ldr	r3, [r3, #0]
 801a1a6:	69db      	ldr	r3, [r3, #28]
 801a1a8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 801a1ac:	687b      	ldr	r3, [r7, #4]
 801a1ae:	681b      	ldr	r3, [r3, #0]
 801a1b0:	681b      	ldr	r3, [r3, #0]
 801a1b2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 801a1b6:	687b      	ldr	r3, [r7, #4]
 801a1b8:	681b      	ldr	r3, [r3, #0]
 801a1ba:	689b      	ldr	r3, [r3, #8]
 801a1bc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 801a1c0:	687b      	ldr	r3, [r7, #4]
 801a1c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801a1c6:	2b22      	cmp	r3, #34	@ 0x22
 801a1c8:	f040 8180 	bne.w	801a4cc <UART_RxISR_8BIT_FIFOEN+0x33c>
 801a1cc:	687b      	ldr	r3, [r7, #4]
 801a1ce:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 801a1d2:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
 801a1d6:	e123      	b.n	801a420 <UART_RxISR_8BIT_FIFOEN+0x290>
 801a1d8:	687b      	ldr	r3, [r7, #4]
 801a1da:	681b      	ldr	r3, [r3, #0]
 801a1dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a1de:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
 801a1e2:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 801a1e6:	b2d9      	uxtb	r1, r3
 801a1e8:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 801a1ec:	b2da      	uxtb	r2, r3
 801a1ee:	687b      	ldr	r3, [r7, #4]
 801a1f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801a1f2:	400a      	ands	r2, r1
 801a1f4:	b2d2      	uxtb	r2, r2
 801a1f6:	701a      	strb	r2, [r3, #0]
 801a1f8:	687b      	ldr	r3, [r7, #4]
 801a1fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801a1fc:	1c5a      	adds	r2, r3, #1
 801a1fe:	687b      	ldr	r3, [r7, #4]
 801a200:	659a      	str	r2, [r3, #88]	@ 0x58
 801a202:	687b      	ldr	r3, [r7, #4]
 801a204:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801a208:	b29b      	uxth	r3, r3
 801a20a:	3b01      	subs	r3, #1
 801a20c:	b29a      	uxth	r2, r3
 801a20e:	687b      	ldr	r3, [r7, #4]
 801a210:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
 801a214:	687b      	ldr	r3, [r7, #4]
 801a216:	681b      	ldr	r3, [r3, #0]
 801a218:	69db      	ldr	r3, [r3, #28]
 801a21a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 801a21e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801a222:	f003 0307 	and.w	r3, r3, #7
 801a226:	2b00      	cmp	r3, #0
 801a228:	d053      	beq.n	801a2d2 <UART_RxISR_8BIT_FIFOEN+0x142>
 801a22a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801a22e:	f003 0301 	and.w	r3, r3, #1
 801a232:	2b00      	cmp	r3, #0
 801a234:	d011      	beq.n	801a25a <UART_RxISR_8BIT_FIFOEN+0xca>
 801a236:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801a23a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801a23e:	2b00      	cmp	r3, #0
 801a240:	d00b      	beq.n	801a25a <UART_RxISR_8BIT_FIFOEN+0xca>
 801a242:	687b      	ldr	r3, [r7, #4]
 801a244:	681b      	ldr	r3, [r3, #0]
 801a246:	2201      	movs	r2, #1
 801a248:	621a      	str	r2, [r3, #32]
 801a24a:	687b      	ldr	r3, [r7, #4]
 801a24c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801a250:	f043 0201 	orr.w	r2, r3, #1
 801a254:	687b      	ldr	r3, [r7, #4]
 801a256:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 801a25a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801a25e:	f003 0302 	and.w	r3, r3, #2
 801a262:	2b00      	cmp	r3, #0
 801a264:	d011      	beq.n	801a28a <UART_RxISR_8BIT_FIFOEN+0xfa>
 801a266:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801a26a:	f003 0301 	and.w	r3, r3, #1
 801a26e:	2b00      	cmp	r3, #0
 801a270:	d00b      	beq.n	801a28a <UART_RxISR_8BIT_FIFOEN+0xfa>
 801a272:	687b      	ldr	r3, [r7, #4]
 801a274:	681b      	ldr	r3, [r3, #0]
 801a276:	2202      	movs	r2, #2
 801a278:	621a      	str	r2, [r3, #32]
 801a27a:	687b      	ldr	r3, [r7, #4]
 801a27c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801a280:	f043 0204 	orr.w	r2, r3, #4
 801a284:	687b      	ldr	r3, [r7, #4]
 801a286:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 801a28a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801a28e:	f003 0304 	and.w	r3, r3, #4
 801a292:	2b00      	cmp	r3, #0
 801a294:	d011      	beq.n	801a2ba <UART_RxISR_8BIT_FIFOEN+0x12a>
 801a296:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801a29a:	f003 0301 	and.w	r3, r3, #1
 801a29e:	2b00      	cmp	r3, #0
 801a2a0:	d00b      	beq.n	801a2ba <UART_RxISR_8BIT_FIFOEN+0x12a>
 801a2a2:	687b      	ldr	r3, [r7, #4]
 801a2a4:	681b      	ldr	r3, [r3, #0]
 801a2a6:	2204      	movs	r2, #4
 801a2a8:	621a      	str	r2, [r3, #32]
 801a2aa:	687b      	ldr	r3, [r7, #4]
 801a2ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801a2b0:	f043 0202 	orr.w	r2, r3, #2
 801a2b4:	687b      	ldr	r3, [r7, #4]
 801a2b6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 801a2ba:	687b      	ldr	r3, [r7, #4]
 801a2bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801a2c0:	2b00      	cmp	r3, #0
 801a2c2:	d006      	beq.n	801a2d2 <UART_RxISR_8BIT_FIFOEN+0x142>
 801a2c4:	6878      	ldr	r0, [r7, #4]
 801a2c6:	f7fe fa03 	bl	80186d0 <HAL_UART_ErrorCallback>
 801a2ca:	687b      	ldr	r3, [r7, #4]
 801a2cc:	2200      	movs	r2, #0
 801a2ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 801a2d2:	687b      	ldr	r3, [r7, #4]
 801a2d4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801a2d8:	b29b      	uxth	r3, r3
 801a2da:	2b00      	cmp	r3, #0
 801a2dc:	f040 80a0 	bne.w	801a420 <UART_RxISR_8BIT_FIFOEN+0x290>
 801a2e0:	687b      	ldr	r3, [r7, #4]
 801a2e2:	681b      	ldr	r3, [r3, #0]
 801a2e4:	673b      	str	r3, [r7, #112]	@ 0x70
 801a2e6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801a2e8:	e853 3f00 	ldrex	r3, [r3]
 801a2ec:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801a2ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801a2f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801a2f4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 801a2f8:	687b      	ldr	r3, [r7, #4]
 801a2fa:	681b      	ldr	r3, [r3, #0]
 801a2fc:	461a      	mov	r2, r3
 801a2fe:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 801a302:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801a304:	67ba      	str	r2, [r7, #120]	@ 0x78
 801a306:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 801a308:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 801a30a:	e841 2300 	strex	r3, r2, [r1]
 801a30e:	677b      	str	r3, [r7, #116]	@ 0x74
 801a310:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801a312:	2b00      	cmp	r3, #0
 801a314:	d1e4      	bne.n	801a2e0 <UART_RxISR_8BIT_FIFOEN+0x150>
 801a316:	687b      	ldr	r3, [r7, #4]
 801a318:	681b      	ldr	r3, [r3, #0]
 801a31a:	3308      	adds	r3, #8
 801a31c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801a31e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801a320:	e853 3f00 	ldrex	r3, [r3]
 801a324:	65bb      	str	r3, [r7, #88]	@ 0x58
 801a326:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801a328:	4b6e      	ldr	r3, [pc, #440]	@ (801a4e4 <UART_RxISR_8BIT_FIFOEN+0x354>)
 801a32a:	4013      	ands	r3, r2
 801a32c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 801a330:	687b      	ldr	r3, [r7, #4]
 801a332:	681b      	ldr	r3, [r3, #0]
 801a334:	3308      	adds	r3, #8
 801a336:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 801a33a:	66ba      	str	r2, [r7, #104]	@ 0x68
 801a33c:	667b      	str	r3, [r7, #100]	@ 0x64
 801a33e:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 801a340:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 801a342:	e841 2300 	strex	r3, r2, [r1]
 801a346:	663b      	str	r3, [r7, #96]	@ 0x60
 801a348:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801a34a:	2b00      	cmp	r3, #0
 801a34c:	d1e3      	bne.n	801a316 <UART_RxISR_8BIT_FIFOEN+0x186>
 801a34e:	687b      	ldr	r3, [r7, #4]
 801a350:	2220      	movs	r2, #32
 801a352:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 801a356:	687b      	ldr	r3, [r7, #4]
 801a358:	2200      	movs	r2, #0
 801a35a:	675a      	str	r2, [r3, #116]	@ 0x74
 801a35c:	687b      	ldr	r3, [r7, #4]
 801a35e:	2200      	movs	r2, #0
 801a360:	671a      	str	r2, [r3, #112]	@ 0x70
 801a362:	687b      	ldr	r3, [r7, #4]
 801a364:	681b      	ldr	r3, [r3, #0]
 801a366:	4a60      	ldr	r2, [pc, #384]	@ (801a4e8 <UART_RxISR_8BIT_FIFOEN+0x358>)
 801a368:	4293      	cmp	r3, r2
 801a36a:	d021      	beq.n	801a3b0 <UART_RxISR_8BIT_FIFOEN+0x220>
 801a36c:	687b      	ldr	r3, [r7, #4]
 801a36e:	681b      	ldr	r3, [r3, #0]
 801a370:	685b      	ldr	r3, [r3, #4]
 801a372:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801a376:	2b00      	cmp	r3, #0
 801a378:	d01a      	beq.n	801a3b0 <UART_RxISR_8BIT_FIFOEN+0x220>
 801a37a:	687b      	ldr	r3, [r7, #4]
 801a37c:	681b      	ldr	r3, [r3, #0]
 801a37e:	64bb      	str	r3, [r7, #72]	@ 0x48
 801a380:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801a382:	e853 3f00 	ldrex	r3, [r3]
 801a386:	647b      	str	r3, [r7, #68]	@ 0x44
 801a388:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801a38a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 801a38e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 801a392:	687b      	ldr	r3, [r7, #4]
 801a394:	681b      	ldr	r3, [r3, #0]
 801a396:	461a      	mov	r2, r3
 801a398:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801a39c:	657b      	str	r3, [r7, #84]	@ 0x54
 801a39e:	653a      	str	r2, [r7, #80]	@ 0x50
 801a3a0:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801a3a2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801a3a4:	e841 2300 	strex	r3, r2, [r1]
 801a3a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801a3aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801a3ac:	2b00      	cmp	r3, #0
 801a3ae:	d1e4      	bne.n	801a37a <UART_RxISR_8BIT_FIFOEN+0x1ea>
 801a3b0:	687b      	ldr	r3, [r7, #4]
 801a3b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a3b4:	2b01      	cmp	r3, #1
 801a3b6:	d130      	bne.n	801a41a <UART_RxISR_8BIT_FIFOEN+0x28a>
 801a3b8:	687b      	ldr	r3, [r7, #4]
 801a3ba:	2200      	movs	r2, #0
 801a3bc:	66da      	str	r2, [r3, #108]	@ 0x6c
 801a3be:	687b      	ldr	r3, [r7, #4]
 801a3c0:	681b      	ldr	r3, [r3, #0]
 801a3c2:	637b      	str	r3, [r7, #52]	@ 0x34
 801a3c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a3c6:	e853 3f00 	ldrex	r3, [r3]
 801a3ca:	633b      	str	r3, [r7, #48]	@ 0x30
 801a3cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a3ce:	f023 0310 	bic.w	r3, r3, #16
 801a3d2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 801a3d6:	687b      	ldr	r3, [r7, #4]
 801a3d8:	681b      	ldr	r3, [r3, #0]
 801a3da:	461a      	mov	r2, r3
 801a3dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801a3e0:	643b      	str	r3, [r7, #64]	@ 0x40
 801a3e2:	63fa      	str	r2, [r7, #60]	@ 0x3c
 801a3e4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801a3e6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801a3e8:	e841 2300 	strex	r3, r2, [r1]
 801a3ec:	63bb      	str	r3, [r7, #56]	@ 0x38
 801a3ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a3f0:	2b00      	cmp	r3, #0
 801a3f2:	d1e4      	bne.n	801a3be <UART_RxISR_8BIT_FIFOEN+0x22e>
 801a3f4:	687b      	ldr	r3, [r7, #4]
 801a3f6:	681b      	ldr	r3, [r3, #0]
 801a3f8:	69db      	ldr	r3, [r3, #28]
 801a3fa:	f003 0310 	and.w	r3, r3, #16
 801a3fe:	2b10      	cmp	r3, #16
 801a400:	d103      	bne.n	801a40a <UART_RxISR_8BIT_FIFOEN+0x27a>
 801a402:	687b      	ldr	r3, [r7, #4]
 801a404:	681b      	ldr	r3, [r3, #0]
 801a406:	2210      	movs	r2, #16
 801a408:	621a      	str	r2, [r3, #32]
 801a40a:	687b      	ldr	r3, [r7, #4]
 801a40c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801a410:	4619      	mov	r1, r3
 801a412:	6878      	ldr	r0, [r7, #4]
 801a414:	f7fe f966 	bl	80186e4 <HAL_UARTEx_RxEventCallback>
 801a418:	e002      	b.n	801a420 <UART_RxISR_8BIT_FIFOEN+0x290>
 801a41a:	6878      	ldr	r0, [r7, #4]
 801a41c:	f7eb ff58 	bl	80062d0 <HAL_UART_RxCpltCallback>
 801a420:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 801a424:	2b00      	cmp	r3, #0
 801a426:	d006      	beq.n	801a436 <UART_RxISR_8BIT_FIFOEN+0x2a6>
 801a428:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801a42c:	f003 0320 	and.w	r3, r3, #32
 801a430:	2b00      	cmp	r3, #0
 801a432:	f47f aed1 	bne.w	801a1d8 <UART_RxISR_8BIT_FIFOEN+0x48>
 801a436:	687b      	ldr	r3, [r7, #4]
 801a438:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801a43c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 801a440:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 801a444:	2b00      	cmp	r3, #0
 801a446:	d049      	beq.n	801a4dc <UART_RxISR_8BIT_FIFOEN+0x34c>
 801a448:	687b      	ldr	r3, [r7, #4]
 801a44a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 801a44e:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 801a452:	429a      	cmp	r2, r3
 801a454:	d242      	bcs.n	801a4dc <UART_RxISR_8BIT_FIFOEN+0x34c>
 801a456:	687b      	ldr	r3, [r7, #4]
 801a458:	681b      	ldr	r3, [r3, #0]
 801a45a:	3308      	adds	r3, #8
 801a45c:	623b      	str	r3, [r7, #32]
 801a45e:	6a3b      	ldr	r3, [r7, #32]
 801a460:	e853 3f00 	ldrex	r3, [r3]
 801a464:	61fb      	str	r3, [r7, #28]
 801a466:	69fb      	ldr	r3, [r7, #28]
 801a468:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 801a46c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 801a470:	687b      	ldr	r3, [r7, #4]
 801a472:	681b      	ldr	r3, [r3, #0]
 801a474:	3308      	adds	r3, #8
 801a476:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 801a47a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801a47c:	62bb      	str	r3, [r7, #40]	@ 0x28
 801a47e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801a480:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801a482:	e841 2300 	strex	r3, r2, [r1]
 801a486:	627b      	str	r3, [r7, #36]	@ 0x24
 801a488:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a48a:	2b00      	cmp	r3, #0
 801a48c:	d1e3      	bne.n	801a456 <UART_RxISR_8BIT_FIFOEN+0x2c6>
 801a48e:	687b      	ldr	r3, [r7, #4]
 801a490:	4a16      	ldr	r2, [pc, #88]	@ (801a4ec <UART_RxISR_8BIT_FIFOEN+0x35c>)
 801a492:	675a      	str	r2, [r3, #116]	@ 0x74
 801a494:	687b      	ldr	r3, [r7, #4]
 801a496:	681b      	ldr	r3, [r3, #0]
 801a498:	60fb      	str	r3, [r7, #12]
 801a49a:	68fb      	ldr	r3, [r7, #12]
 801a49c:	e853 3f00 	ldrex	r3, [r3]
 801a4a0:	60bb      	str	r3, [r7, #8]
 801a4a2:	68bb      	ldr	r3, [r7, #8]
 801a4a4:	f043 0320 	orr.w	r3, r3, #32
 801a4a8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 801a4ac:	687b      	ldr	r3, [r7, #4]
 801a4ae:	681b      	ldr	r3, [r3, #0]
 801a4b0:	461a      	mov	r2, r3
 801a4b2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801a4b6:	61bb      	str	r3, [r7, #24]
 801a4b8:	617a      	str	r2, [r7, #20]
 801a4ba:	6979      	ldr	r1, [r7, #20]
 801a4bc:	69ba      	ldr	r2, [r7, #24]
 801a4be:	e841 2300 	strex	r3, r2, [r1]
 801a4c2:	613b      	str	r3, [r7, #16]
 801a4c4:	693b      	ldr	r3, [r7, #16]
 801a4c6:	2b00      	cmp	r3, #0
 801a4c8:	d1e4      	bne.n	801a494 <UART_RxISR_8BIT_FIFOEN+0x304>
 801a4ca:	e007      	b.n	801a4dc <UART_RxISR_8BIT_FIFOEN+0x34c>
 801a4cc:	687b      	ldr	r3, [r7, #4]
 801a4ce:	681b      	ldr	r3, [r3, #0]
 801a4d0:	699a      	ldr	r2, [r3, #24]
 801a4d2:	687b      	ldr	r3, [r7, #4]
 801a4d4:	681b      	ldr	r3, [r3, #0]
 801a4d6:	f042 0208 	orr.w	r2, r2, #8
 801a4da:	619a      	str	r2, [r3, #24]
 801a4dc:	bf00      	nop
 801a4de:	37b0      	adds	r7, #176	@ 0xb0
 801a4e0:	46bd      	mov	sp, r7
 801a4e2:	bd80      	pop	{r7, pc}
 801a4e4:	effffffe 	.word	0xeffffffe
 801a4e8:	58000c00 	.word	0x58000c00
 801a4ec:	08019e21 	.word	0x08019e21

0801a4f0 <UART_RxISR_16BIT_FIFOEN>:
 801a4f0:	b580      	push	{r7, lr}
 801a4f2:	b0ae      	sub	sp, #184	@ 0xb8
 801a4f4:	af00      	add	r7, sp, #0
 801a4f6:	6078      	str	r0, [r7, #4]
 801a4f8:	687b      	ldr	r3, [r7, #4]
 801a4fa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801a4fe:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
 801a502:	687b      	ldr	r3, [r7, #4]
 801a504:	681b      	ldr	r3, [r3, #0]
 801a506:	69db      	ldr	r3, [r3, #28]
 801a508:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 801a50c:	687b      	ldr	r3, [r7, #4]
 801a50e:	681b      	ldr	r3, [r3, #0]
 801a510:	681b      	ldr	r3, [r3, #0]
 801a512:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 801a516:	687b      	ldr	r3, [r7, #4]
 801a518:	681b      	ldr	r3, [r3, #0]
 801a51a:	689b      	ldr	r3, [r3, #8]
 801a51c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 801a520:	687b      	ldr	r3, [r7, #4]
 801a522:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801a526:	2b22      	cmp	r3, #34	@ 0x22
 801a528:	f040 8184 	bne.w	801a834 <UART_RxISR_16BIT_FIFOEN+0x344>
 801a52c:	687b      	ldr	r3, [r7, #4]
 801a52e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 801a532:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
 801a536:	e127      	b.n	801a788 <UART_RxISR_16BIT_FIFOEN+0x298>
 801a538:	687b      	ldr	r3, [r7, #4]
 801a53a:	681b      	ldr	r3, [r3, #0]
 801a53c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a53e:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
 801a542:	687b      	ldr	r3, [r7, #4]
 801a544:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801a546:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 801a54a:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 801a54e:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 801a552:	4013      	ands	r3, r2
 801a554:	b29a      	uxth	r2, r3
 801a556:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801a55a:	801a      	strh	r2, [r3, #0]
 801a55c:	687b      	ldr	r3, [r7, #4]
 801a55e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801a560:	1c9a      	adds	r2, r3, #2
 801a562:	687b      	ldr	r3, [r7, #4]
 801a564:	659a      	str	r2, [r3, #88]	@ 0x58
 801a566:	687b      	ldr	r3, [r7, #4]
 801a568:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801a56c:	b29b      	uxth	r3, r3
 801a56e:	3b01      	subs	r3, #1
 801a570:	b29a      	uxth	r2, r3
 801a572:	687b      	ldr	r3, [r7, #4]
 801a574:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
 801a578:	687b      	ldr	r3, [r7, #4]
 801a57a:	681b      	ldr	r3, [r3, #0]
 801a57c:	69db      	ldr	r3, [r3, #28]
 801a57e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 801a582:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801a586:	f003 0307 	and.w	r3, r3, #7
 801a58a:	2b00      	cmp	r3, #0
 801a58c:	d053      	beq.n	801a636 <UART_RxISR_16BIT_FIFOEN+0x146>
 801a58e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801a592:	f003 0301 	and.w	r3, r3, #1
 801a596:	2b00      	cmp	r3, #0
 801a598:	d011      	beq.n	801a5be <UART_RxISR_16BIT_FIFOEN+0xce>
 801a59a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801a59e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801a5a2:	2b00      	cmp	r3, #0
 801a5a4:	d00b      	beq.n	801a5be <UART_RxISR_16BIT_FIFOEN+0xce>
 801a5a6:	687b      	ldr	r3, [r7, #4]
 801a5a8:	681b      	ldr	r3, [r3, #0]
 801a5aa:	2201      	movs	r2, #1
 801a5ac:	621a      	str	r2, [r3, #32]
 801a5ae:	687b      	ldr	r3, [r7, #4]
 801a5b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801a5b4:	f043 0201 	orr.w	r2, r3, #1
 801a5b8:	687b      	ldr	r3, [r7, #4]
 801a5ba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 801a5be:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801a5c2:	f003 0302 	and.w	r3, r3, #2
 801a5c6:	2b00      	cmp	r3, #0
 801a5c8:	d011      	beq.n	801a5ee <UART_RxISR_16BIT_FIFOEN+0xfe>
 801a5ca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 801a5ce:	f003 0301 	and.w	r3, r3, #1
 801a5d2:	2b00      	cmp	r3, #0
 801a5d4:	d00b      	beq.n	801a5ee <UART_RxISR_16BIT_FIFOEN+0xfe>
 801a5d6:	687b      	ldr	r3, [r7, #4]
 801a5d8:	681b      	ldr	r3, [r3, #0]
 801a5da:	2202      	movs	r2, #2
 801a5dc:	621a      	str	r2, [r3, #32]
 801a5de:	687b      	ldr	r3, [r7, #4]
 801a5e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801a5e4:	f043 0204 	orr.w	r2, r3, #4
 801a5e8:	687b      	ldr	r3, [r7, #4]
 801a5ea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 801a5ee:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801a5f2:	f003 0304 	and.w	r3, r3, #4
 801a5f6:	2b00      	cmp	r3, #0
 801a5f8:	d011      	beq.n	801a61e <UART_RxISR_16BIT_FIFOEN+0x12e>
 801a5fa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 801a5fe:	f003 0301 	and.w	r3, r3, #1
 801a602:	2b00      	cmp	r3, #0
 801a604:	d00b      	beq.n	801a61e <UART_RxISR_16BIT_FIFOEN+0x12e>
 801a606:	687b      	ldr	r3, [r7, #4]
 801a608:	681b      	ldr	r3, [r3, #0]
 801a60a:	2204      	movs	r2, #4
 801a60c:	621a      	str	r2, [r3, #32]
 801a60e:	687b      	ldr	r3, [r7, #4]
 801a610:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801a614:	f043 0202 	orr.w	r2, r3, #2
 801a618:	687b      	ldr	r3, [r7, #4]
 801a61a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 801a61e:	687b      	ldr	r3, [r7, #4]
 801a620:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801a624:	2b00      	cmp	r3, #0
 801a626:	d006      	beq.n	801a636 <UART_RxISR_16BIT_FIFOEN+0x146>
 801a628:	6878      	ldr	r0, [r7, #4]
 801a62a:	f7fe f851 	bl	80186d0 <HAL_UART_ErrorCallback>
 801a62e:	687b      	ldr	r3, [r7, #4]
 801a630:	2200      	movs	r2, #0
 801a632:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 801a636:	687b      	ldr	r3, [r7, #4]
 801a638:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801a63c:	b29b      	uxth	r3, r3
 801a63e:	2b00      	cmp	r3, #0
 801a640:	f040 80a2 	bne.w	801a788 <UART_RxISR_16BIT_FIFOEN+0x298>
 801a644:	687b      	ldr	r3, [r7, #4]
 801a646:	681b      	ldr	r3, [r3, #0]
 801a648:	677b      	str	r3, [r7, #116]	@ 0x74
 801a64a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801a64c:	e853 3f00 	ldrex	r3, [r3]
 801a650:	673b      	str	r3, [r7, #112]	@ 0x70
 801a652:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801a654:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801a658:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 801a65c:	687b      	ldr	r3, [r7, #4]
 801a65e:	681b      	ldr	r3, [r3, #0]
 801a660:	461a      	mov	r2, r3
 801a662:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801a666:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 801a66a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 801a66c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 801a66e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 801a672:	e841 2300 	strex	r3, r2, [r1]
 801a676:	67bb      	str	r3, [r7, #120]	@ 0x78
 801a678:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801a67a:	2b00      	cmp	r3, #0
 801a67c:	d1e2      	bne.n	801a644 <UART_RxISR_16BIT_FIFOEN+0x154>
 801a67e:	687b      	ldr	r3, [r7, #4]
 801a680:	681b      	ldr	r3, [r3, #0]
 801a682:	3308      	adds	r3, #8
 801a684:	663b      	str	r3, [r7, #96]	@ 0x60
 801a686:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801a688:	e853 3f00 	ldrex	r3, [r3]
 801a68c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801a68e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801a690:	4b6e      	ldr	r3, [pc, #440]	@ (801a84c <UART_RxISR_16BIT_FIFOEN+0x35c>)
 801a692:	4013      	ands	r3, r2
 801a694:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 801a698:	687b      	ldr	r3, [r7, #4]
 801a69a:	681b      	ldr	r3, [r3, #0]
 801a69c:	3308      	adds	r3, #8
 801a69e:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 801a6a2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 801a6a4:	66bb      	str	r3, [r7, #104]	@ 0x68
 801a6a6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 801a6a8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 801a6aa:	e841 2300 	strex	r3, r2, [r1]
 801a6ae:	667b      	str	r3, [r7, #100]	@ 0x64
 801a6b0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801a6b2:	2b00      	cmp	r3, #0
 801a6b4:	d1e3      	bne.n	801a67e <UART_RxISR_16BIT_FIFOEN+0x18e>
 801a6b6:	687b      	ldr	r3, [r7, #4]
 801a6b8:	2220      	movs	r2, #32
 801a6ba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 801a6be:	687b      	ldr	r3, [r7, #4]
 801a6c0:	2200      	movs	r2, #0
 801a6c2:	675a      	str	r2, [r3, #116]	@ 0x74
 801a6c4:	687b      	ldr	r3, [r7, #4]
 801a6c6:	2200      	movs	r2, #0
 801a6c8:	671a      	str	r2, [r3, #112]	@ 0x70
 801a6ca:	687b      	ldr	r3, [r7, #4]
 801a6cc:	681b      	ldr	r3, [r3, #0]
 801a6ce:	4a60      	ldr	r2, [pc, #384]	@ (801a850 <UART_RxISR_16BIT_FIFOEN+0x360>)
 801a6d0:	4293      	cmp	r3, r2
 801a6d2:	d021      	beq.n	801a718 <UART_RxISR_16BIT_FIFOEN+0x228>
 801a6d4:	687b      	ldr	r3, [r7, #4]
 801a6d6:	681b      	ldr	r3, [r3, #0]
 801a6d8:	685b      	ldr	r3, [r3, #4]
 801a6da:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801a6de:	2b00      	cmp	r3, #0
 801a6e0:	d01a      	beq.n	801a718 <UART_RxISR_16BIT_FIFOEN+0x228>
 801a6e2:	687b      	ldr	r3, [r7, #4]
 801a6e4:	681b      	ldr	r3, [r3, #0]
 801a6e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801a6e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801a6ea:	e853 3f00 	ldrex	r3, [r3]
 801a6ee:	64bb      	str	r3, [r7, #72]	@ 0x48
 801a6f0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801a6f2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 801a6f6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 801a6fa:	687b      	ldr	r3, [r7, #4]
 801a6fc:	681b      	ldr	r3, [r3, #0]
 801a6fe:	461a      	mov	r2, r3
 801a700:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 801a704:	65bb      	str	r3, [r7, #88]	@ 0x58
 801a706:	657a      	str	r2, [r7, #84]	@ 0x54
 801a708:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801a70a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801a70c:	e841 2300 	strex	r3, r2, [r1]
 801a710:	653b      	str	r3, [r7, #80]	@ 0x50
 801a712:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801a714:	2b00      	cmp	r3, #0
 801a716:	d1e4      	bne.n	801a6e2 <UART_RxISR_16BIT_FIFOEN+0x1f2>
 801a718:	687b      	ldr	r3, [r7, #4]
 801a71a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a71c:	2b01      	cmp	r3, #1
 801a71e:	d130      	bne.n	801a782 <UART_RxISR_16BIT_FIFOEN+0x292>
 801a720:	687b      	ldr	r3, [r7, #4]
 801a722:	2200      	movs	r2, #0
 801a724:	66da      	str	r2, [r3, #108]	@ 0x6c
 801a726:	687b      	ldr	r3, [r7, #4]
 801a728:	681b      	ldr	r3, [r3, #0]
 801a72a:	63bb      	str	r3, [r7, #56]	@ 0x38
 801a72c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a72e:	e853 3f00 	ldrex	r3, [r3]
 801a732:	637b      	str	r3, [r7, #52]	@ 0x34
 801a734:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a736:	f023 0310 	bic.w	r3, r3, #16
 801a73a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 801a73e:	687b      	ldr	r3, [r7, #4]
 801a740:	681b      	ldr	r3, [r3, #0]
 801a742:	461a      	mov	r2, r3
 801a744:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801a748:	647b      	str	r3, [r7, #68]	@ 0x44
 801a74a:	643a      	str	r2, [r7, #64]	@ 0x40
 801a74c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801a74e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801a750:	e841 2300 	strex	r3, r2, [r1]
 801a754:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801a756:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a758:	2b00      	cmp	r3, #0
 801a75a:	d1e4      	bne.n	801a726 <UART_RxISR_16BIT_FIFOEN+0x236>
 801a75c:	687b      	ldr	r3, [r7, #4]
 801a75e:	681b      	ldr	r3, [r3, #0]
 801a760:	69db      	ldr	r3, [r3, #28]
 801a762:	f003 0310 	and.w	r3, r3, #16
 801a766:	2b10      	cmp	r3, #16
 801a768:	d103      	bne.n	801a772 <UART_RxISR_16BIT_FIFOEN+0x282>
 801a76a:	687b      	ldr	r3, [r7, #4]
 801a76c:	681b      	ldr	r3, [r3, #0]
 801a76e:	2210      	movs	r2, #16
 801a770:	621a      	str	r2, [r3, #32]
 801a772:	687b      	ldr	r3, [r7, #4]
 801a774:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801a778:	4619      	mov	r1, r3
 801a77a:	6878      	ldr	r0, [r7, #4]
 801a77c:	f7fd ffb2 	bl	80186e4 <HAL_UARTEx_RxEventCallback>
 801a780:	e002      	b.n	801a788 <UART_RxISR_16BIT_FIFOEN+0x298>
 801a782:	6878      	ldr	r0, [r7, #4]
 801a784:	f7eb fda4 	bl	80062d0 <HAL_UART_RxCpltCallback>
 801a788:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 801a78c:	2b00      	cmp	r3, #0
 801a78e:	d006      	beq.n	801a79e <UART_RxISR_16BIT_FIFOEN+0x2ae>
 801a790:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801a794:	f003 0320 	and.w	r3, r3, #32
 801a798:	2b00      	cmp	r3, #0
 801a79a:	f47f aecd 	bne.w	801a538 <UART_RxISR_16BIT_FIFOEN+0x48>
 801a79e:	687b      	ldr	r3, [r7, #4]
 801a7a0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801a7a4:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 801a7a8:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 801a7ac:	2b00      	cmp	r3, #0
 801a7ae:	d049      	beq.n	801a844 <UART_RxISR_16BIT_FIFOEN+0x354>
 801a7b0:	687b      	ldr	r3, [r7, #4]
 801a7b2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 801a7b6:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 801a7ba:	429a      	cmp	r2, r3
 801a7bc:	d242      	bcs.n	801a844 <UART_RxISR_16BIT_FIFOEN+0x354>
 801a7be:	687b      	ldr	r3, [r7, #4]
 801a7c0:	681b      	ldr	r3, [r3, #0]
 801a7c2:	3308      	adds	r3, #8
 801a7c4:	627b      	str	r3, [r7, #36]	@ 0x24
 801a7c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a7c8:	e853 3f00 	ldrex	r3, [r3]
 801a7cc:	623b      	str	r3, [r7, #32]
 801a7ce:	6a3b      	ldr	r3, [r7, #32]
 801a7d0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 801a7d4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 801a7d8:	687b      	ldr	r3, [r7, #4]
 801a7da:	681b      	ldr	r3, [r3, #0]
 801a7dc:	3308      	adds	r3, #8
 801a7de:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 801a7e2:	633a      	str	r2, [r7, #48]	@ 0x30
 801a7e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801a7e6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801a7e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801a7ea:	e841 2300 	strex	r3, r2, [r1]
 801a7ee:	62bb      	str	r3, [r7, #40]	@ 0x28
 801a7f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a7f2:	2b00      	cmp	r3, #0
 801a7f4:	d1e3      	bne.n	801a7be <UART_RxISR_16BIT_FIFOEN+0x2ce>
 801a7f6:	687b      	ldr	r3, [r7, #4]
 801a7f8:	4a16      	ldr	r2, [pc, #88]	@ (801a854 <UART_RxISR_16BIT_FIFOEN+0x364>)
 801a7fa:	675a      	str	r2, [r3, #116]	@ 0x74
 801a7fc:	687b      	ldr	r3, [r7, #4]
 801a7fe:	681b      	ldr	r3, [r3, #0]
 801a800:	613b      	str	r3, [r7, #16]
 801a802:	693b      	ldr	r3, [r7, #16]
 801a804:	e853 3f00 	ldrex	r3, [r3]
 801a808:	60fb      	str	r3, [r7, #12]
 801a80a:	68fb      	ldr	r3, [r7, #12]
 801a80c:	f043 0320 	orr.w	r3, r3, #32
 801a810:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 801a814:	687b      	ldr	r3, [r7, #4]
 801a816:	681b      	ldr	r3, [r3, #0]
 801a818:	461a      	mov	r2, r3
 801a81a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 801a81e:	61fb      	str	r3, [r7, #28]
 801a820:	61ba      	str	r2, [r7, #24]
 801a822:	69b9      	ldr	r1, [r7, #24]
 801a824:	69fa      	ldr	r2, [r7, #28]
 801a826:	e841 2300 	strex	r3, r2, [r1]
 801a82a:	617b      	str	r3, [r7, #20]
 801a82c:	697b      	ldr	r3, [r7, #20]
 801a82e:	2b00      	cmp	r3, #0
 801a830:	d1e4      	bne.n	801a7fc <UART_RxISR_16BIT_FIFOEN+0x30c>
 801a832:	e007      	b.n	801a844 <UART_RxISR_16BIT_FIFOEN+0x354>
 801a834:	687b      	ldr	r3, [r7, #4]
 801a836:	681b      	ldr	r3, [r3, #0]
 801a838:	699a      	ldr	r2, [r3, #24]
 801a83a:	687b      	ldr	r3, [r7, #4]
 801a83c:	681b      	ldr	r3, [r3, #0]
 801a83e:	f042 0208 	orr.w	r2, r2, #8
 801a842:	619a      	str	r2, [r3, #24]
 801a844:	bf00      	nop
 801a846:	37b8      	adds	r7, #184	@ 0xb8
 801a848:	46bd      	mov	sp, r7
 801a84a:	bd80      	pop	{r7, pc}
 801a84c:	effffffe 	.word	0xeffffffe
 801a850:	58000c00 	.word	0x58000c00
 801a854:	08019fd9 	.word	0x08019fd9

0801a858 <HAL_UARTEx_WakeupCallback>:
 801a858:	b480      	push	{r7}
 801a85a:	b083      	sub	sp, #12
 801a85c:	af00      	add	r7, sp, #0
 801a85e:	6078      	str	r0, [r7, #4]
 801a860:	bf00      	nop
 801a862:	370c      	adds	r7, #12
 801a864:	46bd      	mov	sp, r7
 801a866:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a86a:	4770      	bx	lr

0801a86c <HAL_UARTEx_RxFifoFullCallback>:
 801a86c:	b480      	push	{r7}
 801a86e:	b083      	sub	sp, #12
 801a870:	af00      	add	r7, sp, #0
 801a872:	6078      	str	r0, [r7, #4]
 801a874:	bf00      	nop
 801a876:	370c      	adds	r7, #12
 801a878:	46bd      	mov	sp, r7
 801a87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a87e:	4770      	bx	lr

0801a880 <HAL_UARTEx_TxFifoEmptyCallback>:
 801a880:	b480      	push	{r7}
 801a882:	b083      	sub	sp, #12
 801a884:	af00      	add	r7, sp, #0
 801a886:	6078      	str	r0, [r7, #4]
 801a888:	bf00      	nop
 801a88a:	370c      	adds	r7, #12
 801a88c:	46bd      	mov	sp, r7
 801a88e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a892:	4770      	bx	lr

0801a894 <HAL_UARTEx_DisableFifoMode>:
 801a894:	b480      	push	{r7}
 801a896:	b085      	sub	sp, #20
 801a898:	af00      	add	r7, sp, #0
 801a89a:	6078      	str	r0, [r7, #4]
 801a89c:	687b      	ldr	r3, [r7, #4]
 801a89e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801a8a2:	2b01      	cmp	r3, #1
 801a8a4:	d101      	bne.n	801a8aa <HAL_UARTEx_DisableFifoMode+0x16>
 801a8a6:	2302      	movs	r3, #2
 801a8a8:	e027      	b.n	801a8fa <HAL_UARTEx_DisableFifoMode+0x66>
 801a8aa:	687b      	ldr	r3, [r7, #4]
 801a8ac:	2201      	movs	r2, #1
 801a8ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
 801a8b2:	687b      	ldr	r3, [r7, #4]
 801a8b4:	2224      	movs	r2, #36	@ 0x24
 801a8b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 801a8ba:	687b      	ldr	r3, [r7, #4]
 801a8bc:	681b      	ldr	r3, [r3, #0]
 801a8be:	681b      	ldr	r3, [r3, #0]
 801a8c0:	60fb      	str	r3, [r7, #12]
 801a8c2:	687b      	ldr	r3, [r7, #4]
 801a8c4:	681b      	ldr	r3, [r3, #0]
 801a8c6:	681a      	ldr	r2, [r3, #0]
 801a8c8:	687b      	ldr	r3, [r7, #4]
 801a8ca:	681b      	ldr	r3, [r3, #0]
 801a8cc:	f022 0201 	bic.w	r2, r2, #1
 801a8d0:	601a      	str	r2, [r3, #0]
 801a8d2:	68fb      	ldr	r3, [r7, #12]
 801a8d4:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 801a8d8:	60fb      	str	r3, [r7, #12]
 801a8da:	687b      	ldr	r3, [r7, #4]
 801a8dc:	2200      	movs	r2, #0
 801a8de:	665a      	str	r2, [r3, #100]	@ 0x64
 801a8e0:	687b      	ldr	r3, [r7, #4]
 801a8e2:	681b      	ldr	r3, [r3, #0]
 801a8e4:	68fa      	ldr	r2, [r7, #12]
 801a8e6:	601a      	str	r2, [r3, #0]
 801a8e8:	687b      	ldr	r3, [r7, #4]
 801a8ea:	2220      	movs	r2, #32
 801a8ec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 801a8f0:	687b      	ldr	r3, [r7, #4]
 801a8f2:	2200      	movs	r2, #0
 801a8f4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
 801a8f8:	2300      	movs	r3, #0
 801a8fa:	4618      	mov	r0, r3
 801a8fc:	3714      	adds	r7, #20
 801a8fe:	46bd      	mov	sp, r7
 801a900:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a904:	4770      	bx	lr

0801a906 <HAL_UARTEx_SetTxFifoThreshold>:
 801a906:	b580      	push	{r7, lr}
 801a908:	b084      	sub	sp, #16
 801a90a:	af00      	add	r7, sp, #0
 801a90c:	6078      	str	r0, [r7, #4]
 801a90e:	6039      	str	r1, [r7, #0]
 801a910:	687b      	ldr	r3, [r7, #4]
 801a912:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801a916:	2b01      	cmp	r3, #1
 801a918:	d101      	bne.n	801a91e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 801a91a:	2302      	movs	r3, #2
 801a91c:	e02d      	b.n	801a97a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 801a91e:	687b      	ldr	r3, [r7, #4]
 801a920:	2201      	movs	r2, #1
 801a922:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
 801a926:	687b      	ldr	r3, [r7, #4]
 801a928:	2224      	movs	r2, #36	@ 0x24
 801a92a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 801a92e:	687b      	ldr	r3, [r7, #4]
 801a930:	681b      	ldr	r3, [r3, #0]
 801a932:	681b      	ldr	r3, [r3, #0]
 801a934:	60fb      	str	r3, [r7, #12]
 801a936:	687b      	ldr	r3, [r7, #4]
 801a938:	681b      	ldr	r3, [r3, #0]
 801a93a:	681a      	ldr	r2, [r3, #0]
 801a93c:	687b      	ldr	r3, [r7, #4]
 801a93e:	681b      	ldr	r3, [r3, #0]
 801a940:	f022 0201 	bic.w	r2, r2, #1
 801a944:	601a      	str	r2, [r3, #0]
 801a946:	687b      	ldr	r3, [r7, #4]
 801a948:	681b      	ldr	r3, [r3, #0]
 801a94a:	689b      	ldr	r3, [r3, #8]
 801a94c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 801a950:	687b      	ldr	r3, [r7, #4]
 801a952:	681b      	ldr	r3, [r3, #0]
 801a954:	683a      	ldr	r2, [r7, #0]
 801a956:	430a      	orrs	r2, r1
 801a958:	609a      	str	r2, [r3, #8]
 801a95a:	6878      	ldr	r0, [r7, #4]
 801a95c:	f000 f850 	bl	801aa00 <UARTEx_SetNbDataToProcess>
 801a960:	687b      	ldr	r3, [r7, #4]
 801a962:	681b      	ldr	r3, [r3, #0]
 801a964:	68fa      	ldr	r2, [r7, #12]
 801a966:	601a      	str	r2, [r3, #0]
 801a968:	687b      	ldr	r3, [r7, #4]
 801a96a:	2220      	movs	r2, #32
 801a96c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 801a970:	687b      	ldr	r3, [r7, #4]
 801a972:	2200      	movs	r2, #0
 801a974:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
 801a978:	2300      	movs	r3, #0
 801a97a:	4618      	mov	r0, r3
 801a97c:	3710      	adds	r7, #16
 801a97e:	46bd      	mov	sp, r7
 801a980:	bd80      	pop	{r7, pc}

0801a982 <HAL_UARTEx_SetRxFifoThreshold>:
 801a982:	b580      	push	{r7, lr}
 801a984:	b084      	sub	sp, #16
 801a986:	af00      	add	r7, sp, #0
 801a988:	6078      	str	r0, [r7, #4]
 801a98a:	6039      	str	r1, [r7, #0]
 801a98c:	687b      	ldr	r3, [r7, #4]
 801a98e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801a992:	2b01      	cmp	r3, #1
 801a994:	d101      	bne.n	801a99a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 801a996:	2302      	movs	r3, #2
 801a998:	e02d      	b.n	801a9f6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 801a99a:	687b      	ldr	r3, [r7, #4]
 801a99c:	2201      	movs	r2, #1
 801a99e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
 801a9a2:	687b      	ldr	r3, [r7, #4]
 801a9a4:	2224      	movs	r2, #36	@ 0x24
 801a9a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 801a9aa:	687b      	ldr	r3, [r7, #4]
 801a9ac:	681b      	ldr	r3, [r3, #0]
 801a9ae:	681b      	ldr	r3, [r3, #0]
 801a9b0:	60fb      	str	r3, [r7, #12]
 801a9b2:	687b      	ldr	r3, [r7, #4]
 801a9b4:	681b      	ldr	r3, [r3, #0]
 801a9b6:	681a      	ldr	r2, [r3, #0]
 801a9b8:	687b      	ldr	r3, [r7, #4]
 801a9ba:	681b      	ldr	r3, [r3, #0]
 801a9bc:	f022 0201 	bic.w	r2, r2, #1
 801a9c0:	601a      	str	r2, [r3, #0]
 801a9c2:	687b      	ldr	r3, [r7, #4]
 801a9c4:	681b      	ldr	r3, [r3, #0]
 801a9c6:	689b      	ldr	r3, [r3, #8]
 801a9c8:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 801a9cc:	687b      	ldr	r3, [r7, #4]
 801a9ce:	681b      	ldr	r3, [r3, #0]
 801a9d0:	683a      	ldr	r2, [r7, #0]
 801a9d2:	430a      	orrs	r2, r1
 801a9d4:	609a      	str	r2, [r3, #8]
 801a9d6:	6878      	ldr	r0, [r7, #4]
 801a9d8:	f000 f812 	bl	801aa00 <UARTEx_SetNbDataToProcess>
 801a9dc:	687b      	ldr	r3, [r7, #4]
 801a9de:	681b      	ldr	r3, [r3, #0]
 801a9e0:	68fa      	ldr	r2, [r7, #12]
 801a9e2:	601a      	str	r2, [r3, #0]
 801a9e4:	687b      	ldr	r3, [r7, #4]
 801a9e6:	2220      	movs	r2, #32
 801a9e8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 801a9ec:	687b      	ldr	r3, [r7, #4]
 801a9ee:	2200      	movs	r2, #0
 801a9f0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
 801a9f4:	2300      	movs	r3, #0
 801a9f6:	4618      	mov	r0, r3
 801a9f8:	3710      	adds	r7, #16
 801a9fa:	46bd      	mov	sp, r7
 801a9fc:	bd80      	pop	{r7, pc}
	...

0801aa00 <UARTEx_SetNbDataToProcess>:
 801aa00:	b480      	push	{r7}
 801aa02:	b085      	sub	sp, #20
 801aa04:	af00      	add	r7, sp, #0
 801aa06:	6078      	str	r0, [r7, #4]
 801aa08:	687b      	ldr	r3, [r7, #4]
 801aa0a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801aa0c:	2b00      	cmp	r3, #0
 801aa0e:	d108      	bne.n	801aa22 <UARTEx_SetNbDataToProcess+0x22>
 801aa10:	687b      	ldr	r3, [r7, #4]
 801aa12:	2201      	movs	r2, #1
 801aa14:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 801aa18:	687b      	ldr	r3, [r7, #4]
 801aa1a:	2201      	movs	r2, #1
 801aa1c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 801aa20:	e031      	b.n	801aa86 <UARTEx_SetNbDataToProcess+0x86>
 801aa22:	2310      	movs	r3, #16
 801aa24:	73fb      	strb	r3, [r7, #15]
 801aa26:	2310      	movs	r3, #16
 801aa28:	73bb      	strb	r3, [r7, #14]
 801aa2a:	687b      	ldr	r3, [r7, #4]
 801aa2c:	681b      	ldr	r3, [r3, #0]
 801aa2e:	689b      	ldr	r3, [r3, #8]
 801aa30:	0e5b      	lsrs	r3, r3, #25
 801aa32:	b2db      	uxtb	r3, r3
 801aa34:	f003 0307 	and.w	r3, r3, #7
 801aa38:	737b      	strb	r3, [r7, #13]
 801aa3a:	687b      	ldr	r3, [r7, #4]
 801aa3c:	681b      	ldr	r3, [r3, #0]
 801aa3e:	689b      	ldr	r3, [r3, #8]
 801aa40:	0f5b      	lsrs	r3, r3, #29
 801aa42:	b2db      	uxtb	r3, r3
 801aa44:	f003 0307 	and.w	r3, r3, #7
 801aa48:	733b      	strb	r3, [r7, #12]
 801aa4a:	7bbb      	ldrb	r3, [r7, #14]
 801aa4c:	7b3a      	ldrb	r2, [r7, #12]
 801aa4e:	4911      	ldr	r1, [pc, #68]	@ (801aa94 <UARTEx_SetNbDataToProcess+0x94>)
 801aa50:	5c8a      	ldrb	r2, [r1, r2]
 801aa52:	fb02 f303 	mul.w	r3, r2, r3
 801aa56:	7b3a      	ldrb	r2, [r7, #12]
 801aa58:	490f      	ldr	r1, [pc, #60]	@ (801aa98 <UARTEx_SetNbDataToProcess+0x98>)
 801aa5a:	5c8a      	ldrb	r2, [r1, r2]
 801aa5c:	fb93 f3f2 	sdiv	r3, r3, r2
 801aa60:	b29a      	uxth	r2, r3
 801aa62:	687b      	ldr	r3, [r7, #4]
 801aa64:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 801aa68:	7bfb      	ldrb	r3, [r7, #15]
 801aa6a:	7b7a      	ldrb	r2, [r7, #13]
 801aa6c:	4909      	ldr	r1, [pc, #36]	@ (801aa94 <UARTEx_SetNbDataToProcess+0x94>)
 801aa6e:	5c8a      	ldrb	r2, [r1, r2]
 801aa70:	fb02 f303 	mul.w	r3, r2, r3
 801aa74:	7b7a      	ldrb	r2, [r7, #13]
 801aa76:	4908      	ldr	r1, [pc, #32]	@ (801aa98 <UARTEx_SetNbDataToProcess+0x98>)
 801aa78:	5c8a      	ldrb	r2, [r1, r2]
 801aa7a:	fb93 f3f2 	sdiv	r3, r3, r2
 801aa7e:	b29a      	uxth	r2, r3
 801aa80:	687b      	ldr	r3, [r7, #4]
 801aa82:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 801aa86:	bf00      	nop
 801aa88:	3714      	adds	r7, #20
 801aa8a:	46bd      	mov	sp, r7
 801aa8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aa90:	4770      	bx	lr
 801aa92:	bf00      	nop
 801aa94:	0801e8fc 	.word	0x0801e8fc
 801aa98:	0801e904 	.word	0x0801e904

0801aa9c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 801aa9c:	b580      	push	{r7, lr}
 801aa9e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 801aaa0:	4904      	ldr	r1, [pc, #16]	@ (801aab4 <MX_FATFS_Init+0x18>)
 801aaa2:	4805      	ldr	r0, [pc, #20]	@ (801aab8 <MX_FATFS_Init+0x1c>)
 801aaa4:	f003 f8d8 	bl	801dc58 <FATFS_LinkDriver>
 801aaa8:	4603      	mov	r3, r0
 801aaaa:	461a      	mov	r2, r3
 801aaac:	4b03      	ldr	r3, [pc, #12]	@ (801aabc <MX_FATFS_Init+0x20>)
 801aaae:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 801aab0:	bf00      	nop
 801aab2:	bd80      	pop	{r7, pc}
 801aab4:	2400054c 	.word	0x2400054c
 801aab8:	24000014 	.word	0x24000014
 801aabc:	24000548 	.word	0x24000548

0801aac0 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 801aac0:	b480      	push	{r7}
 801aac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 801aac4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 801aac6:	4618      	mov	r0, r3
 801aac8:	46bd      	mov	sp, r7
 801aaca:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aace:	4770      	bx	lr

0801aad0 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 801aad0:	b580      	push	{r7, lr}
 801aad2:	b082      	sub	sp, #8
 801aad4:	af00      	add	r7, sp, #0
 801aad6:	4603      	mov	r3, r0
 801aad8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 801aada:	79fb      	ldrb	r3, [r7, #7]
 801aadc:	4618      	mov	r0, r3
 801aade:	f7e9 fc09 	bl	80042f4 <SD_disk_initialize>
 801aae2:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 801aae4:	4618      	mov	r0, r3
 801aae6:	3708      	adds	r7, #8
 801aae8:	46bd      	mov	sp, r7
 801aaea:	bd80      	pop	{r7, pc}

0801aaec <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 801aaec:	b580      	push	{r7, lr}
 801aaee:	b082      	sub	sp, #8
 801aaf0:	af00      	add	r7, sp, #0
 801aaf2:	4603      	mov	r3, r0
 801aaf4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status(pdrv);
 801aaf6:	79fb      	ldrb	r3, [r7, #7]
 801aaf8:	4618      	mov	r0, r3
 801aafa:	f7e9 fce7 	bl	80044cc <SD_disk_status>
 801aafe:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 801ab00:	4618      	mov	r0, r3
 801ab02:	3708      	adds	r7, #8
 801ab04:	46bd      	mov	sp, r7
 801ab06:	bd80      	pop	{r7, pc}

0801ab08 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 801ab08:	b580      	push	{r7, lr}
 801ab0a:	b084      	sub	sp, #16
 801ab0c:	af00      	add	r7, sp, #0
 801ab0e:	60b9      	str	r1, [r7, #8]
 801ab10:	607a      	str	r2, [r7, #4]
 801ab12:	603b      	str	r3, [r7, #0]
 801ab14:	4603      	mov	r3, r0
 801ab16:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 801ab18:	7bf8      	ldrb	r0, [r7, #15]
 801ab1a:	683b      	ldr	r3, [r7, #0]
 801ab1c:	687a      	ldr	r2, [r7, #4]
 801ab1e:	68b9      	ldr	r1, [r7, #8]
 801ab20:	f7e9 fcea 	bl	80044f8 <SD_disk_read>
 801ab24:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 801ab26:	4618      	mov	r0, r3
 801ab28:	3710      	adds	r7, #16
 801ab2a:	46bd      	mov	sp, r7
 801ab2c:	bd80      	pop	{r7, pc}

0801ab2e <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 801ab2e:	b580      	push	{r7, lr}
 801ab30:	b084      	sub	sp, #16
 801ab32:	af00      	add	r7, sp, #0
 801ab34:	60b9      	str	r1, [r7, #8]
 801ab36:	607a      	str	r2, [r7, #4]
 801ab38:	603b      	str	r3, [r7, #0]
 801ab3a:	4603      	mov	r3, r0
 801ab3c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 801ab3e:	7bf8      	ldrb	r0, [r7, #15]
 801ab40:	683b      	ldr	r3, [r7, #0]
 801ab42:	687a      	ldr	r2, [r7, #4]
 801ab44:	68b9      	ldr	r1, [r7, #8]
 801ab46:	f7e9 fd41 	bl	80045cc <SD_disk_write>
 801ab4a:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 801ab4c:	4618      	mov	r0, r3
 801ab4e:	3710      	adds	r7, #16
 801ab50:	46bd      	mov	sp, r7
 801ab52:	bd80      	pop	{r7, pc}

0801ab54 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 801ab54:	b580      	push	{r7, lr}
 801ab56:	b082      	sub	sp, #8
 801ab58:	af00      	add	r7, sp, #0
 801ab5a:	4603      	mov	r3, r0
 801ab5c:	603a      	str	r2, [r7, #0]
 801ab5e:	71fb      	strb	r3, [r7, #7]
 801ab60:	460b      	mov	r3, r1
 801ab62:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */

    return SD_disk_ioctl(pdrv, cmd, buff);
 801ab64:	79b9      	ldrb	r1, [r7, #6]
 801ab66:	79fb      	ldrb	r3, [r7, #7]
 801ab68:	683a      	ldr	r2, [r7, #0]
 801ab6a:	4618      	mov	r0, r3
 801ab6c:	f7e9 fdb2 	bl	80046d4 <SD_disk_ioctl>
 801ab70:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 801ab72:	4618      	mov	r0, r3
 801ab74:	3708      	adds	r7, #8
 801ab76:	46bd      	mov	sp, r7
 801ab78:	bd80      	pop	{r7, pc}
	...

0801ab7c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 801ab7c:	b580      	push	{r7, lr}
 801ab7e:	b084      	sub	sp, #16
 801ab80:	af00      	add	r7, sp, #0
 801ab82:	4603      	mov	r3, r0
 801ab84:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 801ab86:	79fb      	ldrb	r3, [r7, #7]
 801ab88:	4a08      	ldr	r2, [pc, #32]	@ (801abac <disk_status+0x30>)
 801ab8a:	009b      	lsls	r3, r3, #2
 801ab8c:	4413      	add	r3, r2
 801ab8e:	685b      	ldr	r3, [r3, #4]
 801ab90:	685b      	ldr	r3, [r3, #4]
 801ab92:	79fa      	ldrb	r2, [r7, #7]
 801ab94:	4905      	ldr	r1, [pc, #20]	@ (801abac <disk_status+0x30>)
 801ab96:	440a      	add	r2, r1
 801ab98:	7a12      	ldrb	r2, [r2, #8]
 801ab9a:	4610      	mov	r0, r2
 801ab9c:	4798      	blx	r3
 801ab9e:	4603      	mov	r3, r0
 801aba0:	73fb      	strb	r3, [r7, #15]
  return stat;
 801aba2:	7bfb      	ldrb	r3, [r7, #15]
}
 801aba4:	4618      	mov	r0, r3
 801aba6:	3710      	adds	r7, #16
 801aba8:	46bd      	mov	sp, r7
 801abaa:	bd80      	pop	{r7, pc}
 801abac:	24000768 	.word	0x24000768

0801abb0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 801abb0:	b580      	push	{r7, lr}
 801abb2:	b084      	sub	sp, #16
 801abb4:	af00      	add	r7, sp, #0
 801abb6:	4603      	mov	r3, r0
 801abb8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 801abba:	2300      	movs	r3, #0
 801abbc:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 801abbe:	79fb      	ldrb	r3, [r7, #7]
 801abc0:	4a0e      	ldr	r2, [pc, #56]	@ (801abfc <disk_initialize+0x4c>)
 801abc2:	5cd3      	ldrb	r3, [r2, r3]
 801abc4:	2b00      	cmp	r3, #0
 801abc6:	d114      	bne.n	801abf2 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 801abc8:	79fb      	ldrb	r3, [r7, #7]
 801abca:	4a0c      	ldr	r2, [pc, #48]	@ (801abfc <disk_initialize+0x4c>)
 801abcc:	009b      	lsls	r3, r3, #2
 801abce:	4413      	add	r3, r2
 801abd0:	685b      	ldr	r3, [r3, #4]
 801abd2:	681b      	ldr	r3, [r3, #0]
 801abd4:	79fa      	ldrb	r2, [r7, #7]
 801abd6:	4909      	ldr	r1, [pc, #36]	@ (801abfc <disk_initialize+0x4c>)
 801abd8:	440a      	add	r2, r1
 801abda:	7a12      	ldrb	r2, [r2, #8]
 801abdc:	4610      	mov	r0, r2
 801abde:	4798      	blx	r3
 801abe0:	4603      	mov	r3, r0
 801abe2:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 801abe4:	7bfb      	ldrb	r3, [r7, #15]
 801abe6:	2b00      	cmp	r3, #0
 801abe8:	d103      	bne.n	801abf2 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 801abea:	79fb      	ldrb	r3, [r7, #7]
 801abec:	4a03      	ldr	r2, [pc, #12]	@ (801abfc <disk_initialize+0x4c>)
 801abee:	2101      	movs	r1, #1
 801abf0:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 801abf2:	7bfb      	ldrb	r3, [r7, #15]
}
 801abf4:	4618      	mov	r0, r3
 801abf6:	3710      	adds	r7, #16
 801abf8:	46bd      	mov	sp, r7
 801abfa:	bd80      	pop	{r7, pc}
 801abfc:	24000768 	.word	0x24000768

0801ac00 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 801ac00:	b590      	push	{r4, r7, lr}
 801ac02:	b087      	sub	sp, #28
 801ac04:	af00      	add	r7, sp, #0
 801ac06:	60b9      	str	r1, [r7, #8]
 801ac08:	607a      	str	r2, [r7, #4]
 801ac0a:	603b      	str	r3, [r7, #0]
 801ac0c:	4603      	mov	r3, r0
 801ac0e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 801ac10:	7bfb      	ldrb	r3, [r7, #15]
 801ac12:	4a0a      	ldr	r2, [pc, #40]	@ (801ac3c <disk_read+0x3c>)
 801ac14:	009b      	lsls	r3, r3, #2
 801ac16:	4413      	add	r3, r2
 801ac18:	685b      	ldr	r3, [r3, #4]
 801ac1a:	689c      	ldr	r4, [r3, #8]
 801ac1c:	7bfb      	ldrb	r3, [r7, #15]
 801ac1e:	4a07      	ldr	r2, [pc, #28]	@ (801ac3c <disk_read+0x3c>)
 801ac20:	4413      	add	r3, r2
 801ac22:	7a18      	ldrb	r0, [r3, #8]
 801ac24:	683b      	ldr	r3, [r7, #0]
 801ac26:	687a      	ldr	r2, [r7, #4]
 801ac28:	68b9      	ldr	r1, [r7, #8]
 801ac2a:	47a0      	blx	r4
 801ac2c:	4603      	mov	r3, r0
 801ac2e:	75fb      	strb	r3, [r7, #23]
  return res;
 801ac30:	7dfb      	ldrb	r3, [r7, #23]
}
 801ac32:	4618      	mov	r0, r3
 801ac34:	371c      	adds	r7, #28
 801ac36:	46bd      	mov	sp, r7
 801ac38:	bd90      	pop	{r4, r7, pc}
 801ac3a:	bf00      	nop
 801ac3c:	24000768 	.word	0x24000768

0801ac40 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 801ac40:	b590      	push	{r4, r7, lr}
 801ac42:	b087      	sub	sp, #28
 801ac44:	af00      	add	r7, sp, #0
 801ac46:	60b9      	str	r1, [r7, #8]
 801ac48:	607a      	str	r2, [r7, #4]
 801ac4a:	603b      	str	r3, [r7, #0]
 801ac4c:	4603      	mov	r3, r0
 801ac4e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 801ac50:	7bfb      	ldrb	r3, [r7, #15]
 801ac52:	4a0a      	ldr	r2, [pc, #40]	@ (801ac7c <disk_write+0x3c>)
 801ac54:	009b      	lsls	r3, r3, #2
 801ac56:	4413      	add	r3, r2
 801ac58:	685b      	ldr	r3, [r3, #4]
 801ac5a:	68dc      	ldr	r4, [r3, #12]
 801ac5c:	7bfb      	ldrb	r3, [r7, #15]
 801ac5e:	4a07      	ldr	r2, [pc, #28]	@ (801ac7c <disk_write+0x3c>)
 801ac60:	4413      	add	r3, r2
 801ac62:	7a18      	ldrb	r0, [r3, #8]
 801ac64:	683b      	ldr	r3, [r7, #0]
 801ac66:	687a      	ldr	r2, [r7, #4]
 801ac68:	68b9      	ldr	r1, [r7, #8]
 801ac6a:	47a0      	blx	r4
 801ac6c:	4603      	mov	r3, r0
 801ac6e:	75fb      	strb	r3, [r7, #23]
  return res;
 801ac70:	7dfb      	ldrb	r3, [r7, #23]
}
 801ac72:	4618      	mov	r0, r3
 801ac74:	371c      	adds	r7, #28
 801ac76:	46bd      	mov	sp, r7
 801ac78:	bd90      	pop	{r4, r7, pc}
 801ac7a:	bf00      	nop
 801ac7c:	24000768 	.word	0x24000768

0801ac80 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 801ac80:	b580      	push	{r7, lr}
 801ac82:	b084      	sub	sp, #16
 801ac84:	af00      	add	r7, sp, #0
 801ac86:	4603      	mov	r3, r0
 801ac88:	603a      	str	r2, [r7, #0]
 801ac8a:	71fb      	strb	r3, [r7, #7]
 801ac8c:	460b      	mov	r3, r1
 801ac8e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 801ac90:	79fb      	ldrb	r3, [r7, #7]
 801ac92:	4a09      	ldr	r2, [pc, #36]	@ (801acb8 <disk_ioctl+0x38>)
 801ac94:	009b      	lsls	r3, r3, #2
 801ac96:	4413      	add	r3, r2
 801ac98:	685b      	ldr	r3, [r3, #4]
 801ac9a:	691b      	ldr	r3, [r3, #16]
 801ac9c:	79fa      	ldrb	r2, [r7, #7]
 801ac9e:	4906      	ldr	r1, [pc, #24]	@ (801acb8 <disk_ioctl+0x38>)
 801aca0:	440a      	add	r2, r1
 801aca2:	7a10      	ldrb	r0, [r2, #8]
 801aca4:	79b9      	ldrb	r1, [r7, #6]
 801aca6:	683a      	ldr	r2, [r7, #0]
 801aca8:	4798      	blx	r3
 801acaa:	4603      	mov	r3, r0
 801acac:	73fb      	strb	r3, [r7, #15]
  return res;
 801acae:	7bfb      	ldrb	r3, [r7, #15]
}
 801acb0:	4618      	mov	r0, r3
 801acb2:	3710      	adds	r7, #16
 801acb4:	46bd      	mov	sp, r7
 801acb6:	bd80      	pop	{r7, pc}
 801acb8:	24000768 	.word	0x24000768

0801acbc <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 801acbc:	b480      	push	{r7}
 801acbe:	b085      	sub	sp, #20
 801acc0:	af00      	add	r7, sp, #0
 801acc2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 801acc4:	687b      	ldr	r3, [r7, #4]
 801acc6:	3301      	adds	r3, #1
 801acc8:	781b      	ldrb	r3, [r3, #0]
 801acca:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 801accc:	89fb      	ldrh	r3, [r7, #14]
 801acce:	021b      	lsls	r3, r3, #8
 801acd0:	b21a      	sxth	r2, r3
 801acd2:	687b      	ldr	r3, [r7, #4]
 801acd4:	781b      	ldrb	r3, [r3, #0]
 801acd6:	b21b      	sxth	r3, r3
 801acd8:	4313      	orrs	r3, r2
 801acda:	b21b      	sxth	r3, r3
 801acdc:	81fb      	strh	r3, [r7, #14]
	return rv;
 801acde:	89fb      	ldrh	r3, [r7, #14]
}
 801ace0:	4618      	mov	r0, r3
 801ace2:	3714      	adds	r7, #20
 801ace4:	46bd      	mov	sp, r7
 801ace6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801acea:	4770      	bx	lr

0801acec <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 801acec:	b480      	push	{r7}
 801acee:	b085      	sub	sp, #20
 801acf0:	af00      	add	r7, sp, #0
 801acf2:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 801acf4:	687b      	ldr	r3, [r7, #4]
 801acf6:	3303      	adds	r3, #3
 801acf8:	781b      	ldrb	r3, [r3, #0]
 801acfa:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 801acfc:	68fb      	ldr	r3, [r7, #12]
 801acfe:	021b      	lsls	r3, r3, #8
 801ad00:	687a      	ldr	r2, [r7, #4]
 801ad02:	3202      	adds	r2, #2
 801ad04:	7812      	ldrb	r2, [r2, #0]
 801ad06:	4313      	orrs	r3, r2
 801ad08:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 801ad0a:	68fb      	ldr	r3, [r7, #12]
 801ad0c:	021b      	lsls	r3, r3, #8
 801ad0e:	687a      	ldr	r2, [r7, #4]
 801ad10:	3201      	adds	r2, #1
 801ad12:	7812      	ldrb	r2, [r2, #0]
 801ad14:	4313      	orrs	r3, r2
 801ad16:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 801ad18:	68fb      	ldr	r3, [r7, #12]
 801ad1a:	021b      	lsls	r3, r3, #8
 801ad1c:	687a      	ldr	r2, [r7, #4]
 801ad1e:	7812      	ldrb	r2, [r2, #0]
 801ad20:	4313      	orrs	r3, r2
 801ad22:	60fb      	str	r3, [r7, #12]
	return rv;
 801ad24:	68fb      	ldr	r3, [r7, #12]
}
 801ad26:	4618      	mov	r0, r3
 801ad28:	3714      	adds	r7, #20
 801ad2a:	46bd      	mov	sp, r7
 801ad2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ad30:	4770      	bx	lr

0801ad32 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 801ad32:	b480      	push	{r7}
 801ad34:	b083      	sub	sp, #12
 801ad36:	af00      	add	r7, sp, #0
 801ad38:	6078      	str	r0, [r7, #4]
 801ad3a:	460b      	mov	r3, r1
 801ad3c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 801ad3e:	687b      	ldr	r3, [r7, #4]
 801ad40:	1c5a      	adds	r2, r3, #1
 801ad42:	607a      	str	r2, [r7, #4]
 801ad44:	887a      	ldrh	r2, [r7, #2]
 801ad46:	b2d2      	uxtb	r2, r2
 801ad48:	701a      	strb	r2, [r3, #0]
 801ad4a:	887b      	ldrh	r3, [r7, #2]
 801ad4c:	0a1b      	lsrs	r3, r3, #8
 801ad4e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 801ad50:	687b      	ldr	r3, [r7, #4]
 801ad52:	1c5a      	adds	r2, r3, #1
 801ad54:	607a      	str	r2, [r7, #4]
 801ad56:	887a      	ldrh	r2, [r7, #2]
 801ad58:	b2d2      	uxtb	r2, r2
 801ad5a:	701a      	strb	r2, [r3, #0]
}
 801ad5c:	bf00      	nop
 801ad5e:	370c      	adds	r7, #12
 801ad60:	46bd      	mov	sp, r7
 801ad62:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ad66:	4770      	bx	lr

0801ad68 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 801ad68:	b480      	push	{r7}
 801ad6a:	b083      	sub	sp, #12
 801ad6c:	af00      	add	r7, sp, #0
 801ad6e:	6078      	str	r0, [r7, #4]
 801ad70:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801ad72:	687b      	ldr	r3, [r7, #4]
 801ad74:	1c5a      	adds	r2, r3, #1
 801ad76:	607a      	str	r2, [r7, #4]
 801ad78:	683a      	ldr	r2, [r7, #0]
 801ad7a:	b2d2      	uxtb	r2, r2
 801ad7c:	701a      	strb	r2, [r3, #0]
 801ad7e:	683b      	ldr	r3, [r7, #0]
 801ad80:	0a1b      	lsrs	r3, r3, #8
 801ad82:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801ad84:	687b      	ldr	r3, [r7, #4]
 801ad86:	1c5a      	adds	r2, r3, #1
 801ad88:	607a      	str	r2, [r7, #4]
 801ad8a:	683a      	ldr	r2, [r7, #0]
 801ad8c:	b2d2      	uxtb	r2, r2
 801ad8e:	701a      	strb	r2, [r3, #0]
 801ad90:	683b      	ldr	r3, [r7, #0]
 801ad92:	0a1b      	lsrs	r3, r3, #8
 801ad94:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801ad96:	687b      	ldr	r3, [r7, #4]
 801ad98:	1c5a      	adds	r2, r3, #1
 801ad9a:	607a      	str	r2, [r7, #4]
 801ad9c:	683a      	ldr	r2, [r7, #0]
 801ad9e:	b2d2      	uxtb	r2, r2
 801ada0:	701a      	strb	r2, [r3, #0]
 801ada2:	683b      	ldr	r3, [r7, #0]
 801ada4:	0a1b      	lsrs	r3, r3, #8
 801ada6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 801ada8:	687b      	ldr	r3, [r7, #4]
 801adaa:	1c5a      	adds	r2, r3, #1
 801adac:	607a      	str	r2, [r7, #4]
 801adae:	683a      	ldr	r2, [r7, #0]
 801adb0:	b2d2      	uxtb	r2, r2
 801adb2:	701a      	strb	r2, [r3, #0]
}
 801adb4:	bf00      	nop
 801adb6:	370c      	adds	r7, #12
 801adb8:	46bd      	mov	sp, r7
 801adba:	f85d 7b04 	ldr.w	r7, [sp], #4
 801adbe:	4770      	bx	lr

0801adc0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 801adc0:	b480      	push	{r7}
 801adc2:	b087      	sub	sp, #28
 801adc4:	af00      	add	r7, sp, #0
 801adc6:	60f8      	str	r0, [r7, #12]
 801adc8:	60b9      	str	r1, [r7, #8]
 801adca:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 801adcc:	68fb      	ldr	r3, [r7, #12]
 801adce:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 801add0:	68bb      	ldr	r3, [r7, #8]
 801add2:	613b      	str	r3, [r7, #16]

	if (cnt) {
 801add4:	687b      	ldr	r3, [r7, #4]
 801add6:	2b00      	cmp	r3, #0
 801add8:	d00d      	beq.n	801adf6 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 801adda:	693a      	ldr	r2, [r7, #16]
 801addc:	1c53      	adds	r3, r2, #1
 801adde:	613b      	str	r3, [r7, #16]
 801ade0:	697b      	ldr	r3, [r7, #20]
 801ade2:	1c59      	adds	r1, r3, #1
 801ade4:	6179      	str	r1, [r7, #20]
 801ade6:	7812      	ldrb	r2, [r2, #0]
 801ade8:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 801adea:	687b      	ldr	r3, [r7, #4]
 801adec:	3b01      	subs	r3, #1
 801adee:	607b      	str	r3, [r7, #4]
 801adf0:	687b      	ldr	r3, [r7, #4]
 801adf2:	2b00      	cmp	r3, #0
 801adf4:	d1f1      	bne.n	801adda <mem_cpy+0x1a>
	}
}
 801adf6:	bf00      	nop
 801adf8:	371c      	adds	r7, #28
 801adfa:	46bd      	mov	sp, r7
 801adfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ae00:	4770      	bx	lr

0801ae02 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 801ae02:	b480      	push	{r7}
 801ae04:	b087      	sub	sp, #28
 801ae06:	af00      	add	r7, sp, #0
 801ae08:	60f8      	str	r0, [r7, #12]
 801ae0a:	60b9      	str	r1, [r7, #8]
 801ae0c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 801ae0e:	68fb      	ldr	r3, [r7, #12]
 801ae10:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 801ae12:	697b      	ldr	r3, [r7, #20]
 801ae14:	1c5a      	adds	r2, r3, #1
 801ae16:	617a      	str	r2, [r7, #20]
 801ae18:	68ba      	ldr	r2, [r7, #8]
 801ae1a:	b2d2      	uxtb	r2, r2
 801ae1c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 801ae1e:	687b      	ldr	r3, [r7, #4]
 801ae20:	3b01      	subs	r3, #1
 801ae22:	607b      	str	r3, [r7, #4]
 801ae24:	687b      	ldr	r3, [r7, #4]
 801ae26:	2b00      	cmp	r3, #0
 801ae28:	d1f3      	bne.n	801ae12 <mem_set+0x10>
}
 801ae2a:	bf00      	nop
 801ae2c:	bf00      	nop
 801ae2e:	371c      	adds	r7, #28
 801ae30:	46bd      	mov	sp, r7
 801ae32:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ae36:	4770      	bx	lr

0801ae38 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 801ae38:	b480      	push	{r7}
 801ae3a:	b089      	sub	sp, #36	@ 0x24
 801ae3c:	af00      	add	r7, sp, #0
 801ae3e:	60f8      	str	r0, [r7, #12]
 801ae40:	60b9      	str	r1, [r7, #8]
 801ae42:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 801ae44:	68fb      	ldr	r3, [r7, #12]
 801ae46:	61fb      	str	r3, [r7, #28]
 801ae48:	68bb      	ldr	r3, [r7, #8]
 801ae4a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 801ae4c:	2300      	movs	r3, #0
 801ae4e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 801ae50:	69fb      	ldr	r3, [r7, #28]
 801ae52:	1c5a      	adds	r2, r3, #1
 801ae54:	61fa      	str	r2, [r7, #28]
 801ae56:	781b      	ldrb	r3, [r3, #0]
 801ae58:	4619      	mov	r1, r3
 801ae5a:	69bb      	ldr	r3, [r7, #24]
 801ae5c:	1c5a      	adds	r2, r3, #1
 801ae5e:	61ba      	str	r2, [r7, #24]
 801ae60:	781b      	ldrb	r3, [r3, #0]
 801ae62:	1acb      	subs	r3, r1, r3
 801ae64:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 801ae66:	687b      	ldr	r3, [r7, #4]
 801ae68:	3b01      	subs	r3, #1
 801ae6a:	607b      	str	r3, [r7, #4]
 801ae6c:	687b      	ldr	r3, [r7, #4]
 801ae6e:	2b00      	cmp	r3, #0
 801ae70:	d002      	beq.n	801ae78 <mem_cmp+0x40>
 801ae72:	697b      	ldr	r3, [r7, #20]
 801ae74:	2b00      	cmp	r3, #0
 801ae76:	d0eb      	beq.n	801ae50 <mem_cmp+0x18>

	return r;
 801ae78:	697b      	ldr	r3, [r7, #20]
}
 801ae7a:	4618      	mov	r0, r3
 801ae7c:	3724      	adds	r7, #36	@ 0x24
 801ae7e:	46bd      	mov	sp, r7
 801ae80:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ae84:	4770      	bx	lr

0801ae86 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 801ae86:	b480      	push	{r7}
 801ae88:	b083      	sub	sp, #12
 801ae8a:	af00      	add	r7, sp, #0
 801ae8c:	6078      	str	r0, [r7, #4]
 801ae8e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 801ae90:	e002      	b.n	801ae98 <chk_chr+0x12>
 801ae92:	687b      	ldr	r3, [r7, #4]
 801ae94:	3301      	adds	r3, #1
 801ae96:	607b      	str	r3, [r7, #4]
 801ae98:	687b      	ldr	r3, [r7, #4]
 801ae9a:	781b      	ldrb	r3, [r3, #0]
 801ae9c:	2b00      	cmp	r3, #0
 801ae9e:	d005      	beq.n	801aeac <chk_chr+0x26>
 801aea0:	687b      	ldr	r3, [r7, #4]
 801aea2:	781b      	ldrb	r3, [r3, #0]
 801aea4:	461a      	mov	r2, r3
 801aea6:	683b      	ldr	r3, [r7, #0]
 801aea8:	4293      	cmp	r3, r2
 801aeaa:	d1f2      	bne.n	801ae92 <chk_chr+0xc>
	return *str;
 801aeac:	687b      	ldr	r3, [r7, #4]
 801aeae:	781b      	ldrb	r3, [r3, #0]
}
 801aeb0:	4618      	mov	r0, r3
 801aeb2:	370c      	adds	r7, #12
 801aeb4:	46bd      	mov	sp, r7
 801aeb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aeba:	4770      	bx	lr

0801aebc <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 801aebc:	b480      	push	{r7}
 801aebe:	b085      	sub	sp, #20
 801aec0:	af00      	add	r7, sp, #0
 801aec2:	6078      	str	r0, [r7, #4]
 801aec4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 801aec6:	2300      	movs	r3, #0
 801aec8:	60bb      	str	r3, [r7, #8]
 801aeca:	68bb      	ldr	r3, [r7, #8]
 801aecc:	60fb      	str	r3, [r7, #12]
 801aece:	e029      	b.n	801af24 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 801aed0:	4a27      	ldr	r2, [pc, #156]	@ (801af70 <chk_lock+0xb4>)
 801aed2:	68fb      	ldr	r3, [r7, #12]
 801aed4:	011b      	lsls	r3, r3, #4
 801aed6:	4413      	add	r3, r2
 801aed8:	681b      	ldr	r3, [r3, #0]
 801aeda:	2b00      	cmp	r3, #0
 801aedc:	d01d      	beq.n	801af1a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801aede:	4a24      	ldr	r2, [pc, #144]	@ (801af70 <chk_lock+0xb4>)
 801aee0:	68fb      	ldr	r3, [r7, #12]
 801aee2:	011b      	lsls	r3, r3, #4
 801aee4:	4413      	add	r3, r2
 801aee6:	681a      	ldr	r2, [r3, #0]
 801aee8:	687b      	ldr	r3, [r7, #4]
 801aeea:	681b      	ldr	r3, [r3, #0]
 801aeec:	429a      	cmp	r2, r3
 801aeee:	d116      	bne.n	801af1e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 801aef0:	4a1f      	ldr	r2, [pc, #124]	@ (801af70 <chk_lock+0xb4>)
 801aef2:	68fb      	ldr	r3, [r7, #12]
 801aef4:	011b      	lsls	r3, r3, #4
 801aef6:	4413      	add	r3, r2
 801aef8:	3304      	adds	r3, #4
 801aefa:	681a      	ldr	r2, [r3, #0]
 801aefc:	687b      	ldr	r3, [r7, #4]
 801aefe:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801af00:	429a      	cmp	r2, r3
 801af02:	d10c      	bne.n	801af1e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 801af04:	4a1a      	ldr	r2, [pc, #104]	@ (801af70 <chk_lock+0xb4>)
 801af06:	68fb      	ldr	r3, [r7, #12]
 801af08:	011b      	lsls	r3, r3, #4
 801af0a:	4413      	add	r3, r2
 801af0c:	3308      	adds	r3, #8
 801af0e:	681a      	ldr	r2, [r3, #0]
 801af10:	687b      	ldr	r3, [r7, #4]
 801af12:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 801af14:	429a      	cmp	r2, r3
 801af16:	d102      	bne.n	801af1e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 801af18:	e007      	b.n	801af2a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 801af1a:	2301      	movs	r3, #1
 801af1c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 801af1e:	68fb      	ldr	r3, [r7, #12]
 801af20:	3301      	adds	r3, #1
 801af22:	60fb      	str	r3, [r7, #12]
 801af24:	68fb      	ldr	r3, [r7, #12]
 801af26:	2b00      	cmp	r3, #0
 801af28:	d0d2      	beq.n	801aed0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 801af2a:	68fb      	ldr	r3, [r7, #12]
 801af2c:	2b01      	cmp	r3, #1
 801af2e:	d109      	bne.n	801af44 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 801af30:	68bb      	ldr	r3, [r7, #8]
 801af32:	2b00      	cmp	r3, #0
 801af34:	d102      	bne.n	801af3c <chk_lock+0x80>
 801af36:	683b      	ldr	r3, [r7, #0]
 801af38:	2b02      	cmp	r3, #2
 801af3a:	d101      	bne.n	801af40 <chk_lock+0x84>
 801af3c:	2300      	movs	r3, #0
 801af3e:	e010      	b.n	801af62 <chk_lock+0xa6>
 801af40:	2312      	movs	r3, #18
 801af42:	e00e      	b.n	801af62 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 801af44:	683b      	ldr	r3, [r7, #0]
 801af46:	2b00      	cmp	r3, #0
 801af48:	d108      	bne.n	801af5c <chk_lock+0xa0>
 801af4a:	4a09      	ldr	r2, [pc, #36]	@ (801af70 <chk_lock+0xb4>)
 801af4c:	68fb      	ldr	r3, [r7, #12]
 801af4e:	011b      	lsls	r3, r3, #4
 801af50:	4413      	add	r3, r2
 801af52:	330c      	adds	r3, #12
 801af54:	881b      	ldrh	r3, [r3, #0]
 801af56:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801af5a:	d101      	bne.n	801af60 <chk_lock+0xa4>
 801af5c:	2310      	movs	r3, #16
 801af5e:	e000      	b.n	801af62 <chk_lock+0xa6>
 801af60:	2300      	movs	r3, #0
}
 801af62:	4618      	mov	r0, r3
 801af64:	3714      	adds	r7, #20
 801af66:	46bd      	mov	sp, r7
 801af68:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af6c:	4770      	bx	lr
 801af6e:	bf00      	nop
 801af70:	24000558 	.word	0x24000558

0801af74 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 801af74:	b480      	push	{r7}
 801af76:	b083      	sub	sp, #12
 801af78:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801af7a:	2300      	movs	r3, #0
 801af7c:	607b      	str	r3, [r7, #4]
 801af7e:	e002      	b.n	801af86 <enq_lock+0x12>
 801af80:	687b      	ldr	r3, [r7, #4]
 801af82:	3301      	adds	r3, #1
 801af84:	607b      	str	r3, [r7, #4]
 801af86:	687b      	ldr	r3, [r7, #4]
 801af88:	2b00      	cmp	r3, #0
 801af8a:	d106      	bne.n	801af9a <enq_lock+0x26>
 801af8c:	4a09      	ldr	r2, [pc, #36]	@ (801afb4 <enq_lock+0x40>)
 801af8e:	687b      	ldr	r3, [r7, #4]
 801af90:	011b      	lsls	r3, r3, #4
 801af92:	4413      	add	r3, r2
 801af94:	681b      	ldr	r3, [r3, #0]
 801af96:	2b00      	cmp	r3, #0
 801af98:	d1f2      	bne.n	801af80 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 801af9a:	687b      	ldr	r3, [r7, #4]
 801af9c:	2b01      	cmp	r3, #1
 801af9e:	bf14      	ite	ne
 801afa0:	2301      	movne	r3, #1
 801afa2:	2300      	moveq	r3, #0
 801afa4:	b2db      	uxtb	r3, r3
}
 801afa6:	4618      	mov	r0, r3
 801afa8:	370c      	adds	r7, #12
 801afaa:	46bd      	mov	sp, r7
 801afac:	f85d 7b04 	ldr.w	r7, [sp], #4
 801afb0:	4770      	bx	lr
 801afb2:	bf00      	nop
 801afb4:	24000558 	.word	0x24000558

0801afb8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 801afb8:	b480      	push	{r7}
 801afba:	b085      	sub	sp, #20
 801afbc:	af00      	add	r7, sp, #0
 801afbe:	6078      	str	r0, [r7, #4]
 801afc0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801afc2:	2300      	movs	r3, #0
 801afc4:	60fb      	str	r3, [r7, #12]
 801afc6:	e01f      	b.n	801b008 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 801afc8:	4a41      	ldr	r2, [pc, #260]	@ (801b0d0 <inc_lock+0x118>)
 801afca:	68fb      	ldr	r3, [r7, #12]
 801afcc:	011b      	lsls	r3, r3, #4
 801afce:	4413      	add	r3, r2
 801afd0:	681a      	ldr	r2, [r3, #0]
 801afd2:	687b      	ldr	r3, [r7, #4]
 801afd4:	681b      	ldr	r3, [r3, #0]
 801afd6:	429a      	cmp	r2, r3
 801afd8:	d113      	bne.n	801b002 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 801afda:	4a3d      	ldr	r2, [pc, #244]	@ (801b0d0 <inc_lock+0x118>)
 801afdc:	68fb      	ldr	r3, [r7, #12]
 801afde:	011b      	lsls	r3, r3, #4
 801afe0:	4413      	add	r3, r2
 801afe2:	3304      	adds	r3, #4
 801afe4:	681a      	ldr	r2, [r3, #0]
 801afe6:	687b      	ldr	r3, [r7, #4]
 801afe8:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 801afea:	429a      	cmp	r2, r3
 801afec:	d109      	bne.n	801b002 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 801afee:	4a38      	ldr	r2, [pc, #224]	@ (801b0d0 <inc_lock+0x118>)
 801aff0:	68fb      	ldr	r3, [r7, #12]
 801aff2:	011b      	lsls	r3, r3, #4
 801aff4:	4413      	add	r3, r2
 801aff6:	3308      	adds	r3, #8
 801aff8:	681a      	ldr	r2, [r3, #0]
 801affa:	687b      	ldr	r3, [r7, #4]
 801affc:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 801affe:	429a      	cmp	r2, r3
 801b000:	d006      	beq.n	801b010 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801b002:	68fb      	ldr	r3, [r7, #12]
 801b004:	3301      	adds	r3, #1
 801b006:	60fb      	str	r3, [r7, #12]
 801b008:	68fb      	ldr	r3, [r7, #12]
 801b00a:	2b00      	cmp	r3, #0
 801b00c:	d0dc      	beq.n	801afc8 <inc_lock+0x10>
 801b00e:	e000      	b.n	801b012 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 801b010:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 801b012:	68fb      	ldr	r3, [r7, #12]
 801b014:	2b01      	cmp	r3, #1
 801b016:	d132      	bne.n	801b07e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801b018:	2300      	movs	r3, #0
 801b01a:	60fb      	str	r3, [r7, #12]
 801b01c:	e002      	b.n	801b024 <inc_lock+0x6c>
 801b01e:	68fb      	ldr	r3, [r7, #12]
 801b020:	3301      	adds	r3, #1
 801b022:	60fb      	str	r3, [r7, #12]
 801b024:	68fb      	ldr	r3, [r7, #12]
 801b026:	2b00      	cmp	r3, #0
 801b028:	d106      	bne.n	801b038 <inc_lock+0x80>
 801b02a:	4a29      	ldr	r2, [pc, #164]	@ (801b0d0 <inc_lock+0x118>)
 801b02c:	68fb      	ldr	r3, [r7, #12]
 801b02e:	011b      	lsls	r3, r3, #4
 801b030:	4413      	add	r3, r2
 801b032:	681b      	ldr	r3, [r3, #0]
 801b034:	2b00      	cmp	r3, #0
 801b036:	d1f2      	bne.n	801b01e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 801b038:	68fb      	ldr	r3, [r7, #12]
 801b03a:	2b01      	cmp	r3, #1
 801b03c:	d101      	bne.n	801b042 <inc_lock+0x8a>
 801b03e:	2300      	movs	r3, #0
 801b040:	e040      	b.n	801b0c4 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 801b042:	687b      	ldr	r3, [r7, #4]
 801b044:	681a      	ldr	r2, [r3, #0]
 801b046:	4922      	ldr	r1, [pc, #136]	@ (801b0d0 <inc_lock+0x118>)
 801b048:	68fb      	ldr	r3, [r7, #12]
 801b04a:	011b      	lsls	r3, r3, #4
 801b04c:	440b      	add	r3, r1
 801b04e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 801b050:	687b      	ldr	r3, [r7, #4]
 801b052:	689a      	ldr	r2, [r3, #8]
 801b054:	491e      	ldr	r1, [pc, #120]	@ (801b0d0 <inc_lock+0x118>)
 801b056:	68fb      	ldr	r3, [r7, #12]
 801b058:	011b      	lsls	r3, r3, #4
 801b05a:	440b      	add	r3, r1
 801b05c:	3304      	adds	r3, #4
 801b05e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 801b060:	687b      	ldr	r3, [r7, #4]
 801b062:	695a      	ldr	r2, [r3, #20]
 801b064:	491a      	ldr	r1, [pc, #104]	@ (801b0d0 <inc_lock+0x118>)
 801b066:	68fb      	ldr	r3, [r7, #12]
 801b068:	011b      	lsls	r3, r3, #4
 801b06a:	440b      	add	r3, r1
 801b06c:	3308      	adds	r3, #8
 801b06e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 801b070:	4a17      	ldr	r2, [pc, #92]	@ (801b0d0 <inc_lock+0x118>)
 801b072:	68fb      	ldr	r3, [r7, #12]
 801b074:	011b      	lsls	r3, r3, #4
 801b076:	4413      	add	r3, r2
 801b078:	330c      	adds	r3, #12
 801b07a:	2200      	movs	r2, #0
 801b07c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 801b07e:	683b      	ldr	r3, [r7, #0]
 801b080:	2b00      	cmp	r3, #0
 801b082:	d009      	beq.n	801b098 <inc_lock+0xe0>
 801b084:	4a12      	ldr	r2, [pc, #72]	@ (801b0d0 <inc_lock+0x118>)
 801b086:	68fb      	ldr	r3, [r7, #12]
 801b088:	011b      	lsls	r3, r3, #4
 801b08a:	4413      	add	r3, r2
 801b08c:	330c      	adds	r3, #12
 801b08e:	881b      	ldrh	r3, [r3, #0]
 801b090:	2b00      	cmp	r3, #0
 801b092:	d001      	beq.n	801b098 <inc_lock+0xe0>
 801b094:	2300      	movs	r3, #0
 801b096:	e015      	b.n	801b0c4 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 801b098:	683b      	ldr	r3, [r7, #0]
 801b09a:	2b00      	cmp	r3, #0
 801b09c:	d108      	bne.n	801b0b0 <inc_lock+0xf8>
 801b09e:	4a0c      	ldr	r2, [pc, #48]	@ (801b0d0 <inc_lock+0x118>)
 801b0a0:	68fb      	ldr	r3, [r7, #12]
 801b0a2:	011b      	lsls	r3, r3, #4
 801b0a4:	4413      	add	r3, r2
 801b0a6:	330c      	adds	r3, #12
 801b0a8:	881b      	ldrh	r3, [r3, #0]
 801b0aa:	3301      	adds	r3, #1
 801b0ac:	b29a      	uxth	r2, r3
 801b0ae:	e001      	b.n	801b0b4 <inc_lock+0xfc>
 801b0b0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801b0b4:	4906      	ldr	r1, [pc, #24]	@ (801b0d0 <inc_lock+0x118>)
 801b0b6:	68fb      	ldr	r3, [r7, #12]
 801b0b8:	011b      	lsls	r3, r3, #4
 801b0ba:	440b      	add	r3, r1
 801b0bc:	330c      	adds	r3, #12
 801b0be:	801a      	strh	r2, [r3, #0]

	return i + 1;
 801b0c0:	68fb      	ldr	r3, [r7, #12]
 801b0c2:	3301      	adds	r3, #1
}
 801b0c4:	4618      	mov	r0, r3
 801b0c6:	3714      	adds	r7, #20
 801b0c8:	46bd      	mov	sp, r7
 801b0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b0ce:	4770      	bx	lr
 801b0d0:	24000558 	.word	0x24000558

0801b0d4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 801b0d4:	b480      	push	{r7}
 801b0d6:	b085      	sub	sp, #20
 801b0d8:	af00      	add	r7, sp, #0
 801b0da:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 801b0dc:	687b      	ldr	r3, [r7, #4]
 801b0de:	3b01      	subs	r3, #1
 801b0e0:	607b      	str	r3, [r7, #4]
 801b0e2:	687b      	ldr	r3, [r7, #4]
 801b0e4:	2b00      	cmp	r3, #0
 801b0e6:	d125      	bne.n	801b134 <dec_lock+0x60>
		n = Files[i].ctr;
 801b0e8:	4a17      	ldr	r2, [pc, #92]	@ (801b148 <dec_lock+0x74>)
 801b0ea:	687b      	ldr	r3, [r7, #4]
 801b0ec:	011b      	lsls	r3, r3, #4
 801b0ee:	4413      	add	r3, r2
 801b0f0:	330c      	adds	r3, #12
 801b0f2:	881b      	ldrh	r3, [r3, #0]
 801b0f4:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 801b0f6:	89fb      	ldrh	r3, [r7, #14]
 801b0f8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801b0fc:	d101      	bne.n	801b102 <dec_lock+0x2e>
 801b0fe:	2300      	movs	r3, #0
 801b100:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 801b102:	89fb      	ldrh	r3, [r7, #14]
 801b104:	2b00      	cmp	r3, #0
 801b106:	d002      	beq.n	801b10e <dec_lock+0x3a>
 801b108:	89fb      	ldrh	r3, [r7, #14]
 801b10a:	3b01      	subs	r3, #1
 801b10c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 801b10e:	4a0e      	ldr	r2, [pc, #56]	@ (801b148 <dec_lock+0x74>)
 801b110:	687b      	ldr	r3, [r7, #4]
 801b112:	011b      	lsls	r3, r3, #4
 801b114:	4413      	add	r3, r2
 801b116:	330c      	adds	r3, #12
 801b118:	89fa      	ldrh	r2, [r7, #14]
 801b11a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 801b11c:	89fb      	ldrh	r3, [r7, #14]
 801b11e:	2b00      	cmp	r3, #0
 801b120:	d105      	bne.n	801b12e <dec_lock+0x5a>
 801b122:	4a09      	ldr	r2, [pc, #36]	@ (801b148 <dec_lock+0x74>)
 801b124:	687b      	ldr	r3, [r7, #4]
 801b126:	011b      	lsls	r3, r3, #4
 801b128:	4413      	add	r3, r2
 801b12a:	2200      	movs	r2, #0
 801b12c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 801b12e:	2300      	movs	r3, #0
 801b130:	737b      	strb	r3, [r7, #13]
 801b132:	e001      	b.n	801b138 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 801b134:	2302      	movs	r3, #2
 801b136:	737b      	strb	r3, [r7, #13]
	}
	return res;
 801b138:	7b7b      	ldrb	r3, [r7, #13]
}
 801b13a:	4618      	mov	r0, r3
 801b13c:	3714      	adds	r7, #20
 801b13e:	46bd      	mov	sp, r7
 801b140:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b144:	4770      	bx	lr
 801b146:	bf00      	nop
 801b148:	24000558 	.word	0x24000558

0801b14c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 801b14c:	b480      	push	{r7}
 801b14e:	b085      	sub	sp, #20
 801b150:	af00      	add	r7, sp, #0
 801b152:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 801b154:	2300      	movs	r3, #0
 801b156:	60fb      	str	r3, [r7, #12]
 801b158:	e010      	b.n	801b17c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 801b15a:	4a0d      	ldr	r2, [pc, #52]	@ (801b190 <clear_lock+0x44>)
 801b15c:	68fb      	ldr	r3, [r7, #12]
 801b15e:	011b      	lsls	r3, r3, #4
 801b160:	4413      	add	r3, r2
 801b162:	681b      	ldr	r3, [r3, #0]
 801b164:	687a      	ldr	r2, [r7, #4]
 801b166:	429a      	cmp	r2, r3
 801b168:	d105      	bne.n	801b176 <clear_lock+0x2a>
 801b16a:	4a09      	ldr	r2, [pc, #36]	@ (801b190 <clear_lock+0x44>)
 801b16c:	68fb      	ldr	r3, [r7, #12]
 801b16e:	011b      	lsls	r3, r3, #4
 801b170:	4413      	add	r3, r2
 801b172:	2200      	movs	r2, #0
 801b174:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 801b176:	68fb      	ldr	r3, [r7, #12]
 801b178:	3301      	adds	r3, #1
 801b17a:	60fb      	str	r3, [r7, #12]
 801b17c:	68fb      	ldr	r3, [r7, #12]
 801b17e:	2b00      	cmp	r3, #0
 801b180:	d0eb      	beq.n	801b15a <clear_lock+0xe>
	}
}
 801b182:	bf00      	nop
 801b184:	bf00      	nop
 801b186:	3714      	adds	r7, #20
 801b188:	46bd      	mov	sp, r7
 801b18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b18e:	4770      	bx	lr
 801b190:	24000558 	.word	0x24000558

0801b194 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 801b194:	b580      	push	{r7, lr}
 801b196:	b086      	sub	sp, #24
 801b198:	af00      	add	r7, sp, #0
 801b19a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 801b19c:	2300      	movs	r3, #0
 801b19e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 801b1a0:	687b      	ldr	r3, [r7, #4]
 801b1a2:	78db      	ldrb	r3, [r3, #3]
 801b1a4:	2b00      	cmp	r3, #0
 801b1a6:	d034      	beq.n	801b212 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 801b1a8:	687b      	ldr	r3, [r7, #4]
 801b1aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801b1ac:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 801b1ae:	687b      	ldr	r3, [r7, #4]
 801b1b0:	7858      	ldrb	r0, [r3, #1]
 801b1b2:	687b      	ldr	r3, [r7, #4]
 801b1b4:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801b1b8:	2301      	movs	r3, #1
 801b1ba:	697a      	ldr	r2, [r7, #20]
 801b1bc:	f7ff fd40 	bl	801ac40 <disk_write>
 801b1c0:	4603      	mov	r3, r0
 801b1c2:	2b00      	cmp	r3, #0
 801b1c4:	d002      	beq.n	801b1cc <sync_window+0x38>
			res = FR_DISK_ERR;
 801b1c6:	2301      	movs	r3, #1
 801b1c8:	73fb      	strb	r3, [r7, #15]
 801b1ca:	e022      	b.n	801b212 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 801b1cc:	687b      	ldr	r3, [r7, #4]
 801b1ce:	2200      	movs	r2, #0
 801b1d0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 801b1d2:	687b      	ldr	r3, [r7, #4]
 801b1d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b1d6:	697a      	ldr	r2, [r7, #20]
 801b1d8:	1ad2      	subs	r2, r2, r3
 801b1da:	687b      	ldr	r3, [r7, #4]
 801b1dc:	6a1b      	ldr	r3, [r3, #32]
 801b1de:	429a      	cmp	r2, r3
 801b1e0:	d217      	bcs.n	801b212 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801b1e2:	687b      	ldr	r3, [r7, #4]
 801b1e4:	789b      	ldrb	r3, [r3, #2]
 801b1e6:	613b      	str	r3, [r7, #16]
 801b1e8:	e010      	b.n	801b20c <sync_window+0x78>
					wsect += fs->fsize;
 801b1ea:	687b      	ldr	r3, [r7, #4]
 801b1ec:	6a1b      	ldr	r3, [r3, #32]
 801b1ee:	697a      	ldr	r2, [r7, #20]
 801b1f0:	4413      	add	r3, r2
 801b1f2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 801b1f4:	687b      	ldr	r3, [r7, #4]
 801b1f6:	7858      	ldrb	r0, [r3, #1]
 801b1f8:	687b      	ldr	r3, [r7, #4]
 801b1fa:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801b1fe:	2301      	movs	r3, #1
 801b200:	697a      	ldr	r2, [r7, #20]
 801b202:	f7ff fd1d 	bl	801ac40 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801b206:	693b      	ldr	r3, [r7, #16]
 801b208:	3b01      	subs	r3, #1
 801b20a:	613b      	str	r3, [r7, #16]
 801b20c:	693b      	ldr	r3, [r7, #16]
 801b20e:	2b01      	cmp	r3, #1
 801b210:	d8eb      	bhi.n	801b1ea <sync_window+0x56>
				}
			}
		}
	}
	return res;
 801b212:	7bfb      	ldrb	r3, [r7, #15]
}
 801b214:	4618      	mov	r0, r3
 801b216:	3718      	adds	r7, #24
 801b218:	46bd      	mov	sp, r7
 801b21a:	bd80      	pop	{r7, pc}

0801b21c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 801b21c:	b580      	push	{r7, lr}
 801b21e:	b084      	sub	sp, #16
 801b220:	af00      	add	r7, sp, #0
 801b222:	6078      	str	r0, [r7, #4]
 801b224:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 801b226:	2300      	movs	r3, #0
 801b228:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 801b22a:	687b      	ldr	r3, [r7, #4]
 801b22c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801b22e:	683a      	ldr	r2, [r7, #0]
 801b230:	429a      	cmp	r2, r3
 801b232:	d01b      	beq.n	801b26c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 801b234:	6878      	ldr	r0, [r7, #4]
 801b236:	f7ff ffad 	bl	801b194 <sync_window>
 801b23a:	4603      	mov	r3, r0
 801b23c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 801b23e:	7bfb      	ldrb	r3, [r7, #15]
 801b240:	2b00      	cmp	r3, #0
 801b242:	d113      	bne.n	801b26c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 801b244:	687b      	ldr	r3, [r7, #4]
 801b246:	7858      	ldrb	r0, [r3, #1]
 801b248:	687b      	ldr	r3, [r7, #4]
 801b24a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801b24e:	2301      	movs	r3, #1
 801b250:	683a      	ldr	r2, [r7, #0]
 801b252:	f7ff fcd5 	bl	801ac00 <disk_read>
 801b256:	4603      	mov	r3, r0
 801b258:	2b00      	cmp	r3, #0
 801b25a:	d004      	beq.n	801b266 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 801b25c:	f04f 33ff 	mov.w	r3, #4294967295
 801b260:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 801b262:	2301      	movs	r3, #1
 801b264:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 801b266:	687b      	ldr	r3, [r7, #4]
 801b268:	683a      	ldr	r2, [r7, #0]
 801b26a:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
	return res;
 801b26c:	7bfb      	ldrb	r3, [r7, #15]
}
 801b26e:	4618      	mov	r0, r3
 801b270:	3710      	adds	r7, #16
 801b272:	46bd      	mov	sp, r7
 801b274:	bd80      	pop	{r7, pc}
	...

0801b278 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 801b278:	b580      	push	{r7, lr}
 801b27a:	b084      	sub	sp, #16
 801b27c:	af00      	add	r7, sp, #0
 801b27e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 801b280:	6878      	ldr	r0, [r7, #4]
 801b282:	f7ff ff87 	bl	801b194 <sync_window>
 801b286:	4603      	mov	r3, r0
 801b288:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 801b28a:	7bfb      	ldrb	r3, [r7, #15]
 801b28c:	2b00      	cmp	r3, #0
 801b28e:	d159      	bne.n	801b344 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 801b290:	687b      	ldr	r3, [r7, #4]
 801b292:	781b      	ldrb	r3, [r3, #0]
 801b294:	2b03      	cmp	r3, #3
 801b296:	d149      	bne.n	801b32c <sync_fs+0xb4>
 801b298:	687b      	ldr	r3, [r7, #4]
 801b29a:	791b      	ldrb	r3, [r3, #4]
 801b29c:	2b01      	cmp	r3, #1
 801b29e:	d145      	bne.n	801b32c <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 801b2a0:	687b      	ldr	r3, [r7, #4]
 801b2a2:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 801b2a6:	687b      	ldr	r3, [r7, #4]
 801b2a8:	899b      	ldrh	r3, [r3, #12]
 801b2aa:	461a      	mov	r2, r3
 801b2ac:	2100      	movs	r1, #0
 801b2ae:	f7ff fda8 	bl	801ae02 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 801b2b2:	687b      	ldr	r3, [r7, #4]
 801b2b4:	3338      	adds	r3, #56	@ 0x38
 801b2b6:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 801b2ba:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 801b2be:	4618      	mov	r0, r3
 801b2c0:	f7ff fd37 	bl	801ad32 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 801b2c4:	687b      	ldr	r3, [r7, #4]
 801b2c6:	3338      	adds	r3, #56	@ 0x38
 801b2c8:	4921      	ldr	r1, [pc, #132]	@ (801b350 <sync_fs+0xd8>)
 801b2ca:	4618      	mov	r0, r3
 801b2cc:	f7ff fd4c 	bl	801ad68 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 801b2d0:	687b      	ldr	r3, [r7, #4]
 801b2d2:	3338      	adds	r3, #56	@ 0x38
 801b2d4:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 801b2d8:	491e      	ldr	r1, [pc, #120]	@ (801b354 <sync_fs+0xdc>)
 801b2da:	4618      	mov	r0, r3
 801b2dc:	f7ff fd44 	bl	801ad68 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 801b2e0:	687b      	ldr	r3, [r7, #4]
 801b2e2:	3338      	adds	r3, #56	@ 0x38
 801b2e4:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 801b2e8:	687b      	ldr	r3, [r7, #4]
 801b2ea:	699b      	ldr	r3, [r3, #24]
 801b2ec:	4619      	mov	r1, r3
 801b2ee:	4610      	mov	r0, r2
 801b2f0:	f7ff fd3a 	bl	801ad68 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 801b2f4:	687b      	ldr	r3, [r7, #4]
 801b2f6:	3338      	adds	r3, #56	@ 0x38
 801b2f8:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 801b2fc:	687b      	ldr	r3, [r7, #4]
 801b2fe:	695b      	ldr	r3, [r3, #20]
 801b300:	4619      	mov	r1, r3
 801b302:	4610      	mov	r0, r2
 801b304:	f7ff fd30 	bl	801ad68 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 801b308:	687b      	ldr	r3, [r7, #4]
 801b30a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801b30c:	1c5a      	adds	r2, r3, #1
 801b30e:	687b      	ldr	r3, [r7, #4]
 801b310:	635a      	str	r2, [r3, #52]	@ 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 801b312:	687b      	ldr	r3, [r7, #4]
 801b314:	7858      	ldrb	r0, [r3, #1]
 801b316:	687b      	ldr	r3, [r7, #4]
 801b318:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801b31c:	687b      	ldr	r3, [r7, #4]
 801b31e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801b320:	2301      	movs	r3, #1
 801b322:	f7ff fc8d 	bl	801ac40 <disk_write>
			fs->fsi_flag = 0;
 801b326:	687b      	ldr	r3, [r7, #4]
 801b328:	2200      	movs	r2, #0
 801b32a:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 801b32c:	687b      	ldr	r3, [r7, #4]
 801b32e:	785b      	ldrb	r3, [r3, #1]
 801b330:	2200      	movs	r2, #0
 801b332:	2100      	movs	r1, #0
 801b334:	4618      	mov	r0, r3
 801b336:	f7ff fca3 	bl	801ac80 <disk_ioctl>
 801b33a:	4603      	mov	r3, r0
 801b33c:	2b00      	cmp	r3, #0
 801b33e:	d001      	beq.n	801b344 <sync_fs+0xcc>
 801b340:	2301      	movs	r3, #1
 801b342:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 801b344:	7bfb      	ldrb	r3, [r7, #15]
}
 801b346:	4618      	mov	r0, r3
 801b348:	3710      	adds	r7, #16
 801b34a:	46bd      	mov	sp, r7
 801b34c:	bd80      	pop	{r7, pc}
 801b34e:	bf00      	nop
 801b350:	41615252 	.word	0x41615252
 801b354:	61417272 	.word	0x61417272

0801b358 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 801b358:	b480      	push	{r7}
 801b35a:	b083      	sub	sp, #12
 801b35c:	af00      	add	r7, sp, #0
 801b35e:	6078      	str	r0, [r7, #4]
 801b360:	6039      	str	r1, [r7, #0]
	clst -= 2;
 801b362:	683b      	ldr	r3, [r7, #0]
 801b364:	3b02      	subs	r3, #2
 801b366:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 801b368:	687b      	ldr	r3, [r7, #4]
 801b36a:	69db      	ldr	r3, [r3, #28]
 801b36c:	3b02      	subs	r3, #2
 801b36e:	683a      	ldr	r2, [r7, #0]
 801b370:	429a      	cmp	r2, r3
 801b372:	d301      	bcc.n	801b378 <clust2sect+0x20>
 801b374:	2300      	movs	r3, #0
 801b376:	e008      	b.n	801b38a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 801b378:	687b      	ldr	r3, [r7, #4]
 801b37a:	895b      	ldrh	r3, [r3, #10]
 801b37c:	461a      	mov	r2, r3
 801b37e:	683b      	ldr	r3, [r7, #0]
 801b380:	fb03 f202 	mul.w	r2, r3, r2
 801b384:	687b      	ldr	r3, [r7, #4]
 801b386:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801b388:	4413      	add	r3, r2
}
 801b38a:	4618      	mov	r0, r3
 801b38c:	370c      	adds	r7, #12
 801b38e:	46bd      	mov	sp, r7
 801b390:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b394:	4770      	bx	lr

0801b396 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 801b396:	b580      	push	{r7, lr}
 801b398:	b086      	sub	sp, #24
 801b39a:	af00      	add	r7, sp, #0
 801b39c:	6078      	str	r0, [r7, #4]
 801b39e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 801b3a0:	687b      	ldr	r3, [r7, #4]
 801b3a2:	681b      	ldr	r3, [r3, #0]
 801b3a4:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 801b3a6:	683b      	ldr	r3, [r7, #0]
 801b3a8:	2b01      	cmp	r3, #1
 801b3aa:	d904      	bls.n	801b3b6 <get_fat+0x20>
 801b3ac:	693b      	ldr	r3, [r7, #16]
 801b3ae:	69db      	ldr	r3, [r3, #28]
 801b3b0:	683a      	ldr	r2, [r7, #0]
 801b3b2:	429a      	cmp	r2, r3
 801b3b4:	d302      	bcc.n	801b3bc <get_fat+0x26>
		val = 1;	/* Internal error */
 801b3b6:	2301      	movs	r3, #1
 801b3b8:	617b      	str	r3, [r7, #20]
 801b3ba:	e0ba      	b.n	801b532 <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 801b3bc:	f04f 33ff 	mov.w	r3, #4294967295
 801b3c0:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 801b3c2:	693b      	ldr	r3, [r7, #16]
 801b3c4:	781b      	ldrb	r3, [r3, #0]
 801b3c6:	2b03      	cmp	r3, #3
 801b3c8:	f000 8082 	beq.w	801b4d0 <get_fat+0x13a>
 801b3cc:	2b03      	cmp	r3, #3
 801b3ce:	f300 80a6 	bgt.w	801b51e <get_fat+0x188>
 801b3d2:	2b01      	cmp	r3, #1
 801b3d4:	d002      	beq.n	801b3dc <get_fat+0x46>
 801b3d6:	2b02      	cmp	r3, #2
 801b3d8:	d055      	beq.n	801b486 <get_fat+0xf0>
 801b3da:	e0a0      	b.n	801b51e <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 801b3dc:	683b      	ldr	r3, [r7, #0]
 801b3de:	60fb      	str	r3, [r7, #12]
 801b3e0:	68fb      	ldr	r3, [r7, #12]
 801b3e2:	085b      	lsrs	r3, r3, #1
 801b3e4:	68fa      	ldr	r2, [r7, #12]
 801b3e6:	4413      	add	r3, r2
 801b3e8:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801b3ea:	693b      	ldr	r3, [r7, #16]
 801b3ec:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801b3ee:	693b      	ldr	r3, [r7, #16]
 801b3f0:	899b      	ldrh	r3, [r3, #12]
 801b3f2:	4619      	mov	r1, r3
 801b3f4:	68fb      	ldr	r3, [r7, #12]
 801b3f6:	fbb3 f3f1 	udiv	r3, r3, r1
 801b3fa:	4413      	add	r3, r2
 801b3fc:	4619      	mov	r1, r3
 801b3fe:	6938      	ldr	r0, [r7, #16]
 801b400:	f7ff ff0c 	bl	801b21c <move_window>
 801b404:	4603      	mov	r3, r0
 801b406:	2b00      	cmp	r3, #0
 801b408:	f040 808c 	bne.w	801b524 <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 801b40c:	68fb      	ldr	r3, [r7, #12]
 801b40e:	1c5a      	adds	r2, r3, #1
 801b410:	60fa      	str	r2, [r7, #12]
 801b412:	693a      	ldr	r2, [r7, #16]
 801b414:	8992      	ldrh	r2, [r2, #12]
 801b416:	fbb3 f1f2 	udiv	r1, r3, r2
 801b41a:	fb01 f202 	mul.w	r2, r1, r2
 801b41e:	1a9b      	subs	r3, r3, r2
 801b420:	693a      	ldr	r2, [r7, #16]
 801b422:	4413      	add	r3, r2
 801b424:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801b428:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801b42a:	693b      	ldr	r3, [r7, #16]
 801b42c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801b42e:	693b      	ldr	r3, [r7, #16]
 801b430:	899b      	ldrh	r3, [r3, #12]
 801b432:	4619      	mov	r1, r3
 801b434:	68fb      	ldr	r3, [r7, #12]
 801b436:	fbb3 f3f1 	udiv	r3, r3, r1
 801b43a:	4413      	add	r3, r2
 801b43c:	4619      	mov	r1, r3
 801b43e:	6938      	ldr	r0, [r7, #16]
 801b440:	f7ff feec 	bl	801b21c <move_window>
 801b444:	4603      	mov	r3, r0
 801b446:	2b00      	cmp	r3, #0
 801b448:	d16e      	bne.n	801b528 <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 801b44a:	693b      	ldr	r3, [r7, #16]
 801b44c:	899b      	ldrh	r3, [r3, #12]
 801b44e:	461a      	mov	r2, r3
 801b450:	68fb      	ldr	r3, [r7, #12]
 801b452:	fbb3 f1f2 	udiv	r1, r3, r2
 801b456:	fb01 f202 	mul.w	r2, r1, r2
 801b45a:	1a9b      	subs	r3, r3, r2
 801b45c:	693a      	ldr	r2, [r7, #16]
 801b45e:	4413      	add	r3, r2
 801b460:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801b464:	021b      	lsls	r3, r3, #8
 801b466:	68ba      	ldr	r2, [r7, #8]
 801b468:	4313      	orrs	r3, r2
 801b46a:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 801b46c:	683b      	ldr	r3, [r7, #0]
 801b46e:	f003 0301 	and.w	r3, r3, #1
 801b472:	2b00      	cmp	r3, #0
 801b474:	d002      	beq.n	801b47c <get_fat+0xe6>
 801b476:	68bb      	ldr	r3, [r7, #8]
 801b478:	091b      	lsrs	r3, r3, #4
 801b47a:	e002      	b.n	801b482 <get_fat+0xec>
 801b47c:	68bb      	ldr	r3, [r7, #8]
 801b47e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801b482:	617b      	str	r3, [r7, #20]
			break;
 801b484:	e055      	b.n	801b532 <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801b486:	693b      	ldr	r3, [r7, #16]
 801b488:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801b48a:	693b      	ldr	r3, [r7, #16]
 801b48c:	899b      	ldrh	r3, [r3, #12]
 801b48e:	085b      	lsrs	r3, r3, #1
 801b490:	b29b      	uxth	r3, r3
 801b492:	4619      	mov	r1, r3
 801b494:	683b      	ldr	r3, [r7, #0]
 801b496:	fbb3 f3f1 	udiv	r3, r3, r1
 801b49a:	4413      	add	r3, r2
 801b49c:	4619      	mov	r1, r3
 801b49e:	6938      	ldr	r0, [r7, #16]
 801b4a0:	f7ff febc 	bl	801b21c <move_window>
 801b4a4:	4603      	mov	r3, r0
 801b4a6:	2b00      	cmp	r3, #0
 801b4a8:	d140      	bne.n	801b52c <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 801b4aa:	693b      	ldr	r3, [r7, #16]
 801b4ac:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801b4b0:	683b      	ldr	r3, [r7, #0]
 801b4b2:	005b      	lsls	r3, r3, #1
 801b4b4:	693a      	ldr	r2, [r7, #16]
 801b4b6:	8992      	ldrh	r2, [r2, #12]
 801b4b8:	fbb3 f0f2 	udiv	r0, r3, r2
 801b4bc:	fb00 f202 	mul.w	r2, r0, r2
 801b4c0:	1a9b      	subs	r3, r3, r2
 801b4c2:	440b      	add	r3, r1
 801b4c4:	4618      	mov	r0, r3
 801b4c6:	f7ff fbf9 	bl	801acbc <ld_word>
 801b4ca:	4603      	mov	r3, r0
 801b4cc:	617b      	str	r3, [r7, #20]
			break;
 801b4ce:	e030      	b.n	801b532 <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801b4d0:	693b      	ldr	r3, [r7, #16]
 801b4d2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801b4d4:	693b      	ldr	r3, [r7, #16]
 801b4d6:	899b      	ldrh	r3, [r3, #12]
 801b4d8:	089b      	lsrs	r3, r3, #2
 801b4da:	b29b      	uxth	r3, r3
 801b4dc:	4619      	mov	r1, r3
 801b4de:	683b      	ldr	r3, [r7, #0]
 801b4e0:	fbb3 f3f1 	udiv	r3, r3, r1
 801b4e4:	4413      	add	r3, r2
 801b4e6:	4619      	mov	r1, r3
 801b4e8:	6938      	ldr	r0, [r7, #16]
 801b4ea:	f7ff fe97 	bl	801b21c <move_window>
 801b4ee:	4603      	mov	r3, r0
 801b4f0:	2b00      	cmp	r3, #0
 801b4f2:	d11d      	bne.n	801b530 <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 801b4f4:	693b      	ldr	r3, [r7, #16]
 801b4f6:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801b4fa:	683b      	ldr	r3, [r7, #0]
 801b4fc:	009b      	lsls	r3, r3, #2
 801b4fe:	693a      	ldr	r2, [r7, #16]
 801b500:	8992      	ldrh	r2, [r2, #12]
 801b502:	fbb3 f0f2 	udiv	r0, r3, r2
 801b506:	fb00 f202 	mul.w	r2, r0, r2
 801b50a:	1a9b      	subs	r3, r3, r2
 801b50c:	440b      	add	r3, r1
 801b50e:	4618      	mov	r0, r3
 801b510:	f7ff fbec 	bl	801acec <ld_dword>
 801b514:	4603      	mov	r3, r0
 801b516:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 801b51a:	617b      	str	r3, [r7, #20]
			break;
 801b51c:	e009      	b.n	801b532 <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 801b51e:	2301      	movs	r3, #1
 801b520:	617b      	str	r3, [r7, #20]
 801b522:	e006      	b.n	801b532 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801b524:	bf00      	nop
 801b526:	e004      	b.n	801b532 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801b528:	bf00      	nop
 801b52a:	e002      	b.n	801b532 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801b52c:	bf00      	nop
 801b52e:	e000      	b.n	801b532 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801b530:	bf00      	nop
		}
	}

	return val;
 801b532:	697b      	ldr	r3, [r7, #20]
}
 801b534:	4618      	mov	r0, r3
 801b536:	3718      	adds	r7, #24
 801b538:	46bd      	mov	sp, r7
 801b53a:	bd80      	pop	{r7, pc}

0801b53c <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 801b53c:	b590      	push	{r4, r7, lr}
 801b53e:	b089      	sub	sp, #36	@ 0x24
 801b540:	af00      	add	r7, sp, #0
 801b542:	60f8      	str	r0, [r7, #12]
 801b544:	60b9      	str	r1, [r7, #8]
 801b546:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 801b548:	2302      	movs	r3, #2
 801b54a:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 801b54c:	68bb      	ldr	r3, [r7, #8]
 801b54e:	2b01      	cmp	r3, #1
 801b550:	f240 8109 	bls.w	801b766 <put_fat+0x22a>
 801b554:	68fb      	ldr	r3, [r7, #12]
 801b556:	69db      	ldr	r3, [r3, #28]
 801b558:	68ba      	ldr	r2, [r7, #8]
 801b55a:	429a      	cmp	r2, r3
 801b55c:	f080 8103 	bcs.w	801b766 <put_fat+0x22a>
		switch (fs->fs_type) {
 801b560:	68fb      	ldr	r3, [r7, #12]
 801b562:	781b      	ldrb	r3, [r3, #0]
 801b564:	2b03      	cmp	r3, #3
 801b566:	f000 80b6 	beq.w	801b6d6 <put_fat+0x19a>
 801b56a:	2b03      	cmp	r3, #3
 801b56c:	f300 80fb 	bgt.w	801b766 <put_fat+0x22a>
 801b570:	2b01      	cmp	r3, #1
 801b572:	d003      	beq.n	801b57c <put_fat+0x40>
 801b574:	2b02      	cmp	r3, #2
 801b576:	f000 8083 	beq.w	801b680 <put_fat+0x144>
 801b57a:	e0f4      	b.n	801b766 <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 801b57c:	68bb      	ldr	r3, [r7, #8]
 801b57e:	61bb      	str	r3, [r7, #24]
 801b580:	69bb      	ldr	r3, [r7, #24]
 801b582:	085b      	lsrs	r3, r3, #1
 801b584:	69ba      	ldr	r2, [r7, #24]
 801b586:	4413      	add	r3, r2
 801b588:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801b58a:	68fb      	ldr	r3, [r7, #12]
 801b58c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801b58e:	68fb      	ldr	r3, [r7, #12]
 801b590:	899b      	ldrh	r3, [r3, #12]
 801b592:	4619      	mov	r1, r3
 801b594:	69bb      	ldr	r3, [r7, #24]
 801b596:	fbb3 f3f1 	udiv	r3, r3, r1
 801b59a:	4413      	add	r3, r2
 801b59c:	4619      	mov	r1, r3
 801b59e:	68f8      	ldr	r0, [r7, #12]
 801b5a0:	f7ff fe3c 	bl	801b21c <move_window>
 801b5a4:	4603      	mov	r3, r0
 801b5a6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801b5a8:	7ffb      	ldrb	r3, [r7, #31]
 801b5aa:	2b00      	cmp	r3, #0
 801b5ac:	f040 80d4 	bne.w	801b758 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 801b5b0:	68fb      	ldr	r3, [r7, #12]
 801b5b2:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801b5b6:	69bb      	ldr	r3, [r7, #24]
 801b5b8:	1c5a      	adds	r2, r3, #1
 801b5ba:	61ba      	str	r2, [r7, #24]
 801b5bc:	68fa      	ldr	r2, [r7, #12]
 801b5be:	8992      	ldrh	r2, [r2, #12]
 801b5c0:	fbb3 f0f2 	udiv	r0, r3, r2
 801b5c4:	fb00 f202 	mul.w	r2, r0, r2
 801b5c8:	1a9b      	subs	r3, r3, r2
 801b5ca:	440b      	add	r3, r1
 801b5cc:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 801b5ce:	68bb      	ldr	r3, [r7, #8]
 801b5d0:	f003 0301 	and.w	r3, r3, #1
 801b5d4:	2b00      	cmp	r3, #0
 801b5d6:	d00d      	beq.n	801b5f4 <put_fat+0xb8>
 801b5d8:	697b      	ldr	r3, [r7, #20]
 801b5da:	781b      	ldrb	r3, [r3, #0]
 801b5dc:	b25b      	sxtb	r3, r3
 801b5de:	f003 030f 	and.w	r3, r3, #15
 801b5e2:	b25a      	sxtb	r2, r3
 801b5e4:	687b      	ldr	r3, [r7, #4]
 801b5e6:	b2db      	uxtb	r3, r3
 801b5e8:	011b      	lsls	r3, r3, #4
 801b5ea:	b25b      	sxtb	r3, r3
 801b5ec:	4313      	orrs	r3, r2
 801b5ee:	b25b      	sxtb	r3, r3
 801b5f0:	b2db      	uxtb	r3, r3
 801b5f2:	e001      	b.n	801b5f8 <put_fat+0xbc>
 801b5f4:	687b      	ldr	r3, [r7, #4]
 801b5f6:	b2db      	uxtb	r3, r3
 801b5f8:	697a      	ldr	r2, [r7, #20]
 801b5fa:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 801b5fc:	68fb      	ldr	r3, [r7, #12]
 801b5fe:	2201      	movs	r2, #1
 801b600:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801b602:	68fb      	ldr	r3, [r7, #12]
 801b604:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801b606:	68fb      	ldr	r3, [r7, #12]
 801b608:	899b      	ldrh	r3, [r3, #12]
 801b60a:	4619      	mov	r1, r3
 801b60c:	69bb      	ldr	r3, [r7, #24]
 801b60e:	fbb3 f3f1 	udiv	r3, r3, r1
 801b612:	4413      	add	r3, r2
 801b614:	4619      	mov	r1, r3
 801b616:	68f8      	ldr	r0, [r7, #12]
 801b618:	f7ff fe00 	bl	801b21c <move_window>
 801b61c:	4603      	mov	r3, r0
 801b61e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801b620:	7ffb      	ldrb	r3, [r7, #31]
 801b622:	2b00      	cmp	r3, #0
 801b624:	f040 809a 	bne.w	801b75c <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 801b628:	68fb      	ldr	r3, [r7, #12]
 801b62a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801b62e:	68fb      	ldr	r3, [r7, #12]
 801b630:	899b      	ldrh	r3, [r3, #12]
 801b632:	461a      	mov	r2, r3
 801b634:	69bb      	ldr	r3, [r7, #24]
 801b636:	fbb3 f0f2 	udiv	r0, r3, r2
 801b63a:	fb00 f202 	mul.w	r2, r0, r2
 801b63e:	1a9b      	subs	r3, r3, r2
 801b640:	440b      	add	r3, r1
 801b642:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 801b644:	68bb      	ldr	r3, [r7, #8]
 801b646:	f003 0301 	and.w	r3, r3, #1
 801b64a:	2b00      	cmp	r3, #0
 801b64c:	d003      	beq.n	801b656 <put_fat+0x11a>
 801b64e:	687b      	ldr	r3, [r7, #4]
 801b650:	091b      	lsrs	r3, r3, #4
 801b652:	b2db      	uxtb	r3, r3
 801b654:	e00e      	b.n	801b674 <put_fat+0x138>
 801b656:	697b      	ldr	r3, [r7, #20]
 801b658:	781b      	ldrb	r3, [r3, #0]
 801b65a:	b25b      	sxtb	r3, r3
 801b65c:	f023 030f 	bic.w	r3, r3, #15
 801b660:	b25a      	sxtb	r2, r3
 801b662:	687b      	ldr	r3, [r7, #4]
 801b664:	0a1b      	lsrs	r3, r3, #8
 801b666:	b25b      	sxtb	r3, r3
 801b668:	f003 030f 	and.w	r3, r3, #15
 801b66c:	b25b      	sxtb	r3, r3
 801b66e:	4313      	orrs	r3, r2
 801b670:	b25b      	sxtb	r3, r3
 801b672:	b2db      	uxtb	r3, r3
 801b674:	697a      	ldr	r2, [r7, #20]
 801b676:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 801b678:	68fb      	ldr	r3, [r7, #12]
 801b67a:	2201      	movs	r2, #1
 801b67c:	70da      	strb	r2, [r3, #3]
			break;
 801b67e:	e072      	b.n	801b766 <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 801b680:	68fb      	ldr	r3, [r7, #12]
 801b682:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801b684:	68fb      	ldr	r3, [r7, #12]
 801b686:	899b      	ldrh	r3, [r3, #12]
 801b688:	085b      	lsrs	r3, r3, #1
 801b68a:	b29b      	uxth	r3, r3
 801b68c:	4619      	mov	r1, r3
 801b68e:	68bb      	ldr	r3, [r7, #8]
 801b690:	fbb3 f3f1 	udiv	r3, r3, r1
 801b694:	4413      	add	r3, r2
 801b696:	4619      	mov	r1, r3
 801b698:	68f8      	ldr	r0, [r7, #12]
 801b69a:	f7ff fdbf 	bl	801b21c <move_window>
 801b69e:	4603      	mov	r3, r0
 801b6a0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801b6a2:	7ffb      	ldrb	r3, [r7, #31]
 801b6a4:	2b00      	cmp	r3, #0
 801b6a6:	d15b      	bne.n	801b760 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 801b6a8:	68fb      	ldr	r3, [r7, #12]
 801b6aa:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801b6ae:	68bb      	ldr	r3, [r7, #8]
 801b6b0:	005b      	lsls	r3, r3, #1
 801b6b2:	68fa      	ldr	r2, [r7, #12]
 801b6b4:	8992      	ldrh	r2, [r2, #12]
 801b6b6:	fbb3 f0f2 	udiv	r0, r3, r2
 801b6ba:	fb00 f202 	mul.w	r2, r0, r2
 801b6be:	1a9b      	subs	r3, r3, r2
 801b6c0:	440b      	add	r3, r1
 801b6c2:	687a      	ldr	r2, [r7, #4]
 801b6c4:	b292      	uxth	r2, r2
 801b6c6:	4611      	mov	r1, r2
 801b6c8:	4618      	mov	r0, r3
 801b6ca:	f7ff fb32 	bl	801ad32 <st_word>
			fs->wflag = 1;
 801b6ce:	68fb      	ldr	r3, [r7, #12]
 801b6d0:	2201      	movs	r2, #1
 801b6d2:	70da      	strb	r2, [r3, #3]
			break;
 801b6d4:	e047      	b.n	801b766 <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 801b6d6:	68fb      	ldr	r3, [r7, #12]
 801b6d8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801b6da:	68fb      	ldr	r3, [r7, #12]
 801b6dc:	899b      	ldrh	r3, [r3, #12]
 801b6de:	089b      	lsrs	r3, r3, #2
 801b6e0:	b29b      	uxth	r3, r3
 801b6e2:	4619      	mov	r1, r3
 801b6e4:	68bb      	ldr	r3, [r7, #8]
 801b6e6:	fbb3 f3f1 	udiv	r3, r3, r1
 801b6ea:	4413      	add	r3, r2
 801b6ec:	4619      	mov	r1, r3
 801b6ee:	68f8      	ldr	r0, [r7, #12]
 801b6f0:	f7ff fd94 	bl	801b21c <move_window>
 801b6f4:	4603      	mov	r3, r0
 801b6f6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801b6f8:	7ffb      	ldrb	r3, [r7, #31]
 801b6fa:	2b00      	cmp	r3, #0
 801b6fc:	d132      	bne.n	801b764 <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 801b6fe:	687b      	ldr	r3, [r7, #4]
 801b700:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 801b704:	68fb      	ldr	r3, [r7, #12]
 801b706:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801b70a:	68bb      	ldr	r3, [r7, #8]
 801b70c:	009b      	lsls	r3, r3, #2
 801b70e:	68fa      	ldr	r2, [r7, #12]
 801b710:	8992      	ldrh	r2, [r2, #12]
 801b712:	fbb3 f0f2 	udiv	r0, r3, r2
 801b716:	fb00 f202 	mul.w	r2, r0, r2
 801b71a:	1a9b      	subs	r3, r3, r2
 801b71c:	440b      	add	r3, r1
 801b71e:	4618      	mov	r0, r3
 801b720:	f7ff fae4 	bl	801acec <ld_dword>
 801b724:	4603      	mov	r3, r0
 801b726:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 801b72a:	4323      	orrs	r3, r4
 801b72c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 801b72e:	68fb      	ldr	r3, [r7, #12]
 801b730:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801b734:	68bb      	ldr	r3, [r7, #8]
 801b736:	009b      	lsls	r3, r3, #2
 801b738:	68fa      	ldr	r2, [r7, #12]
 801b73a:	8992      	ldrh	r2, [r2, #12]
 801b73c:	fbb3 f0f2 	udiv	r0, r3, r2
 801b740:	fb00 f202 	mul.w	r2, r0, r2
 801b744:	1a9b      	subs	r3, r3, r2
 801b746:	440b      	add	r3, r1
 801b748:	6879      	ldr	r1, [r7, #4]
 801b74a:	4618      	mov	r0, r3
 801b74c:	f7ff fb0c 	bl	801ad68 <st_dword>
			fs->wflag = 1;
 801b750:	68fb      	ldr	r3, [r7, #12]
 801b752:	2201      	movs	r2, #1
 801b754:	70da      	strb	r2, [r3, #3]
			break;
 801b756:	e006      	b.n	801b766 <put_fat+0x22a>
			if (res != FR_OK) break;
 801b758:	bf00      	nop
 801b75a:	e004      	b.n	801b766 <put_fat+0x22a>
			if (res != FR_OK) break;
 801b75c:	bf00      	nop
 801b75e:	e002      	b.n	801b766 <put_fat+0x22a>
			if (res != FR_OK) break;
 801b760:	bf00      	nop
 801b762:	e000      	b.n	801b766 <put_fat+0x22a>
			if (res != FR_OK) break;
 801b764:	bf00      	nop
		}
	}
	return res;
 801b766:	7ffb      	ldrb	r3, [r7, #31]
}
 801b768:	4618      	mov	r0, r3
 801b76a:	3724      	adds	r7, #36	@ 0x24
 801b76c:	46bd      	mov	sp, r7
 801b76e:	bd90      	pop	{r4, r7, pc}

0801b770 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 801b770:	b580      	push	{r7, lr}
 801b772:	b088      	sub	sp, #32
 801b774:	af00      	add	r7, sp, #0
 801b776:	60f8      	str	r0, [r7, #12]
 801b778:	60b9      	str	r1, [r7, #8]
 801b77a:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 801b77c:	2300      	movs	r3, #0
 801b77e:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 801b780:	68fb      	ldr	r3, [r7, #12]
 801b782:	681b      	ldr	r3, [r3, #0]
 801b784:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 801b786:	68bb      	ldr	r3, [r7, #8]
 801b788:	2b01      	cmp	r3, #1
 801b78a:	d904      	bls.n	801b796 <remove_chain+0x26>
 801b78c:	69bb      	ldr	r3, [r7, #24]
 801b78e:	69db      	ldr	r3, [r3, #28]
 801b790:	68ba      	ldr	r2, [r7, #8]
 801b792:	429a      	cmp	r2, r3
 801b794:	d301      	bcc.n	801b79a <remove_chain+0x2a>
 801b796:	2302      	movs	r3, #2
 801b798:	e04b      	b.n	801b832 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 801b79a:	687b      	ldr	r3, [r7, #4]
 801b79c:	2b00      	cmp	r3, #0
 801b79e:	d00c      	beq.n	801b7ba <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 801b7a0:	f04f 32ff 	mov.w	r2, #4294967295
 801b7a4:	6879      	ldr	r1, [r7, #4]
 801b7a6:	69b8      	ldr	r0, [r7, #24]
 801b7a8:	f7ff fec8 	bl	801b53c <put_fat>
 801b7ac:	4603      	mov	r3, r0
 801b7ae:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 801b7b0:	7ffb      	ldrb	r3, [r7, #31]
 801b7b2:	2b00      	cmp	r3, #0
 801b7b4:	d001      	beq.n	801b7ba <remove_chain+0x4a>
 801b7b6:	7ffb      	ldrb	r3, [r7, #31]
 801b7b8:	e03b      	b.n	801b832 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 801b7ba:	68b9      	ldr	r1, [r7, #8]
 801b7bc:	68f8      	ldr	r0, [r7, #12]
 801b7be:	f7ff fdea 	bl	801b396 <get_fat>
 801b7c2:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 801b7c4:	697b      	ldr	r3, [r7, #20]
 801b7c6:	2b00      	cmp	r3, #0
 801b7c8:	d031      	beq.n	801b82e <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 801b7ca:	697b      	ldr	r3, [r7, #20]
 801b7cc:	2b01      	cmp	r3, #1
 801b7ce:	d101      	bne.n	801b7d4 <remove_chain+0x64>
 801b7d0:	2302      	movs	r3, #2
 801b7d2:	e02e      	b.n	801b832 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 801b7d4:	697b      	ldr	r3, [r7, #20]
 801b7d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b7da:	d101      	bne.n	801b7e0 <remove_chain+0x70>
 801b7dc:	2301      	movs	r3, #1
 801b7de:	e028      	b.n	801b832 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 801b7e0:	2200      	movs	r2, #0
 801b7e2:	68b9      	ldr	r1, [r7, #8]
 801b7e4:	69b8      	ldr	r0, [r7, #24]
 801b7e6:	f7ff fea9 	bl	801b53c <put_fat>
 801b7ea:	4603      	mov	r3, r0
 801b7ec:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 801b7ee:	7ffb      	ldrb	r3, [r7, #31]
 801b7f0:	2b00      	cmp	r3, #0
 801b7f2:	d001      	beq.n	801b7f8 <remove_chain+0x88>
 801b7f4:	7ffb      	ldrb	r3, [r7, #31]
 801b7f6:	e01c      	b.n	801b832 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 801b7f8:	69bb      	ldr	r3, [r7, #24]
 801b7fa:	699a      	ldr	r2, [r3, #24]
 801b7fc:	69bb      	ldr	r3, [r7, #24]
 801b7fe:	69db      	ldr	r3, [r3, #28]
 801b800:	3b02      	subs	r3, #2
 801b802:	429a      	cmp	r2, r3
 801b804:	d20b      	bcs.n	801b81e <remove_chain+0xae>
			fs->free_clst++;
 801b806:	69bb      	ldr	r3, [r7, #24]
 801b808:	699b      	ldr	r3, [r3, #24]
 801b80a:	1c5a      	adds	r2, r3, #1
 801b80c:	69bb      	ldr	r3, [r7, #24]
 801b80e:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 801b810:	69bb      	ldr	r3, [r7, #24]
 801b812:	791b      	ldrb	r3, [r3, #4]
 801b814:	f043 0301 	orr.w	r3, r3, #1
 801b818:	b2da      	uxtb	r2, r3
 801b81a:	69bb      	ldr	r3, [r7, #24]
 801b81c:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 801b81e:	697b      	ldr	r3, [r7, #20]
 801b820:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 801b822:	69bb      	ldr	r3, [r7, #24]
 801b824:	69db      	ldr	r3, [r3, #28]
 801b826:	68ba      	ldr	r2, [r7, #8]
 801b828:	429a      	cmp	r2, r3
 801b82a:	d3c6      	bcc.n	801b7ba <remove_chain+0x4a>
 801b82c:	e000      	b.n	801b830 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 801b82e:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 801b830:	2300      	movs	r3, #0
}
 801b832:	4618      	mov	r0, r3
 801b834:	3720      	adds	r7, #32
 801b836:	46bd      	mov	sp, r7
 801b838:	bd80      	pop	{r7, pc}

0801b83a <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 801b83a:	b580      	push	{r7, lr}
 801b83c:	b088      	sub	sp, #32
 801b83e:	af00      	add	r7, sp, #0
 801b840:	6078      	str	r0, [r7, #4]
 801b842:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 801b844:	687b      	ldr	r3, [r7, #4]
 801b846:	681b      	ldr	r3, [r3, #0]
 801b848:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 801b84a:	683b      	ldr	r3, [r7, #0]
 801b84c:	2b00      	cmp	r3, #0
 801b84e:	d10d      	bne.n	801b86c <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 801b850:	693b      	ldr	r3, [r7, #16]
 801b852:	695b      	ldr	r3, [r3, #20]
 801b854:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 801b856:	69bb      	ldr	r3, [r7, #24]
 801b858:	2b00      	cmp	r3, #0
 801b85a:	d004      	beq.n	801b866 <create_chain+0x2c>
 801b85c:	693b      	ldr	r3, [r7, #16]
 801b85e:	69db      	ldr	r3, [r3, #28]
 801b860:	69ba      	ldr	r2, [r7, #24]
 801b862:	429a      	cmp	r2, r3
 801b864:	d31b      	bcc.n	801b89e <create_chain+0x64>
 801b866:	2301      	movs	r3, #1
 801b868:	61bb      	str	r3, [r7, #24]
 801b86a:	e018      	b.n	801b89e <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 801b86c:	6839      	ldr	r1, [r7, #0]
 801b86e:	6878      	ldr	r0, [r7, #4]
 801b870:	f7ff fd91 	bl	801b396 <get_fat>
 801b874:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 801b876:	68fb      	ldr	r3, [r7, #12]
 801b878:	2b01      	cmp	r3, #1
 801b87a:	d801      	bhi.n	801b880 <create_chain+0x46>
 801b87c:	2301      	movs	r3, #1
 801b87e:	e070      	b.n	801b962 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 801b880:	68fb      	ldr	r3, [r7, #12]
 801b882:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b886:	d101      	bne.n	801b88c <create_chain+0x52>
 801b888:	68fb      	ldr	r3, [r7, #12]
 801b88a:	e06a      	b.n	801b962 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 801b88c:	693b      	ldr	r3, [r7, #16]
 801b88e:	69db      	ldr	r3, [r3, #28]
 801b890:	68fa      	ldr	r2, [r7, #12]
 801b892:	429a      	cmp	r2, r3
 801b894:	d201      	bcs.n	801b89a <create_chain+0x60>
 801b896:	68fb      	ldr	r3, [r7, #12]
 801b898:	e063      	b.n	801b962 <create_chain+0x128>
		scl = clst;
 801b89a:	683b      	ldr	r3, [r7, #0]
 801b89c:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 801b89e:	69bb      	ldr	r3, [r7, #24]
 801b8a0:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 801b8a2:	69fb      	ldr	r3, [r7, #28]
 801b8a4:	3301      	adds	r3, #1
 801b8a6:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 801b8a8:	693b      	ldr	r3, [r7, #16]
 801b8aa:	69db      	ldr	r3, [r3, #28]
 801b8ac:	69fa      	ldr	r2, [r7, #28]
 801b8ae:	429a      	cmp	r2, r3
 801b8b0:	d307      	bcc.n	801b8c2 <create_chain+0x88>
				ncl = 2;
 801b8b2:	2302      	movs	r3, #2
 801b8b4:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 801b8b6:	69fa      	ldr	r2, [r7, #28]
 801b8b8:	69bb      	ldr	r3, [r7, #24]
 801b8ba:	429a      	cmp	r2, r3
 801b8bc:	d901      	bls.n	801b8c2 <create_chain+0x88>
 801b8be:	2300      	movs	r3, #0
 801b8c0:	e04f      	b.n	801b962 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 801b8c2:	69f9      	ldr	r1, [r7, #28]
 801b8c4:	6878      	ldr	r0, [r7, #4]
 801b8c6:	f7ff fd66 	bl	801b396 <get_fat>
 801b8ca:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 801b8cc:	68fb      	ldr	r3, [r7, #12]
 801b8ce:	2b00      	cmp	r3, #0
 801b8d0:	d00e      	beq.n	801b8f0 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 801b8d2:	68fb      	ldr	r3, [r7, #12]
 801b8d4:	2b01      	cmp	r3, #1
 801b8d6:	d003      	beq.n	801b8e0 <create_chain+0xa6>
 801b8d8:	68fb      	ldr	r3, [r7, #12]
 801b8da:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b8de:	d101      	bne.n	801b8e4 <create_chain+0xaa>
 801b8e0:	68fb      	ldr	r3, [r7, #12]
 801b8e2:	e03e      	b.n	801b962 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 801b8e4:	69fa      	ldr	r2, [r7, #28]
 801b8e6:	69bb      	ldr	r3, [r7, #24]
 801b8e8:	429a      	cmp	r2, r3
 801b8ea:	d1da      	bne.n	801b8a2 <create_chain+0x68>
 801b8ec:	2300      	movs	r3, #0
 801b8ee:	e038      	b.n	801b962 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 801b8f0:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 801b8f2:	f04f 32ff 	mov.w	r2, #4294967295
 801b8f6:	69f9      	ldr	r1, [r7, #28]
 801b8f8:	6938      	ldr	r0, [r7, #16]
 801b8fa:	f7ff fe1f 	bl	801b53c <put_fat>
 801b8fe:	4603      	mov	r3, r0
 801b900:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 801b902:	7dfb      	ldrb	r3, [r7, #23]
 801b904:	2b00      	cmp	r3, #0
 801b906:	d109      	bne.n	801b91c <create_chain+0xe2>
 801b908:	683b      	ldr	r3, [r7, #0]
 801b90a:	2b00      	cmp	r3, #0
 801b90c:	d006      	beq.n	801b91c <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 801b90e:	69fa      	ldr	r2, [r7, #28]
 801b910:	6839      	ldr	r1, [r7, #0]
 801b912:	6938      	ldr	r0, [r7, #16]
 801b914:	f7ff fe12 	bl	801b53c <put_fat>
 801b918:	4603      	mov	r3, r0
 801b91a:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 801b91c:	7dfb      	ldrb	r3, [r7, #23]
 801b91e:	2b00      	cmp	r3, #0
 801b920:	d116      	bne.n	801b950 <create_chain+0x116>
		fs->last_clst = ncl;
 801b922:	693b      	ldr	r3, [r7, #16]
 801b924:	69fa      	ldr	r2, [r7, #28]
 801b926:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 801b928:	693b      	ldr	r3, [r7, #16]
 801b92a:	699a      	ldr	r2, [r3, #24]
 801b92c:	693b      	ldr	r3, [r7, #16]
 801b92e:	69db      	ldr	r3, [r3, #28]
 801b930:	3b02      	subs	r3, #2
 801b932:	429a      	cmp	r2, r3
 801b934:	d804      	bhi.n	801b940 <create_chain+0x106>
 801b936:	693b      	ldr	r3, [r7, #16]
 801b938:	699b      	ldr	r3, [r3, #24]
 801b93a:	1e5a      	subs	r2, r3, #1
 801b93c:	693b      	ldr	r3, [r7, #16]
 801b93e:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 801b940:	693b      	ldr	r3, [r7, #16]
 801b942:	791b      	ldrb	r3, [r3, #4]
 801b944:	f043 0301 	orr.w	r3, r3, #1
 801b948:	b2da      	uxtb	r2, r3
 801b94a:	693b      	ldr	r3, [r7, #16]
 801b94c:	711a      	strb	r2, [r3, #4]
 801b94e:	e007      	b.n	801b960 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 801b950:	7dfb      	ldrb	r3, [r7, #23]
 801b952:	2b01      	cmp	r3, #1
 801b954:	d102      	bne.n	801b95c <create_chain+0x122>
 801b956:	f04f 33ff 	mov.w	r3, #4294967295
 801b95a:	e000      	b.n	801b95e <create_chain+0x124>
 801b95c:	2301      	movs	r3, #1
 801b95e:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 801b960:	69fb      	ldr	r3, [r7, #28]
}
 801b962:	4618      	mov	r0, r3
 801b964:	3720      	adds	r7, #32
 801b966:	46bd      	mov	sp, r7
 801b968:	bd80      	pop	{r7, pc}

0801b96a <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 801b96a:	b480      	push	{r7}
 801b96c:	b087      	sub	sp, #28
 801b96e:	af00      	add	r7, sp, #0
 801b970:	6078      	str	r0, [r7, #4]
 801b972:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 801b974:	687b      	ldr	r3, [r7, #4]
 801b976:	681b      	ldr	r3, [r3, #0]
 801b978:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 801b97a:	687b      	ldr	r3, [r7, #4]
 801b97c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b97e:	3304      	adds	r3, #4
 801b980:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 801b982:	68fb      	ldr	r3, [r7, #12]
 801b984:	899b      	ldrh	r3, [r3, #12]
 801b986:	461a      	mov	r2, r3
 801b988:	683b      	ldr	r3, [r7, #0]
 801b98a:	fbb3 f3f2 	udiv	r3, r3, r2
 801b98e:	68fa      	ldr	r2, [r7, #12]
 801b990:	8952      	ldrh	r2, [r2, #10]
 801b992:	fbb3 f3f2 	udiv	r3, r3, r2
 801b996:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801b998:	693b      	ldr	r3, [r7, #16]
 801b99a:	1d1a      	adds	r2, r3, #4
 801b99c:	613a      	str	r2, [r7, #16]
 801b99e:	681b      	ldr	r3, [r3, #0]
 801b9a0:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 801b9a2:	68bb      	ldr	r3, [r7, #8]
 801b9a4:	2b00      	cmp	r3, #0
 801b9a6:	d101      	bne.n	801b9ac <clmt_clust+0x42>
 801b9a8:	2300      	movs	r3, #0
 801b9aa:	e010      	b.n	801b9ce <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 801b9ac:	697a      	ldr	r2, [r7, #20]
 801b9ae:	68bb      	ldr	r3, [r7, #8]
 801b9b0:	429a      	cmp	r2, r3
 801b9b2:	d307      	bcc.n	801b9c4 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 801b9b4:	697a      	ldr	r2, [r7, #20]
 801b9b6:	68bb      	ldr	r3, [r7, #8]
 801b9b8:	1ad3      	subs	r3, r2, r3
 801b9ba:	617b      	str	r3, [r7, #20]
 801b9bc:	693b      	ldr	r3, [r7, #16]
 801b9be:	3304      	adds	r3, #4
 801b9c0:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801b9c2:	e7e9      	b.n	801b998 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 801b9c4:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 801b9c6:	693b      	ldr	r3, [r7, #16]
 801b9c8:	681a      	ldr	r2, [r3, #0]
 801b9ca:	697b      	ldr	r3, [r7, #20]
 801b9cc:	4413      	add	r3, r2
}
 801b9ce:	4618      	mov	r0, r3
 801b9d0:	371c      	adds	r7, #28
 801b9d2:	46bd      	mov	sp, r7
 801b9d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b9d8:	4770      	bx	lr

0801b9da <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 801b9da:	b580      	push	{r7, lr}
 801b9dc:	b086      	sub	sp, #24
 801b9de:	af00      	add	r7, sp, #0
 801b9e0:	6078      	str	r0, [r7, #4]
 801b9e2:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 801b9e4:	687b      	ldr	r3, [r7, #4]
 801b9e6:	681b      	ldr	r3, [r3, #0]
 801b9e8:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 801b9ea:	683b      	ldr	r3, [r7, #0]
 801b9ec:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801b9f0:	d204      	bcs.n	801b9fc <dir_sdi+0x22>
 801b9f2:	683b      	ldr	r3, [r7, #0]
 801b9f4:	f003 031f 	and.w	r3, r3, #31
 801b9f8:	2b00      	cmp	r3, #0
 801b9fa:	d001      	beq.n	801ba00 <dir_sdi+0x26>
		return FR_INT_ERR;
 801b9fc:	2302      	movs	r3, #2
 801b9fe:	e071      	b.n	801bae4 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 801ba00:	687b      	ldr	r3, [r7, #4]
 801ba02:	683a      	ldr	r2, [r7, #0]
 801ba04:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 801ba06:	687b      	ldr	r3, [r7, #4]
 801ba08:	689b      	ldr	r3, [r3, #8]
 801ba0a:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 801ba0c:	697b      	ldr	r3, [r7, #20]
 801ba0e:	2b00      	cmp	r3, #0
 801ba10:	d106      	bne.n	801ba20 <dir_sdi+0x46>
 801ba12:	693b      	ldr	r3, [r7, #16]
 801ba14:	781b      	ldrb	r3, [r3, #0]
 801ba16:	2b02      	cmp	r3, #2
 801ba18:	d902      	bls.n	801ba20 <dir_sdi+0x46>
		clst = fs->dirbase;
 801ba1a:	693b      	ldr	r3, [r7, #16]
 801ba1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ba1e:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 801ba20:	697b      	ldr	r3, [r7, #20]
 801ba22:	2b00      	cmp	r3, #0
 801ba24:	d10c      	bne.n	801ba40 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 801ba26:	683b      	ldr	r3, [r7, #0]
 801ba28:	095b      	lsrs	r3, r3, #5
 801ba2a:	693a      	ldr	r2, [r7, #16]
 801ba2c:	8912      	ldrh	r2, [r2, #8]
 801ba2e:	4293      	cmp	r3, r2
 801ba30:	d301      	bcc.n	801ba36 <dir_sdi+0x5c>
 801ba32:	2302      	movs	r3, #2
 801ba34:	e056      	b.n	801bae4 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 801ba36:	693b      	ldr	r3, [r7, #16]
 801ba38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801ba3a:	687b      	ldr	r3, [r7, #4]
 801ba3c:	61da      	str	r2, [r3, #28]
 801ba3e:	e02d      	b.n	801ba9c <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 801ba40:	693b      	ldr	r3, [r7, #16]
 801ba42:	895b      	ldrh	r3, [r3, #10]
 801ba44:	461a      	mov	r2, r3
 801ba46:	693b      	ldr	r3, [r7, #16]
 801ba48:	899b      	ldrh	r3, [r3, #12]
 801ba4a:	fb02 f303 	mul.w	r3, r2, r3
 801ba4e:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 801ba50:	e019      	b.n	801ba86 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 801ba52:	687b      	ldr	r3, [r7, #4]
 801ba54:	6979      	ldr	r1, [r7, #20]
 801ba56:	4618      	mov	r0, r3
 801ba58:	f7ff fc9d 	bl	801b396 <get_fat>
 801ba5c:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801ba5e:	697b      	ldr	r3, [r7, #20]
 801ba60:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ba64:	d101      	bne.n	801ba6a <dir_sdi+0x90>
 801ba66:	2301      	movs	r3, #1
 801ba68:	e03c      	b.n	801bae4 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 801ba6a:	697b      	ldr	r3, [r7, #20]
 801ba6c:	2b01      	cmp	r3, #1
 801ba6e:	d904      	bls.n	801ba7a <dir_sdi+0xa0>
 801ba70:	693b      	ldr	r3, [r7, #16]
 801ba72:	69db      	ldr	r3, [r3, #28]
 801ba74:	697a      	ldr	r2, [r7, #20]
 801ba76:	429a      	cmp	r2, r3
 801ba78:	d301      	bcc.n	801ba7e <dir_sdi+0xa4>
 801ba7a:	2302      	movs	r3, #2
 801ba7c:	e032      	b.n	801bae4 <dir_sdi+0x10a>
			ofs -= csz;
 801ba7e:	683a      	ldr	r2, [r7, #0]
 801ba80:	68fb      	ldr	r3, [r7, #12]
 801ba82:	1ad3      	subs	r3, r2, r3
 801ba84:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 801ba86:	683a      	ldr	r2, [r7, #0]
 801ba88:	68fb      	ldr	r3, [r7, #12]
 801ba8a:	429a      	cmp	r2, r3
 801ba8c:	d2e1      	bcs.n	801ba52 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 801ba8e:	6979      	ldr	r1, [r7, #20]
 801ba90:	6938      	ldr	r0, [r7, #16]
 801ba92:	f7ff fc61 	bl	801b358 <clust2sect>
 801ba96:	4602      	mov	r2, r0
 801ba98:	687b      	ldr	r3, [r7, #4]
 801ba9a:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 801ba9c:	687b      	ldr	r3, [r7, #4]
 801ba9e:	697a      	ldr	r2, [r7, #20]
 801baa0:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 801baa2:	687b      	ldr	r3, [r7, #4]
 801baa4:	69db      	ldr	r3, [r3, #28]
 801baa6:	2b00      	cmp	r3, #0
 801baa8:	d101      	bne.n	801baae <dir_sdi+0xd4>
 801baaa:	2302      	movs	r3, #2
 801baac:	e01a      	b.n	801bae4 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 801baae:	687b      	ldr	r3, [r7, #4]
 801bab0:	69da      	ldr	r2, [r3, #28]
 801bab2:	693b      	ldr	r3, [r7, #16]
 801bab4:	899b      	ldrh	r3, [r3, #12]
 801bab6:	4619      	mov	r1, r3
 801bab8:	683b      	ldr	r3, [r7, #0]
 801baba:	fbb3 f3f1 	udiv	r3, r3, r1
 801babe:	441a      	add	r2, r3
 801bac0:	687b      	ldr	r3, [r7, #4]
 801bac2:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 801bac4:	693b      	ldr	r3, [r7, #16]
 801bac6:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801baca:	693b      	ldr	r3, [r7, #16]
 801bacc:	899b      	ldrh	r3, [r3, #12]
 801bace:	461a      	mov	r2, r3
 801bad0:	683b      	ldr	r3, [r7, #0]
 801bad2:	fbb3 f0f2 	udiv	r0, r3, r2
 801bad6:	fb00 f202 	mul.w	r2, r0, r2
 801bada:	1a9b      	subs	r3, r3, r2
 801badc:	18ca      	adds	r2, r1, r3
 801bade:	687b      	ldr	r3, [r7, #4]
 801bae0:	621a      	str	r2, [r3, #32]

	return FR_OK;
 801bae2:	2300      	movs	r3, #0
}
 801bae4:	4618      	mov	r0, r3
 801bae6:	3718      	adds	r7, #24
 801bae8:	46bd      	mov	sp, r7
 801baea:	bd80      	pop	{r7, pc}

0801baec <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 801baec:	b580      	push	{r7, lr}
 801baee:	b086      	sub	sp, #24
 801baf0:	af00      	add	r7, sp, #0
 801baf2:	6078      	str	r0, [r7, #4]
 801baf4:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 801baf6:	687b      	ldr	r3, [r7, #4]
 801baf8:	681b      	ldr	r3, [r3, #0]
 801bafa:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 801bafc:	687b      	ldr	r3, [r7, #4]
 801bafe:	695b      	ldr	r3, [r3, #20]
 801bb00:	3320      	adds	r3, #32
 801bb02:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 801bb04:	687b      	ldr	r3, [r7, #4]
 801bb06:	69db      	ldr	r3, [r3, #28]
 801bb08:	2b00      	cmp	r3, #0
 801bb0a:	d003      	beq.n	801bb14 <dir_next+0x28>
 801bb0c:	68bb      	ldr	r3, [r7, #8]
 801bb0e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801bb12:	d301      	bcc.n	801bb18 <dir_next+0x2c>
 801bb14:	2304      	movs	r3, #4
 801bb16:	e0bb      	b.n	801bc90 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 801bb18:	68fb      	ldr	r3, [r7, #12]
 801bb1a:	899b      	ldrh	r3, [r3, #12]
 801bb1c:	461a      	mov	r2, r3
 801bb1e:	68bb      	ldr	r3, [r7, #8]
 801bb20:	fbb3 f1f2 	udiv	r1, r3, r2
 801bb24:	fb01 f202 	mul.w	r2, r1, r2
 801bb28:	1a9b      	subs	r3, r3, r2
 801bb2a:	2b00      	cmp	r3, #0
 801bb2c:	f040 809d 	bne.w	801bc6a <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 801bb30:	687b      	ldr	r3, [r7, #4]
 801bb32:	69db      	ldr	r3, [r3, #28]
 801bb34:	1c5a      	adds	r2, r3, #1
 801bb36:	687b      	ldr	r3, [r7, #4]
 801bb38:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 801bb3a:	687b      	ldr	r3, [r7, #4]
 801bb3c:	699b      	ldr	r3, [r3, #24]
 801bb3e:	2b00      	cmp	r3, #0
 801bb40:	d10b      	bne.n	801bb5a <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 801bb42:	68bb      	ldr	r3, [r7, #8]
 801bb44:	095b      	lsrs	r3, r3, #5
 801bb46:	68fa      	ldr	r2, [r7, #12]
 801bb48:	8912      	ldrh	r2, [r2, #8]
 801bb4a:	4293      	cmp	r3, r2
 801bb4c:	f0c0 808d 	bcc.w	801bc6a <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 801bb50:	687b      	ldr	r3, [r7, #4]
 801bb52:	2200      	movs	r2, #0
 801bb54:	61da      	str	r2, [r3, #28]
 801bb56:	2304      	movs	r3, #4
 801bb58:	e09a      	b.n	801bc90 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 801bb5a:	68fb      	ldr	r3, [r7, #12]
 801bb5c:	899b      	ldrh	r3, [r3, #12]
 801bb5e:	461a      	mov	r2, r3
 801bb60:	68bb      	ldr	r3, [r7, #8]
 801bb62:	fbb3 f3f2 	udiv	r3, r3, r2
 801bb66:	68fa      	ldr	r2, [r7, #12]
 801bb68:	8952      	ldrh	r2, [r2, #10]
 801bb6a:	3a01      	subs	r2, #1
 801bb6c:	4013      	ands	r3, r2
 801bb6e:	2b00      	cmp	r3, #0
 801bb70:	d17b      	bne.n	801bc6a <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 801bb72:	687a      	ldr	r2, [r7, #4]
 801bb74:	687b      	ldr	r3, [r7, #4]
 801bb76:	699b      	ldr	r3, [r3, #24]
 801bb78:	4619      	mov	r1, r3
 801bb7a:	4610      	mov	r0, r2
 801bb7c:	f7ff fc0b 	bl	801b396 <get_fat>
 801bb80:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 801bb82:	697b      	ldr	r3, [r7, #20]
 801bb84:	2b01      	cmp	r3, #1
 801bb86:	d801      	bhi.n	801bb8c <dir_next+0xa0>
 801bb88:	2302      	movs	r3, #2
 801bb8a:	e081      	b.n	801bc90 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 801bb8c:	697b      	ldr	r3, [r7, #20]
 801bb8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 801bb92:	d101      	bne.n	801bb98 <dir_next+0xac>
 801bb94:	2301      	movs	r3, #1
 801bb96:	e07b      	b.n	801bc90 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 801bb98:	68fb      	ldr	r3, [r7, #12]
 801bb9a:	69db      	ldr	r3, [r3, #28]
 801bb9c:	697a      	ldr	r2, [r7, #20]
 801bb9e:	429a      	cmp	r2, r3
 801bba0:	d359      	bcc.n	801bc56 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 801bba2:	683b      	ldr	r3, [r7, #0]
 801bba4:	2b00      	cmp	r3, #0
 801bba6:	d104      	bne.n	801bbb2 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 801bba8:	687b      	ldr	r3, [r7, #4]
 801bbaa:	2200      	movs	r2, #0
 801bbac:	61da      	str	r2, [r3, #28]
 801bbae:	2304      	movs	r3, #4
 801bbb0:	e06e      	b.n	801bc90 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 801bbb2:	687a      	ldr	r2, [r7, #4]
 801bbb4:	687b      	ldr	r3, [r7, #4]
 801bbb6:	699b      	ldr	r3, [r3, #24]
 801bbb8:	4619      	mov	r1, r3
 801bbba:	4610      	mov	r0, r2
 801bbbc:	f7ff fe3d 	bl	801b83a <create_chain>
 801bbc0:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 801bbc2:	697b      	ldr	r3, [r7, #20]
 801bbc4:	2b00      	cmp	r3, #0
 801bbc6:	d101      	bne.n	801bbcc <dir_next+0xe0>
 801bbc8:	2307      	movs	r3, #7
 801bbca:	e061      	b.n	801bc90 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 801bbcc:	697b      	ldr	r3, [r7, #20]
 801bbce:	2b01      	cmp	r3, #1
 801bbd0:	d101      	bne.n	801bbd6 <dir_next+0xea>
 801bbd2:	2302      	movs	r3, #2
 801bbd4:	e05c      	b.n	801bc90 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801bbd6:	697b      	ldr	r3, [r7, #20]
 801bbd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 801bbdc:	d101      	bne.n	801bbe2 <dir_next+0xf6>
 801bbde:	2301      	movs	r3, #1
 801bbe0:	e056      	b.n	801bc90 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 801bbe2:	68f8      	ldr	r0, [r7, #12]
 801bbe4:	f7ff fad6 	bl	801b194 <sync_window>
 801bbe8:	4603      	mov	r3, r0
 801bbea:	2b00      	cmp	r3, #0
 801bbec:	d001      	beq.n	801bbf2 <dir_next+0x106>
 801bbee:	2301      	movs	r3, #1
 801bbf0:	e04e      	b.n	801bc90 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 801bbf2:	68fb      	ldr	r3, [r7, #12]
 801bbf4:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 801bbf8:	68fb      	ldr	r3, [r7, #12]
 801bbfa:	899b      	ldrh	r3, [r3, #12]
 801bbfc:	461a      	mov	r2, r3
 801bbfe:	2100      	movs	r1, #0
 801bc00:	f7ff f8ff 	bl	801ae02 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801bc04:	2300      	movs	r3, #0
 801bc06:	613b      	str	r3, [r7, #16]
 801bc08:	6979      	ldr	r1, [r7, #20]
 801bc0a:	68f8      	ldr	r0, [r7, #12]
 801bc0c:	f7ff fba4 	bl	801b358 <clust2sect>
 801bc10:	4602      	mov	r2, r0
 801bc12:	68fb      	ldr	r3, [r7, #12]
 801bc14:	635a      	str	r2, [r3, #52]	@ 0x34
 801bc16:	e012      	b.n	801bc3e <dir_next+0x152>
						fs->wflag = 1;
 801bc18:	68fb      	ldr	r3, [r7, #12]
 801bc1a:	2201      	movs	r2, #1
 801bc1c:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 801bc1e:	68f8      	ldr	r0, [r7, #12]
 801bc20:	f7ff fab8 	bl	801b194 <sync_window>
 801bc24:	4603      	mov	r3, r0
 801bc26:	2b00      	cmp	r3, #0
 801bc28:	d001      	beq.n	801bc2e <dir_next+0x142>
 801bc2a:	2301      	movs	r3, #1
 801bc2c:	e030      	b.n	801bc90 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801bc2e:	693b      	ldr	r3, [r7, #16]
 801bc30:	3301      	adds	r3, #1
 801bc32:	613b      	str	r3, [r7, #16]
 801bc34:	68fb      	ldr	r3, [r7, #12]
 801bc36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801bc38:	1c5a      	adds	r2, r3, #1
 801bc3a:	68fb      	ldr	r3, [r7, #12]
 801bc3c:	635a      	str	r2, [r3, #52]	@ 0x34
 801bc3e:	68fb      	ldr	r3, [r7, #12]
 801bc40:	895b      	ldrh	r3, [r3, #10]
 801bc42:	461a      	mov	r2, r3
 801bc44:	693b      	ldr	r3, [r7, #16]
 801bc46:	4293      	cmp	r3, r2
 801bc48:	d3e6      	bcc.n	801bc18 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 801bc4a:	68fb      	ldr	r3, [r7, #12]
 801bc4c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801bc4e:	693b      	ldr	r3, [r7, #16]
 801bc50:	1ad2      	subs	r2, r2, r3
 801bc52:	68fb      	ldr	r3, [r7, #12]
 801bc54:	635a      	str	r2, [r3, #52]	@ 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 801bc56:	687b      	ldr	r3, [r7, #4]
 801bc58:	697a      	ldr	r2, [r7, #20]
 801bc5a:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 801bc5c:	6979      	ldr	r1, [r7, #20]
 801bc5e:	68f8      	ldr	r0, [r7, #12]
 801bc60:	f7ff fb7a 	bl	801b358 <clust2sect>
 801bc64:	4602      	mov	r2, r0
 801bc66:	687b      	ldr	r3, [r7, #4]
 801bc68:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 801bc6a:	687b      	ldr	r3, [r7, #4]
 801bc6c:	68ba      	ldr	r2, [r7, #8]
 801bc6e:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 801bc70:	68fb      	ldr	r3, [r7, #12]
 801bc72:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801bc76:	68fb      	ldr	r3, [r7, #12]
 801bc78:	899b      	ldrh	r3, [r3, #12]
 801bc7a:	461a      	mov	r2, r3
 801bc7c:	68bb      	ldr	r3, [r7, #8]
 801bc7e:	fbb3 f0f2 	udiv	r0, r3, r2
 801bc82:	fb00 f202 	mul.w	r2, r0, r2
 801bc86:	1a9b      	subs	r3, r3, r2
 801bc88:	18ca      	adds	r2, r1, r3
 801bc8a:	687b      	ldr	r3, [r7, #4]
 801bc8c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 801bc8e:	2300      	movs	r3, #0
}
 801bc90:	4618      	mov	r0, r3
 801bc92:	3718      	adds	r7, #24
 801bc94:	46bd      	mov	sp, r7
 801bc96:	bd80      	pop	{r7, pc}

0801bc98 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 801bc98:	b580      	push	{r7, lr}
 801bc9a:	b086      	sub	sp, #24
 801bc9c:	af00      	add	r7, sp, #0
 801bc9e:	6078      	str	r0, [r7, #4]
 801bca0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 801bca2:	687b      	ldr	r3, [r7, #4]
 801bca4:	681b      	ldr	r3, [r3, #0]
 801bca6:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 801bca8:	2100      	movs	r1, #0
 801bcaa:	6878      	ldr	r0, [r7, #4]
 801bcac:	f7ff fe95 	bl	801b9da <dir_sdi>
 801bcb0:	4603      	mov	r3, r0
 801bcb2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801bcb4:	7dfb      	ldrb	r3, [r7, #23]
 801bcb6:	2b00      	cmp	r3, #0
 801bcb8:	d12b      	bne.n	801bd12 <dir_alloc+0x7a>
		n = 0;
 801bcba:	2300      	movs	r3, #0
 801bcbc:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 801bcbe:	687b      	ldr	r3, [r7, #4]
 801bcc0:	69db      	ldr	r3, [r3, #28]
 801bcc2:	4619      	mov	r1, r3
 801bcc4:	68f8      	ldr	r0, [r7, #12]
 801bcc6:	f7ff faa9 	bl	801b21c <move_window>
 801bcca:	4603      	mov	r3, r0
 801bccc:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801bcce:	7dfb      	ldrb	r3, [r7, #23]
 801bcd0:	2b00      	cmp	r3, #0
 801bcd2:	d11d      	bne.n	801bd10 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 801bcd4:	687b      	ldr	r3, [r7, #4]
 801bcd6:	6a1b      	ldr	r3, [r3, #32]
 801bcd8:	781b      	ldrb	r3, [r3, #0]
 801bcda:	2be5      	cmp	r3, #229	@ 0xe5
 801bcdc:	d004      	beq.n	801bce8 <dir_alloc+0x50>
 801bcde:	687b      	ldr	r3, [r7, #4]
 801bce0:	6a1b      	ldr	r3, [r3, #32]
 801bce2:	781b      	ldrb	r3, [r3, #0]
 801bce4:	2b00      	cmp	r3, #0
 801bce6:	d107      	bne.n	801bcf8 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 801bce8:	693b      	ldr	r3, [r7, #16]
 801bcea:	3301      	adds	r3, #1
 801bcec:	613b      	str	r3, [r7, #16]
 801bcee:	693a      	ldr	r2, [r7, #16]
 801bcf0:	683b      	ldr	r3, [r7, #0]
 801bcf2:	429a      	cmp	r2, r3
 801bcf4:	d102      	bne.n	801bcfc <dir_alloc+0x64>
 801bcf6:	e00c      	b.n	801bd12 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 801bcf8:	2300      	movs	r3, #0
 801bcfa:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 801bcfc:	2101      	movs	r1, #1
 801bcfe:	6878      	ldr	r0, [r7, #4]
 801bd00:	f7ff fef4 	bl	801baec <dir_next>
 801bd04:	4603      	mov	r3, r0
 801bd06:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 801bd08:	7dfb      	ldrb	r3, [r7, #23]
 801bd0a:	2b00      	cmp	r3, #0
 801bd0c:	d0d7      	beq.n	801bcbe <dir_alloc+0x26>
 801bd0e:	e000      	b.n	801bd12 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 801bd10:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 801bd12:	7dfb      	ldrb	r3, [r7, #23]
 801bd14:	2b04      	cmp	r3, #4
 801bd16:	d101      	bne.n	801bd1c <dir_alloc+0x84>
 801bd18:	2307      	movs	r3, #7
 801bd1a:	75fb      	strb	r3, [r7, #23]
	return res;
 801bd1c:	7dfb      	ldrb	r3, [r7, #23]
}
 801bd1e:	4618      	mov	r0, r3
 801bd20:	3718      	adds	r7, #24
 801bd22:	46bd      	mov	sp, r7
 801bd24:	bd80      	pop	{r7, pc}

0801bd26 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 801bd26:	b580      	push	{r7, lr}
 801bd28:	b084      	sub	sp, #16
 801bd2a:	af00      	add	r7, sp, #0
 801bd2c:	6078      	str	r0, [r7, #4]
 801bd2e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 801bd30:	683b      	ldr	r3, [r7, #0]
 801bd32:	331a      	adds	r3, #26
 801bd34:	4618      	mov	r0, r3
 801bd36:	f7fe ffc1 	bl	801acbc <ld_word>
 801bd3a:	4603      	mov	r3, r0
 801bd3c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 801bd3e:	687b      	ldr	r3, [r7, #4]
 801bd40:	781b      	ldrb	r3, [r3, #0]
 801bd42:	2b03      	cmp	r3, #3
 801bd44:	d109      	bne.n	801bd5a <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 801bd46:	683b      	ldr	r3, [r7, #0]
 801bd48:	3314      	adds	r3, #20
 801bd4a:	4618      	mov	r0, r3
 801bd4c:	f7fe ffb6 	bl	801acbc <ld_word>
 801bd50:	4603      	mov	r3, r0
 801bd52:	041b      	lsls	r3, r3, #16
 801bd54:	68fa      	ldr	r2, [r7, #12]
 801bd56:	4313      	orrs	r3, r2
 801bd58:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 801bd5a:	68fb      	ldr	r3, [r7, #12]
}
 801bd5c:	4618      	mov	r0, r3
 801bd5e:	3710      	adds	r7, #16
 801bd60:	46bd      	mov	sp, r7
 801bd62:	bd80      	pop	{r7, pc}

0801bd64 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 801bd64:	b580      	push	{r7, lr}
 801bd66:	b084      	sub	sp, #16
 801bd68:	af00      	add	r7, sp, #0
 801bd6a:	60f8      	str	r0, [r7, #12]
 801bd6c:	60b9      	str	r1, [r7, #8]
 801bd6e:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 801bd70:	68bb      	ldr	r3, [r7, #8]
 801bd72:	331a      	adds	r3, #26
 801bd74:	687a      	ldr	r2, [r7, #4]
 801bd76:	b292      	uxth	r2, r2
 801bd78:	4611      	mov	r1, r2
 801bd7a:	4618      	mov	r0, r3
 801bd7c:	f7fe ffd9 	bl	801ad32 <st_word>
	if (fs->fs_type == FS_FAT32) {
 801bd80:	68fb      	ldr	r3, [r7, #12]
 801bd82:	781b      	ldrb	r3, [r3, #0]
 801bd84:	2b03      	cmp	r3, #3
 801bd86:	d109      	bne.n	801bd9c <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 801bd88:	68bb      	ldr	r3, [r7, #8]
 801bd8a:	f103 0214 	add.w	r2, r3, #20
 801bd8e:	687b      	ldr	r3, [r7, #4]
 801bd90:	0c1b      	lsrs	r3, r3, #16
 801bd92:	b29b      	uxth	r3, r3
 801bd94:	4619      	mov	r1, r3
 801bd96:	4610      	mov	r0, r2
 801bd98:	f7fe ffcb 	bl	801ad32 <st_word>
	}
}
 801bd9c:	bf00      	nop
 801bd9e:	3710      	adds	r7, #16
 801bda0:	46bd      	mov	sp, r7
 801bda2:	bd80      	pop	{r7, pc}

0801bda4 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 801bda4:	b590      	push	{r4, r7, lr}
 801bda6:	b087      	sub	sp, #28
 801bda8:	af00      	add	r7, sp, #0
 801bdaa:	6078      	str	r0, [r7, #4]
 801bdac:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 801bdae:	683b      	ldr	r3, [r7, #0]
 801bdb0:	331a      	adds	r3, #26
 801bdb2:	4618      	mov	r0, r3
 801bdb4:	f7fe ff82 	bl	801acbc <ld_word>
 801bdb8:	4603      	mov	r3, r0
 801bdba:	2b00      	cmp	r3, #0
 801bdbc:	d001      	beq.n	801bdc2 <cmp_lfn+0x1e>
 801bdbe:	2300      	movs	r3, #0
 801bdc0:	e059      	b.n	801be76 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 801bdc2:	683b      	ldr	r3, [r7, #0]
 801bdc4:	781b      	ldrb	r3, [r3, #0]
 801bdc6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801bdca:	1e5a      	subs	r2, r3, #1
 801bdcc:	4613      	mov	r3, r2
 801bdce:	005b      	lsls	r3, r3, #1
 801bdd0:	4413      	add	r3, r2
 801bdd2:	009b      	lsls	r3, r3, #2
 801bdd4:	4413      	add	r3, r2
 801bdd6:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 801bdd8:	2301      	movs	r3, #1
 801bdda:	81fb      	strh	r3, [r7, #14]
 801bddc:	2300      	movs	r3, #0
 801bdde:	613b      	str	r3, [r7, #16]
 801bde0:	e033      	b.n	801be4a <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 801bde2:	4a27      	ldr	r2, [pc, #156]	@ (801be80 <cmp_lfn+0xdc>)
 801bde4:	693b      	ldr	r3, [r7, #16]
 801bde6:	4413      	add	r3, r2
 801bde8:	781b      	ldrb	r3, [r3, #0]
 801bdea:	461a      	mov	r2, r3
 801bdec:	683b      	ldr	r3, [r7, #0]
 801bdee:	4413      	add	r3, r2
 801bdf0:	4618      	mov	r0, r3
 801bdf2:	f7fe ff63 	bl	801acbc <ld_word>
 801bdf6:	4603      	mov	r3, r0
 801bdf8:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 801bdfa:	89fb      	ldrh	r3, [r7, #14]
 801bdfc:	2b00      	cmp	r3, #0
 801bdfe:	d01a      	beq.n	801be36 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 801be00:	697b      	ldr	r3, [r7, #20]
 801be02:	2bfe      	cmp	r3, #254	@ 0xfe
 801be04:	d812      	bhi.n	801be2c <cmp_lfn+0x88>
 801be06:	89bb      	ldrh	r3, [r7, #12]
 801be08:	4618      	mov	r0, r3
 801be0a:	f001 ff71 	bl	801dcf0 <ff_wtoupper>
 801be0e:	4603      	mov	r3, r0
 801be10:	461c      	mov	r4, r3
 801be12:	697b      	ldr	r3, [r7, #20]
 801be14:	1c5a      	adds	r2, r3, #1
 801be16:	617a      	str	r2, [r7, #20]
 801be18:	005b      	lsls	r3, r3, #1
 801be1a:	687a      	ldr	r2, [r7, #4]
 801be1c:	4413      	add	r3, r2
 801be1e:	881b      	ldrh	r3, [r3, #0]
 801be20:	4618      	mov	r0, r3
 801be22:	f001 ff65 	bl	801dcf0 <ff_wtoupper>
 801be26:	4603      	mov	r3, r0
 801be28:	429c      	cmp	r4, r3
 801be2a:	d001      	beq.n	801be30 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 801be2c:	2300      	movs	r3, #0
 801be2e:	e022      	b.n	801be76 <cmp_lfn+0xd2>
			}
			wc = uc;
 801be30:	89bb      	ldrh	r3, [r7, #12]
 801be32:	81fb      	strh	r3, [r7, #14]
 801be34:	e006      	b.n	801be44 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 801be36:	89bb      	ldrh	r3, [r7, #12]
 801be38:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801be3c:	4293      	cmp	r3, r2
 801be3e:	d001      	beq.n	801be44 <cmp_lfn+0xa0>
 801be40:	2300      	movs	r3, #0
 801be42:	e018      	b.n	801be76 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 801be44:	693b      	ldr	r3, [r7, #16]
 801be46:	3301      	adds	r3, #1
 801be48:	613b      	str	r3, [r7, #16]
 801be4a:	693b      	ldr	r3, [r7, #16]
 801be4c:	2b0c      	cmp	r3, #12
 801be4e:	d9c8      	bls.n	801bde2 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 801be50:	683b      	ldr	r3, [r7, #0]
 801be52:	781b      	ldrb	r3, [r3, #0]
 801be54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801be58:	2b00      	cmp	r3, #0
 801be5a:	d00b      	beq.n	801be74 <cmp_lfn+0xd0>
 801be5c:	89fb      	ldrh	r3, [r7, #14]
 801be5e:	2b00      	cmp	r3, #0
 801be60:	d008      	beq.n	801be74 <cmp_lfn+0xd0>
 801be62:	697b      	ldr	r3, [r7, #20]
 801be64:	005b      	lsls	r3, r3, #1
 801be66:	687a      	ldr	r2, [r7, #4]
 801be68:	4413      	add	r3, r2
 801be6a:	881b      	ldrh	r3, [r3, #0]
 801be6c:	2b00      	cmp	r3, #0
 801be6e:	d001      	beq.n	801be74 <cmp_lfn+0xd0>
 801be70:	2300      	movs	r3, #0
 801be72:	e000      	b.n	801be76 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 801be74:	2301      	movs	r3, #1
}
 801be76:	4618      	mov	r0, r3
 801be78:	371c      	adds	r7, #28
 801be7a:	46bd      	mov	sp, r7
 801be7c:	bd90      	pop	{r4, r7, pc}
 801be7e:	bf00      	nop
 801be80:	0801e98c 	.word	0x0801e98c

0801be84 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 801be84:	b580      	push	{r7, lr}
 801be86:	b086      	sub	sp, #24
 801be88:	af00      	add	r7, sp, #0
 801be8a:	6078      	str	r0, [r7, #4]
 801be8c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 801be8e:	683b      	ldr	r3, [r7, #0]
 801be90:	331a      	adds	r3, #26
 801be92:	4618      	mov	r0, r3
 801be94:	f7fe ff12 	bl	801acbc <ld_word>
 801be98:	4603      	mov	r3, r0
 801be9a:	2b00      	cmp	r3, #0
 801be9c:	d001      	beq.n	801bea2 <pick_lfn+0x1e>
 801be9e:	2300      	movs	r3, #0
 801bea0:	e04d      	b.n	801bf3e <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 801bea2:	683b      	ldr	r3, [r7, #0]
 801bea4:	781b      	ldrb	r3, [r3, #0]
 801bea6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801beaa:	1e5a      	subs	r2, r3, #1
 801beac:	4613      	mov	r3, r2
 801beae:	005b      	lsls	r3, r3, #1
 801beb0:	4413      	add	r3, r2
 801beb2:	009b      	lsls	r3, r3, #2
 801beb4:	4413      	add	r3, r2
 801beb6:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 801beb8:	2301      	movs	r3, #1
 801beba:	81fb      	strh	r3, [r7, #14]
 801bebc:	2300      	movs	r3, #0
 801bebe:	613b      	str	r3, [r7, #16]
 801bec0:	e028      	b.n	801bf14 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 801bec2:	4a21      	ldr	r2, [pc, #132]	@ (801bf48 <pick_lfn+0xc4>)
 801bec4:	693b      	ldr	r3, [r7, #16]
 801bec6:	4413      	add	r3, r2
 801bec8:	781b      	ldrb	r3, [r3, #0]
 801beca:	461a      	mov	r2, r3
 801becc:	683b      	ldr	r3, [r7, #0]
 801bece:	4413      	add	r3, r2
 801bed0:	4618      	mov	r0, r3
 801bed2:	f7fe fef3 	bl	801acbc <ld_word>
 801bed6:	4603      	mov	r3, r0
 801bed8:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 801beda:	89fb      	ldrh	r3, [r7, #14]
 801bedc:	2b00      	cmp	r3, #0
 801bede:	d00f      	beq.n	801bf00 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 801bee0:	697b      	ldr	r3, [r7, #20]
 801bee2:	2bfe      	cmp	r3, #254	@ 0xfe
 801bee4:	d901      	bls.n	801beea <pick_lfn+0x66>
 801bee6:	2300      	movs	r3, #0
 801bee8:	e029      	b.n	801bf3e <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 801beea:	89bb      	ldrh	r3, [r7, #12]
 801beec:	81fb      	strh	r3, [r7, #14]
 801beee:	697b      	ldr	r3, [r7, #20]
 801bef0:	1c5a      	adds	r2, r3, #1
 801bef2:	617a      	str	r2, [r7, #20]
 801bef4:	005b      	lsls	r3, r3, #1
 801bef6:	687a      	ldr	r2, [r7, #4]
 801bef8:	4413      	add	r3, r2
 801befa:	89fa      	ldrh	r2, [r7, #14]
 801befc:	801a      	strh	r2, [r3, #0]
 801befe:	e006      	b.n	801bf0e <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 801bf00:	89bb      	ldrh	r3, [r7, #12]
 801bf02:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801bf06:	4293      	cmp	r3, r2
 801bf08:	d001      	beq.n	801bf0e <pick_lfn+0x8a>
 801bf0a:	2300      	movs	r3, #0
 801bf0c:	e017      	b.n	801bf3e <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 801bf0e:	693b      	ldr	r3, [r7, #16]
 801bf10:	3301      	adds	r3, #1
 801bf12:	613b      	str	r3, [r7, #16]
 801bf14:	693b      	ldr	r3, [r7, #16]
 801bf16:	2b0c      	cmp	r3, #12
 801bf18:	d9d3      	bls.n	801bec2 <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 801bf1a:	683b      	ldr	r3, [r7, #0]
 801bf1c:	781b      	ldrb	r3, [r3, #0]
 801bf1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801bf22:	2b00      	cmp	r3, #0
 801bf24:	d00a      	beq.n	801bf3c <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 801bf26:	697b      	ldr	r3, [r7, #20]
 801bf28:	2bfe      	cmp	r3, #254	@ 0xfe
 801bf2a:	d901      	bls.n	801bf30 <pick_lfn+0xac>
 801bf2c:	2300      	movs	r3, #0
 801bf2e:	e006      	b.n	801bf3e <pick_lfn+0xba>
		lfnbuf[i] = 0;
 801bf30:	697b      	ldr	r3, [r7, #20]
 801bf32:	005b      	lsls	r3, r3, #1
 801bf34:	687a      	ldr	r2, [r7, #4]
 801bf36:	4413      	add	r3, r2
 801bf38:	2200      	movs	r2, #0
 801bf3a:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 801bf3c:	2301      	movs	r3, #1
}
 801bf3e:	4618      	mov	r0, r3
 801bf40:	3718      	adds	r7, #24
 801bf42:	46bd      	mov	sp, r7
 801bf44:	bd80      	pop	{r7, pc}
 801bf46:	bf00      	nop
 801bf48:	0801e98c 	.word	0x0801e98c

0801bf4c <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 801bf4c:	b580      	push	{r7, lr}
 801bf4e:	b088      	sub	sp, #32
 801bf50:	af00      	add	r7, sp, #0
 801bf52:	60f8      	str	r0, [r7, #12]
 801bf54:	60b9      	str	r1, [r7, #8]
 801bf56:	4611      	mov	r1, r2
 801bf58:	461a      	mov	r2, r3
 801bf5a:	460b      	mov	r3, r1
 801bf5c:	71fb      	strb	r3, [r7, #7]
 801bf5e:	4613      	mov	r3, r2
 801bf60:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 801bf62:	68bb      	ldr	r3, [r7, #8]
 801bf64:	330d      	adds	r3, #13
 801bf66:	79ba      	ldrb	r2, [r7, #6]
 801bf68:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 801bf6a:	68bb      	ldr	r3, [r7, #8]
 801bf6c:	330b      	adds	r3, #11
 801bf6e:	220f      	movs	r2, #15
 801bf70:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 801bf72:	68bb      	ldr	r3, [r7, #8]
 801bf74:	330c      	adds	r3, #12
 801bf76:	2200      	movs	r2, #0
 801bf78:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 801bf7a:	68bb      	ldr	r3, [r7, #8]
 801bf7c:	331a      	adds	r3, #26
 801bf7e:	2100      	movs	r1, #0
 801bf80:	4618      	mov	r0, r3
 801bf82:	f7fe fed6 	bl	801ad32 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 801bf86:	79fb      	ldrb	r3, [r7, #7]
 801bf88:	1e5a      	subs	r2, r3, #1
 801bf8a:	4613      	mov	r3, r2
 801bf8c:	005b      	lsls	r3, r3, #1
 801bf8e:	4413      	add	r3, r2
 801bf90:	009b      	lsls	r3, r3, #2
 801bf92:	4413      	add	r3, r2
 801bf94:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 801bf96:	2300      	movs	r3, #0
 801bf98:	82fb      	strh	r3, [r7, #22]
 801bf9a:	2300      	movs	r3, #0
 801bf9c:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 801bf9e:	8afb      	ldrh	r3, [r7, #22]
 801bfa0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801bfa4:	4293      	cmp	r3, r2
 801bfa6:	d007      	beq.n	801bfb8 <put_lfn+0x6c>
 801bfa8:	69fb      	ldr	r3, [r7, #28]
 801bfaa:	1c5a      	adds	r2, r3, #1
 801bfac:	61fa      	str	r2, [r7, #28]
 801bfae:	005b      	lsls	r3, r3, #1
 801bfb0:	68fa      	ldr	r2, [r7, #12]
 801bfb2:	4413      	add	r3, r2
 801bfb4:	881b      	ldrh	r3, [r3, #0]
 801bfb6:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 801bfb8:	4a17      	ldr	r2, [pc, #92]	@ (801c018 <put_lfn+0xcc>)
 801bfba:	69bb      	ldr	r3, [r7, #24]
 801bfbc:	4413      	add	r3, r2
 801bfbe:	781b      	ldrb	r3, [r3, #0]
 801bfc0:	461a      	mov	r2, r3
 801bfc2:	68bb      	ldr	r3, [r7, #8]
 801bfc4:	4413      	add	r3, r2
 801bfc6:	8afa      	ldrh	r2, [r7, #22]
 801bfc8:	4611      	mov	r1, r2
 801bfca:	4618      	mov	r0, r3
 801bfcc:	f7fe feb1 	bl	801ad32 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 801bfd0:	8afb      	ldrh	r3, [r7, #22]
 801bfd2:	2b00      	cmp	r3, #0
 801bfd4:	d102      	bne.n	801bfdc <put_lfn+0x90>
 801bfd6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801bfda:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 801bfdc:	69bb      	ldr	r3, [r7, #24]
 801bfde:	3301      	adds	r3, #1
 801bfe0:	61bb      	str	r3, [r7, #24]
 801bfe2:	69bb      	ldr	r3, [r7, #24]
 801bfe4:	2b0c      	cmp	r3, #12
 801bfe6:	d9da      	bls.n	801bf9e <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 801bfe8:	8afb      	ldrh	r3, [r7, #22]
 801bfea:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801bfee:	4293      	cmp	r3, r2
 801bff0:	d006      	beq.n	801c000 <put_lfn+0xb4>
 801bff2:	69fb      	ldr	r3, [r7, #28]
 801bff4:	005b      	lsls	r3, r3, #1
 801bff6:	68fa      	ldr	r2, [r7, #12]
 801bff8:	4413      	add	r3, r2
 801bffa:	881b      	ldrh	r3, [r3, #0]
 801bffc:	2b00      	cmp	r3, #0
 801bffe:	d103      	bne.n	801c008 <put_lfn+0xbc>
 801c000:	79fb      	ldrb	r3, [r7, #7]
 801c002:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801c006:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 801c008:	68bb      	ldr	r3, [r7, #8]
 801c00a:	79fa      	ldrb	r2, [r7, #7]
 801c00c:	701a      	strb	r2, [r3, #0]
}
 801c00e:	bf00      	nop
 801c010:	3720      	adds	r7, #32
 801c012:	46bd      	mov	sp, r7
 801c014:	bd80      	pop	{r7, pc}
 801c016:	bf00      	nop
 801c018:	0801e98c 	.word	0x0801e98c

0801c01c <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 801c01c:	b580      	push	{r7, lr}
 801c01e:	b08c      	sub	sp, #48	@ 0x30
 801c020:	af00      	add	r7, sp, #0
 801c022:	60f8      	str	r0, [r7, #12]
 801c024:	60b9      	str	r1, [r7, #8]
 801c026:	607a      	str	r2, [r7, #4]
 801c028:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 801c02a:	220b      	movs	r2, #11
 801c02c:	68b9      	ldr	r1, [r7, #8]
 801c02e:	68f8      	ldr	r0, [r7, #12]
 801c030:	f7fe fec6 	bl	801adc0 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 801c034:	683b      	ldr	r3, [r7, #0]
 801c036:	2b05      	cmp	r3, #5
 801c038:	d929      	bls.n	801c08e <gen_numname+0x72>
		sr = seq;
 801c03a:	683b      	ldr	r3, [r7, #0]
 801c03c:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 801c03e:	e020      	b.n	801c082 <gen_numname+0x66>
			wc = *lfn++;
 801c040:	687b      	ldr	r3, [r7, #4]
 801c042:	1c9a      	adds	r2, r3, #2
 801c044:	607a      	str	r2, [r7, #4]
 801c046:	881b      	ldrh	r3, [r3, #0]
 801c048:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 801c04a:	2300      	movs	r3, #0
 801c04c:	62bb      	str	r3, [r7, #40]	@ 0x28
 801c04e:	e015      	b.n	801c07c <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 801c050:	69fb      	ldr	r3, [r7, #28]
 801c052:	005a      	lsls	r2, r3, #1
 801c054:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801c056:	f003 0301 	and.w	r3, r3, #1
 801c05a:	4413      	add	r3, r2
 801c05c:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 801c05e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801c060:	085b      	lsrs	r3, r3, #1
 801c062:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 801c064:	69fb      	ldr	r3, [r7, #28]
 801c066:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801c06a:	2b00      	cmp	r3, #0
 801c06c:	d003      	beq.n	801c076 <gen_numname+0x5a>
 801c06e:	69fa      	ldr	r2, [r7, #28]
 801c070:	4b30      	ldr	r3, [pc, #192]	@ (801c134 <gen_numname+0x118>)
 801c072:	4053      	eors	r3, r2
 801c074:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 801c076:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c078:	3301      	adds	r3, #1
 801c07a:	62bb      	str	r3, [r7, #40]	@ 0x28
 801c07c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c07e:	2b0f      	cmp	r3, #15
 801c080:	d9e6      	bls.n	801c050 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 801c082:	687b      	ldr	r3, [r7, #4]
 801c084:	881b      	ldrh	r3, [r3, #0]
 801c086:	2b00      	cmp	r3, #0
 801c088:	d1da      	bne.n	801c040 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 801c08a:	69fb      	ldr	r3, [r7, #28]
 801c08c:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 801c08e:	2307      	movs	r3, #7
 801c090:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 801c092:	683b      	ldr	r3, [r7, #0]
 801c094:	b2db      	uxtb	r3, r3
 801c096:	f003 030f 	and.w	r3, r3, #15
 801c09a:	b2db      	uxtb	r3, r3
 801c09c:	3330      	adds	r3, #48	@ 0x30
 801c09e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 801c0a2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801c0a6:	2b39      	cmp	r3, #57	@ 0x39
 801c0a8:	d904      	bls.n	801c0b4 <gen_numname+0x98>
 801c0aa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801c0ae:	3307      	adds	r3, #7
 801c0b0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 801c0b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c0b6:	1e5a      	subs	r2, r3, #1
 801c0b8:	62ba      	str	r2, [r7, #40]	@ 0x28
 801c0ba:	3330      	adds	r3, #48	@ 0x30
 801c0bc:	443b      	add	r3, r7
 801c0be:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 801c0c2:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 801c0c6:	683b      	ldr	r3, [r7, #0]
 801c0c8:	091b      	lsrs	r3, r3, #4
 801c0ca:	603b      	str	r3, [r7, #0]
	} while (seq);
 801c0cc:	683b      	ldr	r3, [r7, #0]
 801c0ce:	2b00      	cmp	r3, #0
 801c0d0:	d1df      	bne.n	801c092 <gen_numname+0x76>
	ns[i] = '~';
 801c0d2:	f107 0214 	add.w	r2, r7, #20
 801c0d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c0d8:	4413      	add	r3, r2
 801c0da:	227e      	movs	r2, #126	@ 0x7e
 801c0dc:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 801c0de:	2300      	movs	r3, #0
 801c0e0:	627b      	str	r3, [r7, #36]	@ 0x24
 801c0e2:	e002      	b.n	801c0ea <gen_numname+0xce>
 801c0e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c0e6:	3301      	adds	r3, #1
 801c0e8:	627b      	str	r3, [r7, #36]	@ 0x24
 801c0ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801c0ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c0ee:	429a      	cmp	r2, r3
 801c0f0:	d205      	bcs.n	801c0fe <gen_numname+0xe2>
 801c0f2:	68fa      	ldr	r2, [r7, #12]
 801c0f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c0f6:	4413      	add	r3, r2
 801c0f8:	781b      	ldrb	r3, [r3, #0]
 801c0fa:	2b20      	cmp	r3, #32
 801c0fc:	d1f2      	bne.n	801c0e4 <gen_numname+0xc8>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 801c0fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c100:	2b07      	cmp	r3, #7
 801c102:	d807      	bhi.n	801c114 <gen_numname+0xf8>
 801c104:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c106:	1c5a      	adds	r2, r3, #1
 801c108:	62ba      	str	r2, [r7, #40]	@ 0x28
 801c10a:	3330      	adds	r3, #48	@ 0x30
 801c10c:	443b      	add	r3, r7
 801c10e:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 801c112:	e000      	b.n	801c116 <gen_numname+0xfa>
 801c114:	2120      	movs	r1, #32
 801c116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c118:	1c5a      	adds	r2, r3, #1
 801c11a:	627a      	str	r2, [r7, #36]	@ 0x24
 801c11c:	68fa      	ldr	r2, [r7, #12]
 801c11e:	4413      	add	r3, r2
 801c120:	460a      	mov	r2, r1
 801c122:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 801c124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c126:	2b07      	cmp	r3, #7
 801c128:	d9e9      	bls.n	801c0fe <gen_numname+0xe2>
}
 801c12a:	bf00      	nop
 801c12c:	bf00      	nop
 801c12e:	3730      	adds	r7, #48	@ 0x30
 801c130:	46bd      	mov	sp, r7
 801c132:	bd80      	pop	{r7, pc}
 801c134:	00011021 	.word	0x00011021

0801c138 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 801c138:	b480      	push	{r7}
 801c13a:	b085      	sub	sp, #20
 801c13c:	af00      	add	r7, sp, #0
 801c13e:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 801c140:	2300      	movs	r3, #0
 801c142:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 801c144:	230b      	movs	r3, #11
 801c146:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 801c148:	7bfb      	ldrb	r3, [r7, #15]
 801c14a:	b2da      	uxtb	r2, r3
 801c14c:	0852      	lsrs	r2, r2, #1
 801c14e:	01db      	lsls	r3, r3, #7
 801c150:	4313      	orrs	r3, r2
 801c152:	b2da      	uxtb	r2, r3
 801c154:	687b      	ldr	r3, [r7, #4]
 801c156:	1c59      	adds	r1, r3, #1
 801c158:	6079      	str	r1, [r7, #4]
 801c15a:	781b      	ldrb	r3, [r3, #0]
 801c15c:	4413      	add	r3, r2
 801c15e:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 801c160:	68bb      	ldr	r3, [r7, #8]
 801c162:	3b01      	subs	r3, #1
 801c164:	60bb      	str	r3, [r7, #8]
 801c166:	68bb      	ldr	r3, [r7, #8]
 801c168:	2b00      	cmp	r3, #0
 801c16a:	d1ed      	bne.n	801c148 <sum_sfn+0x10>
	return sum;
 801c16c:	7bfb      	ldrb	r3, [r7, #15]
}
 801c16e:	4618      	mov	r0, r3
 801c170:	3714      	adds	r7, #20
 801c172:	46bd      	mov	sp, r7
 801c174:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c178:	4770      	bx	lr

0801c17a <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 801c17a:	b580      	push	{r7, lr}
 801c17c:	b086      	sub	sp, #24
 801c17e:	af00      	add	r7, sp, #0
 801c180:	6078      	str	r0, [r7, #4]
 801c182:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 801c184:	2304      	movs	r3, #4
 801c186:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 801c188:	687b      	ldr	r3, [r7, #4]
 801c18a:	681b      	ldr	r3, [r3, #0]
 801c18c:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 801c18e:	23ff      	movs	r3, #255	@ 0xff
 801c190:	757b      	strb	r3, [r7, #21]
 801c192:	23ff      	movs	r3, #255	@ 0xff
 801c194:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 801c196:	e081      	b.n	801c29c <dir_read+0x122>
		res = move_window(fs, dp->sect);
 801c198:	687b      	ldr	r3, [r7, #4]
 801c19a:	69db      	ldr	r3, [r3, #28]
 801c19c:	4619      	mov	r1, r3
 801c19e:	6938      	ldr	r0, [r7, #16]
 801c1a0:	f7ff f83c 	bl	801b21c <move_window>
 801c1a4:	4603      	mov	r3, r0
 801c1a6:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801c1a8:	7dfb      	ldrb	r3, [r7, #23]
 801c1aa:	2b00      	cmp	r3, #0
 801c1ac:	d17c      	bne.n	801c2a8 <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 801c1ae:	687b      	ldr	r3, [r7, #4]
 801c1b0:	6a1b      	ldr	r3, [r3, #32]
 801c1b2:	781b      	ldrb	r3, [r3, #0]
 801c1b4:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 801c1b6:	7dbb      	ldrb	r3, [r7, #22]
 801c1b8:	2b00      	cmp	r3, #0
 801c1ba:	d102      	bne.n	801c1c2 <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 801c1bc:	2304      	movs	r3, #4
 801c1be:	75fb      	strb	r3, [r7, #23]
 801c1c0:	e077      	b.n	801c2b2 <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 801c1c2:	687b      	ldr	r3, [r7, #4]
 801c1c4:	6a1b      	ldr	r3, [r3, #32]
 801c1c6:	330b      	adds	r3, #11
 801c1c8:	781b      	ldrb	r3, [r3, #0]
 801c1ca:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801c1ce:	73fb      	strb	r3, [r7, #15]
 801c1d0:	687b      	ldr	r3, [r7, #4]
 801c1d2:	7bfa      	ldrb	r2, [r7, #15]
 801c1d4:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 801c1d6:	7dbb      	ldrb	r3, [r7, #22]
 801c1d8:	2be5      	cmp	r3, #229	@ 0xe5
 801c1da:	d00e      	beq.n	801c1fa <dir_read+0x80>
 801c1dc:	7dbb      	ldrb	r3, [r7, #22]
 801c1de:	2b2e      	cmp	r3, #46	@ 0x2e
 801c1e0:	d00b      	beq.n	801c1fa <dir_read+0x80>
 801c1e2:	7bfb      	ldrb	r3, [r7, #15]
 801c1e4:	f023 0320 	bic.w	r3, r3, #32
 801c1e8:	2b08      	cmp	r3, #8
 801c1ea:	bf0c      	ite	eq
 801c1ec:	2301      	moveq	r3, #1
 801c1ee:	2300      	movne	r3, #0
 801c1f0:	b2db      	uxtb	r3, r3
 801c1f2:	461a      	mov	r2, r3
 801c1f4:	683b      	ldr	r3, [r7, #0]
 801c1f6:	4293      	cmp	r3, r2
 801c1f8:	d002      	beq.n	801c200 <dir_read+0x86>
				ord = 0xFF;
 801c1fa:	23ff      	movs	r3, #255	@ 0xff
 801c1fc:	757b      	strb	r3, [r7, #21]
 801c1fe:	e044      	b.n	801c28a <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 801c200:	7bfb      	ldrb	r3, [r7, #15]
 801c202:	2b0f      	cmp	r3, #15
 801c204:	d12f      	bne.n	801c266 <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 801c206:	7dbb      	ldrb	r3, [r7, #22]
 801c208:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801c20c:	2b00      	cmp	r3, #0
 801c20e:	d00d      	beq.n	801c22c <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 801c210:	687b      	ldr	r3, [r7, #4]
 801c212:	6a1b      	ldr	r3, [r3, #32]
 801c214:	7b5b      	ldrb	r3, [r3, #13]
 801c216:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 801c218:	7dbb      	ldrb	r3, [r7, #22]
 801c21a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801c21e:	75bb      	strb	r3, [r7, #22]
 801c220:	7dbb      	ldrb	r3, [r7, #22]
 801c222:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 801c224:	687b      	ldr	r3, [r7, #4]
 801c226:	695a      	ldr	r2, [r3, #20]
 801c228:	687b      	ldr	r3, [r7, #4]
 801c22a:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 801c22c:	7dba      	ldrb	r2, [r7, #22]
 801c22e:	7d7b      	ldrb	r3, [r7, #21]
 801c230:	429a      	cmp	r2, r3
 801c232:	d115      	bne.n	801c260 <dir_read+0xe6>
 801c234:	687b      	ldr	r3, [r7, #4]
 801c236:	6a1b      	ldr	r3, [r3, #32]
 801c238:	330d      	adds	r3, #13
 801c23a:	781b      	ldrb	r3, [r3, #0]
 801c23c:	7d3a      	ldrb	r2, [r7, #20]
 801c23e:	429a      	cmp	r2, r3
 801c240:	d10e      	bne.n	801c260 <dir_read+0xe6>
 801c242:	693b      	ldr	r3, [r7, #16]
 801c244:	691a      	ldr	r2, [r3, #16]
 801c246:	687b      	ldr	r3, [r7, #4]
 801c248:	6a1b      	ldr	r3, [r3, #32]
 801c24a:	4619      	mov	r1, r3
 801c24c:	4610      	mov	r0, r2
 801c24e:	f7ff fe19 	bl	801be84 <pick_lfn>
 801c252:	4603      	mov	r3, r0
 801c254:	2b00      	cmp	r3, #0
 801c256:	d003      	beq.n	801c260 <dir_read+0xe6>
 801c258:	7d7b      	ldrb	r3, [r7, #21]
 801c25a:	3b01      	subs	r3, #1
 801c25c:	b2db      	uxtb	r3, r3
 801c25e:	e000      	b.n	801c262 <dir_read+0xe8>
 801c260:	23ff      	movs	r3, #255	@ 0xff
 801c262:	757b      	strb	r3, [r7, #21]
 801c264:	e011      	b.n	801c28a <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 801c266:	7d7b      	ldrb	r3, [r7, #21]
 801c268:	2b00      	cmp	r3, #0
 801c26a:	d109      	bne.n	801c280 <dir_read+0x106>
 801c26c:	687b      	ldr	r3, [r7, #4]
 801c26e:	6a1b      	ldr	r3, [r3, #32]
 801c270:	4618      	mov	r0, r3
 801c272:	f7ff ff61 	bl	801c138 <sum_sfn>
 801c276:	4603      	mov	r3, r0
 801c278:	461a      	mov	r2, r3
 801c27a:	7d3b      	ldrb	r3, [r7, #20]
 801c27c:	4293      	cmp	r3, r2
 801c27e:	d015      	beq.n	801c2ac <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 801c280:	687b      	ldr	r3, [r7, #4]
 801c282:	f04f 32ff 	mov.w	r2, #4294967295
 801c286:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					break;
 801c288:	e010      	b.n	801c2ac <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 801c28a:	2100      	movs	r1, #0
 801c28c:	6878      	ldr	r0, [r7, #4]
 801c28e:	f7ff fc2d 	bl	801baec <dir_next>
 801c292:	4603      	mov	r3, r0
 801c294:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801c296:	7dfb      	ldrb	r3, [r7, #23]
 801c298:	2b00      	cmp	r3, #0
 801c29a:	d109      	bne.n	801c2b0 <dir_read+0x136>
	while (dp->sect) {
 801c29c:	687b      	ldr	r3, [r7, #4]
 801c29e:	69db      	ldr	r3, [r3, #28]
 801c2a0:	2b00      	cmp	r3, #0
 801c2a2:	f47f af79 	bne.w	801c198 <dir_read+0x1e>
 801c2a6:	e004      	b.n	801c2b2 <dir_read+0x138>
		if (res != FR_OK) break;
 801c2a8:	bf00      	nop
 801c2aa:	e002      	b.n	801c2b2 <dir_read+0x138>
					break;
 801c2ac:	bf00      	nop
 801c2ae:	e000      	b.n	801c2b2 <dir_read+0x138>
		if (res != FR_OK) break;
 801c2b0:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 801c2b2:	7dfb      	ldrb	r3, [r7, #23]
 801c2b4:	2b00      	cmp	r3, #0
 801c2b6:	d002      	beq.n	801c2be <dir_read+0x144>
 801c2b8:	687b      	ldr	r3, [r7, #4]
 801c2ba:	2200      	movs	r2, #0
 801c2bc:	61da      	str	r2, [r3, #28]
	return res;
 801c2be:	7dfb      	ldrb	r3, [r7, #23]
}
 801c2c0:	4618      	mov	r0, r3
 801c2c2:	3718      	adds	r7, #24
 801c2c4:	46bd      	mov	sp, r7
 801c2c6:	bd80      	pop	{r7, pc}

0801c2c8 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 801c2c8:	b580      	push	{r7, lr}
 801c2ca:	b086      	sub	sp, #24
 801c2cc:	af00      	add	r7, sp, #0
 801c2ce:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801c2d0:	687b      	ldr	r3, [r7, #4]
 801c2d2:	681b      	ldr	r3, [r3, #0]
 801c2d4:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 801c2d6:	2100      	movs	r1, #0
 801c2d8:	6878      	ldr	r0, [r7, #4]
 801c2da:	f7ff fb7e 	bl	801b9da <dir_sdi>
 801c2de:	4603      	mov	r3, r0
 801c2e0:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 801c2e2:	7dfb      	ldrb	r3, [r7, #23]
 801c2e4:	2b00      	cmp	r3, #0
 801c2e6:	d001      	beq.n	801c2ec <dir_find+0x24>
 801c2e8:	7dfb      	ldrb	r3, [r7, #23]
 801c2ea:	e0a9      	b.n	801c440 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 801c2ec:	23ff      	movs	r3, #255	@ 0xff
 801c2ee:	753b      	strb	r3, [r7, #20]
 801c2f0:	7d3b      	ldrb	r3, [r7, #20]
 801c2f2:	757b      	strb	r3, [r7, #21]
 801c2f4:	687b      	ldr	r3, [r7, #4]
 801c2f6:	f04f 32ff 	mov.w	r2, #4294967295
 801c2fa:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 801c2fc:	687b      	ldr	r3, [r7, #4]
 801c2fe:	69db      	ldr	r3, [r3, #28]
 801c300:	4619      	mov	r1, r3
 801c302:	6938      	ldr	r0, [r7, #16]
 801c304:	f7fe ff8a 	bl	801b21c <move_window>
 801c308:	4603      	mov	r3, r0
 801c30a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801c30c:	7dfb      	ldrb	r3, [r7, #23]
 801c30e:	2b00      	cmp	r3, #0
 801c310:	f040 8090 	bne.w	801c434 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 801c314:	687b      	ldr	r3, [r7, #4]
 801c316:	6a1b      	ldr	r3, [r3, #32]
 801c318:	781b      	ldrb	r3, [r3, #0]
 801c31a:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 801c31c:	7dbb      	ldrb	r3, [r7, #22]
 801c31e:	2b00      	cmp	r3, #0
 801c320:	d102      	bne.n	801c328 <dir_find+0x60>
 801c322:	2304      	movs	r3, #4
 801c324:	75fb      	strb	r3, [r7, #23]
 801c326:	e08a      	b.n	801c43e <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 801c328:	687b      	ldr	r3, [r7, #4]
 801c32a:	6a1b      	ldr	r3, [r3, #32]
 801c32c:	330b      	adds	r3, #11
 801c32e:	781b      	ldrb	r3, [r3, #0]
 801c330:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801c334:	73fb      	strb	r3, [r7, #15]
 801c336:	687b      	ldr	r3, [r7, #4]
 801c338:	7bfa      	ldrb	r2, [r7, #15]
 801c33a:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 801c33c:	7dbb      	ldrb	r3, [r7, #22]
 801c33e:	2be5      	cmp	r3, #229	@ 0xe5
 801c340:	d007      	beq.n	801c352 <dir_find+0x8a>
 801c342:	7bfb      	ldrb	r3, [r7, #15]
 801c344:	f003 0308 	and.w	r3, r3, #8
 801c348:	2b00      	cmp	r3, #0
 801c34a:	d009      	beq.n	801c360 <dir_find+0x98>
 801c34c:	7bfb      	ldrb	r3, [r7, #15]
 801c34e:	2b0f      	cmp	r3, #15
 801c350:	d006      	beq.n	801c360 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 801c352:	23ff      	movs	r3, #255	@ 0xff
 801c354:	757b      	strb	r3, [r7, #21]
 801c356:	687b      	ldr	r3, [r7, #4]
 801c358:	f04f 32ff 	mov.w	r2, #4294967295
 801c35c:	631a      	str	r2, [r3, #48]	@ 0x30
 801c35e:	e05e      	b.n	801c41e <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 801c360:	7bfb      	ldrb	r3, [r7, #15]
 801c362:	2b0f      	cmp	r3, #15
 801c364:	d136      	bne.n	801c3d4 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 801c366:	687b      	ldr	r3, [r7, #4]
 801c368:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 801c36c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801c370:	2b00      	cmp	r3, #0
 801c372:	d154      	bne.n	801c41e <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 801c374:	7dbb      	ldrb	r3, [r7, #22]
 801c376:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801c37a:	2b00      	cmp	r3, #0
 801c37c:	d00d      	beq.n	801c39a <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 801c37e:	687b      	ldr	r3, [r7, #4]
 801c380:	6a1b      	ldr	r3, [r3, #32]
 801c382:	7b5b      	ldrb	r3, [r3, #13]
 801c384:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 801c386:	7dbb      	ldrb	r3, [r7, #22]
 801c388:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801c38c:	75bb      	strb	r3, [r7, #22]
 801c38e:	7dbb      	ldrb	r3, [r7, #22]
 801c390:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 801c392:	687b      	ldr	r3, [r7, #4]
 801c394:	695a      	ldr	r2, [r3, #20]
 801c396:	687b      	ldr	r3, [r7, #4]
 801c398:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 801c39a:	7dba      	ldrb	r2, [r7, #22]
 801c39c:	7d7b      	ldrb	r3, [r7, #21]
 801c39e:	429a      	cmp	r2, r3
 801c3a0:	d115      	bne.n	801c3ce <dir_find+0x106>
 801c3a2:	687b      	ldr	r3, [r7, #4]
 801c3a4:	6a1b      	ldr	r3, [r3, #32]
 801c3a6:	330d      	adds	r3, #13
 801c3a8:	781b      	ldrb	r3, [r3, #0]
 801c3aa:	7d3a      	ldrb	r2, [r7, #20]
 801c3ac:	429a      	cmp	r2, r3
 801c3ae:	d10e      	bne.n	801c3ce <dir_find+0x106>
 801c3b0:	693b      	ldr	r3, [r7, #16]
 801c3b2:	691a      	ldr	r2, [r3, #16]
 801c3b4:	687b      	ldr	r3, [r7, #4]
 801c3b6:	6a1b      	ldr	r3, [r3, #32]
 801c3b8:	4619      	mov	r1, r3
 801c3ba:	4610      	mov	r0, r2
 801c3bc:	f7ff fcf2 	bl	801bda4 <cmp_lfn>
 801c3c0:	4603      	mov	r3, r0
 801c3c2:	2b00      	cmp	r3, #0
 801c3c4:	d003      	beq.n	801c3ce <dir_find+0x106>
 801c3c6:	7d7b      	ldrb	r3, [r7, #21]
 801c3c8:	3b01      	subs	r3, #1
 801c3ca:	b2db      	uxtb	r3, r3
 801c3cc:	e000      	b.n	801c3d0 <dir_find+0x108>
 801c3ce:	23ff      	movs	r3, #255	@ 0xff
 801c3d0:	757b      	strb	r3, [r7, #21]
 801c3d2:	e024      	b.n	801c41e <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 801c3d4:	7d7b      	ldrb	r3, [r7, #21]
 801c3d6:	2b00      	cmp	r3, #0
 801c3d8:	d109      	bne.n	801c3ee <dir_find+0x126>
 801c3da:	687b      	ldr	r3, [r7, #4]
 801c3dc:	6a1b      	ldr	r3, [r3, #32]
 801c3de:	4618      	mov	r0, r3
 801c3e0:	f7ff feaa 	bl	801c138 <sum_sfn>
 801c3e4:	4603      	mov	r3, r0
 801c3e6:	461a      	mov	r2, r3
 801c3e8:	7d3b      	ldrb	r3, [r7, #20]
 801c3ea:	4293      	cmp	r3, r2
 801c3ec:	d024      	beq.n	801c438 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 801c3ee:	687b      	ldr	r3, [r7, #4]
 801c3f0:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 801c3f4:	f003 0301 	and.w	r3, r3, #1
 801c3f8:	2b00      	cmp	r3, #0
 801c3fa:	d10a      	bne.n	801c412 <dir_find+0x14a>
 801c3fc:	687b      	ldr	r3, [r7, #4]
 801c3fe:	6a18      	ldr	r0, [r3, #32]
 801c400:	687b      	ldr	r3, [r7, #4]
 801c402:	3324      	adds	r3, #36	@ 0x24
 801c404:	220b      	movs	r2, #11
 801c406:	4619      	mov	r1, r3
 801c408:	f7fe fd16 	bl	801ae38 <mem_cmp>
 801c40c:	4603      	mov	r3, r0
 801c40e:	2b00      	cmp	r3, #0
 801c410:	d014      	beq.n	801c43c <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 801c412:	23ff      	movs	r3, #255	@ 0xff
 801c414:	757b      	strb	r3, [r7, #21]
 801c416:	687b      	ldr	r3, [r7, #4]
 801c418:	f04f 32ff 	mov.w	r2, #4294967295
 801c41c:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 801c41e:	2100      	movs	r1, #0
 801c420:	6878      	ldr	r0, [r7, #4]
 801c422:	f7ff fb63 	bl	801baec <dir_next>
 801c426:	4603      	mov	r3, r0
 801c428:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 801c42a:	7dfb      	ldrb	r3, [r7, #23]
 801c42c:	2b00      	cmp	r3, #0
 801c42e:	f43f af65 	beq.w	801c2fc <dir_find+0x34>
 801c432:	e004      	b.n	801c43e <dir_find+0x176>
		if (res != FR_OK) break;
 801c434:	bf00      	nop
 801c436:	e002      	b.n	801c43e <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 801c438:	bf00      	nop
 801c43a:	e000      	b.n	801c43e <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 801c43c:	bf00      	nop

	return res;
 801c43e:	7dfb      	ldrb	r3, [r7, #23]
}
 801c440:	4618      	mov	r0, r3
 801c442:	3718      	adds	r7, #24
 801c444:	46bd      	mov	sp, r7
 801c446:	bd80      	pop	{r7, pc}

0801c448 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 801c448:	b580      	push	{r7, lr}
 801c44a:	b08c      	sub	sp, #48	@ 0x30
 801c44c:	af00      	add	r7, sp, #0
 801c44e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801c450:	687b      	ldr	r3, [r7, #4]
 801c452:	681b      	ldr	r3, [r3, #0]
 801c454:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 801c456:	687b      	ldr	r3, [r7, #4]
 801c458:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 801c45c:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 801c460:	2b00      	cmp	r3, #0
 801c462:	d001      	beq.n	801c468 <dir_register+0x20>
 801c464:	2306      	movs	r3, #6
 801c466:	e0e0      	b.n	801c62a <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 801c468:	2300      	movs	r3, #0
 801c46a:	627b      	str	r3, [r7, #36]	@ 0x24
 801c46c:	e002      	b.n	801c474 <dir_register+0x2c>
 801c46e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c470:	3301      	adds	r3, #1
 801c472:	627b      	str	r3, [r7, #36]	@ 0x24
 801c474:	69fb      	ldr	r3, [r7, #28]
 801c476:	691a      	ldr	r2, [r3, #16]
 801c478:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c47a:	005b      	lsls	r3, r3, #1
 801c47c:	4413      	add	r3, r2
 801c47e:	881b      	ldrh	r3, [r3, #0]
 801c480:	2b00      	cmp	r3, #0
 801c482:	d1f4      	bne.n	801c46e <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 801c484:	687b      	ldr	r3, [r7, #4]
 801c486:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 801c48a:	f107 030c 	add.w	r3, r7, #12
 801c48e:	220c      	movs	r2, #12
 801c490:	4618      	mov	r0, r3
 801c492:	f7fe fc95 	bl	801adc0 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 801c496:	7dfb      	ldrb	r3, [r7, #23]
 801c498:	f003 0301 	and.w	r3, r3, #1
 801c49c:	2b00      	cmp	r3, #0
 801c49e:	d032      	beq.n	801c506 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 801c4a0:	687b      	ldr	r3, [r7, #4]
 801c4a2:	2240      	movs	r2, #64	@ 0x40
 801c4a4:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 801c4a8:	2301      	movs	r3, #1
 801c4aa:	62bb      	str	r3, [r7, #40]	@ 0x28
 801c4ac:	e016      	b.n	801c4dc <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 801c4ae:	687b      	ldr	r3, [r7, #4]
 801c4b0:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 801c4b4:	69fb      	ldr	r3, [r7, #28]
 801c4b6:	691a      	ldr	r2, [r3, #16]
 801c4b8:	f107 010c 	add.w	r1, r7, #12
 801c4bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c4be:	f7ff fdad 	bl	801c01c <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 801c4c2:	6878      	ldr	r0, [r7, #4]
 801c4c4:	f7ff ff00 	bl	801c2c8 <dir_find>
 801c4c8:	4603      	mov	r3, r0
 801c4ca:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 801c4ce:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801c4d2:	2b00      	cmp	r3, #0
 801c4d4:	d106      	bne.n	801c4e4 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 801c4d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c4d8:	3301      	adds	r3, #1
 801c4da:	62bb      	str	r3, [r7, #40]	@ 0x28
 801c4dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c4de:	2b63      	cmp	r3, #99	@ 0x63
 801c4e0:	d9e5      	bls.n	801c4ae <dir_register+0x66>
 801c4e2:	e000      	b.n	801c4e6 <dir_register+0x9e>
			if (res != FR_OK) break;
 801c4e4:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 801c4e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c4e8:	2b64      	cmp	r3, #100	@ 0x64
 801c4ea:	d101      	bne.n	801c4f0 <dir_register+0xa8>
 801c4ec:	2307      	movs	r3, #7
 801c4ee:	e09c      	b.n	801c62a <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 801c4f0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801c4f4:	2b04      	cmp	r3, #4
 801c4f6:	d002      	beq.n	801c4fe <dir_register+0xb6>
 801c4f8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801c4fc:	e095      	b.n	801c62a <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 801c4fe:	7dfa      	ldrb	r2, [r7, #23]
 801c500:	687b      	ldr	r3, [r7, #4]
 801c502:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 801c506:	7dfb      	ldrb	r3, [r7, #23]
 801c508:	f003 0302 	and.w	r3, r3, #2
 801c50c:	2b00      	cmp	r3, #0
 801c50e:	d007      	beq.n	801c520 <dir_register+0xd8>
 801c510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c512:	330c      	adds	r3, #12
 801c514:	4a47      	ldr	r2, [pc, #284]	@ (801c634 <dir_register+0x1ec>)
 801c516:	fba2 2303 	umull	r2, r3, r2, r3
 801c51a:	089b      	lsrs	r3, r3, #2
 801c51c:	3301      	adds	r3, #1
 801c51e:	e000      	b.n	801c522 <dir_register+0xda>
 801c520:	2301      	movs	r3, #1
 801c522:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 801c524:	6a39      	ldr	r1, [r7, #32]
 801c526:	6878      	ldr	r0, [r7, #4]
 801c528:	f7ff fbb6 	bl	801bc98 <dir_alloc>
 801c52c:	4603      	mov	r3, r0
 801c52e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 801c532:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801c536:	2b00      	cmp	r3, #0
 801c538:	d148      	bne.n	801c5cc <dir_register+0x184>
 801c53a:	6a3b      	ldr	r3, [r7, #32]
 801c53c:	3b01      	subs	r3, #1
 801c53e:	623b      	str	r3, [r7, #32]
 801c540:	6a3b      	ldr	r3, [r7, #32]
 801c542:	2b00      	cmp	r3, #0
 801c544:	d042      	beq.n	801c5cc <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 801c546:	687b      	ldr	r3, [r7, #4]
 801c548:	695a      	ldr	r2, [r3, #20]
 801c54a:	6a3b      	ldr	r3, [r7, #32]
 801c54c:	015b      	lsls	r3, r3, #5
 801c54e:	1ad3      	subs	r3, r2, r3
 801c550:	4619      	mov	r1, r3
 801c552:	6878      	ldr	r0, [r7, #4]
 801c554:	f7ff fa41 	bl	801b9da <dir_sdi>
 801c558:	4603      	mov	r3, r0
 801c55a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 801c55e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801c562:	2b00      	cmp	r3, #0
 801c564:	d132      	bne.n	801c5cc <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 801c566:	687b      	ldr	r3, [r7, #4]
 801c568:	3324      	adds	r3, #36	@ 0x24
 801c56a:	4618      	mov	r0, r3
 801c56c:	f7ff fde4 	bl	801c138 <sum_sfn>
 801c570:	4603      	mov	r3, r0
 801c572:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 801c574:	687b      	ldr	r3, [r7, #4]
 801c576:	69db      	ldr	r3, [r3, #28]
 801c578:	4619      	mov	r1, r3
 801c57a:	69f8      	ldr	r0, [r7, #28]
 801c57c:	f7fe fe4e 	bl	801b21c <move_window>
 801c580:	4603      	mov	r3, r0
 801c582:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 801c586:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801c58a:	2b00      	cmp	r3, #0
 801c58c:	d11d      	bne.n	801c5ca <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 801c58e:	69fb      	ldr	r3, [r7, #28]
 801c590:	6918      	ldr	r0, [r3, #16]
 801c592:	687b      	ldr	r3, [r7, #4]
 801c594:	6a19      	ldr	r1, [r3, #32]
 801c596:	6a3b      	ldr	r3, [r7, #32]
 801c598:	b2da      	uxtb	r2, r3
 801c59a:	7efb      	ldrb	r3, [r7, #27]
 801c59c:	f7ff fcd6 	bl	801bf4c <put_lfn>
				fs->wflag = 1;
 801c5a0:	69fb      	ldr	r3, [r7, #28]
 801c5a2:	2201      	movs	r2, #1
 801c5a4:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 801c5a6:	2100      	movs	r1, #0
 801c5a8:	6878      	ldr	r0, [r7, #4]
 801c5aa:	f7ff fa9f 	bl	801baec <dir_next>
 801c5ae:	4603      	mov	r3, r0
 801c5b0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 801c5b4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801c5b8:	2b00      	cmp	r3, #0
 801c5ba:	d107      	bne.n	801c5cc <dir_register+0x184>
 801c5bc:	6a3b      	ldr	r3, [r7, #32]
 801c5be:	3b01      	subs	r3, #1
 801c5c0:	623b      	str	r3, [r7, #32]
 801c5c2:	6a3b      	ldr	r3, [r7, #32]
 801c5c4:	2b00      	cmp	r3, #0
 801c5c6:	d1d5      	bne.n	801c574 <dir_register+0x12c>
 801c5c8:	e000      	b.n	801c5cc <dir_register+0x184>
				if (res != FR_OK) break;
 801c5ca:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 801c5cc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801c5d0:	2b00      	cmp	r3, #0
 801c5d2:	d128      	bne.n	801c626 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 801c5d4:	687b      	ldr	r3, [r7, #4]
 801c5d6:	69db      	ldr	r3, [r3, #28]
 801c5d8:	4619      	mov	r1, r3
 801c5da:	69f8      	ldr	r0, [r7, #28]
 801c5dc:	f7fe fe1e 	bl	801b21c <move_window>
 801c5e0:	4603      	mov	r3, r0
 801c5e2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 801c5e6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801c5ea:	2b00      	cmp	r3, #0
 801c5ec:	d11b      	bne.n	801c626 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 801c5ee:	687b      	ldr	r3, [r7, #4]
 801c5f0:	6a1b      	ldr	r3, [r3, #32]
 801c5f2:	2220      	movs	r2, #32
 801c5f4:	2100      	movs	r1, #0
 801c5f6:	4618      	mov	r0, r3
 801c5f8:	f7fe fc03 	bl	801ae02 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 801c5fc:	687b      	ldr	r3, [r7, #4]
 801c5fe:	6a18      	ldr	r0, [r3, #32]
 801c600:	687b      	ldr	r3, [r7, #4]
 801c602:	3324      	adds	r3, #36	@ 0x24
 801c604:	220b      	movs	r2, #11
 801c606:	4619      	mov	r1, r3
 801c608:	f7fe fbda 	bl	801adc0 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 801c60c:	687b      	ldr	r3, [r7, #4]
 801c60e:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 801c612:	687b      	ldr	r3, [r7, #4]
 801c614:	6a1b      	ldr	r3, [r3, #32]
 801c616:	330c      	adds	r3, #12
 801c618:	f002 0218 	and.w	r2, r2, #24
 801c61c:	b2d2      	uxtb	r2, r2
 801c61e:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 801c620:	69fb      	ldr	r3, [r7, #28]
 801c622:	2201      	movs	r2, #1
 801c624:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 801c626:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 801c62a:	4618      	mov	r0, r3
 801c62c:	3730      	adds	r7, #48	@ 0x30
 801c62e:	46bd      	mov	sp, r7
 801c630:	bd80      	pop	{r7, pc}
 801c632:	bf00      	nop
 801c634:	4ec4ec4f 	.word	0x4ec4ec4f

0801c638 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 801c638:	b580      	push	{r7, lr}
 801c63a:	b086      	sub	sp, #24
 801c63c:	af00      	add	r7, sp, #0
 801c63e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801c640:	687b      	ldr	r3, [r7, #4]
 801c642:	681b      	ldr	r3, [r3, #0]
 801c644:	613b      	str	r3, [r7, #16]
#if _USE_LFN != 0	/* LFN configuration */
	DWORD last = dp->dptr;
 801c646:	687b      	ldr	r3, [r7, #4]
 801c648:	695b      	ldr	r3, [r3, #20]
 801c64a:	60fb      	str	r3, [r7, #12]

	res = (dp->blk_ofs == 0xFFFFFFFF) ? FR_OK : dir_sdi(dp, dp->blk_ofs);	/* Goto top of the entry block if LFN is exist */
 801c64c:	687b      	ldr	r3, [r7, #4]
 801c64e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801c650:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c654:	d007      	beq.n	801c666 <dir_remove+0x2e>
 801c656:	687b      	ldr	r3, [r7, #4]
 801c658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801c65a:	4619      	mov	r1, r3
 801c65c:	6878      	ldr	r0, [r7, #4]
 801c65e:	f7ff f9bc 	bl	801b9da <dir_sdi>
 801c662:	4603      	mov	r3, r0
 801c664:	e000      	b.n	801c668 <dir_remove+0x30>
 801c666:	2300      	movs	r3, #0
 801c668:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801c66a:	7dfb      	ldrb	r3, [r7, #23]
 801c66c:	2b00      	cmp	r3, #0
 801c66e:	d128      	bne.n	801c6c2 <dir_remove+0x8a>
		do {
			res = move_window(fs, dp->sect);
 801c670:	687b      	ldr	r3, [r7, #4]
 801c672:	69db      	ldr	r3, [r3, #28]
 801c674:	4619      	mov	r1, r3
 801c676:	6938      	ldr	r0, [r7, #16]
 801c678:	f7fe fdd0 	bl	801b21c <move_window>
 801c67c:	4603      	mov	r3, r0
 801c67e:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801c680:	7dfb      	ldrb	r3, [r7, #23]
 801c682:	2b00      	cmp	r3, #0
 801c684:	d115      	bne.n	801c6b2 <dir_remove+0x7a>
			/* Mark an entry 'deleted' */
			if (_FS_EXFAT && fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
				dp->dir[XDIR_Type] &= 0x7F;
			} else {									/* On the FAT12/16/32 volume */
				dp->dir[DIR_Name] = DDEM;
 801c686:	687b      	ldr	r3, [r7, #4]
 801c688:	6a1b      	ldr	r3, [r3, #32]
 801c68a:	22e5      	movs	r2, #229	@ 0xe5
 801c68c:	701a      	strb	r2, [r3, #0]
			}
			fs->wflag = 1;
 801c68e:	693b      	ldr	r3, [r7, #16]
 801c690:	2201      	movs	r2, #1
 801c692:	70da      	strb	r2, [r3, #3]
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 801c694:	687b      	ldr	r3, [r7, #4]
 801c696:	695b      	ldr	r3, [r3, #20]
 801c698:	68fa      	ldr	r2, [r7, #12]
 801c69a:	429a      	cmp	r2, r3
 801c69c:	d90b      	bls.n	801c6b6 <dir_remove+0x7e>
			res = dir_next(dp, 0);	/* Next entry */
 801c69e:	2100      	movs	r1, #0
 801c6a0:	6878      	ldr	r0, [r7, #4]
 801c6a2:	f7ff fa23 	bl	801baec <dir_next>
 801c6a6:	4603      	mov	r3, r0
 801c6a8:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);
 801c6aa:	7dfb      	ldrb	r3, [r7, #23]
 801c6ac:	2b00      	cmp	r3, #0
 801c6ae:	d0df      	beq.n	801c670 <dir_remove+0x38>
 801c6b0:	e002      	b.n	801c6b8 <dir_remove+0x80>
			if (res != FR_OK) break;
 801c6b2:	bf00      	nop
 801c6b4:	e000      	b.n	801c6b8 <dir_remove+0x80>
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 801c6b6:	bf00      	nop
		if (res == FR_NO_FILE) res = FR_INT_ERR;
 801c6b8:	7dfb      	ldrb	r3, [r7, #23]
 801c6ba:	2b04      	cmp	r3, #4
 801c6bc:	d101      	bne.n	801c6c2 <dir_remove+0x8a>
 801c6be:	2302      	movs	r3, #2
 801c6c0:	75fb      	strb	r3, [r7, #23]
		dp->dir[DIR_Name] = DDEM;
		fs->wflag = 1;
	}
#endif

	return res;
 801c6c2:	7dfb      	ldrb	r3, [r7, #23]
}
 801c6c4:	4618      	mov	r0, r3
 801c6c6:	3718      	adds	r7, #24
 801c6c8:	46bd      	mov	sp, r7
 801c6ca:	bd80      	pop	{r7, pc}

0801c6cc <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 801c6cc:	b580      	push	{r7, lr}
 801c6ce:	b08a      	sub	sp, #40	@ 0x28
 801c6d0:	af00      	add	r7, sp, #0
 801c6d2:	6078      	str	r0, [r7, #4]
 801c6d4:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 801c6d6:	683b      	ldr	r3, [r7, #0]
 801c6d8:	681b      	ldr	r3, [r3, #0]
 801c6da:	613b      	str	r3, [r7, #16]
 801c6dc:	687b      	ldr	r3, [r7, #4]
 801c6de:	681b      	ldr	r3, [r3, #0]
 801c6e0:	691b      	ldr	r3, [r3, #16]
 801c6e2:	60fb      	str	r3, [r7, #12]
 801c6e4:	2300      	movs	r3, #0
 801c6e6:	617b      	str	r3, [r7, #20]
 801c6e8:	697b      	ldr	r3, [r7, #20]
 801c6ea:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 801c6ec:	69bb      	ldr	r3, [r7, #24]
 801c6ee:	1c5a      	adds	r2, r3, #1
 801c6f0:	61ba      	str	r2, [r7, #24]
 801c6f2:	693a      	ldr	r2, [r7, #16]
 801c6f4:	4413      	add	r3, r2
 801c6f6:	781b      	ldrb	r3, [r3, #0]
 801c6f8:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 801c6fa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c6fc:	2b1f      	cmp	r3, #31
 801c6fe:	d940      	bls.n	801c782 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 801c700:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c702:	2b2f      	cmp	r3, #47	@ 0x2f
 801c704:	d006      	beq.n	801c714 <create_name+0x48>
 801c706:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c708:	2b5c      	cmp	r3, #92	@ 0x5c
 801c70a:	d110      	bne.n	801c72e <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 801c70c:	e002      	b.n	801c714 <create_name+0x48>
 801c70e:	69bb      	ldr	r3, [r7, #24]
 801c710:	3301      	adds	r3, #1
 801c712:	61bb      	str	r3, [r7, #24]
 801c714:	693a      	ldr	r2, [r7, #16]
 801c716:	69bb      	ldr	r3, [r7, #24]
 801c718:	4413      	add	r3, r2
 801c71a:	781b      	ldrb	r3, [r3, #0]
 801c71c:	2b2f      	cmp	r3, #47	@ 0x2f
 801c71e:	d0f6      	beq.n	801c70e <create_name+0x42>
 801c720:	693a      	ldr	r2, [r7, #16]
 801c722:	69bb      	ldr	r3, [r7, #24]
 801c724:	4413      	add	r3, r2
 801c726:	781b      	ldrb	r3, [r3, #0]
 801c728:	2b5c      	cmp	r3, #92	@ 0x5c
 801c72a:	d0f0      	beq.n	801c70e <create_name+0x42>
			break;
 801c72c:	e02a      	b.n	801c784 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 801c72e:	697b      	ldr	r3, [r7, #20]
 801c730:	2bfe      	cmp	r3, #254	@ 0xfe
 801c732:	d901      	bls.n	801c738 <create_name+0x6c>
 801c734:	2306      	movs	r3, #6
 801c736:	e17d      	b.n	801ca34 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 801c738:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c73a:	b2db      	uxtb	r3, r3
 801c73c:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 801c73e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c740:	2101      	movs	r1, #1
 801c742:	4618      	mov	r0, r3
 801c744:	f001 fa98 	bl	801dc78 <ff_convert>
 801c748:	4603      	mov	r3, r0
 801c74a:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 801c74c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c74e:	2b00      	cmp	r3, #0
 801c750:	d101      	bne.n	801c756 <create_name+0x8a>
 801c752:	2306      	movs	r3, #6
 801c754:	e16e      	b.n	801ca34 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 801c756:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c758:	2b7f      	cmp	r3, #127	@ 0x7f
 801c75a:	d809      	bhi.n	801c770 <create_name+0xa4>
 801c75c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c75e:	4619      	mov	r1, r3
 801c760:	488d      	ldr	r0, [pc, #564]	@ (801c998 <create_name+0x2cc>)
 801c762:	f7fe fb90 	bl	801ae86 <chk_chr>
 801c766:	4603      	mov	r3, r0
 801c768:	2b00      	cmp	r3, #0
 801c76a:	d001      	beq.n	801c770 <create_name+0xa4>
 801c76c:	2306      	movs	r3, #6
 801c76e:	e161      	b.n	801ca34 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 801c770:	697b      	ldr	r3, [r7, #20]
 801c772:	1c5a      	adds	r2, r3, #1
 801c774:	617a      	str	r2, [r7, #20]
 801c776:	005b      	lsls	r3, r3, #1
 801c778:	68fa      	ldr	r2, [r7, #12]
 801c77a:	4413      	add	r3, r2
 801c77c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801c77e:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 801c780:	e7b4      	b.n	801c6ec <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 801c782:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 801c784:	693a      	ldr	r2, [r7, #16]
 801c786:	69bb      	ldr	r3, [r7, #24]
 801c788:	441a      	add	r2, r3
 801c78a:	683b      	ldr	r3, [r7, #0]
 801c78c:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 801c78e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c790:	2b1f      	cmp	r3, #31
 801c792:	d801      	bhi.n	801c798 <create_name+0xcc>
 801c794:	2304      	movs	r3, #4
 801c796:	e000      	b.n	801c79a <create_name+0xce>
 801c798:	2300      	movs	r3, #0
 801c79a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 801c79e:	e011      	b.n	801c7c4 <create_name+0xf8>
		w = lfn[di - 1];
 801c7a0:	697a      	ldr	r2, [r7, #20]
 801c7a2:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801c7a6:	4413      	add	r3, r2
 801c7a8:	005b      	lsls	r3, r3, #1
 801c7aa:	68fa      	ldr	r2, [r7, #12]
 801c7ac:	4413      	add	r3, r2
 801c7ae:	881b      	ldrh	r3, [r3, #0]
 801c7b0:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 801c7b2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c7b4:	2b20      	cmp	r3, #32
 801c7b6:	d002      	beq.n	801c7be <create_name+0xf2>
 801c7b8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c7ba:	2b2e      	cmp	r3, #46	@ 0x2e
 801c7bc:	d106      	bne.n	801c7cc <create_name+0x100>
		di--;
 801c7be:	697b      	ldr	r3, [r7, #20]
 801c7c0:	3b01      	subs	r3, #1
 801c7c2:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 801c7c4:	697b      	ldr	r3, [r7, #20]
 801c7c6:	2b00      	cmp	r3, #0
 801c7c8:	d1ea      	bne.n	801c7a0 <create_name+0xd4>
 801c7ca:	e000      	b.n	801c7ce <create_name+0x102>
		if (w != ' ' && w != '.') break;
 801c7cc:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 801c7ce:	697b      	ldr	r3, [r7, #20]
 801c7d0:	005b      	lsls	r3, r3, #1
 801c7d2:	68fa      	ldr	r2, [r7, #12]
 801c7d4:	4413      	add	r3, r2
 801c7d6:	2200      	movs	r2, #0
 801c7d8:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 801c7da:	697b      	ldr	r3, [r7, #20]
 801c7dc:	2b00      	cmp	r3, #0
 801c7de:	d101      	bne.n	801c7e4 <create_name+0x118>
 801c7e0:	2306      	movs	r3, #6
 801c7e2:	e127      	b.n	801ca34 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 801c7e4:	687b      	ldr	r3, [r7, #4]
 801c7e6:	3324      	adds	r3, #36	@ 0x24
 801c7e8:	220b      	movs	r2, #11
 801c7ea:	2120      	movs	r1, #32
 801c7ec:	4618      	mov	r0, r3
 801c7ee:	f7fe fb08 	bl	801ae02 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 801c7f2:	2300      	movs	r3, #0
 801c7f4:	61bb      	str	r3, [r7, #24]
 801c7f6:	e002      	b.n	801c7fe <create_name+0x132>
 801c7f8:	69bb      	ldr	r3, [r7, #24]
 801c7fa:	3301      	adds	r3, #1
 801c7fc:	61bb      	str	r3, [r7, #24]
 801c7fe:	69bb      	ldr	r3, [r7, #24]
 801c800:	005b      	lsls	r3, r3, #1
 801c802:	68fa      	ldr	r2, [r7, #12]
 801c804:	4413      	add	r3, r2
 801c806:	881b      	ldrh	r3, [r3, #0]
 801c808:	2b20      	cmp	r3, #32
 801c80a:	d0f5      	beq.n	801c7f8 <create_name+0x12c>
 801c80c:	69bb      	ldr	r3, [r7, #24]
 801c80e:	005b      	lsls	r3, r3, #1
 801c810:	68fa      	ldr	r2, [r7, #12]
 801c812:	4413      	add	r3, r2
 801c814:	881b      	ldrh	r3, [r3, #0]
 801c816:	2b2e      	cmp	r3, #46	@ 0x2e
 801c818:	d0ee      	beq.n	801c7f8 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 801c81a:	69bb      	ldr	r3, [r7, #24]
 801c81c:	2b00      	cmp	r3, #0
 801c81e:	d009      	beq.n	801c834 <create_name+0x168>
 801c820:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801c824:	f043 0303 	orr.w	r3, r3, #3
 801c828:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 801c82c:	e002      	b.n	801c834 <create_name+0x168>
 801c82e:	697b      	ldr	r3, [r7, #20]
 801c830:	3b01      	subs	r3, #1
 801c832:	617b      	str	r3, [r7, #20]
 801c834:	697b      	ldr	r3, [r7, #20]
 801c836:	2b00      	cmp	r3, #0
 801c838:	d009      	beq.n	801c84e <create_name+0x182>
 801c83a:	697a      	ldr	r2, [r7, #20]
 801c83c:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801c840:	4413      	add	r3, r2
 801c842:	005b      	lsls	r3, r3, #1
 801c844:	68fa      	ldr	r2, [r7, #12]
 801c846:	4413      	add	r3, r2
 801c848:	881b      	ldrh	r3, [r3, #0]
 801c84a:	2b2e      	cmp	r3, #46	@ 0x2e
 801c84c:	d1ef      	bne.n	801c82e <create_name+0x162>

	i = b = 0; ni = 8;
 801c84e:	2300      	movs	r3, #0
 801c850:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801c854:	2300      	movs	r3, #0
 801c856:	623b      	str	r3, [r7, #32]
 801c858:	2308      	movs	r3, #8
 801c85a:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 801c85c:	69bb      	ldr	r3, [r7, #24]
 801c85e:	1c5a      	adds	r2, r3, #1
 801c860:	61ba      	str	r2, [r7, #24]
 801c862:	005b      	lsls	r3, r3, #1
 801c864:	68fa      	ldr	r2, [r7, #12]
 801c866:	4413      	add	r3, r2
 801c868:	881b      	ldrh	r3, [r3, #0]
 801c86a:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 801c86c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c86e:	2b00      	cmp	r3, #0
 801c870:	f000 8090 	beq.w	801c994 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 801c874:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c876:	2b20      	cmp	r3, #32
 801c878:	d006      	beq.n	801c888 <create_name+0x1bc>
 801c87a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c87c:	2b2e      	cmp	r3, #46	@ 0x2e
 801c87e:	d10a      	bne.n	801c896 <create_name+0x1ca>
 801c880:	69ba      	ldr	r2, [r7, #24]
 801c882:	697b      	ldr	r3, [r7, #20]
 801c884:	429a      	cmp	r2, r3
 801c886:	d006      	beq.n	801c896 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 801c888:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801c88c:	f043 0303 	orr.w	r3, r3, #3
 801c890:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801c894:	e07d      	b.n	801c992 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 801c896:	6a3a      	ldr	r2, [r7, #32]
 801c898:	69fb      	ldr	r3, [r7, #28]
 801c89a:	429a      	cmp	r2, r3
 801c89c:	d203      	bcs.n	801c8a6 <create_name+0x1da>
 801c89e:	69ba      	ldr	r2, [r7, #24]
 801c8a0:	697b      	ldr	r3, [r7, #20]
 801c8a2:	429a      	cmp	r2, r3
 801c8a4:	d123      	bne.n	801c8ee <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 801c8a6:	69fb      	ldr	r3, [r7, #28]
 801c8a8:	2b0b      	cmp	r3, #11
 801c8aa:	d106      	bne.n	801c8ba <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 801c8ac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801c8b0:	f043 0303 	orr.w	r3, r3, #3
 801c8b4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801c8b8:	e075      	b.n	801c9a6 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 801c8ba:	69ba      	ldr	r2, [r7, #24]
 801c8bc:	697b      	ldr	r3, [r7, #20]
 801c8be:	429a      	cmp	r2, r3
 801c8c0:	d005      	beq.n	801c8ce <create_name+0x202>
 801c8c2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801c8c6:	f043 0303 	orr.w	r3, r3, #3
 801c8ca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 801c8ce:	69ba      	ldr	r2, [r7, #24]
 801c8d0:	697b      	ldr	r3, [r7, #20]
 801c8d2:	429a      	cmp	r2, r3
 801c8d4:	d866      	bhi.n	801c9a4 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 801c8d6:	697b      	ldr	r3, [r7, #20]
 801c8d8:	61bb      	str	r3, [r7, #24]
 801c8da:	2308      	movs	r3, #8
 801c8dc:	623b      	str	r3, [r7, #32]
 801c8de:	230b      	movs	r3, #11
 801c8e0:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 801c8e2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801c8e6:	009b      	lsls	r3, r3, #2
 801c8e8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801c8ec:	e051      	b.n	801c992 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 801c8ee:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c8f0:	2b7f      	cmp	r3, #127	@ 0x7f
 801c8f2:	d914      	bls.n	801c91e <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 801c8f4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c8f6:	2100      	movs	r1, #0
 801c8f8:	4618      	mov	r0, r3
 801c8fa:	f001 f9bd 	bl	801dc78 <ff_convert>
 801c8fe:	4603      	mov	r3, r0
 801c900:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 801c902:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c904:	2b00      	cmp	r3, #0
 801c906:	d004      	beq.n	801c912 <create_name+0x246>
 801c908:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c90a:	3b80      	subs	r3, #128	@ 0x80
 801c90c:	4a23      	ldr	r2, [pc, #140]	@ (801c99c <create_name+0x2d0>)
 801c90e:	5cd3      	ldrb	r3, [r2, r3]
 801c910:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 801c912:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801c916:	f043 0302 	orr.w	r3, r3, #2
 801c91a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 801c91e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c920:	2b00      	cmp	r3, #0
 801c922:	d007      	beq.n	801c934 <create_name+0x268>
 801c924:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c926:	4619      	mov	r1, r3
 801c928:	481d      	ldr	r0, [pc, #116]	@ (801c9a0 <create_name+0x2d4>)
 801c92a:	f7fe faac 	bl	801ae86 <chk_chr>
 801c92e:	4603      	mov	r3, r0
 801c930:	2b00      	cmp	r3, #0
 801c932:	d008      	beq.n	801c946 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 801c934:	235f      	movs	r3, #95	@ 0x5f
 801c936:	84bb      	strh	r3, [r7, #36]	@ 0x24
 801c938:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801c93c:	f043 0303 	orr.w	r3, r3, #3
 801c940:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801c944:	e01b      	b.n	801c97e <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 801c946:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c948:	2b40      	cmp	r3, #64	@ 0x40
 801c94a:	d909      	bls.n	801c960 <create_name+0x294>
 801c94c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c94e:	2b5a      	cmp	r3, #90	@ 0x5a
 801c950:	d806      	bhi.n	801c960 <create_name+0x294>
					b |= 2;
 801c952:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801c956:	f043 0302 	orr.w	r3, r3, #2
 801c95a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801c95e:	e00e      	b.n	801c97e <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 801c960:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c962:	2b60      	cmp	r3, #96	@ 0x60
 801c964:	d90b      	bls.n	801c97e <create_name+0x2b2>
 801c966:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c968:	2b7a      	cmp	r3, #122	@ 0x7a
 801c96a:	d808      	bhi.n	801c97e <create_name+0x2b2>
						b |= 1; w -= 0x20;
 801c96c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801c970:	f043 0301 	orr.w	r3, r3, #1
 801c974:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801c978:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c97a:	3b20      	subs	r3, #32
 801c97c:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 801c97e:	6a3b      	ldr	r3, [r7, #32]
 801c980:	1c5a      	adds	r2, r3, #1
 801c982:	623a      	str	r2, [r7, #32]
 801c984:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801c986:	b2d1      	uxtb	r1, r2
 801c988:	687a      	ldr	r2, [r7, #4]
 801c98a:	4413      	add	r3, r2
 801c98c:	460a      	mov	r2, r1
 801c98e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 801c992:	e763      	b.n	801c85c <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 801c994:	bf00      	nop
 801c996:	e006      	b.n	801c9a6 <create_name+0x2da>
 801c998:	0801e874 	.word	0x0801e874
 801c99c:	0801e90c 	.word	0x0801e90c
 801c9a0:	0801e880 	.word	0x0801e880
			if (si > di) break;			/* No extension */
 801c9a4:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 801c9a6:	687b      	ldr	r3, [r7, #4]
 801c9a8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 801c9ac:	2be5      	cmp	r3, #229	@ 0xe5
 801c9ae:	d103      	bne.n	801c9b8 <create_name+0x2ec>
 801c9b0:	687b      	ldr	r3, [r7, #4]
 801c9b2:	2205      	movs	r2, #5
 801c9b4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 801c9b8:	69fb      	ldr	r3, [r7, #28]
 801c9ba:	2b08      	cmp	r3, #8
 801c9bc:	d104      	bne.n	801c9c8 <create_name+0x2fc>
 801c9be:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801c9c2:	009b      	lsls	r3, r3, #2
 801c9c4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 801c9c8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801c9cc:	f003 030c 	and.w	r3, r3, #12
 801c9d0:	2b0c      	cmp	r3, #12
 801c9d2:	d005      	beq.n	801c9e0 <create_name+0x314>
 801c9d4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801c9d8:	f003 0303 	and.w	r3, r3, #3
 801c9dc:	2b03      	cmp	r3, #3
 801c9de:	d105      	bne.n	801c9ec <create_name+0x320>
 801c9e0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801c9e4:	f043 0302 	orr.w	r3, r3, #2
 801c9e8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 801c9ec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801c9f0:	f003 0302 	and.w	r3, r3, #2
 801c9f4:	2b00      	cmp	r3, #0
 801c9f6:	d117      	bne.n	801ca28 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 801c9f8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801c9fc:	f003 0303 	and.w	r3, r3, #3
 801ca00:	2b01      	cmp	r3, #1
 801ca02:	d105      	bne.n	801ca10 <create_name+0x344>
 801ca04:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801ca08:	f043 0310 	orr.w	r3, r3, #16
 801ca0c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 801ca10:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801ca14:	f003 030c 	and.w	r3, r3, #12
 801ca18:	2b04      	cmp	r3, #4
 801ca1a:	d105      	bne.n	801ca28 <create_name+0x35c>
 801ca1c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801ca20:	f043 0308 	orr.w	r3, r3, #8
 801ca24:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 801ca28:	687b      	ldr	r3, [r7, #4]
 801ca2a:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 801ca2e:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 801ca32:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 801ca34:	4618      	mov	r0, r3
 801ca36:	3728      	adds	r7, #40	@ 0x28
 801ca38:	46bd      	mov	sp, r7
 801ca3a:	bd80      	pop	{r7, pc}

0801ca3c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 801ca3c:	b580      	push	{r7, lr}
 801ca3e:	b086      	sub	sp, #24
 801ca40:	af00      	add	r7, sp, #0
 801ca42:	6078      	str	r0, [r7, #4]
 801ca44:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 801ca46:	687b      	ldr	r3, [r7, #4]
 801ca48:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 801ca4a:	693b      	ldr	r3, [r7, #16]
 801ca4c:	681b      	ldr	r3, [r3, #0]
 801ca4e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 801ca50:	e002      	b.n	801ca58 <follow_path+0x1c>
 801ca52:	683b      	ldr	r3, [r7, #0]
 801ca54:	3301      	adds	r3, #1
 801ca56:	603b      	str	r3, [r7, #0]
 801ca58:	683b      	ldr	r3, [r7, #0]
 801ca5a:	781b      	ldrb	r3, [r3, #0]
 801ca5c:	2b2f      	cmp	r3, #47	@ 0x2f
 801ca5e:	d0f8      	beq.n	801ca52 <follow_path+0x16>
 801ca60:	683b      	ldr	r3, [r7, #0]
 801ca62:	781b      	ldrb	r3, [r3, #0]
 801ca64:	2b5c      	cmp	r3, #92	@ 0x5c
 801ca66:	d0f4      	beq.n	801ca52 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 801ca68:	693b      	ldr	r3, [r7, #16]
 801ca6a:	2200      	movs	r2, #0
 801ca6c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 801ca6e:	683b      	ldr	r3, [r7, #0]
 801ca70:	781b      	ldrb	r3, [r3, #0]
 801ca72:	2b1f      	cmp	r3, #31
 801ca74:	d80a      	bhi.n	801ca8c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 801ca76:	687b      	ldr	r3, [r7, #4]
 801ca78:	2280      	movs	r2, #128	@ 0x80
 801ca7a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 801ca7e:	2100      	movs	r1, #0
 801ca80:	6878      	ldr	r0, [r7, #4]
 801ca82:	f7fe ffaa 	bl	801b9da <dir_sdi>
 801ca86:	4603      	mov	r3, r0
 801ca88:	75fb      	strb	r3, [r7, #23]
 801ca8a:	e048      	b.n	801cb1e <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801ca8c:	463b      	mov	r3, r7
 801ca8e:	4619      	mov	r1, r3
 801ca90:	6878      	ldr	r0, [r7, #4]
 801ca92:	f7ff fe1b 	bl	801c6cc <create_name>
 801ca96:	4603      	mov	r3, r0
 801ca98:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801ca9a:	7dfb      	ldrb	r3, [r7, #23]
 801ca9c:	2b00      	cmp	r3, #0
 801ca9e:	d139      	bne.n	801cb14 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 801caa0:	6878      	ldr	r0, [r7, #4]
 801caa2:	f7ff fc11 	bl	801c2c8 <dir_find>
 801caa6:	4603      	mov	r3, r0
 801caa8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 801caaa:	687b      	ldr	r3, [r7, #4]
 801caac:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 801cab0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 801cab2:	7dfb      	ldrb	r3, [r7, #23]
 801cab4:	2b00      	cmp	r3, #0
 801cab6:	d00a      	beq.n	801cace <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 801cab8:	7dfb      	ldrb	r3, [r7, #23]
 801caba:	2b04      	cmp	r3, #4
 801cabc:	d12c      	bne.n	801cb18 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 801cabe:	7afb      	ldrb	r3, [r7, #11]
 801cac0:	f003 0304 	and.w	r3, r3, #4
 801cac4:	2b00      	cmp	r3, #0
 801cac6:	d127      	bne.n	801cb18 <follow_path+0xdc>
 801cac8:	2305      	movs	r3, #5
 801caca:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 801cacc:	e024      	b.n	801cb18 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801cace:	7afb      	ldrb	r3, [r7, #11]
 801cad0:	f003 0304 	and.w	r3, r3, #4
 801cad4:	2b00      	cmp	r3, #0
 801cad6:	d121      	bne.n	801cb1c <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 801cad8:	693b      	ldr	r3, [r7, #16]
 801cada:	799b      	ldrb	r3, [r3, #6]
 801cadc:	f003 0310 	and.w	r3, r3, #16
 801cae0:	2b00      	cmp	r3, #0
 801cae2:	d102      	bne.n	801caea <follow_path+0xae>
				res = FR_NO_PATH; break;
 801cae4:	2305      	movs	r3, #5
 801cae6:	75fb      	strb	r3, [r7, #23]
 801cae8:	e019      	b.n	801cb1e <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 801caea:	68fb      	ldr	r3, [r7, #12]
 801caec:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801caf0:	687b      	ldr	r3, [r7, #4]
 801caf2:	695b      	ldr	r3, [r3, #20]
 801caf4:	68fa      	ldr	r2, [r7, #12]
 801caf6:	8992      	ldrh	r2, [r2, #12]
 801caf8:	fbb3 f0f2 	udiv	r0, r3, r2
 801cafc:	fb00 f202 	mul.w	r2, r0, r2
 801cb00:	1a9b      	subs	r3, r3, r2
 801cb02:	440b      	add	r3, r1
 801cb04:	4619      	mov	r1, r3
 801cb06:	68f8      	ldr	r0, [r7, #12]
 801cb08:	f7ff f90d 	bl	801bd26 <ld_clust>
 801cb0c:	4602      	mov	r2, r0
 801cb0e:	693b      	ldr	r3, [r7, #16]
 801cb10:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801cb12:	e7bb      	b.n	801ca8c <follow_path+0x50>
			if (res != FR_OK) break;
 801cb14:	bf00      	nop
 801cb16:	e002      	b.n	801cb1e <follow_path+0xe2>
				break;
 801cb18:	bf00      	nop
 801cb1a:	e000      	b.n	801cb1e <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801cb1c:	bf00      	nop
			}
		}
	}

	return res;
 801cb1e:	7dfb      	ldrb	r3, [r7, #23]
}
 801cb20:	4618      	mov	r0, r3
 801cb22:	3718      	adds	r7, #24
 801cb24:	46bd      	mov	sp, r7
 801cb26:	bd80      	pop	{r7, pc}

0801cb28 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 801cb28:	b480      	push	{r7}
 801cb2a:	b087      	sub	sp, #28
 801cb2c:	af00      	add	r7, sp, #0
 801cb2e:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 801cb30:	f04f 33ff 	mov.w	r3, #4294967295
 801cb34:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 801cb36:	687b      	ldr	r3, [r7, #4]
 801cb38:	681b      	ldr	r3, [r3, #0]
 801cb3a:	2b00      	cmp	r3, #0
 801cb3c:	d031      	beq.n	801cba2 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 801cb3e:	687b      	ldr	r3, [r7, #4]
 801cb40:	681b      	ldr	r3, [r3, #0]
 801cb42:	617b      	str	r3, [r7, #20]
 801cb44:	e002      	b.n	801cb4c <get_ldnumber+0x24>
 801cb46:	697b      	ldr	r3, [r7, #20]
 801cb48:	3301      	adds	r3, #1
 801cb4a:	617b      	str	r3, [r7, #20]
 801cb4c:	697b      	ldr	r3, [r7, #20]
 801cb4e:	781b      	ldrb	r3, [r3, #0]
 801cb50:	2b1f      	cmp	r3, #31
 801cb52:	d903      	bls.n	801cb5c <get_ldnumber+0x34>
 801cb54:	697b      	ldr	r3, [r7, #20]
 801cb56:	781b      	ldrb	r3, [r3, #0]
 801cb58:	2b3a      	cmp	r3, #58	@ 0x3a
 801cb5a:	d1f4      	bne.n	801cb46 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 801cb5c:	697b      	ldr	r3, [r7, #20]
 801cb5e:	781b      	ldrb	r3, [r3, #0]
 801cb60:	2b3a      	cmp	r3, #58	@ 0x3a
 801cb62:	d11c      	bne.n	801cb9e <get_ldnumber+0x76>
			tp = *path;
 801cb64:	687b      	ldr	r3, [r7, #4]
 801cb66:	681b      	ldr	r3, [r3, #0]
 801cb68:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 801cb6a:	68fb      	ldr	r3, [r7, #12]
 801cb6c:	1c5a      	adds	r2, r3, #1
 801cb6e:	60fa      	str	r2, [r7, #12]
 801cb70:	781b      	ldrb	r3, [r3, #0]
 801cb72:	3b30      	subs	r3, #48	@ 0x30
 801cb74:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 801cb76:	68bb      	ldr	r3, [r7, #8]
 801cb78:	2b09      	cmp	r3, #9
 801cb7a:	d80e      	bhi.n	801cb9a <get_ldnumber+0x72>
 801cb7c:	68fa      	ldr	r2, [r7, #12]
 801cb7e:	697b      	ldr	r3, [r7, #20]
 801cb80:	429a      	cmp	r2, r3
 801cb82:	d10a      	bne.n	801cb9a <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 801cb84:	68bb      	ldr	r3, [r7, #8]
 801cb86:	2b00      	cmp	r3, #0
 801cb88:	d107      	bne.n	801cb9a <get_ldnumber+0x72>
					vol = (int)i;
 801cb8a:	68bb      	ldr	r3, [r7, #8]
 801cb8c:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 801cb8e:	697b      	ldr	r3, [r7, #20]
 801cb90:	3301      	adds	r3, #1
 801cb92:	617b      	str	r3, [r7, #20]
 801cb94:	687b      	ldr	r3, [r7, #4]
 801cb96:	697a      	ldr	r2, [r7, #20]
 801cb98:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 801cb9a:	693b      	ldr	r3, [r7, #16]
 801cb9c:	e002      	b.n	801cba4 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 801cb9e:	2300      	movs	r3, #0
 801cba0:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 801cba2:	693b      	ldr	r3, [r7, #16]
}
 801cba4:	4618      	mov	r0, r3
 801cba6:	371c      	adds	r7, #28
 801cba8:	46bd      	mov	sp, r7
 801cbaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cbae:	4770      	bx	lr

0801cbb0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 801cbb0:	b580      	push	{r7, lr}
 801cbb2:	b082      	sub	sp, #8
 801cbb4:	af00      	add	r7, sp, #0
 801cbb6:	6078      	str	r0, [r7, #4]
 801cbb8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 801cbba:	687b      	ldr	r3, [r7, #4]
 801cbbc:	2200      	movs	r2, #0
 801cbbe:	70da      	strb	r2, [r3, #3]
 801cbc0:	687b      	ldr	r3, [r7, #4]
 801cbc2:	f04f 32ff 	mov.w	r2, #4294967295
 801cbc6:	635a      	str	r2, [r3, #52]	@ 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 801cbc8:	6839      	ldr	r1, [r7, #0]
 801cbca:	6878      	ldr	r0, [r7, #4]
 801cbcc:	f7fe fb26 	bl	801b21c <move_window>
 801cbd0:	4603      	mov	r3, r0
 801cbd2:	2b00      	cmp	r3, #0
 801cbd4:	d001      	beq.n	801cbda <check_fs+0x2a>
 801cbd6:	2304      	movs	r3, #4
 801cbd8:	e038      	b.n	801cc4c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 801cbda:	687b      	ldr	r3, [r7, #4]
 801cbdc:	3338      	adds	r3, #56	@ 0x38
 801cbde:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 801cbe2:	4618      	mov	r0, r3
 801cbe4:	f7fe f86a 	bl	801acbc <ld_word>
 801cbe8:	4603      	mov	r3, r0
 801cbea:	461a      	mov	r2, r3
 801cbec:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 801cbf0:	429a      	cmp	r2, r3
 801cbf2:	d001      	beq.n	801cbf8 <check_fs+0x48>
 801cbf4:	2303      	movs	r3, #3
 801cbf6:	e029      	b.n	801cc4c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 801cbf8:	687b      	ldr	r3, [r7, #4]
 801cbfa:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801cbfe:	2be9      	cmp	r3, #233	@ 0xe9
 801cc00:	d009      	beq.n	801cc16 <check_fs+0x66>
 801cc02:	687b      	ldr	r3, [r7, #4]
 801cc04:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801cc08:	2beb      	cmp	r3, #235	@ 0xeb
 801cc0a:	d11e      	bne.n	801cc4a <check_fs+0x9a>
 801cc0c:	687b      	ldr	r3, [r7, #4]
 801cc0e:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 801cc12:	2b90      	cmp	r3, #144	@ 0x90
 801cc14:	d119      	bne.n	801cc4a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 801cc16:	687b      	ldr	r3, [r7, #4]
 801cc18:	3338      	adds	r3, #56	@ 0x38
 801cc1a:	3336      	adds	r3, #54	@ 0x36
 801cc1c:	4618      	mov	r0, r3
 801cc1e:	f7fe f865 	bl	801acec <ld_dword>
 801cc22:	4603      	mov	r3, r0
 801cc24:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 801cc28:	4a0a      	ldr	r2, [pc, #40]	@ (801cc54 <check_fs+0xa4>)
 801cc2a:	4293      	cmp	r3, r2
 801cc2c:	d101      	bne.n	801cc32 <check_fs+0x82>
 801cc2e:	2300      	movs	r3, #0
 801cc30:	e00c      	b.n	801cc4c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 801cc32:	687b      	ldr	r3, [r7, #4]
 801cc34:	3338      	adds	r3, #56	@ 0x38
 801cc36:	3352      	adds	r3, #82	@ 0x52
 801cc38:	4618      	mov	r0, r3
 801cc3a:	f7fe f857 	bl	801acec <ld_dword>
 801cc3e:	4603      	mov	r3, r0
 801cc40:	4a05      	ldr	r2, [pc, #20]	@ (801cc58 <check_fs+0xa8>)
 801cc42:	4293      	cmp	r3, r2
 801cc44:	d101      	bne.n	801cc4a <check_fs+0x9a>
 801cc46:	2300      	movs	r3, #0
 801cc48:	e000      	b.n	801cc4c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 801cc4a:	2302      	movs	r3, #2
}
 801cc4c:	4618      	mov	r0, r3
 801cc4e:	3708      	adds	r7, #8
 801cc50:	46bd      	mov	sp, r7
 801cc52:	bd80      	pop	{r7, pc}
 801cc54:	00544146 	.word	0x00544146
 801cc58:	33544146 	.word	0x33544146

0801cc5c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 801cc5c:	b580      	push	{r7, lr}
 801cc5e:	b096      	sub	sp, #88	@ 0x58
 801cc60:	af00      	add	r7, sp, #0
 801cc62:	60f8      	str	r0, [r7, #12]
 801cc64:	60b9      	str	r1, [r7, #8]
 801cc66:	4613      	mov	r3, r2
 801cc68:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 801cc6a:	68bb      	ldr	r3, [r7, #8]
 801cc6c:	2200      	movs	r2, #0
 801cc6e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 801cc70:	68f8      	ldr	r0, [r7, #12]
 801cc72:	f7ff ff59 	bl	801cb28 <get_ldnumber>
 801cc76:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 801cc78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801cc7a:	2b00      	cmp	r3, #0
 801cc7c:	da01      	bge.n	801cc82 <find_volume+0x26>
 801cc7e:	230b      	movs	r3, #11
 801cc80:	e265      	b.n	801d14e <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 801cc82:	4a9f      	ldr	r2, [pc, #636]	@ (801cf00 <find_volume+0x2a4>)
 801cc84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801cc86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801cc8a:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 801cc8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cc8e:	2b00      	cmp	r3, #0
 801cc90:	d101      	bne.n	801cc96 <find_volume+0x3a>
 801cc92:	230c      	movs	r3, #12
 801cc94:	e25b      	b.n	801d14e <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 801cc96:	68bb      	ldr	r3, [r7, #8]
 801cc98:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801cc9a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 801cc9c:	79fb      	ldrb	r3, [r7, #7]
 801cc9e:	f023 0301 	bic.w	r3, r3, #1
 801cca2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 801cca4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cca6:	781b      	ldrb	r3, [r3, #0]
 801cca8:	2b00      	cmp	r3, #0
 801ccaa:	d01a      	beq.n	801cce2 <find_volume+0x86>
		stat = disk_status(fs->drv);
 801ccac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ccae:	785b      	ldrb	r3, [r3, #1]
 801ccb0:	4618      	mov	r0, r3
 801ccb2:	f7fd ff63 	bl	801ab7c <disk_status>
 801ccb6:	4603      	mov	r3, r0
 801ccb8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 801ccbc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801ccc0:	f003 0301 	and.w	r3, r3, #1
 801ccc4:	2b00      	cmp	r3, #0
 801ccc6:	d10c      	bne.n	801cce2 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 801ccc8:	79fb      	ldrb	r3, [r7, #7]
 801ccca:	2b00      	cmp	r3, #0
 801cccc:	d007      	beq.n	801ccde <find_volume+0x82>
 801ccce:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801ccd2:	f003 0304 	and.w	r3, r3, #4
 801ccd6:	2b00      	cmp	r3, #0
 801ccd8:	d001      	beq.n	801ccde <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 801ccda:	230a      	movs	r3, #10
 801ccdc:	e237      	b.n	801d14e <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 801ccde:	2300      	movs	r3, #0
 801cce0:	e235      	b.n	801d14e <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 801cce2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cce4:	2200      	movs	r2, #0
 801cce6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 801cce8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801ccea:	b2da      	uxtb	r2, r3
 801ccec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ccee:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 801ccf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ccf2:	785b      	ldrb	r3, [r3, #1]
 801ccf4:	4618      	mov	r0, r3
 801ccf6:	f7fd ff5b 	bl	801abb0 <disk_initialize>
 801ccfa:	4603      	mov	r3, r0
 801ccfc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 801cd00:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801cd04:	f003 0301 	and.w	r3, r3, #1
 801cd08:	2b00      	cmp	r3, #0
 801cd0a:	d001      	beq.n	801cd10 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 801cd0c:	2303      	movs	r3, #3
 801cd0e:	e21e      	b.n	801d14e <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 801cd10:	79fb      	ldrb	r3, [r7, #7]
 801cd12:	2b00      	cmp	r3, #0
 801cd14:	d007      	beq.n	801cd26 <find_volume+0xca>
 801cd16:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801cd1a:	f003 0304 	and.w	r3, r3, #4
 801cd1e:	2b00      	cmp	r3, #0
 801cd20:	d001      	beq.n	801cd26 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 801cd22:	230a      	movs	r3, #10
 801cd24:	e213      	b.n	801d14e <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 801cd26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cd28:	7858      	ldrb	r0, [r3, #1]
 801cd2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cd2c:	330c      	adds	r3, #12
 801cd2e:	461a      	mov	r2, r3
 801cd30:	2102      	movs	r1, #2
 801cd32:	f7fd ffa5 	bl	801ac80 <disk_ioctl>
 801cd36:	4603      	mov	r3, r0
 801cd38:	2b00      	cmp	r3, #0
 801cd3a:	d001      	beq.n	801cd40 <find_volume+0xe4>
 801cd3c:	2301      	movs	r3, #1
 801cd3e:	e206      	b.n	801d14e <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 801cd40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cd42:	899b      	ldrh	r3, [r3, #12]
 801cd44:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801cd48:	d80d      	bhi.n	801cd66 <find_volume+0x10a>
 801cd4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cd4c:	899b      	ldrh	r3, [r3, #12]
 801cd4e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801cd52:	d308      	bcc.n	801cd66 <find_volume+0x10a>
 801cd54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cd56:	899b      	ldrh	r3, [r3, #12]
 801cd58:	461a      	mov	r2, r3
 801cd5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cd5c:	899b      	ldrh	r3, [r3, #12]
 801cd5e:	3b01      	subs	r3, #1
 801cd60:	4013      	ands	r3, r2
 801cd62:	2b00      	cmp	r3, #0
 801cd64:	d001      	beq.n	801cd6a <find_volume+0x10e>
 801cd66:	2301      	movs	r3, #1
 801cd68:	e1f1      	b.n	801d14e <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 801cd6a:	2300      	movs	r3, #0
 801cd6c:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 801cd6e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801cd70:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801cd72:	f7ff ff1d 	bl	801cbb0 <check_fs>
 801cd76:	4603      	mov	r3, r0
 801cd78:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 801cd7c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801cd80:	2b02      	cmp	r3, #2
 801cd82:	d149      	bne.n	801ce18 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801cd84:	2300      	movs	r3, #0
 801cd86:	643b      	str	r3, [r7, #64]	@ 0x40
 801cd88:	e01e      	b.n	801cdc8 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 801cd8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cd8c:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 801cd90:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801cd92:	011b      	lsls	r3, r3, #4
 801cd94:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 801cd98:	4413      	add	r3, r2
 801cd9a:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 801cd9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cd9e:	3304      	adds	r3, #4
 801cda0:	781b      	ldrb	r3, [r3, #0]
 801cda2:	2b00      	cmp	r3, #0
 801cda4:	d006      	beq.n	801cdb4 <find_volume+0x158>
 801cda6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cda8:	3308      	adds	r3, #8
 801cdaa:	4618      	mov	r0, r3
 801cdac:	f7fd ff9e 	bl	801acec <ld_dword>
 801cdb0:	4602      	mov	r2, r0
 801cdb2:	e000      	b.n	801cdb6 <find_volume+0x15a>
 801cdb4:	2200      	movs	r2, #0
 801cdb6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801cdb8:	009b      	lsls	r3, r3, #2
 801cdba:	3358      	adds	r3, #88	@ 0x58
 801cdbc:	443b      	add	r3, r7
 801cdbe:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801cdc2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801cdc4:	3301      	adds	r3, #1
 801cdc6:	643b      	str	r3, [r7, #64]	@ 0x40
 801cdc8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801cdca:	2b03      	cmp	r3, #3
 801cdcc:	d9dd      	bls.n	801cd8a <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 801cdce:	2300      	movs	r3, #0
 801cdd0:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 801cdd2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801cdd4:	2b00      	cmp	r3, #0
 801cdd6:	d002      	beq.n	801cdde <find_volume+0x182>
 801cdd8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801cdda:	3b01      	subs	r3, #1
 801cddc:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 801cdde:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801cde0:	009b      	lsls	r3, r3, #2
 801cde2:	3358      	adds	r3, #88	@ 0x58
 801cde4:	443b      	add	r3, r7
 801cde6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 801cdea:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 801cdec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801cdee:	2b00      	cmp	r3, #0
 801cdf0:	d005      	beq.n	801cdfe <find_volume+0x1a2>
 801cdf2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801cdf4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801cdf6:	f7ff fedb 	bl	801cbb0 <check_fs>
 801cdfa:	4603      	mov	r3, r0
 801cdfc:	e000      	b.n	801ce00 <find_volume+0x1a4>
 801cdfe:	2303      	movs	r3, #3
 801ce00:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 801ce04:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801ce08:	2b01      	cmp	r3, #1
 801ce0a:	d905      	bls.n	801ce18 <find_volume+0x1bc>
 801ce0c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801ce0e:	3301      	adds	r3, #1
 801ce10:	643b      	str	r3, [r7, #64]	@ 0x40
 801ce12:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801ce14:	2b03      	cmp	r3, #3
 801ce16:	d9e2      	bls.n	801cdde <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 801ce18:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801ce1c:	2b04      	cmp	r3, #4
 801ce1e:	d101      	bne.n	801ce24 <find_volume+0x1c8>
 801ce20:	2301      	movs	r3, #1
 801ce22:	e194      	b.n	801d14e <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 801ce24:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801ce28:	2b01      	cmp	r3, #1
 801ce2a:	d901      	bls.n	801ce30 <find_volume+0x1d4>
 801ce2c:	230d      	movs	r3, #13
 801ce2e:	e18e      	b.n	801d14e <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 801ce30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ce32:	3338      	adds	r3, #56	@ 0x38
 801ce34:	330b      	adds	r3, #11
 801ce36:	4618      	mov	r0, r3
 801ce38:	f7fd ff40 	bl	801acbc <ld_word>
 801ce3c:	4603      	mov	r3, r0
 801ce3e:	461a      	mov	r2, r3
 801ce40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ce42:	899b      	ldrh	r3, [r3, #12]
 801ce44:	429a      	cmp	r2, r3
 801ce46:	d001      	beq.n	801ce4c <find_volume+0x1f0>
 801ce48:	230d      	movs	r3, #13
 801ce4a:	e180      	b.n	801d14e <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 801ce4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ce4e:	3338      	adds	r3, #56	@ 0x38
 801ce50:	3316      	adds	r3, #22
 801ce52:	4618      	mov	r0, r3
 801ce54:	f7fd ff32 	bl	801acbc <ld_word>
 801ce58:	4603      	mov	r3, r0
 801ce5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 801ce5c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801ce5e:	2b00      	cmp	r3, #0
 801ce60:	d106      	bne.n	801ce70 <find_volume+0x214>
 801ce62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ce64:	3338      	adds	r3, #56	@ 0x38
 801ce66:	3324      	adds	r3, #36	@ 0x24
 801ce68:	4618      	mov	r0, r3
 801ce6a:	f7fd ff3f 	bl	801acec <ld_dword>
 801ce6e:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 801ce70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ce72:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801ce74:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 801ce76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ce78:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 801ce7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ce7e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 801ce80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ce82:	789b      	ldrb	r3, [r3, #2]
 801ce84:	2b01      	cmp	r3, #1
 801ce86:	d005      	beq.n	801ce94 <find_volume+0x238>
 801ce88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ce8a:	789b      	ldrb	r3, [r3, #2]
 801ce8c:	2b02      	cmp	r3, #2
 801ce8e:	d001      	beq.n	801ce94 <find_volume+0x238>
 801ce90:	230d      	movs	r3, #13
 801ce92:	e15c      	b.n	801d14e <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 801ce94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ce96:	789b      	ldrb	r3, [r3, #2]
 801ce98:	461a      	mov	r2, r3
 801ce9a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801ce9c:	fb02 f303 	mul.w	r3, r2, r3
 801cea0:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 801cea2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cea4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801cea8:	461a      	mov	r2, r3
 801ceaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ceac:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 801ceae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ceb0:	895b      	ldrh	r3, [r3, #10]
 801ceb2:	2b00      	cmp	r3, #0
 801ceb4:	d008      	beq.n	801cec8 <find_volume+0x26c>
 801ceb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ceb8:	895b      	ldrh	r3, [r3, #10]
 801ceba:	461a      	mov	r2, r3
 801cebc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cebe:	895b      	ldrh	r3, [r3, #10]
 801cec0:	3b01      	subs	r3, #1
 801cec2:	4013      	ands	r3, r2
 801cec4:	2b00      	cmp	r3, #0
 801cec6:	d001      	beq.n	801cecc <find_volume+0x270>
 801cec8:	230d      	movs	r3, #13
 801ceca:	e140      	b.n	801d14e <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 801cecc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cece:	3338      	adds	r3, #56	@ 0x38
 801ced0:	3311      	adds	r3, #17
 801ced2:	4618      	mov	r0, r3
 801ced4:	f7fd fef2 	bl	801acbc <ld_word>
 801ced8:	4603      	mov	r3, r0
 801ceda:	461a      	mov	r2, r3
 801cedc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cede:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 801cee0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cee2:	891b      	ldrh	r3, [r3, #8]
 801cee4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801cee6:	8992      	ldrh	r2, [r2, #12]
 801cee8:	0952      	lsrs	r2, r2, #5
 801ceea:	b292      	uxth	r2, r2
 801ceec:	fbb3 f1f2 	udiv	r1, r3, r2
 801cef0:	fb01 f202 	mul.w	r2, r1, r2
 801cef4:	1a9b      	subs	r3, r3, r2
 801cef6:	b29b      	uxth	r3, r3
 801cef8:	2b00      	cmp	r3, #0
 801cefa:	d003      	beq.n	801cf04 <find_volume+0x2a8>
 801cefc:	230d      	movs	r3, #13
 801cefe:	e126      	b.n	801d14e <find_volume+0x4f2>
 801cf00:	24000550 	.word	0x24000550

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 801cf04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cf06:	3338      	adds	r3, #56	@ 0x38
 801cf08:	3313      	adds	r3, #19
 801cf0a:	4618      	mov	r0, r3
 801cf0c:	f7fd fed6 	bl	801acbc <ld_word>
 801cf10:	4603      	mov	r3, r0
 801cf12:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 801cf14:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801cf16:	2b00      	cmp	r3, #0
 801cf18:	d106      	bne.n	801cf28 <find_volume+0x2cc>
 801cf1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cf1c:	3338      	adds	r3, #56	@ 0x38
 801cf1e:	3320      	adds	r3, #32
 801cf20:	4618      	mov	r0, r3
 801cf22:	f7fd fee3 	bl	801acec <ld_dword>
 801cf26:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 801cf28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cf2a:	3338      	adds	r3, #56	@ 0x38
 801cf2c:	330e      	adds	r3, #14
 801cf2e:	4618      	mov	r0, r3
 801cf30:	f7fd fec4 	bl	801acbc <ld_word>
 801cf34:	4603      	mov	r3, r0
 801cf36:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 801cf38:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801cf3a:	2b00      	cmp	r3, #0
 801cf3c:	d101      	bne.n	801cf42 <find_volume+0x2e6>
 801cf3e:	230d      	movs	r3, #13
 801cf40:	e105      	b.n	801d14e <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 801cf42:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801cf44:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801cf46:	4413      	add	r3, r2
 801cf48:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801cf4a:	8911      	ldrh	r1, [r2, #8]
 801cf4c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801cf4e:	8992      	ldrh	r2, [r2, #12]
 801cf50:	0952      	lsrs	r2, r2, #5
 801cf52:	b292      	uxth	r2, r2
 801cf54:	fbb1 f2f2 	udiv	r2, r1, r2
 801cf58:	b292      	uxth	r2, r2
 801cf5a:	4413      	add	r3, r2
 801cf5c:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 801cf5e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801cf60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801cf62:	429a      	cmp	r2, r3
 801cf64:	d201      	bcs.n	801cf6a <find_volume+0x30e>
 801cf66:	230d      	movs	r3, #13
 801cf68:	e0f1      	b.n	801d14e <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 801cf6a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801cf6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801cf6e:	1ad3      	subs	r3, r2, r3
 801cf70:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801cf72:	8952      	ldrh	r2, [r2, #10]
 801cf74:	fbb3 f3f2 	udiv	r3, r3, r2
 801cf78:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 801cf7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cf7c:	2b00      	cmp	r3, #0
 801cf7e:	d101      	bne.n	801cf84 <find_volume+0x328>
 801cf80:	230d      	movs	r3, #13
 801cf82:	e0e4      	b.n	801d14e <find_volume+0x4f2>
		fmt = FS_FAT32;
 801cf84:	2303      	movs	r3, #3
 801cf86:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 801cf8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cf8c:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 801cf90:	4293      	cmp	r3, r2
 801cf92:	d802      	bhi.n	801cf9a <find_volume+0x33e>
 801cf94:	2302      	movs	r3, #2
 801cf96:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 801cf9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cf9c:	f640 72f5 	movw	r2, #4085	@ 0xff5
 801cfa0:	4293      	cmp	r3, r2
 801cfa2:	d802      	bhi.n	801cfaa <find_volume+0x34e>
 801cfa4:	2301      	movs	r3, #1
 801cfa6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 801cfaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cfac:	1c9a      	adds	r2, r3, #2
 801cfae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cfb0:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 801cfb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cfb4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801cfb6:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 801cfb8:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801cfba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801cfbc:	441a      	add	r2, r3
 801cfbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cfc0:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 801cfc2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801cfc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801cfc6:	441a      	add	r2, r3
 801cfc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cfca:	631a      	str	r2, [r3, #48]	@ 0x30
		if (fmt == FS_FAT32) {
 801cfcc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801cfd0:	2b03      	cmp	r3, #3
 801cfd2:	d11e      	bne.n	801d012 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 801cfd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cfd6:	3338      	adds	r3, #56	@ 0x38
 801cfd8:	332a      	adds	r3, #42	@ 0x2a
 801cfda:	4618      	mov	r0, r3
 801cfdc:	f7fd fe6e 	bl	801acbc <ld_word>
 801cfe0:	4603      	mov	r3, r0
 801cfe2:	2b00      	cmp	r3, #0
 801cfe4:	d001      	beq.n	801cfea <find_volume+0x38e>
 801cfe6:	230d      	movs	r3, #13
 801cfe8:	e0b1      	b.n	801d14e <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 801cfea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cfec:	891b      	ldrh	r3, [r3, #8]
 801cfee:	2b00      	cmp	r3, #0
 801cff0:	d001      	beq.n	801cff6 <find_volume+0x39a>
 801cff2:	230d      	movs	r3, #13
 801cff4:	e0ab      	b.n	801d14e <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 801cff6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cff8:	3338      	adds	r3, #56	@ 0x38
 801cffa:	332c      	adds	r3, #44	@ 0x2c
 801cffc:	4618      	mov	r0, r3
 801cffe:	f7fd fe75 	bl	801acec <ld_dword>
 801d002:	4602      	mov	r2, r0
 801d004:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d006:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 801d008:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d00a:	69db      	ldr	r3, [r3, #28]
 801d00c:	009b      	lsls	r3, r3, #2
 801d00e:	647b      	str	r3, [r7, #68]	@ 0x44
 801d010:	e01f      	b.n	801d052 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 801d012:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d014:	891b      	ldrh	r3, [r3, #8]
 801d016:	2b00      	cmp	r3, #0
 801d018:	d101      	bne.n	801d01e <find_volume+0x3c2>
 801d01a:	230d      	movs	r3, #13
 801d01c:	e097      	b.n	801d14e <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 801d01e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d020:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801d022:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801d024:	441a      	add	r2, r3
 801d026:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d028:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 801d02a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801d02e:	2b02      	cmp	r3, #2
 801d030:	d103      	bne.n	801d03a <find_volume+0x3de>
 801d032:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d034:	69db      	ldr	r3, [r3, #28]
 801d036:	005b      	lsls	r3, r3, #1
 801d038:	e00a      	b.n	801d050 <find_volume+0x3f4>
 801d03a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d03c:	69da      	ldr	r2, [r3, #28]
 801d03e:	4613      	mov	r3, r2
 801d040:	005b      	lsls	r3, r3, #1
 801d042:	4413      	add	r3, r2
 801d044:	085a      	lsrs	r2, r3, #1
 801d046:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d048:	69db      	ldr	r3, [r3, #28]
 801d04a:	f003 0301 	and.w	r3, r3, #1
 801d04e:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 801d050:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 801d052:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d054:	6a1a      	ldr	r2, [r3, #32]
 801d056:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d058:	899b      	ldrh	r3, [r3, #12]
 801d05a:	4619      	mov	r1, r3
 801d05c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801d05e:	440b      	add	r3, r1
 801d060:	3b01      	subs	r3, #1
 801d062:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801d064:	8989      	ldrh	r1, [r1, #12]
 801d066:	fbb3 f3f1 	udiv	r3, r3, r1
 801d06a:	429a      	cmp	r2, r3
 801d06c:	d201      	bcs.n	801d072 <find_volume+0x416>
 801d06e:	230d      	movs	r3, #13
 801d070:	e06d      	b.n	801d14e <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 801d072:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d074:	f04f 32ff 	mov.w	r2, #4294967295
 801d078:	619a      	str	r2, [r3, #24]
 801d07a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d07c:	699a      	ldr	r2, [r3, #24]
 801d07e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d080:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 801d082:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d084:	2280      	movs	r2, #128	@ 0x80
 801d086:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 801d088:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801d08c:	2b03      	cmp	r3, #3
 801d08e:	d149      	bne.n	801d124 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 801d090:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d092:	3338      	adds	r3, #56	@ 0x38
 801d094:	3330      	adds	r3, #48	@ 0x30
 801d096:	4618      	mov	r0, r3
 801d098:	f7fd fe10 	bl	801acbc <ld_word>
 801d09c:	4603      	mov	r3, r0
 801d09e:	2b01      	cmp	r3, #1
 801d0a0:	d140      	bne.n	801d124 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 801d0a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801d0a4:	3301      	adds	r3, #1
 801d0a6:	4619      	mov	r1, r3
 801d0a8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801d0aa:	f7fe f8b7 	bl	801b21c <move_window>
 801d0ae:	4603      	mov	r3, r0
 801d0b0:	2b00      	cmp	r3, #0
 801d0b2:	d137      	bne.n	801d124 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 801d0b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d0b6:	2200      	movs	r2, #0
 801d0b8:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 801d0ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d0bc:	3338      	adds	r3, #56	@ 0x38
 801d0be:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 801d0c2:	4618      	mov	r0, r3
 801d0c4:	f7fd fdfa 	bl	801acbc <ld_word>
 801d0c8:	4603      	mov	r3, r0
 801d0ca:	461a      	mov	r2, r3
 801d0cc:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 801d0d0:	429a      	cmp	r2, r3
 801d0d2:	d127      	bne.n	801d124 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 801d0d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d0d6:	3338      	adds	r3, #56	@ 0x38
 801d0d8:	4618      	mov	r0, r3
 801d0da:	f7fd fe07 	bl	801acec <ld_dword>
 801d0de:	4603      	mov	r3, r0
 801d0e0:	4a1d      	ldr	r2, [pc, #116]	@ (801d158 <find_volume+0x4fc>)
 801d0e2:	4293      	cmp	r3, r2
 801d0e4:	d11e      	bne.n	801d124 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 801d0e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d0e8:	3338      	adds	r3, #56	@ 0x38
 801d0ea:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 801d0ee:	4618      	mov	r0, r3
 801d0f0:	f7fd fdfc 	bl	801acec <ld_dword>
 801d0f4:	4603      	mov	r3, r0
 801d0f6:	4a19      	ldr	r2, [pc, #100]	@ (801d15c <find_volume+0x500>)
 801d0f8:	4293      	cmp	r3, r2
 801d0fa:	d113      	bne.n	801d124 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 801d0fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d0fe:	3338      	adds	r3, #56	@ 0x38
 801d100:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 801d104:	4618      	mov	r0, r3
 801d106:	f7fd fdf1 	bl	801acec <ld_dword>
 801d10a:	4602      	mov	r2, r0
 801d10c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d10e:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 801d110:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d112:	3338      	adds	r3, #56	@ 0x38
 801d114:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 801d118:	4618      	mov	r0, r3
 801d11a:	f7fd fde7 	bl	801acec <ld_dword>
 801d11e:	4602      	mov	r2, r0
 801d120:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d122:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 801d124:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d126:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 801d12a:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 801d12c:	4b0c      	ldr	r3, [pc, #48]	@ (801d160 <find_volume+0x504>)
 801d12e:	881b      	ldrh	r3, [r3, #0]
 801d130:	3301      	adds	r3, #1
 801d132:	b29a      	uxth	r2, r3
 801d134:	4b0a      	ldr	r3, [pc, #40]	@ (801d160 <find_volume+0x504>)
 801d136:	801a      	strh	r2, [r3, #0]
 801d138:	4b09      	ldr	r3, [pc, #36]	@ (801d160 <find_volume+0x504>)
 801d13a:	881a      	ldrh	r2, [r3, #0]
 801d13c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d13e:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 801d140:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d142:	4a08      	ldr	r2, [pc, #32]	@ (801d164 <find_volume+0x508>)
 801d144:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 801d146:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801d148:	f7fe f800 	bl	801b14c <clear_lock>
#endif
	return FR_OK;
 801d14c:	2300      	movs	r3, #0
}
 801d14e:	4618      	mov	r0, r3
 801d150:	3758      	adds	r7, #88	@ 0x58
 801d152:	46bd      	mov	sp, r7
 801d154:	bd80      	pop	{r7, pc}
 801d156:	bf00      	nop
 801d158:	41615252 	.word	0x41615252
 801d15c:	61417272 	.word	0x61417272
 801d160:	24000554 	.word	0x24000554
 801d164:	24000568 	.word	0x24000568

0801d168 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 801d168:	b580      	push	{r7, lr}
 801d16a:	b084      	sub	sp, #16
 801d16c:	af00      	add	r7, sp, #0
 801d16e:	6078      	str	r0, [r7, #4]
 801d170:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 801d172:	2309      	movs	r3, #9
 801d174:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 801d176:	687b      	ldr	r3, [r7, #4]
 801d178:	2b00      	cmp	r3, #0
 801d17a:	d01c      	beq.n	801d1b6 <validate+0x4e>
 801d17c:	687b      	ldr	r3, [r7, #4]
 801d17e:	681b      	ldr	r3, [r3, #0]
 801d180:	2b00      	cmp	r3, #0
 801d182:	d018      	beq.n	801d1b6 <validate+0x4e>
 801d184:	687b      	ldr	r3, [r7, #4]
 801d186:	681b      	ldr	r3, [r3, #0]
 801d188:	781b      	ldrb	r3, [r3, #0]
 801d18a:	2b00      	cmp	r3, #0
 801d18c:	d013      	beq.n	801d1b6 <validate+0x4e>
 801d18e:	687b      	ldr	r3, [r7, #4]
 801d190:	889a      	ldrh	r2, [r3, #4]
 801d192:	687b      	ldr	r3, [r7, #4]
 801d194:	681b      	ldr	r3, [r3, #0]
 801d196:	88db      	ldrh	r3, [r3, #6]
 801d198:	429a      	cmp	r2, r3
 801d19a:	d10c      	bne.n	801d1b6 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 801d19c:	687b      	ldr	r3, [r7, #4]
 801d19e:	681b      	ldr	r3, [r3, #0]
 801d1a0:	785b      	ldrb	r3, [r3, #1]
 801d1a2:	4618      	mov	r0, r3
 801d1a4:	f7fd fcea 	bl	801ab7c <disk_status>
 801d1a8:	4603      	mov	r3, r0
 801d1aa:	f003 0301 	and.w	r3, r3, #1
 801d1ae:	2b00      	cmp	r3, #0
 801d1b0:	d101      	bne.n	801d1b6 <validate+0x4e>
			res = FR_OK;
 801d1b2:	2300      	movs	r3, #0
 801d1b4:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 801d1b6:	7bfb      	ldrb	r3, [r7, #15]
 801d1b8:	2b00      	cmp	r3, #0
 801d1ba:	d102      	bne.n	801d1c2 <validate+0x5a>
 801d1bc:	687b      	ldr	r3, [r7, #4]
 801d1be:	681b      	ldr	r3, [r3, #0]
 801d1c0:	e000      	b.n	801d1c4 <validate+0x5c>
 801d1c2:	2300      	movs	r3, #0
 801d1c4:	683a      	ldr	r2, [r7, #0]
 801d1c6:	6013      	str	r3, [r2, #0]
	return res;
 801d1c8:	7bfb      	ldrb	r3, [r7, #15]
}
 801d1ca:	4618      	mov	r0, r3
 801d1cc:	3710      	adds	r7, #16
 801d1ce:	46bd      	mov	sp, r7
 801d1d0:	bd80      	pop	{r7, pc}
	...

0801d1d4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 801d1d4:	b580      	push	{r7, lr}
 801d1d6:	b088      	sub	sp, #32
 801d1d8:	af00      	add	r7, sp, #0
 801d1da:	60f8      	str	r0, [r7, #12]
 801d1dc:	60b9      	str	r1, [r7, #8]
 801d1de:	4613      	mov	r3, r2
 801d1e0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 801d1e2:	68bb      	ldr	r3, [r7, #8]
 801d1e4:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 801d1e6:	f107 0310 	add.w	r3, r7, #16
 801d1ea:	4618      	mov	r0, r3
 801d1ec:	f7ff fc9c 	bl	801cb28 <get_ldnumber>
 801d1f0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 801d1f2:	69fb      	ldr	r3, [r7, #28]
 801d1f4:	2b00      	cmp	r3, #0
 801d1f6:	da01      	bge.n	801d1fc <f_mount+0x28>
 801d1f8:	230b      	movs	r3, #11
 801d1fa:	e02b      	b.n	801d254 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 801d1fc:	4a17      	ldr	r2, [pc, #92]	@ (801d25c <f_mount+0x88>)
 801d1fe:	69fb      	ldr	r3, [r7, #28]
 801d200:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801d204:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 801d206:	69bb      	ldr	r3, [r7, #24]
 801d208:	2b00      	cmp	r3, #0
 801d20a:	d005      	beq.n	801d218 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 801d20c:	69b8      	ldr	r0, [r7, #24]
 801d20e:	f7fd ff9d 	bl	801b14c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 801d212:	69bb      	ldr	r3, [r7, #24]
 801d214:	2200      	movs	r2, #0
 801d216:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 801d218:	68fb      	ldr	r3, [r7, #12]
 801d21a:	2b00      	cmp	r3, #0
 801d21c:	d002      	beq.n	801d224 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 801d21e:	68fb      	ldr	r3, [r7, #12]
 801d220:	2200      	movs	r2, #0
 801d222:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 801d224:	68fa      	ldr	r2, [r7, #12]
 801d226:	490d      	ldr	r1, [pc, #52]	@ (801d25c <f_mount+0x88>)
 801d228:	69fb      	ldr	r3, [r7, #28]
 801d22a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 801d22e:	68fb      	ldr	r3, [r7, #12]
 801d230:	2b00      	cmp	r3, #0
 801d232:	d002      	beq.n	801d23a <f_mount+0x66>
 801d234:	79fb      	ldrb	r3, [r7, #7]
 801d236:	2b01      	cmp	r3, #1
 801d238:	d001      	beq.n	801d23e <f_mount+0x6a>
 801d23a:	2300      	movs	r3, #0
 801d23c:	e00a      	b.n	801d254 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 801d23e:	f107 010c 	add.w	r1, r7, #12
 801d242:	f107 0308 	add.w	r3, r7, #8
 801d246:	2200      	movs	r2, #0
 801d248:	4618      	mov	r0, r3
 801d24a:	f7ff fd07 	bl	801cc5c <find_volume>
 801d24e:	4603      	mov	r3, r0
 801d250:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 801d252:	7dfb      	ldrb	r3, [r7, #23]
}
 801d254:	4618      	mov	r0, r3
 801d256:	3720      	adds	r7, #32
 801d258:	46bd      	mov	sp, r7
 801d25a:	bd80      	pop	{r7, pc}
 801d25c:	24000550 	.word	0x24000550

0801d260 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 801d260:	b580      	push	{r7, lr}
 801d262:	b09a      	sub	sp, #104	@ 0x68
 801d264:	af00      	add	r7, sp, #0
 801d266:	60f8      	str	r0, [r7, #12]
 801d268:	60b9      	str	r1, [r7, #8]
 801d26a:	4613      	mov	r3, r2
 801d26c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 801d26e:	68fb      	ldr	r3, [r7, #12]
 801d270:	2b00      	cmp	r3, #0
 801d272:	d101      	bne.n	801d278 <f_open+0x18>
 801d274:	2309      	movs	r3, #9
 801d276:	e1b7      	b.n	801d5e8 <f_open+0x388>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 801d278:	79fb      	ldrb	r3, [r7, #7]
 801d27a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801d27e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 801d280:	79fa      	ldrb	r2, [r7, #7]
 801d282:	f107 0114 	add.w	r1, r7, #20
 801d286:	f107 0308 	add.w	r3, r7, #8
 801d28a:	4618      	mov	r0, r3
 801d28c:	f7ff fce6 	bl	801cc5c <find_volume>
 801d290:	4603      	mov	r3, r0
 801d292:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 801d296:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801d29a:	2b00      	cmp	r3, #0
 801d29c:	f040 819b 	bne.w	801d5d6 <f_open+0x376>
		dj.obj.fs = fs;
 801d2a0:	697b      	ldr	r3, [r7, #20]
 801d2a2:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 801d2a4:	68ba      	ldr	r2, [r7, #8]
 801d2a6:	f107 0318 	add.w	r3, r7, #24
 801d2aa:	4611      	mov	r1, r2
 801d2ac:	4618      	mov	r0, r3
 801d2ae:	f7ff fbc5 	bl	801ca3c <follow_path>
 801d2b2:	4603      	mov	r3, r0
 801d2b4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 801d2b8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801d2bc:	2b00      	cmp	r3, #0
 801d2be:	d118      	bne.n	801d2f2 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 801d2c0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801d2c4:	b25b      	sxtb	r3, r3
 801d2c6:	2b00      	cmp	r3, #0
 801d2c8:	da03      	bge.n	801d2d2 <f_open+0x72>
				res = FR_INVALID_NAME;
 801d2ca:	2306      	movs	r3, #6
 801d2cc:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 801d2d0:	e00f      	b.n	801d2f2 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801d2d2:	79fb      	ldrb	r3, [r7, #7]
 801d2d4:	2b01      	cmp	r3, #1
 801d2d6:	bf8c      	ite	hi
 801d2d8:	2301      	movhi	r3, #1
 801d2da:	2300      	movls	r3, #0
 801d2dc:	b2db      	uxtb	r3, r3
 801d2de:	461a      	mov	r2, r3
 801d2e0:	f107 0318 	add.w	r3, r7, #24
 801d2e4:	4611      	mov	r1, r2
 801d2e6:	4618      	mov	r0, r3
 801d2e8:	f7fd fde8 	bl	801aebc <chk_lock>
 801d2ec:	4603      	mov	r3, r0
 801d2ee:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 801d2f2:	79fb      	ldrb	r3, [r7, #7]
 801d2f4:	f003 031c 	and.w	r3, r3, #28
 801d2f8:	2b00      	cmp	r3, #0
 801d2fa:	d07f      	beq.n	801d3fc <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 801d2fc:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801d300:	2b00      	cmp	r3, #0
 801d302:	d017      	beq.n	801d334 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 801d304:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801d308:	2b04      	cmp	r3, #4
 801d30a:	d10e      	bne.n	801d32a <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 801d30c:	f7fd fe32 	bl	801af74 <enq_lock>
 801d310:	4603      	mov	r3, r0
 801d312:	2b00      	cmp	r3, #0
 801d314:	d006      	beq.n	801d324 <f_open+0xc4>
 801d316:	f107 0318 	add.w	r3, r7, #24
 801d31a:	4618      	mov	r0, r3
 801d31c:	f7ff f894 	bl	801c448 <dir_register>
 801d320:	4603      	mov	r3, r0
 801d322:	e000      	b.n	801d326 <f_open+0xc6>
 801d324:	2312      	movs	r3, #18
 801d326:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 801d32a:	79fb      	ldrb	r3, [r7, #7]
 801d32c:	f043 0308 	orr.w	r3, r3, #8
 801d330:	71fb      	strb	r3, [r7, #7]
 801d332:	e010      	b.n	801d356 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 801d334:	7fbb      	ldrb	r3, [r7, #30]
 801d336:	f003 0311 	and.w	r3, r3, #17
 801d33a:	2b00      	cmp	r3, #0
 801d33c:	d003      	beq.n	801d346 <f_open+0xe6>
					res = FR_DENIED;
 801d33e:	2307      	movs	r3, #7
 801d340:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 801d344:	e007      	b.n	801d356 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 801d346:	79fb      	ldrb	r3, [r7, #7]
 801d348:	f003 0304 	and.w	r3, r3, #4
 801d34c:	2b00      	cmp	r3, #0
 801d34e:	d002      	beq.n	801d356 <f_open+0xf6>
 801d350:	2308      	movs	r3, #8
 801d352:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 801d356:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801d35a:	2b00      	cmp	r3, #0
 801d35c:	d168      	bne.n	801d430 <f_open+0x1d0>
 801d35e:	79fb      	ldrb	r3, [r7, #7]
 801d360:	f003 0308 	and.w	r3, r3, #8
 801d364:	2b00      	cmp	r3, #0
 801d366:	d063      	beq.n	801d430 <f_open+0x1d0>
				dw = GET_FATTIME();
 801d368:	f7fd fbaa 	bl	801aac0 <get_fattime>
 801d36c:	65b8      	str	r0, [r7, #88]	@ 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 801d36e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d370:	330e      	adds	r3, #14
 801d372:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 801d374:	4618      	mov	r0, r3
 801d376:	f7fd fcf7 	bl	801ad68 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 801d37a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d37c:	3316      	adds	r3, #22
 801d37e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 801d380:	4618      	mov	r0, r3
 801d382:	f7fd fcf1 	bl	801ad68 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 801d386:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d388:	330b      	adds	r3, #11
 801d38a:	2220      	movs	r2, #32
 801d38c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 801d38e:	697b      	ldr	r3, [r7, #20]
 801d390:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801d392:	4611      	mov	r1, r2
 801d394:	4618      	mov	r0, r3
 801d396:	f7fe fcc6 	bl	801bd26 <ld_clust>
 801d39a:	6578      	str	r0, [r7, #84]	@ 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 801d39c:	697b      	ldr	r3, [r7, #20]
 801d39e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801d3a0:	2200      	movs	r2, #0
 801d3a2:	4618      	mov	r0, r3
 801d3a4:	f7fe fcde 	bl	801bd64 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 801d3a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d3aa:	331c      	adds	r3, #28
 801d3ac:	2100      	movs	r1, #0
 801d3ae:	4618      	mov	r0, r3
 801d3b0:	f7fd fcda 	bl	801ad68 <st_dword>
					fs->wflag = 1;
 801d3b4:	697b      	ldr	r3, [r7, #20]
 801d3b6:	2201      	movs	r2, #1
 801d3b8:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 801d3ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801d3bc:	2b00      	cmp	r3, #0
 801d3be:	d037      	beq.n	801d430 <f_open+0x1d0>
						dw = fs->winsect;
 801d3c0:	697b      	ldr	r3, [r7, #20]
 801d3c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801d3c4:	65bb      	str	r3, [r7, #88]	@ 0x58
						res = remove_chain(&dj.obj, cl, 0);
 801d3c6:	f107 0318 	add.w	r3, r7, #24
 801d3ca:	2200      	movs	r2, #0
 801d3cc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801d3ce:	4618      	mov	r0, r3
 801d3d0:	f7fe f9ce 	bl	801b770 <remove_chain>
 801d3d4:	4603      	mov	r3, r0
 801d3d6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 801d3da:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801d3de:	2b00      	cmp	r3, #0
 801d3e0:	d126      	bne.n	801d430 <f_open+0x1d0>
							res = move_window(fs, dw);
 801d3e2:	697b      	ldr	r3, [r7, #20]
 801d3e4:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 801d3e6:	4618      	mov	r0, r3
 801d3e8:	f7fd ff18 	bl	801b21c <move_window>
 801d3ec:	4603      	mov	r3, r0
 801d3ee:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 801d3f2:	697b      	ldr	r3, [r7, #20]
 801d3f4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801d3f6:	3a01      	subs	r2, #1
 801d3f8:	615a      	str	r2, [r3, #20]
 801d3fa:	e019      	b.n	801d430 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 801d3fc:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801d400:	2b00      	cmp	r3, #0
 801d402:	d115      	bne.n	801d430 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 801d404:	7fbb      	ldrb	r3, [r7, #30]
 801d406:	f003 0310 	and.w	r3, r3, #16
 801d40a:	2b00      	cmp	r3, #0
 801d40c:	d003      	beq.n	801d416 <f_open+0x1b6>
					res = FR_NO_FILE;
 801d40e:	2304      	movs	r3, #4
 801d410:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 801d414:	e00c      	b.n	801d430 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 801d416:	79fb      	ldrb	r3, [r7, #7]
 801d418:	f003 0302 	and.w	r3, r3, #2
 801d41c:	2b00      	cmp	r3, #0
 801d41e:	d007      	beq.n	801d430 <f_open+0x1d0>
 801d420:	7fbb      	ldrb	r3, [r7, #30]
 801d422:	f003 0301 	and.w	r3, r3, #1
 801d426:	2b00      	cmp	r3, #0
 801d428:	d002      	beq.n	801d430 <f_open+0x1d0>
						res = FR_DENIED;
 801d42a:	2307      	movs	r3, #7
 801d42c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 801d430:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801d434:	2b00      	cmp	r3, #0
 801d436:	d126      	bne.n	801d486 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 801d438:	79fb      	ldrb	r3, [r7, #7]
 801d43a:	f003 0308 	and.w	r3, r3, #8
 801d43e:	2b00      	cmp	r3, #0
 801d440:	d003      	beq.n	801d44a <f_open+0x1ea>
				mode |= FA_MODIFIED;
 801d442:	79fb      	ldrb	r3, [r7, #7]
 801d444:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801d448:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 801d44a:	697b      	ldr	r3, [r7, #20]
 801d44c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801d44e:	68fb      	ldr	r3, [r7, #12]
 801d450:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 801d452:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801d454:	68fb      	ldr	r3, [r7, #12]
 801d456:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801d458:	79fb      	ldrb	r3, [r7, #7]
 801d45a:	2b01      	cmp	r3, #1
 801d45c:	bf8c      	ite	hi
 801d45e:	2301      	movhi	r3, #1
 801d460:	2300      	movls	r3, #0
 801d462:	b2db      	uxtb	r3, r3
 801d464:	461a      	mov	r2, r3
 801d466:	f107 0318 	add.w	r3, r7, #24
 801d46a:	4611      	mov	r1, r2
 801d46c:	4618      	mov	r0, r3
 801d46e:	f7fd fda3 	bl	801afb8 <inc_lock>
 801d472:	4602      	mov	r2, r0
 801d474:	68fb      	ldr	r3, [r7, #12]
 801d476:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 801d478:	68fb      	ldr	r3, [r7, #12]
 801d47a:	691b      	ldr	r3, [r3, #16]
 801d47c:	2b00      	cmp	r3, #0
 801d47e:	d102      	bne.n	801d486 <f_open+0x226>
 801d480:	2302      	movs	r3, #2
 801d482:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 801d486:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801d48a:	2b00      	cmp	r3, #0
 801d48c:	f040 80a3 	bne.w	801d5d6 <f_open+0x376>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 801d490:	697b      	ldr	r3, [r7, #20]
 801d492:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801d494:	4611      	mov	r1, r2
 801d496:	4618      	mov	r0, r3
 801d498:	f7fe fc45 	bl	801bd26 <ld_clust>
 801d49c:	4602      	mov	r2, r0
 801d49e:	68fb      	ldr	r3, [r7, #12]
 801d4a0:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 801d4a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d4a4:	331c      	adds	r3, #28
 801d4a6:	4618      	mov	r0, r3
 801d4a8:	f7fd fc20 	bl	801acec <ld_dword>
 801d4ac:	4602      	mov	r2, r0
 801d4ae:	68fb      	ldr	r3, [r7, #12]
 801d4b0:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 801d4b2:	68fb      	ldr	r3, [r7, #12]
 801d4b4:	2200      	movs	r2, #0
 801d4b6:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 801d4b8:	697a      	ldr	r2, [r7, #20]
 801d4ba:	68fb      	ldr	r3, [r7, #12]
 801d4bc:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 801d4be:	697b      	ldr	r3, [r7, #20]
 801d4c0:	88da      	ldrh	r2, [r3, #6]
 801d4c2:	68fb      	ldr	r3, [r7, #12]
 801d4c4:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 801d4c6:	68fb      	ldr	r3, [r7, #12]
 801d4c8:	79fa      	ldrb	r2, [r7, #7]
 801d4ca:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 801d4cc:	68fb      	ldr	r3, [r7, #12]
 801d4ce:	2200      	movs	r2, #0
 801d4d0:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 801d4d2:	68fb      	ldr	r3, [r7, #12]
 801d4d4:	2200      	movs	r2, #0
 801d4d6:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 801d4d8:	68fb      	ldr	r3, [r7, #12]
 801d4da:	2200      	movs	r2, #0
 801d4dc:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 801d4de:	68fb      	ldr	r3, [r7, #12]
 801d4e0:	3330      	adds	r3, #48	@ 0x30
 801d4e2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 801d4e6:	2100      	movs	r1, #0
 801d4e8:	4618      	mov	r0, r3
 801d4ea:	f7fd fc8a 	bl	801ae02 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 801d4ee:	79fb      	ldrb	r3, [r7, #7]
 801d4f0:	f003 0320 	and.w	r3, r3, #32
 801d4f4:	2b00      	cmp	r3, #0
 801d4f6:	d06e      	beq.n	801d5d6 <f_open+0x376>
 801d4f8:	68fb      	ldr	r3, [r7, #12]
 801d4fa:	68db      	ldr	r3, [r3, #12]
 801d4fc:	2b00      	cmp	r3, #0
 801d4fe:	d06a      	beq.n	801d5d6 <f_open+0x376>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 801d500:	68fb      	ldr	r3, [r7, #12]
 801d502:	68da      	ldr	r2, [r3, #12]
 801d504:	68fb      	ldr	r3, [r7, #12]
 801d506:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 801d508:	697b      	ldr	r3, [r7, #20]
 801d50a:	895b      	ldrh	r3, [r3, #10]
 801d50c:	461a      	mov	r2, r3
 801d50e:	697b      	ldr	r3, [r7, #20]
 801d510:	899b      	ldrh	r3, [r3, #12]
 801d512:	fb02 f303 	mul.w	r3, r2, r3
 801d516:	653b      	str	r3, [r7, #80]	@ 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 801d518:	68fb      	ldr	r3, [r7, #12]
 801d51a:	689b      	ldr	r3, [r3, #8]
 801d51c:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801d51e:	68fb      	ldr	r3, [r7, #12]
 801d520:	68db      	ldr	r3, [r3, #12]
 801d522:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801d524:	e016      	b.n	801d554 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 801d526:	68fb      	ldr	r3, [r7, #12]
 801d528:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 801d52a:	4618      	mov	r0, r3
 801d52c:	f7fd ff33 	bl	801b396 <get_fat>
 801d530:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 801d532:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801d534:	2b01      	cmp	r3, #1
 801d536:	d802      	bhi.n	801d53e <f_open+0x2de>
 801d538:	2302      	movs	r3, #2
 801d53a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 801d53e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801d540:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d544:	d102      	bne.n	801d54c <f_open+0x2ec>
 801d546:	2301      	movs	r3, #1
 801d548:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801d54c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801d54e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801d550:	1ad3      	subs	r3, r2, r3
 801d552:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801d554:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801d558:	2b00      	cmp	r3, #0
 801d55a:	d103      	bne.n	801d564 <f_open+0x304>
 801d55c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801d55e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801d560:	429a      	cmp	r2, r3
 801d562:	d8e0      	bhi.n	801d526 <f_open+0x2c6>
				}
				fp->clust = clst;
 801d564:	68fb      	ldr	r3, [r7, #12]
 801d566:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 801d568:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 801d56a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801d56e:	2b00      	cmp	r3, #0
 801d570:	d131      	bne.n	801d5d6 <f_open+0x376>
 801d572:	697b      	ldr	r3, [r7, #20]
 801d574:	899b      	ldrh	r3, [r3, #12]
 801d576:	461a      	mov	r2, r3
 801d578:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801d57a:	fbb3 f1f2 	udiv	r1, r3, r2
 801d57e:	fb01 f202 	mul.w	r2, r1, r2
 801d582:	1a9b      	subs	r3, r3, r2
 801d584:	2b00      	cmp	r3, #0
 801d586:	d026      	beq.n	801d5d6 <f_open+0x376>
					if ((sc = clust2sect(fs, clst)) == 0) {
 801d588:	697b      	ldr	r3, [r7, #20]
 801d58a:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 801d58c:	4618      	mov	r0, r3
 801d58e:	f7fd fee3 	bl	801b358 <clust2sect>
 801d592:	64f8      	str	r0, [r7, #76]	@ 0x4c
 801d594:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801d596:	2b00      	cmp	r3, #0
 801d598:	d103      	bne.n	801d5a2 <f_open+0x342>
						res = FR_INT_ERR;
 801d59a:	2302      	movs	r3, #2
 801d59c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 801d5a0:	e019      	b.n	801d5d6 <f_open+0x376>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 801d5a2:	697b      	ldr	r3, [r7, #20]
 801d5a4:	899b      	ldrh	r3, [r3, #12]
 801d5a6:	461a      	mov	r2, r3
 801d5a8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801d5aa:	fbb3 f2f2 	udiv	r2, r3, r2
 801d5ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801d5b0:	441a      	add	r2, r3
 801d5b2:	68fb      	ldr	r3, [r7, #12]
 801d5b4:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 801d5b6:	697b      	ldr	r3, [r7, #20]
 801d5b8:	7858      	ldrb	r0, [r3, #1]
 801d5ba:	68fb      	ldr	r3, [r7, #12]
 801d5bc:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801d5c0:	68fb      	ldr	r3, [r7, #12]
 801d5c2:	6a1a      	ldr	r2, [r3, #32]
 801d5c4:	2301      	movs	r3, #1
 801d5c6:	f7fd fb1b 	bl	801ac00 <disk_read>
 801d5ca:	4603      	mov	r3, r0
 801d5cc:	2b00      	cmp	r3, #0
 801d5ce:	d002      	beq.n	801d5d6 <f_open+0x376>
 801d5d0:	2301      	movs	r3, #1
 801d5d2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 801d5d6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801d5da:	2b00      	cmp	r3, #0
 801d5dc:	d002      	beq.n	801d5e4 <f_open+0x384>
 801d5de:	68fb      	ldr	r3, [r7, #12]
 801d5e0:	2200      	movs	r2, #0
 801d5e2:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 801d5e4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 801d5e8:	4618      	mov	r0, r3
 801d5ea:	3768      	adds	r7, #104	@ 0x68
 801d5ec:	46bd      	mov	sp, r7
 801d5ee:	bd80      	pop	{r7, pc}

0801d5f0 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 801d5f0:	b580      	push	{r7, lr}
 801d5f2:	b08c      	sub	sp, #48	@ 0x30
 801d5f4:	af00      	add	r7, sp, #0
 801d5f6:	60f8      	str	r0, [r7, #12]
 801d5f8:	60b9      	str	r1, [r7, #8]
 801d5fa:	607a      	str	r2, [r7, #4]
 801d5fc:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 801d5fe:	68bb      	ldr	r3, [r7, #8]
 801d600:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 801d602:	683b      	ldr	r3, [r7, #0]
 801d604:	2200      	movs	r2, #0
 801d606:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 801d608:	68fb      	ldr	r3, [r7, #12]
 801d60a:	f107 0210 	add.w	r2, r7, #16
 801d60e:	4611      	mov	r1, r2
 801d610:	4618      	mov	r0, r3
 801d612:	f7ff fda9 	bl	801d168 <validate>
 801d616:	4603      	mov	r3, r0
 801d618:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 801d61c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801d620:	2b00      	cmp	r3, #0
 801d622:	d107      	bne.n	801d634 <f_write+0x44>
 801d624:	68fb      	ldr	r3, [r7, #12]
 801d626:	7d5b      	ldrb	r3, [r3, #21]
 801d628:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 801d62c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801d630:	2b00      	cmp	r3, #0
 801d632:	d002      	beq.n	801d63a <f_write+0x4a>
 801d634:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801d638:	e16a      	b.n	801d910 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 801d63a:	68fb      	ldr	r3, [r7, #12]
 801d63c:	7d1b      	ldrb	r3, [r3, #20]
 801d63e:	f003 0302 	and.w	r3, r3, #2
 801d642:	2b00      	cmp	r3, #0
 801d644:	d101      	bne.n	801d64a <f_write+0x5a>
 801d646:	2307      	movs	r3, #7
 801d648:	e162      	b.n	801d910 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 801d64a:	68fb      	ldr	r3, [r7, #12]
 801d64c:	699a      	ldr	r2, [r3, #24]
 801d64e:	687b      	ldr	r3, [r7, #4]
 801d650:	441a      	add	r2, r3
 801d652:	68fb      	ldr	r3, [r7, #12]
 801d654:	699b      	ldr	r3, [r3, #24]
 801d656:	429a      	cmp	r2, r3
 801d658:	f080 814c 	bcs.w	801d8f4 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 801d65c:	68fb      	ldr	r3, [r7, #12]
 801d65e:	699b      	ldr	r3, [r3, #24]
 801d660:	43db      	mvns	r3, r3
 801d662:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 801d664:	e146      	b.n	801d8f4 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 801d666:	68fb      	ldr	r3, [r7, #12]
 801d668:	699b      	ldr	r3, [r3, #24]
 801d66a:	693a      	ldr	r2, [r7, #16]
 801d66c:	8992      	ldrh	r2, [r2, #12]
 801d66e:	fbb3 f1f2 	udiv	r1, r3, r2
 801d672:	fb01 f202 	mul.w	r2, r1, r2
 801d676:	1a9b      	subs	r3, r3, r2
 801d678:	2b00      	cmp	r3, #0
 801d67a:	f040 80f1 	bne.w	801d860 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 801d67e:	68fb      	ldr	r3, [r7, #12]
 801d680:	699b      	ldr	r3, [r3, #24]
 801d682:	693a      	ldr	r2, [r7, #16]
 801d684:	8992      	ldrh	r2, [r2, #12]
 801d686:	fbb3 f3f2 	udiv	r3, r3, r2
 801d68a:	693a      	ldr	r2, [r7, #16]
 801d68c:	8952      	ldrh	r2, [r2, #10]
 801d68e:	3a01      	subs	r2, #1
 801d690:	4013      	ands	r3, r2
 801d692:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 801d694:	69bb      	ldr	r3, [r7, #24]
 801d696:	2b00      	cmp	r3, #0
 801d698:	d143      	bne.n	801d722 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 801d69a:	68fb      	ldr	r3, [r7, #12]
 801d69c:	699b      	ldr	r3, [r3, #24]
 801d69e:	2b00      	cmp	r3, #0
 801d6a0:	d10c      	bne.n	801d6bc <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 801d6a2:	68fb      	ldr	r3, [r7, #12]
 801d6a4:	689b      	ldr	r3, [r3, #8]
 801d6a6:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 801d6a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d6aa:	2b00      	cmp	r3, #0
 801d6ac:	d11a      	bne.n	801d6e4 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 801d6ae:	68fb      	ldr	r3, [r7, #12]
 801d6b0:	2100      	movs	r1, #0
 801d6b2:	4618      	mov	r0, r3
 801d6b4:	f7fe f8c1 	bl	801b83a <create_chain>
 801d6b8:	62b8      	str	r0, [r7, #40]	@ 0x28
 801d6ba:	e013      	b.n	801d6e4 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801d6bc:	68fb      	ldr	r3, [r7, #12]
 801d6be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d6c0:	2b00      	cmp	r3, #0
 801d6c2:	d007      	beq.n	801d6d4 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 801d6c4:	68fb      	ldr	r3, [r7, #12]
 801d6c6:	699b      	ldr	r3, [r3, #24]
 801d6c8:	4619      	mov	r1, r3
 801d6ca:	68f8      	ldr	r0, [r7, #12]
 801d6cc:	f7fe f94d 	bl	801b96a <clmt_clust>
 801d6d0:	62b8      	str	r0, [r7, #40]	@ 0x28
 801d6d2:	e007      	b.n	801d6e4 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 801d6d4:	68fa      	ldr	r2, [r7, #12]
 801d6d6:	68fb      	ldr	r3, [r7, #12]
 801d6d8:	69db      	ldr	r3, [r3, #28]
 801d6da:	4619      	mov	r1, r3
 801d6dc:	4610      	mov	r0, r2
 801d6de:	f7fe f8ac 	bl	801b83a <create_chain>
 801d6e2:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801d6e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d6e6:	2b00      	cmp	r3, #0
 801d6e8:	f000 8109 	beq.w	801d8fe <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 801d6ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d6ee:	2b01      	cmp	r3, #1
 801d6f0:	d104      	bne.n	801d6fc <f_write+0x10c>
 801d6f2:	68fb      	ldr	r3, [r7, #12]
 801d6f4:	2202      	movs	r2, #2
 801d6f6:	755a      	strb	r2, [r3, #21]
 801d6f8:	2302      	movs	r3, #2
 801d6fa:	e109      	b.n	801d910 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801d6fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d6fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d702:	d104      	bne.n	801d70e <f_write+0x11e>
 801d704:	68fb      	ldr	r3, [r7, #12]
 801d706:	2201      	movs	r2, #1
 801d708:	755a      	strb	r2, [r3, #21]
 801d70a:	2301      	movs	r3, #1
 801d70c:	e100      	b.n	801d910 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 801d70e:	68fb      	ldr	r3, [r7, #12]
 801d710:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801d712:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 801d714:	68fb      	ldr	r3, [r7, #12]
 801d716:	689b      	ldr	r3, [r3, #8]
 801d718:	2b00      	cmp	r3, #0
 801d71a:	d102      	bne.n	801d722 <f_write+0x132>
 801d71c:	68fb      	ldr	r3, [r7, #12]
 801d71e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801d720:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 801d722:	68fb      	ldr	r3, [r7, #12]
 801d724:	7d1b      	ldrb	r3, [r3, #20]
 801d726:	b25b      	sxtb	r3, r3
 801d728:	2b00      	cmp	r3, #0
 801d72a:	da18      	bge.n	801d75e <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801d72c:	693b      	ldr	r3, [r7, #16]
 801d72e:	7858      	ldrb	r0, [r3, #1]
 801d730:	68fb      	ldr	r3, [r7, #12]
 801d732:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801d736:	68fb      	ldr	r3, [r7, #12]
 801d738:	6a1a      	ldr	r2, [r3, #32]
 801d73a:	2301      	movs	r3, #1
 801d73c:	f7fd fa80 	bl	801ac40 <disk_write>
 801d740:	4603      	mov	r3, r0
 801d742:	2b00      	cmp	r3, #0
 801d744:	d004      	beq.n	801d750 <f_write+0x160>
 801d746:	68fb      	ldr	r3, [r7, #12]
 801d748:	2201      	movs	r2, #1
 801d74a:	755a      	strb	r2, [r3, #21]
 801d74c:	2301      	movs	r3, #1
 801d74e:	e0df      	b.n	801d910 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 801d750:	68fb      	ldr	r3, [r7, #12]
 801d752:	7d1b      	ldrb	r3, [r3, #20]
 801d754:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801d758:	b2da      	uxtb	r2, r3
 801d75a:	68fb      	ldr	r3, [r7, #12]
 801d75c:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 801d75e:	693a      	ldr	r2, [r7, #16]
 801d760:	68fb      	ldr	r3, [r7, #12]
 801d762:	69db      	ldr	r3, [r3, #28]
 801d764:	4619      	mov	r1, r3
 801d766:	4610      	mov	r0, r2
 801d768:	f7fd fdf6 	bl	801b358 <clust2sect>
 801d76c:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 801d76e:	697b      	ldr	r3, [r7, #20]
 801d770:	2b00      	cmp	r3, #0
 801d772:	d104      	bne.n	801d77e <f_write+0x18e>
 801d774:	68fb      	ldr	r3, [r7, #12]
 801d776:	2202      	movs	r2, #2
 801d778:	755a      	strb	r2, [r3, #21]
 801d77a:	2302      	movs	r3, #2
 801d77c:	e0c8      	b.n	801d910 <f_write+0x320>
			sect += csect;
 801d77e:	697a      	ldr	r2, [r7, #20]
 801d780:	69bb      	ldr	r3, [r7, #24]
 801d782:	4413      	add	r3, r2
 801d784:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 801d786:	693b      	ldr	r3, [r7, #16]
 801d788:	899b      	ldrh	r3, [r3, #12]
 801d78a:	461a      	mov	r2, r3
 801d78c:	687b      	ldr	r3, [r7, #4]
 801d78e:	fbb3 f3f2 	udiv	r3, r3, r2
 801d792:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 801d794:	6a3b      	ldr	r3, [r7, #32]
 801d796:	2b00      	cmp	r3, #0
 801d798:	d043      	beq.n	801d822 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 801d79a:	69ba      	ldr	r2, [r7, #24]
 801d79c:	6a3b      	ldr	r3, [r7, #32]
 801d79e:	4413      	add	r3, r2
 801d7a0:	693a      	ldr	r2, [r7, #16]
 801d7a2:	8952      	ldrh	r2, [r2, #10]
 801d7a4:	4293      	cmp	r3, r2
 801d7a6:	d905      	bls.n	801d7b4 <f_write+0x1c4>
					cc = fs->csize - csect;
 801d7a8:	693b      	ldr	r3, [r7, #16]
 801d7aa:	895b      	ldrh	r3, [r3, #10]
 801d7ac:	461a      	mov	r2, r3
 801d7ae:	69bb      	ldr	r3, [r7, #24]
 801d7b0:	1ad3      	subs	r3, r2, r3
 801d7b2:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801d7b4:	693b      	ldr	r3, [r7, #16]
 801d7b6:	7858      	ldrb	r0, [r3, #1]
 801d7b8:	6a3b      	ldr	r3, [r7, #32]
 801d7ba:	697a      	ldr	r2, [r7, #20]
 801d7bc:	69f9      	ldr	r1, [r7, #28]
 801d7be:	f7fd fa3f 	bl	801ac40 <disk_write>
 801d7c2:	4603      	mov	r3, r0
 801d7c4:	2b00      	cmp	r3, #0
 801d7c6:	d004      	beq.n	801d7d2 <f_write+0x1e2>
 801d7c8:	68fb      	ldr	r3, [r7, #12]
 801d7ca:	2201      	movs	r2, #1
 801d7cc:	755a      	strb	r2, [r3, #21]
 801d7ce:	2301      	movs	r3, #1
 801d7d0:	e09e      	b.n	801d910 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 801d7d2:	68fb      	ldr	r3, [r7, #12]
 801d7d4:	6a1a      	ldr	r2, [r3, #32]
 801d7d6:	697b      	ldr	r3, [r7, #20]
 801d7d8:	1ad3      	subs	r3, r2, r3
 801d7da:	6a3a      	ldr	r2, [r7, #32]
 801d7dc:	429a      	cmp	r2, r3
 801d7de:	d918      	bls.n	801d812 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 801d7e0:	68fb      	ldr	r3, [r7, #12]
 801d7e2:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 801d7e6:	68fb      	ldr	r3, [r7, #12]
 801d7e8:	6a1a      	ldr	r2, [r3, #32]
 801d7ea:	697b      	ldr	r3, [r7, #20]
 801d7ec:	1ad3      	subs	r3, r2, r3
 801d7ee:	693a      	ldr	r2, [r7, #16]
 801d7f0:	8992      	ldrh	r2, [r2, #12]
 801d7f2:	fb02 f303 	mul.w	r3, r2, r3
 801d7f6:	69fa      	ldr	r2, [r7, #28]
 801d7f8:	18d1      	adds	r1, r2, r3
 801d7fa:	693b      	ldr	r3, [r7, #16]
 801d7fc:	899b      	ldrh	r3, [r3, #12]
 801d7fe:	461a      	mov	r2, r3
 801d800:	f7fd fade 	bl	801adc0 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 801d804:	68fb      	ldr	r3, [r7, #12]
 801d806:	7d1b      	ldrb	r3, [r3, #20]
 801d808:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801d80c:	b2da      	uxtb	r2, r3
 801d80e:	68fb      	ldr	r3, [r7, #12]
 801d810:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 801d812:	693b      	ldr	r3, [r7, #16]
 801d814:	899b      	ldrh	r3, [r3, #12]
 801d816:	461a      	mov	r2, r3
 801d818:	6a3b      	ldr	r3, [r7, #32]
 801d81a:	fb02 f303 	mul.w	r3, r2, r3
 801d81e:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 801d820:	e04b      	b.n	801d8ba <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801d822:	68fb      	ldr	r3, [r7, #12]
 801d824:	6a1b      	ldr	r3, [r3, #32]
 801d826:	697a      	ldr	r2, [r7, #20]
 801d828:	429a      	cmp	r2, r3
 801d82a:	d016      	beq.n	801d85a <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 801d82c:	68fb      	ldr	r3, [r7, #12]
 801d82e:	699a      	ldr	r2, [r3, #24]
 801d830:	68fb      	ldr	r3, [r7, #12]
 801d832:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801d834:	429a      	cmp	r2, r3
 801d836:	d210      	bcs.n	801d85a <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 801d838:	693b      	ldr	r3, [r7, #16]
 801d83a:	7858      	ldrb	r0, [r3, #1]
 801d83c:	68fb      	ldr	r3, [r7, #12]
 801d83e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801d842:	2301      	movs	r3, #1
 801d844:	697a      	ldr	r2, [r7, #20]
 801d846:	f7fd f9db 	bl	801ac00 <disk_read>
 801d84a:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 801d84c:	2b00      	cmp	r3, #0
 801d84e:	d004      	beq.n	801d85a <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 801d850:	68fb      	ldr	r3, [r7, #12]
 801d852:	2201      	movs	r2, #1
 801d854:	755a      	strb	r2, [r3, #21]
 801d856:	2301      	movs	r3, #1
 801d858:	e05a      	b.n	801d910 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 801d85a:	68fb      	ldr	r3, [r7, #12]
 801d85c:	697a      	ldr	r2, [r7, #20]
 801d85e:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 801d860:	693b      	ldr	r3, [r7, #16]
 801d862:	899b      	ldrh	r3, [r3, #12]
 801d864:	4618      	mov	r0, r3
 801d866:	68fb      	ldr	r3, [r7, #12]
 801d868:	699b      	ldr	r3, [r3, #24]
 801d86a:	693a      	ldr	r2, [r7, #16]
 801d86c:	8992      	ldrh	r2, [r2, #12]
 801d86e:	fbb3 f1f2 	udiv	r1, r3, r2
 801d872:	fb01 f202 	mul.w	r2, r1, r2
 801d876:	1a9b      	subs	r3, r3, r2
 801d878:	1ac3      	subs	r3, r0, r3
 801d87a:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 801d87c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801d87e:	687b      	ldr	r3, [r7, #4]
 801d880:	429a      	cmp	r2, r3
 801d882:	d901      	bls.n	801d888 <f_write+0x298>
 801d884:	687b      	ldr	r3, [r7, #4]
 801d886:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 801d888:	68fb      	ldr	r3, [r7, #12]
 801d88a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801d88e:	68fb      	ldr	r3, [r7, #12]
 801d890:	699b      	ldr	r3, [r3, #24]
 801d892:	693a      	ldr	r2, [r7, #16]
 801d894:	8992      	ldrh	r2, [r2, #12]
 801d896:	fbb3 f0f2 	udiv	r0, r3, r2
 801d89a:	fb00 f202 	mul.w	r2, r0, r2
 801d89e:	1a9b      	subs	r3, r3, r2
 801d8a0:	440b      	add	r3, r1
 801d8a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801d8a4:	69f9      	ldr	r1, [r7, #28]
 801d8a6:	4618      	mov	r0, r3
 801d8a8:	f7fd fa8a 	bl	801adc0 <mem_cpy>
		fp->flag |= FA_DIRTY;
 801d8ac:	68fb      	ldr	r3, [r7, #12]
 801d8ae:	7d1b      	ldrb	r3, [r3, #20]
 801d8b0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 801d8b4:	b2da      	uxtb	r2, r3
 801d8b6:	68fb      	ldr	r3, [r7, #12]
 801d8b8:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 801d8ba:	69fa      	ldr	r2, [r7, #28]
 801d8bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d8be:	4413      	add	r3, r2
 801d8c0:	61fb      	str	r3, [r7, #28]
 801d8c2:	68fb      	ldr	r3, [r7, #12]
 801d8c4:	699a      	ldr	r2, [r3, #24]
 801d8c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d8c8:	441a      	add	r2, r3
 801d8ca:	68fb      	ldr	r3, [r7, #12]
 801d8cc:	619a      	str	r2, [r3, #24]
 801d8ce:	68fb      	ldr	r3, [r7, #12]
 801d8d0:	68da      	ldr	r2, [r3, #12]
 801d8d2:	68fb      	ldr	r3, [r7, #12]
 801d8d4:	699b      	ldr	r3, [r3, #24]
 801d8d6:	429a      	cmp	r2, r3
 801d8d8:	bf38      	it	cc
 801d8da:	461a      	movcc	r2, r3
 801d8dc:	68fb      	ldr	r3, [r7, #12]
 801d8de:	60da      	str	r2, [r3, #12]
 801d8e0:	683b      	ldr	r3, [r7, #0]
 801d8e2:	681a      	ldr	r2, [r3, #0]
 801d8e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d8e6:	441a      	add	r2, r3
 801d8e8:	683b      	ldr	r3, [r7, #0]
 801d8ea:	601a      	str	r2, [r3, #0]
 801d8ec:	687a      	ldr	r2, [r7, #4]
 801d8ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d8f0:	1ad3      	subs	r3, r2, r3
 801d8f2:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 801d8f4:	687b      	ldr	r3, [r7, #4]
 801d8f6:	2b00      	cmp	r3, #0
 801d8f8:	f47f aeb5 	bne.w	801d666 <f_write+0x76>
 801d8fc:	e000      	b.n	801d900 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801d8fe:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 801d900:	68fb      	ldr	r3, [r7, #12]
 801d902:	7d1b      	ldrb	r3, [r3, #20]
 801d904:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801d908:	b2da      	uxtb	r2, r3
 801d90a:	68fb      	ldr	r3, [r7, #12]
 801d90c:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 801d90e:	2300      	movs	r3, #0
}
 801d910:	4618      	mov	r0, r3
 801d912:	3730      	adds	r7, #48	@ 0x30
 801d914:	46bd      	mov	sp, r7
 801d916:	bd80      	pop	{r7, pc}

0801d918 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 801d918:	b580      	push	{r7, lr}
 801d91a:	b086      	sub	sp, #24
 801d91c:	af00      	add	r7, sp, #0
 801d91e:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 801d920:	687b      	ldr	r3, [r7, #4]
 801d922:	f107 0208 	add.w	r2, r7, #8
 801d926:	4611      	mov	r1, r2
 801d928:	4618      	mov	r0, r3
 801d92a:	f7ff fc1d 	bl	801d168 <validate>
 801d92e:	4603      	mov	r3, r0
 801d930:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801d932:	7dfb      	ldrb	r3, [r7, #23]
 801d934:	2b00      	cmp	r3, #0
 801d936:	d168      	bne.n	801da0a <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 801d938:	687b      	ldr	r3, [r7, #4]
 801d93a:	7d1b      	ldrb	r3, [r3, #20]
 801d93c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801d940:	2b00      	cmp	r3, #0
 801d942:	d062      	beq.n	801da0a <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 801d944:	687b      	ldr	r3, [r7, #4]
 801d946:	7d1b      	ldrb	r3, [r3, #20]
 801d948:	b25b      	sxtb	r3, r3
 801d94a:	2b00      	cmp	r3, #0
 801d94c:	da15      	bge.n	801d97a <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 801d94e:	68bb      	ldr	r3, [r7, #8]
 801d950:	7858      	ldrb	r0, [r3, #1]
 801d952:	687b      	ldr	r3, [r7, #4]
 801d954:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801d958:	687b      	ldr	r3, [r7, #4]
 801d95a:	6a1a      	ldr	r2, [r3, #32]
 801d95c:	2301      	movs	r3, #1
 801d95e:	f7fd f96f 	bl	801ac40 <disk_write>
 801d962:	4603      	mov	r3, r0
 801d964:	2b00      	cmp	r3, #0
 801d966:	d001      	beq.n	801d96c <f_sync+0x54>
 801d968:	2301      	movs	r3, #1
 801d96a:	e04f      	b.n	801da0c <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 801d96c:	687b      	ldr	r3, [r7, #4]
 801d96e:	7d1b      	ldrb	r3, [r3, #20]
 801d970:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801d974:	b2da      	uxtb	r2, r3
 801d976:	687b      	ldr	r3, [r7, #4]
 801d978:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 801d97a:	f7fd f8a1 	bl	801aac0 <get_fattime>
 801d97e:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 801d980:	68ba      	ldr	r2, [r7, #8]
 801d982:	687b      	ldr	r3, [r7, #4]
 801d984:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d986:	4619      	mov	r1, r3
 801d988:	4610      	mov	r0, r2
 801d98a:	f7fd fc47 	bl	801b21c <move_window>
 801d98e:	4603      	mov	r3, r0
 801d990:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 801d992:	7dfb      	ldrb	r3, [r7, #23]
 801d994:	2b00      	cmp	r3, #0
 801d996:	d138      	bne.n	801da0a <f_sync+0xf2>
					dir = fp->dir_ptr;
 801d998:	687b      	ldr	r3, [r7, #4]
 801d99a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801d99c:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 801d99e:	68fb      	ldr	r3, [r7, #12]
 801d9a0:	330b      	adds	r3, #11
 801d9a2:	781a      	ldrb	r2, [r3, #0]
 801d9a4:	68fb      	ldr	r3, [r7, #12]
 801d9a6:	330b      	adds	r3, #11
 801d9a8:	f042 0220 	orr.w	r2, r2, #32
 801d9ac:	b2d2      	uxtb	r2, r2
 801d9ae:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 801d9b0:	687b      	ldr	r3, [r7, #4]
 801d9b2:	6818      	ldr	r0, [r3, #0]
 801d9b4:	687b      	ldr	r3, [r7, #4]
 801d9b6:	689b      	ldr	r3, [r3, #8]
 801d9b8:	461a      	mov	r2, r3
 801d9ba:	68f9      	ldr	r1, [r7, #12]
 801d9bc:	f7fe f9d2 	bl	801bd64 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 801d9c0:	68fb      	ldr	r3, [r7, #12]
 801d9c2:	f103 021c 	add.w	r2, r3, #28
 801d9c6:	687b      	ldr	r3, [r7, #4]
 801d9c8:	68db      	ldr	r3, [r3, #12]
 801d9ca:	4619      	mov	r1, r3
 801d9cc:	4610      	mov	r0, r2
 801d9ce:	f7fd f9cb 	bl	801ad68 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 801d9d2:	68fb      	ldr	r3, [r7, #12]
 801d9d4:	3316      	adds	r3, #22
 801d9d6:	6939      	ldr	r1, [r7, #16]
 801d9d8:	4618      	mov	r0, r3
 801d9da:	f7fd f9c5 	bl	801ad68 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 801d9de:	68fb      	ldr	r3, [r7, #12]
 801d9e0:	3312      	adds	r3, #18
 801d9e2:	2100      	movs	r1, #0
 801d9e4:	4618      	mov	r0, r3
 801d9e6:	f7fd f9a4 	bl	801ad32 <st_word>
					fs->wflag = 1;
 801d9ea:	68bb      	ldr	r3, [r7, #8]
 801d9ec:	2201      	movs	r2, #1
 801d9ee:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 801d9f0:	68bb      	ldr	r3, [r7, #8]
 801d9f2:	4618      	mov	r0, r3
 801d9f4:	f7fd fc40 	bl	801b278 <sync_fs>
 801d9f8:	4603      	mov	r3, r0
 801d9fa:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 801d9fc:	687b      	ldr	r3, [r7, #4]
 801d9fe:	7d1b      	ldrb	r3, [r3, #20]
 801da00:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801da04:	b2da      	uxtb	r2, r3
 801da06:	687b      	ldr	r3, [r7, #4]
 801da08:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 801da0a:	7dfb      	ldrb	r3, [r7, #23]
}
 801da0c:	4618      	mov	r0, r3
 801da0e:	3718      	adds	r7, #24
 801da10:	46bd      	mov	sp, r7
 801da12:	bd80      	pop	{r7, pc}

0801da14 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 801da14:	b580      	push	{r7, lr}
 801da16:	b084      	sub	sp, #16
 801da18:	af00      	add	r7, sp, #0
 801da1a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 801da1c:	6878      	ldr	r0, [r7, #4]
 801da1e:	f7ff ff7b 	bl	801d918 <f_sync>
 801da22:	4603      	mov	r3, r0
 801da24:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 801da26:	7bfb      	ldrb	r3, [r7, #15]
 801da28:	2b00      	cmp	r3, #0
 801da2a:	d118      	bne.n	801da5e <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 801da2c:	687b      	ldr	r3, [r7, #4]
 801da2e:	f107 0208 	add.w	r2, r7, #8
 801da32:	4611      	mov	r1, r2
 801da34:	4618      	mov	r0, r3
 801da36:	f7ff fb97 	bl	801d168 <validate>
 801da3a:	4603      	mov	r3, r0
 801da3c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 801da3e:	7bfb      	ldrb	r3, [r7, #15]
 801da40:	2b00      	cmp	r3, #0
 801da42:	d10c      	bne.n	801da5e <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 801da44:	687b      	ldr	r3, [r7, #4]
 801da46:	691b      	ldr	r3, [r3, #16]
 801da48:	4618      	mov	r0, r3
 801da4a:	f7fd fb43 	bl	801b0d4 <dec_lock>
 801da4e:	4603      	mov	r3, r0
 801da50:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 801da52:	7bfb      	ldrb	r3, [r7, #15]
 801da54:	2b00      	cmp	r3, #0
 801da56:	d102      	bne.n	801da5e <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 801da58:	687b      	ldr	r3, [r7, #4]
 801da5a:	2200      	movs	r2, #0
 801da5c:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 801da5e:	7bfb      	ldrb	r3, [r7, #15]
}
 801da60:	4618      	mov	r0, r3
 801da62:	3710      	adds	r7, #16
 801da64:	46bd      	mov	sp, r7
 801da66:	bd80      	pop	{r7, pc}

0801da68 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 801da68:	b580      	push	{r7, lr}
 801da6a:	b0a0      	sub	sp, #128	@ 0x80
 801da6c:	af00      	add	r7, sp, #0
 801da6e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 801da70:	2300      	movs	r3, #0
 801da72:	67bb      	str	r3, [r7, #120]	@ 0x78
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 801da74:	f107 010c 	add.w	r1, r7, #12
 801da78:	1d3b      	adds	r3, r7, #4
 801da7a:	2202      	movs	r2, #2
 801da7c:	4618      	mov	r0, r3
 801da7e:	f7ff f8ed 	bl	801cc5c <find_volume>
 801da82:	4603      	mov	r3, r0
 801da84:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
	dj.obj.fs = fs;
 801da88:	68fb      	ldr	r3, [r7, #12]
 801da8a:	647b      	str	r3, [r7, #68]	@ 0x44
	if (res == FR_OK) {
 801da8c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801da90:	2b00      	cmp	r3, #0
 801da92:	f040 808e 	bne.w	801dbb2 <f_unlink+0x14a>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 801da96:	687a      	ldr	r2, [r7, #4]
 801da98:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 801da9c:	4611      	mov	r1, r2
 801da9e:	4618      	mov	r0, r3
 801daa0:	f7fe ffcc 	bl	801ca3c <follow_path>
 801daa4:	4603      	mov	r3, r0
 801daa6:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 801daaa:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801daae:	2b00      	cmp	r3, #0
 801dab0:	d108      	bne.n	801dac4 <f_unlink+0x5c>
 801dab2:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 801dab6:	2102      	movs	r1, #2
 801dab8:	4618      	mov	r0, r3
 801daba:	f7fd f9ff 	bl	801aebc <chk_lock>
 801dabe:	4603      	mov	r3, r0
 801dac0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
#endif
		if (res == FR_OK) {					/* The object is accessible */
 801dac4:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801dac8:	2b00      	cmp	r3, #0
 801daca:	d172      	bne.n	801dbb2 <f_unlink+0x14a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 801dacc:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 801dad0:	b25b      	sxtb	r3, r3
 801dad2:	2b00      	cmp	r3, #0
 801dad4:	da03      	bge.n	801dade <f_unlink+0x76>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 801dad6:	2306      	movs	r3, #6
 801dad8:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 801dadc:	e008      	b.n	801daf0 <f_unlink+0x88>
			} else {
				if (dj.obj.attr & AM_RDO) {
 801dade:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 801dae2:	f003 0301 	and.w	r3, r3, #1
 801dae6:	2b00      	cmp	r3, #0
 801dae8:	d002      	beq.n	801daf0 <f_unlink+0x88>
					res = FR_DENIED;		/* Cannot remove R/O object */
 801daea:	2307      	movs	r3, #7
 801daec:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
				}
			}
			if (res == FR_OK) {
 801daf0:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801daf4:	2b00      	cmp	r3, #0
 801daf6:	d134      	bne.n	801db62 <f_unlink+0xfa>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 801daf8:	68fb      	ldr	r3, [r7, #12]
 801dafa:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 801dafc:	4611      	mov	r1, r2
 801dafe:	4618      	mov	r0, r3
 801db00:	f7fe f911 	bl	801bd26 <ld_clust>
 801db04:	67b8      	str	r0, [r7, #120]	@ 0x78
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 801db06:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 801db0a:	f003 0310 	and.w	r3, r3, #16
 801db0e:	2b00      	cmp	r3, #0
 801db10:	d027      	beq.n	801db62 <f_unlink+0xfa>
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 801db12:	68fb      	ldr	r3, [r7, #12]
 801db14:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 801db16:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801db18:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 801db1a:	f107 0310 	add.w	r3, r7, #16
 801db1e:	2100      	movs	r1, #0
 801db20:	4618      	mov	r0, r3
 801db22:	f7fd ff5a 	bl	801b9da <dir_sdi>
 801db26:	4603      	mov	r3, r0
 801db28:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
						if (res == FR_OK) {
 801db2c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801db30:	2b00      	cmp	r3, #0
 801db32:	d116      	bne.n	801db62 <f_unlink+0xfa>
							res = dir_read(&sdj, 0);			/* Read an item */
 801db34:	f107 0310 	add.w	r3, r7, #16
 801db38:	2100      	movs	r1, #0
 801db3a:	4618      	mov	r0, r3
 801db3c:	f7fe fb1d 	bl	801c17a <dir_read>
 801db40:	4603      	mov	r3, r0
 801db42:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 801db46:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801db4a:	2b00      	cmp	r3, #0
 801db4c:	d102      	bne.n	801db54 <f_unlink+0xec>
 801db4e:	2307      	movs	r3, #7
 801db50:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 801db54:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801db58:	2b04      	cmp	r3, #4
 801db5a:	d102      	bne.n	801db62 <f_unlink+0xfa>
 801db5c:	2300      	movs	r3, #0
 801db5e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
						}
					}
				}
			}
			if (res == FR_OK) {
 801db62:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801db66:	2b00      	cmp	r3, #0
 801db68:	d123      	bne.n	801dbb2 <f_unlink+0x14a>
				res = dir_remove(&dj);			/* Remove the directory entry */
 801db6a:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 801db6e:	4618      	mov	r0, r3
 801db70:	f7fe fd62 	bl	801c638 <dir_remove>
 801db74:	4603      	mov	r3, r0
 801db76:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 801db7a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801db7e:	2b00      	cmp	r3, #0
 801db80:	d10c      	bne.n	801db9c <f_unlink+0x134>
 801db82:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801db84:	2b00      	cmp	r3, #0
 801db86:	d009      	beq.n	801db9c <f_unlink+0x134>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 801db88:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 801db8c:	2200      	movs	r2, #0
 801db8e:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 801db90:	4618      	mov	r0, r3
 801db92:	f7fd fded 	bl	801b770 <remove_chain>
 801db96:	4603      	mov	r3, r0
 801db98:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 801db9c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801dba0:	2b00      	cmp	r3, #0
 801dba2:	d106      	bne.n	801dbb2 <f_unlink+0x14a>
 801dba4:	68fb      	ldr	r3, [r7, #12]
 801dba6:	4618      	mov	r0, r3
 801dba8:	f7fd fb66 	bl	801b278 <sync_fs>
 801dbac:	4603      	mov	r3, r0
 801dbae:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 801dbb2:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 801dbb6:	4618      	mov	r0, r3
 801dbb8:	3780      	adds	r7, #128	@ 0x80
 801dbba:	46bd      	mov	sp, r7
 801dbbc:	bd80      	pop	{r7, pc}
	...

0801dbc0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 801dbc0:	b480      	push	{r7}
 801dbc2:	b087      	sub	sp, #28
 801dbc4:	af00      	add	r7, sp, #0
 801dbc6:	60f8      	str	r0, [r7, #12]
 801dbc8:	60b9      	str	r1, [r7, #8]
 801dbca:	4613      	mov	r3, r2
 801dbcc:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801dbce:	2301      	movs	r3, #1
 801dbd0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801dbd2:	2300      	movs	r3, #0
 801dbd4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801dbd6:	4b1f      	ldr	r3, [pc, #124]	@ (801dc54 <FATFS_LinkDriverEx+0x94>)
 801dbd8:	7a5b      	ldrb	r3, [r3, #9]
 801dbda:	b2db      	uxtb	r3, r3
 801dbdc:	2b00      	cmp	r3, #0
 801dbde:	d131      	bne.n	801dc44 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 801dbe0:	4b1c      	ldr	r3, [pc, #112]	@ (801dc54 <FATFS_LinkDriverEx+0x94>)
 801dbe2:	7a5b      	ldrb	r3, [r3, #9]
 801dbe4:	b2db      	uxtb	r3, r3
 801dbe6:	461a      	mov	r2, r3
 801dbe8:	4b1a      	ldr	r3, [pc, #104]	@ (801dc54 <FATFS_LinkDriverEx+0x94>)
 801dbea:	2100      	movs	r1, #0
 801dbec:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801dbee:	4b19      	ldr	r3, [pc, #100]	@ (801dc54 <FATFS_LinkDriverEx+0x94>)
 801dbf0:	7a5b      	ldrb	r3, [r3, #9]
 801dbf2:	b2db      	uxtb	r3, r3
 801dbf4:	4a17      	ldr	r2, [pc, #92]	@ (801dc54 <FATFS_LinkDriverEx+0x94>)
 801dbf6:	009b      	lsls	r3, r3, #2
 801dbf8:	4413      	add	r3, r2
 801dbfa:	68fa      	ldr	r2, [r7, #12]
 801dbfc:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801dbfe:	4b15      	ldr	r3, [pc, #84]	@ (801dc54 <FATFS_LinkDriverEx+0x94>)
 801dc00:	7a5b      	ldrb	r3, [r3, #9]
 801dc02:	b2db      	uxtb	r3, r3
 801dc04:	461a      	mov	r2, r3
 801dc06:	4b13      	ldr	r3, [pc, #76]	@ (801dc54 <FATFS_LinkDriverEx+0x94>)
 801dc08:	4413      	add	r3, r2
 801dc0a:	79fa      	ldrb	r2, [r7, #7]
 801dc0c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801dc0e:	4b11      	ldr	r3, [pc, #68]	@ (801dc54 <FATFS_LinkDriverEx+0x94>)
 801dc10:	7a5b      	ldrb	r3, [r3, #9]
 801dc12:	b2db      	uxtb	r3, r3
 801dc14:	1c5a      	adds	r2, r3, #1
 801dc16:	b2d1      	uxtb	r1, r2
 801dc18:	4a0e      	ldr	r2, [pc, #56]	@ (801dc54 <FATFS_LinkDriverEx+0x94>)
 801dc1a:	7251      	strb	r1, [r2, #9]
 801dc1c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801dc1e:	7dbb      	ldrb	r3, [r7, #22]
 801dc20:	3330      	adds	r3, #48	@ 0x30
 801dc22:	b2da      	uxtb	r2, r3
 801dc24:	68bb      	ldr	r3, [r7, #8]
 801dc26:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 801dc28:	68bb      	ldr	r3, [r7, #8]
 801dc2a:	3301      	adds	r3, #1
 801dc2c:	223a      	movs	r2, #58	@ 0x3a
 801dc2e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 801dc30:	68bb      	ldr	r3, [r7, #8]
 801dc32:	3302      	adds	r3, #2
 801dc34:	222f      	movs	r2, #47	@ 0x2f
 801dc36:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 801dc38:	68bb      	ldr	r3, [r7, #8]
 801dc3a:	3303      	adds	r3, #3
 801dc3c:	2200      	movs	r2, #0
 801dc3e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 801dc40:	2300      	movs	r3, #0
 801dc42:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 801dc44:	7dfb      	ldrb	r3, [r7, #23]
}
 801dc46:	4618      	mov	r0, r3
 801dc48:	371c      	adds	r7, #28
 801dc4a:	46bd      	mov	sp, r7
 801dc4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dc50:	4770      	bx	lr
 801dc52:	bf00      	nop
 801dc54:	24000768 	.word	0x24000768

0801dc58 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 801dc58:	b580      	push	{r7, lr}
 801dc5a:	b082      	sub	sp, #8
 801dc5c:	af00      	add	r7, sp, #0
 801dc5e:	6078      	str	r0, [r7, #4]
 801dc60:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801dc62:	2200      	movs	r2, #0
 801dc64:	6839      	ldr	r1, [r7, #0]
 801dc66:	6878      	ldr	r0, [r7, #4]
 801dc68:	f7ff ffaa 	bl	801dbc0 <FATFS_LinkDriverEx>
 801dc6c:	4603      	mov	r3, r0
}
 801dc6e:	4618      	mov	r0, r3
 801dc70:	3708      	adds	r7, #8
 801dc72:	46bd      	mov	sp, r7
 801dc74:	bd80      	pop	{r7, pc}
	...

0801dc78 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 801dc78:	b480      	push	{r7}
 801dc7a:	b085      	sub	sp, #20
 801dc7c:	af00      	add	r7, sp, #0
 801dc7e:	4603      	mov	r3, r0
 801dc80:	6039      	str	r1, [r7, #0]
 801dc82:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 801dc84:	88fb      	ldrh	r3, [r7, #6]
 801dc86:	2b7f      	cmp	r3, #127	@ 0x7f
 801dc88:	d802      	bhi.n	801dc90 <ff_convert+0x18>
		c = chr;
 801dc8a:	88fb      	ldrh	r3, [r7, #6]
 801dc8c:	81fb      	strh	r3, [r7, #14]
 801dc8e:	e025      	b.n	801dcdc <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 801dc90:	683b      	ldr	r3, [r7, #0]
 801dc92:	2b00      	cmp	r3, #0
 801dc94:	d00b      	beq.n	801dcae <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 801dc96:	88fb      	ldrh	r3, [r7, #6]
 801dc98:	2bff      	cmp	r3, #255	@ 0xff
 801dc9a:	d805      	bhi.n	801dca8 <ff_convert+0x30>
 801dc9c:	88fb      	ldrh	r3, [r7, #6]
 801dc9e:	3b80      	subs	r3, #128	@ 0x80
 801dca0:	4a12      	ldr	r2, [pc, #72]	@ (801dcec <ff_convert+0x74>)
 801dca2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801dca6:	e000      	b.n	801dcaa <ff_convert+0x32>
 801dca8:	2300      	movs	r3, #0
 801dcaa:	81fb      	strh	r3, [r7, #14]
 801dcac:	e016      	b.n	801dcdc <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 801dcae:	2300      	movs	r3, #0
 801dcb0:	81fb      	strh	r3, [r7, #14]
 801dcb2:	e009      	b.n	801dcc8 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 801dcb4:	89fb      	ldrh	r3, [r7, #14]
 801dcb6:	4a0d      	ldr	r2, [pc, #52]	@ (801dcec <ff_convert+0x74>)
 801dcb8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801dcbc:	88fa      	ldrh	r2, [r7, #6]
 801dcbe:	429a      	cmp	r2, r3
 801dcc0:	d006      	beq.n	801dcd0 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 801dcc2:	89fb      	ldrh	r3, [r7, #14]
 801dcc4:	3301      	adds	r3, #1
 801dcc6:	81fb      	strh	r3, [r7, #14]
 801dcc8:	89fb      	ldrh	r3, [r7, #14]
 801dcca:	2b7f      	cmp	r3, #127	@ 0x7f
 801dccc:	d9f2      	bls.n	801dcb4 <ff_convert+0x3c>
 801dcce:	e000      	b.n	801dcd2 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 801dcd0:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 801dcd2:	89fb      	ldrh	r3, [r7, #14]
 801dcd4:	3380      	adds	r3, #128	@ 0x80
 801dcd6:	b29b      	uxth	r3, r3
 801dcd8:	b2db      	uxtb	r3, r3
 801dcda:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 801dcdc:	89fb      	ldrh	r3, [r7, #14]
}
 801dcde:	4618      	mov	r0, r3
 801dce0:	3714      	adds	r7, #20
 801dce2:	46bd      	mov	sp, r7
 801dce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dce8:	4770      	bx	lr
 801dcea:	bf00      	nop
 801dcec:	0801e99c 	.word	0x0801e99c

0801dcf0 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 801dcf0:	b480      	push	{r7}
 801dcf2:	b087      	sub	sp, #28
 801dcf4:	af00      	add	r7, sp, #0
 801dcf6:	4603      	mov	r3, r0
 801dcf8:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 801dcfa:	88fb      	ldrh	r3, [r7, #6]
 801dcfc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801dd00:	d201      	bcs.n	801dd06 <ff_wtoupper+0x16>
 801dd02:	4b3e      	ldr	r3, [pc, #248]	@ (801ddfc <ff_wtoupper+0x10c>)
 801dd04:	e000      	b.n	801dd08 <ff_wtoupper+0x18>
 801dd06:	4b3e      	ldr	r3, [pc, #248]	@ (801de00 <ff_wtoupper+0x110>)
 801dd08:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 801dd0a:	697b      	ldr	r3, [r7, #20]
 801dd0c:	1c9a      	adds	r2, r3, #2
 801dd0e:	617a      	str	r2, [r7, #20]
 801dd10:	881b      	ldrh	r3, [r3, #0]
 801dd12:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 801dd14:	8a7b      	ldrh	r3, [r7, #18]
 801dd16:	2b00      	cmp	r3, #0
 801dd18:	d068      	beq.n	801ddec <ff_wtoupper+0xfc>
 801dd1a:	88fa      	ldrh	r2, [r7, #6]
 801dd1c:	8a7b      	ldrh	r3, [r7, #18]
 801dd1e:	429a      	cmp	r2, r3
 801dd20:	d364      	bcc.n	801ddec <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 801dd22:	697b      	ldr	r3, [r7, #20]
 801dd24:	1c9a      	adds	r2, r3, #2
 801dd26:	617a      	str	r2, [r7, #20]
 801dd28:	881b      	ldrh	r3, [r3, #0]
 801dd2a:	823b      	strh	r3, [r7, #16]
 801dd2c:	8a3b      	ldrh	r3, [r7, #16]
 801dd2e:	0a1b      	lsrs	r3, r3, #8
 801dd30:	81fb      	strh	r3, [r7, #14]
 801dd32:	8a3b      	ldrh	r3, [r7, #16]
 801dd34:	b2db      	uxtb	r3, r3
 801dd36:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 801dd38:	88fa      	ldrh	r2, [r7, #6]
 801dd3a:	8a79      	ldrh	r1, [r7, #18]
 801dd3c:	8a3b      	ldrh	r3, [r7, #16]
 801dd3e:	440b      	add	r3, r1
 801dd40:	429a      	cmp	r2, r3
 801dd42:	da49      	bge.n	801ddd8 <ff_wtoupper+0xe8>
			switch (cmd) {
 801dd44:	89fb      	ldrh	r3, [r7, #14]
 801dd46:	2b08      	cmp	r3, #8
 801dd48:	d84f      	bhi.n	801ddea <ff_wtoupper+0xfa>
 801dd4a:	a201      	add	r2, pc, #4	@ (adr r2, 801dd50 <ff_wtoupper+0x60>)
 801dd4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801dd50:	0801dd75 	.word	0x0801dd75
 801dd54:	0801dd87 	.word	0x0801dd87
 801dd58:	0801dd9d 	.word	0x0801dd9d
 801dd5c:	0801dda5 	.word	0x0801dda5
 801dd60:	0801ddad 	.word	0x0801ddad
 801dd64:	0801ddb5 	.word	0x0801ddb5
 801dd68:	0801ddbd 	.word	0x0801ddbd
 801dd6c:	0801ddc5 	.word	0x0801ddc5
 801dd70:	0801ddcd 	.word	0x0801ddcd
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 801dd74:	88fa      	ldrh	r2, [r7, #6]
 801dd76:	8a7b      	ldrh	r3, [r7, #18]
 801dd78:	1ad3      	subs	r3, r2, r3
 801dd7a:	005b      	lsls	r3, r3, #1
 801dd7c:	697a      	ldr	r2, [r7, #20]
 801dd7e:	4413      	add	r3, r2
 801dd80:	881b      	ldrh	r3, [r3, #0]
 801dd82:	80fb      	strh	r3, [r7, #6]
 801dd84:	e027      	b.n	801ddd6 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 801dd86:	88fa      	ldrh	r2, [r7, #6]
 801dd88:	8a7b      	ldrh	r3, [r7, #18]
 801dd8a:	1ad3      	subs	r3, r2, r3
 801dd8c:	b29b      	uxth	r3, r3
 801dd8e:	f003 0301 	and.w	r3, r3, #1
 801dd92:	b29b      	uxth	r3, r3
 801dd94:	88fa      	ldrh	r2, [r7, #6]
 801dd96:	1ad3      	subs	r3, r2, r3
 801dd98:	80fb      	strh	r3, [r7, #6]
 801dd9a:	e01c      	b.n	801ddd6 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 801dd9c:	88fb      	ldrh	r3, [r7, #6]
 801dd9e:	3b10      	subs	r3, #16
 801dda0:	80fb      	strh	r3, [r7, #6]
 801dda2:	e018      	b.n	801ddd6 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 801dda4:	88fb      	ldrh	r3, [r7, #6]
 801dda6:	3b20      	subs	r3, #32
 801dda8:	80fb      	strh	r3, [r7, #6]
 801ddaa:	e014      	b.n	801ddd6 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 801ddac:	88fb      	ldrh	r3, [r7, #6]
 801ddae:	3b30      	subs	r3, #48	@ 0x30
 801ddb0:	80fb      	strh	r3, [r7, #6]
 801ddb2:	e010      	b.n	801ddd6 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 801ddb4:	88fb      	ldrh	r3, [r7, #6]
 801ddb6:	3b1a      	subs	r3, #26
 801ddb8:	80fb      	strh	r3, [r7, #6]
 801ddba:	e00c      	b.n	801ddd6 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 801ddbc:	88fb      	ldrh	r3, [r7, #6]
 801ddbe:	3308      	adds	r3, #8
 801ddc0:	80fb      	strh	r3, [r7, #6]
 801ddc2:	e008      	b.n	801ddd6 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 801ddc4:	88fb      	ldrh	r3, [r7, #6]
 801ddc6:	3b50      	subs	r3, #80	@ 0x50
 801ddc8:	80fb      	strh	r3, [r7, #6]
 801ddca:	e004      	b.n	801ddd6 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 801ddcc:	88fb      	ldrh	r3, [r7, #6]
 801ddce:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 801ddd2:	80fb      	strh	r3, [r7, #6]
 801ddd4:	bf00      	nop
			}
			break;
 801ddd6:	e008      	b.n	801ddea <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 801ddd8:	89fb      	ldrh	r3, [r7, #14]
 801ddda:	2b00      	cmp	r3, #0
 801dddc:	d195      	bne.n	801dd0a <ff_wtoupper+0x1a>
 801ddde:	8a3b      	ldrh	r3, [r7, #16]
 801dde0:	005b      	lsls	r3, r3, #1
 801dde2:	697a      	ldr	r2, [r7, #20]
 801dde4:	4413      	add	r3, r2
 801dde6:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 801dde8:	e78f      	b.n	801dd0a <ff_wtoupper+0x1a>
			break;
 801ddea:	bf00      	nop
	}

	return chr;
 801ddec:	88fb      	ldrh	r3, [r7, #6]
}
 801ddee:	4618      	mov	r0, r3
 801ddf0:	371c      	adds	r7, #28
 801ddf2:	46bd      	mov	sp, r7
 801ddf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ddf8:	4770      	bx	lr
 801ddfa:	bf00      	nop
 801ddfc:	0801ea9c 	.word	0x0801ea9c
 801de00:	0801ec90 	.word	0x0801ec90

0801de04 <memset>:
 801de04:	4402      	add	r2, r0
 801de06:	4603      	mov	r3, r0
 801de08:	4293      	cmp	r3, r2
 801de0a:	d100      	bne.n	801de0e <memset+0xa>
 801de0c:	4770      	bx	lr
 801de0e:	f803 1b01 	strb.w	r1, [r3], #1
 801de12:	e7f9      	b.n	801de08 <memset+0x4>

0801de14 <__errno>:
 801de14:	4b01      	ldr	r3, [pc, #4]	@ (801de1c <__errno+0x8>)
 801de16:	6818      	ldr	r0, [r3, #0]
 801de18:	4770      	bx	lr
 801de1a:	bf00      	nop
 801de1c:	24000028 	.word	0x24000028

0801de20 <__libc_init_array>:
 801de20:	b570      	push	{r4, r5, r6, lr}
 801de22:	4d0d      	ldr	r5, [pc, #52]	@ (801de58 <__libc_init_array+0x38>)
 801de24:	4c0d      	ldr	r4, [pc, #52]	@ (801de5c <__libc_init_array+0x3c>)
 801de26:	1b64      	subs	r4, r4, r5
 801de28:	10a4      	asrs	r4, r4, #2
 801de2a:	2600      	movs	r6, #0
 801de2c:	42a6      	cmp	r6, r4
 801de2e:	d109      	bne.n	801de44 <__libc_init_array+0x24>
 801de30:	4d0b      	ldr	r5, [pc, #44]	@ (801de60 <__libc_init_array+0x40>)
 801de32:	4c0c      	ldr	r4, [pc, #48]	@ (801de64 <__libc_init_array+0x44>)
 801de34:	f000 fd00 	bl	801e838 <_init>
 801de38:	1b64      	subs	r4, r4, r5
 801de3a:	10a4      	asrs	r4, r4, #2
 801de3c:	2600      	movs	r6, #0
 801de3e:	42a6      	cmp	r6, r4
 801de40:	d105      	bne.n	801de4e <__libc_init_array+0x2e>
 801de42:	bd70      	pop	{r4, r5, r6, pc}
 801de44:	f855 3b04 	ldr.w	r3, [r5], #4
 801de48:	4798      	blx	r3
 801de4a:	3601      	adds	r6, #1
 801de4c:	e7ee      	b.n	801de2c <__libc_init_array+0xc>
 801de4e:	f855 3b04 	ldr.w	r3, [r5], #4
 801de52:	4798      	blx	r3
 801de54:	3601      	adds	r6, #1
 801de56:	e7f2      	b.n	801de3e <__libc_init_array+0x1e>
 801de58:	08020680 	.word	0x08020680
 801de5c:	08020680 	.word	0x08020680
 801de60:	08020680 	.word	0x08020680
 801de64:	08020684 	.word	0x08020684

0801de68 <atan2>:
 801de68:	f000 baaa 	b.w	801e3c0 <__ieee754_atan2>
 801de6c:	0000      	movs	r0, r0
	...

0801de70 <sqrt>:
 801de70:	b508      	push	{r3, lr}
 801de72:	ed2d 8b04 	vpush	{d8-d9}
 801de76:	eeb0 8b40 	vmov.f64	d8, d0
 801de7a:	f000 fa9d 	bl	801e3b8 <__ieee754_sqrt>
 801de7e:	eeb4 8b48 	vcmp.f64	d8, d8
 801de82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801de86:	d60c      	bvs.n	801dea2 <sqrt+0x32>
 801de88:	ed9f 9b07 	vldr	d9, [pc, #28]	@ 801dea8 <sqrt+0x38>
 801de8c:	eeb4 8bc9 	vcmpe.f64	d8, d9
 801de90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801de94:	d505      	bpl.n	801dea2 <sqrt+0x32>
 801de96:	f7ff ffbd 	bl	801de14 <__errno>
 801de9a:	ee89 0b09 	vdiv.f64	d0, d9, d9
 801de9e:	2321      	movs	r3, #33	@ 0x21
 801dea0:	6003      	str	r3, [r0, #0]
 801dea2:	ecbd 8b04 	vpop	{d8-d9}
 801dea6:	bd08      	pop	{r3, pc}
	...

0801deb0 <checkint>:
 801deb0:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801deb4:	f240 33fe 	movw	r3, #1022	@ 0x3fe
 801deb8:	429a      	cmp	r2, r3
 801deba:	b570      	push	{r4, r5, r6, lr}
 801debc:	dd2a      	ble.n	801df14 <checkint+0x64>
 801debe:	f240 4333 	movw	r3, #1075	@ 0x433
 801dec2:	429a      	cmp	r2, r3
 801dec4:	dc24      	bgt.n	801df10 <checkint+0x60>
 801dec6:	1a9b      	subs	r3, r3, r2
 801dec8:	f1a3 0620 	sub.w	r6, r3, #32
 801decc:	f04f 32ff 	mov.w	r2, #4294967295
 801ded0:	fa02 f403 	lsl.w	r4, r2, r3
 801ded4:	fa02 f606 	lsl.w	r6, r2, r6
 801ded8:	f1c3 0520 	rsb	r5, r3, #32
 801dedc:	fa22 f505 	lsr.w	r5, r2, r5
 801dee0:	4334      	orrs	r4, r6
 801dee2:	432c      	orrs	r4, r5
 801dee4:	409a      	lsls	r2, r3
 801dee6:	ea20 0202 	bic.w	r2, r0, r2
 801deea:	ea21 0404 	bic.w	r4, r1, r4
 801deee:	4322      	orrs	r2, r4
 801def0:	f1a3 0420 	sub.w	r4, r3, #32
 801def4:	f1c3 0220 	rsb	r2, r3, #32
 801def8:	d10c      	bne.n	801df14 <checkint+0x64>
 801defa:	40d8      	lsrs	r0, r3
 801defc:	fa01 f302 	lsl.w	r3, r1, r2
 801df00:	4318      	orrs	r0, r3
 801df02:	40e1      	lsrs	r1, r4
 801df04:	4308      	orrs	r0, r1
 801df06:	f000 0001 	and.w	r0, r0, #1
 801df0a:	f1d0 0002 	rsbs	r0, r0, #2
 801df0e:	bd70      	pop	{r4, r5, r6, pc}
 801df10:	2002      	movs	r0, #2
 801df12:	e7fc      	b.n	801df0e <checkint+0x5e>
 801df14:	2000      	movs	r0, #0
 801df16:	e7fa      	b.n	801df0e <checkint+0x5e>

0801df18 <pow>:
 801df18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801df1c:	ee10 4a90 	vmov	r4, s1
 801df20:	ed2d 8b0a 	vpush	{d8-d12}
 801df24:	ea4f 5814 	mov.w	r8, r4, lsr #20
 801df28:	ee11 aa90 	vmov	sl, s3
 801df2c:	f108 32ff 	add.w	r2, r8, #4294967295
 801df30:	f240 73fd 	movw	r3, #2045	@ 0x7fd
 801df34:	429a      	cmp	r2, r3
 801df36:	ee10 5a10 	vmov	r5, s0
 801df3a:	ee11 0a10 	vmov	r0, s2
 801df3e:	b087      	sub	sp, #28
 801df40:	46c4      	mov	ip, r8
 801df42:	ea4f 561a 	mov.w	r6, sl, lsr #20
 801df46:	d806      	bhi.n	801df56 <pow+0x3e>
 801df48:	f3c6 030a 	ubfx	r3, r6, #0, #11
 801df4c:	f2a3 33be 	subw	r3, r3, #958	@ 0x3be
 801df50:	2b7f      	cmp	r3, #127	@ 0x7f
 801df52:	f240 8157 	bls.w	801e204 <pow+0x2ec>
 801df56:	1802      	adds	r2, r0, r0
 801df58:	eb4a 010a 	adc.w	r1, sl, sl
 801df5c:	f06f 0b01 	mvn.w	fp, #1
 801df60:	1e57      	subs	r7, r2, #1
 801df62:	f141 33ff 	adc.w	r3, r1, #4294967295
 801df66:	f46f 1e00 	mvn.w	lr, #2097152	@ 0x200000
 801df6a:	45bb      	cmp	fp, r7
 801df6c:	eb7e 0303 	sbcs.w	r3, lr, r3
 801df70:	d242      	bcs.n	801dff8 <pow+0xe0>
 801df72:	ea52 0301 	orrs.w	r3, r2, r1
 801df76:	f04f 0300 	mov.w	r3, #0
 801df7a:	d10c      	bne.n	801df96 <pow+0x7e>
 801df7c:	196d      	adds	r5, r5, r5
 801df7e:	f484 2400 	eor.w	r4, r4, #524288	@ 0x80000
 801df82:	4164      	adcs	r4, r4
 801df84:	42ab      	cmp	r3, r5
 801df86:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 801df8a:	41a3      	sbcs	r3, r4
 801df8c:	f0c0 808f 	bcc.w	801e0ae <pow+0x196>
 801df90:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 801df94:	e02b      	b.n	801dfee <pow+0xd6>
 801df96:	4ed4      	ldr	r6, [pc, #848]	@ (801e2e8 <pow+0x3d0>)
 801df98:	42b4      	cmp	r4, r6
 801df9a:	bf08      	it	eq
 801df9c:	429d      	cmpeq	r5, r3
 801df9e:	d109      	bne.n	801dfb4 <pow+0x9c>
 801dfa0:	1800      	adds	r0, r0, r0
 801dfa2:	f48a 2a00 	eor.w	sl, sl, #524288	@ 0x80000
 801dfa6:	eb4a 0a0a 	adc.w	sl, sl, sl
 801dfaa:	4283      	cmp	r3, r0
 801dfac:	4bcf      	ldr	r3, [pc, #828]	@ (801e2ec <pow+0x3d4>)
 801dfae:	eb73 030a 	sbcs.w	r3, r3, sl
 801dfb2:	e7eb      	b.n	801df8c <pow+0x74>
 801dfb4:	196d      	adds	r5, r5, r5
 801dfb6:	48ce      	ldr	r0, [pc, #824]	@ (801e2f0 <pow+0x3d8>)
 801dfb8:	4164      	adcs	r4, r4
 801dfba:	42ab      	cmp	r3, r5
 801dfbc:	eb70 0604 	sbcs.w	r6, r0, r4
 801dfc0:	d375      	bcc.n	801e0ae <pow+0x196>
 801dfc2:	4281      	cmp	r1, r0
 801dfc4:	bf08      	it	eq
 801dfc6:	429a      	cmpeq	r2, r3
 801dfc8:	d171      	bne.n	801e0ae <pow+0x196>
 801dfca:	4aca      	ldr	r2, [pc, #808]	@ (801e2f4 <pow+0x3dc>)
 801dfcc:	4294      	cmp	r4, r2
 801dfce:	bf08      	it	eq
 801dfd0:	429d      	cmpeq	r5, r3
 801dfd2:	d0dd      	beq.n	801df90 <pow+0x78>
 801dfd4:	4294      	cmp	r4, r2
 801dfd6:	ea6f 0a0a 	mvn.w	sl, sl
 801dfda:	bf34      	ite	cc
 801dfdc:	2400      	movcc	r4, #0
 801dfde:	2401      	movcs	r4, #1
 801dfe0:	ea4f 7ada 	mov.w	sl, sl, lsr #31
 801dfe4:	4554      	cmp	r4, sl
 801dfe6:	f040 81dc 	bne.w	801e3a2 <pow+0x48a>
 801dfea:	ee21 0b01 	vmul.f64	d0, d1, d1
 801dfee:	b007      	add	sp, #28
 801dff0:	ecbd 8b0a 	vpop	{d8-d12}
 801dff4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dff8:	196f      	adds	r7, r5, r5
 801dffa:	eb44 0904 	adc.w	r9, r4, r4
 801dffe:	1e7a      	subs	r2, r7, #1
 801e000:	f169 0300 	sbc.w	r3, r9, #0
 801e004:	4593      	cmp	fp, r2
 801e006:	eb7e 0303 	sbcs.w	r3, lr, r3
 801e00a:	d225      	bcs.n	801e058 <pow+0x140>
 801e00c:	ee20 0b00 	vmul.f64	d0, d0, d0
 801e010:	2c00      	cmp	r4, #0
 801e012:	da13      	bge.n	801e03c <pow+0x124>
 801e014:	4651      	mov	r1, sl
 801e016:	f7ff ff4b 	bl	801deb0 <checkint>
 801e01a:	2801      	cmp	r0, #1
 801e01c:	d10e      	bne.n	801e03c <pow+0x124>
 801e01e:	eeb1 0b40 	vneg.f64	d0, d0
 801e022:	ea57 0909 	orrs.w	r9, r7, r9
 801e026:	d10b      	bne.n	801e040 <pow+0x128>
 801e028:	f1ba 0f00 	cmp.w	sl, #0
 801e02c:	dadf      	bge.n	801dfee <pow+0xd6>
 801e02e:	b007      	add	sp, #28
 801e030:	ecbd 8b0a 	vpop	{d8-d12}
 801e034:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e038:	f000 bbba 	b.w	801e7b0 <__math_divzero>
 801e03c:	2000      	movs	r0, #0
 801e03e:	e7f0      	b.n	801e022 <pow+0x10a>
 801e040:	f1ba 0f00 	cmp.w	sl, #0
 801e044:	dad3      	bge.n	801dfee <pow+0xd6>
 801e046:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 801e04a:	ee86 7b00 	vdiv.f64	d7, d6, d0
 801e04e:	ed8d 7b00 	vstr	d7, [sp]
 801e052:	ed9d 0b00 	vldr	d0, [sp]
 801e056:	e7ca      	b.n	801dfee <pow+0xd6>
 801e058:	2c00      	cmp	r4, #0
 801e05a:	da2b      	bge.n	801e0b4 <pow+0x19c>
 801e05c:	4651      	mov	r1, sl
 801e05e:	f7ff ff27 	bl	801deb0 <checkint>
 801e062:	b930      	cbnz	r0, 801e072 <pow+0x15a>
 801e064:	b007      	add	sp, #28
 801e066:	ecbd 8b0a 	vpop	{d8-d12}
 801e06a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e06e:	f000 bbb7 	b.w	801e7e0 <__math_invalid>
 801e072:	1e41      	subs	r1, r0, #1
 801e074:	4248      	negs	r0, r1
 801e076:	4148      	adcs	r0, r1
 801e078:	0480      	lsls	r0, r0, #18
 801e07a:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 801e07e:	f3c8 0c0a 	ubfx	ip, r8, #0, #11
 801e082:	f3c6 020a 	ubfx	r2, r6, #0, #11
 801e086:	f2a2 33be 	subw	r3, r2, #958	@ 0x3be
 801e08a:	2b7f      	cmp	r3, #127	@ 0x7f
 801e08c:	d92d      	bls.n	801e0ea <pow+0x1d2>
 801e08e:	4b96      	ldr	r3, [pc, #600]	@ (801e2e8 <pow+0x3d0>)
 801e090:	2000      	movs	r0, #0
 801e092:	429c      	cmp	r4, r3
 801e094:	bf08      	it	eq
 801e096:	4285      	cmpeq	r5, r0
 801e098:	f43f af7a 	beq.w	801df90 <pow+0x78>
 801e09c:	f240 31bd 	movw	r1, #957	@ 0x3bd
 801e0a0:	428a      	cmp	r2, r1
 801e0a2:	d80c      	bhi.n	801e0be <pow+0x1a6>
 801e0a4:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 801e0a8:	42a8      	cmp	r0, r5
 801e0aa:	41a3      	sbcs	r3, r4
 801e0ac:	d204      	bcs.n	801e0b8 <pow+0x1a0>
 801e0ae:	ee31 0b00 	vadd.f64	d0, d1, d0
 801e0b2:	e79c      	b.n	801dfee <pow+0xd6>
 801e0b4:	2000      	movs	r0, #0
 801e0b6:	e7e4      	b.n	801e082 <pow+0x16a>
 801e0b8:	ee30 0b41 	vsub.f64	d0, d0, d1
 801e0bc:	e797      	b.n	801dfee <pow+0xd6>
 801e0be:	2d01      	cmp	r5, #1
 801e0c0:	eb74 0303 	sbcs.w	r3, r4, r3
 801e0c4:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 801e0c8:	bf34      	ite	cc
 801e0ca:	2301      	movcc	r3, #1
 801e0cc:	2300      	movcs	r3, #0
 801e0ce:	4296      	cmp	r6, r2
 801e0d0:	bf8c      	ite	hi
 801e0d2:	2600      	movhi	r6, #0
 801e0d4:	2601      	movls	r6, #1
 801e0d6:	42b3      	cmp	r3, r6
 801e0d8:	f000 809c 	beq.w	801e214 <pow+0x2fc>
 801e0dc:	b007      	add	sp, #28
 801e0de:	ecbd 8b0a 	vpop	{d8-d12}
 801e0e2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e0e6:	f000 bb5b 	b.w	801e7a0 <__math_oflow>
 801e0ea:	f1bc 0f00 	cmp.w	ip, #0
 801e0ee:	d10a      	bne.n	801e106 <pow+0x1ee>
 801e0f0:	ed9f 7b79 	vldr	d7, [pc, #484]	@ 801e2d8 <pow+0x3c0>
 801e0f4:	ee20 7b07 	vmul.f64	d7, d0, d7
 801e0f8:	ec53 2b17 	vmov	r2, r3, d7
 801e0fc:	f023 4400 	bic.w	r4, r3, #2147483648	@ 0x80000000
 801e100:	4615      	mov	r5, r2
 801e102:	f1a4 7450 	sub.w	r4, r4, #54525952	@ 0x3400000
 801e106:	4a7c      	ldr	r2, [pc, #496]	@ (801e2f8 <pow+0x3e0>)
 801e108:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 801e10c:	4422      	add	r2, r4
 801e10e:	1513      	asrs	r3, r2, #20
 801e110:	f3c2 3146 	ubfx	r1, r2, #13, #7
 801e114:	ee03 3a10 	vmov	s6, r3
 801e118:	0d12      	lsrs	r2, r2, #20
 801e11a:	4b78      	ldr	r3, [pc, #480]	@ (801e2fc <pow+0x3e4>)
 801e11c:	0512      	lsls	r2, r2, #20
 801e11e:	eb03 1641 	add.w	r6, r3, r1, lsl #5
 801e122:	1aa7      	subs	r7, r4, r2
 801e124:	eb03 1241 	add.w	r2, r3, r1, lsl #5
 801e128:	ed92 5b12 	vldr	d5, [r2, #72]	@ 0x48
 801e12c:	ed96 7b18 	vldr	d7, [r6, #96]	@ 0x60
 801e130:	1e2e      	subs	r6, r5, #0
 801e132:	ec47 6b14 	vmov	d4, r6, r7
 801e136:	ed92 2b16 	vldr	d2, [r2, #88]	@ 0x58
 801e13a:	eea4 6b05 	vfma.f64	d6, d4, d5
 801e13e:	ed93 5b00 	vldr	d5, [r3]
 801e142:	eeb8 3bc3 	vcvt.f64.s32	d3, s6
 801e146:	eea3 2b05 	vfma.f64	d2, d3, d5
 801e14a:	ed93 5b02 	vldr	d5, [r3, #8]
 801e14e:	ee36 4b02 	vadd.f64	d4, d6, d2
 801e152:	ee32 2b44 	vsub.f64	d2, d2, d4
 801e156:	eea3 7b05 	vfma.f64	d7, d3, d5
 801e15a:	ed93 5b04 	vldr	d5, [r3, #16]
 801e15e:	ee32 2b06 	vadd.f64	d2, d2, d6
 801e162:	ee37 7b02 	vadd.f64	d7, d7, d2
 801e166:	ee26 5b05 	vmul.f64	d5, d6, d5
 801e16a:	ee26 0b05 	vmul.f64	d0, d6, d5
 801e16e:	ee34 8b00 	vadd.f64	d8, d4, d0
 801e172:	eeb0 9b40 	vmov.f64	d9, d0
 801e176:	ee34 4b48 	vsub.f64	d4, d4, d8
 801e17a:	ee96 9b05 	vfnms.f64	d9, d6, d5
 801e17e:	ee34 ab00 	vadd.f64	d10, d4, d0
 801e182:	ed93 5b06 	vldr	d5, [r3, #24]
 801e186:	ee26 bb00 	vmul.f64	d11, d6, d0
 801e18a:	ee37 7b09 	vadd.f64	d7, d7, d9
 801e18e:	ed93 4b08 	vldr	d4, [r3, #32]
 801e192:	ee37 7b0a 	vadd.f64	d7, d7, d10
 801e196:	ed93 3b0c 	vldr	d3, [r3, #48]	@ 0x30
 801e19a:	eea6 5b04 	vfma.f64	d5, d6, d4
 801e19e:	ed93 4b0a 	vldr	d4, [r3, #40]	@ 0x28
 801e1a2:	ed93 cb10 	vldr	d12, [r3, #64]	@ 0x40
 801e1a6:	eea6 4b03 	vfma.f64	d4, d6, d3
 801e1aa:	ed93 3b0e 	vldr	d3, [r3, #56]	@ 0x38
 801e1ae:	eea6 3b0c 	vfma.f64	d3, d6, d12
 801e1b2:	eea0 4b03 	vfma.f64	d4, d0, d3
 801e1b6:	eea0 5b04 	vfma.f64	d5, d0, d4
 801e1ba:	eeab 7b05 	vfma.f64	d7, d11, d5
 801e1be:	ee38 4b07 	vadd.f64	d4, d8, d7
 801e1c2:	ee21 6b04 	vmul.f64	d6, d1, d4
 801e1c6:	ee16 3a90 	vmov	r3, s13
 801e1ca:	eeb0 5b46 	vmov.f64	d5, d6
 801e1ce:	f3c3 560a 	ubfx	r6, r3, #20, #11
 801e1d2:	f46f 7272 	mvn.w	r2, #968	@ 0x3c8
 801e1d6:	18b2      	adds	r2, r6, r2
 801e1d8:	2a3e      	cmp	r2, #62	@ 0x3e
 801e1da:	ee91 5b04 	vfnms.f64	d5, d1, d4
 801e1de:	ee38 8b44 	vsub.f64	d8, d8, d4
 801e1e2:	ee38 8b07 	vadd.f64	d8, d8, d7
 801e1e6:	eea1 5b08 	vfma.f64	d5, d1, d8
 801e1ea:	d91b      	bls.n	801e224 <pow+0x30c>
 801e1ec:	2a00      	cmp	r2, #0
 801e1ee:	da0b      	bge.n	801e208 <pow+0x2f0>
 801e1f0:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 801e1f4:	ee36 0b00 	vadd.f64	d0, d6, d0
 801e1f8:	2800      	cmp	r0, #0
 801e1fa:	f43f aef8 	beq.w	801dfee <pow+0xd6>
 801e1fe:	eeb1 0b40 	vneg.f64	d0, d0
 801e202:	e6f4      	b.n	801dfee <pow+0xd6>
 801e204:	2000      	movs	r0, #0
 801e206:	e77e      	b.n	801e106 <pow+0x1ee>
 801e208:	f5b6 6f81 	cmp.w	r6, #1032	@ 0x408
 801e20c:	d909      	bls.n	801e222 <pow+0x30a>
 801e20e:	2b00      	cmp	r3, #0
 801e210:	f6bf af64 	bge.w	801e0dc <pow+0x1c4>
 801e214:	b007      	add	sp, #28
 801e216:	ecbd 8b0a 	vpop	{d8-d12}
 801e21a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e21e:	f000 bab7 	b.w	801e790 <__math_uflow>
 801e222:	2600      	movs	r6, #0
 801e224:	4936      	ldr	r1, [pc, #216]	@ (801e300 <pow+0x3e8>)
 801e226:	ed91 4b02 	vldr	d4, [r1, #8]
 801e22a:	ed91 3b00 	vldr	d3, [r1]
 801e22e:	eeb0 7b44 	vmov.f64	d7, d4
 801e232:	eea6 7b03 	vfma.f64	d7, d6, d3
 801e236:	ee17 5a10 	vmov	r5, s14
 801e23a:	ee37 7b44 	vsub.f64	d7, d7, d4
 801e23e:	ed91 4b04 	vldr	d4, [r1, #16]
 801e242:	f005 037f 	and.w	r3, r5, #127	@ 0x7f
 801e246:	eea7 6b04 	vfma.f64	d6, d7, d4
 801e24a:	ed91 4b06 	vldr	d4, [r1, #24]
 801e24e:	18dc      	adds	r4, r3, r3
 801e250:	f104 030f 	add.w	r3, r4, #15
 801e254:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 801e258:	eea7 6b04 	vfma.f64	d6, d7, d4
 801e25c:	ed91 3b0a 	vldr	d3, [r1, #40]	@ 0x28
 801e260:	ee35 5b06 	vadd.f64	d5, d5, d6
 801e264:	ee25 6b05 	vmul.f64	d6, d5, d5
 801e268:	ed94 7b1c 	vldr	d7, [r4, #112]	@ 0x70
 801e26c:	ed91 4b08 	vldr	d4, [r1, #32]
 801e270:	ee35 7b07 	vadd.f64	d7, d5, d7
 801e274:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 801e278:	eea5 4b03 	vfma.f64	d4, d5, d3
 801e27c:	ed91 3b0e 	vldr	d3, [r1, #56]	@ 0x38
 801e280:	eea6 7b04 	vfma.f64	d7, d6, d4
 801e284:	ee26 6b06 	vmul.f64	d6, d6, d6
 801e288:	ed91 4b0c 	vldr	d4, [r1, #48]	@ 0x30
 801e28c:	f851 c033 	ldr.w	ip, [r1, r3, lsl #3]
 801e290:	f8d2 e004 	ldr.w	lr, [r2, #4]
 801e294:	eea5 4b03 	vfma.f64	d4, d5, d3
 801e298:	1940      	adds	r0, r0, r5
 801e29a:	2700      	movs	r7, #0
 801e29c:	eb17 020c 	adds.w	r2, r7, ip
 801e2a0:	eb0e 3340 	add.w	r3, lr, r0, lsl #13
 801e2a4:	eea6 7b04 	vfma.f64	d7, d6, d4
 801e2a8:	2e00      	cmp	r6, #0
 801e2aa:	d175      	bne.n	801e398 <pow+0x480>
 801e2ac:	42bd      	cmp	r5, r7
 801e2ae:	db29      	blt.n	801e304 <pow+0x3ec>
 801e2b0:	f103 4140 	add.w	r1, r3, #3221225472	@ 0xc0000000
 801e2b4:	f501 0170 	add.w	r1, r1, #15728640	@ 0xf00000
 801e2b8:	4610      	mov	r0, r2
 801e2ba:	ec41 0b10 	vmov	d0, r0, r1
 801e2be:	eea7 0b00 	vfma.f64	d0, d7, d0
 801e2c2:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 801e2e0 <pow+0x3c8>
 801e2c6:	ee20 0b07 	vmul.f64	d0, d0, d7
 801e2ca:	b007      	add	sp, #28
 801e2cc:	ecbd 8b0a 	vpop	{d8-d12}
 801e2d0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e2d4:	f000 ba9c 	b.w	801e810 <__math_check_oflow>
 801e2d8:	00000000 	.word	0x00000000
 801e2dc:	43300000 	.word	0x43300000
 801e2e0:	00000000 	.word	0x00000000
 801e2e4:	7f000000 	.word	0x7f000000
 801e2e8:	3ff00000 	.word	0x3ff00000
 801e2ec:	fff00000 	.word	0xfff00000
 801e2f0:	ffe00000 	.word	0xffe00000
 801e2f4:	7fe00000 	.word	0x7fe00000
 801e2f8:	c0196aab 	.word	0xc0196aab
 801e2fc:	0801ed50 	.word	0x0801ed50
 801e300:	0801fe08 	.word	0x0801fe08
 801e304:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 801e308:	f501 1100 	add.w	r1, r1, #2097152	@ 0x200000
 801e30c:	4610      	mov	r0, r2
 801e30e:	ec41 0b15 	vmov	d5, r0, r1
 801e312:	eeb7 3b00 	vmov.f64	d3, #112	@ 0x3f800000  1.0
 801e316:	ee27 6b05 	vmul.f64	d6, d7, d5
 801e31a:	ee35 7b06 	vadd.f64	d7, d5, d6
 801e31e:	eeb0 4bc7 	vabs.f64	d4, d7
 801e322:	eeb4 4bc3 	vcmpe.f64	d4, d3
 801e326:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e32a:	ed9f 0b1f 	vldr	d0, [pc, #124]	@ 801e3a8 <pow+0x490>
 801e32e:	d52a      	bpl.n	801e386 <pow+0x46e>
 801e330:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801e334:	ee35 5b47 	vsub.f64	d5, d5, d7
 801e338:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e33c:	ee35 5b06 	vadd.f64	d5, d5, d6
 801e340:	eebf 4b00 	vmov.f64	d4, #240	@ 0xbf800000 -1.0
 801e344:	bf58      	it	pl
 801e346:	eeb0 4b43 	vmovpl.f64	d4, d3
 801e34a:	ee37 3b04 	vadd.f64	d3, d7, d4
 801e34e:	ee34 6b43 	vsub.f64	d6, d4, d3
 801e352:	ee36 6b07 	vadd.f64	d6, d6, d7
 801e356:	ee36 6b05 	vadd.f64	d6, d6, d5
 801e35a:	ee36 6b03 	vadd.f64	d6, d6, d3
 801e35e:	ee36 7b44 	vsub.f64	d7, d6, d4
 801e362:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801e366:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e36a:	d104      	bne.n	801e376 <pow+0x45e>
 801e36c:	4632      	mov	r2, r6
 801e36e:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 801e372:	ec43 2b17 	vmov	d7, r2, r3
 801e376:	ed8d 0b02 	vstr	d0, [sp, #8]
 801e37a:	ed9d 6b02 	vldr	d6, [sp, #8]
 801e37e:	ee26 6b00 	vmul.f64	d6, d6, d0
 801e382:	ed8d 6b04 	vstr	d6, [sp, #16]
 801e386:	ee27 0b00 	vmul.f64	d0, d7, d0
 801e38a:	b007      	add	sp, #28
 801e38c:	ecbd 8b0a 	vpop	{d8-d12}
 801e390:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e394:	f000 ba33 	b.w	801e7fe <__math_check_uflow>
 801e398:	ec43 2b10 	vmov	d0, r2, r3
 801e39c:	eea7 0b00 	vfma.f64	d0, d7, d0
 801e3a0:	e625      	b.n	801dfee <pow+0xd6>
 801e3a2:	ed9f 0b03 	vldr	d0, [pc, #12]	@ 801e3b0 <pow+0x498>
 801e3a6:	e622      	b.n	801dfee <pow+0xd6>
 801e3a8:	00000000 	.word	0x00000000
 801e3ac:	00100000 	.word	0x00100000
	...

0801e3b8 <__ieee754_sqrt>:
 801e3b8:	eeb1 0bc0 	vsqrt.f64	d0, d0
 801e3bc:	4770      	bx	lr
	...

0801e3c0 <__ieee754_atan2>:
 801e3c0:	ee11 1a10 	vmov	r1, s2
 801e3c4:	eeb0 7b40 	vmov.f64	d7, d0
 801e3c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e3ca:	ee11 5a90 	vmov	r5, s3
 801e3ce:	424b      	negs	r3, r1
 801e3d0:	4f59      	ldr	r7, [pc, #356]	@ (801e538 <__ieee754_atan2+0x178>)
 801e3d2:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 801e3d6:	430b      	orrs	r3, r1
 801e3d8:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 801e3dc:	42bb      	cmp	r3, r7
 801e3de:	d80d      	bhi.n	801e3fc <__ieee754_atan2+0x3c>
 801e3e0:	ee10 ca10 	vmov	ip, s0
 801e3e4:	ee17 6a90 	vmov	r6, s15
 801e3e8:	f1cc 0000 	rsb	r0, ip, #0
 801e3ec:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 801e3f0:	ea40 000c 	orr.w	r0, r0, ip
 801e3f4:	ea43 70d0 	orr.w	r0, r3, r0, lsr #31
 801e3f8:	42b8      	cmp	r0, r7
 801e3fa:	d904      	bls.n	801e406 <__ieee754_atan2+0x46>
 801e3fc:	ee37 7b01 	vadd.f64	d7, d7, d1
 801e400:	eeb0 0b47 	vmov.f64	d0, d7
 801e404:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e406:	f105 4040 	add.w	r0, r5, #3221225472	@ 0xc0000000
 801e40a:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 801e40e:	4308      	orrs	r0, r1
 801e410:	d103      	bne.n	801e41a <__ieee754_atan2+0x5a>
 801e412:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801e416:	f000 b897 	b.w	801e548 <atan>
 801e41a:	17ac      	asrs	r4, r5, #30
 801e41c:	f004 0402 	and.w	r4, r4, #2
 801e420:	ea53 0c0c 	orrs.w	ip, r3, ip
 801e424:	ea44 74d6 	orr.w	r4, r4, r6, lsr #31
 801e428:	d107      	bne.n	801e43a <__ieee754_atan2+0x7a>
 801e42a:	2c02      	cmp	r4, #2
 801e42c:	d05c      	beq.n	801e4e8 <__ieee754_atan2+0x128>
 801e42e:	ed9f 6b34 	vldr	d6, [pc, #208]	@ 801e500 <__ieee754_atan2+0x140>
 801e432:	2c03      	cmp	r4, #3
 801e434:	fe06 7b00 	vseleq.f64	d7, d6, d0
 801e438:	e7e2      	b.n	801e400 <__ieee754_atan2+0x40>
 801e43a:	4311      	orrs	r1, r2
 801e43c:	d107      	bne.n	801e44e <__ieee754_atan2+0x8e>
 801e43e:	ed9f 7b32 	vldr	d7, [pc, #200]	@ 801e508 <__ieee754_atan2+0x148>
 801e442:	ed9f 6b33 	vldr	d6, [pc, #204]	@ 801e510 <__ieee754_atan2+0x150>
 801e446:	2e00      	cmp	r6, #0
 801e448:	fe27 7b06 	vselge.f64	d7, d7, d6
 801e44c:	e7d8      	b.n	801e400 <__ieee754_atan2+0x40>
 801e44e:	42ba      	cmp	r2, r7
 801e450:	d10f      	bne.n	801e472 <__ieee754_atan2+0xb2>
 801e452:	4293      	cmp	r3, r2
 801e454:	f104 34ff 	add.w	r4, r4, #4294967295
 801e458:	d107      	bne.n	801e46a <__ieee754_atan2+0xaa>
 801e45a:	2c02      	cmp	r4, #2
 801e45c:	d847      	bhi.n	801e4ee <__ieee754_atan2+0x12e>
 801e45e:	4b37      	ldr	r3, [pc, #220]	@ (801e53c <__ieee754_atan2+0x17c>)
 801e460:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801e464:	ed93 7b00 	vldr	d7, [r3]
 801e468:	e7ca      	b.n	801e400 <__ieee754_atan2+0x40>
 801e46a:	2c02      	cmp	r4, #2
 801e46c:	d842      	bhi.n	801e4f4 <__ieee754_atan2+0x134>
 801e46e:	4b34      	ldr	r3, [pc, #208]	@ (801e540 <__ieee754_atan2+0x180>)
 801e470:	e7f6      	b.n	801e460 <__ieee754_atan2+0xa0>
 801e472:	42bb      	cmp	r3, r7
 801e474:	d0e3      	beq.n	801e43e <__ieee754_atan2+0x7e>
 801e476:	1a9b      	subs	r3, r3, r2
 801e478:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 801e47c:	ea4f 5223 	mov.w	r2, r3, asr #20
 801e480:	da1a      	bge.n	801e4b8 <__ieee754_atan2+0xf8>
 801e482:	2d00      	cmp	r5, #0
 801e484:	da01      	bge.n	801e48a <__ieee754_atan2+0xca>
 801e486:	323c      	adds	r2, #60	@ 0x3c
 801e488:	db19      	blt.n	801e4be <__ieee754_atan2+0xfe>
 801e48a:	ee87 0b01 	vdiv.f64	d0, d7, d1
 801e48e:	f000 f955 	bl	801e73c <fabs>
 801e492:	f000 f859 	bl	801e548 <atan>
 801e496:	eeb0 7b40 	vmov.f64	d7, d0
 801e49a:	2c01      	cmp	r4, #1
 801e49c:	d012      	beq.n	801e4c4 <__ieee754_atan2+0x104>
 801e49e:	2c02      	cmp	r4, #2
 801e4a0:	d019      	beq.n	801e4d6 <__ieee754_atan2+0x116>
 801e4a2:	2c00      	cmp	r4, #0
 801e4a4:	d0ac      	beq.n	801e400 <__ieee754_atan2+0x40>
 801e4a6:	ed9f 6b1c 	vldr	d6, [pc, #112]	@ 801e518 <__ieee754_atan2+0x158>
 801e4aa:	ee37 7b46 	vsub.f64	d7, d7, d6
 801e4ae:	ed9f 6b1c 	vldr	d6, [pc, #112]	@ 801e520 <__ieee754_atan2+0x160>
 801e4b2:	ee37 7b46 	vsub.f64	d7, d7, d6
 801e4b6:	e7a3      	b.n	801e400 <__ieee754_atan2+0x40>
 801e4b8:	ed9f 7b13 	vldr	d7, [pc, #76]	@ 801e508 <__ieee754_atan2+0x148>
 801e4bc:	e7ed      	b.n	801e49a <__ieee754_atan2+0xda>
 801e4be:	ed9f 7b1a 	vldr	d7, [pc, #104]	@ 801e528 <__ieee754_atan2+0x168>
 801e4c2:	e7ea      	b.n	801e49a <__ieee754_atan2+0xda>
 801e4c4:	ee17 1a90 	vmov	r1, s15
 801e4c8:	ec53 2b17 	vmov	r2, r3, d7
 801e4cc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801e4d0:	ec43 2b17 	vmov	d7, r2, r3
 801e4d4:	e794      	b.n	801e400 <__ieee754_atan2+0x40>
 801e4d6:	ed9f 6b10 	vldr	d6, [pc, #64]	@ 801e518 <__ieee754_atan2+0x158>
 801e4da:	ee37 7b46 	vsub.f64	d7, d7, d6
 801e4de:	ed9f 6b10 	vldr	d6, [pc, #64]	@ 801e520 <__ieee754_atan2+0x160>
 801e4e2:	ee36 7b47 	vsub.f64	d7, d6, d7
 801e4e6:	e78b      	b.n	801e400 <__ieee754_atan2+0x40>
 801e4e8:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 801e520 <__ieee754_atan2+0x160>
 801e4ec:	e788      	b.n	801e400 <__ieee754_atan2+0x40>
 801e4ee:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 801e530 <__ieee754_atan2+0x170>
 801e4f2:	e785      	b.n	801e400 <__ieee754_atan2+0x40>
 801e4f4:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 801e528 <__ieee754_atan2+0x168>
 801e4f8:	e782      	b.n	801e400 <__ieee754_atan2+0x40>
 801e4fa:	bf00      	nop
 801e4fc:	f3af 8000 	nop.w
 801e500:	54442d18 	.word	0x54442d18
 801e504:	c00921fb 	.word	0xc00921fb
 801e508:	54442d18 	.word	0x54442d18
 801e50c:	3ff921fb 	.word	0x3ff921fb
 801e510:	54442d18 	.word	0x54442d18
 801e514:	bff921fb 	.word	0xbff921fb
 801e518:	33145c07 	.word	0x33145c07
 801e51c:	3ca1a626 	.word	0x3ca1a626
 801e520:	54442d18 	.word	0x54442d18
 801e524:	400921fb 	.word	0x400921fb
	...
 801e530:	54442d18 	.word	0x54442d18
 801e534:	3fe921fb 	.word	0x3fe921fb
 801e538:	7ff00000 	.word	0x7ff00000
 801e53c:	0801fdb0 	.word	0x0801fdb0
 801e540:	0801fd98 	.word	0x0801fd98
 801e544:	00000000 	.word	0x00000000

0801e548 <atan>:
 801e548:	b538      	push	{r3, r4, r5, lr}
 801e54a:	eeb0 7b40 	vmov.f64	d7, d0
 801e54e:	ee17 5a90 	vmov	r5, s15
 801e552:	4b73      	ldr	r3, [pc, #460]	@ (801e720 <atan+0x1d8>)
 801e554:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 801e558:	429c      	cmp	r4, r3
 801e55a:	d913      	bls.n	801e584 <atan+0x3c>
 801e55c:	4b71      	ldr	r3, [pc, #452]	@ (801e724 <atan+0x1dc>)
 801e55e:	429c      	cmp	r4, r3
 801e560:	d803      	bhi.n	801e56a <atan+0x22>
 801e562:	d107      	bne.n	801e574 <atan+0x2c>
 801e564:	ee10 3a10 	vmov	r3, s0
 801e568:	b123      	cbz	r3, 801e574 <atan+0x2c>
 801e56a:	ee37 7b07 	vadd.f64	d7, d7, d7
 801e56e:	eeb0 0b47 	vmov.f64	d0, d7
 801e572:	bd38      	pop	{r3, r4, r5, pc}
 801e574:	ed9f 7b4e 	vldr	d7, [pc, #312]	@ 801e6b0 <atan+0x168>
 801e578:	ed9f 6b4f 	vldr	d6, [pc, #316]	@ 801e6b8 <atan+0x170>
 801e57c:	2d00      	cmp	r5, #0
 801e57e:	fe36 7b07 	vselgt.f64	d7, d6, d7
 801e582:	e7f4      	b.n	801e56e <atan+0x26>
 801e584:	4b68      	ldr	r3, [pc, #416]	@ (801e728 <atan+0x1e0>)
 801e586:	429c      	cmp	r4, r3
 801e588:	d811      	bhi.n	801e5ae <atan+0x66>
 801e58a:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 801e58e:	429c      	cmp	r4, r3
 801e590:	d80a      	bhi.n	801e5a8 <atan+0x60>
 801e592:	eeb7 5b00 	vmov.f64	d5, #112	@ 0x3f800000  1.0
 801e596:	ed9f 6b4a 	vldr	d6, [pc, #296]	@ 801e6c0 <atan+0x178>
 801e59a:	ee30 6b06 	vadd.f64	d6, d0, d6
 801e59e:	eeb4 6bc5 	vcmpe.f64	d6, d5
 801e5a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e5a6:	dce2      	bgt.n	801e56e <atan+0x26>
 801e5a8:	f04f 33ff 	mov.w	r3, #4294967295
 801e5ac:	e013      	b.n	801e5d6 <atan+0x8e>
 801e5ae:	f000 f8c5 	bl	801e73c <fabs>
 801e5b2:	4b5e      	ldr	r3, [pc, #376]	@ (801e72c <atan+0x1e4>)
 801e5b4:	429c      	cmp	r4, r3
 801e5b6:	d84f      	bhi.n	801e658 <atan+0x110>
 801e5b8:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 801e5bc:	429c      	cmp	r4, r3
 801e5be:	d841      	bhi.n	801e644 <atan+0xfc>
 801e5c0:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 801e5c4:	eebf 5b00 	vmov.f64	d5, #240	@ 0xbf800000 -1.0
 801e5c8:	2300      	movs	r3, #0
 801e5ca:	eea0 5b07 	vfma.f64	d5, d0, d7
 801e5ce:	ee30 0b07 	vadd.f64	d0, d0, d7
 801e5d2:	ee85 7b00 	vdiv.f64	d7, d5, d0
 801e5d6:	ed9f 6b3c 	vldr	d6, [pc, #240]	@ 801e6c8 <atan+0x180>
 801e5da:	ee27 4b07 	vmul.f64	d4, d7, d7
 801e5de:	ee24 5b04 	vmul.f64	d5, d4, d4
 801e5e2:	ed9f 3b3b 	vldr	d3, [pc, #236]	@ 801e6d0 <atan+0x188>
 801e5e6:	eea5 3b06 	vfma.f64	d3, d5, d6
 801e5ea:	ed9f 6b3b 	vldr	d6, [pc, #236]	@ 801e6d8 <atan+0x190>
 801e5ee:	eea3 6b05 	vfma.f64	d6, d3, d5
 801e5f2:	ed9f 3b3b 	vldr	d3, [pc, #236]	@ 801e6e0 <atan+0x198>
 801e5f6:	eea6 3b05 	vfma.f64	d3, d6, d5
 801e5fa:	ed9f 6b3b 	vldr	d6, [pc, #236]	@ 801e6e8 <atan+0x1a0>
 801e5fe:	eea3 6b05 	vfma.f64	d6, d3, d5
 801e602:	ed9f 3b3b 	vldr	d3, [pc, #236]	@ 801e6f0 <atan+0x1a8>
 801e606:	ed9f 2b3c 	vldr	d2, [pc, #240]	@ 801e6f8 <atan+0x1b0>
 801e60a:	eea6 3b05 	vfma.f64	d3, d6, d5
 801e60e:	ed9f 6b3c 	vldr	d6, [pc, #240]	@ 801e700 <atan+0x1b8>
 801e612:	eea5 2b06 	vfma.f64	d2, d5, d6
 801e616:	ed9f 6b3c 	vldr	d6, [pc, #240]	@ 801e708 <atan+0x1c0>
 801e61a:	eea2 6b05 	vfma.f64	d6, d2, d5
 801e61e:	ed9f 2b3c 	vldr	d2, [pc, #240]	@ 801e710 <atan+0x1c8>
 801e622:	eea6 2b05 	vfma.f64	d2, d6, d5
 801e626:	ed9f 6b3c 	vldr	d6, [pc, #240]	@ 801e718 <atan+0x1d0>
 801e62a:	1c5a      	adds	r2, r3, #1
 801e62c:	eea2 6b05 	vfma.f64	d6, d2, d5
 801e630:	ee26 6b05 	vmul.f64	d6, d6, d5
 801e634:	eea3 6b04 	vfma.f64	d6, d3, d4
 801e638:	ee27 6b06 	vmul.f64	d6, d7, d6
 801e63c:	d121      	bne.n	801e682 <atan+0x13a>
 801e63e:	ee37 7b46 	vsub.f64	d7, d7, d6
 801e642:	e794      	b.n	801e56e <atan+0x26>
 801e644:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
 801e648:	2301      	movs	r3, #1
 801e64a:	ee30 5b47 	vsub.f64	d5, d0, d7
 801e64e:	ee30 0b07 	vadd.f64	d0, d0, d7
 801e652:	ee85 7b00 	vdiv.f64	d7, d5, d0
 801e656:	e7be      	b.n	801e5d6 <atan+0x8e>
 801e658:	4b35      	ldr	r3, [pc, #212]	@ (801e730 <atan+0x1e8>)
 801e65a:	429c      	cmp	r4, r3
 801e65c:	d20b      	bcs.n	801e676 <atan+0x12e>
 801e65e:	eeb7 7b08 	vmov.f64	d7, #120	@ 0x3fc00000  1.5
 801e662:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 801e666:	ee30 5b47 	vsub.f64	d5, d0, d7
 801e66a:	eea0 6b07 	vfma.f64	d6, d0, d7
 801e66e:	2302      	movs	r3, #2
 801e670:	ee85 7b06 	vdiv.f64	d7, d5, d6
 801e674:	e7af      	b.n	801e5d6 <atan+0x8e>
 801e676:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 801e67a:	2303      	movs	r3, #3
 801e67c:	ee86 7b00 	vdiv.f64	d7, d6, d0
 801e680:	e7a9      	b.n	801e5d6 <atan+0x8e>
 801e682:	4a2c      	ldr	r2, [pc, #176]	@ (801e734 <atan+0x1ec>)
 801e684:	492c      	ldr	r1, [pc, #176]	@ (801e738 <atan+0x1f0>)
 801e686:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 801e68a:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 801e68e:	ed93 5b00 	vldr	d5, [r3]
 801e692:	ee36 6b45 	vsub.f64	d6, d6, d5
 801e696:	ee36 6b47 	vsub.f64	d6, d6, d7
 801e69a:	ed92 7b00 	vldr	d7, [r2]
 801e69e:	2d00      	cmp	r5, #0
 801e6a0:	ee37 7b46 	vsub.f64	d7, d7, d6
 801e6a4:	bfb8      	it	lt
 801e6a6:	eeb1 7b47 	vneglt.f64	d7, d7
 801e6aa:	e760      	b.n	801e56e <atan+0x26>
 801e6ac:	f3af 8000 	nop.w
 801e6b0:	54442d18 	.word	0x54442d18
 801e6b4:	bff921fb 	.word	0xbff921fb
 801e6b8:	54442d18 	.word	0x54442d18
 801e6bc:	3ff921fb 	.word	0x3ff921fb
 801e6c0:	8800759c 	.word	0x8800759c
 801e6c4:	7e37e43c 	.word	0x7e37e43c
 801e6c8:	e322da11 	.word	0xe322da11
 801e6cc:	3f90ad3a 	.word	0x3f90ad3a
 801e6d0:	24760deb 	.word	0x24760deb
 801e6d4:	3fa97b4b 	.word	0x3fa97b4b
 801e6d8:	a0d03d51 	.word	0xa0d03d51
 801e6dc:	3fb10d66 	.word	0x3fb10d66
 801e6e0:	c54c206e 	.word	0xc54c206e
 801e6e4:	3fb745cd 	.word	0x3fb745cd
 801e6e8:	920083ff 	.word	0x920083ff
 801e6ec:	3fc24924 	.word	0x3fc24924
 801e6f0:	5555550d 	.word	0x5555550d
 801e6f4:	3fd55555 	.word	0x3fd55555
 801e6f8:	52defd9a 	.word	0x52defd9a
 801e6fc:	bfadde2d 	.word	0xbfadde2d
 801e700:	2c6a6c2f 	.word	0x2c6a6c2f
 801e704:	bfa2b444 	.word	0xbfa2b444
 801e708:	af749a6d 	.word	0xaf749a6d
 801e70c:	bfb3b0f2 	.word	0xbfb3b0f2
 801e710:	fe231671 	.word	0xfe231671
 801e714:	bfbc71c6 	.word	0xbfbc71c6
 801e718:	9998ebc4 	.word	0x9998ebc4
 801e71c:	bfc99999 	.word	0xbfc99999
 801e720:	440fffff 	.word	0x440fffff
 801e724:	7ff00000 	.word	0x7ff00000
 801e728:	3fdbffff 	.word	0x3fdbffff
 801e72c:	3ff2ffff 	.word	0x3ff2ffff
 801e730:	40038000 	.word	0x40038000
 801e734:	0801fde8 	.word	0x0801fde8
 801e738:	0801fdc8 	.word	0x0801fdc8

0801e73c <fabs>:
 801e73c:	ec51 0b10 	vmov	r0, r1, d0
 801e740:	4602      	mov	r2, r0
 801e742:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801e746:	ec43 2b10 	vmov	d0, r2, r3
 801e74a:	4770      	bx	lr

0801e74c <with_errno>:
 801e74c:	b510      	push	{r4, lr}
 801e74e:	ed2d 8b02 	vpush	{d8}
 801e752:	eeb0 8b40 	vmov.f64	d8, d0
 801e756:	4604      	mov	r4, r0
 801e758:	f7ff fb5c 	bl	801de14 <__errno>
 801e75c:	eeb0 0b48 	vmov.f64	d0, d8
 801e760:	ecbd 8b02 	vpop	{d8}
 801e764:	6004      	str	r4, [r0, #0]
 801e766:	bd10      	pop	{r4, pc}

0801e768 <xflow>:
 801e768:	b082      	sub	sp, #8
 801e76a:	b158      	cbz	r0, 801e784 <xflow+0x1c>
 801e76c:	eeb1 7b40 	vneg.f64	d7, d0
 801e770:	ed8d 7b00 	vstr	d7, [sp]
 801e774:	ed9d 7b00 	vldr	d7, [sp]
 801e778:	2022      	movs	r0, #34	@ 0x22
 801e77a:	ee20 0b07 	vmul.f64	d0, d0, d7
 801e77e:	b002      	add	sp, #8
 801e780:	f7ff bfe4 	b.w	801e74c <with_errno>
 801e784:	eeb0 7b40 	vmov.f64	d7, d0
 801e788:	e7f2      	b.n	801e770 <xflow+0x8>
 801e78a:	0000      	movs	r0, r0
 801e78c:	0000      	movs	r0, r0
	...

0801e790 <__math_uflow>:
 801e790:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 801e798 <__math_uflow+0x8>
 801e794:	f7ff bfe8 	b.w	801e768 <xflow>
 801e798:	00000000 	.word	0x00000000
 801e79c:	10000000 	.word	0x10000000

0801e7a0 <__math_oflow>:
 801e7a0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 801e7a8 <__math_oflow+0x8>
 801e7a4:	f7ff bfe0 	b.w	801e768 <xflow>
 801e7a8:	00000000 	.word	0x00000000
 801e7ac:	70000000 	.word	0x70000000

0801e7b0 <__math_divzero>:
 801e7b0:	b082      	sub	sp, #8
 801e7b2:	2800      	cmp	r0, #0
 801e7b4:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 801e7b8:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
 801e7bc:	fe07 7b06 	vseleq.f64	d7, d7, d6
 801e7c0:	ed8d 7b00 	vstr	d7, [sp]
 801e7c4:	ed9d 0b00 	vldr	d0, [sp]
 801e7c8:	ed9f 7b03 	vldr	d7, [pc, #12]	@ 801e7d8 <__math_divzero+0x28>
 801e7cc:	2022      	movs	r0, #34	@ 0x22
 801e7ce:	ee80 0b07 	vdiv.f64	d0, d0, d7
 801e7d2:	b002      	add	sp, #8
 801e7d4:	f7ff bfba 	b.w	801e74c <with_errno>
	...

0801e7e0 <__math_invalid>:
 801e7e0:	eeb0 7b40 	vmov.f64	d7, d0
 801e7e4:	eeb4 7b47 	vcmp.f64	d7, d7
 801e7e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e7ec:	ee30 6b40 	vsub.f64	d6, d0, d0
 801e7f0:	ee86 0b06 	vdiv.f64	d0, d6, d6
 801e7f4:	d602      	bvs.n	801e7fc <__math_invalid+0x1c>
 801e7f6:	2021      	movs	r0, #33	@ 0x21
 801e7f8:	f7ff bfa8 	b.w	801e74c <with_errno>
 801e7fc:	4770      	bx	lr

0801e7fe <__math_check_uflow>:
 801e7fe:	eeb5 0b40 	vcmp.f64	d0, #0.0
 801e802:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e806:	d102      	bne.n	801e80e <__math_check_uflow+0x10>
 801e808:	2022      	movs	r0, #34	@ 0x22
 801e80a:	f7ff bf9f 	b.w	801e74c <with_errno>
 801e80e:	4770      	bx	lr

0801e810 <__math_check_oflow>:
 801e810:	ed9f 6b07 	vldr	d6, [pc, #28]	@ 801e830 <__math_check_oflow+0x20>
 801e814:	eeb0 7bc0 	vabs.f64	d7, d0
 801e818:	eeb4 7b46 	vcmp.f64	d7, d6
 801e81c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e820:	dd02      	ble.n	801e828 <__math_check_oflow+0x18>
 801e822:	2022      	movs	r0, #34	@ 0x22
 801e824:	f7ff bf92 	b.w	801e74c <with_errno>
 801e828:	4770      	bx	lr
 801e82a:	bf00      	nop
 801e82c:	f3af 8000 	nop.w
 801e830:	ffffffff 	.word	0xffffffff
 801e834:	7fefffff 	.word	0x7fefffff

0801e838 <_init>:
 801e838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e83a:	bf00      	nop
 801e83c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801e83e:	bc08      	pop	{r3}
 801e840:	469e      	mov	lr, r3
 801e842:	4770      	bx	lr

0801e844 <_fini>:
 801e844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e846:	bf00      	nop
 801e848:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801e84a:	bc08      	pop	{r3}
 801e84c:	469e      	mov	lr, r3
 801e84e:	4770      	bx	lr
