
DRON 2.2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00006000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001e700  080002d0  080002d0  000062d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001df8  0801e9d0  0801e9d0  000249d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080207c8  080207c8  000267c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080207d0  080207d0  000267d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080207d4  080207d4  000267d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000007c  24000000  080207d8  00027000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000834  2400007c  08020854  0002707c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  240008b0  08020854  000278b0  2**0
                  ALLOC
  9 .IRAM         00004206  00000000  00000000  00001000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 10 .DRAM         00000000  20000000  20000000  00049710  2**0
                  CONTENTS
 11 .RAM1         00021860  24000eb0  24000eb0  00027eb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .ARM.attributes 0000002e  00000000  00000000  00049710  2**0
                  CONTENTS, READONLY
 13 .debug_info   00031f1e  00000000  00000000  0004973e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005ef7  00000000  00000000  0007b65c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002460  00000000  00000000  00081558  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001c2e  00000000  00000000  000839b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0003c9b4  00000000  00000000  000855e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003880a  00000000  00000000  000c1f9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0016e1d0  00000000  00000000  000fa7a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00268974  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00009f44  00000000  00000000  002689b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004d  00000000  00000000  002728fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	2400007c 	.word	0x2400007c
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0801e9b8 	.word	0x0801e9b8

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000080 	.word	0x24000080
 800030c:	0801e9b8 	.word	0x0801e9b8

08000310 <__aeabi_ldivmod>:
 8000310:	b97b      	cbnz	r3, 8000332 <__aeabi_ldivmod+0x22>
 8000312:	b972      	cbnz	r2, 8000332 <__aeabi_ldivmod+0x22>
 8000314:	2900      	cmp	r1, #0
 8000316:	bfbe      	ittt	lt
 8000318:	2000      	movlt	r0, #0
 800031a:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 800031e:	e006      	blt.n	800032e <__aeabi_ldivmod+0x1e>
 8000320:	bf08      	it	eq
 8000322:	2800      	cmpeq	r0, #0
 8000324:	bf1c      	itt	ne
 8000326:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 800032a:	f04f 30ff 	movne.w	r0, #4294967295
 800032e:	f000 b9b5 	b.w	800069c <__aeabi_idiv0>
 8000332:	f1ad 0c08 	sub.w	ip, sp, #8
 8000336:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800033a:	2900      	cmp	r1, #0
 800033c:	db09      	blt.n	8000352 <__aeabi_ldivmod+0x42>
 800033e:	2b00      	cmp	r3, #0
 8000340:	db1a      	blt.n	8000378 <__aeabi_ldivmod+0x68>
 8000342:	f000 f84d 	bl	80003e0 <__udivmoddi4>
 8000346:	f8dd e004 	ldr.w	lr, [sp, #4]
 800034a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034e:	b004      	add	sp, #16
 8000350:	4770      	bx	lr
 8000352:	4240      	negs	r0, r0
 8000354:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000358:	2b00      	cmp	r3, #0
 800035a:	db1b      	blt.n	8000394 <__aeabi_ldivmod+0x84>
 800035c:	f000 f840 	bl	80003e0 <__udivmoddi4>
 8000360:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000364:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000368:	b004      	add	sp, #16
 800036a:	4240      	negs	r0, r0
 800036c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000370:	4252      	negs	r2, r2
 8000372:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000376:	4770      	bx	lr
 8000378:	4252      	negs	r2, r2
 800037a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800037e:	f000 f82f 	bl	80003e0 <__udivmoddi4>
 8000382:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000386:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800038a:	b004      	add	sp, #16
 800038c:	4240      	negs	r0, r0
 800038e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000392:	4770      	bx	lr
 8000394:	4252      	negs	r2, r2
 8000396:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800039a:	f000 f821 	bl	80003e0 <__udivmoddi4>
 800039e:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003a6:	b004      	add	sp, #16
 80003a8:	4252      	negs	r2, r2
 80003aa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003ae:	4770      	bx	lr

080003b0 <__aeabi_uldivmod>:
 80003b0:	b953      	cbnz	r3, 80003c8 <__aeabi_uldivmod+0x18>
 80003b2:	b94a      	cbnz	r2, 80003c8 <__aeabi_uldivmod+0x18>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bf08      	it	eq
 80003b8:	2800      	cmpeq	r0, #0
 80003ba:	bf1c      	itt	ne
 80003bc:	f04f 31ff 	movne.w	r1, #4294967295
 80003c0:	f04f 30ff 	movne.w	r0, #4294967295
 80003c4:	f000 b96a 	b.w	800069c <__aeabi_idiv0>
 80003c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003d0:	f000 f806 	bl	80003e0 <__udivmoddi4>
 80003d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003dc:	b004      	add	sp, #16
 80003de:	4770      	bx	lr

080003e0 <__udivmoddi4>:
 80003e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003e4:	9d08      	ldr	r5, [sp, #32]
 80003e6:	460c      	mov	r4, r1
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d14e      	bne.n	800048a <__udivmoddi4+0xaa>
 80003ec:	4694      	mov	ip, r2
 80003ee:	458c      	cmp	ip, r1
 80003f0:	4686      	mov	lr, r0
 80003f2:	fab2 f282 	clz	r2, r2
 80003f6:	d962      	bls.n	80004be <__udivmoddi4+0xde>
 80003f8:	b14a      	cbz	r2, 800040e <__udivmoddi4+0x2e>
 80003fa:	f1c2 0320 	rsb	r3, r2, #32
 80003fe:	4091      	lsls	r1, r2
 8000400:	fa20 f303 	lsr.w	r3, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	4319      	orrs	r1, r3
 800040a:	fa00 fe02 	lsl.w	lr, r0, r2
 800040e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000412:	fa1f f68c 	uxth.w	r6, ip
 8000416:	fbb1 f4f7 	udiv	r4, r1, r7
 800041a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041e:	fb07 1114 	mls	r1, r7, r4, r1
 8000422:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000426:	fb04 f106 	mul.w	r1, r4, r6
 800042a:	4299      	cmp	r1, r3
 800042c:	d90a      	bls.n	8000444 <__udivmoddi4+0x64>
 800042e:	eb1c 0303 	adds.w	r3, ip, r3
 8000432:	f104 30ff 	add.w	r0, r4, #4294967295
 8000436:	f080 8112 	bcs.w	800065e <__udivmoddi4+0x27e>
 800043a:	4299      	cmp	r1, r3
 800043c:	f240 810f 	bls.w	800065e <__udivmoddi4+0x27e>
 8000440:	3c02      	subs	r4, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a59      	subs	r1, r3, r1
 8000446:	fa1f f38e 	uxth.w	r3, lr
 800044a:	fbb1 f0f7 	udiv	r0, r1, r7
 800044e:	fb07 1110 	mls	r1, r7, r0, r1
 8000452:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000456:	fb00 f606 	mul.w	r6, r0, r6
 800045a:	429e      	cmp	r6, r3
 800045c:	d90a      	bls.n	8000474 <__udivmoddi4+0x94>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 31ff 	add.w	r1, r0, #4294967295
 8000466:	f080 80fc 	bcs.w	8000662 <__udivmoddi4+0x282>
 800046a:	429e      	cmp	r6, r3
 800046c:	f240 80f9 	bls.w	8000662 <__udivmoddi4+0x282>
 8000470:	4463      	add	r3, ip
 8000472:	3802      	subs	r0, #2
 8000474:	1b9b      	subs	r3, r3, r6
 8000476:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800047a:	2100      	movs	r1, #0
 800047c:	b11d      	cbz	r5, 8000486 <__udivmoddi4+0xa6>
 800047e:	40d3      	lsrs	r3, r2
 8000480:	2200      	movs	r2, #0
 8000482:	e9c5 3200 	strd	r3, r2, [r5]
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	428b      	cmp	r3, r1
 800048c:	d905      	bls.n	800049a <__udivmoddi4+0xba>
 800048e:	b10d      	cbz	r5, 8000494 <__udivmoddi4+0xb4>
 8000490:	e9c5 0100 	strd	r0, r1, [r5]
 8000494:	2100      	movs	r1, #0
 8000496:	4608      	mov	r0, r1
 8000498:	e7f5      	b.n	8000486 <__udivmoddi4+0xa6>
 800049a:	fab3 f183 	clz	r1, r3
 800049e:	2900      	cmp	r1, #0
 80004a0:	d146      	bne.n	8000530 <__udivmoddi4+0x150>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d302      	bcc.n	80004ac <__udivmoddi4+0xcc>
 80004a6:	4290      	cmp	r0, r2
 80004a8:	f0c0 80f0 	bcc.w	800068c <__udivmoddi4+0x2ac>
 80004ac:	1a86      	subs	r6, r0, r2
 80004ae:	eb64 0303 	sbc.w	r3, r4, r3
 80004b2:	2001      	movs	r0, #1
 80004b4:	2d00      	cmp	r5, #0
 80004b6:	d0e6      	beq.n	8000486 <__udivmoddi4+0xa6>
 80004b8:	e9c5 6300 	strd	r6, r3, [r5]
 80004bc:	e7e3      	b.n	8000486 <__udivmoddi4+0xa6>
 80004be:	2a00      	cmp	r2, #0
 80004c0:	f040 8090 	bne.w	80005e4 <__udivmoddi4+0x204>
 80004c4:	eba1 040c 	sub.w	r4, r1, ip
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa1f f78c 	uxth.w	r7, ip
 80004d0:	2101      	movs	r1, #1
 80004d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004da:	fb08 4416 	mls	r4, r8, r6, r4
 80004de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004e2:	fb07 f006 	mul.w	r0, r7, r6
 80004e6:	4298      	cmp	r0, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x11c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80004f2:	d202      	bcs.n	80004fa <__udivmoddi4+0x11a>
 80004f4:	4298      	cmp	r0, r3
 80004f6:	f200 80cd 	bhi.w	8000694 <__udivmoddi4+0x2b4>
 80004fa:	4626      	mov	r6, r4
 80004fc:	1a1c      	subs	r4, r3, r0
 80004fe:	fa1f f38e 	uxth.w	r3, lr
 8000502:	fbb4 f0f8 	udiv	r0, r4, r8
 8000506:	fb08 4410 	mls	r4, r8, r0, r4
 800050a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800050e:	fb00 f707 	mul.w	r7, r0, r7
 8000512:	429f      	cmp	r7, r3
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x148>
 8000516:	eb1c 0303 	adds.w	r3, ip, r3
 800051a:	f100 34ff 	add.w	r4, r0, #4294967295
 800051e:	d202      	bcs.n	8000526 <__udivmoddi4+0x146>
 8000520:	429f      	cmp	r7, r3
 8000522:	f200 80b0 	bhi.w	8000686 <__udivmoddi4+0x2a6>
 8000526:	4620      	mov	r0, r4
 8000528:	1bdb      	subs	r3, r3, r7
 800052a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800052e:	e7a5      	b.n	800047c <__udivmoddi4+0x9c>
 8000530:	f1c1 0620 	rsb	r6, r1, #32
 8000534:	408b      	lsls	r3, r1
 8000536:	fa22 f706 	lsr.w	r7, r2, r6
 800053a:	431f      	orrs	r7, r3
 800053c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000540:	fa04 f301 	lsl.w	r3, r4, r1
 8000544:	ea43 030c 	orr.w	r3, r3, ip
 8000548:	40f4      	lsrs	r4, r6
 800054a:	fa00 f801 	lsl.w	r8, r0, r1
 800054e:	0c38      	lsrs	r0, r7, #16
 8000550:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000554:	fbb4 fef0 	udiv	lr, r4, r0
 8000558:	fa1f fc87 	uxth.w	ip, r7
 800055c:	fb00 441e 	mls	r4, r0, lr, r4
 8000560:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000564:	fb0e f90c 	mul.w	r9, lr, ip
 8000568:	45a1      	cmp	r9, r4
 800056a:	fa02 f201 	lsl.w	r2, r2, r1
 800056e:	d90a      	bls.n	8000586 <__udivmoddi4+0x1a6>
 8000570:	193c      	adds	r4, r7, r4
 8000572:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000576:	f080 8084 	bcs.w	8000682 <__udivmoddi4+0x2a2>
 800057a:	45a1      	cmp	r9, r4
 800057c:	f240 8081 	bls.w	8000682 <__udivmoddi4+0x2a2>
 8000580:	f1ae 0e02 	sub.w	lr, lr, #2
 8000584:	443c      	add	r4, r7
 8000586:	eba4 0409 	sub.w	r4, r4, r9
 800058a:	fa1f f983 	uxth.w	r9, r3
 800058e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000592:	fb00 4413 	mls	r4, r0, r3, r4
 8000596:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800059a:	fb03 fc0c 	mul.w	ip, r3, ip
 800059e:	45a4      	cmp	ip, r4
 80005a0:	d907      	bls.n	80005b2 <__udivmoddi4+0x1d2>
 80005a2:	193c      	adds	r4, r7, r4
 80005a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80005a8:	d267      	bcs.n	800067a <__udivmoddi4+0x29a>
 80005aa:	45a4      	cmp	ip, r4
 80005ac:	d965      	bls.n	800067a <__udivmoddi4+0x29a>
 80005ae:	3b02      	subs	r3, #2
 80005b0:	443c      	add	r4, r7
 80005b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80005b6:	fba0 9302 	umull	r9, r3, r0, r2
 80005ba:	eba4 040c 	sub.w	r4, r4, ip
 80005be:	429c      	cmp	r4, r3
 80005c0:	46ce      	mov	lr, r9
 80005c2:	469c      	mov	ip, r3
 80005c4:	d351      	bcc.n	800066a <__udivmoddi4+0x28a>
 80005c6:	d04e      	beq.n	8000666 <__udivmoddi4+0x286>
 80005c8:	b155      	cbz	r5, 80005e0 <__udivmoddi4+0x200>
 80005ca:	ebb8 030e 	subs.w	r3, r8, lr
 80005ce:	eb64 040c 	sbc.w	r4, r4, ip
 80005d2:	fa04 f606 	lsl.w	r6, r4, r6
 80005d6:	40cb      	lsrs	r3, r1
 80005d8:	431e      	orrs	r6, r3
 80005da:	40cc      	lsrs	r4, r1
 80005dc:	e9c5 6400 	strd	r6, r4, [r5]
 80005e0:	2100      	movs	r1, #0
 80005e2:	e750      	b.n	8000486 <__udivmoddi4+0xa6>
 80005e4:	f1c2 0320 	rsb	r3, r2, #32
 80005e8:	fa20 f103 	lsr.w	r1, r0, r3
 80005ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80005f0:	fa24 f303 	lsr.w	r3, r4, r3
 80005f4:	4094      	lsls	r4, r2
 80005f6:	430c      	orrs	r4, r1
 80005f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000600:	fa1f f78c 	uxth.w	r7, ip
 8000604:	fbb3 f0f8 	udiv	r0, r3, r8
 8000608:	fb08 3110 	mls	r1, r8, r0, r3
 800060c:	0c23      	lsrs	r3, r4, #16
 800060e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000612:	fb00 f107 	mul.w	r1, r0, r7
 8000616:	4299      	cmp	r1, r3
 8000618:	d908      	bls.n	800062c <__udivmoddi4+0x24c>
 800061a:	eb1c 0303 	adds.w	r3, ip, r3
 800061e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000622:	d22c      	bcs.n	800067e <__udivmoddi4+0x29e>
 8000624:	4299      	cmp	r1, r3
 8000626:	d92a      	bls.n	800067e <__udivmoddi4+0x29e>
 8000628:	3802      	subs	r0, #2
 800062a:	4463      	add	r3, ip
 800062c:	1a5b      	subs	r3, r3, r1
 800062e:	b2a4      	uxth	r4, r4
 8000630:	fbb3 f1f8 	udiv	r1, r3, r8
 8000634:	fb08 3311 	mls	r3, r8, r1, r3
 8000638:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800063c:	fb01 f307 	mul.w	r3, r1, r7
 8000640:	42a3      	cmp	r3, r4
 8000642:	d908      	bls.n	8000656 <__udivmoddi4+0x276>
 8000644:	eb1c 0404 	adds.w	r4, ip, r4
 8000648:	f101 36ff 	add.w	r6, r1, #4294967295
 800064c:	d213      	bcs.n	8000676 <__udivmoddi4+0x296>
 800064e:	42a3      	cmp	r3, r4
 8000650:	d911      	bls.n	8000676 <__udivmoddi4+0x296>
 8000652:	3902      	subs	r1, #2
 8000654:	4464      	add	r4, ip
 8000656:	1ae4      	subs	r4, r4, r3
 8000658:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800065c:	e739      	b.n	80004d2 <__udivmoddi4+0xf2>
 800065e:	4604      	mov	r4, r0
 8000660:	e6f0      	b.n	8000444 <__udivmoddi4+0x64>
 8000662:	4608      	mov	r0, r1
 8000664:	e706      	b.n	8000474 <__udivmoddi4+0x94>
 8000666:	45c8      	cmp	r8, r9
 8000668:	d2ae      	bcs.n	80005c8 <__udivmoddi4+0x1e8>
 800066a:	ebb9 0e02 	subs.w	lr, r9, r2
 800066e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000672:	3801      	subs	r0, #1
 8000674:	e7a8      	b.n	80005c8 <__udivmoddi4+0x1e8>
 8000676:	4631      	mov	r1, r6
 8000678:	e7ed      	b.n	8000656 <__udivmoddi4+0x276>
 800067a:	4603      	mov	r3, r0
 800067c:	e799      	b.n	80005b2 <__udivmoddi4+0x1d2>
 800067e:	4630      	mov	r0, r6
 8000680:	e7d4      	b.n	800062c <__udivmoddi4+0x24c>
 8000682:	46d6      	mov	lr, sl
 8000684:	e77f      	b.n	8000586 <__udivmoddi4+0x1a6>
 8000686:	4463      	add	r3, ip
 8000688:	3802      	subs	r0, #2
 800068a:	e74d      	b.n	8000528 <__udivmoddi4+0x148>
 800068c:	4606      	mov	r6, r0
 800068e:	4623      	mov	r3, r4
 8000690:	4608      	mov	r0, r1
 8000692:	e70f      	b.n	80004b4 <__udivmoddi4+0xd4>
 8000694:	3e02      	subs	r6, #2
 8000696:	4463      	add	r3, ip
 8000698:	e730      	b.n	80004fc <__udivmoddi4+0x11c>
 800069a:	bf00      	nop

0800069c <__aeabi_idiv0>:
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop

080006a0 <BMP180_read_ID>:

static I2C_HandleTypeDef *hi2c_BMP180;
extern uint8_t BMP180_Press_IT[3], BMP180_Temp_IT[2];
extern uint8_t BMP180_IRQ;

uint8_t BMP180_read_ID(void){// comunication = 0x55
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b086      	sub	sp, #24
 80006a4:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_BMP180, BMP180_ADDRES, id_register, 1, &data, 1, 100);
 80006a6:	4b09      	ldr	r3, [pc, #36]	@ (80006cc <BMP180_read_ID+0x2c>)
 80006a8:	6818      	ldr	r0, [r3, #0]
 80006aa:	2364      	movs	r3, #100	@ 0x64
 80006ac:	9302      	str	r3, [sp, #8]
 80006ae:	2301      	movs	r3, #1
 80006b0:	9301      	str	r3, [sp, #4]
 80006b2:	1dfb      	adds	r3, r7, #7
 80006b4:	9300      	str	r3, [sp, #0]
 80006b6:	2301      	movs	r3, #1
 80006b8:	22d0      	movs	r2, #208	@ 0xd0
 80006ba:	21ee      	movs	r1, #238	@ 0xee
 80006bc:	f00e fa7e 	bl	800ebbc <HAL_I2C_Mem_Read>
	return data;
 80006c0:	79fb      	ldrb	r3, [r7, #7]
}
 80006c2:	4618      	mov	r0, r3
 80006c4:	3708      	adds	r7, #8
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	24000098 	.word	0x24000098

080006d0 <BMP180_init>:

uint8_t BMP180_init(I2C_HandleTypeDef*hi2c){
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b084      	sub	sp, #16
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
	hi2c_BMP180 = hi2c;
 80006d8:	4a0b      	ldr	r2, [pc, #44]	@ (8000708 <BMP180_init+0x38>)
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	6013      	str	r3, [r2, #0]
	BMP180_read_calliberation_data();
 80006de:	f000 f8dd 	bl	800089c <BMP180_read_calliberation_data>

	uint8_t status = 0;
 80006e2:	2300      	movs	r3, #0
 80006e4:	73fb      	strb	r3, [r7, #15]
	status = BMP180_read_ID();
 80006e6:	f7ff ffdb 	bl	80006a0 <BMP180_read_ID>
 80006ea:	4603      	mov	r3, r0
 80006ec:	73fb      	strb	r3, [r7, #15]

	if(status != 0x55){
 80006ee:	7bfb      	ldrb	r3, [r7, #15]
 80006f0:	2b55      	cmp	r3, #85	@ 0x55
 80006f2:	d002      	beq.n	80006fa <BMP180_init+0x2a>
		status = 0;
 80006f4:	2300      	movs	r3, #0
 80006f6:	73fb      	strb	r3, [r7, #15]
 80006f8:	e001      	b.n	80006fe <BMP180_init+0x2e>
	}
	else{
		status = 1;
 80006fa:	2301      	movs	r3, #1
 80006fc:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 80006fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8000700:	4618      	mov	r0, r3
 8000702:	3710      	adds	r7, #16
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}
 8000708:	24000098 	.word	0x24000098

0800070c <BMP180_READ_temp>:

uint16_t BMP180_READ_temp(void){
 800070c:	b580      	push	{r7, lr}
 800070e:	b086      	sub	sp, #24
 8000710:	af04      	add	r7, sp, #16
	uint8_t data[2];
	HAL_I2C_Mem_Read(hi2c_BMP180, BMP180_ADDRES, out_msb, 1, data, 2, 100);
 8000712:	4b0d      	ldr	r3, [pc, #52]	@ (8000748 <BMP180_READ_temp+0x3c>)
 8000714:	6818      	ldr	r0, [r3, #0]
 8000716:	2364      	movs	r3, #100	@ 0x64
 8000718:	9302      	str	r3, [sp, #8]
 800071a:	2302      	movs	r3, #2
 800071c:	9301      	str	r3, [sp, #4]
 800071e:	1d3b      	adds	r3, r7, #4
 8000720:	9300      	str	r3, [sp, #0]
 8000722:	2301      	movs	r3, #1
 8000724:	22f6      	movs	r2, #246	@ 0xf6
 8000726:	21ee      	movs	r1, #238	@ 0xee
 8000728:	f00e fa48 	bl	800ebbc <HAL_I2C_Mem_Read>
	UT = ((data[0]<<8) | data[1]);
 800072c:	793b      	ldrb	r3, [r7, #4]
 800072e:	021b      	lsls	r3, r3, #8
 8000730:	797a      	ldrb	r2, [r7, #5]
 8000732:	4313      	orrs	r3, r2
 8000734:	4a05      	ldr	r2, [pc, #20]	@ (800074c <BMP180_READ_temp+0x40>)
 8000736:	6013      	str	r3, [r2, #0]
	return UT;
 8000738:	4b04      	ldr	r3, [pc, #16]	@ (800074c <BMP180_READ_temp+0x40>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	b29b      	uxth	r3, r3
}
 800073e:	4618      	mov	r0, r3
 8000740:	3708      	adds	r7, #8
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	24000098 	.word	0x24000098
 800074c:	000000c8 	.word	0x000000c8

08000750 <BMP180_READ_pres>:

uint32_t BMP180_READ_pres(void){
 8000750:	b580      	push	{r7, lr}
 8000752:	b086      	sub	sp, #24
 8000754:	af04      	add	r7, sp, #16
	uint8_t data[3];
	HAL_I2C_Mem_Read(hi2c_BMP180, BMP180_ADDRES, out_msb, 1, data, 3, 1000);
 8000756:	4b0d      	ldr	r3, [pc, #52]	@ (800078c <BMP180_READ_pres+0x3c>)
 8000758:	6818      	ldr	r0, [r3, #0]
 800075a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800075e:	9302      	str	r3, [sp, #8]
 8000760:	2303      	movs	r3, #3
 8000762:	9301      	str	r3, [sp, #4]
 8000764:	1d3b      	adds	r3, r7, #4
 8000766:	9300      	str	r3, [sp, #0]
 8000768:	2301      	movs	r3, #1
 800076a:	22f6      	movs	r2, #246	@ 0xf6
 800076c:	21ee      	movs	r1, #238	@ 0xee
 800076e:	f00e fa25 	bl	800ebbc <HAL_I2C_Mem_Read>
	return (((data[0]<<16)|(data[1]<<8)|data[2]) >> 5);
 8000772:	793b      	ldrb	r3, [r7, #4]
 8000774:	041a      	lsls	r2, r3, #16
 8000776:	797b      	ldrb	r3, [r7, #5]
 8000778:	021b      	lsls	r3, r3, #8
 800077a:	4313      	orrs	r3, r2
 800077c:	79ba      	ldrb	r2, [r7, #6]
 800077e:	4313      	orrs	r3, r2
 8000780:	115b      	asrs	r3, r3, #5
}
 8000782:	4618      	mov	r0, r3
 8000784:	3708      	adds	r7, #8
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	24000098 	.word	0x24000098

08000790 <BMP180_GET_temp_IT>:
void BMP180_READ_pres_IT(void){
	HAL_I2C_Mem_Read_IT(hi2c_BMP180, BMP180_ADDRES, out_msb, 1, (uint8_t *)BMP180_Press_IT, 3);
	BMP180_IRQ = 2;
}

uint16_t BMP180_GET_temp_IT(void){
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0
	UT = ((BMP180_Temp_IT[0]<<8) | BMP180_Temp_IT[1]);
 8000794:	4b07      	ldr	r3, [pc, #28]	@ (80007b4 <BMP180_GET_temp_IT+0x24>)
 8000796:	781b      	ldrb	r3, [r3, #0]
 8000798:	021b      	lsls	r3, r3, #8
 800079a:	4a06      	ldr	r2, [pc, #24]	@ (80007b4 <BMP180_GET_temp_IT+0x24>)
 800079c:	7852      	ldrb	r2, [r2, #1]
 800079e:	4313      	orrs	r3, r2
 80007a0:	4a05      	ldr	r2, [pc, #20]	@ (80007b8 <BMP180_GET_temp_IT+0x28>)
 80007a2:	6013      	str	r3, [r2, #0]
	return UT;
 80007a4:	4b04      	ldr	r3, [pc, #16]	@ (80007b8 <BMP180_GET_temp_IT+0x28>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	b29b      	uxth	r3, r3
}
 80007aa:	4618      	mov	r0, r3
 80007ac:	46bd      	mov	sp, r7
 80007ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b2:	4770      	bx	lr
 80007b4:	000000f8 	.word	0x000000f8
 80007b8:	000000c8 	.word	0x000000c8

080007bc <BMP180_GET_pres_IT>:

uint32_t BMP180_GET_pres_IT(void){
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0
	return (((BMP180_Press_IT[0]<<16)|(BMP180_Press_IT[1]<<8)|BMP180_Press_IT[2]) >> 5);
 80007c0:	4b07      	ldr	r3, [pc, #28]	@ (80007e0 <BMP180_GET_pres_IT+0x24>)
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	041a      	lsls	r2, r3, #16
 80007c6:	4b06      	ldr	r3, [pc, #24]	@ (80007e0 <BMP180_GET_pres_IT+0x24>)
 80007c8:	785b      	ldrb	r3, [r3, #1]
 80007ca:	021b      	lsls	r3, r3, #8
 80007cc:	4313      	orrs	r3, r2
 80007ce:	4a04      	ldr	r2, [pc, #16]	@ (80007e0 <BMP180_GET_pres_IT+0x24>)
 80007d0:	7892      	ldrb	r2, [r2, #2]
 80007d2:	4313      	orrs	r3, r2
 80007d4:	115b      	asrs	r3, r3, #5
}
 80007d6:	4618      	mov	r0, r3
 80007d8:	46bd      	mov	sp, r7
 80007da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007de:	4770      	bx	lr
 80007e0:	000000f4 	.word	0x000000f4

080007e4 <BMP180_start_measurment_temp>:
//	BMP180_start_measurment_pres();
//	//HAL_Delay(26);
//	pressure = BMP180_READ_pres();
//}

void BMP180_start_measurment_temp(void){
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b086      	sub	sp, #24
 80007e8:	af04      	add	r7, sp, #16
	uint8_t data = 0x2E;
 80007ea:	232e      	movs	r3, #46	@ 0x2e
 80007ec:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(hi2c_BMP180, BMP180_ADDRES, ctrl_meas, 1, &data, 1, 100);
 80007ee:	4b08      	ldr	r3, [pc, #32]	@ (8000810 <BMP180_start_measurment_temp+0x2c>)
 80007f0:	6818      	ldr	r0, [r3, #0]
 80007f2:	2364      	movs	r3, #100	@ 0x64
 80007f4:	9302      	str	r3, [sp, #8]
 80007f6:	2301      	movs	r3, #1
 80007f8:	9301      	str	r3, [sp, #4]
 80007fa:	1dfb      	adds	r3, r7, #7
 80007fc:	9300      	str	r3, [sp, #0]
 80007fe:	2301      	movs	r3, #1
 8000800:	22f4      	movs	r2, #244	@ 0xf4
 8000802:	21ee      	movs	r1, #238	@ 0xee
 8000804:	f00e f8c6 	bl	800e994 <HAL_I2C_Mem_Write>
}
 8000808:	bf00      	nop
 800080a:	3708      	adds	r7, #8
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	24000098 	.word	0x24000098

08000814 <BMP180_start_measurment_pres>:

void BMP180_start_measurment_pres(void){
 8000814:	b580      	push	{r7, lr}
 8000816:	b086      	sub	sp, #24
 8000818:	af04      	add	r7, sp, #16
	uint8_t data = 0xF4;
 800081a:	23f4      	movs	r3, #244	@ 0xf4
 800081c:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(hi2c_BMP180, BMP180_ADDRES, ctrl_meas, 1, &data, 1, 100);
 800081e:	4b08      	ldr	r3, [pc, #32]	@ (8000840 <BMP180_start_measurment_pres+0x2c>)
 8000820:	6818      	ldr	r0, [r3, #0]
 8000822:	2364      	movs	r3, #100	@ 0x64
 8000824:	9302      	str	r3, [sp, #8]
 8000826:	2301      	movs	r3, #1
 8000828:	9301      	str	r3, [sp, #4]
 800082a:	1dfb      	adds	r3, r7, #7
 800082c:	9300      	str	r3, [sp, #0]
 800082e:	2301      	movs	r3, #1
 8000830:	22f4      	movs	r2, #244	@ 0xf4
 8000832:	21ee      	movs	r1, #238	@ 0xee
 8000834:	f00e f8ae 	bl	800e994 <HAL_I2C_Mem_Write>
}
 8000838:	bf00      	nop
 800083a:	3708      	adds	r7, #8
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}
 8000840:	24000098 	.word	0x24000098

08000844 <BMP180_start_measurment_pres_IT>:

void BMP180_start_measurment_pres_IT(void){
 8000844:	b580      	push	{r7, lr}
 8000846:	b084      	sub	sp, #16
 8000848:	af02      	add	r7, sp, #8
	uint8_t data = 0xF4;
 800084a:	23f4      	movs	r3, #244	@ 0xf4
 800084c:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write_IT(hi2c_BMP180, BMP180_ADDRES, ctrl_meas, 1, &data, 1);
 800084e:	4b07      	ldr	r3, [pc, #28]	@ (800086c <BMP180_start_measurment_pres_IT+0x28>)
 8000850:	6818      	ldr	r0, [r3, #0]
 8000852:	2301      	movs	r3, #1
 8000854:	9301      	str	r3, [sp, #4]
 8000856:	1dfb      	adds	r3, r7, #7
 8000858:	9300      	str	r3, [sp, #0]
 800085a:	2301      	movs	r3, #1
 800085c:	22f4      	movs	r2, #244	@ 0xf4
 800085e:	21ee      	movs	r1, #238	@ 0xee
 8000860:	f00e fac6 	bl	800edf0 <HAL_I2C_Mem_Write_IT>
}
 8000864:	bf00      	nop
 8000866:	3708      	adds	r7, #8
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	24000098 	.word	0x24000098

08000870 <BMP180_start_measurment_temp_IT>:

void BMP180_start_measurment_temp_IT(void){
 8000870:	b580      	push	{r7, lr}
 8000872:	b084      	sub	sp, #16
 8000874:	af02      	add	r7, sp, #8
	uint8_t data = 0x2E;
 8000876:	232e      	movs	r3, #46	@ 0x2e
 8000878:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write_IT(hi2c_BMP180, BMP180_ADDRES, ctrl_meas, 1, &data, 1);
 800087a:	4b07      	ldr	r3, [pc, #28]	@ (8000898 <BMP180_start_measurment_temp_IT+0x28>)
 800087c:	6818      	ldr	r0, [r3, #0]
 800087e:	2301      	movs	r3, #1
 8000880:	9301      	str	r3, [sp, #4]
 8000882:	1dfb      	adds	r3, r7, #7
 8000884:	9300      	str	r3, [sp, #0]
 8000886:	2301      	movs	r3, #1
 8000888:	22f4      	movs	r2, #244	@ 0xf4
 800088a:	21ee      	movs	r1, #238	@ 0xee
 800088c:	f00e fab0 	bl	800edf0 <HAL_I2C_Mem_Write_IT>
}
 8000890:	bf00      	nop
 8000892:	3708      	adds	r7, #8
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	24000098 	.word	0x24000098

0800089c <BMP180_read_calliberation_data>:

void BMP180_read_calliberation_data(void){
 800089c:	b580      	push	{r7, lr}
 800089e:	b08a      	sub	sp, #40	@ 0x28
 80008a0:	af04      	add	r7, sp, #16

	uint8_t Callib_Data[22] = {0};
 80008a2:	2300      	movs	r3, #0
 80008a4:	603b      	str	r3, [r7, #0]
 80008a6:	1d3b      	adds	r3, r7, #4
 80008a8:	2200      	movs	r2, #0
 80008aa:	601a      	str	r2, [r3, #0]
 80008ac:	605a      	str	r2, [r3, #4]
 80008ae:	609a      	str	r2, [r3, #8]
 80008b0:	60da      	str	r2, [r3, #12]
 80008b2:	821a      	strh	r2, [r3, #16]
	uint16_t Callib_Start = 0xAA;
 80008b4:	23aa      	movs	r3, #170	@ 0xaa
 80008b6:	82fb      	strh	r3, [r7, #22]
	HAL_I2C_Mem_Read(hi2c_BMP180, BMP180_ADDRES, Callib_Start, 1, Callib_Data, 22, 100);
 80008b8:	4b3b      	ldr	r3, [pc, #236]	@ (80009a8 <BMP180_read_calliberation_data+0x10c>)
 80008ba:	6818      	ldr	r0, [r3, #0]
 80008bc:	8afa      	ldrh	r2, [r7, #22]
 80008be:	2364      	movs	r3, #100	@ 0x64
 80008c0:	9302      	str	r3, [sp, #8]
 80008c2:	2316      	movs	r3, #22
 80008c4:	9301      	str	r3, [sp, #4]
 80008c6:	463b      	mov	r3, r7
 80008c8:	9300      	str	r3, [sp, #0]
 80008ca:	2301      	movs	r3, #1
 80008cc:	21ee      	movs	r1, #238	@ 0xee
 80008ce:	f00e f975 	bl	800ebbc <HAL_I2C_Mem_Read>

	AC1 = (int16_t)((Callib_Data[0] << 8) | Callib_Data[1]);
 80008d2:	783b      	ldrb	r3, [r7, #0]
 80008d4:	021b      	lsls	r3, r3, #8
 80008d6:	b21a      	sxth	r2, r3
 80008d8:	787b      	ldrb	r3, [r7, #1]
 80008da:	b21b      	sxth	r3, r3
 80008dc:	4313      	orrs	r3, r2
 80008de:	b21a      	sxth	r2, r3
 80008e0:	4b32      	ldr	r3, [pc, #200]	@ (80009ac <BMP180_read_calliberation_data+0x110>)
 80008e2:	801a      	strh	r2, [r3, #0]
	AC2 = (int16_t)((Callib_Data[2] << 8) | Callib_Data[3]);
 80008e4:	78bb      	ldrb	r3, [r7, #2]
 80008e6:	021b      	lsls	r3, r3, #8
 80008e8:	b21a      	sxth	r2, r3
 80008ea:	78fb      	ldrb	r3, [r7, #3]
 80008ec:	b21b      	sxth	r3, r3
 80008ee:	4313      	orrs	r3, r2
 80008f0:	b21a      	sxth	r2, r3
 80008f2:	4b2f      	ldr	r3, [pc, #188]	@ (80009b0 <BMP180_read_calliberation_data+0x114>)
 80008f4:	801a      	strh	r2, [r3, #0]
	AC3 = (int16_t)((Callib_Data[4] << 8) | Callib_Data[5]);
 80008f6:	793b      	ldrb	r3, [r7, #4]
 80008f8:	021b      	lsls	r3, r3, #8
 80008fa:	b21a      	sxth	r2, r3
 80008fc:	797b      	ldrb	r3, [r7, #5]
 80008fe:	b21b      	sxth	r3, r3
 8000900:	4313      	orrs	r3, r2
 8000902:	b21a      	sxth	r2, r3
 8000904:	4b2b      	ldr	r3, [pc, #172]	@ (80009b4 <BMP180_read_calliberation_data+0x118>)
 8000906:	801a      	strh	r2, [r3, #0]
	AC4 = (int16_t)((Callib_Data[6] << 8) | Callib_Data[7]);
 8000908:	79bb      	ldrb	r3, [r7, #6]
 800090a:	021b      	lsls	r3, r3, #8
 800090c:	b21a      	sxth	r2, r3
 800090e:	79fb      	ldrb	r3, [r7, #7]
 8000910:	b21b      	sxth	r3, r3
 8000912:	4313      	orrs	r3, r2
 8000914:	b21b      	sxth	r3, r3
 8000916:	b29a      	uxth	r2, r3
 8000918:	4b27      	ldr	r3, [pc, #156]	@ (80009b8 <BMP180_read_calliberation_data+0x11c>)
 800091a:	801a      	strh	r2, [r3, #0]
	AC5 = (int16_t)((Callib_Data[8] << 8) | Callib_Data[9]);
 800091c:	7a3b      	ldrb	r3, [r7, #8]
 800091e:	021b      	lsls	r3, r3, #8
 8000920:	b21a      	sxth	r2, r3
 8000922:	7a7b      	ldrb	r3, [r7, #9]
 8000924:	b21b      	sxth	r3, r3
 8000926:	4313      	orrs	r3, r2
 8000928:	b21b      	sxth	r3, r3
 800092a:	b29a      	uxth	r2, r3
 800092c:	4b23      	ldr	r3, [pc, #140]	@ (80009bc <BMP180_read_calliberation_data+0x120>)
 800092e:	801a      	strh	r2, [r3, #0]
	AC6 = (int16_t)((Callib_Data[10] << 8) | Callib_Data[11]);
 8000930:	7abb      	ldrb	r3, [r7, #10]
 8000932:	021b      	lsls	r3, r3, #8
 8000934:	b21a      	sxth	r2, r3
 8000936:	7afb      	ldrb	r3, [r7, #11]
 8000938:	b21b      	sxth	r3, r3
 800093a:	4313      	orrs	r3, r2
 800093c:	b21b      	sxth	r3, r3
 800093e:	b29a      	uxth	r2, r3
 8000940:	4b1f      	ldr	r3, [pc, #124]	@ (80009c0 <BMP180_read_calliberation_data+0x124>)
 8000942:	801a      	strh	r2, [r3, #0]
	B1 = (int16_t)((Callib_Data[12] << 8) | Callib_Data[13]);
 8000944:	7b3b      	ldrb	r3, [r7, #12]
 8000946:	021b      	lsls	r3, r3, #8
 8000948:	b21a      	sxth	r2, r3
 800094a:	7b7b      	ldrb	r3, [r7, #13]
 800094c:	b21b      	sxth	r3, r3
 800094e:	4313      	orrs	r3, r2
 8000950:	b21a      	sxth	r2, r3
 8000952:	4b1c      	ldr	r3, [pc, #112]	@ (80009c4 <BMP180_read_calliberation_data+0x128>)
 8000954:	801a      	strh	r2, [r3, #0]
	B2 = (int16_t)((Callib_Data[14] << 8) | Callib_Data[15]);
 8000956:	7bbb      	ldrb	r3, [r7, #14]
 8000958:	021b      	lsls	r3, r3, #8
 800095a:	b21a      	sxth	r2, r3
 800095c:	7bfb      	ldrb	r3, [r7, #15]
 800095e:	b21b      	sxth	r3, r3
 8000960:	4313      	orrs	r3, r2
 8000962:	b21a      	sxth	r2, r3
 8000964:	4b18      	ldr	r3, [pc, #96]	@ (80009c8 <BMP180_read_calliberation_data+0x12c>)
 8000966:	801a      	strh	r2, [r3, #0]
	MB = (int16_t)((Callib_Data[16] << 8) | Callib_Data[17]);
 8000968:	7c3b      	ldrb	r3, [r7, #16]
 800096a:	021b      	lsls	r3, r3, #8
 800096c:	b21a      	sxth	r2, r3
 800096e:	7c7b      	ldrb	r3, [r7, #17]
 8000970:	b21b      	sxth	r3, r3
 8000972:	4313      	orrs	r3, r2
 8000974:	b21a      	sxth	r2, r3
 8000976:	4b15      	ldr	r3, [pc, #84]	@ (80009cc <BMP180_read_calliberation_data+0x130>)
 8000978:	801a      	strh	r2, [r3, #0]
	MC = (int16_t)((Callib_Data[18] << 8) | Callib_Data[19]);
 800097a:	7cbb      	ldrb	r3, [r7, #18]
 800097c:	021b      	lsls	r3, r3, #8
 800097e:	b21a      	sxth	r2, r3
 8000980:	7cfb      	ldrb	r3, [r7, #19]
 8000982:	b21b      	sxth	r3, r3
 8000984:	4313      	orrs	r3, r2
 8000986:	b21a      	sxth	r2, r3
 8000988:	4b11      	ldr	r3, [pc, #68]	@ (80009d0 <BMP180_read_calliberation_data+0x134>)
 800098a:	801a      	strh	r2, [r3, #0]
	MD = (int16_t)((Callib_Data[20] << 8) | Callib_Data[21]);
 800098c:	7d3b      	ldrb	r3, [r7, #20]
 800098e:	021b      	lsls	r3, r3, #8
 8000990:	b21a      	sxth	r2, r3
 8000992:	7d7b      	ldrb	r3, [r7, #21]
 8000994:	b21b      	sxth	r3, r3
 8000996:	4313      	orrs	r3, r2
 8000998:	b21a      	sxth	r2, r3
 800099a:	4b0e      	ldr	r3, [pc, #56]	@ (80009d4 <BMP180_read_calliberation_data+0x138>)
 800099c:	801a      	strh	r2, [r3, #0]
}
 800099e:	bf00      	nop
 80009a0:	3718      	adds	r7, #24
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	24000098 	.word	0x24000098
 80009ac:	000000a2 	.word	0x000000a2
 80009b0:	000000a4 	.word	0x000000a4
 80009b4:	000000a6 	.word	0x000000a6
 80009b8:	0000009c 	.word	0x0000009c
 80009bc:	0000009e 	.word	0x0000009e
 80009c0:	000000a0 	.word	0x000000a0
 80009c4:	000000a8 	.word	0x000000a8
 80009c8:	000000aa 	.word	0x000000aa
 80009cc:	000000ac 	.word	0x000000ac
 80009d0:	000000ae 	.word	0x000000ae
 80009d4:	000000b0 	.word	0x000000b0

080009d8 <BMP180_GET_temp>:

float BMP180_GET_temp(uint16_t temperature){
 80009d8:	b480      	push	{r7}
 80009da:	b083      	sub	sp, #12
 80009dc:	af00      	add	r7, sp, #0
 80009de:	4603      	mov	r3, r0
 80009e0:	80fb      	strh	r3, [r7, #6]

	X1 = ((temperature - AC6) * AC5)/32768;
 80009e2:	88fb      	ldrh	r3, [r7, #6]
 80009e4:	4a22      	ldr	r2, [pc, #136]	@ (8000a70 <BMP180_GET_temp+0x98>)
 80009e6:	8812      	ldrh	r2, [r2, #0]
 80009e8:	1a9b      	subs	r3, r3, r2
 80009ea:	4a22      	ldr	r2, [pc, #136]	@ (8000a74 <BMP180_GET_temp+0x9c>)
 80009ec:	8812      	ldrh	r2, [r2, #0]
 80009ee:	fb02 f303 	mul.w	r3, r2, r3
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	da03      	bge.n	80009fe <BMP180_GET_temp+0x26>
 80009f6:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80009fa:	441a      	add	r2, r3
 80009fc:	4613      	mov	r3, r2
 80009fe:	13db      	asrs	r3, r3, #15
 8000a00:	461a      	mov	r2, r3
 8000a02:	4b1d      	ldr	r3, [pc, #116]	@ (8000a78 <BMP180_GET_temp+0xa0>)
 8000a04:	601a      	str	r2, [r3, #0]
	X2 = (MC * 2048)/(X1 + MD);
 8000a06:	4b1d      	ldr	r3, [pc, #116]	@ (8000a7c <BMP180_GET_temp+0xa4>)
 8000a08:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a0c:	02da      	lsls	r2, r3, #11
 8000a0e:	4b1c      	ldr	r3, [pc, #112]	@ (8000a80 <BMP180_GET_temp+0xa8>)
 8000a10:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a14:	4619      	mov	r1, r3
 8000a16:	4b18      	ldr	r3, [pc, #96]	@ (8000a78 <BMP180_GET_temp+0xa0>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	440b      	add	r3, r1
 8000a1c:	fb92 f3f3 	sdiv	r3, r2, r3
 8000a20:	4a18      	ldr	r2, [pc, #96]	@ (8000a84 <BMP180_GET_temp+0xac>)
 8000a22:	6013      	str	r3, [r2, #0]
	B5 = X1 + X2;
 8000a24:	4b14      	ldr	r3, [pc, #80]	@ (8000a78 <BMP180_GET_temp+0xa0>)
 8000a26:	681a      	ldr	r2, [r3, #0]
 8000a28:	4b16      	ldr	r3, [pc, #88]	@ (8000a84 <BMP180_GET_temp+0xac>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	4413      	add	r3, r2
 8000a2e:	4a16      	ldr	r2, [pc, #88]	@ (8000a88 <BMP180_GET_temp+0xb0>)
 8000a30:	6013      	str	r3, [r2, #0]
	temp = (B5 + 8)/16;
 8000a32:	4b15      	ldr	r3, [pc, #84]	@ (8000a88 <BMP180_GET_temp+0xb0>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	3308      	adds	r3, #8
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	da00      	bge.n	8000a3e <BMP180_GET_temp+0x66>
 8000a3c:	330f      	adds	r3, #15
 8000a3e:	111b      	asrs	r3, r3, #4
 8000a40:	ee07 3a90 	vmov	s15, r3
 8000a44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a48:	4b10      	ldr	r3, [pc, #64]	@ (8000a8c <BMP180_GET_temp+0xb4>)
 8000a4a:	edc3 7a00 	vstr	s15, [r3]
	return temp/10.0;
 8000a4e:	4b0f      	ldr	r3, [pc, #60]	@ (8000a8c <BMP180_GET_temp+0xb4>)
 8000a50:	edd3 7a00 	vldr	s15, [r3]
 8000a54:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8000a58:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000a5c:	eef0 7a66 	vmov.f32	s15, s13
}
 8000a60:	eeb0 0a67 	vmov.f32	s0, s15
 8000a64:	370c      	adds	r7, #12
 8000a66:	46bd      	mov	sp, r7
 8000a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop
 8000a70:	000000a0 	.word	0x000000a0
 8000a74:	0000009e 	.word	0x0000009e
 8000a78:	000000cc 	.word	0x000000cc
 8000a7c:	000000ae 	.word	0x000000ae
 8000a80:	000000b0 	.word	0x000000b0
 8000a84:	000000d0 	.word	0x000000d0
 8000a88:	000000d4 	.word	0x000000d4
 8000a8c:	000000e4 	.word	0x000000e4

08000a90 <BMP180_GET_pres>:

float BMP180_GET_pres(uint16_t pressure){
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	4603      	mov	r3, r0
 8000a98:	80fb      	strh	r3, [r7, #6]

	UP = BMP180_READ_pres();
 8000a9a:	f7ff fe59 	bl	8000750 <BMP180_READ_pres>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	4a9c      	ldr	r2, [pc, #624]	@ (8000d14 <BMP180_GET_pres+0x284>)
 8000aa2:	6013      	str	r3, [r2, #0]
	X1 = (((UT-AC6) * AC5)/32768);//
 8000aa4:	4b9c      	ldr	r3, [pc, #624]	@ (8000d18 <BMP180_GET_pres+0x288>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	4a9c      	ldr	r2, [pc, #624]	@ (8000d1c <BMP180_GET_pres+0x28c>)
 8000aaa:	8812      	ldrh	r2, [r2, #0]
 8000aac:	1a9b      	subs	r3, r3, r2
 8000aae:	4a9c      	ldr	r2, [pc, #624]	@ (8000d20 <BMP180_GET_pres+0x290>)
 8000ab0:	8812      	ldrh	r2, [r2, #0]
 8000ab2:	fb02 f303 	mul.w	r3, r2, r3
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	da03      	bge.n	8000ac2 <BMP180_GET_pres+0x32>
 8000aba:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8000abe:	441a      	add	r2, r3
 8000ac0:	4613      	mov	r3, r2
 8000ac2:	13db      	asrs	r3, r3, #15
 8000ac4:	461a      	mov	r2, r3
 8000ac6:	4b97      	ldr	r3, [pc, #604]	@ (8000d24 <BMP180_GET_pres+0x294>)
 8000ac8:	601a      	str	r2, [r3, #0]
	X2 = ((MC*(2048)) / (X1+MD));
 8000aca:	4b97      	ldr	r3, [pc, #604]	@ (8000d28 <BMP180_GET_pres+0x298>)
 8000acc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ad0:	02da      	lsls	r2, r3, #11
 8000ad2:	4b96      	ldr	r3, [pc, #600]	@ (8000d2c <BMP180_GET_pres+0x29c>)
 8000ad4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ad8:	4619      	mov	r1, r3
 8000ada:	4b92      	ldr	r3, [pc, #584]	@ (8000d24 <BMP180_GET_pres+0x294>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	440b      	add	r3, r1
 8000ae0:	fb92 f3f3 	sdiv	r3, r2, r3
 8000ae4:	4a92      	ldr	r2, [pc, #584]	@ (8000d30 <BMP180_GET_pres+0x2a0>)
 8000ae6:	6013      	str	r3, [r2, #0]
	B5 = X1+X2;
 8000ae8:	4b8e      	ldr	r3, [pc, #568]	@ (8000d24 <BMP180_GET_pres+0x294>)
 8000aea:	681a      	ldr	r2, [r3, #0]
 8000aec:	4b90      	ldr	r3, [pc, #576]	@ (8000d30 <BMP180_GET_pres+0x2a0>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	4413      	add	r3, r2
 8000af2:	4a90      	ldr	r2, [pc, #576]	@ (8000d34 <BMP180_GET_pres+0x2a4>)
 8000af4:	6013      	str	r3, [r2, #0]
	B6 = B5-4000;
 8000af6:	4b8f      	ldr	r3, [pc, #572]	@ (8000d34 <BMP180_GET_pres+0x2a4>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	f5a3 637a 	sub.w	r3, r3, #4000	@ 0xfa0
 8000afe:	4a8e      	ldr	r2, [pc, #568]	@ (8000d38 <BMP180_GET_pres+0x2a8>)
 8000b00:	6013      	str	r3, [r2, #0]
	X1 = (B2 * (B6*B6/(4096)))/(2048);
 8000b02:	4b8e      	ldr	r3, [pc, #568]	@ (8000d3c <BMP180_GET_pres+0x2ac>)
 8000b04:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b08:	4619      	mov	r1, r3
 8000b0a:	4b8b      	ldr	r3, [pc, #556]	@ (8000d38 <BMP180_GET_pres+0x2a8>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	4a8a      	ldr	r2, [pc, #552]	@ (8000d38 <BMP180_GET_pres+0x2a8>)
 8000b10:	6812      	ldr	r2, [r2, #0]
 8000b12:	fb02 f303 	mul.w	r3, r2, r3
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	da01      	bge.n	8000b1e <BMP180_GET_pres+0x8e>
 8000b1a:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 8000b1e:	131b      	asrs	r3, r3, #12
 8000b20:	fb01 f303 	mul.w	r3, r1, r3
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	da01      	bge.n	8000b2c <BMP180_GET_pres+0x9c>
 8000b28:	f203 73ff 	addw	r3, r3, #2047	@ 0x7ff
 8000b2c:	12db      	asrs	r3, r3, #11
 8000b2e:	461a      	mov	r2, r3
 8000b30:	4b7c      	ldr	r3, [pc, #496]	@ (8000d24 <BMP180_GET_pres+0x294>)
 8000b32:	601a      	str	r2, [r3, #0]
	X2 = AC2*B6/(2048);
 8000b34:	4b82      	ldr	r3, [pc, #520]	@ (8000d40 <BMP180_GET_pres+0x2b0>)
 8000b36:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b3a:	461a      	mov	r2, r3
 8000b3c:	4b7e      	ldr	r3, [pc, #504]	@ (8000d38 <BMP180_GET_pres+0x2a8>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	fb02 f303 	mul.w	r3, r2, r3
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	da01      	bge.n	8000b4c <BMP180_GET_pres+0xbc>
 8000b48:	f203 73ff 	addw	r3, r3, #2047	@ 0x7ff
 8000b4c:	12db      	asrs	r3, r3, #11
 8000b4e:	461a      	mov	r2, r3
 8000b50:	4b77      	ldr	r3, [pc, #476]	@ (8000d30 <BMP180_GET_pres+0x2a0>)
 8000b52:	601a      	str	r2, [r3, #0]
	X3 = X1+X2;
 8000b54:	4b73      	ldr	r3, [pc, #460]	@ (8000d24 <BMP180_GET_pres+0x294>)
 8000b56:	681a      	ldr	r2, [r3, #0]
 8000b58:	4b75      	ldr	r3, [pc, #468]	@ (8000d30 <BMP180_GET_pres+0x2a0>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4413      	add	r3, r2
 8000b5e:	4a79      	ldr	r2, [pc, #484]	@ (8000d44 <BMP180_GET_pres+0x2b4>)
 8000b60:	6013      	str	r3, [r2, #0]
	B3 = (((AC1*4+X3)<<3)+2)/4;
 8000b62:	4b79      	ldr	r3, [pc, #484]	@ (8000d48 <BMP180_GET_pres+0x2b8>)
 8000b64:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b68:	009a      	lsls	r2, r3, #2
 8000b6a:	4b76      	ldr	r3, [pc, #472]	@ (8000d44 <BMP180_GET_pres+0x2b4>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	4413      	add	r3, r2
 8000b70:	00db      	lsls	r3, r3, #3
 8000b72:	3302      	adds	r3, #2
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	da00      	bge.n	8000b7a <BMP180_GET_pres+0xea>
 8000b78:	3303      	adds	r3, #3
 8000b7a:	109b      	asrs	r3, r3, #2
 8000b7c:	461a      	mov	r2, r3
 8000b7e:	4b73      	ldr	r3, [pc, #460]	@ (8000d4c <BMP180_GET_pres+0x2bc>)
 8000b80:	601a      	str	r2, [r3, #0]
	X1 = AC3*B6/8192;
 8000b82:	4b73      	ldr	r3, [pc, #460]	@ (8000d50 <BMP180_GET_pres+0x2c0>)
 8000b84:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b88:	461a      	mov	r2, r3
 8000b8a:	4b6b      	ldr	r3, [pc, #428]	@ (8000d38 <BMP180_GET_pres+0x2a8>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	fb02 f303 	mul.w	r3, r2, r3
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	da03      	bge.n	8000b9e <BMP180_GET_pres+0x10e>
 8000b96:	f641 72ff 	movw	r2, #8191	@ 0x1fff
 8000b9a:	441a      	add	r2, r3
 8000b9c:	4613      	mov	r3, r2
 8000b9e:	135b      	asrs	r3, r3, #13
 8000ba0:	461a      	mov	r2, r3
 8000ba2:	4b60      	ldr	r3, [pc, #384]	@ (8000d24 <BMP180_GET_pres+0x294>)
 8000ba4:	601a      	str	r2, [r3, #0]
	X2 = (B1 * (B6*B6/(4096)))/(65536);
 8000ba6:	4b6b      	ldr	r3, [pc, #428]	@ (8000d54 <BMP180_GET_pres+0x2c4>)
 8000ba8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000bac:	4619      	mov	r1, r3
 8000bae:	4b62      	ldr	r3, [pc, #392]	@ (8000d38 <BMP180_GET_pres+0x2a8>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	4a61      	ldr	r2, [pc, #388]	@ (8000d38 <BMP180_GET_pres+0x2a8>)
 8000bb4:	6812      	ldr	r2, [r2, #0]
 8000bb6:	fb02 f303 	mul.w	r3, r2, r3
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	da01      	bge.n	8000bc2 <BMP180_GET_pres+0x132>
 8000bbe:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 8000bc2:	131b      	asrs	r3, r3, #12
 8000bc4:	fb01 f303 	mul.w	r3, r1, r3
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	da03      	bge.n	8000bd4 <BMP180_GET_pres+0x144>
 8000bcc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000bd0:	441a      	add	r2, r3
 8000bd2:	4613      	mov	r3, r2
 8000bd4:	141b      	asrs	r3, r3, #16
 8000bd6:	461a      	mov	r2, r3
 8000bd8:	4b55      	ldr	r3, [pc, #340]	@ (8000d30 <BMP180_GET_pres+0x2a0>)
 8000bda:	601a      	str	r2, [r3, #0]
	X3 = ((X1+X2)+2)/4;
 8000bdc:	4b51      	ldr	r3, [pc, #324]	@ (8000d24 <BMP180_GET_pres+0x294>)
 8000bde:	681a      	ldr	r2, [r3, #0]
 8000be0:	4b53      	ldr	r3, [pc, #332]	@ (8000d30 <BMP180_GET_pres+0x2a0>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4413      	add	r3, r2
 8000be6:	3302      	adds	r3, #2
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	da00      	bge.n	8000bee <BMP180_GET_pres+0x15e>
 8000bec:	3303      	adds	r3, #3
 8000bee:	109b      	asrs	r3, r3, #2
 8000bf0:	461a      	mov	r2, r3
 8000bf2:	4b54      	ldr	r3, [pc, #336]	@ (8000d44 <BMP180_GET_pres+0x2b4>)
 8000bf4:	601a      	str	r2, [r3, #0]
	B4 = AC4* (uint32_t)(X3+32768)/(32768);
 8000bf6:	4b58      	ldr	r3, [pc, #352]	@ (8000d58 <BMP180_GET_pres+0x2c8>)
 8000bf8:	881b      	ldrh	r3, [r3, #0]
 8000bfa:	461a      	mov	r2, r3
 8000bfc:	4b51      	ldr	r3, [pc, #324]	@ (8000d44 <BMP180_GET_pres+0x2b4>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8000c04:	fb02 f303 	mul.w	r3, r2, r3
 8000c08:	0bdb      	lsrs	r3, r3, #15
 8000c0a:	4a54      	ldr	r2, [pc, #336]	@ (8000d5c <BMP180_GET_pres+0x2cc>)
 8000c0c:	6013      	str	r3, [r2, #0]
	B7 = ((uint32_t)UP-B3)*(50000>>3);
 8000c0e:	4b41      	ldr	r3, [pc, #260]	@ (8000d14 <BMP180_GET_pres+0x284>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	4a4e      	ldr	r2, [pc, #312]	@ (8000d4c <BMP180_GET_pres+0x2bc>)
 8000c14:	6812      	ldr	r2, [r2, #0]
 8000c16:	1a9b      	subs	r3, r3, r2
 8000c18:	f641 026a 	movw	r2, #6250	@ 0x186a
 8000c1c:	fb02 f303 	mul.w	r3, r2, r3
 8000c20:	4a4f      	ldr	r2, [pc, #316]	@ (8000d60 <BMP180_GET_pres+0x2d0>)
 8000c22:	6013      	str	r3, [r2, #0]
	if (B7 < 0x80000000){
 8000c24:	4b4e      	ldr	r3, [pc, #312]	@ (8000d60 <BMP180_GET_pres+0x2d0>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	db0e      	blt.n	8000c4a <BMP180_GET_pres+0x1ba>
		pres = (B7*2)/B4;
 8000c2c:	4b4c      	ldr	r3, [pc, #304]	@ (8000d60 <BMP180_GET_pres+0x2d0>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	005a      	lsls	r2, r3, #1
 8000c32:	4b4a      	ldr	r3, [pc, #296]	@ (8000d5c <BMP180_GET_pres+0x2cc>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c3a:	ee07 3a90 	vmov	s15, r3
 8000c3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000c42:	4b48      	ldr	r3, [pc, #288]	@ (8000d64 <BMP180_GET_pres+0x2d4>)
 8000c44:	edc3 7a00 	vstr	s15, [r3]
 8000c48:	e00d      	b.n	8000c66 <BMP180_GET_pres+0x1d6>
	}
	else{
		pres = (B7/B4)*2;
 8000c4a:	4b45      	ldr	r3, [pc, #276]	@ (8000d60 <BMP180_GET_pres+0x2d0>)
 8000c4c:	681a      	ldr	r2, [r3, #0]
 8000c4e:	4b43      	ldr	r3, [pc, #268]	@ (8000d5c <BMP180_GET_pres+0x2cc>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c56:	005b      	lsls	r3, r3, #1
 8000c58:	ee07 3a90 	vmov	s15, r3
 8000c5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000c60:	4b40      	ldr	r3, [pc, #256]	@ (8000d64 <BMP180_GET_pres+0x2d4>)
 8000c62:	edc3 7a00 	vstr	s15, [r3]
	}
	X1 = (pres/(256))*(pres/(256));
 8000c66:	4b3f      	ldr	r3, [pc, #252]	@ (8000d64 <BMP180_GET_pres+0x2d4>)
 8000c68:	edd3 7a00 	vldr	s15, [r3]
 8000c6c:	eddf 6a3e 	vldr	s13, [pc, #248]	@ 8000d68 <BMP180_GET_pres+0x2d8>
 8000c70:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000c74:	4b3b      	ldr	r3, [pc, #236]	@ (8000d64 <BMP180_GET_pres+0x2d4>)
 8000c76:	edd3 6a00 	vldr	s13, [r3]
 8000c7a:	ed9f 6a3b 	vldr	s12, [pc, #236]	@ 8000d68 <BMP180_GET_pres+0x2d8>
 8000c7e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8000c82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c86:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000c8a:	ee17 2a90 	vmov	r2, s15
 8000c8e:	4b25      	ldr	r3, [pc, #148]	@ (8000d24 <BMP180_GET_pres+0x294>)
 8000c90:	601a      	str	r2, [r3, #0]
	X1 = (X1*3038)/(65536);
 8000c92:	4b24      	ldr	r3, [pc, #144]	@ (8000d24 <BMP180_GET_pres+0x294>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	f640 32de 	movw	r2, #3038	@ 0xbde
 8000c9a:	fb02 f303 	mul.w	r3, r2, r3
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	da03      	bge.n	8000caa <BMP180_GET_pres+0x21a>
 8000ca2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000ca6:	441a      	add	r2, r3
 8000ca8:	4613      	mov	r3, r2
 8000caa:	141b      	asrs	r3, r3, #16
 8000cac:	461a      	mov	r2, r3
 8000cae:	4b1d      	ldr	r3, [pc, #116]	@ (8000d24 <BMP180_GET_pres+0x294>)
 8000cb0:	601a      	str	r2, [r3, #0]
	X2 = (-7357*pres)/(65536);
 8000cb2:	4b2c      	ldr	r3, [pc, #176]	@ (8000d64 <BMP180_GET_pres+0x2d4>)
 8000cb4:	edd3 7a00 	vldr	s15, [r3]
 8000cb8:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 8000d6c <BMP180_GET_pres+0x2dc>
 8000cbc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000cc0:	eddf 6a2b 	vldr	s13, [pc, #172]	@ 8000d70 <BMP180_GET_pres+0x2e0>
 8000cc4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000cc8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ccc:	ee17 2a90 	vmov	r2, s15
 8000cd0:	4b17      	ldr	r3, [pc, #92]	@ (8000d30 <BMP180_GET_pres+0x2a0>)
 8000cd2:	601a      	str	r2, [r3, #0]
	pres = pres + (X1+X2+3791)/(16);
 8000cd4:	4b13      	ldr	r3, [pc, #76]	@ (8000d24 <BMP180_GET_pres+0x294>)
 8000cd6:	681a      	ldr	r2, [r3, #0]
 8000cd8:	4b15      	ldr	r3, [pc, #84]	@ (8000d30 <BMP180_GET_pres+0x2a0>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4413      	add	r3, r2
 8000cde:	f603 63cf 	addw	r3, r3, #3791	@ 0xecf
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	da00      	bge.n	8000ce8 <BMP180_GET_pres+0x258>
 8000ce6:	330f      	adds	r3, #15
 8000ce8:	111b      	asrs	r3, r3, #4
 8000cea:	ee07 3a90 	vmov	s15, r3
 8000cee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000cf2:	4b1c      	ldr	r3, [pc, #112]	@ (8000d64 <BMP180_GET_pres+0x2d4>)
 8000cf4:	edd3 7a00 	vldr	s15, [r3]
 8000cf8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000cfc:	4b19      	ldr	r3, [pc, #100]	@ (8000d64 <BMP180_GET_pres+0x2d4>)
 8000cfe:	edc3 7a00 	vstr	s15, [r3]
	return pres;
 8000d02:	4b18      	ldr	r3, [pc, #96]	@ (8000d64 <BMP180_GET_pres+0x2d4>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	ee07 3a90 	vmov	s15, r3
}
 8000d0a:	eeb0 0a67 	vmov.f32	s0, s15
 8000d0e:	3708      	adds	r7, #8
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	000000bc 	.word	0x000000bc
 8000d18:	000000c8 	.word	0x000000c8
 8000d1c:	000000a0 	.word	0x000000a0
 8000d20:	0000009e 	.word	0x0000009e
 8000d24:	000000cc 	.word	0x000000cc
 8000d28:	000000ae 	.word	0x000000ae
 8000d2c:	000000b0 	.word	0x000000b0
 8000d30:	000000d0 	.word	0x000000d0
 8000d34:	000000d4 	.word	0x000000d4
 8000d38:	000000d8 	.word	0x000000d8
 8000d3c:	000000aa 	.word	0x000000aa
 8000d40:	000000a4 	.word	0x000000a4
 8000d44:	000000e0 	.word	0x000000e0
 8000d48:	000000a2 	.word	0x000000a2
 8000d4c:	000000dc 	.word	0x000000dc
 8000d50:	000000a6 	.word	0x000000a6
 8000d54:	000000a8 	.word	0x000000a8
 8000d58:	0000009c 	.word	0x0000009c
 8000d5c:	000000b4 	.word	0x000000b4
 8000d60:	000000b8 	.word	0x000000b8
 8000d64:	000000e8 	.word	0x000000e8
 8000d68:	43800000 	.word	0x43800000
 8000d6c:	c5e5e800 	.word	0xc5e5e800
 8000d70:	47800000 	.word	0x47800000

08000d74 <BMP180_CALIBRATION>:

void BMP180_CALIBRATION(float *firstpres){
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]

	//for(int i = 0; i < 30; i++){
	BMP180_start_measurment_temp();
 8000d7c:	f7ff fd32 	bl	80007e4 <BMP180_start_measurment_temp>
	HAL_Delay(10); // 9
 8000d80:	200a      	movs	r0, #10
 8000d82:	f008 fbfb 	bl	800957c <HAL_Delay>
	temperature = BMP180_READ_temp();
 8000d86:	f7ff fcc1 	bl	800070c <BMP180_READ_temp>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	461a      	mov	r2, r3
 8000d8e:	4b15      	ldr	r3, [pc, #84]	@ (8000de4 <BMP180_CALIBRATION+0x70>)
 8000d90:	601a      	str	r2, [r3, #0]
	temp = BMP180_GET_temp(temperature);
 8000d92:	4b14      	ldr	r3, [pc, #80]	@ (8000de4 <BMP180_CALIBRATION+0x70>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	b29b      	uxth	r3, r3
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f7ff fe1d 	bl	80009d8 <BMP180_GET_temp>
 8000d9e:	eef0 7a40 	vmov.f32	s15, s0
 8000da2:	4b11      	ldr	r3, [pc, #68]	@ (8000de8 <BMP180_CALIBRATION+0x74>)
 8000da4:	edc3 7a00 	vstr	s15, [r3]
	BMP180_start_measurment_pres();
 8000da8:	f7ff fd34 	bl	8000814 <BMP180_start_measurment_pres>
	HAL_Delay(30); // 30
 8000dac:	201e      	movs	r0, #30
 8000dae:	f008 fbe5 	bl	800957c <HAL_Delay>
	pressure = BMP180_READ_pres();
 8000db2:	f7ff fccd 	bl	8000750 <BMP180_READ_pres>
 8000db6:	4603      	mov	r3, r0
 8000db8:	461a      	mov	r2, r3
 8000dba:	4b0c      	ldr	r3, [pc, #48]	@ (8000dec <BMP180_CALIBRATION+0x78>)
 8000dbc:	601a      	str	r2, [r3, #0]
	pres = BMP180_GET_pres(pressure);
 8000dbe:	4b0b      	ldr	r3, [pc, #44]	@ (8000dec <BMP180_CALIBRATION+0x78>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	b29b      	uxth	r3, r3
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f7ff fe63 	bl	8000a90 <BMP180_GET_pres>
 8000dca:	eef0 7a40 	vmov.f32	s15, s0
 8000dce:	4b08      	ldr	r3, [pc, #32]	@ (8000df0 <BMP180_CALIBRATION+0x7c>)
 8000dd0:	edc3 7a00 	vstr	s15, [r3]
	//}
	*firstpres = pres;
 8000dd4:	4b06      	ldr	r3, [pc, #24]	@ (8000df0 <BMP180_CALIBRATION+0x7c>)
 8000dd6:	681a      	ldr	r2, [r3, #0]
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	601a      	str	r2, [r3, #0]
}
 8000ddc:	bf00      	nop
 8000dde:	3708      	adds	r7, #8
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	000000c0 	.word	0x000000c0
 8000de8:	000000e4 	.word	0x000000e4
 8000dec:	000000c4 	.word	0x000000c4
 8000df0:	000000e8 	.word	0x000000e8

08000df4 <BMP180_GET_height>:

float BMP180_GET_height(void){
 8000df4:	b480      	push	{r7}
 8000df6:	b083      	sub	sp, #12
 8000df8:	af00      	add	r7, sp, #0
	float height = 0, factor; // metry
 8000dfa:	f04f 0300 	mov.w	r3, #0
 8000dfe:	607b      	str	r3, [r7, #4]
	factor = 11.3; // na 1m cisnienie spada o 11,3 pa
 8000e00:	4b0a      	ldr	r3, [pc, #40]	@ (8000e2c <BMP180_GET_height+0x38>)
 8000e02:	603b      	str	r3, [r7, #0]
	height = (ampritude/factor);
 8000e04:	4b0a      	ldr	r3, [pc, #40]	@ (8000e30 <BMP180_GET_height+0x3c>)
 8000e06:	edd3 6a00 	vldr	s13, [r3]
 8000e0a:	ed97 7a00 	vldr	s14, [r7]
 8000e0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000e12:	edc7 7a01 	vstr	s15, [r7, #4]
	return height;
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	ee07 3a90 	vmov	s15, r3
}
 8000e1c:	eeb0 0a67 	vmov.f32	s0, s15
 8000e20:	370c      	adds	r7, #12
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop
 8000e2c:	4134cccd 	.word	0x4134cccd
 8000e30:	000000f0 	.word	0x000000f0

08000e34 <ESC_1_SPEED>:
static TIM_HandleTypeDef *htim_ESC; //450Hz



void ESC_1_SPEED(uint16_t a)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b083      	sub	sp, #12
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	80fb      	strh	r3, [r7, #6]
//	  if(a >  max_speed)
//	  {
//		  a =  max_speed;
//	  }

	a = (a < min_speed) ? min_speed : (a > max_speed) ? max_speed : a;
 8000e3e:	88fb      	ldrh	r3, [r7, #6]
 8000e40:	f642 1203 	movw	r2, #10499	@ 0x2903
 8000e44:	4293      	cmp	r3, r2
 8000e46:	d907      	bls.n	8000e58 <ESC_1_SPEED+0x24>
 8000e48:	88fb      	ldrh	r3, [r7, #6]
 8000e4a:	f644 422c 	movw	r2, #19500	@ 0x4c2c
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	bf28      	it	cs
 8000e52:	4613      	movcs	r3, r2
 8000e54:	b29b      	uxth	r3, r3
 8000e56:	e001      	b.n	8000e5c <ESC_1_SPEED+0x28>
 8000e58:	f642 1304 	movw	r3, #10500	@ 0x2904
 8000e5c:	80fb      	strh	r3, [r7, #6]

	  __HAL_TIM_SET_COMPARE(htim_ESC, TIM_CHANNEL_1, a);
 8000e5e:	4b05      	ldr	r3, [pc, #20]	@ (8000e74 <ESC_1_SPEED+0x40>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	88fa      	ldrh	r2, [r7, #6]
 8000e66:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000e68:	bf00      	nop
 8000e6a:	370c      	adds	r7, #12
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e72:	4770      	bx	lr
 8000e74:	2400009c 	.word	0x2400009c

08000e78 <ESC_2_SPEED>:

void ESC_2_SPEED(uint16_t a)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b083      	sub	sp, #12
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	4603      	mov	r3, r0
 8000e80:	80fb      	strh	r3, [r7, #6]
	a = (a < min_speed) ? min_speed : (a > max_speed) ? max_speed : a;
 8000e82:	88fb      	ldrh	r3, [r7, #6]
 8000e84:	f642 1203 	movw	r2, #10499	@ 0x2903
 8000e88:	4293      	cmp	r3, r2
 8000e8a:	d907      	bls.n	8000e9c <ESC_2_SPEED+0x24>
 8000e8c:	88fb      	ldrh	r3, [r7, #6]
 8000e8e:	f644 422c 	movw	r2, #19500	@ 0x4c2c
 8000e92:	4293      	cmp	r3, r2
 8000e94:	bf28      	it	cs
 8000e96:	4613      	movcs	r3, r2
 8000e98:	b29b      	uxth	r3, r3
 8000e9a:	e001      	b.n	8000ea0 <ESC_2_SPEED+0x28>
 8000e9c:	f642 1304 	movw	r3, #10500	@ 0x2904
 8000ea0:	80fb      	strh	r3, [r7, #6]

	  __HAL_TIM_SET_COMPARE(htim_ESC, TIM_CHANNEL_2, a);
 8000ea2:	4b05      	ldr	r3, [pc, #20]	@ (8000eb8 <ESC_2_SPEED+0x40>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	88fa      	ldrh	r2, [r7, #6]
 8000eaa:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8000eac:	bf00      	nop
 8000eae:	370c      	adds	r7, #12
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr
 8000eb8:	2400009c 	.word	0x2400009c

08000ebc <ESC_3_SPEED>:

void ESC_3_SPEED(uint16_t a)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b083      	sub	sp, #12
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	80fb      	strh	r3, [r7, #6]
	a = (a < min_speed) ? min_speed : (a > max_speed) ? max_speed : a;
 8000ec6:	88fb      	ldrh	r3, [r7, #6]
 8000ec8:	f642 1203 	movw	r2, #10499	@ 0x2903
 8000ecc:	4293      	cmp	r3, r2
 8000ece:	d907      	bls.n	8000ee0 <ESC_3_SPEED+0x24>
 8000ed0:	88fb      	ldrh	r3, [r7, #6]
 8000ed2:	f644 422c 	movw	r2, #19500	@ 0x4c2c
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	bf28      	it	cs
 8000eda:	4613      	movcs	r3, r2
 8000edc:	b29b      	uxth	r3, r3
 8000ede:	e001      	b.n	8000ee4 <ESC_3_SPEED+0x28>
 8000ee0:	f642 1304 	movw	r3, #10500	@ 0x2904
 8000ee4:	80fb      	strh	r3, [r7, #6]

	  __HAL_TIM_SET_COMPARE(htim_ESC, TIM_CHANNEL_3, a);
 8000ee6:	4b05      	ldr	r3, [pc, #20]	@ (8000efc <ESC_3_SPEED+0x40>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	88fa      	ldrh	r2, [r7, #6]
 8000eee:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8000ef0:	bf00      	nop
 8000ef2:	370c      	adds	r7, #12
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr
 8000efc:	2400009c 	.word	0x2400009c

08000f00 <ESC_4_SPEED>:

void ESC_4_SPEED(uint16_t a)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b083      	sub	sp, #12
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	4603      	mov	r3, r0
 8000f08:	80fb      	strh	r3, [r7, #6]
	a = (a < min_speed) ? min_speed : (a > max_speed) ? max_speed : a;
 8000f0a:	88fb      	ldrh	r3, [r7, #6]
 8000f0c:	f642 1203 	movw	r2, #10499	@ 0x2903
 8000f10:	4293      	cmp	r3, r2
 8000f12:	d907      	bls.n	8000f24 <ESC_4_SPEED+0x24>
 8000f14:	88fb      	ldrh	r3, [r7, #6]
 8000f16:	f644 422c 	movw	r2, #19500	@ 0x4c2c
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	bf28      	it	cs
 8000f1e:	4613      	movcs	r3, r2
 8000f20:	b29b      	uxth	r3, r3
 8000f22:	e001      	b.n	8000f28 <ESC_4_SPEED+0x28>
 8000f24:	f642 1304 	movw	r3, #10500	@ 0x2904
 8000f28:	80fb      	strh	r3, [r7, #6]

	  __HAL_TIM_SET_COMPARE(htim_ESC, TIM_CHANNEL_4, a);
 8000f2a:	4b05      	ldr	r3, [pc, #20]	@ (8000f40 <ESC_4_SPEED+0x40>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	88fa      	ldrh	r2, [r7, #6]
 8000f32:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8000f34:	bf00      	nop
 8000f36:	370c      	adds	r7, #12
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr
 8000f40:	2400009c 	.word	0x2400009c

08000f44 <ESC_INT>:
 *
 * najpierw wlonczamy PWM a dopiero potem zasilanie do silników, w przeciwnym razie ESC mogą włączyć się w trybie programowania.
 *
 */
void ESC_INT(TIM_HandleTypeDef *htim)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
	htim_ESC = htim;
 8000f4c:	4a20      	ldr	r2, [pc, #128]	@ (8000fd0 <ESC_INT+0x8c>)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	6013      	str	r3, [r2, #0]


	HAL_TIM_PWM_Start(htim_ESC, TIM_CHANNEL_1);//450Hz
 8000f52:	4b1f      	ldr	r3, [pc, #124]	@ (8000fd0 <ESC_INT+0x8c>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	2100      	movs	r1, #0
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f015 fb97 	bl	801668c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim_ESC, TIM_CHANNEL_2);
 8000f5e:	4b1c      	ldr	r3, [pc, #112]	@ (8000fd0 <ESC_INT+0x8c>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	2104      	movs	r1, #4
 8000f64:	4618      	mov	r0, r3
 8000f66:	f015 fb91 	bl	801668c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim_ESC, TIM_CHANNEL_3);
 8000f6a:	4b19      	ldr	r3, [pc, #100]	@ (8000fd0 <ESC_INT+0x8c>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	2108      	movs	r1, #8
 8000f70:	4618      	mov	r0, r3
 8000f72:	f015 fb8b 	bl	801668c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim_ESC, TIM_CHANNEL_4);
 8000f76:	4b16      	ldr	r3, [pc, #88]	@ (8000fd0 <ESC_INT+0x8c>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	210c      	movs	r1, #12
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f015 fb85 	bl	801668c <HAL_TIM_PWM_Start>

	__HAL_TIM_SET_COMPARE(htim_ESC, TIM_CHANNEL_4, 10000);
 8000f82:	4b13      	ldr	r3, [pc, #76]	@ (8000fd0 <ESC_INT+0x8c>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000f8c:	641a      	str	r2, [r3, #64]	@ 0x40
	__HAL_TIM_SET_COMPARE(htim_ESC, TIM_CHANNEL_3, 10000);
 8000f8e:	4b10      	ldr	r3, [pc, #64]	@ (8000fd0 <ESC_INT+0x8c>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000f98:	63da      	str	r2, [r3, #60]	@ 0x3c
	__HAL_TIM_SET_COMPARE(htim_ESC, TIM_CHANNEL_2, 10000);
 8000f9a:	4b0d      	ldr	r3, [pc, #52]	@ (8000fd0 <ESC_INT+0x8c>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000fa4:	639a      	str	r2, [r3, #56]	@ 0x38
	__HAL_TIM_SET_COMPARE(htim_ESC, TIM_CHANNEL_1, 10000);
 8000fa6:	4b0a      	ldr	r3, [pc, #40]	@ (8000fd0 <ESC_INT+0x8c>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000fb0:	635a      	str	r2, [r3, #52]	@ 0x34
	ESC_POWER_0;
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000fb8:	4806      	ldr	r0, [pc, #24]	@ (8000fd4 <ESC_INT+0x90>)
 8000fba:	f00d fc1b 	bl	800e7f4 <HAL_GPIO_WritePin>
	HAL_Delay(3000);
 8000fbe:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000fc2:	f008 fadb 	bl	800957c <HAL_Delay>
}
 8000fc6:	bf00      	nop
 8000fc8:	3708      	adds	r7, #8
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	2400009c 	.word	0x2400009c
 8000fd4:	58021800 	.word	0x58021800

08000fd8 <HMC5883L_Init>:
extern uint8_t HMC5883L_Data_IT[6];
extern uint8_t HMC583L_IRQ;
extern float Mag_Y, Mag_X;
float HMC5883L_Scale = 0.92;

uint8_t HMC5883L_Init(I2C_HandleTypeDef*hi2c){
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b088      	sub	sp, #32
 8000fdc:	af04      	add	r7, sp, #16
 8000fde:	6078      	str	r0, [r7, #4]

	hi2c_HMC5883L = hi2c;
 8000fe0:	4a2a      	ldr	r2, [pc, #168]	@ (800108c <HMC5883L_Init+0xb4>)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	6013      	str	r3, [r2, #0]

	uint8_t data = 0;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	73fb      	strb	r3, [r7, #15]
	 * bit3 = 0			30 HzOutput rate
	 * bit2 = 0		}
	 * bit1 = 0
	 * bit0 = 0
	 */
	data = 0xF0;
 8000fea:	23f0      	movs	r3, #240	@ 0xf0
 8000fec:	73fb      	strb	r3, [r7, #15]

	HAL_I2C_Mem_Write(hi2c_HMC5883L, HMC5883L_I2C_Address<<1, HMC5883L_Configuration_Register_A, 1, &data, 1, 1);
 8000fee:	4b27      	ldr	r3, [pc, #156]	@ (800108c <HMC5883L_Init+0xb4>)
 8000ff0:	6818      	ldr	r0, [r3, #0]
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	9302      	str	r3, [sp, #8]
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	9301      	str	r3, [sp, #4]
 8000ffa:	f107 030f 	add.w	r3, r7, #15
 8000ffe:	9300      	str	r3, [sp, #0]
 8001000:	2301      	movs	r3, #1
 8001002:	2200      	movs	r2, #0
 8001004:	213c      	movs	r1, #60	@ 0x3c
 8001006:	f00d fcc5 	bl	800e994 <HAL_I2C_Mem_Write>
	 * bit3 = 0
	 * bit2 = 0
	 * bit1 = 0
	 * bit0 = 0
	 */
	data = 0x32;
 800100a:	2332      	movs	r3, #50	@ 0x32
 800100c:	73fb      	strb	r3, [r7, #15]

	HAL_I2C_Mem_Write(hi2c_HMC5883L, HMC5883L_I2C_Address<<1, HMC5883L_Configuration_Register_B, 1, &data, 1, 1);
 800100e:	4b1f      	ldr	r3, [pc, #124]	@ (800108c <HMC5883L_Init+0xb4>)
 8001010:	6818      	ldr	r0, [r3, #0]
 8001012:	2301      	movs	r3, #1
 8001014:	9302      	str	r3, [sp, #8]
 8001016:	2301      	movs	r3, #1
 8001018:	9301      	str	r3, [sp, #4]
 800101a:	f107 030f 	add.w	r3, r7, #15
 800101e:	9300      	str	r3, [sp, #0]
 8001020:	2301      	movs	r3, #1
 8001022:	2201      	movs	r2, #1
 8001024:	213c      	movs	r1, #60	@ 0x3c
 8001026:	f00d fcb5 	bl	800e994 <HAL_I2C_Mem_Write>
	 * bit3 = 0
	 * bit2 = 0
	 * bit1 = 0	{ Continuous-Measurement Mode
	 * bit0 = 0 }
	 */
	data = 0x80;
 800102a:	2380      	movs	r3, #128	@ 0x80
 800102c:	73fb      	strb	r3, [r7, #15]

	HAL_I2C_Mem_Write(hi2c_HMC5883L, HMC5883L_I2C_Address<<1, HMC5883L_Mode_Register, 1, &data, 1, 1);
 800102e:	4b17      	ldr	r3, [pc, #92]	@ (800108c <HMC5883L_Init+0xb4>)
 8001030:	6818      	ldr	r0, [r3, #0]
 8001032:	2301      	movs	r3, #1
 8001034:	9302      	str	r3, [sp, #8]
 8001036:	2301      	movs	r3, #1
 8001038:	9301      	str	r3, [sp, #4]
 800103a:	f107 030f 	add.w	r3, r7, #15
 800103e:	9300      	str	r3, [sp, #0]
 8001040:	2301      	movs	r3, #1
 8001042:	2202      	movs	r2, #2
 8001044:	213c      	movs	r1, #60	@ 0x3c
 8001046:	f00d fca5 	bl	800e994 <HAL_I2C_Mem_Write>


	uint8_t status = 0;
 800104a:	2300      	movs	r3, #0
 800104c:	73bb      	strb	r3, [r7, #14]

	HAL_I2C_Mem_Read(hi2c_HMC5883L, HMC5883L_I2C_Address<<1, HMC5883L_Identifaction_Register_A, 1, &status, 1, 1);
 800104e:	4b0f      	ldr	r3, [pc, #60]	@ (800108c <HMC5883L_Init+0xb4>)
 8001050:	6818      	ldr	r0, [r3, #0]
 8001052:	2301      	movs	r3, #1
 8001054:	9302      	str	r3, [sp, #8]
 8001056:	2301      	movs	r3, #1
 8001058:	9301      	str	r3, [sp, #4]
 800105a:	f107 030e 	add.w	r3, r7, #14
 800105e:	9300      	str	r3, [sp, #0]
 8001060:	2301      	movs	r3, #1
 8001062:	220a      	movs	r2, #10
 8001064:	213c      	movs	r1, #60	@ 0x3c
 8001066:	f00d fda9 	bl	800ebbc <HAL_I2C_Mem_Read>

	if(status != 0x48){
 800106a:	7bbb      	ldrb	r3, [r7, #14]
 800106c:	2b48      	cmp	r3, #72	@ 0x48
 800106e:	d002      	beq.n	8001076 <HMC5883L_Init+0x9e>
		status = 0;
 8001070:	2300      	movs	r3, #0
 8001072:	73bb      	strb	r3, [r7, #14]
 8001074:	e001      	b.n	800107a <HMC5883L_Init+0xa2>
	}
	else{
		status = 1;
 8001076:	2301      	movs	r3, #1
 8001078:	73bb      	strb	r3, [r7, #14]
	}
	HAL_Delay(10);
 800107a:	200a      	movs	r0, #10
 800107c:	f008 fa7e 	bl	800957c <HAL_Delay>

	return status;
 8001080:	7bbb      	ldrb	r3, [r7, #14]
}
 8001082:	4618      	mov	r0, r3
 8001084:	3710      	adds	r7, #16
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	240000a0 	.word	0x240000a0

08001090 <HMC5883L_Get_Z_Start>:


int16_t HMC5883L_Get_Z_Start(void){
 8001090:	b580      	push	{r7, lr}
 8001092:	b086      	sub	sp, #24
 8001094:	af04      	add	r7, sp, #16
	int16_t fulldata = 182;
 8001096:	23b6      	movs	r3, #182	@ 0xb6
 8001098:	80fb      	strh	r3, [r7, #6]
	uint8_t data[6];

	HAL_I2C_Mem_Read(hi2c_HMC5883L, HMC5883L_I2C_Address<<1, HMC5883L_Data_Output_X_MSB_Register, 1, data, 6, 1);
 800109a:	4b0d      	ldr	r3, [pc, #52]	@ (80010d0 <HMC5883L_Get_Z_Start+0x40>)
 800109c:	6818      	ldr	r0, [r3, #0]
 800109e:	2301      	movs	r3, #1
 80010a0:	9302      	str	r3, [sp, #8]
 80010a2:	2306      	movs	r3, #6
 80010a4:	9301      	str	r3, [sp, #4]
 80010a6:	463b      	mov	r3, r7
 80010a8:	9300      	str	r3, [sp, #0]
 80010aa:	2301      	movs	r3, #1
 80010ac:	2203      	movs	r2, #3
 80010ae:	213c      	movs	r1, #60	@ 0x3c
 80010b0:	f00d fd84 	bl	800ebbc <HAL_I2C_Mem_Read>

	fulldata = ((int16_t)data[2]<<8) | data[3];
 80010b4:	78bb      	ldrb	r3, [r7, #2]
 80010b6:	021b      	lsls	r3, r3, #8
 80010b8:	b21a      	sxth	r2, r3
 80010ba:	78fb      	ldrb	r3, [r7, #3]
 80010bc:	b21b      	sxth	r3, r3
 80010be:	4313      	orrs	r3, r2
 80010c0:	80fb      	strh	r3, [r7, #6]

	return fulldata;
 80010c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	3708      	adds	r7, #8
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	240000a0 	.word	0x240000a0

080010d4 <HMC5883L_Get_Z_Start_IT>:

void HMC5883L_Get_Z_Start_IT(void){
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af02      	add	r7, sp, #8
	HAL_I2C_Mem_Read_IT(hi2c_HMC5883L, HMC5883L_I2C_Address<<1, HMC5883L_Data_Output_X_MSB_Register, 1, (uint8_t *)HMC5883L_Data_IT, 6);
 80010da:	4b08      	ldr	r3, [pc, #32]	@ (80010fc <HMC5883L_Get_Z_Start_IT+0x28>)
 80010dc:	6818      	ldr	r0, [r3, #0]
 80010de:	2306      	movs	r3, #6
 80010e0:	9301      	str	r3, [sp, #4]
 80010e2:	4b07      	ldr	r3, [pc, #28]	@ (8001100 <HMC5883L_Get_Z_Start_IT+0x2c>)
 80010e4:	9300      	str	r3, [sp, #0]
 80010e6:	2301      	movs	r3, #1
 80010e8:	2203      	movs	r2, #3
 80010ea:	213c      	movs	r1, #60	@ 0x3c
 80010ec:	f00d ff0a 	bl	800ef04 <HAL_I2C_Mem_Read_IT>
	HMC583L_IRQ = 1;
 80010f0:	4b04      	ldr	r3, [pc, #16]	@ (8001104 <HMC5883L_Get_Z_Start_IT+0x30>)
 80010f2:	2201      	movs	r2, #1
 80010f4:	701a      	strb	r2, [r3, #0]
}
 80010f6:	bf00      	nop
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	240000a0 	.word	0x240000a0
 8001100:	0000006c 	.word	0x0000006c
 8001104:	000041f5 	.word	0x000041f5

08001108 <HMC5883L_Get_Z_End_IT>:

int16_t HMC5883L_Get_Z_End_IT(void){
 8001108:	b480      	push	{r7}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
	int16_t fulldata = 0;
 800110e:	2300      	movs	r3, #0
 8001110:	80fb      	strh	r3, [r7, #6]

	fulldata = (((int16_t)HMC5883L_Data_IT[2]<<8) | HMC5883L_Data_IT[3]) * HMC5883L_Scale;
 8001112:	4b20      	ldr	r3, [pc, #128]	@ (8001194 <HMC5883L_Get_Z_End_IT+0x8c>)
 8001114:	789b      	ldrb	r3, [r3, #2]
 8001116:	021b      	lsls	r3, r3, #8
 8001118:	4a1e      	ldr	r2, [pc, #120]	@ (8001194 <HMC5883L_Get_Z_End_IT+0x8c>)
 800111a:	78d2      	ldrb	r2, [r2, #3]
 800111c:	4313      	orrs	r3, r2
 800111e:	ee07 3a90 	vmov	s15, r3
 8001122:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001126:	4b1c      	ldr	r3, [pc, #112]	@ (8001198 <HMC5883L_Get_Z_End_IT+0x90>)
 8001128:	edd3 7a00 	vldr	s15, [r3]
 800112c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001130:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001134:	ee17 3a90 	vmov	r3, s15
 8001138:	80fb      	strh	r3, [r7, #6]
	Mag_X = (((int16_t)HMC5883L_Data_IT[0]<<8) | HMC5883L_Data_IT[1]) * HMC5883L_Scale;
 800113a:	4b16      	ldr	r3, [pc, #88]	@ (8001194 <HMC5883L_Get_Z_End_IT+0x8c>)
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	021b      	lsls	r3, r3, #8
 8001140:	4a14      	ldr	r2, [pc, #80]	@ (8001194 <HMC5883L_Get_Z_End_IT+0x8c>)
 8001142:	7852      	ldrb	r2, [r2, #1]
 8001144:	4313      	orrs	r3, r2
 8001146:	ee07 3a90 	vmov	s15, r3
 800114a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800114e:	4b12      	ldr	r3, [pc, #72]	@ (8001198 <HMC5883L_Get_Z_End_IT+0x90>)
 8001150:	edd3 7a00 	vldr	s15, [r3]
 8001154:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001158:	4b10      	ldr	r3, [pc, #64]	@ (800119c <HMC5883L_Get_Z_End_IT+0x94>)
 800115a:	edc3 7a00 	vstr	s15, [r3]
	Mag_Y = (((int16_t)HMC5883L_Data_IT[4]<<8) | HMC5883L_Data_IT[5]) * HMC5883L_Scale;
 800115e:	4b0d      	ldr	r3, [pc, #52]	@ (8001194 <HMC5883L_Get_Z_End_IT+0x8c>)
 8001160:	791b      	ldrb	r3, [r3, #4]
 8001162:	021b      	lsls	r3, r3, #8
 8001164:	4a0b      	ldr	r2, [pc, #44]	@ (8001194 <HMC5883L_Get_Z_End_IT+0x8c>)
 8001166:	7952      	ldrb	r2, [r2, #5]
 8001168:	4313      	orrs	r3, r2
 800116a:	ee07 3a90 	vmov	s15, r3
 800116e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001172:	4b09      	ldr	r3, [pc, #36]	@ (8001198 <HMC5883L_Get_Z_End_IT+0x90>)
 8001174:	edd3 7a00 	vldr	s15, [r3]
 8001178:	ee67 7a27 	vmul.f32	s15, s14, s15
 800117c:	4b08      	ldr	r3, [pc, #32]	@ (80011a0 <HMC5883L_Get_Z_End_IT+0x98>)
 800117e:	edc3 7a00 	vstr	s15, [r3]

	return fulldata;
 8001182:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001186:	4618      	mov	r0, r3
 8001188:	370c      	adds	r7, #12
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop
 8001194:	0000006c 	.word	0x0000006c
 8001198:	24000000 	.word	0x24000000
 800119c:	00000060 	.word	0x00000060
 80011a0:	0000005c 	.word	0x0000005c

080011a4 <HMC5883L_Calibration>:


int16_t HMC5883L_Calibration(void){
 80011a4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80011a8:	b084      	sub	sp, #16
 80011aa:	af00      	add	r7, sp, #0
	int64_t mes_data = 0;
 80011ac:	f04f 0200 	mov.w	r2, #0
 80011b0:	f04f 0300 	mov.w	r3, #0
 80011b4:	e9c7 2302 	strd	r2, r3, [r7, #8]
	for(int i = 0; i < 10; i++){
 80011b8:	2300      	movs	r3, #0
 80011ba:	607b      	str	r3, [r7, #4]
 80011bc:	e014      	b.n	80011e8 <HMC5883L_Calibration+0x44>
		mes_data += HMC5883L_Get_Z_Start();
 80011be:	f7ff ff67 	bl	8001090 <HMC5883L_Get_Z_Start>
 80011c2:	4603      	mov	r3, r0
 80011c4:	b21b      	sxth	r3, r3
 80011c6:	17da      	asrs	r2, r3, #31
 80011c8:	461c      	mov	r4, r3
 80011ca:	4615      	mov	r5, r2
 80011cc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80011d0:	eb12 0804 	adds.w	r8, r2, r4
 80011d4:	eb43 0905 	adc.w	r9, r3, r5
 80011d8:	e9c7 8902 	strd	r8, r9, [r7, #8]
		HAL_Delay(100); //Output = 30Hz
 80011dc:	2064      	movs	r0, #100	@ 0x64
 80011de:	f008 f9cd 	bl	800957c <HAL_Delay>
	for(int i = 0; i < 10; i++){
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	3301      	adds	r3, #1
 80011e6:	607b      	str	r3, [r7, #4]
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	2b09      	cmp	r3, #9
 80011ec:	dde7      	ble.n	80011be <HMC5883L_Calibration+0x1a>
	}

	return (mes_data/10);
 80011ee:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80011f2:	f04f 020a 	mov.w	r2, #10
 80011f6:	f04f 0300 	mov.w	r3, #0
 80011fa:	f7ff f889 	bl	8000310 <__aeabi_ldivmod>
 80011fe:	4602      	mov	r2, r0
 8001200:	460b      	mov	r3, r1
 8001202:	b213      	sxth	r3, r2
}
 8001204:	4618      	mov	r0, r3
 8001206:	3710      	adds	r7, #16
 8001208:	46bd      	mov	sp, r7
 800120a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

08001210 <MPU6050_INIT>:
//extern float xval;
//extern float yval;
//extern float zval;


uint8_t MPU6050_INIT(I2C_HandleTypeDef*hi2c){
 8001210:	b580      	push	{r7, lr}
 8001212:	b084      	sub	sp, #16
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
	hi2c_mpu6050 = hi2c;
 8001218:	4a13      	ldr	r2, [pc, #76]	@ (8001268 <MPU6050_INIT+0x58>)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6013      	str	r3, [r2, #0]
	MPU6050_RESET();
 800121e:	f000 f825 	bl	800126c <MPU6050_RESET>
	MPU6050_CONFIG_SAMPLE_RATE();
 8001222:	f000 f88f 	bl	8001344 <MPU6050_CONFIG_SAMPLE_RATE>
	MPU6050_CONFIG_DLPF(0x05);// //05
 8001226:	2005      	movs	r0, #5
 8001228:	f000 f838 	bl	800129c <MPU6050_CONFIG_DLPF>
	/*
	 *  0 - 250 o/s
	 *  0x08 - 500 o/s
	 */
	MPU6050_CONFIG_GYRO(0x08);//+-500 o/s
 800122c:	2008      	movs	r0, #8
 800122e:	f000 f851 	bl	80012d4 <MPU6050_CONFIG_GYRO>
	MPU6050_CONFIG_ACCEL(0x08); // +-4g
 8001232:	2008      	movs	r0, #8
 8001234:	f000 f86a 	bl	800130c <MPU6050_CONFIG_ACCEL>

	MPU6050_Enable_I2C_Bypass();
 8001238:	f000 fd3e 	bl	8001cb8 <MPU6050_Enable_I2C_Bypass>
	MPU6050_CONFIG_USER_CONTROL();
 800123c:	f000 f89a 	bl	8001374 <MPU6050_CONFIG_USER_CONTROL>

	HAL_Delay(10);
 8001240:	200a      	movs	r0, #10
 8001242:	f008 f99b 	bl	800957c <HAL_Delay>

	uint8_t status;
	status = MPU6050_READ_ID();
 8001246:	f000 fd1f 	bl	8001c88 <MPU6050_READ_ID>
 800124a:	4603      	mov	r3, r0
 800124c:	73fb      	strb	r3, [r7, #15]

	if(status != 104){
 800124e:	7bfb      	ldrb	r3, [r7, #15]
 8001250:	2b68      	cmp	r3, #104	@ 0x68
 8001252:	d002      	beq.n	800125a <MPU6050_INIT+0x4a>
		status = 0;//error
 8001254:	2300      	movs	r3, #0
 8001256:	73fb      	strb	r3, [r7, #15]
 8001258:	e001      	b.n	800125e <MPU6050_INIT+0x4e>
	}
	else{
		status = 1;//ok
 800125a:	2301      	movs	r3, #1
 800125c:	73fb      	strb	r3, [r7, #15]
//	int x = MPU6050_GET_ACCEL_FULLVALUE_X();
//	x = MPU6050_READ_CONFIG_SAMPLE_RATE();
//	x = MPU6050_READ_CONFIG_DLPF();//1kHz;
//	x = MPU6050_READ_CONFIG_GYRO();//+-500 o/s;
//	x = MPU6050_READ_CONFIG_ACCEL(); // +-8g;;
	return status;
 800125e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001260:	4618      	mov	r0, r3
 8001262:	3710      	adds	r7, #16
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	240000a4 	.word	0x240000a4

0800126c <MPU6050_RESET>:


void MPU6050_RESET(void){
 800126c:	b580      	push	{r7, lr}
 800126e:	b086      	sub	sp, #24
 8001270:	af04      	add	r7, sp, #16
	uint8_t data = 0x00;//0x80
 8001272:	2300      	movs	r3, #0
 8001274:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_PWR_MGMT_1, 1, &data, 1, 1);
 8001276:	4b08      	ldr	r3, [pc, #32]	@ (8001298 <MPU6050_RESET+0x2c>)
 8001278:	6818      	ldr	r0, [r3, #0]
 800127a:	2301      	movs	r3, #1
 800127c:	9302      	str	r3, [sp, #8]
 800127e:	2301      	movs	r3, #1
 8001280:	9301      	str	r3, [sp, #4]
 8001282:	1dfb      	adds	r3, r7, #7
 8001284:	9300      	str	r3, [sp, #0]
 8001286:	2301      	movs	r3, #1
 8001288:	226b      	movs	r2, #107	@ 0x6b
 800128a:	21d0      	movs	r1, #208	@ 0xd0
 800128c:	f00d fb82 	bl	800e994 <HAL_I2C_Mem_Write>
}
 8001290:	bf00      	nop
 8001292:	3708      	adds	r7, #8
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	240000a4 	.word	0x240000a4

0800129c <MPU6050_CONFIG_DLPF>:

void MPU6050_CONFIG_DLPF(uint8_t DLPF_CFG){
 800129c:	b580      	push	{r7, lr}
 800129e:	b088      	sub	sp, #32
 80012a0:	af04      	add	r7, sp, #16
 80012a2:	4603      	mov	r3, r0
 80012a4:	71fb      	strb	r3, [r7, #7]
	uint8_t data = DLPF_CFG;
 80012a6:	79fb      	ldrb	r3, [r7, #7]
 80012a8:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_CONFIG, 1, &data, 1, 1);
 80012aa:	4b09      	ldr	r3, [pc, #36]	@ (80012d0 <MPU6050_CONFIG_DLPF+0x34>)
 80012ac:	6818      	ldr	r0, [r3, #0]
 80012ae:	2301      	movs	r3, #1
 80012b0:	9302      	str	r3, [sp, #8]
 80012b2:	2301      	movs	r3, #1
 80012b4:	9301      	str	r3, [sp, #4]
 80012b6:	f107 030f 	add.w	r3, r7, #15
 80012ba:	9300      	str	r3, [sp, #0]
 80012bc:	2301      	movs	r3, #1
 80012be:	221a      	movs	r2, #26
 80012c0:	21d0      	movs	r1, #208	@ 0xd0
 80012c2:	f00d fb67 	bl	800e994 <HAL_I2C_Mem_Write>
}
 80012c6:	bf00      	nop
 80012c8:	3710      	adds	r7, #16
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	240000a4 	.word	0x240000a4

080012d4 <MPU6050_CONFIG_GYRO>:

void MPU6050_CONFIG_GYRO(uint8_t GYRO_CFG/*konfiguracja gyroskopy*/){
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b088      	sub	sp, #32
 80012d8:	af04      	add	r7, sp, #16
 80012da:	4603      	mov	r3, r0
 80012dc:	71fb      	strb	r3, [r7, #7]
	uint8_t data = GYRO_CFG;
 80012de:	79fb      	ldrb	r3, [r7, #7]
 80012e0:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_GYRO_CONFIG, 1, &data, 1, 1);
 80012e2:	4b09      	ldr	r3, [pc, #36]	@ (8001308 <MPU6050_CONFIG_GYRO+0x34>)
 80012e4:	6818      	ldr	r0, [r3, #0]
 80012e6:	2301      	movs	r3, #1
 80012e8:	9302      	str	r3, [sp, #8]
 80012ea:	2301      	movs	r3, #1
 80012ec:	9301      	str	r3, [sp, #4]
 80012ee:	f107 030f 	add.w	r3, r7, #15
 80012f2:	9300      	str	r3, [sp, #0]
 80012f4:	2301      	movs	r3, #1
 80012f6:	221b      	movs	r2, #27
 80012f8:	21d0      	movs	r1, #208	@ 0xd0
 80012fa:	f00d fb4b 	bl	800e994 <HAL_I2C_Mem_Write>
}
 80012fe:	bf00      	nop
 8001300:	3710      	adds	r7, #16
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	240000a4 	.word	0x240000a4

0800130c <MPU6050_CONFIG_ACCEL>:

void MPU6050_CONFIG_ACCEL(uint8_t ACCEL_CFG/*konfiguracja akcelorometru*/){
 800130c:	b580      	push	{r7, lr}
 800130e:	b088      	sub	sp, #32
 8001310:	af04      	add	r7, sp, #16
 8001312:	4603      	mov	r3, r0
 8001314:	71fb      	strb	r3, [r7, #7]
	uint8_t data = ACCEL_CFG;
 8001316:	79fb      	ldrb	r3, [r7, #7]
 8001318:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_ACCEL_CONFIG, 1, &data, 1, 1);
 800131a:	4b09      	ldr	r3, [pc, #36]	@ (8001340 <MPU6050_CONFIG_ACCEL+0x34>)
 800131c:	6818      	ldr	r0, [r3, #0]
 800131e:	2301      	movs	r3, #1
 8001320:	9302      	str	r3, [sp, #8]
 8001322:	2301      	movs	r3, #1
 8001324:	9301      	str	r3, [sp, #4]
 8001326:	f107 030f 	add.w	r3, r7, #15
 800132a:	9300      	str	r3, [sp, #0]
 800132c:	2301      	movs	r3, #1
 800132e:	221c      	movs	r2, #28
 8001330:	21d0      	movs	r1, #208	@ 0xd0
 8001332:	f00d fb2f 	bl	800e994 <HAL_I2C_Mem_Write>
}
 8001336:	bf00      	nop
 8001338:	3710      	adds	r7, #16
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	240000a4 	.word	0x240000a4

08001344 <MPU6050_CONFIG_SAMPLE_RATE>:
void MPU6050_CONFIG_INT(void){
	uint8_t data = 0x00;
	HAL_I2C_Mem_Write(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_INT_ENABLE, 1, &data, 1, 1);
}

void MPU6050_CONFIG_SAMPLE_RATE(void){
 8001344:	b580      	push	{r7, lr}
 8001346:	b086      	sub	sp, #24
 8001348:	af04      	add	r7, sp, #16
	uint8_t data = 0x00; // Sample Rate = Gyroscope Output Rate / (1 + SMPLRT_DIV)                 Gyroscope Output Rate = 1kHz
 800134a:	2300      	movs	r3, #0
 800134c:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_SMPLRT_DIV, 1, &data, 1, 1);
 800134e:	4b08      	ldr	r3, [pc, #32]	@ (8001370 <MPU6050_CONFIG_SAMPLE_RATE+0x2c>)
 8001350:	6818      	ldr	r0, [r3, #0]
 8001352:	2301      	movs	r3, #1
 8001354:	9302      	str	r3, [sp, #8]
 8001356:	2301      	movs	r3, #1
 8001358:	9301      	str	r3, [sp, #4]
 800135a:	1dfb      	adds	r3, r7, #7
 800135c:	9300      	str	r3, [sp, #0]
 800135e:	2301      	movs	r3, #1
 8001360:	2219      	movs	r2, #25
 8001362:	21d0      	movs	r1, #208	@ 0xd0
 8001364:	f00d fb16 	bl	800e994 <HAL_I2C_Mem_Write>
}
 8001368:	bf00      	nop
 800136a:	3708      	adds	r7, #8
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	240000a4 	.word	0x240000a4

08001374 <MPU6050_CONFIG_USER_CONTROL>:
void MPU6050_CONFIG_INTERRUPT_ENABLE(void){
	uint8_t data = 0x00;
	HAL_I2C_Mem_Write(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_PWR_MGMT_2, 1, &data, 1, 1);
}

void MPU6050_CONFIG_USER_CONTROL(void){
 8001374:	b580      	push	{r7, lr}
 8001376:	b086      	sub	sp, #24
 8001378:	af04      	add	r7, sp, #16
	uint8_t data = 0x00;
 800137a:	2300      	movs	r3, #0
 800137c:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_USER_CTRL, 1, &data, 1, 1);
 800137e:	4b08      	ldr	r3, [pc, #32]	@ (80013a0 <MPU6050_CONFIG_USER_CONTROL+0x2c>)
 8001380:	6818      	ldr	r0, [r3, #0]
 8001382:	2301      	movs	r3, #1
 8001384:	9302      	str	r3, [sp, #8]
 8001386:	2301      	movs	r3, #1
 8001388:	9301      	str	r3, [sp, #4]
 800138a:	1dfb      	adds	r3, r7, #7
 800138c:	9300      	str	r3, [sp, #0]
 800138e:	2301      	movs	r3, #1
 8001390:	226a      	movs	r2, #106	@ 0x6a
 8001392:	21d0      	movs	r1, #208	@ 0xd0
 8001394:	f00d fafe 	bl	800e994 <HAL_I2C_Mem_Write>
}
 8001398:	bf00      	nop
 800139a:	3708      	adds	r7, #8
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	240000a4 	.word	0x240000a4

080013a4 <MPU6050_CALIBRATION>:


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void MPU6050_CALIBRATION(float *accelx_cal,float *accely_cal,float*accelz_cal,float *gyrox_cal,float *gyroy_cal,
		float *gyroz_cal, float Gyr_Scale, float Acc_Scale){
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b08e      	sub	sp, #56	@ 0x38
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6178      	str	r0, [r7, #20]
 80013ac:	6139      	str	r1, [r7, #16]
 80013ae:	60fa      	str	r2, [r7, #12]
 80013b0:	60bb      	str	r3, [r7, #8]
 80013b2:	ed87 0a01 	vstr	s0, [r7, #4]
 80013b6:	edc7 0a00 	vstr	s1, [r7]

	float accelx = 0, accely = 0, accelz = 0, gyrox = 0, gyroy = 0, gyroz = 0;
 80013ba:	f04f 0300 	mov.w	r3, #0
 80013be:	637b      	str	r3, [r7, #52]	@ 0x34
 80013c0:	f04f 0300 	mov.w	r3, #0
 80013c4:	633b      	str	r3, [r7, #48]	@ 0x30
 80013c6:	f04f 0300 	mov.w	r3, #0
 80013ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80013cc:	f04f 0300 	mov.w	r3, #0
 80013d0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80013d2:	f04f 0300 	mov.w	r3, #0
 80013d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80013d8:	f04f 0300 	mov.w	r3, #0
 80013dc:	623b      	str	r3, [r7, #32]
	for(int i = 0; i < 1000; i++){ //5 sec
 80013de:	2300      	movs	r3, #0
 80013e0:	61fb      	str	r3, [r7, #28]
 80013e2:	e06b      	b.n	80014bc <MPU6050_CALIBRATION+0x118>
		  accelx = accelx + MPU6050_GET_ACCEL_FULLVALUE_X()/Acc_Scale;
 80013e4:	f000 fbcc 	bl	8001b80 <MPU6050_GET_ACCEL_FULLVALUE_X>
 80013e8:	4603      	mov	r3, r0
 80013ea:	ee07 3a90 	vmov	s15, r3
 80013ee:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80013f2:	ed97 7a00 	vldr	s14, [r7]
 80013f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013fa:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 80013fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001402:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
		  accely = accely + MPU6050_GET_ACCEL_FULLVALUE_Y()/Acc_Scale;
 8001406:	f000 fbdb 	bl	8001bc0 <MPU6050_GET_ACCEL_FULLVALUE_Y>
 800140a:	4603      	mov	r3, r0
 800140c:	ee07 3a90 	vmov	s15, r3
 8001410:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001414:	ed97 7a00 	vldr	s14, [r7]
 8001418:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800141c:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8001420:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001424:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
		  accelz = accelz + MPU6050_GET_ACCEL_FULLVALUE_Z()/Acc_Scale;
 8001428:	f000 fbde 	bl	8001be8 <MPU6050_GET_ACCEL_FULLVALUE_Z>
 800142c:	4603      	mov	r3, r0
 800142e:	ee07 3a90 	vmov	s15, r3
 8001432:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001436:	ed97 7a00 	vldr	s14, [r7]
 800143a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800143e:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8001442:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001446:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

		  gyrox = gyrox + MPU6050_GET_GYRO_FULLVALUE_X()/Gyr_Scale;
 800144a:	f000 fbe1 	bl	8001c10 <MPU6050_GET_GYRO_FULLVALUE_X>
 800144e:	4603      	mov	r3, r0
 8001450:	ee07 3a90 	vmov	s15, r3
 8001454:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001458:	ed97 7a01 	vldr	s14, [r7, #4]
 800145c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001460:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8001464:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001468:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
		  gyroy = gyroy + MPU6050_GET_GYRO_FULLVALUE_Y()/Gyr_Scale;
 800146c:	f000 fbe4 	bl	8001c38 <MPU6050_GET_GYRO_FULLVALUE_Y>
 8001470:	4603      	mov	r3, r0
 8001472:	ee07 3a90 	vmov	s15, r3
 8001476:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800147a:	ed97 7a01 	vldr	s14, [r7, #4]
 800147e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001482:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001486:	ee77 7a27 	vadd.f32	s15, s14, s15
 800148a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
		  gyroz = gyroz + MPU6050_GET_GYRO_FULLVALUE_Z()/Gyr_Scale;
 800148e:	f000 fbe7 	bl	8001c60 <MPU6050_GET_GYRO_FULLVALUE_Z>
 8001492:	4603      	mov	r3, r0
 8001494:	ee07 3a90 	vmov	s15, r3
 8001498:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800149c:	ed97 7a01 	vldr	s14, [r7, #4]
 80014a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014a4:	ed97 7a08 	vldr	s14, [r7, #32]
 80014a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014ac:	edc7 7a08 	vstr	s15, [r7, #32]
		  HAL_Delay(1);
 80014b0:	2001      	movs	r0, #1
 80014b2:	f008 f863 	bl	800957c <HAL_Delay>
	for(int i = 0; i < 1000; i++){ //5 sec
 80014b6:	69fb      	ldr	r3, [r7, #28]
 80014b8:	3301      	adds	r3, #1
 80014ba:	61fb      	str	r3, [r7, #28]
 80014bc:	69fb      	ldr	r3, [r7, #28]
 80014be:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80014c2:	db8f      	blt.n	80013e4 <MPU6050_CALIBRATION+0x40>
	}
	*accelx_cal = accelx/1000;
 80014c4:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 80014c8:	eddf 6a20 	vldr	s13, [pc, #128]	@ 800154c <MPU6050_CALIBRATION+0x1a8>
 80014cc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	edc3 7a00 	vstr	s15, [r3]
	*accely_cal = accely/1000;
 80014d6:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 80014da:	eddf 6a1c 	vldr	s13, [pc, #112]	@ 800154c <MPU6050_CALIBRATION+0x1a8>
 80014de:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014e2:	693b      	ldr	r3, [r7, #16]
 80014e4:	edc3 7a00 	vstr	s15, [r3]
	*accelz_cal = accelz/1000;
 80014e8:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80014ec:	eddf 6a17 	vldr	s13, [pc, #92]	@ 800154c <MPU6050_CALIBRATION+0x1a8>
 80014f0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	edc3 7a00 	vstr	s15, [r3]

	*accelz_cal = 1 - *accelz_cal;
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	edd3 7a00 	vldr	s15, [r3]
 8001500:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001504:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	edc3 7a00 	vstr	s15, [r3]

	*gyrox_cal = gyrox/1000;
 800150e:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8001512:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800154c <MPU6050_CALIBRATION+0x1a8>
 8001516:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800151a:	68bb      	ldr	r3, [r7, #8]
 800151c:	edc3 7a00 	vstr	s15, [r3]
	*gyroy_cal = gyroy/1000;
 8001520:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001524:	eddf 6a09 	vldr	s13, [pc, #36]	@ 800154c <MPU6050_CALIBRATION+0x1a8>
 8001528:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800152c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800152e:	edc3 7a00 	vstr	s15, [r3]
	*gyroz_cal = gyroz/1000;
 8001532:	ed97 7a08 	vldr	s14, [r7, #32]
 8001536:	eddf 6a05 	vldr	s13, [pc, #20]	@ 800154c <MPU6050_CALIBRATION+0x1a8>
 800153a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800153e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001540:	edc3 7a00 	vstr	s15, [r3]
}
 8001544:	bf00      	nop
 8001546:	3738      	adds	r7, #56	@ 0x38
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}
 800154c:	447a0000 	.word	0x447a0000

08001550 <MPU6050_GET_ACCEL_TO_ANGLE>:

void MPU6050_GET_ACCEL_TO_ANGLE(float ax, float ay, float az, float *ax_ang, float *ay_ang/*, float *az_ang*/){
 8001550:	b580      	push	{r7, lr}
 8001552:	b08a      	sub	sp, #40	@ 0x28
 8001554:	af00      	add	r7, sp, #0
 8001556:	ed87 0a05 	vstr	s0, [r7, #20]
 800155a:	edc7 0a04 	vstr	s1, [r7, #16]
 800155e:	ed87 1a03 	vstr	s2, [r7, #12]
 8001562:	60b8      	str	r0, [r7, #8]
 8001564:	6079      	str	r1, [r7, #4]
	float axan,ayan;
	float ang1 = sqrt((ax*ax)+(az*az));
 8001566:	edd7 7a05 	vldr	s15, [r7, #20]
 800156a:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800156e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001572:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001576:	ee77 7a27 	vadd.f32	s15, s14, s15
 800157a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800157e:	eeb0 0b47 	vmov.f64	d0, d7
 8001582:	f01c fdf9 	bl	801e178 <sqrt>
 8001586:	eeb0 7b40 	vmov.f64	d7, d0
 800158a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800158e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
	float ang2 = sqrt((ay*ay)+(az*az));
 8001592:	edd7 7a04 	vldr	s15, [r7, #16]
 8001596:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800159a:	edd7 7a03 	vldr	s15, [r7, #12]
 800159e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80015a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015a6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80015aa:	eeb0 0b47 	vmov.f64	d0, d7
 80015ae:	f01c fde3 	bl	801e178 <sqrt>
 80015b2:	eeb0 7b40 	vmov.f64	d7, d0
 80015b6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80015ba:	edc7 7a08 	vstr	s15, [r7, #32]
	axan = -1*(atan(ax/ang2));
 80015be:	edd7 6a05 	vldr	s13, [r7, #20]
 80015c2:	ed97 7a08 	vldr	s14, [r7, #32]
 80015c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80015ca:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80015ce:	eeb0 0b47 	vmov.f64	d0, d7
 80015d2:	f01c fdf1 	bl	801e1b8 <atan>
 80015d6:	eeb0 7b40 	vmov.f64	d7, d0
 80015da:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80015de:	eef1 7a67 	vneg.f32	s15, s15
 80015e2:	edc7 7a07 	vstr	s15, [r7, #28]
	ayan= atan(ay/ang1);
 80015e6:	edd7 6a04 	vldr	s13, [r7, #16]
 80015ea:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80015ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80015f2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80015f6:	eeb0 0b47 	vmov.f64	d0, d7
 80015fa:	f01c fddd 	bl	801e1b8 <atan>
 80015fe:	eeb0 7b40 	vmov.f64	d7, d0
 8001602:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001606:	edc7 7a06 	vstr	s15, [r7, #24]

//	*ax_ang = (axan*180)/M_PI;
//	*ay_ang = (ayan*180)/M_PI;

	*ay_ang = (axan*180)/M_PI;//x = y poniewaz x gyro to y acc
 800160a:	edd7 7a07 	vldr	s15, [r7, #28]
 800160e:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8001660 <MPU6050_GET_ACCEL_TO_ANGLE+0x110>
 8001612:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001616:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800161a:	ed9f 5b0f 	vldr	d5, [pc, #60]	@ 8001658 <MPU6050_GET_ACCEL_TO_ANGLE+0x108>
 800161e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001622:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	edc3 7a00 	vstr	s15, [r3]
	*ax_ang = (ayan*180)/M_PI;
 800162c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001630:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8001660 <MPU6050_GET_ACCEL_TO_ANGLE+0x110>
 8001634:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001638:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800163c:	ed9f 5b06 	vldr	d5, [pc, #24]	@ 8001658 <MPU6050_GET_ACCEL_TO_ANGLE+0x108>
 8001640:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001644:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001648:	68bb      	ldr	r3, [r7, #8]
 800164a:	edc3 7a00 	vstr	s15, [r3]
}
 800164e:	bf00      	nop
 8001650:	3728      	adds	r7, #40	@ 0x28
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	54442d18 	.word	0x54442d18
 800165c:	400921fb 	.word	0x400921fb
 8001660:	43340000 	.word	0x43340000

08001664 <MPU6050_GET_ACCANDGYR_CALANDSCL>:
	*gy_ang = (gy/1000) + *gy_ang;
	*gz_ang = (gz/1000) + *gz_ang;
}

void MPU6050_GET_ACCANDGYR_CALANDSCL(float *ax, float*ay, float*az, float*gx, float*gy, float*gz, float accelx_cal,float accely_cal,
		float accelz_cal,float gyrox_cal,float gyroy_cal,float gyroz_cal, float Gyr_Scale, float Acc_Scale){
 8001664:	b580      	push	{r7, lr}
 8001666:	b094      	sub	sp, #80	@ 0x50
 8001668:	af04      	add	r7, sp, #16
 800166a:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800166c:	62b9      	str	r1, [r7, #40]	@ 0x28
 800166e:	627a      	str	r2, [r7, #36]	@ 0x24
 8001670:	623b      	str	r3, [r7, #32]
 8001672:	ed87 0a07 	vstr	s0, [r7, #28]
 8001676:	edc7 0a06 	vstr	s1, [r7, #24]
 800167a:	ed87 1a05 	vstr	s2, [r7, #20]
 800167e:	edc7 1a04 	vstr	s3, [r7, #16]
 8001682:	ed87 2a03 	vstr	s4, [r7, #12]
 8001686:	edc7 2a02 	vstr	s5, [r7, #8]
 800168a:	ed87 3a01 	vstr	s6, [r7, #4]
 800168e:	edc7 3a00 	vstr	s7, [r7]

	uint8_t pdata[14];
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_ACCEL_XOUT_H, 1, pdata, 14, 1); // szybesz o ~1ms
 8001692:	4b4e      	ldr	r3, [pc, #312]	@ (80017cc <MPU6050_GET_ACCANDGYR_CALANDSCL+0x168>)
 8001694:	6818      	ldr	r0, [r3, #0]
 8001696:	2301      	movs	r3, #1
 8001698:	9302      	str	r3, [sp, #8]
 800169a:	230e      	movs	r3, #14
 800169c:	9301      	str	r3, [sp, #4]
 800169e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80016a2:	9300      	str	r3, [sp, #0]
 80016a4:	2301      	movs	r3, #1
 80016a6:	223b      	movs	r2, #59	@ 0x3b
 80016a8:	21d0      	movs	r1, #208	@ 0xd0
 80016aa:	f00d fa87 	bl	800ebbc <HAL_I2C_Mem_Read>

	//HAL_I2C_Mem_Read_IT(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_ACCEL_XOUT_H, 1, pdata, 14);

	*ax = (((int16_t)(pdata[0]<<8) | pdata[1])/Acc_Scale) - accelx_cal;
 80016ae:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80016b2:	021b      	lsls	r3, r3, #8
 80016b4:	b21b      	sxth	r3, r3
 80016b6:	461a      	mov	r2, r3
 80016b8:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 80016bc:	4313      	orrs	r3, r2
 80016be:	ee07 3a90 	vmov	s15, r3
 80016c2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80016c6:	edd7 7a00 	vldr	s15, [r7]
 80016ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80016ce:	edd7 7a07 	vldr	s15, [r7, #28]
 80016d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80016d8:	edc3 7a00 	vstr	s15, [r3]
	*ay = (((int16_t)(pdata[2]<<8) | pdata[3])/Acc_Scale) - accely_cal;
 80016dc:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 80016e0:	021b      	lsls	r3, r3, #8
 80016e2:	b21b      	sxth	r3, r3
 80016e4:	461a      	mov	r2, r3
 80016e6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80016ea:	4313      	orrs	r3, r2
 80016ec:	ee07 3a90 	vmov	s15, r3
 80016f0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80016f4:	edd7 7a00 	vldr	s15, [r7]
 80016f8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80016fc:	edd7 7a06 	vldr	s15, [r7, #24]
 8001700:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001704:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001706:	edc3 7a00 	vstr	s15, [r3]
	*az = (((int16_t)(pdata[4]<<8) | pdata[5])/Acc_Scale) + accelz_cal;
 800170a:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800170e:	021b      	lsls	r3, r3, #8
 8001710:	b21b      	sxth	r3, r3
 8001712:	461a      	mov	r2, r3
 8001714:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8001718:	4313      	orrs	r3, r2
 800171a:	ee07 3a90 	vmov	s15, r3
 800171e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001722:	edd7 7a00 	vldr	s15, [r7]
 8001726:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800172a:	edd7 7a05 	vldr	s15, [r7, #20]
 800172e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001734:	edc3 7a00 	vstr	s15, [r3]

	*gx = (((int16_t)(pdata[8]<<8) | pdata[9])/Gyr_Scale) - gyrox_cal;
 8001738:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 800173c:	021b      	lsls	r3, r3, #8
 800173e:	b21b      	sxth	r3, r3
 8001740:	461a      	mov	r2, r3
 8001742:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8001746:	4313      	orrs	r3, r2
 8001748:	ee07 3a90 	vmov	s15, r3
 800174c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001750:	edd7 7a01 	vldr	s15, [r7, #4]
 8001754:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001758:	edd7 7a04 	vldr	s15, [r7, #16]
 800175c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001760:	6a3b      	ldr	r3, [r7, #32]
 8001762:	edc3 7a00 	vstr	s15, [r3]
	*gy = (((int16_t)(pdata[10]<<8) | pdata[11])/Gyr_Scale) - gyroy_cal;
 8001766:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 800176a:	021b      	lsls	r3, r3, #8
 800176c:	b21b      	sxth	r3, r3
 800176e:	461a      	mov	r2, r3
 8001770:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8001774:	4313      	orrs	r3, r2
 8001776:	ee07 3a90 	vmov	s15, r3
 800177a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800177e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001782:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001786:	edd7 7a03 	vldr	s15, [r7, #12]
 800178a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800178e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001790:	edc3 7a00 	vstr	s15, [r3]
	*gz = (((int16_t)(pdata[12]<<8) | pdata[13])/Gyr_Scale) - gyroz_cal;
 8001794:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8001798:	021b      	lsls	r3, r3, #8
 800179a:	b21b      	sxth	r3, r3
 800179c:	461a      	mov	r2, r3
 800179e:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 80017a2:	4313      	orrs	r3, r2
 80017a4:	ee07 3a90 	vmov	s15, r3
 80017a8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80017ac:	edd7 7a01 	vldr	s15, [r7, #4]
 80017b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80017b4:	edd7 7a02 	vldr	s15, [r7, #8]
 80017b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80017be:	edc3 7a00 	vstr	s15, [r3]
//	  *az = (MPU6050_GET_ACCEL_FULLVALUE_Z()/Acc_Scale) + accelz_cal;
//
//	  *gx = (MPU6050_GET_GYRO_FULLVALUE_X()/Gyr_Scale) - gyrox_cal;
//	  *gy = (MPU6050_GET_GYRO_FULLVALUE_Y()/Gyr_Scale) - gyroy_cal;
//	  *gz = (MPU6050_GET_GYRO_FULLVALUE_Z()/Gyr_Scale) - gyroz_cal;
}
 80017c2:	bf00      	nop
 80017c4:	3740      	adds	r7, #64	@ 0x40
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	240000a4 	.word	0x240000a4

080017d0 <MPU6050_GET_ACCANDGYR_CALANDSCL_IT>:

void MPU6050_GET_ACCANDGYR_CALANDSCL_IT(void){
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af02      	add	r7, sp, #8


	HAL_I2C_Mem_Read_IT(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_ACCEL_XOUT_H, 1, (uint8_t *)MPU6050_IT_DATA, 14);
 80017d6:	4b08      	ldr	r3, [pc, #32]	@ (80017f8 <MPU6050_GET_ACCANDGYR_CALANDSCL_IT+0x28>)
 80017d8:	6818      	ldr	r0, [r3, #0]
 80017da:	230e      	movs	r3, #14
 80017dc:	9301      	str	r3, [sp, #4]
 80017de:	4b07      	ldr	r3, [pc, #28]	@ (80017fc <MPU6050_GET_ACCANDGYR_CALANDSCL_IT+0x2c>)
 80017e0:	9300      	str	r3, [sp, #0]
 80017e2:	2301      	movs	r3, #1
 80017e4:	223b      	movs	r2, #59	@ 0x3b
 80017e6:	21d0      	movs	r1, #208	@ 0xd0
 80017e8:	f00d fb8c 	bl	800ef04 <HAL_I2C_Mem_Read_IT>
	MPU6050_IRQ = 1;
 80017ec:	4b04      	ldr	r3, [pc, #16]	@ (8001800 <MPU6050_GET_ACCANDGYR_CALANDSCL_IT+0x30>)
 80017ee:	2201      	movs	r2, #1
 80017f0:	701a      	strb	r2, [r3, #0]


}
 80017f2:	bf00      	nop
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	240000a4 	.word	0x240000a4
 80017fc:	00000048 	.word	0x00000048
 8001800:	000041f4 	.word	0x000041f4

08001804 <MPU6050_GET_CALANDSCL_IT>:

void MPU6050_GET_CALANDSCL_IT(float *ax, float*ay, float*az, float*gx, float*gy, float*gz, float accelx_cal,float accely_cal,float accelz_cal,float gyrox_cal,float gyroy_cal,float gyroz_cal, float Gyr_Scale, float Acc_Scale){
 8001804:	b480      	push	{r7}
 8001806:	b08d      	sub	sp, #52	@ 0x34
 8001808:	af00      	add	r7, sp, #0
 800180a:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800180c:	62b9      	str	r1, [r7, #40]	@ 0x28
 800180e:	627a      	str	r2, [r7, #36]	@ 0x24
 8001810:	623b      	str	r3, [r7, #32]
 8001812:	ed87 0a07 	vstr	s0, [r7, #28]
 8001816:	edc7 0a06 	vstr	s1, [r7, #24]
 800181a:	ed87 1a05 	vstr	s2, [r7, #20]
 800181e:	edc7 1a04 	vstr	s3, [r7, #16]
 8001822:	ed87 2a03 	vstr	s4, [r7, #12]
 8001826:	edc7 2a02 	vstr	s5, [r7, #8]
 800182a:	ed87 3a01 	vstr	s6, [r7, #4]
 800182e:	edc7 3a00 	vstr	s7, [r7]
	*ax = (((int16_t)(MPU6050_IT_DATA[0]<<8) | MPU6050_IT_DATA[1])/Acc_Scale) - accelx_cal;
 8001832:	4b48      	ldr	r3, [pc, #288]	@ (8001954 <MPU6050_GET_CALANDSCL_IT+0x150>)
 8001834:	781b      	ldrb	r3, [r3, #0]
 8001836:	021b      	lsls	r3, r3, #8
 8001838:	b21b      	sxth	r3, r3
 800183a:	461a      	mov	r2, r3
 800183c:	4b45      	ldr	r3, [pc, #276]	@ (8001954 <MPU6050_GET_CALANDSCL_IT+0x150>)
 800183e:	785b      	ldrb	r3, [r3, #1]
 8001840:	4313      	orrs	r3, r2
 8001842:	ee07 3a90 	vmov	s15, r3
 8001846:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800184a:	edd7 7a00 	vldr	s15, [r7]
 800184e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001852:	edd7 7a07 	vldr	s15, [r7, #28]
 8001856:	ee77 7a67 	vsub.f32	s15, s14, s15
 800185a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800185c:	edc3 7a00 	vstr	s15, [r3]
	*ay = (((int16_t)(MPU6050_IT_DATA[2]<<8) | MPU6050_IT_DATA[3])/Acc_Scale) - accely_cal;
 8001860:	4b3c      	ldr	r3, [pc, #240]	@ (8001954 <MPU6050_GET_CALANDSCL_IT+0x150>)
 8001862:	789b      	ldrb	r3, [r3, #2]
 8001864:	021b      	lsls	r3, r3, #8
 8001866:	b21b      	sxth	r3, r3
 8001868:	461a      	mov	r2, r3
 800186a:	4b3a      	ldr	r3, [pc, #232]	@ (8001954 <MPU6050_GET_CALANDSCL_IT+0x150>)
 800186c:	78db      	ldrb	r3, [r3, #3]
 800186e:	4313      	orrs	r3, r2
 8001870:	ee07 3a90 	vmov	s15, r3
 8001874:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001878:	edd7 7a00 	vldr	s15, [r7]
 800187c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001880:	edd7 7a06 	vldr	s15, [r7, #24]
 8001884:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001888:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800188a:	edc3 7a00 	vstr	s15, [r3]
	*az = (((int16_t)(MPU6050_IT_DATA[4]<<8) | MPU6050_IT_DATA[5])/Acc_Scale) + accelz_cal;
 800188e:	4b31      	ldr	r3, [pc, #196]	@ (8001954 <MPU6050_GET_CALANDSCL_IT+0x150>)
 8001890:	791b      	ldrb	r3, [r3, #4]
 8001892:	021b      	lsls	r3, r3, #8
 8001894:	b21b      	sxth	r3, r3
 8001896:	461a      	mov	r2, r3
 8001898:	4b2e      	ldr	r3, [pc, #184]	@ (8001954 <MPU6050_GET_CALANDSCL_IT+0x150>)
 800189a:	795b      	ldrb	r3, [r3, #5]
 800189c:	4313      	orrs	r3, r2
 800189e:	ee07 3a90 	vmov	s15, r3
 80018a2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80018a6:	edd7 7a00 	vldr	s15, [r7]
 80018aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80018ae:	edd7 7a05 	vldr	s15, [r7, #20]
 80018b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018b8:	edc3 7a00 	vstr	s15, [r3]

	*gx = (((int16_t)(MPU6050_IT_DATA[8]<<8) | MPU6050_IT_DATA[9])/Gyr_Scale) - gyrox_cal;
 80018bc:	4b25      	ldr	r3, [pc, #148]	@ (8001954 <MPU6050_GET_CALANDSCL_IT+0x150>)
 80018be:	7a1b      	ldrb	r3, [r3, #8]
 80018c0:	021b      	lsls	r3, r3, #8
 80018c2:	b21b      	sxth	r3, r3
 80018c4:	461a      	mov	r2, r3
 80018c6:	4b23      	ldr	r3, [pc, #140]	@ (8001954 <MPU6050_GET_CALANDSCL_IT+0x150>)
 80018c8:	7a5b      	ldrb	r3, [r3, #9]
 80018ca:	4313      	orrs	r3, r2
 80018cc:	ee07 3a90 	vmov	s15, r3
 80018d0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80018d4:	edd7 7a01 	vldr	s15, [r7, #4]
 80018d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80018dc:	edd7 7a04 	vldr	s15, [r7, #16]
 80018e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018e4:	6a3b      	ldr	r3, [r7, #32]
 80018e6:	edc3 7a00 	vstr	s15, [r3]
	*gy = (((int16_t)(MPU6050_IT_DATA[10]<<8) | MPU6050_IT_DATA[11])/Gyr_Scale) - gyroy_cal;
 80018ea:	4b1a      	ldr	r3, [pc, #104]	@ (8001954 <MPU6050_GET_CALANDSCL_IT+0x150>)
 80018ec:	7a9b      	ldrb	r3, [r3, #10]
 80018ee:	021b      	lsls	r3, r3, #8
 80018f0:	b21b      	sxth	r3, r3
 80018f2:	461a      	mov	r2, r3
 80018f4:	4b17      	ldr	r3, [pc, #92]	@ (8001954 <MPU6050_GET_CALANDSCL_IT+0x150>)
 80018f6:	7adb      	ldrb	r3, [r3, #11]
 80018f8:	4313      	orrs	r3, r2
 80018fa:	ee07 3a90 	vmov	s15, r3
 80018fe:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001902:	edd7 7a01 	vldr	s15, [r7, #4]
 8001906:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800190a:	edd7 7a03 	vldr	s15, [r7, #12]
 800190e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001912:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001914:	edc3 7a00 	vstr	s15, [r3]
	*gz = (((int16_t)(MPU6050_IT_DATA[12]<<8) | MPU6050_IT_DATA[13])/Gyr_Scale) - gyroz_cal;
 8001918:	4b0e      	ldr	r3, [pc, #56]	@ (8001954 <MPU6050_GET_CALANDSCL_IT+0x150>)
 800191a:	7b1b      	ldrb	r3, [r3, #12]
 800191c:	021b      	lsls	r3, r3, #8
 800191e:	b21b      	sxth	r3, r3
 8001920:	461a      	mov	r2, r3
 8001922:	4b0c      	ldr	r3, [pc, #48]	@ (8001954 <MPU6050_GET_CALANDSCL_IT+0x150>)
 8001924:	7b5b      	ldrb	r3, [r3, #13]
 8001926:	4313      	orrs	r3, r2
 8001928:	ee07 3a90 	vmov	s15, r3
 800192c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001930:	edd7 7a01 	vldr	s15, [r7, #4]
 8001934:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001938:	edd7 7a02 	vldr	s15, [r7, #8]
 800193c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001940:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001942:	edc3 7a00 	vstr	s15, [r3]
}
 8001946:	bf00      	nop
 8001948:	3734      	adds	r7, #52	@ 0x34
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr
 8001952:	bf00      	nop
 8001954:	00000048 	.word	0x00000048

08001958 <MPU6050_GET_ACCANDGYR_FILTRED>:

void MPU6050_GET_ACCANDGYR_FILTRED(Complementary_Filter *Complementary_Filter_st, float ax_ang, float ay_ang, float megz_ang, float gx_ang,
		float gy_ang, float gz_ang){
 8001958:	b580      	push	{r7, lr}
 800195a:	b088      	sub	sp, #32
 800195c:	af00      	add	r7, sp, #0
 800195e:	61f8      	str	r0, [r7, #28]
 8001960:	ed87 0a06 	vstr	s0, [r7, #24]
 8001964:	edc7 0a05 	vstr	s1, [r7, #20]
 8001968:	ed87 1a04 	vstr	s2, [r7, #16]
 800196c:	edc7 1a03 	vstr	s3, [r7, #12]
 8001970:	ed87 2a02 	vstr	s4, [r7, #8]
 8001974:	edc7 2a01 	vstr	s5, [r7, #4]
	Complementary_getFilter(Complementary_Filter_st, ax_ang, ay_ang, megz_ang, gx_ang, gy_ang, gz_ang);
 8001978:	edd7 2a01 	vldr	s5, [r7, #4]
 800197c:	ed97 2a02 	vldr	s4, [r7, #8]
 8001980:	edd7 1a03 	vldr	s3, [r7, #12]
 8001984:	ed97 1a04 	vldr	s2, [r7, #16]
 8001988:	edd7 0a05 	vldr	s1, [r7, #20]
 800198c:	ed97 0a06 	vldr	s0, [r7, #24]
 8001990:	69f8      	ldr	r0, [r7, #28]
 8001992:	f000 f9a9 	bl	8001ce8 <Complementary_getFilter>
	//W_Filter(Complementary_Filter_st);
}
 8001996:	bf00      	nop
 8001998:	3720      	adds	r7, #32
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
	...

080019a0 <MPU6050_GET_ACCEL_YH>:
uint8_t MPU6050_GET_ACCEL_XL(void){
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_ACCEL_XOUT_L, 1, &data, 1, 1);
	return data;
}
uint8_t MPU6050_GET_ACCEL_YH(void){
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b086      	sub	sp, #24
 80019a4:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_ACCEL_YOUT_H, 1, &data, 1, 1);
 80019a6:	4b09      	ldr	r3, [pc, #36]	@ (80019cc <MPU6050_GET_ACCEL_YH+0x2c>)
 80019a8:	6818      	ldr	r0, [r3, #0]
 80019aa:	2301      	movs	r3, #1
 80019ac:	9302      	str	r3, [sp, #8]
 80019ae:	2301      	movs	r3, #1
 80019b0:	9301      	str	r3, [sp, #4]
 80019b2:	1dfb      	adds	r3, r7, #7
 80019b4:	9300      	str	r3, [sp, #0]
 80019b6:	2301      	movs	r3, #1
 80019b8:	223d      	movs	r2, #61	@ 0x3d
 80019ba:	21d0      	movs	r1, #208	@ 0xd0
 80019bc:	f00d f8fe 	bl	800ebbc <HAL_I2C_Mem_Read>
	return data;
 80019c0:	79fb      	ldrb	r3, [r7, #7]
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	3708      	adds	r7, #8
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	240000a4 	.word	0x240000a4

080019d0 <MPU6050_GET_ACCEL_YL>:
uint8_t MPU6050_GET_ACCEL_YL(void){
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b086      	sub	sp, #24
 80019d4:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_ACCEL_YOUT_L, 1, &data, 1, 1);
 80019d6:	4b09      	ldr	r3, [pc, #36]	@ (80019fc <MPU6050_GET_ACCEL_YL+0x2c>)
 80019d8:	6818      	ldr	r0, [r3, #0]
 80019da:	2301      	movs	r3, #1
 80019dc:	9302      	str	r3, [sp, #8]
 80019de:	2301      	movs	r3, #1
 80019e0:	9301      	str	r3, [sp, #4]
 80019e2:	1dfb      	adds	r3, r7, #7
 80019e4:	9300      	str	r3, [sp, #0]
 80019e6:	2301      	movs	r3, #1
 80019e8:	223e      	movs	r2, #62	@ 0x3e
 80019ea:	21d0      	movs	r1, #208	@ 0xd0
 80019ec:	f00d f8e6 	bl	800ebbc <HAL_I2C_Mem_Read>
	return data;
 80019f0:	79fb      	ldrb	r3, [r7, #7]
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	3708      	adds	r7, #8
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	240000a4 	.word	0x240000a4

08001a00 <MPU6050_GET_ACCEL_ZH>:
uint8_t MPU6050_GET_ACCEL_ZH(void){
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b086      	sub	sp, #24
 8001a04:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_ACCEL_ZOUT_H, 1, &data, 1, 1);
 8001a06:	4b09      	ldr	r3, [pc, #36]	@ (8001a2c <MPU6050_GET_ACCEL_ZH+0x2c>)
 8001a08:	6818      	ldr	r0, [r3, #0]
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	9302      	str	r3, [sp, #8]
 8001a0e:	2301      	movs	r3, #1
 8001a10:	9301      	str	r3, [sp, #4]
 8001a12:	1dfb      	adds	r3, r7, #7
 8001a14:	9300      	str	r3, [sp, #0]
 8001a16:	2301      	movs	r3, #1
 8001a18:	223f      	movs	r2, #63	@ 0x3f
 8001a1a:	21d0      	movs	r1, #208	@ 0xd0
 8001a1c:	f00d f8ce 	bl	800ebbc <HAL_I2C_Mem_Read>
	return data;
 8001a20:	79fb      	ldrb	r3, [r7, #7]
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	3708      	adds	r7, #8
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	240000a4 	.word	0x240000a4

08001a30 <MPU6050_GET_ACCEL_ZL>:
uint8_t MPU6050_GET_ACCEL_ZL(void){
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b086      	sub	sp, #24
 8001a34:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_ACCEL_ZOUT_L, 1, &data, 1, 1);
 8001a36:	4b09      	ldr	r3, [pc, #36]	@ (8001a5c <MPU6050_GET_ACCEL_ZL+0x2c>)
 8001a38:	6818      	ldr	r0, [r3, #0]
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	9302      	str	r3, [sp, #8]
 8001a3e:	2301      	movs	r3, #1
 8001a40:	9301      	str	r3, [sp, #4]
 8001a42:	1dfb      	adds	r3, r7, #7
 8001a44:	9300      	str	r3, [sp, #0]
 8001a46:	2301      	movs	r3, #1
 8001a48:	2240      	movs	r2, #64	@ 0x40
 8001a4a:	21d0      	movs	r1, #208	@ 0xd0
 8001a4c:	f00d f8b6 	bl	800ebbc <HAL_I2C_Mem_Read>
	return data;
 8001a50:	79fb      	ldrb	r3, [r7, #7]
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3708      	adds	r7, #8
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	240000a4 	.word	0x240000a4

08001a60 <MPU6050_GET_GYRO_XH>:

uint8_t MPU6050_GET_GYRO_XH(void){
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b086      	sub	sp, #24
 8001a64:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_GYRO_XOUT_H, 1, &data, 1, 1);
 8001a66:	4b09      	ldr	r3, [pc, #36]	@ (8001a8c <MPU6050_GET_GYRO_XH+0x2c>)
 8001a68:	6818      	ldr	r0, [r3, #0]
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	9302      	str	r3, [sp, #8]
 8001a6e:	2301      	movs	r3, #1
 8001a70:	9301      	str	r3, [sp, #4]
 8001a72:	1dfb      	adds	r3, r7, #7
 8001a74:	9300      	str	r3, [sp, #0]
 8001a76:	2301      	movs	r3, #1
 8001a78:	2243      	movs	r2, #67	@ 0x43
 8001a7a:	21d0      	movs	r1, #208	@ 0xd0
 8001a7c:	f00d f89e 	bl	800ebbc <HAL_I2C_Mem_Read>
	return data;
 8001a80:	79fb      	ldrb	r3, [r7, #7]
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	3708      	adds	r7, #8
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	240000a4 	.word	0x240000a4

08001a90 <MPU6050_GET_GYRO_XL>:
uint8_t MPU6050_GET_GYRO_XL(void){
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b086      	sub	sp, #24
 8001a94:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_GYRO_XOUT_L, 1, &data, 1, 1);
 8001a96:	4b09      	ldr	r3, [pc, #36]	@ (8001abc <MPU6050_GET_GYRO_XL+0x2c>)
 8001a98:	6818      	ldr	r0, [r3, #0]
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	9302      	str	r3, [sp, #8]
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	9301      	str	r3, [sp, #4]
 8001aa2:	1dfb      	adds	r3, r7, #7
 8001aa4:	9300      	str	r3, [sp, #0]
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	2244      	movs	r2, #68	@ 0x44
 8001aaa:	21d0      	movs	r1, #208	@ 0xd0
 8001aac:	f00d f886 	bl	800ebbc <HAL_I2C_Mem_Read>
	return data;
 8001ab0:	79fb      	ldrb	r3, [r7, #7]
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	3708      	adds	r7, #8
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	240000a4 	.word	0x240000a4

08001ac0 <MPU6050_GET_GYRO_YH>:
uint8_t MPU6050_GET_GYRO_YH(void){
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b086      	sub	sp, #24
 8001ac4:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_GYRO_YOUT_H, 1, &data, 1, 1);
 8001ac6:	4b09      	ldr	r3, [pc, #36]	@ (8001aec <MPU6050_GET_GYRO_YH+0x2c>)
 8001ac8:	6818      	ldr	r0, [r3, #0]
 8001aca:	2301      	movs	r3, #1
 8001acc:	9302      	str	r3, [sp, #8]
 8001ace:	2301      	movs	r3, #1
 8001ad0:	9301      	str	r3, [sp, #4]
 8001ad2:	1dfb      	adds	r3, r7, #7
 8001ad4:	9300      	str	r3, [sp, #0]
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	2245      	movs	r2, #69	@ 0x45
 8001ada:	21d0      	movs	r1, #208	@ 0xd0
 8001adc:	f00d f86e 	bl	800ebbc <HAL_I2C_Mem_Read>
	return data;
 8001ae0:	79fb      	ldrb	r3, [r7, #7]
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	3708      	adds	r7, #8
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	240000a4 	.word	0x240000a4

08001af0 <MPU6050_GET_GYRO_YL>:
uint8_t MPU6050_GET_GYRO_YL(void){
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b086      	sub	sp, #24
 8001af4:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_GYRO_YOUT_L, 1, &data, 1, 1);
 8001af6:	4b09      	ldr	r3, [pc, #36]	@ (8001b1c <MPU6050_GET_GYRO_YL+0x2c>)
 8001af8:	6818      	ldr	r0, [r3, #0]
 8001afa:	2301      	movs	r3, #1
 8001afc:	9302      	str	r3, [sp, #8]
 8001afe:	2301      	movs	r3, #1
 8001b00:	9301      	str	r3, [sp, #4]
 8001b02:	1dfb      	adds	r3, r7, #7
 8001b04:	9300      	str	r3, [sp, #0]
 8001b06:	2301      	movs	r3, #1
 8001b08:	2246      	movs	r2, #70	@ 0x46
 8001b0a:	21d0      	movs	r1, #208	@ 0xd0
 8001b0c:	f00d f856 	bl	800ebbc <HAL_I2C_Mem_Read>
	return data;
 8001b10:	79fb      	ldrb	r3, [r7, #7]
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	3708      	adds	r7, #8
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	240000a4 	.word	0x240000a4

08001b20 <MPU6050_GET_GYRO_ZH>:
uint8_t MPU6050_GET_GYRO_ZH(void){
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b086      	sub	sp, #24
 8001b24:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_GYRO_ZOUT_H, 1, &data, 1, 1);
 8001b26:	4b09      	ldr	r3, [pc, #36]	@ (8001b4c <MPU6050_GET_GYRO_ZH+0x2c>)
 8001b28:	6818      	ldr	r0, [r3, #0]
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	9302      	str	r3, [sp, #8]
 8001b2e:	2301      	movs	r3, #1
 8001b30:	9301      	str	r3, [sp, #4]
 8001b32:	1dfb      	adds	r3, r7, #7
 8001b34:	9300      	str	r3, [sp, #0]
 8001b36:	2301      	movs	r3, #1
 8001b38:	2247      	movs	r2, #71	@ 0x47
 8001b3a:	21d0      	movs	r1, #208	@ 0xd0
 8001b3c:	f00d f83e 	bl	800ebbc <HAL_I2C_Mem_Read>
	return data;
 8001b40:	79fb      	ldrb	r3, [r7, #7]
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	3708      	adds	r7, #8
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	240000a4 	.word	0x240000a4

08001b50 <MPU6050_GET_GYRO_ZL>:
uint8_t MPU6050_GET_GYRO_ZL(void){
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b086      	sub	sp, #24
 8001b54:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_GYRO_ZOUT_L, 1, &data, 1, 1);
 8001b56:	4b09      	ldr	r3, [pc, #36]	@ (8001b7c <MPU6050_GET_GYRO_ZL+0x2c>)
 8001b58:	6818      	ldr	r0, [r3, #0]
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	9302      	str	r3, [sp, #8]
 8001b5e:	2301      	movs	r3, #1
 8001b60:	9301      	str	r3, [sp, #4]
 8001b62:	1dfb      	adds	r3, r7, #7
 8001b64:	9300      	str	r3, [sp, #0]
 8001b66:	2301      	movs	r3, #1
 8001b68:	2248      	movs	r2, #72	@ 0x48
 8001b6a:	21d0      	movs	r1, #208	@ 0xd0
 8001b6c:	f00d f826 	bl	800ebbc <HAL_I2C_Mem_Read>
	return data;
 8001b70:	79fb      	ldrb	r3, [r7, #7]
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	3708      	adds	r7, #8
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	240000a4 	.word	0x240000a4

08001b80 <MPU6050_GET_ACCEL_FULLVALUE_X>:
int16_t MPU6050_GET_ACCEL_FULLVALUE_X(void){
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b086      	sub	sp, #24
 8001b84:	af04      	add	r7, sp, #16
	int16_t data;
	uint8_t pdata[2];

	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_ACCEL_XOUT_H, 1, pdata, 2, 1);
 8001b86:	4b0d      	ldr	r3, [pc, #52]	@ (8001bbc <MPU6050_GET_ACCEL_FULLVALUE_X+0x3c>)
 8001b88:	6818      	ldr	r0, [r3, #0]
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	9302      	str	r3, [sp, #8]
 8001b8e:	2302      	movs	r3, #2
 8001b90:	9301      	str	r3, [sp, #4]
 8001b92:	1d3b      	adds	r3, r7, #4
 8001b94:	9300      	str	r3, [sp, #0]
 8001b96:	2301      	movs	r3, #1
 8001b98:	223b      	movs	r2, #59	@ 0x3b
 8001b9a:	21d0      	movs	r1, #208	@ 0xd0
 8001b9c:	f00d f80e 	bl	800ebbc <HAL_I2C_Mem_Read>

	data = (pdata[0]<<8)|pdata[1];
 8001ba0:	793b      	ldrb	r3, [r7, #4]
 8001ba2:	021b      	lsls	r3, r3, #8
 8001ba4:	b21a      	sxth	r2, r3
 8001ba6:	797b      	ldrb	r3, [r7, #5]
 8001ba8:	b21b      	sxth	r3, r3
 8001baa:	4313      	orrs	r3, r2
 8001bac:	80fb      	strh	r3, [r7, #6]
	return data;
 8001bae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	3708      	adds	r7, #8
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	240000a4 	.word	0x240000a4

08001bc0 <MPU6050_GET_ACCEL_FULLVALUE_Y>:

int16_t MPU6050_GET_ACCEL_FULLVALUE_Y(void){
 8001bc0:	b590      	push	{r4, r7, lr}
 8001bc2:	b083      	sub	sp, #12
 8001bc4:	af00      	add	r7, sp, #0
	int16_t data;
	data = (MPU6050_GET_ACCEL_YH()<<8)|MPU6050_GET_ACCEL_YL();
 8001bc6:	f7ff feeb 	bl	80019a0 <MPU6050_GET_ACCEL_YH>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	021b      	lsls	r3, r3, #8
 8001bce:	b21c      	sxth	r4, r3
 8001bd0:	f7ff fefe 	bl	80019d0 <MPU6050_GET_ACCEL_YL>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	b21b      	sxth	r3, r3
 8001bd8:	4323      	orrs	r3, r4
 8001bda:	80fb      	strh	r3, [r7, #6]
	return data;
 8001bdc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	370c      	adds	r7, #12
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd90      	pop	{r4, r7, pc}

08001be8 <MPU6050_GET_ACCEL_FULLVALUE_Z>:
int16_t MPU6050_GET_ACCEL_FULLVALUE_Z(void){
 8001be8:	b590      	push	{r4, r7, lr}
 8001bea:	b083      	sub	sp, #12
 8001bec:	af00      	add	r7, sp, #0
	int16_t data;
	data = (MPU6050_GET_ACCEL_ZH()<<8)|MPU6050_GET_ACCEL_ZL();
 8001bee:	f7ff ff07 	bl	8001a00 <MPU6050_GET_ACCEL_ZH>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	021b      	lsls	r3, r3, #8
 8001bf6:	b21c      	sxth	r4, r3
 8001bf8:	f7ff ff1a 	bl	8001a30 <MPU6050_GET_ACCEL_ZL>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	b21b      	sxth	r3, r3
 8001c00:	4323      	orrs	r3, r4
 8001c02:	80fb      	strh	r3, [r7, #6]
	return data;
 8001c04:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	370c      	adds	r7, #12
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd90      	pop	{r4, r7, pc}

08001c10 <MPU6050_GET_GYRO_FULLVALUE_X>:

int16_t MPU6050_GET_GYRO_FULLVALUE_X(void){
 8001c10:	b590      	push	{r4, r7, lr}
 8001c12:	b083      	sub	sp, #12
 8001c14:	af00      	add	r7, sp, #0
	int16_t data;
	data = (MPU6050_GET_GYRO_XH()<<8)|MPU6050_GET_GYRO_XL();
 8001c16:	f7ff ff23 	bl	8001a60 <MPU6050_GET_GYRO_XH>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	021b      	lsls	r3, r3, #8
 8001c1e:	b21c      	sxth	r4, r3
 8001c20:	f7ff ff36 	bl	8001a90 <MPU6050_GET_GYRO_XL>
 8001c24:	4603      	mov	r3, r0
 8001c26:	b21b      	sxth	r3, r3
 8001c28:	4323      	orrs	r3, r4
 8001c2a:	80fb      	strh	r3, [r7, #6]
	return data;
 8001c2c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	370c      	adds	r7, #12
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd90      	pop	{r4, r7, pc}

08001c38 <MPU6050_GET_GYRO_FULLVALUE_Y>:
int16_t MPU6050_GET_GYRO_FULLVALUE_Y(void){
 8001c38:	b590      	push	{r4, r7, lr}
 8001c3a:	b083      	sub	sp, #12
 8001c3c:	af00      	add	r7, sp, #0
	int16_t data;
	data = (MPU6050_GET_GYRO_YH()<<8)|MPU6050_GET_GYRO_YL();
 8001c3e:	f7ff ff3f 	bl	8001ac0 <MPU6050_GET_GYRO_YH>
 8001c42:	4603      	mov	r3, r0
 8001c44:	021b      	lsls	r3, r3, #8
 8001c46:	b21c      	sxth	r4, r3
 8001c48:	f7ff ff52 	bl	8001af0 <MPU6050_GET_GYRO_YL>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	b21b      	sxth	r3, r3
 8001c50:	4323      	orrs	r3, r4
 8001c52:	80fb      	strh	r3, [r7, #6]
	return data;
 8001c54:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	370c      	adds	r7, #12
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd90      	pop	{r4, r7, pc}

08001c60 <MPU6050_GET_GYRO_FULLVALUE_Z>:
int16_t MPU6050_GET_GYRO_FULLVALUE_Z(void){
 8001c60:	b590      	push	{r4, r7, lr}
 8001c62:	b083      	sub	sp, #12
 8001c64:	af00      	add	r7, sp, #0
	int16_t data;
	data = (MPU6050_GET_GYRO_ZH()<<8)|MPU6050_GET_GYRO_ZL();
 8001c66:	f7ff ff5b 	bl	8001b20 <MPU6050_GET_GYRO_ZH>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	021b      	lsls	r3, r3, #8
 8001c6e:	b21c      	sxth	r4, r3
 8001c70:	f7ff ff6e 	bl	8001b50 <MPU6050_GET_GYRO_ZL>
 8001c74:	4603      	mov	r3, r0
 8001c76:	b21b      	sxth	r3, r3
 8001c78:	4323      	orrs	r3, r4
 8001c7a:	80fb      	strh	r3, [r7, #6]
	return data;
 8001c7c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	370c      	adds	r7, #12
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd90      	pop	{r4, r7, pc}

08001c88 <MPU6050_READ_ID>:

int8_t MPU6050_READ_ID(void){
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b086      	sub	sp, #24
 8001c8c:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_WHO_AM_I, 1, &data, 1, 1);
 8001c8e:	4b09      	ldr	r3, [pc, #36]	@ (8001cb4 <MPU6050_READ_ID+0x2c>)
 8001c90:	6818      	ldr	r0, [r3, #0]
 8001c92:	2301      	movs	r3, #1
 8001c94:	9302      	str	r3, [sp, #8]
 8001c96:	2301      	movs	r3, #1
 8001c98:	9301      	str	r3, [sp, #4]
 8001c9a:	1dfb      	adds	r3, r7, #7
 8001c9c:	9300      	str	r3, [sp, #0]
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	2275      	movs	r2, #117	@ 0x75
 8001ca2:	21d0      	movs	r1, #208	@ 0xd0
 8001ca4:	f00c ff8a 	bl	800ebbc <HAL_I2C_Mem_Read>
	return data;
 8001ca8:	79fb      	ldrb	r3, [r7, #7]
 8001caa:	b25b      	sxtb	r3, r3
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	3708      	adds	r7, #8
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	240000a4 	.word	0x240000a4

08001cb8 <MPU6050_Enable_I2C_Bypass>:
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_USER_CTRL, 1, &data, 1, 1);
	return data;
}


void MPU6050_Enable_I2C_Bypass(void){
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b086      	sub	sp, #24
 8001cbc:	af04      	add	r7, sp, #16
	uint8_t data = 0x02;
 8001cbe:	2302      	movs	r3, #2
 8001cc0:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_INT_PIN_CFG, 1, &data, 1, 1);
 8001cc2:	4b08      	ldr	r3, [pc, #32]	@ (8001ce4 <MPU6050_Enable_I2C_Bypass+0x2c>)
 8001cc4:	6818      	ldr	r0, [r3, #0]
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	9302      	str	r3, [sp, #8]
 8001cca:	2301      	movs	r3, #1
 8001ccc:	9301      	str	r3, [sp, #4]
 8001cce:	1dfb      	adds	r3, r7, #7
 8001cd0:	9300      	str	r3, [sp, #0]
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	2237      	movs	r2, #55	@ 0x37
 8001cd6:	21d0      	movs	r1, #208	@ 0xd0
 8001cd8:	f00c fe5c 	bl	800e994 <HAL_I2C_Mem_Write>
}
 8001cdc:	bf00      	nop
 8001cde:	3708      	adds	r7, #8
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	240000a4 	.word	0x240000a4

08001ce8 <Complementary_getFilter>:

    return Kalman->angle;
};


void Complementary_getFilter(Complementary_Filter *Complementary_Filter_st,float ax_ang, float ay_ang, float magz_ang, float gx_ang, float gy_ang, float gz_ang){
 8001ce8:	b480      	push	{r7}
 8001cea:	b089      	sub	sp, #36	@ 0x24
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	61f8      	str	r0, [r7, #28]
 8001cf0:	ed87 0a06 	vstr	s0, [r7, #24]
 8001cf4:	edc7 0a05 	vstr	s1, [r7, #20]
 8001cf8:	ed87 1a04 	vstr	s2, [r7, #16]
 8001cfc:	edc7 1a03 	vstr	s3, [r7, #12]
 8001d00:	ed87 2a02 	vstr	s4, [r7, #8]
 8001d04:	edc7 2a01 	vstr	s5, [r7, #4]

		Complementary_Filter_st->x = (0.02*ax_ang)+(0.98*((gx_ang*looptime)+Complementary_Filter_st->ox));//
 8001d08:	edd7 7a06 	vldr	s15, [r7, #24]
 8001d0c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001d10:	ed9f 6b2f 	vldr	d6, [pc, #188]	@ 8001dd0 <Complementary_getFilter+0xe8>
 8001d14:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001d18:	4b31      	ldr	r3, [pc, #196]	@ (8001de0 <Complementary_getFilter+0xf8>)
 8001d1a:	ed93 7a00 	vldr	s14, [r3]
 8001d1e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d22:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d26:	69fb      	ldr	r3, [r7, #28]
 8001d28:	edd3 7a03 	vldr	s15, [r3, #12]
 8001d2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d30:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001d34:	ed9f 5b28 	vldr	d5, [pc, #160]	@ 8001dd8 <Complementary_getFilter+0xf0>
 8001d38:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001d3c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001d40:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001d44:	69fb      	ldr	r3, [r7, #28]
 8001d46:	edc3 7a00 	vstr	s15, [r3]
		Complementary_Filter_st->y = (0.02*ay_ang)+(0.98*((gy_ang*looptime)+Complementary_Filter_st->oy));
 8001d4a:	edd7 7a05 	vldr	s15, [r7, #20]
 8001d4e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001d52:	ed9f 6b1f 	vldr	d6, [pc, #124]	@ 8001dd0 <Complementary_getFilter+0xe8>
 8001d56:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001d5a:	4b21      	ldr	r3, [pc, #132]	@ (8001de0 <Complementary_getFilter+0xf8>)
 8001d5c:	ed93 7a00 	vldr	s14, [r3]
 8001d60:	edd7 7a02 	vldr	s15, [r7, #8]
 8001d64:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d68:	69fb      	ldr	r3, [r7, #28]
 8001d6a:	edd3 7a04 	vldr	s15, [r3, #16]
 8001d6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d72:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001d76:	ed9f 5b18 	vldr	d5, [pc, #96]	@ 8001dd8 <Complementary_getFilter+0xf0>
 8001d7a:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001d7e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001d82:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001d86:	69fb      	ldr	r3, [r7, #28]
 8001d88:	edc3 7a01 	vstr	s15, [r3, #4]
		Complementary_Filter_st->z = (1*((gz_ang*looptime)+Complementary_Filter_st->oz));
 8001d8c:	4b14      	ldr	r3, [pc, #80]	@ (8001de0 <Complementary_getFilter+0xf8>)
 8001d8e:	ed93 7a00 	vldr	s14, [r3]
 8001d92:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d96:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d9a:	69fb      	ldr	r3, [r7, #28]
 8001d9c:	edd3 7a05 	vldr	s15, [r3, #20]
 8001da0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001da4:	69fb      	ldr	r3, [r7, #28]
 8001da6:	edc3 7a02 	vstr	s15, [r3, #8]

		Complementary_Filter_st->ox = Complementary_Filter_st->x;
 8001daa:	69fb      	ldr	r3, [r7, #28]
 8001dac:	681a      	ldr	r2, [r3, #0]
 8001dae:	69fb      	ldr	r3, [r7, #28]
 8001db0:	60da      	str	r2, [r3, #12]
		Complementary_Filter_st->oy = Complementary_Filter_st->y;
 8001db2:	69fb      	ldr	r3, [r7, #28]
 8001db4:	685a      	ldr	r2, [r3, #4]
 8001db6:	69fb      	ldr	r3, [r7, #28]
 8001db8:	611a      	str	r2, [r3, #16]
		Complementary_Filter_st->oz = Complementary_Filter_st->z;
 8001dba:	69fb      	ldr	r3, [r7, #28]
 8001dbc:	689a      	ldr	r2, [r3, #8]
 8001dbe:	69fb      	ldr	r3, [r7, #28]
 8001dc0:	615a      	str	r2, [r3, #20]
//
//	for(int i = 1; i < 15; i++){
//		OldZs[i] = OldZs[i-1];
//	}
//	OldZs[0] = Complementary_Filter_st->oz;
}
 8001dc2:	bf00      	nop
 8001dc4:	3724      	adds	r7, #36	@ 0x24
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr
 8001dce:	bf00      	nop
 8001dd0:	47ae147b 	.word	0x47ae147b
 8001dd4:	3f947ae1 	.word	0x3f947ae1
 8001dd8:	f5c28f5c 	.word	0xf5c28f5c
 8001ddc:	3fef5c28 	.word	0x3fef5c28
 8001de0:	0801ea44 	.word	0x0801ea44

08001de4 <nRF24_Delay>:

#define NRF24_CE_HIGH		HAL_GPIO_WritePin(NRF24_CE_GPIO_Port, NRF24_CE_Pin, GPIO_PIN_SET)
#define NRF24_CE_LOW		HAL_GPIO_WritePin(NRF24_CE_GPIO_Port, NRF24_CE_Pin, GPIO_PIN_RESET)

static void nRF24_Delay(uint8_t Time)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b082      	sub	sp, #8
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	4603      	mov	r3, r0
 8001dec:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(1);
 8001dee:	2001      	movs	r0, #1
 8001df0:	f007 fbc4 	bl	800957c <HAL_Delay>
}
 8001df4:	bf00      	nop
 8001df6:	3708      	adds	r7, #8
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}

08001dfc <nRF24_SendSpi>:

static void nRF24_SendSpi(uint8_t *Data, uint8_t Length)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b082      	sub	sp, #8
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
 8001e04:	460b      	mov	r3, r1
 8001e06:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Transmit(hspi_nrf, Data, Length, 1000);
 8001e08:	4b06      	ldr	r3, [pc, #24]	@ (8001e24 <nRF24_SendSpi+0x28>)
 8001e0a:	6818      	ldr	r0, [r3, #0]
 8001e0c:	78fb      	ldrb	r3, [r7, #3]
 8001e0e:	b29a      	uxth	r2, r3
 8001e10:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e14:	6879      	ldr	r1, [r7, #4]
 8001e16:	f012 fe49 	bl	8014aac <HAL_SPI_Transmit>
}
 8001e1a:	bf00      	nop
 8001e1c:	3708      	adds	r7, #8
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	240000a8 	.word	0x240000a8

08001e28 <nRF24_ReadSpi>:

static void nRF24_ReadSpi(uint8_t *Data, uint8_t Length)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b082      	sub	sp, #8
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
 8001e30:	460b      	mov	r3, r1
 8001e32:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Receive(hspi_nrf, Data, Length, 1000);
 8001e34:	4b06      	ldr	r3, [pc, #24]	@ (8001e50 <nRF24_ReadSpi+0x28>)
 8001e36:	6818      	ldr	r0, [r3, #0]
 8001e38:	78fb      	ldrb	r3, [r7, #3]
 8001e3a:	b29a      	uxth	r2, r3
 8001e3c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e40:	6879      	ldr	r1, [r7, #4]
 8001e42:	f013 f821 	bl	8014e88 <HAL_SPI_Receive>
}
 8001e46:	bf00      	nop
 8001e48:	3708      	adds	r7, #8
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	240000a8 	.word	0x240000a8

08001e54 <nRF24_ReadRegister>:
//
// END OF BASIC READ/WRITE FUNCTIONS
//

static uint8_t nRF24_ReadRegister(uint8_t reg)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b084      	sub	sp, #16
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	71fb      	strb	r3, [r7, #7]
	uint8_t result;

	reg = NRF24_CMD_R_REGISTER | reg;
 8001e5e:	79fb      	ldrb	r3, [r7, #7]
 8001e60:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 8001e62:	2200      	movs	r2, #0
 8001e64:	2180      	movs	r1, #128	@ 0x80
 8001e66:	480c      	ldr	r0, [pc, #48]	@ (8001e98 <nRF24_ReadRegister+0x44>)
 8001e68:	f00c fcc4 	bl	800e7f4 <HAL_GPIO_WritePin>
	nRF24_SendSpi(&reg, 1);
 8001e6c:	1dfb      	adds	r3, r7, #7
 8001e6e:	2101      	movs	r1, #1
 8001e70:	4618      	mov	r0, r3
 8001e72:	f7ff ffc3 	bl	8001dfc <nRF24_SendSpi>
	nRF24_ReadSpi(&result, 1);
 8001e76:	f107 030f 	add.w	r3, r7, #15
 8001e7a:	2101      	movs	r1, #1
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f7ff ffd3 	bl	8001e28 <nRF24_ReadSpi>
	NRF24_CSN_HIGH;
 8001e82:	2201      	movs	r2, #1
 8001e84:	2180      	movs	r1, #128	@ 0x80
 8001e86:	4804      	ldr	r0, [pc, #16]	@ (8001e98 <nRF24_ReadRegister+0x44>)
 8001e88:	f00c fcb4 	bl	800e7f4 <HAL_GPIO_WritePin>

	return result;
 8001e8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3710      	adds	r7, #16
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	58020400 	.word	0x58020400

08001e9c <nRF24_ReadRegisters>:

static void nRF24_ReadRegisters(uint8_t reg, uint8_t* ret, uint8_t len)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b082      	sub	sp, #8
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	6039      	str	r1, [r7, #0]
 8001ea6:	71fb      	strb	r3, [r7, #7]
 8001ea8:	4613      	mov	r3, r2
 8001eaa:	71bb      	strb	r3, [r7, #6]
	reg = NRF24_CMD_R_REGISTER | reg;
 8001eac:	79fb      	ldrb	r3, [r7, #7]
 8001eae:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	2180      	movs	r1, #128	@ 0x80
 8001eb4:	480a      	ldr	r0, [pc, #40]	@ (8001ee0 <nRF24_ReadRegisters+0x44>)
 8001eb6:	f00c fc9d 	bl	800e7f4 <HAL_GPIO_WritePin>

	nRF24_SendSpi(&reg, 1);
 8001eba:	1dfb      	adds	r3, r7, #7
 8001ebc:	2101      	movs	r1, #1
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f7ff ff9c 	bl	8001dfc <nRF24_SendSpi>
	nRF24_ReadSpi(ret, len);
 8001ec4:	79bb      	ldrb	r3, [r7, #6]
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	6838      	ldr	r0, [r7, #0]
 8001eca:	f7ff ffad 	bl	8001e28 <nRF24_ReadSpi>

	NRF24_CSN_HIGH;
 8001ece:	2201      	movs	r2, #1
 8001ed0:	2180      	movs	r1, #128	@ 0x80
 8001ed2:	4803      	ldr	r0, [pc, #12]	@ (8001ee0 <nRF24_ReadRegisters+0x44>)
 8001ed4:	f00c fc8e 	bl	800e7f4 <HAL_GPIO_WritePin>
}
 8001ed8:	bf00      	nop
 8001eda:	3708      	adds	r7, #8
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	58020400 	.word	0x58020400

08001ee4 <nRF24_WriteRegister>:

static void nRF24_WriteRegister(uint8_t reg, uint8_t val)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b084      	sub	sp, #16
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	4603      	mov	r3, r0
 8001eec:	460a      	mov	r2, r1
 8001eee:	71fb      	strb	r3, [r7, #7]
 8001ef0:	4613      	mov	r3, r2
 8001ef2:	71bb      	strb	r3, [r7, #6]
	uint8_t tmp[2];

	tmp[0] = NRF24_CMD_W_REGISTER | reg;
 8001ef4:	79fb      	ldrb	r3, [r7, #7]
 8001ef6:	f043 0320 	orr.w	r3, r3, #32
 8001efa:	b2db      	uxtb	r3, r3
 8001efc:	733b      	strb	r3, [r7, #12]
	tmp[1] = val;
 8001efe:	79bb      	ldrb	r3, [r7, #6]
 8001f00:	737b      	strb	r3, [r7, #13]

	NRF24_CSN_LOW;
 8001f02:	2200      	movs	r2, #0
 8001f04:	2180      	movs	r1, #128	@ 0x80
 8001f06:	4809      	ldr	r0, [pc, #36]	@ (8001f2c <nRF24_WriteRegister+0x48>)
 8001f08:	f00c fc74 	bl	800e7f4 <HAL_GPIO_WritePin>

	nRF24_SendSpi(tmp, 2);
 8001f0c:	f107 030c 	add.w	r3, r7, #12
 8001f10:	2102      	movs	r1, #2
 8001f12:	4618      	mov	r0, r3
 8001f14:	f7ff ff72 	bl	8001dfc <nRF24_SendSpi>

	NRF24_CSN_HIGH;
 8001f18:	2201      	movs	r2, #1
 8001f1a:	2180      	movs	r1, #128	@ 0x80
 8001f1c:	4803      	ldr	r0, [pc, #12]	@ (8001f2c <nRF24_WriteRegister+0x48>)
 8001f1e:	f00c fc69 	bl	800e7f4 <HAL_GPIO_WritePin>
}
 8001f22:	bf00      	nop
 8001f24:	3710      	adds	r7, #16
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	58020400 	.word	0x58020400

08001f30 <nRF24_WriteRegisters>:

static void nRF24_WriteRegisters(uint8_t reg, uint8_t* val, uint8_t len)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b082      	sub	sp, #8
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	4603      	mov	r3, r0
 8001f38:	6039      	str	r1, [r7, #0]
 8001f3a:	71fb      	strb	r3, [r7, #7]
 8001f3c:	4613      	mov	r3, r2
 8001f3e:	71bb      	strb	r3, [r7, #6]
	reg = NRF24_CMD_W_REGISTER | reg;
 8001f40:	79fb      	ldrb	r3, [r7, #7]
 8001f42:	f043 0320 	orr.w	r3, r3, #32
 8001f46:	b2db      	uxtb	r3, r3
 8001f48:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	2180      	movs	r1, #128	@ 0x80
 8001f4e:	480b      	ldr	r0, [pc, #44]	@ (8001f7c <nRF24_WriteRegisters+0x4c>)
 8001f50:	f00c fc50 	bl	800e7f4 <HAL_GPIO_WritePin>

	nRF24_SendSpi(&reg, 1);
 8001f54:	1dfb      	adds	r3, r7, #7
 8001f56:	2101      	movs	r1, #1
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f7ff ff4f 	bl	8001dfc <nRF24_SendSpi>
	nRF24_SendSpi(val, len);
 8001f5e:	79bb      	ldrb	r3, [r7, #6]
 8001f60:	4619      	mov	r1, r3
 8001f62:	6838      	ldr	r0, [r7, #0]
 8001f64:	f7ff ff4a 	bl	8001dfc <nRF24_SendSpi>

	NRF24_CSN_HIGH;
 8001f68:	2201      	movs	r2, #1
 8001f6a:	2180      	movs	r1, #128	@ 0x80
 8001f6c:	4803      	ldr	r0, [pc, #12]	@ (8001f7c <nRF24_WriteRegisters+0x4c>)
 8001f6e:	f00c fc41 	bl	800e7f4 <HAL_GPIO_WritePin>
}
 8001f72:	bf00      	nop
 8001f74:	3708      	adds	r7, #8
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	58020400 	.word	0x58020400

08001f80 <nRF24_RX_Mode>:

void nRF24_RX_Mode(void)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b082      	sub	sp, #8
 8001f84:	af00      	add	r7, sp, #0
	uint8_t config = nRF24_ReadConfig();
 8001f86:	f000 f84d 	bl	8002024 <nRF24_ReadConfig>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	71fb      	strb	r3, [r7, #7]
	// Restore pipe 0 adress after comeback from TX mode
	nRF24_SetRXAddress(0, addr_p0_backup);
 8001f8e:	4910      	ldr	r1, [pc, #64]	@ (8001fd0 <nRF24_RX_Mode+0x50>)
 8001f90:	2000      	movs	r0, #0
 8001f92:	f000 f9f6 	bl	8002382 <nRF24_SetRXAddress>
	// PWR_UP bit set
	config |= (1<<NRF24_PWR_UP);
 8001f96:	79fb      	ldrb	r3, [r7, #7]
 8001f98:	f043 0302 	orr.w	r3, r3, #2
 8001f9c:	71fb      	strb	r3, [r7, #7]
	// PRIM_RX bit set
	config |= (1<<NRF24_PRIM_RX);
 8001f9e:	79fb      	ldrb	r3, [r7, #7]
 8001fa0:	f043 0301 	orr.w	r3, r3, #1
 8001fa4:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteConfig(config);
 8001fa6:	79fb      	ldrb	r3, [r7, #7]
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f000 f843 	bl	8002034 <nRF24_WriteConfig>
	// Reset status
	nRF24_WriteStatus((1<<NRF24_RX_DR)|(1<<NRF24_TX_DS)|(1<<NRF24_MAX_RT));
 8001fae:	2070      	movs	r0, #112	@ 0x70
 8001fb0:	f000 f89b 	bl	80020ea <nRF24_WriteStatus>
	// Flush RX
	nRF24_FlushRX();
 8001fb4:	f000 f8a8 	bl	8002108 <nRF24_FlushRX>
	// Flush TX
	nRF24_FlushTX();
 8001fb8:	f000 f8c0 	bl	800213c <nRF24_FlushTX>

	NRF24_CE_HIGH;
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	2140      	movs	r1, #64	@ 0x40
 8001fc0:	4804      	ldr	r0, [pc, #16]	@ (8001fd4 <nRF24_RX_Mode+0x54>)
 8001fc2:	f00c fc17 	bl	800e7f4 <HAL_GPIO_WritePin>
	//nRF24_Delay(1);
}
 8001fc6:	bf00      	nop
 8001fc8:	3708      	adds	r7, #8
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	240000ac 	.word	0x240000ac
 8001fd4:	58020400 	.word	0x58020400

08001fd8 <nRF24_TX_Mode>:

void nRF24_TX_Mode(void)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b082      	sub	sp, #8
 8001fdc:	af00      	add	r7, sp, #0
	NRF24_CE_LOW;
 8001fde:	2200      	movs	r2, #0
 8001fe0:	2140      	movs	r1, #64	@ 0x40
 8001fe2:	480f      	ldr	r0, [pc, #60]	@ (8002020 <nRF24_TX_Mode+0x48>)
 8001fe4:	f00c fc06 	bl	800e7f4 <HAL_GPIO_WritePin>

	uint8_t config = nRF24_ReadConfig();
 8001fe8:	f000 f81c 	bl	8002024 <nRF24_ReadConfig>
 8001fec:	4603      	mov	r3, r0
 8001fee:	71fb      	strb	r3, [r7, #7]
	// PWR_UP bit set
	config |= (1<<NRF24_PWR_UP);
 8001ff0:	79fb      	ldrb	r3, [r7, #7]
 8001ff2:	f043 0302 	orr.w	r3, r3, #2
 8001ff6:	71fb      	strb	r3, [r7, #7]
	// PRIM_RX bit low
	config &= ~(1<<NRF24_PRIM_RX);
 8001ff8:	79fb      	ldrb	r3, [r7, #7]
 8001ffa:	f023 0301 	bic.w	r3, r3, #1
 8001ffe:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteConfig(config);
 8002000:	79fb      	ldrb	r3, [r7, #7]
 8002002:	4618      	mov	r0, r3
 8002004:	f000 f816 	bl	8002034 <nRF24_WriteConfig>
	// Reset status
	nRF24_WriteStatus((1<<NRF24_RX_DR)|(1<<NRF24_TX_DS)|(1<<NRF24_MAX_RT));
 8002008:	2070      	movs	r0, #112	@ 0x70
 800200a:	f000 f86e 	bl	80020ea <nRF24_WriteStatus>
	// Flush RX
	nRF24_FlushRX();
 800200e:	f000 f87b 	bl	8002108 <nRF24_FlushRX>
	// Flush TX
	nRF24_FlushTX();
 8002012:	f000 f893 	bl	800213c <nRF24_FlushTX>

	//nRF24_Delay(1);
}
 8002016:	bf00      	nop
 8002018:	3708      	adds	r7, #8
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	58020400 	.word	0x58020400

08002024 <nRF24_ReadConfig>:



uint8_t nRF24_ReadConfig(void)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	af00      	add	r7, sp, #0
	return (nRF24_ReadRegister(NRF24_CONFIG));
 8002028:	2000      	movs	r0, #0
 800202a:	f7ff ff13 	bl	8001e54 <nRF24_ReadRegister>
 800202e:	4603      	mov	r3, r0
}
 8002030:	4618      	mov	r0, r3
 8002032:	bd80      	pop	{r7, pc}

08002034 <nRF24_WriteConfig>:

void nRF24_WriteConfig(uint8_t conf)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b082      	sub	sp, #8
 8002038:	af00      	add	r7, sp, #0
 800203a:	4603      	mov	r3, r0
 800203c:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_CONFIG, conf);
 800203e:	79fb      	ldrb	r3, [r7, #7]
 8002040:	4619      	mov	r1, r3
 8002042:	2000      	movs	r0, #0
 8002044:	f7ff ff4e 	bl	8001ee4 <nRF24_WriteRegister>
}
 8002048:	bf00      	nop
 800204a:	3708      	adds	r7, #8
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}

08002050 <nRF24_SetPALevel>:

void nRF24_SetPALevel(uint8_t lev)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b084      	sub	sp, #16
 8002054:	af00      	add	r7, sp, #0
 8002056:	4603      	mov	r3, r0
 8002058:	71fb      	strb	r3, [r7, #7]
	uint8_t rf_setup = nRF24_ReadRegister(NRF24_RF_SETUP);
 800205a:	2006      	movs	r0, #6
 800205c:	f7ff fefa 	bl	8001e54 <nRF24_ReadRegister>
 8002060:	4603      	mov	r3, r0
 8002062:	73fb      	strb	r3, [r7, #15]
	rf_setup &= 0xF8; // Clear PWR bits
 8002064:	7bfb      	ldrb	r3, [r7, #15]
 8002066:	f023 0307 	bic.w	r3, r3, #7
 800206a:	73fb      	strb	r3, [r7, #15]
	rf_setup |= (lev<<1);
 800206c:	79fb      	ldrb	r3, [r7, #7]
 800206e:	005b      	lsls	r3, r3, #1
 8002070:	b25a      	sxtb	r2, r3
 8002072:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002076:	4313      	orrs	r3, r2
 8002078:	b25b      	sxtb	r3, r3
 800207a:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_RF_SETUP, rf_setup);
 800207c:	7bfb      	ldrb	r3, [r7, #15]
 800207e:	4619      	mov	r1, r3
 8002080:	2006      	movs	r0, #6
 8002082:	f7ff ff2f 	bl	8001ee4 <nRF24_WriteRegister>
}
 8002086:	bf00      	nop
 8002088:	3710      	adds	r7, #16
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}

0800208e <nRF24_SetDataRate>:

void nRF24_SetDataRate(uint8_t dr)
{
 800208e:	b580      	push	{r7, lr}
 8002090:	b084      	sub	sp, #16
 8002092:	af00      	add	r7, sp, #0
 8002094:	4603      	mov	r3, r0
 8002096:	71fb      	strb	r3, [r7, #7]
	uint8_t rf_setup = nRF24_ReadRegister(NRF24_RF_SETUP);
 8002098:	2006      	movs	r0, #6
 800209a:	f7ff fedb 	bl	8001e54 <nRF24_ReadRegister>
 800209e:	4603      	mov	r3, r0
 80020a0:	73fb      	strb	r3, [r7, #15]
	rf_setup &= 0xD7; // Clear DR bits (1MBPS)
 80020a2:	7bfb      	ldrb	r3, [r7, #15]
 80020a4:	f023 0328 	bic.w	r3, r3, #40	@ 0x28
 80020a8:	73fb      	strb	r3, [r7, #15]
	if(dr == NRF24_RF_DR_250KBPS)
 80020aa:	79fb      	ldrb	r3, [r7, #7]
 80020ac:	2b02      	cmp	r3, #2
 80020ae:	d104      	bne.n	80020ba <nRF24_SetDataRate+0x2c>
		rf_setup |= (1<<NRF24_RF_DR_LOW);
 80020b0:	7bfb      	ldrb	r3, [r7, #15]
 80020b2:	f043 0320 	orr.w	r3, r3, #32
 80020b6:	73fb      	strb	r3, [r7, #15]
 80020b8:	e006      	b.n	80020c8 <nRF24_SetDataRate+0x3a>
	else if(dr == NRF24_RF_DR_2MBPS)
 80020ba:	79fb      	ldrb	r3, [r7, #7]
 80020bc:	2b01      	cmp	r3, #1
 80020be:	d103      	bne.n	80020c8 <nRF24_SetDataRate+0x3a>
		rf_setup |= (1<<NRF24_RF_DR_HIGH);
 80020c0:	7bfb      	ldrb	r3, [r7, #15]
 80020c2:	f043 0308 	orr.w	r3, r3, #8
 80020c6:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_RF_SETUP, rf_setup);
 80020c8:	7bfb      	ldrb	r3, [r7, #15]
 80020ca:	4619      	mov	r1, r3
 80020cc:	2006      	movs	r0, #6
 80020ce:	f7ff ff09 	bl	8001ee4 <nRF24_WriteRegister>
}
 80020d2:	bf00      	nop
 80020d4:	3710      	adds	r7, #16
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}

080020da <nRF24_ReadStatus>:

uint8_t nRF24_ReadStatus(void)
{
 80020da:	b580      	push	{r7, lr}
 80020dc:	af00      	add	r7, sp, #0
	return (nRF24_ReadRegister(NRF24_STATUS));
 80020de:	2007      	movs	r0, #7
 80020e0:	f7ff feb8 	bl	8001e54 <nRF24_ReadRegister>
 80020e4:	4603      	mov	r3, r0
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	bd80      	pop	{r7, pc}

080020ea <nRF24_WriteStatus>:

void nRF24_WriteStatus(uint8_t st)
{
 80020ea:	b580      	push	{r7, lr}
 80020ec:	b082      	sub	sp, #8
 80020ee:	af00      	add	r7, sp, #0
 80020f0:	4603      	mov	r3, r0
 80020f2:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_STATUS, st);
 80020f4:	79fb      	ldrb	r3, [r7, #7]
 80020f6:	4619      	mov	r1, r3
 80020f8:	2007      	movs	r0, #7
 80020fa:	f7ff fef3 	bl	8001ee4 <nRF24_WriteRegister>
}
 80020fe:	bf00      	nop
 8002100:	3708      	adds	r7, #8
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}
	...

08002108 <nRF24_FlushRX>:

void nRF24_FlushRX(void)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b082      	sub	sp, #8
 800210c:	af00      	add	r7, sp, #0
	uint8_t command = NRF24_CMD_FLUSH_RX;
 800210e:	23e2      	movs	r3, #226	@ 0xe2
 8002110:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 8002112:	2200      	movs	r2, #0
 8002114:	2180      	movs	r1, #128	@ 0x80
 8002116:	4808      	ldr	r0, [pc, #32]	@ (8002138 <nRF24_FlushRX+0x30>)
 8002118:	f00c fb6c 	bl	800e7f4 <HAL_GPIO_WritePin>
	nRF24_SendSpi(&command, 1);
 800211c:	1dfb      	adds	r3, r7, #7
 800211e:	2101      	movs	r1, #1
 8002120:	4618      	mov	r0, r3
 8002122:	f7ff fe6b 	bl	8001dfc <nRF24_SendSpi>
	NRF24_CSN_HIGH;
 8002126:	2201      	movs	r2, #1
 8002128:	2180      	movs	r1, #128	@ 0x80
 800212a:	4803      	ldr	r0, [pc, #12]	@ (8002138 <nRF24_FlushRX+0x30>)
 800212c:	f00c fb62 	bl	800e7f4 <HAL_GPIO_WritePin>
}
 8002130:	bf00      	nop
 8002132:	3708      	adds	r7, #8
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}
 8002138:	58020400 	.word	0x58020400

0800213c <nRF24_FlushTX>:

void nRF24_FlushTX(void)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b082      	sub	sp, #8
 8002140:	af00      	add	r7, sp, #0
	uint8_t command = NRF24_CMD_FLUSH_TX;
 8002142:	23e1      	movs	r3, #225	@ 0xe1
 8002144:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 8002146:	2200      	movs	r2, #0
 8002148:	2180      	movs	r1, #128	@ 0x80
 800214a:	4808      	ldr	r0, [pc, #32]	@ (800216c <nRF24_FlushTX+0x30>)
 800214c:	f00c fb52 	bl	800e7f4 <HAL_GPIO_WritePin>
	nRF24_SendSpi(&command, 1);
 8002150:	1dfb      	adds	r3, r7, #7
 8002152:	2101      	movs	r1, #1
 8002154:	4618      	mov	r0, r3
 8002156:	f7ff fe51 	bl	8001dfc <nRF24_SendSpi>
	NRF24_CSN_HIGH;
 800215a:	2201      	movs	r2, #1
 800215c:	2180      	movs	r1, #128	@ 0x80
 800215e:	4803      	ldr	r0, [pc, #12]	@ (800216c <nRF24_FlushTX+0x30>)
 8002160:	f00c fb48 	bl	800e7f4 <HAL_GPIO_WritePin>
}
 8002164:	bf00      	nop
 8002166:	3708      	adds	r7, #8
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}
 800216c:	58020400 	.word	0x58020400

08002170 <nRF24_EnableCRC>:

void nRF24_EnableCRC(uint8_t onoff)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b084      	sub	sp, #16
 8002174:	af00      	add	r7, sp, #0
 8002176:	4603      	mov	r3, r0
 8002178:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 800217a:	f7ff ff53 	bl	8002024 <nRF24_ReadConfig>
 800217e:	4603      	mov	r3, r0
 8002180:	73fb      	strb	r3, [r7, #15]

	if(onoff)
 8002182:	79fb      	ldrb	r3, [r7, #7]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d004      	beq.n	8002192 <nRF24_EnableCRC+0x22>
		config |= (1<<NRF24_EN_CRC);
 8002188:	7bfb      	ldrb	r3, [r7, #15]
 800218a:	f043 0308 	orr.w	r3, r3, #8
 800218e:	73fb      	strb	r3, [r7, #15]
 8002190:	e003      	b.n	800219a <nRF24_EnableCRC+0x2a>
	else
		config &= ~(1<<NRF24_EN_CRC);
 8002192:	7bfb      	ldrb	r3, [r7, #15]
 8002194:	f023 0308 	bic.w	r3, r3, #8
 8002198:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteConfig(config);
 800219a:	7bfb      	ldrb	r3, [r7, #15]
 800219c:	4618      	mov	r0, r3
 800219e:	f7ff ff49 	bl	8002034 <nRF24_WriteConfig>
}
 80021a2:	bf00      	nop
 80021a4:	3710      	adds	r7, #16
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}

080021aa <nRF24_SetCRCLength>:

void nRF24_SetCRCLength(uint8_t crcl)
{
 80021aa:	b580      	push	{r7, lr}
 80021ac:	b084      	sub	sp, #16
 80021ae:	af00      	add	r7, sp, #0
 80021b0:	4603      	mov	r3, r0
 80021b2:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 80021b4:	f7ff ff36 	bl	8002024 <nRF24_ReadConfig>
 80021b8:	4603      	mov	r3, r0
 80021ba:	73fb      	strb	r3, [r7, #15]
	if(crcl == NRF24_CRC_WIDTH_2B)
 80021bc:	79fb      	ldrb	r3, [r7, #7]
 80021be:	2b01      	cmp	r3, #1
 80021c0:	d104      	bne.n	80021cc <nRF24_SetCRCLength+0x22>
		config |= (1<<NRF24_CRCO);
 80021c2:	7bfb      	ldrb	r3, [r7, #15]
 80021c4:	f043 0304 	orr.w	r3, r3, #4
 80021c8:	73fb      	strb	r3, [r7, #15]
 80021ca:	e003      	b.n	80021d4 <nRF24_SetCRCLength+0x2a>
	else
		config &= ~(1<<NRF24_CRCO);
 80021cc:	7bfb      	ldrb	r3, [r7, #15]
 80021ce:	f023 0304 	bic.w	r3, r3, #4
 80021d2:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteConfig(config);
 80021d4:	7bfb      	ldrb	r3, [r7, #15]
 80021d6:	4618      	mov	r0, r3
 80021d8:	f7ff ff2c 	bl	8002034 <nRF24_WriteConfig>
}
 80021dc:	bf00      	nop
 80021de:	3710      	adds	r7, #16
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bd80      	pop	{r7, pc}

080021e4 <nRF24_SetRetries>:

void nRF24_SetRetries(uint8_t ard, uint8_t arc)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b082      	sub	sp, #8
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	4603      	mov	r3, r0
 80021ec:	460a      	mov	r2, r1
 80021ee:	71fb      	strb	r3, [r7, #7]
 80021f0:	4613      	mov	r3, r2
 80021f2:	71bb      	strb	r3, [r7, #6]
	// ard * 250us, arc repeats
	nRF24_WriteRegister(NRF24_SETUP_RETR, (((ard & 0x0F)<<NRF24_ARD) | ((arc & 0x0F)<<NRF24_ARC)));
 80021f4:	79fb      	ldrb	r3, [r7, #7]
 80021f6:	011b      	lsls	r3, r3, #4
 80021f8:	b25a      	sxtb	r2, r3
 80021fa:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80021fe:	f003 030f 	and.w	r3, r3, #15
 8002202:	b25b      	sxtb	r3, r3
 8002204:	4313      	orrs	r3, r2
 8002206:	b25b      	sxtb	r3, r3
 8002208:	b2db      	uxtb	r3, r3
 800220a:	4619      	mov	r1, r3
 800220c:	2004      	movs	r0, #4
 800220e:	f7ff fe69 	bl	8001ee4 <nRF24_WriteRegister>
}
 8002212:	bf00      	nop
 8002214:	3708      	adds	r7, #8
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}

0800221a <nRF24_SetRFChannel>:

void nRF24_SetRFChannel(uint8_t channel)
{
 800221a:	b580      	push	{r7, lr}
 800221c:	b082      	sub	sp, #8
 800221e:	af00      	add	r7, sp, #0
 8002220:	4603      	mov	r3, r0
 8002222:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_RF_CH, (channel & 0x7F));
 8002224:	79fb      	ldrb	r3, [r7, #7]
 8002226:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800222a:	b2db      	uxtb	r3, r3
 800222c:	4619      	mov	r1, r3
 800222e:	2005      	movs	r0, #5
 8002230:	f7ff fe58 	bl	8001ee4 <nRF24_WriteRegister>
}
 8002234:	bf00      	nop
 8002236:	3708      	adds	r7, #8
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}

0800223c <nRF24_SetPayloadSize>:

void nRF24_SetPayloadSize(uint8_t pipe, uint8_t size)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b082      	sub	sp, #8
 8002240:	af00      	add	r7, sp, #0
 8002242:	4603      	mov	r3, r0
 8002244:	460a      	mov	r2, r1
 8002246:	71fb      	strb	r3, [r7, #7]
 8002248:	4613      	mov	r3, r2
 800224a:	71bb      	strb	r3, [r7, #6]
	if(pipe > 5)
 800224c:	79fb      	ldrb	r3, [r7, #7]
 800224e:	2b05      	cmp	r3, #5
 8002250:	d901      	bls.n	8002256 <nRF24_SetPayloadSize+0x1a>
		pipe = 5; // Block too high pipe number
 8002252:	2305      	movs	r3, #5
 8002254:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_RX_PW_P0 + pipe , (size & 0x3F));
 8002256:	79fb      	ldrb	r3, [r7, #7]
 8002258:	3311      	adds	r3, #17
 800225a:	b2da      	uxtb	r2, r3
 800225c:	79bb      	ldrb	r3, [r7, #6]
 800225e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002262:	b2db      	uxtb	r3, r3
 8002264:	4619      	mov	r1, r3
 8002266:	4610      	mov	r0, r2
 8002268:	f7ff fe3c 	bl	8001ee4 <nRF24_WriteRegister>
}
 800226c:	bf00      	nop
 800226e:	3708      	adds	r7, #8
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}

08002274 <nRF24_EnablePipe>:

void nRF24_EnablePipe(uint8_t pipe, uint8_t onoff)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b084      	sub	sp, #16
 8002278:	af00      	add	r7, sp, #0
 800227a:	4603      	mov	r3, r0
 800227c:	460a      	mov	r2, r1
 800227e:	71fb      	strb	r3, [r7, #7]
 8002280:	4613      	mov	r3, r2
 8002282:	71bb      	strb	r3, [r7, #6]
	if(pipe > 5)
 8002284:	79fb      	ldrb	r3, [r7, #7]
 8002286:	2b05      	cmp	r3, #5
 8002288:	d901      	bls.n	800228e <nRF24_EnablePipe+0x1a>
		pipe = 5; // Block too high pipe number
 800228a:	2305      	movs	r3, #5
 800228c:	71fb      	strb	r3, [r7, #7]
	uint8_t enable_pipe = nRF24_ReadRegister(NRF24_EN_RXADDR);
 800228e:	2002      	movs	r0, #2
 8002290:	f7ff fde0 	bl	8001e54 <nRF24_ReadRegister>
 8002294:	4603      	mov	r3, r0
 8002296:	73fb      	strb	r3, [r7, #15]
	if(onoff == 1)
 8002298:	79bb      	ldrb	r3, [r7, #6]
 800229a:	2b01      	cmp	r3, #1
 800229c:	d10a      	bne.n	80022b4 <nRF24_EnablePipe+0x40>
		enable_pipe |= (1<<pipe);
 800229e:	79fb      	ldrb	r3, [r7, #7]
 80022a0:	2201      	movs	r2, #1
 80022a2:	fa02 f303 	lsl.w	r3, r2, r3
 80022a6:	b25a      	sxtb	r2, r3
 80022a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022ac:	4313      	orrs	r3, r2
 80022ae:	b25b      	sxtb	r3, r3
 80022b0:	73fb      	strb	r3, [r7, #15]
 80022b2:	e00b      	b.n	80022cc <nRF24_EnablePipe+0x58>
	else
		enable_pipe &= ~(1<<pipe);
 80022b4:	79fb      	ldrb	r3, [r7, #7]
 80022b6:	2201      	movs	r2, #1
 80022b8:	fa02 f303 	lsl.w	r3, r2, r3
 80022bc:	b25b      	sxtb	r3, r3
 80022be:	43db      	mvns	r3, r3
 80022c0:	b25a      	sxtb	r2, r3
 80022c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022c6:	4013      	ands	r3, r2
 80022c8:	b25b      	sxtb	r3, r3
 80022ca:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_EN_RXADDR, enable_pipe);
 80022cc:	7bfb      	ldrb	r3, [r7, #15]
 80022ce:	4619      	mov	r1, r3
 80022d0:	2002      	movs	r0, #2
 80022d2:	f7ff fe07 	bl	8001ee4 <nRF24_WriteRegister>
}
 80022d6:	bf00      	nop
 80022d8:	3710      	adds	r7, #16
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}

080022de <nRF24_AutoACK>:

void nRF24_AutoACK(uint8_t pipe, uint8_t onoff)
{
 80022de:	b580      	push	{r7, lr}
 80022e0:	b084      	sub	sp, #16
 80022e2:	af00      	add	r7, sp, #0
 80022e4:	4603      	mov	r3, r0
 80022e6:	460a      	mov	r2, r1
 80022e8:	71fb      	strb	r3, [r7, #7]
 80022ea:	4613      	mov	r3, r2
 80022ec:	71bb      	strb	r3, [r7, #6]
	if(pipe > 5)
 80022ee:	79fb      	ldrb	r3, [r7, #7]
 80022f0:	2b05      	cmp	r3, #5
 80022f2:	d901      	bls.n	80022f8 <nRF24_AutoACK+0x1a>
		pipe = 5; // Block too high pipe number
 80022f4:	2305      	movs	r3, #5
 80022f6:	71fb      	strb	r3, [r7, #7]
	uint8_t enaa = nRF24_ReadRegister(NRF24_EN_AA);
 80022f8:	2001      	movs	r0, #1
 80022fa:	f7ff fdab 	bl	8001e54 <nRF24_ReadRegister>
 80022fe:	4603      	mov	r3, r0
 8002300:	73fb      	strb	r3, [r7, #15]
	if(onoff == 1)
 8002302:	79bb      	ldrb	r3, [r7, #6]
 8002304:	2b01      	cmp	r3, #1
 8002306:	d10a      	bne.n	800231e <nRF24_AutoACK+0x40>
		enaa |= (1<<pipe);
 8002308:	79fb      	ldrb	r3, [r7, #7]
 800230a:	2201      	movs	r2, #1
 800230c:	fa02 f303 	lsl.w	r3, r2, r3
 8002310:	b25a      	sxtb	r2, r3
 8002312:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002316:	4313      	orrs	r3, r2
 8002318:	b25b      	sxtb	r3, r3
 800231a:	73fb      	strb	r3, [r7, #15]
 800231c:	e00b      	b.n	8002336 <nRF24_AutoACK+0x58>
	else
		enaa &= ~(1<<pipe);
 800231e:	79fb      	ldrb	r3, [r7, #7]
 8002320:	2201      	movs	r2, #1
 8002322:	fa02 f303 	lsl.w	r3, r2, r3
 8002326:	b25b      	sxtb	r3, r3
 8002328:	43db      	mvns	r3, r3
 800232a:	b25a      	sxtb	r2, r3
 800232c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002330:	4013      	ands	r3, r2
 8002332:	b25b      	sxtb	r3, r3
 8002334:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_EN_AA, enaa);
 8002336:	7bfb      	ldrb	r3, [r7, #15]
 8002338:	4619      	mov	r1, r3
 800233a:	2001      	movs	r0, #1
 800233c:	f7ff fdd2 	bl	8001ee4 <nRF24_WriteRegister>
}
 8002340:	bf00      	nop
 8002342:	3710      	adds	r7, #16
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}

08002348 <nRF24_SetAddressWidth>:

void nRF24_SetAddressWidth(uint8_t size)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b082      	sub	sp, #8
 800234c:	af00      	add	r7, sp, #0
 800234e:	4603      	mov	r3, r0
 8002350:	71fb      	strb	r3, [r7, #7]
	if(size > 5)
 8002352:	79fb      	ldrb	r3, [r7, #7]
 8002354:	2b05      	cmp	r3, #5
 8002356:	d901      	bls.n	800235c <nRF24_SetAddressWidth+0x14>
		size = 5; // Maximum are 5 bytes
 8002358:	2305      	movs	r3, #5
 800235a:	71fb      	strb	r3, [r7, #7]
	if(size < 3)
 800235c:	79fb      	ldrb	r3, [r7, #7]
 800235e:	2b02      	cmp	r3, #2
 8002360:	d801      	bhi.n	8002366 <nRF24_SetAddressWidth+0x1e>
		size = 3; // Minimum are 3 bytes
 8002362:	2303      	movs	r3, #3
 8002364:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_SETUP_AW, ((size-2) & 0x03));
 8002366:	79fb      	ldrb	r3, [r7, #7]
 8002368:	3b02      	subs	r3, #2
 800236a:	b2db      	uxtb	r3, r3
 800236c:	f003 0303 	and.w	r3, r3, #3
 8002370:	b2db      	uxtb	r3, r3
 8002372:	4619      	mov	r1, r3
 8002374:	2003      	movs	r0, #3
 8002376:	f7ff fdb5 	bl	8001ee4 <nRF24_WriteRegister>
}
 800237a:	bf00      	nop
 800237c:	3708      	adds	r7, #8
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}

08002382 <nRF24_SetRXAddress>:

void nRF24_SetRXAddress(uint8_t pipe, uint8_t* address)
{
 8002382:	b580      	push	{r7, lr}
 8002384:	b084      	sub	sp, #16
 8002386:	af00      	add	r7, sp, #0
 8002388:	4603      	mov	r3, r0
 800238a:	6039      	str	r1, [r7, #0]
 800238c:	71fb      	strb	r3, [r7, #7]
	// pipe 0 and pipe 1 are fully 40-bits storaged
	// pipe 2-5 is storaged only with last byte. Rest are as same as pipe 1
	// pipe 0 and 1 are LSByte first so they are needed to reverse address
	if((pipe == 0) || (pipe == 1))
 800238e:	79fb      	ldrb	r3, [r7, #7]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d002      	beq.n	800239a <nRF24_SetRXAddress+0x18>
 8002394:	79fb      	ldrb	r3, [r7, #7]
 8002396:	2b01      	cmp	r3, #1
 8002398:	d11d      	bne.n	80023d6 <nRF24_SetRXAddress+0x54>
	{
		uint8_t i;
		uint8_t address_rev[NRF24_ADDR_SIZE];
		for(i = 0; i<NRF24_ADDR_SIZE; i++)
 800239a:	2300      	movs	r3, #0
 800239c:	73fb      	strb	r3, [r7, #15]
 800239e:	e00d      	b.n	80023bc <nRF24_SetRXAddress+0x3a>
			address_rev[NRF24_ADDR_SIZE - 1 - i] = address[i];
 80023a0:	7bfb      	ldrb	r3, [r7, #15]
 80023a2:	683a      	ldr	r2, [r7, #0]
 80023a4:	441a      	add	r2, r3
 80023a6:	7bfb      	ldrb	r3, [r7, #15]
 80023a8:	f1c3 0302 	rsb	r3, r3, #2
 80023ac:	7812      	ldrb	r2, [r2, #0]
 80023ae:	3310      	adds	r3, #16
 80023b0:	443b      	add	r3, r7
 80023b2:	f803 2c04 	strb.w	r2, [r3, #-4]
		for(i = 0; i<NRF24_ADDR_SIZE; i++)
 80023b6:	7bfb      	ldrb	r3, [r7, #15]
 80023b8:	3301      	adds	r3, #1
 80023ba:	73fb      	strb	r3, [r7, #15]
 80023bc:	7bfb      	ldrb	r3, [r7, #15]
 80023be:	2b02      	cmp	r3, #2
 80023c0:	d9ee      	bls.n	80023a0 <nRF24_SetRXAddress+0x1e>
		nRF24_WriteRegisters(NRF24_RX_ADDR_P0 + pipe, address_rev, NRF24_ADDR_SIZE);
 80023c2:	79fb      	ldrb	r3, [r7, #7]
 80023c4:	330a      	adds	r3, #10
 80023c6:	b2db      	uxtb	r3, r3
 80023c8:	f107 010c 	add.w	r1, r7, #12
 80023cc:	2203      	movs	r2, #3
 80023ce:	4618      	mov	r0, r3
 80023d0:	f7ff fdae 	bl	8001f30 <nRF24_WriteRegisters>
	{
 80023d4:	e00a      	b.n	80023ec <nRF24_SetRXAddress+0x6a>
	}
	else
		nRF24_WriteRegister(NRF24_RX_ADDR_P0 + pipe, address[NRF24_ADDR_SIZE-1]);
 80023d6:	79fb      	ldrb	r3, [r7, #7]
 80023d8:	330a      	adds	r3, #10
 80023da:	b2da      	uxtb	r2, r3
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	3302      	adds	r3, #2
 80023e0:	781b      	ldrb	r3, [r3, #0]
 80023e2:	4619      	mov	r1, r3
 80023e4:	4610      	mov	r0, r2
 80023e6:	f7ff fd7d 	bl	8001ee4 <nRF24_WriteRegister>
}
 80023ea:	bf00      	nop
 80023ec:	bf00      	nop
 80023ee:	3710      	adds	r7, #16
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}

080023f4 <nRF24_SetTXAddress>:

void nRF24_SetTXAddress(uint8_t* address)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b084      	sub	sp, #16
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
	// TX address is storaged similar to RX pipe 0 - LSByte first
	uint8_t i;
	uint8_t address_rev[NRF24_ADDR_SIZE];

	nRF24_ReadRegisters(NRF24_RX_ADDR_P0, address_rev, NRF24_ADDR_SIZE); // Backup P0 address
 80023fc:	f107 030c 	add.w	r3, r7, #12
 8002400:	2203      	movs	r2, #3
 8002402:	4619      	mov	r1, r3
 8002404:	200a      	movs	r0, #10
 8002406:	f7ff fd49 	bl	8001e9c <nRF24_ReadRegisters>
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 800240a:	2300      	movs	r3, #0
 800240c:	73fb      	strb	r3, [r7, #15]
 800240e:	e00c      	b.n	800242a <nRF24_SetTXAddress+0x36>
		addr_p0_backup[NRF24_ADDR_SIZE - 1 - i] = address_rev[i]; //Reverse P0 address
 8002410:	7bfa      	ldrb	r2, [r7, #15]
 8002412:	7bfb      	ldrb	r3, [r7, #15]
 8002414:	f1c3 0302 	rsb	r3, r3, #2
 8002418:	3210      	adds	r2, #16
 800241a:	443a      	add	r2, r7
 800241c:	f812 1c04 	ldrb.w	r1, [r2, #-4]
 8002420:	4a16      	ldr	r2, [pc, #88]	@ (800247c <nRF24_SetTXAddress+0x88>)
 8002422:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8002424:	7bfb      	ldrb	r3, [r7, #15]
 8002426:	3301      	adds	r3, #1
 8002428:	73fb      	strb	r3, [r7, #15]
 800242a:	7bfb      	ldrb	r3, [r7, #15]
 800242c:	2b02      	cmp	r3, #2
 800242e:	d9ef      	bls.n	8002410 <nRF24_SetTXAddress+0x1c>

	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8002430:	2300      	movs	r3, #0
 8002432:	73fb      	strb	r3, [r7, #15]
 8002434:	e00d      	b.n	8002452 <nRF24_SetTXAddress+0x5e>
		address_rev[NRF24_ADDR_SIZE - 1 - i] = address[i];
 8002436:	7bfb      	ldrb	r3, [r7, #15]
 8002438:	687a      	ldr	r2, [r7, #4]
 800243a:	441a      	add	r2, r3
 800243c:	7bfb      	ldrb	r3, [r7, #15]
 800243e:	f1c3 0302 	rsb	r3, r3, #2
 8002442:	7812      	ldrb	r2, [r2, #0]
 8002444:	3310      	adds	r3, #16
 8002446:	443b      	add	r3, r7
 8002448:	f803 2c04 	strb.w	r2, [r3, #-4]
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 800244c:	7bfb      	ldrb	r3, [r7, #15]
 800244e:	3301      	adds	r3, #1
 8002450:	73fb      	strb	r3, [r7, #15]
 8002452:	7bfb      	ldrb	r3, [r7, #15]
 8002454:	2b02      	cmp	r3, #2
 8002456:	d9ee      	bls.n	8002436 <nRF24_SetTXAddress+0x42>
	//make pipe 0 address backup;

	nRF24_WriteRegisters(NRF24_RX_ADDR_P0, address_rev, NRF24_ADDR_SIZE); // Pipe 0 must be same for auto ACk
 8002458:	f107 030c 	add.w	r3, r7, #12
 800245c:	2203      	movs	r2, #3
 800245e:	4619      	mov	r1, r3
 8002460:	200a      	movs	r0, #10
 8002462:	f7ff fd65 	bl	8001f30 <nRF24_WriteRegisters>
	nRF24_WriteRegisters(NRF24_TX_ADDR, address_rev, NRF24_ADDR_SIZE);
 8002466:	f107 030c 	add.w	r3, r7, #12
 800246a:	2203      	movs	r2, #3
 800246c:	4619      	mov	r1, r3
 800246e:	2010      	movs	r0, #16
 8002470:	f7ff fd5e 	bl	8001f30 <nRF24_WriteRegisters>

}
 8002474:	bf00      	nop
 8002476:	3710      	adds	r7, #16
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}
 800247c:	240000ac 	.word	0x240000ac

08002480 <nRF24_ClearInterrupts>:

void nRF24_ClearInterrupts(void)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b082      	sub	sp, #8
 8002484:	af00      	add	r7, sp, #0
	uint8_t status = nRF24_ReadStatus();
 8002486:	f7ff fe28 	bl	80020da <nRF24_ReadStatus>
 800248a:	4603      	mov	r3, r0
 800248c:	71fb      	strb	r3, [r7, #7]
	status |= (7<<4); // Clear bits 4, 5, 6.
 800248e:	79fb      	ldrb	r3, [r7, #7]
 8002490:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 8002494:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteStatus(status);
 8002496:	79fb      	ldrb	r3, [r7, #7]
 8002498:	4618      	mov	r0, r3
 800249a:	f7ff fe26 	bl	80020ea <nRF24_WriteStatus>
}
 800249e:	bf00      	nop
 80024a0:	3708      	adds	r7, #8
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}

080024a6 <nRF24_EnableRXDataReadyIRQ>:

void nRF24_EnableRXDataReadyIRQ(uint8_t onoff)
{
 80024a6:	b580      	push	{r7, lr}
 80024a8:	b084      	sub	sp, #16
 80024aa:	af00      	add	r7, sp, #0
 80024ac:	4603      	mov	r3, r0
 80024ae:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 80024b0:	f7ff fdb8 	bl	8002024 <nRF24_ReadConfig>
 80024b4:	4603      	mov	r3, r0
 80024b6:	73fb      	strb	r3, [r7, #15]

	if(!onoff)
 80024b8:	79fb      	ldrb	r3, [r7, #7]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d104      	bne.n	80024c8 <nRF24_EnableRXDataReadyIRQ+0x22>
		config |= (1<<NRF24_RX_DR);
 80024be:	7bfb      	ldrb	r3, [r7, #15]
 80024c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80024c4:	73fb      	strb	r3, [r7, #15]
 80024c6:	e003      	b.n	80024d0 <nRF24_EnableRXDataReadyIRQ+0x2a>
	else
		config &= ~(1<<NRF24_RX_DR);
 80024c8:	7bfb      	ldrb	r3, [r7, #15]
 80024ca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80024ce:	73fb      	strb	r3, [r7, #15]

	nRF24_WriteConfig(config);
 80024d0:	7bfb      	ldrb	r3, [r7, #15]
 80024d2:	4618      	mov	r0, r3
 80024d4:	f7ff fdae 	bl	8002034 <nRF24_WriteConfig>
}
 80024d8:	bf00      	nop
 80024da:	3710      	adds	r7, #16
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}

080024e0 <nRF24_EnableTXDataSentIRQ>:

void nRF24_EnableTXDataSentIRQ(uint8_t onoff)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b084      	sub	sp, #16
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	4603      	mov	r3, r0
 80024e8:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 80024ea:	f7ff fd9b 	bl	8002024 <nRF24_ReadConfig>
 80024ee:	4603      	mov	r3, r0
 80024f0:	73fb      	strb	r3, [r7, #15]

	if(!onoff)
 80024f2:	79fb      	ldrb	r3, [r7, #7]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d104      	bne.n	8002502 <nRF24_EnableTXDataSentIRQ+0x22>
		config |= (1<<NRF24_TX_DS);
 80024f8:	7bfb      	ldrb	r3, [r7, #15]
 80024fa:	f043 0320 	orr.w	r3, r3, #32
 80024fe:	73fb      	strb	r3, [r7, #15]
 8002500:	e003      	b.n	800250a <nRF24_EnableTXDataSentIRQ+0x2a>
	else
		config &= ~(1<<NRF24_TX_DS);
 8002502:	7bfb      	ldrb	r3, [r7, #15]
 8002504:	f023 0320 	bic.w	r3, r3, #32
 8002508:	73fb      	strb	r3, [r7, #15]

	nRF24_WriteConfig(config);
 800250a:	7bfb      	ldrb	r3, [r7, #15]
 800250c:	4618      	mov	r0, r3
 800250e:	f7ff fd91 	bl	8002034 <nRF24_WriteConfig>
}
 8002512:	bf00      	nop
 8002514:	3710      	adds	r7, #16
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}

0800251a <nRF24_EnableMaxRetransmitIRQ>:

void nRF24_EnableMaxRetransmitIRQ(uint8_t onoff)
{
 800251a:	b580      	push	{r7, lr}
 800251c:	b084      	sub	sp, #16
 800251e:	af00      	add	r7, sp, #0
 8002520:	4603      	mov	r3, r0
 8002522:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 8002524:	f7ff fd7e 	bl	8002024 <nRF24_ReadConfig>
 8002528:	4603      	mov	r3, r0
 800252a:	73fb      	strb	r3, [r7, #15]

	if(!onoff)
 800252c:	79fb      	ldrb	r3, [r7, #7]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d104      	bne.n	800253c <nRF24_EnableMaxRetransmitIRQ+0x22>
		config |= (1<<NRF24_MAX_RT);
 8002532:	7bfb      	ldrb	r3, [r7, #15]
 8002534:	f043 0310 	orr.w	r3, r3, #16
 8002538:	73fb      	strb	r3, [r7, #15]
 800253a:	e003      	b.n	8002544 <nRF24_EnableMaxRetransmitIRQ+0x2a>
	else
		config &= ~(1<<NRF24_MAX_RT);
 800253c:	7bfb      	ldrb	r3, [r7, #15]
 800253e:	f023 0310 	bic.w	r3, r3, #16
 8002542:	73fb      	strb	r3, [r7, #15]

	nRF24_WriteConfig(config);
 8002544:	7bfb      	ldrb	r3, [r7, #15]
 8002546:	4618      	mov	r0, r3
 8002548:	f7ff fd74 	bl	8002034 <nRF24_WriteConfig>
}
 800254c:	bf00      	nop
 800254e:	3710      	adds	r7, #16
 8002550:	46bd      	mov	sp, r7
 8002552:	bd80      	pop	{r7, pc}

08002554 <nRF24_WriteTXPayload>:

void nRF24_WriteTXPayload(uint8_t * data/*, uint8_t size*/)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b082      	sub	sp, #8
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
	nRF24_WriteRegisters(NRF24_CMD_W_TX_PAYLOAD, data, NRF24_PAYLOAD_SIZE);
 800255c:	2220      	movs	r2, #32
 800255e:	6879      	ldr	r1, [r7, #4]
 8002560:	20a0      	movs	r0, #160	@ 0xa0
 8002562:	f7ff fce5 	bl	8001f30 <nRF24_WriteRegisters>
	//nRF24_WaitTX();
}
 8002566:	bf00      	nop
 8002568:	3708      	adds	r7, #8
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}
	...

08002570 <nRF24_WaitTX>:

void nRF24_WaitTX()
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b082      	sub	sp, #8
 8002574:	af00      	add	r7, sp, #0
	uint8_t status;
	NRF24_CE_HIGH;
 8002576:	2201      	movs	r2, #1
 8002578:	2140      	movs	r1, #64	@ 0x40
 800257a:	4810      	ldr	r0, [pc, #64]	@ (80025bc <nRF24_WaitTX+0x4c>)
 800257c:	f00c f93a 	bl	800e7f4 <HAL_GPIO_WritePin>
	nRF24_Delay(1);
 8002580:	2001      	movs	r0, #1
 8002582:	f7ff fc2f 	bl	8001de4 <nRF24_Delay>
	NRF24_CE_LOW;
 8002586:	2200      	movs	r2, #0
 8002588:	2140      	movs	r1, #64	@ 0x40
 800258a:	480c      	ldr	r0, [pc, #48]	@ (80025bc <nRF24_WaitTX+0x4c>)
 800258c:	f00c f932 	bl	800e7f4 <HAL_GPIO_WritePin>
	do
	{
		nRF24_Delay(1);
 8002590:	2001      	movs	r0, #1
 8002592:	f7ff fc27 	bl	8001de4 <nRF24_Delay>
		status = nRF24_ReadStatus();
 8002596:	f7ff fda0 	bl	80020da <nRF24_ReadStatus>
 800259a:	4603      	mov	r3, r0
 800259c:	71fb      	strb	r3, [r7, #7]
	}while(!((status & (1<<NRF24_MAX_RT)) || (status & (1<<NRF24_TX_DS))));
 800259e:	79fb      	ldrb	r3, [r7, #7]
 80025a0:	f003 0310 	and.w	r3, r3, #16
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d104      	bne.n	80025b2 <nRF24_WaitTX+0x42>
 80025a8:	79fb      	ldrb	r3, [r7, #7]
 80025aa:	f003 0320 	and.w	r3, r3, #32
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d0ee      	beq.n	8002590 <nRF24_WaitTX+0x20>

}
 80025b2:	bf00      	nop
 80025b4:	3708      	adds	r7, #8
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}
 80025ba:	bf00      	nop
 80025bc:	58020400 	.word	0x58020400

080025c0 <nRF24_ReadRXPaylaod>:

void nRF24_ReadRXPaylaod(uint8_t *data/*, uint8_t *size*/)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b082      	sub	sp, #8
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
	nRF24_ReadRegisters(NRF24_CMD_R_RX_PAYLOAD, data, NRF24_PAYLOAD_SIZE);
 80025c8:	2220      	movs	r2, #32
 80025ca:	6879      	ldr	r1, [r7, #4]
 80025cc:	2061      	movs	r0, #97	@ 0x61
 80025ce:	f7ff fc65 	bl	8001e9c <nRF24_ReadRegisters>
	nRF24_WriteRegister(NRF24_STATUS, (1<<NRF24_RX_DR));
 80025d2:	2140      	movs	r1, #64	@ 0x40
 80025d4:	2007      	movs	r0, #7
 80025d6:	f7ff fc85 	bl	8001ee4 <nRF24_WriteRegister>

	if(nRF24_ReadStatus() & (1<<NRF24_TX_DS)){
 80025da:	f7ff fd7e 	bl	80020da <nRF24_ReadStatus>
 80025de:	4603      	mov	r3, r0
 80025e0:	f003 0320 	and.w	r3, r3, #32
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d003      	beq.n	80025f0 <nRF24_ReadRXPaylaod+0x30>
		nRF24_WriteRegister(NRF24_STATUS, (1<<NRF24_TX_DS));
 80025e8:	2120      	movs	r1, #32
 80025ea:	2007      	movs	r0, #7
 80025ec:	f7ff fc7a 	bl	8001ee4 <nRF24_WriteRegister>
//	nRF24_ReadRegisters(NRF24_CMD_R_RX_PAYLOAD, data, *size);
//
//	nRF24_WriteRegister(NRF24_STATUS, (1<NRF24_RX_DR));
//	if(nRF24_ReadStatus() & (1<<NRF24_TX_DS))
//		nRF24_WriteRegister(NRF24_STATUS, (1<<NRF24_TX_DS));
}
 80025f0:	bf00      	nop
 80025f2:	3708      	adds	r7, #8
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}

080025f8 <nRF24_IsBitSetInFifoStatus>:

	return 0;
}

uint8_t nRF24_IsBitSetInFifoStatus(uint8_t Bit)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b084      	sub	sp, #16
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	4603      	mov	r3, r0
 8002600:	71fb      	strb	r3, [r7, #7]
	uint8_t FifoStatus;

	FifoStatus = nRF24_ReadFifoStatus();
 8002602:	f000 f811 	bl	8002628 <nRF24_ReadFifoStatus>
 8002606:	4603      	mov	r3, r0
 8002608:	73fb      	strb	r3, [r7, #15]

	if(FifoStatus & (1<<Bit))
 800260a:	7bfa      	ldrb	r2, [r7, #15]
 800260c:	79fb      	ldrb	r3, [r7, #7]
 800260e:	fa42 f303 	asr.w	r3, r2, r3
 8002612:	f003 0301 	and.w	r3, r3, #1
 8002616:	2b00      	cmp	r3, #0
 8002618:	d001      	beq.n	800261e <nRF24_IsBitSetInFifoStatus+0x26>
	{
		return 1;
 800261a:	2301      	movs	r3, #1
 800261c:	e000      	b.n	8002620 <nRF24_IsBitSetInFifoStatus+0x28>
	}

	return 0;
 800261e:	2300      	movs	r3, #0
}
 8002620:	4618      	mov	r0, r3
 8002622:	3710      	adds	r7, #16
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}

08002628 <nRF24_ReadFifoStatus>:

uint8_t nRF24_ReadFifoStatus(void)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	af00      	add	r7, sp, #0
	return (nRF24_ReadRegister(NRF24_FIFO_STATUS));
 800262c:	2017      	movs	r0, #23
 800262e:	f7ff fc11 	bl	8001e54 <nRF24_ReadRegister>
 8002632:	4603      	mov	r3, r0
}
 8002634:	4618      	mov	r0, r3
 8002636:	bd80      	pop	{r7, pc}

08002638 <nRF24_Init>:



void nRF24_Init(SPI_HandleTypeDef *hspi)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b082      	sub	sp, #8
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
	hspi_nrf = hspi;
 8002640:	4a25      	ldr	r2, [pc, #148]	@ (80026d8 <nRF24_Init+0xa0>)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6013      	str	r3, [r2, #0]

	NRF24_CE_LOW;
 8002646:	2200      	movs	r2, #0
 8002648:	2140      	movs	r1, #64	@ 0x40
 800264a:	4824      	ldr	r0, [pc, #144]	@ (80026dc <nRF24_Init+0xa4>)
 800264c:	f00c f8d2 	bl	800e7f4 <HAL_GPIO_WritePin>
	NRF24_CSN_HIGH;
 8002650:	2201      	movs	r2, #1
 8002652:	2180      	movs	r1, #128	@ 0x80
 8002654:	4821      	ldr	r0, [pc, #132]	@ (80026dc <nRF24_Init+0xa4>)
 8002656:	f00c f8cd 	bl	800e7f4 <HAL_GPIO_WritePin>

	HAL_Delay(10); // Wait for radio power up
 800265a:	200a      	movs	r0, #10
 800265c:	f006 ff8e 	bl	800957c <HAL_Delay>

	nRF24_SetPALevel(NRF24_PA_PWR_0dBM); // Radio power
 8002660:	2003      	movs	r0, #3
 8002662:	f7ff fcf5 	bl	8002050 <nRF24_SetPALevel>
	nRF24_SetDataRate(NRF24_RF_DR_2MBPS); // Data Rate
 8002666:	2001      	movs	r0, #1
 8002668:	f7ff fd11 	bl	800208e <nRF24_SetDataRate>
	nRF24_EnableCRC(1); // Enable CRC
 800266c:	2001      	movs	r0, #1
 800266e:	f7ff fd7f 	bl	8002170 <nRF24_EnableCRC>
	nRF24_SetCRCLength(NRF24_CRC_WIDTH_1B); // CRC Length 1 byte
 8002672:	2000      	movs	r0, #0
 8002674:	f7ff fd99 	bl	80021aa <nRF24_SetCRCLength>
	nRF24_SetRetries(0x00, 0x00); // 1000us, 0 times
 8002678:	2100      	movs	r1, #0
 800267a:	2000      	movs	r0, #0
 800267c:	f7ff fdb2 	bl	80021e4 <nRF24_SetRetries>

#if (NRF24_DYNAMIC_PAYLOAD == 1)
	nRF24_WriteRegister(NRF24_FEATURE, nRF24_ReadRegister(NRF24_FEATURE) | (1<<NRF24_EN_DPL)); // Enable dynamic payload feature
	nRF24_WriteRegister(NRF24_DYNPD, 0x3F); // Enable dynamic payloads for all pipes
#else
	nRF24_WriteRegister(NRF24_DYNPD, 0); // Disable dynamic payloads for all pipes
 8002680:	2100      	movs	r1, #0
 8002682:	201c      	movs	r0, #28
 8002684:	f7ff fc2e 	bl	8001ee4 <nRF24_WriteRegister>
	nRF24_SetPayloadSize(0, NRF24_PAYLOAD_SIZE); // Set 32 bytes payload for pipe 0
 8002688:	2120      	movs	r1, #32
 800268a:	2000      	movs	r0, #0
 800268c:	f7ff fdd6 	bl	800223c <nRF24_SetPayloadSize>
#endif
	nRF24_SetRFChannel(15); // Set RF channel for transmission
 8002690:	200f      	movs	r0, #15
 8002692:	f7ff fdc2 	bl	800221a <nRF24_SetRFChannel>
	nRF24_EnablePipe(0, 1); // Enable pipe 0
 8002696:	2101      	movs	r1, #1
 8002698:	2000      	movs	r0, #0
 800269a:	f7ff fdeb 	bl	8002274 <nRF24_EnablePipe>
	nRF24_AutoACK(0, 1); // Enable auto ACK for pipe 0
 800269e:	2101      	movs	r1, #1
 80026a0:	2000      	movs	r0, #0
 80026a2:	f7ff fe1c 	bl	80022de <nRF24_AutoACK>
	nRF24_SetAddressWidth(NRF24_ADDR_SIZE); // Set address size
 80026a6:	2003      	movs	r0, #3
 80026a8:	f7ff fe4e 	bl	8002348 <nRF24_SetAddressWidth>

	HAL_Delay(1);
 80026ac:	2001      	movs	r0, #1
 80026ae:	f006 ff65 	bl	800957c <HAL_Delay>

	nRF24_EnableRXDataReadyIRQ(1);
 80026b2:	2001      	movs	r0, #1
 80026b4:	f7ff fef7 	bl	80024a6 <nRF24_EnableRXDataReadyIRQ>
	nRF24_EnableTXDataSentIRQ(0);
 80026b8:	2000      	movs	r0, #0
 80026ba:	f7ff ff11 	bl	80024e0 <nRF24_EnableTXDataSentIRQ>
	nRF24_EnableMaxRetransmitIRQ(0);
 80026be:	2000      	movs	r0, #0
 80026c0:	f7ff ff2b 	bl	800251a <nRF24_EnableMaxRetransmitIRQ>

	HAL_Delay(1);
 80026c4:	2001      	movs	r0, #1
 80026c6:	f006 ff59 	bl	800957c <HAL_Delay>

	nRF24_ClearInterrupts();
 80026ca:	f7ff fed9 	bl	8002480 <nRF24_ClearInterrupts>


}
 80026ce:	bf00      	nop
 80026d0:	3708      	adds	r7, #8
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	bf00      	nop
 80026d8:	240000a8 	.word	0x240000a8
 80026dc:	58020400 	.word	0x58020400

080026e0 <nRF24_Inittest>:
void nRF24_Inittest(void)
{
 80026e0:	b480      	push	{r7}
 80026e2:	af00      	add	r7, sp, #0
//	xz[5] = nRF24_ReadRegister(NRF24_EN_RXADDR);
//	xz[6] = nRF24_ReadRegister(NRF24_EN_AA);
//	xz[7] = nRF24_ReadRegister(NRF24_SETUP_AW);
//	xz[8] = nRF24_ReadConfig();

}
 80026e4:	bf00      	nop
 80026e6:	46bd      	mov	sp, r7
 80026e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ec:	4770      	bx	lr
	...

080026f0 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80026f0:	b480      	push	{r7}
 80026f2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80026f4:	f3bf 8f4f 	dsb	sy
}
 80026f8:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80026fa:	4b06      	ldr	r3, [pc, #24]	@ (8002714 <__NVIC_SystemReset+0x24>)
 80026fc:	68db      	ldr	r3, [r3, #12]
 80026fe:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002702:	4904      	ldr	r1, [pc, #16]	@ (8002714 <__NVIC_SystemReset+0x24>)
 8002704:	4b04      	ldr	r3, [pc, #16]	@ (8002718 <__NVIC_SystemReset+0x28>)
 8002706:	4313      	orrs	r3, r2
 8002708:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800270a:	f3bf 8f4f 	dsb	sy
}
 800270e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8002710:	bf00      	nop
 8002712:	e7fd      	b.n	8002710 <__NVIC_SystemReset+0x20>
 8002714:	e000ed00 	.word	0xe000ed00
 8002718:	05fa0004 	.word	0x05fa0004

0800271c <interpretcommand>:
#include "main.h"

void interpretcommand(void){
 800271c:	b480      	push	{r7}
 800271e:	b087      	sub	sp, #28
 8002720:	af00      	add	r7, sp, #0

	uint8_t vcount = 0, J1 = 0;
 8002722:	2300      	movs	r3, #0
 8002724:	75fb      	strb	r3, [r7, #23]
 8002726:	2300      	movs	r3, #0
 8002728:	75bb      	strb	r3, [r7, #22]
	char value1[10];


	commandready = 0;
 800272a:	4b1f      	ldr	r3, [pc, #124]	@ (80027a8 <interpretcommand+0x8c>)
 800272c:	2200      	movs	r2, #0
 800272e:	701a      	strb	r2, [r3, #0]

	for(int j = 0; j < 80; j++){
 8002730:	2300      	movs	r3, #0
 8002732:	613b      	str	r3, [r7, #16]
 8002734:	e02e      	b.n	8002794 <interpretcommand+0x78>

		if(words[j] == ' '){
 8002736:	4a1d      	ldr	r2, [pc, #116]	@ (80027ac <interpretcommand+0x90>)
 8002738:	693b      	ldr	r3, [r7, #16]
 800273a:	4413      	add	r3, r2
 800273c:	781b      	ldrb	r3, [r3, #0]
 800273e:	2b20      	cmp	r3, #32
 8002740:	d102      	bne.n	8002748 <interpretcommand+0x2c>
			vcount++;
 8002742:	7dfb      	ldrb	r3, [r7, #23]
 8002744:	3301      	adds	r3, #1
 8002746:	75fb      	strb	r3, [r7, #23]
		}
		if(vcount == 0){
 8002748:	7dfb      	ldrb	r3, [r7, #23]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d108      	bne.n	8002760 <interpretcommand+0x44>
			command[j] = words[j];
 800274e:	4a17      	ldr	r2, [pc, #92]	@ (80027ac <interpretcommand+0x90>)
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	4413      	add	r3, r2
 8002754:	7819      	ldrb	r1, [r3, #0]
 8002756:	4a16      	ldr	r2, [pc, #88]	@ (80027b0 <interpretcommand+0x94>)
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	4413      	add	r3, r2
 800275c:	460a      	mov	r2, r1
 800275e:	701a      	strb	r2, [r3, #0]
		}
		if(vcount == 1){
 8002760:	7dfb      	ldrb	r3, [r7, #23]
 8002762:	2b01      	cmp	r3, #1
 8002764:	d113      	bne.n	800278e <interpretcommand+0x72>
			value1[J1] = words[j];
 8002766:	7dbb      	ldrb	r3, [r7, #22]
 8002768:	4910      	ldr	r1, [pc, #64]	@ (80027ac <interpretcommand+0x90>)
 800276a:	693a      	ldr	r2, [r7, #16]
 800276c:	440a      	add	r2, r1
 800276e:	7812      	ldrb	r2, [r2, #0]
 8002770:	3318      	adds	r3, #24
 8002772:	443b      	add	r3, r7
 8002774:	f803 2c14 	strb.w	r2, [r3, #-20]
			UASRT_PID_VAL[J1] = (int)value1[J1];//;printf("%d", value11[i]);
 8002778:	7dba      	ldrb	r2, [r7, #22]
 800277a:	7dbb      	ldrb	r3, [r7, #22]
 800277c:	3218      	adds	r2, #24
 800277e:	443a      	add	r2, r7
 8002780:	f812 1c14 	ldrb.w	r1, [r2, #-20]
 8002784:	4a0b      	ldr	r2, [pc, #44]	@ (80027b4 <interpretcommand+0x98>)
 8002786:	54d1      	strb	r1, [r2, r3]
			J1++;
 8002788:	7dbb      	ldrb	r3, [r7, #22]
 800278a:	3301      	adds	r3, #1
 800278c:	75bb      	strb	r3, [r7, #22]
	for(int j = 0; j < 80; j++){
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	3301      	adds	r3, #1
 8002792:	613b      	str	r3, [r7, #16]
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	2b4f      	cmp	r3, #79	@ 0x4f
 8002798:	ddcd      	ble.n	8002736 <interpretcommand+0x1a>
		}
	}
}
 800279a:	bf00      	nop
 800279c:	bf00      	nop
 800279e:	371c      	adds	r7, #28
 80027a0:	46bd      	mov	sp, r7
 80027a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a6:	4770      	bx	lr
 80027a8:	000041de 	.word	0x000041de
 80027ac:	000041d4 	.word	0x000041d4
 80027b0:	000041d0 	.word	0x000041d0
 80027b4:	000041c0 	.word	0x000041c0

080027b8 <executecommand>:

void executecommand(char command[], uint8_t value1[]){
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b084      	sub	sp, #16
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
 80027c0:	6039      	str	r1, [r7, #0]

	if(command[0] == 'P')
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	781b      	ldrb	r3, [r3, #0]
 80027c6:	2b50      	cmp	r3, #80	@ 0x50
 80027c8:	d14c      	bne.n	8002864 <executecommand+0xac>
	{
		p_pitchfactor = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 80027ca:	4bd5      	ldr	r3, [pc, #852]	@ (8002b20 <executecommand+0x368>)
 80027cc:	785b      	ldrb	r3, [r3, #1]
 80027ce:	ee07 3a90 	vmov	s15, r3
 80027d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027d6:	ed9f 7ad3 	vldr	s14, [pc, #844]	@ 8002b24 <executecommand+0x36c>
 80027da:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80027de:	ed9f 7ad2 	vldr	s14, [pc, #840]	@ 8002b28 <executecommand+0x370>
 80027e2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80027e6:	4bce      	ldr	r3, [pc, #824]	@ (8002b20 <executecommand+0x368>)
 80027e8:	789b      	ldrb	r3, [r3, #2]
 80027ea:	ee07 3a90 	vmov	s15, r3
 80027ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027f2:	eddf 6acc 	vldr	s13, [pc, #816]	@ 8002b24 <executecommand+0x36c>
 80027f6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80027fa:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 80027fe:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002802:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002806:	4bc6      	ldr	r3, [pc, #792]	@ (8002b20 <executecommand+0x368>)
 8002808:	78db      	ldrb	r3, [r3, #3]
 800280a:	ee07 3a90 	vmov	s15, r3
 800280e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002812:	eddf 6ac4 	vldr	s13, [pc, #784]	@ 8002b24 <executecommand+0x36c>
 8002816:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800281a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800281e:	4bc0      	ldr	r3, [pc, #768]	@ (8002b20 <executecommand+0x368>)
 8002820:	791b      	ldrb	r3, [r3, #4]
 8002822:	ee07 3a90 	vmov	s15, r3
 8002826:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800282a:	eddf 6abe 	vldr	s13, [pc, #760]	@ 8002b24 <executecommand+0x36c>
 800282e:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002832:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8002836:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800283a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800283e:	4bb8      	ldr	r3, [pc, #736]	@ (8002b20 <executecommand+0x368>)
 8002840:	795b      	ldrb	r3, [r3, #5]
 8002842:	ee07 3a90 	vmov	s15, r3
 8002846:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800284a:	eddf 6ab6 	vldr	s13, [pc, #728]	@ 8002b24 <executecommand+0x36c>
 800284e:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002852:	ed9f 6ab5 	vldr	s12, [pc, #724]	@ 8002b28 <executecommand+0x370>
 8002856:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800285a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800285e:	4bb3      	ldr	r3, [pc, #716]	@ (8002b2c <executecommand+0x374>)
 8002860:	edc3 7a00 	vstr	s15, [r3]
	}

	if(command[0] == 'I')
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	781b      	ldrb	r3, [r3, #0]
 8002868:	2b49      	cmp	r3, #73	@ 0x49
 800286a:	d14f      	bne.n	800290c <executecommand+0x154>
	{
		i_pitchfactor = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 800286c:	4bac      	ldr	r3, [pc, #688]	@ (8002b20 <executecommand+0x368>)
 800286e:	785b      	ldrb	r3, [r3, #1]
 8002870:	ee07 3a90 	vmov	s15, r3
 8002874:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002878:	ed9f 7aaa 	vldr	s14, [pc, #680]	@ 8002b24 <executecommand+0x36c>
 800287c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002880:	ed9f 7aa9 	vldr	s14, [pc, #676]	@ 8002b28 <executecommand+0x370>
 8002884:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002888:	4ba5      	ldr	r3, [pc, #660]	@ (8002b20 <executecommand+0x368>)
 800288a:	789b      	ldrb	r3, [r3, #2]
 800288c:	ee07 3a90 	vmov	s15, r3
 8002890:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002894:	eddf 6aa3 	vldr	s13, [pc, #652]	@ 8002b24 <executecommand+0x36c>
 8002898:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800289c:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 80028a0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80028a4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80028a8:	4b9d      	ldr	r3, [pc, #628]	@ (8002b20 <executecommand+0x368>)
 80028aa:	78db      	ldrb	r3, [r3, #3]
 80028ac:	ee07 3a90 	vmov	s15, r3
 80028b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028b4:	eddf 6a9b 	vldr	s13, [pc, #620]	@ 8002b24 <executecommand+0x36c>
 80028b8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80028bc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80028c0:	4b97      	ldr	r3, [pc, #604]	@ (8002b20 <executecommand+0x368>)
 80028c2:	791b      	ldrb	r3, [r3, #4]
 80028c4:	ee07 3a90 	vmov	s15, r3
 80028c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028cc:	eddf 6a95 	vldr	s13, [pc, #596]	@ 8002b24 <executecommand+0x36c>
 80028d0:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80028d4:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 80028d8:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80028dc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80028e0:	4b8f      	ldr	r3, [pc, #572]	@ (8002b20 <executecommand+0x368>)
 80028e2:	795b      	ldrb	r3, [r3, #5]
 80028e4:	ee07 3a90 	vmov	s15, r3
 80028e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028ec:	eddf 6a8d 	vldr	s13, [pc, #564]	@ 8002b24 <executecommand+0x36c>
 80028f0:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80028f4:	ed9f 6a8c 	vldr	s12, [pc, #560]	@ 8002b28 <executecommand+0x370>
 80028f8:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80028fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002900:	4b8b      	ldr	r3, [pc, #556]	@ (8002b30 <executecommand+0x378>)
 8002902:	edc3 7a00 	vstr	s15, [r3]
		error_sum_pitch = 0;
 8002906:	4b8b      	ldr	r3, [pc, #556]	@ (8002b34 <executecommand+0x37c>)
 8002908:	2200      	movs	r2, #0
 800290a:	601a      	str	r2, [r3, #0]
	}

	if(command[0] == 'D')
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	781b      	ldrb	r3, [r3, #0]
 8002910:	2b44      	cmp	r3, #68	@ 0x44
 8002912:	d14c      	bne.n	80029ae <executecommand+0x1f6>
	{
		d_pitchfactor = ((((float)UASRT_PID_VAL[1])-48)*1000) + ((((float)UASRT_PID_VAL[2])-48)*100) + ((((float)UASRT_PID_VAL[3])-48)*10) + ((((float)UASRT_PID_VAL[4])-48)) + ((((float)UASRT_PID_VAL[5])-48)/10);
 8002914:	4b82      	ldr	r3, [pc, #520]	@ (8002b20 <executecommand+0x368>)
 8002916:	785b      	ldrb	r3, [r3, #1]
 8002918:	ee07 3a90 	vmov	s15, r3
 800291c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002920:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 8002b24 <executecommand+0x36c>
 8002924:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002928:	ed9f 7a83 	vldr	s14, [pc, #524]	@ 8002b38 <executecommand+0x380>
 800292c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002930:	4b7b      	ldr	r3, [pc, #492]	@ (8002b20 <executecommand+0x368>)
 8002932:	789b      	ldrb	r3, [r3, #2]
 8002934:	ee07 3a90 	vmov	s15, r3
 8002938:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800293c:	eddf 6a79 	vldr	s13, [pc, #484]	@ 8002b24 <executecommand+0x36c>
 8002940:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002944:	eddf 6a78 	vldr	s13, [pc, #480]	@ 8002b28 <executecommand+0x370>
 8002948:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800294c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002950:	4b73      	ldr	r3, [pc, #460]	@ (8002b20 <executecommand+0x368>)
 8002952:	78db      	ldrb	r3, [r3, #3]
 8002954:	ee07 3a90 	vmov	s15, r3
 8002958:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800295c:	eddf 6a71 	vldr	s13, [pc, #452]	@ 8002b24 <executecommand+0x36c>
 8002960:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002964:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002968:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800296c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002970:	4b6b      	ldr	r3, [pc, #428]	@ (8002b20 <executecommand+0x368>)
 8002972:	791b      	ldrb	r3, [r3, #4]
 8002974:	ee07 3a90 	vmov	s15, r3
 8002978:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800297c:	eddf 6a69 	vldr	s13, [pc, #420]	@ 8002b24 <executecommand+0x36c>
 8002980:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002984:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002988:	4b65      	ldr	r3, [pc, #404]	@ (8002b20 <executecommand+0x368>)
 800298a:	795b      	ldrb	r3, [r3, #5]
 800298c:	ee07 3a90 	vmov	s15, r3
 8002990:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002994:	eddf 6a63 	vldr	s13, [pc, #396]	@ 8002b24 <executecommand+0x36c>
 8002998:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800299c:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 80029a0:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80029a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029a8:	4b64      	ldr	r3, [pc, #400]	@ (8002b3c <executecommand+0x384>)
 80029aa:	edc3 7a00 	vstr	s15, [r3]
	}
	if(command[0] == 'p')
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	781b      	ldrb	r3, [r3, #0]
 80029b2:	2b70      	cmp	r3, #112	@ 0x70
 80029b4:	d14c      	bne.n	8002a50 <executecommand+0x298>
	{
		p_angular_rate_pitchfactor = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 80029b6:	4b5a      	ldr	r3, [pc, #360]	@ (8002b20 <executecommand+0x368>)
 80029b8:	785b      	ldrb	r3, [r3, #1]
 80029ba:	ee07 3a90 	vmov	s15, r3
 80029be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029c2:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 8002b24 <executecommand+0x36c>
 80029c6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80029ca:	ed9f 7a57 	vldr	s14, [pc, #348]	@ 8002b28 <executecommand+0x370>
 80029ce:	ee27 7a87 	vmul.f32	s14, s15, s14
 80029d2:	4b53      	ldr	r3, [pc, #332]	@ (8002b20 <executecommand+0x368>)
 80029d4:	789b      	ldrb	r3, [r3, #2]
 80029d6:	ee07 3a90 	vmov	s15, r3
 80029da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029de:	eddf 6a51 	vldr	s13, [pc, #324]	@ 8002b24 <executecommand+0x36c>
 80029e2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80029e6:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 80029ea:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80029ee:	ee37 7a27 	vadd.f32	s14, s14, s15
 80029f2:	4b4b      	ldr	r3, [pc, #300]	@ (8002b20 <executecommand+0x368>)
 80029f4:	78db      	ldrb	r3, [r3, #3]
 80029f6:	ee07 3a90 	vmov	s15, r3
 80029fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029fe:	eddf 6a49 	vldr	s13, [pc, #292]	@ 8002b24 <executecommand+0x36c>
 8002a02:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002a06:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a0a:	4b45      	ldr	r3, [pc, #276]	@ (8002b20 <executecommand+0x368>)
 8002a0c:	791b      	ldrb	r3, [r3, #4]
 8002a0e:	ee07 3a90 	vmov	s15, r3
 8002a12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a16:	eddf 6a43 	vldr	s13, [pc, #268]	@ 8002b24 <executecommand+0x36c>
 8002a1a:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002a1e:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8002a22:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002a26:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a2a:	4b3d      	ldr	r3, [pc, #244]	@ (8002b20 <executecommand+0x368>)
 8002a2c:	795b      	ldrb	r3, [r3, #5]
 8002a2e:	ee07 3a90 	vmov	s15, r3
 8002a32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a36:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8002b24 <executecommand+0x36c>
 8002a3a:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002a3e:	ed9f 6a3a 	vldr	s12, [pc, #232]	@ 8002b28 <executecommand+0x370>
 8002a42:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002a46:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a4a:	4b3d      	ldr	r3, [pc, #244]	@ (8002b40 <executecommand+0x388>)
 8002a4c:	edc3 7a00 	vstr	s15, [r3]
	}

	if(command[0] == 'i')
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	781b      	ldrb	r3, [r3, #0]
 8002a54:	2b69      	cmp	r3, #105	@ 0x69
 8002a56:	d14f      	bne.n	8002af8 <executecommand+0x340>
	{
		i_angular_rate_pitchfactor = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 8002a58:	4b31      	ldr	r3, [pc, #196]	@ (8002b20 <executecommand+0x368>)
 8002a5a:	785b      	ldrb	r3, [r3, #1]
 8002a5c:	ee07 3a90 	vmov	s15, r3
 8002a60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a64:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8002b24 <executecommand+0x36c>
 8002a68:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002a6c:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 8002b28 <executecommand+0x370>
 8002a70:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002a74:	4b2a      	ldr	r3, [pc, #168]	@ (8002b20 <executecommand+0x368>)
 8002a76:	789b      	ldrb	r3, [r3, #2]
 8002a78:	ee07 3a90 	vmov	s15, r3
 8002a7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a80:	eddf 6a28 	vldr	s13, [pc, #160]	@ 8002b24 <executecommand+0x36c>
 8002a84:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002a88:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002a8c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002a90:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a94:	4b22      	ldr	r3, [pc, #136]	@ (8002b20 <executecommand+0x368>)
 8002a96:	78db      	ldrb	r3, [r3, #3]
 8002a98:	ee07 3a90 	vmov	s15, r3
 8002a9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002aa0:	eddf 6a20 	vldr	s13, [pc, #128]	@ 8002b24 <executecommand+0x36c>
 8002aa4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002aa8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002aac:	4b1c      	ldr	r3, [pc, #112]	@ (8002b20 <executecommand+0x368>)
 8002aae:	791b      	ldrb	r3, [r3, #4]
 8002ab0:	ee07 3a90 	vmov	s15, r3
 8002ab4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ab8:	eddf 6a1a 	vldr	s13, [pc, #104]	@ 8002b24 <executecommand+0x36c>
 8002abc:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002ac0:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8002ac4:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002ac8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002acc:	4b14      	ldr	r3, [pc, #80]	@ (8002b20 <executecommand+0x368>)
 8002ace:	795b      	ldrb	r3, [r3, #5]
 8002ad0:	ee07 3a90 	vmov	s15, r3
 8002ad4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ad8:	eddf 6a12 	vldr	s13, [pc, #72]	@ 8002b24 <executecommand+0x36c>
 8002adc:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002ae0:	ed9f 6a11 	vldr	s12, [pc, #68]	@ 8002b28 <executecommand+0x370>
 8002ae4:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002ae8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002aec:	4b15      	ldr	r3, [pc, #84]	@ (8002b44 <executecommand+0x38c>)
 8002aee:	edc3 7a00 	vstr	s15, [r3]
		error_sum_angular_rate_pitch = 0;
 8002af2:	4b15      	ldr	r3, [pc, #84]	@ (8002b48 <executecommand+0x390>)
 8002af4:	2200      	movs	r2, #0
 8002af6:	601a      	str	r2, [r3, #0]
	}

	if(command[0] == 'd')
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	781b      	ldrb	r3, [r3, #0]
 8002afc:	2b64      	cmp	r3, #100	@ 0x64
 8002afe:	d164      	bne.n	8002bca <executecommand+0x412>
	{
		d_angular_rate_pitchfactor = ((((float)UASRT_PID_VAL[1])-48)*1000) + ((((float)UASRT_PID_VAL[2])-48)*100) + ((((float)UASRT_PID_VAL[3])-48)*10) + ((((float)UASRT_PID_VAL[4])-48)) + ((((float)UASRT_PID_VAL[5])-48)/10);
 8002b00:	4b07      	ldr	r3, [pc, #28]	@ (8002b20 <executecommand+0x368>)
 8002b02:	785b      	ldrb	r3, [r3, #1]
 8002b04:	ee07 3a90 	vmov	s15, r3
 8002b08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b0c:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8002b24 <executecommand+0x36c>
 8002b10:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002b14:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8002b38 <executecommand+0x380>
 8002b18:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002b1c:	e016      	b.n	8002b4c <executecommand+0x394>
 8002b1e:	bf00      	nop
 8002b20:	000041c0 	.word	0x000041c0
 8002b24:	42400000 	.word	0x42400000
 8002b28:	42c80000 	.word	0x42c80000
 8002b2c:	000040ec 	.word	0x000040ec
 8002b30:	000040f8 	.word	0x000040f8
 8002b34:	000040bc 	.word	0x000040bc
 8002b38:	447a0000 	.word	0x447a0000
 8002b3c:	00004104 	.word	0x00004104
 8002b40:	0000414c 	.word	0x0000414c
 8002b44:	00004158 	.word	0x00004158
 8002b48:	000040c8 	.word	0x000040c8
 8002b4c:	4bd3      	ldr	r3, [pc, #844]	@ (8002e9c <executecommand+0x6e4>)
 8002b4e:	789b      	ldrb	r3, [r3, #2]
 8002b50:	ee07 3a90 	vmov	s15, r3
 8002b54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b58:	eddf 6ad1 	vldr	s13, [pc, #836]	@ 8002ea0 <executecommand+0x6e8>
 8002b5c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002b60:	eddf 6ad0 	vldr	s13, [pc, #832]	@ 8002ea4 <executecommand+0x6ec>
 8002b64:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002b68:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b6c:	4bcb      	ldr	r3, [pc, #812]	@ (8002e9c <executecommand+0x6e4>)
 8002b6e:	78db      	ldrb	r3, [r3, #3]
 8002b70:	ee07 3a90 	vmov	s15, r3
 8002b74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b78:	eddf 6ac9 	vldr	s13, [pc, #804]	@ 8002ea0 <executecommand+0x6e8>
 8002b7c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002b80:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002b84:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002b88:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b8c:	4bc3      	ldr	r3, [pc, #780]	@ (8002e9c <executecommand+0x6e4>)
 8002b8e:	791b      	ldrb	r3, [r3, #4]
 8002b90:	ee07 3a90 	vmov	s15, r3
 8002b94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b98:	eddf 6ac1 	vldr	s13, [pc, #772]	@ 8002ea0 <executecommand+0x6e8>
 8002b9c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002ba0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ba4:	4bbd      	ldr	r3, [pc, #756]	@ (8002e9c <executecommand+0x6e4>)
 8002ba6:	795b      	ldrb	r3, [r3, #5]
 8002ba8:	ee07 3a90 	vmov	s15, r3
 8002bac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002bb0:	eddf 6abb 	vldr	s13, [pc, #748]	@ 8002ea0 <executecommand+0x6e8>
 8002bb4:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002bb8:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8002bbc:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002bc0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bc4:	4bb8      	ldr	r3, [pc, #736]	@ (8002ea8 <executecommand+0x6f0>)
 8002bc6:	edc3 7a00 	vstr	s15, [r3]
	}
	if(command[0] == 'F')
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	781b      	ldrb	r3, [r3, #0]
 8002bce:	2b46      	cmp	r3, #70	@ 0x46
 8002bd0:	d150      	bne.n	8002c74 <executecommand+0x4bc>
	{
		FDP_D_Gain_AR = ((((float)UASRT_PID_VAL[1])-48)*1000) + ((((float)UASRT_PID_VAL[2])-48)*100) + ((((float)UASRT_PID_VAL[3])-48)*10) + ((((float)UASRT_PID_VAL[4])-48)) + ((((float)UASRT_PID_VAL[5])-48)/10);
 8002bd2:	4bb2      	ldr	r3, [pc, #712]	@ (8002e9c <executecommand+0x6e4>)
 8002bd4:	785b      	ldrb	r3, [r3, #1]
 8002bd6:	ee07 3a90 	vmov	s15, r3
 8002bda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002bde:	ed9f 7ab0 	vldr	s14, [pc, #704]	@ 8002ea0 <executecommand+0x6e8>
 8002be2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002be6:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 8002eac <executecommand+0x6f4>
 8002bea:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002bee:	4bab      	ldr	r3, [pc, #684]	@ (8002e9c <executecommand+0x6e4>)
 8002bf0:	789b      	ldrb	r3, [r3, #2]
 8002bf2:	ee07 3a90 	vmov	s15, r3
 8002bf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002bfa:	eddf 6aa9 	vldr	s13, [pc, #676]	@ 8002ea0 <executecommand+0x6e8>
 8002bfe:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002c02:	eddf 6aa8 	vldr	s13, [pc, #672]	@ 8002ea4 <executecommand+0x6ec>
 8002c06:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002c0a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c0e:	4ba3      	ldr	r3, [pc, #652]	@ (8002e9c <executecommand+0x6e4>)
 8002c10:	78db      	ldrb	r3, [r3, #3]
 8002c12:	ee07 3a90 	vmov	s15, r3
 8002c16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c1a:	eddf 6aa1 	vldr	s13, [pc, #644]	@ 8002ea0 <executecommand+0x6e8>
 8002c1e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002c22:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002c26:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002c2a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c2e:	4b9b      	ldr	r3, [pc, #620]	@ (8002e9c <executecommand+0x6e4>)
 8002c30:	791b      	ldrb	r3, [r3, #4]
 8002c32:	ee07 3a90 	vmov	s15, r3
 8002c36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c3a:	eddf 6a99 	vldr	s13, [pc, #612]	@ 8002ea0 <executecommand+0x6e8>
 8002c3e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002c42:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c46:	4b95      	ldr	r3, [pc, #596]	@ (8002e9c <executecommand+0x6e4>)
 8002c48:	795b      	ldrb	r3, [r3, #5]
 8002c4a:	ee07 3a90 	vmov	s15, r3
 8002c4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c52:	eddf 6a93 	vldr	s13, [pc, #588]	@ 8002ea0 <executecommand+0x6e8>
 8002c56:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002c5a:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8002c5e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002c62:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c6a:	ee17 3a90 	vmov	r3, s15
 8002c6e:	b29a      	uxth	r2, r3
 8002c70:	4b8f      	ldr	r3, [pc, #572]	@ (8002eb0 <executecommand+0x6f8>)
 8002c72:	801a      	strh	r2, [r3, #0]
	}
	if(command[0] == 'f')
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	781b      	ldrb	r3, [r3, #0]
 8002c78:	2b66      	cmp	r3, #102	@ 0x66
 8002c7a:	d150      	bne.n	8002d1e <executecommand+0x566>
	{
		FDP_D_Gain = ((((float)UASRT_PID_VAL[1])-48)*1000) + ((((float)UASRT_PID_VAL[2])-48)*100) + ((((float)UASRT_PID_VAL[3])-48)*10) + ((((float)UASRT_PID_VAL[4])-48)) + ((((float)UASRT_PID_VAL[5])-48)/10);
 8002c7c:	4b87      	ldr	r3, [pc, #540]	@ (8002e9c <executecommand+0x6e4>)
 8002c7e:	785b      	ldrb	r3, [r3, #1]
 8002c80:	ee07 3a90 	vmov	s15, r3
 8002c84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c88:	ed9f 7a85 	vldr	s14, [pc, #532]	@ 8002ea0 <executecommand+0x6e8>
 8002c8c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002c90:	ed9f 7a86 	vldr	s14, [pc, #536]	@ 8002eac <executecommand+0x6f4>
 8002c94:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002c98:	4b80      	ldr	r3, [pc, #512]	@ (8002e9c <executecommand+0x6e4>)
 8002c9a:	789b      	ldrb	r3, [r3, #2]
 8002c9c:	ee07 3a90 	vmov	s15, r3
 8002ca0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ca4:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 8002ea0 <executecommand+0x6e8>
 8002ca8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002cac:	eddf 6a7d 	vldr	s13, [pc, #500]	@ 8002ea4 <executecommand+0x6ec>
 8002cb0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002cb4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002cb8:	4b78      	ldr	r3, [pc, #480]	@ (8002e9c <executecommand+0x6e4>)
 8002cba:	78db      	ldrb	r3, [r3, #3]
 8002cbc:	ee07 3a90 	vmov	s15, r3
 8002cc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002cc4:	eddf 6a76 	vldr	s13, [pc, #472]	@ 8002ea0 <executecommand+0x6e8>
 8002cc8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002ccc:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002cd0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002cd4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002cd8:	4b70      	ldr	r3, [pc, #448]	@ (8002e9c <executecommand+0x6e4>)
 8002cda:	791b      	ldrb	r3, [r3, #4]
 8002cdc:	ee07 3a90 	vmov	s15, r3
 8002ce0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ce4:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8002ea0 <executecommand+0x6e8>
 8002ce8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002cec:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002cf0:	4b6a      	ldr	r3, [pc, #424]	@ (8002e9c <executecommand+0x6e4>)
 8002cf2:	795b      	ldrb	r3, [r3, #5]
 8002cf4:	ee07 3a90 	vmov	s15, r3
 8002cf8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002cfc:	eddf 6a68 	vldr	s13, [pc, #416]	@ 8002ea0 <executecommand+0x6e8>
 8002d00:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002d04:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8002d08:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002d0c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d10:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002d14:	ee17 3a90 	vmov	r3, s15
 8002d18:	b29a      	uxth	r2, r3
 8002d1a:	4b66      	ldr	r3, [pc, #408]	@ (8002eb4 <executecommand+0x6fc>)
 8002d1c:	801a      	strh	r2, [r3, #0]




//rool
	if(command[0] == 'a')
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	781b      	ldrb	r3, [r3, #0]
 8002d22:	2b61      	cmp	r3, #97	@ 0x61
 8002d24:	d14c      	bne.n	8002dc0 <executecommand+0x608>
		{
			p_roolfactor = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 8002d26:	4b5d      	ldr	r3, [pc, #372]	@ (8002e9c <executecommand+0x6e4>)
 8002d28:	785b      	ldrb	r3, [r3, #1]
 8002d2a:	ee07 3a90 	vmov	s15, r3
 8002d2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d32:	ed9f 7a5b 	vldr	s14, [pc, #364]	@ 8002ea0 <executecommand+0x6e8>
 8002d36:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002d3a:	ed9f 7a5a 	vldr	s14, [pc, #360]	@ 8002ea4 <executecommand+0x6ec>
 8002d3e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002d42:	4b56      	ldr	r3, [pc, #344]	@ (8002e9c <executecommand+0x6e4>)
 8002d44:	789b      	ldrb	r3, [r3, #2]
 8002d46:	ee07 3a90 	vmov	s15, r3
 8002d4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d4e:	eddf 6a54 	vldr	s13, [pc, #336]	@ 8002ea0 <executecommand+0x6e8>
 8002d52:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002d56:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002d5a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002d5e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d62:	4b4e      	ldr	r3, [pc, #312]	@ (8002e9c <executecommand+0x6e4>)
 8002d64:	78db      	ldrb	r3, [r3, #3]
 8002d66:	ee07 3a90 	vmov	s15, r3
 8002d6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d6e:	eddf 6a4c 	vldr	s13, [pc, #304]	@ 8002ea0 <executecommand+0x6e8>
 8002d72:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002d76:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d7a:	4b48      	ldr	r3, [pc, #288]	@ (8002e9c <executecommand+0x6e4>)
 8002d7c:	791b      	ldrb	r3, [r3, #4]
 8002d7e:	ee07 3a90 	vmov	s15, r3
 8002d82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d86:	eddf 6a46 	vldr	s13, [pc, #280]	@ 8002ea0 <executecommand+0x6e8>
 8002d8a:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002d8e:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8002d92:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002d96:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d9a:	4b40      	ldr	r3, [pc, #256]	@ (8002e9c <executecommand+0x6e4>)
 8002d9c:	795b      	ldrb	r3, [r3, #5]
 8002d9e:	ee07 3a90 	vmov	s15, r3
 8002da2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002da6:	eddf 6a3e 	vldr	s13, [pc, #248]	@ 8002ea0 <executecommand+0x6e8>
 8002daa:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002dae:	ed9f 6a3d 	vldr	s12, [pc, #244]	@ 8002ea4 <executecommand+0x6ec>
 8002db2:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002db6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002dba:	4b3f      	ldr	r3, [pc, #252]	@ (8002eb8 <executecommand+0x700>)
 8002dbc:	edc3 7a00 	vstr	s15, [r3]
		}

		if(command[0] == 'b')
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	781b      	ldrb	r3, [r3, #0]
 8002dc4:	2b62      	cmp	r3, #98	@ 0x62
 8002dc6:	d14f      	bne.n	8002e68 <executecommand+0x6b0>
		{
			i_roolfactor = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 8002dc8:	4b34      	ldr	r3, [pc, #208]	@ (8002e9c <executecommand+0x6e4>)
 8002dca:	785b      	ldrb	r3, [r3, #1]
 8002dcc:	ee07 3a90 	vmov	s15, r3
 8002dd0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002dd4:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8002ea0 <executecommand+0x6e8>
 8002dd8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002ddc:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8002ea4 <executecommand+0x6ec>
 8002de0:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002de4:	4b2d      	ldr	r3, [pc, #180]	@ (8002e9c <executecommand+0x6e4>)
 8002de6:	789b      	ldrb	r3, [r3, #2]
 8002de8:	ee07 3a90 	vmov	s15, r3
 8002dec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002df0:	eddf 6a2b 	vldr	s13, [pc, #172]	@ 8002ea0 <executecommand+0x6e8>
 8002df4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002df8:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002dfc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002e00:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e04:	4b25      	ldr	r3, [pc, #148]	@ (8002e9c <executecommand+0x6e4>)
 8002e06:	78db      	ldrb	r3, [r3, #3]
 8002e08:	ee07 3a90 	vmov	s15, r3
 8002e0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e10:	eddf 6a23 	vldr	s13, [pc, #140]	@ 8002ea0 <executecommand+0x6e8>
 8002e14:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002e18:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e1c:	4b1f      	ldr	r3, [pc, #124]	@ (8002e9c <executecommand+0x6e4>)
 8002e1e:	791b      	ldrb	r3, [r3, #4]
 8002e20:	ee07 3a90 	vmov	s15, r3
 8002e24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e28:	eddf 6a1d 	vldr	s13, [pc, #116]	@ 8002ea0 <executecommand+0x6e8>
 8002e2c:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002e30:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8002e34:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002e38:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e3c:	4b17      	ldr	r3, [pc, #92]	@ (8002e9c <executecommand+0x6e4>)
 8002e3e:	795b      	ldrb	r3, [r3, #5]
 8002e40:	ee07 3a90 	vmov	s15, r3
 8002e44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e48:	eddf 6a15 	vldr	s13, [pc, #84]	@ 8002ea0 <executecommand+0x6e8>
 8002e4c:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002e50:	ed9f 6a14 	vldr	s12, [pc, #80]	@ 8002ea4 <executecommand+0x6ec>
 8002e54:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002e58:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e5c:	4b17      	ldr	r3, [pc, #92]	@ (8002ebc <executecommand+0x704>)
 8002e5e:	edc3 7a00 	vstr	s15, [r3]
			error_sum_rool = 0;
 8002e62:	4b17      	ldr	r3, [pc, #92]	@ (8002ec0 <executecommand+0x708>)
 8002e64:	2200      	movs	r2, #0
 8002e66:	601a      	str	r2, [r3, #0]
		}

		if(command[0] == 'c')
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	781b      	ldrb	r3, [r3, #0]
 8002e6c:	2b63      	cmp	r3, #99	@ 0x63
 8002e6e:	d166      	bne.n	8002f3e <executecommand+0x786>
		{
			d_roolfactor = ((((float)UASRT_PID_VAL[1])-48)*1000) + ((((float)UASRT_PID_VAL[2])-48)*100) + ((((float)UASRT_PID_VAL[3])-48)*10) + ((((float)UASRT_PID_VAL[4])-48)) + ((((float)UASRT_PID_VAL[5])-48)/10);
 8002e70:	4b0a      	ldr	r3, [pc, #40]	@ (8002e9c <executecommand+0x6e4>)
 8002e72:	785b      	ldrb	r3, [r3, #1]
 8002e74:	ee07 3a90 	vmov	s15, r3
 8002e78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e7c:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8002ea0 <executecommand+0x6e8>
 8002e80:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002e84:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8002eac <executecommand+0x6f4>
 8002e88:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002e8c:	4b03      	ldr	r3, [pc, #12]	@ (8002e9c <executecommand+0x6e4>)
 8002e8e:	789b      	ldrb	r3, [r3, #2]
 8002e90:	ee07 3a90 	vmov	s15, r3
 8002e94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e98:	e018      	b.n	8002ecc <executecommand+0x714>
 8002e9a:	bf00      	nop
 8002e9c:	000041c0 	.word	0x000041c0
 8002ea0:	42400000 	.word	0x42400000
 8002ea4:	42c80000 	.word	0x42c80000
 8002ea8:	00004164 	.word	0x00004164
 8002eac:	447a0000 	.word	0x447a0000
 8002eb0:	0000407c 	.word	0x0000407c
 8002eb4:	0000407e 	.word	0x0000407e
 8002eb8:	000040f0 	.word	0x000040f0
 8002ebc:	000040fc 	.word	0x000040fc
 8002ec0:	000040c0 	.word	0x000040c0
 8002ec4:	42400000 	.word	0x42400000
 8002ec8:	42c80000 	.word	0x42c80000
 8002ecc:	ed5f 6a03 	vldr	s13, [pc, #-12]	@ 8002ec4 <executecommand+0x70c>
 8002ed0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002ed4:	ed5f 6a04 	vldr	s13, [pc, #-16]	@ 8002ec8 <executecommand+0x710>
 8002ed8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002edc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ee0:	4bd5      	ldr	r3, [pc, #852]	@ (8003238 <executecommand+0xa80>)
 8002ee2:	78db      	ldrb	r3, [r3, #3]
 8002ee4:	ee07 3a90 	vmov	s15, r3
 8002ee8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002eec:	eddf 6ad3 	vldr	s13, [pc, #844]	@ 800323c <executecommand+0xa84>
 8002ef0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002ef4:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002ef8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002efc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f00:	4bcd      	ldr	r3, [pc, #820]	@ (8003238 <executecommand+0xa80>)
 8002f02:	791b      	ldrb	r3, [r3, #4]
 8002f04:	ee07 3a90 	vmov	s15, r3
 8002f08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f0c:	eddf 6acb 	vldr	s13, [pc, #812]	@ 800323c <executecommand+0xa84>
 8002f10:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002f14:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f18:	4bc7      	ldr	r3, [pc, #796]	@ (8003238 <executecommand+0xa80>)
 8002f1a:	795b      	ldrb	r3, [r3, #5]
 8002f1c:	ee07 3a90 	vmov	s15, r3
 8002f20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f24:	eddf 6ac5 	vldr	s13, [pc, #788]	@ 800323c <executecommand+0xa84>
 8002f28:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002f2c:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8002f30:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002f34:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f38:	4bc1      	ldr	r3, [pc, #772]	@ (8003240 <executecommand+0xa88>)
 8002f3a:	edc3 7a00 	vstr	s15, [r3]
		}
		if(command[0] == 'e')
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	781b      	ldrb	r3, [r3, #0]
 8002f42:	2b65      	cmp	r3, #101	@ 0x65
 8002f44:	d14c      	bne.n	8002fe0 <executecommand+0x828>
		{
			p_angular_rate_roolfactor = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 8002f46:	4bbc      	ldr	r3, [pc, #752]	@ (8003238 <executecommand+0xa80>)
 8002f48:	785b      	ldrb	r3, [r3, #1]
 8002f4a:	ee07 3a90 	vmov	s15, r3
 8002f4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f52:	ed9f 7aba 	vldr	s14, [pc, #744]	@ 800323c <executecommand+0xa84>
 8002f56:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002f5a:	ed9f 7aba 	vldr	s14, [pc, #744]	@ 8003244 <executecommand+0xa8c>
 8002f5e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002f62:	4bb5      	ldr	r3, [pc, #724]	@ (8003238 <executecommand+0xa80>)
 8002f64:	789b      	ldrb	r3, [r3, #2]
 8002f66:	ee07 3a90 	vmov	s15, r3
 8002f6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f6e:	eddf 6ab3 	vldr	s13, [pc, #716]	@ 800323c <executecommand+0xa84>
 8002f72:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002f76:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002f7a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002f7e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f82:	4bad      	ldr	r3, [pc, #692]	@ (8003238 <executecommand+0xa80>)
 8002f84:	78db      	ldrb	r3, [r3, #3]
 8002f86:	ee07 3a90 	vmov	s15, r3
 8002f8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f8e:	eddf 6aab 	vldr	s13, [pc, #684]	@ 800323c <executecommand+0xa84>
 8002f92:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002f96:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f9a:	4ba7      	ldr	r3, [pc, #668]	@ (8003238 <executecommand+0xa80>)
 8002f9c:	791b      	ldrb	r3, [r3, #4]
 8002f9e:	ee07 3a90 	vmov	s15, r3
 8002fa2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fa6:	eddf 6aa5 	vldr	s13, [pc, #660]	@ 800323c <executecommand+0xa84>
 8002faa:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002fae:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8002fb2:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002fb6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002fba:	4b9f      	ldr	r3, [pc, #636]	@ (8003238 <executecommand+0xa80>)
 8002fbc:	795b      	ldrb	r3, [r3, #5]
 8002fbe:	ee07 3a90 	vmov	s15, r3
 8002fc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fc6:	eddf 6a9d 	vldr	s13, [pc, #628]	@ 800323c <executecommand+0xa84>
 8002fca:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002fce:	ed9f 6a9d 	vldr	s12, [pc, #628]	@ 8003244 <executecommand+0xa8c>
 8002fd2:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002fd6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fda:	4b9b      	ldr	r3, [pc, #620]	@ (8003248 <executecommand+0xa90>)
 8002fdc:	edc3 7a00 	vstr	s15, [r3]
		}

		if(command[0] == 'g')
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	781b      	ldrb	r3, [r3, #0]
 8002fe4:	2b67      	cmp	r3, #103	@ 0x67
 8002fe6:	d14f      	bne.n	8003088 <executecommand+0x8d0>
		{
			i_angular_rate_roolfactor = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 8002fe8:	4b93      	ldr	r3, [pc, #588]	@ (8003238 <executecommand+0xa80>)
 8002fea:	785b      	ldrb	r3, [r3, #1]
 8002fec:	ee07 3a90 	vmov	s15, r3
 8002ff0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ff4:	ed9f 7a91 	vldr	s14, [pc, #580]	@ 800323c <executecommand+0xa84>
 8002ff8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002ffc:	ed9f 7a91 	vldr	s14, [pc, #580]	@ 8003244 <executecommand+0xa8c>
 8003000:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003004:	4b8c      	ldr	r3, [pc, #560]	@ (8003238 <executecommand+0xa80>)
 8003006:	789b      	ldrb	r3, [r3, #2]
 8003008:	ee07 3a90 	vmov	s15, r3
 800300c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003010:	eddf 6a8a 	vldr	s13, [pc, #552]	@ 800323c <executecommand+0xa84>
 8003014:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003018:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 800301c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003020:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003024:	4b84      	ldr	r3, [pc, #528]	@ (8003238 <executecommand+0xa80>)
 8003026:	78db      	ldrb	r3, [r3, #3]
 8003028:	ee07 3a90 	vmov	s15, r3
 800302c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003030:	eddf 6a82 	vldr	s13, [pc, #520]	@ 800323c <executecommand+0xa84>
 8003034:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003038:	ee37 7a27 	vadd.f32	s14, s14, s15
 800303c:	4b7e      	ldr	r3, [pc, #504]	@ (8003238 <executecommand+0xa80>)
 800303e:	791b      	ldrb	r3, [r3, #4]
 8003040:	ee07 3a90 	vmov	s15, r3
 8003044:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003048:	eddf 6a7c 	vldr	s13, [pc, #496]	@ 800323c <executecommand+0xa84>
 800304c:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8003050:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8003054:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003058:	ee37 7a27 	vadd.f32	s14, s14, s15
 800305c:	4b76      	ldr	r3, [pc, #472]	@ (8003238 <executecommand+0xa80>)
 800305e:	795b      	ldrb	r3, [r3, #5]
 8003060:	ee07 3a90 	vmov	s15, r3
 8003064:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003068:	eddf 6a74 	vldr	s13, [pc, #464]	@ 800323c <executecommand+0xa84>
 800306c:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8003070:	ed9f 6a74 	vldr	s12, [pc, #464]	@ 8003244 <executecommand+0xa8c>
 8003074:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003078:	ee77 7a27 	vadd.f32	s15, s14, s15
 800307c:	4b73      	ldr	r3, [pc, #460]	@ (800324c <executecommand+0xa94>)
 800307e:	edc3 7a00 	vstr	s15, [r3]
			error_sum_angular_rate_rool = 0;
 8003082:	4b73      	ldr	r3, [pc, #460]	@ (8003250 <executecommand+0xa98>)
 8003084:	2200      	movs	r2, #0
 8003086:	601a      	str	r2, [r3, #0]
		}

		if(command[0] == 'h')
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	781b      	ldrb	r3, [r3, #0]
 800308c:	2b68      	cmp	r3, #104	@ 0x68
 800308e:	d14c      	bne.n	800312a <executecommand+0x972>
		{
			d_angular_rate_roolfactor = ((((float)UASRT_PID_VAL[1])-48)*1000) + ((((float)UASRT_PID_VAL[2])-48)*100) + ((((float)UASRT_PID_VAL[3])-48)*10) + ((((float)UASRT_PID_VAL[4])-48)) + ((((float)UASRT_PID_VAL[5])-48)/10);
 8003090:	4b69      	ldr	r3, [pc, #420]	@ (8003238 <executecommand+0xa80>)
 8003092:	785b      	ldrb	r3, [r3, #1]
 8003094:	ee07 3a90 	vmov	s15, r3
 8003098:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800309c:	ed9f 7a67 	vldr	s14, [pc, #412]	@ 800323c <executecommand+0xa84>
 80030a0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80030a4:	ed9f 7a6b 	vldr	s14, [pc, #428]	@ 8003254 <executecommand+0xa9c>
 80030a8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80030ac:	4b62      	ldr	r3, [pc, #392]	@ (8003238 <executecommand+0xa80>)
 80030ae:	789b      	ldrb	r3, [r3, #2]
 80030b0:	ee07 3a90 	vmov	s15, r3
 80030b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030b8:	eddf 6a60 	vldr	s13, [pc, #384]	@ 800323c <executecommand+0xa84>
 80030bc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80030c0:	eddf 6a60 	vldr	s13, [pc, #384]	@ 8003244 <executecommand+0xa8c>
 80030c4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80030c8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80030cc:	4b5a      	ldr	r3, [pc, #360]	@ (8003238 <executecommand+0xa80>)
 80030ce:	78db      	ldrb	r3, [r3, #3]
 80030d0:	ee07 3a90 	vmov	s15, r3
 80030d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030d8:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800323c <executecommand+0xa84>
 80030dc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80030e0:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 80030e4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80030e8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80030ec:	4b52      	ldr	r3, [pc, #328]	@ (8003238 <executecommand+0xa80>)
 80030ee:	791b      	ldrb	r3, [r3, #4]
 80030f0:	ee07 3a90 	vmov	s15, r3
 80030f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030f8:	eddf 6a50 	vldr	s13, [pc, #320]	@ 800323c <executecommand+0xa84>
 80030fc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003100:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003104:	4b4c      	ldr	r3, [pc, #304]	@ (8003238 <executecommand+0xa80>)
 8003106:	795b      	ldrb	r3, [r3, #5]
 8003108:	ee07 3a90 	vmov	s15, r3
 800310c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003110:	eddf 6a4a 	vldr	s13, [pc, #296]	@ 800323c <executecommand+0xa84>
 8003114:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8003118:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 800311c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003120:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003124:	4b4c      	ldr	r3, [pc, #304]	@ (8003258 <executecommand+0xaa0>)
 8003126:	edc3 7a00 	vstr	s15, [r3]





		if(command[0] == 'j')
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	781b      	ldrb	r3, [r3, #0]
 800312e:	2b6a      	cmp	r3, #106	@ 0x6a
 8003130:	d14c      	bne.n	80031cc <executecommand+0xa14>
			{
				p_yawfactor = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 8003132:	4b41      	ldr	r3, [pc, #260]	@ (8003238 <executecommand+0xa80>)
 8003134:	785b      	ldrb	r3, [r3, #1]
 8003136:	ee07 3a90 	vmov	s15, r3
 800313a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800313e:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 800323c <executecommand+0xa84>
 8003142:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003146:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8003244 <executecommand+0xa8c>
 800314a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800314e:	4b3a      	ldr	r3, [pc, #232]	@ (8003238 <executecommand+0xa80>)
 8003150:	789b      	ldrb	r3, [r3, #2]
 8003152:	ee07 3a90 	vmov	s15, r3
 8003156:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800315a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800323c <executecommand+0xa84>
 800315e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003162:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8003166:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800316a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800316e:	4b32      	ldr	r3, [pc, #200]	@ (8003238 <executecommand+0xa80>)
 8003170:	78db      	ldrb	r3, [r3, #3]
 8003172:	ee07 3a90 	vmov	s15, r3
 8003176:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800317a:	eddf 6a30 	vldr	s13, [pc, #192]	@ 800323c <executecommand+0xa84>
 800317e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003182:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003186:	4b2c      	ldr	r3, [pc, #176]	@ (8003238 <executecommand+0xa80>)
 8003188:	791b      	ldrb	r3, [r3, #4]
 800318a:	ee07 3a90 	vmov	s15, r3
 800318e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003192:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 800323c <executecommand+0xa84>
 8003196:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800319a:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 800319e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80031a2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80031a6:	4b24      	ldr	r3, [pc, #144]	@ (8003238 <executecommand+0xa80>)
 80031a8:	795b      	ldrb	r3, [r3, #5]
 80031aa:	ee07 3a90 	vmov	s15, r3
 80031ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031b2:	eddf 6a22 	vldr	s13, [pc, #136]	@ 800323c <executecommand+0xa84>
 80031b6:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80031ba:	ed9f 6a22 	vldr	s12, [pc, #136]	@ 8003244 <executecommand+0xa8c>
 80031be:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80031c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031c6:	4b25      	ldr	r3, [pc, #148]	@ (800325c <executecommand+0xaa4>)
 80031c8:	edc3 7a00 	vstr	s15, [r3]
			}

			if(command[0] == 'k')
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	781b      	ldrb	r3, [r3, #0]
 80031d0:	2b6b      	cmp	r3, #107	@ 0x6b
 80031d2:	d167      	bne.n	80032a4 <executecommand+0xaec>
			{
				i_yawfactor = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 80031d4:	4b18      	ldr	r3, [pc, #96]	@ (8003238 <executecommand+0xa80>)
 80031d6:	785b      	ldrb	r3, [r3, #1]
 80031d8:	ee07 3a90 	vmov	s15, r3
 80031dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031e0:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 800323c <executecommand+0xa84>
 80031e4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80031e8:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8003244 <executecommand+0xa8c>
 80031ec:	ee27 7a87 	vmul.f32	s14, s15, s14
 80031f0:	4b11      	ldr	r3, [pc, #68]	@ (8003238 <executecommand+0xa80>)
 80031f2:	789b      	ldrb	r3, [r3, #2]
 80031f4:	ee07 3a90 	vmov	s15, r3
 80031f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031fc:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 800323c <executecommand+0xa84>
 8003200:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003204:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8003208:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800320c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003210:	4b09      	ldr	r3, [pc, #36]	@ (8003238 <executecommand+0xa80>)
 8003212:	78db      	ldrb	r3, [r3, #3]
 8003214:	ee07 3a90 	vmov	s15, r3
 8003218:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800321c:	eddf 6a07 	vldr	s13, [pc, #28]	@ 800323c <executecommand+0xa84>
 8003220:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003224:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003228:	4b03      	ldr	r3, [pc, #12]	@ (8003238 <executecommand+0xa80>)
 800322a:	791b      	ldrb	r3, [r3, #4]
 800322c:	ee07 3a90 	vmov	s15, r3
 8003230:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003234:	e016      	b.n	8003264 <executecommand+0xaac>
 8003236:	bf00      	nop
 8003238:	000041c0 	.word	0x000041c0
 800323c:	42400000 	.word	0x42400000
 8003240:	00004108 	.word	0x00004108
 8003244:	42c80000 	.word	0x42c80000
 8003248:	00004150 	.word	0x00004150
 800324c:	0000415c 	.word	0x0000415c
 8003250:	000040cc 	.word	0x000040cc
 8003254:	447a0000 	.word	0x447a0000
 8003258:	00004168 	.word	0x00004168
 800325c:	000040f4 	.word	0x000040f4
 8003260:	42400000 	.word	0x42400000
 8003264:	ed5f 6a02 	vldr	s13, [pc, #-8]	@ 8003260 <executecommand+0xaa8>
 8003268:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800326c:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8003270:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003274:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003278:	4bba      	ldr	r3, [pc, #744]	@ (8003564 <executecommand+0xdac>)
 800327a:	795b      	ldrb	r3, [r3, #5]
 800327c:	ee07 3a90 	vmov	s15, r3
 8003280:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003284:	eddf 6ab8 	vldr	s13, [pc, #736]	@ 8003568 <executecommand+0xdb0>
 8003288:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800328c:	ed9f 6ab7 	vldr	s12, [pc, #732]	@ 800356c <executecommand+0xdb4>
 8003290:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003294:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003298:	4bb5      	ldr	r3, [pc, #724]	@ (8003570 <executecommand+0xdb8>)
 800329a:	edc3 7a00 	vstr	s15, [r3]
				error_sum_yaw = 0;
 800329e:	4bb5      	ldr	r3, [pc, #724]	@ (8003574 <executecommand+0xdbc>)
 80032a0:	2200      	movs	r2, #0
 80032a2:	601a      	str	r2, [r3, #0]
			}

			if(command[0] == 'l')
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	781b      	ldrb	r3, [r3, #0]
 80032a8:	2b6c      	cmp	r3, #108	@ 0x6c
 80032aa:	d14c      	bne.n	8003346 <executecommand+0xb8e>
			{
				d_yawfactor = ((((float)UASRT_PID_VAL[1])-48)*1000) + ((((float)UASRT_PID_VAL[2])-48)*100) + ((((float)UASRT_PID_VAL[3])-48)*10) + ((((float)UASRT_PID_VAL[4])-48)) + ((((float)UASRT_PID_VAL[5])-48)/10);
 80032ac:	4bad      	ldr	r3, [pc, #692]	@ (8003564 <executecommand+0xdac>)
 80032ae:	785b      	ldrb	r3, [r3, #1]
 80032b0:	ee07 3a90 	vmov	s15, r3
 80032b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032b8:	ed9f 7aab 	vldr	s14, [pc, #684]	@ 8003568 <executecommand+0xdb0>
 80032bc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80032c0:	ed9f 7aad 	vldr	s14, [pc, #692]	@ 8003578 <executecommand+0xdc0>
 80032c4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80032c8:	4ba6      	ldr	r3, [pc, #664]	@ (8003564 <executecommand+0xdac>)
 80032ca:	789b      	ldrb	r3, [r3, #2]
 80032cc:	ee07 3a90 	vmov	s15, r3
 80032d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032d4:	eddf 6aa4 	vldr	s13, [pc, #656]	@ 8003568 <executecommand+0xdb0>
 80032d8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80032dc:	eddf 6aa3 	vldr	s13, [pc, #652]	@ 800356c <executecommand+0xdb4>
 80032e0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80032e4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80032e8:	4b9e      	ldr	r3, [pc, #632]	@ (8003564 <executecommand+0xdac>)
 80032ea:	78db      	ldrb	r3, [r3, #3]
 80032ec:	ee07 3a90 	vmov	s15, r3
 80032f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032f4:	eddf 6a9c 	vldr	s13, [pc, #624]	@ 8003568 <executecommand+0xdb0>
 80032f8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80032fc:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8003300:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003304:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003308:	4b96      	ldr	r3, [pc, #600]	@ (8003564 <executecommand+0xdac>)
 800330a:	791b      	ldrb	r3, [r3, #4]
 800330c:	ee07 3a90 	vmov	s15, r3
 8003310:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003314:	eddf 6a94 	vldr	s13, [pc, #592]	@ 8003568 <executecommand+0xdb0>
 8003318:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800331c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003320:	4b90      	ldr	r3, [pc, #576]	@ (8003564 <executecommand+0xdac>)
 8003322:	795b      	ldrb	r3, [r3, #5]
 8003324:	ee07 3a90 	vmov	s15, r3
 8003328:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800332c:	eddf 6a8e 	vldr	s13, [pc, #568]	@ 8003568 <executecommand+0xdb0>
 8003330:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8003334:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8003338:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800333c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003340:	4b8e      	ldr	r3, [pc, #568]	@ (800357c <executecommand+0xdc4>)
 8003342:	edc3 7a00 	vstr	s15, [r3]
			}
			if(command[0] == 'm')
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	781b      	ldrb	r3, [r3, #0]
 800334a:	2b6d      	cmp	r3, #109	@ 0x6d
 800334c:	d14c      	bne.n	80033e8 <executecommand+0xc30>
			{
				p_angular_rate_yawfactor = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 800334e:	4b85      	ldr	r3, [pc, #532]	@ (8003564 <executecommand+0xdac>)
 8003350:	785b      	ldrb	r3, [r3, #1]
 8003352:	ee07 3a90 	vmov	s15, r3
 8003356:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800335a:	ed9f 7a83 	vldr	s14, [pc, #524]	@ 8003568 <executecommand+0xdb0>
 800335e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003362:	ed9f 7a82 	vldr	s14, [pc, #520]	@ 800356c <executecommand+0xdb4>
 8003366:	ee27 7a87 	vmul.f32	s14, s15, s14
 800336a:	4b7e      	ldr	r3, [pc, #504]	@ (8003564 <executecommand+0xdac>)
 800336c:	789b      	ldrb	r3, [r3, #2]
 800336e:	ee07 3a90 	vmov	s15, r3
 8003372:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003376:	eddf 6a7c 	vldr	s13, [pc, #496]	@ 8003568 <executecommand+0xdb0>
 800337a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800337e:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8003382:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003386:	ee37 7a27 	vadd.f32	s14, s14, s15
 800338a:	4b76      	ldr	r3, [pc, #472]	@ (8003564 <executecommand+0xdac>)
 800338c:	78db      	ldrb	r3, [r3, #3]
 800338e:	ee07 3a90 	vmov	s15, r3
 8003392:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003396:	eddf 6a74 	vldr	s13, [pc, #464]	@ 8003568 <executecommand+0xdb0>
 800339a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800339e:	ee37 7a27 	vadd.f32	s14, s14, s15
 80033a2:	4b70      	ldr	r3, [pc, #448]	@ (8003564 <executecommand+0xdac>)
 80033a4:	791b      	ldrb	r3, [r3, #4]
 80033a6:	ee07 3a90 	vmov	s15, r3
 80033aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033ae:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8003568 <executecommand+0xdb0>
 80033b2:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80033b6:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 80033ba:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80033be:	ee37 7a27 	vadd.f32	s14, s14, s15
 80033c2:	4b68      	ldr	r3, [pc, #416]	@ (8003564 <executecommand+0xdac>)
 80033c4:	795b      	ldrb	r3, [r3, #5]
 80033c6:	ee07 3a90 	vmov	s15, r3
 80033ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033ce:	eddf 6a66 	vldr	s13, [pc, #408]	@ 8003568 <executecommand+0xdb0>
 80033d2:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80033d6:	ed9f 6a65 	vldr	s12, [pc, #404]	@ 800356c <executecommand+0xdb4>
 80033da:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80033de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033e2:	4b67      	ldr	r3, [pc, #412]	@ (8003580 <executecommand+0xdc8>)
 80033e4:	edc3 7a00 	vstr	s15, [r3]
			}

			if(command[0] == 'n')
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	781b      	ldrb	r3, [r3, #0]
 80033ec:	2b6e      	cmp	r3, #110	@ 0x6e
 80033ee:	d14f      	bne.n	8003490 <executecommand+0xcd8>
			{
				i_angular_rate_yawfactor = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 80033f0:	4b5c      	ldr	r3, [pc, #368]	@ (8003564 <executecommand+0xdac>)
 80033f2:	785b      	ldrb	r3, [r3, #1]
 80033f4:	ee07 3a90 	vmov	s15, r3
 80033f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033fc:	ed9f 7a5a 	vldr	s14, [pc, #360]	@ 8003568 <executecommand+0xdb0>
 8003400:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003404:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 800356c <executecommand+0xdb4>
 8003408:	ee27 7a87 	vmul.f32	s14, s15, s14
 800340c:	4b55      	ldr	r3, [pc, #340]	@ (8003564 <executecommand+0xdac>)
 800340e:	789b      	ldrb	r3, [r3, #2]
 8003410:	ee07 3a90 	vmov	s15, r3
 8003414:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003418:	eddf 6a53 	vldr	s13, [pc, #332]	@ 8003568 <executecommand+0xdb0>
 800341c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003420:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8003424:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003428:	ee37 7a27 	vadd.f32	s14, s14, s15
 800342c:	4b4d      	ldr	r3, [pc, #308]	@ (8003564 <executecommand+0xdac>)
 800342e:	78db      	ldrb	r3, [r3, #3]
 8003430:	ee07 3a90 	vmov	s15, r3
 8003434:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003438:	eddf 6a4b 	vldr	s13, [pc, #300]	@ 8003568 <executecommand+0xdb0>
 800343c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003440:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003444:	4b47      	ldr	r3, [pc, #284]	@ (8003564 <executecommand+0xdac>)
 8003446:	791b      	ldrb	r3, [r3, #4]
 8003448:	ee07 3a90 	vmov	s15, r3
 800344c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003450:	eddf 6a45 	vldr	s13, [pc, #276]	@ 8003568 <executecommand+0xdb0>
 8003454:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8003458:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 800345c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003460:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003464:	4b3f      	ldr	r3, [pc, #252]	@ (8003564 <executecommand+0xdac>)
 8003466:	795b      	ldrb	r3, [r3, #5]
 8003468:	ee07 3a90 	vmov	s15, r3
 800346c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003470:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8003568 <executecommand+0xdb0>
 8003474:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8003478:	ed9f 6a3c 	vldr	s12, [pc, #240]	@ 800356c <executecommand+0xdb4>
 800347c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003480:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003484:	4b3f      	ldr	r3, [pc, #252]	@ (8003584 <executecommand+0xdcc>)
 8003486:	edc3 7a00 	vstr	s15, [r3]
				error_sum_angular_rate_yaw = 0;
 800348a:	4b3f      	ldr	r3, [pc, #252]	@ (8003588 <executecommand+0xdd0>)
 800348c:	2200      	movs	r2, #0
 800348e:	601a      	str	r2, [r3, #0]
			}

			if(command[0] == 'o')
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	781b      	ldrb	r3, [r3, #0]
 8003494:	2b6f      	cmp	r3, #111	@ 0x6f
 8003496:	d14c      	bne.n	8003532 <executecommand+0xd7a>
			{
				d_angular_rate_yawfactor = ((((float)UASRT_PID_VAL[1])-48)*1000) + ((((float)UASRT_PID_VAL[2])-48)*100) + ((((float)UASRT_PID_VAL[3])-48)*10) + ((((float)UASRT_PID_VAL[4])-48)) + ((((float)UASRT_PID_VAL[5])-48)/10);
 8003498:	4b32      	ldr	r3, [pc, #200]	@ (8003564 <executecommand+0xdac>)
 800349a:	785b      	ldrb	r3, [r3, #1]
 800349c:	ee07 3a90 	vmov	s15, r3
 80034a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034a4:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8003568 <executecommand+0xdb0>
 80034a8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80034ac:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8003578 <executecommand+0xdc0>
 80034b0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80034b4:	4b2b      	ldr	r3, [pc, #172]	@ (8003564 <executecommand+0xdac>)
 80034b6:	789b      	ldrb	r3, [r3, #2]
 80034b8:	ee07 3a90 	vmov	s15, r3
 80034bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034c0:	eddf 6a29 	vldr	s13, [pc, #164]	@ 8003568 <executecommand+0xdb0>
 80034c4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80034c8:	eddf 6a28 	vldr	s13, [pc, #160]	@ 800356c <executecommand+0xdb4>
 80034cc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80034d0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80034d4:	4b23      	ldr	r3, [pc, #140]	@ (8003564 <executecommand+0xdac>)
 80034d6:	78db      	ldrb	r3, [r3, #3]
 80034d8:	ee07 3a90 	vmov	s15, r3
 80034dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034e0:	eddf 6a21 	vldr	s13, [pc, #132]	@ 8003568 <executecommand+0xdb0>
 80034e4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80034e8:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 80034ec:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80034f0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80034f4:	4b1b      	ldr	r3, [pc, #108]	@ (8003564 <executecommand+0xdac>)
 80034f6:	791b      	ldrb	r3, [r3, #4]
 80034f8:	ee07 3a90 	vmov	s15, r3
 80034fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003500:	eddf 6a19 	vldr	s13, [pc, #100]	@ 8003568 <executecommand+0xdb0>
 8003504:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003508:	ee37 7a27 	vadd.f32	s14, s14, s15
 800350c:	4b15      	ldr	r3, [pc, #84]	@ (8003564 <executecommand+0xdac>)
 800350e:	795b      	ldrb	r3, [r3, #5]
 8003510:	ee07 3a90 	vmov	s15, r3
 8003514:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003518:	eddf 6a13 	vldr	s13, [pc, #76]	@ 8003568 <executecommand+0xdb0>
 800351c:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8003520:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8003524:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003528:	ee77 7a27 	vadd.f32	s15, s14, s15
 800352c:	4b17      	ldr	r3, [pc, #92]	@ (800358c <executecommand+0xdd4>)
 800352e:	edc3 7a00 	vstr	s15, [r3]
			}

	if(command[0] == 'r'){
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	781b      	ldrb	r3, [r3, #0]
 8003536:	2b72      	cmp	r3, #114	@ 0x72
 8003538:	d101      	bne.n	800353e <executecommand+0xd86>
		NVIC_SystemReset();
 800353a:	f7ff f8d9 	bl	80026f0 <__NVIC_SystemReset>
	}

	for(int i = 0; i < 15; i++){
 800353e:	2300      	movs	r3, #0
 8003540:	60fb      	str	r3, [r7, #12]
 8003542:	e007      	b.n	8003554 <executecommand+0xd9c>
		UASRT_PID_VAL[i] = 0;
 8003544:	4a07      	ldr	r2, [pc, #28]	@ (8003564 <executecommand+0xdac>)
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	4413      	add	r3, r2
 800354a:	2200      	movs	r2, #0
 800354c:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 15; i++){
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	3301      	adds	r3, #1
 8003552:	60fb      	str	r3, [r7, #12]
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2b0e      	cmp	r3, #14
 8003558:	ddf4      	ble.n	8003544 <executecommand+0xd8c>
	}
//	for(int i = 0; i < 10; i++){
//		words[i] = 0;
//	}

}
 800355a:	bf00      	nop
 800355c:	bf00      	nop
 800355e:	3710      	adds	r7, #16
 8003560:	46bd      	mov	sp, r7
 8003562:	bd80      	pop	{r7, pc}
 8003564:	000041c0 	.word	0x000041c0
 8003568:	42400000 	.word	0x42400000
 800356c:	42c80000 	.word	0x42c80000
 8003570:	00004100 	.word	0x00004100
 8003574:	000040c4 	.word	0x000040c4
 8003578:	447a0000 	.word	0x447a0000
 800357c:	0000410c 	.word	0x0000410c
 8003580:	00004154 	.word	0x00004154
 8003584:	00004160 	.word	0x00004160
 8003588:	000040d0 	.word	0x000040d0
 800358c:	0000416c 	.word	0x0000416c

08003590 <MX_ADC2_Init>:
ADC_HandleTypeDef hadc2;
DMA_HandleTypeDef hdma_adc2;

/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b08a      	sub	sp, #40	@ 0x28
 8003594:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003596:	1d3b      	adds	r3, r7, #4
 8003598:	2224      	movs	r2, #36	@ 0x24
 800359a:	2100      	movs	r1, #0
 800359c:	4618      	mov	r0, r3
 800359e:	f01a fdb9 	bl	801e114 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80035a2:	4b2e      	ldr	r3, [pc, #184]	@ (800365c <MX_ADC2_Init+0xcc>)
 80035a4:	4a2e      	ldr	r2, [pc, #184]	@ (8003660 <MX_ADC2_Init+0xd0>)
 80035a6:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV8;
 80035a8:	4b2c      	ldr	r3, [pc, #176]	@ (800365c <MX_ADC2_Init+0xcc>)
 80035aa:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80035ae:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80035b0:	4b2a      	ldr	r3, [pc, #168]	@ (800365c <MX_ADC2_Init+0xcc>)
 80035b2:	2208      	movs	r2, #8
 80035b4:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80035b6:	4b29      	ldr	r3, [pc, #164]	@ (800365c <MX_ADC2_Init+0xcc>)
 80035b8:	2200      	movs	r2, #0
 80035ba:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80035bc:	4b27      	ldr	r3, [pc, #156]	@ (800365c <MX_ADC2_Init+0xcc>)
 80035be:	2204      	movs	r2, #4
 80035c0:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80035c2:	4b26      	ldr	r3, [pc, #152]	@ (800365c <MX_ADC2_Init+0xcc>)
 80035c4:	2200      	movs	r2, #0
 80035c6:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80035c8:	4b24      	ldr	r3, [pc, #144]	@ (800365c <MX_ADC2_Init+0xcc>)
 80035ca:	2200      	movs	r2, #0
 80035cc:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 80035ce:	4b23      	ldr	r3, [pc, #140]	@ (800365c <MX_ADC2_Init+0xcc>)
 80035d0:	2201      	movs	r2, #1
 80035d2:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80035d4:	4b21      	ldr	r3, [pc, #132]	@ (800365c <MX_ADC2_Init+0xcc>)
 80035d6:	2200      	movs	r2, #0
 80035d8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T8_TRGO;
 80035dc:	4b1f      	ldr	r3, [pc, #124]	@ (800365c <MX_ADC2_Init+0xcc>)
 80035de:	f44f 629c 	mov.w	r2, #1248	@ 0x4e0
 80035e2:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80035e4:	4b1d      	ldr	r3, [pc, #116]	@ (800365c <MX_ADC2_Init+0xcc>)
 80035e6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80035ea:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80035ec:	4b1b      	ldr	r3, [pc, #108]	@ (800365c <MX_ADC2_Init+0xcc>)
 80035ee:	2203      	movs	r2, #3
 80035f0:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80035f2:	4b1a      	ldr	r3, [pc, #104]	@ (800365c <MX_ADC2_Init+0xcc>)
 80035f4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80035f8:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80035fa:	4b18      	ldr	r3, [pc, #96]	@ (800365c <MX_ADC2_Init+0xcc>)
 80035fc:	2200      	movs	r2, #0
 80035fe:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc2.Init.OversamplingMode = DISABLE;
 8003600:	4b16      	ldr	r3, [pc, #88]	@ (800365c <MX_ADC2_Init+0xcc>)
 8003602:	2200      	movs	r2, #0
 8003604:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc2.Init.Oversampling.Ratio = 1;
 8003608:	4b14      	ldr	r3, [pc, #80]	@ (800365c <MX_ADC2_Init+0xcc>)
 800360a:	2201      	movs	r2, #1
 800360c:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800360e:	4813      	ldr	r0, [pc, #76]	@ (800365c <MX_ADC2_Init+0xcc>)
 8003610:	f006 fafe 	bl	8009c10 <HAL_ADC_Init>
 8003614:	4603      	mov	r3, r0
 8003616:	2b00      	cmp	r3, #0
 8003618:	d001      	beq.n	800361e <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 800361a:	f004 fc45 	bl	8007ea8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800361e:	4b11      	ldr	r3, [pc, #68]	@ (8003664 <MX_ADC2_Init+0xd4>)
 8003620:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003622:	2306      	movs	r3, #6
 8003624:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 8003626:	2307      	movs	r3, #7
 8003628:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800362a:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 800362e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8003630:	2304      	movs	r3, #4
 8003632:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8003634:	2300      	movs	r3, #0
 8003636:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8003638:	2300      	movs	r3, #0
 800363a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800363e:	1d3b      	adds	r3, r7, #4
 8003640:	4619      	mov	r1, r3
 8003642:	4806      	ldr	r0, [pc, #24]	@ (800365c <MX_ADC2_Init+0xcc>)
 8003644:	f007 f82a 	bl	800a69c <HAL_ADC_ConfigChannel>
 8003648:	4603      	mov	r3, r0
 800364a:	2b00      	cmp	r3, #0
 800364c:	d001      	beq.n	8003652 <MX_ADC2_Init+0xc2>
  {
    Error_Handler();
 800364e:	f004 fc2b 	bl	8007ea8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8003652:	bf00      	nop
 8003654:	3728      	adds	r7, #40	@ 0x28
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}
 800365a:	bf00      	nop
 800365c:	240000b0 	.word	0x240000b0
 8003660:	40022100 	.word	0x40022100
 8003664:	19200040 	.word	0x19200040

08003668 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b08a      	sub	sp, #40	@ 0x28
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003670:	f107 0314 	add.w	r3, r7, #20
 8003674:	2200      	movs	r2, #0
 8003676:	601a      	str	r2, [r3, #0]
 8003678:	605a      	str	r2, [r3, #4]
 800367a:	609a      	str	r2, [r3, #8]
 800367c:	60da      	str	r2, [r3, #12]
 800367e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC2)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a34      	ldr	r2, [pc, #208]	@ (8003758 <HAL_ADC_MspInit+0xf0>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d162      	bne.n	8003750 <HAL_ADC_MspInit+0xe8>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* ADC2 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800368a:	4b34      	ldr	r3, [pc, #208]	@ (800375c <HAL_ADC_MspInit+0xf4>)
 800368c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003690:	4a32      	ldr	r2, [pc, #200]	@ (800375c <HAL_ADC_MspInit+0xf4>)
 8003692:	f043 0320 	orr.w	r3, r3, #32
 8003696:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800369a:	4b30      	ldr	r3, [pc, #192]	@ (800375c <HAL_ADC_MspInit+0xf4>)
 800369c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80036a0:	f003 0320 	and.w	r3, r3, #32
 80036a4:	613b      	str	r3, [r7, #16]
 80036a6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80036a8:	4b2c      	ldr	r3, [pc, #176]	@ (800375c <HAL_ADC_MspInit+0xf4>)
 80036aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80036ae:	4a2b      	ldr	r2, [pc, #172]	@ (800375c <HAL_ADC_MspInit+0xf4>)
 80036b0:	f043 0320 	orr.w	r3, r3, #32
 80036b4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80036b8:	4b28      	ldr	r3, [pc, #160]	@ (800375c <HAL_ADC_MspInit+0xf4>)
 80036ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80036be:	f003 0320 	and.w	r3, r3, #32
 80036c2:	60fb      	str	r3, [r7, #12]
 80036c4:	68fb      	ldr	r3, [r7, #12]
    /**ADC2 GPIO Configuration
    PF14     ------> ADC2_INP6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80036c6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80036ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80036cc:	2303      	movs	r3, #3
 80036ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036d0:	2300      	movs	r3, #0
 80036d2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80036d4:	f107 0314 	add.w	r3, r7, #20
 80036d8:	4619      	mov	r1, r3
 80036da:	4821      	ldr	r0, [pc, #132]	@ (8003760 <HAL_ADC_MspInit+0xf8>)
 80036dc:	f00a feca 	bl	800e474 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA2_Stream0;
 80036e0:	4b20      	ldr	r3, [pc, #128]	@ (8003764 <HAL_ADC_MspInit+0xfc>)
 80036e2:	4a21      	ldr	r2, [pc, #132]	@ (8003768 <HAL_ADC_MspInit+0x100>)
 80036e4:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 80036e6:	4b1f      	ldr	r3, [pc, #124]	@ (8003764 <HAL_ADC_MspInit+0xfc>)
 80036e8:	220a      	movs	r2, #10
 80036ea:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80036ec:	4b1d      	ldr	r3, [pc, #116]	@ (8003764 <HAL_ADC_MspInit+0xfc>)
 80036ee:	2200      	movs	r2, #0
 80036f0:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80036f2:	4b1c      	ldr	r3, [pc, #112]	@ (8003764 <HAL_ADC_MspInit+0xfc>)
 80036f4:	2200      	movs	r2, #0
 80036f6:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80036f8:	4b1a      	ldr	r3, [pc, #104]	@ (8003764 <HAL_ADC_MspInit+0xfc>)
 80036fa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80036fe:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003700:	4b18      	ldr	r3, [pc, #96]	@ (8003764 <HAL_ADC_MspInit+0xfc>)
 8003702:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003706:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003708:	4b16      	ldr	r3, [pc, #88]	@ (8003764 <HAL_ADC_MspInit+0xfc>)
 800370a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800370e:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8003710:	4b14      	ldr	r3, [pc, #80]	@ (8003764 <HAL_ADC_MspInit+0xfc>)
 8003712:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003716:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8003718:	4b12      	ldr	r3, [pc, #72]	@ (8003764 <HAL_ADC_MspInit+0xfc>)
 800371a:	2200      	movs	r2, #0
 800371c:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800371e:	4b11      	ldr	r3, [pc, #68]	@ (8003764 <HAL_ADC_MspInit+0xfc>)
 8003720:	2200      	movs	r2, #0
 8003722:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8003724:	480f      	ldr	r0, [pc, #60]	@ (8003764 <HAL_ADC_MspInit+0xfc>)
 8003726:	f008 f853 	bl	800b7d0 <HAL_DMA_Init>
 800372a:	4603      	mov	r3, r0
 800372c:	2b00      	cmp	r3, #0
 800372e:	d001      	beq.n	8003734 <HAL_ADC_MspInit+0xcc>
    {
      Error_Handler();
 8003730:	f004 fbba 	bl	8007ea8 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	4a0b      	ldr	r2, [pc, #44]	@ (8003764 <HAL_ADC_MspInit+0xfc>)
 8003738:	659a      	str	r2, [r3, #88]	@ 0x58
 800373a:	4a0a      	ldr	r2, [pc, #40]	@ (8003764 <HAL_ADC_MspInit+0xfc>)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC2 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8003740:	2200      	movs	r2, #0
 8003742:	2100      	movs	r1, #0
 8003744:	2012      	movs	r0, #18
 8003746:	f007 ff96 	bl	800b676 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800374a:	2012      	movs	r0, #18
 800374c:	f007 ffad 	bl	800b6aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8003750:	bf00      	nop
 8003752:	3728      	adds	r7, #40	@ 0x28
 8003754:	46bd      	mov	sp, r7
 8003756:	bd80      	pop	{r7, pc}
 8003758:	40022100 	.word	0x40022100
 800375c:	58024400 	.word	0x58024400
 8003760:	58021400 	.word	0x58021400
 8003764:	24000120 	.word	0x24000120
 8003768:	40020410 	.word	0x40020410

0800376c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b082      	sub	sp, #8
 8003770:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003772:	4b19      	ldr	r3, [pc, #100]	@ (80037d8 <MX_DMA_Init+0x6c>)
 8003774:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003778:	4a17      	ldr	r2, [pc, #92]	@ (80037d8 <MX_DMA_Init+0x6c>)
 800377a:	f043 0302 	orr.w	r3, r3, #2
 800377e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003782:	4b15      	ldr	r3, [pc, #84]	@ (80037d8 <MX_DMA_Init+0x6c>)
 8003784:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003788:	f003 0302 	and.w	r3, r3, #2
 800378c:	607b      	str	r3, [r7, #4]
 800378e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003790:	4b11      	ldr	r3, [pc, #68]	@ (80037d8 <MX_DMA_Init+0x6c>)
 8003792:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003796:	4a10      	ldr	r2, [pc, #64]	@ (80037d8 <MX_DMA_Init+0x6c>)
 8003798:	f043 0301 	orr.w	r3, r3, #1
 800379c:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80037a0:	4b0d      	ldr	r3, [pc, #52]	@ (80037d8 <MX_DMA_Init+0x6c>)
 80037a2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80037a6:	f003 0301 	and.w	r3, r3, #1
 80037aa:	603b      	str	r3, [r7, #0]
 80037ac:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80037ae:	2200      	movs	r2, #0
 80037b0:	2100      	movs	r1, #0
 80037b2:	200b      	movs	r0, #11
 80037b4:	f007 ff5f 	bl	800b676 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80037b8:	200b      	movs	r0, #11
 80037ba:	f007 ff76 	bl	800b6aa <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80037be:	2200      	movs	r2, #0
 80037c0:	2100      	movs	r1, #0
 80037c2:	2038      	movs	r0, #56	@ 0x38
 80037c4:	f007 ff57 	bl	800b676 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80037c8:	2038      	movs	r0, #56	@ 0x38
 80037ca:	f007 ff6e 	bl	800b6aa <HAL_NVIC_EnableIRQ>

}
 80037ce:	bf00      	nop
 80037d0:	3708      	adds	r7, #8
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}
 80037d6:	bf00      	nop
 80037d8:	58024400 	.word	0x58024400
 80037dc:	00000000 	.word	0x00000000

080037e0 <Thrust_filter>:
 * Thrust_filter
 *
 * niepozwala zwiększac ani znimiejszac ciągu jezeli error wychylenia jest zbyt duzy
 *
 */
void Thrust_filter(double factor){
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b08e      	sub	sp, #56	@ 0x38
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	ed87 0b00 	vstr	d0, [r7]
	double error_pitch, error_rool, error_sum;
	double thrust_add = 0;
 80037ea:	f04f 0200 	mov.w	r2, #0
 80037ee:	f04f 0300 	mov.w	r3, #0
 80037f2:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
	int16_t thrust_error;
	double thrust_function;
	uint8_t negflag = 0;
 80037f6:	2300      	movs	r3, #0
 80037f8:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
	error_pitch = (float)(pitch_error);
 80037fc:	4b88      	ldr	r3, [pc, #544]	@ (8003a20 <Thrust_filter+0x240>)
 80037fe:	edd3 7a00 	vldr	s15, [r3]
 8003802:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003806:	ed87 7b08 	vstr	d7, [r7, #32]
	error_rool 	= (float)(rool_error);
 800380a:	4b86      	ldr	r3, [pc, #536]	@ (8003a24 <Thrust_filter+0x244>)
 800380c:	edd3 7a00 	vldr	s15, [r3]
 8003810:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003814:	ed87 7b06 	vstr	d7, [r7, #24]

	error_pitch = WartoscBezwgledna(error_pitch);
 8003818:	ed97 7b08 	vldr	d7, [r7, #32]
 800381c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003820:	eeb0 0a67 	vmov.f32	s0, s15
 8003824:	f003 fe76 	bl	8007514 <WartoscBezwgledna>
 8003828:	eef0 7a40 	vmov.f32	s15, s0
 800382c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003830:	ed87 7b08 	vstr	d7, [r7, #32]
	error_rool 	= WartoscBezwgledna(error_rool);
 8003834:	ed97 7b06 	vldr	d7, [r7, #24]
 8003838:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800383c:	eeb0 0a67 	vmov.f32	s0, s15
 8003840:	f003 fe68 	bl	8007514 <WartoscBezwgledna>
 8003844:	eef0 7a40 	vmov.f32	s15, s0
 8003848:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800384c:	ed87 7b06 	vstr	d7, [r7, #24]

	error_sum = pow(error_pitch + error_rool + 1, 5);
 8003850:	ed97 6b08 	vldr	d6, [r7, #32]
 8003854:	ed97 7b06 	vldr	d7, [r7, #24]
 8003858:	ee36 7b07 	vadd.f64	d7, d6, d7
 800385c:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8003860:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003864:	eeb1 1b04 	vmov.f64	d1, #20	@ 0x40a00000  5.0
 8003868:	eeb0 0b47 	vmov.f64	d0, d7
 800386c:	f01a fddc 	bl	801e428 <pow>
 8003870:	ed87 0b04 	vstr	d0, [r7, #16]
	if(wanted_thrust > 10500){
 8003874:	4b6c      	ldr	r3, [pc, #432]	@ (8003a28 <Thrust_filter+0x248>)
 8003876:	f9b3 3000 	ldrsh.w	r3, [r3]
 800387a:	f642 1204 	movw	r2, #10500	@ 0x2904
 800387e:	4293      	cmp	r3, r2
 8003880:	dd03      	ble.n	800388a <Thrust_filter+0xaa>
		wanted_thrust = 10500;
 8003882:	4b69      	ldr	r3, [pc, #420]	@ (8003a28 <Thrust_filter+0x248>)
 8003884:	f642 1204 	movw	r2, #10500	@ 0x2904
 8003888:	801a      	strh	r2, [r3, #0]
	}

	thrust_error = wanted_thrust - MYDRON.THRUST;
 800388a:	4b67      	ldr	r3, [pc, #412]	@ (8003a28 <Thrust_filter+0x248>)
 800388c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003890:	b29a      	uxth	r2, r3
 8003892:	4b66      	ldr	r3, [pc, #408]	@ (8003a2c <Thrust_filter+0x24c>)
 8003894:	885b      	ldrh	r3, [r3, #2]
 8003896:	1ad3      	subs	r3, r2, r3
 8003898:	b29b      	uxth	r3, r3
 800389a:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	if(thrust_error < 0){
 800389c:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	da13      	bge.n	80038cc <Thrust_filter+0xec>
		thrust_error = WartoscBezwgledna(thrust_error);
 80038a4:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 80038a8:	ee07 3a90 	vmov	s15, r3
 80038ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80038b0:	eeb0 0a67 	vmov.f32	s0, s15
 80038b4:	f003 fe2e 	bl	8007514 <WartoscBezwgledna>
 80038b8:	eef0 7a40 	vmov.f32	s15, s0
 80038bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80038c0:	ee17 3a90 	vmov	r3, s15
 80038c4:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		negflag = 1;
 80038c6:	2301      	movs	r3, #1
 80038c8:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
	}


	if((thrust_error) != 0){
 80038cc:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	f000 8097 	beq.w	8003a04 <Thrust_filter+0x224>
		thrust_function = 2000*(sqrt(sqrt((double)(thrust_error))));
 80038d6:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 80038da:	ee07 3a90 	vmov	s15, r3
 80038de:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80038e2:	eeb0 0b47 	vmov.f64	d0, d7
 80038e6:	f01a fc47 	bl	801e178 <sqrt>
 80038ea:	eeb0 7b40 	vmov.f64	d7, d0
 80038ee:	eeb0 0b47 	vmov.f64	d0, d7
 80038f2:	f01a fc41 	bl	801e178 <sqrt>
 80038f6:	eeb0 7b40 	vmov.f64	d7, d0
 80038fa:	ed9f 6b45 	vldr	d6, [pc, #276]	@ 8003a10 <Thrust_filter+0x230>
 80038fe:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003902:	ed87 7b02 	vstr	d7, [r7, #8]

		thrust_add = ((double)(factor * thrust_increse_factor * thrust_function/error_sum));
 8003906:	ed97 7b00 	vldr	d7, [r7]
 800390a:	ed9f 6b43 	vldr	d6, [pc, #268]	@ 8003a18 <Thrust_filter+0x238>
 800390e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8003912:	ed97 7b02 	vldr	d7, [r7, #8]
 8003916:	ee26 5b07 	vmul.f64	d5, d6, d7
 800391a:	ed97 6b04 	vldr	d6, [r7, #16]
 800391e:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8003922:	ed87 7b0c 	vstr	d7, [r7, #48]	@ 0x30
		if(negflag == 1){
 8003926:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800392a:	2b01      	cmp	r3, #1
 800392c:	d105      	bne.n	800393a <Thrust_filter+0x15a>
			thrust_add = thrust_add*(-1);
 800392e:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 8003932:	eeb1 7b47 	vneg.f64	d7, d7
 8003936:	ed87 7b0c 	vstr	d7, [r7, #48]	@ 0x30
		}


		if(thrust_add < 1 && thrust_add > -1){
 800393a:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 800393e:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8003942:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8003946:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800394a:	d513      	bpl.n	8003974 <Thrust_filter+0x194>
 800394c:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 8003950:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 8003954:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8003958:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800395c:	dd0a      	ble.n	8003974 <Thrust_filter+0x194>
			thrust_values = thrust_values + thrust_add;
 800395e:	4b34      	ldr	r3, [pc, #208]	@ (8003a30 <Thrust_filter+0x250>)
 8003960:	ed93 6b00 	vldr	d6, [r3]
 8003964:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 8003968:	ee36 7b07 	vadd.f64	d7, d6, d7
 800396c:	4b30      	ldr	r3, [pc, #192]	@ (8003a30 <Thrust_filter+0x250>)
 800396e:	ed83 7b00 	vstr	d7, [r3]
 8003972:	e010      	b.n	8003996 <Thrust_filter+0x1b6>
		}
		else{
			MYDRON.THRUST = MYDRON.THRUST + thrust_add;
 8003974:	4b2d      	ldr	r3, [pc, #180]	@ (8003a2c <Thrust_filter+0x24c>)
 8003976:	885b      	ldrh	r3, [r3, #2]
 8003978:	ee07 3a90 	vmov	s15, r3
 800397c:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8003980:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 8003984:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003988:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800398c:	ee17 3a90 	vmov	r3, s15
 8003990:	b29a      	uxth	r2, r3
 8003992:	4b26      	ldr	r3, [pc, #152]	@ (8003a2c <Thrust_filter+0x24c>)
 8003994:	805a      	strh	r2, [r3, #2]
		}

		if(thrust_values >= 1 || thrust_values <= -1){
 8003996:	4b26      	ldr	r3, [pc, #152]	@ (8003a30 <Thrust_filter+0x250>)
 8003998:	ed93 7b00 	vldr	d7, [r3]
 800399c:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 80039a0:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80039a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039a8:	da09      	bge.n	80039be <Thrust_filter+0x1de>
 80039aa:	4b21      	ldr	r3, [pc, #132]	@ (8003a30 <Thrust_filter+0x250>)
 80039ac:	ed93 7b00 	vldr	d7, [r3]
 80039b0:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 80039b4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80039b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039bc:	d818      	bhi.n	80039f0 <Thrust_filter+0x210>
			MYDRON.THRUST = MYDRON.THRUST + thrust_values;
 80039be:	4b1b      	ldr	r3, [pc, #108]	@ (8003a2c <Thrust_filter+0x24c>)
 80039c0:	885b      	ldrh	r3, [r3, #2]
 80039c2:	ee07 3a90 	vmov	s15, r3
 80039c6:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80039ca:	4b19      	ldr	r3, [pc, #100]	@ (8003a30 <Thrust_filter+0x250>)
 80039cc:	ed93 7b00 	vldr	d7, [r3]
 80039d0:	ee36 7b07 	vadd.f64	d7, d6, d7
 80039d4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80039d8:	ee17 3a90 	vmov	r3, s15
 80039dc:	b29a      	uxth	r2, r3
 80039de:	4b13      	ldr	r3, [pc, #76]	@ (8003a2c <Thrust_filter+0x24c>)
 80039e0:	805a      	strh	r2, [r3, #2]
			thrust_values = 0;
 80039e2:	4913      	ldr	r1, [pc, #76]	@ (8003a30 <Thrust_filter+0x250>)
 80039e4:	f04f 0200 	mov.w	r2, #0
 80039e8:	f04f 0300 	mov.w	r3, #0
 80039ec:	e9c1 2300 	strd	r2, r3, [r1]
		}
		if(MYDRON.THRUST > 10000){//ograniczenie THRUST
 80039f0:	4b0e      	ldr	r3, [pc, #56]	@ (8003a2c <Thrust_filter+0x24c>)
 80039f2:	885b      	ldrh	r3, [r3, #2]
 80039f4:	f242 7210 	movw	r2, #10000	@ 0x2710
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d903      	bls.n	8003a04 <Thrust_filter+0x224>
			MYDRON.THRUST = 10000;
 80039fc:	4b0b      	ldr	r3, [pc, #44]	@ (8003a2c <Thrust_filter+0x24c>)
 80039fe:	f242 7210 	movw	r2, #10000	@ 0x2710
 8003a02:	805a      	strh	r2, [r3, #2]
		}
	}
}
 8003a04:	bf00      	nop
 8003a06:	3738      	adds	r7, #56	@ 0x38
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bd80      	pop	{r7, pc}
 8003a0c:	f3af 8000 	nop.w
 8003a10:	00000000 	.word	0x00000000
 8003a14:	409f4000 	.word	0x409f4000
 8003a18:	30553261 	.word	0x30553261
 8003a1c:	3f33a92a 	.word	0x3f33a92a
 8003a20:	0000408c 	.word	0x0000408c
 8003a24:	00004090 	.word	0x00004090
 8003a28:	00004064 	.word	0x00004064
 8003a2c:	00000180 	.word	0x00000180
 8003a30:	00004068 	.word	0x00004068

08003a34 <PID_cal>:

	*g_ax = *g_ax + PID_FAC[2]*((wanted_pitch - *g_ax) - old_error_pitch);

}

void PID_cal(float *PID_var, float *PID_FAC, uint8_t pry){//pitch = 1, rool = 2, yaw = 3
 8003a34:	b480      	push	{r7}
 8003a36:	b085      	sub	sp, #20
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	60f8      	str	r0, [r7, #12]
 8003a3c:	60b9      	str	r1, [r7, #8]
 8003a3e:	4613      	mov	r3, r2
 8003a40:	71fb      	strb	r3, [r7, #7]
	switch(pry){
 8003a42:	79fb      	ldrb	r3, [r7, #7]
 8003a44:	3b01      	subs	r3, #1
 8003a46:	2b05      	cmp	r3, #5
 8003a48:	f200 8380 	bhi.w	800414c <PID_cal+0x718>
 8003a4c:	a201      	add	r2, pc, #4	@ (adr r2, 8003a54 <PID_cal+0x20>)
 8003a4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a52:	bf00      	nop
 8003a54:	08003a6d 	.word	0x08003a6d
 8003a58:	08003b87 	.word	0x08003b87
 8003a5c:	08003cc1 	.word	0x08003cc1
 8003a60:	08003ddb 	.word	0x08003ddb
 8003a64:	08003f19 	.word	0x08003f19
 8003a68:	08004033 	.word	0x08004033
		case 1://pitch

			*PID_var = PID_FAC[0]*(pitch_error);
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	ed93 7a00 	vldr	s14, [r3]
 8003a72:	4b8b      	ldr	r3, [pc, #556]	@ (8003ca0 <PID_cal+0x26c>)
 8003a74:	edd3 7a00 	vldr	s15, [r3]
 8003a78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	edc3 7a00 	vstr	s15, [r3]

			*PID_var = *PID_var + PID_FAC[1]*error_sum_pitch*looptime;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	ed93 7a00 	vldr	s14, [r3]
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	3304      	adds	r3, #4
 8003a8c:	edd3 6a00 	vldr	s13, [r3]
 8003a90:	4b84      	ldr	r3, [pc, #528]	@ (8003ca4 <PID_cal+0x270>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	ee07 3a90 	vmov	s15, r3
 8003a98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a9c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003aa0:	4b81      	ldr	r3, [pc, #516]	@ (8003ca8 <PID_cal+0x274>)
 8003aa2:	edd3 7a00 	vldr	s15, [r3]
 8003aa6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003aaa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	edc3 7a00 	vstr	s15, [r3]

			PID_FAC[3] = PID_FAC[2]*((pitch_error) - old_error_pitch);//policzenie częsci D
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	3308      	adds	r3, #8
 8003ab8:	ed93 7a00 	vldr	s14, [r3]
 8003abc:	4b78      	ldr	r3, [pc, #480]	@ (8003ca0 <PID_cal+0x26c>)
 8003abe:	edd3 6a00 	vldr	s13, [r3]
 8003ac2:	4b7a      	ldr	r3, [pc, #488]	@ (8003cac <PID_cal+0x278>)
 8003ac4:	edd3 7a00 	vldr	s15, [r3]
 8003ac8:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	330c      	adds	r3, #12
 8003ad0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ad4:	edc3 7a00 	vstr	s15, [r3]

			//FDP
			if(FDP_D_Gain > 0){
 8003ad8:	4b75      	ldr	r3, [pc, #468]	@ (8003cb0 <PID_cal+0x27c>)
 8003ada:	881b      	ldrh	r3, [r3, #0]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d045      	beq.n	8003b6c <PID_cal+0x138>
				PID_FAC[3] = (PID_FAC[3] * (FDP_D_Gain * looptime) / (1 + (FDP_D_Gain * looptime))) + (PID_FAC[4] * (1 / (1 + (FDP_D_Gain * looptime))));
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	330c      	adds	r3, #12
 8003ae4:	ed93 7a00 	vldr	s14, [r3]
 8003ae8:	4b71      	ldr	r3, [pc, #452]	@ (8003cb0 <PID_cal+0x27c>)
 8003aea:	881b      	ldrh	r3, [r3, #0]
 8003aec:	ee07 3a90 	vmov	s15, r3
 8003af0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003af4:	4b6c      	ldr	r3, [pc, #432]	@ (8003ca8 <PID_cal+0x274>)
 8003af6:	edd3 7a00 	vldr	s15, [r3]
 8003afa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003afe:	ee67 6a27 	vmul.f32	s13, s14, s15
 8003b02:	4b6b      	ldr	r3, [pc, #428]	@ (8003cb0 <PID_cal+0x27c>)
 8003b04:	881b      	ldrh	r3, [r3, #0]
 8003b06:	ee07 3a90 	vmov	s15, r3
 8003b0a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003b0e:	4b66      	ldr	r3, [pc, #408]	@ (8003ca8 <PID_cal+0x274>)
 8003b10:	edd3 7a00 	vldr	s15, [r3]
 8003b14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b18:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003b1c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003b20:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	3310      	adds	r3, #16
 8003b28:	edd3 6a00 	vldr	s13, [r3]
 8003b2c:	4b60      	ldr	r3, [pc, #384]	@ (8003cb0 <PID_cal+0x27c>)
 8003b2e:	881b      	ldrh	r3, [r3, #0]
 8003b30:	ee07 3a90 	vmov	s15, r3
 8003b34:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8003b38:	4b5b      	ldr	r3, [pc, #364]	@ (8003ca8 <PID_cal+0x274>)
 8003b3a:	edd3 7a00 	vldr	s15, [r3]
 8003b3e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003b42:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8003b46:	ee37 6a86 	vadd.f32	s12, s15, s12
 8003b4a:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8003b4e:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8003b52:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	330c      	adds	r3, #12
 8003b5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b5e:	edc3 7a00 	vstr	s15, [r3]
				PID_FAC[4] = PID_FAC[3];//old d_fac
 8003b62:	68bb      	ldr	r3, [r7, #8]
 8003b64:	3310      	adds	r3, #16
 8003b66:	68ba      	ldr	r2, [r7, #8]
 8003b68:	68d2      	ldr	r2, [r2, #12]
 8003b6a:	601a      	str	r2, [r3, #0]
			}

			*PID_var = *PID_var + PID_FAC[3];
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	ed93 7a00 	vldr	s14, [r3]
 8003b72:	68bb      	ldr	r3, [r7, #8]
 8003b74:	330c      	adds	r3, #12
 8003b76:	edd3 7a00 	vldr	s15, [r3]
 8003b7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	edc3 7a00 	vstr	s15, [r3]
//					*PID_var = 400;
//				}
//				if(*PID_var < -400){
//					*PID_var = -400;
//				}
			break;
 8003b84:	e2e3      	b.n	800414e <PID_cal+0x71a>

		case 2://rool

			*PID_var = PID_FAC[0]*(rool_error);
 8003b86:	68bb      	ldr	r3, [r7, #8]
 8003b88:	ed93 7a00 	vldr	s14, [r3]
 8003b8c:	4b49      	ldr	r3, [pc, #292]	@ (8003cb4 <PID_cal+0x280>)
 8003b8e:	edd3 7a00 	vldr	s15, [r3]
 8003b92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	edc3 7a00 	vstr	s15, [r3]

			*PID_var = *PID_var + PID_FAC[1]*error_sum_rool*looptime;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	ed93 7a00 	vldr	s14, [r3]
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	3304      	adds	r3, #4
 8003ba6:	edd3 6a00 	vldr	s13, [r3]
 8003baa:	4b43      	ldr	r3, [pc, #268]	@ (8003cb8 <PID_cal+0x284>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	ee07 3a90 	vmov	s15, r3
 8003bb2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003bb6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003bba:	4b3b      	ldr	r3, [pc, #236]	@ (8003ca8 <PID_cal+0x274>)
 8003bbc:	edd3 7a00 	vldr	s15, [r3]
 8003bc0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003bc4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	edc3 7a00 	vstr	s15, [r3]

			PID_FAC[3] =  PID_FAC[2]*((rool_error) - old_error_rool);
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	3308      	adds	r3, #8
 8003bd2:	ed93 7a00 	vldr	s14, [r3]
 8003bd6:	4b37      	ldr	r3, [pc, #220]	@ (8003cb4 <PID_cal+0x280>)
 8003bd8:	edd3 6a00 	vldr	s13, [r3]
 8003bdc:	4b37      	ldr	r3, [pc, #220]	@ (8003cbc <PID_cal+0x288>)
 8003bde:	edd3 7a00 	vldr	s15, [r3]
 8003be2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	330c      	adds	r3, #12
 8003bea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bee:	edc3 7a00 	vstr	s15, [r3]

			//FDP
			if(FDP_D_Gain > 0){
 8003bf2:	4b2f      	ldr	r3, [pc, #188]	@ (8003cb0 <PID_cal+0x27c>)
 8003bf4:	881b      	ldrh	r3, [r3, #0]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d045      	beq.n	8003c86 <PID_cal+0x252>
				PID_FAC[3] = (PID_FAC[3] * (FDP_D_Gain * looptime) / (1 + (FDP_D_Gain * looptime))) + (PID_FAC[4] * (1 / (1 + (FDP_D_Gain * looptime))));
 8003bfa:	68bb      	ldr	r3, [r7, #8]
 8003bfc:	330c      	adds	r3, #12
 8003bfe:	ed93 7a00 	vldr	s14, [r3]
 8003c02:	4b2b      	ldr	r3, [pc, #172]	@ (8003cb0 <PID_cal+0x27c>)
 8003c04:	881b      	ldrh	r3, [r3, #0]
 8003c06:	ee07 3a90 	vmov	s15, r3
 8003c0a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003c0e:	4b26      	ldr	r3, [pc, #152]	@ (8003ca8 <PID_cal+0x274>)
 8003c10:	edd3 7a00 	vldr	s15, [r3]
 8003c14:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003c18:	ee67 6a27 	vmul.f32	s13, s14, s15
 8003c1c:	4b24      	ldr	r3, [pc, #144]	@ (8003cb0 <PID_cal+0x27c>)
 8003c1e:	881b      	ldrh	r3, [r3, #0]
 8003c20:	ee07 3a90 	vmov	s15, r3
 8003c24:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003c28:	4b1f      	ldr	r3, [pc, #124]	@ (8003ca8 <PID_cal+0x274>)
 8003c2a:	edd3 7a00 	vldr	s15, [r3]
 8003c2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c32:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003c36:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003c3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c3e:	68bb      	ldr	r3, [r7, #8]
 8003c40:	3310      	adds	r3, #16
 8003c42:	edd3 6a00 	vldr	s13, [r3]
 8003c46:	4b1a      	ldr	r3, [pc, #104]	@ (8003cb0 <PID_cal+0x27c>)
 8003c48:	881b      	ldrh	r3, [r3, #0]
 8003c4a:	ee07 3a90 	vmov	s15, r3
 8003c4e:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8003c52:	4b15      	ldr	r3, [pc, #84]	@ (8003ca8 <PID_cal+0x274>)
 8003c54:	edd3 7a00 	vldr	s15, [r3]
 8003c58:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003c5c:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8003c60:	ee37 6a86 	vadd.f32	s12, s15, s12
 8003c64:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8003c68:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8003c6c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	330c      	adds	r3, #12
 8003c74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c78:	edc3 7a00 	vstr	s15, [r3]
				PID_FAC[4] = PID_FAC[3];//old d_fac
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	3310      	adds	r3, #16
 8003c80:	68ba      	ldr	r2, [r7, #8]
 8003c82:	68d2      	ldr	r2, [r2, #12]
 8003c84:	601a      	str	r2, [r3, #0]
			}

			*PID_var = *PID_var + PID_FAC[3];
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	ed93 7a00 	vldr	s14, [r3]
 8003c8c:	68bb      	ldr	r3, [r7, #8]
 8003c8e:	330c      	adds	r3, #12
 8003c90:	edd3 7a00 	vldr	s15, [r3]
 8003c94:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	edc3 7a00 	vstr	s15, [r3]
//				*PID_var = 400;
//			}
//			if(*PID_var < -400){
//				*PID_var = -400;
//			}
			break;
 8003c9e:	e256      	b.n	800414e <PID_cal+0x71a>
 8003ca0:	0000408c 	.word	0x0000408c
 8003ca4:	000040bc 	.word	0x000040bc
 8003ca8:	0801ea44 	.word	0x0801ea44
 8003cac:	000040a4 	.word	0x000040a4
 8003cb0:	0000407e 	.word	0x0000407e
 8003cb4:	00004090 	.word	0x00004090
 8003cb8:	000040c0 	.word	0x000040c0
 8003cbc:	000040a8 	.word	0x000040a8

		case 3:

			*PID_var = PID_FAC[0]*(yaw_error);
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	ed93 7a00 	vldr	s14, [r3]
 8003cc6:	4b8b      	ldr	r3, [pc, #556]	@ (8003ef4 <PID_cal+0x4c0>)
 8003cc8:	edd3 7a00 	vldr	s15, [r3]
 8003ccc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	edc3 7a00 	vstr	s15, [r3]

			*PID_var = *PID_var + PID_FAC[1]*error_sum_yaw*looptime;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	ed93 7a00 	vldr	s14, [r3]
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	3304      	adds	r3, #4
 8003ce0:	edd3 6a00 	vldr	s13, [r3]
 8003ce4:	4b84      	ldr	r3, [pc, #528]	@ (8003ef8 <PID_cal+0x4c4>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	ee07 3a90 	vmov	s15, r3
 8003cec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003cf0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003cf4:	4b81      	ldr	r3, [pc, #516]	@ (8003efc <PID_cal+0x4c8>)
 8003cf6:	edd3 7a00 	vldr	s15, [r3]
 8003cfa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003cfe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	edc3 7a00 	vstr	s15, [r3]

			PID_FAC[3] = PID_FAC[2]*((yaw_error) - old_error_yaw);
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	3308      	adds	r3, #8
 8003d0c:	ed93 7a00 	vldr	s14, [r3]
 8003d10:	4b78      	ldr	r3, [pc, #480]	@ (8003ef4 <PID_cal+0x4c0>)
 8003d12:	edd3 6a00 	vldr	s13, [r3]
 8003d16:	4b7a      	ldr	r3, [pc, #488]	@ (8003f00 <PID_cal+0x4cc>)
 8003d18:	edd3 7a00 	vldr	s15, [r3]
 8003d1c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	330c      	adds	r3, #12
 8003d24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d28:	edc3 7a00 	vstr	s15, [r3]

			//FDP
			if(FDP_D_Gain > 0){
 8003d2c:	4b75      	ldr	r3, [pc, #468]	@ (8003f04 <PID_cal+0x4d0>)
 8003d2e:	881b      	ldrh	r3, [r3, #0]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d045      	beq.n	8003dc0 <PID_cal+0x38c>
				PID_FAC[3] = (PID_FAC[3] * (FDP_D_Gain * looptime) / (1 + (FDP_D_Gain * looptime))) + (PID_FAC[4] * (1 / (1 + (FDP_D_Gain * looptime))));
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	330c      	adds	r3, #12
 8003d38:	ed93 7a00 	vldr	s14, [r3]
 8003d3c:	4b71      	ldr	r3, [pc, #452]	@ (8003f04 <PID_cal+0x4d0>)
 8003d3e:	881b      	ldrh	r3, [r3, #0]
 8003d40:	ee07 3a90 	vmov	s15, r3
 8003d44:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003d48:	4b6c      	ldr	r3, [pc, #432]	@ (8003efc <PID_cal+0x4c8>)
 8003d4a:	edd3 7a00 	vldr	s15, [r3]
 8003d4e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003d52:	ee67 6a27 	vmul.f32	s13, s14, s15
 8003d56:	4b6b      	ldr	r3, [pc, #428]	@ (8003f04 <PID_cal+0x4d0>)
 8003d58:	881b      	ldrh	r3, [r3, #0]
 8003d5a:	ee07 3a90 	vmov	s15, r3
 8003d5e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003d62:	4b66      	ldr	r3, [pc, #408]	@ (8003efc <PID_cal+0x4c8>)
 8003d64:	edd3 7a00 	vldr	s15, [r3]
 8003d68:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d6c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003d70:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003d74:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	3310      	adds	r3, #16
 8003d7c:	edd3 6a00 	vldr	s13, [r3]
 8003d80:	4b60      	ldr	r3, [pc, #384]	@ (8003f04 <PID_cal+0x4d0>)
 8003d82:	881b      	ldrh	r3, [r3, #0]
 8003d84:	ee07 3a90 	vmov	s15, r3
 8003d88:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8003d8c:	4b5b      	ldr	r3, [pc, #364]	@ (8003efc <PID_cal+0x4c8>)
 8003d8e:	edd3 7a00 	vldr	s15, [r3]
 8003d92:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003d96:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8003d9a:	ee37 6a86 	vadd.f32	s12, s15, s12
 8003d9e:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8003da2:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8003da6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003daa:	68bb      	ldr	r3, [r7, #8]
 8003dac:	330c      	adds	r3, #12
 8003dae:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003db2:	edc3 7a00 	vstr	s15, [r3]
				PID_FAC[4] = PID_FAC[3];//old d_fac
 8003db6:	68bb      	ldr	r3, [r7, #8]
 8003db8:	3310      	adds	r3, #16
 8003dba:	68ba      	ldr	r2, [r7, #8]
 8003dbc:	68d2      	ldr	r2, [r2, #12]
 8003dbe:	601a      	str	r2, [r3, #0]
			}

			*PID_var = *PID_var + PID_FAC[3];
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	ed93 7a00 	vldr	s14, [r3]
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	330c      	adds	r3, #12
 8003dca:	edd3 7a00 	vldr	s15, [r3]
 8003dce:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	edc3 7a00 	vstr	s15, [r3]
//				*PID_var = 400;
//			}
//			if(*PID_var < -400){
//				*PID_var = -400;
//			}
			break;
 8003dd8:	e1b9      	b.n	800414e <PID_cal+0x71a>

		case 4:// angular rates pitch

			*PID_var = PID_FAC[0]*(pitch_ar_error);
 8003dda:	68bb      	ldr	r3, [r7, #8]
 8003ddc:	ed93 7a00 	vldr	s14, [r3]
 8003de0:	4b49      	ldr	r3, [pc, #292]	@ (8003f08 <PID_cal+0x4d4>)
 8003de2:	edd3 7a00 	vldr	s15, [r3]
 8003de6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	edc3 7a00 	vstr	s15, [r3]

			*PID_var = *PID_var + PID_FAC[1]*error_sum_angular_rate_pitch*looptime;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	ed93 7a00 	vldr	s14, [r3]
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	3304      	adds	r3, #4
 8003dfa:	edd3 6a00 	vldr	s13, [r3]
 8003dfe:	4b43      	ldr	r3, [pc, #268]	@ (8003f0c <PID_cal+0x4d8>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	ee07 3a90 	vmov	s15, r3
 8003e06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003e0a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003e0e:	4b3b      	ldr	r3, [pc, #236]	@ (8003efc <PID_cal+0x4c8>)
 8003e10:	edd3 7a00 	vldr	s15, [r3]
 8003e14:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003e18:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	edc3 7a00 	vstr	s15, [r3]


			PID_FAC[3] = PID_FAC[2]*((pitch_ar_error) - old_error_angular_rate_pitch);//policzenie częsci D
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	3308      	adds	r3, #8
 8003e26:	ed93 7a00 	vldr	s14, [r3]
 8003e2a:	4b37      	ldr	r3, [pc, #220]	@ (8003f08 <PID_cal+0x4d4>)
 8003e2c:	edd3 6a00 	vldr	s13, [r3]
 8003e30:	4b37      	ldr	r3, [pc, #220]	@ (8003f10 <PID_cal+0x4dc>)
 8003e32:	edd3 7a00 	vldr	s15, [r3]
 8003e36:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003e3a:	68bb      	ldr	r3, [r7, #8]
 8003e3c:	330c      	adds	r3, #12
 8003e3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e42:	edc3 7a00 	vstr	s15, [r3]

			//FDP
			if(FDP_D_Gain_AR > 0){
 8003e46:	4b33      	ldr	r3, [pc, #204]	@ (8003f14 <PID_cal+0x4e0>)
 8003e48:	881b      	ldrh	r3, [r3, #0]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d045      	beq.n	8003eda <PID_cal+0x4a6>
				PID_FAC[3] = (PID_FAC[3] * (FDP_D_Gain_AR * looptime) / (1 + (FDP_D_Gain_AR * looptime))) + (PID_FAC[4] * (1 / (1 + (FDP_D_Gain_AR * looptime))));
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	330c      	adds	r3, #12
 8003e52:	ed93 7a00 	vldr	s14, [r3]
 8003e56:	4b2f      	ldr	r3, [pc, #188]	@ (8003f14 <PID_cal+0x4e0>)
 8003e58:	881b      	ldrh	r3, [r3, #0]
 8003e5a:	ee07 3a90 	vmov	s15, r3
 8003e5e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003e62:	4b26      	ldr	r3, [pc, #152]	@ (8003efc <PID_cal+0x4c8>)
 8003e64:	edd3 7a00 	vldr	s15, [r3]
 8003e68:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003e6c:	ee67 6a27 	vmul.f32	s13, s14, s15
 8003e70:	4b28      	ldr	r3, [pc, #160]	@ (8003f14 <PID_cal+0x4e0>)
 8003e72:	881b      	ldrh	r3, [r3, #0]
 8003e74:	ee07 3a90 	vmov	s15, r3
 8003e78:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003e7c:	4b1f      	ldr	r3, [pc, #124]	@ (8003efc <PID_cal+0x4c8>)
 8003e7e:	edd3 7a00 	vldr	s15, [r3]
 8003e82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e86:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003e8a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003e8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e92:	68bb      	ldr	r3, [r7, #8]
 8003e94:	3310      	adds	r3, #16
 8003e96:	edd3 6a00 	vldr	s13, [r3]
 8003e9a:	4b1e      	ldr	r3, [pc, #120]	@ (8003f14 <PID_cal+0x4e0>)
 8003e9c:	881b      	ldrh	r3, [r3, #0]
 8003e9e:	ee07 3a90 	vmov	s15, r3
 8003ea2:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8003ea6:	4b15      	ldr	r3, [pc, #84]	@ (8003efc <PID_cal+0x4c8>)
 8003ea8:	edd3 7a00 	vldr	s15, [r3]
 8003eac:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003eb0:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8003eb4:	ee37 6a86 	vadd.f32	s12, s15, s12
 8003eb8:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8003ebc:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8003ec0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	330c      	adds	r3, #12
 8003ec8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ecc:	edc3 7a00 	vstr	s15, [r3]
				PID_FAC[4] = PID_FAC[3];//old d_fac
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	3310      	adds	r3, #16
 8003ed4:	68ba      	ldr	r2, [r7, #8]
 8003ed6:	68d2      	ldr	r2, [r2, #12]
 8003ed8:	601a      	str	r2, [r3, #0]
			}

			*PID_var = *PID_var + PID_FAC[3];
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	ed93 7a00 	vldr	s14, [r3]
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	330c      	adds	r3, #12
 8003ee4:	edd3 7a00 	vldr	s15, [r3]
 8003ee8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	edc3 7a00 	vstr	s15, [r3]

			break;
 8003ef2:	e12c      	b.n	800414e <PID_cal+0x71a>
 8003ef4:	00004094 	.word	0x00004094
 8003ef8:	000040c4 	.word	0x000040c4
 8003efc:	0801ea44 	.word	0x0801ea44
 8003f00:	000040ac 	.word	0x000040ac
 8003f04:	0000407e 	.word	0x0000407e
 8003f08:	00004098 	.word	0x00004098
 8003f0c:	000040c8 	.word	0x000040c8
 8003f10:	000040b0 	.word	0x000040b0
 8003f14:	0000407c 	.word	0x0000407c

		case 5:// angular rates rool

			*PID_var = PID_FAC[0]*(rool_ar_error);
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	ed93 7a00 	vldr	s14, [r3]
 8003f1e:	4b8f      	ldr	r3, [pc, #572]	@ (800415c <PID_cal+0x728>)
 8003f20:	edd3 7a00 	vldr	s15, [r3]
 8003f24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	edc3 7a00 	vstr	s15, [r3]

			*PID_var = *PID_var + PID_FAC[1]*error_sum_angular_rate_rool*looptime;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	ed93 7a00 	vldr	s14, [r3]
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	3304      	adds	r3, #4
 8003f38:	edd3 6a00 	vldr	s13, [r3]
 8003f3c:	4b88      	ldr	r3, [pc, #544]	@ (8004160 <PID_cal+0x72c>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	ee07 3a90 	vmov	s15, r3
 8003f44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003f48:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003f4c:	4b85      	ldr	r3, [pc, #532]	@ (8004164 <PID_cal+0x730>)
 8003f4e:	edd3 7a00 	vldr	s15, [r3]
 8003f52:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003f56:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	edc3 7a00 	vstr	s15, [r3]

			PID_FAC[3] =  PID_FAC[2]*((rool_ar_error) - old_error_angular_rate_rool);
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	3308      	adds	r3, #8
 8003f64:	ed93 7a00 	vldr	s14, [r3]
 8003f68:	4b7c      	ldr	r3, [pc, #496]	@ (800415c <PID_cal+0x728>)
 8003f6a:	edd3 6a00 	vldr	s13, [r3]
 8003f6e:	4b7e      	ldr	r3, [pc, #504]	@ (8004168 <PID_cal+0x734>)
 8003f70:	edd3 7a00 	vldr	s15, [r3]
 8003f74:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	330c      	adds	r3, #12
 8003f7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f80:	edc3 7a00 	vstr	s15, [r3]

			//FDP
			if(FDP_D_Gain_AR > 0){
 8003f84:	4b79      	ldr	r3, [pc, #484]	@ (800416c <PID_cal+0x738>)
 8003f86:	881b      	ldrh	r3, [r3, #0]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d045      	beq.n	8004018 <PID_cal+0x5e4>
				PID_FAC[3] = (PID_FAC[3] * (FDP_D_Gain_AR * looptime) / (1 + (FDP_D_Gain_AR * looptime))) + (PID_FAC[4] * (1 / (1 + (FDP_D_Gain_AR * looptime))));
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	330c      	adds	r3, #12
 8003f90:	ed93 7a00 	vldr	s14, [r3]
 8003f94:	4b75      	ldr	r3, [pc, #468]	@ (800416c <PID_cal+0x738>)
 8003f96:	881b      	ldrh	r3, [r3, #0]
 8003f98:	ee07 3a90 	vmov	s15, r3
 8003f9c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003fa0:	4b70      	ldr	r3, [pc, #448]	@ (8004164 <PID_cal+0x730>)
 8003fa2:	edd3 7a00 	vldr	s15, [r3]
 8003fa6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003faa:	ee67 6a27 	vmul.f32	s13, s14, s15
 8003fae:	4b6f      	ldr	r3, [pc, #444]	@ (800416c <PID_cal+0x738>)
 8003fb0:	881b      	ldrh	r3, [r3, #0]
 8003fb2:	ee07 3a90 	vmov	s15, r3
 8003fb6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003fba:	4b6a      	ldr	r3, [pc, #424]	@ (8004164 <PID_cal+0x730>)
 8003fbc:	edd3 7a00 	vldr	s15, [r3]
 8003fc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fc4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003fc8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003fcc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	3310      	adds	r3, #16
 8003fd4:	edd3 6a00 	vldr	s13, [r3]
 8003fd8:	4b64      	ldr	r3, [pc, #400]	@ (800416c <PID_cal+0x738>)
 8003fda:	881b      	ldrh	r3, [r3, #0]
 8003fdc:	ee07 3a90 	vmov	s15, r3
 8003fe0:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8003fe4:	4b5f      	ldr	r3, [pc, #380]	@ (8004164 <PID_cal+0x730>)
 8003fe6:	edd3 7a00 	vldr	s15, [r3]
 8003fea:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003fee:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8003ff2:	ee37 6a86 	vadd.f32	s12, s15, s12
 8003ff6:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8003ffa:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8003ffe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	330c      	adds	r3, #12
 8004006:	ee77 7a27 	vadd.f32	s15, s14, s15
 800400a:	edc3 7a00 	vstr	s15, [r3]
				PID_FAC[4] = PID_FAC[3];//old d_fac
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	3310      	adds	r3, #16
 8004012:	68ba      	ldr	r2, [r7, #8]
 8004014:	68d2      	ldr	r2, [r2, #12]
 8004016:	601a      	str	r2, [r3, #0]
			}

			*PID_var = *PID_var + PID_FAC[3];
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	ed93 7a00 	vldr	s14, [r3]
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	330c      	adds	r3, #12
 8004022:	edd3 7a00 	vldr	s15, [r3]
 8004026:	ee77 7a27 	vadd.f32	s15, s14, s15
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	edc3 7a00 	vstr	s15, [r3]
			break;
 8004030:	e08d      	b.n	800414e <PID_cal+0x71a>

		case 6:// angular rates yaw

			*PID_var = PID_FAC[0]*(yaw_ar_error);
 8004032:	68bb      	ldr	r3, [r7, #8]
 8004034:	ed93 7a00 	vldr	s14, [r3]
 8004038:	4b4d      	ldr	r3, [pc, #308]	@ (8004170 <PID_cal+0x73c>)
 800403a:	edd3 7a00 	vldr	s15, [r3]
 800403e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	edc3 7a00 	vstr	s15, [r3]

			*PID_var = *PID_var + PID_FAC[1]*error_sum_angular_rate_yaw*looptime;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	ed93 7a00 	vldr	s14, [r3]
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	3304      	adds	r3, #4
 8004052:	edd3 6a00 	vldr	s13, [r3]
 8004056:	4b47      	ldr	r3, [pc, #284]	@ (8004174 <PID_cal+0x740>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	ee07 3a90 	vmov	s15, r3
 800405e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004062:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004066:	4b3f      	ldr	r3, [pc, #252]	@ (8004164 <PID_cal+0x730>)
 8004068:	edd3 7a00 	vldr	s15, [r3]
 800406c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004070:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	edc3 7a00 	vstr	s15, [r3]

			PID_FAC[3] = PID_FAC[2]*((yaw_ar_error) - old_error_angular_rate_yaw);
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	3308      	adds	r3, #8
 800407e:	ed93 7a00 	vldr	s14, [r3]
 8004082:	4b3b      	ldr	r3, [pc, #236]	@ (8004170 <PID_cal+0x73c>)
 8004084:	edd3 6a00 	vldr	s13, [r3]
 8004088:	4b3b      	ldr	r3, [pc, #236]	@ (8004178 <PID_cal+0x744>)
 800408a:	edd3 7a00 	vldr	s15, [r3]
 800408e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8004092:	68bb      	ldr	r3, [r7, #8]
 8004094:	330c      	adds	r3, #12
 8004096:	ee67 7a27 	vmul.f32	s15, s14, s15
 800409a:	edc3 7a00 	vstr	s15, [r3]

			//FDP
			if(FDP_D_Gain_AR > 0){
 800409e:	4b33      	ldr	r3, [pc, #204]	@ (800416c <PID_cal+0x738>)
 80040a0:	881b      	ldrh	r3, [r3, #0]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d045      	beq.n	8004132 <PID_cal+0x6fe>
				PID_FAC[3] = (PID_FAC[3] * (FDP_D_Gain_AR * looptime) / (1 + (FDP_D_Gain_AR * looptime))) + (PID_FAC[4] * (1 / (1 + (FDP_D_Gain_AR * looptime))));//todo
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	330c      	adds	r3, #12
 80040aa:	ed93 7a00 	vldr	s14, [r3]
 80040ae:	4b2f      	ldr	r3, [pc, #188]	@ (800416c <PID_cal+0x738>)
 80040b0:	881b      	ldrh	r3, [r3, #0]
 80040b2:	ee07 3a90 	vmov	s15, r3
 80040b6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80040ba:	4b2a      	ldr	r3, [pc, #168]	@ (8004164 <PID_cal+0x730>)
 80040bc:	edd3 7a00 	vldr	s15, [r3]
 80040c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80040c4:	ee67 6a27 	vmul.f32	s13, s14, s15
 80040c8:	4b28      	ldr	r3, [pc, #160]	@ (800416c <PID_cal+0x738>)
 80040ca:	881b      	ldrh	r3, [r3, #0]
 80040cc:	ee07 3a90 	vmov	s15, r3
 80040d0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80040d4:	4b23      	ldr	r3, [pc, #140]	@ (8004164 <PID_cal+0x730>)
 80040d6:	edd3 7a00 	vldr	s15, [r3]
 80040da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040de:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80040e2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80040e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80040ea:	68bb      	ldr	r3, [r7, #8]
 80040ec:	3310      	adds	r3, #16
 80040ee:	edd3 6a00 	vldr	s13, [r3]
 80040f2:	4b1e      	ldr	r3, [pc, #120]	@ (800416c <PID_cal+0x738>)
 80040f4:	881b      	ldrh	r3, [r3, #0]
 80040f6:	ee07 3a90 	vmov	s15, r3
 80040fa:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 80040fe:	4b19      	ldr	r3, [pc, #100]	@ (8004164 <PID_cal+0x730>)
 8004100:	edd3 7a00 	vldr	s15, [r3]
 8004104:	ee66 7a27 	vmul.f32	s15, s12, s15
 8004108:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 800410c:	ee37 6a86 	vadd.f32	s12, s15, s12
 8004110:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8004114:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8004118:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	330c      	adds	r3, #12
 8004120:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004124:	edc3 7a00 	vstr	s15, [r3]
				PID_FAC[4] = PID_FAC[3];//old d_fac
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	3310      	adds	r3, #16
 800412c:	68ba      	ldr	r2, [r7, #8]
 800412e:	68d2      	ldr	r2, [r2, #12]
 8004130:	601a      	str	r2, [r3, #0]
			}

			*PID_var = *PID_var + PID_FAC[3];
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	ed93 7a00 	vldr	s14, [r3]
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	330c      	adds	r3, #12
 800413c:	edd3 7a00 	vldr	s15, [r3]
 8004140:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	edc3 7a00 	vstr	s15, [r3]
			break;
 800414a:	e000      	b.n	800414e <PID_cal+0x71a>
		default:
			break;
 800414c:	bf00      	nop
	}
}
 800414e:	bf00      	nop
 8004150:	3714      	adds	r7, #20
 8004152:	46bd      	mov	sp, r7
 8004154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004158:	4770      	bx	lr
 800415a:	bf00      	nop
 800415c:	0000409c 	.word	0x0000409c
 8004160:	000040cc 	.word	0x000040cc
 8004164:	0801ea44 	.word	0x0801ea44
 8004168:	000040b4 	.word	0x000040b4
 800416c:	0000407c 	.word	0x0000407c
 8004170:	000040a0 	.word	0x000040a0
 8004174:	000040d0 	.word	0x000040d0
 8004178:	000040b8 	.word	0x000040b8
 800417c:	00000000 	.word	0x00000000

08004180 <Get_batteryvalue>:

void Get_batteryvalue(void){
 8004180:	b480      	push	{r7}
 8004182:	af00      	add	r7, sp, #0
	 * 10V musi byc czyli 2,7027V
	 *	2,7027V to 3353
	 *	3400
	*/

	MYDRON.batterysize = (analogmess - 3353)/7.42;
 8004184:	4b1c      	ldr	r3, [pc, #112]	@ (80041f8 <Get_batteryvalue+0x78>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f6a3 5319 	subw	r3, r3, #3353	@ 0xd19
 800418c:	ee07 3a90 	vmov	s15, r3
 8004190:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8004194:	ed9f 5b16 	vldr	d5, [pc, #88]	@ 80041f0 <Get_batteryvalue+0x70>
 8004198:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800419c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80041a0:	ee17 3a90 	vmov	r3, s15
 80041a4:	b29a      	uxth	r2, r3
 80041a6:	4b15      	ldr	r3, [pc, #84]	@ (80041fc <Get_batteryvalue+0x7c>)
 80041a8:	801a      	strh	r2, [r3, #0]
	if(MYDRON.batterysize >= 100){
 80041aa:	4b14      	ldr	r3, [pc, #80]	@ (80041fc <Get_batteryvalue+0x7c>)
 80041ac:	881b      	ldrh	r3, [r3, #0]
 80041ae:	2b63      	cmp	r3, #99	@ 0x63
 80041b0:	d902      	bls.n	80041b8 <Get_batteryvalue+0x38>
		MYDRON.batterysize = 100;
 80041b2:	4b12      	ldr	r3, [pc, #72]	@ (80041fc <Get_batteryvalue+0x7c>)
 80041b4:	2264      	movs	r2, #100	@ 0x64
 80041b6:	801a      	strh	r2, [r3, #0]
	}

	if(MYDRON.batterysize < 25){
 80041b8:	4b10      	ldr	r3, [pc, #64]	@ (80041fc <Get_batteryvalue+0x7c>)
 80041ba:	881b      	ldrh	r3, [r3, #0]
 80041bc:	2b18      	cmp	r3, #24
 80041be:	d802      	bhi.n	80041c6 <Get_batteryvalue+0x46>
		MYDRON.dron_status.Battery = DRON_BATTERY_RUN_OUT;
 80041c0:	4b0e      	ldr	r3, [pc, #56]	@ (80041fc <Get_batteryvalue+0x7c>)
 80041c2:	2207      	movs	r2, #7
 80041c4:	829a      	strh	r2, [r3, #20]
	}
	if(MYDRON.batterysize <= 10){
 80041c6:	4b0d      	ldr	r3, [pc, #52]	@ (80041fc <Get_batteryvalue+0x7c>)
 80041c8:	881b      	ldrh	r3, [r3, #0]
 80041ca:	2b0a      	cmp	r3, #10
 80041cc:	d802      	bhi.n	80041d4 <Get_batteryvalue+0x54>
		MYDRON.dron_status.Battery = DRON_BATTERY_CRIT_VAL;
 80041ce:	4b0b      	ldr	r3, [pc, #44]	@ (80041fc <Get_batteryvalue+0x7c>)
 80041d0:	2209      	movs	r2, #9
 80041d2:	829a      	strh	r2, [r3, #20]
	}
	if(MYDRON.batterysize >= 25){
 80041d4:	4b09      	ldr	r3, [pc, #36]	@ (80041fc <Get_batteryvalue+0x7c>)
 80041d6:	881b      	ldrh	r3, [r3, #0]
 80041d8:	2b18      	cmp	r3, #24
 80041da:	d902      	bls.n	80041e2 <Get_batteryvalue+0x62>
		MYDRON.dron_status.Battery = DRON_BATTERY_OK;
 80041dc:	4b07      	ldr	r3, [pc, #28]	@ (80041fc <Get_batteryvalue+0x7c>)
 80041de:	2208      	movs	r2, #8
 80041e0:	829a      	strh	r2, [r3, #20]
	}
}
 80041e2:	bf00      	nop
 80041e4:	46bd      	mov	sp, r7
 80041e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ea:	4770      	bx	lr
 80041ec:	f3af 8000 	nop.w
 80041f0:	7ae147ae 	.word	0x7ae147ae
 80041f4:	401dae14 	.word	0x401dae14
 80041f8:	24000eb0 	.word	0x24000eb0
 80041fc:	00000180 	.word	0x00000180

08004200 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8004204:	2200      	movs	r2, #0
 8004206:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800420a:	4802      	ldr	r0, [pc, #8]	@ (8004214 <SELECT+0x14>)
 800420c:	f00a faf2 	bl	800e7f4 <HAL_GPIO_WritePin>
	//HAL_Delay(1);
}
 8004210:	bf00      	nop
 8004212:	bd80      	pop	{r7, pc}
 8004214:	58020c00 	.word	0x58020c00

08004218 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 800421c:	2201      	movs	r2, #1
 800421e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004222:	4802      	ldr	r0, [pc, #8]	@ (800422c <DESELECT+0x14>)
 8004224:	f00a fae6 	bl	800e7f4 <HAL_GPIO_WritePin>
	//HAL_Delay(1);
}
 8004228:	bf00      	nop
 800422a:	bd80      	pop	{r7, pc}
 800422c:	58020c00 	.word	0x58020c00

08004230 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b082      	sub	sp, #8
 8004234:	af00      	add	r7, sp, #0
 8004236:	4603      	mov	r3, r0
 8004238:	71fb      	strb	r3, [r7, #7]
	//while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
	while((DMA1_Stream0->FCR&0x38) != 32){}
 800423a:	bf00      	nop
 800423c:	4b07      	ldr	r3, [pc, #28]	@ (800425c <SPI_TxByte+0x2c>)
 800423e:	695b      	ldr	r3, [r3, #20]
 8004240:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004244:	2b20      	cmp	r3, #32
 8004246:	d1f9      	bne.n	800423c <SPI_TxByte+0xc>


	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8004248:	1df9      	adds	r1, r7, #7
 800424a:	2364      	movs	r3, #100	@ 0x64
 800424c:	2201      	movs	r2, #1
 800424e:	4804      	ldr	r0, [pc, #16]	@ (8004260 <SPI_TxByte+0x30>)
 8004250:	f010 fc2c 	bl	8014aac <HAL_SPI_Transmit>
	//HAL_SPI_Transmit_DMA(HSPI_SDCARD, &data, 1);
}
 8004254:	bf00      	nop
 8004256:	3708      	adds	r7, #8
 8004258:	46bd      	mov	sp, r7
 800425a:	bd80      	pop	{r7, pc}
 800425c:	40020010 	.word	0x40020010
 8004260:	240001f0 	.word	0x240001f0

08004264 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b082      	sub	sp, #8
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
 800426c:	460b      	mov	r3, r1
 800426e:	807b      	strh	r3, [r7, #2]
	//while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));//czekanie na zakonczenie tramnsmisji DMA?
	while((DMA1_Stream0->FCR&0x38) != 32){}
 8004270:	bf00      	nop
 8004272:	4b08      	ldr	r3, [pc, #32]	@ (8004294 <SPI_TxBuffer+0x30>)
 8004274:	695b      	ldr	r3, [r3, #20]
 8004276:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800427a:	2b20      	cmp	r3, #32
 800427c:	d1f9      	bne.n	8004272 <SPI_TxBuffer+0xe>
	//HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
	HAL_SPI_Transmit_DMA(HSPI_SDCARD, buffer, len);
 800427e:	887b      	ldrh	r3, [r7, #2]
 8004280:	461a      	mov	r2, r3
 8004282:	6879      	ldr	r1, [r7, #4]
 8004284:	4804      	ldr	r0, [pc, #16]	@ (8004298 <SPI_TxBuffer+0x34>)
 8004286:	f011 fbab 	bl	80159e0 <HAL_SPI_Transmit_DMA>
}
 800428a:	bf00      	nop
 800428c:	3708      	adds	r7, #8
 800428e:	46bd      	mov	sp, r7
 8004290:	bd80      	pop	{r7, pc}
 8004292:	bf00      	nop
 8004294:	40020010 	.word	0x40020010
 8004298:	240001f0 	.word	0x240001f0

0800429c <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b084      	sub	sp, #16
 80042a0:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 80042a2:	23ff      	movs	r3, #255	@ 0xff
 80042a4:	71fb      	strb	r3, [r7, #7]

	//while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
	while((DMA1_Stream0->FCR&0x38) != 32){}
 80042a6:	bf00      	nop
 80042a8:	4b09      	ldr	r3, [pc, #36]	@ (80042d0 <SPI_RxByte+0x34>)
 80042aa:	695b      	ldr	r3, [r3, #20]
 80042ac:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80042b0:	2b20      	cmp	r3, #32
 80042b2:	d1f9      	bne.n	80042a8 <SPI_RxByte+0xc>

	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 80042b4:	1dba      	adds	r2, r7, #6
 80042b6:	1df9      	adds	r1, r7, #7
 80042b8:	2364      	movs	r3, #100	@ 0x64
 80042ba:	9300      	str	r3, [sp, #0]
 80042bc:	2301      	movs	r3, #1
 80042be:	4805      	ldr	r0, [pc, #20]	@ (80042d4 <SPI_RxByte+0x38>)
 80042c0:	f011 f854 	bl	801536c <HAL_SPI_TransmitReceive>

	return data;
 80042c4:	79bb      	ldrb	r3, [r7, #6]
}
 80042c6:	4618      	mov	r0, r3
 80042c8:	3708      	adds	r7, #8
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd80      	pop	{r7, pc}
 80042ce:	bf00      	nop
 80042d0:	40020010 	.word	0x40020010
 80042d4:	240001f0 	.word	0x240001f0

080042d8 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b082      	sub	sp, #8
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 80042e0:	f7ff ffdc 	bl	800429c <SPI_RxByte>
 80042e4:	4603      	mov	r3, r0
 80042e6:	461a      	mov	r2, r3
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	701a      	strb	r2, [r3, #0]
}
 80042ec:	bf00      	nop
 80042ee:	3708      	adds	r7, #8
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bd80      	pop	{r7, pc}

080042f4 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b082      	sub	sp, #8
 80042f8:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 80042fa:	4b0a      	ldr	r3, [pc, #40]	@ (8004324 <SD_ReadyWait+0x30>)
 80042fc:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8004300:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 8004302:	f7ff ffcb 	bl	800429c <SPI_RxByte>
 8004306:	4603      	mov	r3, r0
 8004308:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 800430a:	79fb      	ldrb	r3, [r7, #7]
 800430c:	2bff      	cmp	r3, #255	@ 0xff
 800430e:	d004      	beq.n	800431a <SD_ReadyWait+0x26>
 8004310:	4b04      	ldr	r3, [pc, #16]	@ (8004324 <SD_ReadyWait+0x30>)
 8004312:	881b      	ldrh	r3, [r3, #0]
 8004314:	b29b      	uxth	r3, r3
 8004316:	2b00      	cmp	r3, #0
 8004318:	d1f3      	bne.n	8004302 <SD_ReadyWait+0xe>

	return res;
 800431a:	79fb      	ldrb	r3, [r7, #7]
}
 800431c:	4618      	mov	r0, r3
 800431e:	3708      	adds	r7, #8
 8004320:	46bd      	mov	sp, r7
 8004322:	bd80      	pop	{r7, pc}
 8004324:	24000380 	.word	0x24000380

08004328 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b084      	sub	sp, #16
 800432c:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 800432e:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 8004332:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8004334:	f7ff ff70 	bl	8004218 <DESELECT>
	for(int i = 0; i < 10; i++)
 8004338:	2300      	movs	r3, #0
 800433a:	60bb      	str	r3, [r7, #8]
 800433c:	e005      	b.n	800434a <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 800433e:	20ff      	movs	r0, #255	@ 0xff
 8004340:	f7ff ff76 	bl	8004230 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	3301      	adds	r3, #1
 8004348:	60bb      	str	r3, [r7, #8]
 800434a:	68bb      	ldr	r3, [r7, #8]
 800434c:	2b09      	cmp	r3, #9
 800434e:	ddf6      	ble.n	800433e <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 8004350:	f7ff ff56 	bl	8004200 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8004354:	2340      	movs	r3, #64	@ 0x40
 8004356:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8004358:	2300      	movs	r3, #0
 800435a:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 800435c:	2300      	movs	r3, #0
 800435e:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 8004360:	2300      	movs	r3, #0
 8004362:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8004364:	2300      	movs	r3, #0
 8004366:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8004368:	2395      	movs	r3, #149	@ 0x95
 800436a:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 800436c:	463b      	mov	r3, r7
 800436e:	2106      	movs	r1, #6
 8004370:	4618      	mov	r0, r3
 8004372:	f7ff ff77 	bl	8004264 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 8004376:	e002      	b.n	800437e <SD_PowerOn+0x56>
	{
		cnt--;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	3b01      	subs	r3, #1
 800437c:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 800437e:	f7ff ff8d 	bl	800429c <SPI_RxByte>
 8004382:	4603      	mov	r3, r0
 8004384:	2b01      	cmp	r3, #1
 8004386:	d002      	beq.n	800438e <SD_PowerOn+0x66>
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d1f4      	bne.n	8004378 <SD_PowerOn+0x50>
	}

	DESELECT();
 800438e:	f7ff ff43 	bl	8004218 <DESELECT>
	SPI_TxByte(0XFF);
 8004392:	20ff      	movs	r0, #255	@ 0xff
 8004394:	f7ff ff4c 	bl	8004230 <SPI_TxByte>

	PowerFlag = 1;
 8004398:	4b03      	ldr	r3, [pc, #12]	@ (80043a8 <SD_PowerOn+0x80>)
 800439a:	2201      	movs	r2, #1
 800439c:	701a      	strb	r2, [r3, #0]
}
 800439e:	bf00      	nop
 80043a0:	3710      	adds	r7, #16
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bd80      	pop	{r7, pc}
 80043a6:	bf00      	nop
 80043a8:	24000199 	.word	0x24000199

080043ac <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 80043ac:	b480      	push	{r7}
 80043ae:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 80043b0:	4b03      	ldr	r3, [pc, #12]	@ (80043c0 <SD_PowerOff+0x14>)
 80043b2:	2200      	movs	r2, #0
 80043b4:	701a      	strb	r2, [r3, #0]
}
 80043b6:	bf00      	nop
 80043b8:	46bd      	mov	sp, r7
 80043ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043be:	4770      	bx	lr
 80043c0:	24000199 	.word	0x24000199

080043c4 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 80043c4:	b480      	push	{r7}
 80043c6:	af00      	add	r7, sp, #0
	return PowerFlag;
 80043c8:	4b03      	ldr	r3, [pc, #12]	@ (80043d8 <SD_CheckPower+0x14>)
 80043ca:	781b      	ldrb	r3, [r3, #0]
}
 80043cc:	4618      	mov	r0, r3
 80043ce:	46bd      	mov	sp, r7
 80043d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d4:	4770      	bx	lr
 80043d6:	bf00      	nop
 80043d8:	24000199 	.word	0x24000199

080043dc <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b084      	sub	sp, #16
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
 80043e4:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 10;
 80043e6:	4b14      	ldr	r3, [pc, #80]	@ (8004438 <SD_RxDataBlock+0x5c>)
 80043e8:	220a      	movs	r2, #10
 80043ea:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 80043ec:	f7ff ff56 	bl	800429c <SPI_RxByte>
 80043f0:	4603      	mov	r3, r0
 80043f2:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 80043f4:	7bfb      	ldrb	r3, [r7, #15]
 80043f6:	2bff      	cmp	r3, #255	@ 0xff
 80043f8:	d104      	bne.n	8004404 <SD_RxDataBlock+0x28>
 80043fa:	4b0f      	ldr	r3, [pc, #60]	@ (8004438 <SD_RxDataBlock+0x5c>)
 80043fc:	881b      	ldrh	r3, [r3, #0]
 80043fe:	b29b      	uxth	r3, r3
 8004400:	2b00      	cmp	r3, #0
 8004402:	d1f3      	bne.n	80043ec <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 8004404:	7bfb      	ldrb	r3, [r7, #15]
 8004406:	2bfe      	cmp	r3, #254	@ 0xfe
 8004408:	d001      	beq.n	800440e <SD_RxDataBlock+0x32>
 800440a:	2300      	movs	r3, #0
 800440c:	e00f      	b.n	800442e <SD_RxDataBlock+0x52>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	1c5a      	adds	r2, r3, #1
 8004412:	607a      	str	r2, [r7, #4]
 8004414:	4618      	mov	r0, r3
 8004416:	f7ff ff5f 	bl	80042d8 <SPI_RxBytePtr>
	} while(len--);
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	1e5a      	subs	r2, r3, #1
 800441e:	603a      	str	r2, [r7, #0]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d1f4      	bne.n	800440e <SD_RxDataBlock+0x32>

	/* discard CRC */
	SPI_RxByte();
 8004424:	f7ff ff3a 	bl	800429c <SPI_RxByte>
	SPI_RxByte();
 8004428:	f7ff ff38 	bl	800429c <SPI_RxByte>

	return TRUE;
 800442c:	2301      	movs	r3, #1
}
 800442e:	4618      	mov	r0, r3
 8004430:	3710      	adds	r7, #16
 8004432:	46bd      	mov	sp, r7
 8004434:	bd80      	pop	{r7, pc}
 8004436:	bf00      	nop
 8004438:	2400037c 	.word	0x2400037c

0800443c <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b084      	sub	sp, #16
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
 8004444:	460b      	mov	r3, r1
 8004446:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8004448:	2300      	movs	r3, #0
 800444a:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 800444c:	f7ff ff52 	bl	80042f4 <SD_ReadyWait>
 8004450:	4603      	mov	r3, r0
 8004452:	2bff      	cmp	r3, #255	@ 0xff
 8004454:	d001      	beq.n	800445a <SD_TxDataBlock+0x1e>
 8004456:	2300      	movs	r3, #0
 8004458:	e02f      	b.n	80044ba <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 800445a:	78fb      	ldrb	r3, [r7, #3]
 800445c:	4618      	mov	r0, r3
 800445e:	f7ff fee7 	bl	8004230 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 8004462:	78fb      	ldrb	r3, [r7, #3]
 8004464:	2bfd      	cmp	r3, #253	@ 0xfd
 8004466:	d020      	beq.n	80044aa <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 8004468:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800446c:	6878      	ldr	r0, [r7, #4]
 800446e:	f7ff fef9 	bl	8004264 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 8004472:	f7ff ff13 	bl	800429c <SPI_RxByte>
		SPI_RxByte();
 8004476:	f7ff ff11 	bl	800429c <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 800447a:	e00b      	b.n	8004494 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 800447c:	f7ff ff0e 	bl	800429c <SPI_RxByte>
 8004480:	4603      	mov	r3, r0
 8004482:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8004484:	7bfb      	ldrb	r3, [r7, #15]
 8004486:	f003 031f 	and.w	r3, r3, #31
 800448a:	2b05      	cmp	r3, #5
 800448c:	d006      	beq.n	800449c <SD_TxDataBlock+0x60>
			i++;
 800448e:	7bbb      	ldrb	r3, [r7, #14]
 8004490:	3301      	adds	r3, #1
 8004492:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8004494:	7bbb      	ldrb	r3, [r7, #14]
 8004496:	2b40      	cmp	r3, #64	@ 0x40
 8004498:	d9f0      	bls.n	800447c <SD_TxDataBlock+0x40>
 800449a:	e000      	b.n	800449e <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 800449c:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 800449e:	bf00      	nop
 80044a0:	f7ff fefc 	bl	800429c <SPI_RxByte>
 80044a4:	4603      	mov	r3, r0
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d0fa      	beq.n	80044a0 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 80044aa:	7bfb      	ldrb	r3, [r7, #15]
 80044ac:	f003 031f 	and.w	r3, r3, #31
 80044b0:	2b05      	cmp	r3, #5
 80044b2:	d101      	bne.n	80044b8 <SD_TxDataBlock+0x7c>
 80044b4:	2301      	movs	r3, #1
 80044b6:	e000      	b.n	80044ba <SD_TxDataBlock+0x7e>

	return FALSE;
 80044b8:	2300      	movs	r3, #0
}
 80044ba:	4618      	mov	r0, r3
 80044bc:	3710      	adds	r7, #16
 80044be:	46bd      	mov	sp, r7
 80044c0:	bd80      	pop	{r7, pc}

080044c2 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 80044c2:	b580      	push	{r7, lr}
 80044c4:	b084      	sub	sp, #16
 80044c6:	af00      	add	r7, sp, #0
 80044c8:	4603      	mov	r3, r0
 80044ca:	6039      	str	r1, [r7, #0]
 80044cc:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 80044ce:	f7ff ff11 	bl	80042f4 <SD_ReadyWait>
 80044d2:	4603      	mov	r3, r0
 80044d4:	2bff      	cmp	r3, #255	@ 0xff
 80044d6:	d001      	beq.n	80044dc <SD_SendCmd+0x1a>
 80044d8:	23ff      	movs	r3, #255	@ 0xff
 80044da:	e042      	b.n	8004562 <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 80044dc:	79fb      	ldrb	r3, [r7, #7]
 80044de:	4618      	mov	r0, r3
 80044e0:	f7ff fea6 	bl	8004230 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	0e1b      	lsrs	r3, r3, #24
 80044e8:	b2db      	uxtb	r3, r3
 80044ea:	4618      	mov	r0, r3
 80044ec:	f7ff fea0 	bl	8004230 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	0c1b      	lsrs	r3, r3, #16
 80044f4:	b2db      	uxtb	r3, r3
 80044f6:	4618      	mov	r0, r3
 80044f8:	f7ff fe9a 	bl	8004230 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	0a1b      	lsrs	r3, r3, #8
 8004500:	b2db      	uxtb	r3, r3
 8004502:	4618      	mov	r0, r3
 8004504:	f7ff fe94 	bl	8004230 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	b2db      	uxtb	r3, r3
 800450c:	4618      	mov	r0, r3
 800450e:	f7ff fe8f 	bl	8004230 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 8004512:	79fb      	ldrb	r3, [r7, #7]
 8004514:	2b40      	cmp	r3, #64	@ 0x40
 8004516:	d102      	bne.n	800451e <SD_SendCmd+0x5c>
 8004518:	2395      	movs	r3, #149	@ 0x95
 800451a:	73fb      	strb	r3, [r7, #15]
 800451c:	e007      	b.n	800452e <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 800451e:	79fb      	ldrb	r3, [r7, #7]
 8004520:	2b48      	cmp	r3, #72	@ 0x48
 8004522:	d102      	bne.n	800452a <SD_SendCmd+0x68>
 8004524:	2387      	movs	r3, #135	@ 0x87
 8004526:	73fb      	strb	r3, [r7, #15]
 8004528:	e001      	b.n	800452e <SD_SendCmd+0x6c>
	else crc = 1;
 800452a:	2301      	movs	r3, #1
 800452c:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 800452e:	7bfb      	ldrb	r3, [r7, #15]
 8004530:	4618      	mov	r0, r3
 8004532:	f7ff fe7d 	bl	8004230 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 8004536:	79fb      	ldrb	r3, [r7, #7]
 8004538:	2b4c      	cmp	r3, #76	@ 0x4c
 800453a:	d101      	bne.n	8004540 <SD_SendCmd+0x7e>
 800453c:	f7ff feae 	bl	800429c <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8004540:	230a      	movs	r3, #10
 8004542:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8004544:	f7ff feaa 	bl	800429c <SPI_RxByte>
 8004548:	4603      	mov	r3, r0
 800454a:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 800454c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8004550:	2b00      	cmp	r3, #0
 8004552:	da05      	bge.n	8004560 <SD_SendCmd+0x9e>
 8004554:	7bbb      	ldrb	r3, [r7, #14]
 8004556:	3b01      	subs	r3, #1
 8004558:	73bb      	strb	r3, [r7, #14]
 800455a:	7bbb      	ldrb	r3, [r7, #14]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d1f1      	bne.n	8004544 <SD_SendCmd+0x82>

	return res;
 8004560:	7b7b      	ldrb	r3, [r7, #13]
}
 8004562:	4618      	mov	r0, r3
 8004564:	3710      	adds	r7, #16
 8004566:	46bd      	mov	sp, r7
 8004568:	bd80      	pop	{r7, pc}
	...

0800456c <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 800456c:	b590      	push	{r4, r7, lr}
 800456e:	b085      	sub	sp, #20
 8004570:	af00      	add	r7, sp, #0
 8004572:	4603      	mov	r3, r0
 8004574:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 8004576:	79fb      	ldrb	r3, [r7, #7]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d001      	beq.n	8004580 <SD_disk_initialize+0x14>
 800457c:	2301      	movs	r3, #1
 800457e:	e0d6      	b.n	800472e <SD_disk_initialize+0x1c2>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8004580:	4b6d      	ldr	r3, [pc, #436]	@ (8004738 <SD_disk_initialize+0x1cc>)
 8004582:	781b      	ldrb	r3, [r3, #0]
 8004584:	b2db      	uxtb	r3, r3
 8004586:	f003 0302 	and.w	r3, r3, #2
 800458a:	2b00      	cmp	r3, #0
 800458c:	d003      	beq.n	8004596 <SD_disk_initialize+0x2a>
 800458e:	4b6a      	ldr	r3, [pc, #424]	@ (8004738 <SD_disk_initialize+0x1cc>)
 8004590:	781b      	ldrb	r3, [r3, #0]
 8004592:	b2db      	uxtb	r3, r3
 8004594:	e0cb      	b.n	800472e <SD_disk_initialize+0x1c2>

	/* power on */
	SD_PowerOn();
 8004596:	f7ff fec7 	bl	8004328 <SD_PowerOn>

	/* slave select */
	SELECT();
 800459a:	f7ff fe31 	bl	8004200 <SELECT>

	/* check disk type */
	type = 0;
 800459e:	2300      	movs	r3, #0
 80045a0:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 80045a2:	2100      	movs	r1, #0
 80045a4:	2040      	movs	r0, #64	@ 0x40
 80045a6:	f7ff ff8c 	bl	80044c2 <SD_SendCmd>
 80045aa:	4603      	mov	r3, r0
 80045ac:	2b01      	cmp	r3, #1
 80045ae:	f040 80a6 	bne.w	80046fe <SD_disk_initialize+0x192>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 80045b2:	4b62      	ldr	r3, [pc, #392]	@ (800473c <SD_disk_initialize+0x1d0>)
 80045b4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80045b8:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 80045ba:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 80045be:	2048      	movs	r0, #72	@ 0x48
 80045c0:	f7ff ff7f 	bl	80044c2 <SD_SendCmd>
 80045c4:	4603      	mov	r3, r0
 80045c6:	2b01      	cmp	r3, #1
 80045c8:	d158      	bne.n	800467c <SD_disk_initialize+0x110>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 80045ca:	2300      	movs	r3, #0
 80045cc:	73fb      	strb	r3, [r7, #15]
 80045ce:	e00c      	b.n	80045ea <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 80045d0:	7bfc      	ldrb	r4, [r7, #15]
 80045d2:	f7ff fe63 	bl	800429c <SPI_RxByte>
 80045d6:	4603      	mov	r3, r0
 80045d8:	461a      	mov	r2, r3
 80045da:	f104 0310 	add.w	r3, r4, #16
 80045de:	443b      	add	r3, r7
 80045e0:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 80045e4:	7bfb      	ldrb	r3, [r7, #15]
 80045e6:	3301      	adds	r3, #1
 80045e8:	73fb      	strb	r3, [r7, #15]
 80045ea:	7bfb      	ldrb	r3, [r7, #15]
 80045ec:	2b03      	cmp	r3, #3
 80045ee:	d9ef      	bls.n	80045d0 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 80045f0:	7abb      	ldrb	r3, [r7, #10]
 80045f2:	2b01      	cmp	r3, #1
 80045f4:	f040 8083 	bne.w	80046fe <SD_disk_initialize+0x192>
 80045f8:	7afb      	ldrb	r3, [r7, #11]
 80045fa:	2baa      	cmp	r3, #170	@ 0xaa
 80045fc:	d17f      	bne.n	80046fe <SD_disk_initialize+0x192>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80045fe:	2100      	movs	r1, #0
 8004600:	2077      	movs	r0, #119	@ 0x77
 8004602:	f7ff ff5e 	bl	80044c2 <SD_SendCmd>
 8004606:	4603      	mov	r3, r0
 8004608:	2b01      	cmp	r3, #1
 800460a:	d807      	bhi.n	800461c <SD_disk_initialize+0xb0>
 800460c:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8004610:	2069      	movs	r0, #105	@ 0x69
 8004612:	f7ff ff56 	bl	80044c2 <SD_SendCmd>
 8004616:	4603      	mov	r3, r0
 8004618:	2b00      	cmp	r3, #0
 800461a:	d005      	beq.n	8004628 <SD_disk_initialize+0xbc>
				} while (Timer1);
 800461c:	4b47      	ldr	r3, [pc, #284]	@ (800473c <SD_disk_initialize+0x1d0>)
 800461e:	881b      	ldrh	r3, [r3, #0]
 8004620:	b29b      	uxth	r3, r3
 8004622:	2b00      	cmp	r3, #0
 8004624:	d1eb      	bne.n	80045fe <SD_disk_initialize+0x92>
 8004626:	e000      	b.n	800462a <SD_disk_initialize+0xbe>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8004628:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 800462a:	4b44      	ldr	r3, [pc, #272]	@ (800473c <SD_disk_initialize+0x1d0>)
 800462c:	881b      	ldrh	r3, [r3, #0]
 800462e:	b29b      	uxth	r3, r3
 8004630:	2b00      	cmp	r3, #0
 8004632:	d064      	beq.n	80046fe <SD_disk_initialize+0x192>
 8004634:	2100      	movs	r1, #0
 8004636:	207a      	movs	r0, #122	@ 0x7a
 8004638:	f7ff ff43 	bl	80044c2 <SD_SendCmd>
 800463c:	4603      	mov	r3, r0
 800463e:	2b00      	cmp	r3, #0
 8004640:	d15d      	bne.n	80046fe <SD_disk_initialize+0x192>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 8004642:	2300      	movs	r3, #0
 8004644:	73fb      	strb	r3, [r7, #15]
 8004646:	e00c      	b.n	8004662 <SD_disk_initialize+0xf6>
					{
						ocr[n] = SPI_RxByte();
 8004648:	7bfc      	ldrb	r4, [r7, #15]
 800464a:	f7ff fe27 	bl	800429c <SPI_RxByte>
 800464e:	4603      	mov	r3, r0
 8004650:	461a      	mov	r2, r3
 8004652:	f104 0310 	add.w	r3, r4, #16
 8004656:	443b      	add	r3, r7
 8004658:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 800465c:	7bfb      	ldrb	r3, [r7, #15]
 800465e:	3301      	adds	r3, #1
 8004660:	73fb      	strb	r3, [r7, #15]
 8004662:	7bfb      	ldrb	r3, [r7, #15]
 8004664:	2b03      	cmp	r3, #3
 8004666:	d9ef      	bls.n	8004648 <SD_disk_initialize+0xdc>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8004668:	7a3b      	ldrb	r3, [r7, #8]
 800466a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800466e:	2b00      	cmp	r3, #0
 8004670:	d001      	beq.n	8004676 <SD_disk_initialize+0x10a>
 8004672:	230c      	movs	r3, #12
 8004674:	e000      	b.n	8004678 <SD_disk_initialize+0x10c>
 8004676:	2304      	movs	r3, #4
 8004678:	73bb      	strb	r3, [r7, #14]
 800467a:	e040      	b.n	80046fe <SD_disk_initialize+0x192>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 800467c:	2100      	movs	r1, #0
 800467e:	2077      	movs	r0, #119	@ 0x77
 8004680:	f7ff ff1f 	bl	80044c2 <SD_SendCmd>
 8004684:	4603      	mov	r3, r0
 8004686:	2b01      	cmp	r3, #1
 8004688:	d808      	bhi.n	800469c <SD_disk_initialize+0x130>
 800468a:	2100      	movs	r1, #0
 800468c:	2069      	movs	r0, #105	@ 0x69
 800468e:	f7ff ff18 	bl	80044c2 <SD_SendCmd>
 8004692:	4603      	mov	r3, r0
 8004694:	2b01      	cmp	r3, #1
 8004696:	d801      	bhi.n	800469c <SD_disk_initialize+0x130>
 8004698:	2302      	movs	r3, #2
 800469a:	e000      	b.n	800469e <SD_disk_initialize+0x132>
 800469c:	2301      	movs	r3, #1
 800469e:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 80046a0:	7bbb      	ldrb	r3, [r7, #14]
 80046a2:	2b02      	cmp	r3, #2
 80046a4:	d10e      	bne.n	80046c4 <SD_disk_initialize+0x158>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 80046a6:	2100      	movs	r1, #0
 80046a8:	2077      	movs	r0, #119	@ 0x77
 80046aa:	f7ff ff0a 	bl	80044c2 <SD_SendCmd>
 80046ae:	4603      	mov	r3, r0
 80046b0:	2b01      	cmp	r3, #1
 80046b2:	d80e      	bhi.n	80046d2 <SD_disk_initialize+0x166>
 80046b4:	2100      	movs	r1, #0
 80046b6:	2069      	movs	r0, #105	@ 0x69
 80046b8:	f7ff ff03 	bl	80044c2 <SD_SendCmd>
 80046bc:	4603      	mov	r3, r0
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d107      	bne.n	80046d2 <SD_disk_initialize+0x166>
 80046c2:	e00d      	b.n	80046e0 <SD_disk_initialize+0x174>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80046c4:	2100      	movs	r1, #0
 80046c6:	2041      	movs	r0, #65	@ 0x41
 80046c8:	f7ff fefb 	bl	80044c2 <SD_SendCmd>
 80046cc:	4603      	mov	r3, r0
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d005      	beq.n	80046de <SD_disk_initialize+0x172>
				}

			} while (Timer1);
 80046d2:	4b1a      	ldr	r3, [pc, #104]	@ (800473c <SD_disk_initialize+0x1d0>)
 80046d4:	881b      	ldrh	r3, [r3, #0]
 80046d6:	b29b      	uxth	r3, r3
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d1e1      	bne.n	80046a0 <SD_disk_initialize+0x134>
 80046dc:	e000      	b.n	80046e0 <SD_disk_initialize+0x174>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80046de:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 80046e0:	4b16      	ldr	r3, [pc, #88]	@ (800473c <SD_disk_initialize+0x1d0>)
 80046e2:	881b      	ldrh	r3, [r3, #0]
 80046e4:	b29b      	uxth	r3, r3
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d007      	beq.n	80046fa <SD_disk_initialize+0x18e>
 80046ea:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80046ee:	2050      	movs	r0, #80	@ 0x50
 80046f0:	f7ff fee7 	bl	80044c2 <SD_SendCmd>
 80046f4:	4603      	mov	r3, r0
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d001      	beq.n	80046fe <SD_disk_initialize+0x192>
 80046fa:	2300      	movs	r3, #0
 80046fc:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 80046fe:	4a10      	ldr	r2, [pc, #64]	@ (8004740 <SD_disk_initialize+0x1d4>)
 8004700:	7bbb      	ldrb	r3, [r7, #14]
 8004702:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 8004704:	f7ff fd88 	bl	8004218 <DESELECT>
	SPI_RxByte();
 8004708:	f7ff fdc8 	bl	800429c <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 800470c:	7bbb      	ldrb	r3, [r7, #14]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d008      	beq.n	8004724 <SD_disk_initialize+0x1b8>
	{
		Stat &= ~STA_NOINIT;
 8004712:	4b09      	ldr	r3, [pc, #36]	@ (8004738 <SD_disk_initialize+0x1cc>)
 8004714:	781b      	ldrb	r3, [r3, #0]
 8004716:	b2db      	uxtb	r3, r3
 8004718:	f023 0301 	bic.w	r3, r3, #1
 800471c:	b2da      	uxtb	r2, r3
 800471e:	4b06      	ldr	r3, [pc, #24]	@ (8004738 <SD_disk_initialize+0x1cc>)
 8004720:	701a      	strb	r2, [r3, #0]
 8004722:	e001      	b.n	8004728 <SD_disk_initialize+0x1bc>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8004724:	f7ff fe42 	bl	80043ac <SD_PowerOff>
	}

	return Stat;
 8004728:	4b03      	ldr	r3, [pc, #12]	@ (8004738 <SD_disk_initialize+0x1cc>)
 800472a:	781b      	ldrb	r3, [r3, #0]
 800472c:	b2db      	uxtb	r3, r3
}
 800472e:	4618      	mov	r0, r3
 8004730:	3714      	adds	r7, #20
 8004732:	46bd      	mov	sp, r7
 8004734:	bd90      	pop	{r4, r7, pc}
 8004736:	bf00      	nop
 8004738:	24000004 	.word	0x24000004
 800473c:	2400037c 	.word	0x2400037c
 8004740:	24000198 	.word	0x24000198

08004744 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 8004744:	b480      	push	{r7}
 8004746:	b083      	sub	sp, #12
 8004748:	af00      	add	r7, sp, #0
 800474a:	4603      	mov	r3, r0
 800474c:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 800474e:	79fb      	ldrb	r3, [r7, #7]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d001      	beq.n	8004758 <SD_disk_status+0x14>
 8004754:	2301      	movs	r3, #1
 8004756:	e002      	b.n	800475e <SD_disk_status+0x1a>
	return Stat;
 8004758:	4b04      	ldr	r3, [pc, #16]	@ (800476c <SD_disk_status+0x28>)
 800475a:	781b      	ldrb	r3, [r3, #0]
 800475c:	b2db      	uxtb	r3, r3
}
 800475e:	4618      	mov	r0, r3
 8004760:	370c      	adds	r7, #12
 8004762:	46bd      	mov	sp, r7
 8004764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004768:	4770      	bx	lr
 800476a:	bf00      	nop
 800476c:	24000004 	.word	0x24000004

08004770 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b084      	sub	sp, #16
 8004774:	af00      	add	r7, sp, #0
 8004776:	60b9      	str	r1, [r7, #8]
 8004778:	607a      	str	r2, [r7, #4]
 800477a:	603b      	str	r3, [r7, #0]
 800477c:	4603      	mov	r3, r0
 800477e:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8004780:	7bfb      	ldrb	r3, [r7, #15]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d102      	bne.n	800478c <SD_disk_read+0x1c>
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d101      	bne.n	8004790 <SD_disk_read+0x20>
 800478c:	2304      	movs	r3, #4
 800478e:	e051      	b.n	8004834 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8004790:	4b2a      	ldr	r3, [pc, #168]	@ (800483c <SD_disk_read+0xcc>)
 8004792:	781b      	ldrb	r3, [r3, #0]
 8004794:	b2db      	uxtb	r3, r3
 8004796:	f003 0301 	and.w	r3, r3, #1
 800479a:	2b00      	cmp	r3, #0
 800479c:	d001      	beq.n	80047a2 <SD_disk_read+0x32>
 800479e:	2303      	movs	r3, #3
 80047a0:	e048      	b.n	8004834 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 80047a2:	4b27      	ldr	r3, [pc, #156]	@ (8004840 <SD_disk_read+0xd0>)
 80047a4:	781b      	ldrb	r3, [r3, #0]
 80047a6:	f003 0304 	and.w	r3, r3, #4
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d102      	bne.n	80047b4 <SD_disk_read+0x44>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	025b      	lsls	r3, r3, #9
 80047b2:	607b      	str	r3, [r7, #4]

	SELECT();
 80047b4:	f7ff fd24 	bl	8004200 <SELECT>

	if (count == 1)
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	2b01      	cmp	r3, #1
 80047bc:	d111      	bne.n	80047e2 <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 80047be:	6879      	ldr	r1, [r7, #4]
 80047c0:	2051      	movs	r0, #81	@ 0x51
 80047c2:	f7ff fe7e 	bl	80044c2 <SD_SendCmd>
 80047c6:	4603      	mov	r3, r0
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d129      	bne.n	8004820 <SD_disk_read+0xb0>
 80047cc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80047d0:	68b8      	ldr	r0, [r7, #8]
 80047d2:	f7ff fe03 	bl	80043dc <SD_RxDataBlock>
 80047d6:	4603      	mov	r3, r0
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d021      	beq.n	8004820 <SD_disk_read+0xb0>
 80047dc:	2300      	movs	r3, #0
 80047de:	603b      	str	r3, [r7, #0]
 80047e0:	e01e      	b.n	8004820 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 80047e2:	6879      	ldr	r1, [r7, #4]
 80047e4:	2052      	movs	r0, #82	@ 0x52
 80047e6:	f7ff fe6c 	bl	80044c2 <SD_SendCmd>
 80047ea:	4603      	mov	r3, r0
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d117      	bne.n	8004820 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 80047f0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80047f4:	68b8      	ldr	r0, [r7, #8]
 80047f6:	f7ff fdf1 	bl	80043dc <SD_RxDataBlock>
 80047fa:	4603      	mov	r3, r0
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d00a      	beq.n	8004816 <SD_disk_read+0xa6>
				buff += 512;
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8004806:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	3b01      	subs	r3, #1
 800480c:	603b      	str	r3, [r7, #0]
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d1ed      	bne.n	80047f0 <SD_disk_read+0x80>
 8004814:	e000      	b.n	8004818 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 8004816:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8004818:	2100      	movs	r1, #0
 800481a:	204c      	movs	r0, #76	@ 0x4c
 800481c:	f7ff fe51 	bl	80044c2 <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8004820:	f7ff fcfa 	bl	8004218 <DESELECT>
	SPI_RxByte();
 8004824:	f7ff fd3a 	bl	800429c <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	2b00      	cmp	r3, #0
 800482c:	bf14      	ite	ne
 800482e:	2301      	movne	r3, #1
 8004830:	2300      	moveq	r3, #0
 8004832:	b2db      	uxtb	r3, r3
}
 8004834:	4618      	mov	r0, r3
 8004836:	3710      	adds	r7, #16
 8004838:	46bd      	mov	sp, r7
 800483a:	bd80      	pop	{r7, pc}
 800483c:	24000004 	.word	0x24000004
 8004840:	24000198 	.word	0x24000198

08004844 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b084      	sub	sp, #16
 8004848:	af00      	add	r7, sp, #0
 800484a:	60b9      	str	r1, [r7, #8]
 800484c:	607a      	str	r2, [r7, #4]
 800484e:	603b      	str	r3, [r7, #0]
 8004850:	4603      	mov	r3, r0
 8004852:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8004854:	7bfb      	ldrb	r3, [r7, #15]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d102      	bne.n	8004860 <SD_disk_write+0x1c>
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d101      	bne.n	8004864 <SD_disk_write+0x20>
 8004860:	2304      	movs	r3, #4
 8004862:	e06b      	b.n	800493c <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8004864:	4b37      	ldr	r3, [pc, #220]	@ (8004944 <SD_disk_write+0x100>)
 8004866:	781b      	ldrb	r3, [r3, #0]
 8004868:	b2db      	uxtb	r3, r3
 800486a:	f003 0301 	and.w	r3, r3, #1
 800486e:	2b00      	cmp	r3, #0
 8004870:	d001      	beq.n	8004876 <SD_disk_write+0x32>
 8004872:	2303      	movs	r3, #3
 8004874:	e062      	b.n	800493c <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8004876:	4b33      	ldr	r3, [pc, #204]	@ (8004944 <SD_disk_write+0x100>)
 8004878:	781b      	ldrb	r3, [r3, #0]
 800487a:	b2db      	uxtb	r3, r3
 800487c:	f003 0304 	and.w	r3, r3, #4
 8004880:	2b00      	cmp	r3, #0
 8004882:	d001      	beq.n	8004888 <SD_disk_write+0x44>
 8004884:	2302      	movs	r3, #2
 8004886:	e059      	b.n	800493c <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8004888:	4b2f      	ldr	r3, [pc, #188]	@ (8004948 <SD_disk_write+0x104>)
 800488a:	781b      	ldrb	r3, [r3, #0]
 800488c:	f003 0304 	and.w	r3, r3, #4
 8004890:	2b00      	cmp	r3, #0
 8004892:	d102      	bne.n	800489a <SD_disk_write+0x56>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	025b      	lsls	r3, r3, #9
 8004898:	607b      	str	r3, [r7, #4]

	SELECT();
 800489a:	f7ff fcb1 	bl	8004200 <SELECT>

	if (count == 1)
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	2b01      	cmp	r3, #1
 80048a2:	d110      	bne.n	80048c6 <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 80048a4:	6879      	ldr	r1, [r7, #4]
 80048a6:	2058      	movs	r0, #88	@ 0x58
 80048a8:	f7ff fe0b 	bl	80044c2 <SD_SendCmd>
 80048ac:	4603      	mov	r3, r0
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d13a      	bne.n	8004928 <SD_disk_write+0xe4>
 80048b2:	21fe      	movs	r1, #254	@ 0xfe
 80048b4:	68b8      	ldr	r0, [r7, #8]
 80048b6:	f7ff fdc1 	bl	800443c <SD_TxDataBlock>
 80048ba:	4603      	mov	r3, r0
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d033      	beq.n	8004928 <SD_disk_write+0xe4>
			count = 0;
 80048c0:	2300      	movs	r3, #0
 80048c2:	603b      	str	r3, [r7, #0]
 80048c4:	e030      	b.n	8004928 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 80048c6:	4b20      	ldr	r3, [pc, #128]	@ (8004948 <SD_disk_write+0x104>)
 80048c8:	781b      	ldrb	r3, [r3, #0]
 80048ca:	f003 0302 	and.w	r3, r3, #2
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d007      	beq.n	80048e2 <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 80048d2:	2100      	movs	r1, #0
 80048d4:	2077      	movs	r0, #119	@ 0x77
 80048d6:	f7ff fdf4 	bl	80044c2 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 80048da:	6839      	ldr	r1, [r7, #0]
 80048dc:	2057      	movs	r0, #87	@ 0x57
 80048de:	f7ff fdf0 	bl	80044c2 <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 80048e2:	6879      	ldr	r1, [r7, #4]
 80048e4:	2059      	movs	r0, #89	@ 0x59
 80048e6:	f7ff fdec 	bl	80044c2 <SD_SendCmd>
 80048ea:	4603      	mov	r3, r0
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d11b      	bne.n	8004928 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 80048f0:	21fc      	movs	r1, #252	@ 0xfc
 80048f2:	68b8      	ldr	r0, [r7, #8]
 80048f4:	f7ff fda2 	bl	800443c <SD_TxDataBlock>
 80048f8:	4603      	mov	r3, r0
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d00a      	beq.n	8004914 <SD_disk_write+0xd0>
				buff += 512;
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8004904:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	3b01      	subs	r3, #1
 800490a:	603b      	str	r3, [r7, #0]
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d1ee      	bne.n	80048f0 <SD_disk_write+0xac>
 8004912:	e000      	b.n	8004916 <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8004914:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8004916:	21fd      	movs	r1, #253	@ 0xfd
 8004918:	2000      	movs	r0, #0
 800491a:	f7ff fd8f 	bl	800443c <SD_TxDataBlock>
 800491e:	4603      	mov	r3, r0
 8004920:	2b00      	cmp	r3, #0
 8004922:	d101      	bne.n	8004928 <SD_disk_write+0xe4>
			{
				count = 1;
 8004924:	2301      	movs	r3, #1
 8004926:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8004928:	f7ff fc76 	bl	8004218 <DESELECT>
	SPI_RxByte();
 800492c:	f7ff fcb6 	bl	800429c <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	2b00      	cmp	r3, #0
 8004934:	bf14      	ite	ne
 8004936:	2301      	movne	r3, #1
 8004938:	2300      	moveq	r3, #0
 800493a:	b2db      	uxtb	r3, r3
}
 800493c:	4618      	mov	r0, r3
 800493e:	3710      	adds	r7, #16
 8004940:	46bd      	mov	sp, r7
 8004942:	bd80      	pop	{r7, pc}
 8004944:	24000004 	.word	0x24000004
 8004948:	24000198 	.word	0x24000198

0800494c <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 800494c:	b590      	push	{r4, r7, lr}
 800494e:	b08b      	sub	sp, #44	@ 0x2c
 8004950:	af00      	add	r7, sp, #0
 8004952:	4603      	mov	r3, r0
 8004954:	603a      	str	r2, [r7, #0]
 8004956:	71fb      	strb	r3, [r7, #7]
 8004958:	460b      	mov	r3, r1
 800495a:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8004960:	79fb      	ldrb	r3, [r7, #7]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d001      	beq.n	800496a <SD_disk_ioctl+0x1e>
 8004966:	2304      	movs	r3, #4
 8004968:	e113      	b.n	8004b92 <SD_disk_ioctl+0x246>
	res = RES_ERROR;
 800496a:	2301      	movs	r3, #1
 800496c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if (ctrl == CTRL_POWER)
 8004970:	79bb      	ldrb	r3, [r7, #6]
 8004972:	2b05      	cmp	r3, #5
 8004974:	d124      	bne.n	80049c0 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 8004976:	6a3b      	ldr	r3, [r7, #32]
 8004978:	781b      	ldrb	r3, [r3, #0]
 800497a:	2b02      	cmp	r3, #2
 800497c:	d012      	beq.n	80049a4 <SD_disk_ioctl+0x58>
 800497e:	2b02      	cmp	r3, #2
 8004980:	dc1a      	bgt.n	80049b8 <SD_disk_ioctl+0x6c>
 8004982:	2b00      	cmp	r3, #0
 8004984:	d002      	beq.n	800498c <SD_disk_ioctl+0x40>
 8004986:	2b01      	cmp	r3, #1
 8004988:	d006      	beq.n	8004998 <SD_disk_ioctl+0x4c>
 800498a:	e015      	b.n	80049b8 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 800498c:	f7ff fd0e 	bl	80043ac <SD_PowerOff>
			res = RES_OK;
 8004990:	2300      	movs	r3, #0
 8004992:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8004996:	e0fa      	b.n	8004b8e <SD_disk_ioctl+0x242>
		case 1:
			SD_PowerOn();		/* Power On */
 8004998:	f7ff fcc6 	bl	8004328 <SD_PowerOn>
			res = RES_OK;
 800499c:	2300      	movs	r3, #0
 800499e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 80049a2:	e0f4      	b.n	8004b8e <SD_disk_ioctl+0x242>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 80049a4:	6a3b      	ldr	r3, [r7, #32]
 80049a6:	1c5c      	adds	r4, r3, #1
 80049a8:	f7ff fd0c 	bl	80043c4 <SD_CheckPower>
 80049ac:	4603      	mov	r3, r0
 80049ae:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 80049b0:	2300      	movs	r3, #0
 80049b2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 80049b6:	e0ea      	b.n	8004b8e <SD_disk_ioctl+0x242>
		default:
			res = RES_PARERR;
 80049b8:	2304      	movs	r3, #4
 80049ba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80049be:	e0e6      	b.n	8004b8e <SD_disk_ioctl+0x242>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 80049c0:	4b76      	ldr	r3, [pc, #472]	@ (8004b9c <SD_disk_ioctl+0x250>)
 80049c2:	781b      	ldrb	r3, [r3, #0]
 80049c4:	b2db      	uxtb	r3, r3
 80049c6:	f003 0301 	and.w	r3, r3, #1
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d001      	beq.n	80049d2 <SD_disk_ioctl+0x86>
 80049ce:	2303      	movs	r3, #3
 80049d0:	e0df      	b.n	8004b92 <SD_disk_ioctl+0x246>

		SELECT();
 80049d2:	f7ff fc15 	bl	8004200 <SELECT>

		switch (ctrl)
 80049d6:	79bb      	ldrb	r3, [r7, #6]
 80049d8:	2b0d      	cmp	r3, #13
 80049da:	f200 80c9 	bhi.w	8004b70 <SD_disk_ioctl+0x224>
 80049de:	a201      	add	r2, pc, #4	@ (adr r2, 80049e4 <SD_disk_ioctl+0x98>)
 80049e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049e4:	08004adb 	.word	0x08004adb
 80049e8:	08004a1d 	.word	0x08004a1d
 80049ec:	08004acb 	.word	0x08004acb
 80049f0:	08004b71 	.word	0x08004b71
 80049f4:	08004b71 	.word	0x08004b71
 80049f8:	08004b71 	.word	0x08004b71
 80049fc:	08004b71 	.word	0x08004b71
 8004a00:	08004b71 	.word	0x08004b71
 8004a04:	08004b71 	.word	0x08004b71
 8004a08:	08004b71 	.word	0x08004b71
 8004a0c:	08004b71 	.word	0x08004b71
 8004a10:	08004aed 	.word	0x08004aed
 8004a14:	08004b11 	.word	0x08004b11
 8004a18:	08004b35 	.word	0x08004b35
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8004a1c:	2100      	movs	r1, #0
 8004a1e:	2049      	movs	r0, #73	@ 0x49
 8004a20:	f7ff fd4f 	bl	80044c2 <SD_SendCmd>
 8004a24:	4603      	mov	r3, r0
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	f040 80a6 	bne.w	8004b78 <SD_disk_ioctl+0x22c>
 8004a2c:	f107 030c 	add.w	r3, r7, #12
 8004a30:	2110      	movs	r1, #16
 8004a32:	4618      	mov	r0, r3
 8004a34:	f7ff fcd2 	bl	80043dc <SD_RxDataBlock>
 8004a38:	4603      	mov	r3, r0
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	f000 809c 	beq.w	8004b78 <SD_disk_ioctl+0x22c>
			{
				if ((csd[0] >> 6) == 1)
 8004a40:	7b3b      	ldrb	r3, [r7, #12]
 8004a42:	099b      	lsrs	r3, r3, #6
 8004a44:	b2db      	uxtb	r3, r3
 8004a46:	2b01      	cmp	r3, #1
 8004a48:	d10d      	bne.n	8004a66 <SD_disk_ioctl+0x11a>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8004a4a:	7d7b      	ldrb	r3, [r7, #21]
 8004a4c:	461a      	mov	r2, r3
 8004a4e:	7d3b      	ldrb	r3, [r7, #20]
 8004a50:	021b      	lsls	r3, r3, #8
 8004a52:	b29b      	uxth	r3, r3
 8004a54:	4413      	add	r3, r2
 8004a56:	b29b      	uxth	r3, r3
 8004a58:	3301      	adds	r3, #1
 8004a5a:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8004a5c:	8bfb      	ldrh	r3, [r7, #30]
 8004a5e:	029a      	lsls	r2, r3, #10
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	601a      	str	r2, [r3, #0]
 8004a64:	e02d      	b.n	8004ac2 <SD_disk_ioctl+0x176>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8004a66:	7c7b      	ldrb	r3, [r7, #17]
 8004a68:	f003 030f 	and.w	r3, r3, #15
 8004a6c:	b2da      	uxtb	r2, r3
 8004a6e:	7dbb      	ldrb	r3, [r7, #22]
 8004a70:	09db      	lsrs	r3, r3, #7
 8004a72:	b2db      	uxtb	r3, r3
 8004a74:	4413      	add	r3, r2
 8004a76:	b2da      	uxtb	r2, r3
 8004a78:	7d7b      	ldrb	r3, [r7, #21]
 8004a7a:	005b      	lsls	r3, r3, #1
 8004a7c:	b2db      	uxtb	r3, r3
 8004a7e:	f003 0306 	and.w	r3, r3, #6
 8004a82:	b2db      	uxtb	r3, r3
 8004a84:	4413      	add	r3, r2
 8004a86:	b2db      	uxtb	r3, r3
 8004a88:	3302      	adds	r3, #2
 8004a8a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8004a8e:	7d3b      	ldrb	r3, [r7, #20]
 8004a90:	099b      	lsrs	r3, r3, #6
 8004a92:	b2db      	uxtb	r3, r3
 8004a94:	461a      	mov	r2, r3
 8004a96:	7cfb      	ldrb	r3, [r7, #19]
 8004a98:	009b      	lsls	r3, r3, #2
 8004a9a:	b29b      	uxth	r3, r3
 8004a9c:	4413      	add	r3, r2
 8004a9e:	b29a      	uxth	r2, r3
 8004aa0:	7cbb      	ldrb	r3, [r7, #18]
 8004aa2:	029b      	lsls	r3, r3, #10
 8004aa4:	b29b      	uxth	r3, r3
 8004aa6:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004aaa:	b29b      	uxth	r3, r3
 8004aac:	4413      	add	r3, r2
 8004aae:	b29b      	uxth	r3, r3
 8004ab0:	3301      	adds	r3, #1
 8004ab2:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8004ab4:	8bfa      	ldrh	r2, [r7, #30]
 8004ab6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004aba:	3b09      	subs	r3, #9
 8004abc:	409a      	lsls	r2, r3
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
			break;
 8004ac8:	e056      	b.n	8004b78 <SD_disk_ioctl+0x22c>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004ad0:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8004ad8:	e055      	b.n	8004b86 <SD_disk_ioctl+0x23a>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8004ada:	f7ff fc0b 	bl	80042f4 <SD_ReadyWait>
 8004ade:	4603      	mov	r3, r0
 8004ae0:	2bff      	cmp	r3, #255	@ 0xff
 8004ae2:	d14b      	bne.n	8004b7c <SD_disk_ioctl+0x230>
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8004aea:	e047      	b.n	8004b7c <SD_disk_ioctl+0x230>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8004aec:	2100      	movs	r1, #0
 8004aee:	2049      	movs	r0, #73	@ 0x49
 8004af0:	f7ff fce7 	bl	80044c2 <SD_SendCmd>
 8004af4:	4603      	mov	r3, r0
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d142      	bne.n	8004b80 <SD_disk_ioctl+0x234>
 8004afa:	2110      	movs	r1, #16
 8004afc:	6a38      	ldr	r0, [r7, #32]
 8004afe:	f7ff fc6d 	bl	80043dc <SD_RxDataBlock>
 8004b02:	4603      	mov	r3, r0
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d03b      	beq.n	8004b80 <SD_disk_ioctl+0x234>
 8004b08:	2300      	movs	r3, #0
 8004b0a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8004b0e:	e037      	b.n	8004b80 <SD_disk_ioctl+0x234>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8004b10:	2100      	movs	r1, #0
 8004b12:	204a      	movs	r0, #74	@ 0x4a
 8004b14:	f7ff fcd5 	bl	80044c2 <SD_SendCmd>
 8004b18:	4603      	mov	r3, r0
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d132      	bne.n	8004b84 <SD_disk_ioctl+0x238>
 8004b1e:	2110      	movs	r1, #16
 8004b20:	6a38      	ldr	r0, [r7, #32]
 8004b22:	f7ff fc5b 	bl	80043dc <SD_RxDataBlock>
 8004b26:	4603      	mov	r3, r0
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d02b      	beq.n	8004b84 <SD_disk_ioctl+0x238>
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8004b32:	e027      	b.n	8004b84 <SD_disk_ioctl+0x238>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8004b34:	2100      	movs	r1, #0
 8004b36:	207a      	movs	r0, #122	@ 0x7a
 8004b38:	f7ff fcc3 	bl	80044c2 <SD_SendCmd>
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d116      	bne.n	8004b70 <SD_disk_ioctl+0x224>
			{
				for (n = 0; n < 4; n++)
 8004b42:	2300      	movs	r3, #0
 8004b44:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8004b48:	e00b      	b.n	8004b62 <SD_disk_ioctl+0x216>
				{
					*ptr++ = SPI_RxByte();
 8004b4a:	6a3c      	ldr	r4, [r7, #32]
 8004b4c:	1c63      	adds	r3, r4, #1
 8004b4e:	623b      	str	r3, [r7, #32]
 8004b50:	f7ff fba4 	bl	800429c <SPI_RxByte>
 8004b54:	4603      	mov	r3, r0
 8004b56:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8004b58:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004b5c:	3301      	adds	r3, #1
 8004b5e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8004b62:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004b66:	2b03      	cmp	r3, #3
 8004b68:	d9ef      	bls.n	8004b4a <SD_disk_ioctl+0x1fe>
				}
				res = RES_OK;
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
		default:
			res = RES_PARERR;
 8004b70:	2304      	movs	r3, #4
 8004b72:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8004b76:	e006      	b.n	8004b86 <SD_disk_ioctl+0x23a>
			break;
 8004b78:	bf00      	nop
 8004b7a:	e004      	b.n	8004b86 <SD_disk_ioctl+0x23a>
			break;
 8004b7c:	bf00      	nop
 8004b7e:	e002      	b.n	8004b86 <SD_disk_ioctl+0x23a>
			break;
 8004b80:	bf00      	nop
 8004b82:	e000      	b.n	8004b86 <SD_disk_ioctl+0x23a>
			break;
 8004b84:	bf00      	nop
		}

		DESELECT();
 8004b86:	f7ff fb47 	bl	8004218 <DESELECT>
		SPI_RxByte();
 8004b8a:	f7ff fb87 	bl	800429c <SPI_RxByte>
	}

	return res;
 8004b8e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8004b92:	4618      	mov	r0, r3
 8004b94:	372c      	adds	r7, #44	@ 0x2c
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bd90      	pop	{r4, r7, pc}
 8004b9a:	bf00      	nop
 8004b9c:	24000004 	.word	0x24000004

08004ba0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b08e      	sub	sp, #56	@ 0x38
 8004ba4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ba6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004baa:	2200      	movs	r2, #0
 8004bac:	601a      	str	r2, [r3, #0]
 8004bae:	605a      	str	r2, [r3, #4]
 8004bb0:	609a      	str	r2, [r3, #8]
 8004bb2:	60da      	str	r2, [r3, #12]
 8004bb4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004bb6:	4b8b      	ldr	r3, [pc, #556]	@ (8004de4 <MX_GPIO_Init+0x244>)
 8004bb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004bbc:	4a89      	ldr	r2, [pc, #548]	@ (8004de4 <MX_GPIO_Init+0x244>)
 8004bbe:	f043 0310 	orr.w	r3, r3, #16
 8004bc2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004bc6:	4b87      	ldr	r3, [pc, #540]	@ (8004de4 <MX_GPIO_Init+0x244>)
 8004bc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004bcc:	f003 0310 	and.w	r3, r3, #16
 8004bd0:	623b      	str	r3, [r7, #32]
 8004bd2:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004bd4:	4b83      	ldr	r3, [pc, #524]	@ (8004de4 <MX_GPIO_Init+0x244>)
 8004bd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004bda:	4a82      	ldr	r2, [pc, #520]	@ (8004de4 <MX_GPIO_Init+0x244>)
 8004bdc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004be0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004be4:	4b7f      	ldr	r3, [pc, #508]	@ (8004de4 <MX_GPIO_Init+0x244>)
 8004be6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004bea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004bee:	61fb      	str	r3, [r7, #28]
 8004bf0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004bf2:	4b7c      	ldr	r3, [pc, #496]	@ (8004de4 <MX_GPIO_Init+0x244>)
 8004bf4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004bf8:	4a7a      	ldr	r2, [pc, #488]	@ (8004de4 <MX_GPIO_Init+0x244>)
 8004bfa:	f043 0301 	orr.w	r3, r3, #1
 8004bfe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004c02:	4b78      	ldr	r3, [pc, #480]	@ (8004de4 <MX_GPIO_Init+0x244>)
 8004c04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004c08:	f003 0301 	and.w	r3, r3, #1
 8004c0c:	61bb      	str	r3, [r7, #24]
 8004c0e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004c10:	4b74      	ldr	r3, [pc, #464]	@ (8004de4 <MX_GPIO_Init+0x244>)
 8004c12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004c16:	4a73      	ldr	r2, [pc, #460]	@ (8004de4 <MX_GPIO_Init+0x244>)
 8004c18:	f043 0320 	orr.w	r3, r3, #32
 8004c1c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004c20:	4b70      	ldr	r3, [pc, #448]	@ (8004de4 <MX_GPIO_Init+0x244>)
 8004c22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004c26:	f003 0320 	and.w	r3, r3, #32
 8004c2a:	617b      	str	r3, [r7, #20]
 8004c2c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c2e:	4b6d      	ldr	r3, [pc, #436]	@ (8004de4 <MX_GPIO_Init+0x244>)
 8004c30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004c34:	4a6b      	ldr	r2, [pc, #428]	@ (8004de4 <MX_GPIO_Init+0x244>)
 8004c36:	f043 0302 	orr.w	r3, r3, #2
 8004c3a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004c3e:	4b69      	ldr	r3, [pc, #420]	@ (8004de4 <MX_GPIO_Init+0x244>)
 8004c40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004c44:	f003 0302 	and.w	r3, r3, #2
 8004c48:	613b      	str	r3, [r7, #16]
 8004c4a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004c4c:	4b65      	ldr	r3, [pc, #404]	@ (8004de4 <MX_GPIO_Init+0x244>)
 8004c4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004c52:	4a64      	ldr	r2, [pc, #400]	@ (8004de4 <MX_GPIO_Init+0x244>)
 8004c54:	f043 0308 	orr.w	r3, r3, #8
 8004c58:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004c5c:	4b61      	ldr	r3, [pc, #388]	@ (8004de4 <MX_GPIO_Init+0x244>)
 8004c5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004c62:	f003 0308 	and.w	r3, r3, #8
 8004c66:	60fb      	str	r3, [r7, #12]
 8004c68:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8004c6a:	4b5e      	ldr	r3, [pc, #376]	@ (8004de4 <MX_GPIO_Init+0x244>)
 8004c6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004c70:	4a5c      	ldr	r2, [pc, #368]	@ (8004de4 <MX_GPIO_Init+0x244>)
 8004c72:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004c76:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004c7a:	4b5a      	ldr	r3, [pc, #360]	@ (8004de4 <MX_GPIO_Init+0x244>)
 8004c7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004c80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c84:	60bb      	str	r3, [r7, #8]
 8004c86:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004c88:	4b56      	ldr	r3, [pc, #344]	@ (8004de4 <MX_GPIO_Init+0x244>)
 8004c8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004c8e:	4a55      	ldr	r2, [pc, #340]	@ (8004de4 <MX_GPIO_Init+0x244>)
 8004c90:	f043 0304 	orr.w	r3, r3, #4
 8004c94:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004c98:	4b52      	ldr	r3, [pc, #328]	@ (8004de4 <MX_GPIO_Init+0x244>)
 8004c9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004c9e:	f003 0304 	and.w	r3, r3, #4
 8004ca2:	607b      	str	r3, [r7, #4]
 8004ca4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED_6_Pin|LED_G_Pin, GPIO_PIN_RESET);
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	f248 0108 	movw	r1, #32776	@ 0x8008
 8004cac:	484e      	ldr	r0, [pc, #312]	@ (8004de8 <MX_GPIO_Init+0x248>)
 8004cae:	f009 fda1 	bl	800e7f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_Y_Pin|LED_R_Pin|NRF24_CE_Pin|NRF24_CSN_Pin, GPIO_PIN_RESET);
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	f44f 614c 	mov.w	r1, #3264	@ 0xcc0
 8004cb8:	484c      	ldr	r0, [pc, #304]	@ (8004dec <MX_GPIO_Init+0x24c>)
 8004cba:	f009 fd9b 	bl	800e7f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, uSD_LED_Pin|uSD_SC_Pin, GPIO_PIN_RESET);
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	f44f 4108 	mov.w	r1, #34816	@ 0x8800
 8004cc4:	484a      	ldr	r0, [pc, #296]	@ (8004df0 <MX_GPIO_Init+0x250>)
 8004cc6:	f009 fd95 	bl	800e7f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESC_Power_GPIO_Port, ESC_Power_Pin, GPIO_PIN_RESET);
 8004cca:	2200      	movs	r2, #0
 8004ccc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004cd0:	4848      	ldr	r0, [pc, #288]	@ (8004df4 <MX_GPIO_Init+0x254>)
 8004cd2:	f009 fd8f 	bl	800e7f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_7_Pin|LED_5_Pin, GPIO_PIN_RESET);
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	f44f 4101 	mov.w	r1, #33024	@ 0x8100
 8004cdc:	4846      	ldr	r0, [pc, #280]	@ (8004df8 <MX_GPIO_Init+0x258>)
 8004cde:	f009 fd89 	bl	800e7f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_6_Pin LED_G_Pin */
  GPIO_InitStruct.Pin = LED_6_Pin|LED_G_Pin;
 8004ce2:	f248 0308 	movw	r3, #32776	@ 0x8008
 8004ce6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004ce8:	2301      	movs	r3, #1
 8004cea:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cec:	2300      	movs	r3, #0
 8004cee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004cf4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004cf8:	4619      	mov	r1, r3
 8004cfa:	483b      	ldr	r0, [pc, #236]	@ (8004de8 <MX_GPIO_Init+0x248>)
 8004cfc:	f009 fbba 	bl	800e474 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_Y_Pin LED_R_Pin NRF24_CE_Pin NRF24_CSN_Pin */
  GPIO_InitStruct.Pin = LED_Y_Pin|LED_R_Pin|NRF24_CE_Pin|NRF24_CSN_Pin;
 8004d00:	f44f 634c 	mov.w	r3, #3264	@ 0xcc0
 8004d04:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004d06:	2301      	movs	r3, #1
 8004d08:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d0e:	2300      	movs	r3, #0
 8004d10:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004d12:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004d16:	4619      	mov	r1, r3
 8004d18:	4834      	ldr	r0, [pc, #208]	@ (8004dec <MX_GPIO_Init+0x24c>)
 8004d1a:	f009 fbab 	bl	800e474 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detection_Pin */
  GPIO_InitStruct.Pin = uSD_Detection_Pin;
 8004d1e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004d22:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004d24:	2300      	movs	r3, #0
 8004d26:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d28:	2300      	movs	r3, #0
 8004d2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(uSD_Detection_GPIO_Port, &GPIO_InitStruct);
 8004d2c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004d30:	4619      	mov	r1, r3
 8004d32:	482e      	ldr	r0, [pc, #184]	@ (8004dec <MX_GPIO_Init+0x24c>)
 8004d34:	f009 fb9e 	bl	800e474 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_LED_Pin */
  GPIO_InitStruct.Pin = uSD_LED_Pin;
 8004d38:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004d3c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004d3e:	2301      	movs	r3, #1
 8004d40:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d42:	2300      	movs	r3, #0
 8004d44:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d46:	2300      	movs	r3, #0
 8004d48:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(uSD_LED_GPIO_Port, &GPIO_InitStruct);
 8004d4a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004d4e:	4619      	mov	r1, r3
 8004d50:	4827      	ldr	r0, [pc, #156]	@ (8004df0 <MX_GPIO_Init+0x250>)
 8004d52:	f009 fb8f 	bl	800e474 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_SC_Pin */
  GPIO_InitStruct.Pin = uSD_SC_Pin;
 8004d56:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004d5a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d60:	2300      	movs	r3, #0
 8004d62:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8004d64:	2301      	movs	r3, #1
 8004d66:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(uSD_SC_GPIO_Port, &GPIO_InitStruct);
 8004d68:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004d6c:	4619      	mov	r1, r3
 8004d6e:	4820      	ldr	r0, [pc, #128]	@ (8004df0 <MX_GPIO_Init+0x250>)
 8004d70:	f009 fb80 	bl	800e474 <HAL_GPIO_Init>

  /*Configure GPIO pin : ESC_Power_Pin */
  GPIO_InitStruct.Pin = ESC_Power_Pin;
 8004d74:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004d78:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d7e:	2300      	movs	r3, #0
 8004d80:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d82:	2300      	movs	r3, #0
 8004d84:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(ESC_Power_GPIO_Port, &GPIO_InitStruct);
 8004d86:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004d8a:	4619      	mov	r1, r3
 8004d8c:	4819      	ldr	r0, [pc, #100]	@ (8004df4 <MX_GPIO_Init+0x254>)
 8004d8e:	f009 fb71 	bl	800e474 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_7_Pin LED_5_Pin */
  GPIO_InitStruct.Pin = LED_7_Pin|LED_5_Pin;
 8004d92:	f44f 4301 	mov.w	r3, #33024	@ 0x8100
 8004d96:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004d98:	2301      	movs	r3, #1
 8004d9a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004da0:	2300      	movs	r3, #0
 8004da2:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004da4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004da8:	4619      	mov	r1, r3
 8004daa:	4813      	ldr	r0, [pc, #76]	@ (8004df8 <MX_GPIO_Init+0x258>)
 8004dac:	f009 fb62 	bl	800e474 <HAL_GPIO_Init>

  /*Configure GPIO pin : NRF24_IRQ_Pin */
  GPIO_InitStruct.Pin = NRF24_IRQ_Pin;
 8004db0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004db4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004db6:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8004dba:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(NRF24_IRQ_GPIO_Port, &GPIO_InitStruct);
 8004dc0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004dc4:	4619      	mov	r1, r3
 8004dc6:	480b      	ldr	r0, [pc, #44]	@ (8004df4 <MX_GPIO_Init+0x254>)
 8004dc8:	f009 fb54 	bl	800e474 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8004dcc:	2200      	movs	r2, #0
 8004dce:	2100      	movs	r1, #0
 8004dd0:	2028      	movs	r0, #40	@ 0x28
 8004dd2:	f006 fc50 	bl	800b676 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004dd6:	2028      	movs	r0, #40	@ 0x28
 8004dd8:	f006 fc67 	bl	800b6aa <HAL_NVIC_EnableIRQ>

}
 8004ddc:	bf00      	nop
 8004dde:	3738      	adds	r7, #56	@ 0x38
 8004de0:	46bd      	mov	sp, r7
 8004de2:	bd80      	pop	{r7, pc}
 8004de4:	58024400 	.word	0x58024400
 8004de8:	58021000 	.word	0x58021000
 8004dec:	58020400 	.word	0x58020400
 8004df0:	58020c00 	.word	0x58020c00
 8004df4:	58021800 	.word	0x58021800
 8004df8:	58020000 	.word	0x58020000

08004dfc <MX_I2C5_Init>:

I2C_HandleTypeDef hi2c5;

/* I2C5 init function */
void MX_I2C5_Init(void)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C5_Init 0 */

  /* USER CODE BEGIN I2C5_Init 1 */

  /* USER CODE END I2C5_Init 1 */
  hi2c5.Instance = I2C5;
 8004e00:	4b1d      	ldr	r3, [pc, #116]	@ (8004e78 <MX_I2C5_Init+0x7c>)
 8004e02:	4a1e      	ldr	r2, [pc, #120]	@ (8004e7c <MX_I2C5_Init+0x80>)
 8004e04:	601a      	str	r2, [r3, #0]
  hi2c5.Init.Timing = 0x00000000;
 8004e06:	4b1c      	ldr	r3, [pc, #112]	@ (8004e78 <MX_I2C5_Init+0x7c>)
 8004e08:	2200      	movs	r2, #0
 8004e0a:	605a      	str	r2, [r3, #4]
  hi2c5.Init.OwnAddress1 = 0;
 8004e0c:	4b1a      	ldr	r3, [pc, #104]	@ (8004e78 <MX_I2C5_Init+0x7c>)
 8004e0e:	2200      	movs	r2, #0
 8004e10:	609a      	str	r2, [r3, #8]
  hi2c5.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004e12:	4b19      	ldr	r3, [pc, #100]	@ (8004e78 <MX_I2C5_Init+0x7c>)
 8004e14:	2201      	movs	r2, #1
 8004e16:	60da      	str	r2, [r3, #12]
  hi2c5.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004e18:	4b17      	ldr	r3, [pc, #92]	@ (8004e78 <MX_I2C5_Init+0x7c>)
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	611a      	str	r2, [r3, #16]
  hi2c5.Init.OwnAddress2 = 0;
 8004e1e:	4b16      	ldr	r3, [pc, #88]	@ (8004e78 <MX_I2C5_Init+0x7c>)
 8004e20:	2200      	movs	r2, #0
 8004e22:	615a      	str	r2, [r3, #20]
  hi2c5.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004e24:	4b14      	ldr	r3, [pc, #80]	@ (8004e78 <MX_I2C5_Init+0x7c>)
 8004e26:	2200      	movs	r2, #0
 8004e28:	619a      	str	r2, [r3, #24]
  hi2c5.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004e2a:	4b13      	ldr	r3, [pc, #76]	@ (8004e78 <MX_I2C5_Init+0x7c>)
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	61da      	str	r2, [r3, #28]
  hi2c5.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004e30:	4b11      	ldr	r3, [pc, #68]	@ (8004e78 <MX_I2C5_Init+0x7c>)
 8004e32:	2200      	movs	r2, #0
 8004e34:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c5) != HAL_OK)
 8004e36:	4810      	ldr	r0, [pc, #64]	@ (8004e78 <MX_I2C5_Init+0x7c>)
 8004e38:	f009 fd10 	bl	800e85c <HAL_I2C_Init>
 8004e3c:	4603      	mov	r3, r0
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d001      	beq.n	8004e46 <MX_I2C5_Init+0x4a>
  {
    Error_Handler();
 8004e42:	f003 f831 	bl	8007ea8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c5, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004e46:	2100      	movs	r1, #0
 8004e48:	480b      	ldr	r0, [pc, #44]	@ (8004e78 <MX_I2C5_Init+0x7c>)
 8004e4a:	f00c f8c9 	bl	8010fe0 <HAL_I2CEx_ConfigAnalogFilter>
 8004e4e:	4603      	mov	r3, r0
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d001      	beq.n	8004e58 <MX_I2C5_Init+0x5c>
  {
    Error_Handler();
 8004e54:	f003 f828 	bl	8007ea8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c5, 0) != HAL_OK)
 8004e58:	2100      	movs	r1, #0
 8004e5a:	4807      	ldr	r0, [pc, #28]	@ (8004e78 <MX_I2C5_Init+0x7c>)
 8004e5c:	f00c f90b 	bl	8011076 <HAL_I2CEx_ConfigDigitalFilter>
 8004e60:	4603      	mov	r3, r0
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d001      	beq.n	8004e6a <MX_I2C5_Init+0x6e>
  {
    Error_Handler();
 8004e66:	f003 f81f 	bl	8007ea8 <Error_Handler>
  }

  /** I2C Enable Fast Mode Plus
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C5);
 8004e6a:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8004e6e:	f00c f94f 	bl	8011110 <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C5_Init 2 */

  /* USER CODE END I2C5_Init 2 */

}
 8004e72:	bf00      	nop
 8004e74:	bd80      	pop	{r7, pc}
 8004e76:	bf00      	nop
 8004e78:	2400019c 	.word	0x2400019c
 8004e7c:	40006400 	.word	0x40006400

08004e80 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b0b8      	sub	sp, #224	@ 0xe0
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e88:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	601a      	str	r2, [r3, #0]
 8004e90:	605a      	str	r2, [r3, #4]
 8004e92:	609a      	str	r2, [r3, #8]
 8004e94:	60da      	str	r2, [r3, #12]
 8004e96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004e98:	f107 0310 	add.w	r3, r7, #16
 8004e9c:	22b8      	movs	r2, #184	@ 0xb8
 8004e9e:	2100      	movs	r1, #0
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	f019 f937 	bl	801e114 <memset>
  if(i2cHandle->Instance==I2C5)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4a2b      	ldr	r2, [pc, #172]	@ (8004f58 <HAL_I2C_MspInit+0xd8>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d14f      	bne.n	8004f50 <HAL_I2C_MspInit+0xd0>

  /* USER CODE END I2C5_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C5;
 8004eb0:	f04f 0208 	mov.w	r2, #8
 8004eb4:	f04f 0300 	mov.w	r3, #0
 8004eb8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_CSI;
 8004ebc:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8004ec0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004ec4:	f107 0310 	add.w	r3, r7, #16
 8004ec8:	4618      	mov	r0, r3
 8004eca:	f00d f8e5 	bl	8012098 <HAL_RCCEx_PeriphCLKConfig>
 8004ece:	4603      	mov	r3, r0
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d001      	beq.n	8004ed8 <HAL_I2C_MspInit+0x58>
    {
      Error_Handler();
 8004ed4:	f002 ffe8 	bl	8007ea8 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004ed8:	4b20      	ldr	r3, [pc, #128]	@ (8004f5c <HAL_I2C_MspInit+0xdc>)
 8004eda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004ede:	4a1f      	ldr	r2, [pc, #124]	@ (8004f5c <HAL_I2C_MspInit+0xdc>)
 8004ee0:	f043 0304 	orr.w	r3, r3, #4
 8004ee4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004ee8:	4b1c      	ldr	r3, [pc, #112]	@ (8004f5c <HAL_I2C_MspInit+0xdc>)
 8004eea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004eee:	f003 0304 	and.w	r3, r3, #4
 8004ef2:	60fb      	str	r3, [r7, #12]
 8004ef4:	68fb      	ldr	r3, [r7, #12]
    /**I2C5 GPIO Configuration
    PC10     ------> I2C5_SDA
    PC11     ------> I2C5_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8004ef6:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8004efa:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004efe:	2312      	movs	r3, #18
 8004f00:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004f04:	2301      	movs	r3, #1
 8004f06:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C5;
 8004f10:	2304      	movs	r3, #4
 8004f12:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004f16:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8004f1a:	4619      	mov	r1, r3
 8004f1c:	4810      	ldr	r0, [pc, #64]	@ (8004f60 <HAL_I2C_MspInit+0xe0>)
 8004f1e:	f009 faa9 	bl	800e474 <HAL_GPIO_Init>

    /* I2C5 clock enable */
    __HAL_RCC_I2C5_CLK_ENABLE();
 8004f22:	4b0e      	ldr	r3, [pc, #56]	@ (8004f5c <HAL_I2C_MspInit+0xdc>)
 8004f24:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004f28:	4a0c      	ldr	r2, [pc, #48]	@ (8004f5c <HAL_I2C_MspInit+0xdc>)
 8004f2a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004f2e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8004f32:	4b0a      	ldr	r3, [pc, #40]	@ (8004f5c <HAL_I2C_MspInit+0xdc>)
 8004f34:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004f38:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f3c:	60bb      	str	r3, [r7, #8]
 8004f3e:	68bb      	ldr	r3, [r7, #8]

    /* I2C5 interrupt Init */
    HAL_NVIC_SetPriority(I2C5_EV_IRQn, 1, 0);
 8004f40:	2200      	movs	r2, #0
 8004f42:	2101      	movs	r1, #1
 8004f44:	209d      	movs	r0, #157	@ 0x9d
 8004f46:	f006 fb96 	bl	800b676 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C5_EV_IRQn);
 8004f4a:	209d      	movs	r0, #157	@ 0x9d
 8004f4c:	f006 fbad 	bl	800b6aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C5_MspInit 1 */

  /* USER CODE END I2C5_MspInit 1 */
  }
}
 8004f50:	bf00      	nop
 8004f52:	37e0      	adds	r7, #224	@ 0xe0
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bd80      	pop	{r7, pc}
 8004f58:	40006400 	.word	0x40006400
 8004f5c:	58024400 	.word	0x58024400
 8004f60:	58020800 	.word	0x58020800

08004f64 <__NVIC_SystemReset>:
{
 8004f64:	b480      	push	{r7}
 8004f66:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8004f68:	f3bf 8f4f 	dsb	sy
}
 8004f6c:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8004f6e:	4b06      	ldr	r3, [pc, #24]	@ (8004f88 <__NVIC_SystemReset+0x24>)
 8004f70:	68db      	ldr	r3, [r3, #12]
 8004f72:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8004f76:	4904      	ldr	r1, [pc, #16]	@ (8004f88 <__NVIC_SystemReset+0x24>)
 8004f78:	4b04      	ldr	r3, [pc, #16]	@ (8004f8c <__NVIC_SystemReset+0x28>)
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8004f7e:	f3bf 8f4f 	dsb	sy
}
 8004f82:	bf00      	nop
    __NOP();
 8004f84:	bf00      	nop
 8004f86:	e7fd      	b.n	8004f84 <__NVIC_SystemReset+0x20>
 8004f88:	e000ed00 	.word	0xe000ed00
 8004f8c:	05fa0004 	.word	0x05fa0004

08004f90 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b08a      	sub	sp, #40	@ 0x28
 8004f94:	af02      	add	r7, sp, #8

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/

	MPU_Config();
 8004f96:	f002 ff5b 	bl	8007e50 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004f9a:	f004 fa5d 	bl	8009458 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004f9e:	f000 ffc7 	bl	8005f30 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8004fa2:	f001 f837 	bl	8006014 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004fa6:	f7ff fdfb 	bl	8004ba0 <MX_GPIO_Init>
  MX_DMA_Init();
 8004faa:	f7fe fbdf 	bl	800376c <MX_DMA_Init>
  MX_I2C5_Init();
 8004fae:	f7ff ff25 	bl	8004dfc <MX_I2C5_Init>
  MX_SPI6_Init();
 8004fb2:	f002 ffd5 	bl	8007f60 <MX_SPI6_Init>
  MX_ADC2_Init();
 8004fb6:	f7fe faeb 	bl	8003590 <MX_ADC2_Init>
  MX_SPI2_Init();
 8004fba:	f002 ff7b 	bl	8007eb4 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8004fbe:	f004 f963 	bl	8009288 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8004fc2:	f003 fe81 	bl	8008cc8 <MX_TIM1_Init>
  MX_TIM8_Init();
 8004fc6:	f003 fff7 	bl	8008fb8 <MX_TIM8_Init>
  MX_TIM3_Init();
 8004fca:	f003 ff79 	bl	8008ec0 <MX_TIM3_Init>
  MX_FATFS_Init();
 8004fce:	f015 feed 	bl	801adac <MX_FATFS_Init>
  MX_TIM2_Init();
 8004fd2:	f003 ff21 	bl	8008e18 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  	  ESC_POWER_1;
 8004fd6:	2201      	movs	r2, #1
 8004fd8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004fdc:	489c      	ldr	r0, [pc, #624]	@ (8005250 <main+0x2c0>)
 8004fde:	f009 fc09 	bl	800e7f4 <HAL_GPIO_WritePin>

  	  STARTUP = 1;
 8004fe2:	4b9c      	ldr	r3, [pc, #624]	@ (8005254 <main+0x2c4>)
 8004fe4:	2201      	movs	r2, #1
 8004fe6:	701a      	strb	r2, [r3, #0]

  	DRON_ON_GRUND = 1;
 8004fe8:	4b9b      	ldr	r3, [pc, #620]	@ (8005258 <main+0x2c8>)
 8004fea:	2201      	movs	r2, #1
 8004fec:	701a      	strb	r2, [r3, #0]

  	PID_FAC_Pitch[0] = p_pitchfactor;
 8004fee:	4b9b      	ldr	r3, [pc, #620]	@ (800525c <main+0x2cc>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4a9b      	ldr	r2, [pc, #620]	@ (8005260 <main+0x2d0>)
 8004ff4:	6013      	str	r3, [r2, #0]
  	PID_FAC_Pitch[1] = i_pitchfactor;
 8004ff6:	4b9b      	ldr	r3, [pc, #620]	@ (8005264 <main+0x2d4>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4a99      	ldr	r2, [pc, #612]	@ (8005260 <main+0x2d0>)
 8004ffc:	6053      	str	r3, [r2, #4]
  	PID_FAC_Pitch[2] = d_pitchfactor;
 8004ffe:	4b9a      	ldr	r3, [pc, #616]	@ (8005268 <main+0x2d8>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4a97      	ldr	r2, [pc, #604]	@ (8005260 <main+0x2d0>)
 8005004:	6093      	str	r3, [r2, #8]
  	PID_FAC_Pitch[4] = 0;
 8005006:	4b96      	ldr	r3, [pc, #600]	@ (8005260 <main+0x2d0>)
 8005008:	f04f 0200 	mov.w	r2, #0
 800500c:	611a      	str	r2, [r3, #16]

  	PID_FAC_Rool[0] = p_roolfactor;
 800500e:	4b97      	ldr	r3, [pc, #604]	@ (800526c <main+0x2dc>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4a97      	ldr	r2, [pc, #604]	@ (8005270 <main+0x2e0>)
 8005014:	6013      	str	r3, [r2, #0]
  	PID_FAC_Rool[1] = i_roolfactor;
 8005016:	4b97      	ldr	r3, [pc, #604]	@ (8005274 <main+0x2e4>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4a95      	ldr	r2, [pc, #596]	@ (8005270 <main+0x2e0>)
 800501c:	6053      	str	r3, [r2, #4]
  	PID_FAC_Rool[2] = d_roolfactor;
 800501e:	4b96      	ldr	r3, [pc, #600]	@ (8005278 <main+0x2e8>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	4a93      	ldr	r2, [pc, #588]	@ (8005270 <main+0x2e0>)
 8005024:	6093      	str	r3, [r2, #8]
  	PID_FAC_Rool[4] = 0;
 8005026:	4b92      	ldr	r3, [pc, #584]	@ (8005270 <main+0x2e0>)
 8005028:	f04f 0200 	mov.w	r2, #0
 800502c:	611a      	str	r2, [r3, #16]

  	PID_FAC_Yaw[0] = p_yawfactor;
 800502e:	4b93      	ldr	r3, [pc, #588]	@ (800527c <main+0x2ec>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4a93      	ldr	r2, [pc, #588]	@ (8005280 <main+0x2f0>)
 8005034:	6013      	str	r3, [r2, #0]
  	PID_FAC_Yaw[1] = i_yawfactor;
 8005036:	4b93      	ldr	r3, [pc, #588]	@ (8005284 <main+0x2f4>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4a91      	ldr	r2, [pc, #580]	@ (8005280 <main+0x2f0>)
 800503c:	6053      	str	r3, [r2, #4]
  	PID_FAC_Yaw[2] = d_yawfactor;
 800503e:	4b92      	ldr	r3, [pc, #584]	@ (8005288 <main+0x2f8>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4a8f      	ldr	r2, [pc, #572]	@ (8005280 <main+0x2f0>)
 8005044:	6093      	str	r3, [r2, #8]
  	PID_FAC_Yaw[4] = 0;
 8005046:	4b8e      	ldr	r3, [pc, #568]	@ (8005280 <main+0x2f0>)
 8005048:	f04f 0200 	mov.w	r2, #0
 800504c:	611a      	str	r2, [r3, #16]


  	ax_ang =0,ay_ang = 0,az_ang = 0, gx_ang = 0, gy_ang = 0, gz_ang = 0;
 800504e:	4b8f      	ldr	r3, [pc, #572]	@ (800528c <main+0x2fc>)
 8005050:	f04f 0200 	mov.w	r2, #0
 8005054:	601a      	str	r2, [r3, #0]
 8005056:	4b8e      	ldr	r3, [pc, #568]	@ (8005290 <main+0x300>)
 8005058:	f04f 0200 	mov.w	r2, #0
 800505c:	601a      	str	r2, [r3, #0]
 800505e:	4b8d      	ldr	r3, [pc, #564]	@ (8005294 <main+0x304>)
 8005060:	f04f 0200 	mov.w	r2, #0
 8005064:	601a      	str	r2, [r3, #0]
 8005066:	4b8c      	ldr	r3, [pc, #560]	@ (8005298 <main+0x308>)
 8005068:	f04f 0200 	mov.w	r2, #0
 800506c:	601a      	str	r2, [r3, #0]
 800506e:	4b8b      	ldr	r3, [pc, #556]	@ (800529c <main+0x30c>)
 8005070:	f04f 0200 	mov.w	r2, #0
 8005074:	601a      	str	r2, [r3, #0]
 8005076:	4b8a      	ldr	r3, [pc, #552]	@ (80052a0 <main+0x310>)
 8005078:	f04f 0200 	mov.w	r2, #0
 800507c:	601a      	str	r2, [r3, #0]
  	Mag_Z = 0;
 800507e:	4b89      	ldr	r3, [pc, #548]	@ (80052a4 <main+0x314>)
 8005080:	f04f 0200 	mov.w	r2, #0
 8005084:	601a      	str	r2, [r3, #0]
  	TIM_inte_SD = 0, TIM_inte = 0;
 8005086:	4b88      	ldr	r3, [pc, #544]	@ (80052a8 <main+0x318>)
 8005088:	2200      	movs	r2, #0
 800508a:	601a      	str	r2, [r3, #0]
 800508c:	4b87      	ldr	r3, [pc, #540]	@ (80052ac <main+0x31c>)
 800508e:	2200      	movs	r2, #0
 8005090:	601a      	str	r2, [r3, #0]
  	NRF_TIM_Inte = 0;
 8005092:	4b87      	ldr	r3, [pc, #540]	@ (80052b0 <main+0x320>)
 8005094:	2200      	movs	r2, #0
 8005096:	601a      	str	r2, [r3, #0]
  	temp = 0, pres = 0, startpres = 0, ampritude = 0;
 8005098:	4b86      	ldr	r3, [pc, #536]	@ (80052b4 <main+0x324>)
 800509a:	f04f 0200 	mov.w	r2, #0
 800509e:	601a      	str	r2, [r3, #0]
 80050a0:	4b85      	ldr	r3, [pc, #532]	@ (80052b8 <main+0x328>)
 80050a2:	f04f 0200 	mov.w	r2, #0
 80050a6:	601a      	str	r2, [r3, #0]
 80050a8:	4b84      	ldr	r3, [pc, #528]	@ (80052bc <main+0x32c>)
 80050aa:	f04f 0200 	mov.w	r2, #0
 80050ae:	601a      	str	r2, [r3, #0]
 80050b0:	4b83      	ldr	r3, [pc, #524]	@ (80052c0 <main+0x330>)
 80050b2:	f04f 0200 	mov.w	r2, #0
 80050b6:	601a      	str	r2, [r3, #0]
  	last_wanted_pitch_rx = 0;
 80050b8:	4b82      	ldr	r3, [pc, #520]	@ (80052c4 <main+0x334>)
 80050ba:	f04f 0200 	mov.w	r2, #0
 80050be:	601a      	str	r2, [r3, #0]
  	last_wanted_rool_rx = 0;
 80050c0:	4b81      	ldr	r3, [pc, #516]	@ (80052c8 <main+0x338>)
 80050c2:	f04f 0200 	mov.w	r2, #0
 80050c6:	601a      	str	r2, [r3, #0]
  	last_wanted_yaw_rx = 0;
 80050c8:	4b80      	ldr	r3, [pc, #512]	@ (80052cc <main+0x33c>)
 80050ca:	f04f 0200 	mov.w	r2, #0
 80050ce:	601a      	str	r2, [r3, #0]
  	wanted_thrust = 0;
 80050d0:	4b7f      	ldr	r3, [pc, #508]	@ (80052d0 <main+0x340>)
 80050d2:	2200      	movs	r2, #0
 80050d4:	801a      	strh	r2, [r3, #0]
  	thrust_limit = 10000;
 80050d6:	4b7f      	ldr	r3, [pc, #508]	@ (80052d4 <main+0x344>)
 80050d8:	f242 7210 	movw	r2, #10000	@ 0x2710
 80050dc:	801a      	strh	r2, [r3, #0]


  	FDP_D_Gain_AR = 0;
 80050de:	4b7e      	ldr	r3, [pc, #504]	@ (80052d8 <main+0x348>)
 80050e0:	2200      	movs	r2, #0
 80050e2:	801a      	strh	r2, [r3, #0]
  	FDP_D_Gain = 0;
 80050e4:	4b7d      	ldr	r3, [pc, #500]	@ (80052dc <main+0x34c>)
 80050e6:	2200      	movs	r2, #0
 80050e8:	801a      	strh	r2, [r3, #0]


  	old_error_pitch = 0;// ruznica
 80050ea:	4b7d      	ldr	r3, [pc, #500]	@ (80052e0 <main+0x350>)
 80050ec:	f04f 0200 	mov.w	r2, #0
 80050f0:	601a      	str	r2, [r3, #0]
  	old_error_rool = 0;
 80050f2:	4b7c      	ldr	r3, [pc, #496]	@ (80052e4 <main+0x354>)
 80050f4:	f04f 0200 	mov.w	r2, #0
 80050f8:	601a      	str	r2, [r3, #0]
  	old_error_yaw = 0;
 80050fa:	4b7b      	ldr	r3, [pc, #492]	@ (80052e8 <main+0x358>)
 80050fc:	f04f 0200 	mov.w	r2, #0
 8005100:	601a      	str	r2, [r3, #0]
  	old_error_angular_rate_pitch = 0;// ruznica
 8005102:	4b7a      	ldr	r3, [pc, #488]	@ (80052ec <main+0x35c>)
 8005104:	f04f 0200 	mov.w	r2, #0
 8005108:	601a      	str	r2, [r3, #0]
  	old_error_angular_rate_rool = 0;
 800510a:	4b79      	ldr	r3, [pc, #484]	@ (80052f0 <main+0x360>)
 800510c:	f04f 0200 	mov.w	r2, #0
 8005110:	601a      	str	r2, [r3, #0]
  	old_error_angular_rate_yaw = 0;
 8005112:	4b78      	ldr	r3, [pc, #480]	@ (80052f4 <main+0x364>)
 8005114:	f04f 0200 	mov.w	r2, #0
 8005118:	601a      	str	r2, [r3, #0]
  	error_sum_pitch = 0;
 800511a:	4b77      	ldr	r3, [pc, #476]	@ (80052f8 <main+0x368>)
 800511c:	2200      	movs	r2, #0
 800511e:	601a      	str	r2, [r3, #0]
  	error_sum_rool = 0;
 8005120:	4b76      	ldr	r3, [pc, #472]	@ (80052fc <main+0x36c>)
 8005122:	2200      	movs	r2, #0
 8005124:	601a      	str	r2, [r3, #0]
  	error_sum_yaw = 0;
 8005126:	4b76      	ldr	r3, [pc, #472]	@ (8005300 <main+0x370>)
 8005128:	2200      	movs	r2, #0
 800512a:	601a      	str	r2, [r3, #0]
  	error_sum_angular_rate_pitch = 0;
 800512c:	4b75      	ldr	r3, [pc, #468]	@ (8005304 <main+0x374>)
 800512e:	2200      	movs	r2, #0
 8005130:	601a      	str	r2, [r3, #0]
  	error_sum_angular_rate_rool = 0;
 8005132:	4b75      	ldr	r3, [pc, #468]	@ (8005308 <main+0x378>)
 8005134:	2200      	movs	r2, #0
 8005136:	601a      	str	r2, [r3, #0]
  	error_sum_angular_rate_yaw = 0;
 8005138:	4b74      	ldr	r3, [pc, #464]	@ (800530c <main+0x37c>)
 800513a:	2200      	movs	r2, #0
 800513c:	601a      	str	r2, [r3, #0]
  	SPEED1 = min_speed;
 800513e:	4b74      	ldr	r3, [pc, #464]	@ (8005310 <main+0x380>)
 8005140:	f642 1204 	movw	r2, #10500	@ 0x2904
 8005144:	801a      	strh	r2, [r3, #0]
  	SPEED2 = min_speed;
 8005146:	4b73      	ldr	r3, [pc, #460]	@ (8005314 <main+0x384>)
 8005148:	f642 1204 	movw	r2, #10500	@ 0x2904
 800514c:	801a      	strh	r2, [r3, #0]
  	SPEED3 = min_speed;
 800514e:	4b72      	ldr	r3, [pc, #456]	@ (8005318 <main+0x388>)
 8005150:	f642 1204 	movw	r2, #10500	@ 0x2904
 8005154:	801a      	strh	r2, [r3, #0]
  	SPEED4 = min_speed;
 8005156:	4b71      	ldr	r3, [pc, #452]	@ (800531c <main+0x38c>)
 8005158:	f642 1204 	movw	r2, #10500	@ 0x2904
 800515c:	801a      	strh	r2, [r3, #0]
  	OLD_SPEED1 = min_speed;
 800515e:	4b70      	ldr	r3, [pc, #448]	@ (8005320 <main+0x390>)
 8005160:	f642 1204 	movw	r2, #10500	@ 0x2904
 8005164:	801a      	strh	r2, [r3, #0]
  	OLD_SPEED2 = min_speed;
 8005166:	4b6f      	ldr	r3, [pc, #444]	@ (8005324 <main+0x394>)
 8005168:	f642 1204 	movw	r2, #10500	@ 0x2904
 800516c:	801a      	strh	r2, [r3, #0]
  	OLD_SPEED3 = min_speed;
 800516e:	4b6e      	ldr	r3, [pc, #440]	@ (8005328 <main+0x398>)
 8005170:	f642 1204 	movw	r2, #10500	@ 0x2904
 8005174:	801a      	strh	r2, [r3, #0]
  	OLD_SPEED4 = min_speed;
 8005176:	4b6d      	ldr	r3, [pc, #436]	@ (800532c <main+0x39c>)
 8005178:	f642 1204 	movw	r2, #10500	@ 0x2904
 800517c:	801a      	strh	r2, [r3, #0]
  	commandready = 0;
 800517e:	4b6c      	ldr	r3, [pc, #432]	@ (8005330 <main+0x3a0>)
 8005180:	2200      	movs	r2, #0
 8005182:	701a      	strb	r2, [r3, #0]
  	command_ch_num = 0;
 8005184:	4b6b      	ldr	r3, [pc, #428]	@ (8005334 <main+0x3a4>)
 8005186:	2200      	movs	r2, #0
 8005188:	701a      	strb	r2, [r3, #0]
  	Mainloop_Number = 0;
 800518a:	4b6b      	ldr	r3, [pc, #428]	@ (8005338 <main+0x3a8>)
 800518c:	2200      	movs	r2, #0
 800518e:	601a      	str	r2, [r3, #0]
  	SD_In_Use = 0;
 8005190:	4b6a      	ldr	r3, [pc, #424]	@ (800533c <main+0x3ac>)
 8005192:	2200      	movs	r2, #0
 8005194:	601a      	str	r2, [r3, #0]
  	wobble_strenght = 1;
 8005196:	4b6a      	ldr	r3, [pc, #424]	@ (8005340 <main+0x3b0>)
 8005198:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800519c:	601a      	str	r2, [r3, #0]
  	MPU6050_IRQ = 0, HMC583L_IRQ = 0, BMP180_IRQ = 0;
 800519e:	4b69      	ldr	r3, [pc, #420]	@ (8005344 <main+0x3b4>)
 80051a0:	2200      	movs	r2, #0
 80051a2:	701a      	strb	r2, [r3, #0]
 80051a4:	4b68      	ldr	r3, [pc, #416]	@ (8005348 <main+0x3b8>)
 80051a6:	2200      	movs	r2, #0
 80051a8:	701a      	strb	r2, [r3, #0]
 80051aa:	4b68      	ldr	r3, [pc, #416]	@ (800534c <main+0x3bc>)
 80051ac:	2200      	movs	r2, #0
 80051ae:	701a      	strb	r2, [r3, #0]
  	i = 0, loopnum = 0;
 80051b0:	4b67      	ldr	r3, [pc, #412]	@ (8005350 <main+0x3c0>)
 80051b2:	2200      	movs	r2, #0
 80051b4:	601a      	str	r2, [r3, #0]
 80051b6:	4b67      	ldr	r3, [pc, #412]	@ (8005354 <main+0x3c4>)
 80051b8:	2200      	movs	r2, #0
 80051ba:	601a      	str	r2, [r3, #0]

  	thrust_values = 0;
 80051bc:	4966      	ldr	r1, [pc, #408]	@ (8005358 <main+0x3c8>)
 80051be:	f04f 0200 	mov.w	r2, #0
 80051c2:	f04f 0300 	mov.w	r3, #0
 80051c6:	e9c1 2300 	strd	r2, r3, [r1]

	  p_angular_rate_pitchfactor = 10;
 80051ca:	4b64      	ldr	r3, [pc, #400]	@ (800535c <main+0x3cc>)
 80051cc:	4a64      	ldr	r2, [pc, #400]	@ (8005360 <main+0x3d0>)
 80051ce:	601a      	str	r2, [r3, #0]
	  p_angular_rate_roolfactor = 10;
 80051d0:	4b64      	ldr	r3, [pc, #400]	@ (8005364 <main+0x3d4>)
 80051d2:	4a63      	ldr	r2, [pc, #396]	@ (8005360 <main+0x3d0>)
 80051d4:	601a      	str	r2, [r3, #0]
	  p_angular_rate_yawfactor = 10;
 80051d6:	4b64      	ldr	r3, [pc, #400]	@ (8005368 <main+0x3d8>)
 80051d8:	4a61      	ldr	r2, [pc, #388]	@ (8005360 <main+0x3d0>)
 80051da:	601a      	str	r2, [r3, #0]
	///////////////////////////////////////////////////////////////////////////
	  i_angular_rate_pitchfactor = 0;
 80051dc:	4b63      	ldr	r3, [pc, #396]	@ (800536c <main+0x3dc>)
 80051de:	f04f 0200 	mov.w	r2, #0
 80051e2:	601a      	str	r2, [r3, #0]
	  i_angular_rate_roolfactor = 0;
 80051e4:	4b62      	ldr	r3, [pc, #392]	@ (8005370 <main+0x3e0>)
 80051e6:	f04f 0200 	mov.w	r2, #0
 80051ea:	601a      	str	r2, [r3, #0]
	  i_angular_rate_yawfactor = 0;
 80051ec:	4b61      	ldr	r3, [pc, #388]	@ (8005374 <main+0x3e4>)
 80051ee:	f04f 0200 	mov.w	r2, #0
 80051f2:	601a      	str	r2, [r3, #0]
	///////////////////////////////////////////////////////////////////////////
	  d_angular_rate_pitchfactor = 30;
 80051f4:	4b60      	ldr	r3, [pc, #384]	@ (8005378 <main+0x3e8>)
 80051f6:	4a61      	ldr	r2, [pc, #388]	@ (800537c <main+0x3ec>)
 80051f8:	601a      	str	r2, [r3, #0]
	  d_angular_rate_roolfactor = 20;
 80051fa:	4b61      	ldr	r3, [pc, #388]	@ (8005380 <main+0x3f0>)
 80051fc:	4a61      	ldr	r2, [pc, #388]	@ (8005384 <main+0x3f4>)
 80051fe:	601a      	str	r2, [r3, #0]
	  d_angular_rate_yawfactor = 5;
 8005200:	4b61      	ldr	r3, [pc, #388]	@ (8005388 <main+0x3f8>)
 8005202:	4a62      	ldr	r2, [pc, #392]	@ (800538c <main+0x3fc>)
 8005204:	601a      	str	r2, [r3, #0]

	  p_pitchfactor = 6.5;//*1.5 6
 8005206:	4b15      	ldr	r3, [pc, #84]	@ (800525c <main+0x2cc>)
 8005208:	4a61      	ldr	r2, [pc, #388]	@ (8005390 <main+0x400>)
 800520a:	601a      	str	r2, [r3, #0]
	  p_roolfactor = 4.5;//5
 800520c:	4b17      	ldr	r3, [pc, #92]	@ (800526c <main+0x2dc>)
 800520e:	4a61      	ldr	r2, [pc, #388]	@ (8005394 <main+0x404>)
 8005210:	601a      	str	r2, [r3, #0]
	  p_yawfactor = 3;
 8005212:	4b1a      	ldr	r3, [pc, #104]	@ (800527c <main+0x2ec>)
 8005214:	4a60      	ldr	r2, [pc, #384]	@ (8005398 <main+0x408>)
 8005216:	601a      	str	r2, [r3, #0]
	///////////////////////////////////////////////////////////////////////////
	  i_pitchfactor = 8;//8
 8005218:	4b12      	ldr	r3, [pc, #72]	@ (8005264 <main+0x2d4>)
 800521a:	f04f 4282 	mov.w	r2, #1090519040	@ 0x41000000
 800521e:	601a      	str	r2, [r3, #0]
	  i_roolfactor = 10;//10
 8005220:	4b14      	ldr	r3, [pc, #80]	@ (8005274 <main+0x2e4>)
 8005222:	4a4f      	ldr	r2, [pc, #316]	@ (8005360 <main+0x3d0>)
 8005224:	601a      	str	r2, [r3, #0]
	  i_yawfactor = 0;
 8005226:	4b17      	ldr	r3, [pc, #92]	@ (8005284 <main+0x2f4>)
 8005228:	f04f 0200 	mov.w	r2, #0
 800522c:	601a      	str	r2, [r3, #0]
	///////////////////////////////////////////////////////////////////////////
	  d_pitchfactor = 25;//25
 800522e:	4b0e      	ldr	r3, [pc, #56]	@ (8005268 <main+0x2d8>)
 8005230:	4a5a      	ldr	r2, [pc, #360]	@ (800539c <main+0x40c>)
 8005232:	601a      	str	r2, [r3, #0]
	  d_roolfactor = 0;
 8005234:	4b10      	ldr	r3, [pc, #64]	@ (8005278 <main+0x2e8>)
 8005236:	f04f 0200 	mov.w	r2, #0
 800523a:	601a      	str	r2, [r3, #0]
	  d_yawfactor = 0;
 800523c:	4b12      	ldr	r3, [pc, #72]	@ (8005288 <main+0x2f8>)
 800523e:	f04f 0200 	mov.w	r2, #0
 8005242:	601a      	str	r2, [r3, #0]




  	  PID_FAC_Angular_Rate_Pitch[0] = p_angular_rate_pitchfactor;
 8005244:	4b45      	ldr	r3, [pc, #276]	@ (800535c <main+0x3cc>)
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	4a55      	ldr	r2, [pc, #340]	@ (80053a0 <main+0x410>)
 800524a:	6013      	str	r3, [r2, #0]
 800524c:	e0aa      	b.n	80053a4 <main+0x414>
 800524e:	bf00      	nop
 8005250:	58021800 	.word	0x58021800
 8005254:	0000007c 	.word	0x0000007c
 8005258:	000041bc 	.word	0x000041bc
 800525c:	000040ec 	.word	0x000040ec
 8005260:	00004110 	.word	0x00004110
 8005264:	000040f8 	.word	0x000040f8
 8005268:	00004104 	.word	0x00004104
 800526c:	000040f0 	.word	0x000040f0
 8005270:	00004124 	.word	0x00004124
 8005274:	000040fc 	.word	0x000040fc
 8005278:	00004108 	.word	0x00004108
 800527c:	000040f4 	.word	0x000040f4
 8005280:	00004138 	.word	0x00004138
 8005284:	00004100 	.word	0x00004100
 8005288:	0000410c 	.word	0x0000410c
 800528c:	00000018 	.word	0x00000018
 8005290:	0000001c 	.word	0x0000001c
 8005294:	00000020 	.word	0x00000020
 8005298:	00000024 	.word	0x00000024
 800529c:	00000028 	.word	0x00000028
 80052a0:	0000002c 	.word	0x0000002c
 80052a4:	00000058 	.word	0x00000058
 80052a8:	00000074 	.word	0x00000074
 80052ac:	00000078 	.word	0x00000078
 80052b0:	00000080 	.word	0x00000080
 80052b4:	000000e4 	.word	0x000000e4
 80052b8:	000000e8 	.word	0x000000e8
 80052bc:	000000ec 	.word	0x000000ec
 80052c0:	000000f0 	.word	0x000000f0
 80052c4:	00004058 	.word	0x00004058
 80052c8:	0000405c 	.word	0x0000405c
 80052cc:	00004060 	.word	0x00004060
 80052d0:	00004064 	.word	0x00004064
 80052d4:	00004066 	.word	0x00004066
 80052d8:	0000407c 	.word	0x0000407c
 80052dc:	0000407e 	.word	0x0000407e
 80052e0:	000040a4 	.word	0x000040a4
 80052e4:	000040a8 	.word	0x000040a8
 80052e8:	000040ac 	.word	0x000040ac
 80052ec:	000040b0 	.word	0x000040b0
 80052f0:	000040b4 	.word	0x000040b4
 80052f4:	000040b8 	.word	0x000040b8
 80052f8:	000040bc 	.word	0x000040bc
 80052fc:	000040c0 	.word	0x000040c0
 8005300:	000040c4 	.word	0x000040c4
 8005304:	000040c8 	.word	0x000040c8
 8005308:	000040cc 	.word	0x000040cc
 800530c:	000040d0 	.word	0x000040d0
 8005310:	000041ac 	.word	0x000041ac
 8005314:	000041ae 	.word	0x000041ae
 8005318:	000041b0 	.word	0x000041b0
 800531c:	000041b2 	.word	0x000041b2
 8005320:	000041b4 	.word	0x000041b4
 8005324:	000041b6 	.word	0x000041b6
 8005328:	000041b8 	.word	0x000041b8
 800532c:	000041ba 	.word	0x000041ba
 8005330:	000041de 	.word	0x000041de
 8005334:	000041df 	.word	0x000041df
 8005338:	000041e4 	.word	0x000041e4
 800533c:	000041e8 	.word	0x000041e8
 8005340:	000041f0 	.word	0x000041f0
 8005344:	000041f4 	.word	0x000041f4
 8005348:	000041f5 	.word	0x000041f5
 800534c:	000041f6 	.word	0x000041f6
 8005350:	000041f8 	.word	0x000041f8
 8005354:	000041fc 	.word	0x000041fc
 8005358:	00004068 	.word	0x00004068
 800535c:	0000414c 	.word	0x0000414c
 8005360:	41200000 	.word	0x41200000
 8005364:	00004150 	.word	0x00004150
 8005368:	00004154 	.word	0x00004154
 800536c:	00004158 	.word	0x00004158
 8005370:	0000415c 	.word	0x0000415c
 8005374:	00004160 	.word	0x00004160
 8005378:	00004164 	.word	0x00004164
 800537c:	41f00000 	.word	0x41f00000
 8005380:	00004168 	.word	0x00004168
 8005384:	41a00000 	.word	0x41a00000
 8005388:	0000416c 	.word	0x0000416c
 800538c:	40a00000 	.word	0x40a00000
 8005390:	40d00000 	.word	0x40d00000
 8005394:	40900000 	.word	0x40900000
 8005398:	40400000 	.word	0x40400000
 800539c:	41c80000 	.word	0x41c80000
 80053a0:	00004170 	.word	0x00004170
  	  PID_FAC_Angular_Rate_Pitch[1] = i_angular_rate_pitchfactor;
 80053a4:	4ba6      	ldr	r3, [pc, #664]	@ (8005640 <main+0x6b0>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	4aa6      	ldr	r2, [pc, #664]	@ (8005644 <main+0x6b4>)
 80053aa:	6053      	str	r3, [r2, #4]
  	  PID_FAC_Angular_Rate_Pitch[2] = d_angular_rate_pitchfactor;
 80053ac:	4ba6      	ldr	r3, [pc, #664]	@ (8005648 <main+0x6b8>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4aa4      	ldr	r2, [pc, #656]	@ (8005644 <main+0x6b4>)
 80053b2:	6093      	str	r3, [r2, #8]
  	  PID_FAC_Angular_Rate_Rool[0] = p_angular_rate_roolfactor;//
 80053b4:	4ba5      	ldr	r3, [pc, #660]	@ (800564c <main+0x6bc>)
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4aa5      	ldr	r2, [pc, #660]	@ (8005650 <main+0x6c0>)
 80053ba:	6013      	str	r3, [r2, #0]
  	  PID_FAC_Angular_Rate_Rool[1] = i_angular_rate_roolfactor;
 80053bc:	4ba5      	ldr	r3, [pc, #660]	@ (8005654 <main+0x6c4>)
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4aa3      	ldr	r2, [pc, #652]	@ (8005650 <main+0x6c0>)
 80053c2:	6053      	str	r3, [r2, #4]
  	  PID_FAC_Angular_Rate_Rool[2] = d_angular_rate_roolfactor;
 80053c4:	4ba4      	ldr	r3, [pc, #656]	@ (8005658 <main+0x6c8>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4aa1      	ldr	r2, [pc, #644]	@ (8005650 <main+0x6c0>)
 80053ca:	6093      	str	r3, [r2, #8]
  	  PID_FAC_Angular_Rate_Yaw[0] = p_angular_rate_yawfactor;//
 80053cc:	4ba3      	ldr	r3, [pc, #652]	@ (800565c <main+0x6cc>)
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4aa3      	ldr	r2, [pc, #652]	@ (8005660 <main+0x6d0>)
 80053d2:	6013      	str	r3, [r2, #0]
  	  PID_FAC_Angular_Rate_Yaw[1] = i_angular_rate_yawfactor;
 80053d4:	4ba3      	ldr	r3, [pc, #652]	@ (8005664 <main+0x6d4>)
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4aa1      	ldr	r2, [pc, #644]	@ (8005660 <main+0x6d0>)
 80053da:	6053      	str	r3, [r2, #4]
  	  PID_FAC_Angular_Rate_Yaw[2] = d_angular_rate_yawfactor;
 80053dc:	4ba2      	ldr	r3, [pc, #648]	@ (8005668 <main+0x6d8>)
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4a9f      	ldr	r2, [pc, #636]	@ (8005660 <main+0x6d0>)
 80053e2:	6093      	str	r3, [r2, #8]
  	  PID_FAC_Pitch[0] = p_pitchfactor;
 80053e4:	4ba1      	ldr	r3, [pc, #644]	@ (800566c <main+0x6dc>)
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	4aa1      	ldr	r2, [pc, #644]	@ (8005670 <main+0x6e0>)
 80053ea:	6013      	str	r3, [r2, #0]
  	  PID_FAC_Pitch[1] = i_pitchfactor;
 80053ec:	4ba1      	ldr	r3, [pc, #644]	@ (8005674 <main+0x6e4>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4a9f      	ldr	r2, [pc, #636]	@ (8005670 <main+0x6e0>)
 80053f2:	6053      	str	r3, [r2, #4]
  	  PID_FAC_Pitch[2] = d_pitchfactor;
 80053f4:	4ba0      	ldr	r3, [pc, #640]	@ (8005678 <main+0x6e8>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4a9d      	ldr	r2, [pc, #628]	@ (8005670 <main+0x6e0>)
 80053fa:	6093      	str	r3, [r2, #8]
  	  PID_FAC_Rool[0] = p_roolfactor;//
 80053fc:	4b9f      	ldr	r3, [pc, #636]	@ (800567c <main+0x6ec>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4a9f      	ldr	r2, [pc, #636]	@ (8005680 <main+0x6f0>)
 8005402:	6013      	str	r3, [r2, #0]
  	  PID_FAC_Rool[1] = i_roolfactor;
 8005404:	4b9f      	ldr	r3, [pc, #636]	@ (8005684 <main+0x6f4>)
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4a9d      	ldr	r2, [pc, #628]	@ (8005680 <main+0x6f0>)
 800540a:	6053      	str	r3, [r2, #4]
  	  PID_FAC_Rool[2] = d_roolfactor;
 800540c:	4b9e      	ldr	r3, [pc, #632]	@ (8005688 <main+0x6f8>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4a9b      	ldr	r2, [pc, #620]	@ (8005680 <main+0x6f0>)
 8005412:	6093      	str	r3, [r2, #8]
  	  PID_FAC_Yaw[0] = p_yawfactor;//
 8005414:	4b9d      	ldr	r3, [pc, #628]	@ (800568c <main+0x6fc>)
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4a9d      	ldr	r2, [pc, #628]	@ (8005690 <main+0x700>)
 800541a:	6013      	str	r3, [r2, #0]
  	  PID_FAC_Yaw[1] = i_yawfactor;
 800541c:	4b9d      	ldr	r3, [pc, #628]	@ (8005694 <main+0x704>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4a9b      	ldr	r2, [pc, #620]	@ (8005690 <main+0x700>)
 8005422:	6053      	str	r3, [r2, #4]
  	  PID_FAC_Yaw[2] = d_yawfactor;
 8005424:	4b9c      	ldr	r3, [pc, #624]	@ (8005698 <main+0x708>)
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	4a99      	ldr	r2, [pc, #612]	@ (8005690 <main+0x700>)
 800542a:	6093      	str	r3, [r2, #8]

  	wanted_pitch_rx = 0;// chcainy stan
 800542c:	4b9b      	ldr	r3, [pc, #620]	@ (800569c <main+0x70c>)
 800542e:	2200      	movs	r2, #0
 8005430:	801a      	strh	r2, [r3, #0]
  	wanted_rool_rx = 0;
 8005432:	4b9b      	ldr	r3, [pc, #620]	@ (80056a0 <main+0x710>)
 8005434:	2200      	movs	r2, #0
 8005436:	801a      	strh	r2, [r3, #0]
  	wanted_yaw_rx = 0;
 8005438:	4b9a      	ldr	r3, [pc, #616]	@ (80056a4 <main+0x714>)
 800543a:	2200      	movs	r2, #0
 800543c:	801a      	strh	r2, [r3, #0]
  	wanted_gz = 0 ;
 800543e:	4b9a      	ldr	r3, [pc, #616]	@ (80056a8 <main+0x718>)
 8005440:	2200      	movs	r2, #0
 8005442:	801a      	strh	r2, [r3, #0]


  	data.ox = 0;
 8005444:	4b99      	ldr	r3, [pc, #612]	@ (80056ac <main+0x71c>)
 8005446:	f04f 0200 	mov.w	r2, #0
 800544a:	60da      	str	r2, [r3, #12]
  	data.x = 0;
 800544c:	4b97      	ldr	r3, [pc, #604]	@ (80056ac <main+0x71c>)
 800544e:	f04f 0200 	mov.w	r2, #0
 8005452:	601a      	str	r2, [r3, #0]
  	data.oy = 0;
 8005454:	4b95      	ldr	r3, [pc, #596]	@ (80056ac <main+0x71c>)
 8005456:	f04f 0200 	mov.w	r2, #0
 800545a:	611a      	str	r2, [r3, #16]
  	data.y = 0;
 800545c:	4b93      	ldr	r3, [pc, #588]	@ (80056ac <main+0x71c>)
 800545e:	f04f 0200 	mov.w	r2, #0
 8005462:	605a      	str	r2, [r3, #4]
  	data.oz = 0;
 8005464:	4b91      	ldr	r3, [pc, #580]	@ (80056ac <main+0x71c>)
 8005466:	f04f 0200 	mov.w	r2, #0
 800546a:	615a      	str	r2, [r3, #20]
  	data.z = 0;
 800546c:	4b8f      	ldr	r3, [pc, #572]	@ (80056ac <main+0x71c>)
 800546e:	f04f 0200 	mov.w	r2, #0
 8005472:	609a      	str	r2, [r3, #8]


  	pid_pitch = 0;
 8005474:	4b8e      	ldr	r3, [pc, #568]	@ (80056b0 <main+0x720>)
 8005476:	f04f 0200 	mov.w	r2, #0
 800547a:	601a      	str	r2, [r3, #0]
  	pid_yaw = 0;
 800547c:	4b8d      	ldr	r3, [pc, #564]	@ (80056b4 <main+0x724>)
 800547e:	f04f 0200 	mov.w	r2, #0
 8005482:	601a      	str	r2, [r3, #0]
  	pid_rool = 0;
 8005484:	4b8c      	ldr	r3, [pc, #560]	@ (80056b8 <main+0x728>)
 8005486:	f04f 0200 	mov.w	r2, #0
 800548a:	601a      	str	r2, [r3, #0]

  	pid_angular_rate_pitch = 0;
 800548c:	4b8b      	ldr	r3, [pc, #556]	@ (80056bc <main+0x72c>)
 800548e:	f04f 0200 	mov.w	r2, #0
 8005492:	601a      	str	r2, [r3, #0]
  	pid_angular_rate_yaw = 0;
 8005494:	4b8a      	ldr	r3, [pc, #552]	@ (80056c0 <main+0x730>)
 8005496:	f04f 0200 	mov.w	r2, #0
 800549a:	601a      	str	r2, [r3, #0]
  	pid_angular_rate_rool = 0;
 800549c:	4b89      	ldr	r3, [pc, #548]	@ (80056c4 <main+0x734>)
 800549e:	f04f 0200 	mov.w	r2, #0
 80054a2:	601a      	str	r2, [r3, #0]

  	MYDRON.PITCH_STA = 0;
 80054a4:	4b88      	ldr	r3, [pc, #544]	@ (80056c8 <main+0x738>)
 80054a6:	2200      	movs	r2, #0
 80054a8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  	MYDRON.ROOL_STA = 0;
 80054ac:	4b86      	ldr	r3, [pc, #536]	@ (80056c8 <main+0x738>)
 80054ae:	2200      	movs	r2, #0
 80054b0:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
  	MYDRON.YAW_STA = 0;
 80054b4:	4b84      	ldr	r3, [pc, #528]	@ (80056c8 <main+0x738>)
 80054b6:	2200      	movs	r2, #0
 80054b8:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  	ax = 0,ay = 0,az = 0, gx = 0, gy = 0, gz = 0;
 80054bc:	4b83      	ldr	r3, [pc, #524]	@ (80056cc <main+0x73c>)
 80054be:	f04f 0200 	mov.w	r2, #0
 80054c2:	601a      	str	r2, [r3, #0]
 80054c4:	4b82      	ldr	r3, [pc, #520]	@ (80056d0 <main+0x740>)
 80054c6:	f04f 0200 	mov.w	r2, #0
 80054ca:	601a      	str	r2, [r3, #0]
 80054cc:	4b81      	ldr	r3, [pc, #516]	@ (80056d4 <main+0x744>)
 80054ce:	f04f 0200 	mov.w	r2, #0
 80054d2:	601a      	str	r2, [r3, #0]
 80054d4:	4b80      	ldr	r3, [pc, #512]	@ (80056d8 <main+0x748>)
 80054d6:	f04f 0200 	mov.w	r2, #0
 80054da:	601a      	str	r2, [r3, #0]
 80054dc:	4b7f      	ldr	r3, [pc, #508]	@ (80056dc <main+0x74c>)
 80054de:	f04f 0200 	mov.w	r2, #0
 80054e2:	601a      	str	r2, [r3, #0]
 80054e4:	4b7e      	ldr	r3, [pc, #504]	@ (80056e0 <main+0x750>)
 80054e6:	f04f 0200 	mov.w	r2, #0
 80054ea:	601a      	str	r2, [r3, #0]
  	ax_ang = 0,ay_ang = 0,az_ang = 0, gx_ang = 0, gy_ang = 0, gz_ang = 0;
 80054ec:	4b7d      	ldr	r3, [pc, #500]	@ (80056e4 <main+0x754>)
 80054ee:	f04f 0200 	mov.w	r2, #0
 80054f2:	601a      	str	r2, [r3, #0]
 80054f4:	4b7c      	ldr	r3, [pc, #496]	@ (80056e8 <main+0x758>)
 80054f6:	f04f 0200 	mov.w	r2, #0
 80054fa:	601a      	str	r2, [r3, #0]
 80054fc:	4b7b      	ldr	r3, [pc, #492]	@ (80056ec <main+0x75c>)
 80054fe:	f04f 0200 	mov.w	r2, #0
 8005502:	601a      	str	r2, [r3, #0]
 8005504:	4b7a      	ldr	r3, [pc, #488]	@ (80056f0 <main+0x760>)
 8005506:	f04f 0200 	mov.w	r2, #0
 800550a:	601a      	str	r2, [r3, #0]
 800550c:	4b79      	ldr	r3, [pc, #484]	@ (80056f4 <main+0x764>)
 800550e:	f04f 0200 	mov.w	r2, #0
 8005512:	601a      	str	r2, [r3, #0]
 8005514:	4b78      	ldr	r3, [pc, #480]	@ (80056f8 <main+0x768>)
 8005516:	f04f 0200 	mov.w	r2, #0
 800551a:	601a      	str	r2, [r3, #0]
  	accelx_cal = 0, accely_cal = 0, accelz_cal = 0, gyrox_cal = 0, gyroy_cal = 0, gyroz_cal = 0;
 800551c:	4b77      	ldr	r3, [pc, #476]	@ (80056fc <main+0x76c>)
 800551e:	f04f 0200 	mov.w	r2, #0
 8005522:	601a      	str	r2, [r3, #0]
 8005524:	4b76      	ldr	r3, [pc, #472]	@ (8005700 <main+0x770>)
 8005526:	f04f 0200 	mov.w	r2, #0
 800552a:	601a      	str	r2, [r3, #0]
 800552c:	4b75      	ldr	r3, [pc, #468]	@ (8005704 <main+0x774>)
 800552e:	f04f 0200 	mov.w	r2, #0
 8005532:	601a      	str	r2, [r3, #0]
 8005534:	4b74      	ldr	r3, [pc, #464]	@ (8005708 <main+0x778>)
 8005536:	f04f 0200 	mov.w	r2, #0
 800553a:	601a      	str	r2, [r3, #0]
 800553c:	4b73      	ldr	r3, [pc, #460]	@ (800570c <main+0x77c>)
 800553e:	f04f 0200 	mov.w	r2, #0
 8005542:	601a      	str	r2, [r3, #0]
 8005544:	4b72      	ldr	r3, [pc, #456]	@ (8005710 <main+0x780>)
 8005546:	f04f 0200 	mov.w	r2, #0
 800554a:	601a      	str	r2, [r3, #0]

  	nRF24_Rx_Mode = 0;
 800554c:	4b71      	ldr	r3, [pc, #452]	@ (8005714 <main+0x784>)
 800554e:	2200      	movs	r2, #0
 8005550:	701a      	strb	r2, [r3, #0]

  	now_pitch = 0;
 8005552:	4b71      	ldr	r3, [pc, #452]	@ (8005718 <main+0x788>)
 8005554:	f04f 0200 	mov.w	r2, #0
 8005558:	601a      	str	r2, [r3, #0]
  	now_rool = 0;
 800555a:	4b70      	ldr	r3, [pc, #448]	@ (800571c <main+0x78c>)
 800555c:	f04f 0200 	mov.w	r2, #0
 8005560:	601a      	str	r2, [r3, #0]
  	now_yaw = 0;
 8005562:	4b6f      	ldr	r3, [pc, #444]	@ (8005720 <main+0x790>)
 8005564:	f04f 0200 	mov.w	r2, #0
 8005568:	601a      	str	r2, [r3, #0]
  	wanted_pitch = 0;
 800556a:	4b6e      	ldr	r3, [pc, #440]	@ (8005724 <main+0x794>)
 800556c:	f04f 0200 	mov.w	r2, #0
 8005570:	601a      	str	r2, [r3, #0]

  	pitch_error = 0;
 8005572:	4b6d      	ldr	r3, [pc, #436]	@ (8005728 <main+0x798>)
 8005574:	f04f 0200 	mov.w	r2, #0
 8005578:	601a      	str	r2, [r3, #0]
  	rool_error = 0;
 800557a:	4b6c      	ldr	r3, [pc, #432]	@ (800572c <main+0x79c>)
 800557c:	f04f 0200 	mov.w	r2, #0
 8005580:	601a      	str	r2, [r3, #0]
  	yaw_error = 0;
 8005582:	4b6b      	ldr	r3, [pc, #428]	@ (8005730 <main+0x7a0>)
 8005584:	f04f 0200 	mov.w	r2, #0
 8005588:	601a      	str	r2, [r3, #0]
  	pitch_ar_error = 0;
 800558a:	4b6a      	ldr	r3, [pc, #424]	@ (8005734 <main+0x7a4>)
 800558c:	f04f 0200 	mov.w	r2, #0
 8005590:	601a      	str	r2, [r3, #0]
  	rool_ar_error = 0;
 8005592:	4b69      	ldr	r3, [pc, #420]	@ (8005738 <main+0x7a8>)
 8005594:	f04f 0200 	mov.w	r2, #0
 8005598:	601a      	str	r2, [r3, #0]
  	yaw_ar_error = 0;
 800559a:	4b68      	ldr	r3, [pc, #416]	@ (800573c <main+0x7ac>)
 800559c:	f04f 0200 	mov.w	r2, #0
 80055a0:	601a      	str	r2, [r3, #0]


  	uint8_t o[3] = "Odb";
 80055a2:	4a67      	ldr	r2, [pc, #412]	@ (8005740 <main+0x7b0>)
 80055a4:	f107 0308 	add.w	r3, r7, #8
 80055a8:	6812      	ldr	r2, [r2, #0]
 80055aa:	4611      	mov	r1, r2
 80055ac:	8019      	strh	r1, [r3, #0]
 80055ae:	3302      	adds	r3, #2
 80055b0:	0c12      	lsrs	r2, r2, #16
 80055b2:	701a      	strb	r2, [r3, #0]
  	uint8_t n[3] = "Nad";
 80055b4:	4a63      	ldr	r2, [pc, #396]	@ (8005744 <main+0x7b4>)
 80055b6:	1d3b      	adds	r3, r7, #4
 80055b8:	6812      	ldr	r2, [r2, #0]
 80055ba:	4611      	mov	r1, r2
 80055bc:	8019      	strh	r1, [r3, #0]
 80055be:	3302      	adds	r3, #2
 80055c0:	0c12      	lsrs	r2, r2, #16
 80055c2:	701a      	strb	r2, [r3, #0]


  	LED_5_1;
 80055c4:	2201      	movs	r2, #1
 80055c6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80055ca:	485f      	ldr	r0, [pc, #380]	@ (8005748 <main+0x7b8>)
 80055cc:	f009 f912 	bl	800e7f4 <HAL_GPIO_WritePin>
  	LED_6_1;
 80055d0:	2201      	movs	r2, #1
 80055d2:	2108      	movs	r1, #8
 80055d4:	485d      	ldr	r0, [pc, #372]	@ (800574c <main+0x7bc>)
 80055d6:	f009 f90d 	bl	800e7f4 <HAL_GPIO_WritePin>
  	LED_7_1;
 80055da:	2201      	movs	r2, #1
 80055dc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80055e0:	4859      	ldr	r0, [pc, #356]	@ (8005748 <main+0x7b8>)
 80055e2:	f009 f907 	bl	800e7f4 <HAL_GPIO_WritePin>
  	LED_uSD_1;
 80055e6:	2201      	movs	r2, #1
 80055e8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80055ec:	4858      	ldr	r0, [pc, #352]	@ (8005750 <main+0x7c0>)
 80055ee:	f009 f901 	bl	800e7f4 <HAL_GPIO_WritePin>
  	LED_G_1;
 80055f2:	2201      	movs	r2, #1
 80055f4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80055f8:	4854      	ldr	r0, [pc, #336]	@ (800574c <main+0x7bc>)
 80055fa:	f009 f8fb 	bl	800e7f4 <HAL_GPIO_WritePin>
  	LED_Y_1;
 80055fe:	2201      	movs	r2, #1
 8005600:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005604:	4853      	ldr	r0, [pc, #332]	@ (8005754 <main+0x7c4>)
 8005606:	f009 f8f5 	bl	800e7f4 <HAL_GPIO_WritePin>
  	LED_R_1;
 800560a:	2201      	movs	r2, #1
 800560c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005610:	4850      	ldr	r0, [pc, #320]	@ (8005754 <main+0x7c4>)
 8005612:	f009 f8ef 	bl	800e7f4 <HAL_GPIO_WritePin>
  	HAL_Delay(1000);
 8005616:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800561a:	f003 ffaf 	bl	800957c <HAL_Delay>
  	LED_G_0;
 800561e:	2200      	movs	r2, #0
 8005620:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005624:	4849      	ldr	r0, [pc, #292]	@ (800574c <main+0x7bc>)
 8005626:	f009 f8e5 	bl	800e7f4 <HAL_GPIO_WritePin>
  	LED_Y_0;
 800562a:	2200      	movs	r2, #0
 800562c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005630:	4848      	ldr	r0, [pc, #288]	@ (8005754 <main+0x7c4>)
 8005632:	f009 f8df 	bl	800e7f4 <HAL_GPIO_WritePin>
  	LED_R_0;
 8005636:	2200      	movs	r2, #0
 8005638:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800563c:	e08c      	b.n	8005758 <main+0x7c8>
 800563e:	bf00      	nop
 8005640:	00004158 	.word	0x00004158
 8005644:	00004170 	.word	0x00004170
 8005648:	00004164 	.word	0x00004164
 800564c:	00004150 	.word	0x00004150
 8005650:	00004184 	.word	0x00004184
 8005654:	0000415c 	.word	0x0000415c
 8005658:	00004168 	.word	0x00004168
 800565c:	00004154 	.word	0x00004154
 8005660:	00004198 	.word	0x00004198
 8005664:	00004160 	.word	0x00004160
 8005668:	0000416c 	.word	0x0000416c
 800566c:	000040ec 	.word	0x000040ec
 8005670:	00004110 	.word	0x00004110
 8005674:	000040f8 	.word	0x000040f8
 8005678:	00004104 	.word	0x00004104
 800567c:	000040f0 	.word	0x000040f0
 8005680:	00004124 	.word	0x00004124
 8005684:	000040fc 	.word	0x000040fc
 8005688:	00004108 	.word	0x00004108
 800568c:	000040f4 	.word	0x000040f4
 8005690:	00004138 	.word	0x00004138
 8005694:	00004100 	.word	0x00004100
 8005698:	0000410c 	.word	0x0000410c
 800569c:	00004050 	.word	0x00004050
 80056a0:	00004052 	.word	0x00004052
 80056a4:	00004054 	.word	0x00004054
 80056a8:	00004056 	.word	0x00004056
 80056ac:	00000084 	.word	0x00000084
 80056b0:	000040d4 	.word	0x000040d4
 80056b4:	000040d8 	.word	0x000040d8
 80056b8:	000040dc 	.word	0x000040dc
 80056bc:	000040e0 	.word	0x000040e0
 80056c0:	000040e4 	.word	0x000040e4
 80056c4:	000040e8 	.word	0x000040e8
 80056c8:	00000180 	.word	0x00000180
 80056cc:	00000000 	.word	0x00000000
 80056d0:	00000004 	.word	0x00000004
 80056d4:	00000008 	.word	0x00000008
 80056d8:	0000000c 	.word	0x0000000c
 80056dc:	00000010 	.word	0x00000010
 80056e0:	00000014 	.word	0x00000014
 80056e4:	00000018 	.word	0x00000018
 80056e8:	0000001c 	.word	0x0000001c
 80056ec:	00000020 	.word	0x00000020
 80056f0:	00000024 	.word	0x00000024
 80056f4:	00000028 	.word	0x00000028
 80056f8:	0000002c 	.word	0x0000002c
 80056fc:	00000030 	.word	0x00000030
 8005700:	00000034 	.word	0x00000034
 8005704:	00000038 	.word	0x00000038
 8005708:	0000003c 	.word	0x0000003c
 800570c:	00000040 	.word	0x00000040
 8005710:	00000044 	.word	0x00000044
 8005714:	0000017c 	.word	0x0000017c
 8005718:	00004080 	.word	0x00004080
 800571c:	00004084 	.word	0x00004084
 8005720:	00004088 	.word	0x00004088
 8005724:	00004070 	.word	0x00004070
 8005728:	0000408c 	.word	0x0000408c
 800572c:	00004090 	.word	0x00004090
 8005730:	00004094 	.word	0x00004094
 8005734:	00004098 	.word	0x00004098
 8005738:	0000409c 	.word	0x0000409c
 800573c:	000040a0 	.word	0x000040a0
 8005740:	0801e9ec 	.word	0x0801e9ec
 8005744:	0801e9f0 	.word	0x0801e9f0
 8005748:	58020000 	.word	0x58020000
 800574c:	58021000 	.word	0x58021000
 8005750:	58020c00 	.word	0x58020c00
 8005754:	58020400 	.word	0x58020400
 8005758:	48aa      	ldr	r0, [pc, #680]	@ (8005a04 <main+0xa74>)
 800575a:	f009 f84b 	bl	800e7f4 <HAL_GPIO_WritePin>
  	LED_5_0;
 800575e:	2200      	movs	r2, #0
 8005760:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005764:	48a8      	ldr	r0, [pc, #672]	@ (8005a08 <main+0xa78>)
 8005766:	f009 f845 	bl	800e7f4 <HAL_GPIO_WritePin>
  	LED_6_0;
 800576a:	2200      	movs	r2, #0
 800576c:	2108      	movs	r1, #8
 800576e:	48a7      	ldr	r0, [pc, #668]	@ (8005a0c <main+0xa7c>)
 8005770:	f009 f840 	bl	800e7f4 <HAL_GPIO_WritePin>
  	LED_7_0;
 8005774:	2200      	movs	r2, #0
 8005776:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800577a:	48a3      	ldr	r0, [pc, #652]	@ (8005a08 <main+0xa78>)
 800577c:	f009 f83a 	bl	800e7f4 <HAL_GPIO_WritePin>
  	LED_uSD_0;
 8005780:	2200      	movs	r2, #0
 8005782:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005786:	48a2      	ldr	r0, [pc, #648]	@ (8005a10 <main+0xa80>)
 8005788:	f009 f834 	bl	800e7f4 <HAL_GPIO_WritePin>


  	for(int i = 0; i < 4000; i++){
 800578c:	2300      	movs	r3, #0
 800578e:	61fb      	str	r3, [r7, #28]
 8005790:	e009      	b.n	80057a6 <main+0x816>
  		Old_Data_stack.olddata[i] = 0;
 8005792:	4aa0      	ldr	r2, [pc, #640]	@ (8005a14 <main+0xa84>)
 8005794:	69fb      	ldr	r3, [r7, #28]
 8005796:	009b      	lsls	r3, r3, #2
 8005798:	4413      	add	r3, r2
 800579a:	f04f 0200 	mov.w	r2, #0
 800579e:	601a      	str	r2, [r3, #0]
  	for(int i = 0; i < 4000; i++){
 80057a0:	69fb      	ldr	r3, [r7, #28]
 80057a2:	3301      	adds	r3, #1
 80057a4:	61fb      	str	r3, [r7, #28]
 80057a6:	69fb      	ldr	r3, [r7, #28]
 80057a8:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 80057ac:	dbf1      	blt.n	8005792 <main+0x802>
  	}
  	Old_Data_stack.start_pointer = 0;
 80057ae:	4b99      	ldr	r3, [pc, #612]	@ (8005a14 <main+0xa84>)
 80057b0:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 80057b4:	2200      	movs	r2, #0
 80057b6:	f8a3 2ea8 	strh.w	r2, [r3, #3752]	@ 0xea8
  	Old_Data_stack.end_pointer = 4000;
 80057ba:	4b96      	ldr	r3, [pc, #600]	@ (8005a14 <main+0xa84>)
 80057bc:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 80057c0:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 80057c4:	f8a3 2eaa 	strh.w	r2, [r3, #3754]	@ 0xeaa

  	analogmess = 0;
 80057c8:	4b93      	ldr	r3, [pc, #588]	@ (8005a18 <main+0xa88>)
 80057ca:	2200      	movs	r2, #0
 80057cc:	601a      	str	r2, [r3, #0]


  	HAL_TIM_Base_Start(&htim8);
 80057ce:	4893      	ldr	r0, [pc, #588]	@ (8005a1c <main+0xa8c>)
 80057d0:	f010 fe00 	bl	80163d4 <HAL_TIM_Base_Start>
  	HAL_ADC_Start_DMA(&hadc2, &analogmess, 1);
 80057d4:	2201      	movs	r2, #1
 80057d6:	4990      	ldr	r1, [pc, #576]	@ (8005a18 <main+0xa88>)
 80057d8:	4891      	ldr	r0, [pc, #580]	@ (8005a20 <main+0xa90>)
 80057da:	f004 fc21 	bl	800a020 <HAL_ADC_Start_DMA>
  	LED_R_1;
 80057de:	2201      	movs	r2, #1
 80057e0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80057e4:	4887      	ldr	r0, [pc, #540]	@ (8005a04 <main+0xa74>)
 80057e6:	f009 f805 	bl	800e7f4 <HAL_GPIO_WritePin>
  	while(analogmess == 0){
 80057ea:	bf00      	nop
 80057ec:	4b8a      	ldr	r3, [pc, #552]	@ (8005a18 <main+0xa88>)
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d0fb      	beq.n	80057ec <main+0x85c>

  	}
  	LED_R_0;
 80057f4:	2200      	movs	r2, #0
 80057f6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80057fa:	4882      	ldr	r0, [pc, #520]	@ (8005a04 <main+0xa74>)
 80057fc:	f008 fffa 	bl	800e7f4 <HAL_GPIO_WritePin>

  	Get_batteryvalue();
 8005800:	f7fe fcbe 	bl	8004180 <Get_batteryvalue>

  	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);//pwm do diodt RGB
 8005804:	2104      	movs	r1, #4
 8005806:	4887      	ldr	r0, [pc, #540]	@ (8005a24 <main+0xa94>)
 8005808:	f010 ff40 	bl	801668c <HAL_TIM_PWM_Start>
  	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800580c:	2108      	movs	r1, #8
 800580e:	4885      	ldr	r0, [pc, #532]	@ (8005a24 <main+0xa94>)
 8005810:	f010 ff3c 	bl	801668c <HAL_TIM_PWM_Start>
  	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8005814:	210c      	movs	r1, #12
 8005816:	4883      	ldr	r0, [pc, #524]	@ (8005a24 <main+0xa94>)
 8005818:	f010 ff38 	bl	801668c <HAL_TIM_PWM_Start>


  	RGB_LED_For_BAT(MYDRON.batterysize);
 800581c:	4b82      	ldr	r3, [pc, #520]	@ (8005a28 <main+0xa98>)
 800581e:	881b      	ldrh	r3, [r3, #0]
 8005820:	b2db      	uxtb	r3, r3
 8005822:	4618      	mov	r0, r3
 8005824:	f001 feb4 	bl	8007590 <RGB_LED_For_BAT>
  	if(MYDRON.dron_status.Battery == DRON_BATTERY_RUN_OUT)
 8005828:	4b7f      	ldr	r3, [pc, #508]	@ (8005a28 <main+0xa98>)
 800582a:	8a9b      	ldrh	r3, [r3, #20]
 800582c:	2b07      	cmp	r3, #7
 800582e:	d107      	bne.n	8005840 <main+0x8b0>
  	{
  		LED_R_1;
 8005830:	2201      	movs	r2, #1
 8005832:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005836:	4873      	ldr	r0, [pc, #460]	@ (8005a04 <main+0xa74>)
 8005838:	f008 ffdc 	bl	800e7f4 <HAL_GPIO_WritePin>
  		while(1){
 800583c:	bf00      	nop
 800583e:	e7fd      	b.n	800583c <main+0x8ac>

  		}
  	}
  	if(MYDRON.dron_status.Battery == DRON_BATTERY_CRIT_VAL){
 8005840:	4b79      	ldr	r3, [pc, #484]	@ (8005a28 <main+0xa98>)
 8005842:	8a9b      	ldrh	r3, [r3, #20]
 8005844:	2b09      	cmp	r3, #9
 8005846:	d107      	bne.n	8005858 <main+0x8c8>
  		LED_R_1;
 8005848:	2201      	movs	r2, #1
 800584a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800584e:	486d      	ldr	r0, [pc, #436]	@ (8005a04 <main+0xa74>)
 8005850:	f008 ffd0 	bl	800e7f4 <HAL_GPIO_WritePin>
  		while(1){
 8005854:	bf00      	nop
 8005856:	e7fd      	b.n	8005854 <main+0x8c4>
  		}
  	}


  /////////////////////////////// uSD
	SD_enable_Flag = HAL_GPIO_ReadPin(uSD_Detection_GPIO_Port, uSD_Detection_Pin);// jezeli karta SD jest wlozona, pin CardDetect jest zwierany do masy
 8005858:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800585c:	4869      	ldr	r0, [pc, #420]	@ (8005a04 <main+0xa74>)
 800585e:	f008 ffb1 	bl	800e7c4 <HAL_GPIO_ReadPin>
 8005862:	4603      	mov	r3, r0
 8005864:	461a      	mov	r2, r3
 8005866:	4b71      	ldr	r3, [pc, #452]	@ (8005a2c <main+0xa9c>)
 8005868:	701a      	strb	r2, [r3, #0]

	if(SD_enable_Flag == 1){
 800586a:	4b70      	ldr	r3, [pc, #448]	@ (8005a2c <main+0xa9c>)
 800586c:	781b      	ldrb	r3, [r3, #0]
 800586e:	2b01      	cmp	r3, #1
 8005870:	d103      	bne.n	800587a <main+0x8ea>
		SD_enable_Flag = 0;
 8005872:	4b6e      	ldr	r3, [pc, #440]	@ (8005a2c <main+0xa9c>)
 8005874:	2200      	movs	r2, #0
 8005876:	701a      	strb	r2, [r3, #0]
 8005878:	e002      	b.n	8005880 <main+0x8f0>
	}
	else{
		SD_enable_Flag = 1;
 800587a:	4b6c      	ldr	r3, [pc, #432]	@ (8005a2c <main+0xa9c>)
 800587c:	2201      	movs	r2, #1
 800587e:	701a      	strb	r2, [r3, #0]
	}

	if(SD_enable_Flag == 1){
 8005880:	4b6a      	ldr	r3, [pc, #424]	@ (8005a2c <main+0xa9c>)
 8005882:	781b      	ldrb	r3, [r3, #0]
 8005884:	2b01      	cmp	r3, #1
 8005886:	d15f      	bne.n	8005948 <main+0x9b8>
		LED_uSD_1;
 8005888:	2201      	movs	r2, #1
 800588a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800588e:	4860      	ldr	r0, [pc, #384]	@ (8005a10 <main+0xa80>)
 8005890:	f008 ffb0 	bl	800e7f4 <HAL_GPIO_WritePin>
		fresult = f_mount(&fs, "/", 1);
 8005894:	2201      	movs	r2, #1
 8005896:	4966      	ldr	r1, [pc, #408]	@ (8005a30 <main+0xaa0>)
 8005898:	4866      	ldr	r0, [pc, #408]	@ (8005a34 <main+0xaa4>)
 800589a:	f017 fe23 	bl	801d4e4 <f_mount>
 800589e:	4603      	mov	r3, r0
 80058a0:	461a      	mov	r2, r3
 80058a2:	4b65      	ldr	r3, [pc, #404]	@ (8005a38 <main+0xaa8>)
 80058a4:	701a      	strb	r2, [r3, #0]
		fresult = f_unlink("/file.txt");//skasowanie poprzedniego pliku
 80058a6:	4865      	ldr	r0, [pc, #404]	@ (8005a3c <main+0xaac>)
 80058a8:	f018 fa66 	bl	801dd78 <f_unlink>
 80058ac:	4603      	mov	r3, r0
 80058ae:	461a      	mov	r2, r3
 80058b0:	4b61      	ldr	r3, [pc, #388]	@ (8005a38 <main+0xaa8>)
 80058b2:	701a      	strb	r2, [r3, #0]
		fresult = f_mount(&fs, "/", 1);
 80058b4:	2201      	movs	r2, #1
 80058b6:	495e      	ldr	r1, [pc, #376]	@ (8005a30 <main+0xaa0>)
 80058b8:	485e      	ldr	r0, [pc, #376]	@ (8005a34 <main+0xaa4>)
 80058ba:	f017 fe13 	bl	801d4e4 <f_mount>
 80058be:	4603      	mov	r3, r0
 80058c0:	461a      	mov	r2, r3
 80058c2:	4b5d      	ldr	r3, [pc, #372]	@ (8005a38 <main+0xaa8>)
 80058c4:	701a      	strb	r2, [r3, #0]
		fresult = f_open(&fil, "file.txt", FA_CREATE_ALWAYS | FA_WRITE);// utwozenie nowego pliku
 80058c6:	220a      	movs	r2, #10
 80058c8:	495d      	ldr	r1, [pc, #372]	@ (8005a40 <main+0xab0>)
 80058ca:	485e      	ldr	r0, [pc, #376]	@ (8005a44 <main+0xab4>)
 80058cc:	f017 fe50 	bl	801d570 <f_open>
 80058d0:	4603      	mov	r3, r0
 80058d2:	461a      	mov	r2, r3
 80058d4:	4b58      	ldr	r3, [pc, #352]	@ (8005a38 <main+0xaa8>)
 80058d6:	701a      	strb	r2, [r3, #0]
		LED_uSD_0;
 80058d8:	2200      	movs	r2, #0
 80058da:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80058de:	484c      	ldr	r0, [pc, #304]	@ (8005a10 <main+0xa80>)
 80058e0:	f008 ff88 	bl	800e7f4 <HAL_GPIO_WritePin>

		LED_uSD_1;
 80058e4:	2201      	movs	r2, #1
 80058e6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80058ea:	4849      	ldr	r0, [pc, #292]	@ (8005a10 <main+0xa80>)
 80058ec:	f008 ff82 	bl	800e7f4 <HAL_GPIO_WritePin>
		for(int i = 0; i < 129000; i++){
 80058f0:	2300      	movs	r3, #0
 80058f2:	61bb      	str	r3, [r7, #24]
 80058f4:	e007      	b.n	8005906 <main+0x976>
			DataToSendBuffer[i] = 49;
 80058f6:	4a54      	ldr	r2, [pc, #336]	@ (8005a48 <main+0xab8>)
 80058f8:	69bb      	ldr	r3, [r7, #24]
 80058fa:	4413      	add	r3, r2
 80058fc:	2231      	movs	r2, #49	@ 0x31
 80058fe:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < 129000; i++){
 8005900:	69bb      	ldr	r3, [r7, #24]
 8005902:	3301      	adds	r3, #1
 8005904:	61bb      	str	r3, [r7, #24]
 8005906:	69bb      	ldr	r3, [r7, #24]
 8005908:	4a50      	ldr	r2, [pc, #320]	@ (8005a4c <main+0xabc>)
 800590a:	4293      	cmp	r3, r2
 800590c:	ddf3      	ble.n	80058f6 <main+0x966>
		}
		fresult = f_write(&fil, DataToSendBuffer, 129, &bw);//64000
 800590e:	4b50      	ldr	r3, [pc, #320]	@ (8005a50 <main+0xac0>)
 8005910:	2281      	movs	r2, #129	@ 0x81
 8005912:	494d      	ldr	r1, [pc, #308]	@ (8005a48 <main+0xab8>)
 8005914:	484b      	ldr	r0, [pc, #300]	@ (8005a44 <main+0xab4>)
 8005916:	f017 fff3 	bl	801d900 <f_write>
 800591a:	4603      	mov	r3, r0
 800591c:	461a      	mov	r2, r3
 800591e:	4b46      	ldr	r3, [pc, #280]	@ (8005a38 <main+0xaa8>)
 8005920:	701a      	strb	r2, [r3, #0]
		fresult = f_close(&fil);
 8005922:	4848      	ldr	r0, [pc, #288]	@ (8005a44 <main+0xab4>)
 8005924:	f018 f9fe 	bl	801dd24 <f_close>
 8005928:	4603      	mov	r3, r0
 800592a:	461a      	mov	r2, r3
 800592c:	4b42      	ldr	r3, [pc, #264]	@ (8005a38 <main+0xaa8>)
 800592e:	701a      	strb	r2, [r3, #0]

		if(fresult != FR_OK){
 8005930:	4b41      	ldr	r3, [pc, #260]	@ (8005a38 <main+0xaa8>)
 8005932:	781b      	ldrb	r3, [r3, #0]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d001      	beq.n	800593c <main+0x9ac>
			while(1){
 8005938:	bf00      	nop
 800593a:	e7fd      	b.n	8005938 <main+0x9a8>

			}
		}
		LED_uSD_0;
 800593c:	2200      	movs	r2, #0
 800593e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005942:	4833      	ldr	r0, [pc, #204]	@ (8005a10 <main+0xa80>)
 8005944:	f008 ff56 	bl	800e7f4 <HAL_GPIO_WritePin>
	}

	/////////////////////////////// MPU6050
		LED_5_1;
 8005948:	2201      	movs	r2, #1
 800594a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800594e:	482e      	ldr	r0, [pc, #184]	@ (8005a08 <main+0xa78>)
 8005950:	f008 ff50 	bl	800e7f4 <HAL_GPIO_WritePin>
		if(MPU6050_INIT(&hi2c5) == 0){
 8005954:	483f      	ldr	r0, [pc, #252]	@ (8005a54 <main+0xac4>)
 8005956:	f7fb fc5b 	bl	8001210 <MPU6050_INIT>
 800595a:	4603      	mov	r3, r0
 800595c:	2b00      	cmp	r3, #0
 800595e:	d107      	bne.n	8005970 <main+0x9e0>
			LED_R_1;
 8005960:	2201      	movs	r2, #1
 8005962:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005966:	4827      	ldr	r0, [pc, #156]	@ (8005a04 <main+0xa74>)
 8005968:	f008 ff44 	bl	800e7f4 <HAL_GPIO_WritePin>
			while(1){
 800596c:	bf00      	nop
 800596e:	e7fd      	b.n	800596c <main+0x9dc>
			}
		}
		LED_Y_1;
 8005970:	2201      	movs	r2, #1
 8005972:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005976:	4823      	ldr	r0, [pc, #140]	@ (8005a04 <main+0xa74>)
 8005978:	f008 ff3c 	bl	800e7f4 <HAL_GPIO_WritePin>
		MPU6050_CALIBRATION(&accelx_cal, &accely_cal, &accelz_cal, &gyrox_cal, &gyroy_cal, &gyroz_cal, Gyr_Scale, Acc_Scale);
 800597c:	eddf 7a36 	vldr	s15, [pc, #216]	@ 8005a58 <main+0xac8>
 8005980:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 8005a5c <main+0xacc>
 8005984:	4b36      	ldr	r3, [pc, #216]	@ (8005a60 <main+0xad0>)
 8005986:	9301      	str	r3, [sp, #4]
 8005988:	4b36      	ldr	r3, [pc, #216]	@ (8005a64 <main+0xad4>)
 800598a:	9300      	str	r3, [sp, #0]
 800598c:	eef0 0a47 	vmov.f32	s1, s14
 8005990:	eeb0 0a67 	vmov.f32	s0, s15
 8005994:	4b34      	ldr	r3, [pc, #208]	@ (8005a68 <main+0xad8>)
 8005996:	4a35      	ldr	r2, [pc, #212]	@ (8005a6c <main+0xadc>)
 8005998:	4935      	ldr	r1, [pc, #212]	@ (8005a70 <main+0xae0>)
 800599a:	4836      	ldr	r0, [pc, #216]	@ (8005a74 <main+0xae4>)
 800599c:	f7fb fd02 	bl	80013a4 <MPU6050_CALIBRATION>
		LED_Y_0;
 80059a0:	2200      	movs	r2, #0
 80059a2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80059a6:	4817      	ldr	r0, [pc, #92]	@ (8005a04 <main+0xa74>)
 80059a8:	f008 ff24 	bl	800e7f4 <HAL_GPIO_WritePin>

	/////////////////////////////// BMP180
		if(BMP180_init(&hi2c5) == 0){
 80059ac:	4829      	ldr	r0, [pc, #164]	@ (8005a54 <main+0xac4>)
 80059ae:	f7fa fe8f 	bl	80006d0 <BMP180_init>
 80059b2:	4603      	mov	r3, r0
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d107      	bne.n	80059c8 <main+0xa38>
			LED_R_1;
 80059b8:	2201      	movs	r2, #1
 80059ba:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80059be:	4811      	ldr	r0, [pc, #68]	@ (8005a04 <main+0xa74>)
 80059c0:	f008 ff18 	bl	800e7f4 <HAL_GPIO_WritePin>
			while(1){
 80059c4:	bf00      	nop
 80059c6:	e7fd      	b.n	80059c4 <main+0xa34>
			}
		}
		LED_Y_1;
 80059c8:	2201      	movs	r2, #1
 80059ca:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80059ce:	480d      	ldr	r0, [pc, #52]	@ (8005a04 <main+0xa74>)
 80059d0:	f008 ff10 	bl	800e7f4 <HAL_GPIO_WritePin>
		BMP180_CALIBRATION(&startpres);
 80059d4:	4828      	ldr	r0, [pc, #160]	@ (8005a78 <main+0xae8>)
 80059d6:	f7fb f9cd 	bl	8000d74 <BMP180_CALIBRATION>
		LED_Y_0;
 80059da:	2200      	movs	r2, #0
 80059dc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80059e0:	4808      	ldr	r0, [pc, #32]	@ (8005a04 <main+0xa74>)
 80059e2:	f008 ff07 	bl	800e7f4 <HAL_GPIO_WritePin>
	/////////////////////////////// HMC5883L
		if(HMC5883L_Init(&hi2c5) == 0){
 80059e6:	481b      	ldr	r0, [pc, #108]	@ (8005a54 <main+0xac4>)
 80059e8:	f7fb faf6 	bl	8000fd8 <HMC5883L_Init>
 80059ec:	4603      	mov	r3, r0
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d144      	bne.n	8005a7c <main+0xaec>
			LED_R_1;
 80059f2:	2201      	movs	r2, #1
 80059f4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80059f8:	4802      	ldr	r0, [pc, #8]	@ (8005a04 <main+0xa74>)
 80059fa:	f008 fefb 	bl	800e7f4 <HAL_GPIO_WritePin>
			while(1){
 80059fe:	bf00      	nop
 8005a00:	e7fd      	b.n	80059fe <main+0xa6e>
 8005a02:	bf00      	nop
 8005a04:	58020400 	.word	0x58020400
 8005a08:	58020000 	.word	0x58020000
 8005a0c:	58021000 	.word	0x58021000
 8005a10:	58020c00 	.word	0x58020c00
 8005a14:	000001a4 	.word	0x000001a4
 8005a18:	24000eb0 	.word	0x24000eb0
 8005a1c:	24000468 	.word	0x24000468
 8005a20:	240000b0 	.word	0x240000b0
 8005a24:	24000384 	.word	0x24000384
 8005a28:	00000180 	.word	0x00000180
 8005a2c:	000041ec 	.word	0x000041ec
 8005a30:	0801e9d0 	.word	0x0801e9d0
 8005a34:	24000eb4 	.word	0x24000eb4
 8005a38:	24001eec 	.word	0x24001eec
 8005a3c:	0801e9d4 	.word	0x0801e9d4
 8005a40:	0801e9e0 	.word	0x0801e9e0
 8005a44:	24001ef0 	.word	0x24001ef0
 8005a48:	24002f28 	.word	0x24002f28
 8005a4c:	0001f7e7 	.word	0x0001f7e7
 8005a50:	24002f24 	.word	0x24002f24
 8005a54:	2400019c 	.word	0x2400019c
 8005a58:	42830000 	.word	0x42830000
 8005a5c:	46000000 	.word	0x46000000
 8005a60:	00000044 	.word	0x00000044
 8005a64:	00000040 	.word	0x00000040
 8005a68:	0000003c 	.word	0x0000003c
 8005a6c:	00000038 	.word	0x00000038
 8005a70:	00000034 	.word	0x00000034
 8005a74:	00000030 	.word	0x00000030
 8005a78:	000000ec 	.word	0x000000ec
			}
		}
		LED_Y_1;
 8005a7c:	2201      	movs	r2, #1
 8005a7e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005a82:	488c      	ldr	r0, [pc, #560]	@ (8005cb4 <main+0xd24>)
 8005a84:	f008 feb6 	bl	800e7f4 <HAL_GPIO_WritePin>
		Mag_Offset_val = HMC5883L_Calibration();
 8005a88:	f7fb fb8c 	bl	80011a4 <HMC5883L_Calibration>
 8005a8c:	4603      	mov	r3, r0
 8005a8e:	461a      	mov	r2, r3
 8005a90:	4b89      	ldr	r3, [pc, #548]	@ (8005cb8 <main+0xd28>)
 8005a92:	801a      	strh	r2, [r3, #0]
		LED_Y_0;
 8005a94:	2200      	movs	r2, #0
 8005a96:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005a9a:	4886      	ldr	r0, [pc, #536]	@ (8005cb4 <main+0xd24>)
 8005a9c:	f008 feaa 	bl	800e7f4 <HAL_GPIO_WritePin>

		LED_5_0;
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005aa6:	4885      	ldr	r0, [pc, #532]	@ (8005cbc <main+0xd2c>)
 8005aa8:	f008 fea4 	bl	800e7f4 <HAL_GPIO_WritePin>



		MYDRON.dron_status.Connection = DRON_CONNECTED;
 8005aac:	4b84      	ldr	r3, [pc, #528]	@ (8005cc0 <main+0xd30>)
 8005aae:	2201      	movs	r2, #1
 8005ab0:	825a      	strh	r2, [r3, #18]
		MYDRON.dron_status.position = DRON_POSITION_OK;
 8005ab2:	4b83      	ldr	r3, [pc, #524]	@ (8005cc0 <main+0xd30>)
 8005ab4:	220c      	movs	r2, #12
 8005ab6:	835a      	strh	r2, [r3, #26]


		MYDRON.THRUST = 0;
 8005ab8:	4b81      	ldr	r3, [pc, #516]	@ (8005cc0 <main+0xd30>)
 8005aba:	2200      	movs	r2, #0
 8005abc:	805a      	strh	r2, [r3, #2]
		MYDRON.PITCH = 0;
 8005abe:	4b80      	ldr	r3, [pc, #512]	@ (8005cc0 <main+0xd30>)
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	809a      	strh	r2, [r3, #4]
		MYDRON.ROOL = 0;
 8005ac4:	4b7e      	ldr	r3, [pc, #504]	@ (8005cc0 <main+0xd30>)
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	80da      	strh	r2, [r3, #6]
		MYDRON.YAW = 0;
 8005aca:	4b7d      	ldr	r3, [pc, #500]	@ (8005cc0 <main+0xd30>)
 8005acc:	2200      	movs	r2, #0
 8005ace:	811a      	strh	r2, [r3, #8]



	/////////////////////////////// nRF24
		LED_6_1;
 8005ad0:	2201      	movs	r2, #1
 8005ad2:	2108      	movs	r1, #8
 8005ad4:	487b      	ldr	r0, [pc, #492]	@ (8005cc4 <main+0xd34>)
 8005ad6:	f008 fe8d 	bl	800e7f4 <HAL_GPIO_WritePin>
		nRF24_Init(&hspi6);
 8005ada:	487b      	ldr	r0, [pc, #492]	@ (8005cc8 <main+0xd38>)
 8005adc:	f7fc fdac 	bl	8002638 <nRF24_Init>
		nRF24_SetRXAddress(0, o);
 8005ae0:	f107 0308 	add.w	r3, r7, #8
 8005ae4:	4619      	mov	r1, r3
 8005ae6:	2000      	movs	r0, #0
 8005ae8:	f7fc fc4b 	bl	8002382 <nRF24_SetRXAddress>
		nRF24_SetTXAddress(n);
 8005aec:	1d3b      	adds	r3, r7, #4
 8005aee:	4618      	mov	r0, r3
 8005af0:	f7fc fc80 	bl	80023f4 <nRF24_SetTXAddress>
		nRF24_Inittest();
 8005af4:	f7fc fdf4 	bl	80026e0 <nRF24_Inittest>
		nRF24_TX_Mode();
 8005af8:	f7fc fa6e 	bl	8001fd8 <nRF24_TX_Mode>


		for(int i = 0; i < 32; i++){
 8005afc:	2300      	movs	r3, #0
 8005afe:	617b      	str	r3, [r7, #20]
 8005b00:	e007      	b.n	8005b12 <main+0xb82>
			Txcode[i] = 0;
 8005b02:	4a72      	ldr	r2, [pc, #456]	@ (8005ccc <main+0xd3c>)
 8005b04:	697b      	ldr	r3, [r7, #20]
 8005b06:	4413      	add	r3, r2
 8005b08:	2200      	movs	r2, #0
 8005b0a:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < 32; i++){
 8005b0c:	697b      	ldr	r3, [r7, #20]
 8005b0e:	3301      	adds	r3, #1
 8005b10:	617b      	str	r3, [r7, #20]
 8005b12:	697b      	ldr	r3, [r7, #20]
 8005b14:	2b1f      	cmp	r3, #31
 8005b16:	ddf4      	ble.n	8005b02 <main+0xb72>
		}
		Txcode[22] = 'd';
 8005b18:	4b6c      	ldr	r3, [pc, #432]	@ (8005ccc <main+0xd3c>)
 8005b1a:	2264      	movs	r2, #100	@ 0x64
 8005b1c:	759a      	strb	r2, [r3, #22]
		Txcode[23] = 'r';
 8005b1e:	4b6b      	ldr	r3, [pc, #428]	@ (8005ccc <main+0xd3c>)
 8005b20:	2272      	movs	r2, #114	@ 0x72
 8005b22:	75da      	strb	r2, [r3, #23]
		Txcode[24] = 'o';
 8005b24:	4b69      	ldr	r3, [pc, #420]	@ (8005ccc <main+0xd3c>)
 8005b26:	226f      	movs	r2, #111	@ 0x6f
 8005b28:	761a      	strb	r2, [r3, #24]
		Txcode[25] = 'n';
 8005b2a:	4b68      	ldr	r3, [pc, #416]	@ (8005ccc <main+0xd3c>)
 8005b2c:	226e      	movs	r2, #110	@ 0x6e
 8005b2e:	765a      	strb	r2, [r3, #25]
		Txcode[26] = '2';
 8005b30:	4b66      	ldr	r3, [pc, #408]	@ (8005ccc <main+0xd3c>)
 8005b32:	2232      	movs	r2, #50	@ 0x32
 8005b34:	769a      	strb	r2, [r3, #26]
		Txcode[27] = 'c';
 8005b36:	4b65      	ldr	r3, [pc, #404]	@ (8005ccc <main+0xd3c>)
 8005b38:	2263      	movs	r2, #99	@ 0x63
 8005b3a:	76da      	strb	r2, [r3, #27]
		Txcode[28] = '1';
 8005b3c:	4b63      	ldr	r3, [pc, #396]	@ (8005ccc <main+0xd3c>)
 8005b3e:	2231      	movs	r2, #49	@ 0x31
 8005b40:	771a      	strb	r2, [r3, #28]
		Txcode[29] = 'z';
 8005b42:	4b62      	ldr	r3, [pc, #392]	@ (8005ccc <main+0xd3c>)
 8005b44:	227a      	movs	r2, #122	@ 0x7a
 8005b46:	775a      	strb	r2, [r3, #29]
		Txcode[30] = 'a';
 8005b48:	4b60      	ldr	r3, [pc, #384]	@ (8005ccc <main+0xd3c>)
 8005b4a:	2261      	movs	r2, #97	@ 0x61
 8005b4c:	779a      	strb	r2, [r3, #30]
		Txcode[31] = '7';
 8005b4e:	4b5f      	ldr	r3, [pc, #380]	@ (8005ccc <main+0xd3c>)
 8005b50:	2237      	movs	r2, #55	@ 0x37
 8005b52:	77da      	strb	r2, [r3, #31]



		nRF24_WriteTXPayload(Txcode);
 8005b54:	485d      	ldr	r0, [pc, #372]	@ (8005ccc <main+0xd3c>)
 8005b56:	f7fc fcfd 	bl	8002554 <nRF24_WriteTXPayload>
		nRF24_WaitTX();
 8005b5a:	f7fc fd09 	bl	8002570 <nRF24_WaitTX>
		nRF24_RX_Mode();
 8005b5e:	f7fc fa0f 	bl	8001f80 <nRF24_RX_Mode>

		uint8_t cunter = 0;
 8005b62:	2300      	movs	r3, #0
 8005b64:	74fb      	strb	r3, [r7, #19]

		while(nRF24_IsBitSetInFifoStatus(NRF24_RX_EMPTY) == 1){
 8005b66:	e022      	b.n	8005bae <main+0xc1e>
			LED_G_1;
 8005b68:	2201      	movs	r2, #1
 8005b6a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005b6e:	4855      	ldr	r0, [pc, #340]	@ (8005cc4 <main+0xd34>)
 8005b70:	f008 fe40 	bl	800e7f4 <HAL_GPIO_WritePin>
			LED_Y_1;
 8005b74:	2201      	movs	r2, #1
 8005b76:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005b7a:	484e      	ldr	r0, [pc, #312]	@ (8005cb4 <main+0xd24>)
 8005b7c:	f008 fe3a 	bl	800e7f4 <HAL_GPIO_WritePin>
			HAL_Delay(1);
 8005b80:	2001      	movs	r0, #1
 8005b82:	f003 fcfb 	bl	800957c <HAL_Delay>
			LED_G_0;
 8005b86:	2200      	movs	r2, #0
 8005b88:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005b8c:	484d      	ldr	r0, [pc, #308]	@ (8005cc4 <main+0xd34>)
 8005b8e:	f008 fe31 	bl	800e7f4 <HAL_GPIO_WritePin>
			LED_Y_0;
 8005b92:	2200      	movs	r2, #0
 8005b94:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005b98:	4846      	ldr	r0, [pc, #280]	@ (8005cb4 <main+0xd24>)
 8005b9a:	f008 fe2b 	bl	800e7f4 <HAL_GPIO_WritePin>

			cunter++;
 8005b9e:	7cfb      	ldrb	r3, [r7, #19]
 8005ba0:	3301      	adds	r3, #1
 8005ba2:	74fb      	strb	r3, [r7, #19]
			if(cunter == 200){
 8005ba4:	7cfb      	ldrb	r3, [r7, #19]
 8005ba6:	2bc8      	cmp	r3, #200	@ 0xc8
 8005ba8:	d101      	bne.n	8005bae <main+0xc1e>
				NVIC_SystemReset();
 8005baa:	f7ff f9db 	bl	8004f64 <__NVIC_SystemReset>
		while(nRF24_IsBitSetInFifoStatus(NRF24_RX_EMPTY) == 1){
 8005bae:	2000      	movs	r0, #0
 8005bb0:	f7fc fd22 	bl	80025f8 <nRF24_IsBitSetInFifoStatus>
 8005bb4:	4603      	mov	r3, r0
 8005bb6:	2b01      	cmp	r3, #1
 8005bb8:	d0d6      	beq.n	8005b68 <main+0xbd8>
			}
		}

		nRF24_ReadRXPaylaod(RxData);
 8005bba:	4845      	ldr	r0, [pc, #276]	@ (8005cd0 <main+0xd40>)
 8005bbc:	f7fc fd00 	bl	80025c0 <nRF24_ReadRXPaylaod>
		LED_6_0;
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	2108      	movs	r1, #8
 8005bc4:	483f      	ldr	r0, [pc, #252]	@ (8005cc4 <main+0xd34>)
 8005bc6:	f008 fe15 	bl	800e7f4 <HAL_GPIO_WritePin>
		for(int i = 12; i < 22; i++){
 8005bca:	230c      	movs	r3, #12
 8005bcc:	60fb      	str	r3, [r7, #12]
 8005bce:	e00b      	b.n	8005be8 <main+0xc58>
			Rxcode[i] = RxData[i];
 8005bd0:	4a3f      	ldr	r2, [pc, #252]	@ (8005cd0 <main+0xd40>)
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	4413      	add	r3, r2
 8005bd6:	7819      	ldrb	r1, [r3, #0]
 8005bd8:	4a3e      	ldr	r2, [pc, #248]	@ (8005cd4 <main+0xd44>)
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	4413      	add	r3, r2
 8005bde:	460a      	mov	r2, r1
 8005be0:	701a      	strb	r2, [r3, #0]
		for(int i = 12; i < 22; i++){
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	3301      	adds	r3, #1
 8005be6:	60fb      	str	r3, [r7, #12]
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	2b15      	cmp	r3, #21
 8005bec:	ddf0      	ble.n	8005bd0 <main+0xc40>
		}
	///////////////////////////////////////////////////////////////////////
		ESC_INT(&htim3);
 8005bee:	483a      	ldr	r0, [pc, #232]	@ (8005cd8 <main+0xd48>)
 8005bf0:	f7fb f9a8 	bl	8000f44 <ESC_INT>

		LED_7_1;
 8005bf4:	2201      	movs	r2, #1
 8005bf6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005bfa:	4830      	ldr	r0, [pc, #192]	@ (8005cbc <main+0xd2c>)
 8005bfc:	f008 fdfa 	bl	800e7f4 <HAL_GPIO_WritePin>
		HAL_UART_Receive_IT(&huart1, &Received, 1);
 8005c00:	2201      	movs	r2, #1
 8005c02:	4936      	ldr	r1, [pc, #216]	@ (8005cdc <main+0xd4c>)
 8005c04:	4836      	ldr	r0, [pc, #216]	@ (8005ce0 <main+0xd50>)
 8005c06:	f012 fabf 	bl	8018188 <HAL_UART_Receive_IT>
		LED_7_0;
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005c10:	482a      	ldr	r0, [pc, #168]	@ (8005cbc <main+0xd2c>)
 8005c12:	f008 fdef 	bl	800e7f4 <HAL_GPIO_WritePin>

		HAL_TIM_Base_Start_IT(&htim2); // przerwanie co 1 ms
 8005c16:	4833      	ldr	r0, [pc, #204]	@ (8005ce4 <main+0xd54>)
 8005c18:	f010 fc5a 	bl	80164d0 <HAL_TIM_Base_Start_IT>



	  	RGB_LED_For_BAT(MYDRON.batterysize);
 8005c1c:	4b28      	ldr	r3, [pc, #160]	@ (8005cc0 <main+0xd30>)
 8005c1e:	881b      	ldrh	r3, [r3, #0]
 8005c20:	b2db      	uxtb	r3, r3
 8005c22:	4618      	mov	r0, r3
 8005c24:	f001 fcb4 	bl	8007590 <RGB_LED_For_BAT>


	  	if(MYDRON.dron_status.Battery == DRON_BATTERY_RUN_OUT)
 8005c28:	4b25      	ldr	r3, [pc, #148]	@ (8005cc0 <main+0xd30>)
 8005c2a:	8a9b      	ldrh	r3, [r3, #20]
 8005c2c:	2b07      	cmp	r3, #7
 8005c2e:	d107      	bne.n	8005c40 <main+0xcb0>
	  	{
	  		LED_R_1;
 8005c30:	2201      	movs	r2, #1
 8005c32:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005c36:	481f      	ldr	r0, [pc, #124]	@ (8005cb4 <main+0xd24>)
 8005c38:	f008 fddc 	bl	800e7f4 <HAL_GPIO_WritePin>
	  		while(1){
 8005c3c:	bf00      	nop
 8005c3e:	e7fd      	b.n	8005c3c <main+0xcac>
	  		}
	  	}



	  	if(MYDRON.dron_status.Battery == DRON_BATTERY_CRIT_VAL){
 8005c40:	4b1f      	ldr	r3, [pc, #124]	@ (8005cc0 <main+0xd30>)
 8005c42:	8a9b      	ldrh	r3, [r3, #20]
 8005c44:	2b09      	cmp	r3, #9
 8005c46:	d107      	bne.n	8005c58 <main+0xcc8>
	  		LED_R_1;
 8005c48:	2201      	movs	r2, #1
 8005c4a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005c4e:	4819      	ldr	r0, [pc, #100]	@ (8005cb4 <main+0xd24>)
 8005c50:	f008 fdd0 	bl	800e7f4 <HAL_GPIO_WritePin>
	  		while(1){
 8005c54:	bf00      	nop
 8005c56:	e7fd      	b.n	8005c54 <main+0xcc4>
	  		}
	  	}



		STARTUP = 0;
 8005c58:	4b23      	ldr	r3, [pc, #140]	@ (8005ce8 <main+0xd58>)
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	701a      	strb	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(MYDRON.dron_status.Battery == DRON_BATTERY_RUN_OUT){
 8005c5e:	4b18      	ldr	r3, [pc, #96]	@ (8005cc0 <main+0xd30>)
 8005c60:	8a9b      	ldrh	r3, [r3, #20]
 8005c62:	2b07      	cmp	r3, #7
 8005c64:	d10a      	bne.n	8005c7c <main+0xcec>
	  			LED_R_1;
 8005c66:	2201      	movs	r2, #1
 8005c68:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005c6c:	4811      	ldr	r0, [pc, #68]	@ (8005cb4 <main+0xd24>)
 8005c6e:	f008 fdc1 	bl	800e7f4 <HAL_GPIO_WritePin>
	  			thrust_limit = MYDRON.THRUST;
 8005c72:	4b13      	ldr	r3, [pc, #76]	@ (8005cc0 <main+0xd30>)
 8005c74:	885b      	ldrh	r3, [r3, #2]
 8005c76:	b21a      	sxth	r2, r3
 8005c78:	4b1c      	ldr	r3, [pc, #112]	@ (8005cec <main+0xd5c>)
 8005c7a:	801a      	strh	r2, [r3, #0]
	  		}
	  		if(MYDRON.dron_status.Battery == DRON_BATTERY_OK){
 8005c7c:	4b10      	ldr	r3, [pc, #64]	@ (8005cc0 <main+0xd30>)
 8005c7e:	8a9b      	ldrh	r3, [r3, #20]
 8005c80:	2b08      	cmp	r3, #8
 8005c82:	d103      	bne.n	8005c8c <main+0xcfc>
	  			thrust_limit = 10000;
 8005c84:	4b19      	ldr	r3, [pc, #100]	@ (8005cec <main+0xd5c>)
 8005c86:	f242 7210 	movw	r2, #10000	@ 0x2710
 8005c8a:	801a      	strh	r2, [r3, #0]
	  		}
	  		if(MYDRON.dron_status.Battery == DRON_BATTERY_CRIT_VAL){
 8005c8c:	4b0c      	ldr	r3, [pc, #48]	@ (8005cc0 <main+0xd30>)
 8005c8e:	8a9b      	ldrh	r3, [r3, #20]
 8005c90:	2b09      	cmp	r3, #9
 8005c92:	d13a      	bne.n	8005d0a <main+0xd7a>
	  			ESC_POWER_1;
 8005c94:	2201      	movs	r2, #1
 8005c96:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005c9a:	4815      	ldr	r0, [pc, #84]	@ (8005cf0 <main+0xd60>)
 8005c9c:	f008 fdaa 	bl	800e7f4 <HAL_GPIO_WritePin>
	  			LED_R_1;
 8005ca0:	2201      	movs	r2, #1
 8005ca2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005ca6:	4803      	ldr	r0, [pc, #12]	@ (8005cb4 <main+0xd24>)
 8005ca8:	f008 fda4 	bl	800e7f4 <HAL_GPIO_WritePin>
	  			f_close(&fil);
 8005cac:	4811      	ldr	r0, [pc, #68]	@ (8005cf4 <main+0xd64>)
 8005cae:	f018 f839 	bl	801dd24 <f_close>
	  			while(MYDRON.dron_status.Battery == DRON_BATTERY_CRIT_VAL){
 8005cb2:	e026      	b.n	8005d02 <main+0xd72>
 8005cb4:	58020400 	.word	0x58020400
 8005cb8:	00000068 	.word	0x00000068
 8005cbc:	58020000 	.word	0x58020000
 8005cc0:	00000180 	.word	0x00000180
 8005cc4:	58021000 	.word	0x58021000
 8005cc8:	24000278 	.word	0x24000278
 8005ccc:	0000011c 	.word	0x0000011c
 8005cd0:	000000fc 	.word	0x000000fc
 8005cd4:	0000015c 	.word	0x0000015c
 8005cd8:	2400041c 	.word	0x2400041c
 8005cdc:	000041e0 	.word	0x000041e0
 8005ce0:	240004b4 	.word	0x240004b4
 8005ce4:	240003d0 	.word	0x240003d0
 8005ce8:	0000007c 	.word	0x0000007c
 8005cec:	00004066 	.word	0x00004066
 8005cf0:	58021800 	.word	0x58021800
 8005cf4:	24001ef0 	.word	0x24001ef0
	  				HAL_Delay(10);
 8005cf8:	200a      	movs	r0, #10
 8005cfa:	f003 fc3f 	bl	800957c <HAL_Delay>
	  				Get_batteryvalue();
 8005cfe:	f7fe fa3f 	bl	8004180 <Get_batteryvalue>
	  			while(MYDRON.dron_status.Battery == DRON_BATTERY_CRIT_VAL){
 8005d02:	4b61      	ldr	r3, [pc, #388]	@ (8005e88 <main+0xef8>)
 8005d04:	8a9b      	ldrh	r3, [r3, #20]
 8005d06:	2b09      	cmp	r3, #9
 8005d08:	d0f6      	beq.n	8005cf8 <main+0xd68>
	  			}
	  		}

	  		if(commandready == 1){
 8005d0a:	4b60      	ldr	r3, [pc, #384]	@ (8005e8c <main+0xefc>)
 8005d0c:	781b      	ldrb	r3, [r3, #0]
 8005d0e:	2b01      	cmp	r3, #1
 8005d10:	d159      	bne.n	8005dc6 <main+0xe36>
	  			LED_7_1;
 8005d12:	2201      	movs	r2, #1
 8005d14:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005d18:	485d      	ldr	r0, [pc, #372]	@ (8005e90 <main+0xf00>)
 8005d1a:	f008 fd6b 	bl	800e7f4 <HAL_GPIO_WritePin>
	  			interpretcommand();
 8005d1e:	f7fc fcfd 	bl	800271c <interpretcommand>
	  			executecommand(command, UASRT_PID_VAL);
 8005d22:	495c      	ldr	r1, [pc, #368]	@ (8005e94 <main+0xf04>)
 8005d24:	485c      	ldr	r0, [pc, #368]	@ (8005e98 <main+0xf08>)
 8005d26:	f7fc fd47 	bl	80027b8 <executecommand>
	  			LED_7_0;
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005d30:	4857      	ldr	r0, [pc, #348]	@ (8005e90 <main+0xf00>)
 8005d32:	f008 fd5f 	bl	800e7f4 <HAL_GPIO_WritePin>

	  			PID_FAC_Pitch[0] = p_pitchfactor;
 8005d36:	4b59      	ldr	r3, [pc, #356]	@ (8005e9c <main+0xf0c>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	4a59      	ldr	r2, [pc, #356]	@ (8005ea0 <main+0xf10>)
 8005d3c:	6013      	str	r3, [r2, #0]
	  			PID_FAC_Pitch[1] = i_pitchfactor;
 8005d3e:	4b59      	ldr	r3, [pc, #356]	@ (8005ea4 <main+0xf14>)
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	4a57      	ldr	r2, [pc, #348]	@ (8005ea0 <main+0xf10>)
 8005d44:	6053      	str	r3, [r2, #4]
	  			PID_FAC_Pitch[2] = d_pitchfactor;
 8005d46:	4b58      	ldr	r3, [pc, #352]	@ (8005ea8 <main+0xf18>)
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	4a55      	ldr	r2, [pc, #340]	@ (8005ea0 <main+0xf10>)
 8005d4c:	6093      	str	r3, [r2, #8]

	  			PID_FAC_Angular_Rate_Pitch[0] = p_angular_rate_pitchfactor;
 8005d4e:	4b57      	ldr	r3, [pc, #348]	@ (8005eac <main+0xf1c>)
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	4a57      	ldr	r2, [pc, #348]	@ (8005eb0 <main+0xf20>)
 8005d54:	6013      	str	r3, [r2, #0]
	  			PID_FAC_Angular_Rate_Pitch[1] = i_angular_rate_pitchfactor;
 8005d56:	4b57      	ldr	r3, [pc, #348]	@ (8005eb4 <main+0xf24>)
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4a55      	ldr	r2, [pc, #340]	@ (8005eb0 <main+0xf20>)
 8005d5c:	6053      	str	r3, [r2, #4]
	  			PID_FAC_Angular_Rate_Pitch[2] = d_angular_rate_pitchfactor;
 8005d5e:	4b56      	ldr	r3, [pc, #344]	@ (8005eb8 <main+0xf28>)
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	4a53      	ldr	r2, [pc, #332]	@ (8005eb0 <main+0xf20>)
 8005d64:	6093      	str	r3, [r2, #8]

	  			PID_FAC_Rool[0] = p_roolfactor;
 8005d66:	4b55      	ldr	r3, [pc, #340]	@ (8005ebc <main+0xf2c>)
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4a55      	ldr	r2, [pc, #340]	@ (8005ec0 <main+0xf30>)
 8005d6c:	6013      	str	r3, [r2, #0]
	  			PID_FAC_Rool[1] = i_roolfactor;
 8005d6e:	4b55      	ldr	r3, [pc, #340]	@ (8005ec4 <main+0xf34>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	4a53      	ldr	r2, [pc, #332]	@ (8005ec0 <main+0xf30>)
 8005d74:	6053      	str	r3, [r2, #4]
	  			PID_FAC_Rool[2] = d_roolfactor;
 8005d76:	4b54      	ldr	r3, [pc, #336]	@ (8005ec8 <main+0xf38>)
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	4a51      	ldr	r2, [pc, #324]	@ (8005ec0 <main+0xf30>)
 8005d7c:	6093      	str	r3, [r2, #8]

	  			PID_FAC_Angular_Rate_Rool[0] = p_angular_rate_roolfactor;
 8005d7e:	4b53      	ldr	r3, [pc, #332]	@ (8005ecc <main+0xf3c>)
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	4a53      	ldr	r2, [pc, #332]	@ (8005ed0 <main+0xf40>)
 8005d84:	6013      	str	r3, [r2, #0]
	  			PID_FAC_Angular_Rate_Rool[1] = i_angular_rate_roolfactor;
 8005d86:	4b53      	ldr	r3, [pc, #332]	@ (8005ed4 <main+0xf44>)
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	4a51      	ldr	r2, [pc, #324]	@ (8005ed0 <main+0xf40>)
 8005d8c:	6053      	str	r3, [r2, #4]
	  			PID_FAC_Angular_Rate_Rool[2] = d_angular_rate_roolfactor;
 8005d8e:	4b52      	ldr	r3, [pc, #328]	@ (8005ed8 <main+0xf48>)
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	4a4f      	ldr	r2, [pc, #316]	@ (8005ed0 <main+0xf40>)
 8005d94:	6093      	str	r3, [r2, #8]

	  			PID_FAC_Yaw[0] = p_yawfactor;
 8005d96:	4b51      	ldr	r3, [pc, #324]	@ (8005edc <main+0xf4c>)
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	4a51      	ldr	r2, [pc, #324]	@ (8005ee0 <main+0xf50>)
 8005d9c:	6013      	str	r3, [r2, #0]
	  			PID_FAC_Yaw[1] = i_yawfactor;
 8005d9e:	4b51      	ldr	r3, [pc, #324]	@ (8005ee4 <main+0xf54>)
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	4a4f      	ldr	r2, [pc, #316]	@ (8005ee0 <main+0xf50>)
 8005da4:	6053      	str	r3, [r2, #4]
	  			PID_FAC_Yaw[2] = d_yawfactor;
 8005da6:	4b50      	ldr	r3, [pc, #320]	@ (8005ee8 <main+0xf58>)
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	4a4d      	ldr	r2, [pc, #308]	@ (8005ee0 <main+0xf50>)
 8005dac:	6093      	str	r3, [r2, #8]

	  			PID_FAC_Angular_Rate_Yaw[0] = p_angular_rate_yawfactor;
 8005dae:	4b4f      	ldr	r3, [pc, #316]	@ (8005eec <main+0xf5c>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	4a4f      	ldr	r2, [pc, #316]	@ (8005ef0 <main+0xf60>)
 8005db4:	6013      	str	r3, [r2, #0]
	  			PID_FAC_Angular_Rate_Yaw[1] = i_angular_rate_yawfactor;
 8005db6:	4b4f      	ldr	r3, [pc, #316]	@ (8005ef4 <main+0xf64>)
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	4a4d      	ldr	r2, [pc, #308]	@ (8005ef0 <main+0xf60>)
 8005dbc:	6053      	str	r3, [r2, #4]
	  			PID_FAC_Angular_Rate_Yaw[2] = d_angular_rate_yawfactor;
 8005dbe:	4b4e      	ldr	r3, [pc, #312]	@ (8005ef8 <main+0xf68>)
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	4a4b      	ldr	r2, [pc, #300]	@ (8005ef0 <main+0xf60>)
 8005dc4:	6093      	str	r3, [r2, #8]
	  		}

	  		if((TIM_inte_SD == 1) && (fresult == FR_OK) && (SD_enable_Flag == 1)){// 1ms, 1KHz
 8005dc6:	4b4d      	ldr	r3, [pc, #308]	@ (8005efc <main+0xf6c>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	2b01      	cmp	r3, #1
 8005dcc:	d14d      	bne.n	8005e6a <main+0xeda>
 8005dce:	4b4c      	ldr	r3, [pc, #304]	@ (8005f00 <main+0xf70>)
 8005dd0:	781b      	ldrb	r3, [r3, #0]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d149      	bne.n	8005e6a <main+0xeda>
 8005dd6:	4b4b      	ldr	r3, [pc, #300]	@ (8005f04 <main+0xf74>)
 8005dd8:	781b      	ldrb	r3, [r3, #0]
 8005dda:	2b01      	cmp	r3, #1
 8005ddc:	d145      	bne.n	8005e6a <main+0xeda>
	  			TIM_inte_SD = 0;
 8005dde:	4b47      	ldr	r3, [pc, #284]	@ (8005efc <main+0xf6c>)
 8005de0:	2200      	movs	r2, #0
 8005de2:	601a      	str	r2, [r3, #0]

	  			uSD_Card_SendData_To_Buffer(Mainloop_Number);
 8005de4:	4b48      	ldr	r3, [pc, #288]	@ (8005f08 <main+0xf78>)
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	4618      	mov	r0, r3
 8005dea:	f001 fd67 	bl	80078bc <uSD_Card_SendData_To_Buffer>

	  			if(Mainloop_Number == 999){//zapisywanie karty raz na 1 sec
 8005dee:	4b46      	ldr	r3, [pc, #280]	@ (8005f08 <main+0xf78>)
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d12b      	bne.n	8005e52 <main+0xec2>
	  				SD_In_Use = 1;
 8005dfa:	4b44      	ldr	r3, [pc, #272]	@ (8005f0c <main+0xf7c>)
 8005dfc:	2201      	movs	r2, #1
 8005dfe:	601a      	str	r2, [r3, #0]
	  				LED_uSD_1;
 8005e00:	2201      	movs	r2, #1
 8005e02:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005e06:	4842      	ldr	r0, [pc, #264]	@ (8005f10 <main+0xf80>)
 8005e08:	f008 fcf4 	bl	800e7f4 <HAL_GPIO_WritePin>
	  				fresult = f_open(&fil, "file.txt", FA_OPEN_APPEND | FA_WRITE);
 8005e0c:	2232      	movs	r2, #50	@ 0x32
 8005e0e:	4941      	ldr	r1, [pc, #260]	@ (8005f14 <main+0xf84>)
 8005e10:	4841      	ldr	r0, [pc, #260]	@ (8005f18 <main+0xf88>)
 8005e12:	f017 fbad 	bl	801d570 <f_open>
 8005e16:	4603      	mov	r3, r0
 8005e18:	461a      	mov	r2, r3
 8005e1a:	4b39      	ldr	r3, [pc, #228]	@ (8005f00 <main+0xf70>)
 8005e1c:	701a      	strb	r2, [r3, #0]
	  				fresult = f_write(&fil, DataToSendBuffer, 129000, &bw);
 8005e1e:	4b3f      	ldr	r3, [pc, #252]	@ (8005f1c <main+0xf8c>)
 8005e20:	4a3f      	ldr	r2, [pc, #252]	@ (8005f20 <main+0xf90>)
 8005e22:	4940      	ldr	r1, [pc, #256]	@ (8005f24 <main+0xf94>)
 8005e24:	483c      	ldr	r0, [pc, #240]	@ (8005f18 <main+0xf88>)
 8005e26:	f017 fd6b 	bl	801d900 <f_write>
 8005e2a:	4603      	mov	r3, r0
 8005e2c:	461a      	mov	r2, r3
 8005e2e:	4b34      	ldr	r3, [pc, #208]	@ (8005f00 <main+0xf70>)
 8005e30:	701a      	strb	r2, [r3, #0]
	  				fresult = f_close(&fil);
 8005e32:	4839      	ldr	r0, [pc, #228]	@ (8005f18 <main+0xf88>)
 8005e34:	f017 ff76 	bl	801dd24 <f_close>
 8005e38:	4603      	mov	r3, r0
 8005e3a:	461a      	mov	r2, r3
 8005e3c:	4b30      	ldr	r3, [pc, #192]	@ (8005f00 <main+0xf70>)
 8005e3e:	701a      	strb	r2, [r3, #0]
	  				LED_uSD_0;
 8005e40:	2200      	movs	r2, #0
 8005e42:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005e46:	4832      	ldr	r0, [pc, #200]	@ (8005f10 <main+0xf80>)
 8005e48:	f008 fcd4 	bl	800e7f4 <HAL_GPIO_WritePin>
	  				SD_In_Use = 0;
 8005e4c:	4b2f      	ldr	r3, [pc, #188]	@ (8005f0c <main+0xf7c>)
 8005e4e:	2200      	movs	r2, #0
 8005e50:	601a      	str	r2, [r3, #0]
	  				}

	  			Mainloop_Number = Mainloop_Number < 1000 ? Mainloop_Number+1 : 0;
 8005e52:	4b2d      	ldr	r3, [pc, #180]	@ (8005f08 <main+0xf78>)
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005e5a:	d203      	bcs.n	8005e64 <main+0xed4>
 8005e5c:	4b2a      	ldr	r3, [pc, #168]	@ (8005f08 <main+0xf78>)
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	3301      	adds	r3, #1
 8005e62:	e000      	b.n	8005e66 <main+0xed6>
 8005e64:	2300      	movs	r3, #0
 8005e66:	4a28      	ldr	r2, [pc, #160]	@ (8005f08 <main+0xf78>)
 8005e68:	6013      	str	r3, [r2, #0]
	  		}

	  		if(TIM_inte == 1){
 8005e6a:	4b2f      	ldr	r3, [pc, #188]	@ (8005f28 <main+0xf98>)
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	2b01      	cmp	r3, #1
 8005e70:	f47f aef5 	bne.w	8005c5e <main+0xcce>
	  			LED_R_0;
 8005e74:	2200      	movs	r2, #0
 8005e76:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005e7a:	482c      	ldr	r0, [pc, #176]	@ (8005f2c <main+0xf9c>)
 8005e7c:	f008 fcba 	bl	800e7f4 <HAL_GPIO_WritePin>
	  			TIM_inte = 0;
 8005e80:	4b29      	ldr	r3, [pc, #164]	@ (8005f28 <main+0xf98>)
 8005e82:	2200      	movs	r2, #0
 8005e84:	601a      	str	r2, [r3, #0]
	  if(MYDRON.dron_status.Battery == DRON_BATTERY_RUN_OUT){
 8005e86:	e6ea      	b.n	8005c5e <main+0xcce>
 8005e88:	00000180 	.word	0x00000180
 8005e8c:	000041de 	.word	0x000041de
 8005e90:	58020000 	.word	0x58020000
 8005e94:	000041c0 	.word	0x000041c0
 8005e98:	000041d0 	.word	0x000041d0
 8005e9c:	000040ec 	.word	0x000040ec
 8005ea0:	00004110 	.word	0x00004110
 8005ea4:	000040f8 	.word	0x000040f8
 8005ea8:	00004104 	.word	0x00004104
 8005eac:	0000414c 	.word	0x0000414c
 8005eb0:	00004170 	.word	0x00004170
 8005eb4:	00004158 	.word	0x00004158
 8005eb8:	00004164 	.word	0x00004164
 8005ebc:	000040f0 	.word	0x000040f0
 8005ec0:	00004124 	.word	0x00004124
 8005ec4:	000040fc 	.word	0x000040fc
 8005ec8:	00004108 	.word	0x00004108
 8005ecc:	00004150 	.word	0x00004150
 8005ed0:	00004184 	.word	0x00004184
 8005ed4:	0000415c 	.word	0x0000415c
 8005ed8:	00004168 	.word	0x00004168
 8005edc:	000040f4 	.word	0x000040f4
 8005ee0:	00004138 	.word	0x00004138
 8005ee4:	00004100 	.word	0x00004100
 8005ee8:	0000410c 	.word	0x0000410c
 8005eec:	00004154 	.word	0x00004154
 8005ef0:	00004198 	.word	0x00004198
 8005ef4:	00004160 	.word	0x00004160
 8005ef8:	0000416c 	.word	0x0000416c
 8005efc:	00000074 	.word	0x00000074
 8005f00:	24001eec 	.word	0x24001eec
 8005f04:	000041ec 	.word	0x000041ec
 8005f08:	000041e4 	.word	0x000041e4
 8005f0c:	000041e8 	.word	0x000041e8
 8005f10:	58020c00 	.word	0x58020c00
 8005f14:	0801e9e0 	.word	0x0801e9e0
 8005f18:	24001ef0 	.word	0x24001ef0
 8005f1c:	24002f24 	.word	0x24002f24
 8005f20:	0001f7e8 	.word	0x0001f7e8
 8005f24:	24002f28 	.word	0x24002f28
 8005f28:	00000078 	.word	0x00000078
 8005f2c:	58020400 	.word	0x58020400

08005f30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b09c      	sub	sp, #112	@ 0x70
 8005f34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005f36:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005f3a:	224c      	movs	r2, #76	@ 0x4c
 8005f3c:	2100      	movs	r1, #0
 8005f3e:	4618      	mov	r0, r3
 8005f40:	f018 f8e8 	bl	801e114 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005f44:	1d3b      	adds	r3, r7, #4
 8005f46:	2220      	movs	r2, #32
 8005f48:	2100      	movs	r1, #0
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	f018 f8e2 	bl	801e114 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8005f50:	2002      	movs	r0, #2
 8005f52:	f00b f901 	bl	8011158 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8005f56:	2300      	movs	r3, #0
 8005f58:	603b      	str	r3, [r7, #0]
 8005f5a:	4b2d      	ldr	r3, [pc, #180]	@ (8006010 <SystemClock_Config+0xe0>)
 8005f5c:	699b      	ldr	r3, [r3, #24]
 8005f5e:	4a2c      	ldr	r2, [pc, #176]	@ (8006010 <SystemClock_Config+0xe0>)
 8005f60:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8005f64:	6193      	str	r3, [r2, #24]
 8005f66:	4b2a      	ldr	r3, [pc, #168]	@ (8006010 <SystemClock_Config+0xe0>)
 8005f68:	699b      	ldr	r3, [r3, #24]
 8005f6a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8005f6e:	603b      	str	r3, [r7, #0]
 8005f70:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8005f72:	bf00      	nop
 8005f74:	4b26      	ldr	r3, [pc, #152]	@ (8006010 <SystemClock_Config+0xe0>)
 8005f76:	699b      	ldr	r3, [r3, #24]
 8005f78:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005f7c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f80:	d1f8      	bne.n	8005f74 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_CSI|RCC_OSCILLATORTYPE_HSE;
 8005f82:	2311      	movs	r3, #17
 8005f84:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005f86:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005f8a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.CSIState = RCC_CSI_ON;
 8005f8c:	2380      	movs	r3, #128	@ 0x80
 8005f8e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.CSICalibrationValue = 16;
 8005f90:	2310      	movs	r3, #16
 8005f92:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005f94:	2302      	movs	r3, #2
 8005f96:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005f98:	2302      	movs	r3, #2
 8005f9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 3;
 8005f9c:	2303      	movs	r3, #3
 8005f9e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 68;
 8005fa0:	2344      	movs	r3, #68	@ 0x44
 8005fa2:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8005fa4:	2301      	movs	r3, #1
 8005fa6:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8005fa8:	2302      	movs	r3, #2
 8005faa:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8005fac:	2302      	movs	r3, #2
 8005fae:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8005fb0:	230c      	movs	r3, #12
 8005fb2:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 6144;
 8005fb8:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8005fbc:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005fbe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	f00b f902 	bl	80111cc <HAL_RCC_OscConfig>
 8005fc8:	4603      	mov	r3, r0
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d001      	beq.n	8005fd2 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8005fce:	f001 ff6b 	bl	8007ea8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005fd2:	233f      	movs	r3, #63	@ 0x3f
 8005fd4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005fd6:	2303      	movs	r3, #3
 8005fd8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8005fda:	2300      	movs	r3, #0
 8005fdc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8005fde:	2308      	movs	r3, #8
 8005fe0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8005fe2:	2340      	movs	r3, #64	@ 0x40
 8005fe4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8005fe6:	2340      	movs	r3, #64	@ 0x40
 8005fe8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8005fea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005fee:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8005ff0:	2340      	movs	r3, #64	@ 0x40
 8005ff2:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8005ff4:	1d3b      	adds	r3, r7, #4
 8005ff6:	2103      	movs	r1, #3
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	f00b fcc1 	bl	8011980 <HAL_RCC_ClockConfig>
 8005ffe:	4603      	mov	r3, r0
 8006000:	2b00      	cmp	r3, #0
 8006002:	d001      	beq.n	8006008 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8006004:	f001 ff50 	bl	8007ea8 <Error_Handler>
  }
}
 8006008:	bf00      	nop
 800600a:	3770      	adds	r7, #112	@ 0x70
 800600c:	46bd      	mov	sp, r7
 800600e:	bd80      	pop	{r7, pc}
 8006010:	58024800 	.word	0x58024800

08006014 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8006014:	b580      	push	{r7, lr}
 8006016:	b0ae      	sub	sp, #184	@ 0xb8
 8006018:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800601a:	463b      	mov	r3, r7
 800601c:	22b8      	movs	r2, #184	@ 0xb8
 800601e:	2100      	movs	r1, #0
 8006020:	4618      	mov	r0, r3
 8006022:	f018 f877 	bl	801e114 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_SPI2;
 8006026:	f44f 2201 	mov.w	r2, #528384	@ 0x81000
 800602a:	f04f 0300 	mov.w	r3, #0
 800602e:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 22;
 8006032:	2316      	movs	r3, #22
 8006034:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 192;
 8006036:	23c0      	movs	r3, #192	@ 0xc0
 8006038:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 3;
 800603a:	2303      	movs	r3, #3
 800603c:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800603e:	2302      	movs	r3, #2
 8006040:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8006042:	2302      	movs	r3, #2
 8006044:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_0;
 8006046:	2300      	movs	r3, #0
 8006048:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 800604a:	2320      	movs	r3, #32
 800604c:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800604e:	2300      	movs	r3, #0
 8006050:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 8006052:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006056:	65fb      	str	r3, [r7, #92]	@ 0x5c
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8006058:	2300      	movs	r3, #0
 800605a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800605e:	463b      	mov	r3, r7
 8006060:	4618      	mov	r0, r3
 8006062:	f00c f819 	bl	8012098 <HAL_RCCEx_PeriphCLKConfig>
 8006066:	4603      	mov	r3, r0
 8006068:	2b00      	cmp	r3, #0
 800606a:	d001      	beq.n	8006070 <PeriphCommonClock_Config+0x5c>
  {
    Error_Handler();
 800606c:	f001 ff1c 	bl	8007ea8 <Error_Handler>
  }
}
 8006070:	bf00      	nop
 8006072:	37b8      	adds	r7, #184	@ 0xb8
 8006074:	46bd      	mov	sp, r7
 8006076:	bd80      	pop	{r7, pc}

08006078 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b084      	sub	sp, #16
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
	if(htim == &htim2)// 1 ms
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	4a89      	ldr	r2, [pc, #548]	@ (80062a8 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8006084:	4293      	cmp	r3, r2
 8006086:	f040 810b 	bne.w	80062a0 <HAL_TIM_PeriodElapsedCallback+0x228>
	{
		TIM_inte_SD = 1;
 800608a:	4b88      	ldr	r3, [pc, #544]	@ (80062ac <HAL_TIM_PeriodElapsedCallback+0x234>)
 800608c:	2201      	movs	r2, #1
 800608e:	601a      	str	r2, [r3, #0]
		TIM_inte = 1;
 8006090:	4b87      	ldr	r3, [pc, #540]	@ (80062b0 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8006092:	2201      	movs	r2, #1
 8006094:	601a      	str	r2, [r3, #0]
		NRF_TIM_Inte++;
 8006096:	4b87      	ldr	r3, [pc, #540]	@ (80062b4 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	3301      	adds	r3, #1
 800609c:	4a85      	ldr	r2, [pc, #532]	@ (80062b4 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 800609e:	6013      	str	r3, [r2, #0]


		if(i == 0){// na calosc 100ms
 80060a0:	4b85      	ldr	r3, [pc, #532]	@ (80062b8 <HAL_TIM_PeriodElapsedCallback+0x240>)
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d113      	bne.n	80060d0 <HAL_TIM_PeriodElapsedCallback+0x58>
			LED_5_1;
 80060a8:	2201      	movs	r2, #1
 80060aa:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80060ae:	4883      	ldr	r0, [pc, #524]	@ (80062bc <HAL_TIM_PeriodElapsedCallback+0x244>)
 80060b0:	f008 fba0 	bl	800e7f4 <HAL_GPIO_WritePin>
			BMP180_start_measurment_temp_IT();
 80060b4:	f7fa fbdc 	bl	8000870 <BMP180_start_measurment_temp_IT>
			LED_5_0;
 80060b8:	2200      	movs	r2, #0
 80060ba:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80060be:	487f      	ldr	r0, [pc, #508]	@ (80062bc <HAL_TIM_PeriodElapsedCallback+0x244>)
 80060c0:	f008 fb98 	bl	800e7f4 <HAL_GPIO_WritePin>


			RGB_LED_For_BAT(MYDRON.batterysize);
 80060c4:	4b7e      	ldr	r3, [pc, #504]	@ (80062c0 <HAL_TIM_PeriodElapsedCallback+0x248>)
 80060c6:	881b      	ldrh	r3, [r3, #0]
 80060c8:	b2db      	uxtb	r3, r3
 80060ca:	4618      	mov	r0, r3
 80060cc:	f001 fa60 	bl	8007590 <RGB_LED_For_BAT>
		}

		if(i == 10){//2
 80060d0:	4b79      	ldr	r3, [pc, #484]	@ (80062b8 <HAL_TIM_PeriodElapsedCallback+0x240>)
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	2b0a      	cmp	r3, #10
 80060d6:	d10d      	bne.n	80060f4 <HAL_TIM_PeriodElapsedCallback+0x7c>
			LED_5_1;
 80060d8:	2201      	movs	r2, #1
 80060da:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80060de:	4877      	ldr	r0, [pc, #476]	@ (80062bc <HAL_TIM_PeriodElapsedCallback+0x244>)
 80060e0:	f008 fb88 	bl	800e7f4 <HAL_GPIO_WritePin>
			BMP180_start_measurment_pres_IT();
 80060e4:	f7fa fbae 	bl	8000844 <BMP180_start_measurment_pres_IT>
			LED_5_0;
 80060e8:	2200      	movs	r2, #0
 80060ea:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80060ee:	4873      	ldr	r0, [pc, #460]	@ (80062bc <HAL_TIM_PeriodElapsedCallback+0x244>)
 80060f0:	f008 fb80 	bl	800e7f4 <HAL_GPIO_WritePin>
		}

		if(i == 36){
 80060f4:	4b70      	ldr	r3, [pc, #448]	@ (80062b8 <HAL_TIM_PeriodElapsedCallback+0x240>)
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	2b24      	cmp	r3, #36	@ 0x24
 80060fa:	d10d      	bne.n	8006118 <HAL_TIM_PeriodElapsedCallback+0xa0>
			LED_5_1;
 80060fc:	2201      	movs	r2, #1
 80060fe:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006102:	486e      	ldr	r0, [pc, #440]	@ (80062bc <HAL_TIM_PeriodElapsedCallback+0x244>)
 8006104:	f008 fb76 	bl	800e7f4 <HAL_GPIO_WritePin>
			HMC5883L_Get_Z_Start_IT();
 8006108:	f7fa ffe4 	bl	80010d4 <HMC5883L_Get_Z_Start_IT>
			LED_5_0;
 800610c:	2200      	movs	r2, #0
 800610e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006112:	486a      	ldr	r0, [pc, #424]	@ (80062bc <HAL_TIM_PeriodElapsedCallback+0x244>)
 8006114:	f008 fb6e 	bl	800e7f4 <HAL_GPIO_WritePin>
		}

		if(i == 38){
 8006118:	4b67      	ldr	r3, [pc, #412]	@ (80062b8 <HAL_TIM_PeriodElapsedCallback+0x240>)
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	2b26      	cmp	r3, #38	@ 0x26
 800611e:	d10e      	bne.n	800613e <HAL_TIM_PeriodElapsedCallback+0xc6>
			LED_6_1;
 8006120:	2201      	movs	r2, #1
 8006122:	2108      	movs	r1, #8
 8006124:	4867      	ldr	r0, [pc, #412]	@ (80062c4 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8006126:	f008 fb65 	bl	800e7f4 <HAL_GPIO_WritePin>
			nRF24_TX_Mode();
 800612a:	f7fb ff55 	bl	8001fd8 <nRF24_TX_Mode>
			nRF24_Rx_Mode = 0;
 800612e:	4b66      	ldr	r3, [pc, #408]	@ (80062c8 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8006130:	2200      	movs	r2, #0
 8006132:	701a      	strb	r2, [r3, #0]
			LED_6_0;
 8006134:	2200      	movs	r2, #0
 8006136:	2108      	movs	r1, #8
 8006138:	4862      	ldr	r0, [pc, #392]	@ (80062c4 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 800613a:	f008 fb5b 	bl	800e7f4 <HAL_GPIO_WritePin>
		}
		if(i == 40){//5
 800613e:	4b5e      	ldr	r3, [pc, #376]	@ (80062b8 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	2b28      	cmp	r3, #40	@ 0x28
 8006144:	d14c      	bne.n	80061e0 <HAL_TIM_PeriodElapsedCallback+0x168>
			ampritude = startpres - pres;
 8006146:	4b61      	ldr	r3, [pc, #388]	@ (80062cc <HAL_TIM_PeriodElapsedCallback+0x254>)
 8006148:	ed93 7a00 	vldr	s14, [r3]
 800614c:	4b60      	ldr	r3, [pc, #384]	@ (80062d0 <HAL_TIM_PeriodElapsedCallback+0x258>)
 800614e:	edd3 7a00 	vldr	s15, [r3]
 8006152:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006156:	4b5f      	ldr	r3, [pc, #380]	@ (80062d4 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8006158:	edc3 7a00 	vstr	s15, [r3]

			MYDRON.dronheight = (uint16_t)BMP180_GET_height();
 800615c:	f7fa fe4a 	bl	8000df4 <BMP180_GET_height>
 8006160:	eef0 7a40 	vmov.f32	s15, s0
 8006164:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006168:	ee17 3a90 	vmov	r3, s15
 800616c:	b29b      	uxth	r3, r3
 800616e:	b21a      	sxth	r2, r3
 8006170:	4b53      	ldr	r3, [pc, #332]	@ (80062c0 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8006172:	83da      	strh	r2, [r3, #30]
			convert_value_to_array(MYDRON.dronheight, TxData, 0, 3);
 8006174:	4b52      	ldr	r3, [pc, #328]	@ (80062c0 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8006176:	f9b3 001e 	ldrsh.w	r0, [r3, #30]
 800617a:	2303      	movs	r3, #3
 800617c:	2200      	movs	r2, #0
 800617e:	4956      	ldr	r1, [pc, #344]	@ (80062d8 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8006180:	f001 f929 	bl	80073d6 <convert_value_to_array>

			Get_batteryvalue();
 8006184:	f7fd fffc 	bl	8004180 <Get_batteryvalue>

			convert_value_to_array(MYDRON.batterysize, TxData, 3, 6);
 8006188:	4b4d      	ldr	r3, [pc, #308]	@ (80062c0 <HAL_TIM_PeriodElapsedCallback+0x248>)
 800618a:	881b      	ldrh	r3, [r3, #0]
 800618c:	b218      	sxth	r0, r3
 800618e:	2306      	movs	r3, #6
 8006190:	2203      	movs	r2, #3
 8006192:	4951      	ldr	r1, [pc, #324]	@ (80062d8 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8006194:	f001 f91f 	bl	80073d6 <convert_value_to_array>

			for(int i = 0; i < 10; i++){
 8006198:	2300      	movs	r3, #0
 800619a:	60fb      	str	r3, [r7, #12]
 800619c:	e00b      	b.n	80061b6 <HAL_TIM_PeriodElapsedCallback+0x13e>
				TxData[22+i] = Txcode[22+i];
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	f103 0216 	add.w	r2, r3, #22
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	3316      	adds	r3, #22
 80061a8:	494c      	ldr	r1, [pc, #304]	@ (80062dc <HAL_TIM_PeriodElapsedCallback+0x264>)
 80061aa:	5c89      	ldrb	r1, [r1, r2]
 80061ac:	4a4a      	ldr	r2, [pc, #296]	@ (80062d8 <HAL_TIM_PeriodElapsedCallback+0x260>)
 80061ae:	54d1      	strb	r1, [r2, r3]
			for(int i = 0; i < 10; i++){
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	3301      	adds	r3, #1
 80061b4:	60fb      	str	r3, [r7, #12]
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	2b09      	cmp	r3, #9
 80061ba:	ddf0      	ble.n	800619e <HAL_TIM_PeriodElapsedCallback+0x126>
			}
			LED_6_1;
 80061bc:	2201      	movs	r2, #1
 80061be:	2108      	movs	r1, #8
 80061c0:	4840      	ldr	r0, [pc, #256]	@ (80062c4 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 80061c2:	f008 fb17 	bl	800e7f4 <HAL_GPIO_WritePin>
			nRF24_WriteTXPayload(TxData);
 80061c6:	4844      	ldr	r0, [pc, #272]	@ (80062d8 <HAL_TIM_PeriodElapsedCallback+0x260>)
 80061c8:	f7fc f9c4 	bl	8002554 <nRF24_WriteTXPayload>
			NRF24_CE_HIGH;
 80061cc:	2201      	movs	r2, #1
 80061ce:	2140      	movs	r1, #64	@ 0x40
 80061d0:	4843      	ldr	r0, [pc, #268]	@ (80062e0 <HAL_TIM_PeriodElapsedCallback+0x268>)
 80061d2:	f008 fb0f 	bl	800e7f4 <HAL_GPIO_WritePin>
			LED_6_0;
 80061d6:	2200      	movs	r2, #0
 80061d8:	2108      	movs	r1, #8
 80061da:	483a      	ldr	r0, [pc, #232]	@ (80062c4 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 80061dc:	f008 fb0a 	bl	800e7f4 <HAL_GPIO_WritePin>
		}
		if(i == 41){
 80061e0:	4b35      	ldr	r3, [pc, #212]	@ (80062b8 <HAL_TIM_PeriodElapsedCallback+0x240>)
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	2b29      	cmp	r3, #41	@ 0x29
 80061e6:	d104      	bne.n	80061f2 <HAL_TIM_PeriodElapsedCallback+0x17a>
			NRF24_CE_LOW;
 80061e8:	2200      	movs	r2, #0
 80061ea:	2140      	movs	r1, #64	@ 0x40
 80061ec:	483c      	ldr	r0, [pc, #240]	@ (80062e0 <HAL_TIM_PeriodElapsedCallback+0x268>)
 80061ee:	f008 fb01 	bl	800e7f4 <HAL_GPIO_WritePin>
		}
		if(i >= 42){
 80061f2:	4b31      	ldr	r3, [pc, #196]	@ (80062b8 <HAL_TIM_PeriodElapsedCallback+0x240>)
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	2b29      	cmp	r3, #41	@ 0x29
 80061f8:	d916      	bls.n	8006228 <HAL_TIM_PeriodElapsedCallback+0x1b0>
			if(nRF24_Rx_Mode != 1){
 80061fa:	4b33      	ldr	r3, [pc, #204]	@ (80062c8 <HAL_TIM_PeriodElapsedCallback+0x250>)
 80061fc:	781b      	ldrb	r3, [r3, #0]
 80061fe:	2b01      	cmp	r3, #1
 8006200:	d012      	beq.n	8006228 <HAL_TIM_PeriodElapsedCallback+0x1b0>
				if(((nRF24_ReadStatus() & (1<<NRF24_MAX_RT)) || (nRF24_ReadStatus() & (1<<NRF24_TX_DS)))){
 8006202:	f7fb ff6a 	bl	80020da <nRF24_ReadStatus>
 8006206:	4603      	mov	r3, r0
 8006208:	f003 0310 	and.w	r3, r3, #16
 800620c:	2b00      	cmp	r3, #0
 800620e:	d106      	bne.n	800621e <HAL_TIM_PeriodElapsedCallback+0x1a6>
 8006210:	f7fb ff63 	bl	80020da <nRF24_ReadStatus>
 8006214:	4603      	mov	r3, r0
 8006216:	f003 0320 	and.w	r3, r3, #32
 800621a:	2b00      	cmp	r3, #0
 800621c:	d004      	beq.n	8006228 <HAL_TIM_PeriodElapsedCallback+0x1b0>
					nRF24_RX_Mode();
 800621e:	f7fb feaf 	bl	8001f80 <nRF24_RX_Mode>
					nRF24_Rx_Mode = 1;
 8006222:	4b29      	ldr	r3, [pc, #164]	@ (80062c8 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8006224:	2201      	movs	r2, #1
 8006226:	701a      	strb	r2, [r3, #0]
				}
			}
		}

		LED_5_1;
 8006228:	2201      	movs	r2, #1
 800622a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800622e:	4823      	ldr	r0, [pc, #140]	@ (80062bc <HAL_TIM_PeriodElapsedCallback+0x244>)
 8006230:	f008 fae0 	bl	800e7f4 <HAL_GPIO_WritePin>
		MPU6050_GET_ACCANDGYR_CALANDSCL_IT();
 8006234:	f7fb facc 	bl	80017d0 <MPU6050_GET_ACCANDGYR_CALANDSCL_IT>
		LED_5_0;
 8006238:	2200      	movs	r2, #0
 800623a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800623e:	481f      	ldr	r0, [pc, #124]	@ (80062bc <HAL_TIM_PeriodElapsedCallback+0x244>)
 8006240:	f008 fad8 	bl	800e7f4 <HAL_GPIO_WritePin>

		i = (i == 100) ? 0 : i+1;
 8006244:	4b1c      	ldr	r3, [pc, #112]	@ (80062b8 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	2b64      	cmp	r3, #100	@ 0x64
 800624a:	d003      	beq.n	8006254 <HAL_TIM_PeriodElapsedCallback+0x1dc>
 800624c:	4b1a      	ldr	r3, [pc, #104]	@ (80062b8 <HAL_TIM_PeriodElapsedCallback+0x240>)
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	3301      	adds	r3, #1
 8006252:	e000      	b.n	8006256 <HAL_TIM_PeriodElapsedCallback+0x1de>
 8006254:	2300      	movs	r3, #0
 8006256:	4a18      	ldr	r2, [pc, #96]	@ (80062b8 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8006258:	6013      	str	r3, [r2, #0]

		if(NRF_TIM_Inte >= 1000){
 800625a:	4b16      	ldr	r3, [pc, #88]	@ (80062b4 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006262:	d308      	bcc.n	8006276 <HAL_TIM_PeriodElapsedCallback+0x1fe>
			LED_R_1;
 8006264:	2201      	movs	r2, #1
 8006266:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800626a:	481d      	ldr	r0, [pc, #116]	@ (80062e0 <HAL_TIM_PeriodElapsedCallback+0x268>)
 800626c:	f008 fac2 	bl	800e7f4 <HAL_GPIO_WritePin>
			MYDRON.dron_status.Connection = DRON_DISCONNECTED;
 8006270:	4b13      	ldr	r3, [pc, #76]	@ (80062c0 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8006272:	2202      	movs	r2, #2
 8006274:	825a      	strh	r2, [r3, #18]
		}
		if(MYDRON.dron_status.Connection == DRON_DISCONNECTED){
 8006276:	4b12      	ldr	r3, [pc, #72]	@ (80062c0 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8006278:	8a5b      	ldrh	r3, [r3, #18]
 800627a:	2b02      	cmp	r3, #2
 800627c:	d110      	bne.n	80062a0 <HAL_TIM_PeriodElapsedCallback+0x228>
			wanted_rool = 0;
 800627e:	4b19      	ldr	r3, [pc, #100]	@ (80062e4 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8006280:	f04f 0200 	mov.w	r2, #0
 8006284:	601a      	str	r2, [r3, #0]
			wanted_pitch = 0;
 8006286:	4b18      	ldr	r3, [pc, #96]	@ (80062e8 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8006288:	f04f 0200 	mov.w	r2, #0
 800628c:	601a      	str	r2, [r3, #0]
			wanted_yaw = 0;
 800628e:	4b17      	ldr	r3, [pc, #92]	@ (80062ec <HAL_TIM_PeriodElapsedCallback+0x274>)
 8006290:	f04f 0200 	mov.w	r2, #0
 8006294:	601a      	str	r2, [r3, #0]
			wanted_thrust = DRON_SLOWFALING;
 8006296:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800629a:	b21a      	sxth	r2, r3
 800629c:	4b14      	ldr	r3, [pc, #80]	@ (80062f0 <HAL_TIM_PeriodElapsedCallback+0x278>)
 800629e:	801a      	strh	r2, [r3, #0]
		}
	}
}
 80062a0:	bf00      	nop
 80062a2:	3710      	adds	r7, #16
 80062a4:	46bd      	mov	sp, r7
 80062a6:	bd80      	pop	{r7, pc}
 80062a8:	240003d0 	.word	0x240003d0
 80062ac:	00000074 	.word	0x00000074
 80062b0:	00000078 	.word	0x00000078
 80062b4:	00000080 	.word	0x00000080
 80062b8:	000041f8 	.word	0x000041f8
 80062bc:	58020000 	.word	0x58020000
 80062c0:	00000180 	.word	0x00000180
 80062c4:	58021000 	.word	0x58021000
 80062c8:	0000017c 	.word	0x0000017c
 80062cc:	000000ec 	.word	0x000000ec
 80062d0:	000000e8 	.word	0x000000e8
 80062d4:	000000f0 	.word	0x000000f0
 80062d8:	0000013c 	.word	0x0000013c
 80062dc:	0000011c 	.word	0x0000011c
 80062e0:	58020400 	.word	0x58020400
 80062e4:	00004074 	.word	0x00004074
 80062e8:	00004070 	.word	0x00004070
 80062ec:	00004078 	.word	0x00004078
 80062f0:	00004064 	.word	0x00004064

080062f4 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b084      	sub	sp, #16
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	4603      	mov	r3, r0
 80062fc:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin == GPIO_PIN_15)
 80062fe:	88fb      	ldrh	r3, [r7, #6]
 8006300:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006304:	f040 812c 	bne.w	8006560 <HAL_GPIO_EXTI_Callback+0x26c>
	{
		if(STARTUP == 0){
 8006308:	4b97      	ldr	r3, [pc, #604]	@ (8006568 <HAL_GPIO_EXTI_Callback+0x274>)
 800630a:	781b      	ldrb	r3, [r3, #0]
 800630c:	2b00      	cmp	r3, #0
 800630e:	f040 8127 	bne.w	8006560 <HAL_GPIO_EXTI_Callback+0x26c>
			LED_6_1;
 8006312:	2201      	movs	r2, #1
 8006314:	2108      	movs	r1, #8
 8006316:	4895      	ldr	r0, [pc, #596]	@ (800656c <HAL_GPIO_EXTI_Callback+0x278>)
 8006318:	f008 fa6c 	bl	800e7f4 <HAL_GPIO_WritePin>
			nRF24_ReadRXPaylaod(RxData);
 800631c:	4894      	ldr	r0, [pc, #592]	@ (8006570 <HAL_GPIO_EXTI_Callback+0x27c>)
 800631e:	f7fc f94f 	bl	80025c0 <nRF24_ReadRXPaylaod>
			LED_6_0;
 8006322:	2200      	movs	r2, #0
 8006324:	2108      	movs	r1, #8
 8006326:	4891      	ldr	r0, [pc, #580]	@ (800656c <HAL_GPIO_EXTI_Callback+0x278>)
 8006328:	f008 fa64 	bl	800e7f4 <HAL_GPIO_WritePin>


			LED_Y_1;
 800632c:	2201      	movs	r2, #1
 800632e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8006332:	4890      	ldr	r0, [pc, #576]	@ (8006574 <HAL_GPIO_EXTI_Callback+0x280>)
 8006334:	f008 fa5e 	bl	800e7f4 <HAL_GPIO_WritePin>

			loopnum = 0;
 8006338:	4b8f      	ldr	r3, [pc, #572]	@ (8006578 <HAL_GPIO_EXTI_Callback+0x284>)
 800633a:	2200      	movs	r2, #0
 800633c:	601a      	str	r2, [r3, #0]
			for(int abc = 0; abc < 10; abc++){//sprawdzenia poprawnosci kodu nadanego
 800633e:	2300      	movs	r3, #0
 8006340:	60fb      	str	r3, [r7, #12]
 8006342:	e011      	b.n	8006368 <HAL_GPIO_EXTI_Callback+0x74>
				if(RxData[12+abc] == Rxcode[abc+12]){
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	330c      	adds	r3, #12
 8006348:	4a89      	ldr	r2, [pc, #548]	@ (8006570 <HAL_GPIO_EXTI_Callback+0x27c>)
 800634a:	5cd2      	ldrb	r2, [r2, r3]
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	330c      	adds	r3, #12
 8006350:	498a      	ldr	r1, [pc, #552]	@ (800657c <HAL_GPIO_EXTI_Callback+0x288>)
 8006352:	5ccb      	ldrb	r3, [r1, r3]
 8006354:	429a      	cmp	r2, r3
 8006356:	d104      	bne.n	8006362 <HAL_GPIO_EXTI_Callback+0x6e>
					loopnum++;
 8006358:	4b87      	ldr	r3, [pc, #540]	@ (8006578 <HAL_GPIO_EXTI_Callback+0x284>)
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	3301      	adds	r3, #1
 800635e:	4a86      	ldr	r2, [pc, #536]	@ (8006578 <HAL_GPIO_EXTI_Callback+0x284>)
 8006360:	6013      	str	r3, [r2, #0]
			for(int abc = 0; abc < 10; abc++){//sprawdzenia poprawnosci kodu nadanego
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	3301      	adds	r3, #1
 8006366:	60fb      	str	r3, [r7, #12]
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	2b09      	cmp	r3, #9
 800636c:	ddea      	ble.n	8006344 <HAL_GPIO_EXTI_Callback+0x50>
				}
			}

			if(loopnum == 10){
 800636e:	4b82      	ldr	r3, [pc, #520]	@ (8006578 <HAL_GPIO_EXTI_Callback+0x284>)
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	2b0a      	cmp	r3, #10
 8006374:	f040 80e3 	bne.w	800653e <HAL_GPIO_EXTI_Callback+0x24a>
				convert_array_to_value(RxData, &wanted_pitch_v, 0, 2);//pitch
 8006378:	2302      	movs	r3, #2
 800637a:	2200      	movs	r2, #0
 800637c:	4980      	ldr	r1, [pc, #512]	@ (8006580 <HAL_GPIO_EXTI_Callback+0x28c>)
 800637e:	487c      	ldr	r0, [pc, #496]	@ (8006570 <HAL_GPIO_EXTI_Callback+0x27c>)
 8006380:	f000 ffd8 	bl	8007334 <convert_array_to_value>
				convert_array_to_value(RxData, &wanted_roll_v, 3, 5);// pid_angular_rate_rool wanted_roll_v
 8006384:	2305      	movs	r3, #5
 8006386:	2203      	movs	r2, #3
 8006388:	497e      	ldr	r1, [pc, #504]	@ (8006584 <HAL_GPIO_EXTI_Callback+0x290>)
 800638a:	4879      	ldr	r0, [pc, #484]	@ (8006570 <HAL_GPIO_EXTI_Callback+0x27c>)
 800638c:	f000 ffd2 	bl	8007334 <convert_array_to_value>
				if(wobble_strenght == 1){
 8006390:	4b7d      	ldr	r3, [pc, #500]	@ (8006588 <HAL_GPIO_EXTI_Callback+0x294>)
 8006392:	edd3 7a00 	vldr	s15, [r3]
 8006396:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800639a:	eef4 7a47 	vcmp.f32	s15, s14
 800639e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063a2:	d105      	bne.n	80063b0 <HAL_GPIO_EXTI_Callback+0xbc>
					convert_array_to_value(RxData, &wanted_thrust, 6, 8);//
 80063a4:	2308      	movs	r3, #8
 80063a6:	2206      	movs	r2, #6
 80063a8:	4978      	ldr	r1, [pc, #480]	@ (800658c <HAL_GPIO_EXTI_Callback+0x298>)
 80063aa:	4871      	ldr	r0, [pc, #452]	@ (8006570 <HAL_GPIO_EXTI_Callback+0x27c>)
 80063ac:	f000 ffc2 	bl	8007334 <convert_array_to_value>
				}
				convert_array_to_value(RxData, &wanted_yaw_v, 9, 11);//
 80063b0:	230b      	movs	r3, #11
 80063b2:	2209      	movs	r2, #9
 80063b4:	4976      	ldr	r1, [pc, #472]	@ (8006590 <HAL_GPIO_EXTI_Callback+0x29c>)
 80063b6:	486e      	ldr	r0, [pc, #440]	@ (8006570 <HAL_GPIO_EXTI_Callback+0x27c>)
 80063b8:	f000 ffbc 	bl	8007334 <convert_array_to_value>
				MYDRON.dron_status.Connection = DRON_CONNECTED;
 80063bc:	4b75      	ldr	r3, [pc, #468]	@ (8006594 <HAL_GPIO_EXTI_Callback+0x2a0>)
 80063be:	2201      	movs	r2, #1
 80063c0:	825a      	strh	r2, [r3, #18]

				if(RxData[23] == 1){
 80063c2:	4b6b      	ldr	r3, [pc, #428]	@ (8006570 <HAL_GPIO_EXTI_Callback+0x27c>)
 80063c4:	7ddb      	ldrb	r3, [r3, #23]
 80063c6:	2b01      	cmp	r3, #1
 80063c8:	d11b      	bne.n	8006402 <HAL_GPIO_EXTI_Callback+0x10e>
					ESC_POWER_1;
 80063ca:	2201      	movs	r2, #1
 80063cc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80063d0:	4871      	ldr	r0, [pc, #452]	@ (8006598 <HAL_GPIO_EXTI_Callback+0x2a4>)
 80063d2:	f008 fa0f 	bl	800e7f4 <HAL_GPIO_WritePin>
					LED_R_1;
 80063d6:	2201      	movs	r2, #1
 80063d8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80063dc:	4865      	ldr	r0, [pc, #404]	@ (8006574 <HAL_GPIO_EXTI_Callback+0x280>)
 80063de:	f008 fa09 	bl	800e7f4 <HAL_GPIO_WritePin>
					if(SD_enable_Flag == 1){
 80063e2:	4b6e      	ldr	r3, [pc, #440]	@ (800659c <HAL_GPIO_EXTI_Callback+0x2a8>)
 80063e4:	781b      	ldrb	r3, [r3, #0]
 80063e6:	2b01      	cmp	r3, #1
 80063e8:	d10b      	bne.n	8006402 <HAL_GPIO_EXTI_Callback+0x10e>
						f_close(&fil);
 80063ea:	486d      	ldr	r0, [pc, #436]	@ (80065a0 <HAL_GPIO_EXTI_Callback+0x2ac>)
 80063ec:	f017 fc9a 	bl	801dd24 <f_close>
						fresult = f_mount(NULL, "/", 1);
 80063f0:	2201      	movs	r2, #1
 80063f2:	496c      	ldr	r1, [pc, #432]	@ (80065a4 <HAL_GPIO_EXTI_Callback+0x2b0>)
 80063f4:	2000      	movs	r0, #0
 80063f6:	f017 f875 	bl	801d4e4 <f_mount>
 80063fa:	4603      	mov	r3, r0
 80063fc:	461a      	mov	r2, r3
 80063fe:	4b6a      	ldr	r3, [pc, #424]	@ (80065a8 <HAL_GPIO_EXTI_Callback+0x2b4>)
 8006400:	701a      	strb	r2, [r3, #0]
					}

				}

				if(wanted_thrust == 9999){
 8006402:	4b62      	ldr	r3, [pc, #392]	@ (800658c <HAL_GPIO_EXTI_Callback+0x298>)
 8006404:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006408:	f242 720f 	movw	r2, #9999	@ 0x270f
 800640c:	4293      	cmp	r3, r2
 800640e:	d103      	bne.n	8006418 <HAL_GPIO_EXTI_Callback+0x124>
					MYDRON.THRUST_flag = THRUST_MAX;
 8006410:	4b60      	ldr	r3, [pc, #384]	@ (8006594 <HAL_GPIO_EXTI_Callback+0x2a0>)
 8006412:	2210      	movs	r2, #16
 8006414:	f883 2020 	strb.w	r2, [r3, #32]
	  			}
				wanted_thrust = wanted_thrust * 20;
 8006418:	4b5c      	ldr	r3, [pc, #368]	@ (800658c <HAL_GPIO_EXTI_Callback+0x298>)
 800641a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800641e:	b29b      	uxth	r3, r3
 8006420:	461a      	mov	r2, r3
 8006422:	0092      	lsls	r2, r2, #2
 8006424:	4413      	add	r3, r2
 8006426:	009b      	lsls	r3, r3, #2
 8006428:	b29b      	uxth	r3, r3
 800642a:	b21a      	sxth	r2, r3
 800642c:	4b57      	ldr	r3, [pc, #348]	@ (800658c <HAL_GPIO_EXTI_Callback+0x298>)
 800642e:	801a      	strh	r2, [r3, #0]
				wanted_thrust = wanted_thrust - 10000;
 8006430:	4b56      	ldr	r3, [pc, #344]	@ (800658c <HAL_GPIO_EXTI_Callback+0x298>)
 8006432:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006436:	b29a      	uxth	r2, r3
 8006438:	4b5c      	ldr	r3, [pc, #368]	@ (80065ac <HAL_GPIO_EXTI_Callback+0x2b8>)
 800643a:	4413      	add	r3, r2
 800643c:	b29b      	uxth	r3, r3
 800643e:	b21a      	sxth	r2, r3
 8006440:	4b52      	ldr	r3, [pc, #328]	@ (800658c <HAL_GPIO_EXTI_Callback+0x298>)
 8006442:	801a      	strh	r2, [r3, #0]
				if(wanted_thrust < 0){
 8006444:	4b51      	ldr	r3, [pc, #324]	@ (800658c <HAL_GPIO_EXTI_Callback+0x298>)
 8006446:	f9b3 3000 	ldrsh.w	r3, [r3]
 800644a:	2b00      	cmp	r3, #0
 800644c:	da02      	bge.n	8006454 <HAL_GPIO_EXTI_Callback+0x160>
					wanted_thrust = 0;
 800644e:	4b4f      	ldr	r3, [pc, #316]	@ (800658c <HAL_GPIO_EXTI_Callback+0x298>)
 8006450:	2200      	movs	r2, #0
 8006452:	801a      	strh	r2, [r3, #0]
	  			}

				wanted_rool_rx = (wanted_roll_v - 500)*wanted_rool_factro;//wanted_rool_rx (-90 <-> 90)
 8006454:	4b4b      	ldr	r3, [pc, #300]	@ (8006584 <HAL_GPIO_EXTI_Callback+0x290>)
 8006456:	f9b3 3000 	ldrsh.w	r3, [r3]
 800645a:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 800645e:	ee07 3a90 	vmov	s15, r3
 8006462:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006466:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 80065b0 <HAL_GPIO_EXTI_Callback+0x2bc>
 800646a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800646e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006472:	ee17 3a90 	vmov	r3, s15
 8006476:	b21a      	sxth	r2, r3
 8006478:	4b4e      	ldr	r3, [pc, #312]	@ (80065b4 <HAL_GPIO_EXTI_Callback+0x2c0>)
 800647a:	801a      	strh	r2, [r3, #0]
				wanted_pitch_rx = (wanted_pitch_v - 500)*wanted_pitch_factro;// (-450 <-> 450)
 800647c:	4b40      	ldr	r3, [pc, #256]	@ (8006580 <HAL_GPIO_EXTI_Callback+0x28c>)
 800647e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006482:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8006486:	ee07 3a90 	vmov	s15, r3
 800648a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800648e:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 80065b8 <HAL_GPIO_EXTI_Callback+0x2c4>
 8006492:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006496:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800649a:	ee17 3a90 	vmov	r3, s15
 800649e:	b21a      	sxth	r2, r3
 80064a0:	4b46      	ldr	r3, [pc, #280]	@ (80065bc <HAL_GPIO_EXTI_Callback+0x2c8>)
 80064a2:	801a      	strh	r2, [r3, #0]
				wanted_yaw_rx = (wanted_yaw_v - 500)*wanted_yaw_factro;// wanted yaw is in deg/s
 80064a4:	4b3a      	ldr	r3, [pc, #232]	@ (8006590 <HAL_GPIO_EXTI_Callback+0x29c>)
 80064a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80064aa:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 80064ae:	ee07 3a90 	vmov	s15, r3
 80064b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80064b6:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 80065c0 <HAL_GPIO_EXTI_Callback+0x2cc>
 80064ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80064be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80064c2:	ee17 3a90 	vmov	r3, s15
 80064c6:	b21a      	sxth	r2, r3
 80064c8:	4b3e      	ldr	r3, [pc, #248]	@ (80065c4 <HAL_GPIO_EXTI_Callback+0x2d0>)
 80064ca:	801a      	strh	r2, [r3, #0]


				wanted_rool_rx = (wanted_rool_rx >= 30) ? 30 : (wanted_rool_rx <= -30) ? -30 : wanted_rool_rx;
 80064cc:	4b39      	ldr	r3, [pc, #228]	@ (80065b4 <HAL_GPIO_EXTI_Callback+0x2c0>)
 80064ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80064d2:	2b1d      	cmp	r3, #29
 80064d4:	dc09      	bgt.n	80064ea <HAL_GPIO_EXTI_Callback+0x1f6>
 80064d6:	4b37      	ldr	r3, [pc, #220]	@ (80065b4 <HAL_GPIO_EXTI_Callback+0x2c0>)
 80064d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80064dc:	f06f 021d 	mvn.w	r2, #29
 80064e0:	4293      	cmp	r3, r2
 80064e2:	bfb8      	it	lt
 80064e4:	4613      	movlt	r3, r2
 80064e6:	b21b      	sxth	r3, r3
 80064e8:	e000      	b.n	80064ec <HAL_GPIO_EXTI_Callback+0x1f8>
 80064ea:	231e      	movs	r3, #30
 80064ec:	4a31      	ldr	r2, [pc, #196]	@ (80065b4 <HAL_GPIO_EXTI_Callback+0x2c0>)
 80064ee:	8013      	strh	r3, [r2, #0]
				wanted_pitch_rx = (wanted_pitch_rx >= 30) ? 30 : (wanted_pitch_rx <= -30) ? -30 : wanted_pitch_rx;
 80064f0:	4b32      	ldr	r3, [pc, #200]	@ (80065bc <HAL_GPIO_EXTI_Callback+0x2c8>)
 80064f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80064f6:	2b1d      	cmp	r3, #29
 80064f8:	dc09      	bgt.n	800650e <HAL_GPIO_EXTI_Callback+0x21a>
 80064fa:	4b30      	ldr	r3, [pc, #192]	@ (80065bc <HAL_GPIO_EXTI_Callback+0x2c8>)
 80064fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006500:	f06f 021d 	mvn.w	r2, #29
 8006504:	4293      	cmp	r3, r2
 8006506:	bfb8      	it	lt
 8006508:	4613      	movlt	r3, r2
 800650a:	b21b      	sxth	r3, r3
 800650c:	e000      	b.n	8006510 <HAL_GPIO_EXTI_Callback+0x21c>
 800650e:	231e      	movs	r3, #30
 8006510:	4a2a      	ldr	r2, [pc, #168]	@ (80065bc <HAL_GPIO_EXTI_Callback+0x2c8>)
 8006512:	8013      	strh	r3, [r2, #0]
				wanted_yaw_rx = (wanted_yaw_rx >= 30) ? 30 : (wanted_yaw_rx <= -30) ? -30 : wanted_yaw_rx;
 8006514:	4b2b      	ldr	r3, [pc, #172]	@ (80065c4 <HAL_GPIO_EXTI_Callback+0x2d0>)
 8006516:	f9b3 3000 	ldrsh.w	r3, [r3]
 800651a:	2b1d      	cmp	r3, #29
 800651c:	dc09      	bgt.n	8006532 <HAL_GPIO_EXTI_Callback+0x23e>
 800651e:	4b29      	ldr	r3, [pc, #164]	@ (80065c4 <HAL_GPIO_EXTI_Callback+0x2d0>)
 8006520:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006524:	f06f 021d 	mvn.w	r2, #29
 8006528:	4293      	cmp	r3, r2
 800652a:	bfb8      	it	lt
 800652c:	4613      	movlt	r3, r2
 800652e:	b21b      	sxth	r3, r3
 8006530:	e000      	b.n	8006534 <HAL_GPIO_EXTI_Callback+0x240>
 8006532:	231e      	movs	r3, #30
 8006534:	4a23      	ldr	r2, [pc, #140]	@ (80065c4 <HAL_GPIO_EXTI_Callback+0x2d0>)
 8006536:	8013      	strh	r3, [r2, #0]


				NRF_TIM_Inte = 0;
 8006538:	4b23      	ldr	r3, [pc, #140]	@ (80065c8 <HAL_GPIO_EXTI_Callback+0x2d4>)
 800653a:	2200      	movs	r2, #0
 800653c:	601a      	str	r2, [r3, #0]
	  		}

	  			if(loopnum > 0 && loopnum < 10){
 800653e:	4b0e      	ldr	r3, [pc, #56]	@ (8006578 <HAL_GPIO_EXTI_Callback+0x284>)
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d006      	beq.n	8006554 <HAL_GPIO_EXTI_Callback+0x260>
 8006546:	4b0c      	ldr	r3, [pc, #48]	@ (8006578 <HAL_GPIO_EXTI_Callback+0x284>)
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	2b09      	cmp	r3, #9
 800654c:	d802      	bhi.n	8006554 <HAL_GPIO_EXTI_Callback+0x260>
	  				MYDRON.dron_status.Connection = DRON_CONNECTION_ERROR;
 800654e:	4b11      	ldr	r3, [pc, #68]	@ (8006594 <HAL_GPIO_EXTI_Callback+0x2a0>)
 8006550:	2203      	movs	r2, #3
 8006552:	825a      	strh	r2, [r3, #18]
	  			}
	  			LED_Y_0;
 8006554:	2200      	movs	r2, #0
 8006556:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800655a:	4806      	ldr	r0, [pc, #24]	@ (8006574 <HAL_GPIO_EXTI_Callback+0x280>)
 800655c:	f008 f94a 	bl	800e7f4 <HAL_GPIO_WritePin>
		}
	}
}
 8006560:	bf00      	nop
 8006562:	3710      	adds	r7, #16
 8006564:	46bd      	mov	sp, r7
 8006566:	bd80      	pop	{r7, pc}
 8006568:	0000007c 	.word	0x0000007c
 800656c:	58021000 	.word	0x58021000
 8006570:	000000fc 	.word	0x000000fc
 8006574:	58020400 	.word	0x58020400
 8006578:	000041fc 	.word	0x000041fc
 800657c:	0000015c 	.word	0x0000015c
 8006580:	00004202 	.word	0x00004202
 8006584:	00004200 	.word	0x00004200
 8006588:	000041f0 	.word	0x000041f0
 800658c:	00004064 	.word	0x00004064
 8006590:	00004204 	.word	0x00004204
 8006594:	00000180 	.word	0x00000180
 8006598:	58021800 	.word	0x58021800
 800659c:	000041ec 	.word	0x000041ec
 80065a0:	24001ef0 	.word	0x24001ef0
 80065a4:	0801e9d0 	.word	0x0801e9d0
 80065a8:	24001eec 	.word	0x24001eec
 80065ac:	ffffd8f0 	.word	0xffffd8f0
 80065b0:	3f266666 	.word	0x3f266666
 80065b4:	00004052 	.word	0x00004052
 80065b8:	3f28f5c3 	.word	0x3f28f5c3
 80065bc:	00004050 	.word	0x00004050
 80065c0:	3f19999a 	.word	0x3f19999a
 80065c4:	00004054 	.word	0x00004054
 80065c8:	00000080 	.word	0x00000080

080065cc <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)//pobieranie znakw z uart
{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b084      	sub	sp, #16
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
	words[command_ch_num] = Received;
 80065d4:	4b24      	ldr	r3, [pc, #144]	@ (8006668 <HAL_UART_RxCpltCallback+0x9c>)
 80065d6:	781b      	ldrb	r3, [r3, #0]
 80065d8:	461a      	mov	r2, r3
 80065da:	4b24      	ldr	r3, [pc, #144]	@ (800666c <HAL_UART_RxCpltCallback+0xa0>)
 80065dc:	7819      	ldrb	r1, [r3, #0]
 80065de:	4b24      	ldr	r3, [pc, #144]	@ (8006670 <HAL_UART_RxCpltCallback+0xa4>)
 80065e0:	5499      	strb	r1, [r3, r2]

	if(words[command_ch_num] == '\r')
 80065e2:	4b21      	ldr	r3, [pc, #132]	@ (8006668 <HAL_UART_RxCpltCallback+0x9c>)
 80065e4:	781b      	ldrb	r3, [r3, #0]
 80065e6:	461a      	mov	r2, r3
 80065e8:	4b21      	ldr	r3, [pc, #132]	@ (8006670 <HAL_UART_RxCpltCallback+0xa4>)
 80065ea:	5c9b      	ldrb	r3, [r3, r2]
 80065ec:	2b0d      	cmp	r3, #13
 80065ee:	d11a      	bne.n	8006626 <HAL_UART_RxCpltCallback+0x5a>
	{
		char Y = '\n';
 80065f0:	230a      	movs	r3, #10
 80065f2:	73fb      	strb	r3, [r7, #15]
		HAL_UART_Transmit(&huart1, (uint8_t *)&Y, 1, 100);
 80065f4:	f107 010f 	add.w	r1, r7, #15
 80065f8:	2364      	movs	r3, #100	@ 0x64
 80065fa:	2201      	movs	r2, #1
 80065fc:	481d      	ldr	r0, [pc, #116]	@ (8006674 <HAL_UART_RxCpltCallback+0xa8>)
 80065fe:	f011 fca1 	bl	8017f44 <HAL_UART_Transmit>
		Y = '\r';
 8006602:	230d      	movs	r3, #13
 8006604:	73fb      	strb	r3, [r7, #15]
		HAL_UART_Transmit(&huart1, (uint8_t *)&Y, 1, 100);
 8006606:	f107 010f 	add.w	r1, r7, #15
 800660a:	2364      	movs	r3, #100	@ 0x64
 800660c:	2201      	movs	r2, #1
 800660e:	4819      	ldr	r0, [pc, #100]	@ (8006674 <HAL_UART_RxCpltCallback+0xa8>)
 8006610:	f011 fc98 	bl	8017f44 <HAL_UART_Transmit>
		words[command_ch_num] = 0;
 8006614:	4b14      	ldr	r3, [pc, #80]	@ (8006668 <HAL_UART_RxCpltCallback+0x9c>)
 8006616:	781b      	ldrb	r3, [r3, #0]
 8006618:	461a      	mov	r2, r3
 800661a:	4b15      	ldr	r3, [pc, #84]	@ (8006670 <HAL_UART_RxCpltCallback+0xa4>)
 800661c:	2100      	movs	r1, #0
 800661e:	5499      	strb	r1, [r3, r2]
		commandready = 1;
 8006620:	4b15      	ldr	r3, [pc, #84]	@ (8006678 <HAL_UART_RxCpltCallback+0xac>)
 8006622:	2201      	movs	r2, #1
 8006624:	701a      	strb	r2, [r3, #0]
	}

	HAL_UART_Transmit_IT(&huart1, (uint8_t *)&words[command_ch_num], 1);
 8006626:	4b10      	ldr	r3, [pc, #64]	@ (8006668 <HAL_UART_RxCpltCallback+0x9c>)
 8006628:	781b      	ldrb	r3, [r3, #0]
 800662a:	461a      	mov	r2, r3
 800662c:	4b10      	ldr	r3, [pc, #64]	@ (8006670 <HAL_UART_RxCpltCallback+0xa4>)
 800662e:	4413      	add	r3, r2
 8006630:	2201      	movs	r2, #1
 8006632:	4619      	mov	r1, r3
 8006634:	480f      	ldr	r0, [pc, #60]	@ (8006674 <HAL_UART_RxCpltCallback+0xa8>)
 8006636:	f011 fd13 	bl	8018060 <HAL_UART_Transmit_IT>
	HAL_UART_Receive_IT(&huart1, &Received, 1);
 800663a:	2201      	movs	r2, #1
 800663c:	490b      	ldr	r1, [pc, #44]	@ (800666c <HAL_UART_RxCpltCallback+0xa0>)
 800663e:	480d      	ldr	r0, [pc, #52]	@ (8006674 <HAL_UART_RxCpltCallback+0xa8>)
 8006640:	f011 fda2 	bl	8018188 <HAL_UART_Receive_IT>
	command_ch_num++;
 8006644:	4b08      	ldr	r3, [pc, #32]	@ (8006668 <HAL_UART_RxCpltCallback+0x9c>)
 8006646:	781b      	ldrb	r3, [r3, #0]
 8006648:	3301      	adds	r3, #1
 800664a:	b2da      	uxtb	r2, r3
 800664c:	4b06      	ldr	r3, [pc, #24]	@ (8006668 <HAL_UART_RxCpltCallback+0x9c>)
 800664e:	701a      	strb	r2, [r3, #0]

	if(commandready == 1)
 8006650:	4b09      	ldr	r3, [pc, #36]	@ (8006678 <HAL_UART_RxCpltCallback+0xac>)
 8006652:	781b      	ldrb	r3, [r3, #0]
 8006654:	2b01      	cmp	r3, #1
 8006656:	d102      	bne.n	800665e <HAL_UART_RxCpltCallback+0x92>
	{
		command_ch_num = 0;
 8006658:	4b03      	ldr	r3, [pc, #12]	@ (8006668 <HAL_UART_RxCpltCallback+0x9c>)
 800665a:	2200      	movs	r2, #0
 800665c:	701a      	strb	r2, [r3, #0]
	}
}
 800665e:	bf00      	nop
 8006660:	3710      	adds	r7, #16
 8006662:	46bd      	mov	sp, r7
 8006664:	bd80      	pop	{r7, pc}
 8006666:	bf00      	nop
 8006668:	000041df 	.word	0x000041df
 800666c:	000041e0 	.word	0x000041e0
 8006670:	000041d4 	.word	0x000041d4
 8006674:	240004b4 	.word	0x240004b4
 8006678:	000041de 	.word	0x000041de
 800667c:	00000000 	.word	0x00000000

08006680 <HAL_I2C_MemRxCpltCallback>:

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c){
 8006680:	b580      	push	{r7, lr}
 8006682:	b084      	sub	sp, #16
 8006684:	af02      	add	r7, sp, #8
 8006686:	6078      	str	r0, [r7, #4]
	if(MPU6050_IRQ == 1){
 8006688:	4bba      	ldr	r3, [pc, #744]	@ (8006974 <HAL_I2C_MemRxCpltCallback+0x2f4>)
 800668a:	781b      	ldrb	r3, [r3, #0]
 800668c:	2b01      	cmp	r3, #1
 800668e:	f040 85a5 	bne.w	80071dc <HAL_I2C_MemRxCpltCallback+0xb5c>
			MPU6050_IRQ = 0;
 8006692:	4bb8      	ldr	r3, [pc, #736]	@ (8006974 <HAL_I2C_MemRxCpltCallback+0x2f4>)
 8006694:	2200      	movs	r2, #0
 8006696:	701a      	strb	r2, [r3, #0]
			LED_G_1;
 8006698:	2201      	movs	r2, #1
 800669a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800669e:	48b6      	ldr	r0, [pc, #728]	@ (8006978 <HAL_I2C_MemRxCpltCallback+0x2f8>)
 80066a0:	f008 f8a8 	bl	800e7f4 <HAL_GPIO_WritePin>

			MPU6050_GET_CALANDSCL_IT(&ax, &ay, &az, &gx, &gy, &gz, accelx_cal, accely_cal, accelz_cal, gyrox_cal, gyroy_cal, gyroz_cal, Gyr_Scale, Acc_Scale);
 80066a4:	4bb5      	ldr	r3, [pc, #724]	@ (800697c <HAL_I2C_MemRxCpltCallback+0x2fc>)
 80066a6:	edd3 7a00 	vldr	s15, [r3]
 80066aa:	4bb5      	ldr	r3, [pc, #724]	@ (8006980 <HAL_I2C_MemRxCpltCallback+0x300>)
 80066ac:	ed93 7a00 	vldr	s14, [r3]
 80066b0:	4bb4      	ldr	r3, [pc, #720]	@ (8006984 <HAL_I2C_MemRxCpltCallback+0x304>)
 80066b2:	edd3 6a00 	vldr	s13, [r3]
 80066b6:	4bb4      	ldr	r3, [pc, #720]	@ (8006988 <HAL_I2C_MemRxCpltCallback+0x308>)
 80066b8:	ed93 6a00 	vldr	s12, [r3]
 80066bc:	4bb3      	ldr	r3, [pc, #716]	@ (800698c <HAL_I2C_MemRxCpltCallback+0x30c>)
 80066be:	edd3 5a00 	vldr	s11, [r3]
 80066c2:	4bb3      	ldr	r3, [pc, #716]	@ (8006990 <HAL_I2C_MemRxCpltCallback+0x310>)
 80066c4:	ed93 5a00 	vldr	s10, [r3]
 80066c8:	eddf 4ab2 	vldr	s9, [pc, #712]	@ 8006994 <HAL_I2C_MemRxCpltCallback+0x314>
 80066cc:	ed9f 4ab2 	vldr	s8, [pc, #712]	@ 8006998 <HAL_I2C_MemRxCpltCallback+0x318>
 80066d0:	4bb2      	ldr	r3, [pc, #712]	@ (800699c <HAL_I2C_MemRxCpltCallback+0x31c>)
 80066d2:	9301      	str	r3, [sp, #4]
 80066d4:	4bb2      	ldr	r3, [pc, #712]	@ (80069a0 <HAL_I2C_MemRxCpltCallback+0x320>)
 80066d6:	9300      	str	r3, [sp, #0]
 80066d8:	eef0 3a44 	vmov.f32	s7, s8
 80066dc:	eeb0 3a64 	vmov.f32	s6, s9
 80066e0:	eef0 2a45 	vmov.f32	s5, s10
 80066e4:	eeb0 2a65 	vmov.f32	s4, s11
 80066e8:	eef0 1a46 	vmov.f32	s3, s12
 80066ec:	eeb0 1a66 	vmov.f32	s2, s13
 80066f0:	eef0 0a47 	vmov.f32	s1, s14
 80066f4:	eeb0 0a67 	vmov.f32	s0, s15
 80066f8:	4baa      	ldr	r3, [pc, #680]	@ (80069a4 <HAL_I2C_MemRxCpltCallback+0x324>)
 80066fa:	4aab      	ldr	r2, [pc, #684]	@ (80069a8 <HAL_I2C_MemRxCpltCallback+0x328>)
 80066fc:	49ab      	ldr	r1, [pc, #684]	@ (80069ac <HAL_I2C_MemRxCpltCallback+0x32c>)
 80066fe:	48ac      	ldr	r0, [pc, #688]	@ (80069b0 <HAL_I2C_MemRxCpltCallback+0x330>)
 8006700:	f7fb f880 	bl	8001804 <MPU6050_GET_CALANDSCL_IT>
			MPU6050_GET_ACCEL_TO_ANGLE(ax, ay, az, &ax_ang, &ay_ang/*, &az_ang*/);
 8006704:	4baa      	ldr	r3, [pc, #680]	@ (80069b0 <HAL_I2C_MemRxCpltCallback+0x330>)
 8006706:	edd3 7a00 	vldr	s15, [r3]
 800670a:	4ba8      	ldr	r3, [pc, #672]	@ (80069ac <HAL_I2C_MemRxCpltCallback+0x32c>)
 800670c:	ed93 7a00 	vldr	s14, [r3]
 8006710:	4ba5      	ldr	r3, [pc, #660]	@ (80069a8 <HAL_I2C_MemRxCpltCallback+0x328>)
 8006712:	edd3 6a00 	vldr	s13, [r3]
 8006716:	49a7      	ldr	r1, [pc, #668]	@ (80069b4 <HAL_I2C_MemRxCpltCallback+0x334>)
 8006718:	48a7      	ldr	r0, [pc, #668]	@ (80069b8 <HAL_I2C_MemRxCpltCallback+0x338>)
 800671a:	eeb0 1a66 	vmov.f32	s2, s13
 800671e:	eef0 0a47 	vmov.f32	s1, s14
 8006722:	eeb0 0a67 	vmov.f32	s0, s15
 8006726:	f7fa ff13 	bl	8001550 <MPU6050_GET_ACCEL_TO_ANGLE>
			MPU6050_GET_ACCANDGYR_FILTRED(&data, ax_ang, ay_ang, Mag_Z, gx, gy, gz);
 800672a:	4ba3      	ldr	r3, [pc, #652]	@ (80069b8 <HAL_I2C_MemRxCpltCallback+0x338>)
 800672c:	edd3 7a00 	vldr	s15, [r3]
 8006730:	4ba0      	ldr	r3, [pc, #640]	@ (80069b4 <HAL_I2C_MemRxCpltCallback+0x334>)
 8006732:	ed93 7a00 	vldr	s14, [r3]
 8006736:	4ba1      	ldr	r3, [pc, #644]	@ (80069bc <HAL_I2C_MemRxCpltCallback+0x33c>)
 8006738:	edd3 6a00 	vldr	s13, [r3]
 800673c:	4b99      	ldr	r3, [pc, #612]	@ (80069a4 <HAL_I2C_MemRxCpltCallback+0x324>)
 800673e:	ed93 6a00 	vldr	s12, [r3]
 8006742:	4b97      	ldr	r3, [pc, #604]	@ (80069a0 <HAL_I2C_MemRxCpltCallback+0x320>)
 8006744:	edd3 5a00 	vldr	s11, [r3]
 8006748:	4b94      	ldr	r3, [pc, #592]	@ (800699c <HAL_I2C_MemRxCpltCallback+0x31c>)
 800674a:	ed93 5a00 	vldr	s10, [r3]
 800674e:	eef0 2a45 	vmov.f32	s5, s10
 8006752:	eeb0 2a65 	vmov.f32	s4, s11
 8006756:	eef0 1a46 	vmov.f32	s3, s12
 800675a:	eeb0 1a66 	vmov.f32	s2, s13
 800675e:	eef0 0a47 	vmov.f32	s1, s14
 8006762:	eeb0 0a67 	vmov.f32	s0, s15
 8006766:	4896      	ldr	r0, [pc, #600]	@ (80069c0 <HAL_I2C_MemRxCpltCallback+0x340>)
 8006768:	f7fb f8f6 	bl	8001958 <MPU6050_GET_ACCANDGYR_FILTRED>


			now_pitch = data.x;
 800676c:	4b94      	ldr	r3, [pc, #592]	@ (80069c0 <HAL_I2C_MemRxCpltCallback+0x340>)
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	4a94      	ldr	r2, [pc, #592]	@ (80069c4 <HAL_I2C_MemRxCpltCallback+0x344>)
 8006772:	6013      	str	r3, [r2, #0]
			now_rool = data.y;
 8006774:	4b92      	ldr	r3, [pc, #584]	@ (80069c0 <HAL_I2C_MemRxCpltCallback+0x340>)
 8006776:	685b      	ldr	r3, [r3, #4]
 8006778:	4a93      	ldr	r2, [pc, #588]	@ (80069c8 <HAL_I2C_MemRxCpltCallback+0x348>)
 800677a:	6013      	str	r3, [r2, #0]
			now_yaw = data.z;
 800677c:	4b90      	ldr	r3, [pc, #576]	@ (80069c0 <HAL_I2C_MemRxCpltCallback+0x340>)
 800677e:	689b      	ldr	r3, [r3, #8]
 8006780:	4a92      	ldr	r2, [pc, #584]	@ (80069cc <HAL_I2C_MemRxCpltCallback+0x34c>)
 8006782:	6013      	str	r3, [r2, #0]


			wanted_rool = (float)wanted_rool_rx/10;
 8006784:	4b92      	ldr	r3, [pc, #584]	@ (80069d0 <HAL_I2C_MemRxCpltCallback+0x350>)
 8006786:	f9b3 3000 	ldrsh.w	r3, [r3]
 800678a:	ee07 3a90 	vmov	s15, r3
 800678e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006792:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8006796:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800679a:	4b8e      	ldr	r3, [pc, #568]	@ (80069d4 <HAL_I2C_MemRxCpltCallback+0x354>)
 800679c:	edc3 7a00 	vstr	s15, [r3]
			wanted_pitch = (float)wanted_pitch_rx/10;
 80067a0:	4b8d      	ldr	r3, [pc, #564]	@ (80069d8 <HAL_I2C_MemRxCpltCallback+0x358>)
 80067a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80067a6:	ee07 3a90 	vmov	s15, r3
 80067aa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80067ae:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 80067b2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80067b6:	4b89      	ldr	r3, [pc, #548]	@ (80069dc <HAL_I2C_MemRxCpltCallback+0x35c>)
 80067b8:	edc3 7a00 	vstr	s15, [r3]
			wanted_yaw = 0;//(float)wanted_yaw_rx/10;
 80067bc:	4b88      	ldr	r3, [pc, #544]	@ (80069e0 <HAL_I2C_MemRxCpltCallback+0x360>)
 80067be:	f04f 0200 	mov.w	r2, #0
 80067c2:	601a      	str	r2, [r3, #0]
				  			/*
				  				 * FDP
				  				 */
			wanted_rool = (wanted_rool * (FDP_FQ * looptime) / (1 + (FDP_FQ * looptime))) + (last_wanted_rool_rx * (1 / (1 + (FDP_FQ * looptime))));
 80067c4:	eddf 7a87 	vldr	s15, [pc, #540]	@ 80069e4 <HAL_I2C_MemRxCpltCallback+0x364>
 80067c8:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80067cc:	4b81      	ldr	r3, [pc, #516]	@ (80069d4 <HAL_I2C_MemRxCpltCallback+0x354>)
 80067ce:	edd3 7a00 	vldr	s15, [r3]
 80067d2:	ee67 6a27 	vmul.f32	s13, s14, s15
 80067d6:	eddf 7a83 	vldr	s15, [pc, #524]	@ 80069e4 <HAL_I2C_MemRxCpltCallback+0x364>
 80067da:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80067de:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80067e2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80067e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80067ea:	eddf 7a7e 	vldr	s15, [pc, #504]	@ 80069e4 <HAL_I2C_MemRxCpltCallback+0x364>
 80067ee:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80067f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80067f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80067fa:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 80067fe:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8006802:	4b79      	ldr	r3, [pc, #484]	@ (80069e8 <HAL_I2C_MemRxCpltCallback+0x368>)
 8006804:	edd3 7a00 	vldr	s15, [r3]
 8006808:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800680c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006810:	4b70      	ldr	r3, [pc, #448]	@ (80069d4 <HAL_I2C_MemRxCpltCallback+0x354>)
 8006812:	edc3 7a00 	vstr	s15, [r3]
			wanted_pitch = (wanted_pitch * (FDP_FQ * looptime) / (1 + (FDP_FQ * looptime))) + (last_wanted_pitch_rx * (1 / (1 + (FDP_FQ * looptime))));
 8006816:	eddf 7a73 	vldr	s15, [pc, #460]	@ 80069e4 <HAL_I2C_MemRxCpltCallback+0x364>
 800681a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800681e:	4b6f      	ldr	r3, [pc, #444]	@ (80069dc <HAL_I2C_MemRxCpltCallback+0x35c>)
 8006820:	edd3 7a00 	vldr	s15, [r3]
 8006824:	ee67 6a27 	vmul.f32	s13, s14, s15
 8006828:	eddf 7a6e 	vldr	s15, [pc, #440]	@ 80069e4 <HAL_I2C_MemRxCpltCallback+0x364>
 800682c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8006830:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006834:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006838:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800683c:	eddf 7a69 	vldr	s15, [pc, #420]	@ 80069e4 <HAL_I2C_MemRxCpltCallback+0x364>
 8006840:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8006844:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006848:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800684c:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8006850:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8006854:	4b65      	ldr	r3, [pc, #404]	@ (80069ec <HAL_I2C_MemRxCpltCallback+0x36c>)
 8006856:	edd3 7a00 	vldr	s15, [r3]
 800685a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800685e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006862:	4b5e      	ldr	r3, [pc, #376]	@ (80069dc <HAL_I2C_MemRxCpltCallback+0x35c>)
 8006864:	edc3 7a00 	vstr	s15, [r3]
			wanted_yaw = (wanted_yaw * (FDP_FQ * looptime) / (1 + (FDP_FQ * looptime))) + (last_wanted_yaw_rx * (1 / (1 + (FDP_FQ * looptime))));
 8006868:	eddf 7a5e 	vldr	s15, [pc, #376]	@ 80069e4 <HAL_I2C_MemRxCpltCallback+0x364>
 800686c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8006870:	4b5b      	ldr	r3, [pc, #364]	@ (80069e0 <HAL_I2C_MemRxCpltCallback+0x360>)
 8006872:	edd3 7a00 	vldr	s15, [r3]
 8006876:	ee67 6a27 	vmul.f32	s13, s14, s15
 800687a:	eddf 7a5a 	vldr	s15, [pc, #360]	@ 80069e4 <HAL_I2C_MemRxCpltCallback+0x364>
 800687e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8006882:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006886:	ee77 7a87 	vadd.f32	s15, s15, s14
 800688a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800688e:	eddf 7a55 	vldr	s15, [pc, #340]	@ 80069e4 <HAL_I2C_MemRxCpltCallback+0x364>
 8006892:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8006896:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800689a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800689e:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 80068a2:	eec6 6a27 	vdiv.f32	s13, s12, s15
 80068a6:	4b52      	ldr	r3, [pc, #328]	@ (80069f0 <HAL_I2C_MemRxCpltCallback+0x370>)
 80068a8:	edd3 7a00 	vldr	s15, [r3]
 80068ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80068b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80068b4:	4b4a      	ldr	r3, [pc, #296]	@ (80069e0 <HAL_I2C_MemRxCpltCallback+0x360>)
 80068b6:	edc3 7a00 	vstr	s15, [r3]


			last_wanted_rool_rx = wanted_rool;
 80068ba:	4b46      	ldr	r3, [pc, #280]	@ (80069d4 <HAL_I2C_MemRxCpltCallback+0x354>)
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	4a4a      	ldr	r2, [pc, #296]	@ (80069e8 <HAL_I2C_MemRxCpltCallback+0x368>)
 80068c0:	6013      	str	r3, [r2, #0]
			last_wanted_pitch_rx = wanted_pitch;
 80068c2:	4b46      	ldr	r3, [pc, #280]	@ (80069dc <HAL_I2C_MemRxCpltCallback+0x35c>)
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	4a49      	ldr	r2, [pc, #292]	@ (80069ec <HAL_I2C_MemRxCpltCallback+0x36c>)
 80068c8:	6013      	str	r3, [r2, #0]
			last_wanted_yaw_rx = wanted_yaw;
 80068ca:	4b45      	ldr	r3, [pc, #276]	@ (80069e0 <HAL_I2C_MemRxCpltCallback+0x360>)
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	4a48      	ldr	r2, [pc, #288]	@ (80069f0 <HAL_I2C_MemRxCpltCallback+0x370>)
 80068d0:	6013      	str	r3, [r2, #0]


		  	pitch_error = wanted_pitch - now_pitch;
 80068d2:	4b42      	ldr	r3, [pc, #264]	@ (80069dc <HAL_I2C_MemRxCpltCallback+0x35c>)
 80068d4:	ed93 7a00 	vldr	s14, [r3]
 80068d8:	4b3a      	ldr	r3, [pc, #232]	@ (80069c4 <HAL_I2C_MemRxCpltCallback+0x344>)
 80068da:	edd3 7a00 	vldr	s15, [r3]
 80068de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80068e2:	4b44      	ldr	r3, [pc, #272]	@ (80069f4 <HAL_I2C_MemRxCpltCallback+0x374>)
 80068e4:	edc3 7a00 	vstr	s15, [r3]
		  	rool_error = wanted_rool - now_rool;
 80068e8:	4b3a      	ldr	r3, [pc, #232]	@ (80069d4 <HAL_I2C_MemRxCpltCallback+0x354>)
 80068ea:	ed93 7a00 	vldr	s14, [r3]
 80068ee:	4b36      	ldr	r3, [pc, #216]	@ (80069c8 <HAL_I2C_MemRxCpltCallback+0x348>)
 80068f0:	edd3 7a00 	vldr	s15, [r3]
 80068f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80068f8:	4b3f      	ldr	r3, [pc, #252]	@ (80069f8 <HAL_I2C_MemRxCpltCallback+0x378>)
 80068fa:	edc3 7a00 	vstr	s15, [r3]
		  	yaw_error = wanted_yaw - now_yaw;
 80068fe:	4b38      	ldr	r3, [pc, #224]	@ (80069e0 <HAL_I2C_MemRxCpltCallback+0x360>)
 8006900:	ed93 7a00 	vldr	s14, [r3]
 8006904:	4b31      	ldr	r3, [pc, #196]	@ (80069cc <HAL_I2C_MemRxCpltCallback+0x34c>)
 8006906:	edd3 7a00 	vldr	s15, [r3]
 800690a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800690e:	4b3b      	ldr	r3, [pc, #236]	@ (80069fc <HAL_I2C_MemRxCpltCallback+0x37c>)
 8006910:	edc3 7a00 	vstr	s15, [r3]
		  	pitch_ar_error = pid_pitch - gx;
 8006914:	4b3a      	ldr	r3, [pc, #232]	@ (8006a00 <HAL_I2C_MemRxCpltCallback+0x380>)
 8006916:	ed93 7a00 	vldr	s14, [r3]
 800691a:	4b22      	ldr	r3, [pc, #136]	@ (80069a4 <HAL_I2C_MemRxCpltCallback+0x324>)
 800691c:	edd3 7a00 	vldr	s15, [r3]
 8006920:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006924:	4b37      	ldr	r3, [pc, #220]	@ (8006a04 <HAL_I2C_MemRxCpltCallback+0x384>)
 8006926:	edc3 7a00 	vstr	s15, [r3]
		  	rool_ar_error = pid_rool - gy;
 800692a:	4b37      	ldr	r3, [pc, #220]	@ (8006a08 <HAL_I2C_MemRxCpltCallback+0x388>)
 800692c:	ed93 7a00 	vldr	s14, [r3]
 8006930:	4b1b      	ldr	r3, [pc, #108]	@ (80069a0 <HAL_I2C_MemRxCpltCallback+0x320>)
 8006932:	edd3 7a00 	vldr	s15, [r3]
 8006936:	ee77 7a67 	vsub.f32	s15, s14, s15
 800693a:	4b34      	ldr	r3, [pc, #208]	@ (8006a0c <HAL_I2C_MemRxCpltCallback+0x38c>)
 800693c:	edc3 7a00 	vstr	s15, [r3]
		  	yaw_ar_error = pid_yaw - gz;
 8006940:	4b33      	ldr	r3, [pc, #204]	@ (8006a10 <HAL_I2C_MemRxCpltCallback+0x390>)
 8006942:	ed93 7a00 	vldr	s14, [r3]
 8006946:	4b15      	ldr	r3, [pc, #84]	@ (800699c <HAL_I2C_MemRxCpltCallback+0x31c>)
 8006948:	edd3 7a00 	vldr	s15, [r3]
 800694c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006950:	4b30      	ldr	r3, [pc, #192]	@ (8006a14 <HAL_I2C_MemRxCpltCallback+0x394>)
 8006952:	edc3 7a00 	vstr	s15, [r3]


			error_sum_pitch = (MYDRON.PITCH_STA != 0) ? error_sum_pitch : error_sum_pitch + (pitch_error);//pitch_error -> pitch_error
 8006956:	4b30      	ldr	r3, [pc, #192]	@ (8006a18 <HAL_I2C_MemRxCpltCallback+0x398>)
 8006958:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800695c:	2b00      	cmp	r3, #0
 800695e:	d05f      	beq.n	8006a20 <HAL_I2C_MemRxCpltCallback+0x3a0>
 8006960:	4b2e      	ldr	r3, [pc, #184]	@ (8006a1c <HAL_I2C_MemRxCpltCallback+0x39c>)
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	ee07 3a90 	vmov	s15, r3
 8006968:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800696c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006970:	e063      	b.n	8006a3a <HAL_I2C_MemRxCpltCallback+0x3ba>
 8006972:	bf00      	nop
 8006974:	000041f4 	.word	0x000041f4
 8006978:	58021000 	.word	0x58021000
 800697c:	00000030 	.word	0x00000030
 8006980:	00000034 	.word	0x00000034
 8006984:	00000038 	.word	0x00000038
 8006988:	0000003c 	.word	0x0000003c
 800698c:	00000040 	.word	0x00000040
 8006990:	00000044 	.word	0x00000044
 8006994:	42830000 	.word	0x42830000
 8006998:	46000000 	.word	0x46000000
 800699c:	00000014 	.word	0x00000014
 80069a0:	00000010 	.word	0x00000010
 80069a4:	0000000c 	.word	0x0000000c
 80069a8:	00000008 	.word	0x00000008
 80069ac:	00000004 	.word	0x00000004
 80069b0:	00000000 	.word	0x00000000
 80069b4:	0000001c 	.word	0x0000001c
 80069b8:	00000018 	.word	0x00000018
 80069bc:	00000058 	.word	0x00000058
 80069c0:	00000084 	.word	0x00000084
 80069c4:	00004080 	.word	0x00004080
 80069c8:	00004084 	.word	0x00004084
 80069cc:	00004088 	.word	0x00004088
 80069d0:	00004052 	.word	0x00004052
 80069d4:	00004074 	.word	0x00004074
 80069d8:	00004050 	.word	0x00004050
 80069dc:	00004070 	.word	0x00004070
 80069e0:	00004078 	.word	0x00004078
 80069e4:	3a83126f 	.word	0x3a83126f
 80069e8:	0000405c 	.word	0x0000405c
 80069ec:	00004058 	.word	0x00004058
 80069f0:	00004060 	.word	0x00004060
 80069f4:	0000408c 	.word	0x0000408c
 80069f8:	00004090 	.word	0x00004090
 80069fc:	00004094 	.word	0x00004094
 8006a00:	000040d4 	.word	0x000040d4
 8006a04:	00004098 	.word	0x00004098
 8006a08:	000040dc 	.word	0x000040dc
 8006a0c:	0000409c 	.word	0x0000409c
 8006a10:	000040d8 	.word	0x000040d8
 8006a14:	000040a0 	.word	0x000040a0
 8006a18:	00000180 	.word	0x00000180
 8006a1c:	000040bc 	.word	0x000040bc
 8006a20:	4ba4      	ldr	r3, [pc, #656]	@ (8006cb4 <HAL_I2C_MemRxCpltCallback+0x634>)
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	ee07 3a90 	vmov	s15, r3
 8006a28:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006a2c:	4ba2      	ldr	r3, [pc, #648]	@ (8006cb8 <HAL_I2C_MemRxCpltCallback+0x638>)
 8006a2e:	edd3 7a00 	vldr	s15, [r3]
 8006a32:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006a36:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006a3a:	4b9e      	ldr	r3, [pc, #632]	@ (8006cb4 <HAL_I2C_MemRxCpltCallback+0x634>)
 8006a3c:	edc3 7a00 	vstr	s15, [r3]
			error_sum_rool = (MYDRON.ROOL_STA != 0) ? error_sum_rool : error_sum_rool + (rool_error);//rool_error
 8006a40:	4b9e      	ldr	r3, [pc, #632]	@ (8006cbc <HAL_I2C_MemRxCpltCallback+0x63c>)
 8006a42:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d008      	beq.n	8006a5c <HAL_I2C_MemRxCpltCallback+0x3dc>
 8006a4a:	4b9d      	ldr	r3, [pc, #628]	@ (8006cc0 <HAL_I2C_MemRxCpltCallback+0x640>)
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	ee07 3a90 	vmov	s15, r3
 8006a52:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006a56:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006a5a:	e00c      	b.n	8006a76 <HAL_I2C_MemRxCpltCallback+0x3f6>
 8006a5c:	4b98      	ldr	r3, [pc, #608]	@ (8006cc0 <HAL_I2C_MemRxCpltCallback+0x640>)
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	ee07 3a90 	vmov	s15, r3
 8006a64:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006a68:	4b96      	ldr	r3, [pc, #600]	@ (8006cc4 <HAL_I2C_MemRxCpltCallback+0x644>)
 8006a6a:	edd3 7a00 	vldr	s15, [r3]
 8006a6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006a72:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006a76:	4b92      	ldr	r3, [pc, #584]	@ (8006cc0 <HAL_I2C_MemRxCpltCallback+0x640>)
 8006a78:	edc3 7a00 	vstr	s15, [r3]
			error_sum_yaw = (MYDRON.YAW_STA != 0) ? error_sum_yaw : error_sum_yaw + (yaw_error);//yaw_error
 8006a7c:	4b8f      	ldr	r3, [pc, #572]	@ (8006cbc <HAL_I2C_MemRxCpltCallback+0x63c>)
 8006a7e:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d008      	beq.n	8006a98 <HAL_I2C_MemRxCpltCallback+0x418>
 8006a86:	4b90      	ldr	r3, [pc, #576]	@ (8006cc8 <HAL_I2C_MemRxCpltCallback+0x648>)
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	ee07 3a90 	vmov	s15, r3
 8006a8e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006a92:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006a96:	e00c      	b.n	8006ab2 <HAL_I2C_MemRxCpltCallback+0x432>
 8006a98:	4b8b      	ldr	r3, [pc, #556]	@ (8006cc8 <HAL_I2C_MemRxCpltCallback+0x648>)
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	ee07 3a90 	vmov	s15, r3
 8006aa0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006aa4:	4b89      	ldr	r3, [pc, #548]	@ (8006ccc <HAL_I2C_MemRxCpltCallback+0x64c>)
 8006aa6:	edd3 7a00 	vldr	s15, [r3]
 8006aaa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006aae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006ab2:	4b85      	ldr	r3, [pc, #532]	@ (8006cc8 <HAL_I2C_MemRxCpltCallback+0x648>)
 8006ab4:	edc3 7a00 	vstr	s15, [r3]

			error_sum_angular_rate_pitch = (MYDRON.PITCH_STA != 0) ? error_sum_angular_rate_pitch : error_sum_angular_rate_pitch + (pitch_ar_error);//pitch_ar_error
 8006ab8:	4b80      	ldr	r3, [pc, #512]	@ (8006cbc <HAL_I2C_MemRxCpltCallback+0x63c>)
 8006aba:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d008      	beq.n	8006ad4 <HAL_I2C_MemRxCpltCallback+0x454>
 8006ac2:	4b83      	ldr	r3, [pc, #524]	@ (8006cd0 <HAL_I2C_MemRxCpltCallback+0x650>)
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	ee07 3a90 	vmov	s15, r3
 8006aca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006ace:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006ad2:	e00c      	b.n	8006aee <HAL_I2C_MemRxCpltCallback+0x46e>
 8006ad4:	4b7e      	ldr	r3, [pc, #504]	@ (8006cd0 <HAL_I2C_MemRxCpltCallback+0x650>)
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	ee07 3a90 	vmov	s15, r3
 8006adc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006ae0:	4b7c      	ldr	r3, [pc, #496]	@ (8006cd4 <HAL_I2C_MemRxCpltCallback+0x654>)
 8006ae2:	edd3 7a00 	vldr	s15, [r3]
 8006ae6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006aea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006aee:	4b78      	ldr	r3, [pc, #480]	@ (8006cd0 <HAL_I2C_MemRxCpltCallback+0x650>)
 8006af0:	edc3 7a00 	vstr	s15, [r3]
			error_sum_angular_rate_rool = (MYDRON.ROOL_STA != 0) ? error_sum_angular_rate_rool : error_sum_angular_rate_rool + (rool_ar_error);
 8006af4:	4b71      	ldr	r3, [pc, #452]	@ (8006cbc <HAL_I2C_MemRxCpltCallback+0x63c>)
 8006af6:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d008      	beq.n	8006b10 <HAL_I2C_MemRxCpltCallback+0x490>
 8006afe:	4b76      	ldr	r3, [pc, #472]	@ (8006cd8 <HAL_I2C_MemRxCpltCallback+0x658>)
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	ee07 3a90 	vmov	s15, r3
 8006b06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006b0a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006b0e:	e00c      	b.n	8006b2a <HAL_I2C_MemRxCpltCallback+0x4aa>
 8006b10:	4b71      	ldr	r3, [pc, #452]	@ (8006cd8 <HAL_I2C_MemRxCpltCallback+0x658>)
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	ee07 3a90 	vmov	s15, r3
 8006b18:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006b1c:	4b6f      	ldr	r3, [pc, #444]	@ (8006cdc <HAL_I2C_MemRxCpltCallback+0x65c>)
 8006b1e:	edd3 7a00 	vldr	s15, [r3]
 8006b22:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006b26:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006b2a:	4b6b      	ldr	r3, [pc, #428]	@ (8006cd8 <HAL_I2C_MemRxCpltCallback+0x658>)
 8006b2c:	edc3 7a00 	vstr	s15, [r3]
			error_sum_angular_rate_yaw = (MYDRON.YAW_STA != 0) ? error_sum_angular_rate_yaw : error_sum_angular_rate_yaw + (yaw_ar_error);
 8006b30:	4b62      	ldr	r3, [pc, #392]	@ (8006cbc <HAL_I2C_MemRxCpltCallback+0x63c>)
 8006b32:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d008      	beq.n	8006b4c <HAL_I2C_MemRxCpltCallback+0x4cc>
 8006b3a:	4b69      	ldr	r3, [pc, #420]	@ (8006ce0 <HAL_I2C_MemRxCpltCallback+0x660>)
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	ee07 3a90 	vmov	s15, r3
 8006b42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006b46:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006b4a:	e00c      	b.n	8006b66 <HAL_I2C_MemRxCpltCallback+0x4e6>
 8006b4c:	4b64      	ldr	r3, [pc, #400]	@ (8006ce0 <HAL_I2C_MemRxCpltCallback+0x660>)
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	ee07 3a90 	vmov	s15, r3
 8006b54:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006b58:	4b62      	ldr	r3, [pc, #392]	@ (8006ce4 <HAL_I2C_MemRxCpltCallback+0x664>)
 8006b5a:	edd3 7a00 	vldr	s15, [r3]
 8006b5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006b62:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006b66:	4b5e      	ldr	r3, [pc, #376]	@ (8006ce0 <HAL_I2C_MemRxCpltCallback+0x660>)
 8006b68:	edc3 7a00 	vstr	s15, [r3]


			PID_cal(&pid_pitch, PID_FAC_Pitch, 1);// angle control
 8006b6c:	2201      	movs	r2, #1
 8006b6e:	495e      	ldr	r1, [pc, #376]	@ (8006ce8 <HAL_I2C_MemRxCpltCallback+0x668>)
 8006b70:	485e      	ldr	r0, [pc, #376]	@ (8006cec <HAL_I2C_MemRxCpltCallback+0x66c>)
 8006b72:	f7fc ff5f 	bl	8003a34 <PID_cal>
			PID_cal(&pid_rool, PID_FAC_Rool, 2);
 8006b76:	2202      	movs	r2, #2
 8006b78:	495d      	ldr	r1, [pc, #372]	@ (8006cf0 <HAL_I2C_MemRxCpltCallback+0x670>)
 8006b7a:	485e      	ldr	r0, [pc, #376]	@ (8006cf4 <HAL_I2C_MemRxCpltCallback+0x674>)
 8006b7c:	f7fc ff5a 	bl	8003a34 <PID_cal>
			PID_cal(&pid_yaw, PID_FAC_Yaw, 3);
 8006b80:	2203      	movs	r2, #3
 8006b82:	495d      	ldr	r1, [pc, #372]	@ (8006cf8 <HAL_I2C_MemRxCpltCallback+0x678>)
 8006b84:	485d      	ldr	r0, [pc, #372]	@ (8006cfc <HAL_I2C_MemRxCpltCallback+0x67c>)
 8006b86:	f7fc ff55 	bl	8003a34 <PID_cal>

			PID_cal(&pid_angular_rate_pitch, PID_FAC_Angular_Rate_Pitch, 4);// angle rate control
 8006b8a:	2204      	movs	r2, #4
 8006b8c:	495c      	ldr	r1, [pc, #368]	@ (8006d00 <HAL_I2C_MemRxCpltCallback+0x680>)
 8006b8e:	485d      	ldr	r0, [pc, #372]	@ (8006d04 <HAL_I2C_MemRxCpltCallback+0x684>)
 8006b90:	f7fc ff50 	bl	8003a34 <PID_cal>
			PID_cal(&pid_angular_rate_rool, PID_FAC_Angular_Rate_Rool, 5);
 8006b94:	2205      	movs	r2, #5
 8006b96:	495c      	ldr	r1, [pc, #368]	@ (8006d08 <HAL_I2C_MemRxCpltCallback+0x688>)
 8006b98:	485c      	ldr	r0, [pc, #368]	@ (8006d0c <HAL_I2C_MemRxCpltCallback+0x68c>)
 8006b9a:	f7fc ff4b 	bl	8003a34 <PID_cal>
			PID_cal(&pid_angular_rate_yaw, PID_FAC_Angular_Rate_Yaw, 6);
 8006b9e:	2206      	movs	r2, #6
 8006ba0:	495b      	ldr	r1, [pc, #364]	@ (8006d10 <HAL_I2C_MemRxCpltCallback+0x690>)
 8006ba2:	485c      	ldr	r0, [pc, #368]	@ (8006d14 <HAL_I2C_MemRxCpltCallback+0x694>)
 8006ba4:	f7fc ff46 	bl	8003a34 <PID_cal>


			old_error_pitch = pitch_error;
 8006ba8:	4b43      	ldr	r3, [pc, #268]	@ (8006cb8 <HAL_I2C_MemRxCpltCallback+0x638>)
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	4a5a      	ldr	r2, [pc, #360]	@ (8006d18 <HAL_I2C_MemRxCpltCallback+0x698>)
 8006bae:	6013      	str	r3, [r2, #0]
			old_error_rool = rool_error;
 8006bb0:	4b44      	ldr	r3, [pc, #272]	@ (8006cc4 <HAL_I2C_MemRxCpltCallback+0x644>)
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	4a59      	ldr	r2, [pc, #356]	@ (8006d1c <HAL_I2C_MemRxCpltCallback+0x69c>)
 8006bb6:	6013      	str	r3, [r2, #0]
			old_error_yaw = yaw_error;
 8006bb8:	4b44      	ldr	r3, [pc, #272]	@ (8006ccc <HAL_I2C_MemRxCpltCallback+0x64c>)
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	4a58      	ldr	r2, [pc, #352]	@ (8006d20 <HAL_I2C_MemRxCpltCallback+0x6a0>)
 8006bbe:	6013      	str	r3, [r2, #0]

			old_error_angular_rate_pitch = pitch_ar_error;
 8006bc0:	4b44      	ldr	r3, [pc, #272]	@ (8006cd4 <HAL_I2C_MemRxCpltCallback+0x654>)
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	4a57      	ldr	r2, [pc, #348]	@ (8006d24 <HAL_I2C_MemRxCpltCallback+0x6a4>)
 8006bc6:	6013      	str	r3, [r2, #0]
			old_error_angular_rate_rool = rool_ar_error;
 8006bc8:	4b44      	ldr	r3, [pc, #272]	@ (8006cdc <HAL_I2C_MemRxCpltCallback+0x65c>)
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	4a56      	ldr	r2, [pc, #344]	@ (8006d28 <HAL_I2C_MemRxCpltCallback+0x6a8>)
 8006bce:	6013      	str	r3, [r2, #0]
			old_error_angular_rate_yaw = wanted_yaw - gz;
 8006bd0:	4b56      	ldr	r3, [pc, #344]	@ (8006d2c <HAL_I2C_MemRxCpltCallback+0x6ac>)
 8006bd2:	ed93 7a00 	vldr	s14, [r3]
 8006bd6:	4b56      	ldr	r3, [pc, #344]	@ (8006d30 <HAL_I2C_MemRxCpltCallback+0x6b0>)
 8006bd8:	edd3 7a00 	vldr	s15, [r3]
 8006bdc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006be0:	4b54      	ldr	r3, [pc, #336]	@ (8006d34 <HAL_I2C_MemRxCpltCallback+0x6b4>)
 8006be2:	edc3 7a00 	vstr	s15, [r3]


			MYDRON.ROOL 	= (pid_angular_rate_rool > 5000) ? ROOL_MAX_VAL(): (pid_angular_rate_rool < -5000) ? ROOL_MIN_VAL(): ROOL_GOOD_VAL();
 8006be6:	4b49      	ldr	r3, [pc, #292]	@ (8006d0c <HAL_I2C_MemRxCpltCallback+0x68c>)
 8006be8:	edd3 7a00 	vldr	s15, [r3]
 8006bec:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 8006d38 <HAL_I2C_MemRxCpltCallback+0x6b8>
 8006bf0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006bf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006bf8:	dd04      	ble.n	8006c04 <HAL_I2C_MemRxCpltCallback+0x584>
 8006bfa:	f001 f881 	bl	8007d00 <ROOL_MAX_VAL>
 8006bfe:	4603      	mov	r3, r0
 8006c00:	461a      	mov	r2, r3
 8006c02:	e012      	b.n	8006c2a <HAL_I2C_MemRxCpltCallback+0x5aa>
 8006c04:	4b41      	ldr	r3, [pc, #260]	@ (8006d0c <HAL_I2C_MemRxCpltCallback+0x68c>)
 8006c06:	edd3 7a00 	vldr	s15, [r3]
 8006c0a:	ed9f 7a4c 	vldr	s14, [pc, #304]	@ 8006d3c <HAL_I2C_MemRxCpltCallback+0x6bc>
 8006c0e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006c12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c16:	d504      	bpl.n	8006c22 <HAL_I2C_MemRxCpltCallback+0x5a2>
 8006c18:	f001 f882 	bl	8007d20 <ROOL_MIN_VAL>
 8006c1c:	4603      	mov	r3, r0
 8006c1e:	461a      	mov	r2, r3
 8006c20:	e003      	b.n	8006c2a <HAL_I2C_MemRxCpltCallback+0x5aa>
 8006c22:	f001 f8cd 	bl	8007dc0 <ROOL_GOOD_VAL>
 8006c26:	4603      	mov	r3, r0
 8006c28:	461a      	mov	r2, r3
 8006c2a:	4b24      	ldr	r3, [pc, #144]	@ (8006cbc <HAL_I2C_MemRxCpltCallback+0x63c>)
 8006c2c:	80da      	strh	r2, [r3, #6]
			MYDRON.PITCH 	= (pid_angular_rate_pitch > 5000) ? PITCH_MAX_VAL(): (pid_angular_rate_pitch < -5000) ? PITCH_MIN_VAL(): PITCH_GOOD_VAL();
 8006c2e:	4b35      	ldr	r3, [pc, #212]	@ (8006d04 <HAL_I2C_MemRxCpltCallback+0x684>)
 8006c30:	edd3 7a00 	vldr	s15, [r3]
 8006c34:	ed9f 7a40 	vldr	s14, [pc, #256]	@ 8006d38 <HAL_I2C_MemRxCpltCallback+0x6b8>
 8006c38:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006c3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c40:	dd04      	ble.n	8006c4c <HAL_I2C_MemRxCpltCallback+0x5cc>
 8006c42:	f001 f87d 	bl	8007d40 <PITCH_MAX_VAL>
 8006c46:	4603      	mov	r3, r0
 8006c48:	461a      	mov	r2, r3
 8006c4a:	e012      	b.n	8006c72 <HAL_I2C_MemRxCpltCallback+0x5f2>
 8006c4c:	4b2d      	ldr	r3, [pc, #180]	@ (8006d04 <HAL_I2C_MemRxCpltCallback+0x684>)
 8006c4e:	edd3 7a00 	vldr	s15, [r3]
 8006c52:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 8006d3c <HAL_I2C_MemRxCpltCallback+0x6bc>
 8006c56:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006c5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c5e:	d504      	bpl.n	8006c6a <HAL_I2C_MemRxCpltCallback+0x5ea>
 8006c60:	f001 f87e 	bl	8007d60 <PITCH_MIN_VAL>
 8006c64:	4603      	mov	r3, r0
 8006c66:	461a      	mov	r2, r3
 8006c68:	e003      	b.n	8006c72 <HAL_I2C_MemRxCpltCallback+0x5f2>
 8006c6a:	f001 f8c1 	bl	8007df0 <PITCH_GOOD_VAL>
 8006c6e:	4603      	mov	r3, r0
 8006c70:	461a      	mov	r2, r3
 8006c72:	4b12      	ldr	r3, [pc, #72]	@ (8006cbc <HAL_I2C_MemRxCpltCallback+0x63c>)
 8006c74:	809a      	strh	r2, [r3, #4]
			MYDRON.YAW 		= (pid_angular_rate_yaw > 5000) ? YAW_MAX_VAL(): (pid_angular_rate_yaw < -5000) ? YAW_MIN_VAL(): YAW_GOOD_VAL();
 8006c76:	4b27      	ldr	r3, [pc, #156]	@ (8006d14 <HAL_I2C_MemRxCpltCallback+0x694>)
 8006c78:	edd3 7a00 	vldr	s15, [r3]
 8006c7c:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 8006d38 <HAL_I2C_MemRxCpltCallback+0x6b8>
 8006c80:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006c84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c88:	dd04      	ble.n	8006c94 <HAL_I2C_MemRxCpltCallback+0x614>
 8006c8a:	f001 f879 	bl	8007d80 <YAW_MAX_VAL>
 8006c8e:	4603      	mov	r3, r0
 8006c90:	461a      	mov	r2, r3
 8006c92:	e059      	b.n	8006d48 <HAL_I2C_MemRxCpltCallback+0x6c8>
 8006c94:	4b1f      	ldr	r3, [pc, #124]	@ (8006d14 <HAL_I2C_MemRxCpltCallback+0x694>)
 8006c96:	edd3 7a00 	vldr	s15, [r3]
 8006c9a:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 8006d3c <HAL_I2C_MemRxCpltCallback+0x6bc>
 8006c9e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006ca2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ca6:	d54b      	bpl.n	8006d40 <HAL_I2C_MemRxCpltCallback+0x6c0>
 8006ca8:	f001 f87a 	bl	8007da0 <YAW_MIN_VAL>
 8006cac:	4603      	mov	r3, r0
 8006cae:	461a      	mov	r2, r3
 8006cb0:	e04a      	b.n	8006d48 <HAL_I2C_MemRxCpltCallback+0x6c8>
 8006cb2:	bf00      	nop
 8006cb4:	000040bc 	.word	0x000040bc
 8006cb8:	0000408c 	.word	0x0000408c
 8006cbc:	00000180 	.word	0x00000180
 8006cc0:	000040c0 	.word	0x000040c0
 8006cc4:	00004090 	.word	0x00004090
 8006cc8:	000040c4 	.word	0x000040c4
 8006ccc:	00004094 	.word	0x00004094
 8006cd0:	000040c8 	.word	0x000040c8
 8006cd4:	00004098 	.word	0x00004098
 8006cd8:	000040cc 	.word	0x000040cc
 8006cdc:	0000409c 	.word	0x0000409c
 8006ce0:	000040d0 	.word	0x000040d0
 8006ce4:	000040a0 	.word	0x000040a0
 8006ce8:	00004110 	.word	0x00004110
 8006cec:	000040d4 	.word	0x000040d4
 8006cf0:	00004124 	.word	0x00004124
 8006cf4:	000040dc 	.word	0x000040dc
 8006cf8:	00004138 	.word	0x00004138
 8006cfc:	000040d8 	.word	0x000040d8
 8006d00:	00004170 	.word	0x00004170
 8006d04:	000040e0 	.word	0x000040e0
 8006d08:	00004184 	.word	0x00004184
 8006d0c:	000040e8 	.word	0x000040e8
 8006d10:	00004198 	.word	0x00004198
 8006d14:	000040e4 	.word	0x000040e4
 8006d18:	000040a4 	.word	0x000040a4
 8006d1c:	000040a8 	.word	0x000040a8
 8006d20:	000040ac 	.word	0x000040ac
 8006d24:	000040b0 	.word	0x000040b0
 8006d28:	000040b4 	.word	0x000040b4
 8006d2c:	00004078 	.word	0x00004078
 8006d30:	00000014 	.word	0x00000014
 8006d34:	000040b8 	.word	0x000040b8
 8006d38:	459c4000 	.word	0x459c4000
 8006d3c:	c59c4000 	.word	0xc59c4000
 8006d40:	f001 f86e 	bl	8007e20 <YAW_GOOD_VAL>
 8006d44:	4603      	mov	r3, r0
 8006d46:	461a      	mov	r2, r3
 8006d48:	4bc3      	ldr	r3, [pc, #780]	@ (8007058 <HAL_I2C_MemRxCpltCallback+0x9d8>)
 8006d4a:	811a      	strh	r2, [r3, #8]
//				wanted_thrust = MYDRON.THRUST/wobble_strenght;
//				Wobble_handler();
//			}


			Thrust_filter(1);
 8006d4c:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 8006d50:	f7fc fd46 	bl	80037e0 <Thrust_filter>
			if(MYDRON.THRUST > thrust_limit){
 8006d54:	4bc0      	ldr	r3, [pc, #768]	@ (8007058 <HAL_I2C_MemRxCpltCallback+0x9d8>)
 8006d56:	885b      	ldrh	r3, [r3, #2]
 8006d58:	461a      	mov	r2, r3
 8006d5a:	4bc0      	ldr	r3, [pc, #768]	@ (800705c <HAL_I2C_MemRxCpltCallback+0x9dc>)
 8006d5c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006d60:	429a      	cmp	r2, r3
 8006d62:	dd05      	ble.n	8006d70 <HAL_I2C_MemRxCpltCallback+0x6f0>
				MYDRON.THRUST = thrust_limit;
 8006d64:	4bbd      	ldr	r3, [pc, #756]	@ (800705c <HAL_I2C_MemRxCpltCallback+0x9dc>)
 8006d66:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006d6a:	b29a      	uxth	r2, r3
 8006d6c:	4bba      	ldr	r3, [pc, #744]	@ (8007058 <HAL_I2C_MemRxCpltCallback+0x9d8>)
 8006d6e:	805a      	strh	r2, [r3, #2]
			}


			Stack_Push(WartoscBezwgledna(PID_FAC_Pitch[4]));
 8006d70:	4bbb      	ldr	r3, [pc, #748]	@ (8007060 <HAL_I2C_MemRxCpltCallback+0x9e0>)
 8006d72:	edd3 7a04 	vldr	s15, [r3, #16]
 8006d76:	eeb0 0a67 	vmov.f32	s0, s15
 8006d7a:	f000 fbcb 	bl	8007514 <WartoscBezwgledna>
 8006d7e:	eef0 7a40 	vmov.f32	s15, s0
 8006d82:	eeb0 0a67 	vmov.f32	s0, s15
 8006d86:	f000 ff6f 	bl	8007c68 <Stack_Push>
			Stack_Push(WartoscBezwgledna(PID_FAC_Rool[4]));
 8006d8a:	4bb6      	ldr	r3, [pc, #728]	@ (8007064 <HAL_I2C_MemRxCpltCallback+0x9e4>)
 8006d8c:	edd3 7a04 	vldr	s15, [r3, #16]
 8006d90:	eeb0 0a67 	vmov.f32	s0, s15
 8006d94:	f000 fbbe 	bl	8007514 <WartoscBezwgledna>
 8006d98:	eef0 7a40 	vmov.f32	s15, s0
 8006d9c:	eeb0 0a67 	vmov.f32	s0, s15
 8006da0:	f000 ff62 	bl	8007c68 <Stack_Push>
			Stack_Push(now_pitch);
 8006da4:	4bb0      	ldr	r3, [pc, #704]	@ (8007068 <HAL_I2C_MemRxCpltCallback+0x9e8>)
 8006da6:	edd3 7a00 	vldr	s15, [r3]
 8006daa:	eeb0 0a67 	vmov.f32	s0, s15
 8006dae:	f000 ff5b 	bl	8007c68 <Stack_Push>
			Stack_Push(now_rool);
 8006db2:	4bae      	ldr	r3, [pc, #696]	@ (800706c <HAL_I2C_MemRxCpltCallback+0x9ec>)
 8006db4:	edd3 7a00 	vldr	s15, [r3]
 8006db8:	eeb0 0a67 	vmov.f32	s0, s15
 8006dbc:	f000 ff54 	bl	8007c68 <Stack_Push>


			SPEED1 = (((uint32_t)((MYDRON.THRUST*0.7) + MYDRON.ROOL - MYDRON.PITCH + MYDRON.YAW + min_speed + 500)) < max_speed) ? ((MYDRON.THRUST*0.7) + MYDRON.ROOL - MYDRON.PITCH + MYDRON.YAW + min_speed + 500) : max_speed;//trust 7000 max
 8006dc0:	4ba5      	ldr	r3, [pc, #660]	@ (8007058 <HAL_I2C_MemRxCpltCallback+0x9d8>)
 8006dc2:	885b      	ldrh	r3, [r3, #2]
 8006dc4:	ee07 3a90 	vmov	s15, r3
 8006dc8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006dcc:	ed9f 6b9c 	vldr	d6, [pc, #624]	@ 8007040 <HAL_I2C_MemRxCpltCallback+0x9c0>
 8006dd0:	ee27 6b06 	vmul.f64	d6, d7, d6
 8006dd4:	4ba0      	ldr	r3, [pc, #640]	@ (8007058 <HAL_I2C_MemRxCpltCallback+0x9d8>)
 8006dd6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8006dda:	ee07 3a90 	vmov	s15, r3
 8006dde:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006de2:	ee36 6b07 	vadd.f64	d6, d6, d7
 8006de6:	4b9c      	ldr	r3, [pc, #624]	@ (8007058 <HAL_I2C_MemRxCpltCallback+0x9d8>)
 8006de8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006dec:	ee07 3a90 	vmov	s15, r3
 8006df0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006df4:	ee36 6b47 	vsub.f64	d6, d6, d7
 8006df8:	4b97      	ldr	r3, [pc, #604]	@ (8007058 <HAL_I2C_MemRxCpltCallback+0x9d8>)
 8006dfa:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006dfe:	ee07 3a90 	vmov	s15, r3
 8006e02:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006e06:	ee36 7b07 	vadd.f64	d7, d6, d7
 8006e0a:	ed9f 6b8f 	vldr	d6, [pc, #572]	@ 8007048 <HAL_I2C_MemRxCpltCallback+0x9c8>
 8006e0e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006e12:	ed9f 6b8f 	vldr	d6, [pc, #572]	@ 8007050 <HAL_I2C_MemRxCpltCallback+0x9d0>
 8006e16:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006e1a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006e1e:	ee17 2a90 	vmov	r2, s15
 8006e22:	f644 432b 	movw	r3, #19499	@ 0x4c2b
 8006e26:	429a      	cmp	r2, r3
 8006e28:	d832      	bhi.n	8006e90 <HAL_I2C_MemRxCpltCallback+0x810>
 8006e2a:	4b8b      	ldr	r3, [pc, #556]	@ (8007058 <HAL_I2C_MemRxCpltCallback+0x9d8>)
 8006e2c:	885b      	ldrh	r3, [r3, #2]
 8006e2e:	ee07 3a90 	vmov	s15, r3
 8006e32:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006e36:	ed9f 6b82 	vldr	d6, [pc, #520]	@ 8007040 <HAL_I2C_MemRxCpltCallback+0x9c0>
 8006e3a:	ee27 6b06 	vmul.f64	d6, d7, d6
 8006e3e:	4b86      	ldr	r3, [pc, #536]	@ (8007058 <HAL_I2C_MemRxCpltCallback+0x9d8>)
 8006e40:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8006e44:	ee07 3a90 	vmov	s15, r3
 8006e48:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006e4c:	ee36 6b07 	vadd.f64	d6, d6, d7
 8006e50:	4b81      	ldr	r3, [pc, #516]	@ (8007058 <HAL_I2C_MemRxCpltCallback+0x9d8>)
 8006e52:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006e56:	ee07 3a90 	vmov	s15, r3
 8006e5a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006e5e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8006e62:	4b7d      	ldr	r3, [pc, #500]	@ (8007058 <HAL_I2C_MemRxCpltCallback+0x9d8>)
 8006e64:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006e68:	ee07 3a90 	vmov	s15, r3
 8006e6c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006e70:	ee36 7b07 	vadd.f64	d7, d6, d7
 8006e74:	ed9f 6b74 	vldr	d6, [pc, #464]	@ 8007048 <HAL_I2C_MemRxCpltCallback+0x9c8>
 8006e78:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006e7c:	ed9f 6b74 	vldr	d6, [pc, #464]	@ 8007050 <HAL_I2C_MemRxCpltCallback+0x9d0>
 8006e80:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006e84:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006e88:	ee17 3a90 	vmov	r3, s15
 8006e8c:	b29b      	uxth	r3, r3
 8006e8e:	e001      	b.n	8006e94 <HAL_I2C_MemRxCpltCallback+0x814>
 8006e90:	f644 432c 	movw	r3, #19500	@ 0x4c2c
 8006e94:	4a76      	ldr	r2, [pc, #472]	@ (8007070 <HAL_I2C_MemRxCpltCallback+0x9f0>)
 8006e96:	8013      	strh	r3, [r2, #0]
			SPEED2 = (((uint32_t)((MYDRON.THRUST*0.7) - MYDRON.ROOL - MYDRON.PITCH - MYDRON.YAW + min_speed + 500)) < max_speed) ? ((MYDRON.THRUST*0.7) - MYDRON.ROOL - MYDRON.PITCH - MYDRON.YAW + min_speed + 500) : max_speed;//
 8006e98:	4b6f      	ldr	r3, [pc, #444]	@ (8007058 <HAL_I2C_MemRxCpltCallback+0x9d8>)
 8006e9a:	885b      	ldrh	r3, [r3, #2]
 8006e9c:	ee07 3a90 	vmov	s15, r3
 8006ea0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006ea4:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8007040 <HAL_I2C_MemRxCpltCallback+0x9c0>
 8006ea8:	ee27 6b06 	vmul.f64	d6, d7, d6
 8006eac:	4b6a      	ldr	r3, [pc, #424]	@ (8007058 <HAL_I2C_MemRxCpltCallback+0x9d8>)
 8006eae:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8006eb2:	ee07 3a90 	vmov	s15, r3
 8006eb6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006eba:	ee36 6b47 	vsub.f64	d6, d6, d7
 8006ebe:	4b66      	ldr	r3, [pc, #408]	@ (8007058 <HAL_I2C_MemRxCpltCallback+0x9d8>)
 8006ec0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006ec4:	ee07 3a90 	vmov	s15, r3
 8006ec8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006ecc:	ee36 6b47 	vsub.f64	d6, d6, d7
 8006ed0:	4b61      	ldr	r3, [pc, #388]	@ (8007058 <HAL_I2C_MemRxCpltCallback+0x9d8>)
 8006ed2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006ed6:	ee07 3a90 	vmov	s15, r3
 8006eda:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006ede:	ee36 7b47 	vsub.f64	d7, d6, d7
 8006ee2:	ed9f 6b59 	vldr	d6, [pc, #356]	@ 8007048 <HAL_I2C_MemRxCpltCallback+0x9c8>
 8006ee6:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006eea:	ed9f 6b59 	vldr	d6, [pc, #356]	@ 8007050 <HAL_I2C_MemRxCpltCallback+0x9d0>
 8006eee:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006ef2:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006ef6:	ee17 2a90 	vmov	r2, s15
 8006efa:	f644 432b 	movw	r3, #19499	@ 0x4c2b
 8006efe:	429a      	cmp	r2, r3
 8006f00:	d832      	bhi.n	8006f68 <HAL_I2C_MemRxCpltCallback+0x8e8>
 8006f02:	4b55      	ldr	r3, [pc, #340]	@ (8007058 <HAL_I2C_MemRxCpltCallback+0x9d8>)
 8006f04:	885b      	ldrh	r3, [r3, #2]
 8006f06:	ee07 3a90 	vmov	s15, r3
 8006f0a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006f0e:	ed9f 6b4c 	vldr	d6, [pc, #304]	@ 8007040 <HAL_I2C_MemRxCpltCallback+0x9c0>
 8006f12:	ee27 6b06 	vmul.f64	d6, d7, d6
 8006f16:	4b50      	ldr	r3, [pc, #320]	@ (8007058 <HAL_I2C_MemRxCpltCallback+0x9d8>)
 8006f18:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8006f1c:	ee07 3a90 	vmov	s15, r3
 8006f20:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006f24:	ee36 6b47 	vsub.f64	d6, d6, d7
 8006f28:	4b4b      	ldr	r3, [pc, #300]	@ (8007058 <HAL_I2C_MemRxCpltCallback+0x9d8>)
 8006f2a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006f2e:	ee07 3a90 	vmov	s15, r3
 8006f32:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006f36:	ee36 6b47 	vsub.f64	d6, d6, d7
 8006f3a:	4b47      	ldr	r3, [pc, #284]	@ (8007058 <HAL_I2C_MemRxCpltCallback+0x9d8>)
 8006f3c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006f40:	ee07 3a90 	vmov	s15, r3
 8006f44:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006f48:	ee36 7b47 	vsub.f64	d7, d6, d7
 8006f4c:	ed9f 6b3e 	vldr	d6, [pc, #248]	@ 8007048 <HAL_I2C_MemRxCpltCallback+0x9c8>
 8006f50:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006f54:	ed9f 6b3e 	vldr	d6, [pc, #248]	@ 8007050 <HAL_I2C_MemRxCpltCallback+0x9d0>
 8006f58:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006f5c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006f60:	ee17 3a90 	vmov	r3, s15
 8006f64:	b29b      	uxth	r3, r3
 8006f66:	e001      	b.n	8006f6c <HAL_I2C_MemRxCpltCallback+0x8ec>
 8006f68:	f644 432c 	movw	r3, #19500	@ 0x4c2c
 8006f6c:	4a41      	ldr	r2, [pc, #260]	@ (8007074 <HAL_I2C_MemRxCpltCallback+0x9f4>)
 8006f6e:	8013      	strh	r3, [r2, #0]
			SPEED3 = (((uint32_t)((MYDRON.THRUST*0.7) + MYDRON.ROOL + MYDRON.PITCH - MYDRON.YAW + min_speed + 500)) < max_speed) ? ((MYDRON.THRUST*0.7) + MYDRON.ROOL + MYDRON.PITCH - MYDRON.YAW + min_speed + 500) : max_speed;//
 8006f70:	4b39      	ldr	r3, [pc, #228]	@ (8007058 <HAL_I2C_MemRxCpltCallback+0x9d8>)
 8006f72:	885b      	ldrh	r3, [r3, #2]
 8006f74:	ee07 3a90 	vmov	s15, r3
 8006f78:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006f7c:	ed9f 6b30 	vldr	d6, [pc, #192]	@ 8007040 <HAL_I2C_MemRxCpltCallback+0x9c0>
 8006f80:	ee27 6b06 	vmul.f64	d6, d7, d6
 8006f84:	4b34      	ldr	r3, [pc, #208]	@ (8007058 <HAL_I2C_MemRxCpltCallback+0x9d8>)
 8006f86:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8006f8a:	ee07 3a90 	vmov	s15, r3
 8006f8e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006f92:	ee36 6b07 	vadd.f64	d6, d6, d7
 8006f96:	4b30      	ldr	r3, [pc, #192]	@ (8007058 <HAL_I2C_MemRxCpltCallback+0x9d8>)
 8006f98:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006f9c:	ee07 3a90 	vmov	s15, r3
 8006fa0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006fa4:	ee36 6b07 	vadd.f64	d6, d6, d7
 8006fa8:	4b2b      	ldr	r3, [pc, #172]	@ (8007058 <HAL_I2C_MemRxCpltCallback+0x9d8>)
 8006faa:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006fae:	ee07 3a90 	vmov	s15, r3
 8006fb2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006fb6:	ee36 7b47 	vsub.f64	d7, d6, d7
 8006fba:	ed9f 6b23 	vldr	d6, [pc, #140]	@ 8007048 <HAL_I2C_MemRxCpltCallback+0x9c8>
 8006fbe:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006fc2:	ed9f 6b23 	vldr	d6, [pc, #140]	@ 8007050 <HAL_I2C_MemRxCpltCallback+0x9d0>
 8006fc6:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006fca:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006fce:	ee17 2a90 	vmov	r2, s15
 8006fd2:	f644 432b 	movw	r3, #19499	@ 0x4c2b
 8006fd6:	429a      	cmp	r2, r3
 8006fd8:	d84e      	bhi.n	8007078 <HAL_I2C_MemRxCpltCallback+0x9f8>
 8006fda:	4b1f      	ldr	r3, [pc, #124]	@ (8007058 <HAL_I2C_MemRxCpltCallback+0x9d8>)
 8006fdc:	885b      	ldrh	r3, [r3, #2]
 8006fde:	ee07 3a90 	vmov	s15, r3
 8006fe2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006fe6:	ed9f 6b16 	vldr	d6, [pc, #88]	@ 8007040 <HAL_I2C_MemRxCpltCallback+0x9c0>
 8006fea:	ee27 6b06 	vmul.f64	d6, d7, d6
 8006fee:	4b1a      	ldr	r3, [pc, #104]	@ (8007058 <HAL_I2C_MemRxCpltCallback+0x9d8>)
 8006ff0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8006ff4:	ee07 3a90 	vmov	s15, r3
 8006ff8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006ffc:	ee36 6b07 	vadd.f64	d6, d6, d7
 8007000:	4b15      	ldr	r3, [pc, #84]	@ (8007058 <HAL_I2C_MemRxCpltCallback+0x9d8>)
 8007002:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8007006:	ee07 3a90 	vmov	s15, r3
 800700a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800700e:	ee36 6b07 	vadd.f64	d6, d6, d7
 8007012:	4b11      	ldr	r3, [pc, #68]	@ (8007058 <HAL_I2C_MemRxCpltCallback+0x9d8>)
 8007014:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007018:	ee07 3a90 	vmov	s15, r3
 800701c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8007020:	ee36 7b47 	vsub.f64	d7, d6, d7
 8007024:	ed9f 6b08 	vldr	d6, [pc, #32]	@ 8007048 <HAL_I2C_MemRxCpltCallback+0x9c8>
 8007028:	ee37 7b06 	vadd.f64	d7, d7, d6
 800702c:	ed9f 6b08 	vldr	d6, [pc, #32]	@ 8007050 <HAL_I2C_MemRxCpltCallback+0x9d0>
 8007030:	ee37 7b06 	vadd.f64	d7, d7, d6
 8007034:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8007038:	ee17 3a90 	vmov	r3, s15
 800703c:	b29b      	uxth	r3, r3
 800703e:	e01d      	b.n	800707c <HAL_I2C_MemRxCpltCallback+0x9fc>
 8007040:	66666666 	.word	0x66666666
 8007044:	3fe66666 	.word	0x3fe66666
 8007048:	00000000 	.word	0x00000000
 800704c:	40c48200 	.word	0x40c48200
 8007050:	00000000 	.word	0x00000000
 8007054:	407f4000 	.word	0x407f4000
 8007058:	00000180 	.word	0x00000180
 800705c:	00004066 	.word	0x00004066
 8007060:	00004110 	.word	0x00004110
 8007064:	00004124 	.word	0x00004124
 8007068:	00004080 	.word	0x00004080
 800706c:	00004084 	.word	0x00004084
 8007070:	000041ac 	.word	0x000041ac
 8007074:	000041ae 	.word	0x000041ae
 8007078:	f644 432c 	movw	r3, #19500	@ 0x4c2c
 800707c:	4a9a      	ldr	r2, [pc, #616]	@ (80072e8 <HAL_I2C_MemRxCpltCallback+0xc68>)
 800707e:	8013      	strh	r3, [r2, #0]
			SPEED4 = (((uint32_t)((MYDRON.THRUST*0.7) - MYDRON.ROOL + MYDRON.PITCH + MYDRON.YAW + min_speed + 500)) < max_speed) ? ((MYDRON.THRUST*0.7) - MYDRON.ROOL + MYDRON.PITCH + MYDRON.YAW + min_speed + 500) : max_speed;//
 8007080:	4b9a      	ldr	r3, [pc, #616]	@ (80072ec <HAL_I2C_MemRxCpltCallback+0xc6c>)
 8007082:	885b      	ldrh	r3, [r3, #2]
 8007084:	ee07 3a90 	vmov	s15, r3
 8007088:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800708c:	ed9f 6b8a 	vldr	d6, [pc, #552]	@ 80072b8 <HAL_I2C_MemRxCpltCallback+0xc38>
 8007090:	ee27 6b06 	vmul.f64	d6, d7, d6
 8007094:	4b95      	ldr	r3, [pc, #596]	@ (80072ec <HAL_I2C_MemRxCpltCallback+0xc6c>)
 8007096:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800709a:	ee07 3a90 	vmov	s15, r3
 800709e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80070a2:	ee36 6b47 	vsub.f64	d6, d6, d7
 80070a6:	4b91      	ldr	r3, [pc, #580]	@ (80072ec <HAL_I2C_MemRxCpltCallback+0xc6c>)
 80070a8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80070ac:	ee07 3a90 	vmov	s15, r3
 80070b0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80070b4:	ee36 6b07 	vadd.f64	d6, d6, d7
 80070b8:	4b8c      	ldr	r3, [pc, #560]	@ (80072ec <HAL_I2C_MemRxCpltCallback+0xc6c>)
 80070ba:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80070be:	ee07 3a90 	vmov	s15, r3
 80070c2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80070c6:	ee36 7b07 	vadd.f64	d7, d6, d7
 80070ca:	ed9f 6b7d 	vldr	d6, [pc, #500]	@ 80072c0 <HAL_I2C_MemRxCpltCallback+0xc40>
 80070ce:	ee37 7b06 	vadd.f64	d7, d7, d6
 80070d2:	ed9f 6b7d 	vldr	d6, [pc, #500]	@ 80072c8 <HAL_I2C_MemRxCpltCallback+0xc48>
 80070d6:	ee37 7b06 	vadd.f64	d7, d7, d6
 80070da:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80070de:	ee17 2a90 	vmov	r2, s15
 80070e2:	f644 432b 	movw	r3, #19499	@ 0x4c2b
 80070e6:	429a      	cmp	r2, r3
 80070e8:	d832      	bhi.n	8007150 <HAL_I2C_MemRxCpltCallback+0xad0>
 80070ea:	4b80      	ldr	r3, [pc, #512]	@ (80072ec <HAL_I2C_MemRxCpltCallback+0xc6c>)
 80070ec:	885b      	ldrh	r3, [r3, #2]
 80070ee:	ee07 3a90 	vmov	s15, r3
 80070f2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80070f6:	ed9f 6b70 	vldr	d6, [pc, #448]	@ 80072b8 <HAL_I2C_MemRxCpltCallback+0xc38>
 80070fa:	ee27 6b06 	vmul.f64	d6, d7, d6
 80070fe:	4b7b      	ldr	r3, [pc, #492]	@ (80072ec <HAL_I2C_MemRxCpltCallback+0xc6c>)
 8007100:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8007104:	ee07 3a90 	vmov	s15, r3
 8007108:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800710c:	ee36 6b47 	vsub.f64	d6, d6, d7
 8007110:	4b76      	ldr	r3, [pc, #472]	@ (80072ec <HAL_I2C_MemRxCpltCallback+0xc6c>)
 8007112:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8007116:	ee07 3a90 	vmov	s15, r3
 800711a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800711e:	ee36 6b07 	vadd.f64	d6, d6, d7
 8007122:	4b72      	ldr	r3, [pc, #456]	@ (80072ec <HAL_I2C_MemRxCpltCallback+0xc6c>)
 8007124:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007128:	ee07 3a90 	vmov	s15, r3
 800712c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8007130:	ee36 7b07 	vadd.f64	d7, d6, d7
 8007134:	ed9f 6b62 	vldr	d6, [pc, #392]	@ 80072c0 <HAL_I2C_MemRxCpltCallback+0xc40>
 8007138:	ee37 7b06 	vadd.f64	d7, d7, d6
 800713c:	ed9f 6b62 	vldr	d6, [pc, #392]	@ 80072c8 <HAL_I2C_MemRxCpltCallback+0xc48>
 8007140:	ee37 7b06 	vadd.f64	d7, d7, d6
 8007144:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8007148:	ee17 3a90 	vmov	r3, s15
 800714c:	b29b      	uxth	r3, r3
 800714e:	e001      	b.n	8007154 <HAL_I2C_MemRxCpltCallback+0xad4>
 8007150:	f644 432c 	movw	r3, #19500	@ 0x4c2c
 8007154:	4a66      	ldr	r2, [pc, #408]	@ (80072f0 <HAL_I2C_MemRxCpltCallback+0xc70>)
 8007156:	8013      	strh	r3, [r2, #0]

			if(SPEED1 != OLD_SPEED1){
 8007158:	4b66      	ldr	r3, [pc, #408]	@ (80072f4 <HAL_I2C_MemRxCpltCallback+0xc74>)
 800715a:	881a      	ldrh	r2, [r3, #0]
 800715c:	4b66      	ldr	r3, [pc, #408]	@ (80072f8 <HAL_I2C_MemRxCpltCallback+0xc78>)
 800715e:	881b      	ldrh	r3, [r3, #0]
 8007160:	429a      	cmp	r2, r3
 8007162:	d004      	beq.n	800716e <HAL_I2C_MemRxCpltCallback+0xaee>
				ESC_1_SPEED(SPEED1);
 8007164:	4b63      	ldr	r3, [pc, #396]	@ (80072f4 <HAL_I2C_MemRxCpltCallback+0xc74>)
 8007166:	881b      	ldrh	r3, [r3, #0]
 8007168:	4618      	mov	r0, r3
 800716a:	f7f9 fe63 	bl	8000e34 <ESC_1_SPEED>
			}
			if(SPEED2 != OLD_SPEED2){
 800716e:	4b63      	ldr	r3, [pc, #396]	@ (80072fc <HAL_I2C_MemRxCpltCallback+0xc7c>)
 8007170:	881a      	ldrh	r2, [r3, #0]
 8007172:	4b63      	ldr	r3, [pc, #396]	@ (8007300 <HAL_I2C_MemRxCpltCallback+0xc80>)
 8007174:	881b      	ldrh	r3, [r3, #0]
 8007176:	429a      	cmp	r2, r3
 8007178:	d004      	beq.n	8007184 <HAL_I2C_MemRxCpltCallback+0xb04>
				ESC_2_SPEED(SPEED2);
 800717a:	4b60      	ldr	r3, [pc, #384]	@ (80072fc <HAL_I2C_MemRxCpltCallback+0xc7c>)
 800717c:	881b      	ldrh	r3, [r3, #0]
 800717e:	4618      	mov	r0, r3
 8007180:	f7f9 fe7a 	bl	8000e78 <ESC_2_SPEED>
			}
			if(SPEED3 != OLD_SPEED3){
 8007184:	4b58      	ldr	r3, [pc, #352]	@ (80072e8 <HAL_I2C_MemRxCpltCallback+0xc68>)
 8007186:	881a      	ldrh	r2, [r3, #0]
 8007188:	4b5e      	ldr	r3, [pc, #376]	@ (8007304 <HAL_I2C_MemRxCpltCallback+0xc84>)
 800718a:	881b      	ldrh	r3, [r3, #0]
 800718c:	429a      	cmp	r2, r3
 800718e:	d004      	beq.n	800719a <HAL_I2C_MemRxCpltCallback+0xb1a>
				ESC_3_SPEED(SPEED3);
 8007190:	4b55      	ldr	r3, [pc, #340]	@ (80072e8 <HAL_I2C_MemRxCpltCallback+0xc68>)
 8007192:	881b      	ldrh	r3, [r3, #0]
 8007194:	4618      	mov	r0, r3
 8007196:	f7f9 fe91 	bl	8000ebc <ESC_3_SPEED>
			}
			if(SPEED4 != OLD_SPEED4){
 800719a:	4b55      	ldr	r3, [pc, #340]	@ (80072f0 <HAL_I2C_MemRxCpltCallback+0xc70>)
 800719c:	881a      	ldrh	r2, [r3, #0]
 800719e:	4b5a      	ldr	r3, [pc, #360]	@ (8007308 <HAL_I2C_MemRxCpltCallback+0xc88>)
 80071a0:	881b      	ldrh	r3, [r3, #0]
 80071a2:	429a      	cmp	r2, r3
 80071a4:	d004      	beq.n	80071b0 <HAL_I2C_MemRxCpltCallback+0xb30>
				ESC_4_SPEED(SPEED4);
 80071a6:	4b52      	ldr	r3, [pc, #328]	@ (80072f0 <HAL_I2C_MemRxCpltCallback+0xc70>)
 80071a8:	881b      	ldrh	r3, [r3, #0]
 80071aa:	4618      	mov	r0, r3
 80071ac:	f7f9 fea8 	bl	8000f00 <ESC_4_SPEED>
			}

			OLD_SPEED1 = SPEED1;
 80071b0:	4b50      	ldr	r3, [pc, #320]	@ (80072f4 <HAL_I2C_MemRxCpltCallback+0xc74>)
 80071b2:	881a      	ldrh	r2, [r3, #0]
 80071b4:	4b50      	ldr	r3, [pc, #320]	@ (80072f8 <HAL_I2C_MemRxCpltCallback+0xc78>)
 80071b6:	801a      	strh	r2, [r3, #0]
			OLD_SPEED2 = SPEED2;
 80071b8:	4b50      	ldr	r3, [pc, #320]	@ (80072fc <HAL_I2C_MemRxCpltCallback+0xc7c>)
 80071ba:	881a      	ldrh	r2, [r3, #0]
 80071bc:	4b50      	ldr	r3, [pc, #320]	@ (8007300 <HAL_I2C_MemRxCpltCallback+0xc80>)
 80071be:	801a      	strh	r2, [r3, #0]
			OLD_SPEED3 = SPEED3;
 80071c0:	4b49      	ldr	r3, [pc, #292]	@ (80072e8 <HAL_I2C_MemRxCpltCallback+0xc68>)
 80071c2:	881a      	ldrh	r2, [r3, #0]
 80071c4:	4b4f      	ldr	r3, [pc, #316]	@ (8007304 <HAL_I2C_MemRxCpltCallback+0xc84>)
 80071c6:	801a      	strh	r2, [r3, #0]
			OLD_SPEED4 = SPEED4;
 80071c8:	4b49      	ldr	r3, [pc, #292]	@ (80072f0 <HAL_I2C_MemRxCpltCallback+0xc70>)
 80071ca:	881a      	ldrh	r2, [r3, #0]
 80071cc:	4b4e      	ldr	r3, [pc, #312]	@ (8007308 <HAL_I2C_MemRxCpltCallback+0xc88>)
 80071ce:	801a      	strh	r2, [r3, #0]

			LED_G_0;
 80071d0:	2200      	movs	r2, #0
 80071d2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80071d6:	484d      	ldr	r0, [pc, #308]	@ (800730c <HAL_I2C_MemRxCpltCallback+0xc8c>)
 80071d8:	f007 fb0c 	bl	800e7f4 <HAL_GPIO_WritePin>
	}
	if(HMC583L_IRQ == 1){
 80071dc:	4b4c      	ldr	r3, [pc, #304]	@ (8007310 <HAL_I2C_MemRxCpltCallback+0xc90>)
 80071de:	781b      	ldrb	r3, [r3, #0]
 80071e0:	2b01      	cmp	r3, #1
 80071e2:	d132      	bne.n	800724a <HAL_I2C_MemRxCpltCallback+0xbca>
		HMC583L_IRQ = 0;
 80071e4:	4b4a      	ldr	r3, [pc, #296]	@ (8007310 <HAL_I2C_MemRxCpltCallback+0xc90>)
 80071e6:	2200      	movs	r2, #0
 80071e8:	701a      	strb	r2, [r3, #0]
		Mag_Z = (float)(HMC5883L_Get_Z_End_IT() - Mag_Offset_val);
 80071ea:	f7f9 ff8d 	bl	8001108 <HMC5883L_Get_Z_End_IT>
 80071ee:	4603      	mov	r3, r0
 80071f0:	461a      	mov	r2, r3
 80071f2:	4b48      	ldr	r3, [pc, #288]	@ (8007314 <HAL_I2C_MemRxCpltCallback+0xc94>)
 80071f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80071f8:	1ad3      	subs	r3, r2, r3
 80071fa:	ee07 3a90 	vmov	s15, r3
 80071fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007202:	4b45      	ldr	r3, [pc, #276]	@ (8007318 <HAL_I2C_MemRxCpltCallback+0xc98>)
 8007204:	edc3 7a00 	vstr	s15, [r3]
		Mag_Z = (Mag_Z * (FDP_Mag_Z_FQ * 0.1) / (1 + (FDP_Mag_Z_FQ * 0.1))) + (Old_Mag_Z * (1 / (1 + (FDP_Mag_Z_FQ * 0.1)))); // 0.1 to looptime, co 100ms odczyt
 8007208:	4b43      	ldr	r3, [pc, #268]	@ (8007318 <HAL_I2C_MemRxCpltCallback+0xc98>)
 800720a:	edd3 7a00 	vldr	s15, [r3]
 800720e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8007212:	ed9f 6b2f 	vldr	d6, [pc, #188]	@ 80072d0 <HAL_I2C_MemRxCpltCallback+0xc50>
 8007216:	ee27 7b06 	vmul.f64	d7, d7, d6
 800721a:	ed9f 5b2f 	vldr	d5, [pc, #188]	@ 80072d8 <HAL_I2C_MemRxCpltCallback+0xc58>
 800721e:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8007222:	4b3e      	ldr	r3, [pc, #248]	@ (800731c <HAL_I2C_MemRxCpltCallback+0xc9c>)
 8007224:	edd3 7a00 	vldr	s15, [r3]
 8007228:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800722c:	ed9f 5b2c 	vldr	d5, [pc, #176]	@ 80072e0 <HAL_I2C_MemRxCpltCallback+0xc60>
 8007230:	ee27 7b05 	vmul.f64	d7, d7, d5
 8007234:	ee36 7b07 	vadd.f64	d7, d6, d7
 8007238:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800723c:	4b36      	ldr	r3, [pc, #216]	@ (8007318 <HAL_I2C_MemRxCpltCallback+0xc98>)
 800723e:	edc3 7a00 	vstr	s15, [r3]
		Old_Mag_Z = Mag_Z;
 8007242:	4b35      	ldr	r3, [pc, #212]	@ (8007318 <HAL_I2C_MemRxCpltCallback+0xc98>)
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	4a35      	ldr	r2, [pc, #212]	@ (800731c <HAL_I2C_MemRxCpltCallback+0xc9c>)
 8007248:	6013      	str	r3, [r2, #0]
	}
	if(BMP180_IRQ == 1){
 800724a:	4b35      	ldr	r3, [pc, #212]	@ (8007320 <HAL_I2C_MemRxCpltCallback+0xca0>)
 800724c:	781b      	ldrb	r3, [r3, #0]
 800724e:	2b01      	cmp	r3, #1
 8007250:	d113      	bne.n	800727a <HAL_I2C_MemRxCpltCallback+0xbfa>
		temperature = BMP180_GET_temp_IT();
 8007252:	f7f9 fa9d 	bl	8000790 <BMP180_GET_temp_IT>
 8007256:	4603      	mov	r3, r0
 8007258:	461a      	mov	r2, r3
 800725a:	4b32      	ldr	r3, [pc, #200]	@ (8007324 <HAL_I2C_MemRxCpltCallback+0xca4>)
 800725c:	601a      	str	r2, [r3, #0]
		temp = BMP180_GET_temp(temperature);
 800725e:	4b31      	ldr	r3, [pc, #196]	@ (8007324 <HAL_I2C_MemRxCpltCallback+0xca4>)
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	b29b      	uxth	r3, r3
 8007264:	4618      	mov	r0, r3
 8007266:	f7f9 fbb7 	bl	80009d8 <BMP180_GET_temp>
 800726a:	eef0 7a40 	vmov.f32	s15, s0
 800726e:	4b2e      	ldr	r3, [pc, #184]	@ (8007328 <HAL_I2C_MemRxCpltCallback+0xca8>)
 8007270:	edc3 7a00 	vstr	s15, [r3]
		BMP180_IRQ = 0;
 8007274:	4b2a      	ldr	r3, [pc, #168]	@ (8007320 <HAL_I2C_MemRxCpltCallback+0xca0>)
 8007276:	2200      	movs	r2, #0
 8007278:	701a      	strb	r2, [r3, #0]
	}
	if(BMP180_IRQ == 2){
 800727a:	4b29      	ldr	r3, [pc, #164]	@ (8007320 <HAL_I2C_MemRxCpltCallback+0xca0>)
 800727c:	781b      	ldrb	r3, [r3, #0]
 800727e:	2b02      	cmp	r3, #2
 8007280:	d113      	bne.n	80072aa <HAL_I2C_MemRxCpltCallback+0xc2a>
		pressure = BMP180_GET_pres_IT();
 8007282:	f7f9 fa9b 	bl	80007bc <BMP180_GET_pres_IT>
 8007286:	4603      	mov	r3, r0
 8007288:	461a      	mov	r2, r3
 800728a:	4b28      	ldr	r3, [pc, #160]	@ (800732c <HAL_I2C_MemRxCpltCallback+0xcac>)
 800728c:	601a      	str	r2, [r3, #0]
		pres = BMP180_GET_pres(pressure);
 800728e:	4b27      	ldr	r3, [pc, #156]	@ (800732c <HAL_I2C_MemRxCpltCallback+0xcac>)
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	b29b      	uxth	r3, r3
 8007294:	4618      	mov	r0, r3
 8007296:	f7f9 fbfb 	bl	8000a90 <BMP180_GET_pres>
 800729a:	eef0 7a40 	vmov.f32	s15, s0
 800729e:	4b24      	ldr	r3, [pc, #144]	@ (8007330 <HAL_I2C_MemRxCpltCallback+0xcb0>)
 80072a0:	edc3 7a00 	vstr	s15, [r3]
		BMP180_IRQ = 0;
 80072a4:	4b1e      	ldr	r3, [pc, #120]	@ (8007320 <HAL_I2C_MemRxCpltCallback+0xca0>)
 80072a6:	2200      	movs	r2, #0
 80072a8:	701a      	strb	r2, [r3, #0]
	}
}
 80072aa:	bf00      	nop
 80072ac:	3708      	adds	r7, #8
 80072ae:	46bd      	mov	sp, r7
 80072b0:	bd80      	pop	{r7, pc}
 80072b2:	bf00      	nop
 80072b4:	f3af 8000 	nop.w
 80072b8:	66666666 	.word	0x66666666
 80072bc:	3fe66666 	.word	0x3fe66666
 80072c0:	00000000 	.word	0x00000000
 80072c4:	40c48200 	.word	0x40c48200
 80072c8:	00000000 	.word	0x00000000
 80072cc:	407f4000 	.word	0x407f4000
 80072d0:	9999999a 	.word	0x9999999a
 80072d4:	3fc99999 	.word	0x3fc99999
 80072d8:	33333333 	.word	0x33333333
 80072dc:	3ff33333 	.word	0x3ff33333
 80072e0:	aaaaaaab 	.word	0xaaaaaaab
 80072e4:	3feaaaaa 	.word	0x3feaaaaa
 80072e8:	000041b0 	.word	0x000041b0
 80072ec:	00000180 	.word	0x00000180
 80072f0:	000041b2 	.word	0x000041b2
 80072f4:	000041ac 	.word	0x000041ac
 80072f8:	000041b4 	.word	0x000041b4
 80072fc:	000041ae 	.word	0x000041ae
 8007300:	000041b6 	.word	0x000041b6
 8007304:	000041b8 	.word	0x000041b8
 8007308:	000041ba 	.word	0x000041ba
 800730c:	58021000 	.word	0x58021000
 8007310:	000041f5 	.word	0x000041f5
 8007314:	00000068 	.word	0x00000068
 8007318:	00000058 	.word	0x00000058
 800731c:	00000064 	.word	0x00000064
 8007320:	000041f6 	.word	0x000041f6
 8007324:	000000c0 	.word	0x000000c0
 8007328:	000000e4 	.word	0x000000e4
 800732c:	000000c4 	.word	0x000000c4
 8007330:	000000e8 	.word	0x000000e8

08007334 <convert_array_to_value>:


void convert_array_to_value(uint8_t arrayfrom[], int16_t *value , uint8_t rangebegin, uint8_t rangeend){
 8007334:	b580      	push	{r7, lr}
 8007336:	ed2d 8b04 	vpush	{d8-d9}
 800733a:	b086      	sub	sp, #24
 800733c:	af00      	add	r7, sp, #0
 800733e:	60f8      	str	r0, [r7, #12]
 8007340:	60b9      	str	r1, [r7, #8]
 8007342:	4611      	mov	r1, r2
 8007344:	461a      	mov	r2, r3
 8007346:	460b      	mov	r3, r1
 8007348:	71fb      	strb	r3, [r7, #7]
 800734a:	4613      	mov	r3, r2
 800734c:	71bb      	strb	r3, [r7, #6]
	*value = 0;
 800734e:	68bb      	ldr	r3, [r7, #8]
 8007350:	2200      	movs	r2, #0
 8007352:	801a      	strh	r2, [r3, #0]
	int range = rangeend - rangebegin;
 8007354:	79ba      	ldrb	r2, [r7, #6]
 8007356:	79fb      	ldrb	r3, [r7, #7]
 8007358:	1ad3      	subs	r3, r2, r3
 800735a:	613b      	str	r3, [r7, #16]

	for(int y = 0; y < range+1; y++){
 800735c:	2300      	movs	r3, #0
 800735e:	617b      	str	r3, [r7, #20]
 8007360:	e02e      	b.n	80073c0 <convert_array_to_value+0x8c>
		*value = *value + arrayfrom[rangebegin+y]*pow(10, range - y);
 8007362:	68bb      	ldr	r3, [r7, #8]
 8007364:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007368:	ee07 3a90 	vmov	s15, r3
 800736c:	eeb8 8be7 	vcvt.f64.s32	d8, s15
 8007370:	79fa      	ldrb	r2, [r7, #7]
 8007372:	697b      	ldr	r3, [r7, #20]
 8007374:	4413      	add	r3, r2
 8007376:	461a      	mov	r2, r3
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	4413      	add	r3, r2
 800737c:	781b      	ldrb	r3, [r3, #0]
 800737e:	ee07 3a90 	vmov	s15, r3
 8007382:	eeb8 9be7 	vcvt.f64.s32	d9, s15
 8007386:	693a      	ldr	r2, [r7, #16]
 8007388:	697b      	ldr	r3, [r7, #20]
 800738a:	1ad3      	subs	r3, r2, r3
 800738c:	ee07 3a90 	vmov	s15, r3
 8007390:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8007394:	eeb0 1b47 	vmov.f64	d1, d7
 8007398:	eeb2 0b04 	vmov.f64	d0, #36	@ 0x41200000  10.0
 800739c:	f017 f844 	bl	801e428 <pow>
 80073a0:	eeb0 7b40 	vmov.f64	d7, d0
 80073a4:	ee29 7b07 	vmul.f64	d7, d9, d7
 80073a8:	ee38 7b07 	vadd.f64	d7, d8, d7
 80073ac:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80073b0:	ee17 3a90 	vmov	r3, s15
 80073b4:	b21a      	sxth	r2, r3
 80073b6:	68bb      	ldr	r3, [r7, #8]
 80073b8:	801a      	strh	r2, [r3, #0]
	for(int y = 0; y < range+1; y++){
 80073ba:	697b      	ldr	r3, [r7, #20]
 80073bc:	3301      	adds	r3, #1
 80073be:	617b      	str	r3, [r7, #20]
 80073c0:	693a      	ldr	r2, [r7, #16]
 80073c2:	697b      	ldr	r3, [r7, #20]
 80073c4:	429a      	cmp	r2, r3
 80073c6:	dacc      	bge.n	8007362 <convert_array_to_value+0x2e>
	}

}
 80073c8:	bf00      	nop
 80073ca:	bf00      	nop
 80073cc:	3718      	adds	r7, #24
 80073ce:	46bd      	mov	sp, r7
 80073d0:	ecbd 8b04 	vpop	{d8-d9}
 80073d4:	bd80      	pop	{r7, pc}

080073d6 <convert_value_to_array>:


void convert_value_to_array(int16_t value, uint8_t *arraytoputin, uint8_t rangebegin, uint8_t rangeend){
 80073d6:	b590      	push	{r4, r7, lr}
 80073d8:	b087      	sub	sp, #28
 80073da:	af00      	add	r7, sp, #0
 80073dc:	6039      	str	r1, [r7, #0]
 80073de:	4611      	mov	r1, r2
 80073e0:	461a      	mov	r2, r3
 80073e2:	4603      	mov	r3, r0
 80073e4:	80fb      	strh	r3, [r7, #6]
 80073e6:	460b      	mov	r3, r1
 80073e8:	717b      	strb	r3, [r7, #5]
 80073ea:	4613      	mov	r3, r2
 80073ec:	713b      	strb	r3, [r7, #4]
	int x = 0;
 80073ee:	2300      	movs	r3, #0
 80073f0:	617b      	str	r3, [r7, #20]
	int loopnum = 0;
 80073f2:	2300      	movs	r3, #0
 80073f4:	613b      	str	r3, [r7, #16]
	int range = rangeend - rangebegin;
 80073f6:	793a      	ldrb	r2, [r7, #4]
 80073f8:	797b      	ldrb	r3, [r7, #5]
 80073fa:	1ad3      	subs	r3, r2, r3
 80073fc:	60bb      	str	r3, [r7, #8]
	for(int i = 0; i < range+1; i++){// 3
 80073fe:	2300      	movs	r3, #0
 8007400:	60fb      	str	r3, [r7, #12]
 8007402:	e03e      	b.n	8007482 <convert_value_to_array+0xac>
		while(value >= (uint16_t)pow(10,range - i)){
			if(value == 0){
 8007404:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d028      	beq.n	800745e <convert_value_to_array+0x88>
				break;
			}
			value -= (uint16_t)potenga(10,range - i);
 800740c:	68ba      	ldr	r2, [r7, #8]
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	1ad3      	subs	r3, r2, r3
 8007412:	4619      	mov	r1, r3
 8007414:	200a      	movs	r0, #10
 8007416:	f000 f83d 	bl	8007494 <potenga>
 800741a:	4603      	mov	r3, r0
 800741c:	b29b      	uxth	r3, r3
 800741e:	88fa      	ldrh	r2, [r7, #6]
 8007420:	1ad3      	subs	r3, r2, r3
 8007422:	b29b      	uxth	r3, r3
 8007424:	80fb      	strh	r3, [r7, #6]
			x++;
 8007426:	697b      	ldr	r3, [r7, #20]
 8007428:	3301      	adds	r3, #1
 800742a:	617b      	str	r3, [r7, #20]
		while(value >= (uint16_t)pow(10,range - i)){
 800742c:	f9b7 4006 	ldrsh.w	r4, [r7, #6]
 8007430:	68ba      	ldr	r2, [r7, #8]
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	1ad3      	subs	r3, r2, r3
 8007436:	ee07 3a90 	vmov	s15, r3
 800743a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800743e:	eeb0 1b47 	vmov.f64	d1, d7
 8007442:	eeb2 0b04 	vmov.f64	d0, #36	@ 0x41200000  10.0
 8007446:	f016 ffef 	bl	801e428 <pow>
 800744a:	eeb0 7b40 	vmov.f64	d7, d0
 800744e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8007452:	ee17 3a90 	vmov	r3, s15
 8007456:	b29b      	uxth	r3, r3
 8007458:	429c      	cmp	r4, r3
 800745a:	dad3      	bge.n	8007404 <convert_value_to_array+0x2e>
 800745c:	e000      	b.n	8007460 <convert_value_to_array+0x8a>
				break;
 800745e:	bf00      	nop
		}
		arraytoputin[rangebegin+loopnum] = (uint8_t)x;
 8007460:	797a      	ldrb	r2, [r7, #5]
 8007462:	693b      	ldr	r3, [r7, #16]
 8007464:	4413      	add	r3, r2
 8007466:	461a      	mov	r2, r3
 8007468:	683b      	ldr	r3, [r7, #0]
 800746a:	4413      	add	r3, r2
 800746c:	697a      	ldr	r2, [r7, #20]
 800746e:	b2d2      	uxtb	r2, r2
 8007470:	701a      	strb	r2, [r3, #0]
		loopnum++;
 8007472:	693b      	ldr	r3, [r7, #16]
 8007474:	3301      	adds	r3, #1
 8007476:	613b      	str	r3, [r7, #16]
		x = 0;
 8007478:	2300      	movs	r3, #0
 800747a:	617b      	str	r3, [r7, #20]
	for(int i = 0; i < range+1; i++){// 3
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	3301      	adds	r3, #1
 8007480:	60fb      	str	r3, [r7, #12]
 8007482:	68ba      	ldr	r2, [r7, #8]
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	429a      	cmp	r2, r3
 8007488:	dad0      	bge.n	800742c <convert_value_to_array+0x56>
	}
}
 800748a:	bf00      	nop
 800748c:	bf00      	nop
 800748e:	371c      	adds	r7, #28
 8007490:	46bd      	mov	sp, r7
 8007492:	bd90      	pop	{r4, r7, pc}

08007494 <potenga>:
uint32_t potenga(int a, int b){
 8007494:	b480      	push	{r7}
 8007496:	b087      	sub	sp, #28
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
 800749c:	6039      	str	r1, [r7, #0]
	int32_t c = a;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	60fb      	str	r3, [r7, #12]
	if(b == 0){
 80074a2:	683b      	ldr	r3, [r7, #0]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d101      	bne.n	80074ac <potenga+0x18>
		return 1;
 80074a8:	2301      	movs	r3, #1
 80074aa:	e02d      	b.n	8007508 <potenga+0x74>
	}
	if(b == 1){
 80074ac:	683b      	ldr	r3, [r7, #0]
 80074ae:	2b01      	cmp	r3, #1
 80074b0:	d101      	bne.n	80074b6 <potenga+0x22>
		return a;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	e028      	b.n	8007508 <potenga+0x74>
	}
	if(b > 1){
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	2b01      	cmp	r3, #1
 80074ba:	dd10      	ble.n	80074de <potenga+0x4a>
			for(int i = 1; i < b; i++){
 80074bc:	2301      	movs	r3, #1
 80074be:	617b      	str	r3, [r7, #20]
 80074c0:	e007      	b.n	80074d2 <potenga+0x3e>
			a = a*c;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	68fa      	ldr	r2, [r7, #12]
 80074c6:	fb02 f303 	mul.w	r3, r2, r3
 80074ca:	607b      	str	r3, [r7, #4]
			for(int i = 1; i < b; i++){
 80074cc:	697b      	ldr	r3, [r7, #20]
 80074ce:	3301      	adds	r3, #1
 80074d0:	617b      	str	r3, [r7, #20]
 80074d2:	697a      	ldr	r2, [r7, #20]
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	429a      	cmp	r2, r3
 80074d8:	dbf3      	blt.n	80074c2 <potenga+0x2e>
		}
		return a;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	e014      	b.n	8007508 <potenga+0x74>
	}
	if(b < 0){
 80074de:	683b      	ldr	r3, [r7, #0]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	da10      	bge.n	8007506 <potenga+0x72>
		for(int i = 0; i < b; i++){
 80074e4:	2300      	movs	r3, #0
 80074e6:	613b      	str	r3, [r7, #16]
 80074e8:	e007      	b.n	80074fa <potenga+0x66>
			a = a/c;
 80074ea:	687a      	ldr	r2, [r7, #4]
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	fb92 f3f3 	sdiv	r3, r2, r3
 80074f2:	607b      	str	r3, [r7, #4]
		for(int i = 0; i < b; i++){
 80074f4:	693b      	ldr	r3, [r7, #16]
 80074f6:	3301      	adds	r3, #1
 80074f8:	613b      	str	r3, [r7, #16]
 80074fa:	693a      	ldr	r2, [r7, #16]
 80074fc:	683b      	ldr	r3, [r7, #0]
 80074fe:	429a      	cmp	r2, r3
 8007500:	dbf3      	blt.n	80074ea <potenga+0x56>
		}
		return a;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	e000      	b.n	8007508 <potenga+0x74>
	}
	return a;
 8007506:	687b      	ldr	r3, [r7, #4]
}
 8007508:	4618      	mov	r0, r3
 800750a:	371c      	adds	r7, #28
 800750c:	46bd      	mov	sp, r7
 800750e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007512:	4770      	bx	lr

08007514 <WartoscBezwgledna>:
float WartoscBezwgledna(float a){
 8007514:	b480      	push	{r7}
 8007516:	b083      	sub	sp, #12
 8007518:	af00      	add	r7, sp, #0
 800751a:	ed87 0a01 	vstr	s0, [r7, #4]
	a = (a < 0) ? a*(-1) : a;
 800751e:	edd7 7a01 	vldr	s15, [r7, #4]
 8007522:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007526:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800752a:	d504      	bpl.n	8007536 <WartoscBezwgledna+0x22>
 800752c:	edd7 7a01 	vldr	s15, [r7, #4]
 8007530:	eef1 7a67 	vneg.f32	s15, s15
 8007534:	e001      	b.n	800753a <WartoscBezwgledna+0x26>
 8007536:	edd7 7a01 	vldr	s15, [r7, #4]
 800753a:	edc7 7a01 	vstr	s15, [r7, #4]
	return a;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	ee07 3a90 	vmov	s15, r3
}
 8007544:	eeb0 0a67 	vmov.f32	s0, s15
 8007548:	370c      	adds	r7, #12
 800754a:	46bd      	mov	sp, r7
 800754c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007550:	4770      	bx	lr
	...

08007554 <RGB_LED_Set_color>:
    ITM_SendChar(*ptr++);
  }
  return len;
}

void RGB_LED_Set_color(uint8_t R, uint8_t G, uint8_t B){
 8007554:	b480      	push	{r7}
 8007556:	b083      	sub	sp, #12
 8007558:	af00      	add	r7, sp, #0
 800755a:	4603      	mov	r3, r0
 800755c:	71fb      	strb	r3, [r7, #7]
 800755e:	460b      	mov	r3, r1
 8007560:	71bb      	strb	r3, [r7, #6]
 8007562:	4613      	mov	r3, r2
 8007564:	717b      	strb	r3, [r7, #5]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, B);
 8007566:	4b09      	ldr	r3, [pc, #36]	@ (800758c <RGB_LED_Set_color+0x38>)
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	797a      	ldrb	r2, [r7, #5]
 800756c:	639a      	str	r2, [r3, #56]	@ 0x38
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, R);
 800756e:	4b07      	ldr	r3, [pc, #28]	@ (800758c <RGB_LED_Set_color+0x38>)
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	79fa      	ldrb	r2, [r7, #7]
 8007574:	63da      	str	r2, [r3, #60]	@ 0x3c
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, G);
 8007576:	4b05      	ldr	r3, [pc, #20]	@ (800758c <RGB_LED_Set_color+0x38>)
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	79ba      	ldrb	r2, [r7, #6]
 800757c:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800757e:	bf00      	nop
 8007580:	370c      	adds	r7, #12
 8007582:	46bd      	mov	sp, r7
 8007584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007588:	4770      	bx	lr
 800758a:	bf00      	nop
 800758c:	24000384 	.word	0x24000384

08007590 <RGB_LED_For_BAT>:

void RGB_LED_For_BAT(uint8_t batval){
 8007590:	b580      	push	{r7, lr}
 8007592:	b082      	sub	sp, #8
 8007594:	af00      	add	r7, sp, #0
 8007596:	4603      	mov	r3, r0
 8007598:	71fb      	strb	r3, [r7, #7]
 * batval == 75	  r = 128 g = 128 b = 0
 * batval == 0    r = 255 g = 0 b = 0
 *
 *   r + g = 255
 */
	RGB_LED_Set_color((255 - ((float)batval*2.55)), ((float)batval*2.55), 0);
 800759a:	79fb      	ldrb	r3, [r7, #7]
 800759c:	ee07 3a90 	vmov	s15, r3
 80075a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075a4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80075a8:	ed9f 6b13 	vldr	d6, [pc, #76]	@ 80075f8 <RGB_LED_For_BAT+0x68>
 80075ac:	ee27 7b06 	vmul.f64	d7, d7, d6
 80075b0:	ed9f 6b13 	vldr	d6, [pc, #76]	@ 8007600 <RGB_LED_For_BAT+0x70>
 80075b4:	ee36 7b47 	vsub.f64	d7, d6, d7
 80075b8:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80075bc:	edc7 7a00 	vstr	s15, [r7]
 80075c0:	783b      	ldrb	r3, [r7, #0]
 80075c2:	b2db      	uxtb	r3, r3
 80075c4:	79fa      	ldrb	r2, [r7, #7]
 80075c6:	ee07 2a90 	vmov	s15, r2
 80075ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075ce:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80075d2:	ed9f 6b09 	vldr	d6, [pc, #36]	@ 80075f8 <RGB_LED_For_BAT+0x68>
 80075d6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80075da:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80075de:	edc7 7a00 	vstr	s15, [r7]
 80075e2:	783a      	ldrb	r2, [r7, #0]
 80075e4:	b2d1      	uxtb	r1, r2
 80075e6:	2200      	movs	r2, #0
 80075e8:	4618      	mov	r0, r3
 80075ea:	f7ff ffb3 	bl	8007554 <RGB_LED_Set_color>
}
 80075ee:	bf00      	nop
 80075f0:	3708      	adds	r7, #8
 80075f2:	46bd      	mov	sp, r7
 80075f4:	bd80      	pop	{r7, pc}
 80075f6:	bf00      	nop
 80075f8:	66666666 	.word	0x66666666
 80075fc:	40046666 	.word	0x40046666
 8007600:	00000000 	.word	0x00000000
 8007604:	406fe000 	.word	0x406fe000

08007608 <convert_value_to_array2>:
 *	[0] -
 *	[1] 2
 *	[2] 2
 */

void convert_value_to_array2(int16_t value, uint8_t *arraytoputin, uint8_t rangebegin, uint8_t rangeend){
 8007608:	b590      	push	{r4, r7, lr}
 800760a:	b087      	sub	sp, #28
 800760c:	af00      	add	r7, sp, #0
 800760e:	6039      	str	r1, [r7, #0]
 8007610:	4611      	mov	r1, r2
 8007612:	461a      	mov	r2, r3
 8007614:	4603      	mov	r3, r0
 8007616:	80fb      	strh	r3, [r7, #6]
 8007618:	460b      	mov	r3, r1
 800761a:	717b      	strb	r3, [r7, #5]
 800761c:	4613      	mov	r3, r2
 800761e:	713b      	strb	r3, [r7, #4]
	int x = 0;
 8007620:	2300      	movs	r3, #0
 8007622:	617b      	str	r3, [r7, #20]
	int loopnum = 0;
 8007624:	2300      	movs	r3, #0
 8007626:	613b      	str	r3, [r7, #16]
	int range = rangeend - rangebegin;
 8007628:	793a      	ldrb	r2, [r7, #4]
 800762a:	797b      	ldrb	r3, [r7, #5]
 800762c:	1ad3      	subs	r3, r2, r3
 800762e:	60bb      	str	r3, [r7, #8]

	if(value < 0){
 8007630:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007634:	2b00      	cmp	r3, #0
 8007636:	da04      	bge.n	8007642 <convert_value_to_array2+0x3a>
		arraytoputin[rangebegin] = '-';
 8007638:	797b      	ldrb	r3, [r7, #5]
 800763a:	683a      	ldr	r2, [r7, #0]
 800763c:	4413      	add	r3, r2
 800763e:	222d      	movs	r2, #45	@ 0x2d
 8007640:	701a      	strb	r2, [r3, #0]
	}

	for(int i = 1; i < range+1; i++){// 3
 8007642:	2301      	movs	r3, #1
 8007644:	60fb      	str	r3, [r7, #12]
 8007646:	e035      	b.n	80076b4 <convert_value_to_array2+0xac>
		while(value >= (uint16_t)potenga(10,range - i)){
			if(value == 0){
 8007648:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d01d      	beq.n	800768c <convert_value_to_array2+0x84>
				break;
			}
			value -= (uint16_t)potenga(10,range - i);
 8007650:	68ba      	ldr	r2, [r7, #8]
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	1ad3      	subs	r3, r2, r3
 8007656:	4619      	mov	r1, r3
 8007658:	200a      	movs	r0, #10
 800765a:	f7ff ff1b 	bl	8007494 <potenga>
 800765e:	4603      	mov	r3, r0
 8007660:	b29b      	uxth	r3, r3
 8007662:	88fa      	ldrh	r2, [r7, #6]
 8007664:	1ad3      	subs	r3, r2, r3
 8007666:	b29b      	uxth	r3, r3
 8007668:	80fb      	strh	r3, [r7, #6]
			x++;
 800766a:	697b      	ldr	r3, [r7, #20]
 800766c:	3301      	adds	r3, #1
 800766e:	617b      	str	r3, [r7, #20]
		while(value >= (uint16_t)potenga(10,range - i)){
 8007670:	f9b7 4006 	ldrsh.w	r4, [r7, #6]
 8007674:	68ba      	ldr	r2, [r7, #8]
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	1ad3      	subs	r3, r2, r3
 800767a:	4619      	mov	r1, r3
 800767c:	200a      	movs	r0, #10
 800767e:	f7ff ff09 	bl	8007494 <potenga>
 8007682:	4603      	mov	r3, r0
 8007684:	b29b      	uxth	r3, r3
 8007686:	429c      	cmp	r4, r3
 8007688:	dade      	bge.n	8007648 <convert_value_to_array2+0x40>
 800768a:	e000      	b.n	800768e <convert_value_to_array2+0x86>
				break;
 800768c:	bf00      	nop
		}
		arraytoputin[rangebegin + loopnum] = (uint8_t)x + 48;//zamiana na ASCII
 800768e:	697b      	ldr	r3, [r7, #20]
 8007690:	b2da      	uxtb	r2, r3
 8007692:	7979      	ldrb	r1, [r7, #5]
 8007694:	693b      	ldr	r3, [r7, #16]
 8007696:	440b      	add	r3, r1
 8007698:	4619      	mov	r1, r3
 800769a:	683b      	ldr	r3, [r7, #0]
 800769c:	440b      	add	r3, r1
 800769e:	3230      	adds	r2, #48	@ 0x30
 80076a0:	b2d2      	uxtb	r2, r2
 80076a2:	701a      	strb	r2, [r3, #0]
		loopnum++;
 80076a4:	693b      	ldr	r3, [r7, #16]
 80076a6:	3301      	adds	r3, #1
 80076a8:	613b      	str	r3, [r7, #16]
		x = 0;
 80076aa:	2300      	movs	r3, #0
 80076ac:	617b      	str	r3, [r7, #20]
	for(int i = 1; i < range+1; i++){// 3
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	3301      	adds	r3, #1
 80076b2:	60fb      	str	r3, [r7, #12]
 80076b4:	68ba      	ldr	r2, [r7, #8]
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	429a      	cmp	r2, r3
 80076ba:	dad9      	bge.n	8007670 <convert_value_to_array2+0x68>
	}
}
 80076bc:	bf00      	nop
 80076be:	bf00      	nop
 80076c0:	371c      	adds	r7, #28
 80076c2:	46bd      	mov	sp, r7
 80076c4:	bd90      	pop	{r4, r7, pc}

080076c6 <convert_value_to_array3>:
 *	1000.1
 *
 *	range = 5
 *
 */
void convert_value_to_array3(float value, uint8_t *arraytoputin, uint8_t rangebegin, uint8_t rangeend){
 80076c6:	b580      	push	{r7, lr}
 80076c8:	ed2d 8b02 	vpush	{d8}
 80076cc:	b08c      	sub	sp, #48	@ 0x30
 80076ce:	af00      	add	r7, sp, #0
 80076d0:	ed87 0a03 	vstr	s0, [r7, #12]
 80076d4:	60b8      	str	r0, [r7, #8]
 80076d6:	460b      	mov	r3, r1
 80076d8:	71fb      	strb	r3, [r7, #7]
 80076da:	4613      	mov	r3, r2
 80076dc:	71bb      	strb	r3, [r7, #6]
	int x = 0;
 80076de:	2300      	movs	r3, #0
 80076e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	int loopnum = 0;
 80076e2:	2300      	movs	r3, #0
 80076e4:	62bb      	str	r3, [r7, #40]	@ 0x28
	int range = rangeend - rangebegin;
 80076e6:	79ba      	ldrb	r2, [r7, #6]
 80076e8:	79fb      	ldrb	r3, [r7, #7]
 80076ea:	1ad3      	subs	r3, r2, r3
 80076ec:	617b      	str	r3, [r7, #20]
	int power_of_value = 0;
 80076ee:	2300      	movs	r3, #0
 80076f0:	627b      	str	r3, [r7, #36]	@ 0x24
	float a;
	int kropka;


	if(value < 0){
 80076f2:	edd7 7a03 	vldr	s15, [r7, #12]
 80076f6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80076fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076fe:	d50a      	bpl.n	8007716 <convert_value_to_array3+0x50>
		arraytoputin[rangebegin] = '-';
 8007700:	79fb      	ldrb	r3, [r7, #7]
 8007702:	68ba      	ldr	r2, [r7, #8]
 8007704:	4413      	add	r3, r2
 8007706:	222d      	movs	r2, #45	@ 0x2d
 8007708:	701a      	strb	r2, [r3, #0]
		value = value * -1;
 800770a:	edd7 7a03 	vldr	s15, [r7, #12]
 800770e:	eef1 7a67 	vneg.f32	s15, s15
 8007712:	edc7 7a03 	vstr	s15, [r7, #12]
	}

	//sprawdzenie wagi pierwsazej liczby znaczącej
	//potrzebne do dzielenia
	for(int i = 1; i < range*2; i++){
 8007716:	2301      	movs	r3, #1
 8007718:	61fb      	str	r3, [r7, #28]
 800771a:	e021      	b.n	8007760 <convert_value_to_array3+0x9a>
		a = pow(10,range - i);
 800771c:	697a      	ldr	r2, [r7, #20]
 800771e:	69fb      	ldr	r3, [r7, #28]
 8007720:	1ad3      	subs	r3, r2, r3
 8007722:	ee07 3a90 	vmov	s15, r3
 8007726:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800772a:	eeb0 1b47 	vmov.f64	d1, d7
 800772e:	eeb2 0b04 	vmov.f64	d0, #36	@ 0x41200000  10.0
 8007732:	f016 fe79 	bl	801e428 <pow>
 8007736:	eeb0 7b40 	vmov.f64	d7, d0
 800773a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800773e:	edc7 7a04 	vstr	s15, [r7, #16]
		if(value >= a){
 8007742:	ed97 7a03 	vldr	s14, [r7, #12]
 8007746:	edd7 7a04 	vldr	s15, [r7, #16]
 800774a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800774e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007752:	da0b      	bge.n	800776c <convert_value_to_array3+0xa6>
			break;
		}
		power_of_value++;
 8007754:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007756:	3301      	adds	r3, #1
 8007758:	627b      	str	r3, [r7, #36]	@ 0x24
	for(int i = 1; i < range*2; i++){
 800775a:	69fb      	ldr	r3, [r7, #28]
 800775c:	3301      	adds	r3, #1
 800775e:	61fb      	str	r3, [r7, #28]
 8007760:	697b      	ldr	r3, [r7, #20]
 8007762:	005b      	lsls	r3, r3, #1
 8007764:	69fa      	ldr	r2, [r7, #28]
 8007766:	429a      	cmp	r2, r3
 8007768:	dbd8      	blt.n	800771c <convert_value_to_array3+0x56>
 800776a:	e000      	b.n	800776e <convert_value_to_array3+0xa8>
			break;
 800776c:	bf00      	nop
	}

	power_of_value = range - power_of_value - 1;
 800776e:	697a      	ldr	r2, [r7, #20]
 8007770:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007772:	1ad3      	subs	r3, r2, r3
 8007774:	3b01      	subs	r3, #1
 8007776:	627b      	str	r3, [r7, #36]	@ 0x24

	//		Sprawdzic gdzie jest kropka 0.00123 123.01 12.12
	if(power_of_value <= 0){
 8007778:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800777a:	2b00      	cmp	r3, #0
 800777c:	dc07      	bgt.n	800778e <convert_value_to_array3+0xc8>
		arraytoputin[rangebegin + 1] = '.';
 800777e:	79fb      	ldrb	r3, [r7, #7]
 8007780:	3301      	adds	r3, #1
 8007782:	68ba      	ldr	r2, [r7, #8]
 8007784:	4413      	add	r3, r2
 8007786:	222e      	movs	r2, #46	@ 0x2e
 8007788:	701a      	strb	r2, [r3, #0]
		kropka = 1;
 800778a:	2301      	movs	r3, #1
 800778c:	623b      	str	r3, [r7, #32]
	}
	if(power_of_value > 0){
 800778e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007790:	2b00      	cmp	r3, #0
 8007792:	dd0a      	ble.n	80077aa <convert_value_to_array3+0xe4>
		arraytoputin[rangebegin + power_of_value + 1] = '.';
 8007794:	79fa      	ldrb	r2, [r7, #7]
 8007796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007798:	4413      	add	r3, r2
 800779a:	3301      	adds	r3, #1
 800779c:	68ba      	ldr	r2, [r7, #8]
 800779e:	4413      	add	r3, r2
 80077a0:	222e      	movs	r2, #46	@ 0x2e
 80077a2:	701a      	strb	r2, [r3, #0]
		kropka = power_of_value + 1;
 80077a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077a6:	3301      	adds	r3, #1
 80077a8:	623b      	str	r3, [r7, #32]
	}


	value = value*pow(10,(range-1) - power_of_value);
 80077aa:	edd7 7a03 	vldr	s15, [r7, #12]
 80077ae:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 80077b2:	697b      	ldr	r3, [r7, #20]
 80077b4:	1e5a      	subs	r2, r3, #1
 80077b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077b8:	1ad3      	subs	r3, r2, r3
 80077ba:	ee07 3a90 	vmov	s15, r3
 80077be:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80077c2:	eeb0 1b47 	vmov.f64	d1, d7
 80077c6:	eeb2 0b04 	vmov.f64	d0, #36	@ 0x41200000  10.0
 80077ca:	f016 fe2d 	bl	801e428 <pow>
 80077ce:	eeb0 7b40 	vmov.f64	d7, d0
 80077d2:	ee28 7b07 	vmul.f64	d7, d8, d7
 80077d6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80077da:	edc7 7a03 	vstr	s15, [r7, #12]


	for(int i = 0; i < range-2; i++){// range-2 poniewaz jest znak kropki i ewentualny znak minusa na początku
 80077de:	2300      	movs	r3, #0
 80077e0:	61bb      	str	r3, [r7, #24]
 80077e2:	e05f      	b.n	80078a4 <convert_value_to_array3+0x1de>
		while(value >= (uint16_t)pow(10,(range-1) - i)){
			if(value <= 0){
 80077e4:	edd7 7a03 	vldr	s15, [r7, #12]
 80077e8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80077ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077f0:	d93d      	bls.n	800786e <convert_value_to_array3+0x1a8>
				break;
			}
			value = value - pow(10,(range-1) - i);
 80077f2:	edd7 7a03 	vldr	s15, [r7, #12]
 80077f6:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 80077fa:	697b      	ldr	r3, [r7, #20]
 80077fc:	1e5a      	subs	r2, r3, #1
 80077fe:	69bb      	ldr	r3, [r7, #24]
 8007800:	1ad3      	subs	r3, r2, r3
 8007802:	ee07 3a90 	vmov	s15, r3
 8007806:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800780a:	eeb0 1b47 	vmov.f64	d1, d7
 800780e:	eeb2 0b04 	vmov.f64	d0, #36	@ 0x41200000  10.0
 8007812:	f016 fe09 	bl	801e428 <pow>
 8007816:	eeb0 7b40 	vmov.f64	d7, d0
 800781a:	ee38 7b47 	vsub.f64	d7, d8, d7
 800781e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8007822:	edc7 7a03 	vstr	s15, [r7, #12]
			x++;
 8007826:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007828:	3301      	adds	r3, #1
 800782a:	62fb      	str	r3, [r7, #44]	@ 0x2c
		while(value >= (uint16_t)pow(10,(range-1) - i)){
 800782c:	697b      	ldr	r3, [r7, #20]
 800782e:	1e5a      	subs	r2, r3, #1
 8007830:	69bb      	ldr	r3, [r7, #24]
 8007832:	1ad3      	subs	r3, r2, r3
 8007834:	ee07 3a90 	vmov	s15, r3
 8007838:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800783c:	eeb0 1b47 	vmov.f64	d1, d7
 8007840:	eeb2 0b04 	vmov.f64	d0, #36	@ 0x41200000  10.0
 8007844:	f016 fdf0 	bl	801e428 <pow>
 8007848:	eeb0 7b40 	vmov.f64	d7, d0
 800784c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8007850:	ee17 3a90 	vmov	r3, s15
 8007854:	b29b      	uxth	r3, r3
 8007856:	ee07 3a90 	vmov	s15, r3
 800785a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800785e:	ed97 7a03 	vldr	s14, [r7, #12]
 8007862:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007866:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800786a:	dabb      	bge.n	80077e4 <convert_value_to_array3+0x11e>
 800786c:	e000      	b.n	8007870 <convert_value_to_array3+0x1aa>
				break;
 800786e:	bf00      	nop
		}

        if(loopnum == kropka){
 8007870:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007872:	6a3b      	ldr	r3, [r7, #32]
 8007874:	429a      	cmp	r2, r3
 8007876:	d102      	bne.n	800787e <convert_value_to_array3+0x1b8>
            loopnum++;
 8007878:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800787a:	3301      	adds	r3, #1
 800787c:	62bb      	str	r3, [r7, #40]	@ 0x28
        }
		arraytoputin[rangebegin + loopnum] = (uint8_t)x + 48;//zamiana na ASCII
 800787e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007880:	b2da      	uxtb	r2, r3
 8007882:	79f9      	ldrb	r1, [r7, #7]
 8007884:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007886:	440b      	add	r3, r1
 8007888:	4619      	mov	r1, r3
 800788a:	68bb      	ldr	r3, [r7, #8]
 800788c:	440b      	add	r3, r1
 800788e:	3230      	adds	r2, #48	@ 0x30
 8007890:	b2d2      	uxtb	r2, r2
 8007892:	701a      	strb	r2, [r3, #0]
		loopnum++;
 8007894:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007896:	3301      	adds	r3, #1
 8007898:	62bb      	str	r3, [r7, #40]	@ 0x28
		x = 0;
 800789a:	2300      	movs	r3, #0
 800789c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	for(int i = 0; i < range-2; i++){// range-2 poniewaz jest znak kropki i ewentualny znak minusa na początku
 800789e:	69bb      	ldr	r3, [r7, #24]
 80078a0:	3301      	adds	r3, #1
 80078a2:	61bb      	str	r3, [r7, #24]
 80078a4:	697b      	ldr	r3, [r7, #20]
 80078a6:	3b02      	subs	r3, #2
 80078a8:	69ba      	ldr	r2, [r7, #24]
 80078aa:	429a      	cmp	r2, r3
 80078ac:	dbbe      	blt.n	800782c <convert_value_to_array3+0x166>
	}
}
 80078ae:	bf00      	nop
 80078b0:	bf00      	nop
 80078b2:	3730      	adds	r7, #48	@ 0x30
 80078b4:	46bd      	mov	sp, r7
 80078b6:	ecbd 8b02 	vpop	{d8}
 80078ba:	bd80      	pop	{r7, pc}

080078bc <uSD_Card_SendData_To_Buffer>:
 *
 * Numer pentli 7 8
 *
 * Mag_Z 3
 */
void uSD_Card_SendData_To_Buffer(uint32_t a){
 80078bc:	b580      	push	{r7, lr}
 80078be:	b082      	sub	sp, #8
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]
	convert_value_to_array2(Mainloop_Number, DataToSendBuffer, (0 + (128*a)), (8 + (128*a)));
 80078c4:	4ba6      	ldr	r3, [pc, #664]	@ (8007b60 <uSD_Card_SendData_To_Buffer+0x2a4>)
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	b218      	sxth	r0, r3
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	b2db      	uxtb	r3, r3
 80078ce:	01db      	lsls	r3, r3, #7
 80078d0:	b2da      	uxtb	r2, r3
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	b2db      	uxtb	r3, r3
 80078d6:	01db      	lsls	r3, r3, #7
 80078d8:	b2db      	uxtb	r3, r3
 80078da:	3308      	adds	r3, #8
 80078dc:	b2db      	uxtb	r3, r3
 80078de:	49a1      	ldr	r1, [pc, #644]	@ (8007b64 <uSD_Card_SendData_To_Buffer+0x2a8>)
 80078e0:	f7ff fe92 	bl	8007608 <convert_value_to_array2>
	 DataToSendBuffer[(8 + (128*a))] = ' ';
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	01db      	lsls	r3, r3, #7
 80078e8:	3308      	adds	r3, #8
 80078ea:	4a9e      	ldr	r2, [pc, #632]	@ (8007b64 <uSD_Card_SendData_To_Buffer+0x2a8>)
 80078ec:	2120      	movs	r1, #32
 80078ee:	54d1      	strb	r1, [r2, r3]


	convert_value_to_array2(SPEED1, DataToSendBuffer, (9 + (128*a)), (15 + (128*a)));
 80078f0:	4b9d      	ldr	r3, [pc, #628]	@ (8007b68 <uSD_Card_SendData_To_Buffer+0x2ac>)
 80078f2:	881b      	ldrh	r3, [r3, #0]
 80078f4:	b218      	sxth	r0, r3
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	b2db      	uxtb	r3, r3
 80078fa:	01db      	lsls	r3, r3, #7
 80078fc:	b2db      	uxtb	r3, r3
 80078fe:	3309      	adds	r3, #9
 8007900:	b2da      	uxtb	r2, r3
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	b2db      	uxtb	r3, r3
 8007906:	01db      	lsls	r3, r3, #7
 8007908:	b2db      	uxtb	r3, r3
 800790a:	330f      	adds	r3, #15
 800790c:	b2db      	uxtb	r3, r3
 800790e:	4995      	ldr	r1, [pc, #596]	@ (8007b64 <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007910:	f7ff fe7a 	bl	8007608 <convert_value_to_array2>
	 DataToSendBuffer[(15 + (128*a))] = ' ';
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	01db      	lsls	r3, r3, #7
 8007918:	330f      	adds	r3, #15
 800791a:	4a92      	ldr	r2, [pc, #584]	@ (8007b64 <uSD_Card_SendData_To_Buffer+0x2a8>)
 800791c:	2120      	movs	r1, #32
 800791e:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array2(SPEED2, DataToSendBuffer, (16 + (128*a)), (22 + (128*a)));
 8007920:	4b92      	ldr	r3, [pc, #584]	@ (8007b6c <uSD_Card_SendData_To_Buffer+0x2b0>)
 8007922:	881b      	ldrh	r3, [r3, #0]
 8007924:	b218      	sxth	r0, r3
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	b2db      	uxtb	r3, r3
 800792a:	01db      	lsls	r3, r3, #7
 800792c:	b2db      	uxtb	r3, r3
 800792e:	3310      	adds	r3, #16
 8007930:	b2da      	uxtb	r2, r3
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	b2db      	uxtb	r3, r3
 8007936:	01db      	lsls	r3, r3, #7
 8007938:	b2db      	uxtb	r3, r3
 800793a:	3316      	adds	r3, #22
 800793c:	b2db      	uxtb	r3, r3
 800793e:	4989      	ldr	r1, [pc, #548]	@ (8007b64 <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007940:	f7ff fe62 	bl	8007608 <convert_value_to_array2>
	 DataToSendBuffer[(22 + (128*a))] = ' ';
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	01db      	lsls	r3, r3, #7
 8007948:	3316      	adds	r3, #22
 800794a:	4a86      	ldr	r2, [pc, #536]	@ (8007b64 <uSD_Card_SendData_To_Buffer+0x2a8>)
 800794c:	2120      	movs	r1, #32
 800794e:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array2(SPEED3, DataToSendBuffer, (23 + (128*a)), (29 + (128*a)));
 8007950:	4b87      	ldr	r3, [pc, #540]	@ (8007b70 <uSD_Card_SendData_To_Buffer+0x2b4>)
 8007952:	881b      	ldrh	r3, [r3, #0]
 8007954:	b218      	sxth	r0, r3
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	b2db      	uxtb	r3, r3
 800795a:	01db      	lsls	r3, r3, #7
 800795c:	b2db      	uxtb	r3, r3
 800795e:	3317      	adds	r3, #23
 8007960:	b2da      	uxtb	r2, r3
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	b2db      	uxtb	r3, r3
 8007966:	01db      	lsls	r3, r3, #7
 8007968:	b2db      	uxtb	r3, r3
 800796a:	331d      	adds	r3, #29
 800796c:	b2db      	uxtb	r3, r3
 800796e:	497d      	ldr	r1, [pc, #500]	@ (8007b64 <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007970:	f7ff fe4a 	bl	8007608 <convert_value_to_array2>
	 DataToSendBuffer[(29 + (128*a))] = ' ';
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	01db      	lsls	r3, r3, #7
 8007978:	331d      	adds	r3, #29
 800797a:	4a7a      	ldr	r2, [pc, #488]	@ (8007b64 <uSD_Card_SendData_To_Buffer+0x2a8>)
 800797c:	2120      	movs	r1, #32
 800797e:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array2(SPEED4, DataToSendBuffer, (30 + (128*a)), (36 + (128*a)));
 8007980:	4b7c      	ldr	r3, [pc, #496]	@ (8007b74 <uSD_Card_SendData_To_Buffer+0x2b8>)
 8007982:	881b      	ldrh	r3, [r3, #0]
 8007984:	b218      	sxth	r0, r3
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	b2db      	uxtb	r3, r3
 800798a:	01db      	lsls	r3, r3, #7
 800798c:	b2db      	uxtb	r3, r3
 800798e:	331e      	adds	r3, #30
 8007990:	b2da      	uxtb	r2, r3
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	b2db      	uxtb	r3, r3
 8007996:	01db      	lsls	r3, r3, #7
 8007998:	b2db      	uxtb	r3, r3
 800799a:	3324      	adds	r3, #36	@ 0x24
 800799c:	b2db      	uxtb	r3, r3
 800799e:	4971      	ldr	r1, [pc, #452]	@ (8007b64 <uSD_Card_SendData_To_Buffer+0x2a8>)
 80079a0:	f7ff fe32 	bl	8007608 <convert_value_to_array2>
	 DataToSendBuffer[(36 + (128*a))] = ' ';
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	01db      	lsls	r3, r3, #7
 80079a8:	3324      	adds	r3, #36	@ 0x24
 80079aa:	4a6e      	ldr	r2, [pc, #440]	@ (8007b64 <uSD_Card_SendData_To_Buffer+0x2a8>)
 80079ac:	2120      	movs	r1, #32
 80079ae:	54d1      	strb	r1, [r2, r3]

	convert_value_to_array3(wanted_rool, DataToSendBuffer, (37 + (128*a)), (45 + (128*a)));
 80079b0:	4b71      	ldr	r3, [pc, #452]	@ (8007b78 <uSD_Card_SendData_To_Buffer+0x2bc>)
 80079b2:	edd3 7a00 	vldr	s15, [r3]
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	b2db      	uxtb	r3, r3
 80079ba:	01db      	lsls	r3, r3, #7
 80079bc:	b2db      	uxtb	r3, r3
 80079be:	3325      	adds	r3, #37	@ 0x25
 80079c0:	b2d9      	uxtb	r1, r3
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	b2db      	uxtb	r3, r3
 80079c6:	01db      	lsls	r3, r3, #7
 80079c8:	b2db      	uxtb	r3, r3
 80079ca:	332d      	adds	r3, #45	@ 0x2d
 80079cc:	b2db      	uxtb	r3, r3
 80079ce:	461a      	mov	r2, r3
 80079d0:	4864      	ldr	r0, [pc, #400]	@ (8007b64 <uSD_Card_SendData_To_Buffer+0x2a8>)
 80079d2:	eeb0 0a67 	vmov.f32	s0, s15
 80079d6:	f7ff fe76 	bl	80076c6 <convert_value_to_array3>
	 DataToSendBuffer[(45 + (128*a))] = ' ';
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	01db      	lsls	r3, r3, #7
 80079de:	332d      	adds	r3, #45	@ 0x2d
 80079e0:	4a60      	ldr	r2, [pc, #384]	@ (8007b64 <uSD_Card_SendData_To_Buffer+0x2a8>)
 80079e2:	2120      	movs	r1, #32
 80079e4:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array3(wanted_pitch, DataToSendBuffer, (46 + (128*a)), (54 + (128*a)));
 80079e6:	4b65      	ldr	r3, [pc, #404]	@ (8007b7c <uSD_Card_SendData_To_Buffer+0x2c0>)
 80079e8:	edd3 7a00 	vldr	s15, [r3]
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	b2db      	uxtb	r3, r3
 80079f0:	01db      	lsls	r3, r3, #7
 80079f2:	b2db      	uxtb	r3, r3
 80079f4:	332e      	adds	r3, #46	@ 0x2e
 80079f6:	b2d9      	uxtb	r1, r3
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	b2db      	uxtb	r3, r3
 80079fc:	01db      	lsls	r3, r3, #7
 80079fe:	b2db      	uxtb	r3, r3
 8007a00:	3336      	adds	r3, #54	@ 0x36
 8007a02:	b2db      	uxtb	r3, r3
 8007a04:	461a      	mov	r2, r3
 8007a06:	4857      	ldr	r0, [pc, #348]	@ (8007b64 <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007a08:	eeb0 0a67 	vmov.f32	s0, s15
 8007a0c:	f7ff fe5b 	bl	80076c6 <convert_value_to_array3>
	 DataToSendBuffer[(54 + (128*a))] = ' ';
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	01db      	lsls	r3, r3, #7
 8007a14:	3336      	adds	r3, #54	@ 0x36
 8007a16:	4a53      	ldr	r2, [pc, #332]	@ (8007b64 <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007a18:	2120      	movs	r1, #32
 8007a1a:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array3(wanted_yaw, DataToSendBuffer, (55 + (128*a)), (63 + (128*a)));
 8007a1c:	4b58      	ldr	r3, [pc, #352]	@ (8007b80 <uSD_Card_SendData_To_Buffer+0x2c4>)
 8007a1e:	edd3 7a00 	vldr	s15, [r3]
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	b2db      	uxtb	r3, r3
 8007a26:	01db      	lsls	r3, r3, #7
 8007a28:	b2db      	uxtb	r3, r3
 8007a2a:	3337      	adds	r3, #55	@ 0x37
 8007a2c:	b2d9      	uxtb	r1, r3
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	b2db      	uxtb	r3, r3
 8007a32:	01db      	lsls	r3, r3, #7
 8007a34:	b2db      	uxtb	r3, r3
 8007a36:	333f      	adds	r3, #63	@ 0x3f
 8007a38:	b2db      	uxtb	r3, r3
 8007a3a:	461a      	mov	r2, r3
 8007a3c:	4849      	ldr	r0, [pc, #292]	@ (8007b64 <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007a3e:	eeb0 0a67 	vmov.f32	s0, s15
 8007a42:	f7ff fe40 	bl	80076c6 <convert_value_to_array3>
	 DataToSendBuffer[(63 + (128*a))] = ' ';
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	01db      	lsls	r3, r3, #7
 8007a4a:	333f      	adds	r3, #63	@ 0x3f
 8007a4c:	4a45      	ldr	r2, [pc, #276]	@ (8007b64 <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007a4e:	2120      	movs	r1, #32
 8007a50:	54d1      	strb	r1, [r2, r3]

	convert_value_to_array2(error_sum_pitch, DataToSendBuffer, (64 + (128*a)), (72 + (128*a)));
 8007a52:	4b4c      	ldr	r3, [pc, #304]	@ (8007b84 <uSD_Card_SendData_To_Buffer+0x2c8>)
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	b218      	sxth	r0, r3
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	b2db      	uxtb	r3, r3
 8007a5c:	01db      	lsls	r3, r3, #7
 8007a5e:	b2db      	uxtb	r3, r3
 8007a60:	3340      	adds	r3, #64	@ 0x40
 8007a62:	b2da      	uxtb	r2, r3
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	b2db      	uxtb	r3, r3
 8007a68:	01db      	lsls	r3, r3, #7
 8007a6a:	b2db      	uxtb	r3, r3
 8007a6c:	3348      	adds	r3, #72	@ 0x48
 8007a6e:	b2db      	uxtb	r3, r3
 8007a70:	493c      	ldr	r1, [pc, #240]	@ (8007b64 <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007a72:	f7ff fdc9 	bl	8007608 <convert_value_to_array2>
	 DataToSendBuffer[(72 + (128*a))] = ' ';
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	01db      	lsls	r3, r3, #7
 8007a7a:	3348      	adds	r3, #72	@ 0x48
 8007a7c:	4a39      	ldr	r2, [pc, #228]	@ (8007b64 <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007a7e:	2120      	movs	r1, #32
 8007a80:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array2(error_sum_rool, DataToSendBuffer, (73 + (128*a)), (81 + (128*a)));
 8007a82:	4b41      	ldr	r3, [pc, #260]	@ (8007b88 <uSD_Card_SendData_To_Buffer+0x2cc>)
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	b218      	sxth	r0, r3
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	b2db      	uxtb	r3, r3
 8007a8c:	01db      	lsls	r3, r3, #7
 8007a8e:	b2db      	uxtb	r3, r3
 8007a90:	3349      	adds	r3, #73	@ 0x49
 8007a92:	b2da      	uxtb	r2, r3
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	b2db      	uxtb	r3, r3
 8007a98:	01db      	lsls	r3, r3, #7
 8007a9a:	b2db      	uxtb	r3, r3
 8007a9c:	3351      	adds	r3, #81	@ 0x51
 8007a9e:	b2db      	uxtb	r3, r3
 8007aa0:	4930      	ldr	r1, [pc, #192]	@ (8007b64 <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007aa2:	f7ff fdb1 	bl	8007608 <convert_value_to_array2>
	 DataToSendBuffer[(81 + (128*a))] = ' ';
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	01db      	lsls	r3, r3, #7
 8007aaa:	3351      	adds	r3, #81	@ 0x51
 8007aac:	4a2d      	ldr	r2, [pc, #180]	@ (8007b64 <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007aae:	2120      	movs	r1, #32
 8007ab0:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array2(error_sum_yaw, DataToSendBuffer, (82 + (128*a)), (90 + (128*a)));
 8007ab2:	4b36      	ldr	r3, [pc, #216]	@ (8007b8c <uSD_Card_SendData_To_Buffer+0x2d0>)
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	b218      	sxth	r0, r3
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	b2db      	uxtb	r3, r3
 8007abc:	01db      	lsls	r3, r3, #7
 8007abe:	b2db      	uxtb	r3, r3
 8007ac0:	3352      	adds	r3, #82	@ 0x52
 8007ac2:	b2da      	uxtb	r2, r3
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	b2db      	uxtb	r3, r3
 8007ac8:	01db      	lsls	r3, r3, #7
 8007aca:	b2db      	uxtb	r3, r3
 8007acc:	335a      	adds	r3, #90	@ 0x5a
 8007ace:	b2db      	uxtb	r3, r3
 8007ad0:	4924      	ldr	r1, [pc, #144]	@ (8007b64 <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007ad2:	f7ff fd99 	bl	8007608 <convert_value_to_array2>
	 DataToSendBuffer[(90 + (128*a))] = ' ';
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	01db      	lsls	r3, r3, #7
 8007ada:	335a      	adds	r3, #90	@ 0x5a
 8007adc:	4a21      	ldr	r2, [pc, #132]	@ (8007b64 <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007ade:	2120      	movs	r1, #32
 8007ae0:	54d1      	strb	r1, [r2, r3]

	convert_value_to_array3(data.x, DataToSendBuffer, (91 + (128*a)), (98 + (128*a)));
 8007ae2:	4b2b      	ldr	r3, [pc, #172]	@ (8007b90 <uSD_Card_SendData_To_Buffer+0x2d4>)
 8007ae4:	edd3 7a00 	vldr	s15, [r3]
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	b2db      	uxtb	r3, r3
 8007aec:	01db      	lsls	r3, r3, #7
 8007aee:	b2db      	uxtb	r3, r3
 8007af0:	335b      	adds	r3, #91	@ 0x5b
 8007af2:	b2d9      	uxtb	r1, r3
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	b2db      	uxtb	r3, r3
 8007af8:	01db      	lsls	r3, r3, #7
 8007afa:	b2db      	uxtb	r3, r3
 8007afc:	3362      	adds	r3, #98	@ 0x62
 8007afe:	b2db      	uxtb	r3, r3
 8007b00:	461a      	mov	r2, r3
 8007b02:	4818      	ldr	r0, [pc, #96]	@ (8007b64 <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007b04:	eeb0 0a67 	vmov.f32	s0, s15
 8007b08:	f7ff fddd 	bl	80076c6 <convert_value_to_array3>
	 DataToSendBuffer[(98 + (128*a))] = ' ';
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	01db      	lsls	r3, r3, #7
 8007b10:	3362      	adds	r3, #98	@ 0x62
 8007b12:	4a14      	ldr	r2, [pc, #80]	@ (8007b64 <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007b14:	2120      	movs	r1, #32
 8007b16:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array3(data.y, DataToSendBuffer, (99 + (128*a)), (106 + (128*a)));
 8007b18:	4b1d      	ldr	r3, [pc, #116]	@ (8007b90 <uSD_Card_SendData_To_Buffer+0x2d4>)
 8007b1a:	edd3 7a01 	vldr	s15, [r3, #4]
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	b2db      	uxtb	r3, r3
 8007b22:	01db      	lsls	r3, r3, #7
 8007b24:	b2db      	uxtb	r3, r3
 8007b26:	3363      	adds	r3, #99	@ 0x63
 8007b28:	b2d9      	uxtb	r1, r3
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	b2db      	uxtb	r3, r3
 8007b2e:	01db      	lsls	r3, r3, #7
 8007b30:	b2db      	uxtb	r3, r3
 8007b32:	336a      	adds	r3, #106	@ 0x6a
 8007b34:	b2db      	uxtb	r3, r3
 8007b36:	461a      	mov	r2, r3
 8007b38:	480a      	ldr	r0, [pc, #40]	@ (8007b64 <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007b3a:	eeb0 0a67 	vmov.f32	s0, s15
 8007b3e:	f7ff fdc2 	bl	80076c6 <convert_value_to_array3>
	 DataToSendBuffer[(106 + (128*a))] = ' ';
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	01db      	lsls	r3, r3, #7
 8007b46:	336a      	adds	r3, #106	@ 0x6a
 8007b48:	4a06      	ldr	r2, [pc, #24]	@ (8007b64 <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007b4a:	2120      	movs	r1, #32
 8007b4c:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array3(data.z, DataToSendBuffer, (107 + (128*a)), (114 + (128*a)));
 8007b4e:	4b10      	ldr	r3, [pc, #64]	@ (8007b90 <uSD_Card_SendData_To_Buffer+0x2d4>)
 8007b50:	edd3 7a02 	vldr	s15, [r3, #8]
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	b2db      	uxtb	r3, r3
 8007b58:	01db      	lsls	r3, r3, #7
 8007b5a:	b2db      	uxtb	r3, r3
 8007b5c:	336b      	adds	r3, #107	@ 0x6b
 8007b5e:	e019      	b.n	8007b94 <uSD_Card_SendData_To_Buffer+0x2d8>
 8007b60:	000041e4 	.word	0x000041e4
 8007b64:	24002f28 	.word	0x24002f28
 8007b68:	000041ac 	.word	0x000041ac
 8007b6c:	000041ae 	.word	0x000041ae
 8007b70:	000041b0 	.word	0x000041b0
 8007b74:	000041b2 	.word	0x000041b2
 8007b78:	00004074 	.word	0x00004074
 8007b7c:	00004070 	.word	0x00004070
 8007b80:	00004078 	.word	0x00004078
 8007b84:	000040bc 	.word	0x000040bc
 8007b88:	000040c0 	.word	0x000040c0
 8007b8c:	000040c4 	.word	0x000040c4
 8007b90:	00000084 	.word	0x00000084
 8007b94:	b2d9      	uxtb	r1, r3
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	b2db      	uxtb	r3, r3
 8007b9a:	01db      	lsls	r3, r3, #7
 8007b9c:	b2db      	uxtb	r3, r3
 8007b9e:	3372      	adds	r3, #114	@ 0x72
 8007ba0:	b2db      	uxtb	r3, r3
 8007ba2:	461a      	mov	r2, r3
 8007ba4:	482d      	ldr	r0, [pc, #180]	@ (8007c5c <uSD_Card_SendData_To_Buffer+0x3a0>)
 8007ba6:	eeb0 0a67 	vmov.f32	s0, s15
 8007baa:	f7ff fd8c 	bl	80076c6 <convert_value_to_array3>
	 DataToSendBuffer[(114 + (128*a))] = ' ';
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	01db      	lsls	r3, r3, #7
 8007bb2:	3372      	adds	r3, #114	@ 0x72
 8007bb4:	4a29      	ldr	r2, [pc, #164]	@ (8007c5c <uSD_Card_SendData_To_Buffer+0x3a0>)
 8007bb6:	2120      	movs	r1, #32
 8007bb8:	54d1      	strb	r1, [r2, r3]


	convert_value_to_array2(MYDRON.batterysize, DataToSendBuffer, (115 + (128*a)), (119 + (128*a)));
 8007bba:	4b29      	ldr	r3, [pc, #164]	@ (8007c60 <uSD_Card_SendData_To_Buffer+0x3a4>)
 8007bbc:	881b      	ldrh	r3, [r3, #0]
 8007bbe:	b218      	sxth	r0, r3
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	b2db      	uxtb	r3, r3
 8007bc4:	01db      	lsls	r3, r3, #7
 8007bc6:	b2db      	uxtb	r3, r3
 8007bc8:	3373      	adds	r3, #115	@ 0x73
 8007bca:	b2da      	uxtb	r2, r3
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	b2db      	uxtb	r3, r3
 8007bd0:	01db      	lsls	r3, r3, #7
 8007bd2:	b2db      	uxtb	r3, r3
 8007bd4:	3377      	adds	r3, #119	@ 0x77
 8007bd6:	b2db      	uxtb	r3, r3
 8007bd8:	4920      	ldr	r1, [pc, #128]	@ (8007c5c <uSD_Card_SendData_To_Buffer+0x3a0>)
 8007bda:	f7ff fd15 	bl	8007608 <convert_value_to_array2>
	 DataToSendBuffer[(119 + (128*a))] = ' ';
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	01db      	lsls	r3, r3, #7
 8007be2:	3377      	adds	r3, #119	@ 0x77
 8007be4:	4a1d      	ldr	r2, [pc, #116]	@ (8007c5c <uSD_Card_SendData_To_Buffer+0x3a0>)
 8007be6:	2120      	movs	r1, #32
 8007be8:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array2(MYDRON.dron_status.Connection, DataToSendBuffer, (120 + (128*a)), (122 + (128*a)));
 8007bea:	4b1d      	ldr	r3, [pc, #116]	@ (8007c60 <uSD_Card_SendData_To_Buffer+0x3a4>)
 8007bec:	8a5b      	ldrh	r3, [r3, #18]
 8007bee:	b218      	sxth	r0, r3
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	b2db      	uxtb	r3, r3
 8007bf4:	01db      	lsls	r3, r3, #7
 8007bf6:	b2db      	uxtb	r3, r3
 8007bf8:	3378      	adds	r3, #120	@ 0x78
 8007bfa:	b2da      	uxtb	r2, r3
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	b2db      	uxtb	r3, r3
 8007c00:	01db      	lsls	r3, r3, #7
 8007c02:	b2db      	uxtb	r3, r3
 8007c04:	337a      	adds	r3, #122	@ 0x7a
 8007c06:	b2db      	uxtb	r3, r3
 8007c08:	4914      	ldr	r1, [pc, #80]	@ (8007c5c <uSD_Card_SendData_To_Buffer+0x3a0>)
 8007c0a:	f7ff fcfd 	bl	8007608 <convert_value_to_array2>
	 DataToSendBuffer[(122 + (128*a))] = ' ';
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	01db      	lsls	r3, r3, #7
 8007c12:	337a      	adds	r3, #122	@ 0x7a
 8007c14:	4a11      	ldr	r2, [pc, #68]	@ (8007c5c <uSD_Card_SendData_To_Buffer+0x3a0>)
 8007c16:	2120      	movs	r1, #32
 8007c18:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array2(Mag_Z, DataToSendBuffer, (123 + (128*a)), (127 + (128*a)));
 8007c1a:	4b12      	ldr	r3, [pc, #72]	@ (8007c64 <uSD_Card_SendData_To_Buffer+0x3a8>)
 8007c1c:	edd3 7a00 	vldr	s15, [r3]
 8007c20:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007c24:	ee17 3a90 	vmov	r3, s15
 8007c28:	b218      	sxth	r0, r3
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	b2db      	uxtb	r3, r3
 8007c2e:	01db      	lsls	r3, r3, #7
 8007c30:	b2db      	uxtb	r3, r3
 8007c32:	337b      	adds	r3, #123	@ 0x7b
 8007c34:	b2da      	uxtb	r2, r3
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	b2db      	uxtb	r3, r3
 8007c3a:	01db      	lsls	r3, r3, #7
 8007c3c:	b2db      	uxtb	r3, r3
 8007c3e:	337f      	adds	r3, #127	@ 0x7f
 8007c40:	b2db      	uxtb	r3, r3
 8007c42:	4906      	ldr	r1, [pc, #24]	@ (8007c5c <uSD_Card_SendData_To_Buffer+0x3a0>)
 8007c44:	f7ff fce0 	bl	8007608 <convert_value_to_array2>
	 DataToSendBuffer[(128 + (128*a))] = '\n';
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	3301      	adds	r3, #1
 8007c4c:	01db      	lsls	r3, r3, #7
 8007c4e:	4a03      	ldr	r2, [pc, #12]	@ (8007c5c <uSD_Card_SendData_To_Buffer+0x3a0>)
 8007c50:	210a      	movs	r1, #10
 8007c52:	54d1      	strb	r1, [r2, r3]
}
 8007c54:	bf00      	nop
 8007c56:	3708      	adds	r7, #8
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	bd80      	pop	{r7, pc}
 8007c5c:	24002f28 	.word	0x24002f28
 8007c60:	00000180 	.word	0x00000180
 8007c64:	00000058 	.word	0x00000058

08007c68 <Stack_Push>:

void Stack_Push(float data){
 8007c68:	b480      	push	{r7}
 8007c6a:	b083      	sub	sp, #12
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	ed87 0a01 	vstr	s0, [r7, #4]
	Old_Data_stack.start_pointer++;
 8007c72:	4b22      	ldr	r3, [pc, #136]	@ (8007cfc <Stack_Push+0x94>)
 8007c74:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8007c78:	f8b3 3ea8 	ldrh.w	r3, [r3, #3752]	@ 0xea8
 8007c7c:	3301      	adds	r3, #1
 8007c7e:	b29a      	uxth	r2, r3
 8007c80:	4b1e      	ldr	r3, [pc, #120]	@ (8007cfc <Stack_Push+0x94>)
 8007c82:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8007c86:	f8a3 2ea8 	strh.w	r2, [r3, #3752]	@ 0xea8
	if(Old_Data_stack.start_pointer == 4000){
 8007c8a:	4b1c      	ldr	r3, [pc, #112]	@ (8007cfc <Stack_Push+0x94>)
 8007c8c:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8007c90:	f8b3 3ea8 	ldrh.w	r3, [r3, #3752]	@ 0xea8
 8007c94:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 8007c98:	d105      	bne.n	8007ca6 <Stack_Push+0x3e>
		Old_Data_stack.start_pointer = 0;
 8007c9a:	4b18      	ldr	r3, [pc, #96]	@ (8007cfc <Stack_Push+0x94>)
 8007c9c:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	f8a3 2ea8 	strh.w	r2, [r3, #3752]	@ 0xea8
	}
	Old_Data_stack.olddata[Old_Data_stack.start_pointer] = data;
 8007ca6:	4b15      	ldr	r3, [pc, #84]	@ (8007cfc <Stack_Push+0x94>)
 8007ca8:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8007cac:	f8b3 3ea8 	ldrh.w	r3, [r3, #3752]	@ 0xea8
 8007cb0:	4a12      	ldr	r2, [pc, #72]	@ (8007cfc <Stack_Push+0x94>)
 8007cb2:	009b      	lsls	r3, r3, #2
 8007cb4:	4413      	add	r3, r2
 8007cb6:	687a      	ldr	r2, [r7, #4]
 8007cb8:	601a      	str	r2, [r3, #0]

	Old_Data_stack.end_pointer++;
 8007cba:	4b10      	ldr	r3, [pc, #64]	@ (8007cfc <Stack_Push+0x94>)
 8007cbc:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8007cc0:	f8b3 3eaa 	ldrh.w	r3, [r3, #3754]	@ 0xeaa
 8007cc4:	3301      	adds	r3, #1
 8007cc6:	b29a      	uxth	r2, r3
 8007cc8:	4b0c      	ldr	r3, [pc, #48]	@ (8007cfc <Stack_Push+0x94>)
 8007cca:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8007cce:	f8a3 2eaa 	strh.w	r2, [r3, #3754]	@ 0xeaa
	if(Old_Data_stack.start_pointer == 4000){
 8007cd2:	4b0a      	ldr	r3, [pc, #40]	@ (8007cfc <Stack_Push+0x94>)
 8007cd4:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8007cd8:	f8b3 3ea8 	ldrh.w	r3, [r3, #3752]	@ 0xea8
 8007cdc:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 8007ce0:	d105      	bne.n	8007cee <Stack_Push+0x86>
		Old_Data_stack.start_pointer = 0;
 8007ce2:	4b06      	ldr	r3, [pc, #24]	@ (8007cfc <Stack_Push+0x94>)
 8007ce4:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8007ce8:	2200      	movs	r2, #0
 8007cea:	f8a3 2ea8 	strh.w	r2, [r3, #3752]	@ 0xea8
	}
}
 8007cee:	bf00      	nop
 8007cf0:	370c      	adds	r7, #12
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf8:	4770      	bx	lr
 8007cfa:	bf00      	nop
 8007cfc:	000001a4 	.word	0x000001a4

08007d00 <ROOL_MAX_VAL>:

int16_t ROOL_MAX_VAL(void){
 8007d00:	b480      	push	{r7}
 8007d02:	af00      	add	r7, sp, #0
	MYDRON.ROOL_STA = 2;
 8007d04:	4b05      	ldr	r3, [pc, #20]	@ (8007d1c <ROOL_MAX_VAL+0x1c>)
 8007d06:	2202      	movs	r2, #2
 8007d08:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
	return 5000;
 8007d0c:	f241 3388 	movw	r3, #5000	@ 0x1388
}
 8007d10:	4618      	mov	r0, r3
 8007d12:	46bd      	mov	sp, r7
 8007d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d18:	4770      	bx	lr
 8007d1a:	bf00      	nop
 8007d1c:	00000180 	.word	0x00000180

08007d20 <ROOL_MIN_VAL>:
int16_t ROOL_MIN_VAL(void){
 8007d20:	b480      	push	{r7}
 8007d22:	af00      	add	r7, sp, #0
	MYDRON.ROOL_STA = 1;
 8007d24:	4b04      	ldr	r3, [pc, #16]	@ (8007d38 <ROOL_MIN_VAL+0x18>)
 8007d26:	2201      	movs	r2, #1
 8007d28:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
	return -5000;
 8007d2c:	4b03      	ldr	r3, [pc, #12]	@ (8007d3c <ROOL_MIN_VAL+0x1c>)
}
 8007d2e:	4618      	mov	r0, r3
 8007d30:	46bd      	mov	sp, r7
 8007d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d36:	4770      	bx	lr
 8007d38:	00000180 	.word	0x00000180
 8007d3c:	ffffec78 	.word	0xffffec78

08007d40 <PITCH_MAX_VAL>:
int16_t PITCH_MAX_VAL(void){
 8007d40:	b480      	push	{r7}
 8007d42:	af00      	add	r7, sp, #0
	MYDRON.PITCH_STA = 2;
 8007d44:	4b05      	ldr	r3, [pc, #20]	@ (8007d5c <PITCH_MAX_VAL+0x1c>)
 8007d46:	2202      	movs	r2, #2
 8007d48:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
	return 5000;
 8007d4c:	f241 3388 	movw	r3, #5000	@ 0x1388
}
 8007d50:	4618      	mov	r0, r3
 8007d52:	46bd      	mov	sp, r7
 8007d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d58:	4770      	bx	lr
 8007d5a:	bf00      	nop
 8007d5c:	00000180 	.word	0x00000180

08007d60 <PITCH_MIN_VAL>:
int16_t PITCH_MIN_VAL(void){
 8007d60:	b480      	push	{r7}
 8007d62:	af00      	add	r7, sp, #0
	MYDRON.PITCH_STA = 1;
 8007d64:	4b04      	ldr	r3, [pc, #16]	@ (8007d78 <PITCH_MIN_VAL+0x18>)
 8007d66:	2201      	movs	r2, #1
 8007d68:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
	return -5000;
 8007d6c:	4b03      	ldr	r3, [pc, #12]	@ (8007d7c <PITCH_MIN_VAL+0x1c>)
}
 8007d6e:	4618      	mov	r0, r3
 8007d70:	46bd      	mov	sp, r7
 8007d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d76:	4770      	bx	lr
 8007d78:	00000180 	.word	0x00000180
 8007d7c:	ffffec78 	.word	0xffffec78

08007d80 <YAW_MAX_VAL>:
int16_t YAW_MAX_VAL(void){
 8007d80:	b480      	push	{r7}
 8007d82:	af00      	add	r7, sp, #0
	MYDRON.YAW_STA = 2;
 8007d84:	4b05      	ldr	r3, [pc, #20]	@ (8007d9c <YAW_MAX_VAL+0x1c>)
 8007d86:	2202      	movs	r2, #2
 8007d88:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
	return 5000;
 8007d8c:	f241 3388 	movw	r3, #5000	@ 0x1388
}
 8007d90:	4618      	mov	r0, r3
 8007d92:	46bd      	mov	sp, r7
 8007d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d98:	4770      	bx	lr
 8007d9a:	bf00      	nop
 8007d9c:	00000180 	.word	0x00000180

08007da0 <YAW_MIN_VAL>:
int16_t YAW_MIN_VAL(void){
 8007da0:	b480      	push	{r7}
 8007da2:	af00      	add	r7, sp, #0
	MYDRON.YAW_STA = 1;
 8007da4:	4b04      	ldr	r3, [pc, #16]	@ (8007db8 <YAW_MIN_VAL+0x18>)
 8007da6:	2201      	movs	r2, #1
 8007da8:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
	return -5000;
 8007dac:	4b03      	ldr	r3, [pc, #12]	@ (8007dbc <YAW_MIN_VAL+0x1c>)
}
 8007dae:	4618      	mov	r0, r3
 8007db0:	46bd      	mov	sp, r7
 8007db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db6:	4770      	bx	lr
 8007db8:	00000180 	.word	0x00000180
 8007dbc:	ffffec78 	.word	0xffffec78

08007dc0 <ROOL_GOOD_VAL>:
int16_t ROOL_GOOD_VAL(void){
 8007dc0:	b480      	push	{r7}
 8007dc2:	af00      	add	r7, sp, #0
	MYDRON.ROOL_STA = 0;
 8007dc4:	4b08      	ldr	r3, [pc, #32]	@ (8007de8 <ROOL_GOOD_VAL+0x28>)
 8007dc6:	2200      	movs	r2, #0
 8007dc8:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
	return pid_angular_rate_rool;
 8007dcc:	4b07      	ldr	r3, [pc, #28]	@ (8007dec <ROOL_GOOD_VAL+0x2c>)
 8007dce:	edd3 7a00 	vldr	s15, [r3]
 8007dd2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007dd6:	ee17 3a90 	vmov	r3, s15
 8007dda:	b21b      	sxth	r3, r3
}
 8007ddc:	4618      	mov	r0, r3
 8007dde:	46bd      	mov	sp, r7
 8007de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de4:	4770      	bx	lr
 8007de6:	bf00      	nop
 8007de8:	00000180 	.word	0x00000180
 8007dec:	000040e8 	.word	0x000040e8

08007df0 <PITCH_GOOD_VAL>:
int16_t PITCH_GOOD_VAL(void){
 8007df0:	b480      	push	{r7}
 8007df2:	af00      	add	r7, sp, #0
	MYDRON.PITCH_STA = 0;
 8007df4:	4b08      	ldr	r3, [pc, #32]	@ (8007e18 <PITCH_GOOD_VAL+0x28>)
 8007df6:	2200      	movs	r2, #0
 8007df8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
	return pid_angular_rate_pitch;
 8007dfc:	4b07      	ldr	r3, [pc, #28]	@ (8007e1c <PITCH_GOOD_VAL+0x2c>)
 8007dfe:	edd3 7a00 	vldr	s15, [r3]
 8007e02:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007e06:	ee17 3a90 	vmov	r3, s15
 8007e0a:	b21b      	sxth	r3, r3
}
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e14:	4770      	bx	lr
 8007e16:	bf00      	nop
 8007e18:	00000180 	.word	0x00000180
 8007e1c:	000040e0 	.word	0x000040e0

08007e20 <YAW_GOOD_VAL>:
int16_t YAW_GOOD_VAL(void){
 8007e20:	b480      	push	{r7}
 8007e22:	af00      	add	r7, sp, #0
	MYDRON.YAW_STA = 0;
 8007e24:	4b08      	ldr	r3, [pc, #32]	@ (8007e48 <YAW_GOOD_VAL+0x28>)
 8007e26:	2200      	movs	r2, #0
 8007e28:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
	return pid_angular_rate_yaw;
 8007e2c:	4b07      	ldr	r3, [pc, #28]	@ (8007e4c <YAW_GOOD_VAL+0x2c>)
 8007e2e:	edd3 7a00 	vldr	s15, [r3]
 8007e32:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007e36:	ee17 3a90 	vmov	r3, s15
 8007e3a:	b21b      	sxth	r3, r3
}
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e44:	4770      	bx	lr
 8007e46:	bf00      	nop
 8007e48:	00000180 	.word	0x00000180
 8007e4c:	000040e4 	.word	0x000040e4

08007e50 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b084      	sub	sp, #16
 8007e54:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8007e56:	463b      	mov	r3, r7
 8007e58:	2200      	movs	r2, #0
 8007e5a:	601a      	str	r2, [r3, #0]
 8007e5c:	605a      	str	r2, [r3, #4]
 8007e5e:	609a      	str	r2, [r3, #8]
 8007e60:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8007e62:	f003 fc3d 	bl	800b6e0 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8007e66:	2301      	movs	r3, #1
 8007e68:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8007e6e:	2300      	movs	r3, #0
 8007e70:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8007e72:	231f      	movs	r3, #31
 8007e74:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8007e76:	2387      	movs	r3, #135	@ 0x87
 8007e78:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8007e7e:	2300      	movs	r3, #0
 8007e80:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8007e82:	2301      	movs	r3, #1
 8007e84:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8007e86:	2301      	movs	r3, #1
 8007e88:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8007e8e:	2300      	movs	r3, #0
 8007e90:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8007e92:	463b      	mov	r3, r7
 8007e94:	4618      	mov	r0, r3
 8007e96:	f003 fc5b 	bl	800b750 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8007e9a:	2004      	movs	r0, #4
 8007e9c:	f003 fc38 	bl	800b710 <HAL_MPU_Enable>

}
 8007ea0:	bf00      	nop
 8007ea2:	3710      	adds	r7, #16
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	bd80      	pop	{r7, pc}

08007ea8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007ea8:	b480      	push	{r7}
 8007eaa:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8007eac:	b672      	cpsid	i
}
 8007eae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8007eb0:	bf00      	nop
 8007eb2:	e7fd      	b.n	8007eb0 <Error_Handler+0x8>

08007eb4 <MX_SPI2_Init>:
SPI_HandleTypeDef hspi6;
DMA_HandleTypeDef hdma_spi2_tx;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8007eb4:	b580      	push	{r7, lr}
 8007eb6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8007eb8:	4b27      	ldr	r3, [pc, #156]	@ (8007f58 <MX_SPI2_Init+0xa4>)
 8007eba:	4a28      	ldr	r2, [pc, #160]	@ (8007f5c <MX_SPI2_Init+0xa8>)
 8007ebc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8007ebe:	4b26      	ldr	r3, [pc, #152]	@ (8007f58 <MX_SPI2_Init+0xa4>)
 8007ec0:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8007ec4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8007ec6:	4b24      	ldr	r3, [pc, #144]	@ (8007f58 <MX_SPI2_Init+0xa4>)
 8007ec8:	2200      	movs	r2, #0
 8007eca:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8007ecc:	4b22      	ldr	r3, [pc, #136]	@ (8007f58 <MX_SPI2_Init+0xa4>)
 8007ece:	2207      	movs	r2, #7
 8007ed0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8007ed2:	4b21      	ldr	r3, [pc, #132]	@ (8007f58 <MX_SPI2_Init+0xa4>)
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8007ed8:	4b1f      	ldr	r3, [pc, #124]	@ (8007f58 <MX_SPI2_Init+0xa4>)
 8007eda:	2200      	movs	r2, #0
 8007edc:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8007ede:	4b1e      	ldr	r3, [pc, #120]	@ (8007f58 <MX_SPI2_Init+0xa4>)
 8007ee0:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8007ee4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007ee6:	4b1c      	ldr	r3, [pc, #112]	@ (8007f58 <MX_SPI2_Init+0xa4>)
 8007ee8:	2200      	movs	r2, #0
 8007eea:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8007eec:	4b1a      	ldr	r3, [pc, #104]	@ (8007f58 <MX_SPI2_Init+0xa4>)
 8007eee:	2200      	movs	r2, #0
 8007ef0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8007ef2:	4b19      	ldr	r3, [pc, #100]	@ (8007f58 <MX_SPI2_Init+0xa4>)
 8007ef4:	2200      	movs	r2, #0
 8007ef6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007ef8:	4b17      	ldr	r3, [pc, #92]	@ (8007f58 <MX_SPI2_Init+0xa4>)
 8007efa:	2200      	movs	r2, #0
 8007efc:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8007efe:	4b16      	ldr	r3, [pc, #88]	@ (8007f58 <MX_SPI2_Init+0xa4>)
 8007f00:	2200      	movs	r2, #0
 8007f02:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8007f04:	4b14      	ldr	r3, [pc, #80]	@ (8007f58 <MX_SPI2_Init+0xa4>)
 8007f06:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8007f0a:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8007f0c:	4b12      	ldr	r3, [pc, #72]	@ (8007f58 <MX_SPI2_Init+0xa4>)
 8007f0e:	2200      	movs	r2, #0
 8007f10:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8007f12:	4b11      	ldr	r3, [pc, #68]	@ (8007f58 <MX_SPI2_Init+0xa4>)
 8007f14:	2200      	movs	r2, #0
 8007f16:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8007f18:	4b0f      	ldr	r3, [pc, #60]	@ (8007f58 <MX_SPI2_Init+0xa4>)
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8007f1e:	4b0e      	ldr	r3, [pc, #56]	@ (8007f58 <MX_SPI2_Init+0xa4>)
 8007f20:	2200      	movs	r2, #0
 8007f22:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8007f24:	4b0c      	ldr	r3, [pc, #48]	@ (8007f58 <MX_SPI2_Init+0xa4>)
 8007f26:	2200      	movs	r2, #0
 8007f28:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8007f2a:	4b0b      	ldr	r3, [pc, #44]	@ (8007f58 <MX_SPI2_Init+0xa4>)
 8007f2c:	2200      	movs	r2, #0
 8007f2e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8007f30:	4b09      	ldr	r3, [pc, #36]	@ (8007f58 <MX_SPI2_Init+0xa4>)
 8007f32:	2200      	movs	r2, #0
 8007f34:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8007f36:	4b08      	ldr	r3, [pc, #32]	@ (8007f58 <MX_SPI2_Init+0xa4>)
 8007f38:	2200      	movs	r2, #0
 8007f3a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8007f3c:	4b06      	ldr	r3, [pc, #24]	@ (8007f58 <MX_SPI2_Init+0xa4>)
 8007f3e:	2200      	movs	r2, #0
 8007f40:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8007f42:	4805      	ldr	r0, [pc, #20]	@ (8007f58 <MX_SPI2_Init+0xa4>)
 8007f44:	f00c fc8e 	bl	8014864 <HAL_SPI_Init>
 8007f48:	4603      	mov	r3, r0
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d001      	beq.n	8007f52 <MX_SPI2_Init+0x9e>
  {
    Error_Handler();
 8007f4e:	f7ff ffab 	bl	8007ea8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8007f52:	bf00      	nop
 8007f54:	bd80      	pop	{r7, pc}
 8007f56:	bf00      	nop
 8007f58:	240001f0 	.word	0x240001f0
 8007f5c:	40003800 	.word	0x40003800

08007f60 <MX_SPI6_Init>:
/* SPI6 init function */
void MX_SPI6_Init(void)
{
 8007f60:	b580      	push	{r7, lr}
 8007f62:	af00      	add	r7, sp, #0
  /* USER CODE END SPI6_Init 0 */

  /* USER CODE BEGIN SPI6_Init 1 */

  /* USER CODE END SPI6_Init 1 */
  hspi6.Instance = SPI6;
 8007f64:	4b27      	ldr	r3, [pc, #156]	@ (8008004 <MX_SPI6_Init+0xa4>)
 8007f66:	4a28      	ldr	r2, [pc, #160]	@ (8008008 <MX_SPI6_Init+0xa8>)
 8007f68:	601a      	str	r2, [r3, #0]
  hspi6.Init.Mode = SPI_MODE_MASTER;
 8007f6a:	4b26      	ldr	r3, [pc, #152]	@ (8008004 <MX_SPI6_Init+0xa4>)
 8007f6c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8007f70:	605a      	str	r2, [r3, #4]
  hspi6.Init.Direction = SPI_DIRECTION_2LINES;
 8007f72:	4b24      	ldr	r3, [pc, #144]	@ (8008004 <MX_SPI6_Init+0xa4>)
 8007f74:	2200      	movs	r2, #0
 8007f76:	609a      	str	r2, [r3, #8]
  hspi6.Init.DataSize = SPI_DATASIZE_8BIT;
 8007f78:	4b22      	ldr	r3, [pc, #136]	@ (8008004 <MX_SPI6_Init+0xa4>)
 8007f7a:	2207      	movs	r2, #7
 8007f7c:	60da      	str	r2, [r3, #12]
  hspi6.Init.CLKPolarity = SPI_POLARITY_LOW;
 8007f7e:	4b21      	ldr	r3, [pc, #132]	@ (8008004 <MX_SPI6_Init+0xa4>)
 8007f80:	2200      	movs	r2, #0
 8007f82:	611a      	str	r2, [r3, #16]
  hspi6.Init.CLKPhase = SPI_PHASE_1EDGE;
 8007f84:	4b1f      	ldr	r3, [pc, #124]	@ (8008004 <MX_SPI6_Init+0xa4>)
 8007f86:	2200      	movs	r2, #0
 8007f88:	615a      	str	r2, [r3, #20]
  hspi6.Init.NSS = SPI_NSS_SOFT;
 8007f8a:	4b1e      	ldr	r3, [pc, #120]	@ (8008004 <MX_SPI6_Init+0xa4>)
 8007f8c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8007f90:	619a      	str	r2, [r3, #24]
  hspi6.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007f92:	4b1c      	ldr	r3, [pc, #112]	@ (8008004 <MX_SPI6_Init+0xa4>)
 8007f94:	2200      	movs	r2, #0
 8007f96:	61da      	str	r2, [r3, #28]
  hspi6.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8007f98:	4b1a      	ldr	r3, [pc, #104]	@ (8008004 <MX_SPI6_Init+0xa4>)
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	621a      	str	r2, [r3, #32]
  hspi6.Init.TIMode = SPI_TIMODE_DISABLE;
 8007f9e:	4b19      	ldr	r3, [pc, #100]	@ (8008004 <MX_SPI6_Init+0xa4>)
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi6.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007fa4:	4b17      	ldr	r3, [pc, #92]	@ (8008004 <MX_SPI6_Init+0xa4>)
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi6.Init.CRCPolynomial = 0x0;
 8007faa:	4b16      	ldr	r3, [pc, #88]	@ (8008004 <MX_SPI6_Init+0xa4>)
 8007fac:	2200      	movs	r2, #0
 8007fae:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi6.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8007fb0:	4b14      	ldr	r3, [pc, #80]	@ (8008004 <MX_SPI6_Init+0xa4>)
 8007fb2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8007fb6:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi6.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8007fb8:	4b12      	ldr	r3, [pc, #72]	@ (8008004 <MX_SPI6_Init+0xa4>)
 8007fba:	2200      	movs	r2, #0
 8007fbc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi6.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8007fbe:	4b11      	ldr	r3, [pc, #68]	@ (8008004 <MX_SPI6_Init+0xa4>)
 8007fc0:	2200      	movs	r2, #0
 8007fc2:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi6.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8007fc4:	4b0f      	ldr	r3, [pc, #60]	@ (8008004 <MX_SPI6_Init+0xa4>)
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi6.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8007fca:	4b0e      	ldr	r3, [pc, #56]	@ (8008004 <MX_SPI6_Init+0xa4>)
 8007fcc:	2200      	movs	r2, #0
 8007fce:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi6.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8007fd0:	4b0c      	ldr	r3, [pc, #48]	@ (8008004 <MX_SPI6_Init+0xa4>)
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi6.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8007fd6:	4b0b      	ldr	r3, [pc, #44]	@ (8008004 <MX_SPI6_Init+0xa4>)
 8007fd8:	2200      	movs	r2, #0
 8007fda:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi6.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8007fdc:	4b09      	ldr	r3, [pc, #36]	@ (8008004 <MX_SPI6_Init+0xa4>)
 8007fde:	2200      	movs	r2, #0
 8007fe0:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi6.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8007fe2:	4b08      	ldr	r3, [pc, #32]	@ (8008004 <MX_SPI6_Init+0xa4>)
 8007fe4:	2200      	movs	r2, #0
 8007fe6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi6.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8007fe8:	4b06      	ldr	r3, [pc, #24]	@ (8008004 <MX_SPI6_Init+0xa4>)
 8007fea:	2200      	movs	r2, #0
 8007fec:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi6) != HAL_OK)
 8007fee:	4805      	ldr	r0, [pc, #20]	@ (8008004 <MX_SPI6_Init+0xa4>)
 8007ff0:	f00c fc38 	bl	8014864 <HAL_SPI_Init>
 8007ff4:	4603      	mov	r3, r0
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d001      	beq.n	8007ffe <MX_SPI6_Init+0x9e>
  {
    Error_Handler();
 8007ffa:	f7ff ff55 	bl	8007ea8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI6_Init 2 */

  /* USER CODE END SPI6_Init 2 */

}
 8007ffe:	bf00      	nop
 8008000:	bd80      	pop	{r7, pc}
 8008002:	bf00      	nop
 8008004:	24000278 	.word	0x24000278
 8008008:	58001400 	.word	0x58001400

0800800c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800800c:	b580      	push	{r7, lr}
 800800e:	b0ba      	sub	sp, #232	@ 0xe8
 8008010:	af00      	add	r7, sp, #0
 8008012:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008014:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8008018:	2200      	movs	r2, #0
 800801a:	601a      	str	r2, [r3, #0]
 800801c:	605a      	str	r2, [r3, #4]
 800801e:	609a      	str	r2, [r3, #8]
 8008020:	60da      	str	r2, [r3, #12]
 8008022:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8008024:	f107 0318 	add.w	r3, r7, #24
 8008028:	22b8      	movs	r2, #184	@ 0xb8
 800802a:	2100      	movs	r1, #0
 800802c:	4618      	mov	r0, r3
 800802e:	f016 f871 	bl	801e114 <memset>
  if(spiHandle->Instance==SPI2)
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	4a77      	ldr	r2, [pc, #476]	@ (8008214 <HAL_SPI_MspInit+0x208>)
 8008038:	4293      	cmp	r3, r2
 800803a:	f040 8089 	bne.w	8008150 <HAL_SPI_MspInit+0x144>
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */

    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800803e:	4b76      	ldr	r3, [pc, #472]	@ (8008218 <HAL_SPI_MspInit+0x20c>)
 8008040:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008044:	4a74      	ldr	r2, [pc, #464]	@ (8008218 <HAL_SPI_MspInit+0x20c>)
 8008046:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800804a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800804e:	4b72      	ldr	r3, [pc, #456]	@ (8008218 <HAL_SPI_MspInit+0x20c>)
 8008050:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008054:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008058:	617b      	str	r3, [r7, #20]
 800805a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800805c:	4b6e      	ldr	r3, [pc, #440]	@ (8008218 <HAL_SPI_MspInit+0x20c>)
 800805e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008062:	4a6d      	ldr	r2, [pc, #436]	@ (8008218 <HAL_SPI_MspInit+0x20c>)
 8008064:	f043 0302 	orr.w	r3, r3, #2
 8008068:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800806c:	4b6a      	ldr	r3, [pc, #424]	@ (8008218 <HAL_SPI_MspInit+0x20c>)
 800806e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008072:	f003 0302 	and.w	r3, r3, #2
 8008076:	613b      	str	r3, [r7, #16]
 8008078:	693b      	ldr	r3, [r7, #16]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800807a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800807e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008082:	2302      	movs	r3, #2
 8008084:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008088:	2300      	movs	r3, #0
 800808a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800808e:	2301      	movs	r3, #1
 8008090:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8008094:	2305      	movs	r3, #5
 8008096:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800809a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800809e:	4619      	mov	r1, r3
 80080a0:	485e      	ldr	r0, [pc, #376]	@ (800821c <HAL_SPI_MspInit+0x210>)
 80080a2:	f006 f9e7 	bl	800e474 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80080a6:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80080aa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80080ae:	2302      	movs	r3, #2
 80080b0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80080b4:	2301      	movs	r3, #1
 80080b6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80080ba:	2301      	movs	r3, #1
 80080bc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80080c0:	2305      	movs	r3, #5
 80080c2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80080c6:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80080ca:	4619      	mov	r1, r3
 80080cc:	4853      	ldr	r0, [pc, #332]	@ (800821c <HAL_SPI_MspInit+0x210>)
 80080ce:	f006 f9d1 	bl	800e474 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream0;
 80080d2:	4b53      	ldr	r3, [pc, #332]	@ (8008220 <HAL_SPI_MspInit+0x214>)
 80080d4:	4a53      	ldr	r2, [pc, #332]	@ (8008224 <HAL_SPI_MspInit+0x218>)
 80080d6:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_SPI2_TX;
 80080d8:	4b51      	ldr	r3, [pc, #324]	@ (8008220 <HAL_SPI_MspInit+0x214>)
 80080da:	2228      	movs	r2, #40	@ 0x28
 80080dc:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80080de:	4b50      	ldr	r3, [pc, #320]	@ (8008220 <HAL_SPI_MspInit+0x214>)
 80080e0:	2240      	movs	r2, #64	@ 0x40
 80080e2:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80080e4:	4b4e      	ldr	r3, [pc, #312]	@ (8008220 <HAL_SPI_MspInit+0x214>)
 80080e6:	2200      	movs	r2, #0
 80080e8:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80080ea:	4b4d      	ldr	r3, [pc, #308]	@ (8008220 <HAL_SPI_MspInit+0x214>)
 80080ec:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80080f0:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80080f2:	4b4b      	ldr	r3, [pc, #300]	@ (8008220 <HAL_SPI_MspInit+0x214>)
 80080f4:	2200      	movs	r2, #0
 80080f6:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80080f8:	4b49      	ldr	r3, [pc, #292]	@ (8008220 <HAL_SPI_MspInit+0x214>)
 80080fa:	2200      	movs	r2, #0
 80080fc:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 80080fe:	4b48      	ldr	r3, [pc, #288]	@ (8008220 <HAL_SPI_MspInit+0x214>)
 8008100:	2200      	movs	r2, #0
 8008102:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8008104:	4b46      	ldr	r3, [pc, #280]	@ (8008220 <HAL_SPI_MspInit+0x214>)
 8008106:	2200      	movs	r2, #0
 8008108:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800810a:	4b45      	ldr	r3, [pc, #276]	@ (8008220 <HAL_SPI_MspInit+0x214>)
 800810c:	2204      	movs	r2, #4
 800810e:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_spi2_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8008110:	4b43      	ldr	r3, [pc, #268]	@ (8008220 <HAL_SPI_MspInit+0x214>)
 8008112:	2203      	movs	r2, #3
 8008114:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_spi2_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8008116:	4b42      	ldr	r3, [pc, #264]	@ (8008220 <HAL_SPI_MspInit+0x214>)
 8008118:	2200      	movs	r2, #0
 800811a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_spi2_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800811c:	4b40      	ldr	r3, [pc, #256]	@ (8008220 <HAL_SPI_MspInit+0x214>)
 800811e:	2200      	movs	r2, #0
 8008120:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8008122:	483f      	ldr	r0, [pc, #252]	@ (8008220 <HAL_SPI_MspInit+0x214>)
 8008124:	f003 fb54 	bl	800b7d0 <HAL_DMA_Init>
 8008128:	4603      	mov	r3, r0
 800812a:	2b00      	cmp	r3, #0
 800812c:	d001      	beq.n	8008132 <HAL_SPI_MspInit+0x126>
    {
      Error_Handler();
 800812e:	f7ff febb 	bl	8007ea8 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	4a3a      	ldr	r2, [pc, #232]	@ (8008220 <HAL_SPI_MspInit+0x214>)
 8008136:	679a      	str	r2, [r3, #120]	@ 0x78
 8008138:	4a39      	ldr	r2, [pc, #228]	@ (8008220 <HAL_SPI_MspInit+0x214>)
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 800813e:	2200      	movs	r2, #0
 8008140:	2100      	movs	r1, #0
 8008142:	2024      	movs	r0, #36	@ 0x24
 8008144:	f003 fa97 	bl	800b676 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8008148:	2024      	movs	r0, #36	@ 0x24
 800814a:	f003 faae 	bl	800b6aa <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN SPI6_MspInit 1 */

  /* USER CODE END SPI6_MspInit 1 */
  }
}
 800814e:	e05c      	b.n	800820a <HAL_SPI_MspInit+0x1fe>
  else if(spiHandle->Instance==SPI6)
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	4a34      	ldr	r2, [pc, #208]	@ (8008228 <HAL_SPI_MspInit+0x21c>)
 8008156:	4293      	cmp	r3, r2
 8008158:	d157      	bne.n	800820a <HAL_SPI_MspInit+0x1fe>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI6;
 800815a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800815e:	f04f 0300 	mov.w	r3, #0
 8008162:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.PLL3.PLL3M = 24;
 8008166:	2318      	movs	r3, #24
 8008168:	643b      	str	r3, [r7, #64]	@ 0x40
    PeriphClkInitStruct.PLL3.PLL3N = 200;
 800816a:	23c8      	movs	r3, #200	@ 0xc8
 800816c:	647b      	str	r3, [r7, #68]	@ 0x44
    PeriphClkInitStruct.PLL3.PLL3P = 1;
 800816e:	2301      	movs	r3, #1
 8008170:	64bb      	str	r3, [r7, #72]	@ 0x48
    PeriphClkInitStruct.PLL3.PLL3Q = 10;
 8008172:	230a      	movs	r3, #10
 8008174:	64fb      	str	r3, [r7, #76]	@ 0x4c
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8008176:	2302      	movs	r3, #2
 8008178:	653b      	str	r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_0;
 800817a:	2300      	movs	r3, #0
 800817c:	657b      	str	r3, [r7, #84]	@ 0x54
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 800817e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008182:	65bb      	str	r3, [r7, #88]	@ 0x58
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8008184:	2300      	movs	r3, #0
 8008186:	65fb      	str	r3, [r7, #92]	@ 0x5c
    PeriphClkInitStruct.Spi6ClockSelection = RCC_SPI6CLKSOURCE_PLL3;
 8008188:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800818c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8008190:	f107 0318 	add.w	r3, r7, #24
 8008194:	4618      	mov	r0, r3
 8008196:	f009 ff7f 	bl	8012098 <HAL_RCCEx_PeriphCLKConfig>
 800819a:	4603      	mov	r3, r0
 800819c:	2b00      	cmp	r3, #0
 800819e:	d001      	beq.n	80081a4 <HAL_SPI_MspInit+0x198>
      Error_Handler();
 80081a0:	f7ff fe82 	bl	8007ea8 <Error_Handler>
    __HAL_RCC_SPI6_CLK_ENABLE();
 80081a4:	4b1c      	ldr	r3, [pc, #112]	@ (8008218 <HAL_SPI_MspInit+0x20c>)
 80081a6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80081aa:	4a1b      	ldr	r2, [pc, #108]	@ (8008218 <HAL_SPI_MspInit+0x20c>)
 80081ac:	f043 0320 	orr.w	r3, r3, #32
 80081b0:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80081b4:	4b18      	ldr	r3, [pc, #96]	@ (8008218 <HAL_SPI_MspInit+0x20c>)
 80081b6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80081ba:	f003 0320 	and.w	r3, r3, #32
 80081be:	60fb      	str	r3, [r7, #12]
 80081c0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80081c2:	4b15      	ldr	r3, [pc, #84]	@ (8008218 <HAL_SPI_MspInit+0x20c>)
 80081c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80081c8:	4a13      	ldr	r2, [pc, #76]	@ (8008218 <HAL_SPI_MspInit+0x20c>)
 80081ca:	f043 0302 	orr.w	r3, r3, #2
 80081ce:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80081d2:	4b11      	ldr	r3, [pc, #68]	@ (8008218 <HAL_SPI_MspInit+0x20c>)
 80081d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80081d8:	f003 0302 	and.w	r3, r3, #2
 80081dc:	60bb      	str	r3, [r7, #8]
 80081de:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80081e0:	2338      	movs	r3, #56	@ 0x38
 80081e2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80081e6:	2302      	movs	r3, #2
 80081e8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80081ec:	2300      	movs	r3, #0
 80081ee:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80081f2:	2300      	movs	r3, #0
 80081f4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_SPI6;
 80081f8:	2308      	movs	r3, #8
 80081fa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80081fe:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8008202:	4619      	mov	r1, r3
 8008204:	4805      	ldr	r0, [pc, #20]	@ (800821c <HAL_SPI_MspInit+0x210>)
 8008206:	f006 f935 	bl	800e474 <HAL_GPIO_Init>
}
 800820a:	bf00      	nop
 800820c:	37e8      	adds	r7, #232	@ 0xe8
 800820e:	46bd      	mov	sp, r7
 8008210:	bd80      	pop	{r7, pc}
 8008212:	bf00      	nop
 8008214:	40003800 	.word	0x40003800
 8008218:	58024400 	.word	0x58024400
 800821c:	58020400 	.word	0x58020400
 8008220:	24000300 	.word	0x24000300
 8008224:	40020010 	.word	0x40020010
 8008228:	58001400 	.word	0x58001400

0800822c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800822c:	b480      	push	{r7}
 800822e:	b083      	sub	sp, #12
 8008230:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008232:	4b0a      	ldr	r3, [pc, #40]	@ (800825c <HAL_MspInit+0x30>)
 8008234:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008238:	4a08      	ldr	r2, [pc, #32]	@ (800825c <HAL_MspInit+0x30>)
 800823a:	f043 0302 	orr.w	r3, r3, #2
 800823e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8008242:	4b06      	ldr	r3, [pc, #24]	@ (800825c <HAL_MspInit+0x30>)
 8008244:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008248:	f003 0302 	and.w	r3, r3, #2
 800824c:	607b      	str	r3, [r7, #4]
 800824e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008250:	bf00      	nop
 8008252:	370c      	adds	r7, #12
 8008254:	46bd      	mov	sp, r7
 8008256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825a:	4770      	bx	lr
 800825c:	58024400 	.word	0x58024400

08008260 <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint32_t FatFsCnt = 0;
volatile uint32_t Timer1, Timer2;

void SDTimer_Handler(void)//1ms
{
 8008260:	b480      	push	{r7}
 8008262:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 8008264:	4b0b      	ldr	r3, [pc, #44]	@ (8008294 <SDTimer_Handler+0x34>)
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	2b00      	cmp	r3, #0
 800826a:	d004      	beq.n	8008276 <SDTimer_Handler+0x16>
    Timer1--;
 800826c:	4b09      	ldr	r3, [pc, #36]	@ (8008294 <SDTimer_Handler+0x34>)
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	3b01      	subs	r3, #1
 8008272:	4a08      	ldr	r2, [pc, #32]	@ (8008294 <SDTimer_Handler+0x34>)
 8008274:	6013      	str	r3, [r2, #0]

  if(Timer2 > 0)
 8008276:	4b08      	ldr	r3, [pc, #32]	@ (8008298 <SDTimer_Handler+0x38>)
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	2b00      	cmp	r3, #0
 800827c:	d004      	beq.n	8008288 <SDTimer_Handler+0x28>
    Timer2--;
 800827e:	4b06      	ldr	r3, [pc, #24]	@ (8008298 <SDTimer_Handler+0x38>)
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	3b01      	subs	r3, #1
 8008284:	4a04      	ldr	r2, [pc, #16]	@ (8008298 <SDTimer_Handler+0x38>)
 8008286:	6013      	str	r3, [r2, #0]
}
 8008288:	bf00      	nop
 800828a:	46bd      	mov	sp, r7
 800828c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008290:	4770      	bx	lr
 8008292:	bf00      	nop
 8008294:	2400037c 	.word	0x2400037c
 8008298:	24000380 	.word	0x24000380
 800829c:	00000000 	.word	0x00000000

080082a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b082      	sub	sp, #8
 80082a4:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */


	LED_G_0;
 80082a6:	2200      	movs	r2, #0
 80082a8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80082ac:	48bc      	ldr	r0, [pc, #752]	@ (80085a0 <NMI_Handler+0x300>)
 80082ae:	f006 faa1 	bl	800e7f4 <HAL_GPIO_WritePin>
	LED_Y_0;
 80082b2:	2200      	movs	r2, #0
 80082b4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80082b8:	48ba      	ldr	r0, [pc, #744]	@ (80085a4 <NMI_Handler+0x304>)
 80082ba:	f006 fa9b 	bl	800e7f4 <HAL_GPIO_WritePin>
	LED_R_1;
 80082be:	2201      	movs	r2, #1
 80082c0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80082c4:	48b7      	ldr	r0, [pc, #732]	@ (80085a4 <NMI_Handler+0x304>)
 80082c6:	f006 fa95 	bl	800e7f4 <HAL_GPIO_WritePin>
//todo create crash log
	f_close(&fil);
 80082ca:	48b7      	ldr	r0, [pc, #732]	@ (80085a8 <NMI_Handler+0x308>)
 80082cc:	f015 fd2a 	bl	801dd24 <f_close>

	wanted_rool = 0;
 80082d0:	4bb6      	ldr	r3, [pc, #728]	@ (80085ac <NMI_Handler+0x30c>)
 80082d2:	f04f 0200 	mov.w	r2, #0
 80082d6:	601a      	str	r2, [r3, #0]
	wanted_pitch = 0;
 80082d8:	4bb5      	ldr	r3, [pc, #724]	@ (80085b0 <NMI_Handler+0x310>)
 80082da:	f04f 0200 	mov.w	r2, #0
 80082de:	601a      	str	r2, [r3, #0]
	wanted_yaw = 0;
 80082e0:	4bb4      	ldr	r3, [pc, #720]	@ (80085b4 <NMI_Handler+0x314>)
 80082e2:	f04f 0200 	mov.w	r2, #0
 80082e6:	601a      	str	r2, [r3, #0]
	wanted_thrust = DRON_SLOWFALING;
 80082e8:	4bb3      	ldr	r3, [pc, #716]	@ (80085b8 <NMI_Handler+0x318>)
 80082ea:	881b      	ldrh	r3, [r3, #0]
 80082ec:	b21a      	sxth	r2, r3
 80082ee:	4bb3      	ldr	r3, [pc, #716]	@ (80085bc <NMI_Handler+0x31c>)
 80082f0:	801a      	strh	r2, [r3, #0]
  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
  {
	   	HAL_Delay(1);
 80082f2:	2001      	movs	r0, #1
 80082f4:	f001 f942 	bl	800957c <HAL_Delay>
		MPU6050_GET_ACCANDGYR_CALANDSCL(&ax, &ay, &az, &gx, &gy, &gz, accelx_cal, accely_cal, accelz_cal, gyrox_cal, gyroy_cal, gyroz_cal, Gyr_Scale, Acc_Scale);
 80082f8:	4bb1      	ldr	r3, [pc, #708]	@ (80085c0 <NMI_Handler+0x320>)
 80082fa:	edd3 7a00 	vldr	s15, [r3]
 80082fe:	4bb1      	ldr	r3, [pc, #708]	@ (80085c4 <NMI_Handler+0x324>)
 8008300:	ed93 7a00 	vldr	s14, [r3]
 8008304:	4bb0      	ldr	r3, [pc, #704]	@ (80085c8 <NMI_Handler+0x328>)
 8008306:	edd3 6a00 	vldr	s13, [r3]
 800830a:	4bb0      	ldr	r3, [pc, #704]	@ (80085cc <NMI_Handler+0x32c>)
 800830c:	ed93 6a00 	vldr	s12, [r3]
 8008310:	4baf      	ldr	r3, [pc, #700]	@ (80085d0 <NMI_Handler+0x330>)
 8008312:	edd3 5a00 	vldr	s11, [r3]
 8008316:	4baf      	ldr	r3, [pc, #700]	@ (80085d4 <NMI_Handler+0x334>)
 8008318:	ed93 5a00 	vldr	s10, [r3]
 800831c:	4bae      	ldr	r3, [pc, #696]	@ (80085d8 <NMI_Handler+0x338>)
 800831e:	edd3 4a00 	vldr	s9, [r3]
 8008322:	4bae      	ldr	r3, [pc, #696]	@ (80085dc <NMI_Handler+0x33c>)
 8008324:	ed93 4a00 	vldr	s8, [r3]
 8008328:	4bad      	ldr	r3, [pc, #692]	@ (80085e0 <NMI_Handler+0x340>)
 800832a:	9301      	str	r3, [sp, #4]
 800832c:	4bad      	ldr	r3, [pc, #692]	@ (80085e4 <NMI_Handler+0x344>)
 800832e:	9300      	str	r3, [sp, #0]
 8008330:	eef0 3a44 	vmov.f32	s7, s8
 8008334:	eeb0 3a64 	vmov.f32	s6, s9
 8008338:	eef0 2a45 	vmov.f32	s5, s10
 800833c:	eeb0 2a65 	vmov.f32	s4, s11
 8008340:	eef0 1a46 	vmov.f32	s3, s12
 8008344:	eeb0 1a66 	vmov.f32	s2, s13
 8008348:	eef0 0a47 	vmov.f32	s1, s14
 800834c:	eeb0 0a67 	vmov.f32	s0, s15
 8008350:	4ba5      	ldr	r3, [pc, #660]	@ (80085e8 <NMI_Handler+0x348>)
 8008352:	4aa6      	ldr	r2, [pc, #664]	@ (80085ec <NMI_Handler+0x34c>)
 8008354:	49a6      	ldr	r1, [pc, #664]	@ (80085f0 <NMI_Handler+0x350>)
 8008356:	48a7      	ldr	r0, [pc, #668]	@ (80085f4 <NMI_Handler+0x354>)
 8008358:	f7f9 f984 	bl	8001664 <MPU6050_GET_ACCANDGYR_CALANDSCL>
		MPU6050_GET_ACCEL_TO_ANGLE(ax, ay, az, &ax_ang, &ay_ang/*, &az_ang*/);
 800835c:	4ba5      	ldr	r3, [pc, #660]	@ (80085f4 <NMI_Handler+0x354>)
 800835e:	edd3 7a00 	vldr	s15, [r3]
 8008362:	4ba3      	ldr	r3, [pc, #652]	@ (80085f0 <NMI_Handler+0x350>)
 8008364:	ed93 7a00 	vldr	s14, [r3]
 8008368:	4ba0      	ldr	r3, [pc, #640]	@ (80085ec <NMI_Handler+0x34c>)
 800836a:	edd3 6a00 	vldr	s13, [r3]
 800836e:	49a2      	ldr	r1, [pc, #648]	@ (80085f8 <NMI_Handler+0x358>)
 8008370:	48a2      	ldr	r0, [pc, #648]	@ (80085fc <NMI_Handler+0x35c>)
 8008372:	eeb0 1a66 	vmov.f32	s2, s13
 8008376:	eef0 0a47 	vmov.f32	s1, s14
 800837a:	eeb0 0a67 	vmov.f32	s0, s15
 800837e:	f7f9 f8e7 	bl	8001550 <MPU6050_GET_ACCEL_TO_ANGLE>
		MPU6050_GET_ACCANDGYR_FILTRED(&data, ax_ang, ay_ang, Mag_Z, gx, gy, gz);
 8008382:	4b9e      	ldr	r3, [pc, #632]	@ (80085fc <NMI_Handler+0x35c>)
 8008384:	edd3 7a00 	vldr	s15, [r3]
 8008388:	4b9b      	ldr	r3, [pc, #620]	@ (80085f8 <NMI_Handler+0x358>)
 800838a:	ed93 7a00 	vldr	s14, [r3]
 800838e:	4b9c      	ldr	r3, [pc, #624]	@ (8008600 <NMI_Handler+0x360>)
 8008390:	edd3 6a00 	vldr	s13, [r3]
 8008394:	4b94      	ldr	r3, [pc, #592]	@ (80085e8 <NMI_Handler+0x348>)
 8008396:	ed93 6a00 	vldr	s12, [r3]
 800839a:	4b92      	ldr	r3, [pc, #584]	@ (80085e4 <NMI_Handler+0x344>)
 800839c:	edd3 5a00 	vldr	s11, [r3]
 80083a0:	4b8f      	ldr	r3, [pc, #572]	@ (80085e0 <NMI_Handler+0x340>)
 80083a2:	ed93 5a00 	vldr	s10, [r3]
 80083a6:	eef0 2a45 	vmov.f32	s5, s10
 80083aa:	eeb0 2a65 	vmov.f32	s4, s11
 80083ae:	eef0 1a46 	vmov.f32	s3, s12
 80083b2:	eeb0 1a66 	vmov.f32	s2, s13
 80083b6:	eef0 0a47 	vmov.f32	s1, s14
 80083ba:	eeb0 0a67 	vmov.f32	s0, s15
 80083be:	4891      	ldr	r0, [pc, #580]	@ (8008604 <NMI_Handler+0x364>)
 80083c0:	f7f9 faca 	bl	8001958 <MPU6050_GET_ACCANDGYR_FILTRED>


		now_pitch = data.x;
 80083c4:	4b8f      	ldr	r3, [pc, #572]	@ (8008604 <NMI_Handler+0x364>)
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	4a8f      	ldr	r2, [pc, #572]	@ (8008608 <NMI_Handler+0x368>)
 80083ca:	6013      	str	r3, [r2, #0]
		now_rool = data.y;
 80083cc:	4b8d      	ldr	r3, [pc, #564]	@ (8008604 <NMI_Handler+0x364>)
 80083ce:	685b      	ldr	r3, [r3, #4]
 80083d0:	4a8e      	ldr	r2, [pc, #568]	@ (800860c <NMI_Handler+0x36c>)
 80083d2:	6013      	str	r3, [r2, #0]
		now_yaw = data.z;
 80083d4:	4b8b      	ldr	r3, [pc, #556]	@ (8008604 <NMI_Handler+0x364>)
 80083d6:	689b      	ldr	r3, [r3, #8]
 80083d8:	4a8d      	ldr	r2, [pc, #564]	@ (8008610 <NMI_Handler+0x370>)
 80083da:	6013      	str	r3, [r2, #0]


		last_wanted_rool_rx = wanted_rool;
 80083dc:	4b73      	ldr	r3, [pc, #460]	@ (80085ac <NMI_Handler+0x30c>)
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	4a8c      	ldr	r2, [pc, #560]	@ (8008614 <NMI_Handler+0x374>)
 80083e2:	6013      	str	r3, [r2, #0]
		last_wanted_pitch_rx = wanted_pitch;
 80083e4:	4b72      	ldr	r3, [pc, #456]	@ (80085b0 <NMI_Handler+0x310>)
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	4a8b      	ldr	r2, [pc, #556]	@ (8008618 <NMI_Handler+0x378>)
 80083ea:	6013      	str	r3, [r2, #0]
		last_wanted_yaw_rx = wanted_yaw;
 80083ec:	4b71      	ldr	r3, [pc, #452]	@ (80085b4 <NMI_Handler+0x314>)
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	4a8a      	ldr	r2, [pc, #552]	@ (800861c <NMI_Handler+0x37c>)
 80083f2:	6013      	str	r3, [r2, #0]


		error_sum_pitch = error_sum_pitch + (wanted_pitch - now_pitch);
 80083f4:	4b8a      	ldr	r3, [pc, #552]	@ (8008620 <NMI_Handler+0x380>)
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	ee07 3a90 	vmov	s15, r3
 80083fc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008400:	4b6b      	ldr	r3, [pc, #428]	@ (80085b0 <NMI_Handler+0x310>)
 8008402:	edd3 6a00 	vldr	s13, [r3]
 8008406:	4b80      	ldr	r3, [pc, #512]	@ (8008608 <NMI_Handler+0x368>)
 8008408:	edd3 7a00 	vldr	s15, [r3]
 800840c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8008410:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008414:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008418:	ee17 2a90 	vmov	r2, s15
 800841c:	4b80      	ldr	r3, [pc, #512]	@ (8008620 <NMI_Handler+0x380>)
 800841e:	601a      	str	r2, [r3, #0]
		error_sum_rool = error_sum_rool + (wanted_rool - now_rool);
 8008420:	4b80      	ldr	r3, [pc, #512]	@ (8008624 <NMI_Handler+0x384>)
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	ee07 3a90 	vmov	s15, r3
 8008428:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800842c:	4b5f      	ldr	r3, [pc, #380]	@ (80085ac <NMI_Handler+0x30c>)
 800842e:	edd3 6a00 	vldr	s13, [r3]
 8008432:	4b76      	ldr	r3, [pc, #472]	@ (800860c <NMI_Handler+0x36c>)
 8008434:	edd3 7a00 	vldr	s15, [r3]
 8008438:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800843c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008440:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008444:	ee17 2a90 	vmov	r2, s15
 8008448:	4b76      	ldr	r3, [pc, #472]	@ (8008624 <NMI_Handler+0x384>)
 800844a:	601a      	str	r2, [r3, #0]
		error_sum_yaw = error_sum_yaw + (wanted_yaw - now_yaw);
 800844c:	4b76      	ldr	r3, [pc, #472]	@ (8008628 <NMI_Handler+0x388>)
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	ee07 3a90 	vmov	s15, r3
 8008454:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008458:	4b56      	ldr	r3, [pc, #344]	@ (80085b4 <NMI_Handler+0x314>)
 800845a:	edd3 6a00 	vldr	s13, [r3]
 800845e:	4b6c      	ldr	r3, [pc, #432]	@ (8008610 <NMI_Handler+0x370>)
 8008460:	edd3 7a00 	vldr	s15, [r3]
 8008464:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8008468:	ee77 7a27 	vadd.f32	s15, s14, s15
 800846c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008470:	ee17 2a90 	vmov	r2, s15
 8008474:	4b6c      	ldr	r3, [pc, #432]	@ (8008628 <NMI_Handler+0x388>)
 8008476:	601a      	str	r2, [r3, #0]

		error_sum_angular_rate_pitch = error_sum_angular_rate_pitch + (pid_pitch - gx);
 8008478:	4b6c      	ldr	r3, [pc, #432]	@ (800862c <NMI_Handler+0x38c>)
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	ee07 3a90 	vmov	s15, r3
 8008480:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008484:	4b6a      	ldr	r3, [pc, #424]	@ (8008630 <NMI_Handler+0x390>)
 8008486:	edd3 6a00 	vldr	s13, [r3]
 800848a:	4b57      	ldr	r3, [pc, #348]	@ (80085e8 <NMI_Handler+0x348>)
 800848c:	edd3 7a00 	vldr	s15, [r3]
 8008490:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8008494:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008498:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800849c:	ee17 2a90 	vmov	r2, s15
 80084a0:	4b62      	ldr	r3, [pc, #392]	@ (800862c <NMI_Handler+0x38c>)
 80084a2:	601a      	str	r2, [r3, #0]
		error_sum_angular_rate_rool = error_sum_angular_rate_rool + (pid_rool - gy);
 80084a4:	4b63      	ldr	r3, [pc, #396]	@ (8008634 <NMI_Handler+0x394>)
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	ee07 3a90 	vmov	s15, r3
 80084ac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80084b0:	4b61      	ldr	r3, [pc, #388]	@ (8008638 <NMI_Handler+0x398>)
 80084b2:	edd3 6a00 	vldr	s13, [r3]
 80084b6:	4b4b      	ldr	r3, [pc, #300]	@ (80085e4 <NMI_Handler+0x344>)
 80084b8:	edd3 7a00 	vldr	s15, [r3]
 80084bc:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80084c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80084c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80084c8:	ee17 2a90 	vmov	r2, s15
 80084cc:	4b59      	ldr	r3, [pc, #356]	@ (8008634 <NMI_Handler+0x394>)
 80084ce:	601a      	str	r2, [r3, #0]
		error_sum_angular_rate_yaw = error_sum_angular_rate_yaw + (pid_yaw - gz);
 80084d0:	4b5a      	ldr	r3, [pc, #360]	@ (800863c <NMI_Handler+0x39c>)
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	ee07 3a90 	vmov	s15, r3
 80084d8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80084dc:	4b58      	ldr	r3, [pc, #352]	@ (8008640 <NMI_Handler+0x3a0>)
 80084de:	edd3 6a00 	vldr	s13, [r3]
 80084e2:	4b3f      	ldr	r3, [pc, #252]	@ (80085e0 <NMI_Handler+0x340>)
 80084e4:	edd3 7a00 	vldr	s15, [r3]
 80084e8:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80084ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80084f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80084f4:	ee17 2a90 	vmov	r2, s15
 80084f8:	4b50      	ldr	r3, [pc, #320]	@ (800863c <NMI_Handler+0x39c>)
 80084fa:	601a      	str	r2, [r3, #0]


		PID_cal(&pid_pitch, PID_FAC_Pitch, 1);// angle control
 80084fc:	2201      	movs	r2, #1
 80084fe:	4951      	ldr	r1, [pc, #324]	@ (8008644 <NMI_Handler+0x3a4>)
 8008500:	484b      	ldr	r0, [pc, #300]	@ (8008630 <NMI_Handler+0x390>)
 8008502:	f7fb fa97 	bl	8003a34 <PID_cal>
		PID_cal(&pid_rool, PID_FAC_Rool, 2);
 8008506:	2202      	movs	r2, #2
 8008508:	494f      	ldr	r1, [pc, #316]	@ (8008648 <NMI_Handler+0x3a8>)
 800850a:	484b      	ldr	r0, [pc, #300]	@ (8008638 <NMI_Handler+0x398>)
 800850c:	f7fb fa92 	bl	8003a34 <PID_cal>

		PID_cal(&pid_angular_rate_pitch, PID_FAC_Angular_Rate_Pitch, 4);// angle rate control
 8008510:	2204      	movs	r2, #4
 8008512:	494e      	ldr	r1, [pc, #312]	@ (800864c <NMI_Handler+0x3ac>)
 8008514:	484e      	ldr	r0, [pc, #312]	@ (8008650 <NMI_Handler+0x3b0>)
 8008516:	f7fb fa8d 	bl	8003a34 <PID_cal>
		PID_cal(&pid_angular_rate_rool, PID_FAC_Angular_Rate_Rool, 5);
 800851a:	2205      	movs	r2, #5
 800851c:	494d      	ldr	r1, [pc, #308]	@ (8008654 <NMI_Handler+0x3b4>)
 800851e:	484e      	ldr	r0, [pc, #312]	@ (8008658 <NMI_Handler+0x3b8>)
 8008520:	f7fb fa88 	bl	8003a34 <PID_cal>
		PID_cal(&pid_angular_rate_yaw, PID_FAC_Angular_Rate_Yaw, 6);
 8008524:	2206      	movs	r2, #6
 8008526:	494d      	ldr	r1, [pc, #308]	@ (800865c <NMI_Handler+0x3bc>)
 8008528:	484d      	ldr	r0, [pc, #308]	@ (8008660 <NMI_Handler+0x3c0>)
 800852a:	f7fb fa83 	bl	8003a34 <PID_cal>


		old_error_pitch = wanted_pitch - now_pitch;
 800852e:	4b20      	ldr	r3, [pc, #128]	@ (80085b0 <NMI_Handler+0x310>)
 8008530:	ed93 7a00 	vldr	s14, [r3]
 8008534:	4b34      	ldr	r3, [pc, #208]	@ (8008608 <NMI_Handler+0x368>)
 8008536:	edd3 7a00 	vldr	s15, [r3]
 800853a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800853e:	4b49      	ldr	r3, [pc, #292]	@ (8008664 <NMI_Handler+0x3c4>)
 8008540:	edc3 7a00 	vstr	s15, [r3]
		old_error_rool = wanted_rool - now_rool;
 8008544:	4b19      	ldr	r3, [pc, #100]	@ (80085ac <NMI_Handler+0x30c>)
 8008546:	ed93 7a00 	vldr	s14, [r3]
 800854a:	4b30      	ldr	r3, [pc, #192]	@ (800860c <NMI_Handler+0x36c>)
 800854c:	edd3 7a00 	vldr	s15, [r3]
 8008550:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008554:	4b44      	ldr	r3, [pc, #272]	@ (8008668 <NMI_Handler+0x3c8>)
 8008556:	edc3 7a00 	vstr	s15, [r3]

		old_error_angular_rate_pitch = pid_pitch - gx;
 800855a:	4b35      	ldr	r3, [pc, #212]	@ (8008630 <NMI_Handler+0x390>)
 800855c:	ed93 7a00 	vldr	s14, [r3]
 8008560:	4b21      	ldr	r3, [pc, #132]	@ (80085e8 <NMI_Handler+0x348>)
 8008562:	edd3 7a00 	vldr	s15, [r3]
 8008566:	ee77 7a67 	vsub.f32	s15, s14, s15
 800856a:	4b40      	ldr	r3, [pc, #256]	@ (800866c <NMI_Handler+0x3cc>)
 800856c:	edc3 7a00 	vstr	s15, [r3]
		old_error_angular_rate_rool = pid_rool - gy;
 8008570:	4b31      	ldr	r3, [pc, #196]	@ (8008638 <NMI_Handler+0x398>)
 8008572:	ed93 7a00 	vldr	s14, [r3]
 8008576:	4b1b      	ldr	r3, [pc, #108]	@ (80085e4 <NMI_Handler+0x344>)
 8008578:	edd3 7a00 	vldr	s15, [r3]
 800857c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008580:	4b3b      	ldr	r3, [pc, #236]	@ (8008670 <NMI_Handler+0x3d0>)
 8008582:	edc3 7a00 	vstr	s15, [r3]
		old_error_angular_rate_yaw = wanted_yaw - gz;
 8008586:	4b0b      	ldr	r3, [pc, #44]	@ (80085b4 <NMI_Handler+0x314>)
 8008588:	ed93 7a00 	vldr	s14, [r3]
 800858c:	4b14      	ldr	r3, [pc, #80]	@ (80085e0 <NMI_Handler+0x340>)
 800858e:	edd3 7a00 	vldr	s15, [r3]
 8008592:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008596:	4b37      	ldr	r3, [pc, #220]	@ (8008674 <NMI_Handler+0x3d4>)
 8008598:	edc3 7a00 	vstr	s15, [r3]
 800859c:	e06c      	b.n	8008678 <NMI_Handler+0x3d8>
 800859e:	bf00      	nop
 80085a0:	58021000 	.word	0x58021000
 80085a4:	58020400 	.word	0x58020400
 80085a8:	24001ef0 	.word	0x24001ef0
 80085ac:	00004074 	.word	0x00004074
 80085b0:	00004070 	.word	0x00004070
 80085b4:	00004078 	.word	0x00004078
 80085b8:	0801ea48 	.word	0x0801ea48
 80085bc:	00004064 	.word	0x00004064
 80085c0:	00000030 	.word	0x00000030
 80085c4:	00000034 	.word	0x00000034
 80085c8:	00000038 	.word	0x00000038
 80085cc:	0000003c 	.word	0x0000003c
 80085d0:	00000040 	.word	0x00000040
 80085d4:	00000044 	.word	0x00000044
 80085d8:	0801ea3c 	.word	0x0801ea3c
 80085dc:	0801ea40 	.word	0x0801ea40
 80085e0:	00000014 	.word	0x00000014
 80085e4:	00000010 	.word	0x00000010
 80085e8:	0000000c 	.word	0x0000000c
 80085ec:	00000008 	.word	0x00000008
 80085f0:	00000004 	.word	0x00000004
 80085f4:	00000000 	.word	0x00000000
 80085f8:	0000001c 	.word	0x0000001c
 80085fc:	00000018 	.word	0x00000018
 8008600:	00000058 	.word	0x00000058
 8008604:	00000084 	.word	0x00000084
 8008608:	00004080 	.word	0x00004080
 800860c:	00004084 	.word	0x00004084
 8008610:	00004088 	.word	0x00004088
 8008614:	0000405c 	.word	0x0000405c
 8008618:	00004058 	.word	0x00004058
 800861c:	00004060 	.word	0x00004060
 8008620:	000040bc 	.word	0x000040bc
 8008624:	000040c0 	.word	0x000040c0
 8008628:	000040c4 	.word	0x000040c4
 800862c:	000040c8 	.word	0x000040c8
 8008630:	000040d4 	.word	0x000040d4
 8008634:	000040cc 	.word	0x000040cc
 8008638:	000040dc 	.word	0x000040dc
 800863c:	000040d0 	.word	0x000040d0
 8008640:	000040d8 	.word	0x000040d8
 8008644:	00004110 	.word	0x00004110
 8008648:	00004124 	.word	0x00004124
 800864c:	00004170 	.word	0x00004170
 8008650:	000040e0 	.word	0x000040e0
 8008654:	00004184 	.word	0x00004184
 8008658:	000040e8 	.word	0x000040e8
 800865c:	00004198 	.word	0x00004198
 8008660:	000040e4 	.word	0x000040e4
 8008664:	000040a4 	.word	0x000040a4
 8008668:	000040a8 	.word	0x000040a8
 800866c:	000040b0 	.word	0x000040b0
 8008670:	000040b4 	.word	0x000040b4
 8008674:	000040b8 	.word	0x000040b8


		MYDRON.ROOL = pid_angular_rate_rool;
 8008678:	4b99      	ldr	r3, [pc, #612]	@ (80088e0 <NMI_Handler+0x640>)
 800867a:	edd3 7a00 	vldr	s15, [r3]
 800867e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008682:	ee17 3a90 	vmov	r3, s15
 8008686:	b21a      	sxth	r2, r3
 8008688:	4b96      	ldr	r3, [pc, #600]	@ (80088e4 <NMI_Handler+0x644>)
 800868a:	80da      	strh	r2, [r3, #6]
		MYDRON.PITCH = pid_angular_rate_pitch;
 800868c:	4b96      	ldr	r3, [pc, #600]	@ (80088e8 <NMI_Handler+0x648>)
 800868e:	edd3 7a00 	vldr	s15, [r3]
 8008692:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008696:	ee17 3a90 	vmov	r3, s15
 800869a:	b21a      	sxth	r2, r3
 800869c:	4b91      	ldr	r3, [pc, #580]	@ (80088e4 <NMI_Handler+0x644>)
 800869e:	809a      	strh	r2, [r3, #4]
		MYDRON.YAW = pid_angular_rate_yaw;
 80086a0:	4b92      	ldr	r3, [pc, #584]	@ (80088ec <NMI_Handler+0x64c>)
 80086a2:	edd3 7a00 	vldr	s15, [r3]
 80086a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80086aa:	ee17 3a90 	vmov	r3, s15
 80086ae:	b21a      	sxth	r2, r3
 80086b0:	4b8c      	ldr	r3, [pc, #560]	@ (80088e4 <NMI_Handler+0x644>)
 80086b2:	811a      	strh	r2, [r3, #8]



		Thrust_filter(1);
 80086b4:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 80086b8:	f7fb f892 	bl	80037e0 <Thrust_filter>
		if(MYDRON.THRUST > thrust_limit){
 80086bc:	4b89      	ldr	r3, [pc, #548]	@ (80088e4 <NMI_Handler+0x644>)
 80086be:	885b      	ldrh	r3, [r3, #2]
 80086c0:	461a      	mov	r2, r3
 80086c2:	4b8b      	ldr	r3, [pc, #556]	@ (80088f0 <NMI_Handler+0x650>)
 80086c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80086c8:	429a      	cmp	r2, r3
 80086ca:	dd05      	ble.n	80086d8 <NMI_Handler+0x438>
			MYDRON.THRUST = thrust_limit;
 80086cc:	4b88      	ldr	r3, [pc, #544]	@ (80088f0 <NMI_Handler+0x650>)
 80086ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80086d2:	b29a      	uxth	r2, r3
 80086d4:	4b83      	ldr	r3, [pc, #524]	@ (80088e4 <NMI_Handler+0x644>)
 80086d6:	805a      	strh	r2, [r3, #2]
		}


		SPEED1 = (MYDRON.THRUST*0.7)+ MYDRON.ROOL - MYDRON.PITCH + MYDRON.YAW + min_speed + 500;//trust 7000 max
 80086d8:	4b82      	ldr	r3, [pc, #520]	@ (80088e4 <NMI_Handler+0x644>)
 80086da:	885b      	ldrh	r3, [r3, #2]
 80086dc:	ee07 3a90 	vmov	s15, r3
 80086e0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80086e4:	ed9f 6b78 	vldr	d6, [pc, #480]	@ 80088c8 <NMI_Handler+0x628>
 80086e8:	ee27 6b06 	vmul.f64	d6, d7, d6
 80086ec:	4b7d      	ldr	r3, [pc, #500]	@ (80088e4 <NMI_Handler+0x644>)
 80086ee:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80086f2:	ee07 3a90 	vmov	s15, r3
 80086f6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80086fa:	ee36 6b07 	vadd.f64	d6, d6, d7
 80086fe:	4b79      	ldr	r3, [pc, #484]	@ (80088e4 <NMI_Handler+0x644>)
 8008700:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8008704:	ee07 3a90 	vmov	s15, r3
 8008708:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800870c:	ee36 6b47 	vsub.f64	d6, d6, d7
 8008710:	4b74      	ldr	r3, [pc, #464]	@ (80088e4 <NMI_Handler+0x644>)
 8008712:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008716:	ee07 3a90 	vmov	s15, r3
 800871a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800871e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8008722:	ed9f 6b6b 	vldr	d6, [pc, #428]	@ 80088d0 <NMI_Handler+0x630>
 8008726:	ee37 7b06 	vadd.f64	d7, d7, d6
 800872a:	ed9f 6b6b 	vldr	d6, [pc, #428]	@ 80088d8 <NMI_Handler+0x638>
 800872e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8008732:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8008736:	ee17 3a90 	vmov	r3, s15
 800873a:	b29a      	uxth	r2, r3
 800873c:	4b6d      	ldr	r3, [pc, #436]	@ (80088f4 <NMI_Handler+0x654>)
 800873e:	801a      	strh	r2, [r3, #0]
		SPEED2 = (MYDRON.THRUST*0.7)- MYDRON.ROOL - MYDRON.PITCH - MYDRON.YAW + min_speed + 500;//
 8008740:	4b68      	ldr	r3, [pc, #416]	@ (80088e4 <NMI_Handler+0x644>)
 8008742:	885b      	ldrh	r3, [r3, #2]
 8008744:	ee07 3a90 	vmov	s15, r3
 8008748:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800874c:	ed9f 6b5e 	vldr	d6, [pc, #376]	@ 80088c8 <NMI_Handler+0x628>
 8008750:	ee27 6b06 	vmul.f64	d6, d7, d6
 8008754:	4b63      	ldr	r3, [pc, #396]	@ (80088e4 <NMI_Handler+0x644>)
 8008756:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800875a:	ee07 3a90 	vmov	s15, r3
 800875e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8008762:	ee36 6b47 	vsub.f64	d6, d6, d7
 8008766:	4b5f      	ldr	r3, [pc, #380]	@ (80088e4 <NMI_Handler+0x644>)
 8008768:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800876c:	ee07 3a90 	vmov	s15, r3
 8008770:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8008774:	ee36 6b47 	vsub.f64	d6, d6, d7
 8008778:	4b5a      	ldr	r3, [pc, #360]	@ (80088e4 <NMI_Handler+0x644>)
 800877a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800877e:	ee07 3a90 	vmov	s15, r3
 8008782:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8008786:	ee36 7b47 	vsub.f64	d7, d6, d7
 800878a:	ed9f 6b51 	vldr	d6, [pc, #324]	@ 80088d0 <NMI_Handler+0x630>
 800878e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8008792:	ed9f 6b51 	vldr	d6, [pc, #324]	@ 80088d8 <NMI_Handler+0x638>
 8008796:	ee37 7b06 	vadd.f64	d7, d7, d6
 800879a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800879e:	ee17 3a90 	vmov	r3, s15
 80087a2:	b29a      	uxth	r2, r3
 80087a4:	4b54      	ldr	r3, [pc, #336]	@ (80088f8 <NMI_Handler+0x658>)
 80087a6:	801a      	strh	r2, [r3, #0]
		SPEED3 = (MYDRON.THRUST*0.7)+ MYDRON.ROOL + MYDRON.PITCH - MYDRON.YAW + min_speed + 500;//
 80087a8:	4b4e      	ldr	r3, [pc, #312]	@ (80088e4 <NMI_Handler+0x644>)
 80087aa:	885b      	ldrh	r3, [r3, #2]
 80087ac:	ee07 3a90 	vmov	s15, r3
 80087b0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80087b4:	ed9f 6b44 	vldr	d6, [pc, #272]	@ 80088c8 <NMI_Handler+0x628>
 80087b8:	ee27 6b06 	vmul.f64	d6, d7, d6
 80087bc:	4b49      	ldr	r3, [pc, #292]	@ (80088e4 <NMI_Handler+0x644>)
 80087be:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80087c2:	ee07 3a90 	vmov	s15, r3
 80087c6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80087ca:	ee36 6b07 	vadd.f64	d6, d6, d7
 80087ce:	4b45      	ldr	r3, [pc, #276]	@ (80088e4 <NMI_Handler+0x644>)
 80087d0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80087d4:	ee07 3a90 	vmov	s15, r3
 80087d8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80087dc:	ee36 6b07 	vadd.f64	d6, d6, d7
 80087e0:	4b40      	ldr	r3, [pc, #256]	@ (80088e4 <NMI_Handler+0x644>)
 80087e2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80087e6:	ee07 3a90 	vmov	s15, r3
 80087ea:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80087ee:	ee36 7b47 	vsub.f64	d7, d6, d7
 80087f2:	ed9f 6b37 	vldr	d6, [pc, #220]	@ 80088d0 <NMI_Handler+0x630>
 80087f6:	ee37 7b06 	vadd.f64	d7, d7, d6
 80087fa:	ed9f 6b37 	vldr	d6, [pc, #220]	@ 80088d8 <NMI_Handler+0x638>
 80087fe:	ee37 7b06 	vadd.f64	d7, d7, d6
 8008802:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8008806:	ee17 3a90 	vmov	r3, s15
 800880a:	b29a      	uxth	r2, r3
 800880c:	4b3b      	ldr	r3, [pc, #236]	@ (80088fc <NMI_Handler+0x65c>)
 800880e:	801a      	strh	r2, [r3, #0]
		SPEED4 = (MYDRON.THRUST*0.7)- MYDRON.ROOL + MYDRON.PITCH + MYDRON.YAW + min_speed + 500;//
 8008810:	4b34      	ldr	r3, [pc, #208]	@ (80088e4 <NMI_Handler+0x644>)
 8008812:	885b      	ldrh	r3, [r3, #2]
 8008814:	ee07 3a90 	vmov	s15, r3
 8008818:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800881c:	ed9f 6b2a 	vldr	d6, [pc, #168]	@ 80088c8 <NMI_Handler+0x628>
 8008820:	ee27 6b06 	vmul.f64	d6, d7, d6
 8008824:	4b2f      	ldr	r3, [pc, #188]	@ (80088e4 <NMI_Handler+0x644>)
 8008826:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800882a:	ee07 3a90 	vmov	s15, r3
 800882e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8008832:	ee36 6b47 	vsub.f64	d6, d6, d7
 8008836:	4b2b      	ldr	r3, [pc, #172]	@ (80088e4 <NMI_Handler+0x644>)
 8008838:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800883c:	ee07 3a90 	vmov	s15, r3
 8008840:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8008844:	ee36 6b07 	vadd.f64	d6, d6, d7
 8008848:	4b26      	ldr	r3, [pc, #152]	@ (80088e4 <NMI_Handler+0x644>)
 800884a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800884e:	ee07 3a90 	vmov	s15, r3
 8008852:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8008856:	ee36 7b07 	vadd.f64	d7, d6, d7
 800885a:	ed9f 6b1d 	vldr	d6, [pc, #116]	@ 80088d0 <NMI_Handler+0x630>
 800885e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8008862:	ed9f 6b1d 	vldr	d6, [pc, #116]	@ 80088d8 <NMI_Handler+0x638>
 8008866:	ee37 7b06 	vadd.f64	d7, d7, d6
 800886a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800886e:	ee17 3a90 	vmov	r3, s15
 8008872:	b29a      	uxth	r2, r3
 8008874:	4b22      	ldr	r3, [pc, #136]	@ (8008900 <NMI_Handler+0x660>)
 8008876:	801a      	strh	r2, [r3, #0]

		ESC_1_SPEED(SPEED1);
 8008878:	4b1e      	ldr	r3, [pc, #120]	@ (80088f4 <NMI_Handler+0x654>)
 800887a:	881b      	ldrh	r3, [r3, #0]
 800887c:	4618      	mov	r0, r3
 800887e:	f7f8 fad9 	bl	8000e34 <ESC_1_SPEED>
		ESC_2_SPEED(SPEED2);
 8008882:	4b1d      	ldr	r3, [pc, #116]	@ (80088f8 <NMI_Handler+0x658>)
 8008884:	881b      	ldrh	r3, [r3, #0]
 8008886:	4618      	mov	r0, r3
 8008888:	f7f8 faf6 	bl	8000e78 <ESC_2_SPEED>
		ESC_3_SPEED(SPEED3);
 800888c:	4b1b      	ldr	r3, [pc, #108]	@ (80088fc <NMI_Handler+0x65c>)
 800888e:	881b      	ldrh	r3, [r3, #0]
 8008890:	4618      	mov	r0, r3
 8008892:	f7f8 fb13 	bl	8000ebc <ESC_3_SPEED>
		ESC_4_SPEED(SPEED4);
 8008896:	4b1a      	ldr	r3, [pc, #104]	@ (8008900 <NMI_Handler+0x660>)
 8008898:	881b      	ldrh	r3, [r3, #0]
 800889a:	4618      	mov	r0, r3
 800889c:	f7f8 fb30 	bl	8000f00 <ESC_4_SPEED>


		OLD_SPEED1 = SPEED1;
 80088a0:	4b14      	ldr	r3, [pc, #80]	@ (80088f4 <NMI_Handler+0x654>)
 80088a2:	881a      	ldrh	r2, [r3, #0]
 80088a4:	4b17      	ldr	r3, [pc, #92]	@ (8008904 <NMI_Handler+0x664>)
 80088a6:	801a      	strh	r2, [r3, #0]
		OLD_SPEED2 = SPEED2;
 80088a8:	4b13      	ldr	r3, [pc, #76]	@ (80088f8 <NMI_Handler+0x658>)
 80088aa:	881a      	ldrh	r2, [r3, #0]
 80088ac:	4b16      	ldr	r3, [pc, #88]	@ (8008908 <NMI_Handler+0x668>)
 80088ae:	801a      	strh	r2, [r3, #0]
		OLD_SPEED3 = SPEED3;
 80088b0:	4b12      	ldr	r3, [pc, #72]	@ (80088fc <NMI_Handler+0x65c>)
 80088b2:	881a      	ldrh	r2, [r3, #0]
 80088b4:	4b15      	ldr	r3, [pc, #84]	@ (800890c <NMI_Handler+0x66c>)
 80088b6:	801a      	strh	r2, [r3, #0]
		OLD_SPEED4 = SPEED4;
 80088b8:	4b11      	ldr	r3, [pc, #68]	@ (8008900 <NMI_Handler+0x660>)
 80088ba:	881a      	ldrh	r2, [r3, #0]
 80088bc:	4b14      	ldr	r3, [pc, #80]	@ (8008910 <NMI_Handler+0x670>)
 80088be:	801a      	strh	r2, [r3, #0]
	   	HAL_Delay(1);
 80088c0:	e517      	b.n	80082f2 <NMI_Handler+0x52>
 80088c2:	bf00      	nop
 80088c4:	f3af 8000 	nop.w
 80088c8:	66666666 	.word	0x66666666
 80088cc:	3fe66666 	.word	0x3fe66666
 80088d0:	00000000 	.word	0x00000000
 80088d4:	40c48200 	.word	0x40c48200
 80088d8:	00000000 	.word	0x00000000
 80088dc:	407f4000 	.word	0x407f4000
 80088e0:	000040e8 	.word	0x000040e8
 80088e4:	00000180 	.word	0x00000180
 80088e8:	000040e0 	.word	0x000040e0
 80088ec:	000040e4 	.word	0x000040e4
 80088f0:	00004066 	.word	0x00004066
 80088f4:	000041ac 	.word	0x000041ac
 80088f8:	000041ae 	.word	0x000041ae
 80088fc:	000041b0 	.word	0x000041b0
 8008900:	000041b2 	.word	0x000041b2
 8008904:	000041b4 	.word	0x000041b4
 8008908:	000041b6 	.word	0x000041b6
 800890c:	000041b8 	.word	0x000041b8
 8008910:	000041ba 	.word	0x000041ba

08008914 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008914:	b580      	push	{r7, lr}
 8008916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

	LED_G_1;
 8008918:	2201      	movs	r2, #1
 800891a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800891e:	4812      	ldr	r0, [pc, #72]	@ (8008968 <HardFault_Handler+0x54>)
 8008920:	f005 ff68 	bl	800e7f4 <HAL_GPIO_WritePin>
	LED_Y_0;
 8008924:	2200      	movs	r2, #0
 8008926:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800892a:	4810      	ldr	r0, [pc, #64]	@ (800896c <HardFault_Handler+0x58>)
 800892c:	f005 ff62 	bl	800e7f4 <HAL_GPIO_WritePin>
	LED_R_1;
 8008930:	2201      	movs	r2, #1
 8008932:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8008936:	480d      	ldr	r0, [pc, #52]	@ (800896c <HardFault_Handler+0x58>)
 8008938:	f005 ff5c 	bl	800e7f4 <HAL_GPIO_WritePin>
	//todo create crash log
	f_close(&fil);
 800893c:	480c      	ldr	r0, [pc, #48]	@ (8008970 <HardFault_Handler+0x5c>)
 800893e:	f015 f9f1 	bl	801dd24 <f_close>
	wanted_rool = 0;
 8008942:	4b0c      	ldr	r3, [pc, #48]	@ (8008974 <HardFault_Handler+0x60>)
 8008944:	f04f 0200 	mov.w	r2, #0
 8008948:	601a      	str	r2, [r3, #0]
	wanted_pitch = 0;
 800894a:	4b0b      	ldr	r3, [pc, #44]	@ (8008978 <HardFault_Handler+0x64>)
 800894c:	f04f 0200 	mov.w	r2, #0
 8008950:	601a      	str	r2, [r3, #0]
	wanted_yaw = 0;
 8008952:	4b0a      	ldr	r3, [pc, #40]	@ (800897c <HardFault_Handler+0x68>)
 8008954:	f04f 0200 	mov.w	r2, #0
 8008958:	601a      	str	r2, [r3, #0]
	wanted_thrust = DRON_SLOWFALING;
 800895a:	4b09      	ldr	r3, [pc, #36]	@ (8008980 <HardFault_Handler+0x6c>)
 800895c:	881b      	ldrh	r3, [r3, #0]
 800895e:	b21a      	sxth	r2, r3
 8008960:	4b08      	ldr	r3, [pc, #32]	@ (8008984 <HardFault_Handler+0x70>)
 8008962:	801a      	strh	r2, [r3, #0]
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008964:	bf00      	nop
 8008966:	e7fd      	b.n	8008964 <HardFault_Handler+0x50>
 8008968:	58021000 	.word	0x58021000
 800896c:	58020400 	.word	0x58020400
 8008970:	24001ef0 	.word	0x24001ef0
 8008974:	00004074 	.word	0x00004074
 8008978:	00004070 	.word	0x00004070
 800897c:	00004078 	.word	0x00004078
 8008980:	0801ea48 	.word	0x0801ea48
 8008984:	00004064 	.word	0x00004064

08008988 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008988:	b580      	push	{r7, lr}
 800898a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

	LED_G_0;
 800898c:	2200      	movs	r2, #0
 800898e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8008992:	4812      	ldr	r0, [pc, #72]	@ (80089dc <MemManage_Handler+0x54>)
 8008994:	f005 ff2e 	bl	800e7f4 <HAL_GPIO_WritePin>
	LED_Y_0;
 8008998:	2200      	movs	r2, #0
 800899a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800899e:	4810      	ldr	r0, [pc, #64]	@ (80089e0 <MemManage_Handler+0x58>)
 80089a0:	f005 ff28 	bl	800e7f4 <HAL_GPIO_WritePin>
	LED_R_1;
 80089a4:	2201      	movs	r2, #1
 80089a6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80089aa:	480d      	ldr	r0, [pc, #52]	@ (80089e0 <MemManage_Handler+0x58>)
 80089ac:	f005 ff22 	bl	800e7f4 <HAL_GPIO_WritePin>
	//todo create crash log
	f_close(&fil);
 80089b0:	480c      	ldr	r0, [pc, #48]	@ (80089e4 <MemManage_Handler+0x5c>)
 80089b2:	f015 f9b7 	bl	801dd24 <f_close>
	wanted_rool = 0;
 80089b6:	4b0c      	ldr	r3, [pc, #48]	@ (80089e8 <MemManage_Handler+0x60>)
 80089b8:	f04f 0200 	mov.w	r2, #0
 80089bc:	601a      	str	r2, [r3, #0]
	wanted_pitch = 0;
 80089be:	4b0b      	ldr	r3, [pc, #44]	@ (80089ec <MemManage_Handler+0x64>)
 80089c0:	f04f 0200 	mov.w	r2, #0
 80089c4:	601a      	str	r2, [r3, #0]
	wanted_yaw = 0;
 80089c6:	4b0a      	ldr	r3, [pc, #40]	@ (80089f0 <MemManage_Handler+0x68>)
 80089c8:	f04f 0200 	mov.w	r2, #0
 80089cc:	601a      	str	r2, [r3, #0]
	wanted_thrust = DRON_SLOWFALING;
 80089ce:	4b09      	ldr	r3, [pc, #36]	@ (80089f4 <MemManage_Handler+0x6c>)
 80089d0:	881b      	ldrh	r3, [r3, #0]
 80089d2:	b21a      	sxth	r2, r3
 80089d4:	4b08      	ldr	r3, [pc, #32]	@ (80089f8 <MemManage_Handler+0x70>)
 80089d6:	801a      	strh	r2, [r3, #0]
  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80089d8:	bf00      	nop
 80089da:	e7fd      	b.n	80089d8 <MemManage_Handler+0x50>
 80089dc:	58021000 	.word	0x58021000
 80089e0:	58020400 	.word	0x58020400
 80089e4:	24001ef0 	.word	0x24001ef0
 80089e8:	00004074 	.word	0x00004074
 80089ec:	00004070 	.word	0x00004070
 80089f0:	00004078 	.word	0x00004078
 80089f4:	0801ea48 	.word	0x0801ea48
 80089f8:	00004064 	.word	0x00004064

080089fc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80089fc:	b580      	push	{r7, lr}
 80089fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

	LED_G_1;
 8008a00:	2201      	movs	r2, #1
 8008a02:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8008a06:	4812      	ldr	r0, [pc, #72]	@ (8008a50 <BusFault_Handler+0x54>)
 8008a08:	f005 fef4 	bl	800e7f4 <HAL_GPIO_WritePin>
	LED_Y_1;
 8008a0c:	2201      	movs	r2, #1
 8008a0e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8008a12:	4810      	ldr	r0, [pc, #64]	@ (8008a54 <BusFault_Handler+0x58>)
 8008a14:	f005 feee 	bl	800e7f4 <HAL_GPIO_WritePin>
	LED_R_1;
 8008a18:	2201      	movs	r2, #1
 8008a1a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8008a1e:	480d      	ldr	r0, [pc, #52]	@ (8008a54 <BusFault_Handler+0x58>)
 8008a20:	f005 fee8 	bl	800e7f4 <HAL_GPIO_WritePin>
	//todo create crash log
	f_close(&fil);
 8008a24:	480c      	ldr	r0, [pc, #48]	@ (8008a58 <BusFault_Handler+0x5c>)
 8008a26:	f015 f97d 	bl	801dd24 <f_close>
	wanted_rool = 0;
 8008a2a:	4b0c      	ldr	r3, [pc, #48]	@ (8008a5c <BusFault_Handler+0x60>)
 8008a2c:	f04f 0200 	mov.w	r2, #0
 8008a30:	601a      	str	r2, [r3, #0]
	wanted_pitch = 0;
 8008a32:	4b0b      	ldr	r3, [pc, #44]	@ (8008a60 <BusFault_Handler+0x64>)
 8008a34:	f04f 0200 	mov.w	r2, #0
 8008a38:	601a      	str	r2, [r3, #0]
	wanted_yaw = 0;
 8008a3a:	4b0a      	ldr	r3, [pc, #40]	@ (8008a64 <BusFault_Handler+0x68>)
 8008a3c:	f04f 0200 	mov.w	r2, #0
 8008a40:	601a      	str	r2, [r3, #0]
	wanted_thrust = DRON_SLOWFALING;
 8008a42:	4b09      	ldr	r3, [pc, #36]	@ (8008a68 <BusFault_Handler+0x6c>)
 8008a44:	881b      	ldrh	r3, [r3, #0]
 8008a46:	b21a      	sxth	r2, r3
 8008a48:	4b08      	ldr	r3, [pc, #32]	@ (8008a6c <BusFault_Handler+0x70>)
 8008a4a:	801a      	strh	r2, [r3, #0]
  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008a4c:	bf00      	nop
 8008a4e:	e7fd      	b.n	8008a4c <BusFault_Handler+0x50>
 8008a50:	58021000 	.word	0x58021000
 8008a54:	58020400 	.word	0x58020400
 8008a58:	24001ef0 	.word	0x24001ef0
 8008a5c:	00004074 	.word	0x00004074
 8008a60:	00004070 	.word	0x00004070
 8008a64:	00004078 	.word	0x00004078
 8008a68:	0801ea48 	.word	0x0801ea48
 8008a6c:	00004064 	.word	0x00004064

08008a70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008a70:	b580      	push	{r7, lr}
 8008a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

	LED_G_0;
 8008a74:	2200      	movs	r2, #0
 8008a76:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8008a7a:	4812      	ldr	r0, [pc, #72]	@ (8008ac4 <UsageFault_Handler+0x54>)
 8008a7c:	f005 feba 	bl	800e7f4 <HAL_GPIO_WritePin>
	LED_Y_1;
 8008a80:	2201      	movs	r2, #1
 8008a82:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8008a86:	4810      	ldr	r0, [pc, #64]	@ (8008ac8 <UsageFault_Handler+0x58>)
 8008a88:	f005 feb4 	bl	800e7f4 <HAL_GPIO_WritePin>
	LED_R_1;
 8008a8c:	2201      	movs	r2, #1
 8008a8e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8008a92:	480d      	ldr	r0, [pc, #52]	@ (8008ac8 <UsageFault_Handler+0x58>)
 8008a94:	f005 feae 	bl	800e7f4 <HAL_GPIO_WritePin>
	//todo create crash log
	f_close(&fil);
 8008a98:	480c      	ldr	r0, [pc, #48]	@ (8008acc <UsageFault_Handler+0x5c>)
 8008a9a:	f015 f943 	bl	801dd24 <f_close>
	wanted_rool = 0;
 8008a9e:	4b0c      	ldr	r3, [pc, #48]	@ (8008ad0 <UsageFault_Handler+0x60>)
 8008aa0:	f04f 0200 	mov.w	r2, #0
 8008aa4:	601a      	str	r2, [r3, #0]
	wanted_pitch = 0;
 8008aa6:	4b0b      	ldr	r3, [pc, #44]	@ (8008ad4 <UsageFault_Handler+0x64>)
 8008aa8:	f04f 0200 	mov.w	r2, #0
 8008aac:	601a      	str	r2, [r3, #0]
	wanted_yaw = 0;
 8008aae:	4b0a      	ldr	r3, [pc, #40]	@ (8008ad8 <UsageFault_Handler+0x68>)
 8008ab0:	f04f 0200 	mov.w	r2, #0
 8008ab4:	601a      	str	r2, [r3, #0]
	wanted_thrust = DRON_SLOWFALING;
 8008ab6:	4b09      	ldr	r3, [pc, #36]	@ (8008adc <UsageFault_Handler+0x6c>)
 8008ab8:	881b      	ldrh	r3, [r3, #0]
 8008aba:	b21a      	sxth	r2, r3
 8008abc:	4b08      	ldr	r3, [pc, #32]	@ (8008ae0 <UsageFault_Handler+0x70>)
 8008abe:	801a      	strh	r2, [r3, #0]
  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008ac0:	bf00      	nop
 8008ac2:	e7fd      	b.n	8008ac0 <UsageFault_Handler+0x50>
 8008ac4:	58021000 	.word	0x58021000
 8008ac8:	58020400 	.word	0x58020400
 8008acc:	24001ef0 	.word	0x24001ef0
 8008ad0:	00004074 	.word	0x00004074
 8008ad4:	00004070 	.word	0x00004070
 8008ad8:	00004078 	.word	0x00004078
 8008adc:	0801ea48 	.word	0x0801ea48
 8008ae0:	00004064 	.word	0x00004064

08008ae4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008ae4:	b480      	push	{r7}
 8008ae6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8008ae8:	bf00      	nop
 8008aea:	46bd      	mov	sp, r7
 8008aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af0:	4770      	bx	lr

08008af2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008af2:	b480      	push	{r7}
 8008af4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008af6:	bf00      	nop
 8008af8:	46bd      	mov	sp, r7
 8008afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afe:	4770      	bx	lr

08008b00 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008b00:	b480      	push	{r7}
 8008b02:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008b04:	bf00      	nop
 8008b06:	46bd      	mov	sp, r7
 8008b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b0c:	4770      	bx	lr
	...

08008b10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008b10:	b580      	push	{r7, lr}
 8008b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	  FatFsCnt++;
 8008b14:	4b08      	ldr	r3, [pc, #32]	@ (8008b38 <SysTick_Handler+0x28>)
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	3301      	adds	r3, #1
 8008b1a:	4a07      	ldr	r2, [pc, #28]	@ (8008b38 <SysTick_Handler+0x28>)
 8008b1c:	6013      	str	r3, [r2, #0]
	  if(FatFsCnt >= 10)
 8008b1e:	4b06      	ldr	r3, [pc, #24]	@ (8008b38 <SysTick_Handler+0x28>)
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	2b09      	cmp	r3, #9
 8008b24:	d904      	bls.n	8008b30 <SysTick_Handler+0x20>
	  {
	    FatFsCnt = 0;
 8008b26:	4b04      	ldr	r3, [pc, #16]	@ (8008b38 <SysTick_Handler+0x28>)
 8008b28:	2200      	movs	r2, #0
 8008b2a:	601a      	str	r2, [r3, #0]
	    SDTimer_Handler();
 8008b2c:	f7ff fb98 	bl	8008260 <SDTimer_Handler>
	  }
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008b30:	f000 fd04 	bl	800953c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008b34:	bf00      	nop
 8008b36:	bd80      	pop	{r7, pc}
 8008b38:	24000378 	.word	0x24000378

08008b3c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8008b3c:	b580      	push	{r7, lr}
 8008b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8008b40:	4802      	ldr	r0, [pc, #8]	@ (8008b4c <DMA1_Stream0_IRQHandler+0x10>)
 8008b42:	f004 f96b 	bl	800ce1c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8008b46:	bf00      	nop
 8008b48:	bd80      	pop	{r7, pc}
 8008b4a:	bf00      	nop
 8008b4c:	24000300 	.word	0x24000300

08008b50 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8008b50:	b580      	push	{r7, lr}
 8008b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc2);
 8008b54:	4802      	ldr	r0, [pc, #8]	@ (8008b60 <ADC_IRQHandler+0x10>)
 8008b56:	f001 fb3f 	bl	800a1d8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8008b5a:	bf00      	nop
 8008b5c:	bd80      	pop	{r7, pc}
 8008b5e:	bf00      	nop
 8008b60:	240000b0 	.word	0x240000b0

08008b64 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8008b64:	b580      	push	{r7, lr}
 8008b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8008b68:	4802      	ldr	r0, [pc, #8]	@ (8008b74 <TIM2_IRQHandler+0x10>)
 8008b6a:	f00d ff02 	bl	8016972 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8008b6e:	bf00      	nop
 8008b70:	bd80      	pop	{r7, pc}
 8008b72:	bf00      	nop
 8008b74:	240003d0 	.word	0x240003d0

08008b78 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8008b78:	b580      	push	{r7, lr}
 8008b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8008b7c:	4802      	ldr	r0, [pc, #8]	@ (8008b88 <SPI2_IRQHandler+0x10>)
 8008b7e:	f00d f871 	bl	8015c64 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8008b82:	bf00      	nop
 8008b84:	bd80      	pop	{r7, pc}
 8008b86:	bf00      	nop
 8008b88:	240001f0 	.word	0x240001f0

08008b8c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8008b8c:	b580      	push	{r7, lr}
 8008b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8008b90:	4802      	ldr	r0, [pc, #8]	@ (8008b9c <USART1_IRQHandler+0x10>)
 8008b92:	f00f fb45 	bl	8018220 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8008b96:	bf00      	nop
 8008b98:	bd80      	pop	{r7, pc}
 8008b9a:	bf00      	nop
 8008b9c:	240004b4 	.word	0x240004b4

08008ba0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8008ba0:	b580      	push	{r7, lr}
 8008ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(NRF24_IRQ_Pin);
 8008ba4:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8008ba8:	f005 fe3d 	bl	800e826 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8008bac:	bf00      	nop
 8008bae:	bd80      	pop	{r7, pc}

08008bb0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8008bb0:	b580      	push	{r7, lr}
 8008bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8008bb4:	4802      	ldr	r0, [pc, #8]	@ (8008bc0 <DMA2_Stream0_IRQHandler+0x10>)
 8008bb6:	f004 f931 	bl	800ce1c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8008bba:	bf00      	nop
 8008bbc:	bd80      	pop	{r7, pc}
 8008bbe:	bf00      	nop
 8008bc0:	24000120 	.word	0x24000120

08008bc4 <I2C5_EV_IRQHandler>:

/**
  * @brief This function handles I2C5 event interrupt.
  */
void I2C5_EV_IRQHandler(void)
{
 8008bc4:	b580      	push	{r7, lr}
 8008bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C5_EV_IRQn 0 */

  /* USER CODE END I2C5_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c5);
 8008bc8:	4802      	ldr	r0, [pc, #8]	@ (8008bd4 <I2C5_EV_IRQHandler+0x10>)
 8008bca:	f006 fa21 	bl	800f010 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C5_EV_IRQn 1 */

  /* USER CODE END I2C5_EV_IRQn 1 */
}
 8008bce:	bf00      	nop
 8008bd0:	bd80      	pop	{r7, pc}
 8008bd2:	bf00      	nop
 8008bd4:	2400019c 	.word	0x2400019c

08008bd8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8008bd8:	b480      	push	{r7}
 8008bda:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8008bdc:	4b32      	ldr	r3, [pc, #200]	@ (8008ca8 <SystemInit+0xd0>)
 8008bde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008be2:	4a31      	ldr	r2, [pc, #196]	@ (8008ca8 <SystemInit+0xd0>)
 8008be4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008be8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8008bec:	4b2f      	ldr	r3, [pc, #188]	@ (8008cac <SystemInit+0xd4>)
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	f003 030f 	and.w	r3, r3, #15
 8008bf4:	2b06      	cmp	r3, #6
 8008bf6:	d807      	bhi.n	8008c08 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8008bf8:	4b2c      	ldr	r3, [pc, #176]	@ (8008cac <SystemInit+0xd4>)
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	f023 030f 	bic.w	r3, r3, #15
 8008c00:	4a2a      	ldr	r2, [pc, #168]	@ (8008cac <SystemInit+0xd4>)
 8008c02:	f043 0307 	orr.w	r3, r3, #7
 8008c06:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8008c08:	4b29      	ldr	r3, [pc, #164]	@ (8008cb0 <SystemInit+0xd8>)
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	4a28      	ldr	r2, [pc, #160]	@ (8008cb0 <SystemInit+0xd8>)
 8008c0e:	f043 0301 	orr.w	r3, r3, #1
 8008c12:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8008c14:	4b26      	ldr	r3, [pc, #152]	@ (8008cb0 <SystemInit+0xd8>)
 8008c16:	2200      	movs	r2, #0
 8008c18:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8008c1a:	4b25      	ldr	r3, [pc, #148]	@ (8008cb0 <SystemInit+0xd8>)
 8008c1c:	681a      	ldr	r2, [r3, #0]
 8008c1e:	4924      	ldr	r1, [pc, #144]	@ (8008cb0 <SystemInit+0xd8>)
 8008c20:	4b24      	ldr	r3, [pc, #144]	@ (8008cb4 <SystemInit+0xdc>)
 8008c22:	4013      	ands	r3, r2
 8008c24:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8008c26:	4b21      	ldr	r3, [pc, #132]	@ (8008cac <SystemInit+0xd4>)
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	f003 0308 	and.w	r3, r3, #8
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d007      	beq.n	8008c42 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8008c32:	4b1e      	ldr	r3, [pc, #120]	@ (8008cac <SystemInit+0xd4>)
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	f023 030f 	bic.w	r3, r3, #15
 8008c3a:	4a1c      	ldr	r2, [pc, #112]	@ (8008cac <SystemInit+0xd4>)
 8008c3c:	f043 0307 	orr.w	r3, r3, #7
 8008c40:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8008c42:	4b1b      	ldr	r3, [pc, #108]	@ (8008cb0 <SystemInit+0xd8>)
 8008c44:	2200      	movs	r2, #0
 8008c46:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8008c48:	4b19      	ldr	r3, [pc, #100]	@ (8008cb0 <SystemInit+0xd8>)
 8008c4a:	2200      	movs	r2, #0
 8008c4c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8008c4e:	4b18      	ldr	r3, [pc, #96]	@ (8008cb0 <SystemInit+0xd8>)
 8008c50:	2200      	movs	r2, #0
 8008c52:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8008c54:	4b16      	ldr	r3, [pc, #88]	@ (8008cb0 <SystemInit+0xd8>)
 8008c56:	4a18      	ldr	r2, [pc, #96]	@ (8008cb8 <SystemInit+0xe0>)
 8008c58:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8008c5a:	4b15      	ldr	r3, [pc, #84]	@ (8008cb0 <SystemInit+0xd8>)
 8008c5c:	4a17      	ldr	r2, [pc, #92]	@ (8008cbc <SystemInit+0xe4>)
 8008c5e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8008c60:	4b13      	ldr	r3, [pc, #76]	@ (8008cb0 <SystemInit+0xd8>)
 8008c62:	4a17      	ldr	r2, [pc, #92]	@ (8008cc0 <SystemInit+0xe8>)
 8008c64:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8008c66:	4b12      	ldr	r3, [pc, #72]	@ (8008cb0 <SystemInit+0xd8>)
 8008c68:	2200      	movs	r2, #0
 8008c6a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8008c6c:	4b10      	ldr	r3, [pc, #64]	@ (8008cb0 <SystemInit+0xd8>)
 8008c6e:	4a14      	ldr	r2, [pc, #80]	@ (8008cc0 <SystemInit+0xe8>)
 8008c70:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8008c72:	4b0f      	ldr	r3, [pc, #60]	@ (8008cb0 <SystemInit+0xd8>)
 8008c74:	2200      	movs	r2, #0
 8008c76:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8008c78:	4b0d      	ldr	r3, [pc, #52]	@ (8008cb0 <SystemInit+0xd8>)
 8008c7a:	4a11      	ldr	r2, [pc, #68]	@ (8008cc0 <SystemInit+0xe8>)
 8008c7c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8008c7e:	4b0c      	ldr	r3, [pc, #48]	@ (8008cb0 <SystemInit+0xd8>)
 8008c80:	2200      	movs	r2, #0
 8008c82:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8008c84:	4b0a      	ldr	r3, [pc, #40]	@ (8008cb0 <SystemInit+0xd8>)
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	4a09      	ldr	r2, [pc, #36]	@ (8008cb0 <SystemInit+0xd8>)
 8008c8a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008c8e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8008c90:	4b07      	ldr	r3, [pc, #28]	@ (8008cb0 <SystemInit+0xd8>)
 8008c92:	2200      	movs	r2, #0
 8008c94:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8008c96:	4b0b      	ldr	r3, [pc, #44]	@ (8008cc4 <SystemInit+0xec>)
 8008c98:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8008c9c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8008c9e:	bf00      	nop
 8008ca0:	46bd      	mov	sp, r7
 8008ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca6:	4770      	bx	lr
 8008ca8:	e000ed00 	.word	0xe000ed00
 8008cac:	52002000 	.word	0x52002000
 8008cb0:	58024400 	.word	0x58024400
 8008cb4:	eaf6ed7f 	.word	0xeaf6ed7f
 8008cb8:	02020200 	.word	0x02020200
 8008cbc:	01ff0000 	.word	0x01ff0000
 8008cc0:	01010280 	.word	0x01010280
 8008cc4:	52004000 	.word	0x52004000

08008cc8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8008cc8:	b580      	push	{r7, lr}
 8008cca:	b098      	sub	sp, #96	@ 0x60
 8008ccc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008cce:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8008cd2:	2200      	movs	r2, #0
 8008cd4:	601a      	str	r2, [r3, #0]
 8008cd6:	605a      	str	r2, [r3, #4]
 8008cd8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8008cda:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8008cde:	2200      	movs	r2, #0
 8008ce0:	601a      	str	r2, [r3, #0]
 8008ce2:	605a      	str	r2, [r3, #4]
 8008ce4:	609a      	str	r2, [r3, #8]
 8008ce6:	60da      	str	r2, [r3, #12]
 8008ce8:	611a      	str	r2, [r3, #16]
 8008cea:	615a      	str	r2, [r3, #20]
 8008cec:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8008cee:	1d3b      	adds	r3, r7, #4
 8008cf0:	2234      	movs	r2, #52	@ 0x34
 8008cf2:	2100      	movs	r1, #0
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	f015 fa0d 	bl	801e114 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8008cfa:	4b45      	ldr	r3, [pc, #276]	@ (8008e10 <MX_TIM1_Init+0x148>)
 8008cfc:	4a45      	ldr	r2, [pc, #276]	@ (8008e14 <MX_TIM1_Init+0x14c>)
 8008cfe:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 999;
 8008d00:	4b43      	ldr	r3, [pc, #268]	@ (8008e10 <MX_TIM1_Init+0x148>)
 8008d02:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8008d06:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008d08:	4b41      	ldr	r3, [pc, #260]	@ (8008e10 <MX_TIM1_Init+0x148>)
 8008d0a:	2200      	movs	r2, #0
 8008d0c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 256;
 8008d0e:	4b40      	ldr	r3, [pc, #256]	@ (8008e10 <MX_TIM1_Init+0x148>)
 8008d10:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008d14:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008d16:	4b3e      	ldr	r3, [pc, #248]	@ (8008e10 <MX_TIM1_Init+0x148>)
 8008d18:	2200      	movs	r2, #0
 8008d1a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8008d1c:	4b3c      	ldr	r3, [pc, #240]	@ (8008e10 <MX_TIM1_Init+0x148>)
 8008d1e:	2200      	movs	r2, #0
 8008d20:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8008d22:	4b3b      	ldr	r3, [pc, #236]	@ (8008e10 <MX_TIM1_Init+0x148>)
 8008d24:	2280      	movs	r2, #128	@ 0x80
 8008d26:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8008d28:	4839      	ldr	r0, [pc, #228]	@ (8008e10 <MX_TIM1_Init+0x148>)
 8008d2a:	f00d fc57 	bl	80165dc <HAL_TIM_PWM_Init>
 8008d2e:	4603      	mov	r3, r0
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d001      	beq.n	8008d38 <MX_TIM1_Init+0x70>
  {
    Error_Handler();
 8008d34:	f7ff f8b8 	bl	8007ea8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008d38:	2300      	movs	r3, #0
 8008d3a:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8008d3c:	2300      	movs	r3, #0
 8008d3e:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008d40:	2300      	movs	r3, #0
 8008d42:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8008d44:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8008d48:	4619      	mov	r1, r3
 8008d4a:	4831      	ldr	r0, [pc, #196]	@ (8008e10 <MX_TIM1_Init+0x148>)
 8008d4c:	f00e ff64 	bl	8017c18 <HAL_TIMEx_MasterConfigSynchronization>
 8008d50:	4603      	mov	r3, r0
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d001      	beq.n	8008d5a <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8008d56:	f7ff f8a7 	bl	8007ea8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8008d5a:	2360      	movs	r3, #96	@ 0x60
 8008d5c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8008d5e:	2300      	movs	r3, #0
 8008d60:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8008d62:	2300      	movs	r3, #0
 8008d64:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8008d66:	2300      	movs	r3, #0
 8008d68:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8008d6a:	2300      	movs	r3, #0
 8008d6c:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8008d6e:	2300      	movs	r3, #0
 8008d70:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8008d72:	2300      	movs	r3, #0
 8008d74:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8008d76:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8008d7a:	2204      	movs	r2, #4
 8008d7c:	4619      	mov	r1, r3
 8008d7e:	4824      	ldr	r0, [pc, #144]	@ (8008e10 <MX_TIM1_Init+0x148>)
 8008d80:	f00d ff9a 	bl	8016cb8 <HAL_TIM_PWM_ConfigChannel>
 8008d84:	4603      	mov	r3, r0
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d001      	beq.n	8008d8e <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8008d8a:	f7ff f88d 	bl	8007ea8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8008d8e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8008d92:	2208      	movs	r2, #8
 8008d94:	4619      	mov	r1, r3
 8008d96:	481e      	ldr	r0, [pc, #120]	@ (8008e10 <MX_TIM1_Init+0x148>)
 8008d98:	f00d ff8e 	bl	8016cb8 <HAL_TIM_PWM_ConfigChannel>
 8008d9c:	4603      	mov	r3, r0
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d001      	beq.n	8008da6 <MX_TIM1_Init+0xde>
  {
    Error_Handler();
 8008da2:	f7ff f881 	bl	8007ea8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8008da6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8008daa:	220c      	movs	r2, #12
 8008dac:	4619      	mov	r1, r3
 8008dae:	4818      	ldr	r0, [pc, #96]	@ (8008e10 <MX_TIM1_Init+0x148>)
 8008db0:	f00d ff82 	bl	8016cb8 <HAL_TIM_PWM_ConfigChannel>
 8008db4:	4603      	mov	r3, r0
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d001      	beq.n	8008dbe <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8008dba:	f7ff f875 	bl	8007ea8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8008dbe:	2300      	movs	r3, #0
 8008dc0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8008dc6:	2300      	movs	r3, #0
 8008dc8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8008dca:	2300      	movs	r3, #0
 8008dcc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8008dce:	2300      	movs	r3, #0
 8008dd0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8008dd2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8008dd6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8008dd8:	2300      	movs	r3, #0
 8008dda:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8008ddc:	2300      	movs	r3, #0
 8008dde:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8008de0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008de4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8008de6:	2300      	movs	r3, #0
 8008de8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8008dea:	2300      	movs	r3, #0
 8008dec:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8008dee:	1d3b      	adds	r3, r7, #4
 8008df0:	4619      	mov	r1, r3
 8008df2:	4807      	ldr	r0, [pc, #28]	@ (8008e10 <MX_TIM1_Init+0x148>)
 8008df4:	f00e ffac 	bl	8017d50 <HAL_TIMEx_ConfigBreakDeadTime>
 8008df8:	4603      	mov	r3, r0
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d001      	beq.n	8008e02 <MX_TIM1_Init+0x13a>
  {
    Error_Handler();
 8008dfe:	f7ff f853 	bl	8007ea8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8008e02:	4803      	ldr	r0, [pc, #12]	@ (8008e10 <MX_TIM1_Init+0x148>)
 8008e04:	f000 f9da 	bl	80091bc <HAL_TIM_MspPostInit>

}
 8008e08:	bf00      	nop
 8008e0a:	3760      	adds	r7, #96	@ 0x60
 8008e0c:	46bd      	mov	sp, r7
 8008e0e:	bd80      	pop	{r7, pc}
 8008e10:	24000384 	.word	0x24000384
 8008e14:	40010000 	.word	0x40010000

08008e18 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8008e18:	b580      	push	{r7, lr}
 8008e1a:	b088      	sub	sp, #32
 8008e1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008e1e:	f107 0314 	add.w	r3, r7, #20
 8008e22:	2200      	movs	r2, #0
 8008e24:	601a      	str	r2, [r3, #0]
 8008e26:	605a      	str	r2, [r3, #4]
 8008e28:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8008e2a:	1d3b      	adds	r3, r7, #4
 8008e2c:	2200      	movs	r2, #0
 8008e2e:	601a      	str	r2, [r3, #0]
 8008e30:	605a      	str	r2, [r3, #4]
 8008e32:	609a      	str	r2, [r3, #8]
 8008e34:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8008e36:	4b21      	ldr	r3, [pc, #132]	@ (8008ebc <MX_TIM2_Init+0xa4>)
 8008e38:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8008e3c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 274;
 8008e3e:	4b1f      	ldr	r3, [pc, #124]	@ (8008ebc <MX_TIM2_Init+0xa4>)
 8008e40:	f44f 7289 	mov.w	r2, #274	@ 0x112
 8008e44:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008e46:	4b1d      	ldr	r3, [pc, #116]	@ (8008ebc <MX_TIM2_Init+0xa4>)
 8008e48:	2200      	movs	r2, #0
 8008e4a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8008e4c:	4b1b      	ldr	r3, [pc, #108]	@ (8008ebc <MX_TIM2_Init+0xa4>)
 8008e4e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8008e52:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008e54:	4b19      	ldr	r3, [pc, #100]	@ (8008ebc <MX_TIM2_Init+0xa4>)
 8008e56:	2200      	movs	r2, #0
 8008e58:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8008e5a:	4b18      	ldr	r3, [pc, #96]	@ (8008ebc <MX_TIM2_Init+0xa4>)
 8008e5c:	2280      	movs	r2, #128	@ 0x80
 8008e5e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8008e60:	4816      	ldr	r0, [pc, #88]	@ (8008ebc <MX_TIM2_Init+0xa4>)
 8008e62:	f00d fd2f 	bl	80168c4 <HAL_TIM_IC_Init>
 8008e66:	4603      	mov	r3, r0
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d001      	beq.n	8008e70 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8008e6c:	f7ff f81c 	bl	8007ea8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008e70:	2300      	movs	r3, #0
 8008e72:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008e74:	2300      	movs	r3, #0
 8008e76:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8008e78:	f107 0314 	add.w	r3, r7, #20
 8008e7c:	4619      	mov	r1, r3
 8008e7e:	480f      	ldr	r0, [pc, #60]	@ (8008ebc <MX_TIM2_Init+0xa4>)
 8008e80:	f00e feca 	bl	8017c18 <HAL_TIMEx_MasterConfigSynchronization>
 8008e84:	4603      	mov	r3, r0
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d001      	beq.n	8008e8e <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 8008e8a:	f7ff f80d 	bl	8007ea8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8008e8e:	2300      	movs	r3, #0
 8008e90:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8008e92:	2301      	movs	r3, #1
 8008e94:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8008e96:	2300      	movs	r3, #0
 8008e98:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8008e9a:	2300      	movs	r3, #0
 8008e9c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8008e9e:	1d3b      	adds	r3, r7, #4
 8008ea0:	2200      	movs	r2, #0
 8008ea2:	4619      	mov	r1, r3
 8008ea4:	4805      	ldr	r0, [pc, #20]	@ (8008ebc <MX_TIM2_Init+0xa4>)
 8008ea6:	f00d fe6b 	bl	8016b80 <HAL_TIM_IC_ConfigChannel>
 8008eaa:	4603      	mov	r3, r0
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d001      	beq.n	8008eb4 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8008eb0:	f7fe fffa 	bl	8007ea8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8008eb4:	bf00      	nop
 8008eb6:	3720      	adds	r7, #32
 8008eb8:	46bd      	mov	sp, r7
 8008eba:	bd80      	pop	{r7, pc}
 8008ebc:	240003d0 	.word	0x240003d0

08008ec0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8008ec0:	b580      	push	{r7, lr}
 8008ec2:	b08a      	sub	sp, #40	@ 0x28
 8008ec4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008ec6:	f107 031c 	add.w	r3, r7, #28
 8008eca:	2200      	movs	r2, #0
 8008ecc:	601a      	str	r2, [r3, #0]
 8008ece:	605a      	str	r2, [r3, #4]
 8008ed0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8008ed2:	463b      	mov	r3, r7
 8008ed4:	2200      	movs	r2, #0
 8008ed6:	601a      	str	r2, [r3, #0]
 8008ed8:	605a      	str	r2, [r3, #4]
 8008eda:	609a      	str	r2, [r3, #8]
 8008edc:	60da      	str	r2, [r3, #12]
 8008ede:	611a      	str	r2, [r3, #16]
 8008ee0:	615a      	str	r2, [r3, #20]
 8008ee2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8008ee4:	4b32      	ldr	r3, [pc, #200]	@ (8008fb0 <MX_TIM3_Init+0xf0>)
 8008ee6:	4a33      	ldr	r2, [pc, #204]	@ (8008fb4 <MX_TIM3_Init+0xf4>)
 8008ee8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 28;
 8008eea:	4b31      	ldr	r3, [pc, #196]	@ (8008fb0 <MX_TIM3_Init+0xf0>)
 8008eec:	221c      	movs	r2, #28
 8008eee:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008ef0:	4b2f      	ldr	r3, [pc, #188]	@ (8008fb0 <MX_TIM3_Init+0xf0>)
 8008ef2:	2200      	movs	r2, #0
 8008ef4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19999;
 8008ef6:	4b2e      	ldr	r3, [pc, #184]	@ (8008fb0 <MX_TIM3_Init+0xf0>)
 8008ef8:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8008efc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008efe:	4b2c      	ldr	r3, [pc, #176]	@ (8008fb0 <MX_TIM3_Init+0xf0>)
 8008f00:	2200      	movs	r2, #0
 8008f02:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008f04:	4b2a      	ldr	r3, [pc, #168]	@ (8008fb0 <MX_TIM3_Init+0xf0>)
 8008f06:	2200      	movs	r2, #0
 8008f08:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8008f0a:	4829      	ldr	r0, [pc, #164]	@ (8008fb0 <MX_TIM3_Init+0xf0>)
 8008f0c:	f00d fb66 	bl	80165dc <HAL_TIM_PWM_Init>
 8008f10:	4603      	mov	r3, r0
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d001      	beq.n	8008f1a <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8008f16:	f7fe ffc7 	bl	8007ea8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008f1a:	2300      	movs	r3, #0
 8008f1c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008f1e:	2300      	movs	r3, #0
 8008f20:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8008f22:	f107 031c 	add.w	r3, r7, #28
 8008f26:	4619      	mov	r1, r3
 8008f28:	4821      	ldr	r0, [pc, #132]	@ (8008fb0 <MX_TIM3_Init+0xf0>)
 8008f2a:	f00e fe75 	bl	8017c18 <HAL_TIMEx_MasterConfigSynchronization>
 8008f2e:	4603      	mov	r3, r0
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d001      	beq.n	8008f38 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8008f34:	f7fe ffb8 	bl	8007ea8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8008f38:	2360      	movs	r3, #96	@ 0x60
 8008f3a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8008f3c:	2300      	movs	r3, #0
 8008f3e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8008f40:	2300      	movs	r3, #0
 8008f42:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8008f44:	2300      	movs	r3, #0
 8008f46:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8008f48:	463b      	mov	r3, r7
 8008f4a:	2200      	movs	r2, #0
 8008f4c:	4619      	mov	r1, r3
 8008f4e:	4818      	ldr	r0, [pc, #96]	@ (8008fb0 <MX_TIM3_Init+0xf0>)
 8008f50:	f00d feb2 	bl	8016cb8 <HAL_TIM_PWM_ConfigChannel>
 8008f54:	4603      	mov	r3, r0
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d001      	beq.n	8008f5e <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8008f5a:	f7fe ffa5 	bl	8007ea8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8008f5e:	463b      	mov	r3, r7
 8008f60:	2204      	movs	r2, #4
 8008f62:	4619      	mov	r1, r3
 8008f64:	4812      	ldr	r0, [pc, #72]	@ (8008fb0 <MX_TIM3_Init+0xf0>)
 8008f66:	f00d fea7 	bl	8016cb8 <HAL_TIM_PWM_ConfigChannel>
 8008f6a:	4603      	mov	r3, r0
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d001      	beq.n	8008f74 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8008f70:	f7fe ff9a 	bl	8007ea8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8008f74:	463b      	mov	r3, r7
 8008f76:	2208      	movs	r2, #8
 8008f78:	4619      	mov	r1, r3
 8008f7a:	480d      	ldr	r0, [pc, #52]	@ (8008fb0 <MX_TIM3_Init+0xf0>)
 8008f7c:	f00d fe9c 	bl	8016cb8 <HAL_TIM_PWM_ConfigChannel>
 8008f80:	4603      	mov	r3, r0
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d001      	beq.n	8008f8a <MX_TIM3_Init+0xca>
  {
    Error_Handler();
 8008f86:	f7fe ff8f 	bl	8007ea8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8008f8a:	463b      	mov	r3, r7
 8008f8c:	220c      	movs	r2, #12
 8008f8e:	4619      	mov	r1, r3
 8008f90:	4807      	ldr	r0, [pc, #28]	@ (8008fb0 <MX_TIM3_Init+0xf0>)
 8008f92:	f00d fe91 	bl	8016cb8 <HAL_TIM_PWM_ConfigChannel>
 8008f96:	4603      	mov	r3, r0
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d001      	beq.n	8008fa0 <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 8008f9c:	f7fe ff84 	bl	8007ea8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8008fa0:	4803      	ldr	r0, [pc, #12]	@ (8008fb0 <MX_TIM3_Init+0xf0>)
 8008fa2:	f000 f90b 	bl	80091bc <HAL_TIM_MspPostInit>

}
 8008fa6:	bf00      	nop
 8008fa8:	3728      	adds	r7, #40	@ 0x28
 8008faa:	46bd      	mov	sp, r7
 8008fac:	bd80      	pop	{r7, pc}
 8008fae:	bf00      	nop
 8008fb0:	2400041c 	.word	0x2400041c
 8008fb4:	40000400 	.word	0x40000400

08008fb8 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8008fb8:	b580      	push	{r7, lr}
 8008fba:	b088      	sub	sp, #32
 8008fbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008fbe:	f107 0310 	add.w	r3, r7, #16
 8008fc2:	2200      	movs	r2, #0
 8008fc4:	601a      	str	r2, [r3, #0]
 8008fc6:	605a      	str	r2, [r3, #4]
 8008fc8:	609a      	str	r2, [r3, #8]
 8008fca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008fcc:	1d3b      	adds	r3, r7, #4
 8008fce:	2200      	movs	r2, #0
 8008fd0:	601a      	str	r2, [r3, #0]
 8008fd2:	605a      	str	r2, [r3, #4]
 8008fd4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8008fd6:	4b21      	ldr	r3, [pc, #132]	@ (800905c <MX_TIM8_Init+0xa4>)
 8008fd8:	4a21      	ldr	r2, [pc, #132]	@ (8009060 <MX_TIM8_Init+0xa8>)
 8008fda:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 5549;
 8008fdc:	4b1f      	ldr	r3, [pc, #124]	@ (800905c <MX_TIM8_Init+0xa4>)
 8008fde:	f241 52ad 	movw	r2, #5549	@ 0x15ad
 8008fe2:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008fe4:	4b1d      	ldr	r3, [pc, #116]	@ (800905c <MX_TIM8_Init+0xa4>)
 8008fe6:	2200      	movs	r2, #0
 8008fe8:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 9999;
 8008fea:	4b1c      	ldr	r3, [pc, #112]	@ (800905c <MX_TIM8_Init+0xa4>)
 8008fec:	f242 720f 	movw	r2, #9999	@ 0x270f
 8008ff0:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008ff2:	4b1a      	ldr	r3, [pc, #104]	@ (800905c <MX_TIM8_Init+0xa4>)
 8008ff4:	2200      	movs	r2, #0
 8008ff6:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8008ff8:	4b18      	ldr	r3, [pc, #96]	@ (800905c <MX_TIM8_Init+0xa4>)
 8008ffa:	2200      	movs	r2, #0
 8008ffc:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008ffe:	4b17      	ldr	r3, [pc, #92]	@ (800905c <MX_TIM8_Init+0xa4>)
 8009000:	2200      	movs	r2, #0
 8009002:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8009004:	4815      	ldr	r0, [pc, #84]	@ (800905c <MX_TIM8_Init+0xa4>)
 8009006:	f00d f98e 	bl	8016326 <HAL_TIM_Base_Init>
 800900a:	4603      	mov	r3, r0
 800900c:	2b00      	cmp	r3, #0
 800900e:	d001      	beq.n	8009014 <MX_TIM8_Init+0x5c>
  {
    Error_Handler();
 8009010:	f7fe ff4a 	bl	8007ea8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009014:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009018:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800901a:	f107 0310 	add.w	r3, r7, #16
 800901e:	4619      	mov	r1, r3
 8009020:	480e      	ldr	r0, [pc, #56]	@ (800905c <MX_TIM8_Init+0xa4>)
 8009022:	f00d ff5d 	bl	8016ee0 <HAL_TIM_ConfigClockSource>
 8009026:	4603      	mov	r3, r0
 8009028:	2b00      	cmp	r3, #0
 800902a:	d001      	beq.n	8009030 <MX_TIM8_Init+0x78>
  {
    Error_Handler();
 800902c:	f7fe ff3c 	bl	8007ea8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8009030:	2320      	movs	r3, #32
 8009032:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_UPDATE;
 8009034:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8009038:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800903a:	2300      	movs	r3, #0
 800903c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800903e:	1d3b      	adds	r3, r7, #4
 8009040:	4619      	mov	r1, r3
 8009042:	4806      	ldr	r0, [pc, #24]	@ (800905c <MX_TIM8_Init+0xa4>)
 8009044:	f00e fde8 	bl	8017c18 <HAL_TIMEx_MasterConfigSynchronization>
 8009048:	4603      	mov	r3, r0
 800904a:	2b00      	cmp	r3, #0
 800904c:	d001      	beq.n	8009052 <MX_TIM8_Init+0x9a>
  {
    Error_Handler();
 800904e:	f7fe ff2b 	bl	8007ea8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8009052:	bf00      	nop
 8009054:	3720      	adds	r7, #32
 8009056:	46bd      	mov	sp, r7
 8009058:	bd80      	pop	{r7, pc}
 800905a:	bf00      	nop
 800905c:	24000468 	.word	0x24000468
 8009060:	40010400 	.word	0x40010400

08009064 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8009064:	b480      	push	{r7}
 8009066:	b085      	sub	sp, #20
 8009068:	af00      	add	r7, sp, #0
 800906a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	4a16      	ldr	r2, [pc, #88]	@ (80090cc <HAL_TIM_PWM_MspInit+0x68>)
 8009072:	4293      	cmp	r3, r2
 8009074:	d10f      	bne.n	8009096 <HAL_TIM_PWM_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8009076:	4b16      	ldr	r3, [pc, #88]	@ (80090d0 <HAL_TIM_PWM_MspInit+0x6c>)
 8009078:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800907c:	4a14      	ldr	r2, [pc, #80]	@ (80090d0 <HAL_TIM_PWM_MspInit+0x6c>)
 800907e:	f043 0301 	orr.w	r3, r3, #1
 8009082:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8009086:	4b12      	ldr	r3, [pc, #72]	@ (80090d0 <HAL_TIM_PWM_MspInit+0x6c>)
 8009088:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800908c:	f003 0301 	and.w	r3, r3, #1
 8009090:	60fb      	str	r3, [r7, #12]
 8009092:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8009094:	e013      	b.n	80090be <HAL_TIM_PWM_MspInit+0x5a>
  else if(tim_pwmHandle->Instance==TIM3)
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	4a0e      	ldr	r2, [pc, #56]	@ (80090d4 <HAL_TIM_PWM_MspInit+0x70>)
 800909c:	4293      	cmp	r3, r2
 800909e:	d10e      	bne.n	80090be <HAL_TIM_PWM_MspInit+0x5a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80090a0:	4b0b      	ldr	r3, [pc, #44]	@ (80090d0 <HAL_TIM_PWM_MspInit+0x6c>)
 80090a2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80090a6:	4a0a      	ldr	r2, [pc, #40]	@ (80090d0 <HAL_TIM_PWM_MspInit+0x6c>)
 80090a8:	f043 0302 	orr.w	r3, r3, #2
 80090ac:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80090b0:	4b07      	ldr	r3, [pc, #28]	@ (80090d0 <HAL_TIM_PWM_MspInit+0x6c>)
 80090b2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80090b6:	f003 0302 	and.w	r3, r3, #2
 80090ba:	60bb      	str	r3, [r7, #8]
 80090bc:	68bb      	ldr	r3, [r7, #8]
}
 80090be:	bf00      	nop
 80090c0:	3714      	adds	r7, #20
 80090c2:	46bd      	mov	sp, r7
 80090c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c8:	4770      	bx	lr
 80090ca:	bf00      	nop
 80090cc:	40010000 	.word	0x40010000
 80090d0:	58024400 	.word	0x58024400
 80090d4:	40000400 	.word	0x40000400

080090d8 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 80090d8:	b580      	push	{r7, lr}
 80090da:	b08a      	sub	sp, #40	@ 0x28
 80090dc:	af00      	add	r7, sp, #0
 80090de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80090e0:	f107 0314 	add.w	r3, r7, #20
 80090e4:	2200      	movs	r2, #0
 80090e6:	601a      	str	r2, [r3, #0]
 80090e8:	605a      	str	r2, [r3, #4]
 80090ea:	609a      	str	r2, [r3, #8]
 80090ec:	60da      	str	r2, [r3, #12]
 80090ee:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM2)
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80090f8:	d135      	bne.n	8009166 <HAL_TIM_IC_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80090fa:	4b1d      	ldr	r3, [pc, #116]	@ (8009170 <HAL_TIM_IC_MspInit+0x98>)
 80090fc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009100:	4a1b      	ldr	r2, [pc, #108]	@ (8009170 <HAL_TIM_IC_MspInit+0x98>)
 8009102:	f043 0301 	orr.w	r3, r3, #1
 8009106:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800910a:	4b19      	ldr	r3, [pc, #100]	@ (8009170 <HAL_TIM_IC_MspInit+0x98>)
 800910c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009110:	f003 0301 	and.w	r3, r3, #1
 8009114:	613b      	str	r3, [r7, #16]
 8009116:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009118:	4b15      	ldr	r3, [pc, #84]	@ (8009170 <HAL_TIM_IC_MspInit+0x98>)
 800911a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800911e:	4a14      	ldr	r2, [pc, #80]	@ (8009170 <HAL_TIM_IC_MspInit+0x98>)
 8009120:	f043 0301 	orr.w	r3, r3, #1
 8009124:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8009128:	4b11      	ldr	r3, [pc, #68]	@ (8009170 <HAL_TIM_IC_MspInit+0x98>)
 800912a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800912e:	f003 0301 	and.w	r3, r3, #1
 8009132:	60fb      	str	r3, [r7, #12]
 8009134:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8009136:	2301      	movs	r3, #1
 8009138:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800913a:	2302      	movs	r3, #2
 800913c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800913e:	2300      	movs	r3, #0
 8009140:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009142:	2300      	movs	r3, #0
 8009144:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8009146:	2301      	movs	r3, #1
 8009148:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800914a:	f107 0314 	add.w	r3, r7, #20
 800914e:	4619      	mov	r1, r3
 8009150:	4808      	ldr	r0, [pc, #32]	@ (8009174 <HAL_TIM_IC_MspInit+0x9c>)
 8009152:	f005 f98f 	bl	800e474 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8009156:	2200      	movs	r2, #0
 8009158:	2101      	movs	r1, #1
 800915a:	201c      	movs	r0, #28
 800915c:	f002 fa8b 	bl	800b676 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8009160:	201c      	movs	r0, #28
 8009162:	f002 faa2 	bl	800b6aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8009166:	bf00      	nop
 8009168:	3728      	adds	r7, #40	@ 0x28
 800916a:	46bd      	mov	sp, r7
 800916c:	bd80      	pop	{r7, pc}
 800916e:	bf00      	nop
 8009170:	58024400 	.word	0x58024400
 8009174:	58020000 	.word	0x58020000

08009178 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8009178:	b480      	push	{r7}
 800917a:	b085      	sub	sp, #20
 800917c:	af00      	add	r7, sp, #0
 800917e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM8)
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	4a0b      	ldr	r2, [pc, #44]	@ (80091b4 <HAL_TIM_Base_MspInit+0x3c>)
 8009186:	4293      	cmp	r3, r2
 8009188:	d10e      	bne.n	80091a8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 800918a:	4b0b      	ldr	r3, [pc, #44]	@ (80091b8 <HAL_TIM_Base_MspInit+0x40>)
 800918c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009190:	4a09      	ldr	r2, [pc, #36]	@ (80091b8 <HAL_TIM_Base_MspInit+0x40>)
 8009192:	f043 0302 	orr.w	r3, r3, #2
 8009196:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800919a:	4b07      	ldr	r3, [pc, #28]	@ (80091b8 <HAL_TIM_Base_MspInit+0x40>)
 800919c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80091a0:	f003 0302 	and.w	r3, r3, #2
 80091a4:	60fb      	str	r3, [r7, #12]
 80091a6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 80091a8:	bf00      	nop
 80091aa:	3714      	adds	r7, #20
 80091ac:	46bd      	mov	sp, r7
 80091ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b2:	4770      	bx	lr
 80091b4:	40010400 	.word	0x40010400
 80091b8:	58024400 	.word	0x58024400

080091bc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80091bc:	b580      	push	{r7, lr}
 80091be:	b08a      	sub	sp, #40	@ 0x28
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80091c4:	f107 0314 	add.w	r3, r7, #20
 80091c8:	2200      	movs	r2, #0
 80091ca:	601a      	str	r2, [r3, #0]
 80091cc:	605a      	str	r2, [r3, #4]
 80091ce:	609a      	str	r2, [r3, #8]
 80091d0:	60da      	str	r2, [r3, #12]
 80091d2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	4a26      	ldr	r2, [pc, #152]	@ (8009274 <HAL_TIM_MspPostInit+0xb8>)
 80091da:	4293      	cmp	r3, r2
 80091dc:	d120      	bne.n	8009220 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80091de:	4b26      	ldr	r3, [pc, #152]	@ (8009278 <HAL_TIM_MspPostInit+0xbc>)
 80091e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80091e4:	4a24      	ldr	r2, [pc, #144]	@ (8009278 <HAL_TIM_MspPostInit+0xbc>)
 80091e6:	f043 0310 	orr.w	r3, r3, #16
 80091ea:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80091ee:	4b22      	ldr	r3, [pc, #136]	@ (8009278 <HAL_TIM_MspPostInit+0xbc>)
 80091f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80091f4:	f003 0310 	and.w	r3, r3, #16
 80091f8:	613b      	str	r3, [r7, #16]
 80091fa:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 80091fc:	f44f 43d0 	mov.w	r3, #26624	@ 0x6800
 8009200:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009202:	2302      	movs	r3, #2
 8009204:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009206:	2300      	movs	r3, #0
 8009208:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800920a:	2300      	movs	r3, #0
 800920c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800920e:	2301      	movs	r3, #1
 8009210:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8009212:	f107 0314 	add.w	r3, r7, #20
 8009216:	4619      	mov	r1, r3
 8009218:	4818      	ldr	r0, [pc, #96]	@ (800927c <HAL_TIM_MspPostInit+0xc0>)
 800921a:	f005 f92b 	bl	800e474 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800921e:	e024      	b.n	800926a <HAL_TIM_MspPostInit+0xae>
  else if(timHandle->Instance==TIM3)
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	4a16      	ldr	r2, [pc, #88]	@ (8009280 <HAL_TIM_MspPostInit+0xc4>)
 8009226:	4293      	cmp	r3, r2
 8009228:	d11f      	bne.n	800926a <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800922a:	4b13      	ldr	r3, [pc, #76]	@ (8009278 <HAL_TIM_MspPostInit+0xbc>)
 800922c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009230:	4a11      	ldr	r2, [pc, #68]	@ (8009278 <HAL_TIM_MspPostInit+0xbc>)
 8009232:	f043 0304 	orr.w	r3, r3, #4
 8009236:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800923a:	4b0f      	ldr	r3, [pc, #60]	@ (8009278 <HAL_TIM_MspPostInit+0xbc>)
 800923c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009240:	f003 0304 	and.w	r3, r3, #4
 8009244:	60fb      	str	r3, [r7, #12]
 8009246:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8009248:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 800924c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800924e:	2302      	movs	r3, #2
 8009250:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009252:	2300      	movs	r3, #0
 8009254:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009256:	2300      	movs	r3, #0
 8009258:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800925a:	2302      	movs	r3, #2
 800925c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800925e:	f107 0314 	add.w	r3, r7, #20
 8009262:	4619      	mov	r1, r3
 8009264:	4807      	ldr	r0, [pc, #28]	@ (8009284 <HAL_TIM_MspPostInit+0xc8>)
 8009266:	f005 f905 	bl	800e474 <HAL_GPIO_Init>
}
 800926a:	bf00      	nop
 800926c:	3728      	adds	r7, #40	@ 0x28
 800926e:	46bd      	mov	sp, r7
 8009270:	bd80      	pop	{r7, pc}
 8009272:	bf00      	nop
 8009274:	40010000 	.word	0x40010000
 8009278:	58024400 	.word	0x58024400
 800927c:	58021000 	.word	0x58021000
 8009280:	40000400 	.word	0x40000400
 8009284:	58020800 	.word	0x58020800

08009288 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8009288:	b580      	push	{r7, lr}
 800928a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800928c:	4b22      	ldr	r3, [pc, #136]	@ (8009318 <MX_USART1_UART_Init+0x90>)
 800928e:	4a23      	ldr	r2, [pc, #140]	@ (800931c <MX_USART1_UART_Init+0x94>)
 8009290:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8009292:	4b21      	ldr	r3, [pc, #132]	@ (8009318 <MX_USART1_UART_Init+0x90>)
 8009294:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8009298:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800929a:	4b1f      	ldr	r3, [pc, #124]	@ (8009318 <MX_USART1_UART_Init+0x90>)
 800929c:	2200      	movs	r2, #0
 800929e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80092a0:	4b1d      	ldr	r3, [pc, #116]	@ (8009318 <MX_USART1_UART_Init+0x90>)
 80092a2:	2200      	movs	r2, #0
 80092a4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80092a6:	4b1c      	ldr	r3, [pc, #112]	@ (8009318 <MX_USART1_UART_Init+0x90>)
 80092a8:	2200      	movs	r2, #0
 80092aa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80092ac:	4b1a      	ldr	r3, [pc, #104]	@ (8009318 <MX_USART1_UART_Init+0x90>)
 80092ae:	220c      	movs	r2, #12
 80092b0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80092b2:	4b19      	ldr	r3, [pc, #100]	@ (8009318 <MX_USART1_UART_Init+0x90>)
 80092b4:	2200      	movs	r2, #0
 80092b6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80092b8:	4b17      	ldr	r3, [pc, #92]	@ (8009318 <MX_USART1_UART_Init+0x90>)
 80092ba:	2200      	movs	r2, #0
 80092bc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80092be:	4b16      	ldr	r3, [pc, #88]	@ (8009318 <MX_USART1_UART_Init+0x90>)
 80092c0:	2200      	movs	r2, #0
 80092c2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80092c4:	4b14      	ldr	r3, [pc, #80]	@ (8009318 <MX_USART1_UART_Init+0x90>)
 80092c6:	2200      	movs	r2, #0
 80092c8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80092ca:	4b13      	ldr	r3, [pc, #76]	@ (8009318 <MX_USART1_UART_Init+0x90>)
 80092cc:	2200      	movs	r2, #0
 80092ce:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80092d0:	4811      	ldr	r0, [pc, #68]	@ (8009318 <MX_USART1_UART_Init+0x90>)
 80092d2:	f00e fde7 	bl	8017ea4 <HAL_UART_Init>
 80092d6:	4603      	mov	r3, r0
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d001      	beq.n	80092e0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80092dc:	f7fe fde4 	bl	8007ea8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80092e0:	2100      	movs	r1, #0
 80092e2:	480d      	ldr	r0, [pc, #52]	@ (8009318 <MX_USART1_UART_Init+0x90>)
 80092e4:	f011 fc97 	bl	801ac16 <HAL_UARTEx_SetTxFifoThreshold>
 80092e8:	4603      	mov	r3, r0
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d001      	beq.n	80092f2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80092ee:	f7fe fddb 	bl	8007ea8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80092f2:	2100      	movs	r1, #0
 80092f4:	4808      	ldr	r0, [pc, #32]	@ (8009318 <MX_USART1_UART_Init+0x90>)
 80092f6:	f011 fccc 	bl	801ac92 <HAL_UARTEx_SetRxFifoThreshold>
 80092fa:	4603      	mov	r3, r0
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d001      	beq.n	8009304 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8009300:	f7fe fdd2 	bl	8007ea8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8009304:	4804      	ldr	r0, [pc, #16]	@ (8009318 <MX_USART1_UART_Init+0x90>)
 8009306:	f011 fc4d 	bl	801aba4 <HAL_UARTEx_DisableFifoMode>
 800930a:	4603      	mov	r3, r0
 800930c:	2b00      	cmp	r3, #0
 800930e:	d001      	beq.n	8009314 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8009310:	f7fe fdca 	bl	8007ea8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8009314:	bf00      	nop
 8009316:	bd80      	pop	{r7, pc}
 8009318:	240004b4 	.word	0x240004b4
 800931c:	40011000 	.word	0x40011000

08009320 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8009320:	b580      	push	{r7, lr}
 8009322:	b0b8      	sub	sp, #224	@ 0xe0
 8009324:	af00      	add	r7, sp, #0
 8009326:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009328:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 800932c:	2200      	movs	r2, #0
 800932e:	601a      	str	r2, [r3, #0]
 8009330:	605a      	str	r2, [r3, #4]
 8009332:	609a      	str	r2, [r3, #8]
 8009334:	60da      	str	r2, [r3, #12]
 8009336:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8009338:	f107 0310 	add.w	r3, r7, #16
 800933c:	22b8      	movs	r2, #184	@ 0xb8
 800933e:	2100      	movs	r1, #0
 8009340:	4618      	mov	r0, r3
 8009342:	f014 fee7 	bl	801e114 <memset>
  if(uartHandle->Instance==USART1)
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	4a2b      	ldr	r2, [pc, #172]	@ (80093f8 <HAL_UART_MspInit+0xd8>)
 800934c:	4293      	cmp	r3, r2
 800934e:	d14e      	bne.n	80093ee <HAL_UART_MspInit+0xce>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8009350:	f04f 0201 	mov.w	r2, #1
 8009354:	f04f 0300 	mov.w	r3, #0
 8009358:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 800935c:	2300      	movs	r3, #0
 800935e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8009362:	f107 0310 	add.w	r3, r7, #16
 8009366:	4618      	mov	r0, r3
 8009368:	f008 fe96 	bl	8012098 <HAL_RCCEx_PeriphCLKConfig>
 800936c:	4603      	mov	r3, r0
 800936e:	2b00      	cmp	r3, #0
 8009370:	d001      	beq.n	8009376 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8009372:	f7fe fd99 	bl	8007ea8 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8009376:	4b21      	ldr	r3, [pc, #132]	@ (80093fc <HAL_UART_MspInit+0xdc>)
 8009378:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800937c:	4a1f      	ldr	r2, [pc, #124]	@ (80093fc <HAL_UART_MspInit+0xdc>)
 800937e:	f043 0310 	orr.w	r3, r3, #16
 8009382:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8009386:	4b1d      	ldr	r3, [pc, #116]	@ (80093fc <HAL_UART_MspInit+0xdc>)
 8009388:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800938c:	f003 0310 	and.w	r3, r3, #16
 8009390:	60fb      	str	r3, [r7, #12]
 8009392:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009394:	4b19      	ldr	r3, [pc, #100]	@ (80093fc <HAL_UART_MspInit+0xdc>)
 8009396:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800939a:	4a18      	ldr	r2, [pc, #96]	@ (80093fc <HAL_UART_MspInit+0xdc>)
 800939c:	f043 0301 	orr.w	r3, r3, #1
 80093a0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80093a4:	4b15      	ldr	r3, [pc, #84]	@ (80093fc <HAL_UART_MspInit+0xdc>)
 80093a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80093aa:	f003 0301 	and.w	r3, r3, #1
 80093ae:	60bb      	str	r3, [r7, #8]
 80093b0:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80093b2:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80093b6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80093ba:	2302      	movs	r3, #2
 80093bc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80093c0:	2300      	movs	r3, #0
 80093c2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80093c6:	2300      	movs	r3, #0
 80093c8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80093cc:	2307      	movs	r3, #7
 80093ce:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80093d2:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80093d6:	4619      	mov	r1, r3
 80093d8:	4809      	ldr	r0, [pc, #36]	@ (8009400 <HAL_UART_MspInit+0xe0>)
 80093da:	f005 f84b 	bl	800e474 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80093de:	2200      	movs	r2, #0
 80093e0:	2100      	movs	r1, #0
 80093e2:	2025      	movs	r0, #37	@ 0x25
 80093e4:	f002 f947 	bl	800b676 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80093e8:	2025      	movs	r0, #37	@ 0x25
 80093ea:	f002 f95e 	bl	800b6aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80093ee:	bf00      	nop
 80093f0:	37e0      	adds	r7, #224	@ 0xe0
 80093f2:	46bd      	mov	sp, r7
 80093f4:	bd80      	pop	{r7, pc}
 80093f6:	bf00      	nop
 80093f8:	40011000 	.word	0x40011000
 80093fc:	58024400 	.word	0x58024400
 8009400:	58020000 	.word	0x58020000

08009404 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8009404:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800943c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8009408:	f7ff fbe6 	bl	8008bd8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800940c:	480c      	ldr	r0, [pc, #48]	@ (8009440 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800940e:	490d      	ldr	r1, [pc, #52]	@ (8009444 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8009410:	4a0d      	ldr	r2, [pc, #52]	@ (8009448 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8009412:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8009414:	e002      	b.n	800941c <LoopCopyDataInit>

08009416 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8009416:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8009418:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800941a:	3304      	adds	r3, #4

0800941c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800941c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800941e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8009420:	d3f9      	bcc.n	8009416 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8009422:	4a0a      	ldr	r2, [pc, #40]	@ (800944c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8009424:	4c0a      	ldr	r4, [pc, #40]	@ (8009450 <LoopFillZerobss+0x22>)
  movs r3, #0
 8009426:	2300      	movs	r3, #0
  b LoopFillZerobss
 8009428:	e001      	b.n	800942e <LoopFillZerobss>

0800942a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800942a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800942c:	3204      	adds	r2, #4

0800942e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800942e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8009430:	d3fb      	bcc.n	800942a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8009432:	f014 fe7d 	bl	801e130 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8009436:	f7fb fdab 	bl	8004f90 <main>
  bx  lr
 800943a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800943c:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8009440:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8009444:	2400007c 	.word	0x2400007c
  ldr r2, =_sidata
 8009448:	080207d8 	.word	0x080207d8
  ldr r2, =_sbss
 800944c:	2400007c 	.word	0x2400007c
  ldr r4, =_ebss
 8009450:	240008b0 	.word	0x240008b0

08009454 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8009454:	e7fe      	b.n	8009454 <ADC3_IRQHandler>
	...

08009458 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8009458:	b580      	push	{r7, lr}
 800945a:	b082      	sub	sp, #8
 800945c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800945e:	2003      	movs	r0, #3
 8009460:	f002 f8fe 	bl	800b660 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8009464:	f008 fc42 	bl	8011cec <HAL_RCC_GetSysClockFreq>
 8009468:	4602      	mov	r2, r0
 800946a:	4b15      	ldr	r3, [pc, #84]	@ (80094c0 <HAL_Init+0x68>)
 800946c:	699b      	ldr	r3, [r3, #24]
 800946e:	0a1b      	lsrs	r3, r3, #8
 8009470:	f003 030f 	and.w	r3, r3, #15
 8009474:	4913      	ldr	r1, [pc, #76]	@ (80094c4 <HAL_Init+0x6c>)
 8009476:	5ccb      	ldrb	r3, [r1, r3]
 8009478:	f003 031f 	and.w	r3, r3, #31
 800947c:	fa22 f303 	lsr.w	r3, r2, r3
 8009480:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009482:	4b0f      	ldr	r3, [pc, #60]	@ (80094c0 <HAL_Init+0x68>)
 8009484:	699b      	ldr	r3, [r3, #24]
 8009486:	f003 030f 	and.w	r3, r3, #15
 800948a:	4a0e      	ldr	r2, [pc, #56]	@ (80094c4 <HAL_Init+0x6c>)
 800948c:	5cd3      	ldrb	r3, [r2, r3]
 800948e:	f003 031f 	and.w	r3, r3, #31
 8009492:	687a      	ldr	r2, [r7, #4]
 8009494:	fa22 f303 	lsr.w	r3, r2, r3
 8009498:	4a0b      	ldr	r2, [pc, #44]	@ (80094c8 <HAL_Init+0x70>)
 800949a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800949c:	4a0b      	ldr	r2, [pc, #44]	@ (80094cc <HAL_Init+0x74>)
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80094a2:	200f      	movs	r0, #15
 80094a4:	f000 f814 	bl	80094d0 <HAL_InitTick>
 80094a8:	4603      	mov	r3, r0
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d001      	beq.n	80094b2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80094ae:	2301      	movs	r3, #1
 80094b0:	e002      	b.n	80094b8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80094b2:	f7fe febb 	bl	800822c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80094b6:	2300      	movs	r3, #0
}
 80094b8:	4618      	mov	r0, r3
 80094ba:	3708      	adds	r7, #8
 80094bc:	46bd      	mov	sp, r7
 80094be:	bd80      	pop	{r7, pc}
 80094c0:	58024400 	.word	0x58024400
 80094c4:	0801ea4c 	.word	0x0801ea4c
 80094c8:	2400000c 	.word	0x2400000c
 80094cc:	24000008 	.word	0x24000008

080094d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80094d0:	b580      	push	{r7, lr}
 80094d2:	b082      	sub	sp, #8
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80094d8:	4b15      	ldr	r3, [pc, #84]	@ (8009530 <HAL_InitTick+0x60>)
 80094da:	781b      	ldrb	r3, [r3, #0]
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d101      	bne.n	80094e4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80094e0:	2301      	movs	r3, #1
 80094e2:	e021      	b.n	8009528 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80094e4:	4b13      	ldr	r3, [pc, #76]	@ (8009534 <HAL_InitTick+0x64>)
 80094e6:	681a      	ldr	r2, [r3, #0]
 80094e8:	4b11      	ldr	r3, [pc, #68]	@ (8009530 <HAL_InitTick+0x60>)
 80094ea:	781b      	ldrb	r3, [r3, #0]
 80094ec:	4619      	mov	r1, r3
 80094ee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80094f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80094f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80094fa:	4618      	mov	r0, r3
 80094fc:	f002 f8e3 	bl	800b6c6 <HAL_SYSTICK_Config>
 8009500:	4603      	mov	r3, r0
 8009502:	2b00      	cmp	r3, #0
 8009504:	d001      	beq.n	800950a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8009506:	2301      	movs	r3, #1
 8009508:	e00e      	b.n	8009528 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	2b0f      	cmp	r3, #15
 800950e:	d80a      	bhi.n	8009526 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8009510:	2200      	movs	r2, #0
 8009512:	6879      	ldr	r1, [r7, #4]
 8009514:	f04f 30ff 	mov.w	r0, #4294967295
 8009518:	f002 f8ad 	bl	800b676 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800951c:	4a06      	ldr	r2, [pc, #24]	@ (8009538 <HAL_InitTick+0x68>)
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8009522:	2300      	movs	r3, #0
 8009524:	e000      	b.n	8009528 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8009526:	2301      	movs	r3, #1
}
 8009528:	4618      	mov	r0, r3
 800952a:	3708      	adds	r7, #8
 800952c:	46bd      	mov	sp, r7
 800952e:	bd80      	pop	{r7, pc}
 8009530:	24000014 	.word	0x24000014
 8009534:	24000008 	.word	0x24000008
 8009538:	24000010 	.word	0x24000010

0800953c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800953c:	b480      	push	{r7}
 800953e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8009540:	4b06      	ldr	r3, [pc, #24]	@ (800955c <HAL_IncTick+0x20>)
 8009542:	781b      	ldrb	r3, [r3, #0]
 8009544:	461a      	mov	r2, r3
 8009546:	4b06      	ldr	r3, [pc, #24]	@ (8009560 <HAL_IncTick+0x24>)
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	4413      	add	r3, r2
 800954c:	4a04      	ldr	r2, [pc, #16]	@ (8009560 <HAL_IncTick+0x24>)
 800954e:	6013      	str	r3, [r2, #0]
}
 8009550:	bf00      	nop
 8009552:	46bd      	mov	sp, r7
 8009554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009558:	4770      	bx	lr
 800955a:	bf00      	nop
 800955c:	24000014 	.word	0x24000014
 8009560:	24000548 	.word	0x24000548

08009564 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009564:	b480      	push	{r7}
 8009566:	af00      	add	r7, sp, #0
  return uwTick;
 8009568:	4b03      	ldr	r3, [pc, #12]	@ (8009578 <HAL_GetTick+0x14>)
 800956a:	681b      	ldr	r3, [r3, #0]
}
 800956c:	4618      	mov	r0, r3
 800956e:	46bd      	mov	sp, r7
 8009570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009574:	4770      	bx	lr
 8009576:	bf00      	nop
 8009578:	24000548 	.word	0x24000548

0800957c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800957c:	b580      	push	{r7, lr}
 800957e:	b084      	sub	sp, #16
 8009580:	af00      	add	r7, sp, #0
 8009582:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8009584:	f7ff ffee 	bl	8009564 <HAL_GetTick>
 8009588:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009594:	d005      	beq.n	80095a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8009596:	4b0a      	ldr	r3, [pc, #40]	@ (80095c0 <HAL_Delay+0x44>)
 8009598:	781b      	ldrb	r3, [r3, #0]
 800959a:	461a      	mov	r2, r3
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	4413      	add	r3, r2
 80095a0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80095a2:	bf00      	nop
 80095a4:	f7ff ffde 	bl	8009564 <HAL_GetTick>
 80095a8:	4602      	mov	r2, r0
 80095aa:	68bb      	ldr	r3, [r7, #8]
 80095ac:	1ad3      	subs	r3, r2, r3
 80095ae:	68fa      	ldr	r2, [r7, #12]
 80095b0:	429a      	cmp	r2, r3
 80095b2:	d8f7      	bhi.n	80095a4 <HAL_Delay+0x28>
  {
  }
}
 80095b4:	bf00      	nop
 80095b6:	bf00      	nop
 80095b8:	3710      	adds	r7, #16
 80095ba:	46bd      	mov	sp, r7
 80095bc:	bd80      	pop	{r7, pc}
 80095be:	bf00      	nop
 80095c0:	24000014 	.word	0x24000014

080095c4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80095c4:	b480      	push	{r7}
 80095c6:	b083      	sub	sp, #12
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	6078      	str	r0, [r7, #4]
 80095cc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	689b      	ldr	r3, [r3, #8]
 80095d2:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80095d6:	683b      	ldr	r3, [r7, #0]
 80095d8:	431a      	orrs	r2, r3
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	609a      	str	r2, [r3, #8]
}
 80095de:	bf00      	nop
 80095e0:	370c      	adds	r7, #12
 80095e2:	46bd      	mov	sp, r7
 80095e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e8:	4770      	bx	lr

080095ea <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80095ea:	b480      	push	{r7}
 80095ec:	b083      	sub	sp, #12
 80095ee:	af00      	add	r7, sp, #0
 80095f0:	6078      	str	r0, [r7, #4]
 80095f2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	689b      	ldr	r3, [r3, #8]
 80095f8:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80095fc:	683b      	ldr	r3, [r7, #0]
 80095fe:	431a      	orrs	r2, r3
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	609a      	str	r2, [r3, #8]
}
 8009604:	bf00      	nop
 8009606:	370c      	adds	r7, #12
 8009608:	46bd      	mov	sp, r7
 800960a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800960e:	4770      	bx	lr

08009610 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8009610:	b480      	push	{r7}
 8009612:	b083      	sub	sp, #12
 8009614:	af00      	add	r7, sp, #0
 8009616:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	689b      	ldr	r3, [r3, #8]
 800961c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8009620:	4618      	mov	r0, r3
 8009622:	370c      	adds	r7, #12
 8009624:	46bd      	mov	sp, r7
 8009626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800962a:	4770      	bx	lr

0800962c <LL_ADC_SetChannelPreselection>:
  *         @arg @ref LL_ADC_CHANNEL_18
  *         @arg @ref LL_ADC_CHANNEL_19
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelPreselection(ADC_TypeDef *ADCx, uint32_t Channel)
{
 800962c:	b480      	push	{r7}
 800962e:	b087      	sub	sp, #28
 8009630:	af00      	add	r7, sp, #0
 8009632:	6078      	str	r0, [r7, #4]
 8009634:	6039      	str	r1, [r7, #0]
#if defined(ADC_VER_V5_V90)
    if (ADCx != ADC3)
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	4a18      	ldr	r2, [pc, #96]	@ (800969c <LL_ADC_SetChannelPreselection+0x70>)
 800963a:	4293      	cmp	r3, r2
 800963c:	d027      	beq.n	800968e <LL_ADC_SetChannelPreselection+0x62>
    {
      /* ADC channels preselection */
      ADCx->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 800963e:	683b      	ldr	r3, [r7, #0]
 8009640:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009644:	2b00      	cmp	r3, #0
 8009646:	d107      	bne.n	8009658 <LL_ADC_SetChannelPreselection+0x2c>
 8009648:	683b      	ldr	r3, [r7, #0]
 800964a:	0e9b      	lsrs	r3, r3, #26
 800964c:	f003 031f 	and.w	r3, r3, #31
 8009650:	2201      	movs	r2, #1
 8009652:	fa02 f303 	lsl.w	r3, r2, r3
 8009656:	e015      	b.n	8009684 <LL_ADC_SetChannelPreselection+0x58>
 8009658:	683b      	ldr	r3, [r7, #0]
 800965a:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800965c:	693b      	ldr	r3, [r7, #16]
 800965e:	fa93 f3a3 	rbit	r3, r3
 8009662:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8009668:	697b      	ldr	r3, [r7, #20]
 800966a:	2b00      	cmp	r3, #0
 800966c:	d101      	bne.n	8009672 <LL_ADC_SetChannelPreselection+0x46>
  {
    return 32U;
 800966e:	2320      	movs	r3, #32
 8009670:	e003      	b.n	800967a <LL_ADC_SetChannelPreselection+0x4e>
  }
  return __builtin_clz(value);
 8009672:	697b      	ldr	r3, [r7, #20]
 8009674:	fab3 f383 	clz	r3, r3
 8009678:	b2db      	uxtb	r3, r3
 800967a:	f003 031f 	and.w	r3, r3, #31
 800967e:	2201      	movs	r2, #1
 8009680:	fa02 f303 	lsl.w	r3, r2, r3
 8009684:	687a      	ldr	r2, [r7, #4]
 8009686:	69d2      	ldr	r2, [r2, #28]
 8009688:	431a      	orrs	r2, r3
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	61da      	str	r2, [r3, #28]
    }
#else
    /* ADC channels preselection */
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
}
 800968e:	bf00      	nop
 8009690:	371c      	adds	r7, #28
 8009692:	46bd      	mov	sp, r7
 8009694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009698:	4770      	bx	lr
 800969a:	bf00      	nop
 800969c:	58026000 	.word	0x58026000

080096a0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80096a0:	b480      	push	{r7}
 80096a2:	b087      	sub	sp, #28
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	60f8      	str	r0, [r7, #12]
 80096a8:	60b9      	str	r1, [r7, #8]
 80096aa:	607a      	str	r2, [r7, #4]
 80096ac:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	3360      	adds	r3, #96	@ 0x60
 80096b2:	461a      	mov	r2, r3
 80096b4:	68bb      	ldr	r3, [r7, #8]
 80096b6:	009b      	lsls	r3, r3, #2
 80096b8:	4413      	add	r3, r2
 80096ba:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	4a10      	ldr	r2, [pc, #64]	@ (8009700 <LL_ADC_SetOffset+0x60>)
 80096c0:	4293      	cmp	r3, r2
 80096c2:	d10b      	bne.n	80096dc <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 80096c4:	697b      	ldr	r3, [r7, #20]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80096ce:	683b      	ldr	r3, [r7, #0]
 80096d0:	4313      	orrs	r3, r2
 80096d2:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80096d6:	697b      	ldr	r3, [r7, #20]
 80096d8:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80096da:	e00b      	b.n	80096f4 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 80096dc:	697b      	ldr	r3, [r7, #20]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 80096ea:	683b      	ldr	r3, [r7, #0]
 80096ec:	430b      	orrs	r3, r1
 80096ee:	431a      	orrs	r2, r3
 80096f0:	697b      	ldr	r3, [r7, #20]
 80096f2:	601a      	str	r2, [r3, #0]
}
 80096f4:	bf00      	nop
 80096f6:	371c      	adds	r7, #28
 80096f8:	46bd      	mov	sp, r7
 80096fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096fe:	4770      	bx	lr
 8009700:	58026000 	.word	0x58026000

08009704 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8009704:	b480      	push	{r7}
 8009706:	b085      	sub	sp, #20
 8009708:	af00      	add	r7, sp, #0
 800970a:	6078      	str	r0, [r7, #4]
 800970c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	3360      	adds	r3, #96	@ 0x60
 8009712:	461a      	mov	r2, r3
 8009714:	683b      	ldr	r3, [r7, #0]
 8009716:	009b      	lsls	r3, r3, #2
 8009718:	4413      	add	r3, r2
 800971a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8009724:	4618      	mov	r0, r3
 8009726:	3714      	adds	r7, #20
 8009728:	46bd      	mov	sp, r7
 800972a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800972e:	4770      	bx	lr

08009730 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8009730:	b480      	push	{r7}
 8009732:	b085      	sub	sp, #20
 8009734:	af00      	add	r7, sp, #0
 8009736:	60f8      	str	r0, [r7, #12]
 8009738:	60b9      	str	r1, [r7, #8]
 800973a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	691b      	ldr	r3, [r3, #16]
 8009740:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8009744:	68bb      	ldr	r3, [r7, #8]
 8009746:	f003 031f 	and.w	r3, r3, #31
 800974a:	6879      	ldr	r1, [r7, #4]
 800974c:	fa01 f303 	lsl.w	r3, r1, r3
 8009750:	431a      	orrs	r2, r3
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	611a      	str	r2, [r3, #16]
}
 8009756:	bf00      	nop
 8009758:	3714      	adds	r7, #20
 800975a:	46bd      	mov	sp, r7
 800975c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009760:	4770      	bx	lr
	...

08009764 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8009764:	b480      	push	{r7}
 8009766:	b087      	sub	sp, #28
 8009768:	af00      	add	r7, sp, #0
 800976a:	60f8      	str	r0, [r7, #12]
 800976c:	60b9      	str	r1, [r7, #8]
 800976e:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	4a0c      	ldr	r2, [pc, #48]	@ (80097a4 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8009774:	4293      	cmp	r3, r2
 8009776:	d00e      	beq.n	8009796 <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	3360      	adds	r3, #96	@ 0x60
 800977c:	461a      	mov	r2, r3
 800977e:	68bb      	ldr	r3, [r7, #8]
 8009780:	009b      	lsls	r3, r3, #2
 8009782:	4413      	add	r3, r2
 8009784:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8009786:	697b      	ldr	r3, [r7, #20]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	431a      	orrs	r2, r3
 8009792:	697b      	ldr	r3, [r7, #20]
 8009794:	601a      	str	r2, [r3, #0]
  }
}
 8009796:	bf00      	nop
 8009798:	371c      	adds	r7, #28
 800979a:	46bd      	mov	sp, r7
 800979c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a0:	4770      	bx	lr
 80097a2:	bf00      	nop
 80097a4:	58026000 	.word	0x58026000

080097a8 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80097a8:	b480      	push	{r7}
 80097aa:	b087      	sub	sp, #28
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	60f8      	str	r0, [r7, #12]
 80097b0:	60b9      	str	r1, [r7, #8]
 80097b2:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	4a0c      	ldr	r2, [pc, #48]	@ (80097e8 <LL_ADC_SetOffsetSaturation+0x40>)
 80097b8:	4293      	cmp	r3, r2
 80097ba:	d10e      	bne.n	80097da <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	3360      	adds	r3, #96	@ 0x60
 80097c0:	461a      	mov	r2, r3
 80097c2:	68bb      	ldr	r3, [r7, #8]
 80097c4:	009b      	lsls	r3, r3, #2
 80097c6:	4413      	add	r3, r2
 80097c8:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 80097ca:	697b      	ldr	r3, [r7, #20]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	431a      	orrs	r2, r3
 80097d6:	697b      	ldr	r3, [r7, #20]
 80097d8:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 80097da:	bf00      	nop
 80097dc:	371c      	adds	r7, #28
 80097de:	46bd      	mov	sp, r7
 80097e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e4:	4770      	bx	lr
 80097e6:	bf00      	nop
 80097e8:	58026000 	.word	0x58026000

080097ec <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80097ec:	b480      	push	{r7}
 80097ee:	b087      	sub	sp, #28
 80097f0:	af00      	add	r7, sp, #0
 80097f2:	60f8      	str	r0, [r7, #12]
 80097f4:	60b9      	str	r1, [r7, #8]
 80097f6:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	4a0c      	ldr	r2, [pc, #48]	@ (800982c <LL_ADC_SetOffsetSign+0x40>)
 80097fc:	4293      	cmp	r3, r2
 80097fe:	d10e      	bne.n	800981e <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	3360      	adds	r3, #96	@ 0x60
 8009804:	461a      	mov	r2, r3
 8009806:	68bb      	ldr	r3, [r7, #8]
 8009808:	009b      	lsls	r3, r3, #2
 800980a:	4413      	add	r3, r2
 800980c:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 800980e:	697b      	ldr	r3, [r7, #20]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	431a      	orrs	r2, r3
 800981a:	697b      	ldr	r3, [r7, #20]
 800981c:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 800981e:	bf00      	nop
 8009820:	371c      	adds	r7, #28
 8009822:	46bd      	mov	sp, r7
 8009824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009828:	4770      	bx	lr
 800982a:	bf00      	nop
 800982c:	58026000 	.word	0x58026000

08009830 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8009830:	b480      	push	{r7}
 8009832:	b087      	sub	sp, #28
 8009834:	af00      	add	r7, sp, #0
 8009836:	60f8      	str	r0, [r7, #12]
 8009838:	60b9      	str	r1, [r7, #8]
 800983a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	3360      	adds	r3, #96	@ 0x60
 8009840:	461a      	mov	r2, r3
 8009842:	68bb      	ldr	r3, [r7, #8]
 8009844:	009b      	lsls	r3, r3, #2
 8009846:	4413      	add	r3, r2
 8009848:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	4a0c      	ldr	r2, [pc, #48]	@ (8009880 <LL_ADC_SetOffsetState+0x50>)
 800984e:	4293      	cmp	r3, r2
 8009850:	d108      	bne.n	8009864 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 8009852:	697b      	ldr	r3, [r7, #20]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	431a      	orrs	r2, r3
 800985e:	697b      	ldr	r3, [r7, #20]
 8009860:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 8009862:	e007      	b.n	8009874 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8009864:	697b      	ldr	r3, [r7, #20]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	431a      	orrs	r2, r3
 8009870:	697b      	ldr	r3, [r7, #20]
 8009872:	601a      	str	r2, [r3, #0]
}
 8009874:	bf00      	nop
 8009876:	371c      	adds	r7, #28
 8009878:	46bd      	mov	sp, r7
 800987a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800987e:	4770      	bx	lr
 8009880:	58026000 	.word	0x58026000

08009884 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8009884:	b480      	push	{r7}
 8009886:	b083      	sub	sp, #12
 8009888:	af00      	add	r7, sp, #0
 800988a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	68db      	ldr	r3, [r3, #12]
 8009890:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8009894:	2b00      	cmp	r3, #0
 8009896:	d101      	bne.n	800989c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8009898:	2301      	movs	r3, #1
 800989a:	e000      	b.n	800989e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800989c:	2300      	movs	r3, #0
}
 800989e:	4618      	mov	r0, r3
 80098a0:	370c      	adds	r7, #12
 80098a2:	46bd      	mov	sp, r7
 80098a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a8:	4770      	bx	lr

080098aa <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80098aa:	b480      	push	{r7}
 80098ac:	b087      	sub	sp, #28
 80098ae:	af00      	add	r7, sp, #0
 80098b0:	60f8      	str	r0, [r7, #12]
 80098b2:	60b9      	str	r1, [r7, #8]
 80098b4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	3330      	adds	r3, #48	@ 0x30
 80098ba:	461a      	mov	r2, r3
 80098bc:	68bb      	ldr	r3, [r7, #8]
 80098be:	0a1b      	lsrs	r3, r3, #8
 80098c0:	009b      	lsls	r3, r3, #2
 80098c2:	f003 030c 	and.w	r3, r3, #12
 80098c6:	4413      	add	r3, r2
 80098c8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80098ca:	697b      	ldr	r3, [r7, #20]
 80098cc:	681a      	ldr	r2, [r3, #0]
 80098ce:	68bb      	ldr	r3, [r7, #8]
 80098d0:	f003 031f 	and.w	r3, r3, #31
 80098d4:	211f      	movs	r1, #31
 80098d6:	fa01 f303 	lsl.w	r3, r1, r3
 80098da:	43db      	mvns	r3, r3
 80098dc:	401a      	ands	r2, r3
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	0e9b      	lsrs	r3, r3, #26
 80098e2:	f003 011f 	and.w	r1, r3, #31
 80098e6:	68bb      	ldr	r3, [r7, #8]
 80098e8:	f003 031f 	and.w	r3, r3, #31
 80098ec:	fa01 f303 	lsl.w	r3, r1, r3
 80098f0:	431a      	orrs	r2, r3
 80098f2:	697b      	ldr	r3, [r7, #20]
 80098f4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80098f6:	bf00      	nop
 80098f8:	371c      	adds	r7, #28
 80098fa:	46bd      	mov	sp, r7
 80098fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009900:	4770      	bx	lr

08009902 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8009902:	b480      	push	{r7}
 8009904:	b083      	sub	sp, #12
 8009906:	af00      	add	r7, sp, #0
 8009908:	6078      	str	r0, [r7, #4]
 800990a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	68db      	ldr	r3, [r3, #12]
 8009910:	f023 0203 	bic.w	r2, r3, #3
 8009914:	683b      	ldr	r3, [r7, #0]
 8009916:	431a      	orrs	r2, r3
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	60da      	str	r2, [r3, #12]
}
 800991c:	bf00      	nop
 800991e:	370c      	adds	r7, #12
 8009920:	46bd      	mov	sp, r7
 8009922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009926:	4770      	bx	lr

08009928 <LL_ADC_EnableDMAReq>:
  * @rmtoll CFGR     DMAEN          LL_ADC_REG_SetDMATransfer\n
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableDMAReq (ADC_TypeDef *ADCx)
{
 8009928:	b480      	push	{r7}
 800992a:	b083      	sub	sp, #12
 800992c:	af00      	add	r7, sp, #0
 800992e:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CFGR, ADC3_CFGR_DMAEN);
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	68db      	ldr	r3, [r3, #12]
 8009934:	f043 0201 	orr.w	r2, r3, #1
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	60da      	str	r2, [r3, #12]
}
 800993c:	bf00      	nop
 800993e:	370c      	adds	r7, #12
 8009940:	46bd      	mov	sp, r7
 8009942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009946:	4770      	bx	lr

08009948 <LL_ADC_REG_SetDMATransferMode>:
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_UNLIMITED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDMATransferMode(ADC_TypeDef *ADCx, uint32_t DMATransfer)
{
 8009948:	b480      	push	{r7}
 800994a:	b083      	sub	sp, #12
 800994c:	af00      	add	r7, sp, #0
 800994e:	6078      	str	r0, [r7, #4]
 8009950:	6039      	str	r1, [r7, #0]
  if (ADCx == ADC3)
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	4a08      	ldr	r2, [pc, #32]	@ (8009978 <LL_ADC_REG_SetDMATransferMode+0x30>)
 8009956:	4293      	cmp	r3, r2
 8009958:	d107      	bne.n	800996a <LL_ADC_REG_SetDMATransferMode+0x22>
  {
    MODIFY_REG(ADCx->CFGR, ADC3_CFGR_DMAEN | ADC3_CFGR_DMACFG, DMATransfer);
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	68db      	ldr	r3, [r3, #12]
 800995e:	f023 0203 	bic.w	r2, r3, #3
 8009962:	683b      	ldr	r3, [r7, #0]
 8009964:	431a      	orrs	r2, r3
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	60da      	str	r2, [r3, #12]
  }
}
 800996a:	bf00      	nop
 800996c:	370c      	adds	r7, #12
 800996e:	46bd      	mov	sp, r7
 8009970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009974:	4770      	bx	lr
 8009976:	bf00      	nop
 8009978:	58026000 	.word	0x58026000

0800997c <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800997c:	b480      	push	{r7}
 800997e:	b083      	sub	sp, #12
 8009980:	af00      	add	r7, sp, #0
 8009982:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009988:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 800998c:	2b00      	cmp	r3, #0
 800998e:	d101      	bne.n	8009994 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8009990:	2301      	movs	r3, #1
 8009992:	e000      	b.n	8009996 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8009994:	2300      	movs	r3, #0
}
 8009996:	4618      	mov	r0, r3
 8009998:	370c      	adds	r7, #12
 800999a:	46bd      	mov	sp, r7
 800999c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a0:	4770      	bx	lr

080099a2 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80099a2:	b480      	push	{r7}
 80099a4:	b087      	sub	sp, #28
 80099a6:	af00      	add	r7, sp, #0
 80099a8:	60f8      	str	r0, [r7, #12]
 80099aa:	60b9      	str	r1, [r7, #8]
 80099ac:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	3314      	adds	r3, #20
 80099b2:	461a      	mov	r2, r3
 80099b4:	68bb      	ldr	r3, [r7, #8]
 80099b6:	0e5b      	lsrs	r3, r3, #25
 80099b8:	009b      	lsls	r3, r3, #2
 80099ba:	f003 0304 	and.w	r3, r3, #4
 80099be:	4413      	add	r3, r2
 80099c0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80099c2:	697b      	ldr	r3, [r7, #20]
 80099c4:	681a      	ldr	r2, [r3, #0]
 80099c6:	68bb      	ldr	r3, [r7, #8]
 80099c8:	0d1b      	lsrs	r3, r3, #20
 80099ca:	f003 031f 	and.w	r3, r3, #31
 80099ce:	2107      	movs	r1, #7
 80099d0:	fa01 f303 	lsl.w	r3, r1, r3
 80099d4:	43db      	mvns	r3, r3
 80099d6:	401a      	ands	r2, r3
 80099d8:	68bb      	ldr	r3, [r7, #8]
 80099da:	0d1b      	lsrs	r3, r3, #20
 80099dc:	f003 031f 	and.w	r3, r3, #31
 80099e0:	6879      	ldr	r1, [r7, #4]
 80099e2:	fa01 f303 	lsl.w	r3, r1, r3
 80099e6:	431a      	orrs	r2, r3
 80099e8:	697b      	ldr	r3, [r7, #20]
 80099ea:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80099ec:	bf00      	nop
 80099ee:	371c      	adds	r7, #28
 80099f0:	46bd      	mov	sp, r7
 80099f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f6:	4770      	bx	lr

080099f8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80099f8:	b480      	push	{r7}
 80099fa:	b085      	sub	sp, #20
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	60f8      	str	r0, [r7, #12]
 8009a00:	60b9      	str	r1, [r7, #8]
 8009a02:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	4a1a      	ldr	r2, [pc, #104]	@ (8009a70 <LL_ADC_SetChannelSingleDiff+0x78>)
 8009a08:	4293      	cmp	r3, r2
 8009a0a:	d115      	bne.n	8009a38 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8009a12:	68bb      	ldr	r3, [r7, #8]
 8009a14:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009a18:	43db      	mvns	r3, r3
 8009a1a:	401a      	ands	r2, r3
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	f003 0318 	and.w	r3, r3, #24
 8009a22:	4914      	ldr	r1, [pc, #80]	@ (8009a74 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8009a24:	40d9      	lsrs	r1, r3
 8009a26:	68bb      	ldr	r3, [r7, #8]
 8009a28:	400b      	ands	r3, r1
 8009a2a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009a2e:	431a      	orrs	r2, r3
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8009a36:	e014      	b.n	8009a62 <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8009a3e:	68bb      	ldr	r3, [r7, #8]
 8009a40:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009a44:	43db      	mvns	r3, r3
 8009a46:	401a      	ands	r2, r3
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	f003 0318 	and.w	r3, r3, #24
 8009a4e:	4909      	ldr	r1, [pc, #36]	@ (8009a74 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8009a50:	40d9      	lsrs	r1, r3
 8009a52:	68bb      	ldr	r3, [r7, #8]
 8009a54:	400b      	ands	r3, r1
 8009a56:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009a5a:	431a      	orrs	r2, r3
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
}
 8009a62:	bf00      	nop
 8009a64:	3714      	adds	r7, #20
 8009a66:	46bd      	mov	sp, r7
 8009a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a6c:	4770      	bx	lr
 8009a6e:	bf00      	nop
 8009a70:	58026000 	.word	0x58026000
 8009a74:	000fffff 	.word	0x000fffff

08009a78 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8009a78:	b480      	push	{r7}
 8009a7a:	b083      	sub	sp, #12
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	689b      	ldr	r3, [r3, #8]
 8009a84:	f003 031f 	and.w	r3, r3, #31
}
 8009a88:	4618      	mov	r0, r3
 8009a8a:	370c      	adds	r7, #12
 8009a8c:	46bd      	mov	sp, r7
 8009a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a92:	4770      	bx	lr

08009a94 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8009a94:	b480      	push	{r7}
 8009a96:	b083      	sub	sp, #12
 8009a98:	af00      	add	r7, sp, #0
 8009a9a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	689b      	ldr	r3, [r3, #8]
 8009aa0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 8009aa4:	4618      	mov	r0, r3
 8009aa6:	370c      	adds	r7, #12
 8009aa8:	46bd      	mov	sp, r7
 8009aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aae:	4770      	bx	lr

08009ab0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8009ab0:	b480      	push	{r7}
 8009ab2:	b083      	sub	sp, #12
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	689a      	ldr	r2, [r3, #8]
 8009abc:	4b04      	ldr	r3, [pc, #16]	@ (8009ad0 <LL_ADC_DisableDeepPowerDown+0x20>)
 8009abe:	4013      	ands	r3, r2
 8009ac0:	687a      	ldr	r2, [r7, #4]
 8009ac2:	6093      	str	r3, [r2, #8]
}
 8009ac4:	bf00      	nop
 8009ac6:	370c      	adds	r7, #12
 8009ac8:	46bd      	mov	sp, r7
 8009aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ace:	4770      	bx	lr
 8009ad0:	5fffffc0 	.word	0x5fffffc0

08009ad4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8009ad4:	b480      	push	{r7}
 8009ad6:	b083      	sub	sp, #12
 8009ad8:	af00      	add	r7, sp, #0
 8009ada:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	689b      	ldr	r3, [r3, #8]
 8009ae0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009ae4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009ae8:	d101      	bne.n	8009aee <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8009aea:	2301      	movs	r3, #1
 8009aec:	e000      	b.n	8009af0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8009aee:	2300      	movs	r3, #0
}
 8009af0:	4618      	mov	r0, r3
 8009af2:	370c      	adds	r7, #12
 8009af4:	46bd      	mov	sp, r7
 8009af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009afa:	4770      	bx	lr

08009afc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8009afc:	b480      	push	{r7}
 8009afe:	b083      	sub	sp, #12
 8009b00:	af00      	add	r7, sp, #0
 8009b02:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	689a      	ldr	r2, [r3, #8]
 8009b08:	4b05      	ldr	r3, [pc, #20]	@ (8009b20 <LL_ADC_EnableInternalRegulator+0x24>)
 8009b0a:	4013      	ands	r3, r2
 8009b0c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8009b14:	bf00      	nop
 8009b16:	370c      	adds	r7, #12
 8009b18:	46bd      	mov	sp, r7
 8009b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b1e:	4770      	bx	lr
 8009b20:	6fffffc0 	.word	0x6fffffc0

08009b24 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8009b24:	b480      	push	{r7}
 8009b26:	b083      	sub	sp, #12
 8009b28:	af00      	add	r7, sp, #0
 8009b2a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	689b      	ldr	r3, [r3, #8]
 8009b30:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009b34:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009b38:	d101      	bne.n	8009b3e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8009b3a:	2301      	movs	r3, #1
 8009b3c:	e000      	b.n	8009b40 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8009b3e:	2300      	movs	r3, #0
}
 8009b40:	4618      	mov	r0, r3
 8009b42:	370c      	adds	r7, #12
 8009b44:	46bd      	mov	sp, r7
 8009b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b4a:	4770      	bx	lr

08009b4c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8009b4c:	b480      	push	{r7}
 8009b4e:	b083      	sub	sp, #12
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	689a      	ldr	r2, [r3, #8]
 8009b58:	4b05      	ldr	r3, [pc, #20]	@ (8009b70 <LL_ADC_Enable+0x24>)
 8009b5a:	4013      	ands	r3, r2
 8009b5c:	f043 0201 	orr.w	r2, r3, #1
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8009b64:	bf00      	nop
 8009b66:	370c      	adds	r7, #12
 8009b68:	46bd      	mov	sp, r7
 8009b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b6e:	4770      	bx	lr
 8009b70:	7fffffc0 	.word	0x7fffffc0

08009b74 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8009b74:	b480      	push	{r7}
 8009b76:	b083      	sub	sp, #12
 8009b78:	af00      	add	r7, sp, #0
 8009b7a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	689b      	ldr	r3, [r3, #8]
 8009b80:	f003 0301 	and.w	r3, r3, #1
 8009b84:	2b01      	cmp	r3, #1
 8009b86:	d101      	bne.n	8009b8c <LL_ADC_IsEnabled+0x18>
 8009b88:	2301      	movs	r3, #1
 8009b8a:	e000      	b.n	8009b8e <LL_ADC_IsEnabled+0x1a>
 8009b8c:	2300      	movs	r3, #0
}
 8009b8e:	4618      	mov	r0, r3
 8009b90:	370c      	adds	r7, #12
 8009b92:	46bd      	mov	sp, r7
 8009b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b98:	4770      	bx	lr
	...

08009b9c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8009b9c:	b480      	push	{r7}
 8009b9e:	b083      	sub	sp, #12
 8009ba0:	af00      	add	r7, sp, #0
 8009ba2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	689a      	ldr	r2, [r3, #8]
 8009ba8:	4b05      	ldr	r3, [pc, #20]	@ (8009bc0 <LL_ADC_REG_StartConversion+0x24>)
 8009baa:	4013      	ands	r3, r2
 8009bac:	f043 0204 	orr.w	r2, r3, #4
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8009bb4:	bf00      	nop
 8009bb6:	370c      	adds	r7, #12
 8009bb8:	46bd      	mov	sp, r7
 8009bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bbe:	4770      	bx	lr
 8009bc0:	7fffffc0 	.word	0x7fffffc0

08009bc4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8009bc4:	b480      	push	{r7}
 8009bc6:	b083      	sub	sp, #12
 8009bc8:	af00      	add	r7, sp, #0
 8009bca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	689b      	ldr	r3, [r3, #8]
 8009bd0:	f003 0304 	and.w	r3, r3, #4
 8009bd4:	2b04      	cmp	r3, #4
 8009bd6:	d101      	bne.n	8009bdc <LL_ADC_REG_IsConversionOngoing+0x18>
 8009bd8:	2301      	movs	r3, #1
 8009bda:	e000      	b.n	8009bde <LL_ADC_REG_IsConversionOngoing+0x1a>
 8009bdc:	2300      	movs	r3, #0
}
 8009bde:	4618      	mov	r0, r3
 8009be0:	370c      	adds	r7, #12
 8009be2:	46bd      	mov	sp, r7
 8009be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be8:	4770      	bx	lr

08009bea <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8009bea:	b480      	push	{r7}
 8009bec:	b083      	sub	sp, #12
 8009bee:	af00      	add	r7, sp, #0
 8009bf0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	689b      	ldr	r3, [r3, #8]
 8009bf6:	f003 0308 	and.w	r3, r3, #8
 8009bfa:	2b08      	cmp	r3, #8
 8009bfc:	d101      	bne.n	8009c02 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8009bfe:	2301      	movs	r3, #1
 8009c00:	e000      	b.n	8009c04 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8009c02:	2300      	movs	r3, #0
}
 8009c04:	4618      	mov	r0, r3
 8009c06:	370c      	adds	r7, #12
 8009c08:	46bd      	mov	sp, r7
 8009c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c0e:	4770      	bx	lr

08009c10 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8009c10:	b590      	push	{r4, r7, lr}
 8009c12:	b089      	sub	sp, #36	@ 0x24
 8009c14:	af00      	add	r7, sp, #0
 8009c16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8009c18:	2300      	movs	r3, #0
 8009c1a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8009c1c:	2300      	movs	r3, #0
 8009c1e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d101      	bne.n	8009c2a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8009c26:	2301      	movs	r3, #1
 8009c28:	e1ee      	b.n	800a008 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	691b      	ldr	r3, [r3, #16]
 8009c2e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d109      	bne.n	8009c4c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8009c38:	6878      	ldr	r0, [r7, #4]
 8009c3a:	f7f9 fd15 	bl	8003668 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	2200      	movs	r2, #0
 8009c42:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	2200      	movs	r2, #0
 8009c48:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	4618      	mov	r0, r3
 8009c52:	f7ff ff3f 	bl	8009ad4 <LL_ADC_IsDeepPowerDownEnabled>
 8009c56:	4603      	mov	r3, r0
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d004      	beq.n	8009c66 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	4618      	mov	r0, r3
 8009c62:	f7ff ff25 	bl	8009ab0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	4618      	mov	r0, r3
 8009c6c:	f7ff ff5a 	bl	8009b24 <LL_ADC_IsInternalRegulatorEnabled>
 8009c70:	4603      	mov	r3, r0
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d114      	bne.n	8009ca0 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	4618      	mov	r0, r3
 8009c7c:	f7ff ff3e 	bl	8009afc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8009c80:	4b8e      	ldr	r3, [pc, #568]	@ (8009ebc <HAL_ADC_Init+0x2ac>)
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	099b      	lsrs	r3, r3, #6
 8009c86:	4a8e      	ldr	r2, [pc, #568]	@ (8009ec0 <HAL_ADC_Init+0x2b0>)
 8009c88:	fba2 2303 	umull	r2, r3, r2, r3
 8009c8c:	099b      	lsrs	r3, r3, #6
 8009c8e:	3301      	adds	r3, #1
 8009c90:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8009c92:	e002      	b.n	8009c9a <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8009c94:	68bb      	ldr	r3, [r7, #8]
 8009c96:	3b01      	subs	r3, #1
 8009c98:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8009c9a:	68bb      	ldr	r3, [r7, #8]
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d1f9      	bne.n	8009c94 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	4618      	mov	r0, r3
 8009ca6:	f7ff ff3d 	bl	8009b24 <LL_ADC_IsInternalRegulatorEnabled>
 8009caa:	4603      	mov	r3, r0
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d10d      	bne.n	8009ccc <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009cb4:	f043 0210 	orr.w	r2, r3, #16
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009cc0:	f043 0201 	orr.w	r2, r3, #1
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	665a      	str	r2, [r3, #100]	@ 0x64

    tmp_hal_status = HAL_ERROR;
 8009cc8:	2301      	movs	r3, #1
 8009cca:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	4618      	mov	r0, r3
 8009cd2:	f7ff ff77 	bl	8009bc4 <LL_ADC_REG_IsConversionOngoing>
 8009cd6:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009cdc:	f003 0310 	and.w	r3, r3, #16
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	f040 8188 	bne.w	8009ff6 <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8009ce6:	697b      	ldr	r3, [r7, #20]
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	f040 8184 	bne.w	8009ff6 <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009cf2:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8009cf6:	f043 0202 	orr.w	r2, r3, #2
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	4618      	mov	r0, r3
 8009d04:	f7ff ff36 	bl	8009b74 <LL_ADC_IsEnabled>
 8009d08:	4603      	mov	r3, r0
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d136      	bne.n	8009d7c <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	4a6c      	ldr	r2, [pc, #432]	@ (8009ec4 <HAL_ADC_Init+0x2b4>)
 8009d14:	4293      	cmp	r3, r2
 8009d16:	d004      	beq.n	8009d22 <HAL_ADC_Init+0x112>
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	4a6a      	ldr	r2, [pc, #424]	@ (8009ec8 <HAL_ADC_Init+0x2b8>)
 8009d1e:	4293      	cmp	r3, r2
 8009d20:	d10e      	bne.n	8009d40 <HAL_ADC_Init+0x130>
 8009d22:	4868      	ldr	r0, [pc, #416]	@ (8009ec4 <HAL_ADC_Init+0x2b4>)
 8009d24:	f7ff ff26 	bl	8009b74 <LL_ADC_IsEnabled>
 8009d28:	4604      	mov	r4, r0
 8009d2a:	4867      	ldr	r0, [pc, #412]	@ (8009ec8 <HAL_ADC_Init+0x2b8>)
 8009d2c:	f7ff ff22 	bl	8009b74 <LL_ADC_IsEnabled>
 8009d30:	4603      	mov	r3, r0
 8009d32:	4323      	orrs	r3, r4
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	bf0c      	ite	eq
 8009d38:	2301      	moveq	r3, #1
 8009d3a:	2300      	movne	r3, #0
 8009d3c:	b2db      	uxtb	r3, r3
 8009d3e:	e008      	b.n	8009d52 <HAL_ADC_Init+0x142>
 8009d40:	4862      	ldr	r0, [pc, #392]	@ (8009ecc <HAL_ADC_Init+0x2bc>)
 8009d42:	f7ff ff17 	bl	8009b74 <LL_ADC_IsEnabled>
 8009d46:	4603      	mov	r3, r0
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	bf0c      	ite	eq
 8009d4c:	2301      	moveq	r3, #1
 8009d4e:	2300      	movne	r3, #0
 8009d50:	b2db      	uxtb	r3, r3
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d012      	beq.n	8009d7c <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	4a5a      	ldr	r2, [pc, #360]	@ (8009ec4 <HAL_ADC_Init+0x2b4>)
 8009d5c:	4293      	cmp	r3, r2
 8009d5e:	d004      	beq.n	8009d6a <HAL_ADC_Init+0x15a>
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	4a58      	ldr	r2, [pc, #352]	@ (8009ec8 <HAL_ADC_Init+0x2b8>)
 8009d66:	4293      	cmp	r3, r2
 8009d68:	d101      	bne.n	8009d6e <HAL_ADC_Init+0x15e>
 8009d6a:	4a59      	ldr	r2, [pc, #356]	@ (8009ed0 <HAL_ADC_Init+0x2c0>)
 8009d6c:	e000      	b.n	8009d70 <HAL_ADC_Init+0x160>
 8009d6e:	4a59      	ldr	r2, [pc, #356]	@ (8009ed4 <HAL_ADC_Init+0x2c4>)
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	685b      	ldr	r3, [r3, #4]
 8009d74:	4619      	mov	r1, r3
 8009d76:	4610      	mov	r0, r2
 8009d78:	f7ff fc24 	bl	80095c4 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	4a52      	ldr	r2, [pc, #328]	@ (8009ecc <HAL_ADC_Init+0x2bc>)
 8009d82:	4293      	cmp	r3, r2
 8009d84:	d129      	bne.n	8009dda <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	7e5b      	ldrb	r3, [r3, #25]
 8009d8a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8009d90:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 8009d96:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	689b      	ldr	r3, [r3, #8]
 8009d9c:	2b08      	cmp	r3, #8
 8009d9e:	d013      	beq.n	8009dc8 <HAL_ADC_Init+0x1b8>
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	689b      	ldr	r3, [r3, #8]
 8009da4:	2b0c      	cmp	r3, #12
 8009da6:	d00d      	beq.n	8009dc4 <HAL_ADC_Init+0x1b4>
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	689b      	ldr	r3, [r3, #8]
 8009dac:	2b1c      	cmp	r3, #28
 8009dae:	d007      	beq.n	8009dc0 <HAL_ADC_Init+0x1b0>
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	689b      	ldr	r3, [r3, #8]
 8009db4:	2b18      	cmp	r3, #24
 8009db6:	d101      	bne.n	8009dbc <HAL_ADC_Init+0x1ac>
 8009db8:	2318      	movs	r3, #24
 8009dba:	e006      	b.n	8009dca <HAL_ADC_Init+0x1ba>
 8009dbc:	2300      	movs	r3, #0
 8009dbe:	e004      	b.n	8009dca <HAL_ADC_Init+0x1ba>
 8009dc0:	2310      	movs	r3, #16
 8009dc2:	e002      	b.n	8009dca <HAL_ADC_Init+0x1ba>
 8009dc4:	2308      	movs	r3, #8
 8009dc6:	e000      	b.n	8009dca <HAL_ADC_Init+0x1ba>
 8009dc8:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 8009dca:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009dd2:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8009dd4:	4313      	orrs	r3, r2
 8009dd6:	61bb      	str	r3, [r7, #24]
 8009dd8:	e00e      	b.n	8009df8 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	7e5b      	ldrb	r3, [r3, #25]
 8009dde:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8009de4:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8009dea:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009df2:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8009df4:	4313      	orrs	r3, r2
 8009df6:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009dfe:	2b01      	cmp	r3, #1
 8009e00:	d106      	bne.n	8009e10 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e06:	3b01      	subs	r3, #1
 8009e08:	045b      	lsls	r3, r3, #17
 8009e0a:	69ba      	ldr	r2, [r7, #24]
 8009e0c:	4313      	orrs	r3, r2
 8009e0e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d009      	beq.n	8009e2c <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e1c:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e24:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8009e26:	69ba      	ldr	r2, [r7, #24]
 8009e28:	4313      	orrs	r3, r2
 8009e2a:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	4a26      	ldr	r2, [pc, #152]	@ (8009ecc <HAL_ADC_Init+0x2bc>)
 8009e32:	4293      	cmp	r3, r2
 8009e34:	d115      	bne.n	8009e62 <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	68da      	ldr	r2, [r3, #12]
 8009e3c:	4b26      	ldr	r3, [pc, #152]	@ (8009ed8 <HAL_ADC_Init+0x2c8>)
 8009e3e:	4013      	ands	r3, r2
 8009e40:	687a      	ldr	r2, [r7, #4]
 8009e42:	6812      	ldr	r2, [r2, #0]
 8009e44:	69b9      	ldr	r1, [r7, #24]
 8009e46:	430b      	orrs	r3, r1
 8009e48:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	691b      	ldr	r3, [r3, #16]
 8009e50:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	430a      	orrs	r2, r1
 8009e5e:	611a      	str	r2, [r3, #16]
 8009e60:	e009      	b.n	8009e76 <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	68da      	ldr	r2, [r3, #12]
 8009e68:	4b1c      	ldr	r3, [pc, #112]	@ (8009edc <HAL_ADC_Init+0x2cc>)
 8009e6a:	4013      	ands	r3, r2
 8009e6c:	687a      	ldr	r2, [r7, #4]
 8009e6e:	6812      	ldr	r2, [r2, #0]
 8009e70:	69b9      	ldr	r1, [r7, #24]
 8009e72:	430b      	orrs	r3, r1
 8009e74:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	4618      	mov	r0, r3
 8009e7c:	f7ff fea2 	bl	8009bc4 <LL_ADC_REG_IsConversionOngoing>
 8009e80:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	4618      	mov	r0, r3
 8009e88:	f7ff feaf 	bl	8009bea <LL_ADC_INJ_IsConversionOngoing>
 8009e8c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8009e8e:	693b      	ldr	r3, [r7, #16]
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	f040 808e 	bne.w	8009fb2 <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	f040 808a 	bne.w	8009fb2 <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	4a0a      	ldr	r2, [pc, #40]	@ (8009ecc <HAL_ADC_Init+0x2bc>)
 8009ea4:	4293      	cmp	r3, r2
 8009ea6:	d11b      	bne.n	8009ee0 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	7e1b      	ldrb	r3, [r3, #24]
 8009eac:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8009eb4:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 8009eb6:	4313      	orrs	r3, r2
 8009eb8:	61bb      	str	r3, [r7, #24]
 8009eba:	e018      	b.n	8009eee <HAL_ADC_Init+0x2de>
 8009ebc:	24000008 	.word	0x24000008
 8009ec0:	053e2d63 	.word	0x053e2d63
 8009ec4:	40022000 	.word	0x40022000
 8009ec8:	40022100 	.word	0x40022100
 8009ecc:	58026000 	.word	0x58026000
 8009ed0:	40022300 	.word	0x40022300
 8009ed4:	58026300 	.word	0x58026300
 8009ed8:	fff04007 	.word	0xfff04007
 8009edc:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	7e1b      	ldrb	r3, [r3, #24]
 8009ee4:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        tmpCFGR = (
 8009eea:	4313      	orrs	r3, r2
 8009eec:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	68da      	ldr	r2, [r3, #12]
 8009ef4:	4b46      	ldr	r3, [pc, #280]	@ (800a010 <HAL_ADC_Init+0x400>)
 8009ef6:	4013      	ands	r3, r2
 8009ef8:	687a      	ldr	r2, [r7, #4]
 8009efa:	6812      	ldr	r2, [r2, #0]
 8009efc:	69b9      	ldr	r1, [r7, #24]
 8009efe:	430b      	orrs	r3, r1
 8009f00:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009f08:	2b01      	cmp	r3, #1
 8009f0a:	d137      	bne.n	8009f7c <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f10:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	4a3f      	ldr	r2, [pc, #252]	@ (800a014 <HAL_ADC_Init+0x404>)
 8009f18:	4293      	cmp	r3, r2
 8009f1a:	d116      	bne.n	8009f4a <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	691a      	ldr	r2, [r3, #16]
 8009f22:	4b3d      	ldr	r3, [pc, #244]	@ (800a018 <HAL_ADC_Init+0x408>)
 8009f24:	4013      	ands	r3, r2
 8009f26:	687a      	ldr	r2, [r7, #4]
 8009f28:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 8009f2a:	687a      	ldr	r2, [r7, #4]
 8009f2c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8009f2e:	4311      	orrs	r1, r2
 8009f30:	687a      	ldr	r2, [r7, #4]
 8009f32:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8009f34:	4311      	orrs	r1, r2
 8009f36:	687a      	ldr	r2, [r7, #4]
 8009f38:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8009f3a:	430a      	orrs	r2, r1
 8009f3c:	431a      	orrs	r2, r3
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	f042 0201 	orr.w	r2, r2, #1
 8009f46:	611a      	str	r2, [r3, #16]
 8009f48:	e020      	b.n	8009f8c <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	691a      	ldr	r2, [r3, #16]
 8009f50:	4b32      	ldr	r3, [pc, #200]	@ (800a01c <HAL_ADC_Init+0x40c>)
 8009f52:	4013      	ands	r3, r2
 8009f54:	687a      	ldr	r2, [r7, #4]
 8009f56:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8009f58:	3a01      	subs	r2, #1
 8009f5a:	0411      	lsls	r1, r2, #16
 8009f5c:	687a      	ldr	r2, [r7, #4]
 8009f5e:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8009f60:	4311      	orrs	r1, r2
 8009f62:	687a      	ldr	r2, [r7, #4]
 8009f64:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8009f66:	4311      	orrs	r1, r2
 8009f68:	687a      	ldr	r2, [r7, #4]
 8009f6a:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8009f6c:	430a      	orrs	r2, r1
 8009f6e:	431a      	orrs	r2, r3
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	f042 0201 	orr.w	r2, r2, #1
 8009f78:	611a      	str	r2, [r3, #16]
 8009f7a:	e007      	b.n	8009f8c <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	691a      	ldr	r2, [r3, #16]
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	f022 0201 	bic.w	r2, r2, #1
 8009f8a:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	691b      	ldr	r3, [r3, #16]
 8009f92:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	430a      	orrs	r2, r1
 8009fa0:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	4a1b      	ldr	r2, [pc, #108]	@ (800a014 <HAL_ADC_Init+0x404>)
 8009fa8:	4293      	cmp	r3, r2
 8009faa:	d002      	beq.n	8009fb2 <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8009fac:	6878      	ldr	r0, [r7, #4]
 8009fae:	f001 f967 	bl	800b280 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	691b      	ldr	r3, [r3, #16]
 8009fb6:	2b01      	cmp	r3, #1
 8009fb8:	d10c      	bne.n	8009fd4 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009fc0:	f023 010f 	bic.w	r1, r3, #15
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	69db      	ldr	r3, [r3, #28]
 8009fc8:	1e5a      	subs	r2, r3, #1
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	430a      	orrs	r2, r1
 8009fd0:	631a      	str	r2, [r3, #48]	@ 0x30
 8009fd2:	e007      	b.n	8009fe4 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	f022 020f 	bic.w	r2, r2, #15
 8009fe2:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009fe8:	f023 0303 	bic.w	r3, r3, #3
 8009fec:	f043 0201 	orr.w	r2, r3, #1
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	661a      	str	r2, [r3, #96]	@ 0x60
 8009ff4:	e007      	b.n	800a006 <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009ffa:	f043 0210 	orr.w	r2, r3, #16
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800a002:	2301      	movs	r3, #1
 800a004:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800a006:	7ffb      	ldrb	r3, [r7, #31]
}
 800a008:	4618      	mov	r0, r3
 800a00a:	3724      	adds	r7, #36	@ 0x24
 800a00c:	46bd      	mov	sp, r7
 800a00e:	bd90      	pop	{r4, r7, pc}
 800a010:	ffffbffc 	.word	0xffffbffc
 800a014:	58026000 	.word	0x58026000
 800a018:	fc00f81f 	.word	0xfc00f81f
 800a01c:	fc00f81e 	.word	0xfc00f81e

0800a020 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800a020:	b580      	push	{r7, lr}
 800a022:	b086      	sub	sp, #24
 800a024:	af00      	add	r7, sp, #0
 800a026:	60f8      	str	r0, [r7, #12]
 800a028:	60b9      	str	r1, [r7, #8]
 800a02a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	4a60      	ldr	r2, [pc, #384]	@ (800a1b4 <HAL_ADC_Start_DMA+0x194>)
 800a032:	4293      	cmp	r3, r2
 800a034:	d004      	beq.n	800a040 <HAL_ADC_Start_DMA+0x20>
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	4a5f      	ldr	r2, [pc, #380]	@ (800a1b8 <HAL_ADC_Start_DMA+0x198>)
 800a03c:	4293      	cmp	r3, r2
 800a03e:	d101      	bne.n	800a044 <HAL_ADC_Start_DMA+0x24>
 800a040:	4b5e      	ldr	r3, [pc, #376]	@ (800a1bc <HAL_ADC_Start_DMA+0x19c>)
 800a042:	e000      	b.n	800a046 <HAL_ADC_Start_DMA+0x26>
 800a044:	4b5e      	ldr	r3, [pc, #376]	@ (800a1c0 <HAL_ADC_Start_DMA+0x1a0>)
 800a046:	4618      	mov	r0, r3
 800a048:	f7ff fd16 	bl	8009a78 <LL_ADC_GetMultimode>
 800a04c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	4618      	mov	r0, r3
 800a054:	f7ff fdb6 	bl	8009bc4 <LL_ADC_REG_IsConversionOngoing>
 800a058:	4603      	mov	r3, r0
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	f040 80a2 	bne.w	800a1a4 <HAL_ADC_Start_DMA+0x184>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800a066:	2b01      	cmp	r3, #1
 800a068:	d101      	bne.n	800a06e <HAL_ADC_Start_DMA+0x4e>
 800a06a:	2302      	movs	r3, #2
 800a06c:	e09d      	b.n	800a1aa <HAL_ADC_Start_DMA+0x18a>
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	2201      	movs	r2, #1
 800a072:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800a076:	693b      	ldr	r3, [r7, #16]
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d006      	beq.n	800a08a <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800a07c:	693b      	ldr	r3, [r7, #16]
 800a07e:	2b05      	cmp	r3, #5
 800a080:	d003      	beq.n	800a08a <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800a082:	693b      	ldr	r3, [r7, #16]
 800a084:	2b09      	cmp	r3, #9
 800a086:	f040 8086 	bne.w	800a196 <HAL_ADC_Start_DMA+0x176>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800a08a:	68f8      	ldr	r0, [r7, #12]
 800a08c:	f000 ffda 	bl	800b044 <ADC_Enable>
 800a090:	4603      	mov	r3, r0
 800a092:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800a094:	7dfb      	ldrb	r3, [r7, #23]
 800a096:	2b00      	cmp	r3, #0
 800a098:	d178      	bne.n	800a18c <HAL_ADC_Start_DMA+0x16c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800a09e:	4b49      	ldr	r3, [pc, #292]	@ (800a1c4 <HAL_ADC_Start_DMA+0x1a4>)
 800a0a0:	4013      	ands	r3, r2
 800a0a2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	661a      	str	r2, [r3, #96]	@ 0x60
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	4a42      	ldr	r2, [pc, #264]	@ (800a1b8 <HAL_ADC_Start_DMA+0x198>)
 800a0b0:	4293      	cmp	r3, r2
 800a0b2:	d002      	beq.n	800a0ba <HAL_ADC_Start_DMA+0x9a>
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	e000      	b.n	800a0bc <HAL_ADC_Start_DMA+0x9c>
 800a0ba:	4b3e      	ldr	r3, [pc, #248]	@ (800a1b4 <HAL_ADC_Start_DMA+0x194>)
 800a0bc:	68fa      	ldr	r2, [r7, #12]
 800a0be:	6812      	ldr	r2, [r2, #0]
 800a0c0:	4293      	cmp	r3, r2
 800a0c2:	d002      	beq.n	800a0ca <HAL_ADC_Start_DMA+0xaa>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800a0c4:	693b      	ldr	r3, [r7, #16]
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d105      	bne.n	800a0d6 <HAL_ADC_Start_DMA+0xb6>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a0ce:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a0da:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d006      	beq.n	800a0f0 <HAL_ADC_Start_DMA+0xd0>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a0e6:	f023 0206 	bic.w	r2, r3, #6
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	665a      	str	r2, [r3, #100]	@ 0x64
 800a0ee:	e002      	b.n	800a0f6 <HAL_ADC_Start_DMA+0xd6>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	2200      	movs	r2, #0
 800a0f4:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a0fa:	4a33      	ldr	r2, [pc, #204]	@ (800a1c8 <HAL_ADC_Start_DMA+0x1a8>)
 800a0fc:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a102:	4a32      	ldr	r2, [pc, #200]	@ (800a1cc <HAL_ADC_Start_DMA+0x1ac>)
 800a104:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a10a:	4a31      	ldr	r2, [pc, #196]	@ (800a1d0 <HAL_ADC_Start_DMA+0x1b0>)
 800a10c:	64da      	str	r2, [r3, #76]	@ 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	221c      	movs	r2, #28
 800a114:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	2200      	movs	r2, #0
 800a11a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	685a      	ldr	r2, [r3, #4]
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	f042 0210 	orr.w	r2, r2, #16
 800a12c:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA  mode*/
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	4a28      	ldr	r2, [pc, #160]	@ (800a1d4 <HAL_ADC_Start_DMA+0x1b4>)
 800a134:	4293      	cmp	r3, r2
 800a136:	d10f      	bne.n	800a158 <HAL_ADC_Start_DMA+0x138>
        {
          LL_ADC_REG_SetDMATransferMode(hadc->Instance, ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	681a      	ldr	r2, [r3, #0]
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800a142:	005b      	lsls	r3, r3, #1
 800a144:	4619      	mov	r1, r3
 800a146:	4610      	mov	r0, r2
 800a148:	f7ff fbfe 	bl	8009948 <LL_ADC_REG_SetDMATransferMode>
          LL_ADC_EnableDMAReq(hadc->Instance);
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	4618      	mov	r0, r3
 800a152:	f7ff fbe9 	bl	8009928 <LL_ADC_EnableDMAReq>
 800a156:	e007      	b.n	800a168 <HAL_ADC_Start_DMA+0x148>
        }
        else
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	681a      	ldr	r2, [r3, #0]
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a160:	4619      	mov	r1, r3
 800a162:	4610      	mov	r0, r2
 800a164:	f7ff fbcd 	bl	8009902 <LL_ADC_REG_SetDataTransferMode>
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	3340      	adds	r3, #64	@ 0x40
 800a172:	4619      	mov	r1, r3
 800a174:	68ba      	ldr	r2, [r7, #8]
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	f001 fe82 	bl	800be80 <HAL_DMA_Start_IT>
 800a17c:	4603      	mov	r3, r0
 800a17e:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	4618      	mov	r0, r3
 800a186:	f7ff fd09 	bl	8009b9c <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800a18a:	e00d      	b.n	800a1a8 <HAL_ADC_Start_DMA+0x188>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	2200      	movs	r2, #0
 800a190:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
      if (tmp_hal_status == HAL_OK)
 800a194:	e008      	b.n	800a1a8 <HAL_ADC_Start_DMA+0x188>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 800a196:	2301      	movs	r3, #1
 800a198:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	2200      	movs	r2, #0
 800a19e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 800a1a2:	e001      	b.n	800a1a8 <HAL_ADC_Start_DMA+0x188>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800a1a4:	2302      	movs	r3, #2
 800a1a6:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800a1a8:	7dfb      	ldrb	r3, [r7, #23]
}
 800a1aa:	4618      	mov	r0, r3
 800a1ac:	3718      	adds	r7, #24
 800a1ae:	46bd      	mov	sp, r7
 800a1b0:	bd80      	pop	{r7, pc}
 800a1b2:	bf00      	nop
 800a1b4:	40022000 	.word	0x40022000
 800a1b8:	40022100 	.word	0x40022100
 800a1bc:	40022300 	.word	0x40022300
 800a1c0:	58026300 	.word	0x58026300
 800a1c4:	fffff0fe 	.word	0xfffff0fe
 800a1c8:	0800b159 	.word	0x0800b159
 800a1cc:	0800b231 	.word	0x0800b231
 800a1d0:	0800b24d 	.word	0x0800b24d
 800a1d4:	58026000 	.word	0x58026000

0800a1d8 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 800a1d8:	b580      	push	{r7, lr}
 800a1da:	b08a      	sub	sp, #40	@ 0x28
 800a1dc:	af00      	add	r7, sp, #0
 800a1de:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 800a1e0:	2300      	movs	r3, #0
 800a1e2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	685b      	ldr	r3, [r3, #4]
 800a1f2:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	4a87      	ldr	r2, [pc, #540]	@ (800a418 <HAL_ADC_IRQHandler+0x240>)
 800a1fa:	4293      	cmp	r3, r2
 800a1fc:	d004      	beq.n	800a208 <HAL_ADC_IRQHandler+0x30>
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	4a86      	ldr	r2, [pc, #536]	@ (800a41c <HAL_ADC_IRQHandler+0x244>)
 800a204:	4293      	cmp	r3, r2
 800a206:	d101      	bne.n	800a20c <HAL_ADC_IRQHandler+0x34>
 800a208:	4b85      	ldr	r3, [pc, #532]	@ (800a420 <HAL_ADC_IRQHandler+0x248>)
 800a20a:	e000      	b.n	800a20e <HAL_ADC_IRQHandler+0x36>
 800a20c:	4b85      	ldr	r3, [pc, #532]	@ (800a424 <HAL_ADC_IRQHandler+0x24c>)
 800a20e:	4618      	mov	r0, r3
 800a210:	f7ff fc32 	bl	8009a78 <LL_ADC_GetMultimode>
 800a214:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800a216:	69fb      	ldr	r3, [r7, #28]
 800a218:	f003 0302 	and.w	r3, r3, #2
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d017      	beq.n	800a250 <HAL_ADC_IRQHandler+0x78>
 800a220:	69bb      	ldr	r3, [r7, #24]
 800a222:	f003 0302 	and.w	r3, r3, #2
 800a226:	2b00      	cmp	r3, #0
 800a228:	d012      	beq.n	800a250 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a22e:	f003 0310 	and.w	r3, r3, #16
 800a232:	2b00      	cmp	r3, #0
 800a234:	d105      	bne.n	800a242 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a23a:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	661a      	str	r2, [r3, #96]	@ 0x60

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800a242:	6878      	ldr	r0, [r7, #4]
 800a244:	f001 f932 	bl	800b4ac <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	2202      	movs	r2, #2
 800a24e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800a250:	69fb      	ldr	r3, [r7, #28]
 800a252:	f003 0304 	and.w	r3, r3, #4
 800a256:	2b00      	cmp	r3, #0
 800a258:	d004      	beq.n	800a264 <HAL_ADC_IRQHandler+0x8c>
 800a25a:	69bb      	ldr	r3, [r7, #24]
 800a25c:	f003 0304 	and.w	r3, r3, #4
 800a260:	2b00      	cmp	r3, #0
 800a262:	d10a      	bne.n	800a27a <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800a264:	69fb      	ldr	r3, [r7, #28]
 800a266:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	f000 8083 	beq.w	800a376 <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800a270:	69bb      	ldr	r3, [r7, #24]
 800a272:	f003 0308 	and.w	r3, r3, #8
 800a276:	2b00      	cmp	r3, #0
 800a278:	d07d      	beq.n	800a376 <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a27e:	f003 0310 	and.w	r3, r3, #16
 800a282:	2b00      	cmp	r3, #0
 800a284:	d105      	bne.n	800a292 <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a28a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	4618      	mov	r0, r3
 800a298:	f7ff faf4 	bl	8009884 <LL_ADC_REG_IsTriggerSourceSWStart>
 800a29c:	4603      	mov	r3, r0
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d062      	beq.n	800a368 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	4a5d      	ldr	r2, [pc, #372]	@ (800a41c <HAL_ADC_IRQHandler+0x244>)
 800a2a8:	4293      	cmp	r3, r2
 800a2aa:	d002      	beq.n	800a2b2 <HAL_ADC_IRQHandler+0xda>
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	e000      	b.n	800a2b4 <HAL_ADC_IRQHandler+0xdc>
 800a2b2:	4b59      	ldr	r3, [pc, #356]	@ (800a418 <HAL_ADC_IRQHandler+0x240>)
 800a2b4:	687a      	ldr	r2, [r7, #4]
 800a2b6:	6812      	ldr	r2, [r2, #0]
 800a2b8:	4293      	cmp	r3, r2
 800a2ba:	d008      	beq.n	800a2ce <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800a2bc:	697b      	ldr	r3, [r7, #20]
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d005      	beq.n	800a2ce <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800a2c2:	697b      	ldr	r3, [r7, #20]
 800a2c4:	2b05      	cmp	r3, #5
 800a2c6:	d002      	beq.n	800a2ce <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800a2c8:	697b      	ldr	r3, [r7, #20]
 800a2ca:	2b09      	cmp	r3, #9
 800a2cc:	d104      	bne.n	800a2d8 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	68db      	ldr	r3, [r3, #12]
 800a2d4:	623b      	str	r3, [r7, #32]
 800a2d6:	e00c      	b.n	800a2f2 <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	4a4f      	ldr	r2, [pc, #316]	@ (800a41c <HAL_ADC_IRQHandler+0x244>)
 800a2de:	4293      	cmp	r3, r2
 800a2e0:	d002      	beq.n	800a2e8 <HAL_ADC_IRQHandler+0x110>
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	e000      	b.n	800a2ea <HAL_ADC_IRQHandler+0x112>
 800a2e8:	4b4b      	ldr	r3, [pc, #300]	@ (800a418 <HAL_ADC_IRQHandler+0x240>)
 800a2ea:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800a2ec:	693b      	ldr	r3, [r7, #16]
 800a2ee:	68db      	ldr	r3, [r3, #12]
 800a2f0:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 800a2f2:	6a3b      	ldr	r3, [r7, #32]
 800a2f4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d135      	bne.n	800a368 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	f003 0308 	and.w	r3, r3, #8
 800a306:	2b08      	cmp	r3, #8
 800a308:	d12e      	bne.n	800a368 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	4618      	mov	r0, r3
 800a310:	f7ff fc58 	bl	8009bc4 <LL_ADC_REG_IsConversionOngoing>
 800a314:	4603      	mov	r3, r0
 800a316:	2b00      	cmp	r3, #0
 800a318:	d11a      	bne.n	800a350 <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	685a      	ldr	r2, [r3, #4]
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	f022 020c 	bic.w	r2, r2, #12
 800a328:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a32e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	661a      	str	r2, [r3, #96]	@ 0x60

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a33a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d112      	bne.n	800a368 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a346:	f043 0201 	orr.w	r2, r3, #1
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	661a      	str	r2, [r3, #96]	@ 0x60
 800a34e:	e00b      	b.n	800a368 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a354:	f043 0210 	orr.w	r2, r3, #16
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a360:	f043 0201 	orr.w	r2, r3, #1
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	665a      	str	r2, [r3, #100]	@ 0x64
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800a368:	6878      	ldr	r0, [r7, #4]
 800a36a:	f000 f96f 	bl	800a64c <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	220c      	movs	r2, #12
 800a374:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800a376:	69fb      	ldr	r3, [r7, #28]
 800a378:	f003 0320 	and.w	r3, r3, #32
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d004      	beq.n	800a38a <HAL_ADC_IRQHandler+0x1b2>
 800a380:	69bb      	ldr	r3, [r7, #24]
 800a382:	f003 0320 	and.w	r3, r3, #32
 800a386:	2b00      	cmp	r3, #0
 800a388:	d10b      	bne.n	800a3a2 <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800a38a:	69fb      	ldr	r3, [r7, #28]
 800a38c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800a390:	2b00      	cmp	r3, #0
 800a392:	f000 80a0 	beq.w	800a4d6 <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800a396:	69bb      	ldr	r3, [r7, #24]
 800a398:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	f000 809a 	beq.w	800a4d6 <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a3a6:	f003 0310 	and.w	r3, r3, #16
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d105      	bne.n	800a3ba <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a3b2:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	4618      	mov	r0, r3
 800a3c0:	f7ff fadc 	bl	800997c <LL_ADC_INJ_IsTriggerSourceSWStart>
 800a3c4:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	4618      	mov	r0, r3
 800a3cc:	f7ff fa5a 	bl	8009884 <LL_ADC_REG_IsTriggerSourceSWStart>
 800a3d0:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	4a11      	ldr	r2, [pc, #68]	@ (800a41c <HAL_ADC_IRQHandler+0x244>)
 800a3d8:	4293      	cmp	r3, r2
 800a3da:	d002      	beq.n	800a3e2 <HAL_ADC_IRQHandler+0x20a>
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	e000      	b.n	800a3e4 <HAL_ADC_IRQHandler+0x20c>
 800a3e2:	4b0d      	ldr	r3, [pc, #52]	@ (800a418 <HAL_ADC_IRQHandler+0x240>)
 800a3e4:	687a      	ldr	r2, [r7, #4]
 800a3e6:	6812      	ldr	r2, [r2, #0]
 800a3e8:	4293      	cmp	r3, r2
 800a3ea:	d008      	beq.n	800a3fe <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800a3ec:	697b      	ldr	r3, [r7, #20]
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d005      	beq.n	800a3fe <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 800a3f2:	697b      	ldr	r3, [r7, #20]
 800a3f4:	2b06      	cmp	r3, #6
 800a3f6:	d002      	beq.n	800a3fe <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 800a3f8:	697b      	ldr	r3, [r7, #20]
 800a3fa:	2b07      	cmp	r3, #7
 800a3fc:	d104      	bne.n	800a408 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	68db      	ldr	r3, [r3, #12]
 800a404:	623b      	str	r3, [r7, #32]
 800a406:	e014      	b.n	800a432 <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	4a03      	ldr	r2, [pc, #12]	@ (800a41c <HAL_ADC_IRQHandler+0x244>)
 800a40e:	4293      	cmp	r3, r2
 800a410:	d00a      	beq.n	800a428 <HAL_ADC_IRQHandler+0x250>
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	e008      	b.n	800a42a <HAL_ADC_IRQHandler+0x252>
 800a418:	40022000 	.word	0x40022000
 800a41c:	40022100 	.word	0x40022100
 800a420:	40022300 	.word	0x40022300
 800a424:	58026300 	.word	0x58026300
 800a428:	4b84      	ldr	r3, [pc, #528]	@ (800a63c <HAL_ADC_IRQHandler+0x464>)
 800a42a:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800a42c:	693b      	ldr	r3, [r7, #16]
 800a42e:	68db      	ldr	r3, [r3, #12]
 800a430:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	2b00      	cmp	r3, #0
 800a436:	d047      	beq.n	800a4c8 <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 800a438:	6a3b      	ldr	r3, [r7, #32]
 800a43a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d007      	beq.n	800a452 <HAL_ADC_IRQHandler+0x27a>
 800a442:	68bb      	ldr	r3, [r7, #8]
 800a444:	2b00      	cmp	r3, #0
 800a446:	d03f      	beq.n	800a4c8 <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 800a448:	6a3b      	ldr	r3, [r7, #32]
 800a44a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d13a      	bne.n	800a4c8 <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a45c:	2b40      	cmp	r3, #64	@ 0x40
 800a45e:	d133      	bne.n	800a4c8 <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 800a460:	6a3b      	ldr	r3, [r7, #32]
 800a462:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a466:	2b00      	cmp	r3, #0
 800a468:	d12e      	bne.n	800a4c8 <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	4618      	mov	r0, r3
 800a470:	f7ff fbbb 	bl	8009bea <LL_ADC_INJ_IsConversionOngoing>
 800a474:	4603      	mov	r3, r0
 800a476:	2b00      	cmp	r3, #0
 800a478:	d11a      	bne.n	800a4b0 <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	685a      	ldr	r2, [r3, #4]
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800a488:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a48e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	661a      	str	r2, [r3, #96]	@ 0x60

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a49a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d112      	bne.n	800a4c8 <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a4a6:	f043 0201 	orr.w	r2, r3, #1
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	661a      	str	r2, [r3, #96]	@ 0x60
 800a4ae:	e00b      	b.n	800a4c8 <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a4b4:	f043 0210 	orr.w	r2, r3, #16
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	661a      	str	r2, [r3, #96]	@ 0x60

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a4c0:	f043 0201 	orr.w	r2, r3, #1
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	665a      	str	r2, [r3, #100]	@ 0x64
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800a4c8:	6878      	ldr	r0, [r7, #4]
 800a4ca:	f000 ffc7 	bl	800b45c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	2260      	movs	r2, #96	@ 0x60
 800a4d4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800a4d6:	69fb      	ldr	r3, [r7, #28]
 800a4d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d011      	beq.n	800a504 <HAL_ADC_IRQHandler+0x32c>
 800a4e0:	69bb      	ldr	r3, [r7, #24]
 800a4e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d00c      	beq.n	800a504 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a4ee:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800a4f6:	6878      	ldr	r0, [r7, #4]
 800a4f8:	f000 f8bc 	bl	800a674 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	2280      	movs	r2, #128	@ 0x80
 800a502:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800a504:	69fb      	ldr	r3, [r7, #28]
 800a506:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d012      	beq.n	800a534 <HAL_ADC_IRQHandler+0x35c>
 800a50e:	69bb      	ldr	r3, [r7, #24]
 800a510:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a514:	2b00      	cmp	r3, #0
 800a516:	d00d      	beq.n	800a534 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a51c:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800a524:	6878      	ldr	r0, [r7, #4]
 800a526:	f000 ffad 	bl	800b484 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a532:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800a534:	69fb      	ldr	r3, [r7, #28]
 800a536:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d012      	beq.n	800a564 <HAL_ADC_IRQHandler+0x38c>
 800a53e:	69bb      	ldr	r3, [r7, #24]
 800a540:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a544:	2b00      	cmp	r3, #0
 800a546:	d00d      	beq.n	800a564 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a54c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800a554:	6878      	ldr	r0, [r7, #4]
 800a556:	f000 ff9f 	bl	800b498 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a562:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800a564:	69fb      	ldr	r3, [r7, #28]
 800a566:	f003 0310 	and.w	r3, r3, #16
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d043      	beq.n	800a5f6 <HAL_ADC_IRQHandler+0x41e>
 800a56e:	69bb      	ldr	r3, [r7, #24]
 800a570:	f003 0310 	and.w	r3, r3, #16
 800a574:	2b00      	cmp	r3, #0
 800a576:	d03e      	beq.n	800a5f6 <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d102      	bne.n	800a586 <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 800a580:	2301      	movs	r3, #1
 800a582:	627b      	str	r3, [r7, #36]	@ 0x24
 800a584:	e021      	b.n	800a5ca <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 800a586:	697b      	ldr	r3, [r7, #20]
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d015      	beq.n	800a5b8 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	4a2a      	ldr	r2, [pc, #168]	@ (800a63c <HAL_ADC_IRQHandler+0x464>)
 800a592:	4293      	cmp	r3, r2
 800a594:	d004      	beq.n	800a5a0 <HAL_ADC_IRQHandler+0x3c8>
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	4a29      	ldr	r2, [pc, #164]	@ (800a640 <HAL_ADC_IRQHandler+0x468>)
 800a59c:	4293      	cmp	r3, r2
 800a59e:	d101      	bne.n	800a5a4 <HAL_ADC_IRQHandler+0x3cc>
 800a5a0:	4b28      	ldr	r3, [pc, #160]	@ (800a644 <HAL_ADC_IRQHandler+0x46c>)
 800a5a2:	e000      	b.n	800a5a6 <HAL_ADC_IRQHandler+0x3ce>
 800a5a4:	4b28      	ldr	r3, [pc, #160]	@ (800a648 <HAL_ADC_IRQHandler+0x470>)
 800a5a6:	4618      	mov	r0, r3
 800a5a8:	f7ff fa74 	bl	8009a94 <LL_ADC_GetMultiDMATransfer>
 800a5ac:	4603      	mov	r3, r0
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d00b      	beq.n	800a5ca <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 800a5b2:	2301      	movs	r3, #1
 800a5b4:	627b      	str	r3, [r7, #36]	@ 0x24
 800a5b6:	e008      	b.n	800a5ca <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	68db      	ldr	r3, [r3, #12]
 800a5be:	f003 0303 	and.w	r3, r3, #3
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d001      	beq.n	800a5ca <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 800a5c6:	2301      	movs	r3, #1
 800a5c8:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 800a5ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5cc:	2b01      	cmp	r3, #1
 800a5ce:	d10e      	bne.n	800a5ee <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a5d4:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a5e0:	f043 0202 	orr.w	r2, r3, #2
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	665a      	str	r2, [r3, #100]	@ 0x64
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800a5e8:	6878      	ldr	r0, [r7, #4]
 800a5ea:	f000 f84d 	bl	800a688 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	2210      	movs	r2, #16
 800a5f4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800a5f6:	69fb      	ldr	r3, [r7, #28]
 800a5f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d018      	beq.n	800a632 <HAL_ADC_IRQHandler+0x45a>
 800a600:	69bb      	ldr	r3, [r7, #24]
 800a602:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a606:	2b00      	cmp	r3, #0
 800a608:	d013      	beq.n	800a632 <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a60e:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a61a:	f043 0208 	orr.w	r2, r3, #8
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800a62a:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800a62c:	6878      	ldr	r0, [r7, #4]
 800a62e:	f000 ff1f 	bl	800b470 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 800a632:	bf00      	nop
 800a634:	3728      	adds	r7, #40	@ 0x28
 800a636:	46bd      	mov	sp, r7
 800a638:	bd80      	pop	{r7, pc}
 800a63a:	bf00      	nop
 800a63c:	40022000 	.word	0x40022000
 800a640:	40022100 	.word	0x40022100
 800a644:	40022300 	.word	0x40022300
 800a648:	58026300 	.word	0x58026300

0800a64c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800a64c:	b480      	push	{r7}
 800a64e:	b083      	sub	sp, #12
 800a650:	af00      	add	r7, sp, #0
 800a652:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800a654:	bf00      	nop
 800a656:	370c      	adds	r7, #12
 800a658:	46bd      	mov	sp, r7
 800a65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a65e:	4770      	bx	lr

0800a660 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800a660:	b480      	push	{r7}
 800a662:	b083      	sub	sp, #12
 800a664:	af00      	add	r7, sp, #0
 800a666:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800a668:	bf00      	nop
 800a66a:	370c      	adds	r7, #12
 800a66c:	46bd      	mov	sp, r7
 800a66e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a672:	4770      	bx	lr

0800a674 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800a674:	b480      	push	{r7}
 800a676:	b083      	sub	sp, #12
 800a678:	af00      	add	r7, sp, #0
 800a67a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800a67c:	bf00      	nop
 800a67e:	370c      	adds	r7, #12
 800a680:	46bd      	mov	sp, r7
 800a682:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a686:	4770      	bx	lr

0800a688 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800a688:	b480      	push	{r7}
 800a68a:	b083      	sub	sp, #12
 800a68c:	af00      	add	r7, sp, #0
 800a68e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800a690:	bf00      	nop
 800a692:	370c      	adds	r7, #12
 800a694:	46bd      	mov	sp, r7
 800a696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a69a:	4770      	bx	lr

0800a69c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800a69c:	b590      	push	{r4, r7, lr}
 800a69e:	b0a5      	sub	sp, #148	@ 0x94
 800a6a0:	af00      	add	r7, sp, #0
 800a6a2:	6078      	str	r0, [r7, #4]
 800a6a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800a6a6:	2300      	movs	r3, #0
 800a6a8:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 800a6ac:	2300      	movs	r3, #0
 800a6ae:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a6b6:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800a6b8:	683b      	ldr	r3, [r7, #0]
 800a6ba:	68db      	ldr	r3, [r3, #12]
 800a6bc:	4aa4      	ldr	r2, [pc, #656]	@ (800a950 <HAL_ADC_ConfigChannel+0x2b4>)
 800a6be:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800a6c6:	2b01      	cmp	r3, #1
 800a6c8:	d102      	bne.n	800a6d0 <HAL_ADC_ConfigChannel+0x34>
 800a6ca:	2302      	movs	r3, #2
 800a6cc:	f000 bca2 	b.w	800b014 <HAL_ADC_ConfigChannel+0x978>
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	2201      	movs	r2, #1
 800a6d4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	4618      	mov	r0, r3
 800a6de:	f7ff fa71 	bl	8009bc4 <LL_ADC_REG_IsConversionOngoing>
 800a6e2:	4603      	mov	r3, r0
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	f040 8486 	bne.w	800aff6 <HAL_ADC_ConfigChannel+0x95a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 800a6ea:	683b      	ldr	r3, [r7, #0]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	db31      	blt.n	800a756 <HAL_ADC_ConfigChannel+0xba>
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	4a97      	ldr	r2, [pc, #604]	@ (800a954 <HAL_ADC_ConfigChannel+0x2b8>)
 800a6f8:	4293      	cmp	r3, r2
 800a6fa:	d02c      	beq.n	800a756 <HAL_ADC_ConfigChannel+0xba>
      {
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 800a6fc:	683b      	ldr	r3, [r7, #0]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a704:	2b00      	cmp	r3, #0
 800a706:	d108      	bne.n	800a71a <HAL_ADC_ConfigChannel+0x7e>
 800a708:	683b      	ldr	r3, [r7, #0]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	0e9b      	lsrs	r3, r3, #26
 800a70e:	f003 031f 	and.w	r3, r3, #31
 800a712:	2201      	movs	r2, #1
 800a714:	fa02 f303 	lsl.w	r3, r2, r3
 800a718:	e016      	b.n	800a748 <HAL_ADC_ConfigChannel+0xac>
 800a71a:	683b      	ldr	r3, [r7, #0]
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a720:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a722:	fa93 f3a3 	rbit	r3, r3
 800a726:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 800a728:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a72a:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 800a72c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d101      	bne.n	800a736 <HAL_ADC_ConfigChannel+0x9a>
    return 32U;
 800a732:	2320      	movs	r3, #32
 800a734:	e003      	b.n	800a73e <HAL_ADC_ConfigChannel+0xa2>
  return __builtin_clz(value);
 800a736:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a738:	fab3 f383 	clz	r3, r3
 800a73c:	b2db      	uxtb	r3, r3
 800a73e:	f003 031f 	and.w	r3, r3, #31
 800a742:	2201      	movs	r2, #1
 800a744:	fa02 f303 	lsl.w	r3, r2, r3
 800a748:	687a      	ldr	r2, [r7, #4]
 800a74a:	6812      	ldr	r2, [r2, #0]
 800a74c:	69d1      	ldr	r1, [r2, #28]
 800a74e:	687a      	ldr	r2, [r7, #4]
 800a750:	6812      	ldr	r2, [r2, #0]
 800a752:	430b      	orrs	r3, r1
 800a754:	61d3      	str	r3, [r2, #28]
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	6818      	ldr	r0, [r3, #0]
 800a75a:	683b      	ldr	r3, [r7, #0]
 800a75c:	6859      	ldr	r1, [r3, #4]
 800a75e:	683b      	ldr	r3, [r7, #0]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	461a      	mov	r2, r3
 800a764:	f7ff f8a1 	bl	80098aa <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	4618      	mov	r0, r3
 800a76e:	f7ff fa29 	bl	8009bc4 <LL_ADC_REG_IsConversionOngoing>
 800a772:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	4618      	mov	r0, r3
 800a77c:	f7ff fa35 	bl	8009bea <LL_ADC_INJ_IsConversionOngoing>
 800a780:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800a784:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a788:	2b00      	cmp	r3, #0
 800a78a:	f040 824a 	bne.w	800ac22 <HAL_ADC_ConfigChannel+0x586>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800a78e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800a792:	2b00      	cmp	r3, #0
 800a794:	f040 8245 	bne.w	800ac22 <HAL_ADC_ConfigChannel+0x586>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	6818      	ldr	r0, [r3, #0]
 800a79c:	683b      	ldr	r3, [r7, #0]
 800a79e:	6819      	ldr	r1, [r3, #0]
 800a7a0:	683b      	ldr	r3, [r7, #0]
 800a7a2:	689b      	ldr	r3, [r3, #8]
 800a7a4:	461a      	mov	r2, r3
 800a7a6:	f7ff f8fc 	bl	80099a2 <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	4a69      	ldr	r2, [pc, #420]	@ (800a954 <HAL_ADC_ConfigChannel+0x2b8>)
 800a7b0:	4293      	cmp	r3, r2
 800a7b2:	d10d      	bne.n	800a7d0 <HAL_ADC_ConfigChannel+0x134>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800a7b4:	683b      	ldr	r3, [r7, #0]
 800a7b6:	695a      	ldr	r2, [r3, #20]
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	68db      	ldr	r3, [r3, #12]
 800a7be:	08db      	lsrs	r3, r3, #3
 800a7c0:	f003 0303 	and.w	r3, r3, #3
 800a7c4:	005b      	lsls	r3, r3, #1
 800a7c6:	fa02 f303 	lsl.w	r3, r2, r3
 800a7ca:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800a7ce:	e032      	b.n	800a836 <HAL_ADC_ConfigChannel+0x19a>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800a7d0:	4b61      	ldr	r3, [pc, #388]	@ (800a958 <HAL_ADC_ConfigChannel+0x2bc>)
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800a7d8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a7dc:	d10b      	bne.n	800a7f6 <HAL_ADC_ConfigChannel+0x15a>
 800a7de:	683b      	ldr	r3, [r7, #0]
 800a7e0:	695a      	ldr	r2, [r3, #20]
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	68db      	ldr	r3, [r3, #12]
 800a7e8:	089b      	lsrs	r3, r3, #2
 800a7ea:	f003 0307 	and.w	r3, r3, #7
 800a7ee:	005b      	lsls	r3, r3, #1
 800a7f0:	fa02 f303 	lsl.w	r3, r2, r3
 800a7f4:	e01d      	b.n	800a832 <HAL_ADC_ConfigChannel+0x196>
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	68db      	ldr	r3, [r3, #12]
 800a7fc:	f003 0310 	and.w	r3, r3, #16
 800a800:	2b00      	cmp	r3, #0
 800a802:	d10b      	bne.n	800a81c <HAL_ADC_ConfigChannel+0x180>
 800a804:	683b      	ldr	r3, [r7, #0]
 800a806:	695a      	ldr	r2, [r3, #20]
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	68db      	ldr	r3, [r3, #12]
 800a80e:	089b      	lsrs	r3, r3, #2
 800a810:	f003 0307 	and.w	r3, r3, #7
 800a814:	005b      	lsls	r3, r3, #1
 800a816:	fa02 f303 	lsl.w	r3, r2, r3
 800a81a:	e00a      	b.n	800a832 <HAL_ADC_ConfigChannel+0x196>
 800a81c:	683b      	ldr	r3, [r7, #0]
 800a81e:	695a      	ldr	r2, [r3, #20]
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	68db      	ldr	r3, [r3, #12]
 800a826:	089b      	lsrs	r3, r3, #2
 800a828:	f003 0304 	and.w	r3, r3, #4
 800a82c:	005b      	lsls	r3, r3, #1
 800a82e:	fa02 f303 	lsl.w	r3, r2, r3
 800a832:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
      }

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800a836:	683b      	ldr	r3, [r7, #0]
 800a838:	691b      	ldr	r3, [r3, #16]
 800a83a:	2b04      	cmp	r3, #4
 800a83c:	d048      	beq.n	800a8d0 <HAL_ADC_ConfigChannel+0x234>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	6818      	ldr	r0, [r3, #0]
 800a842:	683b      	ldr	r3, [r7, #0]
 800a844:	6919      	ldr	r1, [r3, #16]
 800a846:	683b      	ldr	r3, [r7, #0]
 800a848:	681a      	ldr	r2, [r3, #0]
 800a84a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a84e:	f7fe ff27 	bl	80096a0 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	4a3f      	ldr	r2, [pc, #252]	@ (800a954 <HAL_ADC_ConfigChannel+0x2b8>)
 800a858:	4293      	cmp	r3, r2
 800a85a:	d119      	bne.n	800a890 <HAL_ADC_ConfigChannel+0x1f4>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	6818      	ldr	r0, [r3, #0]
 800a860:	683b      	ldr	r3, [r7, #0]
 800a862:	6919      	ldr	r1, [r3, #16]
 800a864:	683b      	ldr	r3, [r7, #0]
 800a866:	69db      	ldr	r3, [r3, #28]
 800a868:	461a      	mov	r2, r3
 800a86a:	f7fe ffbf 	bl	80097ec <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	6818      	ldr	r0, [r3, #0]
 800a872:	683b      	ldr	r3, [r7, #0]
 800a874:	6919      	ldr	r1, [r3, #16]
 800a876:	683b      	ldr	r3, [r7, #0]
 800a878:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a87c:	2b01      	cmp	r3, #1
 800a87e:	d102      	bne.n	800a886 <HAL_ADC_ConfigChannel+0x1ea>
 800a880:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800a884:	e000      	b.n	800a888 <HAL_ADC_ConfigChannel+0x1ec>
 800a886:	2300      	movs	r3, #0
 800a888:	461a      	mov	r2, r3
 800a88a:	f7fe ff8d 	bl	80097a8 <LL_ADC_SetOffsetSaturation>
 800a88e:	e1c8      	b.n	800ac22 <HAL_ADC_ConfigChannel+0x586>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	6818      	ldr	r0, [r3, #0]
 800a894:	683b      	ldr	r3, [r7, #0]
 800a896:	6919      	ldr	r1, [r3, #16]
 800a898:	683b      	ldr	r3, [r7, #0]
 800a89a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800a89e:	2b01      	cmp	r3, #1
 800a8a0:	d102      	bne.n	800a8a8 <HAL_ADC_ConfigChannel+0x20c>
 800a8a2:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a8a6:	e000      	b.n	800a8aa <HAL_ADC_ConfigChannel+0x20e>
 800a8a8:	2300      	movs	r3, #0
 800a8aa:	461a      	mov	r2, r3
 800a8ac:	f7fe ff5a 	bl	8009764 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	6818      	ldr	r0, [r3, #0]
 800a8b4:	683b      	ldr	r3, [r7, #0]
 800a8b6:	6919      	ldr	r1, [r3, #16]
 800a8b8:	683b      	ldr	r3, [r7, #0]
 800a8ba:	7e1b      	ldrb	r3, [r3, #24]
 800a8bc:	2b01      	cmp	r3, #1
 800a8be:	d102      	bne.n	800a8c6 <HAL_ADC_ConfigChannel+0x22a>
 800a8c0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800a8c4:	e000      	b.n	800a8c8 <HAL_ADC_ConfigChannel+0x22c>
 800a8c6:	2300      	movs	r3, #0
 800a8c8:	461a      	mov	r2, r3
 800a8ca:	f7fe ff31 	bl	8009730 <LL_ADC_SetDataRightShift>
 800a8ce:	e1a8      	b.n	800ac22 <HAL_ADC_ConfigChannel+0x586>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	4a1f      	ldr	r2, [pc, #124]	@ (800a954 <HAL_ADC_ConfigChannel+0x2b8>)
 800a8d6:	4293      	cmp	r3, r2
 800a8d8:	f040 815b 	bne.w	800ab92 <HAL_ADC_ConfigChannel+0x4f6>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	2100      	movs	r1, #0
 800a8e2:	4618      	mov	r0, r3
 800a8e4:	f7fe ff0e 	bl	8009704 <LL_ADC_GetOffsetChannel>
 800a8e8:	4603      	mov	r3, r0
 800a8ea:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d10a      	bne.n	800a908 <HAL_ADC_ConfigChannel+0x26c>
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	2100      	movs	r1, #0
 800a8f8:	4618      	mov	r0, r3
 800a8fa:	f7fe ff03 	bl	8009704 <LL_ADC_GetOffsetChannel>
 800a8fe:	4603      	mov	r3, r0
 800a900:	0e9b      	lsrs	r3, r3, #26
 800a902:	f003 021f 	and.w	r2, r3, #31
 800a906:	e017      	b.n	800a938 <HAL_ADC_ConfigChannel+0x29c>
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	2100      	movs	r1, #0
 800a90e:	4618      	mov	r0, r3
 800a910:	f7fe fef8 	bl	8009704 <LL_ADC_GetOffsetChannel>
 800a914:	4603      	mov	r3, r0
 800a916:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a918:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a91a:	fa93 f3a3 	rbit	r3, r3
 800a91e:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 800a920:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a922:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 800a924:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a926:	2b00      	cmp	r3, #0
 800a928:	d101      	bne.n	800a92e <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 800a92a:	2320      	movs	r3, #32
 800a92c:	e003      	b.n	800a936 <HAL_ADC_ConfigChannel+0x29a>
  return __builtin_clz(value);
 800a92e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a930:	fab3 f383 	clz	r3, r3
 800a934:	b2db      	uxtb	r3, r3
 800a936:	461a      	mov	r2, r3
 800a938:	683b      	ldr	r3, [r7, #0]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a940:	2b00      	cmp	r3, #0
 800a942:	d10b      	bne.n	800a95c <HAL_ADC_ConfigChannel+0x2c0>
 800a944:	683b      	ldr	r3, [r7, #0]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	0e9b      	lsrs	r3, r3, #26
 800a94a:	f003 031f 	and.w	r3, r3, #31
 800a94e:	e017      	b.n	800a980 <HAL_ADC_ConfigChannel+0x2e4>
 800a950:	47ff0000 	.word	0x47ff0000
 800a954:	58026000 	.word	0x58026000
 800a958:	5c001000 	.word	0x5c001000
 800a95c:	683b      	ldr	r3, [r7, #0]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a962:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a964:	fa93 f3a3 	rbit	r3, r3
 800a968:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 800a96a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a96c:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 800a96e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a970:	2b00      	cmp	r3, #0
 800a972:	d101      	bne.n	800a978 <HAL_ADC_ConfigChannel+0x2dc>
    return 32U;
 800a974:	2320      	movs	r3, #32
 800a976:	e003      	b.n	800a980 <HAL_ADC_ConfigChannel+0x2e4>
  return __builtin_clz(value);
 800a978:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a97a:	fab3 f383 	clz	r3, r3
 800a97e:	b2db      	uxtb	r3, r3
 800a980:	429a      	cmp	r2, r3
 800a982:	d106      	bne.n	800a992 <HAL_ADC_ConfigChannel+0x2f6>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	2200      	movs	r2, #0
 800a98a:	2100      	movs	r1, #0
 800a98c:	4618      	mov	r0, r3
 800a98e:	f7fe ff4f 	bl	8009830 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	2101      	movs	r1, #1
 800a998:	4618      	mov	r0, r3
 800a99a:	f7fe feb3 	bl	8009704 <LL_ADC_GetOffsetChannel>
 800a99e:	4603      	mov	r3, r0
 800a9a0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d10a      	bne.n	800a9be <HAL_ADC_ConfigChannel+0x322>
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	2101      	movs	r1, #1
 800a9ae:	4618      	mov	r0, r3
 800a9b0:	f7fe fea8 	bl	8009704 <LL_ADC_GetOffsetChannel>
 800a9b4:	4603      	mov	r3, r0
 800a9b6:	0e9b      	lsrs	r3, r3, #26
 800a9b8:	f003 021f 	and.w	r2, r3, #31
 800a9bc:	e017      	b.n	800a9ee <HAL_ADC_ConfigChannel+0x352>
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	2101      	movs	r1, #1
 800a9c4:	4618      	mov	r0, r3
 800a9c6:	f7fe fe9d 	bl	8009704 <LL_ADC_GetOffsetChannel>
 800a9ca:	4603      	mov	r3, r0
 800a9cc:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a9ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a9d0:	fa93 f3a3 	rbit	r3, r3
 800a9d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800a9d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a9d8:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 800a9da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d101      	bne.n	800a9e4 <HAL_ADC_ConfigChannel+0x348>
    return 32U;
 800a9e0:	2320      	movs	r3, #32
 800a9e2:	e003      	b.n	800a9ec <HAL_ADC_ConfigChannel+0x350>
  return __builtin_clz(value);
 800a9e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a9e6:	fab3 f383 	clz	r3, r3
 800a9ea:	b2db      	uxtb	r3, r3
 800a9ec:	461a      	mov	r2, r3
 800a9ee:	683b      	ldr	r3, [r7, #0]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d105      	bne.n	800aa06 <HAL_ADC_ConfigChannel+0x36a>
 800a9fa:	683b      	ldr	r3, [r7, #0]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	0e9b      	lsrs	r3, r3, #26
 800aa00:	f003 031f 	and.w	r3, r3, #31
 800aa04:	e011      	b.n	800aa2a <HAL_ADC_ConfigChannel+0x38e>
 800aa06:	683b      	ldr	r3, [r7, #0]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800aa0c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800aa0e:	fa93 f3a3 	rbit	r3, r3
 800aa12:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 800aa14:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aa16:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 800aa18:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d101      	bne.n	800aa22 <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 800aa1e:	2320      	movs	r3, #32
 800aa20:	e003      	b.n	800aa2a <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 800aa22:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800aa24:	fab3 f383 	clz	r3, r3
 800aa28:	b2db      	uxtb	r3, r3
 800aa2a:	429a      	cmp	r2, r3
 800aa2c:	d106      	bne.n	800aa3c <HAL_ADC_ConfigChannel+0x3a0>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	2200      	movs	r2, #0
 800aa34:	2101      	movs	r1, #1
 800aa36:	4618      	mov	r0, r3
 800aa38:	f7fe fefa 	bl	8009830 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	2102      	movs	r1, #2
 800aa42:	4618      	mov	r0, r3
 800aa44:	f7fe fe5e 	bl	8009704 <LL_ADC_GetOffsetChannel>
 800aa48:	4603      	mov	r3, r0
 800aa4a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d10a      	bne.n	800aa68 <HAL_ADC_ConfigChannel+0x3cc>
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	2102      	movs	r1, #2
 800aa58:	4618      	mov	r0, r3
 800aa5a:	f7fe fe53 	bl	8009704 <LL_ADC_GetOffsetChannel>
 800aa5e:	4603      	mov	r3, r0
 800aa60:	0e9b      	lsrs	r3, r3, #26
 800aa62:	f003 021f 	and.w	r2, r3, #31
 800aa66:	e017      	b.n	800aa98 <HAL_ADC_ConfigChannel+0x3fc>
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	2102      	movs	r1, #2
 800aa6e:	4618      	mov	r0, r3
 800aa70:	f7fe fe48 	bl	8009704 <LL_ADC_GetOffsetChannel>
 800aa74:	4603      	mov	r3, r0
 800aa76:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800aa78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa7a:	fa93 f3a3 	rbit	r3, r3
 800aa7e:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800aa80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa82:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 800aa84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d101      	bne.n	800aa8e <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 800aa8a:	2320      	movs	r3, #32
 800aa8c:	e003      	b.n	800aa96 <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 800aa8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aa90:	fab3 f383 	clz	r3, r3
 800aa94:	b2db      	uxtb	r3, r3
 800aa96:	461a      	mov	r2, r3
 800aa98:	683b      	ldr	r3, [r7, #0]
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d105      	bne.n	800aab0 <HAL_ADC_ConfigChannel+0x414>
 800aaa4:	683b      	ldr	r3, [r7, #0]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	0e9b      	lsrs	r3, r3, #26
 800aaaa:	f003 031f 	and.w	r3, r3, #31
 800aaae:	e011      	b.n	800aad4 <HAL_ADC_ConfigChannel+0x438>
 800aab0:	683b      	ldr	r3, [r7, #0]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800aab6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aab8:	fa93 f3a3 	rbit	r3, r3
 800aabc:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 800aabe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aac0:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 800aac2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d101      	bne.n	800aacc <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 800aac8:	2320      	movs	r3, #32
 800aaca:	e003      	b.n	800aad4 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 800aacc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aace:	fab3 f383 	clz	r3, r3
 800aad2:	b2db      	uxtb	r3, r3
 800aad4:	429a      	cmp	r2, r3
 800aad6:	d106      	bne.n	800aae6 <HAL_ADC_ConfigChannel+0x44a>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	2200      	movs	r2, #0
 800aade:	2102      	movs	r1, #2
 800aae0:	4618      	mov	r0, r3
 800aae2:	f7fe fea5 	bl	8009830 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	2103      	movs	r1, #3
 800aaec:	4618      	mov	r0, r3
 800aaee:	f7fe fe09 	bl	8009704 <LL_ADC_GetOffsetChannel>
 800aaf2:	4603      	mov	r3, r0
 800aaf4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d10a      	bne.n	800ab12 <HAL_ADC_ConfigChannel+0x476>
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	2103      	movs	r1, #3
 800ab02:	4618      	mov	r0, r3
 800ab04:	f7fe fdfe 	bl	8009704 <LL_ADC_GetOffsetChannel>
 800ab08:	4603      	mov	r3, r0
 800ab0a:	0e9b      	lsrs	r3, r3, #26
 800ab0c:	f003 021f 	and.w	r2, r3, #31
 800ab10:	e017      	b.n	800ab42 <HAL_ADC_ConfigChannel+0x4a6>
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	2103      	movs	r1, #3
 800ab18:	4618      	mov	r0, r3
 800ab1a:	f7fe fdf3 	bl	8009704 <LL_ADC_GetOffsetChannel>
 800ab1e:	4603      	mov	r3, r0
 800ab20:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ab22:	6a3b      	ldr	r3, [r7, #32]
 800ab24:	fa93 f3a3 	rbit	r3, r3
 800ab28:	61fb      	str	r3, [r7, #28]
  return result;
 800ab2a:	69fb      	ldr	r3, [r7, #28]
 800ab2c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800ab2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d101      	bne.n	800ab38 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 800ab34:	2320      	movs	r3, #32
 800ab36:	e003      	b.n	800ab40 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 800ab38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab3a:	fab3 f383 	clz	r3, r3
 800ab3e:	b2db      	uxtb	r3, r3
 800ab40:	461a      	mov	r2, r3
 800ab42:	683b      	ldr	r3, [r7, #0]
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d105      	bne.n	800ab5a <HAL_ADC_ConfigChannel+0x4be>
 800ab4e:	683b      	ldr	r3, [r7, #0]
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	0e9b      	lsrs	r3, r3, #26
 800ab54:	f003 031f 	and.w	r3, r3, #31
 800ab58:	e011      	b.n	800ab7e <HAL_ADC_ConfigChannel+0x4e2>
 800ab5a:	683b      	ldr	r3, [r7, #0]
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ab60:	697b      	ldr	r3, [r7, #20]
 800ab62:	fa93 f3a3 	rbit	r3, r3
 800ab66:	613b      	str	r3, [r7, #16]
  return result;
 800ab68:	693b      	ldr	r3, [r7, #16]
 800ab6a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800ab6c:	69bb      	ldr	r3, [r7, #24]
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d101      	bne.n	800ab76 <HAL_ADC_ConfigChannel+0x4da>
    return 32U;
 800ab72:	2320      	movs	r3, #32
 800ab74:	e003      	b.n	800ab7e <HAL_ADC_ConfigChannel+0x4e2>
  return __builtin_clz(value);
 800ab76:	69bb      	ldr	r3, [r7, #24]
 800ab78:	fab3 f383 	clz	r3, r3
 800ab7c:	b2db      	uxtb	r3, r3
 800ab7e:	429a      	cmp	r2, r3
 800ab80:	d14f      	bne.n	800ac22 <HAL_ADC_ConfigChannel+0x586>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	2200      	movs	r2, #0
 800ab88:	2103      	movs	r1, #3
 800ab8a:	4618      	mov	r0, r3
 800ab8c:	f7fe fe50 	bl	8009830 <LL_ADC_SetOffsetState>
 800ab90:	e047      	b.n	800ac22 <HAL_ADC_ConfigChannel+0x586>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ab98:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800ab9c:	683b      	ldr	r3, [r7, #0]
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	069b      	lsls	r3, r3, #26
 800aba2:	429a      	cmp	r2, r3
 800aba4:	d107      	bne.n	800abb6 <HAL_ADC_ConfigChannel+0x51a>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800abb4:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800abbc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800abc0:	683b      	ldr	r3, [r7, #0]
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	069b      	lsls	r3, r3, #26
 800abc6:	429a      	cmp	r2, r3
 800abc8:	d107      	bne.n	800abda <HAL_ADC_ConfigChannel+0x53e>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800abd8:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800abe0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800abe4:	683b      	ldr	r3, [r7, #0]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	069b      	lsls	r3, r3, #26
 800abea:	429a      	cmp	r2, r3
 800abec:	d107      	bne.n	800abfe <HAL_ADC_ConfigChannel+0x562>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800abfc:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ac04:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800ac08:	683b      	ldr	r3, [r7, #0]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	069b      	lsls	r3, r3, #26
 800ac0e:	429a      	cmp	r2, r3
 800ac10:	d107      	bne.n	800ac22 <HAL_ADC_ConfigChannel+0x586>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800ac20:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	4618      	mov	r0, r3
 800ac28:	f7fe ffa4 	bl	8009b74 <LL_ADC_IsEnabled>
 800ac2c:	4603      	mov	r3, r0
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	f040 81ea 	bne.w	800b008 <HAL_ADC_ConfigChannel+0x96c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	6818      	ldr	r0, [r3, #0]
 800ac38:	683b      	ldr	r3, [r7, #0]
 800ac3a:	6819      	ldr	r1, [r3, #0]
 800ac3c:	683b      	ldr	r3, [r7, #0]
 800ac3e:	68db      	ldr	r3, [r3, #12]
 800ac40:	461a      	mov	r2, r3
 800ac42:	f7fe fed9 	bl	80099f8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800ac46:	683b      	ldr	r3, [r7, #0]
 800ac48:	68db      	ldr	r3, [r3, #12]
 800ac4a:	4a7a      	ldr	r2, [pc, #488]	@ (800ae34 <HAL_ADC_ConfigChannel+0x798>)
 800ac4c:	4293      	cmp	r3, r2
 800ac4e:	f040 80e0 	bne.w	800ae12 <HAL_ADC_ConfigChannel+0x776>
      {
        /* Set ADC channel preselection of corresponding negative channel */
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	681a      	ldr	r2, [r3, #0]
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	4977      	ldr	r1, [pc, #476]	@ (800ae38 <HAL_ADC_ConfigChannel+0x79c>)
 800ac5c:	428b      	cmp	r3, r1
 800ac5e:	d147      	bne.n	800acf0 <HAL_ADC_ConfigChannel+0x654>
 800ac60:	683b      	ldr	r3, [r7, #0]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	4975      	ldr	r1, [pc, #468]	@ (800ae3c <HAL_ADC_ConfigChannel+0x7a0>)
 800ac66:	428b      	cmp	r3, r1
 800ac68:	d040      	beq.n	800acec <HAL_ADC_ConfigChannel+0x650>
 800ac6a:	683b      	ldr	r3, [r7, #0]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	4974      	ldr	r1, [pc, #464]	@ (800ae40 <HAL_ADC_ConfigChannel+0x7a4>)
 800ac70:	428b      	cmp	r3, r1
 800ac72:	d039      	beq.n	800ace8 <HAL_ADC_ConfigChannel+0x64c>
 800ac74:	683b      	ldr	r3, [r7, #0]
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	4972      	ldr	r1, [pc, #456]	@ (800ae44 <HAL_ADC_ConfigChannel+0x7a8>)
 800ac7a:	428b      	cmp	r3, r1
 800ac7c:	d032      	beq.n	800ace4 <HAL_ADC_ConfigChannel+0x648>
 800ac7e:	683b      	ldr	r3, [r7, #0]
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	4971      	ldr	r1, [pc, #452]	@ (800ae48 <HAL_ADC_ConfigChannel+0x7ac>)
 800ac84:	428b      	cmp	r3, r1
 800ac86:	d02b      	beq.n	800ace0 <HAL_ADC_ConfigChannel+0x644>
 800ac88:	683b      	ldr	r3, [r7, #0]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	496f      	ldr	r1, [pc, #444]	@ (800ae4c <HAL_ADC_ConfigChannel+0x7b0>)
 800ac8e:	428b      	cmp	r3, r1
 800ac90:	d024      	beq.n	800acdc <HAL_ADC_ConfigChannel+0x640>
 800ac92:	683b      	ldr	r3, [r7, #0]
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	496e      	ldr	r1, [pc, #440]	@ (800ae50 <HAL_ADC_ConfigChannel+0x7b4>)
 800ac98:	428b      	cmp	r3, r1
 800ac9a:	d01d      	beq.n	800acd8 <HAL_ADC_ConfigChannel+0x63c>
 800ac9c:	683b      	ldr	r3, [r7, #0]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	496c      	ldr	r1, [pc, #432]	@ (800ae54 <HAL_ADC_ConfigChannel+0x7b8>)
 800aca2:	428b      	cmp	r3, r1
 800aca4:	d016      	beq.n	800acd4 <HAL_ADC_ConfigChannel+0x638>
 800aca6:	683b      	ldr	r3, [r7, #0]
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	496b      	ldr	r1, [pc, #428]	@ (800ae58 <HAL_ADC_ConfigChannel+0x7bc>)
 800acac:	428b      	cmp	r3, r1
 800acae:	d00f      	beq.n	800acd0 <HAL_ADC_ConfigChannel+0x634>
 800acb0:	683b      	ldr	r3, [r7, #0]
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	4969      	ldr	r1, [pc, #420]	@ (800ae5c <HAL_ADC_ConfigChannel+0x7c0>)
 800acb6:	428b      	cmp	r3, r1
 800acb8:	d008      	beq.n	800accc <HAL_ADC_ConfigChannel+0x630>
 800acba:	683b      	ldr	r3, [r7, #0]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	4968      	ldr	r1, [pc, #416]	@ (800ae60 <HAL_ADC_ConfigChannel+0x7c4>)
 800acc0:	428b      	cmp	r3, r1
 800acc2:	d101      	bne.n	800acc8 <HAL_ADC_ConfigChannel+0x62c>
 800acc4:	4b67      	ldr	r3, [pc, #412]	@ (800ae64 <HAL_ADC_ConfigChannel+0x7c8>)
 800acc6:	e0a0      	b.n	800ae0a <HAL_ADC_ConfigChannel+0x76e>
 800acc8:	2300      	movs	r3, #0
 800acca:	e09e      	b.n	800ae0a <HAL_ADC_ConfigChannel+0x76e>
 800accc:	4b66      	ldr	r3, [pc, #408]	@ (800ae68 <HAL_ADC_ConfigChannel+0x7cc>)
 800acce:	e09c      	b.n	800ae0a <HAL_ADC_ConfigChannel+0x76e>
 800acd0:	4b66      	ldr	r3, [pc, #408]	@ (800ae6c <HAL_ADC_ConfigChannel+0x7d0>)
 800acd2:	e09a      	b.n	800ae0a <HAL_ADC_ConfigChannel+0x76e>
 800acd4:	4b60      	ldr	r3, [pc, #384]	@ (800ae58 <HAL_ADC_ConfigChannel+0x7bc>)
 800acd6:	e098      	b.n	800ae0a <HAL_ADC_ConfigChannel+0x76e>
 800acd8:	4b5e      	ldr	r3, [pc, #376]	@ (800ae54 <HAL_ADC_ConfigChannel+0x7b8>)
 800acda:	e096      	b.n	800ae0a <HAL_ADC_ConfigChannel+0x76e>
 800acdc:	4b64      	ldr	r3, [pc, #400]	@ (800ae70 <HAL_ADC_ConfigChannel+0x7d4>)
 800acde:	e094      	b.n	800ae0a <HAL_ADC_ConfigChannel+0x76e>
 800ace0:	4b64      	ldr	r3, [pc, #400]	@ (800ae74 <HAL_ADC_ConfigChannel+0x7d8>)
 800ace2:	e092      	b.n	800ae0a <HAL_ADC_ConfigChannel+0x76e>
 800ace4:	4b64      	ldr	r3, [pc, #400]	@ (800ae78 <HAL_ADC_ConfigChannel+0x7dc>)
 800ace6:	e090      	b.n	800ae0a <HAL_ADC_ConfigChannel+0x76e>
 800ace8:	4b64      	ldr	r3, [pc, #400]	@ (800ae7c <HAL_ADC_ConfigChannel+0x7e0>)
 800acea:	e08e      	b.n	800ae0a <HAL_ADC_ConfigChannel+0x76e>
 800acec:	2301      	movs	r3, #1
 800acee:	e08c      	b.n	800ae0a <HAL_ADC_ConfigChannel+0x76e>
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	4962      	ldr	r1, [pc, #392]	@ (800ae80 <HAL_ADC_ConfigChannel+0x7e4>)
 800acf6:	428b      	cmp	r3, r1
 800acf8:	d140      	bne.n	800ad7c <HAL_ADC_ConfigChannel+0x6e0>
 800acfa:	683b      	ldr	r3, [r7, #0]
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	494f      	ldr	r1, [pc, #316]	@ (800ae3c <HAL_ADC_ConfigChannel+0x7a0>)
 800ad00:	428b      	cmp	r3, r1
 800ad02:	d039      	beq.n	800ad78 <HAL_ADC_ConfigChannel+0x6dc>
 800ad04:	683b      	ldr	r3, [r7, #0]
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	494d      	ldr	r1, [pc, #308]	@ (800ae40 <HAL_ADC_ConfigChannel+0x7a4>)
 800ad0a:	428b      	cmp	r3, r1
 800ad0c:	d032      	beq.n	800ad74 <HAL_ADC_ConfigChannel+0x6d8>
 800ad0e:	683b      	ldr	r3, [r7, #0]
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	494c      	ldr	r1, [pc, #304]	@ (800ae44 <HAL_ADC_ConfigChannel+0x7a8>)
 800ad14:	428b      	cmp	r3, r1
 800ad16:	d02b      	beq.n	800ad70 <HAL_ADC_ConfigChannel+0x6d4>
 800ad18:	683b      	ldr	r3, [r7, #0]
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	494a      	ldr	r1, [pc, #296]	@ (800ae48 <HAL_ADC_ConfigChannel+0x7ac>)
 800ad1e:	428b      	cmp	r3, r1
 800ad20:	d024      	beq.n	800ad6c <HAL_ADC_ConfigChannel+0x6d0>
 800ad22:	683b      	ldr	r3, [r7, #0]
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	4949      	ldr	r1, [pc, #292]	@ (800ae4c <HAL_ADC_ConfigChannel+0x7b0>)
 800ad28:	428b      	cmp	r3, r1
 800ad2a:	d01d      	beq.n	800ad68 <HAL_ADC_ConfigChannel+0x6cc>
 800ad2c:	683b      	ldr	r3, [r7, #0]
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	4947      	ldr	r1, [pc, #284]	@ (800ae50 <HAL_ADC_ConfigChannel+0x7b4>)
 800ad32:	428b      	cmp	r3, r1
 800ad34:	d016      	beq.n	800ad64 <HAL_ADC_ConfigChannel+0x6c8>
 800ad36:	683b      	ldr	r3, [r7, #0]
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	4946      	ldr	r1, [pc, #280]	@ (800ae54 <HAL_ADC_ConfigChannel+0x7b8>)
 800ad3c:	428b      	cmp	r3, r1
 800ad3e:	d00f      	beq.n	800ad60 <HAL_ADC_ConfigChannel+0x6c4>
 800ad40:	683b      	ldr	r3, [r7, #0]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	4944      	ldr	r1, [pc, #272]	@ (800ae58 <HAL_ADC_ConfigChannel+0x7bc>)
 800ad46:	428b      	cmp	r3, r1
 800ad48:	d008      	beq.n	800ad5c <HAL_ADC_ConfigChannel+0x6c0>
 800ad4a:	683b      	ldr	r3, [r7, #0]
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	4944      	ldr	r1, [pc, #272]	@ (800ae60 <HAL_ADC_ConfigChannel+0x7c4>)
 800ad50:	428b      	cmp	r3, r1
 800ad52:	d101      	bne.n	800ad58 <HAL_ADC_ConfigChannel+0x6bc>
 800ad54:	4b43      	ldr	r3, [pc, #268]	@ (800ae64 <HAL_ADC_ConfigChannel+0x7c8>)
 800ad56:	e058      	b.n	800ae0a <HAL_ADC_ConfigChannel+0x76e>
 800ad58:	2300      	movs	r3, #0
 800ad5a:	e056      	b.n	800ae0a <HAL_ADC_ConfigChannel+0x76e>
 800ad5c:	4b43      	ldr	r3, [pc, #268]	@ (800ae6c <HAL_ADC_ConfigChannel+0x7d0>)
 800ad5e:	e054      	b.n	800ae0a <HAL_ADC_ConfigChannel+0x76e>
 800ad60:	4b3d      	ldr	r3, [pc, #244]	@ (800ae58 <HAL_ADC_ConfigChannel+0x7bc>)
 800ad62:	e052      	b.n	800ae0a <HAL_ADC_ConfigChannel+0x76e>
 800ad64:	4b3b      	ldr	r3, [pc, #236]	@ (800ae54 <HAL_ADC_ConfigChannel+0x7b8>)
 800ad66:	e050      	b.n	800ae0a <HAL_ADC_ConfigChannel+0x76e>
 800ad68:	4b41      	ldr	r3, [pc, #260]	@ (800ae70 <HAL_ADC_ConfigChannel+0x7d4>)
 800ad6a:	e04e      	b.n	800ae0a <HAL_ADC_ConfigChannel+0x76e>
 800ad6c:	4b41      	ldr	r3, [pc, #260]	@ (800ae74 <HAL_ADC_ConfigChannel+0x7d8>)
 800ad6e:	e04c      	b.n	800ae0a <HAL_ADC_ConfigChannel+0x76e>
 800ad70:	4b41      	ldr	r3, [pc, #260]	@ (800ae78 <HAL_ADC_ConfigChannel+0x7dc>)
 800ad72:	e04a      	b.n	800ae0a <HAL_ADC_ConfigChannel+0x76e>
 800ad74:	4b41      	ldr	r3, [pc, #260]	@ (800ae7c <HAL_ADC_ConfigChannel+0x7e0>)
 800ad76:	e048      	b.n	800ae0a <HAL_ADC_ConfigChannel+0x76e>
 800ad78:	2301      	movs	r3, #1
 800ad7a:	e046      	b.n	800ae0a <HAL_ADC_ConfigChannel+0x76e>
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	4940      	ldr	r1, [pc, #256]	@ (800ae84 <HAL_ADC_ConfigChannel+0x7e8>)
 800ad82:	428b      	cmp	r3, r1
 800ad84:	d140      	bne.n	800ae08 <HAL_ADC_ConfigChannel+0x76c>
 800ad86:	683b      	ldr	r3, [r7, #0]
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	492c      	ldr	r1, [pc, #176]	@ (800ae3c <HAL_ADC_ConfigChannel+0x7a0>)
 800ad8c:	428b      	cmp	r3, r1
 800ad8e:	d039      	beq.n	800ae04 <HAL_ADC_ConfigChannel+0x768>
 800ad90:	683b      	ldr	r3, [r7, #0]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	492a      	ldr	r1, [pc, #168]	@ (800ae40 <HAL_ADC_ConfigChannel+0x7a4>)
 800ad96:	428b      	cmp	r3, r1
 800ad98:	d032      	beq.n	800ae00 <HAL_ADC_ConfigChannel+0x764>
 800ad9a:	683b      	ldr	r3, [r7, #0]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	4929      	ldr	r1, [pc, #164]	@ (800ae44 <HAL_ADC_ConfigChannel+0x7a8>)
 800ada0:	428b      	cmp	r3, r1
 800ada2:	d02b      	beq.n	800adfc <HAL_ADC_ConfigChannel+0x760>
 800ada4:	683b      	ldr	r3, [r7, #0]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	4927      	ldr	r1, [pc, #156]	@ (800ae48 <HAL_ADC_ConfigChannel+0x7ac>)
 800adaa:	428b      	cmp	r3, r1
 800adac:	d024      	beq.n	800adf8 <HAL_ADC_ConfigChannel+0x75c>
 800adae:	683b      	ldr	r3, [r7, #0]
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	4926      	ldr	r1, [pc, #152]	@ (800ae4c <HAL_ADC_ConfigChannel+0x7b0>)
 800adb4:	428b      	cmp	r3, r1
 800adb6:	d01d      	beq.n	800adf4 <HAL_ADC_ConfigChannel+0x758>
 800adb8:	683b      	ldr	r3, [r7, #0]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	4924      	ldr	r1, [pc, #144]	@ (800ae50 <HAL_ADC_ConfigChannel+0x7b4>)
 800adbe:	428b      	cmp	r3, r1
 800adc0:	d016      	beq.n	800adf0 <HAL_ADC_ConfigChannel+0x754>
 800adc2:	683b      	ldr	r3, [r7, #0]
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	4923      	ldr	r1, [pc, #140]	@ (800ae54 <HAL_ADC_ConfigChannel+0x7b8>)
 800adc8:	428b      	cmp	r3, r1
 800adca:	d00f      	beq.n	800adec <HAL_ADC_ConfigChannel+0x750>
 800adcc:	683b      	ldr	r3, [r7, #0]
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	4926      	ldr	r1, [pc, #152]	@ (800ae6c <HAL_ADC_ConfigChannel+0x7d0>)
 800add2:	428b      	cmp	r3, r1
 800add4:	d008      	beq.n	800ade8 <HAL_ADC_ConfigChannel+0x74c>
 800add6:	683b      	ldr	r3, [r7, #0]
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	492b      	ldr	r1, [pc, #172]	@ (800ae88 <HAL_ADC_ConfigChannel+0x7ec>)
 800addc:	428b      	cmp	r3, r1
 800adde:	d101      	bne.n	800ade4 <HAL_ADC_ConfigChannel+0x748>
 800ade0:	4b2a      	ldr	r3, [pc, #168]	@ (800ae8c <HAL_ADC_ConfigChannel+0x7f0>)
 800ade2:	e012      	b.n	800ae0a <HAL_ADC_ConfigChannel+0x76e>
 800ade4:	2300      	movs	r3, #0
 800ade6:	e010      	b.n	800ae0a <HAL_ADC_ConfigChannel+0x76e>
 800ade8:	4b27      	ldr	r3, [pc, #156]	@ (800ae88 <HAL_ADC_ConfigChannel+0x7ec>)
 800adea:	e00e      	b.n	800ae0a <HAL_ADC_ConfigChannel+0x76e>
 800adec:	4b1a      	ldr	r3, [pc, #104]	@ (800ae58 <HAL_ADC_ConfigChannel+0x7bc>)
 800adee:	e00c      	b.n	800ae0a <HAL_ADC_ConfigChannel+0x76e>
 800adf0:	4b18      	ldr	r3, [pc, #96]	@ (800ae54 <HAL_ADC_ConfigChannel+0x7b8>)
 800adf2:	e00a      	b.n	800ae0a <HAL_ADC_ConfigChannel+0x76e>
 800adf4:	4b1e      	ldr	r3, [pc, #120]	@ (800ae70 <HAL_ADC_ConfigChannel+0x7d4>)
 800adf6:	e008      	b.n	800ae0a <HAL_ADC_ConfigChannel+0x76e>
 800adf8:	4b1e      	ldr	r3, [pc, #120]	@ (800ae74 <HAL_ADC_ConfigChannel+0x7d8>)
 800adfa:	e006      	b.n	800ae0a <HAL_ADC_ConfigChannel+0x76e>
 800adfc:	4b1e      	ldr	r3, [pc, #120]	@ (800ae78 <HAL_ADC_ConfigChannel+0x7dc>)
 800adfe:	e004      	b.n	800ae0a <HAL_ADC_ConfigChannel+0x76e>
 800ae00:	4b1e      	ldr	r3, [pc, #120]	@ (800ae7c <HAL_ADC_ConfigChannel+0x7e0>)
 800ae02:	e002      	b.n	800ae0a <HAL_ADC_ConfigChannel+0x76e>
 800ae04:	2301      	movs	r3, #1
 800ae06:	e000      	b.n	800ae0a <HAL_ADC_ConfigChannel+0x76e>
 800ae08:	2300      	movs	r3, #0
 800ae0a:	4619      	mov	r1, r3
 800ae0c:	4610      	mov	r0, r2
 800ae0e:	f7fe fc0d 	bl	800962c <LL_ADC_SetChannelPreselection>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800ae12:	683b      	ldr	r3, [r7, #0]
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	f280 80f6 	bge.w	800b008 <HAL_ADC_ConfigChannel+0x96c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	4a05      	ldr	r2, [pc, #20]	@ (800ae38 <HAL_ADC_ConfigChannel+0x79c>)
 800ae22:	4293      	cmp	r3, r2
 800ae24:	d004      	beq.n	800ae30 <HAL_ADC_ConfigChannel+0x794>
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	4a15      	ldr	r2, [pc, #84]	@ (800ae80 <HAL_ADC_ConfigChannel+0x7e4>)
 800ae2c:	4293      	cmp	r3, r2
 800ae2e:	d131      	bne.n	800ae94 <HAL_ADC_ConfigChannel+0x7f8>
 800ae30:	4b17      	ldr	r3, [pc, #92]	@ (800ae90 <HAL_ADC_ConfigChannel+0x7f4>)
 800ae32:	e030      	b.n	800ae96 <HAL_ADC_ConfigChannel+0x7fa>
 800ae34:	47ff0000 	.word	0x47ff0000
 800ae38:	40022000 	.word	0x40022000
 800ae3c:	04300002 	.word	0x04300002
 800ae40:	08600004 	.word	0x08600004
 800ae44:	0c900008 	.word	0x0c900008
 800ae48:	10c00010 	.word	0x10c00010
 800ae4c:	14f00020 	.word	0x14f00020
 800ae50:	2a000400 	.word	0x2a000400
 800ae54:	2e300800 	.word	0x2e300800
 800ae58:	32601000 	.word	0x32601000
 800ae5c:	43210000 	.word	0x43210000
 800ae60:	4b840000 	.word	0x4b840000
 800ae64:	4fb80000 	.word	0x4fb80000
 800ae68:	47520000 	.word	0x47520000
 800ae6c:	36902000 	.word	0x36902000
 800ae70:	25b00200 	.word	0x25b00200
 800ae74:	21800100 	.word	0x21800100
 800ae78:	1d500080 	.word	0x1d500080
 800ae7c:	19200040 	.word	0x19200040
 800ae80:	40022100 	.word	0x40022100
 800ae84:	58026000 	.word	0x58026000
 800ae88:	3ac04000 	.word	0x3ac04000
 800ae8c:	3ef08000 	.word	0x3ef08000
 800ae90:	40022300 	.word	0x40022300
 800ae94:	4b61      	ldr	r3, [pc, #388]	@ (800b01c <HAL_ADC_ConfigChannel+0x980>)
 800ae96:	4618      	mov	r0, r3
 800ae98:	f7fe fbba 	bl	8009610 <LL_ADC_GetCommonPathInternalCh>
 800ae9c:	67f8      	str	r0, [r7, #124]	@ 0x7c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	4a5f      	ldr	r2, [pc, #380]	@ (800b020 <HAL_ADC_ConfigChannel+0x984>)
 800aea4:	4293      	cmp	r3, r2
 800aea6:	d004      	beq.n	800aeb2 <HAL_ADC_ConfigChannel+0x816>
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	4a5d      	ldr	r2, [pc, #372]	@ (800b024 <HAL_ADC_ConfigChannel+0x988>)
 800aeae:	4293      	cmp	r3, r2
 800aeb0:	d10e      	bne.n	800aed0 <HAL_ADC_ConfigChannel+0x834>
 800aeb2:	485b      	ldr	r0, [pc, #364]	@ (800b020 <HAL_ADC_ConfigChannel+0x984>)
 800aeb4:	f7fe fe5e 	bl	8009b74 <LL_ADC_IsEnabled>
 800aeb8:	4604      	mov	r4, r0
 800aeba:	485a      	ldr	r0, [pc, #360]	@ (800b024 <HAL_ADC_ConfigChannel+0x988>)
 800aebc:	f7fe fe5a 	bl	8009b74 <LL_ADC_IsEnabled>
 800aec0:	4603      	mov	r3, r0
 800aec2:	4323      	orrs	r3, r4
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	bf0c      	ite	eq
 800aec8:	2301      	moveq	r3, #1
 800aeca:	2300      	movne	r3, #0
 800aecc:	b2db      	uxtb	r3, r3
 800aece:	e008      	b.n	800aee2 <HAL_ADC_ConfigChannel+0x846>
 800aed0:	4855      	ldr	r0, [pc, #340]	@ (800b028 <HAL_ADC_ConfigChannel+0x98c>)
 800aed2:	f7fe fe4f 	bl	8009b74 <LL_ADC_IsEnabled>
 800aed6:	4603      	mov	r3, r0
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	bf0c      	ite	eq
 800aedc:	2301      	moveq	r3, #1
 800aede:	2300      	movne	r3, #0
 800aee0:	b2db      	uxtb	r3, r3
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d07d      	beq.n	800afe2 <HAL_ADC_ConfigChannel+0x946>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800aee6:	683b      	ldr	r3, [r7, #0]
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	4a50      	ldr	r2, [pc, #320]	@ (800b02c <HAL_ADC_ConfigChannel+0x990>)
 800aeec:	4293      	cmp	r3, r2
 800aeee:	d130      	bne.n	800af52 <HAL_ADC_ConfigChannel+0x8b6>
 800aef0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800aef2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d12b      	bne.n	800af52 <HAL_ADC_ConfigChannel+0x8b6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	4a4a      	ldr	r2, [pc, #296]	@ (800b028 <HAL_ADC_ConfigChannel+0x98c>)
 800af00:	4293      	cmp	r3, r2
 800af02:	f040 8081 	bne.w	800b008 <HAL_ADC_ConfigChannel+0x96c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	4a45      	ldr	r2, [pc, #276]	@ (800b020 <HAL_ADC_ConfigChannel+0x984>)
 800af0c:	4293      	cmp	r3, r2
 800af0e:	d004      	beq.n	800af1a <HAL_ADC_ConfigChannel+0x87e>
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	4a43      	ldr	r2, [pc, #268]	@ (800b024 <HAL_ADC_ConfigChannel+0x988>)
 800af16:	4293      	cmp	r3, r2
 800af18:	d101      	bne.n	800af1e <HAL_ADC_ConfigChannel+0x882>
 800af1a:	4a45      	ldr	r2, [pc, #276]	@ (800b030 <HAL_ADC_ConfigChannel+0x994>)
 800af1c:	e000      	b.n	800af20 <HAL_ADC_ConfigChannel+0x884>
 800af1e:	4a3f      	ldr	r2, [pc, #252]	@ (800b01c <HAL_ADC_ConfigChannel+0x980>)
 800af20:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800af22:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800af26:	4619      	mov	r1, r3
 800af28:	4610      	mov	r0, r2
 800af2a:	f7fe fb5e 	bl	80095ea <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800af2e:	4b41      	ldr	r3, [pc, #260]	@ (800b034 <HAL_ADC_ConfigChannel+0x998>)
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	099b      	lsrs	r3, r3, #6
 800af34:	4a40      	ldr	r2, [pc, #256]	@ (800b038 <HAL_ADC_ConfigChannel+0x99c>)
 800af36:	fba2 2303 	umull	r2, r3, r2, r3
 800af3a:	099b      	lsrs	r3, r3, #6
 800af3c:	3301      	adds	r3, #1
 800af3e:	005b      	lsls	r3, r3, #1
 800af40:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 800af42:	e002      	b.n	800af4a <HAL_ADC_ConfigChannel+0x8ae>
              {
                wait_loop_index--;
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	3b01      	subs	r3, #1
 800af48:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d1f9      	bne.n	800af44 <HAL_ADC_ConfigChannel+0x8a8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800af50:	e05a      	b.n	800b008 <HAL_ADC_ConfigChannel+0x96c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800af52:	683b      	ldr	r3, [r7, #0]
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	4a39      	ldr	r2, [pc, #228]	@ (800b03c <HAL_ADC_ConfigChannel+0x9a0>)
 800af58:	4293      	cmp	r3, r2
 800af5a:	d11e      	bne.n	800af9a <HAL_ADC_ConfigChannel+0x8fe>
 800af5c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800af5e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800af62:	2b00      	cmp	r3, #0
 800af64:	d119      	bne.n	800af9a <HAL_ADC_ConfigChannel+0x8fe>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	4a2f      	ldr	r2, [pc, #188]	@ (800b028 <HAL_ADC_ConfigChannel+0x98c>)
 800af6c:	4293      	cmp	r3, r2
 800af6e:	d14b      	bne.n	800b008 <HAL_ADC_ConfigChannel+0x96c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	4a2a      	ldr	r2, [pc, #168]	@ (800b020 <HAL_ADC_ConfigChannel+0x984>)
 800af76:	4293      	cmp	r3, r2
 800af78:	d004      	beq.n	800af84 <HAL_ADC_ConfigChannel+0x8e8>
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	4a29      	ldr	r2, [pc, #164]	@ (800b024 <HAL_ADC_ConfigChannel+0x988>)
 800af80:	4293      	cmp	r3, r2
 800af82:	d101      	bne.n	800af88 <HAL_ADC_ConfigChannel+0x8ec>
 800af84:	4a2a      	ldr	r2, [pc, #168]	@ (800b030 <HAL_ADC_ConfigChannel+0x994>)
 800af86:	e000      	b.n	800af8a <HAL_ADC_ConfigChannel+0x8ee>
 800af88:	4a24      	ldr	r2, [pc, #144]	@ (800b01c <HAL_ADC_ConfigChannel+0x980>)
 800af8a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800af8c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800af90:	4619      	mov	r1, r3
 800af92:	4610      	mov	r0, r2
 800af94:	f7fe fb29 	bl	80095ea <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800af98:	e036      	b.n	800b008 <HAL_ADC_ConfigChannel+0x96c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800af9a:	683b      	ldr	r3, [r7, #0]
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	4a28      	ldr	r2, [pc, #160]	@ (800b040 <HAL_ADC_ConfigChannel+0x9a4>)
 800afa0:	4293      	cmp	r3, r2
 800afa2:	d131      	bne.n	800b008 <HAL_ADC_ConfigChannel+0x96c>
 800afa4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800afa6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d12c      	bne.n	800b008 <HAL_ADC_ConfigChannel+0x96c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	4a1d      	ldr	r2, [pc, #116]	@ (800b028 <HAL_ADC_ConfigChannel+0x98c>)
 800afb4:	4293      	cmp	r3, r2
 800afb6:	d127      	bne.n	800b008 <HAL_ADC_ConfigChannel+0x96c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	4a18      	ldr	r2, [pc, #96]	@ (800b020 <HAL_ADC_ConfigChannel+0x984>)
 800afbe:	4293      	cmp	r3, r2
 800afc0:	d004      	beq.n	800afcc <HAL_ADC_ConfigChannel+0x930>
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	4a17      	ldr	r2, [pc, #92]	@ (800b024 <HAL_ADC_ConfigChannel+0x988>)
 800afc8:	4293      	cmp	r3, r2
 800afca:	d101      	bne.n	800afd0 <HAL_ADC_ConfigChannel+0x934>
 800afcc:	4a18      	ldr	r2, [pc, #96]	@ (800b030 <HAL_ADC_ConfigChannel+0x994>)
 800afce:	e000      	b.n	800afd2 <HAL_ADC_ConfigChannel+0x936>
 800afd0:	4a12      	ldr	r2, [pc, #72]	@ (800b01c <HAL_ADC_ConfigChannel+0x980>)
 800afd2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800afd4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800afd8:	4619      	mov	r1, r3
 800afda:	4610      	mov	r0, r2
 800afdc:	f7fe fb05 	bl	80095ea <LL_ADC_SetCommonPathInternalCh>
 800afe0:	e012      	b.n	800b008 <HAL_ADC_ConfigChannel+0x96c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800afe6:	f043 0220 	orr.w	r2, r3, #32
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	661a      	str	r2, [r3, #96]	@ 0x60

          tmp_hal_status = HAL_ERROR;
 800afee:	2301      	movs	r3, #1
 800aff0:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 800aff4:	e008      	b.n	800b008 <HAL_ADC_ConfigChannel+0x96c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800affa:	f043 0220 	orr.w	r2, r3, #32
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800b002:	2301      	movs	r3, #1
 800b004:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	2200      	movs	r2, #0
 800b00c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 800b010:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
}
 800b014:	4618      	mov	r0, r3
 800b016:	3794      	adds	r7, #148	@ 0x94
 800b018:	46bd      	mov	sp, r7
 800b01a:	bd90      	pop	{r4, r7, pc}
 800b01c:	58026300 	.word	0x58026300
 800b020:	40022000 	.word	0x40022000
 800b024:	40022100 	.word	0x40022100
 800b028:	58026000 	.word	0x58026000
 800b02c:	c7520000 	.word	0xc7520000
 800b030:	40022300 	.word	0x40022300
 800b034:	24000008 	.word	0x24000008
 800b038:	053e2d63 	.word	0x053e2d63
 800b03c:	c3210000 	.word	0xc3210000
 800b040:	cb840000 	.word	0xcb840000

0800b044 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800b044:	b580      	push	{r7, lr}
 800b046:	b084      	sub	sp, #16
 800b048:	af00      	add	r7, sp, #0
 800b04a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	4618      	mov	r0, r3
 800b052:	f7fe fd8f 	bl	8009b74 <LL_ADC_IsEnabled>
 800b056:	4603      	mov	r3, r0
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d16e      	bne.n	800b13a <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	689a      	ldr	r2, [r3, #8]
 800b062:	4b38      	ldr	r3, [pc, #224]	@ (800b144 <ADC_Enable+0x100>)
 800b064:	4013      	ands	r3, r2
 800b066:	2b00      	cmp	r3, #0
 800b068:	d00d      	beq.n	800b086 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b06e:	f043 0210 	orr.w	r2, r3, #16
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b07a:	f043 0201 	orr.w	r2, r3, #1
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	665a      	str	r2, [r3, #100]	@ 0x64

      return HAL_ERROR;
 800b082:	2301      	movs	r3, #1
 800b084:	e05a      	b.n	800b13c <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	4618      	mov	r0, r3
 800b08c:	f7fe fd5e 	bl	8009b4c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800b090:	f7fe fa68 	bl	8009564 <HAL_GetTick>
 800b094:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	4a2b      	ldr	r2, [pc, #172]	@ (800b148 <ADC_Enable+0x104>)
 800b09c:	4293      	cmp	r3, r2
 800b09e:	d004      	beq.n	800b0aa <ADC_Enable+0x66>
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	4a29      	ldr	r2, [pc, #164]	@ (800b14c <ADC_Enable+0x108>)
 800b0a6:	4293      	cmp	r3, r2
 800b0a8:	d101      	bne.n	800b0ae <ADC_Enable+0x6a>
 800b0aa:	4b29      	ldr	r3, [pc, #164]	@ (800b150 <ADC_Enable+0x10c>)
 800b0ac:	e000      	b.n	800b0b0 <ADC_Enable+0x6c>
 800b0ae:	4b29      	ldr	r3, [pc, #164]	@ (800b154 <ADC_Enable+0x110>)
 800b0b0:	4618      	mov	r0, r3
 800b0b2:	f7fe fce1 	bl	8009a78 <LL_ADC_GetMultimode>
 800b0b6:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	4a23      	ldr	r2, [pc, #140]	@ (800b14c <ADC_Enable+0x108>)
 800b0be:	4293      	cmp	r3, r2
 800b0c0:	d002      	beq.n	800b0c8 <ADC_Enable+0x84>
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	e000      	b.n	800b0ca <ADC_Enable+0x86>
 800b0c8:	4b1f      	ldr	r3, [pc, #124]	@ (800b148 <ADC_Enable+0x104>)
 800b0ca:	687a      	ldr	r2, [r7, #4]
 800b0cc:	6812      	ldr	r2, [r2, #0]
 800b0ce:	4293      	cmp	r3, r2
 800b0d0:	d02c      	beq.n	800b12c <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800b0d2:	68bb      	ldr	r3, [r7, #8]
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d130      	bne.n	800b13a <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800b0d8:	e028      	b.n	800b12c <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	4618      	mov	r0, r3
 800b0e0:	f7fe fd48 	bl	8009b74 <LL_ADC_IsEnabled>
 800b0e4:	4603      	mov	r3, r0
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d104      	bne.n	800b0f4 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	4618      	mov	r0, r3
 800b0f0:	f7fe fd2c 	bl	8009b4c <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800b0f4:	f7fe fa36 	bl	8009564 <HAL_GetTick>
 800b0f8:	4602      	mov	r2, r0
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	1ad3      	subs	r3, r2, r3
 800b0fe:	2b02      	cmp	r3, #2
 800b100:	d914      	bls.n	800b12c <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	f003 0301 	and.w	r3, r3, #1
 800b10c:	2b01      	cmp	r3, #1
 800b10e:	d00d      	beq.n	800b12c <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b114:	f043 0210 	orr.w	r2, r3, #16
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b120:	f043 0201 	orr.w	r2, r3, #1
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	665a      	str	r2, [r3, #100]	@ 0x64

            return HAL_ERROR;
 800b128:	2301      	movs	r3, #1
 800b12a:	e007      	b.n	800b13c <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	f003 0301 	and.w	r3, r3, #1
 800b136:	2b01      	cmp	r3, #1
 800b138:	d1cf      	bne.n	800b0da <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800b13a:	2300      	movs	r3, #0
}
 800b13c:	4618      	mov	r0, r3
 800b13e:	3710      	adds	r7, #16
 800b140:	46bd      	mov	sp, r7
 800b142:	bd80      	pop	{r7, pc}
 800b144:	8000003f 	.word	0x8000003f
 800b148:	40022000 	.word	0x40022000
 800b14c:	40022100 	.word	0x40022100
 800b150:	40022300 	.word	0x40022300
 800b154:	58026300 	.word	0x58026300

0800b158 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800b158:	b580      	push	{r7, lr}
 800b15a:	b084      	sub	sp, #16
 800b15c:	af00      	add	r7, sp, #0
 800b15e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b164:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b16a:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d14b      	bne.n	800b20a <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b176:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	f003 0308 	and.w	r3, r3, #8
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d021      	beq.n	800b1d0 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	4618      	mov	r0, r3
 800b192:	f7fe fb77 	bl	8009884 <LL_ADC_REG_IsTriggerSourceSWStart>
 800b196:	4603      	mov	r3, r0
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d032      	beq.n	800b202 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	68db      	ldr	r3, [r3, #12]
 800b1a2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d12b      	bne.n	800b202 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b1ae:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	661a      	str	r2, [r3, #96]	@ 0x60
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b1ba:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d11f      	bne.n	800b202 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b1c6:	f043 0201 	orr.w	r2, r3, #1
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	661a      	str	r2, [r3, #96]	@ 0x60
 800b1ce:	e018      	b.n	800b202 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	68db      	ldr	r3, [r3, #12]
 800b1d6:	f003 0303 	and.w	r3, r3, #3
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d111      	bne.n	800b202 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b1e2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	661a      	str	r2, [r3, #96]	@ 0x60
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b1ee:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d105      	bne.n	800b202 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b1fa:	f043 0201 	orr.w	r2, r3, #1
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800b202:	68f8      	ldr	r0, [r7, #12]
 800b204:	f7ff fa22 	bl	800a64c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800b208:	e00e      	b.n	800b228 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b20e:	f003 0310 	and.w	r3, r3, #16
 800b212:	2b00      	cmp	r3, #0
 800b214:	d003      	beq.n	800b21e <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800b216:	68f8      	ldr	r0, [r7, #12]
 800b218:	f7ff fa36 	bl	800a688 <HAL_ADC_ErrorCallback>
}
 800b21c:	e004      	b.n	800b228 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b222:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b224:	6878      	ldr	r0, [r7, #4]
 800b226:	4798      	blx	r3
}
 800b228:	bf00      	nop
 800b22a:	3710      	adds	r7, #16
 800b22c:	46bd      	mov	sp, r7
 800b22e:	bd80      	pop	{r7, pc}

0800b230 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800b230:	b580      	push	{r7, lr}
 800b232:	b084      	sub	sp, #16
 800b234:	af00      	add	r7, sp, #0
 800b236:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b23c:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800b23e:	68f8      	ldr	r0, [r7, #12]
 800b240:	f7ff fa0e 	bl	800a660 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800b244:	bf00      	nop
 800b246:	3710      	adds	r7, #16
 800b248:	46bd      	mov	sp, r7
 800b24a:	bd80      	pop	{r7, pc}

0800b24c <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800b24c:	b580      	push	{r7, lr}
 800b24e:	b084      	sub	sp, #16
 800b250:	af00      	add	r7, sp, #0
 800b252:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b258:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b25e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b26a:	f043 0204 	orr.w	r2, r3, #4
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800b272:	68f8      	ldr	r0, [r7, #12]
 800b274:	f7ff fa08 	bl	800a688 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800b278:	bf00      	nop
 800b27a:	3710      	adds	r7, #16
 800b27c:	46bd      	mov	sp, r7
 800b27e:	bd80      	pop	{r7, pc}

0800b280 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 800b280:	b580      	push	{r7, lr}
 800b282:	b084      	sub	sp, #16
 800b284:	af00      	add	r7, sp, #0
 800b286:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	4a6c      	ldr	r2, [pc, #432]	@ (800b440 <ADC_ConfigureBoostMode+0x1c0>)
 800b28e:	4293      	cmp	r3, r2
 800b290:	d004      	beq.n	800b29c <ADC_ConfigureBoostMode+0x1c>
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	4a6b      	ldr	r2, [pc, #428]	@ (800b444 <ADC_ConfigureBoostMode+0x1c4>)
 800b298:	4293      	cmp	r3, r2
 800b29a:	d109      	bne.n	800b2b0 <ADC_ConfigureBoostMode+0x30>
 800b29c:	4b6a      	ldr	r3, [pc, #424]	@ (800b448 <ADC_ConfigureBoostMode+0x1c8>)
 800b29e:	689b      	ldr	r3, [r3, #8]
 800b2a0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	bf14      	ite	ne
 800b2a8:	2301      	movne	r3, #1
 800b2aa:	2300      	moveq	r3, #0
 800b2ac:	b2db      	uxtb	r3, r3
 800b2ae:	e008      	b.n	800b2c2 <ADC_ConfigureBoostMode+0x42>
 800b2b0:	4b66      	ldr	r3, [pc, #408]	@ (800b44c <ADC_ConfigureBoostMode+0x1cc>)
 800b2b2:	689b      	ldr	r3, [r3, #8]
 800b2b4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	bf14      	ite	ne
 800b2bc:	2301      	movne	r3, #1
 800b2be:	2300      	moveq	r3, #0
 800b2c0:	b2db      	uxtb	r3, r3
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d01c      	beq.n	800b300 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800b2c6:	f006 fe8b 	bl	8011fe0 <HAL_RCC_GetHCLKFreq>
 800b2ca:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	685b      	ldr	r3, [r3, #4]
 800b2d0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b2d4:	d010      	beq.n	800b2f8 <ADC_ConfigureBoostMode+0x78>
 800b2d6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b2da:	d873      	bhi.n	800b3c4 <ADC_ConfigureBoostMode+0x144>
 800b2dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b2e0:	d002      	beq.n	800b2e8 <ADC_ConfigureBoostMode+0x68>
 800b2e2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b2e6:	d16d      	bne.n	800b3c4 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	685b      	ldr	r3, [r3, #4]
 800b2ec:	0c1b      	lsrs	r3, r3, #16
 800b2ee:	68fa      	ldr	r2, [r7, #12]
 800b2f0:	fbb2 f3f3 	udiv	r3, r2, r3
 800b2f4:	60fb      	str	r3, [r7, #12]
        break;
 800b2f6:	e068      	b.n	800b3ca <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	089b      	lsrs	r3, r3, #2
 800b2fc:	60fb      	str	r3, [r7, #12]
        break;
 800b2fe:	e064      	b.n	800b3ca <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 800b300:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800b304:	f04f 0100 	mov.w	r1, #0
 800b308:	f008 f866 	bl	80133d8 <HAL_RCCEx_GetPeriphCLKFreq>
 800b30c:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	685b      	ldr	r3, [r3, #4]
 800b312:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 800b316:	d051      	beq.n	800b3bc <ADC_ConfigureBoostMode+0x13c>
 800b318:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 800b31c:	d854      	bhi.n	800b3c8 <ADC_ConfigureBoostMode+0x148>
 800b31e:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 800b322:	d047      	beq.n	800b3b4 <ADC_ConfigureBoostMode+0x134>
 800b324:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 800b328:	d84e      	bhi.n	800b3c8 <ADC_ConfigureBoostMode+0x148>
 800b32a:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 800b32e:	d03d      	beq.n	800b3ac <ADC_ConfigureBoostMode+0x12c>
 800b330:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 800b334:	d848      	bhi.n	800b3c8 <ADC_ConfigureBoostMode+0x148>
 800b336:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b33a:	d033      	beq.n	800b3a4 <ADC_ConfigureBoostMode+0x124>
 800b33c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b340:	d842      	bhi.n	800b3c8 <ADC_ConfigureBoostMode+0x148>
 800b342:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 800b346:	d029      	beq.n	800b39c <ADC_ConfigureBoostMode+0x11c>
 800b348:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 800b34c:	d83c      	bhi.n	800b3c8 <ADC_ConfigureBoostMode+0x148>
 800b34e:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800b352:	d01a      	beq.n	800b38a <ADC_ConfigureBoostMode+0x10a>
 800b354:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800b358:	d836      	bhi.n	800b3c8 <ADC_ConfigureBoostMode+0x148>
 800b35a:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800b35e:	d014      	beq.n	800b38a <ADC_ConfigureBoostMode+0x10a>
 800b360:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800b364:	d830      	bhi.n	800b3c8 <ADC_ConfigureBoostMode+0x148>
 800b366:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b36a:	d00e      	beq.n	800b38a <ADC_ConfigureBoostMode+0x10a>
 800b36c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b370:	d82a      	bhi.n	800b3c8 <ADC_ConfigureBoostMode+0x148>
 800b372:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800b376:	d008      	beq.n	800b38a <ADC_ConfigureBoostMode+0x10a>
 800b378:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800b37c:	d824      	bhi.n	800b3c8 <ADC_ConfigureBoostMode+0x148>
 800b37e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b382:	d002      	beq.n	800b38a <ADC_ConfigureBoostMode+0x10a>
 800b384:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800b388:	d11e      	bne.n	800b3c8 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	685b      	ldr	r3, [r3, #4]
 800b38e:	0c9b      	lsrs	r3, r3, #18
 800b390:	005b      	lsls	r3, r3, #1
 800b392:	68fa      	ldr	r2, [r7, #12]
 800b394:	fbb2 f3f3 	udiv	r3, r2, r3
 800b398:	60fb      	str	r3, [r7, #12]
        break;
 800b39a:	e016      	b.n	800b3ca <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	091b      	lsrs	r3, r3, #4
 800b3a0:	60fb      	str	r3, [r7, #12]
        break;
 800b3a2:	e012      	b.n	800b3ca <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	095b      	lsrs	r3, r3, #5
 800b3a8:	60fb      	str	r3, [r7, #12]
        break;
 800b3aa:	e00e      	b.n	800b3ca <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	099b      	lsrs	r3, r3, #6
 800b3b0:	60fb      	str	r3, [r7, #12]
        break;
 800b3b2:	e00a      	b.n	800b3ca <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	09db      	lsrs	r3, r3, #7
 800b3b8:	60fb      	str	r3, [r7, #12]
        break;
 800b3ba:	e006      	b.n	800b3ca <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	0a1b      	lsrs	r3, r3, #8
 800b3c0:	60fb      	str	r3, [r7, #12]
        break;
 800b3c2:	e002      	b.n	800b3ca <ADC_ConfigureBoostMode+0x14a>
        break;
 800b3c4:	bf00      	nop
 800b3c6:	e000      	b.n	800b3ca <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 800b3c8:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	085b      	lsrs	r3, r3, #1
 800b3ce:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	4a1f      	ldr	r2, [pc, #124]	@ (800b450 <ADC_ConfigureBoostMode+0x1d0>)
 800b3d4:	4293      	cmp	r3, r2
 800b3d6:	d808      	bhi.n	800b3ea <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	689a      	ldr	r2, [r3, #8]
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800b3e6:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 800b3e8:	e025      	b.n	800b436 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	4a19      	ldr	r2, [pc, #100]	@ (800b454 <ADC_ConfigureBoostMode+0x1d4>)
 800b3ee:	4293      	cmp	r3, r2
 800b3f0:	d80a      	bhi.n	800b408 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	689b      	ldr	r3, [r3, #8]
 800b3f8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b404:	609a      	str	r2, [r3, #8]
}
 800b406:	e016      	b.n	800b436 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	4a13      	ldr	r2, [pc, #76]	@ (800b458 <ADC_ConfigureBoostMode+0x1d8>)
 800b40c:	4293      	cmp	r3, r2
 800b40e:	d80a      	bhi.n	800b426 <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	689b      	ldr	r3, [r3, #8]
 800b416:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b422:	609a      	str	r2, [r3, #8]
}
 800b424:	e007      	b.n	800b436 <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	689a      	ldr	r2, [r3, #8]
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 800b434:	609a      	str	r2, [r3, #8]
}
 800b436:	bf00      	nop
 800b438:	3710      	adds	r7, #16
 800b43a:	46bd      	mov	sp, r7
 800b43c:	bd80      	pop	{r7, pc}
 800b43e:	bf00      	nop
 800b440:	40022000 	.word	0x40022000
 800b444:	40022100 	.word	0x40022100
 800b448:	40022300 	.word	0x40022300
 800b44c:	58026300 	.word	0x58026300
 800b450:	005f5e10 	.word	0x005f5e10
 800b454:	00bebc20 	.word	0x00bebc20
 800b458:	017d7840 	.word	0x017d7840

0800b45c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800b45c:	b480      	push	{r7}
 800b45e:	b083      	sub	sp, #12
 800b460:	af00      	add	r7, sp, #0
 800b462:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 800b464:	bf00      	nop
 800b466:	370c      	adds	r7, #12
 800b468:	46bd      	mov	sp, r7
 800b46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b46e:	4770      	bx	lr

0800b470 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 800b470:	b480      	push	{r7}
 800b472:	b083      	sub	sp, #12
 800b474:	af00      	add	r7, sp, #0
 800b476:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 800b478:	bf00      	nop
 800b47a:	370c      	adds	r7, #12
 800b47c:	46bd      	mov	sp, r7
 800b47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b482:	4770      	bx	lr

0800b484 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 800b484:	b480      	push	{r7}
 800b486:	b083      	sub	sp, #12
 800b488:	af00      	add	r7, sp, #0
 800b48a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 800b48c:	bf00      	nop
 800b48e:	370c      	adds	r7, #12
 800b490:	46bd      	mov	sp, r7
 800b492:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b496:	4770      	bx	lr

0800b498 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 800b498:	b480      	push	{r7}
 800b49a:	b083      	sub	sp, #12
 800b49c:	af00      	add	r7, sp, #0
 800b49e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 800b4a0:	bf00      	nop
 800b4a2:	370c      	adds	r7, #12
 800b4a4:	46bd      	mov	sp, r7
 800b4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4aa:	4770      	bx	lr

0800b4ac <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 800b4ac:	b480      	push	{r7}
 800b4ae:	b083      	sub	sp, #12
 800b4b0:	af00      	add	r7, sp, #0
 800b4b2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 800b4b4:	bf00      	nop
 800b4b6:	370c      	adds	r7, #12
 800b4b8:	46bd      	mov	sp, r7
 800b4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4be:	4770      	bx	lr

0800b4c0 <__NVIC_SetPriorityGrouping>:
{
 800b4c0:	b480      	push	{r7}
 800b4c2:	b085      	sub	sp, #20
 800b4c4:	af00      	add	r7, sp, #0
 800b4c6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	f003 0307 	and.w	r3, r3, #7
 800b4ce:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800b4d0:	4b0b      	ldr	r3, [pc, #44]	@ (800b500 <__NVIC_SetPriorityGrouping+0x40>)
 800b4d2:	68db      	ldr	r3, [r3, #12]
 800b4d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800b4d6:	68ba      	ldr	r2, [r7, #8]
 800b4d8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800b4dc:	4013      	ands	r3, r2
 800b4de:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800b4e4:	68bb      	ldr	r3, [r7, #8]
 800b4e6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800b4e8:	4b06      	ldr	r3, [pc, #24]	@ (800b504 <__NVIC_SetPriorityGrouping+0x44>)
 800b4ea:	4313      	orrs	r3, r2
 800b4ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800b4ee:	4a04      	ldr	r2, [pc, #16]	@ (800b500 <__NVIC_SetPriorityGrouping+0x40>)
 800b4f0:	68bb      	ldr	r3, [r7, #8]
 800b4f2:	60d3      	str	r3, [r2, #12]
}
 800b4f4:	bf00      	nop
 800b4f6:	3714      	adds	r7, #20
 800b4f8:	46bd      	mov	sp, r7
 800b4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4fe:	4770      	bx	lr
 800b500:	e000ed00 	.word	0xe000ed00
 800b504:	05fa0000 	.word	0x05fa0000

0800b508 <__NVIC_GetPriorityGrouping>:
{
 800b508:	b480      	push	{r7}
 800b50a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800b50c:	4b04      	ldr	r3, [pc, #16]	@ (800b520 <__NVIC_GetPriorityGrouping+0x18>)
 800b50e:	68db      	ldr	r3, [r3, #12]
 800b510:	0a1b      	lsrs	r3, r3, #8
 800b512:	f003 0307 	and.w	r3, r3, #7
}
 800b516:	4618      	mov	r0, r3
 800b518:	46bd      	mov	sp, r7
 800b51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b51e:	4770      	bx	lr
 800b520:	e000ed00 	.word	0xe000ed00

0800b524 <__NVIC_EnableIRQ>:
{
 800b524:	b480      	push	{r7}
 800b526:	b083      	sub	sp, #12
 800b528:	af00      	add	r7, sp, #0
 800b52a:	4603      	mov	r3, r0
 800b52c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800b52e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b532:	2b00      	cmp	r3, #0
 800b534:	db0b      	blt.n	800b54e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800b536:	88fb      	ldrh	r3, [r7, #6]
 800b538:	f003 021f 	and.w	r2, r3, #31
 800b53c:	4907      	ldr	r1, [pc, #28]	@ (800b55c <__NVIC_EnableIRQ+0x38>)
 800b53e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b542:	095b      	lsrs	r3, r3, #5
 800b544:	2001      	movs	r0, #1
 800b546:	fa00 f202 	lsl.w	r2, r0, r2
 800b54a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800b54e:	bf00      	nop
 800b550:	370c      	adds	r7, #12
 800b552:	46bd      	mov	sp, r7
 800b554:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b558:	4770      	bx	lr
 800b55a:	bf00      	nop
 800b55c:	e000e100 	.word	0xe000e100

0800b560 <__NVIC_SetPriority>:
{
 800b560:	b480      	push	{r7}
 800b562:	b083      	sub	sp, #12
 800b564:	af00      	add	r7, sp, #0
 800b566:	4603      	mov	r3, r0
 800b568:	6039      	str	r1, [r7, #0]
 800b56a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800b56c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b570:	2b00      	cmp	r3, #0
 800b572:	db0a      	blt.n	800b58a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b574:	683b      	ldr	r3, [r7, #0]
 800b576:	b2da      	uxtb	r2, r3
 800b578:	490c      	ldr	r1, [pc, #48]	@ (800b5ac <__NVIC_SetPriority+0x4c>)
 800b57a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b57e:	0112      	lsls	r2, r2, #4
 800b580:	b2d2      	uxtb	r2, r2
 800b582:	440b      	add	r3, r1
 800b584:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800b588:	e00a      	b.n	800b5a0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b58a:	683b      	ldr	r3, [r7, #0]
 800b58c:	b2da      	uxtb	r2, r3
 800b58e:	4908      	ldr	r1, [pc, #32]	@ (800b5b0 <__NVIC_SetPriority+0x50>)
 800b590:	88fb      	ldrh	r3, [r7, #6]
 800b592:	f003 030f 	and.w	r3, r3, #15
 800b596:	3b04      	subs	r3, #4
 800b598:	0112      	lsls	r2, r2, #4
 800b59a:	b2d2      	uxtb	r2, r2
 800b59c:	440b      	add	r3, r1
 800b59e:	761a      	strb	r2, [r3, #24]
}
 800b5a0:	bf00      	nop
 800b5a2:	370c      	adds	r7, #12
 800b5a4:	46bd      	mov	sp, r7
 800b5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5aa:	4770      	bx	lr
 800b5ac:	e000e100 	.word	0xe000e100
 800b5b0:	e000ed00 	.word	0xe000ed00

0800b5b4 <NVIC_EncodePriority>:
{
 800b5b4:	b480      	push	{r7}
 800b5b6:	b089      	sub	sp, #36	@ 0x24
 800b5b8:	af00      	add	r7, sp, #0
 800b5ba:	60f8      	str	r0, [r7, #12]
 800b5bc:	60b9      	str	r1, [r7, #8]
 800b5be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	f003 0307 	and.w	r3, r3, #7
 800b5c6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800b5c8:	69fb      	ldr	r3, [r7, #28]
 800b5ca:	f1c3 0307 	rsb	r3, r3, #7
 800b5ce:	2b04      	cmp	r3, #4
 800b5d0:	bf28      	it	cs
 800b5d2:	2304      	movcs	r3, #4
 800b5d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800b5d6:	69fb      	ldr	r3, [r7, #28]
 800b5d8:	3304      	adds	r3, #4
 800b5da:	2b06      	cmp	r3, #6
 800b5dc:	d902      	bls.n	800b5e4 <NVIC_EncodePriority+0x30>
 800b5de:	69fb      	ldr	r3, [r7, #28]
 800b5e0:	3b03      	subs	r3, #3
 800b5e2:	e000      	b.n	800b5e6 <NVIC_EncodePriority+0x32>
 800b5e4:	2300      	movs	r3, #0
 800b5e6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b5e8:	f04f 32ff 	mov.w	r2, #4294967295
 800b5ec:	69bb      	ldr	r3, [r7, #24]
 800b5ee:	fa02 f303 	lsl.w	r3, r2, r3
 800b5f2:	43da      	mvns	r2, r3
 800b5f4:	68bb      	ldr	r3, [r7, #8]
 800b5f6:	401a      	ands	r2, r3
 800b5f8:	697b      	ldr	r3, [r7, #20]
 800b5fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800b5fc:	f04f 31ff 	mov.w	r1, #4294967295
 800b600:	697b      	ldr	r3, [r7, #20]
 800b602:	fa01 f303 	lsl.w	r3, r1, r3
 800b606:	43d9      	mvns	r1, r3
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b60c:	4313      	orrs	r3, r2
}
 800b60e:	4618      	mov	r0, r3
 800b610:	3724      	adds	r7, #36	@ 0x24
 800b612:	46bd      	mov	sp, r7
 800b614:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b618:	4770      	bx	lr
	...

0800b61c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800b61c:	b580      	push	{r7, lr}
 800b61e:	b082      	sub	sp, #8
 800b620:	af00      	add	r7, sp, #0
 800b622:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	3b01      	subs	r3, #1
 800b628:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b62c:	d301      	bcc.n	800b632 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800b62e:	2301      	movs	r3, #1
 800b630:	e00f      	b.n	800b652 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800b632:	4a0a      	ldr	r2, [pc, #40]	@ (800b65c <SysTick_Config+0x40>)
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	3b01      	subs	r3, #1
 800b638:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800b63a:	210f      	movs	r1, #15
 800b63c:	f04f 30ff 	mov.w	r0, #4294967295
 800b640:	f7ff ff8e 	bl	800b560 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800b644:	4b05      	ldr	r3, [pc, #20]	@ (800b65c <SysTick_Config+0x40>)
 800b646:	2200      	movs	r2, #0
 800b648:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800b64a:	4b04      	ldr	r3, [pc, #16]	@ (800b65c <SysTick_Config+0x40>)
 800b64c:	2207      	movs	r2, #7
 800b64e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800b650:	2300      	movs	r3, #0
}
 800b652:	4618      	mov	r0, r3
 800b654:	3708      	adds	r7, #8
 800b656:	46bd      	mov	sp, r7
 800b658:	bd80      	pop	{r7, pc}
 800b65a:	bf00      	nop
 800b65c:	e000e010 	.word	0xe000e010

0800b660 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800b660:	b580      	push	{r7, lr}
 800b662:	b082      	sub	sp, #8
 800b664:	af00      	add	r7, sp, #0
 800b666:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800b668:	6878      	ldr	r0, [r7, #4]
 800b66a:	f7ff ff29 	bl	800b4c0 <__NVIC_SetPriorityGrouping>
}
 800b66e:	bf00      	nop
 800b670:	3708      	adds	r7, #8
 800b672:	46bd      	mov	sp, r7
 800b674:	bd80      	pop	{r7, pc}

0800b676 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800b676:	b580      	push	{r7, lr}
 800b678:	b086      	sub	sp, #24
 800b67a:	af00      	add	r7, sp, #0
 800b67c:	4603      	mov	r3, r0
 800b67e:	60b9      	str	r1, [r7, #8]
 800b680:	607a      	str	r2, [r7, #4]
 800b682:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800b684:	f7ff ff40 	bl	800b508 <__NVIC_GetPriorityGrouping>
 800b688:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800b68a:	687a      	ldr	r2, [r7, #4]
 800b68c:	68b9      	ldr	r1, [r7, #8]
 800b68e:	6978      	ldr	r0, [r7, #20]
 800b690:	f7ff ff90 	bl	800b5b4 <NVIC_EncodePriority>
 800b694:	4602      	mov	r2, r0
 800b696:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800b69a:	4611      	mov	r1, r2
 800b69c:	4618      	mov	r0, r3
 800b69e:	f7ff ff5f 	bl	800b560 <__NVIC_SetPriority>
}
 800b6a2:	bf00      	nop
 800b6a4:	3718      	adds	r7, #24
 800b6a6:	46bd      	mov	sp, r7
 800b6a8:	bd80      	pop	{r7, pc}

0800b6aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b6aa:	b580      	push	{r7, lr}
 800b6ac:	b082      	sub	sp, #8
 800b6ae:	af00      	add	r7, sp, #0
 800b6b0:	4603      	mov	r3, r0
 800b6b2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800b6b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b6b8:	4618      	mov	r0, r3
 800b6ba:	f7ff ff33 	bl	800b524 <__NVIC_EnableIRQ>
}
 800b6be:	bf00      	nop
 800b6c0:	3708      	adds	r7, #8
 800b6c2:	46bd      	mov	sp, r7
 800b6c4:	bd80      	pop	{r7, pc}

0800b6c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800b6c6:	b580      	push	{r7, lr}
 800b6c8:	b082      	sub	sp, #8
 800b6ca:	af00      	add	r7, sp, #0
 800b6cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800b6ce:	6878      	ldr	r0, [r7, #4]
 800b6d0:	f7ff ffa4 	bl	800b61c <SysTick_Config>
 800b6d4:	4603      	mov	r3, r0
}
 800b6d6:	4618      	mov	r0, r3
 800b6d8:	3708      	adds	r7, #8
 800b6da:	46bd      	mov	sp, r7
 800b6dc:	bd80      	pop	{r7, pc}
	...

0800b6e0 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 800b6e0:	b480      	push	{r7}
 800b6e2:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 800b6e4:	f3bf 8f5f 	dmb	sy
}
 800b6e8:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800b6ea:	4b07      	ldr	r3, [pc, #28]	@ (800b708 <HAL_MPU_Disable+0x28>)
 800b6ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b6ee:	4a06      	ldr	r2, [pc, #24]	@ (800b708 <HAL_MPU_Disable+0x28>)
 800b6f0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b6f4:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800b6f6:	4b05      	ldr	r3, [pc, #20]	@ (800b70c <HAL_MPU_Disable+0x2c>)
 800b6f8:	2200      	movs	r2, #0
 800b6fa:	605a      	str	r2, [r3, #4]
}
 800b6fc:	bf00      	nop
 800b6fe:	46bd      	mov	sp, r7
 800b700:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b704:	4770      	bx	lr
 800b706:	bf00      	nop
 800b708:	e000ed00 	.word	0xe000ed00
 800b70c:	e000ed90 	.word	0xe000ed90

0800b710 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 800b710:	b480      	push	{r7}
 800b712:	b083      	sub	sp, #12
 800b714:	af00      	add	r7, sp, #0
 800b716:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800b718:	4a0b      	ldr	r2, [pc, #44]	@ (800b748 <HAL_MPU_Enable+0x38>)
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	f043 0301 	orr.w	r3, r3, #1
 800b720:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800b722:	4b0a      	ldr	r3, [pc, #40]	@ (800b74c <HAL_MPU_Enable+0x3c>)
 800b724:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b726:	4a09      	ldr	r2, [pc, #36]	@ (800b74c <HAL_MPU_Enable+0x3c>)
 800b728:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b72c:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800b72e:	f3bf 8f4f 	dsb	sy
}
 800b732:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800b734:	f3bf 8f6f 	isb	sy
}
 800b738:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800b73a:	bf00      	nop
 800b73c:	370c      	adds	r7, #12
 800b73e:	46bd      	mov	sp, r7
 800b740:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b744:	4770      	bx	lr
 800b746:	bf00      	nop
 800b748:	e000ed90 	.word	0xe000ed90
 800b74c:	e000ed00 	.word	0xe000ed00

0800b750 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 800b750:	b480      	push	{r7}
 800b752:	b083      	sub	sp, #12
 800b754:	af00      	add	r7, sp, #0
 800b756:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	785a      	ldrb	r2, [r3, #1]
 800b75c:	4b1b      	ldr	r3, [pc, #108]	@ (800b7cc <HAL_MPU_ConfigRegion+0x7c>)
 800b75e:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 800b760:	4b1a      	ldr	r3, [pc, #104]	@ (800b7cc <HAL_MPU_ConfigRegion+0x7c>)
 800b762:	691b      	ldr	r3, [r3, #16]
 800b764:	4a19      	ldr	r2, [pc, #100]	@ (800b7cc <HAL_MPU_ConfigRegion+0x7c>)
 800b766:	f023 0301 	bic.w	r3, r3, #1
 800b76a:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 800b76c:	4a17      	ldr	r2, [pc, #92]	@ (800b7cc <HAL_MPU_ConfigRegion+0x7c>)
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	685b      	ldr	r3, [r3, #4]
 800b772:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	7b1b      	ldrb	r3, [r3, #12]
 800b778:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	7adb      	ldrb	r3, [r3, #11]
 800b77e:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800b780:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	7a9b      	ldrb	r3, [r3, #10]
 800b786:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800b788:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	7b5b      	ldrb	r3, [r3, #13]
 800b78e:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800b790:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	7b9b      	ldrb	r3, [r3, #14]
 800b796:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800b798:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	7bdb      	ldrb	r3, [r3, #15]
 800b79e:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800b7a0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	7a5b      	ldrb	r3, [r3, #9]
 800b7a6:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800b7a8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	7a1b      	ldrb	r3, [r3, #8]
 800b7ae:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800b7b0:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800b7b2:	687a      	ldr	r2, [r7, #4]
 800b7b4:	7812      	ldrb	r2, [r2, #0]
 800b7b6:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800b7b8:	4a04      	ldr	r2, [pc, #16]	@ (800b7cc <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800b7ba:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800b7bc:	6113      	str	r3, [r2, #16]
}
 800b7be:	bf00      	nop
 800b7c0:	370c      	adds	r7, #12
 800b7c2:	46bd      	mov	sp, r7
 800b7c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7c8:	4770      	bx	lr
 800b7ca:	bf00      	nop
 800b7cc:	e000ed90 	.word	0xe000ed90

0800b7d0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800b7d0:	b580      	push	{r7, lr}
 800b7d2:	b086      	sub	sp, #24
 800b7d4:	af00      	add	r7, sp, #0
 800b7d6:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 800b7d8:	f7fd fec4 	bl	8009564 <HAL_GetTick>
 800b7dc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d101      	bne.n	800b7e8 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800b7e4:	2301      	movs	r3, #1
 800b7e6:	e312      	b.n	800be0e <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	4a66      	ldr	r2, [pc, #408]	@ (800b988 <HAL_DMA_Init+0x1b8>)
 800b7ee:	4293      	cmp	r3, r2
 800b7f0:	d04a      	beq.n	800b888 <HAL_DMA_Init+0xb8>
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	4a65      	ldr	r2, [pc, #404]	@ (800b98c <HAL_DMA_Init+0x1bc>)
 800b7f8:	4293      	cmp	r3, r2
 800b7fa:	d045      	beq.n	800b888 <HAL_DMA_Init+0xb8>
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	4a63      	ldr	r2, [pc, #396]	@ (800b990 <HAL_DMA_Init+0x1c0>)
 800b802:	4293      	cmp	r3, r2
 800b804:	d040      	beq.n	800b888 <HAL_DMA_Init+0xb8>
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	4a62      	ldr	r2, [pc, #392]	@ (800b994 <HAL_DMA_Init+0x1c4>)
 800b80c:	4293      	cmp	r3, r2
 800b80e:	d03b      	beq.n	800b888 <HAL_DMA_Init+0xb8>
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	4a60      	ldr	r2, [pc, #384]	@ (800b998 <HAL_DMA_Init+0x1c8>)
 800b816:	4293      	cmp	r3, r2
 800b818:	d036      	beq.n	800b888 <HAL_DMA_Init+0xb8>
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	4a5f      	ldr	r2, [pc, #380]	@ (800b99c <HAL_DMA_Init+0x1cc>)
 800b820:	4293      	cmp	r3, r2
 800b822:	d031      	beq.n	800b888 <HAL_DMA_Init+0xb8>
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	4a5d      	ldr	r2, [pc, #372]	@ (800b9a0 <HAL_DMA_Init+0x1d0>)
 800b82a:	4293      	cmp	r3, r2
 800b82c:	d02c      	beq.n	800b888 <HAL_DMA_Init+0xb8>
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	4a5c      	ldr	r2, [pc, #368]	@ (800b9a4 <HAL_DMA_Init+0x1d4>)
 800b834:	4293      	cmp	r3, r2
 800b836:	d027      	beq.n	800b888 <HAL_DMA_Init+0xb8>
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	4a5a      	ldr	r2, [pc, #360]	@ (800b9a8 <HAL_DMA_Init+0x1d8>)
 800b83e:	4293      	cmp	r3, r2
 800b840:	d022      	beq.n	800b888 <HAL_DMA_Init+0xb8>
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	4a59      	ldr	r2, [pc, #356]	@ (800b9ac <HAL_DMA_Init+0x1dc>)
 800b848:	4293      	cmp	r3, r2
 800b84a:	d01d      	beq.n	800b888 <HAL_DMA_Init+0xb8>
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	4a57      	ldr	r2, [pc, #348]	@ (800b9b0 <HAL_DMA_Init+0x1e0>)
 800b852:	4293      	cmp	r3, r2
 800b854:	d018      	beq.n	800b888 <HAL_DMA_Init+0xb8>
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	4a56      	ldr	r2, [pc, #344]	@ (800b9b4 <HAL_DMA_Init+0x1e4>)
 800b85c:	4293      	cmp	r3, r2
 800b85e:	d013      	beq.n	800b888 <HAL_DMA_Init+0xb8>
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	4a54      	ldr	r2, [pc, #336]	@ (800b9b8 <HAL_DMA_Init+0x1e8>)
 800b866:	4293      	cmp	r3, r2
 800b868:	d00e      	beq.n	800b888 <HAL_DMA_Init+0xb8>
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	4a53      	ldr	r2, [pc, #332]	@ (800b9bc <HAL_DMA_Init+0x1ec>)
 800b870:	4293      	cmp	r3, r2
 800b872:	d009      	beq.n	800b888 <HAL_DMA_Init+0xb8>
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	4a51      	ldr	r2, [pc, #324]	@ (800b9c0 <HAL_DMA_Init+0x1f0>)
 800b87a:	4293      	cmp	r3, r2
 800b87c:	d004      	beq.n	800b888 <HAL_DMA_Init+0xb8>
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	4a50      	ldr	r2, [pc, #320]	@ (800b9c4 <HAL_DMA_Init+0x1f4>)
 800b884:	4293      	cmp	r3, r2
 800b886:	d101      	bne.n	800b88c <HAL_DMA_Init+0xbc>
 800b888:	2301      	movs	r3, #1
 800b88a:	e000      	b.n	800b88e <HAL_DMA_Init+0xbe>
 800b88c:	2300      	movs	r3, #0
 800b88e:	2b00      	cmp	r3, #0
 800b890:	f000 813c 	beq.w	800bb0c <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	2202      	movs	r2, #2
 800b898:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	2200      	movs	r2, #0
 800b8a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	4a37      	ldr	r2, [pc, #220]	@ (800b988 <HAL_DMA_Init+0x1b8>)
 800b8aa:	4293      	cmp	r3, r2
 800b8ac:	d04a      	beq.n	800b944 <HAL_DMA_Init+0x174>
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	4a36      	ldr	r2, [pc, #216]	@ (800b98c <HAL_DMA_Init+0x1bc>)
 800b8b4:	4293      	cmp	r3, r2
 800b8b6:	d045      	beq.n	800b944 <HAL_DMA_Init+0x174>
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	4a34      	ldr	r2, [pc, #208]	@ (800b990 <HAL_DMA_Init+0x1c0>)
 800b8be:	4293      	cmp	r3, r2
 800b8c0:	d040      	beq.n	800b944 <HAL_DMA_Init+0x174>
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	4a33      	ldr	r2, [pc, #204]	@ (800b994 <HAL_DMA_Init+0x1c4>)
 800b8c8:	4293      	cmp	r3, r2
 800b8ca:	d03b      	beq.n	800b944 <HAL_DMA_Init+0x174>
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	4a31      	ldr	r2, [pc, #196]	@ (800b998 <HAL_DMA_Init+0x1c8>)
 800b8d2:	4293      	cmp	r3, r2
 800b8d4:	d036      	beq.n	800b944 <HAL_DMA_Init+0x174>
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	4a30      	ldr	r2, [pc, #192]	@ (800b99c <HAL_DMA_Init+0x1cc>)
 800b8dc:	4293      	cmp	r3, r2
 800b8de:	d031      	beq.n	800b944 <HAL_DMA_Init+0x174>
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	4a2e      	ldr	r2, [pc, #184]	@ (800b9a0 <HAL_DMA_Init+0x1d0>)
 800b8e6:	4293      	cmp	r3, r2
 800b8e8:	d02c      	beq.n	800b944 <HAL_DMA_Init+0x174>
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	4a2d      	ldr	r2, [pc, #180]	@ (800b9a4 <HAL_DMA_Init+0x1d4>)
 800b8f0:	4293      	cmp	r3, r2
 800b8f2:	d027      	beq.n	800b944 <HAL_DMA_Init+0x174>
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	4a2b      	ldr	r2, [pc, #172]	@ (800b9a8 <HAL_DMA_Init+0x1d8>)
 800b8fa:	4293      	cmp	r3, r2
 800b8fc:	d022      	beq.n	800b944 <HAL_DMA_Init+0x174>
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	4a2a      	ldr	r2, [pc, #168]	@ (800b9ac <HAL_DMA_Init+0x1dc>)
 800b904:	4293      	cmp	r3, r2
 800b906:	d01d      	beq.n	800b944 <HAL_DMA_Init+0x174>
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	4a28      	ldr	r2, [pc, #160]	@ (800b9b0 <HAL_DMA_Init+0x1e0>)
 800b90e:	4293      	cmp	r3, r2
 800b910:	d018      	beq.n	800b944 <HAL_DMA_Init+0x174>
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	4a27      	ldr	r2, [pc, #156]	@ (800b9b4 <HAL_DMA_Init+0x1e4>)
 800b918:	4293      	cmp	r3, r2
 800b91a:	d013      	beq.n	800b944 <HAL_DMA_Init+0x174>
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	4a25      	ldr	r2, [pc, #148]	@ (800b9b8 <HAL_DMA_Init+0x1e8>)
 800b922:	4293      	cmp	r3, r2
 800b924:	d00e      	beq.n	800b944 <HAL_DMA_Init+0x174>
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	4a24      	ldr	r2, [pc, #144]	@ (800b9bc <HAL_DMA_Init+0x1ec>)
 800b92c:	4293      	cmp	r3, r2
 800b92e:	d009      	beq.n	800b944 <HAL_DMA_Init+0x174>
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	4a22      	ldr	r2, [pc, #136]	@ (800b9c0 <HAL_DMA_Init+0x1f0>)
 800b936:	4293      	cmp	r3, r2
 800b938:	d004      	beq.n	800b944 <HAL_DMA_Init+0x174>
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	4a21      	ldr	r2, [pc, #132]	@ (800b9c4 <HAL_DMA_Init+0x1f4>)
 800b940:	4293      	cmp	r3, r2
 800b942:	d108      	bne.n	800b956 <HAL_DMA_Init+0x186>
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	681a      	ldr	r2, [r3, #0]
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	f022 0201 	bic.w	r2, r2, #1
 800b952:	601a      	str	r2, [r3, #0]
 800b954:	e007      	b.n	800b966 <HAL_DMA_Init+0x196>
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	681a      	ldr	r2, [r3, #0]
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	f022 0201 	bic.w	r2, r2, #1
 800b964:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800b966:	e02f      	b.n	800b9c8 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800b968:	f7fd fdfc 	bl	8009564 <HAL_GetTick>
 800b96c:	4602      	mov	r2, r0
 800b96e:	693b      	ldr	r3, [r7, #16]
 800b970:	1ad3      	subs	r3, r2, r3
 800b972:	2b05      	cmp	r3, #5
 800b974:	d928      	bls.n	800b9c8 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	2220      	movs	r2, #32
 800b97a:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	2203      	movs	r2, #3
 800b980:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 800b984:	2301      	movs	r3, #1
 800b986:	e242      	b.n	800be0e <HAL_DMA_Init+0x63e>
 800b988:	40020010 	.word	0x40020010
 800b98c:	40020028 	.word	0x40020028
 800b990:	40020040 	.word	0x40020040
 800b994:	40020058 	.word	0x40020058
 800b998:	40020070 	.word	0x40020070
 800b99c:	40020088 	.word	0x40020088
 800b9a0:	400200a0 	.word	0x400200a0
 800b9a4:	400200b8 	.word	0x400200b8
 800b9a8:	40020410 	.word	0x40020410
 800b9ac:	40020428 	.word	0x40020428
 800b9b0:	40020440 	.word	0x40020440
 800b9b4:	40020458 	.word	0x40020458
 800b9b8:	40020470 	.word	0x40020470
 800b9bc:	40020488 	.word	0x40020488
 800b9c0:	400204a0 	.word	0x400204a0
 800b9c4:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	f003 0301 	and.w	r3, r3, #1
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d1c8      	bne.n	800b968 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800b9de:	697a      	ldr	r2, [r7, #20]
 800b9e0:	4b83      	ldr	r3, [pc, #524]	@ (800bbf0 <HAL_DMA_Init+0x420>)
 800b9e2:	4013      	ands	r3, r2
 800b9e4:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800b9ee:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	691b      	ldr	r3, [r3, #16]
 800b9f4:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b9fa:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	699b      	ldr	r3, [r3, #24]
 800ba00:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800ba06:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	6a1b      	ldr	r3, [r3, #32]
 800ba0c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800ba0e:	697a      	ldr	r2, [r7, #20]
 800ba10:	4313      	orrs	r3, r2
 800ba12:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ba18:	2b04      	cmp	r3, #4
 800ba1a:	d107      	bne.n	800ba2c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ba24:	4313      	orrs	r3, r2
 800ba26:	697a      	ldr	r2, [r7, #20]
 800ba28:	4313      	orrs	r3, r2
 800ba2a:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	685b      	ldr	r3, [r3, #4]
 800ba30:	2b28      	cmp	r3, #40	@ 0x28
 800ba32:	d903      	bls.n	800ba3c <HAL_DMA_Init+0x26c>
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	685b      	ldr	r3, [r3, #4]
 800ba38:	2b2e      	cmp	r3, #46	@ 0x2e
 800ba3a:	d91f      	bls.n	800ba7c <HAL_DMA_Init+0x2ac>
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	685b      	ldr	r3, [r3, #4]
 800ba40:	2b3e      	cmp	r3, #62	@ 0x3e
 800ba42:	d903      	bls.n	800ba4c <HAL_DMA_Init+0x27c>
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	685b      	ldr	r3, [r3, #4]
 800ba48:	2b42      	cmp	r3, #66	@ 0x42
 800ba4a:	d917      	bls.n	800ba7c <HAL_DMA_Init+0x2ac>
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	685b      	ldr	r3, [r3, #4]
 800ba50:	2b46      	cmp	r3, #70	@ 0x46
 800ba52:	d903      	bls.n	800ba5c <HAL_DMA_Init+0x28c>
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	685b      	ldr	r3, [r3, #4]
 800ba58:	2b48      	cmp	r3, #72	@ 0x48
 800ba5a:	d90f      	bls.n	800ba7c <HAL_DMA_Init+0x2ac>
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	685b      	ldr	r3, [r3, #4]
 800ba60:	2b4e      	cmp	r3, #78	@ 0x4e
 800ba62:	d903      	bls.n	800ba6c <HAL_DMA_Init+0x29c>
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	685b      	ldr	r3, [r3, #4]
 800ba68:	2b52      	cmp	r3, #82	@ 0x52
 800ba6a:	d907      	bls.n	800ba7c <HAL_DMA_Init+0x2ac>
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	685b      	ldr	r3, [r3, #4]
 800ba70:	2b73      	cmp	r3, #115	@ 0x73
 800ba72:	d905      	bls.n	800ba80 <HAL_DMA_Init+0x2b0>
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	685b      	ldr	r3, [r3, #4]
 800ba78:	2b77      	cmp	r3, #119	@ 0x77
 800ba7a:	d801      	bhi.n	800ba80 <HAL_DMA_Init+0x2b0>
 800ba7c:	2301      	movs	r3, #1
 800ba7e:	e000      	b.n	800ba82 <HAL_DMA_Init+0x2b2>
 800ba80:	2300      	movs	r3, #0
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d003      	beq.n	800ba8e <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800ba86:	697b      	ldr	r3, [r7, #20]
 800ba88:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ba8c:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	697a      	ldr	r2, [r7, #20]
 800ba94:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	695b      	ldr	r3, [r3, #20]
 800ba9c:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800ba9e:	697b      	ldr	r3, [r7, #20]
 800baa0:	f023 0307 	bic.w	r3, r3, #7
 800baa4:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800baaa:	697a      	ldr	r2, [r7, #20]
 800baac:	4313      	orrs	r3, r2
 800baae:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bab4:	2b04      	cmp	r3, #4
 800bab6:	d117      	bne.n	800bae8 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800babc:	697a      	ldr	r2, [r7, #20]
 800babe:	4313      	orrs	r3, r2
 800bac0:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d00e      	beq.n	800bae8 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800baca:	6878      	ldr	r0, [r7, #4]
 800bacc:	f002 fb48 	bl	800e160 <DMA_CheckFifoParam>
 800bad0:	4603      	mov	r3, r0
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d008      	beq.n	800bae8 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	2240      	movs	r2, #64	@ 0x40
 800bada:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	2201      	movs	r2, #1
 800bae0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 800bae4:	2301      	movs	r3, #1
 800bae6:	e192      	b.n	800be0e <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	697a      	ldr	r2, [r7, #20]
 800baee:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800baf0:	6878      	ldr	r0, [r7, #4]
 800baf2:	f002 fa83 	bl	800dffc <DMA_CalcBaseAndBitshift>
 800baf6:	4603      	mov	r3, r0
 800baf8:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bafe:	f003 031f 	and.w	r3, r3, #31
 800bb02:	223f      	movs	r2, #63	@ 0x3f
 800bb04:	409a      	lsls	r2, r3
 800bb06:	68bb      	ldr	r3, [r7, #8]
 800bb08:	609a      	str	r2, [r3, #8]
 800bb0a:	e0c8      	b.n	800bc9e <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	4a38      	ldr	r2, [pc, #224]	@ (800bbf4 <HAL_DMA_Init+0x424>)
 800bb12:	4293      	cmp	r3, r2
 800bb14:	d022      	beq.n	800bb5c <HAL_DMA_Init+0x38c>
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	4a37      	ldr	r2, [pc, #220]	@ (800bbf8 <HAL_DMA_Init+0x428>)
 800bb1c:	4293      	cmp	r3, r2
 800bb1e:	d01d      	beq.n	800bb5c <HAL_DMA_Init+0x38c>
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	4a35      	ldr	r2, [pc, #212]	@ (800bbfc <HAL_DMA_Init+0x42c>)
 800bb26:	4293      	cmp	r3, r2
 800bb28:	d018      	beq.n	800bb5c <HAL_DMA_Init+0x38c>
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	4a34      	ldr	r2, [pc, #208]	@ (800bc00 <HAL_DMA_Init+0x430>)
 800bb30:	4293      	cmp	r3, r2
 800bb32:	d013      	beq.n	800bb5c <HAL_DMA_Init+0x38c>
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	4a32      	ldr	r2, [pc, #200]	@ (800bc04 <HAL_DMA_Init+0x434>)
 800bb3a:	4293      	cmp	r3, r2
 800bb3c:	d00e      	beq.n	800bb5c <HAL_DMA_Init+0x38c>
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	4a31      	ldr	r2, [pc, #196]	@ (800bc08 <HAL_DMA_Init+0x438>)
 800bb44:	4293      	cmp	r3, r2
 800bb46:	d009      	beq.n	800bb5c <HAL_DMA_Init+0x38c>
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	4a2f      	ldr	r2, [pc, #188]	@ (800bc0c <HAL_DMA_Init+0x43c>)
 800bb4e:	4293      	cmp	r3, r2
 800bb50:	d004      	beq.n	800bb5c <HAL_DMA_Init+0x38c>
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	4a2e      	ldr	r2, [pc, #184]	@ (800bc10 <HAL_DMA_Init+0x440>)
 800bb58:	4293      	cmp	r3, r2
 800bb5a:	d101      	bne.n	800bb60 <HAL_DMA_Init+0x390>
 800bb5c:	2301      	movs	r3, #1
 800bb5e:	e000      	b.n	800bb62 <HAL_DMA_Init+0x392>
 800bb60:	2300      	movs	r3, #0
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	f000 8092 	beq.w	800bc8c <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	4a21      	ldr	r2, [pc, #132]	@ (800bbf4 <HAL_DMA_Init+0x424>)
 800bb6e:	4293      	cmp	r3, r2
 800bb70:	d021      	beq.n	800bbb6 <HAL_DMA_Init+0x3e6>
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	4a20      	ldr	r2, [pc, #128]	@ (800bbf8 <HAL_DMA_Init+0x428>)
 800bb78:	4293      	cmp	r3, r2
 800bb7a:	d01c      	beq.n	800bbb6 <HAL_DMA_Init+0x3e6>
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	4a1e      	ldr	r2, [pc, #120]	@ (800bbfc <HAL_DMA_Init+0x42c>)
 800bb82:	4293      	cmp	r3, r2
 800bb84:	d017      	beq.n	800bbb6 <HAL_DMA_Init+0x3e6>
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	4a1d      	ldr	r2, [pc, #116]	@ (800bc00 <HAL_DMA_Init+0x430>)
 800bb8c:	4293      	cmp	r3, r2
 800bb8e:	d012      	beq.n	800bbb6 <HAL_DMA_Init+0x3e6>
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	4a1b      	ldr	r2, [pc, #108]	@ (800bc04 <HAL_DMA_Init+0x434>)
 800bb96:	4293      	cmp	r3, r2
 800bb98:	d00d      	beq.n	800bbb6 <HAL_DMA_Init+0x3e6>
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	4a1a      	ldr	r2, [pc, #104]	@ (800bc08 <HAL_DMA_Init+0x438>)
 800bba0:	4293      	cmp	r3, r2
 800bba2:	d008      	beq.n	800bbb6 <HAL_DMA_Init+0x3e6>
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	4a18      	ldr	r2, [pc, #96]	@ (800bc0c <HAL_DMA_Init+0x43c>)
 800bbaa:	4293      	cmp	r3, r2
 800bbac:	d003      	beq.n	800bbb6 <HAL_DMA_Init+0x3e6>
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	4a17      	ldr	r2, [pc, #92]	@ (800bc10 <HAL_DMA_Init+0x440>)
 800bbb4:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	2202      	movs	r2, #2
 800bbba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	2200      	movs	r2, #0
 800bbc2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800bbce:	697a      	ldr	r2, [r7, #20]
 800bbd0:	4b10      	ldr	r3, [pc, #64]	@ (800bc14 <HAL_DMA_Init+0x444>)
 800bbd2:	4013      	ands	r3, r2
 800bbd4:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	689b      	ldr	r3, [r3, #8]
 800bbda:	2b40      	cmp	r3, #64	@ 0x40
 800bbdc:	d01c      	beq.n	800bc18 <HAL_DMA_Init+0x448>
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	689b      	ldr	r3, [r3, #8]
 800bbe2:	2b80      	cmp	r3, #128	@ 0x80
 800bbe4:	d102      	bne.n	800bbec <HAL_DMA_Init+0x41c>
 800bbe6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800bbea:	e016      	b.n	800bc1a <HAL_DMA_Init+0x44a>
 800bbec:	2300      	movs	r3, #0
 800bbee:	e014      	b.n	800bc1a <HAL_DMA_Init+0x44a>
 800bbf0:	fe10803f 	.word	0xfe10803f
 800bbf4:	58025408 	.word	0x58025408
 800bbf8:	5802541c 	.word	0x5802541c
 800bbfc:	58025430 	.word	0x58025430
 800bc00:	58025444 	.word	0x58025444
 800bc04:	58025458 	.word	0x58025458
 800bc08:	5802546c 	.word	0x5802546c
 800bc0c:	58025480 	.word	0x58025480
 800bc10:	58025494 	.word	0x58025494
 800bc14:	fffe000f 	.word	0xfffe000f
 800bc18:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800bc1a:	687a      	ldr	r2, [r7, #4]
 800bc1c:	68d2      	ldr	r2, [r2, #12]
 800bc1e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800bc20:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	691b      	ldr	r3, [r3, #16]
 800bc26:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800bc28:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	695b      	ldr	r3, [r3, #20]
 800bc2e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800bc30:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	699b      	ldr	r3, [r3, #24]
 800bc36:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800bc38:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	69db      	ldr	r3, [r3, #28]
 800bc3e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800bc40:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	6a1b      	ldr	r3, [r3, #32]
 800bc46:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800bc48:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800bc4a:	697a      	ldr	r2, [r7, #20]
 800bc4c:	4313      	orrs	r3, r2
 800bc4e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	697a      	ldr	r2, [r7, #20]
 800bc56:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	461a      	mov	r2, r3
 800bc5e:	4b6e      	ldr	r3, [pc, #440]	@ (800be18 <HAL_DMA_Init+0x648>)
 800bc60:	4413      	add	r3, r2
 800bc62:	4a6e      	ldr	r2, [pc, #440]	@ (800be1c <HAL_DMA_Init+0x64c>)
 800bc64:	fba2 2303 	umull	r2, r3, r2, r3
 800bc68:	091b      	lsrs	r3, r3, #4
 800bc6a:	009a      	lsls	r2, r3, #2
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800bc70:	6878      	ldr	r0, [r7, #4]
 800bc72:	f002 f9c3 	bl	800dffc <DMA_CalcBaseAndBitshift>
 800bc76:	4603      	mov	r3, r0
 800bc78:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bc7e:	f003 031f 	and.w	r3, r3, #31
 800bc82:	2201      	movs	r2, #1
 800bc84:	409a      	lsls	r2, r3
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	605a      	str	r2, [r3, #4]
 800bc8a:	e008      	b.n	800bc9e <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	2240      	movs	r2, #64	@ 0x40
 800bc90:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	2203      	movs	r2, #3
 800bc96:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 800bc9a:	2301      	movs	r3, #1
 800bc9c:	e0b7      	b.n	800be0e <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	4a5f      	ldr	r2, [pc, #380]	@ (800be20 <HAL_DMA_Init+0x650>)
 800bca4:	4293      	cmp	r3, r2
 800bca6:	d072      	beq.n	800bd8e <HAL_DMA_Init+0x5be>
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	4a5d      	ldr	r2, [pc, #372]	@ (800be24 <HAL_DMA_Init+0x654>)
 800bcae:	4293      	cmp	r3, r2
 800bcb0:	d06d      	beq.n	800bd8e <HAL_DMA_Init+0x5be>
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	4a5c      	ldr	r2, [pc, #368]	@ (800be28 <HAL_DMA_Init+0x658>)
 800bcb8:	4293      	cmp	r3, r2
 800bcba:	d068      	beq.n	800bd8e <HAL_DMA_Init+0x5be>
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	4a5a      	ldr	r2, [pc, #360]	@ (800be2c <HAL_DMA_Init+0x65c>)
 800bcc2:	4293      	cmp	r3, r2
 800bcc4:	d063      	beq.n	800bd8e <HAL_DMA_Init+0x5be>
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	4a59      	ldr	r2, [pc, #356]	@ (800be30 <HAL_DMA_Init+0x660>)
 800bccc:	4293      	cmp	r3, r2
 800bcce:	d05e      	beq.n	800bd8e <HAL_DMA_Init+0x5be>
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	4a57      	ldr	r2, [pc, #348]	@ (800be34 <HAL_DMA_Init+0x664>)
 800bcd6:	4293      	cmp	r3, r2
 800bcd8:	d059      	beq.n	800bd8e <HAL_DMA_Init+0x5be>
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	4a56      	ldr	r2, [pc, #344]	@ (800be38 <HAL_DMA_Init+0x668>)
 800bce0:	4293      	cmp	r3, r2
 800bce2:	d054      	beq.n	800bd8e <HAL_DMA_Init+0x5be>
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	4a54      	ldr	r2, [pc, #336]	@ (800be3c <HAL_DMA_Init+0x66c>)
 800bcea:	4293      	cmp	r3, r2
 800bcec:	d04f      	beq.n	800bd8e <HAL_DMA_Init+0x5be>
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	4a53      	ldr	r2, [pc, #332]	@ (800be40 <HAL_DMA_Init+0x670>)
 800bcf4:	4293      	cmp	r3, r2
 800bcf6:	d04a      	beq.n	800bd8e <HAL_DMA_Init+0x5be>
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	4a51      	ldr	r2, [pc, #324]	@ (800be44 <HAL_DMA_Init+0x674>)
 800bcfe:	4293      	cmp	r3, r2
 800bd00:	d045      	beq.n	800bd8e <HAL_DMA_Init+0x5be>
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	4a50      	ldr	r2, [pc, #320]	@ (800be48 <HAL_DMA_Init+0x678>)
 800bd08:	4293      	cmp	r3, r2
 800bd0a:	d040      	beq.n	800bd8e <HAL_DMA_Init+0x5be>
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	4a4e      	ldr	r2, [pc, #312]	@ (800be4c <HAL_DMA_Init+0x67c>)
 800bd12:	4293      	cmp	r3, r2
 800bd14:	d03b      	beq.n	800bd8e <HAL_DMA_Init+0x5be>
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	4a4d      	ldr	r2, [pc, #308]	@ (800be50 <HAL_DMA_Init+0x680>)
 800bd1c:	4293      	cmp	r3, r2
 800bd1e:	d036      	beq.n	800bd8e <HAL_DMA_Init+0x5be>
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	4a4b      	ldr	r2, [pc, #300]	@ (800be54 <HAL_DMA_Init+0x684>)
 800bd26:	4293      	cmp	r3, r2
 800bd28:	d031      	beq.n	800bd8e <HAL_DMA_Init+0x5be>
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	4a4a      	ldr	r2, [pc, #296]	@ (800be58 <HAL_DMA_Init+0x688>)
 800bd30:	4293      	cmp	r3, r2
 800bd32:	d02c      	beq.n	800bd8e <HAL_DMA_Init+0x5be>
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	4a48      	ldr	r2, [pc, #288]	@ (800be5c <HAL_DMA_Init+0x68c>)
 800bd3a:	4293      	cmp	r3, r2
 800bd3c:	d027      	beq.n	800bd8e <HAL_DMA_Init+0x5be>
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	4a47      	ldr	r2, [pc, #284]	@ (800be60 <HAL_DMA_Init+0x690>)
 800bd44:	4293      	cmp	r3, r2
 800bd46:	d022      	beq.n	800bd8e <HAL_DMA_Init+0x5be>
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	4a45      	ldr	r2, [pc, #276]	@ (800be64 <HAL_DMA_Init+0x694>)
 800bd4e:	4293      	cmp	r3, r2
 800bd50:	d01d      	beq.n	800bd8e <HAL_DMA_Init+0x5be>
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	4a44      	ldr	r2, [pc, #272]	@ (800be68 <HAL_DMA_Init+0x698>)
 800bd58:	4293      	cmp	r3, r2
 800bd5a:	d018      	beq.n	800bd8e <HAL_DMA_Init+0x5be>
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	4a42      	ldr	r2, [pc, #264]	@ (800be6c <HAL_DMA_Init+0x69c>)
 800bd62:	4293      	cmp	r3, r2
 800bd64:	d013      	beq.n	800bd8e <HAL_DMA_Init+0x5be>
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	4a41      	ldr	r2, [pc, #260]	@ (800be70 <HAL_DMA_Init+0x6a0>)
 800bd6c:	4293      	cmp	r3, r2
 800bd6e:	d00e      	beq.n	800bd8e <HAL_DMA_Init+0x5be>
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	4a3f      	ldr	r2, [pc, #252]	@ (800be74 <HAL_DMA_Init+0x6a4>)
 800bd76:	4293      	cmp	r3, r2
 800bd78:	d009      	beq.n	800bd8e <HAL_DMA_Init+0x5be>
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	4a3e      	ldr	r2, [pc, #248]	@ (800be78 <HAL_DMA_Init+0x6a8>)
 800bd80:	4293      	cmp	r3, r2
 800bd82:	d004      	beq.n	800bd8e <HAL_DMA_Init+0x5be>
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	4a3c      	ldr	r2, [pc, #240]	@ (800be7c <HAL_DMA_Init+0x6ac>)
 800bd8a:	4293      	cmp	r3, r2
 800bd8c:	d101      	bne.n	800bd92 <HAL_DMA_Init+0x5c2>
 800bd8e:	2301      	movs	r3, #1
 800bd90:	e000      	b.n	800bd94 <HAL_DMA_Init+0x5c4>
 800bd92:	2300      	movs	r3, #0
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d032      	beq.n	800bdfe <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800bd98:	6878      	ldr	r0, [r7, #4]
 800bd9a:	f002 fa5d 	bl	800e258 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	689b      	ldr	r3, [r3, #8]
 800bda2:	2b80      	cmp	r3, #128	@ 0x80
 800bda4:	d102      	bne.n	800bdac <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	2200      	movs	r2, #0
 800bdaa:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	685a      	ldr	r2, [r3, #4]
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bdb4:	b2d2      	uxtb	r2, r2
 800bdb6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bdbc:	687a      	ldr	r2, [r7, #4]
 800bdbe:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800bdc0:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	685b      	ldr	r3, [r3, #4]
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d010      	beq.n	800bdec <HAL_DMA_Init+0x61c>
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	685b      	ldr	r3, [r3, #4]
 800bdce:	2b08      	cmp	r3, #8
 800bdd0:	d80c      	bhi.n	800bdec <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800bdd2:	6878      	ldr	r0, [r7, #4]
 800bdd4:	f002 fada 	bl	800e38c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bddc:	2200      	movs	r2, #0
 800bdde:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bde4:	687a      	ldr	r2, [r7, #4]
 800bde6:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800bde8:	605a      	str	r2, [r3, #4]
 800bdea:	e008      	b.n	800bdfe <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	2200      	movs	r2, #0
 800bdf0:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	2200      	movs	r2, #0
 800bdf6:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	2200      	movs	r2, #0
 800bdfc:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	2200      	movs	r2, #0
 800be02:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	2201      	movs	r2, #1
 800be08:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800be0c:	2300      	movs	r3, #0
}
 800be0e:	4618      	mov	r0, r3
 800be10:	3718      	adds	r7, #24
 800be12:	46bd      	mov	sp, r7
 800be14:	bd80      	pop	{r7, pc}
 800be16:	bf00      	nop
 800be18:	a7fdabf8 	.word	0xa7fdabf8
 800be1c:	cccccccd 	.word	0xcccccccd
 800be20:	40020010 	.word	0x40020010
 800be24:	40020028 	.word	0x40020028
 800be28:	40020040 	.word	0x40020040
 800be2c:	40020058 	.word	0x40020058
 800be30:	40020070 	.word	0x40020070
 800be34:	40020088 	.word	0x40020088
 800be38:	400200a0 	.word	0x400200a0
 800be3c:	400200b8 	.word	0x400200b8
 800be40:	40020410 	.word	0x40020410
 800be44:	40020428 	.word	0x40020428
 800be48:	40020440 	.word	0x40020440
 800be4c:	40020458 	.word	0x40020458
 800be50:	40020470 	.word	0x40020470
 800be54:	40020488 	.word	0x40020488
 800be58:	400204a0 	.word	0x400204a0
 800be5c:	400204b8 	.word	0x400204b8
 800be60:	58025408 	.word	0x58025408
 800be64:	5802541c 	.word	0x5802541c
 800be68:	58025430 	.word	0x58025430
 800be6c:	58025444 	.word	0x58025444
 800be70:	58025458 	.word	0x58025458
 800be74:	5802546c 	.word	0x5802546c
 800be78:	58025480 	.word	0x58025480
 800be7c:	58025494 	.word	0x58025494

0800be80 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800be80:	b580      	push	{r7, lr}
 800be82:	b086      	sub	sp, #24
 800be84:	af00      	add	r7, sp, #0
 800be86:	60f8      	str	r0, [r7, #12]
 800be88:	60b9      	str	r1, [r7, #8]
 800be8a:	607a      	str	r2, [r7, #4]
 800be8c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800be8e:	2300      	movs	r3, #0
 800be90:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	2b00      	cmp	r3, #0
 800be96:	d101      	bne.n	800be9c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 800be98:	2301      	movs	r3, #1
 800be9a:	e226      	b.n	800c2ea <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 800be9c:	68fb      	ldr	r3, [r7, #12]
 800be9e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800bea2:	2b01      	cmp	r3, #1
 800bea4:	d101      	bne.n	800beaa <HAL_DMA_Start_IT+0x2a>
 800bea6:	2302      	movs	r3, #2
 800bea8:	e21f      	b.n	800c2ea <HAL_DMA_Start_IT+0x46a>
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	2201      	movs	r2, #1
 800beae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800beb2:	68fb      	ldr	r3, [r7, #12]
 800beb4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800beb8:	b2db      	uxtb	r3, r3
 800beba:	2b01      	cmp	r3, #1
 800bebc:	f040 820a 	bne.w	800c2d4 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	2202      	movs	r2, #2
 800bec4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	2200      	movs	r2, #0
 800becc:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800bece:	68fb      	ldr	r3, [r7, #12]
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	4a68      	ldr	r2, [pc, #416]	@ (800c074 <HAL_DMA_Start_IT+0x1f4>)
 800bed4:	4293      	cmp	r3, r2
 800bed6:	d04a      	beq.n	800bf6e <HAL_DMA_Start_IT+0xee>
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	4a66      	ldr	r2, [pc, #408]	@ (800c078 <HAL_DMA_Start_IT+0x1f8>)
 800bede:	4293      	cmp	r3, r2
 800bee0:	d045      	beq.n	800bf6e <HAL_DMA_Start_IT+0xee>
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	4a65      	ldr	r2, [pc, #404]	@ (800c07c <HAL_DMA_Start_IT+0x1fc>)
 800bee8:	4293      	cmp	r3, r2
 800beea:	d040      	beq.n	800bf6e <HAL_DMA_Start_IT+0xee>
 800beec:	68fb      	ldr	r3, [r7, #12]
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	4a63      	ldr	r2, [pc, #396]	@ (800c080 <HAL_DMA_Start_IT+0x200>)
 800bef2:	4293      	cmp	r3, r2
 800bef4:	d03b      	beq.n	800bf6e <HAL_DMA_Start_IT+0xee>
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	4a62      	ldr	r2, [pc, #392]	@ (800c084 <HAL_DMA_Start_IT+0x204>)
 800befc:	4293      	cmp	r3, r2
 800befe:	d036      	beq.n	800bf6e <HAL_DMA_Start_IT+0xee>
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	4a60      	ldr	r2, [pc, #384]	@ (800c088 <HAL_DMA_Start_IT+0x208>)
 800bf06:	4293      	cmp	r3, r2
 800bf08:	d031      	beq.n	800bf6e <HAL_DMA_Start_IT+0xee>
 800bf0a:	68fb      	ldr	r3, [r7, #12]
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	4a5f      	ldr	r2, [pc, #380]	@ (800c08c <HAL_DMA_Start_IT+0x20c>)
 800bf10:	4293      	cmp	r3, r2
 800bf12:	d02c      	beq.n	800bf6e <HAL_DMA_Start_IT+0xee>
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	4a5d      	ldr	r2, [pc, #372]	@ (800c090 <HAL_DMA_Start_IT+0x210>)
 800bf1a:	4293      	cmp	r3, r2
 800bf1c:	d027      	beq.n	800bf6e <HAL_DMA_Start_IT+0xee>
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	4a5c      	ldr	r2, [pc, #368]	@ (800c094 <HAL_DMA_Start_IT+0x214>)
 800bf24:	4293      	cmp	r3, r2
 800bf26:	d022      	beq.n	800bf6e <HAL_DMA_Start_IT+0xee>
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	4a5a      	ldr	r2, [pc, #360]	@ (800c098 <HAL_DMA_Start_IT+0x218>)
 800bf2e:	4293      	cmp	r3, r2
 800bf30:	d01d      	beq.n	800bf6e <HAL_DMA_Start_IT+0xee>
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	4a59      	ldr	r2, [pc, #356]	@ (800c09c <HAL_DMA_Start_IT+0x21c>)
 800bf38:	4293      	cmp	r3, r2
 800bf3a:	d018      	beq.n	800bf6e <HAL_DMA_Start_IT+0xee>
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	4a57      	ldr	r2, [pc, #348]	@ (800c0a0 <HAL_DMA_Start_IT+0x220>)
 800bf42:	4293      	cmp	r3, r2
 800bf44:	d013      	beq.n	800bf6e <HAL_DMA_Start_IT+0xee>
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	4a56      	ldr	r2, [pc, #344]	@ (800c0a4 <HAL_DMA_Start_IT+0x224>)
 800bf4c:	4293      	cmp	r3, r2
 800bf4e:	d00e      	beq.n	800bf6e <HAL_DMA_Start_IT+0xee>
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	4a54      	ldr	r2, [pc, #336]	@ (800c0a8 <HAL_DMA_Start_IT+0x228>)
 800bf56:	4293      	cmp	r3, r2
 800bf58:	d009      	beq.n	800bf6e <HAL_DMA_Start_IT+0xee>
 800bf5a:	68fb      	ldr	r3, [r7, #12]
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	4a53      	ldr	r2, [pc, #332]	@ (800c0ac <HAL_DMA_Start_IT+0x22c>)
 800bf60:	4293      	cmp	r3, r2
 800bf62:	d004      	beq.n	800bf6e <HAL_DMA_Start_IT+0xee>
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	4a51      	ldr	r2, [pc, #324]	@ (800c0b0 <HAL_DMA_Start_IT+0x230>)
 800bf6a:	4293      	cmp	r3, r2
 800bf6c:	d108      	bne.n	800bf80 <HAL_DMA_Start_IT+0x100>
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	681a      	ldr	r2, [r3, #0]
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	f022 0201 	bic.w	r2, r2, #1
 800bf7c:	601a      	str	r2, [r3, #0]
 800bf7e:	e007      	b.n	800bf90 <HAL_DMA_Start_IT+0x110>
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	681a      	ldr	r2, [r3, #0]
 800bf86:	68fb      	ldr	r3, [r7, #12]
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	f022 0201 	bic.w	r2, r2, #1
 800bf8e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800bf90:	683b      	ldr	r3, [r7, #0]
 800bf92:	687a      	ldr	r2, [r7, #4]
 800bf94:	68b9      	ldr	r1, [r7, #8]
 800bf96:	68f8      	ldr	r0, [r7, #12]
 800bf98:	f001 fe84 	bl	800dca4 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	4a34      	ldr	r2, [pc, #208]	@ (800c074 <HAL_DMA_Start_IT+0x1f4>)
 800bfa2:	4293      	cmp	r3, r2
 800bfa4:	d04a      	beq.n	800c03c <HAL_DMA_Start_IT+0x1bc>
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	4a33      	ldr	r2, [pc, #204]	@ (800c078 <HAL_DMA_Start_IT+0x1f8>)
 800bfac:	4293      	cmp	r3, r2
 800bfae:	d045      	beq.n	800c03c <HAL_DMA_Start_IT+0x1bc>
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	4a31      	ldr	r2, [pc, #196]	@ (800c07c <HAL_DMA_Start_IT+0x1fc>)
 800bfb6:	4293      	cmp	r3, r2
 800bfb8:	d040      	beq.n	800c03c <HAL_DMA_Start_IT+0x1bc>
 800bfba:	68fb      	ldr	r3, [r7, #12]
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	4a30      	ldr	r2, [pc, #192]	@ (800c080 <HAL_DMA_Start_IT+0x200>)
 800bfc0:	4293      	cmp	r3, r2
 800bfc2:	d03b      	beq.n	800c03c <HAL_DMA_Start_IT+0x1bc>
 800bfc4:	68fb      	ldr	r3, [r7, #12]
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	4a2e      	ldr	r2, [pc, #184]	@ (800c084 <HAL_DMA_Start_IT+0x204>)
 800bfca:	4293      	cmp	r3, r2
 800bfcc:	d036      	beq.n	800c03c <HAL_DMA_Start_IT+0x1bc>
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	4a2d      	ldr	r2, [pc, #180]	@ (800c088 <HAL_DMA_Start_IT+0x208>)
 800bfd4:	4293      	cmp	r3, r2
 800bfd6:	d031      	beq.n	800c03c <HAL_DMA_Start_IT+0x1bc>
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	4a2b      	ldr	r2, [pc, #172]	@ (800c08c <HAL_DMA_Start_IT+0x20c>)
 800bfde:	4293      	cmp	r3, r2
 800bfe0:	d02c      	beq.n	800c03c <HAL_DMA_Start_IT+0x1bc>
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	4a2a      	ldr	r2, [pc, #168]	@ (800c090 <HAL_DMA_Start_IT+0x210>)
 800bfe8:	4293      	cmp	r3, r2
 800bfea:	d027      	beq.n	800c03c <HAL_DMA_Start_IT+0x1bc>
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	4a28      	ldr	r2, [pc, #160]	@ (800c094 <HAL_DMA_Start_IT+0x214>)
 800bff2:	4293      	cmp	r3, r2
 800bff4:	d022      	beq.n	800c03c <HAL_DMA_Start_IT+0x1bc>
 800bff6:	68fb      	ldr	r3, [r7, #12]
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	4a27      	ldr	r2, [pc, #156]	@ (800c098 <HAL_DMA_Start_IT+0x218>)
 800bffc:	4293      	cmp	r3, r2
 800bffe:	d01d      	beq.n	800c03c <HAL_DMA_Start_IT+0x1bc>
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	4a25      	ldr	r2, [pc, #148]	@ (800c09c <HAL_DMA_Start_IT+0x21c>)
 800c006:	4293      	cmp	r3, r2
 800c008:	d018      	beq.n	800c03c <HAL_DMA_Start_IT+0x1bc>
 800c00a:	68fb      	ldr	r3, [r7, #12]
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	4a24      	ldr	r2, [pc, #144]	@ (800c0a0 <HAL_DMA_Start_IT+0x220>)
 800c010:	4293      	cmp	r3, r2
 800c012:	d013      	beq.n	800c03c <HAL_DMA_Start_IT+0x1bc>
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	4a22      	ldr	r2, [pc, #136]	@ (800c0a4 <HAL_DMA_Start_IT+0x224>)
 800c01a:	4293      	cmp	r3, r2
 800c01c:	d00e      	beq.n	800c03c <HAL_DMA_Start_IT+0x1bc>
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	4a21      	ldr	r2, [pc, #132]	@ (800c0a8 <HAL_DMA_Start_IT+0x228>)
 800c024:	4293      	cmp	r3, r2
 800c026:	d009      	beq.n	800c03c <HAL_DMA_Start_IT+0x1bc>
 800c028:	68fb      	ldr	r3, [r7, #12]
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	4a1f      	ldr	r2, [pc, #124]	@ (800c0ac <HAL_DMA_Start_IT+0x22c>)
 800c02e:	4293      	cmp	r3, r2
 800c030:	d004      	beq.n	800c03c <HAL_DMA_Start_IT+0x1bc>
 800c032:	68fb      	ldr	r3, [r7, #12]
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	4a1e      	ldr	r2, [pc, #120]	@ (800c0b0 <HAL_DMA_Start_IT+0x230>)
 800c038:	4293      	cmp	r3, r2
 800c03a:	d101      	bne.n	800c040 <HAL_DMA_Start_IT+0x1c0>
 800c03c:	2301      	movs	r3, #1
 800c03e:	e000      	b.n	800c042 <HAL_DMA_Start_IT+0x1c2>
 800c040:	2300      	movs	r3, #0
 800c042:	2b00      	cmp	r3, #0
 800c044:	d036      	beq.n	800c0b4 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800c046:	68fb      	ldr	r3, [r7, #12]
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	f023 021e 	bic.w	r2, r3, #30
 800c050:	68fb      	ldr	r3, [r7, #12]
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	f042 0216 	orr.w	r2, r2, #22
 800c058:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800c05a:	68fb      	ldr	r3, [r7, #12]
 800c05c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d03e      	beq.n	800c0e0 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800c062:	68fb      	ldr	r3, [r7, #12]
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	681a      	ldr	r2, [r3, #0]
 800c068:	68fb      	ldr	r3, [r7, #12]
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	f042 0208 	orr.w	r2, r2, #8
 800c070:	601a      	str	r2, [r3, #0]
 800c072:	e035      	b.n	800c0e0 <HAL_DMA_Start_IT+0x260>
 800c074:	40020010 	.word	0x40020010
 800c078:	40020028 	.word	0x40020028
 800c07c:	40020040 	.word	0x40020040
 800c080:	40020058 	.word	0x40020058
 800c084:	40020070 	.word	0x40020070
 800c088:	40020088 	.word	0x40020088
 800c08c:	400200a0 	.word	0x400200a0
 800c090:	400200b8 	.word	0x400200b8
 800c094:	40020410 	.word	0x40020410
 800c098:	40020428 	.word	0x40020428
 800c09c:	40020440 	.word	0x40020440
 800c0a0:	40020458 	.word	0x40020458
 800c0a4:	40020470 	.word	0x40020470
 800c0a8:	40020488 	.word	0x40020488
 800c0ac:	400204a0 	.word	0x400204a0
 800c0b0:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	f023 020e 	bic.w	r2, r3, #14
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	f042 020a 	orr.w	r2, r2, #10
 800c0c6:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800c0c8:	68fb      	ldr	r3, [r7, #12]
 800c0ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d007      	beq.n	800c0e0 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	681a      	ldr	r2, [r3, #0]
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	f042 0204 	orr.w	r2, r2, #4
 800c0de:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	4a83      	ldr	r2, [pc, #524]	@ (800c2f4 <HAL_DMA_Start_IT+0x474>)
 800c0e6:	4293      	cmp	r3, r2
 800c0e8:	d072      	beq.n	800c1d0 <HAL_DMA_Start_IT+0x350>
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	4a82      	ldr	r2, [pc, #520]	@ (800c2f8 <HAL_DMA_Start_IT+0x478>)
 800c0f0:	4293      	cmp	r3, r2
 800c0f2:	d06d      	beq.n	800c1d0 <HAL_DMA_Start_IT+0x350>
 800c0f4:	68fb      	ldr	r3, [r7, #12]
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	4a80      	ldr	r2, [pc, #512]	@ (800c2fc <HAL_DMA_Start_IT+0x47c>)
 800c0fa:	4293      	cmp	r3, r2
 800c0fc:	d068      	beq.n	800c1d0 <HAL_DMA_Start_IT+0x350>
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	4a7f      	ldr	r2, [pc, #508]	@ (800c300 <HAL_DMA_Start_IT+0x480>)
 800c104:	4293      	cmp	r3, r2
 800c106:	d063      	beq.n	800c1d0 <HAL_DMA_Start_IT+0x350>
 800c108:	68fb      	ldr	r3, [r7, #12]
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	4a7d      	ldr	r2, [pc, #500]	@ (800c304 <HAL_DMA_Start_IT+0x484>)
 800c10e:	4293      	cmp	r3, r2
 800c110:	d05e      	beq.n	800c1d0 <HAL_DMA_Start_IT+0x350>
 800c112:	68fb      	ldr	r3, [r7, #12]
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	4a7c      	ldr	r2, [pc, #496]	@ (800c308 <HAL_DMA_Start_IT+0x488>)
 800c118:	4293      	cmp	r3, r2
 800c11a:	d059      	beq.n	800c1d0 <HAL_DMA_Start_IT+0x350>
 800c11c:	68fb      	ldr	r3, [r7, #12]
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	4a7a      	ldr	r2, [pc, #488]	@ (800c30c <HAL_DMA_Start_IT+0x48c>)
 800c122:	4293      	cmp	r3, r2
 800c124:	d054      	beq.n	800c1d0 <HAL_DMA_Start_IT+0x350>
 800c126:	68fb      	ldr	r3, [r7, #12]
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	4a79      	ldr	r2, [pc, #484]	@ (800c310 <HAL_DMA_Start_IT+0x490>)
 800c12c:	4293      	cmp	r3, r2
 800c12e:	d04f      	beq.n	800c1d0 <HAL_DMA_Start_IT+0x350>
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	4a77      	ldr	r2, [pc, #476]	@ (800c314 <HAL_DMA_Start_IT+0x494>)
 800c136:	4293      	cmp	r3, r2
 800c138:	d04a      	beq.n	800c1d0 <HAL_DMA_Start_IT+0x350>
 800c13a:	68fb      	ldr	r3, [r7, #12]
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	4a76      	ldr	r2, [pc, #472]	@ (800c318 <HAL_DMA_Start_IT+0x498>)
 800c140:	4293      	cmp	r3, r2
 800c142:	d045      	beq.n	800c1d0 <HAL_DMA_Start_IT+0x350>
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	4a74      	ldr	r2, [pc, #464]	@ (800c31c <HAL_DMA_Start_IT+0x49c>)
 800c14a:	4293      	cmp	r3, r2
 800c14c:	d040      	beq.n	800c1d0 <HAL_DMA_Start_IT+0x350>
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	4a73      	ldr	r2, [pc, #460]	@ (800c320 <HAL_DMA_Start_IT+0x4a0>)
 800c154:	4293      	cmp	r3, r2
 800c156:	d03b      	beq.n	800c1d0 <HAL_DMA_Start_IT+0x350>
 800c158:	68fb      	ldr	r3, [r7, #12]
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	4a71      	ldr	r2, [pc, #452]	@ (800c324 <HAL_DMA_Start_IT+0x4a4>)
 800c15e:	4293      	cmp	r3, r2
 800c160:	d036      	beq.n	800c1d0 <HAL_DMA_Start_IT+0x350>
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	4a70      	ldr	r2, [pc, #448]	@ (800c328 <HAL_DMA_Start_IT+0x4a8>)
 800c168:	4293      	cmp	r3, r2
 800c16a:	d031      	beq.n	800c1d0 <HAL_DMA_Start_IT+0x350>
 800c16c:	68fb      	ldr	r3, [r7, #12]
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	4a6e      	ldr	r2, [pc, #440]	@ (800c32c <HAL_DMA_Start_IT+0x4ac>)
 800c172:	4293      	cmp	r3, r2
 800c174:	d02c      	beq.n	800c1d0 <HAL_DMA_Start_IT+0x350>
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	4a6d      	ldr	r2, [pc, #436]	@ (800c330 <HAL_DMA_Start_IT+0x4b0>)
 800c17c:	4293      	cmp	r3, r2
 800c17e:	d027      	beq.n	800c1d0 <HAL_DMA_Start_IT+0x350>
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	4a6b      	ldr	r2, [pc, #428]	@ (800c334 <HAL_DMA_Start_IT+0x4b4>)
 800c186:	4293      	cmp	r3, r2
 800c188:	d022      	beq.n	800c1d0 <HAL_DMA_Start_IT+0x350>
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	4a6a      	ldr	r2, [pc, #424]	@ (800c338 <HAL_DMA_Start_IT+0x4b8>)
 800c190:	4293      	cmp	r3, r2
 800c192:	d01d      	beq.n	800c1d0 <HAL_DMA_Start_IT+0x350>
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	4a68      	ldr	r2, [pc, #416]	@ (800c33c <HAL_DMA_Start_IT+0x4bc>)
 800c19a:	4293      	cmp	r3, r2
 800c19c:	d018      	beq.n	800c1d0 <HAL_DMA_Start_IT+0x350>
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	4a67      	ldr	r2, [pc, #412]	@ (800c340 <HAL_DMA_Start_IT+0x4c0>)
 800c1a4:	4293      	cmp	r3, r2
 800c1a6:	d013      	beq.n	800c1d0 <HAL_DMA_Start_IT+0x350>
 800c1a8:	68fb      	ldr	r3, [r7, #12]
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	4a65      	ldr	r2, [pc, #404]	@ (800c344 <HAL_DMA_Start_IT+0x4c4>)
 800c1ae:	4293      	cmp	r3, r2
 800c1b0:	d00e      	beq.n	800c1d0 <HAL_DMA_Start_IT+0x350>
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	4a64      	ldr	r2, [pc, #400]	@ (800c348 <HAL_DMA_Start_IT+0x4c8>)
 800c1b8:	4293      	cmp	r3, r2
 800c1ba:	d009      	beq.n	800c1d0 <HAL_DMA_Start_IT+0x350>
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	4a62      	ldr	r2, [pc, #392]	@ (800c34c <HAL_DMA_Start_IT+0x4cc>)
 800c1c2:	4293      	cmp	r3, r2
 800c1c4:	d004      	beq.n	800c1d0 <HAL_DMA_Start_IT+0x350>
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	4a61      	ldr	r2, [pc, #388]	@ (800c350 <HAL_DMA_Start_IT+0x4d0>)
 800c1cc:	4293      	cmp	r3, r2
 800c1ce:	d101      	bne.n	800c1d4 <HAL_DMA_Start_IT+0x354>
 800c1d0:	2301      	movs	r3, #1
 800c1d2:	e000      	b.n	800c1d6 <HAL_DMA_Start_IT+0x356>
 800c1d4:	2300      	movs	r3, #0
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d01a      	beq.n	800c210 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800c1da:	68fb      	ldr	r3, [r7, #12]
 800c1dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d007      	beq.n	800c1f8 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800c1e8:	68fb      	ldr	r3, [r7, #12]
 800c1ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c1ec:	681a      	ldr	r2, [r3, #0]
 800c1ee:	68fb      	ldr	r3, [r7, #12]
 800c1f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c1f2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800c1f6:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d007      	beq.n	800c210 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c204:	681a      	ldr	r2, [r3, #0]
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c20a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800c20e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800c210:	68fb      	ldr	r3, [r7, #12]
 800c212:	681b      	ldr	r3, [r3, #0]
 800c214:	4a37      	ldr	r2, [pc, #220]	@ (800c2f4 <HAL_DMA_Start_IT+0x474>)
 800c216:	4293      	cmp	r3, r2
 800c218:	d04a      	beq.n	800c2b0 <HAL_DMA_Start_IT+0x430>
 800c21a:	68fb      	ldr	r3, [r7, #12]
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	4a36      	ldr	r2, [pc, #216]	@ (800c2f8 <HAL_DMA_Start_IT+0x478>)
 800c220:	4293      	cmp	r3, r2
 800c222:	d045      	beq.n	800c2b0 <HAL_DMA_Start_IT+0x430>
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	4a34      	ldr	r2, [pc, #208]	@ (800c2fc <HAL_DMA_Start_IT+0x47c>)
 800c22a:	4293      	cmp	r3, r2
 800c22c:	d040      	beq.n	800c2b0 <HAL_DMA_Start_IT+0x430>
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	4a33      	ldr	r2, [pc, #204]	@ (800c300 <HAL_DMA_Start_IT+0x480>)
 800c234:	4293      	cmp	r3, r2
 800c236:	d03b      	beq.n	800c2b0 <HAL_DMA_Start_IT+0x430>
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	4a31      	ldr	r2, [pc, #196]	@ (800c304 <HAL_DMA_Start_IT+0x484>)
 800c23e:	4293      	cmp	r3, r2
 800c240:	d036      	beq.n	800c2b0 <HAL_DMA_Start_IT+0x430>
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	4a30      	ldr	r2, [pc, #192]	@ (800c308 <HAL_DMA_Start_IT+0x488>)
 800c248:	4293      	cmp	r3, r2
 800c24a:	d031      	beq.n	800c2b0 <HAL_DMA_Start_IT+0x430>
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	4a2e      	ldr	r2, [pc, #184]	@ (800c30c <HAL_DMA_Start_IT+0x48c>)
 800c252:	4293      	cmp	r3, r2
 800c254:	d02c      	beq.n	800c2b0 <HAL_DMA_Start_IT+0x430>
 800c256:	68fb      	ldr	r3, [r7, #12]
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	4a2d      	ldr	r2, [pc, #180]	@ (800c310 <HAL_DMA_Start_IT+0x490>)
 800c25c:	4293      	cmp	r3, r2
 800c25e:	d027      	beq.n	800c2b0 <HAL_DMA_Start_IT+0x430>
 800c260:	68fb      	ldr	r3, [r7, #12]
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	4a2b      	ldr	r2, [pc, #172]	@ (800c314 <HAL_DMA_Start_IT+0x494>)
 800c266:	4293      	cmp	r3, r2
 800c268:	d022      	beq.n	800c2b0 <HAL_DMA_Start_IT+0x430>
 800c26a:	68fb      	ldr	r3, [r7, #12]
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	4a2a      	ldr	r2, [pc, #168]	@ (800c318 <HAL_DMA_Start_IT+0x498>)
 800c270:	4293      	cmp	r3, r2
 800c272:	d01d      	beq.n	800c2b0 <HAL_DMA_Start_IT+0x430>
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	4a28      	ldr	r2, [pc, #160]	@ (800c31c <HAL_DMA_Start_IT+0x49c>)
 800c27a:	4293      	cmp	r3, r2
 800c27c:	d018      	beq.n	800c2b0 <HAL_DMA_Start_IT+0x430>
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	4a27      	ldr	r2, [pc, #156]	@ (800c320 <HAL_DMA_Start_IT+0x4a0>)
 800c284:	4293      	cmp	r3, r2
 800c286:	d013      	beq.n	800c2b0 <HAL_DMA_Start_IT+0x430>
 800c288:	68fb      	ldr	r3, [r7, #12]
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	4a25      	ldr	r2, [pc, #148]	@ (800c324 <HAL_DMA_Start_IT+0x4a4>)
 800c28e:	4293      	cmp	r3, r2
 800c290:	d00e      	beq.n	800c2b0 <HAL_DMA_Start_IT+0x430>
 800c292:	68fb      	ldr	r3, [r7, #12]
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	4a24      	ldr	r2, [pc, #144]	@ (800c328 <HAL_DMA_Start_IT+0x4a8>)
 800c298:	4293      	cmp	r3, r2
 800c29a:	d009      	beq.n	800c2b0 <HAL_DMA_Start_IT+0x430>
 800c29c:	68fb      	ldr	r3, [r7, #12]
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	4a22      	ldr	r2, [pc, #136]	@ (800c32c <HAL_DMA_Start_IT+0x4ac>)
 800c2a2:	4293      	cmp	r3, r2
 800c2a4:	d004      	beq.n	800c2b0 <HAL_DMA_Start_IT+0x430>
 800c2a6:	68fb      	ldr	r3, [r7, #12]
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	4a21      	ldr	r2, [pc, #132]	@ (800c330 <HAL_DMA_Start_IT+0x4b0>)
 800c2ac:	4293      	cmp	r3, r2
 800c2ae:	d108      	bne.n	800c2c2 <HAL_DMA_Start_IT+0x442>
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	681a      	ldr	r2, [r3, #0]
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	f042 0201 	orr.w	r2, r2, #1
 800c2be:	601a      	str	r2, [r3, #0]
 800c2c0:	e012      	b.n	800c2e8 <HAL_DMA_Start_IT+0x468>
 800c2c2:	68fb      	ldr	r3, [r7, #12]
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	681a      	ldr	r2, [r3, #0]
 800c2c8:	68fb      	ldr	r3, [r7, #12]
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	f042 0201 	orr.w	r2, r2, #1
 800c2d0:	601a      	str	r2, [r3, #0]
 800c2d2:	e009      	b.n	800c2e8 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c2da:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	2200      	movs	r2, #0
 800c2e0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 800c2e4:	2301      	movs	r3, #1
 800c2e6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800c2e8:	7dfb      	ldrb	r3, [r7, #23]
}
 800c2ea:	4618      	mov	r0, r3
 800c2ec:	3718      	adds	r7, #24
 800c2ee:	46bd      	mov	sp, r7
 800c2f0:	bd80      	pop	{r7, pc}
 800c2f2:	bf00      	nop
 800c2f4:	40020010 	.word	0x40020010
 800c2f8:	40020028 	.word	0x40020028
 800c2fc:	40020040 	.word	0x40020040
 800c300:	40020058 	.word	0x40020058
 800c304:	40020070 	.word	0x40020070
 800c308:	40020088 	.word	0x40020088
 800c30c:	400200a0 	.word	0x400200a0
 800c310:	400200b8 	.word	0x400200b8
 800c314:	40020410 	.word	0x40020410
 800c318:	40020428 	.word	0x40020428
 800c31c:	40020440 	.word	0x40020440
 800c320:	40020458 	.word	0x40020458
 800c324:	40020470 	.word	0x40020470
 800c328:	40020488 	.word	0x40020488
 800c32c:	400204a0 	.word	0x400204a0
 800c330:	400204b8 	.word	0x400204b8
 800c334:	58025408 	.word	0x58025408
 800c338:	5802541c 	.word	0x5802541c
 800c33c:	58025430 	.word	0x58025430
 800c340:	58025444 	.word	0x58025444
 800c344:	58025458 	.word	0x58025458
 800c348:	5802546c 	.word	0x5802546c
 800c34c:	58025480 	.word	0x58025480
 800c350:	58025494 	.word	0x58025494

0800c354 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800c354:	b580      	push	{r7, lr}
 800c356:	b086      	sub	sp, #24
 800c358:	af00      	add	r7, sp, #0
 800c35a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 800c35c:	f7fd f902 	bl	8009564 <HAL_GetTick>
 800c360:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	2b00      	cmp	r3, #0
 800c366:	d101      	bne.n	800c36c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800c368:	2301      	movs	r3, #1
 800c36a:	e2dc      	b.n	800c926 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800c372:	b2db      	uxtb	r3, r3
 800c374:	2b02      	cmp	r3, #2
 800c376:	d008      	beq.n	800c38a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	2280      	movs	r2, #128	@ 0x80
 800c37c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	2200      	movs	r2, #0
 800c382:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 800c386:	2301      	movs	r3, #1
 800c388:	e2cd      	b.n	800c926 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	4a76      	ldr	r2, [pc, #472]	@ (800c568 <HAL_DMA_Abort+0x214>)
 800c390:	4293      	cmp	r3, r2
 800c392:	d04a      	beq.n	800c42a <HAL_DMA_Abort+0xd6>
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	4a74      	ldr	r2, [pc, #464]	@ (800c56c <HAL_DMA_Abort+0x218>)
 800c39a:	4293      	cmp	r3, r2
 800c39c:	d045      	beq.n	800c42a <HAL_DMA_Abort+0xd6>
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	4a73      	ldr	r2, [pc, #460]	@ (800c570 <HAL_DMA_Abort+0x21c>)
 800c3a4:	4293      	cmp	r3, r2
 800c3a6:	d040      	beq.n	800c42a <HAL_DMA_Abort+0xd6>
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	4a71      	ldr	r2, [pc, #452]	@ (800c574 <HAL_DMA_Abort+0x220>)
 800c3ae:	4293      	cmp	r3, r2
 800c3b0:	d03b      	beq.n	800c42a <HAL_DMA_Abort+0xd6>
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	4a70      	ldr	r2, [pc, #448]	@ (800c578 <HAL_DMA_Abort+0x224>)
 800c3b8:	4293      	cmp	r3, r2
 800c3ba:	d036      	beq.n	800c42a <HAL_DMA_Abort+0xd6>
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	4a6e      	ldr	r2, [pc, #440]	@ (800c57c <HAL_DMA_Abort+0x228>)
 800c3c2:	4293      	cmp	r3, r2
 800c3c4:	d031      	beq.n	800c42a <HAL_DMA_Abort+0xd6>
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	4a6d      	ldr	r2, [pc, #436]	@ (800c580 <HAL_DMA_Abort+0x22c>)
 800c3cc:	4293      	cmp	r3, r2
 800c3ce:	d02c      	beq.n	800c42a <HAL_DMA_Abort+0xd6>
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	4a6b      	ldr	r2, [pc, #428]	@ (800c584 <HAL_DMA_Abort+0x230>)
 800c3d6:	4293      	cmp	r3, r2
 800c3d8:	d027      	beq.n	800c42a <HAL_DMA_Abort+0xd6>
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	4a6a      	ldr	r2, [pc, #424]	@ (800c588 <HAL_DMA_Abort+0x234>)
 800c3e0:	4293      	cmp	r3, r2
 800c3e2:	d022      	beq.n	800c42a <HAL_DMA_Abort+0xd6>
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	4a68      	ldr	r2, [pc, #416]	@ (800c58c <HAL_DMA_Abort+0x238>)
 800c3ea:	4293      	cmp	r3, r2
 800c3ec:	d01d      	beq.n	800c42a <HAL_DMA_Abort+0xd6>
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	4a67      	ldr	r2, [pc, #412]	@ (800c590 <HAL_DMA_Abort+0x23c>)
 800c3f4:	4293      	cmp	r3, r2
 800c3f6:	d018      	beq.n	800c42a <HAL_DMA_Abort+0xd6>
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	4a65      	ldr	r2, [pc, #404]	@ (800c594 <HAL_DMA_Abort+0x240>)
 800c3fe:	4293      	cmp	r3, r2
 800c400:	d013      	beq.n	800c42a <HAL_DMA_Abort+0xd6>
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	4a64      	ldr	r2, [pc, #400]	@ (800c598 <HAL_DMA_Abort+0x244>)
 800c408:	4293      	cmp	r3, r2
 800c40a:	d00e      	beq.n	800c42a <HAL_DMA_Abort+0xd6>
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	4a62      	ldr	r2, [pc, #392]	@ (800c59c <HAL_DMA_Abort+0x248>)
 800c412:	4293      	cmp	r3, r2
 800c414:	d009      	beq.n	800c42a <HAL_DMA_Abort+0xd6>
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	4a61      	ldr	r2, [pc, #388]	@ (800c5a0 <HAL_DMA_Abort+0x24c>)
 800c41c:	4293      	cmp	r3, r2
 800c41e:	d004      	beq.n	800c42a <HAL_DMA_Abort+0xd6>
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	4a5f      	ldr	r2, [pc, #380]	@ (800c5a4 <HAL_DMA_Abort+0x250>)
 800c426:	4293      	cmp	r3, r2
 800c428:	d101      	bne.n	800c42e <HAL_DMA_Abort+0xda>
 800c42a:	2301      	movs	r3, #1
 800c42c:	e000      	b.n	800c430 <HAL_DMA_Abort+0xdc>
 800c42e:	2300      	movs	r3, #0
 800c430:	2b00      	cmp	r3, #0
 800c432:	d013      	beq.n	800c45c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	681b      	ldr	r3, [r3, #0]
 800c438:	681a      	ldr	r2, [r3, #0]
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	f022 021e 	bic.w	r2, r2, #30
 800c442:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	695a      	ldr	r2, [r3, #20]
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800c452:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	617b      	str	r3, [r7, #20]
 800c45a:	e00a      	b.n	800c472 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	681a      	ldr	r2, [r3, #0]
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	f022 020e 	bic.w	r2, r2, #14
 800c46a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	4a3c      	ldr	r2, [pc, #240]	@ (800c568 <HAL_DMA_Abort+0x214>)
 800c478:	4293      	cmp	r3, r2
 800c47a:	d072      	beq.n	800c562 <HAL_DMA_Abort+0x20e>
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	4a3a      	ldr	r2, [pc, #232]	@ (800c56c <HAL_DMA_Abort+0x218>)
 800c482:	4293      	cmp	r3, r2
 800c484:	d06d      	beq.n	800c562 <HAL_DMA_Abort+0x20e>
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	4a39      	ldr	r2, [pc, #228]	@ (800c570 <HAL_DMA_Abort+0x21c>)
 800c48c:	4293      	cmp	r3, r2
 800c48e:	d068      	beq.n	800c562 <HAL_DMA_Abort+0x20e>
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	4a37      	ldr	r2, [pc, #220]	@ (800c574 <HAL_DMA_Abort+0x220>)
 800c496:	4293      	cmp	r3, r2
 800c498:	d063      	beq.n	800c562 <HAL_DMA_Abort+0x20e>
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	4a36      	ldr	r2, [pc, #216]	@ (800c578 <HAL_DMA_Abort+0x224>)
 800c4a0:	4293      	cmp	r3, r2
 800c4a2:	d05e      	beq.n	800c562 <HAL_DMA_Abort+0x20e>
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	4a34      	ldr	r2, [pc, #208]	@ (800c57c <HAL_DMA_Abort+0x228>)
 800c4aa:	4293      	cmp	r3, r2
 800c4ac:	d059      	beq.n	800c562 <HAL_DMA_Abort+0x20e>
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	4a33      	ldr	r2, [pc, #204]	@ (800c580 <HAL_DMA_Abort+0x22c>)
 800c4b4:	4293      	cmp	r3, r2
 800c4b6:	d054      	beq.n	800c562 <HAL_DMA_Abort+0x20e>
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	4a31      	ldr	r2, [pc, #196]	@ (800c584 <HAL_DMA_Abort+0x230>)
 800c4be:	4293      	cmp	r3, r2
 800c4c0:	d04f      	beq.n	800c562 <HAL_DMA_Abort+0x20e>
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	4a30      	ldr	r2, [pc, #192]	@ (800c588 <HAL_DMA_Abort+0x234>)
 800c4c8:	4293      	cmp	r3, r2
 800c4ca:	d04a      	beq.n	800c562 <HAL_DMA_Abort+0x20e>
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	4a2e      	ldr	r2, [pc, #184]	@ (800c58c <HAL_DMA_Abort+0x238>)
 800c4d2:	4293      	cmp	r3, r2
 800c4d4:	d045      	beq.n	800c562 <HAL_DMA_Abort+0x20e>
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	4a2d      	ldr	r2, [pc, #180]	@ (800c590 <HAL_DMA_Abort+0x23c>)
 800c4dc:	4293      	cmp	r3, r2
 800c4de:	d040      	beq.n	800c562 <HAL_DMA_Abort+0x20e>
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	4a2b      	ldr	r2, [pc, #172]	@ (800c594 <HAL_DMA_Abort+0x240>)
 800c4e6:	4293      	cmp	r3, r2
 800c4e8:	d03b      	beq.n	800c562 <HAL_DMA_Abort+0x20e>
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	4a2a      	ldr	r2, [pc, #168]	@ (800c598 <HAL_DMA_Abort+0x244>)
 800c4f0:	4293      	cmp	r3, r2
 800c4f2:	d036      	beq.n	800c562 <HAL_DMA_Abort+0x20e>
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	4a28      	ldr	r2, [pc, #160]	@ (800c59c <HAL_DMA_Abort+0x248>)
 800c4fa:	4293      	cmp	r3, r2
 800c4fc:	d031      	beq.n	800c562 <HAL_DMA_Abort+0x20e>
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	4a27      	ldr	r2, [pc, #156]	@ (800c5a0 <HAL_DMA_Abort+0x24c>)
 800c504:	4293      	cmp	r3, r2
 800c506:	d02c      	beq.n	800c562 <HAL_DMA_Abort+0x20e>
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	4a25      	ldr	r2, [pc, #148]	@ (800c5a4 <HAL_DMA_Abort+0x250>)
 800c50e:	4293      	cmp	r3, r2
 800c510:	d027      	beq.n	800c562 <HAL_DMA_Abort+0x20e>
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	4a24      	ldr	r2, [pc, #144]	@ (800c5a8 <HAL_DMA_Abort+0x254>)
 800c518:	4293      	cmp	r3, r2
 800c51a:	d022      	beq.n	800c562 <HAL_DMA_Abort+0x20e>
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	4a22      	ldr	r2, [pc, #136]	@ (800c5ac <HAL_DMA_Abort+0x258>)
 800c522:	4293      	cmp	r3, r2
 800c524:	d01d      	beq.n	800c562 <HAL_DMA_Abort+0x20e>
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	4a21      	ldr	r2, [pc, #132]	@ (800c5b0 <HAL_DMA_Abort+0x25c>)
 800c52c:	4293      	cmp	r3, r2
 800c52e:	d018      	beq.n	800c562 <HAL_DMA_Abort+0x20e>
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	4a1f      	ldr	r2, [pc, #124]	@ (800c5b4 <HAL_DMA_Abort+0x260>)
 800c536:	4293      	cmp	r3, r2
 800c538:	d013      	beq.n	800c562 <HAL_DMA_Abort+0x20e>
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	4a1e      	ldr	r2, [pc, #120]	@ (800c5b8 <HAL_DMA_Abort+0x264>)
 800c540:	4293      	cmp	r3, r2
 800c542:	d00e      	beq.n	800c562 <HAL_DMA_Abort+0x20e>
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	4a1c      	ldr	r2, [pc, #112]	@ (800c5bc <HAL_DMA_Abort+0x268>)
 800c54a:	4293      	cmp	r3, r2
 800c54c:	d009      	beq.n	800c562 <HAL_DMA_Abort+0x20e>
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	4a1b      	ldr	r2, [pc, #108]	@ (800c5c0 <HAL_DMA_Abort+0x26c>)
 800c554:	4293      	cmp	r3, r2
 800c556:	d004      	beq.n	800c562 <HAL_DMA_Abort+0x20e>
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	4a19      	ldr	r2, [pc, #100]	@ (800c5c4 <HAL_DMA_Abort+0x270>)
 800c55e:	4293      	cmp	r3, r2
 800c560:	d132      	bne.n	800c5c8 <HAL_DMA_Abort+0x274>
 800c562:	2301      	movs	r3, #1
 800c564:	e031      	b.n	800c5ca <HAL_DMA_Abort+0x276>
 800c566:	bf00      	nop
 800c568:	40020010 	.word	0x40020010
 800c56c:	40020028 	.word	0x40020028
 800c570:	40020040 	.word	0x40020040
 800c574:	40020058 	.word	0x40020058
 800c578:	40020070 	.word	0x40020070
 800c57c:	40020088 	.word	0x40020088
 800c580:	400200a0 	.word	0x400200a0
 800c584:	400200b8 	.word	0x400200b8
 800c588:	40020410 	.word	0x40020410
 800c58c:	40020428 	.word	0x40020428
 800c590:	40020440 	.word	0x40020440
 800c594:	40020458 	.word	0x40020458
 800c598:	40020470 	.word	0x40020470
 800c59c:	40020488 	.word	0x40020488
 800c5a0:	400204a0 	.word	0x400204a0
 800c5a4:	400204b8 	.word	0x400204b8
 800c5a8:	58025408 	.word	0x58025408
 800c5ac:	5802541c 	.word	0x5802541c
 800c5b0:	58025430 	.word	0x58025430
 800c5b4:	58025444 	.word	0x58025444
 800c5b8:	58025458 	.word	0x58025458
 800c5bc:	5802546c 	.word	0x5802546c
 800c5c0:	58025480 	.word	0x58025480
 800c5c4:	58025494 	.word	0x58025494
 800c5c8:	2300      	movs	r3, #0
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	d007      	beq.n	800c5de <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c5d2:	681a      	ldr	r2, [r3, #0]
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c5d8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800c5dc:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	4a6d      	ldr	r2, [pc, #436]	@ (800c798 <HAL_DMA_Abort+0x444>)
 800c5e4:	4293      	cmp	r3, r2
 800c5e6:	d04a      	beq.n	800c67e <HAL_DMA_Abort+0x32a>
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	4a6b      	ldr	r2, [pc, #428]	@ (800c79c <HAL_DMA_Abort+0x448>)
 800c5ee:	4293      	cmp	r3, r2
 800c5f0:	d045      	beq.n	800c67e <HAL_DMA_Abort+0x32a>
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	4a6a      	ldr	r2, [pc, #424]	@ (800c7a0 <HAL_DMA_Abort+0x44c>)
 800c5f8:	4293      	cmp	r3, r2
 800c5fa:	d040      	beq.n	800c67e <HAL_DMA_Abort+0x32a>
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	4a68      	ldr	r2, [pc, #416]	@ (800c7a4 <HAL_DMA_Abort+0x450>)
 800c602:	4293      	cmp	r3, r2
 800c604:	d03b      	beq.n	800c67e <HAL_DMA_Abort+0x32a>
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	4a67      	ldr	r2, [pc, #412]	@ (800c7a8 <HAL_DMA_Abort+0x454>)
 800c60c:	4293      	cmp	r3, r2
 800c60e:	d036      	beq.n	800c67e <HAL_DMA_Abort+0x32a>
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	681b      	ldr	r3, [r3, #0]
 800c614:	4a65      	ldr	r2, [pc, #404]	@ (800c7ac <HAL_DMA_Abort+0x458>)
 800c616:	4293      	cmp	r3, r2
 800c618:	d031      	beq.n	800c67e <HAL_DMA_Abort+0x32a>
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	681b      	ldr	r3, [r3, #0]
 800c61e:	4a64      	ldr	r2, [pc, #400]	@ (800c7b0 <HAL_DMA_Abort+0x45c>)
 800c620:	4293      	cmp	r3, r2
 800c622:	d02c      	beq.n	800c67e <HAL_DMA_Abort+0x32a>
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	4a62      	ldr	r2, [pc, #392]	@ (800c7b4 <HAL_DMA_Abort+0x460>)
 800c62a:	4293      	cmp	r3, r2
 800c62c:	d027      	beq.n	800c67e <HAL_DMA_Abort+0x32a>
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	4a61      	ldr	r2, [pc, #388]	@ (800c7b8 <HAL_DMA_Abort+0x464>)
 800c634:	4293      	cmp	r3, r2
 800c636:	d022      	beq.n	800c67e <HAL_DMA_Abort+0x32a>
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	681b      	ldr	r3, [r3, #0]
 800c63c:	4a5f      	ldr	r2, [pc, #380]	@ (800c7bc <HAL_DMA_Abort+0x468>)
 800c63e:	4293      	cmp	r3, r2
 800c640:	d01d      	beq.n	800c67e <HAL_DMA_Abort+0x32a>
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	681b      	ldr	r3, [r3, #0]
 800c646:	4a5e      	ldr	r2, [pc, #376]	@ (800c7c0 <HAL_DMA_Abort+0x46c>)
 800c648:	4293      	cmp	r3, r2
 800c64a:	d018      	beq.n	800c67e <HAL_DMA_Abort+0x32a>
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	4a5c      	ldr	r2, [pc, #368]	@ (800c7c4 <HAL_DMA_Abort+0x470>)
 800c652:	4293      	cmp	r3, r2
 800c654:	d013      	beq.n	800c67e <HAL_DMA_Abort+0x32a>
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	4a5b      	ldr	r2, [pc, #364]	@ (800c7c8 <HAL_DMA_Abort+0x474>)
 800c65c:	4293      	cmp	r3, r2
 800c65e:	d00e      	beq.n	800c67e <HAL_DMA_Abort+0x32a>
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	4a59      	ldr	r2, [pc, #356]	@ (800c7cc <HAL_DMA_Abort+0x478>)
 800c666:	4293      	cmp	r3, r2
 800c668:	d009      	beq.n	800c67e <HAL_DMA_Abort+0x32a>
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	4a58      	ldr	r2, [pc, #352]	@ (800c7d0 <HAL_DMA_Abort+0x47c>)
 800c670:	4293      	cmp	r3, r2
 800c672:	d004      	beq.n	800c67e <HAL_DMA_Abort+0x32a>
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	4a56      	ldr	r2, [pc, #344]	@ (800c7d4 <HAL_DMA_Abort+0x480>)
 800c67a:	4293      	cmp	r3, r2
 800c67c:	d108      	bne.n	800c690 <HAL_DMA_Abort+0x33c>
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	681b      	ldr	r3, [r3, #0]
 800c682:	681a      	ldr	r2, [r3, #0]
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	681b      	ldr	r3, [r3, #0]
 800c688:	f022 0201 	bic.w	r2, r2, #1
 800c68c:	601a      	str	r2, [r3, #0]
 800c68e:	e007      	b.n	800c6a0 <HAL_DMA_Abort+0x34c>
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	681a      	ldr	r2, [r3, #0]
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	f022 0201 	bic.w	r2, r2, #1
 800c69e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800c6a0:	e013      	b.n	800c6ca <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800c6a2:	f7fc ff5f 	bl	8009564 <HAL_GetTick>
 800c6a6:	4602      	mov	r2, r0
 800c6a8:	693b      	ldr	r3, [r7, #16]
 800c6aa:	1ad3      	subs	r3, r2, r3
 800c6ac:	2b05      	cmp	r3, #5
 800c6ae:	d90c      	bls.n	800c6ca <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	2220      	movs	r2, #32
 800c6b4:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	2203      	movs	r2, #3
 800c6ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	2200      	movs	r2, #0
 800c6c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 800c6c6:	2301      	movs	r3, #1
 800c6c8:	e12d      	b.n	800c926 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800c6ca:	697b      	ldr	r3, [r7, #20]
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	f003 0301 	and.w	r3, r3, #1
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d1e5      	bne.n	800c6a2 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	4a2f      	ldr	r2, [pc, #188]	@ (800c798 <HAL_DMA_Abort+0x444>)
 800c6dc:	4293      	cmp	r3, r2
 800c6de:	d04a      	beq.n	800c776 <HAL_DMA_Abort+0x422>
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	681b      	ldr	r3, [r3, #0]
 800c6e4:	4a2d      	ldr	r2, [pc, #180]	@ (800c79c <HAL_DMA_Abort+0x448>)
 800c6e6:	4293      	cmp	r3, r2
 800c6e8:	d045      	beq.n	800c776 <HAL_DMA_Abort+0x422>
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	4a2c      	ldr	r2, [pc, #176]	@ (800c7a0 <HAL_DMA_Abort+0x44c>)
 800c6f0:	4293      	cmp	r3, r2
 800c6f2:	d040      	beq.n	800c776 <HAL_DMA_Abort+0x422>
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	4a2a      	ldr	r2, [pc, #168]	@ (800c7a4 <HAL_DMA_Abort+0x450>)
 800c6fa:	4293      	cmp	r3, r2
 800c6fc:	d03b      	beq.n	800c776 <HAL_DMA_Abort+0x422>
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	4a29      	ldr	r2, [pc, #164]	@ (800c7a8 <HAL_DMA_Abort+0x454>)
 800c704:	4293      	cmp	r3, r2
 800c706:	d036      	beq.n	800c776 <HAL_DMA_Abort+0x422>
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	4a27      	ldr	r2, [pc, #156]	@ (800c7ac <HAL_DMA_Abort+0x458>)
 800c70e:	4293      	cmp	r3, r2
 800c710:	d031      	beq.n	800c776 <HAL_DMA_Abort+0x422>
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	4a26      	ldr	r2, [pc, #152]	@ (800c7b0 <HAL_DMA_Abort+0x45c>)
 800c718:	4293      	cmp	r3, r2
 800c71a:	d02c      	beq.n	800c776 <HAL_DMA_Abort+0x422>
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	4a24      	ldr	r2, [pc, #144]	@ (800c7b4 <HAL_DMA_Abort+0x460>)
 800c722:	4293      	cmp	r3, r2
 800c724:	d027      	beq.n	800c776 <HAL_DMA_Abort+0x422>
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	4a23      	ldr	r2, [pc, #140]	@ (800c7b8 <HAL_DMA_Abort+0x464>)
 800c72c:	4293      	cmp	r3, r2
 800c72e:	d022      	beq.n	800c776 <HAL_DMA_Abort+0x422>
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	4a21      	ldr	r2, [pc, #132]	@ (800c7bc <HAL_DMA_Abort+0x468>)
 800c736:	4293      	cmp	r3, r2
 800c738:	d01d      	beq.n	800c776 <HAL_DMA_Abort+0x422>
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	4a20      	ldr	r2, [pc, #128]	@ (800c7c0 <HAL_DMA_Abort+0x46c>)
 800c740:	4293      	cmp	r3, r2
 800c742:	d018      	beq.n	800c776 <HAL_DMA_Abort+0x422>
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	4a1e      	ldr	r2, [pc, #120]	@ (800c7c4 <HAL_DMA_Abort+0x470>)
 800c74a:	4293      	cmp	r3, r2
 800c74c:	d013      	beq.n	800c776 <HAL_DMA_Abort+0x422>
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	4a1d      	ldr	r2, [pc, #116]	@ (800c7c8 <HAL_DMA_Abort+0x474>)
 800c754:	4293      	cmp	r3, r2
 800c756:	d00e      	beq.n	800c776 <HAL_DMA_Abort+0x422>
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	4a1b      	ldr	r2, [pc, #108]	@ (800c7cc <HAL_DMA_Abort+0x478>)
 800c75e:	4293      	cmp	r3, r2
 800c760:	d009      	beq.n	800c776 <HAL_DMA_Abort+0x422>
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	4a1a      	ldr	r2, [pc, #104]	@ (800c7d0 <HAL_DMA_Abort+0x47c>)
 800c768:	4293      	cmp	r3, r2
 800c76a:	d004      	beq.n	800c776 <HAL_DMA_Abort+0x422>
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	4a18      	ldr	r2, [pc, #96]	@ (800c7d4 <HAL_DMA_Abort+0x480>)
 800c772:	4293      	cmp	r3, r2
 800c774:	d101      	bne.n	800c77a <HAL_DMA_Abort+0x426>
 800c776:	2301      	movs	r3, #1
 800c778:	e000      	b.n	800c77c <HAL_DMA_Abort+0x428>
 800c77a:	2300      	movs	r3, #0
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d02b      	beq.n	800c7d8 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c784:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c78a:	f003 031f 	and.w	r3, r3, #31
 800c78e:	223f      	movs	r2, #63	@ 0x3f
 800c790:	409a      	lsls	r2, r3
 800c792:	68bb      	ldr	r3, [r7, #8]
 800c794:	609a      	str	r2, [r3, #8]
 800c796:	e02a      	b.n	800c7ee <HAL_DMA_Abort+0x49a>
 800c798:	40020010 	.word	0x40020010
 800c79c:	40020028 	.word	0x40020028
 800c7a0:	40020040 	.word	0x40020040
 800c7a4:	40020058 	.word	0x40020058
 800c7a8:	40020070 	.word	0x40020070
 800c7ac:	40020088 	.word	0x40020088
 800c7b0:	400200a0 	.word	0x400200a0
 800c7b4:	400200b8 	.word	0x400200b8
 800c7b8:	40020410 	.word	0x40020410
 800c7bc:	40020428 	.word	0x40020428
 800c7c0:	40020440 	.word	0x40020440
 800c7c4:	40020458 	.word	0x40020458
 800c7c8:	40020470 	.word	0x40020470
 800c7cc:	40020488 	.word	0x40020488
 800c7d0:	400204a0 	.word	0x400204a0
 800c7d4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c7dc:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c7e2:	f003 031f 	and.w	r3, r3, #31
 800c7e6:	2201      	movs	r2, #1
 800c7e8:	409a      	lsls	r2, r3
 800c7ea:	68fb      	ldr	r3, [r7, #12]
 800c7ec:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	681b      	ldr	r3, [r3, #0]
 800c7f2:	4a4f      	ldr	r2, [pc, #316]	@ (800c930 <HAL_DMA_Abort+0x5dc>)
 800c7f4:	4293      	cmp	r3, r2
 800c7f6:	d072      	beq.n	800c8de <HAL_DMA_Abort+0x58a>
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	4a4d      	ldr	r2, [pc, #308]	@ (800c934 <HAL_DMA_Abort+0x5e0>)
 800c7fe:	4293      	cmp	r3, r2
 800c800:	d06d      	beq.n	800c8de <HAL_DMA_Abort+0x58a>
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	681b      	ldr	r3, [r3, #0]
 800c806:	4a4c      	ldr	r2, [pc, #304]	@ (800c938 <HAL_DMA_Abort+0x5e4>)
 800c808:	4293      	cmp	r3, r2
 800c80a:	d068      	beq.n	800c8de <HAL_DMA_Abort+0x58a>
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	681b      	ldr	r3, [r3, #0]
 800c810:	4a4a      	ldr	r2, [pc, #296]	@ (800c93c <HAL_DMA_Abort+0x5e8>)
 800c812:	4293      	cmp	r3, r2
 800c814:	d063      	beq.n	800c8de <HAL_DMA_Abort+0x58a>
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	681b      	ldr	r3, [r3, #0]
 800c81a:	4a49      	ldr	r2, [pc, #292]	@ (800c940 <HAL_DMA_Abort+0x5ec>)
 800c81c:	4293      	cmp	r3, r2
 800c81e:	d05e      	beq.n	800c8de <HAL_DMA_Abort+0x58a>
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	681b      	ldr	r3, [r3, #0]
 800c824:	4a47      	ldr	r2, [pc, #284]	@ (800c944 <HAL_DMA_Abort+0x5f0>)
 800c826:	4293      	cmp	r3, r2
 800c828:	d059      	beq.n	800c8de <HAL_DMA_Abort+0x58a>
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	4a46      	ldr	r2, [pc, #280]	@ (800c948 <HAL_DMA_Abort+0x5f4>)
 800c830:	4293      	cmp	r3, r2
 800c832:	d054      	beq.n	800c8de <HAL_DMA_Abort+0x58a>
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	681b      	ldr	r3, [r3, #0]
 800c838:	4a44      	ldr	r2, [pc, #272]	@ (800c94c <HAL_DMA_Abort+0x5f8>)
 800c83a:	4293      	cmp	r3, r2
 800c83c:	d04f      	beq.n	800c8de <HAL_DMA_Abort+0x58a>
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	4a43      	ldr	r2, [pc, #268]	@ (800c950 <HAL_DMA_Abort+0x5fc>)
 800c844:	4293      	cmp	r3, r2
 800c846:	d04a      	beq.n	800c8de <HAL_DMA_Abort+0x58a>
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	4a41      	ldr	r2, [pc, #260]	@ (800c954 <HAL_DMA_Abort+0x600>)
 800c84e:	4293      	cmp	r3, r2
 800c850:	d045      	beq.n	800c8de <HAL_DMA_Abort+0x58a>
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	4a40      	ldr	r2, [pc, #256]	@ (800c958 <HAL_DMA_Abort+0x604>)
 800c858:	4293      	cmp	r3, r2
 800c85a:	d040      	beq.n	800c8de <HAL_DMA_Abort+0x58a>
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	4a3e      	ldr	r2, [pc, #248]	@ (800c95c <HAL_DMA_Abort+0x608>)
 800c862:	4293      	cmp	r3, r2
 800c864:	d03b      	beq.n	800c8de <HAL_DMA_Abort+0x58a>
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	681b      	ldr	r3, [r3, #0]
 800c86a:	4a3d      	ldr	r2, [pc, #244]	@ (800c960 <HAL_DMA_Abort+0x60c>)
 800c86c:	4293      	cmp	r3, r2
 800c86e:	d036      	beq.n	800c8de <HAL_DMA_Abort+0x58a>
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	4a3b      	ldr	r2, [pc, #236]	@ (800c964 <HAL_DMA_Abort+0x610>)
 800c876:	4293      	cmp	r3, r2
 800c878:	d031      	beq.n	800c8de <HAL_DMA_Abort+0x58a>
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	681b      	ldr	r3, [r3, #0]
 800c87e:	4a3a      	ldr	r2, [pc, #232]	@ (800c968 <HAL_DMA_Abort+0x614>)
 800c880:	4293      	cmp	r3, r2
 800c882:	d02c      	beq.n	800c8de <HAL_DMA_Abort+0x58a>
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	4a38      	ldr	r2, [pc, #224]	@ (800c96c <HAL_DMA_Abort+0x618>)
 800c88a:	4293      	cmp	r3, r2
 800c88c:	d027      	beq.n	800c8de <HAL_DMA_Abort+0x58a>
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	681b      	ldr	r3, [r3, #0]
 800c892:	4a37      	ldr	r2, [pc, #220]	@ (800c970 <HAL_DMA_Abort+0x61c>)
 800c894:	4293      	cmp	r3, r2
 800c896:	d022      	beq.n	800c8de <HAL_DMA_Abort+0x58a>
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	4a35      	ldr	r2, [pc, #212]	@ (800c974 <HAL_DMA_Abort+0x620>)
 800c89e:	4293      	cmp	r3, r2
 800c8a0:	d01d      	beq.n	800c8de <HAL_DMA_Abort+0x58a>
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	4a34      	ldr	r2, [pc, #208]	@ (800c978 <HAL_DMA_Abort+0x624>)
 800c8a8:	4293      	cmp	r3, r2
 800c8aa:	d018      	beq.n	800c8de <HAL_DMA_Abort+0x58a>
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	4a32      	ldr	r2, [pc, #200]	@ (800c97c <HAL_DMA_Abort+0x628>)
 800c8b2:	4293      	cmp	r3, r2
 800c8b4:	d013      	beq.n	800c8de <HAL_DMA_Abort+0x58a>
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	681b      	ldr	r3, [r3, #0]
 800c8ba:	4a31      	ldr	r2, [pc, #196]	@ (800c980 <HAL_DMA_Abort+0x62c>)
 800c8bc:	4293      	cmp	r3, r2
 800c8be:	d00e      	beq.n	800c8de <HAL_DMA_Abort+0x58a>
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	681b      	ldr	r3, [r3, #0]
 800c8c4:	4a2f      	ldr	r2, [pc, #188]	@ (800c984 <HAL_DMA_Abort+0x630>)
 800c8c6:	4293      	cmp	r3, r2
 800c8c8:	d009      	beq.n	800c8de <HAL_DMA_Abort+0x58a>
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	681b      	ldr	r3, [r3, #0]
 800c8ce:	4a2e      	ldr	r2, [pc, #184]	@ (800c988 <HAL_DMA_Abort+0x634>)
 800c8d0:	4293      	cmp	r3, r2
 800c8d2:	d004      	beq.n	800c8de <HAL_DMA_Abort+0x58a>
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	4a2c      	ldr	r2, [pc, #176]	@ (800c98c <HAL_DMA_Abort+0x638>)
 800c8da:	4293      	cmp	r3, r2
 800c8dc:	d101      	bne.n	800c8e2 <HAL_DMA_Abort+0x58e>
 800c8de:	2301      	movs	r3, #1
 800c8e0:	e000      	b.n	800c8e4 <HAL_DMA_Abort+0x590>
 800c8e2:	2300      	movs	r3, #0
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	d015      	beq.n	800c914 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c8ec:	687a      	ldr	r2, [r7, #4]
 800c8ee:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800c8f0:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	d00c      	beq.n	800c914 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c8fe:	681a      	ldr	r2, [r3, #0]
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c904:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800c908:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c90e:	687a      	ldr	r2, [r7, #4]
 800c910:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800c912:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	2201      	movs	r2, #1
 800c918:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	2200      	movs	r2, #0
 800c920:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 800c924:	2300      	movs	r3, #0
}
 800c926:	4618      	mov	r0, r3
 800c928:	3718      	adds	r7, #24
 800c92a:	46bd      	mov	sp, r7
 800c92c:	bd80      	pop	{r7, pc}
 800c92e:	bf00      	nop
 800c930:	40020010 	.word	0x40020010
 800c934:	40020028 	.word	0x40020028
 800c938:	40020040 	.word	0x40020040
 800c93c:	40020058 	.word	0x40020058
 800c940:	40020070 	.word	0x40020070
 800c944:	40020088 	.word	0x40020088
 800c948:	400200a0 	.word	0x400200a0
 800c94c:	400200b8 	.word	0x400200b8
 800c950:	40020410 	.word	0x40020410
 800c954:	40020428 	.word	0x40020428
 800c958:	40020440 	.word	0x40020440
 800c95c:	40020458 	.word	0x40020458
 800c960:	40020470 	.word	0x40020470
 800c964:	40020488 	.word	0x40020488
 800c968:	400204a0 	.word	0x400204a0
 800c96c:	400204b8 	.word	0x400204b8
 800c970:	58025408 	.word	0x58025408
 800c974:	5802541c 	.word	0x5802541c
 800c978:	58025430 	.word	0x58025430
 800c97c:	58025444 	.word	0x58025444
 800c980:	58025458 	.word	0x58025458
 800c984:	5802546c 	.word	0x5802546c
 800c988:	58025480 	.word	0x58025480
 800c98c:	58025494 	.word	0x58025494

0800c990 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800c990:	b580      	push	{r7, lr}
 800c992:	b084      	sub	sp, #16
 800c994:	af00      	add	r7, sp, #0
 800c996:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	d101      	bne.n	800c9a2 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800c99e:	2301      	movs	r3, #1
 800c9a0:	e237      	b.n	800ce12 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800c9a8:	b2db      	uxtb	r3, r3
 800c9aa:	2b02      	cmp	r3, #2
 800c9ac:	d004      	beq.n	800c9b8 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	2280      	movs	r2, #128	@ 0x80
 800c9b2:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800c9b4:	2301      	movs	r3, #1
 800c9b6:	e22c      	b.n	800ce12 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	681b      	ldr	r3, [r3, #0]
 800c9bc:	4a5c      	ldr	r2, [pc, #368]	@ (800cb30 <HAL_DMA_Abort_IT+0x1a0>)
 800c9be:	4293      	cmp	r3, r2
 800c9c0:	d04a      	beq.n	800ca58 <HAL_DMA_Abort_IT+0xc8>
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	4a5b      	ldr	r2, [pc, #364]	@ (800cb34 <HAL_DMA_Abort_IT+0x1a4>)
 800c9c8:	4293      	cmp	r3, r2
 800c9ca:	d045      	beq.n	800ca58 <HAL_DMA_Abort_IT+0xc8>
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	681b      	ldr	r3, [r3, #0]
 800c9d0:	4a59      	ldr	r2, [pc, #356]	@ (800cb38 <HAL_DMA_Abort_IT+0x1a8>)
 800c9d2:	4293      	cmp	r3, r2
 800c9d4:	d040      	beq.n	800ca58 <HAL_DMA_Abort_IT+0xc8>
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	681b      	ldr	r3, [r3, #0]
 800c9da:	4a58      	ldr	r2, [pc, #352]	@ (800cb3c <HAL_DMA_Abort_IT+0x1ac>)
 800c9dc:	4293      	cmp	r3, r2
 800c9de:	d03b      	beq.n	800ca58 <HAL_DMA_Abort_IT+0xc8>
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	681b      	ldr	r3, [r3, #0]
 800c9e4:	4a56      	ldr	r2, [pc, #344]	@ (800cb40 <HAL_DMA_Abort_IT+0x1b0>)
 800c9e6:	4293      	cmp	r3, r2
 800c9e8:	d036      	beq.n	800ca58 <HAL_DMA_Abort_IT+0xc8>
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	4a55      	ldr	r2, [pc, #340]	@ (800cb44 <HAL_DMA_Abort_IT+0x1b4>)
 800c9f0:	4293      	cmp	r3, r2
 800c9f2:	d031      	beq.n	800ca58 <HAL_DMA_Abort_IT+0xc8>
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	4a53      	ldr	r2, [pc, #332]	@ (800cb48 <HAL_DMA_Abort_IT+0x1b8>)
 800c9fa:	4293      	cmp	r3, r2
 800c9fc:	d02c      	beq.n	800ca58 <HAL_DMA_Abort_IT+0xc8>
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	681b      	ldr	r3, [r3, #0]
 800ca02:	4a52      	ldr	r2, [pc, #328]	@ (800cb4c <HAL_DMA_Abort_IT+0x1bc>)
 800ca04:	4293      	cmp	r3, r2
 800ca06:	d027      	beq.n	800ca58 <HAL_DMA_Abort_IT+0xc8>
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	681b      	ldr	r3, [r3, #0]
 800ca0c:	4a50      	ldr	r2, [pc, #320]	@ (800cb50 <HAL_DMA_Abort_IT+0x1c0>)
 800ca0e:	4293      	cmp	r3, r2
 800ca10:	d022      	beq.n	800ca58 <HAL_DMA_Abort_IT+0xc8>
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	4a4f      	ldr	r2, [pc, #316]	@ (800cb54 <HAL_DMA_Abort_IT+0x1c4>)
 800ca18:	4293      	cmp	r3, r2
 800ca1a:	d01d      	beq.n	800ca58 <HAL_DMA_Abort_IT+0xc8>
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	4a4d      	ldr	r2, [pc, #308]	@ (800cb58 <HAL_DMA_Abort_IT+0x1c8>)
 800ca22:	4293      	cmp	r3, r2
 800ca24:	d018      	beq.n	800ca58 <HAL_DMA_Abort_IT+0xc8>
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	681b      	ldr	r3, [r3, #0]
 800ca2a:	4a4c      	ldr	r2, [pc, #304]	@ (800cb5c <HAL_DMA_Abort_IT+0x1cc>)
 800ca2c:	4293      	cmp	r3, r2
 800ca2e:	d013      	beq.n	800ca58 <HAL_DMA_Abort_IT+0xc8>
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	4a4a      	ldr	r2, [pc, #296]	@ (800cb60 <HAL_DMA_Abort_IT+0x1d0>)
 800ca36:	4293      	cmp	r3, r2
 800ca38:	d00e      	beq.n	800ca58 <HAL_DMA_Abort_IT+0xc8>
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	681b      	ldr	r3, [r3, #0]
 800ca3e:	4a49      	ldr	r2, [pc, #292]	@ (800cb64 <HAL_DMA_Abort_IT+0x1d4>)
 800ca40:	4293      	cmp	r3, r2
 800ca42:	d009      	beq.n	800ca58 <HAL_DMA_Abort_IT+0xc8>
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	4a47      	ldr	r2, [pc, #284]	@ (800cb68 <HAL_DMA_Abort_IT+0x1d8>)
 800ca4a:	4293      	cmp	r3, r2
 800ca4c:	d004      	beq.n	800ca58 <HAL_DMA_Abort_IT+0xc8>
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	681b      	ldr	r3, [r3, #0]
 800ca52:	4a46      	ldr	r2, [pc, #280]	@ (800cb6c <HAL_DMA_Abort_IT+0x1dc>)
 800ca54:	4293      	cmp	r3, r2
 800ca56:	d101      	bne.n	800ca5c <HAL_DMA_Abort_IT+0xcc>
 800ca58:	2301      	movs	r3, #1
 800ca5a:	e000      	b.n	800ca5e <HAL_DMA_Abort_IT+0xce>
 800ca5c:	2300      	movs	r3, #0
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	f000 8086 	beq.w	800cb70 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	2204      	movs	r2, #4
 800ca68:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	4a2f      	ldr	r2, [pc, #188]	@ (800cb30 <HAL_DMA_Abort_IT+0x1a0>)
 800ca72:	4293      	cmp	r3, r2
 800ca74:	d04a      	beq.n	800cb0c <HAL_DMA_Abort_IT+0x17c>
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	681b      	ldr	r3, [r3, #0]
 800ca7a:	4a2e      	ldr	r2, [pc, #184]	@ (800cb34 <HAL_DMA_Abort_IT+0x1a4>)
 800ca7c:	4293      	cmp	r3, r2
 800ca7e:	d045      	beq.n	800cb0c <HAL_DMA_Abort_IT+0x17c>
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	4a2c      	ldr	r2, [pc, #176]	@ (800cb38 <HAL_DMA_Abort_IT+0x1a8>)
 800ca86:	4293      	cmp	r3, r2
 800ca88:	d040      	beq.n	800cb0c <HAL_DMA_Abort_IT+0x17c>
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	681b      	ldr	r3, [r3, #0]
 800ca8e:	4a2b      	ldr	r2, [pc, #172]	@ (800cb3c <HAL_DMA_Abort_IT+0x1ac>)
 800ca90:	4293      	cmp	r3, r2
 800ca92:	d03b      	beq.n	800cb0c <HAL_DMA_Abort_IT+0x17c>
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	681b      	ldr	r3, [r3, #0]
 800ca98:	4a29      	ldr	r2, [pc, #164]	@ (800cb40 <HAL_DMA_Abort_IT+0x1b0>)
 800ca9a:	4293      	cmp	r3, r2
 800ca9c:	d036      	beq.n	800cb0c <HAL_DMA_Abort_IT+0x17c>
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	681b      	ldr	r3, [r3, #0]
 800caa2:	4a28      	ldr	r2, [pc, #160]	@ (800cb44 <HAL_DMA_Abort_IT+0x1b4>)
 800caa4:	4293      	cmp	r3, r2
 800caa6:	d031      	beq.n	800cb0c <HAL_DMA_Abort_IT+0x17c>
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	4a26      	ldr	r2, [pc, #152]	@ (800cb48 <HAL_DMA_Abort_IT+0x1b8>)
 800caae:	4293      	cmp	r3, r2
 800cab0:	d02c      	beq.n	800cb0c <HAL_DMA_Abort_IT+0x17c>
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	4a25      	ldr	r2, [pc, #148]	@ (800cb4c <HAL_DMA_Abort_IT+0x1bc>)
 800cab8:	4293      	cmp	r3, r2
 800caba:	d027      	beq.n	800cb0c <HAL_DMA_Abort_IT+0x17c>
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	681b      	ldr	r3, [r3, #0]
 800cac0:	4a23      	ldr	r2, [pc, #140]	@ (800cb50 <HAL_DMA_Abort_IT+0x1c0>)
 800cac2:	4293      	cmp	r3, r2
 800cac4:	d022      	beq.n	800cb0c <HAL_DMA_Abort_IT+0x17c>
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	681b      	ldr	r3, [r3, #0]
 800caca:	4a22      	ldr	r2, [pc, #136]	@ (800cb54 <HAL_DMA_Abort_IT+0x1c4>)
 800cacc:	4293      	cmp	r3, r2
 800cace:	d01d      	beq.n	800cb0c <HAL_DMA_Abort_IT+0x17c>
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	4a20      	ldr	r2, [pc, #128]	@ (800cb58 <HAL_DMA_Abort_IT+0x1c8>)
 800cad6:	4293      	cmp	r3, r2
 800cad8:	d018      	beq.n	800cb0c <HAL_DMA_Abort_IT+0x17c>
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	681b      	ldr	r3, [r3, #0]
 800cade:	4a1f      	ldr	r2, [pc, #124]	@ (800cb5c <HAL_DMA_Abort_IT+0x1cc>)
 800cae0:	4293      	cmp	r3, r2
 800cae2:	d013      	beq.n	800cb0c <HAL_DMA_Abort_IT+0x17c>
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	681b      	ldr	r3, [r3, #0]
 800cae8:	4a1d      	ldr	r2, [pc, #116]	@ (800cb60 <HAL_DMA_Abort_IT+0x1d0>)
 800caea:	4293      	cmp	r3, r2
 800caec:	d00e      	beq.n	800cb0c <HAL_DMA_Abort_IT+0x17c>
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	4a1c      	ldr	r2, [pc, #112]	@ (800cb64 <HAL_DMA_Abort_IT+0x1d4>)
 800caf4:	4293      	cmp	r3, r2
 800caf6:	d009      	beq.n	800cb0c <HAL_DMA_Abort_IT+0x17c>
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	4a1a      	ldr	r2, [pc, #104]	@ (800cb68 <HAL_DMA_Abort_IT+0x1d8>)
 800cafe:	4293      	cmp	r3, r2
 800cb00:	d004      	beq.n	800cb0c <HAL_DMA_Abort_IT+0x17c>
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	4a19      	ldr	r2, [pc, #100]	@ (800cb6c <HAL_DMA_Abort_IT+0x1dc>)
 800cb08:	4293      	cmp	r3, r2
 800cb0a:	d108      	bne.n	800cb1e <HAL_DMA_Abort_IT+0x18e>
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	681a      	ldr	r2, [r3, #0]
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	f022 0201 	bic.w	r2, r2, #1
 800cb1a:	601a      	str	r2, [r3, #0]
 800cb1c:	e178      	b.n	800ce10 <HAL_DMA_Abort_IT+0x480>
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	681b      	ldr	r3, [r3, #0]
 800cb22:	681a      	ldr	r2, [r3, #0]
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	681b      	ldr	r3, [r3, #0]
 800cb28:	f022 0201 	bic.w	r2, r2, #1
 800cb2c:	601a      	str	r2, [r3, #0]
 800cb2e:	e16f      	b.n	800ce10 <HAL_DMA_Abort_IT+0x480>
 800cb30:	40020010 	.word	0x40020010
 800cb34:	40020028 	.word	0x40020028
 800cb38:	40020040 	.word	0x40020040
 800cb3c:	40020058 	.word	0x40020058
 800cb40:	40020070 	.word	0x40020070
 800cb44:	40020088 	.word	0x40020088
 800cb48:	400200a0 	.word	0x400200a0
 800cb4c:	400200b8 	.word	0x400200b8
 800cb50:	40020410 	.word	0x40020410
 800cb54:	40020428 	.word	0x40020428
 800cb58:	40020440 	.word	0x40020440
 800cb5c:	40020458 	.word	0x40020458
 800cb60:	40020470 	.word	0x40020470
 800cb64:	40020488 	.word	0x40020488
 800cb68:	400204a0 	.word	0x400204a0
 800cb6c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	681a      	ldr	r2, [r3, #0]
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	681b      	ldr	r3, [r3, #0]
 800cb7a:	f022 020e 	bic.w	r2, r2, #14
 800cb7e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	4a6c      	ldr	r2, [pc, #432]	@ (800cd38 <HAL_DMA_Abort_IT+0x3a8>)
 800cb86:	4293      	cmp	r3, r2
 800cb88:	d04a      	beq.n	800cc20 <HAL_DMA_Abort_IT+0x290>
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	681b      	ldr	r3, [r3, #0]
 800cb8e:	4a6b      	ldr	r2, [pc, #428]	@ (800cd3c <HAL_DMA_Abort_IT+0x3ac>)
 800cb90:	4293      	cmp	r3, r2
 800cb92:	d045      	beq.n	800cc20 <HAL_DMA_Abort_IT+0x290>
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	681b      	ldr	r3, [r3, #0]
 800cb98:	4a69      	ldr	r2, [pc, #420]	@ (800cd40 <HAL_DMA_Abort_IT+0x3b0>)
 800cb9a:	4293      	cmp	r3, r2
 800cb9c:	d040      	beq.n	800cc20 <HAL_DMA_Abort_IT+0x290>
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	681b      	ldr	r3, [r3, #0]
 800cba2:	4a68      	ldr	r2, [pc, #416]	@ (800cd44 <HAL_DMA_Abort_IT+0x3b4>)
 800cba4:	4293      	cmp	r3, r2
 800cba6:	d03b      	beq.n	800cc20 <HAL_DMA_Abort_IT+0x290>
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	681b      	ldr	r3, [r3, #0]
 800cbac:	4a66      	ldr	r2, [pc, #408]	@ (800cd48 <HAL_DMA_Abort_IT+0x3b8>)
 800cbae:	4293      	cmp	r3, r2
 800cbb0:	d036      	beq.n	800cc20 <HAL_DMA_Abort_IT+0x290>
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	681b      	ldr	r3, [r3, #0]
 800cbb6:	4a65      	ldr	r2, [pc, #404]	@ (800cd4c <HAL_DMA_Abort_IT+0x3bc>)
 800cbb8:	4293      	cmp	r3, r2
 800cbba:	d031      	beq.n	800cc20 <HAL_DMA_Abort_IT+0x290>
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	4a63      	ldr	r2, [pc, #396]	@ (800cd50 <HAL_DMA_Abort_IT+0x3c0>)
 800cbc2:	4293      	cmp	r3, r2
 800cbc4:	d02c      	beq.n	800cc20 <HAL_DMA_Abort_IT+0x290>
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	681b      	ldr	r3, [r3, #0]
 800cbca:	4a62      	ldr	r2, [pc, #392]	@ (800cd54 <HAL_DMA_Abort_IT+0x3c4>)
 800cbcc:	4293      	cmp	r3, r2
 800cbce:	d027      	beq.n	800cc20 <HAL_DMA_Abort_IT+0x290>
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	681b      	ldr	r3, [r3, #0]
 800cbd4:	4a60      	ldr	r2, [pc, #384]	@ (800cd58 <HAL_DMA_Abort_IT+0x3c8>)
 800cbd6:	4293      	cmp	r3, r2
 800cbd8:	d022      	beq.n	800cc20 <HAL_DMA_Abort_IT+0x290>
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	681b      	ldr	r3, [r3, #0]
 800cbde:	4a5f      	ldr	r2, [pc, #380]	@ (800cd5c <HAL_DMA_Abort_IT+0x3cc>)
 800cbe0:	4293      	cmp	r3, r2
 800cbe2:	d01d      	beq.n	800cc20 <HAL_DMA_Abort_IT+0x290>
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	681b      	ldr	r3, [r3, #0]
 800cbe8:	4a5d      	ldr	r2, [pc, #372]	@ (800cd60 <HAL_DMA_Abort_IT+0x3d0>)
 800cbea:	4293      	cmp	r3, r2
 800cbec:	d018      	beq.n	800cc20 <HAL_DMA_Abort_IT+0x290>
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	681b      	ldr	r3, [r3, #0]
 800cbf2:	4a5c      	ldr	r2, [pc, #368]	@ (800cd64 <HAL_DMA_Abort_IT+0x3d4>)
 800cbf4:	4293      	cmp	r3, r2
 800cbf6:	d013      	beq.n	800cc20 <HAL_DMA_Abort_IT+0x290>
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	4a5a      	ldr	r2, [pc, #360]	@ (800cd68 <HAL_DMA_Abort_IT+0x3d8>)
 800cbfe:	4293      	cmp	r3, r2
 800cc00:	d00e      	beq.n	800cc20 <HAL_DMA_Abort_IT+0x290>
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	681b      	ldr	r3, [r3, #0]
 800cc06:	4a59      	ldr	r2, [pc, #356]	@ (800cd6c <HAL_DMA_Abort_IT+0x3dc>)
 800cc08:	4293      	cmp	r3, r2
 800cc0a:	d009      	beq.n	800cc20 <HAL_DMA_Abort_IT+0x290>
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	681b      	ldr	r3, [r3, #0]
 800cc10:	4a57      	ldr	r2, [pc, #348]	@ (800cd70 <HAL_DMA_Abort_IT+0x3e0>)
 800cc12:	4293      	cmp	r3, r2
 800cc14:	d004      	beq.n	800cc20 <HAL_DMA_Abort_IT+0x290>
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	681b      	ldr	r3, [r3, #0]
 800cc1a:	4a56      	ldr	r2, [pc, #344]	@ (800cd74 <HAL_DMA_Abort_IT+0x3e4>)
 800cc1c:	4293      	cmp	r3, r2
 800cc1e:	d108      	bne.n	800cc32 <HAL_DMA_Abort_IT+0x2a2>
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	681b      	ldr	r3, [r3, #0]
 800cc24:	681a      	ldr	r2, [r3, #0]
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	f022 0201 	bic.w	r2, r2, #1
 800cc2e:	601a      	str	r2, [r3, #0]
 800cc30:	e007      	b.n	800cc42 <HAL_DMA_Abort_IT+0x2b2>
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	681b      	ldr	r3, [r3, #0]
 800cc36:	681a      	ldr	r2, [r3, #0]
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	681b      	ldr	r3, [r3, #0]
 800cc3c:	f022 0201 	bic.w	r2, r2, #1
 800cc40:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	681b      	ldr	r3, [r3, #0]
 800cc46:	4a3c      	ldr	r2, [pc, #240]	@ (800cd38 <HAL_DMA_Abort_IT+0x3a8>)
 800cc48:	4293      	cmp	r3, r2
 800cc4a:	d072      	beq.n	800cd32 <HAL_DMA_Abort_IT+0x3a2>
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	681b      	ldr	r3, [r3, #0]
 800cc50:	4a3a      	ldr	r2, [pc, #232]	@ (800cd3c <HAL_DMA_Abort_IT+0x3ac>)
 800cc52:	4293      	cmp	r3, r2
 800cc54:	d06d      	beq.n	800cd32 <HAL_DMA_Abort_IT+0x3a2>
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	681b      	ldr	r3, [r3, #0]
 800cc5a:	4a39      	ldr	r2, [pc, #228]	@ (800cd40 <HAL_DMA_Abort_IT+0x3b0>)
 800cc5c:	4293      	cmp	r3, r2
 800cc5e:	d068      	beq.n	800cd32 <HAL_DMA_Abort_IT+0x3a2>
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	681b      	ldr	r3, [r3, #0]
 800cc64:	4a37      	ldr	r2, [pc, #220]	@ (800cd44 <HAL_DMA_Abort_IT+0x3b4>)
 800cc66:	4293      	cmp	r3, r2
 800cc68:	d063      	beq.n	800cd32 <HAL_DMA_Abort_IT+0x3a2>
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	4a36      	ldr	r2, [pc, #216]	@ (800cd48 <HAL_DMA_Abort_IT+0x3b8>)
 800cc70:	4293      	cmp	r3, r2
 800cc72:	d05e      	beq.n	800cd32 <HAL_DMA_Abort_IT+0x3a2>
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	681b      	ldr	r3, [r3, #0]
 800cc78:	4a34      	ldr	r2, [pc, #208]	@ (800cd4c <HAL_DMA_Abort_IT+0x3bc>)
 800cc7a:	4293      	cmp	r3, r2
 800cc7c:	d059      	beq.n	800cd32 <HAL_DMA_Abort_IT+0x3a2>
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	681b      	ldr	r3, [r3, #0]
 800cc82:	4a33      	ldr	r2, [pc, #204]	@ (800cd50 <HAL_DMA_Abort_IT+0x3c0>)
 800cc84:	4293      	cmp	r3, r2
 800cc86:	d054      	beq.n	800cd32 <HAL_DMA_Abort_IT+0x3a2>
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	681b      	ldr	r3, [r3, #0]
 800cc8c:	4a31      	ldr	r2, [pc, #196]	@ (800cd54 <HAL_DMA_Abort_IT+0x3c4>)
 800cc8e:	4293      	cmp	r3, r2
 800cc90:	d04f      	beq.n	800cd32 <HAL_DMA_Abort_IT+0x3a2>
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	4a30      	ldr	r2, [pc, #192]	@ (800cd58 <HAL_DMA_Abort_IT+0x3c8>)
 800cc98:	4293      	cmp	r3, r2
 800cc9a:	d04a      	beq.n	800cd32 <HAL_DMA_Abort_IT+0x3a2>
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	681b      	ldr	r3, [r3, #0]
 800cca0:	4a2e      	ldr	r2, [pc, #184]	@ (800cd5c <HAL_DMA_Abort_IT+0x3cc>)
 800cca2:	4293      	cmp	r3, r2
 800cca4:	d045      	beq.n	800cd32 <HAL_DMA_Abort_IT+0x3a2>
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	681b      	ldr	r3, [r3, #0]
 800ccaa:	4a2d      	ldr	r2, [pc, #180]	@ (800cd60 <HAL_DMA_Abort_IT+0x3d0>)
 800ccac:	4293      	cmp	r3, r2
 800ccae:	d040      	beq.n	800cd32 <HAL_DMA_Abort_IT+0x3a2>
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	4a2b      	ldr	r2, [pc, #172]	@ (800cd64 <HAL_DMA_Abort_IT+0x3d4>)
 800ccb6:	4293      	cmp	r3, r2
 800ccb8:	d03b      	beq.n	800cd32 <HAL_DMA_Abort_IT+0x3a2>
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	4a2a      	ldr	r2, [pc, #168]	@ (800cd68 <HAL_DMA_Abort_IT+0x3d8>)
 800ccc0:	4293      	cmp	r3, r2
 800ccc2:	d036      	beq.n	800cd32 <HAL_DMA_Abort_IT+0x3a2>
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	681b      	ldr	r3, [r3, #0]
 800ccc8:	4a28      	ldr	r2, [pc, #160]	@ (800cd6c <HAL_DMA_Abort_IT+0x3dc>)
 800ccca:	4293      	cmp	r3, r2
 800cccc:	d031      	beq.n	800cd32 <HAL_DMA_Abort_IT+0x3a2>
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	681b      	ldr	r3, [r3, #0]
 800ccd2:	4a27      	ldr	r2, [pc, #156]	@ (800cd70 <HAL_DMA_Abort_IT+0x3e0>)
 800ccd4:	4293      	cmp	r3, r2
 800ccd6:	d02c      	beq.n	800cd32 <HAL_DMA_Abort_IT+0x3a2>
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	681b      	ldr	r3, [r3, #0]
 800ccdc:	4a25      	ldr	r2, [pc, #148]	@ (800cd74 <HAL_DMA_Abort_IT+0x3e4>)
 800ccde:	4293      	cmp	r3, r2
 800cce0:	d027      	beq.n	800cd32 <HAL_DMA_Abort_IT+0x3a2>
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	681b      	ldr	r3, [r3, #0]
 800cce6:	4a24      	ldr	r2, [pc, #144]	@ (800cd78 <HAL_DMA_Abort_IT+0x3e8>)
 800cce8:	4293      	cmp	r3, r2
 800ccea:	d022      	beq.n	800cd32 <HAL_DMA_Abort_IT+0x3a2>
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	4a22      	ldr	r2, [pc, #136]	@ (800cd7c <HAL_DMA_Abort_IT+0x3ec>)
 800ccf2:	4293      	cmp	r3, r2
 800ccf4:	d01d      	beq.n	800cd32 <HAL_DMA_Abort_IT+0x3a2>
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	4a21      	ldr	r2, [pc, #132]	@ (800cd80 <HAL_DMA_Abort_IT+0x3f0>)
 800ccfc:	4293      	cmp	r3, r2
 800ccfe:	d018      	beq.n	800cd32 <HAL_DMA_Abort_IT+0x3a2>
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	681b      	ldr	r3, [r3, #0]
 800cd04:	4a1f      	ldr	r2, [pc, #124]	@ (800cd84 <HAL_DMA_Abort_IT+0x3f4>)
 800cd06:	4293      	cmp	r3, r2
 800cd08:	d013      	beq.n	800cd32 <HAL_DMA_Abort_IT+0x3a2>
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	681b      	ldr	r3, [r3, #0]
 800cd0e:	4a1e      	ldr	r2, [pc, #120]	@ (800cd88 <HAL_DMA_Abort_IT+0x3f8>)
 800cd10:	4293      	cmp	r3, r2
 800cd12:	d00e      	beq.n	800cd32 <HAL_DMA_Abort_IT+0x3a2>
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	681b      	ldr	r3, [r3, #0]
 800cd18:	4a1c      	ldr	r2, [pc, #112]	@ (800cd8c <HAL_DMA_Abort_IT+0x3fc>)
 800cd1a:	4293      	cmp	r3, r2
 800cd1c:	d009      	beq.n	800cd32 <HAL_DMA_Abort_IT+0x3a2>
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	681b      	ldr	r3, [r3, #0]
 800cd22:	4a1b      	ldr	r2, [pc, #108]	@ (800cd90 <HAL_DMA_Abort_IT+0x400>)
 800cd24:	4293      	cmp	r3, r2
 800cd26:	d004      	beq.n	800cd32 <HAL_DMA_Abort_IT+0x3a2>
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	681b      	ldr	r3, [r3, #0]
 800cd2c:	4a19      	ldr	r2, [pc, #100]	@ (800cd94 <HAL_DMA_Abort_IT+0x404>)
 800cd2e:	4293      	cmp	r3, r2
 800cd30:	d132      	bne.n	800cd98 <HAL_DMA_Abort_IT+0x408>
 800cd32:	2301      	movs	r3, #1
 800cd34:	e031      	b.n	800cd9a <HAL_DMA_Abort_IT+0x40a>
 800cd36:	bf00      	nop
 800cd38:	40020010 	.word	0x40020010
 800cd3c:	40020028 	.word	0x40020028
 800cd40:	40020040 	.word	0x40020040
 800cd44:	40020058 	.word	0x40020058
 800cd48:	40020070 	.word	0x40020070
 800cd4c:	40020088 	.word	0x40020088
 800cd50:	400200a0 	.word	0x400200a0
 800cd54:	400200b8 	.word	0x400200b8
 800cd58:	40020410 	.word	0x40020410
 800cd5c:	40020428 	.word	0x40020428
 800cd60:	40020440 	.word	0x40020440
 800cd64:	40020458 	.word	0x40020458
 800cd68:	40020470 	.word	0x40020470
 800cd6c:	40020488 	.word	0x40020488
 800cd70:	400204a0 	.word	0x400204a0
 800cd74:	400204b8 	.word	0x400204b8
 800cd78:	58025408 	.word	0x58025408
 800cd7c:	5802541c 	.word	0x5802541c
 800cd80:	58025430 	.word	0x58025430
 800cd84:	58025444 	.word	0x58025444
 800cd88:	58025458 	.word	0x58025458
 800cd8c:	5802546c 	.word	0x5802546c
 800cd90:	58025480 	.word	0x58025480
 800cd94:	58025494 	.word	0x58025494
 800cd98:	2300      	movs	r3, #0
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	d028      	beq.n	800cdf0 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800cda2:	681a      	ldr	r2, [r3, #0]
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800cda8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800cdac:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cdb2:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cdb8:	f003 031f 	and.w	r3, r3, #31
 800cdbc:	2201      	movs	r2, #1
 800cdbe:	409a      	lsls	r2, r3
 800cdc0:	68fb      	ldr	r3, [r7, #12]
 800cdc2:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cdc8:	687a      	ldr	r2, [r7, #4]
 800cdca:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800cdcc:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d00c      	beq.n	800cdf0 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cdda:	681a      	ldr	r2, [r3, #0]
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cde0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800cde4:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cdea:	687a      	ldr	r2, [r7, #4]
 800cdec:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800cdee:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	2201      	movs	r2, #1
 800cdf4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	2200      	movs	r2, #0
 800cdfc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d003      	beq.n	800ce10 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ce0c:	6878      	ldr	r0, [r7, #4]
 800ce0e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800ce10:	2300      	movs	r3, #0
}
 800ce12:	4618      	mov	r0, r3
 800ce14:	3710      	adds	r7, #16
 800ce16:	46bd      	mov	sp, r7
 800ce18:	bd80      	pop	{r7, pc}
 800ce1a:	bf00      	nop

0800ce1c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800ce1c:	b580      	push	{r7, lr}
 800ce1e:	b08a      	sub	sp, #40	@ 0x28
 800ce20:	af00      	add	r7, sp, #0
 800ce22:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800ce24:	2300      	movs	r3, #0
 800ce26:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800ce28:	4b67      	ldr	r3, [pc, #412]	@ (800cfc8 <HAL_DMA_IRQHandler+0x1ac>)
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	4a67      	ldr	r2, [pc, #412]	@ (800cfcc <HAL_DMA_IRQHandler+0x1b0>)
 800ce2e:	fba2 2303 	umull	r2, r3, r2, r3
 800ce32:	0a9b      	lsrs	r3, r3, #10
 800ce34:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ce3a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ce40:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800ce42:	6a3b      	ldr	r3, [r7, #32]
 800ce44:	681b      	ldr	r3, [r3, #0]
 800ce46:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800ce48:	69fb      	ldr	r3, [r7, #28]
 800ce4a:	681b      	ldr	r3, [r3, #0]
 800ce4c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	681b      	ldr	r3, [r3, #0]
 800ce52:	4a5f      	ldr	r2, [pc, #380]	@ (800cfd0 <HAL_DMA_IRQHandler+0x1b4>)
 800ce54:	4293      	cmp	r3, r2
 800ce56:	d04a      	beq.n	800ceee <HAL_DMA_IRQHandler+0xd2>
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	681b      	ldr	r3, [r3, #0]
 800ce5c:	4a5d      	ldr	r2, [pc, #372]	@ (800cfd4 <HAL_DMA_IRQHandler+0x1b8>)
 800ce5e:	4293      	cmp	r3, r2
 800ce60:	d045      	beq.n	800ceee <HAL_DMA_IRQHandler+0xd2>
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	681b      	ldr	r3, [r3, #0]
 800ce66:	4a5c      	ldr	r2, [pc, #368]	@ (800cfd8 <HAL_DMA_IRQHandler+0x1bc>)
 800ce68:	4293      	cmp	r3, r2
 800ce6a:	d040      	beq.n	800ceee <HAL_DMA_IRQHandler+0xd2>
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	681b      	ldr	r3, [r3, #0]
 800ce70:	4a5a      	ldr	r2, [pc, #360]	@ (800cfdc <HAL_DMA_IRQHandler+0x1c0>)
 800ce72:	4293      	cmp	r3, r2
 800ce74:	d03b      	beq.n	800ceee <HAL_DMA_IRQHandler+0xd2>
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	681b      	ldr	r3, [r3, #0]
 800ce7a:	4a59      	ldr	r2, [pc, #356]	@ (800cfe0 <HAL_DMA_IRQHandler+0x1c4>)
 800ce7c:	4293      	cmp	r3, r2
 800ce7e:	d036      	beq.n	800ceee <HAL_DMA_IRQHandler+0xd2>
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	681b      	ldr	r3, [r3, #0]
 800ce84:	4a57      	ldr	r2, [pc, #348]	@ (800cfe4 <HAL_DMA_IRQHandler+0x1c8>)
 800ce86:	4293      	cmp	r3, r2
 800ce88:	d031      	beq.n	800ceee <HAL_DMA_IRQHandler+0xd2>
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	681b      	ldr	r3, [r3, #0]
 800ce8e:	4a56      	ldr	r2, [pc, #344]	@ (800cfe8 <HAL_DMA_IRQHandler+0x1cc>)
 800ce90:	4293      	cmp	r3, r2
 800ce92:	d02c      	beq.n	800ceee <HAL_DMA_IRQHandler+0xd2>
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	681b      	ldr	r3, [r3, #0]
 800ce98:	4a54      	ldr	r2, [pc, #336]	@ (800cfec <HAL_DMA_IRQHandler+0x1d0>)
 800ce9a:	4293      	cmp	r3, r2
 800ce9c:	d027      	beq.n	800ceee <HAL_DMA_IRQHandler+0xd2>
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	681b      	ldr	r3, [r3, #0]
 800cea2:	4a53      	ldr	r2, [pc, #332]	@ (800cff0 <HAL_DMA_IRQHandler+0x1d4>)
 800cea4:	4293      	cmp	r3, r2
 800cea6:	d022      	beq.n	800ceee <HAL_DMA_IRQHandler+0xd2>
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	681b      	ldr	r3, [r3, #0]
 800ceac:	4a51      	ldr	r2, [pc, #324]	@ (800cff4 <HAL_DMA_IRQHandler+0x1d8>)
 800ceae:	4293      	cmp	r3, r2
 800ceb0:	d01d      	beq.n	800ceee <HAL_DMA_IRQHandler+0xd2>
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	4a50      	ldr	r2, [pc, #320]	@ (800cff8 <HAL_DMA_IRQHandler+0x1dc>)
 800ceb8:	4293      	cmp	r3, r2
 800ceba:	d018      	beq.n	800ceee <HAL_DMA_IRQHandler+0xd2>
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	4a4e      	ldr	r2, [pc, #312]	@ (800cffc <HAL_DMA_IRQHandler+0x1e0>)
 800cec2:	4293      	cmp	r3, r2
 800cec4:	d013      	beq.n	800ceee <HAL_DMA_IRQHandler+0xd2>
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	681b      	ldr	r3, [r3, #0]
 800ceca:	4a4d      	ldr	r2, [pc, #308]	@ (800d000 <HAL_DMA_IRQHandler+0x1e4>)
 800cecc:	4293      	cmp	r3, r2
 800cece:	d00e      	beq.n	800ceee <HAL_DMA_IRQHandler+0xd2>
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	681b      	ldr	r3, [r3, #0]
 800ced4:	4a4b      	ldr	r2, [pc, #300]	@ (800d004 <HAL_DMA_IRQHandler+0x1e8>)
 800ced6:	4293      	cmp	r3, r2
 800ced8:	d009      	beq.n	800ceee <HAL_DMA_IRQHandler+0xd2>
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	681b      	ldr	r3, [r3, #0]
 800cede:	4a4a      	ldr	r2, [pc, #296]	@ (800d008 <HAL_DMA_IRQHandler+0x1ec>)
 800cee0:	4293      	cmp	r3, r2
 800cee2:	d004      	beq.n	800ceee <HAL_DMA_IRQHandler+0xd2>
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	681b      	ldr	r3, [r3, #0]
 800cee8:	4a48      	ldr	r2, [pc, #288]	@ (800d00c <HAL_DMA_IRQHandler+0x1f0>)
 800ceea:	4293      	cmp	r3, r2
 800ceec:	d101      	bne.n	800cef2 <HAL_DMA_IRQHandler+0xd6>
 800ceee:	2301      	movs	r3, #1
 800cef0:	e000      	b.n	800cef4 <HAL_DMA_IRQHandler+0xd8>
 800cef2:	2300      	movs	r3, #0
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	f000 842b 	beq.w	800d750 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cefe:	f003 031f 	and.w	r3, r3, #31
 800cf02:	2208      	movs	r2, #8
 800cf04:	409a      	lsls	r2, r3
 800cf06:	69bb      	ldr	r3, [r7, #24]
 800cf08:	4013      	ands	r3, r2
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	f000 80a2 	beq.w	800d054 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	681b      	ldr	r3, [r3, #0]
 800cf14:	4a2e      	ldr	r2, [pc, #184]	@ (800cfd0 <HAL_DMA_IRQHandler+0x1b4>)
 800cf16:	4293      	cmp	r3, r2
 800cf18:	d04a      	beq.n	800cfb0 <HAL_DMA_IRQHandler+0x194>
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	681b      	ldr	r3, [r3, #0]
 800cf1e:	4a2d      	ldr	r2, [pc, #180]	@ (800cfd4 <HAL_DMA_IRQHandler+0x1b8>)
 800cf20:	4293      	cmp	r3, r2
 800cf22:	d045      	beq.n	800cfb0 <HAL_DMA_IRQHandler+0x194>
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	4a2b      	ldr	r2, [pc, #172]	@ (800cfd8 <HAL_DMA_IRQHandler+0x1bc>)
 800cf2a:	4293      	cmp	r3, r2
 800cf2c:	d040      	beq.n	800cfb0 <HAL_DMA_IRQHandler+0x194>
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	681b      	ldr	r3, [r3, #0]
 800cf32:	4a2a      	ldr	r2, [pc, #168]	@ (800cfdc <HAL_DMA_IRQHandler+0x1c0>)
 800cf34:	4293      	cmp	r3, r2
 800cf36:	d03b      	beq.n	800cfb0 <HAL_DMA_IRQHandler+0x194>
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	4a28      	ldr	r2, [pc, #160]	@ (800cfe0 <HAL_DMA_IRQHandler+0x1c4>)
 800cf3e:	4293      	cmp	r3, r2
 800cf40:	d036      	beq.n	800cfb0 <HAL_DMA_IRQHandler+0x194>
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	681b      	ldr	r3, [r3, #0]
 800cf46:	4a27      	ldr	r2, [pc, #156]	@ (800cfe4 <HAL_DMA_IRQHandler+0x1c8>)
 800cf48:	4293      	cmp	r3, r2
 800cf4a:	d031      	beq.n	800cfb0 <HAL_DMA_IRQHandler+0x194>
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	681b      	ldr	r3, [r3, #0]
 800cf50:	4a25      	ldr	r2, [pc, #148]	@ (800cfe8 <HAL_DMA_IRQHandler+0x1cc>)
 800cf52:	4293      	cmp	r3, r2
 800cf54:	d02c      	beq.n	800cfb0 <HAL_DMA_IRQHandler+0x194>
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	4a24      	ldr	r2, [pc, #144]	@ (800cfec <HAL_DMA_IRQHandler+0x1d0>)
 800cf5c:	4293      	cmp	r3, r2
 800cf5e:	d027      	beq.n	800cfb0 <HAL_DMA_IRQHandler+0x194>
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	681b      	ldr	r3, [r3, #0]
 800cf64:	4a22      	ldr	r2, [pc, #136]	@ (800cff0 <HAL_DMA_IRQHandler+0x1d4>)
 800cf66:	4293      	cmp	r3, r2
 800cf68:	d022      	beq.n	800cfb0 <HAL_DMA_IRQHandler+0x194>
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	681b      	ldr	r3, [r3, #0]
 800cf6e:	4a21      	ldr	r2, [pc, #132]	@ (800cff4 <HAL_DMA_IRQHandler+0x1d8>)
 800cf70:	4293      	cmp	r3, r2
 800cf72:	d01d      	beq.n	800cfb0 <HAL_DMA_IRQHandler+0x194>
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	4a1f      	ldr	r2, [pc, #124]	@ (800cff8 <HAL_DMA_IRQHandler+0x1dc>)
 800cf7a:	4293      	cmp	r3, r2
 800cf7c:	d018      	beq.n	800cfb0 <HAL_DMA_IRQHandler+0x194>
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	4a1e      	ldr	r2, [pc, #120]	@ (800cffc <HAL_DMA_IRQHandler+0x1e0>)
 800cf84:	4293      	cmp	r3, r2
 800cf86:	d013      	beq.n	800cfb0 <HAL_DMA_IRQHandler+0x194>
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	681b      	ldr	r3, [r3, #0]
 800cf8c:	4a1c      	ldr	r2, [pc, #112]	@ (800d000 <HAL_DMA_IRQHandler+0x1e4>)
 800cf8e:	4293      	cmp	r3, r2
 800cf90:	d00e      	beq.n	800cfb0 <HAL_DMA_IRQHandler+0x194>
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	681b      	ldr	r3, [r3, #0]
 800cf96:	4a1b      	ldr	r2, [pc, #108]	@ (800d004 <HAL_DMA_IRQHandler+0x1e8>)
 800cf98:	4293      	cmp	r3, r2
 800cf9a:	d009      	beq.n	800cfb0 <HAL_DMA_IRQHandler+0x194>
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	681b      	ldr	r3, [r3, #0]
 800cfa0:	4a19      	ldr	r2, [pc, #100]	@ (800d008 <HAL_DMA_IRQHandler+0x1ec>)
 800cfa2:	4293      	cmp	r3, r2
 800cfa4:	d004      	beq.n	800cfb0 <HAL_DMA_IRQHandler+0x194>
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	681b      	ldr	r3, [r3, #0]
 800cfaa:	4a18      	ldr	r2, [pc, #96]	@ (800d00c <HAL_DMA_IRQHandler+0x1f0>)
 800cfac:	4293      	cmp	r3, r2
 800cfae:	d12f      	bne.n	800d010 <HAL_DMA_IRQHandler+0x1f4>
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	681b      	ldr	r3, [r3, #0]
 800cfb4:	681b      	ldr	r3, [r3, #0]
 800cfb6:	f003 0304 	and.w	r3, r3, #4
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	bf14      	ite	ne
 800cfbe:	2301      	movne	r3, #1
 800cfc0:	2300      	moveq	r3, #0
 800cfc2:	b2db      	uxtb	r3, r3
 800cfc4:	e02e      	b.n	800d024 <HAL_DMA_IRQHandler+0x208>
 800cfc6:	bf00      	nop
 800cfc8:	24000008 	.word	0x24000008
 800cfcc:	1b4e81b5 	.word	0x1b4e81b5
 800cfd0:	40020010 	.word	0x40020010
 800cfd4:	40020028 	.word	0x40020028
 800cfd8:	40020040 	.word	0x40020040
 800cfdc:	40020058 	.word	0x40020058
 800cfe0:	40020070 	.word	0x40020070
 800cfe4:	40020088 	.word	0x40020088
 800cfe8:	400200a0 	.word	0x400200a0
 800cfec:	400200b8 	.word	0x400200b8
 800cff0:	40020410 	.word	0x40020410
 800cff4:	40020428 	.word	0x40020428
 800cff8:	40020440 	.word	0x40020440
 800cffc:	40020458 	.word	0x40020458
 800d000:	40020470 	.word	0x40020470
 800d004:	40020488 	.word	0x40020488
 800d008:	400204a0 	.word	0x400204a0
 800d00c:	400204b8 	.word	0x400204b8
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	681b      	ldr	r3, [r3, #0]
 800d014:	681b      	ldr	r3, [r3, #0]
 800d016:	f003 0308 	and.w	r3, r3, #8
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	bf14      	ite	ne
 800d01e:	2301      	movne	r3, #1
 800d020:	2300      	moveq	r3, #0
 800d022:	b2db      	uxtb	r3, r3
 800d024:	2b00      	cmp	r3, #0
 800d026:	d015      	beq.n	800d054 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	681b      	ldr	r3, [r3, #0]
 800d02c:	681a      	ldr	r2, [r3, #0]
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	681b      	ldr	r3, [r3, #0]
 800d032:	f022 0204 	bic.w	r2, r2, #4
 800d036:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d03c:	f003 031f 	and.w	r3, r3, #31
 800d040:	2208      	movs	r2, #8
 800d042:	409a      	lsls	r2, r3
 800d044:	6a3b      	ldr	r3, [r7, #32]
 800d046:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d04c:	f043 0201 	orr.w	r2, r3, #1
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d058:	f003 031f 	and.w	r3, r3, #31
 800d05c:	69ba      	ldr	r2, [r7, #24]
 800d05e:	fa22 f303 	lsr.w	r3, r2, r3
 800d062:	f003 0301 	and.w	r3, r3, #1
 800d066:	2b00      	cmp	r3, #0
 800d068:	d06e      	beq.n	800d148 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	681b      	ldr	r3, [r3, #0]
 800d06e:	4a69      	ldr	r2, [pc, #420]	@ (800d214 <HAL_DMA_IRQHandler+0x3f8>)
 800d070:	4293      	cmp	r3, r2
 800d072:	d04a      	beq.n	800d10a <HAL_DMA_IRQHandler+0x2ee>
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	681b      	ldr	r3, [r3, #0]
 800d078:	4a67      	ldr	r2, [pc, #412]	@ (800d218 <HAL_DMA_IRQHandler+0x3fc>)
 800d07a:	4293      	cmp	r3, r2
 800d07c:	d045      	beq.n	800d10a <HAL_DMA_IRQHandler+0x2ee>
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	681b      	ldr	r3, [r3, #0]
 800d082:	4a66      	ldr	r2, [pc, #408]	@ (800d21c <HAL_DMA_IRQHandler+0x400>)
 800d084:	4293      	cmp	r3, r2
 800d086:	d040      	beq.n	800d10a <HAL_DMA_IRQHandler+0x2ee>
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	681b      	ldr	r3, [r3, #0]
 800d08c:	4a64      	ldr	r2, [pc, #400]	@ (800d220 <HAL_DMA_IRQHandler+0x404>)
 800d08e:	4293      	cmp	r3, r2
 800d090:	d03b      	beq.n	800d10a <HAL_DMA_IRQHandler+0x2ee>
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	681b      	ldr	r3, [r3, #0]
 800d096:	4a63      	ldr	r2, [pc, #396]	@ (800d224 <HAL_DMA_IRQHandler+0x408>)
 800d098:	4293      	cmp	r3, r2
 800d09a:	d036      	beq.n	800d10a <HAL_DMA_IRQHandler+0x2ee>
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	681b      	ldr	r3, [r3, #0]
 800d0a0:	4a61      	ldr	r2, [pc, #388]	@ (800d228 <HAL_DMA_IRQHandler+0x40c>)
 800d0a2:	4293      	cmp	r3, r2
 800d0a4:	d031      	beq.n	800d10a <HAL_DMA_IRQHandler+0x2ee>
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	681b      	ldr	r3, [r3, #0]
 800d0aa:	4a60      	ldr	r2, [pc, #384]	@ (800d22c <HAL_DMA_IRQHandler+0x410>)
 800d0ac:	4293      	cmp	r3, r2
 800d0ae:	d02c      	beq.n	800d10a <HAL_DMA_IRQHandler+0x2ee>
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	681b      	ldr	r3, [r3, #0]
 800d0b4:	4a5e      	ldr	r2, [pc, #376]	@ (800d230 <HAL_DMA_IRQHandler+0x414>)
 800d0b6:	4293      	cmp	r3, r2
 800d0b8:	d027      	beq.n	800d10a <HAL_DMA_IRQHandler+0x2ee>
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	681b      	ldr	r3, [r3, #0]
 800d0be:	4a5d      	ldr	r2, [pc, #372]	@ (800d234 <HAL_DMA_IRQHandler+0x418>)
 800d0c0:	4293      	cmp	r3, r2
 800d0c2:	d022      	beq.n	800d10a <HAL_DMA_IRQHandler+0x2ee>
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	4a5b      	ldr	r2, [pc, #364]	@ (800d238 <HAL_DMA_IRQHandler+0x41c>)
 800d0ca:	4293      	cmp	r3, r2
 800d0cc:	d01d      	beq.n	800d10a <HAL_DMA_IRQHandler+0x2ee>
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	681b      	ldr	r3, [r3, #0]
 800d0d2:	4a5a      	ldr	r2, [pc, #360]	@ (800d23c <HAL_DMA_IRQHandler+0x420>)
 800d0d4:	4293      	cmp	r3, r2
 800d0d6:	d018      	beq.n	800d10a <HAL_DMA_IRQHandler+0x2ee>
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	681b      	ldr	r3, [r3, #0]
 800d0dc:	4a58      	ldr	r2, [pc, #352]	@ (800d240 <HAL_DMA_IRQHandler+0x424>)
 800d0de:	4293      	cmp	r3, r2
 800d0e0:	d013      	beq.n	800d10a <HAL_DMA_IRQHandler+0x2ee>
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	681b      	ldr	r3, [r3, #0]
 800d0e6:	4a57      	ldr	r2, [pc, #348]	@ (800d244 <HAL_DMA_IRQHandler+0x428>)
 800d0e8:	4293      	cmp	r3, r2
 800d0ea:	d00e      	beq.n	800d10a <HAL_DMA_IRQHandler+0x2ee>
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	681b      	ldr	r3, [r3, #0]
 800d0f0:	4a55      	ldr	r2, [pc, #340]	@ (800d248 <HAL_DMA_IRQHandler+0x42c>)
 800d0f2:	4293      	cmp	r3, r2
 800d0f4:	d009      	beq.n	800d10a <HAL_DMA_IRQHandler+0x2ee>
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	681b      	ldr	r3, [r3, #0]
 800d0fa:	4a54      	ldr	r2, [pc, #336]	@ (800d24c <HAL_DMA_IRQHandler+0x430>)
 800d0fc:	4293      	cmp	r3, r2
 800d0fe:	d004      	beq.n	800d10a <HAL_DMA_IRQHandler+0x2ee>
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	681b      	ldr	r3, [r3, #0]
 800d104:	4a52      	ldr	r2, [pc, #328]	@ (800d250 <HAL_DMA_IRQHandler+0x434>)
 800d106:	4293      	cmp	r3, r2
 800d108:	d10a      	bne.n	800d120 <HAL_DMA_IRQHandler+0x304>
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	695b      	ldr	r3, [r3, #20]
 800d110:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d114:	2b00      	cmp	r3, #0
 800d116:	bf14      	ite	ne
 800d118:	2301      	movne	r3, #1
 800d11a:	2300      	moveq	r3, #0
 800d11c:	b2db      	uxtb	r3, r3
 800d11e:	e003      	b.n	800d128 <HAL_DMA_IRQHandler+0x30c>
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	681b      	ldr	r3, [r3, #0]
 800d124:	681b      	ldr	r3, [r3, #0]
 800d126:	2300      	movs	r3, #0
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d00d      	beq.n	800d148 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d130:	f003 031f 	and.w	r3, r3, #31
 800d134:	2201      	movs	r2, #1
 800d136:	409a      	lsls	r2, r3
 800d138:	6a3b      	ldr	r3, [r7, #32]
 800d13a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d140:	f043 0202 	orr.w	r2, r3, #2
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d14c:	f003 031f 	and.w	r3, r3, #31
 800d150:	2204      	movs	r2, #4
 800d152:	409a      	lsls	r2, r3
 800d154:	69bb      	ldr	r3, [r7, #24]
 800d156:	4013      	ands	r3, r2
 800d158:	2b00      	cmp	r3, #0
 800d15a:	f000 808f 	beq.w	800d27c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	681b      	ldr	r3, [r3, #0]
 800d162:	4a2c      	ldr	r2, [pc, #176]	@ (800d214 <HAL_DMA_IRQHandler+0x3f8>)
 800d164:	4293      	cmp	r3, r2
 800d166:	d04a      	beq.n	800d1fe <HAL_DMA_IRQHandler+0x3e2>
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	681b      	ldr	r3, [r3, #0]
 800d16c:	4a2a      	ldr	r2, [pc, #168]	@ (800d218 <HAL_DMA_IRQHandler+0x3fc>)
 800d16e:	4293      	cmp	r3, r2
 800d170:	d045      	beq.n	800d1fe <HAL_DMA_IRQHandler+0x3e2>
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	681b      	ldr	r3, [r3, #0]
 800d176:	4a29      	ldr	r2, [pc, #164]	@ (800d21c <HAL_DMA_IRQHandler+0x400>)
 800d178:	4293      	cmp	r3, r2
 800d17a:	d040      	beq.n	800d1fe <HAL_DMA_IRQHandler+0x3e2>
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	681b      	ldr	r3, [r3, #0]
 800d180:	4a27      	ldr	r2, [pc, #156]	@ (800d220 <HAL_DMA_IRQHandler+0x404>)
 800d182:	4293      	cmp	r3, r2
 800d184:	d03b      	beq.n	800d1fe <HAL_DMA_IRQHandler+0x3e2>
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	681b      	ldr	r3, [r3, #0]
 800d18a:	4a26      	ldr	r2, [pc, #152]	@ (800d224 <HAL_DMA_IRQHandler+0x408>)
 800d18c:	4293      	cmp	r3, r2
 800d18e:	d036      	beq.n	800d1fe <HAL_DMA_IRQHandler+0x3e2>
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	681b      	ldr	r3, [r3, #0]
 800d194:	4a24      	ldr	r2, [pc, #144]	@ (800d228 <HAL_DMA_IRQHandler+0x40c>)
 800d196:	4293      	cmp	r3, r2
 800d198:	d031      	beq.n	800d1fe <HAL_DMA_IRQHandler+0x3e2>
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	681b      	ldr	r3, [r3, #0]
 800d19e:	4a23      	ldr	r2, [pc, #140]	@ (800d22c <HAL_DMA_IRQHandler+0x410>)
 800d1a0:	4293      	cmp	r3, r2
 800d1a2:	d02c      	beq.n	800d1fe <HAL_DMA_IRQHandler+0x3e2>
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	681b      	ldr	r3, [r3, #0]
 800d1a8:	4a21      	ldr	r2, [pc, #132]	@ (800d230 <HAL_DMA_IRQHandler+0x414>)
 800d1aa:	4293      	cmp	r3, r2
 800d1ac:	d027      	beq.n	800d1fe <HAL_DMA_IRQHandler+0x3e2>
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	681b      	ldr	r3, [r3, #0]
 800d1b2:	4a20      	ldr	r2, [pc, #128]	@ (800d234 <HAL_DMA_IRQHandler+0x418>)
 800d1b4:	4293      	cmp	r3, r2
 800d1b6:	d022      	beq.n	800d1fe <HAL_DMA_IRQHandler+0x3e2>
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	681b      	ldr	r3, [r3, #0]
 800d1bc:	4a1e      	ldr	r2, [pc, #120]	@ (800d238 <HAL_DMA_IRQHandler+0x41c>)
 800d1be:	4293      	cmp	r3, r2
 800d1c0:	d01d      	beq.n	800d1fe <HAL_DMA_IRQHandler+0x3e2>
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	681b      	ldr	r3, [r3, #0]
 800d1c6:	4a1d      	ldr	r2, [pc, #116]	@ (800d23c <HAL_DMA_IRQHandler+0x420>)
 800d1c8:	4293      	cmp	r3, r2
 800d1ca:	d018      	beq.n	800d1fe <HAL_DMA_IRQHandler+0x3e2>
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	681b      	ldr	r3, [r3, #0]
 800d1d0:	4a1b      	ldr	r2, [pc, #108]	@ (800d240 <HAL_DMA_IRQHandler+0x424>)
 800d1d2:	4293      	cmp	r3, r2
 800d1d4:	d013      	beq.n	800d1fe <HAL_DMA_IRQHandler+0x3e2>
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	681b      	ldr	r3, [r3, #0]
 800d1da:	4a1a      	ldr	r2, [pc, #104]	@ (800d244 <HAL_DMA_IRQHandler+0x428>)
 800d1dc:	4293      	cmp	r3, r2
 800d1de:	d00e      	beq.n	800d1fe <HAL_DMA_IRQHandler+0x3e2>
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	681b      	ldr	r3, [r3, #0]
 800d1e4:	4a18      	ldr	r2, [pc, #96]	@ (800d248 <HAL_DMA_IRQHandler+0x42c>)
 800d1e6:	4293      	cmp	r3, r2
 800d1e8:	d009      	beq.n	800d1fe <HAL_DMA_IRQHandler+0x3e2>
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	681b      	ldr	r3, [r3, #0]
 800d1ee:	4a17      	ldr	r2, [pc, #92]	@ (800d24c <HAL_DMA_IRQHandler+0x430>)
 800d1f0:	4293      	cmp	r3, r2
 800d1f2:	d004      	beq.n	800d1fe <HAL_DMA_IRQHandler+0x3e2>
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	681b      	ldr	r3, [r3, #0]
 800d1f8:	4a15      	ldr	r2, [pc, #84]	@ (800d250 <HAL_DMA_IRQHandler+0x434>)
 800d1fa:	4293      	cmp	r3, r2
 800d1fc:	d12a      	bne.n	800d254 <HAL_DMA_IRQHandler+0x438>
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	681b      	ldr	r3, [r3, #0]
 800d202:	681b      	ldr	r3, [r3, #0]
 800d204:	f003 0302 	and.w	r3, r3, #2
 800d208:	2b00      	cmp	r3, #0
 800d20a:	bf14      	ite	ne
 800d20c:	2301      	movne	r3, #1
 800d20e:	2300      	moveq	r3, #0
 800d210:	b2db      	uxtb	r3, r3
 800d212:	e023      	b.n	800d25c <HAL_DMA_IRQHandler+0x440>
 800d214:	40020010 	.word	0x40020010
 800d218:	40020028 	.word	0x40020028
 800d21c:	40020040 	.word	0x40020040
 800d220:	40020058 	.word	0x40020058
 800d224:	40020070 	.word	0x40020070
 800d228:	40020088 	.word	0x40020088
 800d22c:	400200a0 	.word	0x400200a0
 800d230:	400200b8 	.word	0x400200b8
 800d234:	40020410 	.word	0x40020410
 800d238:	40020428 	.word	0x40020428
 800d23c:	40020440 	.word	0x40020440
 800d240:	40020458 	.word	0x40020458
 800d244:	40020470 	.word	0x40020470
 800d248:	40020488 	.word	0x40020488
 800d24c:	400204a0 	.word	0x400204a0
 800d250:	400204b8 	.word	0x400204b8
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	681b      	ldr	r3, [r3, #0]
 800d258:	681b      	ldr	r3, [r3, #0]
 800d25a:	2300      	movs	r3, #0
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	d00d      	beq.n	800d27c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d264:	f003 031f 	and.w	r3, r3, #31
 800d268:	2204      	movs	r2, #4
 800d26a:	409a      	lsls	r2, r3
 800d26c:	6a3b      	ldr	r3, [r7, #32]
 800d26e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d274:	f043 0204 	orr.w	r2, r3, #4
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d280:	f003 031f 	and.w	r3, r3, #31
 800d284:	2210      	movs	r2, #16
 800d286:	409a      	lsls	r2, r3
 800d288:	69bb      	ldr	r3, [r7, #24]
 800d28a:	4013      	ands	r3, r2
 800d28c:	2b00      	cmp	r3, #0
 800d28e:	f000 80a6 	beq.w	800d3de <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	681b      	ldr	r3, [r3, #0]
 800d296:	4a85      	ldr	r2, [pc, #532]	@ (800d4ac <HAL_DMA_IRQHandler+0x690>)
 800d298:	4293      	cmp	r3, r2
 800d29a:	d04a      	beq.n	800d332 <HAL_DMA_IRQHandler+0x516>
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	681b      	ldr	r3, [r3, #0]
 800d2a0:	4a83      	ldr	r2, [pc, #524]	@ (800d4b0 <HAL_DMA_IRQHandler+0x694>)
 800d2a2:	4293      	cmp	r3, r2
 800d2a4:	d045      	beq.n	800d332 <HAL_DMA_IRQHandler+0x516>
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	681b      	ldr	r3, [r3, #0]
 800d2aa:	4a82      	ldr	r2, [pc, #520]	@ (800d4b4 <HAL_DMA_IRQHandler+0x698>)
 800d2ac:	4293      	cmp	r3, r2
 800d2ae:	d040      	beq.n	800d332 <HAL_DMA_IRQHandler+0x516>
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	681b      	ldr	r3, [r3, #0]
 800d2b4:	4a80      	ldr	r2, [pc, #512]	@ (800d4b8 <HAL_DMA_IRQHandler+0x69c>)
 800d2b6:	4293      	cmp	r3, r2
 800d2b8:	d03b      	beq.n	800d332 <HAL_DMA_IRQHandler+0x516>
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	681b      	ldr	r3, [r3, #0]
 800d2be:	4a7f      	ldr	r2, [pc, #508]	@ (800d4bc <HAL_DMA_IRQHandler+0x6a0>)
 800d2c0:	4293      	cmp	r3, r2
 800d2c2:	d036      	beq.n	800d332 <HAL_DMA_IRQHandler+0x516>
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	681b      	ldr	r3, [r3, #0]
 800d2c8:	4a7d      	ldr	r2, [pc, #500]	@ (800d4c0 <HAL_DMA_IRQHandler+0x6a4>)
 800d2ca:	4293      	cmp	r3, r2
 800d2cc:	d031      	beq.n	800d332 <HAL_DMA_IRQHandler+0x516>
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	681b      	ldr	r3, [r3, #0]
 800d2d2:	4a7c      	ldr	r2, [pc, #496]	@ (800d4c4 <HAL_DMA_IRQHandler+0x6a8>)
 800d2d4:	4293      	cmp	r3, r2
 800d2d6:	d02c      	beq.n	800d332 <HAL_DMA_IRQHandler+0x516>
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	681b      	ldr	r3, [r3, #0]
 800d2dc:	4a7a      	ldr	r2, [pc, #488]	@ (800d4c8 <HAL_DMA_IRQHandler+0x6ac>)
 800d2de:	4293      	cmp	r3, r2
 800d2e0:	d027      	beq.n	800d332 <HAL_DMA_IRQHandler+0x516>
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	681b      	ldr	r3, [r3, #0]
 800d2e6:	4a79      	ldr	r2, [pc, #484]	@ (800d4cc <HAL_DMA_IRQHandler+0x6b0>)
 800d2e8:	4293      	cmp	r3, r2
 800d2ea:	d022      	beq.n	800d332 <HAL_DMA_IRQHandler+0x516>
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	681b      	ldr	r3, [r3, #0]
 800d2f0:	4a77      	ldr	r2, [pc, #476]	@ (800d4d0 <HAL_DMA_IRQHandler+0x6b4>)
 800d2f2:	4293      	cmp	r3, r2
 800d2f4:	d01d      	beq.n	800d332 <HAL_DMA_IRQHandler+0x516>
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	681b      	ldr	r3, [r3, #0]
 800d2fa:	4a76      	ldr	r2, [pc, #472]	@ (800d4d4 <HAL_DMA_IRQHandler+0x6b8>)
 800d2fc:	4293      	cmp	r3, r2
 800d2fe:	d018      	beq.n	800d332 <HAL_DMA_IRQHandler+0x516>
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	681b      	ldr	r3, [r3, #0]
 800d304:	4a74      	ldr	r2, [pc, #464]	@ (800d4d8 <HAL_DMA_IRQHandler+0x6bc>)
 800d306:	4293      	cmp	r3, r2
 800d308:	d013      	beq.n	800d332 <HAL_DMA_IRQHandler+0x516>
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	681b      	ldr	r3, [r3, #0]
 800d30e:	4a73      	ldr	r2, [pc, #460]	@ (800d4dc <HAL_DMA_IRQHandler+0x6c0>)
 800d310:	4293      	cmp	r3, r2
 800d312:	d00e      	beq.n	800d332 <HAL_DMA_IRQHandler+0x516>
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	681b      	ldr	r3, [r3, #0]
 800d318:	4a71      	ldr	r2, [pc, #452]	@ (800d4e0 <HAL_DMA_IRQHandler+0x6c4>)
 800d31a:	4293      	cmp	r3, r2
 800d31c:	d009      	beq.n	800d332 <HAL_DMA_IRQHandler+0x516>
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	681b      	ldr	r3, [r3, #0]
 800d322:	4a70      	ldr	r2, [pc, #448]	@ (800d4e4 <HAL_DMA_IRQHandler+0x6c8>)
 800d324:	4293      	cmp	r3, r2
 800d326:	d004      	beq.n	800d332 <HAL_DMA_IRQHandler+0x516>
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	681b      	ldr	r3, [r3, #0]
 800d32c:	4a6e      	ldr	r2, [pc, #440]	@ (800d4e8 <HAL_DMA_IRQHandler+0x6cc>)
 800d32e:	4293      	cmp	r3, r2
 800d330:	d10a      	bne.n	800d348 <HAL_DMA_IRQHandler+0x52c>
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	681b      	ldr	r3, [r3, #0]
 800d336:	681b      	ldr	r3, [r3, #0]
 800d338:	f003 0308 	and.w	r3, r3, #8
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	bf14      	ite	ne
 800d340:	2301      	movne	r3, #1
 800d342:	2300      	moveq	r3, #0
 800d344:	b2db      	uxtb	r3, r3
 800d346:	e009      	b.n	800d35c <HAL_DMA_IRQHandler+0x540>
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	681b      	ldr	r3, [r3, #0]
 800d34c:	681b      	ldr	r3, [r3, #0]
 800d34e:	f003 0304 	and.w	r3, r3, #4
 800d352:	2b00      	cmp	r3, #0
 800d354:	bf14      	ite	ne
 800d356:	2301      	movne	r3, #1
 800d358:	2300      	moveq	r3, #0
 800d35a:	b2db      	uxtb	r3, r3
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	d03e      	beq.n	800d3de <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d364:	f003 031f 	and.w	r3, r3, #31
 800d368:	2210      	movs	r2, #16
 800d36a:	409a      	lsls	r2, r3
 800d36c:	6a3b      	ldr	r3, [r7, #32]
 800d36e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	681b      	ldr	r3, [r3, #0]
 800d374:	681b      	ldr	r3, [r3, #0]
 800d376:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	d018      	beq.n	800d3b0 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	681b      	ldr	r3, [r3, #0]
 800d382:	681b      	ldr	r3, [r3, #0]
 800d384:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800d388:	2b00      	cmp	r3, #0
 800d38a:	d108      	bne.n	800d39e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d390:	2b00      	cmp	r3, #0
 800d392:	d024      	beq.n	800d3de <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d398:	6878      	ldr	r0, [r7, #4]
 800d39a:	4798      	blx	r3
 800d39c:	e01f      	b.n	800d3de <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	d01b      	beq.n	800d3de <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d3aa:	6878      	ldr	r0, [r7, #4]
 800d3ac:	4798      	blx	r3
 800d3ae:	e016      	b.n	800d3de <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	681b      	ldr	r3, [r3, #0]
 800d3b4:	681b      	ldr	r3, [r3, #0]
 800d3b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d3ba:	2b00      	cmp	r3, #0
 800d3bc:	d107      	bne.n	800d3ce <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	681b      	ldr	r3, [r3, #0]
 800d3c2:	681a      	ldr	r2, [r3, #0]
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	681b      	ldr	r3, [r3, #0]
 800d3c8:	f022 0208 	bic.w	r2, r2, #8
 800d3cc:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	d003      	beq.n	800d3de <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d3da:	6878      	ldr	r0, [r7, #4]
 800d3dc:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d3e2:	f003 031f 	and.w	r3, r3, #31
 800d3e6:	2220      	movs	r2, #32
 800d3e8:	409a      	lsls	r2, r3
 800d3ea:	69bb      	ldr	r3, [r7, #24]
 800d3ec:	4013      	ands	r3, r2
 800d3ee:	2b00      	cmp	r3, #0
 800d3f0:	f000 8110 	beq.w	800d614 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	681b      	ldr	r3, [r3, #0]
 800d3f8:	4a2c      	ldr	r2, [pc, #176]	@ (800d4ac <HAL_DMA_IRQHandler+0x690>)
 800d3fa:	4293      	cmp	r3, r2
 800d3fc:	d04a      	beq.n	800d494 <HAL_DMA_IRQHandler+0x678>
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	681b      	ldr	r3, [r3, #0]
 800d402:	4a2b      	ldr	r2, [pc, #172]	@ (800d4b0 <HAL_DMA_IRQHandler+0x694>)
 800d404:	4293      	cmp	r3, r2
 800d406:	d045      	beq.n	800d494 <HAL_DMA_IRQHandler+0x678>
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	681b      	ldr	r3, [r3, #0]
 800d40c:	4a29      	ldr	r2, [pc, #164]	@ (800d4b4 <HAL_DMA_IRQHandler+0x698>)
 800d40e:	4293      	cmp	r3, r2
 800d410:	d040      	beq.n	800d494 <HAL_DMA_IRQHandler+0x678>
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	681b      	ldr	r3, [r3, #0]
 800d416:	4a28      	ldr	r2, [pc, #160]	@ (800d4b8 <HAL_DMA_IRQHandler+0x69c>)
 800d418:	4293      	cmp	r3, r2
 800d41a:	d03b      	beq.n	800d494 <HAL_DMA_IRQHandler+0x678>
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	681b      	ldr	r3, [r3, #0]
 800d420:	4a26      	ldr	r2, [pc, #152]	@ (800d4bc <HAL_DMA_IRQHandler+0x6a0>)
 800d422:	4293      	cmp	r3, r2
 800d424:	d036      	beq.n	800d494 <HAL_DMA_IRQHandler+0x678>
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	681b      	ldr	r3, [r3, #0]
 800d42a:	4a25      	ldr	r2, [pc, #148]	@ (800d4c0 <HAL_DMA_IRQHandler+0x6a4>)
 800d42c:	4293      	cmp	r3, r2
 800d42e:	d031      	beq.n	800d494 <HAL_DMA_IRQHandler+0x678>
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	681b      	ldr	r3, [r3, #0]
 800d434:	4a23      	ldr	r2, [pc, #140]	@ (800d4c4 <HAL_DMA_IRQHandler+0x6a8>)
 800d436:	4293      	cmp	r3, r2
 800d438:	d02c      	beq.n	800d494 <HAL_DMA_IRQHandler+0x678>
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	681b      	ldr	r3, [r3, #0]
 800d43e:	4a22      	ldr	r2, [pc, #136]	@ (800d4c8 <HAL_DMA_IRQHandler+0x6ac>)
 800d440:	4293      	cmp	r3, r2
 800d442:	d027      	beq.n	800d494 <HAL_DMA_IRQHandler+0x678>
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	681b      	ldr	r3, [r3, #0]
 800d448:	4a20      	ldr	r2, [pc, #128]	@ (800d4cc <HAL_DMA_IRQHandler+0x6b0>)
 800d44a:	4293      	cmp	r3, r2
 800d44c:	d022      	beq.n	800d494 <HAL_DMA_IRQHandler+0x678>
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	681b      	ldr	r3, [r3, #0]
 800d452:	4a1f      	ldr	r2, [pc, #124]	@ (800d4d0 <HAL_DMA_IRQHandler+0x6b4>)
 800d454:	4293      	cmp	r3, r2
 800d456:	d01d      	beq.n	800d494 <HAL_DMA_IRQHandler+0x678>
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	681b      	ldr	r3, [r3, #0]
 800d45c:	4a1d      	ldr	r2, [pc, #116]	@ (800d4d4 <HAL_DMA_IRQHandler+0x6b8>)
 800d45e:	4293      	cmp	r3, r2
 800d460:	d018      	beq.n	800d494 <HAL_DMA_IRQHandler+0x678>
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	681b      	ldr	r3, [r3, #0]
 800d466:	4a1c      	ldr	r2, [pc, #112]	@ (800d4d8 <HAL_DMA_IRQHandler+0x6bc>)
 800d468:	4293      	cmp	r3, r2
 800d46a:	d013      	beq.n	800d494 <HAL_DMA_IRQHandler+0x678>
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	681b      	ldr	r3, [r3, #0]
 800d470:	4a1a      	ldr	r2, [pc, #104]	@ (800d4dc <HAL_DMA_IRQHandler+0x6c0>)
 800d472:	4293      	cmp	r3, r2
 800d474:	d00e      	beq.n	800d494 <HAL_DMA_IRQHandler+0x678>
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	681b      	ldr	r3, [r3, #0]
 800d47a:	4a19      	ldr	r2, [pc, #100]	@ (800d4e0 <HAL_DMA_IRQHandler+0x6c4>)
 800d47c:	4293      	cmp	r3, r2
 800d47e:	d009      	beq.n	800d494 <HAL_DMA_IRQHandler+0x678>
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	681b      	ldr	r3, [r3, #0]
 800d484:	4a17      	ldr	r2, [pc, #92]	@ (800d4e4 <HAL_DMA_IRQHandler+0x6c8>)
 800d486:	4293      	cmp	r3, r2
 800d488:	d004      	beq.n	800d494 <HAL_DMA_IRQHandler+0x678>
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	681b      	ldr	r3, [r3, #0]
 800d48e:	4a16      	ldr	r2, [pc, #88]	@ (800d4e8 <HAL_DMA_IRQHandler+0x6cc>)
 800d490:	4293      	cmp	r3, r2
 800d492:	d12b      	bne.n	800d4ec <HAL_DMA_IRQHandler+0x6d0>
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	681b      	ldr	r3, [r3, #0]
 800d498:	681b      	ldr	r3, [r3, #0]
 800d49a:	f003 0310 	and.w	r3, r3, #16
 800d49e:	2b00      	cmp	r3, #0
 800d4a0:	bf14      	ite	ne
 800d4a2:	2301      	movne	r3, #1
 800d4a4:	2300      	moveq	r3, #0
 800d4a6:	b2db      	uxtb	r3, r3
 800d4a8:	e02a      	b.n	800d500 <HAL_DMA_IRQHandler+0x6e4>
 800d4aa:	bf00      	nop
 800d4ac:	40020010 	.word	0x40020010
 800d4b0:	40020028 	.word	0x40020028
 800d4b4:	40020040 	.word	0x40020040
 800d4b8:	40020058 	.word	0x40020058
 800d4bc:	40020070 	.word	0x40020070
 800d4c0:	40020088 	.word	0x40020088
 800d4c4:	400200a0 	.word	0x400200a0
 800d4c8:	400200b8 	.word	0x400200b8
 800d4cc:	40020410 	.word	0x40020410
 800d4d0:	40020428 	.word	0x40020428
 800d4d4:	40020440 	.word	0x40020440
 800d4d8:	40020458 	.word	0x40020458
 800d4dc:	40020470 	.word	0x40020470
 800d4e0:	40020488 	.word	0x40020488
 800d4e4:	400204a0 	.word	0x400204a0
 800d4e8:	400204b8 	.word	0x400204b8
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	681b      	ldr	r3, [r3, #0]
 800d4f0:	681b      	ldr	r3, [r3, #0]
 800d4f2:	f003 0302 	and.w	r3, r3, #2
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	bf14      	ite	ne
 800d4fa:	2301      	movne	r3, #1
 800d4fc:	2300      	moveq	r3, #0
 800d4fe:	b2db      	uxtb	r3, r3
 800d500:	2b00      	cmp	r3, #0
 800d502:	f000 8087 	beq.w	800d614 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d50a:	f003 031f 	and.w	r3, r3, #31
 800d50e:	2220      	movs	r2, #32
 800d510:	409a      	lsls	r2, r3
 800d512:	6a3b      	ldr	r3, [r7, #32]
 800d514:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800d51c:	b2db      	uxtb	r3, r3
 800d51e:	2b04      	cmp	r3, #4
 800d520:	d139      	bne.n	800d596 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	681b      	ldr	r3, [r3, #0]
 800d526:	681a      	ldr	r2, [r3, #0]
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	681b      	ldr	r3, [r3, #0]
 800d52c:	f022 0216 	bic.w	r2, r2, #22
 800d530:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	681b      	ldr	r3, [r3, #0]
 800d536:	695a      	ldr	r2, [r3, #20]
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	681b      	ldr	r3, [r3, #0]
 800d53c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800d540:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d546:	2b00      	cmp	r3, #0
 800d548:	d103      	bne.n	800d552 <HAL_DMA_IRQHandler+0x736>
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d54e:	2b00      	cmp	r3, #0
 800d550:	d007      	beq.n	800d562 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	681b      	ldr	r3, [r3, #0]
 800d556:	681a      	ldr	r2, [r3, #0]
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	f022 0208 	bic.w	r2, r2, #8
 800d560:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d566:	f003 031f 	and.w	r3, r3, #31
 800d56a:	223f      	movs	r2, #63	@ 0x3f
 800d56c:	409a      	lsls	r2, r3
 800d56e:	6a3b      	ldr	r3, [r7, #32]
 800d570:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	2201      	movs	r2, #1
 800d576:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	2200      	movs	r2, #0
 800d57e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d586:	2b00      	cmp	r3, #0
 800d588:	f000 834a 	beq.w	800dc20 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d590:	6878      	ldr	r0, [r7, #4]
 800d592:	4798      	blx	r3
          }
          return;
 800d594:	e344      	b.n	800dc20 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	681b      	ldr	r3, [r3, #0]
 800d59a:	681b      	ldr	r3, [r3, #0]
 800d59c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800d5a0:	2b00      	cmp	r3, #0
 800d5a2:	d018      	beq.n	800d5d6 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	681b      	ldr	r3, [r3, #0]
 800d5a8:	681b      	ldr	r3, [r3, #0]
 800d5aa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	d108      	bne.n	800d5c4 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	d02c      	beq.n	800d614 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d5be:	6878      	ldr	r0, [r7, #4]
 800d5c0:	4798      	blx	r3
 800d5c2:	e027      	b.n	800d614 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d5c8:	2b00      	cmp	r3, #0
 800d5ca:	d023      	beq.n	800d614 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d5d0:	6878      	ldr	r0, [r7, #4]
 800d5d2:	4798      	blx	r3
 800d5d4:	e01e      	b.n	800d614 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	681b      	ldr	r3, [r3, #0]
 800d5da:	681b      	ldr	r3, [r3, #0]
 800d5dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d5e0:	2b00      	cmp	r3, #0
 800d5e2:	d10f      	bne.n	800d604 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	681b      	ldr	r3, [r3, #0]
 800d5e8:	681a      	ldr	r2, [r3, #0]
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	681b      	ldr	r3, [r3, #0]
 800d5ee:	f022 0210 	bic.w	r2, r2, #16
 800d5f2:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	2201      	movs	r2, #1
 800d5f8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	2200      	movs	r2, #0
 800d600:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d608:	2b00      	cmp	r3, #0
 800d60a:	d003      	beq.n	800d614 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d610:	6878      	ldr	r0, [r7, #4]
 800d612:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d618:	2b00      	cmp	r3, #0
 800d61a:	f000 8306 	beq.w	800dc2a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d622:	f003 0301 	and.w	r3, r3, #1
 800d626:	2b00      	cmp	r3, #0
 800d628:	f000 8088 	beq.w	800d73c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	2204      	movs	r2, #4
 800d630:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	681b      	ldr	r3, [r3, #0]
 800d638:	4a7a      	ldr	r2, [pc, #488]	@ (800d824 <HAL_DMA_IRQHandler+0xa08>)
 800d63a:	4293      	cmp	r3, r2
 800d63c:	d04a      	beq.n	800d6d4 <HAL_DMA_IRQHandler+0x8b8>
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	681b      	ldr	r3, [r3, #0]
 800d642:	4a79      	ldr	r2, [pc, #484]	@ (800d828 <HAL_DMA_IRQHandler+0xa0c>)
 800d644:	4293      	cmp	r3, r2
 800d646:	d045      	beq.n	800d6d4 <HAL_DMA_IRQHandler+0x8b8>
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	681b      	ldr	r3, [r3, #0]
 800d64c:	4a77      	ldr	r2, [pc, #476]	@ (800d82c <HAL_DMA_IRQHandler+0xa10>)
 800d64e:	4293      	cmp	r3, r2
 800d650:	d040      	beq.n	800d6d4 <HAL_DMA_IRQHandler+0x8b8>
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	681b      	ldr	r3, [r3, #0]
 800d656:	4a76      	ldr	r2, [pc, #472]	@ (800d830 <HAL_DMA_IRQHandler+0xa14>)
 800d658:	4293      	cmp	r3, r2
 800d65a:	d03b      	beq.n	800d6d4 <HAL_DMA_IRQHandler+0x8b8>
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	681b      	ldr	r3, [r3, #0]
 800d660:	4a74      	ldr	r2, [pc, #464]	@ (800d834 <HAL_DMA_IRQHandler+0xa18>)
 800d662:	4293      	cmp	r3, r2
 800d664:	d036      	beq.n	800d6d4 <HAL_DMA_IRQHandler+0x8b8>
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	681b      	ldr	r3, [r3, #0]
 800d66a:	4a73      	ldr	r2, [pc, #460]	@ (800d838 <HAL_DMA_IRQHandler+0xa1c>)
 800d66c:	4293      	cmp	r3, r2
 800d66e:	d031      	beq.n	800d6d4 <HAL_DMA_IRQHandler+0x8b8>
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	681b      	ldr	r3, [r3, #0]
 800d674:	4a71      	ldr	r2, [pc, #452]	@ (800d83c <HAL_DMA_IRQHandler+0xa20>)
 800d676:	4293      	cmp	r3, r2
 800d678:	d02c      	beq.n	800d6d4 <HAL_DMA_IRQHandler+0x8b8>
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	681b      	ldr	r3, [r3, #0]
 800d67e:	4a70      	ldr	r2, [pc, #448]	@ (800d840 <HAL_DMA_IRQHandler+0xa24>)
 800d680:	4293      	cmp	r3, r2
 800d682:	d027      	beq.n	800d6d4 <HAL_DMA_IRQHandler+0x8b8>
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	681b      	ldr	r3, [r3, #0]
 800d688:	4a6e      	ldr	r2, [pc, #440]	@ (800d844 <HAL_DMA_IRQHandler+0xa28>)
 800d68a:	4293      	cmp	r3, r2
 800d68c:	d022      	beq.n	800d6d4 <HAL_DMA_IRQHandler+0x8b8>
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	681b      	ldr	r3, [r3, #0]
 800d692:	4a6d      	ldr	r2, [pc, #436]	@ (800d848 <HAL_DMA_IRQHandler+0xa2c>)
 800d694:	4293      	cmp	r3, r2
 800d696:	d01d      	beq.n	800d6d4 <HAL_DMA_IRQHandler+0x8b8>
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	681b      	ldr	r3, [r3, #0]
 800d69c:	4a6b      	ldr	r2, [pc, #428]	@ (800d84c <HAL_DMA_IRQHandler+0xa30>)
 800d69e:	4293      	cmp	r3, r2
 800d6a0:	d018      	beq.n	800d6d4 <HAL_DMA_IRQHandler+0x8b8>
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	681b      	ldr	r3, [r3, #0]
 800d6a6:	4a6a      	ldr	r2, [pc, #424]	@ (800d850 <HAL_DMA_IRQHandler+0xa34>)
 800d6a8:	4293      	cmp	r3, r2
 800d6aa:	d013      	beq.n	800d6d4 <HAL_DMA_IRQHandler+0x8b8>
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	681b      	ldr	r3, [r3, #0]
 800d6b0:	4a68      	ldr	r2, [pc, #416]	@ (800d854 <HAL_DMA_IRQHandler+0xa38>)
 800d6b2:	4293      	cmp	r3, r2
 800d6b4:	d00e      	beq.n	800d6d4 <HAL_DMA_IRQHandler+0x8b8>
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	681b      	ldr	r3, [r3, #0]
 800d6ba:	4a67      	ldr	r2, [pc, #412]	@ (800d858 <HAL_DMA_IRQHandler+0xa3c>)
 800d6bc:	4293      	cmp	r3, r2
 800d6be:	d009      	beq.n	800d6d4 <HAL_DMA_IRQHandler+0x8b8>
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	681b      	ldr	r3, [r3, #0]
 800d6c4:	4a65      	ldr	r2, [pc, #404]	@ (800d85c <HAL_DMA_IRQHandler+0xa40>)
 800d6c6:	4293      	cmp	r3, r2
 800d6c8:	d004      	beq.n	800d6d4 <HAL_DMA_IRQHandler+0x8b8>
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	681b      	ldr	r3, [r3, #0]
 800d6ce:	4a64      	ldr	r2, [pc, #400]	@ (800d860 <HAL_DMA_IRQHandler+0xa44>)
 800d6d0:	4293      	cmp	r3, r2
 800d6d2:	d108      	bne.n	800d6e6 <HAL_DMA_IRQHandler+0x8ca>
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	681b      	ldr	r3, [r3, #0]
 800d6d8:	681a      	ldr	r2, [r3, #0]
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	681b      	ldr	r3, [r3, #0]
 800d6de:	f022 0201 	bic.w	r2, r2, #1
 800d6e2:	601a      	str	r2, [r3, #0]
 800d6e4:	e007      	b.n	800d6f6 <HAL_DMA_IRQHandler+0x8da>
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	681b      	ldr	r3, [r3, #0]
 800d6ea:	681a      	ldr	r2, [r3, #0]
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	681b      	ldr	r3, [r3, #0]
 800d6f0:	f022 0201 	bic.w	r2, r2, #1
 800d6f4:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800d6f6:	68fb      	ldr	r3, [r7, #12]
 800d6f8:	3301      	adds	r3, #1
 800d6fa:	60fb      	str	r3, [r7, #12]
 800d6fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d6fe:	429a      	cmp	r2, r3
 800d700:	d307      	bcc.n	800d712 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	681b      	ldr	r3, [r3, #0]
 800d706:	681b      	ldr	r3, [r3, #0]
 800d708:	f003 0301 	and.w	r3, r3, #1
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	d1f2      	bne.n	800d6f6 <HAL_DMA_IRQHandler+0x8da>
 800d710:	e000      	b.n	800d714 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800d712:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	681b      	ldr	r3, [r3, #0]
 800d718:	681b      	ldr	r3, [r3, #0]
 800d71a:	f003 0301 	and.w	r3, r3, #1
 800d71e:	2b00      	cmp	r3, #0
 800d720:	d004      	beq.n	800d72c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	2203      	movs	r2, #3
 800d726:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800d72a:	e003      	b.n	800d734 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	2201      	movs	r2, #1
 800d730:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	2200      	movs	r2, #0
 800d738:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d740:	2b00      	cmp	r3, #0
 800d742:	f000 8272 	beq.w	800dc2a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d74a:	6878      	ldr	r0, [r7, #4]
 800d74c:	4798      	blx	r3
 800d74e:	e26c      	b.n	800dc2a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	681b      	ldr	r3, [r3, #0]
 800d754:	4a43      	ldr	r2, [pc, #268]	@ (800d864 <HAL_DMA_IRQHandler+0xa48>)
 800d756:	4293      	cmp	r3, r2
 800d758:	d022      	beq.n	800d7a0 <HAL_DMA_IRQHandler+0x984>
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	681b      	ldr	r3, [r3, #0]
 800d75e:	4a42      	ldr	r2, [pc, #264]	@ (800d868 <HAL_DMA_IRQHandler+0xa4c>)
 800d760:	4293      	cmp	r3, r2
 800d762:	d01d      	beq.n	800d7a0 <HAL_DMA_IRQHandler+0x984>
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	681b      	ldr	r3, [r3, #0]
 800d768:	4a40      	ldr	r2, [pc, #256]	@ (800d86c <HAL_DMA_IRQHandler+0xa50>)
 800d76a:	4293      	cmp	r3, r2
 800d76c:	d018      	beq.n	800d7a0 <HAL_DMA_IRQHandler+0x984>
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	681b      	ldr	r3, [r3, #0]
 800d772:	4a3f      	ldr	r2, [pc, #252]	@ (800d870 <HAL_DMA_IRQHandler+0xa54>)
 800d774:	4293      	cmp	r3, r2
 800d776:	d013      	beq.n	800d7a0 <HAL_DMA_IRQHandler+0x984>
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	681b      	ldr	r3, [r3, #0]
 800d77c:	4a3d      	ldr	r2, [pc, #244]	@ (800d874 <HAL_DMA_IRQHandler+0xa58>)
 800d77e:	4293      	cmp	r3, r2
 800d780:	d00e      	beq.n	800d7a0 <HAL_DMA_IRQHandler+0x984>
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	681b      	ldr	r3, [r3, #0]
 800d786:	4a3c      	ldr	r2, [pc, #240]	@ (800d878 <HAL_DMA_IRQHandler+0xa5c>)
 800d788:	4293      	cmp	r3, r2
 800d78a:	d009      	beq.n	800d7a0 <HAL_DMA_IRQHandler+0x984>
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	681b      	ldr	r3, [r3, #0]
 800d790:	4a3a      	ldr	r2, [pc, #232]	@ (800d87c <HAL_DMA_IRQHandler+0xa60>)
 800d792:	4293      	cmp	r3, r2
 800d794:	d004      	beq.n	800d7a0 <HAL_DMA_IRQHandler+0x984>
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	681b      	ldr	r3, [r3, #0]
 800d79a:	4a39      	ldr	r2, [pc, #228]	@ (800d880 <HAL_DMA_IRQHandler+0xa64>)
 800d79c:	4293      	cmp	r3, r2
 800d79e:	d101      	bne.n	800d7a4 <HAL_DMA_IRQHandler+0x988>
 800d7a0:	2301      	movs	r3, #1
 800d7a2:	e000      	b.n	800d7a6 <HAL_DMA_IRQHandler+0x98a>
 800d7a4:	2300      	movs	r3, #0
 800d7a6:	2b00      	cmp	r3, #0
 800d7a8:	f000 823f 	beq.w	800dc2a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	681b      	ldr	r3, [r3, #0]
 800d7b0:	681b      	ldr	r3, [r3, #0]
 800d7b2:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d7b8:	f003 031f 	and.w	r3, r3, #31
 800d7bc:	2204      	movs	r2, #4
 800d7be:	409a      	lsls	r2, r3
 800d7c0:	697b      	ldr	r3, [r7, #20]
 800d7c2:	4013      	ands	r3, r2
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	f000 80cd 	beq.w	800d964 <HAL_DMA_IRQHandler+0xb48>
 800d7ca:	693b      	ldr	r3, [r7, #16]
 800d7cc:	f003 0304 	and.w	r3, r3, #4
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	f000 80c7 	beq.w	800d964 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d7da:	f003 031f 	and.w	r3, r3, #31
 800d7de:	2204      	movs	r2, #4
 800d7e0:	409a      	lsls	r2, r3
 800d7e2:	69fb      	ldr	r3, [r7, #28]
 800d7e4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800d7e6:	693b      	ldr	r3, [r7, #16]
 800d7e8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d7ec:	2b00      	cmp	r3, #0
 800d7ee:	d049      	beq.n	800d884 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800d7f0:	693b      	ldr	r3, [r7, #16]
 800d7f2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	d109      	bne.n	800d80e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d7fe:	2b00      	cmp	r3, #0
 800d800:	f000 8210 	beq.w	800dc24 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d808:	6878      	ldr	r0, [r7, #4]
 800d80a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800d80c:	e20a      	b.n	800dc24 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d812:	2b00      	cmp	r3, #0
 800d814:	f000 8206 	beq.w	800dc24 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d81c:	6878      	ldr	r0, [r7, #4]
 800d81e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800d820:	e200      	b.n	800dc24 <HAL_DMA_IRQHandler+0xe08>
 800d822:	bf00      	nop
 800d824:	40020010 	.word	0x40020010
 800d828:	40020028 	.word	0x40020028
 800d82c:	40020040 	.word	0x40020040
 800d830:	40020058 	.word	0x40020058
 800d834:	40020070 	.word	0x40020070
 800d838:	40020088 	.word	0x40020088
 800d83c:	400200a0 	.word	0x400200a0
 800d840:	400200b8 	.word	0x400200b8
 800d844:	40020410 	.word	0x40020410
 800d848:	40020428 	.word	0x40020428
 800d84c:	40020440 	.word	0x40020440
 800d850:	40020458 	.word	0x40020458
 800d854:	40020470 	.word	0x40020470
 800d858:	40020488 	.word	0x40020488
 800d85c:	400204a0 	.word	0x400204a0
 800d860:	400204b8 	.word	0x400204b8
 800d864:	58025408 	.word	0x58025408
 800d868:	5802541c 	.word	0x5802541c
 800d86c:	58025430 	.word	0x58025430
 800d870:	58025444 	.word	0x58025444
 800d874:	58025458 	.word	0x58025458
 800d878:	5802546c 	.word	0x5802546c
 800d87c:	58025480 	.word	0x58025480
 800d880:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800d884:	693b      	ldr	r3, [r7, #16]
 800d886:	f003 0320 	and.w	r3, r3, #32
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	d160      	bne.n	800d950 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	681b      	ldr	r3, [r3, #0]
 800d892:	4a7f      	ldr	r2, [pc, #508]	@ (800da90 <HAL_DMA_IRQHandler+0xc74>)
 800d894:	4293      	cmp	r3, r2
 800d896:	d04a      	beq.n	800d92e <HAL_DMA_IRQHandler+0xb12>
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	681b      	ldr	r3, [r3, #0]
 800d89c:	4a7d      	ldr	r2, [pc, #500]	@ (800da94 <HAL_DMA_IRQHandler+0xc78>)
 800d89e:	4293      	cmp	r3, r2
 800d8a0:	d045      	beq.n	800d92e <HAL_DMA_IRQHandler+0xb12>
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	681b      	ldr	r3, [r3, #0]
 800d8a6:	4a7c      	ldr	r2, [pc, #496]	@ (800da98 <HAL_DMA_IRQHandler+0xc7c>)
 800d8a8:	4293      	cmp	r3, r2
 800d8aa:	d040      	beq.n	800d92e <HAL_DMA_IRQHandler+0xb12>
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	681b      	ldr	r3, [r3, #0]
 800d8b0:	4a7a      	ldr	r2, [pc, #488]	@ (800da9c <HAL_DMA_IRQHandler+0xc80>)
 800d8b2:	4293      	cmp	r3, r2
 800d8b4:	d03b      	beq.n	800d92e <HAL_DMA_IRQHandler+0xb12>
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	681b      	ldr	r3, [r3, #0]
 800d8ba:	4a79      	ldr	r2, [pc, #484]	@ (800daa0 <HAL_DMA_IRQHandler+0xc84>)
 800d8bc:	4293      	cmp	r3, r2
 800d8be:	d036      	beq.n	800d92e <HAL_DMA_IRQHandler+0xb12>
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	681b      	ldr	r3, [r3, #0]
 800d8c4:	4a77      	ldr	r2, [pc, #476]	@ (800daa4 <HAL_DMA_IRQHandler+0xc88>)
 800d8c6:	4293      	cmp	r3, r2
 800d8c8:	d031      	beq.n	800d92e <HAL_DMA_IRQHandler+0xb12>
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	681b      	ldr	r3, [r3, #0]
 800d8ce:	4a76      	ldr	r2, [pc, #472]	@ (800daa8 <HAL_DMA_IRQHandler+0xc8c>)
 800d8d0:	4293      	cmp	r3, r2
 800d8d2:	d02c      	beq.n	800d92e <HAL_DMA_IRQHandler+0xb12>
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	681b      	ldr	r3, [r3, #0]
 800d8d8:	4a74      	ldr	r2, [pc, #464]	@ (800daac <HAL_DMA_IRQHandler+0xc90>)
 800d8da:	4293      	cmp	r3, r2
 800d8dc:	d027      	beq.n	800d92e <HAL_DMA_IRQHandler+0xb12>
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	681b      	ldr	r3, [r3, #0]
 800d8e2:	4a73      	ldr	r2, [pc, #460]	@ (800dab0 <HAL_DMA_IRQHandler+0xc94>)
 800d8e4:	4293      	cmp	r3, r2
 800d8e6:	d022      	beq.n	800d92e <HAL_DMA_IRQHandler+0xb12>
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	681b      	ldr	r3, [r3, #0]
 800d8ec:	4a71      	ldr	r2, [pc, #452]	@ (800dab4 <HAL_DMA_IRQHandler+0xc98>)
 800d8ee:	4293      	cmp	r3, r2
 800d8f0:	d01d      	beq.n	800d92e <HAL_DMA_IRQHandler+0xb12>
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	681b      	ldr	r3, [r3, #0]
 800d8f6:	4a70      	ldr	r2, [pc, #448]	@ (800dab8 <HAL_DMA_IRQHandler+0xc9c>)
 800d8f8:	4293      	cmp	r3, r2
 800d8fa:	d018      	beq.n	800d92e <HAL_DMA_IRQHandler+0xb12>
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	681b      	ldr	r3, [r3, #0]
 800d900:	4a6e      	ldr	r2, [pc, #440]	@ (800dabc <HAL_DMA_IRQHandler+0xca0>)
 800d902:	4293      	cmp	r3, r2
 800d904:	d013      	beq.n	800d92e <HAL_DMA_IRQHandler+0xb12>
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	681b      	ldr	r3, [r3, #0]
 800d90a:	4a6d      	ldr	r2, [pc, #436]	@ (800dac0 <HAL_DMA_IRQHandler+0xca4>)
 800d90c:	4293      	cmp	r3, r2
 800d90e:	d00e      	beq.n	800d92e <HAL_DMA_IRQHandler+0xb12>
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	681b      	ldr	r3, [r3, #0]
 800d914:	4a6b      	ldr	r2, [pc, #428]	@ (800dac4 <HAL_DMA_IRQHandler+0xca8>)
 800d916:	4293      	cmp	r3, r2
 800d918:	d009      	beq.n	800d92e <HAL_DMA_IRQHandler+0xb12>
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	681b      	ldr	r3, [r3, #0]
 800d91e:	4a6a      	ldr	r2, [pc, #424]	@ (800dac8 <HAL_DMA_IRQHandler+0xcac>)
 800d920:	4293      	cmp	r3, r2
 800d922:	d004      	beq.n	800d92e <HAL_DMA_IRQHandler+0xb12>
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	681b      	ldr	r3, [r3, #0]
 800d928:	4a68      	ldr	r2, [pc, #416]	@ (800dacc <HAL_DMA_IRQHandler+0xcb0>)
 800d92a:	4293      	cmp	r3, r2
 800d92c:	d108      	bne.n	800d940 <HAL_DMA_IRQHandler+0xb24>
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	681b      	ldr	r3, [r3, #0]
 800d932:	681a      	ldr	r2, [r3, #0]
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	681b      	ldr	r3, [r3, #0]
 800d938:	f022 0208 	bic.w	r2, r2, #8
 800d93c:	601a      	str	r2, [r3, #0]
 800d93e:	e007      	b.n	800d950 <HAL_DMA_IRQHandler+0xb34>
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	681b      	ldr	r3, [r3, #0]
 800d944:	681a      	ldr	r2, [r3, #0]
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	681b      	ldr	r3, [r3, #0]
 800d94a:	f022 0204 	bic.w	r2, r2, #4
 800d94e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d954:	2b00      	cmp	r3, #0
 800d956:	f000 8165 	beq.w	800dc24 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d95e:	6878      	ldr	r0, [r7, #4]
 800d960:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800d962:	e15f      	b.n	800dc24 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d968:	f003 031f 	and.w	r3, r3, #31
 800d96c:	2202      	movs	r2, #2
 800d96e:	409a      	lsls	r2, r3
 800d970:	697b      	ldr	r3, [r7, #20]
 800d972:	4013      	ands	r3, r2
 800d974:	2b00      	cmp	r3, #0
 800d976:	f000 80c5 	beq.w	800db04 <HAL_DMA_IRQHandler+0xce8>
 800d97a:	693b      	ldr	r3, [r7, #16]
 800d97c:	f003 0302 	and.w	r3, r3, #2
 800d980:	2b00      	cmp	r3, #0
 800d982:	f000 80bf 	beq.w	800db04 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d98a:	f003 031f 	and.w	r3, r3, #31
 800d98e:	2202      	movs	r2, #2
 800d990:	409a      	lsls	r2, r3
 800d992:	69fb      	ldr	r3, [r7, #28]
 800d994:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800d996:	693b      	ldr	r3, [r7, #16]
 800d998:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d99c:	2b00      	cmp	r3, #0
 800d99e:	d018      	beq.n	800d9d2 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800d9a0:	693b      	ldr	r3, [r7, #16]
 800d9a2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	d109      	bne.n	800d9be <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	f000 813a 	beq.w	800dc28 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d9b8:	6878      	ldr	r0, [r7, #4]
 800d9ba:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800d9bc:	e134      	b.n	800dc28 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	f000 8130 	beq.w	800dc28 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d9cc:	6878      	ldr	r0, [r7, #4]
 800d9ce:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800d9d0:	e12a      	b.n	800dc28 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800d9d2:	693b      	ldr	r3, [r7, #16]
 800d9d4:	f003 0320 	and.w	r3, r3, #32
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	f040 8089 	bne.w	800daf0 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	681b      	ldr	r3, [r3, #0]
 800d9e2:	4a2b      	ldr	r2, [pc, #172]	@ (800da90 <HAL_DMA_IRQHandler+0xc74>)
 800d9e4:	4293      	cmp	r3, r2
 800d9e6:	d04a      	beq.n	800da7e <HAL_DMA_IRQHandler+0xc62>
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	681b      	ldr	r3, [r3, #0]
 800d9ec:	4a29      	ldr	r2, [pc, #164]	@ (800da94 <HAL_DMA_IRQHandler+0xc78>)
 800d9ee:	4293      	cmp	r3, r2
 800d9f0:	d045      	beq.n	800da7e <HAL_DMA_IRQHandler+0xc62>
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	681b      	ldr	r3, [r3, #0]
 800d9f6:	4a28      	ldr	r2, [pc, #160]	@ (800da98 <HAL_DMA_IRQHandler+0xc7c>)
 800d9f8:	4293      	cmp	r3, r2
 800d9fa:	d040      	beq.n	800da7e <HAL_DMA_IRQHandler+0xc62>
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	681b      	ldr	r3, [r3, #0]
 800da00:	4a26      	ldr	r2, [pc, #152]	@ (800da9c <HAL_DMA_IRQHandler+0xc80>)
 800da02:	4293      	cmp	r3, r2
 800da04:	d03b      	beq.n	800da7e <HAL_DMA_IRQHandler+0xc62>
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	681b      	ldr	r3, [r3, #0]
 800da0a:	4a25      	ldr	r2, [pc, #148]	@ (800daa0 <HAL_DMA_IRQHandler+0xc84>)
 800da0c:	4293      	cmp	r3, r2
 800da0e:	d036      	beq.n	800da7e <HAL_DMA_IRQHandler+0xc62>
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	681b      	ldr	r3, [r3, #0]
 800da14:	4a23      	ldr	r2, [pc, #140]	@ (800daa4 <HAL_DMA_IRQHandler+0xc88>)
 800da16:	4293      	cmp	r3, r2
 800da18:	d031      	beq.n	800da7e <HAL_DMA_IRQHandler+0xc62>
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	681b      	ldr	r3, [r3, #0]
 800da1e:	4a22      	ldr	r2, [pc, #136]	@ (800daa8 <HAL_DMA_IRQHandler+0xc8c>)
 800da20:	4293      	cmp	r3, r2
 800da22:	d02c      	beq.n	800da7e <HAL_DMA_IRQHandler+0xc62>
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	681b      	ldr	r3, [r3, #0]
 800da28:	4a20      	ldr	r2, [pc, #128]	@ (800daac <HAL_DMA_IRQHandler+0xc90>)
 800da2a:	4293      	cmp	r3, r2
 800da2c:	d027      	beq.n	800da7e <HAL_DMA_IRQHandler+0xc62>
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	681b      	ldr	r3, [r3, #0]
 800da32:	4a1f      	ldr	r2, [pc, #124]	@ (800dab0 <HAL_DMA_IRQHandler+0xc94>)
 800da34:	4293      	cmp	r3, r2
 800da36:	d022      	beq.n	800da7e <HAL_DMA_IRQHandler+0xc62>
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	681b      	ldr	r3, [r3, #0]
 800da3c:	4a1d      	ldr	r2, [pc, #116]	@ (800dab4 <HAL_DMA_IRQHandler+0xc98>)
 800da3e:	4293      	cmp	r3, r2
 800da40:	d01d      	beq.n	800da7e <HAL_DMA_IRQHandler+0xc62>
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	681b      	ldr	r3, [r3, #0]
 800da46:	4a1c      	ldr	r2, [pc, #112]	@ (800dab8 <HAL_DMA_IRQHandler+0xc9c>)
 800da48:	4293      	cmp	r3, r2
 800da4a:	d018      	beq.n	800da7e <HAL_DMA_IRQHandler+0xc62>
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	681b      	ldr	r3, [r3, #0]
 800da50:	4a1a      	ldr	r2, [pc, #104]	@ (800dabc <HAL_DMA_IRQHandler+0xca0>)
 800da52:	4293      	cmp	r3, r2
 800da54:	d013      	beq.n	800da7e <HAL_DMA_IRQHandler+0xc62>
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	681b      	ldr	r3, [r3, #0]
 800da5a:	4a19      	ldr	r2, [pc, #100]	@ (800dac0 <HAL_DMA_IRQHandler+0xca4>)
 800da5c:	4293      	cmp	r3, r2
 800da5e:	d00e      	beq.n	800da7e <HAL_DMA_IRQHandler+0xc62>
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	681b      	ldr	r3, [r3, #0]
 800da64:	4a17      	ldr	r2, [pc, #92]	@ (800dac4 <HAL_DMA_IRQHandler+0xca8>)
 800da66:	4293      	cmp	r3, r2
 800da68:	d009      	beq.n	800da7e <HAL_DMA_IRQHandler+0xc62>
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	681b      	ldr	r3, [r3, #0]
 800da6e:	4a16      	ldr	r2, [pc, #88]	@ (800dac8 <HAL_DMA_IRQHandler+0xcac>)
 800da70:	4293      	cmp	r3, r2
 800da72:	d004      	beq.n	800da7e <HAL_DMA_IRQHandler+0xc62>
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	681b      	ldr	r3, [r3, #0]
 800da78:	4a14      	ldr	r2, [pc, #80]	@ (800dacc <HAL_DMA_IRQHandler+0xcb0>)
 800da7a:	4293      	cmp	r3, r2
 800da7c:	d128      	bne.n	800dad0 <HAL_DMA_IRQHandler+0xcb4>
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	681b      	ldr	r3, [r3, #0]
 800da82:	681a      	ldr	r2, [r3, #0]
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	681b      	ldr	r3, [r3, #0]
 800da88:	f022 0214 	bic.w	r2, r2, #20
 800da8c:	601a      	str	r2, [r3, #0]
 800da8e:	e027      	b.n	800dae0 <HAL_DMA_IRQHandler+0xcc4>
 800da90:	40020010 	.word	0x40020010
 800da94:	40020028 	.word	0x40020028
 800da98:	40020040 	.word	0x40020040
 800da9c:	40020058 	.word	0x40020058
 800daa0:	40020070 	.word	0x40020070
 800daa4:	40020088 	.word	0x40020088
 800daa8:	400200a0 	.word	0x400200a0
 800daac:	400200b8 	.word	0x400200b8
 800dab0:	40020410 	.word	0x40020410
 800dab4:	40020428 	.word	0x40020428
 800dab8:	40020440 	.word	0x40020440
 800dabc:	40020458 	.word	0x40020458
 800dac0:	40020470 	.word	0x40020470
 800dac4:	40020488 	.word	0x40020488
 800dac8:	400204a0 	.word	0x400204a0
 800dacc:	400204b8 	.word	0x400204b8
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	681b      	ldr	r3, [r3, #0]
 800dad4:	681a      	ldr	r2, [r3, #0]
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	681b      	ldr	r3, [r3, #0]
 800dada:	f022 020a 	bic.w	r2, r2, #10
 800dade:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	2201      	movs	r2, #1
 800dae4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	2200      	movs	r2, #0
 800daec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	f000 8097 	beq.w	800dc28 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800dafe:	6878      	ldr	r0, [r7, #4]
 800db00:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800db02:	e091      	b.n	800dc28 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800db08:	f003 031f 	and.w	r3, r3, #31
 800db0c:	2208      	movs	r2, #8
 800db0e:	409a      	lsls	r2, r3
 800db10:	697b      	ldr	r3, [r7, #20]
 800db12:	4013      	ands	r3, r2
 800db14:	2b00      	cmp	r3, #0
 800db16:	f000 8088 	beq.w	800dc2a <HAL_DMA_IRQHandler+0xe0e>
 800db1a:	693b      	ldr	r3, [r7, #16]
 800db1c:	f003 0308 	and.w	r3, r3, #8
 800db20:	2b00      	cmp	r3, #0
 800db22:	f000 8082 	beq.w	800dc2a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	681b      	ldr	r3, [r3, #0]
 800db2a:	4a41      	ldr	r2, [pc, #260]	@ (800dc30 <HAL_DMA_IRQHandler+0xe14>)
 800db2c:	4293      	cmp	r3, r2
 800db2e:	d04a      	beq.n	800dbc6 <HAL_DMA_IRQHandler+0xdaa>
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	681b      	ldr	r3, [r3, #0]
 800db34:	4a3f      	ldr	r2, [pc, #252]	@ (800dc34 <HAL_DMA_IRQHandler+0xe18>)
 800db36:	4293      	cmp	r3, r2
 800db38:	d045      	beq.n	800dbc6 <HAL_DMA_IRQHandler+0xdaa>
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	681b      	ldr	r3, [r3, #0]
 800db3e:	4a3e      	ldr	r2, [pc, #248]	@ (800dc38 <HAL_DMA_IRQHandler+0xe1c>)
 800db40:	4293      	cmp	r3, r2
 800db42:	d040      	beq.n	800dbc6 <HAL_DMA_IRQHandler+0xdaa>
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	681b      	ldr	r3, [r3, #0]
 800db48:	4a3c      	ldr	r2, [pc, #240]	@ (800dc3c <HAL_DMA_IRQHandler+0xe20>)
 800db4a:	4293      	cmp	r3, r2
 800db4c:	d03b      	beq.n	800dbc6 <HAL_DMA_IRQHandler+0xdaa>
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	681b      	ldr	r3, [r3, #0]
 800db52:	4a3b      	ldr	r2, [pc, #236]	@ (800dc40 <HAL_DMA_IRQHandler+0xe24>)
 800db54:	4293      	cmp	r3, r2
 800db56:	d036      	beq.n	800dbc6 <HAL_DMA_IRQHandler+0xdaa>
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	681b      	ldr	r3, [r3, #0]
 800db5c:	4a39      	ldr	r2, [pc, #228]	@ (800dc44 <HAL_DMA_IRQHandler+0xe28>)
 800db5e:	4293      	cmp	r3, r2
 800db60:	d031      	beq.n	800dbc6 <HAL_DMA_IRQHandler+0xdaa>
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	681b      	ldr	r3, [r3, #0]
 800db66:	4a38      	ldr	r2, [pc, #224]	@ (800dc48 <HAL_DMA_IRQHandler+0xe2c>)
 800db68:	4293      	cmp	r3, r2
 800db6a:	d02c      	beq.n	800dbc6 <HAL_DMA_IRQHandler+0xdaa>
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	681b      	ldr	r3, [r3, #0]
 800db70:	4a36      	ldr	r2, [pc, #216]	@ (800dc4c <HAL_DMA_IRQHandler+0xe30>)
 800db72:	4293      	cmp	r3, r2
 800db74:	d027      	beq.n	800dbc6 <HAL_DMA_IRQHandler+0xdaa>
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	681b      	ldr	r3, [r3, #0]
 800db7a:	4a35      	ldr	r2, [pc, #212]	@ (800dc50 <HAL_DMA_IRQHandler+0xe34>)
 800db7c:	4293      	cmp	r3, r2
 800db7e:	d022      	beq.n	800dbc6 <HAL_DMA_IRQHandler+0xdaa>
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	681b      	ldr	r3, [r3, #0]
 800db84:	4a33      	ldr	r2, [pc, #204]	@ (800dc54 <HAL_DMA_IRQHandler+0xe38>)
 800db86:	4293      	cmp	r3, r2
 800db88:	d01d      	beq.n	800dbc6 <HAL_DMA_IRQHandler+0xdaa>
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	681b      	ldr	r3, [r3, #0]
 800db8e:	4a32      	ldr	r2, [pc, #200]	@ (800dc58 <HAL_DMA_IRQHandler+0xe3c>)
 800db90:	4293      	cmp	r3, r2
 800db92:	d018      	beq.n	800dbc6 <HAL_DMA_IRQHandler+0xdaa>
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	681b      	ldr	r3, [r3, #0]
 800db98:	4a30      	ldr	r2, [pc, #192]	@ (800dc5c <HAL_DMA_IRQHandler+0xe40>)
 800db9a:	4293      	cmp	r3, r2
 800db9c:	d013      	beq.n	800dbc6 <HAL_DMA_IRQHandler+0xdaa>
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	681b      	ldr	r3, [r3, #0]
 800dba2:	4a2f      	ldr	r2, [pc, #188]	@ (800dc60 <HAL_DMA_IRQHandler+0xe44>)
 800dba4:	4293      	cmp	r3, r2
 800dba6:	d00e      	beq.n	800dbc6 <HAL_DMA_IRQHandler+0xdaa>
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	681b      	ldr	r3, [r3, #0]
 800dbac:	4a2d      	ldr	r2, [pc, #180]	@ (800dc64 <HAL_DMA_IRQHandler+0xe48>)
 800dbae:	4293      	cmp	r3, r2
 800dbb0:	d009      	beq.n	800dbc6 <HAL_DMA_IRQHandler+0xdaa>
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	681b      	ldr	r3, [r3, #0]
 800dbb6:	4a2c      	ldr	r2, [pc, #176]	@ (800dc68 <HAL_DMA_IRQHandler+0xe4c>)
 800dbb8:	4293      	cmp	r3, r2
 800dbba:	d004      	beq.n	800dbc6 <HAL_DMA_IRQHandler+0xdaa>
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	681b      	ldr	r3, [r3, #0]
 800dbc0:	4a2a      	ldr	r2, [pc, #168]	@ (800dc6c <HAL_DMA_IRQHandler+0xe50>)
 800dbc2:	4293      	cmp	r3, r2
 800dbc4:	d108      	bne.n	800dbd8 <HAL_DMA_IRQHandler+0xdbc>
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	681b      	ldr	r3, [r3, #0]
 800dbca:	681a      	ldr	r2, [r3, #0]
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	681b      	ldr	r3, [r3, #0]
 800dbd0:	f022 021c 	bic.w	r2, r2, #28
 800dbd4:	601a      	str	r2, [r3, #0]
 800dbd6:	e007      	b.n	800dbe8 <HAL_DMA_IRQHandler+0xdcc>
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	681b      	ldr	r3, [r3, #0]
 800dbdc:	681a      	ldr	r2, [r3, #0]
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	681b      	ldr	r3, [r3, #0]
 800dbe2:	f022 020e 	bic.w	r2, r2, #14
 800dbe6:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800dbec:	f003 031f 	and.w	r3, r3, #31
 800dbf0:	2201      	movs	r2, #1
 800dbf2:	409a      	lsls	r2, r3
 800dbf4:	69fb      	ldr	r3, [r7, #28]
 800dbf6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	2201      	movs	r2, #1
 800dbfc:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	2201      	movs	r2, #1
 800dc02:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	2200      	movs	r2, #0
 800dc0a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800dc12:	2b00      	cmp	r3, #0
 800dc14:	d009      	beq.n	800dc2a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800dc1a:	6878      	ldr	r0, [r7, #4]
 800dc1c:	4798      	blx	r3
 800dc1e:	e004      	b.n	800dc2a <HAL_DMA_IRQHandler+0xe0e>
          return;
 800dc20:	bf00      	nop
 800dc22:	e002      	b.n	800dc2a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800dc24:	bf00      	nop
 800dc26:	e000      	b.n	800dc2a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800dc28:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800dc2a:	3728      	adds	r7, #40	@ 0x28
 800dc2c:	46bd      	mov	sp, r7
 800dc2e:	bd80      	pop	{r7, pc}
 800dc30:	40020010 	.word	0x40020010
 800dc34:	40020028 	.word	0x40020028
 800dc38:	40020040 	.word	0x40020040
 800dc3c:	40020058 	.word	0x40020058
 800dc40:	40020070 	.word	0x40020070
 800dc44:	40020088 	.word	0x40020088
 800dc48:	400200a0 	.word	0x400200a0
 800dc4c:	400200b8 	.word	0x400200b8
 800dc50:	40020410 	.word	0x40020410
 800dc54:	40020428 	.word	0x40020428
 800dc58:	40020440 	.word	0x40020440
 800dc5c:	40020458 	.word	0x40020458
 800dc60:	40020470 	.word	0x40020470
 800dc64:	40020488 	.word	0x40020488
 800dc68:	400204a0 	.word	0x400204a0
 800dc6c:	400204b8 	.word	0x400204b8

0800dc70 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(const DMA_HandleTypeDef *hdma)
{
 800dc70:	b480      	push	{r7}
 800dc72:	b083      	sub	sp, #12
 800dc74:	af00      	add	r7, sp, #0
 800dc76:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800dc7e:	b2db      	uxtb	r3, r3
}
 800dc80:	4618      	mov	r0, r3
 800dc82:	370c      	adds	r7, #12
 800dc84:	46bd      	mov	sp, r7
 800dc86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc8a:	4770      	bx	lr

0800dc8c <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(const DMA_HandleTypeDef *hdma)
{
 800dc8c:	b480      	push	{r7}
 800dc8e:	b083      	sub	sp, #12
 800dc90:	af00      	add	r7, sp, #0
 800dc92:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 800dc98:	4618      	mov	r0, r3
 800dc9a:	370c      	adds	r7, #12
 800dc9c:	46bd      	mov	sp, r7
 800dc9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dca2:	4770      	bx	lr

0800dca4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800dca4:	b480      	push	{r7}
 800dca6:	b087      	sub	sp, #28
 800dca8:	af00      	add	r7, sp, #0
 800dcaa:	60f8      	str	r0, [r7, #12]
 800dcac:	60b9      	str	r1, [r7, #8]
 800dcae:	607a      	str	r2, [r7, #4]
 800dcb0:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800dcb2:	68fb      	ldr	r3, [r7, #12]
 800dcb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dcb6:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800dcb8:	68fb      	ldr	r3, [r7, #12]
 800dcba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dcbc:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800dcbe:	68fb      	ldr	r3, [r7, #12]
 800dcc0:	681b      	ldr	r3, [r3, #0]
 800dcc2:	4a7f      	ldr	r2, [pc, #508]	@ (800dec0 <DMA_SetConfig+0x21c>)
 800dcc4:	4293      	cmp	r3, r2
 800dcc6:	d072      	beq.n	800ddae <DMA_SetConfig+0x10a>
 800dcc8:	68fb      	ldr	r3, [r7, #12]
 800dcca:	681b      	ldr	r3, [r3, #0]
 800dccc:	4a7d      	ldr	r2, [pc, #500]	@ (800dec4 <DMA_SetConfig+0x220>)
 800dcce:	4293      	cmp	r3, r2
 800dcd0:	d06d      	beq.n	800ddae <DMA_SetConfig+0x10a>
 800dcd2:	68fb      	ldr	r3, [r7, #12]
 800dcd4:	681b      	ldr	r3, [r3, #0]
 800dcd6:	4a7c      	ldr	r2, [pc, #496]	@ (800dec8 <DMA_SetConfig+0x224>)
 800dcd8:	4293      	cmp	r3, r2
 800dcda:	d068      	beq.n	800ddae <DMA_SetConfig+0x10a>
 800dcdc:	68fb      	ldr	r3, [r7, #12]
 800dcde:	681b      	ldr	r3, [r3, #0]
 800dce0:	4a7a      	ldr	r2, [pc, #488]	@ (800decc <DMA_SetConfig+0x228>)
 800dce2:	4293      	cmp	r3, r2
 800dce4:	d063      	beq.n	800ddae <DMA_SetConfig+0x10a>
 800dce6:	68fb      	ldr	r3, [r7, #12]
 800dce8:	681b      	ldr	r3, [r3, #0]
 800dcea:	4a79      	ldr	r2, [pc, #484]	@ (800ded0 <DMA_SetConfig+0x22c>)
 800dcec:	4293      	cmp	r3, r2
 800dcee:	d05e      	beq.n	800ddae <DMA_SetConfig+0x10a>
 800dcf0:	68fb      	ldr	r3, [r7, #12]
 800dcf2:	681b      	ldr	r3, [r3, #0]
 800dcf4:	4a77      	ldr	r2, [pc, #476]	@ (800ded4 <DMA_SetConfig+0x230>)
 800dcf6:	4293      	cmp	r3, r2
 800dcf8:	d059      	beq.n	800ddae <DMA_SetConfig+0x10a>
 800dcfa:	68fb      	ldr	r3, [r7, #12]
 800dcfc:	681b      	ldr	r3, [r3, #0]
 800dcfe:	4a76      	ldr	r2, [pc, #472]	@ (800ded8 <DMA_SetConfig+0x234>)
 800dd00:	4293      	cmp	r3, r2
 800dd02:	d054      	beq.n	800ddae <DMA_SetConfig+0x10a>
 800dd04:	68fb      	ldr	r3, [r7, #12]
 800dd06:	681b      	ldr	r3, [r3, #0]
 800dd08:	4a74      	ldr	r2, [pc, #464]	@ (800dedc <DMA_SetConfig+0x238>)
 800dd0a:	4293      	cmp	r3, r2
 800dd0c:	d04f      	beq.n	800ddae <DMA_SetConfig+0x10a>
 800dd0e:	68fb      	ldr	r3, [r7, #12]
 800dd10:	681b      	ldr	r3, [r3, #0]
 800dd12:	4a73      	ldr	r2, [pc, #460]	@ (800dee0 <DMA_SetConfig+0x23c>)
 800dd14:	4293      	cmp	r3, r2
 800dd16:	d04a      	beq.n	800ddae <DMA_SetConfig+0x10a>
 800dd18:	68fb      	ldr	r3, [r7, #12]
 800dd1a:	681b      	ldr	r3, [r3, #0]
 800dd1c:	4a71      	ldr	r2, [pc, #452]	@ (800dee4 <DMA_SetConfig+0x240>)
 800dd1e:	4293      	cmp	r3, r2
 800dd20:	d045      	beq.n	800ddae <DMA_SetConfig+0x10a>
 800dd22:	68fb      	ldr	r3, [r7, #12]
 800dd24:	681b      	ldr	r3, [r3, #0]
 800dd26:	4a70      	ldr	r2, [pc, #448]	@ (800dee8 <DMA_SetConfig+0x244>)
 800dd28:	4293      	cmp	r3, r2
 800dd2a:	d040      	beq.n	800ddae <DMA_SetConfig+0x10a>
 800dd2c:	68fb      	ldr	r3, [r7, #12]
 800dd2e:	681b      	ldr	r3, [r3, #0]
 800dd30:	4a6e      	ldr	r2, [pc, #440]	@ (800deec <DMA_SetConfig+0x248>)
 800dd32:	4293      	cmp	r3, r2
 800dd34:	d03b      	beq.n	800ddae <DMA_SetConfig+0x10a>
 800dd36:	68fb      	ldr	r3, [r7, #12]
 800dd38:	681b      	ldr	r3, [r3, #0]
 800dd3a:	4a6d      	ldr	r2, [pc, #436]	@ (800def0 <DMA_SetConfig+0x24c>)
 800dd3c:	4293      	cmp	r3, r2
 800dd3e:	d036      	beq.n	800ddae <DMA_SetConfig+0x10a>
 800dd40:	68fb      	ldr	r3, [r7, #12]
 800dd42:	681b      	ldr	r3, [r3, #0]
 800dd44:	4a6b      	ldr	r2, [pc, #428]	@ (800def4 <DMA_SetConfig+0x250>)
 800dd46:	4293      	cmp	r3, r2
 800dd48:	d031      	beq.n	800ddae <DMA_SetConfig+0x10a>
 800dd4a:	68fb      	ldr	r3, [r7, #12]
 800dd4c:	681b      	ldr	r3, [r3, #0]
 800dd4e:	4a6a      	ldr	r2, [pc, #424]	@ (800def8 <DMA_SetConfig+0x254>)
 800dd50:	4293      	cmp	r3, r2
 800dd52:	d02c      	beq.n	800ddae <DMA_SetConfig+0x10a>
 800dd54:	68fb      	ldr	r3, [r7, #12]
 800dd56:	681b      	ldr	r3, [r3, #0]
 800dd58:	4a68      	ldr	r2, [pc, #416]	@ (800defc <DMA_SetConfig+0x258>)
 800dd5a:	4293      	cmp	r3, r2
 800dd5c:	d027      	beq.n	800ddae <DMA_SetConfig+0x10a>
 800dd5e:	68fb      	ldr	r3, [r7, #12]
 800dd60:	681b      	ldr	r3, [r3, #0]
 800dd62:	4a67      	ldr	r2, [pc, #412]	@ (800df00 <DMA_SetConfig+0x25c>)
 800dd64:	4293      	cmp	r3, r2
 800dd66:	d022      	beq.n	800ddae <DMA_SetConfig+0x10a>
 800dd68:	68fb      	ldr	r3, [r7, #12]
 800dd6a:	681b      	ldr	r3, [r3, #0]
 800dd6c:	4a65      	ldr	r2, [pc, #404]	@ (800df04 <DMA_SetConfig+0x260>)
 800dd6e:	4293      	cmp	r3, r2
 800dd70:	d01d      	beq.n	800ddae <DMA_SetConfig+0x10a>
 800dd72:	68fb      	ldr	r3, [r7, #12]
 800dd74:	681b      	ldr	r3, [r3, #0]
 800dd76:	4a64      	ldr	r2, [pc, #400]	@ (800df08 <DMA_SetConfig+0x264>)
 800dd78:	4293      	cmp	r3, r2
 800dd7a:	d018      	beq.n	800ddae <DMA_SetConfig+0x10a>
 800dd7c:	68fb      	ldr	r3, [r7, #12]
 800dd7e:	681b      	ldr	r3, [r3, #0]
 800dd80:	4a62      	ldr	r2, [pc, #392]	@ (800df0c <DMA_SetConfig+0x268>)
 800dd82:	4293      	cmp	r3, r2
 800dd84:	d013      	beq.n	800ddae <DMA_SetConfig+0x10a>
 800dd86:	68fb      	ldr	r3, [r7, #12]
 800dd88:	681b      	ldr	r3, [r3, #0]
 800dd8a:	4a61      	ldr	r2, [pc, #388]	@ (800df10 <DMA_SetConfig+0x26c>)
 800dd8c:	4293      	cmp	r3, r2
 800dd8e:	d00e      	beq.n	800ddae <DMA_SetConfig+0x10a>
 800dd90:	68fb      	ldr	r3, [r7, #12]
 800dd92:	681b      	ldr	r3, [r3, #0]
 800dd94:	4a5f      	ldr	r2, [pc, #380]	@ (800df14 <DMA_SetConfig+0x270>)
 800dd96:	4293      	cmp	r3, r2
 800dd98:	d009      	beq.n	800ddae <DMA_SetConfig+0x10a>
 800dd9a:	68fb      	ldr	r3, [r7, #12]
 800dd9c:	681b      	ldr	r3, [r3, #0]
 800dd9e:	4a5e      	ldr	r2, [pc, #376]	@ (800df18 <DMA_SetConfig+0x274>)
 800dda0:	4293      	cmp	r3, r2
 800dda2:	d004      	beq.n	800ddae <DMA_SetConfig+0x10a>
 800dda4:	68fb      	ldr	r3, [r7, #12]
 800dda6:	681b      	ldr	r3, [r3, #0]
 800dda8:	4a5c      	ldr	r2, [pc, #368]	@ (800df1c <DMA_SetConfig+0x278>)
 800ddaa:	4293      	cmp	r3, r2
 800ddac:	d101      	bne.n	800ddb2 <DMA_SetConfig+0x10e>
 800ddae:	2301      	movs	r3, #1
 800ddb0:	e000      	b.n	800ddb4 <DMA_SetConfig+0x110>
 800ddb2:	2300      	movs	r3, #0
 800ddb4:	2b00      	cmp	r3, #0
 800ddb6:	d00d      	beq.n	800ddd4 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800ddb8:	68fb      	ldr	r3, [r7, #12]
 800ddba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ddbc:	68fa      	ldr	r2, [r7, #12]
 800ddbe:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800ddc0:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800ddc2:	68fb      	ldr	r3, [r7, #12]
 800ddc4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	d004      	beq.n	800ddd4 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800ddca:	68fb      	ldr	r3, [r7, #12]
 800ddcc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ddce:	68fa      	ldr	r2, [r7, #12]
 800ddd0:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800ddd2:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800ddd4:	68fb      	ldr	r3, [r7, #12]
 800ddd6:	681b      	ldr	r3, [r3, #0]
 800ddd8:	4a39      	ldr	r2, [pc, #228]	@ (800dec0 <DMA_SetConfig+0x21c>)
 800ddda:	4293      	cmp	r3, r2
 800dddc:	d04a      	beq.n	800de74 <DMA_SetConfig+0x1d0>
 800ddde:	68fb      	ldr	r3, [r7, #12]
 800dde0:	681b      	ldr	r3, [r3, #0]
 800dde2:	4a38      	ldr	r2, [pc, #224]	@ (800dec4 <DMA_SetConfig+0x220>)
 800dde4:	4293      	cmp	r3, r2
 800dde6:	d045      	beq.n	800de74 <DMA_SetConfig+0x1d0>
 800dde8:	68fb      	ldr	r3, [r7, #12]
 800ddea:	681b      	ldr	r3, [r3, #0]
 800ddec:	4a36      	ldr	r2, [pc, #216]	@ (800dec8 <DMA_SetConfig+0x224>)
 800ddee:	4293      	cmp	r3, r2
 800ddf0:	d040      	beq.n	800de74 <DMA_SetConfig+0x1d0>
 800ddf2:	68fb      	ldr	r3, [r7, #12]
 800ddf4:	681b      	ldr	r3, [r3, #0]
 800ddf6:	4a35      	ldr	r2, [pc, #212]	@ (800decc <DMA_SetConfig+0x228>)
 800ddf8:	4293      	cmp	r3, r2
 800ddfa:	d03b      	beq.n	800de74 <DMA_SetConfig+0x1d0>
 800ddfc:	68fb      	ldr	r3, [r7, #12]
 800ddfe:	681b      	ldr	r3, [r3, #0]
 800de00:	4a33      	ldr	r2, [pc, #204]	@ (800ded0 <DMA_SetConfig+0x22c>)
 800de02:	4293      	cmp	r3, r2
 800de04:	d036      	beq.n	800de74 <DMA_SetConfig+0x1d0>
 800de06:	68fb      	ldr	r3, [r7, #12]
 800de08:	681b      	ldr	r3, [r3, #0]
 800de0a:	4a32      	ldr	r2, [pc, #200]	@ (800ded4 <DMA_SetConfig+0x230>)
 800de0c:	4293      	cmp	r3, r2
 800de0e:	d031      	beq.n	800de74 <DMA_SetConfig+0x1d0>
 800de10:	68fb      	ldr	r3, [r7, #12]
 800de12:	681b      	ldr	r3, [r3, #0]
 800de14:	4a30      	ldr	r2, [pc, #192]	@ (800ded8 <DMA_SetConfig+0x234>)
 800de16:	4293      	cmp	r3, r2
 800de18:	d02c      	beq.n	800de74 <DMA_SetConfig+0x1d0>
 800de1a:	68fb      	ldr	r3, [r7, #12]
 800de1c:	681b      	ldr	r3, [r3, #0]
 800de1e:	4a2f      	ldr	r2, [pc, #188]	@ (800dedc <DMA_SetConfig+0x238>)
 800de20:	4293      	cmp	r3, r2
 800de22:	d027      	beq.n	800de74 <DMA_SetConfig+0x1d0>
 800de24:	68fb      	ldr	r3, [r7, #12]
 800de26:	681b      	ldr	r3, [r3, #0]
 800de28:	4a2d      	ldr	r2, [pc, #180]	@ (800dee0 <DMA_SetConfig+0x23c>)
 800de2a:	4293      	cmp	r3, r2
 800de2c:	d022      	beq.n	800de74 <DMA_SetConfig+0x1d0>
 800de2e:	68fb      	ldr	r3, [r7, #12]
 800de30:	681b      	ldr	r3, [r3, #0]
 800de32:	4a2c      	ldr	r2, [pc, #176]	@ (800dee4 <DMA_SetConfig+0x240>)
 800de34:	4293      	cmp	r3, r2
 800de36:	d01d      	beq.n	800de74 <DMA_SetConfig+0x1d0>
 800de38:	68fb      	ldr	r3, [r7, #12]
 800de3a:	681b      	ldr	r3, [r3, #0]
 800de3c:	4a2a      	ldr	r2, [pc, #168]	@ (800dee8 <DMA_SetConfig+0x244>)
 800de3e:	4293      	cmp	r3, r2
 800de40:	d018      	beq.n	800de74 <DMA_SetConfig+0x1d0>
 800de42:	68fb      	ldr	r3, [r7, #12]
 800de44:	681b      	ldr	r3, [r3, #0]
 800de46:	4a29      	ldr	r2, [pc, #164]	@ (800deec <DMA_SetConfig+0x248>)
 800de48:	4293      	cmp	r3, r2
 800de4a:	d013      	beq.n	800de74 <DMA_SetConfig+0x1d0>
 800de4c:	68fb      	ldr	r3, [r7, #12]
 800de4e:	681b      	ldr	r3, [r3, #0]
 800de50:	4a27      	ldr	r2, [pc, #156]	@ (800def0 <DMA_SetConfig+0x24c>)
 800de52:	4293      	cmp	r3, r2
 800de54:	d00e      	beq.n	800de74 <DMA_SetConfig+0x1d0>
 800de56:	68fb      	ldr	r3, [r7, #12]
 800de58:	681b      	ldr	r3, [r3, #0]
 800de5a:	4a26      	ldr	r2, [pc, #152]	@ (800def4 <DMA_SetConfig+0x250>)
 800de5c:	4293      	cmp	r3, r2
 800de5e:	d009      	beq.n	800de74 <DMA_SetConfig+0x1d0>
 800de60:	68fb      	ldr	r3, [r7, #12]
 800de62:	681b      	ldr	r3, [r3, #0]
 800de64:	4a24      	ldr	r2, [pc, #144]	@ (800def8 <DMA_SetConfig+0x254>)
 800de66:	4293      	cmp	r3, r2
 800de68:	d004      	beq.n	800de74 <DMA_SetConfig+0x1d0>
 800de6a:	68fb      	ldr	r3, [r7, #12]
 800de6c:	681b      	ldr	r3, [r3, #0]
 800de6e:	4a23      	ldr	r2, [pc, #140]	@ (800defc <DMA_SetConfig+0x258>)
 800de70:	4293      	cmp	r3, r2
 800de72:	d101      	bne.n	800de78 <DMA_SetConfig+0x1d4>
 800de74:	2301      	movs	r3, #1
 800de76:	e000      	b.n	800de7a <DMA_SetConfig+0x1d6>
 800de78:	2300      	movs	r3, #0
 800de7a:	2b00      	cmp	r3, #0
 800de7c:	d059      	beq.n	800df32 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800de7e:	68fb      	ldr	r3, [r7, #12]
 800de80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800de82:	f003 031f 	and.w	r3, r3, #31
 800de86:	223f      	movs	r2, #63	@ 0x3f
 800de88:	409a      	lsls	r2, r3
 800de8a:	697b      	ldr	r3, [r7, #20]
 800de8c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800de8e:	68fb      	ldr	r3, [r7, #12]
 800de90:	681b      	ldr	r3, [r3, #0]
 800de92:	681a      	ldr	r2, [r3, #0]
 800de94:	68fb      	ldr	r3, [r7, #12]
 800de96:	681b      	ldr	r3, [r3, #0]
 800de98:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800de9c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800de9e:	68fb      	ldr	r3, [r7, #12]
 800dea0:	681b      	ldr	r3, [r3, #0]
 800dea2:	683a      	ldr	r2, [r7, #0]
 800dea4:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800dea6:	68fb      	ldr	r3, [r7, #12]
 800dea8:	689b      	ldr	r3, [r3, #8]
 800deaa:	2b40      	cmp	r3, #64	@ 0x40
 800deac:	d138      	bne.n	800df20 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800deae:	68fb      	ldr	r3, [r7, #12]
 800deb0:	681b      	ldr	r3, [r3, #0]
 800deb2:	687a      	ldr	r2, [r7, #4]
 800deb4:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800deb6:	68fb      	ldr	r3, [r7, #12]
 800deb8:	681b      	ldr	r3, [r3, #0]
 800deba:	68ba      	ldr	r2, [r7, #8]
 800debc:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800debe:	e086      	b.n	800dfce <DMA_SetConfig+0x32a>
 800dec0:	40020010 	.word	0x40020010
 800dec4:	40020028 	.word	0x40020028
 800dec8:	40020040 	.word	0x40020040
 800decc:	40020058 	.word	0x40020058
 800ded0:	40020070 	.word	0x40020070
 800ded4:	40020088 	.word	0x40020088
 800ded8:	400200a0 	.word	0x400200a0
 800dedc:	400200b8 	.word	0x400200b8
 800dee0:	40020410 	.word	0x40020410
 800dee4:	40020428 	.word	0x40020428
 800dee8:	40020440 	.word	0x40020440
 800deec:	40020458 	.word	0x40020458
 800def0:	40020470 	.word	0x40020470
 800def4:	40020488 	.word	0x40020488
 800def8:	400204a0 	.word	0x400204a0
 800defc:	400204b8 	.word	0x400204b8
 800df00:	58025408 	.word	0x58025408
 800df04:	5802541c 	.word	0x5802541c
 800df08:	58025430 	.word	0x58025430
 800df0c:	58025444 	.word	0x58025444
 800df10:	58025458 	.word	0x58025458
 800df14:	5802546c 	.word	0x5802546c
 800df18:	58025480 	.word	0x58025480
 800df1c:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800df20:	68fb      	ldr	r3, [r7, #12]
 800df22:	681b      	ldr	r3, [r3, #0]
 800df24:	68ba      	ldr	r2, [r7, #8]
 800df26:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800df28:	68fb      	ldr	r3, [r7, #12]
 800df2a:	681b      	ldr	r3, [r3, #0]
 800df2c:	687a      	ldr	r2, [r7, #4]
 800df2e:	60da      	str	r2, [r3, #12]
}
 800df30:	e04d      	b.n	800dfce <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800df32:	68fb      	ldr	r3, [r7, #12]
 800df34:	681b      	ldr	r3, [r3, #0]
 800df36:	4a29      	ldr	r2, [pc, #164]	@ (800dfdc <DMA_SetConfig+0x338>)
 800df38:	4293      	cmp	r3, r2
 800df3a:	d022      	beq.n	800df82 <DMA_SetConfig+0x2de>
 800df3c:	68fb      	ldr	r3, [r7, #12]
 800df3e:	681b      	ldr	r3, [r3, #0]
 800df40:	4a27      	ldr	r2, [pc, #156]	@ (800dfe0 <DMA_SetConfig+0x33c>)
 800df42:	4293      	cmp	r3, r2
 800df44:	d01d      	beq.n	800df82 <DMA_SetConfig+0x2de>
 800df46:	68fb      	ldr	r3, [r7, #12]
 800df48:	681b      	ldr	r3, [r3, #0]
 800df4a:	4a26      	ldr	r2, [pc, #152]	@ (800dfe4 <DMA_SetConfig+0x340>)
 800df4c:	4293      	cmp	r3, r2
 800df4e:	d018      	beq.n	800df82 <DMA_SetConfig+0x2de>
 800df50:	68fb      	ldr	r3, [r7, #12]
 800df52:	681b      	ldr	r3, [r3, #0]
 800df54:	4a24      	ldr	r2, [pc, #144]	@ (800dfe8 <DMA_SetConfig+0x344>)
 800df56:	4293      	cmp	r3, r2
 800df58:	d013      	beq.n	800df82 <DMA_SetConfig+0x2de>
 800df5a:	68fb      	ldr	r3, [r7, #12]
 800df5c:	681b      	ldr	r3, [r3, #0]
 800df5e:	4a23      	ldr	r2, [pc, #140]	@ (800dfec <DMA_SetConfig+0x348>)
 800df60:	4293      	cmp	r3, r2
 800df62:	d00e      	beq.n	800df82 <DMA_SetConfig+0x2de>
 800df64:	68fb      	ldr	r3, [r7, #12]
 800df66:	681b      	ldr	r3, [r3, #0]
 800df68:	4a21      	ldr	r2, [pc, #132]	@ (800dff0 <DMA_SetConfig+0x34c>)
 800df6a:	4293      	cmp	r3, r2
 800df6c:	d009      	beq.n	800df82 <DMA_SetConfig+0x2de>
 800df6e:	68fb      	ldr	r3, [r7, #12]
 800df70:	681b      	ldr	r3, [r3, #0]
 800df72:	4a20      	ldr	r2, [pc, #128]	@ (800dff4 <DMA_SetConfig+0x350>)
 800df74:	4293      	cmp	r3, r2
 800df76:	d004      	beq.n	800df82 <DMA_SetConfig+0x2de>
 800df78:	68fb      	ldr	r3, [r7, #12]
 800df7a:	681b      	ldr	r3, [r3, #0]
 800df7c:	4a1e      	ldr	r2, [pc, #120]	@ (800dff8 <DMA_SetConfig+0x354>)
 800df7e:	4293      	cmp	r3, r2
 800df80:	d101      	bne.n	800df86 <DMA_SetConfig+0x2e2>
 800df82:	2301      	movs	r3, #1
 800df84:	e000      	b.n	800df88 <DMA_SetConfig+0x2e4>
 800df86:	2300      	movs	r3, #0
 800df88:	2b00      	cmp	r3, #0
 800df8a:	d020      	beq.n	800dfce <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800df8c:	68fb      	ldr	r3, [r7, #12]
 800df8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800df90:	f003 031f 	and.w	r3, r3, #31
 800df94:	2201      	movs	r2, #1
 800df96:	409a      	lsls	r2, r3
 800df98:	693b      	ldr	r3, [r7, #16]
 800df9a:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800df9c:	68fb      	ldr	r3, [r7, #12]
 800df9e:	681b      	ldr	r3, [r3, #0]
 800dfa0:	683a      	ldr	r2, [r7, #0]
 800dfa2:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800dfa4:	68fb      	ldr	r3, [r7, #12]
 800dfa6:	689b      	ldr	r3, [r3, #8]
 800dfa8:	2b40      	cmp	r3, #64	@ 0x40
 800dfaa:	d108      	bne.n	800dfbe <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800dfac:	68fb      	ldr	r3, [r7, #12]
 800dfae:	681b      	ldr	r3, [r3, #0]
 800dfb0:	687a      	ldr	r2, [r7, #4]
 800dfb2:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800dfb4:	68fb      	ldr	r3, [r7, #12]
 800dfb6:	681b      	ldr	r3, [r3, #0]
 800dfb8:	68ba      	ldr	r2, [r7, #8]
 800dfba:	60da      	str	r2, [r3, #12]
}
 800dfbc:	e007      	b.n	800dfce <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800dfbe:	68fb      	ldr	r3, [r7, #12]
 800dfc0:	681b      	ldr	r3, [r3, #0]
 800dfc2:	68ba      	ldr	r2, [r7, #8]
 800dfc4:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800dfc6:	68fb      	ldr	r3, [r7, #12]
 800dfc8:	681b      	ldr	r3, [r3, #0]
 800dfca:	687a      	ldr	r2, [r7, #4]
 800dfcc:	60da      	str	r2, [r3, #12]
}
 800dfce:	bf00      	nop
 800dfd0:	371c      	adds	r7, #28
 800dfd2:	46bd      	mov	sp, r7
 800dfd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfd8:	4770      	bx	lr
 800dfda:	bf00      	nop
 800dfdc:	58025408 	.word	0x58025408
 800dfe0:	5802541c 	.word	0x5802541c
 800dfe4:	58025430 	.word	0x58025430
 800dfe8:	58025444 	.word	0x58025444
 800dfec:	58025458 	.word	0x58025458
 800dff0:	5802546c 	.word	0x5802546c
 800dff4:	58025480 	.word	0x58025480
 800dff8:	58025494 	.word	0x58025494

0800dffc <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800dffc:	b480      	push	{r7}
 800dffe:	b085      	sub	sp, #20
 800e000:	af00      	add	r7, sp, #0
 800e002:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	681b      	ldr	r3, [r3, #0]
 800e008:	4a42      	ldr	r2, [pc, #264]	@ (800e114 <DMA_CalcBaseAndBitshift+0x118>)
 800e00a:	4293      	cmp	r3, r2
 800e00c:	d04a      	beq.n	800e0a4 <DMA_CalcBaseAndBitshift+0xa8>
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	681b      	ldr	r3, [r3, #0]
 800e012:	4a41      	ldr	r2, [pc, #260]	@ (800e118 <DMA_CalcBaseAndBitshift+0x11c>)
 800e014:	4293      	cmp	r3, r2
 800e016:	d045      	beq.n	800e0a4 <DMA_CalcBaseAndBitshift+0xa8>
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	681b      	ldr	r3, [r3, #0]
 800e01c:	4a3f      	ldr	r2, [pc, #252]	@ (800e11c <DMA_CalcBaseAndBitshift+0x120>)
 800e01e:	4293      	cmp	r3, r2
 800e020:	d040      	beq.n	800e0a4 <DMA_CalcBaseAndBitshift+0xa8>
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	681b      	ldr	r3, [r3, #0]
 800e026:	4a3e      	ldr	r2, [pc, #248]	@ (800e120 <DMA_CalcBaseAndBitshift+0x124>)
 800e028:	4293      	cmp	r3, r2
 800e02a:	d03b      	beq.n	800e0a4 <DMA_CalcBaseAndBitshift+0xa8>
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	681b      	ldr	r3, [r3, #0]
 800e030:	4a3c      	ldr	r2, [pc, #240]	@ (800e124 <DMA_CalcBaseAndBitshift+0x128>)
 800e032:	4293      	cmp	r3, r2
 800e034:	d036      	beq.n	800e0a4 <DMA_CalcBaseAndBitshift+0xa8>
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	681b      	ldr	r3, [r3, #0]
 800e03a:	4a3b      	ldr	r2, [pc, #236]	@ (800e128 <DMA_CalcBaseAndBitshift+0x12c>)
 800e03c:	4293      	cmp	r3, r2
 800e03e:	d031      	beq.n	800e0a4 <DMA_CalcBaseAndBitshift+0xa8>
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	681b      	ldr	r3, [r3, #0]
 800e044:	4a39      	ldr	r2, [pc, #228]	@ (800e12c <DMA_CalcBaseAndBitshift+0x130>)
 800e046:	4293      	cmp	r3, r2
 800e048:	d02c      	beq.n	800e0a4 <DMA_CalcBaseAndBitshift+0xa8>
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	681b      	ldr	r3, [r3, #0]
 800e04e:	4a38      	ldr	r2, [pc, #224]	@ (800e130 <DMA_CalcBaseAndBitshift+0x134>)
 800e050:	4293      	cmp	r3, r2
 800e052:	d027      	beq.n	800e0a4 <DMA_CalcBaseAndBitshift+0xa8>
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	681b      	ldr	r3, [r3, #0]
 800e058:	4a36      	ldr	r2, [pc, #216]	@ (800e134 <DMA_CalcBaseAndBitshift+0x138>)
 800e05a:	4293      	cmp	r3, r2
 800e05c:	d022      	beq.n	800e0a4 <DMA_CalcBaseAndBitshift+0xa8>
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	681b      	ldr	r3, [r3, #0]
 800e062:	4a35      	ldr	r2, [pc, #212]	@ (800e138 <DMA_CalcBaseAndBitshift+0x13c>)
 800e064:	4293      	cmp	r3, r2
 800e066:	d01d      	beq.n	800e0a4 <DMA_CalcBaseAndBitshift+0xa8>
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	681b      	ldr	r3, [r3, #0]
 800e06c:	4a33      	ldr	r2, [pc, #204]	@ (800e13c <DMA_CalcBaseAndBitshift+0x140>)
 800e06e:	4293      	cmp	r3, r2
 800e070:	d018      	beq.n	800e0a4 <DMA_CalcBaseAndBitshift+0xa8>
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	681b      	ldr	r3, [r3, #0]
 800e076:	4a32      	ldr	r2, [pc, #200]	@ (800e140 <DMA_CalcBaseAndBitshift+0x144>)
 800e078:	4293      	cmp	r3, r2
 800e07a:	d013      	beq.n	800e0a4 <DMA_CalcBaseAndBitshift+0xa8>
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	681b      	ldr	r3, [r3, #0]
 800e080:	4a30      	ldr	r2, [pc, #192]	@ (800e144 <DMA_CalcBaseAndBitshift+0x148>)
 800e082:	4293      	cmp	r3, r2
 800e084:	d00e      	beq.n	800e0a4 <DMA_CalcBaseAndBitshift+0xa8>
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	681b      	ldr	r3, [r3, #0]
 800e08a:	4a2f      	ldr	r2, [pc, #188]	@ (800e148 <DMA_CalcBaseAndBitshift+0x14c>)
 800e08c:	4293      	cmp	r3, r2
 800e08e:	d009      	beq.n	800e0a4 <DMA_CalcBaseAndBitshift+0xa8>
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	681b      	ldr	r3, [r3, #0]
 800e094:	4a2d      	ldr	r2, [pc, #180]	@ (800e14c <DMA_CalcBaseAndBitshift+0x150>)
 800e096:	4293      	cmp	r3, r2
 800e098:	d004      	beq.n	800e0a4 <DMA_CalcBaseAndBitshift+0xa8>
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	681b      	ldr	r3, [r3, #0]
 800e09e:	4a2c      	ldr	r2, [pc, #176]	@ (800e150 <DMA_CalcBaseAndBitshift+0x154>)
 800e0a0:	4293      	cmp	r3, r2
 800e0a2:	d101      	bne.n	800e0a8 <DMA_CalcBaseAndBitshift+0xac>
 800e0a4:	2301      	movs	r3, #1
 800e0a6:	e000      	b.n	800e0aa <DMA_CalcBaseAndBitshift+0xae>
 800e0a8:	2300      	movs	r3, #0
 800e0aa:	2b00      	cmp	r3, #0
 800e0ac:	d024      	beq.n	800e0f8 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	681b      	ldr	r3, [r3, #0]
 800e0b2:	b2db      	uxtb	r3, r3
 800e0b4:	3b10      	subs	r3, #16
 800e0b6:	4a27      	ldr	r2, [pc, #156]	@ (800e154 <DMA_CalcBaseAndBitshift+0x158>)
 800e0b8:	fba2 2303 	umull	r2, r3, r2, r3
 800e0bc:	091b      	lsrs	r3, r3, #4
 800e0be:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800e0c0:	68fb      	ldr	r3, [r7, #12]
 800e0c2:	f003 0307 	and.w	r3, r3, #7
 800e0c6:	4a24      	ldr	r2, [pc, #144]	@ (800e158 <DMA_CalcBaseAndBitshift+0x15c>)
 800e0c8:	5cd3      	ldrb	r3, [r2, r3]
 800e0ca:	461a      	mov	r2, r3
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 800e0d0:	68fb      	ldr	r3, [r7, #12]
 800e0d2:	2b03      	cmp	r3, #3
 800e0d4:	d908      	bls.n	800e0e8 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	681b      	ldr	r3, [r3, #0]
 800e0da:	461a      	mov	r2, r3
 800e0dc:	4b1f      	ldr	r3, [pc, #124]	@ (800e15c <DMA_CalcBaseAndBitshift+0x160>)
 800e0de:	4013      	ands	r3, r2
 800e0e0:	1d1a      	adds	r2, r3, #4
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	659a      	str	r2, [r3, #88]	@ 0x58
 800e0e6:	e00d      	b.n	800e104 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	681b      	ldr	r3, [r3, #0]
 800e0ec:	461a      	mov	r2, r3
 800e0ee:	4b1b      	ldr	r3, [pc, #108]	@ (800e15c <DMA_CalcBaseAndBitshift+0x160>)
 800e0f0:	4013      	ands	r3, r2
 800e0f2:	687a      	ldr	r2, [r7, #4]
 800e0f4:	6593      	str	r3, [r2, #88]	@ 0x58
 800e0f6:	e005      	b.n	800e104 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	681b      	ldr	r3, [r3, #0]
 800e0fc:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800e108:	4618      	mov	r0, r3
 800e10a:	3714      	adds	r7, #20
 800e10c:	46bd      	mov	sp, r7
 800e10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e112:	4770      	bx	lr
 800e114:	40020010 	.word	0x40020010
 800e118:	40020028 	.word	0x40020028
 800e11c:	40020040 	.word	0x40020040
 800e120:	40020058 	.word	0x40020058
 800e124:	40020070 	.word	0x40020070
 800e128:	40020088 	.word	0x40020088
 800e12c:	400200a0 	.word	0x400200a0
 800e130:	400200b8 	.word	0x400200b8
 800e134:	40020410 	.word	0x40020410
 800e138:	40020428 	.word	0x40020428
 800e13c:	40020440 	.word	0x40020440
 800e140:	40020458 	.word	0x40020458
 800e144:	40020470 	.word	0x40020470
 800e148:	40020488 	.word	0x40020488
 800e14c:	400204a0 	.word	0x400204a0
 800e150:	400204b8 	.word	0x400204b8
 800e154:	aaaaaaab 	.word	0xaaaaaaab
 800e158:	0801ea5c 	.word	0x0801ea5c
 800e15c:	fffffc00 	.word	0xfffffc00

0800e160 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 800e160:	b480      	push	{r7}
 800e162:	b085      	sub	sp, #20
 800e164:	af00      	add	r7, sp, #0
 800e166:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e168:	2300      	movs	r3, #0
 800e16a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	699b      	ldr	r3, [r3, #24]
 800e170:	2b00      	cmp	r3, #0
 800e172:	d120      	bne.n	800e1b6 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e178:	2b03      	cmp	r3, #3
 800e17a:	d858      	bhi.n	800e22e <DMA_CheckFifoParam+0xce>
 800e17c:	a201      	add	r2, pc, #4	@ (adr r2, 800e184 <DMA_CheckFifoParam+0x24>)
 800e17e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e182:	bf00      	nop
 800e184:	0800e195 	.word	0x0800e195
 800e188:	0800e1a7 	.word	0x0800e1a7
 800e18c:	0800e195 	.word	0x0800e195
 800e190:	0800e22f 	.word	0x0800e22f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e198:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800e19c:	2b00      	cmp	r3, #0
 800e19e:	d048      	beq.n	800e232 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800e1a0:	2301      	movs	r3, #1
 800e1a2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800e1a4:	e045      	b.n	800e232 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e1aa:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800e1ae:	d142      	bne.n	800e236 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800e1b0:	2301      	movs	r3, #1
 800e1b2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800e1b4:	e03f      	b.n	800e236 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	699b      	ldr	r3, [r3, #24]
 800e1ba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e1be:	d123      	bne.n	800e208 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e1c4:	2b03      	cmp	r3, #3
 800e1c6:	d838      	bhi.n	800e23a <DMA_CheckFifoParam+0xda>
 800e1c8:	a201      	add	r2, pc, #4	@ (adr r2, 800e1d0 <DMA_CheckFifoParam+0x70>)
 800e1ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e1ce:	bf00      	nop
 800e1d0:	0800e1e1 	.word	0x0800e1e1
 800e1d4:	0800e1e7 	.word	0x0800e1e7
 800e1d8:	0800e1e1 	.word	0x0800e1e1
 800e1dc:	0800e1f9 	.word	0x0800e1f9
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800e1e0:	2301      	movs	r3, #1
 800e1e2:	73fb      	strb	r3, [r7, #15]
        break;
 800e1e4:	e030      	b.n	800e248 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e1ea:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800e1ee:	2b00      	cmp	r3, #0
 800e1f0:	d025      	beq.n	800e23e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800e1f2:	2301      	movs	r3, #1
 800e1f4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800e1f6:	e022      	b.n	800e23e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e1fc:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800e200:	d11f      	bne.n	800e242 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800e202:	2301      	movs	r3, #1
 800e204:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800e206:	e01c      	b.n	800e242 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e20c:	2b02      	cmp	r3, #2
 800e20e:	d902      	bls.n	800e216 <DMA_CheckFifoParam+0xb6>
 800e210:	2b03      	cmp	r3, #3
 800e212:	d003      	beq.n	800e21c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800e214:	e018      	b.n	800e248 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800e216:	2301      	movs	r3, #1
 800e218:	73fb      	strb	r3, [r7, #15]
        break;
 800e21a:	e015      	b.n	800e248 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e220:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800e224:	2b00      	cmp	r3, #0
 800e226:	d00e      	beq.n	800e246 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800e228:	2301      	movs	r3, #1
 800e22a:	73fb      	strb	r3, [r7, #15]
    break;
 800e22c:	e00b      	b.n	800e246 <DMA_CheckFifoParam+0xe6>
        break;
 800e22e:	bf00      	nop
 800e230:	e00a      	b.n	800e248 <DMA_CheckFifoParam+0xe8>
        break;
 800e232:	bf00      	nop
 800e234:	e008      	b.n	800e248 <DMA_CheckFifoParam+0xe8>
        break;
 800e236:	bf00      	nop
 800e238:	e006      	b.n	800e248 <DMA_CheckFifoParam+0xe8>
        break;
 800e23a:	bf00      	nop
 800e23c:	e004      	b.n	800e248 <DMA_CheckFifoParam+0xe8>
        break;
 800e23e:	bf00      	nop
 800e240:	e002      	b.n	800e248 <DMA_CheckFifoParam+0xe8>
        break;
 800e242:	bf00      	nop
 800e244:	e000      	b.n	800e248 <DMA_CheckFifoParam+0xe8>
    break;
 800e246:	bf00      	nop
    }
  }

  return status;
 800e248:	7bfb      	ldrb	r3, [r7, #15]
}
 800e24a:	4618      	mov	r0, r3
 800e24c:	3714      	adds	r7, #20
 800e24e:	46bd      	mov	sp, r7
 800e250:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e254:	4770      	bx	lr
 800e256:	bf00      	nop

0800e258 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800e258:	b480      	push	{r7}
 800e25a:	b085      	sub	sp, #20
 800e25c:	af00      	add	r7, sp, #0
 800e25e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	681b      	ldr	r3, [r3, #0]
 800e264:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	681b      	ldr	r3, [r3, #0]
 800e26a:	4a38      	ldr	r2, [pc, #224]	@ (800e34c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800e26c:	4293      	cmp	r3, r2
 800e26e:	d022      	beq.n	800e2b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	681b      	ldr	r3, [r3, #0]
 800e274:	4a36      	ldr	r2, [pc, #216]	@ (800e350 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800e276:	4293      	cmp	r3, r2
 800e278:	d01d      	beq.n	800e2b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	681b      	ldr	r3, [r3, #0]
 800e27e:	4a35      	ldr	r2, [pc, #212]	@ (800e354 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800e280:	4293      	cmp	r3, r2
 800e282:	d018      	beq.n	800e2b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	681b      	ldr	r3, [r3, #0]
 800e288:	4a33      	ldr	r2, [pc, #204]	@ (800e358 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800e28a:	4293      	cmp	r3, r2
 800e28c:	d013      	beq.n	800e2b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	681b      	ldr	r3, [r3, #0]
 800e292:	4a32      	ldr	r2, [pc, #200]	@ (800e35c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800e294:	4293      	cmp	r3, r2
 800e296:	d00e      	beq.n	800e2b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	681b      	ldr	r3, [r3, #0]
 800e29c:	4a30      	ldr	r2, [pc, #192]	@ (800e360 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800e29e:	4293      	cmp	r3, r2
 800e2a0:	d009      	beq.n	800e2b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	681b      	ldr	r3, [r3, #0]
 800e2a6:	4a2f      	ldr	r2, [pc, #188]	@ (800e364 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800e2a8:	4293      	cmp	r3, r2
 800e2aa:	d004      	beq.n	800e2b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	681b      	ldr	r3, [r3, #0]
 800e2b0:	4a2d      	ldr	r2, [pc, #180]	@ (800e368 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800e2b2:	4293      	cmp	r3, r2
 800e2b4:	d101      	bne.n	800e2ba <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800e2b6:	2301      	movs	r3, #1
 800e2b8:	e000      	b.n	800e2bc <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800e2ba:	2300      	movs	r3, #0
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	d01a      	beq.n	800e2f6 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	681b      	ldr	r3, [r3, #0]
 800e2c4:	b2db      	uxtb	r3, r3
 800e2c6:	3b08      	subs	r3, #8
 800e2c8:	4a28      	ldr	r2, [pc, #160]	@ (800e36c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800e2ca:	fba2 2303 	umull	r2, r3, r2, r3
 800e2ce:	091b      	lsrs	r3, r3, #4
 800e2d0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800e2d2:	68fa      	ldr	r2, [r7, #12]
 800e2d4:	4b26      	ldr	r3, [pc, #152]	@ (800e370 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800e2d6:	4413      	add	r3, r2
 800e2d8:	009b      	lsls	r3, r3, #2
 800e2da:	461a      	mov	r2, r3
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	4a24      	ldr	r2, [pc, #144]	@ (800e374 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800e2e4:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800e2e6:	68fb      	ldr	r3, [r7, #12]
 800e2e8:	f003 031f 	and.w	r3, r3, #31
 800e2ec:	2201      	movs	r2, #1
 800e2ee:	409a      	lsls	r2, r3
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800e2f4:	e024      	b.n	800e340 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	681b      	ldr	r3, [r3, #0]
 800e2fa:	b2db      	uxtb	r3, r3
 800e2fc:	3b10      	subs	r3, #16
 800e2fe:	4a1e      	ldr	r2, [pc, #120]	@ (800e378 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800e300:	fba2 2303 	umull	r2, r3, r2, r3
 800e304:	091b      	lsrs	r3, r3, #4
 800e306:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800e308:	68bb      	ldr	r3, [r7, #8]
 800e30a:	4a1c      	ldr	r2, [pc, #112]	@ (800e37c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800e30c:	4293      	cmp	r3, r2
 800e30e:	d806      	bhi.n	800e31e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800e310:	68bb      	ldr	r3, [r7, #8]
 800e312:	4a1b      	ldr	r2, [pc, #108]	@ (800e380 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800e314:	4293      	cmp	r3, r2
 800e316:	d902      	bls.n	800e31e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800e318:	68fb      	ldr	r3, [r7, #12]
 800e31a:	3308      	adds	r3, #8
 800e31c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800e31e:	68fa      	ldr	r2, [r7, #12]
 800e320:	4b18      	ldr	r3, [pc, #96]	@ (800e384 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800e322:	4413      	add	r3, r2
 800e324:	009b      	lsls	r3, r3, #2
 800e326:	461a      	mov	r2, r3
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	4a16      	ldr	r2, [pc, #88]	@ (800e388 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800e330:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800e332:	68fb      	ldr	r3, [r7, #12]
 800e334:	f003 031f 	and.w	r3, r3, #31
 800e338:	2201      	movs	r2, #1
 800e33a:	409a      	lsls	r2, r3
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800e340:	bf00      	nop
 800e342:	3714      	adds	r7, #20
 800e344:	46bd      	mov	sp, r7
 800e346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e34a:	4770      	bx	lr
 800e34c:	58025408 	.word	0x58025408
 800e350:	5802541c 	.word	0x5802541c
 800e354:	58025430 	.word	0x58025430
 800e358:	58025444 	.word	0x58025444
 800e35c:	58025458 	.word	0x58025458
 800e360:	5802546c 	.word	0x5802546c
 800e364:	58025480 	.word	0x58025480
 800e368:	58025494 	.word	0x58025494
 800e36c:	cccccccd 	.word	0xcccccccd
 800e370:	16009600 	.word	0x16009600
 800e374:	58025880 	.word	0x58025880
 800e378:	aaaaaaab 	.word	0xaaaaaaab
 800e37c:	400204b8 	.word	0x400204b8
 800e380:	4002040f 	.word	0x4002040f
 800e384:	10008200 	.word	0x10008200
 800e388:	40020880 	.word	0x40020880

0800e38c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800e38c:	b480      	push	{r7}
 800e38e:	b085      	sub	sp, #20
 800e390:	af00      	add	r7, sp, #0
 800e392:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	685b      	ldr	r3, [r3, #4]
 800e398:	b2db      	uxtb	r3, r3
 800e39a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800e39c:	68fb      	ldr	r3, [r7, #12]
 800e39e:	2b00      	cmp	r3, #0
 800e3a0:	d04a      	beq.n	800e438 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800e3a2:	68fb      	ldr	r3, [r7, #12]
 800e3a4:	2b08      	cmp	r3, #8
 800e3a6:	d847      	bhi.n	800e438 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	681b      	ldr	r3, [r3, #0]
 800e3ac:	4a25      	ldr	r2, [pc, #148]	@ (800e444 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800e3ae:	4293      	cmp	r3, r2
 800e3b0:	d022      	beq.n	800e3f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	681b      	ldr	r3, [r3, #0]
 800e3b6:	4a24      	ldr	r2, [pc, #144]	@ (800e448 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800e3b8:	4293      	cmp	r3, r2
 800e3ba:	d01d      	beq.n	800e3f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	681b      	ldr	r3, [r3, #0]
 800e3c0:	4a22      	ldr	r2, [pc, #136]	@ (800e44c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800e3c2:	4293      	cmp	r3, r2
 800e3c4:	d018      	beq.n	800e3f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	681b      	ldr	r3, [r3, #0]
 800e3ca:	4a21      	ldr	r2, [pc, #132]	@ (800e450 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800e3cc:	4293      	cmp	r3, r2
 800e3ce:	d013      	beq.n	800e3f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	681b      	ldr	r3, [r3, #0]
 800e3d4:	4a1f      	ldr	r2, [pc, #124]	@ (800e454 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800e3d6:	4293      	cmp	r3, r2
 800e3d8:	d00e      	beq.n	800e3f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	681b      	ldr	r3, [r3, #0]
 800e3de:	4a1e      	ldr	r2, [pc, #120]	@ (800e458 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800e3e0:	4293      	cmp	r3, r2
 800e3e2:	d009      	beq.n	800e3f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	681b      	ldr	r3, [r3, #0]
 800e3e8:	4a1c      	ldr	r2, [pc, #112]	@ (800e45c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800e3ea:	4293      	cmp	r3, r2
 800e3ec:	d004      	beq.n	800e3f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	681b      	ldr	r3, [r3, #0]
 800e3f2:	4a1b      	ldr	r2, [pc, #108]	@ (800e460 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800e3f4:	4293      	cmp	r3, r2
 800e3f6:	d101      	bne.n	800e3fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800e3f8:	2301      	movs	r3, #1
 800e3fa:	e000      	b.n	800e3fe <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800e3fc:	2300      	movs	r3, #0
 800e3fe:	2b00      	cmp	r3, #0
 800e400:	d00a      	beq.n	800e418 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800e402:	68fa      	ldr	r2, [r7, #12]
 800e404:	4b17      	ldr	r3, [pc, #92]	@ (800e464 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800e406:	4413      	add	r3, r2
 800e408:	009b      	lsls	r3, r3, #2
 800e40a:	461a      	mov	r2, r3
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	4a15      	ldr	r2, [pc, #84]	@ (800e468 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800e414:	671a      	str	r2, [r3, #112]	@ 0x70
 800e416:	e009      	b.n	800e42c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800e418:	68fa      	ldr	r2, [r7, #12]
 800e41a:	4b14      	ldr	r3, [pc, #80]	@ (800e46c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800e41c:	4413      	add	r3, r2
 800e41e:	009b      	lsls	r3, r3, #2
 800e420:	461a      	mov	r2, r3
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	4a11      	ldr	r2, [pc, #68]	@ (800e470 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800e42a:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800e42c:	68fb      	ldr	r3, [r7, #12]
 800e42e:	3b01      	subs	r3, #1
 800e430:	2201      	movs	r2, #1
 800e432:	409a      	lsls	r2, r3
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 800e438:	bf00      	nop
 800e43a:	3714      	adds	r7, #20
 800e43c:	46bd      	mov	sp, r7
 800e43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e442:	4770      	bx	lr
 800e444:	58025408 	.word	0x58025408
 800e448:	5802541c 	.word	0x5802541c
 800e44c:	58025430 	.word	0x58025430
 800e450:	58025444 	.word	0x58025444
 800e454:	58025458 	.word	0x58025458
 800e458:	5802546c 	.word	0x5802546c
 800e45c:	58025480 	.word	0x58025480
 800e460:	58025494 	.word	0x58025494
 800e464:	1600963f 	.word	0x1600963f
 800e468:	58025940 	.word	0x58025940
 800e46c:	1000823f 	.word	0x1000823f
 800e470:	40020940 	.word	0x40020940

0800e474 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 800e474:	b480      	push	{r7}
 800e476:	b089      	sub	sp, #36	@ 0x24
 800e478:	af00      	add	r7, sp, #0
 800e47a:	6078      	str	r0, [r7, #4]
 800e47c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800e47e:	2300      	movs	r3, #0
 800e480:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800e482:	4b86      	ldr	r3, [pc, #536]	@ (800e69c <HAL_GPIO_Init+0x228>)
 800e484:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800e486:	e18c      	b.n	800e7a2 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800e488:	683b      	ldr	r3, [r7, #0]
 800e48a:	681a      	ldr	r2, [r3, #0]
 800e48c:	2101      	movs	r1, #1
 800e48e:	69fb      	ldr	r3, [r7, #28]
 800e490:	fa01 f303 	lsl.w	r3, r1, r3
 800e494:	4013      	ands	r3, r2
 800e496:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800e498:	693b      	ldr	r3, [r7, #16]
 800e49a:	2b00      	cmp	r3, #0
 800e49c:	f000 817e 	beq.w	800e79c <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800e4a0:	683b      	ldr	r3, [r7, #0]
 800e4a2:	685b      	ldr	r3, [r3, #4]
 800e4a4:	f003 0303 	and.w	r3, r3, #3
 800e4a8:	2b01      	cmp	r3, #1
 800e4aa:	d005      	beq.n	800e4b8 <HAL_GPIO_Init+0x44>
 800e4ac:	683b      	ldr	r3, [r7, #0]
 800e4ae:	685b      	ldr	r3, [r3, #4]
 800e4b0:	f003 0303 	and.w	r3, r3, #3
 800e4b4:	2b02      	cmp	r3, #2
 800e4b6:	d130      	bne.n	800e51a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	689b      	ldr	r3, [r3, #8]
 800e4bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800e4be:	69fb      	ldr	r3, [r7, #28]
 800e4c0:	005b      	lsls	r3, r3, #1
 800e4c2:	2203      	movs	r2, #3
 800e4c4:	fa02 f303 	lsl.w	r3, r2, r3
 800e4c8:	43db      	mvns	r3, r3
 800e4ca:	69ba      	ldr	r2, [r7, #24]
 800e4cc:	4013      	ands	r3, r2
 800e4ce:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800e4d0:	683b      	ldr	r3, [r7, #0]
 800e4d2:	68da      	ldr	r2, [r3, #12]
 800e4d4:	69fb      	ldr	r3, [r7, #28]
 800e4d6:	005b      	lsls	r3, r3, #1
 800e4d8:	fa02 f303 	lsl.w	r3, r2, r3
 800e4dc:	69ba      	ldr	r2, [r7, #24]
 800e4de:	4313      	orrs	r3, r2
 800e4e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	69ba      	ldr	r2, [r7, #24]
 800e4e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	685b      	ldr	r3, [r3, #4]
 800e4ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800e4ee:	2201      	movs	r2, #1
 800e4f0:	69fb      	ldr	r3, [r7, #28]
 800e4f2:	fa02 f303 	lsl.w	r3, r2, r3
 800e4f6:	43db      	mvns	r3, r3
 800e4f8:	69ba      	ldr	r2, [r7, #24]
 800e4fa:	4013      	ands	r3, r2
 800e4fc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800e4fe:	683b      	ldr	r3, [r7, #0]
 800e500:	685b      	ldr	r3, [r3, #4]
 800e502:	091b      	lsrs	r3, r3, #4
 800e504:	f003 0201 	and.w	r2, r3, #1
 800e508:	69fb      	ldr	r3, [r7, #28]
 800e50a:	fa02 f303 	lsl.w	r3, r2, r3
 800e50e:	69ba      	ldr	r2, [r7, #24]
 800e510:	4313      	orrs	r3, r2
 800e512:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	69ba      	ldr	r2, [r7, #24]
 800e518:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800e51a:	683b      	ldr	r3, [r7, #0]
 800e51c:	685b      	ldr	r3, [r3, #4]
 800e51e:	f003 0303 	and.w	r3, r3, #3
 800e522:	2b03      	cmp	r3, #3
 800e524:	d017      	beq.n	800e556 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	68db      	ldr	r3, [r3, #12]
 800e52a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800e52c:	69fb      	ldr	r3, [r7, #28]
 800e52e:	005b      	lsls	r3, r3, #1
 800e530:	2203      	movs	r2, #3
 800e532:	fa02 f303 	lsl.w	r3, r2, r3
 800e536:	43db      	mvns	r3, r3
 800e538:	69ba      	ldr	r2, [r7, #24]
 800e53a:	4013      	ands	r3, r2
 800e53c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800e53e:	683b      	ldr	r3, [r7, #0]
 800e540:	689a      	ldr	r2, [r3, #8]
 800e542:	69fb      	ldr	r3, [r7, #28]
 800e544:	005b      	lsls	r3, r3, #1
 800e546:	fa02 f303 	lsl.w	r3, r2, r3
 800e54a:	69ba      	ldr	r2, [r7, #24]
 800e54c:	4313      	orrs	r3, r2
 800e54e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	69ba      	ldr	r2, [r7, #24]
 800e554:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800e556:	683b      	ldr	r3, [r7, #0]
 800e558:	685b      	ldr	r3, [r3, #4]
 800e55a:	f003 0303 	and.w	r3, r3, #3
 800e55e:	2b02      	cmp	r3, #2
 800e560:	d123      	bne.n	800e5aa <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800e562:	69fb      	ldr	r3, [r7, #28]
 800e564:	08da      	lsrs	r2, r3, #3
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	3208      	adds	r2, #8
 800e56a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e56e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800e570:	69fb      	ldr	r3, [r7, #28]
 800e572:	f003 0307 	and.w	r3, r3, #7
 800e576:	009b      	lsls	r3, r3, #2
 800e578:	220f      	movs	r2, #15
 800e57a:	fa02 f303 	lsl.w	r3, r2, r3
 800e57e:	43db      	mvns	r3, r3
 800e580:	69ba      	ldr	r2, [r7, #24]
 800e582:	4013      	ands	r3, r2
 800e584:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800e586:	683b      	ldr	r3, [r7, #0]
 800e588:	691a      	ldr	r2, [r3, #16]
 800e58a:	69fb      	ldr	r3, [r7, #28]
 800e58c:	f003 0307 	and.w	r3, r3, #7
 800e590:	009b      	lsls	r3, r3, #2
 800e592:	fa02 f303 	lsl.w	r3, r2, r3
 800e596:	69ba      	ldr	r2, [r7, #24]
 800e598:	4313      	orrs	r3, r2
 800e59a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800e59c:	69fb      	ldr	r3, [r7, #28]
 800e59e:	08da      	lsrs	r2, r3, #3
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	3208      	adds	r2, #8
 800e5a4:	69b9      	ldr	r1, [r7, #24]
 800e5a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	681b      	ldr	r3, [r3, #0]
 800e5ae:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800e5b0:	69fb      	ldr	r3, [r7, #28]
 800e5b2:	005b      	lsls	r3, r3, #1
 800e5b4:	2203      	movs	r2, #3
 800e5b6:	fa02 f303 	lsl.w	r3, r2, r3
 800e5ba:	43db      	mvns	r3, r3
 800e5bc:	69ba      	ldr	r2, [r7, #24]
 800e5be:	4013      	ands	r3, r2
 800e5c0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800e5c2:	683b      	ldr	r3, [r7, #0]
 800e5c4:	685b      	ldr	r3, [r3, #4]
 800e5c6:	f003 0203 	and.w	r2, r3, #3
 800e5ca:	69fb      	ldr	r3, [r7, #28]
 800e5cc:	005b      	lsls	r3, r3, #1
 800e5ce:	fa02 f303 	lsl.w	r3, r2, r3
 800e5d2:	69ba      	ldr	r2, [r7, #24]
 800e5d4:	4313      	orrs	r3, r2
 800e5d6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	69ba      	ldr	r2, [r7, #24]
 800e5dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800e5de:	683b      	ldr	r3, [r7, #0]
 800e5e0:	685b      	ldr	r3, [r3, #4]
 800e5e2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800e5e6:	2b00      	cmp	r3, #0
 800e5e8:	f000 80d8 	beq.w	800e79c <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800e5ec:	4b2c      	ldr	r3, [pc, #176]	@ (800e6a0 <HAL_GPIO_Init+0x22c>)
 800e5ee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800e5f2:	4a2b      	ldr	r2, [pc, #172]	@ (800e6a0 <HAL_GPIO_Init+0x22c>)
 800e5f4:	f043 0302 	orr.w	r3, r3, #2
 800e5f8:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800e5fc:	4b28      	ldr	r3, [pc, #160]	@ (800e6a0 <HAL_GPIO_Init+0x22c>)
 800e5fe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800e602:	f003 0302 	and.w	r3, r3, #2
 800e606:	60fb      	str	r3, [r7, #12]
 800e608:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800e60a:	4a26      	ldr	r2, [pc, #152]	@ (800e6a4 <HAL_GPIO_Init+0x230>)
 800e60c:	69fb      	ldr	r3, [r7, #28]
 800e60e:	089b      	lsrs	r3, r3, #2
 800e610:	3302      	adds	r3, #2
 800e612:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e616:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800e618:	69fb      	ldr	r3, [r7, #28]
 800e61a:	f003 0303 	and.w	r3, r3, #3
 800e61e:	009b      	lsls	r3, r3, #2
 800e620:	220f      	movs	r2, #15
 800e622:	fa02 f303 	lsl.w	r3, r2, r3
 800e626:	43db      	mvns	r3, r3
 800e628:	69ba      	ldr	r2, [r7, #24]
 800e62a:	4013      	ands	r3, r2
 800e62c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	4a1d      	ldr	r2, [pc, #116]	@ (800e6a8 <HAL_GPIO_Init+0x234>)
 800e632:	4293      	cmp	r3, r2
 800e634:	d04a      	beq.n	800e6cc <HAL_GPIO_Init+0x258>
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	4a1c      	ldr	r2, [pc, #112]	@ (800e6ac <HAL_GPIO_Init+0x238>)
 800e63a:	4293      	cmp	r3, r2
 800e63c:	d02b      	beq.n	800e696 <HAL_GPIO_Init+0x222>
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	4a1b      	ldr	r2, [pc, #108]	@ (800e6b0 <HAL_GPIO_Init+0x23c>)
 800e642:	4293      	cmp	r3, r2
 800e644:	d025      	beq.n	800e692 <HAL_GPIO_Init+0x21e>
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	4a1a      	ldr	r2, [pc, #104]	@ (800e6b4 <HAL_GPIO_Init+0x240>)
 800e64a:	4293      	cmp	r3, r2
 800e64c:	d01f      	beq.n	800e68e <HAL_GPIO_Init+0x21a>
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	4a19      	ldr	r2, [pc, #100]	@ (800e6b8 <HAL_GPIO_Init+0x244>)
 800e652:	4293      	cmp	r3, r2
 800e654:	d019      	beq.n	800e68a <HAL_GPIO_Init+0x216>
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	4a18      	ldr	r2, [pc, #96]	@ (800e6bc <HAL_GPIO_Init+0x248>)
 800e65a:	4293      	cmp	r3, r2
 800e65c:	d013      	beq.n	800e686 <HAL_GPIO_Init+0x212>
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	4a17      	ldr	r2, [pc, #92]	@ (800e6c0 <HAL_GPIO_Init+0x24c>)
 800e662:	4293      	cmp	r3, r2
 800e664:	d00d      	beq.n	800e682 <HAL_GPIO_Init+0x20e>
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	4a16      	ldr	r2, [pc, #88]	@ (800e6c4 <HAL_GPIO_Init+0x250>)
 800e66a:	4293      	cmp	r3, r2
 800e66c:	d007      	beq.n	800e67e <HAL_GPIO_Init+0x20a>
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	4a15      	ldr	r2, [pc, #84]	@ (800e6c8 <HAL_GPIO_Init+0x254>)
 800e672:	4293      	cmp	r3, r2
 800e674:	d101      	bne.n	800e67a <HAL_GPIO_Init+0x206>
 800e676:	2309      	movs	r3, #9
 800e678:	e029      	b.n	800e6ce <HAL_GPIO_Init+0x25a>
 800e67a:	230a      	movs	r3, #10
 800e67c:	e027      	b.n	800e6ce <HAL_GPIO_Init+0x25a>
 800e67e:	2307      	movs	r3, #7
 800e680:	e025      	b.n	800e6ce <HAL_GPIO_Init+0x25a>
 800e682:	2306      	movs	r3, #6
 800e684:	e023      	b.n	800e6ce <HAL_GPIO_Init+0x25a>
 800e686:	2305      	movs	r3, #5
 800e688:	e021      	b.n	800e6ce <HAL_GPIO_Init+0x25a>
 800e68a:	2304      	movs	r3, #4
 800e68c:	e01f      	b.n	800e6ce <HAL_GPIO_Init+0x25a>
 800e68e:	2303      	movs	r3, #3
 800e690:	e01d      	b.n	800e6ce <HAL_GPIO_Init+0x25a>
 800e692:	2302      	movs	r3, #2
 800e694:	e01b      	b.n	800e6ce <HAL_GPIO_Init+0x25a>
 800e696:	2301      	movs	r3, #1
 800e698:	e019      	b.n	800e6ce <HAL_GPIO_Init+0x25a>
 800e69a:	bf00      	nop
 800e69c:	58000080 	.word	0x58000080
 800e6a0:	58024400 	.word	0x58024400
 800e6a4:	58000400 	.word	0x58000400
 800e6a8:	58020000 	.word	0x58020000
 800e6ac:	58020400 	.word	0x58020400
 800e6b0:	58020800 	.word	0x58020800
 800e6b4:	58020c00 	.word	0x58020c00
 800e6b8:	58021000 	.word	0x58021000
 800e6bc:	58021400 	.word	0x58021400
 800e6c0:	58021800 	.word	0x58021800
 800e6c4:	58021c00 	.word	0x58021c00
 800e6c8:	58022400 	.word	0x58022400
 800e6cc:	2300      	movs	r3, #0
 800e6ce:	69fa      	ldr	r2, [r7, #28]
 800e6d0:	f002 0203 	and.w	r2, r2, #3
 800e6d4:	0092      	lsls	r2, r2, #2
 800e6d6:	4093      	lsls	r3, r2
 800e6d8:	69ba      	ldr	r2, [r7, #24]
 800e6da:	4313      	orrs	r3, r2
 800e6dc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800e6de:	4938      	ldr	r1, [pc, #224]	@ (800e7c0 <HAL_GPIO_Init+0x34c>)
 800e6e0:	69fb      	ldr	r3, [r7, #28]
 800e6e2:	089b      	lsrs	r3, r3, #2
 800e6e4:	3302      	adds	r3, #2
 800e6e6:	69ba      	ldr	r2, [r7, #24]
 800e6e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800e6ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e6f0:	681b      	ldr	r3, [r3, #0]
 800e6f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800e6f4:	693b      	ldr	r3, [r7, #16]
 800e6f6:	43db      	mvns	r3, r3
 800e6f8:	69ba      	ldr	r2, [r7, #24]
 800e6fa:	4013      	ands	r3, r2
 800e6fc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800e6fe:	683b      	ldr	r3, [r7, #0]
 800e700:	685b      	ldr	r3, [r3, #4]
 800e702:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800e706:	2b00      	cmp	r3, #0
 800e708:	d003      	beq.n	800e712 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800e70a:	69ba      	ldr	r2, [r7, #24]
 800e70c:	693b      	ldr	r3, [r7, #16]
 800e70e:	4313      	orrs	r3, r2
 800e710:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800e712:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800e716:	69bb      	ldr	r3, [r7, #24]
 800e718:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800e71a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e71e:	685b      	ldr	r3, [r3, #4]
 800e720:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800e722:	693b      	ldr	r3, [r7, #16]
 800e724:	43db      	mvns	r3, r3
 800e726:	69ba      	ldr	r2, [r7, #24]
 800e728:	4013      	ands	r3, r2
 800e72a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800e72c:	683b      	ldr	r3, [r7, #0]
 800e72e:	685b      	ldr	r3, [r3, #4]
 800e730:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800e734:	2b00      	cmp	r3, #0
 800e736:	d003      	beq.n	800e740 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 800e738:	69ba      	ldr	r2, [r7, #24]
 800e73a:	693b      	ldr	r3, [r7, #16]
 800e73c:	4313      	orrs	r3, r2
 800e73e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800e740:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800e744:	69bb      	ldr	r3, [r7, #24]
 800e746:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800e748:	697b      	ldr	r3, [r7, #20]
 800e74a:	685b      	ldr	r3, [r3, #4]
 800e74c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800e74e:	693b      	ldr	r3, [r7, #16]
 800e750:	43db      	mvns	r3, r3
 800e752:	69ba      	ldr	r2, [r7, #24]
 800e754:	4013      	ands	r3, r2
 800e756:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800e758:	683b      	ldr	r3, [r7, #0]
 800e75a:	685b      	ldr	r3, [r3, #4]
 800e75c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e760:	2b00      	cmp	r3, #0
 800e762:	d003      	beq.n	800e76c <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 800e764:	69ba      	ldr	r2, [r7, #24]
 800e766:	693b      	ldr	r3, [r7, #16]
 800e768:	4313      	orrs	r3, r2
 800e76a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800e76c:	697b      	ldr	r3, [r7, #20]
 800e76e:	69ba      	ldr	r2, [r7, #24]
 800e770:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800e772:	697b      	ldr	r3, [r7, #20]
 800e774:	681b      	ldr	r3, [r3, #0]
 800e776:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800e778:	693b      	ldr	r3, [r7, #16]
 800e77a:	43db      	mvns	r3, r3
 800e77c:	69ba      	ldr	r2, [r7, #24]
 800e77e:	4013      	ands	r3, r2
 800e780:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800e782:	683b      	ldr	r3, [r7, #0]
 800e784:	685b      	ldr	r3, [r3, #4]
 800e786:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800e78a:	2b00      	cmp	r3, #0
 800e78c:	d003      	beq.n	800e796 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800e78e:	69ba      	ldr	r2, [r7, #24]
 800e790:	693b      	ldr	r3, [r7, #16]
 800e792:	4313      	orrs	r3, r2
 800e794:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800e796:	697b      	ldr	r3, [r7, #20]
 800e798:	69ba      	ldr	r2, [r7, #24]
 800e79a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800e79c:	69fb      	ldr	r3, [r7, #28]
 800e79e:	3301      	adds	r3, #1
 800e7a0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800e7a2:	683b      	ldr	r3, [r7, #0]
 800e7a4:	681a      	ldr	r2, [r3, #0]
 800e7a6:	69fb      	ldr	r3, [r7, #28]
 800e7a8:	fa22 f303 	lsr.w	r3, r2, r3
 800e7ac:	2b00      	cmp	r3, #0
 800e7ae:	f47f ae6b 	bne.w	800e488 <HAL_GPIO_Init+0x14>
  }
}
 800e7b2:	bf00      	nop
 800e7b4:	bf00      	nop
 800e7b6:	3724      	adds	r7, #36	@ 0x24
 800e7b8:	46bd      	mov	sp, r7
 800e7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7be:	4770      	bx	lr
 800e7c0:	58000400 	.word	0x58000400

0800e7c4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800e7c4:	b480      	push	{r7}
 800e7c6:	b085      	sub	sp, #20
 800e7c8:	af00      	add	r7, sp, #0
 800e7ca:	6078      	str	r0, [r7, #4]
 800e7cc:	460b      	mov	r3, r1
 800e7ce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	691a      	ldr	r2, [r3, #16]
 800e7d4:	887b      	ldrh	r3, [r7, #2]
 800e7d6:	4013      	ands	r3, r2
 800e7d8:	2b00      	cmp	r3, #0
 800e7da:	d002      	beq.n	800e7e2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800e7dc:	2301      	movs	r3, #1
 800e7de:	73fb      	strb	r3, [r7, #15]
 800e7e0:	e001      	b.n	800e7e6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800e7e2:	2300      	movs	r3, #0
 800e7e4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800e7e6:	7bfb      	ldrb	r3, [r7, #15]
}
 800e7e8:	4618      	mov	r0, r3
 800e7ea:	3714      	adds	r7, #20
 800e7ec:	46bd      	mov	sp, r7
 800e7ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7f2:	4770      	bx	lr

0800e7f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800e7f4:	b480      	push	{r7}
 800e7f6:	b083      	sub	sp, #12
 800e7f8:	af00      	add	r7, sp, #0
 800e7fa:	6078      	str	r0, [r7, #4]
 800e7fc:	460b      	mov	r3, r1
 800e7fe:	807b      	strh	r3, [r7, #2]
 800e800:	4613      	mov	r3, r2
 800e802:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800e804:	787b      	ldrb	r3, [r7, #1]
 800e806:	2b00      	cmp	r3, #0
 800e808:	d003      	beq.n	800e812 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800e80a:	887a      	ldrh	r2, [r7, #2]
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800e810:	e003      	b.n	800e81a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800e812:	887b      	ldrh	r3, [r7, #2]
 800e814:	041a      	lsls	r2, r3, #16
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	619a      	str	r2, [r3, #24]
}
 800e81a:	bf00      	nop
 800e81c:	370c      	adds	r7, #12
 800e81e:	46bd      	mov	sp, r7
 800e820:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e824:	4770      	bx	lr

0800e826 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800e826:	b580      	push	{r7, lr}
 800e828:	b082      	sub	sp, #8
 800e82a:	af00      	add	r7, sp, #0
 800e82c:	4603      	mov	r3, r0
 800e82e:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 800e830:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e834:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800e838:	88fb      	ldrh	r3, [r7, #6]
 800e83a:	4013      	ands	r3, r2
 800e83c:	2b00      	cmp	r3, #0
 800e83e:	d008      	beq.n	800e852 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800e840:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800e844:	88fb      	ldrh	r3, [r7, #6]
 800e846:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800e84a:	88fb      	ldrh	r3, [r7, #6]
 800e84c:	4618      	mov	r0, r3
 800e84e:	f7f7 fd51 	bl	80062f4 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800e852:	bf00      	nop
 800e854:	3708      	adds	r7, #8
 800e856:	46bd      	mov	sp, r7
 800e858:	bd80      	pop	{r7, pc}
	...

0800e85c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800e85c:	b580      	push	{r7, lr}
 800e85e:	b082      	sub	sp, #8
 800e860:	af00      	add	r7, sp, #0
 800e862:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	2b00      	cmp	r3, #0
 800e868:	d101      	bne.n	800e86e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800e86a:	2301      	movs	r3, #1
 800e86c:	e08b      	b.n	800e986 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e874:	b2db      	uxtb	r3, r3
 800e876:	2b00      	cmp	r3, #0
 800e878:	d106      	bne.n	800e888 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	2200      	movs	r2, #0
 800e87e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800e882:	6878      	ldr	r0, [r7, #4]
 800e884:	f7f6 fafc 	bl	8004e80 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	2224      	movs	r2, #36	@ 0x24
 800e88c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	681b      	ldr	r3, [r3, #0]
 800e894:	681a      	ldr	r2, [r3, #0]
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	681b      	ldr	r3, [r3, #0]
 800e89a:	f022 0201 	bic.w	r2, r2, #1
 800e89e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	685a      	ldr	r2, [r3, #4]
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	681b      	ldr	r3, [r3, #0]
 800e8a8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800e8ac:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	681b      	ldr	r3, [r3, #0]
 800e8b2:	689a      	ldr	r2, [r3, #8]
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	681b      	ldr	r3, [r3, #0]
 800e8b8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800e8bc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	68db      	ldr	r3, [r3, #12]
 800e8c2:	2b01      	cmp	r3, #1
 800e8c4:	d107      	bne.n	800e8d6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	689a      	ldr	r2, [r3, #8]
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	681b      	ldr	r3, [r3, #0]
 800e8ce:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800e8d2:	609a      	str	r2, [r3, #8]
 800e8d4:	e006      	b.n	800e8e4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	689a      	ldr	r2, [r3, #8]
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	681b      	ldr	r3, [r3, #0]
 800e8de:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800e8e2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	68db      	ldr	r3, [r3, #12]
 800e8e8:	2b02      	cmp	r3, #2
 800e8ea:	d108      	bne.n	800e8fe <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	681b      	ldr	r3, [r3, #0]
 800e8f0:	685a      	ldr	r2, [r3, #4]
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	681b      	ldr	r3, [r3, #0]
 800e8f6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e8fa:	605a      	str	r2, [r3, #4]
 800e8fc:	e007      	b.n	800e90e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	681b      	ldr	r3, [r3, #0]
 800e902:	685a      	ldr	r2, [r3, #4]
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	681b      	ldr	r3, [r3, #0]
 800e908:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800e90c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	681b      	ldr	r3, [r3, #0]
 800e912:	6859      	ldr	r1, [r3, #4]
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	681a      	ldr	r2, [r3, #0]
 800e918:	4b1d      	ldr	r3, [pc, #116]	@ (800e990 <HAL_I2C_Init+0x134>)
 800e91a:	430b      	orrs	r3, r1
 800e91c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	681b      	ldr	r3, [r3, #0]
 800e922:	68da      	ldr	r2, [r3, #12]
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	681b      	ldr	r3, [r3, #0]
 800e928:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800e92c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	691a      	ldr	r2, [r3, #16]
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	695b      	ldr	r3, [r3, #20]
 800e936:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	699b      	ldr	r3, [r3, #24]
 800e93e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	681b      	ldr	r3, [r3, #0]
 800e944:	430a      	orrs	r2, r1
 800e946:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	69d9      	ldr	r1, [r3, #28]
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	6a1a      	ldr	r2, [r3, #32]
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	681b      	ldr	r3, [r3, #0]
 800e954:	430a      	orrs	r2, r1
 800e956:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	681b      	ldr	r3, [r3, #0]
 800e95c:	681a      	ldr	r2, [r3, #0]
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	681b      	ldr	r3, [r3, #0]
 800e962:	f042 0201 	orr.w	r2, r2, #1
 800e966:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	2200      	movs	r2, #0
 800e96c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	2220      	movs	r2, #32
 800e972:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	2200      	movs	r2, #0
 800e97a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	2200      	movs	r2, #0
 800e980:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800e984:	2300      	movs	r3, #0
}
 800e986:	4618      	mov	r0, r3
 800e988:	3708      	adds	r7, #8
 800e98a:	46bd      	mov	sp, r7
 800e98c:	bd80      	pop	{r7, pc}
 800e98e:	bf00      	nop
 800e990:	02008000 	.word	0x02008000

0800e994 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e994:	b580      	push	{r7, lr}
 800e996:	b088      	sub	sp, #32
 800e998:	af02      	add	r7, sp, #8
 800e99a:	60f8      	str	r0, [r7, #12]
 800e99c:	4608      	mov	r0, r1
 800e99e:	4611      	mov	r1, r2
 800e9a0:	461a      	mov	r2, r3
 800e9a2:	4603      	mov	r3, r0
 800e9a4:	817b      	strh	r3, [r7, #10]
 800e9a6:	460b      	mov	r3, r1
 800e9a8:	813b      	strh	r3, [r7, #8]
 800e9aa:	4613      	mov	r3, r2
 800e9ac:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800e9ae:	68fb      	ldr	r3, [r7, #12]
 800e9b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e9b4:	b2db      	uxtb	r3, r3
 800e9b6:	2b20      	cmp	r3, #32
 800e9b8:	f040 80f9 	bne.w	800ebae <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800e9bc:	6a3b      	ldr	r3, [r7, #32]
 800e9be:	2b00      	cmp	r3, #0
 800e9c0:	d002      	beq.n	800e9c8 <HAL_I2C_Mem_Write+0x34>
 800e9c2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e9c4:	2b00      	cmp	r3, #0
 800e9c6:	d105      	bne.n	800e9d4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800e9c8:	68fb      	ldr	r3, [r7, #12]
 800e9ca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e9ce:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800e9d0:	2301      	movs	r3, #1
 800e9d2:	e0ed      	b.n	800ebb0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e9d4:	68fb      	ldr	r3, [r7, #12]
 800e9d6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800e9da:	2b01      	cmp	r3, #1
 800e9dc:	d101      	bne.n	800e9e2 <HAL_I2C_Mem_Write+0x4e>
 800e9de:	2302      	movs	r3, #2
 800e9e0:	e0e6      	b.n	800ebb0 <HAL_I2C_Mem_Write+0x21c>
 800e9e2:	68fb      	ldr	r3, [r7, #12]
 800e9e4:	2201      	movs	r2, #1
 800e9e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800e9ea:	f7fa fdbb 	bl	8009564 <HAL_GetTick>
 800e9ee:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800e9f0:	697b      	ldr	r3, [r7, #20]
 800e9f2:	9300      	str	r3, [sp, #0]
 800e9f4:	2319      	movs	r3, #25
 800e9f6:	2201      	movs	r2, #1
 800e9f8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800e9fc:	68f8      	ldr	r0, [r7, #12]
 800e9fe:	f002 f818 	bl	8010a32 <I2C_WaitOnFlagUntilTimeout>
 800ea02:	4603      	mov	r3, r0
 800ea04:	2b00      	cmp	r3, #0
 800ea06:	d001      	beq.n	800ea0c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800ea08:	2301      	movs	r3, #1
 800ea0a:	e0d1      	b.n	800ebb0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800ea0c:	68fb      	ldr	r3, [r7, #12]
 800ea0e:	2221      	movs	r2, #33	@ 0x21
 800ea10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800ea14:	68fb      	ldr	r3, [r7, #12]
 800ea16:	2240      	movs	r2, #64	@ 0x40
 800ea18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ea1c:	68fb      	ldr	r3, [r7, #12]
 800ea1e:	2200      	movs	r2, #0
 800ea20:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800ea22:	68fb      	ldr	r3, [r7, #12]
 800ea24:	6a3a      	ldr	r2, [r7, #32]
 800ea26:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800ea28:	68fb      	ldr	r3, [r7, #12]
 800ea2a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800ea2c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800ea2e:	68fb      	ldr	r3, [r7, #12]
 800ea30:	2200      	movs	r2, #0
 800ea32:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800ea34:	88f8      	ldrh	r0, [r7, #6]
 800ea36:	893a      	ldrh	r2, [r7, #8]
 800ea38:	8979      	ldrh	r1, [r7, #10]
 800ea3a:	697b      	ldr	r3, [r7, #20]
 800ea3c:	9301      	str	r3, [sp, #4]
 800ea3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea40:	9300      	str	r3, [sp, #0]
 800ea42:	4603      	mov	r3, r0
 800ea44:	68f8      	ldr	r0, [r7, #12]
 800ea46:	f001 f965 	bl	800fd14 <I2C_RequestMemoryWrite>
 800ea4a:	4603      	mov	r3, r0
 800ea4c:	2b00      	cmp	r3, #0
 800ea4e:	d005      	beq.n	800ea5c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ea50:	68fb      	ldr	r3, [r7, #12]
 800ea52:	2200      	movs	r2, #0
 800ea54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800ea58:	2301      	movs	r3, #1
 800ea5a:	e0a9      	b.n	800ebb0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ea5c:	68fb      	ldr	r3, [r7, #12]
 800ea5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ea60:	b29b      	uxth	r3, r3
 800ea62:	2bff      	cmp	r3, #255	@ 0xff
 800ea64:	d90e      	bls.n	800ea84 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800ea66:	68fb      	ldr	r3, [r7, #12]
 800ea68:	22ff      	movs	r2, #255	@ 0xff
 800ea6a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800ea6c:	68fb      	ldr	r3, [r7, #12]
 800ea6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ea70:	b2da      	uxtb	r2, r3
 800ea72:	8979      	ldrh	r1, [r7, #10]
 800ea74:	2300      	movs	r3, #0
 800ea76:	9300      	str	r3, [sp, #0]
 800ea78:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800ea7c:	68f8      	ldr	r0, [r7, #12]
 800ea7e:	f002 f99b 	bl	8010db8 <I2C_TransferConfig>
 800ea82:	e00f      	b.n	800eaa4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800ea84:	68fb      	ldr	r3, [r7, #12]
 800ea86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ea88:	b29a      	uxth	r2, r3
 800ea8a:	68fb      	ldr	r3, [r7, #12]
 800ea8c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800ea8e:	68fb      	ldr	r3, [r7, #12]
 800ea90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ea92:	b2da      	uxtb	r2, r3
 800ea94:	8979      	ldrh	r1, [r7, #10]
 800ea96:	2300      	movs	r3, #0
 800ea98:	9300      	str	r3, [sp, #0]
 800ea9a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800ea9e:	68f8      	ldr	r0, [r7, #12]
 800eaa0:	f002 f98a 	bl	8010db8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800eaa4:	697a      	ldr	r2, [r7, #20]
 800eaa6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800eaa8:	68f8      	ldr	r0, [r7, #12]
 800eaaa:	f002 f81b 	bl	8010ae4 <I2C_WaitOnTXISFlagUntilTimeout>
 800eaae:	4603      	mov	r3, r0
 800eab0:	2b00      	cmp	r3, #0
 800eab2:	d001      	beq.n	800eab8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800eab4:	2301      	movs	r3, #1
 800eab6:	e07b      	b.n	800ebb0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800eab8:	68fb      	ldr	r3, [r7, #12]
 800eaba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eabc:	781a      	ldrb	r2, [r3, #0]
 800eabe:	68fb      	ldr	r3, [r7, #12]
 800eac0:	681b      	ldr	r3, [r3, #0]
 800eac2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800eac4:	68fb      	ldr	r3, [r7, #12]
 800eac6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eac8:	1c5a      	adds	r2, r3, #1
 800eaca:	68fb      	ldr	r3, [r7, #12]
 800eacc:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800eace:	68fb      	ldr	r3, [r7, #12]
 800ead0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ead2:	b29b      	uxth	r3, r3
 800ead4:	3b01      	subs	r3, #1
 800ead6:	b29a      	uxth	r2, r3
 800ead8:	68fb      	ldr	r3, [r7, #12]
 800eada:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800eadc:	68fb      	ldr	r3, [r7, #12]
 800eade:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800eae0:	3b01      	subs	r3, #1
 800eae2:	b29a      	uxth	r2, r3
 800eae4:	68fb      	ldr	r3, [r7, #12]
 800eae6:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800eae8:	68fb      	ldr	r3, [r7, #12]
 800eaea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800eaec:	b29b      	uxth	r3, r3
 800eaee:	2b00      	cmp	r3, #0
 800eaf0:	d034      	beq.n	800eb5c <HAL_I2C_Mem_Write+0x1c8>
 800eaf2:	68fb      	ldr	r3, [r7, #12]
 800eaf4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800eaf6:	2b00      	cmp	r3, #0
 800eaf8:	d130      	bne.n	800eb5c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800eafa:	697b      	ldr	r3, [r7, #20]
 800eafc:	9300      	str	r3, [sp, #0]
 800eafe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb00:	2200      	movs	r2, #0
 800eb02:	2180      	movs	r1, #128	@ 0x80
 800eb04:	68f8      	ldr	r0, [r7, #12]
 800eb06:	f001 ff94 	bl	8010a32 <I2C_WaitOnFlagUntilTimeout>
 800eb0a:	4603      	mov	r3, r0
 800eb0c:	2b00      	cmp	r3, #0
 800eb0e:	d001      	beq.n	800eb14 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800eb10:	2301      	movs	r3, #1
 800eb12:	e04d      	b.n	800ebb0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800eb14:	68fb      	ldr	r3, [r7, #12]
 800eb16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800eb18:	b29b      	uxth	r3, r3
 800eb1a:	2bff      	cmp	r3, #255	@ 0xff
 800eb1c:	d90e      	bls.n	800eb3c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800eb1e:	68fb      	ldr	r3, [r7, #12]
 800eb20:	22ff      	movs	r2, #255	@ 0xff
 800eb22:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800eb24:	68fb      	ldr	r3, [r7, #12]
 800eb26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800eb28:	b2da      	uxtb	r2, r3
 800eb2a:	8979      	ldrh	r1, [r7, #10]
 800eb2c:	2300      	movs	r3, #0
 800eb2e:	9300      	str	r3, [sp, #0]
 800eb30:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800eb34:	68f8      	ldr	r0, [r7, #12]
 800eb36:	f002 f93f 	bl	8010db8 <I2C_TransferConfig>
 800eb3a:	e00f      	b.n	800eb5c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800eb3c:	68fb      	ldr	r3, [r7, #12]
 800eb3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800eb40:	b29a      	uxth	r2, r3
 800eb42:	68fb      	ldr	r3, [r7, #12]
 800eb44:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800eb46:	68fb      	ldr	r3, [r7, #12]
 800eb48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800eb4a:	b2da      	uxtb	r2, r3
 800eb4c:	8979      	ldrh	r1, [r7, #10]
 800eb4e:	2300      	movs	r3, #0
 800eb50:	9300      	str	r3, [sp, #0]
 800eb52:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800eb56:	68f8      	ldr	r0, [r7, #12]
 800eb58:	f002 f92e 	bl	8010db8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800eb5c:	68fb      	ldr	r3, [r7, #12]
 800eb5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800eb60:	b29b      	uxth	r3, r3
 800eb62:	2b00      	cmp	r3, #0
 800eb64:	d19e      	bne.n	800eaa4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800eb66:	697a      	ldr	r2, [r7, #20]
 800eb68:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800eb6a:	68f8      	ldr	r0, [r7, #12]
 800eb6c:	f002 f801 	bl	8010b72 <I2C_WaitOnSTOPFlagUntilTimeout>
 800eb70:	4603      	mov	r3, r0
 800eb72:	2b00      	cmp	r3, #0
 800eb74:	d001      	beq.n	800eb7a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800eb76:	2301      	movs	r3, #1
 800eb78:	e01a      	b.n	800ebb0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800eb7a:	68fb      	ldr	r3, [r7, #12]
 800eb7c:	681b      	ldr	r3, [r3, #0]
 800eb7e:	2220      	movs	r2, #32
 800eb80:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800eb82:	68fb      	ldr	r3, [r7, #12]
 800eb84:	681b      	ldr	r3, [r3, #0]
 800eb86:	6859      	ldr	r1, [r3, #4]
 800eb88:	68fb      	ldr	r3, [r7, #12]
 800eb8a:	681a      	ldr	r2, [r3, #0]
 800eb8c:	4b0a      	ldr	r3, [pc, #40]	@ (800ebb8 <HAL_I2C_Mem_Write+0x224>)
 800eb8e:	400b      	ands	r3, r1
 800eb90:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800eb92:	68fb      	ldr	r3, [r7, #12]
 800eb94:	2220      	movs	r2, #32
 800eb96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800eb9a:	68fb      	ldr	r3, [r7, #12]
 800eb9c:	2200      	movs	r2, #0
 800eb9e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800eba2:	68fb      	ldr	r3, [r7, #12]
 800eba4:	2200      	movs	r2, #0
 800eba6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800ebaa:	2300      	movs	r3, #0
 800ebac:	e000      	b.n	800ebb0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800ebae:	2302      	movs	r3, #2
  }
}
 800ebb0:	4618      	mov	r0, r3
 800ebb2:	3718      	adds	r7, #24
 800ebb4:	46bd      	mov	sp, r7
 800ebb6:	bd80      	pop	{r7, pc}
 800ebb8:	fe00e800 	.word	0xfe00e800

0800ebbc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ebbc:	b580      	push	{r7, lr}
 800ebbe:	b088      	sub	sp, #32
 800ebc0:	af02      	add	r7, sp, #8
 800ebc2:	60f8      	str	r0, [r7, #12]
 800ebc4:	4608      	mov	r0, r1
 800ebc6:	4611      	mov	r1, r2
 800ebc8:	461a      	mov	r2, r3
 800ebca:	4603      	mov	r3, r0
 800ebcc:	817b      	strh	r3, [r7, #10]
 800ebce:	460b      	mov	r3, r1
 800ebd0:	813b      	strh	r3, [r7, #8]
 800ebd2:	4613      	mov	r3, r2
 800ebd4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ebd6:	68fb      	ldr	r3, [r7, #12]
 800ebd8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ebdc:	b2db      	uxtb	r3, r3
 800ebde:	2b20      	cmp	r3, #32
 800ebe0:	f040 80fd 	bne.w	800edde <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800ebe4:	6a3b      	ldr	r3, [r7, #32]
 800ebe6:	2b00      	cmp	r3, #0
 800ebe8:	d002      	beq.n	800ebf0 <HAL_I2C_Mem_Read+0x34>
 800ebea:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ebec:	2b00      	cmp	r3, #0
 800ebee:	d105      	bne.n	800ebfc <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800ebf0:	68fb      	ldr	r3, [r7, #12]
 800ebf2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ebf6:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800ebf8:	2301      	movs	r3, #1
 800ebfa:	e0f1      	b.n	800ede0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ebfc:	68fb      	ldr	r3, [r7, #12]
 800ebfe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800ec02:	2b01      	cmp	r3, #1
 800ec04:	d101      	bne.n	800ec0a <HAL_I2C_Mem_Read+0x4e>
 800ec06:	2302      	movs	r3, #2
 800ec08:	e0ea      	b.n	800ede0 <HAL_I2C_Mem_Read+0x224>
 800ec0a:	68fb      	ldr	r3, [r7, #12]
 800ec0c:	2201      	movs	r2, #1
 800ec0e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800ec12:	f7fa fca7 	bl	8009564 <HAL_GetTick>
 800ec16:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800ec18:	697b      	ldr	r3, [r7, #20]
 800ec1a:	9300      	str	r3, [sp, #0]
 800ec1c:	2319      	movs	r3, #25
 800ec1e:	2201      	movs	r2, #1
 800ec20:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800ec24:	68f8      	ldr	r0, [r7, #12]
 800ec26:	f001 ff04 	bl	8010a32 <I2C_WaitOnFlagUntilTimeout>
 800ec2a:	4603      	mov	r3, r0
 800ec2c:	2b00      	cmp	r3, #0
 800ec2e:	d001      	beq.n	800ec34 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800ec30:	2301      	movs	r3, #1
 800ec32:	e0d5      	b.n	800ede0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800ec34:	68fb      	ldr	r3, [r7, #12]
 800ec36:	2222      	movs	r2, #34	@ 0x22
 800ec38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800ec3c:	68fb      	ldr	r3, [r7, #12]
 800ec3e:	2240      	movs	r2, #64	@ 0x40
 800ec40:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ec44:	68fb      	ldr	r3, [r7, #12]
 800ec46:	2200      	movs	r2, #0
 800ec48:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800ec4a:	68fb      	ldr	r3, [r7, #12]
 800ec4c:	6a3a      	ldr	r2, [r7, #32]
 800ec4e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800ec50:	68fb      	ldr	r3, [r7, #12]
 800ec52:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800ec54:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800ec56:	68fb      	ldr	r3, [r7, #12]
 800ec58:	2200      	movs	r2, #0
 800ec5a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800ec5c:	88f8      	ldrh	r0, [r7, #6]
 800ec5e:	893a      	ldrh	r2, [r7, #8]
 800ec60:	8979      	ldrh	r1, [r7, #10]
 800ec62:	697b      	ldr	r3, [r7, #20]
 800ec64:	9301      	str	r3, [sp, #4]
 800ec66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec68:	9300      	str	r3, [sp, #0]
 800ec6a:	4603      	mov	r3, r0
 800ec6c:	68f8      	ldr	r0, [r7, #12]
 800ec6e:	f001 f8a5 	bl	800fdbc <I2C_RequestMemoryRead>
 800ec72:	4603      	mov	r3, r0
 800ec74:	2b00      	cmp	r3, #0
 800ec76:	d005      	beq.n	800ec84 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ec78:	68fb      	ldr	r3, [r7, #12]
 800ec7a:	2200      	movs	r2, #0
 800ec7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800ec80:	2301      	movs	r3, #1
 800ec82:	e0ad      	b.n	800ede0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ec84:	68fb      	ldr	r3, [r7, #12]
 800ec86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ec88:	b29b      	uxth	r3, r3
 800ec8a:	2bff      	cmp	r3, #255	@ 0xff
 800ec8c:	d90e      	bls.n	800ecac <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800ec8e:	68fb      	ldr	r3, [r7, #12]
 800ec90:	22ff      	movs	r2, #255	@ 0xff
 800ec92:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800ec94:	68fb      	ldr	r3, [r7, #12]
 800ec96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ec98:	b2da      	uxtb	r2, r3
 800ec9a:	8979      	ldrh	r1, [r7, #10]
 800ec9c:	4b52      	ldr	r3, [pc, #328]	@ (800ede8 <HAL_I2C_Mem_Read+0x22c>)
 800ec9e:	9300      	str	r3, [sp, #0]
 800eca0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800eca4:	68f8      	ldr	r0, [r7, #12]
 800eca6:	f002 f887 	bl	8010db8 <I2C_TransferConfig>
 800ecaa:	e00f      	b.n	800eccc <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800ecac:	68fb      	ldr	r3, [r7, #12]
 800ecae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ecb0:	b29a      	uxth	r2, r3
 800ecb2:	68fb      	ldr	r3, [r7, #12]
 800ecb4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800ecb6:	68fb      	ldr	r3, [r7, #12]
 800ecb8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ecba:	b2da      	uxtb	r2, r3
 800ecbc:	8979      	ldrh	r1, [r7, #10]
 800ecbe:	4b4a      	ldr	r3, [pc, #296]	@ (800ede8 <HAL_I2C_Mem_Read+0x22c>)
 800ecc0:	9300      	str	r3, [sp, #0]
 800ecc2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800ecc6:	68f8      	ldr	r0, [r7, #12]
 800ecc8:	f002 f876 	bl	8010db8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800eccc:	697b      	ldr	r3, [r7, #20]
 800ecce:	9300      	str	r3, [sp, #0]
 800ecd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ecd2:	2200      	movs	r2, #0
 800ecd4:	2104      	movs	r1, #4
 800ecd6:	68f8      	ldr	r0, [r7, #12]
 800ecd8:	f001 feab 	bl	8010a32 <I2C_WaitOnFlagUntilTimeout>
 800ecdc:	4603      	mov	r3, r0
 800ecde:	2b00      	cmp	r3, #0
 800ece0:	d001      	beq.n	800ece6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800ece2:	2301      	movs	r3, #1
 800ece4:	e07c      	b.n	800ede0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800ece6:	68fb      	ldr	r3, [r7, #12]
 800ece8:	681b      	ldr	r3, [r3, #0]
 800ecea:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ecec:	68fb      	ldr	r3, [r7, #12]
 800ecee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ecf0:	b2d2      	uxtb	r2, r2
 800ecf2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800ecf4:	68fb      	ldr	r3, [r7, #12]
 800ecf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ecf8:	1c5a      	adds	r2, r3, #1
 800ecfa:	68fb      	ldr	r3, [r7, #12]
 800ecfc:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800ecfe:	68fb      	ldr	r3, [r7, #12]
 800ed00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ed02:	3b01      	subs	r3, #1
 800ed04:	b29a      	uxth	r2, r3
 800ed06:	68fb      	ldr	r3, [r7, #12]
 800ed08:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800ed0a:	68fb      	ldr	r3, [r7, #12]
 800ed0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ed0e:	b29b      	uxth	r3, r3
 800ed10:	3b01      	subs	r3, #1
 800ed12:	b29a      	uxth	r2, r3
 800ed14:	68fb      	ldr	r3, [r7, #12]
 800ed16:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800ed18:	68fb      	ldr	r3, [r7, #12]
 800ed1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ed1c:	b29b      	uxth	r3, r3
 800ed1e:	2b00      	cmp	r3, #0
 800ed20:	d034      	beq.n	800ed8c <HAL_I2C_Mem_Read+0x1d0>
 800ed22:	68fb      	ldr	r3, [r7, #12]
 800ed24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ed26:	2b00      	cmp	r3, #0
 800ed28:	d130      	bne.n	800ed8c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800ed2a:	697b      	ldr	r3, [r7, #20]
 800ed2c:	9300      	str	r3, [sp, #0]
 800ed2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed30:	2200      	movs	r2, #0
 800ed32:	2180      	movs	r1, #128	@ 0x80
 800ed34:	68f8      	ldr	r0, [r7, #12]
 800ed36:	f001 fe7c 	bl	8010a32 <I2C_WaitOnFlagUntilTimeout>
 800ed3a:	4603      	mov	r3, r0
 800ed3c:	2b00      	cmp	r3, #0
 800ed3e:	d001      	beq.n	800ed44 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800ed40:	2301      	movs	r3, #1
 800ed42:	e04d      	b.n	800ede0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ed44:	68fb      	ldr	r3, [r7, #12]
 800ed46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ed48:	b29b      	uxth	r3, r3
 800ed4a:	2bff      	cmp	r3, #255	@ 0xff
 800ed4c:	d90e      	bls.n	800ed6c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800ed4e:	68fb      	ldr	r3, [r7, #12]
 800ed50:	22ff      	movs	r2, #255	@ 0xff
 800ed52:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800ed54:	68fb      	ldr	r3, [r7, #12]
 800ed56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ed58:	b2da      	uxtb	r2, r3
 800ed5a:	8979      	ldrh	r1, [r7, #10]
 800ed5c:	2300      	movs	r3, #0
 800ed5e:	9300      	str	r3, [sp, #0]
 800ed60:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800ed64:	68f8      	ldr	r0, [r7, #12]
 800ed66:	f002 f827 	bl	8010db8 <I2C_TransferConfig>
 800ed6a:	e00f      	b.n	800ed8c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800ed6c:	68fb      	ldr	r3, [r7, #12]
 800ed6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ed70:	b29a      	uxth	r2, r3
 800ed72:	68fb      	ldr	r3, [r7, #12]
 800ed74:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800ed76:	68fb      	ldr	r3, [r7, #12]
 800ed78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ed7a:	b2da      	uxtb	r2, r3
 800ed7c:	8979      	ldrh	r1, [r7, #10]
 800ed7e:	2300      	movs	r3, #0
 800ed80:	9300      	str	r3, [sp, #0]
 800ed82:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800ed86:	68f8      	ldr	r0, [r7, #12]
 800ed88:	f002 f816 	bl	8010db8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800ed8c:	68fb      	ldr	r3, [r7, #12]
 800ed8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ed90:	b29b      	uxth	r3, r3
 800ed92:	2b00      	cmp	r3, #0
 800ed94:	d19a      	bne.n	800eccc <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ed96:	697a      	ldr	r2, [r7, #20]
 800ed98:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ed9a:	68f8      	ldr	r0, [r7, #12]
 800ed9c:	f001 fee9 	bl	8010b72 <I2C_WaitOnSTOPFlagUntilTimeout>
 800eda0:	4603      	mov	r3, r0
 800eda2:	2b00      	cmp	r3, #0
 800eda4:	d001      	beq.n	800edaa <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800eda6:	2301      	movs	r3, #1
 800eda8:	e01a      	b.n	800ede0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800edaa:	68fb      	ldr	r3, [r7, #12]
 800edac:	681b      	ldr	r3, [r3, #0]
 800edae:	2220      	movs	r2, #32
 800edb0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800edb2:	68fb      	ldr	r3, [r7, #12]
 800edb4:	681b      	ldr	r3, [r3, #0]
 800edb6:	6859      	ldr	r1, [r3, #4]
 800edb8:	68fb      	ldr	r3, [r7, #12]
 800edba:	681a      	ldr	r2, [r3, #0]
 800edbc:	4b0b      	ldr	r3, [pc, #44]	@ (800edec <HAL_I2C_Mem_Read+0x230>)
 800edbe:	400b      	ands	r3, r1
 800edc0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800edc2:	68fb      	ldr	r3, [r7, #12]
 800edc4:	2220      	movs	r2, #32
 800edc6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800edca:	68fb      	ldr	r3, [r7, #12]
 800edcc:	2200      	movs	r2, #0
 800edce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800edd2:	68fb      	ldr	r3, [r7, #12]
 800edd4:	2200      	movs	r2, #0
 800edd6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800edda:	2300      	movs	r3, #0
 800eddc:	e000      	b.n	800ede0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800edde:	2302      	movs	r3, #2
  }
}
 800ede0:	4618      	mov	r0, r3
 800ede2:	3718      	adds	r7, #24
 800ede4:	46bd      	mov	sp, r7
 800ede6:	bd80      	pop	{r7, pc}
 800ede8:	80002400 	.word	0x80002400
 800edec:	fe00e800 	.word	0xfe00e800

0800edf0 <HAL_I2C_Mem_Write_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                       uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 800edf0:	b580      	push	{r7, lr}
 800edf2:	b086      	sub	sp, #24
 800edf4:	af02      	add	r7, sp, #8
 800edf6:	60f8      	str	r0, [r7, #12]
 800edf8:	4608      	mov	r0, r1
 800edfa:	4611      	mov	r1, r2
 800edfc:	461a      	mov	r2, r3
 800edfe:	4603      	mov	r3, r0
 800ee00:	817b      	strh	r3, [r7, #10]
 800ee02:	460b      	mov	r3, r1
 800ee04:	813b      	strh	r3, [r7, #8]
 800ee06:	4613      	mov	r3, r2
 800ee08:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ee0a:	68fb      	ldr	r3, [r7, #12]
 800ee0c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ee10:	b2db      	uxtb	r3, r3
 800ee12:	2b20      	cmp	r3, #32
 800ee14:	d16a      	bne.n	800eeec <HAL_I2C_Mem_Write_IT+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800ee16:	69bb      	ldr	r3, [r7, #24]
 800ee18:	2b00      	cmp	r3, #0
 800ee1a:	d002      	beq.n	800ee22 <HAL_I2C_Mem_Write_IT+0x32>
 800ee1c:	8bbb      	ldrh	r3, [r7, #28]
 800ee1e:	2b00      	cmp	r3, #0
 800ee20:	d105      	bne.n	800ee2e <HAL_I2C_Mem_Write_IT+0x3e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800ee22:	68fb      	ldr	r3, [r7, #12]
 800ee24:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ee28:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800ee2a:	2301      	movs	r3, #1
 800ee2c:	e05f      	b.n	800eeee <HAL_I2C_Mem_Write_IT+0xfe>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800ee2e:	68fb      	ldr	r3, [r7, #12]
 800ee30:	681b      	ldr	r3, [r3, #0]
 800ee32:	699b      	ldr	r3, [r3, #24]
 800ee34:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ee38:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ee3c:	d101      	bne.n	800ee42 <HAL_I2C_Mem_Write_IT+0x52>
    {
      return HAL_BUSY;
 800ee3e:	2302      	movs	r3, #2
 800ee40:	e055      	b.n	800eeee <HAL_I2C_Mem_Write_IT+0xfe>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ee42:	68fb      	ldr	r3, [r7, #12]
 800ee44:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800ee48:	2b01      	cmp	r3, #1
 800ee4a:	d101      	bne.n	800ee50 <HAL_I2C_Mem_Write_IT+0x60>
 800ee4c:	2302      	movs	r3, #2
 800ee4e:	e04e      	b.n	800eeee <HAL_I2C_Mem_Write_IT+0xfe>
 800ee50:	68fb      	ldr	r3, [r7, #12]
 800ee52:	2201      	movs	r2, #1
 800ee54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800ee58:	68fb      	ldr	r3, [r7, #12]
 800ee5a:	2221      	movs	r2, #33	@ 0x21
 800ee5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 800ee60:	68fb      	ldr	r3, [r7, #12]
 800ee62:	2240      	movs	r2, #64	@ 0x40
 800ee64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800ee68:	68fb      	ldr	r3, [r7, #12]
 800ee6a:	2200      	movs	r2, #0
 800ee6c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->XferSize    = 0U;
 800ee6e:	68fb      	ldr	r3, [r7, #12]
 800ee70:	2200      	movs	r2, #0
 800ee72:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->pBuffPtr    = pData;
 800ee74:	68fb      	ldr	r3, [r7, #12]
 800ee76:	69ba      	ldr	r2, [r7, #24]
 800ee78:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800ee7a:	68fb      	ldr	r3, [r7, #12]
 800ee7c:	8bba      	ldrh	r2, [r7, #28]
 800ee7e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800ee80:	68fb      	ldr	r3, [r7, #12]
 800ee82:	4a1d      	ldr	r2, [pc, #116]	@ (800eef8 <HAL_I2C_Mem_Write_IT+0x108>)
 800ee84:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_IT;
 800ee86:	68fb      	ldr	r3, [r7, #12]
 800ee88:	4a1c      	ldr	r2, [pc, #112]	@ (800eefc <HAL_I2C_Mem_Write_IT+0x10c>)
 800ee8a:	635a      	str	r2, [r3, #52]	@ 0x34
    hi2c->Devaddress  = DevAddress;
 800ee8c:	897a      	ldrh	r2, [r7, #10]
 800ee8e:	68fb      	ldr	r3, [r7, #12]
 800ee90:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800ee92:	88fb      	ldrh	r3, [r7, #6]
 800ee94:	2b01      	cmp	r3, #1
 800ee96:	d109      	bne.n	800eeac <HAL_I2C_Mem_Write_IT+0xbc>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800ee98:	893b      	ldrh	r3, [r7, #8]
 800ee9a:	b2da      	uxtb	r2, r3
 800ee9c:	68fb      	ldr	r3, [r7, #12]
 800ee9e:	681b      	ldr	r3, [r3, #0]
 800eea0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 800eea2:	68fb      	ldr	r3, [r7, #12]
 800eea4:	f04f 32ff 	mov.w	r2, #4294967295
 800eea8:	651a      	str	r2, [r3, #80]	@ 0x50
 800eeaa:	e00b      	b.n	800eec4 <HAL_I2C_Mem_Write_IT+0xd4>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800eeac:	893b      	ldrh	r3, [r7, #8]
 800eeae:	0a1b      	lsrs	r3, r3, #8
 800eeb0:	b29b      	uxth	r3, r3
 800eeb2:	b2da      	uxtb	r2, r3
 800eeb4:	68fb      	ldr	r3, [r7, #12]
 800eeb6:	681b      	ldr	r3, [r3, #0]
 800eeb8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 800eeba:	893b      	ldrh	r3, [r7, #8]
 800eebc:	b2db      	uxtb	r3, r3
 800eebe:	461a      	mov	r2, r3
 800eec0:	68fb      	ldr	r3, [r7, #12]
 800eec2:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* Send Slave Address and Memory Address */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800eec4:	88fb      	ldrh	r3, [r7, #6]
 800eec6:	b2da      	uxtb	r2, r3
 800eec8:	8979      	ldrh	r1, [r7, #10]
 800eeca:	4b0d      	ldr	r3, [pc, #52]	@ (800ef00 <HAL_I2C_Mem_Write_IT+0x110>)
 800eecc:	9300      	str	r3, [sp, #0]
 800eece:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800eed2:	68f8      	ldr	r0, [r7, #12]
 800eed4:	f001 ff70 	bl	8010db8 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800eed8:	68fb      	ldr	r3, [r7, #12]
 800eeda:	2200      	movs	r2, #0
 800eedc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 800eee0:	2101      	movs	r1, #1
 800eee2:	68f8      	ldr	r0, [r7, #12]
 800eee4:	f001 ff9a 	bl	8010e1c <I2C_Enable_IRQ>

    return HAL_OK;
 800eee8:	2300      	movs	r3, #0
 800eeea:	e000      	b.n	800eeee <HAL_I2C_Mem_Write_IT+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800eeec:	2302      	movs	r3, #2
  }
}
 800eeee:	4618      	mov	r0, r3
 800eef0:	3710      	adds	r7, #16
 800eef2:	46bd      	mov	sp, r7
 800eef4:	bd80      	pop	{r7, pc}
 800eef6:	bf00      	nop
 800eef8:	ffff0000 	.word	0xffff0000
 800eefc:	0800f101 	.word	0x0800f101
 800ef00:	80002000 	.word	0x80002000

0800ef04 <HAL_I2C_Mem_Read_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                      uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 800ef04:	b580      	push	{r7, lr}
 800ef06:	b086      	sub	sp, #24
 800ef08:	af02      	add	r7, sp, #8
 800ef0a:	60f8      	str	r0, [r7, #12]
 800ef0c:	4608      	mov	r0, r1
 800ef0e:	4611      	mov	r1, r2
 800ef10:	461a      	mov	r2, r3
 800ef12:	4603      	mov	r3, r0
 800ef14:	817b      	strh	r3, [r7, #10]
 800ef16:	460b      	mov	r3, r1
 800ef18:	813b      	strh	r3, [r7, #8]
 800ef1a:	4613      	mov	r3, r2
 800ef1c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ef1e:	68fb      	ldr	r3, [r7, #12]
 800ef20:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ef24:	b2db      	uxtb	r3, r3
 800ef26:	2b20      	cmp	r3, #32
 800ef28:	d166      	bne.n	800eff8 <HAL_I2C_Mem_Read_IT+0xf4>
  {
    if ((pData == NULL) || (Size == 0U))
 800ef2a:	69bb      	ldr	r3, [r7, #24]
 800ef2c:	2b00      	cmp	r3, #0
 800ef2e:	d002      	beq.n	800ef36 <HAL_I2C_Mem_Read_IT+0x32>
 800ef30:	8bbb      	ldrh	r3, [r7, #28]
 800ef32:	2b00      	cmp	r3, #0
 800ef34:	d105      	bne.n	800ef42 <HAL_I2C_Mem_Read_IT+0x3e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800ef36:	68fb      	ldr	r3, [r7, #12]
 800ef38:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ef3c:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800ef3e:	2301      	movs	r3, #1
 800ef40:	e05b      	b.n	800effa <HAL_I2C_Mem_Read_IT+0xf6>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800ef42:	68fb      	ldr	r3, [r7, #12]
 800ef44:	681b      	ldr	r3, [r3, #0]
 800ef46:	699b      	ldr	r3, [r3, #24]
 800ef48:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ef4c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ef50:	d101      	bne.n	800ef56 <HAL_I2C_Mem_Read_IT+0x52>
    {
      return HAL_BUSY;
 800ef52:	2302      	movs	r3, #2
 800ef54:	e051      	b.n	800effa <HAL_I2C_Mem_Read_IT+0xf6>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ef56:	68fb      	ldr	r3, [r7, #12]
 800ef58:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800ef5c:	2b01      	cmp	r3, #1
 800ef5e:	d101      	bne.n	800ef64 <HAL_I2C_Mem_Read_IT+0x60>
 800ef60:	2302      	movs	r3, #2
 800ef62:	e04a      	b.n	800effa <HAL_I2C_Mem_Read_IT+0xf6>
 800ef64:	68fb      	ldr	r3, [r7, #12]
 800ef66:	2201      	movs	r2, #1
 800ef68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800ef6c:	68fb      	ldr	r3, [r7, #12]
 800ef6e:	2222      	movs	r2, #34	@ 0x22
 800ef70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 800ef74:	68fb      	ldr	r3, [r7, #12]
 800ef76:	2240      	movs	r2, #64	@ 0x40
 800ef78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800ef7c:	68fb      	ldr	r3, [r7, #12]
 800ef7e:	2200      	movs	r2, #0
 800ef80:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800ef82:	68fb      	ldr	r3, [r7, #12]
 800ef84:	69ba      	ldr	r2, [r7, #24]
 800ef86:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800ef88:	68fb      	ldr	r3, [r7, #12]
 800ef8a:	8bba      	ldrh	r2, [r7, #28]
 800ef8c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800ef8e:	68fb      	ldr	r3, [r7, #12]
 800ef90:	4a1c      	ldr	r2, [pc, #112]	@ (800f004 <HAL_I2C_Mem_Read_IT+0x100>)
 800ef92:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_IT;
 800ef94:	68fb      	ldr	r3, [r7, #12]
 800ef96:	4a1c      	ldr	r2, [pc, #112]	@ (800f008 <HAL_I2C_Mem_Read_IT+0x104>)
 800ef98:	635a      	str	r2, [r3, #52]	@ 0x34
    hi2c->Devaddress  = DevAddress;
 800ef9a:	897a      	ldrh	r2, [r7, #10]
 800ef9c:	68fb      	ldr	r3, [r7, #12]
 800ef9e:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800efa0:	88fb      	ldrh	r3, [r7, #6]
 800efa2:	2b01      	cmp	r3, #1
 800efa4:	d109      	bne.n	800efba <HAL_I2C_Mem_Read_IT+0xb6>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800efa6:	893b      	ldrh	r3, [r7, #8]
 800efa8:	b2da      	uxtb	r2, r3
 800efaa:	68fb      	ldr	r3, [r7, #12]
 800efac:	681b      	ldr	r3, [r3, #0]
 800efae:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 800efb0:	68fb      	ldr	r3, [r7, #12]
 800efb2:	f04f 32ff 	mov.w	r2, #4294967295
 800efb6:	651a      	str	r2, [r3, #80]	@ 0x50
 800efb8:	e00b      	b.n	800efd2 <HAL_I2C_Mem_Read_IT+0xce>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800efba:	893b      	ldrh	r3, [r7, #8]
 800efbc:	0a1b      	lsrs	r3, r3, #8
 800efbe:	b29b      	uxth	r3, r3
 800efc0:	b2da      	uxtb	r2, r3
 800efc2:	68fb      	ldr	r3, [r7, #12]
 800efc4:	681b      	ldr	r3, [r3, #0]
 800efc6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 800efc8:	893b      	ldrh	r3, [r7, #8]
 800efca:	b2db      	uxtb	r3, r3
 800efcc:	461a      	mov	r2, r3
 800efce:	68fb      	ldr	r3, [r7, #12]
 800efd0:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* Send Slave Address and Memory Address */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800efd2:	88fb      	ldrh	r3, [r7, #6]
 800efd4:	b2da      	uxtb	r2, r3
 800efd6:	8979      	ldrh	r1, [r7, #10]
 800efd8:	4b0c      	ldr	r3, [pc, #48]	@ (800f00c <HAL_I2C_Mem_Read_IT+0x108>)
 800efda:	9300      	str	r3, [sp, #0]
 800efdc:	2300      	movs	r3, #0
 800efde:	68f8      	ldr	r0, [r7, #12]
 800efe0:	f001 feea 	bl	8010db8 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800efe4:	68fb      	ldr	r3, [r7, #12]
 800efe6:	2200      	movs	r2, #0
 800efe8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 800efec:	2101      	movs	r1, #1
 800efee:	68f8      	ldr	r0, [r7, #12]
 800eff0:	f001 ff14 	bl	8010e1c <I2C_Enable_IRQ>

    return HAL_OK;
 800eff4:	2300      	movs	r3, #0
 800eff6:	e000      	b.n	800effa <HAL_I2C_Mem_Read_IT+0xf6>
  }
  else
  {
    return HAL_BUSY;
 800eff8:	2302      	movs	r3, #2
  }
}
 800effa:	4618      	mov	r0, r3
 800effc:	3710      	adds	r7, #16
 800effe:	46bd      	mov	sp, r7
 800f000:	bd80      	pop	{r7, pc}
 800f002:	bf00      	nop
 800f004:	ffff0000 	.word	0xffff0000
 800f008:	0800f101 	.word	0x0800f101
 800f00c:	80002000 	.word	0x80002000

0800f010 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 800f010:	b580      	push	{r7, lr}
 800f012:	b084      	sub	sp, #16
 800f014:	af00      	add	r7, sp, #0
 800f016:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	681b      	ldr	r3, [r3, #0]
 800f01c:	699b      	ldr	r3, [r3, #24]
 800f01e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	681b      	ldr	r3, [r3, #0]
 800f024:	681b      	ldr	r3, [r3, #0]
 800f026:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f02c:	2b00      	cmp	r3, #0
 800f02e:	d005      	beq.n	800f03c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f034:	68ba      	ldr	r2, [r7, #8]
 800f036:	68f9      	ldr	r1, [r7, #12]
 800f038:	6878      	ldr	r0, [r7, #4]
 800f03a:	4798      	blx	r3
  }
}
 800f03c:	bf00      	nop
 800f03e:	3710      	adds	r7, #16
 800f040:	46bd      	mov	sp, r7
 800f042:	bd80      	pop	{r7, pc}

0800f044 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800f044:	b480      	push	{r7}
 800f046:	b083      	sub	sp, #12
 800f048:	af00      	add	r7, sp, #0
 800f04a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800f04c:	bf00      	nop
 800f04e:	370c      	adds	r7, #12
 800f050:	46bd      	mov	sp, r7
 800f052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f056:	4770      	bx	lr

0800f058 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800f058:	b480      	push	{r7}
 800f05a:	b083      	sub	sp, #12
 800f05c:	af00      	add	r7, sp, #0
 800f05e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800f060:	bf00      	nop
 800f062:	370c      	adds	r7, #12
 800f064:	46bd      	mov	sp, r7
 800f066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f06a:	4770      	bx	lr

0800f06c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800f06c:	b480      	push	{r7}
 800f06e:	b083      	sub	sp, #12
 800f070:	af00      	add	r7, sp, #0
 800f072:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800f074:	bf00      	nop
 800f076:	370c      	adds	r7, #12
 800f078:	46bd      	mov	sp, r7
 800f07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f07e:	4770      	bx	lr

0800f080 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800f080:	b480      	push	{r7}
 800f082:	b083      	sub	sp, #12
 800f084:	af00      	add	r7, sp, #0
 800f086:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800f088:	bf00      	nop
 800f08a:	370c      	adds	r7, #12
 800f08c:	46bd      	mov	sp, r7
 800f08e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f092:	4770      	bx	lr

0800f094 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800f094:	b480      	push	{r7}
 800f096:	b083      	sub	sp, #12
 800f098:	af00      	add	r7, sp, #0
 800f09a:	6078      	str	r0, [r7, #4]
 800f09c:	460b      	mov	r3, r1
 800f09e:	70fb      	strb	r3, [r7, #3]
 800f0a0:	4613      	mov	r3, r2
 800f0a2:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800f0a4:	bf00      	nop
 800f0a6:	370c      	adds	r7, #12
 800f0a8:	46bd      	mov	sp, r7
 800f0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0ae:	4770      	bx	lr

0800f0b0 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800f0b0:	b480      	push	{r7}
 800f0b2:	b083      	sub	sp, #12
 800f0b4:	af00      	add	r7, sp, #0
 800f0b6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800f0b8:	bf00      	nop
 800f0ba:	370c      	adds	r7, #12
 800f0bc:	46bd      	mov	sp, r7
 800f0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0c2:	4770      	bx	lr

0800f0c4 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800f0c4:	b480      	push	{r7}
 800f0c6:	b083      	sub	sp, #12
 800f0c8:	af00      	add	r7, sp, #0
 800f0ca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800f0cc:	bf00      	nop
 800f0ce:	370c      	adds	r7, #12
 800f0d0:	46bd      	mov	sp, r7
 800f0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0d6:	4770      	bx	lr

0800f0d8 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800f0d8:	b480      	push	{r7}
 800f0da:	b083      	sub	sp, #12
 800f0dc:	af00      	add	r7, sp, #0
 800f0de:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800f0e0:	bf00      	nop
 800f0e2:	370c      	adds	r7, #12
 800f0e4:	46bd      	mov	sp, r7
 800f0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0ea:	4770      	bx	lr

0800f0ec <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800f0ec:	b480      	push	{r7}
 800f0ee:	b083      	sub	sp, #12
 800f0f0:	af00      	add	r7, sp, #0
 800f0f2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800f0f4:	bf00      	nop
 800f0f6:	370c      	adds	r7, #12
 800f0f8:	46bd      	mov	sp, r7
 800f0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0fe:	4770      	bx	lr

0800f100 <I2C_Mem_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                        uint32_t ITSources)
{
 800f100:	b580      	push	{r7, lr}
 800f102:	b088      	sub	sp, #32
 800f104:	af02      	add	r7, sp, #8
 800f106:	60f8      	str	r0, [r7, #12]
 800f108:	60b9      	str	r1, [r7, #8]
 800f10a:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 800f10c:	4b8d      	ldr	r3, [pc, #564]	@ (800f344 <I2C_Mem_ISR_IT+0x244>)
 800f10e:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800f110:	68bb      	ldr	r3, [r7, #8]
 800f112:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800f114:	68fb      	ldr	r3, [r7, #12]
 800f116:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800f11a:	2b01      	cmp	r3, #1
 800f11c:	d101      	bne.n	800f122 <I2C_Mem_ISR_IT+0x22>
 800f11e:	2302      	movs	r3, #2
 800f120:	e10c      	b.n	800f33c <I2C_Mem_ISR_IT+0x23c>
 800f122:	68fb      	ldr	r3, [r7, #12]
 800f124:	2201      	movs	r2, #1
 800f126:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800f12a:	693b      	ldr	r3, [r7, #16]
 800f12c:	f003 0310 	and.w	r3, r3, #16
 800f130:	2b00      	cmp	r3, #0
 800f132:	d012      	beq.n	800f15a <I2C_Mem_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800f13a:	2b00      	cmp	r3, #0
 800f13c:	d00d      	beq.n	800f15a <I2C_Mem_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f13e:	68fb      	ldr	r3, [r7, #12]
 800f140:	681b      	ldr	r3, [r3, #0]
 800f142:	2210      	movs	r2, #16
 800f144:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800f146:	68fb      	ldr	r3, [r7, #12]
 800f148:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f14a:	f043 0204 	orr.w	r2, r3, #4
 800f14e:	68fb      	ldr	r3, [r7, #12]
 800f150:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800f152:	68f8      	ldr	r0, [r7, #12]
 800f154:	f001 fc2b 	bl	80109ae <I2C_Flush_TXDR>
 800f158:	e0dd      	b.n	800f316 <I2C_Mem_ISR_IT+0x216>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800f15a:	693b      	ldr	r3, [r7, #16]
 800f15c:	f003 0304 	and.w	r3, r3, #4
 800f160:	2b00      	cmp	r3, #0
 800f162:	d022      	beq.n	800f1aa <I2C_Mem_ISR_IT+0xaa>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800f16a:	2b00      	cmp	r3, #0
 800f16c:	d01d      	beq.n	800f1aa <I2C_Mem_ISR_IT+0xaa>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800f16e:	693b      	ldr	r3, [r7, #16]
 800f170:	f023 0304 	bic.w	r3, r3, #4
 800f174:	613b      	str	r3, [r7, #16]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800f176:	68fb      	ldr	r3, [r7, #12]
 800f178:	681b      	ldr	r3, [r3, #0]
 800f17a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f17c:	68fb      	ldr	r3, [r7, #12]
 800f17e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f180:	b2d2      	uxtb	r2, r2
 800f182:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800f184:	68fb      	ldr	r3, [r7, #12]
 800f186:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f188:	1c5a      	adds	r2, r3, #1
 800f18a:	68fb      	ldr	r3, [r7, #12]
 800f18c:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 800f18e:	68fb      	ldr	r3, [r7, #12]
 800f190:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f192:	3b01      	subs	r3, #1
 800f194:	b29a      	uxth	r2, r3
 800f196:	68fb      	ldr	r3, [r7, #12]
 800f198:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 800f19a:	68fb      	ldr	r3, [r7, #12]
 800f19c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f19e:	b29b      	uxth	r3, r3
 800f1a0:	3b01      	subs	r3, #1
 800f1a2:	b29a      	uxth	r2, r3
 800f1a4:	68fb      	ldr	r3, [r7, #12]
 800f1a6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800f1a8:	e0b5      	b.n	800f316 <I2C_Mem_ISR_IT+0x216>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800f1aa:	693b      	ldr	r3, [r7, #16]
 800f1ac:	f003 0302 	and.w	r3, r3, #2
 800f1b0:	2b00      	cmp	r3, #0
 800f1b2:	d02c      	beq.n	800f20e <I2C_Mem_ISR_IT+0x10e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800f1ba:	2b00      	cmp	r3, #0
 800f1bc:	d027      	beq.n	800f20e <I2C_Mem_ISR_IT+0x10e>
  {
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 800f1be:	68fb      	ldr	r3, [r7, #12]
 800f1c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f1c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f1c6:	d118      	bne.n	800f1fa <I2C_Mem_ISR_IT+0xfa>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800f1c8:	68fb      	ldr	r3, [r7, #12]
 800f1ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f1cc:	781a      	ldrb	r2, [r3, #0]
 800f1ce:	68fb      	ldr	r3, [r7, #12]
 800f1d0:	681b      	ldr	r3, [r3, #0]
 800f1d2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800f1d4:	68fb      	ldr	r3, [r7, #12]
 800f1d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f1d8:	1c5a      	adds	r2, r3, #1
 800f1da:	68fb      	ldr	r3, [r7, #12]
 800f1dc:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800f1de:	68fb      	ldr	r3, [r7, #12]
 800f1e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f1e2:	3b01      	subs	r3, #1
 800f1e4:	b29a      	uxth	r2, r3
 800f1e6:	68fb      	ldr	r3, [r7, #12]
 800f1e8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800f1ea:	68fb      	ldr	r3, [r7, #12]
 800f1ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f1ee:	b29b      	uxth	r3, r3
 800f1f0:	3b01      	subs	r3, #1
 800f1f2:	b29a      	uxth	r2, r3
 800f1f4:	68fb      	ldr	r3, [r7, #12]
 800f1f6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 800f1f8:	e08d      	b.n	800f316 <I2C_Mem_ISR_IT+0x216>
    }
    else
    {
      /* Write LSB part of Memory Address */
      hi2c->Instance->TXDR = hi2c->Memaddress;
 800f1fa:	68fb      	ldr	r3, [r7, #12]
 800f1fc:	681b      	ldr	r3, [r3, #0]
 800f1fe:	68fa      	ldr	r2, [r7, #12]
 800f200:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800f202:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 800f204:	68fb      	ldr	r3, [r7, #12]
 800f206:	f04f 32ff 	mov.w	r2, #4294967295
 800f20a:	651a      	str	r2, [r3, #80]	@ 0x50
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 800f20c:	e083      	b.n	800f316 <I2C_Mem_ISR_IT+0x216>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800f20e:	693b      	ldr	r3, [r7, #16]
 800f210:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f214:	2b00      	cmp	r3, #0
 800f216:	d03c      	beq.n	800f292 <I2C_Mem_ISR_IT+0x192>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800f21e:	2b00      	cmp	r3, #0
 800f220:	d037      	beq.n	800f292 <I2C_Mem_ISR_IT+0x192>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800f222:	68fb      	ldr	r3, [r7, #12]
 800f224:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f226:	b29b      	uxth	r3, r3
 800f228:	2b00      	cmp	r3, #0
 800f22a:	d02c      	beq.n	800f286 <I2C_Mem_ISR_IT+0x186>
 800f22c:	68fb      	ldr	r3, [r7, #12]
 800f22e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f230:	2b00      	cmp	r3, #0
 800f232:	d128      	bne.n	800f286 <I2C_Mem_ISR_IT+0x186>
    {
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800f234:	68fb      	ldr	r3, [r7, #12]
 800f236:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f238:	b29b      	uxth	r3, r3
 800f23a:	2bff      	cmp	r3, #255	@ 0xff
 800f23c:	d910      	bls.n	800f260 <I2C_Mem_ISR_IT+0x160>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800f23e:	68fb      	ldr	r3, [r7, #12]
 800f240:	22ff      	movs	r2, #255	@ 0xff
 800f242:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800f244:	68fb      	ldr	r3, [r7, #12]
 800f246:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f248:	b299      	uxth	r1, r3
 800f24a:	68fb      	ldr	r3, [r7, #12]
 800f24c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f24e:	b2da      	uxtb	r2, r3
 800f250:	2300      	movs	r3, #0
 800f252:	9300      	str	r3, [sp, #0]
 800f254:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800f258:	68f8      	ldr	r0, [r7, #12]
 800f25a:	f001 fdad 	bl	8010db8 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800f25e:	e017      	b.n	800f290 <I2C_Mem_ISR_IT+0x190>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800f260:	68fb      	ldr	r3, [r7, #12]
 800f262:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f264:	b29a      	uxth	r2, r3
 800f266:	68fb      	ldr	r3, [r7, #12]
 800f268:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800f26a:	68fb      	ldr	r3, [r7, #12]
 800f26c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f26e:	b299      	uxth	r1, r3
 800f270:	68fb      	ldr	r3, [r7, #12]
 800f272:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f274:	b2da      	uxtb	r2, r3
 800f276:	2300      	movs	r3, #0
 800f278:	9300      	str	r3, [sp, #0]
 800f27a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800f27e:	68f8      	ldr	r0, [r7, #12]
 800f280:	f001 fd9a 	bl	8010db8 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800f284:	e004      	b.n	800f290 <I2C_Mem_ISR_IT+0x190>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800f286:	2140      	movs	r1, #64	@ 0x40
 800f288:	68f8      	ldr	r0, [r7, #12]
 800f28a:	f001 fa79 	bl	8010780 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800f28e:	e042      	b.n	800f316 <I2C_Mem_ISR_IT+0x216>
 800f290:	e041      	b.n	800f316 <I2C_Mem_ISR_IT+0x216>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800f292:	693b      	ldr	r3, [r7, #16]
 800f294:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f298:	2b00      	cmp	r3, #0
 800f29a:	d03c      	beq.n	800f316 <I2C_Mem_ISR_IT+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800f2a2:	2b00      	cmp	r3, #0
 800f2a4:	d037      	beq.n	800f316 <I2C_Mem_ISR_IT+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800f2a6:	2101      	movs	r1, #1
 800f2a8:	68f8      	ldr	r0, [r7, #12]
 800f2aa:	f001 fe3b 	bl	8010f24 <I2C_Disable_IRQ>

    /* Enable ERR, TC, STOP, NACK and RXI interrupts */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 800f2ae:	2102      	movs	r1, #2
 800f2b0:	68f8      	ldr	r0, [r7, #12]
 800f2b2:	f001 fdb3 	bl	8010e1c <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800f2b6:	68fb      	ldr	r3, [r7, #12]
 800f2b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f2bc:	b2db      	uxtb	r3, r3
 800f2be:	2b22      	cmp	r3, #34	@ 0x22
 800f2c0:	d101      	bne.n	800f2c6 <I2C_Mem_ISR_IT+0x1c6>
    {
      direction = I2C_GENERATE_START_READ;
 800f2c2:	4b21      	ldr	r3, [pc, #132]	@ (800f348 <I2C_Mem_ISR_IT+0x248>)
 800f2c4:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800f2c6:	68fb      	ldr	r3, [r7, #12]
 800f2c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f2ca:	b29b      	uxth	r3, r3
 800f2cc:	2bff      	cmp	r3, #255	@ 0xff
 800f2ce:	d910      	bls.n	800f2f2 <I2C_Mem_ISR_IT+0x1f2>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800f2d0:	68fb      	ldr	r3, [r7, #12]
 800f2d2:	22ff      	movs	r2, #255	@ 0xff
 800f2d4:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800f2d6:	68fb      	ldr	r3, [r7, #12]
 800f2d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f2da:	b299      	uxth	r1, r3
 800f2dc:	68fb      	ldr	r3, [r7, #12]
 800f2de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f2e0:	b2da      	uxtb	r2, r3
 800f2e2:	697b      	ldr	r3, [r7, #20]
 800f2e4:	9300      	str	r3, [sp, #0]
 800f2e6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800f2ea:	68f8      	ldr	r0, [r7, #12]
 800f2ec:	f001 fd64 	bl	8010db8 <I2C_TransferConfig>
 800f2f0:	e011      	b.n	800f316 <I2C_Mem_ISR_IT+0x216>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800f2f2:	68fb      	ldr	r3, [r7, #12]
 800f2f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f2f6:	b29a      	uxth	r2, r3
 800f2f8:	68fb      	ldr	r3, [r7, #12]
 800f2fa:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800f2fc:	68fb      	ldr	r3, [r7, #12]
 800f2fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f300:	b299      	uxth	r1, r3
 800f302:	68fb      	ldr	r3, [r7, #12]
 800f304:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f306:	b2da      	uxtb	r2, r3
 800f308:	697b      	ldr	r3, [r7, #20]
 800f30a:	9300      	str	r3, [sp, #0]
 800f30c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800f310:	68f8      	ldr	r0, [r7, #12]
 800f312:	f001 fd51 	bl	8010db8 <I2C_TransferConfig>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800f316:	693b      	ldr	r3, [r7, #16]
 800f318:	f003 0320 	and.w	r3, r3, #32
 800f31c:	2b00      	cmp	r3, #0
 800f31e:	d008      	beq.n	800f332 <I2C_Mem_ISR_IT+0x232>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800f326:	2b00      	cmp	r3, #0
 800f328:	d003      	beq.n	800f332 <I2C_Mem_ISR_IT+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 800f32a:	6939      	ldr	r1, [r7, #16]
 800f32c:	68f8      	ldr	r0, [r7, #12]
 800f32e:	f000 feb7 	bl	80100a0 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800f332:	68fb      	ldr	r3, [r7, #12]
 800f334:	2200      	movs	r2, #0
 800f336:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800f33a:	2300      	movs	r3, #0
}
 800f33c:	4618      	mov	r0, r3
 800f33e:	3718      	adds	r7, #24
 800f340:	46bd      	mov	sp, r7
 800f342:	bd80      	pop	{r7, pc}
 800f344:	80002000 	.word	0x80002000
 800f348:	80002400 	.word	0x80002400

0800f34c <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800f34c:	b580      	push	{r7, lr}
 800f34e:	b086      	sub	sp, #24
 800f350:	af00      	add	r7, sp, #0
 800f352:	60f8      	str	r0, [r7, #12]
 800f354:	60b9      	str	r1, [r7, #8]
 800f356:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800f358:	68fb      	ldr	r3, [r7, #12]
 800f35a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f35c:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800f35e:	68bb      	ldr	r3, [r7, #8]
 800f360:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800f362:	68fb      	ldr	r3, [r7, #12]
 800f364:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800f368:	2b01      	cmp	r3, #1
 800f36a:	d101      	bne.n	800f370 <I2C_Slave_ISR_IT+0x24>
 800f36c:	2302      	movs	r3, #2
 800f36e:	e0e2      	b.n	800f536 <I2C_Slave_ISR_IT+0x1ea>
 800f370:	68fb      	ldr	r3, [r7, #12]
 800f372:	2201      	movs	r2, #1
 800f374:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800f378:	693b      	ldr	r3, [r7, #16]
 800f37a:	f003 0320 	and.w	r3, r3, #32
 800f37e:	2b00      	cmp	r3, #0
 800f380:	d009      	beq.n	800f396 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800f388:	2b00      	cmp	r3, #0
 800f38a:	d004      	beq.n	800f396 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800f38c:	6939      	ldr	r1, [r7, #16]
 800f38e:	68f8      	ldr	r0, [r7, #12]
 800f390:	f000 ff4e 	bl	8010230 <I2C_ITSlaveCplt>
 800f394:	e0ca      	b.n	800f52c <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800f396:	693b      	ldr	r3, [r7, #16]
 800f398:	f003 0310 	and.w	r3, r3, #16
 800f39c:	2b00      	cmp	r3, #0
 800f39e:	d04b      	beq.n	800f438 <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800f3a6:	2b00      	cmp	r3, #0
 800f3a8:	d046      	beq.n	800f438 <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800f3aa:	68fb      	ldr	r3, [r7, #12]
 800f3ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f3ae:	b29b      	uxth	r3, r3
 800f3b0:	2b00      	cmp	r3, #0
 800f3b2:	d128      	bne.n	800f406 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800f3b4:	68fb      	ldr	r3, [r7, #12]
 800f3b6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f3ba:	b2db      	uxtb	r3, r3
 800f3bc:	2b28      	cmp	r3, #40	@ 0x28
 800f3be:	d108      	bne.n	800f3d2 <I2C_Slave_ISR_IT+0x86>
 800f3c0:	697b      	ldr	r3, [r7, #20]
 800f3c2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800f3c6:	d104      	bne.n	800f3d2 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800f3c8:	6939      	ldr	r1, [r7, #16]
 800f3ca:	68f8      	ldr	r0, [r7, #12]
 800f3cc:	f001 f984 	bl	80106d8 <I2C_ITListenCplt>
 800f3d0:	e031      	b.n	800f436 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800f3d2:	68fb      	ldr	r3, [r7, #12]
 800f3d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f3d8:	b2db      	uxtb	r3, r3
 800f3da:	2b29      	cmp	r3, #41	@ 0x29
 800f3dc:	d10e      	bne.n	800f3fc <I2C_Slave_ISR_IT+0xb0>
 800f3de:	697b      	ldr	r3, [r7, #20]
 800f3e0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800f3e4:	d00a      	beq.n	800f3fc <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f3e6:	68fb      	ldr	r3, [r7, #12]
 800f3e8:	681b      	ldr	r3, [r3, #0]
 800f3ea:	2210      	movs	r2, #16
 800f3ec:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800f3ee:	68f8      	ldr	r0, [r7, #12]
 800f3f0:	f001 fadd 	bl	80109ae <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800f3f4:	68f8      	ldr	r0, [r7, #12]
 800f3f6:	f000 fdf6 	bl	800ffe6 <I2C_ITSlaveSeqCplt>
 800f3fa:	e01c      	b.n	800f436 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f3fc:	68fb      	ldr	r3, [r7, #12]
 800f3fe:	681b      	ldr	r3, [r3, #0]
 800f400:	2210      	movs	r2, #16
 800f402:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800f404:	e08f      	b.n	800f526 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f406:	68fb      	ldr	r3, [r7, #12]
 800f408:	681b      	ldr	r3, [r3, #0]
 800f40a:	2210      	movs	r2, #16
 800f40c:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800f40e:	68fb      	ldr	r3, [r7, #12]
 800f410:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f412:	f043 0204 	orr.w	r2, r3, #4
 800f416:	68fb      	ldr	r3, [r7, #12]
 800f418:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800f41a:	697b      	ldr	r3, [r7, #20]
 800f41c:	2b00      	cmp	r3, #0
 800f41e:	d003      	beq.n	800f428 <I2C_Slave_ISR_IT+0xdc>
 800f420:	697b      	ldr	r3, [r7, #20]
 800f422:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800f426:	d17e      	bne.n	800f526 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800f428:	68fb      	ldr	r3, [r7, #12]
 800f42a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f42c:	4619      	mov	r1, r3
 800f42e:	68f8      	ldr	r0, [r7, #12]
 800f430:	f001 f9a6 	bl	8010780 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800f434:	e077      	b.n	800f526 <I2C_Slave_ISR_IT+0x1da>
 800f436:	e076      	b.n	800f526 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800f438:	693b      	ldr	r3, [r7, #16]
 800f43a:	f003 0304 	and.w	r3, r3, #4
 800f43e:	2b00      	cmp	r3, #0
 800f440:	d02f      	beq.n	800f4a2 <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800f442:	687b      	ldr	r3, [r7, #4]
 800f444:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800f448:	2b00      	cmp	r3, #0
 800f44a:	d02a      	beq.n	800f4a2 <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 800f44c:	68fb      	ldr	r3, [r7, #12]
 800f44e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f450:	b29b      	uxth	r3, r3
 800f452:	2b00      	cmp	r3, #0
 800f454:	d018      	beq.n	800f488 <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800f456:	68fb      	ldr	r3, [r7, #12]
 800f458:	681b      	ldr	r3, [r3, #0]
 800f45a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f45c:	68fb      	ldr	r3, [r7, #12]
 800f45e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f460:	b2d2      	uxtb	r2, r2
 800f462:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800f464:	68fb      	ldr	r3, [r7, #12]
 800f466:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f468:	1c5a      	adds	r2, r3, #1
 800f46a:	68fb      	ldr	r3, [r7, #12]
 800f46c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800f46e:	68fb      	ldr	r3, [r7, #12]
 800f470:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f472:	3b01      	subs	r3, #1
 800f474:	b29a      	uxth	r2, r3
 800f476:	68fb      	ldr	r3, [r7, #12]
 800f478:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800f47a:	68fb      	ldr	r3, [r7, #12]
 800f47c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f47e:	b29b      	uxth	r3, r3
 800f480:	3b01      	subs	r3, #1
 800f482:	b29a      	uxth	r2, r3
 800f484:	68fb      	ldr	r3, [r7, #12]
 800f486:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800f488:	68fb      	ldr	r3, [r7, #12]
 800f48a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f48c:	b29b      	uxth	r3, r3
 800f48e:	2b00      	cmp	r3, #0
 800f490:	d14b      	bne.n	800f52a <I2C_Slave_ISR_IT+0x1de>
 800f492:	697b      	ldr	r3, [r7, #20]
 800f494:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800f498:	d047      	beq.n	800f52a <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800f49a:	68f8      	ldr	r0, [r7, #12]
 800f49c:	f000 fda3 	bl	800ffe6 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800f4a0:	e043      	b.n	800f52a <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800f4a2:	693b      	ldr	r3, [r7, #16]
 800f4a4:	f003 0308 	and.w	r3, r3, #8
 800f4a8:	2b00      	cmp	r3, #0
 800f4aa:	d009      	beq.n	800f4c0 <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800f4ac:	687b      	ldr	r3, [r7, #4]
 800f4ae:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800f4b2:	2b00      	cmp	r3, #0
 800f4b4:	d004      	beq.n	800f4c0 <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800f4b6:	6939      	ldr	r1, [r7, #16]
 800f4b8:	68f8      	ldr	r0, [r7, #12]
 800f4ba:	f000 fcd3 	bl	800fe64 <I2C_ITAddrCplt>
 800f4be:	e035      	b.n	800f52c <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800f4c0:	693b      	ldr	r3, [r7, #16]
 800f4c2:	f003 0302 	and.w	r3, r3, #2
 800f4c6:	2b00      	cmp	r3, #0
 800f4c8:	d030      	beq.n	800f52c <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800f4d0:	2b00      	cmp	r3, #0
 800f4d2:	d02b      	beq.n	800f52c <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800f4d4:	68fb      	ldr	r3, [r7, #12]
 800f4d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f4d8:	b29b      	uxth	r3, r3
 800f4da:	2b00      	cmp	r3, #0
 800f4dc:	d018      	beq.n	800f510 <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800f4de:	68fb      	ldr	r3, [r7, #12]
 800f4e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f4e2:	781a      	ldrb	r2, [r3, #0]
 800f4e4:	68fb      	ldr	r3, [r7, #12]
 800f4e6:	681b      	ldr	r3, [r3, #0]
 800f4e8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800f4ea:	68fb      	ldr	r3, [r7, #12]
 800f4ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f4ee:	1c5a      	adds	r2, r3, #1
 800f4f0:	68fb      	ldr	r3, [r7, #12]
 800f4f2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800f4f4:	68fb      	ldr	r3, [r7, #12]
 800f4f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f4f8:	b29b      	uxth	r3, r3
 800f4fa:	3b01      	subs	r3, #1
 800f4fc:	b29a      	uxth	r2, r3
 800f4fe:	68fb      	ldr	r3, [r7, #12]
 800f500:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800f502:	68fb      	ldr	r3, [r7, #12]
 800f504:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f506:	3b01      	subs	r3, #1
 800f508:	b29a      	uxth	r2, r3
 800f50a:	68fb      	ldr	r3, [r7, #12]
 800f50c:	851a      	strh	r2, [r3, #40]	@ 0x28
 800f50e:	e00d      	b.n	800f52c <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800f510:	697b      	ldr	r3, [r7, #20]
 800f512:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800f516:	d002      	beq.n	800f51e <I2C_Slave_ISR_IT+0x1d2>
 800f518:	697b      	ldr	r3, [r7, #20]
 800f51a:	2b00      	cmp	r3, #0
 800f51c:	d106      	bne.n	800f52c <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800f51e:	68f8      	ldr	r0, [r7, #12]
 800f520:	f000 fd61 	bl	800ffe6 <I2C_ITSlaveSeqCplt>
 800f524:	e002      	b.n	800f52c <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 800f526:	bf00      	nop
 800f528:	e000      	b.n	800f52c <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 800f52a:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800f52c:	68fb      	ldr	r3, [r7, #12]
 800f52e:	2200      	movs	r2, #0
 800f530:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800f534:	2300      	movs	r3, #0
}
 800f536:	4618      	mov	r0, r3
 800f538:	3718      	adds	r7, #24
 800f53a:	46bd      	mov	sp, r7
 800f53c:	bd80      	pop	{r7, pc}

0800f53e <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 800f53e:	b580      	push	{r7, lr}
 800f540:	b088      	sub	sp, #32
 800f542:	af02      	add	r7, sp, #8
 800f544:	60f8      	str	r0, [r7, #12]
 800f546:	60b9      	str	r1, [r7, #8]
 800f548:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800f54a:	68fb      	ldr	r3, [r7, #12]
 800f54c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800f550:	2b01      	cmp	r3, #1
 800f552:	d101      	bne.n	800f558 <I2C_Master_ISR_DMA+0x1a>
 800f554:	2302      	movs	r3, #2
 800f556:	e0d9      	b.n	800f70c <I2C_Master_ISR_DMA+0x1ce>
 800f558:	68fb      	ldr	r3, [r7, #12]
 800f55a:	2201      	movs	r2, #1
 800f55c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800f560:	68bb      	ldr	r3, [r7, #8]
 800f562:	f003 0310 	and.w	r3, r3, #16
 800f566:	2b00      	cmp	r3, #0
 800f568:	d016      	beq.n	800f598 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800f56a:	687b      	ldr	r3, [r7, #4]
 800f56c:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800f570:	2b00      	cmp	r3, #0
 800f572:	d011      	beq.n	800f598 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f574:	68fb      	ldr	r3, [r7, #12]
 800f576:	681b      	ldr	r3, [r3, #0]
 800f578:	2210      	movs	r2, #16
 800f57a:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800f57c:	68fb      	ldr	r3, [r7, #12]
 800f57e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f580:	f043 0204 	orr.w	r2, r3, #4
 800f584:	68fb      	ldr	r3, [r7, #12]
 800f586:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800f588:	2120      	movs	r1, #32
 800f58a:	68f8      	ldr	r0, [r7, #12]
 800f58c:	f001 fc46 	bl	8010e1c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800f590:	68f8      	ldr	r0, [r7, #12]
 800f592:	f001 fa0c 	bl	80109ae <I2C_Flush_TXDR>
 800f596:	e0b4      	b.n	800f702 <I2C_Master_ISR_DMA+0x1c4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800f598:	68bb      	ldr	r3, [r7, #8]
 800f59a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f59e:	2b00      	cmp	r3, #0
 800f5a0:	d071      	beq.n	800f686 <I2C_Master_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800f5a2:	687b      	ldr	r3, [r7, #4]
 800f5a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800f5a8:	2b00      	cmp	r3, #0
 800f5aa:	d06c      	beq.n	800f686 <I2C_Master_ISR_DMA+0x148>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 800f5ac:	68fb      	ldr	r3, [r7, #12]
 800f5ae:	681b      	ldr	r3, [r3, #0]
 800f5b0:	681a      	ldr	r2, [r3, #0]
 800f5b2:	68fb      	ldr	r3, [r7, #12]
 800f5b4:	681b      	ldr	r3, [r3, #0]
 800f5b6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800f5ba:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 800f5bc:	68fb      	ldr	r3, [r7, #12]
 800f5be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f5c0:	b29b      	uxth	r3, r3
 800f5c2:	2b00      	cmp	r3, #0
 800f5c4:	d04e      	beq.n	800f664 <I2C_Master_ISR_DMA+0x126>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800f5c6:	68fb      	ldr	r3, [r7, #12]
 800f5c8:	681b      	ldr	r3, [r3, #0]
 800f5ca:	685b      	ldr	r3, [r3, #4]
 800f5cc:	b29b      	uxth	r3, r3
 800f5ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f5d2:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800f5d4:	68fb      	ldr	r3, [r7, #12]
 800f5d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f5d8:	b29b      	uxth	r3, r3
 800f5da:	2bff      	cmp	r3, #255	@ 0xff
 800f5dc:	d906      	bls.n	800f5ec <I2C_Master_ISR_DMA+0xae>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800f5de:	68fb      	ldr	r3, [r7, #12]
 800f5e0:	22ff      	movs	r2, #255	@ 0xff
 800f5e2:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 800f5e4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800f5e8:	617b      	str	r3, [r7, #20]
 800f5ea:	e010      	b.n	800f60e <I2C_Master_ISR_DMA+0xd0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800f5ec:	68fb      	ldr	r3, [r7, #12]
 800f5ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f5f0:	b29a      	uxth	r2, r3
 800f5f2:	68fb      	ldr	r3, [r7, #12]
 800f5f4:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800f5f6:	68fb      	ldr	r3, [r7, #12]
 800f5f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f5fa:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800f5fe:	d003      	beq.n	800f608 <I2C_Master_ISR_DMA+0xca>
        {
          xfermode = hi2c->XferOptions;
 800f600:	68fb      	ldr	r3, [r7, #12]
 800f602:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f604:	617b      	str	r3, [r7, #20]
 800f606:	e002      	b.n	800f60e <I2C_Master_ISR_DMA+0xd0>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 800f608:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800f60c:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 800f60e:	68fb      	ldr	r3, [r7, #12]
 800f610:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f612:	b2da      	uxtb	r2, r3
 800f614:	8a79      	ldrh	r1, [r7, #18]
 800f616:	2300      	movs	r3, #0
 800f618:	9300      	str	r3, [sp, #0]
 800f61a:	697b      	ldr	r3, [r7, #20]
 800f61c:	68f8      	ldr	r0, [r7, #12]
 800f61e:	f001 fbcb 	bl	8010db8 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800f622:	68fb      	ldr	r3, [r7, #12]
 800f624:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f626:	b29a      	uxth	r2, r3
 800f628:	68fb      	ldr	r3, [r7, #12]
 800f62a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f62c:	1ad3      	subs	r3, r2, r3
 800f62e:	b29a      	uxth	r2, r3
 800f630:	68fb      	ldr	r3, [r7, #12]
 800f632:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800f634:	68fb      	ldr	r3, [r7, #12]
 800f636:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f63a:	b2db      	uxtb	r3, r3
 800f63c:	2b22      	cmp	r3, #34	@ 0x22
 800f63e:	d108      	bne.n	800f652 <I2C_Master_ISR_DMA+0x114>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800f640:	68fb      	ldr	r3, [r7, #12]
 800f642:	681b      	ldr	r3, [r3, #0]
 800f644:	681a      	ldr	r2, [r3, #0]
 800f646:	68fb      	ldr	r3, [r7, #12]
 800f648:	681b      	ldr	r3, [r3, #0]
 800f64a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800f64e:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800f650:	e057      	b.n	800f702 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800f652:	68fb      	ldr	r3, [r7, #12]
 800f654:	681b      	ldr	r3, [r3, #0]
 800f656:	681a      	ldr	r2, [r3, #0]
 800f658:	68fb      	ldr	r3, [r7, #12]
 800f65a:	681b      	ldr	r3, [r3, #0]
 800f65c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800f660:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800f662:	e04e      	b.n	800f702 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800f664:	68fb      	ldr	r3, [r7, #12]
 800f666:	681b      	ldr	r3, [r3, #0]
 800f668:	685b      	ldr	r3, [r3, #4]
 800f66a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f66e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800f672:	d003      	beq.n	800f67c <I2C_Master_ISR_DMA+0x13e>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800f674:	68f8      	ldr	r0, [r7, #12]
 800f676:	f000 fc79 	bl	800ff6c <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 800f67a:	e042      	b.n	800f702 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800f67c:	2140      	movs	r1, #64	@ 0x40
 800f67e:	68f8      	ldr	r0, [r7, #12]
 800f680:	f001 f87e 	bl	8010780 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800f684:	e03d      	b.n	800f702 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800f686:	68bb      	ldr	r3, [r7, #8]
 800f688:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f68c:	2b00      	cmp	r3, #0
 800f68e:	d028      	beq.n	800f6e2 <I2C_Master_ISR_DMA+0x1a4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800f696:	2b00      	cmp	r3, #0
 800f698:	d023      	beq.n	800f6e2 <I2C_Master_ISR_DMA+0x1a4>
  {
    if (hi2c->XferCount == 0U)
 800f69a:	68fb      	ldr	r3, [r7, #12]
 800f69c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f69e:	b29b      	uxth	r3, r3
 800f6a0:	2b00      	cmp	r3, #0
 800f6a2:	d119      	bne.n	800f6d8 <I2C_Master_ISR_DMA+0x19a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800f6a4:	68fb      	ldr	r3, [r7, #12]
 800f6a6:	681b      	ldr	r3, [r3, #0]
 800f6a8:	685b      	ldr	r3, [r3, #4]
 800f6aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f6ae:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800f6b2:	d025      	beq.n	800f700 <I2C_Master_ISR_DMA+0x1c2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800f6b4:	68fb      	ldr	r3, [r7, #12]
 800f6b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f6b8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800f6bc:	d108      	bne.n	800f6d0 <I2C_Master_ISR_DMA+0x192>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800f6be:	68fb      	ldr	r3, [r7, #12]
 800f6c0:	681b      	ldr	r3, [r3, #0]
 800f6c2:	685a      	ldr	r2, [r3, #4]
 800f6c4:	68fb      	ldr	r3, [r7, #12]
 800f6c6:	681b      	ldr	r3, [r3, #0]
 800f6c8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800f6cc:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 800f6ce:	e017      	b.n	800f700 <I2C_Master_ISR_DMA+0x1c2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800f6d0:	68f8      	ldr	r0, [r7, #12]
 800f6d2:	f000 fc4b 	bl	800ff6c <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 800f6d6:	e013      	b.n	800f700 <I2C_Master_ISR_DMA+0x1c2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800f6d8:	2140      	movs	r1, #64	@ 0x40
 800f6da:	68f8      	ldr	r0, [r7, #12]
 800f6dc:	f001 f850 	bl	8010780 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800f6e0:	e00e      	b.n	800f700 <I2C_Master_ISR_DMA+0x1c2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800f6e2:	68bb      	ldr	r3, [r7, #8]
 800f6e4:	f003 0320 	and.w	r3, r3, #32
 800f6e8:	2b00      	cmp	r3, #0
 800f6ea:	d00a      	beq.n	800f702 <I2C_Master_ISR_DMA+0x1c4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800f6f2:	2b00      	cmp	r3, #0
 800f6f4:	d005      	beq.n	800f702 <I2C_Master_ISR_DMA+0x1c4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800f6f6:	68b9      	ldr	r1, [r7, #8]
 800f6f8:	68f8      	ldr	r0, [r7, #12]
 800f6fa:	f000 fcd1 	bl	80100a0 <I2C_ITMasterCplt>
 800f6fe:	e000      	b.n	800f702 <I2C_Master_ISR_DMA+0x1c4>
    if (hi2c->XferCount == 0U)
 800f700:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800f702:	68fb      	ldr	r3, [r7, #12]
 800f704:	2200      	movs	r2, #0
 800f706:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800f70a:	2300      	movs	r3, #0
}
 800f70c:	4618      	mov	r0, r3
 800f70e:	3718      	adds	r7, #24
 800f710:	46bd      	mov	sp, r7
 800f712:	bd80      	pop	{r7, pc}

0800f714 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 800f714:	b580      	push	{r7, lr}
 800f716:	b088      	sub	sp, #32
 800f718:	af02      	add	r7, sp, #8
 800f71a:	60f8      	str	r0, [r7, #12]
 800f71c:	60b9      	str	r1, [r7, #8]
 800f71e:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 800f720:	4b8d      	ldr	r3, [pc, #564]	@ (800f958 <I2C_Mem_ISR_DMA+0x244>)
 800f722:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800f724:	68fb      	ldr	r3, [r7, #12]
 800f726:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800f72a:	2b01      	cmp	r3, #1
 800f72c:	d101      	bne.n	800f732 <I2C_Mem_ISR_DMA+0x1e>
 800f72e:	2302      	movs	r3, #2
 800f730:	e10e      	b.n	800f950 <I2C_Mem_ISR_DMA+0x23c>
 800f732:	68fb      	ldr	r3, [r7, #12]
 800f734:	2201      	movs	r2, #1
 800f736:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800f73a:	68bb      	ldr	r3, [r7, #8]
 800f73c:	f003 0310 	and.w	r3, r3, #16
 800f740:	2b00      	cmp	r3, #0
 800f742:	d016      	beq.n	800f772 <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800f74a:	2b00      	cmp	r3, #0
 800f74c:	d011      	beq.n	800f772 <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f74e:	68fb      	ldr	r3, [r7, #12]
 800f750:	681b      	ldr	r3, [r3, #0]
 800f752:	2210      	movs	r2, #16
 800f754:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800f756:	68fb      	ldr	r3, [r7, #12]
 800f758:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f75a:	f043 0204 	orr.w	r2, r3, #4
 800f75e:	68fb      	ldr	r3, [r7, #12]
 800f760:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800f762:	2120      	movs	r1, #32
 800f764:	68f8      	ldr	r0, [r7, #12]
 800f766:	f001 fb59 	bl	8010e1c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800f76a:	68f8      	ldr	r0, [r7, #12]
 800f76c:	f001 f91f 	bl	80109ae <I2C_Flush_TXDR>
 800f770:	e0e9      	b.n	800f946 <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800f772:	68bb      	ldr	r3, [r7, #8]
 800f774:	f003 0302 	and.w	r3, r3, #2
 800f778:	2b00      	cmp	r3, #0
 800f77a:	d00e      	beq.n	800f79a <I2C_Mem_ISR_DMA+0x86>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800f782:	2b00      	cmp	r3, #0
 800f784:	d009      	beq.n	800f79a <I2C_Mem_ISR_DMA+0x86>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 800f786:	68fb      	ldr	r3, [r7, #12]
 800f788:	681b      	ldr	r3, [r3, #0]
 800f78a:	68fa      	ldr	r2, [r7, #12]
 800f78c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800f78e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 800f790:	68fb      	ldr	r3, [r7, #12]
 800f792:	f04f 32ff 	mov.w	r2, #4294967295
 800f796:	651a      	str	r2, [r3, #80]	@ 0x50
 800f798:	e0d5      	b.n	800f946 <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800f79a:	68bb      	ldr	r3, [r7, #8]
 800f79c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f7a0:	2b00      	cmp	r3, #0
 800f7a2:	d05f      	beq.n	800f864 <I2C_Mem_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800f7aa:	2b00      	cmp	r3, #0
 800f7ac:	d05a      	beq.n	800f864 <I2C_Mem_ISR_DMA+0x150>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800f7ae:	2101      	movs	r1, #1
 800f7b0:	68f8      	ldr	r0, [r7, #12]
 800f7b2:	f001 fbb7 	bl	8010f24 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800f7b6:	2110      	movs	r1, #16
 800f7b8:	68f8      	ldr	r0, [r7, #12]
 800f7ba:	f001 fb2f 	bl	8010e1c <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 800f7be:	68fb      	ldr	r3, [r7, #12]
 800f7c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f7c2:	b29b      	uxth	r3, r3
 800f7c4:	2b00      	cmp	r3, #0
 800f7c6:	d048      	beq.n	800f85a <I2C_Mem_ISR_DMA+0x146>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800f7c8:	68fb      	ldr	r3, [r7, #12]
 800f7ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f7cc:	b29b      	uxth	r3, r3
 800f7ce:	2bff      	cmp	r3, #255	@ 0xff
 800f7d0:	d910      	bls.n	800f7f4 <I2C_Mem_ISR_DMA+0xe0>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800f7d2:	68fb      	ldr	r3, [r7, #12]
 800f7d4:	22ff      	movs	r2, #255	@ 0xff
 800f7d6:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800f7d8:	68fb      	ldr	r3, [r7, #12]
 800f7da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f7dc:	b299      	uxth	r1, r3
 800f7de:	68fb      	ldr	r3, [r7, #12]
 800f7e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f7e2:	b2da      	uxtb	r2, r3
 800f7e4:	2300      	movs	r3, #0
 800f7e6:	9300      	str	r3, [sp, #0]
 800f7e8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800f7ec:	68f8      	ldr	r0, [r7, #12]
 800f7ee:	f001 fae3 	bl	8010db8 <I2C_TransferConfig>
 800f7f2:	e011      	b.n	800f818 <I2C_Mem_ISR_DMA+0x104>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800f7f4:	68fb      	ldr	r3, [r7, #12]
 800f7f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f7f8:	b29a      	uxth	r2, r3
 800f7fa:	68fb      	ldr	r3, [r7, #12]
 800f7fc:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800f7fe:	68fb      	ldr	r3, [r7, #12]
 800f800:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f802:	b299      	uxth	r1, r3
 800f804:	68fb      	ldr	r3, [r7, #12]
 800f806:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f808:	b2da      	uxtb	r2, r3
 800f80a:	2300      	movs	r3, #0
 800f80c:	9300      	str	r3, [sp, #0]
 800f80e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800f812:	68f8      	ldr	r0, [r7, #12]
 800f814:	f001 fad0 	bl	8010db8 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800f818:	68fb      	ldr	r3, [r7, #12]
 800f81a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f81c:	b29a      	uxth	r2, r3
 800f81e:	68fb      	ldr	r3, [r7, #12]
 800f820:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f822:	1ad3      	subs	r3, r2, r3
 800f824:	b29a      	uxth	r2, r3
 800f826:	68fb      	ldr	r3, [r7, #12]
 800f828:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800f82a:	68fb      	ldr	r3, [r7, #12]
 800f82c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f830:	b2db      	uxtb	r3, r3
 800f832:	2b22      	cmp	r3, #34	@ 0x22
 800f834:	d108      	bne.n	800f848 <I2C_Mem_ISR_DMA+0x134>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800f836:	68fb      	ldr	r3, [r7, #12]
 800f838:	681b      	ldr	r3, [r3, #0]
 800f83a:	681a      	ldr	r2, [r3, #0]
 800f83c:	68fb      	ldr	r3, [r7, #12]
 800f83e:	681b      	ldr	r3, [r3, #0]
 800f840:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800f844:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800f846:	e07e      	b.n	800f946 <I2C_Mem_ISR_DMA+0x232>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800f848:	68fb      	ldr	r3, [r7, #12]
 800f84a:	681b      	ldr	r3, [r3, #0]
 800f84c:	681a      	ldr	r2, [r3, #0]
 800f84e:	68fb      	ldr	r3, [r7, #12]
 800f850:	681b      	ldr	r3, [r3, #0]
 800f852:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800f856:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800f858:	e075      	b.n	800f946 <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800f85a:	2140      	movs	r1, #64	@ 0x40
 800f85c:	68f8      	ldr	r0, [r7, #12]
 800f85e:	f000 ff8f 	bl	8010780 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800f862:	e070      	b.n	800f946 <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800f864:	68bb      	ldr	r3, [r7, #8]
 800f866:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f86a:	2b00      	cmp	r3, #0
 800f86c:	d05d      	beq.n	800f92a <I2C_Mem_ISR_DMA+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800f86e:	687b      	ldr	r3, [r7, #4]
 800f870:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800f874:	2b00      	cmp	r3, #0
 800f876:	d058      	beq.n	800f92a <I2C_Mem_ISR_DMA+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800f878:	2101      	movs	r1, #1
 800f87a:	68f8      	ldr	r0, [r7, #12]
 800f87c:	f001 fb52 	bl	8010f24 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800f880:	2110      	movs	r1, #16
 800f882:	68f8      	ldr	r0, [r7, #12]
 800f884:	f001 faca 	bl	8010e1c <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800f888:	68fb      	ldr	r3, [r7, #12]
 800f88a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f88e:	b2db      	uxtb	r3, r3
 800f890:	2b22      	cmp	r3, #34	@ 0x22
 800f892:	d101      	bne.n	800f898 <I2C_Mem_ISR_DMA+0x184>
    {
      direction = I2C_GENERATE_START_READ;
 800f894:	4b31      	ldr	r3, [pc, #196]	@ (800f95c <I2C_Mem_ISR_DMA+0x248>)
 800f896:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800f898:	68fb      	ldr	r3, [r7, #12]
 800f89a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f89c:	b29b      	uxth	r3, r3
 800f89e:	2bff      	cmp	r3, #255	@ 0xff
 800f8a0:	d910      	bls.n	800f8c4 <I2C_Mem_ISR_DMA+0x1b0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800f8a2:	68fb      	ldr	r3, [r7, #12]
 800f8a4:	22ff      	movs	r2, #255	@ 0xff
 800f8a6:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800f8a8:	68fb      	ldr	r3, [r7, #12]
 800f8aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f8ac:	b299      	uxth	r1, r3
 800f8ae:	68fb      	ldr	r3, [r7, #12]
 800f8b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f8b2:	b2da      	uxtb	r2, r3
 800f8b4:	697b      	ldr	r3, [r7, #20]
 800f8b6:	9300      	str	r3, [sp, #0]
 800f8b8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800f8bc:	68f8      	ldr	r0, [r7, #12]
 800f8be:	f001 fa7b 	bl	8010db8 <I2C_TransferConfig>
 800f8c2:	e011      	b.n	800f8e8 <I2C_Mem_ISR_DMA+0x1d4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800f8c4:	68fb      	ldr	r3, [r7, #12]
 800f8c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f8c8:	b29a      	uxth	r2, r3
 800f8ca:	68fb      	ldr	r3, [r7, #12]
 800f8cc:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800f8ce:	68fb      	ldr	r3, [r7, #12]
 800f8d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f8d2:	b299      	uxth	r1, r3
 800f8d4:	68fb      	ldr	r3, [r7, #12]
 800f8d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f8d8:	b2da      	uxtb	r2, r3
 800f8da:	697b      	ldr	r3, [r7, #20]
 800f8dc:	9300      	str	r3, [sp, #0]
 800f8de:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800f8e2:	68f8      	ldr	r0, [r7, #12]
 800f8e4:	f001 fa68 	bl	8010db8 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 800f8e8:	68fb      	ldr	r3, [r7, #12]
 800f8ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f8ec:	b29a      	uxth	r2, r3
 800f8ee:	68fb      	ldr	r3, [r7, #12]
 800f8f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f8f2:	1ad3      	subs	r3, r2, r3
 800f8f4:	b29a      	uxth	r2, r3
 800f8f6:	68fb      	ldr	r3, [r7, #12]
 800f8f8:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800f8fa:	68fb      	ldr	r3, [r7, #12]
 800f8fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f900:	b2db      	uxtb	r3, r3
 800f902:	2b22      	cmp	r3, #34	@ 0x22
 800f904:	d108      	bne.n	800f918 <I2C_Mem_ISR_DMA+0x204>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800f906:	68fb      	ldr	r3, [r7, #12]
 800f908:	681b      	ldr	r3, [r3, #0]
 800f90a:	681a      	ldr	r2, [r3, #0]
 800f90c:	68fb      	ldr	r3, [r7, #12]
 800f90e:	681b      	ldr	r3, [r3, #0]
 800f910:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800f914:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800f916:	e016      	b.n	800f946 <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800f918:	68fb      	ldr	r3, [r7, #12]
 800f91a:	681b      	ldr	r3, [r3, #0]
 800f91c:	681a      	ldr	r2, [r3, #0]
 800f91e:	68fb      	ldr	r3, [r7, #12]
 800f920:	681b      	ldr	r3, [r3, #0]
 800f922:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800f926:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800f928:	e00d      	b.n	800f946 <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800f92a:	68bb      	ldr	r3, [r7, #8]
 800f92c:	f003 0320 	and.w	r3, r3, #32
 800f930:	2b00      	cmp	r3, #0
 800f932:	d008      	beq.n	800f946 <I2C_Mem_ISR_DMA+0x232>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800f93a:	2b00      	cmp	r3, #0
 800f93c:	d003      	beq.n	800f946 <I2C_Mem_ISR_DMA+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800f93e:	68b9      	ldr	r1, [r7, #8]
 800f940:	68f8      	ldr	r0, [r7, #12]
 800f942:	f000 fbad 	bl	80100a0 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800f946:	68fb      	ldr	r3, [r7, #12]
 800f948:	2200      	movs	r2, #0
 800f94a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800f94e:	2300      	movs	r3, #0
}
 800f950:	4618      	mov	r0, r3
 800f952:	3718      	adds	r7, #24
 800f954:	46bd      	mov	sp, r7
 800f956:	bd80      	pop	{r7, pc}
 800f958:	80002000 	.word	0x80002000
 800f95c:	80002400 	.word	0x80002400

0800f960 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800f960:	b580      	push	{r7, lr}
 800f962:	b088      	sub	sp, #32
 800f964:	af00      	add	r7, sp, #0
 800f966:	60f8      	str	r0, [r7, #12]
 800f968:	60b9      	str	r1, [r7, #8]
 800f96a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800f96c:	68fb      	ldr	r3, [r7, #12]
 800f96e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f970:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 800f972:	2300      	movs	r3, #0
 800f974:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 800f976:	68fb      	ldr	r3, [r7, #12]
 800f978:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800f97c:	2b01      	cmp	r3, #1
 800f97e:	d101      	bne.n	800f984 <I2C_Slave_ISR_DMA+0x24>
 800f980:	2302      	movs	r3, #2
 800f982:	e1c2      	b.n	800fd0a <I2C_Slave_ISR_DMA+0x3aa>
 800f984:	68fb      	ldr	r3, [r7, #12]
 800f986:	2201      	movs	r2, #1
 800f988:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800f98c:	68bb      	ldr	r3, [r7, #8]
 800f98e:	f003 0320 	and.w	r3, r3, #32
 800f992:	2b00      	cmp	r3, #0
 800f994:	d009      	beq.n	800f9aa <I2C_Slave_ISR_DMA+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800f99c:	2b00      	cmp	r3, #0
 800f99e:	d004      	beq.n	800f9aa <I2C_Slave_ISR_DMA+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 800f9a0:	68b9      	ldr	r1, [r7, #8]
 800f9a2:	68f8      	ldr	r0, [r7, #12]
 800f9a4:	f000 fc44 	bl	8010230 <I2C_ITSlaveCplt>
 800f9a8:	e1aa      	b.n	800fd00 <I2C_Slave_ISR_DMA+0x3a0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800f9aa:	68bb      	ldr	r3, [r7, #8]
 800f9ac:	f003 0310 	and.w	r3, r3, #16
 800f9b0:	2b00      	cmp	r3, #0
 800f9b2:	f000 8197 	beq.w	800fce4 <I2C_Slave_ISR_DMA+0x384>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800f9b6:	687b      	ldr	r3, [r7, #4]
 800f9b8:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800f9bc:	2b00      	cmp	r3, #0
 800f9be:	f000 8191 	beq.w	800fce4 <I2C_Slave_ISR_DMA+0x384>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800f9c8:	2b00      	cmp	r3, #0
 800f9ca:	d105      	bne.n	800f9d8 <I2C_Slave_ISR_DMA+0x78>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800f9d2:	2b00      	cmp	r3, #0
 800f9d4:	f000 817f 	beq.w	800fcd6 <I2C_Slave_ISR_DMA+0x376>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 800f9d8:	68fb      	ldr	r3, [r7, #12]
 800f9da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f9dc:	2b00      	cmp	r3, #0
 800f9de:	d07b      	beq.n	800fad8 <I2C_Slave_ISR_DMA+0x178>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800f9e6:	2b00      	cmp	r3, #0
 800f9e8:	d076      	beq.n	800fad8 <I2C_Slave_ISR_DMA+0x178>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 800f9ea:	68fb      	ldr	r3, [r7, #12]
 800f9ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f9ee:	681b      	ldr	r3, [r3, #0]
 800f9f0:	4a74      	ldr	r2, [pc, #464]	@ (800fbc4 <I2C_Slave_ISR_DMA+0x264>)
 800f9f2:	4293      	cmp	r3, r2
 800f9f4:	d059      	beq.n	800faaa <I2C_Slave_ISR_DMA+0x14a>
 800f9f6:	68fb      	ldr	r3, [r7, #12]
 800f9f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f9fa:	681b      	ldr	r3, [r3, #0]
 800f9fc:	4a72      	ldr	r2, [pc, #456]	@ (800fbc8 <I2C_Slave_ISR_DMA+0x268>)
 800f9fe:	4293      	cmp	r3, r2
 800fa00:	d053      	beq.n	800faaa <I2C_Slave_ISR_DMA+0x14a>
 800fa02:	68fb      	ldr	r3, [r7, #12]
 800fa04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fa06:	681b      	ldr	r3, [r3, #0]
 800fa08:	4a70      	ldr	r2, [pc, #448]	@ (800fbcc <I2C_Slave_ISR_DMA+0x26c>)
 800fa0a:	4293      	cmp	r3, r2
 800fa0c:	d04d      	beq.n	800faaa <I2C_Slave_ISR_DMA+0x14a>
 800fa0e:	68fb      	ldr	r3, [r7, #12]
 800fa10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fa12:	681b      	ldr	r3, [r3, #0]
 800fa14:	4a6e      	ldr	r2, [pc, #440]	@ (800fbd0 <I2C_Slave_ISR_DMA+0x270>)
 800fa16:	4293      	cmp	r3, r2
 800fa18:	d047      	beq.n	800faaa <I2C_Slave_ISR_DMA+0x14a>
 800fa1a:	68fb      	ldr	r3, [r7, #12]
 800fa1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fa1e:	681b      	ldr	r3, [r3, #0]
 800fa20:	4a6c      	ldr	r2, [pc, #432]	@ (800fbd4 <I2C_Slave_ISR_DMA+0x274>)
 800fa22:	4293      	cmp	r3, r2
 800fa24:	d041      	beq.n	800faaa <I2C_Slave_ISR_DMA+0x14a>
 800fa26:	68fb      	ldr	r3, [r7, #12]
 800fa28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fa2a:	681b      	ldr	r3, [r3, #0]
 800fa2c:	4a6a      	ldr	r2, [pc, #424]	@ (800fbd8 <I2C_Slave_ISR_DMA+0x278>)
 800fa2e:	4293      	cmp	r3, r2
 800fa30:	d03b      	beq.n	800faaa <I2C_Slave_ISR_DMA+0x14a>
 800fa32:	68fb      	ldr	r3, [r7, #12]
 800fa34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fa36:	681b      	ldr	r3, [r3, #0]
 800fa38:	4a68      	ldr	r2, [pc, #416]	@ (800fbdc <I2C_Slave_ISR_DMA+0x27c>)
 800fa3a:	4293      	cmp	r3, r2
 800fa3c:	d035      	beq.n	800faaa <I2C_Slave_ISR_DMA+0x14a>
 800fa3e:	68fb      	ldr	r3, [r7, #12]
 800fa40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fa42:	681b      	ldr	r3, [r3, #0]
 800fa44:	4a66      	ldr	r2, [pc, #408]	@ (800fbe0 <I2C_Slave_ISR_DMA+0x280>)
 800fa46:	4293      	cmp	r3, r2
 800fa48:	d02f      	beq.n	800faaa <I2C_Slave_ISR_DMA+0x14a>
 800fa4a:	68fb      	ldr	r3, [r7, #12]
 800fa4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fa4e:	681b      	ldr	r3, [r3, #0]
 800fa50:	4a64      	ldr	r2, [pc, #400]	@ (800fbe4 <I2C_Slave_ISR_DMA+0x284>)
 800fa52:	4293      	cmp	r3, r2
 800fa54:	d029      	beq.n	800faaa <I2C_Slave_ISR_DMA+0x14a>
 800fa56:	68fb      	ldr	r3, [r7, #12]
 800fa58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fa5a:	681b      	ldr	r3, [r3, #0]
 800fa5c:	4a62      	ldr	r2, [pc, #392]	@ (800fbe8 <I2C_Slave_ISR_DMA+0x288>)
 800fa5e:	4293      	cmp	r3, r2
 800fa60:	d023      	beq.n	800faaa <I2C_Slave_ISR_DMA+0x14a>
 800fa62:	68fb      	ldr	r3, [r7, #12]
 800fa64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fa66:	681b      	ldr	r3, [r3, #0]
 800fa68:	4a60      	ldr	r2, [pc, #384]	@ (800fbec <I2C_Slave_ISR_DMA+0x28c>)
 800fa6a:	4293      	cmp	r3, r2
 800fa6c:	d01d      	beq.n	800faaa <I2C_Slave_ISR_DMA+0x14a>
 800fa6e:	68fb      	ldr	r3, [r7, #12]
 800fa70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fa72:	681b      	ldr	r3, [r3, #0]
 800fa74:	4a5e      	ldr	r2, [pc, #376]	@ (800fbf0 <I2C_Slave_ISR_DMA+0x290>)
 800fa76:	4293      	cmp	r3, r2
 800fa78:	d017      	beq.n	800faaa <I2C_Slave_ISR_DMA+0x14a>
 800fa7a:	68fb      	ldr	r3, [r7, #12]
 800fa7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fa7e:	681b      	ldr	r3, [r3, #0]
 800fa80:	4a5c      	ldr	r2, [pc, #368]	@ (800fbf4 <I2C_Slave_ISR_DMA+0x294>)
 800fa82:	4293      	cmp	r3, r2
 800fa84:	d011      	beq.n	800faaa <I2C_Slave_ISR_DMA+0x14a>
 800fa86:	68fb      	ldr	r3, [r7, #12]
 800fa88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fa8a:	681b      	ldr	r3, [r3, #0]
 800fa8c:	4a5a      	ldr	r2, [pc, #360]	@ (800fbf8 <I2C_Slave_ISR_DMA+0x298>)
 800fa8e:	4293      	cmp	r3, r2
 800fa90:	d00b      	beq.n	800faaa <I2C_Slave_ISR_DMA+0x14a>
 800fa92:	68fb      	ldr	r3, [r7, #12]
 800fa94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fa96:	681b      	ldr	r3, [r3, #0]
 800fa98:	4a58      	ldr	r2, [pc, #352]	@ (800fbfc <I2C_Slave_ISR_DMA+0x29c>)
 800fa9a:	4293      	cmp	r3, r2
 800fa9c:	d005      	beq.n	800faaa <I2C_Slave_ISR_DMA+0x14a>
 800fa9e:	68fb      	ldr	r3, [r7, #12]
 800faa0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800faa2:	681b      	ldr	r3, [r3, #0]
 800faa4:	4a56      	ldr	r2, [pc, #344]	@ (800fc00 <I2C_Slave_ISR_DMA+0x2a0>)
 800faa6:	4293      	cmp	r3, r2
 800faa8:	d109      	bne.n	800fabe <I2C_Slave_ISR_DMA+0x15e>
 800faaa:	68fb      	ldr	r3, [r7, #12]
 800faac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800faae:	681b      	ldr	r3, [r3, #0]
 800fab0:	685b      	ldr	r3, [r3, #4]
 800fab2:	2b00      	cmp	r3, #0
 800fab4:	bf0c      	ite	eq
 800fab6:	2301      	moveq	r3, #1
 800fab8:	2300      	movne	r3, #0
 800faba:	b2db      	uxtb	r3, r3
 800fabc:	e008      	b.n	800fad0 <I2C_Slave_ISR_DMA+0x170>
 800fabe:	68fb      	ldr	r3, [r7, #12]
 800fac0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fac2:	681b      	ldr	r3, [r3, #0]
 800fac4:	685b      	ldr	r3, [r3, #4]
 800fac6:	2b00      	cmp	r3, #0
 800fac8:	bf0c      	ite	eq
 800faca:	2301      	moveq	r3, #1
 800facc:	2300      	movne	r3, #0
 800face:	b2db      	uxtb	r3, r3
 800fad0:	2b00      	cmp	r3, #0
 800fad2:	d001      	beq.n	800fad8 <I2C_Slave_ISR_DMA+0x178>
          {
            treatdmanack = 1U;
 800fad4:	2301      	movs	r3, #1
 800fad6:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 800fad8:	68fb      	ldr	r3, [r7, #12]
 800fada:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fadc:	2b00      	cmp	r3, #0
 800fade:	f000 809e 	beq.w	800fc1e <I2C_Slave_ISR_DMA+0x2be>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 800fae2:	687b      	ldr	r3, [r7, #4]
 800fae4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800fae8:	2b00      	cmp	r3, #0
 800faea:	f000 8098 	beq.w	800fc1e <I2C_Slave_ISR_DMA+0x2be>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 800faee:	68fb      	ldr	r3, [r7, #12]
 800faf0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800faf2:	681b      	ldr	r3, [r3, #0]
 800faf4:	4a33      	ldr	r2, [pc, #204]	@ (800fbc4 <I2C_Slave_ISR_DMA+0x264>)
 800faf6:	4293      	cmp	r3, r2
 800faf8:	d059      	beq.n	800fbae <I2C_Slave_ISR_DMA+0x24e>
 800fafa:	68fb      	ldr	r3, [r7, #12]
 800fafc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fafe:	681b      	ldr	r3, [r3, #0]
 800fb00:	4a31      	ldr	r2, [pc, #196]	@ (800fbc8 <I2C_Slave_ISR_DMA+0x268>)
 800fb02:	4293      	cmp	r3, r2
 800fb04:	d053      	beq.n	800fbae <I2C_Slave_ISR_DMA+0x24e>
 800fb06:	68fb      	ldr	r3, [r7, #12]
 800fb08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fb0a:	681b      	ldr	r3, [r3, #0]
 800fb0c:	4a2f      	ldr	r2, [pc, #188]	@ (800fbcc <I2C_Slave_ISR_DMA+0x26c>)
 800fb0e:	4293      	cmp	r3, r2
 800fb10:	d04d      	beq.n	800fbae <I2C_Slave_ISR_DMA+0x24e>
 800fb12:	68fb      	ldr	r3, [r7, #12]
 800fb14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fb16:	681b      	ldr	r3, [r3, #0]
 800fb18:	4a2d      	ldr	r2, [pc, #180]	@ (800fbd0 <I2C_Slave_ISR_DMA+0x270>)
 800fb1a:	4293      	cmp	r3, r2
 800fb1c:	d047      	beq.n	800fbae <I2C_Slave_ISR_DMA+0x24e>
 800fb1e:	68fb      	ldr	r3, [r7, #12]
 800fb20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fb22:	681b      	ldr	r3, [r3, #0]
 800fb24:	4a2b      	ldr	r2, [pc, #172]	@ (800fbd4 <I2C_Slave_ISR_DMA+0x274>)
 800fb26:	4293      	cmp	r3, r2
 800fb28:	d041      	beq.n	800fbae <I2C_Slave_ISR_DMA+0x24e>
 800fb2a:	68fb      	ldr	r3, [r7, #12]
 800fb2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fb2e:	681b      	ldr	r3, [r3, #0]
 800fb30:	4a29      	ldr	r2, [pc, #164]	@ (800fbd8 <I2C_Slave_ISR_DMA+0x278>)
 800fb32:	4293      	cmp	r3, r2
 800fb34:	d03b      	beq.n	800fbae <I2C_Slave_ISR_DMA+0x24e>
 800fb36:	68fb      	ldr	r3, [r7, #12]
 800fb38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fb3a:	681b      	ldr	r3, [r3, #0]
 800fb3c:	4a27      	ldr	r2, [pc, #156]	@ (800fbdc <I2C_Slave_ISR_DMA+0x27c>)
 800fb3e:	4293      	cmp	r3, r2
 800fb40:	d035      	beq.n	800fbae <I2C_Slave_ISR_DMA+0x24e>
 800fb42:	68fb      	ldr	r3, [r7, #12]
 800fb44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fb46:	681b      	ldr	r3, [r3, #0]
 800fb48:	4a25      	ldr	r2, [pc, #148]	@ (800fbe0 <I2C_Slave_ISR_DMA+0x280>)
 800fb4a:	4293      	cmp	r3, r2
 800fb4c:	d02f      	beq.n	800fbae <I2C_Slave_ISR_DMA+0x24e>
 800fb4e:	68fb      	ldr	r3, [r7, #12]
 800fb50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fb52:	681b      	ldr	r3, [r3, #0]
 800fb54:	4a23      	ldr	r2, [pc, #140]	@ (800fbe4 <I2C_Slave_ISR_DMA+0x284>)
 800fb56:	4293      	cmp	r3, r2
 800fb58:	d029      	beq.n	800fbae <I2C_Slave_ISR_DMA+0x24e>
 800fb5a:	68fb      	ldr	r3, [r7, #12]
 800fb5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fb5e:	681b      	ldr	r3, [r3, #0]
 800fb60:	4a21      	ldr	r2, [pc, #132]	@ (800fbe8 <I2C_Slave_ISR_DMA+0x288>)
 800fb62:	4293      	cmp	r3, r2
 800fb64:	d023      	beq.n	800fbae <I2C_Slave_ISR_DMA+0x24e>
 800fb66:	68fb      	ldr	r3, [r7, #12]
 800fb68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fb6a:	681b      	ldr	r3, [r3, #0]
 800fb6c:	4a1f      	ldr	r2, [pc, #124]	@ (800fbec <I2C_Slave_ISR_DMA+0x28c>)
 800fb6e:	4293      	cmp	r3, r2
 800fb70:	d01d      	beq.n	800fbae <I2C_Slave_ISR_DMA+0x24e>
 800fb72:	68fb      	ldr	r3, [r7, #12]
 800fb74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fb76:	681b      	ldr	r3, [r3, #0]
 800fb78:	4a1d      	ldr	r2, [pc, #116]	@ (800fbf0 <I2C_Slave_ISR_DMA+0x290>)
 800fb7a:	4293      	cmp	r3, r2
 800fb7c:	d017      	beq.n	800fbae <I2C_Slave_ISR_DMA+0x24e>
 800fb7e:	68fb      	ldr	r3, [r7, #12]
 800fb80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fb82:	681b      	ldr	r3, [r3, #0]
 800fb84:	4a1b      	ldr	r2, [pc, #108]	@ (800fbf4 <I2C_Slave_ISR_DMA+0x294>)
 800fb86:	4293      	cmp	r3, r2
 800fb88:	d011      	beq.n	800fbae <I2C_Slave_ISR_DMA+0x24e>
 800fb8a:	68fb      	ldr	r3, [r7, #12]
 800fb8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fb8e:	681b      	ldr	r3, [r3, #0]
 800fb90:	4a19      	ldr	r2, [pc, #100]	@ (800fbf8 <I2C_Slave_ISR_DMA+0x298>)
 800fb92:	4293      	cmp	r3, r2
 800fb94:	d00b      	beq.n	800fbae <I2C_Slave_ISR_DMA+0x24e>
 800fb96:	68fb      	ldr	r3, [r7, #12]
 800fb98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fb9a:	681b      	ldr	r3, [r3, #0]
 800fb9c:	4a17      	ldr	r2, [pc, #92]	@ (800fbfc <I2C_Slave_ISR_DMA+0x29c>)
 800fb9e:	4293      	cmp	r3, r2
 800fba0:	d005      	beq.n	800fbae <I2C_Slave_ISR_DMA+0x24e>
 800fba2:	68fb      	ldr	r3, [r7, #12]
 800fba4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fba6:	681b      	ldr	r3, [r3, #0]
 800fba8:	4a15      	ldr	r2, [pc, #84]	@ (800fc00 <I2C_Slave_ISR_DMA+0x2a0>)
 800fbaa:	4293      	cmp	r3, r2
 800fbac:	d12a      	bne.n	800fc04 <I2C_Slave_ISR_DMA+0x2a4>
 800fbae:	68fb      	ldr	r3, [r7, #12]
 800fbb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fbb2:	681b      	ldr	r3, [r3, #0]
 800fbb4:	685b      	ldr	r3, [r3, #4]
 800fbb6:	2b00      	cmp	r3, #0
 800fbb8:	bf0c      	ite	eq
 800fbba:	2301      	moveq	r3, #1
 800fbbc:	2300      	movne	r3, #0
 800fbbe:	b2db      	uxtb	r3, r3
 800fbc0:	e029      	b.n	800fc16 <I2C_Slave_ISR_DMA+0x2b6>
 800fbc2:	bf00      	nop
 800fbc4:	40020010 	.word	0x40020010
 800fbc8:	40020028 	.word	0x40020028
 800fbcc:	40020040 	.word	0x40020040
 800fbd0:	40020058 	.word	0x40020058
 800fbd4:	40020070 	.word	0x40020070
 800fbd8:	40020088 	.word	0x40020088
 800fbdc:	400200a0 	.word	0x400200a0
 800fbe0:	400200b8 	.word	0x400200b8
 800fbe4:	40020410 	.word	0x40020410
 800fbe8:	40020428 	.word	0x40020428
 800fbec:	40020440 	.word	0x40020440
 800fbf0:	40020458 	.word	0x40020458
 800fbf4:	40020470 	.word	0x40020470
 800fbf8:	40020488 	.word	0x40020488
 800fbfc:	400204a0 	.word	0x400204a0
 800fc00:	400204b8 	.word	0x400204b8
 800fc04:	68fb      	ldr	r3, [r7, #12]
 800fc06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fc08:	681b      	ldr	r3, [r3, #0]
 800fc0a:	685b      	ldr	r3, [r3, #4]
 800fc0c:	2b00      	cmp	r3, #0
 800fc0e:	bf0c      	ite	eq
 800fc10:	2301      	moveq	r3, #1
 800fc12:	2300      	movne	r3, #0
 800fc14:	b2db      	uxtb	r3, r3
 800fc16:	2b00      	cmp	r3, #0
 800fc18:	d001      	beq.n	800fc1e <I2C_Slave_ISR_DMA+0x2be>
          {
            treatdmanack = 1U;
 800fc1a:	2301      	movs	r3, #1
 800fc1c:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 800fc1e:	69fb      	ldr	r3, [r7, #28]
 800fc20:	2b01      	cmp	r3, #1
 800fc22:	d128      	bne.n	800fc76 <I2C_Slave_ISR_DMA+0x316>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800fc24:	68fb      	ldr	r3, [r7, #12]
 800fc26:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800fc2a:	b2db      	uxtb	r3, r3
 800fc2c:	2b28      	cmp	r3, #40	@ 0x28
 800fc2e:	d108      	bne.n	800fc42 <I2C_Slave_ISR_DMA+0x2e2>
 800fc30:	69bb      	ldr	r3, [r7, #24]
 800fc32:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800fc36:	d104      	bne.n	800fc42 <I2C_Slave_ISR_DMA+0x2e2>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 800fc38:	68b9      	ldr	r1, [r7, #8]
 800fc3a:	68f8      	ldr	r0, [r7, #12]
 800fc3c:	f000 fd4c 	bl	80106d8 <I2C_ITListenCplt>
 800fc40:	e048      	b.n	800fcd4 <I2C_Slave_ISR_DMA+0x374>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800fc42:	68fb      	ldr	r3, [r7, #12]
 800fc44:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800fc48:	b2db      	uxtb	r3, r3
 800fc4a:	2b29      	cmp	r3, #41	@ 0x29
 800fc4c:	d10e      	bne.n	800fc6c <I2C_Slave_ISR_DMA+0x30c>
 800fc4e:	69bb      	ldr	r3, [r7, #24]
 800fc50:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800fc54:	d00a      	beq.n	800fc6c <I2C_Slave_ISR_DMA+0x30c>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800fc56:	68fb      	ldr	r3, [r7, #12]
 800fc58:	681b      	ldr	r3, [r3, #0]
 800fc5a:	2210      	movs	r2, #16
 800fc5c:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 800fc5e:	68f8      	ldr	r0, [r7, #12]
 800fc60:	f000 fea5 	bl	80109ae <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 800fc64:	68f8      	ldr	r0, [r7, #12]
 800fc66:	f000 f9be 	bl	800ffe6 <I2C_ITSlaveSeqCplt>
 800fc6a:	e033      	b.n	800fcd4 <I2C_Slave_ISR_DMA+0x374>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800fc6c:	68fb      	ldr	r3, [r7, #12]
 800fc6e:	681b      	ldr	r3, [r3, #0]
 800fc70:	2210      	movs	r2, #16
 800fc72:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 800fc74:	e034      	b.n	800fce0 <I2C_Slave_ISR_DMA+0x380>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800fc76:	68fb      	ldr	r3, [r7, #12]
 800fc78:	681b      	ldr	r3, [r3, #0]
 800fc7a:	2210      	movs	r2, #16
 800fc7c:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800fc7e:	68fb      	ldr	r3, [r7, #12]
 800fc80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fc82:	f043 0204 	orr.w	r2, r3, #4
 800fc86:	68fb      	ldr	r3, [r7, #12]
 800fc88:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 800fc8a:	68fb      	ldr	r3, [r7, #12]
 800fc8c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800fc90:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800fc92:	69bb      	ldr	r3, [r7, #24]
 800fc94:	2b00      	cmp	r3, #0
 800fc96:	d003      	beq.n	800fca0 <I2C_Slave_ISR_DMA+0x340>
 800fc98:	69bb      	ldr	r3, [r7, #24]
 800fc9a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800fc9e:	d11f      	bne.n	800fce0 <I2C_Slave_ISR_DMA+0x380>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800fca0:	7dfb      	ldrb	r3, [r7, #23]
 800fca2:	2b21      	cmp	r3, #33	@ 0x21
 800fca4:	d002      	beq.n	800fcac <I2C_Slave_ISR_DMA+0x34c>
 800fca6:	7dfb      	ldrb	r3, [r7, #23]
 800fca8:	2b29      	cmp	r3, #41	@ 0x29
 800fcaa:	d103      	bne.n	800fcb4 <I2C_Slave_ISR_DMA+0x354>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800fcac:	68fb      	ldr	r3, [r7, #12]
 800fcae:	2221      	movs	r2, #33	@ 0x21
 800fcb0:	631a      	str	r2, [r3, #48]	@ 0x30
 800fcb2:	e008      	b.n	800fcc6 <I2C_Slave_ISR_DMA+0x366>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800fcb4:	7dfb      	ldrb	r3, [r7, #23]
 800fcb6:	2b22      	cmp	r3, #34	@ 0x22
 800fcb8:	d002      	beq.n	800fcc0 <I2C_Slave_ISR_DMA+0x360>
 800fcba:	7dfb      	ldrb	r3, [r7, #23]
 800fcbc:	2b2a      	cmp	r3, #42	@ 0x2a
 800fcbe:	d102      	bne.n	800fcc6 <I2C_Slave_ISR_DMA+0x366>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800fcc0:	68fb      	ldr	r3, [r7, #12]
 800fcc2:	2222      	movs	r2, #34	@ 0x22
 800fcc4:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 800fcc6:	68fb      	ldr	r3, [r7, #12]
 800fcc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fcca:	4619      	mov	r1, r3
 800fccc:	68f8      	ldr	r0, [r7, #12]
 800fcce:	f000 fd57 	bl	8010780 <I2C_ITError>
      if (treatdmanack == 1U)
 800fcd2:	e005      	b.n	800fce0 <I2C_Slave_ISR_DMA+0x380>
 800fcd4:	e004      	b.n	800fce0 <I2C_Slave_ISR_DMA+0x380>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800fcd6:	68fb      	ldr	r3, [r7, #12]
 800fcd8:	681b      	ldr	r3, [r3, #0]
 800fcda:	2210      	movs	r2, #16
 800fcdc:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800fcde:	e00f      	b.n	800fd00 <I2C_Slave_ISR_DMA+0x3a0>
      if (treatdmanack == 1U)
 800fce0:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800fce2:	e00d      	b.n	800fd00 <I2C_Slave_ISR_DMA+0x3a0>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800fce4:	68bb      	ldr	r3, [r7, #8]
 800fce6:	f003 0308 	and.w	r3, r3, #8
 800fcea:	2b00      	cmp	r3, #0
 800fcec:	d008      	beq.n	800fd00 <I2C_Slave_ISR_DMA+0x3a0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800fcee:	687b      	ldr	r3, [r7, #4]
 800fcf0:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800fcf4:	2b00      	cmp	r3, #0
 800fcf6:	d003      	beq.n	800fd00 <I2C_Slave_ISR_DMA+0x3a0>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 800fcf8:	68b9      	ldr	r1, [r7, #8]
 800fcfa:	68f8      	ldr	r0, [r7, #12]
 800fcfc:	f000 f8b2 	bl	800fe64 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800fd00:	68fb      	ldr	r3, [r7, #12]
 800fd02:	2200      	movs	r2, #0
 800fd04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800fd08:	2300      	movs	r3, #0
}
 800fd0a:	4618      	mov	r0, r3
 800fd0c:	3720      	adds	r7, #32
 800fd0e:	46bd      	mov	sp, r7
 800fd10:	bd80      	pop	{r7, pc}
 800fd12:	bf00      	nop

0800fd14 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800fd14:	b580      	push	{r7, lr}
 800fd16:	b086      	sub	sp, #24
 800fd18:	af02      	add	r7, sp, #8
 800fd1a:	60f8      	str	r0, [r7, #12]
 800fd1c:	4608      	mov	r0, r1
 800fd1e:	4611      	mov	r1, r2
 800fd20:	461a      	mov	r2, r3
 800fd22:	4603      	mov	r3, r0
 800fd24:	817b      	strh	r3, [r7, #10]
 800fd26:	460b      	mov	r3, r1
 800fd28:	813b      	strh	r3, [r7, #8]
 800fd2a:	4613      	mov	r3, r2
 800fd2c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800fd2e:	88fb      	ldrh	r3, [r7, #6]
 800fd30:	b2da      	uxtb	r2, r3
 800fd32:	8979      	ldrh	r1, [r7, #10]
 800fd34:	4b20      	ldr	r3, [pc, #128]	@ (800fdb8 <I2C_RequestMemoryWrite+0xa4>)
 800fd36:	9300      	str	r3, [sp, #0]
 800fd38:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800fd3c:	68f8      	ldr	r0, [r7, #12]
 800fd3e:	f001 f83b 	bl	8010db8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800fd42:	69fa      	ldr	r2, [r7, #28]
 800fd44:	69b9      	ldr	r1, [r7, #24]
 800fd46:	68f8      	ldr	r0, [r7, #12]
 800fd48:	f000 fecc 	bl	8010ae4 <I2C_WaitOnTXISFlagUntilTimeout>
 800fd4c:	4603      	mov	r3, r0
 800fd4e:	2b00      	cmp	r3, #0
 800fd50:	d001      	beq.n	800fd56 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800fd52:	2301      	movs	r3, #1
 800fd54:	e02c      	b.n	800fdb0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800fd56:	88fb      	ldrh	r3, [r7, #6]
 800fd58:	2b01      	cmp	r3, #1
 800fd5a:	d105      	bne.n	800fd68 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800fd5c:	893b      	ldrh	r3, [r7, #8]
 800fd5e:	b2da      	uxtb	r2, r3
 800fd60:	68fb      	ldr	r3, [r7, #12]
 800fd62:	681b      	ldr	r3, [r3, #0]
 800fd64:	629a      	str	r2, [r3, #40]	@ 0x28
 800fd66:	e015      	b.n	800fd94 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800fd68:	893b      	ldrh	r3, [r7, #8]
 800fd6a:	0a1b      	lsrs	r3, r3, #8
 800fd6c:	b29b      	uxth	r3, r3
 800fd6e:	b2da      	uxtb	r2, r3
 800fd70:	68fb      	ldr	r3, [r7, #12]
 800fd72:	681b      	ldr	r3, [r3, #0]
 800fd74:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800fd76:	69fa      	ldr	r2, [r7, #28]
 800fd78:	69b9      	ldr	r1, [r7, #24]
 800fd7a:	68f8      	ldr	r0, [r7, #12]
 800fd7c:	f000 feb2 	bl	8010ae4 <I2C_WaitOnTXISFlagUntilTimeout>
 800fd80:	4603      	mov	r3, r0
 800fd82:	2b00      	cmp	r3, #0
 800fd84:	d001      	beq.n	800fd8a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800fd86:	2301      	movs	r3, #1
 800fd88:	e012      	b.n	800fdb0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800fd8a:	893b      	ldrh	r3, [r7, #8]
 800fd8c:	b2da      	uxtb	r2, r3
 800fd8e:	68fb      	ldr	r3, [r7, #12]
 800fd90:	681b      	ldr	r3, [r3, #0]
 800fd92:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800fd94:	69fb      	ldr	r3, [r7, #28]
 800fd96:	9300      	str	r3, [sp, #0]
 800fd98:	69bb      	ldr	r3, [r7, #24]
 800fd9a:	2200      	movs	r2, #0
 800fd9c:	2180      	movs	r1, #128	@ 0x80
 800fd9e:	68f8      	ldr	r0, [r7, #12]
 800fda0:	f000 fe47 	bl	8010a32 <I2C_WaitOnFlagUntilTimeout>
 800fda4:	4603      	mov	r3, r0
 800fda6:	2b00      	cmp	r3, #0
 800fda8:	d001      	beq.n	800fdae <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800fdaa:	2301      	movs	r3, #1
 800fdac:	e000      	b.n	800fdb0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800fdae:	2300      	movs	r3, #0
}
 800fdb0:	4618      	mov	r0, r3
 800fdb2:	3710      	adds	r7, #16
 800fdb4:	46bd      	mov	sp, r7
 800fdb6:	bd80      	pop	{r7, pc}
 800fdb8:	80002000 	.word	0x80002000

0800fdbc <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800fdbc:	b580      	push	{r7, lr}
 800fdbe:	b086      	sub	sp, #24
 800fdc0:	af02      	add	r7, sp, #8
 800fdc2:	60f8      	str	r0, [r7, #12]
 800fdc4:	4608      	mov	r0, r1
 800fdc6:	4611      	mov	r1, r2
 800fdc8:	461a      	mov	r2, r3
 800fdca:	4603      	mov	r3, r0
 800fdcc:	817b      	strh	r3, [r7, #10]
 800fdce:	460b      	mov	r3, r1
 800fdd0:	813b      	strh	r3, [r7, #8]
 800fdd2:	4613      	mov	r3, r2
 800fdd4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800fdd6:	88fb      	ldrh	r3, [r7, #6]
 800fdd8:	b2da      	uxtb	r2, r3
 800fdda:	8979      	ldrh	r1, [r7, #10]
 800fddc:	4b20      	ldr	r3, [pc, #128]	@ (800fe60 <I2C_RequestMemoryRead+0xa4>)
 800fdde:	9300      	str	r3, [sp, #0]
 800fde0:	2300      	movs	r3, #0
 800fde2:	68f8      	ldr	r0, [r7, #12]
 800fde4:	f000 ffe8 	bl	8010db8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800fde8:	69fa      	ldr	r2, [r7, #28]
 800fdea:	69b9      	ldr	r1, [r7, #24]
 800fdec:	68f8      	ldr	r0, [r7, #12]
 800fdee:	f000 fe79 	bl	8010ae4 <I2C_WaitOnTXISFlagUntilTimeout>
 800fdf2:	4603      	mov	r3, r0
 800fdf4:	2b00      	cmp	r3, #0
 800fdf6:	d001      	beq.n	800fdfc <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800fdf8:	2301      	movs	r3, #1
 800fdfa:	e02c      	b.n	800fe56 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800fdfc:	88fb      	ldrh	r3, [r7, #6]
 800fdfe:	2b01      	cmp	r3, #1
 800fe00:	d105      	bne.n	800fe0e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800fe02:	893b      	ldrh	r3, [r7, #8]
 800fe04:	b2da      	uxtb	r2, r3
 800fe06:	68fb      	ldr	r3, [r7, #12]
 800fe08:	681b      	ldr	r3, [r3, #0]
 800fe0a:	629a      	str	r2, [r3, #40]	@ 0x28
 800fe0c:	e015      	b.n	800fe3a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800fe0e:	893b      	ldrh	r3, [r7, #8]
 800fe10:	0a1b      	lsrs	r3, r3, #8
 800fe12:	b29b      	uxth	r3, r3
 800fe14:	b2da      	uxtb	r2, r3
 800fe16:	68fb      	ldr	r3, [r7, #12]
 800fe18:	681b      	ldr	r3, [r3, #0]
 800fe1a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800fe1c:	69fa      	ldr	r2, [r7, #28]
 800fe1e:	69b9      	ldr	r1, [r7, #24]
 800fe20:	68f8      	ldr	r0, [r7, #12]
 800fe22:	f000 fe5f 	bl	8010ae4 <I2C_WaitOnTXISFlagUntilTimeout>
 800fe26:	4603      	mov	r3, r0
 800fe28:	2b00      	cmp	r3, #0
 800fe2a:	d001      	beq.n	800fe30 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800fe2c:	2301      	movs	r3, #1
 800fe2e:	e012      	b.n	800fe56 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800fe30:	893b      	ldrh	r3, [r7, #8]
 800fe32:	b2da      	uxtb	r2, r3
 800fe34:	68fb      	ldr	r3, [r7, #12]
 800fe36:	681b      	ldr	r3, [r3, #0]
 800fe38:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800fe3a:	69fb      	ldr	r3, [r7, #28]
 800fe3c:	9300      	str	r3, [sp, #0]
 800fe3e:	69bb      	ldr	r3, [r7, #24]
 800fe40:	2200      	movs	r2, #0
 800fe42:	2140      	movs	r1, #64	@ 0x40
 800fe44:	68f8      	ldr	r0, [r7, #12]
 800fe46:	f000 fdf4 	bl	8010a32 <I2C_WaitOnFlagUntilTimeout>
 800fe4a:	4603      	mov	r3, r0
 800fe4c:	2b00      	cmp	r3, #0
 800fe4e:	d001      	beq.n	800fe54 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800fe50:	2301      	movs	r3, #1
 800fe52:	e000      	b.n	800fe56 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800fe54:	2300      	movs	r3, #0
}
 800fe56:	4618      	mov	r0, r3
 800fe58:	3710      	adds	r7, #16
 800fe5a:	46bd      	mov	sp, r7
 800fe5c:	bd80      	pop	{r7, pc}
 800fe5e:	bf00      	nop
 800fe60:	80002000 	.word	0x80002000

0800fe64 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800fe64:	b580      	push	{r7, lr}
 800fe66:	b084      	sub	sp, #16
 800fe68:	af00      	add	r7, sp, #0
 800fe6a:	6078      	str	r0, [r7, #4]
 800fe6c:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800fe6e:	687b      	ldr	r3, [r7, #4]
 800fe70:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800fe74:	b2db      	uxtb	r3, r3
 800fe76:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800fe7a:	2b28      	cmp	r3, #40	@ 0x28
 800fe7c:	d16a      	bne.n	800ff54 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800fe7e:	687b      	ldr	r3, [r7, #4]
 800fe80:	681b      	ldr	r3, [r3, #0]
 800fe82:	699b      	ldr	r3, [r3, #24]
 800fe84:	0c1b      	lsrs	r3, r3, #16
 800fe86:	b2db      	uxtb	r3, r3
 800fe88:	f003 0301 	and.w	r3, r3, #1
 800fe8c:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800fe8e:	687b      	ldr	r3, [r7, #4]
 800fe90:	681b      	ldr	r3, [r3, #0]
 800fe92:	699b      	ldr	r3, [r3, #24]
 800fe94:	0c1b      	lsrs	r3, r3, #16
 800fe96:	b29b      	uxth	r3, r3
 800fe98:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800fe9c:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	681b      	ldr	r3, [r3, #0]
 800fea2:	689b      	ldr	r3, [r3, #8]
 800fea4:	b29b      	uxth	r3, r3
 800fea6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800feaa:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800feac:	687b      	ldr	r3, [r7, #4]
 800feae:	681b      	ldr	r3, [r3, #0]
 800feb0:	68db      	ldr	r3, [r3, #12]
 800feb2:	b29b      	uxth	r3, r3
 800feb4:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800feb8:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800feba:	687b      	ldr	r3, [r7, #4]
 800febc:	68db      	ldr	r3, [r3, #12]
 800febe:	2b02      	cmp	r3, #2
 800fec0:	d138      	bne.n	800ff34 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800fec2:	897b      	ldrh	r3, [r7, #10]
 800fec4:	09db      	lsrs	r3, r3, #7
 800fec6:	b29a      	uxth	r2, r3
 800fec8:	89bb      	ldrh	r3, [r7, #12]
 800feca:	4053      	eors	r3, r2
 800fecc:	b29b      	uxth	r3, r3
 800fece:	f003 0306 	and.w	r3, r3, #6
 800fed2:	2b00      	cmp	r3, #0
 800fed4:	d11c      	bne.n	800ff10 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800fed6:	897b      	ldrh	r3, [r7, #10]
 800fed8:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800feda:	687b      	ldr	r3, [r7, #4]
 800fedc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800fede:	1c5a      	adds	r2, r3, #1
 800fee0:	687b      	ldr	r3, [r7, #4]
 800fee2:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 800fee4:	687b      	ldr	r3, [r7, #4]
 800fee6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800fee8:	2b02      	cmp	r3, #2
 800feea:	d13b      	bne.n	800ff64 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800feec:	687b      	ldr	r3, [r7, #4]
 800feee:	2200      	movs	r2, #0
 800fef0:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800fef2:	687b      	ldr	r3, [r7, #4]
 800fef4:	681b      	ldr	r3, [r3, #0]
 800fef6:	2208      	movs	r2, #8
 800fef8:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800fefa:	687b      	ldr	r3, [r7, #4]
 800fefc:	2200      	movs	r2, #0
 800fefe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800ff02:	89ba      	ldrh	r2, [r7, #12]
 800ff04:	7bfb      	ldrb	r3, [r7, #15]
 800ff06:	4619      	mov	r1, r3
 800ff08:	6878      	ldr	r0, [r7, #4]
 800ff0a:	f7ff f8c3 	bl	800f094 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800ff0e:	e029      	b.n	800ff64 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800ff10:	893b      	ldrh	r3, [r7, #8]
 800ff12:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800ff14:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800ff18:	6878      	ldr	r0, [r7, #4]
 800ff1a:	f001 f803 	bl	8010f24 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	2200      	movs	r2, #0
 800ff22:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800ff26:	89ba      	ldrh	r2, [r7, #12]
 800ff28:	7bfb      	ldrb	r3, [r7, #15]
 800ff2a:	4619      	mov	r1, r3
 800ff2c:	6878      	ldr	r0, [r7, #4]
 800ff2e:	f7ff f8b1 	bl	800f094 <HAL_I2C_AddrCallback>
}
 800ff32:	e017      	b.n	800ff64 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800ff34:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800ff38:	6878      	ldr	r0, [r7, #4]
 800ff3a:	f000 fff3 	bl	8010f24 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	2200      	movs	r2, #0
 800ff42:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800ff46:	89ba      	ldrh	r2, [r7, #12]
 800ff48:	7bfb      	ldrb	r3, [r7, #15]
 800ff4a:	4619      	mov	r1, r3
 800ff4c:	6878      	ldr	r0, [r7, #4]
 800ff4e:	f7ff f8a1 	bl	800f094 <HAL_I2C_AddrCallback>
}
 800ff52:	e007      	b.n	800ff64 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800ff54:	687b      	ldr	r3, [r7, #4]
 800ff56:	681b      	ldr	r3, [r3, #0]
 800ff58:	2208      	movs	r2, #8
 800ff5a:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	2200      	movs	r2, #0
 800ff60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 800ff64:	bf00      	nop
 800ff66:	3710      	adds	r7, #16
 800ff68:	46bd      	mov	sp, r7
 800ff6a:	bd80      	pop	{r7, pc}

0800ff6c <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800ff6c:	b580      	push	{r7, lr}
 800ff6e:	b082      	sub	sp, #8
 800ff70:	af00      	add	r7, sp, #0
 800ff72:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800ff74:	687b      	ldr	r3, [r7, #4]
 800ff76:	2200      	movs	r2, #0
 800ff78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800ff7c:	687b      	ldr	r3, [r7, #4]
 800ff7e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ff82:	b2db      	uxtb	r3, r3
 800ff84:	2b21      	cmp	r3, #33	@ 0x21
 800ff86:	d115      	bne.n	800ffb4 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800ff88:	687b      	ldr	r3, [r7, #4]
 800ff8a:	2220      	movs	r2, #32
 800ff8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	2211      	movs	r2, #17
 800ff94:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 800ff96:	687b      	ldr	r3, [r7, #4]
 800ff98:	2200      	movs	r2, #0
 800ff9a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800ff9c:	2101      	movs	r1, #1
 800ff9e:	6878      	ldr	r0, [r7, #4]
 800ffa0:	f000 ffc0 	bl	8010f24 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ffa4:	687b      	ldr	r3, [r7, #4]
 800ffa6:	2200      	movs	r2, #0
 800ffa8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 800ffac:	6878      	ldr	r0, [r7, #4]
 800ffae:	f7ff f849 	bl	800f044 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800ffb2:	e014      	b.n	800ffde <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 800ffb4:	687b      	ldr	r3, [r7, #4]
 800ffb6:	2220      	movs	r2, #32
 800ffb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800ffbc:	687b      	ldr	r3, [r7, #4]
 800ffbe:	2212      	movs	r2, #18
 800ffc0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 800ffc2:	687b      	ldr	r3, [r7, #4]
 800ffc4:	2200      	movs	r2, #0
 800ffc6:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800ffc8:	2102      	movs	r1, #2
 800ffca:	6878      	ldr	r0, [r7, #4]
 800ffcc:	f000 ffaa 	bl	8010f24 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800ffd0:	687b      	ldr	r3, [r7, #4]
 800ffd2:	2200      	movs	r2, #0
 800ffd4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 800ffd8:	6878      	ldr	r0, [r7, #4]
 800ffda:	f7ff f83d 	bl	800f058 <HAL_I2C_MasterRxCpltCallback>
}
 800ffde:	bf00      	nop
 800ffe0:	3708      	adds	r7, #8
 800ffe2:	46bd      	mov	sp, r7
 800ffe4:	bd80      	pop	{r7, pc}

0800ffe6 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800ffe6:	b580      	push	{r7, lr}
 800ffe8:	b084      	sub	sp, #16
 800ffea:	af00      	add	r7, sp, #0
 800ffec:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800ffee:	687b      	ldr	r3, [r7, #4]
 800fff0:	681b      	ldr	r3, [r3, #0]
 800fff2:	681b      	ldr	r3, [r3, #0]
 800fff4:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800fff6:	687b      	ldr	r3, [r7, #4]
 800fff8:	2200      	movs	r2, #0
 800fffa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800fffe:	68fb      	ldr	r3, [r7, #12]
 8010000:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8010004:	2b00      	cmp	r3, #0
 8010006:	d008      	beq.n	801001a <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8010008:	687b      	ldr	r3, [r7, #4]
 801000a:	681b      	ldr	r3, [r3, #0]
 801000c:	681a      	ldr	r2, [r3, #0]
 801000e:	687b      	ldr	r3, [r7, #4]
 8010010:	681b      	ldr	r3, [r3, #0]
 8010012:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8010016:	601a      	str	r2, [r3, #0]
 8010018:	e00c      	b.n	8010034 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 801001a:	68fb      	ldr	r3, [r7, #12]
 801001c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8010020:	2b00      	cmp	r3, #0
 8010022:	d007      	beq.n	8010034 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	681b      	ldr	r3, [r3, #0]
 8010028:	681a      	ldr	r2, [r3, #0]
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	681b      	ldr	r3, [r3, #0]
 801002e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8010032:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 801003a:	b2db      	uxtb	r3, r3
 801003c:	2b29      	cmp	r3, #41	@ 0x29
 801003e:	d112      	bne.n	8010066 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8010040:	687b      	ldr	r3, [r7, #4]
 8010042:	2228      	movs	r2, #40	@ 0x28
 8010044:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8010048:	687b      	ldr	r3, [r7, #4]
 801004a:	2221      	movs	r2, #33	@ 0x21
 801004c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 801004e:	2101      	movs	r1, #1
 8010050:	6878      	ldr	r0, [r7, #4]
 8010052:	f000 ff67 	bl	8010f24 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8010056:	687b      	ldr	r3, [r7, #4]
 8010058:	2200      	movs	r2, #0
 801005a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 801005e:	6878      	ldr	r0, [r7, #4]
 8010060:	f7ff f804 	bl	800f06c <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8010064:	e017      	b.n	8010096 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8010066:	687b      	ldr	r3, [r7, #4]
 8010068:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 801006c:	b2db      	uxtb	r3, r3
 801006e:	2b2a      	cmp	r3, #42	@ 0x2a
 8010070:	d111      	bne.n	8010096 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8010072:	687b      	ldr	r3, [r7, #4]
 8010074:	2228      	movs	r2, #40	@ 0x28
 8010076:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 801007a:	687b      	ldr	r3, [r7, #4]
 801007c:	2222      	movs	r2, #34	@ 0x22
 801007e:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8010080:	2102      	movs	r1, #2
 8010082:	6878      	ldr	r0, [r7, #4]
 8010084:	f000 ff4e 	bl	8010f24 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8010088:	687b      	ldr	r3, [r7, #4]
 801008a:	2200      	movs	r2, #0
 801008c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8010090:	6878      	ldr	r0, [r7, #4]
 8010092:	f7fe fff5 	bl	800f080 <HAL_I2C_SlaveRxCpltCallback>
}
 8010096:	bf00      	nop
 8010098:	3710      	adds	r7, #16
 801009a:	46bd      	mov	sp, r7
 801009c:	bd80      	pop	{r7, pc}
	...

080100a0 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80100a0:	b580      	push	{r7, lr}
 80100a2:	b086      	sub	sp, #24
 80100a4:	af00      	add	r7, sp, #0
 80100a6:	6078      	str	r0, [r7, #4]
 80100a8:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 80100aa:	683b      	ldr	r3, [r7, #0]
 80100ac:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80100ae:	687b      	ldr	r3, [r7, #4]
 80100b0:	681b      	ldr	r3, [r3, #0]
 80100b2:	2220      	movs	r2, #32
 80100b4:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80100b6:	687b      	ldr	r3, [r7, #4]
 80100b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80100bc:	b2db      	uxtb	r3, r3
 80100be:	2b21      	cmp	r3, #33	@ 0x21
 80100c0:	d107      	bne.n	80100d2 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80100c2:	2101      	movs	r1, #1
 80100c4:	6878      	ldr	r0, [r7, #4]
 80100c6:	f000 ff2d 	bl	8010f24 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80100ca:	687b      	ldr	r3, [r7, #4]
 80100cc:	2211      	movs	r2, #17
 80100ce:	631a      	str	r2, [r3, #48]	@ 0x30
 80100d0:	e00c      	b.n	80100ec <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80100d2:	687b      	ldr	r3, [r7, #4]
 80100d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80100d8:	b2db      	uxtb	r3, r3
 80100da:	2b22      	cmp	r3, #34	@ 0x22
 80100dc:	d106      	bne.n	80100ec <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80100de:	2102      	movs	r1, #2
 80100e0:	6878      	ldr	r0, [r7, #4]
 80100e2:	f000 ff1f 	bl	8010f24 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80100e6:	687b      	ldr	r3, [r7, #4]
 80100e8:	2212      	movs	r2, #18
 80100ea:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80100ec:	687b      	ldr	r3, [r7, #4]
 80100ee:	681b      	ldr	r3, [r3, #0]
 80100f0:	6859      	ldr	r1, [r3, #4]
 80100f2:	687b      	ldr	r3, [r7, #4]
 80100f4:	681a      	ldr	r2, [r3, #0]
 80100f6:	4b4c      	ldr	r3, [pc, #304]	@ (8010228 <I2C_ITMasterCplt+0x188>)
 80100f8:	400b      	ands	r3, r1
 80100fa:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	2200      	movs	r2, #0
 8010100:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8010102:	687b      	ldr	r3, [r7, #4]
 8010104:	4a49      	ldr	r2, [pc, #292]	@ (801022c <I2C_ITMasterCplt+0x18c>)
 8010106:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8010108:	697b      	ldr	r3, [r7, #20]
 801010a:	f003 0310 	and.w	r3, r3, #16
 801010e:	2b00      	cmp	r3, #0
 8010110:	d009      	beq.n	8010126 <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8010112:	687b      	ldr	r3, [r7, #4]
 8010114:	681b      	ldr	r3, [r3, #0]
 8010116:	2210      	movs	r2, #16
 8010118:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801011a:	687b      	ldr	r3, [r7, #4]
 801011c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801011e:	f043 0204 	orr.w	r2, r3, #4
 8010122:	687b      	ldr	r3, [r7, #4]
 8010124:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8010126:	687b      	ldr	r3, [r7, #4]
 8010128:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 801012c:	b2db      	uxtb	r3, r3
 801012e:	2b60      	cmp	r3, #96	@ 0x60
 8010130:	d10a      	bne.n	8010148 <I2C_ITMasterCplt+0xa8>
 8010132:	697b      	ldr	r3, [r7, #20]
 8010134:	f003 0304 	and.w	r3, r3, #4
 8010138:	2b00      	cmp	r3, #0
 801013a:	d005      	beq.n	8010148 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	681b      	ldr	r3, [r3, #0]
 8010140:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010142:	b2db      	uxtb	r3, r3
 8010144:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8010146:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8010148:	6878      	ldr	r0, [r7, #4]
 801014a:	f000 fc30 	bl	80109ae <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 801014e:	687b      	ldr	r3, [r7, #4]
 8010150:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010152:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8010154:	687b      	ldr	r3, [r7, #4]
 8010156:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 801015a:	b2db      	uxtb	r3, r3
 801015c:	2b60      	cmp	r3, #96	@ 0x60
 801015e:	d002      	beq.n	8010166 <I2C_ITMasterCplt+0xc6>
 8010160:	693b      	ldr	r3, [r7, #16]
 8010162:	2b00      	cmp	r3, #0
 8010164:	d006      	beq.n	8010174 <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8010166:	687b      	ldr	r3, [r7, #4]
 8010168:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801016a:	4619      	mov	r1, r3
 801016c:	6878      	ldr	r0, [r7, #4]
 801016e:	f000 fb07 	bl	8010780 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8010172:	e054      	b.n	801021e <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8010174:	687b      	ldr	r3, [r7, #4]
 8010176:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 801017a:	b2db      	uxtb	r3, r3
 801017c:	2b21      	cmp	r3, #33	@ 0x21
 801017e:	d124      	bne.n	80101ca <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 8010180:	687b      	ldr	r3, [r7, #4]
 8010182:	2220      	movs	r2, #32
 8010184:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8010188:	687b      	ldr	r3, [r7, #4]
 801018a:	2200      	movs	r2, #0
 801018c:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 801018e:	687b      	ldr	r3, [r7, #4]
 8010190:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8010194:	b2db      	uxtb	r3, r3
 8010196:	2b40      	cmp	r3, #64	@ 0x40
 8010198:	d10b      	bne.n	80101b2 <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 801019a:	687b      	ldr	r3, [r7, #4]
 801019c:	2200      	movs	r2, #0
 801019e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80101a2:	687b      	ldr	r3, [r7, #4]
 80101a4:	2200      	movs	r2, #0
 80101a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 80101aa:	6878      	ldr	r0, [r7, #4]
 80101ac:	f7fe ff8a 	bl	800f0c4 <HAL_I2C_MemTxCpltCallback>
}
 80101b0:	e035      	b.n	801021e <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80101b2:	687b      	ldr	r3, [r7, #4]
 80101b4:	2200      	movs	r2, #0
 80101b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80101ba:	687b      	ldr	r3, [r7, #4]
 80101bc:	2200      	movs	r2, #0
 80101be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80101c2:	6878      	ldr	r0, [r7, #4]
 80101c4:	f7fe ff3e 	bl	800f044 <HAL_I2C_MasterTxCpltCallback>
}
 80101c8:	e029      	b.n	801021e <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80101ca:	687b      	ldr	r3, [r7, #4]
 80101cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80101d0:	b2db      	uxtb	r3, r3
 80101d2:	2b22      	cmp	r3, #34	@ 0x22
 80101d4:	d123      	bne.n	801021e <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 80101d6:	687b      	ldr	r3, [r7, #4]
 80101d8:	2220      	movs	r2, #32
 80101da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80101de:	687b      	ldr	r3, [r7, #4]
 80101e0:	2200      	movs	r2, #0
 80101e2:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80101e4:	687b      	ldr	r3, [r7, #4]
 80101e6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80101ea:	b2db      	uxtb	r3, r3
 80101ec:	2b40      	cmp	r3, #64	@ 0x40
 80101ee:	d10b      	bne.n	8010208 <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80101f0:	687b      	ldr	r3, [r7, #4]
 80101f2:	2200      	movs	r2, #0
 80101f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80101f8:	687b      	ldr	r3, [r7, #4]
 80101fa:	2200      	movs	r2, #0
 80101fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8010200:	6878      	ldr	r0, [r7, #4]
 8010202:	f7f6 fa3d 	bl	8006680 <HAL_I2C_MemRxCpltCallback>
}
 8010206:	e00a      	b.n	801021e <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8010208:	687b      	ldr	r3, [r7, #4]
 801020a:	2200      	movs	r2, #0
 801020c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8010210:	687b      	ldr	r3, [r7, #4]
 8010212:	2200      	movs	r2, #0
 8010214:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8010218:	6878      	ldr	r0, [r7, #4]
 801021a:	f7fe ff1d 	bl	800f058 <HAL_I2C_MasterRxCpltCallback>
}
 801021e:	bf00      	nop
 8010220:	3718      	adds	r7, #24
 8010222:	46bd      	mov	sp, r7
 8010224:	bd80      	pop	{r7, pc}
 8010226:	bf00      	nop
 8010228:	fe00e800 	.word	0xfe00e800
 801022c:	ffff0000 	.word	0xffff0000

08010230 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8010230:	b580      	push	{r7, lr}
 8010232:	b086      	sub	sp, #24
 8010234:	af00      	add	r7, sp, #0
 8010236:	6078      	str	r0, [r7, #4]
 8010238:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 801023a:	687b      	ldr	r3, [r7, #4]
 801023c:	681b      	ldr	r3, [r3, #0]
 801023e:	681b      	ldr	r3, [r3, #0]
 8010240:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8010242:	683b      	ldr	r3, [r7, #0]
 8010244:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8010246:	687b      	ldr	r3, [r7, #4]
 8010248:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801024a:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 801024c:	687b      	ldr	r3, [r7, #4]
 801024e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8010252:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8010254:	687b      	ldr	r3, [r7, #4]
 8010256:	681b      	ldr	r3, [r3, #0]
 8010258:	2220      	movs	r2, #32
 801025a:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 801025c:	7afb      	ldrb	r3, [r7, #11]
 801025e:	2b21      	cmp	r3, #33	@ 0x21
 8010260:	d002      	beq.n	8010268 <I2C_ITSlaveCplt+0x38>
 8010262:	7afb      	ldrb	r3, [r7, #11]
 8010264:	2b29      	cmp	r3, #41	@ 0x29
 8010266:	d108      	bne.n	801027a <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8010268:	f248 0101 	movw	r1, #32769	@ 0x8001
 801026c:	6878      	ldr	r0, [r7, #4]
 801026e:	f000 fe59 	bl	8010f24 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8010272:	687b      	ldr	r3, [r7, #4]
 8010274:	2221      	movs	r2, #33	@ 0x21
 8010276:	631a      	str	r2, [r3, #48]	@ 0x30
 8010278:	e019      	b.n	80102ae <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 801027a:	7afb      	ldrb	r3, [r7, #11]
 801027c:	2b22      	cmp	r3, #34	@ 0x22
 801027e:	d002      	beq.n	8010286 <I2C_ITSlaveCplt+0x56>
 8010280:	7afb      	ldrb	r3, [r7, #11]
 8010282:	2b2a      	cmp	r3, #42	@ 0x2a
 8010284:	d108      	bne.n	8010298 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8010286:	f248 0102 	movw	r1, #32770	@ 0x8002
 801028a:	6878      	ldr	r0, [r7, #4]
 801028c:	f000 fe4a 	bl	8010f24 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8010290:	687b      	ldr	r3, [r7, #4]
 8010292:	2222      	movs	r2, #34	@ 0x22
 8010294:	631a      	str	r2, [r3, #48]	@ 0x30
 8010296:	e00a      	b.n	80102ae <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8010298:	7afb      	ldrb	r3, [r7, #11]
 801029a:	2b28      	cmp	r3, #40	@ 0x28
 801029c:	d107      	bne.n	80102ae <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 801029e:	f248 0103 	movw	r1, #32771	@ 0x8003
 80102a2:	6878      	ldr	r0, [r7, #4]
 80102a4:	f000 fe3e 	bl	8010f24 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 80102a8:	687b      	ldr	r3, [r7, #4]
 80102aa:	2200      	movs	r2, #0
 80102ac:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80102ae:	687b      	ldr	r3, [r7, #4]
 80102b0:	681b      	ldr	r3, [r3, #0]
 80102b2:	685a      	ldr	r2, [r3, #4]
 80102b4:	687b      	ldr	r3, [r7, #4]
 80102b6:	681b      	ldr	r3, [r3, #0]
 80102b8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80102bc:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80102be:	687b      	ldr	r3, [r7, #4]
 80102c0:	681b      	ldr	r3, [r3, #0]
 80102c2:	6859      	ldr	r1, [r3, #4]
 80102c4:	687b      	ldr	r3, [r7, #4]
 80102c6:	681a      	ldr	r2, [r3, #0]
 80102c8:	4b7f      	ldr	r3, [pc, #508]	@ (80104c8 <I2C_ITSlaveCplt+0x298>)
 80102ca:	400b      	ands	r3, r1
 80102cc:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80102ce:	6878      	ldr	r0, [r7, #4]
 80102d0:	f000 fb6d 	bl	80109ae <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80102d4:	693b      	ldr	r3, [r7, #16]
 80102d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80102da:	2b00      	cmp	r3, #0
 80102dc:	d07a      	beq.n	80103d4 <I2C_ITSlaveCplt+0x1a4>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80102de:	687b      	ldr	r3, [r7, #4]
 80102e0:	681b      	ldr	r3, [r3, #0]
 80102e2:	681a      	ldr	r2, [r3, #0]
 80102e4:	687b      	ldr	r3, [r7, #4]
 80102e6:	681b      	ldr	r3, [r3, #0]
 80102e8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80102ec:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80102ee:	687b      	ldr	r3, [r7, #4]
 80102f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80102f2:	2b00      	cmp	r3, #0
 80102f4:	f000 8111 	beq.w	801051a <I2C_ITSlaveCplt+0x2ea>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80102f8:	687b      	ldr	r3, [r7, #4]
 80102fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80102fc:	681b      	ldr	r3, [r3, #0]
 80102fe:	4a73      	ldr	r2, [pc, #460]	@ (80104cc <I2C_ITSlaveCplt+0x29c>)
 8010300:	4293      	cmp	r3, r2
 8010302:	d059      	beq.n	80103b8 <I2C_ITSlaveCplt+0x188>
 8010304:	687b      	ldr	r3, [r7, #4]
 8010306:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010308:	681b      	ldr	r3, [r3, #0]
 801030a:	4a71      	ldr	r2, [pc, #452]	@ (80104d0 <I2C_ITSlaveCplt+0x2a0>)
 801030c:	4293      	cmp	r3, r2
 801030e:	d053      	beq.n	80103b8 <I2C_ITSlaveCplt+0x188>
 8010310:	687b      	ldr	r3, [r7, #4]
 8010312:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010314:	681b      	ldr	r3, [r3, #0]
 8010316:	4a6f      	ldr	r2, [pc, #444]	@ (80104d4 <I2C_ITSlaveCplt+0x2a4>)
 8010318:	4293      	cmp	r3, r2
 801031a:	d04d      	beq.n	80103b8 <I2C_ITSlaveCplt+0x188>
 801031c:	687b      	ldr	r3, [r7, #4]
 801031e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010320:	681b      	ldr	r3, [r3, #0]
 8010322:	4a6d      	ldr	r2, [pc, #436]	@ (80104d8 <I2C_ITSlaveCplt+0x2a8>)
 8010324:	4293      	cmp	r3, r2
 8010326:	d047      	beq.n	80103b8 <I2C_ITSlaveCplt+0x188>
 8010328:	687b      	ldr	r3, [r7, #4]
 801032a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801032c:	681b      	ldr	r3, [r3, #0]
 801032e:	4a6b      	ldr	r2, [pc, #428]	@ (80104dc <I2C_ITSlaveCplt+0x2ac>)
 8010330:	4293      	cmp	r3, r2
 8010332:	d041      	beq.n	80103b8 <I2C_ITSlaveCplt+0x188>
 8010334:	687b      	ldr	r3, [r7, #4]
 8010336:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010338:	681b      	ldr	r3, [r3, #0]
 801033a:	4a69      	ldr	r2, [pc, #420]	@ (80104e0 <I2C_ITSlaveCplt+0x2b0>)
 801033c:	4293      	cmp	r3, r2
 801033e:	d03b      	beq.n	80103b8 <I2C_ITSlaveCplt+0x188>
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010344:	681b      	ldr	r3, [r3, #0]
 8010346:	4a67      	ldr	r2, [pc, #412]	@ (80104e4 <I2C_ITSlaveCplt+0x2b4>)
 8010348:	4293      	cmp	r3, r2
 801034a:	d035      	beq.n	80103b8 <I2C_ITSlaveCplt+0x188>
 801034c:	687b      	ldr	r3, [r7, #4]
 801034e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010350:	681b      	ldr	r3, [r3, #0]
 8010352:	4a65      	ldr	r2, [pc, #404]	@ (80104e8 <I2C_ITSlaveCplt+0x2b8>)
 8010354:	4293      	cmp	r3, r2
 8010356:	d02f      	beq.n	80103b8 <I2C_ITSlaveCplt+0x188>
 8010358:	687b      	ldr	r3, [r7, #4]
 801035a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801035c:	681b      	ldr	r3, [r3, #0]
 801035e:	4a63      	ldr	r2, [pc, #396]	@ (80104ec <I2C_ITSlaveCplt+0x2bc>)
 8010360:	4293      	cmp	r3, r2
 8010362:	d029      	beq.n	80103b8 <I2C_ITSlaveCplt+0x188>
 8010364:	687b      	ldr	r3, [r7, #4]
 8010366:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010368:	681b      	ldr	r3, [r3, #0]
 801036a:	4a61      	ldr	r2, [pc, #388]	@ (80104f0 <I2C_ITSlaveCplt+0x2c0>)
 801036c:	4293      	cmp	r3, r2
 801036e:	d023      	beq.n	80103b8 <I2C_ITSlaveCplt+0x188>
 8010370:	687b      	ldr	r3, [r7, #4]
 8010372:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010374:	681b      	ldr	r3, [r3, #0]
 8010376:	4a5f      	ldr	r2, [pc, #380]	@ (80104f4 <I2C_ITSlaveCplt+0x2c4>)
 8010378:	4293      	cmp	r3, r2
 801037a:	d01d      	beq.n	80103b8 <I2C_ITSlaveCplt+0x188>
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010380:	681b      	ldr	r3, [r3, #0]
 8010382:	4a5d      	ldr	r2, [pc, #372]	@ (80104f8 <I2C_ITSlaveCplt+0x2c8>)
 8010384:	4293      	cmp	r3, r2
 8010386:	d017      	beq.n	80103b8 <I2C_ITSlaveCplt+0x188>
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801038c:	681b      	ldr	r3, [r3, #0]
 801038e:	4a5b      	ldr	r2, [pc, #364]	@ (80104fc <I2C_ITSlaveCplt+0x2cc>)
 8010390:	4293      	cmp	r3, r2
 8010392:	d011      	beq.n	80103b8 <I2C_ITSlaveCplt+0x188>
 8010394:	687b      	ldr	r3, [r7, #4]
 8010396:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010398:	681b      	ldr	r3, [r3, #0]
 801039a:	4a59      	ldr	r2, [pc, #356]	@ (8010500 <I2C_ITSlaveCplt+0x2d0>)
 801039c:	4293      	cmp	r3, r2
 801039e:	d00b      	beq.n	80103b8 <I2C_ITSlaveCplt+0x188>
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80103a4:	681b      	ldr	r3, [r3, #0]
 80103a6:	4a57      	ldr	r2, [pc, #348]	@ (8010504 <I2C_ITSlaveCplt+0x2d4>)
 80103a8:	4293      	cmp	r3, r2
 80103aa:	d005      	beq.n	80103b8 <I2C_ITSlaveCplt+0x188>
 80103ac:	687b      	ldr	r3, [r7, #4]
 80103ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80103b0:	681b      	ldr	r3, [r3, #0]
 80103b2:	4a55      	ldr	r2, [pc, #340]	@ (8010508 <I2C_ITSlaveCplt+0x2d8>)
 80103b4:	4293      	cmp	r3, r2
 80103b6:	d105      	bne.n	80103c4 <I2C_ITSlaveCplt+0x194>
 80103b8:	687b      	ldr	r3, [r7, #4]
 80103ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80103bc:	681b      	ldr	r3, [r3, #0]
 80103be:	685b      	ldr	r3, [r3, #4]
 80103c0:	b29b      	uxth	r3, r3
 80103c2:	e004      	b.n	80103ce <I2C_ITSlaveCplt+0x19e>
 80103c4:	687b      	ldr	r3, [r7, #4]
 80103c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80103c8:	681b      	ldr	r3, [r3, #0]
 80103ca:	685b      	ldr	r3, [r3, #4]
 80103cc:	b29b      	uxth	r3, r3
 80103ce:	687a      	ldr	r2, [r7, #4]
 80103d0:	8553      	strh	r3, [r2, #42]	@ 0x2a
 80103d2:	e0a2      	b.n	801051a <I2C_ITSlaveCplt+0x2ea>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80103d4:	693b      	ldr	r3, [r7, #16]
 80103d6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80103da:	2b00      	cmp	r3, #0
 80103dc:	f000 809d 	beq.w	801051a <I2C_ITSlaveCplt+0x2ea>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80103e0:	687b      	ldr	r3, [r7, #4]
 80103e2:	681b      	ldr	r3, [r3, #0]
 80103e4:	681a      	ldr	r2, [r3, #0]
 80103e6:	687b      	ldr	r3, [r7, #4]
 80103e8:	681b      	ldr	r3, [r3, #0]
 80103ea:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80103ee:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80103f0:	687b      	ldr	r3, [r7, #4]
 80103f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80103f4:	2b00      	cmp	r3, #0
 80103f6:	f000 8090 	beq.w	801051a <I2C_ITSlaveCplt+0x2ea>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80103fa:	687b      	ldr	r3, [r7, #4]
 80103fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80103fe:	681b      	ldr	r3, [r3, #0]
 8010400:	4a32      	ldr	r2, [pc, #200]	@ (80104cc <I2C_ITSlaveCplt+0x29c>)
 8010402:	4293      	cmp	r3, r2
 8010404:	d059      	beq.n	80104ba <I2C_ITSlaveCplt+0x28a>
 8010406:	687b      	ldr	r3, [r7, #4]
 8010408:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801040a:	681b      	ldr	r3, [r3, #0]
 801040c:	4a30      	ldr	r2, [pc, #192]	@ (80104d0 <I2C_ITSlaveCplt+0x2a0>)
 801040e:	4293      	cmp	r3, r2
 8010410:	d053      	beq.n	80104ba <I2C_ITSlaveCplt+0x28a>
 8010412:	687b      	ldr	r3, [r7, #4]
 8010414:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010416:	681b      	ldr	r3, [r3, #0]
 8010418:	4a2e      	ldr	r2, [pc, #184]	@ (80104d4 <I2C_ITSlaveCplt+0x2a4>)
 801041a:	4293      	cmp	r3, r2
 801041c:	d04d      	beq.n	80104ba <I2C_ITSlaveCplt+0x28a>
 801041e:	687b      	ldr	r3, [r7, #4]
 8010420:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010422:	681b      	ldr	r3, [r3, #0]
 8010424:	4a2c      	ldr	r2, [pc, #176]	@ (80104d8 <I2C_ITSlaveCplt+0x2a8>)
 8010426:	4293      	cmp	r3, r2
 8010428:	d047      	beq.n	80104ba <I2C_ITSlaveCplt+0x28a>
 801042a:	687b      	ldr	r3, [r7, #4]
 801042c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801042e:	681b      	ldr	r3, [r3, #0]
 8010430:	4a2a      	ldr	r2, [pc, #168]	@ (80104dc <I2C_ITSlaveCplt+0x2ac>)
 8010432:	4293      	cmp	r3, r2
 8010434:	d041      	beq.n	80104ba <I2C_ITSlaveCplt+0x28a>
 8010436:	687b      	ldr	r3, [r7, #4]
 8010438:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801043a:	681b      	ldr	r3, [r3, #0]
 801043c:	4a28      	ldr	r2, [pc, #160]	@ (80104e0 <I2C_ITSlaveCplt+0x2b0>)
 801043e:	4293      	cmp	r3, r2
 8010440:	d03b      	beq.n	80104ba <I2C_ITSlaveCplt+0x28a>
 8010442:	687b      	ldr	r3, [r7, #4]
 8010444:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010446:	681b      	ldr	r3, [r3, #0]
 8010448:	4a26      	ldr	r2, [pc, #152]	@ (80104e4 <I2C_ITSlaveCplt+0x2b4>)
 801044a:	4293      	cmp	r3, r2
 801044c:	d035      	beq.n	80104ba <I2C_ITSlaveCplt+0x28a>
 801044e:	687b      	ldr	r3, [r7, #4]
 8010450:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010452:	681b      	ldr	r3, [r3, #0]
 8010454:	4a24      	ldr	r2, [pc, #144]	@ (80104e8 <I2C_ITSlaveCplt+0x2b8>)
 8010456:	4293      	cmp	r3, r2
 8010458:	d02f      	beq.n	80104ba <I2C_ITSlaveCplt+0x28a>
 801045a:	687b      	ldr	r3, [r7, #4]
 801045c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801045e:	681b      	ldr	r3, [r3, #0]
 8010460:	4a22      	ldr	r2, [pc, #136]	@ (80104ec <I2C_ITSlaveCplt+0x2bc>)
 8010462:	4293      	cmp	r3, r2
 8010464:	d029      	beq.n	80104ba <I2C_ITSlaveCplt+0x28a>
 8010466:	687b      	ldr	r3, [r7, #4]
 8010468:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801046a:	681b      	ldr	r3, [r3, #0]
 801046c:	4a20      	ldr	r2, [pc, #128]	@ (80104f0 <I2C_ITSlaveCplt+0x2c0>)
 801046e:	4293      	cmp	r3, r2
 8010470:	d023      	beq.n	80104ba <I2C_ITSlaveCplt+0x28a>
 8010472:	687b      	ldr	r3, [r7, #4]
 8010474:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010476:	681b      	ldr	r3, [r3, #0]
 8010478:	4a1e      	ldr	r2, [pc, #120]	@ (80104f4 <I2C_ITSlaveCplt+0x2c4>)
 801047a:	4293      	cmp	r3, r2
 801047c:	d01d      	beq.n	80104ba <I2C_ITSlaveCplt+0x28a>
 801047e:	687b      	ldr	r3, [r7, #4]
 8010480:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010482:	681b      	ldr	r3, [r3, #0]
 8010484:	4a1c      	ldr	r2, [pc, #112]	@ (80104f8 <I2C_ITSlaveCplt+0x2c8>)
 8010486:	4293      	cmp	r3, r2
 8010488:	d017      	beq.n	80104ba <I2C_ITSlaveCplt+0x28a>
 801048a:	687b      	ldr	r3, [r7, #4]
 801048c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801048e:	681b      	ldr	r3, [r3, #0]
 8010490:	4a1a      	ldr	r2, [pc, #104]	@ (80104fc <I2C_ITSlaveCplt+0x2cc>)
 8010492:	4293      	cmp	r3, r2
 8010494:	d011      	beq.n	80104ba <I2C_ITSlaveCplt+0x28a>
 8010496:	687b      	ldr	r3, [r7, #4]
 8010498:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801049a:	681b      	ldr	r3, [r3, #0]
 801049c:	4a18      	ldr	r2, [pc, #96]	@ (8010500 <I2C_ITSlaveCplt+0x2d0>)
 801049e:	4293      	cmp	r3, r2
 80104a0:	d00b      	beq.n	80104ba <I2C_ITSlaveCplt+0x28a>
 80104a2:	687b      	ldr	r3, [r7, #4]
 80104a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80104a6:	681b      	ldr	r3, [r3, #0]
 80104a8:	4a16      	ldr	r2, [pc, #88]	@ (8010504 <I2C_ITSlaveCplt+0x2d4>)
 80104aa:	4293      	cmp	r3, r2
 80104ac:	d005      	beq.n	80104ba <I2C_ITSlaveCplt+0x28a>
 80104ae:	687b      	ldr	r3, [r7, #4]
 80104b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80104b2:	681b      	ldr	r3, [r3, #0]
 80104b4:	4a14      	ldr	r2, [pc, #80]	@ (8010508 <I2C_ITSlaveCplt+0x2d8>)
 80104b6:	4293      	cmp	r3, r2
 80104b8:	d128      	bne.n	801050c <I2C_ITSlaveCplt+0x2dc>
 80104ba:	687b      	ldr	r3, [r7, #4]
 80104bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80104be:	681b      	ldr	r3, [r3, #0]
 80104c0:	685b      	ldr	r3, [r3, #4]
 80104c2:	b29b      	uxth	r3, r3
 80104c4:	e027      	b.n	8010516 <I2C_ITSlaveCplt+0x2e6>
 80104c6:	bf00      	nop
 80104c8:	fe00e800 	.word	0xfe00e800
 80104cc:	40020010 	.word	0x40020010
 80104d0:	40020028 	.word	0x40020028
 80104d4:	40020040 	.word	0x40020040
 80104d8:	40020058 	.word	0x40020058
 80104dc:	40020070 	.word	0x40020070
 80104e0:	40020088 	.word	0x40020088
 80104e4:	400200a0 	.word	0x400200a0
 80104e8:	400200b8 	.word	0x400200b8
 80104ec:	40020410 	.word	0x40020410
 80104f0:	40020428 	.word	0x40020428
 80104f4:	40020440 	.word	0x40020440
 80104f8:	40020458 	.word	0x40020458
 80104fc:	40020470 	.word	0x40020470
 8010500:	40020488 	.word	0x40020488
 8010504:	400204a0 	.word	0x400204a0
 8010508:	400204b8 	.word	0x400204b8
 801050c:	687b      	ldr	r3, [r7, #4]
 801050e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010510:	681b      	ldr	r3, [r3, #0]
 8010512:	685b      	ldr	r3, [r3, #4]
 8010514:	b29b      	uxth	r3, r3
 8010516:	687a      	ldr	r2, [r7, #4]
 8010518:	8553      	strh	r3, [r2, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 801051a:	697b      	ldr	r3, [r7, #20]
 801051c:	f003 0304 	and.w	r3, r3, #4
 8010520:	2b00      	cmp	r3, #0
 8010522:	d020      	beq.n	8010566 <I2C_ITSlaveCplt+0x336>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8010524:	697b      	ldr	r3, [r7, #20]
 8010526:	f023 0304 	bic.w	r3, r3, #4
 801052a:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 801052c:	687b      	ldr	r3, [r7, #4]
 801052e:	681b      	ldr	r3, [r3, #0]
 8010530:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010532:	687b      	ldr	r3, [r7, #4]
 8010534:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010536:	b2d2      	uxtb	r2, r2
 8010538:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 801053a:	687b      	ldr	r3, [r7, #4]
 801053c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801053e:	1c5a      	adds	r2, r3, #1
 8010540:	687b      	ldr	r3, [r7, #4]
 8010542:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8010544:	687b      	ldr	r3, [r7, #4]
 8010546:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010548:	2b00      	cmp	r3, #0
 801054a:	d00c      	beq.n	8010566 <I2C_ITSlaveCplt+0x336>
    {
      hi2c->XferSize--;
 801054c:	687b      	ldr	r3, [r7, #4]
 801054e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010550:	3b01      	subs	r3, #1
 8010552:	b29a      	uxth	r2, r3
 8010554:	687b      	ldr	r3, [r7, #4]
 8010556:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8010558:	687b      	ldr	r3, [r7, #4]
 801055a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801055c:	b29b      	uxth	r3, r3
 801055e:	3b01      	subs	r3, #1
 8010560:	b29a      	uxth	r2, r3
 8010562:	687b      	ldr	r3, [r7, #4]
 8010564:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8010566:	687b      	ldr	r3, [r7, #4]
 8010568:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801056a:	b29b      	uxth	r3, r3
 801056c:	2b00      	cmp	r3, #0
 801056e:	d005      	beq.n	801057c <I2C_ITSlaveCplt+0x34c>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8010570:	687b      	ldr	r3, [r7, #4]
 8010572:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010574:	f043 0204 	orr.w	r2, r3, #4
 8010578:	687b      	ldr	r3, [r7, #4]
 801057a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 801057c:	697b      	ldr	r3, [r7, #20]
 801057e:	f003 0310 	and.w	r3, r3, #16
 8010582:	2b00      	cmp	r3, #0
 8010584:	d049      	beq.n	801061a <I2C_ITSlaveCplt+0x3ea>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8010586:	693b      	ldr	r3, [r7, #16]
 8010588:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 801058c:	2b00      	cmp	r3, #0
 801058e:	d044      	beq.n	801061a <I2C_ITSlaveCplt+0x3ea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8010590:	687b      	ldr	r3, [r7, #4]
 8010592:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010594:	b29b      	uxth	r3, r3
 8010596:	2b00      	cmp	r3, #0
 8010598:	d128      	bne.n	80105ec <I2C_ITSlaveCplt+0x3bc>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 801059a:	687b      	ldr	r3, [r7, #4]
 801059c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80105a0:	b2db      	uxtb	r3, r3
 80105a2:	2b28      	cmp	r3, #40	@ 0x28
 80105a4:	d108      	bne.n	80105b8 <I2C_ITSlaveCplt+0x388>
 80105a6:	68fb      	ldr	r3, [r7, #12]
 80105a8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80105ac:	d104      	bne.n	80105b8 <I2C_ITSlaveCplt+0x388>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80105ae:	6979      	ldr	r1, [r7, #20]
 80105b0:	6878      	ldr	r0, [r7, #4]
 80105b2:	f000 f891 	bl	80106d8 <I2C_ITListenCplt>
 80105b6:	e030      	b.n	801061a <I2C_ITSlaveCplt+0x3ea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80105b8:	687b      	ldr	r3, [r7, #4]
 80105ba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80105be:	b2db      	uxtb	r3, r3
 80105c0:	2b29      	cmp	r3, #41	@ 0x29
 80105c2:	d10e      	bne.n	80105e2 <I2C_ITSlaveCplt+0x3b2>
 80105c4:	68fb      	ldr	r3, [r7, #12]
 80105c6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80105ca:	d00a      	beq.n	80105e2 <I2C_ITSlaveCplt+0x3b2>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80105cc:	687b      	ldr	r3, [r7, #4]
 80105ce:	681b      	ldr	r3, [r3, #0]
 80105d0:	2210      	movs	r2, #16
 80105d2:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80105d4:	6878      	ldr	r0, [r7, #4]
 80105d6:	f000 f9ea 	bl	80109ae <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80105da:	6878      	ldr	r0, [r7, #4]
 80105dc:	f7ff fd03 	bl	800ffe6 <I2C_ITSlaveSeqCplt>
 80105e0:	e01b      	b.n	801061a <I2C_ITSlaveCplt+0x3ea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80105e2:	687b      	ldr	r3, [r7, #4]
 80105e4:	681b      	ldr	r3, [r3, #0]
 80105e6:	2210      	movs	r2, #16
 80105e8:	61da      	str	r2, [r3, #28]
 80105ea:	e016      	b.n	801061a <I2C_ITSlaveCplt+0x3ea>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80105ec:	687b      	ldr	r3, [r7, #4]
 80105ee:	681b      	ldr	r3, [r3, #0]
 80105f0:	2210      	movs	r2, #16
 80105f2:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80105f4:	687b      	ldr	r3, [r7, #4]
 80105f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80105f8:	f043 0204 	orr.w	r2, r3, #4
 80105fc:	687b      	ldr	r3, [r7, #4]
 80105fe:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8010600:	68fb      	ldr	r3, [r7, #12]
 8010602:	2b00      	cmp	r3, #0
 8010604:	d003      	beq.n	801060e <I2C_ITSlaveCplt+0x3de>
 8010606:	68fb      	ldr	r3, [r7, #12]
 8010608:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801060c:	d105      	bne.n	801061a <I2C_ITSlaveCplt+0x3ea>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 801060e:	687b      	ldr	r3, [r7, #4]
 8010610:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010612:	4619      	mov	r1, r3
 8010614:	6878      	ldr	r0, [r7, #4]
 8010616:	f000 f8b3 	bl	8010780 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 801061a:	687b      	ldr	r3, [r7, #4]
 801061c:	2200      	movs	r2, #0
 801061e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8010622:	687b      	ldr	r3, [r7, #4]
 8010624:	2200      	movs	r2, #0
 8010626:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8010628:	687b      	ldr	r3, [r7, #4]
 801062a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801062c:	2b00      	cmp	r3, #0
 801062e:	d010      	beq.n	8010652 <I2C_ITSlaveCplt+0x422>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8010630:	687b      	ldr	r3, [r7, #4]
 8010632:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010634:	4619      	mov	r1, r3
 8010636:	6878      	ldr	r0, [r7, #4]
 8010638:	f000 f8a2 	bl	8010780 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 801063c:	687b      	ldr	r3, [r7, #4]
 801063e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8010642:	b2db      	uxtb	r3, r3
 8010644:	2b28      	cmp	r3, #40	@ 0x28
 8010646:	d141      	bne.n	80106cc <I2C_ITSlaveCplt+0x49c>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8010648:	6979      	ldr	r1, [r7, #20]
 801064a:	6878      	ldr	r0, [r7, #4]
 801064c:	f000 f844 	bl	80106d8 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8010650:	e03c      	b.n	80106cc <I2C_ITSlaveCplt+0x49c>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8010652:	687b      	ldr	r3, [r7, #4]
 8010654:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010656:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 801065a:	d014      	beq.n	8010686 <I2C_ITSlaveCplt+0x456>
    I2C_ITSlaveSeqCplt(hi2c);
 801065c:	6878      	ldr	r0, [r7, #4]
 801065e:	f7ff fcc2 	bl	800ffe6 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8010662:	687b      	ldr	r3, [r7, #4]
 8010664:	4a1b      	ldr	r2, [pc, #108]	@ (80106d4 <I2C_ITSlaveCplt+0x4a4>)
 8010666:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8010668:	687b      	ldr	r3, [r7, #4]
 801066a:	2220      	movs	r2, #32
 801066c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8010670:	687b      	ldr	r3, [r7, #4]
 8010672:	2200      	movs	r2, #0
 8010674:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8010676:	687b      	ldr	r3, [r7, #4]
 8010678:	2200      	movs	r2, #0
 801067a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 801067e:	6878      	ldr	r0, [r7, #4]
 8010680:	f7fe fd16 	bl	800f0b0 <HAL_I2C_ListenCpltCallback>
}
 8010684:	e022      	b.n	80106cc <I2C_ITSlaveCplt+0x49c>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8010686:	687b      	ldr	r3, [r7, #4]
 8010688:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 801068c:	b2db      	uxtb	r3, r3
 801068e:	2b22      	cmp	r3, #34	@ 0x22
 8010690:	d10e      	bne.n	80106b0 <I2C_ITSlaveCplt+0x480>
    hi2c->State = HAL_I2C_STATE_READY;
 8010692:	687b      	ldr	r3, [r7, #4]
 8010694:	2220      	movs	r2, #32
 8010696:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 801069a:	687b      	ldr	r3, [r7, #4]
 801069c:	2200      	movs	r2, #0
 801069e:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80106a0:	687b      	ldr	r3, [r7, #4]
 80106a2:	2200      	movs	r2, #0
 80106a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80106a8:	6878      	ldr	r0, [r7, #4]
 80106aa:	f7fe fce9 	bl	800f080 <HAL_I2C_SlaveRxCpltCallback>
}
 80106ae:	e00d      	b.n	80106cc <I2C_ITSlaveCplt+0x49c>
    hi2c->State = HAL_I2C_STATE_READY;
 80106b0:	687b      	ldr	r3, [r7, #4]
 80106b2:	2220      	movs	r2, #32
 80106b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80106b8:	687b      	ldr	r3, [r7, #4]
 80106ba:	2200      	movs	r2, #0
 80106bc:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80106be:	687b      	ldr	r3, [r7, #4]
 80106c0:	2200      	movs	r2, #0
 80106c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80106c6:	6878      	ldr	r0, [r7, #4]
 80106c8:	f7fe fcd0 	bl	800f06c <HAL_I2C_SlaveTxCpltCallback>
}
 80106cc:	bf00      	nop
 80106ce:	3718      	adds	r7, #24
 80106d0:	46bd      	mov	sp, r7
 80106d2:	bd80      	pop	{r7, pc}
 80106d4:	ffff0000 	.word	0xffff0000

080106d8 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80106d8:	b580      	push	{r7, lr}
 80106da:	b082      	sub	sp, #8
 80106dc:	af00      	add	r7, sp, #0
 80106de:	6078      	str	r0, [r7, #4]
 80106e0:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80106e2:	687b      	ldr	r3, [r7, #4]
 80106e4:	4a25      	ldr	r2, [pc, #148]	@ (801077c <I2C_ITListenCplt+0xa4>)
 80106e6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80106e8:	687b      	ldr	r3, [r7, #4]
 80106ea:	2200      	movs	r2, #0
 80106ec:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80106ee:	687b      	ldr	r3, [r7, #4]
 80106f0:	2220      	movs	r2, #32
 80106f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80106f6:	687b      	ldr	r3, [r7, #4]
 80106f8:	2200      	movs	r2, #0
 80106fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 80106fe:	687b      	ldr	r3, [r7, #4]
 8010700:	2200      	movs	r2, #0
 8010702:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8010704:	683b      	ldr	r3, [r7, #0]
 8010706:	f003 0304 	and.w	r3, r3, #4
 801070a:	2b00      	cmp	r3, #0
 801070c:	d022      	beq.n	8010754 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 801070e:	687b      	ldr	r3, [r7, #4]
 8010710:	681b      	ldr	r3, [r3, #0]
 8010712:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010714:	687b      	ldr	r3, [r7, #4]
 8010716:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010718:	b2d2      	uxtb	r2, r2
 801071a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 801071c:	687b      	ldr	r3, [r7, #4]
 801071e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010720:	1c5a      	adds	r2, r3, #1
 8010722:	687b      	ldr	r3, [r7, #4]
 8010724:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8010726:	687b      	ldr	r3, [r7, #4]
 8010728:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801072a:	2b00      	cmp	r3, #0
 801072c:	d012      	beq.n	8010754 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 801072e:	687b      	ldr	r3, [r7, #4]
 8010730:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010732:	3b01      	subs	r3, #1
 8010734:	b29a      	uxth	r2, r3
 8010736:	687b      	ldr	r3, [r7, #4]
 8010738:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 801073a:	687b      	ldr	r3, [r7, #4]
 801073c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801073e:	b29b      	uxth	r3, r3
 8010740:	3b01      	subs	r3, #1
 8010742:	b29a      	uxth	r2, r3
 8010744:	687b      	ldr	r3, [r7, #4]
 8010746:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8010748:	687b      	ldr	r3, [r7, #4]
 801074a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801074c:	f043 0204 	orr.w	r2, r3, #4
 8010750:	687b      	ldr	r3, [r7, #4]
 8010752:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8010754:	f248 0103 	movw	r1, #32771	@ 0x8003
 8010758:	6878      	ldr	r0, [r7, #4]
 801075a:	f000 fbe3 	bl	8010f24 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801075e:	687b      	ldr	r3, [r7, #4]
 8010760:	681b      	ldr	r3, [r3, #0]
 8010762:	2210      	movs	r2, #16
 8010764:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8010766:	687b      	ldr	r3, [r7, #4]
 8010768:	2200      	movs	r2, #0
 801076a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 801076e:	6878      	ldr	r0, [r7, #4]
 8010770:	f7fe fc9e 	bl	800f0b0 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8010774:	bf00      	nop
 8010776:	3708      	adds	r7, #8
 8010778:	46bd      	mov	sp, r7
 801077a:	bd80      	pop	{r7, pc}
 801077c:	ffff0000 	.word	0xffff0000

08010780 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8010780:	b580      	push	{r7, lr}
 8010782:	b084      	sub	sp, #16
 8010784:	af00      	add	r7, sp, #0
 8010786:	6078      	str	r0, [r7, #4]
 8010788:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 801078a:	687b      	ldr	r3, [r7, #4]
 801078c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8010790:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8010792:	687b      	ldr	r3, [r7, #4]
 8010794:	2200      	movs	r2, #0
 8010796:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 801079a:	687b      	ldr	r3, [r7, #4]
 801079c:	4a6d      	ldr	r2, [pc, #436]	@ (8010954 <I2C_ITError+0x1d4>)
 801079e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 80107a0:	687b      	ldr	r3, [r7, #4]
 80107a2:	2200      	movs	r2, #0
 80107a4:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80107a6:	687b      	ldr	r3, [r7, #4]
 80107a8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80107aa:	683b      	ldr	r3, [r7, #0]
 80107ac:	431a      	orrs	r2, r3
 80107ae:	687b      	ldr	r3, [r7, #4]
 80107b0:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80107b2:	7bfb      	ldrb	r3, [r7, #15]
 80107b4:	2b28      	cmp	r3, #40	@ 0x28
 80107b6:	d005      	beq.n	80107c4 <I2C_ITError+0x44>
 80107b8:	7bfb      	ldrb	r3, [r7, #15]
 80107ba:	2b29      	cmp	r3, #41	@ 0x29
 80107bc:	d002      	beq.n	80107c4 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80107be:	7bfb      	ldrb	r3, [r7, #15]
 80107c0:	2b2a      	cmp	r3, #42	@ 0x2a
 80107c2:	d10b      	bne.n	80107dc <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80107c4:	2103      	movs	r1, #3
 80107c6:	6878      	ldr	r0, [r7, #4]
 80107c8:	f000 fbac 	bl	8010f24 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80107cc:	687b      	ldr	r3, [r7, #4]
 80107ce:	2228      	movs	r2, #40	@ 0x28
 80107d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80107d4:	687b      	ldr	r3, [r7, #4]
 80107d6:	4a60      	ldr	r2, [pc, #384]	@ (8010958 <I2C_ITError+0x1d8>)
 80107d8:	635a      	str	r2, [r3, #52]	@ 0x34
 80107da:	e030      	b.n	801083e <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80107dc:	f248 0103 	movw	r1, #32771	@ 0x8003
 80107e0:	6878      	ldr	r0, [r7, #4]
 80107e2:	f000 fb9f 	bl	8010f24 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80107e6:	6878      	ldr	r0, [r7, #4]
 80107e8:	f000 f8e1 	bl	80109ae <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80107ec:	687b      	ldr	r3, [r7, #4]
 80107ee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80107f2:	b2db      	uxtb	r3, r3
 80107f4:	2b60      	cmp	r3, #96	@ 0x60
 80107f6:	d01f      	beq.n	8010838 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80107f8:	687b      	ldr	r3, [r7, #4]
 80107fa:	2220      	movs	r2, #32
 80107fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8010800:	687b      	ldr	r3, [r7, #4]
 8010802:	681b      	ldr	r3, [r3, #0]
 8010804:	699b      	ldr	r3, [r3, #24]
 8010806:	f003 0320 	and.w	r3, r3, #32
 801080a:	2b20      	cmp	r3, #32
 801080c:	d114      	bne.n	8010838 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 801080e:	687b      	ldr	r3, [r7, #4]
 8010810:	681b      	ldr	r3, [r3, #0]
 8010812:	699b      	ldr	r3, [r3, #24]
 8010814:	f003 0310 	and.w	r3, r3, #16
 8010818:	2b10      	cmp	r3, #16
 801081a:	d109      	bne.n	8010830 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801081c:	687b      	ldr	r3, [r7, #4]
 801081e:	681b      	ldr	r3, [r3, #0]
 8010820:	2210      	movs	r2, #16
 8010822:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8010824:	687b      	ldr	r3, [r7, #4]
 8010826:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010828:	f043 0204 	orr.w	r2, r3, #4
 801082c:	687b      	ldr	r3, [r7, #4]
 801082e:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8010830:	687b      	ldr	r3, [r7, #4]
 8010832:	681b      	ldr	r3, [r3, #0]
 8010834:	2220      	movs	r2, #32
 8010836:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8010838:	687b      	ldr	r3, [r7, #4]
 801083a:	2200      	movs	r2, #0
 801083c:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 801083e:	687b      	ldr	r3, [r7, #4]
 8010840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010842:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8010844:	687b      	ldr	r3, [r7, #4]
 8010846:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010848:	2b00      	cmp	r3, #0
 801084a:	d039      	beq.n	80108c0 <I2C_ITError+0x140>
 801084c:	68bb      	ldr	r3, [r7, #8]
 801084e:	2b11      	cmp	r3, #17
 8010850:	d002      	beq.n	8010858 <I2C_ITError+0xd8>
 8010852:	68bb      	ldr	r3, [r7, #8]
 8010854:	2b21      	cmp	r3, #33	@ 0x21
 8010856:	d133      	bne.n	80108c0 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8010858:	687b      	ldr	r3, [r7, #4]
 801085a:	681b      	ldr	r3, [r3, #0]
 801085c:	681b      	ldr	r3, [r3, #0]
 801085e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8010862:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8010866:	d107      	bne.n	8010878 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8010868:	687b      	ldr	r3, [r7, #4]
 801086a:	681b      	ldr	r3, [r3, #0]
 801086c:	681a      	ldr	r2, [r3, #0]
 801086e:	687b      	ldr	r3, [r7, #4]
 8010870:	681b      	ldr	r3, [r3, #0]
 8010872:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8010876:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8010878:	687b      	ldr	r3, [r7, #4]
 801087a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801087c:	4618      	mov	r0, r3
 801087e:	f7fd f9f7 	bl	800dc70 <HAL_DMA_GetState>
 8010882:	4603      	mov	r3, r0
 8010884:	2b01      	cmp	r3, #1
 8010886:	d017      	beq.n	80108b8 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8010888:	687b      	ldr	r3, [r7, #4]
 801088a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801088c:	4a33      	ldr	r2, [pc, #204]	@ (801095c <I2C_ITError+0x1dc>)
 801088e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8010890:	687b      	ldr	r3, [r7, #4]
 8010892:	2200      	movs	r2, #0
 8010894:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8010898:	687b      	ldr	r3, [r7, #4]
 801089a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801089c:	4618      	mov	r0, r3
 801089e:	f7fc f877 	bl	800c990 <HAL_DMA_Abort_IT>
 80108a2:	4603      	mov	r3, r0
 80108a4:	2b00      	cmp	r3, #0
 80108a6:	d04d      	beq.n	8010944 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80108a8:	687b      	ldr	r3, [r7, #4]
 80108aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80108ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80108ae:	687a      	ldr	r2, [r7, #4]
 80108b0:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80108b2:	4610      	mov	r0, r2
 80108b4:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80108b6:	e045      	b.n	8010944 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80108b8:	6878      	ldr	r0, [r7, #4]
 80108ba:	f000 f851 	bl	8010960 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80108be:	e041      	b.n	8010944 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80108c0:	687b      	ldr	r3, [r7, #4]
 80108c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80108c4:	2b00      	cmp	r3, #0
 80108c6:	d039      	beq.n	801093c <I2C_ITError+0x1bc>
 80108c8:	68bb      	ldr	r3, [r7, #8]
 80108ca:	2b12      	cmp	r3, #18
 80108cc:	d002      	beq.n	80108d4 <I2C_ITError+0x154>
 80108ce:	68bb      	ldr	r3, [r7, #8]
 80108d0:	2b22      	cmp	r3, #34	@ 0x22
 80108d2:	d133      	bne.n	801093c <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	681b      	ldr	r3, [r3, #0]
 80108d8:	681b      	ldr	r3, [r3, #0]
 80108da:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80108de:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80108e2:	d107      	bne.n	80108f4 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80108e4:	687b      	ldr	r3, [r7, #4]
 80108e6:	681b      	ldr	r3, [r3, #0]
 80108e8:	681a      	ldr	r2, [r3, #0]
 80108ea:	687b      	ldr	r3, [r7, #4]
 80108ec:	681b      	ldr	r3, [r3, #0]
 80108ee:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80108f2:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80108f4:	687b      	ldr	r3, [r7, #4]
 80108f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80108f8:	4618      	mov	r0, r3
 80108fa:	f7fd f9b9 	bl	800dc70 <HAL_DMA_GetState>
 80108fe:	4603      	mov	r3, r0
 8010900:	2b01      	cmp	r3, #1
 8010902:	d017      	beq.n	8010934 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8010904:	687b      	ldr	r3, [r7, #4]
 8010906:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010908:	4a14      	ldr	r2, [pc, #80]	@ (801095c <I2C_ITError+0x1dc>)
 801090a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 801090c:	687b      	ldr	r3, [r7, #4]
 801090e:	2200      	movs	r2, #0
 8010910:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8010914:	687b      	ldr	r3, [r7, #4]
 8010916:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010918:	4618      	mov	r0, r3
 801091a:	f7fc f839 	bl	800c990 <HAL_DMA_Abort_IT>
 801091e:	4603      	mov	r3, r0
 8010920:	2b00      	cmp	r3, #0
 8010922:	d011      	beq.n	8010948 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8010924:	687b      	ldr	r3, [r7, #4]
 8010926:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010928:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801092a:	687a      	ldr	r2, [r7, #4]
 801092c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 801092e:	4610      	mov	r0, r2
 8010930:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8010932:	e009      	b.n	8010948 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8010934:	6878      	ldr	r0, [r7, #4]
 8010936:	f000 f813 	bl	8010960 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 801093a:	e005      	b.n	8010948 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 801093c:	6878      	ldr	r0, [r7, #4]
 801093e:	f000 f80f 	bl	8010960 <I2C_TreatErrorCallback>
  }
}
 8010942:	e002      	b.n	801094a <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8010944:	bf00      	nop
 8010946:	e000      	b.n	801094a <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8010948:	bf00      	nop
}
 801094a:	bf00      	nop
 801094c:	3710      	adds	r7, #16
 801094e:	46bd      	mov	sp, r7
 8010950:	bd80      	pop	{r7, pc}
 8010952:	bf00      	nop
 8010954:	ffff0000 	.word	0xffff0000
 8010958:	0800f34d 	.word	0x0800f34d
 801095c:	080109f7 	.word	0x080109f7

08010960 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8010960:	b580      	push	{r7, lr}
 8010962:	b082      	sub	sp, #8
 8010964:	af00      	add	r7, sp, #0
 8010966:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8010968:	687b      	ldr	r3, [r7, #4]
 801096a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 801096e:	b2db      	uxtb	r3, r3
 8010970:	2b60      	cmp	r3, #96	@ 0x60
 8010972:	d10e      	bne.n	8010992 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8010974:	687b      	ldr	r3, [r7, #4]
 8010976:	2220      	movs	r2, #32
 8010978:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 801097c:	687b      	ldr	r3, [r7, #4]
 801097e:	2200      	movs	r2, #0
 8010980:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8010982:	687b      	ldr	r3, [r7, #4]
 8010984:	2200      	movs	r2, #0
 8010986:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 801098a:	6878      	ldr	r0, [r7, #4]
 801098c:	f7fe fbae 	bl	800f0ec <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8010990:	e009      	b.n	80109a6 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8010992:	687b      	ldr	r3, [r7, #4]
 8010994:	2200      	movs	r2, #0
 8010996:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8010998:	687b      	ldr	r3, [r7, #4]
 801099a:	2200      	movs	r2, #0
 801099c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80109a0:	6878      	ldr	r0, [r7, #4]
 80109a2:	f7fe fb99 	bl	800f0d8 <HAL_I2C_ErrorCallback>
}
 80109a6:	bf00      	nop
 80109a8:	3708      	adds	r7, #8
 80109aa:	46bd      	mov	sp, r7
 80109ac:	bd80      	pop	{r7, pc}

080109ae <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80109ae:	b480      	push	{r7}
 80109b0:	b083      	sub	sp, #12
 80109b2:	af00      	add	r7, sp, #0
 80109b4:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80109b6:	687b      	ldr	r3, [r7, #4]
 80109b8:	681b      	ldr	r3, [r3, #0]
 80109ba:	699b      	ldr	r3, [r3, #24]
 80109bc:	f003 0302 	and.w	r3, r3, #2
 80109c0:	2b02      	cmp	r3, #2
 80109c2:	d103      	bne.n	80109cc <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80109c4:	687b      	ldr	r3, [r7, #4]
 80109c6:	681b      	ldr	r3, [r3, #0]
 80109c8:	2200      	movs	r2, #0
 80109ca:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80109cc:	687b      	ldr	r3, [r7, #4]
 80109ce:	681b      	ldr	r3, [r3, #0]
 80109d0:	699b      	ldr	r3, [r3, #24]
 80109d2:	f003 0301 	and.w	r3, r3, #1
 80109d6:	2b01      	cmp	r3, #1
 80109d8:	d007      	beq.n	80109ea <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80109da:	687b      	ldr	r3, [r7, #4]
 80109dc:	681b      	ldr	r3, [r3, #0]
 80109de:	699a      	ldr	r2, [r3, #24]
 80109e0:	687b      	ldr	r3, [r7, #4]
 80109e2:	681b      	ldr	r3, [r3, #0]
 80109e4:	f042 0201 	orr.w	r2, r2, #1
 80109e8:	619a      	str	r2, [r3, #24]
  }
}
 80109ea:	bf00      	nop
 80109ec:	370c      	adds	r7, #12
 80109ee:	46bd      	mov	sp, r7
 80109f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109f4:	4770      	bx	lr

080109f6 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80109f6:	b580      	push	{r7, lr}
 80109f8:	b084      	sub	sp, #16
 80109fa:	af00      	add	r7, sp, #0
 80109fc:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80109fe:	687b      	ldr	r3, [r7, #4]
 8010a00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010a02:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8010a04:	68fb      	ldr	r3, [r7, #12]
 8010a06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010a08:	2b00      	cmp	r3, #0
 8010a0a:	d003      	beq.n	8010a14 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8010a0c:	68fb      	ldr	r3, [r7, #12]
 8010a0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010a10:	2200      	movs	r2, #0
 8010a12:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8010a14:	68fb      	ldr	r3, [r7, #12]
 8010a16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010a18:	2b00      	cmp	r3, #0
 8010a1a:	d003      	beq.n	8010a24 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8010a1c:	68fb      	ldr	r3, [r7, #12]
 8010a1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010a20:	2200      	movs	r2, #0
 8010a22:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8010a24:	68f8      	ldr	r0, [r7, #12]
 8010a26:	f7ff ff9b 	bl	8010960 <I2C_TreatErrorCallback>
}
 8010a2a:	bf00      	nop
 8010a2c:	3710      	adds	r7, #16
 8010a2e:	46bd      	mov	sp, r7
 8010a30:	bd80      	pop	{r7, pc}

08010a32 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8010a32:	b580      	push	{r7, lr}
 8010a34:	b084      	sub	sp, #16
 8010a36:	af00      	add	r7, sp, #0
 8010a38:	60f8      	str	r0, [r7, #12]
 8010a3a:	60b9      	str	r1, [r7, #8]
 8010a3c:	603b      	str	r3, [r7, #0]
 8010a3e:	4613      	mov	r3, r2
 8010a40:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8010a42:	e03b      	b.n	8010abc <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8010a44:	69ba      	ldr	r2, [r7, #24]
 8010a46:	6839      	ldr	r1, [r7, #0]
 8010a48:	68f8      	ldr	r0, [r7, #12]
 8010a4a:	f000 f8d5 	bl	8010bf8 <I2C_IsErrorOccurred>
 8010a4e:	4603      	mov	r3, r0
 8010a50:	2b00      	cmp	r3, #0
 8010a52:	d001      	beq.n	8010a58 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8010a54:	2301      	movs	r3, #1
 8010a56:	e041      	b.n	8010adc <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010a58:	683b      	ldr	r3, [r7, #0]
 8010a5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010a5e:	d02d      	beq.n	8010abc <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010a60:	f7f8 fd80 	bl	8009564 <HAL_GetTick>
 8010a64:	4602      	mov	r2, r0
 8010a66:	69bb      	ldr	r3, [r7, #24]
 8010a68:	1ad3      	subs	r3, r2, r3
 8010a6a:	683a      	ldr	r2, [r7, #0]
 8010a6c:	429a      	cmp	r2, r3
 8010a6e:	d302      	bcc.n	8010a76 <I2C_WaitOnFlagUntilTimeout+0x44>
 8010a70:	683b      	ldr	r3, [r7, #0]
 8010a72:	2b00      	cmp	r3, #0
 8010a74:	d122      	bne.n	8010abc <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8010a76:	68fb      	ldr	r3, [r7, #12]
 8010a78:	681b      	ldr	r3, [r3, #0]
 8010a7a:	699a      	ldr	r2, [r3, #24]
 8010a7c:	68bb      	ldr	r3, [r7, #8]
 8010a7e:	4013      	ands	r3, r2
 8010a80:	68ba      	ldr	r2, [r7, #8]
 8010a82:	429a      	cmp	r2, r3
 8010a84:	bf0c      	ite	eq
 8010a86:	2301      	moveq	r3, #1
 8010a88:	2300      	movne	r3, #0
 8010a8a:	b2db      	uxtb	r3, r3
 8010a8c:	461a      	mov	r2, r3
 8010a8e:	79fb      	ldrb	r3, [r7, #7]
 8010a90:	429a      	cmp	r2, r3
 8010a92:	d113      	bne.n	8010abc <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8010a94:	68fb      	ldr	r3, [r7, #12]
 8010a96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010a98:	f043 0220 	orr.w	r2, r3, #32
 8010a9c:	68fb      	ldr	r3, [r7, #12]
 8010a9e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8010aa0:	68fb      	ldr	r3, [r7, #12]
 8010aa2:	2220      	movs	r2, #32
 8010aa4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8010aa8:	68fb      	ldr	r3, [r7, #12]
 8010aaa:	2200      	movs	r2, #0
 8010aac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8010ab0:	68fb      	ldr	r3, [r7, #12]
 8010ab2:	2200      	movs	r2, #0
 8010ab4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8010ab8:	2301      	movs	r3, #1
 8010aba:	e00f      	b.n	8010adc <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8010abc:	68fb      	ldr	r3, [r7, #12]
 8010abe:	681b      	ldr	r3, [r3, #0]
 8010ac0:	699a      	ldr	r2, [r3, #24]
 8010ac2:	68bb      	ldr	r3, [r7, #8]
 8010ac4:	4013      	ands	r3, r2
 8010ac6:	68ba      	ldr	r2, [r7, #8]
 8010ac8:	429a      	cmp	r2, r3
 8010aca:	bf0c      	ite	eq
 8010acc:	2301      	moveq	r3, #1
 8010ace:	2300      	movne	r3, #0
 8010ad0:	b2db      	uxtb	r3, r3
 8010ad2:	461a      	mov	r2, r3
 8010ad4:	79fb      	ldrb	r3, [r7, #7]
 8010ad6:	429a      	cmp	r2, r3
 8010ad8:	d0b4      	beq.n	8010a44 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8010ada:	2300      	movs	r3, #0
}
 8010adc:	4618      	mov	r0, r3
 8010ade:	3710      	adds	r7, #16
 8010ae0:	46bd      	mov	sp, r7
 8010ae2:	bd80      	pop	{r7, pc}

08010ae4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8010ae4:	b580      	push	{r7, lr}
 8010ae6:	b084      	sub	sp, #16
 8010ae8:	af00      	add	r7, sp, #0
 8010aea:	60f8      	str	r0, [r7, #12]
 8010aec:	60b9      	str	r1, [r7, #8]
 8010aee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8010af0:	e033      	b.n	8010b5a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8010af2:	687a      	ldr	r2, [r7, #4]
 8010af4:	68b9      	ldr	r1, [r7, #8]
 8010af6:	68f8      	ldr	r0, [r7, #12]
 8010af8:	f000 f87e 	bl	8010bf8 <I2C_IsErrorOccurred>
 8010afc:	4603      	mov	r3, r0
 8010afe:	2b00      	cmp	r3, #0
 8010b00:	d001      	beq.n	8010b06 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8010b02:	2301      	movs	r3, #1
 8010b04:	e031      	b.n	8010b6a <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010b06:	68bb      	ldr	r3, [r7, #8]
 8010b08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010b0c:	d025      	beq.n	8010b5a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010b0e:	f7f8 fd29 	bl	8009564 <HAL_GetTick>
 8010b12:	4602      	mov	r2, r0
 8010b14:	687b      	ldr	r3, [r7, #4]
 8010b16:	1ad3      	subs	r3, r2, r3
 8010b18:	68ba      	ldr	r2, [r7, #8]
 8010b1a:	429a      	cmp	r2, r3
 8010b1c:	d302      	bcc.n	8010b24 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8010b1e:	68bb      	ldr	r3, [r7, #8]
 8010b20:	2b00      	cmp	r3, #0
 8010b22:	d11a      	bne.n	8010b5a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8010b24:	68fb      	ldr	r3, [r7, #12]
 8010b26:	681b      	ldr	r3, [r3, #0]
 8010b28:	699b      	ldr	r3, [r3, #24]
 8010b2a:	f003 0302 	and.w	r3, r3, #2
 8010b2e:	2b02      	cmp	r3, #2
 8010b30:	d013      	beq.n	8010b5a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8010b32:	68fb      	ldr	r3, [r7, #12]
 8010b34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010b36:	f043 0220 	orr.w	r2, r3, #32
 8010b3a:	68fb      	ldr	r3, [r7, #12]
 8010b3c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8010b3e:	68fb      	ldr	r3, [r7, #12]
 8010b40:	2220      	movs	r2, #32
 8010b42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8010b46:	68fb      	ldr	r3, [r7, #12]
 8010b48:	2200      	movs	r2, #0
 8010b4a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8010b4e:	68fb      	ldr	r3, [r7, #12]
 8010b50:	2200      	movs	r2, #0
 8010b52:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8010b56:	2301      	movs	r3, #1
 8010b58:	e007      	b.n	8010b6a <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8010b5a:	68fb      	ldr	r3, [r7, #12]
 8010b5c:	681b      	ldr	r3, [r3, #0]
 8010b5e:	699b      	ldr	r3, [r3, #24]
 8010b60:	f003 0302 	and.w	r3, r3, #2
 8010b64:	2b02      	cmp	r3, #2
 8010b66:	d1c4      	bne.n	8010af2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8010b68:	2300      	movs	r3, #0
}
 8010b6a:	4618      	mov	r0, r3
 8010b6c:	3710      	adds	r7, #16
 8010b6e:	46bd      	mov	sp, r7
 8010b70:	bd80      	pop	{r7, pc}

08010b72 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8010b72:	b580      	push	{r7, lr}
 8010b74:	b084      	sub	sp, #16
 8010b76:	af00      	add	r7, sp, #0
 8010b78:	60f8      	str	r0, [r7, #12]
 8010b7a:	60b9      	str	r1, [r7, #8]
 8010b7c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8010b7e:	e02f      	b.n	8010be0 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8010b80:	687a      	ldr	r2, [r7, #4]
 8010b82:	68b9      	ldr	r1, [r7, #8]
 8010b84:	68f8      	ldr	r0, [r7, #12]
 8010b86:	f000 f837 	bl	8010bf8 <I2C_IsErrorOccurred>
 8010b8a:	4603      	mov	r3, r0
 8010b8c:	2b00      	cmp	r3, #0
 8010b8e:	d001      	beq.n	8010b94 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8010b90:	2301      	movs	r3, #1
 8010b92:	e02d      	b.n	8010bf0 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010b94:	f7f8 fce6 	bl	8009564 <HAL_GetTick>
 8010b98:	4602      	mov	r2, r0
 8010b9a:	687b      	ldr	r3, [r7, #4]
 8010b9c:	1ad3      	subs	r3, r2, r3
 8010b9e:	68ba      	ldr	r2, [r7, #8]
 8010ba0:	429a      	cmp	r2, r3
 8010ba2:	d302      	bcc.n	8010baa <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8010ba4:	68bb      	ldr	r3, [r7, #8]
 8010ba6:	2b00      	cmp	r3, #0
 8010ba8:	d11a      	bne.n	8010be0 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8010baa:	68fb      	ldr	r3, [r7, #12]
 8010bac:	681b      	ldr	r3, [r3, #0]
 8010bae:	699b      	ldr	r3, [r3, #24]
 8010bb0:	f003 0320 	and.w	r3, r3, #32
 8010bb4:	2b20      	cmp	r3, #32
 8010bb6:	d013      	beq.n	8010be0 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8010bb8:	68fb      	ldr	r3, [r7, #12]
 8010bba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010bbc:	f043 0220 	orr.w	r2, r3, #32
 8010bc0:	68fb      	ldr	r3, [r7, #12]
 8010bc2:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8010bc4:	68fb      	ldr	r3, [r7, #12]
 8010bc6:	2220      	movs	r2, #32
 8010bc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8010bcc:	68fb      	ldr	r3, [r7, #12]
 8010bce:	2200      	movs	r2, #0
 8010bd0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8010bd4:	68fb      	ldr	r3, [r7, #12]
 8010bd6:	2200      	movs	r2, #0
 8010bd8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8010bdc:	2301      	movs	r3, #1
 8010bde:	e007      	b.n	8010bf0 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8010be0:	68fb      	ldr	r3, [r7, #12]
 8010be2:	681b      	ldr	r3, [r3, #0]
 8010be4:	699b      	ldr	r3, [r3, #24]
 8010be6:	f003 0320 	and.w	r3, r3, #32
 8010bea:	2b20      	cmp	r3, #32
 8010bec:	d1c8      	bne.n	8010b80 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8010bee:	2300      	movs	r3, #0
}
 8010bf0:	4618      	mov	r0, r3
 8010bf2:	3710      	adds	r7, #16
 8010bf4:	46bd      	mov	sp, r7
 8010bf6:	bd80      	pop	{r7, pc}

08010bf8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8010bf8:	b580      	push	{r7, lr}
 8010bfa:	b08a      	sub	sp, #40	@ 0x28
 8010bfc:	af00      	add	r7, sp, #0
 8010bfe:	60f8      	str	r0, [r7, #12]
 8010c00:	60b9      	str	r1, [r7, #8]
 8010c02:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8010c04:	2300      	movs	r3, #0
 8010c06:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8010c0a:	68fb      	ldr	r3, [r7, #12]
 8010c0c:	681b      	ldr	r3, [r3, #0]
 8010c0e:	699b      	ldr	r3, [r3, #24]
 8010c10:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8010c12:	2300      	movs	r3, #0
 8010c14:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8010c16:	687b      	ldr	r3, [r7, #4]
 8010c18:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8010c1a:	69bb      	ldr	r3, [r7, #24]
 8010c1c:	f003 0310 	and.w	r3, r3, #16
 8010c20:	2b00      	cmp	r3, #0
 8010c22:	d068      	beq.n	8010cf6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8010c24:	68fb      	ldr	r3, [r7, #12]
 8010c26:	681b      	ldr	r3, [r3, #0]
 8010c28:	2210      	movs	r2, #16
 8010c2a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8010c2c:	e049      	b.n	8010cc2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8010c2e:	68bb      	ldr	r3, [r7, #8]
 8010c30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010c34:	d045      	beq.n	8010cc2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8010c36:	f7f8 fc95 	bl	8009564 <HAL_GetTick>
 8010c3a:	4602      	mov	r2, r0
 8010c3c:	69fb      	ldr	r3, [r7, #28]
 8010c3e:	1ad3      	subs	r3, r2, r3
 8010c40:	68ba      	ldr	r2, [r7, #8]
 8010c42:	429a      	cmp	r2, r3
 8010c44:	d302      	bcc.n	8010c4c <I2C_IsErrorOccurred+0x54>
 8010c46:	68bb      	ldr	r3, [r7, #8]
 8010c48:	2b00      	cmp	r3, #0
 8010c4a:	d13a      	bne.n	8010cc2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8010c4c:	68fb      	ldr	r3, [r7, #12]
 8010c4e:	681b      	ldr	r3, [r3, #0]
 8010c50:	685b      	ldr	r3, [r3, #4]
 8010c52:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8010c56:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8010c58:	68fb      	ldr	r3, [r7, #12]
 8010c5a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8010c5e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8010c60:	68fb      	ldr	r3, [r7, #12]
 8010c62:	681b      	ldr	r3, [r3, #0]
 8010c64:	699b      	ldr	r3, [r3, #24]
 8010c66:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8010c6a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8010c6e:	d121      	bne.n	8010cb4 <I2C_IsErrorOccurred+0xbc>
 8010c70:	697b      	ldr	r3, [r7, #20]
 8010c72:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8010c76:	d01d      	beq.n	8010cb4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8010c78:	7cfb      	ldrb	r3, [r7, #19]
 8010c7a:	2b20      	cmp	r3, #32
 8010c7c:	d01a      	beq.n	8010cb4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8010c7e:	68fb      	ldr	r3, [r7, #12]
 8010c80:	681b      	ldr	r3, [r3, #0]
 8010c82:	685a      	ldr	r2, [r3, #4]
 8010c84:	68fb      	ldr	r3, [r7, #12]
 8010c86:	681b      	ldr	r3, [r3, #0]
 8010c88:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8010c8c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8010c8e:	f7f8 fc69 	bl	8009564 <HAL_GetTick>
 8010c92:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8010c94:	e00e      	b.n	8010cb4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8010c96:	f7f8 fc65 	bl	8009564 <HAL_GetTick>
 8010c9a:	4602      	mov	r2, r0
 8010c9c:	69fb      	ldr	r3, [r7, #28]
 8010c9e:	1ad3      	subs	r3, r2, r3
 8010ca0:	2b19      	cmp	r3, #25
 8010ca2:	d907      	bls.n	8010cb4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8010ca4:	6a3b      	ldr	r3, [r7, #32]
 8010ca6:	f043 0320 	orr.w	r3, r3, #32
 8010caa:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8010cac:	2301      	movs	r3, #1
 8010cae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8010cb2:	e006      	b.n	8010cc2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8010cb4:	68fb      	ldr	r3, [r7, #12]
 8010cb6:	681b      	ldr	r3, [r3, #0]
 8010cb8:	699b      	ldr	r3, [r3, #24]
 8010cba:	f003 0320 	and.w	r3, r3, #32
 8010cbe:	2b20      	cmp	r3, #32
 8010cc0:	d1e9      	bne.n	8010c96 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8010cc2:	68fb      	ldr	r3, [r7, #12]
 8010cc4:	681b      	ldr	r3, [r3, #0]
 8010cc6:	699b      	ldr	r3, [r3, #24]
 8010cc8:	f003 0320 	and.w	r3, r3, #32
 8010ccc:	2b20      	cmp	r3, #32
 8010cce:	d003      	beq.n	8010cd8 <I2C_IsErrorOccurred+0xe0>
 8010cd0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010cd4:	2b00      	cmp	r3, #0
 8010cd6:	d0aa      	beq.n	8010c2e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8010cd8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010cdc:	2b00      	cmp	r3, #0
 8010cde:	d103      	bne.n	8010ce8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8010ce0:	68fb      	ldr	r3, [r7, #12]
 8010ce2:	681b      	ldr	r3, [r3, #0]
 8010ce4:	2220      	movs	r2, #32
 8010ce6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8010ce8:	6a3b      	ldr	r3, [r7, #32]
 8010cea:	f043 0304 	orr.w	r3, r3, #4
 8010cee:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8010cf0:	2301      	movs	r3, #1
 8010cf2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8010cf6:	68fb      	ldr	r3, [r7, #12]
 8010cf8:	681b      	ldr	r3, [r3, #0]
 8010cfa:	699b      	ldr	r3, [r3, #24]
 8010cfc:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8010cfe:	69bb      	ldr	r3, [r7, #24]
 8010d00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010d04:	2b00      	cmp	r3, #0
 8010d06:	d00b      	beq.n	8010d20 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8010d08:	6a3b      	ldr	r3, [r7, #32]
 8010d0a:	f043 0301 	orr.w	r3, r3, #1
 8010d0e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8010d10:	68fb      	ldr	r3, [r7, #12]
 8010d12:	681b      	ldr	r3, [r3, #0]
 8010d14:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8010d18:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8010d1a:	2301      	movs	r3, #1
 8010d1c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8010d20:	69bb      	ldr	r3, [r7, #24]
 8010d22:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8010d26:	2b00      	cmp	r3, #0
 8010d28:	d00b      	beq.n	8010d42 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8010d2a:	6a3b      	ldr	r3, [r7, #32]
 8010d2c:	f043 0308 	orr.w	r3, r3, #8
 8010d30:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8010d32:	68fb      	ldr	r3, [r7, #12]
 8010d34:	681b      	ldr	r3, [r3, #0]
 8010d36:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8010d3a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8010d3c:	2301      	movs	r3, #1
 8010d3e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8010d42:	69bb      	ldr	r3, [r7, #24]
 8010d44:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8010d48:	2b00      	cmp	r3, #0
 8010d4a:	d00b      	beq.n	8010d64 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8010d4c:	6a3b      	ldr	r3, [r7, #32]
 8010d4e:	f043 0302 	orr.w	r3, r3, #2
 8010d52:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8010d54:	68fb      	ldr	r3, [r7, #12]
 8010d56:	681b      	ldr	r3, [r3, #0]
 8010d58:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010d5c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8010d5e:	2301      	movs	r3, #1
 8010d60:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8010d64:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010d68:	2b00      	cmp	r3, #0
 8010d6a:	d01c      	beq.n	8010da6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8010d6c:	68f8      	ldr	r0, [r7, #12]
 8010d6e:	f7ff fe1e 	bl	80109ae <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8010d72:	68fb      	ldr	r3, [r7, #12]
 8010d74:	681b      	ldr	r3, [r3, #0]
 8010d76:	6859      	ldr	r1, [r3, #4]
 8010d78:	68fb      	ldr	r3, [r7, #12]
 8010d7a:	681a      	ldr	r2, [r3, #0]
 8010d7c:	4b0d      	ldr	r3, [pc, #52]	@ (8010db4 <I2C_IsErrorOccurred+0x1bc>)
 8010d7e:	400b      	ands	r3, r1
 8010d80:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8010d82:	68fb      	ldr	r3, [r7, #12]
 8010d84:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8010d86:	6a3b      	ldr	r3, [r7, #32]
 8010d88:	431a      	orrs	r2, r3
 8010d8a:	68fb      	ldr	r3, [r7, #12]
 8010d8c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8010d8e:	68fb      	ldr	r3, [r7, #12]
 8010d90:	2220      	movs	r2, #32
 8010d92:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8010d96:	68fb      	ldr	r3, [r7, #12]
 8010d98:	2200      	movs	r2, #0
 8010d9a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8010d9e:	68fb      	ldr	r3, [r7, #12]
 8010da0:	2200      	movs	r2, #0
 8010da2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8010da6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8010daa:	4618      	mov	r0, r3
 8010dac:	3728      	adds	r7, #40	@ 0x28
 8010dae:	46bd      	mov	sp, r7
 8010db0:	bd80      	pop	{r7, pc}
 8010db2:	bf00      	nop
 8010db4:	fe00e800 	.word	0xfe00e800

08010db8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8010db8:	b480      	push	{r7}
 8010dba:	b087      	sub	sp, #28
 8010dbc:	af00      	add	r7, sp, #0
 8010dbe:	60f8      	str	r0, [r7, #12]
 8010dc0:	607b      	str	r3, [r7, #4]
 8010dc2:	460b      	mov	r3, r1
 8010dc4:	817b      	strh	r3, [r7, #10]
 8010dc6:	4613      	mov	r3, r2
 8010dc8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8010dca:	897b      	ldrh	r3, [r7, #10]
 8010dcc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8010dd0:	7a7b      	ldrb	r3, [r7, #9]
 8010dd2:	041b      	lsls	r3, r3, #16
 8010dd4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8010dd8:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8010dda:	687b      	ldr	r3, [r7, #4]
 8010ddc:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8010dde:	6a3b      	ldr	r3, [r7, #32]
 8010de0:	4313      	orrs	r3, r2
 8010de2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8010de6:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8010de8:	68fb      	ldr	r3, [r7, #12]
 8010dea:	681b      	ldr	r3, [r3, #0]
 8010dec:	685a      	ldr	r2, [r3, #4]
 8010dee:	6a3b      	ldr	r3, [r7, #32]
 8010df0:	0d5b      	lsrs	r3, r3, #21
 8010df2:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8010df6:	4b08      	ldr	r3, [pc, #32]	@ (8010e18 <I2C_TransferConfig+0x60>)
 8010df8:	430b      	orrs	r3, r1
 8010dfa:	43db      	mvns	r3, r3
 8010dfc:	ea02 0103 	and.w	r1, r2, r3
 8010e00:	68fb      	ldr	r3, [r7, #12]
 8010e02:	681b      	ldr	r3, [r3, #0]
 8010e04:	697a      	ldr	r2, [r7, #20]
 8010e06:	430a      	orrs	r2, r1
 8010e08:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8010e0a:	bf00      	nop
 8010e0c:	371c      	adds	r7, #28
 8010e0e:	46bd      	mov	sp, r7
 8010e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e14:	4770      	bx	lr
 8010e16:	bf00      	nop
 8010e18:	03ff63ff 	.word	0x03ff63ff

08010e1c <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8010e1c:	b480      	push	{r7}
 8010e1e:	b085      	sub	sp, #20
 8010e20:	af00      	add	r7, sp, #0
 8010e22:	6078      	str	r0, [r7, #4]
 8010e24:	460b      	mov	r3, r1
 8010e26:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8010e28:	2300      	movs	r3, #0
 8010e2a:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8010e2c:	687b      	ldr	r3, [r7, #4]
 8010e2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010e30:	4a39      	ldr	r2, [pc, #228]	@ (8010f18 <I2C_Enable_IRQ+0xfc>)
 8010e32:	4293      	cmp	r3, r2
 8010e34:	d032      	beq.n	8010e9c <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8010e36:	687b      	ldr	r3, [r7, #4]
 8010e38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8010e3a:	4a38      	ldr	r2, [pc, #224]	@ (8010f1c <I2C_Enable_IRQ+0x100>)
 8010e3c:	4293      	cmp	r3, r2
 8010e3e:	d02d      	beq.n	8010e9c <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8010e40:	687b      	ldr	r3, [r7, #4]
 8010e42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8010e44:	4a36      	ldr	r2, [pc, #216]	@ (8010f20 <I2C_Enable_IRQ+0x104>)
 8010e46:	4293      	cmp	r3, r2
 8010e48:	d028      	beq.n	8010e9c <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8010e4a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010e4e:	2b00      	cmp	r3, #0
 8010e50:	da03      	bge.n	8010e5a <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8010e52:	68fb      	ldr	r3, [r7, #12]
 8010e54:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8010e58:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8010e5a:	887b      	ldrh	r3, [r7, #2]
 8010e5c:	f003 0301 	and.w	r3, r3, #1
 8010e60:	2b00      	cmp	r3, #0
 8010e62:	d003      	beq.n	8010e6c <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8010e64:	68fb      	ldr	r3, [r7, #12]
 8010e66:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8010e6a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8010e6c:	887b      	ldrh	r3, [r7, #2]
 8010e6e:	f003 0302 	and.w	r3, r3, #2
 8010e72:	2b00      	cmp	r3, #0
 8010e74:	d003      	beq.n	8010e7e <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8010e76:	68fb      	ldr	r3, [r7, #12]
 8010e78:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8010e7c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8010e7e:	887b      	ldrh	r3, [r7, #2]
 8010e80:	2b10      	cmp	r3, #16
 8010e82:	d103      	bne.n	8010e8c <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8010e84:	68fb      	ldr	r3, [r7, #12]
 8010e86:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8010e8a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8010e8c:	887b      	ldrh	r3, [r7, #2]
 8010e8e:	2b20      	cmp	r3, #32
 8010e90:	d133      	bne.n	8010efa <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8010e92:	68fb      	ldr	r3, [r7, #12]
 8010e94:	f043 0320 	orr.w	r3, r3, #32
 8010e98:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8010e9a:	e02e      	b.n	8010efa <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8010e9c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010ea0:	2b00      	cmp	r3, #0
 8010ea2:	da03      	bge.n	8010eac <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8010ea4:	68fb      	ldr	r3, [r7, #12]
 8010ea6:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8010eaa:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8010eac:	887b      	ldrh	r3, [r7, #2]
 8010eae:	f003 0301 	and.w	r3, r3, #1
 8010eb2:	2b00      	cmp	r3, #0
 8010eb4:	d003      	beq.n	8010ebe <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8010eb6:	68fb      	ldr	r3, [r7, #12]
 8010eb8:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8010ebc:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8010ebe:	887b      	ldrh	r3, [r7, #2]
 8010ec0:	f003 0302 	and.w	r3, r3, #2
 8010ec4:	2b00      	cmp	r3, #0
 8010ec6:	d003      	beq.n	8010ed0 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8010ec8:	68fb      	ldr	r3, [r7, #12]
 8010eca:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8010ece:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8010ed0:	887b      	ldrh	r3, [r7, #2]
 8010ed2:	2b10      	cmp	r3, #16
 8010ed4:	d103      	bne.n	8010ede <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8010ed6:	68fb      	ldr	r3, [r7, #12]
 8010ed8:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8010edc:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8010ede:	887b      	ldrh	r3, [r7, #2]
 8010ee0:	2b20      	cmp	r3, #32
 8010ee2:	d103      	bne.n	8010eec <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8010ee4:	68fb      	ldr	r3, [r7, #12]
 8010ee6:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8010eea:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8010eec:	887b      	ldrh	r3, [r7, #2]
 8010eee:	2b40      	cmp	r3, #64	@ 0x40
 8010ef0:	d103      	bne.n	8010efa <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8010ef2:	68fb      	ldr	r3, [r7, #12]
 8010ef4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010ef8:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8010efa:	687b      	ldr	r3, [r7, #4]
 8010efc:	681b      	ldr	r3, [r3, #0]
 8010efe:	6819      	ldr	r1, [r3, #0]
 8010f00:	687b      	ldr	r3, [r7, #4]
 8010f02:	681b      	ldr	r3, [r3, #0]
 8010f04:	68fa      	ldr	r2, [r7, #12]
 8010f06:	430a      	orrs	r2, r1
 8010f08:	601a      	str	r2, [r3, #0]
}
 8010f0a:	bf00      	nop
 8010f0c:	3714      	adds	r7, #20
 8010f0e:	46bd      	mov	sp, r7
 8010f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f14:	4770      	bx	lr
 8010f16:	bf00      	nop
 8010f18:	0800f53f 	.word	0x0800f53f
 8010f1c:	0800f961 	.word	0x0800f961
 8010f20:	0800f715 	.word	0x0800f715

08010f24 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8010f24:	b480      	push	{r7}
 8010f26:	b085      	sub	sp, #20
 8010f28:	af00      	add	r7, sp, #0
 8010f2a:	6078      	str	r0, [r7, #4]
 8010f2c:	460b      	mov	r3, r1
 8010f2e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8010f30:	2300      	movs	r3, #0
 8010f32:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8010f34:	887b      	ldrh	r3, [r7, #2]
 8010f36:	f003 0301 	and.w	r3, r3, #1
 8010f3a:	2b00      	cmp	r3, #0
 8010f3c:	d00f      	beq.n	8010f5e <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8010f3e:	68fb      	ldr	r3, [r7, #12]
 8010f40:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8010f44:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8010f46:	687b      	ldr	r3, [r7, #4]
 8010f48:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8010f4c:	b2db      	uxtb	r3, r3
 8010f4e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8010f52:	2b28      	cmp	r3, #40	@ 0x28
 8010f54:	d003      	beq.n	8010f5e <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8010f56:	68fb      	ldr	r3, [r7, #12]
 8010f58:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8010f5c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8010f5e:	887b      	ldrh	r3, [r7, #2]
 8010f60:	f003 0302 	and.w	r3, r3, #2
 8010f64:	2b00      	cmp	r3, #0
 8010f66:	d00f      	beq.n	8010f88 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8010f68:	68fb      	ldr	r3, [r7, #12]
 8010f6a:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8010f6e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8010f70:	687b      	ldr	r3, [r7, #4]
 8010f72:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8010f76:	b2db      	uxtb	r3, r3
 8010f78:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8010f7c:	2b28      	cmp	r3, #40	@ 0x28
 8010f7e:	d003      	beq.n	8010f88 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8010f80:	68fb      	ldr	r3, [r7, #12]
 8010f82:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8010f86:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8010f88:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010f8c:	2b00      	cmp	r3, #0
 8010f8e:	da03      	bge.n	8010f98 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8010f90:	68fb      	ldr	r3, [r7, #12]
 8010f92:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8010f96:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8010f98:	887b      	ldrh	r3, [r7, #2]
 8010f9a:	2b10      	cmp	r3, #16
 8010f9c:	d103      	bne.n	8010fa6 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8010f9e:	68fb      	ldr	r3, [r7, #12]
 8010fa0:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8010fa4:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8010fa6:	887b      	ldrh	r3, [r7, #2]
 8010fa8:	2b20      	cmp	r3, #32
 8010faa:	d103      	bne.n	8010fb4 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8010fac:	68fb      	ldr	r3, [r7, #12]
 8010fae:	f043 0320 	orr.w	r3, r3, #32
 8010fb2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8010fb4:	887b      	ldrh	r3, [r7, #2]
 8010fb6:	2b40      	cmp	r3, #64	@ 0x40
 8010fb8:	d103      	bne.n	8010fc2 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8010fba:	68fb      	ldr	r3, [r7, #12]
 8010fbc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010fc0:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8010fc2:	687b      	ldr	r3, [r7, #4]
 8010fc4:	681b      	ldr	r3, [r3, #0]
 8010fc6:	6819      	ldr	r1, [r3, #0]
 8010fc8:	68fb      	ldr	r3, [r7, #12]
 8010fca:	43da      	mvns	r2, r3
 8010fcc:	687b      	ldr	r3, [r7, #4]
 8010fce:	681b      	ldr	r3, [r3, #0]
 8010fd0:	400a      	ands	r2, r1
 8010fd2:	601a      	str	r2, [r3, #0]
}
 8010fd4:	bf00      	nop
 8010fd6:	3714      	adds	r7, #20
 8010fd8:	46bd      	mov	sp, r7
 8010fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fde:	4770      	bx	lr

08010fe0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8010fe0:	b480      	push	{r7}
 8010fe2:	b083      	sub	sp, #12
 8010fe4:	af00      	add	r7, sp, #0
 8010fe6:	6078      	str	r0, [r7, #4]
 8010fe8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8010fea:	687b      	ldr	r3, [r7, #4]
 8010fec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8010ff0:	b2db      	uxtb	r3, r3
 8010ff2:	2b20      	cmp	r3, #32
 8010ff4:	d138      	bne.n	8011068 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8010ff6:	687b      	ldr	r3, [r7, #4]
 8010ff8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8010ffc:	2b01      	cmp	r3, #1
 8010ffe:	d101      	bne.n	8011004 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8011000:	2302      	movs	r3, #2
 8011002:	e032      	b.n	801106a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8011004:	687b      	ldr	r3, [r7, #4]
 8011006:	2201      	movs	r2, #1
 8011008:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 801100c:	687b      	ldr	r3, [r7, #4]
 801100e:	2224      	movs	r2, #36	@ 0x24
 8011010:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8011014:	687b      	ldr	r3, [r7, #4]
 8011016:	681b      	ldr	r3, [r3, #0]
 8011018:	681a      	ldr	r2, [r3, #0]
 801101a:	687b      	ldr	r3, [r7, #4]
 801101c:	681b      	ldr	r3, [r3, #0]
 801101e:	f022 0201 	bic.w	r2, r2, #1
 8011022:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8011024:	687b      	ldr	r3, [r7, #4]
 8011026:	681b      	ldr	r3, [r3, #0]
 8011028:	681a      	ldr	r2, [r3, #0]
 801102a:	687b      	ldr	r3, [r7, #4]
 801102c:	681b      	ldr	r3, [r3, #0]
 801102e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8011032:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8011034:	687b      	ldr	r3, [r7, #4]
 8011036:	681b      	ldr	r3, [r3, #0]
 8011038:	6819      	ldr	r1, [r3, #0]
 801103a:	687b      	ldr	r3, [r7, #4]
 801103c:	681b      	ldr	r3, [r3, #0]
 801103e:	683a      	ldr	r2, [r7, #0]
 8011040:	430a      	orrs	r2, r1
 8011042:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8011044:	687b      	ldr	r3, [r7, #4]
 8011046:	681b      	ldr	r3, [r3, #0]
 8011048:	681a      	ldr	r2, [r3, #0]
 801104a:	687b      	ldr	r3, [r7, #4]
 801104c:	681b      	ldr	r3, [r3, #0]
 801104e:	f042 0201 	orr.w	r2, r2, #1
 8011052:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8011054:	687b      	ldr	r3, [r7, #4]
 8011056:	2220      	movs	r2, #32
 8011058:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801105c:	687b      	ldr	r3, [r7, #4]
 801105e:	2200      	movs	r2, #0
 8011060:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8011064:	2300      	movs	r3, #0
 8011066:	e000      	b.n	801106a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8011068:	2302      	movs	r3, #2
  }
}
 801106a:	4618      	mov	r0, r3
 801106c:	370c      	adds	r7, #12
 801106e:	46bd      	mov	sp, r7
 8011070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011074:	4770      	bx	lr

08011076 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8011076:	b480      	push	{r7}
 8011078:	b085      	sub	sp, #20
 801107a:	af00      	add	r7, sp, #0
 801107c:	6078      	str	r0, [r7, #4]
 801107e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8011080:	687b      	ldr	r3, [r7, #4]
 8011082:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8011086:	b2db      	uxtb	r3, r3
 8011088:	2b20      	cmp	r3, #32
 801108a:	d139      	bne.n	8011100 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 801108c:	687b      	ldr	r3, [r7, #4]
 801108e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8011092:	2b01      	cmp	r3, #1
 8011094:	d101      	bne.n	801109a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8011096:	2302      	movs	r3, #2
 8011098:	e033      	b.n	8011102 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 801109a:	687b      	ldr	r3, [r7, #4]
 801109c:	2201      	movs	r2, #1
 801109e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80110a2:	687b      	ldr	r3, [r7, #4]
 80110a4:	2224      	movs	r2, #36	@ 0x24
 80110a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80110aa:	687b      	ldr	r3, [r7, #4]
 80110ac:	681b      	ldr	r3, [r3, #0]
 80110ae:	681a      	ldr	r2, [r3, #0]
 80110b0:	687b      	ldr	r3, [r7, #4]
 80110b2:	681b      	ldr	r3, [r3, #0]
 80110b4:	f022 0201 	bic.w	r2, r2, #1
 80110b8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80110ba:	687b      	ldr	r3, [r7, #4]
 80110bc:	681b      	ldr	r3, [r3, #0]
 80110be:	681b      	ldr	r3, [r3, #0]
 80110c0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80110c2:	68fb      	ldr	r3, [r7, #12]
 80110c4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80110c8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80110ca:	683b      	ldr	r3, [r7, #0]
 80110cc:	021b      	lsls	r3, r3, #8
 80110ce:	68fa      	ldr	r2, [r7, #12]
 80110d0:	4313      	orrs	r3, r2
 80110d2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80110d4:	687b      	ldr	r3, [r7, #4]
 80110d6:	681b      	ldr	r3, [r3, #0]
 80110d8:	68fa      	ldr	r2, [r7, #12]
 80110da:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80110dc:	687b      	ldr	r3, [r7, #4]
 80110de:	681b      	ldr	r3, [r3, #0]
 80110e0:	681a      	ldr	r2, [r3, #0]
 80110e2:	687b      	ldr	r3, [r7, #4]
 80110e4:	681b      	ldr	r3, [r3, #0]
 80110e6:	f042 0201 	orr.w	r2, r2, #1
 80110ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80110ec:	687b      	ldr	r3, [r7, #4]
 80110ee:	2220      	movs	r2, #32
 80110f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80110f4:	687b      	ldr	r3, [r7, #4]
 80110f6:	2200      	movs	r2, #0
 80110f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80110fc:	2300      	movs	r3, #0
 80110fe:	e000      	b.n	8011102 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8011100:	2302      	movs	r3, #2
  }
}
 8011102:	4618      	mov	r0, r3
 8011104:	3714      	adds	r7, #20
 8011106:	46bd      	mov	sp, r7
 8011108:	f85d 7b04 	ldr.w	r7, [sp], #4
 801110c:	4770      	bx	lr
	...

08011110 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C5 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C5 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8011110:	b480      	push	{r7}
 8011112:	b085      	sub	sp, #20
 8011114:	af00      	add	r7, sp, #0
 8011116:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8011118:	4b0d      	ldr	r3, [pc, #52]	@ (8011150 <HAL_I2CEx_EnableFastModePlus+0x40>)
 801111a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 801111e:	4a0c      	ldr	r2, [pc, #48]	@ (8011150 <HAL_I2CEx_EnableFastModePlus+0x40>)
 8011120:	f043 0302 	orr.w	r3, r3, #2
 8011124:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8011128:	4b09      	ldr	r3, [pc, #36]	@ (8011150 <HAL_I2CEx_EnableFastModePlus+0x40>)
 801112a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 801112e:	f003 0302 	and.w	r3, r3, #2
 8011132:	60fb      	str	r3, [r7, #12]
 8011134:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
 8011136:	4b07      	ldr	r3, [pc, #28]	@ (8011154 <HAL_I2CEx_EnableFastModePlus+0x44>)
 8011138:	685a      	ldr	r2, [r3, #4]
 801113a:	4906      	ldr	r1, [pc, #24]	@ (8011154 <HAL_I2CEx_EnableFastModePlus+0x44>)
 801113c:	687b      	ldr	r3, [r7, #4]
 801113e:	4313      	orrs	r3, r2
 8011140:	604b      	str	r3, [r1, #4]
}
 8011142:	bf00      	nop
 8011144:	3714      	adds	r7, #20
 8011146:	46bd      	mov	sp, r7
 8011148:	f85d 7b04 	ldr.w	r7, [sp], #4
 801114c:	4770      	bx	lr
 801114e:	bf00      	nop
 8011150:	58024400 	.word	0x58024400
 8011154:	58000400 	.word	0x58000400

08011158 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8011158:	b580      	push	{r7, lr}
 801115a:	b084      	sub	sp, #16
 801115c:	af00      	add	r7, sp, #0
 801115e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8011160:	4b19      	ldr	r3, [pc, #100]	@ (80111c8 <HAL_PWREx_ConfigSupply+0x70>)
 8011162:	68db      	ldr	r3, [r3, #12]
 8011164:	f003 0304 	and.w	r3, r3, #4
 8011168:	2b04      	cmp	r3, #4
 801116a:	d00a      	beq.n	8011182 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 801116c:	4b16      	ldr	r3, [pc, #88]	@ (80111c8 <HAL_PWREx_ConfigSupply+0x70>)
 801116e:	68db      	ldr	r3, [r3, #12]
 8011170:	f003 0307 	and.w	r3, r3, #7
 8011174:	687a      	ldr	r2, [r7, #4]
 8011176:	429a      	cmp	r2, r3
 8011178:	d001      	beq.n	801117e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 801117a:	2301      	movs	r3, #1
 801117c:	e01f      	b.n	80111be <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 801117e:	2300      	movs	r3, #0
 8011180:	e01d      	b.n	80111be <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8011182:	4b11      	ldr	r3, [pc, #68]	@ (80111c8 <HAL_PWREx_ConfigSupply+0x70>)
 8011184:	68db      	ldr	r3, [r3, #12]
 8011186:	f023 0207 	bic.w	r2, r3, #7
 801118a:	490f      	ldr	r1, [pc, #60]	@ (80111c8 <HAL_PWREx_ConfigSupply+0x70>)
 801118c:	687b      	ldr	r3, [r7, #4]
 801118e:	4313      	orrs	r3, r2
 8011190:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8011192:	f7f8 f9e7 	bl	8009564 <HAL_GetTick>
 8011196:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8011198:	e009      	b.n	80111ae <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 801119a:	f7f8 f9e3 	bl	8009564 <HAL_GetTick>
 801119e:	4602      	mov	r2, r0
 80111a0:	68fb      	ldr	r3, [r7, #12]
 80111a2:	1ad3      	subs	r3, r2, r3
 80111a4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80111a8:	d901      	bls.n	80111ae <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80111aa:	2301      	movs	r3, #1
 80111ac:	e007      	b.n	80111be <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80111ae:	4b06      	ldr	r3, [pc, #24]	@ (80111c8 <HAL_PWREx_ConfigSupply+0x70>)
 80111b0:	685b      	ldr	r3, [r3, #4]
 80111b2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80111b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80111ba:	d1ee      	bne.n	801119a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80111bc:	2300      	movs	r3, #0
}
 80111be:	4618      	mov	r0, r3
 80111c0:	3710      	adds	r7, #16
 80111c2:	46bd      	mov	sp, r7
 80111c4:	bd80      	pop	{r7, pc}
 80111c6:	bf00      	nop
 80111c8:	58024800 	.word	0x58024800

080111cc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80111cc:	b580      	push	{r7, lr}
 80111ce:	b08c      	sub	sp, #48	@ 0x30
 80111d0:	af00      	add	r7, sp, #0
 80111d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80111d4:	687b      	ldr	r3, [r7, #4]
 80111d6:	2b00      	cmp	r3, #0
 80111d8:	d101      	bne.n	80111de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80111da:	2301      	movs	r3, #1
 80111dc:	e3c8      	b.n	8011970 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80111de:	687b      	ldr	r3, [r7, #4]
 80111e0:	681b      	ldr	r3, [r3, #0]
 80111e2:	f003 0301 	and.w	r3, r3, #1
 80111e6:	2b00      	cmp	r3, #0
 80111e8:	f000 8087 	beq.w	80112fa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80111ec:	4b88      	ldr	r3, [pc, #544]	@ (8011410 <HAL_RCC_OscConfig+0x244>)
 80111ee:	691b      	ldr	r3, [r3, #16]
 80111f0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80111f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80111f6:	4b86      	ldr	r3, [pc, #536]	@ (8011410 <HAL_RCC_OscConfig+0x244>)
 80111f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80111fa:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80111fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80111fe:	2b10      	cmp	r3, #16
 8011200:	d007      	beq.n	8011212 <HAL_RCC_OscConfig+0x46>
 8011202:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011204:	2b18      	cmp	r3, #24
 8011206:	d110      	bne.n	801122a <HAL_RCC_OscConfig+0x5e>
 8011208:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801120a:	f003 0303 	and.w	r3, r3, #3
 801120e:	2b02      	cmp	r3, #2
 8011210:	d10b      	bne.n	801122a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8011212:	4b7f      	ldr	r3, [pc, #508]	@ (8011410 <HAL_RCC_OscConfig+0x244>)
 8011214:	681b      	ldr	r3, [r3, #0]
 8011216:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801121a:	2b00      	cmp	r3, #0
 801121c:	d06c      	beq.n	80112f8 <HAL_RCC_OscConfig+0x12c>
 801121e:	687b      	ldr	r3, [r7, #4]
 8011220:	685b      	ldr	r3, [r3, #4]
 8011222:	2b00      	cmp	r3, #0
 8011224:	d168      	bne.n	80112f8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8011226:	2301      	movs	r3, #1
 8011228:	e3a2      	b.n	8011970 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801122a:	687b      	ldr	r3, [r7, #4]
 801122c:	685b      	ldr	r3, [r3, #4]
 801122e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8011232:	d106      	bne.n	8011242 <HAL_RCC_OscConfig+0x76>
 8011234:	4b76      	ldr	r3, [pc, #472]	@ (8011410 <HAL_RCC_OscConfig+0x244>)
 8011236:	681b      	ldr	r3, [r3, #0]
 8011238:	4a75      	ldr	r2, [pc, #468]	@ (8011410 <HAL_RCC_OscConfig+0x244>)
 801123a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801123e:	6013      	str	r3, [r2, #0]
 8011240:	e02e      	b.n	80112a0 <HAL_RCC_OscConfig+0xd4>
 8011242:	687b      	ldr	r3, [r7, #4]
 8011244:	685b      	ldr	r3, [r3, #4]
 8011246:	2b00      	cmp	r3, #0
 8011248:	d10c      	bne.n	8011264 <HAL_RCC_OscConfig+0x98>
 801124a:	4b71      	ldr	r3, [pc, #452]	@ (8011410 <HAL_RCC_OscConfig+0x244>)
 801124c:	681b      	ldr	r3, [r3, #0]
 801124e:	4a70      	ldr	r2, [pc, #448]	@ (8011410 <HAL_RCC_OscConfig+0x244>)
 8011250:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8011254:	6013      	str	r3, [r2, #0]
 8011256:	4b6e      	ldr	r3, [pc, #440]	@ (8011410 <HAL_RCC_OscConfig+0x244>)
 8011258:	681b      	ldr	r3, [r3, #0]
 801125a:	4a6d      	ldr	r2, [pc, #436]	@ (8011410 <HAL_RCC_OscConfig+0x244>)
 801125c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8011260:	6013      	str	r3, [r2, #0]
 8011262:	e01d      	b.n	80112a0 <HAL_RCC_OscConfig+0xd4>
 8011264:	687b      	ldr	r3, [r7, #4]
 8011266:	685b      	ldr	r3, [r3, #4]
 8011268:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 801126c:	d10c      	bne.n	8011288 <HAL_RCC_OscConfig+0xbc>
 801126e:	4b68      	ldr	r3, [pc, #416]	@ (8011410 <HAL_RCC_OscConfig+0x244>)
 8011270:	681b      	ldr	r3, [r3, #0]
 8011272:	4a67      	ldr	r2, [pc, #412]	@ (8011410 <HAL_RCC_OscConfig+0x244>)
 8011274:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8011278:	6013      	str	r3, [r2, #0]
 801127a:	4b65      	ldr	r3, [pc, #404]	@ (8011410 <HAL_RCC_OscConfig+0x244>)
 801127c:	681b      	ldr	r3, [r3, #0]
 801127e:	4a64      	ldr	r2, [pc, #400]	@ (8011410 <HAL_RCC_OscConfig+0x244>)
 8011280:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8011284:	6013      	str	r3, [r2, #0]
 8011286:	e00b      	b.n	80112a0 <HAL_RCC_OscConfig+0xd4>
 8011288:	4b61      	ldr	r3, [pc, #388]	@ (8011410 <HAL_RCC_OscConfig+0x244>)
 801128a:	681b      	ldr	r3, [r3, #0]
 801128c:	4a60      	ldr	r2, [pc, #384]	@ (8011410 <HAL_RCC_OscConfig+0x244>)
 801128e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8011292:	6013      	str	r3, [r2, #0]
 8011294:	4b5e      	ldr	r3, [pc, #376]	@ (8011410 <HAL_RCC_OscConfig+0x244>)
 8011296:	681b      	ldr	r3, [r3, #0]
 8011298:	4a5d      	ldr	r2, [pc, #372]	@ (8011410 <HAL_RCC_OscConfig+0x244>)
 801129a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 801129e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80112a0:	687b      	ldr	r3, [r7, #4]
 80112a2:	685b      	ldr	r3, [r3, #4]
 80112a4:	2b00      	cmp	r3, #0
 80112a6:	d013      	beq.n	80112d0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80112a8:	f7f8 f95c 	bl	8009564 <HAL_GetTick>
 80112ac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80112ae:	e008      	b.n	80112c2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80112b0:	f7f8 f958 	bl	8009564 <HAL_GetTick>
 80112b4:	4602      	mov	r2, r0
 80112b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80112b8:	1ad3      	subs	r3, r2, r3
 80112ba:	2b64      	cmp	r3, #100	@ 0x64
 80112bc:	d901      	bls.n	80112c2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80112be:	2303      	movs	r3, #3
 80112c0:	e356      	b.n	8011970 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80112c2:	4b53      	ldr	r3, [pc, #332]	@ (8011410 <HAL_RCC_OscConfig+0x244>)
 80112c4:	681b      	ldr	r3, [r3, #0]
 80112c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80112ca:	2b00      	cmp	r3, #0
 80112cc:	d0f0      	beq.n	80112b0 <HAL_RCC_OscConfig+0xe4>
 80112ce:	e014      	b.n	80112fa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80112d0:	f7f8 f948 	bl	8009564 <HAL_GetTick>
 80112d4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80112d6:	e008      	b.n	80112ea <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80112d8:	f7f8 f944 	bl	8009564 <HAL_GetTick>
 80112dc:	4602      	mov	r2, r0
 80112de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80112e0:	1ad3      	subs	r3, r2, r3
 80112e2:	2b64      	cmp	r3, #100	@ 0x64
 80112e4:	d901      	bls.n	80112ea <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80112e6:	2303      	movs	r3, #3
 80112e8:	e342      	b.n	8011970 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80112ea:	4b49      	ldr	r3, [pc, #292]	@ (8011410 <HAL_RCC_OscConfig+0x244>)
 80112ec:	681b      	ldr	r3, [r3, #0]
 80112ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80112f2:	2b00      	cmp	r3, #0
 80112f4:	d1f0      	bne.n	80112d8 <HAL_RCC_OscConfig+0x10c>
 80112f6:	e000      	b.n	80112fa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80112f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80112fa:	687b      	ldr	r3, [r7, #4]
 80112fc:	681b      	ldr	r3, [r3, #0]
 80112fe:	f003 0302 	and.w	r3, r3, #2
 8011302:	2b00      	cmp	r3, #0
 8011304:	f000 808c 	beq.w	8011420 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8011308:	4b41      	ldr	r3, [pc, #260]	@ (8011410 <HAL_RCC_OscConfig+0x244>)
 801130a:	691b      	ldr	r3, [r3, #16]
 801130c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8011310:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8011312:	4b3f      	ldr	r3, [pc, #252]	@ (8011410 <HAL_RCC_OscConfig+0x244>)
 8011314:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011316:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8011318:	6a3b      	ldr	r3, [r7, #32]
 801131a:	2b00      	cmp	r3, #0
 801131c:	d007      	beq.n	801132e <HAL_RCC_OscConfig+0x162>
 801131e:	6a3b      	ldr	r3, [r7, #32]
 8011320:	2b18      	cmp	r3, #24
 8011322:	d137      	bne.n	8011394 <HAL_RCC_OscConfig+0x1c8>
 8011324:	69fb      	ldr	r3, [r7, #28]
 8011326:	f003 0303 	and.w	r3, r3, #3
 801132a:	2b00      	cmp	r3, #0
 801132c:	d132      	bne.n	8011394 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801132e:	4b38      	ldr	r3, [pc, #224]	@ (8011410 <HAL_RCC_OscConfig+0x244>)
 8011330:	681b      	ldr	r3, [r3, #0]
 8011332:	f003 0304 	and.w	r3, r3, #4
 8011336:	2b00      	cmp	r3, #0
 8011338:	d005      	beq.n	8011346 <HAL_RCC_OscConfig+0x17a>
 801133a:	687b      	ldr	r3, [r7, #4]
 801133c:	68db      	ldr	r3, [r3, #12]
 801133e:	2b00      	cmp	r3, #0
 8011340:	d101      	bne.n	8011346 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8011342:	2301      	movs	r3, #1
 8011344:	e314      	b.n	8011970 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8011346:	4b32      	ldr	r3, [pc, #200]	@ (8011410 <HAL_RCC_OscConfig+0x244>)
 8011348:	681b      	ldr	r3, [r3, #0]
 801134a:	f023 0219 	bic.w	r2, r3, #25
 801134e:	687b      	ldr	r3, [r7, #4]
 8011350:	68db      	ldr	r3, [r3, #12]
 8011352:	492f      	ldr	r1, [pc, #188]	@ (8011410 <HAL_RCC_OscConfig+0x244>)
 8011354:	4313      	orrs	r3, r2
 8011356:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011358:	f7f8 f904 	bl	8009564 <HAL_GetTick>
 801135c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801135e:	e008      	b.n	8011372 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8011360:	f7f8 f900 	bl	8009564 <HAL_GetTick>
 8011364:	4602      	mov	r2, r0
 8011366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011368:	1ad3      	subs	r3, r2, r3
 801136a:	2b02      	cmp	r3, #2
 801136c:	d901      	bls.n	8011372 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 801136e:	2303      	movs	r3, #3
 8011370:	e2fe      	b.n	8011970 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8011372:	4b27      	ldr	r3, [pc, #156]	@ (8011410 <HAL_RCC_OscConfig+0x244>)
 8011374:	681b      	ldr	r3, [r3, #0]
 8011376:	f003 0304 	and.w	r3, r3, #4
 801137a:	2b00      	cmp	r3, #0
 801137c:	d0f0      	beq.n	8011360 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801137e:	4b24      	ldr	r3, [pc, #144]	@ (8011410 <HAL_RCC_OscConfig+0x244>)
 8011380:	685b      	ldr	r3, [r3, #4]
 8011382:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8011386:	687b      	ldr	r3, [r7, #4]
 8011388:	691b      	ldr	r3, [r3, #16]
 801138a:	061b      	lsls	r3, r3, #24
 801138c:	4920      	ldr	r1, [pc, #128]	@ (8011410 <HAL_RCC_OscConfig+0x244>)
 801138e:	4313      	orrs	r3, r2
 8011390:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8011392:	e045      	b.n	8011420 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8011394:	687b      	ldr	r3, [r7, #4]
 8011396:	68db      	ldr	r3, [r3, #12]
 8011398:	2b00      	cmp	r3, #0
 801139a:	d026      	beq.n	80113ea <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 801139c:	4b1c      	ldr	r3, [pc, #112]	@ (8011410 <HAL_RCC_OscConfig+0x244>)
 801139e:	681b      	ldr	r3, [r3, #0]
 80113a0:	f023 0219 	bic.w	r2, r3, #25
 80113a4:	687b      	ldr	r3, [r7, #4]
 80113a6:	68db      	ldr	r3, [r3, #12]
 80113a8:	4919      	ldr	r1, [pc, #100]	@ (8011410 <HAL_RCC_OscConfig+0x244>)
 80113aa:	4313      	orrs	r3, r2
 80113ac:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80113ae:	f7f8 f8d9 	bl	8009564 <HAL_GetTick>
 80113b2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80113b4:	e008      	b.n	80113c8 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80113b6:	f7f8 f8d5 	bl	8009564 <HAL_GetTick>
 80113ba:	4602      	mov	r2, r0
 80113bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80113be:	1ad3      	subs	r3, r2, r3
 80113c0:	2b02      	cmp	r3, #2
 80113c2:	d901      	bls.n	80113c8 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80113c4:	2303      	movs	r3, #3
 80113c6:	e2d3      	b.n	8011970 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80113c8:	4b11      	ldr	r3, [pc, #68]	@ (8011410 <HAL_RCC_OscConfig+0x244>)
 80113ca:	681b      	ldr	r3, [r3, #0]
 80113cc:	f003 0304 	and.w	r3, r3, #4
 80113d0:	2b00      	cmp	r3, #0
 80113d2:	d0f0      	beq.n	80113b6 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80113d4:	4b0e      	ldr	r3, [pc, #56]	@ (8011410 <HAL_RCC_OscConfig+0x244>)
 80113d6:	685b      	ldr	r3, [r3, #4]
 80113d8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80113dc:	687b      	ldr	r3, [r7, #4]
 80113de:	691b      	ldr	r3, [r3, #16]
 80113e0:	061b      	lsls	r3, r3, #24
 80113e2:	490b      	ldr	r1, [pc, #44]	@ (8011410 <HAL_RCC_OscConfig+0x244>)
 80113e4:	4313      	orrs	r3, r2
 80113e6:	604b      	str	r3, [r1, #4]
 80113e8:	e01a      	b.n	8011420 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80113ea:	4b09      	ldr	r3, [pc, #36]	@ (8011410 <HAL_RCC_OscConfig+0x244>)
 80113ec:	681b      	ldr	r3, [r3, #0]
 80113ee:	4a08      	ldr	r2, [pc, #32]	@ (8011410 <HAL_RCC_OscConfig+0x244>)
 80113f0:	f023 0301 	bic.w	r3, r3, #1
 80113f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80113f6:	f7f8 f8b5 	bl	8009564 <HAL_GetTick>
 80113fa:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80113fc:	e00a      	b.n	8011414 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80113fe:	f7f8 f8b1 	bl	8009564 <HAL_GetTick>
 8011402:	4602      	mov	r2, r0
 8011404:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011406:	1ad3      	subs	r3, r2, r3
 8011408:	2b02      	cmp	r3, #2
 801140a:	d903      	bls.n	8011414 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 801140c:	2303      	movs	r3, #3
 801140e:	e2af      	b.n	8011970 <HAL_RCC_OscConfig+0x7a4>
 8011410:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8011414:	4b96      	ldr	r3, [pc, #600]	@ (8011670 <HAL_RCC_OscConfig+0x4a4>)
 8011416:	681b      	ldr	r3, [r3, #0]
 8011418:	f003 0304 	and.w	r3, r3, #4
 801141c:	2b00      	cmp	r3, #0
 801141e:	d1ee      	bne.n	80113fe <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8011420:	687b      	ldr	r3, [r7, #4]
 8011422:	681b      	ldr	r3, [r3, #0]
 8011424:	f003 0310 	and.w	r3, r3, #16
 8011428:	2b00      	cmp	r3, #0
 801142a:	d06a      	beq.n	8011502 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801142c:	4b90      	ldr	r3, [pc, #576]	@ (8011670 <HAL_RCC_OscConfig+0x4a4>)
 801142e:	691b      	ldr	r3, [r3, #16]
 8011430:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8011434:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8011436:	4b8e      	ldr	r3, [pc, #568]	@ (8011670 <HAL_RCC_OscConfig+0x4a4>)
 8011438:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801143a:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 801143c:	69bb      	ldr	r3, [r7, #24]
 801143e:	2b08      	cmp	r3, #8
 8011440:	d007      	beq.n	8011452 <HAL_RCC_OscConfig+0x286>
 8011442:	69bb      	ldr	r3, [r7, #24]
 8011444:	2b18      	cmp	r3, #24
 8011446:	d11b      	bne.n	8011480 <HAL_RCC_OscConfig+0x2b4>
 8011448:	697b      	ldr	r3, [r7, #20]
 801144a:	f003 0303 	and.w	r3, r3, #3
 801144e:	2b01      	cmp	r3, #1
 8011450:	d116      	bne.n	8011480 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8011452:	4b87      	ldr	r3, [pc, #540]	@ (8011670 <HAL_RCC_OscConfig+0x4a4>)
 8011454:	681b      	ldr	r3, [r3, #0]
 8011456:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801145a:	2b00      	cmp	r3, #0
 801145c:	d005      	beq.n	801146a <HAL_RCC_OscConfig+0x29e>
 801145e:	687b      	ldr	r3, [r7, #4]
 8011460:	69db      	ldr	r3, [r3, #28]
 8011462:	2b80      	cmp	r3, #128	@ 0x80
 8011464:	d001      	beq.n	801146a <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8011466:	2301      	movs	r3, #1
 8011468:	e282      	b.n	8011970 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 801146a:	4b81      	ldr	r3, [pc, #516]	@ (8011670 <HAL_RCC_OscConfig+0x4a4>)
 801146c:	68db      	ldr	r3, [r3, #12]
 801146e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8011472:	687b      	ldr	r3, [r7, #4]
 8011474:	6a1b      	ldr	r3, [r3, #32]
 8011476:	061b      	lsls	r3, r3, #24
 8011478:	497d      	ldr	r1, [pc, #500]	@ (8011670 <HAL_RCC_OscConfig+0x4a4>)
 801147a:	4313      	orrs	r3, r2
 801147c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 801147e:	e040      	b.n	8011502 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8011480:	687b      	ldr	r3, [r7, #4]
 8011482:	69db      	ldr	r3, [r3, #28]
 8011484:	2b00      	cmp	r3, #0
 8011486:	d023      	beq.n	80114d0 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8011488:	4b79      	ldr	r3, [pc, #484]	@ (8011670 <HAL_RCC_OscConfig+0x4a4>)
 801148a:	681b      	ldr	r3, [r3, #0]
 801148c:	4a78      	ldr	r2, [pc, #480]	@ (8011670 <HAL_RCC_OscConfig+0x4a4>)
 801148e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011492:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011494:	f7f8 f866 	bl	8009564 <HAL_GetTick>
 8011498:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 801149a:	e008      	b.n	80114ae <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 801149c:	f7f8 f862 	bl	8009564 <HAL_GetTick>
 80114a0:	4602      	mov	r2, r0
 80114a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80114a4:	1ad3      	subs	r3, r2, r3
 80114a6:	2b02      	cmp	r3, #2
 80114a8:	d901      	bls.n	80114ae <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80114aa:	2303      	movs	r3, #3
 80114ac:	e260      	b.n	8011970 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80114ae:	4b70      	ldr	r3, [pc, #448]	@ (8011670 <HAL_RCC_OscConfig+0x4a4>)
 80114b0:	681b      	ldr	r3, [r3, #0]
 80114b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80114b6:	2b00      	cmp	r3, #0
 80114b8:	d0f0      	beq.n	801149c <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80114ba:	4b6d      	ldr	r3, [pc, #436]	@ (8011670 <HAL_RCC_OscConfig+0x4a4>)
 80114bc:	68db      	ldr	r3, [r3, #12]
 80114be:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80114c2:	687b      	ldr	r3, [r7, #4]
 80114c4:	6a1b      	ldr	r3, [r3, #32]
 80114c6:	061b      	lsls	r3, r3, #24
 80114c8:	4969      	ldr	r1, [pc, #420]	@ (8011670 <HAL_RCC_OscConfig+0x4a4>)
 80114ca:	4313      	orrs	r3, r2
 80114cc:	60cb      	str	r3, [r1, #12]
 80114ce:	e018      	b.n	8011502 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80114d0:	4b67      	ldr	r3, [pc, #412]	@ (8011670 <HAL_RCC_OscConfig+0x4a4>)
 80114d2:	681b      	ldr	r3, [r3, #0]
 80114d4:	4a66      	ldr	r2, [pc, #408]	@ (8011670 <HAL_RCC_OscConfig+0x4a4>)
 80114d6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80114da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80114dc:	f7f8 f842 	bl	8009564 <HAL_GetTick>
 80114e0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80114e2:	e008      	b.n	80114f6 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80114e4:	f7f8 f83e 	bl	8009564 <HAL_GetTick>
 80114e8:	4602      	mov	r2, r0
 80114ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80114ec:	1ad3      	subs	r3, r2, r3
 80114ee:	2b02      	cmp	r3, #2
 80114f0:	d901      	bls.n	80114f6 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 80114f2:	2303      	movs	r3, #3
 80114f4:	e23c      	b.n	8011970 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80114f6:	4b5e      	ldr	r3, [pc, #376]	@ (8011670 <HAL_RCC_OscConfig+0x4a4>)
 80114f8:	681b      	ldr	r3, [r3, #0]
 80114fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80114fe:	2b00      	cmp	r3, #0
 8011500:	d1f0      	bne.n	80114e4 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8011502:	687b      	ldr	r3, [r7, #4]
 8011504:	681b      	ldr	r3, [r3, #0]
 8011506:	f003 0308 	and.w	r3, r3, #8
 801150a:	2b00      	cmp	r3, #0
 801150c:	d036      	beq.n	801157c <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 801150e:	687b      	ldr	r3, [r7, #4]
 8011510:	695b      	ldr	r3, [r3, #20]
 8011512:	2b00      	cmp	r3, #0
 8011514:	d019      	beq.n	801154a <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8011516:	4b56      	ldr	r3, [pc, #344]	@ (8011670 <HAL_RCC_OscConfig+0x4a4>)
 8011518:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801151a:	4a55      	ldr	r2, [pc, #340]	@ (8011670 <HAL_RCC_OscConfig+0x4a4>)
 801151c:	f043 0301 	orr.w	r3, r3, #1
 8011520:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8011522:	f7f8 f81f 	bl	8009564 <HAL_GetTick>
 8011526:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8011528:	e008      	b.n	801153c <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801152a:	f7f8 f81b 	bl	8009564 <HAL_GetTick>
 801152e:	4602      	mov	r2, r0
 8011530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011532:	1ad3      	subs	r3, r2, r3
 8011534:	2b02      	cmp	r3, #2
 8011536:	d901      	bls.n	801153c <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8011538:	2303      	movs	r3, #3
 801153a:	e219      	b.n	8011970 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 801153c:	4b4c      	ldr	r3, [pc, #304]	@ (8011670 <HAL_RCC_OscConfig+0x4a4>)
 801153e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011540:	f003 0302 	and.w	r3, r3, #2
 8011544:	2b00      	cmp	r3, #0
 8011546:	d0f0      	beq.n	801152a <HAL_RCC_OscConfig+0x35e>
 8011548:	e018      	b.n	801157c <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 801154a:	4b49      	ldr	r3, [pc, #292]	@ (8011670 <HAL_RCC_OscConfig+0x4a4>)
 801154c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801154e:	4a48      	ldr	r2, [pc, #288]	@ (8011670 <HAL_RCC_OscConfig+0x4a4>)
 8011550:	f023 0301 	bic.w	r3, r3, #1
 8011554:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8011556:	f7f8 f805 	bl	8009564 <HAL_GetTick>
 801155a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 801155c:	e008      	b.n	8011570 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801155e:	f7f8 f801 	bl	8009564 <HAL_GetTick>
 8011562:	4602      	mov	r2, r0
 8011564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011566:	1ad3      	subs	r3, r2, r3
 8011568:	2b02      	cmp	r3, #2
 801156a:	d901      	bls.n	8011570 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 801156c:	2303      	movs	r3, #3
 801156e:	e1ff      	b.n	8011970 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8011570:	4b3f      	ldr	r3, [pc, #252]	@ (8011670 <HAL_RCC_OscConfig+0x4a4>)
 8011572:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011574:	f003 0302 	and.w	r3, r3, #2
 8011578:	2b00      	cmp	r3, #0
 801157a:	d1f0      	bne.n	801155e <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 801157c:	687b      	ldr	r3, [r7, #4]
 801157e:	681b      	ldr	r3, [r3, #0]
 8011580:	f003 0320 	and.w	r3, r3, #32
 8011584:	2b00      	cmp	r3, #0
 8011586:	d036      	beq.n	80115f6 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8011588:	687b      	ldr	r3, [r7, #4]
 801158a:	699b      	ldr	r3, [r3, #24]
 801158c:	2b00      	cmp	r3, #0
 801158e:	d019      	beq.n	80115c4 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8011590:	4b37      	ldr	r3, [pc, #220]	@ (8011670 <HAL_RCC_OscConfig+0x4a4>)
 8011592:	681b      	ldr	r3, [r3, #0]
 8011594:	4a36      	ldr	r2, [pc, #216]	@ (8011670 <HAL_RCC_OscConfig+0x4a4>)
 8011596:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 801159a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 801159c:	f7f7 ffe2 	bl	8009564 <HAL_GetTick>
 80115a0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80115a2:	e008      	b.n	80115b6 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80115a4:	f7f7 ffde 	bl	8009564 <HAL_GetTick>
 80115a8:	4602      	mov	r2, r0
 80115aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80115ac:	1ad3      	subs	r3, r2, r3
 80115ae:	2b02      	cmp	r3, #2
 80115b0:	d901      	bls.n	80115b6 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 80115b2:	2303      	movs	r3, #3
 80115b4:	e1dc      	b.n	8011970 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80115b6:	4b2e      	ldr	r3, [pc, #184]	@ (8011670 <HAL_RCC_OscConfig+0x4a4>)
 80115b8:	681b      	ldr	r3, [r3, #0]
 80115ba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80115be:	2b00      	cmp	r3, #0
 80115c0:	d0f0      	beq.n	80115a4 <HAL_RCC_OscConfig+0x3d8>
 80115c2:	e018      	b.n	80115f6 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80115c4:	4b2a      	ldr	r3, [pc, #168]	@ (8011670 <HAL_RCC_OscConfig+0x4a4>)
 80115c6:	681b      	ldr	r3, [r3, #0]
 80115c8:	4a29      	ldr	r2, [pc, #164]	@ (8011670 <HAL_RCC_OscConfig+0x4a4>)
 80115ca:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80115ce:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80115d0:	f7f7 ffc8 	bl	8009564 <HAL_GetTick>
 80115d4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80115d6:	e008      	b.n	80115ea <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80115d8:	f7f7 ffc4 	bl	8009564 <HAL_GetTick>
 80115dc:	4602      	mov	r2, r0
 80115de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80115e0:	1ad3      	subs	r3, r2, r3
 80115e2:	2b02      	cmp	r3, #2
 80115e4:	d901      	bls.n	80115ea <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 80115e6:	2303      	movs	r3, #3
 80115e8:	e1c2      	b.n	8011970 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80115ea:	4b21      	ldr	r3, [pc, #132]	@ (8011670 <HAL_RCC_OscConfig+0x4a4>)
 80115ec:	681b      	ldr	r3, [r3, #0]
 80115ee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80115f2:	2b00      	cmp	r3, #0
 80115f4:	d1f0      	bne.n	80115d8 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80115f6:	687b      	ldr	r3, [r7, #4]
 80115f8:	681b      	ldr	r3, [r3, #0]
 80115fa:	f003 0304 	and.w	r3, r3, #4
 80115fe:	2b00      	cmp	r3, #0
 8011600:	f000 8086 	beq.w	8011710 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8011604:	4b1b      	ldr	r3, [pc, #108]	@ (8011674 <HAL_RCC_OscConfig+0x4a8>)
 8011606:	681b      	ldr	r3, [r3, #0]
 8011608:	4a1a      	ldr	r2, [pc, #104]	@ (8011674 <HAL_RCC_OscConfig+0x4a8>)
 801160a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801160e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8011610:	f7f7 ffa8 	bl	8009564 <HAL_GetTick>
 8011614:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8011616:	e008      	b.n	801162a <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8011618:	f7f7 ffa4 	bl	8009564 <HAL_GetTick>
 801161c:	4602      	mov	r2, r0
 801161e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011620:	1ad3      	subs	r3, r2, r3
 8011622:	2b64      	cmp	r3, #100	@ 0x64
 8011624:	d901      	bls.n	801162a <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8011626:	2303      	movs	r3, #3
 8011628:	e1a2      	b.n	8011970 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801162a:	4b12      	ldr	r3, [pc, #72]	@ (8011674 <HAL_RCC_OscConfig+0x4a8>)
 801162c:	681b      	ldr	r3, [r3, #0]
 801162e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8011632:	2b00      	cmp	r3, #0
 8011634:	d0f0      	beq.n	8011618 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8011636:	687b      	ldr	r3, [r7, #4]
 8011638:	689b      	ldr	r3, [r3, #8]
 801163a:	2b01      	cmp	r3, #1
 801163c:	d106      	bne.n	801164c <HAL_RCC_OscConfig+0x480>
 801163e:	4b0c      	ldr	r3, [pc, #48]	@ (8011670 <HAL_RCC_OscConfig+0x4a4>)
 8011640:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011642:	4a0b      	ldr	r2, [pc, #44]	@ (8011670 <HAL_RCC_OscConfig+0x4a4>)
 8011644:	f043 0301 	orr.w	r3, r3, #1
 8011648:	6713      	str	r3, [r2, #112]	@ 0x70
 801164a:	e032      	b.n	80116b2 <HAL_RCC_OscConfig+0x4e6>
 801164c:	687b      	ldr	r3, [r7, #4]
 801164e:	689b      	ldr	r3, [r3, #8]
 8011650:	2b00      	cmp	r3, #0
 8011652:	d111      	bne.n	8011678 <HAL_RCC_OscConfig+0x4ac>
 8011654:	4b06      	ldr	r3, [pc, #24]	@ (8011670 <HAL_RCC_OscConfig+0x4a4>)
 8011656:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011658:	4a05      	ldr	r2, [pc, #20]	@ (8011670 <HAL_RCC_OscConfig+0x4a4>)
 801165a:	f023 0301 	bic.w	r3, r3, #1
 801165e:	6713      	str	r3, [r2, #112]	@ 0x70
 8011660:	4b03      	ldr	r3, [pc, #12]	@ (8011670 <HAL_RCC_OscConfig+0x4a4>)
 8011662:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011664:	4a02      	ldr	r2, [pc, #8]	@ (8011670 <HAL_RCC_OscConfig+0x4a4>)
 8011666:	f023 0304 	bic.w	r3, r3, #4
 801166a:	6713      	str	r3, [r2, #112]	@ 0x70
 801166c:	e021      	b.n	80116b2 <HAL_RCC_OscConfig+0x4e6>
 801166e:	bf00      	nop
 8011670:	58024400 	.word	0x58024400
 8011674:	58024800 	.word	0x58024800
 8011678:	687b      	ldr	r3, [r7, #4]
 801167a:	689b      	ldr	r3, [r3, #8]
 801167c:	2b05      	cmp	r3, #5
 801167e:	d10c      	bne.n	801169a <HAL_RCC_OscConfig+0x4ce>
 8011680:	4b83      	ldr	r3, [pc, #524]	@ (8011890 <HAL_RCC_OscConfig+0x6c4>)
 8011682:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011684:	4a82      	ldr	r2, [pc, #520]	@ (8011890 <HAL_RCC_OscConfig+0x6c4>)
 8011686:	f043 0304 	orr.w	r3, r3, #4
 801168a:	6713      	str	r3, [r2, #112]	@ 0x70
 801168c:	4b80      	ldr	r3, [pc, #512]	@ (8011890 <HAL_RCC_OscConfig+0x6c4>)
 801168e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011690:	4a7f      	ldr	r2, [pc, #508]	@ (8011890 <HAL_RCC_OscConfig+0x6c4>)
 8011692:	f043 0301 	orr.w	r3, r3, #1
 8011696:	6713      	str	r3, [r2, #112]	@ 0x70
 8011698:	e00b      	b.n	80116b2 <HAL_RCC_OscConfig+0x4e6>
 801169a:	4b7d      	ldr	r3, [pc, #500]	@ (8011890 <HAL_RCC_OscConfig+0x6c4>)
 801169c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801169e:	4a7c      	ldr	r2, [pc, #496]	@ (8011890 <HAL_RCC_OscConfig+0x6c4>)
 80116a0:	f023 0301 	bic.w	r3, r3, #1
 80116a4:	6713      	str	r3, [r2, #112]	@ 0x70
 80116a6:	4b7a      	ldr	r3, [pc, #488]	@ (8011890 <HAL_RCC_OscConfig+0x6c4>)
 80116a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80116aa:	4a79      	ldr	r2, [pc, #484]	@ (8011890 <HAL_RCC_OscConfig+0x6c4>)
 80116ac:	f023 0304 	bic.w	r3, r3, #4
 80116b0:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80116b2:	687b      	ldr	r3, [r7, #4]
 80116b4:	689b      	ldr	r3, [r3, #8]
 80116b6:	2b00      	cmp	r3, #0
 80116b8:	d015      	beq.n	80116e6 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80116ba:	f7f7 ff53 	bl	8009564 <HAL_GetTick>
 80116be:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80116c0:	e00a      	b.n	80116d8 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80116c2:	f7f7 ff4f 	bl	8009564 <HAL_GetTick>
 80116c6:	4602      	mov	r2, r0
 80116c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80116ca:	1ad3      	subs	r3, r2, r3
 80116cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80116d0:	4293      	cmp	r3, r2
 80116d2:	d901      	bls.n	80116d8 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 80116d4:	2303      	movs	r3, #3
 80116d6:	e14b      	b.n	8011970 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80116d8:	4b6d      	ldr	r3, [pc, #436]	@ (8011890 <HAL_RCC_OscConfig+0x6c4>)
 80116da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80116dc:	f003 0302 	and.w	r3, r3, #2
 80116e0:	2b00      	cmp	r3, #0
 80116e2:	d0ee      	beq.n	80116c2 <HAL_RCC_OscConfig+0x4f6>
 80116e4:	e014      	b.n	8011710 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80116e6:	f7f7 ff3d 	bl	8009564 <HAL_GetTick>
 80116ea:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80116ec:	e00a      	b.n	8011704 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80116ee:	f7f7 ff39 	bl	8009564 <HAL_GetTick>
 80116f2:	4602      	mov	r2, r0
 80116f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80116f6:	1ad3      	subs	r3, r2, r3
 80116f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80116fc:	4293      	cmp	r3, r2
 80116fe:	d901      	bls.n	8011704 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8011700:	2303      	movs	r3, #3
 8011702:	e135      	b.n	8011970 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8011704:	4b62      	ldr	r3, [pc, #392]	@ (8011890 <HAL_RCC_OscConfig+0x6c4>)
 8011706:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011708:	f003 0302 	and.w	r3, r3, #2
 801170c:	2b00      	cmp	r3, #0
 801170e:	d1ee      	bne.n	80116ee <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8011710:	687b      	ldr	r3, [r7, #4]
 8011712:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011714:	2b00      	cmp	r3, #0
 8011716:	f000 812a 	beq.w	801196e <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 801171a:	4b5d      	ldr	r3, [pc, #372]	@ (8011890 <HAL_RCC_OscConfig+0x6c4>)
 801171c:	691b      	ldr	r3, [r3, #16]
 801171e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8011722:	2b18      	cmp	r3, #24
 8011724:	f000 80ba 	beq.w	801189c <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8011728:	687b      	ldr	r3, [r7, #4]
 801172a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801172c:	2b02      	cmp	r3, #2
 801172e:	f040 8095 	bne.w	801185c <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8011732:	4b57      	ldr	r3, [pc, #348]	@ (8011890 <HAL_RCC_OscConfig+0x6c4>)
 8011734:	681b      	ldr	r3, [r3, #0]
 8011736:	4a56      	ldr	r2, [pc, #344]	@ (8011890 <HAL_RCC_OscConfig+0x6c4>)
 8011738:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 801173c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801173e:	f7f7 ff11 	bl	8009564 <HAL_GetTick>
 8011742:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8011744:	e008      	b.n	8011758 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8011746:	f7f7 ff0d 	bl	8009564 <HAL_GetTick>
 801174a:	4602      	mov	r2, r0
 801174c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801174e:	1ad3      	subs	r3, r2, r3
 8011750:	2b02      	cmp	r3, #2
 8011752:	d901      	bls.n	8011758 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8011754:	2303      	movs	r3, #3
 8011756:	e10b      	b.n	8011970 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8011758:	4b4d      	ldr	r3, [pc, #308]	@ (8011890 <HAL_RCC_OscConfig+0x6c4>)
 801175a:	681b      	ldr	r3, [r3, #0]
 801175c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8011760:	2b00      	cmp	r3, #0
 8011762:	d1f0      	bne.n	8011746 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8011764:	4b4a      	ldr	r3, [pc, #296]	@ (8011890 <HAL_RCC_OscConfig+0x6c4>)
 8011766:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8011768:	4b4a      	ldr	r3, [pc, #296]	@ (8011894 <HAL_RCC_OscConfig+0x6c8>)
 801176a:	4013      	ands	r3, r2
 801176c:	687a      	ldr	r2, [r7, #4]
 801176e:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8011770:	687a      	ldr	r2, [r7, #4]
 8011772:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8011774:	0112      	lsls	r2, r2, #4
 8011776:	430a      	orrs	r2, r1
 8011778:	4945      	ldr	r1, [pc, #276]	@ (8011890 <HAL_RCC_OscConfig+0x6c4>)
 801177a:	4313      	orrs	r3, r2
 801177c:	628b      	str	r3, [r1, #40]	@ 0x28
 801177e:	687b      	ldr	r3, [r7, #4]
 8011780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011782:	3b01      	subs	r3, #1
 8011784:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8011788:	687b      	ldr	r3, [r7, #4]
 801178a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801178c:	3b01      	subs	r3, #1
 801178e:	025b      	lsls	r3, r3, #9
 8011790:	b29b      	uxth	r3, r3
 8011792:	431a      	orrs	r2, r3
 8011794:	687b      	ldr	r3, [r7, #4]
 8011796:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011798:	3b01      	subs	r3, #1
 801179a:	041b      	lsls	r3, r3, #16
 801179c:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80117a0:	431a      	orrs	r2, r3
 80117a2:	687b      	ldr	r3, [r7, #4]
 80117a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80117a6:	3b01      	subs	r3, #1
 80117a8:	061b      	lsls	r3, r3, #24
 80117aa:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80117ae:	4938      	ldr	r1, [pc, #224]	@ (8011890 <HAL_RCC_OscConfig+0x6c4>)
 80117b0:	4313      	orrs	r3, r2
 80117b2:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80117b4:	4b36      	ldr	r3, [pc, #216]	@ (8011890 <HAL_RCC_OscConfig+0x6c4>)
 80117b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80117b8:	4a35      	ldr	r2, [pc, #212]	@ (8011890 <HAL_RCC_OscConfig+0x6c4>)
 80117ba:	f023 0301 	bic.w	r3, r3, #1
 80117be:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80117c0:	4b33      	ldr	r3, [pc, #204]	@ (8011890 <HAL_RCC_OscConfig+0x6c4>)
 80117c2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80117c4:	4b34      	ldr	r3, [pc, #208]	@ (8011898 <HAL_RCC_OscConfig+0x6cc>)
 80117c6:	4013      	ands	r3, r2
 80117c8:	687a      	ldr	r2, [r7, #4]
 80117ca:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80117cc:	00d2      	lsls	r2, r2, #3
 80117ce:	4930      	ldr	r1, [pc, #192]	@ (8011890 <HAL_RCC_OscConfig+0x6c4>)
 80117d0:	4313      	orrs	r3, r2
 80117d2:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80117d4:	4b2e      	ldr	r3, [pc, #184]	@ (8011890 <HAL_RCC_OscConfig+0x6c4>)
 80117d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80117d8:	f023 020c 	bic.w	r2, r3, #12
 80117dc:	687b      	ldr	r3, [r7, #4]
 80117de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80117e0:	492b      	ldr	r1, [pc, #172]	@ (8011890 <HAL_RCC_OscConfig+0x6c4>)
 80117e2:	4313      	orrs	r3, r2
 80117e4:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80117e6:	4b2a      	ldr	r3, [pc, #168]	@ (8011890 <HAL_RCC_OscConfig+0x6c4>)
 80117e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80117ea:	f023 0202 	bic.w	r2, r3, #2
 80117ee:	687b      	ldr	r3, [r7, #4]
 80117f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80117f2:	4927      	ldr	r1, [pc, #156]	@ (8011890 <HAL_RCC_OscConfig+0x6c4>)
 80117f4:	4313      	orrs	r3, r2
 80117f6:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80117f8:	4b25      	ldr	r3, [pc, #148]	@ (8011890 <HAL_RCC_OscConfig+0x6c4>)
 80117fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80117fc:	4a24      	ldr	r2, [pc, #144]	@ (8011890 <HAL_RCC_OscConfig+0x6c4>)
 80117fe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8011802:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8011804:	4b22      	ldr	r3, [pc, #136]	@ (8011890 <HAL_RCC_OscConfig+0x6c4>)
 8011806:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011808:	4a21      	ldr	r2, [pc, #132]	@ (8011890 <HAL_RCC_OscConfig+0x6c4>)
 801180a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801180e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8011810:	4b1f      	ldr	r3, [pc, #124]	@ (8011890 <HAL_RCC_OscConfig+0x6c4>)
 8011812:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011814:	4a1e      	ldr	r2, [pc, #120]	@ (8011890 <HAL_RCC_OscConfig+0x6c4>)
 8011816:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 801181a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 801181c:	4b1c      	ldr	r3, [pc, #112]	@ (8011890 <HAL_RCC_OscConfig+0x6c4>)
 801181e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011820:	4a1b      	ldr	r2, [pc, #108]	@ (8011890 <HAL_RCC_OscConfig+0x6c4>)
 8011822:	f043 0301 	orr.w	r3, r3, #1
 8011826:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8011828:	4b19      	ldr	r3, [pc, #100]	@ (8011890 <HAL_RCC_OscConfig+0x6c4>)
 801182a:	681b      	ldr	r3, [r3, #0]
 801182c:	4a18      	ldr	r2, [pc, #96]	@ (8011890 <HAL_RCC_OscConfig+0x6c4>)
 801182e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8011832:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011834:	f7f7 fe96 	bl	8009564 <HAL_GetTick>
 8011838:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 801183a:	e008      	b.n	801184e <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801183c:	f7f7 fe92 	bl	8009564 <HAL_GetTick>
 8011840:	4602      	mov	r2, r0
 8011842:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011844:	1ad3      	subs	r3, r2, r3
 8011846:	2b02      	cmp	r3, #2
 8011848:	d901      	bls.n	801184e <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 801184a:	2303      	movs	r3, #3
 801184c:	e090      	b.n	8011970 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 801184e:	4b10      	ldr	r3, [pc, #64]	@ (8011890 <HAL_RCC_OscConfig+0x6c4>)
 8011850:	681b      	ldr	r3, [r3, #0]
 8011852:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8011856:	2b00      	cmp	r3, #0
 8011858:	d0f0      	beq.n	801183c <HAL_RCC_OscConfig+0x670>
 801185a:	e088      	b.n	801196e <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801185c:	4b0c      	ldr	r3, [pc, #48]	@ (8011890 <HAL_RCC_OscConfig+0x6c4>)
 801185e:	681b      	ldr	r3, [r3, #0]
 8011860:	4a0b      	ldr	r2, [pc, #44]	@ (8011890 <HAL_RCC_OscConfig+0x6c4>)
 8011862:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8011866:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011868:	f7f7 fe7c 	bl	8009564 <HAL_GetTick>
 801186c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801186e:	e008      	b.n	8011882 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8011870:	f7f7 fe78 	bl	8009564 <HAL_GetTick>
 8011874:	4602      	mov	r2, r0
 8011876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011878:	1ad3      	subs	r3, r2, r3
 801187a:	2b02      	cmp	r3, #2
 801187c:	d901      	bls.n	8011882 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 801187e:	2303      	movs	r3, #3
 8011880:	e076      	b.n	8011970 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8011882:	4b03      	ldr	r3, [pc, #12]	@ (8011890 <HAL_RCC_OscConfig+0x6c4>)
 8011884:	681b      	ldr	r3, [r3, #0]
 8011886:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801188a:	2b00      	cmp	r3, #0
 801188c:	d1f0      	bne.n	8011870 <HAL_RCC_OscConfig+0x6a4>
 801188e:	e06e      	b.n	801196e <HAL_RCC_OscConfig+0x7a2>
 8011890:	58024400 	.word	0x58024400
 8011894:	fffffc0c 	.word	0xfffffc0c
 8011898:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 801189c:	4b36      	ldr	r3, [pc, #216]	@ (8011978 <HAL_RCC_OscConfig+0x7ac>)
 801189e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80118a0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80118a2:	4b35      	ldr	r3, [pc, #212]	@ (8011978 <HAL_RCC_OscConfig+0x7ac>)
 80118a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80118a6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80118a8:	687b      	ldr	r3, [r7, #4]
 80118aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80118ac:	2b01      	cmp	r3, #1
 80118ae:	d031      	beq.n	8011914 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80118b0:	693b      	ldr	r3, [r7, #16]
 80118b2:	f003 0203 	and.w	r2, r3, #3
 80118b6:	687b      	ldr	r3, [r7, #4]
 80118b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80118ba:	429a      	cmp	r2, r3
 80118bc:	d12a      	bne.n	8011914 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80118be:	693b      	ldr	r3, [r7, #16]
 80118c0:	091b      	lsrs	r3, r3, #4
 80118c2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80118c6:	687b      	ldr	r3, [r7, #4]
 80118c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80118ca:	429a      	cmp	r2, r3
 80118cc:	d122      	bne.n	8011914 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80118ce:	68fb      	ldr	r3, [r7, #12]
 80118d0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80118d4:	687b      	ldr	r3, [r7, #4]
 80118d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80118d8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80118da:	429a      	cmp	r2, r3
 80118dc:	d11a      	bne.n	8011914 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80118de:	68fb      	ldr	r3, [r7, #12]
 80118e0:	0a5b      	lsrs	r3, r3, #9
 80118e2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80118e6:	687b      	ldr	r3, [r7, #4]
 80118e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80118ea:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80118ec:	429a      	cmp	r2, r3
 80118ee:	d111      	bne.n	8011914 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80118f0:	68fb      	ldr	r3, [r7, #12]
 80118f2:	0c1b      	lsrs	r3, r3, #16
 80118f4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80118f8:	687b      	ldr	r3, [r7, #4]
 80118fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80118fc:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80118fe:	429a      	cmp	r2, r3
 8011900:	d108      	bne.n	8011914 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8011902:	68fb      	ldr	r3, [r7, #12]
 8011904:	0e1b      	lsrs	r3, r3, #24
 8011906:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801190a:	687b      	ldr	r3, [r7, #4]
 801190c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801190e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8011910:	429a      	cmp	r2, r3
 8011912:	d001      	beq.n	8011918 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8011914:	2301      	movs	r3, #1
 8011916:	e02b      	b.n	8011970 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8011918:	4b17      	ldr	r3, [pc, #92]	@ (8011978 <HAL_RCC_OscConfig+0x7ac>)
 801191a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801191c:	08db      	lsrs	r3, r3, #3
 801191e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011922:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8011924:	687b      	ldr	r3, [r7, #4]
 8011926:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8011928:	693a      	ldr	r2, [r7, #16]
 801192a:	429a      	cmp	r2, r3
 801192c:	d01f      	beq.n	801196e <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 801192e:	4b12      	ldr	r3, [pc, #72]	@ (8011978 <HAL_RCC_OscConfig+0x7ac>)
 8011930:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011932:	4a11      	ldr	r2, [pc, #68]	@ (8011978 <HAL_RCC_OscConfig+0x7ac>)
 8011934:	f023 0301 	bic.w	r3, r3, #1
 8011938:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 801193a:	f7f7 fe13 	bl	8009564 <HAL_GetTick>
 801193e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8011940:	bf00      	nop
 8011942:	f7f7 fe0f 	bl	8009564 <HAL_GetTick>
 8011946:	4602      	mov	r2, r0
 8011948:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801194a:	4293      	cmp	r3, r2
 801194c:	d0f9      	beq.n	8011942 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 801194e:	4b0a      	ldr	r3, [pc, #40]	@ (8011978 <HAL_RCC_OscConfig+0x7ac>)
 8011950:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8011952:	4b0a      	ldr	r3, [pc, #40]	@ (801197c <HAL_RCC_OscConfig+0x7b0>)
 8011954:	4013      	ands	r3, r2
 8011956:	687a      	ldr	r2, [r7, #4]
 8011958:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 801195a:	00d2      	lsls	r2, r2, #3
 801195c:	4906      	ldr	r1, [pc, #24]	@ (8011978 <HAL_RCC_OscConfig+0x7ac>)
 801195e:	4313      	orrs	r3, r2
 8011960:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8011962:	4b05      	ldr	r3, [pc, #20]	@ (8011978 <HAL_RCC_OscConfig+0x7ac>)
 8011964:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011966:	4a04      	ldr	r2, [pc, #16]	@ (8011978 <HAL_RCC_OscConfig+0x7ac>)
 8011968:	f043 0301 	orr.w	r3, r3, #1
 801196c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 801196e:	2300      	movs	r3, #0
}
 8011970:	4618      	mov	r0, r3
 8011972:	3730      	adds	r7, #48	@ 0x30
 8011974:	46bd      	mov	sp, r7
 8011976:	bd80      	pop	{r7, pc}
 8011978:	58024400 	.word	0x58024400
 801197c:	ffff0007 	.word	0xffff0007

08011980 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8011980:	b580      	push	{r7, lr}
 8011982:	b086      	sub	sp, #24
 8011984:	af00      	add	r7, sp, #0
 8011986:	6078      	str	r0, [r7, #4]
 8011988:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 801198a:	687b      	ldr	r3, [r7, #4]
 801198c:	2b00      	cmp	r3, #0
 801198e:	d101      	bne.n	8011994 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8011990:	2301      	movs	r3, #1
 8011992:	e19c      	b.n	8011cce <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8011994:	4b8a      	ldr	r3, [pc, #552]	@ (8011bc0 <HAL_RCC_ClockConfig+0x240>)
 8011996:	681b      	ldr	r3, [r3, #0]
 8011998:	f003 030f 	and.w	r3, r3, #15
 801199c:	683a      	ldr	r2, [r7, #0]
 801199e:	429a      	cmp	r2, r3
 80119a0:	d910      	bls.n	80119c4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80119a2:	4b87      	ldr	r3, [pc, #540]	@ (8011bc0 <HAL_RCC_ClockConfig+0x240>)
 80119a4:	681b      	ldr	r3, [r3, #0]
 80119a6:	f023 020f 	bic.w	r2, r3, #15
 80119aa:	4985      	ldr	r1, [pc, #532]	@ (8011bc0 <HAL_RCC_ClockConfig+0x240>)
 80119ac:	683b      	ldr	r3, [r7, #0]
 80119ae:	4313      	orrs	r3, r2
 80119b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80119b2:	4b83      	ldr	r3, [pc, #524]	@ (8011bc0 <HAL_RCC_ClockConfig+0x240>)
 80119b4:	681b      	ldr	r3, [r3, #0]
 80119b6:	f003 030f 	and.w	r3, r3, #15
 80119ba:	683a      	ldr	r2, [r7, #0]
 80119bc:	429a      	cmp	r2, r3
 80119be:	d001      	beq.n	80119c4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80119c0:	2301      	movs	r3, #1
 80119c2:	e184      	b.n	8011cce <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80119c4:	687b      	ldr	r3, [r7, #4]
 80119c6:	681b      	ldr	r3, [r3, #0]
 80119c8:	f003 0304 	and.w	r3, r3, #4
 80119cc:	2b00      	cmp	r3, #0
 80119ce:	d010      	beq.n	80119f2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80119d0:	687b      	ldr	r3, [r7, #4]
 80119d2:	691a      	ldr	r2, [r3, #16]
 80119d4:	4b7b      	ldr	r3, [pc, #492]	@ (8011bc4 <HAL_RCC_ClockConfig+0x244>)
 80119d6:	699b      	ldr	r3, [r3, #24]
 80119d8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80119dc:	429a      	cmp	r2, r3
 80119de:	d908      	bls.n	80119f2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80119e0:	4b78      	ldr	r3, [pc, #480]	@ (8011bc4 <HAL_RCC_ClockConfig+0x244>)
 80119e2:	699b      	ldr	r3, [r3, #24]
 80119e4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80119e8:	687b      	ldr	r3, [r7, #4]
 80119ea:	691b      	ldr	r3, [r3, #16]
 80119ec:	4975      	ldr	r1, [pc, #468]	@ (8011bc4 <HAL_RCC_ClockConfig+0x244>)
 80119ee:	4313      	orrs	r3, r2
 80119f0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80119f2:	687b      	ldr	r3, [r7, #4]
 80119f4:	681b      	ldr	r3, [r3, #0]
 80119f6:	f003 0308 	and.w	r3, r3, #8
 80119fa:	2b00      	cmp	r3, #0
 80119fc:	d010      	beq.n	8011a20 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80119fe:	687b      	ldr	r3, [r7, #4]
 8011a00:	695a      	ldr	r2, [r3, #20]
 8011a02:	4b70      	ldr	r3, [pc, #448]	@ (8011bc4 <HAL_RCC_ClockConfig+0x244>)
 8011a04:	69db      	ldr	r3, [r3, #28]
 8011a06:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8011a0a:	429a      	cmp	r2, r3
 8011a0c:	d908      	bls.n	8011a20 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8011a0e:	4b6d      	ldr	r3, [pc, #436]	@ (8011bc4 <HAL_RCC_ClockConfig+0x244>)
 8011a10:	69db      	ldr	r3, [r3, #28]
 8011a12:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8011a16:	687b      	ldr	r3, [r7, #4]
 8011a18:	695b      	ldr	r3, [r3, #20]
 8011a1a:	496a      	ldr	r1, [pc, #424]	@ (8011bc4 <HAL_RCC_ClockConfig+0x244>)
 8011a1c:	4313      	orrs	r3, r2
 8011a1e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8011a20:	687b      	ldr	r3, [r7, #4]
 8011a22:	681b      	ldr	r3, [r3, #0]
 8011a24:	f003 0310 	and.w	r3, r3, #16
 8011a28:	2b00      	cmp	r3, #0
 8011a2a:	d010      	beq.n	8011a4e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8011a2c:	687b      	ldr	r3, [r7, #4]
 8011a2e:	699a      	ldr	r2, [r3, #24]
 8011a30:	4b64      	ldr	r3, [pc, #400]	@ (8011bc4 <HAL_RCC_ClockConfig+0x244>)
 8011a32:	69db      	ldr	r3, [r3, #28]
 8011a34:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8011a38:	429a      	cmp	r2, r3
 8011a3a:	d908      	bls.n	8011a4e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8011a3c:	4b61      	ldr	r3, [pc, #388]	@ (8011bc4 <HAL_RCC_ClockConfig+0x244>)
 8011a3e:	69db      	ldr	r3, [r3, #28]
 8011a40:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8011a44:	687b      	ldr	r3, [r7, #4]
 8011a46:	699b      	ldr	r3, [r3, #24]
 8011a48:	495e      	ldr	r1, [pc, #376]	@ (8011bc4 <HAL_RCC_ClockConfig+0x244>)
 8011a4a:	4313      	orrs	r3, r2
 8011a4c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8011a4e:	687b      	ldr	r3, [r7, #4]
 8011a50:	681b      	ldr	r3, [r3, #0]
 8011a52:	f003 0320 	and.w	r3, r3, #32
 8011a56:	2b00      	cmp	r3, #0
 8011a58:	d010      	beq.n	8011a7c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8011a5a:	687b      	ldr	r3, [r7, #4]
 8011a5c:	69da      	ldr	r2, [r3, #28]
 8011a5e:	4b59      	ldr	r3, [pc, #356]	@ (8011bc4 <HAL_RCC_ClockConfig+0x244>)
 8011a60:	6a1b      	ldr	r3, [r3, #32]
 8011a62:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8011a66:	429a      	cmp	r2, r3
 8011a68:	d908      	bls.n	8011a7c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8011a6a:	4b56      	ldr	r3, [pc, #344]	@ (8011bc4 <HAL_RCC_ClockConfig+0x244>)
 8011a6c:	6a1b      	ldr	r3, [r3, #32]
 8011a6e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8011a72:	687b      	ldr	r3, [r7, #4]
 8011a74:	69db      	ldr	r3, [r3, #28]
 8011a76:	4953      	ldr	r1, [pc, #332]	@ (8011bc4 <HAL_RCC_ClockConfig+0x244>)
 8011a78:	4313      	orrs	r3, r2
 8011a7a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8011a7c:	687b      	ldr	r3, [r7, #4]
 8011a7e:	681b      	ldr	r3, [r3, #0]
 8011a80:	f003 0302 	and.w	r3, r3, #2
 8011a84:	2b00      	cmp	r3, #0
 8011a86:	d010      	beq.n	8011aaa <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8011a88:	687b      	ldr	r3, [r7, #4]
 8011a8a:	68da      	ldr	r2, [r3, #12]
 8011a8c:	4b4d      	ldr	r3, [pc, #308]	@ (8011bc4 <HAL_RCC_ClockConfig+0x244>)
 8011a8e:	699b      	ldr	r3, [r3, #24]
 8011a90:	f003 030f 	and.w	r3, r3, #15
 8011a94:	429a      	cmp	r2, r3
 8011a96:	d908      	bls.n	8011aaa <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8011a98:	4b4a      	ldr	r3, [pc, #296]	@ (8011bc4 <HAL_RCC_ClockConfig+0x244>)
 8011a9a:	699b      	ldr	r3, [r3, #24]
 8011a9c:	f023 020f 	bic.w	r2, r3, #15
 8011aa0:	687b      	ldr	r3, [r7, #4]
 8011aa2:	68db      	ldr	r3, [r3, #12]
 8011aa4:	4947      	ldr	r1, [pc, #284]	@ (8011bc4 <HAL_RCC_ClockConfig+0x244>)
 8011aa6:	4313      	orrs	r3, r2
 8011aa8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8011aaa:	687b      	ldr	r3, [r7, #4]
 8011aac:	681b      	ldr	r3, [r3, #0]
 8011aae:	f003 0301 	and.w	r3, r3, #1
 8011ab2:	2b00      	cmp	r3, #0
 8011ab4:	d055      	beq.n	8011b62 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8011ab6:	4b43      	ldr	r3, [pc, #268]	@ (8011bc4 <HAL_RCC_ClockConfig+0x244>)
 8011ab8:	699b      	ldr	r3, [r3, #24]
 8011aba:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8011abe:	687b      	ldr	r3, [r7, #4]
 8011ac0:	689b      	ldr	r3, [r3, #8]
 8011ac2:	4940      	ldr	r1, [pc, #256]	@ (8011bc4 <HAL_RCC_ClockConfig+0x244>)
 8011ac4:	4313      	orrs	r3, r2
 8011ac6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8011ac8:	687b      	ldr	r3, [r7, #4]
 8011aca:	685b      	ldr	r3, [r3, #4]
 8011acc:	2b02      	cmp	r3, #2
 8011ace:	d107      	bne.n	8011ae0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8011ad0:	4b3c      	ldr	r3, [pc, #240]	@ (8011bc4 <HAL_RCC_ClockConfig+0x244>)
 8011ad2:	681b      	ldr	r3, [r3, #0]
 8011ad4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8011ad8:	2b00      	cmp	r3, #0
 8011ada:	d121      	bne.n	8011b20 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8011adc:	2301      	movs	r3, #1
 8011ade:	e0f6      	b.n	8011cce <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8011ae0:	687b      	ldr	r3, [r7, #4]
 8011ae2:	685b      	ldr	r3, [r3, #4]
 8011ae4:	2b03      	cmp	r3, #3
 8011ae6:	d107      	bne.n	8011af8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8011ae8:	4b36      	ldr	r3, [pc, #216]	@ (8011bc4 <HAL_RCC_ClockConfig+0x244>)
 8011aea:	681b      	ldr	r3, [r3, #0]
 8011aec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8011af0:	2b00      	cmp	r3, #0
 8011af2:	d115      	bne.n	8011b20 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8011af4:	2301      	movs	r3, #1
 8011af6:	e0ea      	b.n	8011cce <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8011af8:	687b      	ldr	r3, [r7, #4]
 8011afa:	685b      	ldr	r3, [r3, #4]
 8011afc:	2b01      	cmp	r3, #1
 8011afe:	d107      	bne.n	8011b10 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8011b00:	4b30      	ldr	r3, [pc, #192]	@ (8011bc4 <HAL_RCC_ClockConfig+0x244>)
 8011b02:	681b      	ldr	r3, [r3, #0]
 8011b04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8011b08:	2b00      	cmp	r3, #0
 8011b0a:	d109      	bne.n	8011b20 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8011b0c:	2301      	movs	r3, #1
 8011b0e:	e0de      	b.n	8011cce <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8011b10:	4b2c      	ldr	r3, [pc, #176]	@ (8011bc4 <HAL_RCC_ClockConfig+0x244>)
 8011b12:	681b      	ldr	r3, [r3, #0]
 8011b14:	f003 0304 	and.w	r3, r3, #4
 8011b18:	2b00      	cmp	r3, #0
 8011b1a:	d101      	bne.n	8011b20 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8011b1c:	2301      	movs	r3, #1
 8011b1e:	e0d6      	b.n	8011cce <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8011b20:	4b28      	ldr	r3, [pc, #160]	@ (8011bc4 <HAL_RCC_ClockConfig+0x244>)
 8011b22:	691b      	ldr	r3, [r3, #16]
 8011b24:	f023 0207 	bic.w	r2, r3, #7
 8011b28:	687b      	ldr	r3, [r7, #4]
 8011b2a:	685b      	ldr	r3, [r3, #4]
 8011b2c:	4925      	ldr	r1, [pc, #148]	@ (8011bc4 <HAL_RCC_ClockConfig+0x244>)
 8011b2e:	4313      	orrs	r3, r2
 8011b30:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8011b32:	f7f7 fd17 	bl	8009564 <HAL_GetTick>
 8011b36:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8011b38:	e00a      	b.n	8011b50 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011b3a:	f7f7 fd13 	bl	8009564 <HAL_GetTick>
 8011b3e:	4602      	mov	r2, r0
 8011b40:	697b      	ldr	r3, [r7, #20]
 8011b42:	1ad3      	subs	r3, r2, r3
 8011b44:	f241 3288 	movw	r2, #5000	@ 0x1388
 8011b48:	4293      	cmp	r3, r2
 8011b4a:	d901      	bls.n	8011b50 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8011b4c:	2303      	movs	r3, #3
 8011b4e:	e0be      	b.n	8011cce <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8011b50:	4b1c      	ldr	r3, [pc, #112]	@ (8011bc4 <HAL_RCC_ClockConfig+0x244>)
 8011b52:	691b      	ldr	r3, [r3, #16]
 8011b54:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8011b58:	687b      	ldr	r3, [r7, #4]
 8011b5a:	685b      	ldr	r3, [r3, #4]
 8011b5c:	00db      	lsls	r3, r3, #3
 8011b5e:	429a      	cmp	r2, r3
 8011b60:	d1eb      	bne.n	8011b3a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8011b62:	687b      	ldr	r3, [r7, #4]
 8011b64:	681b      	ldr	r3, [r3, #0]
 8011b66:	f003 0302 	and.w	r3, r3, #2
 8011b6a:	2b00      	cmp	r3, #0
 8011b6c:	d010      	beq.n	8011b90 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8011b6e:	687b      	ldr	r3, [r7, #4]
 8011b70:	68da      	ldr	r2, [r3, #12]
 8011b72:	4b14      	ldr	r3, [pc, #80]	@ (8011bc4 <HAL_RCC_ClockConfig+0x244>)
 8011b74:	699b      	ldr	r3, [r3, #24]
 8011b76:	f003 030f 	and.w	r3, r3, #15
 8011b7a:	429a      	cmp	r2, r3
 8011b7c:	d208      	bcs.n	8011b90 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8011b7e:	4b11      	ldr	r3, [pc, #68]	@ (8011bc4 <HAL_RCC_ClockConfig+0x244>)
 8011b80:	699b      	ldr	r3, [r3, #24]
 8011b82:	f023 020f 	bic.w	r2, r3, #15
 8011b86:	687b      	ldr	r3, [r7, #4]
 8011b88:	68db      	ldr	r3, [r3, #12]
 8011b8a:	490e      	ldr	r1, [pc, #56]	@ (8011bc4 <HAL_RCC_ClockConfig+0x244>)
 8011b8c:	4313      	orrs	r3, r2
 8011b8e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8011b90:	4b0b      	ldr	r3, [pc, #44]	@ (8011bc0 <HAL_RCC_ClockConfig+0x240>)
 8011b92:	681b      	ldr	r3, [r3, #0]
 8011b94:	f003 030f 	and.w	r3, r3, #15
 8011b98:	683a      	ldr	r2, [r7, #0]
 8011b9a:	429a      	cmp	r2, r3
 8011b9c:	d214      	bcs.n	8011bc8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8011b9e:	4b08      	ldr	r3, [pc, #32]	@ (8011bc0 <HAL_RCC_ClockConfig+0x240>)
 8011ba0:	681b      	ldr	r3, [r3, #0]
 8011ba2:	f023 020f 	bic.w	r2, r3, #15
 8011ba6:	4906      	ldr	r1, [pc, #24]	@ (8011bc0 <HAL_RCC_ClockConfig+0x240>)
 8011ba8:	683b      	ldr	r3, [r7, #0]
 8011baa:	4313      	orrs	r3, r2
 8011bac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8011bae:	4b04      	ldr	r3, [pc, #16]	@ (8011bc0 <HAL_RCC_ClockConfig+0x240>)
 8011bb0:	681b      	ldr	r3, [r3, #0]
 8011bb2:	f003 030f 	and.w	r3, r3, #15
 8011bb6:	683a      	ldr	r2, [r7, #0]
 8011bb8:	429a      	cmp	r2, r3
 8011bba:	d005      	beq.n	8011bc8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8011bbc:	2301      	movs	r3, #1
 8011bbe:	e086      	b.n	8011cce <HAL_RCC_ClockConfig+0x34e>
 8011bc0:	52002000 	.word	0x52002000
 8011bc4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8011bc8:	687b      	ldr	r3, [r7, #4]
 8011bca:	681b      	ldr	r3, [r3, #0]
 8011bcc:	f003 0304 	and.w	r3, r3, #4
 8011bd0:	2b00      	cmp	r3, #0
 8011bd2:	d010      	beq.n	8011bf6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8011bd4:	687b      	ldr	r3, [r7, #4]
 8011bd6:	691a      	ldr	r2, [r3, #16]
 8011bd8:	4b3f      	ldr	r3, [pc, #252]	@ (8011cd8 <HAL_RCC_ClockConfig+0x358>)
 8011bda:	699b      	ldr	r3, [r3, #24]
 8011bdc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8011be0:	429a      	cmp	r2, r3
 8011be2:	d208      	bcs.n	8011bf6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8011be4:	4b3c      	ldr	r3, [pc, #240]	@ (8011cd8 <HAL_RCC_ClockConfig+0x358>)
 8011be6:	699b      	ldr	r3, [r3, #24]
 8011be8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8011bec:	687b      	ldr	r3, [r7, #4]
 8011bee:	691b      	ldr	r3, [r3, #16]
 8011bf0:	4939      	ldr	r1, [pc, #228]	@ (8011cd8 <HAL_RCC_ClockConfig+0x358>)
 8011bf2:	4313      	orrs	r3, r2
 8011bf4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8011bf6:	687b      	ldr	r3, [r7, #4]
 8011bf8:	681b      	ldr	r3, [r3, #0]
 8011bfa:	f003 0308 	and.w	r3, r3, #8
 8011bfe:	2b00      	cmp	r3, #0
 8011c00:	d010      	beq.n	8011c24 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8011c02:	687b      	ldr	r3, [r7, #4]
 8011c04:	695a      	ldr	r2, [r3, #20]
 8011c06:	4b34      	ldr	r3, [pc, #208]	@ (8011cd8 <HAL_RCC_ClockConfig+0x358>)
 8011c08:	69db      	ldr	r3, [r3, #28]
 8011c0a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8011c0e:	429a      	cmp	r2, r3
 8011c10:	d208      	bcs.n	8011c24 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8011c12:	4b31      	ldr	r3, [pc, #196]	@ (8011cd8 <HAL_RCC_ClockConfig+0x358>)
 8011c14:	69db      	ldr	r3, [r3, #28]
 8011c16:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8011c1a:	687b      	ldr	r3, [r7, #4]
 8011c1c:	695b      	ldr	r3, [r3, #20]
 8011c1e:	492e      	ldr	r1, [pc, #184]	@ (8011cd8 <HAL_RCC_ClockConfig+0x358>)
 8011c20:	4313      	orrs	r3, r2
 8011c22:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8011c24:	687b      	ldr	r3, [r7, #4]
 8011c26:	681b      	ldr	r3, [r3, #0]
 8011c28:	f003 0310 	and.w	r3, r3, #16
 8011c2c:	2b00      	cmp	r3, #0
 8011c2e:	d010      	beq.n	8011c52 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8011c30:	687b      	ldr	r3, [r7, #4]
 8011c32:	699a      	ldr	r2, [r3, #24]
 8011c34:	4b28      	ldr	r3, [pc, #160]	@ (8011cd8 <HAL_RCC_ClockConfig+0x358>)
 8011c36:	69db      	ldr	r3, [r3, #28]
 8011c38:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8011c3c:	429a      	cmp	r2, r3
 8011c3e:	d208      	bcs.n	8011c52 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8011c40:	4b25      	ldr	r3, [pc, #148]	@ (8011cd8 <HAL_RCC_ClockConfig+0x358>)
 8011c42:	69db      	ldr	r3, [r3, #28]
 8011c44:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8011c48:	687b      	ldr	r3, [r7, #4]
 8011c4a:	699b      	ldr	r3, [r3, #24]
 8011c4c:	4922      	ldr	r1, [pc, #136]	@ (8011cd8 <HAL_RCC_ClockConfig+0x358>)
 8011c4e:	4313      	orrs	r3, r2
 8011c50:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8011c52:	687b      	ldr	r3, [r7, #4]
 8011c54:	681b      	ldr	r3, [r3, #0]
 8011c56:	f003 0320 	and.w	r3, r3, #32
 8011c5a:	2b00      	cmp	r3, #0
 8011c5c:	d010      	beq.n	8011c80 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8011c5e:	687b      	ldr	r3, [r7, #4]
 8011c60:	69da      	ldr	r2, [r3, #28]
 8011c62:	4b1d      	ldr	r3, [pc, #116]	@ (8011cd8 <HAL_RCC_ClockConfig+0x358>)
 8011c64:	6a1b      	ldr	r3, [r3, #32]
 8011c66:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8011c6a:	429a      	cmp	r2, r3
 8011c6c:	d208      	bcs.n	8011c80 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8011c6e:	4b1a      	ldr	r3, [pc, #104]	@ (8011cd8 <HAL_RCC_ClockConfig+0x358>)
 8011c70:	6a1b      	ldr	r3, [r3, #32]
 8011c72:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8011c76:	687b      	ldr	r3, [r7, #4]
 8011c78:	69db      	ldr	r3, [r3, #28]
 8011c7a:	4917      	ldr	r1, [pc, #92]	@ (8011cd8 <HAL_RCC_ClockConfig+0x358>)
 8011c7c:	4313      	orrs	r3, r2
 8011c7e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8011c80:	f000 f834 	bl	8011cec <HAL_RCC_GetSysClockFreq>
 8011c84:	4602      	mov	r2, r0
 8011c86:	4b14      	ldr	r3, [pc, #80]	@ (8011cd8 <HAL_RCC_ClockConfig+0x358>)
 8011c88:	699b      	ldr	r3, [r3, #24]
 8011c8a:	0a1b      	lsrs	r3, r3, #8
 8011c8c:	f003 030f 	and.w	r3, r3, #15
 8011c90:	4912      	ldr	r1, [pc, #72]	@ (8011cdc <HAL_RCC_ClockConfig+0x35c>)
 8011c92:	5ccb      	ldrb	r3, [r1, r3]
 8011c94:	f003 031f 	and.w	r3, r3, #31
 8011c98:	fa22 f303 	lsr.w	r3, r2, r3
 8011c9c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8011c9e:	4b0e      	ldr	r3, [pc, #56]	@ (8011cd8 <HAL_RCC_ClockConfig+0x358>)
 8011ca0:	699b      	ldr	r3, [r3, #24]
 8011ca2:	f003 030f 	and.w	r3, r3, #15
 8011ca6:	4a0d      	ldr	r2, [pc, #52]	@ (8011cdc <HAL_RCC_ClockConfig+0x35c>)
 8011ca8:	5cd3      	ldrb	r3, [r2, r3]
 8011caa:	f003 031f 	and.w	r3, r3, #31
 8011cae:	693a      	ldr	r2, [r7, #16]
 8011cb0:	fa22 f303 	lsr.w	r3, r2, r3
 8011cb4:	4a0a      	ldr	r2, [pc, #40]	@ (8011ce0 <HAL_RCC_ClockConfig+0x360>)
 8011cb6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8011cb8:	4a0a      	ldr	r2, [pc, #40]	@ (8011ce4 <HAL_RCC_ClockConfig+0x364>)
 8011cba:	693b      	ldr	r3, [r7, #16]
 8011cbc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8011cbe:	4b0a      	ldr	r3, [pc, #40]	@ (8011ce8 <HAL_RCC_ClockConfig+0x368>)
 8011cc0:	681b      	ldr	r3, [r3, #0]
 8011cc2:	4618      	mov	r0, r3
 8011cc4:	f7f7 fc04 	bl	80094d0 <HAL_InitTick>
 8011cc8:	4603      	mov	r3, r0
 8011cca:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8011ccc:	7bfb      	ldrb	r3, [r7, #15]
}
 8011cce:	4618      	mov	r0, r3
 8011cd0:	3718      	adds	r7, #24
 8011cd2:	46bd      	mov	sp, r7
 8011cd4:	bd80      	pop	{r7, pc}
 8011cd6:	bf00      	nop
 8011cd8:	58024400 	.word	0x58024400
 8011cdc:	0801ea4c 	.word	0x0801ea4c
 8011ce0:	2400000c 	.word	0x2400000c
 8011ce4:	24000008 	.word	0x24000008
 8011ce8:	24000010 	.word	0x24000010

08011cec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8011cec:	b480      	push	{r7}
 8011cee:	b089      	sub	sp, #36	@ 0x24
 8011cf0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8011cf2:	4bb3      	ldr	r3, [pc, #716]	@ (8011fc0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011cf4:	691b      	ldr	r3, [r3, #16]
 8011cf6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8011cfa:	2b18      	cmp	r3, #24
 8011cfc:	f200 8155 	bhi.w	8011faa <HAL_RCC_GetSysClockFreq+0x2be>
 8011d00:	a201      	add	r2, pc, #4	@ (adr r2, 8011d08 <HAL_RCC_GetSysClockFreq+0x1c>)
 8011d02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011d06:	bf00      	nop
 8011d08:	08011d6d 	.word	0x08011d6d
 8011d0c:	08011fab 	.word	0x08011fab
 8011d10:	08011fab 	.word	0x08011fab
 8011d14:	08011fab 	.word	0x08011fab
 8011d18:	08011fab 	.word	0x08011fab
 8011d1c:	08011fab 	.word	0x08011fab
 8011d20:	08011fab 	.word	0x08011fab
 8011d24:	08011fab 	.word	0x08011fab
 8011d28:	08011d93 	.word	0x08011d93
 8011d2c:	08011fab 	.word	0x08011fab
 8011d30:	08011fab 	.word	0x08011fab
 8011d34:	08011fab 	.word	0x08011fab
 8011d38:	08011fab 	.word	0x08011fab
 8011d3c:	08011fab 	.word	0x08011fab
 8011d40:	08011fab 	.word	0x08011fab
 8011d44:	08011fab 	.word	0x08011fab
 8011d48:	08011d99 	.word	0x08011d99
 8011d4c:	08011fab 	.word	0x08011fab
 8011d50:	08011fab 	.word	0x08011fab
 8011d54:	08011fab 	.word	0x08011fab
 8011d58:	08011fab 	.word	0x08011fab
 8011d5c:	08011fab 	.word	0x08011fab
 8011d60:	08011fab 	.word	0x08011fab
 8011d64:	08011fab 	.word	0x08011fab
 8011d68:	08011d9f 	.word	0x08011d9f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011d6c:	4b94      	ldr	r3, [pc, #592]	@ (8011fc0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011d6e:	681b      	ldr	r3, [r3, #0]
 8011d70:	f003 0320 	and.w	r3, r3, #32
 8011d74:	2b00      	cmp	r3, #0
 8011d76:	d009      	beq.n	8011d8c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8011d78:	4b91      	ldr	r3, [pc, #580]	@ (8011fc0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011d7a:	681b      	ldr	r3, [r3, #0]
 8011d7c:	08db      	lsrs	r3, r3, #3
 8011d7e:	f003 0303 	and.w	r3, r3, #3
 8011d82:	4a90      	ldr	r2, [pc, #576]	@ (8011fc4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8011d84:	fa22 f303 	lsr.w	r3, r2, r3
 8011d88:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8011d8a:	e111      	b.n	8011fb0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8011d8c:	4b8d      	ldr	r3, [pc, #564]	@ (8011fc4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8011d8e:	61bb      	str	r3, [r7, #24]
      break;
 8011d90:	e10e      	b.n	8011fb0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8011d92:	4b8d      	ldr	r3, [pc, #564]	@ (8011fc8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8011d94:	61bb      	str	r3, [r7, #24]
      break;
 8011d96:	e10b      	b.n	8011fb0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8011d98:	4b8c      	ldr	r3, [pc, #560]	@ (8011fcc <HAL_RCC_GetSysClockFreq+0x2e0>)
 8011d9a:	61bb      	str	r3, [r7, #24]
      break;
 8011d9c:	e108      	b.n	8011fb0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8011d9e:	4b88      	ldr	r3, [pc, #544]	@ (8011fc0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011da0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011da2:	f003 0303 	and.w	r3, r3, #3
 8011da6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8011da8:	4b85      	ldr	r3, [pc, #532]	@ (8011fc0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011daa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011dac:	091b      	lsrs	r3, r3, #4
 8011dae:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8011db2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8011db4:	4b82      	ldr	r3, [pc, #520]	@ (8011fc0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011db6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011db8:	f003 0301 	and.w	r3, r3, #1
 8011dbc:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8011dbe:	4b80      	ldr	r3, [pc, #512]	@ (8011fc0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011dc0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011dc2:	08db      	lsrs	r3, r3, #3
 8011dc4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011dc8:	68fa      	ldr	r2, [r7, #12]
 8011dca:	fb02 f303 	mul.w	r3, r2, r3
 8011dce:	ee07 3a90 	vmov	s15, r3
 8011dd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011dd6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8011dda:	693b      	ldr	r3, [r7, #16]
 8011ddc:	2b00      	cmp	r3, #0
 8011dde:	f000 80e1 	beq.w	8011fa4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8011de2:	697b      	ldr	r3, [r7, #20]
 8011de4:	2b02      	cmp	r3, #2
 8011de6:	f000 8083 	beq.w	8011ef0 <HAL_RCC_GetSysClockFreq+0x204>
 8011dea:	697b      	ldr	r3, [r7, #20]
 8011dec:	2b02      	cmp	r3, #2
 8011dee:	f200 80a1 	bhi.w	8011f34 <HAL_RCC_GetSysClockFreq+0x248>
 8011df2:	697b      	ldr	r3, [r7, #20]
 8011df4:	2b00      	cmp	r3, #0
 8011df6:	d003      	beq.n	8011e00 <HAL_RCC_GetSysClockFreq+0x114>
 8011df8:	697b      	ldr	r3, [r7, #20]
 8011dfa:	2b01      	cmp	r3, #1
 8011dfc:	d056      	beq.n	8011eac <HAL_RCC_GetSysClockFreq+0x1c0>
 8011dfe:	e099      	b.n	8011f34 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011e00:	4b6f      	ldr	r3, [pc, #444]	@ (8011fc0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011e02:	681b      	ldr	r3, [r3, #0]
 8011e04:	f003 0320 	and.w	r3, r3, #32
 8011e08:	2b00      	cmp	r3, #0
 8011e0a:	d02d      	beq.n	8011e68 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8011e0c:	4b6c      	ldr	r3, [pc, #432]	@ (8011fc0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011e0e:	681b      	ldr	r3, [r3, #0]
 8011e10:	08db      	lsrs	r3, r3, #3
 8011e12:	f003 0303 	and.w	r3, r3, #3
 8011e16:	4a6b      	ldr	r2, [pc, #428]	@ (8011fc4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8011e18:	fa22 f303 	lsr.w	r3, r2, r3
 8011e1c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8011e1e:	687b      	ldr	r3, [r7, #4]
 8011e20:	ee07 3a90 	vmov	s15, r3
 8011e24:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011e28:	693b      	ldr	r3, [r7, #16]
 8011e2a:	ee07 3a90 	vmov	s15, r3
 8011e2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011e32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011e36:	4b62      	ldr	r3, [pc, #392]	@ (8011fc0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011e38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011e3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011e3e:	ee07 3a90 	vmov	s15, r3
 8011e42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011e46:	ed97 6a02 	vldr	s12, [r7, #8]
 8011e4a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8011fd0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8011e4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011e52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011e56:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8011e5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011e5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011e62:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8011e66:	e087      	b.n	8011f78 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8011e68:	693b      	ldr	r3, [r7, #16]
 8011e6a:	ee07 3a90 	vmov	s15, r3
 8011e6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011e72:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8011fd4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8011e76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011e7a:	4b51      	ldr	r3, [pc, #324]	@ (8011fc0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011e7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011e7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011e82:	ee07 3a90 	vmov	s15, r3
 8011e86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011e8a:	ed97 6a02 	vldr	s12, [r7, #8]
 8011e8e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8011fd0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8011e92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011e96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011e9a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8011e9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011ea2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011ea6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8011eaa:	e065      	b.n	8011f78 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8011eac:	693b      	ldr	r3, [r7, #16]
 8011eae:	ee07 3a90 	vmov	s15, r3
 8011eb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011eb6:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8011fd8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8011eba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011ebe:	4b40      	ldr	r3, [pc, #256]	@ (8011fc0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011ec0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011ec2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011ec6:	ee07 3a90 	vmov	s15, r3
 8011eca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011ece:	ed97 6a02 	vldr	s12, [r7, #8]
 8011ed2:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8011fd0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8011ed6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011eda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011ede:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8011ee2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011ee6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011eea:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8011eee:	e043      	b.n	8011f78 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8011ef0:	693b      	ldr	r3, [r7, #16]
 8011ef2:	ee07 3a90 	vmov	s15, r3
 8011ef6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011efa:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8011fdc <HAL_RCC_GetSysClockFreq+0x2f0>
 8011efe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011f02:	4b2f      	ldr	r3, [pc, #188]	@ (8011fc0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011f04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011f06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011f0a:	ee07 3a90 	vmov	s15, r3
 8011f0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011f12:	ed97 6a02 	vldr	s12, [r7, #8]
 8011f16:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8011fd0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8011f1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011f1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011f22:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8011f26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011f2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011f2e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8011f32:	e021      	b.n	8011f78 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8011f34:	693b      	ldr	r3, [r7, #16]
 8011f36:	ee07 3a90 	vmov	s15, r3
 8011f3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011f3e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8011fd8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8011f42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011f46:	4b1e      	ldr	r3, [pc, #120]	@ (8011fc0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011f48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011f4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011f4e:	ee07 3a90 	vmov	s15, r3
 8011f52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011f56:	ed97 6a02 	vldr	s12, [r7, #8]
 8011f5a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8011fd0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8011f5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011f62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011f66:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8011f6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011f6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011f72:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8011f76:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8011f78:	4b11      	ldr	r3, [pc, #68]	@ (8011fc0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011f7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011f7c:	0a5b      	lsrs	r3, r3, #9
 8011f7e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011f82:	3301      	adds	r3, #1
 8011f84:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8011f86:	683b      	ldr	r3, [r7, #0]
 8011f88:	ee07 3a90 	vmov	s15, r3
 8011f8c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8011f90:	edd7 6a07 	vldr	s13, [r7, #28]
 8011f94:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011f98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011f9c:	ee17 3a90 	vmov	r3, s15
 8011fa0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8011fa2:	e005      	b.n	8011fb0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8011fa4:	2300      	movs	r3, #0
 8011fa6:	61bb      	str	r3, [r7, #24]
      break;
 8011fa8:	e002      	b.n	8011fb0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8011faa:	4b07      	ldr	r3, [pc, #28]	@ (8011fc8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8011fac:	61bb      	str	r3, [r7, #24]
      break;
 8011fae:	bf00      	nop
  }

  return sysclockfreq;
 8011fb0:	69bb      	ldr	r3, [r7, #24]
}
 8011fb2:	4618      	mov	r0, r3
 8011fb4:	3724      	adds	r7, #36	@ 0x24
 8011fb6:	46bd      	mov	sp, r7
 8011fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fbc:	4770      	bx	lr
 8011fbe:	bf00      	nop
 8011fc0:	58024400 	.word	0x58024400
 8011fc4:	03d09000 	.word	0x03d09000
 8011fc8:	003d0900 	.word	0x003d0900
 8011fcc:	016e3600 	.word	0x016e3600
 8011fd0:	46000000 	.word	0x46000000
 8011fd4:	4c742400 	.word	0x4c742400
 8011fd8:	4a742400 	.word	0x4a742400
 8011fdc:	4bb71b00 	.word	0x4bb71b00

08011fe0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8011fe0:	b580      	push	{r7, lr}
 8011fe2:	b082      	sub	sp, #8
 8011fe4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8011fe6:	f7ff fe81 	bl	8011cec <HAL_RCC_GetSysClockFreq>
 8011fea:	4602      	mov	r2, r0
 8011fec:	4b10      	ldr	r3, [pc, #64]	@ (8012030 <HAL_RCC_GetHCLKFreq+0x50>)
 8011fee:	699b      	ldr	r3, [r3, #24]
 8011ff0:	0a1b      	lsrs	r3, r3, #8
 8011ff2:	f003 030f 	and.w	r3, r3, #15
 8011ff6:	490f      	ldr	r1, [pc, #60]	@ (8012034 <HAL_RCC_GetHCLKFreq+0x54>)
 8011ff8:	5ccb      	ldrb	r3, [r1, r3]
 8011ffa:	f003 031f 	and.w	r3, r3, #31
 8011ffe:	fa22 f303 	lsr.w	r3, r2, r3
 8012002:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8012004:	4b0a      	ldr	r3, [pc, #40]	@ (8012030 <HAL_RCC_GetHCLKFreq+0x50>)
 8012006:	699b      	ldr	r3, [r3, #24]
 8012008:	f003 030f 	and.w	r3, r3, #15
 801200c:	4a09      	ldr	r2, [pc, #36]	@ (8012034 <HAL_RCC_GetHCLKFreq+0x54>)
 801200e:	5cd3      	ldrb	r3, [r2, r3]
 8012010:	f003 031f 	and.w	r3, r3, #31
 8012014:	687a      	ldr	r2, [r7, #4]
 8012016:	fa22 f303 	lsr.w	r3, r2, r3
 801201a:	4a07      	ldr	r2, [pc, #28]	@ (8012038 <HAL_RCC_GetHCLKFreq+0x58>)
 801201c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 801201e:	4a07      	ldr	r2, [pc, #28]	@ (801203c <HAL_RCC_GetHCLKFreq+0x5c>)
 8012020:	687b      	ldr	r3, [r7, #4]
 8012022:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8012024:	4b04      	ldr	r3, [pc, #16]	@ (8012038 <HAL_RCC_GetHCLKFreq+0x58>)
 8012026:	681b      	ldr	r3, [r3, #0]
}
 8012028:	4618      	mov	r0, r3
 801202a:	3708      	adds	r7, #8
 801202c:	46bd      	mov	sp, r7
 801202e:	bd80      	pop	{r7, pc}
 8012030:	58024400 	.word	0x58024400
 8012034:	0801ea4c 	.word	0x0801ea4c
 8012038:	2400000c 	.word	0x2400000c
 801203c:	24000008 	.word	0x24000008

08012040 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8012040:	b580      	push	{r7, lr}
 8012042:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8012044:	f7ff ffcc 	bl	8011fe0 <HAL_RCC_GetHCLKFreq>
 8012048:	4602      	mov	r2, r0
 801204a:	4b06      	ldr	r3, [pc, #24]	@ (8012064 <HAL_RCC_GetPCLK1Freq+0x24>)
 801204c:	69db      	ldr	r3, [r3, #28]
 801204e:	091b      	lsrs	r3, r3, #4
 8012050:	f003 0307 	and.w	r3, r3, #7
 8012054:	4904      	ldr	r1, [pc, #16]	@ (8012068 <HAL_RCC_GetPCLK1Freq+0x28>)
 8012056:	5ccb      	ldrb	r3, [r1, r3]
 8012058:	f003 031f 	and.w	r3, r3, #31
 801205c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8012060:	4618      	mov	r0, r3
 8012062:	bd80      	pop	{r7, pc}
 8012064:	58024400 	.word	0x58024400
 8012068:	0801ea4c 	.word	0x0801ea4c

0801206c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 801206c:	b580      	push	{r7, lr}
 801206e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8012070:	f7ff ffb6 	bl	8011fe0 <HAL_RCC_GetHCLKFreq>
 8012074:	4602      	mov	r2, r0
 8012076:	4b06      	ldr	r3, [pc, #24]	@ (8012090 <HAL_RCC_GetPCLK2Freq+0x24>)
 8012078:	69db      	ldr	r3, [r3, #28]
 801207a:	0a1b      	lsrs	r3, r3, #8
 801207c:	f003 0307 	and.w	r3, r3, #7
 8012080:	4904      	ldr	r1, [pc, #16]	@ (8012094 <HAL_RCC_GetPCLK2Freq+0x28>)
 8012082:	5ccb      	ldrb	r3, [r1, r3]
 8012084:	f003 031f 	and.w	r3, r3, #31
 8012088:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 801208c:	4618      	mov	r0, r3
 801208e:	bd80      	pop	{r7, pc}
 8012090:	58024400 	.word	0x58024400
 8012094:	0801ea4c 	.word	0x0801ea4c

08012098 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8012098:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801209c:	b0c6      	sub	sp, #280	@ 0x118
 801209e:	af00      	add	r7, sp, #0
 80120a0:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80120a4:	2300      	movs	r3, #0
 80120a6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80120aa:	2300      	movs	r3, #0
 80120ac:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80120b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80120b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120b8:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80120bc:	2500      	movs	r5, #0
 80120be:	ea54 0305 	orrs.w	r3, r4, r5
 80120c2:	d049      	beq.n	8012158 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80120c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80120c8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80120ca:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80120ce:	d02f      	beq.n	8012130 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80120d0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80120d4:	d828      	bhi.n	8012128 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80120d6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80120da:	d01a      	beq.n	8012112 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80120dc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80120e0:	d822      	bhi.n	8012128 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80120e2:	2b00      	cmp	r3, #0
 80120e4:	d003      	beq.n	80120ee <HAL_RCCEx_PeriphCLKConfig+0x56>
 80120e6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80120ea:	d007      	beq.n	80120fc <HAL_RCCEx_PeriphCLKConfig+0x64>
 80120ec:	e01c      	b.n	8012128 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80120ee:	4bab      	ldr	r3, [pc, #684]	@ (801239c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80120f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80120f2:	4aaa      	ldr	r2, [pc, #680]	@ (801239c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80120f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80120f8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80120fa:	e01a      	b.n	8012132 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80120fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012100:	3308      	adds	r3, #8
 8012102:	2102      	movs	r1, #2
 8012104:	4618      	mov	r0, r3
 8012106:	f002 fa49 	bl	801459c <RCCEx_PLL2_Config>
 801210a:	4603      	mov	r3, r0
 801210c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8012110:	e00f      	b.n	8012132 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8012112:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012116:	3328      	adds	r3, #40	@ 0x28
 8012118:	2102      	movs	r1, #2
 801211a:	4618      	mov	r0, r3
 801211c:	f002 faf0 	bl	8014700 <RCCEx_PLL3_Config>
 8012120:	4603      	mov	r3, r0
 8012122:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8012126:	e004      	b.n	8012132 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8012128:	2301      	movs	r3, #1
 801212a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 801212e:	e000      	b.n	8012132 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8012130:	bf00      	nop
    }

    if (ret == HAL_OK)
 8012132:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012136:	2b00      	cmp	r3, #0
 8012138:	d10a      	bne.n	8012150 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 801213a:	4b98      	ldr	r3, [pc, #608]	@ (801239c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 801213c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801213e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8012142:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012146:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8012148:	4a94      	ldr	r2, [pc, #592]	@ (801239c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 801214a:	430b      	orrs	r3, r1
 801214c:	6513      	str	r3, [r2, #80]	@ 0x50
 801214e:	e003      	b.n	8012158 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012150:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012154:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8012158:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801215c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012160:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8012164:	f04f 0900 	mov.w	r9, #0
 8012168:	ea58 0309 	orrs.w	r3, r8, r9
 801216c:	d047      	beq.n	80121fe <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 801216e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012172:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012174:	2b04      	cmp	r3, #4
 8012176:	d82a      	bhi.n	80121ce <HAL_RCCEx_PeriphCLKConfig+0x136>
 8012178:	a201      	add	r2, pc, #4	@ (adr r2, 8012180 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 801217a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801217e:	bf00      	nop
 8012180:	08012195 	.word	0x08012195
 8012184:	080121a3 	.word	0x080121a3
 8012188:	080121b9 	.word	0x080121b9
 801218c:	080121d7 	.word	0x080121d7
 8012190:	080121d7 	.word	0x080121d7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8012194:	4b81      	ldr	r3, [pc, #516]	@ (801239c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8012196:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012198:	4a80      	ldr	r2, [pc, #512]	@ (801239c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 801219a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801219e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80121a0:	e01a      	b.n	80121d8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80121a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80121a6:	3308      	adds	r3, #8
 80121a8:	2100      	movs	r1, #0
 80121aa:	4618      	mov	r0, r3
 80121ac:	f002 f9f6 	bl	801459c <RCCEx_PLL2_Config>
 80121b0:	4603      	mov	r3, r0
 80121b2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80121b6:	e00f      	b.n	80121d8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80121b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80121bc:	3328      	adds	r3, #40	@ 0x28
 80121be:	2100      	movs	r1, #0
 80121c0:	4618      	mov	r0, r3
 80121c2:	f002 fa9d 	bl	8014700 <RCCEx_PLL3_Config>
 80121c6:	4603      	mov	r3, r0
 80121c8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80121cc:	e004      	b.n	80121d8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80121ce:	2301      	movs	r3, #1
 80121d0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80121d4:	e000      	b.n	80121d8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80121d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80121d8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80121dc:	2b00      	cmp	r3, #0
 80121de:	d10a      	bne.n	80121f6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80121e0:	4b6e      	ldr	r3, [pc, #440]	@ (801239c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80121e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80121e4:	f023 0107 	bic.w	r1, r3, #7
 80121e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80121ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80121ee:	4a6b      	ldr	r2, [pc, #428]	@ (801239c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80121f0:	430b      	orrs	r3, r1
 80121f2:	6513      	str	r3, [r2, #80]	@ 0x50
 80121f4:	e003      	b.n	80121fe <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80121f6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80121fa:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80121fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012202:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012206:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 801220a:	f04f 0b00 	mov.w	fp, #0
 801220e:	ea5a 030b 	orrs.w	r3, sl, fp
 8012212:	d05b      	beq.n	80122cc <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8012214:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012218:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 801221c:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8012220:	d03b      	beq.n	801229a <HAL_RCCEx_PeriphCLKConfig+0x202>
 8012222:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8012226:	d834      	bhi.n	8012292 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8012228:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 801222c:	d037      	beq.n	801229e <HAL_RCCEx_PeriphCLKConfig+0x206>
 801222e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8012232:	d82e      	bhi.n	8012292 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8012234:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8012238:	d033      	beq.n	80122a2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 801223a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 801223e:	d828      	bhi.n	8012292 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8012240:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8012244:	d01a      	beq.n	801227c <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8012246:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 801224a:	d822      	bhi.n	8012292 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 801224c:	2b00      	cmp	r3, #0
 801224e:	d003      	beq.n	8012258 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8012250:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8012254:	d007      	beq.n	8012266 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8012256:	e01c      	b.n	8012292 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8012258:	4b50      	ldr	r3, [pc, #320]	@ (801239c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 801225a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801225c:	4a4f      	ldr	r2, [pc, #316]	@ (801239c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 801225e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8012262:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8012264:	e01e      	b.n	80122a4 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8012266:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801226a:	3308      	adds	r3, #8
 801226c:	2100      	movs	r1, #0
 801226e:	4618      	mov	r0, r3
 8012270:	f002 f994 	bl	801459c <RCCEx_PLL2_Config>
 8012274:	4603      	mov	r3, r0
 8012276:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 801227a:	e013      	b.n	80122a4 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801227c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012280:	3328      	adds	r3, #40	@ 0x28
 8012282:	2100      	movs	r1, #0
 8012284:	4618      	mov	r0, r3
 8012286:	f002 fa3b 	bl	8014700 <RCCEx_PLL3_Config>
 801228a:	4603      	mov	r3, r0
 801228c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8012290:	e008      	b.n	80122a4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8012292:	2301      	movs	r3, #1
 8012294:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8012298:	e004      	b.n	80122a4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 801229a:	bf00      	nop
 801229c:	e002      	b.n	80122a4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 801229e:	bf00      	nop
 80122a0:	e000      	b.n	80122a4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80122a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80122a4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80122a8:	2b00      	cmp	r3, #0
 80122aa:	d10b      	bne.n	80122c4 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80122ac:	4b3b      	ldr	r3, [pc, #236]	@ (801239c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80122ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80122b0:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80122b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80122b8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80122bc:	4a37      	ldr	r2, [pc, #220]	@ (801239c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80122be:	430b      	orrs	r3, r1
 80122c0:	6593      	str	r3, [r2, #88]	@ 0x58
 80122c2:	e003      	b.n	80122cc <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80122c4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80122c8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80122cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80122d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122d4:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80122d8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80122dc:	2300      	movs	r3, #0
 80122de:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80122e2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80122e6:	460b      	mov	r3, r1
 80122e8:	4313      	orrs	r3, r2
 80122ea:	d05d      	beq.n	80123a8 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80122ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80122f0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80122f4:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80122f8:	d03b      	beq.n	8012372 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80122fa:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80122fe:	d834      	bhi.n	801236a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8012300:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8012304:	d037      	beq.n	8012376 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8012306:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 801230a:	d82e      	bhi.n	801236a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 801230c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8012310:	d033      	beq.n	801237a <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8012312:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8012316:	d828      	bhi.n	801236a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8012318:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801231c:	d01a      	beq.n	8012354 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 801231e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8012322:	d822      	bhi.n	801236a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8012324:	2b00      	cmp	r3, #0
 8012326:	d003      	beq.n	8012330 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8012328:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801232c:	d007      	beq.n	801233e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 801232e:	e01c      	b.n	801236a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8012330:	4b1a      	ldr	r3, [pc, #104]	@ (801239c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8012332:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012334:	4a19      	ldr	r2, [pc, #100]	@ (801239c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8012336:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801233a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801233c:	e01e      	b.n	801237c <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801233e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012342:	3308      	adds	r3, #8
 8012344:	2100      	movs	r1, #0
 8012346:	4618      	mov	r0, r3
 8012348:	f002 f928 	bl	801459c <RCCEx_PLL2_Config>
 801234c:	4603      	mov	r3, r0
 801234e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8012352:	e013      	b.n	801237c <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8012354:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012358:	3328      	adds	r3, #40	@ 0x28
 801235a:	2100      	movs	r1, #0
 801235c:	4618      	mov	r0, r3
 801235e:	f002 f9cf 	bl	8014700 <RCCEx_PLL3_Config>
 8012362:	4603      	mov	r3, r0
 8012364:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8012368:	e008      	b.n	801237c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 801236a:	2301      	movs	r3, #1
 801236c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8012370:	e004      	b.n	801237c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8012372:	bf00      	nop
 8012374:	e002      	b.n	801237c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8012376:	bf00      	nop
 8012378:	e000      	b.n	801237c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 801237a:	bf00      	nop
    }

    if (ret == HAL_OK)
 801237c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012380:	2b00      	cmp	r3, #0
 8012382:	d10d      	bne.n	80123a0 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8012384:	4b05      	ldr	r3, [pc, #20]	@ (801239c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8012386:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012388:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 801238c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012390:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8012394:	4a01      	ldr	r2, [pc, #4]	@ (801239c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8012396:	430b      	orrs	r3, r1
 8012398:	6593      	str	r3, [r2, #88]	@ 0x58
 801239a:	e005      	b.n	80123a8 <HAL_RCCEx_PeriphCLKConfig+0x310>
 801239c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80123a0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80123a4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80123a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80123ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123b0:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80123b4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80123b8:	2300      	movs	r3, #0
 80123ba:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80123be:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80123c2:	460b      	mov	r3, r1
 80123c4:	4313      	orrs	r3, r2
 80123c6:	d03a      	beq.n	801243e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 80123c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80123cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80123ce:	2b30      	cmp	r3, #48	@ 0x30
 80123d0:	d01f      	beq.n	8012412 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 80123d2:	2b30      	cmp	r3, #48	@ 0x30
 80123d4:	d819      	bhi.n	801240a <HAL_RCCEx_PeriphCLKConfig+0x372>
 80123d6:	2b20      	cmp	r3, #32
 80123d8:	d00c      	beq.n	80123f4 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80123da:	2b20      	cmp	r3, #32
 80123dc:	d815      	bhi.n	801240a <HAL_RCCEx_PeriphCLKConfig+0x372>
 80123de:	2b00      	cmp	r3, #0
 80123e0:	d019      	beq.n	8012416 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80123e2:	2b10      	cmp	r3, #16
 80123e4:	d111      	bne.n	801240a <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80123e6:	4baa      	ldr	r3, [pc, #680]	@ (8012690 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80123e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80123ea:	4aa9      	ldr	r2, [pc, #676]	@ (8012690 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80123ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80123f0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80123f2:	e011      	b.n	8012418 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80123f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80123f8:	3308      	adds	r3, #8
 80123fa:	2102      	movs	r1, #2
 80123fc:	4618      	mov	r0, r3
 80123fe:	f002 f8cd 	bl	801459c <RCCEx_PLL2_Config>
 8012402:	4603      	mov	r3, r0
 8012404:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8012408:	e006      	b.n	8012418 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 801240a:	2301      	movs	r3, #1
 801240c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8012410:	e002      	b.n	8012418 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8012412:	bf00      	nop
 8012414:	e000      	b.n	8012418 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8012416:	bf00      	nop
    }

    if (ret == HAL_OK)
 8012418:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801241c:	2b00      	cmp	r3, #0
 801241e:	d10a      	bne.n	8012436 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8012420:	4b9b      	ldr	r3, [pc, #620]	@ (8012690 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8012422:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012424:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8012428:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801242c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801242e:	4a98      	ldr	r2, [pc, #608]	@ (8012690 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8012430:	430b      	orrs	r3, r1
 8012432:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8012434:	e003      	b.n	801243e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012436:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801243a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 801243e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012446:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 801244a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 801244e:	2300      	movs	r3, #0
 8012450:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8012454:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8012458:	460b      	mov	r3, r1
 801245a:	4313      	orrs	r3, r2
 801245c:	d051      	beq.n	8012502 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 801245e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012462:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8012464:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8012468:	d035      	beq.n	80124d6 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 801246a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801246e:	d82e      	bhi.n	80124ce <HAL_RCCEx_PeriphCLKConfig+0x436>
 8012470:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8012474:	d031      	beq.n	80124da <HAL_RCCEx_PeriphCLKConfig+0x442>
 8012476:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 801247a:	d828      	bhi.n	80124ce <HAL_RCCEx_PeriphCLKConfig+0x436>
 801247c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8012480:	d01a      	beq.n	80124b8 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8012482:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8012486:	d822      	bhi.n	80124ce <HAL_RCCEx_PeriphCLKConfig+0x436>
 8012488:	2b00      	cmp	r3, #0
 801248a:	d003      	beq.n	8012494 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 801248c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8012490:	d007      	beq.n	80124a2 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8012492:	e01c      	b.n	80124ce <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8012494:	4b7e      	ldr	r3, [pc, #504]	@ (8012690 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8012496:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012498:	4a7d      	ldr	r2, [pc, #500]	@ (8012690 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 801249a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801249e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80124a0:	e01c      	b.n	80124dc <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80124a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80124a6:	3308      	adds	r3, #8
 80124a8:	2100      	movs	r1, #0
 80124aa:	4618      	mov	r0, r3
 80124ac:	f002 f876 	bl	801459c <RCCEx_PLL2_Config>
 80124b0:	4603      	mov	r3, r0
 80124b2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80124b6:	e011      	b.n	80124dc <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80124b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80124bc:	3328      	adds	r3, #40	@ 0x28
 80124be:	2100      	movs	r1, #0
 80124c0:	4618      	mov	r0, r3
 80124c2:	f002 f91d 	bl	8014700 <RCCEx_PLL3_Config>
 80124c6:	4603      	mov	r3, r0
 80124c8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80124cc:	e006      	b.n	80124dc <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80124ce:	2301      	movs	r3, #1
 80124d0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80124d4:	e002      	b.n	80124dc <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80124d6:	bf00      	nop
 80124d8:	e000      	b.n	80124dc <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80124da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80124dc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80124e0:	2b00      	cmp	r3, #0
 80124e2:	d10a      	bne.n	80124fa <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80124e4:	4b6a      	ldr	r3, [pc, #424]	@ (8012690 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80124e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80124e8:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80124ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80124f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80124f2:	4a67      	ldr	r2, [pc, #412]	@ (8012690 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80124f4:	430b      	orrs	r3, r1
 80124f6:	6513      	str	r3, [r2, #80]	@ 0x50
 80124f8:	e003      	b.n	8012502 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80124fa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80124fe:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8012502:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012506:	e9d3 2300 	ldrd	r2, r3, [r3]
 801250a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 801250e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8012512:	2300      	movs	r3, #0
 8012514:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8012518:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 801251c:	460b      	mov	r3, r1
 801251e:	4313      	orrs	r3, r2
 8012520:	d053      	beq.n	80125ca <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8012522:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012526:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8012528:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 801252c:	d033      	beq.n	8012596 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 801252e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8012532:	d82c      	bhi.n	801258e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8012534:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8012538:	d02f      	beq.n	801259a <HAL_RCCEx_PeriphCLKConfig+0x502>
 801253a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 801253e:	d826      	bhi.n	801258e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8012540:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8012544:	d02b      	beq.n	801259e <HAL_RCCEx_PeriphCLKConfig+0x506>
 8012546:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 801254a:	d820      	bhi.n	801258e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 801254c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8012550:	d012      	beq.n	8012578 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8012552:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8012556:	d81a      	bhi.n	801258e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8012558:	2b00      	cmp	r3, #0
 801255a:	d022      	beq.n	80125a2 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 801255c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8012560:	d115      	bne.n	801258e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8012562:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012566:	3308      	adds	r3, #8
 8012568:	2101      	movs	r1, #1
 801256a:	4618      	mov	r0, r3
 801256c:	f002 f816 	bl	801459c <RCCEx_PLL2_Config>
 8012570:	4603      	mov	r3, r0
 8012572:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8012576:	e015      	b.n	80125a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8012578:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801257c:	3328      	adds	r3, #40	@ 0x28
 801257e:	2101      	movs	r1, #1
 8012580:	4618      	mov	r0, r3
 8012582:	f002 f8bd 	bl	8014700 <RCCEx_PLL3_Config>
 8012586:	4603      	mov	r3, r0
 8012588:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 801258c:	e00a      	b.n	80125a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801258e:	2301      	movs	r3, #1
 8012590:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8012594:	e006      	b.n	80125a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8012596:	bf00      	nop
 8012598:	e004      	b.n	80125a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 801259a:	bf00      	nop
 801259c:	e002      	b.n	80125a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 801259e:	bf00      	nop
 80125a0:	e000      	b.n	80125a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80125a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80125a4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80125a8:	2b00      	cmp	r3, #0
 80125aa:	d10a      	bne.n	80125c2 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80125ac:	4b38      	ldr	r3, [pc, #224]	@ (8012690 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80125ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80125b0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80125b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80125b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80125ba:	4a35      	ldr	r2, [pc, #212]	@ (8012690 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80125bc:	430b      	orrs	r3, r1
 80125be:	6513      	str	r3, [r2, #80]	@ 0x50
 80125c0:	e003      	b.n	80125ca <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80125c2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80125c6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80125ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80125ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125d2:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80125d6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80125da:	2300      	movs	r3, #0
 80125dc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80125e0:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80125e4:	460b      	mov	r3, r1
 80125e6:	4313      	orrs	r3, r2
 80125e8:	d058      	beq.n	801269c <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80125ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80125ee:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80125f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80125f6:	d033      	beq.n	8012660 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 80125f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80125fc:	d82c      	bhi.n	8012658 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80125fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8012602:	d02f      	beq.n	8012664 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8012604:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8012608:	d826      	bhi.n	8012658 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 801260a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 801260e:	d02b      	beq.n	8012668 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8012610:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8012614:	d820      	bhi.n	8012658 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8012616:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801261a:	d012      	beq.n	8012642 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 801261c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8012620:	d81a      	bhi.n	8012658 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8012622:	2b00      	cmp	r3, #0
 8012624:	d022      	beq.n	801266c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8012626:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801262a:	d115      	bne.n	8012658 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801262c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012630:	3308      	adds	r3, #8
 8012632:	2101      	movs	r1, #1
 8012634:	4618      	mov	r0, r3
 8012636:	f001 ffb1 	bl	801459c <RCCEx_PLL2_Config>
 801263a:	4603      	mov	r3, r0
 801263c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8012640:	e015      	b.n	801266e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8012642:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012646:	3328      	adds	r3, #40	@ 0x28
 8012648:	2101      	movs	r1, #1
 801264a:	4618      	mov	r0, r3
 801264c:	f002 f858 	bl	8014700 <RCCEx_PLL3_Config>
 8012650:	4603      	mov	r3, r0
 8012652:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8012656:	e00a      	b.n	801266e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8012658:	2301      	movs	r3, #1
 801265a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 801265e:	e006      	b.n	801266e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8012660:	bf00      	nop
 8012662:	e004      	b.n	801266e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8012664:	bf00      	nop
 8012666:	e002      	b.n	801266e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8012668:	bf00      	nop
 801266a:	e000      	b.n	801266e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 801266c:	bf00      	nop
    }

    if (ret == HAL_OK)
 801266e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012672:	2b00      	cmp	r3, #0
 8012674:	d10e      	bne.n	8012694 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8012676:	4b06      	ldr	r3, [pc, #24]	@ (8012690 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8012678:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801267a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 801267e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012682:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8012686:	4a02      	ldr	r2, [pc, #8]	@ (8012690 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8012688:	430b      	orrs	r3, r1
 801268a:	6593      	str	r3, [r2, #88]	@ 0x58
 801268c:	e006      	b.n	801269c <HAL_RCCEx_PeriphCLKConfig+0x604>
 801268e:	bf00      	nop
 8012690:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012694:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012698:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 801269c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80126a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80126a4:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80126a8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80126ac:	2300      	movs	r3, #0
 80126ae:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80126b2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80126b6:	460b      	mov	r3, r1
 80126b8:	4313      	orrs	r3, r2
 80126ba:	d037      	beq.n	801272c <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80126bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80126c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80126c2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80126c6:	d00e      	beq.n	80126e6 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 80126c8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80126cc:	d816      	bhi.n	80126fc <HAL_RCCEx_PeriphCLKConfig+0x664>
 80126ce:	2b00      	cmp	r3, #0
 80126d0:	d018      	beq.n	8012704 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80126d2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80126d6:	d111      	bne.n	80126fc <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80126d8:	4bc4      	ldr	r3, [pc, #784]	@ (80129ec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80126da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80126dc:	4ac3      	ldr	r2, [pc, #780]	@ (80129ec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80126de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80126e2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80126e4:	e00f      	b.n	8012706 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80126e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80126ea:	3308      	adds	r3, #8
 80126ec:	2101      	movs	r1, #1
 80126ee:	4618      	mov	r0, r3
 80126f0:	f001 ff54 	bl	801459c <RCCEx_PLL2_Config>
 80126f4:	4603      	mov	r3, r0
 80126f6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80126fa:	e004      	b.n	8012706 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80126fc:	2301      	movs	r3, #1
 80126fe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8012702:	e000      	b.n	8012706 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8012704:	bf00      	nop
    }

    if (ret == HAL_OK)
 8012706:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801270a:	2b00      	cmp	r3, #0
 801270c:	d10a      	bne.n	8012724 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 801270e:	4bb7      	ldr	r3, [pc, #732]	@ (80129ec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8012710:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012712:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8012716:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801271a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801271c:	4ab3      	ldr	r2, [pc, #716]	@ (80129ec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801271e:	430b      	orrs	r3, r1
 8012720:	6513      	str	r3, [r2, #80]	@ 0x50
 8012722:	e003      	b.n	801272c <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012724:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012728:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 801272c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012734:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8012738:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 801273c:	2300      	movs	r3, #0
 801273e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8012742:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8012746:	460b      	mov	r3, r1
 8012748:	4313      	orrs	r3, r2
 801274a:	d039      	beq.n	80127c0 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 801274c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012750:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8012752:	2b03      	cmp	r3, #3
 8012754:	d81c      	bhi.n	8012790 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8012756:	a201      	add	r2, pc, #4	@ (adr r2, 801275c <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8012758:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801275c:	08012799 	.word	0x08012799
 8012760:	0801276d 	.word	0x0801276d
 8012764:	0801277b 	.word	0x0801277b
 8012768:	08012799 	.word	0x08012799
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801276c:	4b9f      	ldr	r3, [pc, #636]	@ (80129ec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801276e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012770:	4a9e      	ldr	r2, [pc, #632]	@ (80129ec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8012772:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8012776:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8012778:	e00f      	b.n	801279a <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801277a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801277e:	3308      	adds	r3, #8
 8012780:	2102      	movs	r1, #2
 8012782:	4618      	mov	r0, r3
 8012784:	f001 ff0a 	bl	801459c <RCCEx_PLL2_Config>
 8012788:	4603      	mov	r3, r0
 801278a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 801278e:	e004      	b.n	801279a <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8012790:	2301      	movs	r3, #1
 8012792:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8012796:	e000      	b.n	801279a <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8012798:	bf00      	nop
    }

    if (ret == HAL_OK)
 801279a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801279e:	2b00      	cmp	r3, #0
 80127a0:	d10a      	bne.n	80127b8 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80127a2:	4b92      	ldr	r3, [pc, #584]	@ (80129ec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80127a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80127a6:	f023 0103 	bic.w	r1, r3, #3
 80127aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80127ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80127b0:	4a8e      	ldr	r2, [pc, #568]	@ (80129ec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80127b2:	430b      	orrs	r3, r1
 80127b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80127b6:	e003      	b.n	80127c0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80127b8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80127bc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80127c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80127c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80127c8:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80127cc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80127d0:	2300      	movs	r3, #0
 80127d2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80127d6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80127da:	460b      	mov	r3, r1
 80127dc:	4313      	orrs	r3, r2
 80127de:	f000 8099 	beq.w	8012914 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80127e2:	4b83      	ldr	r3, [pc, #524]	@ (80129f0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80127e4:	681b      	ldr	r3, [r3, #0]
 80127e6:	4a82      	ldr	r2, [pc, #520]	@ (80129f0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80127e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80127ec:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80127ee:	f7f6 feb9 	bl	8009564 <HAL_GetTick>
 80127f2:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80127f6:	e00b      	b.n	8012810 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80127f8:	f7f6 feb4 	bl	8009564 <HAL_GetTick>
 80127fc:	4602      	mov	r2, r0
 80127fe:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8012802:	1ad3      	subs	r3, r2, r3
 8012804:	2b64      	cmp	r3, #100	@ 0x64
 8012806:	d903      	bls.n	8012810 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8012808:	2303      	movs	r3, #3
 801280a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 801280e:	e005      	b.n	801281c <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8012810:	4b77      	ldr	r3, [pc, #476]	@ (80129f0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8012812:	681b      	ldr	r3, [r3, #0]
 8012814:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8012818:	2b00      	cmp	r3, #0
 801281a:	d0ed      	beq.n	80127f8 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 801281c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012820:	2b00      	cmp	r3, #0
 8012822:	d173      	bne.n	801290c <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8012824:	4b71      	ldr	r3, [pc, #452]	@ (80129ec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8012826:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8012828:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801282c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8012830:	4053      	eors	r3, r2
 8012832:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8012836:	2b00      	cmp	r3, #0
 8012838:	d015      	beq.n	8012866 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 801283a:	4b6c      	ldr	r3, [pc, #432]	@ (80129ec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801283c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801283e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8012842:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8012846:	4b69      	ldr	r3, [pc, #420]	@ (80129ec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8012848:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801284a:	4a68      	ldr	r2, [pc, #416]	@ (80129ec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801284c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8012850:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8012852:	4b66      	ldr	r3, [pc, #408]	@ (80129ec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8012854:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012856:	4a65      	ldr	r2, [pc, #404]	@ (80129ec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8012858:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801285c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 801285e:	4a63      	ldr	r2, [pc, #396]	@ (80129ec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8012860:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8012864:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8012866:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801286a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 801286e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8012872:	d118      	bne.n	80128a6 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8012874:	f7f6 fe76 	bl	8009564 <HAL_GetTick>
 8012878:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801287c:	e00d      	b.n	801289a <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801287e:	f7f6 fe71 	bl	8009564 <HAL_GetTick>
 8012882:	4602      	mov	r2, r0
 8012884:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8012888:	1ad2      	subs	r2, r2, r3
 801288a:	f241 3388 	movw	r3, #5000	@ 0x1388
 801288e:	429a      	cmp	r2, r3
 8012890:	d903      	bls.n	801289a <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8012892:	2303      	movs	r3, #3
 8012894:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8012898:	e005      	b.n	80128a6 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801289a:	4b54      	ldr	r3, [pc, #336]	@ (80129ec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801289c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801289e:	f003 0302 	and.w	r3, r3, #2
 80128a2:	2b00      	cmp	r3, #0
 80128a4:	d0eb      	beq.n	801287e <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 80128a6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80128aa:	2b00      	cmp	r3, #0
 80128ac:	d129      	bne.n	8012902 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80128ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80128b2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80128b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80128ba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80128be:	d10e      	bne.n	80128de <HAL_RCCEx_PeriphCLKConfig+0x846>
 80128c0:	4b4a      	ldr	r3, [pc, #296]	@ (80129ec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80128c2:	691b      	ldr	r3, [r3, #16]
 80128c4:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80128c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80128cc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80128d0:	091a      	lsrs	r2, r3, #4
 80128d2:	4b48      	ldr	r3, [pc, #288]	@ (80129f4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80128d4:	4013      	ands	r3, r2
 80128d6:	4a45      	ldr	r2, [pc, #276]	@ (80129ec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80128d8:	430b      	orrs	r3, r1
 80128da:	6113      	str	r3, [r2, #16]
 80128dc:	e005      	b.n	80128ea <HAL_RCCEx_PeriphCLKConfig+0x852>
 80128de:	4b43      	ldr	r3, [pc, #268]	@ (80129ec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80128e0:	691b      	ldr	r3, [r3, #16]
 80128e2:	4a42      	ldr	r2, [pc, #264]	@ (80129ec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80128e4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80128e8:	6113      	str	r3, [r2, #16]
 80128ea:	4b40      	ldr	r3, [pc, #256]	@ (80129ec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80128ec:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80128ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80128f2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80128f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80128fa:	4a3c      	ldr	r2, [pc, #240]	@ (80129ec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80128fc:	430b      	orrs	r3, r1
 80128fe:	6713      	str	r3, [r2, #112]	@ 0x70
 8012900:	e008      	b.n	8012914 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8012902:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012906:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 801290a:	e003      	b.n	8012914 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 801290c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012910:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8012914:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012918:	e9d3 2300 	ldrd	r2, r3, [r3]
 801291c:	f002 0301 	and.w	r3, r2, #1
 8012920:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8012924:	2300      	movs	r3, #0
 8012926:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 801292a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 801292e:	460b      	mov	r3, r1
 8012930:	4313      	orrs	r3, r2
 8012932:	f000 808f 	beq.w	8012a54 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8012936:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801293a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801293c:	2b28      	cmp	r3, #40	@ 0x28
 801293e:	d871      	bhi.n	8012a24 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8012940:	a201      	add	r2, pc, #4	@ (adr r2, 8012948 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8012942:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012946:	bf00      	nop
 8012948:	08012a2d 	.word	0x08012a2d
 801294c:	08012a25 	.word	0x08012a25
 8012950:	08012a25 	.word	0x08012a25
 8012954:	08012a25 	.word	0x08012a25
 8012958:	08012a25 	.word	0x08012a25
 801295c:	08012a25 	.word	0x08012a25
 8012960:	08012a25 	.word	0x08012a25
 8012964:	08012a25 	.word	0x08012a25
 8012968:	080129f9 	.word	0x080129f9
 801296c:	08012a25 	.word	0x08012a25
 8012970:	08012a25 	.word	0x08012a25
 8012974:	08012a25 	.word	0x08012a25
 8012978:	08012a25 	.word	0x08012a25
 801297c:	08012a25 	.word	0x08012a25
 8012980:	08012a25 	.word	0x08012a25
 8012984:	08012a25 	.word	0x08012a25
 8012988:	08012a0f 	.word	0x08012a0f
 801298c:	08012a25 	.word	0x08012a25
 8012990:	08012a25 	.word	0x08012a25
 8012994:	08012a25 	.word	0x08012a25
 8012998:	08012a25 	.word	0x08012a25
 801299c:	08012a25 	.word	0x08012a25
 80129a0:	08012a25 	.word	0x08012a25
 80129a4:	08012a25 	.word	0x08012a25
 80129a8:	08012a2d 	.word	0x08012a2d
 80129ac:	08012a25 	.word	0x08012a25
 80129b0:	08012a25 	.word	0x08012a25
 80129b4:	08012a25 	.word	0x08012a25
 80129b8:	08012a25 	.word	0x08012a25
 80129bc:	08012a25 	.word	0x08012a25
 80129c0:	08012a25 	.word	0x08012a25
 80129c4:	08012a25 	.word	0x08012a25
 80129c8:	08012a2d 	.word	0x08012a2d
 80129cc:	08012a25 	.word	0x08012a25
 80129d0:	08012a25 	.word	0x08012a25
 80129d4:	08012a25 	.word	0x08012a25
 80129d8:	08012a25 	.word	0x08012a25
 80129dc:	08012a25 	.word	0x08012a25
 80129e0:	08012a25 	.word	0x08012a25
 80129e4:	08012a25 	.word	0x08012a25
 80129e8:	08012a2d 	.word	0x08012a2d
 80129ec:	58024400 	.word	0x58024400
 80129f0:	58024800 	.word	0x58024800
 80129f4:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80129f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80129fc:	3308      	adds	r3, #8
 80129fe:	2101      	movs	r1, #1
 8012a00:	4618      	mov	r0, r3
 8012a02:	f001 fdcb 	bl	801459c <RCCEx_PLL2_Config>
 8012a06:	4603      	mov	r3, r0
 8012a08:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8012a0c:	e00f      	b.n	8012a2e <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8012a0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012a12:	3328      	adds	r3, #40	@ 0x28
 8012a14:	2101      	movs	r1, #1
 8012a16:	4618      	mov	r0, r3
 8012a18:	f001 fe72 	bl	8014700 <RCCEx_PLL3_Config>
 8012a1c:	4603      	mov	r3, r0
 8012a1e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8012a22:	e004      	b.n	8012a2e <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8012a24:	2301      	movs	r3, #1
 8012a26:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8012a2a:	e000      	b.n	8012a2e <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8012a2c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8012a2e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012a32:	2b00      	cmp	r3, #0
 8012a34:	d10a      	bne.n	8012a4c <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8012a36:	4bbf      	ldr	r3, [pc, #764]	@ (8012d34 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8012a38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012a3a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8012a3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012a42:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8012a44:	4abb      	ldr	r2, [pc, #748]	@ (8012d34 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8012a46:	430b      	orrs	r3, r1
 8012a48:	6553      	str	r3, [r2, #84]	@ 0x54
 8012a4a:	e003      	b.n	8012a54 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012a4c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012a50:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8012a54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012a58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a5c:	f002 0302 	and.w	r3, r2, #2
 8012a60:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8012a64:	2300      	movs	r3, #0
 8012a66:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8012a6a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8012a6e:	460b      	mov	r3, r1
 8012a70:	4313      	orrs	r3, r2
 8012a72:	d041      	beq.n	8012af8 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8012a74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012a78:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012a7a:	2b05      	cmp	r3, #5
 8012a7c:	d824      	bhi.n	8012ac8 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8012a7e:	a201      	add	r2, pc, #4	@ (adr r2, 8012a84 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8012a80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012a84:	08012ad1 	.word	0x08012ad1
 8012a88:	08012a9d 	.word	0x08012a9d
 8012a8c:	08012ab3 	.word	0x08012ab3
 8012a90:	08012ad1 	.word	0x08012ad1
 8012a94:	08012ad1 	.word	0x08012ad1
 8012a98:	08012ad1 	.word	0x08012ad1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8012a9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012aa0:	3308      	adds	r3, #8
 8012aa2:	2101      	movs	r1, #1
 8012aa4:	4618      	mov	r0, r3
 8012aa6:	f001 fd79 	bl	801459c <RCCEx_PLL2_Config>
 8012aaa:	4603      	mov	r3, r0
 8012aac:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8012ab0:	e00f      	b.n	8012ad2 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8012ab2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012ab6:	3328      	adds	r3, #40	@ 0x28
 8012ab8:	2101      	movs	r1, #1
 8012aba:	4618      	mov	r0, r3
 8012abc:	f001 fe20 	bl	8014700 <RCCEx_PLL3_Config>
 8012ac0:	4603      	mov	r3, r0
 8012ac2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8012ac6:	e004      	b.n	8012ad2 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8012ac8:	2301      	movs	r3, #1
 8012aca:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8012ace:	e000      	b.n	8012ad2 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8012ad0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8012ad2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012ad6:	2b00      	cmp	r3, #0
 8012ad8:	d10a      	bne.n	8012af0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8012ada:	4b96      	ldr	r3, [pc, #600]	@ (8012d34 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8012adc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012ade:	f023 0107 	bic.w	r1, r3, #7
 8012ae2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012ae6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012ae8:	4a92      	ldr	r2, [pc, #584]	@ (8012d34 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8012aea:	430b      	orrs	r3, r1
 8012aec:	6553      	str	r3, [r2, #84]	@ 0x54
 8012aee:	e003      	b.n	8012af8 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012af0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012af4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8012af8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012afc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b00:	f002 0304 	and.w	r3, r2, #4
 8012b04:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8012b08:	2300      	movs	r3, #0
 8012b0a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8012b0e:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8012b12:	460b      	mov	r3, r1
 8012b14:	4313      	orrs	r3, r2
 8012b16:	d044      	beq.n	8012ba2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8012b18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012b1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8012b20:	2b05      	cmp	r3, #5
 8012b22:	d825      	bhi.n	8012b70 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8012b24:	a201      	add	r2, pc, #4	@ (adr r2, 8012b2c <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8012b26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012b2a:	bf00      	nop
 8012b2c:	08012b79 	.word	0x08012b79
 8012b30:	08012b45 	.word	0x08012b45
 8012b34:	08012b5b 	.word	0x08012b5b
 8012b38:	08012b79 	.word	0x08012b79
 8012b3c:	08012b79 	.word	0x08012b79
 8012b40:	08012b79 	.word	0x08012b79
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8012b44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012b48:	3308      	adds	r3, #8
 8012b4a:	2101      	movs	r1, #1
 8012b4c:	4618      	mov	r0, r3
 8012b4e:	f001 fd25 	bl	801459c <RCCEx_PLL2_Config>
 8012b52:	4603      	mov	r3, r0
 8012b54:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8012b58:	e00f      	b.n	8012b7a <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8012b5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012b5e:	3328      	adds	r3, #40	@ 0x28
 8012b60:	2101      	movs	r1, #1
 8012b62:	4618      	mov	r0, r3
 8012b64:	f001 fdcc 	bl	8014700 <RCCEx_PLL3_Config>
 8012b68:	4603      	mov	r3, r0
 8012b6a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8012b6e:	e004      	b.n	8012b7a <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8012b70:	2301      	movs	r3, #1
 8012b72:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8012b76:	e000      	b.n	8012b7a <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8012b78:	bf00      	nop
    }

    if (ret == HAL_OK)
 8012b7a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012b7e:	2b00      	cmp	r3, #0
 8012b80:	d10b      	bne.n	8012b9a <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8012b82:	4b6c      	ldr	r3, [pc, #432]	@ (8012d34 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8012b84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012b86:	f023 0107 	bic.w	r1, r3, #7
 8012b8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012b8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8012b92:	4a68      	ldr	r2, [pc, #416]	@ (8012d34 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8012b94:	430b      	orrs	r3, r1
 8012b96:	6593      	str	r3, [r2, #88]	@ 0x58
 8012b98:	e003      	b.n	8012ba2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012b9a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012b9e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8012ba2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012ba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012baa:	f002 0320 	and.w	r3, r2, #32
 8012bae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8012bb2:	2300      	movs	r3, #0
 8012bb4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8012bb8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8012bbc:	460b      	mov	r3, r1
 8012bbe:	4313      	orrs	r3, r2
 8012bc0:	d055      	beq.n	8012c6e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8012bc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012bc6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8012bca:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8012bce:	d033      	beq.n	8012c38 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8012bd0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8012bd4:	d82c      	bhi.n	8012c30 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8012bd6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8012bda:	d02f      	beq.n	8012c3c <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8012bdc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8012be0:	d826      	bhi.n	8012c30 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8012be2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8012be6:	d02b      	beq.n	8012c40 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8012be8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8012bec:	d820      	bhi.n	8012c30 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8012bee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8012bf2:	d012      	beq.n	8012c1a <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8012bf4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8012bf8:	d81a      	bhi.n	8012c30 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8012bfa:	2b00      	cmp	r3, #0
 8012bfc:	d022      	beq.n	8012c44 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8012bfe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8012c02:	d115      	bne.n	8012c30 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8012c04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012c08:	3308      	adds	r3, #8
 8012c0a:	2100      	movs	r1, #0
 8012c0c:	4618      	mov	r0, r3
 8012c0e:	f001 fcc5 	bl	801459c <RCCEx_PLL2_Config>
 8012c12:	4603      	mov	r3, r0
 8012c14:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8012c18:	e015      	b.n	8012c46 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8012c1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012c1e:	3328      	adds	r3, #40	@ 0x28
 8012c20:	2102      	movs	r1, #2
 8012c22:	4618      	mov	r0, r3
 8012c24:	f001 fd6c 	bl	8014700 <RCCEx_PLL3_Config>
 8012c28:	4603      	mov	r3, r0
 8012c2a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8012c2e:	e00a      	b.n	8012c46 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8012c30:	2301      	movs	r3, #1
 8012c32:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8012c36:	e006      	b.n	8012c46 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8012c38:	bf00      	nop
 8012c3a:	e004      	b.n	8012c46 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8012c3c:	bf00      	nop
 8012c3e:	e002      	b.n	8012c46 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8012c40:	bf00      	nop
 8012c42:	e000      	b.n	8012c46 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8012c44:	bf00      	nop
    }

    if (ret == HAL_OK)
 8012c46:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012c4a:	2b00      	cmp	r3, #0
 8012c4c:	d10b      	bne.n	8012c66 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8012c4e:	4b39      	ldr	r3, [pc, #228]	@ (8012d34 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8012c50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012c52:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8012c56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012c5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8012c5e:	4a35      	ldr	r2, [pc, #212]	@ (8012d34 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8012c60:	430b      	orrs	r3, r1
 8012c62:	6553      	str	r3, [r2, #84]	@ 0x54
 8012c64:	e003      	b.n	8012c6e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012c66:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012c6a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8012c6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c76:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8012c7a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8012c7e:	2300      	movs	r3, #0
 8012c80:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8012c84:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8012c88:	460b      	mov	r3, r1
 8012c8a:	4313      	orrs	r3, r2
 8012c8c:	d058      	beq.n	8012d40 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8012c8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012c92:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8012c96:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8012c9a:	d033      	beq.n	8012d04 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8012c9c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8012ca0:	d82c      	bhi.n	8012cfc <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8012ca2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8012ca6:	d02f      	beq.n	8012d08 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8012ca8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8012cac:	d826      	bhi.n	8012cfc <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8012cae:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8012cb2:	d02b      	beq.n	8012d0c <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8012cb4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8012cb8:	d820      	bhi.n	8012cfc <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8012cba:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8012cbe:	d012      	beq.n	8012ce6 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8012cc0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8012cc4:	d81a      	bhi.n	8012cfc <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8012cc6:	2b00      	cmp	r3, #0
 8012cc8:	d022      	beq.n	8012d10 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8012cca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8012cce:	d115      	bne.n	8012cfc <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8012cd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012cd4:	3308      	adds	r3, #8
 8012cd6:	2100      	movs	r1, #0
 8012cd8:	4618      	mov	r0, r3
 8012cda:	f001 fc5f 	bl	801459c <RCCEx_PLL2_Config>
 8012cde:	4603      	mov	r3, r0
 8012ce0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8012ce4:	e015      	b.n	8012d12 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8012ce6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012cea:	3328      	adds	r3, #40	@ 0x28
 8012cec:	2102      	movs	r1, #2
 8012cee:	4618      	mov	r0, r3
 8012cf0:	f001 fd06 	bl	8014700 <RCCEx_PLL3_Config>
 8012cf4:	4603      	mov	r3, r0
 8012cf6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8012cfa:	e00a      	b.n	8012d12 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8012cfc:	2301      	movs	r3, #1
 8012cfe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8012d02:	e006      	b.n	8012d12 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8012d04:	bf00      	nop
 8012d06:	e004      	b.n	8012d12 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8012d08:	bf00      	nop
 8012d0a:	e002      	b.n	8012d12 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8012d0c:	bf00      	nop
 8012d0e:	e000      	b.n	8012d12 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8012d10:	bf00      	nop
    }

    if (ret == HAL_OK)
 8012d12:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012d16:	2b00      	cmp	r3, #0
 8012d18:	d10e      	bne.n	8012d38 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8012d1a:	4b06      	ldr	r3, [pc, #24]	@ (8012d34 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8012d1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012d1e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8012d22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012d26:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8012d2a:	4a02      	ldr	r2, [pc, #8]	@ (8012d34 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8012d2c:	430b      	orrs	r3, r1
 8012d2e:	6593      	str	r3, [r2, #88]	@ 0x58
 8012d30:	e006      	b.n	8012d40 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8012d32:	bf00      	nop
 8012d34:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012d38:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012d3c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8012d40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d48:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8012d4c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8012d50:	2300      	movs	r3, #0
 8012d52:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8012d56:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8012d5a:	460b      	mov	r3, r1
 8012d5c:	4313      	orrs	r3, r2
 8012d5e:	d055      	beq.n	8012e0c <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8012d60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012d64:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8012d68:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8012d6c:	d033      	beq.n	8012dd6 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8012d6e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8012d72:	d82c      	bhi.n	8012dce <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8012d74:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8012d78:	d02f      	beq.n	8012dda <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8012d7a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8012d7e:	d826      	bhi.n	8012dce <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8012d80:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8012d84:	d02b      	beq.n	8012dde <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8012d86:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8012d8a:	d820      	bhi.n	8012dce <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8012d8c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8012d90:	d012      	beq.n	8012db8 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8012d92:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8012d96:	d81a      	bhi.n	8012dce <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8012d98:	2b00      	cmp	r3, #0
 8012d9a:	d022      	beq.n	8012de2 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8012d9c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8012da0:	d115      	bne.n	8012dce <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8012da2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012da6:	3308      	adds	r3, #8
 8012da8:	2100      	movs	r1, #0
 8012daa:	4618      	mov	r0, r3
 8012dac:	f001 fbf6 	bl	801459c <RCCEx_PLL2_Config>
 8012db0:	4603      	mov	r3, r0
 8012db2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8012db6:	e015      	b.n	8012de4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8012db8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012dbc:	3328      	adds	r3, #40	@ 0x28
 8012dbe:	2102      	movs	r1, #2
 8012dc0:	4618      	mov	r0, r3
 8012dc2:	f001 fc9d 	bl	8014700 <RCCEx_PLL3_Config>
 8012dc6:	4603      	mov	r3, r0
 8012dc8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8012dcc:	e00a      	b.n	8012de4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8012dce:	2301      	movs	r3, #1
 8012dd0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8012dd4:	e006      	b.n	8012de4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8012dd6:	bf00      	nop
 8012dd8:	e004      	b.n	8012de4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8012dda:	bf00      	nop
 8012ddc:	e002      	b.n	8012de4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8012dde:	bf00      	nop
 8012de0:	e000      	b.n	8012de4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8012de2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8012de4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012de8:	2b00      	cmp	r3, #0
 8012dea:	d10b      	bne.n	8012e04 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8012dec:	4ba0      	ldr	r3, [pc, #640]	@ (8013070 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012dee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012df0:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8012df4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012df8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8012dfc:	4a9c      	ldr	r2, [pc, #624]	@ (8013070 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012dfe:	430b      	orrs	r3, r1
 8012e00:	6593      	str	r3, [r2, #88]	@ 0x58
 8012e02:	e003      	b.n	8012e0c <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012e04:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012e08:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8012e0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e14:	f002 0308 	and.w	r3, r2, #8
 8012e18:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8012e1c:	2300      	movs	r3, #0
 8012e1e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8012e22:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8012e26:	460b      	mov	r3, r1
 8012e28:	4313      	orrs	r3, r2
 8012e2a:	d01e      	beq.n	8012e6a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8012e2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012e30:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012e34:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8012e38:	d10c      	bne.n	8012e54 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8012e3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012e3e:	3328      	adds	r3, #40	@ 0x28
 8012e40:	2102      	movs	r1, #2
 8012e42:	4618      	mov	r0, r3
 8012e44:	f001 fc5c 	bl	8014700 <RCCEx_PLL3_Config>
 8012e48:	4603      	mov	r3, r0
 8012e4a:	2b00      	cmp	r3, #0
 8012e4c:	d002      	beq.n	8012e54 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8012e4e:	2301      	movs	r3, #1
 8012e50:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8012e54:	4b86      	ldr	r3, [pc, #536]	@ (8013070 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012e56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012e58:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8012e5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012e60:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012e64:	4a82      	ldr	r2, [pc, #520]	@ (8013070 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012e66:	430b      	orrs	r3, r1
 8012e68:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8012e6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e72:	f002 0310 	and.w	r3, r2, #16
 8012e76:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8012e7a:	2300      	movs	r3, #0
 8012e7c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8012e80:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8012e84:	460b      	mov	r3, r1
 8012e86:	4313      	orrs	r3, r2
 8012e88:	d01e      	beq.n	8012ec8 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8012e8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012e8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8012e92:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8012e96:	d10c      	bne.n	8012eb2 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8012e98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012e9c:	3328      	adds	r3, #40	@ 0x28
 8012e9e:	2102      	movs	r1, #2
 8012ea0:	4618      	mov	r0, r3
 8012ea2:	f001 fc2d 	bl	8014700 <RCCEx_PLL3_Config>
 8012ea6:	4603      	mov	r3, r0
 8012ea8:	2b00      	cmp	r3, #0
 8012eaa:	d002      	beq.n	8012eb2 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8012eac:	2301      	movs	r3, #1
 8012eae:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8012eb2:	4b6f      	ldr	r3, [pc, #444]	@ (8013070 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012eb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012eb6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8012eba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012ebe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8012ec2:	4a6b      	ldr	r2, [pc, #428]	@ (8013070 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012ec4:	430b      	orrs	r3, r1
 8012ec6:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8012ec8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ed0:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8012ed4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8012ed6:	2300      	movs	r3, #0
 8012ed8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8012eda:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8012ede:	460b      	mov	r3, r1
 8012ee0:	4313      	orrs	r3, r2
 8012ee2:	d03e      	beq.n	8012f62 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8012ee4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012ee8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8012eec:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8012ef0:	d022      	beq.n	8012f38 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8012ef2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8012ef6:	d81b      	bhi.n	8012f30 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8012ef8:	2b00      	cmp	r3, #0
 8012efa:	d003      	beq.n	8012f04 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8012efc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8012f00:	d00b      	beq.n	8012f1a <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8012f02:	e015      	b.n	8012f30 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8012f04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012f08:	3308      	adds	r3, #8
 8012f0a:	2100      	movs	r1, #0
 8012f0c:	4618      	mov	r0, r3
 8012f0e:	f001 fb45 	bl	801459c <RCCEx_PLL2_Config>
 8012f12:	4603      	mov	r3, r0
 8012f14:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8012f18:	e00f      	b.n	8012f3a <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8012f1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012f1e:	3328      	adds	r3, #40	@ 0x28
 8012f20:	2102      	movs	r1, #2
 8012f22:	4618      	mov	r0, r3
 8012f24:	f001 fbec 	bl	8014700 <RCCEx_PLL3_Config>
 8012f28:	4603      	mov	r3, r0
 8012f2a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8012f2e:	e004      	b.n	8012f3a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8012f30:	2301      	movs	r3, #1
 8012f32:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8012f36:	e000      	b.n	8012f3a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8012f38:	bf00      	nop
    }

    if (ret == HAL_OK)
 8012f3a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012f3e:	2b00      	cmp	r3, #0
 8012f40:	d10b      	bne.n	8012f5a <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8012f42:	4b4b      	ldr	r3, [pc, #300]	@ (8013070 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012f44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012f46:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8012f4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012f4e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8012f52:	4a47      	ldr	r2, [pc, #284]	@ (8013070 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012f54:	430b      	orrs	r3, r1
 8012f56:	6593      	str	r3, [r2, #88]	@ 0x58
 8012f58:	e003      	b.n	8012f62 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012f5a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012f5e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8012f62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f6a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8012f6e:	673b      	str	r3, [r7, #112]	@ 0x70
 8012f70:	2300      	movs	r3, #0
 8012f72:	677b      	str	r3, [r7, #116]	@ 0x74
 8012f74:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8012f78:	460b      	mov	r3, r1
 8012f7a:	4313      	orrs	r3, r2
 8012f7c:	d03b      	beq.n	8012ff6 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8012f7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012f82:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8012f86:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8012f8a:	d01f      	beq.n	8012fcc <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8012f8c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8012f90:	d818      	bhi.n	8012fc4 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8012f92:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8012f96:	d003      	beq.n	8012fa0 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8012f98:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8012f9c:	d007      	beq.n	8012fae <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8012f9e:	e011      	b.n	8012fc4 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8012fa0:	4b33      	ldr	r3, [pc, #204]	@ (8013070 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012fa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012fa4:	4a32      	ldr	r2, [pc, #200]	@ (8013070 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012fa6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8012faa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8012fac:	e00f      	b.n	8012fce <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8012fae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012fb2:	3328      	adds	r3, #40	@ 0x28
 8012fb4:	2101      	movs	r1, #1
 8012fb6:	4618      	mov	r0, r3
 8012fb8:	f001 fba2 	bl	8014700 <RCCEx_PLL3_Config>
 8012fbc:	4603      	mov	r3, r0
 8012fbe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8012fc2:	e004      	b.n	8012fce <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8012fc4:	2301      	movs	r3, #1
 8012fc6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8012fca:	e000      	b.n	8012fce <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8012fcc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8012fce:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012fd2:	2b00      	cmp	r3, #0
 8012fd4:	d10b      	bne.n	8012fee <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8012fd6:	4b26      	ldr	r3, [pc, #152]	@ (8013070 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012fd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012fda:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8012fde:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012fe2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8012fe6:	4a22      	ldr	r2, [pc, #136]	@ (8013070 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012fe8:	430b      	orrs	r3, r1
 8012fea:	6553      	str	r3, [r2, #84]	@ 0x54
 8012fec:	e003      	b.n	8012ff6 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012fee:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012ff2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8012ff6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ffe:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8013002:	66bb      	str	r3, [r7, #104]	@ 0x68
 8013004:	2300      	movs	r3, #0
 8013006:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8013008:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 801300c:	460b      	mov	r3, r1
 801300e:	4313      	orrs	r3, r2
 8013010:	d034      	beq.n	801307c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8013012:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8013016:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8013018:	2b00      	cmp	r3, #0
 801301a:	d003      	beq.n	8013024 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 801301c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8013020:	d007      	beq.n	8013032 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8013022:	e011      	b.n	8013048 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8013024:	4b12      	ldr	r3, [pc, #72]	@ (8013070 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8013026:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013028:	4a11      	ldr	r2, [pc, #68]	@ (8013070 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 801302a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801302e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8013030:	e00e      	b.n	8013050 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8013032:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8013036:	3308      	adds	r3, #8
 8013038:	2102      	movs	r1, #2
 801303a:	4618      	mov	r0, r3
 801303c:	f001 faae 	bl	801459c <RCCEx_PLL2_Config>
 8013040:	4603      	mov	r3, r0
 8013042:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8013046:	e003      	b.n	8013050 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8013048:	2301      	movs	r3, #1
 801304a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 801304e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8013050:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8013054:	2b00      	cmp	r3, #0
 8013056:	d10d      	bne.n	8013074 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8013058:	4b05      	ldr	r3, [pc, #20]	@ (8013070 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 801305a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801305c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8013060:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8013064:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8013066:	4a02      	ldr	r2, [pc, #8]	@ (8013070 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8013068:	430b      	orrs	r3, r1
 801306a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 801306c:	e006      	b.n	801307c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 801306e:	bf00      	nop
 8013070:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8013074:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8013078:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 801307c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8013080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013084:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8013088:	663b      	str	r3, [r7, #96]	@ 0x60
 801308a:	2300      	movs	r3, #0
 801308c:	667b      	str	r3, [r7, #100]	@ 0x64
 801308e:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8013092:	460b      	mov	r3, r1
 8013094:	4313      	orrs	r3, r2
 8013096:	d00c      	beq.n	80130b2 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8013098:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801309c:	3328      	adds	r3, #40	@ 0x28
 801309e:	2102      	movs	r1, #2
 80130a0:	4618      	mov	r0, r3
 80130a2:	f001 fb2d 	bl	8014700 <RCCEx_PLL3_Config>
 80130a6:	4603      	mov	r3, r0
 80130a8:	2b00      	cmp	r3, #0
 80130aa:	d002      	beq.n	80130b2 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 80130ac:	2301      	movs	r3, #1
 80130ae:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80130b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80130b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80130ba:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80130be:	65bb      	str	r3, [r7, #88]	@ 0x58
 80130c0:	2300      	movs	r3, #0
 80130c2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80130c4:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80130c8:	460b      	mov	r3, r1
 80130ca:	4313      	orrs	r3, r2
 80130cc:	d036      	beq.n	801313c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 80130ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80130d2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80130d4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80130d8:	d018      	beq.n	801310c <HAL_RCCEx_PeriphCLKConfig+0x1074>
 80130da:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80130de:	d811      	bhi.n	8013104 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 80130e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80130e4:	d014      	beq.n	8013110 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 80130e6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80130ea:	d80b      	bhi.n	8013104 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 80130ec:	2b00      	cmp	r3, #0
 80130ee:	d011      	beq.n	8013114 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 80130f0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80130f4:	d106      	bne.n	8013104 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80130f6:	4bb7      	ldr	r3, [pc, #732]	@ (80133d4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80130f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80130fa:	4ab6      	ldr	r2, [pc, #728]	@ (80133d4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80130fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8013100:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8013102:	e008      	b.n	8013116 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8013104:	2301      	movs	r3, #1
 8013106:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 801310a:	e004      	b.n	8013116 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 801310c:	bf00      	nop
 801310e:	e002      	b.n	8013116 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8013110:	bf00      	nop
 8013112:	e000      	b.n	8013116 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8013114:	bf00      	nop
    }

    if (ret == HAL_OK)
 8013116:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801311a:	2b00      	cmp	r3, #0
 801311c:	d10a      	bne.n	8013134 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 801311e:	4bad      	ldr	r3, [pc, #692]	@ (80133d4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8013120:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013122:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8013126:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801312a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801312c:	4aa9      	ldr	r2, [pc, #676]	@ (80133d4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 801312e:	430b      	orrs	r3, r1
 8013130:	6553      	str	r3, [r2, #84]	@ 0x54
 8013132:	e003      	b.n	801313c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8013134:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8013138:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 801313c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8013140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013144:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8013148:	653b      	str	r3, [r7, #80]	@ 0x50
 801314a:	2300      	movs	r3, #0
 801314c:	657b      	str	r3, [r7, #84]	@ 0x54
 801314e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8013152:	460b      	mov	r3, r1
 8013154:	4313      	orrs	r3, r2
 8013156:	d009      	beq.n	801316c <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8013158:	4b9e      	ldr	r3, [pc, #632]	@ (80133d4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 801315a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801315c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8013160:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8013164:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013166:	4a9b      	ldr	r2, [pc, #620]	@ (80133d4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8013168:	430b      	orrs	r3, r1
 801316a:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 801316c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8013170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013174:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8013178:	64bb      	str	r3, [r7, #72]	@ 0x48
 801317a:	2300      	movs	r3, #0
 801317c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801317e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8013182:	460b      	mov	r3, r1
 8013184:	4313      	orrs	r3, r2
 8013186:	d009      	beq.n	801319c <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8013188:	4b92      	ldr	r3, [pc, #584]	@ (80133d4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 801318a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801318c:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8013190:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8013194:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8013196:	4a8f      	ldr	r2, [pc, #572]	@ (80133d4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8013198:	430b      	orrs	r3, r1
 801319a:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 801319c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80131a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80131a4:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80131a8:	643b      	str	r3, [r7, #64]	@ 0x40
 80131aa:	2300      	movs	r3, #0
 80131ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80131ae:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80131b2:	460b      	mov	r3, r1
 80131b4:	4313      	orrs	r3, r2
 80131b6:	d00e      	beq.n	80131d6 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80131b8:	4b86      	ldr	r3, [pc, #536]	@ (80133d4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80131ba:	691b      	ldr	r3, [r3, #16]
 80131bc:	4a85      	ldr	r2, [pc, #532]	@ (80133d4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80131be:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80131c2:	6113      	str	r3, [r2, #16]
 80131c4:	4b83      	ldr	r3, [pc, #524]	@ (80133d4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80131c6:	6919      	ldr	r1, [r3, #16]
 80131c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80131cc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80131d0:	4a80      	ldr	r2, [pc, #512]	@ (80133d4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80131d2:	430b      	orrs	r3, r1
 80131d4:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80131d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80131da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80131de:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80131e2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80131e4:	2300      	movs	r3, #0
 80131e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80131e8:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80131ec:	460b      	mov	r3, r1
 80131ee:	4313      	orrs	r3, r2
 80131f0:	d009      	beq.n	8013206 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80131f2:	4b78      	ldr	r3, [pc, #480]	@ (80133d4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80131f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80131f6:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80131fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80131fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013200:	4a74      	ldr	r2, [pc, #464]	@ (80133d4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8013202:	430b      	orrs	r3, r1
 8013204:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8013206:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801320a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801320e:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8013212:	633b      	str	r3, [r7, #48]	@ 0x30
 8013214:	2300      	movs	r3, #0
 8013216:	637b      	str	r3, [r7, #52]	@ 0x34
 8013218:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 801321c:	460b      	mov	r3, r1
 801321e:	4313      	orrs	r3, r2
 8013220:	d00a      	beq.n	8013238 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8013222:	4b6c      	ldr	r3, [pc, #432]	@ (80133d4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8013224:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013226:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 801322a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801322e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8013232:	4a68      	ldr	r2, [pc, #416]	@ (80133d4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8013234:	430b      	orrs	r3, r1
 8013236:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8013238:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801323c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013240:	2100      	movs	r1, #0
 8013242:	62b9      	str	r1, [r7, #40]	@ 0x28
 8013244:	f003 0301 	and.w	r3, r3, #1
 8013248:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801324a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 801324e:	460b      	mov	r3, r1
 8013250:	4313      	orrs	r3, r2
 8013252:	d011      	beq.n	8013278 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8013254:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8013258:	3308      	adds	r3, #8
 801325a:	2100      	movs	r1, #0
 801325c:	4618      	mov	r0, r3
 801325e:	f001 f99d 	bl	801459c <RCCEx_PLL2_Config>
 8013262:	4603      	mov	r3, r0
 8013264:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8013268:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801326c:	2b00      	cmp	r3, #0
 801326e:	d003      	beq.n	8013278 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8013270:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8013274:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8013278:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801327c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013280:	2100      	movs	r1, #0
 8013282:	6239      	str	r1, [r7, #32]
 8013284:	f003 0302 	and.w	r3, r3, #2
 8013288:	627b      	str	r3, [r7, #36]	@ 0x24
 801328a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 801328e:	460b      	mov	r3, r1
 8013290:	4313      	orrs	r3, r2
 8013292:	d011      	beq.n	80132b8 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8013294:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8013298:	3308      	adds	r3, #8
 801329a:	2101      	movs	r1, #1
 801329c:	4618      	mov	r0, r3
 801329e:	f001 f97d 	bl	801459c <RCCEx_PLL2_Config>
 80132a2:	4603      	mov	r3, r0
 80132a4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80132a8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80132ac:	2b00      	cmp	r3, #0
 80132ae:	d003      	beq.n	80132b8 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80132b0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80132b4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80132b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80132bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132c0:	2100      	movs	r1, #0
 80132c2:	61b9      	str	r1, [r7, #24]
 80132c4:	f003 0304 	and.w	r3, r3, #4
 80132c8:	61fb      	str	r3, [r7, #28]
 80132ca:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80132ce:	460b      	mov	r3, r1
 80132d0:	4313      	orrs	r3, r2
 80132d2:	d011      	beq.n	80132f8 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80132d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80132d8:	3308      	adds	r3, #8
 80132da:	2102      	movs	r1, #2
 80132dc:	4618      	mov	r0, r3
 80132de:	f001 f95d 	bl	801459c <RCCEx_PLL2_Config>
 80132e2:	4603      	mov	r3, r0
 80132e4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80132e8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80132ec:	2b00      	cmp	r3, #0
 80132ee:	d003      	beq.n	80132f8 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80132f0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80132f4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80132f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80132fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013300:	2100      	movs	r1, #0
 8013302:	6139      	str	r1, [r7, #16]
 8013304:	f003 0308 	and.w	r3, r3, #8
 8013308:	617b      	str	r3, [r7, #20]
 801330a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 801330e:	460b      	mov	r3, r1
 8013310:	4313      	orrs	r3, r2
 8013312:	d011      	beq.n	8013338 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8013314:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8013318:	3328      	adds	r3, #40	@ 0x28
 801331a:	2100      	movs	r1, #0
 801331c:	4618      	mov	r0, r3
 801331e:	f001 f9ef 	bl	8014700 <RCCEx_PLL3_Config>
 8013322:	4603      	mov	r3, r0
 8013324:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8013328:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801332c:	2b00      	cmp	r3, #0
 801332e:	d003      	beq.n	8013338 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8013330:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8013334:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8013338:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801333c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013340:	2100      	movs	r1, #0
 8013342:	60b9      	str	r1, [r7, #8]
 8013344:	f003 0310 	and.w	r3, r3, #16
 8013348:	60fb      	str	r3, [r7, #12]
 801334a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 801334e:	460b      	mov	r3, r1
 8013350:	4313      	orrs	r3, r2
 8013352:	d011      	beq.n	8013378 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8013354:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8013358:	3328      	adds	r3, #40	@ 0x28
 801335a:	2101      	movs	r1, #1
 801335c:	4618      	mov	r0, r3
 801335e:	f001 f9cf 	bl	8014700 <RCCEx_PLL3_Config>
 8013362:	4603      	mov	r3, r0
 8013364:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8013368:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801336c:	2b00      	cmp	r3, #0
 801336e:	d003      	beq.n	8013378 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8013370:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8013374:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8013378:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801337c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013380:	2100      	movs	r1, #0
 8013382:	6039      	str	r1, [r7, #0]
 8013384:	f003 0320 	and.w	r3, r3, #32
 8013388:	607b      	str	r3, [r7, #4]
 801338a:	e9d7 1200 	ldrd	r1, r2, [r7]
 801338e:	460b      	mov	r3, r1
 8013390:	4313      	orrs	r3, r2
 8013392:	d011      	beq.n	80133b8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8013394:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8013398:	3328      	adds	r3, #40	@ 0x28
 801339a:	2102      	movs	r1, #2
 801339c:	4618      	mov	r0, r3
 801339e:	f001 f9af 	bl	8014700 <RCCEx_PLL3_Config>
 80133a2:	4603      	mov	r3, r0
 80133a4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80133a8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80133ac:	2b00      	cmp	r3, #0
 80133ae:	d003      	beq.n	80133b8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80133b0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80133b4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 80133b8:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 80133bc:	2b00      	cmp	r3, #0
 80133be:	d101      	bne.n	80133c4 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 80133c0:	2300      	movs	r3, #0
 80133c2:	e000      	b.n	80133c6 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 80133c4:	2301      	movs	r3, #1
}
 80133c6:	4618      	mov	r0, r3
 80133c8:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 80133cc:	46bd      	mov	sp, r7
 80133ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80133d2:	bf00      	nop
 80133d4:	58024400 	.word	0x58024400

080133d8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80133d8:	b580      	push	{r7, lr}
 80133da:	b090      	sub	sp, #64	@ 0x40
 80133dc:	af00      	add	r7, sp, #0
 80133de:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80133e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80133e6:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 80133ea:	430b      	orrs	r3, r1
 80133ec:	f040 8094 	bne.w	8013518 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 80133f0:	4b9b      	ldr	r3, [pc, #620]	@ (8013660 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80133f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80133f4:	f003 0307 	and.w	r3, r3, #7
 80133f8:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80133fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80133fc:	2b04      	cmp	r3, #4
 80133fe:	f200 8087 	bhi.w	8013510 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8013402:	a201      	add	r2, pc, #4	@ (adr r2, 8013408 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8013404:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013408:	0801341d 	.word	0x0801341d
 801340c:	08013445 	.word	0x08013445
 8013410:	0801346d 	.word	0x0801346d
 8013414:	08013509 	.word	0x08013509
 8013418:	08013495 	.word	0x08013495
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 801341c:	4b90      	ldr	r3, [pc, #576]	@ (8013660 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801341e:	681b      	ldr	r3, [r3, #0]
 8013420:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8013424:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8013428:	d108      	bne.n	801343c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 801342a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801342e:	4618      	mov	r0, r3
 8013430:	f000 ff62 	bl	80142f8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8013434:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013436:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013438:	f000 bc93 	b.w	8013d62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801343c:	2300      	movs	r3, #0
 801343e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013440:	f000 bc8f 	b.w	8013d62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8013444:	4b86      	ldr	r3, [pc, #536]	@ (8013660 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8013446:	681b      	ldr	r3, [r3, #0]
 8013448:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801344c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8013450:	d108      	bne.n	8013464 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8013452:	f107 0318 	add.w	r3, r7, #24
 8013456:	4618      	mov	r0, r3
 8013458:	f000 fca6 	bl	8013da8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 801345c:	69bb      	ldr	r3, [r7, #24]
 801345e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013460:	f000 bc7f 	b.w	8013d62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013464:	2300      	movs	r3, #0
 8013466:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013468:	f000 bc7b 	b.w	8013d62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 801346c:	4b7c      	ldr	r3, [pc, #496]	@ (8013660 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801346e:	681b      	ldr	r3, [r3, #0]
 8013470:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8013474:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8013478:	d108      	bne.n	801348c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801347a:	f107 030c 	add.w	r3, r7, #12
 801347e:	4618      	mov	r0, r3
 8013480:	f000 fde6 	bl	8014050 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8013484:	68fb      	ldr	r3, [r7, #12]
 8013486:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013488:	f000 bc6b 	b.w	8013d62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801348c:	2300      	movs	r3, #0
 801348e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013490:	f000 bc67 	b.w	8013d62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8013494:	4b72      	ldr	r3, [pc, #456]	@ (8013660 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8013496:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013498:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 801349c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 801349e:	4b70      	ldr	r3, [pc, #448]	@ (8013660 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80134a0:	681b      	ldr	r3, [r3, #0]
 80134a2:	f003 0304 	and.w	r3, r3, #4
 80134a6:	2b04      	cmp	r3, #4
 80134a8:	d10c      	bne.n	80134c4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80134aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80134ac:	2b00      	cmp	r3, #0
 80134ae:	d109      	bne.n	80134c4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80134b0:	4b6b      	ldr	r3, [pc, #428]	@ (8013660 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80134b2:	681b      	ldr	r3, [r3, #0]
 80134b4:	08db      	lsrs	r3, r3, #3
 80134b6:	f003 0303 	and.w	r3, r3, #3
 80134ba:	4a6a      	ldr	r2, [pc, #424]	@ (8013664 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 80134bc:	fa22 f303 	lsr.w	r3, r2, r3
 80134c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80134c2:	e01f      	b.n	8013504 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80134c4:	4b66      	ldr	r3, [pc, #408]	@ (8013660 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80134c6:	681b      	ldr	r3, [r3, #0]
 80134c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80134cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80134d0:	d106      	bne.n	80134e0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 80134d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80134d4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80134d8:	d102      	bne.n	80134e0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80134da:	4b63      	ldr	r3, [pc, #396]	@ (8013668 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80134dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80134de:	e011      	b.n	8013504 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80134e0:	4b5f      	ldr	r3, [pc, #380]	@ (8013660 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80134e2:	681b      	ldr	r3, [r3, #0]
 80134e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80134e8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80134ec:	d106      	bne.n	80134fc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 80134ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80134f0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80134f4:	d102      	bne.n	80134fc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80134f6:	4b5d      	ldr	r3, [pc, #372]	@ (801366c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80134f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80134fa:	e003      	b.n	8013504 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80134fc:	2300      	movs	r3, #0
 80134fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8013500:	f000 bc2f 	b.w	8013d62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8013504:	f000 bc2d 	b.w	8013d62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8013508:	4b59      	ldr	r3, [pc, #356]	@ (8013670 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 801350a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801350c:	f000 bc29 	b.w	8013d62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8013510:	2300      	movs	r3, #0
 8013512:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013514:	f000 bc25 	b.w	8013d62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8013518:	e9d7 2300 	ldrd	r2, r3, [r7]
 801351c:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8013520:	430b      	orrs	r3, r1
 8013522:	f040 80a7 	bne.w	8013674 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8013526:	4b4e      	ldr	r3, [pc, #312]	@ (8013660 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8013528:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801352a:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 801352e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8013530:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013532:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8013536:	d054      	beq.n	80135e2 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 8013538:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801353a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 801353e:	f200 808b 	bhi.w	8013658 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8013542:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013544:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8013548:	f000 8083 	beq.w	8013652 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 801354c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801354e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8013552:	f200 8081 	bhi.w	8013658 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8013556:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013558:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 801355c:	d02f      	beq.n	80135be <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 801355e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013560:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8013564:	d878      	bhi.n	8013658 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8013566:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013568:	2b00      	cmp	r3, #0
 801356a:	d004      	beq.n	8013576 <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 801356c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801356e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8013572:	d012      	beq.n	801359a <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 8013574:	e070      	b.n	8013658 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8013576:	4b3a      	ldr	r3, [pc, #232]	@ (8013660 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8013578:	681b      	ldr	r3, [r3, #0]
 801357a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801357e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8013582:	d107      	bne.n	8013594 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8013584:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8013588:	4618      	mov	r0, r3
 801358a:	f000 feb5 	bl	80142f8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 801358e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013590:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013592:	e3e6      	b.n	8013d62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013594:	2300      	movs	r3, #0
 8013596:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013598:	e3e3      	b.n	8013d62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801359a:	4b31      	ldr	r3, [pc, #196]	@ (8013660 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801359c:	681b      	ldr	r3, [r3, #0]
 801359e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80135a2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80135a6:	d107      	bne.n	80135b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80135a8:	f107 0318 	add.w	r3, r7, #24
 80135ac:	4618      	mov	r0, r3
 80135ae:	f000 fbfb 	bl	8013da8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80135b2:	69bb      	ldr	r3, [r7, #24]
 80135b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80135b6:	e3d4      	b.n	8013d62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80135b8:	2300      	movs	r3, #0
 80135ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80135bc:	e3d1      	b.n	8013d62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80135be:	4b28      	ldr	r3, [pc, #160]	@ (8013660 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80135c0:	681b      	ldr	r3, [r3, #0]
 80135c2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80135c6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80135ca:	d107      	bne.n	80135dc <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80135cc:	f107 030c 	add.w	r3, r7, #12
 80135d0:	4618      	mov	r0, r3
 80135d2:	f000 fd3d 	bl	8014050 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80135d6:	68fb      	ldr	r3, [r7, #12]
 80135d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80135da:	e3c2      	b.n	8013d62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80135dc:	2300      	movs	r3, #0
 80135de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80135e0:	e3bf      	b.n	8013d62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80135e2:	4b1f      	ldr	r3, [pc, #124]	@ (8013660 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80135e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80135e6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80135ea:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80135ec:	4b1c      	ldr	r3, [pc, #112]	@ (8013660 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80135ee:	681b      	ldr	r3, [r3, #0]
 80135f0:	f003 0304 	and.w	r3, r3, #4
 80135f4:	2b04      	cmp	r3, #4
 80135f6:	d10c      	bne.n	8013612 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 80135f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80135fa:	2b00      	cmp	r3, #0
 80135fc:	d109      	bne.n	8013612 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80135fe:	4b18      	ldr	r3, [pc, #96]	@ (8013660 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8013600:	681b      	ldr	r3, [r3, #0]
 8013602:	08db      	lsrs	r3, r3, #3
 8013604:	f003 0303 	and.w	r3, r3, #3
 8013608:	4a16      	ldr	r2, [pc, #88]	@ (8013664 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 801360a:	fa22 f303 	lsr.w	r3, r2, r3
 801360e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013610:	e01e      	b.n	8013650 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8013612:	4b13      	ldr	r3, [pc, #76]	@ (8013660 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8013614:	681b      	ldr	r3, [r3, #0]
 8013616:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801361a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801361e:	d106      	bne.n	801362e <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 8013620:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013622:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8013626:	d102      	bne.n	801362e <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8013628:	4b0f      	ldr	r3, [pc, #60]	@ (8013668 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 801362a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801362c:	e010      	b.n	8013650 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 801362e:	4b0c      	ldr	r3, [pc, #48]	@ (8013660 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8013630:	681b      	ldr	r3, [r3, #0]
 8013632:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8013636:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801363a:	d106      	bne.n	801364a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 801363c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801363e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8013642:	d102      	bne.n	801364a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8013644:	4b09      	ldr	r3, [pc, #36]	@ (801366c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8013646:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013648:	e002      	b.n	8013650 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 801364a:	2300      	movs	r3, #0
 801364c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 801364e:	e388      	b.n	8013d62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8013650:	e387      	b.n	8013d62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8013652:	4b07      	ldr	r3, [pc, #28]	@ (8013670 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8013654:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013656:	e384      	b.n	8013d62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8013658:	2300      	movs	r3, #0
 801365a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801365c:	e381      	b.n	8013d62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 801365e:	bf00      	nop
 8013660:	58024400 	.word	0x58024400
 8013664:	03d09000 	.word	0x03d09000
 8013668:	003d0900 	.word	0x003d0900
 801366c:	016e3600 	.word	0x016e3600
 8013670:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8013674:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013678:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 801367c:	430b      	orrs	r3, r1
 801367e:	f040 809c 	bne.w	80137ba <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8013682:	4b9e      	ldr	r3, [pc, #632]	@ (80138fc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8013684:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8013686:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 801368a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 801368c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801368e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8013692:	d054      	beq.n	801373e <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 8013694:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013696:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 801369a:	f200 808b 	bhi.w	80137b4 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 801369e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80136a0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80136a4:	f000 8083 	beq.w	80137ae <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 80136a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80136aa:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80136ae:	f200 8081 	bhi.w	80137b4 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 80136b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80136b4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80136b8:	d02f      	beq.n	801371a <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 80136ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80136bc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80136c0:	d878      	bhi.n	80137b4 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 80136c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80136c4:	2b00      	cmp	r3, #0
 80136c6:	d004      	beq.n	80136d2 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 80136c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80136ca:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80136ce:	d012      	beq.n	80136f6 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 80136d0:	e070      	b.n	80137b4 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80136d2:	4b8a      	ldr	r3, [pc, #552]	@ (80138fc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80136d4:	681b      	ldr	r3, [r3, #0]
 80136d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80136da:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80136de:	d107      	bne.n	80136f0 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80136e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80136e4:	4618      	mov	r0, r3
 80136e6:	f000 fe07 	bl	80142f8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80136ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80136ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80136ee:	e338      	b.n	8013d62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80136f0:	2300      	movs	r3, #0
 80136f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80136f4:	e335      	b.n	8013d62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80136f6:	4b81      	ldr	r3, [pc, #516]	@ (80138fc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80136f8:	681b      	ldr	r3, [r3, #0]
 80136fa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80136fe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8013702:	d107      	bne.n	8013714 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8013704:	f107 0318 	add.w	r3, r7, #24
 8013708:	4618      	mov	r0, r3
 801370a:	f000 fb4d 	bl	8013da8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 801370e:	69bb      	ldr	r3, [r7, #24]
 8013710:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013712:	e326      	b.n	8013d62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013714:	2300      	movs	r3, #0
 8013716:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013718:	e323      	b.n	8013d62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 801371a:	4b78      	ldr	r3, [pc, #480]	@ (80138fc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801371c:	681b      	ldr	r3, [r3, #0]
 801371e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8013722:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8013726:	d107      	bne.n	8013738 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8013728:	f107 030c 	add.w	r3, r7, #12
 801372c:	4618      	mov	r0, r3
 801372e:	f000 fc8f 	bl	8014050 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8013732:	68fb      	ldr	r3, [r7, #12]
 8013734:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013736:	e314      	b.n	8013d62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013738:	2300      	movs	r3, #0
 801373a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801373c:	e311      	b.n	8013d62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 801373e:	4b6f      	ldr	r3, [pc, #444]	@ (80138fc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8013740:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013742:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8013746:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8013748:	4b6c      	ldr	r3, [pc, #432]	@ (80138fc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801374a:	681b      	ldr	r3, [r3, #0]
 801374c:	f003 0304 	and.w	r3, r3, #4
 8013750:	2b04      	cmp	r3, #4
 8013752:	d10c      	bne.n	801376e <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 8013754:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013756:	2b00      	cmp	r3, #0
 8013758:	d109      	bne.n	801376e <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801375a:	4b68      	ldr	r3, [pc, #416]	@ (80138fc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801375c:	681b      	ldr	r3, [r3, #0]
 801375e:	08db      	lsrs	r3, r3, #3
 8013760:	f003 0303 	and.w	r3, r3, #3
 8013764:	4a66      	ldr	r2, [pc, #408]	@ (8013900 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 8013766:	fa22 f303 	lsr.w	r3, r2, r3
 801376a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801376c:	e01e      	b.n	80137ac <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 801376e:	4b63      	ldr	r3, [pc, #396]	@ (80138fc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8013770:	681b      	ldr	r3, [r3, #0]
 8013772:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8013776:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801377a:	d106      	bne.n	801378a <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 801377c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801377e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8013782:	d102      	bne.n	801378a <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8013784:	4b5f      	ldr	r3, [pc, #380]	@ (8013904 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8013786:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013788:	e010      	b.n	80137ac <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 801378a:	4b5c      	ldr	r3, [pc, #368]	@ (80138fc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801378c:	681b      	ldr	r3, [r3, #0]
 801378e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8013792:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8013796:	d106      	bne.n	80137a6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 8013798:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801379a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801379e:	d102      	bne.n	80137a6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80137a0:	4b59      	ldr	r3, [pc, #356]	@ (8013908 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80137a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80137a4:	e002      	b.n	80137ac <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80137a6:	2300      	movs	r3, #0
 80137a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80137aa:	e2da      	b.n	8013d62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80137ac:	e2d9      	b.n	8013d62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80137ae:	4b57      	ldr	r3, [pc, #348]	@ (801390c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80137b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80137b2:	e2d6      	b.n	8013d62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 80137b4:	2300      	movs	r3, #0
 80137b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80137b8:	e2d3      	b.n	8013d62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80137ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 80137be:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 80137c2:	430b      	orrs	r3, r1
 80137c4:	f040 80a7 	bne.w	8013916 <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 80137c8:	4b4c      	ldr	r3, [pc, #304]	@ (80138fc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80137ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80137cc:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80137d0:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80137d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80137d4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80137d8:	d055      	beq.n	8013886 <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 80137da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80137dc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80137e0:	f200 8096 	bhi.w	8013910 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 80137e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80137e6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80137ea:	f000 8084 	beq.w	80138f6 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 80137ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80137f0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80137f4:	f200 808c 	bhi.w	8013910 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 80137f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80137fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80137fe:	d030      	beq.n	8013862 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8013800:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013802:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8013806:	f200 8083 	bhi.w	8013910 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 801380a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801380c:	2b00      	cmp	r3, #0
 801380e:	d004      	beq.n	801381a <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 8013810:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013812:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8013816:	d012      	beq.n	801383e <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 8013818:	e07a      	b.n	8013910 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 801381a:	4b38      	ldr	r3, [pc, #224]	@ (80138fc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801381c:	681b      	ldr	r3, [r3, #0]
 801381e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8013822:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8013826:	d107      	bne.n	8013838 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8013828:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801382c:	4618      	mov	r0, r3
 801382e:	f000 fd63 	bl	80142f8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8013832:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013834:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013836:	e294      	b.n	8013d62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013838:	2300      	movs	r3, #0
 801383a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801383c:	e291      	b.n	8013d62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801383e:	4b2f      	ldr	r3, [pc, #188]	@ (80138fc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8013840:	681b      	ldr	r3, [r3, #0]
 8013842:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8013846:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 801384a:	d107      	bne.n	801385c <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801384c:	f107 0318 	add.w	r3, r7, #24
 8013850:	4618      	mov	r0, r3
 8013852:	f000 faa9 	bl	8013da8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8013856:	69bb      	ldr	r3, [r7, #24]
 8013858:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801385a:	e282      	b.n	8013d62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801385c:	2300      	movs	r3, #0
 801385e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013860:	e27f      	b.n	8013d62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8013862:	4b26      	ldr	r3, [pc, #152]	@ (80138fc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8013864:	681b      	ldr	r3, [r3, #0]
 8013866:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801386a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801386e:	d107      	bne.n	8013880 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8013870:	f107 030c 	add.w	r3, r7, #12
 8013874:	4618      	mov	r0, r3
 8013876:	f000 fbeb 	bl	8014050 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 801387a:	68fb      	ldr	r3, [r7, #12]
 801387c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801387e:	e270      	b.n	8013d62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013880:	2300      	movs	r3, #0
 8013882:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013884:	e26d      	b.n	8013d62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8013886:	4b1d      	ldr	r3, [pc, #116]	@ (80138fc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8013888:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801388a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 801388e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8013890:	4b1a      	ldr	r3, [pc, #104]	@ (80138fc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8013892:	681b      	ldr	r3, [r3, #0]
 8013894:	f003 0304 	and.w	r3, r3, #4
 8013898:	2b04      	cmp	r3, #4
 801389a:	d10c      	bne.n	80138b6 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 801389c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801389e:	2b00      	cmp	r3, #0
 80138a0:	d109      	bne.n	80138b6 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80138a2:	4b16      	ldr	r3, [pc, #88]	@ (80138fc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80138a4:	681b      	ldr	r3, [r3, #0]
 80138a6:	08db      	lsrs	r3, r3, #3
 80138a8:	f003 0303 	and.w	r3, r3, #3
 80138ac:	4a14      	ldr	r2, [pc, #80]	@ (8013900 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 80138ae:	fa22 f303 	lsr.w	r3, r2, r3
 80138b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80138b4:	e01e      	b.n	80138f4 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80138b6:	4b11      	ldr	r3, [pc, #68]	@ (80138fc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80138b8:	681b      	ldr	r3, [r3, #0]
 80138ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80138be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80138c2:	d106      	bne.n	80138d2 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 80138c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80138c6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80138ca:	d102      	bne.n	80138d2 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80138cc:	4b0d      	ldr	r3, [pc, #52]	@ (8013904 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 80138ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80138d0:	e010      	b.n	80138f4 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80138d2:	4b0a      	ldr	r3, [pc, #40]	@ (80138fc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80138d4:	681b      	ldr	r3, [r3, #0]
 80138d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80138da:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80138de:	d106      	bne.n	80138ee <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 80138e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80138e2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80138e6:	d102      	bne.n	80138ee <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80138e8:	4b07      	ldr	r3, [pc, #28]	@ (8013908 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80138ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80138ec:	e002      	b.n	80138f4 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80138ee:	2300      	movs	r3, #0
 80138f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80138f2:	e236      	b.n	8013d62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80138f4:	e235      	b.n	8013d62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80138f6:	4b05      	ldr	r3, [pc, #20]	@ (801390c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80138f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80138fa:	e232      	b.n	8013d62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80138fc:	58024400 	.word	0x58024400
 8013900:	03d09000 	.word	0x03d09000
 8013904:	003d0900 	.word	0x003d0900
 8013908:	016e3600 	.word	0x016e3600
 801390c:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 8013910:	2300      	movs	r3, #0
 8013912:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013914:	e225      	b.n	8013d62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8013916:	e9d7 2300 	ldrd	r2, r3, [r7]
 801391a:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 801391e:	430b      	orrs	r3, r1
 8013920:	f040 8085 	bne.w	8013a2e <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8013924:	4b9c      	ldr	r3, [pc, #624]	@ (8013b98 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8013926:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8013928:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 801392c:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 801392e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013930:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8013934:	d06b      	beq.n	8013a0e <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 8013936:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013938:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 801393c:	d874      	bhi.n	8013a28 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 801393e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013940:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8013944:	d056      	beq.n	80139f4 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 8013946:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013948:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 801394c:	d86c      	bhi.n	8013a28 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 801394e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013950:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8013954:	d03b      	beq.n	80139ce <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 8013956:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013958:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 801395c:	d864      	bhi.n	8013a28 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 801395e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013960:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8013964:	d021      	beq.n	80139aa <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 8013966:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013968:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801396c:	d85c      	bhi.n	8013a28 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 801396e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013970:	2b00      	cmp	r3, #0
 8013972:	d004      	beq.n	801397e <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 8013974:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013976:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801397a:	d004      	beq.n	8013986 <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 801397c:	e054      	b.n	8013a28 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 801397e:	f7fe fb5f 	bl	8012040 <HAL_RCC_GetPCLK1Freq>
 8013982:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8013984:	e1ed      	b.n	8013d62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8013986:	4b84      	ldr	r3, [pc, #528]	@ (8013b98 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8013988:	681b      	ldr	r3, [r3, #0]
 801398a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801398e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8013992:	d107      	bne.n	80139a4 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8013994:	f107 0318 	add.w	r3, r7, #24
 8013998:	4618      	mov	r0, r3
 801399a:	f000 fa05 	bl	8013da8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 801399e:	69fb      	ldr	r3, [r7, #28]
 80139a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80139a2:	e1de      	b.n	8013d62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80139a4:	2300      	movs	r3, #0
 80139a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80139a8:	e1db      	b.n	8013d62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80139aa:	4b7b      	ldr	r3, [pc, #492]	@ (8013b98 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80139ac:	681b      	ldr	r3, [r3, #0]
 80139ae:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80139b2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80139b6:	d107      	bne.n	80139c8 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80139b8:	f107 030c 	add.w	r3, r7, #12
 80139bc:	4618      	mov	r0, r3
 80139be:	f000 fb47 	bl	8014050 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80139c2:	693b      	ldr	r3, [r7, #16]
 80139c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80139c6:	e1cc      	b.n	8013d62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80139c8:	2300      	movs	r3, #0
 80139ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80139cc:	e1c9      	b.n	8013d62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80139ce:	4b72      	ldr	r3, [pc, #456]	@ (8013b98 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80139d0:	681b      	ldr	r3, [r3, #0]
 80139d2:	f003 0304 	and.w	r3, r3, #4
 80139d6:	2b04      	cmp	r3, #4
 80139d8:	d109      	bne.n	80139ee <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80139da:	4b6f      	ldr	r3, [pc, #444]	@ (8013b98 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80139dc:	681b      	ldr	r3, [r3, #0]
 80139de:	08db      	lsrs	r3, r3, #3
 80139e0:	f003 0303 	and.w	r3, r3, #3
 80139e4:	4a6d      	ldr	r2, [pc, #436]	@ (8013b9c <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 80139e6:	fa22 f303 	lsr.w	r3, r2, r3
 80139ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80139ec:	e1b9      	b.n	8013d62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80139ee:	2300      	movs	r3, #0
 80139f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80139f2:	e1b6      	b.n	8013d62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80139f4:	4b68      	ldr	r3, [pc, #416]	@ (8013b98 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80139f6:	681b      	ldr	r3, [r3, #0]
 80139f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80139fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8013a00:	d102      	bne.n	8013a08 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 8013a02:	4b67      	ldr	r3, [pc, #412]	@ (8013ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 8013a04:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013a06:	e1ac      	b.n	8013d62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013a08:	2300      	movs	r3, #0
 8013a0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013a0c:	e1a9      	b.n	8013d62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8013a0e:	4b62      	ldr	r3, [pc, #392]	@ (8013b98 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8013a10:	681b      	ldr	r3, [r3, #0]
 8013a12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8013a16:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8013a1a:	d102      	bne.n	8013a22 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 8013a1c:	4b61      	ldr	r3, [pc, #388]	@ (8013ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8013a1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013a20:	e19f      	b.n	8013d62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013a22:	2300      	movs	r3, #0
 8013a24:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013a26:	e19c      	b.n	8013d62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8013a28:	2300      	movs	r3, #0
 8013a2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013a2c:	e199      	b.n	8013d62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8013a2e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013a32:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8013a36:	430b      	orrs	r3, r1
 8013a38:	d173      	bne.n	8013b22 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8013a3a:	4b57      	ldr	r3, [pc, #348]	@ (8013b98 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8013a3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8013a3e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8013a42:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8013a44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013a46:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8013a4a:	d02f      	beq.n	8013aac <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 8013a4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013a4e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8013a52:	d863      	bhi.n	8013b1c <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 8013a54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013a56:	2b00      	cmp	r3, #0
 8013a58:	d004      	beq.n	8013a64 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 8013a5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013a5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8013a60:	d012      	beq.n	8013a88 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 8013a62:	e05b      	b.n	8013b1c <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8013a64:	4b4c      	ldr	r3, [pc, #304]	@ (8013b98 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8013a66:	681b      	ldr	r3, [r3, #0]
 8013a68:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8013a6c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8013a70:	d107      	bne.n	8013a82 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8013a72:	f107 0318 	add.w	r3, r7, #24
 8013a76:	4618      	mov	r0, r3
 8013a78:	f000 f996 	bl	8013da8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8013a7c:	69bb      	ldr	r3, [r7, #24]
 8013a7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013a80:	e16f      	b.n	8013d62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013a82:	2300      	movs	r3, #0
 8013a84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013a86:	e16c      	b.n	8013d62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8013a88:	4b43      	ldr	r3, [pc, #268]	@ (8013b98 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8013a8a:	681b      	ldr	r3, [r3, #0]
 8013a8c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8013a90:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8013a94:	d107      	bne.n	8013aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8013a96:	f107 030c 	add.w	r3, r7, #12
 8013a9a:	4618      	mov	r0, r3
 8013a9c:	f000 fad8 	bl	8014050 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8013aa0:	697b      	ldr	r3, [r7, #20]
 8013aa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013aa4:	e15d      	b.n	8013d62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013aa6:	2300      	movs	r3, #0
 8013aa8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013aaa:	e15a      	b.n	8013d62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8013aac:	4b3a      	ldr	r3, [pc, #232]	@ (8013b98 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8013aae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013ab0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8013ab4:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8013ab6:	4b38      	ldr	r3, [pc, #224]	@ (8013b98 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8013ab8:	681b      	ldr	r3, [r3, #0]
 8013aba:	f003 0304 	and.w	r3, r3, #4
 8013abe:	2b04      	cmp	r3, #4
 8013ac0:	d10c      	bne.n	8013adc <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8013ac2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013ac4:	2b00      	cmp	r3, #0
 8013ac6:	d109      	bne.n	8013adc <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8013ac8:	4b33      	ldr	r3, [pc, #204]	@ (8013b98 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8013aca:	681b      	ldr	r3, [r3, #0]
 8013acc:	08db      	lsrs	r3, r3, #3
 8013ace:	f003 0303 	and.w	r3, r3, #3
 8013ad2:	4a32      	ldr	r2, [pc, #200]	@ (8013b9c <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 8013ad4:	fa22 f303 	lsr.w	r3, r2, r3
 8013ad8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013ada:	e01e      	b.n	8013b1a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8013adc:	4b2e      	ldr	r3, [pc, #184]	@ (8013b98 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8013ade:	681b      	ldr	r3, [r3, #0]
 8013ae0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8013ae4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8013ae8:	d106      	bne.n	8013af8 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 8013aea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013aec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8013af0:	d102      	bne.n	8013af8 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8013af2:	4b2b      	ldr	r3, [pc, #172]	@ (8013ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 8013af4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013af6:	e010      	b.n	8013b1a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8013af8:	4b27      	ldr	r3, [pc, #156]	@ (8013b98 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8013afa:	681b      	ldr	r3, [r3, #0]
 8013afc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8013b00:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8013b04:	d106      	bne.n	8013b14 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 8013b06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013b08:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8013b0c:	d102      	bne.n	8013b14 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8013b0e:	4b25      	ldr	r3, [pc, #148]	@ (8013ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8013b10:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013b12:	e002      	b.n	8013b1a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8013b14:	2300      	movs	r3, #0
 8013b16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8013b18:	e123      	b.n	8013d62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8013b1a:	e122      	b.n	8013d62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8013b1c:	2300      	movs	r3, #0
 8013b1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013b20:	e11f      	b.n	8013d62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8013b22:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013b26:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8013b2a:	430b      	orrs	r3, r1
 8013b2c:	d13c      	bne.n	8013ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8013b2e:	4b1a      	ldr	r3, [pc, #104]	@ (8013b98 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8013b30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013b32:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8013b36:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8013b38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013b3a:	2b00      	cmp	r3, #0
 8013b3c:	d004      	beq.n	8013b48 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 8013b3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013b40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8013b44:	d012      	beq.n	8013b6c <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 8013b46:	e023      	b.n	8013b90 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8013b48:	4b13      	ldr	r3, [pc, #76]	@ (8013b98 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8013b4a:	681b      	ldr	r3, [r3, #0]
 8013b4c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8013b50:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8013b54:	d107      	bne.n	8013b66 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8013b56:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8013b5a:	4618      	mov	r0, r3
 8013b5c:	f000 fbcc 	bl	80142f8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8013b60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013b62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013b64:	e0fd      	b.n	8013d62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013b66:	2300      	movs	r3, #0
 8013b68:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013b6a:	e0fa      	b.n	8013d62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8013b6c:	4b0a      	ldr	r3, [pc, #40]	@ (8013b98 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8013b6e:	681b      	ldr	r3, [r3, #0]
 8013b70:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8013b74:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8013b78:	d107      	bne.n	8013b8a <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8013b7a:	f107 0318 	add.w	r3, r7, #24
 8013b7e:	4618      	mov	r0, r3
 8013b80:	f000 f912 	bl	8013da8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8013b84:	6a3b      	ldr	r3, [r7, #32]
 8013b86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013b88:	e0eb      	b.n	8013d62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013b8a:	2300      	movs	r3, #0
 8013b8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013b8e:	e0e8      	b.n	8013d62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8013b90:	2300      	movs	r3, #0
 8013b92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013b94:	e0e5      	b.n	8013d62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8013b96:	bf00      	nop
 8013b98:	58024400 	.word	0x58024400
 8013b9c:	03d09000 	.word	0x03d09000
 8013ba0:	003d0900 	.word	0x003d0900
 8013ba4:	016e3600 	.word	0x016e3600
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8013ba8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013bac:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8013bb0:	430b      	orrs	r3, r1
 8013bb2:	f040 8085 	bne.w	8013cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8013bb6:	4b6d      	ldr	r3, [pc, #436]	@ (8013d6c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8013bb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8013bba:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8013bbe:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8013bc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013bc2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8013bc6:	d06b      	beq.n	8013ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 8013bc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013bca:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8013bce:	d874      	bhi.n	8013cba <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8013bd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013bd2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8013bd6:	d056      	beq.n	8013c86 <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 8013bd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013bda:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8013bde:	d86c      	bhi.n	8013cba <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8013be0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013be2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8013be6:	d03b      	beq.n	8013c60 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 8013be8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013bea:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8013bee:	d864      	bhi.n	8013cba <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8013bf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013bf2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8013bf6:	d021      	beq.n	8013c3c <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 8013bf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013bfa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8013bfe:	d85c      	bhi.n	8013cba <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8013c00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013c02:	2b00      	cmp	r3, #0
 8013c04:	d004      	beq.n	8013c10 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 8013c06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013c08:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8013c0c:	d004      	beq.n	8013c18 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 8013c0e:	e054      	b.n	8013cba <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8013c10:	f000 f8b4 	bl	8013d7c <HAL_RCCEx_GetD3PCLK1Freq>
 8013c14:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8013c16:	e0a4      	b.n	8013d62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8013c18:	4b54      	ldr	r3, [pc, #336]	@ (8013d6c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8013c1a:	681b      	ldr	r3, [r3, #0]
 8013c1c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8013c20:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8013c24:	d107      	bne.n	8013c36 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8013c26:	f107 0318 	add.w	r3, r7, #24
 8013c2a:	4618      	mov	r0, r3
 8013c2c:	f000 f8bc 	bl	8013da8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8013c30:	69fb      	ldr	r3, [r7, #28]
 8013c32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013c34:	e095      	b.n	8013d62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013c36:	2300      	movs	r3, #0
 8013c38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013c3a:	e092      	b.n	8013d62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8013c3c:	4b4b      	ldr	r3, [pc, #300]	@ (8013d6c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8013c3e:	681b      	ldr	r3, [r3, #0]
 8013c40:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8013c44:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8013c48:	d107      	bne.n	8013c5a <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8013c4a:	f107 030c 	add.w	r3, r7, #12
 8013c4e:	4618      	mov	r0, r3
 8013c50:	f000 f9fe 	bl	8014050 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8013c54:	693b      	ldr	r3, [r7, #16]
 8013c56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013c58:	e083      	b.n	8013d62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013c5a:	2300      	movs	r3, #0
 8013c5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013c5e:	e080      	b.n	8013d62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8013c60:	4b42      	ldr	r3, [pc, #264]	@ (8013d6c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8013c62:	681b      	ldr	r3, [r3, #0]
 8013c64:	f003 0304 	and.w	r3, r3, #4
 8013c68:	2b04      	cmp	r3, #4
 8013c6a:	d109      	bne.n	8013c80 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8013c6c:	4b3f      	ldr	r3, [pc, #252]	@ (8013d6c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8013c6e:	681b      	ldr	r3, [r3, #0]
 8013c70:	08db      	lsrs	r3, r3, #3
 8013c72:	f003 0303 	and.w	r3, r3, #3
 8013c76:	4a3e      	ldr	r2, [pc, #248]	@ (8013d70 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8013c78:	fa22 f303 	lsr.w	r3, r2, r3
 8013c7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013c7e:	e070      	b.n	8013d62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013c80:	2300      	movs	r3, #0
 8013c82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013c84:	e06d      	b.n	8013d62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8013c86:	4b39      	ldr	r3, [pc, #228]	@ (8013d6c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8013c88:	681b      	ldr	r3, [r3, #0]
 8013c8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8013c8e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8013c92:	d102      	bne.n	8013c9a <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 8013c94:	4b37      	ldr	r3, [pc, #220]	@ (8013d74 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8013c96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013c98:	e063      	b.n	8013d62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013c9a:	2300      	movs	r3, #0
 8013c9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013c9e:	e060      	b.n	8013d62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8013ca0:	4b32      	ldr	r3, [pc, #200]	@ (8013d6c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8013ca2:	681b      	ldr	r3, [r3, #0]
 8013ca4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8013ca8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8013cac:	d102      	bne.n	8013cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 8013cae:	4b32      	ldr	r3, [pc, #200]	@ (8013d78 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8013cb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013cb2:	e056      	b.n	8013d62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013cb4:	2300      	movs	r3, #0
 8013cb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013cb8:	e053      	b.n	8013d62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8013cba:	2300      	movs	r3, #0
 8013cbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013cbe:	e050      	b.n	8013d62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8013cc0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013cc4:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8013cc8:	430b      	orrs	r3, r1
 8013cca:	d148      	bne.n	8013d5e <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8013ccc:	4b27      	ldr	r3, [pc, #156]	@ (8013d6c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8013cce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8013cd0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8013cd4:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8013cd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013cd8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8013cdc:	d02a      	beq.n	8013d34 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 8013cde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013ce0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8013ce4:	d838      	bhi.n	8013d58 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 8013ce6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013ce8:	2b00      	cmp	r3, #0
 8013cea:	d004      	beq.n	8013cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8013cec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013cee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8013cf2:	d00d      	beq.n	8013d10 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 8013cf4:	e030      	b.n	8013d58 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8013cf6:	4b1d      	ldr	r3, [pc, #116]	@ (8013d6c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8013cf8:	681b      	ldr	r3, [r3, #0]
 8013cfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8013cfe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8013d02:	d102      	bne.n	8013d0a <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 8013d04:	4b1c      	ldr	r3, [pc, #112]	@ (8013d78 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8013d06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013d08:	e02b      	b.n	8013d62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013d0a:	2300      	movs	r3, #0
 8013d0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013d0e:	e028      	b.n	8013d62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8013d10:	4b16      	ldr	r3, [pc, #88]	@ (8013d6c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8013d12:	681b      	ldr	r3, [r3, #0]
 8013d14:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8013d18:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8013d1c:	d107      	bne.n	8013d2e <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8013d1e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8013d22:	4618      	mov	r0, r3
 8013d24:	f000 fae8 	bl	80142f8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8013d28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013d2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013d2c:	e019      	b.n	8013d62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013d2e:	2300      	movs	r3, #0
 8013d30:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013d32:	e016      	b.n	8013d62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8013d34:	4b0d      	ldr	r3, [pc, #52]	@ (8013d6c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8013d36:	681b      	ldr	r3, [r3, #0]
 8013d38:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8013d3c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8013d40:	d107      	bne.n	8013d52 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8013d42:	f107 0318 	add.w	r3, r7, #24
 8013d46:	4618      	mov	r0, r3
 8013d48:	f000 f82e 	bl	8013da8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8013d4c:	69fb      	ldr	r3, [r7, #28]
 8013d4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013d50:	e007      	b.n	8013d62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013d52:	2300      	movs	r3, #0
 8013d54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013d56:	e004      	b.n	8013d62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8013d58:	2300      	movs	r3, #0
 8013d5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013d5c:	e001      	b.n	8013d62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 8013d5e:	2300      	movs	r3, #0
 8013d60:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8013d62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8013d64:	4618      	mov	r0, r3
 8013d66:	3740      	adds	r7, #64	@ 0x40
 8013d68:	46bd      	mov	sp, r7
 8013d6a:	bd80      	pop	{r7, pc}
 8013d6c:	58024400 	.word	0x58024400
 8013d70:	03d09000 	.word	0x03d09000
 8013d74:	003d0900 	.word	0x003d0900
 8013d78:	016e3600 	.word	0x016e3600

08013d7c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8013d7c:	b580      	push	{r7, lr}
 8013d7e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8013d80:	f7fe f92e 	bl	8011fe0 <HAL_RCC_GetHCLKFreq>
 8013d84:	4602      	mov	r2, r0
 8013d86:	4b06      	ldr	r3, [pc, #24]	@ (8013da0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8013d88:	6a1b      	ldr	r3, [r3, #32]
 8013d8a:	091b      	lsrs	r3, r3, #4
 8013d8c:	f003 0307 	and.w	r3, r3, #7
 8013d90:	4904      	ldr	r1, [pc, #16]	@ (8013da4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8013d92:	5ccb      	ldrb	r3, [r1, r3]
 8013d94:	f003 031f 	and.w	r3, r3, #31
 8013d98:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8013d9c:	4618      	mov	r0, r3
 8013d9e:	bd80      	pop	{r7, pc}
 8013da0:	58024400 	.word	0x58024400
 8013da4:	0801ea4c 	.word	0x0801ea4c

08013da8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8013da8:	b480      	push	{r7}
 8013daa:	b089      	sub	sp, #36	@ 0x24
 8013dac:	af00      	add	r7, sp, #0
 8013dae:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8013db0:	4ba1      	ldr	r3, [pc, #644]	@ (8014038 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013db2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013db4:	f003 0303 	and.w	r3, r3, #3
 8013db8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8013dba:	4b9f      	ldr	r3, [pc, #636]	@ (8014038 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013dbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013dbe:	0b1b      	lsrs	r3, r3, #12
 8013dc0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8013dc4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8013dc6:	4b9c      	ldr	r3, [pc, #624]	@ (8014038 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013dc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013dca:	091b      	lsrs	r3, r3, #4
 8013dcc:	f003 0301 	and.w	r3, r3, #1
 8013dd0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8013dd2:	4b99      	ldr	r3, [pc, #612]	@ (8014038 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013dd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013dd6:	08db      	lsrs	r3, r3, #3
 8013dd8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013ddc:	693a      	ldr	r2, [r7, #16]
 8013dde:	fb02 f303 	mul.w	r3, r2, r3
 8013de2:	ee07 3a90 	vmov	s15, r3
 8013de6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013dea:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8013dee:	697b      	ldr	r3, [r7, #20]
 8013df0:	2b00      	cmp	r3, #0
 8013df2:	f000 8111 	beq.w	8014018 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8013df6:	69bb      	ldr	r3, [r7, #24]
 8013df8:	2b02      	cmp	r3, #2
 8013dfa:	f000 8083 	beq.w	8013f04 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8013dfe:	69bb      	ldr	r3, [r7, #24]
 8013e00:	2b02      	cmp	r3, #2
 8013e02:	f200 80a1 	bhi.w	8013f48 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8013e06:	69bb      	ldr	r3, [r7, #24]
 8013e08:	2b00      	cmp	r3, #0
 8013e0a:	d003      	beq.n	8013e14 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8013e0c:	69bb      	ldr	r3, [r7, #24]
 8013e0e:	2b01      	cmp	r3, #1
 8013e10:	d056      	beq.n	8013ec0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8013e12:	e099      	b.n	8013f48 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8013e14:	4b88      	ldr	r3, [pc, #544]	@ (8014038 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013e16:	681b      	ldr	r3, [r3, #0]
 8013e18:	f003 0320 	and.w	r3, r3, #32
 8013e1c:	2b00      	cmp	r3, #0
 8013e1e:	d02d      	beq.n	8013e7c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8013e20:	4b85      	ldr	r3, [pc, #532]	@ (8014038 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013e22:	681b      	ldr	r3, [r3, #0]
 8013e24:	08db      	lsrs	r3, r3, #3
 8013e26:	f003 0303 	and.w	r3, r3, #3
 8013e2a:	4a84      	ldr	r2, [pc, #528]	@ (801403c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8013e2c:	fa22 f303 	lsr.w	r3, r2, r3
 8013e30:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8013e32:	68bb      	ldr	r3, [r7, #8]
 8013e34:	ee07 3a90 	vmov	s15, r3
 8013e38:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013e3c:	697b      	ldr	r3, [r7, #20]
 8013e3e:	ee07 3a90 	vmov	s15, r3
 8013e42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013e46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013e4a:	4b7b      	ldr	r3, [pc, #492]	@ (8014038 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013e4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013e4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013e52:	ee07 3a90 	vmov	s15, r3
 8013e56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013e5a:	ed97 6a03 	vldr	s12, [r7, #12]
 8013e5e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8014040 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8013e62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013e66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013e6a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8013e6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013e72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013e76:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8013e7a:	e087      	b.n	8013f8c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8013e7c:	697b      	ldr	r3, [r7, #20]
 8013e7e:	ee07 3a90 	vmov	s15, r3
 8013e82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013e86:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8014044 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8013e8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013e8e:	4b6a      	ldr	r3, [pc, #424]	@ (8014038 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013e90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013e92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013e96:	ee07 3a90 	vmov	s15, r3
 8013e9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013e9e:	ed97 6a03 	vldr	s12, [r7, #12]
 8013ea2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8014040 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8013ea6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013eaa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013eae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8013eb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013eb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013eba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8013ebe:	e065      	b.n	8013f8c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8013ec0:	697b      	ldr	r3, [r7, #20]
 8013ec2:	ee07 3a90 	vmov	s15, r3
 8013ec6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013eca:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8014048 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8013ece:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013ed2:	4b59      	ldr	r3, [pc, #356]	@ (8014038 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013ed4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013ed6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013eda:	ee07 3a90 	vmov	s15, r3
 8013ede:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013ee2:	ed97 6a03 	vldr	s12, [r7, #12]
 8013ee6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8014040 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8013eea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013eee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013ef2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8013ef6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013efa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013efe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8013f02:	e043      	b.n	8013f8c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8013f04:	697b      	ldr	r3, [r7, #20]
 8013f06:	ee07 3a90 	vmov	s15, r3
 8013f0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013f0e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 801404c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8013f12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013f16:	4b48      	ldr	r3, [pc, #288]	@ (8014038 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013f18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013f1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013f1e:	ee07 3a90 	vmov	s15, r3
 8013f22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013f26:	ed97 6a03 	vldr	s12, [r7, #12]
 8013f2a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8014040 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8013f2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013f32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013f36:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8013f3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013f3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013f42:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8013f46:	e021      	b.n	8013f8c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8013f48:	697b      	ldr	r3, [r7, #20]
 8013f4a:	ee07 3a90 	vmov	s15, r3
 8013f4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013f52:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8014048 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8013f56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013f5a:	4b37      	ldr	r3, [pc, #220]	@ (8014038 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013f5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013f5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013f62:	ee07 3a90 	vmov	s15, r3
 8013f66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013f6a:	ed97 6a03 	vldr	s12, [r7, #12]
 8013f6e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8014040 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8013f72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013f76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013f7a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8013f7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013f82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013f86:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8013f8a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8013f8c:	4b2a      	ldr	r3, [pc, #168]	@ (8014038 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013f8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013f90:	0a5b      	lsrs	r3, r3, #9
 8013f92:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013f96:	ee07 3a90 	vmov	s15, r3
 8013f9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013f9e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8013fa2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8013fa6:	edd7 6a07 	vldr	s13, [r7, #28]
 8013faa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013fae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013fb2:	ee17 2a90 	vmov	r2, s15
 8013fb6:	687b      	ldr	r3, [r7, #4]
 8013fb8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8013fba:	4b1f      	ldr	r3, [pc, #124]	@ (8014038 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013fbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013fbe:	0c1b      	lsrs	r3, r3, #16
 8013fc0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013fc4:	ee07 3a90 	vmov	s15, r3
 8013fc8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013fcc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8013fd0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8013fd4:	edd7 6a07 	vldr	s13, [r7, #28]
 8013fd8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013fdc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013fe0:	ee17 2a90 	vmov	r2, s15
 8013fe4:	687b      	ldr	r3, [r7, #4]
 8013fe6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8013fe8:	4b13      	ldr	r3, [pc, #76]	@ (8014038 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013fea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013fec:	0e1b      	lsrs	r3, r3, #24
 8013fee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013ff2:	ee07 3a90 	vmov	s15, r3
 8013ff6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013ffa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8013ffe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8014002:	edd7 6a07 	vldr	s13, [r7, #28]
 8014006:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801400a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801400e:	ee17 2a90 	vmov	r2, s15
 8014012:	687b      	ldr	r3, [r7, #4]
 8014014:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8014016:	e008      	b.n	801402a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8014018:	687b      	ldr	r3, [r7, #4]
 801401a:	2200      	movs	r2, #0
 801401c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 801401e:	687b      	ldr	r3, [r7, #4]
 8014020:	2200      	movs	r2, #0
 8014022:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8014024:	687b      	ldr	r3, [r7, #4]
 8014026:	2200      	movs	r2, #0
 8014028:	609a      	str	r2, [r3, #8]
}
 801402a:	bf00      	nop
 801402c:	3724      	adds	r7, #36	@ 0x24
 801402e:	46bd      	mov	sp, r7
 8014030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014034:	4770      	bx	lr
 8014036:	bf00      	nop
 8014038:	58024400 	.word	0x58024400
 801403c:	03d09000 	.word	0x03d09000
 8014040:	46000000 	.word	0x46000000
 8014044:	4c742400 	.word	0x4c742400
 8014048:	4a742400 	.word	0x4a742400
 801404c:	4bb71b00 	.word	0x4bb71b00

08014050 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8014050:	b480      	push	{r7}
 8014052:	b089      	sub	sp, #36	@ 0x24
 8014054:	af00      	add	r7, sp, #0
 8014056:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8014058:	4ba1      	ldr	r3, [pc, #644]	@ (80142e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801405a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801405c:	f003 0303 	and.w	r3, r3, #3
 8014060:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8014062:	4b9f      	ldr	r3, [pc, #636]	@ (80142e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8014064:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014066:	0d1b      	lsrs	r3, r3, #20
 8014068:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801406c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 801406e:	4b9c      	ldr	r3, [pc, #624]	@ (80142e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8014070:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014072:	0a1b      	lsrs	r3, r3, #8
 8014074:	f003 0301 	and.w	r3, r3, #1
 8014078:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 801407a:	4b99      	ldr	r3, [pc, #612]	@ (80142e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801407c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801407e:	08db      	lsrs	r3, r3, #3
 8014080:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014084:	693a      	ldr	r2, [r7, #16]
 8014086:	fb02 f303 	mul.w	r3, r2, r3
 801408a:	ee07 3a90 	vmov	s15, r3
 801408e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014092:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8014096:	697b      	ldr	r3, [r7, #20]
 8014098:	2b00      	cmp	r3, #0
 801409a:	f000 8111 	beq.w	80142c0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 801409e:	69bb      	ldr	r3, [r7, #24]
 80140a0:	2b02      	cmp	r3, #2
 80140a2:	f000 8083 	beq.w	80141ac <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80140a6:	69bb      	ldr	r3, [r7, #24]
 80140a8:	2b02      	cmp	r3, #2
 80140aa:	f200 80a1 	bhi.w	80141f0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80140ae:	69bb      	ldr	r3, [r7, #24]
 80140b0:	2b00      	cmp	r3, #0
 80140b2:	d003      	beq.n	80140bc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80140b4:	69bb      	ldr	r3, [r7, #24]
 80140b6:	2b01      	cmp	r3, #1
 80140b8:	d056      	beq.n	8014168 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80140ba:	e099      	b.n	80141f0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80140bc:	4b88      	ldr	r3, [pc, #544]	@ (80142e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80140be:	681b      	ldr	r3, [r3, #0]
 80140c0:	f003 0320 	and.w	r3, r3, #32
 80140c4:	2b00      	cmp	r3, #0
 80140c6:	d02d      	beq.n	8014124 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80140c8:	4b85      	ldr	r3, [pc, #532]	@ (80142e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80140ca:	681b      	ldr	r3, [r3, #0]
 80140cc:	08db      	lsrs	r3, r3, #3
 80140ce:	f003 0303 	and.w	r3, r3, #3
 80140d2:	4a84      	ldr	r2, [pc, #528]	@ (80142e4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80140d4:	fa22 f303 	lsr.w	r3, r2, r3
 80140d8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80140da:	68bb      	ldr	r3, [r7, #8]
 80140dc:	ee07 3a90 	vmov	s15, r3
 80140e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80140e4:	697b      	ldr	r3, [r7, #20]
 80140e6:	ee07 3a90 	vmov	s15, r3
 80140ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80140ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80140f2:	4b7b      	ldr	r3, [pc, #492]	@ (80142e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80140f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80140f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80140fa:	ee07 3a90 	vmov	s15, r3
 80140fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8014102:	ed97 6a03 	vldr	s12, [r7, #12]
 8014106:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80142e8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801410a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801410e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8014112:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8014116:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801411a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801411e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8014122:	e087      	b.n	8014234 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8014124:	697b      	ldr	r3, [r7, #20]
 8014126:	ee07 3a90 	vmov	s15, r3
 801412a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801412e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80142ec <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8014132:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8014136:	4b6a      	ldr	r3, [pc, #424]	@ (80142e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8014138:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801413a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801413e:	ee07 3a90 	vmov	s15, r3
 8014142:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8014146:	ed97 6a03 	vldr	s12, [r7, #12]
 801414a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80142e8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801414e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8014152:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8014156:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801415a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801415e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014162:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8014166:	e065      	b.n	8014234 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8014168:	697b      	ldr	r3, [r7, #20]
 801416a:	ee07 3a90 	vmov	s15, r3
 801416e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014172:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80142f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8014176:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801417a:	4b59      	ldr	r3, [pc, #356]	@ (80142e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801417c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801417e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014182:	ee07 3a90 	vmov	s15, r3
 8014186:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801418a:	ed97 6a03 	vldr	s12, [r7, #12]
 801418e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80142e8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8014192:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8014196:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801419a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801419e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80141a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80141a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80141aa:	e043      	b.n	8014234 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80141ac:	697b      	ldr	r3, [r7, #20]
 80141ae:	ee07 3a90 	vmov	s15, r3
 80141b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80141b6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80142f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80141ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80141be:	4b48      	ldr	r3, [pc, #288]	@ (80142e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80141c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80141c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80141c6:	ee07 3a90 	vmov	s15, r3
 80141ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80141ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80141d2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80142e8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80141d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80141da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80141de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80141e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80141e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80141ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80141ee:	e021      	b.n	8014234 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80141f0:	697b      	ldr	r3, [r7, #20]
 80141f2:	ee07 3a90 	vmov	s15, r3
 80141f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80141fa:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80142f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80141fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8014202:	4b37      	ldr	r3, [pc, #220]	@ (80142e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8014204:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014206:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801420a:	ee07 3a90 	vmov	s15, r3
 801420e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8014212:	ed97 6a03 	vldr	s12, [r7, #12]
 8014216:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80142e8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801421a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801421e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8014222:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8014226:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801422a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801422e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8014232:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8014234:	4b2a      	ldr	r3, [pc, #168]	@ (80142e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8014236:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014238:	0a5b      	lsrs	r3, r3, #9
 801423a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801423e:	ee07 3a90 	vmov	s15, r3
 8014242:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014246:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801424a:	ee37 7a87 	vadd.f32	s14, s15, s14
 801424e:	edd7 6a07 	vldr	s13, [r7, #28]
 8014252:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8014256:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801425a:	ee17 2a90 	vmov	r2, s15
 801425e:	687b      	ldr	r3, [r7, #4]
 8014260:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8014262:	4b1f      	ldr	r3, [pc, #124]	@ (80142e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8014264:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014266:	0c1b      	lsrs	r3, r3, #16
 8014268:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801426c:	ee07 3a90 	vmov	s15, r3
 8014270:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014274:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8014278:	ee37 7a87 	vadd.f32	s14, s15, s14
 801427c:	edd7 6a07 	vldr	s13, [r7, #28]
 8014280:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8014284:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8014288:	ee17 2a90 	vmov	r2, s15
 801428c:	687b      	ldr	r3, [r7, #4]
 801428e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8014290:	4b13      	ldr	r3, [pc, #76]	@ (80142e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8014292:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014294:	0e1b      	lsrs	r3, r3, #24
 8014296:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801429a:	ee07 3a90 	vmov	s15, r3
 801429e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80142a2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80142a6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80142aa:	edd7 6a07 	vldr	s13, [r7, #28]
 80142ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80142b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80142b6:	ee17 2a90 	vmov	r2, s15
 80142ba:	687b      	ldr	r3, [r7, #4]
 80142bc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80142be:	e008      	b.n	80142d2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80142c0:	687b      	ldr	r3, [r7, #4]
 80142c2:	2200      	movs	r2, #0
 80142c4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80142c6:	687b      	ldr	r3, [r7, #4]
 80142c8:	2200      	movs	r2, #0
 80142ca:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80142cc:	687b      	ldr	r3, [r7, #4]
 80142ce:	2200      	movs	r2, #0
 80142d0:	609a      	str	r2, [r3, #8]
}
 80142d2:	bf00      	nop
 80142d4:	3724      	adds	r7, #36	@ 0x24
 80142d6:	46bd      	mov	sp, r7
 80142d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142dc:	4770      	bx	lr
 80142de:	bf00      	nop
 80142e0:	58024400 	.word	0x58024400
 80142e4:	03d09000 	.word	0x03d09000
 80142e8:	46000000 	.word	0x46000000
 80142ec:	4c742400 	.word	0x4c742400
 80142f0:	4a742400 	.word	0x4a742400
 80142f4:	4bb71b00 	.word	0x4bb71b00

080142f8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 80142f8:	b480      	push	{r7}
 80142fa:	b089      	sub	sp, #36	@ 0x24
 80142fc:	af00      	add	r7, sp, #0
 80142fe:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8014300:	4ba0      	ldr	r3, [pc, #640]	@ (8014584 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8014302:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014304:	f003 0303 	and.w	r3, r3, #3
 8014308:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 801430a:	4b9e      	ldr	r3, [pc, #632]	@ (8014584 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801430c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801430e:	091b      	lsrs	r3, r3, #4
 8014310:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8014314:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8014316:	4b9b      	ldr	r3, [pc, #620]	@ (8014584 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8014318:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801431a:	f003 0301 	and.w	r3, r3, #1
 801431e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8014320:	4b98      	ldr	r3, [pc, #608]	@ (8014584 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8014322:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014324:	08db      	lsrs	r3, r3, #3
 8014326:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801432a:	693a      	ldr	r2, [r7, #16]
 801432c:	fb02 f303 	mul.w	r3, r2, r3
 8014330:	ee07 3a90 	vmov	s15, r3
 8014334:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014338:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 801433c:	697b      	ldr	r3, [r7, #20]
 801433e:	2b00      	cmp	r3, #0
 8014340:	f000 8111 	beq.w	8014566 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8014344:	69bb      	ldr	r3, [r7, #24]
 8014346:	2b02      	cmp	r3, #2
 8014348:	f000 8083 	beq.w	8014452 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 801434c:	69bb      	ldr	r3, [r7, #24]
 801434e:	2b02      	cmp	r3, #2
 8014350:	f200 80a1 	bhi.w	8014496 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8014354:	69bb      	ldr	r3, [r7, #24]
 8014356:	2b00      	cmp	r3, #0
 8014358:	d003      	beq.n	8014362 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 801435a:	69bb      	ldr	r3, [r7, #24]
 801435c:	2b01      	cmp	r3, #1
 801435e:	d056      	beq.n	801440e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8014360:	e099      	b.n	8014496 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8014362:	4b88      	ldr	r3, [pc, #544]	@ (8014584 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8014364:	681b      	ldr	r3, [r3, #0]
 8014366:	f003 0320 	and.w	r3, r3, #32
 801436a:	2b00      	cmp	r3, #0
 801436c:	d02d      	beq.n	80143ca <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801436e:	4b85      	ldr	r3, [pc, #532]	@ (8014584 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8014370:	681b      	ldr	r3, [r3, #0]
 8014372:	08db      	lsrs	r3, r3, #3
 8014374:	f003 0303 	and.w	r3, r3, #3
 8014378:	4a83      	ldr	r2, [pc, #524]	@ (8014588 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 801437a:	fa22 f303 	lsr.w	r3, r2, r3
 801437e:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8014380:	68bb      	ldr	r3, [r7, #8]
 8014382:	ee07 3a90 	vmov	s15, r3
 8014386:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801438a:	697b      	ldr	r3, [r7, #20]
 801438c:	ee07 3a90 	vmov	s15, r3
 8014390:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014394:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8014398:	4b7a      	ldr	r3, [pc, #488]	@ (8014584 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801439a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801439c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80143a0:	ee07 3a90 	vmov	s15, r3
 80143a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80143a8:	ed97 6a03 	vldr	s12, [r7, #12]
 80143ac:	eddf 5a77 	vldr	s11, [pc, #476]	@ 801458c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80143b0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80143b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80143b8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80143bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80143c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80143c4:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80143c8:	e087      	b.n	80144da <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80143ca:	697b      	ldr	r3, [r7, #20]
 80143cc:	ee07 3a90 	vmov	s15, r3
 80143d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80143d4:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8014590 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80143d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80143dc:	4b69      	ldr	r3, [pc, #420]	@ (8014584 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80143de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80143e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80143e4:	ee07 3a90 	vmov	s15, r3
 80143e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80143ec:	ed97 6a03 	vldr	s12, [r7, #12]
 80143f0:	eddf 5a66 	vldr	s11, [pc, #408]	@ 801458c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80143f4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80143f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80143fc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8014400:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8014404:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014408:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801440c:	e065      	b.n	80144da <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801440e:	697b      	ldr	r3, [r7, #20]
 8014410:	ee07 3a90 	vmov	s15, r3
 8014414:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014418:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8014594 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 801441c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8014420:	4b58      	ldr	r3, [pc, #352]	@ (8014584 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8014422:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014424:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014428:	ee07 3a90 	vmov	s15, r3
 801442c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8014430:	ed97 6a03 	vldr	s12, [r7, #12]
 8014434:	eddf 5a55 	vldr	s11, [pc, #340]	@ 801458c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8014438:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801443c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8014440:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8014444:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8014448:	ee67 7a27 	vmul.f32	s15, s14, s15
 801444c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8014450:	e043      	b.n	80144da <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8014452:	697b      	ldr	r3, [r7, #20]
 8014454:	ee07 3a90 	vmov	s15, r3
 8014458:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801445c:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8014598 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8014460:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8014464:	4b47      	ldr	r3, [pc, #284]	@ (8014584 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8014466:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014468:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801446c:	ee07 3a90 	vmov	s15, r3
 8014470:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8014474:	ed97 6a03 	vldr	s12, [r7, #12]
 8014478:	eddf 5a44 	vldr	s11, [pc, #272]	@ 801458c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 801447c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8014480:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8014484:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8014488:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801448c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014490:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8014494:	e021      	b.n	80144da <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8014496:	697b      	ldr	r3, [r7, #20]
 8014498:	ee07 3a90 	vmov	s15, r3
 801449c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80144a0:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8014590 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80144a4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80144a8:	4b36      	ldr	r3, [pc, #216]	@ (8014584 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80144aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80144ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80144b0:	ee07 3a90 	vmov	s15, r3
 80144b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80144b8:	ed97 6a03 	vldr	s12, [r7, #12]
 80144bc:	eddf 5a33 	vldr	s11, [pc, #204]	@ 801458c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80144c0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80144c4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80144c8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80144cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80144d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80144d4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80144d8:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 80144da:	4b2a      	ldr	r3, [pc, #168]	@ (8014584 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80144dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80144de:	0a5b      	lsrs	r3, r3, #9
 80144e0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80144e4:	ee07 3a90 	vmov	s15, r3
 80144e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80144ec:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80144f0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80144f4:	edd7 6a07 	vldr	s13, [r7, #28]
 80144f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80144fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8014500:	ee17 2a90 	vmov	r2, s15
 8014504:	687b      	ldr	r3, [r7, #4]
 8014506:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8014508:	4b1e      	ldr	r3, [pc, #120]	@ (8014584 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801450a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801450c:	0c1b      	lsrs	r3, r3, #16
 801450e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8014512:	ee07 3a90 	vmov	s15, r3
 8014516:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801451a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801451e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8014522:	edd7 6a07 	vldr	s13, [r7, #28]
 8014526:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801452a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801452e:	ee17 2a90 	vmov	r2, s15
 8014532:	687b      	ldr	r3, [r7, #4]
 8014534:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8014536:	4b13      	ldr	r3, [pc, #76]	@ (8014584 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8014538:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801453a:	0e1b      	lsrs	r3, r3, #24
 801453c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8014540:	ee07 3a90 	vmov	s15, r3
 8014544:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014548:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801454c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8014550:	edd7 6a07 	vldr	s13, [r7, #28]
 8014554:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8014558:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801455c:	ee17 2a90 	vmov	r2, s15
 8014560:	687b      	ldr	r3, [r7, #4]
 8014562:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8014564:	e008      	b.n	8014578 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8014566:	687b      	ldr	r3, [r7, #4]
 8014568:	2200      	movs	r2, #0
 801456a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 801456c:	687b      	ldr	r3, [r7, #4]
 801456e:	2200      	movs	r2, #0
 8014570:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8014572:	687b      	ldr	r3, [r7, #4]
 8014574:	2200      	movs	r2, #0
 8014576:	609a      	str	r2, [r3, #8]
}
 8014578:	bf00      	nop
 801457a:	3724      	adds	r7, #36	@ 0x24
 801457c:	46bd      	mov	sp, r7
 801457e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014582:	4770      	bx	lr
 8014584:	58024400 	.word	0x58024400
 8014588:	03d09000 	.word	0x03d09000
 801458c:	46000000 	.word	0x46000000
 8014590:	4c742400 	.word	0x4c742400
 8014594:	4a742400 	.word	0x4a742400
 8014598:	4bb71b00 	.word	0x4bb71b00

0801459c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 801459c:	b580      	push	{r7, lr}
 801459e:	b084      	sub	sp, #16
 80145a0:	af00      	add	r7, sp, #0
 80145a2:	6078      	str	r0, [r7, #4]
 80145a4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80145a6:	2300      	movs	r3, #0
 80145a8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80145aa:	4b53      	ldr	r3, [pc, #332]	@ (80146f8 <RCCEx_PLL2_Config+0x15c>)
 80145ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80145ae:	f003 0303 	and.w	r3, r3, #3
 80145b2:	2b03      	cmp	r3, #3
 80145b4:	d101      	bne.n	80145ba <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80145b6:	2301      	movs	r3, #1
 80145b8:	e099      	b.n	80146ee <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80145ba:	4b4f      	ldr	r3, [pc, #316]	@ (80146f8 <RCCEx_PLL2_Config+0x15c>)
 80145bc:	681b      	ldr	r3, [r3, #0]
 80145be:	4a4e      	ldr	r2, [pc, #312]	@ (80146f8 <RCCEx_PLL2_Config+0x15c>)
 80145c0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80145c4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80145c6:	f7f4 ffcd 	bl	8009564 <HAL_GetTick>
 80145ca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80145cc:	e008      	b.n	80145e0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80145ce:	f7f4 ffc9 	bl	8009564 <HAL_GetTick>
 80145d2:	4602      	mov	r2, r0
 80145d4:	68bb      	ldr	r3, [r7, #8]
 80145d6:	1ad3      	subs	r3, r2, r3
 80145d8:	2b02      	cmp	r3, #2
 80145da:	d901      	bls.n	80145e0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80145dc:	2303      	movs	r3, #3
 80145de:	e086      	b.n	80146ee <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80145e0:	4b45      	ldr	r3, [pc, #276]	@ (80146f8 <RCCEx_PLL2_Config+0x15c>)
 80145e2:	681b      	ldr	r3, [r3, #0]
 80145e4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80145e8:	2b00      	cmp	r3, #0
 80145ea:	d1f0      	bne.n	80145ce <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80145ec:	4b42      	ldr	r3, [pc, #264]	@ (80146f8 <RCCEx_PLL2_Config+0x15c>)
 80145ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80145f0:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80145f4:	687b      	ldr	r3, [r7, #4]
 80145f6:	681b      	ldr	r3, [r3, #0]
 80145f8:	031b      	lsls	r3, r3, #12
 80145fa:	493f      	ldr	r1, [pc, #252]	@ (80146f8 <RCCEx_PLL2_Config+0x15c>)
 80145fc:	4313      	orrs	r3, r2
 80145fe:	628b      	str	r3, [r1, #40]	@ 0x28
 8014600:	687b      	ldr	r3, [r7, #4]
 8014602:	685b      	ldr	r3, [r3, #4]
 8014604:	3b01      	subs	r3, #1
 8014606:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801460a:	687b      	ldr	r3, [r7, #4]
 801460c:	689b      	ldr	r3, [r3, #8]
 801460e:	3b01      	subs	r3, #1
 8014610:	025b      	lsls	r3, r3, #9
 8014612:	b29b      	uxth	r3, r3
 8014614:	431a      	orrs	r2, r3
 8014616:	687b      	ldr	r3, [r7, #4]
 8014618:	68db      	ldr	r3, [r3, #12]
 801461a:	3b01      	subs	r3, #1
 801461c:	041b      	lsls	r3, r3, #16
 801461e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8014622:	431a      	orrs	r2, r3
 8014624:	687b      	ldr	r3, [r7, #4]
 8014626:	691b      	ldr	r3, [r3, #16]
 8014628:	3b01      	subs	r3, #1
 801462a:	061b      	lsls	r3, r3, #24
 801462c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8014630:	4931      	ldr	r1, [pc, #196]	@ (80146f8 <RCCEx_PLL2_Config+0x15c>)
 8014632:	4313      	orrs	r3, r2
 8014634:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8014636:	4b30      	ldr	r3, [pc, #192]	@ (80146f8 <RCCEx_PLL2_Config+0x15c>)
 8014638:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801463a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 801463e:	687b      	ldr	r3, [r7, #4]
 8014640:	695b      	ldr	r3, [r3, #20]
 8014642:	492d      	ldr	r1, [pc, #180]	@ (80146f8 <RCCEx_PLL2_Config+0x15c>)
 8014644:	4313      	orrs	r3, r2
 8014646:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8014648:	4b2b      	ldr	r3, [pc, #172]	@ (80146f8 <RCCEx_PLL2_Config+0x15c>)
 801464a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801464c:	f023 0220 	bic.w	r2, r3, #32
 8014650:	687b      	ldr	r3, [r7, #4]
 8014652:	699b      	ldr	r3, [r3, #24]
 8014654:	4928      	ldr	r1, [pc, #160]	@ (80146f8 <RCCEx_PLL2_Config+0x15c>)
 8014656:	4313      	orrs	r3, r2
 8014658:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 801465a:	4b27      	ldr	r3, [pc, #156]	@ (80146f8 <RCCEx_PLL2_Config+0x15c>)
 801465c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801465e:	4a26      	ldr	r2, [pc, #152]	@ (80146f8 <RCCEx_PLL2_Config+0x15c>)
 8014660:	f023 0310 	bic.w	r3, r3, #16
 8014664:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8014666:	4b24      	ldr	r3, [pc, #144]	@ (80146f8 <RCCEx_PLL2_Config+0x15c>)
 8014668:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801466a:	4b24      	ldr	r3, [pc, #144]	@ (80146fc <RCCEx_PLL2_Config+0x160>)
 801466c:	4013      	ands	r3, r2
 801466e:	687a      	ldr	r2, [r7, #4]
 8014670:	69d2      	ldr	r2, [r2, #28]
 8014672:	00d2      	lsls	r2, r2, #3
 8014674:	4920      	ldr	r1, [pc, #128]	@ (80146f8 <RCCEx_PLL2_Config+0x15c>)
 8014676:	4313      	orrs	r3, r2
 8014678:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 801467a:	4b1f      	ldr	r3, [pc, #124]	@ (80146f8 <RCCEx_PLL2_Config+0x15c>)
 801467c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801467e:	4a1e      	ldr	r2, [pc, #120]	@ (80146f8 <RCCEx_PLL2_Config+0x15c>)
 8014680:	f043 0310 	orr.w	r3, r3, #16
 8014684:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8014686:	683b      	ldr	r3, [r7, #0]
 8014688:	2b00      	cmp	r3, #0
 801468a:	d106      	bne.n	801469a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 801468c:	4b1a      	ldr	r3, [pc, #104]	@ (80146f8 <RCCEx_PLL2_Config+0x15c>)
 801468e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014690:	4a19      	ldr	r2, [pc, #100]	@ (80146f8 <RCCEx_PLL2_Config+0x15c>)
 8014692:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8014696:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8014698:	e00f      	b.n	80146ba <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 801469a:	683b      	ldr	r3, [r7, #0]
 801469c:	2b01      	cmp	r3, #1
 801469e:	d106      	bne.n	80146ae <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80146a0:	4b15      	ldr	r3, [pc, #84]	@ (80146f8 <RCCEx_PLL2_Config+0x15c>)
 80146a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80146a4:	4a14      	ldr	r2, [pc, #80]	@ (80146f8 <RCCEx_PLL2_Config+0x15c>)
 80146a6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80146aa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80146ac:	e005      	b.n	80146ba <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80146ae:	4b12      	ldr	r3, [pc, #72]	@ (80146f8 <RCCEx_PLL2_Config+0x15c>)
 80146b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80146b2:	4a11      	ldr	r2, [pc, #68]	@ (80146f8 <RCCEx_PLL2_Config+0x15c>)
 80146b4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80146b8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80146ba:	4b0f      	ldr	r3, [pc, #60]	@ (80146f8 <RCCEx_PLL2_Config+0x15c>)
 80146bc:	681b      	ldr	r3, [r3, #0]
 80146be:	4a0e      	ldr	r2, [pc, #56]	@ (80146f8 <RCCEx_PLL2_Config+0x15c>)
 80146c0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80146c4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80146c6:	f7f4 ff4d 	bl	8009564 <HAL_GetTick>
 80146ca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80146cc:	e008      	b.n	80146e0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80146ce:	f7f4 ff49 	bl	8009564 <HAL_GetTick>
 80146d2:	4602      	mov	r2, r0
 80146d4:	68bb      	ldr	r3, [r7, #8]
 80146d6:	1ad3      	subs	r3, r2, r3
 80146d8:	2b02      	cmp	r3, #2
 80146da:	d901      	bls.n	80146e0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80146dc:	2303      	movs	r3, #3
 80146de:	e006      	b.n	80146ee <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80146e0:	4b05      	ldr	r3, [pc, #20]	@ (80146f8 <RCCEx_PLL2_Config+0x15c>)
 80146e2:	681b      	ldr	r3, [r3, #0]
 80146e4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80146e8:	2b00      	cmp	r3, #0
 80146ea:	d0f0      	beq.n	80146ce <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80146ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80146ee:	4618      	mov	r0, r3
 80146f0:	3710      	adds	r7, #16
 80146f2:	46bd      	mov	sp, r7
 80146f4:	bd80      	pop	{r7, pc}
 80146f6:	bf00      	nop
 80146f8:	58024400 	.word	0x58024400
 80146fc:	ffff0007 	.word	0xffff0007

08014700 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8014700:	b580      	push	{r7, lr}
 8014702:	b084      	sub	sp, #16
 8014704:	af00      	add	r7, sp, #0
 8014706:	6078      	str	r0, [r7, #4]
 8014708:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801470a:	2300      	movs	r3, #0
 801470c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 801470e:	4b53      	ldr	r3, [pc, #332]	@ (801485c <RCCEx_PLL3_Config+0x15c>)
 8014710:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014712:	f003 0303 	and.w	r3, r3, #3
 8014716:	2b03      	cmp	r3, #3
 8014718:	d101      	bne.n	801471e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 801471a:	2301      	movs	r3, #1
 801471c:	e099      	b.n	8014852 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 801471e:	4b4f      	ldr	r3, [pc, #316]	@ (801485c <RCCEx_PLL3_Config+0x15c>)
 8014720:	681b      	ldr	r3, [r3, #0]
 8014722:	4a4e      	ldr	r2, [pc, #312]	@ (801485c <RCCEx_PLL3_Config+0x15c>)
 8014724:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8014728:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801472a:	f7f4 ff1b 	bl	8009564 <HAL_GetTick>
 801472e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8014730:	e008      	b.n	8014744 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8014732:	f7f4 ff17 	bl	8009564 <HAL_GetTick>
 8014736:	4602      	mov	r2, r0
 8014738:	68bb      	ldr	r3, [r7, #8]
 801473a:	1ad3      	subs	r3, r2, r3
 801473c:	2b02      	cmp	r3, #2
 801473e:	d901      	bls.n	8014744 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8014740:	2303      	movs	r3, #3
 8014742:	e086      	b.n	8014852 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8014744:	4b45      	ldr	r3, [pc, #276]	@ (801485c <RCCEx_PLL3_Config+0x15c>)
 8014746:	681b      	ldr	r3, [r3, #0]
 8014748:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801474c:	2b00      	cmp	r3, #0
 801474e:	d1f0      	bne.n	8014732 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8014750:	4b42      	ldr	r3, [pc, #264]	@ (801485c <RCCEx_PLL3_Config+0x15c>)
 8014752:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014754:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8014758:	687b      	ldr	r3, [r7, #4]
 801475a:	681b      	ldr	r3, [r3, #0]
 801475c:	051b      	lsls	r3, r3, #20
 801475e:	493f      	ldr	r1, [pc, #252]	@ (801485c <RCCEx_PLL3_Config+0x15c>)
 8014760:	4313      	orrs	r3, r2
 8014762:	628b      	str	r3, [r1, #40]	@ 0x28
 8014764:	687b      	ldr	r3, [r7, #4]
 8014766:	685b      	ldr	r3, [r3, #4]
 8014768:	3b01      	subs	r3, #1
 801476a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801476e:	687b      	ldr	r3, [r7, #4]
 8014770:	689b      	ldr	r3, [r3, #8]
 8014772:	3b01      	subs	r3, #1
 8014774:	025b      	lsls	r3, r3, #9
 8014776:	b29b      	uxth	r3, r3
 8014778:	431a      	orrs	r2, r3
 801477a:	687b      	ldr	r3, [r7, #4]
 801477c:	68db      	ldr	r3, [r3, #12]
 801477e:	3b01      	subs	r3, #1
 8014780:	041b      	lsls	r3, r3, #16
 8014782:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8014786:	431a      	orrs	r2, r3
 8014788:	687b      	ldr	r3, [r7, #4]
 801478a:	691b      	ldr	r3, [r3, #16]
 801478c:	3b01      	subs	r3, #1
 801478e:	061b      	lsls	r3, r3, #24
 8014790:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8014794:	4931      	ldr	r1, [pc, #196]	@ (801485c <RCCEx_PLL3_Config+0x15c>)
 8014796:	4313      	orrs	r3, r2
 8014798:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 801479a:	4b30      	ldr	r3, [pc, #192]	@ (801485c <RCCEx_PLL3_Config+0x15c>)
 801479c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801479e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80147a2:	687b      	ldr	r3, [r7, #4]
 80147a4:	695b      	ldr	r3, [r3, #20]
 80147a6:	492d      	ldr	r1, [pc, #180]	@ (801485c <RCCEx_PLL3_Config+0x15c>)
 80147a8:	4313      	orrs	r3, r2
 80147aa:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80147ac:	4b2b      	ldr	r3, [pc, #172]	@ (801485c <RCCEx_PLL3_Config+0x15c>)
 80147ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80147b0:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80147b4:	687b      	ldr	r3, [r7, #4]
 80147b6:	699b      	ldr	r3, [r3, #24]
 80147b8:	4928      	ldr	r1, [pc, #160]	@ (801485c <RCCEx_PLL3_Config+0x15c>)
 80147ba:	4313      	orrs	r3, r2
 80147bc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80147be:	4b27      	ldr	r3, [pc, #156]	@ (801485c <RCCEx_PLL3_Config+0x15c>)
 80147c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80147c2:	4a26      	ldr	r2, [pc, #152]	@ (801485c <RCCEx_PLL3_Config+0x15c>)
 80147c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80147c8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80147ca:	4b24      	ldr	r3, [pc, #144]	@ (801485c <RCCEx_PLL3_Config+0x15c>)
 80147cc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80147ce:	4b24      	ldr	r3, [pc, #144]	@ (8014860 <RCCEx_PLL3_Config+0x160>)
 80147d0:	4013      	ands	r3, r2
 80147d2:	687a      	ldr	r2, [r7, #4]
 80147d4:	69d2      	ldr	r2, [r2, #28]
 80147d6:	00d2      	lsls	r2, r2, #3
 80147d8:	4920      	ldr	r1, [pc, #128]	@ (801485c <RCCEx_PLL3_Config+0x15c>)
 80147da:	4313      	orrs	r3, r2
 80147dc:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80147de:	4b1f      	ldr	r3, [pc, #124]	@ (801485c <RCCEx_PLL3_Config+0x15c>)
 80147e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80147e2:	4a1e      	ldr	r2, [pc, #120]	@ (801485c <RCCEx_PLL3_Config+0x15c>)
 80147e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80147e8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80147ea:	683b      	ldr	r3, [r7, #0]
 80147ec:	2b00      	cmp	r3, #0
 80147ee:	d106      	bne.n	80147fe <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80147f0:	4b1a      	ldr	r3, [pc, #104]	@ (801485c <RCCEx_PLL3_Config+0x15c>)
 80147f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80147f4:	4a19      	ldr	r2, [pc, #100]	@ (801485c <RCCEx_PLL3_Config+0x15c>)
 80147f6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80147fa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80147fc:	e00f      	b.n	801481e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80147fe:	683b      	ldr	r3, [r7, #0]
 8014800:	2b01      	cmp	r3, #1
 8014802:	d106      	bne.n	8014812 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8014804:	4b15      	ldr	r3, [pc, #84]	@ (801485c <RCCEx_PLL3_Config+0x15c>)
 8014806:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014808:	4a14      	ldr	r2, [pc, #80]	@ (801485c <RCCEx_PLL3_Config+0x15c>)
 801480a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 801480e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8014810:	e005      	b.n	801481e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8014812:	4b12      	ldr	r3, [pc, #72]	@ (801485c <RCCEx_PLL3_Config+0x15c>)
 8014814:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014816:	4a11      	ldr	r2, [pc, #68]	@ (801485c <RCCEx_PLL3_Config+0x15c>)
 8014818:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 801481c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 801481e:	4b0f      	ldr	r3, [pc, #60]	@ (801485c <RCCEx_PLL3_Config+0x15c>)
 8014820:	681b      	ldr	r3, [r3, #0]
 8014822:	4a0e      	ldr	r2, [pc, #56]	@ (801485c <RCCEx_PLL3_Config+0x15c>)
 8014824:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8014828:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801482a:	f7f4 fe9b 	bl	8009564 <HAL_GetTick>
 801482e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8014830:	e008      	b.n	8014844 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8014832:	f7f4 fe97 	bl	8009564 <HAL_GetTick>
 8014836:	4602      	mov	r2, r0
 8014838:	68bb      	ldr	r3, [r7, #8]
 801483a:	1ad3      	subs	r3, r2, r3
 801483c:	2b02      	cmp	r3, #2
 801483e:	d901      	bls.n	8014844 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8014840:	2303      	movs	r3, #3
 8014842:	e006      	b.n	8014852 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8014844:	4b05      	ldr	r3, [pc, #20]	@ (801485c <RCCEx_PLL3_Config+0x15c>)
 8014846:	681b      	ldr	r3, [r3, #0]
 8014848:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801484c:	2b00      	cmp	r3, #0
 801484e:	d0f0      	beq.n	8014832 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8014850:	7bfb      	ldrb	r3, [r7, #15]
}
 8014852:	4618      	mov	r0, r3
 8014854:	3710      	adds	r7, #16
 8014856:	46bd      	mov	sp, r7
 8014858:	bd80      	pop	{r7, pc}
 801485a:	bf00      	nop
 801485c:	58024400 	.word	0x58024400
 8014860:	ffff0007 	.word	0xffff0007

08014864 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8014864:	b580      	push	{r7, lr}
 8014866:	b084      	sub	sp, #16
 8014868:	af00      	add	r7, sp, #0
 801486a:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 801486c:	687b      	ldr	r3, [r7, #4]
 801486e:	2b00      	cmp	r3, #0
 8014870:	d101      	bne.n	8014876 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8014872:	2301      	movs	r3, #1
 8014874:	e10f      	b.n	8014a96 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8014876:	687b      	ldr	r3, [r7, #4]
 8014878:	2200      	movs	r2, #0
 801487a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 801487c:	687b      	ldr	r3, [r7, #4]
 801487e:	681b      	ldr	r3, [r3, #0]
 8014880:	4a87      	ldr	r2, [pc, #540]	@ (8014aa0 <HAL_SPI_Init+0x23c>)
 8014882:	4293      	cmp	r3, r2
 8014884:	d00f      	beq.n	80148a6 <HAL_SPI_Init+0x42>
 8014886:	687b      	ldr	r3, [r7, #4]
 8014888:	681b      	ldr	r3, [r3, #0]
 801488a:	4a86      	ldr	r2, [pc, #536]	@ (8014aa4 <HAL_SPI_Init+0x240>)
 801488c:	4293      	cmp	r3, r2
 801488e:	d00a      	beq.n	80148a6 <HAL_SPI_Init+0x42>
 8014890:	687b      	ldr	r3, [r7, #4]
 8014892:	681b      	ldr	r3, [r3, #0]
 8014894:	4a84      	ldr	r2, [pc, #528]	@ (8014aa8 <HAL_SPI_Init+0x244>)
 8014896:	4293      	cmp	r3, r2
 8014898:	d005      	beq.n	80148a6 <HAL_SPI_Init+0x42>
 801489a:	687b      	ldr	r3, [r7, #4]
 801489c:	68db      	ldr	r3, [r3, #12]
 801489e:	2b0f      	cmp	r3, #15
 80148a0:	d901      	bls.n	80148a6 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 80148a2:	2301      	movs	r3, #1
 80148a4:	e0f7      	b.n	8014a96 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80148a6:	6878      	ldr	r0, [r7, #4]
 80148a8:	f001 fd22 	bl	80162f0 <SPI_GetPacketSize>
 80148ac:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80148ae:	687b      	ldr	r3, [r7, #4]
 80148b0:	681b      	ldr	r3, [r3, #0]
 80148b2:	4a7b      	ldr	r2, [pc, #492]	@ (8014aa0 <HAL_SPI_Init+0x23c>)
 80148b4:	4293      	cmp	r3, r2
 80148b6:	d00c      	beq.n	80148d2 <HAL_SPI_Init+0x6e>
 80148b8:	687b      	ldr	r3, [r7, #4]
 80148ba:	681b      	ldr	r3, [r3, #0]
 80148bc:	4a79      	ldr	r2, [pc, #484]	@ (8014aa4 <HAL_SPI_Init+0x240>)
 80148be:	4293      	cmp	r3, r2
 80148c0:	d007      	beq.n	80148d2 <HAL_SPI_Init+0x6e>
 80148c2:	687b      	ldr	r3, [r7, #4]
 80148c4:	681b      	ldr	r3, [r3, #0]
 80148c6:	4a78      	ldr	r2, [pc, #480]	@ (8014aa8 <HAL_SPI_Init+0x244>)
 80148c8:	4293      	cmp	r3, r2
 80148ca:	d002      	beq.n	80148d2 <HAL_SPI_Init+0x6e>
 80148cc:	68fb      	ldr	r3, [r7, #12]
 80148ce:	2b08      	cmp	r3, #8
 80148d0:	d811      	bhi.n	80148f6 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80148d2:	687b      	ldr	r3, [r7, #4]
 80148d4:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80148d6:	4a72      	ldr	r2, [pc, #456]	@ (8014aa0 <HAL_SPI_Init+0x23c>)
 80148d8:	4293      	cmp	r3, r2
 80148da:	d009      	beq.n	80148f0 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80148dc:	687b      	ldr	r3, [r7, #4]
 80148de:	681b      	ldr	r3, [r3, #0]
 80148e0:	4a70      	ldr	r2, [pc, #448]	@ (8014aa4 <HAL_SPI_Init+0x240>)
 80148e2:	4293      	cmp	r3, r2
 80148e4:	d004      	beq.n	80148f0 <HAL_SPI_Init+0x8c>
 80148e6:	687b      	ldr	r3, [r7, #4]
 80148e8:	681b      	ldr	r3, [r3, #0]
 80148ea:	4a6f      	ldr	r2, [pc, #444]	@ (8014aa8 <HAL_SPI_Init+0x244>)
 80148ec:	4293      	cmp	r3, r2
 80148ee:	d104      	bne.n	80148fa <HAL_SPI_Init+0x96>
 80148f0:	68fb      	ldr	r3, [r7, #12]
 80148f2:	2b10      	cmp	r3, #16
 80148f4:	d901      	bls.n	80148fa <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 80148f6:	2301      	movs	r3, #1
 80148f8:	e0cd      	b.n	8014a96 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80148fa:	687b      	ldr	r3, [r7, #4]
 80148fc:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8014900:	b2db      	uxtb	r3, r3
 8014902:	2b00      	cmp	r3, #0
 8014904:	d106      	bne.n	8014914 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8014906:	687b      	ldr	r3, [r7, #4]
 8014908:	2200      	movs	r2, #0
 801490a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 801490e:	6878      	ldr	r0, [r7, #4]
 8014910:	f7f3 fb7c 	bl	800800c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8014914:	687b      	ldr	r3, [r7, #4]
 8014916:	2202      	movs	r2, #2
 8014918:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 801491c:	687b      	ldr	r3, [r7, #4]
 801491e:	681b      	ldr	r3, [r3, #0]
 8014920:	681a      	ldr	r2, [r3, #0]
 8014922:	687b      	ldr	r3, [r7, #4]
 8014924:	681b      	ldr	r3, [r3, #0]
 8014926:	f022 0201 	bic.w	r2, r2, #1
 801492a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 801492c:	687b      	ldr	r3, [r7, #4]
 801492e:	681b      	ldr	r3, [r3, #0]
 8014930:	689b      	ldr	r3, [r3, #8]
 8014932:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8014936:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8014938:	687b      	ldr	r3, [r7, #4]
 801493a:	699b      	ldr	r3, [r3, #24]
 801493c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8014940:	d119      	bne.n	8014976 <HAL_SPI_Init+0x112>
 8014942:	687b      	ldr	r3, [r7, #4]
 8014944:	685b      	ldr	r3, [r3, #4]
 8014946:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 801494a:	d103      	bne.n	8014954 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 801494c:	687b      	ldr	r3, [r7, #4]
 801494e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8014950:	2b00      	cmp	r3, #0
 8014952:	d008      	beq.n	8014966 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8014954:	687b      	ldr	r3, [r7, #4]
 8014956:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8014958:	2b00      	cmp	r3, #0
 801495a:	d10c      	bne.n	8014976 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 801495c:	687b      	ldr	r3, [r7, #4]
 801495e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8014960:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8014964:	d107      	bne.n	8014976 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8014966:	687b      	ldr	r3, [r7, #4]
 8014968:	681b      	ldr	r3, [r3, #0]
 801496a:	681a      	ldr	r2, [r3, #0]
 801496c:	687b      	ldr	r3, [r7, #4]
 801496e:	681b      	ldr	r3, [r3, #0]
 8014970:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8014974:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8014976:	687b      	ldr	r3, [r7, #4]
 8014978:	685b      	ldr	r3, [r3, #4]
 801497a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 801497e:	2b00      	cmp	r3, #0
 8014980:	d00f      	beq.n	80149a2 <HAL_SPI_Init+0x13e>
 8014982:	687b      	ldr	r3, [r7, #4]
 8014984:	68db      	ldr	r3, [r3, #12]
 8014986:	2b06      	cmp	r3, #6
 8014988:	d90b      	bls.n	80149a2 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 801498a:	687b      	ldr	r3, [r7, #4]
 801498c:	681b      	ldr	r3, [r3, #0]
 801498e:	681b      	ldr	r3, [r3, #0]
 8014990:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8014994:	687b      	ldr	r3, [r7, #4]
 8014996:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8014998:	687b      	ldr	r3, [r7, #4]
 801499a:	681b      	ldr	r3, [r3, #0]
 801499c:	430a      	orrs	r2, r1
 801499e:	601a      	str	r2, [r3, #0]
 80149a0:	e007      	b.n	80149b2 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 80149a2:	687b      	ldr	r3, [r7, #4]
 80149a4:	681b      	ldr	r3, [r3, #0]
 80149a6:	681a      	ldr	r2, [r3, #0]
 80149a8:	687b      	ldr	r3, [r7, #4]
 80149aa:	681b      	ldr	r3, [r3, #0]
 80149ac:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80149b0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80149b2:	687b      	ldr	r3, [r7, #4]
 80149b4:	69da      	ldr	r2, [r3, #28]
 80149b6:	687b      	ldr	r3, [r7, #4]
 80149b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80149ba:	431a      	orrs	r2, r3
 80149bc:	68bb      	ldr	r3, [r7, #8]
 80149be:	431a      	orrs	r2, r3
 80149c0:	687b      	ldr	r3, [r7, #4]
 80149c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80149c4:	ea42 0103 	orr.w	r1, r2, r3
 80149c8:	687b      	ldr	r3, [r7, #4]
 80149ca:	68da      	ldr	r2, [r3, #12]
 80149cc:	687b      	ldr	r3, [r7, #4]
 80149ce:	681b      	ldr	r3, [r3, #0]
 80149d0:	430a      	orrs	r2, r1
 80149d2:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80149d4:	687b      	ldr	r3, [r7, #4]
 80149d6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80149d8:	687b      	ldr	r3, [r7, #4]
 80149da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80149dc:	431a      	orrs	r2, r3
 80149de:	687b      	ldr	r3, [r7, #4]
 80149e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80149e2:	431a      	orrs	r2, r3
 80149e4:	687b      	ldr	r3, [r7, #4]
 80149e6:	699b      	ldr	r3, [r3, #24]
 80149e8:	431a      	orrs	r2, r3
 80149ea:	687b      	ldr	r3, [r7, #4]
 80149ec:	691b      	ldr	r3, [r3, #16]
 80149ee:	431a      	orrs	r2, r3
 80149f0:	687b      	ldr	r3, [r7, #4]
 80149f2:	695b      	ldr	r3, [r3, #20]
 80149f4:	431a      	orrs	r2, r3
 80149f6:	687b      	ldr	r3, [r7, #4]
 80149f8:	6a1b      	ldr	r3, [r3, #32]
 80149fa:	431a      	orrs	r2, r3
 80149fc:	687b      	ldr	r3, [r7, #4]
 80149fe:	685b      	ldr	r3, [r3, #4]
 8014a00:	431a      	orrs	r2, r3
 8014a02:	687b      	ldr	r3, [r7, #4]
 8014a04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8014a06:	431a      	orrs	r2, r3
 8014a08:	687b      	ldr	r3, [r7, #4]
 8014a0a:	689b      	ldr	r3, [r3, #8]
 8014a0c:	431a      	orrs	r2, r3
 8014a0e:	687b      	ldr	r3, [r7, #4]
 8014a10:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8014a12:	ea42 0103 	orr.w	r1, r2, r3
 8014a16:	687b      	ldr	r3, [r7, #4]
 8014a18:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8014a1a:	687b      	ldr	r3, [r7, #4]
 8014a1c:	681b      	ldr	r3, [r3, #0]
 8014a1e:	430a      	orrs	r2, r1
 8014a20:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8014a22:	687b      	ldr	r3, [r7, #4]
 8014a24:	685b      	ldr	r3, [r3, #4]
 8014a26:	2b00      	cmp	r3, #0
 8014a28:	d113      	bne.n	8014a52 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8014a2a:	687b      	ldr	r3, [r7, #4]
 8014a2c:	681b      	ldr	r3, [r3, #0]
 8014a2e:	689b      	ldr	r3, [r3, #8]
 8014a30:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8014a34:	687b      	ldr	r3, [r7, #4]
 8014a36:	681b      	ldr	r3, [r3, #0]
 8014a38:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8014a3c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8014a3e:	687b      	ldr	r3, [r7, #4]
 8014a40:	681b      	ldr	r3, [r3, #0]
 8014a42:	689b      	ldr	r3, [r3, #8]
 8014a44:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8014a48:	687b      	ldr	r3, [r7, #4]
 8014a4a:	681b      	ldr	r3, [r3, #0]
 8014a4c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8014a50:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8014a52:	687b      	ldr	r3, [r7, #4]
 8014a54:	681b      	ldr	r3, [r3, #0]
 8014a56:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8014a58:	687b      	ldr	r3, [r7, #4]
 8014a5a:	681b      	ldr	r3, [r3, #0]
 8014a5c:	f022 0201 	bic.w	r2, r2, #1
 8014a60:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8014a62:	687b      	ldr	r3, [r7, #4]
 8014a64:	685b      	ldr	r3, [r3, #4]
 8014a66:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8014a6a:	2b00      	cmp	r3, #0
 8014a6c:	d00a      	beq.n	8014a84 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8014a6e:	687b      	ldr	r3, [r7, #4]
 8014a70:	681b      	ldr	r3, [r3, #0]
 8014a72:	68db      	ldr	r3, [r3, #12]
 8014a74:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8014a78:	687b      	ldr	r3, [r7, #4]
 8014a7a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8014a7c:	687b      	ldr	r3, [r7, #4]
 8014a7e:	681b      	ldr	r3, [r3, #0]
 8014a80:	430a      	orrs	r2, r1
 8014a82:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8014a84:	687b      	ldr	r3, [r7, #4]
 8014a86:	2200      	movs	r2, #0
 8014a88:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8014a8c:	687b      	ldr	r3, [r7, #4]
 8014a8e:	2201      	movs	r2, #1
 8014a90:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8014a94:	2300      	movs	r3, #0
}
 8014a96:	4618      	mov	r0, r3
 8014a98:	3710      	adds	r7, #16
 8014a9a:	46bd      	mov	sp, r7
 8014a9c:	bd80      	pop	{r7, pc}
 8014a9e:	bf00      	nop
 8014aa0:	40013000 	.word	0x40013000
 8014aa4:	40003800 	.word	0x40003800
 8014aa8:	40003c00 	.word	0x40003c00

08014aac <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8014aac:	b580      	push	{r7, lr}
 8014aae:	b088      	sub	sp, #32
 8014ab0:	af02      	add	r7, sp, #8
 8014ab2:	60f8      	str	r0, [r7, #12]
 8014ab4:	60b9      	str	r1, [r7, #8]
 8014ab6:	603b      	str	r3, [r7, #0]
 8014ab8:	4613      	mov	r3, r2
 8014aba:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8014abc:	68fb      	ldr	r3, [r7, #12]
 8014abe:	681b      	ldr	r3, [r3, #0]
 8014ac0:	3320      	adds	r3, #32
 8014ac2:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8014ac4:	f7f4 fd4e 	bl	8009564 <HAL_GetTick>
 8014ac8:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8014aca:	68fb      	ldr	r3, [r7, #12]
 8014acc:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8014ad0:	b2db      	uxtb	r3, r3
 8014ad2:	2b01      	cmp	r3, #1
 8014ad4:	d001      	beq.n	8014ada <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 8014ad6:	2302      	movs	r3, #2
 8014ad8:	e1d1      	b.n	8014e7e <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 8014ada:	68bb      	ldr	r3, [r7, #8]
 8014adc:	2b00      	cmp	r3, #0
 8014ade:	d002      	beq.n	8014ae6 <HAL_SPI_Transmit+0x3a>
 8014ae0:	88fb      	ldrh	r3, [r7, #6]
 8014ae2:	2b00      	cmp	r3, #0
 8014ae4:	d101      	bne.n	8014aea <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 8014ae6:	2301      	movs	r3, #1
 8014ae8:	e1c9      	b.n	8014e7e <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8014aea:	68fb      	ldr	r3, [r7, #12]
 8014aec:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8014af0:	2b01      	cmp	r3, #1
 8014af2:	d101      	bne.n	8014af8 <HAL_SPI_Transmit+0x4c>
 8014af4:	2302      	movs	r3, #2
 8014af6:	e1c2      	b.n	8014e7e <HAL_SPI_Transmit+0x3d2>
 8014af8:	68fb      	ldr	r3, [r7, #12]
 8014afa:	2201      	movs	r2, #1
 8014afc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8014b00:	68fb      	ldr	r3, [r7, #12]
 8014b02:	2203      	movs	r2, #3
 8014b04:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8014b08:	68fb      	ldr	r3, [r7, #12]
 8014b0a:	2200      	movs	r2, #0
 8014b0c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8014b10:	68fb      	ldr	r3, [r7, #12]
 8014b12:	68ba      	ldr	r2, [r7, #8]
 8014b14:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8014b16:	68fb      	ldr	r3, [r7, #12]
 8014b18:	88fa      	ldrh	r2, [r7, #6]
 8014b1a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 8014b1e:	68fb      	ldr	r3, [r7, #12]
 8014b20:	88fa      	ldrh	r2, [r7, #6]
 8014b22:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8014b26:	68fb      	ldr	r3, [r7, #12]
 8014b28:	2200      	movs	r2, #0
 8014b2a:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8014b2c:	68fb      	ldr	r3, [r7, #12]
 8014b2e:	2200      	movs	r2, #0
 8014b30:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8014b34:	68fb      	ldr	r3, [r7, #12]
 8014b36:	2200      	movs	r2, #0
 8014b38:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 8014b3c:	68fb      	ldr	r3, [r7, #12]
 8014b3e:	2200      	movs	r2, #0
 8014b40:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 8014b42:	68fb      	ldr	r3, [r7, #12]
 8014b44:	2200      	movs	r2, #0
 8014b46:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8014b48:	68fb      	ldr	r3, [r7, #12]
 8014b4a:	689b      	ldr	r3, [r3, #8]
 8014b4c:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8014b50:	d108      	bne.n	8014b64 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 8014b52:	68fb      	ldr	r3, [r7, #12]
 8014b54:	681b      	ldr	r3, [r3, #0]
 8014b56:	681a      	ldr	r2, [r3, #0]
 8014b58:	68fb      	ldr	r3, [r7, #12]
 8014b5a:	681b      	ldr	r3, [r3, #0]
 8014b5c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8014b60:	601a      	str	r2, [r3, #0]
 8014b62:	e009      	b.n	8014b78 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8014b64:	68fb      	ldr	r3, [r7, #12]
 8014b66:	681b      	ldr	r3, [r3, #0]
 8014b68:	68db      	ldr	r3, [r3, #12]
 8014b6a:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8014b6e:	68fb      	ldr	r3, [r7, #12]
 8014b70:	681b      	ldr	r3, [r3, #0]
 8014b72:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8014b76:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8014b78:	68fb      	ldr	r3, [r7, #12]
 8014b7a:	681b      	ldr	r3, [r3, #0]
 8014b7c:	685a      	ldr	r2, [r3, #4]
 8014b7e:	4b96      	ldr	r3, [pc, #600]	@ (8014dd8 <HAL_SPI_Transmit+0x32c>)
 8014b80:	4013      	ands	r3, r2
 8014b82:	88f9      	ldrh	r1, [r7, #6]
 8014b84:	68fa      	ldr	r2, [r7, #12]
 8014b86:	6812      	ldr	r2, [r2, #0]
 8014b88:	430b      	orrs	r3, r1
 8014b8a:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8014b8c:	68fb      	ldr	r3, [r7, #12]
 8014b8e:	681b      	ldr	r3, [r3, #0]
 8014b90:	681a      	ldr	r2, [r3, #0]
 8014b92:	68fb      	ldr	r3, [r7, #12]
 8014b94:	681b      	ldr	r3, [r3, #0]
 8014b96:	f042 0201 	orr.w	r2, r2, #1
 8014b9a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8014b9c:	68fb      	ldr	r3, [r7, #12]
 8014b9e:	685b      	ldr	r3, [r3, #4]
 8014ba0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8014ba4:	d107      	bne.n	8014bb6 <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8014ba6:	68fb      	ldr	r3, [r7, #12]
 8014ba8:	681b      	ldr	r3, [r3, #0]
 8014baa:	681a      	ldr	r2, [r3, #0]
 8014bac:	68fb      	ldr	r3, [r7, #12]
 8014bae:	681b      	ldr	r3, [r3, #0]
 8014bb0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8014bb4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8014bb6:	68fb      	ldr	r3, [r7, #12]
 8014bb8:	68db      	ldr	r3, [r3, #12]
 8014bba:	2b0f      	cmp	r3, #15
 8014bbc:	d947      	bls.n	8014c4e <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8014bbe:	e03f      	b.n	8014c40 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8014bc0:	68fb      	ldr	r3, [r7, #12]
 8014bc2:	681b      	ldr	r3, [r3, #0]
 8014bc4:	695b      	ldr	r3, [r3, #20]
 8014bc6:	f003 0302 	and.w	r3, r3, #2
 8014bca:	2b02      	cmp	r3, #2
 8014bcc:	d114      	bne.n	8014bf8 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8014bce:	68fb      	ldr	r3, [r7, #12]
 8014bd0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8014bd2:	68fb      	ldr	r3, [r7, #12]
 8014bd4:	681b      	ldr	r3, [r3, #0]
 8014bd6:	6812      	ldr	r2, [r2, #0]
 8014bd8:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8014bda:	68fb      	ldr	r3, [r7, #12]
 8014bdc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8014bde:	1d1a      	adds	r2, r3, #4
 8014be0:	68fb      	ldr	r3, [r7, #12]
 8014be2:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8014be4:	68fb      	ldr	r3, [r7, #12]
 8014be6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8014bea:	b29b      	uxth	r3, r3
 8014bec:	3b01      	subs	r3, #1
 8014bee:	b29a      	uxth	r2, r3
 8014bf0:	68fb      	ldr	r3, [r7, #12]
 8014bf2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8014bf6:	e023      	b.n	8014c40 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8014bf8:	f7f4 fcb4 	bl	8009564 <HAL_GetTick>
 8014bfc:	4602      	mov	r2, r0
 8014bfe:	693b      	ldr	r3, [r7, #16]
 8014c00:	1ad3      	subs	r3, r2, r3
 8014c02:	683a      	ldr	r2, [r7, #0]
 8014c04:	429a      	cmp	r2, r3
 8014c06:	d803      	bhi.n	8014c10 <HAL_SPI_Transmit+0x164>
 8014c08:	683b      	ldr	r3, [r7, #0]
 8014c0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014c0e:	d102      	bne.n	8014c16 <HAL_SPI_Transmit+0x16a>
 8014c10:	683b      	ldr	r3, [r7, #0]
 8014c12:	2b00      	cmp	r3, #0
 8014c14:	d114      	bne.n	8014c40 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8014c16:	68f8      	ldr	r0, [r7, #12]
 8014c18:	f001 fa9c 	bl	8016154 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8014c1c:	68fb      	ldr	r3, [r7, #12]
 8014c1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8014c22:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8014c26:	68fb      	ldr	r3, [r7, #12]
 8014c28:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8014c2c:	68fb      	ldr	r3, [r7, #12]
 8014c2e:	2201      	movs	r2, #1
 8014c30:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8014c34:	68fb      	ldr	r3, [r7, #12]
 8014c36:	2200      	movs	r2, #0
 8014c38:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8014c3c:	2303      	movs	r3, #3
 8014c3e:	e11e      	b.n	8014e7e <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8014c40:	68fb      	ldr	r3, [r7, #12]
 8014c42:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8014c46:	b29b      	uxth	r3, r3
 8014c48:	2b00      	cmp	r3, #0
 8014c4a:	d1b9      	bne.n	8014bc0 <HAL_SPI_Transmit+0x114>
 8014c4c:	e0f1      	b.n	8014e32 <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8014c4e:	68fb      	ldr	r3, [r7, #12]
 8014c50:	68db      	ldr	r3, [r3, #12]
 8014c52:	2b07      	cmp	r3, #7
 8014c54:	f240 80e6 	bls.w	8014e24 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8014c58:	e05d      	b.n	8014d16 <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8014c5a:	68fb      	ldr	r3, [r7, #12]
 8014c5c:	681b      	ldr	r3, [r3, #0]
 8014c5e:	695b      	ldr	r3, [r3, #20]
 8014c60:	f003 0302 	and.w	r3, r3, #2
 8014c64:	2b02      	cmp	r3, #2
 8014c66:	d132      	bne.n	8014cce <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8014c68:	68fb      	ldr	r3, [r7, #12]
 8014c6a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8014c6e:	b29b      	uxth	r3, r3
 8014c70:	2b01      	cmp	r3, #1
 8014c72:	d918      	bls.n	8014ca6 <HAL_SPI_Transmit+0x1fa>
 8014c74:	68fb      	ldr	r3, [r7, #12]
 8014c76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014c78:	2b00      	cmp	r3, #0
 8014c7a:	d014      	beq.n	8014ca6 <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8014c7c:	68fb      	ldr	r3, [r7, #12]
 8014c7e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8014c80:	68fb      	ldr	r3, [r7, #12]
 8014c82:	681b      	ldr	r3, [r3, #0]
 8014c84:	6812      	ldr	r2, [r2, #0]
 8014c86:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8014c88:	68fb      	ldr	r3, [r7, #12]
 8014c8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8014c8c:	1d1a      	adds	r2, r3, #4
 8014c8e:	68fb      	ldr	r3, [r7, #12]
 8014c90:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8014c92:	68fb      	ldr	r3, [r7, #12]
 8014c94:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8014c98:	b29b      	uxth	r3, r3
 8014c9a:	3b02      	subs	r3, #2
 8014c9c:	b29a      	uxth	r2, r3
 8014c9e:	68fb      	ldr	r3, [r7, #12]
 8014ca0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8014ca4:	e037      	b.n	8014d16 <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8014ca6:	68fb      	ldr	r3, [r7, #12]
 8014ca8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8014caa:	881a      	ldrh	r2, [r3, #0]
 8014cac:	697b      	ldr	r3, [r7, #20]
 8014cae:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8014cb0:	68fb      	ldr	r3, [r7, #12]
 8014cb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8014cb4:	1c9a      	adds	r2, r3, #2
 8014cb6:	68fb      	ldr	r3, [r7, #12]
 8014cb8:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8014cba:	68fb      	ldr	r3, [r7, #12]
 8014cbc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8014cc0:	b29b      	uxth	r3, r3
 8014cc2:	3b01      	subs	r3, #1
 8014cc4:	b29a      	uxth	r2, r3
 8014cc6:	68fb      	ldr	r3, [r7, #12]
 8014cc8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8014ccc:	e023      	b.n	8014d16 <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8014cce:	f7f4 fc49 	bl	8009564 <HAL_GetTick>
 8014cd2:	4602      	mov	r2, r0
 8014cd4:	693b      	ldr	r3, [r7, #16]
 8014cd6:	1ad3      	subs	r3, r2, r3
 8014cd8:	683a      	ldr	r2, [r7, #0]
 8014cda:	429a      	cmp	r2, r3
 8014cdc:	d803      	bhi.n	8014ce6 <HAL_SPI_Transmit+0x23a>
 8014cde:	683b      	ldr	r3, [r7, #0]
 8014ce0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014ce4:	d102      	bne.n	8014cec <HAL_SPI_Transmit+0x240>
 8014ce6:	683b      	ldr	r3, [r7, #0]
 8014ce8:	2b00      	cmp	r3, #0
 8014cea:	d114      	bne.n	8014d16 <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8014cec:	68f8      	ldr	r0, [r7, #12]
 8014cee:	f001 fa31 	bl	8016154 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8014cf2:	68fb      	ldr	r3, [r7, #12]
 8014cf4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8014cf8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8014cfc:	68fb      	ldr	r3, [r7, #12]
 8014cfe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8014d02:	68fb      	ldr	r3, [r7, #12]
 8014d04:	2201      	movs	r2, #1
 8014d06:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8014d0a:	68fb      	ldr	r3, [r7, #12]
 8014d0c:	2200      	movs	r2, #0
 8014d0e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8014d12:	2303      	movs	r3, #3
 8014d14:	e0b3      	b.n	8014e7e <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8014d16:	68fb      	ldr	r3, [r7, #12]
 8014d18:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8014d1c:	b29b      	uxth	r3, r3
 8014d1e:	2b00      	cmp	r3, #0
 8014d20:	d19b      	bne.n	8014c5a <HAL_SPI_Transmit+0x1ae>
 8014d22:	e086      	b.n	8014e32 <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8014d24:	68fb      	ldr	r3, [r7, #12]
 8014d26:	681b      	ldr	r3, [r3, #0]
 8014d28:	695b      	ldr	r3, [r3, #20]
 8014d2a:	f003 0302 	and.w	r3, r3, #2
 8014d2e:	2b02      	cmp	r3, #2
 8014d30:	d154      	bne.n	8014ddc <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8014d32:	68fb      	ldr	r3, [r7, #12]
 8014d34:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8014d38:	b29b      	uxth	r3, r3
 8014d3a:	2b03      	cmp	r3, #3
 8014d3c:	d918      	bls.n	8014d70 <HAL_SPI_Transmit+0x2c4>
 8014d3e:	68fb      	ldr	r3, [r7, #12]
 8014d40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014d42:	2b40      	cmp	r3, #64	@ 0x40
 8014d44:	d914      	bls.n	8014d70 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8014d46:	68fb      	ldr	r3, [r7, #12]
 8014d48:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8014d4a:	68fb      	ldr	r3, [r7, #12]
 8014d4c:	681b      	ldr	r3, [r3, #0]
 8014d4e:	6812      	ldr	r2, [r2, #0]
 8014d50:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8014d52:	68fb      	ldr	r3, [r7, #12]
 8014d54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8014d56:	1d1a      	adds	r2, r3, #4
 8014d58:	68fb      	ldr	r3, [r7, #12]
 8014d5a:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8014d5c:	68fb      	ldr	r3, [r7, #12]
 8014d5e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8014d62:	b29b      	uxth	r3, r3
 8014d64:	3b04      	subs	r3, #4
 8014d66:	b29a      	uxth	r2, r3
 8014d68:	68fb      	ldr	r3, [r7, #12]
 8014d6a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8014d6e:	e059      	b.n	8014e24 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8014d70:	68fb      	ldr	r3, [r7, #12]
 8014d72:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8014d76:	b29b      	uxth	r3, r3
 8014d78:	2b01      	cmp	r3, #1
 8014d7a:	d917      	bls.n	8014dac <HAL_SPI_Transmit+0x300>
 8014d7c:	68fb      	ldr	r3, [r7, #12]
 8014d7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014d80:	2b00      	cmp	r3, #0
 8014d82:	d013      	beq.n	8014dac <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8014d84:	68fb      	ldr	r3, [r7, #12]
 8014d86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8014d88:	881a      	ldrh	r2, [r3, #0]
 8014d8a:	697b      	ldr	r3, [r7, #20]
 8014d8c:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8014d8e:	68fb      	ldr	r3, [r7, #12]
 8014d90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8014d92:	1c9a      	adds	r2, r3, #2
 8014d94:	68fb      	ldr	r3, [r7, #12]
 8014d96:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8014d98:	68fb      	ldr	r3, [r7, #12]
 8014d9a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8014d9e:	b29b      	uxth	r3, r3
 8014da0:	3b02      	subs	r3, #2
 8014da2:	b29a      	uxth	r2, r3
 8014da4:	68fb      	ldr	r3, [r7, #12]
 8014da6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8014daa:	e03b      	b.n	8014e24 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8014dac:	68fb      	ldr	r3, [r7, #12]
 8014dae:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8014db0:	68fb      	ldr	r3, [r7, #12]
 8014db2:	681b      	ldr	r3, [r3, #0]
 8014db4:	3320      	adds	r3, #32
 8014db6:	7812      	ldrb	r2, [r2, #0]
 8014db8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8014dba:	68fb      	ldr	r3, [r7, #12]
 8014dbc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8014dbe:	1c5a      	adds	r2, r3, #1
 8014dc0:	68fb      	ldr	r3, [r7, #12]
 8014dc2:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8014dc4:	68fb      	ldr	r3, [r7, #12]
 8014dc6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8014dca:	b29b      	uxth	r3, r3
 8014dcc:	3b01      	subs	r3, #1
 8014dce:	b29a      	uxth	r2, r3
 8014dd0:	68fb      	ldr	r3, [r7, #12]
 8014dd2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8014dd6:	e025      	b.n	8014e24 <HAL_SPI_Transmit+0x378>
 8014dd8:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8014ddc:	f7f4 fbc2 	bl	8009564 <HAL_GetTick>
 8014de0:	4602      	mov	r2, r0
 8014de2:	693b      	ldr	r3, [r7, #16]
 8014de4:	1ad3      	subs	r3, r2, r3
 8014de6:	683a      	ldr	r2, [r7, #0]
 8014de8:	429a      	cmp	r2, r3
 8014dea:	d803      	bhi.n	8014df4 <HAL_SPI_Transmit+0x348>
 8014dec:	683b      	ldr	r3, [r7, #0]
 8014dee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014df2:	d102      	bne.n	8014dfa <HAL_SPI_Transmit+0x34e>
 8014df4:	683b      	ldr	r3, [r7, #0]
 8014df6:	2b00      	cmp	r3, #0
 8014df8:	d114      	bne.n	8014e24 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8014dfa:	68f8      	ldr	r0, [r7, #12]
 8014dfc:	f001 f9aa 	bl	8016154 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8014e00:	68fb      	ldr	r3, [r7, #12]
 8014e02:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8014e06:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8014e0a:	68fb      	ldr	r3, [r7, #12]
 8014e0c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8014e10:	68fb      	ldr	r3, [r7, #12]
 8014e12:	2201      	movs	r2, #1
 8014e14:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8014e18:	68fb      	ldr	r3, [r7, #12]
 8014e1a:	2200      	movs	r2, #0
 8014e1c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8014e20:	2303      	movs	r3, #3
 8014e22:	e02c      	b.n	8014e7e <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8014e24:	68fb      	ldr	r3, [r7, #12]
 8014e26:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8014e2a:	b29b      	uxth	r3, r3
 8014e2c:	2b00      	cmp	r3, #0
 8014e2e:	f47f af79 	bne.w	8014d24 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8014e32:	693b      	ldr	r3, [r7, #16]
 8014e34:	9300      	str	r3, [sp, #0]
 8014e36:	683b      	ldr	r3, [r7, #0]
 8014e38:	2200      	movs	r2, #0
 8014e3a:	2108      	movs	r1, #8
 8014e3c:	68f8      	ldr	r0, [r7, #12]
 8014e3e:	f001 fa29 	bl	8016294 <SPI_WaitOnFlagUntilTimeout>
 8014e42:	4603      	mov	r3, r0
 8014e44:	2b00      	cmp	r3, #0
 8014e46:	d007      	beq.n	8014e58 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8014e48:	68fb      	ldr	r3, [r7, #12]
 8014e4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8014e4e:	f043 0220 	orr.w	r2, r3, #32
 8014e52:	68fb      	ldr	r3, [r7, #12]
 8014e54:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8014e58:	68f8      	ldr	r0, [r7, #12]
 8014e5a:	f001 f97b 	bl	8016154 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8014e5e:	68fb      	ldr	r3, [r7, #12]
 8014e60:	2201      	movs	r2, #1
 8014e62:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8014e66:	68fb      	ldr	r3, [r7, #12]
 8014e68:	2200      	movs	r2, #0
 8014e6a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8014e6e:	68fb      	ldr	r3, [r7, #12]
 8014e70:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8014e74:	2b00      	cmp	r3, #0
 8014e76:	d001      	beq.n	8014e7c <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 8014e78:	2301      	movs	r3, #1
 8014e7a:	e000      	b.n	8014e7e <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 8014e7c:	2300      	movs	r3, #0
  }
}
 8014e7e:	4618      	mov	r0, r3
 8014e80:	3718      	adds	r7, #24
 8014e82:	46bd      	mov	sp, r7
 8014e84:	bd80      	pop	{r7, pc}
 8014e86:	bf00      	nop

08014e88 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8014e88:	b580      	push	{r7, lr}
 8014e8a:	b088      	sub	sp, #32
 8014e8c:	af00      	add	r7, sp, #0
 8014e8e:	60f8      	str	r0, [r7, #12]
 8014e90:	60b9      	str	r1, [r7, #8]
 8014e92:	603b      	str	r3, [r7, #0]
 8014e94:	4613      	mov	r3, r2
 8014e96:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 8014e98:	68fb      	ldr	r3, [r7, #12]
 8014e9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014e9c:	095b      	lsrs	r3, r3, #5
 8014e9e:	b29b      	uxth	r3, r3
 8014ea0:	3301      	adds	r3, #1
 8014ea2:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8014ea4:	68fb      	ldr	r3, [r7, #12]
 8014ea6:	681b      	ldr	r3, [r3, #0]
 8014ea8:	3330      	adds	r3, #48	@ 0x30
 8014eaa:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8014eac:	f7f4 fb5a 	bl	8009564 <HAL_GetTick>
 8014eb0:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8014eb2:	68fb      	ldr	r3, [r7, #12]
 8014eb4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8014eb8:	b2db      	uxtb	r3, r3
 8014eba:	2b01      	cmp	r3, #1
 8014ebc:	d001      	beq.n	8014ec2 <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 8014ebe:	2302      	movs	r3, #2
 8014ec0:	e250      	b.n	8015364 <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 8014ec2:	68bb      	ldr	r3, [r7, #8]
 8014ec4:	2b00      	cmp	r3, #0
 8014ec6:	d002      	beq.n	8014ece <HAL_SPI_Receive+0x46>
 8014ec8:	88fb      	ldrh	r3, [r7, #6]
 8014eca:	2b00      	cmp	r3, #0
 8014ecc:	d101      	bne.n	8014ed2 <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 8014ece:	2301      	movs	r3, #1
 8014ed0:	e248      	b.n	8015364 <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8014ed2:	68fb      	ldr	r3, [r7, #12]
 8014ed4:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8014ed8:	2b01      	cmp	r3, #1
 8014eda:	d101      	bne.n	8014ee0 <HAL_SPI_Receive+0x58>
 8014edc:	2302      	movs	r3, #2
 8014ede:	e241      	b.n	8015364 <HAL_SPI_Receive+0x4dc>
 8014ee0:	68fb      	ldr	r3, [r7, #12]
 8014ee2:	2201      	movs	r2, #1
 8014ee4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8014ee8:	68fb      	ldr	r3, [r7, #12]
 8014eea:	2204      	movs	r2, #4
 8014eec:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8014ef0:	68fb      	ldr	r3, [r7, #12]
 8014ef2:	2200      	movs	r2, #0
 8014ef4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8014ef8:	68fb      	ldr	r3, [r7, #12]
 8014efa:	68ba      	ldr	r2, [r7, #8]
 8014efc:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 8014efe:	68fb      	ldr	r3, [r7, #12]
 8014f00:	88fa      	ldrh	r2, [r7, #6]
 8014f02:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 8014f06:	68fb      	ldr	r3, [r7, #12]
 8014f08:	88fa      	ldrh	r2, [r7, #6]
 8014f0a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8014f0e:	68fb      	ldr	r3, [r7, #12]
 8014f10:	2200      	movs	r2, #0
 8014f12:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8014f14:	68fb      	ldr	r3, [r7, #12]
 8014f16:	2200      	movs	r2, #0
 8014f18:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8014f1c:	68fb      	ldr	r3, [r7, #12]
 8014f1e:	2200      	movs	r2, #0
 8014f20:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 8014f24:	68fb      	ldr	r3, [r7, #12]
 8014f26:	2200      	movs	r2, #0
 8014f28:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 8014f2a:	68fb      	ldr	r3, [r7, #12]
 8014f2c:	2200      	movs	r2, #0
 8014f2e:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8014f30:	68fb      	ldr	r3, [r7, #12]
 8014f32:	689b      	ldr	r3, [r3, #8]
 8014f34:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8014f38:	d108      	bne.n	8014f4c <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 8014f3a:	68fb      	ldr	r3, [r7, #12]
 8014f3c:	681b      	ldr	r3, [r3, #0]
 8014f3e:	681a      	ldr	r2, [r3, #0]
 8014f40:	68fb      	ldr	r3, [r7, #12]
 8014f42:	681b      	ldr	r3, [r3, #0]
 8014f44:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8014f48:	601a      	str	r2, [r3, #0]
 8014f4a:	e009      	b.n	8014f60 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 8014f4c:	68fb      	ldr	r3, [r7, #12]
 8014f4e:	681b      	ldr	r3, [r3, #0]
 8014f50:	68db      	ldr	r3, [r3, #12]
 8014f52:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8014f56:	68fb      	ldr	r3, [r7, #12]
 8014f58:	681b      	ldr	r3, [r3, #0]
 8014f5a:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8014f5e:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8014f60:	68fb      	ldr	r3, [r7, #12]
 8014f62:	681b      	ldr	r3, [r3, #0]
 8014f64:	685a      	ldr	r2, [r3, #4]
 8014f66:	4b95      	ldr	r3, [pc, #596]	@ (80151bc <HAL_SPI_Receive+0x334>)
 8014f68:	4013      	ands	r3, r2
 8014f6a:	88f9      	ldrh	r1, [r7, #6]
 8014f6c:	68fa      	ldr	r2, [r7, #12]
 8014f6e:	6812      	ldr	r2, [r2, #0]
 8014f70:	430b      	orrs	r3, r1
 8014f72:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8014f74:	68fb      	ldr	r3, [r7, #12]
 8014f76:	681b      	ldr	r3, [r3, #0]
 8014f78:	681a      	ldr	r2, [r3, #0]
 8014f7a:	68fb      	ldr	r3, [r7, #12]
 8014f7c:	681b      	ldr	r3, [r3, #0]
 8014f7e:	f042 0201 	orr.w	r2, r2, #1
 8014f82:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8014f84:	68fb      	ldr	r3, [r7, #12]
 8014f86:	685b      	ldr	r3, [r3, #4]
 8014f88:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8014f8c:	d107      	bne.n	8014f9e <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8014f8e:	68fb      	ldr	r3, [r7, #12]
 8014f90:	681b      	ldr	r3, [r3, #0]
 8014f92:	681a      	ldr	r2, [r3, #0]
 8014f94:	68fb      	ldr	r3, [r7, #12]
 8014f96:	681b      	ldr	r3, [r3, #0]
 8014f98:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8014f9c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8014f9e:	68fb      	ldr	r3, [r7, #12]
 8014fa0:	68db      	ldr	r3, [r3, #12]
 8014fa2:	2b0f      	cmp	r3, #15
 8014fa4:	d96c      	bls.n	8015080 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8014fa6:	e064      	b.n	8015072 <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8014fa8:	68fb      	ldr	r3, [r7, #12]
 8014faa:	681b      	ldr	r3, [r3, #0]
 8014fac:	695b      	ldr	r3, [r3, #20]
 8014fae:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8014fb0:	68fb      	ldr	r3, [r7, #12]
 8014fb2:	681b      	ldr	r3, [r3, #0]
 8014fb4:	695b      	ldr	r3, [r3, #20]
 8014fb6:	f003 0301 	and.w	r3, r3, #1
 8014fba:	2b01      	cmp	r3, #1
 8014fbc:	d114      	bne.n	8014fe8 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8014fbe:	68fb      	ldr	r3, [r7, #12]
 8014fc0:	681a      	ldr	r2, [r3, #0]
 8014fc2:	68fb      	ldr	r3, [r7, #12]
 8014fc4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014fc6:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8014fc8:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8014fca:	68fb      	ldr	r3, [r7, #12]
 8014fcc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014fce:	1d1a      	adds	r2, r3, #4
 8014fd0:	68fb      	ldr	r3, [r7, #12]
 8014fd2:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8014fd4:	68fb      	ldr	r3, [r7, #12]
 8014fd6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014fda:	b29b      	uxth	r3, r3
 8014fdc:	3b01      	subs	r3, #1
 8014fde:	b29a      	uxth	r2, r3
 8014fe0:	68fb      	ldr	r3, [r7, #12]
 8014fe2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8014fe6:	e044      	b.n	8015072 <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8014fe8:	68fb      	ldr	r3, [r7, #12]
 8014fea:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014fee:	b29b      	uxth	r3, r3
 8014ff0:	8bfa      	ldrh	r2, [r7, #30]
 8014ff2:	429a      	cmp	r2, r3
 8014ff4:	d919      	bls.n	801502a <HAL_SPI_Receive+0x1a2>
 8014ff6:	693b      	ldr	r3, [r7, #16]
 8014ff8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8014ffc:	2b00      	cmp	r3, #0
 8014ffe:	d014      	beq.n	801502a <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8015000:	68fb      	ldr	r3, [r7, #12]
 8015002:	681a      	ldr	r2, [r3, #0]
 8015004:	68fb      	ldr	r3, [r7, #12]
 8015006:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015008:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 801500a:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 801500c:	68fb      	ldr	r3, [r7, #12]
 801500e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015010:	1d1a      	adds	r2, r3, #4
 8015012:	68fb      	ldr	r3, [r7, #12]
 8015014:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8015016:	68fb      	ldr	r3, [r7, #12]
 8015018:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801501c:	b29b      	uxth	r3, r3
 801501e:	3b01      	subs	r3, #1
 8015020:	b29a      	uxth	r2, r3
 8015022:	68fb      	ldr	r3, [r7, #12]
 8015024:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8015028:	e023      	b.n	8015072 <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801502a:	f7f4 fa9b 	bl	8009564 <HAL_GetTick>
 801502e:	4602      	mov	r2, r0
 8015030:	697b      	ldr	r3, [r7, #20]
 8015032:	1ad3      	subs	r3, r2, r3
 8015034:	683a      	ldr	r2, [r7, #0]
 8015036:	429a      	cmp	r2, r3
 8015038:	d803      	bhi.n	8015042 <HAL_SPI_Receive+0x1ba>
 801503a:	683b      	ldr	r3, [r7, #0]
 801503c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015040:	d102      	bne.n	8015048 <HAL_SPI_Receive+0x1c0>
 8015042:	683b      	ldr	r3, [r7, #0]
 8015044:	2b00      	cmp	r3, #0
 8015046:	d114      	bne.n	8015072 <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8015048:	68f8      	ldr	r0, [r7, #12]
 801504a:	f001 f883 	bl	8016154 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 801504e:	68fb      	ldr	r3, [r7, #12]
 8015050:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015054:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8015058:	68fb      	ldr	r3, [r7, #12]
 801505a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 801505e:	68fb      	ldr	r3, [r7, #12]
 8015060:	2201      	movs	r2, #1
 8015062:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8015066:	68fb      	ldr	r3, [r7, #12]
 8015068:	2200      	movs	r2, #0
 801506a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 801506e:	2303      	movs	r3, #3
 8015070:	e178      	b.n	8015364 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8015072:	68fb      	ldr	r3, [r7, #12]
 8015074:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8015078:	b29b      	uxth	r3, r3
 801507a:	2b00      	cmp	r3, #0
 801507c:	d194      	bne.n	8014fa8 <HAL_SPI_Receive+0x120>
 801507e:	e15e      	b.n	801533e <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8015080:	68fb      	ldr	r3, [r7, #12]
 8015082:	68db      	ldr	r3, [r3, #12]
 8015084:	2b07      	cmp	r3, #7
 8015086:	f240 8153 	bls.w	8015330 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 801508a:	e08f      	b.n	80151ac <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 801508c:	68fb      	ldr	r3, [r7, #12]
 801508e:	681b      	ldr	r3, [r3, #0]
 8015090:	695b      	ldr	r3, [r3, #20]
 8015092:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8015094:	68fb      	ldr	r3, [r7, #12]
 8015096:	681b      	ldr	r3, [r3, #0]
 8015098:	695b      	ldr	r3, [r3, #20]
 801509a:	f003 0301 	and.w	r3, r3, #1
 801509e:	2b01      	cmp	r3, #1
 80150a0:	d114      	bne.n	80150cc <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80150a2:	68fb      	ldr	r3, [r7, #12]
 80150a4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80150a6:	69ba      	ldr	r2, [r7, #24]
 80150a8:	8812      	ldrh	r2, [r2, #0]
 80150aa:	b292      	uxth	r2, r2
 80150ac:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80150ae:	68fb      	ldr	r3, [r7, #12]
 80150b0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80150b2:	1c9a      	adds	r2, r3, #2
 80150b4:	68fb      	ldr	r3, [r7, #12]
 80150b6:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 80150b8:	68fb      	ldr	r3, [r7, #12]
 80150ba:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80150be:	b29b      	uxth	r3, r3
 80150c0:	3b01      	subs	r3, #1
 80150c2:	b29a      	uxth	r2, r3
 80150c4:	68fb      	ldr	r3, [r7, #12]
 80150c6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80150ca:	e06f      	b.n	80151ac <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 80150cc:	68fb      	ldr	r3, [r7, #12]
 80150ce:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80150d2:	b29b      	uxth	r3, r3
 80150d4:	8bfa      	ldrh	r2, [r7, #30]
 80150d6:	429a      	cmp	r2, r3
 80150d8:	d924      	bls.n	8015124 <HAL_SPI_Receive+0x29c>
 80150da:	693b      	ldr	r3, [r7, #16]
 80150dc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80150e0:	2b00      	cmp	r3, #0
 80150e2:	d01f      	beq.n	8015124 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80150e4:	68fb      	ldr	r3, [r7, #12]
 80150e6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80150e8:	69ba      	ldr	r2, [r7, #24]
 80150ea:	8812      	ldrh	r2, [r2, #0]
 80150ec:	b292      	uxth	r2, r2
 80150ee:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80150f0:	68fb      	ldr	r3, [r7, #12]
 80150f2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80150f4:	1c9a      	adds	r2, r3, #2
 80150f6:	68fb      	ldr	r3, [r7, #12]
 80150f8:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80150fa:	68fb      	ldr	r3, [r7, #12]
 80150fc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80150fe:	69ba      	ldr	r2, [r7, #24]
 8015100:	8812      	ldrh	r2, [r2, #0]
 8015102:	b292      	uxth	r2, r2
 8015104:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8015106:	68fb      	ldr	r3, [r7, #12]
 8015108:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801510a:	1c9a      	adds	r2, r3, #2
 801510c:	68fb      	ldr	r3, [r7, #12]
 801510e:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 8015110:	68fb      	ldr	r3, [r7, #12]
 8015112:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8015116:	b29b      	uxth	r3, r3
 8015118:	3b02      	subs	r3, #2
 801511a:	b29a      	uxth	r2, r3
 801511c:	68fb      	ldr	r3, [r7, #12]
 801511e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8015122:	e043      	b.n	80151ac <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8015124:	68fb      	ldr	r3, [r7, #12]
 8015126:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801512a:	b29b      	uxth	r3, r3
 801512c:	2b01      	cmp	r3, #1
 801512e:	d119      	bne.n	8015164 <HAL_SPI_Receive+0x2dc>
 8015130:	693b      	ldr	r3, [r7, #16]
 8015132:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8015136:	2b00      	cmp	r3, #0
 8015138:	d014      	beq.n	8015164 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 801513a:	68fb      	ldr	r3, [r7, #12]
 801513c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801513e:	69ba      	ldr	r2, [r7, #24]
 8015140:	8812      	ldrh	r2, [r2, #0]
 8015142:	b292      	uxth	r2, r2
 8015144:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8015146:	68fb      	ldr	r3, [r7, #12]
 8015148:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801514a:	1c9a      	adds	r2, r3, #2
 801514c:	68fb      	ldr	r3, [r7, #12]
 801514e:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8015150:	68fb      	ldr	r3, [r7, #12]
 8015152:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8015156:	b29b      	uxth	r3, r3
 8015158:	3b01      	subs	r3, #1
 801515a:	b29a      	uxth	r2, r3
 801515c:	68fb      	ldr	r3, [r7, #12]
 801515e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8015162:	e023      	b.n	80151ac <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8015164:	f7f4 f9fe 	bl	8009564 <HAL_GetTick>
 8015168:	4602      	mov	r2, r0
 801516a:	697b      	ldr	r3, [r7, #20]
 801516c:	1ad3      	subs	r3, r2, r3
 801516e:	683a      	ldr	r2, [r7, #0]
 8015170:	429a      	cmp	r2, r3
 8015172:	d803      	bhi.n	801517c <HAL_SPI_Receive+0x2f4>
 8015174:	683b      	ldr	r3, [r7, #0]
 8015176:	f1b3 3fff 	cmp.w	r3, #4294967295
 801517a:	d102      	bne.n	8015182 <HAL_SPI_Receive+0x2fa>
 801517c:	683b      	ldr	r3, [r7, #0]
 801517e:	2b00      	cmp	r3, #0
 8015180:	d114      	bne.n	80151ac <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8015182:	68f8      	ldr	r0, [r7, #12]
 8015184:	f000 ffe6 	bl	8016154 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8015188:	68fb      	ldr	r3, [r7, #12]
 801518a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801518e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8015192:	68fb      	ldr	r3, [r7, #12]
 8015194:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8015198:	68fb      	ldr	r3, [r7, #12]
 801519a:	2201      	movs	r2, #1
 801519c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80151a0:	68fb      	ldr	r3, [r7, #12]
 80151a2:	2200      	movs	r2, #0
 80151a4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80151a8:	2303      	movs	r3, #3
 80151aa:	e0db      	b.n	8015364 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 80151ac:	68fb      	ldr	r3, [r7, #12]
 80151ae:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80151b2:	b29b      	uxth	r3, r3
 80151b4:	2b00      	cmp	r3, #0
 80151b6:	f47f af69 	bne.w	801508c <HAL_SPI_Receive+0x204>
 80151ba:	e0c0      	b.n	801533e <HAL_SPI_Receive+0x4b6>
 80151bc:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 80151c0:	68fb      	ldr	r3, [r7, #12]
 80151c2:	681b      	ldr	r3, [r3, #0]
 80151c4:	695b      	ldr	r3, [r3, #20]
 80151c6:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80151c8:	68fb      	ldr	r3, [r7, #12]
 80151ca:	681b      	ldr	r3, [r3, #0]
 80151cc:	695b      	ldr	r3, [r3, #20]
 80151ce:	f003 0301 	and.w	r3, r3, #1
 80151d2:	2b01      	cmp	r3, #1
 80151d4:	d117      	bne.n	8015206 <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80151d6:	68fb      	ldr	r3, [r7, #12]
 80151d8:	681b      	ldr	r3, [r3, #0]
 80151da:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80151de:	68fb      	ldr	r3, [r7, #12]
 80151e0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80151e2:	7812      	ldrb	r2, [r2, #0]
 80151e4:	b2d2      	uxtb	r2, r2
 80151e6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80151e8:	68fb      	ldr	r3, [r7, #12]
 80151ea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80151ec:	1c5a      	adds	r2, r3, #1
 80151ee:	68fb      	ldr	r3, [r7, #12]
 80151f0:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 80151f2:	68fb      	ldr	r3, [r7, #12]
 80151f4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80151f8:	b29b      	uxth	r3, r3
 80151fa:	3b01      	subs	r3, #1
 80151fc:	b29a      	uxth	r2, r3
 80151fe:	68fb      	ldr	r3, [r7, #12]
 8015200:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8015204:	e094      	b.n	8015330 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8015206:	68fb      	ldr	r3, [r7, #12]
 8015208:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801520c:	b29b      	uxth	r3, r3
 801520e:	8bfa      	ldrh	r2, [r7, #30]
 8015210:	429a      	cmp	r2, r3
 8015212:	d946      	bls.n	80152a2 <HAL_SPI_Receive+0x41a>
 8015214:	693b      	ldr	r3, [r7, #16]
 8015216:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 801521a:	2b00      	cmp	r3, #0
 801521c:	d041      	beq.n	80152a2 <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 801521e:	68fb      	ldr	r3, [r7, #12]
 8015220:	681b      	ldr	r3, [r3, #0]
 8015222:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8015226:	68fb      	ldr	r3, [r7, #12]
 8015228:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801522a:	7812      	ldrb	r2, [r2, #0]
 801522c:	b2d2      	uxtb	r2, r2
 801522e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8015230:	68fb      	ldr	r3, [r7, #12]
 8015232:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015234:	1c5a      	adds	r2, r3, #1
 8015236:	68fb      	ldr	r3, [r7, #12]
 8015238:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 801523a:	68fb      	ldr	r3, [r7, #12]
 801523c:	681b      	ldr	r3, [r3, #0]
 801523e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8015242:	68fb      	ldr	r3, [r7, #12]
 8015244:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015246:	7812      	ldrb	r2, [r2, #0]
 8015248:	b2d2      	uxtb	r2, r2
 801524a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 801524c:	68fb      	ldr	r3, [r7, #12]
 801524e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015250:	1c5a      	adds	r2, r3, #1
 8015252:	68fb      	ldr	r3, [r7, #12]
 8015254:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8015256:	68fb      	ldr	r3, [r7, #12]
 8015258:	681b      	ldr	r3, [r3, #0]
 801525a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801525e:	68fb      	ldr	r3, [r7, #12]
 8015260:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015262:	7812      	ldrb	r2, [r2, #0]
 8015264:	b2d2      	uxtb	r2, r2
 8015266:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8015268:	68fb      	ldr	r3, [r7, #12]
 801526a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801526c:	1c5a      	adds	r2, r3, #1
 801526e:	68fb      	ldr	r3, [r7, #12]
 8015270:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8015272:	68fb      	ldr	r3, [r7, #12]
 8015274:	681b      	ldr	r3, [r3, #0]
 8015276:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801527a:	68fb      	ldr	r3, [r7, #12]
 801527c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801527e:	7812      	ldrb	r2, [r2, #0]
 8015280:	b2d2      	uxtb	r2, r2
 8015282:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8015284:	68fb      	ldr	r3, [r7, #12]
 8015286:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015288:	1c5a      	adds	r2, r3, #1
 801528a:	68fb      	ldr	r3, [r7, #12]
 801528c:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 801528e:	68fb      	ldr	r3, [r7, #12]
 8015290:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8015294:	b29b      	uxth	r3, r3
 8015296:	3b04      	subs	r3, #4
 8015298:	b29a      	uxth	r2, r3
 801529a:	68fb      	ldr	r3, [r7, #12]
 801529c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80152a0:	e046      	b.n	8015330 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 80152a2:	68fb      	ldr	r3, [r7, #12]
 80152a4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80152a8:	b29b      	uxth	r3, r3
 80152aa:	2b03      	cmp	r3, #3
 80152ac:	d81c      	bhi.n	80152e8 <HAL_SPI_Receive+0x460>
 80152ae:	693b      	ldr	r3, [r7, #16]
 80152b0:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 80152b4:	2b00      	cmp	r3, #0
 80152b6:	d017      	beq.n	80152e8 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80152b8:	68fb      	ldr	r3, [r7, #12]
 80152ba:	681b      	ldr	r3, [r3, #0]
 80152bc:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80152c0:	68fb      	ldr	r3, [r7, #12]
 80152c2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80152c4:	7812      	ldrb	r2, [r2, #0]
 80152c6:	b2d2      	uxtb	r2, r2
 80152c8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80152ca:	68fb      	ldr	r3, [r7, #12]
 80152cc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80152ce:	1c5a      	adds	r2, r3, #1
 80152d0:	68fb      	ldr	r3, [r7, #12]
 80152d2:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 80152d4:	68fb      	ldr	r3, [r7, #12]
 80152d6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80152da:	b29b      	uxth	r3, r3
 80152dc:	3b01      	subs	r3, #1
 80152de:	b29a      	uxth	r2, r3
 80152e0:	68fb      	ldr	r3, [r7, #12]
 80152e2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80152e6:	e023      	b.n	8015330 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80152e8:	f7f4 f93c 	bl	8009564 <HAL_GetTick>
 80152ec:	4602      	mov	r2, r0
 80152ee:	697b      	ldr	r3, [r7, #20]
 80152f0:	1ad3      	subs	r3, r2, r3
 80152f2:	683a      	ldr	r2, [r7, #0]
 80152f4:	429a      	cmp	r2, r3
 80152f6:	d803      	bhi.n	8015300 <HAL_SPI_Receive+0x478>
 80152f8:	683b      	ldr	r3, [r7, #0]
 80152fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80152fe:	d102      	bne.n	8015306 <HAL_SPI_Receive+0x47e>
 8015300:	683b      	ldr	r3, [r7, #0]
 8015302:	2b00      	cmp	r3, #0
 8015304:	d114      	bne.n	8015330 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8015306:	68f8      	ldr	r0, [r7, #12]
 8015308:	f000 ff24 	bl	8016154 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 801530c:	68fb      	ldr	r3, [r7, #12]
 801530e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015312:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8015316:	68fb      	ldr	r3, [r7, #12]
 8015318:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 801531c:	68fb      	ldr	r3, [r7, #12]
 801531e:	2201      	movs	r2, #1
 8015320:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8015324:	68fb      	ldr	r3, [r7, #12]
 8015326:	2200      	movs	r2, #0
 8015328:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 801532c:	2303      	movs	r3, #3
 801532e:	e019      	b.n	8015364 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8015330:	68fb      	ldr	r3, [r7, #12]
 8015332:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8015336:	b29b      	uxth	r3, r3
 8015338:	2b00      	cmp	r3, #0
 801533a:	f47f af41 	bne.w	80151c0 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 801533e:	68f8      	ldr	r0, [r7, #12]
 8015340:	f000 ff08 	bl	8016154 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8015344:	68fb      	ldr	r3, [r7, #12]
 8015346:	2201      	movs	r2, #1
 8015348:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 801534c:	68fb      	ldr	r3, [r7, #12]
 801534e:	2200      	movs	r2, #0
 8015350:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8015354:	68fb      	ldr	r3, [r7, #12]
 8015356:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801535a:	2b00      	cmp	r3, #0
 801535c:	d001      	beq.n	8015362 <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 801535e:	2301      	movs	r3, #1
 8015360:	e000      	b.n	8015364 <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 8015362:	2300      	movs	r3, #0
  }
}
 8015364:	4618      	mov	r0, r3
 8015366:	3720      	adds	r7, #32
 8015368:	46bd      	mov	sp, r7
 801536a:	bd80      	pop	{r7, pc}

0801536c <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 801536c:	b580      	push	{r7, lr}
 801536e:	b08e      	sub	sp, #56	@ 0x38
 8015370:	af02      	add	r7, sp, #8
 8015372:	60f8      	str	r0, [r7, #12]
 8015374:	60b9      	str	r1, [r7, #8]
 8015376:	607a      	str	r2, [r7, #4]
 8015378:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 801537a:	68fb      	ldr	r3, [r7, #12]
 801537c:	681b      	ldr	r3, [r3, #0]
 801537e:	3320      	adds	r3, #32
 8015380:	627b      	str	r3, [r7, #36]	@ 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8015382:	68fb      	ldr	r3, [r7, #12]
 8015384:	681b      	ldr	r3, [r3, #0]
 8015386:	3330      	adds	r3, #48	@ 0x30
 8015388:	623b      	str	r3, [r7, #32]
  uint32_t   fifo_length;
  uint32_t   temp_sr_reg;
  uint16_t   initial_TxXferCount;
  uint16_t   initial_RxXferCount;
  uint16_t   init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 801538a:	68fb      	ldr	r3, [r7, #12]
 801538c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801538e:	095b      	lsrs	r3, r3, #5
 8015390:	b29b      	uxth	r3, r3
 8015392:	3301      	adds	r3, #1
 8015394:	83fb      	strh	r3, [r7, #30]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8015396:	f7f4 f8e5 	bl	8009564 <HAL_GetTick>
 801539a:	61b8      	str	r0, [r7, #24]

  initial_TxXferCount = Size;
 801539c:	887b      	ldrh	r3, [r7, #2]
 801539e:	857b      	strh	r3, [r7, #42]	@ 0x2a
  initial_RxXferCount = Size;
 80153a0:	887b      	ldrh	r3, [r7, #2]
 80153a2:	853b      	strh	r3, [r7, #40]	@ 0x28

  if (hspi->State != HAL_SPI_STATE_READY)
 80153a4:	68fb      	ldr	r3, [r7, #12]
 80153a6:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80153aa:	b2db      	uxtb	r3, r3
 80153ac:	2b01      	cmp	r3, #1
 80153ae:	d001      	beq.n	80153b4 <HAL_SPI_TransmitReceive+0x48>
  {
    return HAL_BUSY;
 80153b0:	2302      	movs	r3, #2
 80153b2:	e310      	b.n	80159d6 <HAL_SPI_TransmitReceive+0x66a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 80153b4:	68bb      	ldr	r3, [r7, #8]
 80153b6:	2b00      	cmp	r3, #0
 80153b8:	d005      	beq.n	80153c6 <HAL_SPI_TransmitReceive+0x5a>
 80153ba:	687b      	ldr	r3, [r7, #4]
 80153bc:	2b00      	cmp	r3, #0
 80153be:	d002      	beq.n	80153c6 <HAL_SPI_TransmitReceive+0x5a>
 80153c0:	887b      	ldrh	r3, [r7, #2]
 80153c2:	2b00      	cmp	r3, #0
 80153c4:	d101      	bne.n	80153ca <HAL_SPI_TransmitReceive+0x5e>
  {
    return HAL_ERROR;
 80153c6:	2301      	movs	r3, #1
 80153c8:	e305      	b.n	80159d6 <HAL_SPI_TransmitReceive+0x66a>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80153ca:	68fb      	ldr	r3, [r7, #12]
 80153cc:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80153d0:	2b01      	cmp	r3, #1
 80153d2:	d101      	bne.n	80153d8 <HAL_SPI_TransmitReceive+0x6c>
 80153d4:	2302      	movs	r3, #2
 80153d6:	e2fe      	b.n	80159d6 <HAL_SPI_TransmitReceive+0x66a>
 80153d8:	68fb      	ldr	r3, [r7, #12]
 80153da:	2201      	movs	r2, #1
 80153dc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 80153e0:	68fb      	ldr	r3, [r7, #12]
 80153e2:	2205      	movs	r2, #5
 80153e4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80153e8:	68fb      	ldr	r3, [r7, #12]
 80153ea:	2200      	movs	r2, #0
 80153ec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80153f0:	68fb      	ldr	r3, [r7, #12]
 80153f2:	687a      	ldr	r2, [r7, #4]
 80153f4:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount = Size;
 80153f6:	68fb      	ldr	r3, [r7, #12]
 80153f8:	887a      	ldrh	r2, [r7, #2]
 80153fa:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferSize  = Size;
 80153fe:	68fb      	ldr	r3, [r7, #12]
 8015400:	887a      	ldrh	r2, [r7, #2]
 8015402:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8015406:	68fb      	ldr	r3, [r7, #12]
 8015408:	68ba      	ldr	r2, [r7, #8]
 801540a:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount = Size;
 801540c:	68fb      	ldr	r3, [r7, #12]
 801540e:	887a      	ldrh	r2, [r7, #2]
 8015410:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->TxXferSize  = Size;
 8015414:	68fb      	ldr	r3, [r7, #12]
 8015416:	887a      	ldrh	r2, [r7, #2]
 8015418:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 801541c:	68fb      	ldr	r3, [r7, #12]
 801541e:	2200      	movs	r2, #0
 8015420:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 8015422:	68fb      	ldr	r3, [r7, #12]
 8015424:	2200      	movs	r2, #0
 8015426:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 8015428:	68fb      	ldr	r3, [r7, #12]
 801542a:	681b      	ldr	r3, [r3, #0]
 801542c:	68da      	ldr	r2, [r3, #12]
 801542e:	68fb      	ldr	r3, [r7, #12]
 8015430:	681b      	ldr	r3, [r3, #0]
 8015432:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 8015436:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_HIGHEND_INSTANCE(hspi->Instance))
 8015438:	68fb      	ldr	r3, [r7, #12]
 801543a:	681b      	ldr	r3, [r3, #0]
 801543c:	4a70      	ldr	r2, [pc, #448]	@ (8015600 <HAL_SPI_TransmitReceive+0x294>)
 801543e:	4293      	cmp	r3, r2
 8015440:	d009      	beq.n	8015456 <HAL_SPI_TransmitReceive+0xea>
 8015442:	68fb      	ldr	r3, [r7, #12]
 8015444:	681b      	ldr	r3, [r3, #0]
 8015446:	4a6f      	ldr	r2, [pc, #444]	@ (8015604 <HAL_SPI_TransmitReceive+0x298>)
 8015448:	4293      	cmp	r3, r2
 801544a:	d004      	beq.n	8015456 <HAL_SPI_TransmitReceive+0xea>
 801544c:	68fb      	ldr	r3, [r7, #12]
 801544e:	681b      	ldr	r3, [r3, #0]
 8015450:	4a6d      	ldr	r2, [pc, #436]	@ (8015608 <HAL_SPI_TransmitReceive+0x29c>)
 8015452:	4293      	cmp	r3, r2
 8015454:	d102      	bne.n	801545c <HAL_SPI_TransmitReceive+0xf0>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 8015456:	2310      	movs	r3, #16
 8015458:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801545a:	e001      	b.n	8015460 <HAL_SPI_TransmitReceive+0xf4>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 801545c:	2308      	movs	r3, #8
 801545e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8015460:	68fb      	ldr	r3, [r7, #12]
 8015462:	681b      	ldr	r3, [r3, #0]
 8015464:	685a      	ldr	r2, [r3, #4]
 8015466:	4b69      	ldr	r3, [pc, #420]	@ (801560c <HAL_SPI_TransmitReceive+0x2a0>)
 8015468:	4013      	ands	r3, r2
 801546a:	8879      	ldrh	r1, [r7, #2]
 801546c:	68fa      	ldr	r2, [r7, #12]
 801546e:	6812      	ldr	r2, [r2, #0]
 8015470:	430b      	orrs	r3, r1
 8015472:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8015474:	68fb      	ldr	r3, [r7, #12]
 8015476:	681b      	ldr	r3, [r3, #0]
 8015478:	681a      	ldr	r2, [r3, #0]
 801547a:	68fb      	ldr	r3, [r7, #12]
 801547c:	681b      	ldr	r3, [r3, #0]
 801547e:	f042 0201 	orr.w	r2, r2, #1
 8015482:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8015484:	68fb      	ldr	r3, [r7, #12]
 8015486:	685b      	ldr	r3, [r3, #4]
 8015488:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 801548c:	d107      	bne.n	801549e <HAL_SPI_TransmitReceive+0x132>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 801548e:	68fb      	ldr	r3, [r7, #12]
 8015490:	681b      	ldr	r3, [r3, #0]
 8015492:	681a      	ldr	r2, [r3, #0]
 8015494:	68fb      	ldr	r3, [r7, #12]
 8015496:	681b      	ldr	r3, [r3, #0]
 8015498:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 801549c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 801549e:	68fb      	ldr	r3, [r7, #12]
 80154a0:	68db      	ldr	r3, [r3, #12]
 80154a2:	2b0f      	cmp	r3, #15
 80154a4:	f240 80a2 	bls.w	80155ec <HAL_SPI_TransmitReceive+0x280>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 80154a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80154aa:	089b      	lsrs	r3, r3, #2
 80154ac:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80154ae:	e094      	b.n	80155da <HAL_SPI_TransmitReceive+0x26e>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 80154b0:	68fb      	ldr	r3, [r7, #12]
 80154b2:	681b      	ldr	r3, [r3, #0]
 80154b4:	695b      	ldr	r3, [r3, #20]
 80154b6:	f003 0302 	and.w	r3, r3, #2
 80154ba:	2b02      	cmp	r3, #2
 80154bc:	d120      	bne.n	8015500 <HAL_SPI_TransmitReceive+0x194>
 80154be:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80154c0:	2b00      	cmp	r3, #0
 80154c2:	d01d      	beq.n	8015500 <HAL_SPI_TransmitReceive+0x194>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 80154c4:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80154c6:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 80154c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80154ca:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 80154cc:	429a      	cmp	r2, r3
 80154ce:	d217      	bcs.n	8015500 <HAL_SPI_TransmitReceive+0x194>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80154d0:	68fb      	ldr	r3, [r7, #12]
 80154d2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80154d4:	68fb      	ldr	r3, [r7, #12]
 80154d6:	681b      	ldr	r3, [r3, #0]
 80154d8:	6812      	ldr	r2, [r2, #0]
 80154da:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80154dc:	68fb      	ldr	r3, [r7, #12]
 80154de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80154e0:	1d1a      	adds	r2, r3, #4
 80154e2:	68fb      	ldr	r3, [r7, #12]
 80154e4:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount --;
 80154e6:	68fb      	ldr	r3, [r7, #12]
 80154e8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80154ec:	b29b      	uxth	r3, r3
 80154ee:	3b01      	subs	r3, #1
 80154f0:	b29a      	uxth	r2, r3
 80154f2:	68fb      	ldr	r3, [r7, #12]
 80154f4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 80154f8:	68fb      	ldr	r3, [r7, #12]
 80154fa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80154fe:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8015500:	68fb      	ldr	r3, [r7, #12]
 8015502:	681b      	ldr	r3, [r3, #0]
 8015504:	695b      	ldr	r3, [r3, #20]
 8015506:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8015508:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 801550a:	2b00      	cmp	r3, #0
 801550c:	d065      	beq.n	80155da <HAL_SPI_TransmitReceive+0x26e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 801550e:	68fb      	ldr	r3, [r7, #12]
 8015510:	681b      	ldr	r3, [r3, #0]
 8015512:	695b      	ldr	r3, [r3, #20]
 8015514:	f003 0301 	and.w	r3, r3, #1
 8015518:	2b01      	cmp	r3, #1
 801551a:	d118      	bne.n	801554e <HAL_SPI_TransmitReceive+0x1e2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 801551c:	68fb      	ldr	r3, [r7, #12]
 801551e:	681a      	ldr	r2, [r3, #0]
 8015520:	68fb      	ldr	r3, [r7, #12]
 8015522:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015524:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8015526:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8015528:	68fb      	ldr	r3, [r7, #12]
 801552a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801552c:	1d1a      	adds	r2, r3, #4
 801552e:	68fb      	ldr	r3, [r7, #12]
 8015530:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8015532:	68fb      	ldr	r3, [r7, #12]
 8015534:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8015538:	b29b      	uxth	r3, r3
 801553a:	3b01      	subs	r3, #1
 801553c:	b29a      	uxth	r2, r3
 801553e:	68fb      	ldr	r3, [r7, #12]
 8015540:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8015544:	68fb      	ldr	r3, [r7, #12]
 8015546:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801554a:	853b      	strh	r3, [r7, #40]	@ 0x28
 801554c:	e045      	b.n	80155da <HAL_SPI_TransmitReceive+0x26e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 801554e:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8015550:	8bfb      	ldrh	r3, [r7, #30]
 8015552:	429a      	cmp	r2, r3
 8015554:	d21d      	bcs.n	8015592 <HAL_SPI_TransmitReceive+0x226>
 8015556:	697b      	ldr	r3, [r7, #20]
 8015558:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 801555c:	2b00      	cmp	r3, #0
 801555e:	d018      	beq.n	8015592 <HAL_SPI_TransmitReceive+0x226>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8015560:	68fb      	ldr	r3, [r7, #12]
 8015562:	681a      	ldr	r2, [r3, #0]
 8015564:	68fb      	ldr	r3, [r7, #12]
 8015566:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015568:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 801556a:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 801556c:	68fb      	ldr	r3, [r7, #12]
 801556e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015570:	1d1a      	adds	r2, r3, #4
 8015572:	68fb      	ldr	r3, [r7, #12]
 8015574:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8015576:	68fb      	ldr	r3, [r7, #12]
 8015578:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801557c:	b29b      	uxth	r3, r3
 801557e:	3b01      	subs	r3, #1
 8015580:	b29a      	uxth	r2, r3
 8015582:	68fb      	ldr	r3, [r7, #12]
 8015584:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8015588:	68fb      	ldr	r3, [r7, #12]
 801558a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801558e:	853b      	strh	r3, [r7, #40]	@ 0x28
 8015590:	e023      	b.n	80155da <HAL_SPI_TransmitReceive+0x26e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8015592:	f7f3 ffe7 	bl	8009564 <HAL_GetTick>
 8015596:	4602      	mov	r2, r0
 8015598:	69bb      	ldr	r3, [r7, #24]
 801559a:	1ad3      	subs	r3, r2, r3
 801559c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801559e:	429a      	cmp	r2, r3
 80155a0:	d803      	bhi.n	80155aa <HAL_SPI_TransmitReceive+0x23e>
 80155a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80155a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80155a8:	d102      	bne.n	80155b0 <HAL_SPI_TransmitReceive+0x244>
 80155aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80155ac:	2b00      	cmp	r3, #0
 80155ae:	d114      	bne.n	80155da <HAL_SPI_TransmitReceive+0x26e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 80155b0:	68f8      	ldr	r0, [r7, #12]
 80155b2:	f000 fdcf 	bl	8016154 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80155b6:	68fb      	ldr	r3, [r7, #12]
 80155b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80155bc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80155c0:	68fb      	ldr	r3, [r7, #12]
 80155c2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 80155c6:	68fb      	ldr	r3, [r7, #12]
 80155c8:	2201      	movs	r2, #1
 80155ca:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 80155ce:	68fb      	ldr	r3, [r7, #12]
 80155d0:	2200      	movs	r2, #0
 80155d2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 80155d6:	2303      	movs	r3, #3
 80155d8:	e1fd      	b.n	80159d6 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80155da:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80155dc:	2b00      	cmp	r3, #0
 80155de:	f47f af67 	bne.w	80154b0 <HAL_SPI_TransmitReceive+0x144>
 80155e2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80155e4:	2b00      	cmp	r3, #0
 80155e6:	f47f af63 	bne.w	80154b0 <HAL_SPI_TransmitReceive+0x144>
 80155ea:	e1ce      	b.n	801598a <HAL_SPI_TransmitReceive+0x61e>
        }
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80155ec:	68fb      	ldr	r3, [r7, #12]
 80155ee:	68db      	ldr	r3, [r3, #12]
 80155f0:	2b07      	cmp	r3, #7
 80155f2:	f240 81c2 	bls.w	801597a <HAL_SPI_TransmitReceive+0x60e>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 80155f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80155f8:	085b      	lsrs	r3, r3, #1
 80155fa:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80155fc:	e0c9      	b.n	8015792 <HAL_SPI_TransmitReceive+0x426>
 80155fe:	bf00      	nop
 8015600:	40013000 	.word	0x40013000
 8015604:	40003800 	.word	0x40003800
 8015608:	40003c00 	.word	0x40003c00
 801560c:	ffff0000 	.word	0xffff0000
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8015610:	68fb      	ldr	r3, [r7, #12]
 8015612:	681b      	ldr	r3, [r3, #0]
 8015614:	695b      	ldr	r3, [r3, #20]
 8015616:	f003 0302 	and.w	r3, r3, #2
 801561a:	2b02      	cmp	r3, #2
 801561c:	d11f      	bne.n	801565e <HAL_SPI_TransmitReceive+0x2f2>
 801561e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8015620:	2b00      	cmp	r3, #0
 8015622:	d01c      	beq.n	801565e <HAL_SPI_TransmitReceive+0x2f2>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8015624:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8015626:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8015628:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801562a:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 801562c:	429a      	cmp	r2, r3
 801562e:	d216      	bcs.n	801565e <HAL_SPI_TransmitReceive+0x2f2>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8015630:	68fb      	ldr	r3, [r7, #12]
 8015632:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8015634:	881a      	ldrh	r2, [r3, #0]
 8015636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015638:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801563a:	68fb      	ldr	r3, [r7, #12]
 801563c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801563e:	1c9a      	adds	r2, r3, #2
 8015640:	68fb      	ldr	r3, [r7, #12]
 8015642:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8015644:	68fb      	ldr	r3, [r7, #12]
 8015646:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801564a:	b29b      	uxth	r3, r3
 801564c:	3b01      	subs	r3, #1
 801564e:	b29a      	uxth	r2, r3
 8015650:	68fb      	ldr	r3, [r7, #12]
 8015652:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8015656:	68fb      	ldr	r3, [r7, #12]
 8015658:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801565c:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 801565e:	68fb      	ldr	r3, [r7, #12]
 8015660:	681b      	ldr	r3, [r3, #0]
 8015662:	695b      	ldr	r3, [r3, #20]
 8015664:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8015666:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8015668:	2b00      	cmp	r3, #0
 801566a:	f000 8092 	beq.w	8015792 <HAL_SPI_TransmitReceive+0x426>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 801566e:	68fb      	ldr	r3, [r7, #12]
 8015670:	681b      	ldr	r3, [r3, #0]
 8015672:	695b      	ldr	r3, [r3, #20]
 8015674:	f003 0301 	and.w	r3, r3, #1
 8015678:	2b01      	cmp	r3, #1
 801567a:	d118      	bne.n	80156ae <HAL_SPI_TransmitReceive+0x342>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 801567c:	68fb      	ldr	r3, [r7, #12]
 801567e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015680:	6a3a      	ldr	r2, [r7, #32]
 8015682:	8812      	ldrh	r2, [r2, #0]
 8015684:	b292      	uxth	r2, r2
 8015686:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8015688:	68fb      	ldr	r3, [r7, #12]
 801568a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801568c:	1c9a      	adds	r2, r3, #2
 801568e:	68fb      	ldr	r3, [r7, #12]
 8015690:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8015692:	68fb      	ldr	r3, [r7, #12]
 8015694:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8015698:	b29b      	uxth	r3, r3
 801569a:	3b01      	subs	r3, #1
 801569c:	b29a      	uxth	r2, r3
 801569e:	68fb      	ldr	r3, [r7, #12]
 80156a0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80156a4:	68fb      	ldr	r3, [r7, #12]
 80156a6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80156aa:	853b      	strh	r3, [r7, #40]	@ 0x28
 80156ac:	e071      	b.n	8015792 <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 80156ae:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80156b0:	8bfb      	ldrh	r3, [r7, #30]
 80156b2:	429a      	cmp	r2, r3
 80156b4:	d228      	bcs.n	8015708 <HAL_SPI_TransmitReceive+0x39c>
 80156b6:	697b      	ldr	r3, [r7, #20]
 80156b8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80156bc:	2b00      	cmp	r3, #0
 80156be:	d023      	beq.n	8015708 <HAL_SPI_TransmitReceive+0x39c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80156c0:	68fb      	ldr	r3, [r7, #12]
 80156c2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80156c4:	6a3a      	ldr	r2, [r7, #32]
 80156c6:	8812      	ldrh	r2, [r2, #0]
 80156c8:	b292      	uxth	r2, r2
 80156ca:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80156cc:	68fb      	ldr	r3, [r7, #12]
 80156ce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80156d0:	1c9a      	adds	r2, r3, #2
 80156d2:	68fb      	ldr	r3, [r7, #12]
 80156d4:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80156d6:	68fb      	ldr	r3, [r7, #12]
 80156d8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80156da:	6a3a      	ldr	r2, [r7, #32]
 80156dc:	8812      	ldrh	r2, [r2, #0]
 80156de:	b292      	uxth	r2, r2
 80156e0:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80156e2:	68fb      	ldr	r3, [r7, #12]
 80156e4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80156e6:	1c9a      	adds	r2, r3, #2
 80156e8:	68fb      	ldr	r3, [r7, #12]
 80156ea:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 80156ec:	68fb      	ldr	r3, [r7, #12]
 80156ee:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80156f2:	b29b      	uxth	r3, r3
 80156f4:	3b02      	subs	r3, #2
 80156f6:	b29a      	uxth	r2, r3
 80156f8:	68fb      	ldr	r3, [r7, #12]
 80156fa:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80156fe:	68fb      	ldr	r3, [r7, #12]
 8015700:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8015704:	853b      	strh	r3, [r7, #40]	@ 0x28
 8015706:	e044      	b.n	8015792 <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8015708:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 801570a:	2b01      	cmp	r3, #1
 801570c:	d11d      	bne.n	801574a <HAL_SPI_TransmitReceive+0x3de>
 801570e:	697b      	ldr	r3, [r7, #20]
 8015710:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8015714:	2b00      	cmp	r3, #0
 8015716:	d018      	beq.n	801574a <HAL_SPI_TransmitReceive+0x3de>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8015718:	68fb      	ldr	r3, [r7, #12]
 801571a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801571c:	6a3a      	ldr	r2, [r7, #32]
 801571e:	8812      	ldrh	r2, [r2, #0]
 8015720:	b292      	uxth	r2, r2
 8015722:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8015724:	68fb      	ldr	r3, [r7, #12]
 8015726:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015728:	1c9a      	adds	r2, r3, #2
 801572a:	68fb      	ldr	r3, [r7, #12]
 801572c:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 801572e:	68fb      	ldr	r3, [r7, #12]
 8015730:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8015734:	b29b      	uxth	r3, r3
 8015736:	3b01      	subs	r3, #1
 8015738:	b29a      	uxth	r2, r3
 801573a:	68fb      	ldr	r3, [r7, #12]
 801573c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8015740:	68fb      	ldr	r3, [r7, #12]
 8015742:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8015746:	853b      	strh	r3, [r7, #40]	@ 0x28
 8015748:	e023      	b.n	8015792 <HAL_SPI_TransmitReceive+0x426>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801574a:	f7f3 ff0b 	bl	8009564 <HAL_GetTick>
 801574e:	4602      	mov	r2, r0
 8015750:	69bb      	ldr	r3, [r7, #24]
 8015752:	1ad3      	subs	r3, r2, r3
 8015754:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8015756:	429a      	cmp	r2, r3
 8015758:	d803      	bhi.n	8015762 <HAL_SPI_TransmitReceive+0x3f6>
 801575a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801575c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015760:	d102      	bne.n	8015768 <HAL_SPI_TransmitReceive+0x3fc>
 8015762:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015764:	2b00      	cmp	r3, #0
 8015766:	d114      	bne.n	8015792 <HAL_SPI_TransmitReceive+0x426>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8015768:	68f8      	ldr	r0, [r7, #12]
 801576a:	f000 fcf3 	bl	8016154 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 801576e:	68fb      	ldr	r3, [r7, #12]
 8015770:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015774:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8015778:	68fb      	ldr	r3, [r7, #12]
 801577a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 801577e:	68fb      	ldr	r3, [r7, #12]
 8015780:	2201      	movs	r2, #1
 8015782:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 8015786:	68fb      	ldr	r3, [r7, #12]
 8015788:	2200      	movs	r2, #0
 801578a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 801578e:	2303      	movs	r3, #3
 8015790:	e121      	b.n	80159d6 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8015792:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8015794:	2b00      	cmp	r3, #0
 8015796:	f47f af3b 	bne.w	8015610 <HAL_SPI_TransmitReceive+0x2a4>
 801579a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 801579c:	2b00      	cmp	r3, #0
 801579e:	f47f af37 	bne.w	8015610 <HAL_SPI_TransmitReceive+0x2a4>
 80157a2:	e0f2      	b.n	801598a <HAL_SPI_TransmitReceive+0x61e>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 80157a4:	68fb      	ldr	r3, [r7, #12]
 80157a6:	681b      	ldr	r3, [r3, #0]
 80157a8:	695b      	ldr	r3, [r3, #20]
 80157aa:	f003 0302 	and.w	r3, r3, #2
 80157ae:	2b02      	cmp	r3, #2
 80157b0:	d121      	bne.n	80157f6 <HAL_SPI_TransmitReceive+0x48a>
 80157b2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80157b4:	2b00      	cmp	r3, #0
 80157b6:	d01e      	beq.n	80157f6 <HAL_SPI_TransmitReceive+0x48a>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 80157b8:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80157ba:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 80157bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80157be:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 80157c0:	429a      	cmp	r2, r3
 80157c2:	d218      	bcs.n	80157f6 <HAL_SPI_TransmitReceive+0x48a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80157c4:	68fb      	ldr	r3, [r7, #12]
 80157c6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80157c8:	68fb      	ldr	r3, [r7, #12]
 80157ca:	681b      	ldr	r3, [r3, #0]
 80157cc:	3320      	adds	r3, #32
 80157ce:	7812      	ldrb	r2, [r2, #0]
 80157d0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80157d2:	68fb      	ldr	r3, [r7, #12]
 80157d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80157d6:	1c5a      	adds	r2, r3, #1
 80157d8:	68fb      	ldr	r3, [r7, #12]
 80157da:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 80157dc:	68fb      	ldr	r3, [r7, #12]
 80157de:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80157e2:	b29b      	uxth	r3, r3
 80157e4:	3b01      	subs	r3, #1
 80157e6:	b29a      	uxth	r2, r3
 80157e8:	68fb      	ldr	r3, [r7, #12]
 80157ea:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 80157ee:	68fb      	ldr	r3, [r7, #12]
 80157f0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80157f4:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 80157f6:	68fb      	ldr	r3, [r7, #12]
 80157f8:	681b      	ldr	r3, [r3, #0]
 80157fa:	695b      	ldr	r3, [r3, #20]
 80157fc:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 80157fe:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8015800:	2b00      	cmp	r3, #0
 8015802:	f000 80ba 	beq.w	801597a <HAL_SPI_TransmitReceive+0x60e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8015806:	68fb      	ldr	r3, [r7, #12]
 8015808:	681b      	ldr	r3, [r3, #0]
 801580a:	695b      	ldr	r3, [r3, #20]
 801580c:	f003 0301 	and.w	r3, r3, #1
 8015810:	2b01      	cmp	r3, #1
 8015812:	d11b      	bne.n	801584c <HAL_SPI_TransmitReceive+0x4e0>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8015814:	68fb      	ldr	r3, [r7, #12]
 8015816:	681b      	ldr	r3, [r3, #0]
 8015818:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801581c:	68fb      	ldr	r3, [r7, #12]
 801581e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015820:	7812      	ldrb	r2, [r2, #0]
 8015822:	b2d2      	uxtb	r2, r2
 8015824:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8015826:	68fb      	ldr	r3, [r7, #12]
 8015828:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801582a:	1c5a      	adds	r2, r3, #1
 801582c:	68fb      	ldr	r3, [r7, #12]
 801582e:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8015830:	68fb      	ldr	r3, [r7, #12]
 8015832:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8015836:	b29b      	uxth	r3, r3
 8015838:	3b01      	subs	r3, #1
 801583a:	b29a      	uxth	r2, r3
 801583c:	68fb      	ldr	r3, [r7, #12]
 801583e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8015842:	68fb      	ldr	r3, [r7, #12]
 8015844:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8015848:	853b      	strh	r3, [r7, #40]	@ 0x28
 801584a:	e096      	b.n	801597a <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 801584c:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 801584e:	8bfb      	ldrh	r3, [r7, #30]
 8015850:	429a      	cmp	r2, r3
 8015852:	d24a      	bcs.n	80158ea <HAL_SPI_TransmitReceive+0x57e>
 8015854:	697b      	ldr	r3, [r7, #20]
 8015856:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 801585a:	2b00      	cmp	r3, #0
 801585c:	d045      	beq.n	80158ea <HAL_SPI_TransmitReceive+0x57e>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 801585e:	68fb      	ldr	r3, [r7, #12]
 8015860:	681b      	ldr	r3, [r3, #0]
 8015862:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8015866:	68fb      	ldr	r3, [r7, #12]
 8015868:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801586a:	7812      	ldrb	r2, [r2, #0]
 801586c:	b2d2      	uxtb	r2, r2
 801586e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8015870:	68fb      	ldr	r3, [r7, #12]
 8015872:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015874:	1c5a      	adds	r2, r3, #1
 8015876:	68fb      	ldr	r3, [r7, #12]
 8015878:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 801587a:	68fb      	ldr	r3, [r7, #12]
 801587c:	681b      	ldr	r3, [r3, #0]
 801587e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8015882:	68fb      	ldr	r3, [r7, #12]
 8015884:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015886:	7812      	ldrb	r2, [r2, #0]
 8015888:	b2d2      	uxtb	r2, r2
 801588a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 801588c:	68fb      	ldr	r3, [r7, #12]
 801588e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015890:	1c5a      	adds	r2, r3, #1
 8015892:	68fb      	ldr	r3, [r7, #12]
 8015894:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8015896:	68fb      	ldr	r3, [r7, #12]
 8015898:	681b      	ldr	r3, [r3, #0]
 801589a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801589e:	68fb      	ldr	r3, [r7, #12]
 80158a0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80158a2:	7812      	ldrb	r2, [r2, #0]
 80158a4:	b2d2      	uxtb	r2, r2
 80158a6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80158a8:	68fb      	ldr	r3, [r7, #12]
 80158aa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80158ac:	1c5a      	adds	r2, r3, #1
 80158ae:	68fb      	ldr	r3, [r7, #12]
 80158b0:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80158b2:	68fb      	ldr	r3, [r7, #12]
 80158b4:	681b      	ldr	r3, [r3, #0]
 80158b6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80158ba:	68fb      	ldr	r3, [r7, #12]
 80158bc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80158be:	7812      	ldrb	r2, [r2, #0]
 80158c0:	b2d2      	uxtb	r2, r2
 80158c2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80158c4:	68fb      	ldr	r3, [r7, #12]
 80158c6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80158c8:	1c5a      	adds	r2, r3, #1
 80158ca:	68fb      	ldr	r3, [r7, #12]
 80158cc:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 80158ce:	68fb      	ldr	r3, [r7, #12]
 80158d0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80158d4:	b29b      	uxth	r3, r3
 80158d6:	3b04      	subs	r3, #4
 80158d8:	b29a      	uxth	r2, r3
 80158da:	68fb      	ldr	r3, [r7, #12]
 80158dc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80158e0:	68fb      	ldr	r3, [r7, #12]
 80158e2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80158e6:	853b      	strh	r3, [r7, #40]	@ 0x28
 80158e8:	e047      	b.n	801597a <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 80158ea:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80158ec:	2b03      	cmp	r3, #3
 80158ee:	d820      	bhi.n	8015932 <HAL_SPI_TransmitReceive+0x5c6>
 80158f0:	697b      	ldr	r3, [r7, #20]
 80158f2:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 80158f6:	2b00      	cmp	r3, #0
 80158f8:	d01b      	beq.n	8015932 <HAL_SPI_TransmitReceive+0x5c6>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80158fa:	68fb      	ldr	r3, [r7, #12]
 80158fc:	681b      	ldr	r3, [r3, #0]
 80158fe:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8015902:	68fb      	ldr	r3, [r7, #12]
 8015904:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015906:	7812      	ldrb	r2, [r2, #0]
 8015908:	b2d2      	uxtb	r2, r2
 801590a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 801590c:	68fb      	ldr	r3, [r7, #12]
 801590e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015910:	1c5a      	adds	r2, r3, #1
 8015912:	68fb      	ldr	r3, [r7, #12]
 8015914:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8015916:	68fb      	ldr	r3, [r7, #12]
 8015918:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801591c:	b29b      	uxth	r3, r3
 801591e:	3b01      	subs	r3, #1
 8015920:	b29a      	uxth	r2, r3
 8015922:	68fb      	ldr	r3, [r7, #12]
 8015924:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8015928:	68fb      	ldr	r3, [r7, #12]
 801592a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801592e:	853b      	strh	r3, [r7, #40]	@ 0x28
 8015930:	e023      	b.n	801597a <HAL_SPI_TransmitReceive+0x60e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8015932:	f7f3 fe17 	bl	8009564 <HAL_GetTick>
 8015936:	4602      	mov	r2, r0
 8015938:	69bb      	ldr	r3, [r7, #24]
 801593a:	1ad3      	subs	r3, r2, r3
 801593c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801593e:	429a      	cmp	r2, r3
 8015940:	d803      	bhi.n	801594a <HAL_SPI_TransmitReceive+0x5de>
 8015942:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015944:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015948:	d102      	bne.n	8015950 <HAL_SPI_TransmitReceive+0x5e4>
 801594a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801594c:	2b00      	cmp	r3, #0
 801594e:	d114      	bne.n	801597a <HAL_SPI_TransmitReceive+0x60e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8015950:	68f8      	ldr	r0, [r7, #12]
 8015952:	f000 fbff 	bl	8016154 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8015956:	68fb      	ldr	r3, [r7, #12]
 8015958:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801595c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8015960:	68fb      	ldr	r3, [r7, #12]
 8015962:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 8015966:	68fb      	ldr	r3, [r7, #12]
 8015968:	2201      	movs	r2, #1
 801596a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 801596e:	68fb      	ldr	r3, [r7, #12]
 8015970:	2200      	movs	r2, #0
 8015972:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 8015976:	2303      	movs	r3, #3
 8015978:	e02d      	b.n	80159d6 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 801597a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801597c:	2b00      	cmp	r3, #0
 801597e:	f47f af11 	bne.w	80157a4 <HAL_SPI_TransmitReceive+0x438>
 8015982:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8015984:	2b00      	cmp	r3, #0
 8015986:	f47f af0d 	bne.w	80157a4 <HAL_SPI_TransmitReceive+0x438>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 801598a:	69bb      	ldr	r3, [r7, #24]
 801598c:	9300      	str	r3, [sp, #0]
 801598e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015990:	2200      	movs	r2, #0
 8015992:	2108      	movs	r1, #8
 8015994:	68f8      	ldr	r0, [r7, #12]
 8015996:	f000 fc7d 	bl	8016294 <SPI_WaitOnFlagUntilTimeout>
 801599a:	4603      	mov	r3, r0
 801599c:	2b00      	cmp	r3, #0
 801599e:	d007      	beq.n	80159b0 <HAL_SPI_TransmitReceive+0x644>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80159a0:	68fb      	ldr	r3, [r7, #12]
 80159a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80159a6:	f043 0220 	orr.w	r2, r3, #32
 80159aa:	68fb      	ldr	r3, [r7, #12]
 80159ac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80159b0:	68f8      	ldr	r0, [r7, #12]
 80159b2:	f000 fbcf 	bl	8016154 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 80159b6:	68fb      	ldr	r3, [r7, #12]
 80159b8:	2201      	movs	r2, #1
 80159ba:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80159be:	68fb      	ldr	r3, [r7, #12]
 80159c0:	2200      	movs	r2, #0
 80159c2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80159c6:	68fb      	ldr	r3, [r7, #12]
 80159c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80159cc:	2b00      	cmp	r3, #0
 80159ce:	d001      	beq.n	80159d4 <HAL_SPI_TransmitReceive+0x668>
  {
    return HAL_ERROR;
 80159d0:	2301      	movs	r3, #1
 80159d2:	e000      	b.n	80159d6 <HAL_SPI_TransmitReceive+0x66a>
  }
  else
  {
    return HAL_OK;
 80159d4:	2300      	movs	r3, #0
  }
}
 80159d6:	4618      	mov	r0, r3
 80159d8:	3730      	adds	r7, #48	@ 0x30
 80159da:	46bd      	mov	sp, r7
 80159dc:	bd80      	pop	{r7, pc}
 80159de:	bf00      	nop

080159e0 <HAL_SPI_Transmit_DMA>:
  * @param  pData: pointer to data buffer
  * @param  Size : amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 80159e0:	b580      	push	{r7, lr}
 80159e2:	b084      	sub	sp, #16
 80159e4:	af00      	add	r7, sp, #0
 80159e6:	60f8      	str	r0, [r7, #12]
 80159e8:	60b9      	str	r1, [r7, #8]
 80159ea:	4613      	mov	r3, r2
 80159ec:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 80159ee:	68fb      	ldr	r3, [r7, #12]
 80159f0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80159f4:	b2db      	uxtb	r3, r3
 80159f6:	2b01      	cmp	r3, #1
 80159f8:	d001      	beq.n	80159fe <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 80159fa:	2302      	movs	r3, #2
 80159fc:	e126      	b.n	8015c4c <HAL_SPI_Transmit_DMA+0x26c>
  }

  if ((pData == NULL) || (Size == 0UL))
 80159fe:	68bb      	ldr	r3, [r7, #8]
 8015a00:	2b00      	cmp	r3, #0
 8015a02:	d002      	beq.n	8015a0a <HAL_SPI_Transmit_DMA+0x2a>
 8015a04:	88fb      	ldrh	r3, [r7, #6]
 8015a06:	2b00      	cmp	r3, #0
 8015a08:	d101      	bne.n	8015a0e <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 8015a0a:	2301      	movs	r3, #1
 8015a0c:	e11e      	b.n	8015c4c <HAL_SPI_Transmit_DMA+0x26c>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8015a0e:	68fb      	ldr	r3, [r7, #12]
 8015a10:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8015a14:	2b01      	cmp	r3, #1
 8015a16:	d101      	bne.n	8015a1c <HAL_SPI_Transmit_DMA+0x3c>
 8015a18:	2302      	movs	r3, #2
 8015a1a:	e117      	b.n	8015c4c <HAL_SPI_Transmit_DMA+0x26c>
 8015a1c:	68fb      	ldr	r3, [r7, #12]
 8015a1e:	2201      	movs	r2, #1
 8015a20:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8015a24:	68fb      	ldr	r3, [r7, #12]
 8015a26:	2203      	movs	r2, #3
 8015a28:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8015a2c:	68fb      	ldr	r3, [r7, #12]
 8015a2e:	2200      	movs	r2, #0
 8015a30:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8015a34:	68fb      	ldr	r3, [r7, #12]
 8015a36:	68ba      	ldr	r2, [r7, #8]
 8015a38:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8015a3a:	68fb      	ldr	r3, [r7, #12]
 8015a3c:	88fa      	ldrh	r2, [r7, #6]
 8015a3e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 8015a42:	68fb      	ldr	r3, [r7, #12]
 8015a44:	88fa      	ldrh	r2, [r7, #6]
 8015a46:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8015a4a:	68fb      	ldr	r3, [r7, #12]
 8015a4c:	2200      	movs	r2, #0
 8015a4e:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxISR       = NULL;
 8015a50:	68fb      	ldr	r3, [r7, #12]
 8015a52:	2200      	movs	r2, #0
 8015a54:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 8015a56:	68fb      	ldr	r3, [r7, #12]
 8015a58:	2200      	movs	r2, #0
 8015a5a:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->RxXferSize  = (uint16_t)0UL;
 8015a5c:	68fb      	ldr	r3, [r7, #12]
 8015a5e:	2200      	movs	r2, #0
 8015a60:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t)0UL;
 8015a64:	68fb      	ldr	r3, [r7, #12]
 8015a66:	2200      	movs	r2, #0
 8015a68:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8015a6c:	68fb      	ldr	r3, [r7, #12]
 8015a6e:	689b      	ldr	r3, [r3, #8]
 8015a70:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8015a74:	d108      	bne.n	8015a88 <HAL_SPI_Transmit_DMA+0xa8>
  {
    SPI_1LINE_TX(hspi);
 8015a76:	68fb      	ldr	r3, [r7, #12]
 8015a78:	681b      	ldr	r3, [r3, #0]
 8015a7a:	681a      	ldr	r2, [r3, #0]
 8015a7c:	68fb      	ldr	r3, [r7, #12]
 8015a7e:	681b      	ldr	r3, [r3, #0]
 8015a80:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8015a84:	601a      	str	r2, [r3, #0]
 8015a86:	e009      	b.n	8015a9c <HAL_SPI_Transmit_DMA+0xbc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8015a88:	68fb      	ldr	r3, [r7, #12]
 8015a8a:	681b      	ldr	r3, [r3, #0]
 8015a8c:	68db      	ldr	r3, [r3, #12]
 8015a8e:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8015a92:	68fb      	ldr	r3, [r7, #12]
 8015a94:	681b      	ldr	r3, [r3, #0]
 8015a96:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8015a9a:	60da      	str	r2, [r3, #12]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8015a9c:	68fb      	ldr	r3, [r7, #12]
 8015a9e:	68db      	ldr	r3, [r3, #12]
 8015aa0:	2b0f      	cmp	r3, #15
 8015aa2:	d905      	bls.n	8015ab0 <HAL_SPI_Transmit_DMA+0xd0>
 8015aa4:	68fb      	ldr	r3, [r7, #12]
 8015aa6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015aa8:	699b      	ldr	r3, [r3, #24]
 8015aaa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8015aae:	d10f      	bne.n	8015ad0 <HAL_SPI_Transmit_DMA+0xf0>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8015ab0:	68fb      	ldr	r3, [r7, #12]
 8015ab2:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8015ab4:	2b07      	cmp	r3, #7
 8015ab6:	d911      	bls.n	8015adc <HAL_SPI_Transmit_DMA+0xfc>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8015ab8:	68fb      	ldr	r3, [r7, #12]
 8015aba:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015abc:	699b      	ldr	r3, [r3, #24]
 8015abe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8015ac2:	d00b      	beq.n	8015adc <HAL_SPI_Transmit_DMA+0xfc>
                                                     (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 8015ac4:	68fb      	ldr	r3, [r7, #12]
 8015ac6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015ac8:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8015aca:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8015ace:	d005      	beq.n	8015adc <HAL_SPI_Transmit_DMA+0xfc>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    __HAL_UNLOCK(hspi);
 8015ad0:	68fb      	ldr	r3, [r7, #12]
 8015ad2:	2200      	movs	r2, #0
 8015ad4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    return HAL_ERROR;
 8015ad8:	2301      	movs	r3, #1
 8015ada:	e0b7      	b.n	8015c4c <HAL_SPI_Transmit_DMA+0x26c>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8015adc:	68fb      	ldr	r3, [r7, #12]
 8015ade:	68db      	ldr	r3, [r3, #12]
 8015ae0:	2b07      	cmp	r3, #7
 8015ae2:	d820      	bhi.n	8015b26 <HAL_SPI_Transmit_DMA+0x146>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8015ae4:	68fb      	ldr	r3, [r7, #12]
 8015ae6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015ae8:	699b      	ldr	r3, [r3, #24]
 8015aea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8015aee:	d109      	bne.n	8015b04 <HAL_SPI_Transmit_DMA+0x124>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8015af0:	68fb      	ldr	r3, [r7, #12]
 8015af2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8015af6:	b29b      	uxth	r3, r3
 8015af8:	3301      	adds	r3, #1
 8015afa:	105b      	asrs	r3, r3, #1
 8015afc:	b29a      	uxth	r2, r3
 8015afe:	68fb      	ldr	r3, [r7, #12]
 8015b00:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    }
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8015b04:	68fb      	ldr	r3, [r7, #12]
 8015b06:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015b08:	699b      	ldr	r3, [r3, #24]
 8015b0a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8015b0e:	d11e      	bne.n	8015b4e <HAL_SPI_Transmit_DMA+0x16e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 8015b10:	68fb      	ldr	r3, [r7, #12]
 8015b12:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8015b16:	b29b      	uxth	r3, r3
 8015b18:	3303      	adds	r3, #3
 8015b1a:	109b      	asrs	r3, r3, #2
 8015b1c:	b29a      	uxth	r2, r3
 8015b1e:	68fb      	ldr	r3, [r7, #12]
 8015b20:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8015b24:	e013      	b.n	8015b4e <HAL_SPI_Transmit_DMA+0x16e>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 8015b26:	68fb      	ldr	r3, [r7, #12]
 8015b28:	68db      	ldr	r3, [r3, #12]
 8015b2a:	2b0f      	cmp	r3, #15
 8015b2c:	d80f      	bhi.n	8015b4e <HAL_SPI_Transmit_DMA+0x16e>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8015b2e:	68fb      	ldr	r3, [r7, #12]
 8015b30:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015b32:	699b      	ldr	r3, [r3, #24]
 8015b34:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8015b38:	d109      	bne.n	8015b4e <HAL_SPI_Transmit_DMA+0x16e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8015b3a:	68fb      	ldr	r3, [r7, #12]
 8015b3c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8015b40:	b29b      	uxth	r3, r3
 8015b42:	3301      	adds	r3, #1
 8015b44:	105b      	asrs	r3, r3, #1
 8015b46:	b29a      	uxth	r2, r3
 8015b48:	68fb      	ldr	r3, [r7, #12]
 8015b4a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  {
    /* Adjustment done */
  }

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8015b4e:	68fb      	ldr	r3, [r7, #12]
 8015b50:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015b52:	4a40      	ldr	r2, [pc, #256]	@ (8015c54 <HAL_SPI_Transmit_DMA+0x274>)
 8015b54:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8015b56:	68fb      	ldr	r3, [r7, #12]
 8015b58:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015b5a:	4a3f      	ldr	r2, [pc, #252]	@ (8015c58 <HAL_SPI_Transmit_DMA+0x278>)
 8015b5c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8015b5e:	68fb      	ldr	r3, [r7, #12]
 8015b60:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015b62:	4a3e      	ldr	r2, [pc, #248]	@ (8015c5c <HAL_SPI_Transmit_DMA+0x27c>)
 8015b64:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8015b66:	68fb      	ldr	r3, [r7, #12]
 8015b68:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015b6a:	2200      	movs	r2, #0
 8015b6c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Clear TXDMAEN bit*/
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8015b6e:	68fb      	ldr	r3, [r7, #12]
 8015b70:	681b      	ldr	r3, [r3, #0]
 8015b72:	689a      	ldr	r2, [r3, #8]
 8015b74:	68fb      	ldr	r3, [r7, #12]
 8015b76:	681b      	ldr	r3, [r3, #0]
 8015b78:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8015b7c:	609a      	str	r2, [r3, #8]

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 8015b7e:	68fb      	ldr	r3, [r7, #12]
 8015b80:	6f98      	ldr	r0, [r3, #120]	@ 0x78
 8015b82:	68fb      	ldr	r3, [r7, #12]
 8015b84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8015b86:	4619      	mov	r1, r3
 8015b88:	68fb      	ldr	r3, [r7, #12]
 8015b8a:	681b      	ldr	r3, [r3, #0]
 8015b8c:	3320      	adds	r3, #32
 8015b8e:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8015b90:	68fb      	ldr	r3, [r7, #12]
 8015b92:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8015b96:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 8015b98:	f7f6 f972 	bl	800be80 <HAL_DMA_Start_IT>
 8015b9c:	4603      	mov	r3, r0
 8015b9e:	2b00      	cmp	r3, #0
 8015ba0:	d011      	beq.n	8015bc6 <HAL_SPI_Transmit_DMA+0x1e6>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8015ba2:	68fb      	ldr	r3, [r7, #12]
 8015ba4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015ba8:	f043 0210 	orr.w	r2, r3, #16
 8015bac:	68fb      	ldr	r3, [r7, #12]
 8015bae:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8015bb2:	68fb      	ldr	r3, [r7, #12]
 8015bb4:	2201      	movs	r2, #1
 8015bb6:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 8015bba:	68fb      	ldr	r3, [r7, #12]
 8015bbc:	2200      	movs	r2, #0
 8015bbe:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    return HAL_ERROR;
 8015bc2:	2301      	movs	r3, #1
 8015bc4:	e042      	b.n	8015c4c <HAL_SPI_Transmit_DMA+0x26c>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8015bc6:	68fb      	ldr	r3, [r7, #12]
 8015bc8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015bca:	69db      	ldr	r3, [r3, #28]
 8015bcc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8015bd0:	d108      	bne.n	8015be4 <HAL_SPI_Transmit_DMA+0x204>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 8015bd2:	68fb      	ldr	r3, [r7, #12]
 8015bd4:	681b      	ldr	r3, [r3, #0]
 8015bd6:	6859      	ldr	r1, [r3, #4]
 8015bd8:	68fb      	ldr	r3, [r7, #12]
 8015bda:	681a      	ldr	r2, [r3, #0]
 8015bdc:	4b20      	ldr	r3, [pc, #128]	@ (8015c60 <HAL_SPI_Transmit_DMA+0x280>)
 8015bde:	400b      	ands	r3, r1
 8015be0:	6053      	str	r3, [r2, #4]
 8015be2:	e009      	b.n	8015bf8 <HAL_SPI_Transmit_DMA+0x218>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8015be4:	68fb      	ldr	r3, [r7, #12]
 8015be6:	681b      	ldr	r3, [r3, #0]
 8015be8:	685a      	ldr	r2, [r3, #4]
 8015bea:	4b1d      	ldr	r3, [pc, #116]	@ (8015c60 <HAL_SPI_Transmit_DMA+0x280>)
 8015bec:	4013      	ands	r3, r2
 8015bee:	88f9      	ldrh	r1, [r7, #6]
 8015bf0:	68fa      	ldr	r2, [r7, #12]
 8015bf2:	6812      	ldr	r2, [r2, #0]
 8015bf4:	430b      	orrs	r3, r1
 8015bf6:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8015bf8:	68fb      	ldr	r3, [r7, #12]
 8015bfa:	681b      	ldr	r3, [r3, #0]
 8015bfc:	689a      	ldr	r2, [r3, #8]
 8015bfe:	68fb      	ldr	r3, [r7, #12]
 8015c00:	681b      	ldr	r3, [r3, #0]
 8015c02:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8015c06:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 8015c08:	68fb      	ldr	r3, [r7, #12]
 8015c0a:	681b      	ldr	r3, [r3, #0]
 8015c0c:	691a      	ldr	r2, [r3, #16]
 8015c0e:	68fb      	ldr	r3, [r7, #12]
 8015c10:	681b      	ldr	r3, [r3, #0]
 8015c12:	f442 7248 	orr.w	r2, r2, #800	@ 0x320
 8015c16:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8015c18:	68fb      	ldr	r3, [r7, #12]
 8015c1a:	681b      	ldr	r3, [r3, #0]
 8015c1c:	681a      	ldr	r2, [r3, #0]
 8015c1e:	68fb      	ldr	r3, [r7, #12]
 8015c20:	681b      	ldr	r3, [r3, #0]
 8015c22:	f042 0201 	orr.w	r2, r2, #1
 8015c26:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8015c28:	68fb      	ldr	r3, [r7, #12]
 8015c2a:	685b      	ldr	r3, [r3, #4]
 8015c2c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8015c30:	d107      	bne.n	8015c42 <HAL_SPI_Transmit_DMA+0x262>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8015c32:	68fb      	ldr	r3, [r7, #12]
 8015c34:	681b      	ldr	r3, [r3, #0]
 8015c36:	681a      	ldr	r2, [r3, #0]
 8015c38:	68fb      	ldr	r3, [r7, #12]
 8015c3a:	681b      	ldr	r3, [r3, #0]
 8015c3c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8015c40:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8015c42:	68fb      	ldr	r3, [r7, #12]
 8015c44:	2200      	movs	r2, #0
 8015c46:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8015c4a:	2300      	movs	r3, #0
}
 8015c4c:	4618      	mov	r0, r3
 8015c4e:	3710      	adds	r7, #16
 8015c50:	46bd      	mov	sp, r7
 8015c52:	bd80      	pop	{r7, pc}
 8015c54:	080160bf 	.word	0x080160bf
 8015c58:	08016079 	.word	0x08016079
 8015c5c:	080160db 	.word	0x080160db
 8015c60:	ffff0000 	.word	0xffff0000

08015c64 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8015c64:	b580      	push	{r7, lr}
 8015c66:	b08a      	sub	sp, #40	@ 0x28
 8015c68:	af00      	add	r7, sp, #0
 8015c6a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8015c6c:	687b      	ldr	r3, [r7, #4]
 8015c6e:	681b      	ldr	r3, [r3, #0]
 8015c70:	691b      	ldr	r3, [r3, #16]
 8015c72:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8015c74:	687b      	ldr	r3, [r7, #4]
 8015c76:	681b      	ldr	r3, [r3, #0]
 8015c78:	695b      	ldr	r3, [r3, #20]
 8015c7a:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8015c7c:	6a3a      	ldr	r2, [r7, #32]
 8015c7e:	69fb      	ldr	r3, [r7, #28]
 8015c80:	4013      	ands	r3, r2
 8015c82:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8015c84:	687b      	ldr	r3, [r7, #4]
 8015c86:	681b      	ldr	r3, [r3, #0]
 8015c88:	689b      	ldr	r3, [r3, #8]
 8015c8a:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8015c8c:	2300      	movs	r3, #0
 8015c8e:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8015c90:	687b      	ldr	r3, [r7, #4]
 8015c92:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8015c96:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8015c98:	687b      	ldr	r3, [r7, #4]
 8015c9a:	681b      	ldr	r3, [r3, #0]
 8015c9c:	3330      	adds	r3, #48	@ 0x30
 8015c9e:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8015ca0:	69fb      	ldr	r3, [r7, #28]
 8015ca2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8015ca6:	2b00      	cmp	r3, #0
 8015ca8:	d010      	beq.n	8015ccc <HAL_SPI_IRQHandler+0x68>
 8015caa:	6a3b      	ldr	r3, [r7, #32]
 8015cac:	f003 0308 	and.w	r3, r3, #8
 8015cb0:	2b00      	cmp	r3, #0
 8015cb2:	d00b      	beq.n	8015ccc <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8015cb4:	687b      	ldr	r3, [r7, #4]
 8015cb6:	681b      	ldr	r3, [r3, #0]
 8015cb8:	699a      	ldr	r2, [r3, #24]
 8015cba:	687b      	ldr	r3, [r7, #4]
 8015cbc:	681b      	ldr	r3, [r3, #0]
 8015cbe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8015cc2:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 8015cc4:	6878      	ldr	r0, [r7, #4]
 8015cc6:	f000 f9cd 	bl	8016064 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 8015cca:	e192      	b.n	8015ff2 <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8015ccc:	69bb      	ldr	r3, [r7, #24]
 8015cce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8015cd2:	2b00      	cmp	r3, #0
 8015cd4:	d113      	bne.n	8015cfe <HAL_SPI_IRQHandler+0x9a>
 8015cd6:	69bb      	ldr	r3, [r7, #24]
 8015cd8:	f003 0320 	and.w	r3, r3, #32
 8015cdc:	2b00      	cmp	r3, #0
 8015cde:	d10e      	bne.n	8015cfe <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8015ce0:	69bb      	ldr	r3, [r7, #24]
 8015ce2:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8015ce6:	2b00      	cmp	r3, #0
 8015ce8:	d009      	beq.n	8015cfe <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 8015cea:	687b      	ldr	r3, [r7, #4]
 8015cec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015cee:	6878      	ldr	r0, [r7, #4]
 8015cf0:	4798      	blx	r3
    hspi->RxISR(hspi);
 8015cf2:	687b      	ldr	r3, [r7, #4]
 8015cf4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015cf6:	6878      	ldr	r0, [r7, #4]
 8015cf8:	4798      	blx	r3
    handled = 1UL;
 8015cfa:	2301      	movs	r3, #1
 8015cfc:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8015cfe:	69bb      	ldr	r3, [r7, #24]
 8015d00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8015d04:	2b00      	cmp	r3, #0
 8015d06:	d10f      	bne.n	8015d28 <HAL_SPI_IRQHandler+0xc4>
 8015d08:	69bb      	ldr	r3, [r7, #24]
 8015d0a:	f003 0301 	and.w	r3, r3, #1
 8015d0e:	2b00      	cmp	r3, #0
 8015d10:	d00a      	beq.n	8015d28 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8015d12:	69bb      	ldr	r3, [r7, #24]
 8015d14:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8015d18:	2b00      	cmp	r3, #0
 8015d1a:	d105      	bne.n	8015d28 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 8015d1c:	687b      	ldr	r3, [r7, #4]
 8015d1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015d20:	6878      	ldr	r0, [r7, #4]
 8015d22:	4798      	blx	r3
    handled = 1UL;
 8015d24:	2301      	movs	r3, #1
 8015d26:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8015d28:	69bb      	ldr	r3, [r7, #24]
 8015d2a:	f003 0320 	and.w	r3, r3, #32
 8015d2e:	2b00      	cmp	r3, #0
 8015d30:	d10f      	bne.n	8015d52 <HAL_SPI_IRQHandler+0xee>
 8015d32:	69bb      	ldr	r3, [r7, #24]
 8015d34:	f003 0302 	and.w	r3, r3, #2
 8015d38:	2b00      	cmp	r3, #0
 8015d3a:	d00a      	beq.n	8015d52 <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8015d3c:	69bb      	ldr	r3, [r7, #24]
 8015d3e:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8015d42:	2b00      	cmp	r3, #0
 8015d44:	d105      	bne.n	8015d52 <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 8015d46:	687b      	ldr	r3, [r7, #4]
 8015d48:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015d4a:	6878      	ldr	r0, [r7, #4]
 8015d4c:	4798      	blx	r3
    handled = 1UL;
 8015d4e:	2301      	movs	r3, #1
 8015d50:	627b      	str	r3, [r7, #36]	@ 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 8015d52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015d54:	2b00      	cmp	r3, #0
 8015d56:	f040 8147 	bne.w	8015fe8 <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8015d5a:	69bb      	ldr	r3, [r7, #24]
 8015d5c:	f003 0308 	and.w	r3, r3, #8
 8015d60:	2b00      	cmp	r3, #0
 8015d62:	f000 808b 	beq.w	8015e7c <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8015d66:	687b      	ldr	r3, [r7, #4]
 8015d68:	681b      	ldr	r3, [r3, #0]
 8015d6a:	699a      	ldr	r2, [r3, #24]
 8015d6c:	687b      	ldr	r3, [r7, #4]
 8015d6e:	681b      	ldr	r3, [r3, #0]
 8015d70:	f042 0208 	orr.w	r2, r2, #8
 8015d74:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8015d76:	687b      	ldr	r3, [r7, #4]
 8015d78:	681b      	ldr	r3, [r3, #0]
 8015d7a:	699a      	ldr	r2, [r3, #24]
 8015d7c:	687b      	ldr	r3, [r7, #4]
 8015d7e:	681b      	ldr	r3, [r3, #0]
 8015d80:	f042 0210 	orr.w	r2, r2, #16
 8015d84:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8015d86:	687b      	ldr	r3, [r7, #4]
 8015d88:	681b      	ldr	r3, [r3, #0]
 8015d8a:	699a      	ldr	r2, [r3, #24]
 8015d8c:	687b      	ldr	r3, [r7, #4]
 8015d8e:	681b      	ldr	r3, [r3, #0]
 8015d90:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8015d94:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8015d96:	687b      	ldr	r3, [r7, #4]
 8015d98:	681b      	ldr	r3, [r3, #0]
 8015d9a:	691a      	ldr	r2, [r3, #16]
 8015d9c:	687b      	ldr	r3, [r7, #4]
 8015d9e:	681b      	ldr	r3, [r3, #0]
 8015da0:	f022 0208 	bic.w	r2, r2, #8
 8015da4:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8015da6:	687b      	ldr	r3, [r7, #4]
 8015da8:	681b      	ldr	r3, [r3, #0]
 8015daa:	689b      	ldr	r3, [r3, #8]
 8015dac:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8015db0:	2b00      	cmp	r3, #0
 8015db2:	d13d      	bne.n	8015e30 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 8015db4:	e036      	b.n	8015e24 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8015db6:	687b      	ldr	r3, [r7, #4]
 8015db8:	68db      	ldr	r3, [r3, #12]
 8015dba:	2b0f      	cmp	r3, #15
 8015dbc:	d90b      	bls.n	8015dd6 <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8015dbe:	687b      	ldr	r3, [r7, #4]
 8015dc0:	681a      	ldr	r2, [r3, #0]
 8015dc2:	687b      	ldr	r3, [r7, #4]
 8015dc4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015dc6:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8015dc8:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8015dca:	687b      	ldr	r3, [r7, #4]
 8015dcc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015dce:	1d1a      	adds	r2, r3, #4
 8015dd0:	687b      	ldr	r3, [r7, #4]
 8015dd2:	665a      	str	r2, [r3, #100]	@ 0x64
 8015dd4:	e01d      	b.n	8015e12 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8015dd6:	687b      	ldr	r3, [r7, #4]
 8015dd8:	68db      	ldr	r3, [r3, #12]
 8015dda:	2b07      	cmp	r3, #7
 8015ddc:	d90b      	bls.n	8015df6 <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8015dde:	687b      	ldr	r3, [r7, #4]
 8015de0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015de2:	68fa      	ldr	r2, [r7, #12]
 8015de4:	8812      	ldrh	r2, [r2, #0]
 8015de6:	b292      	uxth	r2, r2
 8015de8:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8015dea:	687b      	ldr	r3, [r7, #4]
 8015dec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015dee:	1c9a      	adds	r2, r3, #2
 8015df0:	687b      	ldr	r3, [r7, #4]
 8015df2:	665a      	str	r2, [r3, #100]	@ 0x64
 8015df4:	e00d      	b.n	8015e12 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8015df6:	687b      	ldr	r3, [r7, #4]
 8015df8:	681b      	ldr	r3, [r3, #0]
 8015dfa:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8015dfe:	687b      	ldr	r3, [r7, #4]
 8015e00:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015e02:	7812      	ldrb	r2, [r2, #0]
 8015e04:	b2d2      	uxtb	r2, r2
 8015e06:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8015e08:	687b      	ldr	r3, [r7, #4]
 8015e0a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015e0c:	1c5a      	adds	r2, r3, #1
 8015e0e:	687b      	ldr	r3, [r7, #4]
 8015e10:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        hspi->RxXferCount--;
 8015e12:	687b      	ldr	r3, [r7, #4]
 8015e14:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8015e18:	b29b      	uxth	r3, r3
 8015e1a:	3b01      	subs	r3, #1
 8015e1c:	b29a      	uxth	r2, r3
 8015e1e:	687b      	ldr	r3, [r7, #4]
 8015e20:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      while (hspi->RxXferCount != 0UL)
 8015e24:	687b      	ldr	r3, [r7, #4]
 8015e26:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8015e2a:	b29b      	uxth	r3, r3
 8015e2c:	2b00      	cmp	r3, #0
 8015e2e:	d1c2      	bne.n	8015db6 <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 8015e30:	6878      	ldr	r0, [r7, #4]
 8015e32:	f000 f98f 	bl	8016154 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 8015e36:	687b      	ldr	r3, [r7, #4]
 8015e38:	2201      	movs	r2, #1
 8015e3a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8015e3e:	687b      	ldr	r3, [r7, #4]
 8015e40:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015e44:	2b00      	cmp	r3, #0
 8015e46:	d003      	beq.n	8015e50 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8015e48:	6878      	ldr	r0, [r7, #4]
 8015e4a:	f000 f901 	bl	8016050 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8015e4e:	e0d0      	b.n	8015ff2 <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8015e50:	7cfb      	ldrb	r3, [r7, #19]
 8015e52:	2b05      	cmp	r3, #5
 8015e54:	d103      	bne.n	8015e5e <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 8015e56:	6878      	ldr	r0, [r7, #4]
 8015e58:	f000 f8e6 	bl	8016028 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 8015e5c:	e0c6      	b.n	8015fec <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8015e5e:	7cfb      	ldrb	r3, [r7, #19]
 8015e60:	2b04      	cmp	r3, #4
 8015e62:	d103      	bne.n	8015e6c <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 8015e64:	6878      	ldr	r0, [r7, #4]
 8015e66:	f000 f8d5 	bl	8016014 <HAL_SPI_RxCpltCallback>
    return;
 8015e6a:	e0bf      	b.n	8015fec <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8015e6c:	7cfb      	ldrb	r3, [r7, #19]
 8015e6e:	2b03      	cmp	r3, #3
 8015e70:	f040 80bc 	bne.w	8015fec <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 8015e74:	6878      	ldr	r0, [r7, #4]
 8015e76:	f000 f8c3 	bl	8016000 <HAL_SPI_TxCpltCallback>
    return;
 8015e7a:	e0b7      	b.n	8015fec <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8015e7c:	69bb      	ldr	r3, [r7, #24]
 8015e7e:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 8015e82:	2b00      	cmp	r3, #0
 8015e84:	f000 80b5 	beq.w	8015ff2 <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8015e88:	69bb      	ldr	r3, [r7, #24]
 8015e8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8015e8e:	2b00      	cmp	r3, #0
 8015e90:	d00f      	beq.n	8015eb2 <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8015e92:	687b      	ldr	r3, [r7, #4]
 8015e94:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015e98:	f043 0204 	orr.w	r2, r3, #4
 8015e9c:	687b      	ldr	r3, [r7, #4]
 8015e9e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8015ea2:	687b      	ldr	r3, [r7, #4]
 8015ea4:	681b      	ldr	r3, [r3, #0]
 8015ea6:	699a      	ldr	r2, [r3, #24]
 8015ea8:	687b      	ldr	r3, [r7, #4]
 8015eaa:	681b      	ldr	r3, [r3, #0]
 8015eac:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8015eb0:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8015eb2:	69bb      	ldr	r3, [r7, #24]
 8015eb4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8015eb8:	2b00      	cmp	r3, #0
 8015eba:	d00f      	beq.n	8015edc <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8015ebc:	687b      	ldr	r3, [r7, #4]
 8015ebe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015ec2:	f043 0201 	orr.w	r2, r3, #1
 8015ec6:	687b      	ldr	r3, [r7, #4]
 8015ec8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8015ecc:	687b      	ldr	r3, [r7, #4]
 8015ece:	681b      	ldr	r3, [r3, #0]
 8015ed0:	699a      	ldr	r2, [r3, #24]
 8015ed2:	687b      	ldr	r3, [r7, #4]
 8015ed4:	681b      	ldr	r3, [r3, #0]
 8015ed6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8015eda:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8015edc:	69bb      	ldr	r3, [r7, #24]
 8015ede:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8015ee2:	2b00      	cmp	r3, #0
 8015ee4:	d00f      	beq.n	8015f06 <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8015ee6:	687b      	ldr	r3, [r7, #4]
 8015ee8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015eec:	f043 0208 	orr.w	r2, r3, #8
 8015ef0:	687b      	ldr	r3, [r7, #4]
 8015ef2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8015ef6:	687b      	ldr	r3, [r7, #4]
 8015ef8:	681b      	ldr	r3, [r3, #0]
 8015efa:	699a      	ldr	r2, [r3, #24]
 8015efc:	687b      	ldr	r3, [r7, #4]
 8015efe:	681b      	ldr	r3, [r3, #0]
 8015f00:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8015f04:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8015f06:	69bb      	ldr	r3, [r7, #24]
 8015f08:	f003 0320 	and.w	r3, r3, #32
 8015f0c:	2b00      	cmp	r3, #0
 8015f0e:	d00f      	beq.n	8015f30 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8015f10:	687b      	ldr	r3, [r7, #4]
 8015f12:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015f16:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8015f1a:	687b      	ldr	r3, [r7, #4]
 8015f1c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8015f20:	687b      	ldr	r3, [r7, #4]
 8015f22:	681b      	ldr	r3, [r3, #0]
 8015f24:	699a      	ldr	r2, [r3, #24]
 8015f26:	687b      	ldr	r3, [r7, #4]
 8015f28:	681b      	ldr	r3, [r3, #0]
 8015f2a:	f042 0220 	orr.w	r2, r2, #32
 8015f2e:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8015f30:	687b      	ldr	r3, [r7, #4]
 8015f32:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015f36:	2b00      	cmp	r3, #0
 8015f38:	d05a      	beq.n	8015ff0 <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8015f3a:	687b      	ldr	r3, [r7, #4]
 8015f3c:	681b      	ldr	r3, [r3, #0]
 8015f3e:	681a      	ldr	r2, [r3, #0]
 8015f40:	687b      	ldr	r3, [r7, #4]
 8015f42:	681b      	ldr	r3, [r3, #0]
 8015f44:	f022 0201 	bic.w	r2, r2, #1
 8015f48:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 8015f4a:	687b      	ldr	r3, [r7, #4]
 8015f4c:	681b      	ldr	r3, [r3, #0]
 8015f4e:	6919      	ldr	r1, [r3, #16]
 8015f50:	687b      	ldr	r3, [r7, #4]
 8015f52:	681a      	ldr	r2, [r3, #0]
 8015f54:	4b28      	ldr	r3, [pc, #160]	@ (8015ff8 <HAL_SPI_IRQHandler+0x394>)
 8015f56:	400b      	ands	r3, r1
 8015f58:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8015f5a:	697b      	ldr	r3, [r7, #20]
 8015f5c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8015f60:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8015f64:	d138      	bne.n	8015fd8 <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8015f66:	687b      	ldr	r3, [r7, #4]
 8015f68:	681b      	ldr	r3, [r3, #0]
 8015f6a:	689a      	ldr	r2, [r3, #8]
 8015f6c:	687b      	ldr	r3, [r7, #4]
 8015f6e:	681b      	ldr	r3, [r3, #0]
 8015f70:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8015f74:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8015f76:	687b      	ldr	r3, [r7, #4]
 8015f78:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8015f7a:	2b00      	cmp	r3, #0
 8015f7c:	d013      	beq.n	8015fa6 <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8015f7e:	687b      	ldr	r3, [r7, #4]
 8015f80:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8015f82:	4a1e      	ldr	r2, [pc, #120]	@ (8015ffc <HAL_SPI_IRQHandler+0x398>)
 8015f84:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8015f86:	687b      	ldr	r3, [r7, #4]
 8015f88:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8015f8a:	4618      	mov	r0, r3
 8015f8c:	f7f6 fd00 	bl	800c990 <HAL_DMA_Abort_IT>
 8015f90:	4603      	mov	r3, r0
 8015f92:	2b00      	cmp	r3, #0
 8015f94:	d007      	beq.n	8015fa6 <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8015f96:	687b      	ldr	r3, [r7, #4]
 8015f98:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015f9c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8015fa0:	687b      	ldr	r3, [r7, #4]
 8015fa2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8015fa6:	687b      	ldr	r3, [r7, #4]
 8015fa8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015faa:	2b00      	cmp	r3, #0
 8015fac:	d020      	beq.n	8015ff0 <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8015fae:	687b      	ldr	r3, [r7, #4]
 8015fb0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015fb2:	4a12      	ldr	r2, [pc, #72]	@ (8015ffc <HAL_SPI_IRQHandler+0x398>)
 8015fb4:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8015fb6:	687b      	ldr	r3, [r7, #4]
 8015fb8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015fba:	4618      	mov	r0, r3
 8015fbc:	f7f6 fce8 	bl	800c990 <HAL_DMA_Abort_IT>
 8015fc0:	4603      	mov	r3, r0
 8015fc2:	2b00      	cmp	r3, #0
 8015fc4:	d014      	beq.n	8015ff0 <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8015fc6:	687b      	ldr	r3, [r7, #4]
 8015fc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015fcc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8015fd0:	687b      	ldr	r3, [r7, #4]
 8015fd2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8015fd6:	e00b      	b.n	8015ff0 <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 8015fd8:	687b      	ldr	r3, [r7, #4]
 8015fda:	2201      	movs	r2, #1
 8015fdc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
        HAL_SPI_ErrorCallback(hspi);
 8015fe0:	6878      	ldr	r0, [r7, #4]
 8015fe2:	f000 f835 	bl	8016050 <HAL_SPI_ErrorCallback>
    return;
 8015fe6:	e003      	b.n	8015ff0 <HAL_SPI_IRQHandler+0x38c>
    return;
 8015fe8:	bf00      	nop
 8015fea:	e002      	b.n	8015ff2 <HAL_SPI_IRQHandler+0x38e>
    return;
 8015fec:	bf00      	nop
 8015fee:	e000      	b.n	8015ff2 <HAL_SPI_IRQHandler+0x38e>
    return;
 8015ff0:	bf00      	nop
  }
}
 8015ff2:	3728      	adds	r7, #40	@ 0x28
 8015ff4:	46bd      	mov	sp, r7
 8015ff6:	bd80      	pop	{r7, pc}
 8015ff8:	fffffc94 	.word	0xfffffc94
 8015ffc:	08016121 	.word	0x08016121

08016000 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8016000:	b480      	push	{r7}
 8016002:	b083      	sub	sp, #12
 8016004:	af00      	add	r7, sp, #0
 8016006:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8016008:	bf00      	nop
 801600a:	370c      	adds	r7, #12
 801600c:	46bd      	mov	sp, r7
 801600e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016012:	4770      	bx	lr

08016014 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8016014:	b480      	push	{r7}
 8016016:	b083      	sub	sp, #12
 8016018:	af00      	add	r7, sp, #0
 801601a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 801601c:	bf00      	nop
 801601e:	370c      	adds	r7, #12
 8016020:	46bd      	mov	sp, r7
 8016022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016026:	4770      	bx	lr

08016028 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8016028:	b480      	push	{r7}
 801602a:	b083      	sub	sp, #12
 801602c:	af00      	add	r7, sp, #0
 801602e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8016030:	bf00      	nop
 8016032:	370c      	adds	r7, #12
 8016034:	46bd      	mov	sp, r7
 8016036:	f85d 7b04 	ldr.w	r7, [sp], #4
 801603a:	4770      	bx	lr

0801603c <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 801603c:	b480      	push	{r7}
 801603e:	b083      	sub	sp, #12
 8016040:	af00      	add	r7, sp, #0
 8016042:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8016044:	bf00      	nop
 8016046:	370c      	adds	r7, #12
 8016048:	46bd      	mov	sp, r7
 801604a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801604e:	4770      	bx	lr

08016050 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8016050:	b480      	push	{r7}
 8016052:	b083      	sub	sp, #12
 8016054:	af00      	add	r7, sp, #0
 8016056:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8016058:	bf00      	nop
 801605a:	370c      	adds	r7, #12
 801605c:	46bd      	mov	sp, r7
 801605e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016062:	4770      	bx	lr

08016064 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8016064:	b480      	push	{r7}
 8016066:	b083      	sub	sp, #12
 8016068:	af00      	add	r7, sp, #0
 801606a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 801606c:	bf00      	nop
 801606e:	370c      	adds	r7, #12
 8016070:	46bd      	mov	sp, r7
 8016072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016076:	4770      	bx	lr

08016078 <SPI_DMATransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8016078:	b580      	push	{r7, lr}
 801607a:	b084      	sub	sp, #16
 801607c:	af00      	add	r7, sp, #0
 801607e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8016080:	687b      	ldr	r3, [r7, #4]
 8016082:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016084:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 8016086:	68fb      	ldr	r3, [r7, #12]
 8016088:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 801608c:	b2db      	uxtb	r3, r3
 801608e:	2b07      	cmp	r3, #7
 8016090:	d011      	beq.n	80160b6 <SPI_DMATransmitCplt+0x3e>
  {
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8016092:	68fb      	ldr	r3, [r7, #12]
 8016094:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8016096:	69db      	ldr	r3, [r3, #28]
 8016098:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801609c:	d103      	bne.n	80160a6 <SPI_DMATransmitCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxCpltCallback(hspi);
#else
      HAL_SPI_TxCpltCallback(hspi);
 801609e:	68f8      	ldr	r0, [r7, #12]
 80160a0:	f7ff ffae 	bl	8016000 <HAL_SPI_TxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 80160a4:	e007      	b.n	80160b6 <SPI_DMATransmitCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 80160a6:	68fb      	ldr	r3, [r7, #12]
 80160a8:	681b      	ldr	r3, [r3, #0]
 80160aa:	691a      	ldr	r2, [r3, #16]
 80160ac:	68fb      	ldr	r3, [r7, #12]
 80160ae:	681b      	ldr	r3, [r3, #0]
 80160b0:	f042 0208 	orr.w	r2, r2, #8
 80160b4:	611a      	str	r2, [r3, #16]
}
 80160b6:	bf00      	nop
 80160b8:	3710      	adds	r7, #16
 80160ba:	46bd      	mov	sp, r7
 80160bc:	bd80      	pop	{r7, pc}

080160be <SPI_DMAHalfTransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma) /* Derogation MISRAC2012-Rule-8.13 */
{
 80160be:	b580      	push	{r7, lr}
 80160c0:	b084      	sub	sp, #16
 80160c2:	af00      	add	r7, sp, #0
 80160c4:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)
 80160c6:	687b      	ldr	r3, [r7, #4]
 80160c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80160ca:	60fb      	str	r3, [r7, #12]
                            ((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-8.13 */

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 80160cc:	68f8      	ldr	r0, [r7, #12]
 80160ce:	f7ff ffb5 	bl	801603c <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80160d2:	bf00      	nop
 80160d4:	3710      	adds	r7, #16
 80160d6:	46bd      	mov	sp, r7
 80160d8:	bd80      	pop	{r7, pc}

080160da <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80160da:	b580      	push	{r7, lr}
 80160dc:	b084      	sub	sp, #16
 80160de:	af00      	add	r7, sp, #0
 80160e0:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80160e2:	687b      	ldr	r3, [r7, #4]
 80160e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80160e6:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80160e8:	6878      	ldr	r0, [r7, #4]
 80160ea:	f7f7 fdcf 	bl	800dc8c <HAL_DMA_GetError>
 80160ee:	4603      	mov	r3, r0
 80160f0:	2b02      	cmp	r3, #2
 80160f2:	d011      	beq.n	8016118 <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 80160f4:	68f8      	ldr	r0, [r7, #12]
 80160f6:	f000 f82d 	bl	8016154 <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80160fa:	68fb      	ldr	r3, [r7, #12]
 80160fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8016100:	f043 0210 	orr.w	r2, r3, #16
 8016104:	68fb      	ldr	r3, [r7, #12]
 8016106:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 801610a:	68fb      	ldr	r3, [r7, #12]
 801610c:	2201      	movs	r2, #1
 801610e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8016112:	68f8      	ldr	r0, [r7, #12]
 8016114:	f7ff ff9c 	bl	8016050 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8016118:	bf00      	nop
 801611a:	3710      	adds	r7, #16
 801611c:	46bd      	mov	sp, r7
 801611e:	bd80      	pop	{r7, pc}

08016120 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8016120:	b580      	push	{r7, lr}
 8016122:	b084      	sub	sp, #16
 8016124:	af00      	add	r7, sp, #0
 8016126:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8016128:	687b      	ldr	r3, [r7, #4]
 801612a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801612c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 801612e:	68fb      	ldr	r3, [r7, #12]
 8016130:	2200      	movs	r2, #0
 8016132:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 8016136:	68fb      	ldr	r3, [r7, #12]
 8016138:	2200      	movs	r2, #0
 801613a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 801613e:	68fb      	ldr	r3, [r7, #12]
 8016140:	2201      	movs	r2, #1
 8016142:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8016146:	68f8      	ldr	r0, [r7, #12]
 8016148:	f7ff ff82 	bl	8016050 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 801614c:	bf00      	nop
 801614e:	3710      	adds	r7, #16
 8016150:	46bd      	mov	sp, r7
 8016152:	bd80      	pop	{r7, pc}

08016154 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8016154:	b480      	push	{r7}
 8016156:	b085      	sub	sp, #20
 8016158:	af00      	add	r7, sp, #0
 801615a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 801615c:	687b      	ldr	r3, [r7, #4]
 801615e:	681b      	ldr	r3, [r3, #0]
 8016160:	695b      	ldr	r3, [r3, #20]
 8016162:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8016164:	687b      	ldr	r3, [r7, #4]
 8016166:	681b      	ldr	r3, [r3, #0]
 8016168:	699a      	ldr	r2, [r3, #24]
 801616a:	687b      	ldr	r3, [r7, #4]
 801616c:	681b      	ldr	r3, [r3, #0]
 801616e:	f042 0208 	orr.w	r2, r2, #8
 8016172:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8016174:	687b      	ldr	r3, [r7, #4]
 8016176:	681b      	ldr	r3, [r3, #0]
 8016178:	699a      	ldr	r2, [r3, #24]
 801617a:	687b      	ldr	r3, [r7, #4]
 801617c:	681b      	ldr	r3, [r3, #0]
 801617e:	f042 0210 	orr.w	r2, r2, #16
 8016182:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8016184:	687b      	ldr	r3, [r7, #4]
 8016186:	681b      	ldr	r3, [r3, #0]
 8016188:	681a      	ldr	r2, [r3, #0]
 801618a:	687b      	ldr	r3, [r7, #4]
 801618c:	681b      	ldr	r3, [r3, #0]
 801618e:	f022 0201 	bic.w	r2, r2, #1
 8016192:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8016194:	687b      	ldr	r3, [r7, #4]
 8016196:	681b      	ldr	r3, [r3, #0]
 8016198:	6919      	ldr	r1, [r3, #16]
 801619a:	687b      	ldr	r3, [r7, #4]
 801619c:	681a      	ldr	r2, [r3, #0]
 801619e:	4b3c      	ldr	r3, [pc, #240]	@ (8016290 <SPI_CloseTransfer+0x13c>)
 80161a0:	400b      	ands	r3, r1
 80161a2:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80161a4:	687b      	ldr	r3, [r7, #4]
 80161a6:	681b      	ldr	r3, [r3, #0]
 80161a8:	689a      	ldr	r2, [r3, #8]
 80161aa:	687b      	ldr	r3, [r7, #4]
 80161ac:	681b      	ldr	r3, [r3, #0]
 80161ae:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 80161b2:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80161b4:	687b      	ldr	r3, [r7, #4]
 80161b6:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80161ba:	b2db      	uxtb	r3, r3
 80161bc:	2b04      	cmp	r3, #4
 80161be:	d014      	beq.n	80161ea <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 80161c0:	68fb      	ldr	r3, [r7, #12]
 80161c2:	f003 0320 	and.w	r3, r3, #32
 80161c6:	2b00      	cmp	r3, #0
 80161c8:	d00f      	beq.n	80161ea <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80161ca:	687b      	ldr	r3, [r7, #4]
 80161cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80161d0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80161d4:	687b      	ldr	r3, [r7, #4]
 80161d6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80161da:	687b      	ldr	r3, [r7, #4]
 80161dc:	681b      	ldr	r3, [r3, #0]
 80161de:	699a      	ldr	r2, [r3, #24]
 80161e0:	687b      	ldr	r3, [r7, #4]
 80161e2:	681b      	ldr	r3, [r3, #0]
 80161e4:	f042 0220 	orr.w	r2, r2, #32
 80161e8:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80161ea:	687b      	ldr	r3, [r7, #4]
 80161ec:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80161f0:	b2db      	uxtb	r3, r3
 80161f2:	2b03      	cmp	r3, #3
 80161f4:	d014      	beq.n	8016220 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 80161f6:	68fb      	ldr	r3, [r7, #12]
 80161f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80161fc:	2b00      	cmp	r3, #0
 80161fe:	d00f      	beq.n	8016220 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8016200:	687b      	ldr	r3, [r7, #4]
 8016202:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8016206:	f043 0204 	orr.w	r2, r3, #4
 801620a:	687b      	ldr	r3, [r7, #4]
 801620c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8016210:	687b      	ldr	r3, [r7, #4]
 8016212:	681b      	ldr	r3, [r3, #0]
 8016214:	699a      	ldr	r2, [r3, #24]
 8016216:	687b      	ldr	r3, [r7, #4]
 8016218:	681b      	ldr	r3, [r3, #0]
 801621a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 801621e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8016220:	68fb      	ldr	r3, [r7, #12]
 8016222:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8016226:	2b00      	cmp	r3, #0
 8016228:	d00f      	beq.n	801624a <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 801622a:	687b      	ldr	r3, [r7, #4]
 801622c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8016230:	f043 0201 	orr.w	r2, r3, #1
 8016234:	687b      	ldr	r3, [r7, #4]
 8016236:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 801623a:	687b      	ldr	r3, [r7, #4]
 801623c:	681b      	ldr	r3, [r3, #0]
 801623e:	699a      	ldr	r2, [r3, #24]
 8016240:	687b      	ldr	r3, [r7, #4]
 8016242:	681b      	ldr	r3, [r3, #0]
 8016244:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8016248:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 801624a:	68fb      	ldr	r3, [r7, #12]
 801624c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8016250:	2b00      	cmp	r3, #0
 8016252:	d00f      	beq.n	8016274 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8016254:	687b      	ldr	r3, [r7, #4]
 8016256:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801625a:	f043 0208 	orr.w	r2, r3, #8
 801625e:	687b      	ldr	r3, [r7, #4]
 8016260:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8016264:	687b      	ldr	r3, [r7, #4]
 8016266:	681b      	ldr	r3, [r3, #0]
 8016268:	699a      	ldr	r2, [r3, #24]
 801626a:	687b      	ldr	r3, [r7, #4]
 801626c:	681b      	ldr	r3, [r3, #0]
 801626e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8016272:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8016274:	687b      	ldr	r3, [r7, #4]
 8016276:	2200      	movs	r2, #0
 8016278:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 801627c:	687b      	ldr	r3, [r7, #4]
 801627e:	2200      	movs	r2, #0
 8016280:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8016284:	bf00      	nop
 8016286:	3714      	adds	r7, #20
 8016288:	46bd      	mov	sp, r7
 801628a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801628e:	4770      	bx	lr
 8016290:	fffffc90 	.word	0xfffffc90

08016294 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8016294:	b580      	push	{r7, lr}
 8016296:	b084      	sub	sp, #16
 8016298:	af00      	add	r7, sp, #0
 801629a:	60f8      	str	r0, [r7, #12]
 801629c:	60b9      	str	r1, [r7, #8]
 801629e:	603b      	str	r3, [r7, #0]
 80162a0:	4613      	mov	r3, r2
 80162a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80162a4:	e010      	b.n	80162c8 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80162a6:	f7f3 f95d 	bl	8009564 <HAL_GetTick>
 80162aa:	4602      	mov	r2, r0
 80162ac:	69bb      	ldr	r3, [r7, #24]
 80162ae:	1ad3      	subs	r3, r2, r3
 80162b0:	683a      	ldr	r2, [r7, #0]
 80162b2:	429a      	cmp	r2, r3
 80162b4:	d803      	bhi.n	80162be <SPI_WaitOnFlagUntilTimeout+0x2a>
 80162b6:	683b      	ldr	r3, [r7, #0]
 80162b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80162bc:	d102      	bne.n	80162c4 <SPI_WaitOnFlagUntilTimeout+0x30>
 80162be:	683b      	ldr	r3, [r7, #0]
 80162c0:	2b00      	cmp	r3, #0
 80162c2:	d101      	bne.n	80162c8 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 80162c4:	2303      	movs	r3, #3
 80162c6:	e00f      	b.n	80162e8 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80162c8:	68fb      	ldr	r3, [r7, #12]
 80162ca:	681b      	ldr	r3, [r3, #0]
 80162cc:	695a      	ldr	r2, [r3, #20]
 80162ce:	68bb      	ldr	r3, [r7, #8]
 80162d0:	4013      	ands	r3, r2
 80162d2:	68ba      	ldr	r2, [r7, #8]
 80162d4:	429a      	cmp	r2, r3
 80162d6:	bf0c      	ite	eq
 80162d8:	2301      	moveq	r3, #1
 80162da:	2300      	movne	r3, #0
 80162dc:	b2db      	uxtb	r3, r3
 80162de:	461a      	mov	r2, r3
 80162e0:	79fb      	ldrb	r3, [r7, #7]
 80162e2:	429a      	cmp	r2, r3
 80162e4:	d0df      	beq.n	80162a6 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 80162e6:	2300      	movs	r3, #0
}
 80162e8:	4618      	mov	r0, r3
 80162ea:	3710      	adds	r7, #16
 80162ec:	46bd      	mov	sp, r7
 80162ee:	bd80      	pop	{r7, pc}

080162f0 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 80162f0:	b480      	push	{r7}
 80162f2:	b085      	sub	sp, #20
 80162f4:	af00      	add	r7, sp, #0
 80162f6:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80162f8:	687b      	ldr	r3, [r7, #4]
 80162fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80162fc:	095b      	lsrs	r3, r3, #5
 80162fe:	3301      	adds	r3, #1
 8016300:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8016302:	687b      	ldr	r3, [r7, #4]
 8016304:	68db      	ldr	r3, [r3, #12]
 8016306:	3301      	adds	r3, #1
 8016308:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 801630a:	68bb      	ldr	r3, [r7, #8]
 801630c:	3307      	adds	r3, #7
 801630e:	08db      	lsrs	r3, r3, #3
 8016310:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8016312:	68bb      	ldr	r3, [r7, #8]
 8016314:	68fa      	ldr	r2, [r7, #12]
 8016316:	fb02 f303 	mul.w	r3, r2, r3
}
 801631a:	4618      	mov	r0, r3
 801631c:	3714      	adds	r7, #20
 801631e:	46bd      	mov	sp, r7
 8016320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016324:	4770      	bx	lr

08016326 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8016326:	b580      	push	{r7, lr}
 8016328:	b082      	sub	sp, #8
 801632a:	af00      	add	r7, sp, #0
 801632c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801632e:	687b      	ldr	r3, [r7, #4]
 8016330:	2b00      	cmp	r3, #0
 8016332:	d101      	bne.n	8016338 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8016334:	2301      	movs	r3, #1
 8016336:	e049      	b.n	80163cc <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8016338:	687b      	ldr	r3, [r7, #4]
 801633a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 801633e:	b2db      	uxtb	r3, r3
 8016340:	2b00      	cmp	r3, #0
 8016342:	d106      	bne.n	8016352 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8016344:	687b      	ldr	r3, [r7, #4]
 8016346:	2200      	movs	r2, #0
 8016348:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801634c:	6878      	ldr	r0, [r7, #4]
 801634e:	f7f2 ff13 	bl	8009178 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8016352:	687b      	ldr	r3, [r7, #4]
 8016354:	2202      	movs	r2, #2
 8016356:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801635a:	687b      	ldr	r3, [r7, #4]
 801635c:	681a      	ldr	r2, [r3, #0]
 801635e:	687b      	ldr	r3, [r7, #4]
 8016360:	3304      	adds	r3, #4
 8016362:	4619      	mov	r1, r3
 8016364:	4610      	mov	r0, r2
 8016366:	f000 fedb 	bl	8017120 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801636a:	687b      	ldr	r3, [r7, #4]
 801636c:	2201      	movs	r2, #1
 801636e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8016372:	687b      	ldr	r3, [r7, #4]
 8016374:	2201      	movs	r2, #1
 8016376:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 801637a:	687b      	ldr	r3, [r7, #4]
 801637c:	2201      	movs	r2, #1
 801637e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8016382:	687b      	ldr	r3, [r7, #4]
 8016384:	2201      	movs	r2, #1
 8016386:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 801638a:	687b      	ldr	r3, [r7, #4]
 801638c:	2201      	movs	r2, #1
 801638e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8016392:	687b      	ldr	r3, [r7, #4]
 8016394:	2201      	movs	r2, #1
 8016396:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 801639a:	687b      	ldr	r3, [r7, #4]
 801639c:	2201      	movs	r2, #1
 801639e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80163a2:	687b      	ldr	r3, [r7, #4]
 80163a4:	2201      	movs	r2, #1
 80163a6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80163aa:	687b      	ldr	r3, [r7, #4]
 80163ac:	2201      	movs	r2, #1
 80163ae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80163b2:	687b      	ldr	r3, [r7, #4]
 80163b4:	2201      	movs	r2, #1
 80163b6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80163ba:	687b      	ldr	r3, [r7, #4]
 80163bc:	2201      	movs	r2, #1
 80163be:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80163c2:	687b      	ldr	r3, [r7, #4]
 80163c4:	2201      	movs	r2, #1
 80163c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80163ca:	2300      	movs	r3, #0
}
 80163cc:	4618      	mov	r0, r3
 80163ce:	3708      	adds	r7, #8
 80163d0:	46bd      	mov	sp, r7
 80163d2:	bd80      	pop	{r7, pc}

080163d4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80163d4:	b480      	push	{r7}
 80163d6:	b085      	sub	sp, #20
 80163d8:	af00      	add	r7, sp, #0
 80163da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80163dc:	687b      	ldr	r3, [r7, #4]
 80163de:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80163e2:	b2db      	uxtb	r3, r3
 80163e4:	2b01      	cmp	r3, #1
 80163e6:	d001      	beq.n	80163ec <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80163e8:	2301      	movs	r3, #1
 80163ea:	e056      	b.n	801649a <HAL_TIM_Base_Start+0xc6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80163ec:	687b      	ldr	r3, [r7, #4]
 80163ee:	2202      	movs	r2, #2
 80163f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80163f4:	687b      	ldr	r3, [r7, #4]
 80163f6:	681b      	ldr	r3, [r3, #0]
 80163f8:	4a2b      	ldr	r2, [pc, #172]	@ (80164a8 <HAL_TIM_Base_Start+0xd4>)
 80163fa:	4293      	cmp	r3, r2
 80163fc:	d02c      	beq.n	8016458 <HAL_TIM_Base_Start+0x84>
 80163fe:	687b      	ldr	r3, [r7, #4]
 8016400:	681b      	ldr	r3, [r3, #0]
 8016402:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8016406:	d027      	beq.n	8016458 <HAL_TIM_Base_Start+0x84>
 8016408:	687b      	ldr	r3, [r7, #4]
 801640a:	681b      	ldr	r3, [r3, #0]
 801640c:	4a27      	ldr	r2, [pc, #156]	@ (80164ac <HAL_TIM_Base_Start+0xd8>)
 801640e:	4293      	cmp	r3, r2
 8016410:	d022      	beq.n	8016458 <HAL_TIM_Base_Start+0x84>
 8016412:	687b      	ldr	r3, [r7, #4]
 8016414:	681b      	ldr	r3, [r3, #0]
 8016416:	4a26      	ldr	r2, [pc, #152]	@ (80164b0 <HAL_TIM_Base_Start+0xdc>)
 8016418:	4293      	cmp	r3, r2
 801641a:	d01d      	beq.n	8016458 <HAL_TIM_Base_Start+0x84>
 801641c:	687b      	ldr	r3, [r7, #4]
 801641e:	681b      	ldr	r3, [r3, #0]
 8016420:	4a24      	ldr	r2, [pc, #144]	@ (80164b4 <HAL_TIM_Base_Start+0xe0>)
 8016422:	4293      	cmp	r3, r2
 8016424:	d018      	beq.n	8016458 <HAL_TIM_Base_Start+0x84>
 8016426:	687b      	ldr	r3, [r7, #4]
 8016428:	681b      	ldr	r3, [r3, #0]
 801642a:	4a23      	ldr	r2, [pc, #140]	@ (80164b8 <HAL_TIM_Base_Start+0xe4>)
 801642c:	4293      	cmp	r3, r2
 801642e:	d013      	beq.n	8016458 <HAL_TIM_Base_Start+0x84>
 8016430:	687b      	ldr	r3, [r7, #4]
 8016432:	681b      	ldr	r3, [r3, #0]
 8016434:	4a21      	ldr	r2, [pc, #132]	@ (80164bc <HAL_TIM_Base_Start+0xe8>)
 8016436:	4293      	cmp	r3, r2
 8016438:	d00e      	beq.n	8016458 <HAL_TIM_Base_Start+0x84>
 801643a:	687b      	ldr	r3, [r7, #4]
 801643c:	681b      	ldr	r3, [r3, #0]
 801643e:	4a20      	ldr	r2, [pc, #128]	@ (80164c0 <HAL_TIM_Base_Start+0xec>)
 8016440:	4293      	cmp	r3, r2
 8016442:	d009      	beq.n	8016458 <HAL_TIM_Base_Start+0x84>
 8016444:	687b      	ldr	r3, [r7, #4]
 8016446:	681b      	ldr	r3, [r3, #0]
 8016448:	4a1e      	ldr	r2, [pc, #120]	@ (80164c4 <HAL_TIM_Base_Start+0xf0>)
 801644a:	4293      	cmp	r3, r2
 801644c:	d004      	beq.n	8016458 <HAL_TIM_Base_Start+0x84>
 801644e:	687b      	ldr	r3, [r7, #4]
 8016450:	681b      	ldr	r3, [r3, #0]
 8016452:	4a1d      	ldr	r2, [pc, #116]	@ (80164c8 <HAL_TIM_Base_Start+0xf4>)
 8016454:	4293      	cmp	r3, r2
 8016456:	d115      	bne.n	8016484 <HAL_TIM_Base_Start+0xb0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8016458:	687b      	ldr	r3, [r7, #4]
 801645a:	681b      	ldr	r3, [r3, #0]
 801645c:	689a      	ldr	r2, [r3, #8]
 801645e:	4b1b      	ldr	r3, [pc, #108]	@ (80164cc <HAL_TIM_Base_Start+0xf8>)
 8016460:	4013      	ands	r3, r2
 8016462:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8016464:	68fb      	ldr	r3, [r7, #12]
 8016466:	2b06      	cmp	r3, #6
 8016468:	d015      	beq.n	8016496 <HAL_TIM_Base_Start+0xc2>
 801646a:	68fb      	ldr	r3, [r7, #12]
 801646c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8016470:	d011      	beq.n	8016496 <HAL_TIM_Base_Start+0xc2>
    {
      __HAL_TIM_ENABLE(htim);
 8016472:	687b      	ldr	r3, [r7, #4]
 8016474:	681b      	ldr	r3, [r3, #0]
 8016476:	681a      	ldr	r2, [r3, #0]
 8016478:	687b      	ldr	r3, [r7, #4]
 801647a:	681b      	ldr	r3, [r3, #0]
 801647c:	f042 0201 	orr.w	r2, r2, #1
 8016480:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8016482:	e008      	b.n	8016496 <HAL_TIM_Base_Start+0xc2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8016484:	687b      	ldr	r3, [r7, #4]
 8016486:	681b      	ldr	r3, [r3, #0]
 8016488:	681a      	ldr	r2, [r3, #0]
 801648a:	687b      	ldr	r3, [r7, #4]
 801648c:	681b      	ldr	r3, [r3, #0]
 801648e:	f042 0201 	orr.w	r2, r2, #1
 8016492:	601a      	str	r2, [r3, #0]
 8016494:	e000      	b.n	8016498 <HAL_TIM_Base_Start+0xc4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8016496:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8016498:	2300      	movs	r3, #0
}
 801649a:	4618      	mov	r0, r3
 801649c:	3714      	adds	r7, #20
 801649e:	46bd      	mov	sp, r7
 80164a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164a4:	4770      	bx	lr
 80164a6:	bf00      	nop
 80164a8:	40010000 	.word	0x40010000
 80164ac:	40000400 	.word	0x40000400
 80164b0:	40000800 	.word	0x40000800
 80164b4:	40000c00 	.word	0x40000c00
 80164b8:	40010400 	.word	0x40010400
 80164bc:	40001800 	.word	0x40001800
 80164c0:	40014000 	.word	0x40014000
 80164c4:	4000e000 	.word	0x4000e000
 80164c8:	4000e400 	.word	0x4000e400
 80164cc:	00010007 	.word	0x00010007

080164d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80164d0:	b480      	push	{r7}
 80164d2:	b085      	sub	sp, #20
 80164d4:	af00      	add	r7, sp, #0
 80164d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80164d8:	687b      	ldr	r3, [r7, #4]
 80164da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80164de:	b2db      	uxtb	r3, r3
 80164e0:	2b01      	cmp	r3, #1
 80164e2:	d001      	beq.n	80164e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80164e4:	2301      	movs	r3, #1
 80164e6:	e05e      	b.n	80165a6 <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80164e8:	687b      	ldr	r3, [r7, #4]
 80164ea:	2202      	movs	r2, #2
 80164ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80164f0:	687b      	ldr	r3, [r7, #4]
 80164f2:	681b      	ldr	r3, [r3, #0]
 80164f4:	68da      	ldr	r2, [r3, #12]
 80164f6:	687b      	ldr	r3, [r7, #4]
 80164f8:	681b      	ldr	r3, [r3, #0]
 80164fa:	f042 0201 	orr.w	r2, r2, #1
 80164fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8016500:	687b      	ldr	r3, [r7, #4]
 8016502:	681b      	ldr	r3, [r3, #0]
 8016504:	4a2b      	ldr	r2, [pc, #172]	@ (80165b4 <HAL_TIM_Base_Start_IT+0xe4>)
 8016506:	4293      	cmp	r3, r2
 8016508:	d02c      	beq.n	8016564 <HAL_TIM_Base_Start_IT+0x94>
 801650a:	687b      	ldr	r3, [r7, #4]
 801650c:	681b      	ldr	r3, [r3, #0]
 801650e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8016512:	d027      	beq.n	8016564 <HAL_TIM_Base_Start_IT+0x94>
 8016514:	687b      	ldr	r3, [r7, #4]
 8016516:	681b      	ldr	r3, [r3, #0]
 8016518:	4a27      	ldr	r2, [pc, #156]	@ (80165b8 <HAL_TIM_Base_Start_IT+0xe8>)
 801651a:	4293      	cmp	r3, r2
 801651c:	d022      	beq.n	8016564 <HAL_TIM_Base_Start_IT+0x94>
 801651e:	687b      	ldr	r3, [r7, #4]
 8016520:	681b      	ldr	r3, [r3, #0]
 8016522:	4a26      	ldr	r2, [pc, #152]	@ (80165bc <HAL_TIM_Base_Start_IT+0xec>)
 8016524:	4293      	cmp	r3, r2
 8016526:	d01d      	beq.n	8016564 <HAL_TIM_Base_Start_IT+0x94>
 8016528:	687b      	ldr	r3, [r7, #4]
 801652a:	681b      	ldr	r3, [r3, #0]
 801652c:	4a24      	ldr	r2, [pc, #144]	@ (80165c0 <HAL_TIM_Base_Start_IT+0xf0>)
 801652e:	4293      	cmp	r3, r2
 8016530:	d018      	beq.n	8016564 <HAL_TIM_Base_Start_IT+0x94>
 8016532:	687b      	ldr	r3, [r7, #4]
 8016534:	681b      	ldr	r3, [r3, #0]
 8016536:	4a23      	ldr	r2, [pc, #140]	@ (80165c4 <HAL_TIM_Base_Start_IT+0xf4>)
 8016538:	4293      	cmp	r3, r2
 801653a:	d013      	beq.n	8016564 <HAL_TIM_Base_Start_IT+0x94>
 801653c:	687b      	ldr	r3, [r7, #4]
 801653e:	681b      	ldr	r3, [r3, #0]
 8016540:	4a21      	ldr	r2, [pc, #132]	@ (80165c8 <HAL_TIM_Base_Start_IT+0xf8>)
 8016542:	4293      	cmp	r3, r2
 8016544:	d00e      	beq.n	8016564 <HAL_TIM_Base_Start_IT+0x94>
 8016546:	687b      	ldr	r3, [r7, #4]
 8016548:	681b      	ldr	r3, [r3, #0]
 801654a:	4a20      	ldr	r2, [pc, #128]	@ (80165cc <HAL_TIM_Base_Start_IT+0xfc>)
 801654c:	4293      	cmp	r3, r2
 801654e:	d009      	beq.n	8016564 <HAL_TIM_Base_Start_IT+0x94>
 8016550:	687b      	ldr	r3, [r7, #4]
 8016552:	681b      	ldr	r3, [r3, #0]
 8016554:	4a1e      	ldr	r2, [pc, #120]	@ (80165d0 <HAL_TIM_Base_Start_IT+0x100>)
 8016556:	4293      	cmp	r3, r2
 8016558:	d004      	beq.n	8016564 <HAL_TIM_Base_Start_IT+0x94>
 801655a:	687b      	ldr	r3, [r7, #4]
 801655c:	681b      	ldr	r3, [r3, #0]
 801655e:	4a1d      	ldr	r2, [pc, #116]	@ (80165d4 <HAL_TIM_Base_Start_IT+0x104>)
 8016560:	4293      	cmp	r3, r2
 8016562:	d115      	bne.n	8016590 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8016564:	687b      	ldr	r3, [r7, #4]
 8016566:	681b      	ldr	r3, [r3, #0]
 8016568:	689a      	ldr	r2, [r3, #8]
 801656a:	4b1b      	ldr	r3, [pc, #108]	@ (80165d8 <HAL_TIM_Base_Start_IT+0x108>)
 801656c:	4013      	ands	r3, r2
 801656e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8016570:	68fb      	ldr	r3, [r7, #12]
 8016572:	2b06      	cmp	r3, #6
 8016574:	d015      	beq.n	80165a2 <HAL_TIM_Base_Start_IT+0xd2>
 8016576:	68fb      	ldr	r3, [r7, #12]
 8016578:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801657c:	d011      	beq.n	80165a2 <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 801657e:	687b      	ldr	r3, [r7, #4]
 8016580:	681b      	ldr	r3, [r3, #0]
 8016582:	681a      	ldr	r2, [r3, #0]
 8016584:	687b      	ldr	r3, [r7, #4]
 8016586:	681b      	ldr	r3, [r3, #0]
 8016588:	f042 0201 	orr.w	r2, r2, #1
 801658c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801658e:	e008      	b.n	80165a2 <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8016590:	687b      	ldr	r3, [r7, #4]
 8016592:	681b      	ldr	r3, [r3, #0]
 8016594:	681a      	ldr	r2, [r3, #0]
 8016596:	687b      	ldr	r3, [r7, #4]
 8016598:	681b      	ldr	r3, [r3, #0]
 801659a:	f042 0201 	orr.w	r2, r2, #1
 801659e:	601a      	str	r2, [r3, #0]
 80165a0:	e000      	b.n	80165a4 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80165a2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80165a4:	2300      	movs	r3, #0
}
 80165a6:	4618      	mov	r0, r3
 80165a8:	3714      	adds	r7, #20
 80165aa:	46bd      	mov	sp, r7
 80165ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165b0:	4770      	bx	lr
 80165b2:	bf00      	nop
 80165b4:	40010000 	.word	0x40010000
 80165b8:	40000400 	.word	0x40000400
 80165bc:	40000800 	.word	0x40000800
 80165c0:	40000c00 	.word	0x40000c00
 80165c4:	40010400 	.word	0x40010400
 80165c8:	40001800 	.word	0x40001800
 80165cc:	40014000 	.word	0x40014000
 80165d0:	4000e000 	.word	0x4000e000
 80165d4:	4000e400 	.word	0x4000e400
 80165d8:	00010007 	.word	0x00010007

080165dc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80165dc:	b580      	push	{r7, lr}
 80165de:	b082      	sub	sp, #8
 80165e0:	af00      	add	r7, sp, #0
 80165e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80165e4:	687b      	ldr	r3, [r7, #4]
 80165e6:	2b00      	cmp	r3, #0
 80165e8:	d101      	bne.n	80165ee <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80165ea:	2301      	movs	r3, #1
 80165ec:	e049      	b.n	8016682 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80165ee:	687b      	ldr	r3, [r7, #4]
 80165f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80165f4:	b2db      	uxtb	r3, r3
 80165f6:	2b00      	cmp	r3, #0
 80165f8:	d106      	bne.n	8016608 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80165fa:	687b      	ldr	r3, [r7, #4]
 80165fc:	2200      	movs	r2, #0
 80165fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8016602:	6878      	ldr	r0, [r7, #4]
 8016604:	f7f2 fd2e 	bl	8009064 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8016608:	687b      	ldr	r3, [r7, #4]
 801660a:	2202      	movs	r2, #2
 801660c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8016610:	687b      	ldr	r3, [r7, #4]
 8016612:	681a      	ldr	r2, [r3, #0]
 8016614:	687b      	ldr	r3, [r7, #4]
 8016616:	3304      	adds	r3, #4
 8016618:	4619      	mov	r1, r3
 801661a:	4610      	mov	r0, r2
 801661c:	f000 fd80 	bl	8017120 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8016620:	687b      	ldr	r3, [r7, #4]
 8016622:	2201      	movs	r2, #1
 8016624:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8016628:	687b      	ldr	r3, [r7, #4]
 801662a:	2201      	movs	r2, #1
 801662c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8016630:	687b      	ldr	r3, [r7, #4]
 8016632:	2201      	movs	r2, #1
 8016634:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8016638:	687b      	ldr	r3, [r7, #4]
 801663a:	2201      	movs	r2, #1
 801663c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8016640:	687b      	ldr	r3, [r7, #4]
 8016642:	2201      	movs	r2, #1
 8016644:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8016648:	687b      	ldr	r3, [r7, #4]
 801664a:	2201      	movs	r2, #1
 801664c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8016650:	687b      	ldr	r3, [r7, #4]
 8016652:	2201      	movs	r2, #1
 8016654:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8016658:	687b      	ldr	r3, [r7, #4]
 801665a:	2201      	movs	r2, #1
 801665c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8016660:	687b      	ldr	r3, [r7, #4]
 8016662:	2201      	movs	r2, #1
 8016664:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8016668:	687b      	ldr	r3, [r7, #4]
 801666a:	2201      	movs	r2, #1
 801666c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8016670:	687b      	ldr	r3, [r7, #4]
 8016672:	2201      	movs	r2, #1
 8016674:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8016678:	687b      	ldr	r3, [r7, #4]
 801667a:	2201      	movs	r2, #1
 801667c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8016680:	2300      	movs	r3, #0
}
 8016682:	4618      	mov	r0, r3
 8016684:	3708      	adds	r7, #8
 8016686:	46bd      	mov	sp, r7
 8016688:	bd80      	pop	{r7, pc}
	...

0801668c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801668c:	b580      	push	{r7, lr}
 801668e:	b084      	sub	sp, #16
 8016690:	af00      	add	r7, sp, #0
 8016692:	6078      	str	r0, [r7, #4]
 8016694:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8016696:	683b      	ldr	r3, [r7, #0]
 8016698:	2b00      	cmp	r3, #0
 801669a:	d109      	bne.n	80166b0 <HAL_TIM_PWM_Start+0x24>
 801669c:	687b      	ldr	r3, [r7, #4]
 801669e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80166a2:	b2db      	uxtb	r3, r3
 80166a4:	2b01      	cmp	r3, #1
 80166a6:	bf14      	ite	ne
 80166a8:	2301      	movne	r3, #1
 80166aa:	2300      	moveq	r3, #0
 80166ac:	b2db      	uxtb	r3, r3
 80166ae:	e03c      	b.n	801672a <HAL_TIM_PWM_Start+0x9e>
 80166b0:	683b      	ldr	r3, [r7, #0]
 80166b2:	2b04      	cmp	r3, #4
 80166b4:	d109      	bne.n	80166ca <HAL_TIM_PWM_Start+0x3e>
 80166b6:	687b      	ldr	r3, [r7, #4]
 80166b8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80166bc:	b2db      	uxtb	r3, r3
 80166be:	2b01      	cmp	r3, #1
 80166c0:	bf14      	ite	ne
 80166c2:	2301      	movne	r3, #1
 80166c4:	2300      	moveq	r3, #0
 80166c6:	b2db      	uxtb	r3, r3
 80166c8:	e02f      	b.n	801672a <HAL_TIM_PWM_Start+0x9e>
 80166ca:	683b      	ldr	r3, [r7, #0]
 80166cc:	2b08      	cmp	r3, #8
 80166ce:	d109      	bne.n	80166e4 <HAL_TIM_PWM_Start+0x58>
 80166d0:	687b      	ldr	r3, [r7, #4]
 80166d2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80166d6:	b2db      	uxtb	r3, r3
 80166d8:	2b01      	cmp	r3, #1
 80166da:	bf14      	ite	ne
 80166dc:	2301      	movne	r3, #1
 80166de:	2300      	moveq	r3, #0
 80166e0:	b2db      	uxtb	r3, r3
 80166e2:	e022      	b.n	801672a <HAL_TIM_PWM_Start+0x9e>
 80166e4:	683b      	ldr	r3, [r7, #0]
 80166e6:	2b0c      	cmp	r3, #12
 80166e8:	d109      	bne.n	80166fe <HAL_TIM_PWM_Start+0x72>
 80166ea:	687b      	ldr	r3, [r7, #4]
 80166ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80166f0:	b2db      	uxtb	r3, r3
 80166f2:	2b01      	cmp	r3, #1
 80166f4:	bf14      	ite	ne
 80166f6:	2301      	movne	r3, #1
 80166f8:	2300      	moveq	r3, #0
 80166fa:	b2db      	uxtb	r3, r3
 80166fc:	e015      	b.n	801672a <HAL_TIM_PWM_Start+0x9e>
 80166fe:	683b      	ldr	r3, [r7, #0]
 8016700:	2b10      	cmp	r3, #16
 8016702:	d109      	bne.n	8016718 <HAL_TIM_PWM_Start+0x8c>
 8016704:	687b      	ldr	r3, [r7, #4]
 8016706:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801670a:	b2db      	uxtb	r3, r3
 801670c:	2b01      	cmp	r3, #1
 801670e:	bf14      	ite	ne
 8016710:	2301      	movne	r3, #1
 8016712:	2300      	moveq	r3, #0
 8016714:	b2db      	uxtb	r3, r3
 8016716:	e008      	b.n	801672a <HAL_TIM_PWM_Start+0x9e>
 8016718:	687b      	ldr	r3, [r7, #4]
 801671a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 801671e:	b2db      	uxtb	r3, r3
 8016720:	2b01      	cmp	r3, #1
 8016722:	bf14      	ite	ne
 8016724:	2301      	movne	r3, #1
 8016726:	2300      	moveq	r3, #0
 8016728:	b2db      	uxtb	r3, r3
 801672a:	2b00      	cmp	r3, #0
 801672c:	d001      	beq.n	8016732 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 801672e:	2301      	movs	r3, #1
 8016730:	e0ab      	b.n	801688a <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8016732:	683b      	ldr	r3, [r7, #0]
 8016734:	2b00      	cmp	r3, #0
 8016736:	d104      	bne.n	8016742 <HAL_TIM_PWM_Start+0xb6>
 8016738:	687b      	ldr	r3, [r7, #4]
 801673a:	2202      	movs	r2, #2
 801673c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8016740:	e023      	b.n	801678a <HAL_TIM_PWM_Start+0xfe>
 8016742:	683b      	ldr	r3, [r7, #0]
 8016744:	2b04      	cmp	r3, #4
 8016746:	d104      	bne.n	8016752 <HAL_TIM_PWM_Start+0xc6>
 8016748:	687b      	ldr	r3, [r7, #4]
 801674a:	2202      	movs	r2, #2
 801674c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8016750:	e01b      	b.n	801678a <HAL_TIM_PWM_Start+0xfe>
 8016752:	683b      	ldr	r3, [r7, #0]
 8016754:	2b08      	cmp	r3, #8
 8016756:	d104      	bne.n	8016762 <HAL_TIM_PWM_Start+0xd6>
 8016758:	687b      	ldr	r3, [r7, #4]
 801675a:	2202      	movs	r2, #2
 801675c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8016760:	e013      	b.n	801678a <HAL_TIM_PWM_Start+0xfe>
 8016762:	683b      	ldr	r3, [r7, #0]
 8016764:	2b0c      	cmp	r3, #12
 8016766:	d104      	bne.n	8016772 <HAL_TIM_PWM_Start+0xe6>
 8016768:	687b      	ldr	r3, [r7, #4]
 801676a:	2202      	movs	r2, #2
 801676c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8016770:	e00b      	b.n	801678a <HAL_TIM_PWM_Start+0xfe>
 8016772:	683b      	ldr	r3, [r7, #0]
 8016774:	2b10      	cmp	r3, #16
 8016776:	d104      	bne.n	8016782 <HAL_TIM_PWM_Start+0xf6>
 8016778:	687b      	ldr	r3, [r7, #4]
 801677a:	2202      	movs	r2, #2
 801677c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8016780:	e003      	b.n	801678a <HAL_TIM_PWM_Start+0xfe>
 8016782:	687b      	ldr	r3, [r7, #4]
 8016784:	2202      	movs	r2, #2
 8016786:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801678a:	687b      	ldr	r3, [r7, #4]
 801678c:	681b      	ldr	r3, [r3, #0]
 801678e:	2201      	movs	r2, #1
 8016790:	6839      	ldr	r1, [r7, #0]
 8016792:	4618      	mov	r0, r3
 8016794:	f001 fa1a 	bl	8017bcc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8016798:	687b      	ldr	r3, [r7, #4]
 801679a:	681b      	ldr	r3, [r3, #0]
 801679c:	4a3d      	ldr	r2, [pc, #244]	@ (8016894 <HAL_TIM_PWM_Start+0x208>)
 801679e:	4293      	cmp	r3, r2
 80167a0:	d013      	beq.n	80167ca <HAL_TIM_PWM_Start+0x13e>
 80167a2:	687b      	ldr	r3, [r7, #4]
 80167a4:	681b      	ldr	r3, [r3, #0]
 80167a6:	4a3c      	ldr	r2, [pc, #240]	@ (8016898 <HAL_TIM_PWM_Start+0x20c>)
 80167a8:	4293      	cmp	r3, r2
 80167aa:	d00e      	beq.n	80167ca <HAL_TIM_PWM_Start+0x13e>
 80167ac:	687b      	ldr	r3, [r7, #4]
 80167ae:	681b      	ldr	r3, [r3, #0]
 80167b0:	4a3a      	ldr	r2, [pc, #232]	@ (801689c <HAL_TIM_PWM_Start+0x210>)
 80167b2:	4293      	cmp	r3, r2
 80167b4:	d009      	beq.n	80167ca <HAL_TIM_PWM_Start+0x13e>
 80167b6:	687b      	ldr	r3, [r7, #4]
 80167b8:	681b      	ldr	r3, [r3, #0]
 80167ba:	4a39      	ldr	r2, [pc, #228]	@ (80168a0 <HAL_TIM_PWM_Start+0x214>)
 80167bc:	4293      	cmp	r3, r2
 80167be:	d004      	beq.n	80167ca <HAL_TIM_PWM_Start+0x13e>
 80167c0:	687b      	ldr	r3, [r7, #4]
 80167c2:	681b      	ldr	r3, [r3, #0]
 80167c4:	4a37      	ldr	r2, [pc, #220]	@ (80168a4 <HAL_TIM_PWM_Start+0x218>)
 80167c6:	4293      	cmp	r3, r2
 80167c8:	d101      	bne.n	80167ce <HAL_TIM_PWM_Start+0x142>
 80167ca:	2301      	movs	r3, #1
 80167cc:	e000      	b.n	80167d0 <HAL_TIM_PWM_Start+0x144>
 80167ce:	2300      	movs	r3, #0
 80167d0:	2b00      	cmp	r3, #0
 80167d2:	d007      	beq.n	80167e4 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80167d4:	687b      	ldr	r3, [r7, #4]
 80167d6:	681b      	ldr	r3, [r3, #0]
 80167d8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80167da:	687b      	ldr	r3, [r7, #4]
 80167dc:	681b      	ldr	r3, [r3, #0]
 80167de:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80167e2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80167e4:	687b      	ldr	r3, [r7, #4]
 80167e6:	681b      	ldr	r3, [r3, #0]
 80167e8:	4a2a      	ldr	r2, [pc, #168]	@ (8016894 <HAL_TIM_PWM_Start+0x208>)
 80167ea:	4293      	cmp	r3, r2
 80167ec:	d02c      	beq.n	8016848 <HAL_TIM_PWM_Start+0x1bc>
 80167ee:	687b      	ldr	r3, [r7, #4]
 80167f0:	681b      	ldr	r3, [r3, #0]
 80167f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80167f6:	d027      	beq.n	8016848 <HAL_TIM_PWM_Start+0x1bc>
 80167f8:	687b      	ldr	r3, [r7, #4]
 80167fa:	681b      	ldr	r3, [r3, #0]
 80167fc:	4a2a      	ldr	r2, [pc, #168]	@ (80168a8 <HAL_TIM_PWM_Start+0x21c>)
 80167fe:	4293      	cmp	r3, r2
 8016800:	d022      	beq.n	8016848 <HAL_TIM_PWM_Start+0x1bc>
 8016802:	687b      	ldr	r3, [r7, #4]
 8016804:	681b      	ldr	r3, [r3, #0]
 8016806:	4a29      	ldr	r2, [pc, #164]	@ (80168ac <HAL_TIM_PWM_Start+0x220>)
 8016808:	4293      	cmp	r3, r2
 801680a:	d01d      	beq.n	8016848 <HAL_TIM_PWM_Start+0x1bc>
 801680c:	687b      	ldr	r3, [r7, #4]
 801680e:	681b      	ldr	r3, [r3, #0]
 8016810:	4a27      	ldr	r2, [pc, #156]	@ (80168b0 <HAL_TIM_PWM_Start+0x224>)
 8016812:	4293      	cmp	r3, r2
 8016814:	d018      	beq.n	8016848 <HAL_TIM_PWM_Start+0x1bc>
 8016816:	687b      	ldr	r3, [r7, #4]
 8016818:	681b      	ldr	r3, [r3, #0]
 801681a:	4a1f      	ldr	r2, [pc, #124]	@ (8016898 <HAL_TIM_PWM_Start+0x20c>)
 801681c:	4293      	cmp	r3, r2
 801681e:	d013      	beq.n	8016848 <HAL_TIM_PWM_Start+0x1bc>
 8016820:	687b      	ldr	r3, [r7, #4]
 8016822:	681b      	ldr	r3, [r3, #0]
 8016824:	4a23      	ldr	r2, [pc, #140]	@ (80168b4 <HAL_TIM_PWM_Start+0x228>)
 8016826:	4293      	cmp	r3, r2
 8016828:	d00e      	beq.n	8016848 <HAL_TIM_PWM_Start+0x1bc>
 801682a:	687b      	ldr	r3, [r7, #4]
 801682c:	681b      	ldr	r3, [r3, #0]
 801682e:	4a1b      	ldr	r2, [pc, #108]	@ (801689c <HAL_TIM_PWM_Start+0x210>)
 8016830:	4293      	cmp	r3, r2
 8016832:	d009      	beq.n	8016848 <HAL_TIM_PWM_Start+0x1bc>
 8016834:	687b      	ldr	r3, [r7, #4]
 8016836:	681b      	ldr	r3, [r3, #0]
 8016838:	4a1f      	ldr	r2, [pc, #124]	@ (80168b8 <HAL_TIM_PWM_Start+0x22c>)
 801683a:	4293      	cmp	r3, r2
 801683c:	d004      	beq.n	8016848 <HAL_TIM_PWM_Start+0x1bc>
 801683e:	687b      	ldr	r3, [r7, #4]
 8016840:	681b      	ldr	r3, [r3, #0]
 8016842:	4a1e      	ldr	r2, [pc, #120]	@ (80168bc <HAL_TIM_PWM_Start+0x230>)
 8016844:	4293      	cmp	r3, r2
 8016846:	d115      	bne.n	8016874 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8016848:	687b      	ldr	r3, [r7, #4]
 801684a:	681b      	ldr	r3, [r3, #0]
 801684c:	689a      	ldr	r2, [r3, #8]
 801684e:	4b1c      	ldr	r3, [pc, #112]	@ (80168c0 <HAL_TIM_PWM_Start+0x234>)
 8016850:	4013      	ands	r3, r2
 8016852:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8016854:	68fb      	ldr	r3, [r7, #12]
 8016856:	2b06      	cmp	r3, #6
 8016858:	d015      	beq.n	8016886 <HAL_TIM_PWM_Start+0x1fa>
 801685a:	68fb      	ldr	r3, [r7, #12]
 801685c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8016860:	d011      	beq.n	8016886 <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 8016862:	687b      	ldr	r3, [r7, #4]
 8016864:	681b      	ldr	r3, [r3, #0]
 8016866:	681a      	ldr	r2, [r3, #0]
 8016868:	687b      	ldr	r3, [r7, #4]
 801686a:	681b      	ldr	r3, [r3, #0]
 801686c:	f042 0201 	orr.w	r2, r2, #1
 8016870:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8016872:	e008      	b.n	8016886 <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8016874:	687b      	ldr	r3, [r7, #4]
 8016876:	681b      	ldr	r3, [r3, #0]
 8016878:	681a      	ldr	r2, [r3, #0]
 801687a:	687b      	ldr	r3, [r7, #4]
 801687c:	681b      	ldr	r3, [r3, #0]
 801687e:	f042 0201 	orr.w	r2, r2, #1
 8016882:	601a      	str	r2, [r3, #0]
 8016884:	e000      	b.n	8016888 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8016886:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8016888:	2300      	movs	r3, #0
}
 801688a:	4618      	mov	r0, r3
 801688c:	3710      	adds	r7, #16
 801688e:	46bd      	mov	sp, r7
 8016890:	bd80      	pop	{r7, pc}
 8016892:	bf00      	nop
 8016894:	40010000 	.word	0x40010000
 8016898:	40010400 	.word	0x40010400
 801689c:	40014000 	.word	0x40014000
 80168a0:	40014400 	.word	0x40014400
 80168a4:	40014800 	.word	0x40014800
 80168a8:	40000400 	.word	0x40000400
 80168ac:	40000800 	.word	0x40000800
 80168b0:	40000c00 	.word	0x40000c00
 80168b4:	40001800 	.word	0x40001800
 80168b8:	4000e000 	.word	0x4000e000
 80168bc:	4000e400 	.word	0x4000e400
 80168c0:	00010007 	.word	0x00010007

080168c4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80168c4:	b580      	push	{r7, lr}
 80168c6:	b082      	sub	sp, #8
 80168c8:	af00      	add	r7, sp, #0
 80168ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80168cc:	687b      	ldr	r3, [r7, #4]
 80168ce:	2b00      	cmp	r3, #0
 80168d0:	d101      	bne.n	80168d6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80168d2:	2301      	movs	r3, #1
 80168d4:	e049      	b.n	801696a <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80168d6:	687b      	ldr	r3, [r7, #4]
 80168d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80168dc:	b2db      	uxtb	r3, r3
 80168de:	2b00      	cmp	r3, #0
 80168e0:	d106      	bne.n	80168f0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80168e2:	687b      	ldr	r3, [r7, #4]
 80168e4:	2200      	movs	r2, #0
 80168e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80168ea:	6878      	ldr	r0, [r7, #4]
 80168ec:	f7f2 fbf4 	bl	80090d8 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80168f0:	687b      	ldr	r3, [r7, #4]
 80168f2:	2202      	movs	r2, #2
 80168f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80168f8:	687b      	ldr	r3, [r7, #4]
 80168fa:	681a      	ldr	r2, [r3, #0]
 80168fc:	687b      	ldr	r3, [r7, #4]
 80168fe:	3304      	adds	r3, #4
 8016900:	4619      	mov	r1, r3
 8016902:	4610      	mov	r0, r2
 8016904:	f000 fc0c 	bl	8017120 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8016908:	687b      	ldr	r3, [r7, #4]
 801690a:	2201      	movs	r2, #1
 801690c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8016910:	687b      	ldr	r3, [r7, #4]
 8016912:	2201      	movs	r2, #1
 8016914:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8016918:	687b      	ldr	r3, [r7, #4]
 801691a:	2201      	movs	r2, #1
 801691c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8016920:	687b      	ldr	r3, [r7, #4]
 8016922:	2201      	movs	r2, #1
 8016924:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8016928:	687b      	ldr	r3, [r7, #4]
 801692a:	2201      	movs	r2, #1
 801692c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8016930:	687b      	ldr	r3, [r7, #4]
 8016932:	2201      	movs	r2, #1
 8016934:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8016938:	687b      	ldr	r3, [r7, #4]
 801693a:	2201      	movs	r2, #1
 801693c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8016940:	687b      	ldr	r3, [r7, #4]
 8016942:	2201      	movs	r2, #1
 8016944:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8016948:	687b      	ldr	r3, [r7, #4]
 801694a:	2201      	movs	r2, #1
 801694c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8016950:	687b      	ldr	r3, [r7, #4]
 8016952:	2201      	movs	r2, #1
 8016954:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8016958:	687b      	ldr	r3, [r7, #4]
 801695a:	2201      	movs	r2, #1
 801695c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8016960:	687b      	ldr	r3, [r7, #4]
 8016962:	2201      	movs	r2, #1
 8016964:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8016968:	2300      	movs	r3, #0
}
 801696a:	4618      	mov	r0, r3
 801696c:	3708      	adds	r7, #8
 801696e:	46bd      	mov	sp, r7
 8016970:	bd80      	pop	{r7, pc}

08016972 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8016972:	b580      	push	{r7, lr}
 8016974:	b084      	sub	sp, #16
 8016976:	af00      	add	r7, sp, #0
 8016978:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 801697a:	687b      	ldr	r3, [r7, #4]
 801697c:	681b      	ldr	r3, [r3, #0]
 801697e:	68db      	ldr	r3, [r3, #12]
 8016980:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8016982:	687b      	ldr	r3, [r7, #4]
 8016984:	681b      	ldr	r3, [r3, #0]
 8016986:	691b      	ldr	r3, [r3, #16]
 8016988:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 801698a:	68bb      	ldr	r3, [r7, #8]
 801698c:	f003 0302 	and.w	r3, r3, #2
 8016990:	2b00      	cmp	r3, #0
 8016992:	d020      	beq.n	80169d6 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8016994:	68fb      	ldr	r3, [r7, #12]
 8016996:	f003 0302 	and.w	r3, r3, #2
 801699a:	2b00      	cmp	r3, #0
 801699c:	d01b      	beq.n	80169d6 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 801699e:	687b      	ldr	r3, [r7, #4]
 80169a0:	681b      	ldr	r3, [r3, #0]
 80169a2:	f06f 0202 	mvn.w	r2, #2
 80169a6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80169a8:	687b      	ldr	r3, [r7, #4]
 80169aa:	2201      	movs	r2, #1
 80169ac:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80169ae:	687b      	ldr	r3, [r7, #4]
 80169b0:	681b      	ldr	r3, [r3, #0]
 80169b2:	699b      	ldr	r3, [r3, #24]
 80169b4:	f003 0303 	and.w	r3, r3, #3
 80169b8:	2b00      	cmp	r3, #0
 80169ba:	d003      	beq.n	80169c4 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80169bc:	6878      	ldr	r0, [r7, #4]
 80169be:	f000 fb91 	bl	80170e4 <HAL_TIM_IC_CaptureCallback>
 80169c2:	e005      	b.n	80169d0 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80169c4:	6878      	ldr	r0, [r7, #4]
 80169c6:	f000 fb83 	bl	80170d0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80169ca:	6878      	ldr	r0, [r7, #4]
 80169cc:	f000 fb94 	bl	80170f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80169d0:	687b      	ldr	r3, [r7, #4]
 80169d2:	2200      	movs	r2, #0
 80169d4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80169d6:	68bb      	ldr	r3, [r7, #8]
 80169d8:	f003 0304 	and.w	r3, r3, #4
 80169dc:	2b00      	cmp	r3, #0
 80169de:	d020      	beq.n	8016a22 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80169e0:	68fb      	ldr	r3, [r7, #12]
 80169e2:	f003 0304 	and.w	r3, r3, #4
 80169e6:	2b00      	cmp	r3, #0
 80169e8:	d01b      	beq.n	8016a22 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80169ea:	687b      	ldr	r3, [r7, #4]
 80169ec:	681b      	ldr	r3, [r3, #0]
 80169ee:	f06f 0204 	mvn.w	r2, #4
 80169f2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80169f4:	687b      	ldr	r3, [r7, #4]
 80169f6:	2202      	movs	r2, #2
 80169f8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80169fa:	687b      	ldr	r3, [r7, #4]
 80169fc:	681b      	ldr	r3, [r3, #0]
 80169fe:	699b      	ldr	r3, [r3, #24]
 8016a00:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8016a04:	2b00      	cmp	r3, #0
 8016a06:	d003      	beq.n	8016a10 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8016a08:	6878      	ldr	r0, [r7, #4]
 8016a0a:	f000 fb6b 	bl	80170e4 <HAL_TIM_IC_CaptureCallback>
 8016a0e:	e005      	b.n	8016a1c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8016a10:	6878      	ldr	r0, [r7, #4]
 8016a12:	f000 fb5d 	bl	80170d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8016a16:	6878      	ldr	r0, [r7, #4]
 8016a18:	f000 fb6e 	bl	80170f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8016a1c:	687b      	ldr	r3, [r7, #4]
 8016a1e:	2200      	movs	r2, #0
 8016a20:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8016a22:	68bb      	ldr	r3, [r7, #8]
 8016a24:	f003 0308 	and.w	r3, r3, #8
 8016a28:	2b00      	cmp	r3, #0
 8016a2a:	d020      	beq.n	8016a6e <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8016a2c:	68fb      	ldr	r3, [r7, #12]
 8016a2e:	f003 0308 	and.w	r3, r3, #8
 8016a32:	2b00      	cmp	r3, #0
 8016a34:	d01b      	beq.n	8016a6e <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8016a36:	687b      	ldr	r3, [r7, #4]
 8016a38:	681b      	ldr	r3, [r3, #0]
 8016a3a:	f06f 0208 	mvn.w	r2, #8
 8016a3e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8016a40:	687b      	ldr	r3, [r7, #4]
 8016a42:	2204      	movs	r2, #4
 8016a44:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8016a46:	687b      	ldr	r3, [r7, #4]
 8016a48:	681b      	ldr	r3, [r3, #0]
 8016a4a:	69db      	ldr	r3, [r3, #28]
 8016a4c:	f003 0303 	and.w	r3, r3, #3
 8016a50:	2b00      	cmp	r3, #0
 8016a52:	d003      	beq.n	8016a5c <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8016a54:	6878      	ldr	r0, [r7, #4]
 8016a56:	f000 fb45 	bl	80170e4 <HAL_TIM_IC_CaptureCallback>
 8016a5a:	e005      	b.n	8016a68 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8016a5c:	6878      	ldr	r0, [r7, #4]
 8016a5e:	f000 fb37 	bl	80170d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8016a62:	6878      	ldr	r0, [r7, #4]
 8016a64:	f000 fb48 	bl	80170f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8016a68:	687b      	ldr	r3, [r7, #4]
 8016a6a:	2200      	movs	r2, #0
 8016a6c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8016a6e:	68bb      	ldr	r3, [r7, #8]
 8016a70:	f003 0310 	and.w	r3, r3, #16
 8016a74:	2b00      	cmp	r3, #0
 8016a76:	d020      	beq.n	8016aba <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8016a78:	68fb      	ldr	r3, [r7, #12]
 8016a7a:	f003 0310 	and.w	r3, r3, #16
 8016a7e:	2b00      	cmp	r3, #0
 8016a80:	d01b      	beq.n	8016aba <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8016a82:	687b      	ldr	r3, [r7, #4]
 8016a84:	681b      	ldr	r3, [r3, #0]
 8016a86:	f06f 0210 	mvn.w	r2, #16
 8016a8a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8016a8c:	687b      	ldr	r3, [r7, #4]
 8016a8e:	2208      	movs	r2, #8
 8016a90:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8016a92:	687b      	ldr	r3, [r7, #4]
 8016a94:	681b      	ldr	r3, [r3, #0]
 8016a96:	69db      	ldr	r3, [r3, #28]
 8016a98:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8016a9c:	2b00      	cmp	r3, #0
 8016a9e:	d003      	beq.n	8016aa8 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8016aa0:	6878      	ldr	r0, [r7, #4]
 8016aa2:	f000 fb1f 	bl	80170e4 <HAL_TIM_IC_CaptureCallback>
 8016aa6:	e005      	b.n	8016ab4 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8016aa8:	6878      	ldr	r0, [r7, #4]
 8016aaa:	f000 fb11 	bl	80170d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8016aae:	6878      	ldr	r0, [r7, #4]
 8016ab0:	f000 fb22 	bl	80170f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8016ab4:	687b      	ldr	r3, [r7, #4]
 8016ab6:	2200      	movs	r2, #0
 8016ab8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8016aba:	68bb      	ldr	r3, [r7, #8]
 8016abc:	f003 0301 	and.w	r3, r3, #1
 8016ac0:	2b00      	cmp	r3, #0
 8016ac2:	d00c      	beq.n	8016ade <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8016ac4:	68fb      	ldr	r3, [r7, #12]
 8016ac6:	f003 0301 	and.w	r3, r3, #1
 8016aca:	2b00      	cmp	r3, #0
 8016acc:	d007      	beq.n	8016ade <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8016ace:	687b      	ldr	r3, [r7, #4]
 8016ad0:	681b      	ldr	r3, [r3, #0]
 8016ad2:	f06f 0201 	mvn.w	r2, #1
 8016ad6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8016ad8:	6878      	ldr	r0, [r7, #4]
 8016ada:	f7ef facd 	bl	8006078 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8016ade:	68bb      	ldr	r3, [r7, #8]
 8016ae0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8016ae4:	2b00      	cmp	r3, #0
 8016ae6:	d104      	bne.n	8016af2 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8016ae8:	68bb      	ldr	r3, [r7, #8]
 8016aea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8016aee:	2b00      	cmp	r3, #0
 8016af0:	d00c      	beq.n	8016b0c <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8016af2:	68fb      	ldr	r3, [r7, #12]
 8016af4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8016af8:	2b00      	cmp	r3, #0
 8016afa:	d007      	beq.n	8016b0c <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8016afc:	687b      	ldr	r3, [r7, #4]
 8016afe:	681b      	ldr	r3, [r3, #0]
 8016b00:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8016b04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8016b06:	6878      	ldr	r0, [r7, #4]
 8016b08:	f001 f9b8 	bl	8017e7c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8016b0c:	68bb      	ldr	r3, [r7, #8]
 8016b0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8016b12:	2b00      	cmp	r3, #0
 8016b14:	d00c      	beq.n	8016b30 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8016b16:	68fb      	ldr	r3, [r7, #12]
 8016b18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8016b1c:	2b00      	cmp	r3, #0
 8016b1e:	d007      	beq.n	8016b30 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8016b20:	687b      	ldr	r3, [r7, #4]
 8016b22:	681b      	ldr	r3, [r3, #0]
 8016b24:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8016b28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8016b2a:	6878      	ldr	r0, [r7, #4]
 8016b2c:	f001 f9b0 	bl	8017e90 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8016b30:	68bb      	ldr	r3, [r7, #8]
 8016b32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8016b36:	2b00      	cmp	r3, #0
 8016b38:	d00c      	beq.n	8016b54 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8016b3a:	68fb      	ldr	r3, [r7, #12]
 8016b3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8016b40:	2b00      	cmp	r3, #0
 8016b42:	d007      	beq.n	8016b54 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8016b44:	687b      	ldr	r3, [r7, #4]
 8016b46:	681b      	ldr	r3, [r3, #0]
 8016b48:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8016b4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8016b4e:	6878      	ldr	r0, [r7, #4]
 8016b50:	f000 fadc 	bl	801710c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8016b54:	68bb      	ldr	r3, [r7, #8]
 8016b56:	f003 0320 	and.w	r3, r3, #32
 8016b5a:	2b00      	cmp	r3, #0
 8016b5c:	d00c      	beq.n	8016b78 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8016b5e:	68fb      	ldr	r3, [r7, #12]
 8016b60:	f003 0320 	and.w	r3, r3, #32
 8016b64:	2b00      	cmp	r3, #0
 8016b66:	d007      	beq.n	8016b78 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8016b68:	687b      	ldr	r3, [r7, #4]
 8016b6a:	681b      	ldr	r3, [r3, #0]
 8016b6c:	f06f 0220 	mvn.w	r2, #32
 8016b70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8016b72:	6878      	ldr	r0, [r7, #4]
 8016b74:	f001 f978 	bl	8017e68 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8016b78:	bf00      	nop
 8016b7a:	3710      	adds	r7, #16
 8016b7c:	46bd      	mov	sp, r7
 8016b7e:	bd80      	pop	{r7, pc}

08016b80 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8016b80:	b580      	push	{r7, lr}
 8016b82:	b086      	sub	sp, #24
 8016b84:	af00      	add	r7, sp, #0
 8016b86:	60f8      	str	r0, [r7, #12]
 8016b88:	60b9      	str	r1, [r7, #8]
 8016b8a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8016b8c:	2300      	movs	r3, #0
 8016b8e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8016b90:	68fb      	ldr	r3, [r7, #12]
 8016b92:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8016b96:	2b01      	cmp	r3, #1
 8016b98:	d101      	bne.n	8016b9e <HAL_TIM_IC_ConfigChannel+0x1e>
 8016b9a:	2302      	movs	r3, #2
 8016b9c:	e088      	b.n	8016cb0 <HAL_TIM_IC_ConfigChannel+0x130>
 8016b9e:	68fb      	ldr	r3, [r7, #12]
 8016ba0:	2201      	movs	r2, #1
 8016ba2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8016ba6:	687b      	ldr	r3, [r7, #4]
 8016ba8:	2b00      	cmp	r3, #0
 8016baa:	d11b      	bne.n	8016be4 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8016bac:	68fb      	ldr	r3, [r7, #12]
 8016bae:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8016bb0:	68bb      	ldr	r3, [r7, #8]
 8016bb2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8016bb4:	68bb      	ldr	r3, [r7, #8]
 8016bb6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8016bb8:	68bb      	ldr	r3, [r7, #8]
 8016bba:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8016bbc:	f000 fe32 	bl	8017824 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8016bc0:	68fb      	ldr	r3, [r7, #12]
 8016bc2:	681b      	ldr	r3, [r3, #0]
 8016bc4:	699a      	ldr	r2, [r3, #24]
 8016bc6:	68fb      	ldr	r3, [r7, #12]
 8016bc8:	681b      	ldr	r3, [r3, #0]
 8016bca:	f022 020c 	bic.w	r2, r2, #12
 8016bce:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8016bd0:	68fb      	ldr	r3, [r7, #12]
 8016bd2:	681b      	ldr	r3, [r3, #0]
 8016bd4:	6999      	ldr	r1, [r3, #24]
 8016bd6:	68bb      	ldr	r3, [r7, #8]
 8016bd8:	689a      	ldr	r2, [r3, #8]
 8016bda:	68fb      	ldr	r3, [r7, #12]
 8016bdc:	681b      	ldr	r3, [r3, #0]
 8016bde:	430a      	orrs	r2, r1
 8016be0:	619a      	str	r2, [r3, #24]
 8016be2:	e060      	b.n	8016ca6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8016be4:	687b      	ldr	r3, [r7, #4]
 8016be6:	2b04      	cmp	r3, #4
 8016be8:	d11c      	bne.n	8016c24 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8016bea:	68fb      	ldr	r3, [r7, #12]
 8016bec:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8016bee:	68bb      	ldr	r3, [r7, #8]
 8016bf0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8016bf2:	68bb      	ldr	r3, [r7, #8]
 8016bf4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8016bf6:	68bb      	ldr	r3, [r7, #8]
 8016bf8:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8016bfa:	f000 fec2 	bl	8017982 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8016bfe:	68fb      	ldr	r3, [r7, #12]
 8016c00:	681b      	ldr	r3, [r3, #0]
 8016c02:	699a      	ldr	r2, [r3, #24]
 8016c04:	68fb      	ldr	r3, [r7, #12]
 8016c06:	681b      	ldr	r3, [r3, #0]
 8016c08:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8016c0c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8016c0e:	68fb      	ldr	r3, [r7, #12]
 8016c10:	681b      	ldr	r3, [r3, #0]
 8016c12:	6999      	ldr	r1, [r3, #24]
 8016c14:	68bb      	ldr	r3, [r7, #8]
 8016c16:	689b      	ldr	r3, [r3, #8]
 8016c18:	021a      	lsls	r2, r3, #8
 8016c1a:	68fb      	ldr	r3, [r7, #12]
 8016c1c:	681b      	ldr	r3, [r3, #0]
 8016c1e:	430a      	orrs	r2, r1
 8016c20:	619a      	str	r2, [r3, #24]
 8016c22:	e040      	b.n	8016ca6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8016c24:	687b      	ldr	r3, [r7, #4]
 8016c26:	2b08      	cmp	r3, #8
 8016c28:	d11b      	bne.n	8016c62 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8016c2a:	68fb      	ldr	r3, [r7, #12]
 8016c2c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8016c2e:	68bb      	ldr	r3, [r7, #8]
 8016c30:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8016c32:	68bb      	ldr	r3, [r7, #8]
 8016c34:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8016c36:	68bb      	ldr	r3, [r7, #8]
 8016c38:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8016c3a:	f000 ff0f 	bl	8017a5c <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8016c3e:	68fb      	ldr	r3, [r7, #12]
 8016c40:	681b      	ldr	r3, [r3, #0]
 8016c42:	69da      	ldr	r2, [r3, #28]
 8016c44:	68fb      	ldr	r3, [r7, #12]
 8016c46:	681b      	ldr	r3, [r3, #0]
 8016c48:	f022 020c 	bic.w	r2, r2, #12
 8016c4c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8016c4e:	68fb      	ldr	r3, [r7, #12]
 8016c50:	681b      	ldr	r3, [r3, #0]
 8016c52:	69d9      	ldr	r1, [r3, #28]
 8016c54:	68bb      	ldr	r3, [r7, #8]
 8016c56:	689a      	ldr	r2, [r3, #8]
 8016c58:	68fb      	ldr	r3, [r7, #12]
 8016c5a:	681b      	ldr	r3, [r3, #0]
 8016c5c:	430a      	orrs	r2, r1
 8016c5e:	61da      	str	r2, [r3, #28]
 8016c60:	e021      	b.n	8016ca6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8016c62:	687b      	ldr	r3, [r7, #4]
 8016c64:	2b0c      	cmp	r3, #12
 8016c66:	d11c      	bne.n	8016ca2 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8016c68:	68fb      	ldr	r3, [r7, #12]
 8016c6a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8016c6c:	68bb      	ldr	r3, [r7, #8]
 8016c6e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8016c70:	68bb      	ldr	r3, [r7, #8]
 8016c72:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8016c74:	68bb      	ldr	r3, [r7, #8]
 8016c76:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8016c78:	f000 ff2c 	bl	8017ad4 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8016c7c:	68fb      	ldr	r3, [r7, #12]
 8016c7e:	681b      	ldr	r3, [r3, #0]
 8016c80:	69da      	ldr	r2, [r3, #28]
 8016c82:	68fb      	ldr	r3, [r7, #12]
 8016c84:	681b      	ldr	r3, [r3, #0]
 8016c86:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8016c8a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8016c8c:	68fb      	ldr	r3, [r7, #12]
 8016c8e:	681b      	ldr	r3, [r3, #0]
 8016c90:	69d9      	ldr	r1, [r3, #28]
 8016c92:	68bb      	ldr	r3, [r7, #8]
 8016c94:	689b      	ldr	r3, [r3, #8]
 8016c96:	021a      	lsls	r2, r3, #8
 8016c98:	68fb      	ldr	r3, [r7, #12]
 8016c9a:	681b      	ldr	r3, [r3, #0]
 8016c9c:	430a      	orrs	r2, r1
 8016c9e:	61da      	str	r2, [r3, #28]
 8016ca0:	e001      	b.n	8016ca6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8016ca2:	2301      	movs	r3, #1
 8016ca4:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8016ca6:	68fb      	ldr	r3, [r7, #12]
 8016ca8:	2200      	movs	r2, #0
 8016caa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8016cae:	7dfb      	ldrb	r3, [r7, #23]
}
 8016cb0:	4618      	mov	r0, r3
 8016cb2:	3718      	adds	r7, #24
 8016cb4:	46bd      	mov	sp, r7
 8016cb6:	bd80      	pop	{r7, pc}

08016cb8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8016cb8:	b580      	push	{r7, lr}
 8016cba:	b086      	sub	sp, #24
 8016cbc:	af00      	add	r7, sp, #0
 8016cbe:	60f8      	str	r0, [r7, #12]
 8016cc0:	60b9      	str	r1, [r7, #8]
 8016cc2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8016cc4:	2300      	movs	r3, #0
 8016cc6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8016cc8:	68fb      	ldr	r3, [r7, #12]
 8016cca:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8016cce:	2b01      	cmp	r3, #1
 8016cd0:	d101      	bne.n	8016cd6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8016cd2:	2302      	movs	r3, #2
 8016cd4:	e0ff      	b.n	8016ed6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8016cd6:	68fb      	ldr	r3, [r7, #12]
 8016cd8:	2201      	movs	r2, #1
 8016cda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8016cde:	687b      	ldr	r3, [r7, #4]
 8016ce0:	2b14      	cmp	r3, #20
 8016ce2:	f200 80f0 	bhi.w	8016ec6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8016ce6:	a201      	add	r2, pc, #4	@ (adr r2, 8016cec <HAL_TIM_PWM_ConfigChannel+0x34>)
 8016ce8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016cec:	08016d41 	.word	0x08016d41
 8016cf0:	08016ec7 	.word	0x08016ec7
 8016cf4:	08016ec7 	.word	0x08016ec7
 8016cf8:	08016ec7 	.word	0x08016ec7
 8016cfc:	08016d81 	.word	0x08016d81
 8016d00:	08016ec7 	.word	0x08016ec7
 8016d04:	08016ec7 	.word	0x08016ec7
 8016d08:	08016ec7 	.word	0x08016ec7
 8016d0c:	08016dc3 	.word	0x08016dc3
 8016d10:	08016ec7 	.word	0x08016ec7
 8016d14:	08016ec7 	.word	0x08016ec7
 8016d18:	08016ec7 	.word	0x08016ec7
 8016d1c:	08016e03 	.word	0x08016e03
 8016d20:	08016ec7 	.word	0x08016ec7
 8016d24:	08016ec7 	.word	0x08016ec7
 8016d28:	08016ec7 	.word	0x08016ec7
 8016d2c:	08016e45 	.word	0x08016e45
 8016d30:	08016ec7 	.word	0x08016ec7
 8016d34:	08016ec7 	.word	0x08016ec7
 8016d38:	08016ec7 	.word	0x08016ec7
 8016d3c:	08016e85 	.word	0x08016e85
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8016d40:	68fb      	ldr	r3, [r7, #12]
 8016d42:	681b      	ldr	r3, [r3, #0]
 8016d44:	68b9      	ldr	r1, [r7, #8]
 8016d46:	4618      	mov	r0, r3
 8016d48:	f000 fa96 	bl	8017278 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8016d4c:	68fb      	ldr	r3, [r7, #12]
 8016d4e:	681b      	ldr	r3, [r3, #0]
 8016d50:	699a      	ldr	r2, [r3, #24]
 8016d52:	68fb      	ldr	r3, [r7, #12]
 8016d54:	681b      	ldr	r3, [r3, #0]
 8016d56:	f042 0208 	orr.w	r2, r2, #8
 8016d5a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8016d5c:	68fb      	ldr	r3, [r7, #12]
 8016d5e:	681b      	ldr	r3, [r3, #0]
 8016d60:	699a      	ldr	r2, [r3, #24]
 8016d62:	68fb      	ldr	r3, [r7, #12]
 8016d64:	681b      	ldr	r3, [r3, #0]
 8016d66:	f022 0204 	bic.w	r2, r2, #4
 8016d6a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8016d6c:	68fb      	ldr	r3, [r7, #12]
 8016d6e:	681b      	ldr	r3, [r3, #0]
 8016d70:	6999      	ldr	r1, [r3, #24]
 8016d72:	68bb      	ldr	r3, [r7, #8]
 8016d74:	691a      	ldr	r2, [r3, #16]
 8016d76:	68fb      	ldr	r3, [r7, #12]
 8016d78:	681b      	ldr	r3, [r3, #0]
 8016d7a:	430a      	orrs	r2, r1
 8016d7c:	619a      	str	r2, [r3, #24]
      break;
 8016d7e:	e0a5      	b.n	8016ecc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8016d80:	68fb      	ldr	r3, [r7, #12]
 8016d82:	681b      	ldr	r3, [r3, #0]
 8016d84:	68b9      	ldr	r1, [r7, #8]
 8016d86:	4618      	mov	r0, r3
 8016d88:	f000 fb06 	bl	8017398 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8016d8c:	68fb      	ldr	r3, [r7, #12]
 8016d8e:	681b      	ldr	r3, [r3, #0]
 8016d90:	699a      	ldr	r2, [r3, #24]
 8016d92:	68fb      	ldr	r3, [r7, #12]
 8016d94:	681b      	ldr	r3, [r3, #0]
 8016d96:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8016d9a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8016d9c:	68fb      	ldr	r3, [r7, #12]
 8016d9e:	681b      	ldr	r3, [r3, #0]
 8016da0:	699a      	ldr	r2, [r3, #24]
 8016da2:	68fb      	ldr	r3, [r7, #12]
 8016da4:	681b      	ldr	r3, [r3, #0]
 8016da6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8016daa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8016dac:	68fb      	ldr	r3, [r7, #12]
 8016dae:	681b      	ldr	r3, [r3, #0]
 8016db0:	6999      	ldr	r1, [r3, #24]
 8016db2:	68bb      	ldr	r3, [r7, #8]
 8016db4:	691b      	ldr	r3, [r3, #16]
 8016db6:	021a      	lsls	r2, r3, #8
 8016db8:	68fb      	ldr	r3, [r7, #12]
 8016dba:	681b      	ldr	r3, [r3, #0]
 8016dbc:	430a      	orrs	r2, r1
 8016dbe:	619a      	str	r2, [r3, #24]
      break;
 8016dc0:	e084      	b.n	8016ecc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8016dc2:	68fb      	ldr	r3, [r7, #12]
 8016dc4:	681b      	ldr	r3, [r3, #0]
 8016dc6:	68b9      	ldr	r1, [r7, #8]
 8016dc8:	4618      	mov	r0, r3
 8016dca:	f000 fb6f 	bl	80174ac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8016dce:	68fb      	ldr	r3, [r7, #12]
 8016dd0:	681b      	ldr	r3, [r3, #0]
 8016dd2:	69da      	ldr	r2, [r3, #28]
 8016dd4:	68fb      	ldr	r3, [r7, #12]
 8016dd6:	681b      	ldr	r3, [r3, #0]
 8016dd8:	f042 0208 	orr.w	r2, r2, #8
 8016ddc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8016dde:	68fb      	ldr	r3, [r7, #12]
 8016de0:	681b      	ldr	r3, [r3, #0]
 8016de2:	69da      	ldr	r2, [r3, #28]
 8016de4:	68fb      	ldr	r3, [r7, #12]
 8016de6:	681b      	ldr	r3, [r3, #0]
 8016de8:	f022 0204 	bic.w	r2, r2, #4
 8016dec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8016dee:	68fb      	ldr	r3, [r7, #12]
 8016df0:	681b      	ldr	r3, [r3, #0]
 8016df2:	69d9      	ldr	r1, [r3, #28]
 8016df4:	68bb      	ldr	r3, [r7, #8]
 8016df6:	691a      	ldr	r2, [r3, #16]
 8016df8:	68fb      	ldr	r3, [r7, #12]
 8016dfa:	681b      	ldr	r3, [r3, #0]
 8016dfc:	430a      	orrs	r2, r1
 8016dfe:	61da      	str	r2, [r3, #28]
      break;
 8016e00:	e064      	b.n	8016ecc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8016e02:	68fb      	ldr	r3, [r7, #12]
 8016e04:	681b      	ldr	r3, [r3, #0]
 8016e06:	68b9      	ldr	r1, [r7, #8]
 8016e08:	4618      	mov	r0, r3
 8016e0a:	f000 fbd7 	bl	80175bc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8016e0e:	68fb      	ldr	r3, [r7, #12]
 8016e10:	681b      	ldr	r3, [r3, #0]
 8016e12:	69da      	ldr	r2, [r3, #28]
 8016e14:	68fb      	ldr	r3, [r7, #12]
 8016e16:	681b      	ldr	r3, [r3, #0]
 8016e18:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8016e1c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8016e1e:	68fb      	ldr	r3, [r7, #12]
 8016e20:	681b      	ldr	r3, [r3, #0]
 8016e22:	69da      	ldr	r2, [r3, #28]
 8016e24:	68fb      	ldr	r3, [r7, #12]
 8016e26:	681b      	ldr	r3, [r3, #0]
 8016e28:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8016e2c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8016e2e:	68fb      	ldr	r3, [r7, #12]
 8016e30:	681b      	ldr	r3, [r3, #0]
 8016e32:	69d9      	ldr	r1, [r3, #28]
 8016e34:	68bb      	ldr	r3, [r7, #8]
 8016e36:	691b      	ldr	r3, [r3, #16]
 8016e38:	021a      	lsls	r2, r3, #8
 8016e3a:	68fb      	ldr	r3, [r7, #12]
 8016e3c:	681b      	ldr	r3, [r3, #0]
 8016e3e:	430a      	orrs	r2, r1
 8016e40:	61da      	str	r2, [r3, #28]
      break;
 8016e42:	e043      	b.n	8016ecc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8016e44:	68fb      	ldr	r3, [r7, #12]
 8016e46:	681b      	ldr	r3, [r3, #0]
 8016e48:	68b9      	ldr	r1, [r7, #8]
 8016e4a:	4618      	mov	r0, r3
 8016e4c:	f000 fc20 	bl	8017690 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8016e50:	68fb      	ldr	r3, [r7, #12]
 8016e52:	681b      	ldr	r3, [r3, #0]
 8016e54:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8016e56:	68fb      	ldr	r3, [r7, #12]
 8016e58:	681b      	ldr	r3, [r3, #0]
 8016e5a:	f042 0208 	orr.w	r2, r2, #8
 8016e5e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8016e60:	68fb      	ldr	r3, [r7, #12]
 8016e62:	681b      	ldr	r3, [r3, #0]
 8016e64:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8016e66:	68fb      	ldr	r3, [r7, #12]
 8016e68:	681b      	ldr	r3, [r3, #0]
 8016e6a:	f022 0204 	bic.w	r2, r2, #4
 8016e6e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8016e70:	68fb      	ldr	r3, [r7, #12]
 8016e72:	681b      	ldr	r3, [r3, #0]
 8016e74:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8016e76:	68bb      	ldr	r3, [r7, #8]
 8016e78:	691a      	ldr	r2, [r3, #16]
 8016e7a:	68fb      	ldr	r3, [r7, #12]
 8016e7c:	681b      	ldr	r3, [r3, #0]
 8016e7e:	430a      	orrs	r2, r1
 8016e80:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8016e82:	e023      	b.n	8016ecc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8016e84:	68fb      	ldr	r3, [r7, #12]
 8016e86:	681b      	ldr	r3, [r3, #0]
 8016e88:	68b9      	ldr	r1, [r7, #8]
 8016e8a:	4618      	mov	r0, r3
 8016e8c:	f000 fc64 	bl	8017758 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8016e90:	68fb      	ldr	r3, [r7, #12]
 8016e92:	681b      	ldr	r3, [r3, #0]
 8016e94:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8016e96:	68fb      	ldr	r3, [r7, #12]
 8016e98:	681b      	ldr	r3, [r3, #0]
 8016e9a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8016e9e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8016ea0:	68fb      	ldr	r3, [r7, #12]
 8016ea2:	681b      	ldr	r3, [r3, #0]
 8016ea4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8016ea6:	68fb      	ldr	r3, [r7, #12]
 8016ea8:	681b      	ldr	r3, [r3, #0]
 8016eaa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8016eae:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8016eb0:	68fb      	ldr	r3, [r7, #12]
 8016eb2:	681b      	ldr	r3, [r3, #0]
 8016eb4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8016eb6:	68bb      	ldr	r3, [r7, #8]
 8016eb8:	691b      	ldr	r3, [r3, #16]
 8016eba:	021a      	lsls	r2, r3, #8
 8016ebc:	68fb      	ldr	r3, [r7, #12]
 8016ebe:	681b      	ldr	r3, [r3, #0]
 8016ec0:	430a      	orrs	r2, r1
 8016ec2:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8016ec4:	e002      	b.n	8016ecc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8016ec6:	2301      	movs	r3, #1
 8016ec8:	75fb      	strb	r3, [r7, #23]
      break;
 8016eca:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8016ecc:	68fb      	ldr	r3, [r7, #12]
 8016ece:	2200      	movs	r2, #0
 8016ed0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8016ed4:	7dfb      	ldrb	r3, [r7, #23]
}
 8016ed6:	4618      	mov	r0, r3
 8016ed8:	3718      	adds	r7, #24
 8016eda:	46bd      	mov	sp, r7
 8016edc:	bd80      	pop	{r7, pc}
 8016ede:	bf00      	nop

08016ee0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8016ee0:	b580      	push	{r7, lr}
 8016ee2:	b084      	sub	sp, #16
 8016ee4:	af00      	add	r7, sp, #0
 8016ee6:	6078      	str	r0, [r7, #4]
 8016ee8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8016eea:	2300      	movs	r3, #0
 8016eec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8016eee:	687b      	ldr	r3, [r7, #4]
 8016ef0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8016ef4:	2b01      	cmp	r3, #1
 8016ef6:	d101      	bne.n	8016efc <HAL_TIM_ConfigClockSource+0x1c>
 8016ef8:	2302      	movs	r3, #2
 8016efa:	e0dc      	b.n	80170b6 <HAL_TIM_ConfigClockSource+0x1d6>
 8016efc:	687b      	ldr	r3, [r7, #4]
 8016efe:	2201      	movs	r2, #1
 8016f00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8016f04:	687b      	ldr	r3, [r7, #4]
 8016f06:	2202      	movs	r2, #2
 8016f08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8016f0c:	687b      	ldr	r3, [r7, #4]
 8016f0e:	681b      	ldr	r3, [r3, #0]
 8016f10:	689b      	ldr	r3, [r3, #8]
 8016f12:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8016f14:	68ba      	ldr	r2, [r7, #8]
 8016f16:	4b6a      	ldr	r3, [pc, #424]	@ (80170c0 <HAL_TIM_ConfigClockSource+0x1e0>)
 8016f18:	4013      	ands	r3, r2
 8016f1a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8016f1c:	68bb      	ldr	r3, [r7, #8]
 8016f1e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8016f22:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8016f24:	687b      	ldr	r3, [r7, #4]
 8016f26:	681b      	ldr	r3, [r3, #0]
 8016f28:	68ba      	ldr	r2, [r7, #8]
 8016f2a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8016f2c:	683b      	ldr	r3, [r7, #0]
 8016f2e:	681b      	ldr	r3, [r3, #0]
 8016f30:	4a64      	ldr	r2, [pc, #400]	@ (80170c4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8016f32:	4293      	cmp	r3, r2
 8016f34:	f000 80a9 	beq.w	801708a <HAL_TIM_ConfigClockSource+0x1aa>
 8016f38:	4a62      	ldr	r2, [pc, #392]	@ (80170c4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8016f3a:	4293      	cmp	r3, r2
 8016f3c:	f200 80ae 	bhi.w	801709c <HAL_TIM_ConfigClockSource+0x1bc>
 8016f40:	4a61      	ldr	r2, [pc, #388]	@ (80170c8 <HAL_TIM_ConfigClockSource+0x1e8>)
 8016f42:	4293      	cmp	r3, r2
 8016f44:	f000 80a1 	beq.w	801708a <HAL_TIM_ConfigClockSource+0x1aa>
 8016f48:	4a5f      	ldr	r2, [pc, #380]	@ (80170c8 <HAL_TIM_ConfigClockSource+0x1e8>)
 8016f4a:	4293      	cmp	r3, r2
 8016f4c:	f200 80a6 	bhi.w	801709c <HAL_TIM_ConfigClockSource+0x1bc>
 8016f50:	4a5e      	ldr	r2, [pc, #376]	@ (80170cc <HAL_TIM_ConfigClockSource+0x1ec>)
 8016f52:	4293      	cmp	r3, r2
 8016f54:	f000 8099 	beq.w	801708a <HAL_TIM_ConfigClockSource+0x1aa>
 8016f58:	4a5c      	ldr	r2, [pc, #368]	@ (80170cc <HAL_TIM_ConfigClockSource+0x1ec>)
 8016f5a:	4293      	cmp	r3, r2
 8016f5c:	f200 809e 	bhi.w	801709c <HAL_TIM_ConfigClockSource+0x1bc>
 8016f60:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8016f64:	f000 8091 	beq.w	801708a <HAL_TIM_ConfigClockSource+0x1aa>
 8016f68:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8016f6c:	f200 8096 	bhi.w	801709c <HAL_TIM_ConfigClockSource+0x1bc>
 8016f70:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8016f74:	f000 8089 	beq.w	801708a <HAL_TIM_ConfigClockSource+0x1aa>
 8016f78:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8016f7c:	f200 808e 	bhi.w	801709c <HAL_TIM_ConfigClockSource+0x1bc>
 8016f80:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8016f84:	d03e      	beq.n	8017004 <HAL_TIM_ConfigClockSource+0x124>
 8016f86:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8016f8a:	f200 8087 	bhi.w	801709c <HAL_TIM_ConfigClockSource+0x1bc>
 8016f8e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8016f92:	f000 8086 	beq.w	80170a2 <HAL_TIM_ConfigClockSource+0x1c2>
 8016f96:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8016f9a:	d87f      	bhi.n	801709c <HAL_TIM_ConfigClockSource+0x1bc>
 8016f9c:	2b70      	cmp	r3, #112	@ 0x70
 8016f9e:	d01a      	beq.n	8016fd6 <HAL_TIM_ConfigClockSource+0xf6>
 8016fa0:	2b70      	cmp	r3, #112	@ 0x70
 8016fa2:	d87b      	bhi.n	801709c <HAL_TIM_ConfigClockSource+0x1bc>
 8016fa4:	2b60      	cmp	r3, #96	@ 0x60
 8016fa6:	d050      	beq.n	801704a <HAL_TIM_ConfigClockSource+0x16a>
 8016fa8:	2b60      	cmp	r3, #96	@ 0x60
 8016faa:	d877      	bhi.n	801709c <HAL_TIM_ConfigClockSource+0x1bc>
 8016fac:	2b50      	cmp	r3, #80	@ 0x50
 8016fae:	d03c      	beq.n	801702a <HAL_TIM_ConfigClockSource+0x14a>
 8016fb0:	2b50      	cmp	r3, #80	@ 0x50
 8016fb2:	d873      	bhi.n	801709c <HAL_TIM_ConfigClockSource+0x1bc>
 8016fb4:	2b40      	cmp	r3, #64	@ 0x40
 8016fb6:	d058      	beq.n	801706a <HAL_TIM_ConfigClockSource+0x18a>
 8016fb8:	2b40      	cmp	r3, #64	@ 0x40
 8016fba:	d86f      	bhi.n	801709c <HAL_TIM_ConfigClockSource+0x1bc>
 8016fbc:	2b30      	cmp	r3, #48	@ 0x30
 8016fbe:	d064      	beq.n	801708a <HAL_TIM_ConfigClockSource+0x1aa>
 8016fc0:	2b30      	cmp	r3, #48	@ 0x30
 8016fc2:	d86b      	bhi.n	801709c <HAL_TIM_ConfigClockSource+0x1bc>
 8016fc4:	2b20      	cmp	r3, #32
 8016fc6:	d060      	beq.n	801708a <HAL_TIM_ConfigClockSource+0x1aa>
 8016fc8:	2b20      	cmp	r3, #32
 8016fca:	d867      	bhi.n	801709c <HAL_TIM_ConfigClockSource+0x1bc>
 8016fcc:	2b00      	cmp	r3, #0
 8016fce:	d05c      	beq.n	801708a <HAL_TIM_ConfigClockSource+0x1aa>
 8016fd0:	2b10      	cmp	r3, #16
 8016fd2:	d05a      	beq.n	801708a <HAL_TIM_ConfigClockSource+0x1aa>
 8016fd4:	e062      	b.n	801709c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8016fd6:	687b      	ldr	r3, [r7, #4]
 8016fd8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8016fda:	683b      	ldr	r3, [r7, #0]
 8016fdc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8016fde:	683b      	ldr	r3, [r7, #0]
 8016fe0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8016fe2:	683b      	ldr	r3, [r7, #0]
 8016fe4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8016fe6:	f000 fdd1 	bl	8017b8c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8016fea:	687b      	ldr	r3, [r7, #4]
 8016fec:	681b      	ldr	r3, [r3, #0]
 8016fee:	689b      	ldr	r3, [r3, #8]
 8016ff0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8016ff2:	68bb      	ldr	r3, [r7, #8]
 8016ff4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8016ff8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8016ffa:	687b      	ldr	r3, [r7, #4]
 8016ffc:	681b      	ldr	r3, [r3, #0]
 8016ffe:	68ba      	ldr	r2, [r7, #8]
 8017000:	609a      	str	r2, [r3, #8]
      break;
 8017002:	e04f      	b.n	80170a4 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8017004:	687b      	ldr	r3, [r7, #4]
 8017006:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8017008:	683b      	ldr	r3, [r7, #0]
 801700a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 801700c:	683b      	ldr	r3, [r7, #0]
 801700e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8017010:	683b      	ldr	r3, [r7, #0]
 8017012:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8017014:	f000 fdba 	bl	8017b8c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8017018:	687b      	ldr	r3, [r7, #4]
 801701a:	681b      	ldr	r3, [r3, #0]
 801701c:	689a      	ldr	r2, [r3, #8]
 801701e:	687b      	ldr	r3, [r7, #4]
 8017020:	681b      	ldr	r3, [r3, #0]
 8017022:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8017026:	609a      	str	r2, [r3, #8]
      break;
 8017028:	e03c      	b.n	80170a4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801702a:	687b      	ldr	r3, [r7, #4]
 801702c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 801702e:	683b      	ldr	r3, [r7, #0]
 8017030:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8017032:	683b      	ldr	r3, [r7, #0]
 8017034:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8017036:	461a      	mov	r2, r3
 8017038:	f000 fc74 	bl	8017924 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 801703c:	687b      	ldr	r3, [r7, #4]
 801703e:	681b      	ldr	r3, [r3, #0]
 8017040:	2150      	movs	r1, #80	@ 0x50
 8017042:	4618      	mov	r0, r3
 8017044:	f000 fd84 	bl	8017b50 <TIM_ITRx_SetConfig>
      break;
 8017048:	e02c      	b.n	80170a4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 801704a:	687b      	ldr	r3, [r7, #4]
 801704c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 801704e:	683b      	ldr	r3, [r7, #0]
 8017050:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8017052:	683b      	ldr	r3, [r7, #0]
 8017054:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8017056:	461a      	mov	r2, r3
 8017058:	f000 fcd0 	bl	80179fc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 801705c:	687b      	ldr	r3, [r7, #4]
 801705e:	681b      	ldr	r3, [r3, #0]
 8017060:	2160      	movs	r1, #96	@ 0x60
 8017062:	4618      	mov	r0, r3
 8017064:	f000 fd74 	bl	8017b50 <TIM_ITRx_SetConfig>
      break;
 8017068:	e01c      	b.n	80170a4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801706a:	687b      	ldr	r3, [r7, #4]
 801706c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 801706e:	683b      	ldr	r3, [r7, #0]
 8017070:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8017072:	683b      	ldr	r3, [r7, #0]
 8017074:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8017076:	461a      	mov	r2, r3
 8017078:	f000 fc54 	bl	8017924 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 801707c:	687b      	ldr	r3, [r7, #4]
 801707e:	681b      	ldr	r3, [r3, #0]
 8017080:	2140      	movs	r1, #64	@ 0x40
 8017082:	4618      	mov	r0, r3
 8017084:	f000 fd64 	bl	8017b50 <TIM_ITRx_SetConfig>
      break;
 8017088:	e00c      	b.n	80170a4 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 801708a:	687b      	ldr	r3, [r7, #4]
 801708c:	681a      	ldr	r2, [r3, #0]
 801708e:	683b      	ldr	r3, [r7, #0]
 8017090:	681b      	ldr	r3, [r3, #0]
 8017092:	4619      	mov	r1, r3
 8017094:	4610      	mov	r0, r2
 8017096:	f000 fd5b 	bl	8017b50 <TIM_ITRx_SetConfig>
      break;
 801709a:	e003      	b.n	80170a4 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 801709c:	2301      	movs	r3, #1
 801709e:	73fb      	strb	r3, [r7, #15]
      break;
 80170a0:	e000      	b.n	80170a4 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 80170a2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80170a4:	687b      	ldr	r3, [r7, #4]
 80170a6:	2201      	movs	r2, #1
 80170a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80170ac:	687b      	ldr	r3, [r7, #4]
 80170ae:	2200      	movs	r2, #0
 80170b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80170b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80170b6:	4618      	mov	r0, r3
 80170b8:	3710      	adds	r7, #16
 80170ba:	46bd      	mov	sp, r7
 80170bc:	bd80      	pop	{r7, pc}
 80170be:	bf00      	nop
 80170c0:	ffceff88 	.word	0xffceff88
 80170c4:	00100040 	.word	0x00100040
 80170c8:	00100030 	.word	0x00100030
 80170cc:	00100020 	.word	0x00100020

080170d0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80170d0:	b480      	push	{r7}
 80170d2:	b083      	sub	sp, #12
 80170d4:	af00      	add	r7, sp, #0
 80170d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80170d8:	bf00      	nop
 80170da:	370c      	adds	r7, #12
 80170dc:	46bd      	mov	sp, r7
 80170de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170e2:	4770      	bx	lr

080170e4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80170e4:	b480      	push	{r7}
 80170e6:	b083      	sub	sp, #12
 80170e8:	af00      	add	r7, sp, #0
 80170ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80170ec:	bf00      	nop
 80170ee:	370c      	adds	r7, #12
 80170f0:	46bd      	mov	sp, r7
 80170f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170f6:	4770      	bx	lr

080170f8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80170f8:	b480      	push	{r7}
 80170fa:	b083      	sub	sp, #12
 80170fc:	af00      	add	r7, sp, #0
 80170fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8017100:	bf00      	nop
 8017102:	370c      	adds	r7, #12
 8017104:	46bd      	mov	sp, r7
 8017106:	f85d 7b04 	ldr.w	r7, [sp], #4
 801710a:	4770      	bx	lr

0801710c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 801710c:	b480      	push	{r7}
 801710e:	b083      	sub	sp, #12
 8017110:	af00      	add	r7, sp, #0
 8017112:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8017114:	bf00      	nop
 8017116:	370c      	adds	r7, #12
 8017118:	46bd      	mov	sp, r7
 801711a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801711e:	4770      	bx	lr

08017120 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8017120:	b480      	push	{r7}
 8017122:	b085      	sub	sp, #20
 8017124:	af00      	add	r7, sp, #0
 8017126:	6078      	str	r0, [r7, #4]
 8017128:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801712a:	687b      	ldr	r3, [r7, #4]
 801712c:	681b      	ldr	r3, [r3, #0]
 801712e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8017130:	687b      	ldr	r3, [r7, #4]
 8017132:	4a47      	ldr	r2, [pc, #284]	@ (8017250 <TIM_Base_SetConfig+0x130>)
 8017134:	4293      	cmp	r3, r2
 8017136:	d013      	beq.n	8017160 <TIM_Base_SetConfig+0x40>
 8017138:	687b      	ldr	r3, [r7, #4]
 801713a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801713e:	d00f      	beq.n	8017160 <TIM_Base_SetConfig+0x40>
 8017140:	687b      	ldr	r3, [r7, #4]
 8017142:	4a44      	ldr	r2, [pc, #272]	@ (8017254 <TIM_Base_SetConfig+0x134>)
 8017144:	4293      	cmp	r3, r2
 8017146:	d00b      	beq.n	8017160 <TIM_Base_SetConfig+0x40>
 8017148:	687b      	ldr	r3, [r7, #4]
 801714a:	4a43      	ldr	r2, [pc, #268]	@ (8017258 <TIM_Base_SetConfig+0x138>)
 801714c:	4293      	cmp	r3, r2
 801714e:	d007      	beq.n	8017160 <TIM_Base_SetConfig+0x40>
 8017150:	687b      	ldr	r3, [r7, #4]
 8017152:	4a42      	ldr	r2, [pc, #264]	@ (801725c <TIM_Base_SetConfig+0x13c>)
 8017154:	4293      	cmp	r3, r2
 8017156:	d003      	beq.n	8017160 <TIM_Base_SetConfig+0x40>
 8017158:	687b      	ldr	r3, [r7, #4]
 801715a:	4a41      	ldr	r2, [pc, #260]	@ (8017260 <TIM_Base_SetConfig+0x140>)
 801715c:	4293      	cmp	r3, r2
 801715e:	d108      	bne.n	8017172 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8017160:	68fb      	ldr	r3, [r7, #12]
 8017162:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8017166:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8017168:	683b      	ldr	r3, [r7, #0]
 801716a:	685b      	ldr	r3, [r3, #4]
 801716c:	68fa      	ldr	r2, [r7, #12]
 801716e:	4313      	orrs	r3, r2
 8017170:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8017172:	687b      	ldr	r3, [r7, #4]
 8017174:	4a36      	ldr	r2, [pc, #216]	@ (8017250 <TIM_Base_SetConfig+0x130>)
 8017176:	4293      	cmp	r3, r2
 8017178:	d027      	beq.n	80171ca <TIM_Base_SetConfig+0xaa>
 801717a:	687b      	ldr	r3, [r7, #4]
 801717c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8017180:	d023      	beq.n	80171ca <TIM_Base_SetConfig+0xaa>
 8017182:	687b      	ldr	r3, [r7, #4]
 8017184:	4a33      	ldr	r2, [pc, #204]	@ (8017254 <TIM_Base_SetConfig+0x134>)
 8017186:	4293      	cmp	r3, r2
 8017188:	d01f      	beq.n	80171ca <TIM_Base_SetConfig+0xaa>
 801718a:	687b      	ldr	r3, [r7, #4]
 801718c:	4a32      	ldr	r2, [pc, #200]	@ (8017258 <TIM_Base_SetConfig+0x138>)
 801718e:	4293      	cmp	r3, r2
 8017190:	d01b      	beq.n	80171ca <TIM_Base_SetConfig+0xaa>
 8017192:	687b      	ldr	r3, [r7, #4]
 8017194:	4a31      	ldr	r2, [pc, #196]	@ (801725c <TIM_Base_SetConfig+0x13c>)
 8017196:	4293      	cmp	r3, r2
 8017198:	d017      	beq.n	80171ca <TIM_Base_SetConfig+0xaa>
 801719a:	687b      	ldr	r3, [r7, #4]
 801719c:	4a30      	ldr	r2, [pc, #192]	@ (8017260 <TIM_Base_SetConfig+0x140>)
 801719e:	4293      	cmp	r3, r2
 80171a0:	d013      	beq.n	80171ca <TIM_Base_SetConfig+0xaa>
 80171a2:	687b      	ldr	r3, [r7, #4]
 80171a4:	4a2f      	ldr	r2, [pc, #188]	@ (8017264 <TIM_Base_SetConfig+0x144>)
 80171a6:	4293      	cmp	r3, r2
 80171a8:	d00f      	beq.n	80171ca <TIM_Base_SetConfig+0xaa>
 80171aa:	687b      	ldr	r3, [r7, #4]
 80171ac:	4a2e      	ldr	r2, [pc, #184]	@ (8017268 <TIM_Base_SetConfig+0x148>)
 80171ae:	4293      	cmp	r3, r2
 80171b0:	d00b      	beq.n	80171ca <TIM_Base_SetConfig+0xaa>
 80171b2:	687b      	ldr	r3, [r7, #4]
 80171b4:	4a2d      	ldr	r2, [pc, #180]	@ (801726c <TIM_Base_SetConfig+0x14c>)
 80171b6:	4293      	cmp	r3, r2
 80171b8:	d007      	beq.n	80171ca <TIM_Base_SetConfig+0xaa>
 80171ba:	687b      	ldr	r3, [r7, #4]
 80171bc:	4a2c      	ldr	r2, [pc, #176]	@ (8017270 <TIM_Base_SetConfig+0x150>)
 80171be:	4293      	cmp	r3, r2
 80171c0:	d003      	beq.n	80171ca <TIM_Base_SetConfig+0xaa>
 80171c2:	687b      	ldr	r3, [r7, #4]
 80171c4:	4a2b      	ldr	r2, [pc, #172]	@ (8017274 <TIM_Base_SetConfig+0x154>)
 80171c6:	4293      	cmp	r3, r2
 80171c8:	d108      	bne.n	80171dc <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80171ca:	68fb      	ldr	r3, [r7, #12]
 80171cc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80171d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80171d2:	683b      	ldr	r3, [r7, #0]
 80171d4:	68db      	ldr	r3, [r3, #12]
 80171d6:	68fa      	ldr	r2, [r7, #12]
 80171d8:	4313      	orrs	r3, r2
 80171da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80171dc:	68fb      	ldr	r3, [r7, #12]
 80171de:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80171e2:	683b      	ldr	r3, [r7, #0]
 80171e4:	695b      	ldr	r3, [r3, #20]
 80171e6:	4313      	orrs	r3, r2
 80171e8:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80171ea:	683b      	ldr	r3, [r7, #0]
 80171ec:	689a      	ldr	r2, [r3, #8]
 80171ee:	687b      	ldr	r3, [r7, #4]
 80171f0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80171f2:	683b      	ldr	r3, [r7, #0]
 80171f4:	681a      	ldr	r2, [r3, #0]
 80171f6:	687b      	ldr	r3, [r7, #4]
 80171f8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80171fa:	687b      	ldr	r3, [r7, #4]
 80171fc:	4a14      	ldr	r2, [pc, #80]	@ (8017250 <TIM_Base_SetConfig+0x130>)
 80171fe:	4293      	cmp	r3, r2
 8017200:	d00f      	beq.n	8017222 <TIM_Base_SetConfig+0x102>
 8017202:	687b      	ldr	r3, [r7, #4]
 8017204:	4a16      	ldr	r2, [pc, #88]	@ (8017260 <TIM_Base_SetConfig+0x140>)
 8017206:	4293      	cmp	r3, r2
 8017208:	d00b      	beq.n	8017222 <TIM_Base_SetConfig+0x102>
 801720a:	687b      	ldr	r3, [r7, #4]
 801720c:	4a15      	ldr	r2, [pc, #84]	@ (8017264 <TIM_Base_SetConfig+0x144>)
 801720e:	4293      	cmp	r3, r2
 8017210:	d007      	beq.n	8017222 <TIM_Base_SetConfig+0x102>
 8017212:	687b      	ldr	r3, [r7, #4]
 8017214:	4a14      	ldr	r2, [pc, #80]	@ (8017268 <TIM_Base_SetConfig+0x148>)
 8017216:	4293      	cmp	r3, r2
 8017218:	d003      	beq.n	8017222 <TIM_Base_SetConfig+0x102>
 801721a:	687b      	ldr	r3, [r7, #4]
 801721c:	4a13      	ldr	r2, [pc, #76]	@ (801726c <TIM_Base_SetConfig+0x14c>)
 801721e:	4293      	cmp	r3, r2
 8017220:	d103      	bne.n	801722a <TIM_Base_SetConfig+0x10a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8017222:	683b      	ldr	r3, [r7, #0]
 8017224:	691a      	ldr	r2, [r3, #16]
 8017226:	687b      	ldr	r3, [r7, #4]
 8017228:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 801722a:	687b      	ldr	r3, [r7, #4]
 801722c:	681b      	ldr	r3, [r3, #0]
 801722e:	f043 0204 	orr.w	r2, r3, #4
 8017232:	687b      	ldr	r3, [r7, #4]
 8017234:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8017236:	687b      	ldr	r3, [r7, #4]
 8017238:	2201      	movs	r2, #1
 801723a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 801723c:	687b      	ldr	r3, [r7, #4]
 801723e:	68fa      	ldr	r2, [r7, #12]
 8017240:	601a      	str	r2, [r3, #0]
}
 8017242:	bf00      	nop
 8017244:	3714      	adds	r7, #20
 8017246:	46bd      	mov	sp, r7
 8017248:	f85d 7b04 	ldr.w	r7, [sp], #4
 801724c:	4770      	bx	lr
 801724e:	bf00      	nop
 8017250:	40010000 	.word	0x40010000
 8017254:	40000400 	.word	0x40000400
 8017258:	40000800 	.word	0x40000800
 801725c:	40000c00 	.word	0x40000c00
 8017260:	40010400 	.word	0x40010400
 8017264:	40014000 	.word	0x40014000
 8017268:	40014400 	.word	0x40014400
 801726c:	40014800 	.word	0x40014800
 8017270:	4000e000 	.word	0x4000e000
 8017274:	4000e400 	.word	0x4000e400

08017278 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8017278:	b480      	push	{r7}
 801727a:	b087      	sub	sp, #28
 801727c:	af00      	add	r7, sp, #0
 801727e:	6078      	str	r0, [r7, #4]
 8017280:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8017282:	687b      	ldr	r3, [r7, #4]
 8017284:	6a1b      	ldr	r3, [r3, #32]
 8017286:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8017288:	687b      	ldr	r3, [r7, #4]
 801728a:	6a1b      	ldr	r3, [r3, #32]
 801728c:	f023 0201 	bic.w	r2, r3, #1
 8017290:	687b      	ldr	r3, [r7, #4]
 8017292:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8017294:	687b      	ldr	r3, [r7, #4]
 8017296:	685b      	ldr	r3, [r3, #4]
 8017298:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801729a:	687b      	ldr	r3, [r7, #4]
 801729c:	699b      	ldr	r3, [r3, #24]
 801729e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80172a0:	68fa      	ldr	r2, [r7, #12]
 80172a2:	4b37      	ldr	r3, [pc, #220]	@ (8017380 <TIM_OC1_SetConfig+0x108>)
 80172a4:	4013      	ands	r3, r2
 80172a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80172a8:	68fb      	ldr	r3, [r7, #12]
 80172aa:	f023 0303 	bic.w	r3, r3, #3
 80172ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80172b0:	683b      	ldr	r3, [r7, #0]
 80172b2:	681b      	ldr	r3, [r3, #0]
 80172b4:	68fa      	ldr	r2, [r7, #12]
 80172b6:	4313      	orrs	r3, r2
 80172b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80172ba:	697b      	ldr	r3, [r7, #20]
 80172bc:	f023 0302 	bic.w	r3, r3, #2
 80172c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80172c2:	683b      	ldr	r3, [r7, #0]
 80172c4:	689b      	ldr	r3, [r3, #8]
 80172c6:	697a      	ldr	r2, [r7, #20]
 80172c8:	4313      	orrs	r3, r2
 80172ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80172cc:	687b      	ldr	r3, [r7, #4]
 80172ce:	4a2d      	ldr	r2, [pc, #180]	@ (8017384 <TIM_OC1_SetConfig+0x10c>)
 80172d0:	4293      	cmp	r3, r2
 80172d2:	d00f      	beq.n	80172f4 <TIM_OC1_SetConfig+0x7c>
 80172d4:	687b      	ldr	r3, [r7, #4]
 80172d6:	4a2c      	ldr	r2, [pc, #176]	@ (8017388 <TIM_OC1_SetConfig+0x110>)
 80172d8:	4293      	cmp	r3, r2
 80172da:	d00b      	beq.n	80172f4 <TIM_OC1_SetConfig+0x7c>
 80172dc:	687b      	ldr	r3, [r7, #4]
 80172de:	4a2b      	ldr	r2, [pc, #172]	@ (801738c <TIM_OC1_SetConfig+0x114>)
 80172e0:	4293      	cmp	r3, r2
 80172e2:	d007      	beq.n	80172f4 <TIM_OC1_SetConfig+0x7c>
 80172e4:	687b      	ldr	r3, [r7, #4]
 80172e6:	4a2a      	ldr	r2, [pc, #168]	@ (8017390 <TIM_OC1_SetConfig+0x118>)
 80172e8:	4293      	cmp	r3, r2
 80172ea:	d003      	beq.n	80172f4 <TIM_OC1_SetConfig+0x7c>
 80172ec:	687b      	ldr	r3, [r7, #4]
 80172ee:	4a29      	ldr	r2, [pc, #164]	@ (8017394 <TIM_OC1_SetConfig+0x11c>)
 80172f0:	4293      	cmp	r3, r2
 80172f2:	d10c      	bne.n	801730e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80172f4:	697b      	ldr	r3, [r7, #20]
 80172f6:	f023 0308 	bic.w	r3, r3, #8
 80172fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80172fc:	683b      	ldr	r3, [r7, #0]
 80172fe:	68db      	ldr	r3, [r3, #12]
 8017300:	697a      	ldr	r2, [r7, #20]
 8017302:	4313      	orrs	r3, r2
 8017304:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8017306:	697b      	ldr	r3, [r7, #20]
 8017308:	f023 0304 	bic.w	r3, r3, #4
 801730c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801730e:	687b      	ldr	r3, [r7, #4]
 8017310:	4a1c      	ldr	r2, [pc, #112]	@ (8017384 <TIM_OC1_SetConfig+0x10c>)
 8017312:	4293      	cmp	r3, r2
 8017314:	d00f      	beq.n	8017336 <TIM_OC1_SetConfig+0xbe>
 8017316:	687b      	ldr	r3, [r7, #4]
 8017318:	4a1b      	ldr	r2, [pc, #108]	@ (8017388 <TIM_OC1_SetConfig+0x110>)
 801731a:	4293      	cmp	r3, r2
 801731c:	d00b      	beq.n	8017336 <TIM_OC1_SetConfig+0xbe>
 801731e:	687b      	ldr	r3, [r7, #4]
 8017320:	4a1a      	ldr	r2, [pc, #104]	@ (801738c <TIM_OC1_SetConfig+0x114>)
 8017322:	4293      	cmp	r3, r2
 8017324:	d007      	beq.n	8017336 <TIM_OC1_SetConfig+0xbe>
 8017326:	687b      	ldr	r3, [r7, #4]
 8017328:	4a19      	ldr	r2, [pc, #100]	@ (8017390 <TIM_OC1_SetConfig+0x118>)
 801732a:	4293      	cmp	r3, r2
 801732c:	d003      	beq.n	8017336 <TIM_OC1_SetConfig+0xbe>
 801732e:	687b      	ldr	r3, [r7, #4]
 8017330:	4a18      	ldr	r2, [pc, #96]	@ (8017394 <TIM_OC1_SetConfig+0x11c>)
 8017332:	4293      	cmp	r3, r2
 8017334:	d111      	bne.n	801735a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8017336:	693b      	ldr	r3, [r7, #16]
 8017338:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801733c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 801733e:	693b      	ldr	r3, [r7, #16]
 8017340:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8017344:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8017346:	683b      	ldr	r3, [r7, #0]
 8017348:	695b      	ldr	r3, [r3, #20]
 801734a:	693a      	ldr	r2, [r7, #16]
 801734c:	4313      	orrs	r3, r2
 801734e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8017350:	683b      	ldr	r3, [r7, #0]
 8017352:	699b      	ldr	r3, [r3, #24]
 8017354:	693a      	ldr	r2, [r7, #16]
 8017356:	4313      	orrs	r3, r2
 8017358:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801735a:	687b      	ldr	r3, [r7, #4]
 801735c:	693a      	ldr	r2, [r7, #16]
 801735e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8017360:	687b      	ldr	r3, [r7, #4]
 8017362:	68fa      	ldr	r2, [r7, #12]
 8017364:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8017366:	683b      	ldr	r3, [r7, #0]
 8017368:	685a      	ldr	r2, [r3, #4]
 801736a:	687b      	ldr	r3, [r7, #4]
 801736c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801736e:	687b      	ldr	r3, [r7, #4]
 8017370:	697a      	ldr	r2, [r7, #20]
 8017372:	621a      	str	r2, [r3, #32]
}
 8017374:	bf00      	nop
 8017376:	371c      	adds	r7, #28
 8017378:	46bd      	mov	sp, r7
 801737a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801737e:	4770      	bx	lr
 8017380:	fffeff8f 	.word	0xfffeff8f
 8017384:	40010000 	.word	0x40010000
 8017388:	40010400 	.word	0x40010400
 801738c:	40014000 	.word	0x40014000
 8017390:	40014400 	.word	0x40014400
 8017394:	40014800 	.word	0x40014800

08017398 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8017398:	b480      	push	{r7}
 801739a:	b087      	sub	sp, #28
 801739c:	af00      	add	r7, sp, #0
 801739e:	6078      	str	r0, [r7, #4]
 80173a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80173a2:	687b      	ldr	r3, [r7, #4]
 80173a4:	6a1b      	ldr	r3, [r3, #32]
 80173a6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80173a8:	687b      	ldr	r3, [r7, #4]
 80173aa:	6a1b      	ldr	r3, [r3, #32]
 80173ac:	f023 0210 	bic.w	r2, r3, #16
 80173b0:	687b      	ldr	r3, [r7, #4]
 80173b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80173b4:	687b      	ldr	r3, [r7, #4]
 80173b6:	685b      	ldr	r3, [r3, #4]
 80173b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80173ba:	687b      	ldr	r3, [r7, #4]
 80173bc:	699b      	ldr	r3, [r3, #24]
 80173be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80173c0:	68fa      	ldr	r2, [r7, #12]
 80173c2:	4b34      	ldr	r3, [pc, #208]	@ (8017494 <TIM_OC2_SetConfig+0xfc>)
 80173c4:	4013      	ands	r3, r2
 80173c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80173c8:	68fb      	ldr	r3, [r7, #12]
 80173ca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80173ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80173d0:	683b      	ldr	r3, [r7, #0]
 80173d2:	681b      	ldr	r3, [r3, #0]
 80173d4:	021b      	lsls	r3, r3, #8
 80173d6:	68fa      	ldr	r2, [r7, #12]
 80173d8:	4313      	orrs	r3, r2
 80173da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80173dc:	697b      	ldr	r3, [r7, #20]
 80173de:	f023 0320 	bic.w	r3, r3, #32
 80173e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80173e4:	683b      	ldr	r3, [r7, #0]
 80173e6:	689b      	ldr	r3, [r3, #8]
 80173e8:	011b      	lsls	r3, r3, #4
 80173ea:	697a      	ldr	r2, [r7, #20]
 80173ec:	4313      	orrs	r3, r2
 80173ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80173f0:	687b      	ldr	r3, [r7, #4]
 80173f2:	4a29      	ldr	r2, [pc, #164]	@ (8017498 <TIM_OC2_SetConfig+0x100>)
 80173f4:	4293      	cmp	r3, r2
 80173f6:	d003      	beq.n	8017400 <TIM_OC2_SetConfig+0x68>
 80173f8:	687b      	ldr	r3, [r7, #4]
 80173fa:	4a28      	ldr	r2, [pc, #160]	@ (801749c <TIM_OC2_SetConfig+0x104>)
 80173fc:	4293      	cmp	r3, r2
 80173fe:	d10d      	bne.n	801741c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8017400:	697b      	ldr	r3, [r7, #20]
 8017402:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8017406:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8017408:	683b      	ldr	r3, [r7, #0]
 801740a:	68db      	ldr	r3, [r3, #12]
 801740c:	011b      	lsls	r3, r3, #4
 801740e:	697a      	ldr	r2, [r7, #20]
 8017410:	4313      	orrs	r3, r2
 8017412:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8017414:	697b      	ldr	r3, [r7, #20]
 8017416:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801741a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801741c:	687b      	ldr	r3, [r7, #4]
 801741e:	4a1e      	ldr	r2, [pc, #120]	@ (8017498 <TIM_OC2_SetConfig+0x100>)
 8017420:	4293      	cmp	r3, r2
 8017422:	d00f      	beq.n	8017444 <TIM_OC2_SetConfig+0xac>
 8017424:	687b      	ldr	r3, [r7, #4]
 8017426:	4a1d      	ldr	r2, [pc, #116]	@ (801749c <TIM_OC2_SetConfig+0x104>)
 8017428:	4293      	cmp	r3, r2
 801742a:	d00b      	beq.n	8017444 <TIM_OC2_SetConfig+0xac>
 801742c:	687b      	ldr	r3, [r7, #4]
 801742e:	4a1c      	ldr	r2, [pc, #112]	@ (80174a0 <TIM_OC2_SetConfig+0x108>)
 8017430:	4293      	cmp	r3, r2
 8017432:	d007      	beq.n	8017444 <TIM_OC2_SetConfig+0xac>
 8017434:	687b      	ldr	r3, [r7, #4]
 8017436:	4a1b      	ldr	r2, [pc, #108]	@ (80174a4 <TIM_OC2_SetConfig+0x10c>)
 8017438:	4293      	cmp	r3, r2
 801743a:	d003      	beq.n	8017444 <TIM_OC2_SetConfig+0xac>
 801743c:	687b      	ldr	r3, [r7, #4]
 801743e:	4a1a      	ldr	r2, [pc, #104]	@ (80174a8 <TIM_OC2_SetConfig+0x110>)
 8017440:	4293      	cmp	r3, r2
 8017442:	d113      	bne.n	801746c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8017444:	693b      	ldr	r3, [r7, #16]
 8017446:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 801744a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 801744c:	693b      	ldr	r3, [r7, #16]
 801744e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8017452:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8017454:	683b      	ldr	r3, [r7, #0]
 8017456:	695b      	ldr	r3, [r3, #20]
 8017458:	009b      	lsls	r3, r3, #2
 801745a:	693a      	ldr	r2, [r7, #16]
 801745c:	4313      	orrs	r3, r2
 801745e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8017460:	683b      	ldr	r3, [r7, #0]
 8017462:	699b      	ldr	r3, [r3, #24]
 8017464:	009b      	lsls	r3, r3, #2
 8017466:	693a      	ldr	r2, [r7, #16]
 8017468:	4313      	orrs	r3, r2
 801746a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801746c:	687b      	ldr	r3, [r7, #4]
 801746e:	693a      	ldr	r2, [r7, #16]
 8017470:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8017472:	687b      	ldr	r3, [r7, #4]
 8017474:	68fa      	ldr	r2, [r7, #12]
 8017476:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8017478:	683b      	ldr	r3, [r7, #0]
 801747a:	685a      	ldr	r2, [r3, #4]
 801747c:	687b      	ldr	r3, [r7, #4]
 801747e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8017480:	687b      	ldr	r3, [r7, #4]
 8017482:	697a      	ldr	r2, [r7, #20]
 8017484:	621a      	str	r2, [r3, #32]
}
 8017486:	bf00      	nop
 8017488:	371c      	adds	r7, #28
 801748a:	46bd      	mov	sp, r7
 801748c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017490:	4770      	bx	lr
 8017492:	bf00      	nop
 8017494:	feff8fff 	.word	0xfeff8fff
 8017498:	40010000 	.word	0x40010000
 801749c:	40010400 	.word	0x40010400
 80174a0:	40014000 	.word	0x40014000
 80174a4:	40014400 	.word	0x40014400
 80174a8:	40014800 	.word	0x40014800

080174ac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80174ac:	b480      	push	{r7}
 80174ae:	b087      	sub	sp, #28
 80174b0:	af00      	add	r7, sp, #0
 80174b2:	6078      	str	r0, [r7, #4]
 80174b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80174b6:	687b      	ldr	r3, [r7, #4]
 80174b8:	6a1b      	ldr	r3, [r3, #32]
 80174ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80174bc:	687b      	ldr	r3, [r7, #4]
 80174be:	6a1b      	ldr	r3, [r3, #32]
 80174c0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80174c4:	687b      	ldr	r3, [r7, #4]
 80174c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80174c8:	687b      	ldr	r3, [r7, #4]
 80174ca:	685b      	ldr	r3, [r3, #4]
 80174cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80174ce:	687b      	ldr	r3, [r7, #4]
 80174d0:	69db      	ldr	r3, [r3, #28]
 80174d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80174d4:	68fa      	ldr	r2, [r7, #12]
 80174d6:	4b33      	ldr	r3, [pc, #204]	@ (80175a4 <TIM_OC3_SetConfig+0xf8>)
 80174d8:	4013      	ands	r3, r2
 80174da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80174dc:	68fb      	ldr	r3, [r7, #12]
 80174de:	f023 0303 	bic.w	r3, r3, #3
 80174e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80174e4:	683b      	ldr	r3, [r7, #0]
 80174e6:	681b      	ldr	r3, [r3, #0]
 80174e8:	68fa      	ldr	r2, [r7, #12]
 80174ea:	4313      	orrs	r3, r2
 80174ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80174ee:	697b      	ldr	r3, [r7, #20]
 80174f0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80174f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80174f6:	683b      	ldr	r3, [r7, #0]
 80174f8:	689b      	ldr	r3, [r3, #8]
 80174fa:	021b      	lsls	r3, r3, #8
 80174fc:	697a      	ldr	r2, [r7, #20]
 80174fe:	4313      	orrs	r3, r2
 8017500:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8017502:	687b      	ldr	r3, [r7, #4]
 8017504:	4a28      	ldr	r2, [pc, #160]	@ (80175a8 <TIM_OC3_SetConfig+0xfc>)
 8017506:	4293      	cmp	r3, r2
 8017508:	d003      	beq.n	8017512 <TIM_OC3_SetConfig+0x66>
 801750a:	687b      	ldr	r3, [r7, #4]
 801750c:	4a27      	ldr	r2, [pc, #156]	@ (80175ac <TIM_OC3_SetConfig+0x100>)
 801750e:	4293      	cmp	r3, r2
 8017510:	d10d      	bne.n	801752e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8017512:	697b      	ldr	r3, [r7, #20]
 8017514:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8017518:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 801751a:	683b      	ldr	r3, [r7, #0]
 801751c:	68db      	ldr	r3, [r3, #12]
 801751e:	021b      	lsls	r3, r3, #8
 8017520:	697a      	ldr	r2, [r7, #20]
 8017522:	4313      	orrs	r3, r2
 8017524:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8017526:	697b      	ldr	r3, [r7, #20]
 8017528:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 801752c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801752e:	687b      	ldr	r3, [r7, #4]
 8017530:	4a1d      	ldr	r2, [pc, #116]	@ (80175a8 <TIM_OC3_SetConfig+0xfc>)
 8017532:	4293      	cmp	r3, r2
 8017534:	d00f      	beq.n	8017556 <TIM_OC3_SetConfig+0xaa>
 8017536:	687b      	ldr	r3, [r7, #4]
 8017538:	4a1c      	ldr	r2, [pc, #112]	@ (80175ac <TIM_OC3_SetConfig+0x100>)
 801753a:	4293      	cmp	r3, r2
 801753c:	d00b      	beq.n	8017556 <TIM_OC3_SetConfig+0xaa>
 801753e:	687b      	ldr	r3, [r7, #4]
 8017540:	4a1b      	ldr	r2, [pc, #108]	@ (80175b0 <TIM_OC3_SetConfig+0x104>)
 8017542:	4293      	cmp	r3, r2
 8017544:	d007      	beq.n	8017556 <TIM_OC3_SetConfig+0xaa>
 8017546:	687b      	ldr	r3, [r7, #4]
 8017548:	4a1a      	ldr	r2, [pc, #104]	@ (80175b4 <TIM_OC3_SetConfig+0x108>)
 801754a:	4293      	cmp	r3, r2
 801754c:	d003      	beq.n	8017556 <TIM_OC3_SetConfig+0xaa>
 801754e:	687b      	ldr	r3, [r7, #4]
 8017550:	4a19      	ldr	r2, [pc, #100]	@ (80175b8 <TIM_OC3_SetConfig+0x10c>)
 8017552:	4293      	cmp	r3, r2
 8017554:	d113      	bne.n	801757e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8017556:	693b      	ldr	r3, [r7, #16]
 8017558:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801755c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 801755e:	693b      	ldr	r3, [r7, #16]
 8017560:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8017564:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8017566:	683b      	ldr	r3, [r7, #0]
 8017568:	695b      	ldr	r3, [r3, #20]
 801756a:	011b      	lsls	r3, r3, #4
 801756c:	693a      	ldr	r2, [r7, #16]
 801756e:	4313      	orrs	r3, r2
 8017570:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8017572:	683b      	ldr	r3, [r7, #0]
 8017574:	699b      	ldr	r3, [r3, #24]
 8017576:	011b      	lsls	r3, r3, #4
 8017578:	693a      	ldr	r2, [r7, #16]
 801757a:	4313      	orrs	r3, r2
 801757c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801757e:	687b      	ldr	r3, [r7, #4]
 8017580:	693a      	ldr	r2, [r7, #16]
 8017582:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8017584:	687b      	ldr	r3, [r7, #4]
 8017586:	68fa      	ldr	r2, [r7, #12]
 8017588:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 801758a:	683b      	ldr	r3, [r7, #0]
 801758c:	685a      	ldr	r2, [r3, #4]
 801758e:	687b      	ldr	r3, [r7, #4]
 8017590:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8017592:	687b      	ldr	r3, [r7, #4]
 8017594:	697a      	ldr	r2, [r7, #20]
 8017596:	621a      	str	r2, [r3, #32]
}
 8017598:	bf00      	nop
 801759a:	371c      	adds	r7, #28
 801759c:	46bd      	mov	sp, r7
 801759e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175a2:	4770      	bx	lr
 80175a4:	fffeff8f 	.word	0xfffeff8f
 80175a8:	40010000 	.word	0x40010000
 80175ac:	40010400 	.word	0x40010400
 80175b0:	40014000 	.word	0x40014000
 80175b4:	40014400 	.word	0x40014400
 80175b8:	40014800 	.word	0x40014800

080175bc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80175bc:	b480      	push	{r7}
 80175be:	b087      	sub	sp, #28
 80175c0:	af00      	add	r7, sp, #0
 80175c2:	6078      	str	r0, [r7, #4]
 80175c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80175c6:	687b      	ldr	r3, [r7, #4]
 80175c8:	6a1b      	ldr	r3, [r3, #32]
 80175ca:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80175cc:	687b      	ldr	r3, [r7, #4]
 80175ce:	6a1b      	ldr	r3, [r3, #32]
 80175d0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80175d4:	687b      	ldr	r3, [r7, #4]
 80175d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80175d8:	687b      	ldr	r3, [r7, #4]
 80175da:	685b      	ldr	r3, [r3, #4]
 80175dc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80175de:	687b      	ldr	r3, [r7, #4]
 80175e0:	69db      	ldr	r3, [r3, #28]
 80175e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80175e4:	68fa      	ldr	r2, [r7, #12]
 80175e6:	4b24      	ldr	r3, [pc, #144]	@ (8017678 <TIM_OC4_SetConfig+0xbc>)
 80175e8:	4013      	ands	r3, r2
 80175ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80175ec:	68fb      	ldr	r3, [r7, #12]
 80175ee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80175f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80175f4:	683b      	ldr	r3, [r7, #0]
 80175f6:	681b      	ldr	r3, [r3, #0]
 80175f8:	021b      	lsls	r3, r3, #8
 80175fa:	68fa      	ldr	r2, [r7, #12]
 80175fc:	4313      	orrs	r3, r2
 80175fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8017600:	693b      	ldr	r3, [r7, #16]
 8017602:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8017606:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8017608:	683b      	ldr	r3, [r7, #0]
 801760a:	689b      	ldr	r3, [r3, #8]
 801760c:	031b      	lsls	r3, r3, #12
 801760e:	693a      	ldr	r2, [r7, #16]
 8017610:	4313      	orrs	r3, r2
 8017612:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8017614:	687b      	ldr	r3, [r7, #4]
 8017616:	4a19      	ldr	r2, [pc, #100]	@ (801767c <TIM_OC4_SetConfig+0xc0>)
 8017618:	4293      	cmp	r3, r2
 801761a:	d00f      	beq.n	801763c <TIM_OC4_SetConfig+0x80>
 801761c:	687b      	ldr	r3, [r7, #4]
 801761e:	4a18      	ldr	r2, [pc, #96]	@ (8017680 <TIM_OC4_SetConfig+0xc4>)
 8017620:	4293      	cmp	r3, r2
 8017622:	d00b      	beq.n	801763c <TIM_OC4_SetConfig+0x80>
 8017624:	687b      	ldr	r3, [r7, #4]
 8017626:	4a17      	ldr	r2, [pc, #92]	@ (8017684 <TIM_OC4_SetConfig+0xc8>)
 8017628:	4293      	cmp	r3, r2
 801762a:	d007      	beq.n	801763c <TIM_OC4_SetConfig+0x80>
 801762c:	687b      	ldr	r3, [r7, #4]
 801762e:	4a16      	ldr	r2, [pc, #88]	@ (8017688 <TIM_OC4_SetConfig+0xcc>)
 8017630:	4293      	cmp	r3, r2
 8017632:	d003      	beq.n	801763c <TIM_OC4_SetConfig+0x80>
 8017634:	687b      	ldr	r3, [r7, #4]
 8017636:	4a15      	ldr	r2, [pc, #84]	@ (801768c <TIM_OC4_SetConfig+0xd0>)
 8017638:	4293      	cmp	r3, r2
 801763a:	d109      	bne.n	8017650 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 801763c:	697b      	ldr	r3, [r7, #20]
 801763e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8017642:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8017644:	683b      	ldr	r3, [r7, #0]
 8017646:	695b      	ldr	r3, [r3, #20]
 8017648:	019b      	lsls	r3, r3, #6
 801764a:	697a      	ldr	r2, [r7, #20]
 801764c:	4313      	orrs	r3, r2
 801764e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8017650:	687b      	ldr	r3, [r7, #4]
 8017652:	697a      	ldr	r2, [r7, #20]
 8017654:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8017656:	687b      	ldr	r3, [r7, #4]
 8017658:	68fa      	ldr	r2, [r7, #12]
 801765a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 801765c:	683b      	ldr	r3, [r7, #0]
 801765e:	685a      	ldr	r2, [r3, #4]
 8017660:	687b      	ldr	r3, [r7, #4]
 8017662:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8017664:	687b      	ldr	r3, [r7, #4]
 8017666:	693a      	ldr	r2, [r7, #16]
 8017668:	621a      	str	r2, [r3, #32]
}
 801766a:	bf00      	nop
 801766c:	371c      	adds	r7, #28
 801766e:	46bd      	mov	sp, r7
 8017670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017674:	4770      	bx	lr
 8017676:	bf00      	nop
 8017678:	feff8fff 	.word	0xfeff8fff
 801767c:	40010000 	.word	0x40010000
 8017680:	40010400 	.word	0x40010400
 8017684:	40014000 	.word	0x40014000
 8017688:	40014400 	.word	0x40014400
 801768c:	40014800 	.word	0x40014800

08017690 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8017690:	b480      	push	{r7}
 8017692:	b087      	sub	sp, #28
 8017694:	af00      	add	r7, sp, #0
 8017696:	6078      	str	r0, [r7, #4]
 8017698:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801769a:	687b      	ldr	r3, [r7, #4]
 801769c:	6a1b      	ldr	r3, [r3, #32]
 801769e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80176a0:	687b      	ldr	r3, [r7, #4]
 80176a2:	6a1b      	ldr	r3, [r3, #32]
 80176a4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80176a8:	687b      	ldr	r3, [r7, #4]
 80176aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80176ac:	687b      	ldr	r3, [r7, #4]
 80176ae:	685b      	ldr	r3, [r3, #4]
 80176b0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80176b2:	687b      	ldr	r3, [r7, #4]
 80176b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80176b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80176b8:	68fa      	ldr	r2, [r7, #12]
 80176ba:	4b21      	ldr	r3, [pc, #132]	@ (8017740 <TIM_OC5_SetConfig+0xb0>)
 80176bc:	4013      	ands	r3, r2
 80176be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80176c0:	683b      	ldr	r3, [r7, #0]
 80176c2:	681b      	ldr	r3, [r3, #0]
 80176c4:	68fa      	ldr	r2, [r7, #12]
 80176c6:	4313      	orrs	r3, r2
 80176c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80176ca:	693b      	ldr	r3, [r7, #16]
 80176cc:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80176d0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80176d2:	683b      	ldr	r3, [r7, #0]
 80176d4:	689b      	ldr	r3, [r3, #8]
 80176d6:	041b      	lsls	r3, r3, #16
 80176d8:	693a      	ldr	r2, [r7, #16]
 80176da:	4313      	orrs	r3, r2
 80176dc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80176de:	687b      	ldr	r3, [r7, #4]
 80176e0:	4a18      	ldr	r2, [pc, #96]	@ (8017744 <TIM_OC5_SetConfig+0xb4>)
 80176e2:	4293      	cmp	r3, r2
 80176e4:	d00f      	beq.n	8017706 <TIM_OC5_SetConfig+0x76>
 80176e6:	687b      	ldr	r3, [r7, #4]
 80176e8:	4a17      	ldr	r2, [pc, #92]	@ (8017748 <TIM_OC5_SetConfig+0xb8>)
 80176ea:	4293      	cmp	r3, r2
 80176ec:	d00b      	beq.n	8017706 <TIM_OC5_SetConfig+0x76>
 80176ee:	687b      	ldr	r3, [r7, #4]
 80176f0:	4a16      	ldr	r2, [pc, #88]	@ (801774c <TIM_OC5_SetConfig+0xbc>)
 80176f2:	4293      	cmp	r3, r2
 80176f4:	d007      	beq.n	8017706 <TIM_OC5_SetConfig+0x76>
 80176f6:	687b      	ldr	r3, [r7, #4]
 80176f8:	4a15      	ldr	r2, [pc, #84]	@ (8017750 <TIM_OC5_SetConfig+0xc0>)
 80176fa:	4293      	cmp	r3, r2
 80176fc:	d003      	beq.n	8017706 <TIM_OC5_SetConfig+0x76>
 80176fe:	687b      	ldr	r3, [r7, #4]
 8017700:	4a14      	ldr	r2, [pc, #80]	@ (8017754 <TIM_OC5_SetConfig+0xc4>)
 8017702:	4293      	cmp	r3, r2
 8017704:	d109      	bne.n	801771a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8017706:	697b      	ldr	r3, [r7, #20]
 8017708:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801770c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 801770e:	683b      	ldr	r3, [r7, #0]
 8017710:	695b      	ldr	r3, [r3, #20]
 8017712:	021b      	lsls	r3, r3, #8
 8017714:	697a      	ldr	r2, [r7, #20]
 8017716:	4313      	orrs	r3, r2
 8017718:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801771a:	687b      	ldr	r3, [r7, #4]
 801771c:	697a      	ldr	r2, [r7, #20]
 801771e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8017720:	687b      	ldr	r3, [r7, #4]
 8017722:	68fa      	ldr	r2, [r7, #12]
 8017724:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8017726:	683b      	ldr	r3, [r7, #0]
 8017728:	685a      	ldr	r2, [r3, #4]
 801772a:	687b      	ldr	r3, [r7, #4]
 801772c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801772e:	687b      	ldr	r3, [r7, #4]
 8017730:	693a      	ldr	r2, [r7, #16]
 8017732:	621a      	str	r2, [r3, #32]
}
 8017734:	bf00      	nop
 8017736:	371c      	adds	r7, #28
 8017738:	46bd      	mov	sp, r7
 801773a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801773e:	4770      	bx	lr
 8017740:	fffeff8f 	.word	0xfffeff8f
 8017744:	40010000 	.word	0x40010000
 8017748:	40010400 	.word	0x40010400
 801774c:	40014000 	.word	0x40014000
 8017750:	40014400 	.word	0x40014400
 8017754:	40014800 	.word	0x40014800

08017758 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8017758:	b480      	push	{r7}
 801775a:	b087      	sub	sp, #28
 801775c:	af00      	add	r7, sp, #0
 801775e:	6078      	str	r0, [r7, #4]
 8017760:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8017762:	687b      	ldr	r3, [r7, #4]
 8017764:	6a1b      	ldr	r3, [r3, #32]
 8017766:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8017768:	687b      	ldr	r3, [r7, #4]
 801776a:	6a1b      	ldr	r3, [r3, #32]
 801776c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8017770:	687b      	ldr	r3, [r7, #4]
 8017772:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8017774:	687b      	ldr	r3, [r7, #4]
 8017776:	685b      	ldr	r3, [r3, #4]
 8017778:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 801777a:	687b      	ldr	r3, [r7, #4]
 801777c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801777e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8017780:	68fa      	ldr	r2, [r7, #12]
 8017782:	4b22      	ldr	r3, [pc, #136]	@ (801780c <TIM_OC6_SetConfig+0xb4>)
 8017784:	4013      	ands	r3, r2
 8017786:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8017788:	683b      	ldr	r3, [r7, #0]
 801778a:	681b      	ldr	r3, [r3, #0]
 801778c:	021b      	lsls	r3, r3, #8
 801778e:	68fa      	ldr	r2, [r7, #12]
 8017790:	4313      	orrs	r3, r2
 8017792:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8017794:	693b      	ldr	r3, [r7, #16]
 8017796:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 801779a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 801779c:	683b      	ldr	r3, [r7, #0]
 801779e:	689b      	ldr	r3, [r3, #8]
 80177a0:	051b      	lsls	r3, r3, #20
 80177a2:	693a      	ldr	r2, [r7, #16]
 80177a4:	4313      	orrs	r3, r2
 80177a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80177a8:	687b      	ldr	r3, [r7, #4]
 80177aa:	4a19      	ldr	r2, [pc, #100]	@ (8017810 <TIM_OC6_SetConfig+0xb8>)
 80177ac:	4293      	cmp	r3, r2
 80177ae:	d00f      	beq.n	80177d0 <TIM_OC6_SetConfig+0x78>
 80177b0:	687b      	ldr	r3, [r7, #4]
 80177b2:	4a18      	ldr	r2, [pc, #96]	@ (8017814 <TIM_OC6_SetConfig+0xbc>)
 80177b4:	4293      	cmp	r3, r2
 80177b6:	d00b      	beq.n	80177d0 <TIM_OC6_SetConfig+0x78>
 80177b8:	687b      	ldr	r3, [r7, #4]
 80177ba:	4a17      	ldr	r2, [pc, #92]	@ (8017818 <TIM_OC6_SetConfig+0xc0>)
 80177bc:	4293      	cmp	r3, r2
 80177be:	d007      	beq.n	80177d0 <TIM_OC6_SetConfig+0x78>
 80177c0:	687b      	ldr	r3, [r7, #4]
 80177c2:	4a16      	ldr	r2, [pc, #88]	@ (801781c <TIM_OC6_SetConfig+0xc4>)
 80177c4:	4293      	cmp	r3, r2
 80177c6:	d003      	beq.n	80177d0 <TIM_OC6_SetConfig+0x78>
 80177c8:	687b      	ldr	r3, [r7, #4]
 80177ca:	4a15      	ldr	r2, [pc, #84]	@ (8017820 <TIM_OC6_SetConfig+0xc8>)
 80177cc:	4293      	cmp	r3, r2
 80177ce:	d109      	bne.n	80177e4 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80177d0:	697b      	ldr	r3, [r7, #20]
 80177d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80177d6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80177d8:	683b      	ldr	r3, [r7, #0]
 80177da:	695b      	ldr	r3, [r3, #20]
 80177dc:	029b      	lsls	r3, r3, #10
 80177de:	697a      	ldr	r2, [r7, #20]
 80177e0:	4313      	orrs	r3, r2
 80177e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80177e4:	687b      	ldr	r3, [r7, #4]
 80177e6:	697a      	ldr	r2, [r7, #20]
 80177e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80177ea:	687b      	ldr	r3, [r7, #4]
 80177ec:	68fa      	ldr	r2, [r7, #12]
 80177ee:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80177f0:	683b      	ldr	r3, [r7, #0]
 80177f2:	685a      	ldr	r2, [r3, #4]
 80177f4:	687b      	ldr	r3, [r7, #4]
 80177f6:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80177f8:	687b      	ldr	r3, [r7, #4]
 80177fa:	693a      	ldr	r2, [r7, #16]
 80177fc:	621a      	str	r2, [r3, #32]
}
 80177fe:	bf00      	nop
 8017800:	371c      	adds	r7, #28
 8017802:	46bd      	mov	sp, r7
 8017804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017808:	4770      	bx	lr
 801780a:	bf00      	nop
 801780c:	feff8fff 	.word	0xfeff8fff
 8017810:	40010000 	.word	0x40010000
 8017814:	40010400 	.word	0x40010400
 8017818:	40014000 	.word	0x40014000
 801781c:	40014400 	.word	0x40014400
 8017820:	40014800 	.word	0x40014800

08017824 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8017824:	b480      	push	{r7}
 8017826:	b087      	sub	sp, #28
 8017828:	af00      	add	r7, sp, #0
 801782a:	60f8      	str	r0, [r7, #12]
 801782c:	60b9      	str	r1, [r7, #8]
 801782e:	607a      	str	r2, [r7, #4]
 8017830:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8017832:	68fb      	ldr	r3, [r7, #12]
 8017834:	6a1b      	ldr	r3, [r3, #32]
 8017836:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8017838:	68fb      	ldr	r3, [r7, #12]
 801783a:	6a1b      	ldr	r3, [r3, #32]
 801783c:	f023 0201 	bic.w	r2, r3, #1
 8017840:	68fb      	ldr	r3, [r7, #12]
 8017842:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8017844:	68fb      	ldr	r3, [r7, #12]
 8017846:	699b      	ldr	r3, [r3, #24]
 8017848:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 801784a:	68fb      	ldr	r3, [r7, #12]
 801784c:	4a2c      	ldr	r2, [pc, #176]	@ (8017900 <TIM_TI1_SetConfig+0xdc>)
 801784e:	4293      	cmp	r3, r2
 8017850:	d023      	beq.n	801789a <TIM_TI1_SetConfig+0x76>
 8017852:	68fb      	ldr	r3, [r7, #12]
 8017854:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8017858:	d01f      	beq.n	801789a <TIM_TI1_SetConfig+0x76>
 801785a:	68fb      	ldr	r3, [r7, #12]
 801785c:	4a29      	ldr	r2, [pc, #164]	@ (8017904 <TIM_TI1_SetConfig+0xe0>)
 801785e:	4293      	cmp	r3, r2
 8017860:	d01b      	beq.n	801789a <TIM_TI1_SetConfig+0x76>
 8017862:	68fb      	ldr	r3, [r7, #12]
 8017864:	4a28      	ldr	r2, [pc, #160]	@ (8017908 <TIM_TI1_SetConfig+0xe4>)
 8017866:	4293      	cmp	r3, r2
 8017868:	d017      	beq.n	801789a <TIM_TI1_SetConfig+0x76>
 801786a:	68fb      	ldr	r3, [r7, #12]
 801786c:	4a27      	ldr	r2, [pc, #156]	@ (801790c <TIM_TI1_SetConfig+0xe8>)
 801786e:	4293      	cmp	r3, r2
 8017870:	d013      	beq.n	801789a <TIM_TI1_SetConfig+0x76>
 8017872:	68fb      	ldr	r3, [r7, #12]
 8017874:	4a26      	ldr	r2, [pc, #152]	@ (8017910 <TIM_TI1_SetConfig+0xec>)
 8017876:	4293      	cmp	r3, r2
 8017878:	d00f      	beq.n	801789a <TIM_TI1_SetConfig+0x76>
 801787a:	68fb      	ldr	r3, [r7, #12]
 801787c:	4a25      	ldr	r2, [pc, #148]	@ (8017914 <TIM_TI1_SetConfig+0xf0>)
 801787e:	4293      	cmp	r3, r2
 8017880:	d00b      	beq.n	801789a <TIM_TI1_SetConfig+0x76>
 8017882:	68fb      	ldr	r3, [r7, #12]
 8017884:	4a24      	ldr	r2, [pc, #144]	@ (8017918 <TIM_TI1_SetConfig+0xf4>)
 8017886:	4293      	cmp	r3, r2
 8017888:	d007      	beq.n	801789a <TIM_TI1_SetConfig+0x76>
 801788a:	68fb      	ldr	r3, [r7, #12]
 801788c:	4a23      	ldr	r2, [pc, #140]	@ (801791c <TIM_TI1_SetConfig+0xf8>)
 801788e:	4293      	cmp	r3, r2
 8017890:	d003      	beq.n	801789a <TIM_TI1_SetConfig+0x76>
 8017892:	68fb      	ldr	r3, [r7, #12]
 8017894:	4a22      	ldr	r2, [pc, #136]	@ (8017920 <TIM_TI1_SetConfig+0xfc>)
 8017896:	4293      	cmp	r3, r2
 8017898:	d101      	bne.n	801789e <TIM_TI1_SetConfig+0x7a>
 801789a:	2301      	movs	r3, #1
 801789c:	e000      	b.n	80178a0 <TIM_TI1_SetConfig+0x7c>
 801789e:	2300      	movs	r3, #0
 80178a0:	2b00      	cmp	r3, #0
 80178a2:	d008      	beq.n	80178b6 <TIM_TI1_SetConfig+0x92>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80178a4:	697b      	ldr	r3, [r7, #20]
 80178a6:	f023 0303 	bic.w	r3, r3, #3
 80178aa:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80178ac:	697a      	ldr	r2, [r7, #20]
 80178ae:	687b      	ldr	r3, [r7, #4]
 80178b0:	4313      	orrs	r3, r2
 80178b2:	617b      	str	r3, [r7, #20]
 80178b4:	e003      	b.n	80178be <TIM_TI1_SetConfig+0x9a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80178b6:	697b      	ldr	r3, [r7, #20]
 80178b8:	f043 0301 	orr.w	r3, r3, #1
 80178bc:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80178be:	697b      	ldr	r3, [r7, #20]
 80178c0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80178c4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80178c6:	683b      	ldr	r3, [r7, #0]
 80178c8:	011b      	lsls	r3, r3, #4
 80178ca:	b2db      	uxtb	r3, r3
 80178cc:	697a      	ldr	r2, [r7, #20]
 80178ce:	4313      	orrs	r3, r2
 80178d0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80178d2:	693b      	ldr	r3, [r7, #16]
 80178d4:	f023 030a 	bic.w	r3, r3, #10
 80178d8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80178da:	68bb      	ldr	r3, [r7, #8]
 80178dc:	f003 030a 	and.w	r3, r3, #10
 80178e0:	693a      	ldr	r2, [r7, #16]
 80178e2:	4313      	orrs	r3, r2
 80178e4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80178e6:	68fb      	ldr	r3, [r7, #12]
 80178e8:	697a      	ldr	r2, [r7, #20]
 80178ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80178ec:	68fb      	ldr	r3, [r7, #12]
 80178ee:	693a      	ldr	r2, [r7, #16]
 80178f0:	621a      	str	r2, [r3, #32]
}
 80178f2:	bf00      	nop
 80178f4:	371c      	adds	r7, #28
 80178f6:	46bd      	mov	sp, r7
 80178f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178fc:	4770      	bx	lr
 80178fe:	bf00      	nop
 8017900:	40010000 	.word	0x40010000
 8017904:	40000400 	.word	0x40000400
 8017908:	40000800 	.word	0x40000800
 801790c:	40000c00 	.word	0x40000c00
 8017910:	40010400 	.word	0x40010400
 8017914:	40001800 	.word	0x40001800
 8017918:	40014000 	.word	0x40014000
 801791c:	4000e000 	.word	0x4000e000
 8017920:	4000e400 	.word	0x4000e400

08017924 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8017924:	b480      	push	{r7}
 8017926:	b087      	sub	sp, #28
 8017928:	af00      	add	r7, sp, #0
 801792a:	60f8      	str	r0, [r7, #12]
 801792c:	60b9      	str	r1, [r7, #8]
 801792e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8017930:	68fb      	ldr	r3, [r7, #12]
 8017932:	6a1b      	ldr	r3, [r3, #32]
 8017934:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8017936:	68fb      	ldr	r3, [r7, #12]
 8017938:	6a1b      	ldr	r3, [r3, #32]
 801793a:	f023 0201 	bic.w	r2, r3, #1
 801793e:	68fb      	ldr	r3, [r7, #12]
 8017940:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8017942:	68fb      	ldr	r3, [r7, #12]
 8017944:	699b      	ldr	r3, [r3, #24]
 8017946:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8017948:	693b      	ldr	r3, [r7, #16]
 801794a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 801794e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8017950:	687b      	ldr	r3, [r7, #4]
 8017952:	011b      	lsls	r3, r3, #4
 8017954:	693a      	ldr	r2, [r7, #16]
 8017956:	4313      	orrs	r3, r2
 8017958:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801795a:	697b      	ldr	r3, [r7, #20]
 801795c:	f023 030a 	bic.w	r3, r3, #10
 8017960:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8017962:	697a      	ldr	r2, [r7, #20]
 8017964:	68bb      	ldr	r3, [r7, #8]
 8017966:	4313      	orrs	r3, r2
 8017968:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 801796a:	68fb      	ldr	r3, [r7, #12]
 801796c:	693a      	ldr	r2, [r7, #16]
 801796e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8017970:	68fb      	ldr	r3, [r7, #12]
 8017972:	697a      	ldr	r2, [r7, #20]
 8017974:	621a      	str	r2, [r3, #32]
}
 8017976:	bf00      	nop
 8017978:	371c      	adds	r7, #28
 801797a:	46bd      	mov	sp, r7
 801797c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017980:	4770      	bx	lr

08017982 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8017982:	b480      	push	{r7}
 8017984:	b087      	sub	sp, #28
 8017986:	af00      	add	r7, sp, #0
 8017988:	60f8      	str	r0, [r7, #12]
 801798a:	60b9      	str	r1, [r7, #8]
 801798c:	607a      	str	r2, [r7, #4]
 801798e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8017990:	68fb      	ldr	r3, [r7, #12]
 8017992:	6a1b      	ldr	r3, [r3, #32]
 8017994:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8017996:	68fb      	ldr	r3, [r7, #12]
 8017998:	6a1b      	ldr	r3, [r3, #32]
 801799a:	f023 0210 	bic.w	r2, r3, #16
 801799e:	68fb      	ldr	r3, [r7, #12]
 80179a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80179a2:	68fb      	ldr	r3, [r7, #12]
 80179a4:	699b      	ldr	r3, [r3, #24]
 80179a6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80179a8:	693b      	ldr	r3, [r7, #16]
 80179aa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80179ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80179b0:	687b      	ldr	r3, [r7, #4]
 80179b2:	021b      	lsls	r3, r3, #8
 80179b4:	693a      	ldr	r2, [r7, #16]
 80179b6:	4313      	orrs	r3, r2
 80179b8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80179ba:	693b      	ldr	r3, [r7, #16]
 80179bc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80179c0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80179c2:	683b      	ldr	r3, [r7, #0]
 80179c4:	031b      	lsls	r3, r3, #12
 80179c6:	b29b      	uxth	r3, r3
 80179c8:	693a      	ldr	r2, [r7, #16]
 80179ca:	4313      	orrs	r3, r2
 80179cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80179ce:	697b      	ldr	r3, [r7, #20]
 80179d0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80179d4:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80179d6:	68bb      	ldr	r3, [r7, #8]
 80179d8:	011b      	lsls	r3, r3, #4
 80179da:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80179de:	697a      	ldr	r2, [r7, #20]
 80179e0:	4313      	orrs	r3, r2
 80179e2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80179e4:	68fb      	ldr	r3, [r7, #12]
 80179e6:	693a      	ldr	r2, [r7, #16]
 80179e8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80179ea:	68fb      	ldr	r3, [r7, #12]
 80179ec:	697a      	ldr	r2, [r7, #20]
 80179ee:	621a      	str	r2, [r3, #32]
}
 80179f0:	bf00      	nop
 80179f2:	371c      	adds	r7, #28
 80179f4:	46bd      	mov	sp, r7
 80179f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179fa:	4770      	bx	lr

080179fc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80179fc:	b480      	push	{r7}
 80179fe:	b087      	sub	sp, #28
 8017a00:	af00      	add	r7, sp, #0
 8017a02:	60f8      	str	r0, [r7, #12]
 8017a04:	60b9      	str	r1, [r7, #8]
 8017a06:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8017a08:	68fb      	ldr	r3, [r7, #12]
 8017a0a:	6a1b      	ldr	r3, [r3, #32]
 8017a0c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8017a0e:	68fb      	ldr	r3, [r7, #12]
 8017a10:	6a1b      	ldr	r3, [r3, #32]
 8017a12:	f023 0210 	bic.w	r2, r3, #16
 8017a16:	68fb      	ldr	r3, [r7, #12]
 8017a18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8017a1a:	68fb      	ldr	r3, [r7, #12]
 8017a1c:	699b      	ldr	r3, [r3, #24]
 8017a1e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8017a20:	693b      	ldr	r3, [r7, #16]
 8017a22:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8017a26:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8017a28:	687b      	ldr	r3, [r7, #4]
 8017a2a:	031b      	lsls	r3, r3, #12
 8017a2c:	693a      	ldr	r2, [r7, #16]
 8017a2e:	4313      	orrs	r3, r2
 8017a30:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8017a32:	697b      	ldr	r3, [r7, #20]
 8017a34:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8017a38:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8017a3a:	68bb      	ldr	r3, [r7, #8]
 8017a3c:	011b      	lsls	r3, r3, #4
 8017a3e:	697a      	ldr	r2, [r7, #20]
 8017a40:	4313      	orrs	r3, r2
 8017a42:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8017a44:	68fb      	ldr	r3, [r7, #12]
 8017a46:	693a      	ldr	r2, [r7, #16]
 8017a48:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8017a4a:	68fb      	ldr	r3, [r7, #12]
 8017a4c:	697a      	ldr	r2, [r7, #20]
 8017a4e:	621a      	str	r2, [r3, #32]
}
 8017a50:	bf00      	nop
 8017a52:	371c      	adds	r7, #28
 8017a54:	46bd      	mov	sp, r7
 8017a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a5a:	4770      	bx	lr

08017a5c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8017a5c:	b480      	push	{r7}
 8017a5e:	b087      	sub	sp, #28
 8017a60:	af00      	add	r7, sp, #0
 8017a62:	60f8      	str	r0, [r7, #12]
 8017a64:	60b9      	str	r1, [r7, #8]
 8017a66:	607a      	str	r2, [r7, #4]
 8017a68:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8017a6a:	68fb      	ldr	r3, [r7, #12]
 8017a6c:	6a1b      	ldr	r3, [r3, #32]
 8017a6e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8017a70:	68fb      	ldr	r3, [r7, #12]
 8017a72:	6a1b      	ldr	r3, [r3, #32]
 8017a74:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8017a78:	68fb      	ldr	r3, [r7, #12]
 8017a7a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8017a7c:	68fb      	ldr	r3, [r7, #12]
 8017a7e:	69db      	ldr	r3, [r3, #28]
 8017a80:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8017a82:	693b      	ldr	r3, [r7, #16]
 8017a84:	f023 0303 	bic.w	r3, r3, #3
 8017a88:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8017a8a:	693a      	ldr	r2, [r7, #16]
 8017a8c:	687b      	ldr	r3, [r7, #4]
 8017a8e:	4313      	orrs	r3, r2
 8017a90:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8017a92:	693b      	ldr	r3, [r7, #16]
 8017a94:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8017a98:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8017a9a:	683b      	ldr	r3, [r7, #0]
 8017a9c:	011b      	lsls	r3, r3, #4
 8017a9e:	b2db      	uxtb	r3, r3
 8017aa0:	693a      	ldr	r2, [r7, #16]
 8017aa2:	4313      	orrs	r3, r2
 8017aa4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8017aa6:	697b      	ldr	r3, [r7, #20]
 8017aa8:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8017aac:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8017aae:	68bb      	ldr	r3, [r7, #8]
 8017ab0:	021b      	lsls	r3, r3, #8
 8017ab2:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8017ab6:	697a      	ldr	r2, [r7, #20]
 8017ab8:	4313      	orrs	r3, r2
 8017aba:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8017abc:	68fb      	ldr	r3, [r7, #12]
 8017abe:	693a      	ldr	r2, [r7, #16]
 8017ac0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8017ac2:	68fb      	ldr	r3, [r7, #12]
 8017ac4:	697a      	ldr	r2, [r7, #20]
 8017ac6:	621a      	str	r2, [r3, #32]
}
 8017ac8:	bf00      	nop
 8017aca:	371c      	adds	r7, #28
 8017acc:	46bd      	mov	sp, r7
 8017ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ad2:	4770      	bx	lr

08017ad4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8017ad4:	b480      	push	{r7}
 8017ad6:	b087      	sub	sp, #28
 8017ad8:	af00      	add	r7, sp, #0
 8017ada:	60f8      	str	r0, [r7, #12]
 8017adc:	60b9      	str	r1, [r7, #8]
 8017ade:	607a      	str	r2, [r7, #4]
 8017ae0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8017ae2:	68fb      	ldr	r3, [r7, #12]
 8017ae4:	6a1b      	ldr	r3, [r3, #32]
 8017ae6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8017ae8:	68fb      	ldr	r3, [r7, #12]
 8017aea:	6a1b      	ldr	r3, [r3, #32]
 8017aec:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8017af0:	68fb      	ldr	r3, [r7, #12]
 8017af2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8017af4:	68fb      	ldr	r3, [r7, #12]
 8017af6:	69db      	ldr	r3, [r3, #28]
 8017af8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8017afa:	693b      	ldr	r3, [r7, #16]
 8017afc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8017b00:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8017b02:	687b      	ldr	r3, [r7, #4]
 8017b04:	021b      	lsls	r3, r3, #8
 8017b06:	693a      	ldr	r2, [r7, #16]
 8017b08:	4313      	orrs	r3, r2
 8017b0a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8017b0c:	693b      	ldr	r3, [r7, #16]
 8017b0e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8017b12:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8017b14:	683b      	ldr	r3, [r7, #0]
 8017b16:	031b      	lsls	r3, r3, #12
 8017b18:	b29b      	uxth	r3, r3
 8017b1a:	693a      	ldr	r2, [r7, #16]
 8017b1c:	4313      	orrs	r3, r2
 8017b1e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8017b20:	697b      	ldr	r3, [r7, #20]
 8017b22:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8017b26:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8017b28:	68bb      	ldr	r3, [r7, #8]
 8017b2a:	031b      	lsls	r3, r3, #12
 8017b2c:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8017b30:	697a      	ldr	r2, [r7, #20]
 8017b32:	4313      	orrs	r3, r2
 8017b34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8017b36:	68fb      	ldr	r3, [r7, #12]
 8017b38:	693a      	ldr	r2, [r7, #16]
 8017b3a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8017b3c:	68fb      	ldr	r3, [r7, #12]
 8017b3e:	697a      	ldr	r2, [r7, #20]
 8017b40:	621a      	str	r2, [r3, #32]
}
 8017b42:	bf00      	nop
 8017b44:	371c      	adds	r7, #28
 8017b46:	46bd      	mov	sp, r7
 8017b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b4c:	4770      	bx	lr
	...

08017b50 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8017b50:	b480      	push	{r7}
 8017b52:	b085      	sub	sp, #20
 8017b54:	af00      	add	r7, sp, #0
 8017b56:	6078      	str	r0, [r7, #4]
 8017b58:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8017b5a:	687b      	ldr	r3, [r7, #4]
 8017b5c:	689b      	ldr	r3, [r3, #8]
 8017b5e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8017b60:	68fa      	ldr	r2, [r7, #12]
 8017b62:	4b09      	ldr	r3, [pc, #36]	@ (8017b88 <TIM_ITRx_SetConfig+0x38>)
 8017b64:	4013      	ands	r3, r2
 8017b66:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8017b68:	683a      	ldr	r2, [r7, #0]
 8017b6a:	68fb      	ldr	r3, [r7, #12]
 8017b6c:	4313      	orrs	r3, r2
 8017b6e:	f043 0307 	orr.w	r3, r3, #7
 8017b72:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8017b74:	687b      	ldr	r3, [r7, #4]
 8017b76:	68fa      	ldr	r2, [r7, #12]
 8017b78:	609a      	str	r2, [r3, #8]
}
 8017b7a:	bf00      	nop
 8017b7c:	3714      	adds	r7, #20
 8017b7e:	46bd      	mov	sp, r7
 8017b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b84:	4770      	bx	lr
 8017b86:	bf00      	nop
 8017b88:	ffcfff8f 	.word	0xffcfff8f

08017b8c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8017b8c:	b480      	push	{r7}
 8017b8e:	b087      	sub	sp, #28
 8017b90:	af00      	add	r7, sp, #0
 8017b92:	60f8      	str	r0, [r7, #12]
 8017b94:	60b9      	str	r1, [r7, #8]
 8017b96:	607a      	str	r2, [r7, #4]
 8017b98:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8017b9a:	68fb      	ldr	r3, [r7, #12]
 8017b9c:	689b      	ldr	r3, [r3, #8]
 8017b9e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8017ba0:	697b      	ldr	r3, [r7, #20]
 8017ba2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8017ba6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8017ba8:	683b      	ldr	r3, [r7, #0]
 8017baa:	021a      	lsls	r2, r3, #8
 8017bac:	687b      	ldr	r3, [r7, #4]
 8017bae:	431a      	orrs	r2, r3
 8017bb0:	68bb      	ldr	r3, [r7, #8]
 8017bb2:	4313      	orrs	r3, r2
 8017bb4:	697a      	ldr	r2, [r7, #20]
 8017bb6:	4313      	orrs	r3, r2
 8017bb8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8017bba:	68fb      	ldr	r3, [r7, #12]
 8017bbc:	697a      	ldr	r2, [r7, #20]
 8017bbe:	609a      	str	r2, [r3, #8]
}
 8017bc0:	bf00      	nop
 8017bc2:	371c      	adds	r7, #28
 8017bc4:	46bd      	mov	sp, r7
 8017bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017bca:	4770      	bx	lr

08017bcc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8017bcc:	b480      	push	{r7}
 8017bce:	b087      	sub	sp, #28
 8017bd0:	af00      	add	r7, sp, #0
 8017bd2:	60f8      	str	r0, [r7, #12]
 8017bd4:	60b9      	str	r1, [r7, #8]
 8017bd6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8017bd8:	68bb      	ldr	r3, [r7, #8]
 8017bda:	f003 031f 	and.w	r3, r3, #31
 8017bde:	2201      	movs	r2, #1
 8017be0:	fa02 f303 	lsl.w	r3, r2, r3
 8017be4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8017be6:	68fb      	ldr	r3, [r7, #12]
 8017be8:	6a1a      	ldr	r2, [r3, #32]
 8017bea:	697b      	ldr	r3, [r7, #20]
 8017bec:	43db      	mvns	r3, r3
 8017bee:	401a      	ands	r2, r3
 8017bf0:	68fb      	ldr	r3, [r7, #12]
 8017bf2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8017bf4:	68fb      	ldr	r3, [r7, #12]
 8017bf6:	6a1a      	ldr	r2, [r3, #32]
 8017bf8:	68bb      	ldr	r3, [r7, #8]
 8017bfa:	f003 031f 	and.w	r3, r3, #31
 8017bfe:	6879      	ldr	r1, [r7, #4]
 8017c00:	fa01 f303 	lsl.w	r3, r1, r3
 8017c04:	431a      	orrs	r2, r3
 8017c06:	68fb      	ldr	r3, [r7, #12]
 8017c08:	621a      	str	r2, [r3, #32]
}
 8017c0a:	bf00      	nop
 8017c0c:	371c      	adds	r7, #28
 8017c0e:	46bd      	mov	sp, r7
 8017c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c14:	4770      	bx	lr
	...

08017c18 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8017c18:	b480      	push	{r7}
 8017c1a:	b085      	sub	sp, #20
 8017c1c:	af00      	add	r7, sp, #0
 8017c1e:	6078      	str	r0, [r7, #4]
 8017c20:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8017c22:	687b      	ldr	r3, [r7, #4]
 8017c24:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8017c28:	2b01      	cmp	r3, #1
 8017c2a:	d101      	bne.n	8017c30 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8017c2c:	2302      	movs	r3, #2
 8017c2e:	e077      	b.n	8017d20 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 8017c30:	687b      	ldr	r3, [r7, #4]
 8017c32:	2201      	movs	r2, #1
 8017c34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8017c38:	687b      	ldr	r3, [r7, #4]
 8017c3a:	2202      	movs	r2, #2
 8017c3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8017c40:	687b      	ldr	r3, [r7, #4]
 8017c42:	681b      	ldr	r3, [r3, #0]
 8017c44:	685b      	ldr	r3, [r3, #4]
 8017c46:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8017c48:	687b      	ldr	r3, [r7, #4]
 8017c4a:	681b      	ldr	r3, [r3, #0]
 8017c4c:	689b      	ldr	r3, [r3, #8]
 8017c4e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8017c50:	687b      	ldr	r3, [r7, #4]
 8017c52:	681b      	ldr	r3, [r3, #0]
 8017c54:	4a35      	ldr	r2, [pc, #212]	@ (8017d2c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8017c56:	4293      	cmp	r3, r2
 8017c58:	d004      	beq.n	8017c64 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8017c5a:	687b      	ldr	r3, [r7, #4]
 8017c5c:	681b      	ldr	r3, [r3, #0]
 8017c5e:	4a34      	ldr	r2, [pc, #208]	@ (8017d30 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8017c60:	4293      	cmp	r3, r2
 8017c62:	d108      	bne.n	8017c76 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8017c64:	68fb      	ldr	r3, [r7, #12]
 8017c66:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8017c6a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8017c6c:	683b      	ldr	r3, [r7, #0]
 8017c6e:	685b      	ldr	r3, [r3, #4]
 8017c70:	68fa      	ldr	r2, [r7, #12]
 8017c72:	4313      	orrs	r3, r2
 8017c74:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8017c76:	68fb      	ldr	r3, [r7, #12]
 8017c78:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8017c7c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8017c7e:	683b      	ldr	r3, [r7, #0]
 8017c80:	681b      	ldr	r3, [r3, #0]
 8017c82:	68fa      	ldr	r2, [r7, #12]
 8017c84:	4313      	orrs	r3, r2
 8017c86:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8017c88:	687b      	ldr	r3, [r7, #4]
 8017c8a:	681b      	ldr	r3, [r3, #0]
 8017c8c:	68fa      	ldr	r2, [r7, #12]
 8017c8e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8017c90:	687b      	ldr	r3, [r7, #4]
 8017c92:	681b      	ldr	r3, [r3, #0]
 8017c94:	4a25      	ldr	r2, [pc, #148]	@ (8017d2c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8017c96:	4293      	cmp	r3, r2
 8017c98:	d02c      	beq.n	8017cf4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8017c9a:	687b      	ldr	r3, [r7, #4]
 8017c9c:	681b      	ldr	r3, [r3, #0]
 8017c9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8017ca2:	d027      	beq.n	8017cf4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8017ca4:	687b      	ldr	r3, [r7, #4]
 8017ca6:	681b      	ldr	r3, [r3, #0]
 8017ca8:	4a22      	ldr	r2, [pc, #136]	@ (8017d34 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8017caa:	4293      	cmp	r3, r2
 8017cac:	d022      	beq.n	8017cf4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8017cae:	687b      	ldr	r3, [r7, #4]
 8017cb0:	681b      	ldr	r3, [r3, #0]
 8017cb2:	4a21      	ldr	r2, [pc, #132]	@ (8017d38 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8017cb4:	4293      	cmp	r3, r2
 8017cb6:	d01d      	beq.n	8017cf4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8017cb8:	687b      	ldr	r3, [r7, #4]
 8017cba:	681b      	ldr	r3, [r3, #0]
 8017cbc:	4a1f      	ldr	r2, [pc, #124]	@ (8017d3c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8017cbe:	4293      	cmp	r3, r2
 8017cc0:	d018      	beq.n	8017cf4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8017cc2:	687b      	ldr	r3, [r7, #4]
 8017cc4:	681b      	ldr	r3, [r3, #0]
 8017cc6:	4a1a      	ldr	r2, [pc, #104]	@ (8017d30 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8017cc8:	4293      	cmp	r3, r2
 8017cca:	d013      	beq.n	8017cf4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8017ccc:	687b      	ldr	r3, [r7, #4]
 8017cce:	681b      	ldr	r3, [r3, #0]
 8017cd0:	4a1b      	ldr	r2, [pc, #108]	@ (8017d40 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8017cd2:	4293      	cmp	r3, r2
 8017cd4:	d00e      	beq.n	8017cf4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8017cd6:	687b      	ldr	r3, [r7, #4]
 8017cd8:	681b      	ldr	r3, [r3, #0]
 8017cda:	4a1a      	ldr	r2, [pc, #104]	@ (8017d44 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8017cdc:	4293      	cmp	r3, r2
 8017cde:	d009      	beq.n	8017cf4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8017ce0:	687b      	ldr	r3, [r7, #4]
 8017ce2:	681b      	ldr	r3, [r3, #0]
 8017ce4:	4a18      	ldr	r2, [pc, #96]	@ (8017d48 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 8017ce6:	4293      	cmp	r3, r2
 8017ce8:	d004      	beq.n	8017cf4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8017cea:	687b      	ldr	r3, [r7, #4]
 8017cec:	681b      	ldr	r3, [r3, #0]
 8017cee:	4a17      	ldr	r2, [pc, #92]	@ (8017d4c <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8017cf0:	4293      	cmp	r3, r2
 8017cf2:	d10c      	bne.n	8017d0e <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8017cf4:	68bb      	ldr	r3, [r7, #8]
 8017cf6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8017cfa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8017cfc:	683b      	ldr	r3, [r7, #0]
 8017cfe:	689b      	ldr	r3, [r3, #8]
 8017d00:	68ba      	ldr	r2, [r7, #8]
 8017d02:	4313      	orrs	r3, r2
 8017d04:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8017d06:	687b      	ldr	r3, [r7, #4]
 8017d08:	681b      	ldr	r3, [r3, #0]
 8017d0a:	68ba      	ldr	r2, [r7, #8]
 8017d0c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8017d0e:	687b      	ldr	r3, [r7, #4]
 8017d10:	2201      	movs	r2, #1
 8017d12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8017d16:	687b      	ldr	r3, [r7, #4]
 8017d18:	2200      	movs	r2, #0
 8017d1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8017d1e:	2300      	movs	r3, #0
}
 8017d20:	4618      	mov	r0, r3
 8017d22:	3714      	adds	r7, #20
 8017d24:	46bd      	mov	sp, r7
 8017d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d2a:	4770      	bx	lr
 8017d2c:	40010000 	.word	0x40010000
 8017d30:	40010400 	.word	0x40010400
 8017d34:	40000400 	.word	0x40000400
 8017d38:	40000800 	.word	0x40000800
 8017d3c:	40000c00 	.word	0x40000c00
 8017d40:	40001800 	.word	0x40001800
 8017d44:	40014000 	.word	0x40014000
 8017d48:	4000e000 	.word	0x4000e000
 8017d4c:	4000e400 	.word	0x4000e400

08017d50 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8017d50:	b480      	push	{r7}
 8017d52:	b085      	sub	sp, #20
 8017d54:	af00      	add	r7, sp, #0
 8017d56:	6078      	str	r0, [r7, #4]
 8017d58:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8017d5a:	2300      	movs	r3, #0
 8017d5c:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 8017d5e:	687b      	ldr	r3, [r7, #4]
 8017d60:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8017d64:	2b01      	cmp	r3, #1
 8017d66:	d101      	bne.n	8017d6c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8017d68:	2302      	movs	r3, #2
 8017d6a:	e073      	b.n	8017e54 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 8017d6c:	687b      	ldr	r3, [r7, #4]
 8017d6e:	2201      	movs	r2, #1
 8017d70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8017d74:	68fb      	ldr	r3, [r7, #12]
 8017d76:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8017d7a:	683b      	ldr	r3, [r7, #0]
 8017d7c:	68db      	ldr	r3, [r3, #12]
 8017d7e:	4313      	orrs	r3, r2
 8017d80:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8017d82:	68fb      	ldr	r3, [r7, #12]
 8017d84:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8017d88:	683b      	ldr	r3, [r7, #0]
 8017d8a:	689b      	ldr	r3, [r3, #8]
 8017d8c:	4313      	orrs	r3, r2
 8017d8e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8017d90:	68fb      	ldr	r3, [r7, #12]
 8017d92:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8017d96:	683b      	ldr	r3, [r7, #0]
 8017d98:	685b      	ldr	r3, [r3, #4]
 8017d9a:	4313      	orrs	r3, r2
 8017d9c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8017d9e:	68fb      	ldr	r3, [r7, #12]
 8017da0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8017da4:	683b      	ldr	r3, [r7, #0]
 8017da6:	681b      	ldr	r3, [r3, #0]
 8017da8:	4313      	orrs	r3, r2
 8017daa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8017dac:	68fb      	ldr	r3, [r7, #12]
 8017dae:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8017db2:	683b      	ldr	r3, [r7, #0]
 8017db4:	691b      	ldr	r3, [r3, #16]
 8017db6:	4313      	orrs	r3, r2
 8017db8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8017dba:	68fb      	ldr	r3, [r7, #12]
 8017dbc:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8017dc0:	683b      	ldr	r3, [r7, #0]
 8017dc2:	695b      	ldr	r3, [r3, #20]
 8017dc4:	4313      	orrs	r3, r2
 8017dc6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8017dc8:	68fb      	ldr	r3, [r7, #12]
 8017dca:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8017dce:	683b      	ldr	r3, [r7, #0]
 8017dd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017dd2:	4313      	orrs	r3, r2
 8017dd4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8017dd6:	68fb      	ldr	r3, [r7, #12]
 8017dd8:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8017ddc:	683b      	ldr	r3, [r7, #0]
 8017dde:	699b      	ldr	r3, [r3, #24]
 8017de0:	041b      	lsls	r3, r3, #16
 8017de2:	4313      	orrs	r3, r2
 8017de4:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8017de6:	68fb      	ldr	r3, [r7, #12]
 8017de8:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8017dec:	683b      	ldr	r3, [r7, #0]
 8017dee:	69db      	ldr	r3, [r3, #28]
 8017df0:	4313      	orrs	r3, r2
 8017df2:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8017df4:	687b      	ldr	r3, [r7, #4]
 8017df6:	681b      	ldr	r3, [r3, #0]
 8017df8:	4a19      	ldr	r2, [pc, #100]	@ (8017e60 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8017dfa:	4293      	cmp	r3, r2
 8017dfc:	d004      	beq.n	8017e08 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 8017dfe:	687b      	ldr	r3, [r7, #4]
 8017e00:	681b      	ldr	r3, [r3, #0]
 8017e02:	4a18      	ldr	r2, [pc, #96]	@ (8017e64 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8017e04:	4293      	cmp	r3, r2
 8017e06:	d11c      	bne.n	8017e42 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8017e08:	68fb      	ldr	r3, [r7, #12]
 8017e0a:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8017e0e:	683b      	ldr	r3, [r7, #0]
 8017e10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017e12:	051b      	lsls	r3, r3, #20
 8017e14:	4313      	orrs	r3, r2
 8017e16:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8017e18:	68fb      	ldr	r3, [r7, #12]
 8017e1a:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8017e1e:	683b      	ldr	r3, [r7, #0]
 8017e20:	6a1b      	ldr	r3, [r3, #32]
 8017e22:	4313      	orrs	r3, r2
 8017e24:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8017e26:	68fb      	ldr	r3, [r7, #12]
 8017e28:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8017e2c:	683b      	ldr	r3, [r7, #0]
 8017e2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017e30:	4313      	orrs	r3, r2
 8017e32:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8017e34:	68fb      	ldr	r3, [r7, #12]
 8017e36:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8017e3a:	683b      	ldr	r3, [r7, #0]
 8017e3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017e3e:	4313      	orrs	r3, r2
 8017e40:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8017e42:	687b      	ldr	r3, [r7, #4]
 8017e44:	681b      	ldr	r3, [r3, #0]
 8017e46:	68fa      	ldr	r2, [r7, #12]
 8017e48:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8017e4a:	687b      	ldr	r3, [r7, #4]
 8017e4c:	2200      	movs	r2, #0
 8017e4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8017e52:	2300      	movs	r3, #0
}
 8017e54:	4618      	mov	r0, r3
 8017e56:	3714      	adds	r7, #20
 8017e58:	46bd      	mov	sp, r7
 8017e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e5e:	4770      	bx	lr
 8017e60:	40010000 	.word	0x40010000
 8017e64:	40010400 	.word	0x40010400

08017e68 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8017e68:	b480      	push	{r7}
 8017e6a:	b083      	sub	sp, #12
 8017e6c:	af00      	add	r7, sp, #0
 8017e6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8017e70:	bf00      	nop
 8017e72:	370c      	adds	r7, #12
 8017e74:	46bd      	mov	sp, r7
 8017e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e7a:	4770      	bx	lr

08017e7c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8017e7c:	b480      	push	{r7}
 8017e7e:	b083      	sub	sp, #12
 8017e80:	af00      	add	r7, sp, #0
 8017e82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8017e84:	bf00      	nop
 8017e86:	370c      	adds	r7, #12
 8017e88:	46bd      	mov	sp, r7
 8017e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e8e:	4770      	bx	lr

08017e90 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8017e90:	b480      	push	{r7}
 8017e92:	b083      	sub	sp, #12
 8017e94:	af00      	add	r7, sp, #0
 8017e96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8017e98:	bf00      	nop
 8017e9a:	370c      	adds	r7, #12
 8017e9c:	46bd      	mov	sp, r7
 8017e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ea2:	4770      	bx	lr

08017ea4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8017ea4:	b580      	push	{r7, lr}
 8017ea6:	b082      	sub	sp, #8
 8017ea8:	af00      	add	r7, sp, #0
 8017eaa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8017eac:	687b      	ldr	r3, [r7, #4]
 8017eae:	2b00      	cmp	r3, #0
 8017eb0:	d101      	bne.n	8017eb6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8017eb2:	2301      	movs	r3, #1
 8017eb4:	e042      	b.n	8017f3c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8017eb6:	687b      	ldr	r3, [r7, #4]
 8017eb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8017ebc:	2b00      	cmp	r3, #0
 8017ebe:	d106      	bne.n	8017ece <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8017ec0:	687b      	ldr	r3, [r7, #4]
 8017ec2:	2200      	movs	r2, #0
 8017ec4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8017ec8:	6878      	ldr	r0, [r7, #4]
 8017eca:	f7f1 fa29 	bl	8009320 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8017ece:	687b      	ldr	r3, [r7, #4]
 8017ed0:	2224      	movs	r2, #36	@ 0x24
 8017ed2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8017ed6:	687b      	ldr	r3, [r7, #4]
 8017ed8:	681b      	ldr	r3, [r3, #0]
 8017eda:	681a      	ldr	r2, [r3, #0]
 8017edc:	687b      	ldr	r3, [r7, #4]
 8017ede:	681b      	ldr	r3, [r3, #0]
 8017ee0:	f022 0201 	bic.w	r2, r2, #1
 8017ee4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8017ee6:	687b      	ldr	r3, [r7, #4]
 8017ee8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017eea:	2b00      	cmp	r3, #0
 8017eec:	d002      	beq.n	8017ef4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8017eee:	6878      	ldr	r0, [r7, #4]
 8017ef0:	f001 fbf8 	bl	80196e4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8017ef4:	6878      	ldr	r0, [r7, #4]
 8017ef6:	f000 fd89 	bl	8018a0c <UART_SetConfig>
 8017efa:	4603      	mov	r3, r0
 8017efc:	2b01      	cmp	r3, #1
 8017efe:	d101      	bne.n	8017f04 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8017f00:	2301      	movs	r3, #1
 8017f02:	e01b      	b.n	8017f3c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8017f04:	687b      	ldr	r3, [r7, #4]
 8017f06:	681b      	ldr	r3, [r3, #0]
 8017f08:	685a      	ldr	r2, [r3, #4]
 8017f0a:	687b      	ldr	r3, [r7, #4]
 8017f0c:	681b      	ldr	r3, [r3, #0]
 8017f0e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8017f12:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8017f14:	687b      	ldr	r3, [r7, #4]
 8017f16:	681b      	ldr	r3, [r3, #0]
 8017f18:	689a      	ldr	r2, [r3, #8]
 8017f1a:	687b      	ldr	r3, [r7, #4]
 8017f1c:	681b      	ldr	r3, [r3, #0]
 8017f1e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8017f22:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8017f24:	687b      	ldr	r3, [r7, #4]
 8017f26:	681b      	ldr	r3, [r3, #0]
 8017f28:	681a      	ldr	r2, [r3, #0]
 8017f2a:	687b      	ldr	r3, [r7, #4]
 8017f2c:	681b      	ldr	r3, [r3, #0]
 8017f2e:	f042 0201 	orr.w	r2, r2, #1
 8017f32:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8017f34:	6878      	ldr	r0, [r7, #4]
 8017f36:	f001 fc77 	bl	8019828 <UART_CheckIdleState>
 8017f3a:	4603      	mov	r3, r0
}
 8017f3c:	4618      	mov	r0, r3
 8017f3e:	3708      	adds	r7, #8
 8017f40:	46bd      	mov	sp, r7
 8017f42:	bd80      	pop	{r7, pc}

08017f44 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8017f44:	b580      	push	{r7, lr}
 8017f46:	b08a      	sub	sp, #40	@ 0x28
 8017f48:	af02      	add	r7, sp, #8
 8017f4a:	60f8      	str	r0, [r7, #12]
 8017f4c:	60b9      	str	r1, [r7, #8]
 8017f4e:	603b      	str	r3, [r7, #0]
 8017f50:	4613      	mov	r3, r2
 8017f52:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8017f54:	68fb      	ldr	r3, [r7, #12]
 8017f56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8017f5a:	2b20      	cmp	r3, #32
 8017f5c:	d17b      	bne.n	8018056 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8017f5e:	68bb      	ldr	r3, [r7, #8]
 8017f60:	2b00      	cmp	r3, #0
 8017f62:	d002      	beq.n	8017f6a <HAL_UART_Transmit+0x26>
 8017f64:	88fb      	ldrh	r3, [r7, #6]
 8017f66:	2b00      	cmp	r3, #0
 8017f68:	d101      	bne.n	8017f6e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8017f6a:	2301      	movs	r3, #1
 8017f6c:	e074      	b.n	8018058 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8017f6e:	68fb      	ldr	r3, [r7, #12]
 8017f70:	2200      	movs	r2, #0
 8017f72:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8017f76:	68fb      	ldr	r3, [r7, #12]
 8017f78:	2221      	movs	r2, #33	@ 0x21
 8017f7a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8017f7e:	f7f1 faf1 	bl	8009564 <HAL_GetTick>
 8017f82:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8017f84:	68fb      	ldr	r3, [r7, #12]
 8017f86:	88fa      	ldrh	r2, [r7, #6]
 8017f88:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8017f8c:	68fb      	ldr	r3, [r7, #12]
 8017f8e:	88fa      	ldrh	r2, [r7, #6]
 8017f90:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8017f94:	68fb      	ldr	r3, [r7, #12]
 8017f96:	689b      	ldr	r3, [r3, #8]
 8017f98:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8017f9c:	d108      	bne.n	8017fb0 <HAL_UART_Transmit+0x6c>
 8017f9e:	68fb      	ldr	r3, [r7, #12]
 8017fa0:	691b      	ldr	r3, [r3, #16]
 8017fa2:	2b00      	cmp	r3, #0
 8017fa4:	d104      	bne.n	8017fb0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8017fa6:	2300      	movs	r3, #0
 8017fa8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8017faa:	68bb      	ldr	r3, [r7, #8]
 8017fac:	61bb      	str	r3, [r7, #24]
 8017fae:	e003      	b.n	8017fb8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8017fb0:	68bb      	ldr	r3, [r7, #8]
 8017fb2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8017fb4:	2300      	movs	r3, #0
 8017fb6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8017fb8:	e030      	b.n	801801c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8017fba:	683b      	ldr	r3, [r7, #0]
 8017fbc:	9300      	str	r3, [sp, #0]
 8017fbe:	697b      	ldr	r3, [r7, #20]
 8017fc0:	2200      	movs	r2, #0
 8017fc2:	2180      	movs	r1, #128	@ 0x80
 8017fc4:	68f8      	ldr	r0, [r7, #12]
 8017fc6:	f001 fcd9 	bl	801997c <UART_WaitOnFlagUntilTimeout>
 8017fca:	4603      	mov	r3, r0
 8017fcc:	2b00      	cmp	r3, #0
 8017fce:	d005      	beq.n	8017fdc <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8017fd0:	68fb      	ldr	r3, [r7, #12]
 8017fd2:	2220      	movs	r2, #32
 8017fd4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8017fd8:	2303      	movs	r3, #3
 8017fda:	e03d      	b.n	8018058 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8017fdc:	69fb      	ldr	r3, [r7, #28]
 8017fde:	2b00      	cmp	r3, #0
 8017fe0:	d10b      	bne.n	8017ffa <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8017fe2:	69bb      	ldr	r3, [r7, #24]
 8017fe4:	881b      	ldrh	r3, [r3, #0]
 8017fe6:	461a      	mov	r2, r3
 8017fe8:	68fb      	ldr	r3, [r7, #12]
 8017fea:	681b      	ldr	r3, [r3, #0]
 8017fec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8017ff0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8017ff2:	69bb      	ldr	r3, [r7, #24]
 8017ff4:	3302      	adds	r3, #2
 8017ff6:	61bb      	str	r3, [r7, #24]
 8017ff8:	e007      	b.n	801800a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8017ffa:	69fb      	ldr	r3, [r7, #28]
 8017ffc:	781a      	ldrb	r2, [r3, #0]
 8017ffe:	68fb      	ldr	r3, [r7, #12]
 8018000:	681b      	ldr	r3, [r3, #0]
 8018002:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8018004:	69fb      	ldr	r3, [r7, #28]
 8018006:	3301      	adds	r3, #1
 8018008:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 801800a:	68fb      	ldr	r3, [r7, #12]
 801800c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8018010:	b29b      	uxth	r3, r3
 8018012:	3b01      	subs	r3, #1
 8018014:	b29a      	uxth	r2, r3
 8018016:	68fb      	ldr	r3, [r7, #12]
 8018018:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 801801c:	68fb      	ldr	r3, [r7, #12]
 801801e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8018022:	b29b      	uxth	r3, r3
 8018024:	2b00      	cmp	r3, #0
 8018026:	d1c8      	bne.n	8017fba <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8018028:	683b      	ldr	r3, [r7, #0]
 801802a:	9300      	str	r3, [sp, #0]
 801802c:	697b      	ldr	r3, [r7, #20]
 801802e:	2200      	movs	r2, #0
 8018030:	2140      	movs	r1, #64	@ 0x40
 8018032:	68f8      	ldr	r0, [r7, #12]
 8018034:	f001 fca2 	bl	801997c <UART_WaitOnFlagUntilTimeout>
 8018038:	4603      	mov	r3, r0
 801803a:	2b00      	cmp	r3, #0
 801803c:	d005      	beq.n	801804a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 801803e:	68fb      	ldr	r3, [r7, #12]
 8018040:	2220      	movs	r2, #32
 8018042:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8018046:	2303      	movs	r3, #3
 8018048:	e006      	b.n	8018058 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 801804a:	68fb      	ldr	r3, [r7, #12]
 801804c:	2220      	movs	r2, #32
 801804e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8018052:	2300      	movs	r3, #0
 8018054:	e000      	b.n	8018058 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8018056:	2302      	movs	r3, #2
  }
}
 8018058:	4618      	mov	r0, r3
 801805a:	3720      	adds	r7, #32
 801805c:	46bd      	mov	sp, r7
 801805e:	bd80      	pop	{r7, pc}

08018060 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8018060:	b480      	push	{r7}
 8018062:	b091      	sub	sp, #68	@ 0x44
 8018064:	af00      	add	r7, sp, #0
 8018066:	60f8      	str	r0, [r7, #12]
 8018068:	60b9      	str	r1, [r7, #8]
 801806a:	4613      	mov	r3, r2
 801806c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801806e:	68fb      	ldr	r3, [r7, #12]
 8018070:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8018074:	2b20      	cmp	r3, #32
 8018076:	d178      	bne.n	801816a <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8018078:	68bb      	ldr	r3, [r7, #8]
 801807a:	2b00      	cmp	r3, #0
 801807c:	d002      	beq.n	8018084 <HAL_UART_Transmit_IT+0x24>
 801807e:	88fb      	ldrh	r3, [r7, #6]
 8018080:	2b00      	cmp	r3, #0
 8018082:	d101      	bne.n	8018088 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8018084:	2301      	movs	r3, #1
 8018086:	e071      	b.n	801816c <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 8018088:	68fb      	ldr	r3, [r7, #12]
 801808a:	68ba      	ldr	r2, [r7, #8]
 801808c:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 801808e:	68fb      	ldr	r3, [r7, #12]
 8018090:	88fa      	ldrh	r2, [r7, #6]
 8018092:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8018096:	68fb      	ldr	r3, [r7, #12]
 8018098:	88fa      	ldrh	r2, [r7, #6]
 801809a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    huart->TxISR       = NULL;
 801809e:	68fb      	ldr	r3, [r7, #12]
 80180a0:	2200      	movs	r2, #0
 80180a2:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80180a4:	68fb      	ldr	r3, [r7, #12]
 80180a6:	2200      	movs	r2, #0
 80180a8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80180ac:	68fb      	ldr	r3, [r7, #12]
 80180ae:	2221      	movs	r2, #33	@ 0x21
 80180b0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 80180b4:	68fb      	ldr	r3, [r7, #12]
 80180b6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80180b8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80180bc:	d12a      	bne.n	8018114 <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80180be:	68fb      	ldr	r3, [r7, #12]
 80180c0:	689b      	ldr	r3, [r3, #8]
 80180c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80180c6:	d107      	bne.n	80180d8 <HAL_UART_Transmit_IT+0x78>
 80180c8:	68fb      	ldr	r3, [r7, #12]
 80180ca:	691b      	ldr	r3, [r3, #16]
 80180cc:	2b00      	cmp	r3, #0
 80180ce:	d103      	bne.n	80180d8 <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 80180d0:	68fb      	ldr	r3, [r7, #12]
 80180d2:	4a29      	ldr	r2, [pc, #164]	@ (8018178 <HAL_UART_Transmit_IT+0x118>)
 80180d4:	679a      	str	r2, [r3, #120]	@ 0x78
 80180d6:	e002      	b.n	80180de <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 80180d8:	68fb      	ldr	r3, [r7, #12]
 80180da:	4a28      	ldr	r2, [pc, #160]	@ (801817c <HAL_UART_Transmit_IT+0x11c>)
 80180dc:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80180de:	68fb      	ldr	r3, [r7, #12]
 80180e0:	681b      	ldr	r3, [r3, #0]
 80180e2:	3308      	adds	r3, #8
 80180e4:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80180e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80180e8:	e853 3f00 	ldrex	r3, [r3]
 80180ec:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80180ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80180f0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80180f4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80180f6:	68fb      	ldr	r3, [r7, #12]
 80180f8:	681b      	ldr	r3, [r3, #0]
 80180fa:	3308      	adds	r3, #8
 80180fc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80180fe:	637a      	str	r2, [r7, #52]	@ 0x34
 8018100:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018102:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8018104:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8018106:	e841 2300 	strex	r3, r2, [r1]
 801810a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 801810c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801810e:	2b00      	cmp	r3, #0
 8018110:	d1e5      	bne.n	80180de <HAL_UART_Transmit_IT+0x7e>
 8018112:	e028      	b.n	8018166 <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8018114:	68fb      	ldr	r3, [r7, #12]
 8018116:	689b      	ldr	r3, [r3, #8]
 8018118:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801811c:	d107      	bne.n	801812e <HAL_UART_Transmit_IT+0xce>
 801811e:	68fb      	ldr	r3, [r7, #12]
 8018120:	691b      	ldr	r3, [r3, #16]
 8018122:	2b00      	cmp	r3, #0
 8018124:	d103      	bne.n	801812e <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8018126:	68fb      	ldr	r3, [r7, #12]
 8018128:	4a15      	ldr	r2, [pc, #84]	@ (8018180 <HAL_UART_Transmit_IT+0x120>)
 801812a:	679a      	str	r2, [r3, #120]	@ 0x78
 801812c:	e002      	b.n	8018134 <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 801812e:	68fb      	ldr	r3, [r7, #12]
 8018130:	4a14      	ldr	r2, [pc, #80]	@ (8018184 <HAL_UART_Transmit_IT+0x124>)
 8018132:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8018134:	68fb      	ldr	r3, [r7, #12]
 8018136:	681b      	ldr	r3, [r3, #0]
 8018138:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801813a:	697b      	ldr	r3, [r7, #20]
 801813c:	e853 3f00 	ldrex	r3, [r3]
 8018140:	613b      	str	r3, [r7, #16]
   return(result);
 8018142:	693b      	ldr	r3, [r7, #16]
 8018144:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8018148:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801814a:	68fb      	ldr	r3, [r7, #12]
 801814c:	681b      	ldr	r3, [r3, #0]
 801814e:	461a      	mov	r2, r3
 8018150:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018152:	623b      	str	r3, [r7, #32]
 8018154:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018156:	69f9      	ldr	r1, [r7, #28]
 8018158:	6a3a      	ldr	r2, [r7, #32]
 801815a:	e841 2300 	strex	r3, r2, [r1]
 801815e:	61bb      	str	r3, [r7, #24]
   return(result);
 8018160:	69bb      	ldr	r3, [r7, #24]
 8018162:	2b00      	cmp	r3, #0
 8018164:	d1e6      	bne.n	8018134 <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 8018166:	2300      	movs	r3, #0
 8018168:	e000      	b.n	801816c <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 801816a:	2302      	movs	r3, #2
  }
}
 801816c:	4618      	mov	r0, r3
 801816e:	3744      	adds	r7, #68	@ 0x44
 8018170:	46bd      	mov	sp, r7
 8018172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018176:	4770      	bx	lr
 8018178:	08019fe7 	.word	0x08019fe7
 801817c:	08019f07 	.word	0x08019f07
 8018180:	08019e45 	.word	0x08019e45
 8018184:	08019d8d 	.word	0x08019d8d

08018188 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8018188:	b580      	push	{r7, lr}
 801818a:	b08a      	sub	sp, #40	@ 0x28
 801818c:	af00      	add	r7, sp, #0
 801818e:	60f8      	str	r0, [r7, #12]
 8018190:	60b9      	str	r1, [r7, #8]
 8018192:	4613      	mov	r3, r2
 8018194:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8018196:	68fb      	ldr	r3, [r7, #12]
 8018198:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801819c:	2b20      	cmp	r3, #32
 801819e:	d137      	bne.n	8018210 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80181a0:	68bb      	ldr	r3, [r7, #8]
 80181a2:	2b00      	cmp	r3, #0
 80181a4:	d002      	beq.n	80181ac <HAL_UART_Receive_IT+0x24>
 80181a6:	88fb      	ldrh	r3, [r7, #6]
 80181a8:	2b00      	cmp	r3, #0
 80181aa:	d101      	bne.n	80181b0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80181ac:	2301      	movs	r3, #1
 80181ae:	e030      	b.n	8018212 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80181b0:	68fb      	ldr	r3, [r7, #12]
 80181b2:	2200      	movs	r2, #0
 80181b4:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80181b6:	68fb      	ldr	r3, [r7, #12]
 80181b8:	681b      	ldr	r3, [r3, #0]
 80181ba:	4a18      	ldr	r2, [pc, #96]	@ (801821c <HAL_UART_Receive_IT+0x94>)
 80181bc:	4293      	cmp	r3, r2
 80181be:	d01f      	beq.n	8018200 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80181c0:	68fb      	ldr	r3, [r7, #12]
 80181c2:	681b      	ldr	r3, [r3, #0]
 80181c4:	685b      	ldr	r3, [r3, #4]
 80181c6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80181ca:	2b00      	cmp	r3, #0
 80181cc:	d018      	beq.n	8018200 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80181ce:	68fb      	ldr	r3, [r7, #12]
 80181d0:	681b      	ldr	r3, [r3, #0]
 80181d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80181d4:	697b      	ldr	r3, [r7, #20]
 80181d6:	e853 3f00 	ldrex	r3, [r3]
 80181da:	613b      	str	r3, [r7, #16]
   return(result);
 80181dc:	693b      	ldr	r3, [r7, #16]
 80181de:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80181e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80181e4:	68fb      	ldr	r3, [r7, #12]
 80181e6:	681b      	ldr	r3, [r3, #0]
 80181e8:	461a      	mov	r2, r3
 80181ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80181ec:	623b      	str	r3, [r7, #32]
 80181ee:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80181f0:	69f9      	ldr	r1, [r7, #28]
 80181f2:	6a3a      	ldr	r2, [r7, #32]
 80181f4:	e841 2300 	strex	r3, r2, [r1]
 80181f8:	61bb      	str	r3, [r7, #24]
   return(result);
 80181fa:	69bb      	ldr	r3, [r7, #24]
 80181fc:	2b00      	cmp	r3, #0
 80181fe:	d1e6      	bne.n	80181ce <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8018200:	88fb      	ldrh	r3, [r7, #6]
 8018202:	461a      	mov	r2, r3
 8018204:	68b9      	ldr	r1, [r7, #8]
 8018206:	68f8      	ldr	r0, [r7, #12]
 8018208:	f001 fc26 	bl	8019a58 <UART_Start_Receive_IT>
 801820c:	4603      	mov	r3, r0
 801820e:	e000      	b.n	8018212 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8018210:	2302      	movs	r3, #2
  }
}
 8018212:	4618      	mov	r0, r3
 8018214:	3728      	adds	r7, #40	@ 0x28
 8018216:	46bd      	mov	sp, r7
 8018218:	bd80      	pop	{r7, pc}
 801821a:	bf00      	nop
 801821c:	58000c00 	.word	0x58000c00

08018220 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8018220:	b580      	push	{r7, lr}
 8018222:	b0ba      	sub	sp, #232	@ 0xe8
 8018224:	af00      	add	r7, sp, #0
 8018226:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8018228:	687b      	ldr	r3, [r7, #4]
 801822a:	681b      	ldr	r3, [r3, #0]
 801822c:	69db      	ldr	r3, [r3, #28]
 801822e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8018232:	687b      	ldr	r3, [r7, #4]
 8018234:	681b      	ldr	r3, [r3, #0]
 8018236:	681b      	ldr	r3, [r3, #0]
 8018238:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 801823c:	687b      	ldr	r3, [r7, #4]
 801823e:	681b      	ldr	r3, [r3, #0]
 8018240:	689b      	ldr	r3, [r3, #8]
 8018242:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8018246:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 801824a:	f640 030f 	movw	r3, #2063	@ 0x80f
 801824e:	4013      	ands	r3, r2
 8018250:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8018254:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8018258:	2b00      	cmp	r3, #0
 801825a:	d11b      	bne.n	8018294 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 801825c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8018260:	f003 0320 	and.w	r3, r3, #32
 8018264:	2b00      	cmp	r3, #0
 8018266:	d015      	beq.n	8018294 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8018268:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801826c:	f003 0320 	and.w	r3, r3, #32
 8018270:	2b00      	cmp	r3, #0
 8018272:	d105      	bne.n	8018280 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8018274:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8018278:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 801827c:	2b00      	cmp	r3, #0
 801827e:	d009      	beq.n	8018294 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8018280:	687b      	ldr	r3, [r7, #4]
 8018282:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8018284:	2b00      	cmp	r3, #0
 8018286:	f000 8393 	beq.w	80189b0 <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 801828a:	687b      	ldr	r3, [r7, #4]
 801828c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801828e:	6878      	ldr	r0, [r7, #4]
 8018290:	4798      	blx	r3
      }
      return;
 8018292:	e38d      	b.n	80189b0 <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8018294:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8018298:	2b00      	cmp	r3, #0
 801829a:	f000 8123 	beq.w	80184e4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 801829e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80182a2:	4b8d      	ldr	r3, [pc, #564]	@ (80184d8 <HAL_UART_IRQHandler+0x2b8>)
 80182a4:	4013      	ands	r3, r2
 80182a6:	2b00      	cmp	r3, #0
 80182a8:	d106      	bne.n	80182b8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80182aa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80182ae:	4b8b      	ldr	r3, [pc, #556]	@ (80184dc <HAL_UART_IRQHandler+0x2bc>)
 80182b0:	4013      	ands	r3, r2
 80182b2:	2b00      	cmp	r3, #0
 80182b4:	f000 8116 	beq.w	80184e4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80182b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80182bc:	f003 0301 	and.w	r3, r3, #1
 80182c0:	2b00      	cmp	r3, #0
 80182c2:	d011      	beq.n	80182e8 <HAL_UART_IRQHandler+0xc8>
 80182c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80182c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80182cc:	2b00      	cmp	r3, #0
 80182ce:	d00b      	beq.n	80182e8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80182d0:	687b      	ldr	r3, [r7, #4]
 80182d2:	681b      	ldr	r3, [r3, #0]
 80182d4:	2201      	movs	r2, #1
 80182d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80182d8:	687b      	ldr	r3, [r7, #4]
 80182da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80182de:	f043 0201 	orr.w	r2, r3, #1
 80182e2:	687b      	ldr	r3, [r7, #4]
 80182e4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80182e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80182ec:	f003 0302 	and.w	r3, r3, #2
 80182f0:	2b00      	cmp	r3, #0
 80182f2:	d011      	beq.n	8018318 <HAL_UART_IRQHandler+0xf8>
 80182f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80182f8:	f003 0301 	and.w	r3, r3, #1
 80182fc:	2b00      	cmp	r3, #0
 80182fe:	d00b      	beq.n	8018318 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8018300:	687b      	ldr	r3, [r7, #4]
 8018302:	681b      	ldr	r3, [r3, #0]
 8018304:	2202      	movs	r2, #2
 8018306:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8018308:	687b      	ldr	r3, [r7, #4]
 801830a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801830e:	f043 0204 	orr.w	r2, r3, #4
 8018312:	687b      	ldr	r3, [r7, #4]
 8018314:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8018318:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801831c:	f003 0304 	and.w	r3, r3, #4
 8018320:	2b00      	cmp	r3, #0
 8018322:	d011      	beq.n	8018348 <HAL_UART_IRQHandler+0x128>
 8018324:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8018328:	f003 0301 	and.w	r3, r3, #1
 801832c:	2b00      	cmp	r3, #0
 801832e:	d00b      	beq.n	8018348 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8018330:	687b      	ldr	r3, [r7, #4]
 8018332:	681b      	ldr	r3, [r3, #0]
 8018334:	2204      	movs	r2, #4
 8018336:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8018338:	687b      	ldr	r3, [r7, #4]
 801833a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801833e:	f043 0202 	orr.w	r2, r3, #2
 8018342:	687b      	ldr	r3, [r7, #4]
 8018344:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8018348:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801834c:	f003 0308 	and.w	r3, r3, #8
 8018350:	2b00      	cmp	r3, #0
 8018352:	d017      	beq.n	8018384 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8018354:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8018358:	f003 0320 	and.w	r3, r3, #32
 801835c:	2b00      	cmp	r3, #0
 801835e:	d105      	bne.n	801836c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8018360:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8018364:	4b5c      	ldr	r3, [pc, #368]	@ (80184d8 <HAL_UART_IRQHandler+0x2b8>)
 8018366:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8018368:	2b00      	cmp	r3, #0
 801836a:	d00b      	beq.n	8018384 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801836c:	687b      	ldr	r3, [r7, #4]
 801836e:	681b      	ldr	r3, [r3, #0]
 8018370:	2208      	movs	r2, #8
 8018372:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8018374:	687b      	ldr	r3, [r7, #4]
 8018376:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801837a:	f043 0208 	orr.w	r2, r3, #8
 801837e:	687b      	ldr	r3, [r7, #4]
 8018380:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8018384:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8018388:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801838c:	2b00      	cmp	r3, #0
 801838e:	d012      	beq.n	80183b6 <HAL_UART_IRQHandler+0x196>
 8018390:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8018394:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8018398:	2b00      	cmp	r3, #0
 801839a:	d00c      	beq.n	80183b6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801839c:	687b      	ldr	r3, [r7, #4]
 801839e:	681b      	ldr	r3, [r3, #0]
 80183a0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80183a4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80183a6:	687b      	ldr	r3, [r7, #4]
 80183a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80183ac:	f043 0220 	orr.w	r2, r3, #32
 80183b0:	687b      	ldr	r3, [r7, #4]
 80183b2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80183b6:	687b      	ldr	r3, [r7, #4]
 80183b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80183bc:	2b00      	cmp	r3, #0
 80183be:	f000 82f9 	beq.w	80189b4 <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80183c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80183c6:	f003 0320 	and.w	r3, r3, #32
 80183ca:	2b00      	cmp	r3, #0
 80183cc:	d013      	beq.n	80183f6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80183ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80183d2:	f003 0320 	and.w	r3, r3, #32
 80183d6:	2b00      	cmp	r3, #0
 80183d8:	d105      	bne.n	80183e6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80183da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80183de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80183e2:	2b00      	cmp	r3, #0
 80183e4:	d007      	beq.n	80183f6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80183e6:	687b      	ldr	r3, [r7, #4]
 80183e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80183ea:	2b00      	cmp	r3, #0
 80183ec:	d003      	beq.n	80183f6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80183ee:	687b      	ldr	r3, [r7, #4]
 80183f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80183f2:	6878      	ldr	r0, [r7, #4]
 80183f4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80183f6:	687b      	ldr	r3, [r7, #4]
 80183f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80183fc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8018400:	687b      	ldr	r3, [r7, #4]
 8018402:	681b      	ldr	r3, [r3, #0]
 8018404:	689b      	ldr	r3, [r3, #8]
 8018406:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801840a:	2b40      	cmp	r3, #64	@ 0x40
 801840c:	d005      	beq.n	801841a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 801840e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8018412:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8018416:	2b00      	cmp	r3, #0
 8018418:	d054      	beq.n	80184c4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 801841a:	6878      	ldr	r0, [r7, #4]
 801841c:	f001 fc3e 	bl	8019c9c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8018420:	687b      	ldr	r3, [r7, #4]
 8018422:	681b      	ldr	r3, [r3, #0]
 8018424:	689b      	ldr	r3, [r3, #8]
 8018426:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801842a:	2b40      	cmp	r3, #64	@ 0x40
 801842c:	d146      	bne.n	80184bc <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801842e:	687b      	ldr	r3, [r7, #4]
 8018430:	681b      	ldr	r3, [r3, #0]
 8018432:	3308      	adds	r3, #8
 8018434:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018438:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801843c:	e853 3f00 	ldrex	r3, [r3]
 8018440:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8018444:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8018448:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801844c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8018450:	687b      	ldr	r3, [r7, #4]
 8018452:	681b      	ldr	r3, [r3, #0]
 8018454:	3308      	adds	r3, #8
 8018456:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 801845a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 801845e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018462:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8018466:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 801846a:	e841 2300 	strex	r3, r2, [r1]
 801846e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8018472:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8018476:	2b00      	cmp	r3, #0
 8018478:	d1d9      	bne.n	801842e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 801847a:	687b      	ldr	r3, [r7, #4]
 801847c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8018480:	2b00      	cmp	r3, #0
 8018482:	d017      	beq.n	80184b4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8018484:	687b      	ldr	r3, [r7, #4]
 8018486:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801848a:	4a15      	ldr	r2, [pc, #84]	@ (80184e0 <HAL_UART_IRQHandler+0x2c0>)
 801848c:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 801848e:	687b      	ldr	r3, [r7, #4]
 8018490:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8018494:	4618      	mov	r0, r3
 8018496:	f7f4 fa7b 	bl	800c990 <HAL_DMA_Abort_IT>
 801849a:	4603      	mov	r3, r0
 801849c:	2b00      	cmp	r3, #0
 801849e:	d019      	beq.n	80184d4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80184a0:	687b      	ldr	r3, [r7, #4]
 80184a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80184a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80184a8:	687a      	ldr	r2, [r7, #4]
 80184aa:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80184ae:	4610      	mov	r0, r2
 80184b0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80184b2:	e00f      	b.n	80184d4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80184b4:	6878      	ldr	r0, [r7, #4]
 80184b6:	f000 fa93 	bl	80189e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80184ba:	e00b      	b.n	80184d4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80184bc:	6878      	ldr	r0, [r7, #4]
 80184be:	f000 fa8f 	bl	80189e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80184c2:	e007      	b.n	80184d4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80184c4:	6878      	ldr	r0, [r7, #4]
 80184c6:	f000 fa8b 	bl	80189e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80184ca:	687b      	ldr	r3, [r7, #4]
 80184cc:	2200      	movs	r2, #0
 80184ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80184d2:	e26f      	b.n	80189b4 <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80184d4:	bf00      	nop
    return;
 80184d6:	e26d      	b.n	80189b4 <HAL_UART_IRQHandler+0x794>
 80184d8:	10000001 	.word	0x10000001
 80184dc:	04000120 	.word	0x04000120
 80184e0:	08019d69 	.word	0x08019d69

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80184e4:	687b      	ldr	r3, [r7, #4]
 80184e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80184e8:	2b01      	cmp	r3, #1
 80184ea:	f040 8203 	bne.w	80188f4 <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80184ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80184f2:	f003 0310 	and.w	r3, r3, #16
 80184f6:	2b00      	cmp	r3, #0
 80184f8:	f000 81fc 	beq.w	80188f4 <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80184fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8018500:	f003 0310 	and.w	r3, r3, #16
 8018504:	2b00      	cmp	r3, #0
 8018506:	f000 81f5 	beq.w	80188f4 <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801850a:	687b      	ldr	r3, [r7, #4]
 801850c:	681b      	ldr	r3, [r3, #0]
 801850e:	2210      	movs	r2, #16
 8018510:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8018512:	687b      	ldr	r3, [r7, #4]
 8018514:	681b      	ldr	r3, [r3, #0]
 8018516:	689b      	ldr	r3, [r3, #8]
 8018518:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801851c:	2b40      	cmp	r3, #64	@ 0x40
 801851e:	f040 816d 	bne.w	80187fc <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8018522:	687b      	ldr	r3, [r7, #4]
 8018524:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8018528:	681b      	ldr	r3, [r3, #0]
 801852a:	4aa4      	ldr	r2, [pc, #656]	@ (80187bc <HAL_UART_IRQHandler+0x59c>)
 801852c:	4293      	cmp	r3, r2
 801852e:	d068      	beq.n	8018602 <HAL_UART_IRQHandler+0x3e2>
 8018530:	687b      	ldr	r3, [r7, #4]
 8018532:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8018536:	681b      	ldr	r3, [r3, #0]
 8018538:	4aa1      	ldr	r2, [pc, #644]	@ (80187c0 <HAL_UART_IRQHandler+0x5a0>)
 801853a:	4293      	cmp	r3, r2
 801853c:	d061      	beq.n	8018602 <HAL_UART_IRQHandler+0x3e2>
 801853e:	687b      	ldr	r3, [r7, #4]
 8018540:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8018544:	681b      	ldr	r3, [r3, #0]
 8018546:	4a9f      	ldr	r2, [pc, #636]	@ (80187c4 <HAL_UART_IRQHandler+0x5a4>)
 8018548:	4293      	cmp	r3, r2
 801854a:	d05a      	beq.n	8018602 <HAL_UART_IRQHandler+0x3e2>
 801854c:	687b      	ldr	r3, [r7, #4]
 801854e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8018552:	681b      	ldr	r3, [r3, #0]
 8018554:	4a9c      	ldr	r2, [pc, #624]	@ (80187c8 <HAL_UART_IRQHandler+0x5a8>)
 8018556:	4293      	cmp	r3, r2
 8018558:	d053      	beq.n	8018602 <HAL_UART_IRQHandler+0x3e2>
 801855a:	687b      	ldr	r3, [r7, #4]
 801855c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8018560:	681b      	ldr	r3, [r3, #0]
 8018562:	4a9a      	ldr	r2, [pc, #616]	@ (80187cc <HAL_UART_IRQHandler+0x5ac>)
 8018564:	4293      	cmp	r3, r2
 8018566:	d04c      	beq.n	8018602 <HAL_UART_IRQHandler+0x3e2>
 8018568:	687b      	ldr	r3, [r7, #4]
 801856a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801856e:	681b      	ldr	r3, [r3, #0]
 8018570:	4a97      	ldr	r2, [pc, #604]	@ (80187d0 <HAL_UART_IRQHandler+0x5b0>)
 8018572:	4293      	cmp	r3, r2
 8018574:	d045      	beq.n	8018602 <HAL_UART_IRQHandler+0x3e2>
 8018576:	687b      	ldr	r3, [r7, #4]
 8018578:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801857c:	681b      	ldr	r3, [r3, #0]
 801857e:	4a95      	ldr	r2, [pc, #596]	@ (80187d4 <HAL_UART_IRQHandler+0x5b4>)
 8018580:	4293      	cmp	r3, r2
 8018582:	d03e      	beq.n	8018602 <HAL_UART_IRQHandler+0x3e2>
 8018584:	687b      	ldr	r3, [r7, #4]
 8018586:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801858a:	681b      	ldr	r3, [r3, #0]
 801858c:	4a92      	ldr	r2, [pc, #584]	@ (80187d8 <HAL_UART_IRQHandler+0x5b8>)
 801858e:	4293      	cmp	r3, r2
 8018590:	d037      	beq.n	8018602 <HAL_UART_IRQHandler+0x3e2>
 8018592:	687b      	ldr	r3, [r7, #4]
 8018594:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8018598:	681b      	ldr	r3, [r3, #0]
 801859a:	4a90      	ldr	r2, [pc, #576]	@ (80187dc <HAL_UART_IRQHandler+0x5bc>)
 801859c:	4293      	cmp	r3, r2
 801859e:	d030      	beq.n	8018602 <HAL_UART_IRQHandler+0x3e2>
 80185a0:	687b      	ldr	r3, [r7, #4]
 80185a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80185a6:	681b      	ldr	r3, [r3, #0]
 80185a8:	4a8d      	ldr	r2, [pc, #564]	@ (80187e0 <HAL_UART_IRQHandler+0x5c0>)
 80185aa:	4293      	cmp	r3, r2
 80185ac:	d029      	beq.n	8018602 <HAL_UART_IRQHandler+0x3e2>
 80185ae:	687b      	ldr	r3, [r7, #4]
 80185b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80185b4:	681b      	ldr	r3, [r3, #0]
 80185b6:	4a8b      	ldr	r2, [pc, #556]	@ (80187e4 <HAL_UART_IRQHandler+0x5c4>)
 80185b8:	4293      	cmp	r3, r2
 80185ba:	d022      	beq.n	8018602 <HAL_UART_IRQHandler+0x3e2>
 80185bc:	687b      	ldr	r3, [r7, #4]
 80185be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80185c2:	681b      	ldr	r3, [r3, #0]
 80185c4:	4a88      	ldr	r2, [pc, #544]	@ (80187e8 <HAL_UART_IRQHandler+0x5c8>)
 80185c6:	4293      	cmp	r3, r2
 80185c8:	d01b      	beq.n	8018602 <HAL_UART_IRQHandler+0x3e2>
 80185ca:	687b      	ldr	r3, [r7, #4]
 80185cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80185d0:	681b      	ldr	r3, [r3, #0]
 80185d2:	4a86      	ldr	r2, [pc, #536]	@ (80187ec <HAL_UART_IRQHandler+0x5cc>)
 80185d4:	4293      	cmp	r3, r2
 80185d6:	d014      	beq.n	8018602 <HAL_UART_IRQHandler+0x3e2>
 80185d8:	687b      	ldr	r3, [r7, #4]
 80185da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80185de:	681b      	ldr	r3, [r3, #0]
 80185e0:	4a83      	ldr	r2, [pc, #524]	@ (80187f0 <HAL_UART_IRQHandler+0x5d0>)
 80185e2:	4293      	cmp	r3, r2
 80185e4:	d00d      	beq.n	8018602 <HAL_UART_IRQHandler+0x3e2>
 80185e6:	687b      	ldr	r3, [r7, #4]
 80185e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80185ec:	681b      	ldr	r3, [r3, #0]
 80185ee:	4a81      	ldr	r2, [pc, #516]	@ (80187f4 <HAL_UART_IRQHandler+0x5d4>)
 80185f0:	4293      	cmp	r3, r2
 80185f2:	d006      	beq.n	8018602 <HAL_UART_IRQHandler+0x3e2>
 80185f4:	687b      	ldr	r3, [r7, #4]
 80185f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80185fa:	681b      	ldr	r3, [r3, #0]
 80185fc:	4a7e      	ldr	r2, [pc, #504]	@ (80187f8 <HAL_UART_IRQHandler+0x5d8>)
 80185fe:	4293      	cmp	r3, r2
 8018600:	d106      	bne.n	8018610 <HAL_UART_IRQHandler+0x3f0>
 8018602:	687b      	ldr	r3, [r7, #4]
 8018604:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8018608:	681b      	ldr	r3, [r3, #0]
 801860a:	685b      	ldr	r3, [r3, #4]
 801860c:	b29b      	uxth	r3, r3
 801860e:	e005      	b.n	801861c <HAL_UART_IRQHandler+0x3fc>
 8018610:	687b      	ldr	r3, [r7, #4]
 8018612:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8018616:	681b      	ldr	r3, [r3, #0]
 8018618:	685b      	ldr	r3, [r3, #4]
 801861a:	b29b      	uxth	r3, r3
 801861c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8018620:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8018624:	2b00      	cmp	r3, #0
 8018626:	f000 80ad 	beq.w	8018784 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 801862a:	687b      	ldr	r3, [r7, #4]
 801862c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8018630:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8018634:	429a      	cmp	r2, r3
 8018636:	f080 80a5 	bcs.w	8018784 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 801863a:	687b      	ldr	r3, [r7, #4]
 801863c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8018640:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8018644:	687b      	ldr	r3, [r7, #4]
 8018646:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801864a:	69db      	ldr	r3, [r3, #28]
 801864c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8018650:	f000 8087 	beq.w	8018762 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8018654:	687b      	ldr	r3, [r7, #4]
 8018656:	681b      	ldr	r3, [r3, #0]
 8018658:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801865c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8018660:	e853 3f00 	ldrex	r3, [r3]
 8018664:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8018668:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 801866c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8018670:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8018674:	687b      	ldr	r3, [r7, #4]
 8018676:	681b      	ldr	r3, [r3, #0]
 8018678:	461a      	mov	r2, r3
 801867a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 801867e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8018682:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018686:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 801868a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 801868e:	e841 2300 	strex	r3, r2, [r1]
 8018692:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8018696:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801869a:	2b00      	cmp	r3, #0
 801869c:	d1da      	bne.n	8018654 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801869e:	687b      	ldr	r3, [r7, #4]
 80186a0:	681b      	ldr	r3, [r3, #0]
 80186a2:	3308      	adds	r3, #8
 80186a4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80186a6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80186a8:	e853 3f00 	ldrex	r3, [r3]
 80186ac:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80186ae:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80186b0:	f023 0301 	bic.w	r3, r3, #1
 80186b4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80186b8:	687b      	ldr	r3, [r7, #4]
 80186ba:	681b      	ldr	r3, [r3, #0]
 80186bc:	3308      	adds	r3, #8
 80186be:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80186c2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80186c6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80186c8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80186ca:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80186ce:	e841 2300 	strex	r3, r2, [r1]
 80186d2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80186d4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80186d6:	2b00      	cmp	r3, #0
 80186d8:	d1e1      	bne.n	801869e <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80186da:	687b      	ldr	r3, [r7, #4]
 80186dc:	681b      	ldr	r3, [r3, #0]
 80186de:	3308      	adds	r3, #8
 80186e0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80186e2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80186e4:	e853 3f00 	ldrex	r3, [r3]
 80186e8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80186ea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80186ec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80186f0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80186f4:	687b      	ldr	r3, [r7, #4]
 80186f6:	681b      	ldr	r3, [r3, #0]
 80186f8:	3308      	adds	r3, #8
 80186fa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80186fe:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8018700:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018702:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8018704:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8018706:	e841 2300 	strex	r3, r2, [r1]
 801870a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 801870c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801870e:	2b00      	cmp	r3, #0
 8018710:	d1e3      	bne.n	80186da <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8018712:	687b      	ldr	r3, [r7, #4]
 8018714:	2220      	movs	r2, #32
 8018716:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801871a:	687b      	ldr	r3, [r7, #4]
 801871c:	2200      	movs	r2, #0
 801871e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8018720:	687b      	ldr	r3, [r7, #4]
 8018722:	681b      	ldr	r3, [r3, #0]
 8018724:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018726:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018728:	e853 3f00 	ldrex	r3, [r3]
 801872c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 801872e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8018730:	f023 0310 	bic.w	r3, r3, #16
 8018734:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8018738:	687b      	ldr	r3, [r7, #4]
 801873a:	681b      	ldr	r3, [r3, #0]
 801873c:	461a      	mov	r2, r3
 801873e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8018742:	65bb      	str	r3, [r7, #88]	@ 0x58
 8018744:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018746:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8018748:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801874a:	e841 2300 	strex	r3, r2, [r1]
 801874e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8018750:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018752:	2b00      	cmp	r3, #0
 8018754:	d1e4      	bne.n	8018720 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8018756:	687b      	ldr	r3, [r7, #4]
 8018758:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801875c:	4618      	mov	r0, r3
 801875e:	f7f3 fdf9 	bl	800c354 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8018762:	687b      	ldr	r3, [r7, #4]
 8018764:	2202      	movs	r2, #2
 8018766:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8018768:	687b      	ldr	r3, [r7, #4]
 801876a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 801876e:	687b      	ldr	r3, [r7, #4]
 8018770:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8018774:	b29b      	uxth	r3, r3
 8018776:	1ad3      	subs	r3, r2, r3
 8018778:	b29b      	uxth	r3, r3
 801877a:	4619      	mov	r1, r3
 801877c:	6878      	ldr	r0, [r7, #4]
 801877e:	f000 f939 	bl	80189f4 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8018782:	e119      	b.n	80189b8 <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8018784:	687b      	ldr	r3, [r7, #4]
 8018786:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801878a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 801878e:	429a      	cmp	r2, r3
 8018790:	f040 8112 	bne.w	80189b8 <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8018794:	687b      	ldr	r3, [r7, #4]
 8018796:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801879a:	69db      	ldr	r3, [r3, #28]
 801879c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80187a0:	f040 810a 	bne.w	80189b8 <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80187a4:	687b      	ldr	r3, [r7, #4]
 80187a6:	2202      	movs	r2, #2
 80187a8:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80187aa:	687b      	ldr	r3, [r7, #4]
 80187ac:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80187b0:	4619      	mov	r1, r3
 80187b2:	6878      	ldr	r0, [r7, #4]
 80187b4:	f000 f91e 	bl	80189f4 <HAL_UARTEx_RxEventCallback>
      return;
 80187b8:	e0fe      	b.n	80189b8 <HAL_UART_IRQHandler+0x798>
 80187ba:	bf00      	nop
 80187bc:	40020010 	.word	0x40020010
 80187c0:	40020028 	.word	0x40020028
 80187c4:	40020040 	.word	0x40020040
 80187c8:	40020058 	.word	0x40020058
 80187cc:	40020070 	.word	0x40020070
 80187d0:	40020088 	.word	0x40020088
 80187d4:	400200a0 	.word	0x400200a0
 80187d8:	400200b8 	.word	0x400200b8
 80187dc:	40020410 	.word	0x40020410
 80187e0:	40020428 	.word	0x40020428
 80187e4:	40020440 	.word	0x40020440
 80187e8:	40020458 	.word	0x40020458
 80187ec:	40020470 	.word	0x40020470
 80187f0:	40020488 	.word	0x40020488
 80187f4:	400204a0 	.word	0x400204a0
 80187f8:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80187fc:	687b      	ldr	r3, [r7, #4]
 80187fe:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8018802:	687b      	ldr	r3, [r7, #4]
 8018804:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8018808:	b29b      	uxth	r3, r3
 801880a:	1ad3      	subs	r3, r2, r3
 801880c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8018810:	687b      	ldr	r3, [r7, #4]
 8018812:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8018816:	b29b      	uxth	r3, r3
 8018818:	2b00      	cmp	r3, #0
 801881a:	f000 80cf 	beq.w	80189bc <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 801881e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8018822:	2b00      	cmp	r3, #0
 8018824:	f000 80ca 	beq.w	80189bc <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8018828:	687b      	ldr	r3, [r7, #4]
 801882a:	681b      	ldr	r3, [r3, #0]
 801882c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801882e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018830:	e853 3f00 	ldrex	r3, [r3]
 8018834:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8018836:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018838:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801883c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8018840:	687b      	ldr	r3, [r7, #4]
 8018842:	681b      	ldr	r3, [r3, #0]
 8018844:	461a      	mov	r2, r3
 8018846:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 801884a:	647b      	str	r3, [r7, #68]	@ 0x44
 801884c:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801884e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8018850:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8018852:	e841 2300 	strex	r3, r2, [r1]
 8018856:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8018858:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801885a:	2b00      	cmp	r3, #0
 801885c:	d1e4      	bne.n	8018828 <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801885e:	687b      	ldr	r3, [r7, #4]
 8018860:	681b      	ldr	r3, [r3, #0]
 8018862:	3308      	adds	r3, #8
 8018864:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018868:	e853 3f00 	ldrex	r3, [r3]
 801886c:	623b      	str	r3, [r7, #32]
   return(result);
 801886e:	6a3a      	ldr	r2, [r7, #32]
 8018870:	4b55      	ldr	r3, [pc, #340]	@ (80189c8 <HAL_UART_IRQHandler+0x7a8>)
 8018872:	4013      	ands	r3, r2
 8018874:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8018878:	687b      	ldr	r3, [r7, #4]
 801887a:	681b      	ldr	r3, [r3, #0]
 801887c:	3308      	adds	r3, #8
 801887e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8018882:	633a      	str	r2, [r7, #48]	@ 0x30
 8018884:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018886:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8018888:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801888a:	e841 2300 	strex	r3, r2, [r1]
 801888e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8018890:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018892:	2b00      	cmp	r3, #0
 8018894:	d1e3      	bne.n	801885e <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8018896:	687b      	ldr	r3, [r7, #4]
 8018898:	2220      	movs	r2, #32
 801889a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801889e:	687b      	ldr	r3, [r7, #4]
 80188a0:	2200      	movs	r2, #0
 80188a2:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80188a4:	687b      	ldr	r3, [r7, #4]
 80188a6:	2200      	movs	r2, #0
 80188a8:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80188aa:	687b      	ldr	r3, [r7, #4]
 80188ac:	681b      	ldr	r3, [r3, #0]
 80188ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80188b0:	693b      	ldr	r3, [r7, #16]
 80188b2:	e853 3f00 	ldrex	r3, [r3]
 80188b6:	60fb      	str	r3, [r7, #12]
   return(result);
 80188b8:	68fb      	ldr	r3, [r7, #12]
 80188ba:	f023 0310 	bic.w	r3, r3, #16
 80188be:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80188c2:	687b      	ldr	r3, [r7, #4]
 80188c4:	681b      	ldr	r3, [r3, #0]
 80188c6:	461a      	mov	r2, r3
 80188c8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80188cc:	61fb      	str	r3, [r7, #28]
 80188ce:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80188d0:	69b9      	ldr	r1, [r7, #24]
 80188d2:	69fa      	ldr	r2, [r7, #28]
 80188d4:	e841 2300 	strex	r3, r2, [r1]
 80188d8:	617b      	str	r3, [r7, #20]
   return(result);
 80188da:	697b      	ldr	r3, [r7, #20]
 80188dc:	2b00      	cmp	r3, #0
 80188de:	d1e4      	bne.n	80188aa <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80188e0:	687b      	ldr	r3, [r7, #4]
 80188e2:	2202      	movs	r2, #2
 80188e4:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80188e6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80188ea:	4619      	mov	r1, r3
 80188ec:	6878      	ldr	r0, [r7, #4]
 80188ee:	f000 f881 	bl	80189f4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80188f2:	e063      	b.n	80189bc <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80188f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80188f8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80188fc:	2b00      	cmp	r3, #0
 80188fe:	d00e      	beq.n	801891e <HAL_UART_IRQHandler+0x6fe>
 8018900:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8018904:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8018908:	2b00      	cmp	r3, #0
 801890a:	d008      	beq.n	801891e <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 801890c:	687b      	ldr	r3, [r7, #4]
 801890e:	681b      	ldr	r3, [r3, #0]
 8018910:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8018914:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8018916:	6878      	ldr	r0, [r7, #4]
 8018918:	f002 f926 	bl	801ab68 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801891c:	e051      	b.n	80189c2 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 801891e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8018922:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8018926:	2b00      	cmp	r3, #0
 8018928:	d014      	beq.n	8018954 <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 801892a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801892e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8018932:	2b00      	cmp	r3, #0
 8018934:	d105      	bne.n	8018942 <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8018936:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801893a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801893e:	2b00      	cmp	r3, #0
 8018940:	d008      	beq.n	8018954 <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 8018942:	687b      	ldr	r3, [r7, #4]
 8018944:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8018946:	2b00      	cmp	r3, #0
 8018948:	d03a      	beq.n	80189c0 <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 801894a:	687b      	ldr	r3, [r7, #4]
 801894c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801894e:	6878      	ldr	r0, [r7, #4]
 8018950:	4798      	blx	r3
    }
    return;
 8018952:	e035      	b.n	80189c0 <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8018954:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8018958:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801895c:	2b00      	cmp	r3, #0
 801895e:	d009      	beq.n	8018974 <HAL_UART_IRQHandler+0x754>
 8018960:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8018964:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8018968:	2b00      	cmp	r3, #0
 801896a:	d003      	beq.n	8018974 <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 801896c:	6878      	ldr	r0, [r7, #4]
 801896e:	f001 fbaf 	bl	801a0d0 <UART_EndTransmit_IT>
    return;
 8018972:	e026      	b.n	80189c2 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8018974:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8018978:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801897c:	2b00      	cmp	r3, #0
 801897e:	d009      	beq.n	8018994 <HAL_UART_IRQHandler+0x774>
 8018980:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8018984:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8018988:	2b00      	cmp	r3, #0
 801898a:	d003      	beq.n	8018994 <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 801898c:	6878      	ldr	r0, [r7, #4]
 801898e:	f002 f8ff 	bl	801ab90 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8018992:	e016      	b.n	80189c2 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8018994:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8018998:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 801899c:	2b00      	cmp	r3, #0
 801899e:	d010      	beq.n	80189c2 <HAL_UART_IRQHandler+0x7a2>
 80189a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80189a4:	2b00      	cmp	r3, #0
 80189a6:	da0c      	bge.n	80189c2 <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80189a8:	6878      	ldr	r0, [r7, #4]
 80189aa:	f002 f8e7 	bl	801ab7c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80189ae:	e008      	b.n	80189c2 <HAL_UART_IRQHandler+0x7a2>
      return;
 80189b0:	bf00      	nop
 80189b2:	e006      	b.n	80189c2 <HAL_UART_IRQHandler+0x7a2>
    return;
 80189b4:	bf00      	nop
 80189b6:	e004      	b.n	80189c2 <HAL_UART_IRQHandler+0x7a2>
      return;
 80189b8:	bf00      	nop
 80189ba:	e002      	b.n	80189c2 <HAL_UART_IRQHandler+0x7a2>
      return;
 80189bc:	bf00      	nop
 80189be:	e000      	b.n	80189c2 <HAL_UART_IRQHandler+0x7a2>
    return;
 80189c0:	bf00      	nop
  }
}
 80189c2:	37e8      	adds	r7, #232	@ 0xe8
 80189c4:	46bd      	mov	sp, r7
 80189c6:	bd80      	pop	{r7, pc}
 80189c8:	effffffe 	.word	0xeffffffe

080189cc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80189cc:	b480      	push	{r7}
 80189ce:	b083      	sub	sp, #12
 80189d0:	af00      	add	r7, sp, #0
 80189d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80189d4:	bf00      	nop
 80189d6:	370c      	adds	r7, #12
 80189d8:	46bd      	mov	sp, r7
 80189da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80189de:	4770      	bx	lr

080189e0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80189e0:	b480      	push	{r7}
 80189e2:	b083      	sub	sp, #12
 80189e4:	af00      	add	r7, sp, #0
 80189e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80189e8:	bf00      	nop
 80189ea:	370c      	adds	r7, #12
 80189ec:	46bd      	mov	sp, r7
 80189ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80189f2:	4770      	bx	lr

080189f4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80189f4:	b480      	push	{r7}
 80189f6:	b083      	sub	sp, #12
 80189f8:	af00      	add	r7, sp, #0
 80189fa:	6078      	str	r0, [r7, #4]
 80189fc:	460b      	mov	r3, r1
 80189fe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8018a00:	bf00      	nop
 8018a02:	370c      	adds	r7, #12
 8018a04:	46bd      	mov	sp, r7
 8018a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a0a:	4770      	bx	lr

08018a0c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8018a0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8018a10:	b092      	sub	sp, #72	@ 0x48
 8018a12:	af00      	add	r7, sp, #0
 8018a14:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8018a16:	2300      	movs	r3, #0
 8018a18:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8018a1c:	697b      	ldr	r3, [r7, #20]
 8018a1e:	689a      	ldr	r2, [r3, #8]
 8018a20:	697b      	ldr	r3, [r7, #20]
 8018a22:	691b      	ldr	r3, [r3, #16]
 8018a24:	431a      	orrs	r2, r3
 8018a26:	697b      	ldr	r3, [r7, #20]
 8018a28:	695b      	ldr	r3, [r3, #20]
 8018a2a:	431a      	orrs	r2, r3
 8018a2c:	697b      	ldr	r3, [r7, #20]
 8018a2e:	69db      	ldr	r3, [r3, #28]
 8018a30:	4313      	orrs	r3, r2
 8018a32:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8018a34:	697b      	ldr	r3, [r7, #20]
 8018a36:	681b      	ldr	r3, [r3, #0]
 8018a38:	681a      	ldr	r2, [r3, #0]
 8018a3a:	4bbe      	ldr	r3, [pc, #760]	@ (8018d34 <UART_SetConfig+0x328>)
 8018a3c:	4013      	ands	r3, r2
 8018a3e:	697a      	ldr	r2, [r7, #20]
 8018a40:	6812      	ldr	r2, [r2, #0]
 8018a42:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8018a44:	430b      	orrs	r3, r1
 8018a46:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8018a48:	697b      	ldr	r3, [r7, #20]
 8018a4a:	681b      	ldr	r3, [r3, #0]
 8018a4c:	685b      	ldr	r3, [r3, #4]
 8018a4e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8018a52:	697b      	ldr	r3, [r7, #20]
 8018a54:	68da      	ldr	r2, [r3, #12]
 8018a56:	697b      	ldr	r3, [r7, #20]
 8018a58:	681b      	ldr	r3, [r3, #0]
 8018a5a:	430a      	orrs	r2, r1
 8018a5c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8018a5e:	697b      	ldr	r3, [r7, #20]
 8018a60:	699b      	ldr	r3, [r3, #24]
 8018a62:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8018a64:	697b      	ldr	r3, [r7, #20]
 8018a66:	681b      	ldr	r3, [r3, #0]
 8018a68:	4ab3      	ldr	r2, [pc, #716]	@ (8018d38 <UART_SetConfig+0x32c>)
 8018a6a:	4293      	cmp	r3, r2
 8018a6c:	d004      	beq.n	8018a78 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8018a6e:	697b      	ldr	r3, [r7, #20]
 8018a70:	6a1b      	ldr	r3, [r3, #32]
 8018a72:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8018a74:	4313      	orrs	r3, r2
 8018a76:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8018a78:	697b      	ldr	r3, [r7, #20]
 8018a7a:	681b      	ldr	r3, [r3, #0]
 8018a7c:	689a      	ldr	r2, [r3, #8]
 8018a7e:	4baf      	ldr	r3, [pc, #700]	@ (8018d3c <UART_SetConfig+0x330>)
 8018a80:	4013      	ands	r3, r2
 8018a82:	697a      	ldr	r2, [r7, #20]
 8018a84:	6812      	ldr	r2, [r2, #0]
 8018a86:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8018a88:	430b      	orrs	r3, r1
 8018a8a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8018a8c:	697b      	ldr	r3, [r7, #20]
 8018a8e:	681b      	ldr	r3, [r3, #0]
 8018a90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018a92:	f023 010f 	bic.w	r1, r3, #15
 8018a96:	697b      	ldr	r3, [r7, #20]
 8018a98:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8018a9a:	697b      	ldr	r3, [r7, #20]
 8018a9c:	681b      	ldr	r3, [r3, #0]
 8018a9e:	430a      	orrs	r2, r1
 8018aa0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8018aa2:	697b      	ldr	r3, [r7, #20]
 8018aa4:	681b      	ldr	r3, [r3, #0]
 8018aa6:	4aa6      	ldr	r2, [pc, #664]	@ (8018d40 <UART_SetConfig+0x334>)
 8018aa8:	4293      	cmp	r3, r2
 8018aaa:	d177      	bne.n	8018b9c <UART_SetConfig+0x190>
 8018aac:	4ba5      	ldr	r3, [pc, #660]	@ (8018d44 <UART_SetConfig+0x338>)
 8018aae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018ab0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8018ab4:	2b28      	cmp	r3, #40	@ 0x28
 8018ab6:	d86d      	bhi.n	8018b94 <UART_SetConfig+0x188>
 8018ab8:	a201      	add	r2, pc, #4	@ (adr r2, 8018ac0 <UART_SetConfig+0xb4>)
 8018aba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018abe:	bf00      	nop
 8018ac0:	08018b65 	.word	0x08018b65
 8018ac4:	08018b95 	.word	0x08018b95
 8018ac8:	08018b95 	.word	0x08018b95
 8018acc:	08018b95 	.word	0x08018b95
 8018ad0:	08018b95 	.word	0x08018b95
 8018ad4:	08018b95 	.word	0x08018b95
 8018ad8:	08018b95 	.word	0x08018b95
 8018adc:	08018b95 	.word	0x08018b95
 8018ae0:	08018b6d 	.word	0x08018b6d
 8018ae4:	08018b95 	.word	0x08018b95
 8018ae8:	08018b95 	.word	0x08018b95
 8018aec:	08018b95 	.word	0x08018b95
 8018af0:	08018b95 	.word	0x08018b95
 8018af4:	08018b95 	.word	0x08018b95
 8018af8:	08018b95 	.word	0x08018b95
 8018afc:	08018b95 	.word	0x08018b95
 8018b00:	08018b75 	.word	0x08018b75
 8018b04:	08018b95 	.word	0x08018b95
 8018b08:	08018b95 	.word	0x08018b95
 8018b0c:	08018b95 	.word	0x08018b95
 8018b10:	08018b95 	.word	0x08018b95
 8018b14:	08018b95 	.word	0x08018b95
 8018b18:	08018b95 	.word	0x08018b95
 8018b1c:	08018b95 	.word	0x08018b95
 8018b20:	08018b7d 	.word	0x08018b7d
 8018b24:	08018b95 	.word	0x08018b95
 8018b28:	08018b95 	.word	0x08018b95
 8018b2c:	08018b95 	.word	0x08018b95
 8018b30:	08018b95 	.word	0x08018b95
 8018b34:	08018b95 	.word	0x08018b95
 8018b38:	08018b95 	.word	0x08018b95
 8018b3c:	08018b95 	.word	0x08018b95
 8018b40:	08018b85 	.word	0x08018b85
 8018b44:	08018b95 	.word	0x08018b95
 8018b48:	08018b95 	.word	0x08018b95
 8018b4c:	08018b95 	.word	0x08018b95
 8018b50:	08018b95 	.word	0x08018b95
 8018b54:	08018b95 	.word	0x08018b95
 8018b58:	08018b95 	.word	0x08018b95
 8018b5c:	08018b95 	.word	0x08018b95
 8018b60:	08018b8d 	.word	0x08018b8d
 8018b64:	2301      	movs	r3, #1
 8018b66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018b6a:	e326      	b.n	80191ba <UART_SetConfig+0x7ae>
 8018b6c:	2304      	movs	r3, #4
 8018b6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018b72:	e322      	b.n	80191ba <UART_SetConfig+0x7ae>
 8018b74:	2308      	movs	r3, #8
 8018b76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018b7a:	e31e      	b.n	80191ba <UART_SetConfig+0x7ae>
 8018b7c:	2310      	movs	r3, #16
 8018b7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018b82:	e31a      	b.n	80191ba <UART_SetConfig+0x7ae>
 8018b84:	2320      	movs	r3, #32
 8018b86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018b8a:	e316      	b.n	80191ba <UART_SetConfig+0x7ae>
 8018b8c:	2340      	movs	r3, #64	@ 0x40
 8018b8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018b92:	e312      	b.n	80191ba <UART_SetConfig+0x7ae>
 8018b94:	2380      	movs	r3, #128	@ 0x80
 8018b96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018b9a:	e30e      	b.n	80191ba <UART_SetConfig+0x7ae>
 8018b9c:	697b      	ldr	r3, [r7, #20]
 8018b9e:	681b      	ldr	r3, [r3, #0]
 8018ba0:	4a69      	ldr	r2, [pc, #420]	@ (8018d48 <UART_SetConfig+0x33c>)
 8018ba2:	4293      	cmp	r3, r2
 8018ba4:	d130      	bne.n	8018c08 <UART_SetConfig+0x1fc>
 8018ba6:	4b67      	ldr	r3, [pc, #412]	@ (8018d44 <UART_SetConfig+0x338>)
 8018ba8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018baa:	f003 0307 	and.w	r3, r3, #7
 8018bae:	2b05      	cmp	r3, #5
 8018bb0:	d826      	bhi.n	8018c00 <UART_SetConfig+0x1f4>
 8018bb2:	a201      	add	r2, pc, #4	@ (adr r2, 8018bb8 <UART_SetConfig+0x1ac>)
 8018bb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018bb8:	08018bd1 	.word	0x08018bd1
 8018bbc:	08018bd9 	.word	0x08018bd9
 8018bc0:	08018be1 	.word	0x08018be1
 8018bc4:	08018be9 	.word	0x08018be9
 8018bc8:	08018bf1 	.word	0x08018bf1
 8018bcc:	08018bf9 	.word	0x08018bf9
 8018bd0:	2300      	movs	r3, #0
 8018bd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018bd6:	e2f0      	b.n	80191ba <UART_SetConfig+0x7ae>
 8018bd8:	2304      	movs	r3, #4
 8018bda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018bde:	e2ec      	b.n	80191ba <UART_SetConfig+0x7ae>
 8018be0:	2308      	movs	r3, #8
 8018be2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018be6:	e2e8      	b.n	80191ba <UART_SetConfig+0x7ae>
 8018be8:	2310      	movs	r3, #16
 8018bea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018bee:	e2e4      	b.n	80191ba <UART_SetConfig+0x7ae>
 8018bf0:	2320      	movs	r3, #32
 8018bf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018bf6:	e2e0      	b.n	80191ba <UART_SetConfig+0x7ae>
 8018bf8:	2340      	movs	r3, #64	@ 0x40
 8018bfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018bfe:	e2dc      	b.n	80191ba <UART_SetConfig+0x7ae>
 8018c00:	2380      	movs	r3, #128	@ 0x80
 8018c02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018c06:	e2d8      	b.n	80191ba <UART_SetConfig+0x7ae>
 8018c08:	697b      	ldr	r3, [r7, #20]
 8018c0a:	681b      	ldr	r3, [r3, #0]
 8018c0c:	4a4f      	ldr	r2, [pc, #316]	@ (8018d4c <UART_SetConfig+0x340>)
 8018c0e:	4293      	cmp	r3, r2
 8018c10:	d130      	bne.n	8018c74 <UART_SetConfig+0x268>
 8018c12:	4b4c      	ldr	r3, [pc, #304]	@ (8018d44 <UART_SetConfig+0x338>)
 8018c14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018c16:	f003 0307 	and.w	r3, r3, #7
 8018c1a:	2b05      	cmp	r3, #5
 8018c1c:	d826      	bhi.n	8018c6c <UART_SetConfig+0x260>
 8018c1e:	a201      	add	r2, pc, #4	@ (adr r2, 8018c24 <UART_SetConfig+0x218>)
 8018c20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018c24:	08018c3d 	.word	0x08018c3d
 8018c28:	08018c45 	.word	0x08018c45
 8018c2c:	08018c4d 	.word	0x08018c4d
 8018c30:	08018c55 	.word	0x08018c55
 8018c34:	08018c5d 	.word	0x08018c5d
 8018c38:	08018c65 	.word	0x08018c65
 8018c3c:	2300      	movs	r3, #0
 8018c3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018c42:	e2ba      	b.n	80191ba <UART_SetConfig+0x7ae>
 8018c44:	2304      	movs	r3, #4
 8018c46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018c4a:	e2b6      	b.n	80191ba <UART_SetConfig+0x7ae>
 8018c4c:	2308      	movs	r3, #8
 8018c4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018c52:	e2b2      	b.n	80191ba <UART_SetConfig+0x7ae>
 8018c54:	2310      	movs	r3, #16
 8018c56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018c5a:	e2ae      	b.n	80191ba <UART_SetConfig+0x7ae>
 8018c5c:	2320      	movs	r3, #32
 8018c5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018c62:	e2aa      	b.n	80191ba <UART_SetConfig+0x7ae>
 8018c64:	2340      	movs	r3, #64	@ 0x40
 8018c66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018c6a:	e2a6      	b.n	80191ba <UART_SetConfig+0x7ae>
 8018c6c:	2380      	movs	r3, #128	@ 0x80
 8018c6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018c72:	e2a2      	b.n	80191ba <UART_SetConfig+0x7ae>
 8018c74:	697b      	ldr	r3, [r7, #20]
 8018c76:	681b      	ldr	r3, [r3, #0]
 8018c78:	4a35      	ldr	r2, [pc, #212]	@ (8018d50 <UART_SetConfig+0x344>)
 8018c7a:	4293      	cmp	r3, r2
 8018c7c:	d130      	bne.n	8018ce0 <UART_SetConfig+0x2d4>
 8018c7e:	4b31      	ldr	r3, [pc, #196]	@ (8018d44 <UART_SetConfig+0x338>)
 8018c80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018c82:	f003 0307 	and.w	r3, r3, #7
 8018c86:	2b05      	cmp	r3, #5
 8018c88:	d826      	bhi.n	8018cd8 <UART_SetConfig+0x2cc>
 8018c8a:	a201      	add	r2, pc, #4	@ (adr r2, 8018c90 <UART_SetConfig+0x284>)
 8018c8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018c90:	08018ca9 	.word	0x08018ca9
 8018c94:	08018cb1 	.word	0x08018cb1
 8018c98:	08018cb9 	.word	0x08018cb9
 8018c9c:	08018cc1 	.word	0x08018cc1
 8018ca0:	08018cc9 	.word	0x08018cc9
 8018ca4:	08018cd1 	.word	0x08018cd1
 8018ca8:	2300      	movs	r3, #0
 8018caa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018cae:	e284      	b.n	80191ba <UART_SetConfig+0x7ae>
 8018cb0:	2304      	movs	r3, #4
 8018cb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018cb6:	e280      	b.n	80191ba <UART_SetConfig+0x7ae>
 8018cb8:	2308      	movs	r3, #8
 8018cba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018cbe:	e27c      	b.n	80191ba <UART_SetConfig+0x7ae>
 8018cc0:	2310      	movs	r3, #16
 8018cc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018cc6:	e278      	b.n	80191ba <UART_SetConfig+0x7ae>
 8018cc8:	2320      	movs	r3, #32
 8018cca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018cce:	e274      	b.n	80191ba <UART_SetConfig+0x7ae>
 8018cd0:	2340      	movs	r3, #64	@ 0x40
 8018cd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018cd6:	e270      	b.n	80191ba <UART_SetConfig+0x7ae>
 8018cd8:	2380      	movs	r3, #128	@ 0x80
 8018cda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018cde:	e26c      	b.n	80191ba <UART_SetConfig+0x7ae>
 8018ce0:	697b      	ldr	r3, [r7, #20]
 8018ce2:	681b      	ldr	r3, [r3, #0]
 8018ce4:	4a1b      	ldr	r2, [pc, #108]	@ (8018d54 <UART_SetConfig+0x348>)
 8018ce6:	4293      	cmp	r3, r2
 8018ce8:	d142      	bne.n	8018d70 <UART_SetConfig+0x364>
 8018cea:	4b16      	ldr	r3, [pc, #88]	@ (8018d44 <UART_SetConfig+0x338>)
 8018cec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018cee:	f003 0307 	and.w	r3, r3, #7
 8018cf2:	2b05      	cmp	r3, #5
 8018cf4:	d838      	bhi.n	8018d68 <UART_SetConfig+0x35c>
 8018cf6:	a201      	add	r2, pc, #4	@ (adr r2, 8018cfc <UART_SetConfig+0x2f0>)
 8018cf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018cfc:	08018d15 	.word	0x08018d15
 8018d00:	08018d1d 	.word	0x08018d1d
 8018d04:	08018d25 	.word	0x08018d25
 8018d08:	08018d2d 	.word	0x08018d2d
 8018d0c:	08018d59 	.word	0x08018d59
 8018d10:	08018d61 	.word	0x08018d61
 8018d14:	2300      	movs	r3, #0
 8018d16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018d1a:	e24e      	b.n	80191ba <UART_SetConfig+0x7ae>
 8018d1c:	2304      	movs	r3, #4
 8018d1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018d22:	e24a      	b.n	80191ba <UART_SetConfig+0x7ae>
 8018d24:	2308      	movs	r3, #8
 8018d26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018d2a:	e246      	b.n	80191ba <UART_SetConfig+0x7ae>
 8018d2c:	2310      	movs	r3, #16
 8018d2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018d32:	e242      	b.n	80191ba <UART_SetConfig+0x7ae>
 8018d34:	cfff69f3 	.word	0xcfff69f3
 8018d38:	58000c00 	.word	0x58000c00
 8018d3c:	11fff4ff 	.word	0x11fff4ff
 8018d40:	40011000 	.word	0x40011000
 8018d44:	58024400 	.word	0x58024400
 8018d48:	40004400 	.word	0x40004400
 8018d4c:	40004800 	.word	0x40004800
 8018d50:	40004c00 	.word	0x40004c00
 8018d54:	40005000 	.word	0x40005000
 8018d58:	2320      	movs	r3, #32
 8018d5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018d5e:	e22c      	b.n	80191ba <UART_SetConfig+0x7ae>
 8018d60:	2340      	movs	r3, #64	@ 0x40
 8018d62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018d66:	e228      	b.n	80191ba <UART_SetConfig+0x7ae>
 8018d68:	2380      	movs	r3, #128	@ 0x80
 8018d6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018d6e:	e224      	b.n	80191ba <UART_SetConfig+0x7ae>
 8018d70:	697b      	ldr	r3, [r7, #20]
 8018d72:	681b      	ldr	r3, [r3, #0]
 8018d74:	4ab1      	ldr	r2, [pc, #708]	@ (801903c <UART_SetConfig+0x630>)
 8018d76:	4293      	cmp	r3, r2
 8018d78:	d176      	bne.n	8018e68 <UART_SetConfig+0x45c>
 8018d7a:	4bb1      	ldr	r3, [pc, #708]	@ (8019040 <UART_SetConfig+0x634>)
 8018d7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018d7e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8018d82:	2b28      	cmp	r3, #40	@ 0x28
 8018d84:	d86c      	bhi.n	8018e60 <UART_SetConfig+0x454>
 8018d86:	a201      	add	r2, pc, #4	@ (adr r2, 8018d8c <UART_SetConfig+0x380>)
 8018d88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018d8c:	08018e31 	.word	0x08018e31
 8018d90:	08018e61 	.word	0x08018e61
 8018d94:	08018e61 	.word	0x08018e61
 8018d98:	08018e61 	.word	0x08018e61
 8018d9c:	08018e61 	.word	0x08018e61
 8018da0:	08018e61 	.word	0x08018e61
 8018da4:	08018e61 	.word	0x08018e61
 8018da8:	08018e61 	.word	0x08018e61
 8018dac:	08018e39 	.word	0x08018e39
 8018db0:	08018e61 	.word	0x08018e61
 8018db4:	08018e61 	.word	0x08018e61
 8018db8:	08018e61 	.word	0x08018e61
 8018dbc:	08018e61 	.word	0x08018e61
 8018dc0:	08018e61 	.word	0x08018e61
 8018dc4:	08018e61 	.word	0x08018e61
 8018dc8:	08018e61 	.word	0x08018e61
 8018dcc:	08018e41 	.word	0x08018e41
 8018dd0:	08018e61 	.word	0x08018e61
 8018dd4:	08018e61 	.word	0x08018e61
 8018dd8:	08018e61 	.word	0x08018e61
 8018ddc:	08018e61 	.word	0x08018e61
 8018de0:	08018e61 	.word	0x08018e61
 8018de4:	08018e61 	.word	0x08018e61
 8018de8:	08018e61 	.word	0x08018e61
 8018dec:	08018e49 	.word	0x08018e49
 8018df0:	08018e61 	.word	0x08018e61
 8018df4:	08018e61 	.word	0x08018e61
 8018df8:	08018e61 	.word	0x08018e61
 8018dfc:	08018e61 	.word	0x08018e61
 8018e00:	08018e61 	.word	0x08018e61
 8018e04:	08018e61 	.word	0x08018e61
 8018e08:	08018e61 	.word	0x08018e61
 8018e0c:	08018e51 	.word	0x08018e51
 8018e10:	08018e61 	.word	0x08018e61
 8018e14:	08018e61 	.word	0x08018e61
 8018e18:	08018e61 	.word	0x08018e61
 8018e1c:	08018e61 	.word	0x08018e61
 8018e20:	08018e61 	.word	0x08018e61
 8018e24:	08018e61 	.word	0x08018e61
 8018e28:	08018e61 	.word	0x08018e61
 8018e2c:	08018e59 	.word	0x08018e59
 8018e30:	2301      	movs	r3, #1
 8018e32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018e36:	e1c0      	b.n	80191ba <UART_SetConfig+0x7ae>
 8018e38:	2304      	movs	r3, #4
 8018e3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018e3e:	e1bc      	b.n	80191ba <UART_SetConfig+0x7ae>
 8018e40:	2308      	movs	r3, #8
 8018e42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018e46:	e1b8      	b.n	80191ba <UART_SetConfig+0x7ae>
 8018e48:	2310      	movs	r3, #16
 8018e4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018e4e:	e1b4      	b.n	80191ba <UART_SetConfig+0x7ae>
 8018e50:	2320      	movs	r3, #32
 8018e52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018e56:	e1b0      	b.n	80191ba <UART_SetConfig+0x7ae>
 8018e58:	2340      	movs	r3, #64	@ 0x40
 8018e5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018e5e:	e1ac      	b.n	80191ba <UART_SetConfig+0x7ae>
 8018e60:	2380      	movs	r3, #128	@ 0x80
 8018e62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018e66:	e1a8      	b.n	80191ba <UART_SetConfig+0x7ae>
 8018e68:	697b      	ldr	r3, [r7, #20]
 8018e6a:	681b      	ldr	r3, [r3, #0]
 8018e6c:	4a75      	ldr	r2, [pc, #468]	@ (8019044 <UART_SetConfig+0x638>)
 8018e6e:	4293      	cmp	r3, r2
 8018e70:	d130      	bne.n	8018ed4 <UART_SetConfig+0x4c8>
 8018e72:	4b73      	ldr	r3, [pc, #460]	@ (8019040 <UART_SetConfig+0x634>)
 8018e74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018e76:	f003 0307 	and.w	r3, r3, #7
 8018e7a:	2b05      	cmp	r3, #5
 8018e7c:	d826      	bhi.n	8018ecc <UART_SetConfig+0x4c0>
 8018e7e:	a201      	add	r2, pc, #4	@ (adr r2, 8018e84 <UART_SetConfig+0x478>)
 8018e80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018e84:	08018e9d 	.word	0x08018e9d
 8018e88:	08018ea5 	.word	0x08018ea5
 8018e8c:	08018ead 	.word	0x08018ead
 8018e90:	08018eb5 	.word	0x08018eb5
 8018e94:	08018ebd 	.word	0x08018ebd
 8018e98:	08018ec5 	.word	0x08018ec5
 8018e9c:	2300      	movs	r3, #0
 8018e9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018ea2:	e18a      	b.n	80191ba <UART_SetConfig+0x7ae>
 8018ea4:	2304      	movs	r3, #4
 8018ea6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018eaa:	e186      	b.n	80191ba <UART_SetConfig+0x7ae>
 8018eac:	2308      	movs	r3, #8
 8018eae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018eb2:	e182      	b.n	80191ba <UART_SetConfig+0x7ae>
 8018eb4:	2310      	movs	r3, #16
 8018eb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018eba:	e17e      	b.n	80191ba <UART_SetConfig+0x7ae>
 8018ebc:	2320      	movs	r3, #32
 8018ebe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018ec2:	e17a      	b.n	80191ba <UART_SetConfig+0x7ae>
 8018ec4:	2340      	movs	r3, #64	@ 0x40
 8018ec6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018eca:	e176      	b.n	80191ba <UART_SetConfig+0x7ae>
 8018ecc:	2380      	movs	r3, #128	@ 0x80
 8018ece:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018ed2:	e172      	b.n	80191ba <UART_SetConfig+0x7ae>
 8018ed4:	697b      	ldr	r3, [r7, #20]
 8018ed6:	681b      	ldr	r3, [r3, #0]
 8018ed8:	4a5b      	ldr	r2, [pc, #364]	@ (8019048 <UART_SetConfig+0x63c>)
 8018eda:	4293      	cmp	r3, r2
 8018edc:	d130      	bne.n	8018f40 <UART_SetConfig+0x534>
 8018ede:	4b58      	ldr	r3, [pc, #352]	@ (8019040 <UART_SetConfig+0x634>)
 8018ee0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018ee2:	f003 0307 	and.w	r3, r3, #7
 8018ee6:	2b05      	cmp	r3, #5
 8018ee8:	d826      	bhi.n	8018f38 <UART_SetConfig+0x52c>
 8018eea:	a201      	add	r2, pc, #4	@ (adr r2, 8018ef0 <UART_SetConfig+0x4e4>)
 8018eec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018ef0:	08018f09 	.word	0x08018f09
 8018ef4:	08018f11 	.word	0x08018f11
 8018ef8:	08018f19 	.word	0x08018f19
 8018efc:	08018f21 	.word	0x08018f21
 8018f00:	08018f29 	.word	0x08018f29
 8018f04:	08018f31 	.word	0x08018f31
 8018f08:	2300      	movs	r3, #0
 8018f0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018f0e:	e154      	b.n	80191ba <UART_SetConfig+0x7ae>
 8018f10:	2304      	movs	r3, #4
 8018f12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018f16:	e150      	b.n	80191ba <UART_SetConfig+0x7ae>
 8018f18:	2308      	movs	r3, #8
 8018f1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018f1e:	e14c      	b.n	80191ba <UART_SetConfig+0x7ae>
 8018f20:	2310      	movs	r3, #16
 8018f22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018f26:	e148      	b.n	80191ba <UART_SetConfig+0x7ae>
 8018f28:	2320      	movs	r3, #32
 8018f2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018f2e:	e144      	b.n	80191ba <UART_SetConfig+0x7ae>
 8018f30:	2340      	movs	r3, #64	@ 0x40
 8018f32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018f36:	e140      	b.n	80191ba <UART_SetConfig+0x7ae>
 8018f38:	2380      	movs	r3, #128	@ 0x80
 8018f3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018f3e:	e13c      	b.n	80191ba <UART_SetConfig+0x7ae>
 8018f40:	697b      	ldr	r3, [r7, #20]
 8018f42:	681b      	ldr	r3, [r3, #0]
 8018f44:	4a41      	ldr	r2, [pc, #260]	@ (801904c <UART_SetConfig+0x640>)
 8018f46:	4293      	cmp	r3, r2
 8018f48:	f040 8082 	bne.w	8019050 <UART_SetConfig+0x644>
 8018f4c:	4b3c      	ldr	r3, [pc, #240]	@ (8019040 <UART_SetConfig+0x634>)
 8018f4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018f50:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8018f54:	2b28      	cmp	r3, #40	@ 0x28
 8018f56:	d86d      	bhi.n	8019034 <UART_SetConfig+0x628>
 8018f58:	a201      	add	r2, pc, #4	@ (adr r2, 8018f60 <UART_SetConfig+0x554>)
 8018f5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018f5e:	bf00      	nop
 8018f60:	08019005 	.word	0x08019005
 8018f64:	08019035 	.word	0x08019035
 8018f68:	08019035 	.word	0x08019035
 8018f6c:	08019035 	.word	0x08019035
 8018f70:	08019035 	.word	0x08019035
 8018f74:	08019035 	.word	0x08019035
 8018f78:	08019035 	.word	0x08019035
 8018f7c:	08019035 	.word	0x08019035
 8018f80:	0801900d 	.word	0x0801900d
 8018f84:	08019035 	.word	0x08019035
 8018f88:	08019035 	.word	0x08019035
 8018f8c:	08019035 	.word	0x08019035
 8018f90:	08019035 	.word	0x08019035
 8018f94:	08019035 	.word	0x08019035
 8018f98:	08019035 	.word	0x08019035
 8018f9c:	08019035 	.word	0x08019035
 8018fa0:	08019015 	.word	0x08019015
 8018fa4:	08019035 	.word	0x08019035
 8018fa8:	08019035 	.word	0x08019035
 8018fac:	08019035 	.word	0x08019035
 8018fb0:	08019035 	.word	0x08019035
 8018fb4:	08019035 	.word	0x08019035
 8018fb8:	08019035 	.word	0x08019035
 8018fbc:	08019035 	.word	0x08019035
 8018fc0:	0801901d 	.word	0x0801901d
 8018fc4:	08019035 	.word	0x08019035
 8018fc8:	08019035 	.word	0x08019035
 8018fcc:	08019035 	.word	0x08019035
 8018fd0:	08019035 	.word	0x08019035
 8018fd4:	08019035 	.word	0x08019035
 8018fd8:	08019035 	.word	0x08019035
 8018fdc:	08019035 	.word	0x08019035
 8018fe0:	08019025 	.word	0x08019025
 8018fe4:	08019035 	.word	0x08019035
 8018fe8:	08019035 	.word	0x08019035
 8018fec:	08019035 	.word	0x08019035
 8018ff0:	08019035 	.word	0x08019035
 8018ff4:	08019035 	.word	0x08019035
 8018ff8:	08019035 	.word	0x08019035
 8018ffc:	08019035 	.word	0x08019035
 8019000:	0801902d 	.word	0x0801902d
 8019004:	2301      	movs	r3, #1
 8019006:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801900a:	e0d6      	b.n	80191ba <UART_SetConfig+0x7ae>
 801900c:	2304      	movs	r3, #4
 801900e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019012:	e0d2      	b.n	80191ba <UART_SetConfig+0x7ae>
 8019014:	2308      	movs	r3, #8
 8019016:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801901a:	e0ce      	b.n	80191ba <UART_SetConfig+0x7ae>
 801901c:	2310      	movs	r3, #16
 801901e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019022:	e0ca      	b.n	80191ba <UART_SetConfig+0x7ae>
 8019024:	2320      	movs	r3, #32
 8019026:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801902a:	e0c6      	b.n	80191ba <UART_SetConfig+0x7ae>
 801902c:	2340      	movs	r3, #64	@ 0x40
 801902e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019032:	e0c2      	b.n	80191ba <UART_SetConfig+0x7ae>
 8019034:	2380      	movs	r3, #128	@ 0x80
 8019036:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801903a:	e0be      	b.n	80191ba <UART_SetConfig+0x7ae>
 801903c:	40011400 	.word	0x40011400
 8019040:	58024400 	.word	0x58024400
 8019044:	40007800 	.word	0x40007800
 8019048:	40007c00 	.word	0x40007c00
 801904c:	40011800 	.word	0x40011800
 8019050:	697b      	ldr	r3, [r7, #20]
 8019052:	681b      	ldr	r3, [r3, #0]
 8019054:	4aad      	ldr	r2, [pc, #692]	@ (801930c <UART_SetConfig+0x900>)
 8019056:	4293      	cmp	r3, r2
 8019058:	d176      	bne.n	8019148 <UART_SetConfig+0x73c>
 801905a:	4bad      	ldr	r3, [pc, #692]	@ (8019310 <UART_SetConfig+0x904>)
 801905c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801905e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8019062:	2b28      	cmp	r3, #40	@ 0x28
 8019064:	d86c      	bhi.n	8019140 <UART_SetConfig+0x734>
 8019066:	a201      	add	r2, pc, #4	@ (adr r2, 801906c <UART_SetConfig+0x660>)
 8019068:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801906c:	08019111 	.word	0x08019111
 8019070:	08019141 	.word	0x08019141
 8019074:	08019141 	.word	0x08019141
 8019078:	08019141 	.word	0x08019141
 801907c:	08019141 	.word	0x08019141
 8019080:	08019141 	.word	0x08019141
 8019084:	08019141 	.word	0x08019141
 8019088:	08019141 	.word	0x08019141
 801908c:	08019119 	.word	0x08019119
 8019090:	08019141 	.word	0x08019141
 8019094:	08019141 	.word	0x08019141
 8019098:	08019141 	.word	0x08019141
 801909c:	08019141 	.word	0x08019141
 80190a0:	08019141 	.word	0x08019141
 80190a4:	08019141 	.word	0x08019141
 80190a8:	08019141 	.word	0x08019141
 80190ac:	08019121 	.word	0x08019121
 80190b0:	08019141 	.word	0x08019141
 80190b4:	08019141 	.word	0x08019141
 80190b8:	08019141 	.word	0x08019141
 80190bc:	08019141 	.word	0x08019141
 80190c0:	08019141 	.word	0x08019141
 80190c4:	08019141 	.word	0x08019141
 80190c8:	08019141 	.word	0x08019141
 80190cc:	08019129 	.word	0x08019129
 80190d0:	08019141 	.word	0x08019141
 80190d4:	08019141 	.word	0x08019141
 80190d8:	08019141 	.word	0x08019141
 80190dc:	08019141 	.word	0x08019141
 80190e0:	08019141 	.word	0x08019141
 80190e4:	08019141 	.word	0x08019141
 80190e8:	08019141 	.word	0x08019141
 80190ec:	08019131 	.word	0x08019131
 80190f0:	08019141 	.word	0x08019141
 80190f4:	08019141 	.word	0x08019141
 80190f8:	08019141 	.word	0x08019141
 80190fc:	08019141 	.word	0x08019141
 8019100:	08019141 	.word	0x08019141
 8019104:	08019141 	.word	0x08019141
 8019108:	08019141 	.word	0x08019141
 801910c:	08019139 	.word	0x08019139
 8019110:	2301      	movs	r3, #1
 8019112:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019116:	e050      	b.n	80191ba <UART_SetConfig+0x7ae>
 8019118:	2304      	movs	r3, #4
 801911a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801911e:	e04c      	b.n	80191ba <UART_SetConfig+0x7ae>
 8019120:	2308      	movs	r3, #8
 8019122:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019126:	e048      	b.n	80191ba <UART_SetConfig+0x7ae>
 8019128:	2310      	movs	r3, #16
 801912a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801912e:	e044      	b.n	80191ba <UART_SetConfig+0x7ae>
 8019130:	2320      	movs	r3, #32
 8019132:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019136:	e040      	b.n	80191ba <UART_SetConfig+0x7ae>
 8019138:	2340      	movs	r3, #64	@ 0x40
 801913a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801913e:	e03c      	b.n	80191ba <UART_SetConfig+0x7ae>
 8019140:	2380      	movs	r3, #128	@ 0x80
 8019142:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019146:	e038      	b.n	80191ba <UART_SetConfig+0x7ae>
 8019148:	697b      	ldr	r3, [r7, #20]
 801914a:	681b      	ldr	r3, [r3, #0]
 801914c:	4a71      	ldr	r2, [pc, #452]	@ (8019314 <UART_SetConfig+0x908>)
 801914e:	4293      	cmp	r3, r2
 8019150:	d130      	bne.n	80191b4 <UART_SetConfig+0x7a8>
 8019152:	4b6f      	ldr	r3, [pc, #444]	@ (8019310 <UART_SetConfig+0x904>)
 8019154:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8019156:	f003 0307 	and.w	r3, r3, #7
 801915a:	2b05      	cmp	r3, #5
 801915c:	d826      	bhi.n	80191ac <UART_SetConfig+0x7a0>
 801915e:	a201      	add	r2, pc, #4	@ (adr r2, 8019164 <UART_SetConfig+0x758>)
 8019160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019164:	0801917d 	.word	0x0801917d
 8019168:	08019185 	.word	0x08019185
 801916c:	0801918d 	.word	0x0801918d
 8019170:	08019195 	.word	0x08019195
 8019174:	0801919d 	.word	0x0801919d
 8019178:	080191a5 	.word	0x080191a5
 801917c:	2302      	movs	r3, #2
 801917e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019182:	e01a      	b.n	80191ba <UART_SetConfig+0x7ae>
 8019184:	2304      	movs	r3, #4
 8019186:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801918a:	e016      	b.n	80191ba <UART_SetConfig+0x7ae>
 801918c:	2308      	movs	r3, #8
 801918e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019192:	e012      	b.n	80191ba <UART_SetConfig+0x7ae>
 8019194:	2310      	movs	r3, #16
 8019196:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801919a:	e00e      	b.n	80191ba <UART_SetConfig+0x7ae>
 801919c:	2320      	movs	r3, #32
 801919e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80191a2:	e00a      	b.n	80191ba <UART_SetConfig+0x7ae>
 80191a4:	2340      	movs	r3, #64	@ 0x40
 80191a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80191aa:	e006      	b.n	80191ba <UART_SetConfig+0x7ae>
 80191ac:	2380      	movs	r3, #128	@ 0x80
 80191ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80191b2:	e002      	b.n	80191ba <UART_SetConfig+0x7ae>
 80191b4:	2380      	movs	r3, #128	@ 0x80
 80191b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80191ba:	697b      	ldr	r3, [r7, #20]
 80191bc:	681b      	ldr	r3, [r3, #0]
 80191be:	4a55      	ldr	r2, [pc, #340]	@ (8019314 <UART_SetConfig+0x908>)
 80191c0:	4293      	cmp	r3, r2
 80191c2:	f040 80f8 	bne.w	80193b6 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80191c6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80191ca:	2b20      	cmp	r3, #32
 80191cc:	dc46      	bgt.n	801925c <UART_SetConfig+0x850>
 80191ce:	2b02      	cmp	r3, #2
 80191d0:	db75      	blt.n	80192be <UART_SetConfig+0x8b2>
 80191d2:	3b02      	subs	r3, #2
 80191d4:	2b1e      	cmp	r3, #30
 80191d6:	d872      	bhi.n	80192be <UART_SetConfig+0x8b2>
 80191d8:	a201      	add	r2, pc, #4	@ (adr r2, 80191e0 <UART_SetConfig+0x7d4>)
 80191da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80191de:	bf00      	nop
 80191e0:	08019263 	.word	0x08019263
 80191e4:	080192bf 	.word	0x080192bf
 80191e8:	0801926b 	.word	0x0801926b
 80191ec:	080192bf 	.word	0x080192bf
 80191f0:	080192bf 	.word	0x080192bf
 80191f4:	080192bf 	.word	0x080192bf
 80191f8:	0801927b 	.word	0x0801927b
 80191fc:	080192bf 	.word	0x080192bf
 8019200:	080192bf 	.word	0x080192bf
 8019204:	080192bf 	.word	0x080192bf
 8019208:	080192bf 	.word	0x080192bf
 801920c:	080192bf 	.word	0x080192bf
 8019210:	080192bf 	.word	0x080192bf
 8019214:	080192bf 	.word	0x080192bf
 8019218:	0801928b 	.word	0x0801928b
 801921c:	080192bf 	.word	0x080192bf
 8019220:	080192bf 	.word	0x080192bf
 8019224:	080192bf 	.word	0x080192bf
 8019228:	080192bf 	.word	0x080192bf
 801922c:	080192bf 	.word	0x080192bf
 8019230:	080192bf 	.word	0x080192bf
 8019234:	080192bf 	.word	0x080192bf
 8019238:	080192bf 	.word	0x080192bf
 801923c:	080192bf 	.word	0x080192bf
 8019240:	080192bf 	.word	0x080192bf
 8019244:	080192bf 	.word	0x080192bf
 8019248:	080192bf 	.word	0x080192bf
 801924c:	080192bf 	.word	0x080192bf
 8019250:	080192bf 	.word	0x080192bf
 8019254:	080192bf 	.word	0x080192bf
 8019258:	080192b1 	.word	0x080192b1
 801925c:	2b40      	cmp	r3, #64	@ 0x40
 801925e:	d02a      	beq.n	80192b6 <UART_SetConfig+0x8aa>
 8019260:	e02d      	b.n	80192be <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8019262:	f7fa fd8b 	bl	8013d7c <HAL_RCCEx_GetD3PCLK1Freq>
 8019266:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8019268:	e02f      	b.n	80192ca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801926a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801926e:	4618      	mov	r0, r3
 8019270:	f7fa fd9a 	bl	8013da8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8019274:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019276:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8019278:	e027      	b.n	80192ca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801927a:	f107 0318 	add.w	r3, r7, #24
 801927e:	4618      	mov	r0, r3
 8019280:	f7fa fee6 	bl	8014050 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8019284:	69fb      	ldr	r3, [r7, #28]
 8019286:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8019288:	e01f      	b.n	80192ca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801928a:	4b21      	ldr	r3, [pc, #132]	@ (8019310 <UART_SetConfig+0x904>)
 801928c:	681b      	ldr	r3, [r3, #0]
 801928e:	f003 0320 	and.w	r3, r3, #32
 8019292:	2b00      	cmp	r3, #0
 8019294:	d009      	beq.n	80192aa <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8019296:	4b1e      	ldr	r3, [pc, #120]	@ (8019310 <UART_SetConfig+0x904>)
 8019298:	681b      	ldr	r3, [r3, #0]
 801929a:	08db      	lsrs	r3, r3, #3
 801929c:	f003 0303 	and.w	r3, r3, #3
 80192a0:	4a1d      	ldr	r2, [pc, #116]	@ (8019318 <UART_SetConfig+0x90c>)
 80192a2:	fa22 f303 	lsr.w	r3, r2, r3
 80192a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80192a8:	e00f      	b.n	80192ca <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80192aa:	4b1b      	ldr	r3, [pc, #108]	@ (8019318 <UART_SetConfig+0x90c>)
 80192ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80192ae:	e00c      	b.n	80192ca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80192b0:	4b1a      	ldr	r3, [pc, #104]	@ (801931c <UART_SetConfig+0x910>)
 80192b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80192b4:	e009      	b.n	80192ca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80192b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80192ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80192bc:	e005      	b.n	80192ca <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80192be:	2300      	movs	r3, #0
 80192c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80192c2:	2301      	movs	r3, #1
 80192c4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80192c8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80192ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80192cc:	2b00      	cmp	r3, #0
 80192ce:	f000 81ee 	beq.w	80196ae <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80192d2:	697b      	ldr	r3, [r7, #20]
 80192d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80192d6:	4a12      	ldr	r2, [pc, #72]	@ (8019320 <UART_SetConfig+0x914>)
 80192d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80192dc:	461a      	mov	r2, r3
 80192de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80192e0:	fbb3 f3f2 	udiv	r3, r3, r2
 80192e4:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80192e6:	697b      	ldr	r3, [r7, #20]
 80192e8:	685a      	ldr	r2, [r3, #4]
 80192ea:	4613      	mov	r3, r2
 80192ec:	005b      	lsls	r3, r3, #1
 80192ee:	4413      	add	r3, r2
 80192f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80192f2:	429a      	cmp	r2, r3
 80192f4:	d305      	bcc.n	8019302 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80192f6:	697b      	ldr	r3, [r7, #20]
 80192f8:	685b      	ldr	r3, [r3, #4]
 80192fa:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80192fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80192fe:	429a      	cmp	r2, r3
 8019300:	d910      	bls.n	8019324 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8019302:	2301      	movs	r3, #1
 8019304:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8019308:	e1d1      	b.n	80196ae <UART_SetConfig+0xca2>
 801930a:	bf00      	nop
 801930c:	40011c00 	.word	0x40011c00
 8019310:	58024400 	.word	0x58024400
 8019314:	58000c00 	.word	0x58000c00
 8019318:	03d09000 	.word	0x03d09000
 801931c:	003d0900 	.word	0x003d0900
 8019320:	0801ea64 	.word	0x0801ea64
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8019324:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019326:	2200      	movs	r2, #0
 8019328:	60bb      	str	r3, [r7, #8]
 801932a:	60fa      	str	r2, [r7, #12]
 801932c:	697b      	ldr	r3, [r7, #20]
 801932e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019330:	4ac0      	ldr	r2, [pc, #768]	@ (8019634 <UART_SetConfig+0xc28>)
 8019332:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8019336:	b29b      	uxth	r3, r3
 8019338:	2200      	movs	r2, #0
 801933a:	603b      	str	r3, [r7, #0]
 801933c:	607a      	str	r2, [r7, #4]
 801933e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8019342:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8019346:	f7e7 f833 	bl	80003b0 <__aeabi_uldivmod>
 801934a:	4602      	mov	r2, r0
 801934c:	460b      	mov	r3, r1
 801934e:	4610      	mov	r0, r2
 8019350:	4619      	mov	r1, r3
 8019352:	f04f 0200 	mov.w	r2, #0
 8019356:	f04f 0300 	mov.w	r3, #0
 801935a:	020b      	lsls	r3, r1, #8
 801935c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8019360:	0202      	lsls	r2, r0, #8
 8019362:	6979      	ldr	r1, [r7, #20]
 8019364:	6849      	ldr	r1, [r1, #4]
 8019366:	0849      	lsrs	r1, r1, #1
 8019368:	2000      	movs	r0, #0
 801936a:	460c      	mov	r4, r1
 801936c:	4605      	mov	r5, r0
 801936e:	eb12 0804 	adds.w	r8, r2, r4
 8019372:	eb43 0905 	adc.w	r9, r3, r5
 8019376:	697b      	ldr	r3, [r7, #20]
 8019378:	685b      	ldr	r3, [r3, #4]
 801937a:	2200      	movs	r2, #0
 801937c:	469a      	mov	sl, r3
 801937e:	4693      	mov	fp, r2
 8019380:	4652      	mov	r2, sl
 8019382:	465b      	mov	r3, fp
 8019384:	4640      	mov	r0, r8
 8019386:	4649      	mov	r1, r9
 8019388:	f7e7 f812 	bl	80003b0 <__aeabi_uldivmod>
 801938c:	4602      	mov	r2, r0
 801938e:	460b      	mov	r3, r1
 8019390:	4613      	mov	r3, r2
 8019392:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8019394:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019396:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801939a:	d308      	bcc.n	80193ae <UART_SetConfig+0x9a2>
 801939c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801939e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80193a2:	d204      	bcs.n	80193ae <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 80193a4:	697b      	ldr	r3, [r7, #20]
 80193a6:	681b      	ldr	r3, [r3, #0]
 80193a8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80193aa:	60da      	str	r2, [r3, #12]
 80193ac:	e17f      	b.n	80196ae <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 80193ae:	2301      	movs	r3, #1
 80193b0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80193b4:	e17b      	b.n	80196ae <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80193b6:	697b      	ldr	r3, [r7, #20]
 80193b8:	69db      	ldr	r3, [r3, #28]
 80193ba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80193be:	f040 80bd 	bne.w	801953c <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 80193c2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80193c6:	2b20      	cmp	r3, #32
 80193c8:	dc48      	bgt.n	801945c <UART_SetConfig+0xa50>
 80193ca:	2b00      	cmp	r3, #0
 80193cc:	db7b      	blt.n	80194c6 <UART_SetConfig+0xaba>
 80193ce:	2b20      	cmp	r3, #32
 80193d0:	d879      	bhi.n	80194c6 <UART_SetConfig+0xaba>
 80193d2:	a201      	add	r2, pc, #4	@ (adr r2, 80193d8 <UART_SetConfig+0x9cc>)
 80193d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80193d8:	08019463 	.word	0x08019463
 80193dc:	0801946b 	.word	0x0801946b
 80193e0:	080194c7 	.word	0x080194c7
 80193e4:	080194c7 	.word	0x080194c7
 80193e8:	08019473 	.word	0x08019473
 80193ec:	080194c7 	.word	0x080194c7
 80193f0:	080194c7 	.word	0x080194c7
 80193f4:	080194c7 	.word	0x080194c7
 80193f8:	08019483 	.word	0x08019483
 80193fc:	080194c7 	.word	0x080194c7
 8019400:	080194c7 	.word	0x080194c7
 8019404:	080194c7 	.word	0x080194c7
 8019408:	080194c7 	.word	0x080194c7
 801940c:	080194c7 	.word	0x080194c7
 8019410:	080194c7 	.word	0x080194c7
 8019414:	080194c7 	.word	0x080194c7
 8019418:	08019493 	.word	0x08019493
 801941c:	080194c7 	.word	0x080194c7
 8019420:	080194c7 	.word	0x080194c7
 8019424:	080194c7 	.word	0x080194c7
 8019428:	080194c7 	.word	0x080194c7
 801942c:	080194c7 	.word	0x080194c7
 8019430:	080194c7 	.word	0x080194c7
 8019434:	080194c7 	.word	0x080194c7
 8019438:	080194c7 	.word	0x080194c7
 801943c:	080194c7 	.word	0x080194c7
 8019440:	080194c7 	.word	0x080194c7
 8019444:	080194c7 	.word	0x080194c7
 8019448:	080194c7 	.word	0x080194c7
 801944c:	080194c7 	.word	0x080194c7
 8019450:	080194c7 	.word	0x080194c7
 8019454:	080194c7 	.word	0x080194c7
 8019458:	080194b9 	.word	0x080194b9
 801945c:	2b40      	cmp	r3, #64	@ 0x40
 801945e:	d02e      	beq.n	80194be <UART_SetConfig+0xab2>
 8019460:	e031      	b.n	80194c6 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8019462:	f7f8 fded 	bl	8012040 <HAL_RCC_GetPCLK1Freq>
 8019466:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8019468:	e033      	b.n	80194d2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801946a:	f7f8 fdff 	bl	801206c <HAL_RCC_GetPCLK2Freq>
 801946e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8019470:	e02f      	b.n	80194d2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8019472:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8019476:	4618      	mov	r0, r3
 8019478:	f7fa fc96 	bl	8013da8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 801947c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801947e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8019480:	e027      	b.n	80194d2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8019482:	f107 0318 	add.w	r3, r7, #24
 8019486:	4618      	mov	r0, r3
 8019488:	f7fa fde2 	bl	8014050 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 801948c:	69fb      	ldr	r3, [r7, #28]
 801948e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8019490:	e01f      	b.n	80194d2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8019492:	4b69      	ldr	r3, [pc, #420]	@ (8019638 <UART_SetConfig+0xc2c>)
 8019494:	681b      	ldr	r3, [r3, #0]
 8019496:	f003 0320 	and.w	r3, r3, #32
 801949a:	2b00      	cmp	r3, #0
 801949c:	d009      	beq.n	80194b2 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801949e:	4b66      	ldr	r3, [pc, #408]	@ (8019638 <UART_SetConfig+0xc2c>)
 80194a0:	681b      	ldr	r3, [r3, #0]
 80194a2:	08db      	lsrs	r3, r3, #3
 80194a4:	f003 0303 	and.w	r3, r3, #3
 80194a8:	4a64      	ldr	r2, [pc, #400]	@ (801963c <UART_SetConfig+0xc30>)
 80194aa:	fa22 f303 	lsr.w	r3, r2, r3
 80194ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80194b0:	e00f      	b.n	80194d2 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 80194b2:	4b62      	ldr	r3, [pc, #392]	@ (801963c <UART_SetConfig+0xc30>)
 80194b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80194b6:	e00c      	b.n	80194d2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80194b8:	4b61      	ldr	r3, [pc, #388]	@ (8019640 <UART_SetConfig+0xc34>)
 80194ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80194bc:	e009      	b.n	80194d2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80194be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80194c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80194c4:	e005      	b.n	80194d2 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 80194c6:	2300      	movs	r3, #0
 80194c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80194ca:	2301      	movs	r3, #1
 80194cc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80194d0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80194d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80194d4:	2b00      	cmp	r3, #0
 80194d6:	f000 80ea 	beq.w	80196ae <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80194da:	697b      	ldr	r3, [r7, #20]
 80194dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80194de:	4a55      	ldr	r2, [pc, #340]	@ (8019634 <UART_SetConfig+0xc28>)
 80194e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80194e4:	461a      	mov	r2, r3
 80194e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80194e8:	fbb3 f3f2 	udiv	r3, r3, r2
 80194ec:	005a      	lsls	r2, r3, #1
 80194ee:	697b      	ldr	r3, [r7, #20]
 80194f0:	685b      	ldr	r3, [r3, #4]
 80194f2:	085b      	lsrs	r3, r3, #1
 80194f4:	441a      	add	r2, r3
 80194f6:	697b      	ldr	r3, [r7, #20]
 80194f8:	685b      	ldr	r3, [r3, #4]
 80194fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80194fe:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8019500:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019502:	2b0f      	cmp	r3, #15
 8019504:	d916      	bls.n	8019534 <UART_SetConfig+0xb28>
 8019506:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019508:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801950c:	d212      	bcs.n	8019534 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801950e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019510:	b29b      	uxth	r3, r3
 8019512:	f023 030f 	bic.w	r3, r3, #15
 8019516:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8019518:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801951a:	085b      	lsrs	r3, r3, #1
 801951c:	b29b      	uxth	r3, r3
 801951e:	f003 0307 	and.w	r3, r3, #7
 8019522:	b29a      	uxth	r2, r3
 8019524:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8019526:	4313      	orrs	r3, r2
 8019528:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 801952a:	697b      	ldr	r3, [r7, #20]
 801952c:	681b      	ldr	r3, [r3, #0]
 801952e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8019530:	60da      	str	r2, [r3, #12]
 8019532:	e0bc      	b.n	80196ae <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8019534:	2301      	movs	r3, #1
 8019536:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 801953a:	e0b8      	b.n	80196ae <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 801953c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8019540:	2b20      	cmp	r3, #32
 8019542:	dc4b      	bgt.n	80195dc <UART_SetConfig+0xbd0>
 8019544:	2b00      	cmp	r3, #0
 8019546:	f2c0 8087 	blt.w	8019658 <UART_SetConfig+0xc4c>
 801954a:	2b20      	cmp	r3, #32
 801954c:	f200 8084 	bhi.w	8019658 <UART_SetConfig+0xc4c>
 8019550:	a201      	add	r2, pc, #4	@ (adr r2, 8019558 <UART_SetConfig+0xb4c>)
 8019552:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019556:	bf00      	nop
 8019558:	080195e3 	.word	0x080195e3
 801955c:	080195eb 	.word	0x080195eb
 8019560:	08019659 	.word	0x08019659
 8019564:	08019659 	.word	0x08019659
 8019568:	080195f3 	.word	0x080195f3
 801956c:	08019659 	.word	0x08019659
 8019570:	08019659 	.word	0x08019659
 8019574:	08019659 	.word	0x08019659
 8019578:	08019603 	.word	0x08019603
 801957c:	08019659 	.word	0x08019659
 8019580:	08019659 	.word	0x08019659
 8019584:	08019659 	.word	0x08019659
 8019588:	08019659 	.word	0x08019659
 801958c:	08019659 	.word	0x08019659
 8019590:	08019659 	.word	0x08019659
 8019594:	08019659 	.word	0x08019659
 8019598:	08019613 	.word	0x08019613
 801959c:	08019659 	.word	0x08019659
 80195a0:	08019659 	.word	0x08019659
 80195a4:	08019659 	.word	0x08019659
 80195a8:	08019659 	.word	0x08019659
 80195ac:	08019659 	.word	0x08019659
 80195b0:	08019659 	.word	0x08019659
 80195b4:	08019659 	.word	0x08019659
 80195b8:	08019659 	.word	0x08019659
 80195bc:	08019659 	.word	0x08019659
 80195c0:	08019659 	.word	0x08019659
 80195c4:	08019659 	.word	0x08019659
 80195c8:	08019659 	.word	0x08019659
 80195cc:	08019659 	.word	0x08019659
 80195d0:	08019659 	.word	0x08019659
 80195d4:	08019659 	.word	0x08019659
 80195d8:	0801964b 	.word	0x0801964b
 80195dc:	2b40      	cmp	r3, #64	@ 0x40
 80195de:	d037      	beq.n	8019650 <UART_SetConfig+0xc44>
 80195e0:	e03a      	b.n	8019658 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80195e2:	f7f8 fd2d 	bl	8012040 <HAL_RCC_GetPCLK1Freq>
 80195e6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80195e8:	e03c      	b.n	8019664 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80195ea:	f7f8 fd3f 	bl	801206c <HAL_RCC_GetPCLK2Freq>
 80195ee:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80195f0:	e038      	b.n	8019664 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80195f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80195f6:	4618      	mov	r0, r3
 80195f8:	f7fa fbd6 	bl	8013da8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80195fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80195fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8019600:	e030      	b.n	8019664 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8019602:	f107 0318 	add.w	r3, r7, #24
 8019606:	4618      	mov	r0, r3
 8019608:	f7fa fd22 	bl	8014050 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 801960c:	69fb      	ldr	r3, [r7, #28]
 801960e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8019610:	e028      	b.n	8019664 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8019612:	4b09      	ldr	r3, [pc, #36]	@ (8019638 <UART_SetConfig+0xc2c>)
 8019614:	681b      	ldr	r3, [r3, #0]
 8019616:	f003 0320 	and.w	r3, r3, #32
 801961a:	2b00      	cmp	r3, #0
 801961c:	d012      	beq.n	8019644 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801961e:	4b06      	ldr	r3, [pc, #24]	@ (8019638 <UART_SetConfig+0xc2c>)
 8019620:	681b      	ldr	r3, [r3, #0]
 8019622:	08db      	lsrs	r3, r3, #3
 8019624:	f003 0303 	and.w	r3, r3, #3
 8019628:	4a04      	ldr	r2, [pc, #16]	@ (801963c <UART_SetConfig+0xc30>)
 801962a:	fa22 f303 	lsr.w	r3, r2, r3
 801962e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8019630:	e018      	b.n	8019664 <UART_SetConfig+0xc58>
 8019632:	bf00      	nop
 8019634:	0801ea64 	.word	0x0801ea64
 8019638:	58024400 	.word	0x58024400
 801963c:	03d09000 	.word	0x03d09000
 8019640:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8019644:	4b24      	ldr	r3, [pc, #144]	@ (80196d8 <UART_SetConfig+0xccc>)
 8019646:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8019648:	e00c      	b.n	8019664 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 801964a:	4b24      	ldr	r3, [pc, #144]	@ (80196dc <UART_SetConfig+0xcd0>)
 801964c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801964e:	e009      	b.n	8019664 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8019650:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8019654:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8019656:	e005      	b.n	8019664 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8019658:	2300      	movs	r3, #0
 801965a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 801965c:	2301      	movs	r3, #1
 801965e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8019662:	bf00      	nop
    }

    if (pclk != 0U)
 8019664:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019666:	2b00      	cmp	r3, #0
 8019668:	d021      	beq.n	80196ae <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801966a:	697b      	ldr	r3, [r7, #20]
 801966c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801966e:	4a1c      	ldr	r2, [pc, #112]	@ (80196e0 <UART_SetConfig+0xcd4>)
 8019670:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8019674:	461a      	mov	r2, r3
 8019676:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019678:	fbb3 f2f2 	udiv	r2, r3, r2
 801967c:	697b      	ldr	r3, [r7, #20]
 801967e:	685b      	ldr	r3, [r3, #4]
 8019680:	085b      	lsrs	r3, r3, #1
 8019682:	441a      	add	r2, r3
 8019684:	697b      	ldr	r3, [r7, #20]
 8019686:	685b      	ldr	r3, [r3, #4]
 8019688:	fbb2 f3f3 	udiv	r3, r2, r3
 801968c:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801968e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019690:	2b0f      	cmp	r3, #15
 8019692:	d909      	bls.n	80196a8 <UART_SetConfig+0xc9c>
 8019694:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019696:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801969a:	d205      	bcs.n	80196a8 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 801969c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801969e:	b29a      	uxth	r2, r3
 80196a0:	697b      	ldr	r3, [r7, #20]
 80196a2:	681b      	ldr	r3, [r3, #0]
 80196a4:	60da      	str	r2, [r3, #12]
 80196a6:	e002      	b.n	80196ae <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80196a8:	2301      	movs	r3, #1
 80196aa:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80196ae:	697b      	ldr	r3, [r7, #20]
 80196b0:	2201      	movs	r2, #1
 80196b2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80196b6:	697b      	ldr	r3, [r7, #20]
 80196b8:	2201      	movs	r2, #1
 80196ba:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80196be:	697b      	ldr	r3, [r7, #20]
 80196c0:	2200      	movs	r2, #0
 80196c2:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80196c4:	697b      	ldr	r3, [r7, #20]
 80196c6:	2200      	movs	r2, #0
 80196c8:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80196ca:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 80196ce:	4618      	mov	r0, r3
 80196d0:	3748      	adds	r7, #72	@ 0x48
 80196d2:	46bd      	mov	sp, r7
 80196d4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80196d8:	03d09000 	.word	0x03d09000
 80196dc:	003d0900 	.word	0x003d0900
 80196e0:	0801ea64 	.word	0x0801ea64

080196e4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80196e4:	b480      	push	{r7}
 80196e6:	b083      	sub	sp, #12
 80196e8:	af00      	add	r7, sp, #0
 80196ea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80196ec:	687b      	ldr	r3, [r7, #4]
 80196ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80196f0:	f003 0308 	and.w	r3, r3, #8
 80196f4:	2b00      	cmp	r3, #0
 80196f6:	d00a      	beq.n	801970e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80196f8:	687b      	ldr	r3, [r7, #4]
 80196fa:	681b      	ldr	r3, [r3, #0]
 80196fc:	685b      	ldr	r3, [r3, #4]
 80196fe:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8019702:	687b      	ldr	r3, [r7, #4]
 8019704:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8019706:	687b      	ldr	r3, [r7, #4]
 8019708:	681b      	ldr	r3, [r3, #0]
 801970a:	430a      	orrs	r2, r1
 801970c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801970e:	687b      	ldr	r3, [r7, #4]
 8019710:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019712:	f003 0301 	and.w	r3, r3, #1
 8019716:	2b00      	cmp	r3, #0
 8019718:	d00a      	beq.n	8019730 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801971a:	687b      	ldr	r3, [r7, #4]
 801971c:	681b      	ldr	r3, [r3, #0]
 801971e:	685b      	ldr	r3, [r3, #4]
 8019720:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8019724:	687b      	ldr	r3, [r7, #4]
 8019726:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8019728:	687b      	ldr	r3, [r7, #4]
 801972a:	681b      	ldr	r3, [r3, #0]
 801972c:	430a      	orrs	r2, r1
 801972e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8019730:	687b      	ldr	r3, [r7, #4]
 8019732:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019734:	f003 0302 	and.w	r3, r3, #2
 8019738:	2b00      	cmp	r3, #0
 801973a:	d00a      	beq.n	8019752 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801973c:	687b      	ldr	r3, [r7, #4]
 801973e:	681b      	ldr	r3, [r3, #0]
 8019740:	685b      	ldr	r3, [r3, #4]
 8019742:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8019746:	687b      	ldr	r3, [r7, #4]
 8019748:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801974a:	687b      	ldr	r3, [r7, #4]
 801974c:	681b      	ldr	r3, [r3, #0]
 801974e:	430a      	orrs	r2, r1
 8019750:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8019752:	687b      	ldr	r3, [r7, #4]
 8019754:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019756:	f003 0304 	and.w	r3, r3, #4
 801975a:	2b00      	cmp	r3, #0
 801975c:	d00a      	beq.n	8019774 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801975e:	687b      	ldr	r3, [r7, #4]
 8019760:	681b      	ldr	r3, [r3, #0]
 8019762:	685b      	ldr	r3, [r3, #4]
 8019764:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8019768:	687b      	ldr	r3, [r7, #4]
 801976a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801976c:	687b      	ldr	r3, [r7, #4]
 801976e:	681b      	ldr	r3, [r3, #0]
 8019770:	430a      	orrs	r2, r1
 8019772:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8019774:	687b      	ldr	r3, [r7, #4]
 8019776:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019778:	f003 0310 	and.w	r3, r3, #16
 801977c:	2b00      	cmp	r3, #0
 801977e:	d00a      	beq.n	8019796 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8019780:	687b      	ldr	r3, [r7, #4]
 8019782:	681b      	ldr	r3, [r3, #0]
 8019784:	689b      	ldr	r3, [r3, #8]
 8019786:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 801978a:	687b      	ldr	r3, [r7, #4]
 801978c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801978e:	687b      	ldr	r3, [r7, #4]
 8019790:	681b      	ldr	r3, [r3, #0]
 8019792:	430a      	orrs	r2, r1
 8019794:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8019796:	687b      	ldr	r3, [r7, #4]
 8019798:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801979a:	f003 0320 	and.w	r3, r3, #32
 801979e:	2b00      	cmp	r3, #0
 80197a0:	d00a      	beq.n	80197b8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80197a2:	687b      	ldr	r3, [r7, #4]
 80197a4:	681b      	ldr	r3, [r3, #0]
 80197a6:	689b      	ldr	r3, [r3, #8]
 80197a8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80197ac:	687b      	ldr	r3, [r7, #4]
 80197ae:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80197b0:	687b      	ldr	r3, [r7, #4]
 80197b2:	681b      	ldr	r3, [r3, #0]
 80197b4:	430a      	orrs	r2, r1
 80197b6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80197b8:	687b      	ldr	r3, [r7, #4]
 80197ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80197bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80197c0:	2b00      	cmp	r3, #0
 80197c2:	d01a      	beq.n	80197fa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80197c4:	687b      	ldr	r3, [r7, #4]
 80197c6:	681b      	ldr	r3, [r3, #0]
 80197c8:	685b      	ldr	r3, [r3, #4]
 80197ca:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80197ce:	687b      	ldr	r3, [r7, #4]
 80197d0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80197d2:	687b      	ldr	r3, [r7, #4]
 80197d4:	681b      	ldr	r3, [r3, #0]
 80197d6:	430a      	orrs	r2, r1
 80197d8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80197da:	687b      	ldr	r3, [r7, #4]
 80197dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80197de:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80197e2:	d10a      	bne.n	80197fa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80197e4:	687b      	ldr	r3, [r7, #4]
 80197e6:	681b      	ldr	r3, [r3, #0]
 80197e8:	685b      	ldr	r3, [r3, #4]
 80197ea:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80197ee:	687b      	ldr	r3, [r7, #4]
 80197f0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80197f2:	687b      	ldr	r3, [r7, #4]
 80197f4:	681b      	ldr	r3, [r3, #0]
 80197f6:	430a      	orrs	r2, r1
 80197f8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80197fa:	687b      	ldr	r3, [r7, #4]
 80197fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80197fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8019802:	2b00      	cmp	r3, #0
 8019804:	d00a      	beq.n	801981c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8019806:	687b      	ldr	r3, [r7, #4]
 8019808:	681b      	ldr	r3, [r3, #0]
 801980a:	685b      	ldr	r3, [r3, #4]
 801980c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8019810:	687b      	ldr	r3, [r7, #4]
 8019812:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8019814:	687b      	ldr	r3, [r7, #4]
 8019816:	681b      	ldr	r3, [r3, #0]
 8019818:	430a      	orrs	r2, r1
 801981a:	605a      	str	r2, [r3, #4]
  }
}
 801981c:	bf00      	nop
 801981e:	370c      	adds	r7, #12
 8019820:	46bd      	mov	sp, r7
 8019822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019826:	4770      	bx	lr

08019828 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8019828:	b580      	push	{r7, lr}
 801982a:	b098      	sub	sp, #96	@ 0x60
 801982c:	af02      	add	r7, sp, #8
 801982e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8019830:	687b      	ldr	r3, [r7, #4]
 8019832:	2200      	movs	r2, #0
 8019834:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8019838:	f7ef fe94 	bl	8009564 <HAL_GetTick>
 801983c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801983e:	687b      	ldr	r3, [r7, #4]
 8019840:	681b      	ldr	r3, [r3, #0]
 8019842:	681b      	ldr	r3, [r3, #0]
 8019844:	f003 0308 	and.w	r3, r3, #8
 8019848:	2b08      	cmp	r3, #8
 801984a:	d12f      	bne.n	80198ac <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801984c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8019850:	9300      	str	r3, [sp, #0]
 8019852:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019854:	2200      	movs	r2, #0
 8019856:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 801985a:	6878      	ldr	r0, [r7, #4]
 801985c:	f000 f88e 	bl	801997c <UART_WaitOnFlagUntilTimeout>
 8019860:	4603      	mov	r3, r0
 8019862:	2b00      	cmp	r3, #0
 8019864:	d022      	beq.n	80198ac <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8019866:	687b      	ldr	r3, [r7, #4]
 8019868:	681b      	ldr	r3, [r3, #0]
 801986a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801986c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801986e:	e853 3f00 	ldrex	r3, [r3]
 8019872:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8019874:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019876:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801987a:	653b      	str	r3, [r7, #80]	@ 0x50
 801987c:	687b      	ldr	r3, [r7, #4]
 801987e:	681b      	ldr	r3, [r3, #0]
 8019880:	461a      	mov	r2, r3
 8019882:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019884:	647b      	str	r3, [r7, #68]	@ 0x44
 8019886:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019888:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801988a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801988c:	e841 2300 	strex	r3, r2, [r1]
 8019890:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8019892:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019894:	2b00      	cmp	r3, #0
 8019896:	d1e6      	bne.n	8019866 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8019898:	687b      	ldr	r3, [r7, #4]
 801989a:	2220      	movs	r2, #32
 801989c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80198a0:	687b      	ldr	r3, [r7, #4]
 80198a2:	2200      	movs	r2, #0
 80198a4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80198a8:	2303      	movs	r3, #3
 80198aa:	e063      	b.n	8019974 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80198ac:	687b      	ldr	r3, [r7, #4]
 80198ae:	681b      	ldr	r3, [r3, #0]
 80198b0:	681b      	ldr	r3, [r3, #0]
 80198b2:	f003 0304 	and.w	r3, r3, #4
 80198b6:	2b04      	cmp	r3, #4
 80198b8:	d149      	bne.n	801994e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80198ba:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80198be:	9300      	str	r3, [sp, #0]
 80198c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80198c2:	2200      	movs	r2, #0
 80198c4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80198c8:	6878      	ldr	r0, [r7, #4]
 80198ca:	f000 f857 	bl	801997c <UART_WaitOnFlagUntilTimeout>
 80198ce:	4603      	mov	r3, r0
 80198d0:	2b00      	cmp	r3, #0
 80198d2:	d03c      	beq.n	801994e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80198d4:	687b      	ldr	r3, [r7, #4]
 80198d6:	681b      	ldr	r3, [r3, #0]
 80198d8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80198da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80198dc:	e853 3f00 	ldrex	r3, [r3]
 80198e0:	623b      	str	r3, [r7, #32]
   return(result);
 80198e2:	6a3b      	ldr	r3, [r7, #32]
 80198e4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80198e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80198ea:	687b      	ldr	r3, [r7, #4]
 80198ec:	681b      	ldr	r3, [r3, #0]
 80198ee:	461a      	mov	r2, r3
 80198f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80198f2:	633b      	str	r3, [r7, #48]	@ 0x30
 80198f4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80198f6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80198f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80198fa:	e841 2300 	strex	r3, r2, [r1]
 80198fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8019900:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019902:	2b00      	cmp	r3, #0
 8019904:	d1e6      	bne.n	80198d4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8019906:	687b      	ldr	r3, [r7, #4]
 8019908:	681b      	ldr	r3, [r3, #0]
 801990a:	3308      	adds	r3, #8
 801990c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801990e:	693b      	ldr	r3, [r7, #16]
 8019910:	e853 3f00 	ldrex	r3, [r3]
 8019914:	60fb      	str	r3, [r7, #12]
   return(result);
 8019916:	68fb      	ldr	r3, [r7, #12]
 8019918:	f023 0301 	bic.w	r3, r3, #1
 801991c:	64bb      	str	r3, [r7, #72]	@ 0x48
 801991e:	687b      	ldr	r3, [r7, #4]
 8019920:	681b      	ldr	r3, [r3, #0]
 8019922:	3308      	adds	r3, #8
 8019924:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8019926:	61fa      	str	r2, [r7, #28]
 8019928:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801992a:	69b9      	ldr	r1, [r7, #24]
 801992c:	69fa      	ldr	r2, [r7, #28]
 801992e:	e841 2300 	strex	r3, r2, [r1]
 8019932:	617b      	str	r3, [r7, #20]
   return(result);
 8019934:	697b      	ldr	r3, [r7, #20]
 8019936:	2b00      	cmp	r3, #0
 8019938:	d1e5      	bne.n	8019906 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 801993a:	687b      	ldr	r3, [r7, #4]
 801993c:	2220      	movs	r2, #32
 801993e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8019942:	687b      	ldr	r3, [r7, #4]
 8019944:	2200      	movs	r2, #0
 8019946:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801994a:	2303      	movs	r3, #3
 801994c:	e012      	b.n	8019974 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801994e:	687b      	ldr	r3, [r7, #4]
 8019950:	2220      	movs	r2, #32
 8019952:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8019956:	687b      	ldr	r3, [r7, #4]
 8019958:	2220      	movs	r2, #32
 801995a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801995e:	687b      	ldr	r3, [r7, #4]
 8019960:	2200      	movs	r2, #0
 8019962:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8019964:	687b      	ldr	r3, [r7, #4]
 8019966:	2200      	movs	r2, #0
 8019968:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 801996a:	687b      	ldr	r3, [r7, #4]
 801996c:	2200      	movs	r2, #0
 801996e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8019972:	2300      	movs	r3, #0
}
 8019974:	4618      	mov	r0, r3
 8019976:	3758      	adds	r7, #88	@ 0x58
 8019978:	46bd      	mov	sp, r7
 801997a:	bd80      	pop	{r7, pc}

0801997c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801997c:	b580      	push	{r7, lr}
 801997e:	b084      	sub	sp, #16
 8019980:	af00      	add	r7, sp, #0
 8019982:	60f8      	str	r0, [r7, #12]
 8019984:	60b9      	str	r1, [r7, #8]
 8019986:	603b      	str	r3, [r7, #0]
 8019988:	4613      	mov	r3, r2
 801998a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801998c:	e04f      	b.n	8019a2e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801998e:	69bb      	ldr	r3, [r7, #24]
 8019990:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019994:	d04b      	beq.n	8019a2e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8019996:	f7ef fde5 	bl	8009564 <HAL_GetTick>
 801999a:	4602      	mov	r2, r0
 801999c:	683b      	ldr	r3, [r7, #0]
 801999e:	1ad3      	subs	r3, r2, r3
 80199a0:	69ba      	ldr	r2, [r7, #24]
 80199a2:	429a      	cmp	r2, r3
 80199a4:	d302      	bcc.n	80199ac <UART_WaitOnFlagUntilTimeout+0x30>
 80199a6:	69bb      	ldr	r3, [r7, #24]
 80199a8:	2b00      	cmp	r3, #0
 80199aa:	d101      	bne.n	80199b0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80199ac:	2303      	movs	r3, #3
 80199ae:	e04e      	b.n	8019a4e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80199b0:	68fb      	ldr	r3, [r7, #12]
 80199b2:	681b      	ldr	r3, [r3, #0]
 80199b4:	681b      	ldr	r3, [r3, #0]
 80199b6:	f003 0304 	and.w	r3, r3, #4
 80199ba:	2b00      	cmp	r3, #0
 80199bc:	d037      	beq.n	8019a2e <UART_WaitOnFlagUntilTimeout+0xb2>
 80199be:	68bb      	ldr	r3, [r7, #8]
 80199c0:	2b80      	cmp	r3, #128	@ 0x80
 80199c2:	d034      	beq.n	8019a2e <UART_WaitOnFlagUntilTimeout+0xb2>
 80199c4:	68bb      	ldr	r3, [r7, #8]
 80199c6:	2b40      	cmp	r3, #64	@ 0x40
 80199c8:	d031      	beq.n	8019a2e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80199ca:	68fb      	ldr	r3, [r7, #12]
 80199cc:	681b      	ldr	r3, [r3, #0]
 80199ce:	69db      	ldr	r3, [r3, #28]
 80199d0:	f003 0308 	and.w	r3, r3, #8
 80199d4:	2b08      	cmp	r3, #8
 80199d6:	d110      	bne.n	80199fa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80199d8:	68fb      	ldr	r3, [r7, #12]
 80199da:	681b      	ldr	r3, [r3, #0]
 80199dc:	2208      	movs	r2, #8
 80199de:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80199e0:	68f8      	ldr	r0, [r7, #12]
 80199e2:	f000 f95b 	bl	8019c9c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80199e6:	68fb      	ldr	r3, [r7, #12]
 80199e8:	2208      	movs	r2, #8
 80199ea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80199ee:	68fb      	ldr	r3, [r7, #12]
 80199f0:	2200      	movs	r2, #0
 80199f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80199f6:	2301      	movs	r3, #1
 80199f8:	e029      	b.n	8019a4e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80199fa:	68fb      	ldr	r3, [r7, #12]
 80199fc:	681b      	ldr	r3, [r3, #0]
 80199fe:	69db      	ldr	r3, [r3, #28]
 8019a00:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8019a04:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8019a08:	d111      	bne.n	8019a2e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8019a0a:	68fb      	ldr	r3, [r7, #12]
 8019a0c:	681b      	ldr	r3, [r3, #0]
 8019a0e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8019a12:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8019a14:	68f8      	ldr	r0, [r7, #12]
 8019a16:	f000 f941 	bl	8019c9c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8019a1a:	68fb      	ldr	r3, [r7, #12]
 8019a1c:	2220      	movs	r2, #32
 8019a1e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8019a22:	68fb      	ldr	r3, [r7, #12]
 8019a24:	2200      	movs	r2, #0
 8019a26:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8019a2a:	2303      	movs	r3, #3
 8019a2c:	e00f      	b.n	8019a4e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8019a2e:	68fb      	ldr	r3, [r7, #12]
 8019a30:	681b      	ldr	r3, [r3, #0]
 8019a32:	69da      	ldr	r2, [r3, #28]
 8019a34:	68bb      	ldr	r3, [r7, #8]
 8019a36:	4013      	ands	r3, r2
 8019a38:	68ba      	ldr	r2, [r7, #8]
 8019a3a:	429a      	cmp	r2, r3
 8019a3c:	bf0c      	ite	eq
 8019a3e:	2301      	moveq	r3, #1
 8019a40:	2300      	movne	r3, #0
 8019a42:	b2db      	uxtb	r3, r3
 8019a44:	461a      	mov	r2, r3
 8019a46:	79fb      	ldrb	r3, [r7, #7]
 8019a48:	429a      	cmp	r2, r3
 8019a4a:	d0a0      	beq.n	801998e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8019a4c:	2300      	movs	r3, #0
}
 8019a4e:	4618      	mov	r0, r3
 8019a50:	3710      	adds	r7, #16
 8019a52:	46bd      	mov	sp, r7
 8019a54:	bd80      	pop	{r7, pc}
	...

08019a58 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8019a58:	b480      	push	{r7}
 8019a5a:	b0a3      	sub	sp, #140	@ 0x8c
 8019a5c:	af00      	add	r7, sp, #0
 8019a5e:	60f8      	str	r0, [r7, #12]
 8019a60:	60b9      	str	r1, [r7, #8]
 8019a62:	4613      	mov	r3, r2
 8019a64:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8019a66:	68fb      	ldr	r3, [r7, #12]
 8019a68:	68ba      	ldr	r2, [r7, #8]
 8019a6a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8019a6c:	68fb      	ldr	r3, [r7, #12]
 8019a6e:	88fa      	ldrh	r2, [r7, #6]
 8019a70:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8019a74:	68fb      	ldr	r3, [r7, #12]
 8019a76:	88fa      	ldrh	r2, [r7, #6]
 8019a78:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8019a7c:	68fb      	ldr	r3, [r7, #12]
 8019a7e:	2200      	movs	r2, #0
 8019a80:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8019a82:	68fb      	ldr	r3, [r7, #12]
 8019a84:	689b      	ldr	r3, [r3, #8]
 8019a86:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8019a8a:	d10e      	bne.n	8019aaa <UART_Start_Receive_IT+0x52>
 8019a8c:	68fb      	ldr	r3, [r7, #12]
 8019a8e:	691b      	ldr	r3, [r3, #16]
 8019a90:	2b00      	cmp	r3, #0
 8019a92:	d105      	bne.n	8019aa0 <UART_Start_Receive_IT+0x48>
 8019a94:	68fb      	ldr	r3, [r7, #12]
 8019a96:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8019a9a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8019a9e:	e02d      	b.n	8019afc <UART_Start_Receive_IT+0xa4>
 8019aa0:	68fb      	ldr	r3, [r7, #12]
 8019aa2:	22ff      	movs	r2, #255	@ 0xff
 8019aa4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8019aa8:	e028      	b.n	8019afc <UART_Start_Receive_IT+0xa4>
 8019aaa:	68fb      	ldr	r3, [r7, #12]
 8019aac:	689b      	ldr	r3, [r3, #8]
 8019aae:	2b00      	cmp	r3, #0
 8019ab0:	d10d      	bne.n	8019ace <UART_Start_Receive_IT+0x76>
 8019ab2:	68fb      	ldr	r3, [r7, #12]
 8019ab4:	691b      	ldr	r3, [r3, #16]
 8019ab6:	2b00      	cmp	r3, #0
 8019ab8:	d104      	bne.n	8019ac4 <UART_Start_Receive_IT+0x6c>
 8019aba:	68fb      	ldr	r3, [r7, #12]
 8019abc:	22ff      	movs	r2, #255	@ 0xff
 8019abe:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8019ac2:	e01b      	b.n	8019afc <UART_Start_Receive_IT+0xa4>
 8019ac4:	68fb      	ldr	r3, [r7, #12]
 8019ac6:	227f      	movs	r2, #127	@ 0x7f
 8019ac8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8019acc:	e016      	b.n	8019afc <UART_Start_Receive_IT+0xa4>
 8019ace:	68fb      	ldr	r3, [r7, #12]
 8019ad0:	689b      	ldr	r3, [r3, #8]
 8019ad2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8019ad6:	d10d      	bne.n	8019af4 <UART_Start_Receive_IT+0x9c>
 8019ad8:	68fb      	ldr	r3, [r7, #12]
 8019ada:	691b      	ldr	r3, [r3, #16]
 8019adc:	2b00      	cmp	r3, #0
 8019ade:	d104      	bne.n	8019aea <UART_Start_Receive_IT+0x92>
 8019ae0:	68fb      	ldr	r3, [r7, #12]
 8019ae2:	227f      	movs	r2, #127	@ 0x7f
 8019ae4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8019ae8:	e008      	b.n	8019afc <UART_Start_Receive_IT+0xa4>
 8019aea:	68fb      	ldr	r3, [r7, #12]
 8019aec:	223f      	movs	r2, #63	@ 0x3f
 8019aee:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8019af2:	e003      	b.n	8019afc <UART_Start_Receive_IT+0xa4>
 8019af4:	68fb      	ldr	r3, [r7, #12]
 8019af6:	2200      	movs	r2, #0
 8019af8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8019afc:	68fb      	ldr	r3, [r7, #12]
 8019afe:	2200      	movs	r2, #0
 8019b00:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8019b04:	68fb      	ldr	r3, [r7, #12]
 8019b06:	2222      	movs	r2, #34	@ 0x22
 8019b08:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8019b0c:	68fb      	ldr	r3, [r7, #12]
 8019b0e:	681b      	ldr	r3, [r3, #0]
 8019b10:	3308      	adds	r3, #8
 8019b12:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019b14:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8019b16:	e853 3f00 	ldrex	r3, [r3]
 8019b1a:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8019b1c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8019b1e:	f043 0301 	orr.w	r3, r3, #1
 8019b22:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8019b26:	68fb      	ldr	r3, [r7, #12]
 8019b28:	681b      	ldr	r3, [r3, #0]
 8019b2a:	3308      	adds	r3, #8
 8019b2c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8019b30:	673a      	str	r2, [r7, #112]	@ 0x70
 8019b32:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019b34:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8019b36:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8019b38:	e841 2300 	strex	r3, r2, [r1]
 8019b3c:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8019b3e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8019b40:	2b00      	cmp	r3, #0
 8019b42:	d1e3      	bne.n	8019b0c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8019b44:	68fb      	ldr	r3, [r7, #12]
 8019b46:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8019b48:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8019b4c:	d14f      	bne.n	8019bee <UART_Start_Receive_IT+0x196>
 8019b4e:	68fb      	ldr	r3, [r7, #12]
 8019b50:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8019b54:	88fa      	ldrh	r2, [r7, #6]
 8019b56:	429a      	cmp	r2, r3
 8019b58:	d349      	bcc.n	8019bee <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8019b5a:	68fb      	ldr	r3, [r7, #12]
 8019b5c:	689b      	ldr	r3, [r3, #8]
 8019b5e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8019b62:	d107      	bne.n	8019b74 <UART_Start_Receive_IT+0x11c>
 8019b64:	68fb      	ldr	r3, [r7, #12]
 8019b66:	691b      	ldr	r3, [r3, #16]
 8019b68:	2b00      	cmp	r3, #0
 8019b6a:	d103      	bne.n	8019b74 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8019b6c:	68fb      	ldr	r3, [r7, #12]
 8019b6e:	4a47      	ldr	r2, [pc, #284]	@ (8019c8c <UART_Start_Receive_IT+0x234>)
 8019b70:	675a      	str	r2, [r3, #116]	@ 0x74
 8019b72:	e002      	b.n	8019b7a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8019b74:	68fb      	ldr	r3, [r7, #12]
 8019b76:	4a46      	ldr	r2, [pc, #280]	@ (8019c90 <UART_Start_Receive_IT+0x238>)
 8019b78:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8019b7a:	68fb      	ldr	r3, [r7, #12]
 8019b7c:	691b      	ldr	r3, [r3, #16]
 8019b7e:	2b00      	cmp	r3, #0
 8019b80:	d01a      	beq.n	8019bb8 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8019b82:	68fb      	ldr	r3, [r7, #12]
 8019b84:	681b      	ldr	r3, [r3, #0]
 8019b86:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019b88:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019b8a:	e853 3f00 	ldrex	r3, [r3]
 8019b8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8019b90:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8019b92:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8019b96:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8019b9a:	68fb      	ldr	r3, [r7, #12]
 8019b9c:	681b      	ldr	r3, [r3, #0]
 8019b9e:	461a      	mov	r2, r3
 8019ba0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8019ba4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8019ba6:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019ba8:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8019baa:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8019bac:	e841 2300 	strex	r3, r2, [r1]
 8019bb0:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8019bb2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019bb4:	2b00      	cmp	r3, #0
 8019bb6:	d1e4      	bne.n	8019b82 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8019bb8:	68fb      	ldr	r3, [r7, #12]
 8019bba:	681b      	ldr	r3, [r3, #0]
 8019bbc:	3308      	adds	r3, #8
 8019bbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019bc0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019bc2:	e853 3f00 	ldrex	r3, [r3]
 8019bc6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8019bc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019bca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8019bce:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8019bd0:	68fb      	ldr	r3, [r7, #12]
 8019bd2:	681b      	ldr	r3, [r3, #0]
 8019bd4:	3308      	adds	r3, #8
 8019bd6:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8019bd8:	64ba      	str	r2, [r7, #72]	@ 0x48
 8019bda:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019bdc:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8019bde:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8019be0:	e841 2300 	strex	r3, r2, [r1]
 8019be4:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8019be6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8019be8:	2b00      	cmp	r3, #0
 8019bea:	d1e5      	bne.n	8019bb8 <UART_Start_Receive_IT+0x160>
 8019bec:	e046      	b.n	8019c7c <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8019bee:	68fb      	ldr	r3, [r7, #12]
 8019bf0:	689b      	ldr	r3, [r3, #8]
 8019bf2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8019bf6:	d107      	bne.n	8019c08 <UART_Start_Receive_IT+0x1b0>
 8019bf8:	68fb      	ldr	r3, [r7, #12]
 8019bfa:	691b      	ldr	r3, [r3, #16]
 8019bfc:	2b00      	cmp	r3, #0
 8019bfe:	d103      	bne.n	8019c08 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8019c00:	68fb      	ldr	r3, [r7, #12]
 8019c02:	4a24      	ldr	r2, [pc, #144]	@ (8019c94 <UART_Start_Receive_IT+0x23c>)
 8019c04:	675a      	str	r2, [r3, #116]	@ 0x74
 8019c06:	e002      	b.n	8019c0e <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8019c08:	68fb      	ldr	r3, [r7, #12]
 8019c0a:	4a23      	ldr	r2, [pc, #140]	@ (8019c98 <UART_Start_Receive_IT+0x240>)
 8019c0c:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8019c0e:	68fb      	ldr	r3, [r7, #12]
 8019c10:	691b      	ldr	r3, [r3, #16]
 8019c12:	2b00      	cmp	r3, #0
 8019c14:	d019      	beq.n	8019c4a <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8019c16:	68fb      	ldr	r3, [r7, #12]
 8019c18:	681b      	ldr	r3, [r3, #0]
 8019c1a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019c1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019c1e:	e853 3f00 	ldrex	r3, [r3]
 8019c22:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8019c24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019c26:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8019c2a:	677b      	str	r3, [r7, #116]	@ 0x74
 8019c2c:	68fb      	ldr	r3, [r7, #12]
 8019c2e:	681b      	ldr	r3, [r3, #0]
 8019c30:	461a      	mov	r2, r3
 8019c32:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8019c34:	637b      	str	r3, [r7, #52]	@ 0x34
 8019c36:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019c38:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8019c3a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8019c3c:	e841 2300 	strex	r3, r2, [r1]
 8019c40:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8019c42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019c44:	2b00      	cmp	r3, #0
 8019c46:	d1e6      	bne.n	8019c16 <UART_Start_Receive_IT+0x1be>
 8019c48:	e018      	b.n	8019c7c <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8019c4a:	68fb      	ldr	r3, [r7, #12]
 8019c4c:	681b      	ldr	r3, [r3, #0]
 8019c4e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019c50:	697b      	ldr	r3, [r7, #20]
 8019c52:	e853 3f00 	ldrex	r3, [r3]
 8019c56:	613b      	str	r3, [r7, #16]
   return(result);
 8019c58:	693b      	ldr	r3, [r7, #16]
 8019c5a:	f043 0320 	orr.w	r3, r3, #32
 8019c5e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8019c60:	68fb      	ldr	r3, [r7, #12]
 8019c62:	681b      	ldr	r3, [r3, #0]
 8019c64:	461a      	mov	r2, r3
 8019c66:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8019c68:	623b      	str	r3, [r7, #32]
 8019c6a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019c6c:	69f9      	ldr	r1, [r7, #28]
 8019c6e:	6a3a      	ldr	r2, [r7, #32]
 8019c70:	e841 2300 	strex	r3, r2, [r1]
 8019c74:	61bb      	str	r3, [r7, #24]
   return(result);
 8019c76:	69bb      	ldr	r3, [r7, #24]
 8019c78:	2b00      	cmp	r3, #0
 8019c7a:	d1e6      	bne.n	8019c4a <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8019c7c:	2300      	movs	r3, #0
}
 8019c7e:	4618      	mov	r0, r3
 8019c80:	378c      	adds	r7, #140	@ 0x8c
 8019c82:	46bd      	mov	sp, r7
 8019c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c88:	4770      	bx	lr
 8019c8a:	bf00      	nop
 8019c8c:	0801a7fd 	.word	0x0801a7fd
 8019c90:	0801a499 	.word	0x0801a499
 8019c94:	0801a2e1 	.word	0x0801a2e1
 8019c98:	0801a129 	.word	0x0801a129

08019c9c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8019c9c:	b480      	push	{r7}
 8019c9e:	b095      	sub	sp, #84	@ 0x54
 8019ca0:	af00      	add	r7, sp, #0
 8019ca2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8019ca4:	687b      	ldr	r3, [r7, #4]
 8019ca6:	681b      	ldr	r3, [r3, #0]
 8019ca8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019caa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019cac:	e853 3f00 	ldrex	r3, [r3]
 8019cb0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8019cb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019cb4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8019cb8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8019cba:	687b      	ldr	r3, [r7, #4]
 8019cbc:	681b      	ldr	r3, [r3, #0]
 8019cbe:	461a      	mov	r2, r3
 8019cc0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8019cc2:	643b      	str	r3, [r7, #64]	@ 0x40
 8019cc4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019cc6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8019cc8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8019cca:	e841 2300 	strex	r3, r2, [r1]
 8019cce:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8019cd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019cd2:	2b00      	cmp	r3, #0
 8019cd4:	d1e6      	bne.n	8019ca4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8019cd6:	687b      	ldr	r3, [r7, #4]
 8019cd8:	681b      	ldr	r3, [r3, #0]
 8019cda:	3308      	adds	r3, #8
 8019cdc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019cde:	6a3b      	ldr	r3, [r7, #32]
 8019ce0:	e853 3f00 	ldrex	r3, [r3]
 8019ce4:	61fb      	str	r3, [r7, #28]
   return(result);
 8019ce6:	69fa      	ldr	r2, [r7, #28]
 8019ce8:	4b1e      	ldr	r3, [pc, #120]	@ (8019d64 <UART_EndRxTransfer+0xc8>)
 8019cea:	4013      	ands	r3, r2
 8019cec:	64bb      	str	r3, [r7, #72]	@ 0x48
 8019cee:	687b      	ldr	r3, [r7, #4]
 8019cf0:	681b      	ldr	r3, [r3, #0]
 8019cf2:	3308      	adds	r3, #8
 8019cf4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8019cf6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8019cf8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019cfa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8019cfc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8019cfe:	e841 2300 	strex	r3, r2, [r1]
 8019d02:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8019d04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019d06:	2b00      	cmp	r3, #0
 8019d08:	d1e5      	bne.n	8019cd6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8019d0a:	687b      	ldr	r3, [r7, #4]
 8019d0c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019d0e:	2b01      	cmp	r3, #1
 8019d10:	d118      	bne.n	8019d44 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8019d12:	687b      	ldr	r3, [r7, #4]
 8019d14:	681b      	ldr	r3, [r3, #0]
 8019d16:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019d18:	68fb      	ldr	r3, [r7, #12]
 8019d1a:	e853 3f00 	ldrex	r3, [r3]
 8019d1e:	60bb      	str	r3, [r7, #8]
   return(result);
 8019d20:	68bb      	ldr	r3, [r7, #8]
 8019d22:	f023 0310 	bic.w	r3, r3, #16
 8019d26:	647b      	str	r3, [r7, #68]	@ 0x44
 8019d28:	687b      	ldr	r3, [r7, #4]
 8019d2a:	681b      	ldr	r3, [r3, #0]
 8019d2c:	461a      	mov	r2, r3
 8019d2e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8019d30:	61bb      	str	r3, [r7, #24]
 8019d32:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019d34:	6979      	ldr	r1, [r7, #20]
 8019d36:	69ba      	ldr	r2, [r7, #24]
 8019d38:	e841 2300 	strex	r3, r2, [r1]
 8019d3c:	613b      	str	r3, [r7, #16]
   return(result);
 8019d3e:	693b      	ldr	r3, [r7, #16]
 8019d40:	2b00      	cmp	r3, #0
 8019d42:	d1e6      	bne.n	8019d12 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8019d44:	687b      	ldr	r3, [r7, #4]
 8019d46:	2220      	movs	r2, #32
 8019d48:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8019d4c:	687b      	ldr	r3, [r7, #4]
 8019d4e:	2200      	movs	r2, #0
 8019d50:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8019d52:	687b      	ldr	r3, [r7, #4]
 8019d54:	2200      	movs	r2, #0
 8019d56:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8019d58:	bf00      	nop
 8019d5a:	3754      	adds	r7, #84	@ 0x54
 8019d5c:	46bd      	mov	sp, r7
 8019d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d62:	4770      	bx	lr
 8019d64:	effffffe 	.word	0xeffffffe

08019d68 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8019d68:	b580      	push	{r7, lr}
 8019d6a:	b084      	sub	sp, #16
 8019d6c:	af00      	add	r7, sp, #0
 8019d6e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8019d70:	687b      	ldr	r3, [r7, #4]
 8019d72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8019d74:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8019d76:	68fb      	ldr	r3, [r7, #12]
 8019d78:	2200      	movs	r2, #0
 8019d7a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8019d7e:	68f8      	ldr	r0, [r7, #12]
 8019d80:	f7fe fe2e 	bl	80189e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8019d84:	bf00      	nop
 8019d86:	3710      	adds	r7, #16
 8019d88:	46bd      	mov	sp, r7
 8019d8a:	bd80      	pop	{r7, pc}

08019d8c <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8019d8c:	b480      	push	{r7}
 8019d8e:	b08f      	sub	sp, #60	@ 0x3c
 8019d90:	af00      	add	r7, sp, #0
 8019d92:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8019d94:	687b      	ldr	r3, [r7, #4]
 8019d96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8019d9a:	2b21      	cmp	r3, #33	@ 0x21
 8019d9c:	d14c      	bne.n	8019e38 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8019d9e:	687b      	ldr	r3, [r7, #4]
 8019da0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8019da4:	b29b      	uxth	r3, r3
 8019da6:	2b00      	cmp	r3, #0
 8019da8:	d132      	bne.n	8019e10 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8019daa:	687b      	ldr	r3, [r7, #4]
 8019dac:	681b      	ldr	r3, [r3, #0]
 8019dae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019db0:	6a3b      	ldr	r3, [r7, #32]
 8019db2:	e853 3f00 	ldrex	r3, [r3]
 8019db6:	61fb      	str	r3, [r7, #28]
   return(result);
 8019db8:	69fb      	ldr	r3, [r7, #28]
 8019dba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8019dbe:	637b      	str	r3, [r7, #52]	@ 0x34
 8019dc0:	687b      	ldr	r3, [r7, #4]
 8019dc2:	681b      	ldr	r3, [r3, #0]
 8019dc4:	461a      	mov	r2, r3
 8019dc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019dc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8019dca:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019dcc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8019dce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8019dd0:	e841 2300 	strex	r3, r2, [r1]
 8019dd4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8019dd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019dd8:	2b00      	cmp	r3, #0
 8019dda:	d1e6      	bne.n	8019daa <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8019ddc:	687b      	ldr	r3, [r7, #4]
 8019dde:	681b      	ldr	r3, [r3, #0]
 8019de0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019de2:	68fb      	ldr	r3, [r7, #12]
 8019de4:	e853 3f00 	ldrex	r3, [r3]
 8019de8:	60bb      	str	r3, [r7, #8]
   return(result);
 8019dea:	68bb      	ldr	r3, [r7, #8]
 8019dec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8019df0:	633b      	str	r3, [r7, #48]	@ 0x30
 8019df2:	687b      	ldr	r3, [r7, #4]
 8019df4:	681b      	ldr	r3, [r3, #0]
 8019df6:	461a      	mov	r2, r3
 8019df8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019dfa:	61bb      	str	r3, [r7, #24]
 8019dfc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019dfe:	6979      	ldr	r1, [r7, #20]
 8019e00:	69ba      	ldr	r2, [r7, #24]
 8019e02:	e841 2300 	strex	r3, r2, [r1]
 8019e06:	613b      	str	r3, [r7, #16]
   return(result);
 8019e08:	693b      	ldr	r3, [r7, #16]
 8019e0a:	2b00      	cmp	r3, #0
 8019e0c:	d1e6      	bne.n	8019ddc <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8019e0e:	e013      	b.n	8019e38 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8019e10:	687b      	ldr	r3, [r7, #4]
 8019e12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8019e14:	781a      	ldrb	r2, [r3, #0]
 8019e16:	687b      	ldr	r3, [r7, #4]
 8019e18:	681b      	ldr	r3, [r3, #0]
 8019e1a:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 8019e1c:	687b      	ldr	r3, [r7, #4]
 8019e1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8019e20:	1c5a      	adds	r2, r3, #1
 8019e22:	687b      	ldr	r3, [r7, #4]
 8019e24:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 8019e26:	687b      	ldr	r3, [r7, #4]
 8019e28:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8019e2c:	b29b      	uxth	r3, r3
 8019e2e:	3b01      	subs	r3, #1
 8019e30:	b29a      	uxth	r2, r3
 8019e32:	687b      	ldr	r3, [r7, #4]
 8019e34:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 8019e38:	bf00      	nop
 8019e3a:	373c      	adds	r7, #60	@ 0x3c
 8019e3c:	46bd      	mov	sp, r7
 8019e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019e42:	4770      	bx	lr

08019e44 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8019e44:	b480      	push	{r7}
 8019e46:	b091      	sub	sp, #68	@ 0x44
 8019e48:	af00      	add	r7, sp, #0
 8019e4a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8019e4c:	687b      	ldr	r3, [r7, #4]
 8019e4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8019e52:	2b21      	cmp	r3, #33	@ 0x21
 8019e54:	d151      	bne.n	8019efa <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8019e56:	687b      	ldr	r3, [r7, #4]
 8019e58:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8019e5c:	b29b      	uxth	r3, r3
 8019e5e:	2b00      	cmp	r3, #0
 8019e60:	d132      	bne.n	8019ec8 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8019e62:	687b      	ldr	r3, [r7, #4]
 8019e64:	681b      	ldr	r3, [r3, #0]
 8019e66:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019e68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019e6a:	e853 3f00 	ldrex	r3, [r3]
 8019e6e:	623b      	str	r3, [r7, #32]
   return(result);
 8019e70:	6a3b      	ldr	r3, [r7, #32]
 8019e72:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8019e76:	63bb      	str	r3, [r7, #56]	@ 0x38
 8019e78:	687b      	ldr	r3, [r7, #4]
 8019e7a:	681b      	ldr	r3, [r3, #0]
 8019e7c:	461a      	mov	r2, r3
 8019e7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019e80:	633b      	str	r3, [r7, #48]	@ 0x30
 8019e82:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019e84:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8019e86:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8019e88:	e841 2300 	strex	r3, r2, [r1]
 8019e8c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8019e8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019e90:	2b00      	cmp	r3, #0
 8019e92:	d1e6      	bne.n	8019e62 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8019e94:	687b      	ldr	r3, [r7, #4]
 8019e96:	681b      	ldr	r3, [r3, #0]
 8019e98:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019e9a:	693b      	ldr	r3, [r7, #16]
 8019e9c:	e853 3f00 	ldrex	r3, [r3]
 8019ea0:	60fb      	str	r3, [r7, #12]
   return(result);
 8019ea2:	68fb      	ldr	r3, [r7, #12]
 8019ea4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8019ea8:	637b      	str	r3, [r7, #52]	@ 0x34
 8019eaa:	687b      	ldr	r3, [r7, #4]
 8019eac:	681b      	ldr	r3, [r3, #0]
 8019eae:	461a      	mov	r2, r3
 8019eb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019eb2:	61fb      	str	r3, [r7, #28]
 8019eb4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019eb6:	69b9      	ldr	r1, [r7, #24]
 8019eb8:	69fa      	ldr	r2, [r7, #28]
 8019eba:	e841 2300 	strex	r3, r2, [r1]
 8019ebe:	617b      	str	r3, [r7, #20]
   return(result);
 8019ec0:	697b      	ldr	r3, [r7, #20]
 8019ec2:	2b00      	cmp	r3, #0
 8019ec4:	d1e6      	bne.n	8019e94 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8019ec6:	e018      	b.n	8019efa <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8019ec8:	687b      	ldr	r3, [r7, #4]
 8019eca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8019ecc:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8019ece:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019ed0:	881b      	ldrh	r3, [r3, #0]
 8019ed2:	461a      	mov	r2, r3
 8019ed4:	687b      	ldr	r3, [r7, #4]
 8019ed6:	681b      	ldr	r3, [r3, #0]
 8019ed8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8019edc:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 8019ede:	687b      	ldr	r3, [r7, #4]
 8019ee0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8019ee2:	1c9a      	adds	r2, r3, #2
 8019ee4:	687b      	ldr	r3, [r7, #4]
 8019ee6:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 8019ee8:	687b      	ldr	r3, [r7, #4]
 8019eea:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8019eee:	b29b      	uxth	r3, r3
 8019ef0:	3b01      	subs	r3, #1
 8019ef2:	b29a      	uxth	r2, r3
 8019ef4:	687b      	ldr	r3, [r7, #4]
 8019ef6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 8019efa:	bf00      	nop
 8019efc:	3744      	adds	r7, #68	@ 0x44
 8019efe:	46bd      	mov	sp, r7
 8019f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f04:	4770      	bx	lr

08019f06 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8019f06:	b480      	push	{r7}
 8019f08:	b091      	sub	sp, #68	@ 0x44
 8019f0a:	af00      	add	r7, sp, #0
 8019f0c:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8019f0e:	687b      	ldr	r3, [r7, #4]
 8019f10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8019f14:	2b21      	cmp	r3, #33	@ 0x21
 8019f16:	d160      	bne.n	8019fda <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8019f18:	687b      	ldr	r3, [r7, #4]
 8019f1a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8019f1e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8019f20:	e057      	b.n	8019fd2 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 8019f22:	687b      	ldr	r3, [r7, #4]
 8019f24:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8019f28:	b29b      	uxth	r3, r3
 8019f2a:	2b00      	cmp	r3, #0
 8019f2c:	d133      	bne.n	8019f96 <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8019f2e:	687b      	ldr	r3, [r7, #4]
 8019f30:	681b      	ldr	r3, [r3, #0]
 8019f32:	3308      	adds	r3, #8
 8019f34:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019f36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019f38:	e853 3f00 	ldrex	r3, [r3]
 8019f3c:	623b      	str	r3, [r7, #32]
   return(result);
 8019f3e:	6a3b      	ldr	r3, [r7, #32]
 8019f40:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8019f44:	63bb      	str	r3, [r7, #56]	@ 0x38
 8019f46:	687b      	ldr	r3, [r7, #4]
 8019f48:	681b      	ldr	r3, [r3, #0]
 8019f4a:	3308      	adds	r3, #8
 8019f4c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8019f4e:	633a      	str	r2, [r7, #48]	@ 0x30
 8019f50:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019f52:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8019f54:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8019f56:	e841 2300 	strex	r3, r2, [r1]
 8019f5a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8019f5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019f5e:	2b00      	cmp	r3, #0
 8019f60:	d1e5      	bne.n	8019f2e <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8019f62:	687b      	ldr	r3, [r7, #4]
 8019f64:	681b      	ldr	r3, [r3, #0]
 8019f66:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019f68:	693b      	ldr	r3, [r7, #16]
 8019f6a:	e853 3f00 	ldrex	r3, [r3]
 8019f6e:	60fb      	str	r3, [r7, #12]
   return(result);
 8019f70:	68fb      	ldr	r3, [r7, #12]
 8019f72:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8019f76:	637b      	str	r3, [r7, #52]	@ 0x34
 8019f78:	687b      	ldr	r3, [r7, #4]
 8019f7a:	681b      	ldr	r3, [r3, #0]
 8019f7c:	461a      	mov	r2, r3
 8019f7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019f80:	61fb      	str	r3, [r7, #28]
 8019f82:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019f84:	69b9      	ldr	r1, [r7, #24]
 8019f86:	69fa      	ldr	r2, [r7, #28]
 8019f88:	e841 2300 	strex	r3, r2, [r1]
 8019f8c:	617b      	str	r3, [r7, #20]
   return(result);
 8019f8e:	697b      	ldr	r3, [r7, #20]
 8019f90:	2b00      	cmp	r3, #0
 8019f92:	d1e6      	bne.n	8019f62 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8019f94:	e021      	b.n	8019fda <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8019f96:	687b      	ldr	r3, [r7, #4]
 8019f98:	681b      	ldr	r3, [r3, #0]
 8019f9a:	69db      	ldr	r3, [r3, #28]
 8019f9c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8019fa0:	2b00      	cmp	r3, #0
 8019fa2:	d013      	beq.n	8019fcc <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8019fa4:	687b      	ldr	r3, [r7, #4]
 8019fa6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8019fa8:	781a      	ldrb	r2, [r3, #0]
 8019faa:	687b      	ldr	r3, [r7, #4]
 8019fac:	681b      	ldr	r3, [r3, #0]
 8019fae:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 8019fb0:	687b      	ldr	r3, [r7, #4]
 8019fb2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8019fb4:	1c5a      	adds	r2, r3, #1
 8019fb6:	687b      	ldr	r3, [r7, #4]
 8019fb8:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 8019fba:	687b      	ldr	r3, [r7, #4]
 8019fbc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8019fc0:	b29b      	uxth	r3, r3
 8019fc2:	3b01      	subs	r3, #1
 8019fc4:	b29a      	uxth	r2, r3
 8019fc6:	687b      	ldr	r3, [r7, #4]
 8019fc8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8019fcc:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8019fce:	3b01      	subs	r3, #1
 8019fd0:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8019fd2:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8019fd4:	2b00      	cmp	r3, #0
 8019fd6:	d1a4      	bne.n	8019f22 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8019fd8:	e7ff      	b.n	8019fda <UART_TxISR_8BIT_FIFOEN+0xd4>
 8019fda:	bf00      	nop
 8019fdc:	3744      	adds	r7, #68	@ 0x44
 8019fde:	46bd      	mov	sp, r7
 8019fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019fe4:	4770      	bx	lr

08019fe6 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8019fe6:	b480      	push	{r7}
 8019fe8:	b091      	sub	sp, #68	@ 0x44
 8019fea:	af00      	add	r7, sp, #0
 8019fec:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8019fee:	687b      	ldr	r3, [r7, #4]
 8019ff0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8019ff4:	2b21      	cmp	r3, #33	@ 0x21
 8019ff6:	d165      	bne.n	801a0c4 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8019ff8:	687b      	ldr	r3, [r7, #4]
 8019ffa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8019ffe:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 801a000:	e05c      	b.n	801a0bc <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 801a002:	687b      	ldr	r3, [r7, #4]
 801a004:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 801a008:	b29b      	uxth	r3, r3
 801a00a:	2b00      	cmp	r3, #0
 801a00c:	d133      	bne.n	801a076 <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 801a00e:	687b      	ldr	r3, [r7, #4]
 801a010:	681b      	ldr	r3, [r3, #0]
 801a012:	3308      	adds	r3, #8
 801a014:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a016:	6a3b      	ldr	r3, [r7, #32]
 801a018:	e853 3f00 	ldrex	r3, [r3]
 801a01c:	61fb      	str	r3, [r7, #28]
   return(result);
 801a01e:	69fb      	ldr	r3, [r7, #28]
 801a020:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 801a024:	637b      	str	r3, [r7, #52]	@ 0x34
 801a026:	687b      	ldr	r3, [r7, #4]
 801a028:	681b      	ldr	r3, [r3, #0]
 801a02a:	3308      	adds	r3, #8
 801a02c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801a02e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801a030:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a032:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801a034:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801a036:	e841 2300 	strex	r3, r2, [r1]
 801a03a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 801a03c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a03e:	2b00      	cmp	r3, #0
 801a040:	d1e5      	bne.n	801a00e <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801a042:	687b      	ldr	r3, [r7, #4]
 801a044:	681b      	ldr	r3, [r3, #0]
 801a046:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a048:	68fb      	ldr	r3, [r7, #12]
 801a04a:	e853 3f00 	ldrex	r3, [r3]
 801a04e:	60bb      	str	r3, [r7, #8]
   return(result);
 801a050:	68bb      	ldr	r3, [r7, #8]
 801a052:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801a056:	633b      	str	r3, [r7, #48]	@ 0x30
 801a058:	687b      	ldr	r3, [r7, #4]
 801a05a:	681b      	ldr	r3, [r3, #0]
 801a05c:	461a      	mov	r2, r3
 801a05e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a060:	61bb      	str	r3, [r7, #24]
 801a062:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a064:	6979      	ldr	r1, [r7, #20]
 801a066:	69ba      	ldr	r2, [r7, #24]
 801a068:	e841 2300 	strex	r3, r2, [r1]
 801a06c:	613b      	str	r3, [r7, #16]
   return(result);
 801a06e:	693b      	ldr	r3, [r7, #16]
 801a070:	2b00      	cmp	r3, #0
 801a072:	d1e6      	bne.n	801a042 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 801a074:	e026      	b.n	801a0c4 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 801a076:	687b      	ldr	r3, [r7, #4]
 801a078:	681b      	ldr	r3, [r3, #0]
 801a07a:	69db      	ldr	r3, [r3, #28]
 801a07c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801a080:	2b00      	cmp	r3, #0
 801a082:	d018      	beq.n	801a0b6 <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 801a084:	687b      	ldr	r3, [r7, #4]
 801a086:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801a088:	63bb      	str	r3, [r7, #56]	@ 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 801a08a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a08c:	881b      	ldrh	r3, [r3, #0]
 801a08e:	461a      	mov	r2, r3
 801a090:	687b      	ldr	r3, [r7, #4]
 801a092:	681b      	ldr	r3, [r3, #0]
 801a094:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801a098:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 801a09a:	687b      	ldr	r3, [r7, #4]
 801a09c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801a09e:	1c9a      	adds	r2, r3, #2
 801a0a0:	687b      	ldr	r3, [r7, #4]
 801a0a2:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 801a0a4:	687b      	ldr	r3, [r7, #4]
 801a0a6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 801a0aa:	b29b      	uxth	r3, r3
 801a0ac:	3b01      	subs	r3, #1
 801a0ae:	b29a      	uxth	r2, r3
 801a0b0:	687b      	ldr	r3, [r7, #4]
 801a0b2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 801a0b6:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801a0b8:	3b01      	subs	r3, #1
 801a0ba:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 801a0bc:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801a0be:	2b00      	cmp	r3, #0
 801a0c0:	d19f      	bne.n	801a002 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 801a0c2:	e7ff      	b.n	801a0c4 <UART_TxISR_16BIT_FIFOEN+0xde>
 801a0c4:	bf00      	nop
 801a0c6:	3744      	adds	r7, #68	@ 0x44
 801a0c8:	46bd      	mov	sp, r7
 801a0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a0ce:	4770      	bx	lr

0801a0d0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 801a0d0:	b580      	push	{r7, lr}
 801a0d2:	b088      	sub	sp, #32
 801a0d4:	af00      	add	r7, sp, #0
 801a0d6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801a0d8:	687b      	ldr	r3, [r7, #4]
 801a0da:	681b      	ldr	r3, [r3, #0]
 801a0dc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a0de:	68fb      	ldr	r3, [r7, #12]
 801a0e0:	e853 3f00 	ldrex	r3, [r3]
 801a0e4:	60bb      	str	r3, [r7, #8]
   return(result);
 801a0e6:	68bb      	ldr	r3, [r7, #8]
 801a0e8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801a0ec:	61fb      	str	r3, [r7, #28]
 801a0ee:	687b      	ldr	r3, [r7, #4]
 801a0f0:	681b      	ldr	r3, [r3, #0]
 801a0f2:	461a      	mov	r2, r3
 801a0f4:	69fb      	ldr	r3, [r7, #28]
 801a0f6:	61bb      	str	r3, [r7, #24]
 801a0f8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a0fa:	6979      	ldr	r1, [r7, #20]
 801a0fc:	69ba      	ldr	r2, [r7, #24]
 801a0fe:	e841 2300 	strex	r3, r2, [r1]
 801a102:	613b      	str	r3, [r7, #16]
   return(result);
 801a104:	693b      	ldr	r3, [r7, #16]
 801a106:	2b00      	cmp	r3, #0
 801a108:	d1e6      	bne.n	801a0d8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801a10a:	687b      	ldr	r3, [r7, #4]
 801a10c:	2220      	movs	r2, #32
 801a10e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 801a112:	687b      	ldr	r3, [r7, #4]
 801a114:	2200      	movs	r2, #0
 801a116:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 801a118:	6878      	ldr	r0, [r7, #4]
 801a11a:	f7fe fc57 	bl	80189cc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801a11e:	bf00      	nop
 801a120:	3720      	adds	r7, #32
 801a122:	46bd      	mov	sp, r7
 801a124:	bd80      	pop	{r7, pc}
	...

0801a128 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 801a128:	b580      	push	{r7, lr}
 801a12a:	b09c      	sub	sp, #112	@ 0x70
 801a12c:	af00      	add	r7, sp, #0
 801a12e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 801a130:	687b      	ldr	r3, [r7, #4]
 801a132:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801a136:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801a13a:	687b      	ldr	r3, [r7, #4]
 801a13c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801a140:	2b22      	cmp	r3, #34	@ 0x22
 801a142:	f040 80be 	bne.w	801a2c2 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801a146:	687b      	ldr	r3, [r7, #4]
 801a148:	681b      	ldr	r3, [r3, #0]
 801a14a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a14c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 801a150:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 801a154:	b2d9      	uxtb	r1, r3
 801a156:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 801a15a:	b2da      	uxtb	r2, r3
 801a15c:	687b      	ldr	r3, [r7, #4]
 801a15e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801a160:	400a      	ands	r2, r1
 801a162:	b2d2      	uxtb	r2, r2
 801a164:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 801a166:	687b      	ldr	r3, [r7, #4]
 801a168:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801a16a:	1c5a      	adds	r2, r3, #1
 801a16c:	687b      	ldr	r3, [r7, #4]
 801a16e:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 801a170:	687b      	ldr	r3, [r7, #4]
 801a172:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801a176:	b29b      	uxth	r3, r3
 801a178:	3b01      	subs	r3, #1
 801a17a:	b29a      	uxth	r2, r3
 801a17c:	687b      	ldr	r3, [r7, #4]
 801a17e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 801a182:	687b      	ldr	r3, [r7, #4]
 801a184:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801a188:	b29b      	uxth	r3, r3
 801a18a:	2b00      	cmp	r3, #0
 801a18c:	f040 80a1 	bne.w	801a2d2 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801a190:	687b      	ldr	r3, [r7, #4]
 801a192:	681b      	ldr	r3, [r3, #0]
 801a194:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a196:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801a198:	e853 3f00 	ldrex	r3, [r3]
 801a19c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 801a19e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801a1a0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801a1a4:	66bb      	str	r3, [r7, #104]	@ 0x68
 801a1a6:	687b      	ldr	r3, [r7, #4]
 801a1a8:	681b      	ldr	r3, [r3, #0]
 801a1aa:	461a      	mov	r2, r3
 801a1ac:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801a1ae:	65bb      	str	r3, [r7, #88]	@ 0x58
 801a1b0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a1b2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801a1b4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801a1b6:	e841 2300 	strex	r3, r2, [r1]
 801a1ba:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 801a1bc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801a1be:	2b00      	cmp	r3, #0
 801a1c0:	d1e6      	bne.n	801a190 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801a1c2:	687b      	ldr	r3, [r7, #4]
 801a1c4:	681b      	ldr	r3, [r3, #0]
 801a1c6:	3308      	adds	r3, #8
 801a1c8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a1ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a1cc:	e853 3f00 	ldrex	r3, [r3]
 801a1d0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 801a1d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a1d4:	f023 0301 	bic.w	r3, r3, #1
 801a1d8:	667b      	str	r3, [r7, #100]	@ 0x64
 801a1da:	687b      	ldr	r3, [r7, #4]
 801a1dc:	681b      	ldr	r3, [r3, #0]
 801a1de:	3308      	adds	r3, #8
 801a1e0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 801a1e2:	647a      	str	r2, [r7, #68]	@ 0x44
 801a1e4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a1e6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801a1e8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801a1ea:	e841 2300 	strex	r3, r2, [r1]
 801a1ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 801a1f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a1f2:	2b00      	cmp	r3, #0
 801a1f4:	d1e5      	bne.n	801a1c2 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801a1f6:	687b      	ldr	r3, [r7, #4]
 801a1f8:	2220      	movs	r2, #32
 801a1fa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801a1fe:	687b      	ldr	r3, [r7, #4]
 801a200:	2200      	movs	r2, #0
 801a202:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 801a204:	687b      	ldr	r3, [r7, #4]
 801a206:	2200      	movs	r2, #0
 801a208:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801a20a:	687b      	ldr	r3, [r7, #4]
 801a20c:	681b      	ldr	r3, [r3, #0]
 801a20e:	4a33      	ldr	r2, [pc, #204]	@ (801a2dc <UART_RxISR_8BIT+0x1b4>)
 801a210:	4293      	cmp	r3, r2
 801a212:	d01f      	beq.n	801a254 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801a214:	687b      	ldr	r3, [r7, #4]
 801a216:	681b      	ldr	r3, [r3, #0]
 801a218:	685b      	ldr	r3, [r3, #4]
 801a21a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801a21e:	2b00      	cmp	r3, #0
 801a220:	d018      	beq.n	801a254 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801a222:	687b      	ldr	r3, [r7, #4]
 801a224:	681b      	ldr	r3, [r3, #0]
 801a226:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a228:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a22a:	e853 3f00 	ldrex	r3, [r3]
 801a22e:	623b      	str	r3, [r7, #32]
   return(result);
 801a230:	6a3b      	ldr	r3, [r7, #32]
 801a232:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 801a236:	663b      	str	r3, [r7, #96]	@ 0x60
 801a238:	687b      	ldr	r3, [r7, #4]
 801a23a:	681b      	ldr	r3, [r3, #0]
 801a23c:	461a      	mov	r2, r3
 801a23e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801a240:	633b      	str	r3, [r7, #48]	@ 0x30
 801a242:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a244:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801a246:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801a248:	e841 2300 	strex	r3, r2, [r1]
 801a24c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 801a24e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a250:	2b00      	cmp	r3, #0
 801a252:	d1e6      	bne.n	801a222 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801a254:	687b      	ldr	r3, [r7, #4]
 801a256:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a258:	2b01      	cmp	r3, #1
 801a25a:	d12e      	bne.n	801a2ba <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801a25c:	687b      	ldr	r3, [r7, #4]
 801a25e:	2200      	movs	r2, #0
 801a260:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801a262:	687b      	ldr	r3, [r7, #4]
 801a264:	681b      	ldr	r3, [r3, #0]
 801a266:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a268:	693b      	ldr	r3, [r7, #16]
 801a26a:	e853 3f00 	ldrex	r3, [r3]
 801a26e:	60fb      	str	r3, [r7, #12]
   return(result);
 801a270:	68fb      	ldr	r3, [r7, #12]
 801a272:	f023 0310 	bic.w	r3, r3, #16
 801a276:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801a278:	687b      	ldr	r3, [r7, #4]
 801a27a:	681b      	ldr	r3, [r3, #0]
 801a27c:	461a      	mov	r2, r3
 801a27e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801a280:	61fb      	str	r3, [r7, #28]
 801a282:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a284:	69b9      	ldr	r1, [r7, #24]
 801a286:	69fa      	ldr	r2, [r7, #28]
 801a288:	e841 2300 	strex	r3, r2, [r1]
 801a28c:	617b      	str	r3, [r7, #20]
   return(result);
 801a28e:	697b      	ldr	r3, [r7, #20]
 801a290:	2b00      	cmp	r3, #0
 801a292:	d1e6      	bne.n	801a262 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801a294:	687b      	ldr	r3, [r7, #4]
 801a296:	681b      	ldr	r3, [r3, #0]
 801a298:	69db      	ldr	r3, [r3, #28]
 801a29a:	f003 0310 	and.w	r3, r3, #16
 801a29e:	2b10      	cmp	r3, #16
 801a2a0:	d103      	bne.n	801a2aa <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801a2a2:	687b      	ldr	r3, [r7, #4]
 801a2a4:	681b      	ldr	r3, [r3, #0]
 801a2a6:	2210      	movs	r2, #16
 801a2a8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801a2aa:	687b      	ldr	r3, [r7, #4]
 801a2ac:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801a2b0:	4619      	mov	r1, r3
 801a2b2:	6878      	ldr	r0, [r7, #4]
 801a2b4:	f7fe fb9e 	bl	80189f4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801a2b8:	e00b      	b.n	801a2d2 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 801a2ba:	6878      	ldr	r0, [r7, #4]
 801a2bc:	f7ec f986 	bl	80065cc <HAL_UART_RxCpltCallback>
}
 801a2c0:	e007      	b.n	801a2d2 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801a2c2:	687b      	ldr	r3, [r7, #4]
 801a2c4:	681b      	ldr	r3, [r3, #0]
 801a2c6:	699a      	ldr	r2, [r3, #24]
 801a2c8:	687b      	ldr	r3, [r7, #4]
 801a2ca:	681b      	ldr	r3, [r3, #0]
 801a2cc:	f042 0208 	orr.w	r2, r2, #8
 801a2d0:	619a      	str	r2, [r3, #24]
}
 801a2d2:	bf00      	nop
 801a2d4:	3770      	adds	r7, #112	@ 0x70
 801a2d6:	46bd      	mov	sp, r7
 801a2d8:	bd80      	pop	{r7, pc}
 801a2da:	bf00      	nop
 801a2dc:	58000c00 	.word	0x58000c00

0801a2e0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 801a2e0:	b580      	push	{r7, lr}
 801a2e2:	b09c      	sub	sp, #112	@ 0x70
 801a2e4:	af00      	add	r7, sp, #0
 801a2e6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 801a2e8:	687b      	ldr	r3, [r7, #4]
 801a2ea:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801a2ee:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801a2f2:	687b      	ldr	r3, [r7, #4]
 801a2f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801a2f8:	2b22      	cmp	r3, #34	@ 0x22
 801a2fa:	f040 80be 	bne.w	801a47a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801a2fe:	687b      	ldr	r3, [r7, #4]
 801a300:	681b      	ldr	r3, [r3, #0]
 801a302:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a304:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 801a308:	687b      	ldr	r3, [r7, #4]
 801a30a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801a30c:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 801a30e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 801a312:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 801a316:	4013      	ands	r3, r2
 801a318:	b29a      	uxth	r2, r3
 801a31a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801a31c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 801a31e:	687b      	ldr	r3, [r7, #4]
 801a320:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801a322:	1c9a      	adds	r2, r3, #2
 801a324:	687b      	ldr	r3, [r7, #4]
 801a326:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 801a328:	687b      	ldr	r3, [r7, #4]
 801a32a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801a32e:	b29b      	uxth	r3, r3
 801a330:	3b01      	subs	r3, #1
 801a332:	b29a      	uxth	r2, r3
 801a334:	687b      	ldr	r3, [r7, #4]
 801a336:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 801a33a:	687b      	ldr	r3, [r7, #4]
 801a33c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801a340:	b29b      	uxth	r3, r3
 801a342:	2b00      	cmp	r3, #0
 801a344:	f040 80a1 	bne.w	801a48a <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801a348:	687b      	ldr	r3, [r7, #4]
 801a34a:	681b      	ldr	r3, [r3, #0]
 801a34c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a34e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801a350:	e853 3f00 	ldrex	r3, [r3]
 801a354:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 801a356:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801a358:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801a35c:	667b      	str	r3, [r7, #100]	@ 0x64
 801a35e:	687b      	ldr	r3, [r7, #4]
 801a360:	681b      	ldr	r3, [r3, #0]
 801a362:	461a      	mov	r2, r3
 801a364:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801a366:	657b      	str	r3, [r7, #84]	@ 0x54
 801a368:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a36a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801a36c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801a36e:	e841 2300 	strex	r3, r2, [r1]
 801a372:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 801a374:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801a376:	2b00      	cmp	r3, #0
 801a378:	d1e6      	bne.n	801a348 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801a37a:	687b      	ldr	r3, [r7, #4]
 801a37c:	681b      	ldr	r3, [r3, #0]
 801a37e:	3308      	adds	r3, #8
 801a380:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a382:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a384:	e853 3f00 	ldrex	r3, [r3]
 801a388:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 801a38a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a38c:	f023 0301 	bic.w	r3, r3, #1
 801a390:	663b      	str	r3, [r7, #96]	@ 0x60
 801a392:	687b      	ldr	r3, [r7, #4]
 801a394:	681b      	ldr	r3, [r3, #0]
 801a396:	3308      	adds	r3, #8
 801a398:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 801a39a:	643a      	str	r2, [r7, #64]	@ 0x40
 801a39c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a39e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801a3a0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801a3a2:	e841 2300 	strex	r3, r2, [r1]
 801a3a6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 801a3a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a3aa:	2b00      	cmp	r3, #0
 801a3ac:	d1e5      	bne.n	801a37a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801a3ae:	687b      	ldr	r3, [r7, #4]
 801a3b0:	2220      	movs	r2, #32
 801a3b2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801a3b6:	687b      	ldr	r3, [r7, #4]
 801a3b8:	2200      	movs	r2, #0
 801a3ba:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 801a3bc:	687b      	ldr	r3, [r7, #4]
 801a3be:	2200      	movs	r2, #0
 801a3c0:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801a3c2:	687b      	ldr	r3, [r7, #4]
 801a3c4:	681b      	ldr	r3, [r3, #0]
 801a3c6:	4a33      	ldr	r2, [pc, #204]	@ (801a494 <UART_RxISR_16BIT+0x1b4>)
 801a3c8:	4293      	cmp	r3, r2
 801a3ca:	d01f      	beq.n	801a40c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801a3cc:	687b      	ldr	r3, [r7, #4]
 801a3ce:	681b      	ldr	r3, [r3, #0]
 801a3d0:	685b      	ldr	r3, [r3, #4]
 801a3d2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801a3d6:	2b00      	cmp	r3, #0
 801a3d8:	d018      	beq.n	801a40c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801a3da:	687b      	ldr	r3, [r7, #4]
 801a3dc:	681b      	ldr	r3, [r3, #0]
 801a3de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a3e0:	6a3b      	ldr	r3, [r7, #32]
 801a3e2:	e853 3f00 	ldrex	r3, [r3]
 801a3e6:	61fb      	str	r3, [r7, #28]
   return(result);
 801a3e8:	69fb      	ldr	r3, [r7, #28]
 801a3ea:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 801a3ee:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801a3f0:	687b      	ldr	r3, [r7, #4]
 801a3f2:	681b      	ldr	r3, [r3, #0]
 801a3f4:	461a      	mov	r2, r3
 801a3f6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801a3f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801a3fa:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a3fc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801a3fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801a400:	e841 2300 	strex	r3, r2, [r1]
 801a404:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 801a406:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a408:	2b00      	cmp	r3, #0
 801a40a:	d1e6      	bne.n	801a3da <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801a40c:	687b      	ldr	r3, [r7, #4]
 801a40e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a410:	2b01      	cmp	r3, #1
 801a412:	d12e      	bne.n	801a472 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801a414:	687b      	ldr	r3, [r7, #4]
 801a416:	2200      	movs	r2, #0
 801a418:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801a41a:	687b      	ldr	r3, [r7, #4]
 801a41c:	681b      	ldr	r3, [r3, #0]
 801a41e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a420:	68fb      	ldr	r3, [r7, #12]
 801a422:	e853 3f00 	ldrex	r3, [r3]
 801a426:	60bb      	str	r3, [r7, #8]
   return(result);
 801a428:	68bb      	ldr	r3, [r7, #8]
 801a42a:	f023 0310 	bic.w	r3, r3, #16
 801a42e:	65bb      	str	r3, [r7, #88]	@ 0x58
 801a430:	687b      	ldr	r3, [r7, #4]
 801a432:	681b      	ldr	r3, [r3, #0]
 801a434:	461a      	mov	r2, r3
 801a436:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801a438:	61bb      	str	r3, [r7, #24]
 801a43a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a43c:	6979      	ldr	r1, [r7, #20]
 801a43e:	69ba      	ldr	r2, [r7, #24]
 801a440:	e841 2300 	strex	r3, r2, [r1]
 801a444:	613b      	str	r3, [r7, #16]
   return(result);
 801a446:	693b      	ldr	r3, [r7, #16]
 801a448:	2b00      	cmp	r3, #0
 801a44a:	d1e6      	bne.n	801a41a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801a44c:	687b      	ldr	r3, [r7, #4]
 801a44e:	681b      	ldr	r3, [r3, #0]
 801a450:	69db      	ldr	r3, [r3, #28]
 801a452:	f003 0310 	and.w	r3, r3, #16
 801a456:	2b10      	cmp	r3, #16
 801a458:	d103      	bne.n	801a462 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801a45a:	687b      	ldr	r3, [r7, #4]
 801a45c:	681b      	ldr	r3, [r3, #0]
 801a45e:	2210      	movs	r2, #16
 801a460:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801a462:	687b      	ldr	r3, [r7, #4]
 801a464:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801a468:	4619      	mov	r1, r3
 801a46a:	6878      	ldr	r0, [r7, #4]
 801a46c:	f7fe fac2 	bl	80189f4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801a470:	e00b      	b.n	801a48a <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 801a472:	6878      	ldr	r0, [r7, #4]
 801a474:	f7ec f8aa 	bl	80065cc <HAL_UART_RxCpltCallback>
}
 801a478:	e007      	b.n	801a48a <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801a47a:	687b      	ldr	r3, [r7, #4]
 801a47c:	681b      	ldr	r3, [r3, #0]
 801a47e:	699a      	ldr	r2, [r3, #24]
 801a480:	687b      	ldr	r3, [r7, #4]
 801a482:	681b      	ldr	r3, [r3, #0]
 801a484:	f042 0208 	orr.w	r2, r2, #8
 801a488:	619a      	str	r2, [r3, #24]
}
 801a48a:	bf00      	nop
 801a48c:	3770      	adds	r7, #112	@ 0x70
 801a48e:	46bd      	mov	sp, r7
 801a490:	bd80      	pop	{r7, pc}
 801a492:	bf00      	nop
 801a494:	58000c00 	.word	0x58000c00

0801a498 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 801a498:	b580      	push	{r7, lr}
 801a49a:	b0ac      	sub	sp, #176	@ 0xb0
 801a49c:	af00      	add	r7, sp, #0
 801a49e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 801a4a0:	687b      	ldr	r3, [r7, #4]
 801a4a2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801a4a6:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 801a4aa:	687b      	ldr	r3, [r7, #4]
 801a4ac:	681b      	ldr	r3, [r3, #0]
 801a4ae:	69db      	ldr	r3, [r3, #28]
 801a4b0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 801a4b4:	687b      	ldr	r3, [r7, #4]
 801a4b6:	681b      	ldr	r3, [r3, #0]
 801a4b8:	681b      	ldr	r3, [r3, #0]
 801a4ba:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 801a4be:	687b      	ldr	r3, [r7, #4]
 801a4c0:	681b      	ldr	r3, [r3, #0]
 801a4c2:	689b      	ldr	r3, [r3, #8]
 801a4c4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801a4c8:	687b      	ldr	r3, [r7, #4]
 801a4ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801a4ce:	2b22      	cmp	r3, #34	@ 0x22
 801a4d0:	f040 8181 	bne.w	801a7d6 <UART_RxISR_8BIT_FIFOEN+0x33e>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 801a4d4:	687b      	ldr	r3, [r7, #4]
 801a4d6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 801a4da:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801a4de:	e124      	b.n	801a72a <UART_RxISR_8BIT_FIFOEN+0x292>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801a4e0:	687b      	ldr	r3, [r7, #4]
 801a4e2:	681b      	ldr	r3, [r3, #0]
 801a4e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a4e6:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 801a4ea:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 801a4ee:	b2d9      	uxtb	r1, r3
 801a4f0:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 801a4f4:	b2da      	uxtb	r2, r3
 801a4f6:	687b      	ldr	r3, [r7, #4]
 801a4f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801a4fa:	400a      	ands	r2, r1
 801a4fc:	b2d2      	uxtb	r2, r2
 801a4fe:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 801a500:	687b      	ldr	r3, [r7, #4]
 801a502:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801a504:	1c5a      	adds	r2, r3, #1
 801a506:	687b      	ldr	r3, [r7, #4]
 801a508:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 801a50a:	687b      	ldr	r3, [r7, #4]
 801a50c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801a510:	b29b      	uxth	r3, r3
 801a512:	3b01      	subs	r3, #1
 801a514:	b29a      	uxth	r2, r3
 801a516:	687b      	ldr	r3, [r7, #4]
 801a518:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 801a51c:	687b      	ldr	r3, [r7, #4]
 801a51e:	681b      	ldr	r3, [r3, #0]
 801a520:	69db      	ldr	r3, [r3, #28]
 801a522:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 801a526:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801a52a:	f003 0307 	and.w	r3, r3, #7
 801a52e:	2b00      	cmp	r3, #0
 801a530:	d053      	beq.n	801a5da <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801a532:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801a536:	f003 0301 	and.w	r3, r3, #1
 801a53a:	2b00      	cmp	r3, #0
 801a53c:	d011      	beq.n	801a562 <UART_RxISR_8BIT_FIFOEN+0xca>
 801a53e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801a542:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801a546:	2b00      	cmp	r3, #0
 801a548:	d00b      	beq.n	801a562 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801a54a:	687b      	ldr	r3, [r7, #4]
 801a54c:	681b      	ldr	r3, [r3, #0]
 801a54e:	2201      	movs	r2, #1
 801a550:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 801a552:	687b      	ldr	r3, [r7, #4]
 801a554:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801a558:	f043 0201 	orr.w	r2, r3, #1
 801a55c:	687b      	ldr	r3, [r7, #4]
 801a55e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801a562:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801a566:	f003 0302 	and.w	r3, r3, #2
 801a56a:	2b00      	cmp	r3, #0
 801a56c:	d011      	beq.n	801a592 <UART_RxISR_8BIT_FIFOEN+0xfa>
 801a56e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801a572:	f003 0301 	and.w	r3, r3, #1
 801a576:	2b00      	cmp	r3, #0
 801a578:	d00b      	beq.n	801a592 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801a57a:	687b      	ldr	r3, [r7, #4]
 801a57c:	681b      	ldr	r3, [r3, #0]
 801a57e:	2202      	movs	r2, #2
 801a580:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 801a582:	687b      	ldr	r3, [r7, #4]
 801a584:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801a588:	f043 0204 	orr.w	r2, r3, #4
 801a58c:	687b      	ldr	r3, [r7, #4]
 801a58e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801a592:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801a596:	f003 0304 	and.w	r3, r3, #4
 801a59a:	2b00      	cmp	r3, #0
 801a59c:	d011      	beq.n	801a5c2 <UART_RxISR_8BIT_FIFOEN+0x12a>
 801a59e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801a5a2:	f003 0301 	and.w	r3, r3, #1
 801a5a6:	2b00      	cmp	r3, #0
 801a5a8:	d00b      	beq.n	801a5c2 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801a5aa:	687b      	ldr	r3, [r7, #4]
 801a5ac:	681b      	ldr	r3, [r3, #0]
 801a5ae:	2204      	movs	r2, #4
 801a5b0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 801a5b2:	687b      	ldr	r3, [r7, #4]
 801a5b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801a5b8:	f043 0202 	orr.w	r2, r3, #2
 801a5bc:	687b      	ldr	r3, [r7, #4]
 801a5be:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801a5c2:	687b      	ldr	r3, [r7, #4]
 801a5c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801a5c8:	2b00      	cmp	r3, #0
 801a5ca:	d006      	beq.n	801a5da <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801a5cc:	6878      	ldr	r0, [r7, #4]
 801a5ce:	f7fe fa07 	bl	80189e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 801a5d2:	687b      	ldr	r3, [r7, #4]
 801a5d4:	2200      	movs	r2, #0
 801a5d6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 801a5da:	687b      	ldr	r3, [r7, #4]
 801a5dc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801a5e0:	b29b      	uxth	r3, r3
 801a5e2:	2b00      	cmp	r3, #0
 801a5e4:	f040 80a1 	bne.w	801a72a <UART_RxISR_8BIT_FIFOEN+0x292>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801a5e8:	687b      	ldr	r3, [r7, #4]
 801a5ea:	681b      	ldr	r3, [r3, #0]
 801a5ec:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a5ee:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801a5f0:	e853 3f00 	ldrex	r3, [r3]
 801a5f4:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 801a5f6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801a5f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801a5fc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 801a600:	687b      	ldr	r3, [r7, #4]
 801a602:	681b      	ldr	r3, [r3, #0]
 801a604:	461a      	mov	r2, r3
 801a606:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 801a60a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801a60c:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a60e:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 801a610:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 801a612:	e841 2300 	strex	r3, r2, [r1]
 801a616:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 801a618:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801a61a:	2b00      	cmp	r3, #0
 801a61c:	d1e4      	bne.n	801a5e8 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801a61e:	687b      	ldr	r3, [r7, #4]
 801a620:	681b      	ldr	r3, [r3, #0]
 801a622:	3308      	adds	r3, #8
 801a624:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a626:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801a628:	e853 3f00 	ldrex	r3, [r3]
 801a62c:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 801a62e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801a630:	4b6f      	ldr	r3, [pc, #444]	@ (801a7f0 <UART_RxISR_8BIT_FIFOEN+0x358>)
 801a632:	4013      	ands	r3, r2
 801a634:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 801a638:	687b      	ldr	r3, [r7, #4]
 801a63a:	681b      	ldr	r3, [r3, #0]
 801a63c:	3308      	adds	r3, #8
 801a63e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 801a642:	66ba      	str	r2, [r7, #104]	@ 0x68
 801a644:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a646:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 801a648:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 801a64a:	e841 2300 	strex	r3, r2, [r1]
 801a64e:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 801a650:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801a652:	2b00      	cmp	r3, #0
 801a654:	d1e3      	bne.n	801a61e <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801a656:	687b      	ldr	r3, [r7, #4]
 801a658:	2220      	movs	r2, #32
 801a65a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801a65e:	687b      	ldr	r3, [r7, #4]
 801a660:	2200      	movs	r2, #0
 801a662:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 801a664:	687b      	ldr	r3, [r7, #4]
 801a666:	2200      	movs	r2, #0
 801a668:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801a66a:	687b      	ldr	r3, [r7, #4]
 801a66c:	681b      	ldr	r3, [r3, #0]
 801a66e:	4a61      	ldr	r2, [pc, #388]	@ (801a7f4 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 801a670:	4293      	cmp	r3, r2
 801a672:	d021      	beq.n	801a6b8 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801a674:	687b      	ldr	r3, [r7, #4]
 801a676:	681b      	ldr	r3, [r3, #0]
 801a678:	685b      	ldr	r3, [r3, #4]
 801a67a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801a67e:	2b00      	cmp	r3, #0
 801a680:	d01a      	beq.n	801a6b8 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801a682:	687b      	ldr	r3, [r7, #4]
 801a684:	681b      	ldr	r3, [r3, #0]
 801a686:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a688:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801a68a:	e853 3f00 	ldrex	r3, [r3]
 801a68e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 801a690:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801a692:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 801a696:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 801a69a:	687b      	ldr	r3, [r7, #4]
 801a69c:	681b      	ldr	r3, [r3, #0]
 801a69e:	461a      	mov	r2, r3
 801a6a0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801a6a4:	657b      	str	r3, [r7, #84]	@ 0x54
 801a6a6:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a6a8:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801a6aa:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801a6ac:	e841 2300 	strex	r3, r2, [r1]
 801a6b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 801a6b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801a6b4:	2b00      	cmp	r3, #0
 801a6b6:	d1e4      	bne.n	801a682 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801a6b8:	687b      	ldr	r3, [r7, #4]
 801a6ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a6bc:	2b01      	cmp	r3, #1
 801a6be:	d130      	bne.n	801a722 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801a6c0:	687b      	ldr	r3, [r7, #4]
 801a6c2:	2200      	movs	r2, #0
 801a6c4:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801a6c6:	687b      	ldr	r3, [r7, #4]
 801a6c8:	681b      	ldr	r3, [r3, #0]
 801a6ca:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a6cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a6ce:	e853 3f00 	ldrex	r3, [r3]
 801a6d2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 801a6d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a6d6:	f023 0310 	bic.w	r3, r3, #16
 801a6da:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 801a6de:	687b      	ldr	r3, [r7, #4]
 801a6e0:	681b      	ldr	r3, [r3, #0]
 801a6e2:	461a      	mov	r2, r3
 801a6e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801a6e8:	643b      	str	r3, [r7, #64]	@ 0x40
 801a6ea:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a6ec:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801a6ee:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801a6f0:	e841 2300 	strex	r3, r2, [r1]
 801a6f4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 801a6f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a6f8:	2b00      	cmp	r3, #0
 801a6fa:	d1e4      	bne.n	801a6c6 <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801a6fc:	687b      	ldr	r3, [r7, #4]
 801a6fe:	681b      	ldr	r3, [r3, #0]
 801a700:	69db      	ldr	r3, [r3, #28]
 801a702:	f003 0310 	and.w	r3, r3, #16
 801a706:	2b10      	cmp	r3, #16
 801a708:	d103      	bne.n	801a712 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801a70a:	687b      	ldr	r3, [r7, #4]
 801a70c:	681b      	ldr	r3, [r3, #0]
 801a70e:	2210      	movs	r2, #16
 801a710:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801a712:	687b      	ldr	r3, [r7, #4]
 801a714:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801a718:	4619      	mov	r1, r3
 801a71a:	6878      	ldr	r0, [r7, #4]
 801a71c:	f7fe f96a 	bl	80189f4 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 801a720:	e00e      	b.n	801a740 <UART_RxISR_8BIT_FIFOEN+0x2a8>
          HAL_UART_RxCpltCallback(huart);
 801a722:	6878      	ldr	r0, [r7, #4]
 801a724:	f7eb ff52 	bl	80065cc <HAL_UART_RxCpltCallback>
        break;
 801a728:	e00a      	b.n	801a740 <UART_RxISR_8BIT_FIFOEN+0x2a8>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801a72a:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 801a72e:	2b00      	cmp	r3, #0
 801a730:	d006      	beq.n	801a740 <UART_RxISR_8BIT_FIFOEN+0x2a8>
 801a732:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801a736:	f003 0320 	and.w	r3, r3, #32
 801a73a:	2b00      	cmp	r3, #0
 801a73c:	f47f aed0 	bne.w	801a4e0 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 801a740:	687b      	ldr	r3, [r7, #4]
 801a742:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801a746:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 801a74a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 801a74e:	2b00      	cmp	r3, #0
 801a750:	d049      	beq.n	801a7e6 <UART_RxISR_8BIT_FIFOEN+0x34e>
 801a752:	687b      	ldr	r3, [r7, #4]
 801a754:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 801a758:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 801a75c:	429a      	cmp	r2, r3
 801a75e:	d242      	bcs.n	801a7e6 <UART_RxISR_8BIT_FIFOEN+0x34e>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 801a760:	687b      	ldr	r3, [r7, #4]
 801a762:	681b      	ldr	r3, [r3, #0]
 801a764:	3308      	adds	r3, #8
 801a766:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a768:	6a3b      	ldr	r3, [r7, #32]
 801a76a:	e853 3f00 	ldrex	r3, [r3]
 801a76e:	61fb      	str	r3, [r7, #28]
   return(result);
 801a770:	69fb      	ldr	r3, [r7, #28]
 801a772:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 801a776:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 801a77a:	687b      	ldr	r3, [r7, #4]
 801a77c:	681b      	ldr	r3, [r3, #0]
 801a77e:	3308      	adds	r3, #8
 801a780:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 801a784:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801a786:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a788:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801a78a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801a78c:	e841 2300 	strex	r3, r2, [r1]
 801a790:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 801a792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a794:	2b00      	cmp	r3, #0
 801a796:	d1e3      	bne.n	801a760 <UART_RxISR_8BIT_FIFOEN+0x2c8>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 801a798:	687b      	ldr	r3, [r7, #4]
 801a79a:	4a17      	ldr	r2, [pc, #92]	@ (801a7f8 <UART_RxISR_8BIT_FIFOEN+0x360>)
 801a79c:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 801a79e:	687b      	ldr	r3, [r7, #4]
 801a7a0:	681b      	ldr	r3, [r3, #0]
 801a7a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a7a4:	68fb      	ldr	r3, [r7, #12]
 801a7a6:	e853 3f00 	ldrex	r3, [r3]
 801a7aa:	60bb      	str	r3, [r7, #8]
   return(result);
 801a7ac:	68bb      	ldr	r3, [r7, #8]
 801a7ae:	f043 0320 	orr.w	r3, r3, #32
 801a7b2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 801a7b6:	687b      	ldr	r3, [r7, #4]
 801a7b8:	681b      	ldr	r3, [r3, #0]
 801a7ba:	461a      	mov	r2, r3
 801a7bc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801a7c0:	61bb      	str	r3, [r7, #24]
 801a7c2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a7c4:	6979      	ldr	r1, [r7, #20]
 801a7c6:	69ba      	ldr	r2, [r7, #24]
 801a7c8:	e841 2300 	strex	r3, r2, [r1]
 801a7cc:	613b      	str	r3, [r7, #16]
   return(result);
 801a7ce:	693b      	ldr	r3, [r7, #16]
 801a7d0:	2b00      	cmp	r3, #0
 801a7d2:	d1e4      	bne.n	801a79e <UART_RxISR_8BIT_FIFOEN+0x306>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801a7d4:	e007      	b.n	801a7e6 <UART_RxISR_8BIT_FIFOEN+0x34e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801a7d6:	687b      	ldr	r3, [r7, #4]
 801a7d8:	681b      	ldr	r3, [r3, #0]
 801a7da:	699a      	ldr	r2, [r3, #24]
 801a7dc:	687b      	ldr	r3, [r7, #4]
 801a7de:	681b      	ldr	r3, [r3, #0]
 801a7e0:	f042 0208 	orr.w	r2, r2, #8
 801a7e4:	619a      	str	r2, [r3, #24]
}
 801a7e6:	bf00      	nop
 801a7e8:	37b0      	adds	r7, #176	@ 0xb0
 801a7ea:	46bd      	mov	sp, r7
 801a7ec:	bd80      	pop	{r7, pc}
 801a7ee:	bf00      	nop
 801a7f0:	effffffe 	.word	0xeffffffe
 801a7f4:	58000c00 	.word	0x58000c00
 801a7f8:	0801a129 	.word	0x0801a129

0801a7fc <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 801a7fc:	b580      	push	{r7, lr}
 801a7fe:	b0ae      	sub	sp, #184	@ 0xb8
 801a800:	af00      	add	r7, sp, #0
 801a802:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 801a804:	687b      	ldr	r3, [r7, #4]
 801a806:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801a80a:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 801a80e:	687b      	ldr	r3, [r7, #4]
 801a810:	681b      	ldr	r3, [r3, #0]
 801a812:	69db      	ldr	r3, [r3, #28]
 801a814:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 801a818:	687b      	ldr	r3, [r7, #4]
 801a81a:	681b      	ldr	r3, [r3, #0]
 801a81c:	681b      	ldr	r3, [r3, #0]
 801a81e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 801a822:	687b      	ldr	r3, [r7, #4]
 801a824:	681b      	ldr	r3, [r3, #0]
 801a826:	689b      	ldr	r3, [r3, #8]
 801a828:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801a82c:	687b      	ldr	r3, [r7, #4]
 801a82e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801a832:	2b22      	cmp	r3, #34	@ 0x22
 801a834:	f040 8185 	bne.w	801ab42 <UART_RxISR_16BIT_FIFOEN+0x346>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 801a838:	687b      	ldr	r3, [r7, #4]
 801a83a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 801a83e:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801a842:	e128      	b.n	801aa96 <UART_RxISR_16BIT_FIFOEN+0x29a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801a844:	687b      	ldr	r3, [r7, #4]
 801a846:	681b      	ldr	r3, [r3, #0]
 801a848:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a84a:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 801a84e:	687b      	ldr	r3, [r7, #4]
 801a850:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801a852:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 801a856:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 801a85a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 801a85e:	4013      	ands	r3, r2
 801a860:	b29a      	uxth	r2, r3
 801a862:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801a866:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 801a868:	687b      	ldr	r3, [r7, #4]
 801a86a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801a86c:	1c9a      	adds	r2, r3, #2
 801a86e:	687b      	ldr	r3, [r7, #4]
 801a870:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 801a872:	687b      	ldr	r3, [r7, #4]
 801a874:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801a878:	b29b      	uxth	r3, r3
 801a87a:	3b01      	subs	r3, #1
 801a87c:	b29a      	uxth	r2, r3
 801a87e:	687b      	ldr	r3, [r7, #4]
 801a880:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 801a884:	687b      	ldr	r3, [r7, #4]
 801a886:	681b      	ldr	r3, [r3, #0]
 801a888:	69db      	ldr	r3, [r3, #28]
 801a88a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 801a88e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801a892:	f003 0307 	and.w	r3, r3, #7
 801a896:	2b00      	cmp	r3, #0
 801a898:	d053      	beq.n	801a942 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801a89a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801a89e:	f003 0301 	and.w	r3, r3, #1
 801a8a2:	2b00      	cmp	r3, #0
 801a8a4:	d011      	beq.n	801a8ca <UART_RxISR_16BIT_FIFOEN+0xce>
 801a8a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801a8aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801a8ae:	2b00      	cmp	r3, #0
 801a8b0:	d00b      	beq.n	801a8ca <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801a8b2:	687b      	ldr	r3, [r7, #4]
 801a8b4:	681b      	ldr	r3, [r3, #0]
 801a8b6:	2201      	movs	r2, #1
 801a8b8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 801a8ba:	687b      	ldr	r3, [r7, #4]
 801a8bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801a8c0:	f043 0201 	orr.w	r2, r3, #1
 801a8c4:	687b      	ldr	r3, [r7, #4]
 801a8c6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801a8ca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801a8ce:	f003 0302 	and.w	r3, r3, #2
 801a8d2:	2b00      	cmp	r3, #0
 801a8d4:	d011      	beq.n	801a8fa <UART_RxISR_16BIT_FIFOEN+0xfe>
 801a8d6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 801a8da:	f003 0301 	and.w	r3, r3, #1
 801a8de:	2b00      	cmp	r3, #0
 801a8e0:	d00b      	beq.n	801a8fa <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801a8e2:	687b      	ldr	r3, [r7, #4]
 801a8e4:	681b      	ldr	r3, [r3, #0]
 801a8e6:	2202      	movs	r2, #2
 801a8e8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 801a8ea:	687b      	ldr	r3, [r7, #4]
 801a8ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801a8f0:	f043 0204 	orr.w	r2, r3, #4
 801a8f4:	687b      	ldr	r3, [r7, #4]
 801a8f6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801a8fa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801a8fe:	f003 0304 	and.w	r3, r3, #4
 801a902:	2b00      	cmp	r3, #0
 801a904:	d011      	beq.n	801a92a <UART_RxISR_16BIT_FIFOEN+0x12e>
 801a906:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 801a90a:	f003 0301 	and.w	r3, r3, #1
 801a90e:	2b00      	cmp	r3, #0
 801a910:	d00b      	beq.n	801a92a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801a912:	687b      	ldr	r3, [r7, #4]
 801a914:	681b      	ldr	r3, [r3, #0]
 801a916:	2204      	movs	r2, #4
 801a918:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 801a91a:	687b      	ldr	r3, [r7, #4]
 801a91c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801a920:	f043 0202 	orr.w	r2, r3, #2
 801a924:	687b      	ldr	r3, [r7, #4]
 801a926:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801a92a:	687b      	ldr	r3, [r7, #4]
 801a92c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801a930:	2b00      	cmp	r3, #0
 801a932:	d006      	beq.n	801a942 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801a934:	6878      	ldr	r0, [r7, #4]
 801a936:	f7fe f853 	bl	80189e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 801a93a:	687b      	ldr	r3, [r7, #4]
 801a93c:	2200      	movs	r2, #0
 801a93e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 801a942:	687b      	ldr	r3, [r7, #4]
 801a944:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801a948:	b29b      	uxth	r3, r3
 801a94a:	2b00      	cmp	r3, #0
 801a94c:	f040 80a3 	bne.w	801aa96 <UART_RxISR_16BIT_FIFOEN+0x29a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801a950:	687b      	ldr	r3, [r7, #4]
 801a952:	681b      	ldr	r3, [r3, #0]
 801a954:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a956:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801a958:	e853 3f00 	ldrex	r3, [r3]
 801a95c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 801a95e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801a960:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801a964:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 801a968:	687b      	ldr	r3, [r7, #4]
 801a96a:	681b      	ldr	r3, [r3, #0]
 801a96c:	461a      	mov	r2, r3
 801a96e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801a972:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 801a976:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a978:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 801a97a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 801a97e:	e841 2300 	strex	r3, r2, [r1]
 801a982:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 801a984:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801a986:	2b00      	cmp	r3, #0
 801a988:	d1e2      	bne.n	801a950 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801a98a:	687b      	ldr	r3, [r7, #4]
 801a98c:	681b      	ldr	r3, [r3, #0]
 801a98e:	3308      	adds	r3, #8
 801a990:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a992:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801a994:	e853 3f00 	ldrex	r3, [r3]
 801a998:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 801a99a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801a99c:	4b6f      	ldr	r3, [pc, #444]	@ (801ab5c <UART_RxISR_16BIT_FIFOEN+0x360>)
 801a99e:	4013      	ands	r3, r2
 801a9a0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 801a9a4:	687b      	ldr	r3, [r7, #4]
 801a9a6:	681b      	ldr	r3, [r3, #0]
 801a9a8:	3308      	adds	r3, #8
 801a9aa:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 801a9ae:	66fa      	str	r2, [r7, #108]	@ 0x6c
 801a9b0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a9b2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 801a9b4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 801a9b6:	e841 2300 	strex	r3, r2, [r1]
 801a9ba:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 801a9bc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801a9be:	2b00      	cmp	r3, #0
 801a9c0:	d1e3      	bne.n	801a98a <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801a9c2:	687b      	ldr	r3, [r7, #4]
 801a9c4:	2220      	movs	r2, #32
 801a9c6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801a9ca:	687b      	ldr	r3, [r7, #4]
 801a9cc:	2200      	movs	r2, #0
 801a9ce:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 801a9d0:	687b      	ldr	r3, [r7, #4]
 801a9d2:	2200      	movs	r2, #0
 801a9d4:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801a9d6:	687b      	ldr	r3, [r7, #4]
 801a9d8:	681b      	ldr	r3, [r3, #0]
 801a9da:	4a61      	ldr	r2, [pc, #388]	@ (801ab60 <UART_RxISR_16BIT_FIFOEN+0x364>)
 801a9dc:	4293      	cmp	r3, r2
 801a9de:	d021      	beq.n	801aa24 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801a9e0:	687b      	ldr	r3, [r7, #4]
 801a9e2:	681b      	ldr	r3, [r3, #0]
 801a9e4:	685b      	ldr	r3, [r3, #4]
 801a9e6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801a9ea:	2b00      	cmp	r3, #0
 801a9ec:	d01a      	beq.n	801aa24 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801a9ee:	687b      	ldr	r3, [r7, #4]
 801a9f0:	681b      	ldr	r3, [r3, #0]
 801a9f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a9f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801a9f6:	e853 3f00 	ldrex	r3, [r3]
 801a9fa:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 801a9fc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801a9fe:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 801aa02:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 801aa06:	687b      	ldr	r3, [r7, #4]
 801aa08:	681b      	ldr	r3, [r3, #0]
 801aa0a:	461a      	mov	r2, r3
 801aa0c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 801aa10:	65bb      	str	r3, [r7, #88]	@ 0x58
 801aa12:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801aa14:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801aa16:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801aa18:	e841 2300 	strex	r3, r2, [r1]
 801aa1c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 801aa1e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801aa20:	2b00      	cmp	r3, #0
 801aa22:	d1e4      	bne.n	801a9ee <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801aa24:	687b      	ldr	r3, [r7, #4]
 801aa26:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801aa28:	2b01      	cmp	r3, #1
 801aa2a:	d130      	bne.n	801aa8e <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801aa2c:	687b      	ldr	r3, [r7, #4]
 801aa2e:	2200      	movs	r2, #0
 801aa30:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801aa32:	687b      	ldr	r3, [r7, #4]
 801aa34:	681b      	ldr	r3, [r3, #0]
 801aa36:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801aa38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801aa3a:	e853 3f00 	ldrex	r3, [r3]
 801aa3e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 801aa40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801aa42:	f023 0310 	bic.w	r3, r3, #16
 801aa46:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 801aa4a:	687b      	ldr	r3, [r7, #4]
 801aa4c:	681b      	ldr	r3, [r3, #0]
 801aa4e:	461a      	mov	r2, r3
 801aa50:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801aa54:	647b      	str	r3, [r7, #68]	@ 0x44
 801aa56:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801aa58:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801aa5a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801aa5c:	e841 2300 	strex	r3, r2, [r1]
 801aa60:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 801aa62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801aa64:	2b00      	cmp	r3, #0
 801aa66:	d1e4      	bne.n	801aa32 <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801aa68:	687b      	ldr	r3, [r7, #4]
 801aa6a:	681b      	ldr	r3, [r3, #0]
 801aa6c:	69db      	ldr	r3, [r3, #28]
 801aa6e:	f003 0310 	and.w	r3, r3, #16
 801aa72:	2b10      	cmp	r3, #16
 801aa74:	d103      	bne.n	801aa7e <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801aa76:	687b      	ldr	r3, [r7, #4]
 801aa78:	681b      	ldr	r3, [r3, #0]
 801aa7a:	2210      	movs	r2, #16
 801aa7c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801aa7e:	687b      	ldr	r3, [r7, #4]
 801aa80:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801aa84:	4619      	mov	r1, r3
 801aa86:	6878      	ldr	r0, [r7, #4]
 801aa88:	f7fd ffb4 	bl	80189f4 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 801aa8c:	e00e      	b.n	801aaac <UART_RxISR_16BIT_FIFOEN+0x2b0>
          HAL_UART_RxCpltCallback(huart);
 801aa8e:	6878      	ldr	r0, [r7, #4]
 801aa90:	f7eb fd9c 	bl	80065cc <HAL_UART_RxCpltCallback>
        break;
 801aa94:	e00a      	b.n	801aaac <UART_RxISR_16BIT_FIFOEN+0x2b0>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801aa96:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 801aa9a:	2b00      	cmp	r3, #0
 801aa9c:	d006      	beq.n	801aaac <UART_RxISR_16BIT_FIFOEN+0x2b0>
 801aa9e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801aaa2:	f003 0320 	and.w	r3, r3, #32
 801aaa6:	2b00      	cmp	r3, #0
 801aaa8:	f47f aecc 	bne.w	801a844 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 801aaac:	687b      	ldr	r3, [r7, #4]
 801aaae:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801aab2:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 801aab6:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 801aaba:	2b00      	cmp	r3, #0
 801aabc:	d049      	beq.n	801ab52 <UART_RxISR_16BIT_FIFOEN+0x356>
 801aabe:	687b      	ldr	r3, [r7, #4]
 801aac0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 801aac4:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 801aac8:	429a      	cmp	r2, r3
 801aaca:	d242      	bcs.n	801ab52 <UART_RxISR_16BIT_FIFOEN+0x356>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 801aacc:	687b      	ldr	r3, [r7, #4]
 801aace:	681b      	ldr	r3, [r3, #0]
 801aad0:	3308      	adds	r3, #8
 801aad2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801aad4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801aad6:	e853 3f00 	ldrex	r3, [r3]
 801aada:	623b      	str	r3, [r7, #32]
   return(result);
 801aadc:	6a3b      	ldr	r3, [r7, #32]
 801aade:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 801aae2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 801aae6:	687b      	ldr	r3, [r7, #4]
 801aae8:	681b      	ldr	r3, [r3, #0]
 801aaea:	3308      	adds	r3, #8
 801aaec:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 801aaf0:	633a      	str	r2, [r7, #48]	@ 0x30
 801aaf2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801aaf4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801aaf6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801aaf8:	e841 2300 	strex	r3, r2, [r1]
 801aafc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 801aafe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ab00:	2b00      	cmp	r3, #0
 801ab02:	d1e3      	bne.n	801aacc <UART_RxISR_16BIT_FIFOEN+0x2d0>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 801ab04:	687b      	ldr	r3, [r7, #4]
 801ab06:	4a17      	ldr	r2, [pc, #92]	@ (801ab64 <UART_RxISR_16BIT_FIFOEN+0x368>)
 801ab08:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 801ab0a:	687b      	ldr	r3, [r7, #4]
 801ab0c:	681b      	ldr	r3, [r3, #0]
 801ab0e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801ab10:	693b      	ldr	r3, [r7, #16]
 801ab12:	e853 3f00 	ldrex	r3, [r3]
 801ab16:	60fb      	str	r3, [r7, #12]
   return(result);
 801ab18:	68fb      	ldr	r3, [r7, #12]
 801ab1a:	f043 0320 	orr.w	r3, r3, #32
 801ab1e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 801ab22:	687b      	ldr	r3, [r7, #4]
 801ab24:	681b      	ldr	r3, [r3, #0]
 801ab26:	461a      	mov	r2, r3
 801ab28:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 801ab2c:	61fb      	str	r3, [r7, #28]
 801ab2e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801ab30:	69b9      	ldr	r1, [r7, #24]
 801ab32:	69fa      	ldr	r2, [r7, #28]
 801ab34:	e841 2300 	strex	r3, r2, [r1]
 801ab38:	617b      	str	r3, [r7, #20]
   return(result);
 801ab3a:	697b      	ldr	r3, [r7, #20]
 801ab3c:	2b00      	cmp	r3, #0
 801ab3e:	d1e4      	bne.n	801ab0a <UART_RxISR_16BIT_FIFOEN+0x30e>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801ab40:	e007      	b.n	801ab52 <UART_RxISR_16BIT_FIFOEN+0x356>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801ab42:	687b      	ldr	r3, [r7, #4]
 801ab44:	681b      	ldr	r3, [r3, #0]
 801ab46:	699a      	ldr	r2, [r3, #24]
 801ab48:	687b      	ldr	r3, [r7, #4]
 801ab4a:	681b      	ldr	r3, [r3, #0]
 801ab4c:	f042 0208 	orr.w	r2, r2, #8
 801ab50:	619a      	str	r2, [r3, #24]
}
 801ab52:	bf00      	nop
 801ab54:	37b8      	adds	r7, #184	@ 0xb8
 801ab56:	46bd      	mov	sp, r7
 801ab58:	bd80      	pop	{r7, pc}
 801ab5a:	bf00      	nop
 801ab5c:	effffffe 	.word	0xeffffffe
 801ab60:	58000c00 	.word	0x58000c00
 801ab64:	0801a2e1 	.word	0x0801a2e1

0801ab68 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 801ab68:	b480      	push	{r7}
 801ab6a:	b083      	sub	sp, #12
 801ab6c:	af00      	add	r7, sp, #0
 801ab6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 801ab70:	bf00      	nop
 801ab72:	370c      	adds	r7, #12
 801ab74:	46bd      	mov	sp, r7
 801ab76:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab7a:	4770      	bx	lr

0801ab7c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 801ab7c:	b480      	push	{r7}
 801ab7e:	b083      	sub	sp, #12
 801ab80:	af00      	add	r7, sp, #0
 801ab82:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 801ab84:	bf00      	nop
 801ab86:	370c      	adds	r7, #12
 801ab88:	46bd      	mov	sp, r7
 801ab8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab8e:	4770      	bx	lr

0801ab90 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 801ab90:	b480      	push	{r7}
 801ab92:	b083      	sub	sp, #12
 801ab94:	af00      	add	r7, sp, #0
 801ab96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 801ab98:	bf00      	nop
 801ab9a:	370c      	adds	r7, #12
 801ab9c:	46bd      	mov	sp, r7
 801ab9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aba2:	4770      	bx	lr

0801aba4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 801aba4:	b480      	push	{r7}
 801aba6:	b085      	sub	sp, #20
 801aba8:	af00      	add	r7, sp, #0
 801abaa:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 801abac:	687b      	ldr	r3, [r7, #4]
 801abae:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801abb2:	2b01      	cmp	r3, #1
 801abb4:	d101      	bne.n	801abba <HAL_UARTEx_DisableFifoMode+0x16>
 801abb6:	2302      	movs	r3, #2
 801abb8:	e027      	b.n	801ac0a <HAL_UARTEx_DisableFifoMode+0x66>
 801abba:	687b      	ldr	r3, [r7, #4]
 801abbc:	2201      	movs	r2, #1
 801abbe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801abc2:	687b      	ldr	r3, [r7, #4]
 801abc4:	2224      	movs	r2, #36	@ 0x24
 801abc6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801abca:	687b      	ldr	r3, [r7, #4]
 801abcc:	681b      	ldr	r3, [r3, #0]
 801abce:	681b      	ldr	r3, [r3, #0]
 801abd0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801abd2:	687b      	ldr	r3, [r7, #4]
 801abd4:	681b      	ldr	r3, [r3, #0]
 801abd6:	681a      	ldr	r2, [r3, #0]
 801abd8:	687b      	ldr	r3, [r7, #4]
 801abda:	681b      	ldr	r3, [r3, #0]
 801abdc:	f022 0201 	bic.w	r2, r2, #1
 801abe0:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 801abe2:	68fb      	ldr	r3, [r7, #12]
 801abe4:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 801abe8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 801abea:	687b      	ldr	r3, [r7, #4]
 801abec:	2200      	movs	r2, #0
 801abee:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801abf0:	687b      	ldr	r3, [r7, #4]
 801abf2:	681b      	ldr	r3, [r3, #0]
 801abf4:	68fa      	ldr	r2, [r7, #12]
 801abf6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801abf8:	687b      	ldr	r3, [r7, #4]
 801abfa:	2220      	movs	r2, #32
 801abfc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801ac00:	687b      	ldr	r3, [r7, #4]
 801ac02:	2200      	movs	r2, #0
 801ac04:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801ac08:	2300      	movs	r3, #0
}
 801ac0a:	4618      	mov	r0, r3
 801ac0c:	3714      	adds	r7, #20
 801ac0e:	46bd      	mov	sp, r7
 801ac10:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ac14:	4770      	bx	lr

0801ac16 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801ac16:	b580      	push	{r7, lr}
 801ac18:	b084      	sub	sp, #16
 801ac1a:	af00      	add	r7, sp, #0
 801ac1c:	6078      	str	r0, [r7, #4]
 801ac1e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801ac20:	687b      	ldr	r3, [r7, #4]
 801ac22:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801ac26:	2b01      	cmp	r3, #1
 801ac28:	d101      	bne.n	801ac2e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 801ac2a:	2302      	movs	r3, #2
 801ac2c:	e02d      	b.n	801ac8a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 801ac2e:	687b      	ldr	r3, [r7, #4]
 801ac30:	2201      	movs	r2, #1
 801ac32:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801ac36:	687b      	ldr	r3, [r7, #4]
 801ac38:	2224      	movs	r2, #36	@ 0x24
 801ac3a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801ac3e:	687b      	ldr	r3, [r7, #4]
 801ac40:	681b      	ldr	r3, [r3, #0]
 801ac42:	681b      	ldr	r3, [r3, #0]
 801ac44:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801ac46:	687b      	ldr	r3, [r7, #4]
 801ac48:	681b      	ldr	r3, [r3, #0]
 801ac4a:	681a      	ldr	r2, [r3, #0]
 801ac4c:	687b      	ldr	r3, [r7, #4]
 801ac4e:	681b      	ldr	r3, [r3, #0]
 801ac50:	f022 0201 	bic.w	r2, r2, #1
 801ac54:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 801ac56:	687b      	ldr	r3, [r7, #4]
 801ac58:	681b      	ldr	r3, [r3, #0]
 801ac5a:	689b      	ldr	r3, [r3, #8]
 801ac5c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 801ac60:	687b      	ldr	r3, [r7, #4]
 801ac62:	681b      	ldr	r3, [r3, #0]
 801ac64:	683a      	ldr	r2, [r7, #0]
 801ac66:	430a      	orrs	r2, r1
 801ac68:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801ac6a:	6878      	ldr	r0, [r7, #4]
 801ac6c:	f000 f850 	bl	801ad10 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801ac70:	687b      	ldr	r3, [r7, #4]
 801ac72:	681b      	ldr	r3, [r3, #0]
 801ac74:	68fa      	ldr	r2, [r7, #12]
 801ac76:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801ac78:	687b      	ldr	r3, [r7, #4]
 801ac7a:	2220      	movs	r2, #32
 801ac7c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801ac80:	687b      	ldr	r3, [r7, #4]
 801ac82:	2200      	movs	r2, #0
 801ac84:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801ac88:	2300      	movs	r3, #0
}
 801ac8a:	4618      	mov	r0, r3
 801ac8c:	3710      	adds	r7, #16
 801ac8e:	46bd      	mov	sp, r7
 801ac90:	bd80      	pop	{r7, pc}

0801ac92 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801ac92:	b580      	push	{r7, lr}
 801ac94:	b084      	sub	sp, #16
 801ac96:	af00      	add	r7, sp, #0
 801ac98:	6078      	str	r0, [r7, #4]
 801ac9a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801ac9c:	687b      	ldr	r3, [r7, #4]
 801ac9e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801aca2:	2b01      	cmp	r3, #1
 801aca4:	d101      	bne.n	801acaa <HAL_UARTEx_SetRxFifoThreshold+0x18>
 801aca6:	2302      	movs	r3, #2
 801aca8:	e02d      	b.n	801ad06 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 801acaa:	687b      	ldr	r3, [r7, #4]
 801acac:	2201      	movs	r2, #1
 801acae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801acb2:	687b      	ldr	r3, [r7, #4]
 801acb4:	2224      	movs	r2, #36	@ 0x24
 801acb6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801acba:	687b      	ldr	r3, [r7, #4]
 801acbc:	681b      	ldr	r3, [r3, #0]
 801acbe:	681b      	ldr	r3, [r3, #0]
 801acc0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801acc2:	687b      	ldr	r3, [r7, #4]
 801acc4:	681b      	ldr	r3, [r3, #0]
 801acc6:	681a      	ldr	r2, [r3, #0]
 801acc8:	687b      	ldr	r3, [r7, #4]
 801acca:	681b      	ldr	r3, [r3, #0]
 801accc:	f022 0201 	bic.w	r2, r2, #1
 801acd0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 801acd2:	687b      	ldr	r3, [r7, #4]
 801acd4:	681b      	ldr	r3, [r3, #0]
 801acd6:	689b      	ldr	r3, [r3, #8]
 801acd8:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 801acdc:	687b      	ldr	r3, [r7, #4]
 801acde:	681b      	ldr	r3, [r3, #0]
 801ace0:	683a      	ldr	r2, [r7, #0]
 801ace2:	430a      	orrs	r2, r1
 801ace4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801ace6:	6878      	ldr	r0, [r7, #4]
 801ace8:	f000 f812 	bl	801ad10 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801acec:	687b      	ldr	r3, [r7, #4]
 801acee:	681b      	ldr	r3, [r3, #0]
 801acf0:	68fa      	ldr	r2, [r7, #12]
 801acf2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801acf4:	687b      	ldr	r3, [r7, #4]
 801acf6:	2220      	movs	r2, #32
 801acf8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801acfc:	687b      	ldr	r3, [r7, #4]
 801acfe:	2200      	movs	r2, #0
 801ad00:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801ad04:	2300      	movs	r3, #0
}
 801ad06:	4618      	mov	r0, r3
 801ad08:	3710      	adds	r7, #16
 801ad0a:	46bd      	mov	sp, r7
 801ad0c:	bd80      	pop	{r7, pc}
	...

0801ad10 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 801ad10:	b480      	push	{r7}
 801ad12:	b085      	sub	sp, #20
 801ad14:	af00      	add	r7, sp, #0
 801ad16:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 801ad18:	687b      	ldr	r3, [r7, #4]
 801ad1a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801ad1c:	2b00      	cmp	r3, #0
 801ad1e:	d108      	bne.n	801ad32 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 801ad20:	687b      	ldr	r3, [r7, #4]
 801ad22:	2201      	movs	r2, #1
 801ad24:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 801ad28:	687b      	ldr	r3, [r7, #4]
 801ad2a:	2201      	movs	r2, #1
 801ad2c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 801ad30:	e031      	b.n	801ad96 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 801ad32:	2310      	movs	r3, #16
 801ad34:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801ad36:	2310      	movs	r3, #16
 801ad38:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 801ad3a:	687b      	ldr	r3, [r7, #4]
 801ad3c:	681b      	ldr	r3, [r3, #0]
 801ad3e:	689b      	ldr	r3, [r3, #8]
 801ad40:	0e5b      	lsrs	r3, r3, #25
 801ad42:	b2db      	uxtb	r3, r3
 801ad44:	f003 0307 	and.w	r3, r3, #7
 801ad48:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 801ad4a:	687b      	ldr	r3, [r7, #4]
 801ad4c:	681b      	ldr	r3, [r3, #0]
 801ad4e:	689b      	ldr	r3, [r3, #8]
 801ad50:	0f5b      	lsrs	r3, r3, #29
 801ad52:	b2db      	uxtb	r3, r3
 801ad54:	f003 0307 	and.w	r3, r3, #7
 801ad58:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801ad5a:	7bbb      	ldrb	r3, [r7, #14]
 801ad5c:	7b3a      	ldrb	r2, [r7, #12]
 801ad5e:	4911      	ldr	r1, [pc, #68]	@ (801ada4 <UARTEx_SetNbDataToProcess+0x94>)
 801ad60:	5c8a      	ldrb	r2, [r1, r2]
 801ad62:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 801ad66:	7b3a      	ldrb	r2, [r7, #12]
 801ad68:	490f      	ldr	r1, [pc, #60]	@ (801ada8 <UARTEx_SetNbDataToProcess+0x98>)
 801ad6a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801ad6c:	fb93 f3f2 	sdiv	r3, r3, r2
 801ad70:	b29a      	uxth	r2, r3
 801ad72:	687b      	ldr	r3, [r7, #4]
 801ad74:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801ad78:	7bfb      	ldrb	r3, [r7, #15]
 801ad7a:	7b7a      	ldrb	r2, [r7, #13]
 801ad7c:	4909      	ldr	r1, [pc, #36]	@ (801ada4 <UARTEx_SetNbDataToProcess+0x94>)
 801ad7e:	5c8a      	ldrb	r2, [r1, r2]
 801ad80:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 801ad84:	7b7a      	ldrb	r2, [r7, #13]
 801ad86:	4908      	ldr	r1, [pc, #32]	@ (801ada8 <UARTEx_SetNbDataToProcess+0x98>)
 801ad88:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801ad8a:	fb93 f3f2 	sdiv	r3, r3, r2
 801ad8e:	b29a      	uxth	r2, r3
 801ad90:	687b      	ldr	r3, [r7, #4]
 801ad92:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 801ad96:	bf00      	nop
 801ad98:	3714      	adds	r7, #20
 801ad9a:	46bd      	mov	sp, r7
 801ad9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ada0:	4770      	bx	lr
 801ada2:	bf00      	nop
 801ada4:	0801ea7c 	.word	0x0801ea7c
 801ada8:	0801ea84 	.word	0x0801ea84

0801adac <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 801adac:	b580      	push	{r7, lr}
 801adae:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 801adb0:	4904      	ldr	r1, [pc, #16]	@ (801adc4 <MX_FATFS_Init+0x18>)
 801adb2:	4805      	ldr	r0, [pc, #20]	@ (801adc8 <MX_FATFS_Init+0x1c>)
 801adb4:	f003 f8d8 	bl	801df68 <FATFS_LinkDriver>
 801adb8:	4603      	mov	r3, r0
 801adba:	461a      	mov	r2, r3
 801adbc:	4b03      	ldr	r3, [pc, #12]	@ (801adcc <MX_FATFS_Init+0x20>)
 801adbe:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 801adc0:	bf00      	nop
 801adc2:	bd80      	pop	{r7, pc}
 801adc4:	24000550 	.word	0x24000550
 801adc8:	24000018 	.word	0x24000018
 801adcc:	2400054c 	.word	0x2400054c

0801add0 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 801add0:	b480      	push	{r7}
 801add2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 801add4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 801add6:	4618      	mov	r0, r3
 801add8:	46bd      	mov	sp, r7
 801adda:	f85d 7b04 	ldr.w	r7, [sp], #4
 801adde:	4770      	bx	lr

0801ade0 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 801ade0:	b580      	push	{r7, lr}
 801ade2:	b082      	sub	sp, #8
 801ade4:	af00      	add	r7, sp, #0
 801ade6:	4603      	mov	r3, r0
 801ade8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 801adea:	79fb      	ldrb	r3, [r7, #7]
 801adec:	4618      	mov	r0, r3
 801adee:	f7e9 fbbd 	bl	800456c <SD_disk_initialize>
 801adf2:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 801adf4:	4618      	mov	r0, r3
 801adf6:	3708      	adds	r7, #8
 801adf8:	46bd      	mov	sp, r7
 801adfa:	bd80      	pop	{r7, pc}

0801adfc <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 801adfc:	b580      	push	{r7, lr}
 801adfe:	b082      	sub	sp, #8
 801ae00:	af00      	add	r7, sp, #0
 801ae02:	4603      	mov	r3, r0
 801ae04:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status(pdrv);
 801ae06:	79fb      	ldrb	r3, [r7, #7]
 801ae08:	4618      	mov	r0, r3
 801ae0a:	f7e9 fc9b 	bl	8004744 <SD_disk_status>
 801ae0e:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 801ae10:	4618      	mov	r0, r3
 801ae12:	3708      	adds	r7, #8
 801ae14:	46bd      	mov	sp, r7
 801ae16:	bd80      	pop	{r7, pc}

0801ae18 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 801ae18:	b580      	push	{r7, lr}
 801ae1a:	b084      	sub	sp, #16
 801ae1c:	af00      	add	r7, sp, #0
 801ae1e:	60b9      	str	r1, [r7, #8]
 801ae20:	607a      	str	r2, [r7, #4]
 801ae22:	603b      	str	r3, [r7, #0]
 801ae24:	4603      	mov	r3, r0
 801ae26:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 801ae28:	7bf8      	ldrb	r0, [r7, #15]
 801ae2a:	683b      	ldr	r3, [r7, #0]
 801ae2c:	687a      	ldr	r2, [r7, #4]
 801ae2e:	68b9      	ldr	r1, [r7, #8]
 801ae30:	f7e9 fc9e 	bl	8004770 <SD_disk_read>
 801ae34:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 801ae36:	4618      	mov	r0, r3
 801ae38:	3710      	adds	r7, #16
 801ae3a:	46bd      	mov	sp, r7
 801ae3c:	bd80      	pop	{r7, pc}

0801ae3e <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 801ae3e:	b580      	push	{r7, lr}
 801ae40:	b084      	sub	sp, #16
 801ae42:	af00      	add	r7, sp, #0
 801ae44:	60b9      	str	r1, [r7, #8]
 801ae46:	607a      	str	r2, [r7, #4]
 801ae48:	603b      	str	r3, [r7, #0]
 801ae4a:	4603      	mov	r3, r0
 801ae4c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 801ae4e:	7bf8      	ldrb	r0, [r7, #15]
 801ae50:	683b      	ldr	r3, [r7, #0]
 801ae52:	687a      	ldr	r2, [r7, #4]
 801ae54:	68b9      	ldr	r1, [r7, #8]
 801ae56:	f7e9 fcf5 	bl	8004844 <SD_disk_write>
 801ae5a:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 801ae5c:	4618      	mov	r0, r3
 801ae5e:	3710      	adds	r7, #16
 801ae60:	46bd      	mov	sp, r7
 801ae62:	bd80      	pop	{r7, pc}

0801ae64 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 801ae64:	b580      	push	{r7, lr}
 801ae66:	b082      	sub	sp, #8
 801ae68:	af00      	add	r7, sp, #0
 801ae6a:	4603      	mov	r3, r0
 801ae6c:	603a      	str	r2, [r7, #0]
 801ae6e:	71fb      	strb	r3, [r7, #7]
 801ae70:	460b      	mov	r3, r1
 801ae72:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */

    return SD_disk_ioctl(pdrv, cmd, buff);
 801ae74:	79b9      	ldrb	r1, [r7, #6]
 801ae76:	79fb      	ldrb	r3, [r7, #7]
 801ae78:	683a      	ldr	r2, [r7, #0]
 801ae7a:	4618      	mov	r0, r3
 801ae7c:	f7e9 fd66 	bl	800494c <SD_disk_ioctl>
 801ae80:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 801ae82:	4618      	mov	r0, r3
 801ae84:	3708      	adds	r7, #8
 801ae86:	46bd      	mov	sp, r7
 801ae88:	bd80      	pop	{r7, pc}
	...

0801ae8c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 801ae8c:	b580      	push	{r7, lr}
 801ae8e:	b084      	sub	sp, #16
 801ae90:	af00      	add	r7, sp, #0
 801ae92:	4603      	mov	r3, r0
 801ae94:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 801ae96:	79fb      	ldrb	r3, [r7, #7]
 801ae98:	4a08      	ldr	r2, [pc, #32]	@ (801aebc <disk_status+0x30>)
 801ae9a:	009b      	lsls	r3, r3, #2
 801ae9c:	4413      	add	r3, r2
 801ae9e:	685b      	ldr	r3, [r3, #4]
 801aea0:	685b      	ldr	r3, [r3, #4]
 801aea2:	79fa      	ldrb	r2, [r7, #7]
 801aea4:	4905      	ldr	r1, [pc, #20]	@ (801aebc <disk_status+0x30>)
 801aea6:	440a      	add	r2, r1
 801aea8:	7a12      	ldrb	r2, [r2, #8]
 801aeaa:	4610      	mov	r0, r2
 801aeac:	4798      	blx	r3
 801aeae:	4603      	mov	r3, r0
 801aeb0:	73fb      	strb	r3, [r7, #15]
  return stat;
 801aeb2:	7bfb      	ldrb	r3, [r7, #15]
}
 801aeb4:	4618      	mov	r0, r3
 801aeb6:	3710      	adds	r7, #16
 801aeb8:	46bd      	mov	sp, r7
 801aeba:	bd80      	pop	{r7, pc}
 801aebc:	2400076c 	.word	0x2400076c

0801aec0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 801aec0:	b580      	push	{r7, lr}
 801aec2:	b084      	sub	sp, #16
 801aec4:	af00      	add	r7, sp, #0
 801aec6:	4603      	mov	r3, r0
 801aec8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 801aeca:	2300      	movs	r3, #0
 801aecc:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 801aece:	79fb      	ldrb	r3, [r7, #7]
 801aed0:	4a0e      	ldr	r2, [pc, #56]	@ (801af0c <disk_initialize+0x4c>)
 801aed2:	5cd3      	ldrb	r3, [r2, r3]
 801aed4:	2b00      	cmp	r3, #0
 801aed6:	d114      	bne.n	801af02 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 801aed8:	79fb      	ldrb	r3, [r7, #7]
 801aeda:	4a0c      	ldr	r2, [pc, #48]	@ (801af0c <disk_initialize+0x4c>)
 801aedc:	009b      	lsls	r3, r3, #2
 801aede:	4413      	add	r3, r2
 801aee0:	685b      	ldr	r3, [r3, #4]
 801aee2:	681b      	ldr	r3, [r3, #0]
 801aee4:	79fa      	ldrb	r2, [r7, #7]
 801aee6:	4909      	ldr	r1, [pc, #36]	@ (801af0c <disk_initialize+0x4c>)
 801aee8:	440a      	add	r2, r1
 801aeea:	7a12      	ldrb	r2, [r2, #8]
 801aeec:	4610      	mov	r0, r2
 801aeee:	4798      	blx	r3
 801aef0:	4603      	mov	r3, r0
 801aef2:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 801aef4:	7bfb      	ldrb	r3, [r7, #15]
 801aef6:	2b00      	cmp	r3, #0
 801aef8:	d103      	bne.n	801af02 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 801aefa:	79fb      	ldrb	r3, [r7, #7]
 801aefc:	4a03      	ldr	r2, [pc, #12]	@ (801af0c <disk_initialize+0x4c>)
 801aefe:	2101      	movs	r1, #1
 801af00:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 801af02:	7bfb      	ldrb	r3, [r7, #15]
}
 801af04:	4618      	mov	r0, r3
 801af06:	3710      	adds	r7, #16
 801af08:	46bd      	mov	sp, r7
 801af0a:	bd80      	pop	{r7, pc}
 801af0c:	2400076c 	.word	0x2400076c

0801af10 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 801af10:	b590      	push	{r4, r7, lr}
 801af12:	b087      	sub	sp, #28
 801af14:	af00      	add	r7, sp, #0
 801af16:	60b9      	str	r1, [r7, #8]
 801af18:	607a      	str	r2, [r7, #4]
 801af1a:	603b      	str	r3, [r7, #0]
 801af1c:	4603      	mov	r3, r0
 801af1e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 801af20:	7bfb      	ldrb	r3, [r7, #15]
 801af22:	4a0a      	ldr	r2, [pc, #40]	@ (801af4c <disk_read+0x3c>)
 801af24:	009b      	lsls	r3, r3, #2
 801af26:	4413      	add	r3, r2
 801af28:	685b      	ldr	r3, [r3, #4]
 801af2a:	689c      	ldr	r4, [r3, #8]
 801af2c:	7bfb      	ldrb	r3, [r7, #15]
 801af2e:	4a07      	ldr	r2, [pc, #28]	@ (801af4c <disk_read+0x3c>)
 801af30:	4413      	add	r3, r2
 801af32:	7a18      	ldrb	r0, [r3, #8]
 801af34:	683b      	ldr	r3, [r7, #0]
 801af36:	687a      	ldr	r2, [r7, #4]
 801af38:	68b9      	ldr	r1, [r7, #8]
 801af3a:	47a0      	blx	r4
 801af3c:	4603      	mov	r3, r0
 801af3e:	75fb      	strb	r3, [r7, #23]
  return res;
 801af40:	7dfb      	ldrb	r3, [r7, #23]
}
 801af42:	4618      	mov	r0, r3
 801af44:	371c      	adds	r7, #28
 801af46:	46bd      	mov	sp, r7
 801af48:	bd90      	pop	{r4, r7, pc}
 801af4a:	bf00      	nop
 801af4c:	2400076c 	.word	0x2400076c

0801af50 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 801af50:	b590      	push	{r4, r7, lr}
 801af52:	b087      	sub	sp, #28
 801af54:	af00      	add	r7, sp, #0
 801af56:	60b9      	str	r1, [r7, #8]
 801af58:	607a      	str	r2, [r7, #4]
 801af5a:	603b      	str	r3, [r7, #0]
 801af5c:	4603      	mov	r3, r0
 801af5e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 801af60:	7bfb      	ldrb	r3, [r7, #15]
 801af62:	4a0a      	ldr	r2, [pc, #40]	@ (801af8c <disk_write+0x3c>)
 801af64:	009b      	lsls	r3, r3, #2
 801af66:	4413      	add	r3, r2
 801af68:	685b      	ldr	r3, [r3, #4]
 801af6a:	68dc      	ldr	r4, [r3, #12]
 801af6c:	7bfb      	ldrb	r3, [r7, #15]
 801af6e:	4a07      	ldr	r2, [pc, #28]	@ (801af8c <disk_write+0x3c>)
 801af70:	4413      	add	r3, r2
 801af72:	7a18      	ldrb	r0, [r3, #8]
 801af74:	683b      	ldr	r3, [r7, #0]
 801af76:	687a      	ldr	r2, [r7, #4]
 801af78:	68b9      	ldr	r1, [r7, #8]
 801af7a:	47a0      	blx	r4
 801af7c:	4603      	mov	r3, r0
 801af7e:	75fb      	strb	r3, [r7, #23]
  return res;
 801af80:	7dfb      	ldrb	r3, [r7, #23]
}
 801af82:	4618      	mov	r0, r3
 801af84:	371c      	adds	r7, #28
 801af86:	46bd      	mov	sp, r7
 801af88:	bd90      	pop	{r4, r7, pc}
 801af8a:	bf00      	nop
 801af8c:	2400076c 	.word	0x2400076c

0801af90 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 801af90:	b580      	push	{r7, lr}
 801af92:	b084      	sub	sp, #16
 801af94:	af00      	add	r7, sp, #0
 801af96:	4603      	mov	r3, r0
 801af98:	603a      	str	r2, [r7, #0]
 801af9a:	71fb      	strb	r3, [r7, #7]
 801af9c:	460b      	mov	r3, r1
 801af9e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 801afa0:	79fb      	ldrb	r3, [r7, #7]
 801afa2:	4a09      	ldr	r2, [pc, #36]	@ (801afc8 <disk_ioctl+0x38>)
 801afa4:	009b      	lsls	r3, r3, #2
 801afa6:	4413      	add	r3, r2
 801afa8:	685b      	ldr	r3, [r3, #4]
 801afaa:	691b      	ldr	r3, [r3, #16]
 801afac:	79fa      	ldrb	r2, [r7, #7]
 801afae:	4906      	ldr	r1, [pc, #24]	@ (801afc8 <disk_ioctl+0x38>)
 801afb0:	440a      	add	r2, r1
 801afb2:	7a10      	ldrb	r0, [r2, #8]
 801afb4:	79b9      	ldrb	r1, [r7, #6]
 801afb6:	683a      	ldr	r2, [r7, #0]
 801afb8:	4798      	blx	r3
 801afba:	4603      	mov	r3, r0
 801afbc:	73fb      	strb	r3, [r7, #15]
  return res;
 801afbe:	7bfb      	ldrb	r3, [r7, #15]
}
 801afc0:	4618      	mov	r0, r3
 801afc2:	3710      	adds	r7, #16
 801afc4:	46bd      	mov	sp, r7
 801afc6:	bd80      	pop	{r7, pc}
 801afc8:	2400076c 	.word	0x2400076c

0801afcc <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 801afcc:	b480      	push	{r7}
 801afce:	b085      	sub	sp, #20
 801afd0:	af00      	add	r7, sp, #0
 801afd2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 801afd4:	687b      	ldr	r3, [r7, #4]
 801afd6:	3301      	adds	r3, #1
 801afd8:	781b      	ldrb	r3, [r3, #0]
 801afda:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 801afdc:	89fb      	ldrh	r3, [r7, #14]
 801afde:	021b      	lsls	r3, r3, #8
 801afe0:	b21a      	sxth	r2, r3
 801afe2:	687b      	ldr	r3, [r7, #4]
 801afe4:	781b      	ldrb	r3, [r3, #0]
 801afe6:	b21b      	sxth	r3, r3
 801afe8:	4313      	orrs	r3, r2
 801afea:	b21b      	sxth	r3, r3
 801afec:	81fb      	strh	r3, [r7, #14]
	return rv;
 801afee:	89fb      	ldrh	r3, [r7, #14]
}
 801aff0:	4618      	mov	r0, r3
 801aff2:	3714      	adds	r7, #20
 801aff4:	46bd      	mov	sp, r7
 801aff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801affa:	4770      	bx	lr

0801affc <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 801affc:	b480      	push	{r7}
 801affe:	b085      	sub	sp, #20
 801b000:	af00      	add	r7, sp, #0
 801b002:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 801b004:	687b      	ldr	r3, [r7, #4]
 801b006:	3303      	adds	r3, #3
 801b008:	781b      	ldrb	r3, [r3, #0]
 801b00a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 801b00c:	68fb      	ldr	r3, [r7, #12]
 801b00e:	021b      	lsls	r3, r3, #8
 801b010:	687a      	ldr	r2, [r7, #4]
 801b012:	3202      	adds	r2, #2
 801b014:	7812      	ldrb	r2, [r2, #0]
 801b016:	4313      	orrs	r3, r2
 801b018:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 801b01a:	68fb      	ldr	r3, [r7, #12]
 801b01c:	021b      	lsls	r3, r3, #8
 801b01e:	687a      	ldr	r2, [r7, #4]
 801b020:	3201      	adds	r2, #1
 801b022:	7812      	ldrb	r2, [r2, #0]
 801b024:	4313      	orrs	r3, r2
 801b026:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 801b028:	68fb      	ldr	r3, [r7, #12]
 801b02a:	021b      	lsls	r3, r3, #8
 801b02c:	687a      	ldr	r2, [r7, #4]
 801b02e:	7812      	ldrb	r2, [r2, #0]
 801b030:	4313      	orrs	r3, r2
 801b032:	60fb      	str	r3, [r7, #12]
	return rv;
 801b034:	68fb      	ldr	r3, [r7, #12]
}
 801b036:	4618      	mov	r0, r3
 801b038:	3714      	adds	r7, #20
 801b03a:	46bd      	mov	sp, r7
 801b03c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b040:	4770      	bx	lr

0801b042 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 801b042:	b480      	push	{r7}
 801b044:	b083      	sub	sp, #12
 801b046:	af00      	add	r7, sp, #0
 801b048:	6078      	str	r0, [r7, #4]
 801b04a:	460b      	mov	r3, r1
 801b04c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 801b04e:	687b      	ldr	r3, [r7, #4]
 801b050:	1c5a      	adds	r2, r3, #1
 801b052:	607a      	str	r2, [r7, #4]
 801b054:	887a      	ldrh	r2, [r7, #2]
 801b056:	b2d2      	uxtb	r2, r2
 801b058:	701a      	strb	r2, [r3, #0]
 801b05a:	887b      	ldrh	r3, [r7, #2]
 801b05c:	0a1b      	lsrs	r3, r3, #8
 801b05e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 801b060:	687b      	ldr	r3, [r7, #4]
 801b062:	1c5a      	adds	r2, r3, #1
 801b064:	607a      	str	r2, [r7, #4]
 801b066:	887a      	ldrh	r2, [r7, #2]
 801b068:	b2d2      	uxtb	r2, r2
 801b06a:	701a      	strb	r2, [r3, #0]
}
 801b06c:	bf00      	nop
 801b06e:	370c      	adds	r7, #12
 801b070:	46bd      	mov	sp, r7
 801b072:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b076:	4770      	bx	lr

0801b078 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 801b078:	b480      	push	{r7}
 801b07a:	b083      	sub	sp, #12
 801b07c:	af00      	add	r7, sp, #0
 801b07e:	6078      	str	r0, [r7, #4]
 801b080:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801b082:	687b      	ldr	r3, [r7, #4]
 801b084:	1c5a      	adds	r2, r3, #1
 801b086:	607a      	str	r2, [r7, #4]
 801b088:	683a      	ldr	r2, [r7, #0]
 801b08a:	b2d2      	uxtb	r2, r2
 801b08c:	701a      	strb	r2, [r3, #0]
 801b08e:	683b      	ldr	r3, [r7, #0]
 801b090:	0a1b      	lsrs	r3, r3, #8
 801b092:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801b094:	687b      	ldr	r3, [r7, #4]
 801b096:	1c5a      	adds	r2, r3, #1
 801b098:	607a      	str	r2, [r7, #4]
 801b09a:	683a      	ldr	r2, [r7, #0]
 801b09c:	b2d2      	uxtb	r2, r2
 801b09e:	701a      	strb	r2, [r3, #0]
 801b0a0:	683b      	ldr	r3, [r7, #0]
 801b0a2:	0a1b      	lsrs	r3, r3, #8
 801b0a4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801b0a6:	687b      	ldr	r3, [r7, #4]
 801b0a8:	1c5a      	adds	r2, r3, #1
 801b0aa:	607a      	str	r2, [r7, #4]
 801b0ac:	683a      	ldr	r2, [r7, #0]
 801b0ae:	b2d2      	uxtb	r2, r2
 801b0b0:	701a      	strb	r2, [r3, #0]
 801b0b2:	683b      	ldr	r3, [r7, #0]
 801b0b4:	0a1b      	lsrs	r3, r3, #8
 801b0b6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 801b0b8:	687b      	ldr	r3, [r7, #4]
 801b0ba:	1c5a      	adds	r2, r3, #1
 801b0bc:	607a      	str	r2, [r7, #4]
 801b0be:	683a      	ldr	r2, [r7, #0]
 801b0c0:	b2d2      	uxtb	r2, r2
 801b0c2:	701a      	strb	r2, [r3, #0]
}
 801b0c4:	bf00      	nop
 801b0c6:	370c      	adds	r7, #12
 801b0c8:	46bd      	mov	sp, r7
 801b0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b0ce:	4770      	bx	lr

0801b0d0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 801b0d0:	b480      	push	{r7}
 801b0d2:	b087      	sub	sp, #28
 801b0d4:	af00      	add	r7, sp, #0
 801b0d6:	60f8      	str	r0, [r7, #12]
 801b0d8:	60b9      	str	r1, [r7, #8]
 801b0da:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 801b0dc:	68fb      	ldr	r3, [r7, #12]
 801b0de:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 801b0e0:	68bb      	ldr	r3, [r7, #8]
 801b0e2:	613b      	str	r3, [r7, #16]

	if (cnt) {
 801b0e4:	687b      	ldr	r3, [r7, #4]
 801b0e6:	2b00      	cmp	r3, #0
 801b0e8:	d00d      	beq.n	801b106 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 801b0ea:	693a      	ldr	r2, [r7, #16]
 801b0ec:	1c53      	adds	r3, r2, #1
 801b0ee:	613b      	str	r3, [r7, #16]
 801b0f0:	697b      	ldr	r3, [r7, #20]
 801b0f2:	1c59      	adds	r1, r3, #1
 801b0f4:	6179      	str	r1, [r7, #20]
 801b0f6:	7812      	ldrb	r2, [r2, #0]
 801b0f8:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 801b0fa:	687b      	ldr	r3, [r7, #4]
 801b0fc:	3b01      	subs	r3, #1
 801b0fe:	607b      	str	r3, [r7, #4]
 801b100:	687b      	ldr	r3, [r7, #4]
 801b102:	2b00      	cmp	r3, #0
 801b104:	d1f1      	bne.n	801b0ea <mem_cpy+0x1a>
	}
}
 801b106:	bf00      	nop
 801b108:	371c      	adds	r7, #28
 801b10a:	46bd      	mov	sp, r7
 801b10c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b110:	4770      	bx	lr

0801b112 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 801b112:	b480      	push	{r7}
 801b114:	b087      	sub	sp, #28
 801b116:	af00      	add	r7, sp, #0
 801b118:	60f8      	str	r0, [r7, #12]
 801b11a:	60b9      	str	r1, [r7, #8]
 801b11c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 801b11e:	68fb      	ldr	r3, [r7, #12]
 801b120:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 801b122:	697b      	ldr	r3, [r7, #20]
 801b124:	1c5a      	adds	r2, r3, #1
 801b126:	617a      	str	r2, [r7, #20]
 801b128:	68ba      	ldr	r2, [r7, #8]
 801b12a:	b2d2      	uxtb	r2, r2
 801b12c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 801b12e:	687b      	ldr	r3, [r7, #4]
 801b130:	3b01      	subs	r3, #1
 801b132:	607b      	str	r3, [r7, #4]
 801b134:	687b      	ldr	r3, [r7, #4]
 801b136:	2b00      	cmp	r3, #0
 801b138:	d1f3      	bne.n	801b122 <mem_set+0x10>
}
 801b13a:	bf00      	nop
 801b13c:	bf00      	nop
 801b13e:	371c      	adds	r7, #28
 801b140:	46bd      	mov	sp, r7
 801b142:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b146:	4770      	bx	lr

0801b148 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 801b148:	b480      	push	{r7}
 801b14a:	b089      	sub	sp, #36	@ 0x24
 801b14c:	af00      	add	r7, sp, #0
 801b14e:	60f8      	str	r0, [r7, #12]
 801b150:	60b9      	str	r1, [r7, #8]
 801b152:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 801b154:	68fb      	ldr	r3, [r7, #12]
 801b156:	61fb      	str	r3, [r7, #28]
 801b158:	68bb      	ldr	r3, [r7, #8]
 801b15a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 801b15c:	2300      	movs	r3, #0
 801b15e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 801b160:	69fb      	ldr	r3, [r7, #28]
 801b162:	1c5a      	adds	r2, r3, #1
 801b164:	61fa      	str	r2, [r7, #28]
 801b166:	781b      	ldrb	r3, [r3, #0]
 801b168:	4619      	mov	r1, r3
 801b16a:	69bb      	ldr	r3, [r7, #24]
 801b16c:	1c5a      	adds	r2, r3, #1
 801b16e:	61ba      	str	r2, [r7, #24]
 801b170:	781b      	ldrb	r3, [r3, #0]
 801b172:	1acb      	subs	r3, r1, r3
 801b174:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 801b176:	687b      	ldr	r3, [r7, #4]
 801b178:	3b01      	subs	r3, #1
 801b17a:	607b      	str	r3, [r7, #4]
 801b17c:	687b      	ldr	r3, [r7, #4]
 801b17e:	2b00      	cmp	r3, #0
 801b180:	d002      	beq.n	801b188 <mem_cmp+0x40>
 801b182:	697b      	ldr	r3, [r7, #20]
 801b184:	2b00      	cmp	r3, #0
 801b186:	d0eb      	beq.n	801b160 <mem_cmp+0x18>

	return r;
 801b188:	697b      	ldr	r3, [r7, #20]
}
 801b18a:	4618      	mov	r0, r3
 801b18c:	3724      	adds	r7, #36	@ 0x24
 801b18e:	46bd      	mov	sp, r7
 801b190:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b194:	4770      	bx	lr

0801b196 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 801b196:	b480      	push	{r7}
 801b198:	b083      	sub	sp, #12
 801b19a:	af00      	add	r7, sp, #0
 801b19c:	6078      	str	r0, [r7, #4]
 801b19e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 801b1a0:	e002      	b.n	801b1a8 <chk_chr+0x12>
 801b1a2:	687b      	ldr	r3, [r7, #4]
 801b1a4:	3301      	adds	r3, #1
 801b1a6:	607b      	str	r3, [r7, #4]
 801b1a8:	687b      	ldr	r3, [r7, #4]
 801b1aa:	781b      	ldrb	r3, [r3, #0]
 801b1ac:	2b00      	cmp	r3, #0
 801b1ae:	d005      	beq.n	801b1bc <chk_chr+0x26>
 801b1b0:	687b      	ldr	r3, [r7, #4]
 801b1b2:	781b      	ldrb	r3, [r3, #0]
 801b1b4:	461a      	mov	r2, r3
 801b1b6:	683b      	ldr	r3, [r7, #0]
 801b1b8:	4293      	cmp	r3, r2
 801b1ba:	d1f2      	bne.n	801b1a2 <chk_chr+0xc>
	return *str;
 801b1bc:	687b      	ldr	r3, [r7, #4]
 801b1be:	781b      	ldrb	r3, [r3, #0]
}
 801b1c0:	4618      	mov	r0, r3
 801b1c2:	370c      	adds	r7, #12
 801b1c4:	46bd      	mov	sp, r7
 801b1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b1ca:	4770      	bx	lr

0801b1cc <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 801b1cc:	b480      	push	{r7}
 801b1ce:	b085      	sub	sp, #20
 801b1d0:	af00      	add	r7, sp, #0
 801b1d2:	6078      	str	r0, [r7, #4]
 801b1d4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 801b1d6:	2300      	movs	r3, #0
 801b1d8:	60bb      	str	r3, [r7, #8]
 801b1da:	68bb      	ldr	r3, [r7, #8]
 801b1dc:	60fb      	str	r3, [r7, #12]
 801b1de:	e029      	b.n	801b234 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 801b1e0:	4a27      	ldr	r2, [pc, #156]	@ (801b280 <chk_lock+0xb4>)
 801b1e2:	68fb      	ldr	r3, [r7, #12]
 801b1e4:	011b      	lsls	r3, r3, #4
 801b1e6:	4413      	add	r3, r2
 801b1e8:	681b      	ldr	r3, [r3, #0]
 801b1ea:	2b00      	cmp	r3, #0
 801b1ec:	d01d      	beq.n	801b22a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801b1ee:	4a24      	ldr	r2, [pc, #144]	@ (801b280 <chk_lock+0xb4>)
 801b1f0:	68fb      	ldr	r3, [r7, #12]
 801b1f2:	011b      	lsls	r3, r3, #4
 801b1f4:	4413      	add	r3, r2
 801b1f6:	681a      	ldr	r2, [r3, #0]
 801b1f8:	687b      	ldr	r3, [r7, #4]
 801b1fa:	681b      	ldr	r3, [r3, #0]
 801b1fc:	429a      	cmp	r2, r3
 801b1fe:	d116      	bne.n	801b22e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 801b200:	4a1f      	ldr	r2, [pc, #124]	@ (801b280 <chk_lock+0xb4>)
 801b202:	68fb      	ldr	r3, [r7, #12]
 801b204:	011b      	lsls	r3, r3, #4
 801b206:	4413      	add	r3, r2
 801b208:	3304      	adds	r3, #4
 801b20a:	681a      	ldr	r2, [r3, #0]
 801b20c:	687b      	ldr	r3, [r7, #4]
 801b20e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801b210:	429a      	cmp	r2, r3
 801b212:	d10c      	bne.n	801b22e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 801b214:	4a1a      	ldr	r2, [pc, #104]	@ (801b280 <chk_lock+0xb4>)
 801b216:	68fb      	ldr	r3, [r7, #12]
 801b218:	011b      	lsls	r3, r3, #4
 801b21a:	4413      	add	r3, r2
 801b21c:	3308      	adds	r3, #8
 801b21e:	681a      	ldr	r2, [r3, #0]
 801b220:	687b      	ldr	r3, [r7, #4]
 801b222:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 801b224:	429a      	cmp	r2, r3
 801b226:	d102      	bne.n	801b22e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 801b228:	e007      	b.n	801b23a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 801b22a:	2301      	movs	r3, #1
 801b22c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 801b22e:	68fb      	ldr	r3, [r7, #12]
 801b230:	3301      	adds	r3, #1
 801b232:	60fb      	str	r3, [r7, #12]
 801b234:	68fb      	ldr	r3, [r7, #12]
 801b236:	2b00      	cmp	r3, #0
 801b238:	d0d2      	beq.n	801b1e0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 801b23a:	68fb      	ldr	r3, [r7, #12]
 801b23c:	2b01      	cmp	r3, #1
 801b23e:	d109      	bne.n	801b254 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 801b240:	68bb      	ldr	r3, [r7, #8]
 801b242:	2b00      	cmp	r3, #0
 801b244:	d102      	bne.n	801b24c <chk_lock+0x80>
 801b246:	683b      	ldr	r3, [r7, #0]
 801b248:	2b02      	cmp	r3, #2
 801b24a:	d101      	bne.n	801b250 <chk_lock+0x84>
 801b24c:	2300      	movs	r3, #0
 801b24e:	e010      	b.n	801b272 <chk_lock+0xa6>
 801b250:	2312      	movs	r3, #18
 801b252:	e00e      	b.n	801b272 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 801b254:	683b      	ldr	r3, [r7, #0]
 801b256:	2b00      	cmp	r3, #0
 801b258:	d108      	bne.n	801b26c <chk_lock+0xa0>
 801b25a:	4a09      	ldr	r2, [pc, #36]	@ (801b280 <chk_lock+0xb4>)
 801b25c:	68fb      	ldr	r3, [r7, #12]
 801b25e:	011b      	lsls	r3, r3, #4
 801b260:	4413      	add	r3, r2
 801b262:	330c      	adds	r3, #12
 801b264:	881b      	ldrh	r3, [r3, #0]
 801b266:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801b26a:	d101      	bne.n	801b270 <chk_lock+0xa4>
 801b26c:	2310      	movs	r3, #16
 801b26e:	e000      	b.n	801b272 <chk_lock+0xa6>
 801b270:	2300      	movs	r3, #0
}
 801b272:	4618      	mov	r0, r3
 801b274:	3714      	adds	r7, #20
 801b276:	46bd      	mov	sp, r7
 801b278:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b27c:	4770      	bx	lr
 801b27e:	bf00      	nop
 801b280:	2400055c 	.word	0x2400055c

0801b284 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 801b284:	b480      	push	{r7}
 801b286:	b083      	sub	sp, #12
 801b288:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801b28a:	2300      	movs	r3, #0
 801b28c:	607b      	str	r3, [r7, #4]
 801b28e:	e002      	b.n	801b296 <enq_lock+0x12>
 801b290:	687b      	ldr	r3, [r7, #4]
 801b292:	3301      	adds	r3, #1
 801b294:	607b      	str	r3, [r7, #4]
 801b296:	687b      	ldr	r3, [r7, #4]
 801b298:	2b00      	cmp	r3, #0
 801b29a:	d106      	bne.n	801b2aa <enq_lock+0x26>
 801b29c:	4a09      	ldr	r2, [pc, #36]	@ (801b2c4 <enq_lock+0x40>)
 801b29e:	687b      	ldr	r3, [r7, #4]
 801b2a0:	011b      	lsls	r3, r3, #4
 801b2a2:	4413      	add	r3, r2
 801b2a4:	681b      	ldr	r3, [r3, #0]
 801b2a6:	2b00      	cmp	r3, #0
 801b2a8:	d1f2      	bne.n	801b290 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 801b2aa:	687b      	ldr	r3, [r7, #4]
 801b2ac:	2b01      	cmp	r3, #1
 801b2ae:	bf14      	ite	ne
 801b2b0:	2301      	movne	r3, #1
 801b2b2:	2300      	moveq	r3, #0
 801b2b4:	b2db      	uxtb	r3, r3
}
 801b2b6:	4618      	mov	r0, r3
 801b2b8:	370c      	adds	r7, #12
 801b2ba:	46bd      	mov	sp, r7
 801b2bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b2c0:	4770      	bx	lr
 801b2c2:	bf00      	nop
 801b2c4:	2400055c 	.word	0x2400055c

0801b2c8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 801b2c8:	b480      	push	{r7}
 801b2ca:	b085      	sub	sp, #20
 801b2cc:	af00      	add	r7, sp, #0
 801b2ce:	6078      	str	r0, [r7, #4]
 801b2d0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801b2d2:	2300      	movs	r3, #0
 801b2d4:	60fb      	str	r3, [r7, #12]
 801b2d6:	e01f      	b.n	801b318 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 801b2d8:	4a41      	ldr	r2, [pc, #260]	@ (801b3e0 <inc_lock+0x118>)
 801b2da:	68fb      	ldr	r3, [r7, #12]
 801b2dc:	011b      	lsls	r3, r3, #4
 801b2de:	4413      	add	r3, r2
 801b2e0:	681a      	ldr	r2, [r3, #0]
 801b2e2:	687b      	ldr	r3, [r7, #4]
 801b2e4:	681b      	ldr	r3, [r3, #0]
 801b2e6:	429a      	cmp	r2, r3
 801b2e8:	d113      	bne.n	801b312 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 801b2ea:	4a3d      	ldr	r2, [pc, #244]	@ (801b3e0 <inc_lock+0x118>)
 801b2ec:	68fb      	ldr	r3, [r7, #12]
 801b2ee:	011b      	lsls	r3, r3, #4
 801b2f0:	4413      	add	r3, r2
 801b2f2:	3304      	adds	r3, #4
 801b2f4:	681a      	ldr	r2, [r3, #0]
 801b2f6:	687b      	ldr	r3, [r7, #4]
 801b2f8:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 801b2fa:	429a      	cmp	r2, r3
 801b2fc:	d109      	bne.n	801b312 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 801b2fe:	4a38      	ldr	r2, [pc, #224]	@ (801b3e0 <inc_lock+0x118>)
 801b300:	68fb      	ldr	r3, [r7, #12]
 801b302:	011b      	lsls	r3, r3, #4
 801b304:	4413      	add	r3, r2
 801b306:	3308      	adds	r3, #8
 801b308:	681a      	ldr	r2, [r3, #0]
 801b30a:	687b      	ldr	r3, [r7, #4]
 801b30c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 801b30e:	429a      	cmp	r2, r3
 801b310:	d006      	beq.n	801b320 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801b312:	68fb      	ldr	r3, [r7, #12]
 801b314:	3301      	adds	r3, #1
 801b316:	60fb      	str	r3, [r7, #12]
 801b318:	68fb      	ldr	r3, [r7, #12]
 801b31a:	2b00      	cmp	r3, #0
 801b31c:	d0dc      	beq.n	801b2d8 <inc_lock+0x10>
 801b31e:	e000      	b.n	801b322 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 801b320:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 801b322:	68fb      	ldr	r3, [r7, #12]
 801b324:	2b01      	cmp	r3, #1
 801b326:	d132      	bne.n	801b38e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801b328:	2300      	movs	r3, #0
 801b32a:	60fb      	str	r3, [r7, #12]
 801b32c:	e002      	b.n	801b334 <inc_lock+0x6c>
 801b32e:	68fb      	ldr	r3, [r7, #12]
 801b330:	3301      	adds	r3, #1
 801b332:	60fb      	str	r3, [r7, #12]
 801b334:	68fb      	ldr	r3, [r7, #12]
 801b336:	2b00      	cmp	r3, #0
 801b338:	d106      	bne.n	801b348 <inc_lock+0x80>
 801b33a:	4a29      	ldr	r2, [pc, #164]	@ (801b3e0 <inc_lock+0x118>)
 801b33c:	68fb      	ldr	r3, [r7, #12]
 801b33e:	011b      	lsls	r3, r3, #4
 801b340:	4413      	add	r3, r2
 801b342:	681b      	ldr	r3, [r3, #0]
 801b344:	2b00      	cmp	r3, #0
 801b346:	d1f2      	bne.n	801b32e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 801b348:	68fb      	ldr	r3, [r7, #12]
 801b34a:	2b01      	cmp	r3, #1
 801b34c:	d101      	bne.n	801b352 <inc_lock+0x8a>
 801b34e:	2300      	movs	r3, #0
 801b350:	e040      	b.n	801b3d4 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 801b352:	687b      	ldr	r3, [r7, #4]
 801b354:	681a      	ldr	r2, [r3, #0]
 801b356:	4922      	ldr	r1, [pc, #136]	@ (801b3e0 <inc_lock+0x118>)
 801b358:	68fb      	ldr	r3, [r7, #12]
 801b35a:	011b      	lsls	r3, r3, #4
 801b35c:	440b      	add	r3, r1
 801b35e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 801b360:	687b      	ldr	r3, [r7, #4]
 801b362:	689a      	ldr	r2, [r3, #8]
 801b364:	491e      	ldr	r1, [pc, #120]	@ (801b3e0 <inc_lock+0x118>)
 801b366:	68fb      	ldr	r3, [r7, #12]
 801b368:	011b      	lsls	r3, r3, #4
 801b36a:	440b      	add	r3, r1
 801b36c:	3304      	adds	r3, #4
 801b36e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 801b370:	687b      	ldr	r3, [r7, #4]
 801b372:	695a      	ldr	r2, [r3, #20]
 801b374:	491a      	ldr	r1, [pc, #104]	@ (801b3e0 <inc_lock+0x118>)
 801b376:	68fb      	ldr	r3, [r7, #12]
 801b378:	011b      	lsls	r3, r3, #4
 801b37a:	440b      	add	r3, r1
 801b37c:	3308      	adds	r3, #8
 801b37e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 801b380:	4a17      	ldr	r2, [pc, #92]	@ (801b3e0 <inc_lock+0x118>)
 801b382:	68fb      	ldr	r3, [r7, #12]
 801b384:	011b      	lsls	r3, r3, #4
 801b386:	4413      	add	r3, r2
 801b388:	330c      	adds	r3, #12
 801b38a:	2200      	movs	r2, #0
 801b38c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 801b38e:	683b      	ldr	r3, [r7, #0]
 801b390:	2b00      	cmp	r3, #0
 801b392:	d009      	beq.n	801b3a8 <inc_lock+0xe0>
 801b394:	4a12      	ldr	r2, [pc, #72]	@ (801b3e0 <inc_lock+0x118>)
 801b396:	68fb      	ldr	r3, [r7, #12]
 801b398:	011b      	lsls	r3, r3, #4
 801b39a:	4413      	add	r3, r2
 801b39c:	330c      	adds	r3, #12
 801b39e:	881b      	ldrh	r3, [r3, #0]
 801b3a0:	2b00      	cmp	r3, #0
 801b3a2:	d001      	beq.n	801b3a8 <inc_lock+0xe0>
 801b3a4:	2300      	movs	r3, #0
 801b3a6:	e015      	b.n	801b3d4 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 801b3a8:	683b      	ldr	r3, [r7, #0]
 801b3aa:	2b00      	cmp	r3, #0
 801b3ac:	d108      	bne.n	801b3c0 <inc_lock+0xf8>
 801b3ae:	4a0c      	ldr	r2, [pc, #48]	@ (801b3e0 <inc_lock+0x118>)
 801b3b0:	68fb      	ldr	r3, [r7, #12]
 801b3b2:	011b      	lsls	r3, r3, #4
 801b3b4:	4413      	add	r3, r2
 801b3b6:	330c      	adds	r3, #12
 801b3b8:	881b      	ldrh	r3, [r3, #0]
 801b3ba:	3301      	adds	r3, #1
 801b3bc:	b29a      	uxth	r2, r3
 801b3be:	e001      	b.n	801b3c4 <inc_lock+0xfc>
 801b3c0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801b3c4:	4906      	ldr	r1, [pc, #24]	@ (801b3e0 <inc_lock+0x118>)
 801b3c6:	68fb      	ldr	r3, [r7, #12]
 801b3c8:	011b      	lsls	r3, r3, #4
 801b3ca:	440b      	add	r3, r1
 801b3cc:	330c      	adds	r3, #12
 801b3ce:	801a      	strh	r2, [r3, #0]

	return i + 1;
 801b3d0:	68fb      	ldr	r3, [r7, #12]
 801b3d2:	3301      	adds	r3, #1
}
 801b3d4:	4618      	mov	r0, r3
 801b3d6:	3714      	adds	r7, #20
 801b3d8:	46bd      	mov	sp, r7
 801b3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b3de:	4770      	bx	lr
 801b3e0:	2400055c 	.word	0x2400055c

0801b3e4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 801b3e4:	b480      	push	{r7}
 801b3e6:	b085      	sub	sp, #20
 801b3e8:	af00      	add	r7, sp, #0
 801b3ea:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 801b3ec:	687b      	ldr	r3, [r7, #4]
 801b3ee:	3b01      	subs	r3, #1
 801b3f0:	607b      	str	r3, [r7, #4]
 801b3f2:	687b      	ldr	r3, [r7, #4]
 801b3f4:	2b00      	cmp	r3, #0
 801b3f6:	d125      	bne.n	801b444 <dec_lock+0x60>
		n = Files[i].ctr;
 801b3f8:	4a17      	ldr	r2, [pc, #92]	@ (801b458 <dec_lock+0x74>)
 801b3fa:	687b      	ldr	r3, [r7, #4]
 801b3fc:	011b      	lsls	r3, r3, #4
 801b3fe:	4413      	add	r3, r2
 801b400:	330c      	adds	r3, #12
 801b402:	881b      	ldrh	r3, [r3, #0]
 801b404:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 801b406:	89fb      	ldrh	r3, [r7, #14]
 801b408:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801b40c:	d101      	bne.n	801b412 <dec_lock+0x2e>
 801b40e:	2300      	movs	r3, #0
 801b410:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 801b412:	89fb      	ldrh	r3, [r7, #14]
 801b414:	2b00      	cmp	r3, #0
 801b416:	d002      	beq.n	801b41e <dec_lock+0x3a>
 801b418:	89fb      	ldrh	r3, [r7, #14]
 801b41a:	3b01      	subs	r3, #1
 801b41c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 801b41e:	4a0e      	ldr	r2, [pc, #56]	@ (801b458 <dec_lock+0x74>)
 801b420:	687b      	ldr	r3, [r7, #4]
 801b422:	011b      	lsls	r3, r3, #4
 801b424:	4413      	add	r3, r2
 801b426:	330c      	adds	r3, #12
 801b428:	89fa      	ldrh	r2, [r7, #14]
 801b42a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 801b42c:	89fb      	ldrh	r3, [r7, #14]
 801b42e:	2b00      	cmp	r3, #0
 801b430:	d105      	bne.n	801b43e <dec_lock+0x5a>
 801b432:	4a09      	ldr	r2, [pc, #36]	@ (801b458 <dec_lock+0x74>)
 801b434:	687b      	ldr	r3, [r7, #4]
 801b436:	011b      	lsls	r3, r3, #4
 801b438:	4413      	add	r3, r2
 801b43a:	2200      	movs	r2, #0
 801b43c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 801b43e:	2300      	movs	r3, #0
 801b440:	737b      	strb	r3, [r7, #13]
 801b442:	e001      	b.n	801b448 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 801b444:	2302      	movs	r3, #2
 801b446:	737b      	strb	r3, [r7, #13]
	}
	return res;
 801b448:	7b7b      	ldrb	r3, [r7, #13]
}
 801b44a:	4618      	mov	r0, r3
 801b44c:	3714      	adds	r7, #20
 801b44e:	46bd      	mov	sp, r7
 801b450:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b454:	4770      	bx	lr
 801b456:	bf00      	nop
 801b458:	2400055c 	.word	0x2400055c

0801b45c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 801b45c:	b480      	push	{r7}
 801b45e:	b085      	sub	sp, #20
 801b460:	af00      	add	r7, sp, #0
 801b462:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 801b464:	2300      	movs	r3, #0
 801b466:	60fb      	str	r3, [r7, #12]
 801b468:	e010      	b.n	801b48c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 801b46a:	4a0d      	ldr	r2, [pc, #52]	@ (801b4a0 <clear_lock+0x44>)
 801b46c:	68fb      	ldr	r3, [r7, #12]
 801b46e:	011b      	lsls	r3, r3, #4
 801b470:	4413      	add	r3, r2
 801b472:	681b      	ldr	r3, [r3, #0]
 801b474:	687a      	ldr	r2, [r7, #4]
 801b476:	429a      	cmp	r2, r3
 801b478:	d105      	bne.n	801b486 <clear_lock+0x2a>
 801b47a:	4a09      	ldr	r2, [pc, #36]	@ (801b4a0 <clear_lock+0x44>)
 801b47c:	68fb      	ldr	r3, [r7, #12]
 801b47e:	011b      	lsls	r3, r3, #4
 801b480:	4413      	add	r3, r2
 801b482:	2200      	movs	r2, #0
 801b484:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 801b486:	68fb      	ldr	r3, [r7, #12]
 801b488:	3301      	adds	r3, #1
 801b48a:	60fb      	str	r3, [r7, #12]
 801b48c:	68fb      	ldr	r3, [r7, #12]
 801b48e:	2b00      	cmp	r3, #0
 801b490:	d0eb      	beq.n	801b46a <clear_lock+0xe>
	}
}
 801b492:	bf00      	nop
 801b494:	bf00      	nop
 801b496:	3714      	adds	r7, #20
 801b498:	46bd      	mov	sp, r7
 801b49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b49e:	4770      	bx	lr
 801b4a0:	2400055c 	.word	0x2400055c

0801b4a4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 801b4a4:	b580      	push	{r7, lr}
 801b4a6:	b086      	sub	sp, #24
 801b4a8:	af00      	add	r7, sp, #0
 801b4aa:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 801b4ac:	2300      	movs	r3, #0
 801b4ae:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 801b4b0:	687b      	ldr	r3, [r7, #4]
 801b4b2:	78db      	ldrb	r3, [r3, #3]
 801b4b4:	2b00      	cmp	r3, #0
 801b4b6:	d034      	beq.n	801b522 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 801b4b8:	687b      	ldr	r3, [r7, #4]
 801b4ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801b4bc:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 801b4be:	687b      	ldr	r3, [r7, #4]
 801b4c0:	7858      	ldrb	r0, [r3, #1]
 801b4c2:	687b      	ldr	r3, [r7, #4]
 801b4c4:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801b4c8:	2301      	movs	r3, #1
 801b4ca:	697a      	ldr	r2, [r7, #20]
 801b4cc:	f7ff fd40 	bl	801af50 <disk_write>
 801b4d0:	4603      	mov	r3, r0
 801b4d2:	2b00      	cmp	r3, #0
 801b4d4:	d002      	beq.n	801b4dc <sync_window+0x38>
			res = FR_DISK_ERR;
 801b4d6:	2301      	movs	r3, #1
 801b4d8:	73fb      	strb	r3, [r7, #15]
 801b4da:	e022      	b.n	801b522 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 801b4dc:	687b      	ldr	r3, [r7, #4]
 801b4de:	2200      	movs	r2, #0
 801b4e0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 801b4e2:	687b      	ldr	r3, [r7, #4]
 801b4e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b4e6:	697a      	ldr	r2, [r7, #20]
 801b4e8:	1ad2      	subs	r2, r2, r3
 801b4ea:	687b      	ldr	r3, [r7, #4]
 801b4ec:	6a1b      	ldr	r3, [r3, #32]
 801b4ee:	429a      	cmp	r2, r3
 801b4f0:	d217      	bcs.n	801b522 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801b4f2:	687b      	ldr	r3, [r7, #4]
 801b4f4:	789b      	ldrb	r3, [r3, #2]
 801b4f6:	613b      	str	r3, [r7, #16]
 801b4f8:	e010      	b.n	801b51c <sync_window+0x78>
					wsect += fs->fsize;
 801b4fa:	687b      	ldr	r3, [r7, #4]
 801b4fc:	6a1b      	ldr	r3, [r3, #32]
 801b4fe:	697a      	ldr	r2, [r7, #20]
 801b500:	4413      	add	r3, r2
 801b502:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 801b504:	687b      	ldr	r3, [r7, #4]
 801b506:	7858      	ldrb	r0, [r3, #1]
 801b508:	687b      	ldr	r3, [r7, #4]
 801b50a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801b50e:	2301      	movs	r3, #1
 801b510:	697a      	ldr	r2, [r7, #20]
 801b512:	f7ff fd1d 	bl	801af50 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801b516:	693b      	ldr	r3, [r7, #16]
 801b518:	3b01      	subs	r3, #1
 801b51a:	613b      	str	r3, [r7, #16]
 801b51c:	693b      	ldr	r3, [r7, #16]
 801b51e:	2b01      	cmp	r3, #1
 801b520:	d8eb      	bhi.n	801b4fa <sync_window+0x56>
				}
			}
		}
	}
	return res;
 801b522:	7bfb      	ldrb	r3, [r7, #15]
}
 801b524:	4618      	mov	r0, r3
 801b526:	3718      	adds	r7, #24
 801b528:	46bd      	mov	sp, r7
 801b52a:	bd80      	pop	{r7, pc}

0801b52c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 801b52c:	b580      	push	{r7, lr}
 801b52e:	b084      	sub	sp, #16
 801b530:	af00      	add	r7, sp, #0
 801b532:	6078      	str	r0, [r7, #4]
 801b534:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 801b536:	2300      	movs	r3, #0
 801b538:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 801b53a:	687b      	ldr	r3, [r7, #4]
 801b53c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801b53e:	683a      	ldr	r2, [r7, #0]
 801b540:	429a      	cmp	r2, r3
 801b542:	d01b      	beq.n	801b57c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 801b544:	6878      	ldr	r0, [r7, #4]
 801b546:	f7ff ffad 	bl	801b4a4 <sync_window>
 801b54a:	4603      	mov	r3, r0
 801b54c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 801b54e:	7bfb      	ldrb	r3, [r7, #15]
 801b550:	2b00      	cmp	r3, #0
 801b552:	d113      	bne.n	801b57c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 801b554:	687b      	ldr	r3, [r7, #4]
 801b556:	7858      	ldrb	r0, [r3, #1]
 801b558:	687b      	ldr	r3, [r7, #4]
 801b55a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801b55e:	2301      	movs	r3, #1
 801b560:	683a      	ldr	r2, [r7, #0]
 801b562:	f7ff fcd5 	bl	801af10 <disk_read>
 801b566:	4603      	mov	r3, r0
 801b568:	2b00      	cmp	r3, #0
 801b56a:	d004      	beq.n	801b576 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 801b56c:	f04f 33ff 	mov.w	r3, #4294967295
 801b570:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 801b572:	2301      	movs	r3, #1
 801b574:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 801b576:	687b      	ldr	r3, [r7, #4]
 801b578:	683a      	ldr	r2, [r7, #0]
 801b57a:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
	return res;
 801b57c:	7bfb      	ldrb	r3, [r7, #15]
}
 801b57e:	4618      	mov	r0, r3
 801b580:	3710      	adds	r7, #16
 801b582:	46bd      	mov	sp, r7
 801b584:	bd80      	pop	{r7, pc}
	...

0801b588 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 801b588:	b580      	push	{r7, lr}
 801b58a:	b084      	sub	sp, #16
 801b58c:	af00      	add	r7, sp, #0
 801b58e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 801b590:	6878      	ldr	r0, [r7, #4]
 801b592:	f7ff ff87 	bl	801b4a4 <sync_window>
 801b596:	4603      	mov	r3, r0
 801b598:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 801b59a:	7bfb      	ldrb	r3, [r7, #15]
 801b59c:	2b00      	cmp	r3, #0
 801b59e:	d159      	bne.n	801b654 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 801b5a0:	687b      	ldr	r3, [r7, #4]
 801b5a2:	781b      	ldrb	r3, [r3, #0]
 801b5a4:	2b03      	cmp	r3, #3
 801b5a6:	d149      	bne.n	801b63c <sync_fs+0xb4>
 801b5a8:	687b      	ldr	r3, [r7, #4]
 801b5aa:	791b      	ldrb	r3, [r3, #4]
 801b5ac:	2b01      	cmp	r3, #1
 801b5ae:	d145      	bne.n	801b63c <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 801b5b0:	687b      	ldr	r3, [r7, #4]
 801b5b2:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 801b5b6:	687b      	ldr	r3, [r7, #4]
 801b5b8:	899b      	ldrh	r3, [r3, #12]
 801b5ba:	461a      	mov	r2, r3
 801b5bc:	2100      	movs	r1, #0
 801b5be:	f7ff fda8 	bl	801b112 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 801b5c2:	687b      	ldr	r3, [r7, #4]
 801b5c4:	3338      	adds	r3, #56	@ 0x38
 801b5c6:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 801b5ca:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 801b5ce:	4618      	mov	r0, r3
 801b5d0:	f7ff fd37 	bl	801b042 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 801b5d4:	687b      	ldr	r3, [r7, #4]
 801b5d6:	3338      	adds	r3, #56	@ 0x38
 801b5d8:	4921      	ldr	r1, [pc, #132]	@ (801b660 <sync_fs+0xd8>)
 801b5da:	4618      	mov	r0, r3
 801b5dc:	f7ff fd4c 	bl	801b078 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 801b5e0:	687b      	ldr	r3, [r7, #4]
 801b5e2:	3338      	adds	r3, #56	@ 0x38
 801b5e4:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 801b5e8:	491e      	ldr	r1, [pc, #120]	@ (801b664 <sync_fs+0xdc>)
 801b5ea:	4618      	mov	r0, r3
 801b5ec:	f7ff fd44 	bl	801b078 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 801b5f0:	687b      	ldr	r3, [r7, #4]
 801b5f2:	3338      	adds	r3, #56	@ 0x38
 801b5f4:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 801b5f8:	687b      	ldr	r3, [r7, #4]
 801b5fa:	699b      	ldr	r3, [r3, #24]
 801b5fc:	4619      	mov	r1, r3
 801b5fe:	4610      	mov	r0, r2
 801b600:	f7ff fd3a 	bl	801b078 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 801b604:	687b      	ldr	r3, [r7, #4]
 801b606:	3338      	adds	r3, #56	@ 0x38
 801b608:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 801b60c:	687b      	ldr	r3, [r7, #4]
 801b60e:	695b      	ldr	r3, [r3, #20]
 801b610:	4619      	mov	r1, r3
 801b612:	4610      	mov	r0, r2
 801b614:	f7ff fd30 	bl	801b078 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 801b618:	687b      	ldr	r3, [r7, #4]
 801b61a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801b61c:	1c5a      	adds	r2, r3, #1
 801b61e:	687b      	ldr	r3, [r7, #4]
 801b620:	635a      	str	r2, [r3, #52]	@ 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 801b622:	687b      	ldr	r3, [r7, #4]
 801b624:	7858      	ldrb	r0, [r3, #1]
 801b626:	687b      	ldr	r3, [r7, #4]
 801b628:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801b62c:	687b      	ldr	r3, [r7, #4]
 801b62e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801b630:	2301      	movs	r3, #1
 801b632:	f7ff fc8d 	bl	801af50 <disk_write>
			fs->fsi_flag = 0;
 801b636:	687b      	ldr	r3, [r7, #4]
 801b638:	2200      	movs	r2, #0
 801b63a:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 801b63c:	687b      	ldr	r3, [r7, #4]
 801b63e:	785b      	ldrb	r3, [r3, #1]
 801b640:	2200      	movs	r2, #0
 801b642:	2100      	movs	r1, #0
 801b644:	4618      	mov	r0, r3
 801b646:	f7ff fca3 	bl	801af90 <disk_ioctl>
 801b64a:	4603      	mov	r3, r0
 801b64c:	2b00      	cmp	r3, #0
 801b64e:	d001      	beq.n	801b654 <sync_fs+0xcc>
 801b650:	2301      	movs	r3, #1
 801b652:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 801b654:	7bfb      	ldrb	r3, [r7, #15]
}
 801b656:	4618      	mov	r0, r3
 801b658:	3710      	adds	r7, #16
 801b65a:	46bd      	mov	sp, r7
 801b65c:	bd80      	pop	{r7, pc}
 801b65e:	bf00      	nop
 801b660:	41615252 	.word	0x41615252
 801b664:	61417272 	.word	0x61417272

0801b668 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 801b668:	b480      	push	{r7}
 801b66a:	b083      	sub	sp, #12
 801b66c:	af00      	add	r7, sp, #0
 801b66e:	6078      	str	r0, [r7, #4]
 801b670:	6039      	str	r1, [r7, #0]
	clst -= 2;
 801b672:	683b      	ldr	r3, [r7, #0]
 801b674:	3b02      	subs	r3, #2
 801b676:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 801b678:	687b      	ldr	r3, [r7, #4]
 801b67a:	69db      	ldr	r3, [r3, #28]
 801b67c:	3b02      	subs	r3, #2
 801b67e:	683a      	ldr	r2, [r7, #0]
 801b680:	429a      	cmp	r2, r3
 801b682:	d301      	bcc.n	801b688 <clust2sect+0x20>
 801b684:	2300      	movs	r3, #0
 801b686:	e008      	b.n	801b69a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 801b688:	687b      	ldr	r3, [r7, #4]
 801b68a:	895b      	ldrh	r3, [r3, #10]
 801b68c:	461a      	mov	r2, r3
 801b68e:	683b      	ldr	r3, [r7, #0]
 801b690:	fb03 f202 	mul.w	r2, r3, r2
 801b694:	687b      	ldr	r3, [r7, #4]
 801b696:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801b698:	4413      	add	r3, r2
}
 801b69a:	4618      	mov	r0, r3
 801b69c:	370c      	adds	r7, #12
 801b69e:	46bd      	mov	sp, r7
 801b6a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b6a4:	4770      	bx	lr

0801b6a6 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 801b6a6:	b580      	push	{r7, lr}
 801b6a8:	b086      	sub	sp, #24
 801b6aa:	af00      	add	r7, sp, #0
 801b6ac:	6078      	str	r0, [r7, #4]
 801b6ae:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 801b6b0:	687b      	ldr	r3, [r7, #4]
 801b6b2:	681b      	ldr	r3, [r3, #0]
 801b6b4:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 801b6b6:	683b      	ldr	r3, [r7, #0]
 801b6b8:	2b01      	cmp	r3, #1
 801b6ba:	d904      	bls.n	801b6c6 <get_fat+0x20>
 801b6bc:	693b      	ldr	r3, [r7, #16]
 801b6be:	69db      	ldr	r3, [r3, #28]
 801b6c0:	683a      	ldr	r2, [r7, #0]
 801b6c2:	429a      	cmp	r2, r3
 801b6c4:	d302      	bcc.n	801b6cc <get_fat+0x26>
		val = 1;	/* Internal error */
 801b6c6:	2301      	movs	r3, #1
 801b6c8:	617b      	str	r3, [r7, #20]
 801b6ca:	e0ba      	b.n	801b842 <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 801b6cc:	f04f 33ff 	mov.w	r3, #4294967295
 801b6d0:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 801b6d2:	693b      	ldr	r3, [r7, #16]
 801b6d4:	781b      	ldrb	r3, [r3, #0]
 801b6d6:	2b03      	cmp	r3, #3
 801b6d8:	f000 8082 	beq.w	801b7e0 <get_fat+0x13a>
 801b6dc:	2b03      	cmp	r3, #3
 801b6de:	f300 80a6 	bgt.w	801b82e <get_fat+0x188>
 801b6e2:	2b01      	cmp	r3, #1
 801b6e4:	d002      	beq.n	801b6ec <get_fat+0x46>
 801b6e6:	2b02      	cmp	r3, #2
 801b6e8:	d055      	beq.n	801b796 <get_fat+0xf0>
 801b6ea:	e0a0      	b.n	801b82e <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 801b6ec:	683b      	ldr	r3, [r7, #0]
 801b6ee:	60fb      	str	r3, [r7, #12]
 801b6f0:	68fb      	ldr	r3, [r7, #12]
 801b6f2:	085b      	lsrs	r3, r3, #1
 801b6f4:	68fa      	ldr	r2, [r7, #12]
 801b6f6:	4413      	add	r3, r2
 801b6f8:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801b6fa:	693b      	ldr	r3, [r7, #16]
 801b6fc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801b6fe:	693b      	ldr	r3, [r7, #16]
 801b700:	899b      	ldrh	r3, [r3, #12]
 801b702:	4619      	mov	r1, r3
 801b704:	68fb      	ldr	r3, [r7, #12]
 801b706:	fbb3 f3f1 	udiv	r3, r3, r1
 801b70a:	4413      	add	r3, r2
 801b70c:	4619      	mov	r1, r3
 801b70e:	6938      	ldr	r0, [r7, #16]
 801b710:	f7ff ff0c 	bl	801b52c <move_window>
 801b714:	4603      	mov	r3, r0
 801b716:	2b00      	cmp	r3, #0
 801b718:	f040 808c 	bne.w	801b834 <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 801b71c:	68fb      	ldr	r3, [r7, #12]
 801b71e:	1c5a      	adds	r2, r3, #1
 801b720:	60fa      	str	r2, [r7, #12]
 801b722:	693a      	ldr	r2, [r7, #16]
 801b724:	8992      	ldrh	r2, [r2, #12]
 801b726:	fbb3 f1f2 	udiv	r1, r3, r2
 801b72a:	fb01 f202 	mul.w	r2, r1, r2
 801b72e:	1a9b      	subs	r3, r3, r2
 801b730:	693a      	ldr	r2, [r7, #16]
 801b732:	4413      	add	r3, r2
 801b734:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801b738:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801b73a:	693b      	ldr	r3, [r7, #16]
 801b73c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801b73e:	693b      	ldr	r3, [r7, #16]
 801b740:	899b      	ldrh	r3, [r3, #12]
 801b742:	4619      	mov	r1, r3
 801b744:	68fb      	ldr	r3, [r7, #12]
 801b746:	fbb3 f3f1 	udiv	r3, r3, r1
 801b74a:	4413      	add	r3, r2
 801b74c:	4619      	mov	r1, r3
 801b74e:	6938      	ldr	r0, [r7, #16]
 801b750:	f7ff feec 	bl	801b52c <move_window>
 801b754:	4603      	mov	r3, r0
 801b756:	2b00      	cmp	r3, #0
 801b758:	d16e      	bne.n	801b838 <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 801b75a:	693b      	ldr	r3, [r7, #16]
 801b75c:	899b      	ldrh	r3, [r3, #12]
 801b75e:	461a      	mov	r2, r3
 801b760:	68fb      	ldr	r3, [r7, #12]
 801b762:	fbb3 f1f2 	udiv	r1, r3, r2
 801b766:	fb01 f202 	mul.w	r2, r1, r2
 801b76a:	1a9b      	subs	r3, r3, r2
 801b76c:	693a      	ldr	r2, [r7, #16]
 801b76e:	4413      	add	r3, r2
 801b770:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801b774:	021b      	lsls	r3, r3, #8
 801b776:	68ba      	ldr	r2, [r7, #8]
 801b778:	4313      	orrs	r3, r2
 801b77a:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 801b77c:	683b      	ldr	r3, [r7, #0]
 801b77e:	f003 0301 	and.w	r3, r3, #1
 801b782:	2b00      	cmp	r3, #0
 801b784:	d002      	beq.n	801b78c <get_fat+0xe6>
 801b786:	68bb      	ldr	r3, [r7, #8]
 801b788:	091b      	lsrs	r3, r3, #4
 801b78a:	e002      	b.n	801b792 <get_fat+0xec>
 801b78c:	68bb      	ldr	r3, [r7, #8]
 801b78e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801b792:	617b      	str	r3, [r7, #20]
			break;
 801b794:	e055      	b.n	801b842 <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801b796:	693b      	ldr	r3, [r7, #16]
 801b798:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801b79a:	693b      	ldr	r3, [r7, #16]
 801b79c:	899b      	ldrh	r3, [r3, #12]
 801b79e:	085b      	lsrs	r3, r3, #1
 801b7a0:	b29b      	uxth	r3, r3
 801b7a2:	4619      	mov	r1, r3
 801b7a4:	683b      	ldr	r3, [r7, #0]
 801b7a6:	fbb3 f3f1 	udiv	r3, r3, r1
 801b7aa:	4413      	add	r3, r2
 801b7ac:	4619      	mov	r1, r3
 801b7ae:	6938      	ldr	r0, [r7, #16]
 801b7b0:	f7ff febc 	bl	801b52c <move_window>
 801b7b4:	4603      	mov	r3, r0
 801b7b6:	2b00      	cmp	r3, #0
 801b7b8:	d140      	bne.n	801b83c <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 801b7ba:	693b      	ldr	r3, [r7, #16]
 801b7bc:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801b7c0:	683b      	ldr	r3, [r7, #0]
 801b7c2:	005b      	lsls	r3, r3, #1
 801b7c4:	693a      	ldr	r2, [r7, #16]
 801b7c6:	8992      	ldrh	r2, [r2, #12]
 801b7c8:	fbb3 f0f2 	udiv	r0, r3, r2
 801b7cc:	fb00 f202 	mul.w	r2, r0, r2
 801b7d0:	1a9b      	subs	r3, r3, r2
 801b7d2:	440b      	add	r3, r1
 801b7d4:	4618      	mov	r0, r3
 801b7d6:	f7ff fbf9 	bl	801afcc <ld_word>
 801b7da:	4603      	mov	r3, r0
 801b7dc:	617b      	str	r3, [r7, #20]
			break;
 801b7de:	e030      	b.n	801b842 <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801b7e0:	693b      	ldr	r3, [r7, #16]
 801b7e2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801b7e4:	693b      	ldr	r3, [r7, #16]
 801b7e6:	899b      	ldrh	r3, [r3, #12]
 801b7e8:	089b      	lsrs	r3, r3, #2
 801b7ea:	b29b      	uxth	r3, r3
 801b7ec:	4619      	mov	r1, r3
 801b7ee:	683b      	ldr	r3, [r7, #0]
 801b7f0:	fbb3 f3f1 	udiv	r3, r3, r1
 801b7f4:	4413      	add	r3, r2
 801b7f6:	4619      	mov	r1, r3
 801b7f8:	6938      	ldr	r0, [r7, #16]
 801b7fa:	f7ff fe97 	bl	801b52c <move_window>
 801b7fe:	4603      	mov	r3, r0
 801b800:	2b00      	cmp	r3, #0
 801b802:	d11d      	bne.n	801b840 <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 801b804:	693b      	ldr	r3, [r7, #16]
 801b806:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801b80a:	683b      	ldr	r3, [r7, #0]
 801b80c:	009b      	lsls	r3, r3, #2
 801b80e:	693a      	ldr	r2, [r7, #16]
 801b810:	8992      	ldrh	r2, [r2, #12]
 801b812:	fbb3 f0f2 	udiv	r0, r3, r2
 801b816:	fb00 f202 	mul.w	r2, r0, r2
 801b81a:	1a9b      	subs	r3, r3, r2
 801b81c:	440b      	add	r3, r1
 801b81e:	4618      	mov	r0, r3
 801b820:	f7ff fbec 	bl	801affc <ld_dword>
 801b824:	4603      	mov	r3, r0
 801b826:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 801b82a:	617b      	str	r3, [r7, #20]
			break;
 801b82c:	e009      	b.n	801b842 <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 801b82e:	2301      	movs	r3, #1
 801b830:	617b      	str	r3, [r7, #20]
 801b832:	e006      	b.n	801b842 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801b834:	bf00      	nop
 801b836:	e004      	b.n	801b842 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801b838:	bf00      	nop
 801b83a:	e002      	b.n	801b842 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801b83c:	bf00      	nop
 801b83e:	e000      	b.n	801b842 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801b840:	bf00      	nop
		}
	}

	return val;
 801b842:	697b      	ldr	r3, [r7, #20]
}
 801b844:	4618      	mov	r0, r3
 801b846:	3718      	adds	r7, #24
 801b848:	46bd      	mov	sp, r7
 801b84a:	bd80      	pop	{r7, pc}

0801b84c <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 801b84c:	b590      	push	{r4, r7, lr}
 801b84e:	b089      	sub	sp, #36	@ 0x24
 801b850:	af00      	add	r7, sp, #0
 801b852:	60f8      	str	r0, [r7, #12]
 801b854:	60b9      	str	r1, [r7, #8]
 801b856:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 801b858:	2302      	movs	r3, #2
 801b85a:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 801b85c:	68bb      	ldr	r3, [r7, #8]
 801b85e:	2b01      	cmp	r3, #1
 801b860:	f240 8109 	bls.w	801ba76 <put_fat+0x22a>
 801b864:	68fb      	ldr	r3, [r7, #12]
 801b866:	69db      	ldr	r3, [r3, #28]
 801b868:	68ba      	ldr	r2, [r7, #8]
 801b86a:	429a      	cmp	r2, r3
 801b86c:	f080 8103 	bcs.w	801ba76 <put_fat+0x22a>
		switch (fs->fs_type) {
 801b870:	68fb      	ldr	r3, [r7, #12]
 801b872:	781b      	ldrb	r3, [r3, #0]
 801b874:	2b03      	cmp	r3, #3
 801b876:	f000 80b6 	beq.w	801b9e6 <put_fat+0x19a>
 801b87a:	2b03      	cmp	r3, #3
 801b87c:	f300 80fb 	bgt.w	801ba76 <put_fat+0x22a>
 801b880:	2b01      	cmp	r3, #1
 801b882:	d003      	beq.n	801b88c <put_fat+0x40>
 801b884:	2b02      	cmp	r3, #2
 801b886:	f000 8083 	beq.w	801b990 <put_fat+0x144>
 801b88a:	e0f4      	b.n	801ba76 <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 801b88c:	68bb      	ldr	r3, [r7, #8]
 801b88e:	61bb      	str	r3, [r7, #24]
 801b890:	69bb      	ldr	r3, [r7, #24]
 801b892:	085b      	lsrs	r3, r3, #1
 801b894:	69ba      	ldr	r2, [r7, #24]
 801b896:	4413      	add	r3, r2
 801b898:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801b89a:	68fb      	ldr	r3, [r7, #12]
 801b89c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801b89e:	68fb      	ldr	r3, [r7, #12]
 801b8a0:	899b      	ldrh	r3, [r3, #12]
 801b8a2:	4619      	mov	r1, r3
 801b8a4:	69bb      	ldr	r3, [r7, #24]
 801b8a6:	fbb3 f3f1 	udiv	r3, r3, r1
 801b8aa:	4413      	add	r3, r2
 801b8ac:	4619      	mov	r1, r3
 801b8ae:	68f8      	ldr	r0, [r7, #12]
 801b8b0:	f7ff fe3c 	bl	801b52c <move_window>
 801b8b4:	4603      	mov	r3, r0
 801b8b6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801b8b8:	7ffb      	ldrb	r3, [r7, #31]
 801b8ba:	2b00      	cmp	r3, #0
 801b8bc:	f040 80d4 	bne.w	801ba68 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 801b8c0:	68fb      	ldr	r3, [r7, #12]
 801b8c2:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801b8c6:	69bb      	ldr	r3, [r7, #24]
 801b8c8:	1c5a      	adds	r2, r3, #1
 801b8ca:	61ba      	str	r2, [r7, #24]
 801b8cc:	68fa      	ldr	r2, [r7, #12]
 801b8ce:	8992      	ldrh	r2, [r2, #12]
 801b8d0:	fbb3 f0f2 	udiv	r0, r3, r2
 801b8d4:	fb00 f202 	mul.w	r2, r0, r2
 801b8d8:	1a9b      	subs	r3, r3, r2
 801b8da:	440b      	add	r3, r1
 801b8dc:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 801b8de:	68bb      	ldr	r3, [r7, #8]
 801b8e0:	f003 0301 	and.w	r3, r3, #1
 801b8e4:	2b00      	cmp	r3, #0
 801b8e6:	d00d      	beq.n	801b904 <put_fat+0xb8>
 801b8e8:	697b      	ldr	r3, [r7, #20]
 801b8ea:	781b      	ldrb	r3, [r3, #0]
 801b8ec:	b25b      	sxtb	r3, r3
 801b8ee:	f003 030f 	and.w	r3, r3, #15
 801b8f2:	b25a      	sxtb	r2, r3
 801b8f4:	687b      	ldr	r3, [r7, #4]
 801b8f6:	b2db      	uxtb	r3, r3
 801b8f8:	011b      	lsls	r3, r3, #4
 801b8fa:	b25b      	sxtb	r3, r3
 801b8fc:	4313      	orrs	r3, r2
 801b8fe:	b25b      	sxtb	r3, r3
 801b900:	b2db      	uxtb	r3, r3
 801b902:	e001      	b.n	801b908 <put_fat+0xbc>
 801b904:	687b      	ldr	r3, [r7, #4]
 801b906:	b2db      	uxtb	r3, r3
 801b908:	697a      	ldr	r2, [r7, #20]
 801b90a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 801b90c:	68fb      	ldr	r3, [r7, #12]
 801b90e:	2201      	movs	r2, #1
 801b910:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801b912:	68fb      	ldr	r3, [r7, #12]
 801b914:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801b916:	68fb      	ldr	r3, [r7, #12]
 801b918:	899b      	ldrh	r3, [r3, #12]
 801b91a:	4619      	mov	r1, r3
 801b91c:	69bb      	ldr	r3, [r7, #24]
 801b91e:	fbb3 f3f1 	udiv	r3, r3, r1
 801b922:	4413      	add	r3, r2
 801b924:	4619      	mov	r1, r3
 801b926:	68f8      	ldr	r0, [r7, #12]
 801b928:	f7ff fe00 	bl	801b52c <move_window>
 801b92c:	4603      	mov	r3, r0
 801b92e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801b930:	7ffb      	ldrb	r3, [r7, #31]
 801b932:	2b00      	cmp	r3, #0
 801b934:	f040 809a 	bne.w	801ba6c <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 801b938:	68fb      	ldr	r3, [r7, #12]
 801b93a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801b93e:	68fb      	ldr	r3, [r7, #12]
 801b940:	899b      	ldrh	r3, [r3, #12]
 801b942:	461a      	mov	r2, r3
 801b944:	69bb      	ldr	r3, [r7, #24]
 801b946:	fbb3 f0f2 	udiv	r0, r3, r2
 801b94a:	fb00 f202 	mul.w	r2, r0, r2
 801b94e:	1a9b      	subs	r3, r3, r2
 801b950:	440b      	add	r3, r1
 801b952:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 801b954:	68bb      	ldr	r3, [r7, #8]
 801b956:	f003 0301 	and.w	r3, r3, #1
 801b95a:	2b00      	cmp	r3, #0
 801b95c:	d003      	beq.n	801b966 <put_fat+0x11a>
 801b95e:	687b      	ldr	r3, [r7, #4]
 801b960:	091b      	lsrs	r3, r3, #4
 801b962:	b2db      	uxtb	r3, r3
 801b964:	e00e      	b.n	801b984 <put_fat+0x138>
 801b966:	697b      	ldr	r3, [r7, #20]
 801b968:	781b      	ldrb	r3, [r3, #0]
 801b96a:	b25b      	sxtb	r3, r3
 801b96c:	f023 030f 	bic.w	r3, r3, #15
 801b970:	b25a      	sxtb	r2, r3
 801b972:	687b      	ldr	r3, [r7, #4]
 801b974:	0a1b      	lsrs	r3, r3, #8
 801b976:	b25b      	sxtb	r3, r3
 801b978:	f003 030f 	and.w	r3, r3, #15
 801b97c:	b25b      	sxtb	r3, r3
 801b97e:	4313      	orrs	r3, r2
 801b980:	b25b      	sxtb	r3, r3
 801b982:	b2db      	uxtb	r3, r3
 801b984:	697a      	ldr	r2, [r7, #20]
 801b986:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 801b988:	68fb      	ldr	r3, [r7, #12]
 801b98a:	2201      	movs	r2, #1
 801b98c:	70da      	strb	r2, [r3, #3]
			break;
 801b98e:	e072      	b.n	801ba76 <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 801b990:	68fb      	ldr	r3, [r7, #12]
 801b992:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801b994:	68fb      	ldr	r3, [r7, #12]
 801b996:	899b      	ldrh	r3, [r3, #12]
 801b998:	085b      	lsrs	r3, r3, #1
 801b99a:	b29b      	uxth	r3, r3
 801b99c:	4619      	mov	r1, r3
 801b99e:	68bb      	ldr	r3, [r7, #8]
 801b9a0:	fbb3 f3f1 	udiv	r3, r3, r1
 801b9a4:	4413      	add	r3, r2
 801b9a6:	4619      	mov	r1, r3
 801b9a8:	68f8      	ldr	r0, [r7, #12]
 801b9aa:	f7ff fdbf 	bl	801b52c <move_window>
 801b9ae:	4603      	mov	r3, r0
 801b9b0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801b9b2:	7ffb      	ldrb	r3, [r7, #31]
 801b9b4:	2b00      	cmp	r3, #0
 801b9b6:	d15b      	bne.n	801ba70 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 801b9b8:	68fb      	ldr	r3, [r7, #12]
 801b9ba:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801b9be:	68bb      	ldr	r3, [r7, #8]
 801b9c0:	005b      	lsls	r3, r3, #1
 801b9c2:	68fa      	ldr	r2, [r7, #12]
 801b9c4:	8992      	ldrh	r2, [r2, #12]
 801b9c6:	fbb3 f0f2 	udiv	r0, r3, r2
 801b9ca:	fb00 f202 	mul.w	r2, r0, r2
 801b9ce:	1a9b      	subs	r3, r3, r2
 801b9d0:	440b      	add	r3, r1
 801b9d2:	687a      	ldr	r2, [r7, #4]
 801b9d4:	b292      	uxth	r2, r2
 801b9d6:	4611      	mov	r1, r2
 801b9d8:	4618      	mov	r0, r3
 801b9da:	f7ff fb32 	bl	801b042 <st_word>
			fs->wflag = 1;
 801b9de:	68fb      	ldr	r3, [r7, #12]
 801b9e0:	2201      	movs	r2, #1
 801b9e2:	70da      	strb	r2, [r3, #3]
			break;
 801b9e4:	e047      	b.n	801ba76 <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 801b9e6:	68fb      	ldr	r3, [r7, #12]
 801b9e8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801b9ea:	68fb      	ldr	r3, [r7, #12]
 801b9ec:	899b      	ldrh	r3, [r3, #12]
 801b9ee:	089b      	lsrs	r3, r3, #2
 801b9f0:	b29b      	uxth	r3, r3
 801b9f2:	4619      	mov	r1, r3
 801b9f4:	68bb      	ldr	r3, [r7, #8]
 801b9f6:	fbb3 f3f1 	udiv	r3, r3, r1
 801b9fa:	4413      	add	r3, r2
 801b9fc:	4619      	mov	r1, r3
 801b9fe:	68f8      	ldr	r0, [r7, #12]
 801ba00:	f7ff fd94 	bl	801b52c <move_window>
 801ba04:	4603      	mov	r3, r0
 801ba06:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801ba08:	7ffb      	ldrb	r3, [r7, #31]
 801ba0a:	2b00      	cmp	r3, #0
 801ba0c:	d132      	bne.n	801ba74 <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 801ba0e:	687b      	ldr	r3, [r7, #4]
 801ba10:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 801ba14:	68fb      	ldr	r3, [r7, #12]
 801ba16:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801ba1a:	68bb      	ldr	r3, [r7, #8]
 801ba1c:	009b      	lsls	r3, r3, #2
 801ba1e:	68fa      	ldr	r2, [r7, #12]
 801ba20:	8992      	ldrh	r2, [r2, #12]
 801ba22:	fbb3 f0f2 	udiv	r0, r3, r2
 801ba26:	fb00 f202 	mul.w	r2, r0, r2
 801ba2a:	1a9b      	subs	r3, r3, r2
 801ba2c:	440b      	add	r3, r1
 801ba2e:	4618      	mov	r0, r3
 801ba30:	f7ff fae4 	bl	801affc <ld_dword>
 801ba34:	4603      	mov	r3, r0
 801ba36:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 801ba3a:	4323      	orrs	r3, r4
 801ba3c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 801ba3e:	68fb      	ldr	r3, [r7, #12]
 801ba40:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801ba44:	68bb      	ldr	r3, [r7, #8]
 801ba46:	009b      	lsls	r3, r3, #2
 801ba48:	68fa      	ldr	r2, [r7, #12]
 801ba4a:	8992      	ldrh	r2, [r2, #12]
 801ba4c:	fbb3 f0f2 	udiv	r0, r3, r2
 801ba50:	fb00 f202 	mul.w	r2, r0, r2
 801ba54:	1a9b      	subs	r3, r3, r2
 801ba56:	440b      	add	r3, r1
 801ba58:	6879      	ldr	r1, [r7, #4]
 801ba5a:	4618      	mov	r0, r3
 801ba5c:	f7ff fb0c 	bl	801b078 <st_dword>
			fs->wflag = 1;
 801ba60:	68fb      	ldr	r3, [r7, #12]
 801ba62:	2201      	movs	r2, #1
 801ba64:	70da      	strb	r2, [r3, #3]
			break;
 801ba66:	e006      	b.n	801ba76 <put_fat+0x22a>
			if (res != FR_OK) break;
 801ba68:	bf00      	nop
 801ba6a:	e004      	b.n	801ba76 <put_fat+0x22a>
			if (res != FR_OK) break;
 801ba6c:	bf00      	nop
 801ba6e:	e002      	b.n	801ba76 <put_fat+0x22a>
			if (res != FR_OK) break;
 801ba70:	bf00      	nop
 801ba72:	e000      	b.n	801ba76 <put_fat+0x22a>
			if (res != FR_OK) break;
 801ba74:	bf00      	nop
		}
	}
	return res;
 801ba76:	7ffb      	ldrb	r3, [r7, #31]
}
 801ba78:	4618      	mov	r0, r3
 801ba7a:	3724      	adds	r7, #36	@ 0x24
 801ba7c:	46bd      	mov	sp, r7
 801ba7e:	bd90      	pop	{r4, r7, pc}

0801ba80 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 801ba80:	b580      	push	{r7, lr}
 801ba82:	b088      	sub	sp, #32
 801ba84:	af00      	add	r7, sp, #0
 801ba86:	60f8      	str	r0, [r7, #12]
 801ba88:	60b9      	str	r1, [r7, #8]
 801ba8a:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 801ba8c:	2300      	movs	r3, #0
 801ba8e:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 801ba90:	68fb      	ldr	r3, [r7, #12]
 801ba92:	681b      	ldr	r3, [r3, #0]
 801ba94:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 801ba96:	68bb      	ldr	r3, [r7, #8]
 801ba98:	2b01      	cmp	r3, #1
 801ba9a:	d904      	bls.n	801baa6 <remove_chain+0x26>
 801ba9c:	69bb      	ldr	r3, [r7, #24]
 801ba9e:	69db      	ldr	r3, [r3, #28]
 801baa0:	68ba      	ldr	r2, [r7, #8]
 801baa2:	429a      	cmp	r2, r3
 801baa4:	d301      	bcc.n	801baaa <remove_chain+0x2a>
 801baa6:	2302      	movs	r3, #2
 801baa8:	e04b      	b.n	801bb42 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 801baaa:	687b      	ldr	r3, [r7, #4]
 801baac:	2b00      	cmp	r3, #0
 801baae:	d00c      	beq.n	801baca <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 801bab0:	f04f 32ff 	mov.w	r2, #4294967295
 801bab4:	6879      	ldr	r1, [r7, #4]
 801bab6:	69b8      	ldr	r0, [r7, #24]
 801bab8:	f7ff fec8 	bl	801b84c <put_fat>
 801babc:	4603      	mov	r3, r0
 801babe:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 801bac0:	7ffb      	ldrb	r3, [r7, #31]
 801bac2:	2b00      	cmp	r3, #0
 801bac4:	d001      	beq.n	801baca <remove_chain+0x4a>
 801bac6:	7ffb      	ldrb	r3, [r7, #31]
 801bac8:	e03b      	b.n	801bb42 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 801baca:	68b9      	ldr	r1, [r7, #8]
 801bacc:	68f8      	ldr	r0, [r7, #12]
 801bace:	f7ff fdea 	bl	801b6a6 <get_fat>
 801bad2:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 801bad4:	697b      	ldr	r3, [r7, #20]
 801bad6:	2b00      	cmp	r3, #0
 801bad8:	d031      	beq.n	801bb3e <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 801bada:	697b      	ldr	r3, [r7, #20]
 801badc:	2b01      	cmp	r3, #1
 801bade:	d101      	bne.n	801bae4 <remove_chain+0x64>
 801bae0:	2302      	movs	r3, #2
 801bae2:	e02e      	b.n	801bb42 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 801bae4:	697b      	ldr	r3, [r7, #20]
 801bae6:	f1b3 3fff 	cmp.w	r3, #4294967295
 801baea:	d101      	bne.n	801baf0 <remove_chain+0x70>
 801baec:	2301      	movs	r3, #1
 801baee:	e028      	b.n	801bb42 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 801baf0:	2200      	movs	r2, #0
 801baf2:	68b9      	ldr	r1, [r7, #8]
 801baf4:	69b8      	ldr	r0, [r7, #24]
 801baf6:	f7ff fea9 	bl	801b84c <put_fat>
 801bafa:	4603      	mov	r3, r0
 801bafc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 801bafe:	7ffb      	ldrb	r3, [r7, #31]
 801bb00:	2b00      	cmp	r3, #0
 801bb02:	d001      	beq.n	801bb08 <remove_chain+0x88>
 801bb04:	7ffb      	ldrb	r3, [r7, #31]
 801bb06:	e01c      	b.n	801bb42 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 801bb08:	69bb      	ldr	r3, [r7, #24]
 801bb0a:	699a      	ldr	r2, [r3, #24]
 801bb0c:	69bb      	ldr	r3, [r7, #24]
 801bb0e:	69db      	ldr	r3, [r3, #28]
 801bb10:	3b02      	subs	r3, #2
 801bb12:	429a      	cmp	r2, r3
 801bb14:	d20b      	bcs.n	801bb2e <remove_chain+0xae>
			fs->free_clst++;
 801bb16:	69bb      	ldr	r3, [r7, #24]
 801bb18:	699b      	ldr	r3, [r3, #24]
 801bb1a:	1c5a      	adds	r2, r3, #1
 801bb1c:	69bb      	ldr	r3, [r7, #24]
 801bb1e:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 801bb20:	69bb      	ldr	r3, [r7, #24]
 801bb22:	791b      	ldrb	r3, [r3, #4]
 801bb24:	f043 0301 	orr.w	r3, r3, #1
 801bb28:	b2da      	uxtb	r2, r3
 801bb2a:	69bb      	ldr	r3, [r7, #24]
 801bb2c:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 801bb2e:	697b      	ldr	r3, [r7, #20]
 801bb30:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 801bb32:	69bb      	ldr	r3, [r7, #24]
 801bb34:	69db      	ldr	r3, [r3, #28]
 801bb36:	68ba      	ldr	r2, [r7, #8]
 801bb38:	429a      	cmp	r2, r3
 801bb3a:	d3c6      	bcc.n	801baca <remove_chain+0x4a>
 801bb3c:	e000      	b.n	801bb40 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 801bb3e:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 801bb40:	2300      	movs	r3, #0
}
 801bb42:	4618      	mov	r0, r3
 801bb44:	3720      	adds	r7, #32
 801bb46:	46bd      	mov	sp, r7
 801bb48:	bd80      	pop	{r7, pc}

0801bb4a <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 801bb4a:	b580      	push	{r7, lr}
 801bb4c:	b088      	sub	sp, #32
 801bb4e:	af00      	add	r7, sp, #0
 801bb50:	6078      	str	r0, [r7, #4]
 801bb52:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 801bb54:	687b      	ldr	r3, [r7, #4]
 801bb56:	681b      	ldr	r3, [r3, #0]
 801bb58:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 801bb5a:	683b      	ldr	r3, [r7, #0]
 801bb5c:	2b00      	cmp	r3, #0
 801bb5e:	d10d      	bne.n	801bb7c <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 801bb60:	693b      	ldr	r3, [r7, #16]
 801bb62:	695b      	ldr	r3, [r3, #20]
 801bb64:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 801bb66:	69bb      	ldr	r3, [r7, #24]
 801bb68:	2b00      	cmp	r3, #0
 801bb6a:	d004      	beq.n	801bb76 <create_chain+0x2c>
 801bb6c:	693b      	ldr	r3, [r7, #16]
 801bb6e:	69db      	ldr	r3, [r3, #28]
 801bb70:	69ba      	ldr	r2, [r7, #24]
 801bb72:	429a      	cmp	r2, r3
 801bb74:	d31b      	bcc.n	801bbae <create_chain+0x64>
 801bb76:	2301      	movs	r3, #1
 801bb78:	61bb      	str	r3, [r7, #24]
 801bb7a:	e018      	b.n	801bbae <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 801bb7c:	6839      	ldr	r1, [r7, #0]
 801bb7e:	6878      	ldr	r0, [r7, #4]
 801bb80:	f7ff fd91 	bl	801b6a6 <get_fat>
 801bb84:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 801bb86:	68fb      	ldr	r3, [r7, #12]
 801bb88:	2b01      	cmp	r3, #1
 801bb8a:	d801      	bhi.n	801bb90 <create_chain+0x46>
 801bb8c:	2301      	movs	r3, #1
 801bb8e:	e070      	b.n	801bc72 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 801bb90:	68fb      	ldr	r3, [r7, #12]
 801bb92:	f1b3 3fff 	cmp.w	r3, #4294967295
 801bb96:	d101      	bne.n	801bb9c <create_chain+0x52>
 801bb98:	68fb      	ldr	r3, [r7, #12]
 801bb9a:	e06a      	b.n	801bc72 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 801bb9c:	693b      	ldr	r3, [r7, #16]
 801bb9e:	69db      	ldr	r3, [r3, #28]
 801bba0:	68fa      	ldr	r2, [r7, #12]
 801bba2:	429a      	cmp	r2, r3
 801bba4:	d201      	bcs.n	801bbaa <create_chain+0x60>
 801bba6:	68fb      	ldr	r3, [r7, #12]
 801bba8:	e063      	b.n	801bc72 <create_chain+0x128>
		scl = clst;
 801bbaa:	683b      	ldr	r3, [r7, #0]
 801bbac:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 801bbae:	69bb      	ldr	r3, [r7, #24]
 801bbb0:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 801bbb2:	69fb      	ldr	r3, [r7, #28]
 801bbb4:	3301      	adds	r3, #1
 801bbb6:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 801bbb8:	693b      	ldr	r3, [r7, #16]
 801bbba:	69db      	ldr	r3, [r3, #28]
 801bbbc:	69fa      	ldr	r2, [r7, #28]
 801bbbe:	429a      	cmp	r2, r3
 801bbc0:	d307      	bcc.n	801bbd2 <create_chain+0x88>
				ncl = 2;
 801bbc2:	2302      	movs	r3, #2
 801bbc4:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 801bbc6:	69fa      	ldr	r2, [r7, #28]
 801bbc8:	69bb      	ldr	r3, [r7, #24]
 801bbca:	429a      	cmp	r2, r3
 801bbcc:	d901      	bls.n	801bbd2 <create_chain+0x88>
 801bbce:	2300      	movs	r3, #0
 801bbd0:	e04f      	b.n	801bc72 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 801bbd2:	69f9      	ldr	r1, [r7, #28]
 801bbd4:	6878      	ldr	r0, [r7, #4]
 801bbd6:	f7ff fd66 	bl	801b6a6 <get_fat>
 801bbda:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 801bbdc:	68fb      	ldr	r3, [r7, #12]
 801bbde:	2b00      	cmp	r3, #0
 801bbe0:	d00e      	beq.n	801bc00 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 801bbe2:	68fb      	ldr	r3, [r7, #12]
 801bbe4:	2b01      	cmp	r3, #1
 801bbe6:	d003      	beq.n	801bbf0 <create_chain+0xa6>
 801bbe8:	68fb      	ldr	r3, [r7, #12]
 801bbea:	f1b3 3fff 	cmp.w	r3, #4294967295
 801bbee:	d101      	bne.n	801bbf4 <create_chain+0xaa>
 801bbf0:	68fb      	ldr	r3, [r7, #12]
 801bbf2:	e03e      	b.n	801bc72 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 801bbf4:	69fa      	ldr	r2, [r7, #28]
 801bbf6:	69bb      	ldr	r3, [r7, #24]
 801bbf8:	429a      	cmp	r2, r3
 801bbfa:	d1da      	bne.n	801bbb2 <create_chain+0x68>
 801bbfc:	2300      	movs	r3, #0
 801bbfe:	e038      	b.n	801bc72 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 801bc00:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 801bc02:	f04f 32ff 	mov.w	r2, #4294967295
 801bc06:	69f9      	ldr	r1, [r7, #28]
 801bc08:	6938      	ldr	r0, [r7, #16]
 801bc0a:	f7ff fe1f 	bl	801b84c <put_fat>
 801bc0e:	4603      	mov	r3, r0
 801bc10:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 801bc12:	7dfb      	ldrb	r3, [r7, #23]
 801bc14:	2b00      	cmp	r3, #0
 801bc16:	d109      	bne.n	801bc2c <create_chain+0xe2>
 801bc18:	683b      	ldr	r3, [r7, #0]
 801bc1a:	2b00      	cmp	r3, #0
 801bc1c:	d006      	beq.n	801bc2c <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 801bc1e:	69fa      	ldr	r2, [r7, #28]
 801bc20:	6839      	ldr	r1, [r7, #0]
 801bc22:	6938      	ldr	r0, [r7, #16]
 801bc24:	f7ff fe12 	bl	801b84c <put_fat>
 801bc28:	4603      	mov	r3, r0
 801bc2a:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 801bc2c:	7dfb      	ldrb	r3, [r7, #23]
 801bc2e:	2b00      	cmp	r3, #0
 801bc30:	d116      	bne.n	801bc60 <create_chain+0x116>
		fs->last_clst = ncl;
 801bc32:	693b      	ldr	r3, [r7, #16]
 801bc34:	69fa      	ldr	r2, [r7, #28]
 801bc36:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 801bc38:	693b      	ldr	r3, [r7, #16]
 801bc3a:	699a      	ldr	r2, [r3, #24]
 801bc3c:	693b      	ldr	r3, [r7, #16]
 801bc3e:	69db      	ldr	r3, [r3, #28]
 801bc40:	3b02      	subs	r3, #2
 801bc42:	429a      	cmp	r2, r3
 801bc44:	d804      	bhi.n	801bc50 <create_chain+0x106>
 801bc46:	693b      	ldr	r3, [r7, #16]
 801bc48:	699b      	ldr	r3, [r3, #24]
 801bc4a:	1e5a      	subs	r2, r3, #1
 801bc4c:	693b      	ldr	r3, [r7, #16]
 801bc4e:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 801bc50:	693b      	ldr	r3, [r7, #16]
 801bc52:	791b      	ldrb	r3, [r3, #4]
 801bc54:	f043 0301 	orr.w	r3, r3, #1
 801bc58:	b2da      	uxtb	r2, r3
 801bc5a:	693b      	ldr	r3, [r7, #16]
 801bc5c:	711a      	strb	r2, [r3, #4]
 801bc5e:	e007      	b.n	801bc70 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 801bc60:	7dfb      	ldrb	r3, [r7, #23]
 801bc62:	2b01      	cmp	r3, #1
 801bc64:	d102      	bne.n	801bc6c <create_chain+0x122>
 801bc66:	f04f 33ff 	mov.w	r3, #4294967295
 801bc6a:	e000      	b.n	801bc6e <create_chain+0x124>
 801bc6c:	2301      	movs	r3, #1
 801bc6e:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 801bc70:	69fb      	ldr	r3, [r7, #28]
}
 801bc72:	4618      	mov	r0, r3
 801bc74:	3720      	adds	r7, #32
 801bc76:	46bd      	mov	sp, r7
 801bc78:	bd80      	pop	{r7, pc}

0801bc7a <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 801bc7a:	b480      	push	{r7}
 801bc7c:	b087      	sub	sp, #28
 801bc7e:	af00      	add	r7, sp, #0
 801bc80:	6078      	str	r0, [r7, #4]
 801bc82:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 801bc84:	687b      	ldr	r3, [r7, #4]
 801bc86:	681b      	ldr	r3, [r3, #0]
 801bc88:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 801bc8a:	687b      	ldr	r3, [r7, #4]
 801bc8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801bc8e:	3304      	adds	r3, #4
 801bc90:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 801bc92:	68fb      	ldr	r3, [r7, #12]
 801bc94:	899b      	ldrh	r3, [r3, #12]
 801bc96:	461a      	mov	r2, r3
 801bc98:	683b      	ldr	r3, [r7, #0]
 801bc9a:	fbb3 f3f2 	udiv	r3, r3, r2
 801bc9e:	68fa      	ldr	r2, [r7, #12]
 801bca0:	8952      	ldrh	r2, [r2, #10]
 801bca2:	fbb3 f3f2 	udiv	r3, r3, r2
 801bca6:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801bca8:	693b      	ldr	r3, [r7, #16]
 801bcaa:	1d1a      	adds	r2, r3, #4
 801bcac:	613a      	str	r2, [r7, #16]
 801bcae:	681b      	ldr	r3, [r3, #0]
 801bcb0:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 801bcb2:	68bb      	ldr	r3, [r7, #8]
 801bcb4:	2b00      	cmp	r3, #0
 801bcb6:	d101      	bne.n	801bcbc <clmt_clust+0x42>
 801bcb8:	2300      	movs	r3, #0
 801bcba:	e010      	b.n	801bcde <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 801bcbc:	697a      	ldr	r2, [r7, #20]
 801bcbe:	68bb      	ldr	r3, [r7, #8]
 801bcc0:	429a      	cmp	r2, r3
 801bcc2:	d307      	bcc.n	801bcd4 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 801bcc4:	697a      	ldr	r2, [r7, #20]
 801bcc6:	68bb      	ldr	r3, [r7, #8]
 801bcc8:	1ad3      	subs	r3, r2, r3
 801bcca:	617b      	str	r3, [r7, #20]
 801bccc:	693b      	ldr	r3, [r7, #16]
 801bcce:	3304      	adds	r3, #4
 801bcd0:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801bcd2:	e7e9      	b.n	801bca8 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 801bcd4:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 801bcd6:	693b      	ldr	r3, [r7, #16]
 801bcd8:	681a      	ldr	r2, [r3, #0]
 801bcda:	697b      	ldr	r3, [r7, #20]
 801bcdc:	4413      	add	r3, r2
}
 801bcde:	4618      	mov	r0, r3
 801bce0:	371c      	adds	r7, #28
 801bce2:	46bd      	mov	sp, r7
 801bce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bce8:	4770      	bx	lr

0801bcea <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 801bcea:	b580      	push	{r7, lr}
 801bcec:	b086      	sub	sp, #24
 801bcee:	af00      	add	r7, sp, #0
 801bcf0:	6078      	str	r0, [r7, #4]
 801bcf2:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 801bcf4:	687b      	ldr	r3, [r7, #4]
 801bcf6:	681b      	ldr	r3, [r3, #0]
 801bcf8:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 801bcfa:	683b      	ldr	r3, [r7, #0]
 801bcfc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801bd00:	d204      	bcs.n	801bd0c <dir_sdi+0x22>
 801bd02:	683b      	ldr	r3, [r7, #0]
 801bd04:	f003 031f 	and.w	r3, r3, #31
 801bd08:	2b00      	cmp	r3, #0
 801bd0a:	d001      	beq.n	801bd10 <dir_sdi+0x26>
		return FR_INT_ERR;
 801bd0c:	2302      	movs	r3, #2
 801bd0e:	e071      	b.n	801bdf4 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 801bd10:	687b      	ldr	r3, [r7, #4]
 801bd12:	683a      	ldr	r2, [r7, #0]
 801bd14:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 801bd16:	687b      	ldr	r3, [r7, #4]
 801bd18:	689b      	ldr	r3, [r3, #8]
 801bd1a:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 801bd1c:	697b      	ldr	r3, [r7, #20]
 801bd1e:	2b00      	cmp	r3, #0
 801bd20:	d106      	bne.n	801bd30 <dir_sdi+0x46>
 801bd22:	693b      	ldr	r3, [r7, #16]
 801bd24:	781b      	ldrb	r3, [r3, #0]
 801bd26:	2b02      	cmp	r3, #2
 801bd28:	d902      	bls.n	801bd30 <dir_sdi+0x46>
		clst = fs->dirbase;
 801bd2a:	693b      	ldr	r3, [r7, #16]
 801bd2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801bd2e:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 801bd30:	697b      	ldr	r3, [r7, #20]
 801bd32:	2b00      	cmp	r3, #0
 801bd34:	d10c      	bne.n	801bd50 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 801bd36:	683b      	ldr	r3, [r7, #0]
 801bd38:	095b      	lsrs	r3, r3, #5
 801bd3a:	693a      	ldr	r2, [r7, #16]
 801bd3c:	8912      	ldrh	r2, [r2, #8]
 801bd3e:	4293      	cmp	r3, r2
 801bd40:	d301      	bcc.n	801bd46 <dir_sdi+0x5c>
 801bd42:	2302      	movs	r3, #2
 801bd44:	e056      	b.n	801bdf4 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 801bd46:	693b      	ldr	r3, [r7, #16]
 801bd48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801bd4a:	687b      	ldr	r3, [r7, #4]
 801bd4c:	61da      	str	r2, [r3, #28]
 801bd4e:	e02d      	b.n	801bdac <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 801bd50:	693b      	ldr	r3, [r7, #16]
 801bd52:	895b      	ldrh	r3, [r3, #10]
 801bd54:	461a      	mov	r2, r3
 801bd56:	693b      	ldr	r3, [r7, #16]
 801bd58:	899b      	ldrh	r3, [r3, #12]
 801bd5a:	fb02 f303 	mul.w	r3, r2, r3
 801bd5e:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 801bd60:	e019      	b.n	801bd96 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 801bd62:	687b      	ldr	r3, [r7, #4]
 801bd64:	6979      	ldr	r1, [r7, #20]
 801bd66:	4618      	mov	r0, r3
 801bd68:	f7ff fc9d 	bl	801b6a6 <get_fat>
 801bd6c:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801bd6e:	697b      	ldr	r3, [r7, #20]
 801bd70:	f1b3 3fff 	cmp.w	r3, #4294967295
 801bd74:	d101      	bne.n	801bd7a <dir_sdi+0x90>
 801bd76:	2301      	movs	r3, #1
 801bd78:	e03c      	b.n	801bdf4 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 801bd7a:	697b      	ldr	r3, [r7, #20]
 801bd7c:	2b01      	cmp	r3, #1
 801bd7e:	d904      	bls.n	801bd8a <dir_sdi+0xa0>
 801bd80:	693b      	ldr	r3, [r7, #16]
 801bd82:	69db      	ldr	r3, [r3, #28]
 801bd84:	697a      	ldr	r2, [r7, #20]
 801bd86:	429a      	cmp	r2, r3
 801bd88:	d301      	bcc.n	801bd8e <dir_sdi+0xa4>
 801bd8a:	2302      	movs	r3, #2
 801bd8c:	e032      	b.n	801bdf4 <dir_sdi+0x10a>
			ofs -= csz;
 801bd8e:	683a      	ldr	r2, [r7, #0]
 801bd90:	68fb      	ldr	r3, [r7, #12]
 801bd92:	1ad3      	subs	r3, r2, r3
 801bd94:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 801bd96:	683a      	ldr	r2, [r7, #0]
 801bd98:	68fb      	ldr	r3, [r7, #12]
 801bd9a:	429a      	cmp	r2, r3
 801bd9c:	d2e1      	bcs.n	801bd62 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 801bd9e:	6979      	ldr	r1, [r7, #20]
 801bda0:	6938      	ldr	r0, [r7, #16]
 801bda2:	f7ff fc61 	bl	801b668 <clust2sect>
 801bda6:	4602      	mov	r2, r0
 801bda8:	687b      	ldr	r3, [r7, #4]
 801bdaa:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 801bdac:	687b      	ldr	r3, [r7, #4]
 801bdae:	697a      	ldr	r2, [r7, #20]
 801bdb0:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 801bdb2:	687b      	ldr	r3, [r7, #4]
 801bdb4:	69db      	ldr	r3, [r3, #28]
 801bdb6:	2b00      	cmp	r3, #0
 801bdb8:	d101      	bne.n	801bdbe <dir_sdi+0xd4>
 801bdba:	2302      	movs	r3, #2
 801bdbc:	e01a      	b.n	801bdf4 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 801bdbe:	687b      	ldr	r3, [r7, #4]
 801bdc0:	69da      	ldr	r2, [r3, #28]
 801bdc2:	693b      	ldr	r3, [r7, #16]
 801bdc4:	899b      	ldrh	r3, [r3, #12]
 801bdc6:	4619      	mov	r1, r3
 801bdc8:	683b      	ldr	r3, [r7, #0]
 801bdca:	fbb3 f3f1 	udiv	r3, r3, r1
 801bdce:	441a      	add	r2, r3
 801bdd0:	687b      	ldr	r3, [r7, #4]
 801bdd2:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 801bdd4:	693b      	ldr	r3, [r7, #16]
 801bdd6:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801bdda:	693b      	ldr	r3, [r7, #16]
 801bddc:	899b      	ldrh	r3, [r3, #12]
 801bdde:	461a      	mov	r2, r3
 801bde0:	683b      	ldr	r3, [r7, #0]
 801bde2:	fbb3 f0f2 	udiv	r0, r3, r2
 801bde6:	fb00 f202 	mul.w	r2, r0, r2
 801bdea:	1a9b      	subs	r3, r3, r2
 801bdec:	18ca      	adds	r2, r1, r3
 801bdee:	687b      	ldr	r3, [r7, #4]
 801bdf0:	621a      	str	r2, [r3, #32]

	return FR_OK;
 801bdf2:	2300      	movs	r3, #0
}
 801bdf4:	4618      	mov	r0, r3
 801bdf6:	3718      	adds	r7, #24
 801bdf8:	46bd      	mov	sp, r7
 801bdfa:	bd80      	pop	{r7, pc}

0801bdfc <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 801bdfc:	b580      	push	{r7, lr}
 801bdfe:	b086      	sub	sp, #24
 801be00:	af00      	add	r7, sp, #0
 801be02:	6078      	str	r0, [r7, #4]
 801be04:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 801be06:	687b      	ldr	r3, [r7, #4]
 801be08:	681b      	ldr	r3, [r3, #0]
 801be0a:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 801be0c:	687b      	ldr	r3, [r7, #4]
 801be0e:	695b      	ldr	r3, [r3, #20]
 801be10:	3320      	adds	r3, #32
 801be12:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 801be14:	687b      	ldr	r3, [r7, #4]
 801be16:	69db      	ldr	r3, [r3, #28]
 801be18:	2b00      	cmp	r3, #0
 801be1a:	d003      	beq.n	801be24 <dir_next+0x28>
 801be1c:	68bb      	ldr	r3, [r7, #8]
 801be1e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801be22:	d301      	bcc.n	801be28 <dir_next+0x2c>
 801be24:	2304      	movs	r3, #4
 801be26:	e0bb      	b.n	801bfa0 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 801be28:	68fb      	ldr	r3, [r7, #12]
 801be2a:	899b      	ldrh	r3, [r3, #12]
 801be2c:	461a      	mov	r2, r3
 801be2e:	68bb      	ldr	r3, [r7, #8]
 801be30:	fbb3 f1f2 	udiv	r1, r3, r2
 801be34:	fb01 f202 	mul.w	r2, r1, r2
 801be38:	1a9b      	subs	r3, r3, r2
 801be3a:	2b00      	cmp	r3, #0
 801be3c:	f040 809d 	bne.w	801bf7a <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 801be40:	687b      	ldr	r3, [r7, #4]
 801be42:	69db      	ldr	r3, [r3, #28]
 801be44:	1c5a      	adds	r2, r3, #1
 801be46:	687b      	ldr	r3, [r7, #4]
 801be48:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 801be4a:	687b      	ldr	r3, [r7, #4]
 801be4c:	699b      	ldr	r3, [r3, #24]
 801be4e:	2b00      	cmp	r3, #0
 801be50:	d10b      	bne.n	801be6a <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 801be52:	68bb      	ldr	r3, [r7, #8]
 801be54:	095b      	lsrs	r3, r3, #5
 801be56:	68fa      	ldr	r2, [r7, #12]
 801be58:	8912      	ldrh	r2, [r2, #8]
 801be5a:	4293      	cmp	r3, r2
 801be5c:	f0c0 808d 	bcc.w	801bf7a <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 801be60:	687b      	ldr	r3, [r7, #4]
 801be62:	2200      	movs	r2, #0
 801be64:	61da      	str	r2, [r3, #28]
 801be66:	2304      	movs	r3, #4
 801be68:	e09a      	b.n	801bfa0 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 801be6a:	68fb      	ldr	r3, [r7, #12]
 801be6c:	899b      	ldrh	r3, [r3, #12]
 801be6e:	461a      	mov	r2, r3
 801be70:	68bb      	ldr	r3, [r7, #8]
 801be72:	fbb3 f3f2 	udiv	r3, r3, r2
 801be76:	68fa      	ldr	r2, [r7, #12]
 801be78:	8952      	ldrh	r2, [r2, #10]
 801be7a:	3a01      	subs	r2, #1
 801be7c:	4013      	ands	r3, r2
 801be7e:	2b00      	cmp	r3, #0
 801be80:	d17b      	bne.n	801bf7a <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 801be82:	687a      	ldr	r2, [r7, #4]
 801be84:	687b      	ldr	r3, [r7, #4]
 801be86:	699b      	ldr	r3, [r3, #24]
 801be88:	4619      	mov	r1, r3
 801be8a:	4610      	mov	r0, r2
 801be8c:	f7ff fc0b 	bl	801b6a6 <get_fat>
 801be90:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 801be92:	697b      	ldr	r3, [r7, #20]
 801be94:	2b01      	cmp	r3, #1
 801be96:	d801      	bhi.n	801be9c <dir_next+0xa0>
 801be98:	2302      	movs	r3, #2
 801be9a:	e081      	b.n	801bfa0 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 801be9c:	697b      	ldr	r3, [r7, #20]
 801be9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 801bea2:	d101      	bne.n	801bea8 <dir_next+0xac>
 801bea4:	2301      	movs	r3, #1
 801bea6:	e07b      	b.n	801bfa0 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 801bea8:	68fb      	ldr	r3, [r7, #12]
 801beaa:	69db      	ldr	r3, [r3, #28]
 801beac:	697a      	ldr	r2, [r7, #20]
 801beae:	429a      	cmp	r2, r3
 801beb0:	d359      	bcc.n	801bf66 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 801beb2:	683b      	ldr	r3, [r7, #0]
 801beb4:	2b00      	cmp	r3, #0
 801beb6:	d104      	bne.n	801bec2 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 801beb8:	687b      	ldr	r3, [r7, #4]
 801beba:	2200      	movs	r2, #0
 801bebc:	61da      	str	r2, [r3, #28]
 801bebe:	2304      	movs	r3, #4
 801bec0:	e06e      	b.n	801bfa0 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 801bec2:	687a      	ldr	r2, [r7, #4]
 801bec4:	687b      	ldr	r3, [r7, #4]
 801bec6:	699b      	ldr	r3, [r3, #24]
 801bec8:	4619      	mov	r1, r3
 801beca:	4610      	mov	r0, r2
 801becc:	f7ff fe3d 	bl	801bb4a <create_chain>
 801bed0:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 801bed2:	697b      	ldr	r3, [r7, #20]
 801bed4:	2b00      	cmp	r3, #0
 801bed6:	d101      	bne.n	801bedc <dir_next+0xe0>
 801bed8:	2307      	movs	r3, #7
 801beda:	e061      	b.n	801bfa0 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 801bedc:	697b      	ldr	r3, [r7, #20]
 801bede:	2b01      	cmp	r3, #1
 801bee0:	d101      	bne.n	801bee6 <dir_next+0xea>
 801bee2:	2302      	movs	r3, #2
 801bee4:	e05c      	b.n	801bfa0 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801bee6:	697b      	ldr	r3, [r7, #20]
 801bee8:	f1b3 3fff 	cmp.w	r3, #4294967295
 801beec:	d101      	bne.n	801bef2 <dir_next+0xf6>
 801beee:	2301      	movs	r3, #1
 801bef0:	e056      	b.n	801bfa0 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 801bef2:	68f8      	ldr	r0, [r7, #12]
 801bef4:	f7ff fad6 	bl	801b4a4 <sync_window>
 801bef8:	4603      	mov	r3, r0
 801befa:	2b00      	cmp	r3, #0
 801befc:	d001      	beq.n	801bf02 <dir_next+0x106>
 801befe:	2301      	movs	r3, #1
 801bf00:	e04e      	b.n	801bfa0 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 801bf02:	68fb      	ldr	r3, [r7, #12]
 801bf04:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 801bf08:	68fb      	ldr	r3, [r7, #12]
 801bf0a:	899b      	ldrh	r3, [r3, #12]
 801bf0c:	461a      	mov	r2, r3
 801bf0e:	2100      	movs	r1, #0
 801bf10:	f7ff f8ff 	bl	801b112 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801bf14:	2300      	movs	r3, #0
 801bf16:	613b      	str	r3, [r7, #16]
 801bf18:	6979      	ldr	r1, [r7, #20]
 801bf1a:	68f8      	ldr	r0, [r7, #12]
 801bf1c:	f7ff fba4 	bl	801b668 <clust2sect>
 801bf20:	4602      	mov	r2, r0
 801bf22:	68fb      	ldr	r3, [r7, #12]
 801bf24:	635a      	str	r2, [r3, #52]	@ 0x34
 801bf26:	e012      	b.n	801bf4e <dir_next+0x152>
						fs->wflag = 1;
 801bf28:	68fb      	ldr	r3, [r7, #12]
 801bf2a:	2201      	movs	r2, #1
 801bf2c:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 801bf2e:	68f8      	ldr	r0, [r7, #12]
 801bf30:	f7ff fab8 	bl	801b4a4 <sync_window>
 801bf34:	4603      	mov	r3, r0
 801bf36:	2b00      	cmp	r3, #0
 801bf38:	d001      	beq.n	801bf3e <dir_next+0x142>
 801bf3a:	2301      	movs	r3, #1
 801bf3c:	e030      	b.n	801bfa0 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801bf3e:	693b      	ldr	r3, [r7, #16]
 801bf40:	3301      	adds	r3, #1
 801bf42:	613b      	str	r3, [r7, #16]
 801bf44:	68fb      	ldr	r3, [r7, #12]
 801bf46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801bf48:	1c5a      	adds	r2, r3, #1
 801bf4a:	68fb      	ldr	r3, [r7, #12]
 801bf4c:	635a      	str	r2, [r3, #52]	@ 0x34
 801bf4e:	68fb      	ldr	r3, [r7, #12]
 801bf50:	895b      	ldrh	r3, [r3, #10]
 801bf52:	461a      	mov	r2, r3
 801bf54:	693b      	ldr	r3, [r7, #16]
 801bf56:	4293      	cmp	r3, r2
 801bf58:	d3e6      	bcc.n	801bf28 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 801bf5a:	68fb      	ldr	r3, [r7, #12]
 801bf5c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801bf5e:	693b      	ldr	r3, [r7, #16]
 801bf60:	1ad2      	subs	r2, r2, r3
 801bf62:	68fb      	ldr	r3, [r7, #12]
 801bf64:	635a      	str	r2, [r3, #52]	@ 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 801bf66:	687b      	ldr	r3, [r7, #4]
 801bf68:	697a      	ldr	r2, [r7, #20]
 801bf6a:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 801bf6c:	6979      	ldr	r1, [r7, #20]
 801bf6e:	68f8      	ldr	r0, [r7, #12]
 801bf70:	f7ff fb7a 	bl	801b668 <clust2sect>
 801bf74:	4602      	mov	r2, r0
 801bf76:	687b      	ldr	r3, [r7, #4]
 801bf78:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 801bf7a:	687b      	ldr	r3, [r7, #4]
 801bf7c:	68ba      	ldr	r2, [r7, #8]
 801bf7e:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 801bf80:	68fb      	ldr	r3, [r7, #12]
 801bf82:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801bf86:	68fb      	ldr	r3, [r7, #12]
 801bf88:	899b      	ldrh	r3, [r3, #12]
 801bf8a:	461a      	mov	r2, r3
 801bf8c:	68bb      	ldr	r3, [r7, #8]
 801bf8e:	fbb3 f0f2 	udiv	r0, r3, r2
 801bf92:	fb00 f202 	mul.w	r2, r0, r2
 801bf96:	1a9b      	subs	r3, r3, r2
 801bf98:	18ca      	adds	r2, r1, r3
 801bf9a:	687b      	ldr	r3, [r7, #4]
 801bf9c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 801bf9e:	2300      	movs	r3, #0
}
 801bfa0:	4618      	mov	r0, r3
 801bfa2:	3718      	adds	r7, #24
 801bfa4:	46bd      	mov	sp, r7
 801bfa6:	bd80      	pop	{r7, pc}

0801bfa8 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 801bfa8:	b580      	push	{r7, lr}
 801bfaa:	b086      	sub	sp, #24
 801bfac:	af00      	add	r7, sp, #0
 801bfae:	6078      	str	r0, [r7, #4]
 801bfb0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 801bfb2:	687b      	ldr	r3, [r7, #4]
 801bfb4:	681b      	ldr	r3, [r3, #0]
 801bfb6:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 801bfb8:	2100      	movs	r1, #0
 801bfba:	6878      	ldr	r0, [r7, #4]
 801bfbc:	f7ff fe95 	bl	801bcea <dir_sdi>
 801bfc0:	4603      	mov	r3, r0
 801bfc2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801bfc4:	7dfb      	ldrb	r3, [r7, #23]
 801bfc6:	2b00      	cmp	r3, #0
 801bfc8:	d12b      	bne.n	801c022 <dir_alloc+0x7a>
		n = 0;
 801bfca:	2300      	movs	r3, #0
 801bfcc:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 801bfce:	687b      	ldr	r3, [r7, #4]
 801bfd0:	69db      	ldr	r3, [r3, #28]
 801bfd2:	4619      	mov	r1, r3
 801bfd4:	68f8      	ldr	r0, [r7, #12]
 801bfd6:	f7ff faa9 	bl	801b52c <move_window>
 801bfda:	4603      	mov	r3, r0
 801bfdc:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801bfde:	7dfb      	ldrb	r3, [r7, #23]
 801bfe0:	2b00      	cmp	r3, #0
 801bfe2:	d11d      	bne.n	801c020 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 801bfe4:	687b      	ldr	r3, [r7, #4]
 801bfe6:	6a1b      	ldr	r3, [r3, #32]
 801bfe8:	781b      	ldrb	r3, [r3, #0]
 801bfea:	2be5      	cmp	r3, #229	@ 0xe5
 801bfec:	d004      	beq.n	801bff8 <dir_alloc+0x50>
 801bfee:	687b      	ldr	r3, [r7, #4]
 801bff0:	6a1b      	ldr	r3, [r3, #32]
 801bff2:	781b      	ldrb	r3, [r3, #0]
 801bff4:	2b00      	cmp	r3, #0
 801bff6:	d107      	bne.n	801c008 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 801bff8:	693b      	ldr	r3, [r7, #16]
 801bffa:	3301      	adds	r3, #1
 801bffc:	613b      	str	r3, [r7, #16]
 801bffe:	693a      	ldr	r2, [r7, #16]
 801c000:	683b      	ldr	r3, [r7, #0]
 801c002:	429a      	cmp	r2, r3
 801c004:	d102      	bne.n	801c00c <dir_alloc+0x64>
 801c006:	e00c      	b.n	801c022 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 801c008:	2300      	movs	r3, #0
 801c00a:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 801c00c:	2101      	movs	r1, #1
 801c00e:	6878      	ldr	r0, [r7, #4]
 801c010:	f7ff fef4 	bl	801bdfc <dir_next>
 801c014:	4603      	mov	r3, r0
 801c016:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 801c018:	7dfb      	ldrb	r3, [r7, #23]
 801c01a:	2b00      	cmp	r3, #0
 801c01c:	d0d7      	beq.n	801bfce <dir_alloc+0x26>
 801c01e:	e000      	b.n	801c022 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 801c020:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 801c022:	7dfb      	ldrb	r3, [r7, #23]
 801c024:	2b04      	cmp	r3, #4
 801c026:	d101      	bne.n	801c02c <dir_alloc+0x84>
 801c028:	2307      	movs	r3, #7
 801c02a:	75fb      	strb	r3, [r7, #23]
	return res;
 801c02c:	7dfb      	ldrb	r3, [r7, #23]
}
 801c02e:	4618      	mov	r0, r3
 801c030:	3718      	adds	r7, #24
 801c032:	46bd      	mov	sp, r7
 801c034:	bd80      	pop	{r7, pc}

0801c036 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 801c036:	b580      	push	{r7, lr}
 801c038:	b084      	sub	sp, #16
 801c03a:	af00      	add	r7, sp, #0
 801c03c:	6078      	str	r0, [r7, #4]
 801c03e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 801c040:	683b      	ldr	r3, [r7, #0]
 801c042:	331a      	adds	r3, #26
 801c044:	4618      	mov	r0, r3
 801c046:	f7fe ffc1 	bl	801afcc <ld_word>
 801c04a:	4603      	mov	r3, r0
 801c04c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 801c04e:	687b      	ldr	r3, [r7, #4]
 801c050:	781b      	ldrb	r3, [r3, #0]
 801c052:	2b03      	cmp	r3, #3
 801c054:	d109      	bne.n	801c06a <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 801c056:	683b      	ldr	r3, [r7, #0]
 801c058:	3314      	adds	r3, #20
 801c05a:	4618      	mov	r0, r3
 801c05c:	f7fe ffb6 	bl	801afcc <ld_word>
 801c060:	4603      	mov	r3, r0
 801c062:	041b      	lsls	r3, r3, #16
 801c064:	68fa      	ldr	r2, [r7, #12]
 801c066:	4313      	orrs	r3, r2
 801c068:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 801c06a:	68fb      	ldr	r3, [r7, #12]
}
 801c06c:	4618      	mov	r0, r3
 801c06e:	3710      	adds	r7, #16
 801c070:	46bd      	mov	sp, r7
 801c072:	bd80      	pop	{r7, pc}

0801c074 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 801c074:	b580      	push	{r7, lr}
 801c076:	b084      	sub	sp, #16
 801c078:	af00      	add	r7, sp, #0
 801c07a:	60f8      	str	r0, [r7, #12]
 801c07c:	60b9      	str	r1, [r7, #8]
 801c07e:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 801c080:	68bb      	ldr	r3, [r7, #8]
 801c082:	331a      	adds	r3, #26
 801c084:	687a      	ldr	r2, [r7, #4]
 801c086:	b292      	uxth	r2, r2
 801c088:	4611      	mov	r1, r2
 801c08a:	4618      	mov	r0, r3
 801c08c:	f7fe ffd9 	bl	801b042 <st_word>
	if (fs->fs_type == FS_FAT32) {
 801c090:	68fb      	ldr	r3, [r7, #12]
 801c092:	781b      	ldrb	r3, [r3, #0]
 801c094:	2b03      	cmp	r3, #3
 801c096:	d109      	bne.n	801c0ac <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 801c098:	68bb      	ldr	r3, [r7, #8]
 801c09a:	f103 0214 	add.w	r2, r3, #20
 801c09e:	687b      	ldr	r3, [r7, #4]
 801c0a0:	0c1b      	lsrs	r3, r3, #16
 801c0a2:	b29b      	uxth	r3, r3
 801c0a4:	4619      	mov	r1, r3
 801c0a6:	4610      	mov	r0, r2
 801c0a8:	f7fe ffcb 	bl	801b042 <st_word>
	}
}
 801c0ac:	bf00      	nop
 801c0ae:	3710      	adds	r7, #16
 801c0b0:	46bd      	mov	sp, r7
 801c0b2:	bd80      	pop	{r7, pc}

0801c0b4 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 801c0b4:	b590      	push	{r4, r7, lr}
 801c0b6:	b087      	sub	sp, #28
 801c0b8:	af00      	add	r7, sp, #0
 801c0ba:	6078      	str	r0, [r7, #4]
 801c0bc:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 801c0be:	683b      	ldr	r3, [r7, #0]
 801c0c0:	331a      	adds	r3, #26
 801c0c2:	4618      	mov	r0, r3
 801c0c4:	f7fe ff82 	bl	801afcc <ld_word>
 801c0c8:	4603      	mov	r3, r0
 801c0ca:	2b00      	cmp	r3, #0
 801c0cc:	d001      	beq.n	801c0d2 <cmp_lfn+0x1e>
 801c0ce:	2300      	movs	r3, #0
 801c0d0:	e059      	b.n	801c186 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 801c0d2:	683b      	ldr	r3, [r7, #0]
 801c0d4:	781b      	ldrb	r3, [r3, #0]
 801c0d6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801c0da:	1e5a      	subs	r2, r3, #1
 801c0dc:	4613      	mov	r3, r2
 801c0de:	005b      	lsls	r3, r3, #1
 801c0e0:	4413      	add	r3, r2
 801c0e2:	009b      	lsls	r3, r3, #2
 801c0e4:	4413      	add	r3, r2
 801c0e6:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 801c0e8:	2301      	movs	r3, #1
 801c0ea:	81fb      	strh	r3, [r7, #14]
 801c0ec:	2300      	movs	r3, #0
 801c0ee:	613b      	str	r3, [r7, #16]
 801c0f0:	e033      	b.n	801c15a <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 801c0f2:	4a27      	ldr	r2, [pc, #156]	@ (801c190 <cmp_lfn+0xdc>)
 801c0f4:	693b      	ldr	r3, [r7, #16]
 801c0f6:	4413      	add	r3, r2
 801c0f8:	781b      	ldrb	r3, [r3, #0]
 801c0fa:	461a      	mov	r2, r3
 801c0fc:	683b      	ldr	r3, [r7, #0]
 801c0fe:	4413      	add	r3, r2
 801c100:	4618      	mov	r0, r3
 801c102:	f7fe ff63 	bl	801afcc <ld_word>
 801c106:	4603      	mov	r3, r0
 801c108:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 801c10a:	89fb      	ldrh	r3, [r7, #14]
 801c10c:	2b00      	cmp	r3, #0
 801c10e:	d01a      	beq.n	801c146 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 801c110:	697b      	ldr	r3, [r7, #20]
 801c112:	2bfe      	cmp	r3, #254	@ 0xfe
 801c114:	d812      	bhi.n	801c13c <cmp_lfn+0x88>
 801c116:	89bb      	ldrh	r3, [r7, #12]
 801c118:	4618      	mov	r0, r3
 801c11a:	f001 ff71 	bl	801e000 <ff_wtoupper>
 801c11e:	4603      	mov	r3, r0
 801c120:	461c      	mov	r4, r3
 801c122:	697b      	ldr	r3, [r7, #20]
 801c124:	1c5a      	adds	r2, r3, #1
 801c126:	617a      	str	r2, [r7, #20]
 801c128:	005b      	lsls	r3, r3, #1
 801c12a:	687a      	ldr	r2, [r7, #4]
 801c12c:	4413      	add	r3, r2
 801c12e:	881b      	ldrh	r3, [r3, #0]
 801c130:	4618      	mov	r0, r3
 801c132:	f001 ff65 	bl	801e000 <ff_wtoupper>
 801c136:	4603      	mov	r3, r0
 801c138:	429c      	cmp	r4, r3
 801c13a:	d001      	beq.n	801c140 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 801c13c:	2300      	movs	r3, #0
 801c13e:	e022      	b.n	801c186 <cmp_lfn+0xd2>
			}
			wc = uc;
 801c140:	89bb      	ldrh	r3, [r7, #12]
 801c142:	81fb      	strh	r3, [r7, #14]
 801c144:	e006      	b.n	801c154 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 801c146:	89bb      	ldrh	r3, [r7, #12]
 801c148:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801c14c:	4293      	cmp	r3, r2
 801c14e:	d001      	beq.n	801c154 <cmp_lfn+0xa0>
 801c150:	2300      	movs	r3, #0
 801c152:	e018      	b.n	801c186 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 801c154:	693b      	ldr	r3, [r7, #16]
 801c156:	3301      	adds	r3, #1
 801c158:	613b      	str	r3, [r7, #16]
 801c15a:	693b      	ldr	r3, [r7, #16]
 801c15c:	2b0c      	cmp	r3, #12
 801c15e:	d9c8      	bls.n	801c0f2 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 801c160:	683b      	ldr	r3, [r7, #0]
 801c162:	781b      	ldrb	r3, [r3, #0]
 801c164:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801c168:	2b00      	cmp	r3, #0
 801c16a:	d00b      	beq.n	801c184 <cmp_lfn+0xd0>
 801c16c:	89fb      	ldrh	r3, [r7, #14]
 801c16e:	2b00      	cmp	r3, #0
 801c170:	d008      	beq.n	801c184 <cmp_lfn+0xd0>
 801c172:	697b      	ldr	r3, [r7, #20]
 801c174:	005b      	lsls	r3, r3, #1
 801c176:	687a      	ldr	r2, [r7, #4]
 801c178:	4413      	add	r3, r2
 801c17a:	881b      	ldrh	r3, [r3, #0]
 801c17c:	2b00      	cmp	r3, #0
 801c17e:	d001      	beq.n	801c184 <cmp_lfn+0xd0>
 801c180:	2300      	movs	r3, #0
 801c182:	e000      	b.n	801c186 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 801c184:	2301      	movs	r3, #1
}
 801c186:	4618      	mov	r0, r3
 801c188:	371c      	adds	r7, #28
 801c18a:	46bd      	mov	sp, r7
 801c18c:	bd90      	pop	{r4, r7, pc}
 801c18e:	bf00      	nop
 801c190:	0801eb0c 	.word	0x0801eb0c

0801c194 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 801c194:	b580      	push	{r7, lr}
 801c196:	b086      	sub	sp, #24
 801c198:	af00      	add	r7, sp, #0
 801c19a:	6078      	str	r0, [r7, #4]
 801c19c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 801c19e:	683b      	ldr	r3, [r7, #0]
 801c1a0:	331a      	adds	r3, #26
 801c1a2:	4618      	mov	r0, r3
 801c1a4:	f7fe ff12 	bl	801afcc <ld_word>
 801c1a8:	4603      	mov	r3, r0
 801c1aa:	2b00      	cmp	r3, #0
 801c1ac:	d001      	beq.n	801c1b2 <pick_lfn+0x1e>
 801c1ae:	2300      	movs	r3, #0
 801c1b0:	e04d      	b.n	801c24e <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 801c1b2:	683b      	ldr	r3, [r7, #0]
 801c1b4:	781b      	ldrb	r3, [r3, #0]
 801c1b6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801c1ba:	1e5a      	subs	r2, r3, #1
 801c1bc:	4613      	mov	r3, r2
 801c1be:	005b      	lsls	r3, r3, #1
 801c1c0:	4413      	add	r3, r2
 801c1c2:	009b      	lsls	r3, r3, #2
 801c1c4:	4413      	add	r3, r2
 801c1c6:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 801c1c8:	2301      	movs	r3, #1
 801c1ca:	81fb      	strh	r3, [r7, #14]
 801c1cc:	2300      	movs	r3, #0
 801c1ce:	613b      	str	r3, [r7, #16]
 801c1d0:	e028      	b.n	801c224 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 801c1d2:	4a21      	ldr	r2, [pc, #132]	@ (801c258 <pick_lfn+0xc4>)
 801c1d4:	693b      	ldr	r3, [r7, #16]
 801c1d6:	4413      	add	r3, r2
 801c1d8:	781b      	ldrb	r3, [r3, #0]
 801c1da:	461a      	mov	r2, r3
 801c1dc:	683b      	ldr	r3, [r7, #0]
 801c1de:	4413      	add	r3, r2
 801c1e0:	4618      	mov	r0, r3
 801c1e2:	f7fe fef3 	bl	801afcc <ld_word>
 801c1e6:	4603      	mov	r3, r0
 801c1e8:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 801c1ea:	89fb      	ldrh	r3, [r7, #14]
 801c1ec:	2b00      	cmp	r3, #0
 801c1ee:	d00f      	beq.n	801c210 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 801c1f0:	697b      	ldr	r3, [r7, #20]
 801c1f2:	2bfe      	cmp	r3, #254	@ 0xfe
 801c1f4:	d901      	bls.n	801c1fa <pick_lfn+0x66>
 801c1f6:	2300      	movs	r3, #0
 801c1f8:	e029      	b.n	801c24e <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 801c1fa:	89bb      	ldrh	r3, [r7, #12]
 801c1fc:	81fb      	strh	r3, [r7, #14]
 801c1fe:	697b      	ldr	r3, [r7, #20]
 801c200:	1c5a      	adds	r2, r3, #1
 801c202:	617a      	str	r2, [r7, #20]
 801c204:	005b      	lsls	r3, r3, #1
 801c206:	687a      	ldr	r2, [r7, #4]
 801c208:	4413      	add	r3, r2
 801c20a:	89fa      	ldrh	r2, [r7, #14]
 801c20c:	801a      	strh	r2, [r3, #0]
 801c20e:	e006      	b.n	801c21e <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 801c210:	89bb      	ldrh	r3, [r7, #12]
 801c212:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801c216:	4293      	cmp	r3, r2
 801c218:	d001      	beq.n	801c21e <pick_lfn+0x8a>
 801c21a:	2300      	movs	r3, #0
 801c21c:	e017      	b.n	801c24e <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 801c21e:	693b      	ldr	r3, [r7, #16]
 801c220:	3301      	adds	r3, #1
 801c222:	613b      	str	r3, [r7, #16]
 801c224:	693b      	ldr	r3, [r7, #16]
 801c226:	2b0c      	cmp	r3, #12
 801c228:	d9d3      	bls.n	801c1d2 <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 801c22a:	683b      	ldr	r3, [r7, #0]
 801c22c:	781b      	ldrb	r3, [r3, #0]
 801c22e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801c232:	2b00      	cmp	r3, #0
 801c234:	d00a      	beq.n	801c24c <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 801c236:	697b      	ldr	r3, [r7, #20]
 801c238:	2bfe      	cmp	r3, #254	@ 0xfe
 801c23a:	d901      	bls.n	801c240 <pick_lfn+0xac>
 801c23c:	2300      	movs	r3, #0
 801c23e:	e006      	b.n	801c24e <pick_lfn+0xba>
		lfnbuf[i] = 0;
 801c240:	697b      	ldr	r3, [r7, #20]
 801c242:	005b      	lsls	r3, r3, #1
 801c244:	687a      	ldr	r2, [r7, #4]
 801c246:	4413      	add	r3, r2
 801c248:	2200      	movs	r2, #0
 801c24a:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 801c24c:	2301      	movs	r3, #1
}
 801c24e:	4618      	mov	r0, r3
 801c250:	3718      	adds	r7, #24
 801c252:	46bd      	mov	sp, r7
 801c254:	bd80      	pop	{r7, pc}
 801c256:	bf00      	nop
 801c258:	0801eb0c 	.word	0x0801eb0c

0801c25c <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 801c25c:	b580      	push	{r7, lr}
 801c25e:	b088      	sub	sp, #32
 801c260:	af00      	add	r7, sp, #0
 801c262:	60f8      	str	r0, [r7, #12]
 801c264:	60b9      	str	r1, [r7, #8]
 801c266:	4611      	mov	r1, r2
 801c268:	461a      	mov	r2, r3
 801c26a:	460b      	mov	r3, r1
 801c26c:	71fb      	strb	r3, [r7, #7]
 801c26e:	4613      	mov	r3, r2
 801c270:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 801c272:	68bb      	ldr	r3, [r7, #8]
 801c274:	330d      	adds	r3, #13
 801c276:	79ba      	ldrb	r2, [r7, #6]
 801c278:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 801c27a:	68bb      	ldr	r3, [r7, #8]
 801c27c:	330b      	adds	r3, #11
 801c27e:	220f      	movs	r2, #15
 801c280:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 801c282:	68bb      	ldr	r3, [r7, #8]
 801c284:	330c      	adds	r3, #12
 801c286:	2200      	movs	r2, #0
 801c288:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 801c28a:	68bb      	ldr	r3, [r7, #8]
 801c28c:	331a      	adds	r3, #26
 801c28e:	2100      	movs	r1, #0
 801c290:	4618      	mov	r0, r3
 801c292:	f7fe fed6 	bl	801b042 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 801c296:	79fb      	ldrb	r3, [r7, #7]
 801c298:	1e5a      	subs	r2, r3, #1
 801c29a:	4613      	mov	r3, r2
 801c29c:	005b      	lsls	r3, r3, #1
 801c29e:	4413      	add	r3, r2
 801c2a0:	009b      	lsls	r3, r3, #2
 801c2a2:	4413      	add	r3, r2
 801c2a4:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 801c2a6:	2300      	movs	r3, #0
 801c2a8:	82fb      	strh	r3, [r7, #22]
 801c2aa:	2300      	movs	r3, #0
 801c2ac:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 801c2ae:	8afb      	ldrh	r3, [r7, #22]
 801c2b0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801c2b4:	4293      	cmp	r3, r2
 801c2b6:	d007      	beq.n	801c2c8 <put_lfn+0x6c>
 801c2b8:	69fb      	ldr	r3, [r7, #28]
 801c2ba:	1c5a      	adds	r2, r3, #1
 801c2bc:	61fa      	str	r2, [r7, #28]
 801c2be:	005b      	lsls	r3, r3, #1
 801c2c0:	68fa      	ldr	r2, [r7, #12]
 801c2c2:	4413      	add	r3, r2
 801c2c4:	881b      	ldrh	r3, [r3, #0]
 801c2c6:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 801c2c8:	4a17      	ldr	r2, [pc, #92]	@ (801c328 <put_lfn+0xcc>)
 801c2ca:	69bb      	ldr	r3, [r7, #24]
 801c2cc:	4413      	add	r3, r2
 801c2ce:	781b      	ldrb	r3, [r3, #0]
 801c2d0:	461a      	mov	r2, r3
 801c2d2:	68bb      	ldr	r3, [r7, #8]
 801c2d4:	4413      	add	r3, r2
 801c2d6:	8afa      	ldrh	r2, [r7, #22]
 801c2d8:	4611      	mov	r1, r2
 801c2da:	4618      	mov	r0, r3
 801c2dc:	f7fe feb1 	bl	801b042 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 801c2e0:	8afb      	ldrh	r3, [r7, #22]
 801c2e2:	2b00      	cmp	r3, #0
 801c2e4:	d102      	bne.n	801c2ec <put_lfn+0x90>
 801c2e6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801c2ea:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 801c2ec:	69bb      	ldr	r3, [r7, #24]
 801c2ee:	3301      	adds	r3, #1
 801c2f0:	61bb      	str	r3, [r7, #24]
 801c2f2:	69bb      	ldr	r3, [r7, #24]
 801c2f4:	2b0c      	cmp	r3, #12
 801c2f6:	d9da      	bls.n	801c2ae <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 801c2f8:	8afb      	ldrh	r3, [r7, #22]
 801c2fa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801c2fe:	4293      	cmp	r3, r2
 801c300:	d006      	beq.n	801c310 <put_lfn+0xb4>
 801c302:	69fb      	ldr	r3, [r7, #28]
 801c304:	005b      	lsls	r3, r3, #1
 801c306:	68fa      	ldr	r2, [r7, #12]
 801c308:	4413      	add	r3, r2
 801c30a:	881b      	ldrh	r3, [r3, #0]
 801c30c:	2b00      	cmp	r3, #0
 801c30e:	d103      	bne.n	801c318 <put_lfn+0xbc>
 801c310:	79fb      	ldrb	r3, [r7, #7]
 801c312:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801c316:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 801c318:	68bb      	ldr	r3, [r7, #8]
 801c31a:	79fa      	ldrb	r2, [r7, #7]
 801c31c:	701a      	strb	r2, [r3, #0]
}
 801c31e:	bf00      	nop
 801c320:	3720      	adds	r7, #32
 801c322:	46bd      	mov	sp, r7
 801c324:	bd80      	pop	{r7, pc}
 801c326:	bf00      	nop
 801c328:	0801eb0c 	.word	0x0801eb0c

0801c32c <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 801c32c:	b580      	push	{r7, lr}
 801c32e:	b08c      	sub	sp, #48	@ 0x30
 801c330:	af00      	add	r7, sp, #0
 801c332:	60f8      	str	r0, [r7, #12]
 801c334:	60b9      	str	r1, [r7, #8]
 801c336:	607a      	str	r2, [r7, #4]
 801c338:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 801c33a:	220b      	movs	r2, #11
 801c33c:	68b9      	ldr	r1, [r7, #8]
 801c33e:	68f8      	ldr	r0, [r7, #12]
 801c340:	f7fe fec6 	bl	801b0d0 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 801c344:	683b      	ldr	r3, [r7, #0]
 801c346:	2b05      	cmp	r3, #5
 801c348:	d929      	bls.n	801c39e <gen_numname+0x72>
		sr = seq;
 801c34a:	683b      	ldr	r3, [r7, #0]
 801c34c:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 801c34e:	e020      	b.n	801c392 <gen_numname+0x66>
			wc = *lfn++;
 801c350:	687b      	ldr	r3, [r7, #4]
 801c352:	1c9a      	adds	r2, r3, #2
 801c354:	607a      	str	r2, [r7, #4]
 801c356:	881b      	ldrh	r3, [r3, #0]
 801c358:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 801c35a:	2300      	movs	r3, #0
 801c35c:	62bb      	str	r3, [r7, #40]	@ 0x28
 801c35e:	e015      	b.n	801c38c <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 801c360:	69fb      	ldr	r3, [r7, #28]
 801c362:	005a      	lsls	r2, r3, #1
 801c364:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801c366:	f003 0301 	and.w	r3, r3, #1
 801c36a:	4413      	add	r3, r2
 801c36c:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 801c36e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801c370:	085b      	lsrs	r3, r3, #1
 801c372:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 801c374:	69fb      	ldr	r3, [r7, #28]
 801c376:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801c37a:	2b00      	cmp	r3, #0
 801c37c:	d003      	beq.n	801c386 <gen_numname+0x5a>
 801c37e:	69fa      	ldr	r2, [r7, #28]
 801c380:	4b30      	ldr	r3, [pc, #192]	@ (801c444 <gen_numname+0x118>)
 801c382:	4053      	eors	r3, r2
 801c384:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 801c386:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c388:	3301      	adds	r3, #1
 801c38a:	62bb      	str	r3, [r7, #40]	@ 0x28
 801c38c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c38e:	2b0f      	cmp	r3, #15
 801c390:	d9e6      	bls.n	801c360 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 801c392:	687b      	ldr	r3, [r7, #4]
 801c394:	881b      	ldrh	r3, [r3, #0]
 801c396:	2b00      	cmp	r3, #0
 801c398:	d1da      	bne.n	801c350 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 801c39a:	69fb      	ldr	r3, [r7, #28]
 801c39c:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 801c39e:	2307      	movs	r3, #7
 801c3a0:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 801c3a2:	683b      	ldr	r3, [r7, #0]
 801c3a4:	b2db      	uxtb	r3, r3
 801c3a6:	f003 030f 	and.w	r3, r3, #15
 801c3aa:	b2db      	uxtb	r3, r3
 801c3ac:	3330      	adds	r3, #48	@ 0x30
 801c3ae:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 801c3b2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801c3b6:	2b39      	cmp	r3, #57	@ 0x39
 801c3b8:	d904      	bls.n	801c3c4 <gen_numname+0x98>
 801c3ba:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801c3be:	3307      	adds	r3, #7
 801c3c0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 801c3c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c3c6:	1e5a      	subs	r2, r3, #1
 801c3c8:	62ba      	str	r2, [r7, #40]	@ 0x28
 801c3ca:	3330      	adds	r3, #48	@ 0x30
 801c3cc:	443b      	add	r3, r7
 801c3ce:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 801c3d2:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 801c3d6:	683b      	ldr	r3, [r7, #0]
 801c3d8:	091b      	lsrs	r3, r3, #4
 801c3da:	603b      	str	r3, [r7, #0]
	} while (seq);
 801c3dc:	683b      	ldr	r3, [r7, #0]
 801c3de:	2b00      	cmp	r3, #0
 801c3e0:	d1df      	bne.n	801c3a2 <gen_numname+0x76>
	ns[i] = '~';
 801c3e2:	f107 0214 	add.w	r2, r7, #20
 801c3e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c3e8:	4413      	add	r3, r2
 801c3ea:	227e      	movs	r2, #126	@ 0x7e
 801c3ec:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 801c3ee:	2300      	movs	r3, #0
 801c3f0:	627b      	str	r3, [r7, #36]	@ 0x24
 801c3f2:	e002      	b.n	801c3fa <gen_numname+0xce>
 801c3f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c3f6:	3301      	adds	r3, #1
 801c3f8:	627b      	str	r3, [r7, #36]	@ 0x24
 801c3fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801c3fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c3fe:	429a      	cmp	r2, r3
 801c400:	d205      	bcs.n	801c40e <gen_numname+0xe2>
 801c402:	68fa      	ldr	r2, [r7, #12]
 801c404:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c406:	4413      	add	r3, r2
 801c408:	781b      	ldrb	r3, [r3, #0]
 801c40a:	2b20      	cmp	r3, #32
 801c40c:	d1f2      	bne.n	801c3f4 <gen_numname+0xc8>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 801c40e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c410:	2b07      	cmp	r3, #7
 801c412:	d807      	bhi.n	801c424 <gen_numname+0xf8>
 801c414:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c416:	1c5a      	adds	r2, r3, #1
 801c418:	62ba      	str	r2, [r7, #40]	@ 0x28
 801c41a:	3330      	adds	r3, #48	@ 0x30
 801c41c:	443b      	add	r3, r7
 801c41e:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 801c422:	e000      	b.n	801c426 <gen_numname+0xfa>
 801c424:	2120      	movs	r1, #32
 801c426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c428:	1c5a      	adds	r2, r3, #1
 801c42a:	627a      	str	r2, [r7, #36]	@ 0x24
 801c42c:	68fa      	ldr	r2, [r7, #12]
 801c42e:	4413      	add	r3, r2
 801c430:	460a      	mov	r2, r1
 801c432:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 801c434:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c436:	2b07      	cmp	r3, #7
 801c438:	d9e9      	bls.n	801c40e <gen_numname+0xe2>
}
 801c43a:	bf00      	nop
 801c43c:	bf00      	nop
 801c43e:	3730      	adds	r7, #48	@ 0x30
 801c440:	46bd      	mov	sp, r7
 801c442:	bd80      	pop	{r7, pc}
 801c444:	00011021 	.word	0x00011021

0801c448 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 801c448:	b480      	push	{r7}
 801c44a:	b085      	sub	sp, #20
 801c44c:	af00      	add	r7, sp, #0
 801c44e:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 801c450:	2300      	movs	r3, #0
 801c452:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 801c454:	230b      	movs	r3, #11
 801c456:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 801c458:	7bfb      	ldrb	r3, [r7, #15]
 801c45a:	b2da      	uxtb	r2, r3
 801c45c:	0852      	lsrs	r2, r2, #1
 801c45e:	01db      	lsls	r3, r3, #7
 801c460:	4313      	orrs	r3, r2
 801c462:	b2da      	uxtb	r2, r3
 801c464:	687b      	ldr	r3, [r7, #4]
 801c466:	1c59      	adds	r1, r3, #1
 801c468:	6079      	str	r1, [r7, #4]
 801c46a:	781b      	ldrb	r3, [r3, #0]
 801c46c:	4413      	add	r3, r2
 801c46e:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 801c470:	68bb      	ldr	r3, [r7, #8]
 801c472:	3b01      	subs	r3, #1
 801c474:	60bb      	str	r3, [r7, #8]
 801c476:	68bb      	ldr	r3, [r7, #8]
 801c478:	2b00      	cmp	r3, #0
 801c47a:	d1ed      	bne.n	801c458 <sum_sfn+0x10>
	return sum;
 801c47c:	7bfb      	ldrb	r3, [r7, #15]
}
 801c47e:	4618      	mov	r0, r3
 801c480:	3714      	adds	r7, #20
 801c482:	46bd      	mov	sp, r7
 801c484:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c488:	4770      	bx	lr

0801c48a <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 801c48a:	b580      	push	{r7, lr}
 801c48c:	b086      	sub	sp, #24
 801c48e:	af00      	add	r7, sp, #0
 801c490:	6078      	str	r0, [r7, #4]
 801c492:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 801c494:	2304      	movs	r3, #4
 801c496:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 801c498:	687b      	ldr	r3, [r7, #4]
 801c49a:	681b      	ldr	r3, [r3, #0]
 801c49c:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 801c49e:	23ff      	movs	r3, #255	@ 0xff
 801c4a0:	757b      	strb	r3, [r7, #21]
 801c4a2:	23ff      	movs	r3, #255	@ 0xff
 801c4a4:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 801c4a6:	e081      	b.n	801c5ac <dir_read+0x122>
		res = move_window(fs, dp->sect);
 801c4a8:	687b      	ldr	r3, [r7, #4]
 801c4aa:	69db      	ldr	r3, [r3, #28]
 801c4ac:	4619      	mov	r1, r3
 801c4ae:	6938      	ldr	r0, [r7, #16]
 801c4b0:	f7ff f83c 	bl	801b52c <move_window>
 801c4b4:	4603      	mov	r3, r0
 801c4b6:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801c4b8:	7dfb      	ldrb	r3, [r7, #23]
 801c4ba:	2b00      	cmp	r3, #0
 801c4bc:	d17c      	bne.n	801c5b8 <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 801c4be:	687b      	ldr	r3, [r7, #4]
 801c4c0:	6a1b      	ldr	r3, [r3, #32]
 801c4c2:	781b      	ldrb	r3, [r3, #0]
 801c4c4:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 801c4c6:	7dbb      	ldrb	r3, [r7, #22]
 801c4c8:	2b00      	cmp	r3, #0
 801c4ca:	d102      	bne.n	801c4d2 <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 801c4cc:	2304      	movs	r3, #4
 801c4ce:	75fb      	strb	r3, [r7, #23]
 801c4d0:	e077      	b.n	801c5c2 <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 801c4d2:	687b      	ldr	r3, [r7, #4]
 801c4d4:	6a1b      	ldr	r3, [r3, #32]
 801c4d6:	330b      	adds	r3, #11
 801c4d8:	781b      	ldrb	r3, [r3, #0]
 801c4da:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801c4de:	73fb      	strb	r3, [r7, #15]
 801c4e0:	687b      	ldr	r3, [r7, #4]
 801c4e2:	7bfa      	ldrb	r2, [r7, #15]
 801c4e4:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 801c4e6:	7dbb      	ldrb	r3, [r7, #22]
 801c4e8:	2be5      	cmp	r3, #229	@ 0xe5
 801c4ea:	d00e      	beq.n	801c50a <dir_read+0x80>
 801c4ec:	7dbb      	ldrb	r3, [r7, #22]
 801c4ee:	2b2e      	cmp	r3, #46	@ 0x2e
 801c4f0:	d00b      	beq.n	801c50a <dir_read+0x80>
 801c4f2:	7bfb      	ldrb	r3, [r7, #15]
 801c4f4:	f023 0320 	bic.w	r3, r3, #32
 801c4f8:	2b08      	cmp	r3, #8
 801c4fa:	bf0c      	ite	eq
 801c4fc:	2301      	moveq	r3, #1
 801c4fe:	2300      	movne	r3, #0
 801c500:	b2db      	uxtb	r3, r3
 801c502:	461a      	mov	r2, r3
 801c504:	683b      	ldr	r3, [r7, #0]
 801c506:	4293      	cmp	r3, r2
 801c508:	d002      	beq.n	801c510 <dir_read+0x86>
				ord = 0xFF;
 801c50a:	23ff      	movs	r3, #255	@ 0xff
 801c50c:	757b      	strb	r3, [r7, #21]
 801c50e:	e044      	b.n	801c59a <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 801c510:	7bfb      	ldrb	r3, [r7, #15]
 801c512:	2b0f      	cmp	r3, #15
 801c514:	d12f      	bne.n	801c576 <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 801c516:	7dbb      	ldrb	r3, [r7, #22]
 801c518:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801c51c:	2b00      	cmp	r3, #0
 801c51e:	d00d      	beq.n	801c53c <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 801c520:	687b      	ldr	r3, [r7, #4]
 801c522:	6a1b      	ldr	r3, [r3, #32]
 801c524:	7b5b      	ldrb	r3, [r3, #13]
 801c526:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 801c528:	7dbb      	ldrb	r3, [r7, #22]
 801c52a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801c52e:	75bb      	strb	r3, [r7, #22]
 801c530:	7dbb      	ldrb	r3, [r7, #22]
 801c532:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 801c534:	687b      	ldr	r3, [r7, #4]
 801c536:	695a      	ldr	r2, [r3, #20]
 801c538:	687b      	ldr	r3, [r7, #4]
 801c53a:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 801c53c:	7dba      	ldrb	r2, [r7, #22]
 801c53e:	7d7b      	ldrb	r3, [r7, #21]
 801c540:	429a      	cmp	r2, r3
 801c542:	d115      	bne.n	801c570 <dir_read+0xe6>
 801c544:	687b      	ldr	r3, [r7, #4]
 801c546:	6a1b      	ldr	r3, [r3, #32]
 801c548:	330d      	adds	r3, #13
 801c54a:	781b      	ldrb	r3, [r3, #0]
 801c54c:	7d3a      	ldrb	r2, [r7, #20]
 801c54e:	429a      	cmp	r2, r3
 801c550:	d10e      	bne.n	801c570 <dir_read+0xe6>
 801c552:	693b      	ldr	r3, [r7, #16]
 801c554:	691a      	ldr	r2, [r3, #16]
 801c556:	687b      	ldr	r3, [r7, #4]
 801c558:	6a1b      	ldr	r3, [r3, #32]
 801c55a:	4619      	mov	r1, r3
 801c55c:	4610      	mov	r0, r2
 801c55e:	f7ff fe19 	bl	801c194 <pick_lfn>
 801c562:	4603      	mov	r3, r0
 801c564:	2b00      	cmp	r3, #0
 801c566:	d003      	beq.n	801c570 <dir_read+0xe6>
 801c568:	7d7b      	ldrb	r3, [r7, #21]
 801c56a:	3b01      	subs	r3, #1
 801c56c:	b2db      	uxtb	r3, r3
 801c56e:	e000      	b.n	801c572 <dir_read+0xe8>
 801c570:	23ff      	movs	r3, #255	@ 0xff
 801c572:	757b      	strb	r3, [r7, #21]
 801c574:	e011      	b.n	801c59a <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 801c576:	7d7b      	ldrb	r3, [r7, #21]
 801c578:	2b00      	cmp	r3, #0
 801c57a:	d109      	bne.n	801c590 <dir_read+0x106>
 801c57c:	687b      	ldr	r3, [r7, #4]
 801c57e:	6a1b      	ldr	r3, [r3, #32]
 801c580:	4618      	mov	r0, r3
 801c582:	f7ff ff61 	bl	801c448 <sum_sfn>
 801c586:	4603      	mov	r3, r0
 801c588:	461a      	mov	r2, r3
 801c58a:	7d3b      	ldrb	r3, [r7, #20]
 801c58c:	4293      	cmp	r3, r2
 801c58e:	d015      	beq.n	801c5bc <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 801c590:	687b      	ldr	r3, [r7, #4]
 801c592:	f04f 32ff 	mov.w	r2, #4294967295
 801c596:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					break;
 801c598:	e010      	b.n	801c5bc <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 801c59a:	2100      	movs	r1, #0
 801c59c:	6878      	ldr	r0, [r7, #4]
 801c59e:	f7ff fc2d 	bl	801bdfc <dir_next>
 801c5a2:	4603      	mov	r3, r0
 801c5a4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801c5a6:	7dfb      	ldrb	r3, [r7, #23]
 801c5a8:	2b00      	cmp	r3, #0
 801c5aa:	d109      	bne.n	801c5c0 <dir_read+0x136>
	while (dp->sect) {
 801c5ac:	687b      	ldr	r3, [r7, #4]
 801c5ae:	69db      	ldr	r3, [r3, #28]
 801c5b0:	2b00      	cmp	r3, #0
 801c5b2:	f47f af79 	bne.w	801c4a8 <dir_read+0x1e>
 801c5b6:	e004      	b.n	801c5c2 <dir_read+0x138>
		if (res != FR_OK) break;
 801c5b8:	bf00      	nop
 801c5ba:	e002      	b.n	801c5c2 <dir_read+0x138>
					break;
 801c5bc:	bf00      	nop
 801c5be:	e000      	b.n	801c5c2 <dir_read+0x138>
		if (res != FR_OK) break;
 801c5c0:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 801c5c2:	7dfb      	ldrb	r3, [r7, #23]
 801c5c4:	2b00      	cmp	r3, #0
 801c5c6:	d002      	beq.n	801c5ce <dir_read+0x144>
 801c5c8:	687b      	ldr	r3, [r7, #4]
 801c5ca:	2200      	movs	r2, #0
 801c5cc:	61da      	str	r2, [r3, #28]
	return res;
 801c5ce:	7dfb      	ldrb	r3, [r7, #23]
}
 801c5d0:	4618      	mov	r0, r3
 801c5d2:	3718      	adds	r7, #24
 801c5d4:	46bd      	mov	sp, r7
 801c5d6:	bd80      	pop	{r7, pc}

0801c5d8 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 801c5d8:	b580      	push	{r7, lr}
 801c5da:	b086      	sub	sp, #24
 801c5dc:	af00      	add	r7, sp, #0
 801c5de:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801c5e0:	687b      	ldr	r3, [r7, #4]
 801c5e2:	681b      	ldr	r3, [r3, #0]
 801c5e4:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 801c5e6:	2100      	movs	r1, #0
 801c5e8:	6878      	ldr	r0, [r7, #4]
 801c5ea:	f7ff fb7e 	bl	801bcea <dir_sdi>
 801c5ee:	4603      	mov	r3, r0
 801c5f0:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 801c5f2:	7dfb      	ldrb	r3, [r7, #23]
 801c5f4:	2b00      	cmp	r3, #0
 801c5f6:	d001      	beq.n	801c5fc <dir_find+0x24>
 801c5f8:	7dfb      	ldrb	r3, [r7, #23]
 801c5fa:	e0a9      	b.n	801c750 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 801c5fc:	23ff      	movs	r3, #255	@ 0xff
 801c5fe:	753b      	strb	r3, [r7, #20]
 801c600:	7d3b      	ldrb	r3, [r7, #20]
 801c602:	757b      	strb	r3, [r7, #21]
 801c604:	687b      	ldr	r3, [r7, #4]
 801c606:	f04f 32ff 	mov.w	r2, #4294967295
 801c60a:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 801c60c:	687b      	ldr	r3, [r7, #4]
 801c60e:	69db      	ldr	r3, [r3, #28]
 801c610:	4619      	mov	r1, r3
 801c612:	6938      	ldr	r0, [r7, #16]
 801c614:	f7fe ff8a 	bl	801b52c <move_window>
 801c618:	4603      	mov	r3, r0
 801c61a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801c61c:	7dfb      	ldrb	r3, [r7, #23]
 801c61e:	2b00      	cmp	r3, #0
 801c620:	f040 8090 	bne.w	801c744 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 801c624:	687b      	ldr	r3, [r7, #4]
 801c626:	6a1b      	ldr	r3, [r3, #32]
 801c628:	781b      	ldrb	r3, [r3, #0]
 801c62a:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 801c62c:	7dbb      	ldrb	r3, [r7, #22]
 801c62e:	2b00      	cmp	r3, #0
 801c630:	d102      	bne.n	801c638 <dir_find+0x60>
 801c632:	2304      	movs	r3, #4
 801c634:	75fb      	strb	r3, [r7, #23]
 801c636:	e08a      	b.n	801c74e <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 801c638:	687b      	ldr	r3, [r7, #4]
 801c63a:	6a1b      	ldr	r3, [r3, #32]
 801c63c:	330b      	adds	r3, #11
 801c63e:	781b      	ldrb	r3, [r3, #0]
 801c640:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801c644:	73fb      	strb	r3, [r7, #15]
 801c646:	687b      	ldr	r3, [r7, #4]
 801c648:	7bfa      	ldrb	r2, [r7, #15]
 801c64a:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 801c64c:	7dbb      	ldrb	r3, [r7, #22]
 801c64e:	2be5      	cmp	r3, #229	@ 0xe5
 801c650:	d007      	beq.n	801c662 <dir_find+0x8a>
 801c652:	7bfb      	ldrb	r3, [r7, #15]
 801c654:	f003 0308 	and.w	r3, r3, #8
 801c658:	2b00      	cmp	r3, #0
 801c65a:	d009      	beq.n	801c670 <dir_find+0x98>
 801c65c:	7bfb      	ldrb	r3, [r7, #15]
 801c65e:	2b0f      	cmp	r3, #15
 801c660:	d006      	beq.n	801c670 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 801c662:	23ff      	movs	r3, #255	@ 0xff
 801c664:	757b      	strb	r3, [r7, #21]
 801c666:	687b      	ldr	r3, [r7, #4]
 801c668:	f04f 32ff 	mov.w	r2, #4294967295
 801c66c:	631a      	str	r2, [r3, #48]	@ 0x30
 801c66e:	e05e      	b.n	801c72e <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 801c670:	7bfb      	ldrb	r3, [r7, #15]
 801c672:	2b0f      	cmp	r3, #15
 801c674:	d136      	bne.n	801c6e4 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 801c676:	687b      	ldr	r3, [r7, #4]
 801c678:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 801c67c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801c680:	2b00      	cmp	r3, #0
 801c682:	d154      	bne.n	801c72e <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 801c684:	7dbb      	ldrb	r3, [r7, #22]
 801c686:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801c68a:	2b00      	cmp	r3, #0
 801c68c:	d00d      	beq.n	801c6aa <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 801c68e:	687b      	ldr	r3, [r7, #4]
 801c690:	6a1b      	ldr	r3, [r3, #32]
 801c692:	7b5b      	ldrb	r3, [r3, #13]
 801c694:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 801c696:	7dbb      	ldrb	r3, [r7, #22]
 801c698:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801c69c:	75bb      	strb	r3, [r7, #22]
 801c69e:	7dbb      	ldrb	r3, [r7, #22]
 801c6a0:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 801c6a2:	687b      	ldr	r3, [r7, #4]
 801c6a4:	695a      	ldr	r2, [r3, #20]
 801c6a6:	687b      	ldr	r3, [r7, #4]
 801c6a8:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 801c6aa:	7dba      	ldrb	r2, [r7, #22]
 801c6ac:	7d7b      	ldrb	r3, [r7, #21]
 801c6ae:	429a      	cmp	r2, r3
 801c6b0:	d115      	bne.n	801c6de <dir_find+0x106>
 801c6b2:	687b      	ldr	r3, [r7, #4]
 801c6b4:	6a1b      	ldr	r3, [r3, #32]
 801c6b6:	330d      	adds	r3, #13
 801c6b8:	781b      	ldrb	r3, [r3, #0]
 801c6ba:	7d3a      	ldrb	r2, [r7, #20]
 801c6bc:	429a      	cmp	r2, r3
 801c6be:	d10e      	bne.n	801c6de <dir_find+0x106>
 801c6c0:	693b      	ldr	r3, [r7, #16]
 801c6c2:	691a      	ldr	r2, [r3, #16]
 801c6c4:	687b      	ldr	r3, [r7, #4]
 801c6c6:	6a1b      	ldr	r3, [r3, #32]
 801c6c8:	4619      	mov	r1, r3
 801c6ca:	4610      	mov	r0, r2
 801c6cc:	f7ff fcf2 	bl	801c0b4 <cmp_lfn>
 801c6d0:	4603      	mov	r3, r0
 801c6d2:	2b00      	cmp	r3, #0
 801c6d4:	d003      	beq.n	801c6de <dir_find+0x106>
 801c6d6:	7d7b      	ldrb	r3, [r7, #21]
 801c6d8:	3b01      	subs	r3, #1
 801c6da:	b2db      	uxtb	r3, r3
 801c6dc:	e000      	b.n	801c6e0 <dir_find+0x108>
 801c6de:	23ff      	movs	r3, #255	@ 0xff
 801c6e0:	757b      	strb	r3, [r7, #21]
 801c6e2:	e024      	b.n	801c72e <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 801c6e4:	7d7b      	ldrb	r3, [r7, #21]
 801c6e6:	2b00      	cmp	r3, #0
 801c6e8:	d109      	bne.n	801c6fe <dir_find+0x126>
 801c6ea:	687b      	ldr	r3, [r7, #4]
 801c6ec:	6a1b      	ldr	r3, [r3, #32]
 801c6ee:	4618      	mov	r0, r3
 801c6f0:	f7ff feaa 	bl	801c448 <sum_sfn>
 801c6f4:	4603      	mov	r3, r0
 801c6f6:	461a      	mov	r2, r3
 801c6f8:	7d3b      	ldrb	r3, [r7, #20]
 801c6fa:	4293      	cmp	r3, r2
 801c6fc:	d024      	beq.n	801c748 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 801c6fe:	687b      	ldr	r3, [r7, #4]
 801c700:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 801c704:	f003 0301 	and.w	r3, r3, #1
 801c708:	2b00      	cmp	r3, #0
 801c70a:	d10a      	bne.n	801c722 <dir_find+0x14a>
 801c70c:	687b      	ldr	r3, [r7, #4]
 801c70e:	6a18      	ldr	r0, [r3, #32]
 801c710:	687b      	ldr	r3, [r7, #4]
 801c712:	3324      	adds	r3, #36	@ 0x24
 801c714:	220b      	movs	r2, #11
 801c716:	4619      	mov	r1, r3
 801c718:	f7fe fd16 	bl	801b148 <mem_cmp>
 801c71c:	4603      	mov	r3, r0
 801c71e:	2b00      	cmp	r3, #0
 801c720:	d014      	beq.n	801c74c <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 801c722:	23ff      	movs	r3, #255	@ 0xff
 801c724:	757b      	strb	r3, [r7, #21]
 801c726:	687b      	ldr	r3, [r7, #4]
 801c728:	f04f 32ff 	mov.w	r2, #4294967295
 801c72c:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 801c72e:	2100      	movs	r1, #0
 801c730:	6878      	ldr	r0, [r7, #4]
 801c732:	f7ff fb63 	bl	801bdfc <dir_next>
 801c736:	4603      	mov	r3, r0
 801c738:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 801c73a:	7dfb      	ldrb	r3, [r7, #23]
 801c73c:	2b00      	cmp	r3, #0
 801c73e:	f43f af65 	beq.w	801c60c <dir_find+0x34>
 801c742:	e004      	b.n	801c74e <dir_find+0x176>
		if (res != FR_OK) break;
 801c744:	bf00      	nop
 801c746:	e002      	b.n	801c74e <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 801c748:	bf00      	nop
 801c74a:	e000      	b.n	801c74e <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 801c74c:	bf00      	nop

	return res;
 801c74e:	7dfb      	ldrb	r3, [r7, #23]
}
 801c750:	4618      	mov	r0, r3
 801c752:	3718      	adds	r7, #24
 801c754:	46bd      	mov	sp, r7
 801c756:	bd80      	pop	{r7, pc}

0801c758 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 801c758:	b580      	push	{r7, lr}
 801c75a:	b08c      	sub	sp, #48	@ 0x30
 801c75c:	af00      	add	r7, sp, #0
 801c75e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801c760:	687b      	ldr	r3, [r7, #4]
 801c762:	681b      	ldr	r3, [r3, #0]
 801c764:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 801c766:	687b      	ldr	r3, [r7, #4]
 801c768:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 801c76c:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 801c770:	2b00      	cmp	r3, #0
 801c772:	d001      	beq.n	801c778 <dir_register+0x20>
 801c774:	2306      	movs	r3, #6
 801c776:	e0e0      	b.n	801c93a <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 801c778:	2300      	movs	r3, #0
 801c77a:	627b      	str	r3, [r7, #36]	@ 0x24
 801c77c:	e002      	b.n	801c784 <dir_register+0x2c>
 801c77e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c780:	3301      	adds	r3, #1
 801c782:	627b      	str	r3, [r7, #36]	@ 0x24
 801c784:	69fb      	ldr	r3, [r7, #28]
 801c786:	691a      	ldr	r2, [r3, #16]
 801c788:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c78a:	005b      	lsls	r3, r3, #1
 801c78c:	4413      	add	r3, r2
 801c78e:	881b      	ldrh	r3, [r3, #0]
 801c790:	2b00      	cmp	r3, #0
 801c792:	d1f4      	bne.n	801c77e <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 801c794:	687b      	ldr	r3, [r7, #4]
 801c796:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 801c79a:	f107 030c 	add.w	r3, r7, #12
 801c79e:	220c      	movs	r2, #12
 801c7a0:	4618      	mov	r0, r3
 801c7a2:	f7fe fc95 	bl	801b0d0 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 801c7a6:	7dfb      	ldrb	r3, [r7, #23]
 801c7a8:	f003 0301 	and.w	r3, r3, #1
 801c7ac:	2b00      	cmp	r3, #0
 801c7ae:	d032      	beq.n	801c816 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 801c7b0:	687b      	ldr	r3, [r7, #4]
 801c7b2:	2240      	movs	r2, #64	@ 0x40
 801c7b4:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 801c7b8:	2301      	movs	r3, #1
 801c7ba:	62bb      	str	r3, [r7, #40]	@ 0x28
 801c7bc:	e016      	b.n	801c7ec <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 801c7be:	687b      	ldr	r3, [r7, #4]
 801c7c0:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 801c7c4:	69fb      	ldr	r3, [r7, #28]
 801c7c6:	691a      	ldr	r2, [r3, #16]
 801c7c8:	f107 010c 	add.w	r1, r7, #12
 801c7cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c7ce:	f7ff fdad 	bl	801c32c <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 801c7d2:	6878      	ldr	r0, [r7, #4]
 801c7d4:	f7ff ff00 	bl	801c5d8 <dir_find>
 801c7d8:	4603      	mov	r3, r0
 801c7da:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 801c7de:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801c7e2:	2b00      	cmp	r3, #0
 801c7e4:	d106      	bne.n	801c7f4 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 801c7e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c7e8:	3301      	adds	r3, #1
 801c7ea:	62bb      	str	r3, [r7, #40]	@ 0x28
 801c7ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c7ee:	2b63      	cmp	r3, #99	@ 0x63
 801c7f0:	d9e5      	bls.n	801c7be <dir_register+0x66>
 801c7f2:	e000      	b.n	801c7f6 <dir_register+0x9e>
			if (res != FR_OK) break;
 801c7f4:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 801c7f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c7f8:	2b64      	cmp	r3, #100	@ 0x64
 801c7fa:	d101      	bne.n	801c800 <dir_register+0xa8>
 801c7fc:	2307      	movs	r3, #7
 801c7fe:	e09c      	b.n	801c93a <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 801c800:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801c804:	2b04      	cmp	r3, #4
 801c806:	d002      	beq.n	801c80e <dir_register+0xb6>
 801c808:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801c80c:	e095      	b.n	801c93a <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 801c80e:	7dfa      	ldrb	r2, [r7, #23]
 801c810:	687b      	ldr	r3, [r7, #4]
 801c812:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 801c816:	7dfb      	ldrb	r3, [r7, #23]
 801c818:	f003 0302 	and.w	r3, r3, #2
 801c81c:	2b00      	cmp	r3, #0
 801c81e:	d007      	beq.n	801c830 <dir_register+0xd8>
 801c820:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c822:	330c      	adds	r3, #12
 801c824:	4a47      	ldr	r2, [pc, #284]	@ (801c944 <dir_register+0x1ec>)
 801c826:	fba2 2303 	umull	r2, r3, r2, r3
 801c82a:	089b      	lsrs	r3, r3, #2
 801c82c:	3301      	adds	r3, #1
 801c82e:	e000      	b.n	801c832 <dir_register+0xda>
 801c830:	2301      	movs	r3, #1
 801c832:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 801c834:	6a39      	ldr	r1, [r7, #32]
 801c836:	6878      	ldr	r0, [r7, #4]
 801c838:	f7ff fbb6 	bl	801bfa8 <dir_alloc>
 801c83c:	4603      	mov	r3, r0
 801c83e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 801c842:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801c846:	2b00      	cmp	r3, #0
 801c848:	d148      	bne.n	801c8dc <dir_register+0x184>
 801c84a:	6a3b      	ldr	r3, [r7, #32]
 801c84c:	3b01      	subs	r3, #1
 801c84e:	623b      	str	r3, [r7, #32]
 801c850:	6a3b      	ldr	r3, [r7, #32]
 801c852:	2b00      	cmp	r3, #0
 801c854:	d042      	beq.n	801c8dc <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 801c856:	687b      	ldr	r3, [r7, #4]
 801c858:	695a      	ldr	r2, [r3, #20]
 801c85a:	6a3b      	ldr	r3, [r7, #32]
 801c85c:	015b      	lsls	r3, r3, #5
 801c85e:	1ad3      	subs	r3, r2, r3
 801c860:	4619      	mov	r1, r3
 801c862:	6878      	ldr	r0, [r7, #4]
 801c864:	f7ff fa41 	bl	801bcea <dir_sdi>
 801c868:	4603      	mov	r3, r0
 801c86a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 801c86e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801c872:	2b00      	cmp	r3, #0
 801c874:	d132      	bne.n	801c8dc <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 801c876:	687b      	ldr	r3, [r7, #4]
 801c878:	3324      	adds	r3, #36	@ 0x24
 801c87a:	4618      	mov	r0, r3
 801c87c:	f7ff fde4 	bl	801c448 <sum_sfn>
 801c880:	4603      	mov	r3, r0
 801c882:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 801c884:	687b      	ldr	r3, [r7, #4]
 801c886:	69db      	ldr	r3, [r3, #28]
 801c888:	4619      	mov	r1, r3
 801c88a:	69f8      	ldr	r0, [r7, #28]
 801c88c:	f7fe fe4e 	bl	801b52c <move_window>
 801c890:	4603      	mov	r3, r0
 801c892:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 801c896:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801c89a:	2b00      	cmp	r3, #0
 801c89c:	d11d      	bne.n	801c8da <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 801c89e:	69fb      	ldr	r3, [r7, #28]
 801c8a0:	6918      	ldr	r0, [r3, #16]
 801c8a2:	687b      	ldr	r3, [r7, #4]
 801c8a4:	6a19      	ldr	r1, [r3, #32]
 801c8a6:	6a3b      	ldr	r3, [r7, #32]
 801c8a8:	b2da      	uxtb	r2, r3
 801c8aa:	7efb      	ldrb	r3, [r7, #27]
 801c8ac:	f7ff fcd6 	bl	801c25c <put_lfn>
				fs->wflag = 1;
 801c8b0:	69fb      	ldr	r3, [r7, #28]
 801c8b2:	2201      	movs	r2, #1
 801c8b4:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 801c8b6:	2100      	movs	r1, #0
 801c8b8:	6878      	ldr	r0, [r7, #4]
 801c8ba:	f7ff fa9f 	bl	801bdfc <dir_next>
 801c8be:	4603      	mov	r3, r0
 801c8c0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 801c8c4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801c8c8:	2b00      	cmp	r3, #0
 801c8ca:	d107      	bne.n	801c8dc <dir_register+0x184>
 801c8cc:	6a3b      	ldr	r3, [r7, #32]
 801c8ce:	3b01      	subs	r3, #1
 801c8d0:	623b      	str	r3, [r7, #32]
 801c8d2:	6a3b      	ldr	r3, [r7, #32]
 801c8d4:	2b00      	cmp	r3, #0
 801c8d6:	d1d5      	bne.n	801c884 <dir_register+0x12c>
 801c8d8:	e000      	b.n	801c8dc <dir_register+0x184>
				if (res != FR_OK) break;
 801c8da:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 801c8dc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801c8e0:	2b00      	cmp	r3, #0
 801c8e2:	d128      	bne.n	801c936 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 801c8e4:	687b      	ldr	r3, [r7, #4]
 801c8e6:	69db      	ldr	r3, [r3, #28]
 801c8e8:	4619      	mov	r1, r3
 801c8ea:	69f8      	ldr	r0, [r7, #28]
 801c8ec:	f7fe fe1e 	bl	801b52c <move_window>
 801c8f0:	4603      	mov	r3, r0
 801c8f2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 801c8f6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801c8fa:	2b00      	cmp	r3, #0
 801c8fc:	d11b      	bne.n	801c936 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 801c8fe:	687b      	ldr	r3, [r7, #4]
 801c900:	6a1b      	ldr	r3, [r3, #32]
 801c902:	2220      	movs	r2, #32
 801c904:	2100      	movs	r1, #0
 801c906:	4618      	mov	r0, r3
 801c908:	f7fe fc03 	bl	801b112 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 801c90c:	687b      	ldr	r3, [r7, #4]
 801c90e:	6a18      	ldr	r0, [r3, #32]
 801c910:	687b      	ldr	r3, [r7, #4]
 801c912:	3324      	adds	r3, #36	@ 0x24
 801c914:	220b      	movs	r2, #11
 801c916:	4619      	mov	r1, r3
 801c918:	f7fe fbda 	bl	801b0d0 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 801c91c:	687b      	ldr	r3, [r7, #4]
 801c91e:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 801c922:	687b      	ldr	r3, [r7, #4]
 801c924:	6a1b      	ldr	r3, [r3, #32]
 801c926:	330c      	adds	r3, #12
 801c928:	f002 0218 	and.w	r2, r2, #24
 801c92c:	b2d2      	uxtb	r2, r2
 801c92e:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 801c930:	69fb      	ldr	r3, [r7, #28]
 801c932:	2201      	movs	r2, #1
 801c934:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 801c936:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 801c93a:	4618      	mov	r0, r3
 801c93c:	3730      	adds	r7, #48	@ 0x30
 801c93e:	46bd      	mov	sp, r7
 801c940:	bd80      	pop	{r7, pc}
 801c942:	bf00      	nop
 801c944:	4ec4ec4f 	.word	0x4ec4ec4f

0801c948 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 801c948:	b580      	push	{r7, lr}
 801c94a:	b086      	sub	sp, #24
 801c94c:	af00      	add	r7, sp, #0
 801c94e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801c950:	687b      	ldr	r3, [r7, #4]
 801c952:	681b      	ldr	r3, [r3, #0]
 801c954:	613b      	str	r3, [r7, #16]
#if _USE_LFN != 0	/* LFN configuration */
	DWORD last = dp->dptr;
 801c956:	687b      	ldr	r3, [r7, #4]
 801c958:	695b      	ldr	r3, [r3, #20]
 801c95a:	60fb      	str	r3, [r7, #12]

	res = (dp->blk_ofs == 0xFFFFFFFF) ? FR_OK : dir_sdi(dp, dp->blk_ofs);	/* Goto top of the entry block if LFN is exist */
 801c95c:	687b      	ldr	r3, [r7, #4]
 801c95e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801c960:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c964:	d007      	beq.n	801c976 <dir_remove+0x2e>
 801c966:	687b      	ldr	r3, [r7, #4]
 801c968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801c96a:	4619      	mov	r1, r3
 801c96c:	6878      	ldr	r0, [r7, #4]
 801c96e:	f7ff f9bc 	bl	801bcea <dir_sdi>
 801c972:	4603      	mov	r3, r0
 801c974:	e000      	b.n	801c978 <dir_remove+0x30>
 801c976:	2300      	movs	r3, #0
 801c978:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801c97a:	7dfb      	ldrb	r3, [r7, #23]
 801c97c:	2b00      	cmp	r3, #0
 801c97e:	d128      	bne.n	801c9d2 <dir_remove+0x8a>
		do {
			res = move_window(fs, dp->sect);
 801c980:	687b      	ldr	r3, [r7, #4]
 801c982:	69db      	ldr	r3, [r3, #28]
 801c984:	4619      	mov	r1, r3
 801c986:	6938      	ldr	r0, [r7, #16]
 801c988:	f7fe fdd0 	bl	801b52c <move_window>
 801c98c:	4603      	mov	r3, r0
 801c98e:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801c990:	7dfb      	ldrb	r3, [r7, #23]
 801c992:	2b00      	cmp	r3, #0
 801c994:	d115      	bne.n	801c9c2 <dir_remove+0x7a>
			/* Mark an entry 'deleted' */
			if (_FS_EXFAT && fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
				dp->dir[XDIR_Type] &= 0x7F;
			} else {									/* On the FAT12/16/32 volume */
				dp->dir[DIR_Name] = DDEM;
 801c996:	687b      	ldr	r3, [r7, #4]
 801c998:	6a1b      	ldr	r3, [r3, #32]
 801c99a:	22e5      	movs	r2, #229	@ 0xe5
 801c99c:	701a      	strb	r2, [r3, #0]
			}
			fs->wflag = 1;
 801c99e:	693b      	ldr	r3, [r7, #16]
 801c9a0:	2201      	movs	r2, #1
 801c9a2:	70da      	strb	r2, [r3, #3]
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 801c9a4:	687b      	ldr	r3, [r7, #4]
 801c9a6:	695b      	ldr	r3, [r3, #20]
 801c9a8:	68fa      	ldr	r2, [r7, #12]
 801c9aa:	429a      	cmp	r2, r3
 801c9ac:	d90b      	bls.n	801c9c6 <dir_remove+0x7e>
			res = dir_next(dp, 0);	/* Next entry */
 801c9ae:	2100      	movs	r1, #0
 801c9b0:	6878      	ldr	r0, [r7, #4]
 801c9b2:	f7ff fa23 	bl	801bdfc <dir_next>
 801c9b6:	4603      	mov	r3, r0
 801c9b8:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);
 801c9ba:	7dfb      	ldrb	r3, [r7, #23]
 801c9bc:	2b00      	cmp	r3, #0
 801c9be:	d0df      	beq.n	801c980 <dir_remove+0x38>
 801c9c0:	e002      	b.n	801c9c8 <dir_remove+0x80>
			if (res != FR_OK) break;
 801c9c2:	bf00      	nop
 801c9c4:	e000      	b.n	801c9c8 <dir_remove+0x80>
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 801c9c6:	bf00      	nop
		if (res == FR_NO_FILE) res = FR_INT_ERR;
 801c9c8:	7dfb      	ldrb	r3, [r7, #23]
 801c9ca:	2b04      	cmp	r3, #4
 801c9cc:	d101      	bne.n	801c9d2 <dir_remove+0x8a>
 801c9ce:	2302      	movs	r3, #2
 801c9d0:	75fb      	strb	r3, [r7, #23]
		dp->dir[DIR_Name] = DDEM;
		fs->wflag = 1;
	}
#endif

	return res;
 801c9d2:	7dfb      	ldrb	r3, [r7, #23]
}
 801c9d4:	4618      	mov	r0, r3
 801c9d6:	3718      	adds	r7, #24
 801c9d8:	46bd      	mov	sp, r7
 801c9da:	bd80      	pop	{r7, pc}

0801c9dc <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 801c9dc:	b580      	push	{r7, lr}
 801c9de:	b08a      	sub	sp, #40	@ 0x28
 801c9e0:	af00      	add	r7, sp, #0
 801c9e2:	6078      	str	r0, [r7, #4]
 801c9e4:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 801c9e6:	683b      	ldr	r3, [r7, #0]
 801c9e8:	681b      	ldr	r3, [r3, #0]
 801c9ea:	613b      	str	r3, [r7, #16]
 801c9ec:	687b      	ldr	r3, [r7, #4]
 801c9ee:	681b      	ldr	r3, [r3, #0]
 801c9f0:	691b      	ldr	r3, [r3, #16]
 801c9f2:	60fb      	str	r3, [r7, #12]
 801c9f4:	2300      	movs	r3, #0
 801c9f6:	617b      	str	r3, [r7, #20]
 801c9f8:	697b      	ldr	r3, [r7, #20]
 801c9fa:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 801c9fc:	69bb      	ldr	r3, [r7, #24]
 801c9fe:	1c5a      	adds	r2, r3, #1
 801ca00:	61ba      	str	r2, [r7, #24]
 801ca02:	693a      	ldr	r2, [r7, #16]
 801ca04:	4413      	add	r3, r2
 801ca06:	781b      	ldrb	r3, [r3, #0]
 801ca08:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 801ca0a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801ca0c:	2b1f      	cmp	r3, #31
 801ca0e:	d940      	bls.n	801ca92 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 801ca10:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801ca12:	2b2f      	cmp	r3, #47	@ 0x2f
 801ca14:	d006      	beq.n	801ca24 <create_name+0x48>
 801ca16:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801ca18:	2b5c      	cmp	r3, #92	@ 0x5c
 801ca1a:	d110      	bne.n	801ca3e <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 801ca1c:	e002      	b.n	801ca24 <create_name+0x48>
 801ca1e:	69bb      	ldr	r3, [r7, #24]
 801ca20:	3301      	adds	r3, #1
 801ca22:	61bb      	str	r3, [r7, #24]
 801ca24:	693a      	ldr	r2, [r7, #16]
 801ca26:	69bb      	ldr	r3, [r7, #24]
 801ca28:	4413      	add	r3, r2
 801ca2a:	781b      	ldrb	r3, [r3, #0]
 801ca2c:	2b2f      	cmp	r3, #47	@ 0x2f
 801ca2e:	d0f6      	beq.n	801ca1e <create_name+0x42>
 801ca30:	693a      	ldr	r2, [r7, #16]
 801ca32:	69bb      	ldr	r3, [r7, #24]
 801ca34:	4413      	add	r3, r2
 801ca36:	781b      	ldrb	r3, [r3, #0]
 801ca38:	2b5c      	cmp	r3, #92	@ 0x5c
 801ca3a:	d0f0      	beq.n	801ca1e <create_name+0x42>
			break;
 801ca3c:	e02a      	b.n	801ca94 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 801ca3e:	697b      	ldr	r3, [r7, #20]
 801ca40:	2bfe      	cmp	r3, #254	@ 0xfe
 801ca42:	d901      	bls.n	801ca48 <create_name+0x6c>
 801ca44:	2306      	movs	r3, #6
 801ca46:	e17d      	b.n	801cd44 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 801ca48:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801ca4a:	b2db      	uxtb	r3, r3
 801ca4c:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 801ca4e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801ca50:	2101      	movs	r1, #1
 801ca52:	4618      	mov	r0, r3
 801ca54:	f001 fa98 	bl	801df88 <ff_convert>
 801ca58:	4603      	mov	r3, r0
 801ca5a:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 801ca5c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801ca5e:	2b00      	cmp	r3, #0
 801ca60:	d101      	bne.n	801ca66 <create_name+0x8a>
 801ca62:	2306      	movs	r3, #6
 801ca64:	e16e      	b.n	801cd44 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 801ca66:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801ca68:	2b7f      	cmp	r3, #127	@ 0x7f
 801ca6a:	d809      	bhi.n	801ca80 <create_name+0xa4>
 801ca6c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801ca6e:	4619      	mov	r1, r3
 801ca70:	488d      	ldr	r0, [pc, #564]	@ (801cca8 <create_name+0x2cc>)
 801ca72:	f7fe fb90 	bl	801b196 <chk_chr>
 801ca76:	4603      	mov	r3, r0
 801ca78:	2b00      	cmp	r3, #0
 801ca7a:	d001      	beq.n	801ca80 <create_name+0xa4>
 801ca7c:	2306      	movs	r3, #6
 801ca7e:	e161      	b.n	801cd44 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 801ca80:	697b      	ldr	r3, [r7, #20]
 801ca82:	1c5a      	adds	r2, r3, #1
 801ca84:	617a      	str	r2, [r7, #20]
 801ca86:	005b      	lsls	r3, r3, #1
 801ca88:	68fa      	ldr	r2, [r7, #12]
 801ca8a:	4413      	add	r3, r2
 801ca8c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801ca8e:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 801ca90:	e7b4      	b.n	801c9fc <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 801ca92:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 801ca94:	693a      	ldr	r2, [r7, #16]
 801ca96:	69bb      	ldr	r3, [r7, #24]
 801ca98:	441a      	add	r2, r3
 801ca9a:	683b      	ldr	r3, [r7, #0]
 801ca9c:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 801ca9e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801caa0:	2b1f      	cmp	r3, #31
 801caa2:	d801      	bhi.n	801caa8 <create_name+0xcc>
 801caa4:	2304      	movs	r3, #4
 801caa6:	e000      	b.n	801caaa <create_name+0xce>
 801caa8:	2300      	movs	r3, #0
 801caaa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 801caae:	e011      	b.n	801cad4 <create_name+0xf8>
		w = lfn[di - 1];
 801cab0:	697a      	ldr	r2, [r7, #20]
 801cab2:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801cab6:	4413      	add	r3, r2
 801cab8:	005b      	lsls	r3, r3, #1
 801caba:	68fa      	ldr	r2, [r7, #12]
 801cabc:	4413      	add	r3, r2
 801cabe:	881b      	ldrh	r3, [r3, #0]
 801cac0:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 801cac2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801cac4:	2b20      	cmp	r3, #32
 801cac6:	d002      	beq.n	801cace <create_name+0xf2>
 801cac8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801caca:	2b2e      	cmp	r3, #46	@ 0x2e
 801cacc:	d106      	bne.n	801cadc <create_name+0x100>
		di--;
 801cace:	697b      	ldr	r3, [r7, #20]
 801cad0:	3b01      	subs	r3, #1
 801cad2:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 801cad4:	697b      	ldr	r3, [r7, #20]
 801cad6:	2b00      	cmp	r3, #0
 801cad8:	d1ea      	bne.n	801cab0 <create_name+0xd4>
 801cada:	e000      	b.n	801cade <create_name+0x102>
		if (w != ' ' && w != '.') break;
 801cadc:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 801cade:	697b      	ldr	r3, [r7, #20]
 801cae0:	005b      	lsls	r3, r3, #1
 801cae2:	68fa      	ldr	r2, [r7, #12]
 801cae4:	4413      	add	r3, r2
 801cae6:	2200      	movs	r2, #0
 801cae8:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 801caea:	697b      	ldr	r3, [r7, #20]
 801caec:	2b00      	cmp	r3, #0
 801caee:	d101      	bne.n	801caf4 <create_name+0x118>
 801caf0:	2306      	movs	r3, #6
 801caf2:	e127      	b.n	801cd44 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 801caf4:	687b      	ldr	r3, [r7, #4]
 801caf6:	3324      	adds	r3, #36	@ 0x24
 801caf8:	220b      	movs	r2, #11
 801cafa:	2120      	movs	r1, #32
 801cafc:	4618      	mov	r0, r3
 801cafe:	f7fe fb08 	bl	801b112 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 801cb02:	2300      	movs	r3, #0
 801cb04:	61bb      	str	r3, [r7, #24]
 801cb06:	e002      	b.n	801cb0e <create_name+0x132>
 801cb08:	69bb      	ldr	r3, [r7, #24]
 801cb0a:	3301      	adds	r3, #1
 801cb0c:	61bb      	str	r3, [r7, #24]
 801cb0e:	69bb      	ldr	r3, [r7, #24]
 801cb10:	005b      	lsls	r3, r3, #1
 801cb12:	68fa      	ldr	r2, [r7, #12]
 801cb14:	4413      	add	r3, r2
 801cb16:	881b      	ldrh	r3, [r3, #0]
 801cb18:	2b20      	cmp	r3, #32
 801cb1a:	d0f5      	beq.n	801cb08 <create_name+0x12c>
 801cb1c:	69bb      	ldr	r3, [r7, #24]
 801cb1e:	005b      	lsls	r3, r3, #1
 801cb20:	68fa      	ldr	r2, [r7, #12]
 801cb22:	4413      	add	r3, r2
 801cb24:	881b      	ldrh	r3, [r3, #0]
 801cb26:	2b2e      	cmp	r3, #46	@ 0x2e
 801cb28:	d0ee      	beq.n	801cb08 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 801cb2a:	69bb      	ldr	r3, [r7, #24]
 801cb2c:	2b00      	cmp	r3, #0
 801cb2e:	d009      	beq.n	801cb44 <create_name+0x168>
 801cb30:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801cb34:	f043 0303 	orr.w	r3, r3, #3
 801cb38:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 801cb3c:	e002      	b.n	801cb44 <create_name+0x168>
 801cb3e:	697b      	ldr	r3, [r7, #20]
 801cb40:	3b01      	subs	r3, #1
 801cb42:	617b      	str	r3, [r7, #20]
 801cb44:	697b      	ldr	r3, [r7, #20]
 801cb46:	2b00      	cmp	r3, #0
 801cb48:	d009      	beq.n	801cb5e <create_name+0x182>
 801cb4a:	697a      	ldr	r2, [r7, #20]
 801cb4c:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801cb50:	4413      	add	r3, r2
 801cb52:	005b      	lsls	r3, r3, #1
 801cb54:	68fa      	ldr	r2, [r7, #12]
 801cb56:	4413      	add	r3, r2
 801cb58:	881b      	ldrh	r3, [r3, #0]
 801cb5a:	2b2e      	cmp	r3, #46	@ 0x2e
 801cb5c:	d1ef      	bne.n	801cb3e <create_name+0x162>

	i = b = 0; ni = 8;
 801cb5e:	2300      	movs	r3, #0
 801cb60:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801cb64:	2300      	movs	r3, #0
 801cb66:	623b      	str	r3, [r7, #32]
 801cb68:	2308      	movs	r3, #8
 801cb6a:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 801cb6c:	69bb      	ldr	r3, [r7, #24]
 801cb6e:	1c5a      	adds	r2, r3, #1
 801cb70:	61ba      	str	r2, [r7, #24]
 801cb72:	005b      	lsls	r3, r3, #1
 801cb74:	68fa      	ldr	r2, [r7, #12]
 801cb76:	4413      	add	r3, r2
 801cb78:	881b      	ldrh	r3, [r3, #0]
 801cb7a:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 801cb7c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801cb7e:	2b00      	cmp	r3, #0
 801cb80:	f000 8090 	beq.w	801cca4 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 801cb84:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801cb86:	2b20      	cmp	r3, #32
 801cb88:	d006      	beq.n	801cb98 <create_name+0x1bc>
 801cb8a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801cb8c:	2b2e      	cmp	r3, #46	@ 0x2e
 801cb8e:	d10a      	bne.n	801cba6 <create_name+0x1ca>
 801cb90:	69ba      	ldr	r2, [r7, #24]
 801cb92:	697b      	ldr	r3, [r7, #20]
 801cb94:	429a      	cmp	r2, r3
 801cb96:	d006      	beq.n	801cba6 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 801cb98:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801cb9c:	f043 0303 	orr.w	r3, r3, #3
 801cba0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801cba4:	e07d      	b.n	801cca2 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 801cba6:	6a3a      	ldr	r2, [r7, #32]
 801cba8:	69fb      	ldr	r3, [r7, #28]
 801cbaa:	429a      	cmp	r2, r3
 801cbac:	d203      	bcs.n	801cbb6 <create_name+0x1da>
 801cbae:	69ba      	ldr	r2, [r7, #24]
 801cbb0:	697b      	ldr	r3, [r7, #20]
 801cbb2:	429a      	cmp	r2, r3
 801cbb4:	d123      	bne.n	801cbfe <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 801cbb6:	69fb      	ldr	r3, [r7, #28]
 801cbb8:	2b0b      	cmp	r3, #11
 801cbba:	d106      	bne.n	801cbca <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 801cbbc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801cbc0:	f043 0303 	orr.w	r3, r3, #3
 801cbc4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801cbc8:	e075      	b.n	801ccb6 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 801cbca:	69ba      	ldr	r2, [r7, #24]
 801cbcc:	697b      	ldr	r3, [r7, #20]
 801cbce:	429a      	cmp	r2, r3
 801cbd0:	d005      	beq.n	801cbde <create_name+0x202>
 801cbd2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801cbd6:	f043 0303 	orr.w	r3, r3, #3
 801cbda:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 801cbde:	69ba      	ldr	r2, [r7, #24]
 801cbe0:	697b      	ldr	r3, [r7, #20]
 801cbe2:	429a      	cmp	r2, r3
 801cbe4:	d866      	bhi.n	801ccb4 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 801cbe6:	697b      	ldr	r3, [r7, #20]
 801cbe8:	61bb      	str	r3, [r7, #24]
 801cbea:	2308      	movs	r3, #8
 801cbec:	623b      	str	r3, [r7, #32]
 801cbee:	230b      	movs	r3, #11
 801cbf0:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 801cbf2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801cbf6:	009b      	lsls	r3, r3, #2
 801cbf8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801cbfc:	e051      	b.n	801cca2 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 801cbfe:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801cc00:	2b7f      	cmp	r3, #127	@ 0x7f
 801cc02:	d914      	bls.n	801cc2e <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 801cc04:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801cc06:	2100      	movs	r1, #0
 801cc08:	4618      	mov	r0, r3
 801cc0a:	f001 f9bd 	bl	801df88 <ff_convert>
 801cc0e:	4603      	mov	r3, r0
 801cc10:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 801cc12:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801cc14:	2b00      	cmp	r3, #0
 801cc16:	d004      	beq.n	801cc22 <create_name+0x246>
 801cc18:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801cc1a:	3b80      	subs	r3, #128	@ 0x80
 801cc1c:	4a23      	ldr	r2, [pc, #140]	@ (801ccac <create_name+0x2d0>)
 801cc1e:	5cd3      	ldrb	r3, [r2, r3]
 801cc20:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 801cc22:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801cc26:	f043 0302 	orr.w	r3, r3, #2
 801cc2a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 801cc2e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801cc30:	2b00      	cmp	r3, #0
 801cc32:	d007      	beq.n	801cc44 <create_name+0x268>
 801cc34:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801cc36:	4619      	mov	r1, r3
 801cc38:	481d      	ldr	r0, [pc, #116]	@ (801ccb0 <create_name+0x2d4>)
 801cc3a:	f7fe faac 	bl	801b196 <chk_chr>
 801cc3e:	4603      	mov	r3, r0
 801cc40:	2b00      	cmp	r3, #0
 801cc42:	d008      	beq.n	801cc56 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 801cc44:	235f      	movs	r3, #95	@ 0x5f
 801cc46:	84bb      	strh	r3, [r7, #36]	@ 0x24
 801cc48:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801cc4c:	f043 0303 	orr.w	r3, r3, #3
 801cc50:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801cc54:	e01b      	b.n	801cc8e <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 801cc56:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801cc58:	2b40      	cmp	r3, #64	@ 0x40
 801cc5a:	d909      	bls.n	801cc70 <create_name+0x294>
 801cc5c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801cc5e:	2b5a      	cmp	r3, #90	@ 0x5a
 801cc60:	d806      	bhi.n	801cc70 <create_name+0x294>
					b |= 2;
 801cc62:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801cc66:	f043 0302 	orr.w	r3, r3, #2
 801cc6a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801cc6e:	e00e      	b.n	801cc8e <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 801cc70:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801cc72:	2b60      	cmp	r3, #96	@ 0x60
 801cc74:	d90b      	bls.n	801cc8e <create_name+0x2b2>
 801cc76:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801cc78:	2b7a      	cmp	r3, #122	@ 0x7a
 801cc7a:	d808      	bhi.n	801cc8e <create_name+0x2b2>
						b |= 1; w -= 0x20;
 801cc7c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801cc80:	f043 0301 	orr.w	r3, r3, #1
 801cc84:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801cc88:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801cc8a:	3b20      	subs	r3, #32
 801cc8c:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 801cc8e:	6a3b      	ldr	r3, [r7, #32]
 801cc90:	1c5a      	adds	r2, r3, #1
 801cc92:	623a      	str	r2, [r7, #32]
 801cc94:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801cc96:	b2d1      	uxtb	r1, r2
 801cc98:	687a      	ldr	r2, [r7, #4]
 801cc9a:	4413      	add	r3, r2
 801cc9c:	460a      	mov	r2, r1
 801cc9e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 801cca2:	e763      	b.n	801cb6c <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 801cca4:	bf00      	nop
 801cca6:	e006      	b.n	801ccb6 <create_name+0x2da>
 801cca8:	0801e9f4 	.word	0x0801e9f4
 801ccac:	0801ea8c 	.word	0x0801ea8c
 801ccb0:	0801ea00 	.word	0x0801ea00
			if (si > di) break;			/* No extension */
 801ccb4:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 801ccb6:	687b      	ldr	r3, [r7, #4]
 801ccb8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 801ccbc:	2be5      	cmp	r3, #229	@ 0xe5
 801ccbe:	d103      	bne.n	801ccc8 <create_name+0x2ec>
 801ccc0:	687b      	ldr	r3, [r7, #4]
 801ccc2:	2205      	movs	r2, #5
 801ccc4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 801ccc8:	69fb      	ldr	r3, [r7, #28]
 801ccca:	2b08      	cmp	r3, #8
 801cccc:	d104      	bne.n	801ccd8 <create_name+0x2fc>
 801ccce:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801ccd2:	009b      	lsls	r3, r3, #2
 801ccd4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 801ccd8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801ccdc:	f003 030c 	and.w	r3, r3, #12
 801cce0:	2b0c      	cmp	r3, #12
 801cce2:	d005      	beq.n	801ccf0 <create_name+0x314>
 801cce4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801cce8:	f003 0303 	and.w	r3, r3, #3
 801ccec:	2b03      	cmp	r3, #3
 801ccee:	d105      	bne.n	801ccfc <create_name+0x320>
 801ccf0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801ccf4:	f043 0302 	orr.w	r3, r3, #2
 801ccf8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 801ccfc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801cd00:	f003 0302 	and.w	r3, r3, #2
 801cd04:	2b00      	cmp	r3, #0
 801cd06:	d117      	bne.n	801cd38 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 801cd08:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801cd0c:	f003 0303 	and.w	r3, r3, #3
 801cd10:	2b01      	cmp	r3, #1
 801cd12:	d105      	bne.n	801cd20 <create_name+0x344>
 801cd14:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801cd18:	f043 0310 	orr.w	r3, r3, #16
 801cd1c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 801cd20:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801cd24:	f003 030c 	and.w	r3, r3, #12
 801cd28:	2b04      	cmp	r3, #4
 801cd2a:	d105      	bne.n	801cd38 <create_name+0x35c>
 801cd2c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801cd30:	f043 0308 	orr.w	r3, r3, #8
 801cd34:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 801cd38:	687b      	ldr	r3, [r7, #4]
 801cd3a:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 801cd3e:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 801cd42:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 801cd44:	4618      	mov	r0, r3
 801cd46:	3728      	adds	r7, #40	@ 0x28
 801cd48:	46bd      	mov	sp, r7
 801cd4a:	bd80      	pop	{r7, pc}

0801cd4c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 801cd4c:	b580      	push	{r7, lr}
 801cd4e:	b086      	sub	sp, #24
 801cd50:	af00      	add	r7, sp, #0
 801cd52:	6078      	str	r0, [r7, #4]
 801cd54:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 801cd56:	687b      	ldr	r3, [r7, #4]
 801cd58:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 801cd5a:	693b      	ldr	r3, [r7, #16]
 801cd5c:	681b      	ldr	r3, [r3, #0]
 801cd5e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 801cd60:	e002      	b.n	801cd68 <follow_path+0x1c>
 801cd62:	683b      	ldr	r3, [r7, #0]
 801cd64:	3301      	adds	r3, #1
 801cd66:	603b      	str	r3, [r7, #0]
 801cd68:	683b      	ldr	r3, [r7, #0]
 801cd6a:	781b      	ldrb	r3, [r3, #0]
 801cd6c:	2b2f      	cmp	r3, #47	@ 0x2f
 801cd6e:	d0f8      	beq.n	801cd62 <follow_path+0x16>
 801cd70:	683b      	ldr	r3, [r7, #0]
 801cd72:	781b      	ldrb	r3, [r3, #0]
 801cd74:	2b5c      	cmp	r3, #92	@ 0x5c
 801cd76:	d0f4      	beq.n	801cd62 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 801cd78:	693b      	ldr	r3, [r7, #16]
 801cd7a:	2200      	movs	r2, #0
 801cd7c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 801cd7e:	683b      	ldr	r3, [r7, #0]
 801cd80:	781b      	ldrb	r3, [r3, #0]
 801cd82:	2b1f      	cmp	r3, #31
 801cd84:	d80a      	bhi.n	801cd9c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 801cd86:	687b      	ldr	r3, [r7, #4]
 801cd88:	2280      	movs	r2, #128	@ 0x80
 801cd8a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 801cd8e:	2100      	movs	r1, #0
 801cd90:	6878      	ldr	r0, [r7, #4]
 801cd92:	f7fe ffaa 	bl	801bcea <dir_sdi>
 801cd96:	4603      	mov	r3, r0
 801cd98:	75fb      	strb	r3, [r7, #23]
 801cd9a:	e048      	b.n	801ce2e <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801cd9c:	463b      	mov	r3, r7
 801cd9e:	4619      	mov	r1, r3
 801cda0:	6878      	ldr	r0, [r7, #4]
 801cda2:	f7ff fe1b 	bl	801c9dc <create_name>
 801cda6:	4603      	mov	r3, r0
 801cda8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801cdaa:	7dfb      	ldrb	r3, [r7, #23]
 801cdac:	2b00      	cmp	r3, #0
 801cdae:	d139      	bne.n	801ce24 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 801cdb0:	6878      	ldr	r0, [r7, #4]
 801cdb2:	f7ff fc11 	bl	801c5d8 <dir_find>
 801cdb6:	4603      	mov	r3, r0
 801cdb8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 801cdba:	687b      	ldr	r3, [r7, #4]
 801cdbc:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 801cdc0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 801cdc2:	7dfb      	ldrb	r3, [r7, #23]
 801cdc4:	2b00      	cmp	r3, #0
 801cdc6:	d00a      	beq.n	801cdde <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 801cdc8:	7dfb      	ldrb	r3, [r7, #23]
 801cdca:	2b04      	cmp	r3, #4
 801cdcc:	d12c      	bne.n	801ce28 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 801cdce:	7afb      	ldrb	r3, [r7, #11]
 801cdd0:	f003 0304 	and.w	r3, r3, #4
 801cdd4:	2b00      	cmp	r3, #0
 801cdd6:	d127      	bne.n	801ce28 <follow_path+0xdc>
 801cdd8:	2305      	movs	r3, #5
 801cdda:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 801cddc:	e024      	b.n	801ce28 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801cdde:	7afb      	ldrb	r3, [r7, #11]
 801cde0:	f003 0304 	and.w	r3, r3, #4
 801cde4:	2b00      	cmp	r3, #0
 801cde6:	d121      	bne.n	801ce2c <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 801cde8:	693b      	ldr	r3, [r7, #16]
 801cdea:	799b      	ldrb	r3, [r3, #6]
 801cdec:	f003 0310 	and.w	r3, r3, #16
 801cdf0:	2b00      	cmp	r3, #0
 801cdf2:	d102      	bne.n	801cdfa <follow_path+0xae>
				res = FR_NO_PATH; break;
 801cdf4:	2305      	movs	r3, #5
 801cdf6:	75fb      	strb	r3, [r7, #23]
 801cdf8:	e019      	b.n	801ce2e <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 801cdfa:	68fb      	ldr	r3, [r7, #12]
 801cdfc:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801ce00:	687b      	ldr	r3, [r7, #4]
 801ce02:	695b      	ldr	r3, [r3, #20]
 801ce04:	68fa      	ldr	r2, [r7, #12]
 801ce06:	8992      	ldrh	r2, [r2, #12]
 801ce08:	fbb3 f0f2 	udiv	r0, r3, r2
 801ce0c:	fb00 f202 	mul.w	r2, r0, r2
 801ce10:	1a9b      	subs	r3, r3, r2
 801ce12:	440b      	add	r3, r1
 801ce14:	4619      	mov	r1, r3
 801ce16:	68f8      	ldr	r0, [r7, #12]
 801ce18:	f7ff f90d 	bl	801c036 <ld_clust>
 801ce1c:	4602      	mov	r2, r0
 801ce1e:	693b      	ldr	r3, [r7, #16]
 801ce20:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801ce22:	e7bb      	b.n	801cd9c <follow_path+0x50>
			if (res != FR_OK) break;
 801ce24:	bf00      	nop
 801ce26:	e002      	b.n	801ce2e <follow_path+0xe2>
				break;
 801ce28:	bf00      	nop
 801ce2a:	e000      	b.n	801ce2e <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801ce2c:	bf00      	nop
			}
		}
	}

	return res;
 801ce2e:	7dfb      	ldrb	r3, [r7, #23]
}
 801ce30:	4618      	mov	r0, r3
 801ce32:	3718      	adds	r7, #24
 801ce34:	46bd      	mov	sp, r7
 801ce36:	bd80      	pop	{r7, pc}

0801ce38 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 801ce38:	b480      	push	{r7}
 801ce3a:	b087      	sub	sp, #28
 801ce3c:	af00      	add	r7, sp, #0
 801ce3e:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 801ce40:	f04f 33ff 	mov.w	r3, #4294967295
 801ce44:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 801ce46:	687b      	ldr	r3, [r7, #4]
 801ce48:	681b      	ldr	r3, [r3, #0]
 801ce4a:	2b00      	cmp	r3, #0
 801ce4c:	d031      	beq.n	801ceb2 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 801ce4e:	687b      	ldr	r3, [r7, #4]
 801ce50:	681b      	ldr	r3, [r3, #0]
 801ce52:	617b      	str	r3, [r7, #20]
 801ce54:	e002      	b.n	801ce5c <get_ldnumber+0x24>
 801ce56:	697b      	ldr	r3, [r7, #20]
 801ce58:	3301      	adds	r3, #1
 801ce5a:	617b      	str	r3, [r7, #20]
 801ce5c:	697b      	ldr	r3, [r7, #20]
 801ce5e:	781b      	ldrb	r3, [r3, #0]
 801ce60:	2b1f      	cmp	r3, #31
 801ce62:	d903      	bls.n	801ce6c <get_ldnumber+0x34>
 801ce64:	697b      	ldr	r3, [r7, #20]
 801ce66:	781b      	ldrb	r3, [r3, #0]
 801ce68:	2b3a      	cmp	r3, #58	@ 0x3a
 801ce6a:	d1f4      	bne.n	801ce56 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 801ce6c:	697b      	ldr	r3, [r7, #20]
 801ce6e:	781b      	ldrb	r3, [r3, #0]
 801ce70:	2b3a      	cmp	r3, #58	@ 0x3a
 801ce72:	d11c      	bne.n	801ceae <get_ldnumber+0x76>
			tp = *path;
 801ce74:	687b      	ldr	r3, [r7, #4]
 801ce76:	681b      	ldr	r3, [r3, #0]
 801ce78:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 801ce7a:	68fb      	ldr	r3, [r7, #12]
 801ce7c:	1c5a      	adds	r2, r3, #1
 801ce7e:	60fa      	str	r2, [r7, #12]
 801ce80:	781b      	ldrb	r3, [r3, #0]
 801ce82:	3b30      	subs	r3, #48	@ 0x30
 801ce84:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 801ce86:	68bb      	ldr	r3, [r7, #8]
 801ce88:	2b09      	cmp	r3, #9
 801ce8a:	d80e      	bhi.n	801ceaa <get_ldnumber+0x72>
 801ce8c:	68fa      	ldr	r2, [r7, #12]
 801ce8e:	697b      	ldr	r3, [r7, #20]
 801ce90:	429a      	cmp	r2, r3
 801ce92:	d10a      	bne.n	801ceaa <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 801ce94:	68bb      	ldr	r3, [r7, #8]
 801ce96:	2b00      	cmp	r3, #0
 801ce98:	d107      	bne.n	801ceaa <get_ldnumber+0x72>
					vol = (int)i;
 801ce9a:	68bb      	ldr	r3, [r7, #8]
 801ce9c:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 801ce9e:	697b      	ldr	r3, [r7, #20]
 801cea0:	3301      	adds	r3, #1
 801cea2:	617b      	str	r3, [r7, #20]
 801cea4:	687b      	ldr	r3, [r7, #4]
 801cea6:	697a      	ldr	r2, [r7, #20]
 801cea8:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 801ceaa:	693b      	ldr	r3, [r7, #16]
 801ceac:	e002      	b.n	801ceb4 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 801ceae:	2300      	movs	r3, #0
 801ceb0:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 801ceb2:	693b      	ldr	r3, [r7, #16]
}
 801ceb4:	4618      	mov	r0, r3
 801ceb6:	371c      	adds	r7, #28
 801ceb8:	46bd      	mov	sp, r7
 801ceba:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cebe:	4770      	bx	lr

0801cec0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 801cec0:	b580      	push	{r7, lr}
 801cec2:	b082      	sub	sp, #8
 801cec4:	af00      	add	r7, sp, #0
 801cec6:	6078      	str	r0, [r7, #4]
 801cec8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 801ceca:	687b      	ldr	r3, [r7, #4]
 801cecc:	2200      	movs	r2, #0
 801cece:	70da      	strb	r2, [r3, #3]
 801ced0:	687b      	ldr	r3, [r7, #4]
 801ced2:	f04f 32ff 	mov.w	r2, #4294967295
 801ced6:	635a      	str	r2, [r3, #52]	@ 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 801ced8:	6839      	ldr	r1, [r7, #0]
 801ceda:	6878      	ldr	r0, [r7, #4]
 801cedc:	f7fe fb26 	bl	801b52c <move_window>
 801cee0:	4603      	mov	r3, r0
 801cee2:	2b00      	cmp	r3, #0
 801cee4:	d001      	beq.n	801ceea <check_fs+0x2a>
 801cee6:	2304      	movs	r3, #4
 801cee8:	e038      	b.n	801cf5c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 801ceea:	687b      	ldr	r3, [r7, #4]
 801ceec:	3338      	adds	r3, #56	@ 0x38
 801ceee:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 801cef2:	4618      	mov	r0, r3
 801cef4:	f7fe f86a 	bl	801afcc <ld_word>
 801cef8:	4603      	mov	r3, r0
 801cefa:	461a      	mov	r2, r3
 801cefc:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 801cf00:	429a      	cmp	r2, r3
 801cf02:	d001      	beq.n	801cf08 <check_fs+0x48>
 801cf04:	2303      	movs	r3, #3
 801cf06:	e029      	b.n	801cf5c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 801cf08:	687b      	ldr	r3, [r7, #4]
 801cf0a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801cf0e:	2be9      	cmp	r3, #233	@ 0xe9
 801cf10:	d009      	beq.n	801cf26 <check_fs+0x66>
 801cf12:	687b      	ldr	r3, [r7, #4]
 801cf14:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801cf18:	2beb      	cmp	r3, #235	@ 0xeb
 801cf1a:	d11e      	bne.n	801cf5a <check_fs+0x9a>
 801cf1c:	687b      	ldr	r3, [r7, #4]
 801cf1e:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 801cf22:	2b90      	cmp	r3, #144	@ 0x90
 801cf24:	d119      	bne.n	801cf5a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 801cf26:	687b      	ldr	r3, [r7, #4]
 801cf28:	3338      	adds	r3, #56	@ 0x38
 801cf2a:	3336      	adds	r3, #54	@ 0x36
 801cf2c:	4618      	mov	r0, r3
 801cf2e:	f7fe f865 	bl	801affc <ld_dword>
 801cf32:	4603      	mov	r3, r0
 801cf34:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 801cf38:	4a0a      	ldr	r2, [pc, #40]	@ (801cf64 <check_fs+0xa4>)
 801cf3a:	4293      	cmp	r3, r2
 801cf3c:	d101      	bne.n	801cf42 <check_fs+0x82>
 801cf3e:	2300      	movs	r3, #0
 801cf40:	e00c      	b.n	801cf5c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 801cf42:	687b      	ldr	r3, [r7, #4]
 801cf44:	3338      	adds	r3, #56	@ 0x38
 801cf46:	3352      	adds	r3, #82	@ 0x52
 801cf48:	4618      	mov	r0, r3
 801cf4a:	f7fe f857 	bl	801affc <ld_dword>
 801cf4e:	4603      	mov	r3, r0
 801cf50:	4a05      	ldr	r2, [pc, #20]	@ (801cf68 <check_fs+0xa8>)
 801cf52:	4293      	cmp	r3, r2
 801cf54:	d101      	bne.n	801cf5a <check_fs+0x9a>
 801cf56:	2300      	movs	r3, #0
 801cf58:	e000      	b.n	801cf5c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 801cf5a:	2302      	movs	r3, #2
}
 801cf5c:	4618      	mov	r0, r3
 801cf5e:	3708      	adds	r7, #8
 801cf60:	46bd      	mov	sp, r7
 801cf62:	bd80      	pop	{r7, pc}
 801cf64:	00544146 	.word	0x00544146
 801cf68:	33544146 	.word	0x33544146

0801cf6c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 801cf6c:	b580      	push	{r7, lr}
 801cf6e:	b096      	sub	sp, #88	@ 0x58
 801cf70:	af00      	add	r7, sp, #0
 801cf72:	60f8      	str	r0, [r7, #12]
 801cf74:	60b9      	str	r1, [r7, #8]
 801cf76:	4613      	mov	r3, r2
 801cf78:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 801cf7a:	68bb      	ldr	r3, [r7, #8]
 801cf7c:	2200      	movs	r2, #0
 801cf7e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 801cf80:	68f8      	ldr	r0, [r7, #12]
 801cf82:	f7ff ff59 	bl	801ce38 <get_ldnumber>
 801cf86:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 801cf88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801cf8a:	2b00      	cmp	r3, #0
 801cf8c:	da01      	bge.n	801cf92 <find_volume+0x26>
 801cf8e:	230b      	movs	r3, #11
 801cf90:	e265      	b.n	801d45e <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 801cf92:	4a9f      	ldr	r2, [pc, #636]	@ (801d210 <find_volume+0x2a4>)
 801cf94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801cf96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801cf9a:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 801cf9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cf9e:	2b00      	cmp	r3, #0
 801cfa0:	d101      	bne.n	801cfa6 <find_volume+0x3a>
 801cfa2:	230c      	movs	r3, #12
 801cfa4:	e25b      	b.n	801d45e <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 801cfa6:	68bb      	ldr	r3, [r7, #8]
 801cfa8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801cfaa:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 801cfac:	79fb      	ldrb	r3, [r7, #7]
 801cfae:	f023 0301 	bic.w	r3, r3, #1
 801cfb2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 801cfb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cfb6:	781b      	ldrb	r3, [r3, #0]
 801cfb8:	2b00      	cmp	r3, #0
 801cfba:	d01a      	beq.n	801cff2 <find_volume+0x86>
		stat = disk_status(fs->drv);
 801cfbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cfbe:	785b      	ldrb	r3, [r3, #1]
 801cfc0:	4618      	mov	r0, r3
 801cfc2:	f7fd ff63 	bl	801ae8c <disk_status>
 801cfc6:	4603      	mov	r3, r0
 801cfc8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 801cfcc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801cfd0:	f003 0301 	and.w	r3, r3, #1
 801cfd4:	2b00      	cmp	r3, #0
 801cfd6:	d10c      	bne.n	801cff2 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 801cfd8:	79fb      	ldrb	r3, [r7, #7]
 801cfda:	2b00      	cmp	r3, #0
 801cfdc:	d007      	beq.n	801cfee <find_volume+0x82>
 801cfde:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801cfe2:	f003 0304 	and.w	r3, r3, #4
 801cfe6:	2b00      	cmp	r3, #0
 801cfe8:	d001      	beq.n	801cfee <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 801cfea:	230a      	movs	r3, #10
 801cfec:	e237      	b.n	801d45e <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 801cfee:	2300      	movs	r3, #0
 801cff0:	e235      	b.n	801d45e <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 801cff2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cff4:	2200      	movs	r2, #0
 801cff6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 801cff8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801cffa:	b2da      	uxtb	r2, r3
 801cffc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cffe:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 801d000:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d002:	785b      	ldrb	r3, [r3, #1]
 801d004:	4618      	mov	r0, r3
 801d006:	f7fd ff5b 	bl	801aec0 <disk_initialize>
 801d00a:	4603      	mov	r3, r0
 801d00c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 801d010:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801d014:	f003 0301 	and.w	r3, r3, #1
 801d018:	2b00      	cmp	r3, #0
 801d01a:	d001      	beq.n	801d020 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 801d01c:	2303      	movs	r3, #3
 801d01e:	e21e      	b.n	801d45e <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 801d020:	79fb      	ldrb	r3, [r7, #7]
 801d022:	2b00      	cmp	r3, #0
 801d024:	d007      	beq.n	801d036 <find_volume+0xca>
 801d026:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801d02a:	f003 0304 	and.w	r3, r3, #4
 801d02e:	2b00      	cmp	r3, #0
 801d030:	d001      	beq.n	801d036 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 801d032:	230a      	movs	r3, #10
 801d034:	e213      	b.n	801d45e <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 801d036:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d038:	7858      	ldrb	r0, [r3, #1]
 801d03a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d03c:	330c      	adds	r3, #12
 801d03e:	461a      	mov	r2, r3
 801d040:	2102      	movs	r1, #2
 801d042:	f7fd ffa5 	bl	801af90 <disk_ioctl>
 801d046:	4603      	mov	r3, r0
 801d048:	2b00      	cmp	r3, #0
 801d04a:	d001      	beq.n	801d050 <find_volume+0xe4>
 801d04c:	2301      	movs	r3, #1
 801d04e:	e206      	b.n	801d45e <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 801d050:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d052:	899b      	ldrh	r3, [r3, #12]
 801d054:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801d058:	d80d      	bhi.n	801d076 <find_volume+0x10a>
 801d05a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d05c:	899b      	ldrh	r3, [r3, #12]
 801d05e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801d062:	d308      	bcc.n	801d076 <find_volume+0x10a>
 801d064:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d066:	899b      	ldrh	r3, [r3, #12]
 801d068:	461a      	mov	r2, r3
 801d06a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d06c:	899b      	ldrh	r3, [r3, #12]
 801d06e:	3b01      	subs	r3, #1
 801d070:	4013      	ands	r3, r2
 801d072:	2b00      	cmp	r3, #0
 801d074:	d001      	beq.n	801d07a <find_volume+0x10e>
 801d076:	2301      	movs	r3, #1
 801d078:	e1f1      	b.n	801d45e <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 801d07a:	2300      	movs	r3, #0
 801d07c:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 801d07e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801d080:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801d082:	f7ff ff1d 	bl	801cec0 <check_fs>
 801d086:	4603      	mov	r3, r0
 801d088:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 801d08c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801d090:	2b02      	cmp	r3, #2
 801d092:	d149      	bne.n	801d128 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801d094:	2300      	movs	r3, #0
 801d096:	643b      	str	r3, [r7, #64]	@ 0x40
 801d098:	e01e      	b.n	801d0d8 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 801d09a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d09c:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 801d0a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801d0a2:	011b      	lsls	r3, r3, #4
 801d0a4:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 801d0a8:	4413      	add	r3, r2
 801d0aa:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 801d0ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d0ae:	3304      	adds	r3, #4
 801d0b0:	781b      	ldrb	r3, [r3, #0]
 801d0b2:	2b00      	cmp	r3, #0
 801d0b4:	d006      	beq.n	801d0c4 <find_volume+0x158>
 801d0b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d0b8:	3308      	adds	r3, #8
 801d0ba:	4618      	mov	r0, r3
 801d0bc:	f7fd ff9e 	bl	801affc <ld_dword>
 801d0c0:	4602      	mov	r2, r0
 801d0c2:	e000      	b.n	801d0c6 <find_volume+0x15a>
 801d0c4:	2200      	movs	r2, #0
 801d0c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801d0c8:	009b      	lsls	r3, r3, #2
 801d0ca:	3358      	adds	r3, #88	@ 0x58
 801d0cc:	443b      	add	r3, r7
 801d0ce:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801d0d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801d0d4:	3301      	adds	r3, #1
 801d0d6:	643b      	str	r3, [r7, #64]	@ 0x40
 801d0d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801d0da:	2b03      	cmp	r3, #3
 801d0dc:	d9dd      	bls.n	801d09a <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 801d0de:	2300      	movs	r3, #0
 801d0e0:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 801d0e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801d0e4:	2b00      	cmp	r3, #0
 801d0e6:	d002      	beq.n	801d0ee <find_volume+0x182>
 801d0e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801d0ea:	3b01      	subs	r3, #1
 801d0ec:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 801d0ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801d0f0:	009b      	lsls	r3, r3, #2
 801d0f2:	3358      	adds	r3, #88	@ 0x58
 801d0f4:	443b      	add	r3, r7
 801d0f6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 801d0fa:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 801d0fc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801d0fe:	2b00      	cmp	r3, #0
 801d100:	d005      	beq.n	801d10e <find_volume+0x1a2>
 801d102:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801d104:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801d106:	f7ff fedb 	bl	801cec0 <check_fs>
 801d10a:	4603      	mov	r3, r0
 801d10c:	e000      	b.n	801d110 <find_volume+0x1a4>
 801d10e:	2303      	movs	r3, #3
 801d110:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 801d114:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801d118:	2b01      	cmp	r3, #1
 801d11a:	d905      	bls.n	801d128 <find_volume+0x1bc>
 801d11c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801d11e:	3301      	adds	r3, #1
 801d120:	643b      	str	r3, [r7, #64]	@ 0x40
 801d122:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801d124:	2b03      	cmp	r3, #3
 801d126:	d9e2      	bls.n	801d0ee <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 801d128:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801d12c:	2b04      	cmp	r3, #4
 801d12e:	d101      	bne.n	801d134 <find_volume+0x1c8>
 801d130:	2301      	movs	r3, #1
 801d132:	e194      	b.n	801d45e <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 801d134:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801d138:	2b01      	cmp	r3, #1
 801d13a:	d901      	bls.n	801d140 <find_volume+0x1d4>
 801d13c:	230d      	movs	r3, #13
 801d13e:	e18e      	b.n	801d45e <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 801d140:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d142:	3338      	adds	r3, #56	@ 0x38
 801d144:	330b      	adds	r3, #11
 801d146:	4618      	mov	r0, r3
 801d148:	f7fd ff40 	bl	801afcc <ld_word>
 801d14c:	4603      	mov	r3, r0
 801d14e:	461a      	mov	r2, r3
 801d150:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d152:	899b      	ldrh	r3, [r3, #12]
 801d154:	429a      	cmp	r2, r3
 801d156:	d001      	beq.n	801d15c <find_volume+0x1f0>
 801d158:	230d      	movs	r3, #13
 801d15a:	e180      	b.n	801d45e <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 801d15c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d15e:	3338      	adds	r3, #56	@ 0x38
 801d160:	3316      	adds	r3, #22
 801d162:	4618      	mov	r0, r3
 801d164:	f7fd ff32 	bl	801afcc <ld_word>
 801d168:	4603      	mov	r3, r0
 801d16a:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 801d16c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801d16e:	2b00      	cmp	r3, #0
 801d170:	d106      	bne.n	801d180 <find_volume+0x214>
 801d172:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d174:	3338      	adds	r3, #56	@ 0x38
 801d176:	3324      	adds	r3, #36	@ 0x24
 801d178:	4618      	mov	r0, r3
 801d17a:	f7fd ff3f 	bl	801affc <ld_dword>
 801d17e:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 801d180:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d182:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801d184:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 801d186:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d188:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 801d18c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d18e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 801d190:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d192:	789b      	ldrb	r3, [r3, #2]
 801d194:	2b01      	cmp	r3, #1
 801d196:	d005      	beq.n	801d1a4 <find_volume+0x238>
 801d198:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d19a:	789b      	ldrb	r3, [r3, #2]
 801d19c:	2b02      	cmp	r3, #2
 801d19e:	d001      	beq.n	801d1a4 <find_volume+0x238>
 801d1a0:	230d      	movs	r3, #13
 801d1a2:	e15c      	b.n	801d45e <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 801d1a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d1a6:	789b      	ldrb	r3, [r3, #2]
 801d1a8:	461a      	mov	r2, r3
 801d1aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801d1ac:	fb02 f303 	mul.w	r3, r2, r3
 801d1b0:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 801d1b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d1b4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801d1b8:	461a      	mov	r2, r3
 801d1ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d1bc:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 801d1be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d1c0:	895b      	ldrh	r3, [r3, #10]
 801d1c2:	2b00      	cmp	r3, #0
 801d1c4:	d008      	beq.n	801d1d8 <find_volume+0x26c>
 801d1c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d1c8:	895b      	ldrh	r3, [r3, #10]
 801d1ca:	461a      	mov	r2, r3
 801d1cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d1ce:	895b      	ldrh	r3, [r3, #10]
 801d1d0:	3b01      	subs	r3, #1
 801d1d2:	4013      	ands	r3, r2
 801d1d4:	2b00      	cmp	r3, #0
 801d1d6:	d001      	beq.n	801d1dc <find_volume+0x270>
 801d1d8:	230d      	movs	r3, #13
 801d1da:	e140      	b.n	801d45e <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 801d1dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d1de:	3338      	adds	r3, #56	@ 0x38
 801d1e0:	3311      	adds	r3, #17
 801d1e2:	4618      	mov	r0, r3
 801d1e4:	f7fd fef2 	bl	801afcc <ld_word>
 801d1e8:	4603      	mov	r3, r0
 801d1ea:	461a      	mov	r2, r3
 801d1ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d1ee:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 801d1f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d1f2:	891b      	ldrh	r3, [r3, #8]
 801d1f4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801d1f6:	8992      	ldrh	r2, [r2, #12]
 801d1f8:	0952      	lsrs	r2, r2, #5
 801d1fa:	b292      	uxth	r2, r2
 801d1fc:	fbb3 f1f2 	udiv	r1, r3, r2
 801d200:	fb01 f202 	mul.w	r2, r1, r2
 801d204:	1a9b      	subs	r3, r3, r2
 801d206:	b29b      	uxth	r3, r3
 801d208:	2b00      	cmp	r3, #0
 801d20a:	d003      	beq.n	801d214 <find_volume+0x2a8>
 801d20c:	230d      	movs	r3, #13
 801d20e:	e126      	b.n	801d45e <find_volume+0x4f2>
 801d210:	24000554 	.word	0x24000554

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 801d214:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d216:	3338      	adds	r3, #56	@ 0x38
 801d218:	3313      	adds	r3, #19
 801d21a:	4618      	mov	r0, r3
 801d21c:	f7fd fed6 	bl	801afcc <ld_word>
 801d220:	4603      	mov	r3, r0
 801d222:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 801d224:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801d226:	2b00      	cmp	r3, #0
 801d228:	d106      	bne.n	801d238 <find_volume+0x2cc>
 801d22a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d22c:	3338      	adds	r3, #56	@ 0x38
 801d22e:	3320      	adds	r3, #32
 801d230:	4618      	mov	r0, r3
 801d232:	f7fd fee3 	bl	801affc <ld_dword>
 801d236:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 801d238:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d23a:	3338      	adds	r3, #56	@ 0x38
 801d23c:	330e      	adds	r3, #14
 801d23e:	4618      	mov	r0, r3
 801d240:	f7fd fec4 	bl	801afcc <ld_word>
 801d244:	4603      	mov	r3, r0
 801d246:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 801d248:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801d24a:	2b00      	cmp	r3, #0
 801d24c:	d101      	bne.n	801d252 <find_volume+0x2e6>
 801d24e:	230d      	movs	r3, #13
 801d250:	e105      	b.n	801d45e <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 801d252:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801d254:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801d256:	4413      	add	r3, r2
 801d258:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801d25a:	8911      	ldrh	r1, [r2, #8]
 801d25c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801d25e:	8992      	ldrh	r2, [r2, #12]
 801d260:	0952      	lsrs	r2, r2, #5
 801d262:	b292      	uxth	r2, r2
 801d264:	fbb1 f2f2 	udiv	r2, r1, r2
 801d268:	b292      	uxth	r2, r2
 801d26a:	4413      	add	r3, r2
 801d26c:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 801d26e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801d270:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d272:	429a      	cmp	r2, r3
 801d274:	d201      	bcs.n	801d27a <find_volume+0x30e>
 801d276:	230d      	movs	r3, #13
 801d278:	e0f1      	b.n	801d45e <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 801d27a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801d27c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d27e:	1ad3      	subs	r3, r2, r3
 801d280:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801d282:	8952      	ldrh	r2, [r2, #10]
 801d284:	fbb3 f3f2 	udiv	r3, r3, r2
 801d288:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 801d28a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d28c:	2b00      	cmp	r3, #0
 801d28e:	d101      	bne.n	801d294 <find_volume+0x328>
 801d290:	230d      	movs	r3, #13
 801d292:	e0e4      	b.n	801d45e <find_volume+0x4f2>
		fmt = FS_FAT32;
 801d294:	2303      	movs	r3, #3
 801d296:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 801d29a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d29c:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 801d2a0:	4293      	cmp	r3, r2
 801d2a2:	d802      	bhi.n	801d2aa <find_volume+0x33e>
 801d2a4:	2302      	movs	r3, #2
 801d2a6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 801d2aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d2ac:	f640 72f5 	movw	r2, #4085	@ 0xff5
 801d2b0:	4293      	cmp	r3, r2
 801d2b2:	d802      	bhi.n	801d2ba <find_volume+0x34e>
 801d2b4:	2301      	movs	r3, #1
 801d2b6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 801d2ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d2bc:	1c9a      	adds	r2, r3, #2
 801d2be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d2c0:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 801d2c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d2c4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801d2c6:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 801d2c8:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801d2ca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801d2cc:	441a      	add	r2, r3
 801d2ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d2d0:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 801d2d2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801d2d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d2d6:	441a      	add	r2, r3
 801d2d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d2da:	631a      	str	r2, [r3, #48]	@ 0x30
		if (fmt == FS_FAT32) {
 801d2dc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801d2e0:	2b03      	cmp	r3, #3
 801d2e2:	d11e      	bne.n	801d322 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 801d2e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d2e6:	3338      	adds	r3, #56	@ 0x38
 801d2e8:	332a      	adds	r3, #42	@ 0x2a
 801d2ea:	4618      	mov	r0, r3
 801d2ec:	f7fd fe6e 	bl	801afcc <ld_word>
 801d2f0:	4603      	mov	r3, r0
 801d2f2:	2b00      	cmp	r3, #0
 801d2f4:	d001      	beq.n	801d2fa <find_volume+0x38e>
 801d2f6:	230d      	movs	r3, #13
 801d2f8:	e0b1      	b.n	801d45e <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 801d2fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d2fc:	891b      	ldrh	r3, [r3, #8]
 801d2fe:	2b00      	cmp	r3, #0
 801d300:	d001      	beq.n	801d306 <find_volume+0x39a>
 801d302:	230d      	movs	r3, #13
 801d304:	e0ab      	b.n	801d45e <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 801d306:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d308:	3338      	adds	r3, #56	@ 0x38
 801d30a:	332c      	adds	r3, #44	@ 0x2c
 801d30c:	4618      	mov	r0, r3
 801d30e:	f7fd fe75 	bl	801affc <ld_dword>
 801d312:	4602      	mov	r2, r0
 801d314:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d316:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 801d318:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d31a:	69db      	ldr	r3, [r3, #28]
 801d31c:	009b      	lsls	r3, r3, #2
 801d31e:	647b      	str	r3, [r7, #68]	@ 0x44
 801d320:	e01f      	b.n	801d362 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 801d322:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d324:	891b      	ldrh	r3, [r3, #8]
 801d326:	2b00      	cmp	r3, #0
 801d328:	d101      	bne.n	801d32e <find_volume+0x3c2>
 801d32a:	230d      	movs	r3, #13
 801d32c:	e097      	b.n	801d45e <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 801d32e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d330:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801d332:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801d334:	441a      	add	r2, r3
 801d336:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d338:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 801d33a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801d33e:	2b02      	cmp	r3, #2
 801d340:	d103      	bne.n	801d34a <find_volume+0x3de>
 801d342:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d344:	69db      	ldr	r3, [r3, #28]
 801d346:	005b      	lsls	r3, r3, #1
 801d348:	e00a      	b.n	801d360 <find_volume+0x3f4>
 801d34a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d34c:	69da      	ldr	r2, [r3, #28]
 801d34e:	4613      	mov	r3, r2
 801d350:	005b      	lsls	r3, r3, #1
 801d352:	4413      	add	r3, r2
 801d354:	085a      	lsrs	r2, r3, #1
 801d356:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d358:	69db      	ldr	r3, [r3, #28]
 801d35a:	f003 0301 	and.w	r3, r3, #1
 801d35e:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 801d360:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 801d362:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d364:	6a1a      	ldr	r2, [r3, #32]
 801d366:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d368:	899b      	ldrh	r3, [r3, #12]
 801d36a:	4619      	mov	r1, r3
 801d36c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801d36e:	440b      	add	r3, r1
 801d370:	3b01      	subs	r3, #1
 801d372:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801d374:	8989      	ldrh	r1, [r1, #12]
 801d376:	fbb3 f3f1 	udiv	r3, r3, r1
 801d37a:	429a      	cmp	r2, r3
 801d37c:	d201      	bcs.n	801d382 <find_volume+0x416>
 801d37e:	230d      	movs	r3, #13
 801d380:	e06d      	b.n	801d45e <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 801d382:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d384:	f04f 32ff 	mov.w	r2, #4294967295
 801d388:	619a      	str	r2, [r3, #24]
 801d38a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d38c:	699a      	ldr	r2, [r3, #24]
 801d38e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d390:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 801d392:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d394:	2280      	movs	r2, #128	@ 0x80
 801d396:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 801d398:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801d39c:	2b03      	cmp	r3, #3
 801d39e:	d149      	bne.n	801d434 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 801d3a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d3a2:	3338      	adds	r3, #56	@ 0x38
 801d3a4:	3330      	adds	r3, #48	@ 0x30
 801d3a6:	4618      	mov	r0, r3
 801d3a8:	f7fd fe10 	bl	801afcc <ld_word>
 801d3ac:	4603      	mov	r3, r0
 801d3ae:	2b01      	cmp	r3, #1
 801d3b0:	d140      	bne.n	801d434 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 801d3b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801d3b4:	3301      	adds	r3, #1
 801d3b6:	4619      	mov	r1, r3
 801d3b8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801d3ba:	f7fe f8b7 	bl	801b52c <move_window>
 801d3be:	4603      	mov	r3, r0
 801d3c0:	2b00      	cmp	r3, #0
 801d3c2:	d137      	bne.n	801d434 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 801d3c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d3c6:	2200      	movs	r2, #0
 801d3c8:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 801d3ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d3cc:	3338      	adds	r3, #56	@ 0x38
 801d3ce:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 801d3d2:	4618      	mov	r0, r3
 801d3d4:	f7fd fdfa 	bl	801afcc <ld_word>
 801d3d8:	4603      	mov	r3, r0
 801d3da:	461a      	mov	r2, r3
 801d3dc:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 801d3e0:	429a      	cmp	r2, r3
 801d3e2:	d127      	bne.n	801d434 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 801d3e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d3e6:	3338      	adds	r3, #56	@ 0x38
 801d3e8:	4618      	mov	r0, r3
 801d3ea:	f7fd fe07 	bl	801affc <ld_dword>
 801d3ee:	4603      	mov	r3, r0
 801d3f0:	4a1d      	ldr	r2, [pc, #116]	@ (801d468 <find_volume+0x4fc>)
 801d3f2:	4293      	cmp	r3, r2
 801d3f4:	d11e      	bne.n	801d434 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 801d3f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d3f8:	3338      	adds	r3, #56	@ 0x38
 801d3fa:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 801d3fe:	4618      	mov	r0, r3
 801d400:	f7fd fdfc 	bl	801affc <ld_dword>
 801d404:	4603      	mov	r3, r0
 801d406:	4a19      	ldr	r2, [pc, #100]	@ (801d46c <find_volume+0x500>)
 801d408:	4293      	cmp	r3, r2
 801d40a:	d113      	bne.n	801d434 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 801d40c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d40e:	3338      	adds	r3, #56	@ 0x38
 801d410:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 801d414:	4618      	mov	r0, r3
 801d416:	f7fd fdf1 	bl	801affc <ld_dword>
 801d41a:	4602      	mov	r2, r0
 801d41c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d41e:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 801d420:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d422:	3338      	adds	r3, #56	@ 0x38
 801d424:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 801d428:	4618      	mov	r0, r3
 801d42a:	f7fd fde7 	bl	801affc <ld_dword>
 801d42e:	4602      	mov	r2, r0
 801d430:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d432:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 801d434:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d436:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 801d43a:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 801d43c:	4b0c      	ldr	r3, [pc, #48]	@ (801d470 <find_volume+0x504>)
 801d43e:	881b      	ldrh	r3, [r3, #0]
 801d440:	3301      	adds	r3, #1
 801d442:	b29a      	uxth	r2, r3
 801d444:	4b0a      	ldr	r3, [pc, #40]	@ (801d470 <find_volume+0x504>)
 801d446:	801a      	strh	r2, [r3, #0]
 801d448:	4b09      	ldr	r3, [pc, #36]	@ (801d470 <find_volume+0x504>)
 801d44a:	881a      	ldrh	r2, [r3, #0]
 801d44c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d44e:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 801d450:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d452:	4a08      	ldr	r2, [pc, #32]	@ (801d474 <find_volume+0x508>)
 801d454:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 801d456:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801d458:	f7fe f800 	bl	801b45c <clear_lock>
#endif
	return FR_OK;
 801d45c:	2300      	movs	r3, #0
}
 801d45e:	4618      	mov	r0, r3
 801d460:	3758      	adds	r7, #88	@ 0x58
 801d462:	46bd      	mov	sp, r7
 801d464:	bd80      	pop	{r7, pc}
 801d466:	bf00      	nop
 801d468:	41615252 	.word	0x41615252
 801d46c:	61417272 	.word	0x61417272
 801d470:	24000558 	.word	0x24000558
 801d474:	2400056c 	.word	0x2400056c

0801d478 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 801d478:	b580      	push	{r7, lr}
 801d47a:	b084      	sub	sp, #16
 801d47c:	af00      	add	r7, sp, #0
 801d47e:	6078      	str	r0, [r7, #4]
 801d480:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 801d482:	2309      	movs	r3, #9
 801d484:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 801d486:	687b      	ldr	r3, [r7, #4]
 801d488:	2b00      	cmp	r3, #0
 801d48a:	d01c      	beq.n	801d4c6 <validate+0x4e>
 801d48c:	687b      	ldr	r3, [r7, #4]
 801d48e:	681b      	ldr	r3, [r3, #0]
 801d490:	2b00      	cmp	r3, #0
 801d492:	d018      	beq.n	801d4c6 <validate+0x4e>
 801d494:	687b      	ldr	r3, [r7, #4]
 801d496:	681b      	ldr	r3, [r3, #0]
 801d498:	781b      	ldrb	r3, [r3, #0]
 801d49a:	2b00      	cmp	r3, #0
 801d49c:	d013      	beq.n	801d4c6 <validate+0x4e>
 801d49e:	687b      	ldr	r3, [r7, #4]
 801d4a0:	889a      	ldrh	r2, [r3, #4]
 801d4a2:	687b      	ldr	r3, [r7, #4]
 801d4a4:	681b      	ldr	r3, [r3, #0]
 801d4a6:	88db      	ldrh	r3, [r3, #6]
 801d4a8:	429a      	cmp	r2, r3
 801d4aa:	d10c      	bne.n	801d4c6 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 801d4ac:	687b      	ldr	r3, [r7, #4]
 801d4ae:	681b      	ldr	r3, [r3, #0]
 801d4b0:	785b      	ldrb	r3, [r3, #1]
 801d4b2:	4618      	mov	r0, r3
 801d4b4:	f7fd fcea 	bl	801ae8c <disk_status>
 801d4b8:	4603      	mov	r3, r0
 801d4ba:	f003 0301 	and.w	r3, r3, #1
 801d4be:	2b00      	cmp	r3, #0
 801d4c0:	d101      	bne.n	801d4c6 <validate+0x4e>
			res = FR_OK;
 801d4c2:	2300      	movs	r3, #0
 801d4c4:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 801d4c6:	7bfb      	ldrb	r3, [r7, #15]
 801d4c8:	2b00      	cmp	r3, #0
 801d4ca:	d102      	bne.n	801d4d2 <validate+0x5a>
 801d4cc:	687b      	ldr	r3, [r7, #4]
 801d4ce:	681b      	ldr	r3, [r3, #0]
 801d4d0:	e000      	b.n	801d4d4 <validate+0x5c>
 801d4d2:	2300      	movs	r3, #0
 801d4d4:	683a      	ldr	r2, [r7, #0]
 801d4d6:	6013      	str	r3, [r2, #0]
	return res;
 801d4d8:	7bfb      	ldrb	r3, [r7, #15]
}
 801d4da:	4618      	mov	r0, r3
 801d4dc:	3710      	adds	r7, #16
 801d4de:	46bd      	mov	sp, r7
 801d4e0:	bd80      	pop	{r7, pc}
	...

0801d4e4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 801d4e4:	b580      	push	{r7, lr}
 801d4e6:	b088      	sub	sp, #32
 801d4e8:	af00      	add	r7, sp, #0
 801d4ea:	60f8      	str	r0, [r7, #12]
 801d4ec:	60b9      	str	r1, [r7, #8]
 801d4ee:	4613      	mov	r3, r2
 801d4f0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 801d4f2:	68bb      	ldr	r3, [r7, #8]
 801d4f4:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 801d4f6:	f107 0310 	add.w	r3, r7, #16
 801d4fa:	4618      	mov	r0, r3
 801d4fc:	f7ff fc9c 	bl	801ce38 <get_ldnumber>
 801d500:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 801d502:	69fb      	ldr	r3, [r7, #28]
 801d504:	2b00      	cmp	r3, #0
 801d506:	da01      	bge.n	801d50c <f_mount+0x28>
 801d508:	230b      	movs	r3, #11
 801d50a:	e02b      	b.n	801d564 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 801d50c:	4a17      	ldr	r2, [pc, #92]	@ (801d56c <f_mount+0x88>)
 801d50e:	69fb      	ldr	r3, [r7, #28]
 801d510:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801d514:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 801d516:	69bb      	ldr	r3, [r7, #24]
 801d518:	2b00      	cmp	r3, #0
 801d51a:	d005      	beq.n	801d528 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 801d51c:	69b8      	ldr	r0, [r7, #24]
 801d51e:	f7fd ff9d 	bl	801b45c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 801d522:	69bb      	ldr	r3, [r7, #24]
 801d524:	2200      	movs	r2, #0
 801d526:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 801d528:	68fb      	ldr	r3, [r7, #12]
 801d52a:	2b00      	cmp	r3, #0
 801d52c:	d002      	beq.n	801d534 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 801d52e:	68fb      	ldr	r3, [r7, #12]
 801d530:	2200      	movs	r2, #0
 801d532:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 801d534:	68fa      	ldr	r2, [r7, #12]
 801d536:	490d      	ldr	r1, [pc, #52]	@ (801d56c <f_mount+0x88>)
 801d538:	69fb      	ldr	r3, [r7, #28]
 801d53a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 801d53e:	68fb      	ldr	r3, [r7, #12]
 801d540:	2b00      	cmp	r3, #0
 801d542:	d002      	beq.n	801d54a <f_mount+0x66>
 801d544:	79fb      	ldrb	r3, [r7, #7]
 801d546:	2b01      	cmp	r3, #1
 801d548:	d001      	beq.n	801d54e <f_mount+0x6a>
 801d54a:	2300      	movs	r3, #0
 801d54c:	e00a      	b.n	801d564 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 801d54e:	f107 010c 	add.w	r1, r7, #12
 801d552:	f107 0308 	add.w	r3, r7, #8
 801d556:	2200      	movs	r2, #0
 801d558:	4618      	mov	r0, r3
 801d55a:	f7ff fd07 	bl	801cf6c <find_volume>
 801d55e:	4603      	mov	r3, r0
 801d560:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 801d562:	7dfb      	ldrb	r3, [r7, #23]
}
 801d564:	4618      	mov	r0, r3
 801d566:	3720      	adds	r7, #32
 801d568:	46bd      	mov	sp, r7
 801d56a:	bd80      	pop	{r7, pc}
 801d56c:	24000554 	.word	0x24000554

0801d570 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 801d570:	b580      	push	{r7, lr}
 801d572:	b09a      	sub	sp, #104	@ 0x68
 801d574:	af00      	add	r7, sp, #0
 801d576:	60f8      	str	r0, [r7, #12]
 801d578:	60b9      	str	r1, [r7, #8]
 801d57a:	4613      	mov	r3, r2
 801d57c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 801d57e:	68fb      	ldr	r3, [r7, #12]
 801d580:	2b00      	cmp	r3, #0
 801d582:	d101      	bne.n	801d588 <f_open+0x18>
 801d584:	2309      	movs	r3, #9
 801d586:	e1b7      	b.n	801d8f8 <f_open+0x388>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 801d588:	79fb      	ldrb	r3, [r7, #7]
 801d58a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801d58e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 801d590:	79fa      	ldrb	r2, [r7, #7]
 801d592:	f107 0114 	add.w	r1, r7, #20
 801d596:	f107 0308 	add.w	r3, r7, #8
 801d59a:	4618      	mov	r0, r3
 801d59c:	f7ff fce6 	bl	801cf6c <find_volume>
 801d5a0:	4603      	mov	r3, r0
 801d5a2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 801d5a6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801d5aa:	2b00      	cmp	r3, #0
 801d5ac:	f040 819b 	bne.w	801d8e6 <f_open+0x376>
		dj.obj.fs = fs;
 801d5b0:	697b      	ldr	r3, [r7, #20]
 801d5b2:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 801d5b4:	68ba      	ldr	r2, [r7, #8]
 801d5b6:	f107 0318 	add.w	r3, r7, #24
 801d5ba:	4611      	mov	r1, r2
 801d5bc:	4618      	mov	r0, r3
 801d5be:	f7ff fbc5 	bl	801cd4c <follow_path>
 801d5c2:	4603      	mov	r3, r0
 801d5c4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 801d5c8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801d5cc:	2b00      	cmp	r3, #0
 801d5ce:	d118      	bne.n	801d602 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 801d5d0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801d5d4:	b25b      	sxtb	r3, r3
 801d5d6:	2b00      	cmp	r3, #0
 801d5d8:	da03      	bge.n	801d5e2 <f_open+0x72>
				res = FR_INVALID_NAME;
 801d5da:	2306      	movs	r3, #6
 801d5dc:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 801d5e0:	e00f      	b.n	801d602 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801d5e2:	79fb      	ldrb	r3, [r7, #7]
 801d5e4:	2b01      	cmp	r3, #1
 801d5e6:	bf8c      	ite	hi
 801d5e8:	2301      	movhi	r3, #1
 801d5ea:	2300      	movls	r3, #0
 801d5ec:	b2db      	uxtb	r3, r3
 801d5ee:	461a      	mov	r2, r3
 801d5f0:	f107 0318 	add.w	r3, r7, #24
 801d5f4:	4611      	mov	r1, r2
 801d5f6:	4618      	mov	r0, r3
 801d5f8:	f7fd fde8 	bl	801b1cc <chk_lock>
 801d5fc:	4603      	mov	r3, r0
 801d5fe:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 801d602:	79fb      	ldrb	r3, [r7, #7]
 801d604:	f003 031c 	and.w	r3, r3, #28
 801d608:	2b00      	cmp	r3, #0
 801d60a:	d07f      	beq.n	801d70c <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 801d60c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801d610:	2b00      	cmp	r3, #0
 801d612:	d017      	beq.n	801d644 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 801d614:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801d618:	2b04      	cmp	r3, #4
 801d61a:	d10e      	bne.n	801d63a <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 801d61c:	f7fd fe32 	bl	801b284 <enq_lock>
 801d620:	4603      	mov	r3, r0
 801d622:	2b00      	cmp	r3, #0
 801d624:	d006      	beq.n	801d634 <f_open+0xc4>
 801d626:	f107 0318 	add.w	r3, r7, #24
 801d62a:	4618      	mov	r0, r3
 801d62c:	f7ff f894 	bl	801c758 <dir_register>
 801d630:	4603      	mov	r3, r0
 801d632:	e000      	b.n	801d636 <f_open+0xc6>
 801d634:	2312      	movs	r3, #18
 801d636:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 801d63a:	79fb      	ldrb	r3, [r7, #7]
 801d63c:	f043 0308 	orr.w	r3, r3, #8
 801d640:	71fb      	strb	r3, [r7, #7]
 801d642:	e010      	b.n	801d666 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 801d644:	7fbb      	ldrb	r3, [r7, #30]
 801d646:	f003 0311 	and.w	r3, r3, #17
 801d64a:	2b00      	cmp	r3, #0
 801d64c:	d003      	beq.n	801d656 <f_open+0xe6>
					res = FR_DENIED;
 801d64e:	2307      	movs	r3, #7
 801d650:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 801d654:	e007      	b.n	801d666 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 801d656:	79fb      	ldrb	r3, [r7, #7]
 801d658:	f003 0304 	and.w	r3, r3, #4
 801d65c:	2b00      	cmp	r3, #0
 801d65e:	d002      	beq.n	801d666 <f_open+0xf6>
 801d660:	2308      	movs	r3, #8
 801d662:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 801d666:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801d66a:	2b00      	cmp	r3, #0
 801d66c:	d168      	bne.n	801d740 <f_open+0x1d0>
 801d66e:	79fb      	ldrb	r3, [r7, #7]
 801d670:	f003 0308 	and.w	r3, r3, #8
 801d674:	2b00      	cmp	r3, #0
 801d676:	d063      	beq.n	801d740 <f_open+0x1d0>
				dw = GET_FATTIME();
 801d678:	f7fd fbaa 	bl	801add0 <get_fattime>
 801d67c:	65b8      	str	r0, [r7, #88]	@ 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 801d67e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d680:	330e      	adds	r3, #14
 801d682:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 801d684:	4618      	mov	r0, r3
 801d686:	f7fd fcf7 	bl	801b078 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 801d68a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d68c:	3316      	adds	r3, #22
 801d68e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 801d690:	4618      	mov	r0, r3
 801d692:	f7fd fcf1 	bl	801b078 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 801d696:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d698:	330b      	adds	r3, #11
 801d69a:	2220      	movs	r2, #32
 801d69c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 801d69e:	697b      	ldr	r3, [r7, #20]
 801d6a0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801d6a2:	4611      	mov	r1, r2
 801d6a4:	4618      	mov	r0, r3
 801d6a6:	f7fe fcc6 	bl	801c036 <ld_clust>
 801d6aa:	6578      	str	r0, [r7, #84]	@ 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 801d6ac:	697b      	ldr	r3, [r7, #20]
 801d6ae:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801d6b0:	2200      	movs	r2, #0
 801d6b2:	4618      	mov	r0, r3
 801d6b4:	f7fe fcde 	bl	801c074 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 801d6b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d6ba:	331c      	adds	r3, #28
 801d6bc:	2100      	movs	r1, #0
 801d6be:	4618      	mov	r0, r3
 801d6c0:	f7fd fcda 	bl	801b078 <st_dword>
					fs->wflag = 1;
 801d6c4:	697b      	ldr	r3, [r7, #20]
 801d6c6:	2201      	movs	r2, #1
 801d6c8:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 801d6ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801d6cc:	2b00      	cmp	r3, #0
 801d6ce:	d037      	beq.n	801d740 <f_open+0x1d0>
						dw = fs->winsect;
 801d6d0:	697b      	ldr	r3, [r7, #20]
 801d6d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801d6d4:	65bb      	str	r3, [r7, #88]	@ 0x58
						res = remove_chain(&dj.obj, cl, 0);
 801d6d6:	f107 0318 	add.w	r3, r7, #24
 801d6da:	2200      	movs	r2, #0
 801d6dc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801d6de:	4618      	mov	r0, r3
 801d6e0:	f7fe f9ce 	bl	801ba80 <remove_chain>
 801d6e4:	4603      	mov	r3, r0
 801d6e6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 801d6ea:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801d6ee:	2b00      	cmp	r3, #0
 801d6f0:	d126      	bne.n	801d740 <f_open+0x1d0>
							res = move_window(fs, dw);
 801d6f2:	697b      	ldr	r3, [r7, #20]
 801d6f4:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 801d6f6:	4618      	mov	r0, r3
 801d6f8:	f7fd ff18 	bl	801b52c <move_window>
 801d6fc:	4603      	mov	r3, r0
 801d6fe:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 801d702:	697b      	ldr	r3, [r7, #20]
 801d704:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801d706:	3a01      	subs	r2, #1
 801d708:	615a      	str	r2, [r3, #20]
 801d70a:	e019      	b.n	801d740 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 801d70c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801d710:	2b00      	cmp	r3, #0
 801d712:	d115      	bne.n	801d740 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 801d714:	7fbb      	ldrb	r3, [r7, #30]
 801d716:	f003 0310 	and.w	r3, r3, #16
 801d71a:	2b00      	cmp	r3, #0
 801d71c:	d003      	beq.n	801d726 <f_open+0x1b6>
					res = FR_NO_FILE;
 801d71e:	2304      	movs	r3, #4
 801d720:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 801d724:	e00c      	b.n	801d740 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 801d726:	79fb      	ldrb	r3, [r7, #7]
 801d728:	f003 0302 	and.w	r3, r3, #2
 801d72c:	2b00      	cmp	r3, #0
 801d72e:	d007      	beq.n	801d740 <f_open+0x1d0>
 801d730:	7fbb      	ldrb	r3, [r7, #30]
 801d732:	f003 0301 	and.w	r3, r3, #1
 801d736:	2b00      	cmp	r3, #0
 801d738:	d002      	beq.n	801d740 <f_open+0x1d0>
						res = FR_DENIED;
 801d73a:	2307      	movs	r3, #7
 801d73c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 801d740:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801d744:	2b00      	cmp	r3, #0
 801d746:	d126      	bne.n	801d796 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 801d748:	79fb      	ldrb	r3, [r7, #7]
 801d74a:	f003 0308 	and.w	r3, r3, #8
 801d74e:	2b00      	cmp	r3, #0
 801d750:	d003      	beq.n	801d75a <f_open+0x1ea>
				mode |= FA_MODIFIED;
 801d752:	79fb      	ldrb	r3, [r7, #7]
 801d754:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801d758:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 801d75a:	697b      	ldr	r3, [r7, #20]
 801d75c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801d75e:	68fb      	ldr	r3, [r7, #12]
 801d760:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 801d762:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801d764:	68fb      	ldr	r3, [r7, #12]
 801d766:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801d768:	79fb      	ldrb	r3, [r7, #7]
 801d76a:	2b01      	cmp	r3, #1
 801d76c:	bf8c      	ite	hi
 801d76e:	2301      	movhi	r3, #1
 801d770:	2300      	movls	r3, #0
 801d772:	b2db      	uxtb	r3, r3
 801d774:	461a      	mov	r2, r3
 801d776:	f107 0318 	add.w	r3, r7, #24
 801d77a:	4611      	mov	r1, r2
 801d77c:	4618      	mov	r0, r3
 801d77e:	f7fd fda3 	bl	801b2c8 <inc_lock>
 801d782:	4602      	mov	r2, r0
 801d784:	68fb      	ldr	r3, [r7, #12]
 801d786:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 801d788:	68fb      	ldr	r3, [r7, #12]
 801d78a:	691b      	ldr	r3, [r3, #16]
 801d78c:	2b00      	cmp	r3, #0
 801d78e:	d102      	bne.n	801d796 <f_open+0x226>
 801d790:	2302      	movs	r3, #2
 801d792:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 801d796:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801d79a:	2b00      	cmp	r3, #0
 801d79c:	f040 80a3 	bne.w	801d8e6 <f_open+0x376>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 801d7a0:	697b      	ldr	r3, [r7, #20]
 801d7a2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801d7a4:	4611      	mov	r1, r2
 801d7a6:	4618      	mov	r0, r3
 801d7a8:	f7fe fc45 	bl	801c036 <ld_clust>
 801d7ac:	4602      	mov	r2, r0
 801d7ae:	68fb      	ldr	r3, [r7, #12]
 801d7b0:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 801d7b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d7b4:	331c      	adds	r3, #28
 801d7b6:	4618      	mov	r0, r3
 801d7b8:	f7fd fc20 	bl	801affc <ld_dword>
 801d7bc:	4602      	mov	r2, r0
 801d7be:	68fb      	ldr	r3, [r7, #12]
 801d7c0:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 801d7c2:	68fb      	ldr	r3, [r7, #12]
 801d7c4:	2200      	movs	r2, #0
 801d7c6:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 801d7c8:	697a      	ldr	r2, [r7, #20]
 801d7ca:	68fb      	ldr	r3, [r7, #12]
 801d7cc:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 801d7ce:	697b      	ldr	r3, [r7, #20]
 801d7d0:	88da      	ldrh	r2, [r3, #6]
 801d7d2:	68fb      	ldr	r3, [r7, #12]
 801d7d4:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 801d7d6:	68fb      	ldr	r3, [r7, #12]
 801d7d8:	79fa      	ldrb	r2, [r7, #7]
 801d7da:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 801d7dc:	68fb      	ldr	r3, [r7, #12]
 801d7de:	2200      	movs	r2, #0
 801d7e0:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 801d7e2:	68fb      	ldr	r3, [r7, #12]
 801d7e4:	2200      	movs	r2, #0
 801d7e6:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 801d7e8:	68fb      	ldr	r3, [r7, #12]
 801d7ea:	2200      	movs	r2, #0
 801d7ec:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 801d7ee:	68fb      	ldr	r3, [r7, #12]
 801d7f0:	3330      	adds	r3, #48	@ 0x30
 801d7f2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 801d7f6:	2100      	movs	r1, #0
 801d7f8:	4618      	mov	r0, r3
 801d7fa:	f7fd fc8a 	bl	801b112 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 801d7fe:	79fb      	ldrb	r3, [r7, #7]
 801d800:	f003 0320 	and.w	r3, r3, #32
 801d804:	2b00      	cmp	r3, #0
 801d806:	d06e      	beq.n	801d8e6 <f_open+0x376>
 801d808:	68fb      	ldr	r3, [r7, #12]
 801d80a:	68db      	ldr	r3, [r3, #12]
 801d80c:	2b00      	cmp	r3, #0
 801d80e:	d06a      	beq.n	801d8e6 <f_open+0x376>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 801d810:	68fb      	ldr	r3, [r7, #12]
 801d812:	68da      	ldr	r2, [r3, #12]
 801d814:	68fb      	ldr	r3, [r7, #12]
 801d816:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 801d818:	697b      	ldr	r3, [r7, #20]
 801d81a:	895b      	ldrh	r3, [r3, #10]
 801d81c:	461a      	mov	r2, r3
 801d81e:	697b      	ldr	r3, [r7, #20]
 801d820:	899b      	ldrh	r3, [r3, #12]
 801d822:	fb02 f303 	mul.w	r3, r2, r3
 801d826:	653b      	str	r3, [r7, #80]	@ 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 801d828:	68fb      	ldr	r3, [r7, #12]
 801d82a:	689b      	ldr	r3, [r3, #8]
 801d82c:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801d82e:	68fb      	ldr	r3, [r7, #12]
 801d830:	68db      	ldr	r3, [r3, #12]
 801d832:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801d834:	e016      	b.n	801d864 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 801d836:	68fb      	ldr	r3, [r7, #12]
 801d838:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 801d83a:	4618      	mov	r0, r3
 801d83c:	f7fd ff33 	bl	801b6a6 <get_fat>
 801d840:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 801d842:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801d844:	2b01      	cmp	r3, #1
 801d846:	d802      	bhi.n	801d84e <f_open+0x2de>
 801d848:	2302      	movs	r3, #2
 801d84a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 801d84e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801d850:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d854:	d102      	bne.n	801d85c <f_open+0x2ec>
 801d856:	2301      	movs	r3, #1
 801d858:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801d85c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801d85e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801d860:	1ad3      	subs	r3, r2, r3
 801d862:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801d864:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801d868:	2b00      	cmp	r3, #0
 801d86a:	d103      	bne.n	801d874 <f_open+0x304>
 801d86c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801d86e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801d870:	429a      	cmp	r2, r3
 801d872:	d8e0      	bhi.n	801d836 <f_open+0x2c6>
				}
				fp->clust = clst;
 801d874:	68fb      	ldr	r3, [r7, #12]
 801d876:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 801d878:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 801d87a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801d87e:	2b00      	cmp	r3, #0
 801d880:	d131      	bne.n	801d8e6 <f_open+0x376>
 801d882:	697b      	ldr	r3, [r7, #20]
 801d884:	899b      	ldrh	r3, [r3, #12]
 801d886:	461a      	mov	r2, r3
 801d888:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801d88a:	fbb3 f1f2 	udiv	r1, r3, r2
 801d88e:	fb01 f202 	mul.w	r2, r1, r2
 801d892:	1a9b      	subs	r3, r3, r2
 801d894:	2b00      	cmp	r3, #0
 801d896:	d026      	beq.n	801d8e6 <f_open+0x376>
					if ((sc = clust2sect(fs, clst)) == 0) {
 801d898:	697b      	ldr	r3, [r7, #20]
 801d89a:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 801d89c:	4618      	mov	r0, r3
 801d89e:	f7fd fee3 	bl	801b668 <clust2sect>
 801d8a2:	64f8      	str	r0, [r7, #76]	@ 0x4c
 801d8a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801d8a6:	2b00      	cmp	r3, #0
 801d8a8:	d103      	bne.n	801d8b2 <f_open+0x342>
						res = FR_INT_ERR;
 801d8aa:	2302      	movs	r3, #2
 801d8ac:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 801d8b0:	e019      	b.n	801d8e6 <f_open+0x376>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 801d8b2:	697b      	ldr	r3, [r7, #20]
 801d8b4:	899b      	ldrh	r3, [r3, #12]
 801d8b6:	461a      	mov	r2, r3
 801d8b8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801d8ba:	fbb3 f2f2 	udiv	r2, r3, r2
 801d8be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801d8c0:	441a      	add	r2, r3
 801d8c2:	68fb      	ldr	r3, [r7, #12]
 801d8c4:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 801d8c6:	697b      	ldr	r3, [r7, #20]
 801d8c8:	7858      	ldrb	r0, [r3, #1]
 801d8ca:	68fb      	ldr	r3, [r7, #12]
 801d8cc:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801d8d0:	68fb      	ldr	r3, [r7, #12]
 801d8d2:	6a1a      	ldr	r2, [r3, #32]
 801d8d4:	2301      	movs	r3, #1
 801d8d6:	f7fd fb1b 	bl	801af10 <disk_read>
 801d8da:	4603      	mov	r3, r0
 801d8dc:	2b00      	cmp	r3, #0
 801d8de:	d002      	beq.n	801d8e6 <f_open+0x376>
 801d8e0:	2301      	movs	r3, #1
 801d8e2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 801d8e6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801d8ea:	2b00      	cmp	r3, #0
 801d8ec:	d002      	beq.n	801d8f4 <f_open+0x384>
 801d8ee:	68fb      	ldr	r3, [r7, #12]
 801d8f0:	2200      	movs	r2, #0
 801d8f2:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 801d8f4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 801d8f8:	4618      	mov	r0, r3
 801d8fa:	3768      	adds	r7, #104	@ 0x68
 801d8fc:	46bd      	mov	sp, r7
 801d8fe:	bd80      	pop	{r7, pc}

0801d900 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 801d900:	b580      	push	{r7, lr}
 801d902:	b08c      	sub	sp, #48	@ 0x30
 801d904:	af00      	add	r7, sp, #0
 801d906:	60f8      	str	r0, [r7, #12]
 801d908:	60b9      	str	r1, [r7, #8]
 801d90a:	607a      	str	r2, [r7, #4]
 801d90c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 801d90e:	68bb      	ldr	r3, [r7, #8]
 801d910:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 801d912:	683b      	ldr	r3, [r7, #0]
 801d914:	2200      	movs	r2, #0
 801d916:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 801d918:	68fb      	ldr	r3, [r7, #12]
 801d91a:	f107 0210 	add.w	r2, r7, #16
 801d91e:	4611      	mov	r1, r2
 801d920:	4618      	mov	r0, r3
 801d922:	f7ff fda9 	bl	801d478 <validate>
 801d926:	4603      	mov	r3, r0
 801d928:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 801d92c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801d930:	2b00      	cmp	r3, #0
 801d932:	d107      	bne.n	801d944 <f_write+0x44>
 801d934:	68fb      	ldr	r3, [r7, #12]
 801d936:	7d5b      	ldrb	r3, [r3, #21]
 801d938:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 801d93c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801d940:	2b00      	cmp	r3, #0
 801d942:	d002      	beq.n	801d94a <f_write+0x4a>
 801d944:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801d948:	e16a      	b.n	801dc20 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 801d94a:	68fb      	ldr	r3, [r7, #12]
 801d94c:	7d1b      	ldrb	r3, [r3, #20]
 801d94e:	f003 0302 	and.w	r3, r3, #2
 801d952:	2b00      	cmp	r3, #0
 801d954:	d101      	bne.n	801d95a <f_write+0x5a>
 801d956:	2307      	movs	r3, #7
 801d958:	e162      	b.n	801dc20 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 801d95a:	68fb      	ldr	r3, [r7, #12]
 801d95c:	699a      	ldr	r2, [r3, #24]
 801d95e:	687b      	ldr	r3, [r7, #4]
 801d960:	441a      	add	r2, r3
 801d962:	68fb      	ldr	r3, [r7, #12]
 801d964:	699b      	ldr	r3, [r3, #24]
 801d966:	429a      	cmp	r2, r3
 801d968:	f080 814c 	bcs.w	801dc04 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 801d96c:	68fb      	ldr	r3, [r7, #12]
 801d96e:	699b      	ldr	r3, [r3, #24]
 801d970:	43db      	mvns	r3, r3
 801d972:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 801d974:	e146      	b.n	801dc04 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 801d976:	68fb      	ldr	r3, [r7, #12]
 801d978:	699b      	ldr	r3, [r3, #24]
 801d97a:	693a      	ldr	r2, [r7, #16]
 801d97c:	8992      	ldrh	r2, [r2, #12]
 801d97e:	fbb3 f1f2 	udiv	r1, r3, r2
 801d982:	fb01 f202 	mul.w	r2, r1, r2
 801d986:	1a9b      	subs	r3, r3, r2
 801d988:	2b00      	cmp	r3, #0
 801d98a:	f040 80f1 	bne.w	801db70 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 801d98e:	68fb      	ldr	r3, [r7, #12]
 801d990:	699b      	ldr	r3, [r3, #24]
 801d992:	693a      	ldr	r2, [r7, #16]
 801d994:	8992      	ldrh	r2, [r2, #12]
 801d996:	fbb3 f3f2 	udiv	r3, r3, r2
 801d99a:	693a      	ldr	r2, [r7, #16]
 801d99c:	8952      	ldrh	r2, [r2, #10]
 801d99e:	3a01      	subs	r2, #1
 801d9a0:	4013      	ands	r3, r2
 801d9a2:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 801d9a4:	69bb      	ldr	r3, [r7, #24]
 801d9a6:	2b00      	cmp	r3, #0
 801d9a8:	d143      	bne.n	801da32 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 801d9aa:	68fb      	ldr	r3, [r7, #12]
 801d9ac:	699b      	ldr	r3, [r3, #24]
 801d9ae:	2b00      	cmp	r3, #0
 801d9b0:	d10c      	bne.n	801d9cc <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 801d9b2:	68fb      	ldr	r3, [r7, #12]
 801d9b4:	689b      	ldr	r3, [r3, #8]
 801d9b6:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 801d9b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d9ba:	2b00      	cmp	r3, #0
 801d9bc:	d11a      	bne.n	801d9f4 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 801d9be:	68fb      	ldr	r3, [r7, #12]
 801d9c0:	2100      	movs	r1, #0
 801d9c2:	4618      	mov	r0, r3
 801d9c4:	f7fe f8c1 	bl	801bb4a <create_chain>
 801d9c8:	62b8      	str	r0, [r7, #40]	@ 0x28
 801d9ca:	e013      	b.n	801d9f4 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801d9cc:	68fb      	ldr	r3, [r7, #12]
 801d9ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d9d0:	2b00      	cmp	r3, #0
 801d9d2:	d007      	beq.n	801d9e4 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 801d9d4:	68fb      	ldr	r3, [r7, #12]
 801d9d6:	699b      	ldr	r3, [r3, #24]
 801d9d8:	4619      	mov	r1, r3
 801d9da:	68f8      	ldr	r0, [r7, #12]
 801d9dc:	f7fe f94d 	bl	801bc7a <clmt_clust>
 801d9e0:	62b8      	str	r0, [r7, #40]	@ 0x28
 801d9e2:	e007      	b.n	801d9f4 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 801d9e4:	68fa      	ldr	r2, [r7, #12]
 801d9e6:	68fb      	ldr	r3, [r7, #12]
 801d9e8:	69db      	ldr	r3, [r3, #28]
 801d9ea:	4619      	mov	r1, r3
 801d9ec:	4610      	mov	r0, r2
 801d9ee:	f7fe f8ac 	bl	801bb4a <create_chain>
 801d9f2:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801d9f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d9f6:	2b00      	cmp	r3, #0
 801d9f8:	f000 8109 	beq.w	801dc0e <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 801d9fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d9fe:	2b01      	cmp	r3, #1
 801da00:	d104      	bne.n	801da0c <f_write+0x10c>
 801da02:	68fb      	ldr	r3, [r7, #12]
 801da04:	2202      	movs	r2, #2
 801da06:	755a      	strb	r2, [r3, #21]
 801da08:	2302      	movs	r3, #2
 801da0a:	e109      	b.n	801dc20 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801da0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801da0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 801da12:	d104      	bne.n	801da1e <f_write+0x11e>
 801da14:	68fb      	ldr	r3, [r7, #12]
 801da16:	2201      	movs	r2, #1
 801da18:	755a      	strb	r2, [r3, #21]
 801da1a:	2301      	movs	r3, #1
 801da1c:	e100      	b.n	801dc20 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 801da1e:	68fb      	ldr	r3, [r7, #12]
 801da20:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801da22:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 801da24:	68fb      	ldr	r3, [r7, #12]
 801da26:	689b      	ldr	r3, [r3, #8]
 801da28:	2b00      	cmp	r3, #0
 801da2a:	d102      	bne.n	801da32 <f_write+0x132>
 801da2c:	68fb      	ldr	r3, [r7, #12]
 801da2e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801da30:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 801da32:	68fb      	ldr	r3, [r7, #12]
 801da34:	7d1b      	ldrb	r3, [r3, #20]
 801da36:	b25b      	sxtb	r3, r3
 801da38:	2b00      	cmp	r3, #0
 801da3a:	da18      	bge.n	801da6e <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801da3c:	693b      	ldr	r3, [r7, #16]
 801da3e:	7858      	ldrb	r0, [r3, #1]
 801da40:	68fb      	ldr	r3, [r7, #12]
 801da42:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801da46:	68fb      	ldr	r3, [r7, #12]
 801da48:	6a1a      	ldr	r2, [r3, #32]
 801da4a:	2301      	movs	r3, #1
 801da4c:	f7fd fa80 	bl	801af50 <disk_write>
 801da50:	4603      	mov	r3, r0
 801da52:	2b00      	cmp	r3, #0
 801da54:	d004      	beq.n	801da60 <f_write+0x160>
 801da56:	68fb      	ldr	r3, [r7, #12]
 801da58:	2201      	movs	r2, #1
 801da5a:	755a      	strb	r2, [r3, #21]
 801da5c:	2301      	movs	r3, #1
 801da5e:	e0df      	b.n	801dc20 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 801da60:	68fb      	ldr	r3, [r7, #12]
 801da62:	7d1b      	ldrb	r3, [r3, #20]
 801da64:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801da68:	b2da      	uxtb	r2, r3
 801da6a:	68fb      	ldr	r3, [r7, #12]
 801da6c:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 801da6e:	693a      	ldr	r2, [r7, #16]
 801da70:	68fb      	ldr	r3, [r7, #12]
 801da72:	69db      	ldr	r3, [r3, #28]
 801da74:	4619      	mov	r1, r3
 801da76:	4610      	mov	r0, r2
 801da78:	f7fd fdf6 	bl	801b668 <clust2sect>
 801da7c:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 801da7e:	697b      	ldr	r3, [r7, #20]
 801da80:	2b00      	cmp	r3, #0
 801da82:	d104      	bne.n	801da8e <f_write+0x18e>
 801da84:	68fb      	ldr	r3, [r7, #12]
 801da86:	2202      	movs	r2, #2
 801da88:	755a      	strb	r2, [r3, #21]
 801da8a:	2302      	movs	r3, #2
 801da8c:	e0c8      	b.n	801dc20 <f_write+0x320>
			sect += csect;
 801da8e:	697a      	ldr	r2, [r7, #20]
 801da90:	69bb      	ldr	r3, [r7, #24]
 801da92:	4413      	add	r3, r2
 801da94:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 801da96:	693b      	ldr	r3, [r7, #16]
 801da98:	899b      	ldrh	r3, [r3, #12]
 801da9a:	461a      	mov	r2, r3
 801da9c:	687b      	ldr	r3, [r7, #4]
 801da9e:	fbb3 f3f2 	udiv	r3, r3, r2
 801daa2:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 801daa4:	6a3b      	ldr	r3, [r7, #32]
 801daa6:	2b00      	cmp	r3, #0
 801daa8:	d043      	beq.n	801db32 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 801daaa:	69ba      	ldr	r2, [r7, #24]
 801daac:	6a3b      	ldr	r3, [r7, #32]
 801daae:	4413      	add	r3, r2
 801dab0:	693a      	ldr	r2, [r7, #16]
 801dab2:	8952      	ldrh	r2, [r2, #10]
 801dab4:	4293      	cmp	r3, r2
 801dab6:	d905      	bls.n	801dac4 <f_write+0x1c4>
					cc = fs->csize - csect;
 801dab8:	693b      	ldr	r3, [r7, #16]
 801daba:	895b      	ldrh	r3, [r3, #10]
 801dabc:	461a      	mov	r2, r3
 801dabe:	69bb      	ldr	r3, [r7, #24]
 801dac0:	1ad3      	subs	r3, r2, r3
 801dac2:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801dac4:	693b      	ldr	r3, [r7, #16]
 801dac6:	7858      	ldrb	r0, [r3, #1]
 801dac8:	6a3b      	ldr	r3, [r7, #32]
 801daca:	697a      	ldr	r2, [r7, #20]
 801dacc:	69f9      	ldr	r1, [r7, #28]
 801dace:	f7fd fa3f 	bl	801af50 <disk_write>
 801dad2:	4603      	mov	r3, r0
 801dad4:	2b00      	cmp	r3, #0
 801dad6:	d004      	beq.n	801dae2 <f_write+0x1e2>
 801dad8:	68fb      	ldr	r3, [r7, #12]
 801dada:	2201      	movs	r2, #1
 801dadc:	755a      	strb	r2, [r3, #21]
 801dade:	2301      	movs	r3, #1
 801dae0:	e09e      	b.n	801dc20 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 801dae2:	68fb      	ldr	r3, [r7, #12]
 801dae4:	6a1a      	ldr	r2, [r3, #32]
 801dae6:	697b      	ldr	r3, [r7, #20]
 801dae8:	1ad3      	subs	r3, r2, r3
 801daea:	6a3a      	ldr	r2, [r7, #32]
 801daec:	429a      	cmp	r2, r3
 801daee:	d918      	bls.n	801db22 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 801daf0:	68fb      	ldr	r3, [r7, #12]
 801daf2:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 801daf6:	68fb      	ldr	r3, [r7, #12]
 801daf8:	6a1a      	ldr	r2, [r3, #32]
 801dafa:	697b      	ldr	r3, [r7, #20]
 801dafc:	1ad3      	subs	r3, r2, r3
 801dafe:	693a      	ldr	r2, [r7, #16]
 801db00:	8992      	ldrh	r2, [r2, #12]
 801db02:	fb02 f303 	mul.w	r3, r2, r3
 801db06:	69fa      	ldr	r2, [r7, #28]
 801db08:	18d1      	adds	r1, r2, r3
 801db0a:	693b      	ldr	r3, [r7, #16]
 801db0c:	899b      	ldrh	r3, [r3, #12]
 801db0e:	461a      	mov	r2, r3
 801db10:	f7fd fade 	bl	801b0d0 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 801db14:	68fb      	ldr	r3, [r7, #12]
 801db16:	7d1b      	ldrb	r3, [r3, #20]
 801db18:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801db1c:	b2da      	uxtb	r2, r3
 801db1e:	68fb      	ldr	r3, [r7, #12]
 801db20:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 801db22:	693b      	ldr	r3, [r7, #16]
 801db24:	899b      	ldrh	r3, [r3, #12]
 801db26:	461a      	mov	r2, r3
 801db28:	6a3b      	ldr	r3, [r7, #32]
 801db2a:	fb02 f303 	mul.w	r3, r2, r3
 801db2e:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 801db30:	e04b      	b.n	801dbca <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801db32:	68fb      	ldr	r3, [r7, #12]
 801db34:	6a1b      	ldr	r3, [r3, #32]
 801db36:	697a      	ldr	r2, [r7, #20]
 801db38:	429a      	cmp	r2, r3
 801db3a:	d016      	beq.n	801db6a <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 801db3c:	68fb      	ldr	r3, [r7, #12]
 801db3e:	699a      	ldr	r2, [r3, #24]
 801db40:	68fb      	ldr	r3, [r7, #12]
 801db42:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801db44:	429a      	cmp	r2, r3
 801db46:	d210      	bcs.n	801db6a <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 801db48:	693b      	ldr	r3, [r7, #16]
 801db4a:	7858      	ldrb	r0, [r3, #1]
 801db4c:	68fb      	ldr	r3, [r7, #12]
 801db4e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801db52:	2301      	movs	r3, #1
 801db54:	697a      	ldr	r2, [r7, #20]
 801db56:	f7fd f9db 	bl	801af10 <disk_read>
 801db5a:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 801db5c:	2b00      	cmp	r3, #0
 801db5e:	d004      	beq.n	801db6a <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 801db60:	68fb      	ldr	r3, [r7, #12]
 801db62:	2201      	movs	r2, #1
 801db64:	755a      	strb	r2, [r3, #21]
 801db66:	2301      	movs	r3, #1
 801db68:	e05a      	b.n	801dc20 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 801db6a:	68fb      	ldr	r3, [r7, #12]
 801db6c:	697a      	ldr	r2, [r7, #20]
 801db6e:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 801db70:	693b      	ldr	r3, [r7, #16]
 801db72:	899b      	ldrh	r3, [r3, #12]
 801db74:	4618      	mov	r0, r3
 801db76:	68fb      	ldr	r3, [r7, #12]
 801db78:	699b      	ldr	r3, [r3, #24]
 801db7a:	693a      	ldr	r2, [r7, #16]
 801db7c:	8992      	ldrh	r2, [r2, #12]
 801db7e:	fbb3 f1f2 	udiv	r1, r3, r2
 801db82:	fb01 f202 	mul.w	r2, r1, r2
 801db86:	1a9b      	subs	r3, r3, r2
 801db88:	1ac3      	subs	r3, r0, r3
 801db8a:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 801db8c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801db8e:	687b      	ldr	r3, [r7, #4]
 801db90:	429a      	cmp	r2, r3
 801db92:	d901      	bls.n	801db98 <f_write+0x298>
 801db94:	687b      	ldr	r3, [r7, #4]
 801db96:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 801db98:	68fb      	ldr	r3, [r7, #12]
 801db9a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801db9e:	68fb      	ldr	r3, [r7, #12]
 801dba0:	699b      	ldr	r3, [r3, #24]
 801dba2:	693a      	ldr	r2, [r7, #16]
 801dba4:	8992      	ldrh	r2, [r2, #12]
 801dba6:	fbb3 f0f2 	udiv	r0, r3, r2
 801dbaa:	fb00 f202 	mul.w	r2, r0, r2
 801dbae:	1a9b      	subs	r3, r3, r2
 801dbb0:	440b      	add	r3, r1
 801dbb2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801dbb4:	69f9      	ldr	r1, [r7, #28]
 801dbb6:	4618      	mov	r0, r3
 801dbb8:	f7fd fa8a 	bl	801b0d0 <mem_cpy>
		fp->flag |= FA_DIRTY;
 801dbbc:	68fb      	ldr	r3, [r7, #12]
 801dbbe:	7d1b      	ldrb	r3, [r3, #20]
 801dbc0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 801dbc4:	b2da      	uxtb	r2, r3
 801dbc6:	68fb      	ldr	r3, [r7, #12]
 801dbc8:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 801dbca:	69fa      	ldr	r2, [r7, #28]
 801dbcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801dbce:	4413      	add	r3, r2
 801dbd0:	61fb      	str	r3, [r7, #28]
 801dbd2:	68fb      	ldr	r3, [r7, #12]
 801dbd4:	699a      	ldr	r2, [r3, #24]
 801dbd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801dbd8:	441a      	add	r2, r3
 801dbda:	68fb      	ldr	r3, [r7, #12]
 801dbdc:	619a      	str	r2, [r3, #24]
 801dbde:	68fb      	ldr	r3, [r7, #12]
 801dbe0:	68da      	ldr	r2, [r3, #12]
 801dbe2:	68fb      	ldr	r3, [r7, #12]
 801dbe4:	699b      	ldr	r3, [r3, #24]
 801dbe6:	429a      	cmp	r2, r3
 801dbe8:	bf38      	it	cc
 801dbea:	461a      	movcc	r2, r3
 801dbec:	68fb      	ldr	r3, [r7, #12]
 801dbee:	60da      	str	r2, [r3, #12]
 801dbf0:	683b      	ldr	r3, [r7, #0]
 801dbf2:	681a      	ldr	r2, [r3, #0]
 801dbf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801dbf6:	441a      	add	r2, r3
 801dbf8:	683b      	ldr	r3, [r7, #0]
 801dbfa:	601a      	str	r2, [r3, #0]
 801dbfc:	687a      	ldr	r2, [r7, #4]
 801dbfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801dc00:	1ad3      	subs	r3, r2, r3
 801dc02:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 801dc04:	687b      	ldr	r3, [r7, #4]
 801dc06:	2b00      	cmp	r3, #0
 801dc08:	f47f aeb5 	bne.w	801d976 <f_write+0x76>
 801dc0c:	e000      	b.n	801dc10 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801dc0e:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 801dc10:	68fb      	ldr	r3, [r7, #12]
 801dc12:	7d1b      	ldrb	r3, [r3, #20]
 801dc14:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801dc18:	b2da      	uxtb	r2, r3
 801dc1a:	68fb      	ldr	r3, [r7, #12]
 801dc1c:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 801dc1e:	2300      	movs	r3, #0
}
 801dc20:	4618      	mov	r0, r3
 801dc22:	3730      	adds	r7, #48	@ 0x30
 801dc24:	46bd      	mov	sp, r7
 801dc26:	bd80      	pop	{r7, pc}

0801dc28 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 801dc28:	b580      	push	{r7, lr}
 801dc2a:	b086      	sub	sp, #24
 801dc2c:	af00      	add	r7, sp, #0
 801dc2e:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 801dc30:	687b      	ldr	r3, [r7, #4]
 801dc32:	f107 0208 	add.w	r2, r7, #8
 801dc36:	4611      	mov	r1, r2
 801dc38:	4618      	mov	r0, r3
 801dc3a:	f7ff fc1d 	bl	801d478 <validate>
 801dc3e:	4603      	mov	r3, r0
 801dc40:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801dc42:	7dfb      	ldrb	r3, [r7, #23]
 801dc44:	2b00      	cmp	r3, #0
 801dc46:	d168      	bne.n	801dd1a <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 801dc48:	687b      	ldr	r3, [r7, #4]
 801dc4a:	7d1b      	ldrb	r3, [r3, #20]
 801dc4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801dc50:	2b00      	cmp	r3, #0
 801dc52:	d062      	beq.n	801dd1a <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 801dc54:	687b      	ldr	r3, [r7, #4]
 801dc56:	7d1b      	ldrb	r3, [r3, #20]
 801dc58:	b25b      	sxtb	r3, r3
 801dc5a:	2b00      	cmp	r3, #0
 801dc5c:	da15      	bge.n	801dc8a <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 801dc5e:	68bb      	ldr	r3, [r7, #8]
 801dc60:	7858      	ldrb	r0, [r3, #1]
 801dc62:	687b      	ldr	r3, [r7, #4]
 801dc64:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801dc68:	687b      	ldr	r3, [r7, #4]
 801dc6a:	6a1a      	ldr	r2, [r3, #32]
 801dc6c:	2301      	movs	r3, #1
 801dc6e:	f7fd f96f 	bl	801af50 <disk_write>
 801dc72:	4603      	mov	r3, r0
 801dc74:	2b00      	cmp	r3, #0
 801dc76:	d001      	beq.n	801dc7c <f_sync+0x54>
 801dc78:	2301      	movs	r3, #1
 801dc7a:	e04f      	b.n	801dd1c <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 801dc7c:	687b      	ldr	r3, [r7, #4]
 801dc7e:	7d1b      	ldrb	r3, [r3, #20]
 801dc80:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801dc84:	b2da      	uxtb	r2, r3
 801dc86:	687b      	ldr	r3, [r7, #4]
 801dc88:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 801dc8a:	f7fd f8a1 	bl	801add0 <get_fattime>
 801dc8e:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 801dc90:	68ba      	ldr	r2, [r7, #8]
 801dc92:	687b      	ldr	r3, [r7, #4]
 801dc94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801dc96:	4619      	mov	r1, r3
 801dc98:	4610      	mov	r0, r2
 801dc9a:	f7fd fc47 	bl	801b52c <move_window>
 801dc9e:	4603      	mov	r3, r0
 801dca0:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 801dca2:	7dfb      	ldrb	r3, [r7, #23]
 801dca4:	2b00      	cmp	r3, #0
 801dca6:	d138      	bne.n	801dd1a <f_sync+0xf2>
					dir = fp->dir_ptr;
 801dca8:	687b      	ldr	r3, [r7, #4]
 801dcaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801dcac:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 801dcae:	68fb      	ldr	r3, [r7, #12]
 801dcb0:	330b      	adds	r3, #11
 801dcb2:	781a      	ldrb	r2, [r3, #0]
 801dcb4:	68fb      	ldr	r3, [r7, #12]
 801dcb6:	330b      	adds	r3, #11
 801dcb8:	f042 0220 	orr.w	r2, r2, #32
 801dcbc:	b2d2      	uxtb	r2, r2
 801dcbe:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 801dcc0:	687b      	ldr	r3, [r7, #4]
 801dcc2:	6818      	ldr	r0, [r3, #0]
 801dcc4:	687b      	ldr	r3, [r7, #4]
 801dcc6:	689b      	ldr	r3, [r3, #8]
 801dcc8:	461a      	mov	r2, r3
 801dcca:	68f9      	ldr	r1, [r7, #12]
 801dccc:	f7fe f9d2 	bl	801c074 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 801dcd0:	68fb      	ldr	r3, [r7, #12]
 801dcd2:	f103 021c 	add.w	r2, r3, #28
 801dcd6:	687b      	ldr	r3, [r7, #4]
 801dcd8:	68db      	ldr	r3, [r3, #12]
 801dcda:	4619      	mov	r1, r3
 801dcdc:	4610      	mov	r0, r2
 801dcde:	f7fd f9cb 	bl	801b078 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 801dce2:	68fb      	ldr	r3, [r7, #12]
 801dce4:	3316      	adds	r3, #22
 801dce6:	6939      	ldr	r1, [r7, #16]
 801dce8:	4618      	mov	r0, r3
 801dcea:	f7fd f9c5 	bl	801b078 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 801dcee:	68fb      	ldr	r3, [r7, #12]
 801dcf0:	3312      	adds	r3, #18
 801dcf2:	2100      	movs	r1, #0
 801dcf4:	4618      	mov	r0, r3
 801dcf6:	f7fd f9a4 	bl	801b042 <st_word>
					fs->wflag = 1;
 801dcfa:	68bb      	ldr	r3, [r7, #8]
 801dcfc:	2201      	movs	r2, #1
 801dcfe:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 801dd00:	68bb      	ldr	r3, [r7, #8]
 801dd02:	4618      	mov	r0, r3
 801dd04:	f7fd fc40 	bl	801b588 <sync_fs>
 801dd08:	4603      	mov	r3, r0
 801dd0a:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 801dd0c:	687b      	ldr	r3, [r7, #4]
 801dd0e:	7d1b      	ldrb	r3, [r3, #20]
 801dd10:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801dd14:	b2da      	uxtb	r2, r3
 801dd16:	687b      	ldr	r3, [r7, #4]
 801dd18:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 801dd1a:	7dfb      	ldrb	r3, [r7, #23]
}
 801dd1c:	4618      	mov	r0, r3
 801dd1e:	3718      	adds	r7, #24
 801dd20:	46bd      	mov	sp, r7
 801dd22:	bd80      	pop	{r7, pc}

0801dd24 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 801dd24:	b580      	push	{r7, lr}
 801dd26:	b084      	sub	sp, #16
 801dd28:	af00      	add	r7, sp, #0
 801dd2a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 801dd2c:	6878      	ldr	r0, [r7, #4]
 801dd2e:	f7ff ff7b 	bl	801dc28 <f_sync>
 801dd32:	4603      	mov	r3, r0
 801dd34:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 801dd36:	7bfb      	ldrb	r3, [r7, #15]
 801dd38:	2b00      	cmp	r3, #0
 801dd3a:	d118      	bne.n	801dd6e <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 801dd3c:	687b      	ldr	r3, [r7, #4]
 801dd3e:	f107 0208 	add.w	r2, r7, #8
 801dd42:	4611      	mov	r1, r2
 801dd44:	4618      	mov	r0, r3
 801dd46:	f7ff fb97 	bl	801d478 <validate>
 801dd4a:	4603      	mov	r3, r0
 801dd4c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 801dd4e:	7bfb      	ldrb	r3, [r7, #15]
 801dd50:	2b00      	cmp	r3, #0
 801dd52:	d10c      	bne.n	801dd6e <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 801dd54:	687b      	ldr	r3, [r7, #4]
 801dd56:	691b      	ldr	r3, [r3, #16]
 801dd58:	4618      	mov	r0, r3
 801dd5a:	f7fd fb43 	bl	801b3e4 <dec_lock>
 801dd5e:	4603      	mov	r3, r0
 801dd60:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 801dd62:	7bfb      	ldrb	r3, [r7, #15]
 801dd64:	2b00      	cmp	r3, #0
 801dd66:	d102      	bne.n	801dd6e <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 801dd68:	687b      	ldr	r3, [r7, #4]
 801dd6a:	2200      	movs	r2, #0
 801dd6c:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 801dd6e:	7bfb      	ldrb	r3, [r7, #15]
}
 801dd70:	4618      	mov	r0, r3
 801dd72:	3710      	adds	r7, #16
 801dd74:	46bd      	mov	sp, r7
 801dd76:	bd80      	pop	{r7, pc}

0801dd78 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 801dd78:	b580      	push	{r7, lr}
 801dd7a:	b0a0      	sub	sp, #128	@ 0x80
 801dd7c:	af00      	add	r7, sp, #0
 801dd7e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 801dd80:	2300      	movs	r3, #0
 801dd82:	67bb      	str	r3, [r7, #120]	@ 0x78
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 801dd84:	f107 010c 	add.w	r1, r7, #12
 801dd88:	1d3b      	adds	r3, r7, #4
 801dd8a:	2202      	movs	r2, #2
 801dd8c:	4618      	mov	r0, r3
 801dd8e:	f7ff f8ed 	bl	801cf6c <find_volume>
 801dd92:	4603      	mov	r3, r0
 801dd94:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
	dj.obj.fs = fs;
 801dd98:	68fb      	ldr	r3, [r7, #12]
 801dd9a:	647b      	str	r3, [r7, #68]	@ 0x44
	if (res == FR_OK) {
 801dd9c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801dda0:	2b00      	cmp	r3, #0
 801dda2:	f040 808e 	bne.w	801dec2 <f_unlink+0x14a>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 801dda6:	687a      	ldr	r2, [r7, #4]
 801dda8:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 801ddac:	4611      	mov	r1, r2
 801ddae:	4618      	mov	r0, r3
 801ddb0:	f7fe ffcc 	bl	801cd4c <follow_path>
 801ddb4:	4603      	mov	r3, r0
 801ddb6:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 801ddba:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801ddbe:	2b00      	cmp	r3, #0
 801ddc0:	d108      	bne.n	801ddd4 <f_unlink+0x5c>
 801ddc2:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 801ddc6:	2102      	movs	r1, #2
 801ddc8:	4618      	mov	r0, r3
 801ddca:	f7fd f9ff 	bl	801b1cc <chk_lock>
 801ddce:	4603      	mov	r3, r0
 801ddd0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
#endif
		if (res == FR_OK) {					/* The object is accessible */
 801ddd4:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801ddd8:	2b00      	cmp	r3, #0
 801ddda:	d172      	bne.n	801dec2 <f_unlink+0x14a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 801dddc:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 801dde0:	b25b      	sxtb	r3, r3
 801dde2:	2b00      	cmp	r3, #0
 801dde4:	da03      	bge.n	801ddee <f_unlink+0x76>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 801dde6:	2306      	movs	r3, #6
 801dde8:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 801ddec:	e008      	b.n	801de00 <f_unlink+0x88>
			} else {
				if (dj.obj.attr & AM_RDO) {
 801ddee:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 801ddf2:	f003 0301 	and.w	r3, r3, #1
 801ddf6:	2b00      	cmp	r3, #0
 801ddf8:	d002      	beq.n	801de00 <f_unlink+0x88>
					res = FR_DENIED;		/* Cannot remove R/O object */
 801ddfa:	2307      	movs	r3, #7
 801ddfc:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
				}
			}
			if (res == FR_OK) {
 801de00:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801de04:	2b00      	cmp	r3, #0
 801de06:	d134      	bne.n	801de72 <f_unlink+0xfa>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 801de08:	68fb      	ldr	r3, [r7, #12]
 801de0a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 801de0c:	4611      	mov	r1, r2
 801de0e:	4618      	mov	r0, r3
 801de10:	f7fe f911 	bl	801c036 <ld_clust>
 801de14:	67b8      	str	r0, [r7, #120]	@ 0x78
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 801de16:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 801de1a:	f003 0310 	and.w	r3, r3, #16
 801de1e:	2b00      	cmp	r3, #0
 801de20:	d027      	beq.n	801de72 <f_unlink+0xfa>
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 801de22:	68fb      	ldr	r3, [r7, #12]
 801de24:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 801de26:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801de28:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 801de2a:	f107 0310 	add.w	r3, r7, #16
 801de2e:	2100      	movs	r1, #0
 801de30:	4618      	mov	r0, r3
 801de32:	f7fd ff5a 	bl	801bcea <dir_sdi>
 801de36:	4603      	mov	r3, r0
 801de38:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
						if (res == FR_OK) {
 801de3c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801de40:	2b00      	cmp	r3, #0
 801de42:	d116      	bne.n	801de72 <f_unlink+0xfa>
							res = dir_read(&sdj, 0);			/* Read an item */
 801de44:	f107 0310 	add.w	r3, r7, #16
 801de48:	2100      	movs	r1, #0
 801de4a:	4618      	mov	r0, r3
 801de4c:	f7fe fb1d 	bl	801c48a <dir_read>
 801de50:	4603      	mov	r3, r0
 801de52:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 801de56:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801de5a:	2b00      	cmp	r3, #0
 801de5c:	d102      	bne.n	801de64 <f_unlink+0xec>
 801de5e:	2307      	movs	r3, #7
 801de60:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 801de64:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801de68:	2b04      	cmp	r3, #4
 801de6a:	d102      	bne.n	801de72 <f_unlink+0xfa>
 801de6c:	2300      	movs	r3, #0
 801de6e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
						}
					}
				}
			}
			if (res == FR_OK) {
 801de72:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801de76:	2b00      	cmp	r3, #0
 801de78:	d123      	bne.n	801dec2 <f_unlink+0x14a>
				res = dir_remove(&dj);			/* Remove the directory entry */
 801de7a:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 801de7e:	4618      	mov	r0, r3
 801de80:	f7fe fd62 	bl	801c948 <dir_remove>
 801de84:	4603      	mov	r3, r0
 801de86:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 801de8a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801de8e:	2b00      	cmp	r3, #0
 801de90:	d10c      	bne.n	801deac <f_unlink+0x134>
 801de92:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801de94:	2b00      	cmp	r3, #0
 801de96:	d009      	beq.n	801deac <f_unlink+0x134>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 801de98:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 801de9c:	2200      	movs	r2, #0
 801de9e:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 801dea0:	4618      	mov	r0, r3
 801dea2:	f7fd fded 	bl	801ba80 <remove_chain>
 801dea6:	4603      	mov	r3, r0
 801dea8:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 801deac:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801deb0:	2b00      	cmp	r3, #0
 801deb2:	d106      	bne.n	801dec2 <f_unlink+0x14a>
 801deb4:	68fb      	ldr	r3, [r7, #12]
 801deb6:	4618      	mov	r0, r3
 801deb8:	f7fd fb66 	bl	801b588 <sync_fs>
 801debc:	4603      	mov	r3, r0
 801debe:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 801dec2:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 801dec6:	4618      	mov	r0, r3
 801dec8:	3780      	adds	r7, #128	@ 0x80
 801deca:	46bd      	mov	sp, r7
 801decc:	bd80      	pop	{r7, pc}
	...

0801ded0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 801ded0:	b480      	push	{r7}
 801ded2:	b087      	sub	sp, #28
 801ded4:	af00      	add	r7, sp, #0
 801ded6:	60f8      	str	r0, [r7, #12]
 801ded8:	60b9      	str	r1, [r7, #8]
 801deda:	4613      	mov	r3, r2
 801dedc:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801dede:	2301      	movs	r3, #1
 801dee0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801dee2:	2300      	movs	r3, #0
 801dee4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801dee6:	4b1f      	ldr	r3, [pc, #124]	@ (801df64 <FATFS_LinkDriverEx+0x94>)
 801dee8:	7a5b      	ldrb	r3, [r3, #9]
 801deea:	b2db      	uxtb	r3, r3
 801deec:	2b00      	cmp	r3, #0
 801deee:	d131      	bne.n	801df54 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 801def0:	4b1c      	ldr	r3, [pc, #112]	@ (801df64 <FATFS_LinkDriverEx+0x94>)
 801def2:	7a5b      	ldrb	r3, [r3, #9]
 801def4:	b2db      	uxtb	r3, r3
 801def6:	461a      	mov	r2, r3
 801def8:	4b1a      	ldr	r3, [pc, #104]	@ (801df64 <FATFS_LinkDriverEx+0x94>)
 801defa:	2100      	movs	r1, #0
 801defc:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801defe:	4b19      	ldr	r3, [pc, #100]	@ (801df64 <FATFS_LinkDriverEx+0x94>)
 801df00:	7a5b      	ldrb	r3, [r3, #9]
 801df02:	b2db      	uxtb	r3, r3
 801df04:	4a17      	ldr	r2, [pc, #92]	@ (801df64 <FATFS_LinkDriverEx+0x94>)
 801df06:	009b      	lsls	r3, r3, #2
 801df08:	4413      	add	r3, r2
 801df0a:	68fa      	ldr	r2, [r7, #12]
 801df0c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801df0e:	4b15      	ldr	r3, [pc, #84]	@ (801df64 <FATFS_LinkDriverEx+0x94>)
 801df10:	7a5b      	ldrb	r3, [r3, #9]
 801df12:	b2db      	uxtb	r3, r3
 801df14:	461a      	mov	r2, r3
 801df16:	4b13      	ldr	r3, [pc, #76]	@ (801df64 <FATFS_LinkDriverEx+0x94>)
 801df18:	4413      	add	r3, r2
 801df1a:	79fa      	ldrb	r2, [r7, #7]
 801df1c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801df1e:	4b11      	ldr	r3, [pc, #68]	@ (801df64 <FATFS_LinkDriverEx+0x94>)
 801df20:	7a5b      	ldrb	r3, [r3, #9]
 801df22:	b2db      	uxtb	r3, r3
 801df24:	1c5a      	adds	r2, r3, #1
 801df26:	b2d1      	uxtb	r1, r2
 801df28:	4a0e      	ldr	r2, [pc, #56]	@ (801df64 <FATFS_LinkDriverEx+0x94>)
 801df2a:	7251      	strb	r1, [r2, #9]
 801df2c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801df2e:	7dbb      	ldrb	r3, [r7, #22]
 801df30:	3330      	adds	r3, #48	@ 0x30
 801df32:	b2da      	uxtb	r2, r3
 801df34:	68bb      	ldr	r3, [r7, #8]
 801df36:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 801df38:	68bb      	ldr	r3, [r7, #8]
 801df3a:	3301      	adds	r3, #1
 801df3c:	223a      	movs	r2, #58	@ 0x3a
 801df3e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 801df40:	68bb      	ldr	r3, [r7, #8]
 801df42:	3302      	adds	r3, #2
 801df44:	222f      	movs	r2, #47	@ 0x2f
 801df46:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 801df48:	68bb      	ldr	r3, [r7, #8]
 801df4a:	3303      	adds	r3, #3
 801df4c:	2200      	movs	r2, #0
 801df4e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 801df50:	2300      	movs	r3, #0
 801df52:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 801df54:	7dfb      	ldrb	r3, [r7, #23]
}
 801df56:	4618      	mov	r0, r3
 801df58:	371c      	adds	r7, #28
 801df5a:	46bd      	mov	sp, r7
 801df5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801df60:	4770      	bx	lr
 801df62:	bf00      	nop
 801df64:	2400076c 	.word	0x2400076c

0801df68 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 801df68:	b580      	push	{r7, lr}
 801df6a:	b082      	sub	sp, #8
 801df6c:	af00      	add	r7, sp, #0
 801df6e:	6078      	str	r0, [r7, #4]
 801df70:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801df72:	2200      	movs	r2, #0
 801df74:	6839      	ldr	r1, [r7, #0]
 801df76:	6878      	ldr	r0, [r7, #4]
 801df78:	f7ff ffaa 	bl	801ded0 <FATFS_LinkDriverEx>
 801df7c:	4603      	mov	r3, r0
}
 801df7e:	4618      	mov	r0, r3
 801df80:	3708      	adds	r7, #8
 801df82:	46bd      	mov	sp, r7
 801df84:	bd80      	pop	{r7, pc}
	...

0801df88 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 801df88:	b480      	push	{r7}
 801df8a:	b085      	sub	sp, #20
 801df8c:	af00      	add	r7, sp, #0
 801df8e:	4603      	mov	r3, r0
 801df90:	6039      	str	r1, [r7, #0]
 801df92:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 801df94:	88fb      	ldrh	r3, [r7, #6]
 801df96:	2b7f      	cmp	r3, #127	@ 0x7f
 801df98:	d802      	bhi.n	801dfa0 <ff_convert+0x18>
		c = chr;
 801df9a:	88fb      	ldrh	r3, [r7, #6]
 801df9c:	81fb      	strh	r3, [r7, #14]
 801df9e:	e025      	b.n	801dfec <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 801dfa0:	683b      	ldr	r3, [r7, #0]
 801dfa2:	2b00      	cmp	r3, #0
 801dfa4:	d00b      	beq.n	801dfbe <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 801dfa6:	88fb      	ldrh	r3, [r7, #6]
 801dfa8:	2bff      	cmp	r3, #255	@ 0xff
 801dfaa:	d805      	bhi.n	801dfb8 <ff_convert+0x30>
 801dfac:	88fb      	ldrh	r3, [r7, #6]
 801dfae:	3b80      	subs	r3, #128	@ 0x80
 801dfb0:	4a12      	ldr	r2, [pc, #72]	@ (801dffc <ff_convert+0x74>)
 801dfb2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801dfb6:	e000      	b.n	801dfba <ff_convert+0x32>
 801dfb8:	2300      	movs	r3, #0
 801dfba:	81fb      	strh	r3, [r7, #14]
 801dfbc:	e016      	b.n	801dfec <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 801dfbe:	2300      	movs	r3, #0
 801dfc0:	81fb      	strh	r3, [r7, #14]
 801dfc2:	e009      	b.n	801dfd8 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 801dfc4:	89fb      	ldrh	r3, [r7, #14]
 801dfc6:	4a0d      	ldr	r2, [pc, #52]	@ (801dffc <ff_convert+0x74>)
 801dfc8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801dfcc:	88fa      	ldrh	r2, [r7, #6]
 801dfce:	429a      	cmp	r2, r3
 801dfd0:	d006      	beq.n	801dfe0 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 801dfd2:	89fb      	ldrh	r3, [r7, #14]
 801dfd4:	3301      	adds	r3, #1
 801dfd6:	81fb      	strh	r3, [r7, #14]
 801dfd8:	89fb      	ldrh	r3, [r7, #14]
 801dfda:	2b7f      	cmp	r3, #127	@ 0x7f
 801dfdc:	d9f2      	bls.n	801dfc4 <ff_convert+0x3c>
 801dfde:	e000      	b.n	801dfe2 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 801dfe0:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 801dfe2:	89fb      	ldrh	r3, [r7, #14]
 801dfe4:	3380      	adds	r3, #128	@ 0x80
 801dfe6:	b29b      	uxth	r3, r3
 801dfe8:	b2db      	uxtb	r3, r3
 801dfea:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 801dfec:	89fb      	ldrh	r3, [r7, #14]
}
 801dfee:	4618      	mov	r0, r3
 801dff0:	3714      	adds	r7, #20
 801dff2:	46bd      	mov	sp, r7
 801dff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dff8:	4770      	bx	lr
 801dffa:	bf00      	nop
 801dffc:	0801eb1c 	.word	0x0801eb1c

0801e000 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 801e000:	b480      	push	{r7}
 801e002:	b087      	sub	sp, #28
 801e004:	af00      	add	r7, sp, #0
 801e006:	4603      	mov	r3, r0
 801e008:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 801e00a:	88fb      	ldrh	r3, [r7, #6]
 801e00c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801e010:	d201      	bcs.n	801e016 <ff_wtoupper+0x16>
 801e012:	4b3e      	ldr	r3, [pc, #248]	@ (801e10c <ff_wtoupper+0x10c>)
 801e014:	e000      	b.n	801e018 <ff_wtoupper+0x18>
 801e016:	4b3e      	ldr	r3, [pc, #248]	@ (801e110 <ff_wtoupper+0x110>)
 801e018:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 801e01a:	697b      	ldr	r3, [r7, #20]
 801e01c:	1c9a      	adds	r2, r3, #2
 801e01e:	617a      	str	r2, [r7, #20]
 801e020:	881b      	ldrh	r3, [r3, #0]
 801e022:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 801e024:	8a7b      	ldrh	r3, [r7, #18]
 801e026:	2b00      	cmp	r3, #0
 801e028:	d068      	beq.n	801e0fc <ff_wtoupper+0xfc>
 801e02a:	88fa      	ldrh	r2, [r7, #6]
 801e02c:	8a7b      	ldrh	r3, [r7, #18]
 801e02e:	429a      	cmp	r2, r3
 801e030:	d364      	bcc.n	801e0fc <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 801e032:	697b      	ldr	r3, [r7, #20]
 801e034:	1c9a      	adds	r2, r3, #2
 801e036:	617a      	str	r2, [r7, #20]
 801e038:	881b      	ldrh	r3, [r3, #0]
 801e03a:	823b      	strh	r3, [r7, #16]
 801e03c:	8a3b      	ldrh	r3, [r7, #16]
 801e03e:	0a1b      	lsrs	r3, r3, #8
 801e040:	81fb      	strh	r3, [r7, #14]
 801e042:	8a3b      	ldrh	r3, [r7, #16]
 801e044:	b2db      	uxtb	r3, r3
 801e046:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 801e048:	88fa      	ldrh	r2, [r7, #6]
 801e04a:	8a79      	ldrh	r1, [r7, #18]
 801e04c:	8a3b      	ldrh	r3, [r7, #16]
 801e04e:	440b      	add	r3, r1
 801e050:	429a      	cmp	r2, r3
 801e052:	da49      	bge.n	801e0e8 <ff_wtoupper+0xe8>
			switch (cmd) {
 801e054:	89fb      	ldrh	r3, [r7, #14]
 801e056:	2b08      	cmp	r3, #8
 801e058:	d84f      	bhi.n	801e0fa <ff_wtoupper+0xfa>
 801e05a:	a201      	add	r2, pc, #4	@ (adr r2, 801e060 <ff_wtoupper+0x60>)
 801e05c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801e060:	0801e085 	.word	0x0801e085
 801e064:	0801e097 	.word	0x0801e097
 801e068:	0801e0ad 	.word	0x0801e0ad
 801e06c:	0801e0b5 	.word	0x0801e0b5
 801e070:	0801e0bd 	.word	0x0801e0bd
 801e074:	0801e0c5 	.word	0x0801e0c5
 801e078:	0801e0cd 	.word	0x0801e0cd
 801e07c:	0801e0d5 	.word	0x0801e0d5
 801e080:	0801e0dd 	.word	0x0801e0dd
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 801e084:	88fa      	ldrh	r2, [r7, #6]
 801e086:	8a7b      	ldrh	r3, [r7, #18]
 801e088:	1ad3      	subs	r3, r2, r3
 801e08a:	005b      	lsls	r3, r3, #1
 801e08c:	697a      	ldr	r2, [r7, #20]
 801e08e:	4413      	add	r3, r2
 801e090:	881b      	ldrh	r3, [r3, #0]
 801e092:	80fb      	strh	r3, [r7, #6]
 801e094:	e027      	b.n	801e0e6 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 801e096:	88fa      	ldrh	r2, [r7, #6]
 801e098:	8a7b      	ldrh	r3, [r7, #18]
 801e09a:	1ad3      	subs	r3, r2, r3
 801e09c:	b29b      	uxth	r3, r3
 801e09e:	f003 0301 	and.w	r3, r3, #1
 801e0a2:	b29b      	uxth	r3, r3
 801e0a4:	88fa      	ldrh	r2, [r7, #6]
 801e0a6:	1ad3      	subs	r3, r2, r3
 801e0a8:	80fb      	strh	r3, [r7, #6]
 801e0aa:	e01c      	b.n	801e0e6 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 801e0ac:	88fb      	ldrh	r3, [r7, #6]
 801e0ae:	3b10      	subs	r3, #16
 801e0b0:	80fb      	strh	r3, [r7, #6]
 801e0b2:	e018      	b.n	801e0e6 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 801e0b4:	88fb      	ldrh	r3, [r7, #6]
 801e0b6:	3b20      	subs	r3, #32
 801e0b8:	80fb      	strh	r3, [r7, #6]
 801e0ba:	e014      	b.n	801e0e6 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 801e0bc:	88fb      	ldrh	r3, [r7, #6]
 801e0be:	3b30      	subs	r3, #48	@ 0x30
 801e0c0:	80fb      	strh	r3, [r7, #6]
 801e0c2:	e010      	b.n	801e0e6 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 801e0c4:	88fb      	ldrh	r3, [r7, #6]
 801e0c6:	3b1a      	subs	r3, #26
 801e0c8:	80fb      	strh	r3, [r7, #6]
 801e0ca:	e00c      	b.n	801e0e6 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 801e0cc:	88fb      	ldrh	r3, [r7, #6]
 801e0ce:	3308      	adds	r3, #8
 801e0d0:	80fb      	strh	r3, [r7, #6]
 801e0d2:	e008      	b.n	801e0e6 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 801e0d4:	88fb      	ldrh	r3, [r7, #6]
 801e0d6:	3b50      	subs	r3, #80	@ 0x50
 801e0d8:	80fb      	strh	r3, [r7, #6]
 801e0da:	e004      	b.n	801e0e6 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 801e0dc:	88fb      	ldrh	r3, [r7, #6]
 801e0de:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 801e0e2:	80fb      	strh	r3, [r7, #6]
 801e0e4:	bf00      	nop
			}
			break;
 801e0e6:	e008      	b.n	801e0fa <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 801e0e8:	89fb      	ldrh	r3, [r7, #14]
 801e0ea:	2b00      	cmp	r3, #0
 801e0ec:	d195      	bne.n	801e01a <ff_wtoupper+0x1a>
 801e0ee:	8a3b      	ldrh	r3, [r7, #16]
 801e0f0:	005b      	lsls	r3, r3, #1
 801e0f2:	697a      	ldr	r2, [r7, #20]
 801e0f4:	4413      	add	r3, r2
 801e0f6:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 801e0f8:	e78f      	b.n	801e01a <ff_wtoupper+0x1a>
			break;
 801e0fa:	bf00      	nop
	}

	return chr;
 801e0fc:	88fb      	ldrh	r3, [r7, #6]
}
 801e0fe:	4618      	mov	r0, r3
 801e100:	371c      	adds	r7, #28
 801e102:	46bd      	mov	sp, r7
 801e104:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e108:	4770      	bx	lr
 801e10a:	bf00      	nop
 801e10c:	0801ec1c 	.word	0x0801ec1c
 801e110:	0801ee10 	.word	0x0801ee10

0801e114 <memset>:
 801e114:	4402      	add	r2, r0
 801e116:	4603      	mov	r3, r0
 801e118:	4293      	cmp	r3, r2
 801e11a:	d100      	bne.n	801e11e <memset+0xa>
 801e11c:	4770      	bx	lr
 801e11e:	f803 1b01 	strb.w	r1, [r3], #1
 801e122:	e7f9      	b.n	801e118 <memset+0x4>

0801e124 <__errno>:
 801e124:	4b01      	ldr	r3, [pc, #4]	@ (801e12c <__errno+0x8>)
 801e126:	6818      	ldr	r0, [r3, #0]
 801e128:	4770      	bx	lr
 801e12a:	bf00      	nop
 801e12c:	2400002c 	.word	0x2400002c

0801e130 <__libc_init_array>:
 801e130:	b570      	push	{r4, r5, r6, lr}
 801e132:	4d0d      	ldr	r5, [pc, #52]	@ (801e168 <__libc_init_array+0x38>)
 801e134:	4c0d      	ldr	r4, [pc, #52]	@ (801e16c <__libc_init_array+0x3c>)
 801e136:	1b64      	subs	r4, r4, r5
 801e138:	10a4      	asrs	r4, r4, #2
 801e13a:	2600      	movs	r6, #0
 801e13c:	42a6      	cmp	r6, r4
 801e13e:	d109      	bne.n	801e154 <__libc_init_array+0x24>
 801e140:	4d0b      	ldr	r5, [pc, #44]	@ (801e170 <__libc_init_array+0x40>)
 801e142:	4c0c      	ldr	r4, [pc, #48]	@ (801e174 <__libc_init_array+0x44>)
 801e144:	f000 fc38 	bl	801e9b8 <_init>
 801e148:	1b64      	subs	r4, r4, r5
 801e14a:	10a4      	asrs	r4, r4, #2
 801e14c:	2600      	movs	r6, #0
 801e14e:	42a6      	cmp	r6, r4
 801e150:	d105      	bne.n	801e15e <__libc_init_array+0x2e>
 801e152:	bd70      	pop	{r4, r5, r6, pc}
 801e154:	f855 3b04 	ldr.w	r3, [r5], #4
 801e158:	4798      	blx	r3
 801e15a:	3601      	adds	r6, #1
 801e15c:	e7ee      	b.n	801e13c <__libc_init_array+0xc>
 801e15e:	f855 3b04 	ldr.w	r3, [r5], #4
 801e162:	4798      	blx	r3
 801e164:	3601      	adds	r6, #1
 801e166:	e7f2      	b.n	801e14e <__libc_init_array+0x1e>
 801e168:	080207d0 	.word	0x080207d0
 801e16c:	080207d0 	.word	0x080207d0
 801e170:	080207d0 	.word	0x080207d0
 801e174:	080207d4 	.word	0x080207d4

0801e178 <sqrt>:
 801e178:	b508      	push	{r3, lr}
 801e17a:	ed2d 8b04 	vpush	{d8-d9}
 801e17e:	eeb0 8b40 	vmov.f64	d8, d0
 801e182:	f000 fba1 	bl	801e8c8 <__ieee754_sqrt>
 801e186:	eeb4 8b48 	vcmp.f64	d8, d8
 801e18a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e18e:	d60c      	bvs.n	801e1aa <sqrt+0x32>
 801e190:	ed9f 9b07 	vldr	d9, [pc, #28]	@ 801e1b0 <sqrt+0x38>
 801e194:	eeb4 8bc9 	vcmpe.f64	d8, d9
 801e198:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e19c:	d505      	bpl.n	801e1aa <sqrt+0x32>
 801e19e:	f7ff ffc1 	bl	801e124 <__errno>
 801e1a2:	ee89 0b09 	vdiv.f64	d0, d9, d9
 801e1a6:	2321      	movs	r3, #33	@ 0x21
 801e1a8:	6003      	str	r3, [r0, #0]
 801e1aa:	ecbd 8b04 	vpop	{d8-d9}
 801e1ae:	bd08      	pop	{r3, pc}
	...

0801e1b8 <atan>:
 801e1b8:	b538      	push	{r3, r4, r5, lr}
 801e1ba:	eeb0 7b40 	vmov.f64	d7, d0
 801e1be:	ee17 5a90 	vmov	r5, s15
 801e1c2:	4b73      	ldr	r3, [pc, #460]	@ (801e390 <atan+0x1d8>)
 801e1c4:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 801e1c8:	429c      	cmp	r4, r3
 801e1ca:	d913      	bls.n	801e1f4 <atan+0x3c>
 801e1cc:	4b71      	ldr	r3, [pc, #452]	@ (801e394 <atan+0x1dc>)
 801e1ce:	429c      	cmp	r4, r3
 801e1d0:	d803      	bhi.n	801e1da <atan+0x22>
 801e1d2:	d107      	bne.n	801e1e4 <atan+0x2c>
 801e1d4:	ee10 3a10 	vmov	r3, s0
 801e1d8:	b123      	cbz	r3, 801e1e4 <atan+0x2c>
 801e1da:	ee37 7b07 	vadd.f64	d7, d7, d7
 801e1de:	eeb0 0b47 	vmov.f64	d0, d7
 801e1e2:	bd38      	pop	{r3, r4, r5, pc}
 801e1e4:	ed9f 7b4e 	vldr	d7, [pc, #312]	@ 801e320 <atan+0x168>
 801e1e8:	ed9f 6b4f 	vldr	d6, [pc, #316]	@ 801e328 <atan+0x170>
 801e1ec:	2d00      	cmp	r5, #0
 801e1ee:	fe36 7b07 	vselgt.f64	d7, d6, d7
 801e1f2:	e7f4      	b.n	801e1de <atan+0x26>
 801e1f4:	4b68      	ldr	r3, [pc, #416]	@ (801e398 <atan+0x1e0>)
 801e1f6:	429c      	cmp	r4, r3
 801e1f8:	d811      	bhi.n	801e21e <atan+0x66>
 801e1fa:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 801e1fe:	429c      	cmp	r4, r3
 801e200:	d80a      	bhi.n	801e218 <atan+0x60>
 801e202:	eeb7 5b00 	vmov.f64	d5, #112	@ 0x3f800000  1.0
 801e206:	ed9f 6b4a 	vldr	d6, [pc, #296]	@ 801e330 <atan+0x178>
 801e20a:	ee30 6b06 	vadd.f64	d6, d0, d6
 801e20e:	eeb4 6bc5 	vcmpe.f64	d6, d5
 801e212:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e216:	dce2      	bgt.n	801e1de <atan+0x26>
 801e218:	f04f 33ff 	mov.w	r3, #4294967295
 801e21c:	e013      	b.n	801e246 <atan+0x8e>
 801e21e:	f000 f8c5 	bl	801e3ac <fabs>
 801e222:	4b5e      	ldr	r3, [pc, #376]	@ (801e39c <atan+0x1e4>)
 801e224:	429c      	cmp	r4, r3
 801e226:	d84f      	bhi.n	801e2c8 <atan+0x110>
 801e228:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 801e22c:	429c      	cmp	r4, r3
 801e22e:	d841      	bhi.n	801e2b4 <atan+0xfc>
 801e230:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 801e234:	eebf 5b00 	vmov.f64	d5, #240	@ 0xbf800000 -1.0
 801e238:	2300      	movs	r3, #0
 801e23a:	eea0 5b07 	vfma.f64	d5, d0, d7
 801e23e:	ee30 0b07 	vadd.f64	d0, d0, d7
 801e242:	ee85 7b00 	vdiv.f64	d7, d5, d0
 801e246:	ed9f 6b3c 	vldr	d6, [pc, #240]	@ 801e338 <atan+0x180>
 801e24a:	ee27 4b07 	vmul.f64	d4, d7, d7
 801e24e:	ee24 5b04 	vmul.f64	d5, d4, d4
 801e252:	ed9f 3b3b 	vldr	d3, [pc, #236]	@ 801e340 <atan+0x188>
 801e256:	eea5 3b06 	vfma.f64	d3, d5, d6
 801e25a:	ed9f 6b3b 	vldr	d6, [pc, #236]	@ 801e348 <atan+0x190>
 801e25e:	eea3 6b05 	vfma.f64	d6, d3, d5
 801e262:	ed9f 3b3b 	vldr	d3, [pc, #236]	@ 801e350 <atan+0x198>
 801e266:	eea6 3b05 	vfma.f64	d3, d6, d5
 801e26a:	ed9f 6b3b 	vldr	d6, [pc, #236]	@ 801e358 <atan+0x1a0>
 801e26e:	eea3 6b05 	vfma.f64	d6, d3, d5
 801e272:	ed9f 3b3b 	vldr	d3, [pc, #236]	@ 801e360 <atan+0x1a8>
 801e276:	ed9f 2b3c 	vldr	d2, [pc, #240]	@ 801e368 <atan+0x1b0>
 801e27a:	eea6 3b05 	vfma.f64	d3, d6, d5
 801e27e:	ed9f 6b3c 	vldr	d6, [pc, #240]	@ 801e370 <atan+0x1b8>
 801e282:	eea5 2b06 	vfma.f64	d2, d5, d6
 801e286:	ed9f 6b3c 	vldr	d6, [pc, #240]	@ 801e378 <atan+0x1c0>
 801e28a:	eea2 6b05 	vfma.f64	d6, d2, d5
 801e28e:	ed9f 2b3c 	vldr	d2, [pc, #240]	@ 801e380 <atan+0x1c8>
 801e292:	eea6 2b05 	vfma.f64	d2, d6, d5
 801e296:	ed9f 6b3c 	vldr	d6, [pc, #240]	@ 801e388 <atan+0x1d0>
 801e29a:	1c5a      	adds	r2, r3, #1
 801e29c:	eea2 6b05 	vfma.f64	d6, d2, d5
 801e2a0:	ee26 6b05 	vmul.f64	d6, d6, d5
 801e2a4:	eea3 6b04 	vfma.f64	d6, d3, d4
 801e2a8:	ee27 6b06 	vmul.f64	d6, d7, d6
 801e2ac:	d121      	bne.n	801e2f2 <atan+0x13a>
 801e2ae:	ee37 7b46 	vsub.f64	d7, d7, d6
 801e2b2:	e794      	b.n	801e1de <atan+0x26>
 801e2b4:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
 801e2b8:	2301      	movs	r3, #1
 801e2ba:	ee30 5b47 	vsub.f64	d5, d0, d7
 801e2be:	ee30 0b07 	vadd.f64	d0, d0, d7
 801e2c2:	ee85 7b00 	vdiv.f64	d7, d5, d0
 801e2c6:	e7be      	b.n	801e246 <atan+0x8e>
 801e2c8:	4b35      	ldr	r3, [pc, #212]	@ (801e3a0 <atan+0x1e8>)
 801e2ca:	429c      	cmp	r4, r3
 801e2cc:	d20b      	bcs.n	801e2e6 <atan+0x12e>
 801e2ce:	eeb7 7b08 	vmov.f64	d7, #120	@ 0x3fc00000  1.5
 801e2d2:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 801e2d6:	ee30 5b47 	vsub.f64	d5, d0, d7
 801e2da:	eea0 6b07 	vfma.f64	d6, d0, d7
 801e2de:	2302      	movs	r3, #2
 801e2e0:	ee85 7b06 	vdiv.f64	d7, d5, d6
 801e2e4:	e7af      	b.n	801e246 <atan+0x8e>
 801e2e6:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 801e2ea:	2303      	movs	r3, #3
 801e2ec:	ee86 7b00 	vdiv.f64	d7, d6, d0
 801e2f0:	e7a9      	b.n	801e246 <atan+0x8e>
 801e2f2:	4a2c      	ldr	r2, [pc, #176]	@ (801e3a4 <atan+0x1ec>)
 801e2f4:	492c      	ldr	r1, [pc, #176]	@ (801e3a8 <atan+0x1f0>)
 801e2f6:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 801e2fa:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 801e2fe:	ed93 5b00 	vldr	d5, [r3]
 801e302:	ee36 6b45 	vsub.f64	d6, d6, d5
 801e306:	ee36 6b47 	vsub.f64	d6, d6, d7
 801e30a:	ed92 7b00 	vldr	d7, [r2]
 801e30e:	2d00      	cmp	r5, #0
 801e310:	ee37 7b46 	vsub.f64	d7, d7, d6
 801e314:	bfb8      	it	lt
 801e316:	eeb1 7b47 	vneglt.f64	d7, d7
 801e31a:	e760      	b.n	801e1de <atan+0x26>
 801e31c:	f3af 8000 	nop.w
 801e320:	54442d18 	.word	0x54442d18
 801e324:	bff921fb 	.word	0xbff921fb
 801e328:	54442d18 	.word	0x54442d18
 801e32c:	3ff921fb 	.word	0x3ff921fb
 801e330:	8800759c 	.word	0x8800759c
 801e334:	7e37e43c 	.word	0x7e37e43c
 801e338:	e322da11 	.word	0xe322da11
 801e33c:	3f90ad3a 	.word	0x3f90ad3a
 801e340:	24760deb 	.word	0x24760deb
 801e344:	3fa97b4b 	.word	0x3fa97b4b
 801e348:	a0d03d51 	.word	0xa0d03d51
 801e34c:	3fb10d66 	.word	0x3fb10d66
 801e350:	c54c206e 	.word	0xc54c206e
 801e354:	3fb745cd 	.word	0x3fb745cd
 801e358:	920083ff 	.word	0x920083ff
 801e35c:	3fc24924 	.word	0x3fc24924
 801e360:	5555550d 	.word	0x5555550d
 801e364:	3fd55555 	.word	0x3fd55555
 801e368:	52defd9a 	.word	0x52defd9a
 801e36c:	bfadde2d 	.word	0xbfadde2d
 801e370:	2c6a6c2f 	.word	0x2c6a6c2f
 801e374:	bfa2b444 	.word	0xbfa2b444
 801e378:	af749a6d 	.word	0xaf749a6d
 801e37c:	bfb3b0f2 	.word	0xbfb3b0f2
 801e380:	fe231671 	.word	0xfe231671
 801e384:	bfbc71c6 	.word	0xbfbc71c6
 801e388:	9998ebc4 	.word	0x9998ebc4
 801e38c:	bfc99999 	.word	0xbfc99999
 801e390:	440fffff 	.word	0x440fffff
 801e394:	7ff00000 	.word	0x7ff00000
 801e398:	3fdbffff 	.word	0x3fdbffff
 801e39c:	3ff2ffff 	.word	0x3ff2ffff
 801e3a0:	40038000 	.word	0x40038000
 801e3a4:	0801eef0 	.word	0x0801eef0
 801e3a8:	0801eed0 	.word	0x0801eed0

0801e3ac <fabs>:
 801e3ac:	ec51 0b10 	vmov	r0, r1, d0
 801e3b0:	4602      	mov	r2, r0
 801e3b2:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801e3b6:	ec43 2b10 	vmov	d0, r2, r3
 801e3ba:	4770      	bx	lr

0801e3bc <checkint>:
 801e3bc:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801e3c0:	f240 33fe 	movw	r3, #1022	@ 0x3fe
 801e3c4:	429a      	cmp	r2, r3
 801e3c6:	b570      	push	{r4, r5, r6, lr}
 801e3c8:	dd2a      	ble.n	801e420 <checkint+0x64>
 801e3ca:	f240 4333 	movw	r3, #1075	@ 0x433
 801e3ce:	429a      	cmp	r2, r3
 801e3d0:	dc24      	bgt.n	801e41c <checkint+0x60>
 801e3d2:	1a9b      	subs	r3, r3, r2
 801e3d4:	f1a3 0620 	sub.w	r6, r3, #32
 801e3d8:	f04f 32ff 	mov.w	r2, #4294967295
 801e3dc:	fa02 f403 	lsl.w	r4, r2, r3
 801e3e0:	fa02 f606 	lsl.w	r6, r2, r6
 801e3e4:	f1c3 0520 	rsb	r5, r3, #32
 801e3e8:	fa22 f505 	lsr.w	r5, r2, r5
 801e3ec:	4334      	orrs	r4, r6
 801e3ee:	432c      	orrs	r4, r5
 801e3f0:	409a      	lsls	r2, r3
 801e3f2:	ea20 0202 	bic.w	r2, r0, r2
 801e3f6:	ea21 0404 	bic.w	r4, r1, r4
 801e3fa:	4322      	orrs	r2, r4
 801e3fc:	f1a3 0420 	sub.w	r4, r3, #32
 801e400:	f1c3 0220 	rsb	r2, r3, #32
 801e404:	d10c      	bne.n	801e420 <checkint+0x64>
 801e406:	40d8      	lsrs	r0, r3
 801e408:	fa01 f302 	lsl.w	r3, r1, r2
 801e40c:	4318      	orrs	r0, r3
 801e40e:	40e1      	lsrs	r1, r4
 801e410:	4308      	orrs	r0, r1
 801e412:	f000 0001 	and.w	r0, r0, #1
 801e416:	f1d0 0002 	rsbs	r0, r0, #2
 801e41a:	bd70      	pop	{r4, r5, r6, pc}
 801e41c:	2002      	movs	r0, #2
 801e41e:	e7fc      	b.n	801e41a <checkint+0x5e>
 801e420:	2000      	movs	r0, #0
 801e422:	e7fa      	b.n	801e41a <checkint+0x5e>
 801e424:	0000      	movs	r0, r0
	...

0801e428 <pow>:
 801e428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e42c:	ee10 4a90 	vmov	r4, s1
 801e430:	ed2d 8b0a 	vpush	{d8-d12}
 801e434:	ea4f 5814 	mov.w	r8, r4, lsr #20
 801e438:	ee11 aa90 	vmov	sl, s3
 801e43c:	f108 32ff 	add.w	r2, r8, #4294967295
 801e440:	f240 73fd 	movw	r3, #2045	@ 0x7fd
 801e444:	429a      	cmp	r2, r3
 801e446:	ee10 5a10 	vmov	r5, s0
 801e44a:	ee11 0a10 	vmov	r0, s2
 801e44e:	b087      	sub	sp, #28
 801e450:	46c4      	mov	ip, r8
 801e452:	ea4f 561a 	mov.w	r6, sl, lsr #20
 801e456:	d806      	bhi.n	801e466 <pow+0x3e>
 801e458:	f3c6 030a 	ubfx	r3, r6, #0, #11
 801e45c:	f2a3 33be 	subw	r3, r3, #958	@ 0x3be
 801e460:	2b7f      	cmp	r3, #127	@ 0x7f
 801e462:	f240 8157 	bls.w	801e714 <pow+0x2ec>
 801e466:	1802      	adds	r2, r0, r0
 801e468:	eb4a 010a 	adc.w	r1, sl, sl
 801e46c:	f06f 0b01 	mvn.w	fp, #1
 801e470:	1e57      	subs	r7, r2, #1
 801e472:	f141 33ff 	adc.w	r3, r1, #4294967295
 801e476:	f46f 1e00 	mvn.w	lr, #2097152	@ 0x200000
 801e47a:	45bb      	cmp	fp, r7
 801e47c:	eb7e 0303 	sbcs.w	r3, lr, r3
 801e480:	d242      	bcs.n	801e508 <pow+0xe0>
 801e482:	ea52 0301 	orrs.w	r3, r2, r1
 801e486:	f04f 0300 	mov.w	r3, #0
 801e48a:	d10c      	bne.n	801e4a6 <pow+0x7e>
 801e48c:	196d      	adds	r5, r5, r5
 801e48e:	f484 2400 	eor.w	r4, r4, #524288	@ 0x80000
 801e492:	4164      	adcs	r4, r4
 801e494:	42ab      	cmp	r3, r5
 801e496:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 801e49a:	41a3      	sbcs	r3, r4
 801e49c:	f0c0 808f 	bcc.w	801e5be <pow+0x196>
 801e4a0:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 801e4a4:	e02b      	b.n	801e4fe <pow+0xd6>
 801e4a6:	4ed4      	ldr	r6, [pc, #848]	@ (801e7f8 <pow+0x3d0>)
 801e4a8:	42b4      	cmp	r4, r6
 801e4aa:	bf08      	it	eq
 801e4ac:	429d      	cmpeq	r5, r3
 801e4ae:	d109      	bne.n	801e4c4 <pow+0x9c>
 801e4b0:	1800      	adds	r0, r0, r0
 801e4b2:	f48a 2a00 	eor.w	sl, sl, #524288	@ 0x80000
 801e4b6:	eb4a 0a0a 	adc.w	sl, sl, sl
 801e4ba:	4283      	cmp	r3, r0
 801e4bc:	4bcf      	ldr	r3, [pc, #828]	@ (801e7fc <pow+0x3d4>)
 801e4be:	eb73 030a 	sbcs.w	r3, r3, sl
 801e4c2:	e7eb      	b.n	801e49c <pow+0x74>
 801e4c4:	196d      	adds	r5, r5, r5
 801e4c6:	48ce      	ldr	r0, [pc, #824]	@ (801e800 <pow+0x3d8>)
 801e4c8:	4164      	adcs	r4, r4
 801e4ca:	42ab      	cmp	r3, r5
 801e4cc:	eb70 0604 	sbcs.w	r6, r0, r4
 801e4d0:	d375      	bcc.n	801e5be <pow+0x196>
 801e4d2:	4281      	cmp	r1, r0
 801e4d4:	bf08      	it	eq
 801e4d6:	429a      	cmpeq	r2, r3
 801e4d8:	d171      	bne.n	801e5be <pow+0x196>
 801e4da:	4aca      	ldr	r2, [pc, #808]	@ (801e804 <pow+0x3dc>)
 801e4dc:	4294      	cmp	r4, r2
 801e4de:	bf08      	it	eq
 801e4e0:	429d      	cmpeq	r5, r3
 801e4e2:	d0dd      	beq.n	801e4a0 <pow+0x78>
 801e4e4:	4294      	cmp	r4, r2
 801e4e6:	ea6f 0a0a 	mvn.w	sl, sl
 801e4ea:	bf34      	ite	cc
 801e4ec:	2400      	movcc	r4, #0
 801e4ee:	2401      	movcs	r4, #1
 801e4f0:	ea4f 7ada 	mov.w	sl, sl, lsr #31
 801e4f4:	4554      	cmp	r4, sl
 801e4f6:	f040 81dc 	bne.w	801e8b2 <pow+0x48a>
 801e4fa:	ee21 0b01 	vmul.f64	d0, d1, d1
 801e4fe:	b007      	add	sp, #28
 801e500:	ecbd 8b0a 	vpop	{d8-d12}
 801e504:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e508:	196f      	adds	r7, r5, r5
 801e50a:	eb44 0904 	adc.w	r9, r4, r4
 801e50e:	1e7a      	subs	r2, r7, #1
 801e510:	f169 0300 	sbc.w	r3, r9, #0
 801e514:	4593      	cmp	fp, r2
 801e516:	eb7e 0303 	sbcs.w	r3, lr, r3
 801e51a:	d225      	bcs.n	801e568 <pow+0x140>
 801e51c:	ee20 0b00 	vmul.f64	d0, d0, d0
 801e520:	2c00      	cmp	r4, #0
 801e522:	da13      	bge.n	801e54c <pow+0x124>
 801e524:	4651      	mov	r1, sl
 801e526:	f7ff ff49 	bl	801e3bc <checkint>
 801e52a:	2801      	cmp	r0, #1
 801e52c:	d10e      	bne.n	801e54c <pow+0x124>
 801e52e:	eeb1 0b40 	vneg.f64	d0, d0
 801e532:	ea57 0909 	orrs.w	r9, r7, r9
 801e536:	d10b      	bne.n	801e550 <pow+0x128>
 801e538:	f1ba 0f00 	cmp.w	sl, #0
 801e53c:	dadf      	bge.n	801e4fe <pow+0xd6>
 801e53e:	b007      	add	sp, #28
 801e540:	ecbd 8b0a 	vpop	{d8-d12}
 801e544:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e548:	f000 b9f2 	b.w	801e930 <__math_divzero>
 801e54c:	2000      	movs	r0, #0
 801e54e:	e7f0      	b.n	801e532 <pow+0x10a>
 801e550:	f1ba 0f00 	cmp.w	sl, #0
 801e554:	dad3      	bge.n	801e4fe <pow+0xd6>
 801e556:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 801e55a:	ee86 7b00 	vdiv.f64	d7, d6, d0
 801e55e:	ed8d 7b00 	vstr	d7, [sp]
 801e562:	ed9d 0b00 	vldr	d0, [sp]
 801e566:	e7ca      	b.n	801e4fe <pow+0xd6>
 801e568:	2c00      	cmp	r4, #0
 801e56a:	da2b      	bge.n	801e5c4 <pow+0x19c>
 801e56c:	4651      	mov	r1, sl
 801e56e:	f7ff ff25 	bl	801e3bc <checkint>
 801e572:	b930      	cbnz	r0, 801e582 <pow+0x15a>
 801e574:	b007      	add	sp, #28
 801e576:	ecbd 8b0a 	vpop	{d8-d12}
 801e57a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e57e:	f000 b9ef 	b.w	801e960 <__math_invalid>
 801e582:	1e41      	subs	r1, r0, #1
 801e584:	4248      	negs	r0, r1
 801e586:	4148      	adcs	r0, r1
 801e588:	0480      	lsls	r0, r0, #18
 801e58a:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 801e58e:	f3c8 0c0a 	ubfx	ip, r8, #0, #11
 801e592:	f3c6 020a 	ubfx	r2, r6, #0, #11
 801e596:	f2a2 33be 	subw	r3, r2, #958	@ 0x3be
 801e59a:	2b7f      	cmp	r3, #127	@ 0x7f
 801e59c:	d92d      	bls.n	801e5fa <pow+0x1d2>
 801e59e:	4b96      	ldr	r3, [pc, #600]	@ (801e7f8 <pow+0x3d0>)
 801e5a0:	2000      	movs	r0, #0
 801e5a2:	429c      	cmp	r4, r3
 801e5a4:	bf08      	it	eq
 801e5a6:	4285      	cmpeq	r5, r0
 801e5a8:	f43f af7a 	beq.w	801e4a0 <pow+0x78>
 801e5ac:	f240 31bd 	movw	r1, #957	@ 0x3bd
 801e5b0:	428a      	cmp	r2, r1
 801e5b2:	d80c      	bhi.n	801e5ce <pow+0x1a6>
 801e5b4:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 801e5b8:	42a8      	cmp	r0, r5
 801e5ba:	41a3      	sbcs	r3, r4
 801e5bc:	d204      	bcs.n	801e5c8 <pow+0x1a0>
 801e5be:	ee31 0b00 	vadd.f64	d0, d1, d0
 801e5c2:	e79c      	b.n	801e4fe <pow+0xd6>
 801e5c4:	2000      	movs	r0, #0
 801e5c6:	e7e4      	b.n	801e592 <pow+0x16a>
 801e5c8:	ee30 0b41 	vsub.f64	d0, d0, d1
 801e5cc:	e797      	b.n	801e4fe <pow+0xd6>
 801e5ce:	2d01      	cmp	r5, #1
 801e5d0:	eb74 0303 	sbcs.w	r3, r4, r3
 801e5d4:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 801e5d8:	bf34      	ite	cc
 801e5da:	2301      	movcc	r3, #1
 801e5dc:	2300      	movcs	r3, #0
 801e5de:	4296      	cmp	r6, r2
 801e5e0:	bf8c      	ite	hi
 801e5e2:	2600      	movhi	r6, #0
 801e5e4:	2601      	movls	r6, #1
 801e5e6:	42b3      	cmp	r3, r6
 801e5e8:	f000 809c 	beq.w	801e724 <pow+0x2fc>
 801e5ec:	b007      	add	sp, #28
 801e5ee:	ecbd 8b0a 	vpop	{d8-d12}
 801e5f2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e5f6:	f000 b993 	b.w	801e920 <__math_oflow>
 801e5fa:	f1bc 0f00 	cmp.w	ip, #0
 801e5fe:	d10a      	bne.n	801e616 <pow+0x1ee>
 801e600:	ed9f 7b79 	vldr	d7, [pc, #484]	@ 801e7e8 <pow+0x3c0>
 801e604:	ee20 7b07 	vmul.f64	d7, d0, d7
 801e608:	ec53 2b17 	vmov	r2, r3, d7
 801e60c:	f023 4400 	bic.w	r4, r3, #2147483648	@ 0x80000000
 801e610:	4615      	mov	r5, r2
 801e612:	f1a4 7450 	sub.w	r4, r4, #54525952	@ 0x3400000
 801e616:	4a7c      	ldr	r2, [pc, #496]	@ (801e808 <pow+0x3e0>)
 801e618:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 801e61c:	4422      	add	r2, r4
 801e61e:	1513      	asrs	r3, r2, #20
 801e620:	f3c2 3146 	ubfx	r1, r2, #13, #7
 801e624:	ee03 3a10 	vmov	s6, r3
 801e628:	0d12      	lsrs	r2, r2, #20
 801e62a:	4b78      	ldr	r3, [pc, #480]	@ (801e80c <pow+0x3e4>)
 801e62c:	0512      	lsls	r2, r2, #20
 801e62e:	eb03 1641 	add.w	r6, r3, r1, lsl #5
 801e632:	1aa7      	subs	r7, r4, r2
 801e634:	eb03 1241 	add.w	r2, r3, r1, lsl #5
 801e638:	ed92 5b12 	vldr	d5, [r2, #72]	@ 0x48
 801e63c:	ed96 7b18 	vldr	d7, [r6, #96]	@ 0x60
 801e640:	1e2e      	subs	r6, r5, #0
 801e642:	ec47 6b14 	vmov	d4, r6, r7
 801e646:	ed92 2b16 	vldr	d2, [r2, #88]	@ 0x58
 801e64a:	eea4 6b05 	vfma.f64	d6, d4, d5
 801e64e:	ed93 5b00 	vldr	d5, [r3]
 801e652:	eeb8 3bc3 	vcvt.f64.s32	d3, s6
 801e656:	eea3 2b05 	vfma.f64	d2, d3, d5
 801e65a:	ed93 5b02 	vldr	d5, [r3, #8]
 801e65e:	ee36 4b02 	vadd.f64	d4, d6, d2
 801e662:	ee32 2b44 	vsub.f64	d2, d2, d4
 801e666:	eea3 7b05 	vfma.f64	d7, d3, d5
 801e66a:	ed93 5b04 	vldr	d5, [r3, #16]
 801e66e:	ee32 2b06 	vadd.f64	d2, d2, d6
 801e672:	ee37 7b02 	vadd.f64	d7, d7, d2
 801e676:	ee26 5b05 	vmul.f64	d5, d6, d5
 801e67a:	ee26 0b05 	vmul.f64	d0, d6, d5
 801e67e:	ee34 8b00 	vadd.f64	d8, d4, d0
 801e682:	eeb0 9b40 	vmov.f64	d9, d0
 801e686:	ee34 4b48 	vsub.f64	d4, d4, d8
 801e68a:	ee96 9b05 	vfnms.f64	d9, d6, d5
 801e68e:	ee34 ab00 	vadd.f64	d10, d4, d0
 801e692:	ed93 5b06 	vldr	d5, [r3, #24]
 801e696:	ee26 bb00 	vmul.f64	d11, d6, d0
 801e69a:	ee37 7b09 	vadd.f64	d7, d7, d9
 801e69e:	ed93 4b08 	vldr	d4, [r3, #32]
 801e6a2:	ee37 7b0a 	vadd.f64	d7, d7, d10
 801e6a6:	ed93 3b0c 	vldr	d3, [r3, #48]	@ 0x30
 801e6aa:	eea6 5b04 	vfma.f64	d5, d6, d4
 801e6ae:	ed93 4b0a 	vldr	d4, [r3, #40]	@ 0x28
 801e6b2:	ed93 cb10 	vldr	d12, [r3, #64]	@ 0x40
 801e6b6:	eea6 4b03 	vfma.f64	d4, d6, d3
 801e6ba:	ed93 3b0e 	vldr	d3, [r3, #56]	@ 0x38
 801e6be:	eea6 3b0c 	vfma.f64	d3, d6, d12
 801e6c2:	eea0 4b03 	vfma.f64	d4, d0, d3
 801e6c6:	eea0 5b04 	vfma.f64	d5, d0, d4
 801e6ca:	eeab 7b05 	vfma.f64	d7, d11, d5
 801e6ce:	ee38 4b07 	vadd.f64	d4, d8, d7
 801e6d2:	ee21 6b04 	vmul.f64	d6, d1, d4
 801e6d6:	ee16 3a90 	vmov	r3, s13
 801e6da:	eeb0 5b46 	vmov.f64	d5, d6
 801e6de:	f3c3 560a 	ubfx	r6, r3, #20, #11
 801e6e2:	f46f 7272 	mvn.w	r2, #968	@ 0x3c8
 801e6e6:	18b2      	adds	r2, r6, r2
 801e6e8:	2a3e      	cmp	r2, #62	@ 0x3e
 801e6ea:	ee91 5b04 	vfnms.f64	d5, d1, d4
 801e6ee:	ee38 8b44 	vsub.f64	d8, d8, d4
 801e6f2:	ee38 8b07 	vadd.f64	d8, d8, d7
 801e6f6:	eea1 5b08 	vfma.f64	d5, d1, d8
 801e6fa:	d91b      	bls.n	801e734 <pow+0x30c>
 801e6fc:	2a00      	cmp	r2, #0
 801e6fe:	da0b      	bge.n	801e718 <pow+0x2f0>
 801e700:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 801e704:	ee36 0b00 	vadd.f64	d0, d6, d0
 801e708:	2800      	cmp	r0, #0
 801e70a:	f43f aef8 	beq.w	801e4fe <pow+0xd6>
 801e70e:	eeb1 0b40 	vneg.f64	d0, d0
 801e712:	e6f4      	b.n	801e4fe <pow+0xd6>
 801e714:	2000      	movs	r0, #0
 801e716:	e77e      	b.n	801e616 <pow+0x1ee>
 801e718:	f5b6 6f81 	cmp.w	r6, #1032	@ 0x408
 801e71c:	d909      	bls.n	801e732 <pow+0x30a>
 801e71e:	2b00      	cmp	r3, #0
 801e720:	f6bf af64 	bge.w	801e5ec <pow+0x1c4>
 801e724:	b007      	add	sp, #28
 801e726:	ecbd 8b0a 	vpop	{d8-d12}
 801e72a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e72e:	f000 b8ef 	b.w	801e910 <__math_uflow>
 801e732:	2600      	movs	r6, #0
 801e734:	4936      	ldr	r1, [pc, #216]	@ (801e810 <pow+0x3e8>)
 801e736:	ed91 4b02 	vldr	d4, [r1, #8]
 801e73a:	ed91 3b00 	vldr	d3, [r1]
 801e73e:	eeb0 7b44 	vmov.f64	d7, d4
 801e742:	eea6 7b03 	vfma.f64	d7, d6, d3
 801e746:	ee17 5a10 	vmov	r5, s14
 801e74a:	ee37 7b44 	vsub.f64	d7, d7, d4
 801e74e:	ed91 4b04 	vldr	d4, [r1, #16]
 801e752:	f005 037f 	and.w	r3, r5, #127	@ 0x7f
 801e756:	eea7 6b04 	vfma.f64	d6, d7, d4
 801e75a:	ed91 4b06 	vldr	d4, [r1, #24]
 801e75e:	18dc      	adds	r4, r3, r3
 801e760:	f104 030f 	add.w	r3, r4, #15
 801e764:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 801e768:	eea7 6b04 	vfma.f64	d6, d7, d4
 801e76c:	ed91 3b0a 	vldr	d3, [r1, #40]	@ 0x28
 801e770:	ee35 5b06 	vadd.f64	d5, d5, d6
 801e774:	ee25 6b05 	vmul.f64	d6, d5, d5
 801e778:	ed94 7b1c 	vldr	d7, [r4, #112]	@ 0x70
 801e77c:	ed91 4b08 	vldr	d4, [r1, #32]
 801e780:	ee35 7b07 	vadd.f64	d7, d5, d7
 801e784:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 801e788:	eea5 4b03 	vfma.f64	d4, d5, d3
 801e78c:	ed91 3b0e 	vldr	d3, [r1, #56]	@ 0x38
 801e790:	eea6 7b04 	vfma.f64	d7, d6, d4
 801e794:	ee26 6b06 	vmul.f64	d6, d6, d6
 801e798:	ed91 4b0c 	vldr	d4, [r1, #48]	@ 0x30
 801e79c:	f851 c033 	ldr.w	ip, [r1, r3, lsl #3]
 801e7a0:	f8d2 e004 	ldr.w	lr, [r2, #4]
 801e7a4:	eea5 4b03 	vfma.f64	d4, d5, d3
 801e7a8:	1940      	adds	r0, r0, r5
 801e7aa:	2700      	movs	r7, #0
 801e7ac:	eb17 020c 	adds.w	r2, r7, ip
 801e7b0:	eb0e 3340 	add.w	r3, lr, r0, lsl #13
 801e7b4:	eea6 7b04 	vfma.f64	d7, d6, d4
 801e7b8:	2e00      	cmp	r6, #0
 801e7ba:	d175      	bne.n	801e8a8 <pow+0x480>
 801e7bc:	42bd      	cmp	r5, r7
 801e7be:	db29      	blt.n	801e814 <pow+0x3ec>
 801e7c0:	f103 4140 	add.w	r1, r3, #3221225472	@ 0xc0000000
 801e7c4:	f501 0170 	add.w	r1, r1, #15728640	@ 0xf00000
 801e7c8:	4610      	mov	r0, r2
 801e7ca:	ec41 0b10 	vmov	d0, r0, r1
 801e7ce:	eea7 0b00 	vfma.f64	d0, d7, d0
 801e7d2:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 801e7f0 <pow+0x3c8>
 801e7d6:	ee20 0b07 	vmul.f64	d0, d0, d7
 801e7da:	b007      	add	sp, #28
 801e7dc:	ecbd 8b0a 	vpop	{d8-d12}
 801e7e0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e7e4:	f000 b8d4 	b.w	801e990 <__math_check_oflow>
 801e7e8:	00000000 	.word	0x00000000
 801e7ec:	43300000 	.word	0x43300000
 801e7f0:	00000000 	.word	0x00000000
 801e7f4:	7f000000 	.word	0x7f000000
 801e7f8:	3ff00000 	.word	0x3ff00000
 801e7fc:	fff00000 	.word	0xfff00000
 801e800:	ffe00000 	.word	0xffe00000
 801e804:	7fe00000 	.word	0x7fe00000
 801e808:	c0196aab 	.word	0xc0196aab
 801e80c:	0801ef10 	.word	0x0801ef10
 801e810:	0801ff58 	.word	0x0801ff58
 801e814:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 801e818:	f501 1100 	add.w	r1, r1, #2097152	@ 0x200000
 801e81c:	4610      	mov	r0, r2
 801e81e:	ec41 0b15 	vmov	d5, r0, r1
 801e822:	eeb7 3b00 	vmov.f64	d3, #112	@ 0x3f800000  1.0
 801e826:	ee27 6b05 	vmul.f64	d6, d7, d5
 801e82a:	ee35 7b06 	vadd.f64	d7, d5, d6
 801e82e:	eeb0 4bc7 	vabs.f64	d4, d7
 801e832:	eeb4 4bc3 	vcmpe.f64	d4, d3
 801e836:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e83a:	ed9f 0b1f 	vldr	d0, [pc, #124]	@ 801e8b8 <pow+0x490>
 801e83e:	d52a      	bpl.n	801e896 <pow+0x46e>
 801e840:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801e844:	ee35 5b47 	vsub.f64	d5, d5, d7
 801e848:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e84c:	ee35 5b06 	vadd.f64	d5, d5, d6
 801e850:	eebf 4b00 	vmov.f64	d4, #240	@ 0xbf800000 -1.0
 801e854:	bf58      	it	pl
 801e856:	eeb0 4b43 	vmovpl.f64	d4, d3
 801e85a:	ee37 3b04 	vadd.f64	d3, d7, d4
 801e85e:	ee34 6b43 	vsub.f64	d6, d4, d3
 801e862:	ee36 6b07 	vadd.f64	d6, d6, d7
 801e866:	ee36 6b05 	vadd.f64	d6, d6, d5
 801e86a:	ee36 6b03 	vadd.f64	d6, d6, d3
 801e86e:	ee36 7b44 	vsub.f64	d7, d6, d4
 801e872:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801e876:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e87a:	d104      	bne.n	801e886 <pow+0x45e>
 801e87c:	4632      	mov	r2, r6
 801e87e:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 801e882:	ec43 2b17 	vmov	d7, r2, r3
 801e886:	ed8d 0b02 	vstr	d0, [sp, #8]
 801e88a:	ed9d 6b02 	vldr	d6, [sp, #8]
 801e88e:	ee26 6b00 	vmul.f64	d6, d6, d0
 801e892:	ed8d 6b04 	vstr	d6, [sp, #16]
 801e896:	ee27 0b00 	vmul.f64	d0, d7, d0
 801e89a:	b007      	add	sp, #28
 801e89c:	ecbd 8b0a 	vpop	{d8-d12}
 801e8a0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e8a4:	f000 b86b 	b.w	801e97e <__math_check_uflow>
 801e8a8:	ec43 2b10 	vmov	d0, r2, r3
 801e8ac:	eea7 0b00 	vfma.f64	d0, d7, d0
 801e8b0:	e625      	b.n	801e4fe <pow+0xd6>
 801e8b2:	ed9f 0b03 	vldr	d0, [pc, #12]	@ 801e8c0 <pow+0x498>
 801e8b6:	e622      	b.n	801e4fe <pow+0xd6>
 801e8b8:	00000000 	.word	0x00000000
 801e8bc:	00100000 	.word	0x00100000
	...

0801e8c8 <__ieee754_sqrt>:
 801e8c8:	eeb1 0bc0 	vsqrt.f64	d0, d0
 801e8cc:	4770      	bx	lr

0801e8ce <with_errno>:
 801e8ce:	b510      	push	{r4, lr}
 801e8d0:	ed2d 8b02 	vpush	{d8}
 801e8d4:	eeb0 8b40 	vmov.f64	d8, d0
 801e8d8:	4604      	mov	r4, r0
 801e8da:	f7ff fc23 	bl	801e124 <__errno>
 801e8de:	eeb0 0b48 	vmov.f64	d0, d8
 801e8e2:	ecbd 8b02 	vpop	{d8}
 801e8e6:	6004      	str	r4, [r0, #0]
 801e8e8:	bd10      	pop	{r4, pc}

0801e8ea <xflow>:
 801e8ea:	b082      	sub	sp, #8
 801e8ec:	b158      	cbz	r0, 801e906 <xflow+0x1c>
 801e8ee:	eeb1 7b40 	vneg.f64	d7, d0
 801e8f2:	ed8d 7b00 	vstr	d7, [sp]
 801e8f6:	ed9d 7b00 	vldr	d7, [sp]
 801e8fa:	2022      	movs	r0, #34	@ 0x22
 801e8fc:	ee20 0b07 	vmul.f64	d0, d0, d7
 801e900:	b002      	add	sp, #8
 801e902:	f7ff bfe4 	b.w	801e8ce <with_errno>
 801e906:	eeb0 7b40 	vmov.f64	d7, d0
 801e90a:	e7f2      	b.n	801e8f2 <xflow+0x8>
 801e90c:	0000      	movs	r0, r0
	...

0801e910 <__math_uflow>:
 801e910:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 801e918 <__math_uflow+0x8>
 801e914:	f7ff bfe9 	b.w	801e8ea <xflow>
 801e918:	00000000 	.word	0x00000000
 801e91c:	10000000 	.word	0x10000000

0801e920 <__math_oflow>:
 801e920:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 801e928 <__math_oflow+0x8>
 801e924:	f7ff bfe1 	b.w	801e8ea <xflow>
 801e928:	00000000 	.word	0x00000000
 801e92c:	70000000 	.word	0x70000000

0801e930 <__math_divzero>:
 801e930:	b082      	sub	sp, #8
 801e932:	2800      	cmp	r0, #0
 801e934:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 801e938:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
 801e93c:	fe07 7b06 	vseleq.f64	d7, d7, d6
 801e940:	ed8d 7b00 	vstr	d7, [sp]
 801e944:	ed9d 0b00 	vldr	d0, [sp]
 801e948:	ed9f 7b03 	vldr	d7, [pc, #12]	@ 801e958 <__math_divzero+0x28>
 801e94c:	2022      	movs	r0, #34	@ 0x22
 801e94e:	ee80 0b07 	vdiv.f64	d0, d0, d7
 801e952:	b002      	add	sp, #8
 801e954:	f7ff bfbb 	b.w	801e8ce <with_errno>
	...

0801e960 <__math_invalid>:
 801e960:	eeb0 7b40 	vmov.f64	d7, d0
 801e964:	eeb4 7b47 	vcmp.f64	d7, d7
 801e968:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e96c:	ee30 6b40 	vsub.f64	d6, d0, d0
 801e970:	ee86 0b06 	vdiv.f64	d0, d6, d6
 801e974:	d602      	bvs.n	801e97c <__math_invalid+0x1c>
 801e976:	2021      	movs	r0, #33	@ 0x21
 801e978:	f7ff bfa9 	b.w	801e8ce <with_errno>
 801e97c:	4770      	bx	lr

0801e97e <__math_check_uflow>:
 801e97e:	eeb5 0b40 	vcmp.f64	d0, #0.0
 801e982:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e986:	d102      	bne.n	801e98e <__math_check_uflow+0x10>
 801e988:	2022      	movs	r0, #34	@ 0x22
 801e98a:	f7ff bfa0 	b.w	801e8ce <with_errno>
 801e98e:	4770      	bx	lr

0801e990 <__math_check_oflow>:
 801e990:	ed9f 6b07 	vldr	d6, [pc, #28]	@ 801e9b0 <__math_check_oflow+0x20>
 801e994:	eeb0 7bc0 	vabs.f64	d7, d0
 801e998:	eeb4 7b46 	vcmp.f64	d7, d6
 801e99c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e9a0:	dd02      	ble.n	801e9a8 <__math_check_oflow+0x18>
 801e9a2:	2022      	movs	r0, #34	@ 0x22
 801e9a4:	f7ff bf93 	b.w	801e8ce <with_errno>
 801e9a8:	4770      	bx	lr
 801e9aa:	bf00      	nop
 801e9ac:	f3af 8000 	nop.w
 801e9b0:	ffffffff 	.word	0xffffffff
 801e9b4:	7fefffff 	.word	0x7fefffff

0801e9b8 <_init>:
 801e9b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e9ba:	bf00      	nop
 801e9bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801e9be:	bc08      	pop	{r3}
 801e9c0:	469e      	mov	lr, r3
 801e9c2:	4770      	bx	lr

0801e9c4 <_fini>:
 801e9c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e9c6:	bf00      	nop
 801e9c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801e9ca:	bc08      	pop	{r3}
 801e9cc:	469e      	mov	lr, r3
 801e9ce:	4770      	bx	lr
